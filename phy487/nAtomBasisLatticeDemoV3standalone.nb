(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    534353,      10126]
NotebookOptionsPosition[    533978,      10109]
NotebookOutlinePosition[    534321,      10124]
CellTagsIndexPosition[    534278,      10121]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"TODO", "\[IndentingNewLine]", GridBox[{
       {
        RowBox[{"put", " ", "in", " ", "snapshots"}]},
       {
        RowBox[{
        "snapshots", " ", "and", " ", "thumbs", " ", "redrawing", " ", 
         "automatically", " ", "on", " ", "update", " ", "of", " ", 
         RowBox[{"alternate", "."}]}]},
       {
        RowBox[{"remove", " ", "the", " ", "global", " ", "parameter", " ", 
         RowBox[{"passing", ":", " ", 
          RowBox[{"done", " ", "up", " ", "to", " ", 
           RowBox[{"HERE", ".", "  ", "\[IndentingNewLine]", "That"}], " ", 
           RowBox[{"isn", "'"}], "t", " ", "enough", " ", "to", " ", "fix", 
           " ", "the", " ", "cut", " ", "and", " ", "paste", " ", "of", " ", 
           "the", " ", "output", " ", 
           RowBox[{"cell", "."}]}]}]}]},
       {
        RowBox[{
        "Animate", " ", "time", " ", "in", " ", "dynamics", " ", "tab", " ", 
         "causes", " ", "switch", " ", "back", " ", "to", " ", "param", " ", 
         RowBox[{"tab", "."}]}]},
       {
        RowBox[{
        "On", " ", "removal", " ", "of", " ", "2", " ", "mass", " ", "locs", 
         " ", "see", " ", "transient", " ", "garbage", " ", "in", " ", "the", 
         " ", "param", " ", "tab", " ", "for", " ", "k5", " ", 
         RowBox[{"temporarily", "."}]}]},
       {
        RowBox[{"tab", " ", "image", " ", "size", " ", "commented", " ", 
         RowBox[{"out", ".", "  ", "Will"}], " ", "the", " ", "text", " ", 
         "be", " ", "so", " ", "large", " ", "in", " ", "demo", " ", 
         RowBox[{"config", "?", "  ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"i", ".", "e", ".", " ", "possible"}], " ", "difference", 
            " ", "in", " ", "style", " ", 
            RowBox[{"sheet", "?"}]}], ")"}]}]}]},
       {
        RowBox[{
        "could", " ", "possibly", " ", "restore", " ", "the", " ", "previous",
          " ", "Tab", " ", "configuruation", " ", "as", " ", "a", " ", 
         RowBox[{"control", ".", "\[IndentingNewLine]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "assuming", " ", "no", " ", "globals", " ", "in", " ", "the", " ",
              "non"}], "-", 
            RowBox[{
            "control", " ", "functions", " ", "is", " ", "sufficient"}]}], 
           ")"}], ".", "  ", "That"}], " ", "could", " ", "fix", " ", "the", 
         " ", "tab", " ", "image", " ", "size", " ", "issue", " ", 
         RowBox[{"above", ".", "\[IndentingNewLine]", "That"}], " ", "could", 
         " ", "also", " ", "fix", " ", "the", " ", "tab", " ", "switching", 
         " ", "issue", " ", "on", " ", "dyn", " ", 
         RowBox[{"amimate", "."}]}]}
      },
      GridBoxDividers->{
       "Columns" -> {True, {False}, True}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{True}}, "RowsIndexed" -> {}}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "Minor", " ", "maintaince",
      " ", "TODOs", " ", 
     RowBox[{"(", 
      RowBox[{"nice", " ", "to", " ", "haves"}], ")"}]}], ":", 
    "\[IndentingNewLine]", GridBox[{
      {
       RowBox[{
        RowBox[{
        "implement", " ", "a", " ", "min", " ", "separation", " ", "for", " ",
          "the", " ", "equilibrium", " ", "mass", " ", "positions", " ", 
         "too", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
           "as", " ", "done", " ", "for", " ", "the", " ", "lattice", " ", 
            "vectors"}], ")"}], ".", " ", "\[IndentingNewLine]", 
          "Trickier"}]}], ",", " ", 
        RowBox[{
        "since", " ", "that", " ", "should", " ", "be", " ", "based", " ", 
         "on", " ", "the", " ", "separations", " ", "in", " ", "the", " ", 
         "origin", " ", "cell"}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{
        "and", " ", "not", " ", "the", " ", "obsolute", " ", "separations", 
         " ", "of", " ", "the", " ", 
         RowBox[{"locators", "."}]}]}]},
      {
       RowBox[{
       "would", " ", "be", " ", "cool", " ", "to", " ", "make", " ", "qLoc", 
        " ", "a", " ", "pair", " ", "of", " ", "Locators", " ", 
        RowBox[{"that", ":", "\[IndentingNewLine]", " ", 
         RowBox[{
         "trace", " ", "out", " ", "constrained", " ", "positions", " ", 
          "along", " ", "the", " ", "2", " ", "Pi", " ", "scaled", " ", 
          "reciprocal", " ", "lattice", " ", 
          RowBox[{"vectors", ".", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
            "returning", " ", "the", " ", "distance", " ", "from", " ", "the",
              " ", "origin", " ", "of", " ", "each", " ", "of", " ", "those", 
             " ", "locators"}], ")"}]}]}]}]}]},
      {
       RowBox[{"a", " ", "message", " ", "box", " ", "on", " ", "user", " ", 
        RowBox[{"error", ":", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"-", " ", "when"}], " ", "an", " ", "angle", " ", "or", " ",
           "distance", " ", "from", " ", "origin", " ", "change", " ", "has", 
          " ", "driven", " ", "a", " ", "reset", " ", "of", " ", "the", " ", 
          "lattice", " ", 
          RowBox[{"vectors", ".", "\[IndentingNewLine]", 
           RowBox[{"-", " ", "when"}]}], " ", "too", " ", "many", " ", "of", 
          " ", "the", " ", "locators", " ", "have", " ", "been", " ", 
          "deleted", " ", "and", " ", "a", " ", "forced", " ", "reset", " ", 
          "to", " ", "the", " ", "defaults", " ", 
          RowBox[{"occurs", "."}]}]}]}]},
      {
       RowBox[{
        RowBox[{
        "some", " ", "of", " ", "the", " ", "usage", " ", "messages", " ", 
         "are", " ", "now", " ", "out", " ", "of", " ", "date"}], " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
          "all", " ", "commented", " ", "out", " ", "with", " ", "move", " ", 
           "of", " ", "the", " ", "functions", " ", "from", " ", "global", 
           " ", "init", " ", "section", " ", "to", " ", "the", " ", 
           "Manipulate", " ", "Initializer", " ", "section"}], ")"}], "."}]}]},
      {
       RowBox[{
       "Can", " ", "the", " ", "frequency", " ", "qPlaneLoc", " ", 
        "LocatorPane", " ", "look", " ", "more", " ", "like", " ", "Slider2D",
         " ", "in", " ", "the", " ", "dynamics", " ", "tab", " ", "for", " ", 
        RowBox[{"consistency", "?"}]}]},
      {
       RowBox[{
        RowBox[{
        "Am", " ", "using", " ", "a", " ", "calculated", " ", "value", " ", 
         "for", " ", "the", " ", "max", " ", "freq", " ", "for", " ", "the", 
         " ", "freq", " ", "plot", " ", "intersection", " ", 
         RowBox[{"plane", ".", " ", "\[IndentingNewLine]", "Hardcoded"}], " ",
          "this", " ", "to", " ", "magic", " ", "#", " ", 
         RowBox[{"that", "'"}], "s", " ", "out", " ", "of", " ", "the", " ", 
         "graphic", " ", 
         RowBox[{"(", "23", ")"}]}], ",", " ", 
        RowBox[{
        "but", " ", "that", " ", "could", " ", "be", " ", "wrong", " ", "for",
          " ", "some", " ", "params"}]}]},
      {
       RowBox[{
        RowBox[{
        "Scaling", " ", "of", " ", "the", " ", "masses", " ", "ended", " ", 
         "up", " ", "different", " ", "for", " ", "the", " ", "dynPlot", " ", 
         RowBox[{"vs", ".", " ", "parameters"}], " ", 
         RowBox[{"tab", ".", " ", "\[IndentingNewLine]", "Hacked"}], " ", 
         "the", " ", "dynPlot", " ", "scaling", " ", "for", " ", "now"}], ",",
         " ", 
        RowBox[{"to", " ", "be", " ", "a", " ", "bit", " ", 
         RowBox[{"closer", "."}]}]}]},
      {
       RowBox[{
       "would", " ", "have", " ", "been", " ", "cleaner", " ", "to", " ", 
        "use", " ", "AppendTo", " ", "for", " ", "growKarray"}]}
     },
     GridBoxDividers->{
      "Columns" -> {True, {False}, True}, "ColumnsIndexed" -> {}, 
       "Rows" -> {{True}}, "RowsIndexed" -> {}}]}], "\[IndentingNewLine]", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{
     "glConstMinSquaredDistanceFromOrigin", ",", 
      "glConstMinAngleBetweenLatticeVectors", ",", "glConstLocDefault", ",", 
      "glConstDefaultMass", ",", "glConstKDefaults", ",", "glConstKMin", ",", 
      "glConstKMax", ",", "glConstMMax", ",", "glConstWindowHalfWidth", ",", 
      "glConstSpringColors", ",", "glConstPrimaryDisplaySize", ",", 
      "glConstTextDisplayOffsetHack", ",", "glConstNeighboringCellIndexes", 
      ",", "glConstSpringColorsByN"}], "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"glConstMinAngleBetweenLatticeVectors", "=", 
      RowBox[{"Pi", "/", "6"}]}], ";", "\n", 
     RowBox[{"glConstLocDefault", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0.1", ",", "1.3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1.9", ",", "0.8"}], "}"}]}], "}"}]}], ";", "\n", 
     RowBox[{"glConstDefaultMass", "=", "20"}], ";", "\n", 
     RowBox[{"glConstKDefaults", "=", 
      RowBox[{"{", 
       RowBox[{"0.25", ",", "0.25", ",", "0.25", ",", "0.25", ",", "0.25"}], 
       "}"}]}], ";", "\n", 
     RowBox[{"glConstKMin", "=", "0.05"}], ";", "\n", 
     RowBox[{"glConstKMax", "=", "1"}], ";", "\n", 
     RowBox[{"glConstMMax", "=", "30"}], ";", "\n", 
     RowBox[{"glConstWindowHalfWidth", "=", "3"}], ";", "\n", 
     RowBox[{"glConstSpringColors", "=", 
      RowBox[{"Darker", "@", 
       RowBox[{"{", 
        RowBox[{
        "Orange", ",", "Green", ",", "Purple", ",", "Cyan", ",", "Yellow"}], 
        "}"}]}]}], ";", "\n", 
     RowBox[{"glConstPrimaryDisplaySize", "=", 
      RowBox[{"{", 
       RowBox[{"380", ",", "380"}], "}"}]}], ";", "\n", 
     RowBox[{"glConstTextDisplayOffsetHack", "=", 
      RowBox[{"{", 
       RowBox[{"0.25", ",", "0.25"}], "}"}]}], ";", "\n", 
     RowBox[{"glConstNeighboringCellIndexes", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ";"}], "*)"}], "\n", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", 
     RowBox[{
     "adjustedmoSel", ",", "returnAlteredKArrayElements", ",", 
      "returnAlteredKarrayOriginElement", ",", "calcDynamics", ",", 
      "calcLineTable", ",", "calcReciprocalBasis", ",", "calculateCouplings", 
      ",", "constructKArray", ",", "constructKArrayElements", ",", 
      "couplingLocator", ",", "dynamicsControls", ",", "dynamicsMatrix", ",", 
      "freqControls", ",", "frequencyPlotCalc", ",", 
      "returnKarrayForAdditionalMassIndex", ",", "indexLabel", ",", 
      "selectOriginVFromKarray", ",", "selectVFromKarray", ",", "kLable", ",",
       "km1", ",", "km2", ",", "km3", ",", "km4", ",", "km5a", ",", "km5b", 
      ",", "locDependent", ",", "m2Setter", ",", "massColors", ",", 
      "massLabel", ",", "massSetter", ",", "nMassesFromLocArray", ",", 
      "oneTermOfdynamicsMatrix", ",", "plotSprings", " ", ",", "pointsTable", 
      ",", "projOp", ",", "projOpU", ",", 
      "resetLatticeVectorsIfAngleTooSmall", ",", "showDynamics", ",", 
      "showFreqPlot", ",", "springPoints"}], "]"}], " ", ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.6012863759125156`*^9, 3.6012863762205334`*^9}, {
   3.6012897613641524`*^9, 3.6012897620111895`*^9}, {3.601290186915493*^9, 
   3.601290232868121*^9}, 3.601290334119912*^9, {3.601290369314925*^9, 
   3.601290369607942*^9}, {3.601290405394989*^9, 3.601290421340901*^9}, {
   3.60129051695537*^9, 3.6012905688753395`*^9}, {3.601290614747963*^9, 
   3.6012907627324276`*^9}, {3.601290793049162*^9, 3.601290830471302*^9}, {
   3.6012908618180947`*^9, 3.601290863672201*^9}, {3.601290910210863*^9, 
   3.6012909139770784`*^9}, {3.6012909521812634`*^9, 
   3.6012909535923443`*^9}, {3.601291050965914*^9, 3.6012911885117807`*^9}, {
   3.601291284430267*^9, 3.601291299921153*^9}, {3.6012914194619904`*^9, 
   3.601291480801499*^9}, {3.60129151806863*^9, 3.601291542727041*^9}, {
   3.601291734337*^9, 3.6012918253262043`*^9}, {3.6012919447010326`*^9, 
   3.601291995029911*^9}, {3.6012921205490904`*^9, 3.6012921499607725`*^9}, {
   3.60129224538023*^9, 3.6012922672424803`*^9}, {3.601292327186909*^9, 
   3.60129233489135*^9}, {3.601292386309291*^9, 3.601292565837559*^9}, 
   3.6012926194776273`*^9, {3.601292659090893*^9, 3.6012927056735573`*^9}, {
   3.6012927413465977`*^9, 3.6012927519962068`*^9}, {3.6012927968997755`*^9, 
   3.60129284558356*^9}, {3.601292880991585*^9, 3.6012931467287846`*^9}, {
   3.6012931836358953`*^9, 3.601293204795106*^9}, {3.6012933867115107`*^9, 
   3.601293484246089*^9}, {3.60129353653608*^9, 3.601293665198439*^9}, {
   3.6012936960742054`*^9, 3.601293746389083*^9}, {3.6012937797609916`*^9, 
   3.6012938980907598`*^9}, {3.6012939305686173`*^9, 
   3.6012942857769337`*^9}, {3.601294353607814*^9, 3.6012943621022997`*^9}, {
   3.6012944634840984`*^9, 3.6012945013092623`*^9}, {3.6012945355572205`*^9, 
   3.6012945421796*^9}, {3.601296039086218*^9, 3.6012960892230854`*^9}, {
   3.60129612864334*^9, 3.601296285366304*^9}, {3.601296543109046*^9, 
   3.601296635945356*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"tick", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"Grid", "[", 
     RowBox[{"{", 
      RowBox[{"{", "\[IndentingNewLine]", " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"TabView", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<dynamics\>\"", " ", "\[Rule]", "  ", 
             RowBox[{"Column", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "dynTab"}], " ", ";", 
               "dynamicsControls"}], " ", "]"}]}], "\[IndentingNewLine]", ",", 
            RowBox[{
            "\"\<\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))\>\
\"", " ", "\[Rule]", "  ", 
             RowBox[{"Column", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "freqTab"}], " ", ";", 
               "freqControls"}], " ", "]"}]}], "\[IndentingNewLine]", ",", 
            " ", 
            RowBox[{"\"\<parameters\>\"", "\[Rule]", 
             RowBox[{"Grid", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "parametersTab"}], " ", 
               ";", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{"Dynamic", "@"}], "*)"}], 
               RowBox[{"If", "[", " ", 
                RowBox[{
                 RowBox[{"rawNumberOfMasses", " ", "\[Equal]", " ", "1"}], 
                 ",", "\[IndentingNewLine]", 
                 RowBox[{"{", " ", 
                  RowBox[{
                  "massSetter", ",", "m2Setter", ",", "km1", ",", "km2", ",", 
                   "km3", ",", "km4"}], " ", "}"}], " ", 
                 "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<mp: \>\"", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mPosFirstCell\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<tn: \>\"", ",", " ", "tabNumber"}], "}"}], 
                    ","}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<qLoc = \>\"", ",", " ", "qLoc"}], "}"}], 
                    ","}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<qPlaneLoc = \>\"", ",", " ", "qPlaneLoc"}], 
                    "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<u = \>\"", ",", " ", "u"}], "}"}], ","}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", " ", 
                    RowBox[{"\"\<qr:\>\"", " ", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], ")"}]}], "}"}],
                     ","}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<cd:\>\"", ",", " ", 
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], "}"}], ","}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<cd:\>\"", ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}]}], "}"}], 
                    ","}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", " ", 
                    RowBox[{"\"\<m1Sel, m2Sel, moSel = \>\"", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"m1Sel", ",", " ", "m2Sel", ",", " ", "moSel"}], 
                    "}"}]}], "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", " ", 
                    RowBox[{
                    "\"\<rawArrayOfMasses = \>\"", ",", " ", 
                    "rawArrayOfMasses"}], " ", "}"}], ","}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<range \[Omega]: \>\"", ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"2", "rawNumberOfMasses"}], "]"}]}], "}"}], ","}],
                    "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<kArray = \>\"", ",", " ", "kArray"}], "}"}], 
                    ","}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<km: \>\"", ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], " ", "//", " ", 
                    "Max"}]}], "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<km: \>\"", ",", " ", 
                    RowBox[{"DeleteDuplicates", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ")"}]}]}], " ", 
                    "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<couplingData = \>\"", ",", " ", "couplingData"}], 
                    "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<k1, k2, k3, k4, k5 = \>\"", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    "k1", ",", " ", "k2", ",", " ", "k3", ",", " ", "k4", ",",
                     " ", "k5"}], "}"}]}], "}"}], ","}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<ms: \>\"", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<nm: \>\"", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<numberOfMasses\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<nm: \>\"", ",", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], "}"}], 
                    ","}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<re: \>\"", ",", " ", 
                    RowBox[{"2", " ", "Pi", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<reciprocalNorms\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}]}], "}"}], ","}],
                    "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<sc: \>\"", ",", " ", 
                    RowBox[{"DeleteDuplicates", "@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", " ", 
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{"glConstNeighboringCellIndexes", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
                    RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
                    RowBox[{"foo", "[", "n", "]"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"s", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}],
                     ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", 
                    "1"}], "]"}]}]}], " ", "}"}], ","}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<mm: \>\"", ",", 
                    RowBox[{
                    RowBox[{"matrix", "[", "qLoc", "]"}], " ", "//", " ", 
                    "MatrixForm"}]}], "}"}], ","}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<mm: \>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SplitBy", "[", " ", 
                    RowBox[{
                    RowBox[{"Sort", "@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"couplingData", ",", " ", "2"}], "]"}]}], " ", 
                    ",", " ", "First"}], " ", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "}"}], ","}], 
                   "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{
                  "massSetter", ",", "m2Setter", ",", "km1", ",", "km2", ",", 
                   "km3", ",", "km4", ",", " ", "km5a", ",", "km5b"}], " ", 
                  "}"}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", 
              RowBox[{"(*", "If", "*)"}], "\[IndentingNewLine]", "]"}]}]}], 
           " ", 
           RowBox[{"(*", 
            RowBox[{"param", " ", "Grid"}], "*)"}], "\[IndentingNewLine]", 
           "}"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{"Dynamic", " ", "@", "tabNumber"}]}], 
         RowBox[{"(*", 
          RowBox[{",", "\[IndentingNewLine]", 
           RowBox[{"ImageSize", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"250", ",", "350"}], "}"}]}]}], " ", "*)"}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Dynamic", "@", 
         RowBox[{"If", "[", " ", 
          RowBox[{
           RowBox[{"tabNumber", " ", "\[Equal]", " ", "dynTab"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", " ", 
              RowBox[{"bRefreshMatrix", ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"matrix", " ", "=", " ", 
                  RowBox[{"dynamicsMatrix", "[", " ", 
                   RowBox[{
                   "parameterLocatorDependencies", ",", " ", "couplingData"}],
                    " ", "]"}]}], " ", ";", 
                 RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
                 RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", 
                 ";", " ", 
                 RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
                ")"}], ","}], "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", " ", 
              RowBox[{"bRefreshDynamics", ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"dynamics", " ", "=", " ", 
                  RowBox[{"calcDynamics", "[", " ", 
                   RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", 
                   "]"}]}], " ", ";", 
                 RowBox[{"bRefreshDynamics", " ", "=", " ", "False"}], " ", 
                 ";", 
                 RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}]}], ")"}], 
               ","}], "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", " ", 
              RowBox[{"bRefreshDynPlot", ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"dynPlot", " ", "=", " ", 
                  RowBox[{"showDynamics", "[", " ", 
                   RowBox[{"parameterLocatorDependencies", ",", " ", 
                    RowBox[{"dynamics", "[", 
                    RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", 
                    "scale", ",", " ", "qLoc"}], " ", "]"}]}], " ", ";", 
                 RowBox[{"bRefreshDynPlot", " ", "=", " ", "False"}]}], ")"}],
                ","}], "]"}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"showDynamics", "[", " ", 
               RowBox[{"parameterLocatorDependencies", ",", " ", 
                RowBox[{"dynamics", "[", 
                 RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale", 
                ",", " ", "qLoc"}], " ", "]"}], "[", "tau", "]"}]}], 
            "\[IndentingNewLine]", ")"}], "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"Plot", "[", 
             RowBox[{"x", ",", 
              RowBox[{"{", 
               RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "*)"}], 
           "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"tabNumber", " ", "\[Equal]", " ", "freqTab"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", " ", 
                RowBox[{"bRefreshMatrix", ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"matrix", " ", "=", " ", 
                    RowBox[{"dynamicsMatrix", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", 
                    "couplingData"}], " ", "]"}]}], " ", ";", 
                   RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", 
                   ";", 
                   RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", 
                   ";", " ", 
                   RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ",
                   ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
               RowBox[{"If", "[", " ", 
                RowBox[{"bRefreshFreqPlot", ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"freqPlot", " ", "=", " ", 
                    RowBox[{"frequencyPlotCalc", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "matrix", ",", 
                    " ", "meshSize"}], "]"}]}], " ", ";", 
                   RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"Beep", "[", "]"}], " ", ";"}], "*)"}], 
                   RowBox[{"bRefreshFreqPlot", " ", "=", " ", "False"}]}], 
                  " ", ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
               RowBox[{"showFreqPlot", "[", " ", 
                RowBox[{"qPlaneLoc", ",", " ", "freqPlot"}], " ", "]"}]}], 
              "\[IndentingNewLine]", 
              RowBox[{"(*", "freqPlot", "*)"}], "\[IndentingNewLine]", 
              RowBox[{"(*", "matrix", "*)"}], "\[IndentingNewLine]", ")"}], 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"Plot", "[", 
               RowBox[{
                RowBox[{"-", "x"}], ",", 
                RowBox[{"{", 
                 RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "*)"}], 
             "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
             "couplingLocator"}], "\[IndentingNewLine]", " ", "]"}]}], 
          "]"}]}]}], " ", 
       RowBox[{"(*", 
        RowBox[{"If", ",", "If"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", "0", "*)"}], "\[IndentingNewLine]", "}"}], "}"}], 
     "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tick", ",", "False"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qPlaneLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tau", ",", "0"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"omegaIndex", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"scale", ",", " ", "0.2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"meshSize", ",", "8"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"matrix", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynamics", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshMatrix", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynamics", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshFreqPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tabNumber", ",", "1"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynTab", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqTab", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parametersTab", ",", " ", "3"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstMinSquaredDistanceFromOrigin", ",", " ", "0.1"}], "}"}],
      ",", " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstMinAngleBetweenLatticeVectors", ",", " ", 
       RowBox[{"Pi", "/", "6"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstLocDefault", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0.1", ",", " ", "1.3"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1.9", ",", " ", "0.8"}], "}"}]}], "}"}]}], "}"}], ",", " ",
      "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstDefaultMass", ",", " ", "20"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstKDefaults", ",", " ", 
       RowBox[{"{", 
        RowBox[{
        "0.25", ",", " ", "0.25", ",", " ", "0.25", ",", " ", "0.25", ",", 
         " ", "0.25"}], "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstKMin", ",", " ", "0.05"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstKMax", ",", " ", "1"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstMMax", ",", " ", "30"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstWindowHalfWidth", ",", " ", "3"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstSpringColors", ",", 
       RowBox[{"Darker", "@", 
        RowBox[{"{", " ", 
         RowBox[{
         "Orange", ",", "Green", ",", "Purple", ",", "Cyan", ",", "Yellow"}], 
         " ", "}"}]}]}], " ", "}"}], " ", ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstPrimaryDisplaySize", ",", " ", 
       RowBox[{"{", 
        RowBox[{"380", ",", "380"}], "}"}]}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstTextDisplayOffsetHack", ",", " ", 
       RowBox[{"{", 
        RowBox[{"0.25", ",", " ", "0.25"}], "}"}]}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstNeighboringCellIndexes", ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], " ", "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "The", " ", "number", " ", "of", " ", "default", " ", "masses", " ", 
     "are", " ", "coupled", " ", "by", " ", "these", " ", "next", " ", "four",
      " ", 
     RowBox[{"variables", "."}]}], " ", "*)"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawNumberOfMasses", ",", " ", "3"}], "}"}], ",", " ", "None"}],
     "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mLocDefault", ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0.9", ",", "0.7"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0.4", ",", " ", "1.2"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1.3", ",", " ", "1.4"}], "}"}]}], "}"}]}], "}"}], ",", " ",
      "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawArrayOfMasses", ",", " ", 
       RowBox[{"{", 
        RowBox[{"10", ",", " ", "15", ",", " ", "20"}], "}"}]}], "}"}], ",", 
     " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"moSel", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"pick", " ", "anything", " ", "that", " ", 
     RowBox[{"isn", "'"}], "t", " ", "m1Sel"}], " ", "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m1Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m2Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"kArray", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], " ", 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"u", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parameterLocatorDependencies", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"couplingData", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstSpringColorsByN", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k1", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k2", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k3", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k4", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k5", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
    RowBox[{"{", "tick", "}"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{",", 
     RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "*)"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"SynchronousInitialization", "\[Rule]", "False"}], 
   "\[IndentingNewLine]", ",", " ", 
   RowBox[{"Initialization", " ", "\[RuleDelayed]", " ", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"u", " ", "=", " ", 
       RowBox[{"Flatten", "[", " ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], "}"}], ",", 
         " ", "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}], "\[Rule]", 
          RowBox[{"RGBColor", "[", "...", "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}], "\[Rule]", 
          RowBox[{"RGBColor", "[", "...", "]"}]}], ",", " ", "..."}], "}"}], 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"glConstSpringColorsByN", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "@", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"s", " ", 
              RowBox[{
               RowBox[{"Append", "[", 
                RowBox[{"glConstNeighboringCellIndexes", ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
             RowBox[{"glConstSpringColors", "[", 
              RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"s", ",", " ", 
              RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",", 
            " ", 
            RowBox[{"{", 
             RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", "1"}], 
         "]"}]}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "This", " ", "is", " ", "to", " ", "deal", " ", "with", " ", 
         "InputForm", " ", "Manipulators"}], ",", " ", 
        RowBox[{
         RowBox[{"that", " ", "allow", " ", "non"}], "-", 
         RowBox[{
         "numeric", " ", "values", " ", "to", " ", "be", " ", "passed"}]}], 
        ",", " ", 
        RowBox[{
        "or", " ", "values", " ", "that", " ", "exceed", " ", "the", " ", 
         "range", " ", "specified", " ", "in", " ", "the", " ", 
         RowBox[{"Manipulator", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"checkAgainstRange", "[", 
        RowBox[{
        "v_", ",", "default_", ",", "lowerLimit_", ",", " ", "upperLimit_"}], 
        "]"}], " ", ":=", " ", "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"result", " ", "=", " ", 
           RowBox[{"If", " ", "[", " ", 
            RowBox[{
             RowBox[{"NumberQ", "[", "v", "]"}], ",", "v", ",", " ", 
             "default"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"result", " ", "=", " ", 
           RowBox[{"If", " ", "[", " ", 
            RowBox[{
             RowBox[{"result", " ", "<", " ", "upperLimit"}], ",", " ", 
             "result", ",", "default"}], " ", "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"result", " ", "=", " ", 
           RowBox[{"If", " ", "[", " ", 
            RowBox[{
             RowBox[{"result", " ", ">", " ", "lowerLimit"}], ",", " ", 
             "result", ",", "default"}], " ", "]"}]}], " ", ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "result"}]}], 
        "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Based", " ", "on", " ", "my", " ", "ListLinePlot", " ", "answer", " ",
         "posted", " ", 
        RowBox[{"in", ":", " ", 
         ButtonBox[
          RowBox[{
           RowBox[{"http", ":"}], "//", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
              "a"}], "/", "37228"}], "/", "10"}]}],
          BaseStyle->"Hyperlink",
          ButtonData->{
            URL["http://mathematica.stackexchange.com/a/37228/10"], None},
          ButtonNote->"http://mathematica.stackexchange.com/a/37228/10"]}]}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"springPoints", "::", "usage"}], " ", "=", " ", 
         "\"\<springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]\>\""}], " ", ";"}], "*)"}], 
      "\n", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"springPoints", "[", " ", 
        RowBox[{"a12_List", ",", " ", 
         RowBox[{"n_Integer:", "8"}], ",", 
         RowBox[{"h_:", ".05"}], ",", " ", 
         RowBox[{"f_:", " ", "0.1"}]}], " ", "]"}], " ", ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "a1", ",", " ", "a2", ",", " ", "n1", ",", " ", "springDiff", ",", 
           " ", "nd", ",", " ", "r", ",", " ", "r1"}], " ", "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a1", ",", " ", "a2"}], "}"}], " ", "=", " ", "a12"}], 
          " ", ";", "\[IndentingNewLine]", 
          RowBox[{"n1", " ", "=", " ", 
           RowBox[{"Norm", "[", "a1", "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"springDiff", " ", "=", " ", 
           RowBox[{"a2", " ", "-", " ", "a1"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"nd", " ", "=", " ", 
           RowBox[{"Norm", "[", "springDiff", "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"r", " ", "=", " ", 
           RowBox[{"RotationMatrix", "[", 
            RowBox[{"ArcTan", " ", "@@", "  ", "springDiff"}], " ", "]"}]}], 
          " ", ";", "\[IndentingNewLine]", 
          RowBox[{"r1", " ", "=", " ", 
           RowBox[{"r", " ", ".", " ", 
            RowBox[{"{", 
             RowBox[{"n1", ",", " ", "0"}], "}"}]}]}], " ", ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Table", "[", " ", 
             RowBox[{
              RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
               RowBox[{"r", " ", ".", " ", 
                RowBox[{"{", " ", 
                 RowBox[{
                  RowBox[{"n1", " ", "+", " ", 
                   RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                   RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}]}], ",", " ", 
                  RowBox[{"h", " ", 
                   RowBox[{"Sin", "[", " ", 
                    RowBox[{"2", " ", "Pi", " ", "n", " ", "t"}], "]"}]}]}], 
                 "}"}]}]}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
               " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Table", "[", " ", 
             RowBox[{
              RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
               RowBox[{"r", " ", ".", " ", 
                RowBox[{"{", " ", 
                 RowBox[{
                  RowBox[{"n1", " ", "+", " ", 
                   RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}], " ", "+", " ", 
                   RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
                 "}"}]}]}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
               " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Table", "[", " ", 
             RowBox[{
              RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
               RowBox[{"r", " ", ".", " ", 
                RowBox[{"{", " ", 
                 RowBox[{
                  RowBox[{"n1", " ", "+", 
                   RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
                 "}"}]}]}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
               " ", "}"}]}], " ", "]"}]}], "\[IndentingNewLine]", "}"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"indexLabel", "::", "usage"}], " ", "=", " ", 
         "\"\<\!\(\*SubscriptBox[\(k\), \(\(i\)\(\\\ \)\)]\)(or other \
character) in italic. indexLabel['k', 1]\>\""}], " ", ";"}], 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"indexLabel", " ", "=", " ", 
       RowBox[{
        RowBox[{"Subscript", "[", 
         RowBox[{
          RowBox[{"Style", "[", 
           RowBox[{"#1", ",", "Italic"}], "]"}], ",", " ", "#2"}], "]"}], " ",
         "&"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"kLable", "::", "usage"}], " ", "=", " ", 
         "\"\<\!\(\*SubscriptBox[\(k\), \(\(i\)\(\\\ \)\)]\)(or other \
character) in italic and colored by spring index. kLable[k]\>\""}], " ", 
        ";"}], "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"kLable", " ", "=", " ", 
       RowBox[{
        RowBox[{"Style", "[", " ", 
         RowBox[{
          RowBox[{"indexLabel", "[", 
           RowBox[{"\"\<k\>\"", ",", " ", "#"}], "]"}], ",", " ", 
          RowBox[{"FontColor", "\[Rule]", 
           RowBox[{"glConstSpringColors", "[", 
            RowBox[{"[", "#", "]"}], "]"}]}]}], " ", "]"}], " ", "&"}]}], " ",
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"massColors", " ", ":=", " ", 
       RowBox[{"(", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Darker", "[", 
           RowBox[{"{", " ", 
            RowBox[{
            "Blue", ",", " ", "Green", ",", " ", "Purple", ",", " ", "Red", 
             ",", " ", "Orange"}], " ", "}"}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"Mod", "[", 
             RowBox[{"#", ",", " ", "5"}], "]"}], " ", "+", " ", "1"}], "]"}],
           " ", "]"}], " ", "&"}], " ", ")"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"massLabel", " ", ":=", " ", 
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"indexLabel", "[", 
           RowBox[{"\"\<m\>\"", ",", " ", "#"}], "]"}], ",", " ", 
          RowBox[{"massColors", "[", "#", "]"}]}], "]"}], " ", "&"}]}], " ", 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"calcLineTable", "[", " ", 
        RowBox[{"n_List", ",", " ", "b_List", ",", " ", "i_List"}], " ", 
        "]"}], " ", ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"first", ",", " ", "second"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"first", ",", " ", "second"}], "}"}], " ", "=", " ", 
           "i"}], " ", ";", "\[IndentingNewLine]", 
          RowBox[{"Table", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Line", "[", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"n", "[", 
                   RowBox[{"[", "first", "]"}], "]"}]}], 
                 RowBox[{"b", "[", 
                  RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
                RowBox[{"j", " ", 
                 RowBox[{"b", "[", 
                  RowBox[{"[", "second", "]"}], "]"}]}]}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"n", "[", 
                  RowBox[{"[", "first", "]"}], "]"}], 
                 RowBox[{"b", "[", 
                  RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
                RowBox[{"j", " ", 
                 RowBox[{"b", "[", 
                  RowBox[{"[", "second", "]"}], "]"}]}]}]}], "}"}], " ", 
             "\[IndentingNewLine]", "]"}], " ", "\[IndentingNewLine]", ",", 
            " ", 
            RowBox[{"{", 
             RowBox[{"j", ",", " ", 
              RowBox[{"-", 
               RowBox[{"n", "[", 
                RowBox[{"[", "second", "]"}], "]"}]}], ",", " ", 
              RowBox[{"n", "[", 
               RowBox[{"[", "second", "]"}], "]"}]}], "}"}]}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
      " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"calcReciprocalBasis", "::", "usage"}], " ", "=", " ", 
         "\"\<Return a reciprocal frame basis for a set of vectors.  This \
doesn't include the 2 \[Pi] scaling that is common in solid state physics.  \
Example, displaying the desired Kronicker delta behaviour:\n\nb = \
{{2,1},{-1/4, 2}} ;\ng = calcReciprocalBasis[ b ] ;\n\n{g[[1]].loc[[1]],\
\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].loc[[1]],\
\[IndentingNewLine]g[[2]].loc[[2]]}\n\>\""}], " ", ";"}], 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"calcReciprocalBasis", "[", "loc_List", "]"}], " ", ":=", " ", 
       RowBox[{"Inverse", "[", " ", 
        RowBox[{"Transpose", "[", " ", "loc", " ", "]"}], " ", "]"}]}], " ", 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"pointsTable", "[", " ", 
        RowBox[{
        "mPosFirstCell_List", ",", " ", "latticeBasis_List", ",", " ", 
         "numberLatticeLinesToDisplay_List"}], " ", "]"}], " ", ":=", " ", 
       RowBox[{"Table", "[", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"mPosFirstCell", " ", "+", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", "j"}], "}"}], ".", " ", "latticeBasis"}]}], 
         "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", 
           RowBox[{"-", 
            RowBox[{"numberLatticeLinesToDisplay", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ",", 
           RowBox[{"numberLatticeLinesToDisplay", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "\[IndentingNewLine]", 
         ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", " ", 
           RowBox[{"-", 
            RowBox[{"numberLatticeLinesToDisplay", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
           RowBox[{"numberLatticeLinesToDisplay", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "\[IndentingNewLine]", 
        "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"nMassesFromLocArray", "[", "uLoc_", "]"}], " ", ":=", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Dimensions", "[", "uLoc", "]"}], " ", "//", " ", 
           "First"}], ")"}], " ", "-", "2"}], ")"}]}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"adjustedmoSel", "[", 
        RowBox[{"rNumM_", ",", "mOrigInd_", ",", "m1Ind_"}], "]"}], ":=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"rNumM", ">", "2"}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", " ", 
          RowBox[{
           RowBox[{"mOrigInd", "\[Equal]", "m1Ind"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"First", "[", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"Range", "[", "rNumM", "]"}], ",", "m1Ind"}], "]"}], 
            "]"}], ",", "\[IndentingNewLine]", "mOrigInd"}], " ", 
          "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"First", "@", 
          RowBox[{"Delete", "[", 
           RowBox[{
            RowBox[{"Range", "[", "2", "]"}], ",", "m1Ind"}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"constructKArrayElements", "[", " ", 
        RowBox[{"i_Integer", ",", " ", "j_Integer"}], "  ", "]"}], " ", ":=", 
       " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "a", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"a", " ", "=", " ", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"i", ",", " ", "j", ",", " ", 
                  RowBox[{"s", " ", 
                   RowBox[{"glConstNeighboringCellIndexes", "[", 
                    RowBox[{"[", "n", "]"}], "]"}]}]}], "}"}], " ", "\[Rule]",
                 " ", 
                RowBox[{"glConstKDefaults", "[", 
                 RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"s", ",", " ", 
                 RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], 
               ",", " ", 
               RowBox[{"{", 
                RowBox[{"n", ",", " ", "4"}], "}"}]}], " ", "]"}], ",", " ", 
             "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", " ", "[", " ", 
           RowBox[{
            RowBox[{"i", " ", "<", " ", "j"}], ",", " ", 
            RowBox[{"Append", "[", 
             RowBox[{"a", ",", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"i", ",", "j", ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0"}], "}"}]}], "}"}], " ", "\[Rule]", 
               " ", 
               RowBox[{"glConstKDefaults", "[", 
                RowBox[{"[", "5", "]"}], "]"}]}]}], "]"}], ",", " ", "a"}], 
           " ", "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"constructKArray", "[", " ", "r_Integer", " ", "]"}], " ", ":=",
        " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"constructKArrayElements", "[", 
            RowBox[{"i", ",", "j"}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "r"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"j", ",", "r"}], "}"}]}], "]"}], ",", " ", "2"}], "]"}]}],
       " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"returnAlteredKArrayElements", "[", 
        RowBox[{
        "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", 
         "ni_Integer", ",", "v_"}], "]"}], ":=", 
       RowBox[{"(", 
        RowBox[{"kA", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Rule", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"m1Ind", ",", "m2Ind", ",", 
                RowBox[{"glConstNeighboringCellIndexes", "[", 
                 RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "_"}], "]"}], 
            "\[RuleDelayed]", 
            RowBox[{"Rule", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"m1Ind", ",", "m2Ind", ",", 
                RowBox[{"glConstNeighboringCellIndexes", "[", 
                 RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "v"}], 
             "]"}]}], ",", 
           RowBox[{
            RowBox[{"Rule", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"m1Ind", ",", "m2Ind", ",", 
                RowBox[{"-", 
                 RowBox[{"glConstNeighboringCellIndexes", "[", 
                  RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "_"}], 
             "]"}], "\[RuleDelayed]", 
            RowBox[{"Rule", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"m1Ind", ",", "m2Ind", ",", 
                RowBox[{"-", 
                 RowBox[{"glConstNeighboringCellIndexes", "[", 
                  RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "v"}], 
             "]"}]}]}], "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"returnAlteredKarrayOriginElement", "[", 
        RowBox[{
        "kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer", ",", "v_"}], 
        "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "m1oSet", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"m1oSet", "=", 
           RowBox[{"Append", "[", 
            RowBox[{
             RowBox[{"Sort", "[", 
              RowBox[{"{", 
               RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"kA", "/.", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Rule", "[", 
              RowBox[{"m1oSet", ",", "_"}], "]"}], "\[RuleDelayed]", 
             RowBox[{"Rule", "[", 
              RowBox[{"m1oSet", ",", "v"}], "]"}]}], ")"}]}]}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", "\n", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"To", " ", "refresh", " ", "k1"}], ",", "k2", ",", "k3", ",", 
        RowBox[{
        "k4", " ", "after", " ", "changing", " ", "m1Sel", " ", "or", " ", 
         RowBox[{"m2Sel", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"selectVFromKarray", "[", 
        RowBox[{
        "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", 
         "ni_Integer"}], "]"}], ":=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m1Ind", ",", "m2Ind", ",", 
           RowBox[{"glConstNeighboringCellIndexes", "[", 
            RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], "/.", "kA"}], ")"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "To", " ", "refresh", " ", "k5", " ", "after", " ", "changing", " ", 
        "m1Sel", " ", "and", " ", "moSel"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"selectOriginVFromKarray", "[", 
        RowBox[{"kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer"}], 
        "]"}], ":=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Append", "[", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "/.", "kA"}], ")"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"returnKarrayForAdditionalMassIndex", "[", " ", 
        RowBox[{"kA_List", ",", "nmNew_Integer"}], " ", "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "k2", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"k2", " ", "=", " ", 
           RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"constructKArrayElements", "[", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], ")"}],
               "/@", " ", 
              RowBox[{"(", 
               RowBox[{"Select", "[", 
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{
                   RowBox[{"Table", "[", " ", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", " ", "nmNew"}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", " ", "nmNew"}], "}"}]}], "]"}], ",", 
                   " ", "1"}], "]"}], ",", " ", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Max", "[", "#", "]"}], " ", "\[Equal]", " ", 
                   "nmNew"}], " ", "&"}]}], "]"}], ")"}]}], ",", " ", "2"}], 
            "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"kArray", ",", " ", "k2"}], "]"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"kA", ",", " ", "k2"}], "}"}], ",", " ", "1"}], 
           "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
        RowBox[{"uLoc_List", ",", "minAngle_"}], "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "t", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"t", " ", "=", " ", 
           RowBox[{"Abs", "[", 
            RowBox[{"ArcCos", "[", 
             RowBox[{
              RowBox[{"Normalize", "[", 
               RowBox[{"uLoc", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", ".", " ", 
              RowBox[{"Normalize", "[", 
               RowBox[{"uLoc", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}], "]"}]}], " ", 
          ";", "\[IndentingNewLine]", 
          RowBox[{"t", " ", "=", " ", 
           RowBox[{"If", " ", "[", " ", 
            RowBox[{
             RowBox[{"t", " ", ">", " ", 
              RowBox[{"Pi", "/", "2"}]}], ",", " ", 
             RowBox[{"Pi", "-", "t"}], ",", " ", "t"}], "]"}]}], " ", ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", " ", 
           RowBox[{
            RowBox[{"t", " ", "<", " ", "minAngle"}], ",", 
            "\[IndentingNewLine]", "glConstLocDefault", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"uLoc", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
              RowBox[{"uLoc", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"locDependent", "::", "usage"}], " ", "=", " ", 
         "\"\<Locator dependent calculations (i.e. based on the mass \
positions and the unit cell basis vectors)\n\nExample:\n\n\
locDependent[{1/2,1}, {1,1/2}, {{0.1,0.2} + {1/2,1} + {1,1/2}, {0.3, 0.5} - \
{1/2,1} - {1,1/2}}]\n\nWill see: {0.1,0.2}, {0.3, 0.5} ; as the mPosFirstCell \
values.\n\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"locDependent", "[", " ", 
        RowBox[{"uLoc_List", ",", "numMasses_Integer", ",", " ", "rma_List"}],
         " ", "]"}], "  ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "m", ",", "latticeBasis", ",", " ", "numberLatticeLinesToDisplay", 
           ",", "reciprocalBasis", ",", "mObliqueComponents", ",", " ", 
           "mPosFirstCell", ",", " ", "reciprocalNorms"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"latticeBasis", " ", "=", 
           RowBox[{"Take", "[", 
            RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"m", " ", "=", " ", 
           RowBox[{"Drop", "[", 
            RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"numberLatticeLinesToDisplay", " ", "=", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Ceiling", "[", "  ", 
               RowBox[{"Abs", "[", 
                RowBox[{"glConstWindowHalfWidth", "/", " ", 
                 RowBox[{
                  RowBox[{"latticeBasis", "[", 
                   RowBox[{"[", "#", "]"}], "]"}], "[", 
                  RowBox[{"[", "#", "]"}], "]"}]}], "]"}], "]"}], " ", "&"}], 
             " ", "/@", " ", 
             RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"reciprocalBasis", " ", "=", " ", 
           RowBox[{
           "calcReciprocalBasis", "[", " ", "latticeBasis", " ", "]"}]}], " ",
           ";", "\[IndentingNewLine]", 
          RowBox[{"reciprocalNorms", " ", "=", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Norm", "[", 
               RowBox[{"reciprocalBasis", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
             " ", 
             RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"mObliqueComponents", " ", "=", " ", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"m", "[", 
               RowBox[{"[", " ", "i", " ", "]"}], "]"}], " ", ".", " ", 
              RowBox[{"reciprocalBasis", "[", 
               RowBox[{"[", " ", "j", " ", "]"}], "]"}]}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"i", ",", " ", "numMasses"}], "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"j", ",", " ", "2"}], "}"}]}], "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"mPosFirstCell", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"m", "[", 
                RowBox[{"[", "#", "]"}], "]"}], " ", "-", " ", 
               RowBox[{
                RowBox[{"Floor", "[", 
                 RowBox[{"mObliqueComponents", "[", 
                  RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", ".", " ", 
                "latticeBasis"}]}], " ", ")"}], " ", "&"}], " ", "/@", " ", 
            RowBox[{"Range", "[", "numMasses", "]"}]}]}], " ", ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<mScalarArray\>\"", " ", "\[Rule]", " ", "rma"}], ",",
             "\[IndentingNewLine]", 
            RowBox[{
            "\"\<numberOfMasses\>\"", " ", "\[Rule]", " ", "numMasses"}], ",",
             "\[IndentingNewLine]", 
            RowBox[{
            "\"\<latticeBasis\>\"", " ", "\[Rule]", " ", "latticeBasis"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<latticeNorms\>\"", "\[Rule]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Norm", "[", 
                 RowBox[{"latticeBasis", "[", 
                  RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@",
                " ", 
               RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\<latticeUnitVectors\>\"", "\[Rule]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Normalize", "[", 
                 RowBox[{"latticeBasis", "[", 
                  RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@",
                " ", 
               RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
            "\"\<numberLatticeLinesToDisplay\>\"", "\[Rule]", " ", 
             "numberLatticeLinesToDisplay"}], ",", "\[IndentingNewLine]", 
            RowBox[{
            "\"\<reciprocalBasis\>\"", "\[Rule]", " ", "reciprocalBasis"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{
            "\"\<reciprocalNorms\>\"", "\[Rule]", " ", "reciprocalNorms"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<qMaxVec\>\"", " ", "\[Rule]", " ", 
             RowBox[{"(", 
              RowBox[{"2", " ", "Pi", " ", "reciprocalNorms"}], ")"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
            "\"\<mObliqueComponents\>\"", "\[Rule]", " ", 
             "mObliqueComponents"}], ",", "\[IndentingNewLine]", 
            RowBox[{
            "\"\<mPosFirstCell\>\"", "\[Rule]", " ", "mPosFirstCell"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\<pointsDataTable\>\"", "\[Rule]", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"pointsTable", "[", 
                  RowBox[{
                   RowBox[{"mPosFirstCell", "[", 
                    RowBox[{"[", "#", "]"}], "]"}], ",", "latticeBasis", ",", 
                   "numberLatticeLinesToDisplay"}], "]"}], ")"}], " ", "&"}], 
               "/@", " ", 
               RowBox[{"Range", "[", "numMasses", "]"}]}], ")"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\<lineTable\>\"", " ", "\[Rule]", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"calcLineTable", "[", " ", 
                 RowBox[{
                 "numberLatticeLinesToDisplay", ",", " ", "latticeBasis", ",",
                   " ", "#"}], " ", "]"}], " ", "&"}], " ", "/@", " ", 
               RowBox[{"Permutations", "[", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ")"}]}]}], 
           "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
      " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"projOp", "::", "usage"}], " ", "=", " ", 
         "\"\<given an input vector \!\(\*OverscriptBox[\(v\), \(\
\[RightVector]\)]\) = {\!\(\*SubscriptBox[\(v\), \(x\)]\), \
\!\(\*SubscriptBox[\(v\), \(y\)]\)}, compute the projection matrix operator \
along the unit vector in that direction.\n\n   projOp[{1, 0}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"1\", \"0\"},
{\"0\", \"0\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{0, 1}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"0\", \"0\"},
{\"0\", \"1\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{a,b}] // MatrixForm = \!\
\(\*Cell[TextData[Cell[BoxData[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{
FractionBox[
SuperscriptBox[\"a\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]},
{
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
SuperscriptBox[\"b\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}]],
CellChangeTimes->{{3.5990911441851797`*^9, 3.599091144641206*^9}, \
3.5990913830438423`*^9, 3.5990915191646276`*^9, 3.599091555028679*^9, \
3.599091735722014*^9, {3.599091916353346*^9, 3.599091928988068*^9}}]]]\)\n\
\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"projOpU", "[", "v_List", "]"}], " ", ":=", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"v", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "^", "2"}], ",", " ", 
           RowBox[{
            RowBox[{"v", "[", 
             RowBox[{"[", "1", "]"}], "]"}], 
            RowBox[{"v", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"v", "[", 
             RowBox[{"[", "1", "]"}], "]"}], 
            RowBox[{"v", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
           RowBox[{
            RowBox[{"v", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "^", "2"}]}], "}"}]}], "}"}]}], 
      " ", ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"projOp", "[", "v_List", "]"}], " ", ":=", " ", 
       RowBox[{
        RowBox[{"projOpU", "[", "v", "]"}], "/", 
        RowBox[{"(", 
         RowBox[{"v", ".", " ", "v"}], ")"}]}]}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"relativeDifferences", "::", "usage"}], " ", "=", " ", 
         "\"\<Example: relativeDifferences[ {aLoc,bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}}\>\""}], ",", " ", 
        RowBox[{
         RowBox[{
         "is", " ", "a", " ", "tuple", " ", "for", " ", "the", " ", "spring", 
          " ", "constant", " ", "between", " ", "m1", " ", "in", " ", "the", 
          " ", "origin", " ", "cell", " ", "to", " ", "m2", " ", "in", " ", 
          "the", " ", "lattice", " ", "cell", " ", 
          RowBox[{"{", 
           RowBox[{"n1", ",", "n2"}], "}"}]}], " ", ";"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"relativeDifferences", "[", " ", 
        RowBox[{"r_List", ",", "mp_List", ",", " ", 
         RowBox[{"{", 
          RowBox[{
          "mIndex1_Integer", ",", " ", "mIndex2_Integer", ",", " ", 
           "n_List"}], "}"}]}], "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"d", ",", " ", "pOrigin", ",", " ", "pOther"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"pOrigin", " ", "=", " ", 
           RowBox[{"mp", "[", 
            RowBox[{"[", " ", "mIndex1", " ", "]"}], "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"pOther", " ", "=", " ", 
           RowBox[{
            RowBox[{"mp", "[", 
             RowBox[{"[", " ", "mIndex2", " ", "]"}], "]"}], "+", " ", 
            RowBox[{"n", " ", ".", " ", "r"}]}]}], "  ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"d", " ", "=", " ", 
           RowBox[{"pOther", " ", "-", " ", "pOrigin"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"dn", " ", "=", " ", 
           RowBox[{"d", " ", ".", "d"}]}], " ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"dn", ",", " ", "pOrigin", ",", " ", "pOther", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"projOpU", "[", "d", "]"}], "/", "dn"}], "  ", 
             RowBox[{"(*", 
              RowBox[{"//", " ", "MatrixForm"}], "*)"}], ")"}]}], 
           "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
      " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"calculateCouplings", "::", "usage"}], " ", "=", " ", 
         "\"\<Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions.\>\""}], 
        " ", ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"calculateCouplings", "[", 
        RowBox[{"ld_List", ",", " ", "kA_List"}], "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "t", ",", " ", "t1", ",", " ", "t2", ",", " ", "r", ",", " ", "mp", 
           ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"r", ",", " ", "mp", ",", " ", "numberOfMasses"}], "}"}], 
           " ", "=", " ", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "\"\<latticeBasis\>\"", ",", " ", "\"\<mPosFirstCell\>\"", ",", 
              " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", 
            "ld"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"t", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Append", "[", 
              RowBox[{"#", ",", " ", 
               RowBox[{"relativeDifferences", "[", 
                RowBox[{"r", ",", " ", "mp", ",", " ", 
                 RowBox[{"First", "[", "#", "]"}]}], "]"}]}], " ", "]"}], 
             "&"}], "/@", " ", 
            RowBox[{"(", 
             RowBox[{"kA", "/.", " ", 
              RowBox[{"Rule", " ", "\[Rule]", " ", "List"}]}], ")"}]}]}], " ",
           ";", "\[IndentingNewLine]", 
          RowBox[{"t", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "}"}], ",", " ", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", "3", "]"}], "]"}]}], "}"}], ",", " ", "1"}], 
              "]"}], " ", "&"}], "/@", " ", "t"}]}], " ", ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"t1", " ", "=", " ", 
           RowBox[{"Table", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Sort", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"Select", "[", " ", 
                 RowBox[{"t", ",", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                    "i"}], ")"}], " ", "&&", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "\[NotEqual]", " ", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0"}], "}"}]}], ")"}]}], " ", 
                   "&"}]}], "]"}], ")"}], ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"#1", "[", 
                  RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
                 RowBox[{"#2", "[", 
                  RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
             "\[IndentingNewLine]", ",", " ", 
             RowBox[{"{", 
              RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
            "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"t2", " ", "=", " ", 
           RowBox[{"Select", "[", " ", 
            RowBox[{"t", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "3", "]"}], "]"}], " ", "==", " ", 
               RowBox[{"{", 
                RowBox[{"0", ",", " ", "0"}], "}"}]}], " ", "&"}]}], "]"}]}], 
          " ", ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"the", " ", "rest", " ", "of", " ", "the", " ", 
            RowBox[{"permutations", ":"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"t2", " ", "=", " ", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"t2", ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", " ", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}]}], "}"}], ",", " ", 
                   "1"}], "]"}], " ", "&"}], "/@", " ", "t2"}]}], "}"}], ",", 
             " ", "1"}], "]"}]}], "  ", ";", "\[IndentingNewLine]", 
          RowBox[{"t2", " ", "=", " ", 
           RowBox[{"Table", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Sort", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"Select", "[", " ", 
                 RowBox[{"t2", ",", " ", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                    "i"}], ")"}], " ", "&"}]}], "]"}], ")"}], ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"#1", "[", 
                  RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
                 RowBox[{"#2", "[", 
                  RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
             "\[IndentingNewLine]", ",", " ", 
             RowBox[{"{", 
              RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
            "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"t2", ",", " ", "t1"}], "}"}]}]}], "\[IndentingNewLine]", 
        "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"plotSprings", "::", "usage"}], " ", "=", " ", 
         "\"\<Example:\n\nModule[{parameterLocatorDependencies},\
\[IndentingNewLine]parameterLocatorDependencies = locDependent[{1/2,1}, \
{1,1/2}, {{0.1,1.2} + {1/2,1} + {1,1/2}, {1.3, 0.5} - {1/2,1} - {1,1/2}}] ;\
\[IndentingNewLine]plotSprings[{10,20}, parameterLocatorDependencies ] \
\[IndentingNewLine]]\n\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"plotSprings", "[", 
        RowBox[{
        "uLoc_List", ",", " ", "ld_List", ",", "cd_List", ",", 
         "m1Ind_Integer", ",", " ", "m2Ind_Integer", ",", " ", 
         "moInd_Integer"}], "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "aLoc", ",", " ", "bLoc", ",", "mLoc", ",", "pointsList", ",", 
           "latticeBasis", ",", "reciprocalBasis", ",", "pointsDataTable", 
           ",", " ", "numberLatticeLinesToDisplay", ",", " ", "lines", ",", 
           " ", "cOrigin", ",", " ", "cN", ",", " ", "g", ",", " ", 
           "mScalarArray", ",", " ", "numberOfMasses"}], "}"}], ",", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"latticeBasis", " ", "=", " ", 
           RowBox[{"Take", "[", " ", 
            RowBox[{"uLoc", ",", " ", "2"}], " ", "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"aLoc", " ", "=", " ", 
           RowBox[{"uLoc", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
          RowBox[{"bLoc", " ", "=", " ", 
           RowBox[{"uLoc", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "mLoc", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
             "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
             "mScalarArray", ",", " ", "numberOfMasses"}], "}"}], "=", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "\"\<mPosFirstCell\>\"", ",", "\"\<reciprocalBasis\>\"", ",", 
              "\"\<pointsDataTable\>\"", ",", 
              "\"\<numberLatticeLinesToDisplay\>\"", ",", " ", 
              "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", 
              " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", 
            "ld"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pointsList", "[", "n_Integer", "]"}], " ", ":=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"massColors", "[", "n", "]"}], ",", 
             "\[IndentingNewLine]", ",", 
             RowBox[{"PointSize", "[", 
              RowBox[{"Sqrt", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"mScalarArray", "[", 
                  RowBox[{"[", "n", "]"}], "]"}], "/", "glConstMMax"}], "/", 
                "500"}], "]"}], "]"}], "\[IndentingNewLine]", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"Point", "[", " ", "#", " ", "]"}], " ", "&"}], " ", "/@",
               " ", 
              RowBox[{"pointsDataTable", "[", 
               RowBox[{"[", "n", "]"}], "]"}]}], "\[IndentingNewLine]", ",", 
             RowBox[{"Text", "[", 
              RowBox[{
               RowBox[{"massLabel", "[", " ", "n", "]"}], ",", 
               RowBox[{
                RowBox[{"mLoc", "[", 
                 RowBox[{"[", "n", "]"}], "]"}], " ", "+", " ", 
                "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
            "\[IndentingNewLine]", "}"}]}], " ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"cOrigin", " ", "=", " ", 
           RowBox[{"Select", "[", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"cd", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "[", 
              RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", " ", 
               RowBox[{"{", 
                RowBox[{"m1Ind", ",", " ", "moInd"}], "}"}]}], " ", "&"}]}], 
            " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
          RowBox[{"cN", " ", "=", " ", 
           RowBox[{"Select", "[", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"cd", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "[", 
              RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
               RowBox[{"{", 
                RowBox[{"m1Ind", ",", " ", "m2Ind"}], "}"}]}], "&"}]}], " ", 
            "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"g", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"springPoints", "[", " ", 
                RowBox[{"Take", "[", 
                 RowBox[{"#", ",", " ", 
                  RowBox[{"{", 
                   RowBox[{"6", ",", "7"}], "}"}]}], "]"}], " ", "]"}], " ", 
               ",", "\[IndentingNewLine]", 
               RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
               "\[IndentingNewLine]", 
               RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                  "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", 
             "&"}], "/@", " ", "cN"}]}], " ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", " ", "[", " ", 
           RowBox[{
            RowBox[{"numberOfMasses", " ", ">", " ", "1"}], ",", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"g", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"springPoints", "[", " ", 
                   RowBox[{"Take", "[", 
                    RowBox[{"#", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", "7"}], "}"}]}], "]"}], " ", "]"}], " ", 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
                  "\[IndentingNewLine]", 
                  RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                    "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", 
                "&"}], "/@", " ", "cOrigin"}]}], "]"}], ","}], " ", "]"}], 
          " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Show", "[", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Graphics", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"lines", "\[IndentingNewLine]", ",", "Blue", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"reciprocalBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                    RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]",
                     ",", "Thick", ",", 
                    RowBox[{"Arrowheads", "[", "0.05", "]"}], 
                    "\[IndentingNewLine]", ",", "Red", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"latticeBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                    RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]",
                     ",", 
                    RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"aLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"bLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
                   "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"pointsList", "[", "#", "]"}], " ", "&"}], "/@", 
                   " ", 
                   RowBox[{"Range", "[", "numberOfMasses", "]"}]}]}], 
                 "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", 
               ",", 
               RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", 
                    " ", "glConstWindowHalfWidth"}], "}"}], ",", " ", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", 
                    " ", "glConstWindowHalfWidth"}], "}"}]}], "}"}]}], 
               "\[IndentingNewLine]", ",", 
               RowBox[{
               "ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}]}], 
              "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "g"}],
             "\[IndentingNewLine]", "}"}], " ", "]"}]}]}], " ", 
        "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        FormBox[
         RowBox[{" ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"grab", " ", "data", " ", 
             RowBox[{"from", ":", " ", "rawArrayOfMasses"}]}], ",", " ", 
            "parameterLocatorDependencies", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"couplingData", "[", 
                RowBox[{"[", "_", "]"}], "]"}], "[", 
               RowBox[{"[", "_", "]"}], "]"}], "[", 
              RowBox[{"[", "_", "]"}], "]"}], " ", "=", " ", 
             RowBox[{"{", 
              RowBox[{"k", ",", " ", "j", ",", " ", 
               OverscriptBox["m", "\[RightVector]"], ",", " ", 
               SubscriptBox["K", 
                RowBox[{
                 OverscriptBox["n", "\[RightVector]"], ",", 
                 RowBox[{"k", ";", 
                  OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], ",", 
               " ", 
               SuperscriptBox[
                SubscriptBox[
                 OverscriptBox["a", "\[RightVector]"], 
                 RowBox[{
                  OverscriptBox["m", "\[RightVector]"], ",", 
                  RowBox[{"j", ";", 
                   OverscriptBox["0", "\[RightVector]"]}], ",", "k"}]], "2"], 
               ",", " ", 
               SubscriptBox[
                OverscriptBox["p", "\[RightVector]"], "k"], ",", " ", 
               RowBox[{
                SubscriptBox[
                 OverscriptBox["r", "\[RightVector]"], 
                 OverscriptBox["m", "\[RightVector]"]], " ", "+", " ", 
                SubscriptBox[
                 OverscriptBox["p", "\[RightVector]"], "j"]}], ",", " ", 
               SubscriptBox["Proj", 
                SubscriptBox[
                 OverscriptBox["a", "\[RightVector]"], 
                 RowBox[{
                  OverscriptBox["m", "\[RightVector]"], ",", 
                  RowBox[{"j", ";", 
                   OverscriptBox["0", "\[RightVector]"]}], ",", "k"}]]]}], 
              "}"}]}]}], "\[IndentingNewLine]", 
           RowBox[{"ex", ":", " ", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", "0.5`", ",", 
              "1.`", ",", 
              RowBox[{"{", 
               RowBox[{"0.9`", ",", "0.7`"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.30000000000000004`", ",", 
                RowBox[{"-", "0.10000000000000009`"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0.36`", ",", "0.48`"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.48`", ",", "0.6400000000000001`"}], "}"}]}], 
               "}"}]}], "}"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
            "to", " ", "form", " ", "equations", " ", "of", " ", "the", " ", 
             RowBox[{"form", ":", "\[IndentingNewLine]", 
              RowBox[{
               SuperscriptBox["\[Omega]", "2"], " ", 
               RowBox[{
                SubscriptBox[
                 OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
                OverscriptBox["q", "\[RightVector]"], ")"}]}]}]}], " ", "=", 
            " ", 
            RowBox[{
             UnderscriptBox["\[Sum]", 
              RowBox[{
               OverscriptBox["0", "\[RightVector]"], ",", 
               RowBox[{"k", " ", "\[NotEqual]", " ", 
                OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
             RowBox[{
              SubscriptBox["K", 
               RowBox[{
                OverscriptBox["0", "\[RightVector]"], ",", 
                RowBox[{"k", ";", 
                 OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
              SubscriptBox["Proj", 
               SubscriptBox[
                OverscriptBox["a", "^"], 
                RowBox[{
                 OverscriptBox["n", "\[RightVector]"], ",", 
                 RowBox[{"k", ";", 
                  OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
              RowBox[{"(", 
               RowBox[{
                FractionBox[
                 RowBox[{
                  SubscriptBox[
                   OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
                  OverscriptBox["q", "\[RightVector]"], ")"}], 
                 SubscriptBox["m", "k"]], "-", " ", 
                RowBox[{
                 FractionBox[
                  RowBox[{
                   SubscriptBox[
                    OverscriptBox["\[Epsilon]", "\[RightVector]"], "j"], "(", 
                   OverscriptBox["q", "\[RightVector]"], ")"}], 
                  SqrtBox[
                   RowBox[{
                    SubscriptBox["m", "k"], 
                    SubscriptBox["m", "j"]}]]], 
                 SuperscriptBox["e", 
                  RowBox[{"I", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    SubscriptBox[
                    OverscriptBox["r", "\[RightVector]"], 
                    OverscriptBox["m", "\[RightVector]"]], " ", ".", " ", 
                    OverscriptBox["q", "\[RightVector]"]}], " ", ")"}]}]]}]}],
                ")"}]}]}]}]}]}],
         TraditionalForm], "\[IndentingNewLine]", "Note", " ", "that", " ", 
        "qVec", " ", "here", " ", "is", " ", "intended", " ", "to", " ", "be",
         " ", "an", " ", "undefined", " ", 
        RowBox[{"global", ".", "  ", "Is"}], " ", "there", " ", "a", " ", 
        "way", " ", "to", " ", "do", " ", "that", " ", 
        RowBox[{"programatically", "?"}]}], "\[IndentingNewLine]", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"oneTermOfdynamicsMatrix", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "k_Integer", ",", " ", "j_Integer", ",", " ", "mVec_List", ",", " ",
            "kS_", ",", " ", "_", ",", "_", ",", "_", ",", "proj_List"}], 
          "}"}], ",", " ", "r_List", ",", " ", "mk_", ",", " ", 
         "epsilon_List", ",", " ", "mA_List"}], "]"}], " ", ":=", " ", 
       RowBox[{"(", 
        RowBox[{"kS", " ", 
         RowBox[{"proj", "  ", ".", 
          RowBox[{"(", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"epsilon", "[", 
              RowBox[{"[", "k", "]"}], "]"}], "/", "mk"}], " ", "-", " ", 
            RowBox[{
             RowBox[{"epsilon", "[", 
              RowBox[{"[", "j", "]"}], "]"}], 
             RowBox[{
              RowBox[{"E", "^", 
               RowBox[{"(", 
                RowBox[{"I", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"mVec", " ", ".", " ", "r"}], ")"}], ".", " ", 
                   "qVec"}], ")"}]}], ")"}]}], "/", 
              RowBox[{"Sqrt", "[", " ", 
               RowBox[{"mk", " ", 
                RowBox[{"mA", "[", 
                 RowBox[{"[", "j", "]"}], "]"}]}], " ", "]"}]}]}]}], 
           ")"}]}]}], "  ", ")"}]}], "  ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"dynamicsMatrix", "[", 
        RowBox[{"ld_List", ",", " ", "cd_List"}], "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "cdFlatAndSorted", ",", " ", "r", ",", " ", "res", ",", " ", 
           "epsilon", ",", " ", "m", ",", "mScalarArray", ",", " ", 
           "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"cdFlatAndSorted", " ", "=", " ", 
           RowBox[{"SplitBy", "[", " ", 
            RowBox[{
             RowBox[{"Sort", "@", 
              RowBox[{"Flatten", "[", 
               RowBox[{"cd", ",", " ", "2"}], "]"}]}], " ", ",", " ", 
             "First"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"r", ",", "mScalarArray", ",", " ", "numberOfMasses"}], 
            "}"}], " ", "=", " ", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "\"\<latticeBasis\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", 
              " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", 
            "ld"}]}], " ", ";", " ", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{
             RowBox[{"Here", " ", 
              SubscriptBox[
               OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], " ", 
              RowBox[{"(", 
               RowBox[{"=", 
                RowBox[{"epsilon", "[", 
                 RowBox[{"[", "k", "]"}], "]"}]}], ")"}], " ", "is", " ", 
              "represented", " ", "as", " ", "a", " ", "2", "x", 
              RowBox[{"(", 
               RowBox[{"2", "N"}], ")"}], " ", "matrix", " ", "with", " ", 
              "the", " ", "vector", " ", "factored", " ", 
              RowBox[{"out", ".", "  ", "For"}], " ", "example", " ", "with", 
              " ", "N"}], " ", "=", " ", "3"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{
             SubscriptBox[
              OverscriptBox["\[Epsilon]", "\[RightVector]"], "1"], "=", " ", 
             RowBox[{
              RowBox[{
               TagBox[
                RowBox[{"(", "\[NoBreak]", GridBox[{
                   {"1", "0", "0", "0", "0", "0"},
                   {"0", "1", "0", "0", "0", "0"}
                  },
                  
                  GridBoxAlignment->{
                   "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                  GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
                Function[BoxForm`e$, 
                 MatrixForm[BoxForm`e$]]], "\[IndentingNewLine]", 
               "\[IndentingNewLine]", "This", " ", "will", " ", "be", " ", 
               "pre"}], "-", 
              RowBox[{
              "multiplied", " ", "by", " ", "a", " ", "2", "x2", " ", 
               "projection", " ", 
               RowBox[{"matrix", ".", "\[IndentingNewLine]", "The"}], " ", 
               "whole", " ", "thing", " ", "should", " ", "be", " ", 
               "logically", " ", "treated", " ", "as", " ", "if", " ", "it", 
               " ", "is", " ", "post"}], "-", 
              RowBox[{
              "multiplied", " ", "by", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", Cell[TextData[Cell[BoxData[
                TagBox[
                 RowBox[{"(", "\[NoBreak]", GridBox[{
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "1"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "2"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "1"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "2"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "1"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "2"}]]}
                   },
                   
                   GridBoxAlignment->{
                    "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                   GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
                 Function[BoxForm`e$, 
                  MatrixForm[BoxForm`e$]]]],
                CellChangeTimes->{{3.600871330362259*^9, 
                 3.6008713538916054`*^9}}]]]}]}]}]}], "\[IndentingNewLine]", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"epsilon", " ", "=", " ", 
           RowBox[{"Partition", "[", 
            RowBox[{
             RowBox[{"IdentityMatrix", "[", " ", 
              RowBox[{"2", " ", "numberOfMasses"}], " ", "]"}], ",", "2"}], 
            "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"res", " ", "=", " ", 
           RowBox[{"Partition", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Table", "[", " ", 
               RowBox[{
                RowBox[{"Total", "@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"oneTermOfdynamicsMatrix", "[", 
                    RowBox[{"#", ",", " ", "r", ",", " ", 
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", " ", "epsilon", ",", 
                    " ", "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
                   RowBox[{"(", 
                    RowBox[{"cdFlatAndSorted", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ")"}]}], ",", 
                " ", 
                RowBox[{"{", 
                 RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], "]"}], 
              " ", "//", " ", "Flatten"}], ",", " ", 
             RowBox[{"2", " ", "numberOfMasses"}]}], "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"res", " ", "/.", " ", 
            RowBox[{"qVec", " ", "\[Rule]", " ", "#"}]}], " ", "&"}]}]}], " ",
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", "XXX", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"cdFlatAndSorted", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"mScalarArray", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"oneTermOfdynamicsMatrix", "[", 
            RowBox[{"#", ",", " ", "r", ",", " ", 
             RowBox[{"mScalarArray", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", " ", 
             "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"cdFlatAndSorted", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ")"}]}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", "res", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", "epsilon", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{";", " ", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"oneTermOfdynamicsMatrix", "[", " ", 
              RowBox[{
              "parameterLocatorDependencies", ",", " ", "couplingData"}], " ",
               "]"}], "[", 
             RowBox[{"#", ",", " ", "r", ",", 
              RowBox[{"mScalarArray", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", 
              "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"cd", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
        "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"calcDynamics", "::", "usage"}], " ", "=", " ", 
         "\"\<a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\
\),\!\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each \
of the system eigenvalues, when evaluated at qLoc\>\""}], " ", ";"}], 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"calcDynamics", "[", "mAtQ_List", "]"}], " ", ":=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Sqrt", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Eigensystem", "[", " ", "mAtQ", " ", "]"}], " ", "//", 
           " ", "Transpose"}], ")"}]}], ")"}]}], "  ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"showDynamics", "[", 
        RowBox[{
        "ld_List", ",", " ", "dynAtOmegaIndex_List", ",", " ", "sc_", ",", 
         " ", "ql_"}], "]"}], " ", ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "pointsDataTable", ",", "numberLatticeLinesToDisplay", ",", " ", 
           "e", ",", " ", "omega", ",", " ", "points", ",", " ", "lines", ",",
            " ", "nu", ",", " ", "a", ",", "b", ",", " ", "mScalarArray", ",",
            " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"a", ",", " ", "b"}], "}"}], ",", "pointsDataTable", 
             ",", "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
             "mScalarArray", ",", " ", "numberOfMasses"}], "}"}], "=", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "\"\<latticeBasis\>\"", ",", "\"\<pointsDataTable\>\"", ",", 
              "\"\<numberLatticeLinesToDisplay\>\"", ",", " ", 
              "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", 
              " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", 
            "ld"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"omega", ",", " ", "e"}], "}"}], " ", "=", " ", 
           "dynAtOmegaIndex"}], " ", ";", "\[IndentingNewLine]", 
          RowBox[{"e", " ", "=", " ", 
           RowBox[{"Partition", "[", 
            RowBox[{"e", ",", "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{"points", " ", "=", " ", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"pointsDataTable", "[", 
                RowBox[{"[", "k", "]"}], "]"}], " ", "+", " ", 
               RowBox[{"Table", "[", " ", "\[IndentingNewLine]", " ", 
                RowBox[{
                 RowBox[{"sc", " ", 
                  RowBox[{"Re", "[", 
                   RowBox[{
                    RowBox[{"e", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], " ", 
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"I", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    RowBox[{"ql", " ", ".", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"a", " ", "i"}], " ", "+", " ", 
                    RowBox[{"b", " ", "j"}]}], ")"}]}], " ", "-", " ", 
                    RowBox[{"omega", " ", "#"}]}], ")"}]}], ")"}]}]}], " ", 
                   "]"}]}], "\[IndentingNewLine]", ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", " ", 
                   RowBox[{"-", 
                    RowBox[{"numberLatticeLinesToDisplay", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                   RowBox[{"numberLatticeLinesToDisplay", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{"{", 
                  RowBox[{"j", ",", " ", 
                   RowBox[{"-", 
                    RowBox[{"numberLatticeLinesToDisplay", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                   RowBox[{"numberLatticeLinesToDisplay", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], 
                "\[IndentingNewLine]", "]"}]}], " ", "&"}], ",", 
             RowBox[{"{", 
              RowBox[{"k", ",", "numberOfMasses"}], "}"}]}], "]"}]}], " ", 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"nu", " ", "=", " ", 
           RowBox[{"2", " ", "Pi", " ", 
            RowBox[{"If", "[", " ", 
             RowBox[{
              RowBox[{"omega", " ", "\[Equal]", " ", "0"}], ",", " ", "1", 
              ",", " ", 
              RowBox[{"1", "/", "omega"}]}], "]"}]}]}], " ", ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Show", "[", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"ListPlot", "[", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"points", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "[", 
                    RowBox[{"nu", " ", "#"}], "]"}], "\[IndentingNewLine]", 
                   ",", 
                   RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", 
                    " ", "glConstWindowHalfWidth"}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", 
                    " ", "glConstWindowHalfWidth"}], "}"}]}], "}"}]}], 
                   "\[IndentingNewLine]", ",", 
                   RowBox[{
                   "ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], 
                   "\[IndentingNewLine]", ",", " ", 
                   RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "/", "glConstMMax"}], "/",
                     "350"}], "]"}], "]"}], ",", 
                    RowBox[{"massColors", "[", "k", "]"}]}], "]"}]}]}], 
                  "\[IndentingNewLine]", "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"k", ",", "numberOfMasses"}], "}"}]}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Graphics", "[", 
                RowBox[{
                "{", "\[IndentingNewLine]", "lines", "\[IndentingNewLine]", 
                 "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], " ", 
            "&"}], ")"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"frequencyPlotCalc", "::", "usage"}], " ", "=", " ", 
         "\"\<frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
meshSize]\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"frequencyPlotCalc", "[", 
        RowBox[{"ld_List", ",", "m_", ",", "meshSz_Integer"}], "]"}], " ", ":=",
        " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "eigTable2D", ",", " ", "eigTable1D", ",", " ", "qMax", ",", " ", 
           "omegaPointList2D", ",", " ", "omegaPointList1D", ",", " ", 
           "range", ",", " ", "numberOfMasses"}], "}"}], ",", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"qMax", ",", " ", "numberOfMasses"}], "}"}], " ", "=", 
           " ", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<qMaxVec\>\"", ",", "\"\<numberOfMasses\>\""}], 
             "}"}], " ", "/.", " ", "ld"}]}], " ", ";", "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{"eigTable2D", " ", "=", " ", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Re", "[", 
              RowBox[{"Table", "[", "  ", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"qx", ",", " ", "qy"}], "}"}], " ", ",", 
                  RowBox[{"Eigenvalues", "[", " ", 
                   RowBox[{
                    RowBox[{"m", "[", " ", 
                    RowBox[{"{", 
                    RowBox[{"qx", ",", " ", "qy"}], "}"}], "  ", "]"}], " ", "//",
                     " ", "N"}], " ", "]"}]}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"qx", ",", " ", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"qMax", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                  RowBox[{
                   RowBox[{"qMax", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/", "2"}], ",", " ", 
                  RowBox[{
                   RowBox[{"qMax", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/", " ", "meshSz"}]}], 
                 "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"qy", ",", " ", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"qMax", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                  RowBox[{
                   RowBox[{"qMax", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/", "2"}], ",", " ", 
                  RowBox[{
                   RowBox[{"qMax", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/", " ", "meshSz"}]}], 
                 "}"}]}], " ", "]"}], " ", "]"}], ",", "1"}], "]"}]}], " ", 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"omegaPointList2D", "[", "nn_", "]"}], " ", ":=", "  ", 
           RowBox[{
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"Sqrt", "[", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
                 RowBox[{"[", "nn", "]"}], "]"}]}], "}"}], "]"}], "&"}], "/@",
             " ", "eigTable2D"}]}], "  ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"range", " ", "=", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"2", " ", "numberOfMasses"}], ")"}], " ", "//", " ", 
             "Range"}], ")"}]}], " ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"ListPlot3D", "[", " ", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"omegaPointList2D", "[", "#", "]"}], " ", "&"}], "/@", 
             " ", "range"}], ",", " ", 
            RowBox[{"PlotRange", " ", "\[Rule]", " ", "Full"}], " ", ",", " ", 
            RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], 
            ",", 
            RowBox[{"AxesLabel", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
              "\"\<\!\(\*SubscriptBox[\(q\), \(x\)]\)\>\"", ",", " ", 
               "\"\<\!\(\*SubscriptBox[\(q\), \(y\)]\)\>\""}], "}"}]}]}], 
           "]"}]}]}], "\[IndentingNewLine]", "]"}]}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"showFreqPlot", "[", " ", 
        RowBox[{"qPlaneLoc", ",", " ", "freqPlot"}], " ", "]"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"showFreqPlot", "[", 
        RowBox[{"qpl_List", ",", " ", "freqPlotData_"}], "]"}], " ", ":=", 
       " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"aa", ",", " ", "bb"}], "}"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"aa", ",", " ", "bb"}], "}"}], " ", "=", "  ", "qpl"}], 
          " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Show", "[", 
           RowBox[{"{", 
            RowBox[{"freqPlotData", ",", "\[IndentingNewLine]", 
             RowBox[{"Graphics3D", "[", " ", 
              RowBox[{"Polygon", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"aa", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                   RowBox[{"aa", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", 
                 " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"bb", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                   RowBox[{"bb", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", 
                 "  ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"bb", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                   RowBox[{"bb", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"aa", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                   RowBox[{"aa", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}]}], 
                "}"}], "]"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
           "]"}]}]}], "\[IndentingNewLine]", "]"}]}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", "HERE", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"couplingLocator", " ", ":=", 
       RowBox[{"LocatorPane", "[", " ", 
        RowBox[{
         RowBox[{"Dynamic", "[", 
          RowBox[{"u", ",", 
           RowBox[{
            RowBox[{"(", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"u", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], "<", "3"}], ",", " ", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Flatten", "[", " ", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], 
                    "}"}], ",", " ", "1"}], "]"}], ",", " ", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{
                   "cap", " ", "the", " ", "number", " ", "of", " ", 
                    "Locators", " ", "at", " ", "5"}], ",", " ", 
                   RowBox[{
                   "so", " ", "the", " ", "selection", " ", "Pane", " ", 
                    RowBox[{"doesn", "'"}], "t", " ", "start", " ", 
                    "truncating", " ", 
                    RowBox[{"the", " ", "'"}], "to", " ", 
                    RowBox[{"neighbouring", "'"}], " ", "SetterBar"}]}], " ", 
                  "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"If", "[", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], " ", ">", " ", "7"}], ",", " ", 
                   RowBox[{"Take", "[", 
                    RowBox[{"#", ",", "7"}], "]"}], ",", " ", "#"}], "]"}]}], 
                " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"Module", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"rm", ",", "km"}], "}"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"rm", " ", "=", " ", 
                  RowBox[{"First", "@", 
                   RowBox[{"Dimensions", "[", "rawArrayOfMasses", "]"}]}]}], 
                 " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"If", " ", "[", 
                  RowBox[{
                   RowBox[{"rm", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "rawArrayOfMasses"}], " ", "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{"rawArrayOfMasses", " ", "=", " ", 
                    RowBox[{"Take", "[", " ", 
                    RowBox[{"rawArrayOfMasses", ",", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "rawArrayOfMasses", " ", "if", " ", 
                    "required"}], "*)"}], "\[IndentingNewLine]", 
                   RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"rm", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{
                    "rawArrayOfMasses", ",", " ", "glConstDefaultMass"}], 
                    "]"}], " ", ";", " ", 
                    RowBox[{"rm", "++"}]}]}], " ", "]"}]}], 
                  "\[IndentingNewLine]", "]"}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"km", " ", "=", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], " ", "//", " ", 
                   "Max"}]}], " ", ";", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{"If", " ", "[", 
                  RowBox[{
                   RowBox[{"km", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "kArray"}], " ", "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"Select", "[", 
                    RowBox[{"kArray", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "\[LessEqual]", "  ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], "&"}], 
                    ")"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "kArray", " ", "if", " ", "required"}], 
                    "*)"}], "\[IndentingNewLine]", 
                   RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"km", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"km", "++"}], " ", ";", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"growKarray", "[", "km", "]"}]}]}]}], " ", 
                    "]"}]}], " ", "\[IndentingNewLine]", "]"}]}]}], 
               "\[IndentingNewLine]", "]"}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                "lattice", " ", "vector", " ", "end", " ", "points", " ", 
                "to", " ", "be", " ", "too", " ", "close", " ", "to", " ", 
                "the", " ", "origin"}], " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"u", "[", 
                RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", 
               RowBox[{"If", "[", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", " ", 
                   RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "<", " ", 
                  "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                 RowBox[{"glConstLocDefault", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"u", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"u", "[", 
                RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", 
               RowBox[{"If", "[", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ".", " ", 
                   RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], " ", "<", " ", 
                  "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                 RowBox[{"glConstLocDefault", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                 RowBox[{"u", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                "angle", " ", "between", " ", "lattice", " ", "vectors", " ", 
                "get", " ", "too", " ", "small"}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"u", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"u", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "}"}], " ", "=", " ", 
               RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
                RowBox[{
                "u", ",", " ", " ", "glConstMinAngleBetweenLatticeVectors"}], 
                " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"rawNumberOfMasses", " ", "=", " ", 
               RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
               "These", " ", "are", " ", "in", " ", "case", " ", "the", " ", 
                "number", " ", "of", " ", "locators", " ", "were", " ", 
                "changed", " ", "and", " ", "we", " ", "have", " ", "a", " ", 
                "mass", " ", "selected", " ", "that", " ", "is", " ", "now", 
                " ", 
                RowBox[{"invalid", "."}]}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"m1Sel", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{"m1Sel", " ", ">", "rawNumberOfMasses"}], ",", " ", 
                 "1", ",", " ", "m1Sel"}], "]"}]}], " ", ";", 
              "\[IndentingNewLine]", 
              RowBox[{"m2Sel", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{"m2Sel", " ", ">", "rawNumberOfMasses"}], ",", " ", 
                 "1", ",", " ", "m2Sel"}], "]"}]}], " ", ";", 
              "\[IndentingNewLine]", 
              RowBox[{"moSel", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{"moSel", " ", ">", "rawNumberOfMasses"}], ",", " ", 
                 "1", ",", " ", "moSel"}], " ", "]"}]}], " ", ";", 
              "\[IndentingNewLine]", 
              RowBox[{"moSel", " ", "=", " ", 
               RowBox[{"adjustedmoSel", "[", " ", 
                RowBox[{
                "rawNumberOfMasses", ",", " ", "moSel", ",", " ", "m1Sel"}], 
                " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{
                "Adjust", " ", "these", " ", "for", " ", "Slider", " ", 
                 "display", " ", "in", " ", "case", " ", "m1Sel"}], ",", " ", 
                "m2Sel", ",", " ", 
                RowBox[{
                "or", " ", "moSel", " ", "were", " ", "changed", " ", "just", 
                 " ", 
                 RowBox[{"above", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"k1", " ", "=", " ", 
               RowBox[{"selectVFromKarray", "[", 
                RowBox[{
                "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                 "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
              RowBox[{"k2", " ", "=", " ", 
               RowBox[{"selectVFromKarray", "[", 
                RowBox[{
                "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "2"}], 
                "]"}]}], " ", ";", "\[IndentingNewLine]", 
              RowBox[{"k3", " ", "=", " ", 
               RowBox[{"selectVFromKarray", "[", 
                RowBox[{
                "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "3"}], 
                "]"}]}], " ", ";", "\[IndentingNewLine]", 
              RowBox[{"k4", " ", "=", " ", 
               RowBox[{"selectVFromKarray", "[", 
                RowBox[{
                "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "4"}], 
                "]"}]}], " ", ";", "\[IndentingNewLine]", 
              RowBox[{"k5", " ", "=", " ", 
               RowBox[{"selectOriginVFromKarray", "[", " ", 
                RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], " ",
                 "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
               RowBox[{"locDependent", "[", " ", 
                RowBox[{
                "u", ",", " ", "rawNumberOfMasses", ",", "rawArrayOfMasses"}],
                 " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"Reset", " ", "in", " ", "case", " ", "a"}], ",", 
                RowBox[{"or", " ", "b", " ", "changed"}], ",", " ", 
                RowBox[{
                "and", " ", "the", " ", "last", " ", "selected", " ", "value",
                  " ", "is", " ", "now", " ", "out", " ", "of", " ", 
                 RowBox[{"range", "."}]}]}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"qLoc", " ", "=", " ", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                 "\"\<qMaxVec\>\"", "/.", "parameterLocatorDependencies"}], 
                 " ", ")"}], "/", "2"}]}], "  ", ";", "\[IndentingNewLine]", 
              RowBox[{"qPlaneLoc", " ", "=", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"couplingData", " ", "=", " ", 
               RowBox[{"calculateCouplings", "[", " ", 
                RowBox[{"parameterLocatorDependencies", ",", " ", "kArray"}], 
                " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"tick", "=", 
               RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"Why", " ", 
            RowBox[{"doesn", "'"}], "t", " ", "Alt"}], "-", 
           RowBox[{
           "click", " ", "to", " ", "remove", " ", "existing", " ", "Locator",
             " ", "refresh", " ", "this", " ", 
            RowBox[{"plot", "?", "  ", 
             RowBox[{"Workaround", ":", " ", 
              RowBox[{
              "move", " ", "one", " ", "of", " ", "the", " ", "other", " ", 
               "locators", " ", "to", " ", "refresh"}]}]}]}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"plotSprings", "[", 
          RowBox[{
          "u", ",", " ", "parameterLocatorDependencies", ",", "couplingData", 
           ",", "m1Sel", ",", " ", "m2Sel", ",", " ", "moSel"}], "]"}], " ", 
         ",", "\[IndentingNewLine]", 
         RowBox[{"LocatorAutoCreate", "\[Rule]", "True"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
        "\[IndentingNewLine]", "]"}]}], "  ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"massSetter", " ", ":=", " ", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Row", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Text", "[", "\"\<mass: \>\"", "]"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"Dynamic", "@", 
             RowBox[{"If", " ", "[", " ", 
              RowBox[{
               RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"m1Sel", ",", 
                   RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m1Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"moSel", " ", "=", " ", 
                    RowBox[{"adjustedmoSel", "[", " ", 
                    RowBox[{
                    "rawNumberOfMasses", ",", " ", "moSel", ",", " ", 
                    "m1Sel"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                  "]"}], ",", " ", "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", " ", "]"}]}], "&"}], "/@",
                    " ", 
                   RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                  ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
              "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "}"}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Row", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Dynamic", "[", 
               RowBox[{"massValue", ",", 
                RowBox[{
                 RowBox[{"(", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.25", ",", " ", "0.25", ",", " ", 
                    "glConstMMax"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"rawArrayOfMasses", "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "=", "massValue"}], 
                   " ", ";", "\[IndentingNewLine]", 
                   RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
                    RowBox[{"(", 
                    RowBox[{"parameterLocatorDependencies", " ", "/.", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"\"\<mScalarArray\>\"", ",", " ", "_"}], "]"}], 
                    " ", "\[RuleDelayed]", " ", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", ",", " ", "rawArrayOfMasses"}], 
                    "]"}]}], ")"}]}], " ", ")"}]}], " ", ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                   ";", "\[IndentingNewLine]", 
                   RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
               "]"}], "\[IndentingNewLine]", ",", 
              RowBox[{"{", 
               RowBox[{"0.25", ",", 
                RowBox[{"Dynamic", "@", "glConstMMax"}]}], "}"}], ",", 
              RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
              RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
              RowBox[{"AppearanceElements", "\[Rule]", 
               RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
             "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
            "\"\< \>\"", ",", 
            RowBox[{"Dynamic", "[", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"massValue", ",", 
               RowBox[{"{", 
                RowBox[{"2", ",", "1"}], "}"}]}], "]"}], "]"}]}], 
           "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
        "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"m2Setter", " ", ":=", " ", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "Text", "[", "\"\<coupling to neighbouring: \>\"", " ", "]"}], ",", 
         " ", "\[IndentingNewLine]", 
         RowBox[{"Dynamic", "@", 
          RowBox[{"If", " ", "[", " ", 
           RowBox[{
            RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Dynamic", "[", 
               RowBox[{"m2Sel", ",", 
                RowBox[{
                 RowBox[{"(", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"m2Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                   "\[IndentingNewLine]", 
                   RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                   RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                   RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                   RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                   RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
               "]"}], ",", " ", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"#", " ", "\[Rule]", " ", 
                  RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                 " ", 
                RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], ")"}]}], 
             "\[IndentingNewLine]", "]"}], ",", 
            RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
      " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"km1", " ", ":=", " ", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Row", "[", 
          RowBox[{"{", " ", 
           RowBox[{
            RowBox[{"Text", "@", "\"\<horizontal: \>\""}], ",", 
            RowBox[{"kLable", "[", "1", "]"}], ",", " ", "\"\< || \>\"", ",", 
            " ", 
            RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", "\"\< \>\""}],
            "}"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Row", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Dynamic", "[", 
               RowBox[{"k1", ",", 
                RowBox[{
                 RowBox[{"(", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"k1", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], " ", ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1", ",", " ", "k1"}], " ", "]"}]}], " ", ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                   RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                   ";", "\[IndentingNewLine]", 
                   RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
               "]"}], "\[IndentingNewLine]", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
              RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
              RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
              RowBox[{"AppearanceElements", "\[Rule]", 
               RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
             "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
            "\[IndentingNewLine]", "\"\< \>\"", ",", 
            RowBox[{"Dynamic", "[", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"k1", ",", 
               RowBox[{"{", 
                RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
           "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
        "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"km2", " ", ":=", " ", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Row", "[", 
          RowBox[{"{", " ", 
           RowBox[{
            RowBox[{"Text", "@", "\"\<vertical: \>\""}], ",", 
            RowBox[{"kLable", "[", "2", "]"}], ",", " ", "\"\< || \>\"", ",", 
            " ", 
            RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", "\"\< \>\""}],
            "}"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Row", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Dynamic", "[", 
               RowBox[{"k2", ",", 
                RowBox[{
                 RowBox[{"(", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"k2", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "2", ",", " ", "k2"}], " ", "]"}]}], " ", ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                   RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                   ";", "\[IndentingNewLine]", 
                   RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
               "]"}], "\[IndentingNewLine]", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
              RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
              RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
              RowBox[{"AppearanceElements", "\[Rule]", 
               RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
             "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
            "\"\< \>\"", ",", 
            RowBox[{"Dynamic", "[", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"k2", ",", 
               RowBox[{"{", 
                RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
           "\[IndentingNewLine]", "}"}], "]"}]}], " ", "\[IndentingNewLine]", 
        "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"km3", " ", ":=", " ", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Row", "[", 
          RowBox[{"{", " ", 
           RowBox[{
            RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
            RowBox[{"kLable", "[", "3", "]"}], ",", " ", "\"\< || (\>\"", ",",
             "  ", 
            RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
            "\"\< + \>\"", ",", " ", 
            RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
            "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Row", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Dynamic", "[", 
               RowBox[{"k3", ",", 
                RowBox[{
                 RowBox[{"(", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"k3", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "3", ",", " ", "k3"}], " ", "]"}]}], " ", ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                   RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                   ";", "\[IndentingNewLine]", 
                   RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
               "]"}], "\[IndentingNewLine]", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
              RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
              RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
              RowBox[{"AppearanceElements", "\[Rule]", 
               RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
             "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
            "\"\< \>\"", ",", 
            RowBox[{"Dynamic", "[", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"k3", ",", 
               RowBox[{"{", 
                RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
           "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
        "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"km4", " ", ":=", " ", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Row", "[", 
          RowBox[{"{", " ", 
           RowBox[{
            RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
            RowBox[{"kLable", "[", "4", "]"}], ",", " ", "\"\< || (\>\"", ",",
             "  ", 
            RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
            "\"\< - \>\"", ",", " ", 
            RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
            "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Row", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Dynamic", "[", 
               RowBox[{"k4", ",", 
                RowBox[{
                 RowBox[{"(", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"k4", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "4", ",", " ", "k4"}], " ", "]"}]}], " ", ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                   RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                   ";", "\[IndentingNewLine]", 
                   RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
               "]"}], "\[IndentingNewLine]", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
              RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
              RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
              RowBox[{"AppearanceElements", "\[Rule]", 
               RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
             "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
            "\"\< \>\"", ",", 
            RowBox[{"Dynamic", "[", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"k4", ",", 
               RowBox[{"{", 
                RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
           "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
        "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"km5a", " ", ":=", " ", 
       RowBox[{"{", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Row", "[", 
          RowBox[{"{", " ", 
           RowBox[{
            RowBox[{"Text", "@", "\"\<coupling from \>\""}], ",", " ", 
            RowBox[{"Dynamic", "@", 
             RowBox[{"massLabel", "[", " ", "m1Sel", "]"}]}], ",", 
            RowBox[{"Text", "@", "\"\< to: \>\""}]}], "}"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Dynamic", "@", 
          RowBox[{"If", " ", "[", " ", 
           RowBox[{
            RowBox[{"rawNumberOfMasses", " ", ">", " ", "2"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Dynamic", "[", 
               RowBox[{"moSel", ",", 
                RowBox[{
                 RowBox[{"(", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"moSel", "=", "#"}], ";", "\[IndentingNewLine]", 
                   RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                   RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
               "]"}], ",", " ", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"#", " ", "\[Rule]", " ", 
                  RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                 " ", 
                RowBox[{"(", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"Range", "[", "rawNumberOfMasses", "]"}], ",", 
                   "m1Sel"}], "]"}], ")"}]}], ")"}]}], "\[IndentingNewLine]", 
             "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Dynamic", "@", 
             RowBox[{"massLabel", "[", " ", 
              RowBox[{"First", "@", 
               RowBox[{"Delete", "[", " ", 
                RowBox[{
                 RowBox[{"Range", "[", "2", "]"}], ",", " ", "m1Sel"}], 
                "]"}]}], " ", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
        "\[IndentingNewLine]", "}"}]}], " ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"km5b", " ", ":=", " ", 
       RowBox[{"{", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Row", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"kLable", "[", "5", "]"}], ",", " ", "\"\<: \>\""}], 
           "}"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Row", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Dynamic", "[", 
               RowBox[{"k5", ",", 
                RowBox[{
                 RowBox[{"(", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"k5", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKarrayOriginElement", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "moSel", ",", " ", 
                    "k5"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                   RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                   RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                   ";", "\[IndentingNewLine]", 
                   RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
               "]"}], "\[IndentingNewLine]", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
              RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
              RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
              RowBox[{"AppearanceElements", "\[Rule]", 
               RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
             "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
            "\"\< \>\"", ",", 
            RowBox[{"Dynamic", "@", 
             RowBox[{"NumberForm", "[", " ", 
              RowBox[{"k5", ",", 
               RowBox[{"{", 
                RowBox[{"3", ",", "2"}], "}"}]}], "]"}]}]}], 
           "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
        "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"freqControls", " ", ":=", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Row", "[", 
          RowBox[{"{", " ", 
           RowBox[{
            RowBox[{"Text", "@", "\"\<mesh size \>\""}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Manipulator", "[", 
             RowBox[{
              RowBox[{"Dynamic", "[", 
               RowBox[{"meshSize", ",", 
                RowBox[{
                 RowBox[{"(", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"meshSize", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "8", ",", " ", "2", ",", " ", "30"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                   RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}], " ", 
                   ";", "\[IndentingNewLine]", 
                   RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
               "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"2", ",", "30", ",", "2"}], "}"}], ",", 
              RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
              RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
              RowBox[{"AppearanceElements", "\[Rule]", 
               RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
            "\"\< \>\"", ",", " ", 
            RowBox[{"Dynamic", "[", "meshSize", "]"}]}], " ", 
           "\[IndentingNewLine]", "}"}], "]"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"LocatorPane", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "qPlaneLoc", 
            RowBox[{"(*", 
             RowBox[{",", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"qPlaneLoc", " ", "=", " ", "#"}], ";", " ", 
                RowBox[{"tick", "=", 
                 RowBox[{
                  RowBox[{"Not", "[", "tick", "]"}], " ", "&"}]}]}], ")"}]}], 
             "*)"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"Graphics", "[", 
               RowBox[{
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Lighter", "@", "Gray"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Polygon", "[", "\[IndentingNewLine]", 
                   RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    ")"}], "\[IndentingNewLine]", " ", "]"}], ",", 
                  "\[IndentingNewLine]", "Black", ",", 
                  RowBox[{"Line", "[", "qPlaneLoc", "]"}]}], 
                 "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                " ", 
                RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                  "/", "2"}]}], "\[IndentingNewLine]", ",", 
                RowBox[{"ImageSize", " ", "\[Rule]", "  ", 
                 RowBox[{"200", " ", 
                  RowBox[{"#", "/", 
                   RowBox[{"Max", "[", "#", "]"}]}]}]}]}], 
               "\[IndentingNewLine]", "]"}], " ", "&"}], " ", "@", " ", 
             RowBox[{"(", 
              RowBox[{
              "\"\<qMaxVec\>\"", " ", "/.", "parameterLocatorDependencies"}], 
              ")"}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
           ",", "\[IndentingNewLine]", 
           RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "}"}]}], " ",
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"dynamicsControls", " ", ":=", "\[IndentingNewLine]", 
       RowBox[{"{", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Row", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"OverVector", "[", "\"\<q\>\"", "]"}], ",", 
            "\[IndentingNewLine]", "\"\< = \>\"", ",", "\[IndentingNewLine]", 
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "qm", "}"}], ",", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"qm", " ", "=", " ", 
                RowBox[{"(", 
                 RowBox[{
                 "\"\<qMaxVec\>\"", "  ", "/.", 
                  "parameterLocatorDependencies"}], ")"}]}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{"Slider2D", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"qLoc", ",", 
                   RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"qLoc", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                  "]"}], ",", " ", 
                 RowBox[{"(*", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.01", ",", "0.01"}], "}"}], ",", " ", "qm"}], 
                   "}"}], "*)"}], " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", " ", "qm"}], ")"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{"ContinuousAction", "\[Rule]", "False"}], 
                 "\[IndentingNewLine]", ",", " ", 
                 RowBox[{"ImageSize", " ", "\[Rule]", " ", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"150", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}], " ", "&"}], ")"}], 
                   " ", "@", " ", "qm"}]}]}], "\[IndentingNewLine]", 
                "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", " ", 
            "\[IndentingNewLine]", "\"\< 2 \[Pi] \>\"", ",", "  ", 
            RowBox[{"Dynamic", "[", 
             RowBox[{"(", 
              RowBox[{"NumberForm", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"qLoc", "/", 
                   RowBox[{"(", 
                    RowBox[{"2", " ", "Pi"}], ")"}]}], " ", "//", " ", 
                  "MatrixForm"}], ")"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], "]"}]}],
            "\[IndentingNewLine]", "}"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Row", "[", 
          RowBox[{"{", 
           RowBox[{"Text", "@", "\"\<time, normalized to one period:\>\""}], 
           "}"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Row", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Manipulator", "[", 
             RowBox[{
              RowBox[{"Dynamic", "[", 
               RowBox[{"tau", ",", 
                RowBox[{
                 RowBox[{"(", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"tau", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0", ",", " ", "0", ",", " ", "1"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                   RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
               "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}], ",", 
              RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
              RowBox[{"ContinuousAction", "\[Rule]", "True"}], ",", 
              RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}]}], "]"}], 
            "}"}], "\[IndentingNewLine]", ",", " ", 
           RowBox[{"ImageSize", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"200", ",", "60"}], "}"}]}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Row", "[", 
          RowBox[{"{", 
           RowBox[{"Text", "@", "\"\<oscillation scale factor:\>\""}], "}"}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Row", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"Manipulator", "[", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"scale", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"scale", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.05", ",", " ", "0.05", ",", " ", "1"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"0.05", ",", "1"}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
               RowBox[{"AppearanceElements", "\[Rule]", 
                RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], 
             "\[IndentingNewLine]", "\"\< \>\""}], ",", "  ", 
            RowBox[{"Dynamic", "[", 
             RowBox[{"(", 
              RowBox[{"NumberForm", "[", 
               RowBox[{"scale", ",", " ", 
                RowBox[{"{", 
                 RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], "]"}]}],
            "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Text", "[", 
          RowBox[{
          "Text", "@", "\"\<Angular frequency \[Omega](q), selection:\>\""}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Dynamic", "@", 
          RowBox[{"SetterBar", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", 
             RowBox[{"omegaIndex", ",", 
              RowBox[{
               RowBox[{"(", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"omegaIndex", "=", "#"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", ";",
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"tick", "=", 
                  RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
             "]"}], ",", " ", 
            RowBox[{"Range", "[", 
             RowBox[{"2", "rawNumberOfMasses"}], "]"}]}], " ", "]"}]}]}], 
        "\[IndentingNewLine]", "}"}]}], " ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
       RowBox[{"locDependent", "[", " ", 
        RowBox[{"u", ",", " ", "rawNumberOfMasses", ",", "rawArrayOfMasses"}],
         " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      RowBox[{"kArray", " ", "=", " ", 
       RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", "n", "}"}], ",", 
        RowBox[{
         RowBox[{"n", " ", "=", " ", "2"}], " ", ";", 
         RowBox[{"While", "[", 
          RowBox[{
           RowBox[{"n", "\[LessEqual]", "rawNumberOfMasses"}], ",", 
           RowBox[{
            RowBox[{"kArray", " ", "=", " ", 
             RowBox[{"growKarray", "[", "n", "]"}]}], " ", ";", " ", 
            RowBox[{"n", "++"}]}]}], "]"}]}]}], " ", "]"}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"qLoc", " ", "=", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
         "\"\<qMaxVec\>\"", " ", "/.", " ", "parameterLocatorDependencies"}], 
         ")"}], "/", "2"}]}], " ", ";", "\[IndentingNewLine]", 
      RowBox[{"qPlaneLoc", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
      "\[IndentingNewLine]", 
      RowBox[{"couplingData", " ", "=", " ", 
       RowBox[{"calculateCouplings", "[", " ", 
        RowBox[{"parameterLocatorDependencies", ",", " ", "kArray"}], " ", 
        "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"bRefreshMatrix", ":", " ", 
         RowBox[{"dependent", " ", "on"}], ":", " ", 
         "parameterLocatorDependencies"}], ",", " ", "couplingData"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"matrix", " ", "=", " ", 
       RowBox[{"dynamicsMatrix", "[", " ", 
        RowBox[{"parameterLocatorDependencies", ",", " ", "couplingData"}], 
        " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"bRefreshDynamics", ":", " ", 
         RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", "qLoc", 
        ","}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"dynamics", " ", "=", " ", 
       RowBox[{"calcDynamics", "[", " ", 
        RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}]}], " ", 
      ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"bRefreshDynPlot", ":", " ", 
         RowBox[{"dependent", " ", "on", " ", "dynamics"}]}], ",", " ", 
        "omegaIndex", ",", " ", "scale"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"dynPlot", " ", "=", " ", 
       RowBox[{"showDynamics", "[", " ", 
        RowBox[{"parameterLocatorDependencies", ",", " ", 
         RowBox[{"dynamics", "[", 
          RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale", ",", 
         " ", "qLoc"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"bRefreshFreqPlot", ":", " ", 
         RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
        "meshSize"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"freqPlot", " ", "=", " ", 
       RowBox[{"frequencyPlotCalc", "[", " ", 
        RowBox[{
        "parameterLocatorDependencies", ",", " ", "matrix", ",", " ", 
         "meshSize"}], "]"}]}], " ", ";"}], "\[IndentingNewLine]", "}"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.6012856991198053`*^9, 3.601285748872651*^9}, {
   3.6012859053636017`*^9, 3.6012860895571375`*^9}, 3.6012861966102605`*^9, 
   3.6012862451990395`*^9, {3.601286323980545*^9, 3.601286325903655*^9}, {
   3.6012897158895516`*^9, 3.601289757803949*^9}, {3.601289975679411*^9, 
   3.601290010657411*^9}, 3.6012903878479853`*^9, 3.601290508670896*^9, 
   3.6012905692553616`*^9, {3.601290616078039*^9, 3.6012906891772203`*^9}, {
   3.6012907218100867`*^9, 3.601290762882436*^9}, {3.601290798035447*^9, 
   3.601290830856324*^9}, 3.6012908640212207`*^9, {3.6012909143490996`*^9, 
   3.6012909145471106`*^9}, 3.601290953958365*^9, 3.6012912884985*^9, 
   3.601292661648039*^9, 3.601292801025011*^9, {3.60129343233712*^9, 
   3.601293432742143*^9}, {3.6012936972312713`*^9, 3.601293697420282*^9}, {
   3.601293746641097*^9, 3.6012937466790996`*^9}, {3.6012939318926935`*^9, 
   3.6012939323037167`*^9}, {3.601294122251581*^9, 3.601294122467593*^9}, 
   3.6012942551301813`*^9, {3.6012944188215437`*^9, 3.601294442762913*^9}, 
   3.6012945563934126`*^9, {3.6012947238489904`*^9, 3.601294724282015*^9}, {
   3.601294819100438*^9, 3.601294822709645*^9}, {3.601294854070439*^9, 
   3.6012948700413523`*^9}, {3.6012949096116157`*^9, 3.60129491161473*^9}, {
   3.6012949467127376`*^9, 3.6012949997707725`*^9}, {3.6012950467344584`*^9, 
   3.6012951491413155`*^9}, {3.601295359317337*^9, 3.6012953849268017`*^9}, {
   3.601295418964749*^9, 3.601295420398831*^9}, {3.601295453499724*^9, 
   3.6012955534934435`*^9}, {3.6012956581504297`*^9, 3.601295662191661*^9}, {
   3.601295721258039*^9, 3.6012957219340773`*^9}, {3.6012957646705217`*^9, 
   3.6012957896289496`*^9}, {3.6012958529855733`*^9, 
   3.6012958586618977`*^9}, {3.601295913976062*^9, 3.6012959436967616`*^9}, {
   3.601296341996543*^9, 3.6012964001018667`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}, {
       1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}}, {{
       2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}, {
       2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}, {{
       3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}, {
       3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}, {
       3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}, {
       3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}}, {{{
       1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
        0.09999999999999987}, {{
        0.19999999999999987`, -0.3999999999999999}, {-0.3999999999999999, 
        0.8}}}, {
       1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
        0.09999999999999987}, {{
        0.19999999999999987`, -0.3999999999999999}, {-0.3999999999999999, 
        0.8}}}, {
       1, 2, {-1, 0}, 0.25, 1., {0.9, 0.7}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       1, 2, {-1, 1}, 0.25, 1.6899999999999995`, {0.9, 0.7}, {
        2.1999999999999997`, 0.7}, {{0.9999999999999999, 0.}, {0., 0.}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 3, {0, -1}, 0.25, 2.2600000000000002`, {0.9, 
        0.7}, {-0.5999999999999999, 0.5999999999999999}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       1, 3, {0, -1}, 0.25, 2.2600000000000002`, {0.9, 
        0.7}, {-0.5999999999999999, 0.5999999999999999}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       1, 3, {1, -1}, 0.25, 3.3999999999999995`, {0.9, 
        0.7}, {-0.4999999999999998, 1.9}, {{
        0.5764705882352942, -0.4941176470588236}, {-0.4941176470588236, 
        0.423529411764706}}}, {
       1, 3, {1, -1}, 0.25, 3.3999999999999995`, {0.9, 
        0.7}, {-0.4999999999999998, 1.9}, {{
        0.5764705882352942, -0.4941176470588236}, {-0.4941176470588236, 
        0.423529411764706}}}, {
       1, 2, {1, 0}, 0.25, 3.4000000000000004`, {0.9, 0.7}, {0.5, 2.5}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 2, {0, 1}, 0.25, 3.65, {0.9, 0.7}, {2.3, 2.}, {{0.5369863013698629, 
        0.4986301369863013}, {0.4986301369863013, 0.463013698630137}}}, {
       1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 2.7}, {{
        0.05882352941176473, 0.23529411764705888`}, {0.23529411764705888`, 
        0.9411764705882353}}}, {
       1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 2.7}, {{
        0.05882352941176473, 0.23529411764705888`}, {0.23529411764705888`, 
        0.9411764705882353}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 3, {-1, -1}, 0.25, 4.520000000000001, {0.9, 
        0.7}, {-0.7, -0.7000000000000002}, {{0.5663716814159291, 
        0.49557522123893794`}, {0.49557522123893794`, 
        0.43362831858407075`}}}, {
       1, 3, {-1, -1}, 0.25, 4.520000000000001, {0.9, 
        0.7}, {-0.7, -0.7000000000000002}, {{0.5663716814159291, 
        0.49557522123893794`}, {0.49557522123893794`, 
        0.43362831858407075`}}}, {
       1, 3, {-1, 1}, 0.25, 4.879999999999999, {0.9, 0.7}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       1, 3, {-1, 1}, 0.25, 4.879999999999999, {0.9, 0.7}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       1, 2, {0, -1}, 0.25, 5.85, {0.9, 0.7}, {-1.5, 0.3999999999999999}, {{
        0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
        0.015384615384615389`}}}, {
       1, 2, {1, -1}, 0.25, 6.289999999999999, {0.9, 0.7}, {-1.4, 1.7}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       1, 3, {0, 1}, 0.25, 7.540000000000002, {0.9, 0.7}, {3.2, 2.2}, {{
        0.7015915119363394, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       1, 3, {0, 1}, 0.25, 7.540000000000002, {0.9, 0.7}, {3.2, 2.2}, {{
        0.7015915119363394, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 2, {-1, -1}, 0.25, 8.81, {0.9, 0.7}, {-1.6, -0.9000000000000001}, {{
        0.7094211123723042, 0.4540295119182747}, {0.4540295119182747, 
        0.29057888762769585`}}}, {
       1, 2, {1, 1}, 0.25, 9.009999999999998, {0.9, 0.7}, {2.4, 3.3}, {{
        0.24972253052164267`, 0.4328523862375139}, {0.4328523862375139, 
        0.7502774694783573}}}, {
       1, 3, {1, 1}, 0.25, 13.599999999999998`, {0.9, 0.7}, {3.3, 3.5}, {{
        0.423529411764706, 0.4941176470588236}, {0.4941176470588236, 
        0.5764705882352942}}}, {
       1, 3, {1, 1}, 0.25, 13.599999999999998`, {0.9, 0.7}, {3.3, 3.5}, {{
        0.423529411764706, 0.4941176470588236}, {0.4941176470588236, 
        0.5764705882352942}}}}, {{
       2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       2, 3, {1, -1}, 0.25, 1.2999999999999996`, {0.4, 
        1.2}, {-0.4999999999999998, 1.9}, {{
        0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
        0.376923076923077}}}, {
       2, 3, {1, -1}, 0.25, 1.2999999999999996`, {0.4, 
        1.2}, {-0.4999999999999998, 1.9}, {{
        0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
        0.376923076923077}}}, {
       2, 3, {0, -1}, 0.25, 1.3599999999999999`, {0.4, 
        1.2}, {-0.5999999999999999, 0.5999999999999999}, {{0.7352941176470588,
         0.44117647058823534`}, {0.44117647058823534`, 
        0.2647058823529413}}}, {
       2, 3, {0, -1}, 0.25, 1.3599999999999999`, {0.4, 
        1.2}, {-0.5999999999999999, 0.5999999999999999}, {{0.7352941176470588,
         0.44117647058823534`}, {0.44117647058823534`, 
        0.2647058823529413}}}, {
       2, 1, {1, -1}, 0.25, 1.6899999999999995`, {0.4, 
        1.2}, {-0.8999999999999998, 1.2}, {{0.9999999999999999, 0.}, {0., 
        0.}}}, {2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
        2.5}, {{0.005882352941176467, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 0.09999999999999987}, {{
        0.34594594594594585`, -0.4756756756756756}, {-0.4756756756756756, 
        0.654054054054054}}}, {
       2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 0.09999999999999987}, {{
        0.34594594594594585`, -0.4756756756756756}, {-0.4756756756756756, 
        0.654054054054054}}}, {
       2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
        1.4000000000000001`, 2.7}, {{0.3076923076923076, 
        0.46153846153846145`}, {0.46153846153846145`, 0.6923076923076924}}}, {
       2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
        1.4000000000000001`, 2.7}, {{0.3076923076923076, 
        0.46153846153846145`}, {0.46153846153846145`, 0.6923076923076924}}}, {
       2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
        0.8, -0.6000000000000001}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {-1.4, 1.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {
        2.1999999999999997`, 0.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {0, -1}, 0.25, 3.65, {0.4, 
        1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
        0.463013698630137}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 0.3999999999999999}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 3, {-1, -1}, 0.25, 4.82, {0.4, 1.2}, {-0.7, -0.7000000000000002}, {{
        0.25103734439834025`, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       2, 3, {-1, -1}, 0.25, 4.82, {0.4, 1.2}, {-0.7, -0.7000000000000002}, {{
        0.25103734439834025`, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{0.9846153846153846,
         0.1230769230769231}, {0.1230769230769231, 0.015384615384615389`}}}, {
       2, 1, {-1, 1}, 0.25, 6.289999999999999, {0.4, 1.2}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       2, 3, {-1, 1}, 0.25, 7.379999999999998, {0.4, 1.2}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9878048780487806, -0.10975609756097565`}, {-0.10975609756097565`, 
        0.01219512195121952}}}, {
       2, 3, {-1, 1}, 0.25, 7.379999999999998, {0.4, 1.2}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9878048780487806, -0.10975609756097565`}, {-0.10975609756097565`, 
        0.01219512195121952}}}, {
       2, 2, {1, 1}, 0.25, 8.409999999999998, {0.4, 1.2}, {2.4, 3.3}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {0.4, 1.2}, {-1.6, -0.9000000000000001}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 1, {1, 1}, 0.25, 8.809999999999999, {0.4, 1.2}, {2.9, 2.8}, {{
        0.7094211123723043, 0.4540295119182747}, {0.4540295119182747, 
        0.2905788876276958}}}, {
       2, 3, {0, 1}, 0.25, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
        0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570139`}}}, {
       2, 3, {0, 1}, 0.25, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
        0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570139`}}}, {
       2, 1, {-1, -1}, 0.25, 9.010000000000002, {0.4, 
        1.2}, {-1.1, -1.4000000000000001`}, {{0.24972253052164256`, 
        0.4328523862375138}, {0.4328523862375138, 0.7502774694783573}}}, {
       2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{0.6138686131386862,
         0.48686131386861314`}, {0.48686131386861314`, 
        0.3861313868613139}}}, {
       2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{0.6138686131386862,
         0.48686131386861314`}, {0.48686131386861314`, 
        0.3861313868613139}}}}, {{
       3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
        0.19999999999999998`, -0.39999999999999997`}, {-0.39999999999999997`, 
        0.7999999999999999}}}, {
       3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
        0.19999999999999998`, -0.39999999999999997`}, {-0.39999999999999997`, 
        0.7999999999999999}}}, {
       3, 2, {-1, 1}, 0.25, 1.2999999999999994`, {1.3, 1.4}, {
        2.1999999999999997`, 0.7}, {{
        0.6230769230769229, -0.48461538461538467`}, {-0.48461538461538467`, 
        0.3769230769230771}}}, {
       3, 2, {-1, 1}, 0.25, 1.2999999999999994`, {1.3, 1.4}, {
        2.1999999999999997`, 0.7}, {{
        0.6230769230769229, -0.48461538461538467`}, {-0.48461538461538467`, 
        0.3769230769230771}}}, {
       3, 2, {0, 1}, 0.25, 1.3599999999999997`, {1.3, 1.4}, {2.3, 2.}, {{
        0.7352941176470587, 0.4411764705882354}, {0.4411764705882354, 
        0.2647058823529413}}}, {
       3, 2, {0, 1}, 0.25, 1.3599999999999997`, {1.3, 1.4}, {2.3, 2.}, {{
        0.7352941176470587, 0.4411764705882354}, {0.4411764705882354, 
        0.2647058823529413}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
        1.4000000000000001`, 2.7}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
        0.09999999999999987}, {{0.00588235294117648, 0.07647058823529418}, {
        0.07647058823529418, 0.9941176470588234}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
        1.4000000000000001`, 2.7}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
        0.09999999999999987}, {{0.00588235294117648, 0.07647058823529418}, {
        0.07647058823529418, 0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 2.5}, {{
        0.34594594594594597`, -0.47567567567567565`}, {-0.47567567567567565`, 
        0.654054054054054}}}, {
       3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 2.5}, {{
        0.34594594594594597`, -0.47567567567567565`}, {-0.47567567567567565`, 
        0.654054054054054}}}, {
       3, 1, {0, 1}, 0.25, 2.26, {1.3, 1.4}, {2.8, 1.5}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       3, 1, {0, 1}, 0.25, 2.26, {1.3, 1.4}, {2.8, 1.5}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.3076923076923077, 
        0.46153846153846156`}, {0.46153846153846156`, 0.6923076923076923}}}, {
       3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.3076923076923077, 
        0.46153846153846156`}, {0.46153846153846156`, 0.6923076923076923}}}, {
       3, 1, {-1, 1}, 0.25, 3.399999999999999, {1.3, 1.4}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.576470588235294, -0.4941176470588235}, {-0.4941176470588235, 
        0.423529411764706}}}, {
       3, 1, {-1, 1}, 0.25, 3.399999999999999, {1.3, 1.4}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.576470588235294, -0.4941176470588235}, {-0.4941176470588235, 
        0.423529411764706}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.3, 
        1.4}, {-0.4999999999999998, 1.9}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999984`, {1.3, 1.4}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9283667621776505, -0.25787965616045855`}, {-0.25787965616045855`, 
        0.07163323782234961}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.3, 
        1.4}, {-0.4999999999999998, 1.9}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999984`, {1.3, 1.4}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9283667621776505, -0.25787965616045855`}, {-0.25787965616045855`, 
        0.07163323782234961}}}, {
       3, 3, {0, 1}, 0.25, 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
        0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.3, 1.4}, {-0.5999999999999999, 
        0.5999999999999999}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {0.8, -0.6000000000000001}, {{
        0.058823529411764705`, 0.23529411764705882`}, {0.23529411764705882`, 
        0.9411764705882353}}}, {
       3, 3, {0, 1}, 0.25, 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
        0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.3, 1.4}, {-0.5999999999999999, 
        0.5999999999999999}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {0.8, -0.6000000000000001}, {{
        0.058823529411764705`, 0.23529411764705882`}, {0.23529411764705882`, 
        0.9411764705882353}}}, {
       3, 1, {1, 1}, 0.25, 4.52, {1.3, 1.4}, {2.9, 2.8}, {{0.5663716814159292,
         0.49557522123893805`}, {0.49557522123893805`, 
        0.43362831858407075`}}}, {
       3, 1, {1, 1}, 0.25, 4.52, {1.3, 1.4}, {2.9, 2.8}, {{0.5663716814159292,
         0.49557522123893805`}, {0.49557522123893805`, 
        0.43362831858407075`}}}, {
       3, 2, {1, 1}, 0.25, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
        0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       3, 2, {1, 1}, 0.25, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
        0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       3, 1, {1, -1}, 0.25, 4.879999999999999, {1.3, 
        1.4}, {-0.8999999999999998, 1.2}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       3, 1, {1, -1}, 0.25, 4.879999999999999, {1.3, 
        1.4}, {-0.8999999999999998, 1.2}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       3, 2, {1, -1}, 0.25, 7.380000000000001, {1.3, 1.4}, {-1.4, 1.7}, {{
        0.9878048780487805, -0.10975609756097562`}, {-0.10975609756097562`, 
        0.012195121951219514`}}}, {
       3, 2, {1, -1}, 0.25, 7.380000000000001, {1.3, 1.4}, {-1.4, 1.7}, {{
        0.9878048780487805, -0.10975609756097562`}, {-0.10975609756097562`, 
        0.012195121951219514`}}}, {
       3, 1, {0, -1}, 0.25, 7.539999999999999, {1.3, 
        1.4}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7015915119363395, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       3, 1, {0, -1}, 0.25, 7.539999999999999, {1.3, 
        1.4}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7015915119363395, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{0.4756242568370986,
         0.49940546967895355`}, {0.49940546967895355`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.3, 1.4}, {-0.7, -0.7000000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{0.4756242568370986,
         0.49940546967895355`}, {0.49940546967895355`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.3, 1.4}, {-0.7, -0.7000000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 2, {0, -1}, 0.25, 8.84, {1.3, 1.4}, {-1.5, 0.3999999999999999}, {{
        0.8868778280542985, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570136`}}}, {
       3, 2, {0, -1}, 0.25, 8.84, {1.3, 1.4}, {-1.5, 0.3999999999999999}, {{
        0.8868778280542985, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570136`}}}, {
       3, 1, {-1, -1}, 0.25, 13.600000000000001`, {1.3, 
        1.4}, {-1.1, -1.4000000000000001`}, {{0.42352941176470593`, 
        0.4941176470588235}, {0.4941176470588235, 0.576470588235294}}}, {
       3, 1, {-1, -1}, 0.25, 13.600000000000001`, {1.3, 
        1.4}, {-1.1, -1.4000000000000001`}, {{0.42352941176470593`, 
        0.4941176470588235}, {0.4941176470588235, 0.576470588235294}}}, {
       3, 2, {-1, -1}, 0.25, 13.700000000000001`, {1.3, 
        1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
        0.4868613138686131}, {0.4868613138686131, 0.38613138686131376`}}}, {
       3, 2, {-1, -1}, 0.25, 13.700000000000001`, {1.3, 
        1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
        0.4868613138686131}, {0.4868613138686131, 
        0.38613138686131376`}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.7810798268491695, 2.954333184909313*^-18], {Complex[
      0.7215652710838509, 0.], Complex[
      0.6550282614426728, -0.011394912908445843`], Complex[
      0.0944217955499258, -0.07893762107002644], Complex[
      0.1257490008470407, -0.017364965142664057`], Complex[
      0.02682294907904311, -0.03514621892899499], Complex[0.1250007751718993, 
      0.03620489493849784]}}, {
      Complex[0.6877417416995301, 1.2298637412670706`*^-17], {
      Complex[-0.18539486255886187`, 0.1528485984637736], Complex[
      0.035457532507308, -0.13091632858211089`], 
      Complex[-0.04422429707248585, -0.05226600581613061], Complex[
      0.11305188158973478`, -0.07732397921901776], Complex[0.7111170144404464,
       0.], Complex[0.6218180951592255, -0.08987395607518217]}}, {
      Complex[0.6395653253316103, -5.8016199731610394`*^-18], {
      Complex[-0.26408767165767955`, 0.07183374799166652], Complex[
      0.08035915699178059, -0.14317518737772583`], Complex[0.7611887987162608,
       0.], Complex[0.49619740114864036`, -0.01581282724257238], 
      Complex[-0.2254300504248523, -0.06981249447718996], Complex[
      0.0733448335831932, -0.10582360605564722`]}}, {
      Complex[0.5991513573246193, 3.4231568859811624`*^-19], {
      Complex[-0.5160720096553988, 0.09843592555240745], Complex[
      0.5931433141222766, 0.], 
      Complex[-0.3728426666727748, -0.1519599625422782], 
      Complex[-0.052147660603406545`, 0.016711887062770735`], 
      Complex[-0.3864156292389327, -0.11560035926660744`], Complex[
      0.18877954828788407`, -0.09349175848881848]}}, {
      Complex[0.5125319386842484, 3.505411024735723*^-17], {Complex[
      0.23585998157395405`, -0.036674393365031255`], 
      Complex[-0.3794604807704108, 0.11676950772773517`], 
      Complex[-0.3473657765301752, 0.023810922882990356`], Complex[
      0.5028981770079166, 0.], 
      Complex[-0.4142607617028437, -0.006458435171694449], Complex[
      0.48884180327638593`, 0.025360711128023905`]}}, {
      Complex[0.4233167680086573, 4.59355834595107*^-17], {
      Complex[-0.10724230651603149`, -0.04702573598856878], Complex[
      0.12190047863839211`, 0.03392624935769316], 
      Complex[-0.34133759638257927`, -0.030210654306009707`], Complex[
      0.6802637521967211, 0.], Complex[
      0.3182437606756295, -0.032436238810649304`], 
      Complex[-0.5363138115850469, -0.011420795746357515`]}}}, \
$CellContext`dynPlot$$ = Show[{
      Table[
       ListPlot[
        Part[$CellContext`points$75265, $CellContext`k][$CellContext`nu$75265 \
#], PlotRange -> {{(-$CellContext`glConstWindowHalfWidth$$)/
           
           2, $CellContext`glConstWindowHalfWidth$$}, \
{(-$CellContext`glConstWindowHalfWidth$$)/
           2, $CellContext`glConstWindowHalfWidth$$}}, 
        ImageSize -> $CellContext`glConstPrimaryDisplaySize$$, PlotStyle -> 
        Directive[
          PointSize[
           
           Sqrt[(Part[$CellContext`mScalarArray$75265, \
$CellContext`k]/$CellContext`glConstMMax$$)/350]], 
          $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$75265}], 
      Graphics[{$CellContext`lines$75265}]}]& , $CellContext`dynTab$$ = 
    1, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyEnXV0lcf39YNDcCvuUNylSOAmOARrEiBYcS1SCsWKW3EtTtFgwV1LcAsS
PAq5yb0hAoVStEHe/r49e57efdr15h/WmjVr7vie/eGZOcV6DfPpm9LNzS1T
dje3VH/961No45Gru9OcabMy4t2Hb5ODttX/UHjNp3gb0useCDjxcdGroPdX
vmg6zMNK/zt/UtCEubVTX2hgpbf7X3pEUK5ve6Q/7Gulu8nf73VfxC6so/Lb
Zo7NfC9tYyu91d/l25KCPcrtqprA9bH9Mu3g0OB0iVSfZNvARlev7JycYPt0
/13zjg3dTLue+6x5+WPfeJOOdnVpfaHcfe94yp8UVGLr52qbulnpaFfxda+W
NsxilY927brVv0rwvUTOb3v9cEPrx2+STDralW5fQ/u6vklcH1s/r7hyD4NU
/W1frw/7sP4k+ud1ENp1ODnfndxLrHS0q+reXC3yp0+g/ElBj+rmLLnzx0ST
jnatXuleMnVwkklHu3IXuD1w5+wkzm+r0ud1Kt/HVvloV+XmIw90maXqY+v4
oF7BVK1U/W3P+2+sPrJFvK3d/9Kdpl1Di6YZsvS9lW7Ga+nE0KX3Eih/UlDP
ovu9h5+y0tGursGPHuxebZWDdqXNN2pigcrxnN/W/Pvuzxa0stLRrrLLUk7u
4aPqY6tQ5sP5DtVU/W1Fey765emIeBt+D+2aeSp5TcYOCSYd7apbIv3eJ8s5
f1LQgUKrrk6vaqWjXa9ORM4e3MNKx9/EfoenLJmq8ts4P9p1iMpHu/69Psk2
1F/aa0O70F6ko13UPza0i/rThnZR/5vfp/FCfhuNrw3t6uc6H1AfG80f1N+G
+eb39/w07Xoq8xPpaJefzGfX/ElBNWT+Ix3tqirrBem8vii/bZWsR6SjXVi/
VB9beVnvVH/bUdkfZD/xRLuwnyAd7aL9xxPtSu26X3miXbS/ef7Hfoj8Nto/
PdGu4q77racZL9f92dPsG7Kfy/5v2oX9H+loF+mFaVesq76YdpEemXaRfpl2
kd6Zdk1x1UfTLtJT0y7WX6PLVb9492eKOKXLR1OU6nNiqFPpcrp+zxck9nMq
Xa7aaF6n9uOdSpf9C5wuHLZY5bdd3nFs5KN1TqXLI9fda9vwqVPp8paU5Tsn
VI5Tujwri3+GlvnjlC4frXN61b1lTqXLjulJHxYvdypdLrp9Wb6t0U6ly7+/
Ozd8iH+c0uVMo2asODI8TulyxMP8V54NiFO6fGtRwRHu/0hHuxYuvz+heH1V
f1uzArvSt/nFqXT5VHTIrQ3dnEqXr313f132GM6fFLTtXoHmAzrFKV3+OCdt
9R794pQur+786/Vcg1R+m8+kLcF3v41Tujwq970ltQrEKV1eOfFj1Zt7VP1t
80JmdJ4yx6l0+dqfSZ8b3HIqXR4yvV+XwlXjlC433rh1x5K8cUqX227u36XE
EafS5Xd/tC29e7lT6fKvOx5emD/bqXQ5yzVPr63fq/rYCjVP0d29t6q/ran3
0ve71juVLl+IXt9uolec0uWd7VJUmHOS8ycFOfJ7rksc41S6nL5yj3LXZzmV
LjfrWD0yeb7Kb+P8aJeTyke7/r0+yTbUn3UZ7WVdpv4x+pXTtT+NflH/m9+n
8TL6ReNr9KuR63ww+kXzx+gX5hvrMuYn6/Iqmc+sy2Nl/rMu+8l6YV1eJeuL
dfmzrEfW5Y2yflmXsd5Zl7E/sC5jP2Fdpv3H6Few635l9Iv2N6NftB8a/aL9
0+gX7bdGv2h/NvqF/Zx1Gfs/6zLphWnXGFd9Me0iPTLtIv0y7SK9M+3K4KqP
pl2kp5Yuk/6iXY0XTDz49WiH0uU8QYk9K7vHKl2+cXBm3TMf7UqXA+9nP/VT
hF3p8u2NtXMVeaHy23r1rrK82doYpctNL6Q9k9RA1cc2fOK313741qF0+V7m
ww/d+juULn+sUCxFvW8dSpd/GF5kdIlhnP+vff728aGB8x1Kl68f7Bea9apD
6XLhtpd27zyr8ttypHK09tvgULr8oYPvpMBNqj6201MdNUZvUvW3DZz5VfdN
dR1Kl09Uq12saFCs0uU1zRvYfhjB+ZOC+kxz5tq02aF0+b1fYGr3NQ6ly6Mu
tvl2/U6V35YrVc/3idccSpcPXgwcWGmrQ+lyh19q18oySNXflq9HjsUB/RxK
l336bAt16+5Quvy+R9Hbmb/l/ElBmx/PeXipr0Ppcopn0eHDAmOVLrv7bWp2
MXOM0uVFP0a+bGy3K13eXTD3YrdIu9Lles+qXn5RNkbpctfBv3Y++ClW6fJP
07PHLZzrULo8Y8WIvYtqOpQun+622G95wRilyx6zv3a/8btd6bLtysC0Wf60
K13m/GjXGSof7fr3+iTbUH/WZbSXdZn6x+gX9afRL+p/8/s0Xka/aHyNfgW4
zgejXzR/jH5hvrEuY36yLneU+cy6fFjmP+tyDlkvrMtjZX2xLv8p65F1ubes
X9bltbLeWZexP7AuYz9hXab9x+gX7VeeVrtc9jejX7QfGv2i/dPol5frfmv0
i/Zno1/Yz1mXsf+zLpNemHa1cNUX0y7SI9Mu0i/TLtI7065gV3007SI9Ne1i
/UW7SqXdNNpWIVbpcoXyJSq3Th2jdPnn9bmLVW3+WOly9h05iuYu+Ejpcu76
uTvFd3+kdHlnuw8pQnvYlS43LLo0W+h5u9Llxe53cta7ZFe6vPpB5wJJx+1K
l+u32jbjo2es0uVW7xICwr7l/ElBud57Z0lZy650ueDTjAvPt7IrXS73tP+h
uwNVflvQjV5F6y+1K12eNXn/kQGX7EqXK3oUTXHpjaq/7d5PzWL2VI5Ruvzi
StrRT0fEKF0e7XZma2A+zp8UVPNK8oi78Xaly8XLjPPsfdiudLnUhkOtCk9T
+W1paxdovLerXelyaOzBfsvr25Uu31/f8nePanaly7MWLWl4M8mudPlA7I0n
ZbYqHQyKiB3Tb/0Jzp8UVLziwrpjLtiVLn/pTPn20iG70mXP2JRp7uaMVrq8
q2nI63JPo5Qud2tpcwRUfaR0OXOGK/XXN41Wujy7W0Ka3UNjlC4nDu8yNO0Y
u9Ll9pVv/tGkm13pcrP42I45Hj5Wutw2S9ULWd5FKV0OTHMx0vFHlNJlzo92
eVP5aNe/1yfZhvqzLqO9rMvUP0a/vnHtT6Nf1P/m92m8jH7R+Br9ovlg9Ivm
j9EvzDfW5TkyP1mXH8h8Zl0Ol/nPupxe1gvrcjFZX6zLBWU9si5Xk/XLujxG
1jvr8kvZH1iXsZ+wLtP+Y/Rrput+ZfSL9jejX7QfGv2i/dPoV3bX/dboF+3P
Rr+wn7MuY/9nXSa9MO1q5Kovpl2kR6ZdpF+mXaR3pl1LXfXRtIv01LSL9Rft
Svtrp547+kUrXa7i3q5lu9WPlS7vnldydsj5CKXLhYu3/XxubLjS5Xsrew0v
/ETltxVr/dTds3OU0uURY4+0fDYvSuly/fe70ow/GqV0edmPC3sViolSunxx
5+wL/qOilS7v8G4w69W8R0qXFz5JuWhv+Uily8UydnNWqx6pdDnzqdnZ/5yt
8tsGdfK71Ct1lNLlxReeX5sxI0rpctk1/ZccLMz1SbY1cUsd2yfxkdLl/V13
pZ7S67HS5fFeBV79uoDzJwVVnzp3TLvoKKXLIaUnfFOmfZTS5T/TDA9LFxap
dLl3r9imiQMilS7vCxg4dWuxSKXLaRIqrh38Y6TS5TFTpsQVTaV0Lcj/ZKX3
72OilC7PTPXzvBXXo5Qu597e/uqlLVFKl1tmrXd8waQopcvT615+/kMOld/W
9uGX0+o8C1O6/P3vZTzje4YrXa57yz06Zg3XJ9kWt6tn/S+zRitdLh8eUeBY
ziily74zf1r9eHiU0uUPPV5V952odDYodHDo819W31b6y+mo/2cqB/X/999N
tqGerL9oF+sv9YPRqZGu/WZ0ivrZ/D6Ni9EpGkejU7lcx93oFM0To1OYV6y/
42Qesv6ml3nL+rtf5jnrb09ZF6y/WEesv3dl3bH+VpZ1yvo7VtY16y/2AdZf
7Busv7TPGJ1a6rovGZ2ifczoFO17RqdonzQ6tcB1XzU6Rfuw0Sns26y/2OdZ
f0kXTLu+d9UR0y7SHdMu0inTLtI10y7SQdMu0k3TLtZZtCto+tpa6/NEKP1N
cWbC7p/7Rij9LbbLP9XacmFKfwPqu23o4xei9PfHidtef7p5U+lvH5/xQ6+H
hCj9ffjl0r7LDt5R+rtpzfGn23veV/q7/3X/g/Wyhyr93d89PPjojnClv5+2
bKu5/nK40t/UTao6PriFK/1tk3xw1v7jYUp/+xXJumywI0zp756VB9dufhCm
9HdDK0e5fXfClP5W6jMovMDHMKW/Kds/8N8+IFzp78DkvaVbng9X+vvxTpOO
O8tz/qSgGn0frr19LUzpr3frW+2TN4cp/a2y7bvNNTep/LZmdZ/18F8cpvT3
iNf17+71DFP627nRup+7fafqbxu+sXPB4IvhSn9/Kr0q4ZduYUp/M1YO7H/t
4QOlv6XqvkiaE3dX6e/MHOPeLmx1W+lvE9/Gq3L3u6X016dp6fwe668r/d0T
d/PKgsZ3lf7W2rAi6/asEUp/2/YuMz1LlwilvwG/XrNVahyu9Ldv/t3DF9S+
r/R3nsfmN94zbij9XXt4f4oVhU8r/eV01H8qlYP6//vvJttQT9ZftIv1l/rB
6NQR134zOkX9bH6fxsXoFI2j0anSruNudIrmidEpzCvW3zEyD1l/O8m8Zf09
JPOc9beprAvW38qyjlh/G8q6Y/2tIuuU9fezrGvW30GyD7D+Yt9g/aV9xujU
Rtd9yegU7WNGp2jfMzpF+6TRqbSu+6rRKdqHjU5h32b9xT7P+ku6YNr1wFVH
TLtId0y7SKdMu0jXrP8Hd9VB0y7STdMu6Oz299cnZXuX8kzjUmc6Tfj0NuhV
5k5rX7eLN+lVbLMLTCzxe9CCr+aeSt/aSkd7y80dUrt443hb8v/67YWZDzkX
LFx/7yK+e9Tf+6Ec9E9I3rUFqrex0uv9r3xH0Nr0+37Z6W+lo9/WTC93M3kf
pwcHzRn8sl7CZivd7CtpKsyp+FOCrfn/6nPf1Gfc0MnTb5VOsLWmdYrvLbf3
aVHSI99f50jpn2wpQgsFHzHfTwbVo++ZXduVHOR9JXhWxgNWOei3phOfHn+7
wyqHv4umdtlWBdRNOXAep0fYTpd5mG1EoURTPsYrsJx7g0cHrPLrcPmSH/0/
+bvZO7cONt9nqu+xXcfdYXtx+7eTTX620jEP3/8aNGOLdyK11xE0+WmqyDcX
rPJbcfmSH+P7zZrPXTYPNt+Rqu/AaX7a7uRLLn34CNfzlW1qzPVWt2Ot9nrL
PClRo07gk7bm+1VJ/0f5kh/zp8cPBVvXq2zlRzq+j6V1ZBu9+NLhwz3VfLB1
G347plThBJvbg/+tl6CGMq9CnmSKeOCWYOvoovvWd+au45Uc5LOtc8yVH+Np
vKzv7VG+mW8br2brONQqn79XR/ntZb7NeH+sS5Mz3N5DHqa9ruNly1k4uEy+
JDVe5jt81KeazM+rT3pda9LLqo+PzAd8J4/8mIcbKsZ8laVgosnfhvKjPnVk
fuZY5D75F5tVn5bQNfn+GfkxbwuMj2jx8Y2anyY/6vOVzOeJkVFHT5y36iPl
B/Wi+mPeftg/8mNoNSs/0rvJ9+GoT1WZz8GNdw/NV1KtR3N/gfYT2+OMi0s8
S5PA+4m514D6dJf5f9vf83bWj1b//z2+506lk+/YkR/zPMvqEiN7R3J+Nzfk
p33Sdu/EnHm3p6l90tSH5rNtw7T6eedMVfPZ3L/o+ve+HdRU1su9jWkX1L+C
7/8vnPLgewou8yc5KLvokev8sdYXyse68O5y/vyvNRNM+eoehGt/2tacrun1
VTrVnx7cn+b7jW8D373IncDzwdZC7hegPpVlvdzc2HXCrrJWfWpTfZAf68K9
yBb35DdW/yDd3NeQ+tSS9bL7Q/LZsLxWfZrLfCsn9yCQH+ti19B6+b4ZEk/7
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
6FQ8mfsT62Xq5BkhF+Zy/5zwQP8wT+79dM3bCrPVfDDvXTBP7p55Y628K5yK
J+M9CubJ478/M+zKD07Fk3PSfIbfnzs+pObxCVZ9OlB9mCePlfKRn9/lYJ68
QMpnnsz1N/clpX+YJ/N+Ar/fVfqH9hMb7ydYFxhf2g9NfubJGF/myagP8+T1
sl6YJ2P/ZJ78TuYz7f+q/lgXaZbn27LsBe+H1jsnzJOxHpkn4z0Q5skon3ky
1hfzZOw/zJO5fPBk7D/Mk9E/zJPLy/7JPBnnDebJHWT/ZJ6M+jBPviT7P/Nk
vIvCPLnUgFSD9oY4FU/G+y3Mk6FfzJORn3nyQdEv5sl4j4V5MvSXeTLyM09+
K/rLPJnrj3WB8wPzZJy3mSeXn3qt+e33TsWT8W4M8+Tmch5jnoz8zJNPyHmJ
eTLOP8yT64i/YJ6M91iYJ7+Q8x7zZLw/wzwZ+sU8Gec95sk43zJPxjs2zJNf
TcyRq2A27p+LHtyfWBel5XzOPBnv8zBPPpBuvs/gjHGKJ+P9HObJxcVfME9G
fubJ8BfMk1Ef5skvxR8xT8Y7QsyTs6XvWeT5wDjFk7n+WBcrxd8xT8a7QMyT
4e+YJ4M/ME9eK/6UeTLyM0+GP2WejPowT/YR/848Ge8XMU+GH2eejPowTwbn
YZ4MDsA8OUH8DvNkrBfmyeAYzJMvlvUs4tVT9YN5f4l58jvhKsyTkZ958jHh
KsyTwXmYJ18VzsM8meuD+dlTuBPzZLwTxTy5nHAn5sngYMyTwcGYJ6N85sng
csyT8T4V82RwOebJ4I3Mk72EHzJPxr7KPPmJ8CLmyaWEczJPBhdlnrxDOCrz
5NzCXZkng/cyTwbvZZ7M3Bg82f3NjKqHT8QqnlypuU/80+BYxZOb5p0xeMep
WMWTZwY/H58tq0PxZLyvwjx5VsMNfoebxCqePPpu39yrasQqnnyyscc1bx9O
Dw66Gdh21IqusYonjxnzuYfTP1bx5CEju3Zv/oND8WS8b8M8+fqJykX9hzkU
T8b7UcyTN0S17dx0uEPx5PRRlbq0Gu5QPJnLAU/27JS88f0e1Q+2utXdX7Ze
F6t48otMHx4snOxQPNmUTzzZL/CW19aVDsWT8f4V8+RdvV+n3TDMoXjyxsy7
iwR/x+11BK0ssPWN/xGH4smmfOLJvafP+i3TAYfiyXh3i3nykUGPS2b7iev5
yrbSbfukNzMdiidn8qkd1nmPQ/FkUz7x5JZz5szb8o/6Ix3vfTFPHjL1dq5M
vmo+2Aq3HLXmdjuH4smjH7zMWG+gQ/FknoeYV5F7KyyumJvHy3rfjHnyNb/K
s7yGORRPxvtOzJMb91kV+X4Lt/eQh2kvf588bdPm9YfVeJl3z5gnF/m5T8Z1
gx2KJ+NdMubJ06vWHnVoukPxZORnntyrz+UuXta7T4Yn47015skds0waOThA
zU+Tn3lym9X5hw6Y7FA8metv/h9kw8Xnp4o7FE/Ge1zMk2sHNLvlE6DWo6o/
5rn7ogWHG85U+4l5R4558lS/L7f294tVPDmjvBvGPPnsvDGdDnTl/G5uyM88
+XH2Yy39fdQ+aerDPNnrj5JjNrdT89m8d8c8+emEzBeat3QwT7DehSOeDD1i
noz1xTzZ9qGFZ9t2DuYnqnz4l0U7pxT1H6z604P7E+vCN6jwmzwdYhVPXizv
uTFP/rnepPM7WzuY/5j6ME/eXzjL8kpescRPkoKC8H4d8WR71noXf/CNVTx5
j7w7xzy56u/dJ+TxilU8GfmZJ/codTzPtNgYUx/wZLzXxzy5SL1V3xe+GcP8
0HrHj3hyyqitvdOV4P7U9ce6aNHk8MTPLWIVT/aQ9/eYJ2/+7X2Zq5/tpj4t
qT7Mk0tlSbstIVUM8dJ/vDdIPDks9Y9XetRQ+7/1LiLx5HpxT17vrKbms8nP
PPn3KXnTFM/vUDwZ+ZknD5Zzkev8sd5jZJ7c45zPyTOVYxVPrkf9ifXypNjm
8Tue2al/Tnigf5gn90u54tOsBDvPB/NOI/PkfJ0bb7iSPlbxZLyjyDy5Vv27
33t/sCuevJvmM/z+K5+DN+LirPp0oPowT0b5yM/vSTJPfi3lM0/m+mNdoH+Y
Jy+i/QR+P6/0D+0ntum0n2BddJfxpf3Q5GeeHC/jyzwZ9WGeXFLWC/NkvGPJ
PPmFzGfa/23/vh8m24aP6b+hWBM1n837nMyTsR6ZJ+MdS+bJ30v5zJOxvpgn
N5f9h3lyByofPBn7D/Nk9A/z5MKyfzJPxnmDeXIK2T+ZJ6M+zJOryP7PPPmQ
nE+YJ39X47cXV8vHKp6Md0eZJx8Q/WKejPzMkx+LfjFPzi7nT+bJ7UR/mScj
P/Nk6C/zZK4/1gXOD8yTcd5mnjx9Q+7K3zeNVTx5jJy3mSfjPMY8GfmZJyfJ
eYl5Ms4/zJMjxF8wT8Y7osyTo+W8xzwZ76YyT64r+sU8Gec95sk43zJPxvur
zJPrh+XZnK68Q/HksdSfWBc4nzNPxruyzJPL/nmxc9d/1Ac8Ge++Mk/uJP6C
eTLyM09uK/6CeTLqwzx5mvgj5sl4/5Z5crqKnU9dO+JQPJnrb75PFn/HPBnv
2TJPLir+jnky3t1lngx/yjwZ+ZknNxV/yjwZ9WGe7C3+nXky3t1lngw/zjwZ
9WGeDM7DPBkcgHky/A7zZKwX5sngGMyTN50K39jxhOoH824w82RwFebJyM88
+ahwFebJm4XzME9eIZyHeTLXB/PTR7gT82S8b8w8eY9wJ+bJ9YSDMU/+TTgY
82SUzzw5g3A55sl4V5l5spdwOebJY4U3Mk++IfyQeTL2VebJ4EXMk0OEczJP
PiVclHnyKOGozJN/Eu7KPLmi8F7myc2E9zJPzkjcGDz5UL2+nbdsilE8ueiS
o+tK/2JXPPnU4rSDch6zK57s02HQXnfznrl+F5R58rA+37bNPCRa8eSbW8u1
TVs8WvFknw1zsvavyOnBQb5NgqO6NIhWPLlzk7EvYltFK558MzDXzjwL2UdY
77IyT+68tfoXfrtjFE/Gu8fMk6vuCJi4rlas4sk9P9wrde6cXfFkLgc8eVDh
ahHt+9oVT665sPJi93F2xZMvfpjR+cE2u+LJpnziyQHRJc4OWmhXPBnvNjNP
dns7buWcnXbFk/u229S76EW74sllwqdNCV5tVzzZlE88uYj7+f45p9gVT8Z7
0cyT5130cn59Sc1PW/cSY+dMfmRXPPlL9+Hj1vyjvd5cPvHk0k0XuI0dZVc8
Ge9UM0+udjVT8qs/7Yonf1X59qfrrxRPCMr9sunlhMd2xZN5HmJerXDv+Glk
eIziyXiXm3ly2e/Xpi2VaFc8Ge8SM09+eWTukYpzub2HPEx7iSfHprRVezNa
jZd5r5t58o3l277L/tyueDLeT2aevGtck4dbHtgVT0Z+5snX/eeeHzjArngy
3glnnlzlwIEFn6eo+WnyM0/eFDj912en7Ionc/3N+3szTxfIfdiueDLekVbf
J2dLrF5ptVqPqv7mXaOhNcdO+VntJ+b9c+bJ+2ecLr7GEa14spe8d808+eDZ
iO1jgjm/9T428+T7Oa8mvN5nVzwZ9WGeXCnTkCWnM6v5bN5pZ548PcPNIUen
2JknWO+ZE0/+WvSIeTLWF/PklbNL7H451878RJUP/7I588KSXsdUf3p4Un9i
XezdPaV7r7LRiifvkXfImSd77KmU5/EiO/MfUx/myZsXeR50C40mfpIU1Bzv
rhNPXjO0UMSZutGKJ+O9dObJ0y8MHFyjfLTiycjPPHnL4HHZy4RY9fGm+qj3
Lo7Mr9DfP5r5YVA7vCdPPHlq8cP7fyrF/anrj3Ux3G92nqGnohVPxrvxzJMH
DCrQPzzrY1OfllQf5slf9Os74mLmx8RL//FOPvHkvZ9WJY8MUfu/9Z4/8eT0
b+sH1K+o5rPJzzx52KWI8e+ddsWTkZ95Ms5FrvPHiiPAPLlqweCVL29HK57M
/Yn1Un5ry4R0L6Kof054oH+YJ08IdIsq+DKK54OJL8A8uWHim2qZ6kUrntxd
5gPzZN9V2dd1Sf1Y8WSez/D7HSrUvheW65HiyW1pPmBd+En5yM9xEJgno3zm
yd9Q/bEuJkr/ME/eRfsJ/L6X9A/tJzY/2k+wLjC+tB+aeA3MkzG+zJNRH+bJ
uWW9ME/G/sk8GfOZ9n/bv++HybYT/Yuf6PSHms8mrgTz5H2yHpknI/4C8+Tj
Uj7zZKwv5snYf5gnc/ngyf1l/2GejP5hnvyl7J/Mk3HeYJ6M/ZN5MvSaeTL2
f+bJYXI+YZ5cMtz3pq1HtOLJOC8xT4Z+MU9GfubJ0C/myenk/Mk8eY/oL/Nk
5GeeXE/0l3ky1998xyLnB+bJOG8zTz7Z82bsKo9oxZOLynmbefI+OY8xT0Z+
5snT5LzEPBnnH+bJ8BfMkxH/gnkyznvMkxHvg3myu+gX82TEPWGejPMt82TE
DWGeHHAuYuPLNXbFk4tRf2JdbJTzOfNkxENhnlwp26e7PuPtiicjXgnzZPgL
5snIzzx5vfgL5smoD/PkQPFHzJMRt4V5crOu/T7OXWxXPJnrj3UBf8c8GXFY
mCfD3zFPRrwY5snwp8yTkZ958gvxp8yTUR/myV+Kf2eejHgxzJPhx5knoz7M
k8F5mCdXFw7APLmy+B3myVgvzJPBMZgnF2ka/exFf9UPJt4N8+SCwlWYJyM/
82RwFebJ4DzMk0sL52GezPUx99mFOzFPRlwe5skphDsxTwYHY54MDsY8GeUz
T+4lXI55MuIBMU/+Vrgc8+QuwhuZJ4MfMk/Gvso8GbyIebKfcE7myb7CRZkn
g6MyTx4q3JV5cmHhvcyTwXuZJx8mbgyePDQ0dOSZYtGKJ0ePKfvsc0yU4slP
yzUbuCnnY8WTU897NvHXTY8UT94ncS6YJxc+sTTTmbcRiic/SL2j2XGfCMWT
N3zR4eW4DpweHPTn7e47y2SOVDz5u3KjvObVjlQ8+WzLGe6dfoxSPBlxRpgn
T2u14vTRXx8rnox4PcyT+x36PceUodGKJy+5VKFB2PxHiidzOeDJK1LXy1Lo
ZaTiyU19Nwz4unKU4skzcmU9V6tblOLJpnziyfYazVK7pY1SPBnxhpgnDx04
I/325lGKJ6cscndOndlRiicHNn2152yGKMWTTfnEk8fke7ax4oVIxZMR54h5
8pNv2sRPXqfmp616S/freZKiFE/+bXiq2oufRyqebMonnpyq54TXk/dHKp6M
uDDMk8+O9x/5op2aD7Znv14t7tXvkeLJgz4FvImo/UjxZJ6HmFdZnw3bfD1n
tOLJiCPDPHnKpo5nAis+UjwZcXaYJx/YG9P28G/c3kMepr3Ek59ErZm59Yga
LxNnSr2fPPLYNw3zP1I8GXGgmCeXXPZiQ8bzUYonIz/z5MyfvwlIvTRS8WTE
t2KevPHQri+X341UPBn5mSe/7J+wdPSEKMWTuf6Yt/MLRM7tMihK8WTERWKe
/Gz9APeKRdV6VPXHPM9zrmWebK2jFE9G3C7myeWqFi99q3qU4smI38Q82VZ0
reP060jFk5GfefKWVyuD4g9EKZ6M+jBPXj0llb/vmMeKJyO+GPPkB0Ujrg4O
jGKeYMXhIp6cRvSIeTLWF/PkZxfmL623Por5iSof/mVEm/YF9v3K/XPOg/sT
6yK8YBpn9vIRiie3k7hazJNrrPit6t25Ucx/TH2YJ89OveVTpiVRxE/+EY+M
eHJS2ZmNBvaNUDx5hMT/Yp6cw7tFz8teEYonIz/z5BLHVrx5MdGqjzfVh3ly
rtOz/b6Y/1Dx5AjERyOe7DGk/NDAodyfuv5YF0W6Fjy9LWOU4smIg8Y8ef/d
W89nd7Dq05LqQ/lt/5HfxvUHTx6wcczcyFZq/7c5EYeOeHLlFb8vLpEhWvFk
xHdjnpz1uy3uX1x5pHgy8jNPPifnIuJvJv4d8+RL5VrUt8+MUjyZ+xPz/ItN
k44nnb+v+HA49Sf8dZm9bnkbfbqv+C3yM0921PN/FpsQoXgy4tkxT66zI8uJ
Qi8iFE8eSfMZ87y25Ed9kP6J5jP8dYzUh9avzUfWL/PkktJe5skjqP7mOzHp
T+bJbWg/wTy/LONF+5uN9xP462wyf2i/tflR/YV/Bu2S+U/889RU2Q+Z935Y
1dY75apHivdWkPnGvPdbWS/MezOIvjDvTZbymfdi/jPvLSb7A/Pe9FQ+eO9/
tNcD7WXem1X2N+a9zeU8wLy3vuxvzHvTSX2Y92J/Zt6L8wPz3pHuK7pW2/BQ
8d4ccp5h3gt9Yd6LeI7MexNFX5j39pDzIfPeh6KPzHuRn3lvddFH5r25qP6Y
509F35n34jzMvDfgN+89RXtHKN77Xs7DzHtxXmLei/Mz8977cp5h3ovzCfPe
LHL+Z96LeIvMe7fKeYx5b2OJL8m8t4roC/NexNlk3ptXzp/Me8tInErmvZvc
O7TwrhCleO+f1J9YFwvl/My8F/E3mffeeLCg+li3KMV7ER+TeS/O/8x7l0h+
5r2v5PzPvBf1Yd5bTPwL817ECWXeO25pQvrabyMV7+X6Y104xX8x70XcT+a9
l8R/Me9FfFLmvZPEPzLvRX7mvfCPzHtRH+a9qcVfM+9FfFLmvQPELzPvRX2Y
94LDMO+FT2fe+4v4Eea9iMfKvBecgXnvgvT9uxeaqfrBxFdl3jtOuAfzXuRn
3hsv3IN5LzgM894dwmGY9xan+mB+PhYuxLwX8bWZ94ILMe9tIpyKee904VTM
e1E+897Fws2Y9yL+LPNecDPmvcOFBzLvnSJ8j3kv9lXmveA5zHuThUMy7wW3
ZN77UDgn815wUea9j4THMu8Fj2XeO4y4LnhvWNZdHlvTRSjeO3XqwyvND4Yr
3ut2cMnvq76IULx3zOKA9COzhSvei/iqzHuXvLsw4vqyMMV7/c7mPbev3H3F
e8cW7JwrYzpODw5qGnV+yspF9xTv9Rn2e7o3W+4p3rv85f5ccSFhivciriXz
3o75Fi3ePyhc8V7Eh2XeW/v7elN2Rocr3jvx1KimW8aGK97L5YD3Oo9dnLK2
s+oH2+zXK9Ic872veK/bvJOF/L4IV7zXlE+8t2D76Z5PnGGK9yK+LfPec91L
TCnY5IHivaeO17tSvNEDxXu99l1c4nUuTPFeUz7x3tYBXsMe7AlTvBdxdZn3
Fnt1c26F1Q8V743/vLh3r70PFe/tVGvY6+oXwhTvNeUT7/WOtRX8+nyY4r2I
58u81+fd5U1lnA8V7+1cqkjalx5hivc2nDBsQ8Bf9WHey/MQ82p+xYvvJx8J
V7wX64t5b5oUYx6fmBKqeG8mievKvPd5kRwbBp/i9h7yMO0l3vvjwJBPHw+q
8TJxjZn3Lk27pliBDA8V70X8Wea9e271brwn9IHivcjPvLfas6C0HmvDFO9F
PGXmveWbhbZuuFrNT5Ofee+J84+LNrr4QPFerj/mbdLegK1NxtxXvHe2xOFl
3vvSZ02pMXvVelT1xzy/4Dv96Klaaj8xcaKZ9447WTv7tJ33FO9tJfGCmfcO
HpCh9oZAzu/mhvzMeyu1OvFm6mC1T5r6MO+t8+PKE3VWqPls4lkz731bdHPF
L7wfKt7bD/GXifdCj5j3Yn0x7z0WsHNwhfQPFO/tS+XDv7zbf3l51U2qPz24
P7EuTg51++rHF3cV7+0scZyZ9zYJvLln3sJ7iveiPsx7v3q6YcRKv9uK9y5A
3GriveOzPfr5j0EPFO/dJ/GmmffW+PnG2qq+DxTvRX7mvf1D+75fnS5E8d75
Uh/mvS8nxR2tee+K4r1bEI+beG/aZUcqjQp/oHgv1x/r4srv+e+kPBOueC/i
bjPvzbIiy/x9dS8r3hsg9WHe+x/5bQFUf/BeP9/emY44wxXvNXHPiff2mOoV
MjhbhOK9yM+8N+x04ribLUIV720j+Zn3LpNzEfE3E2+deW+rbps8C5QMVby3
JvUn5vnP2SbfaPTwouK9m6g/4a8L+tWbXeP6NcV7t0l+5r0L3Br8sqDBPcV7
ET+dee+Ehtl6rU51W/HewzSfzXvFkh/1Md/V03yGv54t9aH1a+LFM+/NK+1l
3nuI6o91sUD6k3lvO9pPMM/bynjR/mbrR/sJ/HWkzB/ab01+5r1pZf4z720o
+yHz3nGL3vdcdytc8V7MN+a9WC/MexFfnnnvWCmfeS/WC/Ne7A/Me7l88N7/
aK8H2su8N1H2N+a9M+Q8wLwX+5t6L0Lqw7y3uuzPzHsPyPmBee+cbV13VRka
rHhvKTnPMO+tLvrCvPdLyc+8F/rCvLexnA+Z9x4SfWTe21DyM+9tKvrIvLc0
1R/zHPrOvDejnIeZ95Yt1TA04d1dxXvLy3mYeW8/OS8x70V+5r2v5TzDvHem
nE+Y9y6Q8z/z3v3dw4OP7ghXvBfnMea9Kds/8N8+gOdPclAf0RfmvWPkPMa8
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
xv8jHeNyS+LEsT/dm3PsmOU+ccqfYlzYnyJ+H/vTpFDPRrWfOZU/Rdw39qfn
y/h+FbbeadIxXsc3jfnjVCErP8edZ396p/Li+o7uccqfon/YnyJePPvT6y/t
k+oOiFP+FPHB2Z8irjr70zeDq7Z69Vc6+1PEB2d/injr7E/7XPOoPKORlY5x
RDxx9qfprg3oldLpVP4Ucb3ZnyKuN/vTJdu8Lm1b61T+dK1tx+5KJn6l5U9D
l8ycGloyTvlT9Bv70xbFf0rZ5YlT+VP0A/tTxD9lf7o5uIvXgL/axf4U8anZ
nyLuKvvT8Js5RxVa5FT+FHFv2Z8662RKlX+iU/lTxK1mf5o7Q7F2oX/t/+xP
0f/sTxF/mf3pgRYtd3WZ4lT+9NjKdg2mf3Iqf3r5cNG+dVc7lT818cTlD+Py
pmS7PhGTncqfmvjd+F3p/zLnW6TqM9ep/KmJly1/6OfSkp/9qYn3LX/of/5d
9D/XE+U4qV3o/yvUD+hnExde/tDP6E/2p+h/9qd5ZXzZn+Z0nQ/GB8XL/GF/
ivayP6V5aPxRhOu8Ned/mufGBwXIemF/iji57E9p3RkfhPXL/rSR63o35WN/
YH+K/md/ini77E/XyP7D/hT7FfvTDLIfsj9FvGP2p/1lv2V/ivjC7E+xz7M/
RTxW9qeIY8v+FLrD/hT9yf4U8WTZn4a46qA5t0MH2Z8iziz708Oiv+xPEUeV
/Sl0nP0p4qiyP0U/sD/F+YH96W45n7A/PeZ6LlL9z/7U1/VcpPqH/ekrOY+x
Px0j51v2p+Vcz4fGB9F5z/igia7nQ+N36Dxp/M4sOZeyP8X5nP0pnZONP6Jz
r/FHOCezP8W4sz9FfFX2p63lHM7+FOd59qcLXH2B6mf2p0VcfYfqB/anC119
jRkX8kFmXBqLb2J/Sv7OjBf5LzNev4iPY3+awdX3mf6PdvWJpp+PpijV58RQ
Kx39DB/K/nTP1kNzzpyJVf60scQ7YH/6/fHaN99Oi1H+9MbBmXXPfLQrf3qy
cavkzU/typ8GS3wH9qeB97Of+inCKgfjcrpeqQF3nVY6xuX2xtq5iryw0jEu
q6fWaF+9qVVP9H+v3lWWN1trpaP/7y0tsHPVkFjlT5teSHsmqYFVT/R/12J1
LlZpb6Wj/4dP/PbaD99a6ej/4k2zff1/8UHYnyJOK/vTOm2LelQe4lD+tNvG
py/7TXQof4rxYn86q+GiEt12OpQ/RTxW9qeIu8H+9IcpX5zvdtGh/CniobA/
zVv2/sfP+xzKnyLuKvtTxGFhf5pu95p+kzY6lD9F3Bn2p1FPC4Qv2uRQ/hTj
wv4U8YDYny5NneXavKEO5U8R55T9aWD9evta5rPSzT2muOyBc+da6RzHlv1p
paeXM3VY71D+FP3D/hTxZ9mf1p7/4aifiWdq+SzEG2V/ijit7E+bODpWa3LS
ofwp4o2yP0X8VvanvR0z9s87ZqVjHBGflP3p9P2/ty08y6H8KeKEsj9F3DH2
p0cnbundaYBD+dOtMbF+6fo6lD9ts6G936B/5Od+Y3/qE1ezU4H0DuVP0Q/s
TxFPjf3pjA1ei/NHxih/iniX7E8Rx4396Y3+tkIz3tqVP0UcPfanha+/O7vp
kV35U8QNZH/6anqJXe9Sxih/iv5nf4r4mOxPr+96m80nV6zyp2kXnGu5qIdD
+dON41JOzVk2VvlT9A/SMS4TRgzfWzVdjPKnJh4ofhf6sr3brGev7cqfmvib
8od+/lXysz818UPlD/3Pv4v+n0j1RDlnqV3o/83UD+hnE2dW/tDP6E/2p+h/
9qcYX/anNB+MDyoi84f9KdrL/pTmofFHNG/N+Z/mufFBM2W9sD9F3D32p7Tu
jA/ylfXL/jTAdb2b8tvK/sD+FP3P/hTx+9ifbpH9h/3pMdmv2J/OlP2Q/elh
2T/Zn/aR/Zb9aQ7Zl9ifYp9nfwqdZX+KuHjsT+uI7rA/RX+yP0V8OvanlV11
0NOq/986yP4UcevYn352/q2/7E8Rl4396U7RcfaniMvG/hT9wP70Zzk/sD/F
+YT96VHXc5Hqf/andC5S/cP+FOcx9qct5HzL/nSP6/nQ+CA67xkfROdD43fo
PGn8zkw5l7I/7S3nc/anXq7nZOOPvFzPvcYfdZFzMvtTjDv7U8RrY3+Kczj7
U5zn2Z92c/UFqp/Zn9539R2mH8inmH5Y5eprzLiQDzLj8qv4JvanXq7+zowX
+S8zXvBx7E+DXX2f6f/hrj7R9HOeoMSeld2t9qKf4UPZn25f2cu36coY5U9z
yfvJ7E9//PjgcbV70cqf/rw+d7GqzR8rf+pT8ueiJQ48Uv60gLwXzf40+44c
RXMXfKT8ac4/lp76VN9Kx7h8UT93p/juVjrGZc3oRnn6Nbfqif7f2e5DitAe
1u+i/0cfa5bBf4mVjv5vWHRpttDzVjr6f9CyaksyXLTS0f+L3e/krHfJSkf/
L/tueZ6cZ+zKnyLuG/vTxpuaL/u2Q4zyp/verQ571s6u/CnGi/3pypc7b/by
sit/ivhu7E/xjjf70xJPj2/07mJX/hTvq7M/fd2176BZE+3Kn+K9cfaneNed
/WnJ0nOS7uyyK386S96xZ3/a5VF8lxXmvK3Hhf0p4guwP00Rc3B43Zwxyp8i
bhr700N9YhcEm33D8qcdHN0y/1WY8qeIi8f+tPy7up0L3LIrf4r+YX+KeHbs
T0v0WXHJc61d+VPEs2B/irhv7E9zP+1/JW6YXf//qcQvY3+KeHDsT5/P73+/
eGsrHeOIeGfsTx94fd6Z8JVd+VPEoWB/ijgm7E8rr/xtVZqFduVPL/UuUbrP
Prvyp5PSTw+ZG2RX/hT9xv60ZIarK9efsit/in5gf4r4LOxPqztSfmrliFb+
FPGz2J8iLgz70+VpkybFZ3is/Cni8rA/nXEl3bMnWR4pf4o4ROxPPfY82Tu8
+2PlT9H/7E+zSHwo9qetDoYW29rZrvzphpBcVbcOsit/eip79ML+AdHKnzZD
vDP5w7h4/+i+YNGTR8qfIn6T+V3p/w8Zfgx5/zpK+VMTz0v+0M8fJT/7UxOP
TP7M/9/R76L/W1M9UU4rapf5bo36Af1s4tbJH/oZ/cn+1Fv6n/0pxpf9Kc0H
44Mwf9ifIm4a+9PdrvPQ+KMVrvPWnP9pnhsfhPXC/hRxfNif0rozPgjrl/0p
rXdT/kTZH9ifov/ZnyIeEPtT7D/sT6vIfsX+NFT2Q/an4bJ/sj/9XfZb9qfp
ZV9if4p9nv0p4sWwP0WcHfanRUR32J+iP9mfIt4N+9PSrjpozu3QQfaniIPD
/rS96C/7U8R5YX96WHSc/SnivLA/RT+wP3WT8wP7005yPmF/Suci1f/sT4u7
notU/6j/P5XzGPvTRnK+ZX+awvV8aHwQnfeMD6LzofE7dJ40fme5nEvZn+J8
zv70W9dzsvFH2V3PvcYf7ZVzMvtTjDv709YS/4X9aRM5h6v/P5XzPPtT8gWq
n9mfku8w/RDo6lOs75xdfY0Zl9yuPsiMC3wT+9Psrv7OjBf5LzNe8HHsT8n3
mf4nn2j6uUL5EpVbp7b6E/28Q3wo+9Osds/z8fmilT/Fe4/sT4d6nxiYbW+U
8qe755WcHXLeut+K/u/7sM6Fq4UjlD/F+5nsTwsXb/v53Nhw5U/HRvkf+66K
VT7G5d7KXsMLP7HSMS7J35dusHeDVT76v1jrp+6ena36m++re98OXD7CSjfv
1Y890vLZPCsd/e9/vOr2GpusdPR//fe70ow/aqWj/wfWLXzo+vUo5U/xHib7
09W3t6e/e+qx8qdrVxXN5NM1SvlTjBf7U//3e+sOrxyp/CneBWV/inFhf7qi
94gfl38Tqfwp3oNlf3rK/fm3lS5HKn+KuDDsT/EOrbp/mmVT81eNo5Q/XSzv
7qr/P927c0/BO1HKn2Jc2J+WlfeQ2Z8evXG47rzpj5Q/xTu67E+/uNV7/Pp3
j0w6xuthT99aP31lpXOcHfanKdpP//bU6ijlT9E/7E8RH4f9qfOLtwXy5olS
/hTxUNif4p1n9qeVapTL9v6vdcT+FPFQ2J8ivgz709nTtvZp3sRKN++Dyfvn
7E8jLnkvnN0mUvlTxDFhf5pW3l1nf/rhh5U1Hno+Uv50WHf7uSsPo5Q/vXH/
VbnKx6OUP0W/sT/d26X52cAlUcqfoh/YnyK+DPvTJyWn+KVsEaX8KeJxsD+d
Ju/Ysz9NSD/6+MNJEcqftpW4A+xPezq22ReVDlf+FHEN2J92jM63yPkpQvlT
9D/703oSb4L96fRc/XfniXqk/KltX9WI4IZRyp9u/6N+/3xjopQ//RPxU+QP
4/KkX9ziMfMeKv9o4o/IH8YlFHFAUB8ZF05H/3M6+p/T0f9hlI7+/03qiXTU
8zO1C/2/Q/rBkXVS9RvFL3mY7/qofPS/iY8jf+h/9DP71mkyLuxbMe7sW0e6
zhPjjzCv2LeiH9i3tnOdn8Y3JbrOZ+MLprvOf+OPsI7YtyIeAftWWo/GH2Fd
s2/N5boPmPKxb7BvRf+zb0VcA/at2JfYt36SfYx9a6Tsk+xb98u+yr4V+zD7
1p6yX7Fvxf7PvhXv3rNvhY6wb30iesS+Ff3JvhXv9rNvJX0053noI/tWvOfP
vvWe6DL7VrxXz741t+g7+9Yz8l49+1b0A/tWnCvYtz6Scwv71njX85Lqf/at
dF5S/cO+9aSc09i3fi/nXvatdG40/ojOgcYf0bnR+CA6Zxof1FHOq+xbcW5n
30rnZ+Ob6DxsfBPOz+xbx8m4s28NlHfs2bfifM6+Fed89q0dXf2C6mf2rS1c
/YjqB/atf7r6HTMu5I/MuMBPsW8l32fGi3yZGa9+4u/Yt+5x9YOm/79z9Y+m
n6u4t2vZbrXVn+hn+FP2rT2KZ365qkGE8q2p5N0q9q3Za33rn7e5lW7uRe7y
T7W2XJjyrdEjd309Oeie8q3e8k4X+9aA+m4b+viFKN9q/3A3v+PkLeVbx0/c
9vrTzZvKt95Ov/1VqYJWOej/Pj7jh14PsdLR/+tOpUuscu628q2hXy7tu+zg
HeVb6/f8sux693vKt25ec/zp9p73lW8NvJKt3ffHHyjf6pB3vdi3hqY8O3nn
sXDlW6f88DRTmz7hyremlvFi31p2w/e1OkaFKd96Rt43Y9+K99PYt3aeb8+S
9VaY8q141459q3tXe95Zf/0u+9ai8s4b+1a8p8e+ddvL4Ngd98KUb90g7wey
b+3vvy1l3JMw5VsxLuxb8a4j+9aVXTfki6kWrnwr3pNn31r9ybigcaPDTbq5
57U2y7gGyVZ+jhfAvtXWyXdsv6Nhyreif9i34p1/9q31/1w/Pu/mMOVb8a4p
+1a8h8++9eSLSikvrwpTvhXvurNvxTv57Fs//Ro5YPlYKx3jiHfg2bfOang4
Zb6EMOVb8f4n+1a8x86+td/34/1zrQlXvrXFzo1lDuUPVb51ZY0bO8p1v698
K96PZd/a/svDw+evuqN8a1PpB/atM+VdXPatuQpn6XVjUojyrXhXnH1rY3mP
l31r8PXDYdtT3lS+1VfeT2bf+rTx74O+uBaifCveG2ffOrJR9cEFyj1UvhX9
z74V75Czbz2fIrpFl5oRyremfnrS/5vTD5Vvbd91Uq3VH28r3zoH78DLH8Yl
MOPpk94tLynfuhfvqMsfxmUt3jNHfWRcOB39z+nof05H/6+ndPT/Tqkn0lHP
mdQu8/9E0g/sWwOofPS/iSMgf+Z7YOln9q3nZFzYt46ScWffeth1nhh/9JvM
K/atG6We7FtpfhrfdN11Phtf0NR1/ht/lFvWEftWvKvMvpXWo/FHHWVds28t
47oPmPJXy77BvhX9z74V8UrYt7aUfYl96wDZx9T3wLJPsm89JPsq+9aPsg+z
b8V+xb4V+z/7Vrzfy761suiI+h5Y9Ih9a1npT/atDUXX2LfWcdVHc56HPrJv
rSI6y74Vusy+Fe/usm+tKfrOvhXxcdi3oh/Yt+Jcwb4V5xb2rcVdz0uq/9m3
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
ZcKnTQlebVd6hHvZrEdfug8ft2ahXekR7i+zHlWT+1asR7lfNr2c8Niu9OjG
8m3fZX9uV3p03X/u+YED7EqPNgVO//XZKbvSI9xHZj1CPVmP9s04XXyNI1rp
Ee7Dsh5Nz3BzyNEpdqVHmzMvLOl1LFrpEe4/sh55yD1H1qPVQwtFnKkbrfRo
y+Bx2cuERCs9wj1N1qMBgwr0D8/6WOnRvk+rkkeG2JUeDbsUMf690670qPzW
lgnpXkQpPcK9WtYjr8Q31TLVi1Z61KFC7XthuR4pPcK9WtajhlIO6xHqw3qE
+9GsR2gv6xHGhfWov/Qb69HU4of3/1QqWvujcN+bth7RSo+6y31b1qO1Mr6s
R7hfyXqE+7asR6d63oxd5RGt9GiazE/WI9y7Zz0KOBex8eUau9Ij3ItkPaqU
7dNdn/F2pUfrZT2yHuF+KOtRs679Ps5dbFd6hH2A9eiFvNvAeoT7gKxHRZpG
P3vR3670qLTse6xHuOfIenTxw4zOD7bZlR7h/h3rURfZn1mP8M4J65Gf7POs
R7jHx3oEvWA9KrLk6LrSv9iVHuG+HuvR4Xp9O2/ZFKP06EHqHc2O+0QoPfrz
dvedZTJHKj2a1mrF6aO/PlZ6hO91WY/wnTDrUWDTV3vOZohSeoR7WKxHvw1P
VXvx80ilR7ivxHp0Vr6jZj0a9CngTUTtR/r/j0Ye+6Zh/kdKjzJ//iYg9dJI
pUcv+ycsHT0hSukR7h+xHqGerEflqhYvfat6lNKjNHL/hfXoQdGIq4MDo5Qe
jWjTvsC+XyOVHuFeA+tRDbm/wHqUWHZmo4F9I5QelTi24s2LiVFKj3BPhPVo
391bz2d3eIh92NRnqtSnJenOLsnP+jVo45i5ka0eKf3K+t0W9y+uPFK6U3qv
W95Gn+4r3cE9Edav2Hr+z2ITIpQeOSS9E+nRfqkn6w7qybqD9rLuoL2sO/WH
lB8aODRC6c4Y9xVdq214qHQH92VYd5JkHFl3cD+CdQf3ZVh3tvzmvado7wil
O/dlHrLubJP7dKw7m9w7tPCuEKV0B/caWHduPFhQfaxblNKdV7LuWHdwv4N1
Z9zShPS130Yq3bks6511B/cxWXdwj4N1Z0H6/t0LzYxUurND9jfWHdxTYN2Z
nivruVrdopTu4Pt51h3sw6w7+D6fdSdZ9nPWHXyHz7rzUHSBdcc+puyzzzFR
SnfwvT3rzrDQ0JFnikUr3fGR+MisO40RZ5l0p6PEcWbd6SPf27Du7JbvfFh3
vCReNuvOevmOiHWnU61hr6tfCFO6g++NWXd85Tso1p2GEt+cdQdx21l3qj0L
SuuxNkzpzgmJU8+6g++HWXeau8avN+364WTt7NN23lO6g+9XWXfeFN1c8Qvv
h0p33u6/vLzqpntKd1rId4msO03k+0PWnbHZHv38x6AHSnf6h/Z9vzpdiNKd
LfL9JOtO5hVZ5u+re1npTkOpD+tOOsnPutPet3emI85wpTvhpxPH3WwRqnQn
v1+92TWuX1O6s0nqyboz363BLwsa3FO6M0fSWXfQLtYdP6kn646XtJd1J62U
w7qTbtmRSqPCHyjdWbqt664qQ4OV7hyV711ZdybJOLLulJbvG1l3/OV7V9ad
yqUahia8u6t0563MQ9YdfA/PuhPW9YcbvUbfV7pTSb5LZN352Ozs45nFwpXu
HJJ1x7rjhX2AdGfE+fgmqQ+EKd1ZJuuddec3uU/BuoPv8Vh3GnydY/kfu8OU
7thkf2PdwXeGrDup5p0s5PdFuNIdfP/GuuMv+zDrziT5vo51p7ns56w7+I6O
dcdfdIF1Z/rUh1eaHwxXuoPv5Vh3wrLu8tiaLgLfkarvypCO+rdJU2FOxZ+s
dMzzkLxrC1RvY+KHqu/ukI75vGZ6uZvJ+6x0/h5vu+zz+N0ePxRsXa9ykknn
7/Tk+1sVlxzlo58Rdx75OV458qP/T5d5mG1EIRO31NwzeiFxQreTbuJ7P5TP
8c2RH/02+bvZO7cOtn4X8+r9r0Eztnhbv8tx5FEOxwf3I53C93VI5/jgKAfj
8s2az102D7Z+F+VMjbne6nZsgtX/Ml74XtGP9HS1a3xbFZ9d9jEzvllWlxjZ
OzLBpPP3fh1Jp/C9H9I5vjnK4e8hUX+Uj++dUE9zDpe4wCiHv5/E73L8dJSP
+ZOzcHCZfEkmPq+Kk450zKsqEr94O51zcsj3mfhdzKvHEscZ9cS82lAx5qss
Ba368/ecKAf5e8l3cfhdzMMC4yNafHxjpWMeBjfePTRfSav+/F0o0jmuPerD
30kiHfPnw/6RH0OrWfVEejeJZ23GXeZVNYmLjXpi3j7OuLjEszT/mA+S/7Z8
j9pVzhWYV+eCcrs9/Gu/Qjp/n/l3vgvq+0zk5+9XkZ/jvKP+KH+7xAFHfo7/
jvL5u1a0y/w/5reB717ktuYn0vF9I9Ixr05IHHOUw9/Hoj4cXx71wfxxL7LF
PfmNlc7f06IcFb9efhfzZ9fQevm+GWLVE/MnUOKzoxyO847fxTwpc75blfkT
/jEuMu747hS/i3nS8HOBFxVs1u8aTljmw/kO1ax0/C7iyKM+/J2wGXf53ePZ
rs6YNDze1lzOaTzfkM7fx7aWcyDHr0d+/q4Yv4ty+Hf5+2GUj/Sd0s/oN8yf
dV+sOzmhg5X+798bX1DfGyMd+f1k/uB3MU+OyTxEPTFPhoTdCHjpZf0u5skw
SUf5SD+EeSXpmD+jaR3x98/4Xf6+F+kYX+4HzJODpabWWd/nH+Mi4459A+3l
76jN+Er+bbIPiA818ySz6GMyndvxXXE7Orfnku+Kk8kH4Ttt5Ed6UTkPoD4o
B99vIx2/W1X2W5SD+dNY9vlk8k34rhv9g3mCdYrykd5V9nmkY/7YRe9QDn8f
jt/FvNot+xjSMa/2yD6D+pt71qJfSEc51USX8buYb5ll30M65lWI7M+oP39/
jnTDi+T8gHqa72pkP0d9kI7zgxlHmT84t6A+mJ8tu5w//2tN63eR3mXpxNCl
96x0zH+co1A+0ofLudrMK/ndPfKdfID4IMyfnnJuh29COu7RIN1851OrUszM
3xNMOuZnlxePl56sb5XP39ujnijngZwzA8i3lnf5rt66T3doTK60J5ckmnaZ
70bkHJJMPhff4eN3kX+lnHuRbuIgyPkfv4t59eH88Dy2PVY9MQ9x7gogv4zv
+VGOeX9D7hOhnphvm+QciPog/VHdnCV3/milYx6mFh+Ecvi+AOpj4obI+TaA
fDrO1agn8uOeFMrHPGy08Wq2jkOt+cb3DgLIX+P7fzNP5HdDfFPb7vc196TM
fGsnvnUr+W5z/4vuaY4S/xtAPGEt7jvQvcsQ8WXIj/kAPxVA/AH3Iz4Qfygh
9yOQjvwlio/r/fKwVU+M+yvxiUjHPHkm/hS/i3GfIn4zgPjG/+/+BdLNe93v
7XtO+ln1Me/0il82/Snjslp8N37XjPvEp8ff7rDKN/tS6wvl7ntb6Rj3UiF7
F2z3t34X/QaesJU4Ce5xIB3tuiO8YivxE9zvQDrqU27ukNrFG1vpfL+D+Qnu
QTA/OXClWMTlFHGKn+T6qaHflc1OxU9wT4T5SfZ12/r2THQqfoL7I8xPfAcU
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
E0ejSb2n0SD8pPmSwUFh21XhJ79Rnwr9xNJ//oor75cKP+E+EvoJ95rQT7hn
hX6SeMdi4P6FqvCTONPHoVVtSoWfnO1oiA1INQg/4c4V+knG0bA5vn0Mwk/S
qXeEfhKR26qm0rxE+Mke6imhn3iuNtu0ubJE+MnezS6ZzYoMwk+4r4V+Mq6q
fNoHmlLhJ+GXv1vs1Ncg/OTz9MqMZXNKhZ8k0fsp/n/n95h+AdMNwk+434V+
snxKlNWSHIPwE/M2uSMT3QzCTzwziz7aP1MVfsLdMPST121W33n5TBF+0pmu
N/QT7mWhn3jQz0U/4c4Y+gn+XL5+uAOGfsLvM/rJT4eaKTZ1ivCTpv2xy6I/
hn4yga4f9JP1dB2in3jFd/zVp0Wp8JOp9Dj6iSdfV+An+DnCHhr6Cfe+0E9C
4H3g62SQzY1ddfkG4Se8bqCfcFcN/WQnrQPoJ8fo/oh+wp0x9BNb6oyhn/B6
i37yKc0D6Cd8n0U/4fUW/URD6zz6CXfe0E960ecU/YTXefQTvt+hn/SkXhz6
Ca9j6Ce8zqCfaOn+hX5SS/dl9BNe99BPRtD6jH7C91n0kxCaH9BP0mk9Rz9p
RfMD+okFzS3oJ7ui7I7WbVSFn+jKA/0TT6vCT3iOQj/Jorka/YS7eegnvWhu
Rz/hrib6iV11drKHjyr8pHlZ5rLhncqEn/Dci37SjeZM9JOmnb03fjKjpMon
rkQVfpJMcwj6CXf50E+4y4d+0pvmf/STHr03PL57RBV+wnMX+gn3/dBPIqgv
in5yiOZA9JNBuX+vuFelCj+ZSvsg9BOee9FPeL5FP+GuIPoJd1PRT/osTzD9
+JEq/IQ7hOgnvO8T3z+ZNX9hZIgq/MSH9q3oJ9wJRD9xpP0v+klj/xD8hPdl
6Cc2tJ9CP+FeIvoJ9xLRT3bWHb7l66oKP+F9IvpJc9qfop+k0H4T/eRdPUb0
k4wXu7U1k1ThJ7xfRj9ZRPtu9BO/V/c/vnhRFX4y4cXDVO0iVfiJW8q4HYu8
y4SfeJEnoJ+wP6CfsFegn3Sj3iP6ydktpgs7nVKFn3DvEf2Eu4joJz/Y/+ga
PUwv/KTb6W3tzj/XCT/hbiT6SZKld12wt074Cfck0U/e+/anZ2t/0ws/4b4Z
+onlbb81iS9KhJ/wue3oJ0Xfeg35ZWiJ8BM3r6QFXzsowk/4PHr0E+5Vop80
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
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlgmwTmUYx889lqN7vmMbQpbuzXZxLdnDtW+5lpuQfc1gSJbIlGEQiqJo
DKUUarSZokWyL9mXkZr2lEJikOxFv/88z8z3zPM///O8z3m/9322zKGPdx8b
BkFQIS0I8qGnR0FQCP0iumEcBN14WTgJgj7oOvD90I3ge6KLwhdDeoMfiM2+
K7gIXFlkOLgZXGOkGms343MwXBZ4I7gMNo/yvBVcD5sO4HS4gej7sOmPHuLf
3YtNXWxa8Hw7FQT/IU3A98Ot4F1pbN5FfxCZTVpiuCr85+g62h/8Da0DDwDf
jU1TxyXBo9F1sX9SfnmeiW7L+zbo1kgIl41MA+/H5250c+x3ovOwW43uyvuu
4DfAD4I7IK+Bu8B1B78Dfkjnh2zW/4OriowHt4DLRZaCK8Hl+Llt4ltjxIE/
BX8Ibgj+Btwdm/d57ol9HrIGfAL+kdj2NQJuALIefAb+LnAuuAHvx4OPggty
4RMcD4QfC94P7qO7A88DdwDngBfqf4Fbgj8D/4nPm34XOv8x8PvAt8D1sWsv
/4mdoe50HXxF+AI8f8262uB64O9SxucHHwPfC/6XmNwLztY5wB8Fz4mM3wfO
hC+KzwVwd+BuIwdThkvCL4G/DoYKZnkMNMLPdYiJPCvuT/E+ApQCFwvN/gay
B5sK2BeGfw7bych5+O3wl9Hp8H+kmQjP5P2EyL71TGR+5f90mq3lCIK56Fu+
N+1Rd/oYkp+XzfnWKHCmx0JjbCYp7uCfQteAr+2x1yY2/mlwdbht+K0eWEwq
X5RjpRPTei6VWN4qj4b4N7PBuyKLa91NvsRyTDaK+fbIHPj6ieG5ijnf50hw
hcT86D/cC66CjPMY1h3rrpXX5TzHVQfKgxd4/NTx/GqnWIot57IS25P2dhzd
GX4ZfOXE7qYoslOxxvN8cEedA3gDuAe4DLoMa8uiZ7D+Kmf8JfZX0CUCu1fF
VRHw87yvoBoALodu6vGZg26p/wRurvxH7gnsnHLcRud10+NK8XLJYyAFXyK0
bxUOTYTTtc5j+ziLVvHtLPAR8OLI/tePygV0Oexj9HzFJ/owfLnYYm8HOCO2
ON/v8S+bQ+BWXldVQ9P8fynHOiIZgeVhL+zbga9EFreKz/HgsvB/8bwtZfEa
emzP8nhWLCu2ZbMV4jp4D0ajOfv+qvnYRNSQdfoe+Bh6r84uMLvBsXFPqFeA
d4FHgnco9rDZjn4dnxmqJ/ivH1o9r6s6jFQJLG/L+v1moldHdi8foxsrHgOr
7xX9vlQvsv088xRDfg5V0WO9lip2m3pMKt4WIcXhK7HHiXC1Aut/05UH4Bno
KaHl2mT0VM8p5eckz1nl5CykCXh2aGu0VvlzJLKcauC1XXmU4Xmjb72MHur3
qNxVreMXTI0sThS389QrE/uGcueI58tOdK3E9qr6cIJzLA1eqroFrqR9x1bT
lBdbPK4KsHZKZHGlGjU7stwpqP8VWX/U/1WN6e53oR7f27G44V5PRqBfQeoF
1sOW+JksQn+ivAIvDq0Hqm++hz6TZr1MPa0b32oG/pVvve1nqJ7aC8kE90Av
d5/yfVL9Xu/Z+MOs/Uj7Am9Ct8bmi9D6lfxf5DvDFE+B1dkRvmfVsAOR8epx
axUTgfXUU5HtU73sXGT+BuH/58hs1PvW+/86EFqeKF/OonelrC6Ux+eh0PLu
IPqnyPZ23uub/Mhfv9je98f/hZTFaw24TrGdX1ufI7R2RWgzjOajEomd25vg
TqrViZ2R5o1aseXQt/j7BSmpO4st14rhZyH6t5TVzaqqKzx3CmxOOALXHnwY
PSA2PQ7fJz2uZP8qduXBp+GyYsO/p4xXPq5B34jMj2aMzbwrFFp+pfOcF9i8
UdznS82QG/ysNoZ2pzp/3YPOQbHTRnftc47mKM1db4E7wx2LLNc0/+icxXdL
rPaqjz+r2SFltV5z41VwTXDN2GZL1XslwVe+T83AKz1/Nc8pRhVjzbVfn3M0
IykOVccueD9V/VkZ2Zmot5xKWb/SXb+A3s3z3x4bLXy+Ui/TXK0Yv5yy+Uu1
9KXQ5kndb25ifUHz+TSf/RT/fRPrZ6oPyvdc75vtEpu9Nav/o29GVmuHJ/Z9
9Sb1RtVk3ZHuSvOY6uRa8LLI+kh1n1e3sHYYa7eicwKbXzWbqZddxH+12Grz
WXCEXafQ6vNAnxXVo895jN3xGVW9YFRi96B6onqf6/W5C/qS/g9Yf/pKymq6
7quX72eo8jFlfVexXTm2/vk93KDYYixm7SWvgcopzRKa95Yrr1O2T83Dq7z+
qw+0iq3GJ/jvC+4Cn7+Q9cr8ms0iyyfFeanQvqs+/wP+rim34cNCloOab6/5
+ajHnQH/D8aYdX4=
            "]], 
           Polygon[CompressedData["
1:eJwtmHm4llUVxd97GM6F73tlhgQEQZB5CBBQBnEAHFBUCFGQydS0gUEezcon
S03NTMtMyzE1SiWRcgRRBhlFVHAKJUcEFdMEBEW09XvW/mPfe9aZvnP22Xvt
vd8OM2ae9qNUFMX4mqKoq/8vVoviBcm9uSj+Krld8i31N9OkLeofWxbFnWof
rb4tGjte+C7hAayN+bdJXtXc12KvbhpvXXhP+vol78ncV4RflvxJ7T9LXlK7
vsYP0HjHSlG8KdxI+CDhv2XPrSfcsvCaTcJ1hJsI/074v8LthdsLPyC8Q3iM
cJvC91ki3EC4gfBlwvslX0ku1D3mSv6n8UM13qrweWZLpJpip/5slbwv2SbR
0YrLNfac5u8XbizcoeI9Nmr9cYX3flrjH2pc/4o5ws+r0V3jTYXvEX5fuG3c
52bhbcKthNsJ3yr8H+GWwi2EbxL+pOo7crf5ko/YX/IXte+WvKP225I71b4r
u90s9E3ffdm6QUfvxdoOah9YeA/O8EfJ1qrP9oGkY+j3DvVP1v0mSc7UXSdJ
+qh9mcZ7aHxZto00SbYB3neqxheHvXwkPE74fuHDhDcJHyv8e+HBwq8K1xWe
KYxR/kBylH5jhKSr+rtJ6khGqv9Y9pTMEX5R/0dr/Zda/4bkdcl49X8nZL7G
hxQeO0v4UfYV/lD4U3QquUD935ecI/kudqC+zySl2tXSZ+As56m9QuuHa/3W
7LlPCp9YeA1970nOLT2XPegvamVHtf6N1Zy/8G8P0J79JQ3VX5GcLLlX40do
fLPGd0qf44U7CC8Qbqvxc4UPEf6XcF/hK4S/Lbw2e82/JSfFXtO091RJRb9d
lWzWfhXNb6v585gr3EX4YOE+Fb/tGuGTCr/xCcK3Cg8VHiv8huY3FW4kfKPW
d0Rvwhewh9qDJNeofTVvrPY7mjMMW0dHpe/wILqt+m6Pqv0INln6vQ/S/0/k
L720ZiX+LDkG39fYGI31kPxE7b7qW62x4cIfaP52yUPJPoAdp9L20Qg96P+h
mv9Yts1yr7rSRb1a6wBugWPQzWzNf17tseprUGtuwLawMTjip8L1hffo99Zo
/i+zuWBb8MMt2bpBR29p/O/ZvjxY+JuY3xBb0dxnquYT+KGO+i7U2FP4d435
r502vjibl3eob1nVNjuCt0+25Wuy58KZK2Ic275Z+BiN7xIeKfw4/lLaNg7H
l5Nt5P7g9wHCX1btg4OEH072TXwW370dHyvt13AjHAnHX5HNbV/qfOur5qjm
ws2TuesF4f5wKZxY+g7cRc3iIo1dHefnzsur9h3s5elkH6qvNxhV+E14m33Z
vrcSfhDeHfd7TnhmaV/GXpYn+/QlwvVif3TLnuy9VPK90hwNV6+Dc4SnSOen
xHvDLR/H/fFxfJ3f5LdXSX5YmivhZjgazrwy+27ccWnYdyfhE4k5Glgi3K2w
v8Ar3Svm/nbCH1dtj/hmT+HdwtM05wm1F0lmxHvwvnAY3Iov4bvHJfsUOkAX
J6tvsvZ+LZtbb1PfKHwlmwsfFB4h3KniWERMJDbu1fge/Ed6ryP5Qn0DIx4R
f/cLD414QXxZJ+mu9o/V17O0Te+K+IitH1uxr/4MjtL4r8M/8J9VVQttfOoX
GlspXGpuM+E/ZNsEb8cbtq1YpzsiV2kjvCHiv45aXKv5s0rrgLufJRlSmovg
pKFqr8NYk9/o4IrjHfqvUd+zGrsuO5YT09cKr5Z8UWObxraZ802N35216BBd
LiCmqL1Kfb01dxacU9rH8DVyJnKnt7O5lDflbYlT85L5bYLap0d8fEAyUe2X
s2MlfYy9lZ1r3S18ivB24RPCHuCDFZE/5eQ4jM/he3A4XL4zO/bA8XA9sZJY
wxk4yyvCA4WvFx5WOp7hb/cJnyb8UHYsmsAblT4DZ4HfT8X2NN5P478hRgmP
rjg2EaMGl74jd8VH39XcJyRdiDXkKBp7PJurJ3J+fJUYIzwFm4MPJKMiXpH/
cF50hG7g/690/31Vn3Nhdn6JLtAJuSUxkvOcLdyqdPzqIHlW/esli+JMnGVa
zJmu/2uy13YSviWZ0zZkC3fmroz1l/QLniUWkxORG03VmpalYyL22BNO01hn
4esiPxlT8dpLkzmaPXoL9yrNo+TXrUvvxZ7Ls89+fsR/7rA28lFSjl+FvWLb
2Dy2vyb8DR9sX7G99lF7nMYPKJ3T4rv48N4a2/++GvM7mBjaWeNzIrYS8+Ey
OG2YFrYpfUbOtiLiOvnKefBlvDFvPSlZr8QM9uY38CtsCts6XdKitA/NTT4j
Z0UXl4T+0clerR8U8R3bWRD2eZj69oQt0KYPmxio9Vcl+9DG7HzyGOF/ZudT
5J+c85ns/AOdjE326VXRR25Cjsrcz7X/qck6QTdNS+uyT+QnT2VzPlxPLtkk
7t8lzttF+KbkmEvshfP7Juck8+JM5HrkvJyVHLhr+Bm2152cJJnj4XrGLk72
QeagQ3QJRw+p2CfQA3puHjI52ccWhv13Vfso9X1ddb1ADkPuAmnCAfg5cRpu
IM8iHgxL1iNzhifXGKytET487vuPbB1cFOdBN+iI+HBGsu6oZw5JrjmoPS7N
tmVsmloLG/46bAXbpqajtuuRXLuS/1Frsgd7wTlwz5X4VOkYhm7RMbFtYfDL
kOCOR0Lf2Cy2+1jwUa/kt14f/EbOC3fg93AdPtw59idWtkiuXcmXGwcXb4lY
gh/hX7trXGOST8FRcBUxj9jXW/j1yKfIL/aFLzJOLPqsxrGSmpfaDH19WnUO
QS5BfUedOD/yg87JtePc7FyTnJPa9KrIV+CHjVXndOR21ATUBjdkx1ZiLLU2
OQa5xvGSXdWw4cJvjC8+GfkN49QzcDbcDWfBC+QM5A4HJteqW6I+JV9GV/At
3DwjmX/JKcgt8Hl8/13NaZ0co4nV6Khhsk7QzcPx/tSHuXSdjC2OEK5Xujbg
97FZbPfFiKc/T+ZacmByYTgD7mAP9sL/akv7Abk898W28Vl8b3ayL68OPoWz
qFWoOeH2a4WPKO2zcBf3wZcXh79x33alawZ0gU6o3TdHfL48ObaQQ5FLESOI
Fb+NfAWdbK+ad4kN1OQDSnMCsYT5cMVL2bGHGERutCLwOcncvSnyDfIlarmt
8f2BbxJ8m6BOHZ185sXBb/gyHNO4dA5ELkSOQa5BPrYhOYf/PNseeZN6EcvJ
wZfG+MSKa5Ybk2scapmjY0/2opYh5yXXIefZIfxmdj5FfjOydI57R8RP7k49
vyw536CWhCPgCr7B8C1musaXJNcc1KqckbNwprNL1+jchTudWTonW5ica5Bz
sCc1ArUBv8X3kfXJNQnnnVI61+OMnJUag7qBupLagza1xOjCfdQs1C5jCufh
fNNgjDnnx++TG5KTjZO+zhC+QfhI4W3Z3xfYg7V7Q2foblKcjZyY3DjLqWtr
fWdyUnLR6eEPxFXyRr7t4eP4Mj49WOuuD76BD8i9yamxFWyGPIwzcBZqcmrz
I4Mf4Uy4kxqS2pQahlqGHJM9WEsuR42En8HD1E7U3NRi1GR8x2AMX4SjmQOn
w+34CLksNdKi0P+Eit+TGpGaYFbYHLbHNxe+veCT7MFafJXYdk/YAzGO73mc
gd/mWwo+QQ5B7oCvwHENw4/hvv8DGDOebA==
            "]], 
           Polygon[CompressedData["
1:eJw1lnmYT2UUx+9MTXdyfxcVCmOZMWPfxzpmIzL7ljEo0ijSokz2JaMYZafN
UlGoKDyhp+zMDNkJ7U/WNtUYJiZR6nOec/rj8zzf+z3nvfddzvu+Nzz/6ZwR
wY7jFEEINPYcpybG3VALTgUcJyjUcdKIFfO8Gypcx/kFNqIPQjKxmzzPg7kS
o01D/LfQP6F/hJ+hHl5T3t8V+qFz4H6403ecPnifoBPR3aEH/ECbBnj1Icza
RuI3gihYjJeKVwN9F9SEgXgxeOnwBvo1eB16E7vXVy3eQkghZw59nA2L4B68
89JX6TfcgP14/Wn3LX41dFWoAlG0vWDjbIb+Ff0bNPH0PWfQZ+Gc5ND+Mbx4
YuHoCPiXd6cyb9vwt8Lvrs7Bp+gtsBkGkfcwDIZ82IGXS04IOhHdXcYF0Xi9
8Jail8Aim5cWEIVuAo3hMn2JJ+8jmXdPxyhjPQHH4Qy8LzFyesIm9Mfwss3V
IeIHoTd6Jl4COa3QLdFZkA2VfCMV/210JrGz5J+DNLxVeN+jy+Ai5Mq6Q19Y
K/VAfj24HOQ4AZ592GPvW4F+B5ZDBjnJMBfdjVgsxIEHyXhJcB90sHmROklD
n+Kbp2E4XileP7y/eL7uat3XsPWVdT7NdzPIS4dM63sWOQPQ69Hr4EPrcwI8
g34FXpX5Jqe/p7XzJPopGOHrd/fKmKAE8myNItFlfO8ilEMyeUmQYvMo4y3G
L2NextDXGfCiq98dSXw0jJI19rXu30Qvk/0n84A3mtxRsFNqlHfU9bR/B4gv
gPlW47ssXkDuNJhu6/Ye8Xdhpc1Btqd1kkUsG3KgGYzHGwdjpDbJCeXcyKTG
j/J8BAbineQbt6Ibob9Afwnt0N3w4iAW/sHbD3/Tlwae7k/Zp+NgLOy2uQgj
NsT2RV/0VWKVMAh9DG8ksdvpQxVYiL8ALtG2KbEVNj4Z5yG8m7yvIe1uohOI
r8XfDFvgO7zWeG3As70/E/8lKCFWXfYI+hq6K7oLdIK2nq6TrNdxG3cE3p/o
jlKf0B5ae1qXUp8XXD0HZe9PQk+EfTYXRehbGEs6c7qPnM/gmtWv1PFtoTru
Al/nZRd6J2z//9wgnkHbwzwfggc8PWPlXF4qex9WQ3Xa5so4iG/neQf8QV4F
XAlorLOnZ11tdF2oY2fnKnJXwiZIkXMtoHMeIWsuZyW09PSOqGNtw+0MDdC/
bPq3gefjMBjvqK2XtDmG/hwipbbwTgR0TRfa/Dp4QRBi9TUBf7z0n1gl8zcV
XY2xFRB/Vs4nWSc5A4i3RbeTcdm6FZI7Bea7+q3tsmaejsnlHaFSW76uZbTU
BrF15K6HFr7uR9mXE6GHnAWyjtAT/bx8g5xeptuh20M0VPX1TpS7McP6t412
W6G+3SNxnup89BAYHqx3yx5ySuGkq2djPV/XMk/2B/SxdXuO+GQ4TN+D8Wah
Y/EfRQ+DoRAm96XkytzLOQ+tfT135+FdYj7Lg/QbS2i/GJrbWSb3THP8yehJ
MMHmIID3OPoJGAuJnn73EXRtYnWgrq/znIqXLue21dBeW8P6nu472X8bYYOc
a66+Q/os/xb9pbZhANyB9zVtv4JvbK1kv9Wyf4Vu6F1ypkCS3Wtd5D0Q4+vZ
FIN3nbY3ZB9CCbnF0IF4EbGj1l7ec8DVOWvj610h99p5vHI5e1w9X+Telvs7
Xva/p3doK6s/qcOr5CwndxmscfX7ciYO431DpQbs/sqzcTwk5wU8GKz/PtKv
QvRUmCF3AF5H66voTujOcMTWP9zT/zb5f5P7t4J5vgpXoDSg8zKLvDkwO1jv
fandF9DTYZrVs9TLFPtuoc2BI/868g/p67na3u6P1egPYE2w/m/8B6ucSUE=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtl3nQj1UUxx/vU3rydH8iSzGyJluUoZS2KaOhRmJskX3flyyvfffy2vfl
te8hVISkZaZ1WkfEVFSMpSjDJEn0+Trnjzvf7z333Pu7z7ln+5Xt2K9J36wo
iu7NF0UxWDETRXsgK9Mo6sa4wOKkEEWlkihqwXoxsCSjFbwaeH9iOpPRacq+
UcibCRlT4MdYm8A5zZkfCb6GvDX4EmM8vAV4EL2m8MB5h5xLlmF+FBzK3u/A
V5AfybK11ro368edX82ye54ER6PfOTU+BN6Y38hGpxHYFfk55OORd0jt/GHw
0omdr9+pAW8ve4AddX94Eec/sD4c/bacNQb5eHAc8hHwNujUZz4U/jS4ljEH
Pg7MYUyETwaro9cJ3pN9E5lPhY8F/+TsbvBL4ADmufBBYD/GJPhgsBd7XwXP
c4fDWWbnFcy7JWbPGZzZx/W174zb7RT4FDrF9Dbsvca8C/Ir4MPIBsBrgW0Y
g+EvgzXcbrVj+x591+Ngd37jIvumc0495gORPyPbxmaHzuA0/y59XyfnPcCe
she8O9jBbfgE2CU1m1fijif8bqfBX/x99ea70VsA3wWuYiyBvw++w1gI3wfm
MabDl4JrOHMlfG1ib90MXgg+hrGM9Qz+vgichXyJ/DExvghcor3I7kRnMN95
OcveawFjBjqj0Jmf2F3Ko/Omn7NTPo7+z+h3QrcvowCyFcgWMWJ4b2R5qd15
DmdsSO07qnHODnA+8u3ga4x58M3g8MS+axK42v1qr/wqsfXi7F3BOW/Ay8Br
ylfQeVDnuS/NBS9yh2xwZmpvrLduwhnDmFdjvifYHu19MrH4HQ5vCX+Ltcry
A2RzUvPlH5F9znhOb4msEL/9tueQ6an56jnWD3qOGI9sLKMh/AtkrzNKwgch
m5Ka73yE7DijnfwY2algPj0VfhW+Ab4Ufgk+Et4/sbhQbmkHvoe8DvLG8N+D
xxL68xkz4fm4YwF/+0V6h9Rskx/ZDfRzZffU4krxNZBzyjFawu8G16NTWL8r
e8MrwesjvyO2+NV73yZfh98OZsXmz4q5gonlN+WZhcHW5A8Zzz9lwL9Y6w6/
kWX7dU5BsDBrbeHlE+PKRdnB9K4zRsAfQ55BdzW8gcfai7HZ/HnwK9kstTj+
BD7a37cV+z4Llr/0jtJRXH4cbL/O6ZxYrtM5XyonM5r4m76gN4zsXZVntedr
36v5N/BGiem0TsxfdKbuWNpzy32x2UX2UR1QzlIOGMPe82BX5DXZO5jfK6sY
8DzfTnuRn3Ud6Sqf/AaODXaObKsc3wv5P8znBntT6YxzG8rmdRKL0X7wW8GK
zivEdq5qx0T0e6SWp2fAS7DWR/EClmP00DvGFiv63qrKn4nFlHxStbUDvAq8
kMda8dhyhvxE+a+H59hpnD8wtfUcvV2wmqfccpfn7aKKh2A+1wf5KMaz8E+R
HfIYmeXxrtq7H9nw1PL9gWCx/wB8d7B1xVF7t7POb5hYTnhIuTYY6rv0nv1S
87dVyLe5LRTLDRI7c6/ra/8++CPIU+WHYDrD1DOopvmbbg/mL6o7zZF/6z4m
n1kMzw+vlVgdVyyUhQ9JzXd2sP4B41H4CGTVFaOR5TXp6A13sr7LY1Z5rG5i
76X4rerfpfu293yi3KIcrjvnBatPqlO6w0TvbQ673WTf74PJ1dcchZ9m9Pbc
NVc5Dv5T8FjinGmp9Q2qm13Bycy7yBfQyUmtTp5wrvr5K/wMo7/nNNlT/lkP
POZ9iXJmK3BCZGet83wom+i9lEvWIFvm9pTPjHaf2ep5V/Vadbukx6ZitHZi
+U15Lzu1vuBDt7fqSN3YfFU9xibkmz1PDkgtL3VULHgMqu+YF6zfVB0fA15h
vj62GndBfhlbP7NU9Vq9BLhKeRm+SnkyWK8p3z7pdpYNE/L4QvhI+DzGcvVI
idUN1dxN4Fm3oeyf4+cvS6wub0VeImN9jnJLBeQVvK6pN1ieWp0vjSzXe4Nq
7sOK+9n6Dvhq9m5EXjRjNVv3X4t8P7wSshn6PXTyEqtNs5DHyJf5HUrCs/UN
qifwvon1dfqu1L9R9WsbOBP5FrCU5yLluJt74VPBmYn1FKXY9672RXaPDYnd
cx3nLE6tbwroLEhMZ01ifYW4ZLqbfucedGbHdh/V1OXee5RFXixj77jUa6vu
f0vG/i/ov0MJ/WZq/VqRjPWlnSLri6swPxDbfdSDqadSX6ZarH7ssvcv6oVG
gH+7n6ifqex7defrwXpQ1fGb9Vy9cWw9ifroP4L1geq1csHZqfXg14LlT/Wz
W4L1e3qXLM7eGDznev+jWP4vWFzrPurR9N9BtXh+sDPV+/8bzLbqOQtzzv+2
obBD
            "]], 
           Polygon[CompressedData["
1:eJw1mHf81lUVx788F/Obj/cBRVKcTIlRDkzTLJPEVY4IVEBA9o+9Ym9B9gaF
nzIEWWquHJm7vacz0xQUxVyVopZZfd58Tn+c13PPOfd7xxmfc+7Tov/orqMq
RVF0a1AUDfX79bIoLhbdlovidtETok6pKL4t3Tcl/0HIGHcVPaRxe+k7iE4R
bRXfSL/DNP/L0t8n/l7RNzS+RPSIxr2kv0bjfqKHs7+7VOPLQjZT3/ZOnvsd
0RkaT5VsZtVzOAtn4ts7RedoPFGyb0n3Q/FfED9F/JXie4p6iH4s+U9EvxSd
K/1s6QdI/l3xLcW3Sj7nLdl34OxfEW3T+CzpRmj+ueJ3it8hukDjC+NO46Vr
l3zXmaK9MuiVkh1X2oadpRsXtv1R9hk521Wi80SjpTtRc76Xfd5p4ruI/7n4
X4suTt7jktgPW/4qdJM0XiLdWs05tFYUv5DsQo0n49PSdx6YvCZr/5S7iZ8l
vr/4WeJf13kHiT9F/Grx/xQ/Unxn8b1F09lb3/xWusdEj4qmyBdTRZ2kP1W0
UbJNojtEx2vuqPi+i2iMxlmyDdLdKKoXfUnys0V3a9xGuklxXtY4RPyQwmtz
J+52vaim8TrpP6l4/a9Jf4P4htINjvOfKRqqcQO+kW6tqCDe9HOSdJvFH5Rs
8zPErxLfVPxY8ROq/v6LohWSr4yzshZrcmZkzYNn7lLx7+s8fcXX6fvl4pcR
g9KdXnr8XsX3QbZFfGN931/8WaXP+N+K92S9B8V3TLZZl7AfMUJsoLtO9Kbm
95N+iPabK/7tin3QKYi93q1Yd63oHY37SDa46hhvFfFIHF1ROldOkuwB6eZj
E/FbxDeVvX+THYvEzxx9v0D8UeIHiD9Hc8eK5mu8XrJGmt+u9Nk44xzNXSg6
Urrhkn1Vuj9mxxIx1ae0D/ElMXOPdN8XtY34vYi1xf9da/UQ37Z0DnF27nCX
dIPEXws2if9d9n26i36v8aWSLYozsDf5y5zLJB9Y+tsns8/EWfqKDtMdZkq/
UmvOFX+Q+KXil4kO1ri96HGN10t/A/4n/0QtJW8laqxxN+me05knZfuF2CRG
yZG2mvOwxpsl2yp7Hiv+NnJD/DLNPa5mGePlojmi2aLjJTsh9rif2C689/kR
72AYWMY3fLuBnBR9tuY92esW0Wmlc4GcWK/5WyS7GSI2wwYzwNJk28zkHOJX
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
            "]], 
           Polygon[CompressedData["
1:eJwtlnlUV0UYhm8gefXnJcU13HAPl/zHpdJSS620xSw1W9wVt8ByQxFUVhEV
wQAFQUBAc8Mtl8qyU6e9zmk9WamltptatrhlPe+Z74/nnPe+883cuTPzfXPb
TUoYGR/meV4mRMCqwPP+wJgR8rzV6DWwyfe8MtoOhHvei/A8z8W0V6Mv0X4Z
rkB4pOfl4hXQlkxMCmxCH8TrSFsn6Awd8TvASnvXdGJ+Q88jbhX6HPo8LEUP
xRsIg+A9e0ceei2s0VyIeQZuRK+nfQMUa954iXgX0L/rPTAXryVeW2gDO/Fu
ZR49YCu6Gd4AdC26A7o9xMC8kBtvEToJFsM/xLRjLnvRZbQV0K9Q40Ala1WO
fxRqaJsNYehrfOu/UETf7bANdsA9tCUTUwWvomMZt5pxanz3jv14+2APlBLT
CL8hLKTvMcabiJcEt9PeD+6AKtqqiClnLkd4fgU2E/MsRKGraa+BLRBN3M2Q
gb7AeF3Qk4k7ib4CVyE5cN8RTt8IqAOFePmB+yZ92yWYRcybeI/TPhamQmbI
rY3WqNJ339iV76rQ+WB+L/P8ElSE3Hu/ZZzTcAqWMFaifWck8TFaE9iIF9Cn
AdSHePpl2vzj0F2J6QZr8XIhT/tle5lle/0cegU6O3Cx6lOOjtQaak2YYwuI
hh14JcS3RbeBGNt77cdi+nzNe6PsXOt8V9g4CbRXojdDLP4t0Mt357UErxRd
yhrs5rlWZ9ry4hzjnYeLlotlilUuQsi+VzlYg94KW6AZc4qCEvRSxsmBVXCV
Phl46bBMuRNya6i1TKftLO+YhteC5+awDO8XvPboXPwl9LmI9yf8BU3wG8Mi
++5JxHyEHk7ccvRTtD0NnaETJNF2nbie6OU29tSQWwutifo+SN8HYJjmaOf5
NvRrtB2F1+GI8hWvJ/SGRcRMpP8EmOO7eX5OzMPoh+BJGIn3Gd4H8D58aPPU
O95GT0BPhDthCd47lo8p6LH0fwL+1rrjbcBL5TkNTuNNwpsMM2AFbV/gjUA/
AmO03njNiG0KC2g7w3e3RreCltBdY+PND9w6J9PnBM/Hw9x37AlcnVK96gQL
iFkIsehuyiHVY2IGMc5AGOG7NVPu90H31rpYvr8QuNxvjG4KTcyrtbyYT9sw
4ofDOvRKOy86N/8Frj42RDeC5pY7Wqsh6MFwt9WwA3g90PczzigYDTND7jtz
AldrVXNT8R4lbhQ8ZnuUrVqunNH5hh8DV9vrouuBbzmTozqGnqt5wE+BqwfK
i76MPRiG6DvwWuG1hstWm84Gbmy9Y77dN8p5395xk+VsHfJonc4Y42QrJ+Eb
nXc4Dlm05RH3JXq07fUx9FfKNfQ4vFRIg5OqkdYnX/VCOeG7XC3F2wjFsJ62
dNUO9GF51IVii1WfDN/ducrzG8CDMLtzdQ/qHdk6i6q5Nr9reJWq/cpNy33d
yYdUI3TOtaeRbs9z0Ku1JnCdfuN53zjfrZnu5lm+W/s56J+Vx/Cr7dtsvDPo
7+GHwO2vcu9j9CfwaeBqgmrDNN/Fa38T0PHKXd2feCHmcgp/FnomTLfcmkr7
FO2DvV97rj0q0LdrXaFQ/wF4EVDX9k9eUciN7ePVg/rQn7H6wVDVZMsj5bXy
u8h3/yxaF51n1RvVne6QyFjf4cWhp8EUyMKbTp84WG3/Hfo/UK5q7L3ofbBf
9yIxY3xXK3Ru0kLuP+de5QzcB+/aGRpv9UV15oT9v0Sj74IBsAvvEByEw5Z3
ml+J7keOxzbluNZP9cbusI205/Gcb94uvJ2wPdzdb28wTl90H+gFi/EC4hpA
pN0tOqe7ieuC7gwdrTZpnYtUJxVje/lW4P7d9A/XP9zV2BSrhVNC7n7QPfE/
OO1WcQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
TVPczsZexO8auBbf+R8lpBHw
            "]], 
           Polygon[CompressedData["
1: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
P0v+uyTXcBbORM75DHrLO4M=
            "]], 
           Polygon[CompressedData["
1:eJwtlndYV2UUx6/w8+mH127TXC0rRwMUULRMRMRsOtDcKy1zBVqZmuZIpdQ0
zVHmSNNEtoggCLIEFExjFJiCiTlSrEQMzbT8nN7zx+d5vvd7zvve95533VZj
w0PDPCzLioCG8KNtWW+7LGsiTIAEx7Ie8bKsh8EfvsMrxFsEC2ExPItXQLs9
bstKgi54xzwtKxN9GP814v2hH6wjVgRL0C3pry20g5V4IXhF5K9CfwEVUC59
wRZivxKLRy9H/2KbMcnYgqCWscfgR8MFYmXkfY0+jfYm7gP5eHlQoO8/SSwH
2qBn4M2EWfI95P5Bf5vxN8FTPK/BXw1rYTpeBe2a4j8ArWA13lFiP+tYzxD3
xfeD6XgP4j0Ej0MWsVO2abOLWCLslvdq3WKI5VG7fAihfR1jWUFuPFyyzTu+
RW+Fb7QuhyAIvYTYUlgGf9P+OnjQxzDJxdsOI9AjYRyU0i6XnBzwJ3aJ9x9G
N6CNBcXER5G3hVgVejH6E4iAA3hzoT3aR+oEubIO8FaiV0E4lOO56MsTytDj
dV0lay2P2aaOUs+f0JPwYojFQhzMB1+8PGJ/MbZ6mIfXB68vPK3vnY3XGv0E
PAbZug42ojfAeqi2zZp8FT0VpsGX5Jy1zdqulO+Ek1Ci375V6g3bHLM/ZPw7
0VEQDTWM5yJcc5s5+EzWHgxFD4FBsjZod4v4TWjsZb5xOTlXea6DFbr+C8n7
wTbztRFvE2zWsYzGewPG6HxI3nCdyxE6v//Q1w23meexeHfInlUtc70DHQkb
HLMfZV8O1vHlQyd0ZwiABVp7f7QfdJA5JyeV/vfCITjDevEmpyvv+ZMls52c
bZLLczr+PPRcmAPHaRtHm1hoT+wgbSPlvEHfRTwdfY7Yeeig8Wh0BuwXZJ2Q
N4nYZJgCA+WbybsB12EPOYPwXofBsgfUi4Ij6N/gAnQi9go0oj8bzuMlkjME
rx59DW5BMp4fXiE6njFkQTZMwGtCu/vhXsggLw280HdCY3jLMTXtqPtD9snH
eONkPuBNXddS01L6LIEUtCXzLGcBzxVw2m2++x3H1Ooe9N3gwD7bnBNyXhTD
VcY5QGqHLnCb77mJV44eqlq+aRh6OIyBf/H+g4b0l0osGK+S5yqohgTb1F/m
4Xlix/Fi8ZJkP2qt6vW9Uuej6BIoho5ytuFdRl+EGuir8yZzU0afp6AaJjqm
blK/+7SmAXilsg5sc0b9f1ah2xJ/EtrJ2idnl23WYk+ZK3KKFNHyjS7yTsi6
1fqOxBsFoyEMWuKdJV4LV3StNcVrDs209tK2AdoTPHSOqsithEtuc4/IWELg
lNatF/oFx9RK5qYfuj+EQgptkqGbnDfEDrjNGnLTzzPgDeMdczYEortDL70j
5bzvge4JwXrmSJ1r6acOrkAfvAxYKOsO5sv5Rk4m3n7IggXqdWa//k5pvpLz
UM5QntOIp8I++Ej3bzf8y+RFyRko+wbvZcfMq8zvOd1HJXjFMneOuYfl3E3X
fk6gm9NPC7iIjpU4sR48B+udKXdnoJeJnSb2IvSGl/SskHUvd8Vk9PdyZ3ma
8zRDv6kJbVtDG9hFXRPAV/fxTtvsYdnLwTpX8XKvwizazoYPIYVYhGP+bw7a
5i6VO1W8rnjPQReX+feR+2OHrBOY4jL/SHNk7tG9YYCMk5ypeOEwTddcpm3W
n/wbyD9CC/UCdU3E2WYfy37urutY9miQ1Msx/1LL8JbCpy7zT/Mo3/w5OhJq
mKsAnpPIe4/ndyHMZe5k+d6Z6klsr2P+S9ag18Fal/mnkXt6BvoDeN9l/n3k
X2AROptYDuSCzXsaQTMvE5P/g92MOxF8dB+nodfL+Ux8IITCEfq6DRqcino=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1l2eMVVUQx+/bfY/dy7vsoUrvva5AAAFpSlUEBKRIkQCyShcUCGCB0JEm
SAvRDyaG+AUhEBKEiCJEgkpEJQQTiRqKIL0sHX//zPjhZP5n7sw5c86ZdmuP
nTZwak4URTVSUZQLXRCiaH0mipomUVSHMRU8C14+uDK4LXguYya4LrxmjK7o
noqjaA78GfB3g+dCG8P/IjbdSszb8b0eeBb4XXBD8FLwcnAFxpV0FD3MRtF8
eB3R3QbdxHgGvBG6wW07zpql0K0OfwO4pfTh58lmcBr8Hvw60MrIVIOWZJQF
50MzjArgPOiDtMmkwFfB5cDXofcYAfwbtGzG+KWhp5jngX+FTmCPDPgONheB
T8NLs/8t5j/pLAXYjk5FZNpmzA7tpbvoxKidsjvNc3tKQR+jlwU/hOYwLwOO
oHfcnirgAkYpcAJtwZm7gX9n/1rMy4NrQLOMquAy0FaJ3eU2bPtI7wB/HfQg
OouhS+EHZFqBe4NbQmsi0w76GTIDoKPgN4fWg98aWugykj2GbTH4OHS4v/s+
8Gvo/gC9wz0MBT/hKF+mzXdaIvMOtCf8PfDOIzNH50mZf+yLTUZvXR/b5sH7
ABv2Mp+t9wU/lzEf6JqxdbX+buh05s1T5rt/+Hvp3V5k3hD8MrSPY/F2xbbv
Aegat20VdAt7bIWehj8Y3Bv8CbhRYj55VOeL7S7X8/1DxQf8ldCtrvs0so0T
W28NvBv4RoTMcPQ6uA+M1j0onsDdoV0Uf+Ae0Gb+jk0UM4zW4I+hL/kZ+0M3
su4Gj9kl0DYpe9c5sfnJsthsWA1vHbKX08a/CW0fLE6yfK/rNtTP2H5NZQvf
Y77VVByCE3BDcGdwI/fbBi4r3W2x6Qs3db7W6op8afexnv6OuqtDsdmueB8B
7c63FvJxnSW29ddDN8fmb9s99mVDp2A+qtjqBe7BGKb7SizPyE8W+r7y2T7B
7JNtT8Ern9gdD4RfVnEEHhCMr3cYBC4JrqZ4QW84874Z0x0DHqx4BjdhtEfm
R2ReDxYDsqEGY5zeCl5Hf1O9bTc/o85VKbH4GhkMyzdHB7szvftqZIa671Xg
+zC3oSK4XzAfKpNYHlQsyD938q63cbMd0OaJ5c5FweJIvq3YqgWeBH8m/J3M
p4Fngyd7XEzMWP4X/234UxkTFPPwjiHfBZmTsenK376BbsnYPWyWX/v6M4Ld
i/infV+t/ZZqBfOL2FgGXJiY3mbwWXgJ8pegfzsWr8h9+03FNbrPpyy+Lnj+
OQd9A/0FGYtl3b/iWvH9iueWodDDzDsrh0OXuHwDZI/EFrur4C3MWIwvgi4O
Fnv7+T7Pa5xq3wnmnVLGVy1bBn8l35cr7lNW2w66zC9eE5XHJijHJmb/GfjV
wCPhTw6GR4Engau7/0wBF7m/VUks/2ivFfA+j+29VHN154XgPbH5pOJ9bTA/
kD/0gF8vWP3L5fs1ctFBvp0rsPwvP1+LzH3453XvyL7K/Aj4OjIPsvZepYPF
nOraitj4equy8Mcwz4E/GfozvJKqTdDyiquM1WjVLeWfWci8EFs+HOF4L7L/
sFeHYPlIeSmdWN1uBG9abLaFYDlf55K/9/cYUywUZ61u5/gdjoXfF5xKrI4v
1J7gR8jUDCavep4LPgB95LEzJTa/Uk/ymHEDXqVgNUu1Zph8MFgtVL7qFZs9
smuHrzME3lFwvmIKvEBrqkbKtmB1/UnW+hfdZ8WM5Vjl1Gf5/oC7OIHMePRm
xtYbqLe5gs5d1u+rfOs9T+7/d6tcE2yvKqplseVJ5U/l0SJ/o9Gx3a3saRBM
T/pNHCv3Kgdnmf+lnog9cxLrlWp5n5NCZmRsfPUptYPdrfqXyP3nPnAA9F/O
8hX8q+id9XOpd5J/qHe6VGDvq55nvmKWcQ/dftDLfNvvut96rVdPIT/U2Zqx
16609R6Ks8vIFSPTJzY/l52jlKv4Vj9luT6TeH8UbM1DWp99SiTW67WAfz1r
/n8NfrH3iuoZ93tf8bX3OQ/YayD0sL+13vy294H30b2ZtV7odoHpSFf7jQ2W
mxTXKffJVLAYVD4rAM+OzfeK0T2Ttvv5M211Wb1eVWTGee3b7vemuL5SYH6r
On8X/J3fm85aMlhu1ZuOCNZPqKbI7u8Zt/yt5MMn02Z/LvuOje29FNfTYzuj
+r5HyOcFs+9u1u5NPqZ8oJ5Ha95AZqLnVuVb5f80MuOUq4Pdr2Lhfe9zlAcH
+d3K/yv7P8KjrNVl9STVvC6pto6BjtfaKYv5con1hm2C9bHy/02qdcFqiWrZ
kGC9oGrrp7H1t6rpJYL1jjqLYk156SL2F3oeU08lH1PveqHA3kj/AvonqBjs
X0J2jnHblN/zPY6UG/8DOfp7eA==
            "]], 
           Polygon[CompressedData["
1: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
vgWLdSt6DvAYPoifzIgzn58c09zF/wCJZn0G
            "]], 
           Polygon[CompressedData["
1:eJwtlnlQllUUh19QxNfvk09wBRcEDbUyUVsVcUlNQTBxSdxQQHFBUHDBRBu1
cMsFE1zGlplmqn9bzEmtbBmnzHDGMtMps819w1wRtec39/zxzHfu75577n3v
PefeLyG3OKso3PO8CoiA+ijPq2noeTcDnncf+wE8GQI6n4KBEBP0vCRYgT2T
vlkwG170PW8kXGPMQWJMwB4B6XAebQ/aFeLOxXc6Y/MhF9oTawo+k+Eififx
K8COQx9L/0swDgoY1xYtG3svPp/BELRnIR6tCX2VjNviOy0BrSN0AJ++SWhp
2OkwCtqgDUV7HLs79IZmaFWM3wpvwTDNj88Y7NGQD0eZ91/W2RrfEfRn0z8B
JsJoSEXrD0OgBT4tYbjNm2bx3iTOLmhlMcajzYFp2FNhErQLujkysEdCpvlp
X8bIT/6QC5O1//ZNU7Bz4B3ivw2x5q/9i8Lugd0TkmEwWhY+o+Am33SYb8vB
DuCXqDXofKCPjX1COYA9CJ638xiPloedr3OFYdDL9nK49hxWE7MC3vBdDM07
SjGwB8EAaI7/BcuTNPwmwiTYDJt8d1aKG8IvGvraPmu/M+m7Sm7tZ+yX8AVc
inJ+feifAjnaR/x2EGs7fOC7tSuHsuAF7KFam51bKloX7KZBlw9Vth6tq87q
5AZz3oFT2L/CCYhk3Dn6d2MP1RyQrVpAT4cMyLO8T8HuC/1sriDaFcYeYOy1
gKsJ1cYM+pfS/wj9e2nvg1t2Xv/hl0s7z3d7sA/tFzgOl/EZrjyGs7amywGX
k8rtMcQdC+PgNv3X6X+gb8K+G+X2oBt+XSHJ1rcIbSEshmK0xKBbj9Z1RGeM
toK+8JDbD+3Lz3CbuMn47qR/B32/43sKkrB9jcHeABuhBn6Ek77z34nPSliC
XQaLoDOxFtgaPsTvK/gaHtN5oU2ECbaWBmgR2JHQSPuIVgmbsTfBBuiGzzK0
cliu77M51mOv0R5gf0/8Q9AA7Q7fdBeO2bcVahx+r8Bkq99OUIq9EBbAUnxK
YS52IczWHYXPb8QcFMa+0N4OPdDuEvNv3TXwDwRs7Bz6E+jfzZhPfXefKp86
oH1E+2PojtYELQDREGF39krsV2EVVODTLORia46LcI85jzN+AGvZgk8lHKYd
j999+sMUg/YqCKKdRSvGLodlsATKYA20UB3h8z72e/AJlNge/ISdyhwVtF+D
A7T3KwZ2FaTQd9R35zuf9jwoslxLQKvTWrUetHC0Y/j2Z8zrtNfDQdprdW6w
zs6vC34n0Afit412te59tMigW2sP/JKhJ5zGbzB+5ei7oBc+bdAvqX5Uc1Yn
9+Eqdq3qFWLxyWRsBpyxOh6r+wt9o/JNv5ZrtwLuLbmH33TVuO/yRXtUplyH
l6E3NEeL0Z2q/MWno3Ja3x7hHm7tgc7oodYF9eChTSPmVCiEvyyHdG7nsc/B
GahjHQ/htu2p9ra97ntoCiE7Z/k9HXLvgd6FNtA46N6KTqop1Qs8h09X3We6
O6y2GwZdnSsflZeNTdO8t4gdR7utchifBay1FJZDQ6tV5bRy+3Pf/e9Q7sYz
vgB7FsxUflida0widifoHHL3ge6krdhVUB1ytaX9aKz1qVZC7h7/A+1POA2N
bI4Z9ibrbS5GewZSsPtBrO3BfLR5UGL1qZqutf9BtQF3BtPsHdB7cIO+7+i7
HnD3kHLi0aC782rsfTlE/w9wxP6PrbQ7aQ/938C3vrub1qGthdWW49FoF6yW
Y5Q74Ck3iBlmdazcKNLdAfX4XbHcVS20JE5raGX12xbioF3I/c/SfynlqnJW
NaE3Y7HvakFxWqK1gtYh9ybpbWpmayrB3gbVvvs/pv8s72L/D7P1QAI=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxFl3mwj1UYx98f/V7u6837iiRFyDKWweDad127i+vKvu9LrhZLYy2lmqZt
+tsSLVQk2kgxGKnRUJZUyhJRibJvqc93nmemP955vr/vec45zznn2X5VRxcV
TCsWBMG9mSAojhwWBcEL4OnImmkQ9AmDYGwcBEuyQdAZ/lhOEOQzNgi+AePL
nNf4ePT6w9eBn498Hj4P+SDfLHAh8gLz+4CXoj/O9eui/w6/832dt/kGgtcg
I8Yng0NkLb6HwSWQu11nJ7Ivv58G90MWx7ZdcJuTIDjHXj3hA7jG7DGU8Yns
2Skye/pGZofsWYGcENu56qV2Rq05XHPhVzK+nDULwA/BN4TvE5td5+C3MD4E
/susfbJhJfx9jFfmuwm+wJeC+zGvDPJR9Msib8CXRxbCV0IWZWzeEr+T85wj
xaamcEPRacq3lrGlzGsBPw9+OtxY5DjtB3e3r98isj2ExVUITV5jbjXGxsPX
jf4fuw7fl7US8CXwMHArcHnWnAx+Av0B6F/I2txLyMr8HgvuxfiP/B4uP0F+
wzcMvA/ZPrJzNUb+lrU3PZe1Mel8jzzINxi8H1kavUO6S2yoyN7tsGFEbLaV
Bv8N3xn8BzoHwF1is0G2XOX3XX6fr4NXo5MLPoEciU5JxpaDH8/YnZ0BDwX/
jvwpa+scQZaL7CzVtSa/x4AvZ+3MOvsNZFXmz9AdhuYburfzendsbus2j+Gb
j05v1hkF7gxfnfFq8seM+YfOJ50OyNHo9ELWQOcae0yF/xd50+/2etbW6YLO
/eiU5WvmvpF6vChuKoY2V++qd2yJLJfa3egt5GvlQjuL7jTX3ygP2QT9buDT
+N4hznOePSvC70vsHvNiix3FvnLAr+i9gXwtsbhVbL6PnMu6z4DnICcxZxSy
JTZMQi7K2Bn+ZE515QnGx3veWBxafCnWzzI+hr1ngPOYWwT/HDqT4dZ7/K7T
e4bmn7Pk7+i8Ap4d2fsrjnZkLZa7gk9i70z0Fmds3b9zLKbeZK9Jkdnbw/ea
De4KnhWbXYXgac53A49G/0XWeRhZL7T8UEe5Cp2XtT78Y+AndSb0cz0fKq4U
F3qXO+EbO6/xmei/Cp7LeGvNVy6K7Z3nKa6R3fnmZMyfFoV2J9rjIfQeQXZM
7Y7Ez0JOdb4TfEPPCfWRzeD7gW9yB0We/wch26I3hfEpjE9FPgs/TfP4Fuq8
2j8yO2fE5gN9wVeQS7jHrdxn69h8Sb6xAu6Ux+D2rMWF/Ly4fJh1jsK9576g
PN9VuZG1NsGvhT+eY3l4GTjLnCqM92eNAbHFX0m4epH5fBPkP+h1hB8ZWx7U
eYco/4cW+6uytqb85yKytt9nA+Sg2O6mFGv+kmN+Ln9P+N0IfnBsOtKNUqsH
evdWyMLI/Gok8hF0FqLTWn7iMT4ytFq5AFyAzmB/04GhzVWMNEW/RWxnX8M5
moM/Um1MrOYpvrZl7a31LuOZly+/AfcMrW7rLPKRYR4XI0LL4aoRzVl/gsfg
AmQx5j+Ysffa6Hn4M+QT/u46g/KX7B8cWZ9QpLyVWj3Q+lPly8zfzLwPsHO6
12XpdY0t3x+E/ws5Gv4sslpqviUfk46479CplVpdV+/R02uc1lfPoD6idmr5
RHeZC24Tm09tSgzrbj4FN/S6r1pfwfNhHfBJxoqFltu/dnv2ID9PrLdoG1sd
V02P0Wnj96W4uCc1v1KebJTa/aqvKMXvA8z5IrF8JL9SvyOsXPhWYrW7AP4a
/Mdwg9TbMG+DY3GXGfsAuVq1mPWfCi1+FafiV3m9U+3bCG4f2747ErNBZ6mA
3M7vvfDtYottxXhJnRf+MHxH1fbY3vnDxLDebj34DF+GffPh8r2fU4/R0u2/
qnyfWK+m2rrB4129VmWvazXBVTyHyGfKuo/J1/ajf9LriPKSckkHdCulFp+K
WfUA/VX72GtPYrW5U2znVY+wE66C11nlRvUDquGfwG9LrP/Q2bck9sZ601uJ
5Q3lB+Vw1YouqdVcxU0x8A+J9Tfd4LrHVvN/Tqzuqv7ewdwgtdqv/FPgb6Qc
WMb7NOWZ2HOFcsLFxHo+9X6Xvd9T33UbOjW89o31vNQlsryn3vUscmBs9aRE
av6hPPAua0xE7yV0HkWe5ncQeg/m9Vr250QWy3pr9cbygeusWdzfKIusBD8F
XDuynkb9gHpD8Vf4fcTzj3L7pRy7B+kd0x27L+ldksj6KPUJNTz/KKfKn3uA
zyC/dTvlVw/ElvP3wvWIrcf5zXtm9SG57kv6fTyxGt1dfVqO7S87jib2RrLz
MLhDbL3kV4nlz0L0b+WYLys/347c7bHfOzYfVL+knvRUYvfS221TD7susf8F
ys31uf+tHlOKo9Jes1ULtK/61V2M95SfgU+A/wNtL5jE
            "]], 
           Polygon[CompressedData["
1:eJwtmHm8V2Mex89PnZPf09E5qZAirdKK0r1tupW03ZZ7b+kq3fZFWqSNZB9m
htes/pYYUxONKCXDaDDGEs0whilLKpIlFCXVLZ+37/eP7+s8n+f7PN/zLN/1
aTl1QeX806IoqihEUV19D2ZR1CCJopnCLUMU9cmjqLdoYRpFN4ieFf/FOIqq
GS/+VaKxois1ZnBucy4QfZuZrHPUnqqx32rOh8I/FqOoUvh54T8JD5DM8cLv
Cr8p3Fcy5uj/v1DfBM19T31fxybjbOHTRVVqv66+fyBP1EzjzxWdk9haV+j7
+4KtmfWwl+80fqfGHtL/RwqvFX5EuJ7Gd9D4eerrqrHH1HemcCNRU+Sq7xrx
vtL4/4t3XNRc/bPU11q8SFSu9rPibxTv76Jtsa3vuczOiLN6VPjPwm+JPlJ7
gvqCeM1F09X+UH3/Fq+f1rNA8u9W3zXiXSF8vfBvhacKXyiao/anGv9OZmvu
Ikpy20t7ta8T/6D474pfKnyDcHvJqC/+Ke1/rK/38czulHNaonFLRV+KP0z8
9eL/RfxBua2Bf09zor0QuaLNGrM1tvt8Su0S/199/e9r4UKw/+0U/z/Cg9EV
UYlkTteYl9T3tnhjNKZW/35SeK/wHtF6tc/S2MnifSL8X+F5wvcK3625Vbnp
DLrznmi72r2D3WUn8VPXyWVq31EwXR0ufLPwL4WnCI8Rvkf4PuH5wg9JxiOx
2cM+redl4e3cjegVtU8Wba2s+dXMdJC75s5fUDuXjInivyX8Ymb3wX3l+sd3
mekwuvym+FtdP8bxr9hsCx1D1w6IdmRmM9gO97lL7cNFWxtrXCXcXfPnFkz/
T/p5TRF+Rfy/ZaaDr6r9Wmy62dDX973wx+i6cI3w++xBuI904SrhF4QfEG4i
/qSC3Ql3g86iu9z5Zr/vhcJt9P8DwrHw1cIbxV8j/LnWO1R4tfBK4RGp6ftJ
4f3CB8QfLrxJ+K/CT7t97BI9o3Y7yZstfh3J/0z4SfU/IVrHeNGj6tus79Oi
x9RuG8w2sdETwhe5PWDT2PYn+t9g4Yc1/sHM7hydQpfQhTZ+HifE/9TPhzPj
rI6p7wc//y1qb1Bf4vtFR9CVZtiI8FHhvcKVuekqOnudeKmfH3tkr+9ndhfc
CbozWuNHiRbpnBaLvuEfiekQtn/C/c95ohai77We0eJt4EzE2y2qjW39x3wP
tOnbx/4zO3vuoLn7H9a813lH3T9zXw9nZiOTRcNys50hat8sflv9u65whegu
tf+ovuXi7dGc1sKtROeLyrWH4aLP1f+F+yvssyDeV8Kf6X9DXJ+xPfZ+h3h/
KNgZdNP4Bfh+9R11/cKfvoHPcXtC3/fHFiuG+vpGa3w7yarhHIVLiQ/CpaJJ
7g/miNcT/yZ8p3B1MP6MxHwTPor4QhzoKV6vYGv4QXRpsLVtYV+xxYgzghF3
zN3C20RMiC3GFYP5d+Lbb4QnBrPRl2LzcdguOr/L72dwajaGDOZie93Yk+bf
KP4Vwj2EJwjfIzzG4/Xtwr8SniHcVbjK48lI4f7EcuHbhauEB9Anaq/+i0SX
iMY5n7g+nLsXdVZ/F9GlPmasx376qjX+loKNvVx4nvBt3EEw/cHXTlNfr9zW
ND1YnGatk4KtnT10ym1N/Js1dBQeKRqRm41iq/igJ0SNg/kmYg6xB53tlVp8
uUntgdiI5q3EzkWjyAGKZvPYPjazp2g+Dl83ghxFeLdokNqP4f9El0nGZMm6
VX0jguUM61weuQT+Z4vHi9LUbAbbwed1F64X7O6fcf9EDvBybD4f308fvgs/
wlhyCGIzMZPYucrjETbSLbWYDZ+c47j+39T9DfHvn5npH7q4zf09Z7U7Np/G
mf1L+B3XR/73nMcvcqo6wWIWcSwL5o+QQexIXbeJycRmYkSjYD57k8fvnqnN
3eb2gIznPX7iI7FdYh6xaYrnc7UeT5GxNjP/d6fO+9fqmxVMHypFZbnpLjaK
rT6k8efn5vPwfRs9BrRQX5nmL9GYvhp7JvoqvKJgesx5cxdbPHacyix/xEf0
ET/KrY8284k/bd3v4s9a5qbL6DR6vNb3Tww7or2cJn65+EuF+wWjy0WF3HgX
4kc9vyW/a5WbTGRhG41yW/Mwtz18WKWvH9/WVLin21u58Lm59dFGP89W+yzR
wGD+4VjR7pZ8bjWxQ7y+7j/IwxjbW3hZweYQsznLDR5nW5NDiX9XwfJxbBrb
HqW+tuI1wY4T89FlwWyOfyAbW8R2l3v8w4Y7BIvJxGLy9Vp91+g/14vfA3+k
8fPdf81LzT/UBMtByUWJochC5tDcdARdWSw80McscX84yePWUuHfCc8OFsPo
o32tqA1rTSxmENuG5CYLmQtSkz8zWFxCN6s8nt8v/tLUcgb6aC9LLWde7/ZU
klqNg3/a6jkYMZ24diN+CpvS3M6uL/hhYupQ4eW+njrovfufaZrXILc5/d13
k9N3EX9RwXL9INzV94O+FIVPz00H0UV8/Bi/b+Z3yO0uudOZqdUQ1BLj1K5O
zWfi69a5PiCro9sXMlf7fqkZDhbNJrHNVbHF0DWes1W7/XcMVo81Fu9IZrXi
DOE0sZqRPnhNEouznV3/iWHEsoaiixOzaeyEuDUysT2wF2Qg6wzRoczOhLNp
SK6UWU1AbcCZc47UTp1Fse+bM+FsuiV21tggtlaSmG3iE9h7y8R8BWeMbbIe
zh4bxBa75xY7Sjxek3OQW/ycgyRmw9htM7cfbLK5z+eu+yVm2+gAujA7MV3F
prFdxmPrxGBymYmJxeZBwWwRmcjGxxD7KxLzPRczJ7H4ShwnBhB7yF2JDVe6
/BrPf8p9/+MT2xNEm3j9c+4RzJfh0/AV6Bi6zPmiewX3x+hwHc8biO+LEnsz
gGhjc9jeeN//VOELsOXUbA2bq3Q95vyRiWxyAmq3WxPLFeb6edxE7pkb0cZf
4IsmpKYP6BC6NNnzD3zEMD8v9kOORq5W5vkMPmmA7xdfOCuxtwpqLmovYghx
Y5n7I3LiCs8/yDeoOfbKPq4OlvvN8fmV7k/5R5nHAWILbxjkSPgUfMsK7iFY
DXCt+O0Sqw3wYfiyRaLFwWo4ajnq7dfUrnB95s65+0Nuzw96ftPf7wsbwpZW
ev5CPtUjtTiEfmOD2GKN6xNvEvhk7oi7muaxkbx4PrmPcOPcfDq+nZqA2uBj
r3cOi47HVq/wbRXsPYUcm1jMeZJ7v+32jI9oId6XXkdgs1083mEL6DuxiBqU
tw7eIKhNeVPZ7nUZtQ5vCPs9/yDf3uf1EjUjcf514R1ej1H34UPwJdQslant
gbrrsmB7w0fhq9gze8dn4jvxk+g/byD1EquRWQ81FrUWNRG1UZbbWTH/kmBE
G5mHNS53f8GZcDa8IVDLUtPytoBPq+/7LfUcgtg5N7HcAn1gT+yFWpYaep/X
yeQ2nA25IzkkZ/SGcN3Ean7ya97Mdrif5i2NNxDeQnjDqB/sjemb2OrT9n6H
nGWt3y1vFrxdsN7zPJayPmo8YiqyeevgfvkH+Sxvhrx7fJRZvsD7xo8a84H3
HfH1MhYd3+n5coNgOoIsZP4vszeyYmI2g+1Qh56KTWanYLpEXyePA9Sk6Bi6
Ra36E4JOfZ0=
            "]], 
           Polygon[CompressedData["
1:eJwtlmlUVlUUhi8YJh9XLormkDiFmuSUDAqooQyKIijOOCCaaIpihppZ2eDq
V6tp9bfRLGtpow3aZKZm5YCkpuXQIIKIM2JmSs+7zv7xLN77nn3Od/a5Z+9L
tznlhUvCPc9bCxGwNOR5z4Xxt7nnlcNMnqfBfPQaeJaxcp7fDjzvfSak+J53
PdLz/oVl+M8zvoK45TCX51CM592LHgD9YBrxRTAQ7TPWEqIVQ+wASA+5sQCv
Av0C6z3K82p4gOe+0AeSoCteBHHFrDcM3R7dATpCFNyN1xv62+8Ox8uAEbAM
rwxvkUB3xesG3WEp3uN42ZAFqXgz8FLQrdCtIRZy4RG8VbASlhCTxr5SYbrF
xxCziOeFsBLW4hXirUC/SG5P8vwELCP+fhiPnqAY6ElcDyhA50MezCEmi7mZ
MB5m4CXaGdyHHg4Z0AXvLhiDHg05UELMed7TOdjE+9vK+7uBXu67fY1XPqy5
Gh6Dl9lfKf4zyo+YSMb7ovtAAky18ytT7rAYhhGTBnO1V5it90ZMb70PSIBJ
ePPw+mk96A/T8ObjtdV83Tv0Heh2kKg7AW1sLAO9wHe5D9DdgYHQB6bjFWlv
tl4T+d2C3eR7hHyjmTsbfwTjdxLfCeJgF+M74Qc4RFwGMReZdwE85mzDe4Wx
Op7PwKt2/y+ha6EG3sBbj5ekdwEH0L9AFXzP2A5bO4r12kOHkKsb1c86xnYz
1gzvY/QX6C3wNaSz1pd4p9E1WguG4l1lXgNsZOwzvMF476I3oweh/2PsJtTD
WdhgY43KC92TM+gFt8M44i/hXYTLEOg+4GXCceachBNwgLEhvjuPT9Bh7Dcc
rtqcQt/Vseq5AB2OV629Qw1M1HvFa0Rfg38C926q7KyOwnBi/tYY+jo0wRi8
qaw5Bcp0P60udddK0BP1XqEEkvGSIMXGdP9Uv4M0BwZbXaYoFrJD7j7ctP21
Q8dBJ7gRuH6ViE6GJOtNQ5kzBGZZ71G9xcMC/R6MtHpT/Y5VL0QXED/O7nGS
rZdud70z3jz0Qt/lqFy7QGcYi+cxVsVeRhKXA6PgYes5mdbPFqNL1avhHquz
UrxCnieEXH2ozvK1byi2OpqJVwyzrJfk2trlvutbi2y9KXiTddZWv+qTeg95
yhHyY1x+yrMo5Pqq+oH2V4F+CB60vruK8ZfoL0/z/BRU4P1oNar3/xP6Z6iE
3/B+hz8hi7FDeGfRI313PjqnYei9ePthH3wTuBqsRG9DfwfbVbPW91J91xfU
HzbjfWV19qlqSfUHn8MW+60c+91z6HqoM2+regZ6F2y3upwArcgpFlrDlcDV
R1t0G4i22jqPF4UOQXOrwQ/w/rA8P0R/BIfhEt5FOA+jfFfXqu8WIZej+otq
9Rh6L3of7A9cDTbTdxJugz2qK+Zdi3R9RnmnEZMPYYy31HfZ7lqItSNVG7au
aj8bXY0+A7WqWetrv6IPw0HrneoJ6g2Vlk8suq3uPsSHXF/QXib57jt+C90E
nr5bjHfXnQu5XqEanExcPHoU5CoX4qrJ4RS8xvg6fiORmDetB5+2HJVrsvoi
3g7YCesD945i7Oz1DhqUQ+ByUm4X7Jz1TR5n31B9S3vxu8fUuxiPY3+9IQFy
ibuCdxUadF+JCSc2DJpZD9C3W+d3ivEWPEfCQeJimB9AR7hsc/Ub6n3qgY0w
2ndn0MP+p9H/NucC9y3LRG8g5p0I18NOwHE4afvUXJ3Be+hNsBHeCtye9XtH
0EdVZ/C6neVf9m3RN6YW7xZeHvF1qofA3Rf1pFp7rg9cDe6xWlBNfIv3P95I
TZ8=
            "]], 
           Polygon[{{4102, 4101, 3157, 1569, 1579, 3159}}]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1l3eMVlUQxd+y+D54e8WHogGDUaMmEjWWGDUaS9RoLLEGpEpRijSxRBEQ
kCJdYFl626UsHZYOuyC9iXTpvYgoRSAIAkH8HWf84+acd+7c8t07d2a+uxt8
+l7LUlEUVc6KomywKImiQvho8PsQRSviKOqURlHNTBRtR68BvkvbBv8EPIXd
Rvgl8DS2C+B/xjZ2OdiRsXditwb9PrAt38XoXeh/M2NjXwcvMH4LvGxOFPWm
bw68BK0efTvgdcFGtJ3whuA7tL3wVmAz2i54U/B939uj4JXE9nuJNWcFs8lm
/jjH5sguH0WPg+vRHwF7sq918LfgMxk7Hb4MnJLYb/mOeV6mbwP6i+BitGlZ
dkY96fsDHMA639IK0HMZ1wt9o/rRptA26XzQn/Z1tf6rGfvtr4FP0VbDnwAn
YjcLPhdcwNjD8FvZe1f4EuZsl5qNeAf4bvhKbMbSvyjY2QR+Yxf6TmGTh/aR
r1UfnMN3AzDCZj9j79Vvw7aPzgr7vvA7/O50h1u1FvwIWEw7jM1gbG7TWaBX
AHNoq7RP8HbaCnhFcDBzXsZ+MvZXwGL0C7GttRv8IbU5S9BXg32DzZ+HPgP+
NnOchU+lbyo288GsjO0nA97t93IP+A/j5sH/BkvzvQheCixPWwY/h74ntrPV
79wR25y/gCFjPlwGPB6bDxwD9/ucB8FfnS9J7Ftc2tHY1vodLOt705kd8zFD
2f8m/+3bXFPfEPQj4Gz0Q7H5SxH8fGxvQG8hN9gYjdV5rfK9rQfXxGazLrZ9
a+1hzHkDvnIQPc2xs9bYs/JR+vbpzJnzZGx3dwksZK3J8G7o3VKbt3uw96B3
cUz9fD/H92H6ewU7s1bwNrQSf9dfw+fDO8PrwPPgbeBTg72b43orqfn9tGD+
/CM27dG+gfeF14S3hveBV4d3B/PZQ2/5emL6B+gzsanFPJfho+CV4MtTe7Pj
sR+hO+L7GfRJ9A9g3Cj06X72OsMZ2Iz0N6L33gLb3ejNwYXBsAxvpCLneBS9
GK0q9pMVE+BRjsWna2jz+D6Ezc1o15nrALwcPJNjc1YAO2AzBj6Q/mY+z0j4
ENoI9F6J/fYh8E7w3u43iiG5qfmi7m62v9+s8vZe5DuD6B+X2r0qFumNa12t
3y+xM9RZ9pCt7jq2Jt6e/nO0N5jzDHNspVWBj5PvwR/M2Ntv7TF8vGIkPEJf
C58QLG4V653Srsq30fbAq6EXBbuv2vCraKs9voxG66Fv97cBzDWc/fRILG7L
/gr9+XyPRR8M1kHbnGV3L58ZCu+Kvj61WFAQLKbpDW5W/EwtNg1DHxubn0+I
Ld/9BDamvwiciD41trVmgV+iD3Z9ODjC/XCY7kB3Bn6oe3ebIteH6Wx1d36n
ut8ewdbqjn1p7qxxxvLdUt+P3oB8YBzYCJv2wXjD1PKx8rL8rV2wcxiaWK7J
x6aBvz/lI+WlLR5DpsXmb4Vgc3+z2xV34f3hJ/Sb4LtoVTOWx5t4bn0Y7Oex
QvH2XGp7nhsst+7H5sYcu1vl1uoZ25P2Jt+46HPq3kcGyw9L0A4lllPOJBaX
s5Vv0ccEy0E/O1e9sFG+nFjtcRU8yfcrHjekvwT/LbU5lGt2oIUc29tF+Wcw
fz6fGletcRpeGKxG2JtaXn5evg0/kFpuVqyQjeqCfZ6DlDcv+BtRTXItsdio
3LQDm520+/29zA9Wj1xILe5pn8dSi59a6yj8r9RqKe3zBc+ziq1VvC56QDVA
MK4661psvzHbz0xnN8vjnnLsCvha2l3u/zoL2efD16BX9re2CH4TfDh8ULA8
OUk+TEtUHzCuKLX8OpT+W7xWUWxd7DZ6RyOC5fmlaOsSy30aW87z7GO+/yfB
El9T82g+5U7lTcWNDYnloF3gQ55rcmOrGaSrf5DXD9OYZ7bHHO0t43lWOa+r
xxDlr4HB8nwh2lyPXeNdVw6coHjiNZtyaymvE9YkNpfy6ByPYTpDnf0Ur10U
08p4nbAC+9Gp1b6qryb4792v9xgsX1TCH8endi4683V+R7qX/964YgvzdAwW
k1rQ3zZYbKnmuU/xWTG7U7D49AV6QWxv/2P4JO0Pm9mx5QXVd9dTixWj0Oql
Nlbx4PPU7GQ/iXU3u9+qbpzvddHC2GwUA2vRvz21u9EZ5nmsU1zsnFitmwcO
9Nz6f04R74v+lcdH1QMj5WtZtvcC52M9NqqWaZJabFWsrQuvnVrOVv3QMbFz
0HmUJX62zFg+TZwrL7f13DoosTpBsbo/2C9YXVaQ2v8LxcDPUss1Op/6qf0W
1R414Cc8zpzxe1H8bIoWl7f4qBi40t+U/Fb1hWLUsxnbv9ZVvv0XzPgSIg==

            "]], 
           Polygon[CompressedData["
1:eJxFmHlwltUVxt8X4X3hfl/1YtVWnXbGOm2nddppp2Onm522U6e1U9vRaV3r
giK1bthdq4JUWxEV2XdCSAgkBAiBBAIECIEIgbAHAoQdZJGiIAIVivT5eU6n
f5z57nPP/e57l3Oec8697qG+tz/VJUmS29Ik6arfHSFJWtQu5EnSEJNksXC9
8JksSSqFP5CckswrJsl8yWm1f6Wx7Rrzb43dIlmu9nmNnyFdVkiSbpIo6Vmw
OZjrrGS62rM0fqbG7xYeI/yO8FHJv9Q+Lsl7Jsnjmn+fxjToe8fU91PhVcL7
NO6s8N3CW4Q/FB4pvENzdUpGq71MfbOkOyQ8MdqaWfvlWssnC/aNn+n/61L7
9gDJaLVf1/g7pTsofEDyntq/0LiRapdJP0T6e9Q3VHMNkUxWu0wyRLJVug7J
ULWXaPw8jd8lPEy4q/bzsObpLemmdg+tYWNqfeguaPxW4QeFuwiXCVcJT9T/
H9D/Dwm3CV8rfbPwAsmX1b5Bsoh74RvMLZmv9jOSOv23XvKs2u/r/xv0//uk
/0j4iPBa4euE1wjvFH5L+FPCy6KNYez9kkTrmSx9pfQjNN990s30+1sk/Dfh
gZmdHWf4onSt6rsmt/WuVnuY+iZLN1hj7oq2J/Y2QTJOcnc0HWNe0tjx3j+K
OSX3Sl+p3yrJXMkejVmpsZ/R/G9Jt0JyVW7rb1F7tPTl0o/V2PvddvtItzc1
Oxgi/aTU5uc7D0Yby3+el3699EvU/qz+0yZd72hrZc2TJXXS10q/Se03pXtY
Uq52meQhxkpfIX2FcB/h30nWqt0m+a3avSST1B6vMcM1tntPs3lsfYGkQX1z
pdvPGI1tF24WPi08VXhQsP8yxyPCc4RrUvsG38InNwvflpuvlvh6Vkg/UHiE
3wfrfYzxkjs19i7JOfdHfONLwpuEV0k+p/YK9XVw9tHOhjNah+0Kv6a5BmXm
L23qWyzdMeEp0q2XfFH9X5CsVbsvc0rXKvl9NB+GS+AUfLtFeFFq/jxYeJpw
dWr3/xS2IzzBz/dx7l94ofB67FB4r+Rbmuvbkv1qvyBpkG6BpL9/D+74rvR7
hAvyxyAp6A6KkvHST5G+UeNflP5t4dXCt2v8TuEa55cW6V/y82b9N0rfKbw5
2l7Zc7vaXTT3NunvEN4hvE3yc7VvlWxXe67bU63m+4PwBj/v6yUb1f6HpEm6
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
1cC1Hk9Z338Byld6Tg==
            "]], 
           Polygon[CompressedData["
1:eJw1lnlQV1UYhq+lmD9u9SMdNSvLlpn2fd+zfZvKxl1LzX2vZirLXQQVAcUF
hRSDFEQQoRQBTU1l0VwQ9xXJyg0XUlRQ7HnnfP3xzLz3/b5z7rnnfOec26rH
kDaDr/E8LxwaQGbQ8y6FeF6873mbAp63GZai+zb0vEfgYThLThV8iP4A3oPF
5AzHW0XbNLWBZTAd7zBeProQiuArvGy8JZABY2kbjbcDPRldQM4KiMXbhlcG
eyCaWBL+XJhAbIP6QA9EL0CPJj4IPRiGwhD40vqNIpaIrkD/CcdgCl4MHEAf
goMwjZwE+pwN8yEf7we8JeS14zs7QHuoxrs+lDb1PK8Tzx2hhvxw37X5jvgw
+B6m453Em4OeC0lwBN6kzRvQGjJ8l1dJ3mk4BeHkVNPnJ8T7wX7e5fPOw/jl
+hZ4BT+ddtPgOG3m4aXAzxBF20nQS8/EZqETybuBNo/DE7CC2CS8LTbPmu8o
vAl4RegSKIaJQfeOE+gLUA2T8GbjeVp/dJbmCWZo3aG/rcso363XOvR62Kj+
8GYqF+KtRmLxMmmXAbmw39ajDL0NKuBB3rUUr7d900itK/6PVmtaW61xufXX
x+pE7+uL7mdjrkc/DSEEfgm6elPdxdk86ts0l0fRU/GSbV5noWvwzsF51S9e
J4hFj7Pv1vePVp94K2EtRNBuLP4YaE8sWjWCl4oOMoYw7Su8GXg55GTDmoCr
G9XBQkiDdNufM612NUdT8KZCHIzDy8XLg+XwDV4M7EPvhd22j7S+hejxxCIg
UrWqGtTeV//QBS+VMSyASMtXHXymedC+0BoSiw+4/bsLbydst/3Wwb5zFPGp
mlt9P97v/8+Hxgv56MF8f6Mwz2tGfTcPdeuZaPOo/EXoneiPyMsi/xzP5+EA
3jN4adpjPFcG3Bl2lTZ1cNHm6mu8rehSyLQzZz9eG9p+Co/BAt/NwTTiiyEL
upKzlz73QAqxe8nbZXVQS/wKXNb48MbgpaMHBN0ZpbNqA5RAKQRou1I1Cq+h
X4WXbf+uwWuGbgpNYI7v8rS/F6FP0/5MwJ0br+OdQNfCZdvTN+I1hptgvvZd
0NWn6vSM1VUS3Eb8dmgJRdpD9k1b0aU6b827D+8BuN++V2fEZvqpgn91Tmu9
tSYwj9gd5BXjTdTZDN00B9q/Vh+qk854OTqj0N0tPtx3Z22C3TW6c3bDrTY+
jVl6HXo9FKoe4Ba8FtAc5pKzNui+XXNws3n78J5CPwmP2vrqHG+L3k1sj9YW
NsHdeMn6RvSWoDu7khlfCqTa3fKTfWeJzhTYCON15kNHOwOGkbOV5y3wh/V7
AP03+i/4x9Yvw/prhb4L7rT5S/BdnSxD58JyqISTcAret7u2se4B7oMBPPeH
XN/dPQV25qywe2sh3vM2B5qLQ3i12sPortAZslU/9HeI/rrx/Dl4PF8HDaFJ
qNufAfZnJrlvo9+Fd1SHQbcPtR8bkdfH/g+0D7UfLwTcfOu+rLLxn8W7AnVw
GMrhFLxl/ek/Yg3jXw2/6Yzy3XsVP0rsGByHkTACRgXdf4fy8tF5UGDnQqrv
/l80rvqMvwGEQFPGWsH3DsIfCHm+W6+Wtj/usXrQ+fIc+ll42vqbDw+h43Q3
hLj7aDXjXwXFAXcf6k5Rnu6rMvR22GHr8QLeS/AiHMQLYyzljKU3z710J4W6
c3yZ/SPpX+lb8uox7p7Ev4Duegc5Lcg9QtuPeR6q+9x369sFnYO+lnh9uIR3
EWospjWPZKwR0M7O8xj0VXQdeLyrh70jGn8yzAm4862tjUXxX31XI6qVODvn
e+ruJG8Esf8AmvSeJg==
            "]], 
           
           Polygon[{{4286, 4285, 3226, 1803, 1813, 
            3228}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0uA1EYgOFvpq2ZqdqwrI2kNgQ7liyVlrY7WxfQxl/8/1wCCTciXIUb
YVWJPZ4hmXfeNzlzvpwzc/ujwTCJiD18iHW+TyMesKmfuc+NPGISPV3nArs6
5ww7usZVdHWFU3R0kpcfRmzTTxaxxd/c5jfzN/iVX7Cmn/gRy/qIDzGv+9zD
rF4p1zGjp7iBuv5yh/I+B+an5X6u8DGfoKpP+Qw1fc4XmNCXfAVPXHvdZH/H
jlu+Q6ELQ6d5gRfR1B3uoqWHPMKSHjvIJ1b1e/L/f38B1Wsfog==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MkuA1AUgOGjNt00iKmlFl6DhHdoqZoS09KwYlkJC5a61OqkplfwIqw0
8RQSNr6bLv78f25uzj25iwdnpdORiNjEZybijmujEZe4111+5LdsxCt6+oWf
0dVP3EdH99IZ2rqTjJZu8UNCN7nJDW7wu/l17qd3cKuv+SrtoPd5Dxd6lVdw
ohe4iCP9Z+9fbOtvLnHO/DKP8RqP8wTW9SRPoaKneQYbepbzqOoCz2WH/zLP
RWzpH/MPOe/tAo71Ei/jXO/wLmr6y90BbvRHZvi//9jcK/I=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Mkug1EcxuG/VIxXYUfCVo0x1IqExK5ba+ONCNfQUtWKoS02rFoWJLVk
SSIx1dQb8CQWvzzv4ss5J1/P0triaktEpFVLRDxyuTViRW/2Jpuc6YxI6dee
5pR+7ElO6Nse55i+7FGO6NMe5pAadpIfHOQ7c85/4ja39GBvcF139gLndW0P
sF+Xdje7VLFfvftFRbvODPMdEVkWuMMiD7RrH/JIOfuYJ9qzSywrb1d4qn37
jOcq2M/OL7PN3e26sHvZpyt7lnOq2ze+vdW9XU38/98/eTE3Qw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0EsuA1AYQOFf0kpMmCE60SFDJkSLqgbxLhOaVGIBbEBYRTfCiKSbUIq0
HototfVIfI3ByTk3N/nvI316XjwbiIgj3CQiZiyOkxElLOgLXuWPoYh35PUb
v2JFN7mBnH7hZyzrJ65jST/yAxZ1jbN8zxmumD/LV3yJaX3CZaR1ljMY1yme
wIjuuWsXg/2zuI5fb6hyiwvmt3mNP3mdN9DRm7yFrt7mHfT0Lu/hS+9zEd/6
gA/xo2vmJ53Z4jaG9ag7jfXRczyPSX1r/w5T+jrx/79/g6cwpg==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Esuw1EUgPHTxF/ULpCwEaWtx8CAGBGDRid9oKJFJAy9HwtgRGIVklpI
1aP1XoJfY/Dl+25u7snJHVopz5VSEbGImyRi32G8PyKDQ13gK94djNjBpd7m
Bi50nbdwrje5hjO9wes41WtcxYmu8DGX+Yj3zD/gIq+ioXOcRVWP8SiKOs0D
WNZvdn3Fgn7kJmb1PWe4lY6Y4DZP8jO/INt7yx3kdJffkdcf/Ikp/cXfmNY/
/IsZ/WD+PD9xG0u6z05Jb389zCOo6Fv3d6jr6+T/f/8AU3sxzw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DsvQ3Ecx+GfpU3QKuJSmzdAwhuRmqw2S72DBlG3MlRSd0YGiRrZGDWV
uIzul5mEN+A5MXzyfM8Z/vmfMzg5XSi2RMSEKqmIOw9D6YhhPdhj/ORAW0Re
H3Y/+/Ru97JHb3Y3u/RqdzKnF7uDWT3bGT6xnY+ccv49x1lQwx7liC6Tc5jT
uf3rfj86tW95oyO7zhMd2DXWWGqN2OAMNznLOW3Z8yxr217gonbsJS5r115h
RXv2Kte0bx87/5BNXqtuf/FbZ8l3uWtGF3bVu3VdJeel/v/vH3+LMrI=
          "]]}, {
         Line[{2, 487, 11, 500, 501, 20, 526, 527, 29, 560, 561, 38, 594, 595,
           47, 628, 629, 56, 662, 663, 65, 694, 74}], 
         Line[{1905, 485, 1922, 3268, 2845, 3269, 1940, 3291, 2853, 3290, 
          1958, 3317, 2861, 3318, 1975, 3343, 2870, 3342, 1990, 3366, 2879, 
          3367, 2007, 3396, 2890, 3395, 2026, 3421, 2024, 2046}], 
         Line[{1907, 486, 1923, 504, 3271, 1941, 3294, 2854, 3295, 1959, 3321,
           2864, 3320, 1976, 3345, 2873, 3346, 1991, 3371, 2882, 3370, 2008, 
          3398, 2893, 3399, 2027, 3423, 2028, 2047}], 
         Line[{1909, 2843, 3264, 1925, 2848, 3274, 3275, 1943, 3302, 2856, 
          3300, 1961, 3328, 2866, 3326, 1978, 608, 3351, 1993, 3376, 2885, 
          3379, 2010, 3406, 2896, 3404, 2030, 3429, 2034, 2049}], 
         Line[{1912, 2844, 3266, 1928, 2850, 3284, 3286, 1946, 3313, 2859, 
          3311, 1964, 3334, 2868, 3339, 1980, 2877, 3360, 3362, 1996, 3391, 
          2888, 3386, 2012, 3413, 2898, 3418, 2032, 3435, 2040, 2051}], 
         Line[{1914, 1921, 3270, 1930, 1939, 3292, 3293, 1949, 3288, 2862, 
          3319, 1967, 3315, 2871, 3344, 1982, 3341, 2881, 3369, 1998, 3364, 
          2891, 3397, 2015, 3422, 2900, 3394, 2036, 3420, 2907, 2053}], 
         Line[{1916, 1926, 3273, 1933, 3299, 2855, 3298, 1952, 3325, 2865, 
          3324, 1969, 3348, 2874, 3350, 1985, 3375, 2883, 3374, 2001, 3401, 
          2894, 3403, 2018, 3425, 2901, 3427, 2038, 3440, 2909, 2056}], 
         Line[{1918, 1931, 3278, 1935, 1950, 3305, 3307, 1954, 578, 3331, 
          1971, 3356, 2876, 3355, 1987, 1999, 3381, 3383, 2003, 3411, 2897, 
          3410, 2021, 3431, 2903, 3433, 2042, 3442, 2910, 2058}], 
         Line[{1920, 3261, 2852, 1938, 1955, 3279, 3281, 1957, 3308, 2869, 
          3337, 1974, 620, 3332, 1989, 3357, 2889, 3389, 2006, 688, 3390, 
          2023, 3417, 2905, 3438, 2045, 3444, 2912, 2060}], 
         Line[{2048, 2033, 3428, 2029, 2013, 3407, 3405, 2009, 3378, 3377, 
          2884, 1992, 609, 3352, 1977, 1965, 3329, 3327, 1960, 1947, 3303, 
          3301, 1942, 511, 3276, 1924, 1906, 3263, 1908}], 
         Line[{2050, 2039, 3434, 2031, 2019, 3414, 3412, 2011, 3385, 3384, 
          2887, 1995, 3361, 2878, 3358, 1979, 3338, 2867, 3333, 1963, 3310, 
          3309, 2858, 1945, 3285, 2851, 3282, 1927, 1910, 3265, 1911}], 
         Line[{2052, 2906, 3419, 2035, 3393, 3392, 2025, 2014, 2892, 3365, 
          3363, 1997, 3368, 2880, 3340, 1981, 2872, 3316, 3314, 1966, 2863, 
          3289, 3287, 1948, 529, 3267, 1929, 2846, 3262, 1913}], 
         Line[{2055, 2908, 3439, 2037, 2902, 3426, 3424, 2017, 2895, 3402, 
          3400, 2000, 3373, 3372, 1994, 1984, 2875, 3349, 3347, 1968, 3323, 
          3322, 1962, 1951, 3297, 3296, 1944, 1932, 2847, 3272, 1915}], 
         Line[{2057, 3441, 2054, 2041, 2904, 3432, 3430, 2020, 3409, 3408, 
          2016, 2002, 3382, 2886, 3380, 1986, 3354, 3353, 1983, 1970, 579, 
          3330, 1953, 3306, 2857, 3304, 1934, 2849, 3277, 1917}], 
         Line[{2059, 2911, 3443, 2044, 3437, 3436, 2043, 2022, 2899, 3416, 
          3415, 2005, 3388, 3387, 2004, 1988, 621, 3359, 1973, 3336, 3335, 
          1972, 1956, 3280, 2860, 3312, 1937, 3283, 1936, 1919}], 
         Line[{83, 725, 92, 738, 739, 101, 764, 765, 110, 798, 799, 119, 832, 
          833, 128, 866, 867, 137, 900, 901, 146, 932, 155}], 
         Line[{2061, 723, 2078, 3452, 2915, 3453, 2096, 3475, 2923, 3474, 
          2114, 3501, 2931, 3502, 2131, 3527, 2940, 3526, 2146, 3550, 2949, 
          3551, 2163, 3580, 2960, 3579, 2182, 3605, 2180, 2202}], 
         Line[{2063, 724, 2079, 742, 3455, 2097, 3478, 2924, 3479, 2115, 3505,
           2934, 3504, 2132, 3529, 2943, 3530, 2147, 3555, 2952, 3554, 2164, 
          3582, 2963, 3583, 2183, 3607, 2184, 2203}], 
         Line[{2065, 2913, 3448, 2081, 2918, 3458, 3459, 2099, 3486, 2926, 
          3484, 2117, 3512, 2936, 3510, 2134, 846, 3535, 2149, 3560, 2955, 
          3563, 2166, 3590, 2966, 3588, 2186, 3613, 2190, 2205}], 
         Line[{2068, 2914, 3450, 2084, 2920, 3468, 3470, 2102, 3497, 2929, 
          3495, 2120, 3518, 2938, 3523, 2136, 2947, 3544, 3546, 2152, 3575, 
          2958, 3570, 2168, 3597, 2968, 3602, 2188, 3619, 2196, 2207}], 
         Line[{2070, 2077, 3454, 2086, 2095, 3476, 3477, 2105, 3472, 2932, 
          3503, 2123, 3499, 2941, 3528, 2138, 3525, 2951, 3553, 2154, 3548, 
          2961, 3581, 2171, 3606, 2970, 3578, 2192, 3604, 2977, 2209}], 
         Line[{2072, 2082, 3457, 2089, 3483, 2925, 3482, 2108, 3509, 2935, 
          3508, 2125, 3532, 2944, 3534, 2141, 3559, 2953, 3558, 2157, 3585, 
          2964, 3587, 2174, 3609, 2971, 3611, 2194, 3624, 2979, 2212}], 
         Line[{2074, 2087, 3462, 2091, 2106, 3489, 3491, 2110, 816, 3515, 
          2127, 3540, 2946, 3539, 2143, 2155, 3565, 3567, 2159, 3595, 2967, 
          3594, 2177, 3615, 2973, 3617, 2198, 3626, 2980, 2214}], 
         Line[{2076, 3445, 2922, 2094, 2111, 3463, 3465, 2113, 3492, 2939, 
          3521, 2130, 858, 3516, 2145, 3541, 2959, 3573, 2162, 926, 3574, 
          2179, 3601, 2975, 3622, 2201, 3628, 2982, 2216}], 
         Line[{2204, 2189, 3612, 2185, 2169, 3591, 3589, 2165, 3562, 3561, 
          2954, 2148, 847, 3536, 2133, 2121, 3513, 3511, 2116, 2103, 3487, 
          3485, 2098, 749, 3460, 2080, 2062, 3447, 2064}], 
         Line[{2206, 2195, 3618, 2187, 2175, 3598, 3596, 2167, 3569, 3568, 
          2957, 2151, 3545, 2948, 3542, 2135, 3522, 2937, 3517, 2119, 3494, 
          3493, 2928, 2101, 3469, 2921, 3466, 2083, 2066, 3449, 2067}], 
         Line[{2208, 2976, 3603, 2191, 3577, 3576, 2181, 2170, 2962, 3549, 
          3547, 2153, 3552, 2950, 3524, 2137, 2942, 3500, 3498, 2122, 2933, 
          3473, 3471, 2104, 767, 3451, 2085, 2916, 3446, 2069}], 
         Line[{2211, 2978, 3623, 2193, 2972, 3610, 3608, 2173, 2965, 3586, 
          3584, 2156, 3557, 3556, 2150, 2140, 2945, 3533, 3531, 2124, 3507, 
          3506, 2118, 2107, 3481, 3480, 2100, 2088, 2917, 3456, 2071}], 
         Line[{2213, 3625, 2210, 2197, 2974, 3616, 3614, 2176, 3593, 3592, 
          2172, 2158, 3566, 2956, 3564, 2142, 3538, 3537, 2139, 2126, 817, 
          3514, 2109, 3490, 2927, 3488, 2090, 2919, 3461, 2073}], 
         Line[{2215, 2981, 3627, 2200, 3621, 3620, 2199, 2178, 2969, 3600, 
          3599, 2161, 3572, 3571, 2160, 2144, 859, 3543, 2129, 3520, 3519, 
          2128, 2112, 3464, 2930, 3496, 2093, 3467, 2092, 2075}], 
         Line[{164, 963, 173, 976, 977, 182, 1002, 1003, 191, 1036, 1037, 200,
           1070, 1071, 209, 1104, 1105, 218, 1138, 1139, 227, 1170, 236}], 
         Line[{2217, 961, 2234, 3636, 2985, 3637, 2252, 3659, 2993, 3658, 
          2270, 3685, 3001, 3686, 2287, 3711, 3010, 3710, 2302, 3734, 3019, 
          3735, 2319, 3764, 3030, 3763, 2338, 3789, 2336, 2358}], 
         Line[{2219, 962, 2235, 980, 3639, 2253, 3662, 2994, 3663, 2271, 3689,
           3004, 3688, 2288, 3713, 3013, 3714, 2303, 3739, 3022, 3738, 2320, 
          3766, 3033, 3767, 2339, 3791, 2340, 2359}], 
         Line[{2221, 2983, 3632, 2237, 2988, 3642, 3643, 2255, 3670, 2996, 
          3668, 2273, 3696, 3006, 3694, 2290, 1084, 3719, 2305, 3744, 3025, 
          3747, 2322, 3774, 3036, 3772, 2342, 3797, 2346, 2361}], 
         Line[{2224, 2984, 3634, 2240, 2990, 3652, 3654, 2258, 3681, 2999, 
          3679, 2276, 3702, 3008, 3707, 2292, 3017, 3728, 3730, 2308, 3759, 
          3028, 3754, 2324, 3781, 3038, 3786, 2344, 3803, 2352, 2363}], 
         Line[{2226, 2233, 3638, 2242, 2251, 3660, 3661, 2261, 3656, 3002, 
          3687, 2279, 3683, 3011, 3712, 2294, 3709, 3021, 3737, 2310, 3732, 
          3031, 3765, 2327, 3790, 3040, 3762, 2348, 3788, 3047, 2365}], 
         Line[{2228, 2238, 3641, 2245, 3667, 2995, 3666, 2264, 3693, 3005, 
          3692, 2281, 3716, 3014, 3718, 2297, 3743, 3023, 3742, 2313, 3769, 
          3034, 3771, 2330, 3793, 3041, 3795, 2350, 3808, 3049, 2368}], 
         Line[{2230, 2243, 3646, 2247, 2262, 3673, 3675, 2266, 1054, 3699, 
          2283, 3724, 3016, 3723, 2299, 2311, 3749, 3751, 2315, 3779, 3037, 
          3778, 2333, 3799, 3043, 3801, 2354, 3810, 3050, 2370}], 
         Line[{2232, 3629, 2992, 2250, 2267, 3647, 3649, 2269, 3676, 3009, 
          3705, 2286, 1096, 3700, 2301, 3725, 3029, 3757, 2318, 1164, 3758, 
          2335, 3785, 3045, 3806, 2357, 3812, 3052, 2372}], 
         Line[{2360, 2345, 3796, 2341, 2325, 3775, 3773, 2321, 3746, 3745, 
          3024, 2304, 1085, 3720, 2289, 2277, 3697, 3695, 2272, 2259, 3671, 
          3669, 2254, 987, 3644, 2236, 2218, 3631, 2220}], 
         Line[{2362, 2351, 3802, 2343, 2331, 3782, 3780, 2323, 3753, 3752, 
          3027, 2307, 3729, 3018, 3726, 2291, 3706, 3007, 3701, 2275, 3678, 
          3677, 2998, 2257, 3653, 2991, 3650, 2239, 2222, 3633, 2223}], 
         Line[{2364, 3046, 3787, 2347, 3761, 3760, 2337, 2326, 3032, 3733, 
          3731, 2309, 3736, 3020, 3708, 2293, 3012, 3684, 3682, 2278, 3003, 
          3657, 3655, 2260, 1005, 3635, 2241, 2986, 3630, 2225}], 
         Line[{2367, 3048, 3807, 2349, 3042, 3794, 3792, 2329, 3035, 3770, 
          3768, 2312, 3741, 3740, 2306, 2296, 3015, 3717, 3715, 2280, 3691, 
          3690, 2274, 2263, 3665, 3664, 2256, 2244, 2987, 3640, 2227}], 
         Line[{2369, 3809, 2366, 2353, 3044, 3800, 3798, 2332, 3777, 3776, 
          2328, 2314, 3750, 3026, 3748, 2298, 3722, 3721, 2295, 2282, 1055, 
          3698, 2265, 3674, 2997, 3672, 2246, 2989, 3645, 2229}], 
         Line[{2371, 3051, 3811, 2356, 3805, 3804, 2355, 2334, 3039, 3784, 
          3783, 2317, 3756, 3755, 2316, 2300, 1097, 3727, 2285, 3704, 3703, 
          2284, 2268, 3648, 3000, 3680, 2249, 3651, 2248, 2231}], 
         Line[{245, 1201, 254, 1214, 1215, 263, 1240, 1241, 272, 1274, 1275, 
          281, 1308, 1309, 290, 1342, 1343, 299, 1376, 1377, 308, 1408, 317}], 
         Line[{2373, 1199, 2390, 3820, 3055, 3821, 2408, 3843, 3063, 3842, 
          2426, 3869, 3071, 3870, 2443, 3895, 3080, 3894, 2458, 3918, 3089, 
          3919, 2475, 3948, 3100, 3947, 2494, 3973, 2492, 2514}], 
         Line[{2375, 1200, 2391, 1218, 3823, 2409, 3846, 3064, 3847, 2427, 
          3873, 3074, 3872, 2444, 3897, 3083, 3898, 2459, 3923, 3092, 3922, 
          2476, 3950, 3103, 3951, 2495, 3975, 2496, 2515}], 
         Line[{2377, 3053, 3816, 2393, 3058, 3826, 3827, 2411, 3854, 3066, 
          3852, 2429, 3880, 3076, 3878, 2446, 1322, 3903, 2461, 3928, 3095, 
          3931, 2478, 3958, 3106, 3956, 2498, 3981, 2502, 2517}], 
         Line[{2380, 3054, 3818, 2396, 3060, 3836, 3838, 2414, 3865, 3069, 
          3863, 2432, 3886, 3078, 3891, 2448, 3087, 3912, 3914, 2464, 3943, 
          3098, 3938, 2480, 3965, 3108, 3970, 2500, 3987, 2508, 2519}], 
         Line[{2382, 2389, 3822, 2398, 2407, 3844, 3845, 2417, 3840, 3072, 
          3871, 2435, 3867, 3081, 3896, 2450, 3893, 3091, 3921, 2466, 3916, 
          3101, 3949, 2483, 3974, 3110, 3946, 2504, 3972, 3117, 2521}], 
         Line[{2384, 2394, 3825, 2401, 3851, 3065, 3850, 2420, 3877, 3075, 
          3876, 2437, 3900, 3084, 3902, 2453, 3927, 3093, 3926, 2469, 3953, 
          3104, 3955, 2486, 3977, 3111, 3979, 2506, 3992, 3119, 2524}], 
         Line[{2386, 2399, 3830, 2403, 2418, 3857, 3859, 2422, 1292, 3883, 
          2439, 3908, 3086, 3907, 2455, 2467, 3933, 3935, 2471, 3963, 3107, 
          3962, 2489, 3983, 3113, 3985, 2510, 3994, 3120, 2526}], 
         Line[{2388, 3813, 3062, 2406, 2423, 3831, 3833, 2425, 3860, 3079, 
          3889, 2442, 1334, 3884, 2457, 3909, 3099, 3941, 2474, 1402, 3942, 
          2491, 3969, 3115, 3990, 2513, 3996, 3122, 2528}], 
         Line[{2516, 2501, 3980, 2497, 2481, 3959, 3957, 2477, 3930, 3929, 
          3094, 2460, 1323, 3904, 2445, 2433, 3881, 3879, 2428, 2415, 3855, 
          3853, 2410, 1225, 3828, 2392, 2374, 3815, 2376}], 
         Line[{2518, 2507, 3986, 2499, 2487, 3966, 3964, 2479, 3937, 3936, 
          3097, 2463, 3913, 3088, 3910, 2447, 3890, 3077, 3885, 2431, 3862, 
          3861, 3068, 2413, 3837, 3061, 3834, 2395, 2378, 3817, 2379}], 
         Line[{2520, 3116, 3971, 2503, 3945, 3944, 2493, 2482, 3102, 3917, 
          3915, 2465, 3920, 3090, 3892, 2449, 3082, 3868, 3866, 2434, 3073, 
          3841, 3839, 2416, 1243, 3819, 2397, 3056, 3814, 2381}], 
         Line[{2523, 3118, 3991, 2505, 3112, 3978, 3976, 2485, 3105, 3954, 
          3952, 2468, 3925, 3924, 2462, 2452, 3085, 3901, 3899, 2436, 3875, 
          3874, 2430, 2419, 3849, 3848, 2412, 2400, 3057, 3824, 2383}], 
         Line[{2525, 3993, 2522, 2509, 3114, 3984, 3982, 2488, 3961, 3960, 
          2484, 2470, 3934, 3096, 3932, 2454, 3906, 3905, 2451, 2438, 1293, 
          3882, 2421, 3858, 3067, 3856, 2402, 3059, 3829, 2385}], 
         Line[{2527, 3121, 3995, 2512, 3989, 3988, 2511, 2490, 3109, 3968, 
          3967, 2473, 3940, 3939, 2472, 2456, 1335, 3911, 2441, 3888, 3887, 
          2440, 2424, 3832, 3070, 3864, 2405, 3835, 2404, 2387}], 
         Line[{326, 1439, 335, 1452, 1453, 344, 1478, 1479, 353, 1512, 1513, 
          362, 1546, 1547, 370, 1576, 1577, 379, 1610, 1611, 388, 1642, 397}], 
         Line[{2529, 1437, 2546, 4004, 3125, 4005, 2564, 4027, 3133, 4026, 
          2582, 4051, 3141, 4052, 2599, 4079, 3152, 4078, 2615, 4077, 3158, 
          4100, 2632, 4132, 3169, 4131, 2651, 4157, 2649, 2671}], 
         Line[{2531, 1438, 2547, 1456, 4007, 2565, 4030, 3134, 4031, 2583, 
          4055, 3144, 4054, 2600, 4083, 3155, 4084, 2616, 4107, 3161, 4106, 
          2633, 4134, 3172, 4135, 2652, 4159, 2653, 2672}], 
         Line[{2533, 3123, 4000, 2549, 3128, 4010, 4011, 2567, 4038, 3136, 
          4036, 2585, 4062, 3146, 4060, 2602, 1560, 4089, 2618, 4112, 3164, 
          4115, 2635, 4142, 3175, 4140, 2655, 4165, 2659, 2674}], 
         Line[{2536, 3124, 4002, 2552, 3130, 4020, 4022, 2570, 4049, 3139, 
          4047, 2588, 4068, 3148, 4074, 2605, 4101, 3157, 4096, 2621, 4127, 
          3167, 4122, 2637, 4149, 3177, 4154, 2657, 4171, 2665, 2676}], 
         Line[{2538, 2545, 4006, 2554, 2563, 4028, 4029, 2573, 4024, 3142, 
          4053, 2591, 4050, 3150, 4076, 2607, 4103, 3160, 4105, 2623, 4098, 
          3170, 4133, 2640, 4158, 3179, 4130, 2661, 4156, 3186, 2678}], 
         Line[{2540, 2550, 4009, 2557, 4035, 3135, 4034, 2576, 4059, 3145, 
          4058, 2593, 4081, 3153, 4085, 2609, 4111, 3162, 4110, 2626, 4137, 
          3173, 4139, 2643, 4161, 3180, 4163, 2663, 4176, 3188, 2681}], 
         Line[{2542, 2555, 4014, 2559, 2574, 4041, 4043, 2578, 1530, 4065, 
          2595, 4091, 3156, 4088, 2611, 2624, 4117, 4119, 2628, 4147, 3176, 
          4146, 2646, 4167, 3182, 4169, 2667, 4178, 3189, 2683}], 
         Line[{2544, 3997, 3132, 2562, 2579, 4015, 4017, 2581, 4044, 3151, 
          4071, 2598, 1566, 4066, 2614, 4093, 3168, 4125, 2631, 1636, 4126, 
          2648, 4153, 3184, 4174, 2670, 4180, 3191, 2685}], 
         Line[{2673, 2658, 4164, 2654, 2638, 4143, 4141, 2634, 4114, 4113, 
          3163, 2617, 1561, 4090, 2601, 2589, 4063, 4061, 2584, 2571, 4039, 
          4037, 2566, 1463, 4012, 2548, 2530, 3999, 2532}], 
         Line[{2675, 2664, 4170, 2656, 2644, 4150, 4148, 2636, 4121, 4120, 
          3166, 2620, 4095, 4094, 2612, 2604, 4073, 3147, 4067, 2587, 4046, 
          4045, 3138, 2569, 4021, 3131, 4018, 2551, 2534, 4001, 2535}], 
         Line[{2677, 3185, 4155, 2660, 4129, 4128, 2650, 2639, 3171, 4099, 
          4097, 2622, 4104, 3159, 4102, 2606, 4075, 4072, 3149, 2590, 3143, 
          4025, 4023, 2572, 1481, 4003, 2553, 3126, 3998, 2537}], 
         Line[{2680, 3187, 4175, 2662, 3181, 4162, 4160, 2642, 3174, 4138, 
          4136, 2625, 4109, 4108, 2619, 2608, 3154, 4082, 4080, 2592, 4057, 
          4056, 2586, 2575, 4033, 4032, 2568, 2556, 3127, 4008, 2539}], 
         Line[{2682, 4177, 2679, 2666, 3183, 4168, 4166, 2645, 4145, 4144, 
          2641, 2627, 4118, 3165, 4116, 2610, 4087, 4086, 2603, 2594, 1531, 
          4064, 2577, 4042, 3137, 4040, 2558, 3129, 4013, 2541}], 
         Line[{2684, 3190, 4179, 2669, 4173, 4172, 2668, 2647, 3178, 4152, 
          4151, 2630, 4124, 4123, 2629, 2613, 1567, 4092, 2597, 4070, 4069, 
          2596, 2580, 4016, 3140, 4048, 2561, 4019, 2560, 2543}], 
         Line[{406, 1673, 415, 1686, 1687, 424, 1712, 1713, 433, 1746, 1747, 
          442, 1780, 1781, 450, 1810, 1811, 459, 1844, 1845, 468, 1876, 477}], 
         Line[{2686, 1671, 2703, 4188, 3194, 4189, 2721, 4211, 3202, 4210, 
          2739, 4235, 3210, 4236, 2756, 4263, 3221, 4262, 2772, 4261, 3227, 
          4284, 2789, 4316, 3238, 4315, 2808, 4341, 2806, 2828}], 
         Line[{2688, 1672, 2704, 1690, 4191, 2722, 4214, 3203, 4215, 2740, 
          4239, 3213, 4238, 2757, 4267, 3224, 4268, 2773, 4291, 3230, 4290, 
          2790, 4318, 3241, 4319, 2809, 4343, 2810, 2829}], 
         Line[{2690, 3192, 4184, 2706, 3197, 4194, 4195, 2724, 4222, 3205, 
          4220, 2742, 4246, 3215, 4244, 2759, 1794, 4273, 2775, 4296, 3233, 
          4299, 2792, 4326, 3244, 4324, 2812, 4349, 2816, 2831}], 
         Line[{2693, 3193, 4186, 2709, 3199, 4204, 4206, 2727, 4233, 3208, 
          4231, 2745, 4252, 3217, 4258, 2762, 4285, 3226, 4280, 2778, 4311, 
          3236, 4306, 2794, 4333, 3246, 4338, 2814, 4355, 2822, 2833}], 
         Line[{2695, 2702, 4190, 2711, 2720, 4212, 4213, 2730, 4208, 3211, 
          4237, 2748, 4234, 3219, 4260, 2764, 4287, 3229, 4289, 2780, 4282, 
          3239, 4317, 2797, 4342, 3248, 4314, 2818, 4340, 3255, 2835}], 
         Line[{2697, 2707, 4193, 2714, 4219, 3204, 4218, 2733, 4243, 3214, 
          4242, 2750, 4265, 3222, 4269, 2766, 4295, 3231, 4294, 2783, 4321, 
          3242, 4323, 2800, 4345, 3249, 4347, 2820, 4360, 3257, 2838}], 
         Line[{2699, 2712, 4198, 2716, 2731, 4225, 4227, 2735, 1764, 4249, 
          2752, 4275, 3225, 4272, 2768, 2781, 4301, 4303, 2785, 4331, 3245, 
          4330, 2803, 4351, 3251, 4353, 2824, 4362, 3258, 2840}], 
         Line[{2701, 4181, 3201, 2719, 2736, 4199, 4201, 2738, 4228, 3220, 
          4255, 2755, 1800, 4250, 2771, 4277, 3237, 4309, 2788, 1870, 4310, 
          2805, 4337, 3253, 4358, 2827, 4364, 3260, 2842}], 
         Line[{2830, 2815, 4348, 2811, 2795, 4327, 4325, 2791, 4298, 4297, 
          3232, 2774, 1795, 4274, 2758, 2746, 4247, 4245, 2741, 2728, 4223, 
          4221, 2723, 1697, 4196, 2705, 2687, 4183, 2689}], 
         Line[{2832, 2821, 4354, 2813, 2801, 4334, 4332, 2793, 4305, 4304, 
          3235, 2777, 4279, 4278, 2769, 2761, 4257, 3216, 4251, 2744, 4230, 
          4229, 3207, 2726, 4205, 3200, 4202, 2708, 2691, 4185, 2692}], 
         Line[{2834, 3254, 4339, 2817, 4313, 4312, 2807, 2796, 3240, 4283, 
          4281, 2779, 4288, 3228, 4286, 2763, 4259, 4256, 3218, 2747, 3212, 
          4209, 4207, 2729, 1715, 4187, 2710, 3195, 4182, 2694}], 
         Line[{2837, 3256, 4359, 2819, 3250, 4346, 4344, 2799, 3243, 4322, 
          4320, 2782, 4293, 4292, 2776, 2765, 3223, 4266, 4264, 2749, 4241, 
          4240, 2743, 2732, 4217, 4216, 2725, 2713, 3196, 4192, 2696}], 
         Line[{2839, 4361, 2836, 2823, 3252, 4352, 4350, 2802, 4329, 4328, 
          2798, 2784, 4302, 3234, 4300, 2767, 4271, 4270, 2760, 2751, 1765, 
          4248, 2734, 4226, 3206, 4224, 2715, 3198, 4197, 2698}], 
         Line[{2841, 3259, 4363, 2826, 4357, 4356, 2825, 2804, 3247, 4336, 
          4335, 2787, 4308, 4307, 2786, 2770, 1801, 4276, 2754, 4254, 4253, 
          2753, 2737, 4200, 3209, 4232, 2718, 4203, 2717, 2700}]}, {
         Line[{489, 3390, 689, 3416, 683, 681, 3410, 3409, 675, 3403, 673, 
          3402, 667, 3397, 665, 3365, 653, 651, 3386, 3385, 645, 643, 3379, 
          3378, 637, 3370, 635, 629, 625, 3367, 661}], 
         Line[{496, 655, 3389, 3388, 649, 3383, 3382, 647, 641, 639, 3374, 
          3373, 633, 3369, 3368, 631, 619, 3362, 3361, 617, 611, 3351, 609, 
          603, 601, 3346, 595, 3342, 591, 627}], 
         Line[{499, 485, 487, 486, 490, 3263, 491, 3264, 492, 3265, 493, 3266,
           494, 3262, 502, 3270, 503, 3272, 508, 3273, 509, 3277, 514, 3278, 
          515, 3283, 520, 3261, 521}], 
         Line[{18, 1938, 1937, 17, 1935, 1934, 16, 1933, 1932, 15, 1930, 1929,
           14, 1928, 1927, 13, 1925, 1924, 12, 1923, 11, 1922, 10}], 
         Line[{524, 497, 3268, 500, 504, 506, 3276, 510, 3274, 512, 3282, 516,
           3284, 518, 3267, 528, 3292, 530, 3296, 536, 3299, 538, 3304, 544, 
          3305, 546, 3312, 552, 3279, 554}], 
         Line[{555, 3281, 3280, 553, 547, 3307, 3306, 545, 539, 537, 3298, 
          3297, 531, 3293, 529, 519, 3286, 3285, 517, 513, 3275, 511, 507, 
          3271, 505, 501, 498, 3269, 525}], 
         Line[{558, 3291, 522, 526, 532, 3294, 534, 3301, 3302, 540, 542, 
          3309, 548, 3313, 550, 3287, 3288, 562, 564, 3322, 570, 3325, 572, 
          3330, 578, 580, 3335, 586, 3308, 588}], 
         Line[{589, 587, 3337, 3336, 581, 3331, 579, 573, 571, 3324, 3323, 
          565, 3319, 563, 3289, 551, 549, 3311, 3310, 543, 3300, 541, 3303, 
          535, 533, 3295, 527, 3290, 523, 559}], 
         Line[{592, 556, 3317, 560, 3321, 566, 568, 3327, 3328, 574, 576, 
          3333, 3334, 582, 584, 3314, 3315, 596, 598, 3347, 3348, 604, 606, 
          3353, 612, 3356, 614, 3359, 620, 622}], 
         Line[{623, 3332, 621, 615, 613, 3355, 3354, 607, 3350, 605, 3349, 
          599, 3344, 597, 3316, 585, 3339, 3338, 583, 577, 3326, 575, 3329, 
          569, 3320, 567, 561, 557, 3318, 593}], 
         Line[{626, 3343, 590, 594, 600, 3345, 602, 3352, 608, 610, 3358, 616,
           3360, 618, 3340, 3341, 630, 632, 3372, 638, 3375, 640, 3380, 646, 
          3381, 648, 3387, 654, 3357, 495}], 
         Line[{657, 714, 3438, 3437, 710, 3433, 708, 3432, 704, 3427, 702, 
          3426, 698, 696, 3394, 3393, 687, 3418, 685, 3414, 679, 3404, 677, 
          3407, 671, 669, 3399, 663, 3395, 659, 693}], 
         Line[{660, 624, 3366, 628, 3371, 634, 636, 3377, 642, 3376, 644, 
          3384, 650, 3391, 652, 3363, 3364, 664, 666, 3400, 3401, 672, 674, 
          3408, 680, 3411, 682, 3415, 688, 488}], 
         Line[{690, 722, 3444, 3443, 721, 3442, 720, 3441, 719, 718, 3440, 
          3439, 717, 716, 3420, 3419, 712, 711, 3435, 3434, 706, 705, 3429, 
          3428, 700, 699, 3423, 694, 3421, 691, 715}], 
         Line[{692, 3396, 658, 662, 668, 3398, 670, 3405, 3406, 676, 678, 
          3412, 3413, 684, 686, 3392, 695, 3422, 697, 3424, 3425, 701, 703, 
          3430, 3431, 707, 709, 3436, 713, 3417, 656}], 
         Line[{727, 3574, 927, 3600, 921, 919, 3594, 3593, 913, 3587, 911, 
          3586, 905, 3581, 903, 3549, 891, 889, 3570, 3569, 883, 881, 3563, 
          3562, 875, 3554, 873, 867, 863, 3551, 899}], 
         Line[{734, 893, 3573, 3572, 887, 3567, 3566, 885, 879, 877, 3558, 
          3557, 871, 3553, 3552, 869, 857, 3546, 3545, 855, 849, 3535, 847, 
          841, 839, 3530, 833, 3526, 829, 865}], 
         Line[{737, 723, 725, 724, 728, 3447, 729, 3448, 730, 3449, 731, 3450,
           732, 3446, 740, 3454, 741, 3456, 746, 3457, 747, 3461, 752, 3462, 
          753, 3467, 758, 3445, 759}], 
         Line[{99, 2094, 2093, 98, 2091, 2090, 97, 2089, 2088, 96, 2086, 2085,
           95, 2084, 2083, 94, 2081, 2080, 93, 2079, 92, 2078, 91}], 
         Line[{762, 735, 3452, 738, 742, 744, 3460, 748, 3458, 750, 3466, 754,
           3468, 756, 3451, 766, 3476, 768, 3480, 774, 3483, 776, 3488, 782, 
          3489, 784, 3496, 790, 3463, 792}], 
         Line[{793, 3465, 3464, 791, 785, 3491, 3490, 783, 777, 775, 3482, 
          3481, 769, 3477, 767, 757, 3470, 3469, 755, 751, 3459, 749, 745, 
          3455, 743, 739, 736, 3453, 763}], 
         Line[{796, 3475, 760, 764, 770, 3478, 772, 3485, 3486, 778, 780, 
          3493, 786, 3497, 788, 3471, 3472, 800, 802, 3506, 808, 3509, 810, 
          3514, 816, 818, 3519, 824, 3492, 826}], 
         Line[{827, 825, 3521, 3520, 819, 3515, 817, 811, 809, 3508, 3507, 
          803, 3503, 801, 3473, 789, 787, 3495, 3494, 781, 3484, 779, 3487, 
          773, 771, 3479, 765, 3474, 761, 797}], 
         Line[{830, 794, 3501, 798, 3505, 804, 806, 3511, 3512, 812, 814, 
          3517, 3518, 820, 822, 3498, 3499, 834, 836, 3531, 3532, 842, 844, 
          3537, 850, 3540, 852, 3543, 858, 860}], 
         Line[{861, 3516, 859, 853, 851, 3539, 3538, 845, 3534, 843, 3533, 
          837, 3528, 835, 3500, 823, 3523, 3522, 821, 815, 3510, 813, 3513, 
          807, 3504, 805, 799, 795, 3502, 831}], 
         Line[{864, 3527, 828, 832, 838, 3529, 840, 3536, 846, 848, 3542, 854,
           3544, 856, 3524, 3525, 868, 870, 3556, 876, 3559, 878, 3564, 884, 
          3565, 886, 3571, 892, 3541, 733}], 
         Line[{895, 952, 3622, 3621, 948, 3617, 946, 3616, 942, 3611, 940, 
          3610, 936, 934, 3578, 3577, 925, 3602, 923, 3598, 917, 3588, 915, 
          3591, 909, 907, 3583, 901, 3579, 897, 931}], 
         Line[{898, 862, 3550, 866, 3555, 872, 874, 3561, 880, 3560, 882, 
          3568, 888, 3575, 890, 3547, 3548, 902, 904, 3584, 3585, 910, 912, 
          3592, 918, 3595, 920, 3599, 926, 726}], 
         Line[{928, 960, 3628, 3627, 959, 3626, 958, 3625, 957, 956, 3624, 
          3623, 955, 954, 3604, 3603, 950, 949, 3619, 3618, 944, 943, 3613, 
          3612, 938, 937, 3607, 932, 3605, 929, 953}], 
         Line[{930, 3580, 896, 900, 906, 3582, 908, 3589, 3590, 914, 916, 
          3596, 3597, 922, 924, 3576, 933, 3606, 935, 3608, 3609, 939, 941, 
          3614, 3615, 945, 947, 3620, 951, 3601, 894}], 
         Line[{965, 3758, 1165, 3784, 1159, 1157, 3778, 3777, 1151, 3771, 
          1149, 3770, 1143, 3765, 1141, 3733, 1129, 1127, 3754, 3753, 1121, 
          1119, 3747, 3746, 1113, 3738, 1111, 1105, 1101, 3735, 1137}], 
         Line[{972, 1131, 3757, 3756, 1125, 3751, 3750, 1123, 1117, 1115, 
          3742, 3741, 1109, 3737, 3736, 1107, 1095, 3730, 3729, 1093, 1087, 
          3719, 1085, 1079, 1077, 3714, 1071, 3710, 1067, 1103}], 
         Line[{975, 961, 963, 962, 966, 3631, 967, 3632, 968, 3633, 969, 3634,
           970, 3630, 978, 3638, 979, 3640, 984, 3641, 985, 3645, 990, 3646, 
          991, 3651, 996, 3629, 997}], 
         Line[{180, 2250, 2249, 179, 2247, 2246, 178, 2245, 2244, 177, 2242, 
          2241, 176, 2240, 2239, 175, 2237, 2236, 174, 2235, 173, 2234, 172}], 
         Line[{1000, 973, 3636, 976, 980, 982, 3644, 986, 3642, 988, 3650, 
          992, 3652, 994, 3635, 1004, 3660, 1006, 3664, 1012, 3667, 1014, 
          3672, 1020, 3673, 1022, 3680, 1028, 3647, 1030}], 
         Line[{1031, 3649, 3648, 1029, 1023, 3675, 3674, 1021, 1015, 1013, 
          3666, 3665, 1007, 3661, 1005, 995, 3654, 3653, 993, 989, 3643, 987, 
          983, 3639, 981, 977, 974, 3637, 1001}], 
         Line[{1034, 3659, 998, 1002, 1008, 3662, 1010, 3669, 3670, 1016, 
          1018, 3677, 1024, 3681, 1026, 3655, 3656, 1038, 1040, 3690, 1046, 
          3693, 1048, 3698, 1054, 1056, 3703, 1062, 3676, 1064}], 
         Line[{1065, 1063, 3705, 3704, 1057, 3699, 1055, 1049, 1047, 3692, 
          3691, 1041, 3687, 1039, 3657, 1027, 1025, 3679, 3678, 1019, 3668, 
          1017, 3671, 1011, 1009, 3663, 1003, 3658, 999, 1035}], 
         Line[{1068, 1032, 3685, 1036, 3689, 1042, 1044, 3695, 3696, 1050, 
          1052, 3701, 3702, 1058, 1060, 3682, 3683, 1072, 1074, 3715, 3716, 
          1080, 1082, 3721, 1088, 3724, 1090, 3727, 1096, 1098}], 
         Line[{1099, 3700, 1097, 1091, 1089, 3723, 3722, 1083, 3718, 1081, 
          3717, 1075, 3712, 1073, 3684, 1061, 3707, 3706, 1059, 1053, 3694, 
          1051, 3697, 1045, 3688, 1043, 1037, 1033, 3686, 1069}], 
         Line[{1102, 3711, 1066, 1070, 1076, 3713, 1078, 3720, 1084, 1086, 
          3726, 1092, 3728, 1094, 3708, 3709, 1106, 1108, 3740, 1114, 3743, 
          1116, 3748, 1122, 3749, 1124, 3755, 1130, 3725, 971}], 
         Line[{1133, 1190, 3806, 3805, 1186, 3801, 1184, 3800, 1180, 3795, 
          1178, 3794, 1174, 1172, 3762, 3761, 1163, 3786, 1161, 3782, 1155, 
          3772, 1153, 3775, 1147, 1145, 3767, 1139, 3763, 1135, 1169}], 
         Line[{1136, 1100, 3734, 1104, 3739, 1110, 1112, 3745, 1118, 3744, 
          1120, 3752, 1126, 3759, 1128, 3731, 3732, 1140, 1142, 3768, 3769, 
          1148, 1150, 3776, 1156, 3779, 1158, 3783, 1164, 964}], 
         Line[{1166, 1198, 3812, 3811, 1197, 3810, 1196, 3809, 1195, 1194, 
          3808, 3807, 1193, 1192, 3788, 3787, 1188, 1187, 3803, 3802, 1182, 
          1181, 3797, 3796, 1176, 1175, 3791, 1170, 3789, 1167, 1191}], 
         Line[{1168, 3764, 1134, 1138, 1144, 3766, 1146, 3773, 3774, 1152, 
          1154, 3780, 3781, 1160, 1162, 3760, 1171, 3790, 1173, 3792, 3793, 
          1177, 1179, 3798, 3799, 1183, 1185, 3804, 1189, 3785, 1132}], 
         Line[{1203, 3942, 1403, 3968, 1397, 1395, 3962, 3961, 1389, 3955, 
          1387, 3954, 1381, 3949, 1379, 3917, 1367, 1365, 3938, 3937, 1359, 
          1357, 3931, 3930, 1351, 3922, 1349, 1343, 1339, 3919, 1375}], 
         Line[{1210, 1369, 3941, 3940, 1363, 3935, 3934, 1361, 1355, 1353, 
          3926, 3925, 1347, 3921, 3920, 1345, 1333, 3914, 3913, 1331, 1325, 
          3903, 1323, 1317, 1315, 3898, 1309, 3894, 1305, 1341}], 
         Line[{1213, 1199, 1201, 1200, 1204, 3815, 1205, 3816, 1206, 3817, 
          1207, 3818, 1208, 3814, 1216, 3822, 1217, 3824, 1222, 3825, 1223, 
          3829, 1228, 3830, 1229, 3835, 1234, 3813, 1235}], 
         Line[{261, 2406, 2405, 260, 2403, 2402, 259, 2401, 2400, 258, 2398, 
          2397, 257, 2396, 2395, 256, 2393, 2392, 255, 2391, 254, 2390, 253}], 
         Line[{1238, 1211, 3820, 1214, 1218, 1220, 3828, 1224, 3826, 1226, 
          3834, 1230, 3836, 1232, 3819, 1242, 3844, 1244, 3848, 1250, 3851, 
          1252, 3856, 1258, 3857, 1260, 3864, 1266, 3831, 1268}], 
         Line[{1269, 3833, 3832, 1267, 1261, 3859, 3858, 1259, 1253, 1251, 
          3850, 3849, 1245, 3845, 1243, 1233, 3838, 3837, 1231, 1227, 3827, 
          1225, 1221, 3823, 1219, 1215, 1212, 3821, 1239}], 
         Line[{1272, 3843, 1236, 1240, 1246, 3846, 1248, 3853, 3854, 1254, 
          1256, 3861, 1262, 3865, 1264, 3839, 3840, 1276, 1278, 3874, 1284, 
          3877, 1286, 3882, 1292, 1294, 3887, 1300, 3860, 1302}], 
         Line[{1303, 1301, 3889, 3888, 1295, 3883, 1293, 1287, 1285, 3876, 
          3875, 1279, 3871, 1277, 3841, 1265, 1263, 3863, 3862, 1257, 3852, 
          1255, 3855, 1249, 1247, 3847, 1241, 3842, 1237, 1273}], 
         Line[{1306, 1270, 3869, 1274, 3873, 1280, 1282, 3879, 3880, 1288, 
          1290, 3885, 3886, 1296, 1298, 3866, 3867, 1310, 1312, 3899, 3900, 
          1318, 1320, 3905, 1326, 3908, 1328, 3911, 1334, 1336}], 
         Line[{1337, 3884, 1335, 1329, 1327, 3907, 3906, 1321, 3902, 1319, 
          3901, 1313, 3896, 1311, 3868, 1299, 3891, 3890, 1297, 1291, 3878, 
          1289, 3881, 1283, 3872, 1281, 1275, 1271, 3870, 1307}], 
         Line[{1340, 3895, 1304, 1308, 1314, 3897, 1316, 3904, 1322, 1324, 
          3910, 1330, 3912, 1332, 3892, 3893, 1344, 1346, 3924, 1352, 3927, 
          1354, 3932, 1360, 3933, 1362, 3939, 1368, 3909, 1209}], 
         Line[{1371, 1428, 3990, 3989, 1424, 3985, 1422, 3984, 1418, 3979, 
          1416, 3978, 1412, 1410, 3946, 3945, 1401, 3970, 1399, 3966, 1393, 
          3956, 1391, 3959, 1385, 1383, 3951, 1377, 3947, 1373, 1407}], 
         Line[{1374, 1338, 3918, 1342, 3923, 1348, 1350, 3929, 1356, 3928, 
          1358, 3936, 1364, 3943, 1366, 3915, 3916, 1378, 1380, 3952, 3953, 
          1386, 1388, 3960, 1394, 3963, 1396, 3967, 1402, 1202}], 
         Line[{1404, 1436, 3996, 3995, 1435, 3994, 1434, 3993, 1433, 1432, 
          3992, 3991, 1431, 1430, 3972, 3971, 1426, 1425, 3987, 3986, 1420, 
          1419, 3981, 3980, 1414, 1413, 3975, 1408, 3973, 1405, 1429}], 
         Line[{1406, 3948, 1372, 1376, 1382, 3950, 1384, 3957, 3958, 1390, 
          1392, 3964, 3965, 1398, 1400, 3944, 1409, 3974, 1411, 3976, 3977, 
          1415, 1417, 3982, 3983, 1421, 1423, 3988, 1427, 3969, 1370}], 
         Line[{1441, 4126, 1637, 4152, 1631, 1629, 4146, 4145, 1623, 4139, 
          1621, 4138, 1615, 4133, 1613, 4099, 1601, 1599, 4122, 4121, 1593, 
          1591, 4115, 4114, 1585, 4106, 1583, 1577, 1573, 4100, 1609}], 
         Line[{1448, 1603, 4125, 4124, 1597, 4119, 4118, 1595, 1589, 1587, 
          4110, 4109, 1581, 4105, 4104, 1579, 1569, 4096, 4095, 1563, 4089, 
          1561, 1555, 1553, 4084, 1547, 4078, 1543, 1575}], 
         Line[{1451, 1437, 1439, 1438, 1442, 3999, 1443, 4000, 1444, 4001, 
          1445, 4002, 1446, 3998, 1454, 4006, 1455, 4008, 1460, 4009, 1461, 
          4013, 1466, 4014, 1467, 4019, 1472, 3997, 1473}], 
         Line[{342, 2562, 2561, 341, 2559, 2558, 340, 2557, 2556, 339, 2554, 
          2553, 338, 2552, 2551, 337, 2549, 2548, 336, 2547, 335, 2546, 334}], 
         Line[{1476, 1449, 4004, 1452, 1456, 1458, 4012, 1462, 4010, 1464, 
          4018, 1468, 4020, 1470, 4003, 1480, 4028, 1482, 4032, 1488, 4035, 
          1490, 4040, 1496, 4041, 1498, 4048, 1504, 4015, 1506}], 
         Line[{1507, 4017, 4016, 1505, 1499, 4043, 4042, 1497, 1491, 1489, 
          4034, 4033, 1483, 4029, 1481, 1471, 4022, 4021, 1469, 1465, 4011, 
          1463, 1459, 4007, 1457, 1453, 1450, 4005, 1477}], 
         Line[{1510, 4027, 1474, 1478, 1484, 4030, 1486, 4037, 4038, 1492, 
          1494, 4045, 1500, 4049, 1502, 4023, 4024, 1514, 1516, 4056, 1522, 
          4059, 1524, 4064, 1530, 1532, 4069, 1538, 4044, 1540}], 
         Line[{1541, 1539, 4071, 4070, 1533, 4065, 1531, 1525, 1523, 4058, 
          4057, 1517, 4053, 1515, 4025, 1503, 1501, 4047, 4046, 1495, 4036, 
          1493, 4039, 1487, 1485, 4031, 1479, 4026, 1475, 1511}], 
         Line[{1544, 1508, 4051, 1512, 4055, 1518, 1520, 4061, 4062, 1526, 
          1528, 4067, 4068, 1534, 4072, 1536, 4050, 1548, 4080, 4081, 1550, 
          1556, 4086, 1558, 4091, 1564, 4092, 1566, 1570}], 
         Line[{1571, 4066, 1567, 1565, 1559, 4088, 4087, 1557, 4085, 1551, 
          4082, 1549, 1537, 4076, 4075, 4074, 4073, 1535, 1529, 4060, 1527, 
          4063, 1521, 4054, 1519, 1513, 1509, 4052, 1545}], 
         Line[{1574, 4079, 1542, 1546, 1552, 4083, 1554, 4090, 1560, 1562, 
          4094, 1568, 4101, 4102, 4103, 1578, 1580, 4108, 1586, 4111, 1588, 
          4116, 1594, 4117, 1596, 4123, 1602, 4093, 1447}], 
         Line[{1605, 1662, 4174, 4173, 1658, 4169, 1656, 4168, 1652, 4163, 
          1650, 4162, 1646, 1644, 4130, 4129, 1635, 4154, 1633, 4150, 1627, 
          4140, 1625, 4143, 1619, 1617, 4135, 1611, 4131, 1607, 1641}], 
         Line[{1608, 1572, 4077, 1576, 4107, 1582, 1584, 4113, 1590, 4112, 
          1592, 4120, 1598, 4127, 1600, 4097, 4098, 1612, 1614, 4136, 4137, 
          1620, 1622, 4144, 1628, 4147, 1630, 4151, 1636, 1440}], 
         Line[{1638, 1670, 4180, 4179, 1669, 4178, 1668, 4177, 1667, 1666, 
          4176, 4175, 1665, 1664, 4156, 4155, 1660, 1659, 4171, 4170, 1654, 
          1653, 4165, 4164, 1648, 1647, 4159, 1642, 4157, 1639, 1663}], 
         Line[{1640, 4132, 1606, 1610, 1616, 4134, 1618, 4141, 4142, 1624, 
          1626, 4148, 4149, 1632, 1634, 4128, 1643, 4158, 1645, 4160, 4161, 
          1649, 1651, 4166, 4167, 1655, 1657, 4172, 1661, 4153, 1604}], 
         Line[{1675, 4310, 1871, 4336, 1865, 1863, 4330, 4329, 1857, 4323, 
          1855, 4322, 1849, 4317, 1847, 4283, 1835, 1833, 4306, 4305, 1827, 
          1825, 4299, 4298, 1819, 4290, 1817, 1811, 1807, 4284, 1843}], 
         Line[{1682, 1837, 4309, 4308, 1831, 4303, 4302, 1829, 1823, 1821, 
          4294, 4293, 1815, 4289, 4288, 1813, 1803, 4280, 4279, 1797, 4273, 
          1795, 1789, 1787, 4268, 1781, 4262, 1777, 1809}], 
         Line[{1685, 1671, 1673, 1672, 1676, 4183, 1677, 4184, 1678, 4185, 
          1679, 4186, 1680, 4182, 1688, 4190, 1689, 4192, 1694, 4193, 1695, 
          4197, 1700, 4198, 1701, 4203, 1706, 4181, 1707}], 
         Line[{422, 2719, 2718, 421, 2716, 2715, 420, 2714, 2713, 419, 2711, 
          2710, 418, 2709, 2708, 417, 2706, 2705, 416, 2704, 415, 2703, 414}], 
         Line[{1710, 1683, 4188, 1686, 1690, 1692, 4196, 1696, 4194, 1698, 
          4202, 1702, 4204, 1704, 4187, 1714, 4212, 1716, 4216, 1722, 4219, 
          1724, 4224, 1730, 4225, 1732, 4232, 1738, 4199, 1740}], 
         Line[{1741, 4201, 4200, 1739, 1733, 4227, 4226, 1731, 1725, 1723, 
          4218, 4217, 1717, 4213, 1715, 1705, 4206, 4205, 1703, 1699, 4195, 
          1697, 1693, 4191, 1691, 1687, 1684, 4189, 1711}], 
         Line[{1744, 4211, 1708, 1712, 1718, 4214, 1720, 4221, 4222, 1726, 
          1728, 4229, 1734, 4233, 1736, 4207, 4208, 1748, 1750, 4240, 1756, 
          4243, 1758, 4248, 1764, 1766, 4253, 1772, 4228, 1774}], 
         Line[{1775, 1773, 4255, 4254, 1767, 4249, 1765, 1759, 1757, 4242, 
          4241, 1751, 4237, 1749, 4209, 1737, 1735, 4231, 4230, 1729, 4220, 
          1727, 4223, 1721, 1719, 4215, 1713, 4210, 1709, 1745}], 
         Line[{1778, 1742, 4235, 1746, 4239, 1752, 1754, 4245, 4246, 1760, 
          1762, 4251, 4252, 1768, 4256, 1770, 4234, 1782, 4264, 4265, 1784, 
          1790, 4270, 1792, 4275, 1798, 4276, 1800, 1804}], 
         Line[{1805, 4250, 1801, 1799, 1793, 4272, 4271, 1791, 4269, 1785, 
          4266, 1783, 1771, 4260, 4259, 4258, 4257, 1769, 1763, 4244, 1761, 
          4247, 1755, 4238, 1753, 1747, 1743, 4236, 1779}], 
         Line[{1808, 4263, 1776, 1780, 1786, 4267, 1788, 4274, 1794, 1796, 
          4278, 1802, 4285, 4286, 4287, 1812, 1814, 4292, 1820, 4295, 1822, 
          4300, 1828, 4301, 1830, 4307, 1836, 4277, 1681}], 
         Line[{1839, 1896, 4358, 4357, 1892, 4353, 1890, 4352, 1886, 4347, 
          1884, 4346, 1880, 1878, 4314, 4313, 1869, 4338, 1867, 4334, 1861, 
          4324, 1859, 4327, 1853, 1851, 4319, 1845, 4315, 1841, 1875}], 
         Line[{1842, 1806, 4261, 1810, 4291, 1816, 1818, 4297, 1824, 4296, 
          1826, 4304, 1832, 4311, 1834, 4281, 4282, 1846, 1848, 4320, 4321, 
          1854, 1856, 4328, 1862, 4331, 1864, 4335, 1870, 1674}], 
         Line[{1872, 1904, 4364, 4363, 1903, 4362, 1902, 4361, 1901, 1900, 
          4360, 4359, 1899, 1898, 4340, 4339, 1894, 1893, 4355, 4354, 1888, 
          1887, 4349, 4348, 1882, 1881, 4343, 1876, 4341, 1873, 1897}], 
         Line[{1874, 4316, 1840, 1844, 1850, 4318, 1852, 4325, 4326, 1858, 
          1860, 4332, 4333, 1866, 1868, 4312, 1877, 4342, 1879, 4344, 4345, 
          1883, 1885, 4350, 4351, 1889, 1891, 4356, 1895, 4337, 
          1838}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1:eJx8fHk4Vu/zvxYllTatKiqipJVKYhRCWUqotNBGC7IlIvu+7/u+b9lFxKSk
kopUFElSivKU0qLF736cc96fz/u5vp+ff1zXfc01Z86cuec19zz3vJYcO6d1
ciwXF9eUGVxc48j/xCXVnv3r46CxoFlzolIeRC+YsvfEJxaIhb6/MdBiBnc8
j/X8nO0PXVJPGxaMsMC45Xn91DvWOE64pExG7CyKvu2b9JisS7Rr239sicJG
l4N7wtKDsGdNmpLLbxYsjeuc8n5TObZEjVVZzZeOp27NVVRuZUHGif1W98/e
xG6YtnwYs1Huwh9WTgQLru3d/eNODOLtrXh8xtl43AaaZR+qWRD98sSO3QZu
6GkuFhQ3nA7z8s718f5gwRyDwk+HRFPgzpsC7S/5qTBp1Qy+hq8sSLVvramK
Msc13DPy5QNd4MvD654RxM7u1upkkTshKFK0e1PUHi340zXyNv4vC35Inm6+
sDwNV8RMsGiTS0I+4TWXPIZYUJ9V/vrl1Ss4Ei8kVf62GGdNdjwpdZcF76TT
vSZbXEXvsuPiYVuLcLe9y1esY8F1mV+z1laHI8x6Flii5waO83/fwD8syAnL
qBPP8wfRfTrKXNU5sCzqZNfQFxYEjL0esDv/MnSs8LCNSC0Fy0FdPlfiHwX5
ogPfjySD2gT5mmOsTKj//ddNa5AFR/ys1HQ1fNHDfeOnNZLJGHD9+rb0YRY0
V+tXbfCNx6y1lXVjVqWjfm+7TRixf0LLbdvj2dn48UH6xO0zy3FXYpX33scs
EJxq26L0LQ5uFn7cWfQ4Cm/OvCS0m+g5z9Ml+mV7EcyOb22O/pUK04KweH4v
C17MP9ubqVAG/jrbhHvnF4OenqrToocsmLt6f97lgWJoDP167URoIWT4+hzT
bmPBlHm8I0Ubo0DxxvUOCxV/2Llh5aqXJB7qy0UjpltdBK+LTjnPXymD3aGG
0hbyXRSnbTp/r8oUe85G6D0JjcGx03VqVxO/DS3+EXz7sRt03efJ/2IQh42l
P7+ZED2SxiZrpENzobOurcaPaxdUSM/2FiDf/esaramOCSXwUpZVpZGTDtNd
Ai38ulgg0xFasuN8MWx/GXXbZ1s0rJB+PGn1OxbcXRC/a6VgNCR4d1W6fzXA
nrojmm7s545xb/KS8IDNn2cUdazyh5BylCokcZKIXFrfk+2waKyweUuwJXrJ
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
/vNf7psBlfum9PnFxKJ1RyDQVlDuzvlCOG7cKyfKnMvWlzXvPxMMQelHw7Om
v0sHTlaJlxvzuU4l83WHmq8xwYHJD7PSsXUR08/leUPG2j23RzL7g7cKm++2
hcp3UyPz0iv197wE+T2oun8iDV/IRmmFX/ZF20jbkW3cffjHi9rx7gmoOSxj
Z9WGaLzxQDqWy5fYtvdzdfMfP+we2ZiSKR6A94K3rBrC9Y/dxea4naVy3Hwq
HO+uvnIMjs1+Vy/50g6rJMNMubmKnUtPzVp83Bzm1LzN08hzxKylVx25/jC7
pUXjo1baQnuYwlNDOxd8mWcyjOuTr93+9LyQiCs46f2Uv7ffBWubRc92cr+n
JfPyg5qXC0OVZp566w3PIz99FV/tgimZ28efZ67fXTZn0i4rR9gyTSTwwXof
rB/+W92L66tDctOeUrlpCe6fkzpXBsBOnfCU9VLhMHfEeA8nbp5X5Xqzb17n
8Ou96IBjc/1hw0NbW65uaC3JxfOhcvGe2JTM6bl9FuXuPD4XccsXZlzaPzGd
GS8k9TGg6iMqwebZqVN5dssDp38LzfaGi7XzhUN9fGD+3qPu3O8PZUh+2UIq
v2wyyX1zpnLfupratIeMS4EZ4kc3b7zjDi6PvYYAl5dF8sv8qPyySyQPzojK
gxsvbnbqZ24m+JdctZ4jaQ9+3x7qv2TW7R2Sd+Y29e+8s71Fc3+LayZCZfKw
5L0WYSg1TqhZhhmfSnLHflG5Y74kd+w0lTv2qqFabkOmJ5ydvihQ1i8NPZql
PSYx53Jj5E7D/sd+sPjG9M+pX9dAWYhHcQRXH9ex9HHzpRD4du5nRb/wRagZ
oT/kOFO3BaRuy6i65QjcSW3kT4WlJpyd338lQFLEOpvNnP/qcJSqwxOSB2dG
5cGlGw2u6GfGQ94lfTO1zIbsNaJ8c9r/nZ/lRXLHNKjcMWu7BePnP82CAu3x
VfFXk4D/UWHwH6ZPbie5Y1uo3LF9+WOFBN4kQPPCA0OGz7TFUOWodm6+ZCzJ
1fpC5WrxP1I+bJDsCiorxA+5iBUi54FHqztXL0Dqb07VP5jkbelQeVt6QtF1
GooLMIU/KblLuxRPt/hYzL7PgeqI6YrCGmfhaGBxhntoDPBNMVkcxqyrlGtb
g499TYXrr1ccK12fA06bRRvaXzHnPqnPU6o+eTYpissLc2DbkB0ainMzgc9F
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
GMv83TiSKxG96+9ciZaYXbttjeKwYmzGSFkTddxxVGtuLjNeSnIchlE5DrO2
Gd59a+CPRg1VBn1arnii2SeIy5s9TXzvSyjfe4cKNi+gksoLCK/5Xp0legYK
o0K2drzzw8Obpcc6/f6vnnQehBLx7e+jcgSixId52Fp4gfOvnNnN633RsXLJ
OS4/uYv42I+kfOxvEz//QsrPfwp7LoM6ey4j71weRfzqlSi/+nvs+Y7T3AfO
d+Sd76eIX/1nyq/+BKlDOVWHp4IK4U12Z3BHprT8iAdxsLx3yjp95v5Tv81p
EdH1Qr6NO2xbnf1hrZ3f3gjmOdcRP/ldlJ/8UVL/q1T9+1bWS4tMdsbkw239
dypdoFp5r/837t8l9ZGg6tOg6iI/U1MZFPTGn775zAeaI6+1vGCu/9M10Pei
Htv3Aq/vNf+Hn/wTkgswdNrfuQAVBff3cCp9YXWe9azscZ4wb9ewlvfMuBrx
t99I+dsbykUfuHUwCBaucjqk1xWCRzWi5kUx9TwyfaBvxy62bwde3/6G+Mnf
pvzku4lf/XjKr35j6kD/DKPZ/hl5/TMvN4HOWZAlPvaxlI+9Etufozbbn+Mw
0p+7sX0+LGH7fOD1+YUsXoCdLF4AHl74Ruq8n6pz3aMBPIJmLB4BHh7ZK8HW
oZeqgzuLd8CVxTvAwzt3WXwEwiw+Ah4+6mbxFDxg8RTw8NS/6mbC4jJ4sX8A
lwEPlwGL78CPxXfIw3cOZQN4ENaxeBB5ePDw5QH8CLNY/Ig8/LjM42PpKT97
dK1beSG6tAjrFDi2m5lzp5jFpziDxafIw6dbl/qcXyZkA83xqY8vHbeEuZpW
07h+4OmsbxW+ZH2rgOdb5XTnZk7KFGtUiQ9OjRO7ClfSOKJb6jgwLDbxTe1h
f7RNq9zU/qMGXndov+0/wIGS9WmzOMGFKFG9fPDcKRVwd1dt67ULzOe0UGbr
s85SvLQ5aMrpPxdBNshr/kfmPvmaKnIWU27ifQXV789WlcGb4xcPrTzBgYS9
xYv95WowSPDxuW69DMiorN78YD8H9g+WWpU06S5aiEwPad1yEVWswUVJlgOq
2T6iI9bU4pehTodPBAfjR1C5W7CIAxdPLZfce+QOSmr4ZxVkxGPsjAOlPas4
8HO0+Y23n2qwasxLDyxNxrFSETtadJn7t/JPy7Cpwj27wk2n1KRj/0PTc6tN
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
NVcgKQlLnbz7d6oHgpemsccSZn4nEn2lA6Wv/Ejeq4Z6L7moifZqZon47kNJ
gklpOK41zrW+w1wvxa5PdGXXJ/LWp5/dl76Xu/1xU877joKJsfC9787Ib8y4
TFF2z4rNyTj/7o9lbSEJmKXxftsz5v4lRBe5mNJFzjh7iTNsazAabbne7Dgq
HHZvlt/K5Y283JlyXTLXDz39bPYLWfnjs0m9P2czn68lRB9aROlDf+qe0t4V
HocT531vX7/wAKT8mR7kx9Vf35v9Xko6GDs2nPjdIRyOJ2VQj5tL26yYUtI+
1gO/ygvcGn7KDj81b57BYfaNHqIHHErpAUVWXR4rb3AJarV/d97pvYTa/FcP
2THXzy4vNxELiwV/EyHRRbUm+EN6vIMIc38honN8ROkcXbd3hTdVBYJ/8xjT
+LdMX3/Pp0GWeU5/or97RunvPNn9GbvY/Rmlyf7MT/R9Yyh9X5Zo8IrpUwrg
rqRcMH9GFLTLKk8a8vI/Hd/70X/r+Law5wXUsucF8s6LYUOSVypkhcKHtbMX
fTyci6srFqtfYMYV/6HXM5Mrb95esh3VvWa3FneW4PsemQ4pZj8JqmxssTsT
jIvu4vCKjjDQlzi6h4+pz6jFzi5hMeGYFLqqbCJfKL5990mYO1+H7+t8sfR2
gTfljk+WT06FFRN9h4Qz63A20W1FUbotV6IzekDpjNpkroQMsQnF1iXn1cOH
nIazlvOGH2HWzz6iw4qgdFijjc+eM9zjiN/n+irHmu3Hk+sFrQOY+0wgeqU6
Sq/UvnCAR419LI8aeTzqGouKZ8JKntB5IvPWy6hAqCw8XqTN/N0fcb7ZL5Ks
4b15Xpnf0WDg57+tkMiMK28du+Ls/UBY5uM6zfGTDfLzufFxvzdbXX53pPeI
AzhpzaFjj4qdoKNmzDiunncC0R9tpfRHTXLsc76lnnNVlY7EfeVU2CfmNLWB
2XfDF9VMH8esQyD6l/GU/kU69cOkUQdcYbllZ+ble54wBacu8GTqIxKV4hAW
ncvs5aV+TSKx8CsrypGbn3uO6HqmUbqeyb9nu2u/PQvlfQpxY3N94NNCVw/u
9zNmDRWzFv4MhTlyys+Xa0Thod9j5lUx+8C66wluWQeLoa+2crzYDYS8XczC
i2I+v0QnokDpRNYZTpvxMj4XesL9DcSr80DmN/+5Y9x1SJ5HhDzPJfI8kbXp
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
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.1176542643676925, 0.8738857761552469}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstDefaultMass$$ = 
    20, $CellContext`glConstKDefaults$$ = {0.25, 0.25, 0.25, 0.25, 
    0.25}, $CellContext`glConstKMax$$ = 1, $CellContext`glConstKMin$$ = 
    0.05, $CellContext`glConstLocDefault$$ = {{0.1, 1.3}, {1.9, 
    0.8}}, $CellContext`glConstMinAngleBetweenLatticeVectors$$ = 
    Rational[1, 6] Pi, $CellContext`glConstMinSquaredDistanceFromOrigin$$ = 
    0.1, $CellContext`glConstMMax$$ = 
    30, $CellContext`glConstNeighboringCellIndexes$$ = {{1, 0}, {0, 1}, {1, 
    1}, {1, -1}}, $CellContext`glConstPrimaryDisplaySize$$ = {380, 
    380}, $CellContext`glConstSpringColors$$ = {
     RGBColor[
      Rational[2, 3], 0.33333333333333337`, 0], 
     RGBColor[0, 
      Rational[2, 3], 0], 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
     RGBColor[0, 
      Rational[2, 3], 
      Rational[2, 3]], 
     RGBColor[
      Rational[2, 3], 
      Rational[2, 3], 0]}, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
     RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`glConstTextDisplayOffsetHack$$ = {0.25, 
    0.25}, $CellContext`glConstWindowHalfWidth$$ = 3, $CellContext`k1$$ = 
    0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
    0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$75264, $CellContext`qVec -> #]& , \
$CellContext`meshSize$$ = 8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 
    1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10, 15, 20}, "numberOfMasses" -> 3, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.8200836820083681, 0.1673640167364017}, {0.6778242677824267, 
      0.6485355648535565}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
     "pointsDataTable" -> CompressedData["
1:eJxdnUtsXEd2htsSJdESLVMUJbGpF0mR1Fsi2Xy/urop77jKTtvJDCdZJYA3
2Q2XWXgRBHkMM0kwi8DIcgBuJsAA7EU2zigveKXVGDBAwICBsSHDI8WOHLnP
953JvQSE6+6+99TrVNVfdb5bnvzBn/zBjwYajcbJN/+23vx7+82/E2/+7fX/
bvUa3//1nvQWWt//3ewdfP/39ElcD670+l+/2In7GsO9Z9//fbDT+/f+fzR6
fTOzO72/79//0VHY62Lvm3bY6/Z+3b9/qIS9DvYul7DXiXRat3p/9/39zSeR
zrMb8f3hDr9fiXR3d3pL/c/vRvrH3d5bYTDs7nd7v+wn/C9HYa/b+7e+vW/b
Ya/T+9v+7++UsNcJO3uXS9gr5O9WpPv+Dr/fiHwN7ZC/y/H9h93ej/v/cb73
3fd/7W7vj/qfXx/1k3lueX/5q7DX6f0wfm+HPT+fj/Q/LNovYa9Q31Ncu73X
/R+uk6+u+SedLu33DtdO7z+i/EdRj53en0f9tMNewd537bBTevNRvyXsFeu/
LPavbexORblnu72f9j9fx5+yfaM9n3bI9xD+VHph55uj/vcflN5fhf+0w57l
b5R+u+63yd+7pd/uh9th9+BK6dfz8Rbln6L9O/jf9chns0N+L+FPBX8ZinR2
C/ZeRX6etXn+43aUw/K+Ff7b2ia94RLtvkV5x0rY2aS+psLuc8tzDX+yPi9F
vQwV/Pkc/t3unejbe3kU5d/u/WU4Urtfb4dbvR/10z0R6R9vYn+4/Kxf3k3y
N1b67b67Qf6mSLfw+7Ve//6DNs+P4ifb+PNZ6mkbf/76KNptq/c//fb4TbTX
3ib1dZLyb/D5QvSvZ+vYH4v2bKzjD5P093b0m++uUn7rdzTS39+i/t8Ovznc
JJ9fHUX5N/DXT9thbwN7J+nf6zx/AX9aox6a4c+Hq/w+Sb628OerlN/2HcVv
N7lvkHra4PsXMd4crNM+x/SvNco/QH9aI38X8KdV/K+JP61Q/kn82fq9iv9u
kN+Lkf7xOvkbpD7Xsfdl+PPuGvd/Fv68b3lPRfqHpjeCPy1jbzzas7lMfU1y
3aA845R/ne8vkq71e4Z6WsXeFzE/NFaZDz6P8bhl+qdj/Ntbxv5IiXwu8fs4
/rSIvUnKv0Z9j4c/N63vkfCT3VXyeRp/WiFfn4c/Hy7THr8Nfz5eMv+U388X
8adFnh/Hn1p8nqD8q9hr8n3WL/60wn2n8Jtl+uFn4c97S/jfl+HPB4vYO0P5
W7Y//alF/q4yPi/w+wT9aQV7Tcpv+47Qn5bI5wD1uUh9HTN/LuJ/L8Kfd1vU
72D48/6C/QN/mqd8V/GnOco/wX3L2GuS7yX7J+navgPYsXyfMj4vkP5XjM+W
923607zjB/1pDnvXqJ/H2JugPy06PlF+07tAf/LzSepzgXb8JPx53/S+Rl/M
4Y9nQ988e+z4Sv4eOf4yXj4gfxOUv8XzY/iF5R1m3JvnvhPkw/p+zvhseV+2
4/5H5P9czJ+th84/MV8c3Kf9r5WYd+5h7yblX8D/1F+Wdxh/muP+t5gnHveW
+/Y/Por0H+J/r2L+aj3A3jnSv+f8jD/fJX/XY37fu536NPI5h70rlN/yDlMv
j1KfRvoPUp9G+vdTn0a+71K/Q6R/B3uX8Z9Zync95tNn06lP477H2LtC+tbv
u+TjPvc16O/3yD/69OAO9r7Fn2+r30h/JvVp2EO3N27gz1OpT6O+HqQ+jfze
S30a99/l/tdHUf+3zV8jyj/r78zv03w+T/mnUp+GvUnTx79vmj/Sv4s/Xyb9
O6lPo/yzqU8j/Rnrh/Qtb6OoG6hf0p9IfYrfUO83YnxqjKc+jftv43+XSH8m
9WncP536NNKf4vmP2o7zUf5G+RH1/h36NNK/6vqp2G+oF8aD0dSnkf409i/h
z7dSn0b6k6lPf0a/VJ/G79dSn0a+m6lPw47rgjHqb8T+zf3vpj6N+6awf4n0
rd9zpHPd8eUo0hl3/GE+v0L6J6j/Uep3mPSHU58uYJfxj/oZSH1KO6Y+ZV5J
ffpjxknGX9Y3l7D3Cf1pxPGb8fYdx3fKfyb1Ke3q/EB+vzpSn6LT8OdR0r+c
+jSeu5j61HEpvkefvrkvvh8g/ZPYvcB4+IpyNMnvZ9TzBPX5i18dVOphFP+7
mPOW+rSBH1X16Snq6xj/ec28OlDUjdQb+fs41rFv9OkJ6jU+Z/201aeME/jz
RdIfzKvzhOn8mHajnMwPn5LeqWK/C7sjlP8L2nWc8ehb+2WxHNGO49Yz/nyR
ddY31O8Z2ulz2ve3Rz9nXEYftq2nuJ4m/ZekN1L0c/oB+UEXNSbtX/6e7fCM
fhjpPad9T1Nvz9voY/L5ol0td4Nx5kwxX/gd6Q9Z/qJfxe+T1M9oUZ/+BeNs
+PMI+ySf076n8Cf2cd74oX5L+1EvZynvIPPVML9fzCvjIumzz7I3yfg0js5v
4s9ft1kf6S+2q37EuHt8FPPdeer5Bf48wv2DpH/JcYjvx0jvKulf47PtdbOo
T/+u4ocX7E9Fv3IcoX/jz6PZL9ynYHworhu8L9J3nlIP6seT2J2iPcdIf5j8
Xch1CeOb41GJ/ZLfHLmuZHxsq/Oq7TaRfmE9MP5i9xb3mY9pfh/Dny/xvfpr
zH6Bfr1a/gY/D/+0vC/b9pNI5xzlnyraje+nsX+NfM5kvUQ6t3OetR+Gfww7
X1Gut1yHlEeMa/HcJOm+ws8tL/uVrZn0o8jHrDqD9O9wneK5e6R3JedZ9IHr
+qI+jftvFfa/GPemKf83zKez3D/E9Tbp2I/uFssZ39/PemR9UdSn5pP9PdKf
5rmGeqgwLjD+3CZdx9k7pKc+vVf0uzDzgOsN0n/I87brY+pRXTJDe52nvWYp
12vSv4O9n2/Gc3f9nfHnPp/Pc9/DHGfC3iN+Jz/NuWK9xzAyx+/sVx7ctnz0
r7vk91vmhXvln6N+SN/yNrg+wj/epfyPKfcVPs9h7wb1Np/9LK4LRX3KeqGw
f+56gvZUnz4s/xT+Q396rH+xX2F5GZeb88VxKda7pn+T9fsC+aIf7Leoj0uu
p8jfOddb9h/0+1xh/Ye/zBXH8bjO5zwR1wXyN0Y9md5NxsdFnrvl/k9Rn0b9
P8af0ZH7c4x/v4t5dne+/GOMP9G/m5aPeft4QV1K+VvFcSzsLZI/xsndJddh
kc/mcur6uG8efz5Le807/tK/FyjXJ/hPy/Gb6yLXC6S7lPNWXJf4fYJ6Wi72
47C3wnXU/QrnH/bDW+T3q9Adxy32BT5l/8Lysl+5v5Q6Iuwtu87An0xvAn9a
yXE77K0W9Sn7Ofiz+6e25wv6+1L548gY/rycui6ulneEfK2U6v7pKuWdIB9r
fO84t87v7p8ukr8z7ActMd+jg/eX0eWfsf9leqco/2pRd4S9VdIZZ395jfqe
YL9wneenqc+Noj6N/C7jz2fQ9cvlf9GnYWel/Gf/qk4zffdP11znUf51fh8n
XxtcnYc2uE5TL5vkd4T+tII/n8afVov6NKp9DXtfhD8fr6U+jfpcT30a9jZS
B4W9zdSnYW8LezP0zy3KNeJ+Mu1zivlirUQ8z3WS9fsl86flVZdvpi4Ne5v4
81W+30p9GvW2nTogru1S0afNderD/dP18oeR8fDnw43Up1H+zdSnUX7LO4o/
bZfq/ul26rKw13ZfKJ4rJfUp8QjGv5P402Z5HP0b/b7FOuErxuct0nub63bq
07i2yR/6tFlSn4Y/l6JuiPyW1KfEa/Dnk8ZzytfoU+I97PN9TfzG8p3FXpv8
Uj9PC79fi/R7hfxNxfezndSJ/ec+6KQ+jfu28ecT+NN26tOoZ8v7Ev8pNX1a
Up/GfaZ3jXx1Up/G9x3um+W5Lv7Ffu5um/Z7Kz4PldSn/fvft35ftfvj0HPL
y35l6aQ+7af/YYd02K8c6qY+DXtd8jcb49rzburTaI+CP7NfeVjKB337HxEP
6KQ+jfa0/EO0l+Vlv3K3W9w/DXtd/Bl92txxnxV/2kl9Gt2mlG8jg0fEk8uf
9Z//F3iDTu4DEI92nyfS/6Cb+jTsdckfevDpTurTsLfD87P405PUp/F9p/yg
//k1ekd7/7oZ6XTx59fsv5u+69Qd8nuZdCz/DXTBE+zd4vsn5G+W556kPo3+
3y3wDaEHP+ymPo348g72GrT/TlWfPt9JfRp3mR769MMnqU/D3nvYu4299/Cv
6cjPvvzIBHrDz83kOeL5EeLv8iQDyXMYfwp73Yw/hRl5kkHGQ3mD0ejnu/Ik
08Tf5TcmkueI34nPDe24/5Y8R7TDgPXbW2H8DHsd9km+ivHhfXkS1vdD8iSj
yXNE/qZJ1/TdR+5m/Cme6+Y+Xrh9p+c+YdRjp3eyb++T5Dl+yPgZdgqfz9Iu
8gfu+7R7xhHoH/AVN+F55EnYb+h1Mv50EP0v40/0zx76OnkO9Hebbk18/lzy
HC3GzxgPtinXLebPDvtgxBH2bd8x5lvrdzh5DvcVGb8y/hQ6qZ3xp2hXeRLj
YfIkl+i38iTEHUqnykc9L1U+6n3bFz5qSF6nkTxHhY/a3874U+R/K/koeQ7H
zyivPAl81IHteSN5jrheSZ5DPor5LfkoeQ75KHkO+Sh5DvmosLeR8acYf+QN
bK92xp8i/t6uxp925UnOJ88hHyXPEfZ++St5DvkoeQ75KHkO7CfPIR+FfqHf
GAeyPS8nz+H4Kc9h/EmeQz5KnkM+Sp5DPirsyTvIR8lXwGvtbmX8KfKb7cv8
upHxJ3kO40/yHPJR8hxRfvYb9leTjwp/ki9wfb9c5aMamxl/inzLkxjvsX2H
kueo8lGrNT7K8spHyTu4vpc3kI+Sp4BHOlzP+JM8B+MD/d3P8lHyJC/pTys9
9Bv9yfK6vl9KPirmD3mSseQ5wh482548iXzUao2PWqnxUZZXPmqZ9pCPsrzG
nxZz31iew/W9PEeVj1qt8VGmJx+13DOuJM9R5aMWa3zUYo2PkieRj1qo8VHz
NT5qucZH2b7yUfIkub6vxZ9aNT5KvkE+Sp7E9at8g+t7eRL5qKUaH7VY46Na
2JOPatX4KPkR+SjLKx9leiOMf4+xx/q+JV9hXFqeRD5KfsT9D+tXPmoee/JR
8zU+Sp7kNOuYR8lHxe8Pc9877MsbyEct1Pgo61s+Sp5EPmou+Sh5DuJjbXkO
8s/8+SDjEPIcru8jXni3xkfN1/iorN/kOYxTRvqPko+S55CPkudg/4b079b4
qDvJR4W92RofNZd8VOTX9h1JnkN9GunfT30qz6E+rfIcg6QvX+F6eib5qLB3
q8ZHPUo+Ku5/kHwU+8/cN5A8R5QPfXpwu8ZHWd633QdLfeq8GffJR02mPo36
up/6VJ6D8St5DsY32mkWe58kz8H4mDxHfD5L+SdTn8pzxO/Gn+QNJkj/TvJR
8hzx/HDyHFU+ajr5KHmOsPcyeY5I55zrsNSn+E3yUfHcWOrTSH82+Sh5jsi/
+w23Up/Kc1Tj6jdTnzrvsL9O+s3ko4wLUC+5T6c+ZZ+8xkdZXuNzE6lPo72u
pz5lnzD1KevCGh/lPrc8kvXO+v7NPB33y0dNJh8lzxH5f5dyXeW+Rq475KNo
hxofNZJ8lDxHPHeZfacz2LuRPMce7Uo7pj6V51CfynPE/caf5Bj8k195nTxH
fHZ9fzL1aeTzFfuSxsM+O1KfotOSj5LnoHzZz9Snkf5Q8lGOk2SMfXPz/S7j
4Zd8Vp9+fOT6/lt0ygF+wD528lGUq8ZHDVb1afIc8PtvdJDxJ3kO9peS54j0
ruBPXzDP3cw4o/qUcSL5KMc962Gpko9XR/IclLMtzxHpvcV6WJ5juDgO0K8z
LmTc1n3aZ/iNfmr8KdI3bnGOfvScdnp5JM9R5aNekP6JYrsZf4rv3ccfS56D
8S/jMIyPjM/HxAVGe/v4hfUW38uxyEd9Q3nlowYy/sRzGX8yTsf4X+M55AZ4
T+WNPo16+bQtHxXXr2nvt5PnYH6ingb1k7b9yHwZV7HcrtMZFzMuFs9N1HgO
+ajX7Wr86ZTtqh9l/GmxUm75KOdJuRf2yRpyJsmvJM8Rn22viaI+dZ+9ykfp
h4Opo6p8lPuEn7XVwQeVclzLetJP4qoeNM5jPOxWjY8aqcWfrN8zyXOg/47U
LfJRjiP6bdgzPfl9OY3xjAt6X+RjpsZHXcl5zbgV9p2vMv7EfIY9+aipjD8Z
N16kXuP7meSj3FeN7+Ve7iQfRT8r8lEHjAvUf/Icxp/iObmLL/F7yzuY++72
o8jH7eSjwp58wyTP3U8+ynY0/hT3GWdwXJxOPiqem8n4U6RzO8c1eY54jv3K
PfmVq3z/IP1InkN9GvffqvFRM/Zf+V7u/zR5DvmouMqvqE/vZ/wp7DzkKh/1
KONP8hyMT6Q/m/GnsGv9Gg+7m3xUPHcv+ai4PqjxUaYnH/U4+Sh5Dv0uvjfe
z37lwZ2MP0X6pmf86X7Gn+J7y/syeQ7ml+Q5jD/Jczz7/+NA8hxTyXOoT1kv
JR8V6T9IPkqew/hTpC+/8Sp5jvh+KHmOSvxpbyH5qLjKU0zx3GLyUawnM/4U
9yW/4no0+ago/3zGn6L88hvun8qTwKcfypNcZ39DnmQqeQ71aWR3rsZHzeMv
3+Ev84X9weQ5jD9F+5neO8lzVPmoJa43kucw/hTPyZPAR+3PZ/xJniPS4f3S
Zgt7P9+Mbt9KPiraf7HKR+0v5bwtzxG/M281V7AnHyXfcRl/kSfx/VJ5km/x
38WMP0X5La981HLGn+Q5qnzUSo2PWq3xUWu5DmI/K/koeQ75qCj/UpWP2pcn
kY+yvPJRqzU+yvTlo+RJ5KPkSdw/XUo+Kp5bZnx8RX9aqfFR8iTyUaupu9iP
JH/yUaYnH7VR46M2ko+K/C4nH9XP1k9WanzUao2PWksdHO0vTyIfJU8iHyVf
IR8l3yAftVXjo1ZrfNRqjY9aq/FR66lP47pR46NMTz5KnkQ+Sr5CPmq7xket
0T7yUes1Pmq9xkdZXvmozdSn8hxVPmo79ak8R+RPPqpd46PWa3zURo2P2qzx
UVs1PsryqpvlSdw/bVf1aVOeAp2yX1KfEo/BX+SjNmt81Fb5h/5n+SjTk49q
pz6V54j8jSfPoa6R55CPkudQnxKvSj6KeFb5Bn0qz/Hf/evn6GXTP027FMZr
68fy8z5nQ35B/ke+YZrnOqlPo/zbNT6qnfo04sHyGqxz3y9Vffq8pD6NUdL0
xpPniPvR1UNd7M0kzxH+xX7us3byUbG/W1KfynOoT2M/2PKyX7kvT3IxeQ75
qLDXTX0qzxH5m+H9853Up8SDk4/q3/+iJB8lz6E+jfa3/LxPMGt5R5PncB0S
9uRJJpPnkI8KezupTyOfneSj5DmqfFQ3+Sh5Dtdtka9u6tOwJ1+hHpQnUb8/
qfJRe09Sn8ITVPmo0k0+Sp5DPip4Hst3NnmOCh/13N/ho4o8yVTyHBU+aui9
Kh+1300+Ktq/m/o0/NvyvuQ8gp3Up9Hfn1T5qH3TU58+SX0a9uRJ4KMO33Pd
yPgnP+I+8BOu7t/t4PdDNb6C8yWedfP9PdqzGj9tdDN+ij/k+3v4S8ZP8Sf3
X3v4m/wA/t0ljjCUfIXvdeHPvQf95z/W38kf8//TDvsmw/h3cX+5yFdQf+gf
+RnOlziUH+F8id1uz33Z6HYdxk3jpx3iy+xTJV9xgvlJ3oD393aL++/4TZv2
mOoxHmX8lPGK/PG+3IfaP9tjvPO9H/ia0nNfEv4tz5dgPM3zJeDnqudL7G/z
eRK/6GT8lPE891kZ7zN+Kl/B+pT9oJL7WrG/Z3kHiudlhL9cIN61nfHT0A3y
BsTjZvUv9r178iO83/i0kO9B2ktehvhpU97i2Pm2Gj/d38rzJeQrIj3m/2N5
jknWV/oT+1NNeZqL7C96Honv72333FeOfG4Rf/+sLV/B/FPkK9g/YRzzfI4m
+9OeH0Fc5FA+aTzSP7Y+LxK/3O753ma0/xbt+MWRfIXvsclXRHlPF/mKqC/m
/6bndfD+3u4a7UF77Xkeie+5bpE/51vPWyF+2pAncR96g/GF8yX21vEn96fW
fD8Rf5I3UI/4mfhpcyvjp5Hfzdy3j/JvZPw0yu95IJwvcex5IJwv0bS88sjy
HPLaKxk/9byM+N04kvxIEzueN8P5Ei3reyD5CvyX/cRV/dv1UPV8icaK77cW
+Qr6T5GvCHvET/f1pybll1+Bjz6WHxlIvsI4hXxFpP+V68Xq+RKHS77/y/pI
ngJ+vCnfMYFdeZ0x+pPlvUA/Wkm+L9pfnsL4qTzL1235CsbPIl8R9pn/D1q5
bxn25Ck4X+JYfkSezvNQ5JGTn8GfljKuEfVpeX/Xlq/gPe4iX8H6k/4kb4Ae
Sb7CeOVyxk8jv0v4CedLNJYyfhrllyf5+Ei+Iuy9astXRHl9X8705LXnM37q
eRnxmfMldj2P5Ar+JB80jD95/kkj+Qr0BeOzfMc3jM/zGT8Ne3PG12i/x/me
YuRX3sD4qf7k/l2r53v77LdhDz76YL5XfY95LuOncdtj8vsOOu+R8Ufmc8/n
cP9O3uEG5bc9LzM+ex7IecZneZLXMT/sej6H50s8zvipfAXPF/kK7Bf5ivj9
BvPFHfziBumYvnpQfuQd+tdj6tPzJR7le8/yFdRfW74i/NfzJe4avy5VvkJe
ezb1KfvRGT+N9B+lPo1aeJj6lP3u2vkSd1Ofxn2eR+J71bOpT+P7Gf3XfanU
p3Hfw+T74n7Pmxmi3jx/Rb7vjv3LeEHG7eI+eQ7jVtOpT+P7qYyTyFeoT6O+
7qc+jfzeTX0a93k+x++O5CuMn1b5ihOkf8vxq8hXqE+J42LvZsZNf1y5yut4
TsVs6tPI50xVnx54HonxU89VM34qT2K88nrq0/h93PnBfc8q3/fM+h2tcuzu
T8mVZvxUXudT+G/HjYEipxfPGTceky+qvUdpHG0k9WnYvZXnSxAHSn3qvBL3
vUAPXkt9Kl8R+RpA//ner+dLXEx96jhr3PRnlDvsX03dEVfjp5Z3MLm7+P3L
I/kK46fWq/tTxHuT7/PcFfVp2DmVcTfGrSP1aaR7LfVplH8s9anrQvQf++O+
x/Z5W+4kvj9N+oPqS/eFU5/u4Ye0e/IV+hXvlSTfp47HfnJJ6lM51rD3Rdv3
HqI8Z9in9ryMi+W/eI56Ls4z8ftk+SHtHvbGU3dVyz2U+lTuUH0qp+7+lNwo
7VvUIbR/ka8gvp77SJGe+y+NWvx00PVRcmL4Z567iP8eyVfg323njbhfLuRz
yut+kOdlGD+VGzC+LF/RTK6H/kn6cqADzOMfHRk/dR1q/BR/kEPKOAJ+Xqw3
9Sn+lvtT+j3756TveyUXcp+C9XeuG1ifU0/O4+bjVC1+qg6T77uA7rhWy6dx
8ys5Tv2Ufhv1PJyc3B7t5riLHxxZD2HP+OmwXFqNA7hkXCvjp+6Tx+9T6JHf
c3/GjexH9hP7KbqjzEW95Tk6xk+r7w0OJecT9Xop9zXhn4rnZcR9U8V+f8C4
1qJc7F/lPk1cPV9iVO7qyDib8VPGDe43nus5Ep5/ZhzF720nr8blruS6Gv3U
04761LiI50vs4QdyX8zXcn25z2w7hb1bRX1qnMD4aeTD8zJ+f+5VPO/5Z1fx
v9f0b88j+cWm47zckHFrnmd8Nj25HM+v8Dy225lP+Qry73sXtMc7qQN+zThg
v/wF40w853kk7lfKc7hfKb/ifqW8gfHluxk/la+gXdx3sf171XpUn04zznu+
hPXbUA+Xaj+T52C/8tk9/EF9+iDjp+jxjJ8aN+T9rJ77+PG750vczvipfIXj
nudl0D9dT9h/SfdhLX76uBo/3Z1zfCB9eRLPKZMP+h3jzV3nJfSy55GcKPIV
VX36KPt92Jsr6lP5ikr89GDe8RP9LB90lvHmHv7n+ycP8pwu1pNyqa43q/HT
fdPzfRj5EeOD8hTET4/lD0ZZ39zP+Gmk8xB//go9+Ij2+tT3GbDn+x7yI74P
Y/qef2Z66q8W5ZlOvoJxDh7zEf48yPxqeeH7DufQoce+71GNn+5aXvcH5Tnc
P/Uz+v1QvsP46VKeLxH5navGT1vzxOO+PIp2n8d/nOcWMn4adlo5T8fV8srT
yXOo35dzXAx78hbwfYfzVU56f6GoT/u377boN5wv0ZQfOe1+V/J9YW8p+b6w
5/kcjCu7Kxk/DXurPk9/snynmT9avM/M+RIHi8kJx31LnttHubJ8pGt68n2e
RyK/5vkccodrGT+N9l/M+Gm0/xLxL86XOF6Sq/Z9M+x5Hq48h+cFy4+4P7hW
ndeO1yjPTPIV+B/9e6l2LuKyOhudtlI9X6Jh/cr3WV73B9eS72M/OuOn7Fdn
/DSe2+R3dPzxcsZP+350uILegfP+yWrGT6P91zJ+Gu2/nrov7Fle3vc49HwQ
9HvyFXCbu1uOX/Sn1aI+DTtrcu2sU+RZ5JBN3/ejTU/9vpl8X9iTp/D8M3kL
56Vtx3f60xrtw7pidx1+jXVLcwN/fsl5KRupT6P88ivGT00PnbQrP+L5CfIU
nJt13E59Gs+t5/kSUY8bBV2P/tr03EnGZ8srd76d+lS+Iu5Tf5meukGeQc61
pD6N/G7Sv3kv43gTnu4jeK0t4mZw6vvbycHLV0S+LhsPTH1KvLCqT5/Ld8zG
c6WT+jS+34IfUZ9ulz/tP8/5Eo025+14/lk79Snx0OT7Iv/yHp43Js8wRXt2
UrfJV0T9nWd83oaPeE181vL+YpNipD6Vr+D5SP+FPA3vnzzVPjq3J+8B3zfb
TQ66yle8g94o5aMoP3qwpD6N5yyv73t0avpUfsX9StOT7+umPpWviPtu53kZ
0e/g+z4s8BrE94c68IYfeR4D/oI+fW552a8s3dSn/eQ/NH3019AO9cW65v2d
1PXyFerT6N+d8tfRf/DfTtmM/uV5FalPoz3lR3jf49jyEk/f3Ul9GvZ2Up+G
vSc8j+7ef5L6NNq/gz+jT5924R+fR3/qyZPw/4+YlVchvv+B/MgY/iTvgR58
Ks/BuqQn33Ibe54Hcpb9gi7+7L7VTurTuG8n9WnYlSfxXE3Tc50sP6LekR+R
73uP++Xc3yv/B3CLMXs=
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {10, 15, 
    20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 3, $CellContext`tau$$ = 
    0, $CellContext`tick$$ = False, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 
    0.8}, {0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tau$$], 0}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`meshSize$$], 8}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`glConstMinSquaredDistanceFromOrigin$$], 0.1}, 0}, {{
       Hold[$CellContext`glConstMinAngleBetweenLatticeVectors$$], 
       Rational[1, 6] Pi}, 0}, {{
       Hold[$CellContext`glConstLocDefault$$], {{0.1, 1.3}, {1.9, 0.8}}}, 
      0}, {{
       Hold[$CellContext`glConstDefaultMass$$], 20}, 0}, {{
       Hold[$CellContext`glConstKDefaults$$], {0.25, 0.25, 0.25, 0.25, 0.25}},
       0}, {{
       Hold[$CellContext`glConstKMin$$], 0.05}, 0}, {{
       Hold[$CellContext`glConstKMax$$], 1}, 0}, {{
       Hold[$CellContext`glConstMMax$$], 30}, 0}, {{
       Hold[$CellContext`glConstWindowHalfWidth$$], 3}, 0}, {{
       Hold[$CellContext`glConstSpringColors$$], {
        RGBColor[
         Rational[2, 3], 0.33333333333333337`, 0], 
        RGBColor[0, 
         Rational[2, 3], 0], 
        RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
        RGBColor[0, 
         Rational[2, 3], 
         Rational[2, 3]], 
        RGBColor[
         Rational[2, 3], 
         Rational[2, 3], 0]}}, 0}, {{
       Hold[$CellContext`glConstPrimaryDisplaySize$$], {380, 380}}, 0}, {{
       Hold[$CellContext`glConstTextDisplayOffsetHack$$], {0.25, 0.25}}, 0}, {{
       Hold[$CellContext`glConstNeighboringCellIndexes$$], {{1, 0}, {0, 1}, {
       1, 1}, {1, -1}}}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstDefaultMass$$ = 
        20, $CellContext`glConstKDefaults$$ = {0.25, 0.25, 0.25, 0.25, 
         0.25}, $CellContext`glConstKMax$$ = 1, $CellContext`glConstKMin$$ = 
        0.05, $CellContext`glConstLocDefault$$ = {{0.1, 1.3}, {1.9, 
         0.8}}, $CellContext`glConstMinAngleBetweenLatticeVectors$$ = 
        Rational[1, 6] Pi, $CellContext`glConstMinSquaredDistanceFromOrigin$$ = 
        0.1, $CellContext`glConstMMax$$ = 
        30, $CellContext`glConstNeighboringCellIndexes$$ = {{1, 0}, {0, 1}, {
         1, 1}, {1, -1}}, $CellContext`glConstPrimaryDisplaySize$$ = {380, 
         380}, $CellContext`glConstSpringColors$$ = {
          RGBColor[
           Rational[2, 3], 0.33333333333333337`, 0], 
          RGBColor[0, 
           Rational[2, 3], 0], 
          RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
          RGBColor[0, 
           Rational[2, 3], 
           Rational[2, 3]], 
          RGBColor[
           Rational[2, 3], 
           Rational[2, 3], 
           0]}, $CellContext`glConstSpringColorsByN$$ = {}, \
$CellContext`glConstTextDisplayOffsetHack$$ = {0.25, 
         0.25}, $CellContext`glConstWindowHalfWidth$$ = 3, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`meshSize$$ = 
        8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
         1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tau$$ = 
        0, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ($CellContext`tick$$; Grid[{{
           
           TabView[{
            "dynamics" -> 
             Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; \
$CellContext`dynamicsControls], 
             "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
             Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; \
$CellContext`freqControls], "parameters" -> 
             Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; 
               If[$CellContext`rawNumberOfMasses$$ == 
                 1, {$CellContext`massSetter, $CellContext`m2Setter, \
$CellContext`km1, $CellContext`km2, $CellContext`km3, $CellContext`km4}, \
{$CellContext`massSetter, $CellContext`m2Setter, $CellContext`km1, \
$CellContext`km2, $CellContext`km3, $CellContext`km4, $CellContext`km5a, \
$CellContext`km5b}]]}, 
            Dynamic[$CellContext`tabNumber$$]], 
           Dynamic[
            
            If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
             If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
                False; $CellContext`bRefreshDynamics$$ = 
                True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
             If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
                  $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
                True, Null]; 
             If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
                  
                  Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`bRefreshDynPlot$$ = 
                False, Null]; \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$][$CellContext`tau$$], 
             
             If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
              If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
                 False; $CellContext`bRefreshDynamics$$ = 
                 True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
              If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
                Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], $CellContext`couplingLocator]]]}}]), 
      "Specifications" :> {{{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tau$$, 0}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`meshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`glConstMinSquaredDistanceFromOrigin$$, 0.1}, 0,
          ControlType -> 
         None}, {{$CellContext`glConstMinAngleBetweenLatticeVectors$$, 
          Rational[1, 6] Pi}, 0, ControlType -> 
         None}, {{$CellContext`glConstLocDefault$$, {{0.1, 1.3}, {1.9, 0.8}}},
          0, ControlType -> None}, {{$CellContext`glConstDefaultMass$$, 20}, 
         0, ControlType -> 
         None}, {{$CellContext`glConstKDefaults$$, {0.25, 0.25, 0.25, 0.25, 
          0.25}}, 0, ControlType -> 
         None}, {{$CellContext`glConstKMin$$, 0.05}, 0, ControlType -> 
         None}, {{$CellContext`glConstKMax$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`glConstMMax$$, 30}, 0, ControlType -> 
         None}, {{$CellContext`glConstWindowHalfWidth$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`glConstSpringColors$$, {
           RGBColor[
            Rational[2, 3], 0.33333333333333337`, 0], 
           RGBColor[0, 
            Rational[2, 3], 0], 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
           RGBColor[0, 
            Rational[2, 3], 
            Rational[2, 3]], 
           RGBColor[
            Rational[2, 3], 
            Rational[2, 3], 0]}}, 0, ControlType -> 
         None}, {{$CellContext`glConstPrimaryDisplaySize$$, {380, 380}}, 0, 
         ControlType -> 
         None}, {{$CellContext`glConstTextDisplayOffsetHack$$, {0.25, 0.25}}, 
         0, ControlType -> 
         None}, {{$CellContext`glConstNeighboringCellIndexes$$, {{1, 0}, {0, 
          1}, {1, 1}, {1, -1}}}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, "DefaultOptions" :> {}],
     ImageSizeCache->{987., {293., 300.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`u$$ = 
        Flatten[{$CellContext`glConstLocDefault$$, \
$CellContext`mLocDefault$$}, 1]; $CellContext`glConstSpringColorsByN$$ = 
        DeleteDuplicates[
          Flatten[
           Table[$CellContext`s Part[
               Append[$CellContext`glConstNeighboringCellIndexes$$, {0, 
                0}], $CellContext`n] -> 
            Part[$CellContext`glConstSpringColors$$, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 5}], 
           1]]; $CellContext`checkAgainstRange[
          Pattern[$CellContext`v, 
           Blank[]], 
          Pattern[$CellContext`default, 
           Blank[]], 
          Pattern[$CellContext`lowerLimit, 
           Blank[]], 
          Pattern[$CellContext`upperLimit, 
           Blank[]]] := Module[{$CellContext`result}, $CellContext`result = If[
             
             NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
           If[$CellContext`result < $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
           If[$CellContext`result > $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result]; \
$CellContext`springPoints[
          Pattern[$CellContext`a12, 
           Blank[List]], 
          Optional[
           Pattern[$CellContext`n, 
            Blank[Integer]], 8], 
          Optional[
           Pattern[$CellContext`h, 
            Blank[]], 0.05], 
          Optional[
           Pattern[$CellContext`f, 
            Blank[]], 0.1]] := 
        Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
           Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
           Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
             Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
           Dot[$CellContext`r, {$CellContext`n1, 0}]; {
            
            Table[$CellContext`a1 - $CellContext`r1 + 
             Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                  2 $CellContext`f) $CellContext`nd, $CellContext`h 
                Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0,
               1, 0.01}], 
            
            Table[$CellContext`a1 - $CellContext`r1 + 
             Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                  2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
            
            Table[$CellContext`a1 - $CellContext`r1 + 
             Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 
              0.01}]}]; $CellContext`indexLabel = Subscript[
          Style[#, Italic], #2]& ; $CellContext`kLable = Style[
          $CellContext`indexLabel["k", #], FontColor -> 
          Part[$CellContext`glConstSpringColors$$, #]]& ; \
$CellContext`massColors := Part[
          Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
          1]& ; $CellContext`massLabel := Style[
          $CellContext`indexLabel["m", #], 
          $CellContext`massColors[#]]& ; $CellContext`calcLineTable[
          Pattern[$CellContext`n, 
           Blank[List]], 
          Pattern[$CellContext`b, 
           Blank[List]], 
          Pattern[$CellContext`i, 
           Blank[List]]] := 
        Module[{$CellContext`first, $CellContext`second}, \
{$CellContext`first, $CellContext`second} = $CellContext`i; Table[
            
            Line[{(-Part[$CellContext`n, $CellContext`first]) 
               Part[$CellContext`b, $CellContext`first] + $CellContext`j 
               Part[$CellContext`b, $CellContext`second], 
              Part[$CellContext`n, $CellContext`first] 
               Part[$CellContext`b, $CellContext`first] + $CellContext`j 
               Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
             Part[$CellContext`n, $CellContext`second], 
             
             Part[$CellContext`n, $CellContext`second]}]]; \
$CellContext`calcReciprocalBasis[
          Pattern[$CellContext`loc, 
           Blank[List]]] := Inverse[
          Transpose[$CellContext`loc]]; $CellContext`pointsTable[
          Pattern[$CellContext`mPosFirstCell, 
           Blank[List]], 
          Pattern[$CellContext`latticeBasis, 
           Blank[List]], 
          Pattern[$CellContext`numberLatticeLinesToDisplay, 
           Blank[List]]] := 
        Table[$CellContext`mPosFirstCell + 
          Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
           
           Part[$CellContext`numberLatticeLinesToDisplay, 
            1]}, {$CellContext`j, -
           Part[$CellContext`numberLatticeLinesToDisplay, 2], 
           
           Part[$CellContext`numberLatticeLinesToDisplay, 
            2]}]; $CellContext`nMassesFromLocArray[
          Pattern[$CellContext`uLoc, 
           Blank[]]] := First[
           Dimensions[$CellContext`uLoc]] - 2; $CellContext`adjustedmoSel[
          Pattern[$CellContext`rNumM, 
           Blank[]], 
          Pattern[$CellContext`mOrigInd, 
           Blank[]], 
          Pattern[$CellContext`m1Ind, 
           Blank[]]] := If[$CellContext`rNumM > 2, 
          If[$CellContext`mOrigInd == $CellContext`m1Ind, 
           First[
            DeleteCases[
             
             Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
          First[
           Delete[
            Range[
            2], $CellContext`m1Ind]]]; $CellContext`constructKArrayElements[
          Pattern[$CellContext`i$, 
           Blank[Integer]], 
          Pattern[$CellContext`j$, 
           Blank[Integer]]] := 
        Module[{$CellContext`a$}, $CellContext`a$ = Flatten[
             
             Table[{$CellContext`i$, $CellContext`j$, $CellContext`s 
                Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`n]} -> 
              Part[$CellContext`glConstKDefaults$$, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
          If[$CellContext`i$ < $CellContext`j$, 
            
            Append[$CellContext`a$, {$CellContext`i$, $CellContext`j$, {0, 
               0}} -> Part[$CellContext`glConstKDefaults$$, 
               5]], $CellContext`a$]]; $CellContext`constructKArray[
          Pattern[$CellContext`r, 
           Blank[Integer]]] := Flatten[
          Table[
           $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2]; $CellContext`returnAlteredKArrayElements[
          Pattern[$CellContext`kA$, 
           Blank[List]], 
          Pattern[$CellContext`m1Ind$, 
           Blank[Integer]], 
          Pattern[$CellContext`m2Ind$, 
           Blank[Integer]], 
          Pattern[$CellContext`ni$, 
           Blank[Integer]], 
          Pattern[$CellContext`v$, 
           Blank[]]] := 
        ReplaceAll[$CellContext`kA$, {({$CellContext`m1Ind$, \
$CellContext`m2Ind$, 
              
              Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]} -> Blank[]) :> ({$CellContext`m1Ind$, $CellContext`m2Ind$, 
              
              Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]} -> $CellContext`v$), ({$CellContext`m1Ind$, \
$CellContext`m2Ind$, -
              Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]} -> 
            Blank[]) :> ({$CellContext`m1Ind$, $CellContext`m2Ind$, -
              Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]} -> $CellContext`v$)}]; \
$CellContext`returnAlteredKarrayOriginElement[
          Pattern[$CellContext`kA, 
           Blank[List]], 
          Pattern[$CellContext`m1Ind, 
           Blank[Integer]], 
          Pattern[$CellContext`moInd, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[]]] := 
        Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
             Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
          ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
             Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]; \
$CellContext`selectVFromKarray[
          Pattern[$CellContext`kA$, 
           Blank[List]], 
          Pattern[$CellContext`m1Ind$, 
           Blank[Integer]], 
          Pattern[$CellContext`m2Ind$, 
           Blank[Integer]], 
          Pattern[$CellContext`ni$, 
           Blank[Integer]]] := 
        ReplaceAll[{$CellContext`m1Ind$, $CellContext`m2Ind$, 
           
           Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]}, $CellContext`kA$]; $CellContext`selectOriginVFromKarray[
          Pattern[$CellContext`kA, 
           Blank[List]], 
          Pattern[$CellContext`m1Ind, 
           Blank[Integer]], 
          Pattern[$CellContext`moInd, 
           Blank[Integer]]] := ReplaceAll[
          Append[
           Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
           0}], $CellContext`kA]; \
$CellContext`returnKarrayForAdditionalMassIndex[
          Pattern[$CellContext`kA, 
           Blank[List]], 
          Pattern[$CellContext`nmNew, 
           Blank[Integer]]] := 
        Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
             Map[$CellContext`constructKArrayElements[
               Part[#, 1], 
               Part[#, 2]]& , 
              Select[
               Flatten[
                
                Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
               Max[#] == $CellContext`nmNew& ]], 2]; 
          Flatten[{$CellContext`kA, $CellContext`k2}, 
            1]]; $CellContext`resetLatticeVectorsIfAngleTooSmall[
          Pattern[$CellContext`uLoc$, 
           Blank[List]], 
          Pattern[$CellContext`minAngle$, 
           Blank[]]] := Module[{$CellContext`t$}, $CellContext`t$ = Abs[
             ArcCos[
              Dot[
               Normalize[
                Part[$CellContext`uLoc$, 1]], 
               Normalize[
                Part[$CellContext`uLoc$, 2]]]]]; $CellContext`t$ = 
           If[$CellContext`t$ > Pi/2, Pi - $CellContext`t$, $CellContext`t$]; 
          If[$CellContext`t$ < $CellContext`minAngle$, \
$CellContext`glConstLocDefault$$, {
             Part[$CellContext`uLoc$, 1], 
             Part[$CellContext`uLoc$, 2]}]]; $CellContext`locDependent[
          Pattern[$CellContext`uLoc$, 
           Blank[List]], 
          Pattern[$CellContext`numMasses$, 
           Blank[Integer]], 
          Pattern[$CellContext`rma$, 
           Blank[List]]] := 
        Module[{$CellContext`m$, $CellContext`latticeBasis$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`reciprocalBasis$, \
$CellContext`mObliqueComponents$, $CellContext`mPosFirstCell$, \
$CellContext`reciprocalNorms$}, $CellContext`latticeBasis$ = 
           Take[$CellContext`uLoc$, 2]; $CellContext`m$ = 
           Drop[$CellContext`uLoc$, 
             2]; $CellContext`numberLatticeLinesToDisplay$ = Map[Ceiling[
              Abs[$CellContext`glConstWindowHalfWidth$$/Part[
                Part[$CellContext`latticeBasis$, #], #]]]& , 
             Range[
             2]]; $CellContext`reciprocalBasis$ = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis$]; \
$CellContext`reciprocalNorms$ = Map[Norm[
              Part[$CellContext`reciprocalBasis$, #]]& , 
             Range[2]]; $CellContext`mObliqueComponents$ = Table[
             Dot[
              Part[$CellContext`m$, $CellContext`i], 
              
              Part[$CellContext`reciprocalBasis$, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses$}, {$CellContext`j, 
              2}]; $CellContext`mPosFirstCell$ = 
           Map[Part[$CellContext`m$, #] - Dot[
              Floor[
               
               Part[$CellContext`mObliqueComponents$, #]], \
$CellContext`latticeBasis$]& , 
             Range[$CellContext`numMasses$]]; {
           "mScalarArray" -> $CellContext`rma$, 
            "numberOfMasses" -> $CellContext`numMasses$, 
            "latticeBasis" -> $CellContext`latticeBasis$, "latticeNorms" -> 
            Map[Norm[
               Part[$CellContext`latticeBasis$, #]]& , 
              Range[2]], "latticeUnitVectors" -> Map[Normalize[
               Part[$CellContext`latticeBasis$, #]]& , 
              Range[2]], 
            "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay$, 
            "reciprocalBasis" -> $CellContext`reciprocalBasis$, 
            "reciprocalNorms" -> $CellContext`reciprocalNorms$, "qMaxVec" -> 
            2 Pi $CellContext`reciprocalNorms$, 
            "mObliqueComponents" -> $CellContext`mObliqueComponents$, 
            "mPosFirstCell" -> $CellContext`mPosFirstCell$, "pointsDataTable" -> 
            Map[$CellContext`pointsTable[
               
               Part[$CellContext`mPosFirstCell$, #], \
$CellContext`latticeBasis$, $CellContext`numberLatticeLinesToDisplay$]& , 
              Range[$CellContext`numMasses$]], "lineTable" -> 
            Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay$, $CellContext`latticeBasis$, #]& , 
              Permutations[{1, 2}]]}]; $CellContext`projOpU[
          Pattern[$CellContext`v, 
           Blank[List]]] := {{
          Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
           Part[$CellContext`v, 2]}, {
          Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
           Part[$CellContext`v, 2]^2}}; $CellContext`projOp[
          Pattern[$CellContext`v, 
           Blank[List]]] := $CellContext`projOpU[$CellContext`v]/
         Dot[$CellContext`v, $CellContext`v]; $CellContext`relativeDifferences[
          Pattern[$CellContext`r, 
           Blank[List]], 
          Pattern[$CellContext`mp, 
           Blank[List]], {
           Pattern[$CellContext`mIndex1, 
            Blank[Integer]], 
           Pattern[$CellContext`mIndex2, 
            Blank[Integer]], 
           Pattern[$CellContext`n, 
            Blank[List]]}] := 
        Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther}, \
$CellContext`pOrigin = 
           Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
           Part[$CellContext`mp, $CellContext`mIndex2] + 
            Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
           Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}]; \
$CellContext`calculateCouplings[
          Pattern[$CellContext`ld, 
           Blank[List]], 
          Pattern[$CellContext`kA, 
           Blank[List]]] := 
        Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
           ReplaceAll[{
             "latticeBasis", "mPosFirstCell", 
              "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
           Map[Append[#, 
              $CellContext`relativeDifferences[$CellContext`r, \
$CellContext`mp, 
               First[#]]]& , 
             ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
           Map[Flatten[{
               Part[#, 1], {
                Part[#, 2]}, 
               Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
             Sort[
              
              Select[$CellContext`t, And[
               Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
              Part[#, 5] < 
              Part[#2, 
                5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
           Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
           Flatten[{$CellContext`t2, 
              Map[Flatten[{{
                  Part[#, 2], 
                  Part[#, 1]}, 
                 Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
           Table[
             Sort[
              Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
              Part[#, 5] < 
              Part[#2, 
                5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}]; $CellContext`plotSprings[
          Pattern[$CellContext`uLoc$, 
           Blank[List]], 
          Pattern[$CellContext`ld$, 
           Blank[List]], 
          Pattern[$CellContext`cd$, 
           Blank[List]], 
          Pattern[$CellContext`m1Ind$, 
           Blank[Integer]], 
          Pattern[$CellContext`m2Ind$, 
           Blank[Integer]], 
          Pattern[$CellContext`moInd$, 
           Blank[Integer]]] := 
        Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, \
$CellContext`latticeBasis$ = Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
           Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
           Part[$CellContext`uLoc$, 
             2]; {$CellContext`mLoc$, $CellContext`reciprocalBasis$, \
$CellContext`pointsDataTable$, $CellContext`numberLatticeLinesToDisplay$, \
$CellContext`lines$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
           ReplaceAll[{
             "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
              "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
              "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
             Pattern[$CellContext`n$, 
              Blank[Integer]]] := {
             $CellContext`massColors[$CellContext`n$], Null, 
             PointSize[
              
              Sqrt[(Part[$CellContext`mScalarArray$, \
$CellContext`n$]/$CellContext`glConstMMax$$)/500]], 
             Map[Point[#]& , 
              Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
             Text[
              $CellContext`massLabel[$CellContext`n$], 
              Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack$$]}; $CellContext`cOrigin$ = Select[
             Part[
              Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
             Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
             Part[
              Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
             Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
              $CellContext`springPoints[
               Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
              ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
            AppendTo[$CellContext`g$, 
             Map[ListLinePlot[
               $CellContext`springPoints[
                Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
               ReplaceAll[
                 
                 Part[#, 
                  3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
             Graphics[
              Flatten[{{$CellContext`lines$, Blue, 
                 Map[Arrow[{{0, 0}, 
                    Part[$CellContext`reciprocalBasis$, #]}]& , 
                  Range[2]], Thick, 
                 Arrowheads[0.05], Red, 
                 Map[Arrow[{{0, 0}, 
                    Part[$CellContext`latticeBasis$, #]}]& , 
                  Range[2]], 
                 Text[
                  OverVector[
                  "a"], $CellContext`aLoc$/
                   2 + $CellContext`glConstTextDisplayOffsetHack$$], 
                 Text[
                  OverVector[
                  "b"], $CellContext`bLoc$/
                   2 + $CellContext`glConstTextDisplayOffsetHack$$]}, 
                Map[$CellContext`pointsList$[#]& , 
                 Range[$CellContext`numberOfMasses$]]}], 
              PlotRange -> {{(-$CellContext`glConstWindowHalfWidth$$)/
                 2, $CellContext`glConstWindowHalfWidth$$}, \
{(-$CellContext`glConstWindowHalfWidth$$)/
                 2, $CellContext`glConstWindowHalfWidth$$}}, 
              ImageSize -> $CellContext`glConstPrimaryDisplaySize$$], \
$CellContext`g$}]]; $CellContext`oneTermOfdynamicsMatrix[{
           Pattern[$CellContext`k, 
            Blank[Integer]], 
           Pattern[$CellContext`j, 
            Blank[Integer]], 
           Pattern[$CellContext`mVec, 
            Blank[List]], 
           Pattern[$CellContext`kS, 
            Blank[]], 
           Blank[], 
           Blank[], 
           Blank[], 
           Pattern[$CellContext`proj, 
            Blank[List]]}, 
          Pattern[$CellContext`r, 
           Blank[List]], 
          Pattern[$CellContext`mk, 
           Blank[]], 
          Pattern[$CellContext`epsilon, 
           Blank[List]], 
          Pattern[$CellContext`mA, 
           Blank[List]]] := $CellContext`kS 
         Dot[$CellContext`proj, 
           Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
           Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
                Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
            Sqrt[$CellContext`mk 
             Part[$CellContext`mA, $CellContext`j]])]; \
$CellContext`dynamicsMatrix[
          Pattern[$CellContext`ld, 
           Blank[List]], 
          Pattern[$CellContext`cd, 
           Blank[List]]] := 
        Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
             Sort[
              Flatten[$CellContext`cd, 2]], 
             First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
           ReplaceAll[{
             "latticeBasis", "mScalarArray", 
              "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
           Partition[
             IdentityMatrix[2 $CellContext`numberOfMasses], 
             2]; $CellContext`res = Partition[
             Flatten[
              Table[
               Total[
                Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                  
                  Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                 
                 Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
             2 $CellContext`numberOfMasses]; 
          ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ]; \
$CellContext`calcDynamics[
          Pattern[$CellContext`mAtQ, 
           Blank[List]]] := Map[{
           Sqrt[
            Part[#, 1]], 
           Part[#, 2]}& , 
          Transpose[
           Eigensystem[$CellContext`mAtQ]]]; $CellContext`showDynamics[
          Pattern[$CellContext`ld$, 
           Blank[List]], 
          Pattern[$CellContext`dynAtOmegaIndex$, 
           Blank[List]], 
          Pattern[$CellContext`sc$, 
           Blank[]], 
          Pattern[$CellContext`ql$, 
           Blank[]]] := 
        Module[{$CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`e$, \
$CellContext`omega$, $CellContext`points$, $CellContext`lines$, \
$CellContext`nu$, $CellContext`a$, $CellContext`b$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, {{$CellContext`a$, \
$CellContext`b$}, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
           ReplaceAll[{
             "latticeBasis", "pointsDataTable", "numberLatticeLinesToDisplay",
               "lineTable", "mScalarArray", 
              "numberOfMasses"}, $CellContext`ld$]; {$CellContext`omega$, \
$CellContext`e$} = $CellContext`dynAtOmegaIndex$; $CellContext`e$ = 
           Partition[$CellContext`e$, 2]; $CellContext`points$ = 
           Table[Part[$CellContext`pointsDataTable$, $CellContext`k] + 
             Table[$CellContext`sc$ 
               Re[Part[$CellContext`e$, $CellContext`k] 
                 E^(I (
                    Dot[$CellContext`ql$, $CellContext`a$ $CellContext`i + \
$CellContext`b$ $CellContext`j] - $CellContext`omega$ #))], {$CellContext`i, -
                Part[$CellContext`numberLatticeLinesToDisplay$, 1], 
                
                Part[$CellContext`numberLatticeLinesToDisplay$, 
                 1]}, {$CellContext`j, -
                Part[$CellContext`numberLatticeLinesToDisplay$, 2], 
                
                Part[$CellContext`numberLatticeLinesToDisplay$, 
                 2]}]& , {$CellContext`k, $CellContext`numberOfMasses$}]; \
$CellContext`nu$ = 
           2 Pi If[$CellContext`omega$ == 0, 1, 1/$CellContext`omega$]; Show[{
             Table[
              ListPlot[
               Part[$CellContext`points$, $CellContext`k][$CellContext`nu$ #],
                PlotRange -> {{(-$CellContext`glConstWindowHalfWidth$$)/
                  2, $CellContext`glConstWindowHalfWidth$$}, \
{(-$CellContext`glConstWindowHalfWidth$$)/
                  2, $CellContext`glConstWindowHalfWidth$$}}, 
               ImageSize -> $CellContext`glConstPrimaryDisplaySize$$, 
               PlotStyle -> Directive[
                 PointSize[
                  
                  Sqrt[(Part[$CellContext`mScalarArray$, \
$CellContext`k]/$CellContext`glConstMMax$$)/350]], 
                 $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$}], 
             
             Graphics[{$CellContext`lines$}]}]& ]; \
$CellContext`frequencyPlotCalc[
          Pattern[$CellContext`ld$, 
           Blank[List]], 
          Pattern[$CellContext`m$, 
           Blank[]], 
          Pattern[$CellContext`meshSz$, 
           Blank[Integer]]] := 
        Module[{$CellContext`eigTable2D$, $CellContext`eigTable1D$, \
$CellContext`qMax$, $CellContext`omegaPointList2D$, \
$CellContext`omegaPointList1D$, $CellContext`range$, \
$CellContext`numberOfMasses$}, {$CellContext`qMax$, \
$CellContext`numberOfMasses$} = 
           ReplaceAll[{
             "qMaxVec", 
              "numberOfMasses"}, $CellContext`ld$]; $CellContext`eigTable2D$ = 
           Flatten[
             Re[
              Table[{{$CellContext`qx, $CellContext`qy}, 
                Eigenvalues[
                 N[
                  $CellContext`m$[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, (-Part[$CellContext`qMax$, 1])/2, 
                Part[$CellContext`qMax$, 1]/2, 
                Part[$CellContext`qMax$, 
                  1]/$CellContext`meshSz$}, {$CellContext`qy, (-
                 Part[$CellContext`qMax$, 2])/2, Part[$CellContext`qMax$, 2]/
                2, Part[$CellContext`qMax$, 2]/$CellContext`meshSz$}]], 
             1]; $CellContext`omegaPointList2D$[
             Pattern[$CellContext`nn$, 
              Blank[]]] := Map[Flatten[{
               Part[#, 1], 
               Part[
                Sqrt[
                 
                 Part[#, 
                  2]], $CellContext`nn$]}]& , $CellContext`eigTable2D$]; \
$CellContext`range$ = Range[2 $CellContext`numberOfMasses$]; ListPlot3D[
            Map[$CellContext`omegaPointList2D$[#]& , $CellContext`range$], 
            PlotRange -> Full, 
            ImageSize -> $CellContext`glConstPrimaryDisplaySize$$, 
            AxesLabel -> {
             "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
              "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]]; \
$CellContext`showFreqPlot[
          Pattern[$CellContext`qpl, 
           Blank[List]], 
          Pattern[$CellContext`freqPlotData, 
           Blank[]]] := 
        Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
             Graphics3D[
              Polygon[{{
                 Part[$CellContext`aa, 1], 
                 Part[$CellContext`aa, 2], 0}, {
                 Part[$CellContext`bb, 1], 
                 Part[$CellContext`bb, 2], 0}, {
                 Part[$CellContext`bb, 1], 
                 Part[$CellContext`bb, 2], 23}, {
                 Part[$CellContext`aa, 1], 
                 Part[$CellContext`aa, 2], 
                 23}}]]}]]; $CellContext`couplingLocator := LocatorPane[
          Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                Dimensions[#]] < 3, 
              
              Flatten[{$CellContext`glConstLocDefault$$, \
$CellContext`mLocDefault$$}, 1], 
              If[First[
                 Dimensions[#]] > 7, 
               Take[#, 7], #]]; 
           Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
              First[
                Dimensions[$CellContext`rawArrayOfMasses$$]]; 
             If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                 $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
               
               While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass$$]; 
                Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                Part[
                 Part[$CellContext`kArray$$, All, 1], All, 1]]; 
             If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
               Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
               
               While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`growKarray[$CellContext`km$]]]]; 
           Part[$CellContext`u$$, 1] = If[Dot[
                Part[$CellContext`u$$, 1], 
                
                Part[$CellContext`u$$, 
                 1]] < $CellContext`glConstMinSquaredDistanceFromOrigin$$, 
              Part[$CellContext`glConstLocDefault$$, 1], 
              Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                Part[$CellContext`u$$, 2], 
                
                Part[$CellContext`u$$, 
                 2]] < $CellContext`glConstMinSquaredDistanceFromOrigin$$, 
              Part[$CellContext`glConstLocDefault$$, 2], 
              Part[$CellContext`u$$, 2]]; {
              Part[$CellContext`u$$, 1], 
              
              Part[$CellContext`u$$, 
               2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors$$]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
            If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
              1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
            If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
              1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
            If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
              1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
              1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
              2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
              3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
              4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
            ReplaceAll[
              "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
             2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
            True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
          $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
          LocatorAutoCreate -> True, ContinuousAction -> 
          False]; $CellContext`massSetter := {
          Row[{
            Text["mass: "], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 1, 
              SetterBar[
               
               Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                   ReplaceAll[
                   "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                   1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                   2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                   3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                   4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                Range[$CellContext`rawNumberOfMasses$$]]], 
              $CellContext`massLabel[1]]]}], 
          Row[{
            Manipulator[
             
             Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax$$]; 
              Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
               ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                  "mScalarArray" -> Blank[]) :> (
                  "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
               Not[$CellContext`tick$$])& ], {0.25, 
              Dynamic[$CellContext`glConstMMax$$]}, ImageSize -> Tiny, 
             ContinuousAction -> False, AppearanceElements -> {"InputField"}],
             " ", 
            Dynamic[
             
             NumberForm[$CellContext`massValue, {2, 
              1}]]}]}; $CellContext`m2Setter := {
          Text["coupling to neighbouring: "], 
          Dynamic[
           If[$CellContext`rawNumberOfMasses$$ > 1, 
            SetterBar[
             
             Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                 1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
             Map[# -> $CellContext`massLabel[#]& , 
              Range[$CellContext`rawNumberOfMasses$$]]], 
            $CellContext`massLabel[1]]]}; $CellContext`km1 := {
          Row[{
            Text["horizontal: "], 
            $CellContext`kLable[1], " || ", 
            OverVector["a"], " "}], 
          Row[{
            Manipulator[
             
             Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                 1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
               True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
              Dynamic[$CellContext`glConstKMin$$], 
              Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
             ContinuousAction -> False, AppearanceElements -> {"InputField"}],
             " ", 
            Dynamic[
             NumberForm[$CellContext`k1$$, {3, 2}]]}]}; $CellContext`km2 := {
          Row[{
            Text["vertical: "], 
            $CellContext`kLable[2], " || ", 
            OverVector["b"], " "}], 
          Row[{
            Manipulator[
             
             Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                 2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
               True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
              Dynamic[$CellContext`glConstKMin$$], 
              Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
             ContinuousAction -> False, AppearanceElements -> {"InputField"}],
             " ", 
            Dynamic[
             NumberForm[$CellContext`k2$$, {3, 2}]]}]}; $CellContext`km3 := {
          Row[{
            Text["diagonal: "], 
            $CellContext`kLable[3], " || (", 
            OverVector["b"], " + ", 
            OverVector["a"], ") "}], 
          Row[{
            Manipulator[
             
             Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                 3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
               True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
              Dynamic[$CellContext`glConstKMin$$], 
              Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
             ContinuousAction -> False, AppearanceElements -> {"InputField"}],
             " ", 
            Dynamic[
             NumberForm[$CellContext`k3$$, {3, 2}]]}]}; $CellContext`km4 := {
          Row[{
            Text["diagonal: "], 
            $CellContext`kLable[4], " || (", 
            OverVector["b"], " - ", 
            OverVector["a"], ") "}], 
          Row[{
            Manipulator[
             
             Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                 4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
               True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
              Dynamic[$CellContext`glConstKMin$$], 
              Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
             ContinuousAction -> False, AppearanceElements -> {"InputField"}],
             " ", 
            Dynamic[
             NumberForm[$CellContext`k4$$, {3, 2}]]}]}; $CellContext`km5a := {
          Row[{
            Text["coupling from "], 
            Dynamic[
             $CellContext`massLabel[$CellContext`m1Sel$$]], 
            Text[" to: "]}], 
          Dynamic[
           If[$CellContext`rawNumberOfMasses$$ > 2, 
            SetterBar[
             
             Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
               Not[$CellContext`tick$$])& ], 
             Map[# -> $CellContext`massLabel[#]& , 
              DeleteCases[
               
               Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
            Dynamic[
             $CellContext`massLabel[
              First[
               Delete[
                Range[2], $CellContext`m1Sel$$]]]]]]}; $CellContext`km5b := {
          Row[{
            $CellContext`kLable[5], ": "}], 
          Row[{
            Manipulator[
             
             Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
               True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
              Dynamic[$CellContext`glConstKMin$$], 
              Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
             ContinuousAction -> False, AppearanceElements -> {"InputField"}],
             " ", 
            Dynamic[
             
             NumberForm[$CellContext`k5$$, {3, 
              2}]]}]}; $CellContext`freqControls := {
          Row[{
            Text["mesh size "], 
            Manipulator[
             
             Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
               True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {2, 
             30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
             AppearanceElements -> {"InputField"}], " ", 
            Dynamic[$CellContext`meshSize$$]}], 
          LocatorPane[
           Dynamic[$CellContext`qPlaneLoc$$], 
           Dynamic[
            (Graphics[{
              Lighter[Gray], 
              Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                 Part[#, 1], -Part[#, 2]}, {
                 Part[#, 1], 
                 Part[#, 2]}, {-Part[#, 1], 
                 Part[#, 2]}}], Black, 
              Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                 Part[#, 1]}, {-Part[#, 2], 
                 Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
             ReplaceAll[
             "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
           ContinuousAction -> False]}; $CellContext`dynamicsControls := {
          Row[{
            OverVector["q"], " = ", 
            
            Module[{$CellContext`qm$}, $CellContext`qm$ = 
              ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
             Slider2D[
               
               Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
               ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
            " 2 \[Pi] ", 
            Dynamic[
             NumberForm[
              MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
          Row[{
            Text["time, normalized to one period:"]}], 
          Row[{
            Manipulator[
             
             Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
               Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
             ContinuousAction -> True, Appearance -> "Open"]}, 
           ImageSize -> {200, 60}], 
          Row[{
            Text["oscillation scale factor:"]}], 
          Row[{Manipulator[
              
              Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                  1]; $CellContext`bRefreshDynPlot$$ = 
                True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
              0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
              AppearanceElements -> {"InputField"}] " ", 
            Dynamic[
             NumberForm[$CellContext`scale$$, {3, 2}]]}], 
          Text[
           Text["Angular frequency \[Omega](q), selection:"]], 
          Dynamic[
           SetterBar[
            
            Dynamic[$CellContext`omegaIndex$$, ($CellContext`omegaIndex$$ = #; \
$CellContext`bRefreshDynPlot$$ = True; $CellContext`tick$$ = 
              Not[$CellContext`tick$$])& ], 
            Range[
            2 $CellContext`rawNumberOfMasses$$]]]}; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
       Module[{$CellContext`n$}, $CellContext`n$ = 2; 
         While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = $CellContext`growKarray[$CellContext`n$]; 
           Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
        ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
         2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
          $CellContext`matrix$$[$CellContext`qLoc$$]]; $CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
          
          Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; Null}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6012857773282785`*^9, 3.6012861001927457`*^9, 3.601286198084345*^9, 
   3.601286247530173*^9, 3.601286328832823*^9, {3.601294571924301*^9, 
   3.6012945869541607`*^9}, 3.601294752675639*^9, {3.6012948263518534`*^9, 
   3.601294870949404*^9}, 3.6012949605945315`*^9, 3.601295003382979*^9, 
   3.601295077853238*^9, {3.6012951322153473`*^9, 3.6012951513134403`*^9}, {
   3.60129547878317*^9, 3.6012955200415297`*^9}, 3.6012955567646303`*^9, 
   3.601295667654973*^9, 3.601295860032976*^9, {3.601295926636786*^9, 
   3.6012959734854655`*^9}, {3.601296411747533*^9, 3.6012964342048173`*^9}, {
   3.6012964888829446`*^9, 3.6012965154394636`*^9}}]
}, Open  ]]
},
WindowSize->{1584, 765},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 13550, 273, 1678, "Input"],
Cell[CellGroupData[{
Cell[14132, 297, 181126, 4008, 21779, "Input"],
Cell[195261, 4307, 338701, 5799, 647, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
