(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[   1849327,      33704]
NotebookOptionsPosition[   1843719,      33539]
NotebookOutlinePosition[   1845368,      33589]
CellTagsIndexPosition[   1845016,      33577]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Phonon Modes for 2D Lattice Vibrations", "DemoTitle",
 CellChangeTimes->{3.600887141142584*^9}],

Cell["", "InitializationSection"],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"tick", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Dynamic", "@", 
      RowBox[{"If", "[", " ", 
       RowBox[{
        RowBox[{"tabNumber", " ", "\[Equal]", " ", "dynTab"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", " ", 
           RowBox[{"bRefreshMatrix", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"matrix", " ", "=", " ", "dynamicsMatrix"}], " ", ";", 
              RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
              RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";", 
              " ", 
              RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
             ")"}], ","}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", " ", 
           RowBox[{"bRefreshDynamics", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"dynamics", " ", "=", " ", "calcDynamics"}], " ", ";", 
              RowBox[{"bRefreshDynamics", " ", "=", " ", "False"}], " ", ";", 
              RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}]}], ")"}], 
            ","}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", " ", 
           RowBox[{"bRefreshDynPlot", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"dynPlot", " ", "=", " ", "showDynamics"}], " ", ";", 
              RowBox[{"bRefreshDynPlot", " ", "=", " ", "False"}]}], ")"}], 
            ","}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"showDynamics", "[", "tau", "]"}]}], "\[IndentingNewLine]", 
         ")"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Plot", "[", 
          RowBox[{"x", ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "*)"}], 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"tabNumber", " ", "\[Equal]", " ", "freqTab"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", " ", 
             RowBox[{"bRefreshMatrix", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"matrix", " ", "=", " ", "dynamicsMatrix"}], " ", ";", 
                RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
                RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";",
                 " ", 
                RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
               ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"If", "[", " ", 
             RowBox[{"bRefreshFreqPlot", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"freqPlot", " ", "=", " ", "frequencyPlotCalc"}], " ",
                 ";", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"Beep", "[", "]"}], " ", ";"}], "*)"}], 
                RowBox[{"bRefreshFreqPlot", " ", "=", " ", "False"}]}], " ", 
               ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
            "showFreqPlot"}], "\[IndentingNewLine]", ")"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"Plot", "[", 
            RowBox[{
             RowBox[{"-", "x"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "*)"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          "couplingLocator"}], "\[IndentingNewLine]", " ", "]"}]}], "]"}]}]}],
     " ", 
    RowBox[{"(*", 
     RowBox[{"If", ",", "If"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"(*", "0", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
    ",", " ", 
    RowBox[{"Dynamic", "@", 
     RowBox[{"If", "[", " ", 
      RowBox[{
       RowBox[{"rawNumberOfMasses", " ", "\[Equal]", " ", "1"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"TabView", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"\"\<dynamics\>\"", " ", "\[Rule]", "  ", 
            RowBox[{"Column", "[", " ", 
             RowBox[{
              RowBox[{"tabNumber", " ", "=", " ", "dynTab"}], " ", ";", 
              "dynamicsControls"}], " ", "]"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{
           "\"\<\[Omega](\!\(\*OverscriptBox[\(q\), \
\(\[RightVector]\)]\))\>\"", " ", "\[Rule]", "  ", 
            RowBox[{"Row", "[", " ", 
             RowBox[{
              RowBox[{"tabNumber", " ", "=", " ", "freqTab"}], " ", ";", 
              "freqControls"}], " ", "]"}]}], "\[IndentingNewLine]", ",", " ", 
           RowBox[{"\"\<parameters\>\"", "\[Rule]", 
            RowBox[{"Grid", "[", " ", 
             RowBox[{
              RowBox[{"tabNumber", " ", "=", " ", "parametersTab"}], " ", ";", 
              RowBox[{"{", " ", "\[IndentingNewLine]", 
               RowBox[{
               "massSetter", ",", "m2Setter", ",", "km1", ",", "km2", ",", 
                "km3", ",", "km4"}], " ", "}"}]}], " ", "]"}]}]}], 
          "\[IndentingNewLine]", "}"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{"Dynamic", " ", "@", "tabNumber"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"250", ",", "350"}], "}"}]}]}], " ", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"TabView", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"\"\<dynamics\>\"", " ", "\[Rule]", "  ", 
            RowBox[{"Column", "[", " ", 
             RowBox[{
              RowBox[{"tabNumber", " ", "=", " ", "dynTab"}], " ", ";", 
              "dynamicsControls"}], " ", "]"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{
           "\"\<\[Omega](\!\(\*OverscriptBox[\(q\), \
\(\[RightVector]\)]\))\>\"", " ", "\[Rule]", "  ", 
            RowBox[{"Row", "[", " ", 
             RowBox[{
              RowBox[{"tabNumber", " ", "=", " ", "freqTab"}], " ", ";", 
              "freqControls"}], " ", "]"}]}], "\[IndentingNewLine]", ",", " ", 
           RowBox[{"\"\<parameters\>\"", "\[Rule]", 
            RowBox[{"Grid", "[", " ", 
             RowBox[{
              RowBox[{"tabNumber", " ", "=", " ", "parametersTab"}], " ", ";", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<mp: \>\"", ",", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    "\"\<mPosFirstCell\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<tn: \>\"", ",", " ", "tabNumber"}], "}"}], 
                 ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<qLoc = \>\"", ",", " ", "qLoc"}], "}"}], ","}],
                 "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<qPlaneLoc = \>\"", ",", " ", "qPlaneLoc"}], 
                  "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<u = \>\"", ",", " ", "u"}], "}"}], ","}], 
                "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"\"\<qr:\>\"", " ", ",", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], ")"}]}], "}"}],
                  ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<cd:\>\"", ",", " ", 
                   RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], "}"}], ","}], 
                "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<cd:\>\"", ",", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}]}], "}"}], 
                 ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"\"\<m1Sel, m2Sel, moSel = \>\"", ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"m1Sel", ",", " ", "m2Sel", ",", " ", "moSel"}], 
                    "}"}]}], "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{
                  "\"\<rawArrayOfMasses = \>\"", ",", " ", 
                   "rawArrayOfMasses"}], " ", "}"}], ","}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<range \[Omega]: \>\"", ",", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", "rawNumberOfMasses"}], "]"}]}], "}"}], ","}],
                 "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<kArray = \>\"", ",", " ", "kArray"}], "}"}], 
                 ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<km: \>\"", ",", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], " ", "//", " ", 
                    "Max"}]}], "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<km: \>\"", ",", " ", 
                   RowBox[{"DeleteDuplicates", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ")"}]}]}], " ", 
                  "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<couplingData = \>\"", ",", " ", "couplingData"}], 
                  "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<k1, k2, k3, k4, k5 = \>\"", ",", " ", 
                   RowBox[{"{", 
                    RowBox[{
                    "k1", ",", " ", "k2", ",", " ", "k3", ",", " ", "k4", ",",
                     " ", "k5"}], "}"}]}], "}"}], ","}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<ms: \>\"", ",", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<nm: \>\"", ",", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    "\"\<numberOfMasses\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<nm: \>\"", ",", " ", "nMassesFromU"}], "}"}], 
                 ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<re: \>\"", ",", " ", 
                   RowBox[{"2", " ", "Pi", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<reciprocalNorms\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}]}], "}"}], ","}],
                 "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<sc: \>\"", ",", " ", 
                   RowBox[{"DeleteDuplicates", "@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", " ", 
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{"nArray", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
                    RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
                    RowBox[{"foo", "[", "n", "]"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"s", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}],
                     ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", 
                    "1"}], "]"}]}]}], " ", "}"}], ","}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<mm: \>\"", ",", 
                   RowBox[{
                    RowBox[{"matrix", "[", "qLoc", "]"}], " ", "//", " ", 
                    "MatrixForm"}]}], "}"}], ","}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<mm: \>\"", ",", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"SplitBy", "[", " ", 
                    RowBox[{
                    RowBox[{"Sort", "@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"couplingData", ",", " ", "2"}], "]"}]}], " ", 
                    ",", " ", "First"}], " ", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "}"}], ","}], 
                "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{
               "massSetter", ",", "m2Setter", ",", "km1", ",", "km2", ",", 
                "km3", ",", "km4", ",", " ", "km5a", ",", "km5b"}], " ", 
               "}"}]}], " ", "]"}]}]}], "\[IndentingNewLine]", "}"}], ",", 
         " ", "\[IndentingNewLine]", 
         RowBox[{"Dynamic", " ", "@", "tabNumber"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"250", ",", "350"}], "}"}]}]}], " ", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"tick", ",", "False"}], "}"}], ",", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"qPlaneLoc", ",", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"qLoc", ",", 
        RowBox[{"{", "}"}]}], "}"}], ",", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"tau", ",", "0"}], "}"}], ",", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"omegaIndex", ",", " ", "1"}], "}"}], ",", " ", "None"}], 
     "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"scale", ",", " ", "0.2"}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"meshSize", ",", "8"}], "}"}], ",", "None"}], "}"}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"matrix", ",", " ", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"dynamics", ",", " ", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"dynPlot", ",", " ", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"freqPlot", ",", " ", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bRefreshMatrix", ",", " ", "False"}], "}"}], ",", " ", 
      "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bRefreshDynamics", ",", " ", "False"}], "}"}], ",", " ", 
      "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bRefreshDynPlot", ",", " ", "False"}], "}"}], ",", " ", 
      "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bRefreshFreqPlot", ",", " ", "False"}], "}"}], ",", " ", 
      "None"}], "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"tabNumber", ",", "1"}], "}"}], ",", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"dynTab", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"freqTab", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"parametersTab", ",", " ", "3"}], "}"}], ",", " ", "None"}], 
     "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"minSquaredDistanceFromOrigin", ",", " ", "0.1"}], "}"}], ",", 
      " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"minAngleBetweenLatticeVectors", ",", " ", 
        RowBox[{"Pi", "/", "6"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"locDefault", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0.1", ",", " ", "1.3"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1.9", ",", " ", "0.8"}], "}"}]}], "}"}]}], "}"}], ",", 
      " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"defaultMass", ",", " ", "20"}], "}"}], ",", " ", "None"}], 
     "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "The", " ", "number", " ", "of", " ", "default", " ", "masses", " ", 
      "are", " ", "coupled", " ", "by", " ", "these", " ", "next", " ", 
      "four", " ", 
      RowBox[{"variables", "."}]}], " ", "*)"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"rawNumberOfMasses", ",", " ", "3"}], "}"}], ",", " ", 
      "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"mLocDefault", ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0.9", ",", "0.7"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0.4", ",", " ", "1.2"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1.3", ",", " ", "1.4"}], "}"}]}], "}"}]}], "}"}], ",", 
      " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"rawArrayOfMasses", ",", " ", 
        RowBox[{"{", 
         RowBox[{"10", ",", " ", "15", ",", " ", "20"}], "}"}]}], "}"}], ",", 
      " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"moSel", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], 
    " ", 
    RowBox[{"(*", " ", 
     RowBox[{"pick", " ", "anything", " ", "that", " ", 
      RowBox[{"isn", "'"}], "t", " ", "m1Sel"}], " ", "*)"}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m1Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m2Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"kArray", ",", " ", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], " ", 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"u", ",", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"parameterLocatorDependencies", ",", " ", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"couplingData", ",", " ", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"springColorsByN", ",", " ", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"k1", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"k2", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"k3", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"k4", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"k5", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"kDefaults", ",", " ", 
        RowBox[{"{", 
         RowBox[{
         "0.25", ",", " ", "0.25", ",", " ", "0.25", ",", " ", "0.25", ",", 
          " ", "0.25"}], "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"kMin", ",", " ", "0.05"}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"kMax", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"mMax", ",", " ", "30"}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"windowHalfWidth", ",", " ", "3"}], "}"}], ",", " ", "None"}], 
     "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"springColors", ",", 
        RowBox[{"Darker", "@", 
         RowBox[{"{", " ", 
          RowBox[{
          "Orange", ",", "Green", ",", "Purple", ",", "Cyan", ",", "Yellow"}],
           " ", "}"}]}]}], " ", "}"}], " ", ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"primaryDisplaySize", ",", " ", 
        RowBox[{"{", 
         RowBox[{"380", ",", "380"}], "}"}]}], "}"}], ",", " ", "None"}], 
     "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"textDisOffset", ",", " ", 
        RowBox[{"{", 
         RowBox[{"0.25", ",", " ", "0.25"}], "}"}]}], "}"}], ",", " ", 
      "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"nArray", ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1", ",", "1"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], " ", "}"}], ",", " ", 
      "None"}], "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
     RowBox[{"{", "tick", "}"}]}], "\[IndentingNewLine]", ",", 
    RowBox[{"ControlPlacement", "\[Rule]", "Left"}], "\[IndentingNewLine]", 
    ",", 
    RowBox[{"SaveDefinitions", "\[Rule]", "True"}], "\[IndentingNewLine]", 
    ",", 
    RowBox[{"SynchronousInitialization", "\[Rule]", "False"}], 
    "\[IndentingNewLine]", ",", " ", 
    RowBox[{"Initialization", " ", "\[RuleDelayed]", " ", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"ClearAll", "[", 
         RowBox[{
         "springColorsByN", ",", "springPoints", ",", "indexLabel", ",", 
          "kLable", ",", "massColors", ",", "massLabel", ",", "calcLineTable",
           ",", "calcReciprocalBasis", ",", "pointsTable", ",", 
          "nMassesFromU", ",", "adjustedmoSel", ",", 
          "constructKArrayElements", ",", "constructKArray", ",", 
          "alterKArrayElements", ",", "alterKarrayOriginElement", ",", 
          "kArraySelect", ",", "kArrayOriginSelect", ",", "growKarray", ",", 
          "resetLatticeVectorsIfAngleTooSmall", ",", "locDependent", ",", 
          "latticeBasis", ",", "projOpU", ",", "projOp", ",", 
          "calculateCouplings", ",", "plotSprings", ",", "couplingLocator", 
          ",", "massSetter", ",", "m2Setter", ",", "km1", ",", "km2", ",", 
          "km3", ",", "km4", ",", "km5a", ",", "km5b", ",", "freqControls", 
          ",", "dynamicsControls", ",", "oneTermOfdynamicsMatrix", ",", 
          "dynamicsMatrix", ",", "calcDynamics", ",", "showDynamics", ",", 
          "frequencyPlotCalc", ",", "showFreqPlot"}], "]"}], " ", ";"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"TODO", "\[IndentingNewLine]", GridBox[{
           {
            RowBox[{"put", " ", "in", " ", "snapshots"}]},
           {
            RowBox[{
             RowBox[{"w", 
              RowBox[{"(", "q", ")"}], " ", "graph", " ", "not", " ", 
              "updating", " ", "after", " ", "reduction", " ", "to", " ", 
              "1"}], "-", 
             RowBox[{"atomc", " ", 
              RowBox[{"basis", "."}]}]}]},
           {
            RowBox[{"k5", " ", "not", " ", "disappearing", " ", "on", " ", 
             RowBox[{"reduction", "?"}]}]}
          },
          
          GridBoxDividers->{
           "Columns" -> {True, {False}, True}, "ColumnsIndexed" -> {}, 
            "Rows" -> {{True}}, "RowsIndexed" -> {}}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "Minor", " ", "maintaince", " ", "TODOs", " ", 
         RowBox[{"(", 
          RowBox[{"nice", " ", "to", " ", "haves"}], ")"}]}], ":", 
        "\[IndentingNewLine]", GridBox[{
          {
           RowBox[{
            RowBox[{
            "implement", " ", "a", " ", "min", " ", "separation", " ", "for", 
             " ", "the", " ", "equilibrium", " ", "mass", " ", "positions", 
             " ", "too", " ", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
               "as", " ", "done", " ", "for", " ", "the", " ", "lattice", " ",
                 "vectors"}], ")"}], ".", " ", "\[IndentingNewLine]", 
              "Trickier"}]}], ",", " ", 
            RowBox[{
            "since", " ", "that", " ", "should", " ", "be", " ", "based", " ",
              "on", " ", "the", " ", "separations", " ", "in", " ", "the", 
             " ", "origin", " ", "cell"}], ",", " ", "\[IndentingNewLine]", 
            RowBox[{
            "and", " ", "not", " ", "the", " ", "obsolute", " ", 
             "separations", " ", "of", " ", "the", " ", 
             RowBox[{"locators", "."}]}]}]},
          {
           RowBox[{
           "would", " ", "be", " ", "cool", " ", "to", " ", "make", " ", 
            "qLoc", " ", "a", " ", "pair", " ", "of", " ", "Locators", " ", 
            RowBox[{"that", ":", "\[IndentingNewLine]", " ", 
             RowBox[{
             "trace", " ", "out", " ", "constrained", " ", "positions", " ", 
              "along", " ", "the", " ", "2", " ", "Pi", " ", "scaled", " ", 
              "reciprocal", " ", "lattice", " ", 
              RowBox[{"vectors", ".", "\[IndentingNewLine]", 
               RowBox[{"(", 
                RowBox[{
                "returning", " ", "the", " ", "distance", " ", "from", " ", 
                 "the", " ", "origin", " ", "of", " ", "each", " ", "of", " ",
                  "those", " ", "locators"}], ")"}]}]}]}]}]},
          {
           RowBox[{
           "a", " ", "message", " ", "box", " ", "on", " ", "user", " ", 
            RowBox[{"error", ":", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"-", " ", "when"}], " ", "an", " ", "angle", " ", "or", 
              " ", "distance", " ", "from", " ", "origin", " ", "change", " ",
               "has", " ", "driven", " ", "a", " ", "reset", " ", "of", " ", 
              "the", " ", "lattice", " ", 
              RowBox[{"vectors", ".", "\[IndentingNewLine]", 
               RowBox[{"-", " ", "when"}]}], " ", "too", " ", "many", " ", 
              "of", " ", "the", " ", "locators", " ", "have", " ", "been", 
              " ", "deleted", " ", "and", " ", "a", " ", "forced", " ", 
              "reset", " ", "to", " ", "the", " ", "defaults", " ", 
              RowBox[{"occurs", "."}]}]}]}]},
          {
           RowBox[{
            RowBox[{
            "some", " ", "of", " ", "the", " ", "usage", " ", "messages", " ",
              "are", " ", "now", " ", "out", " ", "of", " ", "date"}], " ", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
              "all", " ", "commented", " ", "out", " ", "with", " ", "move", 
               " ", "of", " ", "the", " ", "functions", " ", "from", " ", 
               "global", " ", "init", " ", "section", " ", "to", " ", "the", 
               " ", "Manipulate", " ", "Initializer", " ", "section"}], ")"}],
              "."}]}]},
          {
           RowBox[{
           "Can", " ", "the", " ", "frequency", " ", "qPlaneLoc", " ", 
            "LocatorPane", " ", "look", " ", "more", " ", "like", " ", 
            "Slider2D", " ", "in", " ", "the", " ", "dynamics", " ", "tab", 
            " ", "for", " ", 
            RowBox[{"consistency", "?"}]}]},
          {
           RowBox[{
            RowBox[{
            "Am", " ", "using", " ", "a", " ", "calculated", " ", "value", 
             " ", "for", " ", "the", " ", "max", " ", "freq", " ", "for", " ",
              "the", " ", "freq", " ", "plot", " ", "intersection", " ", 
             RowBox[{"plane", ".", " ", "\[IndentingNewLine]", "Hardcoded"}], 
             " ", "this", " ", "to", " ", "magic", " ", "#", " ", 
             RowBox[{"that", "'"}], "s", " ", "out", " ", "of", " ", "the", 
             " ", "graphic", " ", 
             RowBox[{"(", "23", ")"}]}], ",", " ", 
            RowBox[{
            "but", " ", "that", " ", "could", " ", "be", " ", "wrong", " ", 
             "for", " ", "some", " ", "params"}]}]},
          {
           RowBox[{
            RowBox[{
            "Scaling", " ", "of", " ", "the", " ", "masses", " ", "ended", 
             " ", "up", " ", "different", " ", "for", " ", "the", " ", 
             "dynPlot", " ", 
             RowBox[{"vs", ".", " ", "parameters"}], " ", 
             RowBox[{"tab", ".", " ", "\[IndentingNewLine]", "Hacked"}], " ", 
             "the", " ", "dynPlot", " ", "scaling", " ", "for", " ", "now"}], 
            ",", " ", 
            RowBox[{"to", " ", "be", " ", "a", " ", "bit", " ", 
             RowBox[{"closer", "."}]}]}]},
          {
           RowBox[{
           "would", " ", "have", " ", "been", " ", "cleaner", " ", "to", " ", 
            "use", " ", "AppendTo", " ", "for", " ", "growKarray"}]}
         },
         GridBoxDividers->{
          "Columns" -> {True, {False}, True}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{True}}, "RowsIndexed" -> {}}]}], "\[IndentingNewLine]",
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"u", " ", "=", " ", 
        RowBox[{"Flatten", "[", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"locDefault", ",", " ", "mLocDefault"}], "}"}], ",", " ", 
          "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"checkAgainstRange", "[", 
         RowBox[{
         "v_", ",", "default_", ",", "lowerLimit_", ",", " ", "upperLimit_"}],
          "]"}], " ", ":=", " ", "\[IndentingNewLine]", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"result", " ", "=", " ", 
            RowBox[{"If", " ", "[", " ", 
             RowBox[{
              RowBox[{"NumberQ", "[", "v", "]"}], ",", "v", ",", " ", 
              "default"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"result", " ", "=", " ", 
            RowBox[{"If", " ", "[", " ", 
             RowBox[{
              RowBox[{"result", " ", "<", " ", "upperLimit"}], ",", " ", 
              "result", ",", "default"}], " ", "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"result", " ", "=", " ", 
            RowBox[{"If", " ", "[", " ", 
             RowBox[{
              RowBox[{"result", " ", ">", " ", "lowerLimit"}], ",", " ", 
              "result", ",", "default"}], " ", "]"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", "result"}]}], 
         "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"springColorsByN", " ", "=", " ", 
        RowBox[{"DeleteDuplicates", "@", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"s", " ", 
               RowBox[{
                RowBox[{"Append", "[", 
                 RowBox[{"nArray", ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
                RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
              RowBox[{"springColors", "[", 
               RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"s", ",", " ", 
               RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",",
              " ", 
             RowBox[{"{", 
              RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", "1"}], 
          "]"}]}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Based", " ", "on", " ", "my", " ", "ListLinePlot", " ", "answer", 
         " ", "posted", " ", 
         RowBox[{"in", ":", " ", 
          ButtonBox[
           RowBox[{
            RowBox[{"http", ":"}], "//", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/",
                "a"}], "/", "37228"}], "/", "10"}]}],
           BaseStyle->"Hyperlink",
           ButtonData->{
             URL["http://mathematica.stackexchange.com/a/37228/10"], None},
           ButtonNote->"http://mathematica.stackexchange.com/a/37228/10"]}]}],
         " ", "*)"}], "\n", 
       RowBox[{"(*", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"springPoints", "::", "usage"}], " ", "=", " ", 
          "\"\<springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]\>\""}], " ", ";"}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"springPoints", "[", " ", 
         RowBox[{"a12_List", ",", " ", 
          RowBox[{"n_Integer:", "8"}], ",", 
          RowBox[{"h_:", ".05"}], ",", " ", 
          RowBox[{"f_:", " ", "0.1"}]}], " ", "]"}], " ", ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "a1", ",", " ", "a2", ",", " ", "n1", ",", " ", "springDiff", ",", 
            " ", "nd", ",", " ", "r", ",", " ", "r1"}], " ", "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", " ", "a2"}], "}"}], " ", "=", " ", "a12"}], 
           " ", ";", "\[IndentingNewLine]", 
           RowBox[{"n1", " ", "=", " ", 
            RowBox[{"Norm", "[", "a1", "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"springDiff", " ", "=", " ", 
            RowBox[{"a2", " ", "-", " ", "a1"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"nd", " ", "=", " ", 
            RowBox[{"Norm", "[", "springDiff", "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"r", " ", "=", " ", 
            RowBox[{"RotationMatrix", "[", 
             RowBox[{"ArcTan", " ", "@@", "  ", "springDiff"}], " ", "]"}]}], 
           " ", ";", "\[IndentingNewLine]", 
           RowBox[{"r1", " ", "=", " ", 
            RowBox[{"r", " ", ".", " ", 
             RowBox[{"{", 
              RowBox[{"n1", ",", " ", "0"}], "}"}]}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Table", "[", " ", 
              RowBox[{
               RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
                RowBox[{"r", " ", ".", " ", 
                 RowBox[{"{", " ", 
                  RowBox[{
                   RowBox[{"n1", " ", "+", " ", 
                    RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                    RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}]}], ",", " ", 
                   RowBox[{"h", " ", 
                    RowBox[{"Sin", "[", " ", 
                    RowBox[{"2", " ", "Pi", " ", "n", " ", "t"}], "]"}]}]}], 
                  "}"}]}]}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}],
                 " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Table", "[", " ", 
              RowBox[{
               RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
                RowBox[{"r", " ", ".", " ", 
                 RowBox[{"{", " ", 
                  RowBox[{
                   RowBox[{"n1", " ", "+", " ", 
                    RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}], " ", "+", " ", 
                    RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
                  "}"}]}]}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}],
                 " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Table", "[", " ", 
              RowBox[{
               RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
                RowBox[{"r", " ", ".", " ", 
                 RowBox[{"{", " ", 
                  RowBox[{
                   RowBox[{"n1", " ", "+", 
                    RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
                  "}"}]}]}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}],
                 " ", "}"}]}], " ", "]"}]}], "\[IndentingNewLine]", "}"}]}]}],
          "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"indexLabel", "::", "usage"}], " ", "=", " ", 
          "\"\<\!\(\*SubscriptBox[\(k\), \(\(i\)\(\\\ \)\)]\)(or other \
character) in italic. indexLabel['k', 1]\>\""}], " ", ";"}], 
        "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"indexLabel", " ", "=", " ", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{"#1", ",", "Italic"}], "]"}], ",", " ", "#2"}], "]"}], 
         " ", "&"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"kLable", "::", "usage"}], " ", "=", " ", 
          "\"\<\!\(\*SubscriptBox[\(k\), \(\(i\)\(\\\ \)\)]\)(or other \
character) in italic and colored by spring index. kLable[k]\>\""}], " ", 
         ";"}], "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"kLable", " ", "=", " ", 
        RowBox[{
         RowBox[{"Style", "[", " ", 
          RowBox[{
           RowBox[{"indexLabel", "[", 
            RowBox[{"\"\<k\>\"", ",", " ", "#"}], "]"}], ",", " ", 
           RowBox[{"FontColor", "\[Rule]", 
            RowBox[{"springColors", "[", 
             RowBox[{"[", "#", "]"}], "]"}]}]}], " ", "]"}], " ", "&"}]}], 
       " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"massColors", " ", ":=", " ", 
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Darker", "[", 
            RowBox[{"{", " ", 
             RowBox[{
             "Blue", ",", " ", "Green", ",", " ", "Purple", ",", " ", "Red", 
              ",", " ", "Orange"}], " ", "}"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"Mod", "[", 
              RowBox[{"#", ",", " ", "5"}], "]"}], " ", "+", " ", "1"}], 
            "]"}], " ", "]"}], " ", "&"}], " ", ")"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"massLabel", " ", ":=", " ", 
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{"indexLabel", "[", 
            RowBox[{"\"\<m\>\"", ",", " ", "#"}], "]"}], ",", " ", 
           RowBox[{"massColors", "[", "#", "]"}]}], "]"}], " ", "&"}]}], " ", 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"calcLineTable", "[", " ", 
         RowBox[{"n_List", ",", " ", "b_List", ",", " ", "i_List"}], " ", 
         "]"}], " ", ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"first", ",", " ", "second"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"first", ",", " ", "second"}], "}"}], " ", "=", " ", 
            "i"}], " ", ";", "\[IndentingNewLine]", 
           RowBox[{"Table", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Line", "[", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"n", "[", 
                    RowBox[{"[", "first", "]"}], "]"}]}], 
                  RowBox[{"b", "[", 
                   RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
                 RowBox[{"j", " ", 
                  RowBox[{"b", "[", 
                   RowBox[{"[", "second", "]"}], "]"}]}]}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"n", "[", 
                   RowBox[{"[", "first", "]"}], "]"}], 
                  RowBox[{"b", "[", 
                   RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
                 RowBox[{"j", " ", 
                  RowBox[{"b", "[", 
                   RowBox[{"[", "second", "]"}], "]"}]}]}]}], "}"}], " ", 
              "\[IndentingNewLine]", "]"}], " ", "\[IndentingNewLine]", ",", 
             " ", 
             RowBox[{"{", 
              RowBox[{"j", ",", " ", 
               RowBox[{"-", 
                RowBox[{"n", "[", 
                 RowBox[{"[", "second", "]"}], "]"}]}], ",", " ", 
               RowBox[{"n", "[", 
                RowBox[{"[", "second", "]"}], "]"}]}], "}"}]}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"calcReciprocalBasis", "::", "usage"}], " ", "=", " ", 
          "\"\<Return a reciprocal frame basis for a set of vectors.  This \
doesn't include the 2 \[Pi] scaling that is common in solid state physics.  \
Example, displaying the desired Kronicker delta behaviour:\n\nb = \
{{2,1},{-1/4, 2}} ;\ng = calcReciprocalBasis[ b ] ;\n\n{g[[1]].loc[[1]],\
\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].loc[[1]],\
\[IndentingNewLine]g[[2]].loc[[2]]}\n\>\""}], " ", ";"}], 
        "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"calcReciprocalBasis", "[", "loc_List", "]"}], " ", ":=", " ", 
        RowBox[{"Inverse", "[", " ", 
         RowBox[{"Transpose", "[", " ", "loc", " ", "]"}], " ", "]"}]}], " ", 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"pointsTable", "[", " ", 
         RowBox[{
         "mPosFirstCell_List", ",", " ", "latticeBasis_List", ",", " ", 
          "numberLatticeLinesToDisplay_List"}], " ", "]"}], " ", ":=", " ", 
        RowBox[{"Table", "[", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"mPosFirstCell", " ", "+", " ", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"i", ",", "j"}], "}"}], ".", " ", "latticeBasis"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", 
            RowBox[{"-", 
             RowBox[{"numberLatticeLinesToDisplay", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ",", 
            RowBox[{"numberLatticeLinesToDisplay", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "\[IndentingNewLine]", 
          ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", 
            RowBox[{"-", 
             RowBox[{"numberLatticeLinesToDisplay", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
            RowBox[{"numberLatticeLinesToDisplay", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "\[IndentingNewLine]",
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"nMassesFromU", " ", ":=", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Dimensions", "[", "u", "]"}], " ", "//", " ", "First"}], 
           ")"}], " ", "-", "2"}], ")"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"adjustedmoSel", " ", ":=", " ", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"rawNumberOfMasses", " ", ">", " ", "2"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", " ", "[", 
           RowBox[{
            RowBox[{"moSel", " ", "\[Equal]", " ", "m1Sel"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"First", "[", 
             RowBox[{"DeleteCases", "[", 
              RowBox[{
               RowBox[{"Range", "[", "rawNumberOfMasses", "]"}], ",", 
               "m1Sel"}], "]"}], "]"}], ",", " ", "\[IndentingNewLine]", 
            "moSel"}], "]"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{"First", "@", 
           RowBox[{"Delete", "[", " ", 
            RowBox[{
             RowBox[{"Range", "[", "2", "]"}], ",", " ", "m1Sel"}], "]"}]}]}],
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"constructKArrayElements", "[", " ", 
         RowBox[{"i_Integer", ",", " ", "j_Integer"}], "  ", "]"}], " ", ":=",
         " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "a", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"a", " ", "=", " ", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"i", ",", " ", "j", ",", " ", 
                   RowBox[{"s", " ", 
                    RowBox[{"nArray", "[", 
                    RowBox[{"[", "n", "]"}], "]"}]}]}], "}"}], " ", "\[Rule]",
                  " ", 
                 RowBox[{"kDefaults", "[", 
                  RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"s", ",", " ", 
                  RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], 
                ",", " ", 
                RowBox[{"{", 
                 RowBox[{"n", ",", " ", "4"}], "}"}]}], " ", "]"}], ",", " ", 
              "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"If", " ", "[", " ", 
            RowBox[{
             RowBox[{"i", " ", "<", " ", "j"}], ",", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"a", ",", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"i", ",", "j", ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0"}], "}"}]}], "}"}], " ", "\[Rule]", 
                " ", 
                RowBox[{"kDefaults", "[", 
                 RowBox[{"[", "5", "]"}], "]"}]}]}], "]"}], ",", " ", "a"}], 
            " ", "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"constructKArray", "[", " ", "r_Integer", " ", "]"}], " ", ":=",
         " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"constructKArrayElements", "[", 
             RowBox[{"i", ",", "j"}], "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"i", ",", " ", "r"}], "}"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"j", ",", "r"}], "}"}]}], "]"}], ",", " ", "2"}], 
         "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"alterKArrayElements", "[", " ", 
         RowBox[{"ni_Integer", ",", " ", "v_"}], " ", "]"}], " ", ":=", " ", 
        RowBox[{"(", 
         RowBox[{"kArray", " ", "/.", " ", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Rule", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"m1Sel", ",", "m2Sel", ",", " ", 
                 RowBox[{"nArray", "[", 
                  RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", " ", "_"}], 
              "]"}], " ", "\[RuleDelayed]", " ", 
             RowBox[{"Rule", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"m1Sel", ",", "m2Sel", ",", " ", 
                 RowBox[{"nArray", "[", 
                  RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", " ", "v"}], 
              "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Rule", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"m1Sel", ",", "m2Sel", ",", " ", 
                 RowBox[{"-", 
                  RowBox[{"nArray", "[", 
                   RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", " ", 
               "_"}], "]"}], " ", "\[RuleDelayed]", " ", 
             RowBox[{"Rule", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"m1Sel", ",", "m2Sel", ",", " ", 
                 RowBox[{"-", 
                  RowBox[{"nArray", "[", 
                   RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", " ", 
               "v"}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], " ", ")"}]}],
        " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"alterKarrayOriginElement", "[", "v_", "]"}], " ", ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "m1oSet", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"m1oSet", " ", "=", " ", 
            RowBox[{"Append", "[", 
             RowBox[{
              RowBox[{"Sort", "[", 
               RowBox[{"{", 
                RowBox[{"m1Sel", ",", " ", "moSel"}], "}"}], "]"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"kArray", " ", "/.", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Rule", "[", 
               RowBox[{"m1oSet", ",", " ", "_"}], "]"}], " ", 
              "\[RuleDelayed]", " ", 
              RowBox[{"Rule", "[", 
               RowBox[{"m1oSet", ",", " ", "v"}], "]"}]}], ")"}]}]}]}], 
         "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"To", " ", "refresh", " ", "k1"}], ",", "k2", ",", "k3", ",", 
         RowBox[{
         "k4", " ", "after", " ", "changing", " ", "m1Sel", " ", "or", " ", 
          RowBox[{"m2Sel", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"kArraySelect", "[", " ", "ni_Integer", " ", "]"}], " ", ":=",
         " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"m1Sel", ",", "m2Sel", ",", 
            RowBox[{"nArray", "[", 
             RowBox[{"[", "ni", "]"}], "]"}]}], " ", "}"}], " ", "/.", " ", 
          "kArray"}], ")"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "To", " ", "refresh", " ", "k5", " ", "after", " ", "changing", " ", 
         "m1Sel", " ", "and", " ", "moSel"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"kArrayOriginSelect", " ", ":=", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Append", "[", 
           RowBox[{
            RowBox[{"Sort", "[", 
             RowBox[{"{", 
              RowBox[{"m1Sel", ",", " ", "moSel"}], "}"}], "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}]}], "]"}], " ", " ", "/.", " ", 
          "kArray"}], ")"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"growKarray", "[", " ", "nmNew_Integer", " ", "]"}], " ", ":=",
         " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "k2", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"k2", " ", "=", " ", 
            RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"constructKArrayElements", "[", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                   RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], 
                ")"}], "/@", " ", 
               RowBox[{"(", 
                RowBox[{"Select", "[", 
                 RowBox[{
                  RowBox[{"Flatten", "[", 
                   RowBox[{
                    RowBox[{"Table", "[", " ", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", " ", "nmNew"}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", " ", "nmNew"}], "}"}]}], "]"}], ",", 
                    " ", "1"}], "]"}], ",", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Max", "[", "#", "]"}], " ", "\[Equal]", " ", 
                    "nmNew"}], " ", "&"}]}], "]"}], ")"}]}], ",", " ", "2"}], 
             "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"kArray", ",", " ", "k2"}], "]"}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"kArray", ",", " ", "k2"}], "}"}], ",", " ", "1"}], 
            "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", "minAngle_", "]"}],
         " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "t", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"t", " ", "=", " ", 
            RowBox[{"Abs", "[", 
             RowBox[{"ArcCos", "[", 
              RowBox[{
               RowBox[{"Normalize", "[", 
                RowBox[{"u", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", ".", " ", 
               RowBox[{"Normalize", "[", 
                RowBox[{"u", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}], "]"}]}], " ",
            ";", "\[IndentingNewLine]", 
           RowBox[{"t", " ", "=", " ", 
            RowBox[{"If", " ", "[", " ", 
             RowBox[{
              RowBox[{"t", " ", ">", " ", 
               RowBox[{"Pi", "/", "2"}]}], ",", " ", 
              RowBox[{"Pi", "-", "t"}], ",", " ", "t"}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"If", "[", " ", 
            RowBox[{
             RowBox[{"t", " ", "<", " ", "minAngle"}], ",", 
             "\[IndentingNewLine]", "locDefault", ",", " ", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"u", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
               RowBox[{"u", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"locDependent", "::", "usage"}], " ", "=", " ", 
          "\"\<Locator dependent calculations (i.e. based on the mass \
positions and the unit cell basis vectors)\n\nExample:\n\n\
locDependent[{1/2,1}, {1,1/2}, {{0.1,0.2} + {1/2,1} + {1,1/2}, {0.3, 0.5} - \
{1/2,1} - {1,1/2}}]\n\nWill see: {0.1,0.2}, {0.3, 0.5} ; as the mPosFirstCell \
values.\n\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"locDependent", " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "m", ",", "latticeBasis", ",", " ", "numberLatticeLinesToDisplay", 
            ",", "reciprocalBasis", ",", "mObliqueComponents", ",", " ", 
            "mPosFirstCell", ",", " ", "reciprocalNorms"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"latticeBasis", " ", "=", 
            RowBox[{"Take", "[", 
             RowBox[{"u", ",", " ", "2"}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"m", " ", "=", " ", 
            RowBox[{"Drop", "[", 
             RowBox[{"u", ",", " ", "2"}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"numberLatticeLinesToDisplay", " ", "=", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Ceiling", "[", "  ", 
                RowBox[{"Abs", "[", 
                 RowBox[{"windowHalfWidth", "/", " ", 
                  RowBox[{
                   RowBox[{"latticeBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}], "[", 
                   RowBox[{"[", "#", "]"}], "]"}]}], "]"}], "]"}], " ", "&"}],
               " ", "/@", " ", 
              RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"reciprocalBasis", " ", "=", " ", 
            RowBox[{
            "calcReciprocalBasis", "[", " ", "latticeBasis", " ", "]"}]}], 
           " ", ";", "\[IndentingNewLine]", 
           RowBox[{"reciprocalNorms", " ", "=", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Norm", "[", 
                RowBox[{"reciprocalBasis", "[", 
                 RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@",
               " ", 
              RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"mObliqueComponents", " ", "=", " ", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"m", "[", 
                RowBox[{"[", " ", "i", " ", "]"}], "]"}], " ", ".", " ", 
               RowBox[{"reciprocalBasis", "[", 
                RowBox[{"[", " ", "j", " ", "]"}], "]"}]}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "rawNumberOfMasses"}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"j", ",", " ", "2"}], "}"}]}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"mPosFirstCell", " ", "=", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"m", "[", 
                 RowBox[{"[", "#", "]"}], "]"}], " ", "-", " ", 
                RowBox[{
                 RowBox[{"Floor", "[", 
                  RowBox[{"mObliqueComponents", "[", 
                   RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", ".", " ", 
                 "latticeBasis"}]}], " ", ")"}], " ", "&"}], " ", "/@", " ", 
             RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
             "\"\<mScalarArray\>\"", " ", "\[Rule]", " ", 
              "rawArrayOfMasses"}], ",", "\[IndentingNewLine]", 
             RowBox[{
             "\"\<numberOfMasses\>\"", " ", "\[Rule]", " ", 
              "rawNumberOfMasses"}], ",", "\[IndentingNewLine]", 
             RowBox[{
             "\"\<latticeBasis\>\"", " ", "\[Rule]", " ", "latticeBasis"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"\"\<latticeNorms\>\"", "\[Rule]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Norm", "[", 
                  RowBox[{"latticeBasis", "[", 
                   RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@",
                 " ", 
                RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"\"\<latticeUnitVectors\>\"", "\[Rule]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Normalize", "[", 
                  RowBox[{"latticeBasis", "[", 
                   RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@",
                 " ", 
                RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
             "\"\<numberLatticeLinesToDisplay\>\"", "\[Rule]", " ", 
              "numberLatticeLinesToDisplay"}], ",", "\[IndentingNewLine]", 
             RowBox[{
             "\"\<reciprocalBasis\>\"", "\[Rule]", " ", "reciprocalBasis"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{
             "\"\<reciprocalNorms\>\"", "\[Rule]", " ", "reciprocalNorms"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"\"\<qMaxVec\>\"", " ", "\[Rule]", " ", 
              RowBox[{"(", 
               RowBox[{"2", " ", "Pi", " ", "reciprocalNorms"}], ")"}]}], ",",
              "\[IndentingNewLine]", 
             RowBox[{
             "\"\<mObliqueComponents\>\"", "\[Rule]", " ", 
              "mObliqueComponents"}], ",", "\[IndentingNewLine]", 
             RowBox[{
             "\"\<mPosFirstCell\>\"", "\[Rule]", " ", "mPosFirstCell"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"\"\<pointsDataTable\>\"", "\[Rule]", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"pointsTable", "[", 
                   RowBox[{
                    RowBox[{"mPosFirstCell", "[", 
                    RowBox[{"[", "#", "]"}], "]"}], ",", "latticeBasis", ",", 
                    "numberLatticeLinesToDisplay"}], "]"}], ")"}], " ", "&"}],
                 "/@", " ", 
                RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], ")"}]}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"\"\<lineTable\>\"", " ", "\[Rule]", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"calcLineTable", "[", " ", 
                  RowBox[{
                  "numberLatticeLinesToDisplay", ",", " ", "latticeBasis", 
                   ",", " ", "#"}], " ", "]"}], " ", "&"}], " ", "/@", " ", 
                RowBox[{"Permutations", "[", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ")"}]}]}], 
            "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"projOp", "::", "usage"}], " ", "=", " ", 
          "\"\<given an input vector \!\(\*OverscriptBox[\(v\), \(\
\[RightVector]\)]\) = {\!\(\*SubscriptBox[\(v\), \(x\)]\), \
\!\(\*SubscriptBox[\(v\), \(y\)]\)}, compute the projection matrix operator \
along the unit vector in that direction.\n\n   projOp[{1, 0}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"1\", \"0\"},
{\"0\", \"0\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{0, 1}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"0\", \"0\"},
{\"0\", \"1\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{a,b}] // MatrixForm = \!\
\(\*Cell[TextData[Cell[BoxData[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{
FractionBox[
SuperscriptBox[\"a\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]},
{
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
SuperscriptBox[\"b\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}]],
CellChangeTimes->{{3.5990911441851797`*^9, 3.599091144641206*^9}, \
3.5990913830438423`*^9, 3.5990915191646276`*^9, 3.599091555028679*^9, \
3.599091735722014*^9, {3.599091916353346*^9, 3.599091928988068*^9}}]]]\)\n\
\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"projOpU", "[", "v_List", "]"}], " ", ":=", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"v", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "^", "2"}], ",", " ", 
            RowBox[{
             RowBox[{"v", "[", 
              RowBox[{"[", "1", "]"}], "]"}], 
             RowBox[{"v", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"v", "[", 
              RowBox[{"[", "1", "]"}], "]"}], 
             RowBox[{"v", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
            RowBox[{
             RowBox[{"v", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "^", "2"}]}], "}"}]}], "}"}]}], 
       " ", ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"projOp", "[", "v_List", "]"}], " ", ":=", " ", 
        RowBox[{
         RowBox[{"projOpU", "[", "v", "]"}], "/", 
         RowBox[{"(", 
          RowBox[{"v", ".", " ", "v"}], ")"}]}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"relativeDifferences", "::", "usage"}], " ", "=", " ", 
          "\"\<Example: relativeDifferences[ {aLoc,bLoc}, {mLoc1, mLoc2, \
...}, kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: \
(kArray[[1]] /. Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, \
{nIndex1, nIndex2}}\>\""}], ",", " ", 
         RowBox[{
          RowBox[{
          "is", " ", "a", " ", "tuple", " ", "for", " ", "the", " ", "spring",
            " ", "constant", " ", "between", " ", "m1", " ", "in", " ", "the",
            " ", "origin", " ", "cell", " ", "to", " ", "m2", " ", "in", " ", 
           "the", " ", "lattice", " ", "cell", " ", 
           RowBox[{"{", 
            RowBox[{"n1", ",", "n2"}], "}"}]}], " ", ";"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"relativeDifferences", "[", " ", 
         RowBox[{"r_List", ",", "mp_List", ",", " ", 
          RowBox[{"{", 
           RowBox[{
           "mIndex1_Integer", ",", " ", "mIndex2_Integer", ",", " ", 
            "n_List"}], "}"}]}], "]"}], " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"d", ",", " ", "pOrigin", ",", " ", "pOther"}], "}"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pOrigin", " ", "=", " ", 
            RowBox[{"mp", "[", 
             RowBox[{"[", " ", "mIndex1", " ", "]"}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"pOther", " ", "=", " ", 
            RowBox[{
             RowBox[{"mp", "[", 
              RowBox[{"[", " ", "mIndex2", " ", "]"}], "]"}], "+", " ", 
             RowBox[{"n", " ", ".", " ", "r"}]}]}], "  ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"d", " ", "=", " ", 
            RowBox[{"pOther", " ", "-", " ", "pOrigin"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"dn", " ", "=", " ", 
            RowBox[{"d", " ", ".", "d"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{"dn", ",", " ", "pOrigin", ",", " ", "pOther", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"projOpU", "[", "d", "]"}], "/", "dn"}], "  ", 
              RowBox[{"(*", 
               RowBox[{"//", " ", "MatrixForm"}], "*)"}], ")"}]}], 
            "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"calculateCouplings", "::", "usage"}], " ", "=", " ", 
          "\"\<Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions.\>\""}], 
         " ", ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"calculateCouplings", " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "t", ",", " ", "t1", ",", " ", "t2", ",", " ", "r", ",", " ", "mp",
             ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"r", ",", " ", "mp", ",", " ", "numberOfMasses"}], "}"}],
             " ", "=", " ", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "\"\<latticeBasis\>\"", ",", " ", "\"\<mPosFirstCell\>\"", ",", 
               " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", 
             "parameterLocatorDependencies"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"t", " ", "=", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"Append", "[", 
               RowBox[{"#", ",", " ", 
                RowBox[{"relativeDifferences", "[", 
                 RowBox[{"r", ",", " ", "mp", ",", " ", 
                  RowBox[{"First", "[", "#", "]"}]}], "]"}]}], " ", "]"}], 
              "&"}], "/@", " ", 
             RowBox[{"(", 
              RowBox[{"kArray", " ", "/.", " ", 
               RowBox[{"Rule", " ", "\[Rule]", " ", "List"}]}], ")"}]}]}], 
           " ", ";", "\[IndentingNewLine]", 
           RowBox[{"t", " ", "=", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                  RowBox[{"{", 
                   RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "}"}], ",", " ", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "3", "]"}], "]"}]}], "}"}], ",", " ", "1"}], 
               "]"}], " ", "&"}], "/@", " ", "t"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"t1", " ", "=", " ", 
            RowBox[{"Table", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Sort", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"Select", "[", " ", 
                  RowBox[{"t", ",", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                    "i"}], ")"}], " ", "&&", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "\[NotEqual]", " ", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0"}], "}"}]}], ")"}]}], " ", 
                    "&"}]}], "]"}], ")"}], ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#1", "[", 
                   RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
                  RowBox[{"#2", "[", 
                   RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
              "\[IndentingNewLine]", ",", " ", 
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
             "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"t2", " ", "=", " ", 
            RowBox[{"Select", "[", " ", 
             RowBox[{"t", ",", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], " ", "==", " ", 
                RowBox[{"{", 
                 RowBox[{"0", ",", " ", "0"}], "}"}]}], " ", "&"}]}], "]"}]}],
            " ", ";", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"the", " ", "rest", " ", "of", " ", "the", " ", 
             RowBox[{"permutations", ":"}]}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"t2", " ", "=", " ", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"t2", ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Flatten", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", " ", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}]}], "}"}], ",", " ", 
                    "1"}], "]"}], " ", "&"}], "/@", " ", "t2"}]}], "}"}], ",",
               " ", "1"}], "]"}]}], "  ", ";", "\[IndentingNewLine]", 
           RowBox[{"t2", " ", "=", " ", 
            RowBox[{"Table", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Sort", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"Select", "[", " ", 
                  RowBox[{"t2", ",", " ", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                    "i"}], ")"}], " ", "&"}]}], "]"}], ")"}], ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#1", "[", 
                   RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
                  RowBox[{"#2", "[", 
                   RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
              "\[IndentingNewLine]", ",", " ", 
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
             "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"t2", ",", " ", "t1"}], "}"}]}]}], "\[IndentingNewLine]", 
         "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"plotSprings", "::", "usage"}], " ", "=", " ", 
          "\"\<Example:\n\nModule[{parameterLocatorDependencies},\
\[IndentingNewLine]parameterLocatorDependencies = locDependent[{1/2,1}, \
{1,1/2}, {{0.1,1.2} + {1/2,1} + {1,1/2}, {1.3, 0.5} - {1/2,1} - {1,1/2}}] ;\
\[IndentingNewLine]plotSprings[{10,20}, parameterLocatorDependencies ] \
\[IndentingNewLine]]\n\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"plotSprings", " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "aLoc", ",", " ", "bLoc", ",", "mLoc", ",", "pointsList", ",", 
            "latticeBasis", ",", "reciprocalBasis", ",", "pointsDataTable", 
            ",", " ", "numberLatticeLinesToDisplay", ",", " ", "lines", ",", 
            " ", "cOrigin", ",", " ", "cN", ",", " ", "g", ",", " ", 
            "mScalarArray", ",", " ", "numberOfMasses"}], "}"}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"latticeBasis", " ", "=", " ", 
            RowBox[{"Take", "[", " ", 
             RowBox[{"u", ",", " ", "2"}], " ", "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"aLoc", " ", "=", " ", 
            RowBox[{"u", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"bLoc", " ", "=", " ", 
            RowBox[{"u", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "mLoc", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
              "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
              "mScalarArray", ",", " ", "numberOfMasses"}], "}"}], "=", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "\"\<mPosFirstCell\>\"", ",", "\"\<reciprocalBasis\>\"", ",", 
               "\"\<pointsDataTable\>\"", ",", 
               "\"\<numberLatticeLinesToDisplay\>\"", ",", " ", 
               "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", 
               " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", 
             "parameterLocatorDependencies"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"pointsList", "[", "n_Integer", "]"}], " ", ":=", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"massColors", "[", "n", "]"}], ",", 
              "\[IndentingNewLine]", ",", 
              RowBox[{"PointSize", "[", 
               RowBox[{"Sqrt", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"mScalarArray", "[", 
                   RowBox[{"[", "n", "]"}], "]"}], "/", "mMax"}], "/", 
                 "500"}], "]"}], "]"}], "\[IndentingNewLine]", ",", 
              RowBox[{
               RowBox[{
                RowBox[{"Point", "[", " ", "#", " ", "]"}], " ", "&"}], " ", "/@",
                " ", 
               RowBox[{"pointsDataTable", "[", 
                RowBox[{"[", "n", "]"}], "]"}]}], "\[IndentingNewLine]", ",", 
              RowBox[{"Text", "[", 
               RowBox[{
                RowBox[{"massLabel", "[", " ", "n", "]"}], ",", 
                RowBox[{
                 RowBox[{"mLoc", "[", 
                  RowBox[{"[", "n", "]"}], "]"}], " ", "+", " ", 
                 "textDisOffset"}]}], "]"}]}], "\[IndentingNewLine]", "}"}]}],
            " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"cOrigin", " ", "=", " ", 
            RowBox[{"Select", "[", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"couplingData", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "[", 
               RowBox[{"[", "m1Sel", "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{
                RowBox[{"Take", "[", 
                 RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", " ", 
                RowBox[{"{", 
                 RowBox[{"m1Sel", ",", " ", "moSel"}], "}"}]}], " ", "&"}]}], 
             " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
           RowBox[{"cN", " ", "=", " ", 
            RowBox[{"Select", "[", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"couplingData", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "[", 
               RowBox[{"[", "m1Sel", "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{
                RowBox[{"Take", "[", 
                 RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
                RowBox[{"{", 
                 RowBox[{"m1Sel", ",", " ", "m2Sel"}], "}"}]}], "&"}]}], " ", 
             "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"g", " ", "=", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"springPoints", "[", " ", 
                 RowBox[{"Take", "[", 
                  RowBox[{"#", ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"6", ",", "7"}], "}"}]}], "]"}], " ", "]"}], " ", 
                ",", "\[IndentingNewLine]", 
                RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
                "\[IndentingNewLine]", 
                RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                   "springColorsByN"}], ")"}]}]}], " ", "]"}], " ", "&"}], "/@",
              " ", "cN"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"If", " ", "[", " ", 
            RowBox[{
             RowBox[{"numberOfMasses", " ", ">", " ", "1"}], ",", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"g", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"springPoints", "[", " ", 
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", "7"}], "}"}]}], "]"}], " ", "]"}], " ", 
                   ",", "\[IndentingNewLine]", 
                   RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
                   "\[IndentingNewLine]", 
                   RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                    "springColorsByN"}], ")"}]}]}], " ", "]"}], " ", "&"}], "/@",
                 " ", "cOrigin"}]}], "]"}], ","}], " ", "]"}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"Show", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Graphics", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Flatten", "[", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"lines", "\[IndentingNewLine]", ",", "Blue", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"reciprocalBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                    RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]",
                     ",", "Thick", ",", 
                    RowBox[{"Arrowheads", "[", "0.05", "]"}], 
                    "\[IndentingNewLine]", ",", "Red", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"latticeBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                    RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]",
                     ",", 
                    RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"aLoc", "/", "2"}], " ", "+", " ", 
                    "textDisOffset"}]}], "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"bLoc", "/", "2"}], " ", "+", " ", 
                    "textDisOffset"}]}], "]"}]}], "\[IndentingNewLine]", 
                    "}"}], ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"pointsList", "[", "#", "]"}], " ", "&"}], "/@", 
                    " ", 
                    RowBox[{"Range", "[", "numberOfMasses", "]"}]}]}], 
                  "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", 
                ",", 
                RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "windowHalfWidth"}], "/", "2"}], ",", " ", 
                    "windowHalfWidth"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "windowHalfWidth"}], "/", "2"}], ",", " ", 
                    "windowHalfWidth"}], "}"}]}], "}"}]}], 
                "\[IndentingNewLine]", ",", 
                RowBox[{"ImageSize", "\[Rule]", "primaryDisplaySize"}]}], 
               "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
              "g"}], "\[IndentingNewLine]", "}"}], " ", "]"}]}]}], " ", 
         "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"couplingLocator", " ", ":=", 
        RowBox[{"LocatorPane", "[", " ", 
         RowBox[{
          RowBox[{"Dynamic", "[", 
           RowBox[{"u", ",", 
            RowBox[{
             RowBox[{"(", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"u", " ", "=", " ", 
                RowBox[{"If", " ", "[", " ", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], "<", "3"}], ",", " ", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Flatten", "[", " ", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"locDefault", ",", " ", "mLocDefault"}], "}"}], 
                    ",", " ", "1"}], "]"}], ",", " ", "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{
                    "cap", " ", "the", " ", "number", " ", "of", " ", 
                    "Locators", " ", "at", " ", "5"}], ",", " ", 
                    RowBox[{
                    "so", " ", "the", " ", "selection", " ", "Pane", " ", 
                    RowBox[{"doesn", "'"}], "t", " ", "start", " ", 
                    "truncating", " ", 
                    RowBox[{"the", " ", "'"}], "to", " ", 
                    RowBox[{"neighbouring", "'"}], " ", "SetterBar"}]}], " ", 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"If", "[", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], " ", ">", " ", "7"}], ",", " ", 
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", "7"}], "]"}], ",", " ", "#"}], "]"}]}], 
                 " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"rm", ",", "km"}], "}"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"rm", " ", "=", " ", 
                   RowBox[{"First", "@", 
                    RowBox[{"Dimensions", "[", "rawArrayOfMasses", "]"}]}]}], 
                  " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"If", " ", "[", 
                   RowBox[{
                    RowBox[{"rm", " ", ">", " ", "nMassesFromU"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "rawArrayOfMasses"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"rawArrayOfMasses", " ", "=", " ", 
                    RowBox[{"Take", "[", " ", 
                    RowBox[{"rawArrayOfMasses", ",", " ", "nMassesFromU"}], 
                    " ", "]"}]}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "rawArrayOfMasses", " ", "if", " ", 
                    "required"}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"rm", "<", " ", "nMassesFromU"}], ",", 
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"rawArrayOfMasses", ",", " ", "defaultMass"}], 
                    "]"}], " ", ";", " ", 
                    RowBox[{"rm", "++"}]}]}], " ", "]"}]}], 
                   "\[IndentingNewLine]", "]"}], " ", ";", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"km", " ", "=", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], " ", "//", " ", 
                    "Max"}]}], " ", ";", "\[IndentingNewLine]", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", " ", "[", 
                   RowBox[{
                    RowBox[{"km", " ", ">", " ", "nMassesFromU"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "kArray"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"Select", "[", 
                    RowBox[{"kArray", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "\[LessEqual]", "  ", "nMassesFromU"}], "&"}], ")"}]}], 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "kArray", " ", "if", " ", "required"}], 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"km", "<", " ", "nMassesFromU"}], ",", 
                    RowBox[{
                    RowBox[{"km", "++"}], " ", ";", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"growKarray", "[", "km", "]"}]}]}]}], " ", 
                    "]"}]}], " ", "\[IndentingNewLine]", "]"}]}]}], 
                "\[IndentingNewLine]", "]"}], " ", ";", "\[IndentingNewLine]",
                "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                 "lattice", " ", "vector", " ", "end", " ", "points", " ", 
                 "to", " ", "be", " ", "too", " ", "close", " ", "to", " ", 
                 "the", " ", "origin"}], " ", "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"u", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", 
                RowBox[{"If", "[", " ", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "<", " ", 
                   "minSquaredDistanceFromOrigin"}], ",", " ", 
                  RowBox[{"locDefault", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                  RowBox[{"u", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"u", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", 
                RowBox[{"If", "[", " ", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ".", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], " ", "<", " ", 
                   "minSquaredDistanceFromOrigin"}], ",", " ", 
                  RowBox[{"locDefault", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                  RowBox[{"u", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                 "angle", " ", "between", " ", "lattice", " ", "vectors", " ",
                  "get", " ", "too", " ", "small"}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"u", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                  RowBox[{"u", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "}"}], " ", "=", " ", 
                RowBox[{
                "resetLatticeVectorsIfAngleTooSmall", "[", " ", 
                 "minAngleBetweenLatticeVectors", " ", "]"}]}], " ", ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"rawNumberOfMasses", " ", "=", " ", "nMassesFromU"}], 
               " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                "These", " ", "are", " ", "in", " ", "case", " ", "the", " ", 
                 "number", " ", "of", " ", "locators", " ", "were", " ", 
                 "changed", " ", "and", " ", "we", " ", "have", " ", "a", " ",
                  "mass", " ", "selected", " ", "that", " ", "is", " ", "now",
                  " ", 
                 RowBox[{"invalid", "."}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"m1Sel", " ", "=", " ", 
                RowBox[{"If", " ", "[", " ", 
                 RowBox[{
                  RowBox[{"m1Sel", " ", ">", "rawNumberOfMasses"}], ",", " ", 
                  "1", ",", " ", "m1Sel"}], "]"}]}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{"m2Sel", " ", "=", " ", 
                RowBox[{"If", " ", "[", " ", 
                 RowBox[{
                  RowBox[{"m2Sel", " ", ">", "rawNumberOfMasses"}], ",", " ", 
                  "1", ",", " ", "m2Sel"}], "]"}]}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{"moSel", " ", "=", " ", 
                RowBox[{"If", " ", "[", " ", 
                 RowBox[{
                  RowBox[{"moSel", " ", ">", "rawNumberOfMasses"}], ",", " ", 
                  "1", ",", " ", "moSel"}], " ", "]"}]}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{"moSel", " ", "=", " ", "adjustedmoSel"}], " ", ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                 "Adjust", " ", "these", " ", "for", " ", "Slider", " ", 
                  "display", " ", "in", " ", "case", " ", "m1Sel"}], ",", " ",
                  "m2Sel", ",", " ", 
                 RowBox[{
                 "or", " ", "moSel", " ", "were", " ", "changed", " ", "just",
                   " ", 
                  RowBox[{"above", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"k1", " ", "=", " ", 
                RowBox[{"kArraySelect", "[", "1", "]"}]}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{"k2", " ", "=", " ", 
                RowBox[{"kArraySelect", "[", "2", "]"}]}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{"k3", " ", "=", " ", 
                RowBox[{"kArraySelect", "[", "3", "]"}]}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{"k4", " ", "=", " ", 
                RowBox[{"kArraySelect", "[", "4", "]"}]}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{"k5", " ", "=", " ", "kArrayOriginSelect"}], " ", ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{
               "parameterLocatorDependencies", " ", "=", " ", 
                "locDependent"}], " ", ";", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"Reset", " ", "in", " ", "case", " ", "a"}], ",", 
                 RowBox[{"or", " ", "b", " ", "changed"}], ",", " ", 
                 RowBox[{
                 "and", " ", "the", " ", "last", " ", "selected", " ", 
                  "value", " ", "is", " ", "now", " ", "out", " ", "of", " ", 
                  RowBox[{"range", "."}]}]}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"qLoc", " ", "=", " ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                  "\"\<qMaxVec\>\"", "/.", "parameterLocatorDependencies"}], 
                  " ", ")"}], "/", "2"}]}], "  ", ";", "\[IndentingNewLine]", 
               RowBox[{"qPlaneLoc", " ", "=", " ", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"couplingData", " ", "=", " ", "calculateCouplings"}], 
               " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"tick", "=", 
                RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], "]"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"Why", " ", 
             RowBox[{"doesn", "'"}], "t", " ", "Alt"}], "-", 
            RowBox[{
            "click", " ", "to", " ", "remove", " ", "existing", " ", 
             "Locator", " ", "refresh", " ", "this", " ", 
             RowBox[{"plot", "?", "  ", 
              RowBox[{"Workaround", ":", " ", 
               RowBox[{
               "move", " ", "one", " ", "of", " ", "the", " ", "other", " ", 
                "locators", " ", "to", " ", "refresh"}]}]}]}]}], " ", "*)"}], 
          "\[IndentingNewLine]", "plotSprings", ",", "\[IndentingNewLine]", 
          RowBox[{"LocatorAutoCreate", "\[Rule]", "True"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
         "\[IndentingNewLine]", "]"}]}], "  ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"massSetter", " ", ":=", " ", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Text", "[", "\"\<mass: \>\"", "]"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"If", " ", "[", " ", 
               RowBox[{
                RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"m1Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m1Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"kArraySelect", "[", "1", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"kArraySelect", "[", "2", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"kArraySelect", "[", "3", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"kArraySelect", "[", "4", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"moSel", " ", "=", " ", "adjustedmoSel"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", "kArrayOriginSelect"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], ",", " ", "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", " ", "]"}]}], "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                   ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
               "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "}"}],
            "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"massValue", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.25", ",", " ", "0.25", ",", " ", 
                    "mMax"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"rawArrayOfMasses", "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "=", "massValue"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
                    RowBox[{"(", 
                    RowBox[{"parameterLocatorDependencies", " ", "/.", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"\"\<mScalarArray\>\"", ",", " ", "_"}], "]"}], 
                    " ", "\[RuleDelayed]", " ", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", ",", " ", "rawArrayOfMasses"}], 
                    "]"}]}], ")"}]}], " ", ")"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{"0.25", ",", 
                 RowBox[{"Dynamic", "@", "mMax"}]}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
               RowBox[{"AppearanceElements", "\[Rule]", 
                RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
              "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
             "\"\< \>\"", ",", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"NumberForm", "[", 
               RowBox[{"massValue", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "1"}], "}"}]}], "]"}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
         "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"m2Setter", " ", ":=", " ", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
          "Text", "[", "\"\<coupling to neighbouring: \>\"", " ", "]"}], ",", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"Dynamic", "@", 
           RowBox[{"If", " ", "[", " ", 
            RowBox[{
             RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"m2Sel", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"m2Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"kArraySelect", "[", "1", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"kArraySelect", "[", "2", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"kArraySelect", "[", "3", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"kArraySelect", "[", "4", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], ",", " ", "\[IndentingNewLine]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#", " ", "\[Rule]", " ", 
                   RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                  " ", 
                 RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], ")"}]}], 
              "\[IndentingNewLine]", "]"}], ",", 
             RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
       " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"km1", " ", ":=", " ", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{"{", " ", 
            RowBox[{
             RowBox[{"Text", "@", "\"\<horizontal: \>\""}], ",", 
             RowBox[{"kLable", "[", "1", "]"}], ",", " ", "\"\< || \>\"", ",",
              " ", 
             RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", 
             "\"\< \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"k1", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"k1", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "kMin", ",", " ", "kMin", ",", " ", 
                    "kMax"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"alterKArrayElements", "[", " ", 
                    RowBox[{"1", ",", " ", "k1"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    "couplingData", " ", "=", " ", "calculateCouplings"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Dynamic", "@", "kMin"}], ",", 
                 RowBox[{"Dynamic", "@", "kMax"}]}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
               RowBox[{"AppearanceElements", "\[Rule]", 
                RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
              "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
             "\[IndentingNewLine]", "\"\< \>\"", ",", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"NumberForm", "[", 
               RowBox[{"k1", ",", 
                RowBox[{"{", 
                 RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
         "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"km2", " ", ":=", " ", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{"{", " ", 
            RowBox[{
             RowBox[{"Text", "@", "\"\<vertical: \>\""}], ",", 
             RowBox[{"kLable", "[", "2", "]"}], ",", " ", "\"\< || \>\"", ",",
              " ", 
             RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", 
             "\"\< \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"k2", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"k2", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "kMin", ",", " ", "kMin", ",", " ", 
                    "kMax"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"alterKArrayElements", "[", " ", 
                    RowBox[{"2", ",", " ", "k2"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    "couplingData", " ", "=", " ", "calculateCouplings"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Dynamic", "@", "kMin"}], ",", 
                 RowBox[{"Dynamic", "@", "kMax"}]}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
               RowBox[{"AppearanceElements", "\[Rule]", 
                RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
              "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
             "\"\< \>\"", ",", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"NumberForm", "[", 
               RowBox[{"k2", ",", 
                RowBox[{"{", 
                 RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], "]"}]}], " ", "\[IndentingNewLine]",
          "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"km3", " ", ":=", " ", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{"{", " ", 
            RowBox[{
             RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
             RowBox[{"kLable", "[", "3", "]"}], ",", " ", "\"\< || (\>\"", 
             ",", "  ", 
             RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
             "\"\< + \>\"", ",", " ", 
             RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
             "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"k3", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"k3", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "kMin", ",", " ", "kMin", ",", " ", 
                    "kMax"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"alterKArrayElements", "[", " ", 
                    RowBox[{"3", ",", " ", "k3"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    "couplingData", " ", "=", " ", "calculateCouplings"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Dynamic", "@", "kMin"}], ",", 
                 RowBox[{"Dynamic", "@", "kMax"}]}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
               RowBox[{"AppearanceElements", "\[Rule]", 
                RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
              "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
             "\"\< \>\"", ",", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"NumberForm", "[", 
               RowBox[{"k3", ",", 
                RowBox[{"{", 
                 RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
         "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"km4", " ", ":=", " ", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{"{", " ", 
            RowBox[{
             RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
             RowBox[{"kLable", "[", "4", "]"}], ",", " ", "\"\< || (\>\"", 
             ",", "  ", 
             RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
             "\"\< - \>\"", ",", " ", 
             RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
             "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"k4", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"k4", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "kMin", ",", " ", "kMin", ",", " ", 
                    "kMax"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"alterKArrayElements", "[", " ", 
                    RowBox[{"4", ",", " ", "k4"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    "couplingData", " ", "=", " ", "calculateCouplings"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Dynamic", "@", "kMin"}], ",", 
                 RowBox[{"Dynamic", "@", "kMax"}]}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
               RowBox[{"AppearanceElements", "\[Rule]", 
                RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
              "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
             "\"\< \>\"", ",", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"NumberForm", "[", 
               RowBox[{"k4", ",", 
                RowBox[{"{", 
                 RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
         "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"km5a", " ", ":=", " ", 
        RowBox[{"{", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{"{", " ", 
            RowBox[{
             RowBox[{"Text", "@", "\"\<coupling from \>\""}], ",", " ", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"massLabel", "[", " ", "m1Sel", "]"}]}], ",", 
             RowBox[{"Text", "@", "\"\< to: \>\""}]}], "}"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Dynamic", "@", 
           RowBox[{"If", " ", "[", " ", 
            RowBox[{
             RowBox[{"rawNumberOfMasses", " ", ">", " ", "2"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"moSel", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"moSel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", "kArrayOriginSelect"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], ",", " ", "\[IndentingNewLine]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#", " ", "\[Rule]", " ", 
                   RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                  " ", 
                 RowBox[{"(", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}], ",", 
                    "m1Sel"}], "]"}], ")"}]}], ")"}]}], "\[IndentingNewLine]",
               "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"massLabel", "[", " ", 
               RowBox[{"First", "@", 
                RowBox[{"Delete", "[", " ", 
                 RowBox[{
                  RowBox[{"Range", "[", "2", "]"}], ",", " ", "m1Sel"}], 
                 "]"}]}], " ", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
         "\[IndentingNewLine]", "}"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"km5b", " ", ":=", " ", 
        RowBox[{"{", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"kLable", "[", "5", "]"}], ",", " ", "\"\<: \>\""}], 
            "}"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"k5", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"k5", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "kMin", ",", " ", "kMin", ",", " ", 
                    "kMax"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{
                    "alterKarrayOriginElement", "[", " ", "k5", " ", "]"}]}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{
                    "couplingData", " ", "=", " ", "calculateCouplings"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Dynamic", "@", "kMin"}], ",", 
                 RowBox[{"Dynamic", "@", "kMax"}]}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
               RowBox[{"AppearanceElements", "\[Rule]", 
                RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
              "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
             "\"\< \>\"", ",", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"NumberForm", "[", " ", 
               RowBox[{"k5", ",", 
                RowBox[{"{", 
                 RowBox[{"3", ",", "2"}], "}"}]}], "]"}]}]}], 
            "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
         "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"freqControls", " ", ":=", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{"{", " ", 
            RowBox[{
             RowBox[{"Text", "@", "\"\<mesh size \>\""}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Manipulator", "[", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"meshSize", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"meshSize", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "8", ",", " ", "2", ",", " ", "30"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"2", ",", "30", ",", "2"}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
               RowBox[{"AppearanceElements", "\[Rule]", 
                RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
             "\"\< \>\"", ",", " ", 
             RowBox[{"Dynamic", "[", "meshSize", "]"}]}], " ", 
            "\[IndentingNewLine]", "}"}], "]"}], ",", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"LocatorPane", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", "qPlaneLoc", 
             RowBox[{"(*", 
              RowBox[{",", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"qPlaneLoc", " ", "=", " ", "#"}], ";", " ", 
                 RowBox[{"tick", "=", 
                  RowBox[{
                   RowBox[{"Not", "[", "tick", "]"}], " ", "&"}]}]}], ")"}]}],
               "*)"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"Graphics", "[", 
                RowBox[{
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Lighter", "@", "Gray"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Polygon", "[", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    ")"}], "\[IndentingNewLine]", " ", "]"}], ",", 
                   "\[IndentingNewLine]", "Black", ",", 
                   RowBox[{"Line", "[", "qPlaneLoc", "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 " ", 
                 RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                   "/", "2"}]}], "\[IndentingNewLine]", ",", 
                 RowBox[{"ImageSize", " ", "\[Rule]", "  ", 
                  RowBox[{"200", " ", 
                   RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}]}]}], 
                "\[IndentingNewLine]", "]"}], " ", "&"}], " ", "@", " ", 
              RowBox[{"(", 
               RowBox[{
               "\"\<qMaxVec\>\"", " ", "/.", "parameterLocatorDependencies"}],
                ")"}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
            ",", "\[IndentingNewLine]", 
            RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
           "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "}"}]}], 
       " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"dynamicsControls", " ", ":=", "\[IndentingNewLine]", 
        RowBox[{"{", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"OverVector", "[", "\"\<q\>\"", "]"}], ",", 
             "\[IndentingNewLine]", "\"\< = \>\"", ",", "\[IndentingNewLine]", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", "qm", "}"}], ",", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"qm", " ", "=", " ", 
                 RowBox[{"(", 
                  RowBox[{
                  "\"\<qMaxVec\>\"", "  ", "/.", 
                   "parameterLocatorDependencies"}], ")"}]}], " ", ";", 
                "\[IndentingNewLine]", 
                RowBox[{"Slider2D", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"qLoc", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"qLoc", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], ",", " ", 
                  RowBox[{"(*", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.01", ",", "0.01"}], "}"}], ",", " ", "qm"}], 
                    "}"}], "*)"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", " ", "qm"}], ")"}], 
                  "\[IndentingNewLine]", ",", 
                  RowBox[{"ContinuousAction", "\[Rule]", "False"}], 
                  "\[IndentingNewLine]", ",", " ", 
                  RowBox[{"ImageSize", " ", "\[Rule]", " ", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"150", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}], " ", "&"}], ")"}], 
                    " ", "@", " ", "qm"}]}]}], "\[IndentingNewLine]", 
                 "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", " ", 
             "\[IndentingNewLine]", "\"\< 2 \[Pi] \>\"", ",", "  ", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"(", 
               RowBox[{"NumberForm", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"qLoc", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "Pi"}], ")"}]}], " ", "//", " ", 
                   "MatrixForm"}], ")"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
              "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", 
            RowBox[{"Text", "@", "\"\<time, normalized to one period:\>\""}], 
            "}"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"Manipulator", "[", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"tau", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"tau", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0", ",", " ", "0", ",", " ", "1"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"ContinuousAction", "\[Rule]", "True"}], ",", 
               RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}]}], "]"}], 
             "}"}], "\[IndentingNewLine]", ",", " ", 
            RowBox[{"ImageSize", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"200", ",", "60"}], "}"}]}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", 
            RowBox[{"Text", "@", "\"\<oscillation scale factor:\>\""}], "}"}],
            "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"Manipulator", "[", 
               RowBox[{
                RowBox[{"Dynamic", "[", 
                 RowBox[{"scale", ",", 
                  RowBox[{
                   RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"scale", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.05", ",", " ", "0.05", ",", " ", "1"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                 "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.05", ",", "1"}], "}"}], ",", 
                RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                RowBox[{"AppearanceElements", "\[Rule]", 
                 RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], 
              "\[IndentingNewLine]", "\"\< \>\""}], ",", "  ", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"(", 
               RowBox[{"NumberForm", "[", 
                RowBox[{"scale", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
              "]"}]}], "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
           "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Text", "[", 
           RowBox[{
           "Text", "@", "\"\<Angular frequency \[Omega](q), selection:\>\""}],
            "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Dynamic", "@", 
           RowBox[{"SetterBar", "[", 
            RowBox[{
             RowBox[{"Dynamic", "[", 
              RowBox[{"omegaIndex", ",", 
               RowBox[{
                RowBox[{"(", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"omegaIndex", "=", "#"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                  ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"tick", "=", 
                   RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
              "]"}], ",", " ", 
             RowBox[{"Range", "[", 
              RowBox[{"2", "rawNumberOfMasses"}], "]"}]}], " ", "]"}]}]}], 
         "\[IndentingNewLine]", "}"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         FormBox[
          RowBox[{" ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"grab", " ", "data", " ", 
              RowBox[{"from", ":", " ", "rawArrayOfMasses"}]}], ",", " ", 
             "parameterLocatorDependencies", ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"couplingData", "[", 
                 RowBox[{"[", "_", "]"}], "]"}], "[", 
                RowBox[{"[", "_", "]"}], "]"}], "[", 
               RowBox[{"[", "_", "]"}], "]"}], " ", "=", " ", 
              RowBox[{"{", 
               RowBox[{"k", ",", " ", "j", ",", " ", 
                OverscriptBox["m", "\[RightVector]"], ",", " ", 
                SubscriptBox["K", 
                 RowBox[{
                  OverscriptBox["n", "\[RightVector]"], ",", 
                  RowBox[{"k", ";", 
                   OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], ",", 
                " ", 
                SuperscriptBox[
                 SubscriptBox[
                  OverscriptBox["a", "\[RightVector]"], 
                  RowBox[{
                   OverscriptBox["m", "\[RightVector]"], ",", 
                   RowBox[{"j", ";", 
                    OverscriptBox["0", "\[RightVector]"]}], ",", "k"}]], "2"],
                 ",", " ", 
                SubscriptBox[
                 OverscriptBox["p", "\[RightVector]"], "k"], ",", " ", 
                RowBox[{
                 SubscriptBox[
                  OverscriptBox["r", "\[RightVector]"], 
                  OverscriptBox["m", "\[RightVector]"]], " ", "+", " ", 
                 SubscriptBox[
                  OverscriptBox["p", "\[RightVector]"], "j"]}], ",", " ", 
                SubscriptBox["Proj", 
                 SubscriptBox[
                  OverscriptBox["a", "\[RightVector]"], 
                  RowBox[{
                   OverscriptBox["m", "\[RightVector]"], ",", 
                   RowBox[{"j", ";", 
                    OverscriptBox["0", "\[RightVector]"]}], ",", "k"}]]]}], 
               "}"}]}]}], "\[IndentingNewLine]", 
            RowBox[{"ex", ":", " ", 
             RowBox[{"{", 
              RowBox[{"1", ",", "2", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", "0.5`", ",", 
               "1.`", ",", 
               RowBox[{"{", 
                RowBox[{"0.9`", ",", "0.7`"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0.30000000000000004`", ",", 
                 RowBox[{"-", "0.10000000000000009`"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0.36`", ",", "0.48`"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0.48`", ",", "0.6400000000000001`"}], "}"}]}], 
                "}"}]}], "}"}]}], "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
             "to", " ", "form", " ", "equations", " ", "of", " ", "the", " ", 
              RowBox[{"form", ":", "\[IndentingNewLine]", 
               RowBox[{
                SuperscriptBox["\[Omega]", "2"], " ", 
                RowBox[{
                 SubscriptBox[
                  OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
                 OverscriptBox["q", "\[RightVector]"], ")"}]}]}]}], " ", "=", 
             " ", 
             RowBox[{
              UnderscriptBox["\[Sum]", 
               RowBox[{
                OverscriptBox["0", "\[RightVector]"], ",", 
                RowBox[{"k", " ", "\[NotEqual]", " ", 
                 OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
              RowBox[{
               SubscriptBox["K", 
                RowBox[{
                 OverscriptBox["0", "\[RightVector]"], ",", 
                 RowBox[{"k", ";", 
                  OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
               SubscriptBox["Proj", 
                SubscriptBox[
                 OverscriptBox["a", "^"], 
                 RowBox[{
                  OverscriptBox["n", "\[RightVector]"], ",", 
                  RowBox[{"k", ";", 
                   OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
               RowBox[{"(", 
                RowBox[{
                 FractionBox[
                  RowBox[{
                   SubscriptBox[
                    OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
                   OverscriptBox["q", "\[RightVector]"], ")"}], 
                  SubscriptBox["m", "k"]], "-", " ", 
                 RowBox[{
                  FractionBox[
                   RowBox[{
                    SubscriptBox[
                    OverscriptBox["\[Epsilon]", "\[RightVector]"], "j"], "(", 
                    OverscriptBox["q", "\[RightVector]"], ")"}], 
                   SqrtBox[
                    RowBox[{
                    SubscriptBox["m", "k"], 
                    SubscriptBox["m", "j"]}]]], 
                  SuperscriptBox["e", 
                   RowBox[{"I", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SubscriptBox[
                    OverscriptBox["r", "\[RightVector]"], 
                    OverscriptBox["m", "\[RightVector]"]], " ", ".", " ", 
                    OverscriptBox["q", "\[RightVector]"]}], " ", ")"}]}]]}]}],
                 ")"}]}]}]}]}]}],
          TraditionalForm], "\[IndentingNewLine]", "Note", " ", "that", " ", 
         "qVec", " ", "here", " ", "is", " ", "intended", " ", "to", " ", 
         "be", " ", "an", " ", "undefined", " ", 
         RowBox[{"global", ".", "  ", "Is"}], " ", "there", " ", "a", " ", 
         "way", " ", "to", " ", "do", " ", "that", " ", 
         RowBox[{"programatically", "?"}]}], "\[IndentingNewLine]", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"oneTermOfdynamicsMatrix", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "k_Integer", ",", " ", "j_Integer", ",", " ", "mVec_List", ",", 
            " ", "kS_", ",", " ", "_", ",", "_", ",", "_", ",", "proj_List"}],
            "}"}], ",", " ", "r_List", ",", " ", "mk_", ",", " ", 
          "epsilon_List", ",", " ", "mA_List"}], "]"}], " ", ":=", " ", 
        RowBox[{"(", 
         RowBox[{"kS", " ", 
          RowBox[{"proj", "  ", ".", 
           RowBox[{"(", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"epsilon", "[", 
               RowBox[{"[", "k", "]"}], "]"}], "/", "mk"}], " ", "-", " ", 
             RowBox[{
              RowBox[{"epsilon", "[", 
               RowBox[{"[", "j", "]"}], "]"}], 
              RowBox[{
               RowBox[{"E", "^", 
                RowBox[{"(", 
                 RowBox[{"I", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"mVec", " ", ".", " ", "r"}], ")"}], ".", " ", 
                    "qVec"}], ")"}]}], ")"}]}], "/", 
               RowBox[{"Sqrt", "[", " ", 
                RowBox[{"mk", " ", 
                 RowBox[{"mA", "[", 
                  RowBox[{"[", "j", "]"}], "]"}]}], " ", "]"}]}]}]}], 
            ")"}]}]}], "  ", ")"}]}], "  ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"dynamicsMatrix", " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "cd", ",", " ", "r", ",", " ", "res", ",", " ", "epsilon", ",", 
            " ", "m", ",", "mScalarArray", ",", " ", "numberOfMasses"}], 
           "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"cd", " ", "=", " ", 
            RowBox[{"SplitBy", "[", " ", 
             RowBox[{
              RowBox[{"Sort", "@", 
               RowBox[{"Flatten", "[", 
                RowBox[{"couplingData", ",", " ", "2"}], "]"}]}], " ", ",", 
              " ", "First"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"r", ",", "mScalarArray", ",", " ", "numberOfMasses"}], 
             "}"}], " ", "=", " ", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "\"\<latticeBasis\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", 
               " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", 
             "parameterLocatorDependencies"}]}], " ", ";", " ", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{
              RowBox[{"Here", " ", 
               SubscriptBox[
                OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], " ", 
               RowBox[{"(", 
                RowBox[{"=", 
                 RowBox[{"epsilon", "[", 
                  RowBox[{"[", "k", "]"}], "]"}]}], ")"}], " ", "is", " ", 
               "represented", " ", "as", " ", "a", " ", "2", "x", 
               RowBox[{"(", 
                RowBox[{"2", "N"}], ")"}], " ", "matrix", " ", "with", " ", 
               "the", " ", "vector", " ", "factored", " ", 
               RowBox[{"out", ".", "  ", "For"}], " ", "example", " ", "with",
                " ", "N"}], " ", "=", " ", "3"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{
              SubscriptBox[
               OverscriptBox["\[Epsilon]", "\[RightVector]"], "1"], "=", " ", 
              RowBox[{
               RowBox[{
                TagBox[
                 RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"1", "0", "0", "0", "0", "0"},
                    {"0", "1", "0", "0", "0", "0"}
                   },
                   
                   GridBoxAlignment->{
                    "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                   GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
                 Function[BoxForm`e$, 
                  MatrixForm[BoxForm`e$]]], "\[IndentingNewLine]", 
                "\[IndentingNewLine]", "This", " ", "will", " ", "be", " ", 
                "pre"}], "-", 
               RowBox[{
               "multiplied", " ", "by", " ", "a", " ", "2", "x2", " ", 
                "projection", " ", 
                RowBox[{"matrix", ".", "\[IndentingNewLine]", "The"}], " ", 
                "whole", " ", "thing", " ", "should", " ", "be", " ", 
                "logically", " ", "treated", " ", "as", " ", "if", " ", "it", 
                " ", "is", " ", "post"}], "-", 
               RowBox[{
               "multiplied", " ", "by", "\[IndentingNewLine]", 
                "\[IndentingNewLine]", Cell[TextData[Cell[BoxData[
                 TagBox[
                  RowBox[{"(", "\[NoBreak]", GridBox[{
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "1"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "2"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "1"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "2"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "1"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "2"}]]}
                    },
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                    GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
                  Function[BoxForm`e$, 
                   MatrixForm[BoxForm`e$]]]],
                 
                 CellChangeTimes->{{3.600871330362259*^9, 
                  3.6008713538916054`*^9}}]]]}]}]}]}], "\[IndentingNewLine]", 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{"epsilon", " ", "=", " ", 
            RowBox[{"Partition", "[", 
             RowBox[{
              RowBox[{"IdentityMatrix", "[", " ", 
               RowBox[{"2", " ", "numberOfMasses"}], " ", "]"}], ",", "2"}], 
             "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"res", " ", "=", " ", 
            RowBox[{"Partition", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Table", "[", " ", 
                RowBox[{
                 RowBox[{"Total", "@", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"oneTermOfdynamicsMatrix", "[", 
                    RowBox[{"#", ",", " ", "r", ",", " ", 
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", " ", "epsilon", ",", 
                    " ", "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
                    RowBox[{"(", 
                    RowBox[{"cd", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ")"}]}], ",", 
                 " ", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], "]"}], 
               " ", "//", " ", "Flatten"}], ",", " ", 
              RowBox[{"2", " ", "numberOfMasses"}]}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"res", " ", "/.", " ", 
             RowBox[{"qVec", " ", "\[Rule]", " ", "#"}]}], " ", "&"}]}]}], 
         " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{";", " ", "epsilon"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{";", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"oneTermOfdynamicsMatrix", "[", 
              RowBox[{"#", ",", " ", "r", ",", 
               RowBox[{"mScalarArray", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", 
               "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
            RowBox[{"(", 
             RowBox[{"cd", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
         "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"calcDynamics", "::", "usage"}], " ", "=", " ", 
          "\"\<a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \
\(k\)]\),\!\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for \
each of the system eigenvalues, when evaluated at qLoc\>\""}], " ", ";"}], 
        "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"calcDynamics", " ", ":=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Sqrt", "[", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Eigensystem", "[", " ", 
             RowBox[{"matrix", "[", "qLoc", "]"}], " ", "]"}], " ", "//", " ",
             "Transpose"}], ")"}]}], ")"}]}], "  ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"showDynamics", " ", ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "pointsDataTable", ",", "numberLatticeLinesToDisplay", ",", " ", 
            "e", ",", " ", "omega", ",", " ", "points", ",", " ", "lines", 
            ",", " ", "nu", ",", " ", "a", ",", "b", ",", " ", "mScalarArray",
             ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"a", ",", " ", "b"}], "}"}], ",", "pointsDataTable", 
              ",", "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ",
               "mScalarArray", ",", " ", "numberOfMasses"}], "}"}], "=", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "\"\<latticeBasis\>\"", ",", "\"\<pointsDataTable\>\"", ",", 
               "\"\<numberLatticeLinesToDisplay\>\"", ",", " ", 
               "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", 
               " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", 
             "parameterLocatorDependencies"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"omega", ",", " ", "e"}], "}"}], " ", "=", " ", 
            RowBox[{"dynamics", "[", 
             RowBox[{"[", "omegaIndex", "]"}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"e", " ", "=", " ", 
            RowBox[{"Partition", "[", 
             RowBox[{"e", ",", "2"}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"points", " ", "=", " ", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"pointsDataTable", "[", 
                 RowBox[{"[", "k", "]"}], "]"}], " ", "+", " ", 
                RowBox[{"Table", "[", " ", "\[IndentingNewLine]", " ", 
                 RowBox[{
                  RowBox[{"scale", " ", 
                   RowBox[{"Re", "[", 
                    RowBox[{
                    RowBox[{"e", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], " ", 
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"I", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    RowBox[{"qLoc", " ", ".", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"a", " ", "i"}], " ", "+", " ", 
                    RowBox[{"b", " ", "j"}]}], ")"}]}], " ", "-", " ", 
                    RowBox[{"omega", " ", "#"}]}], ")"}]}], ")"}]}]}], " ", 
                    "]"}]}], "\[IndentingNewLine]", ",", 
                  RowBox[{"{", 
                   RowBox[{"i", ",", " ", 
                    RowBox[{"-", 
                    RowBox[{"numberLatticeLinesToDisplay", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"numberLatticeLinesToDisplay", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], 
                  "\[IndentingNewLine]", ",", 
                  RowBox[{"{", 
                   RowBox[{"j", ",", " ", 
                    RowBox[{"-", 
                    RowBox[{"numberLatticeLinesToDisplay", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"numberLatticeLinesToDisplay", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], 
                 "\[IndentingNewLine]", "]"}]}], " ", "&"}], ",", 
              RowBox[{"{", 
               RowBox[{"k", ",", "numberOfMasses"}], "}"}]}], "]"}]}], " ", 
           ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"nu", " ", "=", " ", 
            RowBox[{"2", " ", "Pi", " ", 
             RowBox[{"If", "[", " ", 
              RowBox[{
               RowBox[{"omega", " ", "\[Equal]", " ", "0"}], ",", " ", "1", 
               ",", " ", 
               RowBox[{"1", "/", "omega"}]}], "]"}]}]}], " ", ";", " ", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Show", "[", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"ListPlot", "[", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"points", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "[", 
                    RowBox[{"nu", " ", "#"}], "]"}], "\[IndentingNewLine]", 
                    ",", 
                    RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "windowHalfWidth"}], "/", "2"}], ",", " ", 
                    "windowHalfWidth"}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "windowHalfWidth"}], "/", "2"}], ",", " ", 
                    "windowHalfWidth"}], "}"}]}], "}"}]}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{"ImageSize", "\[Rule]", "primaryDisplaySize"}], 
                    "\[IndentingNewLine]", ",", " ", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "/", "mMax"}], "/", 
                    "350"}], "]"}], "]"}], ",", 
                    RowBox[{"massColors", "[", "k", "]"}]}], "]"}]}]}], 
                   "\[IndentingNewLine]", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"k", ",", "numberOfMasses"}], "}"}]}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                 "{", "\[IndentingNewLine]", "lines", "\[IndentingNewLine]", 
                  "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], " ", 
             "&"}], ")"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"frequencyPlot", "::", "usage"}], " ", "=", " ", 
          "\"\<frequencyPlot[ dynamicsMatrix[{1,0}, {0,1}, 8, { 2 Pi, 2 Pi }, \
0.5, 0.5, 0.25, 0.25, 1][#] & ]\>\""}], " ", ";"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"frequencyPlotCalc", " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "eigTable2D", ",", " ", "eigTable1D", ",", " ", "qMax", ",", " ", 
            "omegaPointList2D", ",", " ", "omegaPointList1D", ",", " ", 
            "range", ",", " ", "numberOfMasses"}], "}"}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"qMax", ",", " ", "numberOfMasses"}], "}"}], " ", "=", 
            " ", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<qMaxVec\>\"", ",", "\"\<numberOfMasses\>\""}], 
              "}"}], " ", "/.", " ", "parameterLocatorDependencies"}]}], " ", 
           ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"eigTable2D", " ", "=", " ", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{"Re", "[", 
               RowBox[{"Table", "[", "  ", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"qx", ",", " ", "qy"}], "}"}], " ", ",", 
                   RowBox[{"Eigenvalues", "[", " ", 
                    RowBox[{
                    RowBox[{"matrix", "[", " ", 
                    RowBox[{"{", 
                    RowBox[{"qx", ",", " ", "qy"}], "}"}], "  ", "]"}], " ", "//",
                     " ", "N"}], " ", "]"}]}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"qx", ",", " ", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"qMax", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                   RowBox[{
                    RowBox[{"qMax", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/", "2"}], ",", " ", 
                   RowBox[{
                    RowBox[{"qMax", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/", " ", "meshSize"}]}], 
                  "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"qy", ",", " ", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"qMax", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                   RowBox[{
                    RowBox[{"qMax", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/", "2"}], ",", " ", 
                   RowBox[{
                    RowBox[{"qMax", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/", " ", "meshSize"}]}], 
                  "}"}]}], " ", "]"}], " ", "]"}], ",", "1"}], "]"}]}], " ", 
           ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"omegaPointList2D", "[", "nn_", "]"}], " ", ":=", "  ", 
            RowBox[{
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
                  RowBox[{"[", "nn", "]"}], "]"}]}], "}"}], "]"}], "&"}], "/@",
              " ", "eigTable2D"}]}], "  ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"range", " ", "=", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"2", " ", "numberOfMasses"}], ")"}], " ", "//", " ", 
              "Range"}], ")"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"ListPlot3D", "[", " ", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"omegaPointList2D", "[", "#", "]"}], " ", "&"}], "/@", 
              " ", "range"}], ",", " ", 
             RowBox[{"PlotRange", " ", "\[Rule]", " ", "Full"}], " ", ",", 
             " ", 
             RowBox[{"ImageSize", "\[Rule]", "primaryDisplaySize"}], ",", 
             RowBox[{"AxesLabel", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
               "\"\<\!\(\*SubscriptBox[\(q\), \(x\)]\)\>\"", ",", " ", 
                "\"\<\!\(\*SubscriptBox[\(q\), \(y\)]\)\>\""}], "}"}]}]}], 
            "]"}]}]}], "\[IndentingNewLine]", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"showFreqPlot", " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"aa", ",", " ", "bb"}], "}"}], ",", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"aa", ",", " ", "bb"}], "}"}], " ", "=", "  ", 
            "qPlaneLoc"}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"Show", "[", 
            RowBox[{"{", 
             RowBox[{"freqPlot", ",", "\[IndentingNewLine]", 
              RowBox[{"Graphics3D", "[", " ", 
               RowBox[{"Polygon", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"aa", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"aa", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", 
                  " ", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"bb", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"bb", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", 
                  "  ", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"bb", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"bb", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"aa", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"aa", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}]}], 
                 "}"}], "]"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
            "]"}]}]}], "\[IndentingNewLine]", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"k1", ",", "k2", ",", "k3", ",", "k4", ",", "k5"}], "}"}], 
          " ", "=", " ", "kDefaults"}], " ", ";"}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
       "parameterLocatorDependencies", " ", "=", " ", "locDependent"}], " ", 
       ";", "\[IndentingNewLine]", 
       RowBox[{"kArray", " ", "=", " ", 
        RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "n", "}"}], ",", 
         RowBox[{
          RowBox[{"n", " ", "=", " ", "2"}], " ", ";", 
          RowBox[{"While", "[", 
           RowBox[{
            RowBox[{"n", "\[LessEqual]", "rawNumberOfMasses"}], ",", 
            RowBox[{
             RowBox[{"kArray", " ", "=", " ", 
              RowBox[{"growKarray", "[", "n", "]"}]}], " ", ";", " ", 
             RowBox[{"n", "++"}]}]}], "]"}]}]}], " ", "]"}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"qLoc", " ", "=", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
          "\"\<qMaxVec\>\"", " ", "/.", " ", "parameterLocatorDependencies"}],
           ")"}], "/", "2"}]}], " ", ";", "\[IndentingNewLine]", 
       RowBox[{"qPlaneLoc", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"couplingData", " ", "=", " ", "calculateCouplings"}], " ", 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"bRefreshMatrix", ":", " ", 
          RowBox[{"dependent", " ", "on"}], ":", " ", 
          "parameterLocatorDependencies"}], ",", " ", "couplingData"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"matrix", " ", "=", " ", "dynamicsMatrix"}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"bRefreshDynamics", ":", " ", 
          RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", "qLoc",
          ","}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"dynamics", " ", "=", " ", "calcDynamics"}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"bRefreshDynPlot", ":", " ", 
          RowBox[{"dependent", " ", "on", " ", "dynamics"}]}], ",", " ", 
         "omegaIndex", ",", " ", "scale"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"dynPlot", " ", "=", " ", "showDynamics"}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"bRefreshFreqPlot", ":", " ", 
          RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
         "meshSize"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"freqPlot", " ", "=", " ", "frequencyPlotCalc"}], " ", ";"}], 
      "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{
  3.6008871152711043`*^9, {3.6008878463659205`*^9, 3.600887886015188*^9}, {
   3.6008879391292267`*^9, 3.6008879415153627`*^9}, {3.600888091984969*^9, 
   3.6008883433153443`*^9}, 3.6008885263348126`*^9, {3.6008888984290953`*^9, 
   3.600888932797061*^9}, {3.600888993884555*^9, 3.6008890126046257`*^9}, {
   3.600889044795467*^9, 3.600889110217209*^9}, {3.6008893791525908`*^9, 
   3.6008894693857517`*^9}, {3.6009073957924075`*^9, 
   3.6009074524626493`*^9}, {3.6009075265508866`*^9, 
   3.6009075610528603`*^9}, {3.6009076569773464`*^9, 
   3.6009076707051315`*^9}, {3.6009077188078833`*^9, 
   3.6009077286794477`*^9}, {3.6009077659785814`*^9, 
   3.6009079706362867`*^9}, {3.600908054245069*^9, 3.600908140176984*^9}, {
   3.6009081838104796`*^9, 3.600908220797595*^9}, {3.600908270197421*^9, 
   3.60090839430752*^9}, {3.6009085493983903`*^9, 3.600908632830162*^9}, {
   3.6009104219057503`*^9, 3.600910551490162*^9}, {3.6009105819839067`*^9, 
   3.6009107163495913`*^9}, {3.6009107490184603`*^9, 
   3.6009108466910467`*^9}, {3.6009108881204166`*^9, 
   3.6009109333690042`*^9}, {3.6009109645897903`*^9, 3.600911102754693*^9}, {
   3.600911162066085*^9, 3.6009112455218587`*^9}, {3.60091132946966*^9, 
   3.600911467735568*^9}, {3.6009116825438547`*^9, 3.6009116849159904`*^9}, {
   3.6009120226073055`*^9, 3.600912033621935*^9}, {3.600912079805577*^9, 
   3.6009121379119005`*^9}, 3.600912170697776*^9, {3.6009123934575167`*^9, 
   3.600912463012495*^9}, 3.6009125608040886`*^9, {3.600912607075735*^9, 
   3.6009126103029194`*^9}, {3.6009126938556986`*^9, 3.600912720260209*^9}, {
   3.6009127682479534`*^9, 3.600912775914392*^9}, {3.600912813582546*^9, 
   3.60091282099197*^9}, {3.6009128709458275`*^9, 3.600912974304739*^9}, {
   3.600913016241138*^9, 3.600913066736026*^9}, {3.600913126611451*^9, 
   3.600913131946756*^9}, 3.6009132421360583`*^9, {3.6009132749369345`*^9, 
   3.600913280647261*^9}, 3.600913337673523*^9, 3.600916621675357*^9, 
   3.600965214488559*^9, {3.6009661322380505`*^9, 3.600966176771598*^9}, {
   3.6009662471326227`*^9, 3.600966394917075*^9}, {3.6009879713800135`*^9, 
   3.600988049076458*^9}, {3.600988225626556*^9, 3.6009883475695305`*^9}, {
   3.6009884528645535`*^9, 3.600988453985617*^9}, {3.600990879642357*^9, 
   3.600990890466976*^9}, 3.600991791440509*^9, {3.6009918290936623`*^9, 
   3.6009918295696898`*^9}, {3.600991910314308*^9, 3.600991962439289*^9}, {
   3.601209094521962*^9, 3.601209094838994*^9}, {3.60124392369334*^9, 
   3.601243936141052*^9}, {3.6012441222676973`*^9, 3.601244224121523*^9}, {
   3.601244765029462*^9, 3.601244770915798*^9}, {3.6012448106420703`*^9, 
   3.601244813889256*^9}, {3.601244927672764*^9, 3.601244966708997*^9}, {
   3.6012449996218796`*^9, 3.6012450086803975`*^9}, {3.601245110912245*^9, 
   3.6012451167165766`*^9}, {3.6012451637242656`*^9, 3.601245217581346*^9}, 
   3.6012453748543415`*^9, {3.6012475080133514`*^9, 3.6012475109345183`*^9}, {
   3.6012475992715707`*^9, 3.6012476236619663`*^9}, 3.6012479539448566`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {}, $CellContext`defaultMass$$ = 
    20, $CellContext`dynamics$$ = {}, $CellContext`dynPlot$$ = {}, \
$CellContext`dynTab$$ = 
    1, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
    2, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ =
     0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {}, $CellContext`kDefaults$$ = {0.25, 0.25, 
    0.25, 0.25, 0.25}, $CellContext`kMax$$ = 1, $CellContext`kMin$$ = 
    0.05, $CellContext`locDefault$$ = {{0.1, 1.3}, {1.9, 
    0.8}}, $CellContext`m1Sel$$ = 1, $CellContext`m2Sel$$ = 
    1, $CellContext`matrix$$ = {}, $CellContext`meshSize$$ = 
    8, $CellContext`minAngleBetweenLatticeVectors$$ = Rational[1, 6] 
    Pi, $CellContext`minSquaredDistanceFromOrigin$$ = 
    0.1, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
    1.4}}, $CellContext`mMax$$ = 30, $CellContext`moSel$$ = 
    2, $CellContext`nArray$$ = {{1, 0}, {0, 1}, {1, 1}, {
    1, -1}}, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 3, $CellContext`primaryDisplaySize$$ = {380, 
    380}, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
    20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
    0.2, $CellContext`springColors$$ = {
     RGBColor[
      Rational[2, 3], 0.33333333333333337`, 0], 
     RGBColor[0, 
      Rational[2, 3], 0], 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
     RGBColor[0, 
      Rational[2, 3], 
      Rational[2, 3]], 
     RGBColor[
      Rational[2, 3], 
      Rational[2, 3], 
      0]}, $CellContext`springColorsByN$$ = {}, $CellContext`tabNumber$$ = 
    3, $CellContext`tau$$ = 0, $CellContext`textDisOffset$$ = {0.25, 
    0.25}, $CellContext`tick$$ = 
    False, $CellContext`u$$ = {}, $CellContext`windowHalfWidth$$ = 3, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        If[$CellContext`rawNumberOfMasses$$ == 1, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; \
$CellContext`dynamicsControls], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Row[$CellContext`tabNumber$$ = $CellContext`freqTab$$; \
$CellContext`freqControls], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; \
{$CellContext`massSetter, $CellContext`m2Setter, $CellContext`km1, \
$CellContext`km2, $CellContext`km3, $CellContext`km4}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}], 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; \
$CellContext`dynamicsControls], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Row[$CellContext`tabNumber$$ = $CellContext`freqTab$$; \
$CellContext`freqControls], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; \
{$CellContext`massSetter, $CellContext`m2Setter, $CellContext`km1, \
$CellContext`km2, $CellContext`km3, $CellContext`km4, $CellContext`km5a, \
$CellContext`km5b}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tau$$], 0}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`meshSize$$], 8}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`minSquaredDistanceFromOrigin$$], 0.1}, 0}, {{
       Hold[$CellContext`minAngleBetweenLatticeVectors$$], Rational[1, 6] Pi},
       0}, {{
       Hold[$CellContext`locDefault$$], {{0.1, 1.3}, {1.9, 0.8}}}, 0}, {{
       Hold[$CellContext`defaultMass$$], 20}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`springColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}, {{
       Hold[$CellContext`kDefaults$$], {0.25, 0.25, 0.25, 0.25, 0.25}}, 0}, {{
       Hold[$CellContext`kMin$$], 0.05}, 0}, {{
       Hold[$CellContext`kMax$$], 1}, 0}, {{
       Hold[$CellContext`mMax$$], 30}, 0}, {{
       Hold[$CellContext`windowHalfWidth$$], 3}, 0}, {{
       Hold[$CellContext`springColors$$], {
        RGBColor[
         Rational[2, 3], 0.33333333333333337`, 0], 
        RGBColor[0, 
         Rational[2, 3], 0], 
        RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
        RGBColor[0, 
         Rational[2, 3], 
         Rational[2, 3]], 
        RGBColor[
         Rational[2, 3], 
         Rational[2, 3], 0]}}, 0}, {{
       Hold[$CellContext`primaryDisplaySize$$], {380, 380}}, 0}, {{
       Hold[$CellContext`textDisOffset$$], {0.25, 0.25}}, 0}, {{
       Hold[$CellContext`nArray$$], {{1, 0}, {0, 1}, {1, 1}, {1, -1}}}, 0}}, 
    Typeset`size$$ = Automatic, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`defaultMass$$ = 
        20, $CellContext`dynamics$$ = {}, $CellContext`dynPlot$$ = {}, \
$CellContext`dynTab$$ = 
        1, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
        0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
        0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`kDefaults$$ = {0.25, 
         0.25, 0.25, 0.25, 0.25}, $CellContext`kMax$$ = 
        1, $CellContext`kMin$$ = 
        0.05, $CellContext`locDefault$$ = {{0.1, 1.3}, {1.9, 
         0.8}}, $CellContext`m1Sel$$ = 1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`meshSize$$ = 
        8, $CellContext`minAngleBetweenLatticeVectors$$ = 
        Rational[1, 6] Pi, $CellContext`minSquaredDistanceFromOrigin$$ = 
        0.1, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
         1.4}}, $CellContext`mMax$$ = 30, $CellContext`moSel$$ = 
        2, $CellContext`nArray$$ = {{1, 0}, {0, 1}, {1, 1}, {
         1, -1}}, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`primaryDisplaySize$$ = {380, 
         380}, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`springColors$$ = {
          RGBColor[
           Rational[2, 3], 0.33333333333333337`, 0], 
          RGBColor[0, 
           Rational[2, 3], 0], 
          RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
          RGBColor[0, 
           Rational[2, 3], 
           Rational[2, 3]], 
          RGBColor[
           Rational[2, 3], 
           Rational[2, 3], 
           0]}, $CellContext`springColorsByN$$ = {}, $CellContext`tabNumber$$ = 
        1, $CellContext`tau$$ = 
        0, $CellContext`textDisOffset$$ = {0.25, 0.25}, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}, $CellContext`windowHalfWidth$$ = 3}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ($CellContext`tick$$; Dynamic[
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics; $CellContext`bRefreshDynamics$$ = 
             False; $CellContext`bRefreshDynPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`showDynamics; $CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynamics[$CellContext`tau$$], 
          
          If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc; $CellContext`bRefreshFreqPlot$$ = False, 
             Null]; $CellContext`showFreqPlot, \
$CellContext`couplingLocator]]]), "Specifications" :> {
        Dynamic[
         If[$CellContext`rawNumberOfMasses$$ == 1, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; \
$CellContext`dynamicsControls], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Row[$CellContext`tabNumber$$ = $CellContext`freqTab$$; \
$CellContext`freqControls], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; \
{$CellContext`massSetter, $CellContext`m2Setter, $CellContext`km1, \
$CellContext`km2, $CellContext`km3, $CellContext`km4}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}], 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; \
$CellContext`dynamicsControls], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Row[$CellContext`tabNumber$$ = $CellContext`freqTab$$; \
$CellContext`freqControls], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; \
{$CellContext`massSetter, $CellContext`m2Setter, $CellContext`km1, \
$CellContext`km2, $CellContext`km3, $CellContext`km4, $CellContext`km5a, \
$CellContext`km5b}]}, 
           Dynamic[$CellContext`tabNumber$$], 
           ImageSize -> {250, 350}]]], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tau$$, 0}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`meshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`minSquaredDistanceFromOrigin$$, 0.1}, 0, 
         ControlType -> 
         None}, {{$CellContext`minAngleBetweenLatticeVectors$$, 
          Rational[1, 6] Pi}, 0, ControlType -> 
         None}, {{$CellContext`locDefault$$, {{0.1, 1.3}, {1.9, 0.8}}}, 0, 
         ControlType -> None}, {{$CellContext`defaultMass$$, 20}, 0, 
         ControlType -> None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, 
         ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`springColorsByN$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`kDefaults$$, {0.25, 0.25, 0.25, 0.25, 0.25}}, 
         0, ControlType -> None}, {{$CellContext`kMin$$, 0.05}, 0, 
         ControlType -> None}, {{$CellContext`kMax$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mMax$$, 30}, 0, ControlType -> 
         None}, {{$CellContext`windowHalfWidth$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`springColors$$, {
           RGBColor[
            Rational[2, 3], 0.33333333333333337`, 0], 
           RGBColor[0, 
            Rational[2, 3], 0], 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
           RGBColor[0, 
            Rational[2, 3], 
            Rational[2, 3]], 
           RGBColor[
            Rational[2, 3], 
            Rational[2, 3], 0]}}, 0, ControlType -> 
         None}, {{$CellContext`primaryDisplaySize$$, {380, 380}}, 0, 
         ControlType -> None}, {{$CellContext`textDisOffset$$, {0.25, 0.25}}, 
         0, ControlType -> 
         None}, {{$CellContext`nArray$$, {{1, 0}, {0, 1}, {1, 1}, {1, -1}}}, 
         0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{714., {255., 262.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({{$CellContext`dynamicsMatrix := 
         Module[{$CellContext`cd$, $CellContext`r$, $CellContext`res$, \
$CellContext`epsilon$, $CellContext`m$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$}, $CellContext`cd$ = SplitBy[
              Sort[
               Flatten[FE`couplingData$$133, 2]], 
              First]; {$CellContext`r$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
            ReplaceAll[{"latticeBasis", "mScalarArray", "numberOfMasses"}, 
              FE`parameterLocatorDependencies$$133]; $CellContext`epsilon$ = 
            Partition[
              IdentityMatrix[2 $CellContext`numberOfMasses$], 
              2]; $CellContext`res$ = Partition[
              Flatten[
               Table[
                Total[
                 Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r$, 
                   
                   Part[$CellContext`mScalarArray$, $CellContext`i], \
$CellContext`epsilon$, $CellContext`mScalarArray$]& , 
                  
                  Part[$CellContext`cd$, $CellContext`i]]], {$CellContext`i, \
$CellContext`numberOfMasses$}]], 2 $CellContext`numberOfMasses$]; 
           ReplaceAll[$CellContext`res$, $CellContext`qVec -> #]& ], 
         Attributes[$CellContext`r$] = {Temporary}, 
         FE`couplingData$$133 = {{{{
             1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{
              0.5, -0.5}, {-0.5, 0.5}}}}, {{
             2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{
              0.5, -0.5}, {-0.5, 0.5}}}}}, {{{
             1, 2, {-1, 0}, 0.25, 0.9279609999999998, {0.9, 0.7}, {
              0.356, -0.09499999999999997}, {{0.3189099541898852, 
              0.46605406908264474`}, {0.46605406908264474`, 
              0.6810900458101148}}}, {
             1, 1, {1, 0}, 0.25, 1.6789609999999997`, {0.9, 0.7}, {
              0.9440000000000001, 1.9949999999999999`}, {{
              0.0011530940861640049`, 0.03393765549050875}, {
              0.03393765549050875, 0.9988469059138361}}}, {
             1, 1, {-1, 0}, 0.25, 1.6789609999999997`, {0.9, 0.7}, {
              0.856, -0.595}, {{0.0011530940861640049`, 
              0.03393765549050875}, {0.03393765549050875, 
              0.9988469059138361}}}, {
             1, 2, {-1, 1}, 0.25, 1.8387609999999996`, {0.9, 0.7}, {2.256, 
              0.7050000000000001}, {{0.9999864038882704, 
              0.0036872655010630295`}, {0.0036872655010630295`, 
              0.000013596111729583757`}}}, {
             1, 2, {1, 0}, 0.25, 3.4299610000000005`, {0.9, 0.7}, {
              0.44400000000000006`, 2.495}, {{
              0.060623429829085494`, -0.23863828189300107`}, \
{-0.23863828189300107`, 0.9393765701709144}}}, {
             1, 2, {0, 1}, 0.25, 3.65, {0.9, 0.7}, {2.3, 2.}, {{
              0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
              0.463013698630137}}}, {
             1, 1, {1, -1}, 0.25, 3.6897609999999994`, {0.9, 
              0.7}, {-0.9559999999999998, 1.1949999999999998`}, {{
              0.9335932598344446, -0.24899173686317352`}, \
{-0.24899173686317352`, 0.06640674016555542}}}, {
             1, 1, {-1, 1}, 0.25, 3.6897609999999994`, {0.9, 0.7}, {2.756, 
              0.20500000000000007`}, {{
              0.9335932598344446, -0.24899173686317352`}, \
{-0.24899173686317352`, 0.06640674016555542}}}, {
             1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{
              0.8494117647058823, 0.35764705882352943`}, {
              0.35764705882352943`, 0.15058823529411766`}}}, {
             1, 1, {0, -1}, 0.25, 4.25, {0.9, 
              0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
              0.8494117647058823, 0.35764705882352943`}, {
              0.35764705882352943`, 0.15058823529411766`}}}, {
             1, 2, {0, -1}, 0.25, 5.85, {0.9, 0.7}, {-1.5, 
              0.3999999999999999}, {{0.9846153846153846, 
              0.1230769230769231}, {0.1230769230769231, 
              0.015384615384615389`}}}, {
             1, 2, {1, -1}, 0.25, 6.540761, {0.9, 0.7}, {-1.456, 
              1.6949999999999998`}, {{
              0.8486376432344798, -0.35840172114529173`}, \
{-0.35840172114529173`, 0.15136235676552007`}}}, {
             1, 1, {1, 1}, 0.25, 8.168161, {0.9, 0.7}, {2.844, 2.795}, {{
              0.46266668837697983`, 0.4986042757972081}, {0.4986042757972081, 
              0.5373333116230201}}}, {
             1, 1, {-1, -1}, 0.25, 8.168161, {0.9, 
              0.7}, {-1.044, -1.3949999999999998`}, {{0.46266668837697983`, 
              0.4986042757972081}, {0.4986042757972081, 
              0.5373333116230201}}}, {
             1, 2, {-1, -1}, 0.25, 8.517160999999998, {0.9, 
              0.7}, {-1.544, -0.8949999999999998}, {{0.7013059868188474, 
              0.4576853719214654}, {0.4576853719214654, 
              0.2986940131811527}}}, {
             1, 2, {1, 1}, 0.25, 8.819161, {0.9, 0.7}, {2.344, 3.295}, {{
              0.23643246789575562`, 0.4248907577489514}, {0.4248907577489514, 
              0.7635675321042443}}}}, {{
             2, 1, {1, 0}, 0.25, 0.9279609999999998, {0.4, 1.2}, {
              0.9440000000000001, 1.9949999999999999`}, {{0.3189099541898852, 
              0.46605406908264474`}, {0.46605406908264474`, 
              0.6810900458101148}}}, {
             2, 2, {1, 0}, 0.25, 1.6789610000000004`, {0.4, 1.2}, {
              0.44400000000000006`, 2.495}, {{0.0011530940861640044`, 
              0.03393765549050874}, {0.03393765549050874, 
              0.9988469059138361}}}, {
             2, 2, {-1, 0}, 0.25, 1.6789609999999997`, {0.4, 1.2}, {
              0.356, -0.09499999999999997}, {{0.0011530940861640049`, 
              0.03393765549050875}, {0.03393765549050875, 
              0.9988469059138361}}}, {
             2, 1, {1, -1}, 0.25, 1.8387609999999996`, {0.4, 
              1.2}, {-0.9559999999999998, 1.1949999999999998`}, {{
              0.9999864038882704, 0.0036872655010630295`}, {
              0.0036872655010630295`, 0.000013596111729583757`}}}, {
             2, 1, {-1, 0}, 0.25, 3.429961, {0.4, 1.2}, {0.856, -0.595}, {{
              0.06062342982908551, -0.2386382818930011}, {-0.2386382818930011,
               0.9393765701709145}}}, {
             2, 1, {0, -1}, 0.25, 3.65, {0.4, 
              1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
              0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
              0.463013698630137}}}, {
             2, 2, {1, -1}, 0.25, 3.6897609999999994`, {0.4, 1.2}, {-1.456, 
              1.6949999999999998`}, {{
              0.9335932598344446, -0.24899173686317352`}, \
{-0.24899173686317352`, 0.06640674016555542}}}, {
             2, 2, {-1, 1}, 0.25, 3.6897609999999994`, {0.4, 1.2}, {2.256, 
              0.7050000000000001}, {{
              0.9335932598344446, -0.24899173686317352`}, \
{-0.24899173686317352`, 0.06640674016555542}}}, {
             2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{
              0.8494117647058823, 0.35764705882352943`}, {
              0.35764705882352943`, 0.15058823529411766`}}}, {
             2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 
              0.3999999999999999}, {{0.8494117647058823, 
              0.35764705882352943`}, {0.35764705882352943`, 
              0.15058823529411766`}}}, {
             2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{
              0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
              0.015384615384615389`}}}, {
             2, 1, {-1, 1}, 0.25, 6.540761, {0.4, 1.2}, {2.756, 
              0.20500000000000007`}, {{
              0.8486376432344798, -0.35840172114529173`}, \
{-0.35840172114529173`, 0.15136235676552007`}}}, {
             2, 2, {1, 1}, 0.25, 8.168161, {0.4, 1.2}, {2.344, 3.295}, {{
              0.46266668837697983`, 0.4986042757972081}, {0.4986042757972081, 
              0.5373333116230201}}}, {
             2, 2, {-1, -1}, 0.25, 8.168161, {0.4, 
              1.2}, {-1.544, -0.8949999999999998}, {{0.46266668837697983`, 
              0.4986042757972081}, {0.4986042757972081, 
              0.5373333116230201}}}, {
             2, 1, {1, 1}, 0.25, 8.517161, {0.4, 1.2}, {2.844, 2.795}, {{
              0.7013059868188473, 0.4576853719214654}, {0.4576853719214654, 
              0.29869401318115274`}}}, {
             2, 1, {-1, -1}, 0.25, 8.819161, {0.4, 
              1.2}, {-1.044, -1.3949999999999998`}, {{0.23643246789575562`, 
              0.4248907577489514}, {0.4248907577489514, 
              0.7635675321042443}}}}}}, 
         FE`parameterLocatorDependencies$$133 = {
          "mScalarArray" -> {10, 15}, "numberOfMasses" -> 2, 
           "latticeBasis" -> {{0.04400000000000004, 1.295}, {1.9, 0.8}}, 
           "latticeNorms" -> {1.2957472747414907`, 2.06155281280883}, 
           "latticeUnitVectors" -> {{0.03395723908335312, 
            0.9994232866577785}, {0.9216353751380655, 0.3880570000581329}}, 
           "numberLatticeLinesToDisplay" -> {69, 4}, 
           "reciprocalBasis" -> {{-0.32985610027625456`, 
            0.7834082381561044}, {0.533954562322187, -0.018142085515194015`}},
            "reciprocalNorms" -> {0.8500197141833299, 0.5342626787372659}, 
           "qMaxVec" -> {5.34083137896969, 3.356871413216396}, 
           "mObliqueComponents" -> {{0.251515276460644, 
            0.46785964622933246`}, {0.8081474456768234, 
            0.19181132231064196`}}, 
           "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}}, 
           "pointsDataTable" -> CompressedData["
1:eJxNnQWUXOX5xtd9N+suM7MS92xkI/Ou++7oJqUUt0ILFIqUUrQBCsWhQIsW
LYUQ3JkXp4HirkETQoi7/nfe5/n+p5zDgch+M/fe53v9+13vYSeEjkxJSEhI
Gv33ktF/M/n/3Y9t3vv+6fVau/Sn4BPbRnTLu4OH5S+p09Ff1S59cUQPmPfI
a6c+V6aPx//CFSP6/C2VU79oyNc/x//Cr0Y0kJM08cLSRI3/9Z/Gj+gbV/58
pr/5zRjWi+qk+I/fssuP9aLac+l1xxeenyNYL6qLDvn+bd9nJYL1orr3XxtH
v0G93nHiwqyPbh/RQ57qHf2EOv1d/JcnjuirnuUnHXNlmdovF47or/ImP3TT
+jFqv8wa0fGf7Tzr2GcS1H75UVQPPPvYZ35/9WsxrBfVM0o/eXN7eLcf60X1
hOfiF5QjWC+q757+Y9P0jFLBelF9+Kb1d7/SX6/jD7z8ha2B0eu7rXP0jtXq
tnGjv1EzorMy7qs+4IgyfWHr6G+siWrzFw1p5147Ri+P/8bjUU26N349CRr/
8XF/jura36za/a+NL8SwXlRfs8/b48d6Uf1b/OPm5ArWi+hRdj9LBetF9Nf2
63pd1v31GcX7otryl9bRO1irfywe/Z0VUb3Vfr5M43+87Lqo5sa/3vwxGv/j
M46I6mf2eQka/+Pu6VHdYc/nqRjWi2ip3b89fqwX0WftfucK1ovoTns+pYL1
IuqJP+faep0Z/+ffUb3L7nOtJsT/OT2qOXYfy/SN+D8dUV0V/9yv8/SG+D8F
UT3GLmx/7Kj4P19GdJotuCyG9SJ6hD2YvX6sF9HvTGi5gvUi+le7UaWC9SL6
oV1fvcb/VnBJVAuXxAVcq/Y1G6P6B3vepdDrxog+H5fXhXnQ/3MRrYzL6e59
MdPrJRFdeV/8eq+IYb2IPmT63+fHehHNPl9X3NaZJ1gvrB67f6WC9cL6V3ve
Pug1Napn+ZsPeqq3Fnp9N6I/3PmPlzzLS/XD+G26JaI3lKeM5E3OU5PvcRF9
Y4UJLma3dW5Eb/1h9PLuu9GP9SKaEN9+n+zzY72wzrDnmSdYL6yPxLf3j6WC
9cLabvvNB70+FNE18eWqa6HXsyMasv1Zqr+M/8ZARH8X//rv5mpcnlvLI3rW
MXEB7o3Ff/yF78N60ZfDoz/xkB/rhXXoiPlfDV+634/1wvqL+MftzBOsF9Zu
sxdlgvXCujP87egd8EGvB0d0ie3nGuh1UkSf+/3Vo3ekVFfGdbMzrP1mr3L1
/vgPvBLWaaO7rf2SPTGT1VVhPSZ59PY99Kwf641+n/jyngTodVJYz7H9P0aw
Xkg/jW/X9jLBeiF9wH7QB73mRPQlu9Aa6PWTsE60jVyqR8b1eldYG00IuToj
rteTw/qN3ejdsf3xf/xhbbAPfsmP9cJ6iv06AXr9JKR32+eNEawX0uPtwZYJ
1gvpkfHbeZ1PQ3F9PTl6vWZfarQu/rkXhPX69ktGFVYCex0O6167nznQvyes
18TNg293zL7mzyG9xp73Cj/WC+mNcXW9nyBYL6RHPxO/4fmC9UKaFL+dN5UJ
1gtp1dT4F/DBvh4d1ptfihuIGtjrmWFNicvxzRI1vSaE9QNffEPkQP//DWlX
/HKO3xUzvf49pCnmX97yY72QvnhqfIMmCtYL6e734xs6X7BeSK8dVaeuKIO9
/m9Q37X1fbCvxWHNMntXA3u9MqQnxv/6bSVqj/H+0ecb3875OdD/GSHdcWZ8
Q+6MmV67Q/qU7cd3/VgvpGvi5vQviYL1gnpZ3PwelC9YL6jj4pe7vQz2+oyg
XmT68sG+Ph/SU+PyzauBvb4spF/EzcPvS9T0ekBI/xI3H49lQ/9jQ3pv3Lyk
7YyZTLYEddOU+P3+wI/1gloQX/7bRMF6QfWZ/vMF6wX1GbNP5bDXY4O6yG60
T82+Hh/Sb+wvVsNezw9pny1coqbX9JAeajciG/p/P6gH2oPfETO93hbUCfbr
j/1YL6hzbf0kwXpBfdQMX75gvaAG7O+Xw16/H9CtcXPU5INeq0I6NBptzHuk
GnpdHdTH4uarsgTxxaNBnXdQPADIhr0+N6h5psftiC+GgnqY6fszxBdVQT3Y
9ksS9Lo6oL1z4g4yH/HFowH9Nm6OziqHvT43oP82Pfig19dG75/5g2ro9drR
+xt3fz8Xa2b8Mg8LapH5hyzY66lBVbOv22LY9gH9u9nrL/xYL6AXmP1Pgl6v
DejncfkXFgjWC+ipcXd1Xzns9dSAHmr20ov44pRRfcW36wHV+mJcX21BvTxu
nrUY9npMUH+Om+fBLOj/84CeZPHBNsQX9wT0R/PXKxFfnBLQ+y2eSRasF9AT
zZ4XIL4YE9As8yfluH9PDGuZ6c2L+MIX1GvMP1VrT1w36wO6Jy7nq4thr58J
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
V16xdP+wFPpFn9TZ9/uO9rmBn7cF/e3aJuopk/oZK7AHxag/B8dTX1XU0wSB
ffWinrd0ktxoP1+BuHXYJ8gnC5A3ra4XxEcpuH/nNcr5CMBj5o+qx0qDfb8t
frufj44T9GcyGR9OEMQ3xdDr6onyN/MvVbBH500W5MdexotTGadVMH5ukBPs
PhUwvmhinJJMfY+TVWjko9788Hg5yf7+VtSbByZS35nU8yTMkVxejHzw7CnU
ezXi6ZxpjIu8nL+bJoj/y9F3+dNY+dzsQQH2e9l4gf9n/2T5BOk3va6M2XX0
TRI1PW3zm16/nSzon2cxv5jK+8f+wCXTBPlhNZ7nkulij2+7F/WhxhnyjRno
cu6vCdJj+6kA9ZZlE+VgM9BJ3G+T5SDTw5eMN6ZIngliG/37NO63LMY70+Vx
85fs53w0nfuP9e/bZ8gpZqB9tCszZcj+vBx93X9PEtRr8hGPdU6hf0tCfP/l
VGky/X+G+u4z0+RA2//bkV9cNF0w35QF+x+dQf9UAv/gmynf2fVXQ1/rZ0rM
7q8P+nlmljxt96+c+32qeO3+5iOOPX6aFNj9T4L/aJku68ygf4x6fPoMudcC
lB2op74/g/s/m/n7TEF9oAT7+fhZtAfVyFdbmgX9Ix/qr+mzaafLWd+Yhj7L
5fnQ75PTab8T0V+5YIY8ZhvpA+g5PFN22AI7/KhfzBLMn2azvjGLei+BXp9s
5nOsQX/lgtmoswR96B+G58g1tv/KWP+ZIbtsf/J5pc6UF23/cl7/nZlyFgI6
xBs3z5Iuy4fYHziumfYoh/Wf2fT/JdBr6hzapxrYo3fmCOJNH/q9N8+VBBN4
GetjMwX10HzkO4FZtE+JqC/UNEuX5aNvo767plmuMf+6C/798dmC8wE5rI/N
oX0pgZ8KzJUZpr8a7L+aeYL6rg/3bc08+a3Zb/Yr3pol79n15aMefmOznGLP
OwH28ZjZUm36XoH6d/Mc+cbqDbvRf0uay/2dw/rhXJlk+7kEer1xHu1lDeuF
LWLu/1of64nz5VPzb2Wsr84W9OvHYH+vms39l4D5gEfmyH2Wz7yE/X7uXJlm
8dBuP+qn86Tf9lMu/FVlC+1TKfS6qkWQH9ZgPuCR+fIHi7d8mH85dwHmArrL
WH+eI79AYot6xsy5gjgtAfZ6/1w5HYPuyAffmCdn2cbag3zwhhbqN5dx8nzU
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
fzpe3BjUiRZM192cD7J66QnT9EzOB8EfTtUPOR+E80qTWT/Npf+cRF4ceZWn
TyAvroa8uHHkxfF9VhdPJy+O72d7dhp5cWMYJ05lfTOB5/mmaM69mA+C/5mk
DZwPgv+aqC9zPgj+ajx5V6U8zzeWvLganutpIi+uFnpd5HhxPH/+7RTy4vi+
uL7J9Bf7yYubqHOnYj4I9n6CnsT5IPiLcawP5pIX10ReHM/r9jVSD7X0J/Xk
xZHn+cNk8rRKaY8nkRfH+aCHJ9A+7ycvbrwuL8Z8EOzrWFXOB2G9RtQBivNo
jxvI3+J80MOsyy2sJS/OSx5ZLXlxE8mLK6X9G0/7yP5A9Tjaw33kxTXpOfdg
Pgj2rEHzOB8Ee1jP+hfncR71khdXSv6HR9/mfBB4cTXkxbGf88Q48uJKaW/G
kheXR/5XI+3PXvLi6vXtszAfRA6CHsj5IKzn0UM5H8T7QB5YKTkkVbS3teLs
DHgoteTFNfF6Srm/G8iLyyUvzsf9voe8OK/2HIH5IHtMp9TpvZwPAi+umnoc
w/1dQV5cGeP3EvqjWtqDQvLiari/6smLKyUvzkteXC55ZB7urz3kxdXoNS9h
PgjxXyX3D9+HVlymD3A+CPupiHwyvg9tWb5ewvkg1MmyGHfWkBfnIaeklPqt
pb5zWL+rYj16N+tz5Yr55FfJiyuhXhPIbyF35aMxnL/MZZ5dRl4c36NRW0de
XAJ5cTWOK05eXAn1UkFeXA7z+VLWN3cxXy9SnBd7w8/PpT4SyD/JZP02n+dj
ksmLK5NO1tER79XJJhSIyItzz6uM9oLnhxcXkxeXw/i+gPWyXeS3ZOsmi9ff
IS8ulc+D7x8bty8GXhb7AwduJC+uTGbZB74bQzxcx7ntleTF1dCvFZIXV0L/
nUdeXDZ5cemsv+wkjyiR8dN75MlsIy8ukf2ab8iLy5fV9usVfvDbygVzDxv8
4OnV8RzPHvLiqvl9ssiLKyEvLpm8OJ7Xrd0dQz6/I4ZzomtjsFcf+uHHnyAv
Loncnx/Ii8vnuc4d5MWVk0ORJBhnqOPcegbngquZ9yWQF1dCXtxmzhlnK851
fELO8o4Y9PcJzoWM/ncm80DoNokcuARyldk/OSqN/y0nJyCHf488zxsKyNOp
Zh3lB/LiSnQartePcDRLeT/80B/fh1a72496/ud+3k/y13i++sAs8uJ4Hv7Q
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
i2sij3mx/B9qay3B
            "], "lineTable" -> {{
              
              Line[{{-10.636000000000003`, -92.55499999999999}, \
{-4.5639999999999965`, 86.15499999999999}}], 
              
              Line[{{-8.736000000000002, -91.755}, {-2.6639999999999966`, 
               86.95499999999998}}], 
              
              Line[{{-6.836000000000002, -90.95499999999998}, \
{-0.7639999999999971, 87.755}}], 
              
              Line[{{-4.936000000000003, -90.15499999999999}, {
               1.1360000000000028`, 88.55499999999999}}], 
              
              Line[{{-3.0360000000000027`, -89.35499999999999}, {
               3.0360000000000027`, 89.35499999999999}}], 
              
              Line[{{-1.1360000000000028`, -88.55499999999999}, {
               4.936000000000003, 90.15499999999999}}], 
              
              Line[{{0.7639999999999971, -87.755}, {6.836000000000002, 
               90.95499999999998}}], 
              
              Line[{{2.6639999999999966`, -86.95499999999998}, {
               8.736000000000002, 91.755}}], 
              
              Line[{{4.5639999999999965`, -86.15499999999999}, {
               10.636000000000003`, 92.55499999999999}}]}, {
              
              Line[{{-10.636000000000003`, -92.55499999999999}, {
               4.5639999999999965`, -86.15499999999999}}], 
              
              Line[{{-10.592000000000002`, -91.26}, {
               4.607999999999997, -84.86}}], 
              Line[{{-10.548000000000002`, -89.965}, {
               4.6519999999999975`, -83.565}}], 
              
              Line[{{-10.504000000000001`, -88.67}, {
               4.695999999999997, -82.27}}], 
              
              Line[{{-10.460000000000003`, -87.375}, {
               4.739999999999997, -80.975}}], 
              
              Line[{{-10.416000000000002`, -86.08}, {
               4.783999999999997, -79.67999999999999}}], 
              
              Line[{{-10.372000000000002`, -84.785}, {
               4.827999999999998, -78.38499999999999}}], 
              
              Line[{{-10.328000000000003`, -83.49}, {
               4.871999999999997, -77.08999999999999}}], 
              
              Line[{{-10.284000000000002`, -82.195}, {
               4.915999999999997, -75.79499999999999}}], 
              
              Line[{{-10.240000000000002`, -80.89999999999999}, {
               4.959999999999997, -74.49999999999999}}], 
              
              Line[{{-10.196000000000002`, -79.605}, {
               5.003999999999998, -73.205}}], 
              
              Line[{{-10.152000000000001`, -78.31}, {
               5.047999999999997, -71.91}}], 
              
              Line[{{-10.108000000000002`, -77.015}, {
               5.091999999999997, -70.615}}], 
              
              Line[{{-10.064000000000002`, -75.72}, {
               5.1359999999999975`, -69.32}}], 
              
              Line[{{-10.020000000000001`, -74.425}, {
               5.179999999999998, -68.02499999999999}}], 
              
              Line[{{-9.976000000000003, -73.13}, {
               5.2239999999999975`, -66.72999999999999}}], 
              
              Line[{{-9.932000000000002, -71.835}, {
               5.267999999999997, -65.43499999999999}}], 
              
              Line[{{-9.888000000000002, -70.54}, {
               5.311999999999998, -64.14}}], 
              
              Line[{{-9.844000000000001, -69.245}, {
               5.355999999999998, -62.845}}], 
              Line[{{-9.8, -67.95}, {5.399999999999998, -61.55}}], 
              
              Line[{{-9.756000000000002, -66.655}, {
               5.443999999999997, -60.254999999999995`}}], 
              
              Line[{{-9.712000000000002, -65.36}, {
               5.487999999999998, -58.959999999999994`}}], 
              
              Line[{{-9.668000000000001, -64.065}, {
               5.531999999999998, -57.66499999999999}}], 
              
              Line[{{-9.624000000000002, -62.769999999999996`}, {
               5.575999999999998, -56.36999999999999}}], 
              
              Line[{{-9.580000000000002, -61.475}, {
               5.619999999999997, -55.074999999999996`}}], 
              
              Line[{{-9.536000000000001, -60.18}, {
               5.663999999999998, -53.779999999999994`}}], 
              
              Line[{{-9.492, -58.885}, {
               5.707999999999998, -52.48499999999999}}], 
              Line[{{-9.448, -57.59}, {5.751999999999998, -51.19}}], 
              
              Line[{{-9.404000000000002, -56.295}, {
               5.795999999999998, -49.894999999999996`}}], 
              
              Line[{{-9.360000000000001, -55.}, {
               5.839999999999998, -48.599999999999994`}}], 
              
              Line[{{-9.316, -53.705}, {
               5.883999999999999, -47.30499999999999}}], 
              
              Line[{{-9.272000000000002, -52.41}, {
               5.927999999999998, -46.00999999999999}}], 
              
              Line[{{-9.228000000000002, -51.115}, {
               5.971999999999998, -44.714999999999996`}}], 
              
              Line[{{-9.184000000000001, -49.82}, {
               6.015999999999998, -43.419999999999995`}}], 
              
              Line[{{-9.14, -48.525}, {
               6.059999999999999, -42.12499999999999}}], 
              
              Line[{{-9.096, -47.230000000000004`}, {
               6.103999999999998, -40.83}}], 
              
              Line[{{-9.052000000000001, -45.935}, {
               6.147999999999998, -39.535}}], 
              
              Line[{{-9.008000000000001, -44.64}, {
               6.191999999999998, -38.239999999999995`}}], 
              
              Line[{{-8.964, -43.345}, {
               6.235999999999999, -36.94499999999999}}], 
              
              Line[{{-8.920000000000002, -42.05}, {
               6.2799999999999985`, -35.64999999999999}}], 
              
              Line[{{-8.876000000000001, -40.755}, {
               6.323999999999998, -34.355}}], 
              
              Line[{{-8.832, -39.46}, {
               6.3679999999999986`, -33.059999999999995`}}], 
              
              Line[{{-8.788, -38.165}, {
               6.411999999999999, -31.764999999999997`}}], 
              Line[{{-8.744, -36.870000000000005`}, {
               6.455999999999999, -30.470000000000002`}}], 
              
              Line[{{-8.700000000000001, -35.575}, {
               6.499999999999998, -29.175}}], 
              Line[{{-8.656, -34.28}, {6.543999999999999, -27.88}}], 
              
              Line[{{-8.612, -32.985}, {
               6.587999999999999, -26.584999999999997`}}], 
              
              Line[{{-8.568000000000001, -31.689999999999998`}, {
               6.631999999999999, -25.29}}], 
              
              Line[{{-8.524000000000001, -30.395}, {
               6.675999999999998, -23.995}}], 
              
              Line[{{-8.48, -29.099999999999998`}, {
               6.719999999999999, -22.7}}], 
              
              Line[{{-8.436, -27.804999999999996`}, {
               6.763999999999999, -21.404999999999998`}}], 
              
              Line[{{-8.392, -26.509999999999998`}, {
               6.807999999999999, -20.11}}], 
              Line[{{-8.348, -25.215}, {6.8519999999999985`, -18.815}}], 
              
              Line[{{-8.304, -23.919999999999998`}, {
               6.895999999999999, -17.52}}], 
              
              Line[{{-8.26, -22.624999999999996`}, {
               6.9399999999999995`, -16.224999999999998`}}], 
              
              Line[{{-8.216000000000001, -21.33}, {
               6.983999999999999, -14.93}}], 
              
              Line[{{-8.172, -20.035}, {
               7.027999999999999, -13.635000000000002`}}], 
              Line[{{-8.128, -18.74}, {7.071999999999999, -12.34}}], 
              Line[{{-8.084, -17.445}, {7.116, -11.044999999999998`}}], 
              Line[{{-8.04, -16.15}, {7.159999999999999, -9.75}}], 
              
              Line[{{-7.996, -14.855}, {
               7.203999999999999, -8.454999999999998}}], 
              
              Line[{{-7.952, -13.559999999999999`}, {
               7.247999999999999, -7.159999999999999}}], 
              
              Line[{{-7.9079999999999995`, -12.265}, {
               7.292, -5.864999999999999}}], 
              
              Line[{{-7.864, -10.969999999999999`}, {
               7.335999999999999, -4.569999999999999}}], 
              
              Line[{{-7.82, -9.675}, {
               7.379999999999999, -3.2749999999999995`}}], 
              Line[{{-7.776, -8.379999999999999}, {
               7.4239999999999995`, -1.9799999999999995`}}], 
              
              Line[{{-7.731999999999999, -7.085}, {
               7.468, -0.6849999999999996}}], 
              Line[{{-7.688, -5.79}, {7.512, 0.6100000000000003}}], 
              
              Line[{{-7.644, -4.495}, {7.555999999999999, 
               1.9050000000000002`}}], 
              Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
              
              Line[{{-7.555999999999999, -1.9050000000000002`}, {7.644, 
               4.495}}], 
              Line[{{-7.512, -0.6100000000000003}, {7.688, 5.79}}], 
              
              Line[{{-7.468, 0.6849999999999996}, {7.731999999999999, 
               7.085}}], 
              
              Line[{{-7.4239999999999995`, 1.9799999999999995`}, {7.776, 
               8.379999999999999}}], 
              
              Line[{{-7.379999999999999, 3.2749999999999995`}, {7.82, 
               9.675}}], 
              
              Line[{{-7.335999999999999, 4.569999999999999}, {7.864, 
               10.969999999999999`}}], 
              
              Line[{{-7.292, 5.864999999999999}, {7.9079999999999995`, 
               12.265}}], 
              
              Line[{{-7.247999999999999, 7.159999999999999}, {7.952, 
               13.559999999999999`}}], 
              
              Line[{{-7.203999999999999, 8.454999999999998}, {7.996, 
               14.855}}], 
              Line[{{-7.159999999999999, 9.75}, {8.04, 16.15}}], 
              Line[{{-7.116, 11.044999999999998`}, {8.084, 17.445}}], 
              Line[{{-7.071999999999999, 12.34}, {8.128, 18.74}}], 
              
              Line[{{-7.027999999999999, 13.635000000000002`}, {8.172, 
               20.035}}], 
              Line[{{-6.983999999999999, 14.93}, {8.216000000000001, 21.33}}], 
              
              Line[{{-6.9399999999999995`, 16.224999999999998`}, {8.26, 
               22.624999999999996`}}], 
              
              Line[{{-6.895999999999999, 17.52}, {8.304, 
               23.919999999999998`}}], 
              Line[{{-6.8519999999999985`, 18.815}, {8.348, 25.215}}], 
              
              Line[{{-6.807999999999999, 20.11}, {8.392, 
               26.509999999999998`}}], 
              Line[{{-6.763999999999999, 21.404999999999998`}, {8.436, 
               27.804999999999996`}}], 
              Line[{{-6.719999999999999, 22.7}, {8.48, 29.099999999999998`}}], 
              
              Line[{{-6.675999999999998, 23.995}, {8.524000000000001, 
               30.395}}], 
              
              Line[{{-6.631999999999999, 25.29}, {8.568000000000001, 
               31.689999999999998`}}], 
              
              Line[{{-6.587999999999999, 26.584999999999997`}, {8.612, 
               32.985}}], 
              Line[{{-6.543999999999999, 27.88}, {8.656, 34.28}}], 
              
              Line[{{-6.499999999999998, 29.175}, {8.700000000000001, 
               35.575}}], 
              
              Line[{{-6.455999999999999, 30.470000000000002`}, {8.744, 
               36.870000000000005`}}], 
              
              Line[{{-6.411999999999999, 31.764999999999997`}, {8.788, 
               38.165}}], 
              
              Line[{{-6.3679999999999986`, 33.059999999999995`}, {8.832, 
               39.46}}], 
              
              Line[{{-6.323999999999998, 34.355}, {8.876000000000001, 
               40.755}}], 
              
              Line[{{-6.2799999999999985`, 35.64999999999999}, {
               8.920000000000002, 42.05}}], 
              
              Line[{{-6.235999999999999, 36.94499999999999}, {8.964, 
               43.345}}], 
              
              Line[{{-6.191999999999998, 38.239999999999995`}, {
               9.008000000000001, 44.64}}], 
              
              Line[{{-6.147999999999998, 39.535}, {9.052000000000001, 
               45.935}}], 
              
              Line[{{-6.103999999999998, 40.83}, {9.096, 
               47.230000000000004`}}], 
              Line[{{-6.059999999999999, 42.12499999999999}, {9.14, 48.525}}], 
              
              Line[{{-6.015999999999998, 43.419999999999995`}, {
               9.184000000000001, 49.82}}], 
              
              Line[{{-5.971999999999998, 44.714999999999996`}, {
               9.228000000000002, 51.115}}], 
              
              Line[{{-5.927999999999998, 46.00999999999999}, {
               9.272000000000002, 52.41}}], 
              
              Line[{{-5.883999999999999, 47.30499999999999}, {9.316, 
               53.705}}], 
              
              Line[{{-5.839999999999998, 48.599999999999994`}, {
               9.360000000000001, 55.}}], 
              
              Line[{{-5.795999999999998, 49.894999999999996`}, {
               9.404000000000002, 56.295}}], 
              Line[{{-5.751999999999998, 51.19}, {9.448, 57.59}}], 
              
              Line[{{-5.707999999999998, 52.48499999999999}, {9.492, 
               58.885}}], 
              
              Line[{{-5.663999999999998, 53.779999999999994`}, {
               9.536000000000001, 60.18}}], 
              
              Line[{{-5.619999999999997, 55.074999999999996`}, {
               9.580000000000002, 61.475}}], 
              
              Line[{{-5.575999999999998, 56.36999999999999}, {
               9.624000000000002, 62.769999999999996`}}], 
              
              Line[{{-5.531999999999998, 57.66499999999999}, {
               9.668000000000001, 64.065}}], 
              
              Line[{{-5.487999999999998, 58.959999999999994`}, {
               9.712000000000002, 65.36}}], 
              
              Line[{{-5.443999999999997, 60.254999999999995`}, {
               9.756000000000002, 66.655}}], 
              Line[{{-5.399999999999998, 61.55}, {9.8, 67.95}}], 
              
              Line[{{-5.355999999999998, 62.845}, {9.844000000000001, 
               69.245}}], 
              Line[{{-5.311999999999998, 64.14}, {9.888000000000002, 70.54}}], 
              
              Line[{{-5.267999999999997, 65.43499999999999}, {
               9.932000000000002, 71.835}}], 
              
              Line[{{-5.2239999999999975`, 66.72999999999999}, {
               9.976000000000003, 73.13}}], 
              
              Line[{{-5.179999999999998, 68.02499999999999}, {
               10.020000000000001`, 74.425}}], 
              
              Line[{{-5.1359999999999975`, 69.32}, {10.064000000000002`, 
               75.72}}], 
              
              Line[{{-5.091999999999997, 70.615}, {10.108000000000002`, 
               77.015}}], 
              
              Line[{{-5.047999999999997, 71.91}, {10.152000000000001`, 
               78.31}}], 
              
              Line[{{-5.003999999999998, 73.205}, {10.196000000000002`, 
               79.605}}], 
              
              Line[{{-4.959999999999997, 74.49999999999999}, {
               10.240000000000002`, 80.89999999999999}}], 
              
              Line[{{-4.915999999999997, 75.79499999999999}, {
               10.284000000000002`, 82.195}}], 
              
              Line[{{-4.871999999999997, 77.08999999999999}, {
               10.328000000000003`, 83.49}}], 
              
              Line[{{-4.827999999999998, 78.38499999999999}, {
               10.372000000000002`, 84.785}}], 
              
              Line[{{-4.783999999999997, 79.67999999999999}, {
               10.416000000000002`, 86.08}}], 
              
              Line[{{-4.739999999999997, 80.975}, {10.460000000000003`, 
               87.375}}], 
              
              Line[{{-4.695999999999997, 82.27}, {10.504000000000001`, 
               88.67}}], 
              
              Line[{{-4.6519999999999975`, 83.565}, {10.548000000000002`, 
               89.965}}], 
              
              Line[{{-4.607999999999997, 84.86}, {10.592000000000002`, 
               91.26}}], 
              
              Line[{{-4.5639999999999965`, 86.15499999999999}, {
               10.636000000000003`, 
               92.55499999999999}}]}}}, $CellContext`oneTermOfdynamicsMatrix[{
            Pattern[$CellContext`k, 
             Blank[Integer]], 
            Pattern[$CellContext`j, 
             Blank[Integer]], 
            Pattern[$CellContext`mVec, 
             Blank[List]], 
            Pattern[$CellContext`kS, 
             Blank[]], 
            Blank[], 
            Blank[], 
            Blank[], 
            Pattern[$CellContext`proj, 
             Blank[List]]}, 
           Pattern[$CellContext`r, 
            Blank[List]], 
           Pattern[$CellContext`mk, 
            Blank[]], 
           Pattern[$CellContext`epsilon, 
            Blank[List]], 
           Pattern[$CellContext`mA, 
            Blank[List]]] := $CellContext`kS 
          Dot[$CellContext`proj, 
            Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
            Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
                 Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
             Sqrt[$CellContext`mk 
              Part[$CellContext`mA, $CellContext`j]])], \
$CellContext`calcDynamics := Map[{
            Sqrt[
             Part[#, 1]], 
            Part[#, 2]}& , 
           Transpose[
            Eigensystem[
             FE`matrix$$133[FE`qLoc$$133]]]], FE`matrix$$133 = 
         ReplaceAll[$CellContext`res$7123, $CellContext`qVec -> #]& , 
         Attributes[$CellContext`res$7123] = {
          Temporary}, $CellContext`res$7123 = {{
           0.2497285177332565 + 
            0.25 (0. + 
              0.4756242568370987 (1/10 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.8494117647058823 (1/10 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.9283667621776504 (1/10 - 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/
                10)) + 0.25 (0. + 
              0.005882352941176467 (1/10 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.005882352941176467 (1/10 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.9283667621776504 (1/10 - 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/
                10)) + 0.25 (0. + 
              0.8494117647058823 (1/10 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.4756242568370988 (1/10 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/10)), 
            0.0571724585526794 + 
            0.25 (0. + 
              0.49940546967895366` (1/10 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.35764705882352943` (1/10 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/10)) + 
            0.25 (0. - 
              0.25787965616045844` (1/10 - 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.0764705882352941 (1/10 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.0764705882352941 (1/10 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/10)) + 
            0.25 (0. - 
              0.25787965616045844` (1/10 - 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.35764705882352943` (1/10 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.49940546967895366` (1/10 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/10)), 0. + 
            0.25 (0. - 0.05792399126899306 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.08039350950672997 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.06866879035147332 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.029393876913398138` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.04082482904638631 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.003842336851424594 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.08164965809277261 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.043844747907351864` 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.020389759235154098` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.037071354412155554` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.010049188688341247` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.029855995804988402` 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.03919183588453085 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.04082482904638631 E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.017290515831410672` E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.040712980199683876` 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.03534224934093376 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.040048525660123034` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.07039779901193503 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.04076262620957745 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.014142135623730942` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.017405705383053482` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.004159451654038517 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.0701310823963707 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.04961001157131082 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.029948051909077313` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.03504245995260766 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.004693186600795673 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.03493939389392353 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.028284271247461894` 
               E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.030459984420343585` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.016637806616154063` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.006375552945124607 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.03235435537259402 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.03493939389392353 
              E^(I Dot[{2., 2.1}, $CellContext`qVec]))}, {
           0.0571724585526794 + 
            0.25 (0. + 
              0.49940546967895366` (1/10 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.35764705882352943` (1/10 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/10)) + 
            0.25 (0. - 
              0.25787965616045844` (1/10 - 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.0764705882352941 (1/10 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.0764705882352941 (1/10 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/10)) + 
            0.25 (0. - 
              0.25787965616045844` (1/10 - 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.35764705882352943` (1/10 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.49940546967895366` (1/10 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/10)), 
            0.20027148226674352` + 
            0.25 (0. + 
              0.5243757431629014 (1/10 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.15058823529411766` (1/10 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.07163323782234958 (1/10 - 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/
                10)) + 
            0.25 (0. + 
              0.9941176470588234 (1/10 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.9941176470588234 (1/10 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.07163323782234958 (1/10 - 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/
                10)) + 0.25 (0. + 
              0.15058823529411766` (1/10 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/10)) + 
            0.25 (0. + 
              0.5243757431629013 (1/10 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/10)), 0. + 
            0.25 (0. - 0.037071354412155554` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.010049188688341247` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.029855995804988402` 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.03919183588453085 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.04082482904638631 E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.017290515831410672` E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.040712980199683876` 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.03534224934093376 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.02372566682377956 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.001256148586042656 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.012980867741299305` 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.05225578117937449 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.04082482904638631 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.07780732124134802 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.03780491018542075 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.06125989885761852 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.03504245995260766 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.004693186600795673 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.03493939389392353 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.028284271247461894` 
               E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.030459984420343585` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.016637806616154063` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.006375552945124607 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.03235435537259402 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.03493939389392353 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.030662152458531704` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.00031287910671971185` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.029948051909077313` 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.05656854249492381 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.05330497273560128 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.06655122646461623 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.0005795957222840552 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.021100666547343924` 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.04076262620957745 
              E^(I Dot[{2., 2.1}, $CellContext`qVec]))}, {
           0. + 0.25 (0. - 0.02038975923515409 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.043844747907351864` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.08164965809277261 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.003842336851424594 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.04082482904638631 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.029393876913398138` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.06866879035147332 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.08039350950672997 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.057923991268993065` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.03534224934093376 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.040712980199683876` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.017290515831410672` 
               E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.04082482904638631 E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.03919183588453085 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.029855995804988402` 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.010049188688341247` 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.037071354412155554` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0.18222267958263078` + 
            0.25 (0. + 
              0.4756242568370987 (1/15 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.8494117647058823 (1/15 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.9283667621776504 (1/15 - 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/
                15)) + 0.25 (0. + 
              0.005882352941176467 (1/15 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.005882352941176467 (1/15 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.9283667621776504 (1/15 - 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/
                15)) + 0.25 (0. + 
              0.8494117647058823 (1/15 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.4756242568370988 (1/15 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/15)), 
            0.03654683848153319 + 
            0.25 (0. + 
              0.49940546967895366` (1/15 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.35764705882352943` (1/15 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/15)) + 
            0.25 (0. - 
              0.25787965616045844` (1/15 - 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.0764705882352941 (1/15 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.0764705882352941 (1/15 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/15)) + 
            0.25 (0. - 
              0.25787965616045844` (1/15 - 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.35764705882352943` (1/15 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.49940546967895366` (1/15 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/15)), 0. + 
            0.25 (0. - 0.014493647836503056` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.042452225675707785` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.03597336292643053 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.019973198501695162` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.05501808447571729 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.017764623667373098` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.05703094122482891 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.051203915276546004` 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.03544172090426828 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.0250344826266871 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.025471335405424674` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.02797928227611264 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.027463147939830845` 
               E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.012226240994603836` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.026646935501059652` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.006336771247203213 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.01828711259876643 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.028108951062005873` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec]))}, {
           0. + 0.25 (0. - 0.03534224934093376 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.040712980199683876` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.017290515831410672` 
               E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.04082482904638631 E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.03919183588453085 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.029855995804988402` 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.010049188688341247` 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.037071354412155554` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.06125989885761852 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.03780491018542075 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.07780732124134802 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.04082482904638631 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.05225578117937449 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.012980867741299305` 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.001256148586042656 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.023725666823779558` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0.03654683848153319 + 
            0.25 (0. + 
              0.49940546967895366` (1/15 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.35764705882352943` (1/15 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/15)) + 
            0.25 (0. - 
              0.25787965616045844` (1/15 - 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.0764705882352941 (1/15 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.0764705882352941 (1/15 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/15)) + 
            0.25 (0. - 
              0.25787965616045844` (1/15 - 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.35764705882352943` (1/15 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.49940546967895366` (1/15 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/15)), 
            0.11777732041736921` + 
            0.25 (0. + 
              0.5243757431629014 (1/15 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.15058823529411766` (1/15 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.07163323782234958 (1/15 - 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/
                15)) + 0.25 (0. + 
              0.9941176470588234 (1/15 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.9941176470588234 (1/15 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.07163323782234958 (1/15 - 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/
                15)) + 0.25 (0. + 
              0.15058823529411766` (1/15 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.5243757431629013 (1/15 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/15)), 0. + 
            0.25 (0. - 0.0250344826266871 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.025471335405424674` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.02797928227611264 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.027463147939830845` 
               E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.012226240994603836` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.026646935501059652` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.006336771247203213 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.01828711259876643 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.028108951062005873` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.04324137908245953 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.015282801243254809` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.021761663992532057` 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.03776182841726742 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.0027169424432452968` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.039970403251589494` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.0007040856941336905 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.0065311116424165835` 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.022293306014694314` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec]))}, {
           0. + 0.25 (0. - 0.029948051909077306` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.04961001157131083 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.0701310823963707 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.004159451654038514 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.017405705383053482` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.014142135623730949` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.040762626209577435` 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.07039779901193503 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.04004852566012304 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.03493939389392352 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.03235435537259402 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.006375552945124607 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.016637806616154056` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.030459984420343585` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.028284271247461898` E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.03493939389392352 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.004693186600795673 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.035042459952607664` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.03544172090426828 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.051203915276546 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.05703094122482889 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.017764623667373105` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.05501808447571729 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.019973198501695166` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.03597336292643052 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.04245222567570778 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.014493647836503053` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.028108951062005873` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.01828711259876643 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.0063367712472032125` 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.026646935501059656` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.012226240994603836` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.027463147939830852` E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.027979282276112644` 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.025471335405424674` 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.0250344826266871 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0.13081072754147838` + 
            0.25 (0. + 
              0.4756242568370987 (1/20 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.8494117647058823 (1/20 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.9283667621776504 (1/20 - 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/
                20)) + 0.25 (0. + 
              0.00588235294117648 (1/20 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.005882352941176479 (1/20 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.9283667621776505 (1/20 - 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/
                20)) + 0.25 (0. + 
              0.8494117647058822 (1/20 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.4756242568370986 (1/20 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/20)), 
            0.033217246264685175` + 
            0.25 (0. + 
              0.49940546967895366` (1/20 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.35764705882352943` (1/20 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. - 
              0.25787965616045844` (1/20 - 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.07647058823529418 (1/20 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.07647058823529418 (1/20 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. - 
              0.25787965616045855` (1/20 - 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.3576470588235295 (1/20 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.49940546967895355` (1/20 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/20))}, {
           0. + 0.25 (0. - 0.03493939389392352 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.03235435537259402 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.006375552945124607 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.016637806616154056` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.030459984420343585` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.028284271247461898` E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.03493939389392352 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.004693186600795673 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.035042459952607664` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.040762626209577435` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.021100666547343924` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.0005795957222840552 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.06655122646461623 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.05330497273560128 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.056568542494923796` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.029948051909077313` 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.00031287910671971185` 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.030662152458531704` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.028108951062005873` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.01828711259876643 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.0063367712472032125` 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.026646935501059656` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.012226240994603836` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.027463147939830852` E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.027979282276112644` 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.025471335405424674` 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.0250344826266871 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.022293306014694307` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.006531111642416583 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.0007040856941336902 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.03997040325158949 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.0027169424432452968` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.03776182841726742 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.021761663992532064` 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.015282801243254809` 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.04324137908245953 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0.033217246264685175` + 
            0.25 (0. + 
              0.49940546967895366` (1/20 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.35764705882352943` (1/20 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. - 
              0.25787965616045844` (1/20 - 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.07647058823529418 (1/20 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.07647058823529418 (1/20 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. - 
              0.25787965616045855` (1/20 - 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.3576470588235295 (1/20 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.49940546967895355` (1/20 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/20)), 
            0.09418927245852161 + 
            0.25 (0. + 
              0.5243757431629014 (1/20 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.15058823529411766` (1/20 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.07163323782234958 (1/20 - 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/
                20)) + 0.25 (0. + 
              0.9941176470588234 (1/20 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.9941176470588236 (1/20 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.07163323782234961 (1/20 - 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/
                20)) + 0.25 (0. + 
              0.15058823529411772` (1/20 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.5243757431629014 (1/20 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/20))}}, 
         FE`qLoc$$133 = {2.670415689484845, 
          1.678435706608198}, $CellContext`showDynamics := 
         Module[{$CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`e$, \
$CellContext`omega$, $CellContext`points$, $CellContext`lines$, \
$CellContext`nu$, $CellContext`a$, $CellContext`b$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, {{$CellContext`a$, \
$CellContext`b$}, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
            ReplaceAll[{
              "latticeBasis", "pointsDataTable", 
               "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
               "numberOfMasses"}, 
              FE`parameterLocatorDependencies$$133]; {$CellContext`omega$, \
$CellContext`e$} = 
            Part[FE`dynamics$$133, FE`omegaIndex$$133]; $CellContext`e$ = 
            Partition[$CellContext`e$, 2]; $CellContext`points$ = 
            Table[Part[$CellContext`pointsDataTable$, $CellContext`k] + 
              Table[FE`scale$$133 
                Re[Part[$CellContext`e$, $CellContext`k] 
                  E^(I (Dot[
                    FE`qLoc$$133, $CellContext`a$ $CellContext`i + \
$CellContext`b$ $CellContext`j] - $CellContext`omega$ #))], {$CellContext`i, -
                 Part[$CellContext`numberLatticeLinesToDisplay$, 1], 
                 
                 Part[$CellContext`numberLatticeLinesToDisplay$, 
                  1]}, {$CellContext`j, -
                 Part[$CellContext`numberLatticeLinesToDisplay$, 2], 
                 
                 Part[$CellContext`numberLatticeLinesToDisplay$, 
                  2]}]& , {$CellContext`k, $CellContext`numberOfMasses$}]; \
$CellContext`nu$ = 
            2 Pi If[$CellContext`omega$ == 0, 1, 1/$CellContext`omega$]; Show[{
              Table[
               ListPlot[
                
                Part[$CellContext`points$, $CellContext`k][$CellContext`nu$ \
#], PlotRange -> {{-FE`windowHalfWidth$$133/2, FE`windowHalfWidth$$133}, {-
                   FE`windowHalfWidth$$133/2, FE`windowHalfWidth$$133}}, 
                ImageSize -> FE`primaryDisplaySize$$133, PlotStyle -> 
                Directive[
                  PointSize[
                   Sqrt[
                   Part[$CellContext`mScalarArray$, $CellContext`k] 
                    FE`mMax$$133^(-1)/350]], 
                  $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$}], 
              Graphics[{$CellContext`lines$}]}]& ], 
         Attributes[$CellContext`pointsDataTable$] = {Temporary}, 
         Attributes[$CellContext`e$] = {Temporary}, 
         Attributes[$CellContext`omega$] = {Temporary}, 
         Attributes[$CellContext`points$] = {Temporary}, 
         Attributes[$CellContext`lines$] = {Temporary}, 
         Attributes[$CellContext`nu$] = {Temporary}, 
         Attributes[$CellContext`a$] = {Temporary}, 
         Attributes[$CellContext`b$] = {Temporary}, 
         FE`dynamics$$133 = {{
           0.6790602328891914 + 9.230900003615161*^-19 I, {
            0.7248589832535917 + 0. I, 0.650064949116095 - 
             0.020858686170711016` I, 0.11988513411713456` - 
             0.0981715969681187 I, 0.15160623794564831` - 
             0.028647866526790612` I, -0.002472802788942547 - 
             0.01713913715451654 I, 0.05556524411678816 + 
             0.01890267003822048 I}}, {
           0.5524636587025472 - 7.594543271602355*^-18 
            I, {-0.38354558530686395` + 0.09744499810272776 I, 
             0.1619813466218059 - 0.23832737428749207` I, 0.6766558452199941 + 
             0. I, 0.5279467930943094 + 
             0.011722985858567875` I, -0.0019794387381373065` + 
             0.0612963317654061 I, 0.14074635807044672` + 
             0.0077645969691057665` I}}, {
           0.5222542056555272 + 
            7.39373223091693*^-18 I, {-0.5047764091042254 + 
             0.08027140607893792 I, 0.6076266586520926 + 
             0. I, -0.41722429897453955` - 0.26584428115246467` 
             I, -0.11870218623554862` + 0.011771602360776734` I, 
             0.10106066627579662` + 0.15510216234064736` I, 
             0.24672133224192438` + 0.12420825231706026` I}}, {
           0.47798270089481093` + 1.705186367657685*^-17 I, {
            0.11776747404882068` - 0.17021352942962187` 
             I, -0.19349636076477256` + 
             0.18545691772731276` I, -0.005098087736675982 + 
             0.0481703582836023 I, 0.12443545522518613` - 0.04846883240430583 
             I, 0.7520021001235273 + 0. I, 0.5450959458974042 + 
             0.050065292585647264` I}}, {
           0.4208599945029234 + 1.7181192359807767`*^-17 I, {
            0.046412084869462106` - 0.0633132278362492 
             I, -0.15001494768060744` + 
             0.1368626263531111 I, -0.49457449633790096` - 
             0.020339968952328036` I, 0.7465187765334863 + 
             0. I, -0.3425167147633056 - 0.05320301419822421 I, 
             0.17190685158210708` - 0.02435844462026826 I}}, {
           0.3371723422003491 + 1.2680207595331082`*^-17 I, {
            0.08250671501222374 + 
             0.03036710231625256 I, -0.10759757386702096` - 
             0.00917692568070801 I, 0.15992951319705684` + 
             0.020880420200147097` I, -0.32856173648033754` + 
             0.004931060374980048 I, -0.5245849484304596 + 
             0.028709761501831688` I, 0.7553839007471159 + 0. I}}}, 
         FE`omegaIndex$$133 = 1, FE`scale$$133 = 0.2, FE`windowHalfWidth$$133 = 
         3, FE`primaryDisplaySize$$133 = {380, 380}, FE`mMax$$133 = 
         30, $CellContext`massColors := Part[
           Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
           1]& , $CellContext`frequencyPlotCalc := 
         Module[{$CellContext`eigTable2D$, $CellContext`eigTable1D$, \
$CellContext`qMax$, $CellContext`omegaPointList2D$, \
$CellContext`omegaPointList1D$, $CellContext`range$, \
$CellContext`numberOfMasses$}, {$CellContext`qMax$, \
$CellContext`numberOfMasses$} = 
            ReplaceAll[{"qMaxVec", "numberOfMasses"}, 
              FE`parameterLocatorDependencies$$133]; $CellContext`eigTable2D$ = 
            Flatten[
              Re[
               Table[{{$CellContext`qx, $CellContext`qy}, 
                 Eigenvalues[
                  N[
                   
                   FE`matrix$$133[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax$, 1]/2, Part[$CellContext`qMax$, 1]/
                 2, Part[$CellContext`qMax$, 1]/
                 FE`meshSize$$133}, {$CellContext`qy, -
                 Part[$CellContext`qMax$, 2]/2, Part[$CellContext`qMax$, 2]/2,
                  Part[$CellContext`qMax$, 2]/FE`meshSize$$133}]], 
              1]; $CellContext`omegaPointList2D$[
              Pattern[$CellContext`nn$, 
               Blank[]]] := Map[Flatten[{
                Part[#, 1], 
                Part[
                 Sqrt[
                  
                  Part[#, 
                   2]], $CellContext`nn$]}]& , $CellContext`eigTable2D$]; \
$CellContext`range$ = Range[2 $CellContext`numberOfMasses$]; ListPlot3D[
             Map[$CellContext`omegaPointList2D$[#]& , $CellContext`range$], 
             PlotRange -> Full, ImageSize -> FE`primaryDisplaySize$$133, 
             AxesLabel -> {
              "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
               "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
         Attributes[$CellContext`eigTable2D$] = {Temporary}, 
         Attributes[$CellContext`eigTable1D$] = {Temporary}, 
         Attributes[$CellContext`qMax$] = {Temporary}, 
         Attributes[$CellContext`omegaPointList2D$] = {Temporary}, 
         Attributes[$CellContext`omegaPointList1D$] = {Temporary}, 
         Attributes[$CellContext`range$] = {Temporary}, FE`meshSize$$133 = 8, 
         Attributes[$CellContext`nn$] = {
          Temporary}, $CellContext`showFreqPlot := 
         Module[{$CellContext`aa$, $CellContext`bb$}, {$CellContext`aa$, \
$CellContext`bb$} = FE`qPlaneLoc$$133; Show[{FE`freqPlot$$133, 
              Graphics3D[
               Polygon[{{
                  Part[$CellContext`aa$, 1], 
                  Part[$CellContext`aa$, 2], 0}, {
                  Part[$CellContext`bb$, 1], 
                  Part[$CellContext`bb$, 2], 0}, {
                  Part[$CellContext`bb$, 1], 
                  Part[$CellContext`bb$, 2], 23}, {
                  Part[$CellContext`aa$, 1], 
                  Part[$CellContext`aa$, 2], 23}}]]}]], 
         Attributes[$CellContext`aa$] = {Temporary}, 
         Attributes[$CellContext`bb$] = {Temporary}, 
         FE`qPlaneLoc$$133 = {{-2.670415689484845, -1.678435706608198}, {
          2.670415689484845, 1.678435706608198}}, FE`freqPlot$$133 = 
         Graphics3D[
           GraphicsComplex[CompressedData["
1:eJyEvXd01MX7/h1QkBKk9yJdqdIhENjQQpVOqEqo0hNakCZFBKkB6VU6SJMq
iIEldAk1nZDN7oYkSO8lJODj8+G+Ztnr/np++Ydz5syZnX7N9eI9c5fqF9Bp
YEYPDw/P3B4eH/37b6fiG3//a0+mk+1W3nydPizN6nXip1nxx5ItSK9/YMux
t4ueW6OzNghquiLJ4p7/nvUrr7E7dj24ZdI7/C/9pvXO+klPy59zpXvI36Ij
iQc3P1X5LYM3rK48cY6r/Lbvy7fU8m/48uQeVR9L9wv5h1uGp1B90iwXW4eV
3ZQ7xfIu6nXLbk08TLuKTvhkzrunSSYd7UoLqlJ7+KIkyn/PeueddcqkcFc6
2hX2POfyBqHJJh3tCj/VaszwMrc5v+VN4YYhG5+70tGu+U831mn7w22uj2WZ
X+96g+qq+ltKfOwYWfQL9MMLK9p1zpr/5d93kkw62nVlUt/T9X7i/Pescw92
7vvVlRSTjnY9GO1fZuvV2yYd7fJt+Hr41i23Ob+lzy8ta1Qd7ioH7aq/PuHA
5CrJXB/LqF3VrvRbnsT1t+R7fWB9u1+SLB3+l55s2nXw+5iwpr8km3S0a3Ol
jMPutU+h/Pes9mEe1U9VcKWjXVd6D/QamctVDtrV8NTugTUqJnF+y5Kx61f8
duWWSUe7fp4z/vX487e4Ppb0XXe9TpRQ9bf41ew2ZV2eZAt+D+0689upCWGf
pJh0tGvj8lc199Xg/Pesi1uPP5+pfJJJR7vmZ2/fsfSBWyYdf4+qrHiZa+kt
zm/h/GhXMJWPdv3f9UmzoP7SXgvahfYiHe2i/rGYdrn3pwXtov43v0/jhfwW
Gl8L2mVznw+oj4XmD+pvwXzr8n5+mnbllfmJdLRrtMxn9/z3rJj/SEe7/GW9
IB3t+krWF+W3PJL1iHS0a6GsX6qPJUzWO9Xfclb2B9lPfNAu7CdIR7to//FB
u4Ld9ysftIv2N5//2A+R30L7pw/a9bf7fov6WGh/Rv0t2M9l/zftwv6PdLSL
9MK0q667vph2kR6ZdpF+mXaR3pl2dXTXR9Mu0lPTLtZftOtO/zbNLuxxKl1u
8Lzk5A55nUqXO5XY8v2XxxxKlwO+LVY+eJ9D6XL273zPZAxX+S1Ncm4/693I
qXR5VrMF3xy7pepjyVOz8N0fSiQqXX5kb7R55zOn0mWfCjMD9n/rVLpcfM7S
avMncP571vN1ju//fZ9T6fI8/zd9h+dOVLq84kDWlj/0T1S6fOHql0O8pyQq
Xe5RfcfTb/olKl2uP3nID4eyJypdrnxjUNcxc51Kl6OfeqZe7eZUupyzx6Iz
3ayc/541JMfZHTXqJipdfvyy8/XsoxOVLnsdTdyUf5zKb4lpPOj+8UaJSpcP
vkyMWBin6mOZWanWtD91/S2dR+Vvnn+YU+ly7qgpa2NOOJUup+3YXn7dp4lK
l2tnu7pg8gfpaFeFtC3PHUudSpfHhOadUvuVQ+nyuPbBXeb87lC6XKLb37uH
7XQoXc5XpH3ewlcdSpcfxnRMi/7GqXS5XKfOaQ/vOJUuJ79YE9VhKee/Z/1x
UqUS5+MdSpd71m/XJXWOQ+nysVcjTtYer/JbOD/axeWjXf93fdIsqD/rMtrL
ukz9Y/SrlHt/Gv2i/je/T+Nl9IvG1+iXl/t8MPpF88foF+Yb63J7mZ+syz/I
fGZdPiTzn3U5VtYL67K3rC/WZaxH1mWrrF/W5Vyy3lmXsT+wLmM/YV2m/cfo
V1f3/croF+1vRr9oPzT6Rfun0a9z7vut0S/an41+YT9nXcb+z7pMemHaNdVd
X0y7SI9Mu0i/TLtI70y7Orvro2kX6alpF+sv2jVu629j2v3uULp8c2qZKjPr
OZQu55ywI329j13pctjsngVTBicoXd4wedpV+3Ob0uVJOXte/ypTgtLlAdl/
ST56L0Hp8vz2/vdX9LQrXa4UFDh6QQW70uV+JXcGFP5M6/KpoJIRDVY4lC5X
yVLkQrrFoXQ5cMzd73/+zKF0+VL5VSVXV1T5LY3rx7waV8+hdDn2lxzVP/J2
KF2OcmSePM6L65NmKV7yYNt93g6ly87snkfmVnIoXe6/bPj0wOqc/561Y8US
pybXdihdrtKnR5NDdR1Kl3s1mFshqarKb/EalGNlSjGH0uVfFiTWTy6h6mPZ
2dYeFthT1d9ysJDnwy/+UrpmLeYd9vmBsASly7su5Hyd3tqudLnUxbVpq2rZ
lS6PHNd292z/BKXLW3ds8qgaYVO67P+23sx6nyQoXc6SHDT1+kZVH8vPnrUb
D1/H9UmzJP50vGBMX4fS5cRPv51Qa7ld6XLnDZPXB2S0K12um3fXoi+f2ZQu
H6nn531gvE3p8s47GfK/6aLyWzg/2lWTyke7/u/6/NsuqT/rMtrLukz9Y/TL
070/Xb7Svf/N79N4Gf2i8TX6VdZ9Phj9ovlj9AvzjXX5kMxP1uUdMp9ZlzH/
WZcbyHphXe4t64t1ubKsR9blzrJ+WZcHyHpnXU6U/YF1GfsJ6zLtP0a/brjv
V0a/aH8z+kX7odEv2j+NflV232+NftH+bPQL+znrMvZ/1mXSC9Ouge76YtpF
emTaRfrl4gDuemfalctdH027SE9Nu1h/0a6YbwuHNluhdNDa/OsBp777Il7p
crOILYMr94hVurwy8P7QrLVilC7f779pQY+uMUqXVyUUK/B9rZtKl6dVXRBU
t5RN6XL38tOnBK6wKV3OMmXI3TuPbEqXX3008nLemTaly1WC8u664x+vdLlZ
sz+uTPo2Xuny7WI7h766F690udeVuiG+/jaly/6D8lzOusumdPntX2uKd45X
9bHMLnt0TPVLqv6WEpfLdC/e2aZ0uckdS7235WxKl/9ZPzCX5xrO/+95I+O4
b1sn25Quh1qnvxwQZlO6fKv7xfCbs1V+i8dvO4tc+cKmdNmzWe7hH62IV7rc
vXRY6tMG8UqXk9/l9m+/Ml7p8u9tEgPX59e6nFjc81CDczaly6O2nbANGah0
1tqp7atLvmvjlS6neDW60+N6rNLl4xvrjt3yOFrp8vcTh6Rk6xCjdLlGVOuy
pbvcULq87ceIVi9m25QuD3pccPeda0oHrf1LPz33Nile6XITa7/JK8NjlS6/
SFkyr681WulypyYLLWMPRStd5vxoF5ePdv3f9UmzoP6sy2gv6zL1j9Gvae79
afSL+t/8Po2X0S8aX6Nfo93ng9Evmj9GvzDfWJf/lvnJuuwn85l1OYfMf9bl
j2W9sC5jfbEuW2U9si7XlPXLuvzRL+/XO+tyC9kfFMeW/YR1mfYfo1+v3fcr
o1+0vxn9ov3Q6Bftn0a/mrjvt0a/aH82+oX9nHUZ+7/i2O56Ydo13V1fTLtI
j0y7SL9Mu0jvTLtIH027SE9Nu1h/0a42I8qd+uZRnNLlnOPL1Q7teUPpcq5x
D2fkOxqldHlOnotxxbdFKl3O8+1nnjOTVH6L37N89pq3o5UuW8ZveunTNEbp
8pzo3MsTlscoXb6w7mTPwlExSpd7d3gSs8rvptLl1S2z7Og2NVbp8usW348v
tjxa6fLv284PP70tWulytZobFwdkj1G63OZVv5xjf4pRurwsNP+nCTlilS5f
yfjNliYbuD5plm+79XvQue8Npcsbxi4OiLp5Q+lygWwJS+Zk4/z3rL1vXvmi
zMBYpcshHTd3+DgmRuly0XHb555sF6N0eeaiAsVGhkcrXe63+N3eKROilS5v
PuxzeEJktNLleTVOVTj5WOmatfixjamlY5UOWms+bvXsxW8xSpcDotpWvTks
Runy5dCm/dcUilG63C/4p1fT90crXbZGX8taY0Ck0uW+/WvPXBUcqXR5kb9v
7oIzuT5plk0LM8968uKG0uX1w4r/vKB3jNLloz9cXLv8TrTS5Z6VrVHFTiid
tY7b/rxueolLSn853fy/CZWD+v/fv5tmQT1Zf9Eu1l/qB6NT1G9Gp6ifze/T
uBidonE0OjXSfdyNTtE8MTqFecX6O1fmIevvJpm3rL/9ZZ6z/k6XdcH6W0TW
Eevvn7LuWH+xTll/C8m6Zv3dKPsA6y/2DdZf2meMTtG+ZHSK9jGjU7TvGZ2i
fdLo1Cv3fdXoFO3DRqewb7P+Yp9n/SVdMO1q7K4jpl2kO6ZdpFOmXaRrpl25
3XXQtIt007SLdRbtKh945KsGS6OU/mYodfTPYYOilP4e6Vl1V4o1Qumvn6Pm
wu1xfyn9XXiq1p4abS8o/c10NueNJpcuKv0dn5rpp2vRl5X+7gm8VWpQ0jWl
v+XqPL847ni40t+AO4HefuOilP6W6N4qtV3dKKW/p7KUOLq3WqTS39EHik8+
vzdC6e/5WtvG9f8tQulvmEdcgV4hEUp/E17Wz3I5OULp7+wVl9u0qBOp9LfZ
1+8qVdkRqfT3n/HVe/1+O1Lp74JFlzt2Gc7571kTrvWe4PVPhNLfgccG5F3w
e4TS36e+zXN+skTlt/i0Hn7W54cIpb/f7xy+qfayCKW/3f5ISNiq62/J/vHP
Q/f0iVL6G9qv8qKFiyOU/vodrVX2Scp1pb9LEhbtqLThqtLfI68Wl9q8K0zp
79MFw2o1fHZB6W+GHW22ll1wTulvu/JTa+37+YrS37wR13vcfhSp9DdzLo8z
vt9HKf0tsn1W/7BskUp/T/zp+yzk52tKf4My/9Ure93zSn+PFY5t2eLQEaW/
nI76B1I5qP///btpFtST9RftYv2lfjA61dW934xOUT+b36dxMTpF42h0Kth9
3I1O0TwxOoV5xfqbWeYh628Xmbesv9NlnrP+NpF1wfqLdcT621vWHeuvXdYp
6+9iWdesvxm+e78PsP5i31D+132fMTqV6L4vGZ2ifczoFO17RqdonzQ6ddx9
XzU6Rfuw0Sns26y/2OdZf0kXTLuC3HXEtIt0x7SLdMq0i3TNtCvEXQdNu0g3
TbugsztSL03N9TrjyWblTvaY8u6V9bvGG/8peTbJpFezzCn6fZknVv+ZbyfY
D7nS0d7BPoeiYpYkWdL+12+PzXzw/uWl//Jm+O5Rf++HctA/RYsVWZLX35Xe
4H/lJ1nvXCler2NbVzr6Le6v5s32n+b0MGtVv9Qtj2640tGf1Rsuz5tlXrKl
5f/qE+WqZ8HLm2ZHJFu+onWK7y13DGhV1rtwmrW59M/YibW2rWlovmO0NqDv
md3blWbdWfTC7Ad+rnLQbwMmtJjcydNVDn8XTe2yrKv+tP2YaE6/aaluG/Y8
hyXFlI/x6nV8Ucmeru88rV5cvuRH/3vdmBMw4JorP9LxPbb7uCdZCjZs2KP6
dVc65qH/rwHLZ61MofYmWStG7p90poX5LhS65ipf8mN842se7R14wZWfvwOn
+WkZbet1/ewrrudzS1BOr/Dwjq7y28g8sRfpGvbTBPP9qqR/UL7kx/zx9Cj1
OMsAV36k4/tzWkeWBikTR1S5qOaDZez2qL8S1v6rN9H/Wy/WJjKvfKasbXFi
SbKlm5vuu74zdx+vNOuotQutYx4m0Xi5vrdH+cZfR1QvmOe+q3z+Xh3ld5X5
tmHX6qWbL3F7D3mb9rqPl2VPfJNX31a7zeNlvsNHfWrI/Ix+Vm3i21hXfTrJ
fMB38siPeXg4Z8W/PpmcYvK3o/yoj5fMzyLxC+rmXOyaP61lfuL7Z+THvO3f
8uTYAd3V/DT5UZ+6Mp8HBVTbeTDdVR8p3+qg+mPeJtzutzdroCs/0q/K9+Go
T3WZz4Mnrhs36oBaj6r+hktP9/0haZDaT8y9BtSnj8z/5atnnbmX7ur/9+N7
KqSRfMeO/Jjnp6Z2ujPsNuf38EB+2ictF7r9VMJiT+J90tSH5rOl8Pd/ZT58
S81nc/+i9/t92+or62Xn3Nv/pA7Gue1MiDffU3CbP2lW6JH7/HGtL5SPdVHa
OfnqV6Gu8tU9CPf+tFzd96ZNtTaqP725P829mznPkkYWT+b5YFkq9wtQny9l
vfhkmFzDa6+rPvWoPshv9vObDdJvfe7Kj/SfcZ9C6lNH1suEfP75Iwq76tNS
5tsSuQeB/FgXKXl3dZ04MYn2K9c9FNQH62Vf55Ee9dckmfq0kfrg/gjym++X
avVs3rKvK7+6V+K+n1hmFOnS/0HVJOpPV31oP7Qc2ZVj5qKeSbwfmvsyqE9j
WS/JKVN6VXx4y9SnNdUH+bEuCrwutbeU3ZUf6eb+i/v+b+n/6HS5aZHcnx/c
03Gfz5bD+TN9+jI2ieezyY9zTlNZL+kDtsduK+0653wl8x/53edPmrWBnIvc
54/rfhDKx7poX+pJnSM7kkz5fL8G5WO9NL5epIX/fu6fY97oH5oPllwng54P
PnmL54O5N4T6QF8KL6pbIN8UV306YL7JfHA/B96z5h76yn7i5S06B7ryoz6N
ZL0Et75V9nKIqz5+VB/kN9+NSPnIz/ebUJ96sl4WSvmoT9v/qD/WRU7pH/f2
uu4roT5VZb2gf2g/sfB+gnXRTsaX9kOTH/XxlfWC8XWvv6s+yM/rBfmRjntV
tP9b0mQ+0/6v6o91seDJ/Em1Fqj5bO6Lwb9AXwbIeoR/aUj3qshHWFE++Qiz
vlA+1gX2H5TP97ZQfk9ZL0my/7j3zz5v9A/NBwv2T5oP5j4a6gN9mS77J+pT
l+rj7u/uWZNl/3f3d//qjpxPaD5bDv35eeOnD1z1wXkM9+CQH+uijugXzX+T
H/WxyHr5TvQL9ekp8w3nT+THukgV/UX+DpQf9cF5zCL6S/uDqj/WBc4PtB+a
+32oD85jj7q3mbHzD1d93o/v2ZC2ct5GfqyLM3Iec8/v4YH8tP9bcF6i/d/4
3C3vz2PG/waKv0j/j3ttyN9Y1gvOe8jfRuY/7vERH7BCv4gPmPuMKB/rAufb
dOJIS+U+IPWnJcflqhFzeqZwf3pzf2Jd4HxO88HyUPwg6lNT1ss/7YbMiPFM
MfXpLPN/odxDdO/Pe9YB4i/SiXchP+oDfYG/oPls6oP8WBfwR8jP9zFRHznv
WV+1HFfr+CtXfVpJfYKp/lgXu8XfpROXS5X7lagP9CVS/B3tJ+YeKO2HliPi
T2k/NPlRnwayXjaLP0V9fKU+uO+J/FgXucS/pxM/xD1Q2v8tFvHjtP+b+mx7
7+vNugDnQXoLWRfgALS+rIXE79D6MusF5WCeg2NQP1hyFJ45/fGBFO4HyyW5
x0rjaEkQrkLjaPLjd2UcrWOFq7i399/5LJwH5cs+bKkinAflY96GUX0wP72F
OyE/0vG+AX4X87awcCekYx7WEA5G69TSUzgYyu8o5eM+L+0zlv7C5WifMfd8
8buYh+uFyyEd86qG8EbaJy1jhB/SPmn2VZpXVvAipA+UcQfnpH6w3BQuinSM
Czgq0tHPxYW7Ir2K9Fsf4b00Dy3gvTTPLROIG4Mnn1gY/mJaQ6fiydPzP1r+
UT+n4sm7T/T0G+nrVDz5ef+zFzvPcyqejHtqzJPn76xWaExtp+LJRa/ev7ep
mlPx5Lf9s59568/pYdY2w0suOTLKqXhyx/xfZD692ql48polf7fpH+lUPBn3
BJknf9442+qZS5yKJ+MeLvPkpedu3wiZ61Q8ucCon9+MWutUPJnLAU++7x+b
2XFN9YPlx4BhK0JsTsWT750v3+CTo07Fk035xJMbl2685/kzp+LJuEfMPPnz
uQn9J1VLVDz58bHVOzzLJCqeXOZInx/bl01UPNmUTzz5eKXthUMaJyqejPuS
zJPrHPAfOcqH6/ncsq1baJ1i+RMVTz4duXf++aGJiieb8oknD64dNK7t8ETF
k3FvmnnyZ5lP/jIpUs0Hy8L4Tumf/tv/zJNzFZy9r+C/6cyTeR5iXmVf2PLQ
yT48Xq574syTM2VYO+5NilPxZNyTZZ6coVnWzBUmcHsPeZv2Ek++liWs4tuv
1XiZ++PMkzft/7LC3Q/qA56M+93Mk1Ozt14TUzpR8WTkZ57cqP+c9cmVEhVP
xr115smZlza/FVRCzU+Tn3nykmmLv2zmk6h4Mtcf8zbHhPR+QR8lKp6Me83M
k8d7bdtVSq9HVX/Mc3vElQz1wtR+Yu7jM0+uEV9z+4ZDTsWTx8r9a+bJ0d5p
weV+5/weHsjPPLn7jMtDV8xV+6SpD/Nkn3KNvjozUc1n824A8+RJyZ5eS391
Mk9w3a8nnvxM9Ih5MtYX8+TAq6XeBV13Mj9R5cO/bM1w/FDqatWf3mOoP7Eu
tl2YuGHzRKfiyUFyL555co5ph/cP+qA+9ag+zJNtTd5GbRznJH7ywTsDxJMn
td1+aelYp+LJn8n9febJd7YN9JnShPcr1/sJzJO7NRicNbKeqz5tqD7Mk0+t
nlB2RE4n80PXewjEkzs2Xrh8SRHuT1d9mCdf2hTa6m5ltR+adx6YJ99+u2/w
ipMOU5/WVB/mySviT66vfcRBvPSDdxuIJ/+R4XTDv8aq/d/1vgTx5I1bapZ8
OUDNZ5OfefLdlKC/l0xwKp6M/MyTcS5ynz+udy2YJ7+dPe75oepOxZO5P7Fe
Vm7+fq59OffPMW/0D/Pkv8+M7NJ4g4Png3nvgnnyD+WbNP7mM6fiyXiPgnly
5ztzBq467VA8uRTNZ/j9kJZrptVY7aqPH9WHeXJHKR/5+V0O5snHpXzmyVx/
c/9O+od58jjaT+D3p0v/0H5i4f3E/D+LjC/thyY/8+QVMr7Mk1Ef5snLZb0w
T8b+yTz5jsxn2v9V/bEusi7rlNZvi5rP5p0T5slHZT0yT8Z7IMyTs0n5zJOx
vpgnh8n+wzyZywdPTpH9h3ky+od5cqjsn8yTcd5gntxJ9k/myagP8+S7sv8z
T8a7KMyTW2369En9tk7Fk/F+C/Nku+gX82TkZ548WfSLeTLOn8yTob/Mk5Gf
eXJO0V/myVx/rAucH5gn47zNPDn2oz8mXV3mVDy5gZy3mSfHyHmMeTLyM0/G
eYl5Ms4/zJPhL5gn4z0W5sk47zFPxvszzJPXi34xT8Y7PMyTE+R8yzwZ79gw
Tz5w43SbtI8TFU/2pv7EuvCU8znzZPhB5snDq470WvDSqXgy3s9hnvyx+Avm
ycjPPHmp+AvmyagP8+R08UfMk/GOEPPk5V6zAxZ2SFQ8meuPdQF/xzwZ7wIx
T94q/o55Mt4vYp6cWfwp82TkZ56cUfwp82TUh3nyUPHvzJPxfhHzZPhx5smo
D/NkcB7myeAAzJMbit9hnoz1wjwZHIN58oD5IzM2bqr6wby/xDz5hHAV5snI
zzy5lnAV5sl3hfMwTy4nnId5MtcH87OpcCfmyXgninlyWeFOzJPBwZgng4Mx
T0b5zJMLCpdjnoz3qZgnPxAuxzy5k/BG5slfCD9knox9lXnyAuFFzJPBOZkn
vxMuyjwZHJV58gLhrsyTwXuZJ4P3Mk9mbgyeXOLaoCtXdjkUT/74zPqJPt4O
xZPbpZXycHzrUDz58a9PLvZfbFc8Ge+rME8+1Gykb1uHXfHkPG3PRwSMtSue
7HdkxdxMXTg9zHpy/85BGYvYFU8uNrBHlmzl7IonTy23qsOzanbFk/G+DfPk
Wz3nvW62w6F4Mt6PYp58P3H3k4N3HYon553lW9FvgEPxZC4HPHluVd+sjauo
frC8azzTUayBXfHkC+1Ob/m9nkPxZFM+8WRL4WJnQ+o7FE/G+1fMk59Ztw3t
tNeuePLccrbN9v12xZMd7WZumF3RoXiyKZ94crs7G/03V3Ionox3t5gnrz/f
8PP2d+yKJ6/JUnd0aIpd8eT0JhOqf+56/8fwZFM+8eS8+3OXs1Z2KJ6M976Y
J99qcatJ+gf1wbyq0etepvHX7Yonj6rZaVmrFXbFk4vTPMS8Kl2gV95OW3m8
XO+bMU/+Y8LYtw+j7Yon430n5slXju3Ltacmt/eQt2kv8eSGHZ622FtRjZd5
94x58tg39aceD7Mrnox3yZgn9wu+b/3rql3xZORnnvz4Vu9Vez6YP/AveG+K
eXJIgde1x1ZR89PkZ57c6MznPhnC7Yonc/0xb5NXTS30+lu74skB8h4X8+T6
R8b2qlJZrUdVf8xza4FnZZ61UvuJeUeOefK0gzubtCllVzx5m7wbxjx5b/DN
CpMKcX4PD+Rnnty/Tqv5i9qofdLUh3ny4LV91t2foeazee+OeXLdh2Vu5bqd
oHiyeYeNePIj0SPmydjnmSdPreXb5vfyduYnqnz4l/nHvlk5JbPqT2/uT6yL
u0kV4maUVPPB0lfec2OeXP+w5+WZRe3Mf0x9mCfvfljmXNKSBOInH7yPRzz5
eOyFbldH2BVPzirvzjFPLuOx/s3lAN6vXPmZJ3c+M2n9zQqu+rSh+jBPztut
4/Ni923MD13v+BFP/tK6el6PXdyfuv5YFxPveActyedQPBnv7zFP3hs4uUTg
Vld9WlN9mCd/0So8W76lNuKlH7w3SDz53NArT8p841A82byLSDw57FpSxmnL
HIonIz/z5Ow30lI+vWVXPBn5mSfjXOQ+f1zvMTJPHh0d++hBe7viydyfWC8/
jlnXtvBe7p9j3ugf5smea1r4j7Oq+WDeaWSevO9U6sKS4QmKJ+MdRebJpdJz
/TStdYLiyZ40n+H3HQtTbKGervnsR/VhnlxCykd+fk+SebJTymeezPXHusgu
/cM82Z/2E/j9PdI/tJ9YeD/Buhgj40v7ocnPPBnjyzwZ9WGe/LmsF+bJeMeS
ebKnzGfa/1X9sS4q/lRv53cFHDyfzfuczJPPynpknox3LJknV5DymSdjfTFP
/k72H+bJXD54MvYf5snoH+bJeWT/ZJ6M9z+ZJ1eR/ZN5MurDPLmc7P/Mk3E+
YZ48Ynpq0fJ+CYon491R5sm7RL+YJyM/8+RQ0S/myXhHlHky9Jd5MvIzT24g
+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
8on3DqsT2mLngQjFexFXl3nvuZo5lxUeGK54b5GZsb/7LQhXvHf5+B+bvf6g
/DZcPvFe2/FxTWpvjFC8F3FIFe9Nebyt1blwxXsPtZow6fq/v8u8d3tqeuCT
dxGK9/I8xLw6Uu16m1lVoxTvRfxi5r2jy2b4c1OFCMV7u0lcV+a99s058+7f
zu095G3aS7x3VrkyDy//osbLxDVm3nv/n2x5a5cIV7x3ucSfZd6bf0P4tu23
ryvei/zMe7d23dz7wo4IxXsRT5l5795rnbtOP67mp8nPvDd2afSYjqevK97L
9ce8LX2zQKcvz11TvPdPicPLvPejUsXHn0iOULyX6495HvCF37KgALWfmDjR
zHv3+1yOzl/omuK9ryReMPPe17OOR3bKzPk9PJCfee9X80b+OGSH2idNfZj3
bq/Wss2Dj9R8NvGsmff6BP8RWi5PuOK9VsRfJt7rL3rEvBfri3lvtmPHs8d4
X1e89wSVD//SMPemPvb0q4r3vqT+xLpoXiJPoYi/rijem1niODPvnbnsfP8h
1a8p3ov6MO+d/bTyjDX/1sudn9yzfoe41cR7Dz+MCmg76LrivR0l3jTz3sgS
fgm+AdcV70V+5r2Fpu5p1G3UX4r3jpf6MO9tl/GffrdOnVa89xTicRPv9Skf
nP7u9XXFeztR/bEuavt2X+t7KVLxXsTdZt477PKw4fsGnVK896TUh3nvf+S3
nKT6g/fuHRDQMSgv8/MP4p4T782SrVXBNyOjFO9Ffua9zoGbb07PEqF4bybJ
z7z3gZyLiL+ZeOvMewe3mF++U2i44r15qD8xz0fH3Sy7pWao4r1W6k/46zWr
xt0fUues4r2nJT/z3jvtZuXIH39V8V7ET2feO6BA2Qu2pIuK93ah+Yx53lfy
oz5IH03zGf46SepD69fEi2feu1zay7y3E9Uf62KE9CfzXg/aTzDPh8p40f5m
sdJ+An99S+YP7bcmP/PegTL/mfc+lv2Qee+iXqfzzjkTqXgv5hvz3j2yXpj3
Ir48816Uz7wX64V5by3ZH5j3cvngvf/RXm+0l3lvC9nfmPcelvMA895Gsr8x
7+0k9WHei/2Zee9UOT+o73vHfb/t8+NnFe+dL+cZ5r3fi74w710o+Zn3Ql+Y
9+J8yLy3kegj816L5Gfe+4PoI/PeYKo/5jn0nXmvn5yHmfc+LHKv76obVxTv
fSTnYea9z+W8xLwX+Zn3WuQ8w7wX5xPmvUfl/M+8N+BOoLffuCjFe9vKeYx5
b7Ov31WqoubPv+tC9IV5b2Y5j6nve+X8ybx39orLbVrUiVS8d2CpTzoMP8T9
c9b7MfUn1kUROT8z7+0pfo15b9HY+WO8WkQq3pv4sn6Wy8ncn/es++X8z7wX
+Zn3XpfzP/PeXlIf5r15xL8w77WJ/2Xe+/OGiJRZhyIU7+X6Y13AfzHvDfOI
K9ArJELx3nviv5j3BgsfUN/3in9k3rtI8jPvTRD/yLwX9WHeGy/+mnnv+Vrb
xvX/LULx3l/FLzPvXSz1Yd4LDsO89434dOa9W8WPMO/FemHeW1Q4A/PeA5P3
N7+9QfWDZfSB4pPP71XjaPlWuAfzXuRn3vuXcA/mvdeEwzDv/VU4DPNerg/m
5xXhQsx7j2cpcXRvtUjFe88KF2Le+6twKua94FTMe1E+895uws2Y95bo3iq1
Xd0oxXu3Czdj3ptPeCDzXo+G7/ke817sq8x7DwvPYd5rFQ7JvLejcEvmveOF
czLvPS5clHmvXXgs895g4bHMe8F1O/1vvWQyvDdLUt93OSskW/55315wPCvi
FSI/uOLijd2CxzdxpSP/V15jd+x6cMuk4xxb9P74r+7cuGXKb4V9QOInIj/S
76yf9LT8OVc5zWQcG1b6svPAeFf6+1E85L3oSOLBzU9d6d2l/9N3NXr8aSNX
PTtL/w/esLryxDmu9IbS/+08hi9eV9RVH/jHWv4NX57c40qH3/RdWqG6R44U
k47zcPcL+YdbhrvSsV8tnhN44XGjlH/3rfc8EPVcJ/EW30n/YFyyf1ekz+HQ
JJOO/n96LOjGmP2udB4vpKP/41Jvz7nZKtn8LtpbUOJOvvuPcTH1kf6/enP3
x11Gu/Kj/xFvFOlo16CRpwt+Mv+2Zaf8LvpttMTfRH6MC+KcIh31bDorIPXl
n650jMt8ieuKdJS/qOzUuj1siBurxwX5kb5M4u0iHePVo8r6iJO//dtvwqnQ
rg0Sp7WTcCqM18V1f8bn8ko26Riv3St65mlaKcWkY7zmShxbpGO8vPP2bJLa
7rbl7X/0D/JjvB5I/FxTHxmvwt0rtyx37LbwNMNnrA6J74z8GEdfiSOMdLS3
08gNV4dk+XccpR/Qz4Mnrhs36oCrvagn4k0jHeN4af2S0VGXXPkxjvUlvjbS
UX7UltknHzmTzO9iXBCXGfkxjqMkrjfSkf/09VG/x65GXOZkM16VooavWfEq
2aRjvELbZLgS7Z1i0tFvduk3pGO8/JJq1C60LtnS8T/6AfkxXohXbuoj4/Vj
zjntO6z7t73/+zsGnmBd3Hr8+UzlXfXHeCFOOtIxXoPXbH0XmH7LpKM+iFOP
dIxLnn+yXcgb5krHuPw8Z/zr8edd6RiX80WqFy767Jal/X/0P/IjPX3XXa8T
JVzp5vz2aMPNPSuTzPkP41KjjC264TrX/WGMy6rAI2977nbl5/5BOsbl00r9
PfPdv2XS0f/zs7fvWPqAKx39f7zYs82FN7vS0c+Pqqx4mWupKx39fELyt/6P
fkN+9D//Lvqf64lygqld6P+V1A/o543LX9XcV8PVb+jnmtKf0v8W9DP6H+no
53Myvkg3/ew+Hwynwvz5/kyZyk1SD3hze5Ef/U/z0IL+p3lr+Y95bkH/z5L1
0sSd+5m49siP+tC6s6D/sX6Rjv63ua93U/5J2R/a9Iqr373tX97c/8iP9M2V
Mg67195VDsYF+4/8f4cZl1OyXyEd4xIt+yHSMS7YP5GOcbks+y3S0f/+si+Z
35X+7yb7/Fv3c76Jn478GJevRC+QjnEpIbrj9x/9ifwYl0eiX0jHuDRy10Ef
1B86iPwoH3HhkY7xgv4iHeOCuOdIN/oiOi7/b+uDcfGWuOd+/9EPcn4w+XvK
+QHpGMef5XyC8pE+1v1cpPof6Rjf5u7nItU/pj4yvjiPvdepTKb8unK+3S71
QfmF3c+HPv9x3vPBuF9xPx/6YHzpPOmD8b0h51LUB/UfIudz1Af1X+9+TvbB
uP/tfu71wbg/kXNyt/8Yd+RHOuKhIx3zAedwOc+b8cV5HukYxxbuvkD1M9LR
z+3dfYfpB/Ipph/I15hxIR9kxsVbfNP7/z/S/Yb8GC/yX2a8iouPQzrK6eju
+0z/L3X3iaafo7M2CGq6wpWOfoYPZX+ap3Id//n+TuVPz0t8IvanvnP6vbWm
OJQ/7VRiy/dfHnOlo/8dTfw79TnsUP4U8ZjYnwZ8W6x88D5XOeb8EFD9RctQ
VzrGJft3vmcyhrvSMS7bT78881kWV/3R/01ybj/r3ciVjv5PqlDk57RFrnT0
/6xmC745dsuVjv6/1KBz2c8yuOqP/s9Ts/DdH0q40tH/07Lu9i2YNVH5U8RV
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
f9ps5cxl4T5xyp82i9gyuHKPWOVPH268cGf1uRjlT1PkvWj2pysD7w/NWitG
+dMmQ1tM3t/MlY5xedB/04IeXV3pGJemG+3X7zW7ofzpqoRiBb6vdVP50wWZ
u56Lq+iqj4kvU3VBUN1SLp9r4tFU/ORN596udPMdafnpUwJXuNLR//s6vqi5
57RN+VPEfWN/mue4T8j3T+OVP/X6OiWkxoB45U+byXixP12+b//aP36NV/4U
8d3Yn+Idb/anG18E5v2svE35U7yvzv70myJbm+340ab8KeK4sT/Fu+7sT78s
1G3c3tM25U/fyjv27E+bvPq1ZZNIm/KnGBf2p7MlvgD70/DXDwZuD7Ypf4q4
aexPS57ptGWmvysd47W8w4MGlU660jkuHvvTV/5pe7vF2pQ/Rf+wP0U8O/an
nTy3Ddjwq035U8TXYH+KuAnsT5/8cOxll+425U8Rv4z9KeLBsT+dlfr16b/t
8SYd44h4Z+xPa9R8WGPSkHjlTxF3jP0p4o6xP/1l0cPKpYbGK396qdb4PA8+
8HEYrwr9ki+EL7Mpf4p+Y3/aN7Vn11gPm/Kn/+x93w/sTxGfhf1p0dNFel37
PU75U8TPYn+KuDDsT68/OFb1H0eM8qeIy8P+tMTCDnu6lYxR/nSqxCFif3rj
854/FugUq/wp+p/9KeJtsT8dUSXnkewjbyp/OiDrj38862lT/jQ8cGepsJtx
yp8ivhLSzb2SzmkfvTXxvFz+FPGbzO9K/2/Otzj57h/Ryp+aeF7yh37eIvnZ
n5p4ZPKH/uffRf8Xo3qinKbULvR/JPUD+tnErZM/9PNA6U/2p8Ol/9mfYnzZ
n05znw/GB2H+sD9F3DT2pzQPjT8Kd5+35vx/232eGx9UXNYL+1PE8WF/2sl9
3Rkf1E/WL/vT0e7r3ZRfUfYH9qfof/aniAfE/hT7D/tT7FfsT7Efsj/NIfsn
+9M5st+yP/1Y9mf2p89ln2d/ingx7E+hF+xPO4rusD9Ff7I/Rbwb9qep7jpo
zu3QQfaniIPD/nSN6C/7U8R5YX9aTnSc/SnivLA/RT+wP8X5gf2pj5xP2J9+
4X4uUv3P/rSy+7lI9Q/706/lPMb+dLqcb9mfjnI/HxofROc944PofGj8Dp0n
jd9ZKudS9qer5XzO/nSS+znZ+KMm7ude44/qyjmZ/SnGnf0p4r+wP8U5nP0p
zvPsT8kXqH5mf0q+w/TDSnefYvqhibuvMeNy390HmXGBb2J/2sTd35nxIv9l
xgs+jv1pc3ffZ/rf190nmn72/XrAqe++cP0u+jlYfCj70yqjt6blLBen/Cne
e2R/mvNl1vihc1x+EPlzjXs4I99R1/1W9P+lpvFVC38Zpfwp3s9kfzonz8W4
4tsilT+9EjL2WYfmrvIxLnm+/cxzZpIrHeNSq8rqFzcHuspH//s9y2eveduV
jv5vc/jm0Pr5Xe1C/1vGb3rp09SVjv5PKt/zXM4RrnT0/5zo3MsTlrvS0f8V
6g95nXY4RvlTvIfJ/nTSpXTr67s3lD9t1fJ0zmNzY5Q/xXixP+32qvTTgPXR
yp8iXgz7U4wL+9Nnw2tNLXwjWvlTvAfL/rRR/hnXnrSKUf4U76OyP8U7tOxP
A3uHfFohLEb5U7y7y/60RqJXj1zdYpU/nSvjwv70iryHzP60aBVHyzCPG8qf
Ig4L+9Ne1iPTvxxzw6RjvP4Y7fdN9JFYk85xdtifzi/wR0jeErHKn6J/2J8i
Pg7702H9t45I/DlG+VPEQ2F/ijgy7E+vZuzTeUWuGOVPEQ+F/Sniy7A/fbZo
bvKLra50Ew9C3j9nf/rD5s8OpP07D9mfIo4J+1PEMWF/Wmjs9Edr+8Uqf/pF
1LggzzMxyp9e7xe26O8FMcqfot/Yn65vc6FlgyYxyp+iH9ifIr4M+9MVXwza
82lytPKniMfB/hRxTNif5jq42yNubpTyp1aJO8D+NFfxj84nT4hU/hRxOtif
pjqPt47NGq38Kfqf/eliiTfB/nT1+G1tPj4eq/zprldjCuYpE6P8adbYZn/c
iIhW/rQH4qfIH8Yly8n47y4PClf+0cQfkT/z3SnigKA+Mi6cjv7ndPQ/p6P/
x1M6+t9T6ol0c3+B2oX+Rz8k5Zxa83Lpc96o/wQqH/1v4uPIH/of/cy+dZWM
C/vW1zLu7Fv7us8T448wr9i3oh/Yt550n5/GN+V2n8/GF9D8N/5opawj9q2I
R8C+ldaj8UdY1+xbR7rvA6Z87BvsW9H/7FsR14B9K/Yl9q0FZB9j3zpD9kn2
rf1lX2Xf+lT2Yfat02W/Yt96RfZ/9q3QX/atiBfAvhV6xL4V/cm+Fe/2s28l
fTTneegj+1boLPvWY6LL7FvxXj371q9F39m3Iq4c+1b0A/vWInKuYN9aXc4t
7FvpvKT6n30rnZdU/7BvbSjnNPatjeXcy77V1/3caPwRnQONP6Jzo/FBdM40
PshPzqvsW3FuZ99K52fjm+g8bHwTzs/sWwvLuLNvXSPv2LNvnSznc/atX8g5
n31rsrtfUP3MvpX8iOoH9q3kd8y4kD8y43JZ/BT7VvJ9ZrzIl5nxuiz+jn1r
Hnc/aPo/t7t/NP2cc3y52qE9Xf2JfoY/Zd+69MKRmZ2nRCnfGirvVrFvjW84
pmaFJa505P+9Z9VdKdYI5VsDypX1Wud3TX/3K+90sW/1c9RcuD3uL+VbR3c8
VHxEXlc6xmXhqVp7arS9oHzrxaalT9ef78qP/s90NueNJpcuKt/ayD5335yO
l5Rv/S4100/Xoi8r3zp0RMrAK1evKt+6N/BWqUFJ15RvHRox7OWDa9eVb90i
73qxbz1X0ra6k1+U8q2B+w7GvjsYqXzrKRkv9q2rbcWL/PkoQvnWU/K+GftW
vJ/GvnXdM+d3+X+LUL4V79qxb/2riI+v/XCE8q1n5Z039q14T499a9SkuTnz
XY9QvjVB3g9k31qzxccVs30aqXwrxkX9v6q868i+ddCb5Ab1AyKVb8V78uxb
fWdO9cu0M9Kkm/t01ZYln6vtSud4AexbN571970VF6F8K/qHfSve+Wffusuj
a+6LWyKUb10q74iyb8V7+OxbV13ofrfMvAjlW/GuO/tWvIPKvrXPxPs1G8x3
pWMc8Q48+9Z7+7eefFAiUvlWvMfOvhXvsbNv3f/N0S0VPo5SvnX+gmpxlpBw
5VuvLWk0+Yeb15Rv/Vn6jX1r2WG5B97eeln5VvQD+9bf5V1c9q2Rp95VDGx/
UflWvCvOvvWpvMfLvjV19c371U6eV741o7yfzL61wrfJw+8GX1S+Fe+fs2/9
7GCWY78UC1e+Ff3PvhXvkLNvXfDk708L1o1SvnX4/kGVzrQLV771daNKG5tU
vaR861i8Ay9/GJftc4pMW/FTqPKt7fGOuvxhXI7hPXPUR8aF09H/nI7+53T0
fwilo/9/lXoiHfUcQ+0y3ED6gX1rKJWP/jdxBOTP/L+29DP71vkyLuxbS8i4
s2/t4j5PjD/CvGLfekLqyb6V5qfxTW/c57PxBTT/jT+KknXEvhXvKrNvPeK+
Ho0/wrpm37rIfR8w5V+VfYN9K/qffSveZ2bfin2Jfese2cfYt96VfZJ963TZ
V9m39pV9mH1rE9mv2Leulv2ffSve72XfCh1h37pd9Ih9K/ZV9q29RdfYt653
10dznoc+sm+1i86ybz0qusy+Fe/usm9tJfqufKu8u8u+Ff3AvhXnCvatteTc
wr71gvt5SfU/+9Zo9/OS6h/2rTinsW8dL+de9q1n3M+Nxh/ROdD4o7Xu50bj
g+icaXzQSjmvsm/NIud29q3b3M/Pxjcddz8PG980Us7P7Fsx7uxb8R4v+9bz
cj5n3zpEzvnsWwe7+wXTz0Hu/sL0c0N3P2L64WN3/+IaR3e/Y8aF/JEZF/gp
9q3H3X2fGa9u7r7MjNc48XfsW0Pc/aDpf7u7fzT9nKHU0T+HDXL1J/oZ/hT+
Bf1z50rxeh3bJpl09ENVv9Qtj24kWbbJuRHjMnZirW1rGrreB0b/4B2wf+i8
jffHcP7E71aM3D/pTIsU9Jt6xxV+AfWxF+ka9tOE25audG7He6fyvrHxHQ3k
fbb3+9tjU3+fKWtbnFjiSjfv6T2rNvFtbLJlq/wuxqVw/IK6ORenSLsem/oP
Cqi282B6CvYr9X5pe6rnfalnGuoj7Vq6etaZe+nmHTn1fub7cqJM/XfOvf1P
6uBkUx/z/2L73rSp1ibZ+BSMSyN5L9FPyjHfpci7iG+kHLT3u3z++SMKJ1t6
SH60d1/nkR711yRZhrbp9cm8CudD+P1M5Ee7klOm9Kr48JYp39zTeXS63LTI
JEs7OVegXekDtsduK50s+0mUaVfj60Va+O+/ZWl//0y7+2dOhKBdeIezq5SD
dhVeVLdAvilJpj5oV3DrW2Uvh+BdzUMh/C5lU8mP9VVEyvFFPaVdqE8bOnfh
Hcv3+9tj064B0t62dO7CO5atpHy0N0n6LV3KQbumF+nS/0HVJEt3yY92Hf7z
88ZPHyRZOtN5Eu9zZngfJ8icWybI+Lam8wPeY/Sjdi2Vdkm8IdMPT7q3mbHz
j2RLL6kPxhfzU9av6Qe804t2ob05LleNmNPTvA+s3lFEOegHj/ZDZsR4pphy
0A9Yj53p/IP3JGUfM/3wquW4WsdfpZj+Md9byj6A/OZ7UXnnuSPpHd4PlP3N
tMuz8Mzpjw+kmHJQzyqy770lHce7iMiP+vQ8vqhkz3/3k3TSZbzXt1vyo//H
yP4M3Ud/4j1A6D7qiX0e+fndP+RH/aEXwqOMHvWZ+XaC/RDeZdXv+6Eccx+8
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
K9BPeP4O+sn69KUh6gi98BOev/M/1mB5lA==
            "], {{{
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1:eJwtlgmwTmUYx889lqN7vmMbQpbuzXZxLdnDtW+5lpuQfc1gSJbIlGEQiqJo
DKUUarSZokWyL9mXkZr2lEJikOxFv/88z8z3zPM///O8z3m/9322zKGPdx8b
BkFQIS0I8qGnR0FQCP0iumEcBN14WTgJgj7oOvD90I3ge6KLwhdDeoMfiM2+
K7gIXFlkOLgZXGOkGms343MwXBZ4I7gMNo/yvBVcD5sO4HS4gej7sOmPHuLf
3YtNXWxa8Hw7FQT/IU3A98Ot4F1pbN5FfxCZTVpiuCr85+g62h/8Da0DDwDf
jU1TxyXBo9F1sX9SfnmeiW7L+zbo1kgIl41MA+/H5250c+x3ovOwW43uyvuu
4DfAD4I7IK+Bu8B1B78Dfkjnh2zW/4OriowHt4DLRZaCK8Hl+Llt4ltjxIE/
BX8Ibgj+Btwdm/d57ol9HrIGfAL+kdj2NQJuALIefAb+LnAuuAHvx4OPggty
4RMcD4QfC94P7qO7A88DdwDngBfqf4Fbgj8D/4nPm34XOv8x8PvAt8D1sWsv
/4mdoe50HXxF+AI8f8262uB64O9SxucHHwPfC/6XmNwLztY5wB8Fz4mM3wfO
hC+KzwVwd+BuIwdThkvCL4G/DoYKZnkMNMLPdYiJPCvuT/E+ApQCFwvN/gay
B5sK2BeGfw7bych5+O3wl9Hp8H+kmQjP5P2EyL71TGR+5f90mq3lCIK56Fu+
N+1Rd/oYkp+XzfnWKHCmx0JjbCYp7uCfQteAr+2x1yY2/mlwdbht+K0eWEwq
X5RjpRPTei6VWN4qj4b4N7PBuyKLa91NvsRyTDaK+fbIHPj6ieG5ijnf50hw
hcT86D/cC66CjPMY1h3rrpXX5TzHVQfKgxd4/NTx/GqnWIot57IS25P2dhzd
GX4ZfOXE7qYoslOxxvN8cEedA3gDuAe4DLoMa8uiZ7D+Kmf8JfZX0CUCu1fF
VRHw87yvoBoALodu6vGZg26p/wRurvxH7gnsnHLcRud10+NK8XLJYyAFXyK0
bxUOTYTTtc5j+ziLVvHtLPAR8OLI/tePygV0Oexj9HzFJ/owfLnYYm8HOCO2
ON/v8S+bQ+BWXldVQ9P8fynHOiIZgeVhL+zbga9EFreKz/HgsvB/8bwtZfEa
emzP8nhWLCu2ZbMV4jp4D0ajOfv+qvnYRNSQdfoe+Bh6r84uMLvBsXFPqFeA
d4FHgnco9rDZjn4dnxmqJ/ivH1o9r6s6jFQJLG/L+v1moldHdi8foxsrHgOr
7xX9vlQvsv088xRDfg5V0WO9lip2m3pMKt4WIcXhK7HHiXC1Aut/05UH4Bno
KaHl2mT0VM8p5eckz1nl5CykCXh2aGu0VvlzJLKcauC1XXmU4Xmjb72MHur3
qNxVreMXTI0sThS389QrE/uGcueI58tOdK3E9qr6cIJzLA1eqroFrqR9x1bT
lBdbPK4KsHZKZHGlGjU7stwpqP8VWX/U/1WN6e53oR7f27G44V5PRqBfQeoF
1sOW+JksQn+ivAIvDq0Hqm++hz6TZr1MPa0b32oG/pVvve1nqJ7aC8kE90Av
d5/yfVL9Xu/Z+MOs/Uj7Am9Ct8bmi9D6lfxf5DvDFE+B1dkRvmfVsAOR8epx
axUTgfXUU5HtU73sXGT+BuH/58hs1PvW+/86EFqeKF/OonelrC6Ux+eh0PLu
IPqnyPZ23uub/Mhfv9je98f/hZTFaw24TrGdX1ufI7R2RWgzjOajEomd25vg
TqrViZ2R5o1aseXQt/j7BSmpO4st14rhZyH6t5TVzaqqKzx3CmxOOALXHnwY
PSA2PQ7fJz2uZP8qduXBp+GyYsO/p4xXPq5B34jMj2aMzbwrFFp+pfOcF9i8
UdznS82QG/ysNoZ2pzp/3YPOQbHTRnftc47mKM1db4E7wx2LLNc0/+icxXdL
rPaqjz+r2SFltV5z41VwTXDN2GZL1XslwVe+T83AKz1/Nc8pRhVjzbVfn3M0
IykOVccueD9V/VkZ2Zmot5xKWb/SXb+A3s3z3x4bLXy+Ui/TXK0Yv5yy+Uu1
9KXQ5kndb25ifUHz+TSf/RT/fRPrZ6oPyvdc75vtEpu9Nav/o29GVmuHJ/Z9
9Sb1RtVk3ZHuSvOY6uRa8LLI+kh1n1e3sHYYa7eicwKbXzWbqZddxH+12Grz
WXCEXafQ6vNAnxXVo895jN3xGVW9YFRi96B6onqf6/W5C/qS/g9Yf/pKymq6
7quX72eo8jFlfVexXTm2/vk93KDYYixm7SWvgcopzRKa95Yrr1O2T83Dq7z+
qw+0iq3GJ/jvC+4Cn7+Q9cr8ms0iyyfFeanQvqs+/wP+rim34cNCloOab6/5
+ajHnQH/D8aYdX4=
                  "]], 
                 Polygon[CompressedData["
1:eJwtmHm4llUVxd97GM6F73tlhgQEQZB5CBBQBnEAHFBUCFGQydS0gUEezcon
S03NTMtMyzE1SiWRcgRRBhlFVHAKJUcEFdMEBEW09XvW/mPfe9aZvnP22Xvt
vd8OM2ae9qNUFMX4mqKoq/8vVoviBcm9uSj+Krld8i31N9OkLeofWxbFnWof
rb4tGjte+C7hAayN+bdJXtXc12KvbhpvXXhP+vol78ncV4RflvxJ7T9LXlK7
vsYP0HjHSlG8KdxI+CDhv2XPrSfcsvCaTcJ1hJsI/074v8LthdsLPyC8Q3iM
cJvC91ki3EC4gfBlwvslX0ku1D3mSv6n8UM13qrweWZLpJpip/5slbwv2SbR
0YrLNfac5u8XbizcoeI9Nmr9cYX3flrjH2pc/4o5ws+r0V3jTYXvEX5fuG3c
52bhbcKthNsJ3yr8H+GWwi2EbxL+pOo7crf5ko/YX/IXte+WvKP225I71b4r
u90s9E3ffdm6QUfvxdoOah9YeA/O8EfJ1qrP9oGkY+j3DvVP1v0mSc7UXSdJ
+qh9mcZ7aHxZto00SbYB3neqxheHvXwkPE74fuHDhDcJHyv8e+HBwq8K1xWe
KYxR/kBylH5jhKSr+rtJ6khGqv9Y9pTMEX5R/0dr/Zda/4bkdcl49X8nZL7G
hxQeO0v4UfYV/lD4U3QquUD935ecI/kudqC+zySl2tXSZ+As56m9QuuHa/3W
7LlPCp9YeA1970nOLT2XPegvamVHtf6N1Zy/8G8P0J79JQ3VX5GcLLlX40do
fLPGd0qf44U7CC8Qbqvxc4UPEf6XcF/hK4S/Lbw2e82/JSfFXtO091RJRb9d
lWzWfhXNb6v585gr3EX4YOE+Fb/tGuGTCr/xCcK3Cg8VHiv8huY3FW4kfKPW
d0Rvwhewh9qDJNeofTVvrPY7mjMMW0dHpe/wILqt+m6Pqv0INln6vQ/S/0/k
L720ZiX+LDkG39fYGI31kPxE7b7qW62x4cIfaP52yUPJPoAdp9L20Qg96P+h
mv9Yts1yr7rSRb1a6wBugWPQzWzNf17tseprUGtuwLawMTjip8L1hffo99Zo
/i+zuWBb8MMt2bpBR29p/O/ZvjxY+JuY3xBb0dxnquYT+KGO+i7U2FP4d435
r502vjibl3eob1nVNjuCt0+25Wuy58KZK2Ic275Z+BiN7xIeKfw4/lLaNg7H
l5Nt5P7g9wHCX1btg4OEH072TXwW370dHyvt13AjHAnHX5HNbV/qfOur5qjm
ws2TuesF4f5wKZxY+g7cRc3iIo1dHefnzsur9h3s5elkH6qvNxhV+E14m33Z
vrcSfhDeHfd7TnhmaV/GXpYn+/QlwvVif3TLnuy9VPK90hwNV6+Dc4SnSOen
xHvDLR/H/fFxfJ3f5LdXSX5YmivhZjgazrwy+27ccWnYdyfhE4k5Glgi3K2w
v8Ar3Svm/nbCH1dtj/hmT+HdwtM05wm1F0lmxHvwvnAY3Iov4bvHJfsUOkAX
J6tvsvZ+LZtbb1PfKHwlmwsfFB4h3KniWERMJDbu1fge/Ed6ryP5Qn0DIx4R
f/cLD414QXxZJ+mu9o/V17O0Te+K+IitH1uxr/4MjtL4r8M/8J9VVQttfOoX
GlspXGpuM+E/ZNsEb8cbtq1YpzsiV2kjvCHiv45aXKv5s0rrgLufJRlSmovg
pKFqr8NYk9/o4IrjHfqvUd+zGrsuO5YT09cKr5Z8UWObxraZ802N35216BBd
LiCmqL1Kfb01dxacU9rH8DVyJnKnt7O5lDflbYlT85L5bYLap0d8fEAyUe2X
s2MlfYy9lZ1r3S18ivB24RPCHuCDFZE/5eQ4jM/he3A4XL4zO/bA8XA9sZJY
wxk4yyvCA4WvFx5WOp7hb/cJnyb8UHYsmsAblT4DZ4HfT8X2NN5P478hRgmP
rjg2EaMGl74jd8VH39XcJyRdiDXkKBp7PJurJ3J+fJUYIzwFm4MPJKMiXpH/
cF50hG7g/690/31Vn3Nhdn6JLtAJuSUxkvOcLdyqdPzqIHlW/esli+JMnGVa
zJmu/2uy13YSviWZ0zZkC3fmroz1l/QLniUWkxORG03VmpalYyL22BNO01hn
4esiPxlT8dpLkzmaPXoL9yrNo+TXrUvvxZ7Ls89+fsR/7rA28lFSjl+FvWLb
2Dy2vyb8DR9sX7G99lF7nMYPKJ3T4rv48N4a2/++GvM7mBjaWeNzIrYS8+Ey
OG2YFrYpfUbOtiLiOvnKefBlvDFvPSlZr8QM9uY38CtsCts6XdKitA/NTT4j
Z0UXl4T+0clerR8U8R3bWRD2eZj69oQt0KYPmxio9Vcl+9DG7HzyGOF/ZudT
5J+c85ns/AOdjE326VXRR25Cjsrcz7X/qck6QTdNS+uyT+QnT2VzPlxPLtkk
7t8lzttF+KbkmEvshfP7Juck8+JM5HrkvJyVHLhr+Bm2152cJJnj4XrGLk72
QeagQ3QJRw+p2CfQA3puHjI52ccWhv13Vfso9X1ddb1ADkPuAmnCAfg5cRpu
IM8iHgxL1iNzhifXGKytET487vuPbB1cFOdBN+iI+HBGsu6oZw5JrjmoPS7N
tmVsmloLG/46bAXbpqajtuuRXLuS/1Frsgd7wTlwz5X4VOkYhm7RMbFtYfDL
kOCOR0Lf2Cy2+1jwUa/kt14f/EbOC3fg93AdPtw59idWtkiuXcmXGwcXb4lY
gh/hX7trXGOST8FRcBUxj9jXW/j1yKfIL/aFLzJOLPqsxrGSmpfaDH19WnUO
QS5BfUedOD/yg87JtePc7FyTnJPa9KrIV+CHjVXndOR21ATUBjdkx1ZiLLU2
OQa5xvGSXdWw4cJvjC8+GfkN49QzcDbcDWfBC+QM5A4HJteqW6I+JV9GV/At
3DwjmX/JKcgt8Hl8/13NaZ0co4nV6Khhsk7QzcPx/tSHuXSdjC2OEK5Xujbg
97FZbPfFiKc/T+ZacmByYTgD7mAP9sL/akv7Abk898W28Vl8b3ayL68OPoWz
qFWoOeH2a4WPKO2zcBf3wZcXh79x33alawZ0gU6o3TdHfL48ObaQQ5FLESOI
Fb+NfAWdbK+ad4kN1OQDSnMCsYT5cMVL2bGHGERutCLwOcncvSnyDfIlarmt
8f2BbxJ8m6BOHZ185sXBb/gyHNO4dA5ELkSOQa5BPrYhOYf/PNseeZN6EcvJ
wZfG+MSKa5Ybk2scapmjY0/2opYh5yXXIefZIfxmdj5FfjOydI57R8RP7k49
vyw536CWhCPgCr7B8C1musaXJNcc1KqckbNwprNL1+jchTudWTonW5ica5Bz
sCc1ArUBv8X3kfXJNQnnnVI61+OMnJUag7qBupLagza1xOjCfdQs1C5jCufh
fNNgjDnnx++TG5KTjZO+zhC+QfhI4W3Z3xfYg7V7Q2foblKcjZyY3DjLqWtr
fWdyUnLR6eEPxFXyRr7t4eP4Mj49WOuuD76BD8i9yamxFWyGPIwzcBZqcmrz
I4Mf4Uy4kxqS2pQahlqGHJM9WEsuR42En8HD1E7U3NRi1GR8x2AMX4SjmQOn
w+34CLksNdKi0P+Eit+TGpGaYFbYHLbHNxe+veCT7MFafJXYdk/YAzGO73mc
gd/mWwo+QQ5B7oCvwHENw4/hvv8DGDOebA==
                  "]], 
                 Polygon[CompressedData["
1:eJw1lnmYT2UUx+9MTXdyfxcVCmOZMWPfxzpmIzL7ljEo0ijSokz2JaMYZafN
UlGoKDyhp+zMDNkJ7U/WNtUYJiZR6nOec/rj8zzf+z3nvfddzvu+Nzz/6ZwR
wY7jFEEINPYcpybG3VALTgUcJyjUcdKIFfO8Gypcx/kFNqIPQjKxmzzPg7kS
o01D/LfQP6F/hJ+hHl5T3t8V+qFz4H6403ecPnifoBPR3aEH/ECbBnj1Icza
RuI3gihYjJeKVwN9F9SEgXgxeOnwBvo1eB16E7vXVy3eQkghZw59nA2L4B68
89JX6TfcgP14/Wn3LX41dFWoAlG0vWDjbIb+Ff0bNPH0PWfQZ+Gc5ND+Mbx4
YuHoCPiXd6cyb9vwt8Lvrs7Bp+gtsBkGkfcwDIZ82IGXS04IOhHdXcYF0Xi9
8Jail8Aim5cWEIVuAo3hMn2JJ+8jmXdPxyhjPQHH4Qy8LzFyesIm9Mfwss3V
IeIHoTd6Jl4COa3QLdFZkA2VfCMV/210JrGz5J+DNLxVeN+jy+Ai5Mq6Q19Y
K/VAfj24HOQ4AZ592GPvW4F+B5ZDBjnJMBfdjVgsxIEHyXhJcB90sHmROklD
n+Kbp2E4XileP7y/eL7uat3XsPWVdT7NdzPIS4dM63sWOQPQ69Hr4EPrcwI8
g34FXpX5Jqe/p7XzJPopGOHrd/fKmKAE8myNItFlfO8ilEMyeUmQYvMo4y3G
L2NextDXGfCiq98dSXw0jJI19rXu30Qvk/0n84A3mtxRsFNqlHfU9bR/B4gv
gPlW47ssXkDuNJhu6/Ye8Xdhpc1Btqd1kkUsG3KgGYzHGwdjpDbJCeXcyKTG
j/J8BAbineQbt6Ibob9Afwnt0N3w4iAW/sHbD3/Tlwae7k/Zp+NgLOy2uQgj
NsT2RV/0VWKVMAh9DG8ksdvpQxVYiL8ALtG2KbEVNj4Z5yG8m7yvIe1uohOI
r8XfDFvgO7zWeG3As70/E/8lKCFWXfYI+hq6K7oLdIK2nq6TrNdxG3cE3p/o
jlKf0B5ae1qXUp8XXD0HZe9PQk+EfTYXRehbGEs6c7qPnM/gmtWv1PFtoTru
Al/nZRd6J2z//9wgnkHbwzwfggc8PWPlXF4qex9WQ3Xa5so4iG/neQf8QV4F
XAlorLOnZ11tdF2oY2fnKnJXwiZIkXMtoHMeIWsuZyW09PSOqGNtw+0MDdC/
bPq3gefjMBjvqK2XtDmG/hwipbbwTgR0TRfa/Dp4QRBi9TUBf7z0n1gl8zcV
XY2xFRB/Vs4nWSc5A4i3RbeTcdm6FZI7Bea7+q3tsmaejsnlHaFSW76uZbTU
BrF15K6HFr7uR9mXE6GHnAWyjtAT/bx8g5xeptuh20M0VPX1TpS7McP6t412
W6G+3SNxnup89BAYHqx3yx5ySuGkq2djPV/XMk/2B/SxdXuO+GQ4TN+D8Wah
Y/EfRQ+DoRAm96XkytzLOQ+tfT135+FdYj7Lg/QbS2i/GJrbWSb3THP8yehJ
MMHmIID3OPoJGAuJnn73EXRtYnWgrq/znIqXLue21dBeW8P6nu472X8bYYOc
a66+Q/os/xb9pbZhANyB9zVtv4JvbK1kv9Wyf4Vu6F1ypkCS3Wtd5D0Q4+vZ
FIN3nbY3ZB9CCbnF0IF4EbGj1l7ec8DVOWvj610h99p5vHI5e1w9X+Telvs7
Xva/p3doK6s/qcOr5CwndxmscfX7ciYO431DpQbs/sqzcTwk5wU8GKz/PtKv
QvRUmCF3AF5H66voTujOcMTWP9zT/zb5f5P7t4J5vgpXoDSg8zKLvDkwO1jv
fandF9DTYZrVs9TLFPtuoc2BI/868g/p67na3u6P1egPYE2w/m/8B6ucSUE=

                  "]]}]}, {
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1:eJwtl3nQj1UUxx/vU3rydH8iSzGyJluUoZS2KaOhRmJskX3flyyvfffy2vfl
te8hVISkZaZ1WkfEVFSMpSjDJEn0+Trnjzvf7z333Pu7z7ln+5Xt2K9J36wo
iu7NF0UxWDETRXsgK9Mo6sa4wOKkEEWlkihqwXoxsCSjFbwaeH9iOpPRacq+
UcibCRlT4MdYm8A5zZkfCb6GvDX4EmM8vAV4EL2m8MB5h5xLlmF+FBzK3u/A
V5AfybK11ro368edX82ye54ER6PfOTU+BN6Y38hGpxHYFfk55OORd0jt/GHw
0omdr9+pAW8ve4AddX94Eec/sD4c/bacNQb5eHAc8hHwNujUZz4U/jS4ljEH
Pg7MYUyETwaro9cJ3pN9E5lPhY8F/+TsbvBL4ADmufBBYD/GJPhgsBd7XwXP
c4fDWWbnFcy7JWbPGZzZx/W174zb7RT4FDrF9Dbsvca8C/Ir4MPIBsBrgW0Y
g+EvgzXcbrVj+x591+Ngd37jIvumc0495gORPyPbxmaHzuA0/y59XyfnPcCe
she8O9jBbfgE2CU1m1fijif8bqfBX/x99ea70VsA3wWuYiyBvw++w1gI3wfm
MabDl4JrOHMlfG1ib90MXgg+hrGM9Qz+vgichXyJ/DExvghcor3I7kRnMN95
OcveawFjBjqj0Jmf2F3Ko/Omn7NTPo7+z+h3QrcvowCyFcgWMWJ4b2R5qd15
DmdsSO07qnHODnA+8u3ga4x58M3g8MS+axK42v1qr/wqsfXi7F3BOW/Ay8Br
ylfQeVDnuS/NBS9yh2xwZmpvrLduwhnDmFdjvifYHu19MrH4HQ5vCX+Ltcry
A2RzUvPlH5F9znhOb4msEL/9tueQ6an56jnWD3qOGI9sLKMh/AtkrzNKwgch
m5Ka73yE7DijnfwY2algPj0VfhW+Ab4Ufgk+Et4/sbhQbmkHvoe8DvLG8N+D
xxL68xkz4fm4YwF/+0V6h9Rskx/ZDfRzZffU4krxNZBzyjFawu8G16NTWL8r
e8MrwesjvyO2+NV73yZfh98OZsXmz4q5gonlN+WZhcHW5A8Zzz9lwL9Y6w6/
kWX7dU5BsDBrbeHlE+PKRdnB9K4zRsAfQ55BdzW8gcfai7HZ/HnwK9kstTj+
BD7a37cV+z4Llr/0jtJRXH4cbL/O6ZxYrtM5XyonM5r4m76gN4zsXZVntedr
36v5N/BGiem0TsxfdKbuWNpzy32x2UX2UR1QzlIOGMPe82BX5DXZO5jfK6sY
8DzfTnuRn3Ud6Sqf/AaODXaObKsc3wv5P8znBntT6YxzG8rmdRKL0X7wW8GK
zivEdq5qx0T0e6SWp2fAS7DWR/EClmP00DvGFiv63qrKn4nFlHxStbUDvAq8
kMda8dhyhvxE+a+H59hpnD8wtfUcvV2wmqfccpfn7aKKh2A+1wf5KMaz8E+R
HfIYmeXxrtq7H9nw1PL9gWCx/wB8d7B1xVF7t7POb5hYTnhIuTYY6rv0nv1S
87dVyLe5LRTLDRI7c6/ra/8++CPIU+WHYDrD1DOopvmbbg/mL6o7zZF/6z4m
n1kMzw+vlVgdVyyUhQ9JzXd2sP4B41H4CGTVFaOR5TXp6A13sr7LY1Z5rG5i
76X4rerfpfu293yi3KIcrjvnBatPqlO6w0TvbQ673WTf74PJ1dcchZ9m9Pbc
NVc5Dv5T8FjinGmp9Q2qm13Bycy7yBfQyUmtTp5wrvr5K/wMo7/nNNlT/lkP
POZ9iXJmK3BCZGet83wom+i9lEvWIFvm9pTPjHaf2ep5V/Vadbukx6ZitHZi
+U15Lzu1vuBDt7fqSN3YfFU9xibkmz1PDkgtL3VULHgMqu+YF6zfVB0fA15h
vj62GndBfhlbP7NU9Vq9BLhKeRm+SnkyWK8p3z7pdpYNE/L4QvhI+DzGcvVI
idUN1dxN4Fm3oeyf4+cvS6wub0VeImN9jnJLBeQVvK6pN1ieWp0vjSzXe4Nq
7sOK+9n6Dvhq9m5EXjRjNVv3X4t8P7wSshn6PXTyEqtNs5DHyJf5HUrCs/UN
qifwvon1dfqu1L9R9WsbOBP5FrCU5yLluJt74VPBmYn1FKXY9672RXaPDYnd
cx3nLE6tbwroLEhMZ01ifYW4ZLqbfucedGbHdh/V1OXee5RFXixj77jUa6vu
f0vG/i/ov0MJ/WZq/VqRjPWlnSLri6swPxDbfdSDqadSX6ZarH7ssvcv6oVG
gH+7n6ifqex7defrwXpQ1fGb9Vy9cWw9ifroP4L1geq1csHZqfXg14LlT/Wz
W4L1e3qXLM7eGDznev+jWP4vWFzrPurR9N9BtXh+sDPV+/8bzLbqOQtzzv+2
obBD
                  "]], 
                 Polygon[CompressedData["
1:eJw1mHf81lUVx788F/Obj/cBRVKcTIlRDkzTLJPEVY4IVEBA9o+9Ym9B9gaF
nzIEWWquHJm7vacz0xQUxVyVopZZfd58Tn+c13PPOfd7xxmfc+7Tov/orqMq
RVF0a1AUDfX79bIoLhbdlovidtETok6pKL4t3Tcl/0HIGHcVPaRxe+k7iE4R
bRXfSL/DNP/L0t8n/l7RNzS+RPSIxr2kv0bjfqKHs7+7VOPLQjZT3/ZOnvsd
0RkaT5VsZtVzOAtn4ts7RedoPFGyb0n3Q/FfED9F/JXie4p6iH4s+U9EvxSd
K/1s6QdI/l3xLcW3Sj7nLdl34OxfEW3T+CzpRmj+ueJ3it8hukDjC+NO46Vr
l3zXmaK9MuiVkh1X2oadpRsXtv1R9hk521Wi80SjpTtRc76Xfd5p4ruI/7n4
X4suTt7jktgPW/4qdJM0XiLdWs05tFYUv5DsQo0n49PSdx6YvCZr/5S7iZ8l
vr/4WeJf13kHiT9F/Grx/xQ/Unxn8b1F09lb3/xWusdEj4qmyBdTRZ2kP1W0
UbJNojtEx2vuqPi+i2iMxlmyDdLdKKoXfUnys0V3a9xGuklxXtY4RPyQwmtz
J+52vaim8TrpP6l4/a9Jf4P4htINjvOfKRqqcQO+kW6tqCDe9HOSdJvFH5Rs
8zPErxLfVPxY8ROq/v6LohWSr4yzshZrcmZkzYNn7lLx7+s8fcXX6fvl4pcR
g9KdXnr8XsX3QbZFfGN931/8WaXP+N+K92S9B8V3TLZZl7AfMUJsoLtO9Kbm
95N+iPabK/7tin3QKYi93q1Yd63oHY37SDa46hhvFfFIHF1ROldOkuwB6eZj
E/FbxDeVvX+THYvEzxx9v0D8UeIHiD9Hc8eK5mu8XrJGmt+u9Nk44xzNXSg6
Urrhkn1Vuj9mxxIx1ae0D/ElMXOPdN8XtY34vYi1xf9da/UQ37Z0DnF27nCX
dIPEXws2if9d9n26i36v8aWSLYozsDf5y5zLJB9Y+tsns8/EWfqKDtMdZkq/
UmvOFX+Q+KXil4kO1ri96HGN10t/A/4n/0QtJW8laqxxN+me05knZfuF2CRG
yZG2mvOwxpsl2yp7Hiv+NnJD/DLNPa5mGePlojmi2aLjJTsh9rif2C689/kR
72AYWMY3fLuBnBR9tuY92esW0Wmlc4GcWK/5WyS7GSI2wwYzwNJk28zkHOJX
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
                  "]], 
                 Polygon[CompressedData["
1:eJwtlnlUV0UYhm8gefXnJcU13HAPl/zHpdJSS620xSw1W9wVt8ByQxFUVhEV
wQAFQUBAc8Mtl8qyU6e9zmk9WamltptatrhlPe+Z74/nnPe+883cuTPzfXPb
TUoYGR/meV4mRMCqwPP+wJgR8rzV6DWwyfe8MtoOhHvei/A8z8W0V6Mv0X4Z
rkB4pOfl4hXQlkxMCmxCH8TrSFsn6Awd8TvASnvXdGJ+Q88jbhX6HPo8LEUP
xRsIg+A9e0ceei2s0VyIeQZuRK+nfQMUa954iXgX0L/rPTAXryVeW2gDO/Fu
ZR49YCu6Gd4AdC26A7o9xMC8kBtvEToJFsM/xLRjLnvRZbQV0K9Q40Ala1WO
fxRqaJsNYehrfOu/UETf7bANdsA9tCUTUwWvomMZt5pxanz3jv14+2APlBLT
CL8hLKTvMcabiJcEt9PeD+6AKtqqiClnLkd4fgU2E/MsRKGraa+BLRBN3M2Q
gb7AeF3Qk4k7ib4CVyE5cN8RTt8IqAOFePmB+yZ92yWYRcybeI/TPhamQmbI
rY3WqNJ339iV76rQ+WB+L/P8ElSE3Hu/ZZzTcAqWMFaifWck8TFaE9iIF9Cn
AdSHePpl2vzj0F2J6QZr8XIhT/tle5lle/0cegU6O3Cx6lOOjtQaak2YYwuI
hh14JcS3RbeBGNt77cdi+nzNe6PsXOt8V9g4CbRXojdDLP4t0Mt357UErxRd
yhrs5rlWZ9ry4hzjnYeLlotlilUuQsi+VzlYg94KW6AZc4qCEvRSxsmBVXCV
Phl46bBMuRNya6i1TKftLO+YhteC5+awDO8XvPboXPwl9LmI9yf8BU3wG8Mi
++5JxHyEHk7ccvRTtD0NnaETJNF2nbie6OU29tSQWwutifo+SN8HYJjmaOf5
NvRrtB2F1+GI8hWvJ/SGRcRMpP8EmOO7eX5OzMPoh+BJGIn3Gd4H8D58aPPU
O95GT0BPhDthCd47lo8p6LH0fwL+1rrjbcBL5TkNTuNNwpsMM2AFbV/gjUA/
AmO03njNiG0KC2g7w3e3RreCltBdY+PND9w6J9PnBM/Hw9x37AlcnVK96gQL
iFkIsehuyiHVY2IGMc5AGOG7NVPu90H31rpYvr8QuNxvjG4KTcyrtbyYT9sw
4ofDOvRKOy86N/8Frj42RDeC5pY7Wqsh6MFwt9WwA3g90PczzigYDTND7jtz
AldrVXNT8R4lbhQ8ZnuUrVqunNH5hh8DV9vrouuBbzmTozqGnqt5wE+BqwfK
i76MPRiG6DvwWuG1hstWm84Gbmy9Y77dN8p5395xk+VsHfJonc4Y42QrJ+Eb
nXc4Dlm05RH3JXq07fUx9FfKNfQ4vFRIg5OqkdYnX/VCOeG7XC3F2wjFsJ62
dNUO9GF51IVii1WfDN/ducrzG8CDMLtzdQ/qHdk6i6q5Nr9reJWq/cpNy33d
yYdUI3TOtaeRbs9z0Ku1JnCdfuN53zjfrZnu5lm+W/s56J+Vx/Cr7dtsvDPo
7+GHwO2vcu9j9CfwaeBqgmrDNN/Fa38T0PHKXd2feCHmcgp/FnomTLfcmkr7
FO2DvV97rj0q0LdrXaFQ/wF4EVDX9k9eUciN7ePVg/rQn7H6wVDVZMsj5bXy
u8h3/yxaF51n1RvVne6QyFjf4cWhp8EUyMKbTp84WG3/Hfo/UK5q7L3ofbBf
9yIxY3xXK3Ru0kLuP+de5QzcB+/aGRpv9UV15oT9v0Sj74IBsAvvEByEw5Z3
ml+J7keOxzbluNZP9cbusI205/Gcb94uvJ2wPdzdb28wTl90H+gFi/EC4hpA
pN0tOqe7ieuC7gwdrTZpnYtUJxVje/lW4P7d9A/XP9zV2BSrhVNC7n7QPfE/
OO1WcQ==
                  "]]}]}, {
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1: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
TVPczsZexO8auBbf+R8lpBHw
                  "]], 
                 Polygon[CompressedData["
1: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
P0v+uyTXcBbORM75DHrLO4M=
                  "]], 
                 Polygon[CompressedData["
1:eJwtlndYV2UUx6/w8+mH127TXC0rRwMUULRMRMRsOtDcKy1zBVqZmuZIpdQ0
zVHmSNNEtoggCLIEFExjFJiCiTlSrEQMzbT8nN7zx+d5vvd7zvve95533VZj
w0PDPCzLioCG8KNtWW+7LGsiTIAEx7Ie8bKsh8EfvsMrxFsEC2ExPItXQLs9
bstKgi54xzwtKxN9GP814v2hH6wjVgRL0C3pry20g5V4IXhF5K9CfwEVUC59
wRZivxKLRy9H/2KbMcnYgqCWscfgR8MFYmXkfY0+jfYm7gP5eHlQoO8/SSwH
2qBn4M2EWfI95P5Bf5vxN8FTPK/BXw1rYTpeBe2a4j8ArWA13lFiP+tYzxD3
xfeD6XgP4j0Ej0MWsVO2abOLWCLslvdq3WKI5VG7fAihfR1jWUFuPFyyzTu+
RW+Fb7QuhyAIvYTYUlgGf9P+OnjQxzDJxdsOI9AjYRyU0i6XnBzwJ3aJ9x9G
N6CNBcXER5G3hVgVejH6E4iAA3hzoT3aR+oEubIO8FaiV0E4lOO56MsTytDj
dV0lay2P2aaOUs+f0JPwYojFQhzMB1+8PGJ/MbZ6mIfXB68vPK3vnY3XGv0E
PAbZug42ojfAeqi2zZp8FT0VpsGX5Jy1zdqulO+Ek1Ci375V6g3bHLM/ZPw7
0VEQDTWM5yJcc5s5+EzWHgxFD4FBsjZod4v4TWjsZb5xOTlXea6DFbr+C8n7
wTbztRFvE2zWsYzGewPG6HxI3nCdyxE6v//Q1w23meexeHfInlUtc70DHQkb
HLMfZV8O1vHlQyd0ZwiABVp7f7QfdJA5JyeV/vfCITjDevEmpyvv+ZMls52c
bZLLczr+PPRcmAPHaRtHm1hoT+wgbSPlvEHfRTwdfY7Yeeig8Wh0BuwXZJ2Q
N4nYZJgCA+WbybsB12EPOYPwXofBsgfUi4Ij6N/gAnQi9go0oj8bzuMlkjME
rx59DW5BMp4fXiE6njFkQTZMwGtCu/vhXsggLw280HdCY3jLMTXtqPtD9snH
eONkPuBNXddS01L6LIEUtCXzLGcBzxVw2m2++x3H1Ooe9N3gwD7bnBNyXhTD
VcY5QGqHLnCb77mJV44eqlq+aRh6OIyBf/H+g4b0l0osGK+S5yqohgTb1F/m
4Xlix/Fi8ZJkP2qt6vW9Uuej6BIoho5ytuFdRl+EGuir8yZzU0afp6AaJjqm
blK/+7SmAXilsg5sc0b9f1ah2xJ/EtrJ2idnl23WYk+ZK3KKFNHyjS7yTsi6
1fqOxBsFoyEMWuKdJV4LV3StNcVrDs209tK2AdoTPHSOqsithEtuc4/IWELg
lNatF/oFx9RK5qYfuj+EQgptkqGbnDfEDrjNGnLTzzPgDeMdczYEortDL70j
5bzvge4JwXrmSJ1r6acOrkAfvAxYKOsO5sv5Rk4m3n7IggXqdWa//k5pvpLz
UM5QntOIp8I++Ej3bzf8y+RFyRko+wbvZcfMq8zvOd1HJXjFMneOuYfl3E3X
fk6gm9NPC7iIjpU4sR48B+udKXdnoJeJnSb2IvSGl/SskHUvd8Vk9PdyZ3ma
8zRDv6kJbVtDG9hFXRPAV/fxTtvsYdnLwTpX8XKvwizazoYPIYVYhGP+bw7a
5i6VO1W8rnjPQReX+feR+2OHrBOY4jL/SHNk7tG9YYCMk5ypeOEwTddcpm3W
n/wbyD9CC/UCdU3E2WYfy37urutY9miQ1Msx/1LL8JbCpy7zT/Mo3/w5OhJq
mKsAnpPIe4/ndyHMZe5k+d6Z6klsr2P+S9ag18Fal/mnkXt6BvoDeN9l/n3k
X2AROptYDuSCzXsaQTMvE5P/g92MOxF8dB+nodfL+Ux8IITCEfq6DRqcino=

                  "]]}]}, {
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1:eJw1l2eMVVUQx+/bfY/dy7vsoUrvva5AAAFpSlUEBKRIkQCyShcUCGCB0JEm
SAvRDyaG+AUhEBKEiCJEgkpEJQQTiRqKIL0sHX//zPjhZP5n7sw5c86ZdmuP
nTZwak4URTVSUZQLXRCiaH0mipomUVSHMRU8C14+uDK4LXguYya4LrxmjK7o
noqjaA78GfB3g+dCG8P/IjbdSszb8b0eeBb4XXBD8FLwcnAFxpV0FD3MRtF8
eB3R3QbdxHgGvBG6wW07zpql0K0OfwO4pfTh58lmcBr8Hvw60MrIVIOWZJQF
50MzjArgPOiDtMmkwFfB5cDXofcYAfwbtGzG+KWhp5jngX+FTmCPDPgONheB
T8NLs/8t5j/pLAXYjk5FZNpmzA7tpbvoxKidsjvNc3tKQR+jlwU/hOYwLwOO
oHfcnirgAkYpcAJtwZm7gX9n/1rMy4NrQLOMquAy0FaJ3eU2bPtI7wB/HfQg
OouhS+EHZFqBe4NbQmsi0w76GTIDoKPgN4fWg98aWugykj2GbTH4OHS4v/s+
8Gvo/gC9wz0MBT/hKF+mzXdaIvMOtCf8PfDOIzNH50mZf+yLTUZvXR/b5sH7
ABv2Mp+t9wU/lzEf6JqxdbX+buh05s1T5rt/+Hvp3V5k3hD8MrSPY/F2xbbv
Aegat20VdAt7bIWehj8Y3Bv8CbhRYj55VOeL7S7X8/1DxQf8ldCtrvs0so0T
W28NvBv4RoTMcPQ6uA+M1j0onsDdoV0Uf+Ae0Gb+jk0UM4zW4I+hL/kZ+0M3
su4Gj9kl0DYpe9c5sfnJsthsWA1vHbKX08a/CW0fLE6yfK/rNtTP2H5NZQvf
Y77VVByCE3BDcGdwI/fbBi4r3W2x6Qs3db7W6op8afexnv6OuqtDsdmueB8B
7c63FvJxnSW29ddDN8fmb9s99mVDp2A+qtjqBe7BGKb7SizPyE8W+r7y2T7B
7JNtT8Ern9gdD4RfVnEEHhCMr3cYBC4JrqZ4QW84874Z0x0DHqx4BjdhtEfm
R2ReDxYDsqEGY5zeCl5Hf1O9bTc/o85VKbH4GhkMyzdHB7szvftqZIa671Xg
+zC3oSK4XzAfKpNYHlQsyD938q63cbMd0OaJ5c5FweJIvq3YqgWeBH8m/J3M
p4Fngyd7XEzMWP4X/234UxkTFPPwjiHfBZmTsenK376BbsnYPWyWX/v6M4Ld
i/infV+t/ZZqBfOL2FgGXJiY3mbwWXgJ8pegfzsWr8h9+03FNbrPpyy+Lnj+
OQd9A/0FGYtl3b/iWvH9iueWodDDzDsrh0OXuHwDZI/EFrur4C3MWIwvgi4O
Fnv7+T7Pa5xq3wnmnVLGVy1bBn8l35cr7lNW2w66zC9eE5XHJijHJmb/GfjV
wCPhTw6GR4Engau7/0wBF7m/VUks/2ivFfA+j+29VHN154XgPbH5pOJ9bTA/
kD/0gF8vWP3L5fs1ctFBvp0rsPwvP1+LzH3453XvyL7K/Aj4OjIPsvZepYPF
nOraitj4equy8Mcwz4E/GfozvJKqTdDyiquM1WjVLeWfWci8EFs+HOF4L7L/
sFeHYPlIeSmdWN1uBG9abLaFYDlf55K/9/cYUywUZ61u5/gdjoXfF5xKrI4v
1J7gR8jUDCavep4LPgB95LEzJTa/Uk/ymHEDXqVgNUu1Zph8MFgtVL7qFZs9
smuHrzME3lFwvmIKvEBrqkbKtmB1/UnW+hfdZ8WM5Vjl1Gf5/oC7OIHMePRm
xtYbqLe5gs5d1u+rfOs9T+7/d6tcE2yvKqplseVJ5U/l0SJ/o9Gx3a3saRBM
T/pNHCv3Kgdnmf+lnog9cxLrlWp5n5NCZmRsfPUptYPdrfqXyP3nPnAA9F/O
8hX8q+id9XOpd5J/qHe6VGDvq55nvmKWcQ/dftDLfNvvut96rVdPIT/U2Zqx
16609R6Ks8vIFSPTJzY/l52jlKv4Vj9luT6TeH8UbM1DWp99SiTW67WAfz1r
/n8NfrH3iuoZ93tf8bX3OQ/YayD0sL+13vy294H30b2ZtV7odoHpSFf7jQ2W
mxTXKffJVLAYVD4rAM+OzfeK0T2Ttvv5M211Wb1eVWTGee3b7vemuL5SYH6r
On8X/J3fm85aMlhu1ZuOCNZPqKbI7u8Zt/yt5MMn02Z/LvuOje29FNfTYzuj
+r5HyOcFs+9u1u5NPqZ8oJ5Ha95AZqLnVuVb5f80MuOUq4Pdr2Lhfe9zlAcH
+d3K/yv7P8KjrNVl9STVvC6pto6BjtfaKYv5con1hm2C9bHy/02qdcFqiWrZ
kGC9oGrrp7H1t6rpJYL1jjqLYk156SL2F3oeU08lH1PveqHA3kj/AvonqBjs
X0J2jnHblN/zPY6UG/8DOfp7eA==
                  "]], 
                 Polygon[CompressedData["
1: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
vgWLdSt6DvAYPoifzIgzn58c09zF/wCJZn0G
                  "]], 
                 Polygon[CompressedData["
1:eJwtlnlQllUUh19QxNfvk09wBRcEDbUyUVsVcUlNQTBxSdxQQHFBUHDBRBu1
cMsFE1zGlplmqn9bzEmtbBmnzHDGMtMps819w1wRtec39/zxzHfu75577n3v
PefeLyG3OKso3PO8CoiA+ijPq2noeTcDnncf+wE8GQI6n4KBEBP0vCRYgT2T
vlkwG170PW8kXGPMQWJMwB4B6XAebQ/aFeLOxXc6Y/MhF9oTawo+k+Eififx
K8COQx9L/0swDgoY1xYtG3svPp/BELRnIR6tCX2VjNviOy0BrSN0AJ++SWhp
2OkwCtqgDUV7HLs79IZmaFWM3wpvwTDNj88Y7NGQD0eZ91/W2RrfEfRn0z8B
JsJoSEXrD0OgBT4tYbjNm2bx3iTOLmhlMcajzYFp2FNhErQLujkysEdCpvlp
X8bIT/6QC5O1//ZNU7Bz4B3ivw2x5q/9i8Lugd0TkmEwWhY+o+Am33SYb8vB
DuCXqDXofKCPjX1COYA9CJ638xiPloedr3OFYdDL9nK49hxWE7MC3vBdDM07
SjGwB8EAaI7/BcuTNPwmwiTYDJt8d1aKG8IvGvraPmu/M+m7Sm7tZ+yX8AVc
inJ+feifAjnaR/x2EGs7fOC7tSuHsuAF7KFam51bKloX7KZBlw9Vth6tq87q
5AZz3oFT2L/CCYhk3Dn6d2MP1RyQrVpAT4cMyLO8T8HuC/1sriDaFcYeYOy1
gKsJ1cYM+pfS/wj9e2nvg1t2Xv/hl0s7z3d7sA/tFzgOl/EZrjyGs7amywGX
k8rtMcQdC+PgNv3X6X+gb8K+G+X2oBt+XSHJ1rcIbSEshmK0xKBbj9Z1RGeM
toK+8JDbD+3Lz3CbuMn47qR/B32/43sKkrB9jcHeABuhBn6Ek77z34nPSliC
XQaLoDOxFtgaPsTvK/gaHtN5oU2ECbaWBmgR2JHQSPuIVgmbsTfBBuiGzzK0
cliu77M51mOv0R5gf0/8Q9AA7Q7fdBeO2bcVahx+r8Bkq99OUIq9EBbAUnxK
YS52IczWHYXPb8QcFMa+0N4OPdDuEvNv3TXwDwRs7Bz6E+jfzZhPfXefKp86
oH1E+2PojtYELQDREGF39krsV2EVVODTLORia46LcI85jzN+AGvZgk8lHKYd
j999+sMUg/YqCKKdRSvGLodlsATKYA20UB3h8z72e/AJlNge/ISdyhwVtF+D
A7T3KwZ2FaTQd9R35zuf9jwoslxLQKvTWrUetHC0Y/j2Z8zrtNfDQdprdW6w
zs6vC34n0Afit412te59tMigW2sP/JKhJ5zGbzB+5ei7oBc+bdAvqX5Uc1Yn
9+Eqdq3qFWLxyWRsBpyxOh6r+wt9o/JNv5ZrtwLuLbmH33TVuO/yRXtUplyH
l6E3NEeL0Z2q/MWno3Ja3x7hHm7tgc7oodYF9eChTSPmVCiEvyyHdG7nsc/B
GahjHQ/htu2p9ra97ntoCiE7Z/k9HXLvgd6FNtA46N6KTqop1Qs8h09X3We6
O6y2GwZdnSsflZeNTdO8t4gdR7utchifBay1FJZDQ6tV5bRy+3Pf/e9Q7sYz
vgB7FsxUflida0widifoHHL3ge6krdhVUB1ytaX9aKz1qVZC7h7/A+1POA2N
bI4Z9ibrbS5GewZSsPtBrO3BfLR5UGL1qZqutf9BtQF3BtPsHdB7cIO+7+i7
HnD3kHLi0aC782rsfTlE/w9wxP6PrbQ7aQ/938C3vrub1qGthdWW49FoF6yW
Y5Q74Ck3iBlmdazcKNLdAfX4XbHcVS20JE5raGX12xbioF3I/c/SfynlqnJW
NaE3Y7HvakFxWqK1gtYh9ybpbWpmayrB3gbVvvs/pv8s72L/D7P1QAI=
                  "]]}]}, {
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1:eJxFl3mwj1UYx98f/V7u6837iiRFyDKWweDad127i+vKvu9LrhZLYy2lmqZt
+tsSLVQk2kgxGKnRUJZUyhJRibJvqc93nmemP955vr/vec45zznn2X5VRxcV
TCsWBMG9mSAojhwWBcEL4OnImmkQ9AmDYGwcBEuyQdAZ/lhOEOQzNgi+AePL
nNf4ePT6w9eBn498Hj4P+SDfLHAh8gLz+4CXoj/O9eui/w6/832dt/kGgtcg
I8Yng0NkLb6HwSWQu11nJ7Ivv58G90MWx7ZdcJuTIDjHXj3hA7jG7DGU8Yns
2Skye/pGZofsWYGcENu56qV2Rq05XHPhVzK+nDULwA/BN4TvE5td5+C3MD4E
/susfbJhJfx9jFfmuwm+wJeC+zGvDPJR9Msib8CXRxbCV0IWZWzeEr+T85wj
xaamcEPRacq3lrGlzGsBPw9+OtxY5DjtB3e3r98isj2ExVUITV5jbjXGxsPX
jf4fuw7fl7US8CXwMHArcHnWnAx+Av0B6F/I2txLyMr8HgvuxfiP/B4uP0F+
wzcMvA/ZPrJzNUb+lrU3PZe1Mel8jzzINxi8H1kavUO6S2yoyN7tsGFEbLaV
Bv8N3xn8BzoHwF1is0G2XOX3XX6fr4NXo5MLPoEciU5JxpaDH8/YnZ0BDwX/
jvwpa+scQZaL7CzVtSa/x4AvZ+3MOvsNZFXmz9AdhuYburfzendsbus2j+Gb
j05v1hkF7gxfnfFq8seM+YfOJ50OyNHo9ELWQOcae0yF/xd50+/2etbW6YLO
/eiU5WvmvpF6vChuKoY2V++qd2yJLJfa3egt5GvlQjuL7jTX3ygP2QT9buDT
+N4hznOePSvC70vsHvNiix3FvnLAr+i9gXwtsbhVbL6PnMu6z4DnICcxZxSy
JTZMQi7K2Bn+ZE515QnGx3veWBxafCnWzzI+hr1ngPOYWwT/HDqT4dZ7/K7T
e4bmn7Pk7+i8Ap4d2fsrjnZkLZa7gk9i70z0Fmds3b9zLKbeZK9Jkdnbw/ea
De4KnhWbXYXgac53A49G/0XWeRhZL7T8UEe5Cp2XtT78Y+AndSb0cz0fKq4U
F3qXO+EbO6/xmei/Cp7LeGvNVy6K7Z3nKa6R3fnmZMyfFoV2J9rjIfQeQXZM
7Y7Ez0JOdb4TfEPPCfWRzeD7gW9yB0We/wch26I3hfEpjE9FPgs/TfP4Fuq8
2j8yO2fE5gN9wVeQS7jHrdxn69h8Sb6xAu6Ux+D2rMWF/Ly4fJh1jsK9576g
PN9VuZG1NsGvhT+eY3l4GTjLnCqM92eNAbHFX0m4epH5fBPkP+h1hB8ZWx7U
eYco/4cW+6uytqb85yKytt9nA+Sg2O6mFGv+kmN+Ln9P+N0IfnBsOtKNUqsH
evdWyMLI/Gok8hF0FqLTWn7iMT4ytFq5AFyAzmB/04GhzVWMNEW/RWxnX8M5
moM/Um1MrOYpvrZl7a31LuOZly+/AfcMrW7rLPKRYR4XI0LL4aoRzVl/gsfg
AmQx5j+Ysffa6Hn4M+QT/u46g/KX7B8cWZ9QpLyVWj3Q+lPly8zfzLwPsHO6
12XpdY0t3x+E/ws5Gv4sslpqviUfk46479CplVpdV+/R02uc1lfPoD6idmr5
RHeZC24Tm09tSgzrbj4FN/S6r1pfwfNhHfBJxoqFltu/dnv2ID9PrLdoG1sd
V02P0Wnj96W4uCc1v1KebJTa/aqvKMXvA8z5IrF8JL9SvyOsXPhWYrW7AP4a
/Mdwg9TbMG+DY3GXGfsAuVq1mPWfCi1+FafiV3m9U+3bCG4f2747ErNBZ6mA
3M7vvfDtYottxXhJnRf+MHxH1fbY3vnDxLDebj34DF+GffPh8r2fU4/R0u2/
qnyfWK+m2rrB4129VmWvazXBVTyHyGfKuo/J1/ajf9LriPKSckkHdCulFp+K
WfUA/VX72GtPYrW5U2znVY+wE66C11nlRvUDquGfwG9LrP/Q2bck9sZ601uJ
5Q3lB+Vw1YouqdVcxU0x8A+J9Tfd4LrHVvN/Tqzuqv7ewdwgtdqv/FPgb6Qc
WMb7NOWZ2HOFcsLFxHo+9X6Xvd9T33UbOjW89o31vNQlsryn3vUscmBs9aRE
av6hPPAua0xE7yV0HkWe5ncQeg/m9Vr250QWy3pr9cbygeusWdzfKIusBD8F
XDuynkb9gHpD8Vf4fcTzj3L7pRy7B+kd0x27L+ldksj6KPUJNTz/KKfKn3uA
zyC/dTvlVw/ElvP3wvWIrcf5zXtm9SG57kv6fTyxGt1dfVqO7S87jib2RrLz
MLhDbL3kV4nlz0L0b+WYLys/347c7bHfOzYfVL+knvRUYvfS221TD7susf8F
ys31uf+tHlOKo9Jes1ULtK/61V2M95SfgU+A/wNtL5jE
                  "]], 
                 Polygon[CompressedData["
1:eJwtmHm8V2Mex89PnZPf09E5qZAirdKK0r1tupW03ZZ7b+kq3fZFWqSNZB9m
htes/pYYUxONKCXDaDDGEs0whilLKpIlFCXVLZ+37/eP7+s8n+f7PN/zLN/1
aTl1QeX806IoqihEUV19D2ZR1CCJopnCLUMU9cmjqLdoYRpFN4ieFf/FOIqq
GS/+VaKxois1ZnBucy4QfZuZrHPUnqqx32rOh8I/FqOoUvh54T8JD5DM8cLv
Cr8p3Fcy5uj/v1DfBM19T31fxybjbOHTRVVqv66+fyBP1EzjzxWdk9haV+j7
+4KtmfWwl+80fqfGHtL/RwqvFX5EuJ7Gd9D4eerrqrHH1HemcCNRU+Sq7xrx
vtL4/4t3XNRc/bPU11q8SFSu9rPibxTv76Jtsa3vuczOiLN6VPjPwm+JPlJ7
gvqCeM1F09X+UH3/Fq+f1rNA8u9W3zXiXSF8vfBvhacKXyiao/anGv9OZmvu
Ikpy20t7ta8T/6D474pfKnyDcHvJqC/+Ke1/rK/38czulHNaonFLRV+KP0z8
9eL/RfxBua2Bf09zor0QuaLNGrM1tvt8Su0S/199/e9r4UKw/+0U/z/Cg9EV
UYlkTteYl9T3tnhjNKZW/35SeK/wHtF6tc/S2MnifSL8X+F5wvcK3625Vbnp
DLrznmi72r2D3WUn8VPXyWVq31EwXR0ufLPwL4WnCI8Rvkf4PuH5wg9JxiOx
2cM+redl4e3cjegVtU8Wba2s+dXMdJC75s5fUDuXjInivyX8Ymb3wX3l+sd3
mekwuvym+FtdP8bxr9hsCx1D1w6IdmRmM9gO97lL7cNFWxtrXCXcXfPnFkz/
T/p5TRF+Rfy/ZaaDr6r9Wmy62dDX973wx+i6cI3w++xBuI904SrhF4QfEG4i
/qSC3Ql3g86iu9z5Zr/vhcJt9P8DwrHw1cIbxV8j/LnWO1R4tfBK4RGp6ftJ
4f3CB8QfLrxJ+K/CT7t97BI9o3Y7yZstfh3J/0z4SfU/IVrHeNGj6tus79Oi
x9RuG8w2sdETwhe5PWDT2PYn+t9g4Yc1/sHM7hydQpfQhTZ+HifE/9TPhzPj
rI6p7wc//y1qb1Bf4vtFR9CVZtiI8FHhvcKVuekqOnudeKmfH3tkr+9ndhfc
CbozWuNHiRbpnBaLvuEfiekQtn/C/c95ohai77We0eJt4EzE2y2qjW39x3wP
tOnbx/4zO3vuoLn7H9a813lH3T9zXw9nZiOTRcNys50hat8sflv9u65whegu
tf+ovuXi7dGc1sKtROeLyrWH4aLP1f+F+yvssyDeV8Kf6X9DXJ+xPfZ+h3h/
KNgZdNP4Bfh+9R11/cKfvoHPcXtC3/fHFiuG+vpGa3w7yarhHIVLiQ/CpaJJ
7g/miNcT/yZ8p3B1MP6MxHwTPor4QhzoKV6vYGv4QXRpsLVtYV+xxYgzghF3
zN3C20RMiC3GFYP5d+Lbb4QnBrPRl2LzcdguOr/L72dwajaGDOZie93Yk+bf
KP4Vwj2EJwjfIzzG4/Xtwr8SniHcVbjK48lI4f7EcuHbhauEB9Anaq/+i0SX
iMY5n7g+nLsXdVZ/F9GlPmasx376qjX+loKNvVx4nvBt3EEw/cHXTlNfr9zW
ND1YnGatk4KtnT10ym1N/Js1dBQeKRqRm41iq/igJ0SNg/kmYg6xB53tlVp8
uUntgdiI5q3EzkWjyAGKZvPYPjazp2g+Dl83ghxFeLdokNqP4f9El0nGZMm6
VX0jguUM61weuQT+Z4vHi9LUbAbbwed1F64X7O6fcf9EDvBybD4f308fvgs/
wlhyCGIzMZPYucrjETbSLbWYDZ+c47j+39T9DfHvn5npH7q4zf09Z7U7Np/G
mf1L+B3XR/73nMcvcqo6wWIWcSwL5o+QQexIXbeJycRmYkSjYD57k8fvnqnN
3eb2gIznPX7iI7FdYh6xaYrnc7UeT5GxNjP/d6fO+9fqmxVMHypFZbnpLjaK
rT6k8efn5vPwfRs9BrRQX5nmL9GYvhp7JvoqvKJgesx5cxdbPHacyix/xEf0
ET/KrY8284k/bd3v4s9a5qbL6DR6vNb3Tww7or2cJn65+EuF+wWjy0WF3HgX
4kc9vyW/a5WbTGRhG41yW/Mwtz18WKWvH9/WVLin21u58Lm59dFGP89W+yzR
wGD+4VjR7pZ8bjWxQ7y+7j/IwxjbW3hZweYQsznLDR5nW5NDiX9XwfJxbBrb
HqW+tuI1wY4T89FlwWyOfyAbW8R2l3v8w4Y7BIvJxGLy9Vp91+g/14vfA3+k
8fPdf81LzT/UBMtByUWJochC5tDcdARdWSw80McscX84yePWUuHfCc8OFsPo
o32tqA1rTSxmENuG5CYLmQtSkz8zWFxCN6s8nt8v/tLUcgb6aC9LLWde7/ZU
klqNg3/a6jkYMZ24diN+CpvS3M6uL/hhYupQ4eW+njrovfufaZrXILc5/d13
k9N3EX9RwXL9INzV94O+FIVPz00H0UV8/Bi/b+Z3yO0uudOZqdUQ1BLj1K5O
zWfi69a5PiCro9sXMlf7fqkZDhbNJrHNVbHF0DWes1W7/XcMVo81Fu9IZrXi
DOE0sZqRPnhNEouznV3/iWHEsoaiixOzaeyEuDUysT2wF2Qg6wzRoczOhLNp
SK6UWU1AbcCZc47UTp1Fse+bM+FsuiV21tggtlaSmG3iE9h7y8R8BWeMbbIe
zh4bxBa75xY7Sjxek3OQW/ycgyRmw9htM7cfbLK5z+eu+yVm2+gAujA7MV3F
prFdxmPrxGBymYmJxeZBwWwRmcjGxxD7KxLzPRczJ7H4ShwnBhB7yF2JDVe6
/BrPf8p9/+MT2xNEm3j9c+4RzJfh0/AV6Bi6zPmiewX3x+hwHc8biO+LEnsz
gGhjc9jeeN//VOELsOXUbA2bq3Q95vyRiWxyAmq3WxPLFeb6edxE7pkb0cZf
4IsmpKYP6BC6NNnzD3zEMD8v9kOORq5W5vkMPmmA7xdfOCuxtwpqLmovYghx
Y5n7I3LiCs8/yDeoOfbKPq4OlvvN8fmV7k/5R5nHAWILbxjkSPgUfMsK7iFY
DXCt+O0Sqw3wYfiyRaLFwWo4ajnq7dfUrnB95s65+0Nuzw96ftPf7wsbwpZW
ev5CPtUjtTiEfmOD2GKN6xNvEvhk7oi7muaxkbx4PrmPcOPcfDq+nZqA2uBj
r3cOi47HVq/wbRXsPYUcm1jMeZJ7v+32jI9oId6XXkdgs1083mEL6DuxiBqU
tw7eIKhNeVPZ7nUZtQ5vCPs9/yDf3uf1EjUjcf514R1ej1H34UPwJdQslant
gbrrsmB7w0fhq9gze8dn4jvxk+g/byD1EquRWQ81FrUWNRG1UZbbWTH/kmBE
G5mHNS53f8GZcDa8IVDLUtPytoBPq+/7LfUcgtg5N7HcAn1gT+yFWpYaep/X
yeQ2nA25IzkkZ/SGcN3Ean7ya97Mdrif5i2NNxDeQnjDqB/sjemb2OrT9n6H
nGWt3y1vFrxdsN7zPJayPmo8YiqyeevgfvkH+Sxvhrx7fJRZvsD7xo8a84H3
HfH1MhYd3+n5coNgOoIsZP4vszeyYmI2g+1Qh56KTWanYLpEXyePA9Sk6Bi6
Ra36E4JOfZ0=
                  "]], 
                 Polygon[CompressedData["
1:eJwtlmlUVlUUhi8YJh9XLormkDiFmuSUDAqooQyKIijOOCCaaIpihppZ2eDq
V6tp9bfRLGtpow3aZKZm5YCkpuXQIIKIM2JmSs+7zv7xLN77nn3Od/a5Z+9L
tznlhUvCPc9bCxGwNOR5z4Xxt7nnlcNMnqfBfPQaeJaxcp7fDjzvfSak+J53
PdLz/oVl+M8zvoK45TCX51CM592LHgD9YBrxRTAQ7TPWEqIVQ+wASA+5sQCv
Av0C6z3K82p4gOe+0AeSoCteBHHFrDcM3R7dATpCFNyN1xv62+8Ox8uAEbAM
rwxvkUB3xesG3WEp3uN42ZAFqXgz8FLQrdCtIRZy4RG8VbASlhCTxr5SYbrF
xxCziOeFsBLW4hXirUC/SG5P8vwELCP+fhiPnqAY6ElcDyhA50MezCEmi7mZ
MB5m4CXaGdyHHg4Z0AXvLhiDHg05UELMed7TOdjE+9vK+7uBXu67fY1XPqy5
Gh6Dl9lfKf4zyo+YSMb7ovtAAky18ytT7rAYhhGTBnO1V5it90ZMb70PSIBJ
ePPw+mk96A/T8ObjtdV83Tv0Heh2kKg7AW1sLAO9wHe5D9DdgYHQB6bjFWlv
tl4T+d2C3eR7hHyjmTsbfwTjdxLfCeJgF+M74Qc4RFwGMReZdwE85mzDe4Wx
Op7PwKt2/y+ha6EG3sBbj5ekdwEH0L9AFXzP2A5bO4r12kOHkKsb1c86xnYz
1gzvY/QX6C3wNaSz1pd4p9E1WguG4l1lXgNsZOwzvMF476I3oweh/2PsJtTD
WdhgY43KC92TM+gFt8M44i/hXYTLEOg+4GXCceachBNwgLEhvjuPT9Bh7Dcc
rtqcQt/Vseq5AB2OV629Qw1M1HvFa0Rfg38C926q7KyOwnBi/tYY+jo0wRi8
qaw5Bcp0P60udddK0BP1XqEEkvGSIMXGdP9Uv4M0BwZbXaYoFrJD7j7ctP21
Q8dBJ7gRuH6ViE6GJOtNQ5kzBGZZ71G9xcMC/R6MtHpT/Y5VL0QXED/O7nGS
rZdud70z3jz0Qt/lqFy7QGcYi+cxVsVeRhKXA6PgYes5mdbPFqNL1avhHquz
UrxCnieEXH2ozvK1byi2OpqJVwyzrJfk2trlvutbi2y9KXiTddZWv+qTeg95
yhHyY1x+yrMo5Pqq+oH2V4F+CB60vruK8ZfoL0/z/BRU4P1oNar3/xP6Z6iE
3/B+hz8hi7FDeGfRI313PjqnYei9ePthH3wTuBqsRG9DfwfbVbPW91J91xfU
HzbjfWV19qlqSfUHn8MW+60c+91z6HqoM2+regZ6F2y3upwArcgpFlrDlcDV
R1t0G4i22jqPF4UOQXOrwQ/w/rA8P0R/BIfhEt5FOA+jfFfXqu8WIZej+otq
9Rh6L3of7A9cDTbTdxJugz2qK+Zdi3R9RnmnEZMPYYy31HfZ7lqItSNVG7au
aj8bXY0+A7WqWetrv6IPw0HrneoJ6g2Vlk8suq3uPsSHXF/QXib57jt+C90E
nr5bjHfXnQu5XqEanExcPHoU5CoX4qrJ4RS8xvg6fiORmDetB5+2HJVrsvoi
3g7YCesD945i7Oz1DhqUQ+ByUm4X7Jz1TR5n31B9S3vxu8fUuxiPY3+9IQFy
ibuCdxUadF+JCSc2DJpZD9C3W+d3ivEWPEfCQeJimB9AR7hsc/Ub6n3qgY0w
2ndn0MP+p9H/NucC9y3LRG8g5p0I18NOwHE4afvUXJ3Be+hNsBHeCtye9XtH
0EdVZ/C6neVf9m3RN6YW7xZeHvF1qofA3Rf1pFp7rg9cDe6xWlBNfIv3P95I
TZ8=
                  "]], 
                 Polygon[{{4102, 4101, 3157, 1569, 1579, 3159}}]}]}, {
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1: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

                  "]], 
                 Polygon[CompressedData["
1:eJxFmHlwltUVxt8X4X3hfl/1YtVWnXbGOm2nddppp2Onm522U6e1U9vRaV3r
giK1bthdq4JUWxEV2XdCSAgkBAiBBAIECIEIgbAHAoQdZJGiIAIVivT5eU6n
f5z57nPP/e57l3Oec8697qG+tz/VJUmS29Ik6arfHSFJWtQu5EnSEJNksXC9
8JksSSqFP5CckswrJsl8yWm1f6Wx7Rrzb43dIlmu9nmNnyFdVkiSbpIo6Vmw
OZjrrGS62rM0fqbG7xYeI/yO8FHJv9Q+Lsl7Jsnjmn+fxjToe8fU91PhVcL7
NO6s8N3CW4Q/FB4pvENzdUpGq71MfbOkOyQ8MdqaWfvlWssnC/aNn+n/61L7
9gDJaLVf1/g7pTsofEDyntq/0LiRapdJP0T6e9Q3VHMNkUxWu0wyRLJVug7J
ULWXaPw8jd8lPEy4q/bzsObpLemmdg+tYWNqfeguaPxW4QeFuwiXCVcJT9T/
H9D/Dwm3CV8rfbPwAsmX1b5Bsoh74RvMLZmv9jOSOv23XvKs2u/r/xv0//uk
/0j4iPBa4euE1wjvFH5L+FPCy6KNYez9kkTrmSx9pfQjNN990s30+1sk/Dfh
gZmdHWf4onSt6rsmt/WuVnuY+iZLN1hj7oq2J/Y2QTJOcnc0HWNe0tjx3j+K
OSX3Sl+p3yrJXMkejVmpsZ/R/G9Jt0JyVW7rb1F7tPTl0o/V2PvddvtItzc1
Oxgi/aTU5uc7D0Yby3+el3699EvU/qz+0yZd72hrZc2TJXXS10q/Se03pXtY
Uq52meQhxkpfIX2FcB/h30nWqt0m+a3avSST1B6vMcM1tntPs3lsfYGkQX1z
pdvPGI1tF24WPi08VXhQsP8yxyPCc4RrUvsG38InNwvflpuvlvh6Vkg/UHiE
3wfrfYzxkjs19i7JOfdHfONLwpuEV0k+p/YK9XVw9tHOhjNah+0Kv6a5BmXm
L23qWyzdMeEp0q2XfFH9X5CsVbsvc0rXKvl9NB+GS+AUfLtFeFFq/jxYeJpw
dWr3/xS2IzzBz/dx7l94ofB67FB4r+Rbmuvbkv1qvyBpkG6BpL9/D+74rvR7
hAvyxyAp6A6KkvHST5G+UeNflP5t4dXCt2v8TuEa55cW6V/y82b9N0rfKbw5
2l7Zc7vaXTT3NunvEN4hvE3yc7VvlWxXe67bU63m+4PwBj/v6yUb1f6HpEm6
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
1cC1Hk9Z338Byld6Tg==
                  "]], 
                 Polygon[CompressedData["
1:eJw1lnlQV1UYhq+lmD9u9SMdNSvLlpn2fd+zfZvKxl1LzX2vZirLXQQVAcUF
hRSDFEQQoRQBTU1l0VwQ9xXJyg0XUlRQ7HnnfP3xzLz3/b5z7rnnfOec26rH
kDaDr/E8LxwaQGbQ8y6FeF6873mbAp63GZai+zb0vEfgYThLThV8iP4A3oPF
5AzHW0XbNLWBZTAd7zBeProQiuArvGy8JZABY2kbjbcDPRldQM4KiMXbhlcG
eyCaWBL+XJhAbIP6QA9EL0CPJj4IPRiGwhD40vqNIpaIrkD/CcdgCl4MHEAf
goMwjZwE+pwN8yEf7we8JeS14zs7QHuoxrs+lDb1PK8Tzx2hhvxw37X5jvgw
+B6m453Em4OeC0lwBN6kzRvQGjJ8l1dJ3mk4BeHkVNPnJ8T7wX7e5fPOw/jl
+hZ4BT+ddtPgOG3m4aXAzxBF20nQS8/EZqETybuBNo/DE7CC2CS8LTbPmu8o
vAl4RegSKIaJQfeOE+gLUA2T8GbjeVp/dJbmCWZo3aG/rcso363XOvR62Kj+
8GYqF+KtRmLxMmmXAbmw39ajDL0NKuBB3rUUr7d900itK/6PVmtaW61xufXX
x+pE7+uL7mdjrkc/DSEEfgm6elPdxdk86ts0l0fRU/GSbV5noWvwzsF51S9e
J4hFj7Pv1vePVp94K2EtRNBuLP4YaE8sWjWCl4oOMoYw7Su8GXg55GTDmoCr
G9XBQkiDdNufM612NUdT8KZCHIzDy8XLg+XwDV4M7EPvhd22j7S+hejxxCIg
UrWqGtTeV//QBS+VMSyASMtXHXymedC+0BoSiw+4/bsLbydst/3Wwb5zFPGp
mlt9P97v/8+Hxgv56MF8f6Mwz2tGfTcPdeuZaPOo/EXoneiPyMsi/xzP5+EA
3jN4adpjPFcG3Bl2lTZ1cNHm6mu8rehSyLQzZz9eG9p+Co/BAt/NwTTiiyEL
upKzlz73QAqxe8nbZXVQS/wKXNb48MbgpaMHBN0ZpbNqA5RAKQRou1I1Cq+h
X4WXbf+uwWuGbgpNYI7v8rS/F6FP0/5MwJ0br+OdQNfCZdvTN+I1hptgvvZd
0NWn6vSM1VUS3Eb8dmgJRdpD9k1b0aU6b827D+8BuN++V2fEZvqpgn91Tmu9
tSYwj9gd5BXjTdTZDN00B9q/Vh+qk854OTqj0N0tPtx3Z22C3TW6c3bDrTY+
jVl6HXo9FKoe4Ba8FtAc5pKzNui+XXNws3n78J5CPwmP2vrqHG+L3k1sj9YW
NsHdeMn6RvSWoDu7khlfCqTa3fKTfWeJzhTYCON15kNHOwOGkbOV5y3wh/V7
AP03+i/4x9Yvw/prhb4L7rT5S/BdnSxD58JyqISTcAret7u2se4B7oMBPPeH
XN/dPQV25qywe2sh3vM2B5qLQ3i12sPortAZslU/9HeI/rrx/Dl4PF8HDaFJ
qNufAfZnJrlvo9+Fd1SHQbcPtR8bkdfH/g+0D7UfLwTcfOu+rLLxn8W7AnVw
GMrhFLxl/ek/Yg3jXw2/6Yzy3XsVP0rsGByHkTACRgXdf4fy8tF5UGDnQqrv
/l80rvqMvwGEQFPGWsH3DsIfCHm+W6+Wtj/usXrQ+fIc+ll42vqbDw+h43Q3
hLj7aDXjXwXFAXcf6k5Rnu6rMvR22GHr8QLeS/AiHMQLYyzljKU3z710J4W6
c3yZ/SPpX+lb8uox7p7Ev4Duegc5Lcg9QtuPeR6q+9x369sFnYO+lnh9uIR3
EWospjWPZKwR0M7O8xj0VXQdeLyrh70jGn8yzAm4862tjUXxX31XI6qVODvn
e+ruJG8Esf8AmvSeJg==
                  "]], 
                 
                 Polygon[{{4286, 4285, 3226, 1803, 1813, 
                  3228}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0M0uA1EYgOFvpq2ZqdqwrI2kNgQ7liyVlrY7WxfQxl/8/1wCCTciXIUb
YVWJPZ4hmXfeNzlzvpwzc/ujwTCJiD18iHW+TyMesKmfuc+NPGISPV3nArs6
5ww7usZVdHWFU3R0kpcfRmzTTxaxxd/c5jfzN/iVX7Cmn/gRy/qIDzGv+9zD
rF4p1zGjp7iBuv5yh/I+B+an5X6u8DGfoKpP+Qw1fc4XmNCXfAVPXHvdZH/H
jlu+Q6ELQ6d5gRfR1B3uoqWHPMKSHjvIJ1b1e/L/f38B1Wsfog==
                "]]}, {
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0MkuA1AUgOGjNt00iKmlFl6DhHdoqZoS09KwYlkJC5a61OqkplfwIqw0
8RQSNr6bLv78f25uzj25iwdnpdORiNjEZybijmujEZe4111+5LdsxCt6+oWf
0dVP3EdH99IZ2rqTjJZu8UNCN7nJDW7wu/l17qd3cKuv+SrtoPd5Dxd6lVdw
ohe4iCP9Z+9fbOtvLnHO/DKP8RqP8wTW9SRPoaKneQYbepbzqOoCz2WH/zLP
RWzpH/MPOe/tAo71Ei/jXO/wLmr6y90BbvRHZvi//9jcK/I=
                "]]}, {
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0Mkug1EcxuG/VIxXYUfCVo0x1IqExK5ba+ONCNfQUtWKoS02rFoWJLVk
SSIx1dQb8CQWvzzv4ss5J1/P0triaktEpFVLRDxyuTViRW/2Jpuc6YxI6dee
5pR+7ElO6Nse55i+7FGO6NMe5pAadpIfHOQ7c85/4ja39GBvcF139gLndW0P
sF+Xdje7VLFfvftFRbvODPMdEVkWuMMiD7RrH/JIOfuYJ9qzSywrb1d4qn37
jOcq2M/OL7PN3e26sHvZpyt7lnOq2ze+vdW9XU38/98/eTE3Qw==
                "]]}, {
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0EsuA1AYQOFf0kpMmCE60SFDJkSLqgbxLhOaVGIBbEBYRTfCiKSbUIq0
HototfVIfI3ByTk3N/nvI316XjwbiIgj3CQiZiyOkxElLOgLXuWPoYh35PUb
v2JFN7mBnH7hZyzrJ65jST/yAxZ1jbN8zxmumD/LV3yJaX3CZaR1ljMY1yme
wIjuuWsXg/2zuI5fb6hyiwvmt3mNP3mdN9DRm7yFrt7mHfT0Lu/hS+9zEd/6
gA/xo2vmJ53Z4jaG9ag7jfXRczyPSX1r/w5T+jrx/79/g6cwpg==
                "]]}, {
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0Esuw1EUgPHTxF/ULpCwEaWtx8CAGBGDRid9oKJFJAy9HwtgRGIVklpI
1aP1XoJfY/Dl+25u7snJHVopz5VSEbGImyRi32G8PyKDQ13gK94djNjBpd7m
Bi50nbdwrje5hjO9wes41WtcxYmu8DGX+Yj3zD/gIq+ioXOcRVWP8SiKOs0D
WNZvdn3Fgn7kJmb1PWe4lY6Y4DZP8jO/INt7yx3kdJffkdcf/Ikp/cXfmNY/
/IsZ/WD+PD9xG0u6z05Jb389zCOo6Fv3d6jr6+T/f/8AU3sxzw==
                "]]}, {
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0DsvQ3Ecx+GfpU3QKuJSmzdAwhuRmqw2S72DBlG3MlRSd0YGiRrZGDWV
uIzul5mEN+A5MXzyfM8Z/vmfMzg5XSi2RMSEKqmIOw9D6YhhPdhj/ORAW0Re
H3Y/+/Ru97JHb3Y3u/RqdzKnF7uDWT3bGT6xnY+ccv49x1lQwx7liC6Tc5jT
uf3rfj86tW95oyO7zhMd2DXWWGqN2OAMNznLOW3Z8yxr217gonbsJS5r115h
RXv2Kte0bx87/5BNXqtuf/FbZ8l3uWtGF3bVu3VdJeel/v/vH3+LMrI=
                "]]}, {
               
               Line[{2, 487, 11, 500, 501, 20, 526, 527, 29, 560, 561, 38, 
                594, 595, 47, 628, 629, 56, 662, 663, 65, 694, 74}], 
               
               Line[{1905, 485, 1922, 3268, 2845, 3269, 1940, 3291, 2853, 
                3290, 1958, 3317, 2861, 3318, 1975, 3343, 2870, 3342, 1990, 
                3366, 2879, 3367, 2007, 3396, 2890, 3395, 2026, 3421, 2024, 
                2046}], 
               
               Line[{1907, 486, 1923, 504, 3271, 1941, 3294, 2854, 3295, 1959,
                 3321, 2864, 3320, 1976, 3345, 2873, 3346, 1991, 3371, 2882, 
                3370, 2008, 3398, 2893, 3399, 2027, 3423, 2028, 2047}], 
               
               Line[{1909, 2843, 3264, 1925, 2848, 3274, 3275, 1943, 3302, 
                2856, 3300, 1961, 3328, 2866, 3326, 1978, 608, 3351, 1993, 
                3376, 2885, 3379, 2010, 3406, 2896, 3404, 2030, 3429, 2034, 
                2049}], 
               
               Line[{1912, 2844, 3266, 1928, 2850, 3284, 3286, 1946, 3313, 
                2859, 3311, 1964, 3334, 2868, 3339, 1980, 2877, 3360, 3362, 
                1996, 3391, 2888, 3386, 2012, 3413, 2898, 3418, 2032, 3435, 
                2040, 2051}], 
               
               Line[{1914, 1921, 3270, 1930, 1939, 3292, 3293, 1949, 3288, 
                2862, 3319, 1967, 3315, 2871, 3344, 1982, 3341, 2881, 3369, 
                1998, 3364, 2891, 3397, 2015, 3422, 2900, 3394, 2036, 3420, 
                2907, 2053}], 
               
               Line[{1916, 1926, 3273, 1933, 3299, 2855, 3298, 1952, 3325, 
                2865, 3324, 1969, 3348, 2874, 3350, 1985, 3375, 2883, 3374, 
                2001, 3401, 2894, 3403, 2018, 3425, 2901, 3427, 2038, 3440, 
                2909, 2056}], 
               
               Line[{1918, 1931, 3278, 1935, 1950, 3305, 3307, 1954, 578, 
                3331, 1971, 3356, 2876, 3355, 1987, 1999, 3381, 3383, 2003, 
                3411, 2897, 3410, 2021, 3431, 2903, 3433, 2042, 3442, 2910, 
                2058}], 
               
               Line[{1920, 3261, 2852, 1938, 1955, 3279, 3281, 1957, 3308, 
                2869, 3337, 1974, 620, 3332, 1989, 3357, 2889, 3389, 2006, 
                688, 3390, 2023, 3417, 2905, 3438, 2045, 3444, 2912, 2060}], 
               
               Line[{2048, 2033, 3428, 2029, 2013, 3407, 3405, 2009, 3378, 
                3377, 2884, 1992, 609, 3352, 1977, 1965, 3329, 3327, 1960, 
                1947, 3303, 3301, 1942, 511, 3276, 1924, 1906, 3263, 1908}], 
               
               Line[{2050, 2039, 3434, 2031, 2019, 3414, 3412, 2011, 3385, 
                3384, 2887, 1995, 3361, 2878, 3358, 1979, 3338, 2867, 3333, 
                1963, 3310, 3309, 2858, 1945, 3285, 2851, 3282, 1927, 1910, 
                3265, 1911}], 
               
               Line[{2052, 2906, 3419, 2035, 3393, 3392, 2025, 2014, 2892, 
                3365, 3363, 1997, 3368, 2880, 3340, 1981, 2872, 3316, 3314, 
                1966, 2863, 3289, 3287, 1948, 529, 3267, 1929, 2846, 3262, 
                1913}], 
               
               Line[{2055, 2908, 3439, 2037, 2902, 3426, 3424, 2017, 2895, 
                3402, 3400, 2000, 3373, 3372, 1994, 1984, 2875, 3349, 3347, 
                1968, 3323, 3322, 1962, 1951, 3297, 3296, 1944, 1932, 2847, 
                3272, 1915}], 
               
               Line[{2057, 3441, 2054, 2041, 2904, 3432, 3430, 2020, 3409, 
                3408, 2016, 2002, 3382, 2886, 3380, 1986, 3354, 3353, 1983, 
                1970, 579, 3330, 1953, 3306, 2857, 3304, 1934, 2849, 3277, 
                1917}], 
               
               Line[{2059, 2911, 3443, 2044, 3437, 3436, 2043, 2022, 2899, 
                3416, 3415, 2005, 3388, 3387, 2004, 1988, 621, 3359, 1973, 
                3336, 3335, 1972, 1956, 3280, 2860, 3312, 1937, 3283, 1936, 
                1919}], 
               
               Line[{83, 725, 92, 738, 739, 101, 764, 765, 110, 798, 799, 119,
                 832, 833, 128, 866, 867, 137, 900, 901, 146, 932, 155}], 
               
               Line[{2061, 723, 2078, 3452, 2915, 3453, 2096, 3475, 2923, 
                3474, 2114, 3501, 2931, 3502, 2131, 3527, 2940, 3526, 2146, 
                3550, 2949, 3551, 2163, 3580, 2960, 3579, 2182, 3605, 2180, 
                2202}], 
               
               Line[{2063, 724, 2079, 742, 3455, 2097, 3478, 2924, 3479, 2115,
                 3505, 2934, 3504, 2132, 3529, 2943, 3530, 2147, 3555, 2952, 
                3554, 2164, 3582, 2963, 3583, 2183, 3607, 2184, 2203}], 
               
               Line[{2065, 2913, 3448, 2081, 2918, 3458, 3459, 2099, 3486, 
                2926, 3484, 2117, 3512, 2936, 3510, 2134, 846, 3535, 2149, 
                3560, 2955, 3563, 2166, 3590, 2966, 3588, 2186, 3613, 2190, 
                2205}], 
               
               Line[{2068, 2914, 3450, 2084, 2920, 3468, 3470, 2102, 3497, 
                2929, 3495, 2120, 3518, 2938, 3523, 2136, 2947, 3544, 3546, 
                2152, 3575, 2958, 3570, 2168, 3597, 2968, 3602, 2188, 3619, 
                2196, 2207}], 
               
               Line[{2070, 2077, 3454, 2086, 2095, 3476, 3477, 2105, 3472, 
                2932, 3503, 2123, 3499, 2941, 3528, 2138, 3525, 2951, 3553, 
                2154, 3548, 2961, 3581, 2171, 3606, 2970, 3578, 2192, 3604, 
                2977, 2209}], 
               
               Line[{2072, 2082, 3457, 2089, 3483, 2925, 3482, 2108, 3509, 
                2935, 3508, 2125, 3532, 2944, 3534, 2141, 3559, 2953, 3558, 
                2157, 3585, 2964, 3587, 2174, 3609, 2971, 3611, 2194, 3624, 
                2979, 2212}], 
               
               Line[{2074, 2087, 3462, 2091, 2106, 3489, 3491, 2110, 816, 
                3515, 2127, 3540, 2946, 3539, 2143, 2155, 3565, 3567, 2159, 
                3595, 2967, 3594, 2177, 3615, 2973, 3617, 2198, 3626, 2980, 
                2214}], 
               
               Line[{2076, 3445, 2922, 2094, 2111, 3463, 3465, 2113, 3492, 
                2939, 3521, 2130, 858, 3516, 2145, 3541, 2959, 3573, 2162, 
                926, 3574, 2179, 3601, 2975, 3622, 2201, 3628, 2982, 2216}], 
               
               Line[{2204, 2189, 3612, 2185, 2169, 3591, 3589, 2165, 3562, 
                3561, 2954, 2148, 847, 3536, 2133, 2121, 3513, 3511, 2116, 
                2103, 3487, 3485, 2098, 749, 3460, 2080, 2062, 3447, 2064}], 
               
               Line[{2206, 2195, 3618, 2187, 2175, 3598, 3596, 2167, 3569, 
                3568, 2957, 2151, 3545, 2948, 3542, 2135, 3522, 2937, 3517, 
                2119, 3494, 3493, 2928, 2101, 3469, 2921, 3466, 2083, 2066, 
                3449, 2067}], 
               
               Line[{2208, 2976, 3603, 2191, 3577, 3576, 2181, 2170, 2962, 
                3549, 3547, 2153, 3552, 2950, 3524, 2137, 2942, 3500, 3498, 
                2122, 2933, 3473, 3471, 2104, 767, 3451, 2085, 2916, 3446, 
                2069}], 
               
               Line[{2211, 2978, 3623, 2193, 2972, 3610, 3608, 2173, 2965, 
                3586, 3584, 2156, 3557, 3556, 2150, 2140, 2945, 3533, 3531, 
                2124, 3507, 3506, 2118, 2107, 3481, 3480, 2100, 2088, 2917, 
                3456, 2071}], 
               
               Line[{2213, 3625, 2210, 2197, 2974, 3616, 3614, 2176, 3593, 
                3592, 2172, 2158, 3566, 2956, 3564, 2142, 3538, 3537, 2139, 
                2126, 817, 3514, 2109, 3490, 2927, 3488, 2090, 2919, 3461, 
                2073}], 
               
               Line[{2215, 2981, 3627, 2200, 3621, 3620, 2199, 2178, 2969, 
                3600, 3599, 2161, 3572, 3571, 2160, 2144, 859, 3543, 2129, 
                3520, 3519, 2128, 2112, 3464, 2930, 3496, 2093, 3467, 2092, 
                2075}], 
               
               Line[{164, 963, 173, 976, 977, 182, 1002, 1003, 191, 1036, 
                1037, 200, 1070, 1071, 209, 1104, 1105, 218, 1138, 1139, 227, 
                1170, 236}], 
               
               Line[{2217, 961, 2234, 3636, 2985, 3637, 2252, 3659, 2993, 
                3658, 2270, 3685, 3001, 3686, 2287, 3711, 3010, 3710, 2302, 
                3734, 3019, 3735, 2319, 3764, 3030, 3763, 2338, 3789, 2336, 
                2358}], 
               
               Line[{2219, 962, 2235, 980, 3639, 2253, 3662, 2994, 3663, 2271,
                 3689, 3004, 3688, 2288, 3713, 3013, 3714, 2303, 3739, 3022, 
                3738, 2320, 3766, 3033, 3767, 2339, 3791, 2340, 2359}], 
               
               Line[{2221, 2983, 3632, 2237, 2988, 3642, 3643, 2255, 3670, 
                2996, 3668, 2273, 3696, 3006, 3694, 2290, 1084, 3719, 2305, 
                3744, 3025, 3747, 2322, 3774, 3036, 3772, 2342, 3797, 2346, 
                2361}], 
               
               Line[{2224, 2984, 3634, 2240, 2990, 3652, 3654, 2258, 3681, 
                2999, 3679, 2276, 3702, 3008, 3707, 2292, 3017, 3728, 3730, 
                2308, 3759, 3028, 3754, 2324, 3781, 3038, 3786, 2344, 3803, 
                2352, 2363}], 
               
               Line[{2226, 2233, 3638, 2242, 2251, 3660, 3661, 2261, 3656, 
                3002, 3687, 2279, 3683, 3011, 3712, 2294, 3709, 3021, 3737, 
                2310, 3732, 3031, 3765, 2327, 3790, 3040, 3762, 2348, 3788, 
                3047, 2365}], 
               
               Line[{2228, 2238, 3641, 2245, 3667, 2995, 3666, 2264, 3693, 
                3005, 3692, 2281, 3716, 3014, 3718, 2297, 3743, 3023, 3742, 
                2313, 3769, 3034, 3771, 2330, 3793, 3041, 3795, 2350, 3808, 
                3049, 2368}], 
               
               Line[{2230, 2243, 3646, 2247, 2262, 3673, 3675, 2266, 1054, 
                3699, 2283, 3724, 3016, 3723, 2299, 2311, 3749, 3751, 2315, 
                3779, 3037, 3778, 2333, 3799, 3043, 3801, 2354, 3810, 3050, 
                2370}], 
               
               Line[{2232, 3629, 2992, 2250, 2267, 3647, 3649, 2269, 3676, 
                3009, 3705, 2286, 1096, 3700, 2301, 3725, 3029, 3757, 2318, 
                1164, 3758, 2335, 3785, 3045, 3806, 2357, 3812, 3052, 2372}], 
               
               Line[{2360, 2345, 3796, 2341, 2325, 3775, 3773, 2321, 3746, 
                3745, 3024, 2304, 1085, 3720, 2289, 2277, 3697, 3695, 2272, 
                2259, 3671, 3669, 2254, 987, 3644, 2236, 2218, 3631, 2220}], 
               
               Line[{2362, 2351, 3802, 2343, 2331, 3782, 3780, 2323, 3753, 
                3752, 3027, 2307, 3729, 3018, 3726, 2291, 3706, 3007, 3701, 
                2275, 3678, 3677, 2998, 2257, 3653, 2991, 3650, 2239, 2222, 
                3633, 2223}], 
               
               Line[{2364, 3046, 3787, 2347, 3761, 3760, 2337, 2326, 3032, 
                3733, 3731, 2309, 3736, 3020, 3708, 2293, 3012, 3684, 3682, 
                2278, 3003, 3657, 3655, 2260, 1005, 3635, 2241, 2986, 3630, 
                2225}], 
               
               Line[{2367, 3048, 3807, 2349, 3042, 3794, 3792, 2329, 3035, 
                3770, 3768, 2312, 3741, 3740, 2306, 2296, 3015, 3717, 3715, 
                2280, 3691, 3690, 2274, 2263, 3665, 3664, 2256, 2244, 2987, 
                3640, 2227}], 
               
               Line[{2369, 3809, 2366, 2353, 3044, 3800, 3798, 2332, 3777, 
                3776, 2328, 2314, 3750, 3026, 3748, 2298, 3722, 3721, 2295, 
                2282, 1055, 3698, 2265, 3674, 2997, 3672, 2246, 2989, 3645, 
                2229}], 
               
               Line[{2371, 3051, 3811, 2356, 3805, 3804, 2355, 2334, 3039, 
                3784, 3783, 2317, 3756, 3755, 2316, 2300, 1097, 3727, 2285, 
                3704, 3703, 2284, 2268, 3648, 3000, 3680, 2249, 3651, 2248, 
                2231}], 
               
               Line[{245, 1201, 254, 1214, 1215, 263, 1240, 1241, 272, 1274, 
                1275, 281, 1308, 1309, 290, 1342, 1343, 299, 1376, 1377, 308, 
                1408, 317}], 
               
               Line[{2373, 1199, 2390, 3820, 3055, 3821, 2408, 3843, 3063, 
                3842, 2426, 3869, 3071, 3870, 2443, 3895, 3080, 3894, 2458, 
                3918, 3089, 3919, 2475, 3948, 3100, 3947, 2494, 3973, 2492, 
                2514}], 
               
               Line[{2375, 1200, 2391, 1218, 3823, 2409, 3846, 3064, 3847, 
                2427, 3873, 3074, 3872, 2444, 3897, 3083, 3898, 2459, 3923, 
                3092, 3922, 2476, 3950, 3103, 3951, 2495, 3975, 2496, 2515}], 
               Line[{2377, 3053, 3816, 2393, 3058, 3826, 3827, 2411, 3854, 
                3066, 3852, 2429, 3880, 3076, 3878, 2446, 1322, 3903, 2461, 
                3928, 3095, 3931, 2478, 3958, 3106, 3956, 2498, 3981, 2502, 
                2517}], 
               
               Line[{2380, 3054, 3818, 2396, 3060, 3836, 3838, 2414, 3865, 
                3069, 3863, 2432, 3886, 3078, 3891, 2448, 3087, 3912, 3914, 
                2464, 3943, 3098, 3938, 2480, 3965, 3108, 3970, 2500, 3987, 
                2508, 2519}], 
               
               Line[{2382, 2389, 3822, 2398, 2407, 3844, 3845, 2417, 3840, 
                3072, 3871, 2435, 3867, 3081, 3896, 2450, 3893, 3091, 3921, 
                2466, 3916, 3101, 3949, 2483, 3974, 3110, 3946, 2504, 3972, 
                3117, 2521}], 
               
               Line[{2384, 2394, 3825, 2401, 3851, 3065, 3850, 2420, 3877, 
                3075, 3876, 2437, 3900, 3084, 3902, 2453, 3927, 3093, 3926, 
                2469, 3953, 3104, 3955, 2486, 3977, 3111, 3979, 2506, 3992, 
                3119, 2524}], 
               
               Line[{2386, 2399, 3830, 2403, 2418, 3857, 3859, 2422, 1292, 
                3883, 2439, 3908, 3086, 3907, 2455, 2467, 3933, 3935, 2471, 
                3963, 3107, 3962, 2489, 3983, 3113, 3985, 2510, 3994, 3120, 
                2526}], 
               
               Line[{2388, 3813, 3062, 2406, 2423, 3831, 3833, 2425, 3860, 
                3079, 3889, 2442, 1334, 3884, 2457, 3909, 3099, 3941, 2474, 
                1402, 3942, 2491, 3969, 3115, 3990, 2513, 3996, 3122, 2528}], 
               
               Line[{2516, 2501, 3980, 2497, 2481, 3959, 3957, 2477, 3930, 
                3929, 3094, 2460, 1323, 3904, 2445, 2433, 3881, 3879, 2428, 
                2415, 3855, 3853, 2410, 1225, 3828, 2392, 2374, 3815, 2376}], 
               
               Line[{2518, 2507, 3986, 2499, 2487, 3966, 3964, 2479, 3937, 
                3936, 3097, 2463, 3913, 3088, 3910, 2447, 3890, 3077, 3885, 
                2431, 3862, 3861, 3068, 2413, 3837, 3061, 3834, 2395, 2378, 
                3817, 2379}], 
               
               Line[{2520, 3116, 3971, 2503, 3945, 3944, 2493, 2482, 3102, 
                3917, 3915, 2465, 3920, 3090, 3892, 2449, 3082, 3868, 3866, 
                2434, 3073, 3841, 3839, 2416, 1243, 3819, 2397, 3056, 3814, 
                2381}], 
               Line[{2523, 3118, 3991, 2505, 3112, 3978, 3976, 2485, 3105, 
                3954, 3952, 2468, 3925, 3924, 2462, 2452, 3085, 3901, 3899, 
                2436, 3875, 3874, 2430, 2419, 3849, 3848, 2412, 2400, 3057, 
                3824, 2383}], 
               
               Line[{2525, 3993, 2522, 2509, 3114, 3984, 3982, 2488, 3961, 
                3960, 2484, 2470, 3934, 3096, 3932, 2454, 3906, 3905, 2451, 
                2438, 1293, 3882, 2421, 3858, 3067, 3856, 2402, 3059, 3829, 
                2385}], 
               
               Line[{2527, 3121, 3995, 2512, 3989, 3988, 2511, 2490, 3109, 
                3968, 3967, 2473, 3940, 3939, 2472, 2456, 1335, 3911, 2441, 
                3888, 3887, 2440, 2424, 3832, 3070, 3864, 2405, 3835, 2404, 
                2387}], 
               
               Line[{326, 1439, 335, 1452, 1453, 344, 1478, 1479, 353, 1512, 
                1513, 362, 1546, 1547, 370, 1576, 1577, 379, 1610, 1611, 388, 
                1642, 397}], 
               
               Line[{2529, 1437, 2546, 4004, 3125, 4005, 2564, 4027, 3133, 
                4026, 2582, 4051, 3141, 4052, 2599, 4079, 3152, 4078, 2615, 
                4077, 3158, 4100, 2632, 4132, 3169, 4131, 2651, 4157, 2649, 
                2671}], 
               
               Line[{2531, 1438, 2547, 1456, 4007, 2565, 4030, 3134, 4031, 
                2583, 4055, 3144, 4054, 2600, 4083, 3155, 4084, 2616, 4107, 
                3161, 4106, 2633, 4134, 3172, 4135, 2652, 4159, 2653, 2672}], 
               
               Line[{2533, 3123, 4000, 2549, 3128, 4010, 4011, 2567, 4038, 
                3136, 4036, 2585, 4062, 3146, 4060, 2602, 1560, 4089, 2618, 
                4112, 3164, 4115, 2635, 4142, 3175, 4140, 2655, 4165, 2659, 
                2674}], 
               
               Line[{2536, 3124, 4002, 2552, 3130, 4020, 4022, 2570, 4049, 
                3139, 4047, 2588, 4068, 3148, 4074, 2605, 4101, 3157, 4096, 
                2621, 4127, 3167, 4122, 2637, 4149, 3177, 4154, 2657, 4171, 
                2665, 2676}], 
               
               Line[{2538, 2545, 4006, 2554, 2563, 4028, 4029, 2573, 4024, 
                3142, 4053, 2591, 4050, 3150, 4076, 2607, 4103, 3160, 4105, 
                2623, 4098, 3170, 4133, 2640, 4158, 3179, 4130, 2661, 4156, 
                3186, 2678}], 
               
               Line[{2540, 2550, 4009, 2557, 4035, 3135, 4034, 2576, 4059, 
                3145, 4058, 2593, 4081, 3153, 4085, 2609, 4111, 3162, 4110, 
                2626, 4137, 3173, 4139, 2643, 4161, 3180, 4163, 2663, 4176, 
                3188, 2681}], 
               
               Line[{2542, 2555, 4014, 2559, 2574, 4041, 4043, 2578, 1530, 
                4065, 2595, 4091, 3156, 4088, 2611, 2624, 4117, 4119, 2628, 
                4147, 3176, 4146, 2646, 4167, 3182, 4169, 2667, 4178, 3189, 
                2683}], 
               
               Line[{2544, 3997, 3132, 2562, 2579, 4015, 4017, 2581, 4044, 
                3151, 4071, 2598, 1566, 4066, 2614, 4093, 3168, 4125, 2631, 
                1636, 4126, 2648, 4153, 3184, 4174, 2670, 4180, 3191, 2685}], 
               
               Line[{2673, 2658, 4164, 2654, 2638, 4143, 4141, 2634, 4114, 
                4113, 3163, 2617, 1561, 4090, 2601, 2589, 4063, 4061, 2584, 
                2571, 4039, 4037, 2566, 1463, 4012, 2548, 2530, 3999, 2532}], 
               
               Line[{2675, 2664, 4170, 2656, 2644, 4150, 4148, 2636, 4121, 
                4120, 3166, 2620, 4095, 4094, 2612, 2604, 4073, 3147, 4067, 
                2587, 4046, 4045, 3138, 2569, 4021, 3131, 4018, 2551, 2534, 
                4001, 2535}], 
               
               Line[{2677, 3185, 4155, 2660, 4129, 4128, 2650, 2639, 3171, 
                4099, 4097, 2622, 4104, 3159, 4102, 2606, 4075, 4072, 3149, 
                2590, 3143, 4025, 4023, 2572, 1481, 4003, 2553, 3126, 3998, 
                2537}], 
               
               Line[{2680, 3187, 4175, 2662, 3181, 4162, 4160, 2642, 3174, 
                4138, 4136, 2625, 4109, 4108, 2619, 2608, 3154, 4082, 4080, 
                2592, 4057, 4056, 2586, 2575, 4033, 4032, 2568, 2556, 3127, 
                4008, 2539}], 
               
               Line[{2682, 4177, 2679, 2666, 3183, 4168, 4166, 2645, 4145, 
                4144, 2641, 2627, 4118, 3165, 4116, 2610, 4087, 4086, 2603, 
                2594, 1531, 4064, 2577, 4042, 3137, 4040, 2558, 3129, 4013, 
                2541}], 
               
               Line[{2684, 3190, 4179, 2669, 4173, 4172, 2668, 2647, 3178, 
                4152, 4151, 2630, 4124, 4123, 2629, 2613, 1567, 4092, 2597, 
                4070, 4069, 2596, 2580, 4016, 3140, 4048, 2561, 4019, 2560, 
                2543}], 
               
               Line[{406, 1673, 415, 1686, 1687, 424, 1712, 1713, 433, 1746, 
                1747, 442, 1780, 1781, 450, 1810, 1811, 459, 1844, 1845, 468, 
                1876, 477}], 
               
               Line[{2686, 1671, 2703, 4188, 3194, 4189, 2721, 4211, 3202, 
                4210, 2739, 4235, 3210, 4236, 2756, 4263, 3221, 4262, 2772, 
                4261, 3227, 4284, 2789, 4316, 3238, 4315, 2808, 4341, 2806, 
                2828}], 
               
               Line[{2688, 1672, 2704, 1690, 4191, 2722, 4214, 3203, 4215, 
                2740, 4239, 3213, 4238, 2757, 4267, 3224, 4268, 2773, 4291, 
                3230, 4290, 2790, 4318, 3241, 4319, 2809, 4343, 2810, 2829}], 
               
               Line[{2690, 3192, 4184, 2706, 3197, 4194, 4195, 2724, 4222, 
                3205, 4220, 2742, 4246, 3215, 4244, 2759, 1794, 4273, 2775, 
                4296, 3233, 4299, 2792, 4326, 3244, 4324, 2812, 4349, 2816, 
                2831}], 
               
               Line[{2693, 3193, 4186, 2709, 3199, 4204, 4206, 2727, 4233, 
                3208, 4231, 2745, 4252, 3217, 4258, 2762, 4285, 3226, 4280, 
                2778, 4311, 3236, 4306, 2794, 4333, 3246, 4338, 2814, 4355, 
                2822, 2833}], 
               
               Line[{2695, 2702, 4190, 2711, 2720, 4212, 4213, 2730, 4208, 
                3211, 4237, 2748, 4234, 3219, 4260, 2764, 4287, 3229, 4289, 
                2780, 4282, 3239, 4317, 2797, 4342, 3248, 4314, 2818, 4340, 
                3255, 2835}], 
               
               Line[{2697, 2707, 4193, 2714, 4219, 3204, 4218, 2733, 4243, 
                3214, 4242, 2750, 4265, 3222, 4269, 2766, 4295, 3231, 4294, 
                2783, 4321, 3242, 4323, 2800, 4345, 3249, 4347, 2820, 4360, 
                3257, 2838}], 
               
               Line[{2699, 2712, 4198, 2716, 2731, 4225, 4227, 2735, 1764, 
                4249, 2752, 4275, 3225, 4272, 2768, 2781, 4301, 4303, 2785, 
                4331, 3245, 4330, 2803, 4351, 3251, 4353, 2824, 4362, 3258, 
                2840}], 
               
               Line[{2701, 4181, 3201, 2719, 2736, 4199, 4201, 2738, 4228, 
                3220, 4255, 2755, 1800, 4250, 2771, 4277, 3237, 4309, 2788, 
                1870, 4310, 2805, 4337, 3253, 4358, 2827, 4364, 3260, 2842}], 
               
               Line[{2830, 2815, 4348, 2811, 2795, 4327, 4325, 2791, 4298, 
                4297, 3232, 2774, 1795, 4274, 2758, 2746, 4247, 4245, 2741, 
                2728, 4223, 4221, 2723, 1697, 4196, 2705, 2687, 4183, 2689}], 
               
               Line[{2832, 2821, 4354, 2813, 2801, 4334, 4332, 2793, 4305, 
                4304, 3235, 2777, 4279, 4278, 2769, 2761, 4257, 3216, 4251, 
                2744, 4230, 4229, 3207, 2726, 4205, 3200, 4202, 2708, 2691, 
                4185, 2692}], 
               
               Line[{2834, 3254, 4339, 2817, 4313, 4312, 2807, 2796, 3240, 
                4283, 4281, 2779, 4288, 3228, 4286, 2763, 4259, 4256, 3218, 
                2747, 3212, 4209, 4207, 2729, 1715, 4187, 2710, 3195, 4182, 
                2694}], 
               
               Line[{2837, 3256, 4359, 2819, 3250, 4346, 4344, 2799, 3243, 
                4322, 4320, 2782, 4293, 4292, 2776, 2765, 3223, 4266, 4264, 
                2749, 4241, 4240, 2743, 2732, 4217, 4216, 2725, 2713, 3196, 
                4192, 2696}], 
               
               Line[{2839, 4361, 2836, 2823, 3252, 4352, 4350, 2802, 4329, 
                4328, 2798, 2784, 4302, 3234, 4300, 2767, 4271, 4270, 2760, 
                2751, 1765, 4248, 2734, 4226, 3206, 4224, 2715, 3198, 4197, 
                2698}], 
               
               Line[{2841, 3259, 4363, 2826, 4357, 4356, 2825, 2804, 3247, 
                4336, 4335, 2787, 4308, 4307, 2786, 2770, 1801, 4276, 2754, 
                4254, 4253, 2753, 2737, 4200, 3209, 4232, 2718, 4203, 2717, 
                2700}]}, {
               
               Line[{489, 3390, 689, 3416, 683, 681, 3410, 3409, 675, 3403, 
                673, 3402, 667, 3397, 665, 3365, 653, 651, 3386, 3385, 645, 
                643, 3379, 3378, 637, 3370, 635, 629, 625, 3367, 661}], 
               
               Line[{496, 655, 3389, 3388, 649, 3383, 3382, 647, 641, 639, 
                3374, 3373, 633, 3369, 3368, 631, 619, 3362, 3361, 617, 611, 
                3351, 609, 603, 601, 3346, 595, 3342, 591, 627}], 
               
               Line[{499, 485, 487, 486, 490, 3263, 491, 3264, 492, 3265, 493,
                 3266, 494, 3262, 502, 3270, 503, 3272, 508, 3273, 509, 3277, 
                514, 3278, 515, 3283, 520, 3261, 521}], 
               
               Line[{18, 1938, 1937, 17, 1935, 1934, 16, 1933, 1932, 15, 1930,
                 1929, 14, 1928, 1927, 13, 1925, 1924, 12, 1923, 11, 1922, 
                10}], 
               
               Line[{524, 497, 3268, 500, 504, 506, 3276, 510, 3274, 512, 
                3282, 516, 3284, 518, 3267, 528, 3292, 530, 3296, 536, 3299, 
                538, 3304, 544, 3305, 546, 3312, 552, 3279, 554}], 
               
               Line[{555, 3281, 3280, 553, 547, 3307, 3306, 545, 539, 537, 
                3298, 3297, 531, 3293, 529, 519, 3286, 3285, 517, 513, 3275, 
                511, 507, 3271, 505, 501, 498, 3269, 525}], 
               
               Line[{558, 3291, 522, 526, 532, 3294, 534, 3301, 3302, 540, 
                542, 3309, 548, 3313, 550, 3287, 3288, 562, 564, 3322, 570, 
                3325, 572, 3330, 578, 580, 3335, 586, 3308, 588}], 
               
               Line[{589, 587, 3337, 3336, 581, 3331, 579, 573, 571, 3324, 
                3323, 565, 3319, 563, 3289, 551, 549, 3311, 3310, 543, 3300, 
                541, 3303, 535, 533, 3295, 527, 3290, 523, 559}], 
               
               Line[{592, 556, 3317, 560, 3321, 566, 568, 3327, 3328, 574, 
                576, 3333, 3334, 582, 584, 3314, 3315, 596, 598, 3347, 3348, 
                604, 606, 3353, 612, 3356, 614, 3359, 620, 622}], 
               
               Line[{623, 3332, 621, 615, 613, 3355, 3354, 607, 3350, 605, 
                3349, 599, 3344, 597, 3316, 585, 3339, 3338, 583, 577, 3326, 
                575, 3329, 569, 3320, 567, 561, 557, 3318, 593}], 
               
               Line[{626, 3343, 590, 594, 600, 3345, 602, 3352, 608, 610, 
                3358, 616, 3360, 618, 3340, 3341, 630, 632, 3372, 638, 3375, 
                640, 3380, 646, 3381, 648, 3387, 654, 3357, 495}], 
               
               Line[{657, 714, 3438, 3437, 710, 3433, 708, 3432, 704, 3427, 
                702, 3426, 698, 696, 3394, 3393, 687, 3418, 685, 3414, 679, 
                3404, 677, 3407, 671, 669, 3399, 663, 3395, 659, 693}], 
               
               Line[{660, 624, 3366, 628, 3371, 634, 636, 3377, 642, 3376, 
                644, 3384, 650, 3391, 652, 3363, 3364, 664, 666, 3400, 3401, 
                672, 674, 3408, 680, 3411, 682, 3415, 688, 488}], 
               
               Line[{690, 722, 3444, 3443, 721, 3442, 720, 3441, 719, 718, 
                3440, 3439, 717, 716, 3420, 3419, 712, 711, 3435, 3434, 706, 
                705, 3429, 3428, 700, 699, 3423, 694, 3421, 691, 715}], 
               
               Line[{692, 3396, 658, 662, 668, 3398, 670, 3405, 3406, 676, 
                678, 3412, 3413, 684, 686, 3392, 695, 3422, 697, 3424, 3425, 
                701, 703, 3430, 3431, 707, 709, 3436, 713, 3417, 656}], 
               
               Line[{727, 3574, 927, 3600, 921, 919, 3594, 3593, 913, 3587, 
                911, 3586, 905, 3581, 903, 3549, 891, 889, 3570, 3569, 883, 
                881, 3563, 3562, 875, 3554, 873, 867, 863, 3551, 899}], 
               
               Line[{734, 893, 3573, 3572, 887, 3567, 3566, 885, 879, 877, 
                3558, 3557, 871, 3553, 3552, 869, 857, 3546, 3545, 855, 849, 
                3535, 847, 841, 839, 3530, 833, 3526, 829, 865}], 
               
               Line[{737, 723, 725, 724, 728, 3447, 729, 3448, 730, 3449, 731,
                 3450, 732, 3446, 740, 3454, 741, 3456, 746, 3457, 747, 3461, 
                752, 3462, 753, 3467, 758, 3445, 759}], 
               
               Line[{99, 2094, 2093, 98, 2091, 2090, 97, 2089, 2088, 96, 2086,
                 2085, 95, 2084, 2083, 94, 2081, 2080, 93, 2079, 92, 2078, 
                91}], 
               
               Line[{762, 735, 3452, 738, 742, 744, 3460, 748, 3458, 750, 
                3466, 754, 3468, 756, 3451, 766, 3476, 768, 3480, 774, 3483, 
                776, 3488, 782, 3489, 784, 3496, 790, 3463, 792}], 
               
               Line[{793, 3465, 3464, 791, 785, 3491, 3490, 783, 777, 775, 
                3482, 3481, 769, 3477, 767, 757, 3470, 3469, 755, 751, 3459, 
                749, 745, 3455, 743, 739, 736, 3453, 763}], 
               
               Line[{796, 3475, 760, 764, 770, 3478, 772, 3485, 3486, 778, 
                780, 3493, 786, 3497, 788, 3471, 3472, 800, 802, 3506, 808, 
                3509, 810, 3514, 816, 818, 3519, 824, 3492, 826}], 
               
               Line[{827, 825, 3521, 3520, 819, 3515, 817, 811, 809, 3508, 
                3507, 803, 3503, 801, 3473, 789, 787, 3495, 3494, 781, 3484, 
                779, 3487, 773, 771, 3479, 765, 3474, 761, 797}], 
               
               Line[{830, 794, 3501, 798, 3505, 804, 806, 3511, 3512, 812, 
                814, 3517, 3518, 820, 822, 3498, 3499, 834, 836, 3531, 3532, 
                842, 844, 3537, 850, 3540, 852, 3543, 858, 860}], 
               
               Line[{861, 3516, 859, 853, 851, 3539, 3538, 845, 3534, 843, 
                3533, 837, 3528, 835, 3500, 823, 3523, 3522, 821, 815, 3510, 
                813, 3513, 807, 3504, 805, 799, 795, 3502, 831}], 
               
               Line[{864, 3527, 828, 832, 838, 3529, 840, 3536, 846, 848, 
                3542, 854, 3544, 856, 3524, 3525, 868, 870, 3556, 876, 3559, 
                878, 3564, 884, 3565, 886, 3571, 892, 3541, 733}], 
               
               Line[{895, 952, 3622, 3621, 948, 3617, 946, 3616, 942, 3611, 
                940, 3610, 936, 934, 3578, 3577, 925, 3602, 923, 3598, 917, 
                3588, 915, 3591, 909, 907, 3583, 901, 3579, 897, 931}], 
               
               Line[{898, 862, 3550, 866, 3555, 872, 874, 3561, 880, 3560, 
                882, 3568, 888, 3575, 890, 3547, 3548, 902, 904, 3584, 3585, 
                910, 912, 3592, 918, 3595, 920, 3599, 926, 726}], 
               
               Line[{928, 960, 3628, 3627, 959, 3626, 958, 3625, 957, 956, 
                3624, 3623, 955, 954, 3604, 3603, 950, 949, 3619, 3618, 944, 
                943, 3613, 3612, 938, 937, 3607, 932, 3605, 929, 953}], 
               
               Line[{930, 3580, 896, 900, 906, 3582, 908, 3589, 3590, 914, 
                916, 3596, 3597, 922, 924, 3576, 933, 3606, 935, 3608, 3609, 
                939, 941, 3614, 3615, 945, 947, 3620, 951, 3601, 894}], 
               
               Line[{965, 3758, 1165, 3784, 1159, 1157, 3778, 3777, 1151, 
                3771, 1149, 3770, 1143, 3765, 1141, 3733, 1129, 1127, 3754, 
                3753, 1121, 1119, 3747, 3746, 1113, 3738, 1111, 1105, 1101, 
                3735, 1137}], 
               
               Line[{972, 1131, 3757, 3756, 1125, 3751, 3750, 1123, 1117, 
                1115, 3742, 3741, 1109, 3737, 3736, 1107, 1095, 3730, 3729, 
                1093, 1087, 3719, 1085, 1079, 1077, 3714, 1071, 3710, 1067, 
                1103}], 
               
               Line[{975, 961, 963, 962, 966, 3631, 967, 3632, 968, 3633, 969,
                 3634, 970, 3630, 978, 3638, 979, 3640, 984, 3641, 985, 3645, 
                990, 3646, 991, 3651, 996, 3629, 997}], 
               
               Line[{180, 2250, 2249, 179, 2247, 2246, 178, 2245, 2244, 177, 
                2242, 2241, 176, 2240, 2239, 175, 2237, 2236, 174, 2235, 173, 
                2234, 172}], 
               
               Line[{1000, 973, 3636, 976, 980, 982, 3644, 986, 3642, 988, 
                3650, 992, 3652, 994, 3635, 1004, 3660, 1006, 3664, 1012, 
                3667, 1014, 3672, 1020, 3673, 1022, 3680, 1028, 3647, 1030}], 
               
               Line[{1031, 3649, 3648, 1029, 1023, 3675, 3674, 1021, 1015, 
                1013, 3666, 3665, 1007, 3661, 1005, 995, 3654, 3653, 993, 989,
                 3643, 987, 983, 3639, 981, 977, 974, 3637, 1001}], 
               
               Line[{1034, 3659, 998, 1002, 1008, 3662, 1010, 3669, 3670, 
                1016, 1018, 3677, 1024, 3681, 1026, 3655, 3656, 1038, 1040, 
                3690, 1046, 3693, 1048, 3698, 1054, 1056, 3703, 1062, 3676, 
                1064}], 
               
               Line[{1065, 1063, 3705, 3704, 1057, 3699, 1055, 1049, 1047, 
                3692, 3691, 1041, 3687, 1039, 3657, 1027, 1025, 3679, 3678, 
                1019, 3668, 1017, 3671, 1011, 1009, 3663, 1003, 3658, 999, 
                1035}], 
               
               Line[{1068, 1032, 3685, 1036, 3689, 1042, 1044, 3695, 3696, 
                1050, 1052, 3701, 3702, 1058, 1060, 3682, 3683, 1072, 1074, 
                3715, 3716, 1080, 1082, 3721, 1088, 3724, 1090, 3727, 1096, 
                1098}], 
               
               Line[{1099, 3700, 1097, 1091, 1089, 3723, 3722, 1083, 3718, 
                1081, 3717, 1075, 3712, 1073, 3684, 1061, 3707, 3706, 1059, 
                1053, 3694, 1051, 3697, 1045, 3688, 1043, 1037, 1033, 3686, 
                1069}], 
               
               Line[{1102, 3711, 1066, 1070, 1076, 3713, 1078, 3720, 1084, 
                1086, 3726, 1092, 3728, 1094, 3708, 3709, 1106, 1108, 3740, 
                1114, 3743, 1116, 3748, 1122, 3749, 1124, 3755, 1130, 3725, 
                971}], 
               
               Line[{1133, 1190, 3806, 3805, 1186, 3801, 1184, 3800, 1180, 
                3795, 1178, 3794, 1174, 1172, 3762, 3761, 1163, 3786, 1161, 
                3782, 1155, 3772, 1153, 3775, 1147, 1145, 3767, 1139, 3763, 
                1135, 1169}], 
               
               Line[{1136, 1100, 3734, 1104, 3739, 1110, 1112, 3745, 1118, 
                3744, 1120, 3752, 1126, 3759, 1128, 3731, 3732, 1140, 1142, 
                3768, 3769, 1148, 1150, 3776, 1156, 3779, 1158, 3783, 1164, 
                964}], 
               
               Line[{1166, 1198, 3812, 3811, 1197, 3810, 1196, 3809, 1195, 
                1194, 3808, 3807, 1193, 1192, 3788, 3787, 1188, 1187, 3803, 
                3802, 1182, 1181, 3797, 3796, 1176, 1175, 3791, 1170, 3789, 
                1167, 1191}], 
               
               Line[{1168, 3764, 1134, 1138, 1144, 3766, 1146, 3773, 3774, 
                1152, 1154, 3780, 3781, 1160, 1162, 3760, 1171, 3790, 1173, 
                3792, 3793, 1177, 1179, 3798, 3799, 1183, 1185, 3804, 1189, 
                3785, 1132}], 
               
               Line[{1203, 3942, 1403, 3968, 1397, 1395, 3962, 3961, 1389, 
                3955, 1387, 3954, 1381, 3949, 1379, 3917, 1367, 1365, 3938, 
                3937, 1359, 1357, 3931, 3930, 1351, 3922, 1349, 1343, 1339, 
                3919, 1375}], 
               
               Line[{1210, 1369, 3941, 3940, 1363, 3935, 3934, 1361, 1355, 
                1353, 3926, 3925, 1347, 3921, 3920, 1345, 1333, 3914, 3913, 
                1331, 1325, 3903, 1323, 1317, 1315, 3898, 1309, 3894, 1305, 
                1341}], 
               
               Line[{1213, 1199, 1201, 1200, 1204, 3815, 1205, 3816, 1206, 
                3817, 1207, 3818, 1208, 3814, 1216, 3822, 1217, 3824, 1222, 
                3825, 1223, 3829, 1228, 3830, 1229, 3835, 1234, 3813, 1235}], 
               
               Line[{261, 2406, 2405, 260, 2403, 2402, 259, 2401, 2400, 258, 
                2398, 2397, 257, 2396, 2395, 256, 2393, 2392, 255, 2391, 254, 
                2390, 253}], 
               
               Line[{1238, 1211, 3820, 1214, 1218, 1220, 3828, 1224, 3826, 
                1226, 3834, 1230, 3836, 1232, 3819, 1242, 3844, 1244, 3848, 
                1250, 3851, 1252, 3856, 1258, 3857, 1260, 3864, 1266, 3831, 
                1268}], 
               
               Line[{1269, 3833, 3832, 1267, 1261, 3859, 3858, 1259, 1253, 
                1251, 3850, 3849, 1245, 3845, 1243, 1233, 3838, 3837, 1231, 
                1227, 3827, 1225, 1221, 3823, 1219, 1215, 1212, 3821, 1239}], 
               
               Line[{1272, 3843, 1236, 1240, 1246, 3846, 1248, 3853, 3854, 
                1254, 1256, 3861, 1262, 3865, 1264, 3839, 3840, 1276, 1278, 
                3874, 1284, 3877, 1286, 3882, 1292, 1294, 3887, 1300, 3860, 
                1302}], 
               
               Line[{1303, 1301, 3889, 3888, 1295, 3883, 1293, 1287, 1285, 
                3876, 3875, 1279, 3871, 1277, 3841, 1265, 1263, 3863, 3862, 
                1257, 3852, 1255, 3855, 1249, 1247, 3847, 1241, 3842, 1237, 
                1273}], 
               
               Line[{1306, 1270, 3869, 1274, 3873, 1280, 1282, 3879, 3880, 
                1288, 1290, 3885, 3886, 1296, 1298, 3866, 3867, 1310, 1312, 
                3899, 3900, 1318, 1320, 3905, 1326, 3908, 1328, 3911, 1334, 
                1336}], 
               
               Line[{1337, 3884, 1335, 1329, 1327, 3907, 3906, 1321, 3902, 
                1319, 3901, 1313, 3896, 1311, 3868, 1299, 3891, 3890, 1297, 
                1291, 3878, 1289, 3881, 1283, 3872, 1281, 1275, 1271, 3870, 
                1307}], 
               
               Line[{1340, 3895, 1304, 1308, 1314, 3897, 1316, 3904, 1322, 
                1324, 3910, 1330, 3912, 1332, 3892, 3893, 1344, 1346, 3924, 
                1352, 3927, 1354, 3932, 1360, 3933, 1362, 3939, 1368, 3909, 
                1209}], 
               
               Line[{1371, 1428, 3990, 3989, 1424, 3985, 1422, 3984, 1418, 
                3979, 1416, 3978, 1412, 1410, 3946, 3945, 1401, 3970, 1399, 
                3966, 1393, 3956, 1391, 3959, 1385, 1383, 3951, 1377, 3947, 
                1373, 1407}], 
               
               Line[{1374, 1338, 3918, 1342, 3923, 1348, 1350, 3929, 1356, 
                3928, 1358, 3936, 1364, 3943, 1366, 3915, 3916, 1378, 1380, 
                3952, 3953, 1386, 1388, 3960, 1394, 3963, 1396, 3967, 1402, 
                1202}], 
               
               Line[{1404, 1436, 3996, 3995, 1435, 3994, 1434, 3993, 1433, 
                1432, 3992, 3991, 1431, 1430, 3972, 3971, 1426, 1425, 3987, 
                3986, 1420, 1419, 3981, 3980, 1414, 1413, 3975, 1408, 3973, 
                1405, 1429}], 
               
               Line[{1406, 3948, 1372, 1376, 1382, 3950, 1384, 3957, 3958, 
                1390, 1392, 3964, 3965, 1398, 1400, 3944, 1409, 3974, 1411, 
                3976, 3977, 1415, 1417, 3982, 3983, 1421, 1423, 3988, 1427, 
                3969, 1370}], 
               
               Line[{1441, 4126, 1637, 4152, 1631, 1629, 4146, 4145, 1623, 
                4139, 1621, 4138, 1615, 4133, 1613, 4099, 1601, 1599, 4122, 
                4121, 1593, 1591, 4115, 4114, 1585, 4106, 1583, 1577, 1573, 
                4100, 1609}], 
               
               Line[{1448, 1603, 4125, 4124, 1597, 4119, 4118, 1595, 1589, 
                1587, 4110, 4109, 1581, 4105, 4104, 1579, 1569, 4096, 4095, 
                1563, 4089, 1561, 1555, 1553, 4084, 1547, 4078, 1543, 1575}], 
               
               Line[{1451, 1437, 1439, 1438, 1442, 3999, 1443, 4000, 1444, 
                4001, 1445, 4002, 1446, 3998, 1454, 4006, 1455, 4008, 1460, 
                4009, 1461, 4013, 1466, 4014, 1467, 4019, 1472, 3997, 1473}], 
               
               Line[{342, 2562, 2561, 341, 2559, 2558, 340, 2557, 2556, 339, 
                2554, 2553, 338, 2552, 2551, 337, 2549, 2548, 336, 2547, 335, 
                2546, 334}], 
               
               Line[{1476, 1449, 4004, 1452, 1456, 1458, 4012, 1462, 4010, 
                1464, 4018, 1468, 4020, 1470, 4003, 1480, 4028, 1482, 4032, 
                1488, 4035, 1490, 4040, 1496, 4041, 1498, 4048, 1504, 4015, 
                1506}], 
               
               Line[{1507, 4017, 4016, 1505, 1499, 4043, 4042, 1497, 1491, 
                1489, 4034, 4033, 1483, 4029, 1481, 1471, 4022, 4021, 1469, 
                1465, 4011, 1463, 1459, 4007, 1457, 1453, 1450, 4005, 1477}], 
               
               Line[{1510, 4027, 1474, 1478, 1484, 4030, 1486, 4037, 4038, 
                1492, 1494, 4045, 1500, 4049, 1502, 4023, 4024, 1514, 1516, 
                4056, 1522, 4059, 1524, 4064, 1530, 1532, 4069, 1538, 4044, 
                1540}], 
               
               Line[{1541, 1539, 4071, 4070, 1533, 4065, 1531, 1525, 1523, 
                4058, 4057, 1517, 4053, 1515, 4025, 1503, 1501, 4047, 4046, 
                1495, 4036, 1493, 4039, 1487, 1485, 4031, 1479, 4026, 1475, 
                1511}], 
               
               Line[{1544, 1508, 4051, 1512, 4055, 1518, 1520, 4061, 4062, 
                1526, 1528, 4067, 4068, 1534, 4072, 1536, 4050, 1548, 4080, 
                4081, 1550, 1556, 4086, 1558, 4091, 1564, 4092, 1566, 1570}], 
               
               Line[{1571, 4066, 1567, 1565, 1559, 4088, 4087, 1557, 4085, 
                1551, 4082, 1549, 1537, 4076, 4075, 4074, 4073, 1535, 1529, 
                4060, 1527, 4063, 1521, 4054, 1519, 1513, 1509, 4052, 1545}], 
               
               Line[{1574, 4079, 1542, 1546, 1552, 4083, 1554, 4090, 1560, 
                1562, 4094, 1568, 4101, 4102, 4103, 1578, 1580, 4108, 1586, 
                4111, 1588, 4116, 1594, 4117, 1596, 4123, 1602, 4093, 1447}], 
               
               Line[{1605, 1662, 4174, 4173, 1658, 4169, 1656, 4168, 1652, 
                4163, 1650, 4162, 1646, 1644, 4130, 4129, 1635, 4154, 1633, 
                4150, 1627, 4140, 1625, 4143, 1619, 1617, 4135, 1611, 4131, 
                1607, 1641}], 
               
               Line[{1608, 1572, 4077, 1576, 4107, 1582, 1584, 4113, 1590, 
                4112, 1592, 4120, 1598, 4127, 1600, 4097, 4098, 1612, 1614, 
                4136, 4137, 1620, 1622, 4144, 1628, 4147, 1630, 4151, 1636, 
                1440}], 
               
               Line[{1638, 1670, 4180, 4179, 1669, 4178, 1668, 4177, 1667, 
                1666, 4176, 4175, 1665, 1664, 4156, 4155, 1660, 1659, 4171, 
                4170, 1654, 1653, 4165, 4164, 1648, 1647, 4159, 1642, 4157, 
                1639, 1663}], 
               
               Line[{1640, 4132, 1606, 1610, 1616, 4134, 1618, 4141, 4142, 
                1624, 1626, 4148, 4149, 1632, 1634, 4128, 1643, 4158, 1645, 
                4160, 4161, 1649, 1651, 4166, 4167, 1655, 1657, 4172, 1661, 
                4153, 1604}], 
               
               Line[{1675, 4310, 1871, 4336, 1865, 1863, 4330, 4329, 1857, 
                4323, 1855, 4322, 1849, 4317, 1847, 4283, 1835, 1833, 4306, 
                4305, 1827, 1825, 4299, 4298, 1819, 4290, 1817, 1811, 1807, 
                4284, 1843}], 
               
               Line[{1682, 1837, 4309, 4308, 1831, 4303, 4302, 1829, 1823, 
                1821, 4294, 4293, 1815, 4289, 4288, 1813, 1803, 4280, 4279, 
                1797, 4273, 1795, 1789, 1787, 4268, 1781, 4262, 1777, 1809}], 
               
               Line[{1685, 1671, 1673, 1672, 1676, 4183, 1677, 4184, 1678, 
                4185, 1679, 4186, 1680, 4182, 1688, 4190, 1689, 4192, 1694, 
                4193, 1695, 4197, 1700, 4198, 1701, 4203, 1706, 4181, 1707}], 
               
               Line[{422, 2719, 2718, 421, 2716, 2715, 420, 2714, 2713, 419, 
                2711, 2710, 418, 2709, 2708, 417, 2706, 2705, 416, 2704, 415, 
                2703, 414}], 
               
               Line[{1710, 1683, 4188, 1686, 1690, 1692, 4196, 1696, 4194, 
                1698, 4202, 1702, 4204, 1704, 4187, 1714, 4212, 1716, 4216, 
                1722, 4219, 1724, 4224, 1730, 4225, 1732, 4232, 1738, 4199, 
                1740}], 
               
               Line[{1741, 4201, 4200, 1739, 1733, 4227, 4226, 1731, 1725, 
                1723, 4218, 4217, 1717, 4213, 1715, 1705, 4206, 4205, 1703, 
                1699, 4195, 1697, 1693, 4191, 1691, 1687, 1684, 4189, 1711}], 
               
               Line[{1744, 4211, 1708, 1712, 1718, 4214, 1720, 4221, 4222, 
                1726, 1728, 4229, 1734, 4233, 1736, 4207, 4208, 1748, 1750, 
                4240, 1756, 4243, 1758, 4248, 1764, 1766, 4253, 1772, 4228, 
                1774}], 
               
               Line[{1775, 1773, 4255, 4254, 1767, 4249, 1765, 1759, 1757, 
                4242, 4241, 1751, 4237, 1749, 4209, 1737, 1735, 4231, 4230, 
                1729, 4220, 1727, 4223, 1721, 1719, 4215, 1713, 4210, 1709, 
                1745}], 
               
               Line[{1778, 1742, 4235, 1746, 4239, 1752, 1754, 4245, 4246, 
                1760, 1762, 4251, 4252, 1768, 4256, 1770, 4234, 1782, 4264, 
                4265, 1784, 1790, 4270, 1792, 4275, 1798, 4276, 1800, 1804}], 
               
               Line[{1805, 4250, 1801, 1799, 1793, 4272, 4271, 1791, 4269, 
                1785, 4266, 1783, 1771, 4260, 4259, 4258, 4257, 1769, 1763, 
                4244, 1761, 4247, 1755, 4238, 1753, 1747, 1743, 4236, 1779}], 
               
               Line[{1808, 4263, 1776, 1780, 1786, 4267, 1788, 4274, 1794, 
                1796, 4278, 1802, 4285, 4286, 4287, 1812, 1814, 4292, 1820, 
                4295, 1822, 4300, 1828, 4301, 1830, 4307, 1836, 4277, 1681}], 
               
               Line[{1839, 1896, 4358, 4357, 1892, 4353, 1890, 4352, 1886, 
                4347, 1884, 4346, 1880, 1878, 4314, 4313, 1869, 4338, 1867, 
                4334, 1861, 4324, 1859, 4327, 1853, 1851, 4319, 1845, 4315, 
                1841, 1875}], 
               
               Line[{1842, 1806, 4261, 1810, 4291, 1816, 1818, 4297, 1824, 
                4296, 1826, 4304, 1832, 4311, 1834, 4281, 4282, 1846, 1848, 
                4320, 4321, 1854, 1856, 4328, 1862, 4331, 1864, 4335, 1870, 
                1674}], 
               
               Line[{1872, 1904, 4364, 4363, 1903, 4362, 1902, 4361, 1901, 
                1900, 4360, 4359, 1899, 1898, 4340, 4339, 1894, 1893, 4355, 
                4354, 1888, 1887, 4349, 4348, 1882, 1881, 4343, 1876, 4341, 
                1873, 1897}], 
               
               Line[{1874, 4316, 1840, 1844, 1850, 4318, 1852, 4325, 4326, 
                1858, 1860, 4332, 4333, 1866, 1868, 4312, 1877, 4342, 1879, 
                4344, 4345, 1883, 1885, 4350, 4351, 1889, 1891, 4356, 1895, 
                4337, 1838}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            VertexNormals -> CompressedData["
1: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
v2RKlzZZr5zp+XXRnJdwv2HPYi2JZLzdYn1JjOBMQsSI++x18ei5dmH1wpne
uKtbOvsQmW8SFT9o4jYWP8DET1ncWLxBPBVvwMSbUfVYfKLF3bH4RCY+Dcff
K9Ori8EsG65fXx+5or5FiIcgmde7YvH9++TTUUMw+7jdlli07Cq71Ufw4c5t
t0tN5enoPCXnjMzbYLTdMuGDBJmXkgTX2/o5iVju08QhG+6EEuMsPkkROw91
fph6U8sDzzi+zcHNC4Bn2dTHAeS7IqZj+xfmU/sXmP3rT+130Kb2O7TR+92b
wgf4ROEDMPjgqTGGJ3iawhNk8EQoPoHjHfih6qqqHWvtk3B2V5qUEVl3S6sB
l+8itvhoRmbJgYkB6MSqmzmJ2GP90+jrd3K+4W6Y8+qliBUUxEZ+Gj0/fN7Y
b/7lQAaM/z3jk+/TUNj14UWqK+EFnXk3L3+cmwarFq3mdeoOhW9DInqvh//B
Wyih8BYYvN1O4TP0XR3DZ2Dw+ShrDM/BsngMz5HBcxr/cQeF/8jg/wmBMb5A
iZ4xvkCGL2opfoHpFL8Awy/PKD4CLoqPwInmI5q/IJniL2D4ayrFd3Cd4jtg
+G4yxY/AS/EjMvx4juJTKKD4FBk+pfkXaf5Fhn+XLIyc+0AlDKefX+hueyQV
/Ksmeu4ldhqvtTBd9j4cExJXCrF2pEKZfcFBYTI+7dhBY/4zCTgskTR++0Aq
pBcuaOYgetR6LJVi1NNwIM3m7FT5MPi51Ke4iPg/vDZRUePNJbyUUfNOZtEZ
mHBIcYolwYFOTbybr5mH94J98xUzfdH5jLhwNZlX9QneLYqFGTj+5IZL08h5
spjXXNKL6G9rj70WejMBXz180mdurIdnbNX3uZJ4ezVbt9zteyJGPc7Rqoi5
AAsVrxRMJuPLdgYqXnlpDz17Zi6WD4iHM7x4Oo2MhzaddubqlQfZ30K77Xcm
w8Inmvt6SBwujAVZn2o/nLDx2PXZqeGwrjV1KIKsr/SanlCDr9G4z8Lq9c7l
54H76tdN9mS8YvuBvA0bE5Ansqzs8zx9LJIWH59B9C84t7fiuGkYZjcK1x07
aI3Lpd5EGhH/z/tmpVCUFoLWC8IC/94wxmWTRuLqyPi5vZeuGxh5oQsH/0Nv
U1Nsme1gbkzih3dcj9f2DZG40995914uBzQVttj/inzXQ+TKdOOj6RB6LMv9
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
QSszTglNck8XoOWr2OS/bdv7sPNyPk40fyzqy5WMZzy4hzcQ+X10XVs4W10b
73vHhyYCZVijOc7/8YVM9ND71KBE7k0HaPlINvlV30zKz5L76aBdk9uZkXgM
r5bPeTDwvzq+UjZ7rlPnB+TaPXZ+QOb8oEPX981mq+9b3rRrg+L6IgzfqX7k
1KRwlMoujHhH1reErr+bwlZ/pxjK+/rVhBIsv7VVQvpPHG63zN2x5zULyml5
YTb5aOq8hAf8x85LyJyXOul77h+2e+5D6n4B1X5j9wtg7hdFdF3ba6pOGZk6
5YOv7k0LPJ+B5xqbj7vpJ6PiJM1vsWR95ek6vjS2Or67FH/BJYq/gOEvXbqe
8awHVc/InPeuFzlKPCG4E6TsbT9tMAcDNvg255DzSR1dD9hK1wNOp+sBV9y2
8PiZUIZ/W0709uam4e+24a5csr7VtH/msflH0B2lDs8qxFMS811u+sei+nLZ
7InkvHSQrnN8dYGqc3xL1zlKOfC6bxFLw+16Gqpz16egeeuCO1lkX3TTdYjR
dB3iVboO8dI+R91LO/Jx2ZbCXzKS+Xj6rqqi/CtyPqTlU9jkJwuzqlmz0pAj
7VryykemaNlexQtkP8rQ9kx0/Lc9nqvnXNs1bIdVxoK+LXbJUKhqfDWK8MtK
uh6zm67HZOqp368UeHfi6WWc/t0vz60nDxV3udjzkXPX+/+wZ1jtyMvv8lFo
Y6SzsNQwAfuPiqe6EHv46PrKbnWqvvInXV85oCWuuP+vN7q+fZWVKeEFFovF
nXtG442uA73PVge6lLqfwlHqfgrM/bSXln/CJv/H/8/NbSudsO/HcY7jwWfx
w/GrfwtInAjQ9vxls6evqaSm8HcoKEw56qucFQ9tbk4L9Ij+j3QdKBdbHagb
dR8H+j4OzH385X/YE0rleVCAyvMgk+fRoPIA2ELlAZDJAxRS9x1Mou47yNx3
ttL7JYltv3TEOzy1jQzFQ0Zcge9mFODa53ITvUnczuGbZbB6agAkaFrqrneN
gF9yUvwnyH5sputYP7PVsQb9+uN1k9yHo4dsNIyWpsBuufIV4sQ/N2j5r2zy
QieCK4uNvLDp1PO9CkczsKvwj+BxYn/IsoOzQ06mg4FlYL3pMXus4bvScYjc
4y4Kb7KwnVEErSfvTussKILLmb8vziX7sYPWz2n8b/13qLwT3KDyTsDknb7S
9bZJbPW2oRtzG0pvlkCVdklf74MImOS/yCyC7KMf6kndJrZVcNj1j0BeaQrU
WSytNCP3LBsqDwY2VB4MmDzYAK0/iE1/JZWXgw4qLwdMXk6crvPlZ6vzJfCe
OTL5Kiy6vCc3V6gI2s3/wIc8wke1Zb/S3teCX31DzKKiAmhIUTuJNYQfqfwh
cMmM5Q+ByR9O7aRwtZ8NV2dS+SIUofJFyOSLtOo/6Hp11ICgoOpeSfE8OGS6
oZ2vkQUua3aHLOMvA2/HD2FGnenQaTQUZdlDzvNUHhW4zMfyqKBK51EDqbwr
yPKM5V2RybtaUfleeLR9LN+LTL7X5/hYvhcKqHwvMvlezbqxvDEoUXljZPLG
b7u2B2zx9cDYdM1eSUEHONqYKH2C7NPgnMg7XdUxOP9Twynj9B1o3Lk7ePR9
u9b6GTYFFcH4wWuPurG1EmS2fCl/Q/xTUb7OeCTcDmyTb767FkzW/XDOtwmj
uEfXqb1lq1O75RSqbPsgDevlL67MMN8KnMLSxY9JfM5uSVH5OCMLb5Y0Tl60
xQeP7T+0kO87CyZt3Px3XcolXJKY9PN1czDm7Z4nmkL8bGAaMa2kLg/71n06
/7AlAh/x7l+9hZwn+VW6eDKP5+LloK2mua2hqBuouOkD2aeNA/WKJ/R1ULbz
Z6q9oC1eXDc3/iGZbx5dJxjKVid4fCgq34X3Irauc+usRXfsWJQ1pDFaj0bX
4fKy1eFWa3Wrf3p5Fh4+cD//STAKYiWXPn1Ixl8MB0f19/viIs+o7inbg3He
5co2OeKfY7QefjY9t4W8tGNCLuGb4u6LkVaRmNEtK3WL7IsNP48qdOumYXGr
dOZywwDcG7PKew/x23fdnGXjbCNxjcm54LlFIThxnO7ITeJn7f/QP+v57+66
NZHYLzot4wRnOAayONa7EfnDdB3xarY64sUTZXe+M49Gpx1c6poubnjRKzF6
9D2GuRCnkfQrMh/dKbMXF57DzkX9Re1kXrHS916LKcShTPwcw8KV0RinJ1F6
m+DzMVr/Wjb9FRERESu6fHH7cw6PEx2u2G4lvXWQ6LGk65f3sNUvy/8Zd+4v
SxmCz8+wsjb0hs9uX7hH67bme4Q6H8t2Bq55C09PIXjg+efI5pvEzv6tGUe9
dnvgJfElzcsv2eEW597Uk6Pvq2n9qmz6dz+J2ClWfA7P3eYvOt5mjVILf+W3
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
U9XO8+oigTArv9OwQisZZ8bqPBgdn0P3JzxO9yespfvvnQ1tzTzACoOFPX1T
jc+5Q1G98sTR98MqtD2SbPZ0dY44b2aFwttpiYH9MoYgHrG5OuT/lS89/E++
9MMXo/4HN4IgZpsHZ8++RLT+461uRvyTTvdFXMLWFzF5nVxVqJIr8MxPH/+0
LRmXq3233knkk/+jj+KlBYI7J13xwwIrnlaN2QnQHdN4/DORz6D7EMqz9SHk
ps5FuJY6FwFzLppA92N8yNaPUXycwjI/Xl/c/OHh9gHfJPj48KPk+V+jdRb/
7mfI+LOvyW/uEi1/+NzhnWotZo8ThSav4//L+Mee9supf/7/gir7CzpKxp6Q
OCuy54NsIHotMawYvX89Y+vTGET3abzjZxxrqhaM89a/89/TEgUGl7KDkNhp
9x99FNMWBAhmDjljltRtl7SqWLAyVyn/SOStafmFbPKmR3atPVHhDr0/Ez83
lYXjTP5ZtW9G+/nQ9hiy2fOgXP6GxWs3mKM4Qa/YNRaPjrvC85Ton033k+Rk
6yf57uKaCT8veSPXszrZU8FhIBiQO6uf6Lel7RFjs0ddfGHUzeQg3MV1fr7R
a284nx33zJh89wDdH1KZrT9kJ+Uf2En5Bxn/pP9HH8ud1PqCPbW+yKxvPC3v
yiavaNFQ+f/Q9d5xPf7f43+kkC0ZkWwhM1TWQdlSUiGVpKLSVCqkvffee2vv
ojqEpBQysislhAohGf0ez67H8+3zur4//16303mex3msc07Xde72d/1QY9ee
N8b85jB5nOCK2//Hnr0se2J9Tr6daemH55VyMoe0nkTsGL2ak6econ0so1h9
LGOY9QwZzHpG7nqOofbYs+wRvH9dreJsCIy4YTrSRioKs7v3vnjX/7c/Zwur
P6eK5usPYauJS9I7F/MkRUGsXtNAE9H/ifaxjKF9LBNpH8uJjH6cyegHrv7U
f+yvXad2fZ5j740PTizoDZ8UC9elygU0OfuF6o9l6f+2KTPcyiQQMxcK3ozV
cUXvmbjyN6cOQ/2TwvLPlH1rVDf+IPYEpsS2zQ/Ercrempy+E2dp/8/9rP6f
MXu9hmRODMBQU+vRHfKh8Gz/l8vhRP4rtSeCZY+qLkL1kjDcZ3vSWzXSDzoq
g29z+knepf08k1j9PE9OyxTfetEPl29+NO4c2ZcLVk5b2Eyea9G+o9dZfUdz
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
0s4pSPjFwVq/gaCDCoHQ+3TJlC1E/+XhpusTsuLB9UrkPjUlUxB20bsmQOR3
MXVOuMDUOZFb53zM1EXhFlMXRW5d9DxTj4V4ph6L3HqsIFOPxb1MPRa59Vhh
pq6LaUxdF7l1XZ97hoJVE8xhQmqgfFNtIGTqbhh9lMzLpFftMU6pTqhx7Hy2
fl8KHBGyjlUm6/xrecmRpUmWcKLR0XLHjgjQWvxOazGnH+++yUk4LhwX7/it
M8E4GY0kO++rkfN5O+UqCnT+l6s4yvekyektvlh/NOvagh2X4c/ETwO6nH7d
daMzj+3JxalWci94ZQvhw7dfcXEPu8FbT2LM/OYSfOwyat6WnxlgdfOS5VAi
b7p3aeVrXcQclUyPndtPQZGFltzkqm54aPNxeYUHouuk8ooO97PY5clnfvIq
udc2/H4+foIOGsvpv1zjWYoLx5wz2PCUnD+Ua+lNuZbZlGvZsppntcfzULCQ
VTb9vCMYZCvVbYdweIKUD5tA+bBIOZIbhd/NHr3SGsr7PhoM1bSHs97w3Ivz
/tuNNuOnV8KgMzFp95HrkTAs90sDJ792ZHFmuXqUlm9uzPxdgZpHSpTyJgWj
tDlYNt0g+8tITMQ67xLerBszVM41BCdOvP7r8D1yzneKdSsK2ENK9PvF1aWp
YH/s2Lr3RI8t1Z/J0q94pO7+oXlOcHlns1KCaiKsOrw8Bck5qU/5tv0svq2I
z+br6R+L8U2p+LH3pZE4zTv44zgSl65yv7Rpr3IJrj5xke9CURzG37af5vyk
GxpmTNeU3xqE9bm+6523e8Il80ZbznciOlT/G5Z+3Kv9aeVnTbyncnMVr5c/
yO1VD7vJ6XdKubqzWVzdtuV2x28czcN3D2Z0wcQ47P288dV4sh+TT/en39HN
xL3rr5t5fotB+epLtgkkbnT87XJ4hL0Ojjr5QkLWyAbCjmsnVg381S/C0v9o
jfKa11rn8fCIVncx7+MYbb/l4k0iP4/yfAspz1eN8nwVDVT6ditm4Ra5Wj7R
nASUeiczagp5Pu6PT8Xp4iTc3hxw3W9TOt5+n2alSOy5bR2TvMwsDu6nNyYo
dKTBG+WB6YIcfjTl9tJ1CNx1OCVcckQ4vx+4VH9bNTfHCz6PuWbI+T/UZsov
3sDiF6/JS1vp3JgEsj8sRm8i+e/42rk8U8nvLqD831wW/9ehNmnzt1wrOBb0
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
P8+m83KbNS/dH7/Ku97zBXcJUQWlR9GQenbsATeynvd4VuzbxecNIiLHmxTH
RgIP1K3dz+EdUy65CYtLHtLRm46TiB9fiQdI80Wg/qrk6gEOl1zyhGmiizOa
GcX9eLM4DDftGfguw+k/T7nzS1nc+Q8PBAKSevRhwZ09yidNXXF4wuOtBkT/
auqfvLb/+seB8uJNWLz4H0ai2iVLQ6H50E7tpOlG4Np6xOkx+d1llA9+hsUH
j6dc9WgWV134eVplsGsiDKxqff5YyhX2+3t0OJD5XUn54DtZfPAwyluvY/HW
BVvk94VYJUGutdjukOYgKJwe9LOSrB9DyhNPZfHEm2LkRSQ1o+G3lPOMs4t9
oD61cQfnOxdryvVeyeJ636Zc7wgW1/visPH8gi+8Ie3TtJuB2nZwhndc0wtO
X8RSm2nnV0qj4OqGEjEfN1w7eu80DgczeXYPmJP14fD8s9OBy7IYdNXoLWed
rKJ+s2f5LcLAS3nj9AR4KLM8dF9TKGgMa9JOJfsr9B/c+VrKW29k8dabhPaP
+iKXBksn8W3wOh4N15a+/aFFzoEb/+BTy1Cutz2L66268+eKU2XJ0KDdum7O
Dm9wXm4y2H/yCOV6F7G43gYLb7UmSkaD6IBB09VdB6Fao2xMGpn34ZRbbcji
VhcUep4ekeoEYhm38gw3+2K/sqR4PHl+i/r/NMv/HYcYnvVYFs86bO8Y+478
Uxgx7NDjj6HhOBJSB45z3ot+lFuxbMAPREQTpB6LhkG9YH9PGLGnfl0+tkfE
wFR3n+fTCmKAzzqEL63vL0/8Pcs/7+wNdMIjIqG2Y4nlI9dI0Cx/7j6OjNeK
8rJPsHjZZy7MKN431xFuRua+29FjB7teCReokXk37vDWFV9sVv5bovqKebvB
//LT8Q1P+J1Ou6EGT19kWZAjJq+Iucjpr8JD/abH8tteymW+wOIyv4xouDox
Ngrfp0w4uGVFNPI5+C6zIuufn3KZ17C4zPoPxDRjv0fhQLDPz6iRsdg++WZt
L/GD9j+4w2KMP3Eq40/k+nPBvkH/w3bG/8D1fzYzvxh4cXB+gTu/0yn3+efM
/3Kf5/smXzLkicOCw+G1Ub2aOMXHW+An5/yk4z3HGq805S9rs/jLAY9X14pa
pmBWYO0Z8ckBmOfaX/eA3DsmlC88lsUXNgu1q5FQTcOAS43Njy+S+D17u/iu
L385uWYsTm76P7jDD5U//VT1ScQUI6WVPBIhGOInZTGV2BNCubpWLK7uWP2Q
DHshPzS2yP04ImkJptd+3cjpP6NJ/S/H8r8n5e2eYvF21xQNnj9QwZw/wD1/
Zh1pKi2/5o0Fo1btV09zwC+asZZ1RP/GojF1lf5xGF828x7e98clE2I9Lcl6
fk95x0dYvOO28KfOwTZJOFo6P0PPPxgPdy7ZFkPOgbuUL3yBxRceWHNoqsmr
eFSMjN9rXu+Gc66J7eH8P86d8lifsHisOynHNpfFsW2cNyc1QicIv0nkr34l
YIy7l0a/4Hx3EED9acby5z7Kk22+8F+e7NRxbj+G903DMddjnurGeoBslF7t
PvJcj/JVf7D4qlNOMZxZERZnFpn7F3yZ+xe4968n5ahqsTiq2cw9DveYexz0
6D1+l3JUw1kc1c3UDwksP4RLzb56vtwDd94u+CHTEomXDbR4ZMlzswe7vy1M
cUSXoPaP7/6E4PJrSUE+5HeN/sE51aH+b2T5n2/8zvRXCufh4ZKpnd/PmmHG
jFiPUs7/c6l/hKr+6x//3u+mIbqxMMr3gyj/fDfwb4n8HMjhFDPxLQgy8S18
ofGtD+Wc7mdxTnsor3bYr//yaiW+PYn8vCYJhHTDHwx/EQBVmZOVpcm6Oka5
q0tZ3NVuPnUFzeHk/guYrp670g8KepYO4+Qvz5n4HHiY+By48bkt5Zy+ZnFO
N1COah6Lo/qbiZNhCxMnAzdOdqfzfpg179KUr/qcxVdtY+JwaN05GIcDNw7X
ZuJ5PD91MJ5HbjxfyeQFMP7ZYF4A3Lygkvp5MsvPzUzeAckTBvMO4OYdLdQP
Q1h+sGHyGtjD5DWwgOY1yUweBDFMHgTcPEiTyZvAnMmbgJs3baR+S2L5bTyT
f0EVk38BN/96OGEwj4MSJo/DBprHCTB5HwjMG8z7cDvN+1YxeSI0MXkicvNE
/eUbNuT6+cM18z6NZc/cUMo3qXcFJ36YP5iHwnsmD0VuHmqz97C47cwgfMAb
tKhwD4mDnJp9lxO/LWJ4B8i3ZpB3AFzeQf+fvDHp4uG4zCn1yJyIBGhweiUq
QtbbpEPy+qONovG7eOywzZ8TICl39g0eYufiDH3tkSPjcbGzqml6UBSYm+ic
2NbHec//RYB2bxjuMrHokFl0GoZf6ZXk9M85/MJ8b7hqInYlWppOkA2E/oXu
+Xkc/tdY/Tky8Snoqaew6toIV+isG3LdmugPLo/Zc+RNOvonX+7cMNcI+A/s
GWtO/OboJJ24Y04GDpkQUZghchqXKi4Yr0vm/aEaNmapZeIDP4+sPSkeaGc0
b9Il4n9xibOf4vnTUbrnZrHuRh98+fuggQLRU6ohsG5PbjLy6KxOF+z0w3wB
45Wu5He7pgpJX9uTgOMi3AyjJR1x/09eqZNkfutuR9wMqI/GO03P24z1tdDI
SnW3A4fPpdRWHacVg6cuhC7y1j4Op/l3pWqQ59spp3U4i9P69fL55lo7Q3h5
PL9TzCMG6jRMHOU4+UtKc8W9U2fR5ML3e3eDIoBHQyxtAofvQ+eLlzVfqyfe
lB+jF4jLXxWNKj7lDgmytX4cPkgE5bHqsHis6+i8yLDmpWjVHLVnkyLRa3KM
R/zqA6C0dzX/bM7zzfsyV6+JxjEhRUU9IscxT3resGRiZ56BguIzhTA8e/ij
lcFLY9zicqiG870nP+WuqrC4q7PNdpUcPhWIqdcmVRySP4OL1r4JOUHW7dxk
vUx+twCMSl2iY/jUFE22v08I4sRL3yy25SX645nZgT4DtfooNvJPJIeL5NVt
etXgoDcq1c+4WxdpgEtsnjyeQc6TW3ReulnzYrUrvUb7hCu68Yxucjt1CquF
zxlz8mXVcQeNRvb6YY6XlOzTKHPkOTliKOf70643DOe0i3JOl1DOae/ZG3VA
8qxQj1uvN6/WAMj1X32V+NPDOIq/YkMABMw7++BLjD7kyEyXSyN6XlOOrRuL
Y2tn/eUt38YAkldv9mlYawqvs17f4fSZF6H+SWP5p4XyZ0VZ/Nm2u7xWTW/D
QLdBPHqs62lIbN4afI48/0B5owUs3uhtymkdzuK0LnSXzuj9FQ1HykOK9ihv
xdJf4ivPE7+9fcfwRtNZvFFnym/NZPFblSYpHhpaFwaC7dKPj/42Q+NfvJkO
nP+PUz7paKv/8kn1P6RdOXLEDVQfaIwwKfVFzcaaaSYcng7lhGZSTmg75YRy
uaWLWJzQBwfqLu8L1gdhpwVleb+i0OT2dTcO1/KQ/OuDHfe9YK7eiiszvlji
8AZvTQ5P8O7J8w52G0Mg4PPqGxEDhuBTVwS8RP9H6rdSlt/Mt4SWfheMha/2
J6I/ZQaC4povocXkHHChfihn+aGQ8luLWPzWYTpDP/J+iYfx1+YcE7nmDX1q
znLTONzJf/AuCykn9AuLE1q2W/bjOZ84qPqaH/uU1wgPLm+fn05+151yQptY
nNCSzc8f8ThGQnjVw7v+KQEYf1DjezaR96IczD0sDubPuz/L/A6GwvmFeq9/
kLxkSlvyxJfE/mTq/8Us/8+kfExVFh9zu5nBVv7mINgUGC/QcjEBN1kOzX9C
ng/b/u5L6hZvvPHQUl/BMASkLrW/X0X0iGq2dIy1UQe3wHuZIVsi4OuT4mmc
PHcZ9Y8Syz+q07f5puhZgta5x7pGo0Lgq5Fz0XcO14zyN5ey+JtTTFv8M4Yo
wMV5kjvVbthAXktqBOf7uFnLV/Pz5yqWa0ZLJdiW/uVLyrVYnnOrO4GHvrrI
LFxqj+k+fdpZA//mh/JUMpxHHRbnMWesqMg6Q2sc0iwz+9aPENSNqIy/Sexc
TDmPQ1icx2zPkKR7TyRR/Fp00hWBCMxQu+F3mPOeGOUY2rA4hl+2DfoTnjD+
RK4/lzP+x3WM/4Hr/xfM/OIRZn6BO782lCMpyuJIxt+bZfhkXgzGfPqaPWuW
Pyw9OrdEjqyfkXS82qzxKlCe4w4Wz7Fn2Tf7w4lxuMBVvCdTRQNmomtDGnlu
QnmFGSxeYSuUW3WtS0CzjP64XGVPnGuzeo8gsWcb5e4VsLh75/7BMawfI9H1
pikOp+7LXB8kH4BtRpN1Od81c7mBRSxOn5Nc4y27e8H4eZK3ULehMb6+Z2w5
idM/gfr/DMv/wym/T5bF73Njzh8MY84f4J4/x1LGHBq74SSGNub13FKOBLO7
FmdHcfrofnXb6bzIFwNn5Nx4cMQXNud6K3HqA3coPzGUxU90tP5R0dUTivs3
rvndmXsGxsrf8U74/ZdvKMLiFX70+tCddicC399ZcMBn41w8mdnBy+Edp1C+
myGL7zaJcvEcWFy8inNKKyq1w9Gjp9Kzf+NpvKzz4D2n7qFN/VnB8ud8yqeL
ZfHpWuU/fx6t6o+m+1YvHiJlgudyM09XkfE++v/o+uqoqprvb0UFKbEDCxMV
ExTF2gaimCAKYgCiGCgC0ggiJd3d3Z0qIJuwAFEswsYW49qBCu9cztyv65n3
51r8NeuuuXP2zNmz9+UT1K+tkPFrK6W+dQaMb50Vd//iN+7+RcH9+4j6sg1k
fNl+cfc43vPoucdRcI/voL5s5owvmwSNgwMTh6PK11N2DA+CttVjhmgfOgKR
sd4v3cj3vqrdds2s1BsUtRRypJT2g5iS50k5ss551DfNl/FNK6HxN2Hir3Gl
+rTm1EBokDSdNLzCErqjFq8I5eOCaHzOMvHJSM6ekXAvGoTEc2wjQ8zgRa+y
wWkk/ne4+hZGcfUtCOpbGeqbdpPxTdtD/e9KGP870c7h327cjgJ571ApW8uV
mO7/9OcPMv9W6uO2gfFxW7C7jTclLwCcd/YrcR3tgd8O3Yvl61ve5epzeMjV
5yCoz/2pb5oK45t2mPqy/WZ82Xam9dTJ4MTVySiokwV+fArMvgdVc35taoxf
2zquDsePXB2Ogjr8B1fPQwlXz6Ognu83qqcvgFFcXwCCvqCFxlmaifNKru+A
bVzfAYK+4z6Nw10mDq5cXwMfB/b0NSDoa4K5PghauD4IBX3Qfa5vAm+ub0JB
32RB49bFxG0z13/BS67/QkH/NZbr42A618ehoI/7otXT98E3ru9DQd/3mOsT
gfaJKOgTd841OTrtTTDEx8oN5q1MxBLbvC1D+TpyXB8KN7k+FAV96JDHMyYI
7zCA5oTxtkYtRfAmM//Atpc8MOP0k/EBp58MAv3kkbo5ga7V2bj7hXjWpV9F
YHN7mmH/uzyAGx/17PAMbr549dqT9lJ425YyrLKc3PurhTva+pfjsxyZQAnz
dBCvfhRXf4X03Y7Tc1NXFeMdZ+mQmxbuWKag9ebMc5KXZlxWH7SmEi8dVNS2
rLUGl2f+CXsvkXpv49quhmVVOOHJ29G+88PR0swoyZbMf/t+X9Gh26txkFHm
zn7rszCu8um0q+k8+Cm0z2tF/wrkRew55jovH2VW/H68pJIHB14rzb+oV4Lu
+jp618sKcdu0Uxd3NvIgzvnIQXvpHHTfPu/i5KpM9HoktMybxCFUQyQn+k4s
3v1Wd6BcKB4vJ6R8UOHrjfhbfgv47Y8tKyUu3FsbgIa7p1cV8/FOxfNfJw04
jCrjPU8rKO/HrRFxF3kknzi42BwsyrCEby6d+t8fnUTh1HT1ZDIeTX3ffjC+
b6KfIvxWTnTEyg22dzPlYkHn+qix08j5f748ckJ0ZBJeKOxUD7oaBBZTpdos
yHpM6H7dZfbryoyhPNGrBZgnn+rpaWsI2kGbJk56ywNd6u9WRf3d7Km/mzDd
l3q6L+V0X37oOk/ffq0AeSPrF72pC8HDO76KbergweszWtn7C3MxW0tR5J1W
HF6fHNH7yDuSz992xBioJ+LoxqF+nx4Go8rBuZaS5LzdsuZ83HQYH7c36mpq
ScVuaFx1wsTnggv6LbiSJcL/f8SrXouTOo5h9uVjd/t6OCAv/+Irvo766kzJ
US9PmoDtauNz+90tMG6yX5+bZFx3Qs3Hhx9OQ+YWWYPP0gZg8+2eJd/XQInu
yyRmX37N3qPd1BQIz4W/ibmqu4J0n+CN/P+3Kocd/d1LLwCuNHr6bamzgZEt
2a78ey2W+qbtpr5prdQ37arykqMPfJwxZFLzwehNDug0s2MaX7d/+YykR7Lb
PHGdW3zwAAkDXF4qe3EDGU/4h+9e52Jfuy3bD4DhJ4npcQOc4cp6+cP8/ws/
pPE5wsTnM/Wz82T87E79sKq6Nywe8q+3X7Fy9ge/5greU5Int1H/sk+Mf9kf
6vv2g/F9Gxb9rXrZuAKoUJ2wlXQtYOl5Z/0Tcn48qX/ZEupfto36l+2lfnCK
jB+c2saBdt5PCyE3xWVjWqIfzNh3IC//FVk/9TubyfidaflIissmZoLk2jc3
62qdcbeK47vTfJ9K6js2jPEd+0p9x54zvmM+12xO3FIPha17n4fLfAvBrpvX
N8qRcz7KTMat72ZTqJufvW/Cz9Pw59QGTf7/L64qHZmtpR8O8fg7qaw5FJ4p
RDomkfm1ady+MXHDDQdJk5gH/qfkCp7/zoaClS/WP3zyNw5zmTgYUj84WcYP
TvdcWUXy3FIwWR4u/mRrIZh0Be4ecvXf/lnTqO+YLOM7Nt928bUdIsWgt6jP
gvX7U+BL3PaXpSSfhFPfsdeM71jV5Il37m3IgureouptHu7odynzQg2JmzL1
1VrB+Gp12i29MHW/HzxZNX/K9SXFmLg5V+EQyQ9faPx/MfF/QP22zBi/rV4T
pbfvu+SEXm6tqw5HnsMk0YbS4GYexGc7Vxr1joQiu8ZnSVOzQU79gMq3DzxQ
fb4s4vrSfFhxV1Eh+2EJGLpqD3S4QfIzjc9IJj67uhy7r7QVwNABm/x8ggrh
sROuP0zmD6R+Xl8YP68xml81n8yLgb2jo97KvY0A01uxMuLkfTlV/fvHgPDT
FVtzQ6On5zr+rz/tnvWuTWV3PKYEGl/eox6OSgN3ajiS8w80bkuYuM2nvlHR
jG+U0Of0598GF+B1HSu/YeuLUfGV7Nn3t8j9SH2jYhnfqGWfzI2jZHOwWDtC
/HfnGfyU0fIt/hqp26kvki7jixTJxROzuHiiIJ4TufiDHxd/EMT/Pbe/eJvb
XxDs7xbqSzWJ8aVKOTd+78PubPwmITxS8rEHLHlytGbep7/PG8Y87yPqDyXa
y6XHH+om9YeSOLFWPU+4BMemm2qNmZ+Jert/3vFuI+/jP/yPDoStmCJ7qBQv
6o+SvKlQhL5KX6P21/318VlOfXzSqI/Pv3yR+ledHVrvV4CjNbXbr3Rm4pRx
twZuaOeBIvX9iWN8f570EY+TNotFYdV7r/MiIzDx/fSUpp//8+nDPUz8Y6kf
0D7GD+gml3+wkss/KMg/Q22P9N+xIgQTfTtfyb0KgvSVh97mkXxVcmjb7Eib
XBTqlXYlZ9Fx8Ft0U8iAxP8k9WPqc+a/fkwaSWPFhxoUYf1A+9mTDnrgiK87
f98k41X/8D+6plXcPG9/Hobm/HbbfzgQTVUSvqzi66BSvxg/xi/mwT98i4Z+
9U3ZpxaJ8f7idma/gnClf1R3Ocmf8jSesUw8j1G/mwmM383MbSPSdPeawOZB
x1+cd9fHVPO2+3w9+ZXU/yWV8X95RH1wLjM+ODrc/QuTTvfcvyC4f+2oz8tK
xuelkbvHwYa7x0Fwjz/h/F5xx4//+rw00zg8YOIwETpC5nzxQ2Hz6Wr6ttaY
WdWmfI/UCVrjH+hu/eKBlVLZj37NsUSxgMqmRWSecurDIpnN+bDIUB+WHTT+
Wkz89UovF4k0mELjy65Nx6fYg6Pa8HF8/xpdGp96Jj6Gp55ZxUinAmxWLTZJ
ioKWPV1CenzfUq6+hbNcfQuC+nYp9WHRY3xY5lA/nQrqp/OH+ulY+885Ov54
ARxZMelFmWY49D07ujGR3C+jqS+MHuMLcwo71moZ5kPd50HWyt5mWLdu7hwJ
3v/qc3Dh6nMQ1Of+1IelhPFhcaU+L3WMzwuPq5OhnquTUVAn29B9V2X8ieKp
/8tWxv9lHVeHw22uDkdBHR7H1fM4z7WnngdBPb+Y6wvgBtcXgKAv2EnjXMHE
OYLrO8Ce6ztA0HcY0ji4MnHo4voaeMv1NSDoa+5wfRD04/ogEPRBLlzfBFJc
3wSCvkkQt2Ymbm1c/wU3uf4LBf2XJNfHwXuuj0NBHzeP6/tgA9f3oaDv68P1
iaDJ9Yko6BPPmw/23/YpCM75aMsPH1CAT9L6Sy4n5yGY60PxDteHoqAPHbal
baK/yxHc+qdqytiPhXD2db6vA8nnBzm9RzzD6T2CQO9xUs726e8vOeLVW2Nz
efal8EXp6TWhxyR/ek98knEwGA3P/Wxcd6cEbqhtneVKxg2LpDavN4jBl/oL
v98ZmwJ157aHppL3Iq7EM9tKNxHlbETv7/vsjDZNreXbST3geS9nTev0JJz6
dOpO3ZiD6P5nWRPfb0iu8VSSv0QiVqXqmnW9D8ApA0RyU8m9ECFxT17lfTw2
2Dt3pJnH4/UnRyVVSV2tovGt2/1IJD4NuDlhct9ofPqk1Hs+mWf4ki+6Qp2B
OPrELRWjcWH4fu++hY7kvLnefjRcWT4QZ43V6dYfHIR+16XEVcm5GhKjYXPc
MADrNc50uEv44pkTa56+J+N71H+VHC8LwR19Jsjq7PJHr6JIhTFk/JLvAmUt
sUgccGW90L78AMyG+bUyZP49b2ryp6jG4fzhIpaXajwxe0Vnqw153+Opj8wf
6iPzgPrISC6xbRWvtYLRY8tFvpsUw82h/fYWkzrBuI9dk7aUC2aqHtm7XKoA
1u1o8TR49+/9Mpn7bvrRlbF4deex6nkDgsD91btRvcn3WlG/mL7UL+Yc9YuJ
ofsygdmXeRnRz967ROGry3kjDrxxw1Gv2i1OkOdqf7tx/Pb1gegx3n/g0yde
uLd03G9+fNqEzgQM/OyAzknT5MbMPY2rB44at6bH9+r/9oW507Vcbo67PsSk
HLhYancKq8aK5pSSz7c9eXIh79g+eKcvdsq0txeeaWyv5eNaw02qqgds3w8Z
wxbUdNUEotAKBacIvr7c7YLC6TNIPnEx+BkTFYyJ80wiJPn4Crovo5h98Vh4
4fmz5T7Q5CLcIGoeio//GL7g/248U3/xQOUcQ+iULtUd8S4e5yrEhdj++uvD
0kF9WMyoD8uI9K3L/d9FwrNap6KTUgkgYTemLobkn/LvCuOGTFmC9yZIrpKL
jCJ1revVfny9XOqzk8347DQkqly8JmaNsXD4qmGLL+zK3z/gPd83nMYniomP
JfXHCWb8cQqL79vZbTCBZTceXNn50R3crfLua3T/9XNh/VCCqI9MH+//+sjY
SS62TU0LhoroTxtbAwJgXR8dH5k//HqV80M5wvihRFF/mXrGX+b+L73J/l0J
MMtGpio+7xToVHdWZ3b+9XNxYvxTRnksXxNYEA4f3QfGSo9LQtRYtOYlea+/
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
coWaN2aXRpPn7aZ8ohSGTyTb88OJ89KYVg/yZ/C/30/0Kd9qIMO3Gtmcf352
tz8MH5+4qHV8ODQO6fwQTtaze92vuUfPpcDt/e2LJ671Adc5Jj0+L/WLC/FZ
ZCwM8vC9P6ooFvrZhPZLJ/vbSXlYlxke1g6bYXjbKgWsDe3HnA/3hBjDlZnS
5PN7/C7NGmKWCLUpZwzLjjrAhWjdVSYkniayde1JC2NgV/eRlmpVLbikc04y
nczzk/K5Whk+F8/xiEFEZBRcfyFn1ewWBXoV9z2kyLjWi1XL1yTGwpT0/Ku3
F4XDfZ+tm8X4Om+U/3WL4X9drBs6yKV/IrxN0tsBUkkA99o0lpLzv8X0bK2P
UhREjir/9UvKCWyszwyrI+u5UOxl1j/NBYZk1RUYrfDDzu0LZyaQ+E/j4okj
uHiiIJ4XNlR3HQ+Lh6KA+J9WU6NARjn8fROJw1HKLzvA8MtuTB6ze/w3d/Bp
t9n4cIozzgu28+1P9qtWSyU7BjZin+1dsi6bIvGc9Qtlfp5X2yjp+KLwKPr3
3dH6LiwCRSGtm+/350x5bUcYXpvPyTGlmyc5Q1NU/uu1H06B6hPpot1k/v33
rh9/VRSGZ0mHtbPbE39Hlt4ewcc5Uz6XOcPnWrG553tBhfteEHzvv3hwXxvb
hF3M3HFrrx9R54KdMWVubCYfX9cuxPHd0hm+WwYXZwzI7IkzCOLsnNv/yYwO
a7C7vDRlioUV5vomXufju7Kvc/y4qww/bjnlx1kz/LgbkdeqB8dF47PUQVor
58ZgPye/2dYk/jJ+KWVGveIxTDuiPvqLHo7w9RH7Rd7H1L6HVskOswfT8tDR
sl4h4Grb/KmTPO+SX5VNM90ssfP3jia39hC86//OpDdZZ7dJlvxGg3icZ3lK
t8EgCSNnCg/k19t7bk/Ti/sejd9DfH9Fi8bhs+GX67+QePr14fh6eQxfL5fy
0UYa/ZePlqzgc1NthxtuXOIadV7EGIZr3i3i62HOfrB/bIiwJ2rPu1tdWR+O
IWddH/P4OpOU97eV4f0toPy4PQw/zrd1fv14q1TMCKq3nDk8EAvcOhtuk7ru
2mW/+AV6Sbgu0C1ou2kA7nxavY6PbyynPLhuhgenQXlwzQwP7msuxysMZHiF
0rtazlbU+mCkuLz6nnQn/KwXZ9XQ9W++oUnYqSsKO9PRv+zmo9bMGIzIVZmp
St5rpRLJhsqAeAw5N+4G3gpAuUFxXlYkDzRSHuJMhoe4eZ13sEVsIjre1fow
9HsE+g6wm/CJ5L20YTnnw4UycMOBB1P2zIzH65csM2RInXlr+8dfO32TMPnY
tnm9FEIx1H+RxUjyvDzKZwxg+IwDKW9RkeEt6l40HVhLzkGOw8IcLVVXLB69
YmgDGX9ZOHnTeuVkVBuYrm2zOBIt7pZce0ri/yjirmuIfTL2VirMOhwQgtod
cmtiyTpHZ6uPEXWIxYe3VewPHI3AUyXjRVvIebbxTG5alBWJRq31qskZAdi1
6pJPL7KeCMqXdGL4kv+vrvOO5/L7/39LQ0lLe4iiqaWi0lNGi6SyskISSVbZ
W2bZe++RLVvpKSRRSCINlRIqs9D2O1evy/dz67r93rebv87tup3rvM451znP
53Ee98fcC8Hpjly+2G+e0zs9cSPeqB0W+U363ydvvqvh90TcdHhAUXmRJ84v
s9lD+WU0NjjfqCpMROvZaZf2dfuixR62z5tI+YRdSouNOuJQOiJO+vIjd+Sp
XCelQ/o/2eTbNq0VXji/9h7fETlz7GlV4qDWgUT2A5ISdwzxrLP+Vva9bvC4
t1ieipe88v/GUZDPiqNgPI7KZMXVUMeKq0GPjqtlaV0nMHSdZv7Tvzybbglv
PsUf/TNyBTgzH2SUUr4tO3sMB2WS4MfPhX2e7f5w8HNHvBPFBRppixjamQgz
dcKap73yh4qMhfLC5HclCK2+a3PbE+Fh3nfxNxF4S19rggR57wNaHyrL0Ie+
XcOTEn4uEJUEbwp2sBvi0c1Rr2Sp+UzrQFUYOlDr5qMj/Mkkjg9839vzJxi3
VCYGepN6NKwvc5qpRuOluSlqF5f7YmvlhGPU+Y8wrRvlZ+hG9WndaLDFv7rR
JSvdv0/7tgSHKqOf68R4gkSkXq0MKU/jPHyjQ9YGvm9c/HHUygTTl8d4FpNy
iUvDM/aSdT+7Xmow4Uwghu8rSRCjdM20/tSeoT9NvTLkOLrIAtsXJufJTPVC
+/6yxTNIPREW80bvFDvinc/zbbw6bEBcoEmeWse+66/yGxi+CpyNx3GaTTjw
V2YFNJN6Yll5EDiw8iAYz4M8aX3rR+1/9a0cSWFlp8Vc0KBOzNb/kDnJk7J4
DCg9FK17bWToXrV+nP86ujkQ+u8u63y/6Apkhwf3UedLjq3z31QdvwgSZ/Ly
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
6WDTRdrvSPMq9Ri8ylCaD2nH4ENesXn+ZWRnOHxTOWhun+AKV04cL6B4Jgdp
nmc0g+f5mV+yUf+XMUzN1j/2x14ZTG9VzaD2NTOOPVbJKYFQEDkk/czPDw5P
VvfiJuOoSPM/pRj8T7fY5RrHfgbDwtb0s5ucXUD5ZsAsG/J81PNLWjusyHfX
X9X0PdMOipa+KjYk/RZaLKTtJhsHVSfX52oGhkB814RFa8g8f/ZTY43vnzjg
seQuj812APW7P+6mUf4FNF/0CoMvGtc37ViDeQa8bij7ImGdBAFs0w8vJf1T
OW/mueMaBpBewv7h7Hwf+H5Qcv5E8rvu0jxSVwaP9KtGldqDp4EwYmCrtnHf
NVg7E9UDqXn7vOlIwWAAQFJr4+EbHvj1jKsbpduSYS9pef8zDCzOnU4ZOu2F
ebZvJVx+/Y9reoHBNV3qsV/SPzcU+t3nRC9dmYB4Skiyi7qvS3M7NzG4nWyW
LsLecSlg+eHkqqBLSfBii9NkLpLXrOxV2/xkTxHIuY8occ6+CTY/9WWLSdye
ajf2o9OkCMQcM7q/haRBsvR6vitNJM4pFkrWSPaEe0uvyOZPSMHDWu+yppP3
7qZ5qpYMnuolmi+6k8EX5aR5qj4MnurrSrc7bUUuaP82wGjG41BQ/Sy8iIf0
j4enf2rQjWJoW3r68ka9eGjEab3+zf2gMhQcWpYaB5P2d5l9Ec+HUskDv3RI
/P+D5qyaMDirZby/Vao35gK8KTyQ6xMDhYoCIcmkf/Y1vZuyJq0EJF8lzqwu
TwDrpHjdsEYSV1+Vvt5bnw3Lgz04PUy8cPY9hbpTZL+Lo3mthxi81hy9xybK
95JBzN82u2tTKXQvPnX7I4krdKY+OXxhXjJ0w+qRPS9zISj4V/D59//ju+5i
8F2tj1XzWzTlgKSsl/z3VeWgrz3k+i6D7MsiMpE8LdFQ/aBdP/ZrPNo6TbRP
I/uOppuhVbqCG0yzmJM/eV0Bmidpphq/64dZVX/7E3xY/Ynj/VklWb+AfUsm
bHva1qA4Pw/k2wbr28n+20zzYycz+LHsmTZX2peagVj+7uQD+wrQ4M7R1iRS
/6vJIusmTzqOf04oruhdUIKb2F0OB5F1o3FP5k4vF2tYw11b4a1WiGymk0tt
SX5qZbllX0JeCswqUxFtmRMALbvnPqgj8Rg3zbN1ZfBsOc3WlOiUucHdTFNh
XJEEo26HkqzIvuNW8tZ87NlUHGh/Z94hYARBvzbE9VP8kO+VWNrvhok/FO94
L4zD0tXbFd6QcQmgObE+DE5sCKudyMdqJ4y38zTNuV3M4Ny+qMjjtKxMgHP7
5w28tfTFnRqaik+pe/4vWPxbZQb/1obm30Yx+LclNP92H4N/e541jjiFNY4w
Po4u55q9n8dF4uLGhbcejN3GH3IpM2fV9IMav6Ob+GIT7OCWEbQKvI36Jpc0
Csh8yzx/IWB/eiy2a+l6NPdWovAbGMsLIfl4bKtK20l//K09aDB7YTGq7yp+
qEjy09bsH1ijnY4nlLjmGbT6wqz321avI783JcNjC5drEMhyZz0OvVcMhqmx
88ta+6GH5vQeYHB6tyguvTrYpIH+sn5GJqk52OJiMiOG5H3vE1jc2kAGt/YN
R0WYWkU0JnmHdRwMCoaBoAq142S8pGku7lUGF3d6zB6ThfIlWFSwhetDezw+
P/N7zQ6yLi1PeB4ZP5CNd05KHM/micI7CVFpxaT/L9H827kM/m0xzb/lZPBv
FRckGT5AI6z+2RuQcKYQ0rnV64PIfFhA84cLGfzhwymRnbV2magbPmOIc5U/
nmNfJbF88H+c4ccMznAizSWexOAST1OW/TNyqRS3O6Q92ucYgTINvzJFSN5x
bpaGAN/uSLzu6J7M2RYDZ7ILH38m8y2G5hWbMXjFS32DPcbMM3FV0x5Vy/ok
fNQto/ad8ocSvHQ0z6IIu/KctnYEe2GucvHEBBLf/m4VPHLjeC5axFtrLdGP
xcPvXDOmkvkpR3OP5Rnc4yaab1zM4Bs7TW7fV3U2FmWdxrg3S8bBJjZTEV6y
L+y029BfGpGI13mV9VXm84K/q6iVKln/XU+8SdL7mIAvnxWUPbhxHvv7jZdV
UffnwzzYrtgnYMR5Y8Psk6Xo75DUEF5P8jKXpquv3oegP7fcoR99iehQ9Wrg
I1n3QmiuchiDq6zJGyjOfpHEvVwH40Q1o/Dp/oGst6Q9Z+/N1Ip4n4VqLTFL
xTICcb6PzWMdsp57Op78OkM4AQ9d/zRDVcwC2yUHwheQeXih2exd275QXBHn
yLliljv+XnGlhZe6j8c57fgDtesokiie0KoZiMdbl8iGkPI/2ekTkTsMR8rz
9IUC7fGW2Pm1lF+zByuOwlFWHIXjcdQGVlyNr1lxNY7H1Vo0//kbg/8cpO2Y
agd6MFEpV+56ozxMHBYToO6fWB7tS0qX9wXR1af1CvMD4aC9hNxh8l67nYo/
/FRDYedxzVNh+p5Q+2nWK0ofdKD5qLrhBFE0W/E+8bN9HCgrd17aReK3IzRH
mp/Bkb73O+BQVdtl3LbOddGUU/44p9x8ShD5XrgUWLzoRgYvWrc54dsPYWeM
m30ud/aSAFBc7lxP3dd9o1o1lBmagnn6S2dUoC9yaPrVb6f4Ff/Bl3Z4yuJL
czD40gdbl95pEbCCQ6UGeXc4/bFjO2+XN6WLDO5LsGfXR9+1f6y6hT1ge+de
K3nSP2J3eUp0MAx9bxmHbNtG9qXDTiV7KB0BzakuYnCqyYT4vuLaVRzar8L5
5Z0n7FrYevMtdW/E87fv8BwffHE32ge54jCwxSzNjsyTVepRX7789IT3o5c9
N132wx+8rpJLKB3TwN88CDh4/uZBOJ4HJdMc7NMMDrayZd2mGxZ+WO+/QmFv
uw6UXX7lXU1xBmg+9nUGH7t5ZyZn7aKLsNL+7Gc/Hzd4oeDfQekf97Vxy+m8
88fUBn7/C03BuITj5E5/Mu6raZ52CoOnnU1zre8zuNZ7E15U1j5zhoVy/Bnq
+32hpN09gRr3PXsig64sCYMx8egHWg3hkDRR7hH1/691NO96L4N37crKf6GA
lf/CeP47n+Z4r/79L8d7cPL7H22e9uD+YxDjeH0gcWimVgOVr+mamuNvH1B6
0Kzs9tESPWUOr2kh5RY09/sIg/u9mOZ+xzK43xY5z3ZHzIuEc9nXzFO2BOHO
J935G6j/z04dyBAOvAirB6/N77G4DuuWLfNZR9qzunrdXK/eq/Coc/1KoXpP
mCT8oa2dvFealW+CESvfxPF8cxfNFR9hcMW1aa74LQZX3GOyTeNpzquQcURf
cz9nLh5WavU8R9bzd0H94vtsXeHFrFOSx0z9YMYznzFKN+d1X+H+sxQ/gDPe
MwJ7gqD0m9n3LuqejFL38WR5B7RTc/6Y5JGN6lwbOwRInB+ndGZdm7UB7rfL
7nBeVIhKVS+/aZE4uXiP1bOZlea4aMWtaaNG+di0gE0zn8R7t6cZ743PjAOj
8ggZVTljWOaqV8lO3een+eRmDD55E+u8AujzChw/r5CjueWpDG75Sveas1xi
eig1y982K7oQeS9+MvhE9sfFNLc8lcEtP0bzvSUZfO9m294tZZ6IkQtul33w
sMK+a2yXde+Seeija2R6wAfrzmRW8h26BX/mDY7pkHh+Ic0/X8jgn/vr7eBY
+7oIH7rOXHPgZzpY3i81n0SeN6a56NcYXPSqnfI7O7VsUH36W491Xmcx2vFA
GnX/+S3NS7dg8NJflf2yTueNhi4u3vLo3lCY9MgviY06n9ki2pTxuww1VYrk
chcE4Z7LYN56j7Rf6ZKOS0UCZInJjf1cFQJJxrc168n+xXtp3QrL3FKsqeOY
dMwtGOfNq/p1msQJK7xFq270FmJP8SbNT8URuMQrqJeT7O8PaO56A4O7PtnG
LO1dSCaszg2teCDhDw89tmeNkXkiqlL3RGnNVSg6/FouXjkBtp/ekoxkfdji
UbpfWr4IBc+nsdkVxGLcQ8clLm390LHF4ey9M7n4sXl5H8yLxeEhkY45JH4w
fMhVLfnTG20Pr61P8kvCF0sVltWS9l/9D8655ejXJ6mcp9HT2O2t2LZEnMZ2
4HsUeW+FtPbgtiENfKRwf/vk634gI60Wep/M/xTTHzcadDLwxN4qk2sj0Shb
XWofT/Zxr98sbvwk3X+58d40j305g8du4zORX1j4JsxsSD8hUO4OEfZF/NEk
XuIW95J4Fn0b+JXfL3mf4A0W6oMWxXX90EZz1/0Z3HVxmnOuwOCc3w8V5GQ7
FA8KFr/zQnbkgs/iZ0mi3f/j0j9mcOmv1SaKjuRYwIXAwYqxaYbIs+JaWy1p
f0+xLK/7yUI4ZHZtCccCW/RUb1keQuLSMJpj/4nm2LfRHHuLh3O35VTmwPQ2
u8sDL3Ih+Nd6tgskzv8TGyqpMzUCcqZUiRsFXENR8Q6F82R+7rirvyvR6RY8
8dwywZTXDzUHBqR0G0hc9PRObPDmm2AMEsdeCvjhyzqJXRtI/+ymOflCDE6+
qK6LI79/GfhPj5tjZJAPlyLfhL3K6ofRjUsCB0RyoP0jj+6ltiRwydKImUL6
oZ7m6i9gcPXVQa9oeFshiJYdbxredxNWKc1bKkbymvs6BTtrNrpjY8BK8R+2
AdhRXdA3SOZzE6/Qi4zdEuAx9bZHvpQ/RmsJtOZQ8TzN5//K4PPHcjmcSJoS
BIVr/nxtb4rDZJ0LD2VIeQTNn+dn8Oe7bj1eKcV/G/rUJ6S83pABiWoD85rJ
OhPoIjSUf6UCZsXGv1oVVgirOJs62D374ZTdqk9VopXwLbj9MVtUJvwYjE/t
DeyHoVpV3olS19CzdsaVKLV4PLzYZMoEsg5U0r4AXyv+9QU4QHPycxmc/C7a
FyCf4Qsga3Q18DJfMH4VDyh46YGgyHWk5QaSOFBd0i+5pxL4BPM3jKm4oXKO
p1VJRD8M7zHg9ilxBlMt8SX5BhXwaU5IvURaPxjRfgE2DL+AKueU3RVV5cC9
IvhTE3ccRqfs3FGdT37v4Tuu/lWV8C6pOkEo4wbyXN3dcCSgHy6XPnOxm1IO
KnsWP404VIxGEs6RWuFkH6R9B7Rp34FjtO/AhW02k852BkPbQY7oRVEI5t9W
W+wl7dduHpP7ciwHRtbGu4U434G9bNVpz8h7LWmfghSGT4G4RHv99tuJZL1Y
1jJN+R4I5L0YPu/aD/YbV6z9kp4DnPVJP05PzcczW08WXia/S66bn3w7NyHe
iftG8qxyPBUVKnaF9IMKqz/hB6s/cbw/o3m9Pxmy58EZruFFOwILYM/8t2nz
yPyUoH0QnBk+CB+sy7i3SkTAeZcpGuzTC3DBFYMH2mT/ta9Re7H8bQrwS67Q
SL16G3kwVp69iuRl7m+UpvYkQOklk0tRF/OxTmBqYDrZH1eVtVSfUcsDoSPl
m4XsroNXUsrgra5+mE37MsgzfBkyVx1WaGyXRsP7vCtvRyRCdF18lgqZ5/18
+y9cPGWBW40KTVpITCRqL1xN6SK33IvbG+Pkij9/WW5S4EnEYRcXzo3keVva
74CL4XfQx2onlrDaCePt/EP7NQgy/BpCb9+Wda/JhequuiVPwnJQ8M5Svl6y
LlnRPg7dDB+HZNrHYSHDx4Gf9nFIYPg4KLLGEWNZ4wjj4zgwfH3SJ3tXzDpi
9uf04bs4d/sFERsyf+7HPXF1HE0G9Y/XnlmuuYcYsd5yhVs/dNuZb9PZZYH2
7uX21WdrMNxJIq1Srx8a+n3E7hraww3twKDcoUqsk5/WdIN8R/HD12Y8XlGO
vkMOt473F4L4wbO7w6L6YZ5TetwEoUi0W7JXdCS+El7M45vwljy/k/abSGL4
Tawamc4VrRkHh3T2/VIpK0PZ4XeF9yv74Trre0dk+C9E77m+Xsk2DzsUF39d
ejMLKn5JKZiQ+cb2H/4O21K8drl/qMTg036GCakKYKpZ8U0jsh82RjlXd566
gzwjo4cWh4Wh2tKclFvkvVK0jwMwfByW0z4ONxk+DtNiuB/NO6ME25ZtO/fp
VTw8cutUMaC4E7SPxjGGj0ZCtLZfdVo+Lt6UsUIkxx8fd8crvCf1DNB+GSYM
vwwr2l+jjeGv0ZGzJbh6rBLNp77t4B9NwqYGfZG7ZP1Z23ysy+B6NPKEzZ7f
4REH95qniV0jcUgD7buhyfDdyH+Xq95ytBDLmxICFS7l4I5tw3N7yT64UNKy
LEGgCkMG+L/dnnsDm1NHVgX6kO9oIYeum1Y53ip+ueGuXS7OnbPuutSNfvCh
/TsaGP4d08tZPh2tDJ8O5wM9qsbseVhRmrIn0iMf1ljYYXM9yQc/pDUNr0pH
5VN2fAoqQZBZe31JIYkTdng72WXvzcUiJZ69o4YhwCHiJSnxqR8eF6mVzipM
Q9Pnvy9HPLuLR4NEPxQnknU7+WrL4VsJmKc8GvjrTik+2PvFetajfrhJ+4OE
M/xB7gsdLazedxNXBMlEso3k4X2XKxYCTWTfEX51ot7gDi5eeWFE2C0WYhJ+
VcSQfdD2mewhsw/56Pm884OccxjcO756bElHPwQkWNmHD+bjBbm0OMV1FuCW
y616jsTzZ4XZ2YN93TB74XzV/fuKUXv+g+obZB0Q2sOzqDc5Ge/YfpNpscjF
Js73WS/I809YcRSqseIoHI+jnrPiauxhxdU4HlfH0D4mxrSPSSftY8KZMMrX
KG8HL6xdJ4g7quDl5FS3SkpXsjbnVPDdYpD+OZPr0NSr4FDzR34X+Y6kq8Hj
4NwCqLmpPvahVgp33R+8u5O0x/pi7uszrokgEnI389XGELj+rbdJlswrYdoP
ZSPDD6Vw9uefSY/yUEzG+MDyrX74067OSYrM/4Hw/7/vyfLyXi+LziRoW6cd
savLD7xVPluKkvp1Y2u07VzLkOuuU3nIgzjcmOv/VpnsF5dpn5TpDJ8UK9on
5RfDJ6XhtUaFf2cGbnn+nXdRmh8KhdnlFA9SOsf2lZvs0+HDwEjeuwRfsLxs
u2vxF9Jv/MeXmq4yw+jGBYvUXIPA9lbQdEqfa/Mffiu9XRfj8sKSoOaaBF93
YhDceR386TXF626dVbW/OBeL7ZyTx2an4VfvwpQCsg9a8iy4dcU9EbUebu3i
u3cdH83UrA0j/baLlQfhJvG/eRCO50FGtJ+LHsPPhXPnlBrXdgcccyl5hDH+
UP956YgaaWc47fMSV/Cvz4v4boMl93JzYNnuoZu6Em6g6rtIdXofiWNzU7e5
NCXi2e9XZu03voFza3knLCb5hQPtC/OS4QvTTPuzODL8WXbYz0hULM2HQa88
tRnJLvAr9XM9dR9vmYvPBLnaclDorfDQCbeHlX6ia76R7+4Q7duynuHbIs7K
f0GQlf/CeP6bfIvlR/OM4Ucz8ffS9X65WbB0oGdS4axYEPr2/fZe8rysp9GR
/Su1sVT7bryFli9yDFju6CX9c4f2r1nG8K9xo/1rShn+NTPvZPFXRifD1lXf
li7NjcfzHBOG3Mm6NF+6q1boeAGMxPg2VeTEwlXfj3o7yL6/pkBaVky0GGZq
TZrirhoJyQmtzyY8I3E4K9/E56x8E8fzzXe0P04Kwx8nlfbH+cnwxzkZbt7w
67EJfDy2fdqNtCTcmLd/TwCZP+vNh8O8J98GMwW9m482hMD6vMc3c0mclhDI
Jzw0uRw2t+S2PlIMhmX7KgxTy8g+fu+d4fPyUBRITDyqUhWBU3K+1FP/12uT
1NM+MscNbz6K4jdPC8ES2+3N1LnuN5VG6xWHXJCzvd/t12Y/1I04E3+e9JvB
m/t9+eqFcGGorJO7MB29bdYdiCT71x/aZ4eT4bOz1PvveQWUsM4rcIw+r8il
/XfkGf47M8uKVDYnmqNPk7P5oUPheHZDj9YG0p7y//Df+X8Xq/9L
             "]], {
           Axes -> True, 
            AxesLabel -> {
             "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
              "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, 
            BoxRatios -> {1, 1, 0.4}, ImageSize -> {380, 380}, 
            Method -> {"RotationControl" -> "Globe"}, 
            PlotRange -> {{-2.709857394019914, 
             2.709857394019914}, {-1.7138642998702553`, 
             1.7138642998702553`}, {0.09259458092137765, 0.7486122776543305}},
             PlotRangePadding -> {
              Scaled[0.02], 
              Scaled[0.02], 
              Scaled[0.02]}}], $CellContext`couplingLocator := LocatorPane[
           Dynamic[FE`u$$133, (FE`u$$133 = If[First[
                 Dimensions[#]] < 3, 
               Flatten[{FE`locDefault$$133, FE`mLocDefault$$133}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[FE`rawArrayOfMasses$$133]]; 
              If[$CellContext`rm$ > $CellContext`nMassesFromU, 
                FE`rawArrayOfMasses$$133 = 
                Take[FE`rawArrayOfMasses$$133, $CellContext`nMassesFromU], 
                
                While[$CellContext`rm$ < $CellContext`nMassesFromU, 
                 AppendTo[FE`rawArrayOfMasses$$133, FE`defaultMass$$133]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[FE`kArray$$133, All, 1], All, 1]]; 
              If[$CellContext`km$ > $CellContext`nMassesFromU, FE`kArray$$133 = 
                Select[FE`kArray$$133, Max[{
                    Part[#, 1], 
                    Part[#, 2]}] <= $CellContext`nMassesFromU& ], 
                
                While[$CellContext`km$ < $CellContext`nMassesFromU, 
                 Increment[$CellContext`km$]; 
                 FE`kArray$$133 = \
$CellContext`growKarray[$CellContext`km$]]]]; Part[FE`u$$133, 1] = If[Dot[
                 Part[FE`u$$133, 1], 
                 Part[FE`u$$133, 1]] < FE`minSquaredDistanceFromOrigin$$133, 
               Part[FE`locDefault$$133, 1], 
               Part[FE`u$$133, 1]]; Part[FE`u$$133, 2] = If[Dot[
                 Part[FE`u$$133, 2], 
                 Part[FE`u$$133, 2]] < FE`minSquaredDistanceFromOrigin$$133, 
               Part[FE`locDefault$$133, 2], 
               Part[FE`u$$133, 2]]; {
               Part[FE`u$$133, 1], 
               Part[
               FE`u$$133, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[
              FE`minAngleBetweenLatticeVectors$$133]; 
            FE`rawNumberOfMasses$$133 = $CellContext`nMassesFromU; 
            FE`m1Sel$$133 = 
             If[FE`m1Sel$$133 > FE`rawNumberOfMasses$$133, 1, FE`m1Sel$$133]; 
            FE`m2Sel$$133 = 
             If[FE`m2Sel$$133 > FE`rawNumberOfMasses$$133, 1, FE`m2Sel$$133]; 
            FE`moSel$$133 = 
             If[FE`moSel$$133 > FE`rawNumberOfMasses$$133, 1, FE`moSel$$133]; 
            FE`moSel$$133 = $CellContext`adjustedmoSel; 
            FE`k1$$133 = $CellContext`kArraySelect[1]; 
            FE`k2$$133 = $CellContext`kArraySelect[2]; 
            FE`k3$$133 = $CellContext`kArraySelect[3]; 
            FE`k4$$133 = $CellContext`kArraySelect[4]; 
            FE`k5$$133 = $CellContext`kArrayOriginSelect; 
            FE`parameterLocatorDependencies$$133 = $CellContext`locDependent; 
            FE`qLoc$$133 = 
             ReplaceAll["qMaxVec", FE`parameterLocatorDependencies$$133]/2; 
            FE`qPlaneLoc$$133 = {-FE`qLoc$$133, FE`qLoc$$133}; 
            FE`couplingData$$133 = $CellContext`calculateCouplings; 
            FE`bRefreshMatrix$$133 = True; 
            FE`tick$$133 = Not[FE`tick$$133])& ], $CellContext`plotSprings, 
           LocatorAutoCreate -> True, ContinuousAction -> False], 
         FE`u$$133 = {{0.04400000000000004, 1.295}, {1.9, 0.8}, {0.9, 0.7}, {
          0.4, 1.2}}, FE`locDefault$$133 = {{0.1, 1.3}, {1.9, 0.8}}, 
         FE`mLocDefault$$133 = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
         Attributes[$CellContext`rm$] = {Temporary}, 
         Attributes[$CellContext`km$] = {Temporary}, 
         FE`rawArrayOfMasses$$133 = {10, 15}, $CellContext`nMassesFromU := 
         First[
            Dimensions[FE`u$$133]] - 2, FE`defaultMass$$133 = 20, 
         FE`kArray$$133 = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
           0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 
           0.25, {1, 1, {1, 0}} -> 0.25, {1, 1, {0, 1}} -> 
           0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
           0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 
           0.25, {1, 2, {-1, -1}} -> 0.25, {1, 2, {-1, 1}} -> 
           0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
           0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 
           0.25, {1, 2, {0, 0}} -> 0.25, {2, 1, {-1, 0}} -> 
           0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
           0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 
           0.25, {2, 1, {0, 1}} -> 0.25, {2, 1, {1, 1}} -> 
           0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
           0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 
           0.25, {2, 2, {-1, 1}} -> 0.25, {2, 2, {1, 0}} -> 
           0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
           0.25, {2, 2, {1, -1}} -> 0.25}, $CellContext`growKarray[
           Pattern[$CellContext`nmNew$, 
            Blank[Integer]]] := 
         Module[{$CellContext`k2$}, $CellContext`k2$ = Flatten[
              Map[$CellContext`constructKArrayElements[
                Part[#, 1], 
                Part[#, 2]]& , 
               Select[
                Flatten[
                 
                 Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew$}, {$CellContext`j, $CellContext`nmNew$}], 1], 
                Max[#] == $CellContext`nmNew$& ]], 2]; 
           Flatten[{FE`kArray$$133, $CellContext`k2$}, 1]], 
         Attributes[$CellContext`nmNew$] = {Temporary}, 
         Attributes[$CellContext`k2$] = {
          Temporary}, $CellContext`constructKArrayElements[
           Pattern[$CellContext`i$, 
            Blank[Integer]], 
           Pattern[$CellContext`j$, 
            Blank[Integer]]] := 
         Module[{$CellContext`a$}, $CellContext`a$ = Flatten[
              
              Table[{$CellContext`i$, $CellContext`j$, $CellContext`s 
                 Part[FE`nArray$$133, $CellContext`n]} -> 
               Part[FE`kDefaults$$133, $CellContext`n], {$CellContext`s, -1, 
                1, 2}, {$CellContext`n, 4}], 1]; 
           If[$CellContext`i$ < $CellContext`j$, 
             
             Append[$CellContext`a$, {$CellContext`i$, $CellContext`j$, {0, 
                0}} -> Part[FE`kDefaults$$133, 5]], $CellContext`a$]], 
         Attributes[$CellContext`i$] = {Temporary}, 
         Attributes[$CellContext`j$] = {Temporary}, 
         FE`nArray$$133 = {{1, 0}, {0, 1}, {1, 1}, {1, -1}}, 
         FE`kDefaults$$133 = {0.25, 0.25, 0.25, 0.25, 0.25}, 
         FE`minSquaredDistanceFromOrigin$$133 = 
         0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
           Pattern[$CellContext`minAngle$, 
            Blank[]]] := Module[{$CellContext`t$}, $CellContext`t$ = Abs[
              ArcCos[
               Dot[
                Normalize[
                 Part[FE`u$$133, 1]], 
                Normalize[
                 Part[FE`u$$133, 2]]]]]; $CellContext`t$ = 
            If[$CellContext`t$ > Pi/2, Pi - $CellContext`t$, $CellContext`t$]; 
           If[$CellContext`t$ < $CellContext`minAngle$, FE`locDefault$$133, {
              Part[FE`u$$133, 1], 
              Part[FE`u$$133, 2]}]], 
         Attributes[$CellContext`minAngle$] = {Temporary}, 
         FE`minAngleBetweenLatticeVectors$$133 = Pi/6, 
         FE`rawNumberOfMasses$$133 = 2, FE`m1Sel$$133 = 1, FE`m2Sel$$133 = 1, 
         FE`moSel$$133 = 2, $CellContext`adjustedmoSel := 
         If[FE`rawNumberOfMasses$$133 > 2, 
           If[FE`moSel$$133 == FE`m1Sel$$133, 
            First[
             DeleteCases[
              Range[FE`rawNumberOfMasses$$133], FE`m1Sel$$133]], 
            FE`moSel$$133], 
           First[
            Delete[
             Range[2], FE`m1Sel$$133]]], FE`k1$$133 = 
         0.25, $CellContext`kArraySelect[
           Pattern[$CellContext`ni$, 
            Blank[Integer]]] := ReplaceAll[{FE`m1Sel$$133, FE`m2Sel$$133, 
            Part[FE`nArray$$133, $CellContext`ni$]}, FE`kArray$$133], 
         Attributes[$CellContext`ni$] = {Temporary}, FE`k2$$133 = 0.25, 
         FE`k3$$133 = 0.25, FE`k4$$133 = 0.25, FE`k5$$133 = 
         0.25, $CellContext`kArrayOriginSelect := ReplaceAll[
           Append[
            Sort[{FE`m1Sel$$133, FE`moSel$$133}], {0, 0}], 
           FE`kArray$$133], $CellContext`locDependent := 
         Module[{$CellContext`m$, $CellContext`latticeBasis$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`reciprocalBasis$, \
$CellContext`mObliqueComponents$, $CellContext`mPosFirstCell$, \
$CellContext`reciprocalNorms$}, $CellContext`latticeBasis$ = 
            Take[FE`u$$133, 2]; $CellContext`m$ = 
            Drop[FE`u$$133, 2]; $CellContext`numberLatticeLinesToDisplay$ = 
            Map[Ceiling[
               Abs[FE`windowHalfWidth$$133/Part[
                 Part[$CellContext`latticeBasis$, #], #]]]& , 
              Range[
              2]]; $CellContext`reciprocalBasis$ = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis$]; \
$CellContext`reciprocalNorms$ = Map[Norm[
               Part[$CellContext`reciprocalBasis$, #]]& , 
              Range[2]]; $CellContext`mObliqueComponents$ = Table[
              Dot[
               Part[$CellContext`m$, $CellContext`i], 
               
               Part[$CellContext`reciprocalBasis$, $CellContext`j]], \
{$CellContext`i, FE`rawNumberOfMasses$$133}, {$CellContext`j, 
               2}]; $CellContext`mPosFirstCell$ = 
            Map[Part[$CellContext`m$, #] - Dot[
               Floor[
                
                Part[$CellContext`mObliqueComponents$, #]], \
$CellContext`latticeBasis$]& , 
              Range[FE`rawNumberOfMasses$$133]]; {
            "mScalarArray" -> FE`rawArrayOfMasses$$133, "numberOfMasses" -> 
             FE`rawNumberOfMasses$$133, 
             "latticeBasis" -> $CellContext`latticeBasis$, "latticeNorms" -> 
             Map[Norm[
                Part[$CellContext`latticeBasis$, #]]& , 
               Range[2]], "latticeUnitVectors" -> Map[Normalize[
                Part[$CellContext`latticeBasis$, #]]& , 
               Range[2]], 
             "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay$, 
             "reciprocalBasis" -> $CellContext`reciprocalBasis$, 
             "reciprocalNorms" -> $CellContext`reciprocalNorms$, "qMaxVec" -> 
             2 Pi $CellContext`reciprocalNorms$, 
             "mObliqueComponents" -> $CellContext`mObliqueComponents$, 
             "mPosFirstCell" -> $CellContext`mPosFirstCell$, 
             "pointsDataTable" -> Map[$CellContext`pointsTable[
                
                Part[$CellContext`mPosFirstCell$, #], \
$CellContext`latticeBasis$, $CellContext`numberLatticeLinesToDisplay$]& , 
               Range[FE`rawNumberOfMasses$$133]], "lineTable" -> 
             Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay$, $CellContext`latticeBasis$, #]& , 
               Permutations[{1, 2}]]}], $CellContext`calcReciprocalBasis[
           Pattern[$CellContext`loc, 
            Blank[List]]] := Inverse[
           Transpose[$CellContext`loc]], $CellContext`pointsTable[
           Pattern[$CellContext`mPosFirstCell, 
            Blank[List]], 
           Pattern[$CellContext`latticeBasis, 
            Blank[List]], 
           Pattern[$CellContext`numberLatticeLinesToDisplay, 
            Blank[List]]] := 
         Table[$CellContext`mPosFirstCell + 
           Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
            Part[$CellContext`numberLatticeLinesToDisplay, 
             1]}, {$CellContext`j, -
            Part[$CellContext`numberLatticeLinesToDisplay, 2], 
            
            Part[$CellContext`numberLatticeLinesToDisplay, 
             2]}], $CellContext`calcLineTable[
           Pattern[$CellContext`n, 
            Blank[List]], 
           Pattern[$CellContext`b, 
            Blank[List]], 
           Pattern[$CellContext`i, 
            Blank[List]]] := 
         Module[{$CellContext`first, $CellContext`second}, \
{$CellContext`first, $CellContext`second} = $CellContext`i; Table[
             
             Line[{(-Part[$CellContext`n, $CellContext`first]) 
                Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                Part[$CellContext`b, $CellContext`second], 
               Part[$CellContext`n, $CellContext`first] 
                Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, \
-Part[$CellContext`n, $CellContext`second], 
              
              Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`calculateCouplings := 
         Module[{$CellContext`t$, $CellContext`t1$, $CellContext`t2$, \
$CellContext`r$, $CellContext`mp$, $CellContext`numberOfMasses$}, \
{$CellContext`r$, $CellContext`mp$, $CellContext`numberOfMasses$} = 
            ReplaceAll[{"latticeBasis", "mPosFirstCell", "numberOfMasses"}, 
              FE`parameterLocatorDependencies$$133]; $CellContext`t$ = 
            Map[Append[#, 
               $CellContext`relativeDifferences[$CellContext`r$, \
$CellContext`mp$, 
                First[#]]]& , 
              ReplaceAll[FE`kArray$$133, Rule -> List]]; $CellContext`t$ = 
            Map[Flatten[{
                Part[#, 1], {
                 Part[#, 2]}, 
                Part[#, 3]}, 1]& , $CellContext`t$]; $CellContext`t1$ = Table[
              Sort[
               
               Select[$CellContext`t$, And[
                Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
               Part[#, 5] < 
               Part[#2, 
                 5]& ], {$CellContext`i, $CellContext`numberOfMasses$}]; \
$CellContext`t2$ = 
            Select[$CellContext`t$, Part[#, 3] == {0, 0}& ]; $CellContext`t2$ = 
            Flatten[{$CellContext`t2$, 
               Map[Flatten[{{
                   Part[#, 2], 
                   Part[#, 1]}, 
                  Drop[#, 2]}, 1]& , $CellContext`t2$]}, 1]; $CellContext`t2$ = 
            Table[
              Sort[
               Select[$CellContext`t2$, Part[#, 1] == $CellContext`i& ], 
               Part[#, 5] < 
               Part[#2, 
                 5]& ], {$CellContext`i, $CellContext`numberOfMasses$}]; \
{$CellContext`t2$, $CellContext`t1$}], $CellContext`relativeDifferences[
           Pattern[$CellContext`r, 
            Blank[List]], 
           Pattern[$CellContext`mp, 
            Blank[List]], {
            Pattern[$CellContext`mIndex1, 
             Blank[Integer]], 
            Pattern[$CellContext`mIndex2, 
             Blank[Integer]], 
            Pattern[$CellContext`n, 
             Blank[List]]}] := 
         Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther}, \
$CellContext`pOrigin = 
            Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
            Part[$CellContext`mp, $CellContext`mIndex2] + 
             Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
            Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], $CellContext`dn = 
         3.6897609999999994`, $CellContext`projOpU[
           Pattern[$CellContext`v, 
            Blank[List]]] := {{
           Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
            Part[$CellContext`v, 2]}, {
           Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
            Part[$CellContext`v, 2]^2}}, FE`bRefreshMatrix$$133 = True, 
         FE`tick$$133 = True, $CellContext`plotSprings := 
         Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, \
$CellContext`latticeBasis$ = Take[FE`u$$133, 2]; $CellContext`aLoc$ = 
            Part[FE`u$$133, 1]; $CellContext`bLoc$ = 
            Part[FE`u$$133, 
              2]; {$CellContext`mLoc$, $CellContext`reciprocalBasis$, \
$CellContext`pointsDataTable$, $CellContext`numberLatticeLinesToDisplay$, \
$CellContext`lines$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
            ReplaceAll[{
              "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
               "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
               "numberOfMasses"}, 
              FE`parameterLocatorDependencies$$133]; $CellContext`pointsList$[
              Pattern[$CellContext`n$, 
               Blank[Integer]]] := {
              $CellContext`massColors[$CellContext`n$], Null, 
              PointSize[
               Sqrt[
               Part[$CellContext`mScalarArray$, $CellContext`n$] 
                FE`mMax$$133^(-1)/500]], 
              Map[Point[#]& , 
               Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
              Text[
               $CellContext`massLabel[$CellContext`n$], 
               Part[$CellContext`mLoc$, $CellContext`n$] + 
               FE`textDisOffset$$133]}; $CellContext`cOrigin$ = Select[
              Part[
               Part[FE`couplingData$$133, 1], FE`m1Sel$$133], 
              Take[#, 2] == {
               FE`m1Sel$$133, FE`moSel$$133}& ]; $CellContext`cN$ = Select[
              Part[
               Part[FE`couplingData$$133, 2], FE`m1Sel$$133], 
              Take[#, 2] == {
               FE`m1Sel$$133, FE`m2Sel$$133}& ]; $CellContext`g$ = 
            Map[ListLinePlot[
               $CellContext`springPoints[
                Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
               ReplaceAll[
                 Part[#, 3], FE`springColorsByN$$133]]& , $CellContext`cN$]; 
           If[$CellContext`numberOfMasses$ > 1, 
             AppendTo[$CellContext`g$, 
              Map[ListLinePlot[
                $CellContext`springPoints[
                 Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
                ReplaceAll[
                  Part[#, 3], 
                  FE`springColorsByN$$133]]& , $CellContext`cOrigin$]], Null]; 
           Show[{
              Graphics[
               Flatten[{{$CellContext`lines$, Blue, 
                  Map[Arrow[{{0, 0}, 
                    Part[$CellContext`reciprocalBasis$, #]}]& , 
                   Range[2]], Thick, 
                  Arrowheads[0.05], Red, 
                  Map[Arrow[{{0, 0}, 
                    Part[$CellContext`latticeBasis$, #]}]& , 
                   Range[2]], 
                  Text[
                   OverVector["a"], $CellContext`aLoc$/2 + 
                   FE`textDisOffset$$133], 
                  Text[
                   OverVector["b"], $CellContext`bLoc$/2 + 
                   FE`textDisOffset$$133]}, 
                 Map[$CellContext`pointsList$[#]& , 
                  Range[$CellContext`numberOfMasses$]]}], 
               PlotRange -> {{-FE`windowHalfWidth$$133/2, 
                  FE`windowHalfWidth$$133}, {-FE`windowHalfWidth$$133/2, 
                  FE`windowHalfWidth$$133}}, ImageSize -> 
               FE`primaryDisplaySize$$133], $CellContext`g$}]], 
         Attributes[$CellContext`aLoc$] = {Temporary}, 
         Attributes[$CellContext`bLoc$] = {Temporary}, 
         Attributes[$CellContext`mLoc$] = {Temporary}, 
         Attributes[$CellContext`pointsList$] = {Temporary}, 
         Attributes[$CellContext`cOrigin$] = {Temporary}, 
         Attributes[$CellContext`cN$] = {Temporary}, 
         Attributes[$CellContext`g$] = {Temporary}, 
         Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
         Style[
           $CellContext`indexLabel["m", #], 
           $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
           Style[#, Italic], #2]& , Attributes[Subscript] = {NHoldRest}, 
         FE`textDisOffset$$133 = {0.25, 0.25}, $CellContext`springPoints[
           Pattern[$CellContext`a12, 
            Blank[List]], 
           Optional[
            Pattern[$CellContext`n, 
             Blank[Integer]], 8], 
           Optional[
            Pattern[$CellContext`h, 
             Blank[]], 0.05], 
           Optional[
            Pattern[$CellContext`f, 
             Blank[]], 0.1]] := 
         Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
            Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
            Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
              Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
            Dot[$CellContext`r, {$CellContext`n1, 0}]; {
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                   2 $CellContext`f) $CellContext`nd, $CellContext`h 
                 Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 
               0, 1, 0.01}], 
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                   2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
         FE`springColorsByN$$133 = {{-1, 0} -> 
           RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
           RGBColor[0, 2/3, 0], {-1, -1} -> 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
           RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
           RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
           RGBColor[0, 2/3, 0], {1, 1} -> 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
           RGBColor[0, 2/3, 2/3]}, $CellContext`dynamicsControls := {
           Row[{
             OverVector["q"], " = ", 
             
             Module[{$CellContext`qm$}, $CellContext`qm$ = 
               ReplaceAll["qMaxVec", FE`parameterLocatorDependencies$$133]; 
              Slider2D[
                Dynamic[
                FE`qLoc$$133, (FE`qLoc$$133 = #; 
                 FE`bRefreshDynamics$$133 = True; 
                 FE`tick$$133 = Not[FE`tick$$133])& ], 
                ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
             " 2 \[Pi] ", 
             Dynamic[
              NumberForm[
               MatrixForm[FE`qLoc$$133/(2 Pi)], {3, 2}]]}], 
           Row[{
             Text["time, normalized to one period:"]}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`tau$$133, (
               FE`tau$$133 = $CellContext`checkAgainstRange[#, 0, 0, 1]; 
               FE`tick$$133 = Not[FE`tick$$133])& ], {0, 1}, ImageSize -> 
              Tiny, ContinuousAction -> True, Appearance -> "Open"]}, 
            ImageSize -> {200, 60}], 
           Row[{
             Text["oscillation scale factor:"]}], 
           Row[{Manipulator[
               Dynamic[
               FE`scale$$133, (
                FE`scale$$133 = $CellContext`checkAgainstRange[#, 0.05, 0.05, 
                   1]; FE`bRefreshDynPlot$$133 = True; 
                FE`tick$$133 = Not[FE`tick$$133])& ], {0.05, 1}, ImageSize -> 
               Tiny, ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}] " ", 
             Dynamic[
              NumberForm[FE`scale$$133, {3, 2}]]}], 
           Text[
            Text["Angular frequency \[Omega](q), selection:"]], 
           Dynamic[
            SetterBar[
             Dynamic[
             FE`omegaIndex$$133, (FE`omegaIndex$$133 = #; 
              FE`bRefreshDynPlot$$133 = True; 
              FE`tick$$133 = Not[FE`tick$$133])& ], 
             Range[2 FE`rawNumberOfMasses$$133]]]}, 
         Attributes[$CellContext`qm$] = {Temporary}, FE`bRefreshDynamics$$133 = 
         False, FE`tau$$133 = 0, $CellContext`checkAgainstRange[
           Pattern[$CellContext`v, 
            Blank[]], 
           Pattern[$CellContext`default, 
            Blank[]], 
           Pattern[$CellContext`lowerLimit, 
            Blank[]], 
           Pattern[$CellContext`upperLimit, 
            Blank[]]] := 
         Module[{$CellContext`result}, $CellContext`result = If[
              
              NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
            If[$CellContext`result < $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
            If[$CellContext`result > $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
         FE`bRefreshDynPlot$$133 = False, $CellContext`freqControls := {
           Row[{
             Text["mesh size "], 
             Manipulator[
              Dynamic[
              FE`meshSize$$133, (
               FE`meshSize$$133 = $CellContext`checkAgainstRange[#, 8, 2, 30]; 
               FE`bRefreshFreqPlot$$133 = True; 
               FE`tick$$133 = Not[FE`tick$$133])& ], {2, 30, 2}, ImageSize -> 
              Tiny, ContinuousAction -> False, 
              AppearanceElements -> {"InputField"}], " ", 
             Dynamic[FE`meshSize$$133]}], 
           LocatorPane[
            Dynamic[FE`qPlaneLoc$$133], 
            Dynamic[
             (Graphics[{
               Lighter[Gray], 
               Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                  Part[#, 1], -Part[#, 2]}, {
                  Part[#, 1], 
                  Part[#, 2]}, {-Part[#, 1], 
                  Part[#, 2]}}], Black, 
               Line[FE`qPlaneLoc$$133]}, PlotRange -> {{-Part[#, 1], 
                  Part[#, 1]}, {-Part[#, 2], 
                  Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
              ReplaceAll["qMaxVec", FE`parameterLocatorDependencies$$133]]], 
            ContinuousAction -> False]}, FE`bRefreshFreqPlot$$133 = 
         False, $CellContext`massSetter := {
           Row[{
             Text["mass: "], 
             Dynamic[
              If[FE`rawNumberOfMasses$$133 > 1, 
               SetterBar[
                Dynamic[
                FE`m1Sel$$133, (
                 FE`m1Sel$$133 = #; $CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", FE`parameterLocatorDependencies$$133], 
                    FE`m1Sel$$133]; FE`k1$$133 = $CellContext`kArraySelect[1]; 
                 FE`k2$$133 = $CellContext`kArraySelect[2]; 
                 FE`k3$$133 = $CellContext`kArraySelect[3]; 
                 FE`k4$$133 = $CellContext`kArraySelect[4]; 
                 FE`moSel$$133 = $CellContext`adjustedmoSel; 
                 FE`k5$$133 = $CellContext`kArrayOriginSelect; 
                 FE`tick$$133 = Not[FE`tick$$133])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 Range[FE`rawNumberOfMasses$$133]]], 
               $CellContext`massLabel[1]]]}], 
           Row[{
             Manipulator[
              
              Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, FE`mMax$$133]; 
               Part[FE`rawArrayOfMasses$$133, 
                  FE`m1Sel$$133] = $CellContext`massValue; 
               FE`parameterLocatorDependencies$$133 = 
                ReplaceAll[
                 FE`parameterLocatorDependencies$$133, ("mScalarArray" -> 
                   Blank[]) :> ("mScalarArray" -> FE`rawArrayOfMasses$$133)]; 
               FE`bRefreshMatrix$$133 = True; 
               FE`tick$$133 = Not[FE`tick$$133])& ], {0.25, 
               Dynamic[FE`mMax$$133]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              
              NumberForm[$CellContext`massValue, {2, 
               1}]]}]}, $CellContext`massValue = 
         13.100000000000001`, $CellContext`m2Setter := {
           Text["coupling to neighbouring: "], 
           Dynamic[
            If[FE`rawNumberOfMasses$$133 > 1, 
             SetterBar[
              Dynamic[
              FE`m2Sel$$133, (FE`m2Sel$$133 = #; 
               FE`k1$$133 = $CellContext`kArraySelect[1]; 
               FE`k2$$133 = $CellContext`kArraySelect[2]; 
               FE`k3$$133 = $CellContext`kArraySelect[3]; 
               FE`k4$$133 = $CellContext`kArraySelect[4]; 
               FE`tick$$133 = Not[FE`tick$$133])& ], 
              Map[# -> $CellContext`massLabel[#]& , 
               Range[FE`rawNumberOfMasses$$133]]], 
             $CellContext`massLabel[1]]]}, $CellContext`km1 := {
           Row[{
             Text["horizontal: "], 
             $CellContext`kLable[1], " || ", 
             OverVector["a"], " "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k1$$133, (
               FE`k1$$133 = $CellContext`checkAgainstRange[#, FE`kMin$$133, 
                  FE`kMin$$133, FE`kMax$$133]; 
               FE`kArray$$133 = $CellContext`alterKArrayElements[
                 1, FE`k1$$133]; 
               FE`couplingData$$133 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$133 = True; 
               FE`tick$$133 = Not[FE`tick$$133])& ], {
               Dynamic[FE`kMin$$133], 
               Dynamic[FE`kMax$$133]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[FE`k1$$133, {3, 2}]]}]}, $CellContext`kLable = Style[
           $CellContext`indexLabel["k", #], FontColor -> 
           Part[FE`springColors$$133, #]]& , FE`springColors$$133 = {
           RGBColor[2/3, 0.33333333333333337`, 0], 
           RGBColor[0, 2/3, 0], 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
           RGBColor[0, 2/3, 2/3], 
           RGBColor[2/3, 2/3, 0]}, FE`kMin$$133 = 0.05, FE`kMax$$133 = 
         1, $CellContext`alterKArrayElements[
           Pattern[$CellContext`ni$, 
            Blank[Integer]], 
           Pattern[$CellContext`v$, 
            Blank[]]] := 
         ReplaceAll[FE`kArray$$133, {({FE`m1Sel$$133, FE`m2Sel$$133, 
               Part[FE`nArray$$133, $CellContext`ni$]} -> 
             Blank[]) :> ({FE`m1Sel$$133, FE`m2Sel$$133, 
               Part[FE`nArray$$133, $CellContext`ni$]} -> $CellContext`v$), ({
              FE`m1Sel$$133, FE`m2Sel$$133, -
               Part[FE`nArray$$133, $CellContext`ni$]} -> 
             Blank[]) :> ({
              FE`m1Sel$$133, FE`m2Sel$$133, -
               Part[FE`nArray$$133, $CellContext`ni$]} -> $CellContext`v$)}], 
         Attributes[$CellContext`v$] = {Temporary}, $CellContext`km2 := {
           Row[{
             Text["vertical: "], 
             $CellContext`kLable[2], " || ", 
             OverVector["b"], " "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k2$$133, (
               FE`k2$$133 = $CellContext`checkAgainstRange[#, FE`kMin$$133, 
                  FE`kMin$$133, FE`kMax$$133]; 
               FE`kArray$$133 = $CellContext`alterKArrayElements[
                 2, FE`k2$$133]; 
               FE`couplingData$$133 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$133 = True; 
               FE`tick$$133 = Not[FE`tick$$133])& ], {
               Dynamic[FE`kMin$$133], 
               Dynamic[FE`kMax$$133]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[FE`k2$$133, {3, 2}]]}]}, $CellContext`km3 := {
           Row[{
             Text["diagonal: "], 
             $CellContext`kLable[3], " || (", 
             OverVector["b"], " + ", 
             OverVector["a"], ") "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k3$$133, (
               FE`k3$$133 = $CellContext`checkAgainstRange[#, FE`kMin$$133, 
                  FE`kMin$$133, FE`kMax$$133]; 
               FE`kArray$$133 = $CellContext`alterKArrayElements[
                 3, FE`k3$$133]; 
               FE`couplingData$$133 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$133 = True; 
               FE`tick$$133 = Not[FE`tick$$133])& ], {
               Dynamic[FE`kMin$$133], 
               Dynamic[FE`kMax$$133]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[FE`k3$$133, {3, 2}]]}]}, $CellContext`km4 := {
           Row[{
             Text["diagonal: "], 
             $CellContext`kLable[4], " || (", 
             OverVector["b"], " - ", 
             OverVector["a"], ") "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k4$$133, (
               FE`k4$$133 = $CellContext`checkAgainstRange[#, FE`kMin$$133, 
                  FE`kMin$$133, FE`kMax$$133]; 
               FE`kArray$$133 = $CellContext`alterKArrayElements[
                 4, FE`k4$$133]; 
               FE`couplingData$$133 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$133 = True; 
               FE`tick$$133 = Not[FE`tick$$133])& ], {
               Dynamic[FE`kMin$$133], 
               Dynamic[FE`kMax$$133]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[FE`k4$$133, {3, 2}]]}]}, $CellContext`km5a := {
           Row[{
             Text["coupling from "], 
             Dynamic[
              $CellContext`massLabel[FE`m1Sel$$133]], 
             Text[" to: "]}], 
           Dynamic[
            If[FE`rawNumberOfMasses$$133 > 2, 
             SetterBar[
              Dynamic[
              FE`moSel$$133, (FE`moSel$$133 = #; 
               FE`k5$$133 = $CellContext`kArrayOriginSelect; 
               FE`tick$$133 = Not[FE`tick$$133])& ], 
              Map[# -> $CellContext`massLabel[#]& , 
               DeleteCases[
                Range[FE`rawNumberOfMasses$$133], FE`m1Sel$$133]]], 
             Dynamic[
              $CellContext`massLabel[
               First[
                Delete[
                 Range[2], FE`m1Sel$$133]]]]]]}, $CellContext`km5b := {
           Row[{
             $CellContext`kLable[5], ": "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k5$$133, (
               FE`k5$$133 = $CellContext`checkAgainstRange[#, FE`kMin$$133, 
                  FE`kMin$$133, FE`kMax$$133]; 
               FE`kArray$$133 = $CellContext`alterKarrayOriginElement[
                 FE`k5$$133]; 
               FE`couplingData$$133 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$133 = True; 
               FE`tick$$133 = Not[FE`tick$$133])& ], {
               Dynamic[FE`kMin$$133], 
               Dynamic[FE`kMax$$133]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[
              FE`k5$$133, {3, 2}]]}]}, $CellContext`alterKarrayOriginElement[
           Pattern[$CellContext`v$, 
            Blank[]]] := 
         Module[{$CellContext`m1oSet$}, $CellContext`m1oSet$ = Append[
              Sort[{FE`m1Sel$$133, FE`moSel$$133}], {0, 0}]; 
           ReplaceAll[
            FE`kArray$$133, ($CellContext`m1oSet$ -> 
              Blank[]) :> ($CellContext`m1oSet$ -> $CellContext`v$)]], 
         Attributes[$CellContext`m1oSet$] = {Temporary}}; {$CellContext`u$$ = 
          Flatten[{$CellContext`locDefault$$, $CellContext`mLocDefault$$}, 
            1]; $CellContext`checkAgainstRange[
            Pattern[$CellContext`v, 
             Blank[]], 
            Pattern[$CellContext`default, 
             Blank[]], 
            Pattern[$CellContext`lowerLimit, 
             Blank[]], 
            Pattern[$CellContext`upperLimit, 
             Blank[]]] := 
          Module[{$CellContext`result}, $CellContext`result = If[
               
               NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
             If[$CellContext`result < $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
             If[$CellContext`result > $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result]; \
$CellContext`springColorsByN$$ = DeleteDuplicates[
            Flatten[
             Table[$CellContext`s Part[
                 Append[$CellContext`nArray$$, {0, 0}], $CellContext`n] -> 
              Part[$CellContext`springColors$$, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 5}], 
             1]]; $CellContext`springPoints[
            Pattern[$CellContext`a12, 
             Blank[List]], 
            Optional[
             Pattern[$CellContext`n, 
              Blank[Integer]], 8], 
            Optional[
             Pattern[$CellContext`h, 
              Blank[]], 0.05], 
            Optional[
             Pattern[$CellContext`f, 
              Blank[]], 0.1]] := 
          Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
             Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
             Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
               Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
             Dot[$CellContext`r, {$CellContext`n1, 0}]; {
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                    2 $CellContext`f) $CellContext`nd, $CellContext`h 
                  Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 
                0, 1, 0.01}], 
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                    2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 
                0.01}]}]; $CellContext`indexLabel = Subscript[
            Style[#, Italic], #2]& ; $CellContext`kLable = Style[
            $CellContext`indexLabel["k", #], FontColor -> 
            Part[$CellContext`springColors$$, #]]& ; $CellContext`massColors := 
          Part[
            Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
            1]& ; $CellContext`massLabel := Style[
            $CellContext`indexLabel["m", #], 
            $CellContext`massColors[#]]& ; $CellContext`calcLineTable[
            Pattern[$CellContext`n, 
             Blank[List]], 
            Pattern[$CellContext`b, 
             Blank[List]], 
            Pattern[$CellContext`i, 
             Blank[List]]] := 
          Module[{$CellContext`first, $CellContext`second}, \
{$CellContext`first, $CellContext`second} = $CellContext`i; Table[
              
              Line[{(-Part[$CellContext`n, $CellContext`first]) 
                 Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                 Part[$CellContext`b, $CellContext`second], 
                Part[$CellContext`n, $CellContext`first] 
                 Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                 Part[$CellContext`b, $CellContext`second]}], \
{$CellContext`j, -Part[$CellContext`n, $CellContext`second], 
               
               Part[$CellContext`n, $CellContext`second]}]]; \
$CellContext`calcReciprocalBasis[
            Pattern[$CellContext`loc, 
             Blank[List]]] := Inverse[
            Transpose[$CellContext`loc]]; $CellContext`pointsTable[
            Pattern[$CellContext`mPosFirstCell, 
             Blank[List]], 
            Pattern[$CellContext`latticeBasis, 
             Blank[List]], 
            Pattern[$CellContext`numberLatticeLinesToDisplay, 
             Blank[List]]] := 
          Table[$CellContext`mPosFirstCell + 
            Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
             
             Part[$CellContext`numberLatticeLinesToDisplay, 
              1]}, {$CellContext`j, -
             Part[$CellContext`numberLatticeLinesToDisplay, 2], 
             
             Part[$CellContext`numberLatticeLinesToDisplay, 
              2]}]; $CellContext`nMassesFromU := First[
             Dimensions[$CellContext`u$$]] - 2; $CellContext`adjustedmoSel := 
          If[$CellContext`rawNumberOfMasses$$ > 2, 
            If[$CellContext`moSel$$ == $CellContext`m1Sel$$, 
             First[
              DeleteCases[
               
               Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]], $CellContext`moSel$$], 
            First[
             Delete[
              Range[
              2], $CellContext`m1Sel$$]]]; \
$CellContext`constructKArrayElements[
            Pattern[$CellContext`i$, 
             Blank[Integer]], 
            Pattern[$CellContext`j$, 
             Blank[Integer]]] := 
          Module[{$CellContext`a$}, $CellContext`a$ = Flatten[
               
               Table[{$CellContext`i$, $CellContext`j$, $CellContext`s 
                  Part[$CellContext`nArray$$, $CellContext`n]} -> 
                Part[$CellContext`kDefaults$$, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
            If[$CellContext`i$ < $CellContext`j$, 
              
              Append[$CellContext`a$, {$CellContext`i$, $CellContext`j$, {0, 
                 0}} -> Part[$CellContext`kDefaults$$, 
                 5]], $CellContext`a$]]; $CellContext`constructKArray[
            Pattern[$CellContext`r, 
             Blank[Integer]]] := Flatten[
            Table[
             $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2]; $CellContext`alterKArrayElements[
            Pattern[$CellContext`ni$, 
             Blank[Integer]], 
            Pattern[$CellContext`v$, 
             Blank[]]] := 
          ReplaceAll[$CellContext`kArray$$, {({$CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                Part[$CellContext`nArray$$, $CellContext`ni$]} -> 
              Blank[]) :> ({$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                
                Part[$CellContext`nArray$$, $CellContext`ni$]} -> \
$CellContext`v$), ({$CellContext`m1Sel$$, $CellContext`m2Sel$$, -
                Part[$CellContext`nArray$$, $CellContext`ni$]} -> 
              Blank[]) :> ({$CellContext`m1Sel$$, $CellContext`m2Sel$$, -
                
                Part[$CellContext`nArray$$, $CellContext`ni$]} -> \
$CellContext`v$)}]; $CellContext`alterKarrayOriginElement[
            Pattern[$CellContext`v$, 
             Blank[]]] := 
          Module[{$CellContext`m1oSet$}, $CellContext`m1oSet$ = Append[
               Sort[{$CellContext`m1Sel$$, $CellContext`moSel$$}], {0, 0}]; 
            ReplaceAll[$CellContext`kArray$$, ($CellContext`m1oSet$ -> 
               Blank[]) :> ($CellContext`m1oSet$ -> $CellContext`v$)]]; \
$CellContext`kArraySelect[
            Pattern[$CellContext`ni$, 
             Blank[Integer]]] := 
          ReplaceAll[{$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
             
             Part[$CellContext`nArray$$, $CellContext`ni$]}, \
$CellContext`kArray$$]; $CellContext`kArrayOriginSelect := ReplaceAll[
            Append[
             Sort[{$CellContext`m1Sel$$, $CellContext`moSel$$}], {0, 
             0}], $CellContext`kArray$$]; $CellContext`growKarray[
            Pattern[$CellContext`nmNew$, 
             Blank[Integer]]] := 
          Module[{$CellContext`k2$}, $CellContext`k2$ = Flatten[
               Map[$CellContext`constructKArrayElements[
                 Part[#, 1], 
                 Part[#, 2]]& , 
                Select[
                 Flatten[
                  
                  Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew$}, {$CellContext`j, $CellContext`nmNew$}], 1], 
                 Max[#] == $CellContext`nmNew$& ]], 2]; 
            Flatten[{$CellContext`kArray$$, $CellContext`k2$}, 
              1]]; $CellContext`resetLatticeVectorsIfAngleTooSmall[
            Pattern[$CellContext`minAngle$, 
             Blank[]]] := Module[{$CellContext`t$}, $CellContext`t$ = Abs[
               ArcCos[
                Dot[
                 Normalize[
                  Part[$CellContext`u$$, 1]], 
                 Normalize[
                  Part[$CellContext`u$$, 2]]]]]; $CellContext`t$ = 
             If[$CellContext`t$ > Pi/2, 
               Pi - $CellContext`t$, $CellContext`t$]; 
            
            If[$CellContext`t$ < $CellContext`minAngle$, \
$CellContext`locDefault$$, {
               Part[$CellContext`u$$, 1], 
               Part[$CellContext`u$$, 2]}]]; $CellContext`locDependent := 
          Module[{$CellContext`m$, $CellContext`latticeBasis$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`reciprocalBasis$, \
$CellContext`mObliqueComponents$, $CellContext`mPosFirstCell$, \
$CellContext`reciprocalNorms$}, $CellContext`latticeBasis$ = 
             Take[$CellContext`u$$, 2]; $CellContext`m$ = 
             Drop[$CellContext`u$$, 
               2]; $CellContext`numberLatticeLinesToDisplay$ = Map[Ceiling[
                Abs[$CellContext`windowHalfWidth$$/Part[
                  Part[$CellContext`latticeBasis$, #], #]]]& , 
               Range[
               2]]; $CellContext`reciprocalBasis$ = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis$]; \
$CellContext`reciprocalNorms$ = Map[Norm[
                Part[$CellContext`reciprocalBasis$, #]]& , 
               Range[2]]; $CellContext`mObliqueComponents$ = Table[
               Dot[
                Part[$CellContext`m$, $CellContext`i], 
                
                Part[$CellContext`reciprocalBasis$, $CellContext`j]], \
{$CellContext`i, $CellContext`rawNumberOfMasses$$}, {$CellContext`j, 
                2}]; $CellContext`mPosFirstCell$ = 
             Map[Part[$CellContext`m$, #] - Dot[
                Floor[
                 
                 Part[$CellContext`mObliqueComponents$, #]], \
$CellContext`latticeBasis$]& , 
               Range[$CellContext`rawNumberOfMasses$$]]; {
             "mScalarArray" -> $CellContext`rawArrayOfMasses$$, 
              "numberOfMasses" -> $CellContext`rawNumberOfMasses$$, 
              "latticeBasis" -> $CellContext`latticeBasis$, "latticeNorms" -> 
              Map[Norm[
                 Part[$CellContext`latticeBasis$, #]]& , 
                Range[2]], "latticeUnitVectors" -> Map[Normalize[
                 Part[$CellContext`latticeBasis$, #]]& , 
                Range[2]], 
              "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay$, 
              "reciprocalBasis" -> $CellContext`reciprocalBasis$, 
              "reciprocalNorms" -> $CellContext`reciprocalNorms$, "qMaxVec" -> 
              2 Pi $CellContext`reciprocalNorms$, 
              "mObliqueComponents" -> $CellContext`mObliqueComponents$, 
              "mPosFirstCell" -> $CellContext`mPosFirstCell$, 
              "pointsDataTable" -> Map[$CellContext`pointsTable[
                 
                 Part[$CellContext`mPosFirstCell$, #], \
$CellContext`latticeBasis$, $CellContext`numberLatticeLinesToDisplay$]& , 
                Range[$CellContext`rawNumberOfMasses$$]], "lineTable" -> 
              Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay$, $CellContext`latticeBasis$, #]& , 
                Permutations[{1, 2}]]}]; $CellContext`projOpU[
            Pattern[$CellContext`v, 
             Blank[List]]] := {{
            Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
             Part[$CellContext`v, 2]}, {
            Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
             Part[$CellContext`v, 2]^2}}; $CellContext`projOp[
            Pattern[$CellContext`v, 
             Blank[List]]] := $CellContext`projOpU[$CellContext`v]/
           Dot[$CellContext`v, $CellContext`v]; \
$CellContext`relativeDifferences[
            Pattern[$CellContext`r, 
             Blank[List]], 
            Pattern[$CellContext`mp, 
             Blank[List]], {
             Pattern[$CellContext`mIndex1, 
              Blank[Integer]], 
             Pattern[$CellContext`mIndex2, 
              Blank[Integer]], 
             Pattern[$CellContext`n, 
              Blank[List]]}] := 
          Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther}, \
$CellContext`pOrigin = 
             Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
             Part[$CellContext`mp, $CellContext`mIndex2] + 
              Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
             Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}]; \
$CellContext`calculateCouplings := 
          Module[{$CellContext`t$, $CellContext`t1$, $CellContext`t2$, \
$CellContext`r$, $CellContext`mp$, $CellContext`numberOfMasses$}, \
{$CellContext`r$, $CellContext`mp$, $CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "latticeBasis", "mPosFirstCell", 
                "numberOfMasses"}, \
$CellContext`parameterLocatorDependencies$$]; $CellContext`t$ = Map[Append[#, 
                $CellContext`relativeDifferences[$CellContext`r$, \
$CellContext`mp$, 
                 First[#]]]& , 
               
               ReplaceAll[$CellContext`kArray$$, Rule -> 
                List]]; $CellContext`t$ = Map[Flatten[{
                 Part[#, 1], {
                  Part[#, 2]}, 
                 Part[#, 3]}, 1]& , $CellContext`t$]; $CellContext`t1$ = Table[
               Sort[
                
                Select[$CellContext`t$, And[
                 Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
                Part[#, 5] < 
                Part[#2, 
                  5]& ], {$CellContext`i, $CellContext`numberOfMasses$}]; \
$CellContext`t2$ = 
             Select[$CellContext`t$, 
               Part[#, 3] == {0, 0}& ]; $CellContext`t2$ = 
             Flatten[{$CellContext`t2$, 
                Map[Flatten[{{
                    Part[#, 2], 
                    Part[#, 1]}, 
                   Drop[#, 2]}, 1]& , $CellContext`t2$]}, 
               1]; $CellContext`t2$ = Table[
               Sort[
                Select[$CellContext`t2$, Part[#, 1] == $CellContext`i& ], 
                Part[#, 5] < 
                Part[#2, 
                  5]& ], {$CellContext`i, $CellContext`numberOfMasses$}]; \
{$CellContext`t2$, $CellContext`t1$}]; $CellContext`plotSprings := 
          Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, \
$CellContext`latticeBasis$ = Take[$CellContext`u$$, 2]; $CellContext`aLoc$ = 
             Part[$CellContext`u$$, 1]; $CellContext`bLoc$ = 
             Part[$CellContext`u$$, 
               2]; {$CellContext`mLoc$, $CellContext`reciprocalBasis$, \
$CellContext`pointsDataTable$, $CellContext`numberLatticeLinesToDisplay$, \
$CellContext`lines$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
                "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
                "numberOfMasses"}, \
$CellContext`parameterLocatorDependencies$$]; $CellContext`pointsList$[
               Pattern[$CellContext`n$, 
                Blank[Integer]]] := {
               $CellContext`massColors[$CellContext`n$], Null, 
               PointSize[
                
                Sqrt[(Part[$CellContext`mScalarArray$, \
$CellContext`n$]/$CellContext`mMax$$)/500]], 
               Map[Point[#]& , 
                Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
               Text[
                $CellContext`massLabel[$CellContext`n$], 
                Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`textDisOffset$$]}; $CellContext`cOrigin$ = Select[
               Part[
                Part[$CellContext`couplingData$$, 1], $CellContext`m1Sel$$], 
               Take[#, 
                 2] == {$CellContext`m1Sel$$, $CellContext`moSel$$}& ]; \
$CellContext`cN$ = Select[
               Part[
                Part[$CellContext`couplingData$$, 2], $CellContext`m1Sel$$], 
               Take[#, 
                 2] == {$CellContext`m1Sel$$, $CellContext`m2Sel$$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
                $CellContext`springPoints[
                 Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
                ReplaceAll[
                  
                  Part[#, 
                   3], $CellContext`springColorsByN$$]]& , $CellContext`cN$]; 
            If[$CellContext`numberOfMasses$ > 1, 
              AppendTo[$CellContext`g$, 
               Map[ListLinePlot[
                 $CellContext`springPoints[
                  Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
                 ReplaceAll[
                   
                   Part[#, 
                    3], $CellContext`springColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
               Graphics[
                Flatten[{{$CellContext`lines$, Blue, 
                   Map[Arrow[{{0, 0}, 
                    Part[$CellContext`reciprocalBasis$, #]}]& , 
                    Range[2]], Thick, 
                   Arrowheads[0.05], Red, 
                   Map[Arrow[{{0, 0}, 
                    Part[$CellContext`latticeBasis$, #]}]& , 
                    Range[2]], 
                   Text[
                    OverVector[
                    "a"], $CellContext`aLoc$/
                    2 + $CellContext`textDisOffset$$], 
                   Text[
                    OverVector[
                    "b"], $CellContext`bLoc$/
                    2 + $CellContext`textDisOffset$$]}, 
                  Map[$CellContext`pointsList$[#]& , 
                   Range[$CellContext`numberOfMasses$]]}], 
                PlotRange -> {{(-$CellContext`windowHalfWidth$$)/
                   2, $CellContext`windowHalfWidth$$}, \
{(-$CellContext`windowHalfWidth$$)/2, $CellContext`windowHalfWidth$$}}, 
                ImageSize -> $CellContext`primaryDisplaySize$$], \
$CellContext`g$}]]; $CellContext`couplingLocator := LocatorPane[
            Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                  Dimensions[#]] < 3, 
                
                Flatten[{$CellContext`locDefault$$, \
$CellContext`mLocDefault$$}, 1], 
                If[First[
                   Dimensions[#]] > 7, 
                 Take[#, 7], #]]; 
             Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                First[
                  Dimensions[$CellContext`rawArrayOfMasses$$]]; 
               If[$CellContext`rm$ > $CellContext`nMassesFromU, \
$CellContext`rawArrayOfMasses$$ = 
                 Take[$CellContext`rawArrayOfMasses$$, \
$CellContext`nMassesFromU], 
                 
                 While[$CellContext`rm$ < $CellContext`nMassesFromU, 
                  AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`defaultMass$$]; Increment[$CellContext`rm$]]]; $CellContext`km$ = 
                Max[
                  Part[
                   Part[$CellContext`kArray$$, All, 1], All, 1]]; 
               If[$CellContext`km$ > $CellContext`nMassesFromU, \
$CellContext`kArray$$ = Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    Part[#, 2]}] <= $CellContext`nMassesFromU& ], 
                 
                 While[$CellContext`km$ < $CellContext`nMassesFromU, 
                  Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`growKarray[$CellContext`km$]]]]; 
             Part[$CellContext`u$$, 1] = If[Dot[
                  Part[$CellContext`u$$, 1], 
                  
                  Part[$CellContext`u$$, 
                   1]] < $CellContext`minSquaredDistanceFromOrigin$$, 
                Part[$CellContext`locDefault$$, 1], 
                Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                  Part[$CellContext`u$$, 2], 
                  
                  Part[$CellContext`u$$, 
                   2]] < $CellContext`minSquaredDistanceFromOrigin$$, 
                Part[$CellContext`locDefault$$, 2], 
                Part[$CellContext`u$$, 2]]; {
                Part[$CellContext`u$$, 1], 
                
                Part[$CellContext`u$$, 
                 2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`minAngleBetweenLatticeVectors$$]; \
$CellContext`rawNumberOfMasses$$ = $CellContext`nMassesFromU; \
$CellContext`m1Sel$$ = 
              If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
              If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
              If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel; $CellContext`k1$$ = $CellContext`kArraySelect[
               1]; $CellContext`k2$$ = $CellContext`kArraySelect[
               2]; $CellContext`k3$$ = $CellContext`kArraySelect[
               3]; $CellContext`k4$$ = $CellContext`kArraySelect[
               4]; $CellContext`k5$$ = $CellContext`kArrayOriginSelect; \
$CellContext`parameterLocatorDependencies$$ = $CellContext`locDependent; \
$CellContext`qLoc$$ = 
              ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
               2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
              True; $CellContext`tick$$ = 
              Not[$CellContext`tick$$])& ], $CellContext`plotSprings, 
            LocatorAutoCreate -> True, ContinuousAction -> 
            False]; $CellContext`massSetter := {
            Row[{
              Text["mass: "], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`kArraySelect[
                    1]; $CellContext`k2$$ = $CellContext`kArraySelect[
                    2]; $CellContext`k3$$ = $CellContext`kArraySelect[
                    3]; $CellContext`k4$$ = $CellContext`kArraySelect[
                    4]; $CellContext`moSel$$ = $CellContext`adjustedmoSel; \
$CellContext`k5$$ = $CellContext`kArrayOriginSelect; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]]}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`mMax$$]; 
                
                Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                 ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], {0.25, 
                Dynamic[$CellContext`mMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               
               NumberForm[$CellContext`massValue, {2, 
                1}]]}]}; $CellContext`m2Setter := {
            Text["coupling to neighbouring: "], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 1, 
              SetterBar[
               
               Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`kArraySelect[
                  1]; $CellContext`k2$$ = $CellContext`kArraySelect[
                  2]; $CellContext`k3$$ = $CellContext`kArraySelect[
                  3]; $CellContext`k4$$ = $CellContext`kArraySelect[
                  4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                Range[$CellContext`rawNumberOfMasses$$]]], 
              $CellContext`massLabel[1]]]}; $CellContext`km1 := {
            Row[{
              Text["horizontal: "], 
              $CellContext`kLable[1], " || ", 
              OverVector["a"], " "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`kMin$$, $CellContext`kMin$$, \
$CellContext`kMax$$]; $CellContext`kArray$$ = \
$CellContext`alterKArrayElements[
                  1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k1$$, {3, 2}]]}]}; $CellContext`km2 := {
            Row[{
              Text["vertical: "], 
              $CellContext`kLable[2], " || ", 
              OverVector["b"], " "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`kMin$$, $CellContext`kMin$$, \
$CellContext`kMax$$]; $CellContext`kArray$$ = \
$CellContext`alterKArrayElements[
                  2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k2$$, {3, 2}]]}]}; $CellContext`km3 := {
            Row[{
              Text["diagonal: "], 
              $CellContext`kLable[3], " || (", 
              OverVector["b"], " + ", 
              OverVector["a"], ") "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`kMin$$, $CellContext`kMin$$, \
$CellContext`kMax$$]; $CellContext`kArray$$ = \
$CellContext`alterKArrayElements[
                  3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k3$$, {3, 2}]]}]}; $CellContext`km4 := {
            Row[{
              Text["diagonal: "], 
              $CellContext`kLable[4], " || (", 
              OverVector["b"], " - ", 
              OverVector["a"], ") "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`kMin$$, $CellContext`kMin$$, \
$CellContext`kMax$$]; $CellContext`kArray$$ = \
$CellContext`alterKArrayElements[
                  4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k4$$, {3, 2}]]}]}; $CellContext`km5a := {
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = $CellContext`kArrayOriginSelect; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}; $CellContext`km5b := {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`kMin$$, $CellContext`kMin$$, \
$CellContext`kMax$$]; $CellContext`kArray$$ = \
$CellContext`alterKarrayOriginElement[$CellContext`k5$$]; \
$CellContext`couplingData$$ = $CellContext`calculateCouplings; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               
               NumberForm[$CellContext`k5$$, {3, 
                2}]]}]}; $CellContext`freqControls := {
            Row[{
              Text["mesh size "], 
              Manipulator[
               
               Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {2,
                30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[$CellContext`meshSize$$]}], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}; $CellContext`dynamicsControls := {
            Row[{
              OverVector["q"], " = ", 
              
              Module[{$CellContext`qm$}, $CellContext`qm$ = 
                ReplaceAll[
                 "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
               Slider2D[
                 
                 Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                 ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
              " 2 \[Pi] ", 
              Dynamic[
               NumberForm[
                MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
            Row[{
              Text["time, normalized to one period:"]}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
               ContinuousAction -> True, Appearance -> "Open"]}, 
             ImageSize -> {200, 60}], 
            Row[{
              Text["oscillation scale factor:"]}], 
            Row[{Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}] " ", 
              Dynamic[
               NumberForm[$CellContext`scale$$, {3, 2}]]}], 
            Text[
             Text["Angular frequency \[Omega](q), selection:"]], 
            Dynamic[
             SetterBar[
              
              Dynamic[$CellContext`omegaIndex$$, ($CellContext`omegaIndex$$ = \
#; $CellContext`bRefreshDynPlot$$ = True; $CellContext`tick$$ = 
                Not[$CellContext`tick$$])& ], 
              Range[
              2 $CellContext`rawNumberOfMasses$$]]]}; \
$CellContext`oneTermOfdynamicsMatrix[{
             Pattern[$CellContext`k, 
              Blank[Integer]], 
             Pattern[$CellContext`j, 
              Blank[Integer]], 
             Pattern[$CellContext`mVec, 
              Blank[List]], 
             Pattern[$CellContext`kS, 
              Blank[]], 
             Blank[], 
             Blank[], 
             Blank[], 
             Pattern[$CellContext`proj, 
              Blank[List]]}, 
            Pattern[$CellContext`r, 
             Blank[List]], 
            Pattern[$CellContext`mk, 
             Blank[]], 
            Pattern[$CellContext`epsilon, 
             Blank[List]], 
            Pattern[$CellContext`mA, 
             Blank[List]]] := $CellContext`kS 
           Dot[$CellContext`proj, 
             Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
             Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
                  Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
              Sqrt[$CellContext`mk 
               Part[$CellContext`mA, $CellContext`j]])]; \
$CellContext`dynamicsMatrix := 
          Module[{$CellContext`cd$, $CellContext`r$, $CellContext`res$, \
$CellContext`epsilon$, $CellContext`m$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$}, $CellContext`cd$ = SplitBy[
               Sort[
                Flatten[$CellContext`couplingData$$, 2]], 
               First]; {$CellContext`r$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "latticeBasis", "mScalarArray", 
                "numberOfMasses"}, \
$CellContext`parameterLocatorDependencies$$]; $CellContext`epsilon$ = 
             Partition[
               IdentityMatrix[2 $CellContext`numberOfMasses$], 
               2]; $CellContext`res$ = Partition[
               Flatten[
                Table[
                 Total[
                  Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r$, 
                    
                    Part[$CellContext`mScalarArray$, $CellContext`i], \
$CellContext`epsilon$, $CellContext`mScalarArray$]& , 
                   
                   Part[$CellContext`cd$, $CellContext`i]]], {$CellContext`i, \
$CellContext`numberOfMasses$}]], 2 $CellContext`numberOfMasses$]; 
            ReplaceAll[$CellContext`res$, $CellContext`qVec -> #]& ]; \
$CellContext`calcDynamics := Map[{
             Sqrt[
              Part[#, 1]], 
             Part[#, 2]}& , 
            Transpose[
             Eigensystem[
              $CellContext`matrix$$[$CellContext`qLoc$$]]]]; \
$CellContext`showDynamics := 
          Module[{$CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`e$, \
$CellContext`omega$, $CellContext`points$, $CellContext`lines$, \
$CellContext`nu$, $CellContext`a$, $CellContext`b$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, {{$CellContext`a$, \
$CellContext`b$}, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "latticeBasis", "pointsDataTable", 
                "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
                "numberOfMasses"}, \
$CellContext`parameterLocatorDependencies$$]; {$CellContext`omega$, \
$CellContext`e$} = 
             Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$]; \
$CellContext`e$ = Partition[$CellContext`e$, 2]; $CellContext`points$ = 
             Table[Part[$CellContext`pointsDataTable$, $CellContext`k] + 
               Table[$CellContext`scale$$ 
                 Re[Part[$CellContext`e$, $CellContext`k] 
                   E^(I (Dot[$CellContext`qLoc$$, $CellContext`a$ \
$CellContext`i + $CellContext`b$ $CellContext`j] - $CellContext`omega$ #))], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay$, 1], 
                  
                  Part[$CellContext`numberLatticeLinesToDisplay$, 
                   1]}, {$CellContext`j, -
                  Part[$CellContext`numberLatticeLinesToDisplay$, 2], 
                  
                  Part[$CellContext`numberLatticeLinesToDisplay$, 
                   2]}]& , {$CellContext`k, $CellContext`numberOfMasses$}]; \
$CellContext`nu$ = 
             2 Pi If[$CellContext`omega$ == 0, 1, 1/$CellContext`omega$]; 
            Show[{
               Table[
                ListPlot[
                 
                 Part[$CellContext`points$, $CellContext`k][$CellContext`nu$ \
#], PlotRange -> {{(-$CellContext`windowHalfWidth$$)/
                    2, $CellContext`windowHalfWidth$$}, \
{(-$CellContext`windowHalfWidth$$)/2, $CellContext`windowHalfWidth$$}}, 
                 ImageSize -> $CellContext`primaryDisplaySize$$, PlotStyle -> 
                 Directive[
                   PointSize[
                    
                    Sqrt[(Part[$CellContext`mScalarArray$, \
$CellContext`k]/$CellContext`mMax$$)/350]], 
                   $CellContext`massColors[$CellContext`k]]], \
{$CellContext`k, $CellContext`numberOfMasses$}], 
               
               Graphics[{$CellContext`lines$}]}]& ]; \
$CellContext`frequencyPlotCalc := 
          Module[{$CellContext`eigTable2D$, $CellContext`eigTable1D$, \
$CellContext`qMax$, $CellContext`omegaPointList2D$, \
$CellContext`omegaPointList1D$, $CellContext`range$, \
$CellContext`numberOfMasses$}, {$CellContext`qMax$, \
$CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "qMaxVec", 
                "numberOfMasses"}, \
$CellContext`parameterLocatorDependencies$$]; $CellContext`eigTable2D$ = 
             Flatten[
               Re[
                Table[{{$CellContext`qx, $CellContext`qy}, 
                  Eigenvalues[
                   N[
                    $CellContext`matrix$$[{$CellContext`qx, \
$CellContext`qy}]]]}, {$CellContext`qx, (-Part[$CellContext`qMax$, 1])/2, 
                  Part[$CellContext`qMax$, 1]/2, 
                  Part[$CellContext`qMax$, 
                    1]/$CellContext`meshSize$$}, {$CellContext`qy, (-
                   Part[$CellContext`qMax$, 2])/2, 
                  Part[$CellContext`qMax$, 2]/2, 
                  Part[$CellContext`qMax$, 2]/$CellContext`meshSize$$}]], 
               1]; $CellContext`omegaPointList2D$[
               Pattern[$CellContext`nn$, 
                Blank[]]] := Map[Flatten[{
                 Part[#, 1], 
                 Part[
                  Sqrt[
                   
                   Part[#, 
                    2]], $CellContext`nn$]}]& , $CellContext`eigTable2D$]; \
$CellContext`range$ = Range[2 $CellContext`numberOfMasses$]; ListPlot3D[
              Map[$CellContext`omegaPointList2D$[#]& , $CellContext`range$], 
              PlotRange -> Full, 
              ImageSize -> $CellContext`primaryDisplaySize$$, 
              AxesLabel -> {
               "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
                "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]]; \
$CellContext`showFreqPlot := 
          Module[{$CellContext`aa$, $CellContext`bb$}, {$CellContext`aa$, \
$CellContext`bb$} = $CellContext`qPlaneLoc$$; Show[{$CellContext`freqPlot$$, 
               Graphics3D[
                Polygon[{{
                   Part[$CellContext`aa$, 1], 
                   Part[$CellContext`aa$, 2], 0}, {
                   Part[$CellContext`bb$, 1], 
                   Part[$CellContext`bb$, 2], 0}, {
                   Part[$CellContext`bb$, 1], 
                   Part[$CellContext`bb$, 2], 23}, {
                   Part[$CellContext`aa$, 1], 
                   Part[$CellContext`aa$, 2], 
                   23}}]]}]]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = $CellContext`growKarray[$CellContext`n$]; 
             Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix; $CellContext`dynamics$$ = \
$CellContext`calcDynamics; $CellContext`dynPlot$$ = $CellContext`showDynamics; \
$CellContext`freqPlot$$ = $CellContext`frequencyPlotCalc; Null}}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.600991920019863*^9, 3.6009919670395527`*^9}, {
   3.6009920245298405`*^9, 3.6009920501333055`*^9}, 3.60099313594541*^9, {
   3.600993187449356*^9, 3.600993239845353*^9}, {3.6009932797776365`*^9, 
   3.6009933046760607`*^9}, {3.6012440341096554`*^9, 3.6012440721578317`*^9}, 
   3.6012447781242104`*^9, {3.6012448176024685`*^9, 3.6012448561326723`*^9}, 
   3.6012449730663605`*^9, {3.6012450799064713`*^9, 3.601245088751977*^9}, {
   3.601245122802925*^9, 3.6012451299813356`*^9}, {3.6012451718047276`*^9, 
   3.601245397972664*^9}, {3.6012467859190493`*^9, 3.6012468229691687`*^9}, {
   3.601246896213358*^9, 3.6012470488980913`*^9}, {3.6012470802998877`*^9, 
   3.601247087356291*^9}, {3.6012476034298086`*^9, 3.601247625026044*^9}, {
   3.6012477383525257`*^9, 3.6012477482580924`*^9}, {3.6012479226070642`*^9, 
   3.6012479616512976`*^9}, 3.6012480156453857`*^9},
 CellID->246806892]
}, Open  ]],

Cell[BoxData["\[AliasDelimiter]"], "Input",
 CellChangeTimes->{3.601245184099431*^9},
 CellID->534877709]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell["\<\
A lattice of atoms can be modelled as harmonic oscillators, with forces \
proportional to the displacements of the atoms from equilibrium positions. \
The simplest such model introduces coupling for only the nearest neighbor \
atoms. In this Demonstration, a lattice cell containing a single atom is \
modelled, with nearest neighbor harmonic coupling to the mass in each nearby \
cell. Normal mode solutions to these equations of motion are plotted. \
Controls are provided to alter the coupling \"spring constants\" and other \
free parameters, as well as controls to select from the reciprocal space \
vectors, and angular frequencies associated with the normal mode solutions. A \
time control is also provided to display changes of the lattice through one \
period of the lattice vibration.\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.6008873855675645`*^9, {3.601208787872481*^9, 3.601208804510481*^9}, {
   3.601209090380548*^9, 3.601209091209631*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}}, {{
       2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}, {{
       3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}, {
       3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}}, {{{
       1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
        0.09999999999999987}, {{
        0.19999999999999987`, -0.3999999999999999}, {-0.3999999999999999, 
        0.8}}}, {
       1, 2, {-1, 0}, 0.25, 1., {0.9, 0.7}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       1, 2, {-1, 1}, 0.25, 1.6899999999999995`, {0.9, 0.7}, {
        2.1999999999999997`, 0.7}, {{0.9999999999999999, 0.}, {0., 0.}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 3, {0, -1}, 0.25, 2.2600000000000002`, {0.9, 
        0.7}, {-0.5999999999999999, 0.5999999999999999}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       1, 3, {1, -1}, 0.25, 3.3999999999999995`, {0.9, 
        0.7}, {-0.4999999999999998, 1.9}, {{
        0.5764705882352942, -0.4941176470588236}, {-0.4941176470588236, 
        0.423529411764706}}}, {
       1, 2, {1, 0}, 0.25, 3.4000000000000004`, {0.9, 0.7}, {0.5, 2.5}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 2, {0, 1}, 0.25, 3.65, {0.9, 0.7}, {2.3, 2.}, {{0.5369863013698629, 
        0.4986301369863013}, {0.4986301369863013, 0.463013698630137}}}, {
       1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 2.7}, {{
        0.05882352941176473, 0.23529411764705888`}, {0.23529411764705888`, 
        0.9411764705882353}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 3, {-1, -1}, 0.25, 4.520000000000001, {0.9, 
        0.7}, {-0.7, -0.7000000000000002}, {{0.5663716814159291, 
        0.49557522123893794`}, {0.49557522123893794`, 
        0.43362831858407075`}}}, {
       1, 3, {-1, 1}, 0.25, 4.879999999999999, {0.9, 0.7}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       1, 2, {0, -1}, 0.25, 5.85, {0.9, 0.7}, {-1.5, 0.3999999999999999}, {{
        0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
        0.015384615384615389`}}}, {
       1, 2, {1, -1}, 0.25, 6.289999999999999, {0.9, 0.7}, {-1.4, 1.7}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       1, 3, {0, 1}, 0.25, 7.540000000000002, {0.9, 0.7}, {3.2, 2.2}, {{
        0.7015915119363394, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 2, {-1, -1}, 0.25, 8.81, {0.9, 0.7}, {-1.6, -0.9000000000000001}, {{
        0.7094211123723042, 0.4540295119182747}, {0.4540295119182747, 
        0.29057888762769585`}}}, {
       1, 2, {1, 1}, 0.25, 9.009999999999998, {0.9, 0.7}, {2.4, 3.3}, {{
        0.24972253052164267`, 0.4328523862375139}, {0.4328523862375139, 
        0.7502774694783573}}}, {
       1, 3, {1, 1}, 0.25, 13.599999999999998`, {0.9, 0.7}, {3.3, 3.5}, {{
        0.423529411764706, 0.4941176470588236}, {0.4941176470588236, 
        0.5764705882352942}}}}, {{
       2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       2, 3, {1, -1}, 0.25, 1.2999999999999996`, {0.4, 
        1.2}, {-0.4999999999999998, 1.9}, {{
        0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
        0.376923076923077}}}, {
       2, 3, {0, -1}, 0.25, 1.3599999999999999`, {0.4, 
        1.2}, {-0.5999999999999999, 0.5999999999999999}, {{0.7352941176470588,
         0.44117647058823534`}, {0.44117647058823534`, 
        0.2647058823529413}}}, {
       2, 1, {1, -1}, 0.25, 1.6899999999999995`, {0.4, 
        1.2}, {-0.8999999999999998, 1.2}, {{0.9999999999999999, 0.}, {0., 
        0.}}}, {2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
        2.5}, {{0.005882352941176467, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 0.09999999999999987}, {{
        0.34594594594594585`, -0.4756756756756756}, {-0.4756756756756756, 
        0.654054054054054}}}, {
       2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
        1.4000000000000001`, 2.7}, {{0.3076923076923076, 
        0.46153846153846145`}, {0.46153846153846145`, 0.6923076923076924}}}, {
       2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
        0.8, -0.6000000000000001}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {-1.4, 1.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {
        2.1999999999999997`, 0.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {0, -1}, 0.25, 3.65, {0.4, 
        1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
        0.463013698630137}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 0.3999999999999999}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 3, {-1, -1}, 0.25, 4.82, {0.4, 1.2}, {-0.7, -0.7000000000000002}, {{
        0.25103734439834025`, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{0.9846153846153846,
         0.1230769230769231}, {0.1230769230769231, 0.015384615384615389`}}}, {
       2, 1, {-1, 1}, 0.25, 6.289999999999999, {0.4, 1.2}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       2, 3, {-1, 1}, 0.25, 7.379999999999998, {0.4, 1.2}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9878048780487806, -0.10975609756097565`}, {-0.10975609756097565`, 
        0.01219512195121952}}}, {
       2, 2, {1, 1}, 0.25, 8.409999999999998, {0.4, 1.2}, {2.4, 3.3}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {0.4, 1.2}, {-1.6, -0.9000000000000001}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 1, {1, 1}, 0.25, 8.809999999999999, {0.4, 1.2}, {2.9, 2.8}, {{
        0.7094211123723043, 0.4540295119182747}, {0.4540295119182747, 
        0.2905788876276958}}}, {
       2, 3, {0, 1}, 0.25, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
        0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570139`}}}, {
       2, 1, {-1, -1}, 0.25, 9.010000000000002, {0.4, 
        1.2}, {-1.1, -1.4000000000000001`}, {{0.24972253052164256`, 
        0.4328523862375138}, {0.4328523862375138, 0.7502774694783573}}}, {
       2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{0.6138686131386862,
         0.48686131386861314`}, {0.48686131386861314`, 
        0.3861313868613139}}}}, {{
       3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
        0.19999999999999998`, -0.39999999999999997`}, {-0.39999999999999997`, 
        0.7999999999999999}}}, {
       3, 2, {-1, 1}, 0.25, 1.2999999999999994`, {1.3, 1.4}, {
        2.1999999999999997`, 0.7}, {{
        0.6230769230769229, -0.48461538461538467`}, {-0.48461538461538467`, 
        0.3769230769230771}}}, {
       3, 2, {0, 1}, 0.25, 1.3599999999999997`, {1.3, 1.4}, {2.3, 2.}, {{
        0.7352941176470587, 0.4411764705882354}, {0.4411764705882354, 
        0.2647058823529413}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
        1.4000000000000001`, 2.7}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
        0.09999999999999987}, {{0.00588235294117648, 0.07647058823529418}, {
        0.07647058823529418, 0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 2.5}, {{
        0.34594594594594597`, -0.47567567567567565`}, {-0.47567567567567565`, 
        0.654054054054054}}}, {
       3, 1, {0, 1}, 0.25, 2.26, {1.3, 1.4}, {2.8, 1.5}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.3076923076923077, 
        0.46153846153846156`}, {0.46153846153846156`, 0.6923076923076923}}}, {
       3, 1, {-1, 1}, 0.25, 3.399999999999999, {1.3, 1.4}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.576470588235294, -0.4941176470588235}, {-0.4941176470588235, 
        0.423529411764706}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.3, 
        1.4}, {-0.4999999999999998, 1.9}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999984`, {1.3, 1.4}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9283667621776505, -0.25787965616045855`}, {-0.25787965616045855`, 
        0.07163323782234961}}}, {
       3, 3, {0, 1}, 0.25, 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
        0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.3, 1.4}, {-0.5999999999999999, 
        0.5999999999999999}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {0.8, -0.6000000000000001}, {{
        0.058823529411764705`, 0.23529411764705882`}, {0.23529411764705882`, 
        0.9411764705882353}}}, {
       3, 1, {1, 1}, 0.25, 4.52, {1.3, 1.4}, {2.9, 2.8}, {{0.5663716814159292,
         0.49557522123893805`}, {0.49557522123893805`, 
        0.43362831858407075`}}}, {
       3, 2, {1, 1}, 0.25, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
        0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       3, 1, {1, -1}, 0.25, 4.879999999999999, {1.3, 
        1.4}, {-0.8999999999999998, 1.2}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       3, 2, {1, -1}, 0.25, 7.380000000000001, {1.3, 1.4}, {-1.4, 1.7}, {{
        0.9878048780487805, -0.10975609756097562`}, {-0.10975609756097562`, 
        0.012195121951219514`}}}, {
       3, 1, {0, -1}, 0.25, 7.539999999999999, {1.3, 
        1.4}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7015915119363395, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{0.4756242568370986,
         0.49940546967895355`}, {0.49940546967895355`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.3, 1.4}, {-0.7, -0.7000000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 2, {0, -1}, 0.25, 8.84, {1.3, 1.4}, {-1.5, 0.3999999999999999}, {{
        0.8868778280542985, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570136`}}}, {
       3, 1, {-1, -1}, 0.25, 13.600000000000001`, {1.3, 
        1.4}, {-1.1, -1.4000000000000001`}, {{0.42352941176470593`, 
        0.4941176470588235}, {0.4941176470588235, 0.576470588235294}}}, {
       3, 2, {-1, -1}, 0.25, 13.700000000000001`, {1.3, 
        1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
        0.4868613138686131}, {0.4868613138686131, 
        0.38613138686131376`}}}}}}, $CellContext`defaultMass$$ = 
    20, $CellContext`dynamics$$ = {{
      Complex[0.6790602328891914, 9.230900003615161*^-19], {Complex[
      0.7248589832535917, 0.], Complex[
      0.650064949116095, -0.020858686170711016`], Complex[
      0.11988513411713456`, -0.0981715969681187], Complex[
      0.15160623794564831`, -0.028647866526790612`], 
      Complex[-0.002472802788942547, -0.01713913715451654], Complex[
      0.05556524411678816, 0.01890267003822048]}}, {
      Complex[0.5524636587025472, -7.594543271602355*^-18], {
      Complex[-0.38354558530686395`, 0.09744499810272776], Complex[
      0.1619813466218059, -0.23832737428749207`], Complex[0.6766558452199941, 
      0.], Complex[0.5279467930943094, 0.011722985858567875`], 
      Complex[-0.0019794387381373065`, 0.0612963317654061], Complex[
      0.14074635807044672`, 0.0077645969691057665`]}}, {
      Complex[0.5222542056555272, 7.39373223091693*^-18], {
      Complex[-0.5047764091042254, 0.08027140607893792], Complex[
      0.6076266586520926, 0.], 
      Complex[-0.41722429897453955`, -0.26584428115246467`], 
      Complex[-0.11870218623554862`, 0.011771602360776734`], Complex[
      0.10106066627579662`, 0.15510216234064736`], Complex[
      0.24672133224192438`, 0.12420825231706026`]}}, {
      Complex[0.47798270089481093`, 1.705186367657685*^-17], {Complex[
      0.11776747404882068`, -0.17021352942962187`], 
      Complex[-0.19349636076477256`, 0.18545691772731276`], 
      Complex[-0.005098087736675982, 0.0481703582836023], Complex[
      0.12443545522518613`, -0.04846883240430583], Complex[0.7520021001235273,
       0.], Complex[0.5450959458974042, 0.050065292585647264`]}}, {
      Complex[0.4208599945029234, 1.7181192359807767`*^-17], {Complex[
      0.046412084869462106`, -0.0633132278362492], 
      Complex[-0.15001494768060744`, 0.1368626263531111], 
      Complex[-0.49457449633790096`, -0.020339968952328036`], Complex[
      0.7465187765334863, 0.], 
      Complex[-0.3425167147633056, -0.05320301419822421], Complex[
      0.17190685158210708`, -0.02435844462026826]}}, {
      Complex[0.3371723422003491, 1.2680207595331082`*^-17], {Complex[
      0.08250671501222374, 0.03036710231625256], 
      Complex[-0.10759757386702096`, -0.00917692568070801], Complex[
      0.15992951319705684`, 0.020880420200147097`], 
      Complex[-0.32856173648033754`, 0.004931060374980048], 
      Complex[-0.5245849484304596, 0.028709761501831688`], Complex[
      0.7553839007471159, 0.]}}}, $CellContext`dynPlot$$ = Show[{
      Table[
       ListPlot[
        Part[$CellContext`points$5985, $CellContext`k][$CellContext`nu$5985 \
#], PlotRange -> {{(-$CellContext`windowHalfWidth$$)/
           2, $CellContext`windowHalfWidth$$}, \
{(-$CellContext`windowHalfWidth$$)/2, $CellContext`windowHalfWidth$$}}, 
        ImageSize -> $CellContext`primaryDisplaySize$$, PlotStyle -> Directive[
          PointSize[
           
           Sqrt[(Part[$CellContext`mScalarArray$5985, \
$CellContext`k]/$CellContext`mMax$$)/350]], 
          $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$5985}], 
      Graphics[{$CellContext`lines$5985}]}]& , $CellContext`dynTab$$ = 
    1, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyEvXd01MX7/h1QkBKk9yJdqdIhENjQQpVOqEqo0hNakCZFBKkB6VU6SJMq
iIEldAk1nZDN7oYkSO8lJODj8+G+Ztnr/np++Ydz5syZnX7N9eI9c5fqF9Bp
YEYPDw/P3B4eH/37b6fiG3//a0+mk+1W3nydPizN6nXip1nxx5ItSK9/YMux
t4ueW6OzNghquiLJ4p7/nvUrr7E7dj24ZdI7/C/9pvXO+klPy59zpXvI36Ij
iQc3P1X5LYM3rK48cY6r/Lbvy7fU8m/48uQeVR9L9wv5h1uGp1B90iwXW4eV
3ZQ7xfIu6nXLbk08TLuKTvhkzrunSSYd7UoLqlJ7+KIkyn/PeueddcqkcFc6
2hX2POfyBqHJJh3tCj/VaszwMrc5v+VN4YYhG5+70tGu+U831mn7w22uj2WZ
X+96g+qq+ltKfOwYWfQL9MMLK9p1zpr/5d93kkw62nVlUt/T9X7i/Pescw92
7vvVlRSTjnY9GO1fZuvV2yYd7fJt+Hr41i23Ob+lzy8ta1Qd7ioH7aq/PuHA
5CrJXB/LqF3VrvRbnsT1t+R7fWB9u1+SLB3+l55s2nXw+5iwpr8km3S0a3Ol
jMPutU+h/Pes9mEe1U9VcKWjXVd6D/QamctVDtrV8NTugTUqJnF+y5Kx61f8
duWWSUe7fp4z/vX487e4Ppb0XXe9TpRQ9bf41ew2ZV2eZAt+D+0689upCWGf
pJh0tGvj8lc199Xg/Pesi1uPP5+pfJJJR7vmZ2/fsfSBWyYdf4+qrHiZa+kt
zm/h/GhXMJWPdv3f9UmzoP7SXgvahfYiHe2i/rGYdrn3pwXtov43v0/jhfwW
Gl8L2mVznw+oj4XmD+pvwXzr8n5+mnbllfmJdLRrtMxn9/z3rJj/SEe7/GW9
IB3t+krWF+W3PJL1iHS0a6GsX6qPJUzWO9Xfclb2B9lPfNAu7CdIR7to//FB
u4Ld9ysftIv2N5//2A+R30L7pw/a9bf7fov6WGh/Rv0t2M9l/zftwv6PdLSL
9MK0q667vph2kR6ZdpF+mXaR3pl2dXTXR9Mu0lPTLtZftOtO/zbNLuxxKl1u
8Lzk5A55nUqXO5XY8v2XxxxKlwO+LVY+eJ9D6XL273zPZAxX+S1Ncm4/693I
qXR5VrMF3xy7pepjyVOz8N0fSiQqXX5kb7R55zOn0mWfCjMD9n/rVLpcfM7S
avMncP571vN1ju//fZ9T6fI8/zd9h+dOVLq84kDWlj/0T1S6fOHql0O8pyQq
Xe5RfcfTb/olKl2uP3nID4eyJypdrnxjUNcxc51Kl6OfeqZe7eZUupyzx6Iz
3ayc/541JMfZHTXqJipdfvyy8/XsoxOVLnsdTdyUf5zKb4lpPOj+8UaJSpcP
vkyMWBin6mOZWanWtD91/S2dR+Vvnn+YU+ly7qgpa2NOOJUup+3YXn7dp4lK
l2tnu7pg8gfpaFeFtC3PHUudSpfHhOadUvuVQ+nyuPbBXeb87lC6XKLb37uH
7XQoXc5XpH3ewlcdSpcfxnRMi/7GqXS5XKfOaQ/vOJUuJ79YE9VhKee/Z/1x
UqUS5+MdSpd71m/XJXWOQ+nysVcjTtYer/JbOD/axeWjXf93fdIsqD/rMtrL
ukz9Y/SrlHt/Gv2i/je/T+Nl9IvG1+iXl/t8MPpF88foF+Yb63J7mZ+syz/I
fGZdPiTzn3U5VtYL67K3rC/WZaxH1mWrrF/W5Vyy3lmXsT+wLmM/YV2m/cfo
V1f3/croF+1vRr9oPzT6Rfun0a9z7vut0S/an41+YT9nXcb+z7pMemHaNdVd
X0y7SI9Mu0i/TLtI70y7Orvro2kX6alpF+sv2jVu629j2v3uULp8c2qZKjPr
OZQu55ywI329j13pctjsngVTBicoXd4wedpV+3Ob0uVJOXte/ypTgtLlAdl/
ST56L0Hp8vz2/vdX9LQrXa4UFDh6QQW70uV+JXcGFP5M6/KpoJIRDVY4lC5X
yVLkQrrFoXQ5cMzd73/+zKF0+VL5VSVXV1T5LY3rx7waV8+hdDn2lxzVP/J2
KF2OcmSePM6L65NmKV7yYNt93g6ly87snkfmVnIoXe6/bPj0wOqc/561Y8US
pybXdihdrtKnR5NDdR1Kl3s1mFshqarKb/EalGNlSjGH0uVfFiTWTy6h6mPZ
2dYeFthT1d9ysJDnwy/+UrpmLeYd9vmBsASly7su5Hyd3tqudLnUxbVpq2rZ
lS6PHNd292z/BKXLW3ds8qgaYVO67P+23sx6nyQoXc6SHDT1+kZVH8vPnrUb
D1/H9UmzJP50vGBMX4fS5cRPv51Qa7ld6XLnDZPXB2S0K12um3fXoi+f2ZQu
H6nn531gvE3p8s47GfK/6aLyWzg/2lWTyke7/u/6/NsuqT/rMtrLukz9Y/TL
070/Xb7Svf/N79N4Gf2i8TX6VdZ9Phj9ovlj9AvzjXX5kMxP1uUdMp9ZlzH/
WZcbyHphXe4t64t1ubKsR9blzrJ+WZcHyHpnXU6U/YF1GfsJ6zLtP0a/brjv
V0a/aH8z+kX7odEv2j+NflV232+NftH+bPQL+znrMvZ/1mXSC9Ouge76YtpF
emTaRfrl4gDuemfalctdH027SE9Nu1h/0a6YbwuHNluhdNDa/OsBp777Il7p
crOILYMr94hVurwy8P7QrLVilC7f779pQY+uMUqXVyUUK/B9rZtKl6dVXRBU
t5RN6XL38tOnBK6wKV3OMmXI3TuPbEqXX3008nLemTaly1WC8u664x+vdLlZ
sz+uTPo2Xuny7WI7h766F690udeVuiG+/jaly/6D8lzOusumdPntX2uKd45X
9bHMLnt0TPVLqv6WEpfLdC/e2aZ0uckdS7235WxKl/9ZPzCX5xrO/+95I+O4
b1sn25Quh1qnvxwQZlO6fKv7xfCbs1V+i8dvO4tc+cKmdNmzWe7hH62IV7rc
vXRY6tMG8UqXk9/l9m+/Ml7p8u9tEgPX59e6nFjc81CDczaly6O2nbANGah0
1tqp7atLvmvjlS6neDW60+N6rNLl4xvrjt3yOFrp8vcTh6Rk6xCjdLlGVOuy
pbvcULq87ceIVi9m25QuD3pccPeda0oHrf1LPz33Nile6XITa7/JK8NjlS6/
SFkyr681WulypyYLLWMPRStd5vxoF5ePdv3f9UmzoP6sy2gv6zL1j9Gvae79
afSL+t/8Po2X0S8aX6Nfo93ng9Evmj9GvzDfWJf/lvnJuuwn85l1OYfMf9bl
j2W9sC5jfbEuW2U9si7XlPXLuvzRL+/XO+tyC9kfFMeW/YR1mfYfo1+v3fcr
o1+0vxn9ov3Q6Bftn0a/mrjvt0a/aH82+oX9nHUZ+7/i2O56Ydo13V1fTLtI
j0y7SL9Mu0jvTLtIH027SE9Nu1h/0a42I8qd+uZRnNLlnOPL1Q7teUPpcq5x
D2fkOxqldHlOnotxxbdFKl3O8+1nnjOTVH6L37N89pq3o5UuW8ZveunTNEbp
8pzo3MsTlscoXb6w7mTPwlExSpd7d3gSs8rvptLl1S2z7Og2NVbp8usW348v
tjxa6fLv284PP70tWulytZobFwdkj1G63OZVv5xjf4pRurwsNP+nCTlilS5f
yfjNliYbuD5plm+79XvQue8Npcsbxi4OiLp5Q+lygWwJS+Zk4/z3rL1vXvmi
zMBYpcshHTd3+DgmRuly0XHb555sF6N0eeaiAsVGhkcrXe63+N3eKROilS5v
PuxzeEJktNLleTVOVTj5WOmatfixjamlY5UOWms+bvXsxW8xSpcDotpWvTks
Runy5dCm/dcUilG63C/4p1fT90crXbZGX8taY0Ck0uW+/WvPXBUcqXR5kb9v
7oIzuT5plk0LM8968uKG0uX1w4r/vKB3jNLloz9cXLv8TrTS5Z6VrVHFTiid
tY7b/rxueolLSn853fy/CZWD+v/fv5tmQT1Zf9Eu1l/qB6NT1G9Gp6ifze/T
uBidonE0OjXSfdyNTtE8MTqFecX6O1fmIevvJpm3rL/9ZZ6z/k6XdcH6W0TW
Eevvn7LuWH+xTll/C8m6Zv3dKPsA6y/2DdZf2meMTtG+ZHSK9jGjU7TvGZ2i
fdLo1Cv3fdXoFO3DRqewb7P+Yp9n/SVdMO1q7K4jpl2kO6ZdpFOmXaRrpl25
3XXQtIt007SLdRbtKh945KsGS6OU/mYodfTPYYOilP4e6Vl1V4o1Qumvn6Pm
wu1xfyn9XXiq1p4abS8o/c10NueNJpcuKv0dn5rpp2vRl5X+7gm8VWpQ0jWl
v+XqPL847ni40t+AO4HefuOilP6W6N4qtV3dKKW/p7KUOLq3WqTS39EHik8+
vzdC6e/5WtvG9f8tQulvmEdcgV4hEUp/E17Wz3I5OULp7+wVl9u0qBOp9LfZ
1+8qVdkRqfT3n/HVe/1+O1Lp74JFlzt2Gc7571kTrvWe4PVPhNLfgccG5F3w
e4TS36e+zXN+skTlt/i0Hn7W54cIpb/f7xy+qfayCKW/3f5ISNiq62/J/vHP
Q/f0iVL6G9qv8qKFiyOU/vodrVX2Scp1pb9LEhbtqLThqtLfI68Wl9q8K0zp
79MFw2o1fHZB6W+GHW22ll1wTulvu/JTa+37+YrS37wR13vcfhSp9DdzLo8z
vt9HKf0tsn1W/7BskUp/T/zp+yzk52tKf4My/9Ure93zSn+PFY5t2eLQEaW/
nI76B1I5qP///btpFtST9RftYv2lfjA61dW934xOUT+b36dxMTpF42h0Kth9
3I1O0TwxOoV5xfqbWeYh628Xmbesv9NlnrP+NpF1wfqLdcT621vWHeuvXdYp
6+9iWdesvxm+e78PsP5i31D+132fMTqV6L4vGZ2ifczoFO17RqdonzQ6ddx9
XzU6Rfuw0Sns26y/2OdZf0kXTLuC3HXEtIt0x7SLdMq0i3TNtCvEXQdNu0g3
TbugsztSL03N9TrjyWblTvaY8u6V9bvGG/8peTbJpFezzCn6fZknVv+ZbyfY
D7nS0d7BPoeiYpYkWdL+12+PzXzw/uWl//Jm+O5Rf++HctA/RYsVWZLX35Xe
4H/lJ1nvXCler2NbVzr6Le6v5s32n+b0MGtVv9Qtj2640tGf1Rsuz5tlXrKl
5f/qE+WqZ8HLm2ZHJFu+onWK7y13DGhV1rtwmrW59M/YibW2rWlovmO0NqDv
md3blWbdWfTC7Ad+rnLQbwMmtJjcydNVDn8XTe2yrKv+tP2YaE6/aaluG/Y8
hyXFlI/x6nV8Ucmeru88rV5cvuRH/3vdmBMw4JorP9LxPbb7uCdZCjZs2KP6
dVc65qH/rwHLZ61MofYmWStG7p90poX5LhS65ipf8mN842se7R14wZWfvwOn
+WkZbet1/ewrrudzS1BOr/Dwjq7y28g8sRfpGvbTBPP9qqR/UL7kx/zx9Cj1
OMsAV36k4/tzWkeWBikTR1S5qOaDZez2qL8S1v6rN9H/Wy/WJjKvfKasbXFi
SbKlm5vuu74zdx+vNOuotQutYx4m0Xi5vrdH+cZfR1QvmOe+q3z+Xh3ld5X5
tmHX6qWbL3F7D3mb9rqPl2VPfJNX31a7zeNlvsNHfWrI/Ix+Vm3i21hXfTrJ
fMB38siPeXg4Z8W/PpmcYvK3o/yoj5fMzyLxC+rmXOyaP61lfuL7Z+THvO3f
8uTYAd3V/DT5UZ+6Mp8HBVTbeTDdVR8p3+qg+mPeJtzutzdroCs/0q/K9+Go
T3WZz4Mnrhs36oBaj6r+hktP9/0haZDaT8y9BtSnj8z/5atnnbmX7ur/9+N7
KqSRfMeO/Jjnp6Z2ujPsNuf38EB+2ictF7r9VMJiT+J90tSH5rOl8Pd/ZT58
S81nc/+i9/t92+or62Xn3Nv/pA7Gue1MiDffU3CbP2lW6JH7/HGtL5SPdVHa
OfnqV6Gu8tU9CPf+tFzd96ZNtTaqP725P829mznPkkYWT+b5YFkq9wtQny9l
vfhkmFzDa6+rPvWoPshv9vObDdJvfe7Kj/SfcZ9C6lNH1suEfP75Iwq76tNS
5tsSuQeB/FgXKXl3dZ04MYn2K9c9FNQH62Vf55Ee9dckmfq0kfrg/gjym++X
avVs3rKvK7+6V+K+n1hmFOnS/0HVJOpPV31oP7Qc2ZVj5qKeSbwfmvsyqE9j
WS/JKVN6VXx4y9SnNdUH+bEuCrwutbeU3ZUf6eb+i/v+b+n/6HS5aZHcnx/c
03Gfz5bD+TN9+jI2ieezyY9zTlNZL+kDtsduK+0653wl8x/53edPmrWBnIvc
54/rfhDKx7poX+pJnSM7kkz5fL8G5WO9NL5epIX/fu6fY97oH5oPllwng54P
PnmL54O5N4T6QF8KL6pbIN8UV306YL7JfHA/B96z5h76yn7i5S06B7ryoz6N
ZL0Et75V9nKIqz5+VB/kN9+NSPnIz/ebUJ96sl4WSvmoT9v/qD/WRU7pH/f2
uu4roT5VZb2gf2g/sfB+gnXRTsaX9kOTH/XxlfWC8XWvv6s+yM/rBfmRjntV
tP9b0mQ+0/6v6o91seDJ/Em1Fqj5bO6Lwb9AXwbIeoR/aUj3qshHWFE++Qiz
vlA+1gX2H5TP97ZQfk9ZL0my/7j3zz5v9A/NBwv2T5oP5j4a6gN9mS77J+pT
l+rj7u/uWZNl/3f3d//qjpxPaD5bDv35eeOnD1z1wXkM9+CQH+uijugXzX+T
H/WxyHr5TvQL9ekp8w3nT+THukgV/UX+DpQf9cF5zCL6S/uDqj/WBc4PtB+a
+32oD85jj7q3mbHzD1d93o/v2ZC2ct5GfqyLM3Iec8/v4YH8tP9bcF6i/d/4
3C3vz2PG/waKv0j/j3ttyN9Y1gvOe8jfRuY/7vERH7BCv4gPmPuMKB/rAufb
dOJIS+U+IPWnJcflqhFzeqZwf3pzf2Jd4HxO88HyUPwg6lNT1ss/7YbMiPFM
MfXpLPN/odxDdO/Pe9YB4i/SiXchP+oDfYG/oPls6oP8WBfwR8jP9zFRHznv
WV+1HFfr+CtXfVpJfYKp/lgXu8XfpROXS5X7lagP9CVS/B3tJ+YeKO2HliPi
T2k/NPlRnwayXjaLP0V9fKU+uO+J/FgXucS/pxM/xD1Q2v8tFvHjtP+b+mx7
7+vNugDnQXoLWRfgALS+rIXE79D6MusF5WCeg2NQP1hyFJ45/fGBFO4HyyW5
x0rjaEkQrkLjaPLjd2UcrWOFq7i399/5LJwH5cs+bKkinAflY96GUX0wP72F
OyE/0vG+AX4X87awcCekYx7WEA5G69TSUzgYyu8o5eM+L+0zlv7C5WifMfd8
8buYh+uFyyEd86qG8EbaJy1jhB/SPmn2VZpXVvAipA+UcQfnpH6w3BQuinSM
Czgq0tHPxYW7Ir2K9Fsf4b00Dy3gvTTPLROIG4Mnn1gY/mJaQ6fiydPzP1r+
UT+n4sm7T/T0G+nrVDz5ef+zFzvPcyqejHtqzJPn76xWaExtp+LJRa/ev7ep
mlPx5Lf9s59568/pYdY2w0suOTLKqXhyx/xfZD692ql48polf7fpH+lUPBn3
BJknf9442+qZS5yKJ+MeLvPkpedu3wiZ61Q8ucCon9+MWutUPJnLAU++7x+b
2XFN9YPlx4BhK0JsTsWT750v3+CTo07Fk035xJMbl2685/kzp+LJuEfMPPnz
uQn9J1VLVDz58bHVOzzLJCqeXOZInx/bl01UPNmUTzz5eKXthUMaJyqejPuS
zJPrHPAfOcqH6/ncsq1baJ1i+RMVTz4duXf++aGJiieb8oknD64dNK7t8ETF
k3FvmnnyZ5lP/jIpUs0Hy8L4Tumf/tv/zJNzFZy9r+C/6cyTeR5iXmVf2PLQ
yT48Xq574syTM2VYO+5NilPxZNyTZZ6coVnWzBUmcHsPeZv2Ek++liWs4tuv
1XiZ++PMkzft/7LC3Q/qA56M+93Mk1Ozt14TUzpR8WTkZ57cqP+c9cmVEhVP
xr115smZlza/FVRCzU+Tn3nykmmLv2zmk6h4Mtcf8zbHhPR+QR8lKp6Me83M
k8d7bdtVSq9HVX/Mc3vElQz1wtR+Yu7jM0+uEV9z+4ZDTsWTx8r9a+bJ0d5p
weV+5/weHsjPPLn7jMtDV8xV+6SpD/Nkn3KNvjozUc1n824A8+RJyZ5eS391
Mk9w3a8nnvxM9Ih5MtYX8+TAq6XeBV13Mj9R5cO/bM1w/FDqatWf3mOoP7Eu
tl2YuGHzRKfiyUFyL555co5ph/cP+qA+9ag+zJNtTd5GbRznJH7ywTsDxJMn
td1+aelYp+LJn8n9febJd7YN9JnShPcr1/sJzJO7NRicNbKeqz5tqD7Mk0+t
nlB2RE4n80PXewjEkzs2Xrh8SRHuT1d9mCdf2hTa6m5ltR+adx6YJ99+u2/w
ipMOU5/WVB/mySviT66vfcRBvPSDdxuIJ/+R4XTDv8aq/d/1vgTx5I1bapZ8
OUDNZ5OfefLdlKC/l0xwKp6M/MyTcS5ynz+udy2YJ7+dPe75oepOxZO5P7Fe
Vm7+fq59OffPMW/0D/Pkv8+M7NJ4g4Png3nvgnnyD+WbNP7mM6fiyXiPgnly
5ztzBq467VA8uRTNZ/j9kJZrptVY7aqPH9WHeXJHKR/5+V0O5snHpXzmyVx/
c/9O+od58jjaT+D3p0v/0H5i4f3E/D+LjC/thyY/8+QVMr7Mk1Ef5snLZb0w
T8b+yTz5jsxn2v9V/bEusi7rlNZvi5rP5p0T5slHZT0yT8Z7IMyTs0n5zJOx
vpgnh8n+wzyZywdPTpH9h3ky+od5cqjsn8yTcd5gntxJ9k/myagP8+S7sv8z
T8a7KMyTW2369En9tk7Fk/F+C/Nku+gX82TkZ548WfSLeTLOn8yTob/Mk5Gf
eXJO0V/myVx/rAucH5gn47zNPDn2oz8mXV3mVDy5gZy3mSfHyHmMeTLyM0/G
eYl5Ms4/zJPhL5gn4z0W5sk47zFPxvszzJPXi34xT8Y7PMyTE+R8yzwZ79gw
Tz5w43SbtI8TFU/2pv7EuvCU8znzZPhB5snDq470WvDSqXgy3s9hnvyx+Avm
ycjPPHmp+AvmyagP8+R08UfMk/GOEPPk5V6zAxZ2SFQ8meuPdQF/xzwZ7wIx
T94q/o55Mt4vYp6cWfwp82TkZ56cUfwp82TUh3nyUPHvzJPxfhHzZPhx5smo
D/NkcB7myeAAzJMbit9hnoz1wjwZHIN58oD5IzM2bqr6wby/xDz5hHAV5snI
zzy5lnAV5sl3hfMwTy4nnId5MtcH87OpcCfmyXgninlyWeFOzJPBwZgng4Mx
T0b5zJMLCpdjnoz3qZgnPxAuxzy5k/BG5slfCD9knox9lXnyAuFFzJPBOZkn
vxMuyjwZHJV58gLhrsyTwXuZJ4P3Mk9mbgyeXOLaoCtXdjkUT/74zPqJPt4O
xZPbpZXycHzrUDz58a9PLvZfbFc8Ge+rME8+1Gykb1uHXfHkPG3PRwSMtSue
7HdkxdxMXTg9zHpy/85BGYvYFU8uNrBHlmzl7IonTy23qsOzanbFk/G+DfPk
Wz3nvW62w6F4Mt6PYp58P3H3k4N3HYon553lW9FvgEPxZC4HPHluVd+sjauo
frC8azzTUayBXfHkC+1Ob/m9nkPxZFM+8WRL4WJnQ+o7FE/G+1fMk59Ztw3t
tNeuePLccrbN9v12xZMd7WZumF3RoXiyKZ94crs7G/03V3Ionox3t5gnrz/f
8PP2d+yKJ6/JUnd0aIpd8eT0JhOqf+56/8fwZFM+8eS8+3OXs1Z2KJ6M976Y
J99qcatJ+gf1wbyq0etepvHX7Yonj6rZaVmrFXbFk4vTPMS8Kl2gV95OW3m8
XO+bMU/+Y8LYtw+j7Yon430n5slXju3Ltacmt/eQt2kv8eSGHZ622FtRjZd5
94x58tg39aceD7Mrnox3yZgn9wu+b/3rql3xZORnnvz4Vu9Vez6YP/AveG+K
eXJIgde1x1ZR89PkZ57c6MznPhnC7Yonc/0xb5NXTS30+lu74skB8h4X8+T6
R8b2qlJZrUdVf8xza4FnZZ61UvuJeUeOefK0gzubtCllVzx5m7wbxjx5b/DN
CpMKcX4PD+Rnnty/Tqv5i9qofdLUh3ny4LV91t2foeazee+OeXLdh2Vu5bqd
oHiyeYeNePIj0SPmydjnmSdPreXb5vfyduYnqnz4l/nHvlk5JbPqT2/uT6yL
u0kV4maUVPPB0lfec2OeXP+w5+WZRe3Mf0x9mCfvfljmXNKSBOInH7yPRzz5
eOyFbldH2BVPzirvzjFPLuOx/s3lAN6vXPmZJ3c+M2n9zQqu+rSh+jBPztut
4/Ni923MD13v+BFP/tK6el6PXdyfuv5YFxPveActyedQPBnv7zFP3hs4uUTg
Vld9WlN9mCd/0So8W76lNuKlH7w3SDz53NArT8p841A82byLSDw57FpSxmnL
HIonIz/z5Ow30lI+vWVXPBn5mSfjXOQ+f1zvMTJPHh0d++hBe7viydyfWC8/
jlnXtvBe7p9j3ugf5smea1r4j7Oq+WDeaWSevO9U6sKS4QmKJ+MdRebJpdJz
/TStdYLiyZ40n+H3HQtTbKGervnsR/VhnlxCykd+fk+SebJTymeezPXHusgu
/cM82Z/2E/j9PdI/tJ9YeD/Buhgj40v7ocnPPBnjyzwZ9WGe/LmsF+bJeMeS
ebKnzGfa/1X9sS4q/lRv53cFHDyfzfuczJPPynpknox3LJknV5DymSdjfTFP
/k72H+bJXD54MvYf5snoH+bJeWT/ZJ6M9z+ZJ1eR/ZN5MurDPLmc7P/Mk3E+
YZ48Ynpq0fJ+CYon491R5sm7RL+YJyM/8+RQ0S/myXhHlHky9Jd5MvIzT24g
+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
8on3DqsT2mLngQjFexFXl3nvuZo5lxUeGK54b5GZsb/7LQhXvHf5+B+bvf6g
/DZcPvFe2/FxTWpvjFC8F3FIFe9Nebyt1blwxXsPtZow6fq/v8u8d3tqeuCT
dxGK9/I8xLw6Uu16m1lVoxTvRfxi5r2jy2b4c1OFCMV7u0lcV+a99s058+7f
zu095G3aS7x3VrkyDy//osbLxDVm3nv/n2x5a5cIV7x3ucSfZd6bf0P4tu23
ryvei/zMe7d23dz7wo4IxXsRT5l5795rnbtOP67mp8nPvDd2afSYjqevK97L
9ce8LX2zQKcvz11TvPdPicPLvPejUsXHn0iOULyX6495HvCF37KgALWfmDjR
zHv3+1yOzl/omuK9ryReMPPe17OOR3bKzPk9PJCfee9X80b+OGSH2idNfZj3
bq/Wss2Dj9R8NvGsmff6BP8RWi5PuOK9VsRfJt7rL3rEvBfri3lvtmPHs8d4
X1e89wSVD//SMPemPvb0q4r3vqT+xLpoXiJPoYi/rijem1niODPvnbnsfP8h
1a8p3ov6MO+d/bTyjDX/1sudn9yzfoe41cR7Dz+MCmg76LrivR0l3jTz3sgS
fgm+AdcV70V+5r2Fpu5p1G3UX4r3jpf6MO9tl/GffrdOnVa89xTicRPv9Skf
nP7u9XXFeztR/bEuavt2X+t7KVLxXsTdZt477PKw4fsGnVK896TUh3nvf+S3
nKT6g/fuHRDQMSgv8/MP4p4T782SrVXBNyOjFO9Ffua9zoGbb07PEqF4bybJ
z7z3gZyLiL+ZeOvMewe3mF++U2i44r15qD8xz0fH3Sy7pWao4r1W6k/46zWr
xt0fUues4r2nJT/z3jvtZuXIH39V8V7ET2feO6BA2Qu2pIuK93ah+Yx53lfy
oz5IH03zGf46SepD69fEi2feu1zay7y3E9Uf62KE9CfzXg/aTzDPh8p40f5m
sdJ+An99S+YP7bcmP/PegTL/mfc+lv2Qee+iXqfzzjkTqXgv5hvz3j2yXpj3
Ir48816Uz7wX64V5by3ZH5j3cvngvf/RXm+0l3lvC9nfmPcelvMA895Gsr8x
7+0k9WHei/2Zee9UOT+o73vHfb/t8+NnFe+dL+cZ5r3fi74w710o+Zn3Ql+Y
9+J8yLy3kegj816L5Gfe+4PoI/PeYKo/5jn0nXmvn5yHmfc+LHKv76obVxTv
fSTnYea9z+W8xLwX+Zn3WuQ8w7wX5xPmvUfl/M+8N+BOoLffuCjFe9vKeYx5
b7Ov31WqoubPv+tC9IV5b2Y5j6nve+X8ybx39orLbVrUiVS8d2CpTzoMP8T9
c9b7MfUn1kUROT8z7+0pfo15b9HY+WO8WkQq3pv4sn6Wy8ncn/es++X8z7wX
+Zn3XpfzP/PeXlIf5r15xL8w77WJ/2Xe+/OGiJRZhyIU7+X6Y13AfzHvDfOI
K9ArJELx3nviv5j3BgsfUN/3in9k3rtI8jPvTRD/yLwX9WHeGy/+mnnv+Vrb
xvX/LULx3l/FLzPvXSz1Yd4LDsO89434dOa9W8WPMO/FemHeW1Q4A/PeA5P3
N7+9QfWDZfSB4pPP71XjaPlWuAfzXuRn3vuXcA/mvdeEwzDv/VU4DPNerg/m
5xXhQsx7j2cpcXRvtUjFe88KF2Le+6twKua94FTMe1E+895uws2Y95bo3iq1
Xd0oxXu3Czdj3ptPeCDzXo+G7/ke817sq8x7DwvPYd5rFQ7JvLejcEvmveOF
czLvPS5clHmvXXgs895g4bHMe8F1O/1vvWQyvDdLUt93OSskW/55315wPCvi
FSI/uOLijd2CxzdxpSP/V15jd+x6cMuk4xxb9P74r+7cuGXKb4V9QOInIj/S
76yf9LT8OVc5zWQcG1b6svPAeFf6+1E85L3oSOLBzU9d6d2l/9N3NXr8aSNX
PTtL/w/esLryxDmu9IbS/+08hi9eV9RVH/jHWv4NX57c40qH3/RdWqG6R44U
k47zcPcL+YdbhrvSsV8tnhN44XGjlH/3rfc8EPVcJ/EW30n/YFyyf1ekz+HQ
JJOO/n96LOjGmP2udB4vpKP/41Jvz7nZKtn8LtpbUOJOvvuPcTH1kf6/enP3
x11Gu/Kj/xFvFOlo16CRpwt+Mv+2Zaf8LvpttMTfRH6MC+KcIh31bDorIPXl
n650jMt8ieuKdJS/qOzUuj1siBurxwX5kb5M4u0iHePVo8r6iJO//dtvwqnQ
rg0Sp7WTcCqM18V1f8bn8ko26Riv3St65mlaKcWkY7zmShxbpGO8vPP2bJLa
7rbl7X/0D/JjvB5I/FxTHxmvwt0rtyx37LbwNMNnrA6J74z8GEdfiSOMdLS3
08gNV4dk+XccpR/Qz4Mnrhs36oCrvagn4k0jHeN4af2S0VGXXPkxjvUlvjbS
UX7UltknHzmTzO9iXBCXGfkxjqMkrjfSkf/09VG/x65GXOZkM16VooavWfEq
2aRjvELbZLgS7Z1i0tFvduk3pGO8/JJq1C60LtnS8T/6AfkxXohXbuoj4/Vj
zjntO6z7t73/+zsGnmBd3Hr8+UzlXfXHeCFOOtIxXoPXbH0XmH7LpKM+iFOP
dIxLnn+yXcgb5krHuPw8Z/zr8edd6RiX80WqFy767Jal/X/0P/IjPX3XXa8T
JVzp5vz2aMPNPSuTzPkP41KjjC264TrX/WGMy6rAI2977nbl5/5BOsbl00r9
PfPdv2XS0f/zs7fvWPqAKx39f7zYs82FN7vS0c+Pqqx4mWupKx39fELyt/6P
fkN+9D//Lvqf64lygqld6P+V1A/o543LX9XcV8PVb+jnmtKf0v8W9DP6H+no
53Myvkg3/ew+Hwynwvz5/kyZyk1SD3hze5Ef/U/z0IL+p3lr+Y95bkH/z5L1
0sSd+5m49siP+tC6s6D/sX6Rjv63ua93U/5J2R/a9Iqr373tX97c/8iP9M2V
Mg67195VDsYF+4/8f4cZl1OyXyEd4xIt+yHSMS7YP5GOcbks+y3S0f/+si+Z
35X+7yb7/Fv3c76Jn478GJevRC+QjnEpIbrj9x/9ifwYl0eiX0jHuDRy10Ef
1B86iPwoH3HhkY7xgv4iHeOCuOdIN/oiOi7/b+uDcfGWuOd+/9EPcn4w+XvK
+QHpGMef5XyC8pE+1v1cpPof6Rjf5u7nItU/pj4yvjiPvdepTKb8unK+3S71
QfmF3c+HPv9x3vPBuF9xPx/6YHzpPOmD8b0h51LUB/UfIudz1Af1X+9+TvbB
uP/tfu71wbg/kXNyt/8Yd+RHOuKhIx3zAedwOc+b8cV5HukYxxbuvkD1M9LR
z+3dfYfpB/Ipph/I15hxIR9kxsVbfNP7/z/S/Yb8GC/yX2a8iouPQzrK6eju
+0z/L3X3iaafo7M2CGq6wpWOfoYPZX+ap3Id//n+TuVPz0t8IvanvnP6vbWm
OJQ/7VRiy/dfHnOlo/8dTfw79TnsUP4U8ZjYnwZ8W6x88D5XOeb8EFD9RctQ
VzrGJft3vmcyhrvSMS7bT78881kWV/3R/01ybj/r3ciVjv5PqlDk57RFrnT0
/6xmC745dsuVjv6/1KBz2c8yuOqP/s9Ts/DdH0q40tH/07Lu9i2YNVH5U8RV
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
f9ps5cxl4T5xyp82i9gyuHKPWOVPH268cGf1uRjlT1PkvWj2pysD7w/NWitG
+dMmQ1tM3t/MlY5xedB/04IeXV3pGJemG+3X7zW7ofzpqoRiBb6vdVP50wWZ
u56Lq+iqj4kvU3VBUN1SLp9r4tFU/ORN596udPMdafnpUwJXuNLR//s6vqi5
57RN+VPEfWN/mue4T8j3T+OVP/X6OiWkxoB45U+byXixP12+b//aP36NV/4U
8d3Yn+Idb/anG18E5v2svE35U7yvzv70myJbm+340ab8KeK4sT/Fu+7sT78s
1G3c3tM25U/fyjv27E+bvPq1ZZNIm/KnGBf2p7MlvgD70/DXDwZuD7Ypf4q4
aexPS57ptGWmvysd47W8w4MGlU660jkuHvvTV/5pe7vF2pQ/Rf+wP0U8O/an
nTy3Ddjwq035U8TXYH+KuAnsT5/8cOxll+425U8Rv4z9KeLBsT+dlfr16b/t
8SYd44h4Z+xPa9R8WGPSkHjlTxF3jP0p4o6xP/1l0cPKpYbGK396qdb4PA8+
8HEYrwr9ki+EL7Mpf4p+Y3/aN7Vn11gPm/Kn/+x93w/sTxGfhf1p0dNFel37
PU75U8TPYn+KuDDsT68/OFb1H0eM8qeIy8P+tMTCDnu6lYxR/nSqxCFif3rj
854/FugUq/wp+p/9KeJtsT8dUSXnkewjbyp/OiDrj38862lT/jQ8cGepsJtx
yp8ivhLSzb2SzmkfvTXxvFz+FPGbzO9K/2/Otzj57h/Ryp+aeF7yh37eIvnZ
n5p4ZPKH/uffRf8Xo3qinKbULvR/JPUD+tnErZM/9PNA6U/2p8Ol/9mfYnzZ
n05znw/GB2H+sD9F3DT2pzQPjT8Kd5+35vx/232eGx9UXNYL+1PE8WF/2sl9
3Rkf1E/WL/vT0e7r3ZRfUfYH9qfof/aniAfE/hT7D/tT7FfsT7Efsj/NIfsn
+9M5st+yP/1Y9mf2p89ln2d/ingx7E+hF+xPO4rusD9Ff7I/Rbwb9qep7jpo
zu3QQfaniIPD/nSN6C/7U8R5YX9aTnSc/SnivLA/RT+wP8X5gf2pj5xP2J9+
4X4uUv3P/rSy+7lI9Q/706/lPMb+dLqcb9mfjnI/HxofROc944PofGj8Dp0n
jd9ZKudS9qer5XzO/nSS+znZ+KMm7ude44/qyjmZ/SnGnf0p4r+wP8U5nP0p
zvPsT8kXqH5mf0q+w/TDSnefYvqhibuvMeNy390HmXGBb2J/2sTd35nxIv9l
xgs+jv1pc3ffZ/rf190nmn72/XrAqe++cP0u+jlYfCj70yqjt6blLBen/Cne
e2R/mvNl1vihc1x+EPlzjXs4I99R1/1W9P+lpvFVC38Zpfwp3s9kfzonz8W4
4tsilT+9EjL2WYfmrvIxLnm+/cxzZpIrHeNSq8rqFzcHuspH//s9y2eveduV
jv5vc/jm0Pr5Xe1C/1vGb3rp09SVjv5PKt/zXM4RrnT0/5zo3MsTlrvS0f8V
6g95nXY4RvlTvIfJ/nTSpXTr67s3lD9t1fJ0zmNzY5Q/xXixP+32qvTTgPXR
yp8iXgz7U4wL+9Nnw2tNLXwjWvlTvAfL/rRR/hnXnrSKUf4U76OyP8U7tOxP
A3uHfFohLEb5U7y7y/60RqJXj1zdYpU/nSvjwv70iryHzP60aBVHyzCPG8qf
Ig4L+9Ne1iPTvxxzw6RjvP4Y7fdN9JFYk85xdtifzi/wR0jeErHKn6J/2J8i
Pg7702H9t45I/DlG+VPEQ2F/ijgy7E+vZuzTeUWuGOVPEQ+F/Sniy7A/fbZo
bvKLra50Ew9C3j9nf/rD5s8OpP07D9mfIo4J+1PEMWF/Wmjs9Edr+8Uqf/pF
1LggzzMxyp9e7xe26O8FMcqfot/Yn65vc6FlgyYxyp+iH9ifIr4M+9MVXwza
82lytPKniMfB/hRxTNif5jq42yNubpTyp1aJO8D+NFfxj84nT4hU/hRxOtif
pjqPt47NGq38Kfqf/eliiTfB/nT1+G1tPj4eq/zprldjCuYpE6P8adbYZn/c
iIhW/rQH4qfIH8Yly8n47y4PClf+0cQfkT/z3SnigKA+Mi6cjv7ndPQ/p6P/
x1M6+t9T6ol0c3+B2oX+Rz8k5Zxa83Lpc96o/wQqH/1v4uPIH/of/cy+dZWM
C/vW1zLu7Fv7us8T448wr9i3oh/Yt550n5/GN+V2n8/GF9D8N/5opawj9q2I
R8C+ldaj8UdY1+xbR7rvA6Z87BvsW9H/7FsR14B9K/Yl9q0FZB9j3zpD9kn2
rf1lX2Xf+lT2Yfat02W/Yt96RfZ/9q3QX/atiBfAvhV6xL4V/cm+Fe/2s28l
fTTneegj+1boLPvWY6LL7FvxXj371q9F39m3Iq4c+1b0A/vWInKuYN9aXc4t
7FvpvKT6n30rnZdU/7BvbSjnNPatjeXcy77V1/3caPwRnQONP6Jzo/FBdM40
PshPzqvsW3FuZ99K52fjm+g8bHwTzs/sWwvLuLNvXSPv2LNvnSznc/atX8g5
n31rsrtfUP3MvpX8iOoH9q3kd8y4kD8y43JZ/BT7VvJ9ZrzIl5nxuiz+jn1r
Hnc/aPo/t7t/NP2cc3y52qE9Xf2JfoY/Zd+69MKRmZ2nRCnfGirvVrFvjW84
pmaFJa505P+9Z9VdKdYI5VsDypX1Wud3TX/3K+90sW/1c9RcuD3uL+VbR3c8
VHxEXlc6xmXhqVp7arS9oHzrxaalT9ef78qP/s90NueNJpcuKt/ayD5335yO
l5Rv/S4100/Xoi8r3zp0RMrAK1evKt+6N/BWqUFJ15RvHRox7OWDa9eVb90i
73qxbz1X0ra6k1+U8q2B+w7GvjsYqXzrKRkv9q2rbcWL/PkoQvnWU/K+GftW
vJ/GvnXdM+d3+X+LUL4V79qxb/2riI+v/XCE8q1n5Z039q14T499a9SkuTnz
XY9QvjVB3g9k31qzxccVs30aqXwrxkX9v6q868i+ddCb5Ab1AyKVb8V78uxb
fWdO9cu0M9Kkm/t01ZYln6vtSud4AexbN571970VF6F8K/qHfSve+Wffusuj
a+6LWyKUb10q74iyb8V7+OxbV13ofrfMvAjlW/GuO/tWvIPKvrXPxPs1G8x3
pWMc8Q48+9Z7+7eefFAiUvlWvMfOvhXvsbNv3f/N0S0VPo5SvnX+gmpxlpBw
5VuvLWk0+Yeb15Rv/Vn6jX1r2WG5B97eeln5VvQD+9bf5V1c9q2Rp95VDGx/
UflWvCvOvvWpvMfLvjV19c371U6eV741o7yfzL61wrfJw+8GX1S+Fe+fs2/9
7GCWY78UC1e+Ff3PvhXvkLNvXfDk708L1o1SvnX4/kGVzrQLV771daNKG5tU
vaR861i8Ay9/GJftc4pMW/FTqPKt7fGOuvxhXI7hPXPUR8aF09H/nI7+53T0
fwilo/9/lXoiHfUcQ+0y3ED6gX1rKJWP/jdxBOTP/L+29DP71vkyLuxbS8i4
s2/t4j5PjD/CvGLfekLqyb6V5qfxTW/c57PxBTT/jT+KknXEvhXvKrNvPeK+
Ho0/wrpm37rIfR8w5V+VfYN9K/qffSveZ2bfin2Jfese2cfYt96VfZJ963TZ
V9m39pV9mH1rE9mv2Leulv2ffSve72XfCh1h37pd9Ih9K/ZV9q29RdfYt653
10dznoc+sm+1i86ybz0qusy+Fe/usm9tJfqufKu8u8u+Ff3AvhXnCvatteTc
wr71gvt5SfU/+9Zo9/OS6h/2rTinsW8dL+de9q1n3M+Nxh/ROdD4o7Xu50bj
g+icaXzQSjmvsm/NIud29q3b3M/Pxjcddz8PG980Us7P7Fsx7uxb8R4v+9bz
cj5n3zpEzvnsWwe7+wXTz0Hu/sL0c0N3P2L64WN3/+IaR3e/Y8aF/JEZF/gp
9q3H3X2fGa9u7r7MjNc48XfsW0Pc/aDpf7u7fzT9nKHU0T+HDXL1J/oZ/hT+
Bf1z50rxeh3bJpl09ENVv9Qtj24kWbbJuRHjMnZirW1rGrreB0b/4B2wf+i8
jffHcP7E71aM3D/pTIsU9Jt6xxV+AfWxF+ka9tOE25audG7He6fyvrHxHQ3k
fbb3+9tjU3+fKWtbnFjiSjfv6T2rNvFtbLJlq/wuxqVw/IK6ORenSLsem/oP
Cqi282B6CvYr9X5pe6rnfalnGuoj7Vq6etaZe+nmHTn1fub7cqJM/XfOvf1P
6uBkUx/z/2L73rSp1ibZ+BSMSyN5L9FPyjHfpci7iG+kHLT3u3z++SMKJ1t6
SH60d1/nkR711yRZhrbp9cm8CudD+P1M5Ee7klOm9Kr48JYp39zTeXS63LTI
JEs7OVegXekDtsduK50s+0mUaVfj60Va+O+/ZWl//0y7+2dOhKBdeIezq5SD
dhVeVLdAvilJpj5oV3DrW2Uvh+BdzUMh/C5lU8mP9VVEyvFFPaVdqE8bOnfh
Hcv3+9tj064B0t62dO7CO5atpHy0N0n6LV3KQbumF+nS/0HVJEt3yY92Hf7z
88ZPHyRZOtN5Eu9zZngfJ8icWybI+Lam8wPeY/Sjdi2Vdkm8IdMPT7q3mbHz
j2RLL6kPxhfzU9av6Qe804t2ob05LleNmNPTvA+s3lFEOegHj/ZDZsR4pphy
0A9Yj53p/IP3JGUfM/3wquW4WsdfpZj+Md9byj6A/OZ7UXnnuSPpHd4PlP3N
tMuz8Mzpjw+kmHJQzyqy770lHce7iMiP+vQ8vqhkz3/3k3TSZbzXt1vyo//H
yP4M3Ud/4j1A6D7qiX0e+fndP+RH/aEXwqOMHvWZ+XaC/RDeZdXv+6Eccx+8
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
K9BPeP4O+sn69KUh6gi98BOev/M/1mB5lA==
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlgmwTmUYx889lqN7vmMbQpbuzXZxLdnDtW+5lpuQfc1gSJbIlGEQiqJo
DKUUarSZokWyL9mXkZr2lEJikOxFv/88z8z3zPM///O8z3m/9322zKGPdx8b
BkFQIS0I8qGnR0FQCP0iumEcBN14WTgJgj7oOvD90I3ge6KLwhdDeoMfiM2+
K7gIXFlkOLgZXGOkGms343MwXBZ4I7gMNo/yvBVcD5sO4HS4gej7sOmPHuLf
3YtNXWxa8Hw7FQT/IU3A98Ot4F1pbN5FfxCZTVpiuCr85+g62h/8Da0DDwDf
jU1TxyXBo9F1sX9SfnmeiW7L+zbo1kgIl41MA+/H5250c+x3ovOwW43uyvuu
4DfAD4I7IK+Bu8B1B78Dfkjnh2zW/4OriowHt4DLRZaCK8Hl+Llt4ltjxIE/
BX8Ibgj+Btwdm/d57ol9HrIGfAL+kdj2NQJuALIefAb+LnAuuAHvx4OPggty
4RMcD4QfC94P7qO7A88DdwDngBfqf4Fbgj8D/4nPm34XOv8x8PvAt8D1sWsv
/4mdoe50HXxF+AI8f8262uB64O9SxucHHwPfC/6XmNwLztY5wB8Fz4mM3wfO
hC+KzwVwd+BuIwdThkvCL4G/DoYKZnkMNMLPdYiJPCvuT/E+ApQCFwvN/gay
B5sK2BeGfw7bych5+O3wl9Hp8H+kmQjP5P2EyL71TGR+5f90mq3lCIK56Fu+
N+1Rd/oYkp+XzfnWKHCmx0JjbCYp7uCfQteAr+2x1yY2/mlwdbht+K0eWEwq
X5RjpRPTei6VWN4qj4b4N7PBuyKLa91NvsRyTDaK+fbIHPj6ieG5ijnf50hw
hcT86D/cC66CjPMY1h3rrpXX5TzHVQfKgxd4/NTx/GqnWIot57IS25P2dhzd
GX4ZfOXE7qYoslOxxvN8cEedA3gDuAe4DLoMa8uiZ7D+Kmf8JfZX0CUCu1fF
VRHw87yvoBoALodu6vGZg26p/wRurvxH7gnsnHLcRud10+NK8XLJYyAFXyK0
bxUOTYTTtc5j+ziLVvHtLPAR8OLI/tePygV0Oexj9HzFJ/owfLnYYm8HOCO2
ON/v8S+bQ+BWXldVQ9P8fynHOiIZgeVhL+zbga9EFreKz/HgsvB/8bwtZfEa
emzP8nhWLCu2ZbMV4jp4D0ajOfv+qvnYRNSQdfoe+Bh6r84uMLvBsXFPqFeA
d4FHgnco9rDZjn4dnxmqJ/ivH1o9r6s6jFQJLG/L+v1moldHdi8foxsrHgOr
7xX9vlQvsv088xRDfg5V0WO9lip2m3pMKt4WIcXhK7HHiXC1Aut/05UH4Bno
KaHl2mT0VM8p5eckz1nl5CykCXh2aGu0VvlzJLKcauC1XXmU4Xmjb72MHur3
qNxVreMXTI0sThS389QrE/uGcueI58tOdK3E9qr6cIJzLA1eqroFrqR9x1bT
lBdbPK4KsHZKZHGlGjU7stwpqP8VWX/U/1WN6e53oR7f27G44V5PRqBfQeoF
1sOW+JksQn+ivAIvDq0Hqm++hz6TZr1MPa0b32oG/pVvve1nqJ7aC8kE90Av
d5/yfVL9Xu/Z+MOs/Uj7Am9Ct8bmi9D6lfxf5DvDFE+B1dkRvmfVsAOR8epx
axUTgfXUU5HtU73sXGT+BuH/58hs1PvW+/86EFqeKF/OonelrC6Ux+eh0PLu
IPqnyPZ23uub/Mhfv9je98f/hZTFaw24TrGdX1ufI7R2RWgzjOajEomd25vg
TqrViZ2R5o1aseXQt/j7BSmpO4st14rhZyH6t5TVzaqqKzx3CmxOOALXHnwY
PSA2PQ7fJz2uZP8qduXBp+GyYsO/p4xXPq5B34jMj2aMzbwrFFp+pfOcF9i8
UdznS82QG/ysNoZ2pzp/3YPOQbHTRnftc47mKM1db4E7wx2LLNc0/+icxXdL
rPaqjz+r2SFltV5z41VwTXDN2GZL1XslwVe+T83AKz1/Nc8pRhVjzbVfn3M0
IykOVccueD9V/VkZ2Zmot5xKWb/SXb+A3s3z3x4bLXy+Ui/TXK0Yv5yy+Uu1
9KXQ5kndb25ifUHz+TSf/RT/fRPrZ6oPyvdc75vtEpu9Nav/o29GVmuHJ/Z9
9Sb1RtVk3ZHuSvOY6uRa8LLI+kh1n1e3sHYYa7eicwKbXzWbqZddxH+12Grz
WXCEXafQ6vNAnxXVo895jN3xGVW9YFRi96B6onqf6/W5C/qS/g9Yf/pKymq6
7quX72eo8jFlfVexXTm2/vk93KDYYixm7SWvgcopzRKa95Yrr1O2T83Dq7z+
qw+0iq3GJ/jvC+4Cn7+Q9cr8ms0iyyfFeanQvqs+/wP+rim34cNCloOab6/5
+ajHnQH/D8aYdX4=
            "]], 
           Polygon[CompressedData["
1:eJwtmHm4llUVxd97GM6F73tlhgQEQZB5CBBQBnEAHFBUCFGQydS0gUEezcon
S03NTMtMyzE1SiWRcgRRBhlFVHAKJUcEFdMEBEW09XvW/mPfe9aZvnP22Xvt
vd8OM2ae9qNUFMX4mqKoq/8vVoviBcm9uSj+Krld8i31N9OkLeofWxbFnWof
rb4tGjte+C7hAayN+bdJXtXc12KvbhpvXXhP+vol78ncV4RflvxJ7T9LXlK7
vsYP0HjHSlG8KdxI+CDhv2XPrSfcsvCaTcJ1hJsI/074v8LthdsLPyC8Q3iM
cJvC91ki3EC4gfBlwvslX0ku1D3mSv6n8UM13qrweWZLpJpip/5slbwv2SbR
0YrLNfac5u8XbizcoeI9Nmr9cYX3flrjH2pc/4o5ws+r0V3jTYXvEX5fuG3c
52bhbcKthNsJ3yr8H+GWwi2EbxL+pOo7crf5ko/YX/IXte+WvKP225I71b4r
u90s9E3ffdm6QUfvxdoOah9YeA/O8EfJ1qrP9oGkY+j3DvVP1v0mSc7UXSdJ
+qh9mcZ7aHxZto00SbYB3neqxheHvXwkPE74fuHDhDcJHyv8e+HBwq8K1xWe
KYxR/kBylH5jhKSr+rtJ6khGqv9Y9pTMEX5R/0dr/Zda/4bkdcl49X8nZL7G
hxQeO0v4UfYV/lD4U3QquUD935ecI/kudqC+zySl2tXSZ+As56m9QuuHa/3W
7LlPCp9YeA1970nOLT2XPegvamVHtf6N1Zy/8G8P0J79JQ3VX5GcLLlX40do
fLPGd0qf44U7CC8Qbqvxc4UPEf6XcF/hK4S/Lbw2e82/JSfFXtO091RJRb9d
lWzWfhXNb6v585gr3EX4YOE+Fb/tGuGTCr/xCcK3Cg8VHiv8huY3FW4kfKPW
d0Rvwhewh9qDJNeofTVvrPY7mjMMW0dHpe/wILqt+m6Pqv0INln6vQ/S/0/k
L720ZiX+LDkG39fYGI31kPxE7b7qW62x4cIfaP52yUPJPoAdp9L20Qg96P+h
mv9Yts1yr7rSRb1a6wBugWPQzWzNf17tseprUGtuwLawMTjip8L1hffo99Zo
/i+zuWBb8MMt2bpBR29p/O/ZvjxY+JuY3xBb0dxnquYT+KGO+i7U2FP4d435
r502vjibl3eob1nVNjuCt0+25Wuy58KZK2Ic275Z+BiN7xIeKfw4/lLaNg7H
l5Nt5P7g9wHCX1btg4OEH072TXwW370dHyvt13AjHAnHX5HNbV/qfOur5qjm
ws2TuesF4f5wKZxY+g7cRc3iIo1dHefnzsur9h3s5elkH6qvNxhV+E14m33Z
vrcSfhDeHfd7TnhmaV/GXpYn+/QlwvVif3TLnuy9VPK90hwNV6+Dc4SnSOen
xHvDLR/H/fFxfJ3f5LdXSX5YmivhZjgazrwy+27ccWnYdyfhE4k5Glgi3K2w
v8Ar3Svm/nbCH1dtj/hmT+HdwtM05wm1F0lmxHvwvnAY3Iov4bvHJfsUOkAX
J6tvsvZ+LZtbb1PfKHwlmwsfFB4h3KniWERMJDbu1fge/Ed6ryP5Qn0DIx4R
f/cLD414QXxZJ+mu9o/V17O0Te+K+IitH1uxr/4MjtL4r8M/8J9VVQttfOoX
GlspXGpuM+E/ZNsEb8cbtq1YpzsiV2kjvCHiv45aXKv5s0rrgLufJRlSmovg
pKFqr8NYk9/o4IrjHfqvUd+zGrsuO5YT09cKr5Z8UWObxraZ802N35216BBd
LiCmqL1Kfb01dxacU9rH8DVyJnKnt7O5lDflbYlT85L5bYLap0d8fEAyUe2X
s2MlfYy9lZ1r3S18ivB24RPCHuCDFZE/5eQ4jM/he3A4XL4zO/bA8XA9sZJY
wxk4yyvCA4WvFx5WOp7hb/cJnyb8UHYsmsAblT4DZ4HfT8X2NN5P478hRgmP
rjg2EaMGl74jd8VH39XcJyRdiDXkKBp7PJurJ3J+fJUYIzwFm4MPJKMiXpH/
cF50hG7g/690/31Vn3Nhdn6JLtAJuSUxkvOcLdyqdPzqIHlW/esli+JMnGVa
zJmu/2uy13YSviWZ0zZkC3fmroz1l/QLniUWkxORG03VmpalYyL22BNO01hn
4esiPxlT8dpLkzmaPXoL9yrNo+TXrUvvxZ7Ls89+fsR/7rA28lFSjl+FvWLb
2Dy2vyb8DR9sX7G99lF7nMYPKJ3T4rv48N4a2/++GvM7mBjaWeNzIrYS8+Ey
OG2YFrYpfUbOtiLiOvnKefBlvDFvPSlZr8QM9uY38CtsCts6XdKitA/NTT4j
Z0UXl4T+0clerR8U8R3bWRD2eZj69oQt0KYPmxio9Vcl+9DG7HzyGOF/ZudT
5J+c85ns/AOdjE326VXRR25Cjsrcz7X/qck6QTdNS+uyT+QnT2VzPlxPLtkk
7t8lzttF+KbkmEvshfP7Juck8+JM5HrkvJyVHLhr+Bm2152cJJnj4XrGLk72
QeagQ3QJRw+p2CfQA3puHjI52ccWhv13Vfso9X1ddb1ADkPuAmnCAfg5cRpu
IM8iHgxL1iNzhifXGKytET487vuPbB1cFOdBN+iI+HBGsu6oZw5JrjmoPS7N
tmVsmloLG/46bAXbpqajtuuRXLuS/1Frsgd7wTlwz5X4VOkYhm7RMbFtYfDL
kOCOR0Lf2Cy2+1jwUa/kt14f/EbOC3fg93AdPtw59idWtkiuXcmXGwcXb4lY
gh/hX7trXGOST8FRcBUxj9jXW/j1yKfIL/aFLzJOLPqsxrGSmpfaDH19WnUO
QS5BfUedOD/yg87JtePc7FyTnJPa9KrIV+CHjVXndOR21ATUBjdkx1ZiLLU2
OQa5xvGSXdWw4cJvjC8+GfkN49QzcDbcDWfBC+QM5A4HJteqW6I+JV9GV/At
3DwjmX/JKcgt8Hl8/13NaZ0co4nV6Khhsk7QzcPx/tSHuXSdjC2OEK5Xujbg
97FZbPfFiKc/T+ZacmByYTgD7mAP9sL/akv7Abk898W28Vl8b3ayL68OPoWz
qFWoOeH2a4WPKO2zcBf3wZcXh79x33alawZ0gU6o3TdHfL48ObaQQ5FLESOI
Fb+NfAWdbK+ad4kN1OQDSnMCsYT5cMVL2bGHGERutCLwOcncvSnyDfIlarmt
8f2BbxJ8m6BOHZ185sXBb/gyHNO4dA5ELkSOQa5BPrYhOYf/PNseeZN6EcvJ
wZfG+MSKa5Ybk2scapmjY0/2opYh5yXXIefZIfxmdj5FfjOydI57R8RP7k49
vyw536CWhCPgCr7B8C1musaXJNcc1KqckbNwprNL1+jchTudWTonW5ica5Bz
sCc1ArUBv8X3kfXJNQnnnVI61+OMnJUag7qBupLagza1xOjCfdQs1C5jCufh
fNNgjDnnx++TG5KTjZO+zhC+QfhI4W3Z3xfYg7V7Q2foblKcjZyY3DjLqWtr
fWdyUnLR6eEPxFXyRr7t4eP4Mj49WOuuD76BD8i9yamxFWyGPIwzcBZqcmrz
I4Mf4Uy4kxqS2pQahlqGHJM9WEsuR42En8HD1E7U3NRi1GR8x2AMX4SjmQOn
w+34CLksNdKi0P+Eit+TGpGaYFbYHLbHNxe+veCT7MFafJXYdk/YAzGO73mc
gd/mWwo+QQ5B7oCvwHENw4/hvv8DGDOebA==
            "]], 
           Polygon[CompressedData["
1:eJw1lnmYT2UUx+9MTXdyfxcVCmOZMWPfxzpmIzL7ljEo0ijSokz2JaMYZafN
UlGoKDyhp+zMDNkJ7U/WNtUYJiZR6nOec/rj8zzf+z3nvfddzvu+Nzz/6ZwR
wY7jFEEINPYcpybG3VALTgUcJyjUcdKIFfO8Gypcx/kFNqIPQjKxmzzPg7kS
o01D/LfQP6F/hJ+hHl5T3t8V+qFz4H6403ecPnifoBPR3aEH/ECbBnj1Icza
RuI3gihYjJeKVwN9F9SEgXgxeOnwBvo1eB16E7vXVy3eQkghZw59nA2L4B68
89JX6TfcgP14/Wn3LX41dFWoAlG0vWDjbIb+Ff0bNPH0PWfQZ+Gc5ND+Mbx4
YuHoCPiXd6cyb9vwt8Lvrs7Bp+gtsBkGkfcwDIZ82IGXS04IOhHdXcYF0Xi9
8Jail8Aim5cWEIVuAo3hMn2JJ+8jmXdPxyhjPQHH4Qy8LzFyesIm9Mfwss3V
IeIHoTd6Jl4COa3QLdFZkA2VfCMV/210JrGz5J+DNLxVeN+jy+Ai5Mq6Q19Y
K/VAfj24HOQ4AZ592GPvW4F+B5ZDBjnJMBfdjVgsxIEHyXhJcB90sHmROklD
n+Kbp2E4XileP7y/eL7uat3XsPWVdT7NdzPIS4dM63sWOQPQ69Hr4EPrcwI8
g34FXpX5Jqe/p7XzJPopGOHrd/fKmKAE8myNItFlfO8ilEMyeUmQYvMo4y3G
L2NextDXGfCiq98dSXw0jJI19rXu30Qvk/0n84A3mtxRsFNqlHfU9bR/B4gv
gPlW47ssXkDuNJhu6/Ye8Xdhpc1Btqd1kkUsG3KgGYzHGwdjpDbJCeXcyKTG
j/J8BAbineQbt6Ibob9Afwnt0N3w4iAW/sHbD3/Tlwae7k/Zp+NgLOy2uQgj
NsT2RV/0VWKVMAh9DG8ksdvpQxVYiL8ALtG2KbEVNj4Z5yG8m7yvIe1uohOI
r8XfDFvgO7zWeG3As70/E/8lKCFWXfYI+hq6K7oLdIK2nq6TrNdxG3cE3p/o
jlKf0B5ae1qXUp8XXD0HZe9PQk+EfTYXRehbGEs6c7qPnM/gmtWv1PFtoTru
Al/nZRd6J2z//9wgnkHbwzwfggc8PWPlXF4qex9WQ3Xa5so4iG/neQf8QV4F
XAlorLOnZ11tdF2oY2fnKnJXwiZIkXMtoHMeIWsuZyW09PSOqGNtw+0MDdC/
bPq3gefjMBjvqK2XtDmG/hwipbbwTgR0TRfa/Dp4QRBi9TUBf7z0n1gl8zcV
XY2xFRB/Vs4nWSc5A4i3RbeTcdm6FZI7Bea7+q3tsmaejsnlHaFSW76uZbTU
BrF15K6HFr7uR9mXE6GHnAWyjtAT/bx8g5xeptuh20M0VPX1TpS7McP6t412
W6G+3SNxnup89BAYHqx3yx5ySuGkq2djPV/XMk/2B/SxdXuO+GQ4TN+D8Wah
Y/EfRQ+DoRAm96XkytzLOQ+tfT135+FdYj7Lg/QbS2i/GJrbWSb3THP8yehJ
MMHmIID3OPoJGAuJnn73EXRtYnWgrq/znIqXLue21dBeW8P6nu472X8bYYOc
a66+Q/os/xb9pbZhANyB9zVtv4JvbK1kv9Wyf4Vu6F1ypkCS3Wtd5D0Q4+vZ
FIN3nbY3ZB9CCbnF0IF4EbGj1l7ec8DVOWvj610h99p5vHI5e1w9X+Telvs7
Xva/p3doK6s/qcOr5CwndxmscfX7ciYO431DpQbs/sqzcTwk5wU8GKz/PtKv
QvRUmCF3AF5H66voTujOcMTWP9zT/zb5f5P7t4J5vgpXoDSg8zKLvDkwO1jv
fandF9DTYZrVs9TLFPtuoc2BI/868g/p67na3u6P1egPYE2w/m/8B6ucSUE=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtl3nQj1UUxx/vU3rydH8iSzGyJluUoZS2KaOhRmJskX3flyyvfffy2vfl
te8hVISkZaZ1WkfEVFSMpSjDJEn0+Trnjzvf7z333Pu7z7ln+5Xt2K9J36wo
iu7NF0UxWDETRXsgK9Mo6sa4wOKkEEWlkihqwXoxsCSjFbwaeH9iOpPRacq+
UcibCRlT4MdYm8A5zZkfCb6GvDX4EmM8vAV4EL2m8MB5h5xLlmF+FBzK3u/A
V5AfybK11ro368edX82ye54ER6PfOTU+BN6Y38hGpxHYFfk55OORd0jt/GHw
0omdr9+pAW8ve4AddX94Eec/sD4c/bacNQb5eHAc8hHwNujUZz4U/jS4ljEH
Pg7MYUyETwaro9cJ3pN9E5lPhY8F/+TsbvBL4ADmufBBYD/GJPhgsBd7XwXP
c4fDWWbnFcy7JWbPGZzZx/W174zb7RT4FDrF9Dbsvca8C/Ir4MPIBsBrgW0Y
g+EvgzXcbrVj+x591+Ngd37jIvumc0495gORPyPbxmaHzuA0/y59XyfnPcCe
she8O9jBbfgE2CU1m1fijif8bqfBX/x99ea70VsA3wWuYiyBvw++w1gI3wfm
MabDl4JrOHMlfG1ib90MXgg+hrGM9Qz+vgichXyJ/DExvghcor3I7kRnMN95
OcveawFjBjqj0Jmf2F3Ko/Omn7NTPo7+z+h3QrcvowCyFcgWMWJ4b2R5qd15
DmdsSO07qnHODnA+8u3ga4x58M3g8MS+axK42v1qr/wqsfXi7F3BOW/Ay8Br
ylfQeVDnuS/NBS9yh2xwZmpvrLduwhnDmFdjvifYHu19MrH4HQ5vCX+Ltcry
A2RzUvPlH5F9znhOb4msEL/9tueQ6an56jnWD3qOGI9sLKMh/AtkrzNKwgch
m5Ka73yE7DijnfwY2algPj0VfhW+Ab4Ufgk+Et4/sbhQbmkHvoe8DvLG8N+D
xxL68xkz4fm4YwF/+0V6h9Rskx/ZDfRzZffU4krxNZBzyjFawu8G16NTWL8r
e8MrwesjvyO2+NV73yZfh98OZsXmz4q5gonlN+WZhcHW5A8Zzz9lwL9Y6w6/
kWX7dU5BsDBrbeHlE+PKRdnB9K4zRsAfQ55BdzW8gcfai7HZ/HnwK9kstTj+
BD7a37cV+z4Llr/0jtJRXH4cbL/O6ZxYrtM5XyonM5r4m76gN4zsXZVntedr
36v5N/BGiem0TsxfdKbuWNpzy32x2UX2UR1QzlIOGMPe82BX5DXZO5jfK6sY
8DzfTnuRn3Ud6Sqf/AaODXaObKsc3wv5P8znBntT6YxzG8rmdRKL0X7wW8GK
zivEdq5qx0T0e6SWp2fAS7DWR/EClmP00DvGFiv63qrKn4nFlHxStbUDvAq8
kMda8dhyhvxE+a+H59hpnD8wtfUcvV2wmqfccpfn7aKKh2A+1wf5KMaz8E+R
HfIYmeXxrtq7H9nw1PL9gWCx/wB8d7B1xVF7t7POb5hYTnhIuTYY6rv0nv1S
87dVyLe5LRTLDRI7c6/ra/8++CPIU+WHYDrD1DOopvmbbg/mL6o7zZF/6z4m
n1kMzw+vlVgdVyyUhQ9JzXd2sP4B41H4CGTVFaOR5TXp6A13sr7LY1Z5rG5i
76X4rerfpfu293yi3KIcrjvnBatPqlO6w0TvbQ673WTf74PJ1dcchZ9m9Pbc
NVc5Dv5T8FjinGmp9Q2qm13Bycy7yBfQyUmtTp5wrvr5K/wMo7/nNNlT/lkP
POZ9iXJmK3BCZGet83wom+i9lEvWIFvm9pTPjHaf2ep5V/Vadbukx6ZitHZi
+U15Lzu1vuBDt7fqSN3YfFU9xibkmz1PDkgtL3VULHgMqu+YF6zfVB0fA15h
vj62GndBfhlbP7NU9Vq9BLhKeRm+SnkyWK8p3z7pdpYNE/L4QvhI+DzGcvVI
idUN1dxN4Fm3oeyf4+cvS6wub0VeImN9jnJLBeQVvK6pN1ieWp0vjSzXe4Nq
7sOK+9n6Dvhq9m5EXjRjNVv3X4t8P7wSshn6PXTyEqtNs5DHyJf5HUrCs/UN
qifwvon1dfqu1L9R9WsbOBP5FrCU5yLluJt74VPBmYn1FKXY9672RXaPDYnd
cx3nLE6tbwroLEhMZ01ifYW4ZLqbfucedGbHdh/V1OXee5RFXixj77jUa6vu
f0vG/i/ov0MJ/WZq/VqRjPWlnSLri6swPxDbfdSDqadSX6ZarH7ssvcv6oVG
gH+7n6ifqex7defrwXpQ1fGb9Vy9cWw9ifroP4L1geq1csHZqfXg14LlT/Wz
W4L1e3qXLM7eGDznev+jWP4vWFzrPurR9N9BtXh+sDPV+/8bzLbqOQtzzv+2
obBD
            "]], 
           Polygon[CompressedData["
1:eJw1mHf81lUVx788F/Obj/cBRVKcTIlRDkzTLJPEVY4IVEBA9o+9Ym9B9gaF
nzIEWWquHJm7vacz0xQUxVyVopZZfd58Tn+c13PPOfd7xxmfc+7Tov/orqMq
RVF0a1AUDfX79bIoLhbdlovidtETok6pKL4t3Tcl/0HIGHcVPaRxe+k7iE4R
bRXfSL/DNP/L0t8n/l7RNzS+RPSIxr2kv0bjfqKHs7+7VOPLQjZT3/ZOnvsd
0RkaT5VsZtVzOAtn4ts7RedoPFGyb0n3Q/FfED9F/JXie4p6iH4s+U9EvxSd
K/1s6QdI/l3xLcW3Sj7nLdl34OxfEW3T+CzpRmj+ueJ3it8hukDjC+NO46Vr
l3zXmaK9MuiVkh1X2oadpRsXtv1R9hk521Wi80SjpTtRc76Xfd5p4ruI/7n4
X4suTt7jktgPW/4qdJM0XiLdWs05tFYUv5DsQo0n49PSdx6YvCZr/5S7iZ8l
vr/4WeJf13kHiT9F/Grx/xQ/Unxn8b1F09lb3/xWusdEj4qmyBdTRZ2kP1W0
UbJNojtEx2vuqPi+i2iMxlmyDdLdKKoXfUnys0V3a9xGuklxXtY4RPyQwmtz
J+52vaim8TrpP6l4/a9Jf4P4htINjvOfKRqqcQO+kW6tqCDe9HOSdJvFH5Rs
8zPErxLfVPxY8ROq/v6LohWSr4yzshZrcmZkzYNn7lLx7+s8fcXX6fvl4pcR
g9KdXnr8XsX3QbZFfGN931/8WaXP+N+K92S9B8V3TLZZl7AfMUJsoLtO9Kbm
95N+iPabK/7tin3QKYi93q1Yd63oHY37SDa46hhvFfFIHF1ROldOkuwB6eZj
E/FbxDeVvX+THYvEzxx9v0D8UeIHiD9Hc8eK5mu8XrJGmt+u9Nk44xzNXSg6
Urrhkn1Vuj9mxxIx1ae0D/ElMXOPdN8XtY34vYi1xf9da/UQ37Z0DnF27nCX
dIPEXws2if9d9n26i36v8aWSLYozsDf5y5zLJB9Y+tsns8/EWfqKDtMdZkq/
UmvOFX+Q+KXil4kO1ri96HGN10t/A/4n/0QtJW8laqxxN+me05knZfuF2CRG
yZG2mvOwxpsl2yp7Hiv+NnJD/DLNPa5mGePlojmi2aLjJTsh9rif2C689/kR
72AYWMY3fLuBnBR9tuY92esW0Wmlc4GcWK/5WyS7GSI2wwYzwNJk28zkHOJX
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
            "]], 
           Polygon[CompressedData["
1:eJwtlnlUV0UYhm8gefXnJcU13HAPl/zHpdJSS620xSw1W9wVt8ByQxFUVhEV
wQAFQUBAc8Mtl8qyU6e9zmk9WamltptatrhlPe+Z74/nnPe+883cuTPzfXPb
TUoYGR/meV4mRMCqwPP+wJgR8rzV6DWwyfe8MtoOhHvei/A8z8W0V6Mv0X4Z
rkB4pOfl4hXQlkxMCmxCH8TrSFsn6Awd8TvASnvXdGJ+Q88jbhX6HPo8LEUP
xRsIg+A9e0ceei2s0VyIeQZuRK+nfQMUa954iXgX0L/rPTAXryVeW2gDO/Fu
ZR49YCu6Gd4AdC26A7o9xMC8kBtvEToJFsM/xLRjLnvRZbQV0K9Q40Ala1WO
fxRqaJsNYehrfOu/UETf7bANdsA9tCUTUwWvomMZt5pxanz3jv14+2APlBLT
CL8hLKTvMcabiJcEt9PeD+6AKtqqiClnLkd4fgU2E/MsRKGraa+BLRBN3M2Q
gb7AeF3Qk4k7ib4CVyE5cN8RTt8IqAOFePmB+yZ92yWYRcybeI/TPhamQmbI
rY3WqNJ339iV76rQ+WB+L/P8ElSE3Hu/ZZzTcAqWMFaifWck8TFaE9iIF9Cn
AdSHePpl2vzj0F2J6QZr8XIhT/tle5lle/0cegU6O3Cx6lOOjtQaak2YYwuI
hh14JcS3RbeBGNt77cdi+nzNe6PsXOt8V9g4CbRXojdDLP4t0Mt357UErxRd
yhrs5rlWZ9ry4hzjnYeLlotlilUuQsi+VzlYg94KW6AZc4qCEvRSxsmBVXCV
Phl46bBMuRNya6i1TKftLO+YhteC5+awDO8XvPboXPwl9LmI9yf8BU3wG8Mi
++5JxHyEHk7ccvRTtD0NnaETJNF2nbie6OU29tSQWwutifo+SN8HYJjmaOf5
NvRrtB2F1+GI8hWvJ/SGRcRMpP8EmOO7eX5OzMPoh+BJGIn3Gd4H8D58aPPU
O95GT0BPhDthCd47lo8p6LH0fwL+1rrjbcBL5TkNTuNNwpsMM2AFbV/gjUA/
AmO03njNiG0KC2g7w3e3RreCltBdY+PND9w6J9PnBM/Hw9x37AlcnVK96gQL
iFkIsehuyiHVY2IGMc5AGOG7NVPu90H31rpYvr8QuNxvjG4KTcyrtbyYT9sw
4ofDOvRKOy86N/8Frj42RDeC5pY7Wqsh6MFwt9WwA3g90PczzigYDTND7jtz
AldrVXNT8R4lbhQ8ZnuUrVqunNH5hh8DV9vrouuBbzmTozqGnqt5wE+BqwfK
i76MPRiG6DvwWuG1hstWm84Gbmy9Y77dN8p5395xk+VsHfJonc4Y42QrJ+Eb
nXc4Dlm05RH3JXq07fUx9FfKNfQ4vFRIg5OqkdYnX/VCOeG7XC3F2wjFsJ62
dNUO9GF51IVii1WfDN/ducrzG8CDMLtzdQ/qHdk6i6q5Nr9reJWq/cpNy33d
yYdUI3TOtaeRbs9z0Ku1JnCdfuN53zjfrZnu5lm+W/s56J+Vx/Cr7dtsvDPo
7+GHwO2vcu9j9CfwaeBqgmrDNN/Fa38T0PHKXd2feCHmcgp/FnomTLfcmkr7
FO2DvV97rj0q0LdrXaFQ/wF4EVDX9k9eUciN7ePVg/rQn7H6wVDVZMsj5bXy
u8h3/yxaF51n1RvVne6QyFjf4cWhp8EUyMKbTp84WG3/Hfo/UK5q7L3ofbBf
9yIxY3xXK3Ru0kLuP+de5QzcB+/aGRpv9UV15oT9v0Sj74IBsAvvEByEw5Z3
ml+J7keOxzbluNZP9cbusI205/Gcb94uvJ2wPdzdb28wTl90H+gFi/EC4hpA
pN0tOqe7ieuC7gwdrTZpnYtUJxVje/lW4P7d9A/XP9zV2BSrhVNC7n7QPfE/
OO1WcQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
TVPczsZexO8auBbf+R8lpBHw
            "]], 
           Polygon[CompressedData["
1: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
P0v+uyTXcBbORM75DHrLO4M=
            "]], 
           Polygon[CompressedData["
1:eJwtlndYV2UUx6/w8+mH127TXC0rRwMUULRMRMRsOtDcKy1zBVqZmuZIpdQ0
zVHmSNNEtoggCLIEFExjFJiCiTlSrEQMzbT8nN7zx+d5vvd7zvve95533VZj
w0PDPCzLioCG8KNtWW+7LGsiTIAEx7Ie8bKsh8EfvsMrxFsEC2ExPItXQLs9
bstKgi54xzwtKxN9GP814v2hH6wjVgRL0C3pry20g5V4IXhF5K9CfwEVUC59
wRZivxKLRy9H/2KbMcnYgqCWscfgR8MFYmXkfY0+jfYm7gP5eHlQoO8/SSwH
2qBn4M2EWfI95P5Bf5vxN8FTPK/BXw1rYTpeBe2a4j8ArWA13lFiP+tYzxD3
xfeD6XgP4j0Ej0MWsVO2abOLWCLslvdq3WKI5VG7fAihfR1jWUFuPFyyzTu+
RW+Fb7QuhyAIvYTYUlgGf9P+OnjQxzDJxdsOI9AjYRyU0i6XnBzwJ3aJ9x9G
N6CNBcXER5G3hVgVejH6E4iAA3hzoT3aR+oEubIO8FaiV0E4lOO56MsTytDj
dV0lay2P2aaOUs+f0JPwYojFQhzMB1+8PGJ/MbZ6mIfXB68vPK3vnY3XGv0E
PAbZug42ojfAeqi2zZp8FT0VpsGX5Jy1zdqulO+Ek1Ci375V6g3bHLM/ZPw7
0VEQDTWM5yJcc5s5+EzWHgxFD4FBsjZod4v4TWjsZb5xOTlXea6DFbr+C8n7
wTbztRFvE2zWsYzGewPG6HxI3nCdyxE6v//Q1w23meexeHfInlUtc70DHQkb
HLMfZV8O1vHlQyd0ZwiABVp7f7QfdJA5JyeV/vfCITjDevEmpyvv+ZMls52c
bZLLczr+PPRcmAPHaRtHm1hoT+wgbSPlvEHfRTwdfY7Yeeig8Wh0BuwXZJ2Q
N4nYZJgCA+WbybsB12EPOYPwXofBsgfUi4Ij6N/gAnQi9go0oj8bzuMlkjME
rx59DW5BMp4fXiE6njFkQTZMwGtCu/vhXsggLw280HdCY3jLMTXtqPtD9snH
eONkPuBNXddS01L6LIEUtCXzLGcBzxVw2m2++x3H1Ooe9N3gwD7bnBNyXhTD
VcY5QGqHLnCb77mJV44eqlq+aRh6OIyBf/H+g4b0l0osGK+S5yqohgTb1F/m
4Xlix/Fi8ZJkP2qt6vW9Uuej6BIoho5ytuFdRl+EGuir8yZzU0afp6AaJjqm
blK/+7SmAXilsg5sc0b9f1ah2xJ/EtrJ2idnl23WYk+ZK3KKFNHyjS7yTsi6
1fqOxBsFoyEMWuKdJV4LV3StNcVrDs209tK2AdoTPHSOqsithEtuc4/IWELg
lNatF/oFx9RK5qYfuj+EQgptkqGbnDfEDrjNGnLTzzPgDeMdczYEortDL70j
5bzvge4JwXrmSJ1r6acOrkAfvAxYKOsO5sv5Rk4m3n7IggXqdWa//k5pvpLz
UM5QntOIp8I++Ej3bzf8y+RFyRko+wbvZcfMq8zvOd1HJXjFMneOuYfl3E3X
fk6gm9NPC7iIjpU4sR48B+udKXdnoJeJnSb2IvSGl/SskHUvd8Vk9PdyZ3ma
8zRDv6kJbVtDG9hFXRPAV/fxTtvsYdnLwTpX8XKvwizazoYPIYVYhGP+bw7a
5i6VO1W8rnjPQReX+feR+2OHrBOY4jL/SHNk7tG9YYCMk5ypeOEwTddcpm3W
n/wbyD9CC/UCdU3E2WYfy37urutY9miQ1Msx/1LL8JbCpy7zT/Mo3/w5OhJq
mKsAnpPIe4/ndyHMZe5k+d6Z6klsr2P+S9ag18Fal/mnkXt6BvoDeN9l/n3k
X2AROptYDuSCzXsaQTMvE5P/g92MOxF8dB+nodfL+Ux8IITCEfq6DRqcino=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1l2eMVVUQx+/bfY/dy7vsoUrvva5AAAFpSlUEBKRIkQCyShcUCGCB0JEm
SAvRDyaG+AUhEBKEiCJEgkpEJQQTiRqKIL0sHX//zPjhZP5n7sw5c86ZdmuP
nTZwak4URTVSUZQLXRCiaH0mipomUVSHMRU8C14+uDK4LXguYya4LrxmjK7o
noqjaA78GfB3g+dCG8P/IjbdSszb8b0eeBb4XXBD8FLwcnAFxpV0FD3MRtF8
eB3R3QbdxHgGvBG6wW07zpql0K0OfwO4pfTh58lmcBr8Hvw60MrIVIOWZJQF
50MzjArgPOiDtMmkwFfB5cDXofcYAfwbtGzG+KWhp5jngX+FTmCPDPgONheB
T8NLs/8t5j/pLAXYjk5FZNpmzA7tpbvoxKidsjvNc3tKQR+jlwU/hOYwLwOO
oHfcnirgAkYpcAJtwZm7gX9n/1rMy4NrQLOMquAy0FaJ3eU2bPtI7wB/HfQg
OouhS+EHZFqBe4NbQmsi0w76GTIDoKPgN4fWg98aWugykj2GbTH4OHS4v/s+
8Gvo/gC9wz0MBT/hKF+mzXdaIvMOtCf8PfDOIzNH50mZf+yLTUZvXR/b5sH7
ABv2Mp+t9wU/lzEf6JqxdbX+buh05s1T5rt/+Hvp3V5k3hD8MrSPY/F2xbbv
Aegat20VdAt7bIWehj8Y3Bv8CbhRYj55VOeL7S7X8/1DxQf8ldCtrvs0so0T
W28NvBv4RoTMcPQ6uA+M1j0onsDdoV0Uf+Ae0Gb+jk0UM4zW4I+hL/kZ+0M3
su4Gj9kl0DYpe9c5sfnJsthsWA1vHbKX08a/CW0fLE6yfK/rNtTP2H5NZQvf
Y77VVByCE3BDcGdwI/fbBi4r3W2x6Qs3db7W6op8afexnv6OuqtDsdmueB8B
7c63FvJxnSW29ddDN8fmb9s99mVDp2A+qtjqBe7BGKb7SizPyE8W+r7y2T7B
7JNtT8Ern9gdD4RfVnEEHhCMr3cYBC4JrqZ4QW84874Z0x0DHqx4BjdhtEfm
R2ReDxYDsqEGY5zeCl5Hf1O9bTc/o85VKbH4GhkMyzdHB7szvftqZIa671Xg
+zC3oSK4XzAfKpNYHlQsyD938q63cbMd0OaJ5c5FweJIvq3YqgWeBH8m/J3M
p4Fngyd7XEzMWP4X/234UxkTFPPwjiHfBZmTsenK376BbsnYPWyWX/v6M4Ld
i/infV+t/ZZqBfOL2FgGXJiY3mbwWXgJ8pegfzsWr8h9+03FNbrPpyy+Lnj+
OQd9A/0FGYtl3b/iWvH9iueWodDDzDsrh0OXuHwDZI/EFrur4C3MWIwvgi4O
Fnv7+T7Pa5xq3wnmnVLGVy1bBn8l35cr7lNW2w66zC9eE5XHJijHJmb/GfjV
wCPhTw6GR4Engau7/0wBF7m/VUks/2ivFfA+j+29VHN154XgPbH5pOJ9bTA/
kD/0gF8vWP3L5fs1ctFBvp0rsPwvP1+LzH3453XvyL7K/Aj4OjIPsvZepYPF
nOraitj4equy8Mcwz4E/GfozvJKqTdDyiquM1WjVLeWfWci8EFs+HOF4L7L/
sFeHYPlIeSmdWN1uBG9abLaFYDlf55K/9/cYUywUZ61u5/gdjoXfF5xKrI4v
1J7gR8jUDCavep4LPgB95LEzJTa/Uk/ymHEDXqVgNUu1Zph8MFgtVL7qFZs9
smuHrzME3lFwvmIKvEBrqkbKtmB1/UnW+hfdZ8WM5Vjl1Gf5/oC7OIHMePRm
xtYbqLe5gs5d1u+rfOs9T+7/d6tcE2yvKqplseVJ5U/l0SJ/o9Gx3a3saRBM
T/pNHCv3Kgdnmf+lnog9cxLrlWp5n5NCZmRsfPUptYPdrfqXyP3nPnAA9F/O
8hX8q+id9XOpd5J/qHe6VGDvq55nvmKWcQ/dftDLfNvvut96rVdPIT/U2Zqx
16609R6Ks8vIFSPTJzY/l52jlKv4Vj9luT6TeH8UbM1DWp99SiTW67WAfz1r
/n8NfrH3iuoZ93tf8bX3OQ/YayD0sL+13vy294H30b2ZtV7odoHpSFf7jQ2W
mxTXKffJVLAYVD4rAM+OzfeK0T2Ttvv5M211Wb1eVWTGee3b7vemuL5SYH6r
On8X/J3fm85aMlhu1ZuOCNZPqKbI7u8Zt/yt5MMn02Z/LvuOje29FNfTYzuj
+r5HyOcFs+9u1u5NPqZ8oJ5Ha95AZqLnVuVb5f80MuOUq4Pdr2Lhfe9zlAcH
+d3K/yv7P8KjrNVl9STVvC6pto6BjtfaKYv5con1hm2C9bHy/02qdcFqiWrZ
kGC9oGrrp7H1t6rpJYL1jjqLYk156SL2F3oeU08lH1PveqHA3kj/AvonqBjs
X0J2jnHblN/zPY6UG/8DOfp7eA==
            "]], 
           Polygon[CompressedData["
1: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
vgWLdSt6DvAYPoifzIgzn58c09zF/wCJZn0G
            "]], 
           Polygon[CompressedData["
1:eJwtlnlQllUUh19QxNfvk09wBRcEDbUyUVsVcUlNQTBxSdxQQHFBUHDBRBu1
cMsFE1zGlplmqn9bzEmtbBmnzHDGMtMps819w1wRtec39/zxzHfu75577n3v
PefeLyG3OKso3PO8CoiA+ijPq2noeTcDnncf+wE8GQI6n4KBEBP0vCRYgT2T
vlkwG170PW8kXGPMQWJMwB4B6XAebQ/aFeLOxXc6Y/MhF9oTawo+k+Eififx
K8COQx9L/0swDgoY1xYtG3svPp/BELRnIR6tCX2VjNviOy0BrSN0AJ++SWhp
2OkwCtqgDUV7HLs79IZmaFWM3wpvwTDNj88Y7NGQD0eZ91/W2RrfEfRn0z8B
JsJoSEXrD0OgBT4tYbjNm2bx3iTOLmhlMcajzYFp2FNhErQLujkysEdCpvlp
X8bIT/6QC5O1//ZNU7Bz4B3ivw2x5q/9i8Lugd0TkmEwWhY+o+Am33SYb8vB
DuCXqDXofKCPjX1COYA9CJ638xiPloedr3OFYdDL9nK49hxWE7MC3vBdDM07
SjGwB8EAaI7/BcuTNPwmwiTYDJt8d1aKG8IvGvraPmu/M+m7Sm7tZ+yX8AVc
inJ+feifAjnaR/x2EGs7fOC7tSuHsuAF7KFam51bKloX7KZBlw9Vth6tq87q
5AZz3oFT2L/CCYhk3Dn6d2MP1RyQrVpAT4cMyLO8T8HuC/1sriDaFcYeYOy1
gKsJ1cYM+pfS/wj9e2nvg1t2Xv/hl0s7z3d7sA/tFzgOl/EZrjyGs7amywGX
k8rtMcQdC+PgNv3X6X+gb8K+G+X2oBt+XSHJ1rcIbSEshmK0xKBbj9Z1RGeM
toK+8JDbD+3Lz3CbuMn47qR/B32/43sKkrB9jcHeABuhBn6Ek77z34nPSliC
XQaLoDOxFtgaPsTvK/gaHtN5oU2ECbaWBmgR2JHQSPuIVgmbsTfBBuiGzzK0
cliu77M51mOv0R5gf0/8Q9AA7Q7fdBeO2bcVahx+r8Bkq99OUIq9EBbAUnxK
YS52IczWHYXPb8QcFMa+0N4OPdDuEvNv3TXwDwRs7Bz6E+jfzZhPfXefKp86
oH1E+2PojtYELQDREGF39krsV2EVVODTLORia46LcI85jzN+AGvZgk8lHKYd
j999+sMUg/YqCKKdRSvGLodlsATKYA20UB3h8z72e/AJlNge/ISdyhwVtF+D
A7T3KwZ2FaTQd9R35zuf9jwoslxLQKvTWrUetHC0Y/j2Z8zrtNfDQdprdW6w
zs6vC34n0Afit412te59tMigW2sP/JKhJ5zGbzB+5ei7oBc+bdAvqX5Uc1Yn
9+Eqdq3qFWLxyWRsBpyxOh6r+wt9o/JNv5ZrtwLuLbmH33TVuO/yRXtUplyH
l6E3NEeL0Z2q/MWno3Ja3x7hHm7tgc7oodYF9eChTSPmVCiEvyyHdG7nsc/B
GahjHQ/htu2p9ra97ntoCiE7Z/k9HXLvgd6FNtA46N6KTqop1Qs8h09X3We6
O6y2GwZdnSsflZeNTdO8t4gdR7utchifBay1FJZDQ6tV5bRy+3Pf/e9Q7sYz
vgB7FsxUflida0widifoHHL3ge6krdhVUB1ytaX9aKz1qVZC7h7/A+1POA2N
bI4Z9ibrbS5GewZSsPtBrO3BfLR5UGL1qZqutf9BtQF3BtPsHdB7cIO+7+i7
HnD3kHLi0aC782rsfTlE/w9wxP6PrbQ7aQ/938C3vrub1qGthdWW49FoF6yW
Y5Q74Ck3iBlmdazcKNLdAfX4XbHcVS20JE5raGX12xbioF3I/c/SfynlqnJW
NaE3Y7HvakFxWqK1gtYh9ybpbWpmayrB3gbVvvs/pv8s72L/D7P1QAI=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxFl3mwj1UYx98f/V7u6837iiRFyDKWweDad127i+vKvu9LrhZLYy2lmqZt
+tsSLVQk2kgxGKnRUJZUyhJRibJvqc93nmemP955vr/vec45zznn2X5VRxcV
TCsWBMG9mSAojhwWBcEL4OnImmkQ9AmDYGwcBEuyQdAZ/lhOEOQzNgi+AePL
nNf4ePT6w9eBn498Hj4P+SDfLHAh8gLz+4CXoj/O9eui/w6/832dt/kGgtcg
I8Yng0NkLb6HwSWQu11nJ7Ivv58G90MWx7ZdcJuTIDjHXj3hA7jG7DGU8Yns
2Skye/pGZofsWYGcENu56qV2Rq05XHPhVzK+nDULwA/BN4TvE5td5+C3MD4E
/susfbJhJfx9jFfmuwm+wJeC+zGvDPJR9Msib8CXRxbCV0IWZWzeEr+T85wj
xaamcEPRacq3lrGlzGsBPw9+OtxY5DjtB3e3r98isj2ExVUITV5jbjXGxsPX
jf4fuw7fl7US8CXwMHArcHnWnAx+Av0B6F/I2txLyMr8HgvuxfiP/B4uP0F+
wzcMvA/ZPrJzNUb+lrU3PZe1Mel8jzzINxi8H1kavUO6S2yoyN7tsGFEbLaV
Bv8N3xn8BzoHwF1is0G2XOX3XX6fr4NXo5MLPoEciU5JxpaDH8/YnZ0BDwX/
jvwpa+scQZaL7CzVtSa/x4AvZ+3MOvsNZFXmz9AdhuYburfzendsbus2j+Gb
j05v1hkF7gxfnfFq8seM+YfOJ50OyNHo9ELWQOcae0yF/xd50+/2etbW6YLO
/eiU5WvmvpF6vChuKoY2V++qd2yJLJfa3egt5GvlQjuL7jTX3ygP2QT9buDT
+N4hznOePSvC70vsHvNiix3FvnLAr+i9gXwtsbhVbL6PnMu6z4DnICcxZxSy
JTZMQi7K2Bn+ZE515QnGx3veWBxafCnWzzI+hr1ngPOYWwT/HDqT4dZ7/K7T
e4bmn7Pk7+i8Ap4d2fsrjnZkLZa7gk9i70z0Fmds3b9zLKbeZK9Jkdnbw/ea
De4KnhWbXYXgac53A49G/0XWeRhZL7T8UEe5Cp2XtT78Y+AndSb0cz0fKq4U
F3qXO+EbO6/xmei/Cp7LeGvNVy6K7Z3nKa6R3fnmZMyfFoV2J9rjIfQeQXZM
7Y7Ez0JOdb4TfEPPCfWRzeD7gW9yB0We/wch26I3hfEpjE9FPgs/TfP4Fuq8
2j8yO2fE5gN9wVeQS7jHrdxn69h8Sb6xAu6Ux+D2rMWF/Ly4fJh1jsK9576g
PN9VuZG1NsGvhT+eY3l4GTjLnCqM92eNAbHFX0m4epH5fBPkP+h1hB8ZWx7U
eYco/4cW+6uytqb85yKytt9nA+Sg2O6mFGv+kmN+Ln9P+N0IfnBsOtKNUqsH
evdWyMLI/Gok8hF0FqLTWn7iMT4ytFq5AFyAzmB/04GhzVWMNEW/RWxnX8M5
moM/Um1MrOYpvrZl7a31LuOZly+/AfcMrW7rLPKRYR4XI0LL4aoRzVl/gsfg
AmQx5j+Ysffa6Hn4M+QT/u46g/KX7B8cWZ9QpLyVWj3Q+lPly8zfzLwPsHO6
12XpdY0t3x+E/ws5Gv4sslpqviUfk46479CplVpdV+/R02uc1lfPoD6idmr5
RHeZC24Tm09tSgzrbj4FN/S6r1pfwfNhHfBJxoqFltu/dnv2ID9PrLdoG1sd
V02P0Wnj96W4uCc1v1KebJTa/aqvKMXvA8z5IrF8JL9SvyOsXPhWYrW7AP4a
/Mdwg9TbMG+DY3GXGfsAuVq1mPWfCi1+FafiV3m9U+3bCG4f2747ErNBZ6mA
3M7vvfDtYottxXhJnRf+MHxH1fbY3vnDxLDebj34DF+GffPh8r2fU4/R0u2/
qnyfWK+m2rrB4129VmWvazXBVTyHyGfKuo/J1/ajf9LriPKSckkHdCulFp+K
WfUA/VX72GtPYrW5U2znVY+wE66C11nlRvUDquGfwG9LrP/Q2bck9sZ601uJ
5Q3lB+Vw1YouqdVcxU0x8A+J9Tfd4LrHVvN/Tqzuqv7ewdwgtdqv/FPgb6Qc
WMb7NOWZ2HOFcsLFxHo+9X6Xvd9T33UbOjW89o31vNQlsryn3vUscmBs9aRE
av6hPPAua0xE7yV0HkWe5ncQeg/m9Vr250QWy3pr9cbygeusWdzfKIusBD8F
XDuynkb9gHpD8Vf4fcTzj3L7pRy7B+kd0x27L+ldksj6KPUJNTz/KKfKn3uA
zyC/dTvlVw/ElvP3wvWIrcf5zXtm9SG57kv6fTyxGt1dfVqO7S87jib2RrLz
MLhDbL3kV4nlz0L0b+WYLys/347c7bHfOzYfVL+knvRUYvfS221TD7susf8F
ys31uf+tHlOKo9Jes1ULtK/61V2M95SfgU+A/wNtL5jE
            "]], 
           Polygon[CompressedData["
1:eJwtmHm8V2Mex89PnZPf09E5qZAirdKK0r1tupW03ZZ7b+kq3fZFWqSNZB9m
htes/pYYUxONKCXDaDDGEs0whilLKpIlFCXVLZ+37/eP7+s8n+f7PN/zLN/1
aTl1QeX806IoqihEUV19D2ZR1CCJopnCLUMU9cmjqLdoYRpFN4ieFf/FOIqq
GS/+VaKxois1ZnBucy4QfZuZrHPUnqqx32rOh8I/FqOoUvh54T8JD5DM8cLv
Cr8p3Fcy5uj/v1DfBM19T31fxybjbOHTRVVqv66+fyBP1EzjzxWdk9haV+j7
+4KtmfWwl+80fqfGHtL/RwqvFX5EuJ7Gd9D4eerrqrHH1HemcCNRU+Sq7xrx
vtL4/4t3XNRc/bPU11q8SFSu9rPibxTv76Jtsa3vuczOiLN6VPjPwm+JPlJ7
gvqCeM1F09X+UH3/Fq+f1rNA8u9W3zXiXSF8vfBvhacKXyiao/anGv9OZmvu
Ikpy20t7ta8T/6D474pfKnyDcHvJqC/+Ke1/rK/38czulHNaonFLRV+KP0z8
9eL/RfxBua2Bf09zor0QuaLNGrM1tvt8Su0S/199/e9r4UKw/+0U/z/Cg9EV
UYlkTteYl9T3tnhjNKZW/35SeK/wHtF6tc/S2MnifSL8X+F5wvcK3625Vbnp
DLrznmi72r2D3WUn8VPXyWVq31EwXR0ufLPwL4WnCI8Rvkf4PuH5wg9JxiOx
2cM+redl4e3cjegVtU8Wba2s+dXMdJC75s5fUDuXjInivyX8Ymb3wX3l+sd3
mekwuvym+FtdP8bxr9hsCx1D1w6IdmRmM9gO97lL7cNFWxtrXCXcXfPnFkz/
T/p5TRF+Rfy/ZaaDr6r9Wmy62dDX973wx+i6cI3w++xBuI904SrhF4QfEG4i
/qSC3Ql3g86iu9z5Zr/vhcJt9P8DwrHw1cIbxV8j/LnWO1R4tfBK4RGp6ftJ
4f3CB8QfLrxJ+K/CT7t97BI9o3Y7yZstfh3J/0z4SfU/IVrHeNGj6tus79Oi
x9RuG8w2sdETwhe5PWDT2PYn+t9g4Yc1/sHM7hydQpfQhTZ+HifE/9TPhzPj
rI6p7wc//y1qb1Bf4vtFR9CVZtiI8FHhvcKVuekqOnudeKmfH3tkr+9ndhfc
CbozWuNHiRbpnBaLvuEfiekQtn/C/c95ohai77We0eJt4EzE2y2qjW39x3wP
tOnbx/4zO3vuoLn7H9a813lH3T9zXw9nZiOTRcNys50hat8sflv9u65whegu
tf+ovuXi7dGc1sKtROeLyrWH4aLP1f+F+yvssyDeV8Kf6X9DXJ+xPfZ+h3h/
KNgZdNP4Bfh+9R11/cKfvoHPcXtC3/fHFiuG+vpGa3w7yarhHIVLiQ/CpaJJ
7g/miNcT/yZ8p3B1MP6MxHwTPor4QhzoKV6vYGv4QXRpsLVtYV+xxYgzghF3
zN3C20RMiC3GFYP5d+Lbb4QnBrPRl2LzcdguOr/L72dwajaGDOZie93Yk+bf
KP4Vwj2EJwjfIzzG4/Xtwr8SniHcVbjK48lI4f7EcuHbhauEB9Anaq/+i0SX
iMY5n7g+nLsXdVZ/F9GlPmasx376qjX+loKNvVx4nvBt3EEw/cHXTlNfr9zW
ND1YnGatk4KtnT10ym1N/Js1dBQeKRqRm41iq/igJ0SNg/kmYg6xB53tlVp8
uUntgdiI5q3EzkWjyAGKZvPYPjazp2g+Dl83ghxFeLdokNqP4f9El0nGZMm6
VX0jguUM61weuQT+Z4vHi9LUbAbbwed1F64X7O6fcf9EDvBybD4f308fvgs/
wlhyCGIzMZPYucrjETbSLbWYDZ+c47j+39T9DfHvn5npH7q4zf09Z7U7Np/G
mf1L+B3XR/73nMcvcqo6wWIWcSwL5o+QQexIXbeJycRmYkSjYD57k8fvnqnN
3eb2gIznPX7iI7FdYh6xaYrnc7UeT5GxNjP/d6fO+9fqmxVMHypFZbnpLjaK
rT6k8efn5vPwfRs9BrRQX5nmL9GYvhp7JvoqvKJgesx5cxdbPHacyix/xEf0
ET/KrY8284k/bd3v4s9a5qbL6DR6vNb3Tww7or2cJn65+EuF+wWjy0WF3HgX
4kc9vyW/a5WbTGRhG41yW/Mwtz18WKWvH9/WVLin21u58Lm59dFGP89W+yzR
wGD+4VjR7pZ8bjWxQ7y+7j/IwxjbW3hZweYQsznLDR5nW5NDiX9XwfJxbBrb
HqW+tuI1wY4T89FlwWyOfyAbW8R2l3v8w4Y7BIvJxGLy9Vp91+g/14vfA3+k
8fPdf81LzT/UBMtByUWJochC5tDcdARdWSw80McscX84yePWUuHfCc8OFsPo
o32tqA1rTSxmENuG5CYLmQtSkz8zWFxCN6s8nt8v/tLUcgb6aC9LLWde7/ZU
klqNg3/a6jkYMZ24diN+CpvS3M6uL/hhYupQ4eW+njrovfufaZrXILc5/d13
k9N3EX9RwXL9INzV94O+FIVPz00H0UV8/Bi/b+Z3yO0uudOZqdUQ1BLj1K5O
zWfi69a5PiCro9sXMlf7fqkZDhbNJrHNVbHF0DWes1W7/XcMVo81Fu9IZrXi
DOE0sZqRPnhNEouznV3/iWHEsoaiixOzaeyEuDUysT2wF2Qg6wzRoczOhLNp
SK6UWU1AbcCZc47UTp1Fse+bM+FsuiV21tggtlaSmG3iE9h7y8R8BWeMbbIe
zh4bxBa75xY7Sjxek3OQW/ycgyRmw9htM7cfbLK5z+eu+yVm2+gAujA7MV3F
prFdxmPrxGBymYmJxeZBwWwRmcjGxxD7KxLzPRczJ7H4ShwnBhB7yF2JDVe6
/BrPf8p9/+MT2xNEm3j9c+4RzJfh0/AV6Bi6zPmiewX3x+hwHc8biO+LEnsz
gGhjc9jeeN//VOELsOXUbA2bq3Q95vyRiWxyAmq3WxPLFeb6edxE7pkb0cZf
4IsmpKYP6BC6NNnzD3zEMD8v9kOORq5W5vkMPmmA7xdfOCuxtwpqLmovYghx
Y5n7I3LiCs8/yDeoOfbKPq4OlvvN8fmV7k/5R5nHAWILbxjkSPgUfMsK7iFY
DXCt+O0Sqw3wYfiyRaLFwWo4ajnq7dfUrnB95s65+0Nuzw96ftPf7wsbwpZW
ev5CPtUjtTiEfmOD2GKN6xNvEvhk7oi7muaxkbx4PrmPcOPcfDq+nZqA2uBj
r3cOi47HVq/wbRXsPYUcm1jMeZJ7v+32jI9oId6XXkdgs1083mEL6DuxiBqU
tw7eIKhNeVPZ7nUZtQ5vCPs9/yDf3uf1EjUjcf514R1ej1H34UPwJdQslant
gbrrsmB7w0fhq9gze8dn4jvxk+g/byD1EquRWQ81FrUWNRG1UZbbWTH/kmBE
G5mHNS53f8GZcDa8IVDLUtPytoBPq+/7LfUcgtg5N7HcAn1gT+yFWpYaep/X
yeQ2nA25IzkkZ/SGcN3Ean7ya97Mdrif5i2NNxDeQnjDqB/sjemb2OrT9n6H
nGWt3y1vFrxdsN7zPJayPmo8YiqyeevgfvkH+Sxvhrx7fJRZvsD7xo8a84H3
HfH1MhYd3+n5coNgOoIsZP4vszeyYmI2g+1Qh56KTWanYLpEXyePA9Sk6Bi6
Ra36E4JOfZ0=
            "]], 
           Polygon[CompressedData["
1:eJwtlmlUVlUUhi8YJh9XLormkDiFmuSUDAqooQyKIijOOCCaaIpihppZ2eDq
V6tp9bfRLGtpow3aZKZm5YCkpuXQIIKIM2JmSs+7zv7xLN77nn3Od/a5Z+9L
tznlhUvCPc9bCxGwNOR5z4Xxt7nnlcNMnqfBfPQaeJaxcp7fDjzvfSak+J53
PdLz/oVl+M8zvoK45TCX51CM592LHgD9YBrxRTAQ7TPWEqIVQ+wASA+5sQCv
Av0C6z3K82p4gOe+0AeSoCteBHHFrDcM3R7dATpCFNyN1xv62+8Ox8uAEbAM
rwxvkUB3xesG3WEp3uN42ZAFqXgz8FLQrdCtIRZy4RG8VbASlhCTxr5SYbrF
xxCziOeFsBLW4hXirUC/SG5P8vwELCP+fhiPnqAY6ElcDyhA50MezCEmi7mZ
MB5m4CXaGdyHHg4Z0AXvLhiDHg05UELMed7TOdjE+9vK+7uBXu67fY1XPqy5
Gh6Dl9lfKf4zyo+YSMb7ovtAAky18ytT7rAYhhGTBnO1V5it90ZMb70PSIBJ
ePPw+mk96A/T8ObjtdV83Tv0Heh2kKg7AW1sLAO9wHe5D9DdgYHQB6bjFWlv
tl4T+d2C3eR7hHyjmTsbfwTjdxLfCeJgF+M74Qc4RFwGMReZdwE85mzDe4Wx
Op7PwKt2/y+ha6EG3sBbj5ekdwEH0L9AFXzP2A5bO4r12kOHkKsb1c86xnYz
1gzvY/QX6C3wNaSz1pd4p9E1WguG4l1lXgNsZOwzvMF476I3oweh/2PsJtTD
WdhgY43KC92TM+gFt8M44i/hXYTLEOg+4GXCceachBNwgLEhvjuPT9Bh7Dcc
rtqcQt/Vseq5AB2OV629Qw1M1HvFa0Rfg38C926q7KyOwnBi/tYY+jo0wRi8
qaw5Bcp0P60udddK0BP1XqEEkvGSIMXGdP9Uv4M0BwZbXaYoFrJD7j7ctP21
Q8dBJ7gRuH6ViE6GJOtNQ5kzBGZZ71G9xcMC/R6MtHpT/Y5VL0QXED/O7nGS
rZdud70z3jz0Qt/lqFy7QGcYi+cxVsVeRhKXA6PgYes5mdbPFqNL1avhHquz
UrxCnieEXH2ozvK1byi2OpqJVwyzrJfk2trlvutbi2y9KXiTddZWv+qTeg95
yhHyY1x+yrMo5Pqq+oH2V4F+CB60vruK8ZfoL0/z/BRU4P1oNar3/xP6Z6iE
3/B+hz8hi7FDeGfRI313PjqnYei9ePthH3wTuBqsRG9DfwfbVbPW91J91xfU
HzbjfWV19qlqSfUHn8MW+60c+91z6HqoM2+regZ6F2y3upwArcgpFlrDlcDV
R1t0G4i22jqPF4UOQXOrwQ/w/rA8P0R/BIfhEt5FOA+jfFfXqu8WIZej+otq
9Rh6L3of7A9cDTbTdxJugz2qK+Zdi3R9RnmnEZMPYYy31HfZ7lqItSNVG7au
aj8bXY0+A7WqWetrv6IPw0HrneoJ6g2Vlk8suq3uPsSHXF/QXib57jt+C90E
nr5bjHfXnQu5XqEanExcPHoU5CoX4qrJ4RS8xvg6fiORmDetB5+2HJVrsvoi
3g7YCesD945i7Oz1DhqUQ+ByUm4X7Jz1TR5n31B9S3vxu8fUuxiPY3+9IQFy
ibuCdxUadF+JCSc2DJpZD9C3W+d3ivEWPEfCQeJimB9AR7hsc/Ub6n3qgY0w
2ndn0MP+p9H/NucC9y3LRG8g5p0I18NOwHE4afvUXJ3Be+hNsBHeCtye9XtH
0EdVZ/C6neVf9m3RN6YW7xZeHvF1qofA3Rf1pFp7rg9cDe6xWlBNfIv3P95I
TZ8=
            "]], 
           Polygon[{{4102, 4101, 3157, 1569, 1579, 3159}}]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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

            "]], 
           Polygon[CompressedData["
1:eJxFmHlwltUVxt8X4X3hfl/1YtVWnXbGOm2nddppp2Onm522U6e1U9vRaV3r
giK1bthdq4JUWxEV2XdCSAgkBAiBBAIECIEIgbAHAoQdZJGiIAIVivT5eU6n
f5z57nPP/e57l3Oec8697qG+tz/VJUmS29Ik6arfHSFJWtQu5EnSEJNksXC9
8JksSSqFP5CckswrJsl8yWm1f6Wx7Rrzb43dIlmu9nmNnyFdVkiSbpIo6Vmw
OZjrrGS62rM0fqbG7xYeI/yO8FHJv9Q+Lsl7Jsnjmn+fxjToe8fU91PhVcL7
NO6s8N3CW4Q/FB4pvENzdUpGq71MfbOkOyQ8MdqaWfvlWssnC/aNn+n/61L7
9gDJaLVf1/g7pTsofEDyntq/0LiRapdJP0T6e9Q3VHMNkUxWu0wyRLJVug7J
ULWXaPw8jd8lPEy4q/bzsObpLemmdg+tYWNqfeguaPxW4QeFuwiXCVcJT9T/
H9D/Dwm3CV8rfbPwAsmX1b5Bsoh74RvMLZmv9jOSOv23XvKs2u/r/xv0//uk
/0j4iPBa4euE1wjvFH5L+FPCy6KNYez9kkTrmSx9pfQjNN990s30+1sk/Dfh
gZmdHWf4onSt6rsmt/WuVnuY+iZLN1hj7oq2J/Y2QTJOcnc0HWNe0tjx3j+K
OSX3Sl+p3yrJXMkejVmpsZ/R/G9Jt0JyVW7rb1F7tPTl0o/V2PvddvtItzc1
Oxgi/aTU5uc7D0Yby3+el3699EvU/qz+0yZd72hrZc2TJXXS10q/Se03pXtY
Uq52meQhxkpfIX2FcB/h30nWqt0m+a3avSST1B6vMcM1tntPs3lsfYGkQX1z
pdvPGI1tF24WPi08VXhQsP8yxyPCc4RrUvsG38InNwvflpuvlvh6Vkg/UHiE
3wfrfYzxkjs19i7JOfdHfONLwpuEV0k+p/YK9XVw9tHOhjNah+0Kv6a5BmXm
L23qWyzdMeEp0q2XfFH9X5CsVbsvc0rXKvl9NB+GS+AUfLtFeFFq/jxYeJpw
dWr3/xS2IzzBz/dx7l94ofB67FB4r+Rbmuvbkv1qvyBpkG6BpL9/D+74rvR7
hAvyxyAp6A6KkvHST5G+UeNflP5t4dXCt2v8TuEa55cW6V/y82b9N0rfKbw5
2l7Zc7vaXTT3NunvEN4hvE3yc7VvlWxXe67bU63m+4PwBj/v6yUb1f6HpEm6
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
1cC1Hk9Z338Byld6Tg==
            "]], 
           Polygon[CompressedData["
1:eJw1lnlQV1UYhq+lmD9u9SMdNSvLlpn2fd+zfZvKxl1LzX2vZirLXQQVAcUF
hRSDFEQQoRQBTU1l0VwQ9xXJyg0XUlRQ7HnnfP3xzLz3/b5z7rnnfOec26rH
kDaDr/E8LxwaQGbQ8y6FeF6873mbAp63GZai+zb0vEfgYThLThV8iP4A3oPF
5AzHW0XbNLWBZTAd7zBeProQiuArvGy8JZABY2kbjbcDPRldQM4KiMXbhlcG
eyCaWBL+XJhAbIP6QA9EL0CPJj4IPRiGwhD40vqNIpaIrkD/CcdgCl4MHEAf
goMwjZwE+pwN8yEf7we8JeS14zs7QHuoxrs+lDb1PK8Tzx2hhvxw37X5jvgw
+B6m453Em4OeC0lwBN6kzRvQGjJ8l1dJ3mk4BeHkVNPnJ8T7wX7e5fPOw/jl
+hZ4BT+ddtPgOG3m4aXAzxBF20nQS8/EZqETybuBNo/DE7CC2CS8LTbPmu8o
vAl4RegSKIaJQfeOE+gLUA2T8GbjeVp/dJbmCWZo3aG/rcso363XOvR62Kj+
8GYqF+KtRmLxMmmXAbmw39ajDL0NKuBB3rUUr7d900itK/6PVmtaW61xufXX
x+pE7+uL7mdjrkc/DSEEfgm6elPdxdk86ts0l0fRU/GSbV5noWvwzsF51S9e
J4hFj7Pv1vePVp94K2EtRNBuLP4YaE8sWjWCl4oOMoYw7Su8GXg55GTDmoCr
G9XBQkiDdNufM612NUdT8KZCHIzDy8XLg+XwDV4M7EPvhd22j7S+hejxxCIg
UrWqGtTeV//QBS+VMSyASMtXHXymedC+0BoSiw+4/bsLbydst/3Wwb5zFPGp
mlt9P97v/8+Hxgv56MF8f6Mwz2tGfTcPdeuZaPOo/EXoneiPyMsi/xzP5+EA
3jN4adpjPFcG3Bl2lTZ1cNHm6mu8rehSyLQzZz9eG9p+Co/BAt/NwTTiiyEL
upKzlz73QAqxe8nbZXVQS/wKXNb48MbgpaMHBN0ZpbNqA5RAKQRou1I1Cq+h
X4WXbf+uwWuGbgpNYI7v8rS/F6FP0/5MwJ0br+OdQNfCZdvTN+I1hptgvvZd
0NWn6vSM1VUS3Eb8dmgJRdpD9k1b0aU6b827D+8BuN++V2fEZvqpgn91Tmu9
tSYwj9gd5BXjTdTZDN00B9q/Vh+qk854OTqj0N0tPtx3Z22C3TW6c3bDrTY+
jVl6HXo9FKoe4Ba8FtAc5pKzNui+XXNws3n78J5CPwmP2vrqHG+L3k1sj9YW
NsHdeMn6RvSWoDu7khlfCqTa3fKTfWeJzhTYCON15kNHOwOGkbOV5y3wh/V7
AP03+i/4x9Yvw/prhb4L7rT5S/BdnSxD58JyqISTcAret7u2se4B7oMBPPeH
XN/dPQV25qywe2sh3vM2B5qLQ3i12sPortAZslU/9HeI/rrx/Dl4PF8HDaFJ
qNufAfZnJrlvo9+Fd1SHQbcPtR8bkdfH/g+0D7UfLwTcfOu+rLLxn8W7AnVw
GMrhFLxl/ek/Yg3jXw2/6Yzy3XsVP0rsGByHkTACRgXdf4fy8tF5UGDnQqrv
/l80rvqMvwGEQFPGWsH3DsIfCHm+W6+Wtj/usXrQ+fIc+ll42vqbDw+h43Q3
hLj7aDXjXwXFAXcf6k5Rnu6rMvR22GHr8QLeS/AiHMQLYyzljKU3z710J4W6
c3yZ/SPpX+lb8uox7p7Ev4Duegc5Lcg9QtuPeR6q+9x369sFnYO+lnh9uIR3
EWospjWPZKwR0M7O8xj0VXQdeLyrh70jGn8yzAm4862tjUXxX31XI6qVODvn
e+ruJG8Esf8AmvSeJg==
            "]], 
           
           Polygon[{{4286, 4285, 3226, 1803, 1813, 
            3228}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0uA1EYgOFvpq2ZqdqwrI2kNgQ7liyVlrY7WxfQxl/8/1wCCTciXIUb
YVWJPZ4hmXfeNzlzvpwzc/ujwTCJiD18iHW+TyMesKmfuc+NPGISPV3nArs6
5ww7usZVdHWFU3R0kpcfRmzTTxaxxd/c5jfzN/iVX7Cmn/gRy/qIDzGv+9zD
rF4p1zGjp7iBuv5yh/I+B+an5X6u8DGfoKpP+Qw1fc4XmNCXfAVPXHvdZH/H
jlu+Q6ELQ6d5gRfR1B3uoqWHPMKSHjvIJ1b1e/L/f38B1Wsfog==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MkuA1AUgOGjNt00iKmlFl6DhHdoqZoS09KwYlkJC5a61OqkplfwIqw0
8RQSNr6bLv78f25uzj25iwdnpdORiNjEZybijmujEZe4111+5LdsxCt6+oWf
0dVP3EdH99IZ2rqTjJZu8UNCN7nJDW7wu/l17qd3cKuv+SrtoPd5Dxd6lVdw
ohe4iCP9Z+9fbOtvLnHO/DKP8RqP8wTW9SRPoaKneQYbepbzqOoCz2WH/zLP
RWzpH/MPOe/tAo71Ei/jXO/wLmr6y90BbvRHZvi//9jcK/I=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Mkug1EcxuG/VIxXYUfCVo0x1IqExK5ba+ONCNfQUtWKoS02rFoWJLVk
SSIx1dQb8CQWvzzv4ss5J1/P0triaktEpFVLRDxyuTViRW/2Jpuc6YxI6dee
5pR+7ElO6Nse55i+7FGO6NMe5pAadpIfHOQ7c85/4ja39GBvcF139gLndW0P
sF+Xdje7VLFfvftFRbvODPMdEVkWuMMiD7RrH/JIOfuYJ9qzSywrb1d4qn37
jOcq2M/OL7PN3e26sHvZpyt7lnOq2ze+vdW9XU38/98/eTE3Qw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0EsuA1AYQOFf0kpMmCE60SFDJkSLqgbxLhOaVGIBbEBYRTfCiKSbUIq0
HototfVIfI3ByTk3N/nvI316XjwbiIgj3CQiZiyOkxElLOgLXuWPoYh35PUb
v2JFN7mBnH7hZyzrJ65jST/yAxZ1jbN8zxmumD/LV3yJaX3CZaR1ljMY1yme
wIjuuWsXg/2zuI5fb6hyiwvmt3mNP3mdN9DRm7yFrt7mHfT0Lu/hS+9zEd/6
gA/xo2vmJ53Z4jaG9ag7jfXRczyPSX1r/w5T+jrx/79/g6cwpg==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Esuw1EUgPHTxF/ULpCwEaWtx8CAGBGDRid9oKJFJAy9HwtgRGIVklpI
1aP1XoJfY/Dl+25u7snJHVopz5VSEbGImyRi32G8PyKDQ13gK94djNjBpd7m
Bi50nbdwrje5hjO9wes41WtcxYmu8DGX+Yj3zD/gIq+ioXOcRVWP8SiKOs0D
WNZvdn3Fgn7kJmb1PWe4lY6Y4DZP8jO/INt7yx3kdJffkdcf/Ikp/cXfmNY/
/IsZ/WD+PD9xG0u6z05Jb389zCOo6Fv3d6jr6+T/f/8AU3sxzw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DsvQ3Ecx+GfpU3QKuJSmzdAwhuRmqw2S72DBlG3MlRSd0YGiRrZGDWV
uIzul5mEN+A5MXzyfM8Z/vmfMzg5XSi2RMSEKqmIOw9D6YhhPdhj/ORAW0Re
H3Y/+/Ru97JHb3Y3u/RqdzKnF7uDWT3bGT6xnY+ccv49x1lQwx7liC6Tc5jT
uf3rfj86tW95oyO7zhMd2DXWWGqN2OAMNznLOW3Z8yxr217gonbsJS5r115h
RXv2Kte0bx87/5BNXqtuf/FbZ8l3uWtGF3bVu3VdJeel/v/vH3+LMrI=
          "]]}, {
         Line[{2, 487, 11, 500, 501, 20, 526, 527, 29, 560, 561, 38, 594, 595,
           47, 628, 629, 56, 662, 663, 65, 694, 74}], 
         Line[{1905, 485, 1922, 3268, 2845, 3269, 1940, 3291, 2853, 3290, 
          1958, 3317, 2861, 3318, 1975, 3343, 2870, 3342, 1990, 3366, 2879, 
          3367, 2007, 3396, 2890, 3395, 2026, 3421, 2024, 2046}], 
         Line[{1907, 486, 1923, 504, 3271, 1941, 3294, 2854, 3295, 1959, 3321,
           2864, 3320, 1976, 3345, 2873, 3346, 1991, 3371, 2882, 3370, 2008, 
          3398, 2893, 3399, 2027, 3423, 2028, 2047}], 
         Line[{1909, 2843, 3264, 1925, 2848, 3274, 3275, 1943, 3302, 2856, 
          3300, 1961, 3328, 2866, 3326, 1978, 608, 3351, 1993, 3376, 2885, 
          3379, 2010, 3406, 2896, 3404, 2030, 3429, 2034, 2049}], 
         Line[{1912, 2844, 3266, 1928, 2850, 3284, 3286, 1946, 3313, 2859, 
          3311, 1964, 3334, 2868, 3339, 1980, 2877, 3360, 3362, 1996, 3391, 
          2888, 3386, 2012, 3413, 2898, 3418, 2032, 3435, 2040, 2051}], 
         Line[{1914, 1921, 3270, 1930, 1939, 3292, 3293, 1949, 3288, 2862, 
          3319, 1967, 3315, 2871, 3344, 1982, 3341, 2881, 3369, 1998, 3364, 
          2891, 3397, 2015, 3422, 2900, 3394, 2036, 3420, 2907, 2053}], 
         Line[{1916, 1926, 3273, 1933, 3299, 2855, 3298, 1952, 3325, 2865, 
          3324, 1969, 3348, 2874, 3350, 1985, 3375, 2883, 3374, 2001, 3401, 
          2894, 3403, 2018, 3425, 2901, 3427, 2038, 3440, 2909, 2056}], 
         Line[{1918, 1931, 3278, 1935, 1950, 3305, 3307, 1954, 578, 3331, 
          1971, 3356, 2876, 3355, 1987, 1999, 3381, 3383, 2003, 3411, 2897, 
          3410, 2021, 3431, 2903, 3433, 2042, 3442, 2910, 2058}], 
         Line[{1920, 3261, 2852, 1938, 1955, 3279, 3281, 1957, 3308, 2869, 
          3337, 1974, 620, 3332, 1989, 3357, 2889, 3389, 2006, 688, 3390, 
          2023, 3417, 2905, 3438, 2045, 3444, 2912, 2060}], 
         Line[{2048, 2033, 3428, 2029, 2013, 3407, 3405, 2009, 3378, 3377, 
          2884, 1992, 609, 3352, 1977, 1965, 3329, 3327, 1960, 1947, 3303, 
          3301, 1942, 511, 3276, 1924, 1906, 3263, 1908}], 
         Line[{2050, 2039, 3434, 2031, 2019, 3414, 3412, 2011, 3385, 3384, 
          2887, 1995, 3361, 2878, 3358, 1979, 3338, 2867, 3333, 1963, 3310, 
          3309, 2858, 1945, 3285, 2851, 3282, 1927, 1910, 3265, 1911}], 
         Line[{2052, 2906, 3419, 2035, 3393, 3392, 2025, 2014, 2892, 3365, 
          3363, 1997, 3368, 2880, 3340, 1981, 2872, 3316, 3314, 1966, 2863, 
          3289, 3287, 1948, 529, 3267, 1929, 2846, 3262, 1913}], 
         Line[{2055, 2908, 3439, 2037, 2902, 3426, 3424, 2017, 2895, 3402, 
          3400, 2000, 3373, 3372, 1994, 1984, 2875, 3349, 3347, 1968, 3323, 
          3322, 1962, 1951, 3297, 3296, 1944, 1932, 2847, 3272, 1915}], 
         Line[{2057, 3441, 2054, 2041, 2904, 3432, 3430, 2020, 3409, 3408, 
          2016, 2002, 3382, 2886, 3380, 1986, 3354, 3353, 1983, 1970, 579, 
          3330, 1953, 3306, 2857, 3304, 1934, 2849, 3277, 1917}], 
         Line[{2059, 2911, 3443, 2044, 3437, 3436, 2043, 2022, 2899, 3416, 
          3415, 2005, 3388, 3387, 2004, 1988, 621, 3359, 1973, 3336, 3335, 
          1972, 1956, 3280, 2860, 3312, 1937, 3283, 1936, 1919}], 
         Line[{83, 725, 92, 738, 739, 101, 764, 765, 110, 798, 799, 119, 832, 
          833, 128, 866, 867, 137, 900, 901, 146, 932, 155}], 
         Line[{2061, 723, 2078, 3452, 2915, 3453, 2096, 3475, 2923, 3474, 
          2114, 3501, 2931, 3502, 2131, 3527, 2940, 3526, 2146, 3550, 2949, 
          3551, 2163, 3580, 2960, 3579, 2182, 3605, 2180, 2202}], 
         Line[{2063, 724, 2079, 742, 3455, 2097, 3478, 2924, 3479, 2115, 3505,
           2934, 3504, 2132, 3529, 2943, 3530, 2147, 3555, 2952, 3554, 2164, 
          3582, 2963, 3583, 2183, 3607, 2184, 2203}], 
         Line[{2065, 2913, 3448, 2081, 2918, 3458, 3459, 2099, 3486, 2926, 
          3484, 2117, 3512, 2936, 3510, 2134, 846, 3535, 2149, 3560, 2955, 
          3563, 2166, 3590, 2966, 3588, 2186, 3613, 2190, 2205}], 
         Line[{2068, 2914, 3450, 2084, 2920, 3468, 3470, 2102, 3497, 2929, 
          3495, 2120, 3518, 2938, 3523, 2136, 2947, 3544, 3546, 2152, 3575, 
          2958, 3570, 2168, 3597, 2968, 3602, 2188, 3619, 2196, 2207}], 
         Line[{2070, 2077, 3454, 2086, 2095, 3476, 3477, 2105, 3472, 2932, 
          3503, 2123, 3499, 2941, 3528, 2138, 3525, 2951, 3553, 2154, 3548, 
          2961, 3581, 2171, 3606, 2970, 3578, 2192, 3604, 2977, 2209}], 
         Line[{2072, 2082, 3457, 2089, 3483, 2925, 3482, 2108, 3509, 2935, 
          3508, 2125, 3532, 2944, 3534, 2141, 3559, 2953, 3558, 2157, 3585, 
          2964, 3587, 2174, 3609, 2971, 3611, 2194, 3624, 2979, 2212}], 
         Line[{2074, 2087, 3462, 2091, 2106, 3489, 3491, 2110, 816, 3515, 
          2127, 3540, 2946, 3539, 2143, 2155, 3565, 3567, 2159, 3595, 2967, 
          3594, 2177, 3615, 2973, 3617, 2198, 3626, 2980, 2214}], 
         Line[{2076, 3445, 2922, 2094, 2111, 3463, 3465, 2113, 3492, 2939, 
          3521, 2130, 858, 3516, 2145, 3541, 2959, 3573, 2162, 926, 3574, 
          2179, 3601, 2975, 3622, 2201, 3628, 2982, 2216}], 
         Line[{2204, 2189, 3612, 2185, 2169, 3591, 3589, 2165, 3562, 3561, 
          2954, 2148, 847, 3536, 2133, 2121, 3513, 3511, 2116, 2103, 3487, 
          3485, 2098, 749, 3460, 2080, 2062, 3447, 2064}], 
         Line[{2206, 2195, 3618, 2187, 2175, 3598, 3596, 2167, 3569, 3568, 
          2957, 2151, 3545, 2948, 3542, 2135, 3522, 2937, 3517, 2119, 3494, 
          3493, 2928, 2101, 3469, 2921, 3466, 2083, 2066, 3449, 2067}], 
         Line[{2208, 2976, 3603, 2191, 3577, 3576, 2181, 2170, 2962, 3549, 
          3547, 2153, 3552, 2950, 3524, 2137, 2942, 3500, 3498, 2122, 2933, 
          3473, 3471, 2104, 767, 3451, 2085, 2916, 3446, 2069}], 
         Line[{2211, 2978, 3623, 2193, 2972, 3610, 3608, 2173, 2965, 3586, 
          3584, 2156, 3557, 3556, 2150, 2140, 2945, 3533, 3531, 2124, 3507, 
          3506, 2118, 2107, 3481, 3480, 2100, 2088, 2917, 3456, 2071}], 
         Line[{2213, 3625, 2210, 2197, 2974, 3616, 3614, 2176, 3593, 3592, 
          2172, 2158, 3566, 2956, 3564, 2142, 3538, 3537, 2139, 2126, 817, 
          3514, 2109, 3490, 2927, 3488, 2090, 2919, 3461, 2073}], 
         Line[{2215, 2981, 3627, 2200, 3621, 3620, 2199, 2178, 2969, 3600, 
          3599, 2161, 3572, 3571, 2160, 2144, 859, 3543, 2129, 3520, 3519, 
          2128, 2112, 3464, 2930, 3496, 2093, 3467, 2092, 2075}], 
         Line[{164, 963, 173, 976, 977, 182, 1002, 1003, 191, 1036, 1037, 200,
           1070, 1071, 209, 1104, 1105, 218, 1138, 1139, 227, 1170, 236}], 
         Line[{2217, 961, 2234, 3636, 2985, 3637, 2252, 3659, 2993, 3658, 
          2270, 3685, 3001, 3686, 2287, 3711, 3010, 3710, 2302, 3734, 3019, 
          3735, 2319, 3764, 3030, 3763, 2338, 3789, 2336, 2358}], 
         Line[{2219, 962, 2235, 980, 3639, 2253, 3662, 2994, 3663, 2271, 3689,
           3004, 3688, 2288, 3713, 3013, 3714, 2303, 3739, 3022, 3738, 2320, 
          3766, 3033, 3767, 2339, 3791, 2340, 2359}], 
         Line[{2221, 2983, 3632, 2237, 2988, 3642, 3643, 2255, 3670, 2996, 
          3668, 2273, 3696, 3006, 3694, 2290, 1084, 3719, 2305, 3744, 3025, 
          3747, 2322, 3774, 3036, 3772, 2342, 3797, 2346, 2361}], 
         Line[{2224, 2984, 3634, 2240, 2990, 3652, 3654, 2258, 3681, 2999, 
          3679, 2276, 3702, 3008, 3707, 2292, 3017, 3728, 3730, 2308, 3759, 
          3028, 3754, 2324, 3781, 3038, 3786, 2344, 3803, 2352, 2363}], 
         Line[{2226, 2233, 3638, 2242, 2251, 3660, 3661, 2261, 3656, 3002, 
          3687, 2279, 3683, 3011, 3712, 2294, 3709, 3021, 3737, 2310, 3732, 
          3031, 3765, 2327, 3790, 3040, 3762, 2348, 3788, 3047, 2365}], 
         Line[{2228, 2238, 3641, 2245, 3667, 2995, 3666, 2264, 3693, 3005, 
          3692, 2281, 3716, 3014, 3718, 2297, 3743, 3023, 3742, 2313, 3769, 
          3034, 3771, 2330, 3793, 3041, 3795, 2350, 3808, 3049, 2368}], 
         Line[{2230, 2243, 3646, 2247, 2262, 3673, 3675, 2266, 1054, 3699, 
          2283, 3724, 3016, 3723, 2299, 2311, 3749, 3751, 2315, 3779, 3037, 
          3778, 2333, 3799, 3043, 3801, 2354, 3810, 3050, 2370}], 
         Line[{2232, 3629, 2992, 2250, 2267, 3647, 3649, 2269, 3676, 3009, 
          3705, 2286, 1096, 3700, 2301, 3725, 3029, 3757, 2318, 1164, 3758, 
          2335, 3785, 3045, 3806, 2357, 3812, 3052, 2372}], 
         Line[{2360, 2345, 3796, 2341, 2325, 3775, 3773, 2321, 3746, 3745, 
          3024, 2304, 1085, 3720, 2289, 2277, 3697, 3695, 2272, 2259, 3671, 
          3669, 2254, 987, 3644, 2236, 2218, 3631, 2220}], 
         Line[{2362, 2351, 3802, 2343, 2331, 3782, 3780, 2323, 3753, 3752, 
          3027, 2307, 3729, 3018, 3726, 2291, 3706, 3007, 3701, 2275, 3678, 
          3677, 2998, 2257, 3653, 2991, 3650, 2239, 2222, 3633, 2223}], 
         Line[{2364, 3046, 3787, 2347, 3761, 3760, 2337, 2326, 3032, 3733, 
          3731, 2309, 3736, 3020, 3708, 2293, 3012, 3684, 3682, 2278, 3003, 
          3657, 3655, 2260, 1005, 3635, 2241, 2986, 3630, 2225}], 
         Line[{2367, 3048, 3807, 2349, 3042, 3794, 3792, 2329, 3035, 3770, 
          3768, 2312, 3741, 3740, 2306, 2296, 3015, 3717, 3715, 2280, 3691, 
          3690, 2274, 2263, 3665, 3664, 2256, 2244, 2987, 3640, 2227}], 
         Line[{2369, 3809, 2366, 2353, 3044, 3800, 3798, 2332, 3777, 3776, 
          2328, 2314, 3750, 3026, 3748, 2298, 3722, 3721, 2295, 2282, 1055, 
          3698, 2265, 3674, 2997, 3672, 2246, 2989, 3645, 2229}], 
         Line[{2371, 3051, 3811, 2356, 3805, 3804, 2355, 2334, 3039, 3784, 
          3783, 2317, 3756, 3755, 2316, 2300, 1097, 3727, 2285, 3704, 3703, 
          2284, 2268, 3648, 3000, 3680, 2249, 3651, 2248, 2231}], 
         Line[{245, 1201, 254, 1214, 1215, 263, 1240, 1241, 272, 1274, 1275, 
          281, 1308, 1309, 290, 1342, 1343, 299, 1376, 1377, 308, 1408, 317}], 
         Line[{2373, 1199, 2390, 3820, 3055, 3821, 2408, 3843, 3063, 3842, 
          2426, 3869, 3071, 3870, 2443, 3895, 3080, 3894, 2458, 3918, 3089, 
          3919, 2475, 3948, 3100, 3947, 2494, 3973, 2492, 2514}], 
         Line[{2375, 1200, 2391, 1218, 3823, 2409, 3846, 3064, 3847, 2427, 
          3873, 3074, 3872, 2444, 3897, 3083, 3898, 2459, 3923, 3092, 3922, 
          2476, 3950, 3103, 3951, 2495, 3975, 2496, 2515}], 
         Line[{2377, 3053, 3816, 2393, 3058, 3826, 3827, 2411, 3854, 3066, 
          3852, 2429, 3880, 3076, 3878, 2446, 1322, 3903, 2461, 3928, 3095, 
          3931, 2478, 3958, 3106, 3956, 2498, 3981, 2502, 2517}], 
         Line[{2380, 3054, 3818, 2396, 3060, 3836, 3838, 2414, 3865, 3069, 
          3863, 2432, 3886, 3078, 3891, 2448, 3087, 3912, 3914, 2464, 3943, 
          3098, 3938, 2480, 3965, 3108, 3970, 2500, 3987, 2508, 2519}], 
         Line[{2382, 2389, 3822, 2398, 2407, 3844, 3845, 2417, 3840, 3072, 
          3871, 2435, 3867, 3081, 3896, 2450, 3893, 3091, 3921, 2466, 3916, 
          3101, 3949, 2483, 3974, 3110, 3946, 2504, 3972, 3117, 2521}], 
         Line[{2384, 2394, 3825, 2401, 3851, 3065, 3850, 2420, 3877, 3075, 
          3876, 2437, 3900, 3084, 3902, 2453, 3927, 3093, 3926, 2469, 3953, 
          3104, 3955, 2486, 3977, 3111, 3979, 2506, 3992, 3119, 2524}], 
         Line[{2386, 2399, 3830, 2403, 2418, 3857, 3859, 2422, 1292, 3883, 
          2439, 3908, 3086, 3907, 2455, 2467, 3933, 3935, 2471, 3963, 3107, 
          3962, 2489, 3983, 3113, 3985, 2510, 3994, 3120, 2526}], 
         Line[{2388, 3813, 3062, 2406, 2423, 3831, 3833, 2425, 3860, 3079, 
          3889, 2442, 1334, 3884, 2457, 3909, 3099, 3941, 2474, 1402, 3942, 
          2491, 3969, 3115, 3990, 2513, 3996, 3122, 2528}], 
         Line[{2516, 2501, 3980, 2497, 2481, 3959, 3957, 2477, 3930, 3929, 
          3094, 2460, 1323, 3904, 2445, 2433, 3881, 3879, 2428, 2415, 3855, 
          3853, 2410, 1225, 3828, 2392, 2374, 3815, 2376}], 
         Line[{2518, 2507, 3986, 2499, 2487, 3966, 3964, 2479, 3937, 3936, 
          3097, 2463, 3913, 3088, 3910, 2447, 3890, 3077, 3885, 2431, 3862, 
          3861, 3068, 2413, 3837, 3061, 3834, 2395, 2378, 3817, 2379}], 
         Line[{2520, 3116, 3971, 2503, 3945, 3944, 2493, 2482, 3102, 3917, 
          3915, 2465, 3920, 3090, 3892, 2449, 3082, 3868, 3866, 2434, 3073, 
          3841, 3839, 2416, 1243, 3819, 2397, 3056, 3814, 2381}], 
         Line[{2523, 3118, 3991, 2505, 3112, 3978, 3976, 2485, 3105, 3954, 
          3952, 2468, 3925, 3924, 2462, 2452, 3085, 3901, 3899, 2436, 3875, 
          3874, 2430, 2419, 3849, 3848, 2412, 2400, 3057, 3824, 2383}], 
         Line[{2525, 3993, 2522, 2509, 3114, 3984, 3982, 2488, 3961, 3960, 
          2484, 2470, 3934, 3096, 3932, 2454, 3906, 3905, 2451, 2438, 1293, 
          3882, 2421, 3858, 3067, 3856, 2402, 3059, 3829, 2385}], 
         Line[{2527, 3121, 3995, 2512, 3989, 3988, 2511, 2490, 3109, 3968, 
          3967, 2473, 3940, 3939, 2472, 2456, 1335, 3911, 2441, 3888, 3887, 
          2440, 2424, 3832, 3070, 3864, 2405, 3835, 2404, 2387}], 
         Line[{326, 1439, 335, 1452, 1453, 344, 1478, 1479, 353, 1512, 1513, 
          362, 1546, 1547, 370, 1576, 1577, 379, 1610, 1611, 388, 1642, 397}], 
         Line[{2529, 1437, 2546, 4004, 3125, 4005, 2564, 4027, 3133, 4026, 
          2582, 4051, 3141, 4052, 2599, 4079, 3152, 4078, 2615, 4077, 3158, 
          4100, 2632, 4132, 3169, 4131, 2651, 4157, 2649, 2671}], 
         Line[{2531, 1438, 2547, 1456, 4007, 2565, 4030, 3134, 4031, 2583, 
          4055, 3144, 4054, 2600, 4083, 3155, 4084, 2616, 4107, 3161, 4106, 
          2633, 4134, 3172, 4135, 2652, 4159, 2653, 2672}], 
         Line[{2533, 3123, 4000, 2549, 3128, 4010, 4011, 2567, 4038, 3136, 
          4036, 2585, 4062, 3146, 4060, 2602, 1560, 4089, 2618, 4112, 3164, 
          4115, 2635, 4142, 3175, 4140, 2655, 4165, 2659, 2674}], 
         Line[{2536, 3124, 4002, 2552, 3130, 4020, 4022, 2570, 4049, 3139, 
          4047, 2588, 4068, 3148, 4074, 2605, 4101, 3157, 4096, 2621, 4127, 
          3167, 4122, 2637, 4149, 3177, 4154, 2657, 4171, 2665, 2676}], 
         Line[{2538, 2545, 4006, 2554, 2563, 4028, 4029, 2573, 4024, 3142, 
          4053, 2591, 4050, 3150, 4076, 2607, 4103, 3160, 4105, 2623, 4098, 
          3170, 4133, 2640, 4158, 3179, 4130, 2661, 4156, 3186, 2678}], 
         Line[{2540, 2550, 4009, 2557, 4035, 3135, 4034, 2576, 4059, 3145, 
          4058, 2593, 4081, 3153, 4085, 2609, 4111, 3162, 4110, 2626, 4137, 
          3173, 4139, 2643, 4161, 3180, 4163, 2663, 4176, 3188, 2681}], 
         Line[{2542, 2555, 4014, 2559, 2574, 4041, 4043, 2578, 1530, 4065, 
          2595, 4091, 3156, 4088, 2611, 2624, 4117, 4119, 2628, 4147, 3176, 
          4146, 2646, 4167, 3182, 4169, 2667, 4178, 3189, 2683}], 
         Line[{2544, 3997, 3132, 2562, 2579, 4015, 4017, 2581, 4044, 3151, 
          4071, 2598, 1566, 4066, 2614, 4093, 3168, 4125, 2631, 1636, 4126, 
          2648, 4153, 3184, 4174, 2670, 4180, 3191, 2685}], 
         Line[{2673, 2658, 4164, 2654, 2638, 4143, 4141, 2634, 4114, 4113, 
          3163, 2617, 1561, 4090, 2601, 2589, 4063, 4061, 2584, 2571, 4039, 
          4037, 2566, 1463, 4012, 2548, 2530, 3999, 2532}], 
         Line[{2675, 2664, 4170, 2656, 2644, 4150, 4148, 2636, 4121, 4120, 
          3166, 2620, 4095, 4094, 2612, 2604, 4073, 3147, 4067, 2587, 4046, 
          4045, 3138, 2569, 4021, 3131, 4018, 2551, 2534, 4001, 2535}], 
         Line[{2677, 3185, 4155, 2660, 4129, 4128, 2650, 2639, 3171, 4099, 
          4097, 2622, 4104, 3159, 4102, 2606, 4075, 4072, 3149, 2590, 3143, 
          4025, 4023, 2572, 1481, 4003, 2553, 3126, 3998, 2537}], 
         Line[{2680, 3187, 4175, 2662, 3181, 4162, 4160, 2642, 3174, 4138, 
          4136, 2625, 4109, 4108, 2619, 2608, 3154, 4082, 4080, 2592, 4057, 
          4056, 2586, 2575, 4033, 4032, 2568, 2556, 3127, 4008, 2539}], 
         Line[{2682, 4177, 2679, 2666, 3183, 4168, 4166, 2645, 4145, 4144, 
          2641, 2627, 4118, 3165, 4116, 2610, 4087, 4086, 2603, 2594, 1531, 
          4064, 2577, 4042, 3137, 4040, 2558, 3129, 4013, 2541}], 
         Line[{2684, 3190, 4179, 2669, 4173, 4172, 2668, 2647, 3178, 4152, 
          4151, 2630, 4124, 4123, 2629, 2613, 1567, 4092, 2597, 4070, 4069, 
          2596, 2580, 4016, 3140, 4048, 2561, 4019, 2560, 2543}], 
         Line[{406, 1673, 415, 1686, 1687, 424, 1712, 1713, 433, 1746, 1747, 
          442, 1780, 1781, 450, 1810, 1811, 459, 1844, 1845, 468, 1876, 477}], 
         Line[{2686, 1671, 2703, 4188, 3194, 4189, 2721, 4211, 3202, 4210, 
          2739, 4235, 3210, 4236, 2756, 4263, 3221, 4262, 2772, 4261, 3227, 
          4284, 2789, 4316, 3238, 4315, 2808, 4341, 2806, 2828}], 
         Line[{2688, 1672, 2704, 1690, 4191, 2722, 4214, 3203, 4215, 2740, 
          4239, 3213, 4238, 2757, 4267, 3224, 4268, 2773, 4291, 3230, 4290, 
          2790, 4318, 3241, 4319, 2809, 4343, 2810, 2829}], 
         Line[{2690, 3192, 4184, 2706, 3197, 4194, 4195, 2724, 4222, 3205, 
          4220, 2742, 4246, 3215, 4244, 2759, 1794, 4273, 2775, 4296, 3233, 
          4299, 2792, 4326, 3244, 4324, 2812, 4349, 2816, 2831}], 
         Line[{2693, 3193, 4186, 2709, 3199, 4204, 4206, 2727, 4233, 3208, 
          4231, 2745, 4252, 3217, 4258, 2762, 4285, 3226, 4280, 2778, 4311, 
          3236, 4306, 2794, 4333, 3246, 4338, 2814, 4355, 2822, 2833}], 
         Line[{2695, 2702, 4190, 2711, 2720, 4212, 4213, 2730, 4208, 3211, 
          4237, 2748, 4234, 3219, 4260, 2764, 4287, 3229, 4289, 2780, 4282, 
          3239, 4317, 2797, 4342, 3248, 4314, 2818, 4340, 3255, 2835}], 
         Line[{2697, 2707, 4193, 2714, 4219, 3204, 4218, 2733, 4243, 3214, 
          4242, 2750, 4265, 3222, 4269, 2766, 4295, 3231, 4294, 2783, 4321, 
          3242, 4323, 2800, 4345, 3249, 4347, 2820, 4360, 3257, 2838}], 
         Line[{2699, 2712, 4198, 2716, 2731, 4225, 4227, 2735, 1764, 4249, 
          2752, 4275, 3225, 4272, 2768, 2781, 4301, 4303, 2785, 4331, 3245, 
          4330, 2803, 4351, 3251, 4353, 2824, 4362, 3258, 2840}], 
         Line[{2701, 4181, 3201, 2719, 2736, 4199, 4201, 2738, 4228, 3220, 
          4255, 2755, 1800, 4250, 2771, 4277, 3237, 4309, 2788, 1870, 4310, 
          2805, 4337, 3253, 4358, 2827, 4364, 3260, 2842}], 
         Line[{2830, 2815, 4348, 2811, 2795, 4327, 4325, 2791, 4298, 4297, 
          3232, 2774, 1795, 4274, 2758, 2746, 4247, 4245, 2741, 2728, 4223, 
          4221, 2723, 1697, 4196, 2705, 2687, 4183, 2689}], 
         Line[{2832, 2821, 4354, 2813, 2801, 4334, 4332, 2793, 4305, 4304, 
          3235, 2777, 4279, 4278, 2769, 2761, 4257, 3216, 4251, 2744, 4230, 
          4229, 3207, 2726, 4205, 3200, 4202, 2708, 2691, 4185, 2692}], 
         Line[{2834, 3254, 4339, 2817, 4313, 4312, 2807, 2796, 3240, 4283, 
          4281, 2779, 4288, 3228, 4286, 2763, 4259, 4256, 3218, 2747, 3212, 
          4209, 4207, 2729, 1715, 4187, 2710, 3195, 4182, 2694}], 
         Line[{2837, 3256, 4359, 2819, 3250, 4346, 4344, 2799, 3243, 4322, 
          4320, 2782, 4293, 4292, 2776, 2765, 3223, 4266, 4264, 2749, 4241, 
          4240, 2743, 2732, 4217, 4216, 2725, 2713, 3196, 4192, 2696}], 
         Line[{2839, 4361, 2836, 2823, 3252, 4352, 4350, 2802, 4329, 4328, 
          2798, 2784, 4302, 3234, 4300, 2767, 4271, 4270, 2760, 2751, 1765, 
          4248, 2734, 4226, 3206, 4224, 2715, 3198, 4197, 2698}], 
         Line[{2841, 3259, 4363, 2826, 4357, 4356, 2825, 2804, 3247, 4336, 
          4335, 2787, 4308, 4307, 2786, 2770, 1801, 4276, 2754, 4254, 4253, 
          2753, 2737, 4200, 3209, 4232, 2718, 4203, 2717, 2700}]}, {
         Line[{489, 3390, 689, 3416, 683, 681, 3410, 3409, 675, 3403, 673, 
          3402, 667, 3397, 665, 3365, 653, 651, 3386, 3385, 645, 643, 3379, 
          3378, 637, 3370, 635, 629, 625, 3367, 661}], 
         Line[{496, 655, 3389, 3388, 649, 3383, 3382, 647, 641, 639, 3374, 
          3373, 633, 3369, 3368, 631, 619, 3362, 3361, 617, 611, 3351, 609, 
          603, 601, 3346, 595, 3342, 591, 627}], 
         Line[{499, 485, 487, 486, 490, 3263, 491, 3264, 492, 3265, 493, 3266,
           494, 3262, 502, 3270, 503, 3272, 508, 3273, 509, 3277, 514, 3278, 
          515, 3283, 520, 3261, 521}], 
         Line[{18, 1938, 1937, 17, 1935, 1934, 16, 1933, 1932, 15, 1930, 1929,
           14, 1928, 1927, 13, 1925, 1924, 12, 1923, 11, 1922, 10}], 
         Line[{524, 497, 3268, 500, 504, 506, 3276, 510, 3274, 512, 3282, 516,
           3284, 518, 3267, 528, 3292, 530, 3296, 536, 3299, 538, 3304, 544, 
          3305, 546, 3312, 552, 3279, 554}], 
         Line[{555, 3281, 3280, 553, 547, 3307, 3306, 545, 539, 537, 3298, 
          3297, 531, 3293, 529, 519, 3286, 3285, 517, 513, 3275, 511, 507, 
          3271, 505, 501, 498, 3269, 525}], 
         Line[{558, 3291, 522, 526, 532, 3294, 534, 3301, 3302, 540, 542, 
          3309, 548, 3313, 550, 3287, 3288, 562, 564, 3322, 570, 3325, 572, 
          3330, 578, 580, 3335, 586, 3308, 588}], 
         Line[{589, 587, 3337, 3336, 581, 3331, 579, 573, 571, 3324, 3323, 
          565, 3319, 563, 3289, 551, 549, 3311, 3310, 543, 3300, 541, 3303, 
          535, 533, 3295, 527, 3290, 523, 559}], 
         Line[{592, 556, 3317, 560, 3321, 566, 568, 3327, 3328, 574, 576, 
          3333, 3334, 582, 584, 3314, 3315, 596, 598, 3347, 3348, 604, 606, 
          3353, 612, 3356, 614, 3359, 620, 622}], 
         Line[{623, 3332, 621, 615, 613, 3355, 3354, 607, 3350, 605, 3349, 
          599, 3344, 597, 3316, 585, 3339, 3338, 583, 577, 3326, 575, 3329, 
          569, 3320, 567, 561, 557, 3318, 593}], 
         Line[{626, 3343, 590, 594, 600, 3345, 602, 3352, 608, 610, 3358, 616,
           3360, 618, 3340, 3341, 630, 632, 3372, 638, 3375, 640, 3380, 646, 
          3381, 648, 3387, 654, 3357, 495}], 
         Line[{657, 714, 3438, 3437, 710, 3433, 708, 3432, 704, 3427, 702, 
          3426, 698, 696, 3394, 3393, 687, 3418, 685, 3414, 679, 3404, 677, 
          3407, 671, 669, 3399, 663, 3395, 659, 693}], 
         Line[{660, 624, 3366, 628, 3371, 634, 636, 3377, 642, 3376, 644, 
          3384, 650, 3391, 652, 3363, 3364, 664, 666, 3400, 3401, 672, 674, 
          3408, 680, 3411, 682, 3415, 688, 488}], 
         Line[{690, 722, 3444, 3443, 721, 3442, 720, 3441, 719, 718, 3440, 
          3439, 717, 716, 3420, 3419, 712, 711, 3435, 3434, 706, 705, 3429, 
          3428, 700, 699, 3423, 694, 3421, 691, 715}], 
         Line[{692, 3396, 658, 662, 668, 3398, 670, 3405, 3406, 676, 678, 
          3412, 3413, 684, 686, 3392, 695, 3422, 697, 3424, 3425, 701, 703, 
          3430, 3431, 707, 709, 3436, 713, 3417, 656}], 
         Line[{727, 3574, 927, 3600, 921, 919, 3594, 3593, 913, 3587, 911, 
          3586, 905, 3581, 903, 3549, 891, 889, 3570, 3569, 883, 881, 3563, 
          3562, 875, 3554, 873, 867, 863, 3551, 899}], 
         Line[{734, 893, 3573, 3572, 887, 3567, 3566, 885, 879, 877, 3558, 
          3557, 871, 3553, 3552, 869, 857, 3546, 3545, 855, 849, 3535, 847, 
          841, 839, 3530, 833, 3526, 829, 865}], 
         Line[{737, 723, 725, 724, 728, 3447, 729, 3448, 730, 3449, 731, 3450,
           732, 3446, 740, 3454, 741, 3456, 746, 3457, 747, 3461, 752, 3462, 
          753, 3467, 758, 3445, 759}], 
         Line[{99, 2094, 2093, 98, 2091, 2090, 97, 2089, 2088, 96, 2086, 2085,
           95, 2084, 2083, 94, 2081, 2080, 93, 2079, 92, 2078, 91}], 
         Line[{762, 735, 3452, 738, 742, 744, 3460, 748, 3458, 750, 3466, 754,
           3468, 756, 3451, 766, 3476, 768, 3480, 774, 3483, 776, 3488, 782, 
          3489, 784, 3496, 790, 3463, 792}], 
         Line[{793, 3465, 3464, 791, 785, 3491, 3490, 783, 777, 775, 3482, 
          3481, 769, 3477, 767, 757, 3470, 3469, 755, 751, 3459, 749, 745, 
          3455, 743, 739, 736, 3453, 763}], 
         Line[{796, 3475, 760, 764, 770, 3478, 772, 3485, 3486, 778, 780, 
          3493, 786, 3497, 788, 3471, 3472, 800, 802, 3506, 808, 3509, 810, 
          3514, 816, 818, 3519, 824, 3492, 826}], 
         Line[{827, 825, 3521, 3520, 819, 3515, 817, 811, 809, 3508, 3507, 
          803, 3503, 801, 3473, 789, 787, 3495, 3494, 781, 3484, 779, 3487, 
          773, 771, 3479, 765, 3474, 761, 797}], 
         Line[{830, 794, 3501, 798, 3505, 804, 806, 3511, 3512, 812, 814, 
          3517, 3518, 820, 822, 3498, 3499, 834, 836, 3531, 3532, 842, 844, 
          3537, 850, 3540, 852, 3543, 858, 860}], 
         Line[{861, 3516, 859, 853, 851, 3539, 3538, 845, 3534, 843, 3533, 
          837, 3528, 835, 3500, 823, 3523, 3522, 821, 815, 3510, 813, 3513, 
          807, 3504, 805, 799, 795, 3502, 831}], 
         Line[{864, 3527, 828, 832, 838, 3529, 840, 3536, 846, 848, 3542, 854,
           3544, 856, 3524, 3525, 868, 870, 3556, 876, 3559, 878, 3564, 884, 
          3565, 886, 3571, 892, 3541, 733}], 
         Line[{895, 952, 3622, 3621, 948, 3617, 946, 3616, 942, 3611, 940, 
          3610, 936, 934, 3578, 3577, 925, 3602, 923, 3598, 917, 3588, 915, 
          3591, 909, 907, 3583, 901, 3579, 897, 931}], 
         Line[{898, 862, 3550, 866, 3555, 872, 874, 3561, 880, 3560, 882, 
          3568, 888, 3575, 890, 3547, 3548, 902, 904, 3584, 3585, 910, 912, 
          3592, 918, 3595, 920, 3599, 926, 726}], 
         Line[{928, 960, 3628, 3627, 959, 3626, 958, 3625, 957, 956, 3624, 
          3623, 955, 954, 3604, 3603, 950, 949, 3619, 3618, 944, 943, 3613, 
          3612, 938, 937, 3607, 932, 3605, 929, 953}], 
         Line[{930, 3580, 896, 900, 906, 3582, 908, 3589, 3590, 914, 916, 
          3596, 3597, 922, 924, 3576, 933, 3606, 935, 3608, 3609, 939, 941, 
          3614, 3615, 945, 947, 3620, 951, 3601, 894}], 
         Line[{965, 3758, 1165, 3784, 1159, 1157, 3778, 3777, 1151, 3771, 
          1149, 3770, 1143, 3765, 1141, 3733, 1129, 1127, 3754, 3753, 1121, 
          1119, 3747, 3746, 1113, 3738, 1111, 1105, 1101, 3735, 1137}], 
         Line[{972, 1131, 3757, 3756, 1125, 3751, 3750, 1123, 1117, 1115, 
          3742, 3741, 1109, 3737, 3736, 1107, 1095, 3730, 3729, 1093, 1087, 
          3719, 1085, 1079, 1077, 3714, 1071, 3710, 1067, 1103}], 
         Line[{975, 961, 963, 962, 966, 3631, 967, 3632, 968, 3633, 969, 3634,
           970, 3630, 978, 3638, 979, 3640, 984, 3641, 985, 3645, 990, 3646, 
          991, 3651, 996, 3629, 997}], 
         Line[{180, 2250, 2249, 179, 2247, 2246, 178, 2245, 2244, 177, 2242, 
          2241, 176, 2240, 2239, 175, 2237, 2236, 174, 2235, 173, 2234, 172}], 
         Line[{1000, 973, 3636, 976, 980, 982, 3644, 986, 3642, 988, 3650, 
          992, 3652, 994, 3635, 1004, 3660, 1006, 3664, 1012, 3667, 1014, 
          3672, 1020, 3673, 1022, 3680, 1028, 3647, 1030}], 
         Line[{1031, 3649, 3648, 1029, 1023, 3675, 3674, 1021, 1015, 1013, 
          3666, 3665, 1007, 3661, 1005, 995, 3654, 3653, 993, 989, 3643, 987, 
          983, 3639, 981, 977, 974, 3637, 1001}], 
         Line[{1034, 3659, 998, 1002, 1008, 3662, 1010, 3669, 3670, 1016, 
          1018, 3677, 1024, 3681, 1026, 3655, 3656, 1038, 1040, 3690, 1046, 
          3693, 1048, 3698, 1054, 1056, 3703, 1062, 3676, 1064}], 
         Line[{1065, 1063, 3705, 3704, 1057, 3699, 1055, 1049, 1047, 3692, 
          3691, 1041, 3687, 1039, 3657, 1027, 1025, 3679, 3678, 1019, 3668, 
          1017, 3671, 1011, 1009, 3663, 1003, 3658, 999, 1035}], 
         Line[{1068, 1032, 3685, 1036, 3689, 1042, 1044, 3695, 3696, 1050, 
          1052, 3701, 3702, 1058, 1060, 3682, 3683, 1072, 1074, 3715, 3716, 
          1080, 1082, 3721, 1088, 3724, 1090, 3727, 1096, 1098}], 
         Line[{1099, 3700, 1097, 1091, 1089, 3723, 3722, 1083, 3718, 1081, 
          3717, 1075, 3712, 1073, 3684, 1061, 3707, 3706, 1059, 1053, 3694, 
          1051, 3697, 1045, 3688, 1043, 1037, 1033, 3686, 1069}], 
         Line[{1102, 3711, 1066, 1070, 1076, 3713, 1078, 3720, 1084, 1086, 
          3726, 1092, 3728, 1094, 3708, 3709, 1106, 1108, 3740, 1114, 3743, 
          1116, 3748, 1122, 3749, 1124, 3755, 1130, 3725, 971}], 
         Line[{1133, 1190, 3806, 3805, 1186, 3801, 1184, 3800, 1180, 3795, 
          1178, 3794, 1174, 1172, 3762, 3761, 1163, 3786, 1161, 3782, 1155, 
          3772, 1153, 3775, 1147, 1145, 3767, 1139, 3763, 1135, 1169}], 
         Line[{1136, 1100, 3734, 1104, 3739, 1110, 1112, 3745, 1118, 3744, 
          1120, 3752, 1126, 3759, 1128, 3731, 3732, 1140, 1142, 3768, 3769, 
          1148, 1150, 3776, 1156, 3779, 1158, 3783, 1164, 964}], 
         Line[{1166, 1198, 3812, 3811, 1197, 3810, 1196, 3809, 1195, 1194, 
          3808, 3807, 1193, 1192, 3788, 3787, 1188, 1187, 3803, 3802, 1182, 
          1181, 3797, 3796, 1176, 1175, 3791, 1170, 3789, 1167, 1191}], 
         Line[{1168, 3764, 1134, 1138, 1144, 3766, 1146, 3773, 3774, 1152, 
          1154, 3780, 3781, 1160, 1162, 3760, 1171, 3790, 1173, 3792, 3793, 
          1177, 1179, 3798, 3799, 1183, 1185, 3804, 1189, 3785, 1132}], 
         Line[{1203, 3942, 1403, 3968, 1397, 1395, 3962, 3961, 1389, 3955, 
          1387, 3954, 1381, 3949, 1379, 3917, 1367, 1365, 3938, 3937, 1359, 
          1357, 3931, 3930, 1351, 3922, 1349, 1343, 1339, 3919, 1375}], 
         Line[{1210, 1369, 3941, 3940, 1363, 3935, 3934, 1361, 1355, 1353, 
          3926, 3925, 1347, 3921, 3920, 1345, 1333, 3914, 3913, 1331, 1325, 
          3903, 1323, 1317, 1315, 3898, 1309, 3894, 1305, 1341}], 
         Line[{1213, 1199, 1201, 1200, 1204, 3815, 1205, 3816, 1206, 3817, 
          1207, 3818, 1208, 3814, 1216, 3822, 1217, 3824, 1222, 3825, 1223, 
          3829, 1228, 3830, 1229, 3835, 1234, 3813, 1235}], 
         Line[{261, 2406, 2405, 260, 2403, 2402, 259, 2401, 2400, 258, 2398, 
          2397, 257, 2396, 2395, 256, 2393, 2392, 255, 2391, 254, 2390, 253}], 
         Line[{1238, 1211, 3820, 1214, 1218, 1220, 3828, 1224, 3826, 1226, 
          3834, 1230, 3836, 1232, 3819, 1242, 3844, 1244, 3848, 1250, 3851, 
          1252, 3856, 1258, 3857, 1260, 3864, 1266, 3831, 1268}], 
         Line[{1269, 3833, 3832, 1267, 1261, 3859, 3858, 1259, 1253, 1251, 
          3850, 3849, 1245, 3845, 1243, 1233, 3838, 3837, 1231, 1227, 3827, 
          1225, 1221, 3823, 1219, 1215, 1212, 3821, 1239}], 
         Line[{1272, 3843, 1236, 1240, 1246, 3846, 1248, 3853, 3854, 1254, 
          1256, 3861, 1262, 3865, 1264, 3839, 3840, 1276, 1278, 3874, 1284, 
          3877, 1286, 3882, 1292, 1294, 3887, 1300, 3860, 1302}], 
         Line[{1303, 1301, 3889, 3888, 1295, 3883, 1293, 1287, 1285, 3876, 
          3875, 1279, 3871, 1277, 3841, 1265, 1263, 3863, 3862, 1257, 3852, 
          1255, 3855, 1249, 1247, 3847, 1241, 3842, 1237, 1273}], 
         Line[{1306, 1270, 3869, 1274, 3873, 1280, 1282, 3879, 3880, 1288, 
          1290, 3885, 3886, 1296, 1298, 3866, 3867, 1310, 1312, 3899, 3900, 
          1318, 1320, 3905, 1326, 3908, 1328, 3911, 1334, 1336}], 
         Line[{1337, 3884, 1335, 1329, 1327, 3907, 3906, 1321, 3902, 1319, 
          3901, 1313, 3896, 1311, 3868, 1299, 3891, 3890, 1297, 1291, 3878, 
          1289, 3881, 1283, 3872, 1281, 1275, 1271, 3870, 1307}], 
         Line[{1340, 3895, 1304, 1308, 1314, 3897, 1316, 3904, 1322, 1324, 
          3910, 1330, 3912, 1332, 3892, 3893, 1344, 1346, 3924, 1352, 3927, 
          1354, 3932, 1360, 3933, 1362, 3939, 1368, 3909, 1209}], 
         Line[{1371, 1428, 3990, 3989, 1424, 3985, 1422, 3984, 1418, 3979, 
          1416, 3978, 1412, 1410, 3946, 3945, 1401, 3970, 1399, 3966, 1393, 
          3956, 1391, 3959, 1385, 1383, 3951, 1377, 3947, 1373, 1407}], 
         Line[{1374, 1338, 3918, 1342, 3923, 1348, 1350, 3929, 1356, 3928, 
          1358, 3936, 1364, 3943, 1366, 3915, 3916, 1378, 1380, 3952, 3953, 
          1386, 1388, 3960, 1394, 3963, 1396, 3967, 1402, 1202}], 
         Line[{1404, 1436, 3996, 3995, 1435, 3994, 1434, 3993, 1433, 1432, 
          3992, 3991, 1431, 1430, 3972, 3971, 1426, 1425, 3987, 3986, 1420, 
          1419, 3981, 3980, 1414, 1413, 3975, 1408, 3973, 1405, 1429}], 
         Line[{1406, 3948, 1372, 1376, 1382, 3950, 1384, 3957, 3958, 1390, 
          1392, 3964, 3965, 1398, 1400, 3944, 1409, 3974, 1411, 3976, 3977, 
          1415, 1417, 3982, 3983, 1421, 1423, 3988, 1427, 3969, 1370}], 
         Line[{1441, 4126, 1637, 4152, 1631, 1629, 4146, 4145, 1623, 4139, 
          1621, 4138, 1615, 4133, 1613, 4099, 1601, 1599, 4122, 4121, 1593, 
          1591, 4115, 4114, 1585, 4106, 1583, 1577, 1573, 4100, 1609}], 
         Line[{1448, 1603, 4125, 4124, 1597, 4119, 4118, 1595, 1589, 1587, 
          4110, 4109, 1581, 4105, 4104, 1579, 1569, 4096, 4095, 1563, 4089, 
          1561, 1555, 1553, 4084, 1547, 4078, 1543, 1575}], 
         Line[{1451, 1437, 1439, 1438, 1442, 3999, 1443, 4000, 1444, 4001, 
          1445, 4002, 1446, 3998, 1454, 4006, 1455, 4008, 1460, 4009, 1461, 
          4013, 1466, 4014, 1467, 4019, 1472, 3997, 1473}], 
         Line[{342, 2562, 2561, 341, 2559, 2558, 340, 2557, 2556, 339, 2554, 
          2553, 338, 2552, 2551, 337, 2549, 2548, 336, 2547, 335, 2546, 334}], 
         Line[{1476, 1449, 4004, 1452, 1456, 1458, 4012, 1462, 4010, 1464, 
          4018, 1468, 4020, 1470, 4003, 1480, 4028, 1482, 4032, 1488, 4035, 
          1490, 4040, 1496, 4041, 1498, 4048, 1504, 4015, 1506}], 
         Line[{1507, 4017, 4016, 1505, 1499, 4043, 4042, 1497, 1491, 1489, 
          4034, 4033, 1483, 4029, 1481, 1471, 4022, 4021, 1469, 1465, 4011, 
          1463, 1459, 4007, 1457, 1453, 1450, 4005, 1477}], 
         Line[{1510, 4027, 1474, 1478, 1484, 4030, 1486, 4037, 4038, 1492, 
          1494, 4045, 1500, 4049, 1502, 4023, 4024, 1514, 1516, 4056, 1522, 
          4059, 1524, 4064, 1530, 1532, 4069, 1538, 4044, 1540}], 
         Line[{1541, 1539, 4071, 4070, 1533, 4065, 1531, 1525, 1523, 4058, 
          4057, 1517, 4053, 1515, 4025, 1503, 1501, 4047, 4046, 1495, 4036, 
          1493, 4039, 1487, 1485, 4031, 1479, 4026, 1475, 1511}], 
         Line[{1544, 1508, 4051, 1512, 4055, 1518, 1520, 4061, 4062, 1526, 
          1528, 4067, 4068, 1534, 4072, 1536, 4050, 1548, 4080, 4081, 1550, 
          1556, 4086, 1558, 4091, 1564, 4092, 1566, 1570}], 
         Line[{1571, 4066, 1567, 1565, 1559, 4088, 4087, 1557, 4085, 1551, 
          4082, 1549, 1537, 4076, 4075, 4074, 4073, 1535, 1529, 4060, 1527, 
          4063, 1521, 4054, 1519, 1513, 1509, 4052, 1545}], 
         Line[{1574, 4079, 1542, 1546, 1552, 4083, 1554, 4090, 1560, 1562, 
          4094, 1568, 4101, 4102, 4103, 1578, 1580, 4108, 1586, 4111, 1588, 
          4116, 1594, 4117, 1596, 4123, 1602, 4093, 1447}], 
         Line[{1605, 1662, 4174, 4173, 1658, 4169, 1656, 4168, 1652, 4163, 
          1650, 4162, 1646, 1644, 4130, 4129, 1635, 4154, 1633, 4150, 1627, 
          4140, 1625, 4143, 1619, 1617, 4135, 1611, 4131, 1607, 1641}], 
         Line[{1608, 1572, 4077, 1576, 4107, 1582, 1584, 4113, 1590, 4112, 
          1592, 4120, 1598, 4127, 1600, 4097, 4098, 1612, 1614, 4136, 4137, 
          1620, 1622, 4144, 1628, 4147, 1630, 4151, 1636, 1440}], 
         Line[{1638, 1670, 4180, 4179, 1669, 4178, 1668, 4177, 1667, 1666, 
          4176, 4175, 1665, 1664, 4156, 4155, 1660, 1659, 4171, 4170, 1654, 
          1653, 4165, 4164, 1648, 1647, 4159, 1642, 4157, 1639, 1663}], 
         Line[{1640, 4132, 1606, 1610, 1616, 4134, 1618, 4141, 4142, 1624, 
          1626, 4148, 4149, 1632, 1634, 4128, 1643, 4158, 1645, 4160, 4161, 
          1649, 1651, 4166, 4167, 1655, 1657, 4172, 1661, 4153, 1604}], 
         Line[{1675, 4310, 1871, 4336, 1865, 1863, 4330, 4329, 1857, 4323, 
          1855, 4322, 1849, 4317, 1847, 4283, 1835, 1833, 4306, 4305, 1827, 
          1825, 4299, 4298, 1819, 4290, 1817, 1811, 1807, 4284, 1843}], 
         Line[{1682, 1837, 4309, 4308, 1831, 4303, 4302, 1829, 1823, 1821, 
          4294, 4293, 1815, 4289, 4288, 1813, 1803, 4280, 4279, 1797, 4273, 
          1795, 1789, 1787, 4268, 1781, 4262, 1777, 1809}], 
         Line[{1685, 1671, 1673, 1672, 1676, 4183, 1677, 4184, 1678, 4185, 
          1679, 4186, 1680, 4182, 1688, 4190, 1689, 4192, 1694, 4193, 1695, 
          4197, 1700, 4198, 1701, 4203, 1706, 4181, 1707}], 
         Line[{422, 2719, 2718, 421, 2716, 2715, 420, 2714, 2713, 419, 2711, 
          2710, 418, 2709, 2708, 417, 2706, 2705, 416, 2704, 415, 2703, 414}], 
         Line[{1710, 1683, 4188, 1686, 1690, 1692, 4196, 1696, 4194, 1698, 
          4202, 1702, 4204, 1704, 4187, 1714, 4212, 1716, 4216, 1722, 4219, 
          1724, 4224, 1730, 4225, 1732, 4232, 1738, 4199, 1740}], 
         Line[{1741, 4201, 4200, 1739, 1733, 4227, 4226, 1731, 1725, 1723, 
          4218, 4217, 1717, 4213, 1715, 1705, 4206, 4205, 1703, 1699, 4195, 
          1697, 1693, 4191, 1691, 1687, 1684, 4189, 1711}], 
         Line[{1744, 4211, 1708, 1712, 1718, 4214, 1720, 4221, 4222, 1726, 
          1728, 4229, 1734, 4233, 1736, 4207, 4208, 1748, 1750, 4240, 1756, 
          4243, 1758, 4248, 1764, 1766, 4253, 1772, 4228, 1774}], 
         Line[{1775, 1773, 4255, 4254, 1767, 4249, 1765, 1759, 1757, 4242, 
          4241, 1751, 4237, 1749, 4209, 1737, 1735, 4231, 4230, 1729, 4220, 
          1727, 4223, 1721, 1719, 4215, 1713, 4210, 1709, 1745}], 
         Line[{1778, 1742, 4235, 1746, 4239, 1752, 1754, 4245, 4246, 1760, 
          1762, 4251, 4252, 1768, 4256, 1770, 4234, 1782, 4264, 4265, 1784, 
          1790, 4270, 1792, 4275, 1798, 4276, 1800, 1804}], 
         Line[{1805, 4250, 1801, 1799, 1793, 4272, 4271, 1791, 4269, 1785, 
          4266, 1783, 1771, 4260, 4259, 4258, 4257, 1769, 1763, 4244, 1761, 
          4247, 1755, 4238, 1753, 1747, 1743, 4236, 1779}], 
         Line[{1808, 4263, 1776, 1780, 1786, 4267, 1788, 4274, 1794, 1796, 
          4278, 1802, 4285, 4286, 4287, 1812, 1814, 4292, 1820, 4295, 1822, 
          4300, 1828, 4301, 1830, 4307, 1836, 4277, 1681}], 
         Line[{1839, 1896, 4358, 4357, 1892, 4353, 1890, 4352, 1886, 4347, 
          1884, 4346, 1880, 1878, 4314, 4313, 1869, 4338, 1867, 4334, 1861, 
          4324, 1859, 4327, 1853, 1851, 4319, 1845, 4315, 1841, 1875}], 
         Line[{1842, 1806, 4261, 1810, 4291, 1816, 1818, 4297, 1824, 4296, 
          1826, 4304, 1832, 4311, 1834, 4281, 4282, 1846, 1848, 4320, 4321, 
          1854, 1856, 4328, 1862, 4331, 1864, 4335, 1870, 1674}], 
         Line[{1872, 1904, 4364, 4363, 1903, 4362, 1902, 4361, 1901, 1900, 
          4360, 4359, 1899, 1898, 4340, 4339, 1894, 1893, 4355, 4354, 1888, 
          1887, 4349, 4348, 1882, 1881, 4343, 1876, 4341, 1873, 1897}], 
         Line[{1874, 4316, 1840, 1844, 1850, 4318, 1852, 4325, 4326, 1858, 
          1860, 4332, 4333, 1866, 1868, 4312, 1877, 4342, 1879, 4344, 4345, 
          1883, 1885, 4350, 4351, 1889, 1891, 4356, 1895, 4337, 
          1838}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
v2RKlzZZr5zp+XXRnJdwv2HPYi2JZLzdYn1JjOBMQsSI++x18ei5dmH1wpne
uKtbOvsQmW8SFT9o4jYWP8DET1ncWLxBPBVvwMSbUfVYfKLF3bH4RCY+Dcff
K9Ori8EsG65fXx+5or5FiIcgmde7YvH9++TTUUMw+7jdlli07Cq71Ufw4c5t
t0tN5enoPCXnjMzbYLTdMuGDBJmXkgTX2/o5iVju08QhG+6EEuMsPkkROw91
fph6U8sDzzi+zcHNC4Bn2dTHAeS7IqZj+xfmU/sXmP3rT+130Kb2O7TR+92b
wgf4ROEDMPjgqTGGJ3iawhNk8EQoPoHjHfih6qqqHWvtk3B2V5qUEVl3S6sB
l+8itvhoRmbJgYkB6MSqmzmJ2GP90+jrd3K+4W6Y8+qliBUUxEZ+Gj0/fN7Y
b/7lQAaM/z3jk+/TUNj14UWqK+EFnXk3L3+cmwarFq3mdeoOhW9DInqvh//B
Wyih8BYYvN1O4TP0XR3DZ2Dw+ShrDM/BsngMz5HBcxr/cQeF/8jg/wmBMb5A
iZ4xvkCGL2opfoHpFL8Awy/PKD4CLoqPwInmI5q/IJniL2D4ayrFd3Cd4jtg
+G4yxY/AS/EjMvx4juJTKKD4FBk+pfkXaf5Fhn+XLIyc+0AlDKefX+hueyQV
/Ksmeu4ldhqvtTBd9j4cExJXCrF2pEKZfcFBYTI+7dhBY/4zCTgskTR++0Aq
pBcuaOYgetR6LJVi1NNwIM3m7FT5MPi51Ke4iPg/vDZRUePNJbyUUfNOZtEZ
mHBIcYolwYFOTbybr5mH94J98xUzfdH5jLhwNZlX9QneLYqFGTj+5IZL08h5
spjXXNKL6G9rj70WejMBXz180mdurIdnbNX3uZJ4ezVbt9zteyJGPc7Rqoi5
AAsVrxRMJuPLdgYqXnlpDz17Zi6WD4iHM7x4Oo2MhzaddubqlQfZ30K77Xcm
w8Inmvt6SBwujAVZn2o/nLDx2PXZqeGwrjV1KIKsr/SanlCDr9G4z8Lq9c7l
54H76tdN9mS8YvuBvA0bE5Ansqzs8zx9LJIWH59B9C84t7fiuGkYZjcK1x07
aI3Lpd5EGhH/z/tmpVCUFoLWC8IC/94wxmWTRuLqyPi5vZeuGxh5oQsH/0Nv
U1Nsme1gbkzih3dcj9f2DZG40995914uBzQVttj/inzXQ+TKdOOj6RB6LMv9
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
QSszTglNck8XoOWr2OS/bdv7sPNyPk40fyzqy5WMZzy4hzcQ+X10XVs4W10b
73vHhyYCZVijOc7/8YVM9ND71KBE7k0HaPlINvlV30zKz5L76aBdk9uZkXgM
r5bPeTDwvzq+UjZ7rlPnB+TaPXZ+QOb8oEPX981mq+9b3rRrg+L6IgzfqX7k
1KRwlMoujHhH1reErr+bwlZ/pxjK+/rVhBIsv7VVQvpPHG63zN2x5zULyml5
YTb5aOq8hAf8x85LyJyXOul77h+2e+5D6n4B1X5j9wtg7hdFdF3ba6pOGZk6
5YOv7k0LPJ+B5xqbj7vpJ6PiJM1vsWR95ek6vjS2Or67FH/BJYq/gOEvXbqe
8awHVc/InPeuFzlKPCG4E6TsbT9tMAcDNvg255DzSR1dD9hK1wNOp+sBV9y2
8PiZUIZ/W0709uam4e+24a5csr7VtH/msflH0B2lDs8qxFMS811u+sei+nLZ
7InkvHSQrnN8dYGqc3xL1zlKOfC6bxFLw+16Gqpz16egeeuCO1lkX3TTdYjR
dB3iVboO8dI+R91LO/Jx2ZbCXzKS+Xj6rqqi/CtyPqTlU9jkJwuzqlmz0pAj
7VryykemaNlexQtkP8rQ9kx0/Lc9nqvnXNs1bIdVxoK+LXbJUKhqfDWK8MtK
uh6zm67HZOqp368UeHfi6WWc/t0vz60nDxV3udjzkXPX+/+wZ1jtyMvv8lFo
Y6SzsNQwAfuPiqe6EHv46PrKbnWqvvInXV85oCWuuP+vN7q+fZWVKeEFFovF
nXtG442uA73PVge6lLqfwlHqfgrM/bSXln/CJv/H/8/NbSudsO/HcY7jwWfx
w/GrfwtInAjQ9vxls6evqaSm8HcoKEw56qucFQ9tbk4L9Ij+j3QdKBdbHagb
dR8H+j4OzH385X/YE0rleVCAyvMgk+fRoPIA2ELlAZDJAxRS9x1Mou47yNx3
ttL7JYltv3TEOzy1jQzFQ0Zcge9mFODa53ITvUnczuGbZbB6agAkaFrqrneN
gF9yUvwnyH5sputYP7PVsQb9+uN1k9yHo4dsNIyWpsBuufIV4sQ/N2j5r2zy
QieCK4uNvLDp1PO9CkczsKvwj+BxYn/IsoOzQ06mg4FlYL3pMXus4bvScYjc
4y4Kb7KwnVEErSfvTussKILLmb8vziX7sYPWz2n8b/13qLwT3KDyTsDknb7S
9bZJbPW2oRtzG0pvlkCVdklf74MImOS/yCyC7KMf6kndJrZVcNj1j0BeaQrU
WSytNCP3LBsqDwY2VB4MmDzYAK0/iE1/JZWXgw4qLwdMXk6crvPlZ6vzJfCe
OTL5Kiy6vCc3V6gI2s3/wIc8wke1Zb/S3teCX31DzKKiAmhIUTuJNYQfqfwh
cMmM5Q+ByR9O7aRwtZ8NV2dS+SIUofJFyOSLtOo/6Hp11ICgoOpeSfE8OGS6
oZ2vkQUua3aHLOMvA2/HD2FGnenQaTQUZdlDzvNUHhW4zMfyqKBK51EDqbwr
yPKM5V2RybtaUfleeLR9LN+LTL7X5/hYvhcKqHwvMvlezbqxvDEoUXljZPLG
b7u2B2zx9cDYdM1eSUEHONqYKH2C7NPgnMg7XdUxOP9Twynj9B1o3Lk7ePR9
u9b6GTYFFcH4wWuPurG1EmS2fCl/Q/xTUb7OeCTcDmyTb767FkzW/XDOtwmj
uEfXqb1lq1O75RSqbPsgDevlL67MMN8KnMLSxY9JfM5uSVH5OCMLb5Y0Tl60
xQeP7T+0kO87CyZt3Px3XcolXJKY9PN1czDm7Z4nmkL8bGAaMa2kLg/71n06
/7AlAh/x7l+9hZwn+VW6eDKP5+LloK2mua2hqBuouOkD2aeNA/WKJ/R1ULbz
Z6q9oC1eXDc3/iGZbx5dJxjKVid4fCgq34X3Irauc+usRXfsWJQ1pDFaj0bX
4fKy1eFWa3Wrf3p5Fh4+cD//STAKYiWXPn1Ixl8MB0f19/viIs+o7inbg3He
5co2OeKfY7QefjY9t4W8tGNCLuGb4u6LkVaRmNEtK3WL7IsNP48qdOumYXGr
dOZywwDcG7PKew/x23fdnGXjbCNxjcm54LlFIThxnO7ITeJn7f/QP+v57+66
NZHYLzot4wRnOAayONa7EfnDdB3xarY64sUTZXe+M49Gpx1c6poubnjRKzF6
9D2GuRCnkfQrMh/dKbMXF57DzkX9Re1kXrHS916LKcShTPwcw8KV0RinJ1F6
m+DzMVr/Wjb9FRERESu6fHH7cw6PEx2u2G4lvXWQ6LGk65f3sNUvy/8Zd+4v
SxmCz8+wsjb0hs9uX7hH67bme4Q6H8t2Bq55C09PIXjg+efI5pvEzv6tGUe9
dnvgJfElzcsv2eEW597Uk6Pvq2n9qmz6dz+J2ClWfA7P3eYvOt5mjVILf+W3
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
U9XO8+oigTArv9OwQisZZ8bqPBgdn0P3JzxO9yespfvvnQ1tzTzACoOFPX1T
jc+5Q1G98sTR98MqtD2SbPZ0dY44b2aFwttpiYH9MoYgHrG5OuT/lS89/E++
9MMXo/4HN4IgZpsHZ8++RLT+461uRvyTTvdFXMLWFzF5nVxVqJIr8MxPH/+0
LRmXq3233knkk/+jj+KlBYI7J13xwwIrnlaN2QnQHdN4/DORz6D7EMqz9SHk
ps5FuJY6FwFzLppA92N8yNaPUXycwjI/Xl/c/OHh9gHfJPj48KPk+V+jdRb/
7mfI+LOvyW/uEi1/+NzhnWotZo8ThSav4//L+Mee9supf/7/gir7CzpKxp6Q
OCuy54NsIHotMawYvX89Y+vTGET3abzjZxxrqhaM89a/89/TEgUGl7KDkNhp
9x99FNMWBAhmDjljltRtl7SqWLAyVyn/SOStafmFbPKmR3atPVHhDr0/Ez83
lYXjTP5ZtW9G+/nQ9hiy2fOgXP6GxWs3mKM4Qa/YNRaPjrvC85Ton033k+Rk
6yf57uKaCT8veSPXszrZU8FhIBiQO6uf6Lel7RFjs0ddfGHUzeQg3MV1fr7R
a284nx33zJh89wDdH1KZrT9kJ+Uf2En5Bxn/pP9HH8ud1PqCPbW+yKxvPC3v
yiavaNFQ+f/Q9d5xPf7f43+kkC0ZkWwhM1TWQdlSUiGVpKLSVCqkvffee2vv
ojqEpBQysislhAohGf0ez67H8+3zur4//16303mex3msc07Xde72d/1QY9ee
N8b85jB5nOCK2//Hnr0se2J9Tr6daemH55VyMoe0nkTsGL2ak6econ0so1h9
LGOY9QwZzHpG7nqOofbYs+wRvH9dreJsCIy4YTrSRioKs7v3vnjX/7c/Zwur
P6eK5usPYauJS9I7F/MkRUGsXtNAE9H/ifaxjKF9LBNpH8uJjH6cyegHrv7U
f+yvXad2fZ5j740PTizoDZ8UC9elygU0OfuF6o9l6f+2KTPcyiQQMxcK3ozV
cUXvmbjyN6cOQ/2TwvLPlH1rVDf+IPYEpsS2zQ/Ercrempy+E2dp/8/9rP6f
MXu9hmRODMBQU+vRHfKh8Gz/l8vhRP4rtSeCZY+qLkL1kjDcZ3vSWzXSDzoq
g29z+knepf08k1j9PE9OyxTfetEPl29+NO4c2ZcLVk5b2Eyea9G+o9dZfUdz
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
0s4pSPjFwVq/gaCDCoHQ+3TJlC1E/+XhpusTsuLB9UrkPjUlUxB20bsmQOR3
MXVOuMDUOZFb53zM1EXhFlMXRW5d9DxTj4V4ph6L3HqsIFOPxb1MPRa59Vhh
pq6LaUxdF7l1XZ97hoJVE8xhQmqgfFNtIGTqbhh9lMzLpFftMU6pTqhx7Hy2
fl8KHBGyjlUm6/xrecmRpUmWcKLR0XLHjgjQWvxOazGnH+++yUk4LhwX7/it
M8E4GY0kO++rkfN5O+UqCnT+l6s4yvekyektvlh/NOvagh2X4c/ETwO6nH7d
daMzj+3JxalWci94ZQvhw7dfcXEPu8FbT2LM/OYSfOwyat6WnxlgdfOS5VAi
b7p3aeVrXcQclUyPndtPQZGFltzkqm54aPNxeYUHouuk8ooO97PY5clnfvIq
udc2/H4+foIOGsvpv1zjWYoLx5wz2PCUnD+Ua+lNuZbZlGvZsppntcfzULCQ
VTb9vCMYZCvVbYdweIKUD5tA+bBIOZIbhd/NHr3SGsr7PhoM1bSHs97w3Ivz
/tuNNuOnV8KgMzFp95HrkTAs90sDJ792ZHFmuXqUlm9uzPxdgZpHSpTyJgWj
tDlYNt0g+8tITMQ67xLerBszVM41BCdOvP7r8D1yzneKdSsK2ENK9PvF1aWp
YH/s2Lr3RI8t1Z/J0q94pO7+oXlOcHlns1KCaiKsOrw8Bck5qU/5tv0svq2I
z+br6R+L8U2p+LH3pZE4zTv44zgSl65yv7Rpr3IJrj5xke9CURzG37af5vyk
GxpmTNeU3xqE9bm+6523e8Il80ZbznciOlT/G5Z+3Kv9aeVnTbyncnMVr5c/
yO1VD7vJ6XdKubqzWVzdtuV2x28czcN3D2Z0wcQ47P288dV4sh+TT/en39HN
xL3rr5t5fotB+epLtgkkbnT87XJ4hL0Ojjr5QkLWyAbCjmsnVg381S/C0v9o
jfKa11rn8fCIVncx7+MYbb/l4k0iP4/yfAspz1eN8nwVDVT6ditm4Ra5Wj7R
nASUeiczagp5Pu6PT8Xp4iTc3hxw3W9TOt5+n2alSOy5bR2TvMwsDu6nNyYo
dKTBG+WB6YIcfjTl9tJ1CNx1OCVcckQ4vx+4VH9bNTfHCz6PuWbI+T/UZsov
3sDiF6/JS1vp3JgEsj8sRm8i+e/42rk8U8nvLqD831wW/9ehNmnzt1wrOBb0
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
P8+m83KbNS/dH7/Ku97zBXcJUQWlR9GQenbsATeynvd4VuzbxecNIiLHmxTH
RgIP1K3dz+EdUy65CYtLHtLRm46TiB9fiQdI80Wg/qrk6gEOl1zyhGmiizOa
GcX9eLM4DDftGfguw+k/T7nzS1nc+Q8PBAKSevRhwZ09yidNXXF4wuOtBkT/
auqfvLb/+seB8uJNWLz4H0ai2iVLQ6H50E7tpOlG4Np6xOkx+d1llA9+hsUH
j6dc9WgWV134eVplsGsiDKxqff5YyhX2+3t0OJD5XUn54DtZfPAwyluvY/HW
BVvk94VYJUGutdjukOYgKJwe9LOSrB9DyhNPZfHEm2LkRSQ1o+G3lPOMs4t9
oD61cQfnOxdryvVeyeJ636Zc7wgW1/visPH8gi+8Ie3TtJuB2nZwhndc0wtO
X8RSm2nnV0qj4OqGEjEfN1w7eu80DgczeXYPmJP14fD8s9OBy7IYdNXoLWed
rKJ+s2f5LcLAS3nj9AR4KLM8dF9TKGgMa9JOJfsr9B/c+VrKW29k8dabhPaP
+iKXBksn8W3wOh4N15a+/aFFzoEb/+BTy1Cutz2L66268+eKU2XJ0KDdum7O
Dm9wXm4y2H/yCOV6F7G43gYLb7UmSkaD6IBB09VdB6Fao2xMGpn34ZRbbcji
VhcUep4ekeoEYhm38gw3+2K/sqR4PHl+i/r/NMv/HYcYnvVYFs86bO8Y+478
Uxgx7NDjj6HhOBJSB45z3ot+lFuxbMAPREQTpB6LhkG9YH9PGLGnfl0+tkfE
wFR3n+fTCmKAzzqEL63vL0/8Pcs/7+wNdMIjIqG2Y4nlI9dI0Cx/7j6OjNeK
8rJPsHjZZy7MKN431xFuRua+29FjB7teCReokXk37vDWFV9sVv5bovqKebvB
//LT8Q1P+J1Ou6EGT19kWZAjJq+Iucjpr8JD/abH8tteymW+wOIyv4xouDox
Ngrfp0w4uGVFNPI5+C6zIuufn3KZ17C4zPoPxDRjv0fhQLDPz6iRsdg++WZt
L/GD9j+4w2KMP3Eq40/k+nPBvkH/w3bG/8D1fzYzvxh4cXB+gTu/0yn3+efM
/3Kf5/smXzLkicOCw+G1Ub2aOMXHW+An5/yk4z3HGq805S9rs/jLAY9X14pa
pmBWYO0Z8ckBmOfaX/eA3DsmlC88lsUXNgu1q5FQTcOAS43Njy+S+D17u/iu
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
baK/yxHc+qdqytiPhXD2db6vA8nnBzm9RzzD6T2CQO9xUs726e8vOeLVW2Nz
efal8EXp6TWhxyR/ek98knEwGA3P/Wxcd6cEbqhtneVKxg2LpDavN4jBl/oL
v98ZmwJ157aHppL3Iq7EM9tKNxHlbETv7/vsjDZNreXbST3geS9nTev0JJz6
dOpO3ZiD6P5nWRPfb0iu8VSSv0QiVqXqmnW9D8ApA0RyU8m9ECFxT17lfTw2
2Dt3pJnH4/UnRyVVSV2tovGt2/1IJD4NuDlhct9ofPqk1Hs+mWf4ki+6Qp2B
OPrELRWjcWH4fu++hY7kvLnefjRcWT4QZ43V6dYfHIR+16XEVcm5GhKjYXPc
MADrNc50uEv44pkTa56+J+N71H+VHC8LwR19Jsjq7PJHr6JIhTFk/JLvAmUt
sUgccGW90L78AMyG+bUyZP49b2ryp6jG4fzhIpaXajwxe0Vnqw153+Opj8wf
6iPzgPrISC6xbRWvtYLRY8tFvpsUw82h/fYWkzrBuI9dk7aUC2aqHtm7XKoA
1u1o8TR49+/9Mpn7bvrRlbF4deex6nkDgsD91btRvcn3WlG/mL7UL+Yc9YuJ
ofsygdmXeRnRz967ROGry3kjDrxxw1Gv2i1OkOdqf7tx/Pb1gegx3n/g0yde
uLd03G9+fNqEzgQM/OyAzknT5MbMPY2rB44at6bH9+r/9oW507Vcbo67PsSk
HLhYancKq8aK5pSSz7c9eXIh79g+eKcvdsq0txeeaWyv5eNaw02qqgds3w8Z
wxbUdNUEotAKBacIvr7c7YLC6TNIPnEx+BkTFYyJ80wiJPn4Crovo5h98Vh4
4fmz5T7Q5CLcIGoeio//GL7g/248U3/xQOUcQ+iULtUd8S4e5yrEhdj++uvD
0kF9WMyoD8uI9K3L/d9FwrNap6KTUgkgYTemLobkn/LvCuOGTFmC9yZIrpKL
jCJ1revVfny9XOqzk8347DQkqly8JmaNsXD4qmGLL+zK3z/gPd83nMYniomP
JfXHCWb8cQqL79vZbTCBZTceXNn50R3crfLua3T/9XNh/VCCqI9MH+//+sjY
SS62TU0LhoroTxtbAwJgXR8dH5k//HqV80M5wvihRFF/mXrGX+b+L73J/l0J
MMtGpio+7xToVHdWZ3b+9XNxYvxTRnksXxNYEA4f3QfGSo9LQtRYtOYlea+/
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
coWaN2aXRpPn7aZ8ohSGTyTb88OJ89KYVg/yZ/C/30/0Kd9qIMO3Gtmcf352
tz8MH5+4qHV8ODQO6fwQTtaze92vuUfPpcDt/e2LJ671Adc5Jj0+L/WLC/FZ
ZCwM8vC9P6ooFvrZhPZLJ/vbSXlYlxke1g6bYXjbKgWsDe3HnA/3hBjDlZnS
5PN7/C7NGmKWCLUpZwzLjjrAhWjdVSYkniayde1JC2NgV/eRlmpVLbikc04y
nczzk/K5Whk+F8/xiEFEZBRcfyFn1ewWBXoV9z2kyLjWi1XL1yTGwpT0/Ku3
F4XDfZ+tm8X4Om+U/3WL4X9drBs6yKV/IrxN0tsBUkkA99o0lpLzv8X0bK2P
UhREjir/9UvKCWyszwyrI+u5UOxl1j/NBYZk1RUYrfDDzu0LZyaQ+E/j4okj
uHiiIJ4XNlR3HQ+Lh6KA+J9WU6NARjn8fROJw1HKLzvA8MtuTB6ze/w3d/Bp
t9n4cIozzgu28+1P9qtWSyU7BjZin+1dsi6bIvGc9Qtlfp5X2yjp+KLwKPr3
3dH6LiwCRSGtm+/350x5bUcYXpvPyTGlmyc5Q1NU/uu1H06B6hPpot1k/v33
rh9/VRSGZ0mHtbPbE39Hlt4ewcc5Uz6XOcPnWrG553tBhfteEHzvv3hwXxvb
hF3M3HFrrx9R54KdMWVubCYfX9cuxPHd0hm+WwYXZwzI7IkzCOLsnNv/yYwO
a7C7vDRlioUV5vomXufju7Kvc/y4qww/bjnlx1kz/LgbkdeqB8dF47PUQVor
58ZgPye/2dYk/jJ+KWVGveIxTDuiPvqLHo7w9RH7Rd7H1L6HVskOswfT8tDR
sl4h4Grb/KmTPO+SX5VNM90ssfP3jia39hC86//OpDdZZ7dJlvxGg3icZ3lK
t8EgCSNnCg/k19t7bk/Ti/sejd9DfH9Fi8bhs+GX67+QePr14fh6eQxfL5fy
0UYa/ZePlqzgc1NthxtuXOIadV7EGIZr3i3i62HOfrB/bIiwJ2rPu1tdWR+O
IWddH/P4OpOU97eV4f0toPy4PQw/zrd1fv14q1TMCKq3nDk8EAvcOhtuk7ru
2mW/+AV6Sbgu0C1ou2kA7nxavY6PbyynPLhuhgenQXlwzQwP7msuxysMZHiF
0rtazlbU+mCkuLz6nnQn/KwXZ9XQ9W++oUnYqSsKO9PRv+zmo9bMGIzIVZmp
St5rpRLJhsqAeAw5N+4G3gpAuUFxXlYkDzRSHuJMhoe4eZ13sEVsIjre1fow
9HsE+g6wm/CJ5L20YTnnw4UycMOBB1P2zIzH65csM2RInXlr+8dfO32TMPnY
tnm9FEIx1H+RxUjyvDzKZwxg+IwDKW9RkeEt6l40HVhLzkGOw8IcLVVXLB69
YmgDGX9ZOHnTeuVkVBuYrm2zOBIt7pZce0ri/yjirmuIfTL2VirMOhwQgtod
cmtiyTpHZ6uPEXWIxYe3VewPHI3AUyXjRVvIebbxTG5alBWJRq31qskZAdi1
6pJPL7KeCMqXdGL4kv+vrvOO5/L7/39LQ0lLe4iiqaWi0lNGi6SyskISSVbZ
W2bZe++RLVvpKSRRSCINlRIqs9D2O1evy/dz67r93rebv87tup3rvM451znP
53Ee98fcC8Hpjly+2G+e0zs9cSPeqB0W+U363ydvvqvh90TcdHhAUXmRJ84v
s9lD+WU0NjjfqCpMROvZaZf2dfuixR62z5tI+YRdSouNOuJQOiJO+vIjd+Sp
XCelQ/o/2eTbNq0VXji/9h7fETlz7GlV4qDWgUT2A5ISdwzxrLP+Vva9bvC4
t1ieipe88v/GUZDPiqNgPI7KZMXVUMeKq0GPjqtlaV0nMHSdZv7Tvzybbglv
PsUf/TNyBTgzH2SUUr4tO3sMB2WS4MfPhX2e7f5w8HNHvBPFBRppixjamQgz
dcKap73yh4qMhfLC5HclCK2+a3PbE+Fh3nfxNxF4S19rggR57wNaHyrL0Ie+
XcOTEn4uEJUEbwp2sBvi0c1Rr2Sp+UzrQFUYOlDr5qMj/Mkkjg9839vzJxi3
VCYGepN6NKwvc5qpRuOluSlqF5f7YmvlhGPU+Y8wrRvlZ+hG9WndaLDFv7rR
JSvdv0/7tgSHKqOf68R4gkSkXq0MKU/jPHyjQ9YGvm9c/HHUygTTl8d4FpNy
iUvDM/aSdT+7Xmow4Uwghu8rSRCjdM20/tSeoT9NvTLkOLrIAtsXJufJTPVC
+/6yxTNIPREW80bvFDvinc/zbbw6bEBcoEmeWse+66/yGxi+CpyNx3GaTTjw
V2YFNJN6Yll5EDiw8iAYz4M8aX3rR+1/9a0cSWFlp8Vc0KBOzNb/kDnJk7J4
DCg9FK17bWToXrV+nP86ujkQ+u8u63y/6Apkhwf3UedLjq3z31QdvwgSZ/Ly
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
6WDTRdrvSPMq9Ri8ylCaD2nH4ENesXn+ZWRnOHxTOWhun+AKV04cL6B4Jgdp
nmc0g+f5mV+yUf+XMUzN1j/2x14ZTG9VzaD2NTOOPVbJKYFQEDkk/czPDw5P
VvfiJuOoSPM/pRj8T7fY5RrHfgbDwtb0s5ucXUD5ZsAsG/J81PNLWjusyHfX
X9X0PdMOipa+KjYk/RZaLKTtJhsHVSfX52oGhkB814RFa8g8f/ZTY43vnzjg
seQuj812APW7P+6mUf4FNF/0CoMvGtc37ViDeQa8bij7ImGdBAFs0w8vJf1T
OW/mueMaBpBewv7h7Hwf+H5Qcv5E8rvu0jxSVwaP9KtGldqDp4EwYmCrtnHf
NVg7E9UDqXn7vOlIwWAAQFJr4+EbHvj1jKsbpduSYS9pef8zDCzOnU4ZOu2F
ebZvJVx+/Y9reoHBNV3qsV/SPzcU+t3nRC9dmYB4Skiyi7qvS3M7NzG4nWyW
LsLecSlg+eHkqqBLSfBii9NkLpLXrOxV2/xkTxHIuY8occ6+CTY/9WWLSdye
ajf2o9OkCMQcM7q/haRBsvR6vitNJM4pFkrWSPaEe0uvyOZPSMHDWu+yppP3
7qZ5qpYMnuolmi+6k8EX5aR5qj4MnurrSrc7bUUuaP82wGjG41BQ/Sy8iIf0
j4enf2rQjWJoW3r68ka9eGjEab3+zf2gMhQcWpYaB5P2d5l9Ec+HUskDv3RI
/P+D5qyaMDirZby/Vao35gK8KTyQ6xMDhYoCIcmkf/Y1vZuyJq0EJF8lzqwu
TwDrpHjdsEYSV1+Vvt5bnw3Lgz04PUy8cPY9hbpTZL+Lo3mthxi81hy9xybK
95JBzN82u2tTKXQvPnX7I4krdKY+OXxhXjJ0w+qRPS9zISj4V/D59//ju+5i
8F2tj1XzWzTlgKSsl/z3VeWgrz3k+i6D7MsiMpE8LdFQ/aBdP/ZrPNo6TbRP
I/uOppuhVbqCG0yzmJM/eV0Bmidpphq/64dZVX/7E3xY/Ynj/VklWb+AfUsm
bHva1qA4Pw/k2wbr28n+20zzYycz+LHsmTZX2peagVj+7uQD+wrQ4M7R1iRS
/6vJIusmTzqOf04oruhdUIKb2F0OB5F1o3FP5k4vF2tYw11b4a1WiGymk0tt
SX5qZbllX0JeCswqUxFtmRMALbvnPqgj8Rg3zbN1ZfBsOc3WlOiUucHdTFNh
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
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.09259458092137765, 0.7486122776543305}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 2, $CellContext`k1$$ = 
    0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
    0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`kDefaults$$ = {0.25, 0.25, 
    0.25, 0.25, 0.25}, $CellContext`kMax$$ = 1, $CellContext`kMin$$ = 
    0.05, $CellContext`locDefault$$ = {{0.1, 1.3}, {1.9, 
    0.8}}, $CellContext`m1Sel$$ = 1, $CellContext`m2Sel$$ = 
    1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$5984, $CellContext`qVec -> #]& , \
$CellContext`meshSize$$ = 8, $CellContext`minAngleBetweenLatticeVectors$$ = 
    Rational[1, 6] Pi, $CellContext`minSquaredDistanceFromOrigin$$ = 
    0.1, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
    1.4}}, $CellContext`mMax$$ = 30, $CellContext`moSel$$ = 
    2, $CellContext`nArray$$ = {{1, 0}, {0, 1}, {1, 1}, {
    1, -1}}, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10, 15, 20}, "numberOfMasses" -> 3, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.8200836820083681, 0.1673640167364017}, {0.6778242677824267, 
      0.6485355648535565}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
     "pointsDataTable" -> CompressedData["
1:eJxdnUtsXEd2htsSJdESLVMUJbGpF0mR1Fsi2Xy/urop77jKTtvJDCdZJYA3
2Q2XWXgRBHkMM0kwi8DIcgBuJsAA7EU2zigveKXVGDBAwICBsSHDI8WOHLnP
953JvQSE6+6+99TrVNVfdb5bnvzBn/zBjwYajcbJN/+23vx7+82/E2/+7fX/
bvUa3//1nvQWWt//3ewdfP/39ElcD670+l+/2In7GsO9Z9//fbDT+/f+fzR6
fTOzO72/79//0VHY62Lvm3bY6/Z+3b9/qIS9DvYul7DXiXRat3p/9/39zSeR
zrMb8f3hDr9fiXR3d3pL/c/vRvrH3d5bYTDs7nd7v+wn/C9HYa/b+7e+vW/b
Ya/T+9v+7++UsNcJO3uXS9gr5O9WpPv+Dr/fiHwN7ZC/y/H9h93ej/v/cb73
3fd/7W7vj/qfXx/1k3lueX/5q7DX6f0wfm+HPT+fj/Q/LNovYa9Q31Ncu73X
/R+uk6+u+SedLu33DtdO7z+i/EdRj53en0f9tMNewd537bBTevNRvyXsFeu/
LPavbexORblnu72f9j9fx5+yfaM9n3bI9xD+VHph55uj/vcflN5fhf+0w57l
b5R+u+63yd+7pd/uh9th9+BK6dfz8Rbln6L9O/jf9chns0N+L+FPBX8ZinR2
C/ZeRX6etXn+43aUw/K+Ff7b2ia94RLtvkV5x0rY2aS+psLuc8tzDX+yPi9F
vQwV/Pkc/t3unejbe3kU5d/u/WU4Urtfb4dbvR/10z0R6R9vYn+4/Kxf3k3y
N1b67b67Qf6mSLfw+7Ve//6DNs+P4ifb+PNZ6mkbf/76KNptq/c//fb4TbTX
3ib1dZLyb/D5QvSvZ+vYH4v2bKzjD5P093b0m++uUn7rdzTS39+i/t8Ovznc
JJ9fHUX5N/DXT9thbwN7J+nf6zx/AX9aox6a4c+Hq/w+Sb628OerlN/2HcVv
N7lvkHra4PsXMd4crNM+x/SvNco/QH9aI38X8KdV/K+JP61Q/kn82fq9iv9u
kN+Lkf7xOvkbpD7Xsfdl+PPuGvd/Fv68b3lPRfqHpjeCPy1jbzzas7lMfU1y
3aA845R/ne8vkq71e4Z6WsXeFzE/NFaZDz6P8bhl+qdj/Ntbxv5IiXwu8fs4
/rSIvUnKv0Z9j4c/N63vkfCT3VXyeRp/WiFfn4c/Hy7THr8Nfz5eMv+U388X
8adFnh/Hn1p8nqD8q9hr8n3WL/60wn2n8Jtl+uFn4c97S/jfl+HPB4vYO0P5
W7Y//alF/q4yPi/w+wT9aQV7Tcpv+47Qn5bI5wD1uUh9HTN/LuJ/L8Kfd1vU
72D48/6C/QN/mqd8V/GnOco/wX3L2GuS7yX7J+navgPYsXyfMj4vkP5XjM+W
923607zjB/1pDnvXqJ/H2JugPy06PlF+07tAf/LzSepzgXb8JPx53/S+Rl/M
4Y9nQ988e+z4Sv4eOf4yXj4gfxOUv8XzY/iF5R1m3JvnvhPkw/p+zvhseV+2
4/5H5P9czJ+th84/MV8c3Kf9r5WYd+5h7yblX8D/1F+Wdxh/muP+t5gnHveW
+/Y/Por0H+J/r2L+aj3A3jnSv+f8jD/fJX/XY37fu536NPI5h70rlN/yDlMv
j1KfRvoPUp9G+vdTn0a+71K/Q6R/B3uX8Z9Zync95tNn06lP477H2LtC+tbv
u+TjPvc16O/3yD/69OAO9r7Fn2+r30h/JvVp2EO3N27gz1OpT6O+HqQ+jfze
S30a99/l/tdHUf+3zV8jyj/r78zv03w+T/mnUp+GvUnTx79vmj/Sv4s/Xyb9
O6lPo/yzqU8j/Rnrh/Qtb6OoG6hf0p9IfYrfUO83YnxqjKc+jftv43+XSH8m
9WncP536NNKf4vmP2o7zUf5G+RH1/h36NNK/6vqp2G+oF8aD0dSnkf409i/h
z7dSn0b6k6lPf0a/VJ/G79dSn0a+m6lPw47rgjHqb8T+zf3vpj6N+6awf4n0
rd9zpHPd8eUo0hl3/GE+v0L6J6j/Uep3mPSHU58uYJfxj/oZSH1KO6Y+ZV5J
ffpjxknGX9Y3l7D3Cf1pxPGb8fYdx3fKfyb1Ke3q/EB+vzpSn6LT8OdR0r+c
+jSeu5j61HEpvkefvrkvvh8g/ZPYvcB4+IpyNMnvZ9TzBPX5i18dVOphFP+7
mPOW+rSBH1X16Snq6xj/ec28OlDUjdQb+fs41rFv9OkJ6jU+Z/201aeME/jz
RdIfzKvzhOn8mHajnMwPn5LeqWK/C7sjlP8L2nWc8ehb+2WxHNGO49Yz/nyR
ddY31O8Z2ulz2ve3Rz9nXEYftq2nuJ4m/ZekN1L0c/oB+UEXNSbtX/6e7fCM
fhjpPad9T1Nvz9voY/L5ol0td4Nx5kwxX/gd6Q9Z/qJfxe+T1M9oUZ/+BeNs
+PMI+ySf076n8Cf2cd74oX5L+1EvZynvIPPVML9fzCvjIumzz7I3yfg0js5v
4s9ft1kf6S+2q37EuHt8FPPdeer5Bf48wv2DpH/JcYjvx0jvKulf47PtdbOo
T/+u4ocX7E9Fv3IcoX/jz6PZL9ynYHworhu8L9J3nlIP6seT2J2iPcdIf5j8
Xch1CeOb41GJ/ZLfHLmuZHxsq/Oq7TaRfmE9MP5i9xb3mY9pfh/Dny/xvfpr
zH6Bfr1a/gY/D/+0vC/b9pNI5xzlnyraje+nsX+NfM5kvUQ6t3OetR+Gfww7
X1Gut1yHlEeMa/HcJOm+ws8tL/uVrZn0o8jHrDqD9O9wneK5e6R3JedZ9IHr
+qI+jftvFfa/GPemKf83zKez3D/E9Tbp2I/uFssZ39/PemR9UdSn5pP9PdKf
5rmGeqgwLjD+3CZdx9k7pKc+vVf0uzDzgOsN0n/I87brY+pRXTJDe52nvWYp
12vSv4O9n2/Gc3f9nfHnPp/Pc9/DHGfC3iN+Jz/NuWK9xzAyx+/sVx7ctnz0
r7vk91vmhXvln6N+SN/yNrg+wj/epfyPKfcVPs9h7wb1Np/9LK4LRX3KeqGw
f+56gvZUnz4s/xT+Q396rH+xX2F5GZeb88VxKda7pn+T9fsC+aIf7Leoj0uu
p8jfOddb9h/0+1xh/Ye/zBXH8bjO5zwR1wXyN0Y9md5NxsdFnrvl/k9Rn0b9
P8af0ZH7c4x/v4t5dne+/GOMP9G/m5aPeft4QV1K+VvFcSzsLZI/xsndJddh
kc/mcur6uG8efz5Le807/tK/FyjXJ/hPy/Gb6yLXC6S7lPNWXJf4fYJ6Wi72
47C3wnXU/QrnH/bDW+T3q9Adxy32BT5l/8Lysl+5v5Q6Iuwtu87An0xvAn9a
yXE77K0W9Sn7Ofiz+6e25wv6+1L548gY/rycui6ulneEfK2U6v7pKuWdIB9r
fO84t87v7p8ukr8z7ActMd+jg/eX0eWfsf9leqco/2pRd4S9VdIZZ395jfqe
YL9wneenqc+Noj6N/C7jz2fQ9cvlf9GnYWel/Gf/qk4zffdP11znUf51fh8n
XxtcnYc2uE5TL5vkd4T+tII/n8afVov6NKp9DXtfhD8fr6U+jfpcT30a9jZS
B4W9zdSnYW8LezP0zy3KNeJ+Mu1zivlirUQ8z3WS9fsl86flVZdvpi4Ne5v4
81W+30p9GvW2nTogru1S0afNderD/dP18oeR8fDnw43Up1H+zdSnUX7LO4o/
bZfq/ul26rKw13ZfKJ4rJfUp8QjGv5P402Z5HP0b/b7FOuErxuct0nub63bq
07i2yR/6tFlSn4Y/l6JuiPyW1KfEa/Dnk8ZzytfoU+I97PN9TfzG8p3FXpv8
Uj9PC79fi/R7hfxNxfezndSJ/ec+6KQ+jfu28ecT+NN26tOoZ8v7Ev8pNX1a
Up/GfaZ3jXx1Up/G9x3um+W5Lv7Ffu5um/Z7Kz4PldSn/fvft35ftfvj0HPL
y35l6aQ+7af/YYd02K8c6qY+DXtd8jcb49rzburTaI+CP7NfeVjKB337HxEP
6KQ+jfa0/EO0l+Vlv3K3W9w/DXtd/Bl92txxnxV/2kl9Gt2mlG8jg0fEk8uf
9Z//F3iDTu4DEI92nyfS/6Cb+jTsdckfevDpTurTsLfD87P405PUp/F9p/yg
//k1ekd7/7oZ6XTx59fsv5u+69Qd8nuZdCz/DXTBE+zd4vsn5G+W556kPo3+
3y3wDaEHP+ymPo348g72GrT/TlWfPt9JfRp3mR769MMnqU/D3nvYu4299/Cv
6cjPvvzIBHrDz83kOeL5EeLv8iQDyXMYfwp73Yw/hRl5kkHGQ3mD0ejnu/Ik
08Tf5TcmkueI34nPDe24/5Y8R7TDgPXbW2H8DHsd9km+ivHhfXkS1vdD8iSj
yXNE/qZJ1/TdR+5m/Cme6+Y+Xrh9p+c+YdRjp3eyb++T5Dl+yPgZdgqfz9Iu
8gfu+7R7xhHoH/AVN+F55EnYb+h1Mv50EP0v40/0zx76OnkO9Hebbk18/lzy
HC3GzxgPtinXLebPDvtgxBH2bd8x5lvrdzh5DvcVGb8y/hQ6qZ3xp2hXeRLj
YfIkl+i38iTEHUqnykc9L1U+6n3bFz5qSF6nkTxHhY/a3874U+R/K/koeQ7H
zyivPAl81IHteSN5jrheSZ5DPor5LfkoeQ75KHkO+Sh5DvmosLeR8acYf+QN
bK92xp8i/t6uxp925UnOJ88hHyXPEfZ++St5DvkoeQ75KHkO7CfPIR+FfqHf
GAeyPS8nz+H4Kc9h/EmeQz5KnkM+Sp5DPirsyTvIR8lXwGvtbmX8KfKb7cv8
upHxJ3kO40/yHPJR8hxRfvYb9leTjwp/ki9wfb9c5aMamxl/inzLkxjvsX2H
kueo8lGrNT7K8spHyTu4vpc3kI+Sp4BHOlzP+JM8B+MD/d3P8lHyJC/pTys9
9Bv9yfK6vl9KPirmD3mSseQ5wh482548iXzUao2PWqnxUZZXPmqZ9pCPsrzG
nxZz31iew/W9PEeVj1qt8VGmJx+13DOuJM9R5aMWa3zUYo2PkieRj1qo8VHz
NT5qucZH2b7yUfIkub6vxZ9aNT5KvkE+Sp7E9at8g+t7eRL5qKUaH7VY46Na
2JOPatX4KPkR+SjLKx9leiOMf4+xx/q+JV9hXFqeRD5KfsT9D+tXPmoee/JR
8zU+Sp7kNOuYR8lHxe8Pc9877MsbyEct1Pgo61s+Sp5EPmou+Sh5DuJjbXkO
8s/8+SDjEPIcru8jXni3xkfN1/iorN/kOYxTRvqPko+S55CPkudg/4b079b4
qDvJR4W92RofNZd8VOTX9h1JnkN9GunfT30qz6E+rfIcg6QvX+F6eib5qLB3
q8ZHPUo+Ku5/kHwU+8/cN5A8R5QPfXpwu8ZHWd633QdLfeq8GffJR02mPo36
up/6VJ6D8St5DsY32mkWe58kz8H4mDxHfD5L+SdTn8pzxO/Gn+QNJkj/TvJR
8hzx/HDyHFU+ajr5KHmOsPcyeY5I55zrsNSn+E3yUfHcWOrTSH82+Sh5jsi/
+w23Up/Kc1Tj6jdTnzrvsL9O+s3ko4wLUC+5T6c+ZZ+8xkdZXuNzE6lPo72u
pz5lnzD1KevCGh/lPrc8kvXO+v7NPB33y0dNJh8lzxH5f5dyXeW+Rq475KNo
hxofNZJ8lDxHPHeZfacz2LuRPMce7Uo7pj6V51CfynPE/caf5Bj8k195nTxH
fHZ9fzL1aeTzFfuSxsM+O1KfotOSj5LnoHzZz9Snkf5Q8lGOk2SMfXPz/S7j
4Zd8Vp9+fOT6/lt0ygF+wD528lGUq8ZHDVb1afIc8PtvdJDxJ3kO9peS54j0
ruBPXzDP3cw4o/qUcSL5KMc962Gpko9XR/IclLMtzxHpvcV6WJ5juDgO0K8z
LmTc1n3aZ/iNfmr8KdI3bnGOfvScdnp5JM9R5aNekP6JYrsZf4rv3ccfS56D
8S/jMIyPjM/HxAVGe/v4hfUW38uxyEd9Q3nlowYy/sRzGX8yTsf4X+M55AZ4
T+WNPo16+bQtHxXXr2nvt5PnYH6ingb1k7b9yHwZV7HcrtMZFzMuFs9N1HgO
+ajX7Wr86ZTtqh9l/GmxUm75KOdJuRf2yRpyJsmvJM8Rn22viaI+dZ+9ykfp
h4Opo6p8lPuEn7XVwQeVclzLetJP4qoeNM5jPOxWjY8aqcWfrN8zyXOg/47U
LfJRjiP6bdgzPfl9OY3xjAt6X+RjpsZHXcl5zbgV9p2vMv7EfIY9+aipjD8Z
N16kXuP7meSj3FeN7+Ve7iQfRT8r8lEHjAvUf/Icxp/iObmLL/F7yzuY++72
o8jH7eSjwp58wyTP3U8+ynY0/hT3GWdwXJxOPiqem8n4U6RzO8c1eY54jv3K
PfmVq3z/IP1InkN9GvffqvFRM/Zf+V7u/zR5DvmouMqvqE/vZ/wp7DzkKh/1
KONP8hyMT6Q/m/GnsGv9Gg+7m3xUPHcv+ai4PqjxUaYnH/U4+Sh5Dv0uvjfe
z37lwZ2MP0X6pmf86X7Gn+J7y/syeQ7ml+Q5jD/Jczz7/+NA8hxTyXOoT1kv
JR8V6T9IPkqew/hTpC+/8Sp5jvh+KHmOSvxpbyH5qLjKU0zx3GLyUawnM/4U
9yW/4no0+ago/3zGn6L88hvun8qTwKcfypNcZ39DnmQqeQ71aWR3rsZHzeMv
3+Ev84X9weQ5jD9F+5neO8lzVPmoJa43kucw/hTPyZPAR+3PZ/xJniPS4f3S
Zgt7P9+Mbt9KPiraf7HKR+0v5bwtzxG/M281V7AnHyXfcRl/kSfx/VJ5km/x
38WMP0X5La981HLGn+Q5qnzUSo2PWq3xUWu5DmI/K/koeQ75qCj/UpWP2pcn
kY+yvPJRqzU+yvTlo+RJ5KPkSdw/XUo+Kp5bZnx8RX9aqfFR8iTyUaupu9iP
JH/yUaYnH7VR46M2ko+K/C4nH9XP1k9WanzUao2PWksdHO0vTyIfJU8iHyVf
IR8l3yAftVXjo1ZrfNRqjY9aq/FR66lP47pR46NMTz5KnkQ+Sr5CPmq7xket
0T7yUes1Pmq9xkdZXvmozdSn8hxVPmo79ak8R+RPPqpd46PWa3zURo2P2qzx
UVs1PsryqpvlSdw/bVf1aVOeAp2yX1KfEo/BX+SjNmt81Fb5h/5n+SjTk49q
pz6V54j8jSfPoa6R55CPkudQnxKvSj6KeFb5Bn0qz/Hf/evn6GXTP027FMZr
68fy8z5nQ35B/ke+YZrnOqlPo/zbNT6qnfo04sHyGqxz3y9Vffq8pD6NUdL0
xpPniPvR1UNd7M0kzxH+xX7us3byUbG/W1KfynOoT2M/2PKyX7kvT3IxeQ75
qLDXTX0qzxH5m+H9853Up8SDk4/q3/+iJB8lz6E+jfa3/LxPMGt5R5PncB0S
9uRJJpPnkI8KezupTyOfneSj5DmqfFQ3+Sh5Dtdtka9u6tOwJ1+hHpQnUb8/
qfJRe09Sn8ITVPmo0k0+Sp5DPip4Hst3NnmOCh/13N/ho4o8yVTyHBU+aui9
Kh+1300+Ktq/m/o0/NvyvuQ8gp3Up9Hfn1T5qH3TU58+SX0a9uRJ4KMO33Pd
yPgnP+I+8BOu7t/t4PdDNb6C8yWedfP9PdqzGj9tdDN+ij/k+3v4S8ZP8Sf3
X3v4m/wA/t0ljjCUfIXvdeHPvQf95z/W38kf8//TDvsmw/h3cX+5yFdQf+gf
+RnOlziUH+F8id1uz33Z6HYdxk3jpx3iy+xTJV9xgvlJ3oD393aL++/4TZv2
mOoxHmX8lPGK/PG+3IfaP9tjvPO9H/ia0nNfEv4tz5dgPM3zJeDnqudL7G/z
eRK/6GT8lPE891kZ7zN+Kl/B+pT9oJL7WrG/Z3kHiudlhL9cIN61nfHT0A3y
BsTjZvUv9r178iO83/i0kO9B2ktehvhpU97i2Pm2Gj/d38rzJeQrIj3m/2N5
jknWV/oT+1NNeZqL7C96Honv72333FeOfG4Rf/+sLV/B/FPkK9g/YRzzfI4m
+9OeH0Fc5FA+aTzSP7Y+LxK/3O753ma0/xbt+MWRfIXvsclXRHlPF/mKqC/m
/6bndfD+3u4a7UF77Xkeie+5bpE/51vPWyF+2pAncR96g/GF8yX21vEn96fW
fD8Rf5I3UI/4mfhpcyvjp5Hfzdy3j/JvZPw0yu95IJwvcex5IJwv0bS88sjy
HPLaKxk/9byM+N04kvxIEzueN8P5Ei3reyD5CvyX/cRV/dv1UPV8icaK77cW
+Qr6T5GvCHvET/f1pybll1+Bjz6WHxlIvsI4hXxFpP+V68Xq+RKHS77/y/pI
ngJ+vCnfMYFdeZ0x+pPlvUA/Wkm+L9pfnsL4qTzL1235CsbPIl8R9pn/D1q5
bxn25Ck4X+JYfkSezvNQ5JGTn8GfljKuEfVpeX/Xlq/gPe4iX8H6k/4kb4Ae
Sb7CeOVyxk8jv0v4CedLNJYyfhrllyf5+Ei+Iuy9astXRHl9X8705LXnM37q
eRnxmfMldj2P5Ar+JB80jD95/kkj+Qr0BeOzfMc3jM/zGT8Ne3PG12i/x/me
YuRX3sD4qf7k/l2r53v77LdhDz76YL5XfY95LuOncdtj8vsOOu+R8Ufmc8/n
cP9O3uEG5bc9LzM+ex7IecZneZLXMT/sej6H50s8zvipfAXPF/kK7Bf5ivj9
BvPFHfziBumYvnpQfuQd+tdj6tPzJR7le8/yFdRfW74i/NfzJe4avy5VvkJe
ezb1KfvRGT+N9B+lPo1aeJj6lP3u2vkSd1Ofxn2eR+J71bOpT+P7Gf3XfanU
p3Hfw+T74n7Pmxmi3jx/Rb7vjv3LeEHG7eI+eQ7jVtOpT+P7qYyTyFeoT6O+
7qc+jfzeTX0a93k+x++O5CuMn1b5ihOkf8vxq8hXqE+J42LvZsZNf1y5yut4
TsVs6tPI50xVnx54HonxU89VM34qT2K88nrq0/h93PnBfc8q3/fM+h2tcuzu
T8mVZvxUXudT+G/HjYEipxfPGTceky+qvUdpHG0k9WnYvZXnSxAHSn3qvBL3
vUAPXkt9Kl8R+RpA//ner+dLXEx96jhr3PRnlDvsX03dEVfjp5Z3MLm7+P3L
I/kK46fWq/tTxHuT7/PcFfVp2DmVcTfGrSP1aaR7LfVplH8s9anrQvQf++O+
x/Z5W+4kvj9N+oPqS/eFU5/u4Ye0e/IV+hXvlSTfp47HfnJJ6lM51rD3Rdv3
HqI8Z9in9ryMi+W/eI56Ls4z8ftk+SHtHvbGU3dVyz2U+lTuUH0qp+7+lNwo
7VvUIbR/ka8gvp77SJGe+y+NWvx00PVRcmL4Z567iP8eyVfg323njbhfLuRz
yut+kOdlGD+VGzC+LF/RTK6H/kn6cqADzOMfHRk/dR1q/BR/kEPKOAJ+Xqw3
9Sn+lvtT+j3756TveyUXcp+C9XeuG1ifU0/O4+bjVC1+qg6T77uA7rhWy6dx
8ys5Tv2Ufhv1PJyc3B7t5riLHxxZD2HP+OmwXFqNA7hkXCvjp+6Tx+9T6JHf
c3/GjexH9hP7KbqjzEW95Tk6xk+r7w0OJecT9Xop9zXhn4rnZcR9U8V+f8C4
1qJc7F/lPk1cPV9iVO7qyDib8VPGDe43nus5Ep5/ZhzF720nr8blruS6Gv3U
04761LiI50vs4QdyX8zXcn25z2w7hb1bRX1qnMD4aeTD8zJ+f+5VPO/5Z1fx
v9f0b88j+cWm47zckHFrnmd8Nj25HM+v8Dy225lP+Qry73sXtMc7qQN+zThg
v/wF40w853kk7lfKc7hfKb/ifqW8gfHluxk/la+gXdx3sf171XpUn04zznu+
hPXbUA+Xaj+T52C/8tk9/EF9+iDjp+jxjJ8aN+T9rJ77+PG750vczvipfIXj
nudl0D9dT9h/SfdhLX76uBo/3Z1zfCB9eRLPKZMP+h3jzV3nJfSy55GcKPIV
VX36KPt92Jsr6lP5ikr89GDe8RP9LB90lvHmHv7n+ycP8pwu1pNyqa43q/HT
fdPzfRj5EeOD8hTET4/lD0ZZ39zP+Gmk8xB//go9+Ij2+tT3GbDn+x7yI74P
Y/qef2Z66q8W5ZlOvoJxDh7zEf48yPxqeeH7DufQoce+71GNn+5aXvcH5Tnc
P/Uz+v1QvsP46VKeLxH5navGT1vzxOO+PIp2n8d/nOcWMn4adlo5T8fV8srT
yXOo35dzXAx78hbwfYfzVU56f6GoT/u377boN5wv0ZQfOe1+V/J9YW8p+b6w
5/kcjCu7Kxk/DXurPk9/snynmT9avM/M+RIHi8kJx31LnttHubJ8pGt68n2e
RyK/5vkccodrGT+N9l/M+Gm0/xLxL86XOF6Sq/Z9M+x5Hq48h+cFy4+4P7hW
ndeO1yjPTPIV+B/9e6l2LuKyOhudtlI9X6Jh/cr3WV73B9eS72M/OuOn7Fdn
/DSe2+R3dPzxcsZP+350uILegfP+yWrGT6P91zJ+Gu2/nrov7Fle3vc49HwQ
9HvyFXCbu1uOX/Sn1aI+DTtrcu2sU+RZ5JBN3/ejTU/9vpl8X9iTp/D8M3kL
56Vtx3f60xrtw7pidx1+jXVLcwN/fsl5KRupT6P88ivGT00PnbQrP+L5CfIU
nJt13E59Gs+t5/kSUY8bBV2P/tr03EnGZ8srd76d+lS+Iu5Tf5meukGeQc61
pD6N/G7Sv3kv43gTnu4jeK0t4mZw6vvbycHLV0S+LhsPTH1KvLCqT5/Ld8zG
c6WT+jS+34IfUZ9ulz/tP8/5Eo025+14/lk79Snx0OT7Iv/yHp43Js8wRXt2
UrfJV0T9nWd83oaPeE181vL+YpNipD6Vr+D5SP+FPA3vnzzVPjq3J+8B3zfb
TQ66yle8g94o5aMoP3qwpD6N5yyv73t0avpUfsX9StOT7+umPpWviPtu53kZ
0e/g+z4s8BrE94c68IYfeR4D/oI+fW552a8s3dSn/eQ/NH3019AO9cW65v2d
1PXyFerT6N+d8tfRf/DfTtmM/uV5FalPoz3lR3jf49jyEk/f3Ul9GvZ2Up+G
vSc8j+7ef5L6NNq/gz+jT5924R+fR3/qyZPw/4+YlVchvv+B/MgY/iTvgR58
Ks/BuqQn33Ibe54Hcpb9gi7+7L7VTurTuG8n9WnYlSfxXE3Tc50sP6LekR+R
73uP++Xc3yv/B3CLMXs=
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`primaryDisplaySize$$ = {380, 380}, $CellContext`qLoc$$ = {
    2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {10, 15, 
    20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
    0.2, $CellContext`springColors$$ = {
     RGBColor[
      Rational[2, 3], 0.33333333333333337`, 0], 
     RGBColor[0, 
      Rational[2, 3], 0], 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
     RGBColor[0, 
      Rational[2, 3], 
      Rational[2, 3]], 
     RGBColor[
      Rational[2, 3], 
      Rational[2, 3], 0]}, $CellContext`springColorsByN$$ = {{-1, 0} -> 
     RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`tabNumber$$ = 3, $CellContext`tau$$ = 
    0, $CellContext`textDisOffset$$ = {0.25, 0.25}, $CellContext`tick$$ = 
    False, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 0.8}, {0.9, 0.7}, {0.4, 
    1.2}, {1.3, 1.4}}, $CellContext`windowHalfWidth$$ = 3, Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        If[$CellContext`rawNumberOfMasses$$ == 1, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; \
$CellContext`dynamicsControls], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Row[$CellContext`tabNumber$$ = $CellContext`freqTab$$; \
$CellContext`freqControls], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; \
{$CellContext`massSetter, $CellContext`m2Setter, $CellContext`km1, \
$CellContext`km2, $CellContext`km3, $CellContext`km4}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}], 
         TabView[{
          "dynamics" -> 
           
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; \
$CellContext`dynamicsControls], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Row[$CellContext`tabNumber$$ = $CellContext`freqTab$$; \
$CellContext`freqControls], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; \
{$CellContext`massSetter, $CellContext`m2Setter, $CellContext`km1, \
$CellContext`km2, $CellContext`km3, $CellContext`km4, $CellContext`km5a, \
$CellContext`km5b}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tau$$], 0}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`meshSize$$], 8}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`minSquaredDistanceFromOrigin$$], 0.1}, 0}, {{
       Hold[$CellContext`minAngleBetweenLatticeVectors$$], Rational[1, 6] Pi},
       0}, {{
       Hold[$CellContext`locDefault$$], {{0.1, 1.3}, {1.9, 0.8}}}, 0}, {{
       Hold[$CellContext`defaultMass$$], 20}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`springColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}, {{
       Hold[$CellContext`kDefaults$$], {0.25, 0.25, 0.25, 0.25, 0.25}}, 0}, {{
       Hold[$CellContext`kMin$$], 0.05}, 0}, {{
       Hold[$CellContext`kMax$$], 1}, 0}, {{
       Hold[$CellContext`mMax$$], 30}, 0}, {{
       Hold[$CellContext`windowHalfWidth$$], 3}, 0}, {{
       Hold[$CellContext`springColors$$], {
        RGBColor[
         Rational[2, 3], 0.33333333333333337`, 0], 
        RGBColor[0, 
         Rational[2, 3], 0], 
        RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
        RGBColor[0, 
         Rational[2, 3], 
         Rational[2, 3]], 
        RGBColor[
         Rational[2, 3], 
         Rational[2, 3], 0]}}, 0}, {{
       Hold[$CellContext`primaryDisplaySize$$], {380, 380}}, 0}, {{
       Hold[$CellContext`textDisOffset$$], {0.25, 0.25}}, 0}, {{
       Hold[$CellContext`nArray$$], {{1, 0}, {0, 1}, {1, 1}, {1, -1}}}, 0}}, 
    Typeset`size$$ = Automatic, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`defaultMass$$ = 
        20, $CellContext`dynamics$$ = {}, $CellContext`dynPlot$$ = {}, \
$CellContext`dynTab$$ = 
        1, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
        0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
        0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`kDefaults$$ = {0.25, 
         0.25, 0.25, 0.25, 0.25}, $CellContext`kMax$$ = 
        1, $CellContext`kMin$$ = 
        0.05, $CellContext`locDefault$$ = {{0.1, 1.3}, {1.9, 
         0.8}}, $CellContext`m1Sel$$ = 1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`meshSize$$ = 
        8, $CellContext`minAngleBetweenLatticeVectors$$ = 
        Rational[1, 6] Pi, $CellContext`minSquaredDistanceFromOrigin$$ = 
        0.1, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
         1.4}}, $CellContext`mMax$$ = 30, $CellContext`moSel$$ = 
        2, $CellContext`nArray$$ = {{1, 0}, {0, 1}, {1, 1}, {
         1, -1}}, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`primaryDisplaySize$$ = {380, 
         380}, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`springColors$$ = {
          RGBColor[
           Rational[2, 3], 0.33333333333333337`, 0], 
          RGBColor[0, 
           Rational[2, 3], 0], 
          RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
          RGBColor[0, 
           Rational[2, 3], 
           Rational[2, 3]], 
          RGBColor[
           Rational[2, 3], 
           Rational[2, 3], 
           0]}, $CellContext`springColorsByN$$ = {}, $CellContext`tabNumber$$ = 
        1, $CellContext`tau$$ = 
        0, $CellContext`textDisOffset$$ = {0.25, 0.25}, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}, $CellContext`windowHalfWidth$$ = 3}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ($CellContext`tick$$; Dynamic[
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics; $CellContext`bRefreshDynamics$$ = 
             False; $CellContext`bRefreshDynPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`showDynamics; $CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynamics[$CellContext`tau$$], 
          
          If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc; $CellContext`bRefreshFreqPlot$$ = False, 
             Null]; $CellContext`showFreqPlot, \
$CellContext`couplingLocator]]]), "Specifications" :> {
        Dynamic[
         If[$CellContext`rawNumberOfMasses$$ == 1, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; \
$CellContext`dynamicsControls], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Row[$CellContext`tabNumber$$ = $CellContext`freqTab$$; \
$CellContext`freqControls], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; \
{$CellContext`massSetter, $CellContext`m2Setter, $CellContext`km1, \
$CellContext`km2, $CellContext`km3, $CellContext`km4}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}], 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; \
$CellContext`dynamicsControls], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Row[$CellContext`tabNumber$$ = $CellContext`freqTab$$; \
$CellContext`freqControls], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; \
{$CellContext`massSetter, $CellContext`m2Setter, $CellContext`km1, \
$CellContext`km2, $CellContext`km3, $CellContext`km4, $CellContext`km5a, \
$CellContext`km5b}]}, 
           Dynamic[$CellContext`tabNumber$$], 
           ImageSize -> {250, 350}]]], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tau$$, 0}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`meshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`minSquaredDistanceFromOrigin$$, 0.1}, 0, 
         ControlType -> 
         None}, {{$CellContext`minAngleBetweenLatticeVectors$$, 
          Rational[1, 6] Pi}, 0, ControlType -> 
         None}, {{$CellContext`locDefault$$, {{0.1, 1.3}, {1.9, 0.8}}}, 0, 
         ControlType -> None}, {{$CellContext`defaultMass$$, 20}, 0, 
         ControlType -> None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, 
         ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`springColorsByN$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`kDefaults$$, {0.25, 0.25, 0.25, 0.25, 0.25}}, 
         0, ControlType -> None}, {{$CellContext`kMin$$, 0.05}, 0, 
         ControlType -> None}, {{$CellContext`kMax$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mMax$$, 30}, 0, ControlType -> 
         None}, {{$CellContext`windowHalfWidth$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`springColors$$, {
           RGBColor[
            Rational[2, 3], 0.33333333333333337`, 0], 
           RGBColor[0, 
            Rational[2, 3], 0], 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
           RGBColor[0, 
            Rational[2, 3], 
            Rational[2, 3]], 
           RGBColor[
            Rational[2, 3], 
            Rational[2, 3], 0]}}, 0, ControlType -> 
         None}, {{$CellContext`primaryDisplaySize$$, {380, 380}}, 0, 
         ControlType -> None}, {{$CellContext`textDisOffset$$, {0.25, 0.25}}, 
         0, ControlType -> 
         None}, {{$CellContext`nArray$$, {{1, 0}, {0, 1}, {1, 1}, {1, -1}}}, 
         0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{915., {292., 299.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({{$CellContext`dynamicsMatrix := 
         Module[{$CellContext`cd$, $CellContext`r$, $CellContext`res$, \
$CellContext`epsilon$, $CellContext`m$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$}, $CellContext`cd$ = SplitBy[
              Sort[
               Flatten[FE`couplingData$$31, 2]], 
              First]; {$CellContext`r$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
            ReplaceAll[{"latticeBasis", "mScalarArray", "numberOfMasses"}, 
              FE`parameterLocatorDependencies$$31]; $CellContext`epsilon$ = 
            Partition[
              IdentityMatrix[2 $CellContext`numberOfMasses$], 
              2]; $CellContext`res$ = Partition[
              Flatten[
               Table[
                Total[
                 Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r$, 
                   
                   Part[$CellContext`mScalarArray$, $CellContext`i], \
$CellContext`epsilon$, $CellContext`mScalarArray$]& , 
                  
                  Part[$CellContext`cd$, $CellContext`i]]], {$CellContext`i, \
$CellContext`numberOfMasses$}]], 2 $CellContext`numberOfMasses$]; 
           ReplaceAll[$CellContext`res$, $CellContext`qVec -> #]& ], 
         Attributes[$CellContext`r$] = {Temporary}, 
         FE`couplingData$$31 = {{{{
             1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{
              0.5, -0.5}, {-0.5, 0.5}}}, {
             1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 
              1.4}, {{0.24615384615384625`, 0.4307692307692308}, {
              0.4307692307692308, 0.7538461538461539}}}}, {{
             2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{
              0.5, -0.5}, {-0.5, 0.5}}}, {
             2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 
              1.4}, {{0.9529411764705882, 0.21176470588235285`}, {
              0.21176470588235285`, 0.047058823529411736`}}}}, {{
             3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 
              1.4}, {{0.24615384615384625`, 0.4307692307692308}, {
              0.4307692307692308, 0.7538461538461539}}}, {
             3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 
              1.4}, {{0.9529411764705882, 0.21176470588235285`}, {
              0.21176470588235285`, 0.047058823529411736`}}}}}, {{{
             1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
              0.09999999999999987}, {{
              0.19999999999999987`, -0.3999999999999999}, \
{-0.3999999999999999, 0.8}}}, {
             1, 2, {-1, 0}, 0.25, 1., {0.9, 0.7}, {
              0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {
              0.48, 0.6400000000000001}}}, {
             1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
              0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
              0.9941176470588234}}}, {
             1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
              0.8, -0.6000000000000001}, {{0.005882352941176467, 
              0.0764705882352941}, {0.0764705882352941, 
              0.9941176470588234}}}, {
             1, 2, {-1, 1}, 0.25, 1.7852959999999995`, {0.9, 0.7}, {
              2.2359999999999998`, 0.6800000000000002}, {{
              0.9997759475179465, -0.014966705801166713`}, \
{-0.014966705801166713`, 0.00022405248205339165`}}}, {
             1, 3, {0, -1}, 0.25, 2.3656960000000002`, {0.9, 
              0.7}, {-0.6359999999999999, 0.6199999999999997}, {{
              0.9972946650795368, 0.05194243047289273}, {0.05194243047289273, 
              0.002705334920463173}}}, {
             1, 2, {1, 0}, 0.25, 3.4000000000000004`, {0.9, 0.7}, {0.5, 
              2.5}, {{0.047058823529411764`, -0.21176470588235294`}, \
{-0.21176470588235294`, 0.9529411764705882}}}, {
             1, 3, {1, -1}, 0.25, 3.5504959999999994`, {0.9, 
              0.7}, {-0.5359999999999998, 1.9199999999999997`}, {{
              0.5807909655439691, -0.4934296503925085}, {-0.4934296503925085, 
              0.4192090344560309}}}, {
             1, 1, {1, -1}, 0.25, 3.6412959999999996`, {0.9, 
              0.7}, {-0.9359999999999998, 1.2199999999999998`}, {{
              0.9257407252802299, -0.2621923622798036}, {-0.2621923622798036, 
              0.07425927471977006}}}, {
             1, 1, {-1, 1}, 0.25, 3.6412959999999996`, {0.9, 0.7}, {
              2.7359999999999998`, 0.18000000000000016`}, {{
              0.9257407252802299, -0.2621923622798036}, {-0.2621923622798036, 
              0.07425927471977006}}}, {
             1, 2, {0, 1}, 0.25, 3.7004960000000007`, {0.9, 0.7}, {2.336, 
              1.9800000000000002`}, {{0.5572485418170968, 
              0.49671179214894434`}, {0.49671179214894434`, 
              0.4427514581829031}}}, {
             1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 
              2.7}, {{0.05882352941176473, 0.23529411764705888`}, {
              0.23529411764705888`, 0.9411764705882353}}}, {
             1, 1, {0, 1}, 0.25, 4.356496, {0.9, 0.7}, {2.836, 
              1.4800000000000002`}, {{0.8603464802905821, 
              0.3466271976377347}, {0.3466271976377347, 
              0.13965351970941794`}}}, {
             1, 1, {0, -1}, 0.25, 4.356496, {0.9, 
              0.7}, {-1.036, -0.0800000000000003}, {{0.8603464802905821, 
              0.3466271976377347}, {0.3466271976377347, 
              0.13965351970941794`}}}, {
             1, 3, {-1, -1}, 0.25, 4.580896000000001, {0.9, 
              0.7}, {-0.736, -0.6800000000000002}, {{0.5842734696443664, 
              0.49284681424769305`}, {0.49284681424769305`, 
              0.4157265303556335}}}, {
             1, 3, {-1, 1}, 0.25, 5.032096000000001, {0.9, 0.7}, {3.136, 
              0.8800000000000001}, {{0.9935613311033813, 
              0.07998257584910946}, {0.07998257584910946, 
              0.006438668896618835}}}, {
             1, 2, {0, -1}, 0.25, 6.012496, {0.9, 0.7}, {-1.536, 
              0.4199999999999997}, {{0.9869604902855652, 
              0.11344373451558232`}, {0.11344373451558232`, 
              0.01303950971443476}}}, {
             1, 2, {1, -1}, 0.25, 6.497295999999999, {0.9, 0.7}, {-1.436, 
              1.7199999999999998`}, {{
              0.8398718482273242, -0.3667248652362459}, {-0.3667248652362459, 
              0.16012815177267584`}}}, {
             1, 3, {0, 1}, 0.25, 7.647296000000001, {0.9, 0.7}, {
              3.2359999999999998`, 2.18}, {{0.7135719605988835, 
              0.45209182435203243`}, {0.45209182435203243`, 
              0.2864280394011165}}}, {
             1, 1, {1, 1}, 0.25, 8.471696000000001, {0.9, 0.7}, {2.936, 
              2.7800000000000002`}, {{0.48931123118676584`, 
              0.4998857371652618}, {0.4998857371652618, 
              0.5106887688132341}}}, {
             1, 1, {-1, -1}, 0.25, 8.471696000000001, {0.9, 
              0.7}, {-1.1360000000000001`, -1.3800000000000001`}, {{
              0.48931123118676584`, 0.4998857371652618}, {0.4998857371652618, 
              0.5106887688132341}}}, {
             1, 2, {-1, -1}, 0.25, 8.927696000000001, {0.9, 
              0.7}, {-1.6360000000000001`, -0.8800000000000001}, {{
              0.7203757834048112, 0.44881456537050546`}, {
              0.44881456537050546`, 0.27962421659518877`}}}, {
             1, 2, {1, 1}, 0.25, 9.015696, {0.9, 0.7}, {2.436, 
              3.2800000000000002`}, {{0.26168761679630725`, 
              0.43955341883754734`}, {0.43955341883754734`, 
              0.7383123832036929}}}, {
             1, 3, {1, 1}, 0.25, 13.662496000000004`, {0.9, 0.7}, {
              3.3360000000000003`, 3.48}, {{0.43433469257740315`, 
              0.4956693125472827}, {0.4956693125472827, 
              0.5656653074225968}}}}, {{
             2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {
              0.48, 0.6400000000000001}}}, {
             2, 3, {1, -1}, 0.25, 1.3944959999999993`, {0.4, 
              1.2}, {-0.5359999999999998, 1.9199999999999997`}, {{
              0.6282527881040892, -0.483271375464684}, {-0.483271375464684, 
              0.3717472118959107}}}, {
             2, 3, {0, -1}, 0.25, 1.4096960000000003`, {0.4, 
              1.2}, {-0.6359999999999999, 0.6199999999999997}, {{
              0.7613669897623316, 0.4262479286314214}, {0.4262479286314214, 
              0.2386330102376685}}}, {
             2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
              2.5}, {{0.005882352941176467, 0.0764705882352941}, {
              0.0764705882352941, 0.9941176470588234}}}, {
             2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
              0.30000000000000004`, -0.10000000000000009`}, {{
              0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
              0.9941176470588234}}}, {
             2, 1, {1, -1}, 0.25, 1.7852959999999995`, {0.4, 
              1.2}, {-0.9359999999999998, 1.2199999999999998`}, {{
              0.9997759475179465, -0.014966705801166713`}, \
{-0.014966705801166713`, 0.00022405248205339165`}}}, {
             2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 
              0.09999999999999987}, {{
              0.34594594594594585`, -0.4756756756756756}, \
{-0.4756756756756756, 0.654054054054054}}}, {
             2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
              1.4000000000000001`, 2.7}, {{0.3076923076923076, 
              0.46153846153846145`}, {0.46153846153846145`, 
              0.6923076923076924}}}, {
             2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
              0.8, -0.6000000000000001}, {{
              0.047058823529411764`, -0.21176470588235294`}, \
{-0.21176470588235294`, 0.9529411764705882}}}, {
             2, 2, {1, -1}, 0.25, 3.6412959999999996`, {0.4, 1.2}, {-1.436, 
              1.7199999999999998`}, {{
              0.9257407252802299, -0.2621923622798036}, {-0.2621923622798036, 
              0.07425927471977006}}}, {
             2, 2, {-1, 1}, 0.25, 3.6412959999999996`, {0.4, 1.2}, {
              2.2359999999999998`, 0.6800000000000002}, {{
              0.9257407252802299, -0.2621923622798036}, {-0.2621923622798036, 
              0.07425927471977006}}}, {
             2, 1, {0, -1}, 0.25, 3.7004960000000007`, {0.4, 
              1.2}, {-1.036, -0.0800000000000003}, {{0.5572485418170968, 
              0.49671179214894434`}, {0.49671179214894434`, 
              0.4427514581829031}}}, {
             2, 2, {0, 1}, 0.25, 4.356496, {0.4, 1.2}, {2.336, 
              1.9800000000000002`}, {{0.8603464802905821, 
              0.3466271976377347}, {0.3466271976377347, 
              0.13965351970941794`}}}, {
             2, 2, {0, -1}, 0.25, 4.356496, {0.4, 1.2}, {-1.536, 
              0.4199999999999997}, {{0.8603464802905821, 
              0.3466271976377347}, {0.3466271976377347, 
              0.13965351970941794`}}}, {
             2, 3, {-1, -1}, 0.25, 4.824896000000001, {0.4, 
              1.2}, {-0.736, -0.6800000000000002}, {{0.26746607595272526`, 
              0.4426375200626086}, {0.4426375200626086, 
              0.7325339240472749}}}, {
             2, 1, {0, 1}, 0.25, 6.012496, {0.4, 1.2}, {2.836, 
              1.4800000000000002`}, {{0.9869604902855652, 
              0.11344373451558232`}, {0.11344373451558232`, 
              0.01303950971443476}}}, {
             2, 1, {-1, 1}, 0.25, 6.497295999999999, {0.4, 1.2}, {
              2.7359999999999998`, 0.18000000000000016`}, {{
              0.8398718482273242, -0.3667248652362459}, {-0.3667248652362459, 
              0.16012815177267584`}}}, {
             2, 3, {-1, 1}, 0.25, 7.588096000000001, {0.4, 1.2}, {3.136, 
              0.8800000000000001}, {{
              0.9865051786376978, -0.1153807226476839}, {-0.1153807226476839, 
              0.013494821362302201`}}}, {
             2, 2, {1, 1}, 0.25, 8.471696000000001, {0.4, 1.2}, {2.436, 
              3.2800000000000002`}, {{0.48931123118676584`, 
              0.4998857371652618}, {0.4998857371652618, 
              0.5106887688132341}}}, {
             2, 2, {-1, -1}, 0.25, 8.471696000000001, {0.4, 
              1.2}, {-1.6360000000000001`, -0.8800000000000001}, {{
              0.48931123118676584`, 0.4998857371652618}, {0.4998857371652618, 
              0.5106887688132341}}}, {
             2, 1, {1, 1}, 0.25, 8.927696000000001, {0.4, 1.2}, {2.936, 
              2.7800000000000002`}, {{0.7203757834048112, 
              0.44881456537050546`}, {0.44881456537050546`, 
              0.27962421659518877`}}}, {
             2, 3, {0, 1}, 0.25, 9.003295999999999, {0.4, 1.2}, {
              3.2359999999999998`, 2.18}, {{0.893327954562418, 
              0.3086958376132475}, {0.3086958376132475, 
              0.10667204543758202`}}}, {
             2, 1, {-1, -1}, 0.25, 9.015696, {0.4, 
              1.2}, {-1.1360000000000001`, -1.3800000000000001`}, {{
              0.26168761679630725`, 0.43955341883754734`}, {
              0.43955341883754734`, 0.7383123832036929}}}, {
             2, 3, {1, 1}, 0.25, 13.818496000000003`, {0.4, 1.2}, {
              3.3360000000000003`, 3.48}, {{0.6238085534055225, 
              0.48442898561464287`}, {0.48442898561464287`, 
              0.37619144659447745`}}}}, {{
             3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
              0.19999999999999998`, -0.39999999999999997`}, \
{-0.39999999999999997`, 0.7999999999999999}}}, {
             3, 2, {-1, 1}, 0.25, 1.394495999999999, {1.3, 1.4}, {
              2.2359999999999998`, 0.6800000000000002}, {{
              0.6282527881040892, -0.48327137546468396`}, \
{-0.48327137546468396`, 0.37174721189591076`}}}, {
             3, 2, {0, 1}, 0.25, 1.4096959999999998`, {1.3, 1.4}, {2.336, 
              1.9800000000000002`}, {{0.7613669897623316, 
              0.42624792863142147`}, {0.42624792863142147`, 
              0.23863301023766856`}}}, {
             3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
              1.4000000000000001`, 2.7}, {{0.005882352941176479, 
              0.07647058823529418}, {0.07647058823529418, 
              0.9941176470588236}}}, {
             3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
              0.09999999999999987}, {{0.00588235294117648, 
              0.07647058823529418}, {0.07647058823529418, 
              0.9941176470588234}}}, {
             3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 
              2.5}, {{0.34594594594594597`, -0.47567567567567565`}, \
{-0.47567567567567565`, 0.654054054054054}}}, {
             3, 1, {0, 1}, 0.25, 2.365696, {1.3, 1.4}, {2.836, 
              1.4800000000000002`}, {{0.9972946650795368, 
              0.05194243047289274}, {0.05194243047289274, 
              0.0027053349204631738`}}}, {
             3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
              0.30000000000000004`, -0.10000000000000009`}, {{
              0.3076923076923077, 0.46153846153846156`}, {
              0.46153846153846156`, 0.6923076923076923}}}, {
             3, 1, {-1, 1}, 0.25, 3.5504959999999985`, {1.3, 1.4}, {
              2.7359999999999998`, 0.18000000000000016`}, {{
              0.580790965543969, -0.4934296503925086}, {-0.4934296503925086, 
              0.41920903445603097`}}}, {
             3, 3, {1, -1}, 0.25, 3.6412959999999996`, {1.3, 
              1.4}, {-0.5359999999999998, 1.9199999999999997`}, {{
              0.9257407252802299, -0.2621923622798036}, {-0.2621923622798036, 
              0.07425927471977006}}}, {
             3, 3, {-1, 1}, 0.25, 3.641296, {1.3, 1.4}, {3.136, 
              0.8800000000000001}, {{
              0.9257407252802299, -0.2621923622798036}, {-0.2621923622798036, 
              0.07425927471977005}}}, {
             3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {
              0.8, -0.6000000000000001}, {{0.058823529411764705`, 
              0.23529411764705882`}, {0.23529411764705882`, 
              0.9411764705882353}}}, {
             3, 3, {0, 1}, 0.25, 4.356495999999999, {1.3, 1.4}, {
              3.2359999999999998`, 2.18}, {{0.8603464802905821, 
              0.3466271976377347}, {0.3466271976377347, 
              0.13965351970941797`}}}, {
             3, 3, {0, -1}, 0.25, 4.356496, {1.3, 1.4}, {-0.6359999999999999, 
              0.6199999999999997}, {{0.8603464802905821, 
              0.3466271976377347}, {0.3466271976377347, 
              0.13965351970941794`}}}, {
             3, 1, {1, 1}, 0.25, 4.580896000000001, {1.3, 1.4}, {2.936, 
              2.7800000000000002`}, {{0.5842734696443663, 
              0.49284681424769305`}, {0.49284681424769305`, 
              0.4157265303556336}}}, {
             3, 2, {1, 1}, 0.25, 4.824896000000001, {1.3, 1.4}, {2.436, 
              3.2800000000000002`}, {{0.26746607595272515`, 
              0.4426375200626086}, {0.4426375200626086, 
              0.7325339240472749}}}, {
             3, 1, {1, -1}, 0.25, 5.032095999999999, {1.3, 
              1.4}, {-0.9359999999999998, 1.2199999999999998`}, {{
              0.9935613311033812, 0.07998257584910948}, {0.07998257584910948, 
              0.006438668896618837}}}, {
             3, 2, {1, -1}, 0.25, 7.588095999999999, {1.3, 1.4}, {-1.436, 
              1.7199999999999998`}, {{
              0.9865051786376978, -0.1153807226476839}, {-0.1153807226476839, 
              0.013494821362302204`}}}, {
             3, 1, {0, -1}, 0.25, 7.6472960000000025`, {1.3, 
              1.4}, {-1.036, -0.0800000000000003}, {{0.7135719605988836, 
              0.4520918243520324}, {0.4520918243520324, 
              0.28642803940111644`}}}, {
             3, 3, {1, 1}, 0.25, 8.471696000000001, {1.3, 1.4}, {
              3.3360000000000003`, 3.48}, {{0.48931123118676606`, 
              0.4998857371652619}, {0.4998857371652619, 
              0.5106887688132341}}}, {
             3, 3, {-1, -1}, 0.25, 8.471696000000001, {1.3, 
              1.4}, {-0.736, -0.6800000000000002}, {{0.48931123118676584`, 
              0.4998857371652618}, {0.4998857371652618, 
              0.5106887688132341}}}, {
             3, 2, {0, -1}, 0.25, 9.003296000000002, {1.3, 1.4}, {-1.536, 
              0.4199999999999997}, {{0.8933279545624181, 
              0.3086958376132474}, {0.3086958376132474, 
              0.10667204543758198`}}}, {
             3, 1, {-1, -1}, 0.25, 13.662496, {1.3, 
              1.4}, {-1.1360000000000001`, -1.3800000000000001`}, {{
              0.43433469257740304`, 0.4956693125472827}, {0.4956693125472827, 
              0.5656653074225969}}}, {
             3, 2, {-1, -1}, 0.25, 13.818496000000001`, {1.3, 
              1.4}, {-1.6360000000000001`, -0.8800000000000001}, {{
              0.6238085534055225, 0.48442898561464287`}, {
              0.48442898561464287`, 0.3761914465944775}}}}}}, 
         FE`parameterLocatorDependencies$$31 = {
          "mScalarArray" -> {13.100000000000001`, 20, 20}, "numberOfMasses" -> 
           3, "latticeBasis" -> {{0.1, 1.3}, {1.936, 0.7800000000000002}}, 
           "latticeNorms" -> {1.3038404810405297`, 2.0872220773075396`}, 
           "latticeUnitVectors" -> {{0.07669649888473705, 
            0.9970544855015816}, {0.9275486403906708, 0.3737024480912828}}, 
           "numberLatticeLinesToDisplay" -> {30, 4}, 
           "reciprocalBasis" -> {{-0.3198294243070363, 0.7938330326390027}, {
            0.5330490405117271, -0.04100377234705593}}, 
           "reciprocalNorms" -> {0.8558397889566752, 0.5346237826146177}, 
           "qMaxVec" -> {5.37739998727226, 3.3591402957929395`}, 
           "mObliqueComponents" -> {{0.2678366409709692, 
            0.4510414958176152}, {0.8246678694439887, 0.16401508938822373`}, {
            0.6955879940954566, 0.6355584713793669}}, 
           "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
           "pointsDataTable" -> CompressedData["
1:eJxdnAmUZWV5rqvnoXqo4dQ8jz131zxX7f+cU30R5SY2mDgEcVheZIUEOiQm
rIZwiaH1BogNSecao6KIrKCYluCELHH/F1BusghKLtCiaGwZojYQoGkaugHv
Pvt73n/V3r0WnlWeqnP2fve7v394n/31fPDSc//HyqqqqhXJf/PJf+uS/5Yn
/z1566fv776jz7+y9fxD935j0V9S95f+X2/u8ufe1Xnw+L5F3/j4Q6fOe7LJ
Hznr2IHC82X/3c+17vlpf41ff/SW/fPXlv2/PVj5V+UvrPwbLPsHb977zRNv
3B/fe7LygSU/OLz2K+3veT2qfNpdF5R8+bo/+M8zX9roDhSSTzxd9Kev+v3v
/MnfNrrHko9b/8miv+Oyi2587so+f0PlAzYv+spff2i2yz+7Lzmg28u83+Tf
cqzyCWX/z+nPm/0Xkz8/+mTJL6tK//n0f68u+eYvv/jv//2Dd8TJwZzc2l7y
3/3X9ACj9PTuKvrN75r++v/9002ucjgH3lH073/6h70/ea3RVT7ulhec//No
/IK7z+7zlbM5eVHZf6Hy1490+spfd64q+7duWL7j441NPj2cm0v+6VTPTX4+
FajkL0qFeTP+VOXf40Vf8x+//defvOQLUSrPR4r+XR+aTf6f30SV0zteW/RP
9K/+i78rb3b/VNH7iPPff9vkXxXf3+TSj3ur82en39fnpe9M+nmdvgt97Xo2
+ivQtym9fhv9UfR9KL1er8ej6b+iP5z89mUX/Z+oIs/5P3D+tfR6VLnK6R28
2PlHL/9VcglrXHo4a5zfdedn/+sfv9/kTP8If/R66ftI+vud/tvoe2WqX6Nv
QF87/o3+j9B3LD2OM3Hqo+ud/1ByNaPxh6Jt6Qfq/Je56tRvkZ9Nz7fG3Z+e
/4I/3LzydzftanZXpuc7z/n3mp8Tfc3PHebnRF873gbz8xFd3w1e+v5DeqFe
s+N5MPIVt6/+i0cju96R/9v0+5Y7u74L+KHG2ffN4+dmZ58/h197zc+Jvubn
DvNzoq+932B+TvQ1P1f7s9F3eWrkV+PU11cv+AN/V7mDfhKZvvP+falflzvT
c47Pr3XbU/3m8HOz+0Xl4z4wy/n2eulrx9/upa/5ucHfh77m5/Ve+pqfX4nt
us37F9+oXPFjkZ3PnN+Z+mOFuzW9gWbRv9a9t/J1T8xwPVtc6ofCDH7o9R9D
X/Nzu19AX7ueBX8Kfc3P6/xX0df8/HL84cphPTPrB9J681SU3g+ds/h5pUv9
/84Z/Fzn0utxaBo/t5ifH5jCHz1e+pqf2730NT8X0G+O41/npa/pciI2H834
d6f3939Gqf8enub8V5mf10/j5zqX6l2aws+tLr1/D0xy/j1e+pqebVbvEn3t
eOu99LXru9ZLXzuOF83P50z7ypf9pf+1+fngFH5ebX6+ZxI/1JmfT07g51bz
8+4J/Nrjpa/5rc1LX3u/3h9CX/PzGi99rTy/ENvrlI/Tevyc1eOpSfy62vy8
f4LPr3ep3reN836rS2+PY2Ocb48/D33T6v5Iq5e+dn3qvfQ1PVebnxN97T5/
1vz8NZ3vC+bn4+P4Y435uW/cX5rqX29+Pn/MP5Bezzbz8+FRvq/H/Jzoa9e3
1fx8j65nnfk50df8vMr8nOj76fR6/cr8fOG4/5v0+rxkfr5pDD+vNT8fHcXP
BfPz5lGOt436PII/us3Pib7m51Yvfc3PdV762v2/yvyc6GvH8Yz5uWWM+/uE
+XnfKH5eR30e8XPp+RbMz/cO4+d28/PpIc6/20tf83OL+TnR14631ktfu74r
vfS1cetJ6vMI33+S+jyCn9dTn4fxc4H6PMT1bXfp7Xv+Hvza7aWv+a3FS197
v9b8nOhrfl7hpa/NN35ufr56GH++wvxiiPq83urvsT18foMz/Xbz++3OxvOd
nG+3+TnR1/zc7KWv+avWS1/Tczn1eYj7/XHqs8731ehH6fnsxh/VzsaXXfi5
wd2dHu8O/NzB+LGd7+umPo/g52bqs76/hvo8hJ+X+QvQdyI9jv8XW53ehZ9P
R/b3O/HzBmf1fDt+bnTd6QXdxvF2UK+34L8u6vMQfm720tf8XIN+u/HzMn8/
+n4m1edf0GcHn3cmsnq6DT9tZHzaip8bnd3Pg/i5k/rYz+93eelrftb8dBfH
v5nj3cH1rfLS9+/T4/k248VWPu+NKJVn/Rb8vInxYAA/Nzq7f/q4vp34uRc/
dfoIfc1vTf4O9P1A+v4mL33t99+MpW8V/8zXg3o/uiy9ofr5eRN+7tXn4+ce
fb+z8aVLx+dvRV/zc6NvRF/Oz0tfzj+WvugTWR3qk37O9O6RvtS7bvzc5C5N
j7cDP3e5VK59rfivk/FhC35uZDwY4Pc3eum72/wRS187nn+JrP50c38s4/p0
cnw17vfS32/Dz81uLr0ezRxvl+tIBWrAfx1e+pqfG7305f7Azz3473T8cfQd
sfsLfdqpn8vQo0X3p42fWxvxc7OtJ9bXc3902/rr6Gb07/DS1/zM/DTRl/rB
+NGh+hKfi77Un8jqdJPqk62vCgW+r9alt+PJGvzc7L6S+rNa9c9dkn7+KtVH
L32pn4wPbfh5PfWoWfU37kJfc/PPI3uto56voN5uVH1316R6rlH9d/8tPd9l
Gh9cbXr8r8SMH8zPW/Bzgfu5UeMP/qrX+BT/CH0ZvyLTaZ3GN+7fFdTPWsav
07H5ucV9ND2+4zHjp3t7qsfXY/u+duZ7BfzMfDnR1/y8jvVONX4+EV+Gvhfa
+I5/3owZ/239d/zF2I6vzn0n1evR2Pzc6sbSA34iYn7h/ir9gxOR+bmNersR
Pxe4v9fgl7X4aRl+filuQF/T5VfRGOO8ff4qV5Pq+UDE/Ml9J62nz0fm51b3
41TfM5Edf4/bkR7fSmf6tzEercDP9b6Ivszv/LXoy/wvvgF9mR9G0on5I+PV
Kb6v3lk9W+7Mz63uHen9sNYxP3V/kxpuk2P+6l9AX+a3/ofoy/zXd6Mv8+P4
GvRl/sxrlTN/rnHm/9X8XG/r4QMbHPNz5qu1vN/D+wVn9aXV//Ix09f8XOfv
RF/WB/5R9GX9EG9FX9YX6LOe813LeFDjzM/1zOfrnfm5zd2Y6tHoWN+gZ4uz
72v1t6Mv6yNfQF/z8yr2p9Y61leMX5sc6y/8XOdYnzF+N3B8Bdanzc783M5+
QhvH2+OeTOtvpzM/t/g59DU/1/kD6Gt+WWn7H4m+W2z9GV+Bvuafl7nfm5z5
eZ2z+UCre8rWt4xnHc78zHz5QLczf/VSr3vxc4vfh76sr/1+9DU/r2D91ehO
2Po8PoK+dp1eYfxqR//1zCe6+L4Gxu8e/NxO/e5Dv15n86V+/Nxs+2GJvuw/
sD5t5v3lzFfb3FW2fxH/An3Nxq/i5x78Wc18r5efG5zV834+v4P9lQHe78X/
W/Bzs/8W+pqfa/xj6Mv+Ddev2zXa/k4sfdn/idKXT+l8Nzjz+wD+aHA2vx/E
zx2Mt1vRs5f12Ta+r9kfR1/2r/w16Gt+XualL/tfsfRlf4zxdBA/b2T82sLx
NXK/bcPPnczPtnO8vdx/O/FzE/7oxc81vhN9zc9VXvp+xvYHY+lrvnkd/2zF
zxsZv7bjZ81Pd+DnTurNLvzVx/7HHvzc5KXvT23/00vf99j+aHwW+g7Z/mn8
GPqan9+k/uxA/03Mz3fyfU34eTd+7uR+GkK/PtPv4SH82uilb63tD3vp623/
OD6Gvmttfznaj76qy/ayG39uxs97+LmJn4fwcxf7U8O834ffR/Bzo5e+7J97
6cv+OvVml3vE9t9ZP+zhelXZ6zlDLrb9e9Y3w/ijif25Yfzcxf09gp59dj0v
HsXPjV76/lkaCGxgfN/tPpGOD6fjavT9rcrlffqHkfS1+2sZr8NuoHK5r6th
f3KE69HMfHXUpXfzym72N0c53j7q5xh+bvCfQN8vVS5HzQb8PeReSuvfa7H0
/Wbl19921PKIRF8bJ5abj54ZcddX5H2xhvoyip+bbb76kTF3U+XPJ7uZn43j
r37z16oJ/NzA/TyMn6vt+iX6mp9Pxbegb2tFzjt/Gh1HX7vPV/A65l6qnM67
atk/GeP7WthfGXcPJ2696ve7zc/XTqBfP/VgEj8XLJ9I9DU/r/fS1/x8Mpa+
xbTc/YL9izF8vNJerx536Z9/t5Z6N4FfW5ztj0y69HQ+2039m+T9fvPzTVP4
ueClr/l5Hfv1Y/j55Vj6fqTy59HTkfQ1P6/kdQI/17H/Nok/WpjvTDmzX7f5
uW8aP/dTn6bxc8FLX/PzWi99zc8vmZ8Tff+x8ueX/TKSvubjVfbaMoWf66i/
U1yPVvYvp/FzD/V4huPtNz9PzeLnen8W+pqf13rpa35+MZa+P6n8+a3Hzc+J
vubn1dTFafxcx/7tDH5uZf01g5972P+dxV8D1Ms5/Fxvfk70NT+voR5Nua8l
bvhc63+ZnxN9N1b+/PHnzc+JvubjNfb6tRn8XM/8Rt/Xxv73HH7uoT7Po98A
9XkeP9eZnxN9a1JDrvbS93+m84vjsfT9fBrgvMj+8ix+XsvrHH6uZ/9/Dr+2
mZ8PzePnHurzAu8PUJ8j/Fznpa/5eRX1cca97YOVI/xlLH1nKl/3uZci6Ws+
Xkt9nsfPBerzAv5g/v7EAn7uoT5H+HnAxrtx52x/o85L3z9N/bzSS9+mdL7z
NPV53j1SuRzTL0fSl3UprwtuMPVzgfocuavS69HO8Tl3cernXvPv5Y7jHeB4
HX6u9dLX/LzS8rBE3yfPVP6fX8TS95KKXf/9ZCR9P8y6wvKdCD8zX36nw8/t
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
1FyOj5rP8VHzOT5qIcdHRYGPsnzWBT7Kvk88ifgo8STio+bc9Rk+at59KcNH
LeT4qIj8XXyUeJJW8nfxJD341wU+Kj3e9mLgo6Sv+Kgb0DfLRy24n8JHSV/x
UTZuuMBHWf7uAh9l+/ku8FGWvxcDH2Xz+2KOj1rI8VFR4KOkr/go6Ss+yvJ3
F/gomx8VAx9l+Xsx8FE23ykFPsry91Lgo6Sv+CjpKz5K+oqPkr7io+x582Lg
o9L1zZPiSdpYf5YCH5Wul28XTzLAfKQc+Kij6Cs+6gr0FR/Vhb7io+5DX/FR
6XUbLAU+yvxWCnxUut57vhT4KNvfKmf5qG+UAx8lfcVHHUNf8VEH0Vd81Db0
FR9lx1UKfFRaH4bKWT7qcDnLR71aDnyU+WMx8FFfRF/xUW9BX/FRz6Kv+Cjp
Kz4q9fMfl7N81NFylo+aWczyUTctZvmo5XsDH7UefcVHHUFf8VHnom+Gj/pG
OctHtSxm+ag/X8zyUccWs3zU3r1ZPuq2vU75qdWrRfY/6S/xapn9LvpLHFY/
DvpLDJXZD6e/xIMlf9HS/hIXlUJ+yvUO+Sl+YP+tmfGsGPLTU3a+7A93sJ9a
Zn+3weNHfxX5KX4lv3gtxs++QH6K39n/Xe64H9gPrGF8U3+OZsf9FPJTG1/K
ft3S/hK3l8iX9Pxeyd9Jforf4ACUnxb9leSnxjsVQ35q450L+WnB6gl5VLPq
OfvL9JdI9FV+Sr0K/SWoZ/4p8lPuR699Q+oh/Mgx1cvQX4J6GvpLUG+z/SUO
L4T8VPoqP6Weh/yUek++ss4zHpB/vcw+ooPXeCqy+ydi/3El99tCyE9vtPEo
5KdWL+dDfkq95ffbyXPEBxVUr7P5aaLv6NL8tCXy71man+5bCPkp851sf4l7
5/Bzq+ZLIT89hb7sP5ifE33ZnyB/i/DzWstbEn0/TX5q6555fy35qV3vefy8
mvFsDj/UOfs+9edoZb9uJuSn0ncd+an0/WfyU8Z7/LzGS99l5Kc2fs3BszxH
vxTxK6vdZTafC/mp7RfP4OdWzbfxM/lpom8mP030ZX+L/ek5/Ex+muj70NL+
EqM6X/pLXDyDn9doPaHnE7Xe4Hq2aT2SzU9XzWfz00Rf5afMF/Eb/SWOqB8I
/SWemcYP9JfonNbzmfC1U9n+Eocms/0lHpjI5qeJvo8u7S/xgviROi99M/0l
En15rpK8corPP6H1UMhPWY/q+VatVzl+PS83nu0vkeh76dL+Eom+7B9rvYGf
6S+R6KvnTlkPZvtLHJwI+anl1eN6/pf9IfEU7Vrvh/y0G32Vn0pf5afSV/np
2eibzU8nQn7KfkXITy1/GQv5qY2foyE/ZT8EP9Nf4mHxOfSXSPQlfzA/J/o+
tbS/RKLvZ8hPjdfS+b4KrzWKn6u136Pnx7UfpOfLtV+U7S+R6JvpL3HPeMhP
pS/5DbzWWMhPbdwY5fqcZr4/onyI+jwc8lP2y0J+yn6ans/30pd8inxSfFCN
l77KT6Uv/QGoz+JnzlCfh0N+yn6h8jXtJ3L8newP7VL/Ai99ye+89N1Nfsp+
EH6u8tJXuRf7dSE/ZT+P+qz9oN3KH3n+W/05Osmfd5CPdlKfR0J+Kn3JP730
fR/56dnoq+TU/Lwn5KfsJ+f6S+wI+anV3+2hv4SNZ1t1fNRn9Xtp1H4hefQm
8u096PlGfAp9byA/Nf/s5P4Q3yeeQ/0ltim/Zn0qvqKL/RjxFZ3U53B9tZ+q
66/9Vvkjfi/6ZvtLbJO/mH9uDf0l2E8P/SXIM0J/Cfbj5W8vffG/9ptDfsp+
tO6fWPoqPyUvCP0lbH9GfEWN8hzdv8p7Qn8J8grxE/hlu/gKxu9t+LnaS1/q
Syx9lZ/aa7/qE7xYX+gvQd4lPoT8uSv0l7D5bDt+Fk+3NfSX+Cr6Kj+Vvu8j
P5W+2fy0N/SXII8K/SVs/78j9Jf4guVZob+E5TdNGj8Yr9Tvhflgou9h8lPp
+wD5qfSF/4ketDwOP6/EL23ih5w9L9ksvsiR92n8dG+3PFDjq5e+yk+lL+Mz
17NL43d8N/oyviuv1PivvFjzA+bv9Zo/KG/2yk/N/+s1//DSl/mJl77KT8kL
Nb+JyWs1/2F/vqD5Efd3reZP8D0bNL9y9ZYXe+WnX7Y8GX6izUtf+DfG82b8
vAYep0HzP9bPdeLrqD+bNH+knqzV/JJ6vEzzT/cey9Nj5afWn+Pp+APkp9JX
+ekF6Kv8VPoyP44BxMQfRnruQfmp6XcmVn5q9/vzsfLT/cYbxMpPnzAeIYKP
9NIXftL/DvoeJj9tQN9PkJ/egb7KT8WNKj/9ufEU8Bz19Ac5GsF/OhtgX4qU
n1q/kDcj5afwHFofeXgPrZ/Q61TM+iqGF4nFbWjcYH3G+uHZSPkpPEqk/BRe
JeSn8CzkkS30HzlDf5U6346+yk9vQF/Wn/Ej6Kv8VLml8lO7P5ax/1VgfbWG
fK0dvmVjyE+NN6kjb2vxL6MvfLJ/3QooPM4KP4u+rM/jb6Ev63fxSOw/rWc8
rQ75KbwY+WM7+hVCfgpvFvLTbvRVfno9+io/hbdyV5OfwmPl8tOakJ/Cc4X8
FN4r5Kd2/VtCfmr3Uzt5drO/FH3h2/0/oe9h8tPj6NtMfgqvFvJT83ODu5L8
FN6N/a4G5vNt5Nfqf9aJnr3MZ7tDfvoo+io/lb7sb5GHFxz7X7H0VX5q/mnl
+mzErx25/hLduf4SPbn+En34uYn8v57fr4F3aQz9Jc5H378nPz2AvuovYTp1
5fpL9OBn9Zfo5Xw7xbPm+ksM4ucm8YTuZ+Sn+9H33eSn0reb/PQo+tIXCV/3
ov8m27842Ufe3CSeFz93ivcN+Sm8ashPr0HfGvLTfegbZ/pL9Lga8lPpm81P
B0J+avORwZCfmr+3hvwUHjrkp/DSXA/1l+hxi+Snx9F3S6a/RL/7Ifmp9FV+
Cm/seP6J8Us8h+bL2/Fzl3hx9OzDz7ty/SX62J/fwHxngOcdT8fS9xzyU+mr
/BQeO+SnNp/dEfJTeG7257vp97M7m59ODeFnnj9J9P0y+an0PUF+egR9v05+
Oo++F5Kfmk47Hc/PsR7ejZ+b9TxBNj+9Zyibnx4cxs8NXvr+jPxU+r6b/BRe
3LWTnx5FX54fxNd7svnpgSH83KLnLbL56fqRbH768EjIT6Wv8lPpG5OfwtO7
0tL8NNE3k59WDWfz0weGQ37K8yjZ/PSdo9n8tHMMPxe89F0kP30OfbeQn/K8
gfuTpflpom8mPz1nBD/X6Xkc/Nxi9eiJ0Wx/iVvEd9Bf4uLx0F/iAPoqP70X
fa8jP5W+t5Gf7kNfjaPGj42G/hI8rxT6S1h9Hw/56X57HifkpzwPhZ/pL5Ho
++Wl/SUSfU+Qnz6Gvj9e2l8i0fdC8lOb1o/h5zo9z4WfW/W8V7a/xPxktr/E
qin8TH6a6Puzpflpou+d5KfSd9PS/hKJvmPkpzYvm8j2lzg9gZ/bWH9NZvtL
XDsV8lOep8v2l0j0zfSXSPS9ivxU+t68tL9Eoq/yU8tTJrP9Jc6aCvkpzwtm
+0scnc72l7hpBj/TXyLRd3Fpf4lE398iP+V5sGx/iUTfTH+JB6fwc0HPS+Ln
NsbXmWx/ib5Z/DxAfZrFz/Q/S/RVfip9m8lPpa/y033oq/zUloMz+LlAP+cZ
rke7+fm22ZCf2ng9F/JTqx/z+LkWXmsKP6/U84LuGfLTx9D3D8lPO9H3QvJT
e53FzwU9b4uf9XzOXMhPeV435KdWPxbwM/0lEn2fWNpfItH3Q+Sn0ncN+elx
9B0jPzVea869SH5q9XkeP3eYn0sLIT+1+hGF/NTqcxT6S0hf9ZfgeVP3Ov0l
pO/N9JeQvubnDbwuhP4SPK8d+ktYfY5CfwmeR872lzjkQn8J6Vuiv4T0PUx/
CZ7XdbP0l5C+D9Ffgueps/0l1rvQX+KIPY/tpugvwfPa+Jn+EuNF/Fzjpa/6
S/C8snsX/SWk76P0l5C+mf4S5zj8TH+JOxzXQ/PBYra/xOXF0F/C8p4i/NNm
6vMCfq6iPkfwfXca35fo+4f0lziEvuLmbZnq8HMj42URPzNfvrsY+kvwvH/o
L2H9PErwanr+xLlv01/iq+jrl/aXSPRds7S/RKKv+Zn+Ep8q4mf6S7xRxM/0
l/hAKdtf4nviW7YwnyzDY23U8/6uKzXY66yvivCGXv0Y3NvTCWMV47X4lhp7
dSX83MT4LX6ly9EPAj+L7yvz/habb/+gDG+0Uf0Q3MG0oJ6J6UfhfpQa6t/U
r8J1phd4md2/H1U/kBrGU/Et9Od9q3iRLsbXMn6Gx6xdxM9b4O8W4cM2qF+E
O54uMF+z9USir/GPj9j9lOj76/QPlgd9bZyooV9KGT83wxeWOb5ueK1F/Ez/
qrsWOd4t8Fp78XO1vwV9z0sN+Kr180v0HUsXKD9hPC+7b6YTkOVBXxvXa3ld
xM/iH8SXdDPei29hPnjBXvy8lfn/Xvf/AReG5+8=
            "], "lineTable" -> {{
              
              Line[{{-10.744, -42.120000000000005`}, {-4.744, 
               35.879999999999995`}}], 
              Line[{{-8.808, -41.34}, {-2.808, 36.66}}], 
              Line[{{-6.872, -40.56}, {-0.8719999999999999, 37.44}}], 
              Line[{{-4.936, -39.78}, {1.064, 38.22}}], 
              Line[{{-3., -39.}, {3., 39.}}], 
              Line[{{-1.064, -38.22}, {4.936, 39.78}}], 
              Line[{{0.8719999999999999, -37.44}, {6.872, 40.56}}], 
              Line[{{2.808, -36.66}, {8.808, 41.34}}], 
              
              Line[{{4.744, -35.879999999999995`}, {10.744, 
               42.120000000000005`}}]}, {
              
              Line[{{-10.744, -42.120000000000005`}, {
               4.744, -35.879999999999995`}}], 
              
              Line[{{-10.644, -40.82000000000001}, {
               4.843999999999999, -34.58}}], 
              
              Line[{{-10.544, -39.519999999999996`}, {
               4.943999999999999, -33.28}}], 
              Line[{{-10.443999999999999`, -38.22}, {5.044, -31.98}}], 
              Line[{{-10.344, -36.92}, {5.144, -30.680000000000003`}}], 
              Line[{{-10.244, -35.620000000000005`}, {5.244, -29.38}}], 
              
              Line[{{-10.144, -34.32000000000001}, {
               5.343999999999999, -28.080000000000002`}}], 
              Line[{{-10.044, -33.02}, {5.443999999999999, -26.78}}], 
              
              Line[{{-9.943999999999999, -31.720000000000002`}, {
               5.544, -25.48}}], 
              Line[{{-9.844, -30.42}, {5.644, -24.18}}], 
              Line[{{-9.744, -29.12}, {5.744, -22.88}}], 
              Line[{{-9.644, -27.82}, {5.843999999999999, -21.58}}], 
              Line[{{-9.544, -26.520000000000003`}, {5.944, -20.28}}], 
              
              Line[{{-9.443999999999999, -25.220000000000002`}, {
               6.044, -18.98}}], 
              Line[{{-9.344, -23.92}, {6.144, -17.68}}], 
              Line[{{-9.244, -22.62}, {6.244, -16.38}}], 
              
              Line[{{-9.144, -21.32}, {
               6.343999999999999, -15.079999999999998`}}], 
              
              Line[{{-9.044, -20.020000000000003`}, {
               6.444, -13.780000000000001`}}], 
              
              Line[{{-8.943999999999999, -18.720000000000002`}, {
               6.544, -12.48}}], 
              Line[{{-8.844, -17.42}, {6.644, -11.18}}], 
              Line[{{-8.744, -16.12}, {6.744, -9.879999999999999}}], 
              
              Line[{{-8.644, -14.820000000000002`}, {
               6.843999999999999, -8.58}}], 
              
              Line[{{-8.544, -13.520000000000001`}, {
               6.944, -7.279999999999999}}], 
              
              Line[{{-8.443999999999999, -12.22}, {
               7.044, -5.979999999999999}}], 
              Line[{{-8.344, -10.920000000000002`}, {7.144, -4.68}}], 
              
              Line[{{-8.244, -9.620000000000001}, {
               7.244, -3.379999999999999}}], 
              
              Line[{{-8.144, -8.32}, {
               7.343999999999999, -2.079999999999999}}], 
              
              Line[{{-8.044, -7.020000000000001}, {
               7.444, -0.7799999999999994}}], 
              
              Line[{{-7.944, -5.720000000000001}, {7.544, 
               0.5200000000000009}}], 
              
              Line[{{-7.843999999999999, -4.420000000000001}, {7.644, 
               1.820000000000001}}], 
              
              Line[{{-7.744, -3.120000000000001}, {7.744, 
               3.120000000000001}}], 
              
              Line[{{-7.644, -1.820000000000001}, {7.843999999999999, 
               4.420000000000001}}], 
              
              Line[{{-7.544, -0.5200000000000009}, {7.944, 
               5.720000000000001}}], 
              
              Line[{{-7.444, 0.7799999999999994}, {8.044, 
               7.020000000000001}}], 
              Line[{{-7.343999999999999, 2.079999999999999}, {8.144, 8.32}}], 
              Line[{{-7.244, 3.379999999999999}, {8.244, 9.620000000000001}}], 
              Line[{{-7.144, 4.68}, {8.344, 10.920000000000002`}}], 
              Line[{{-7.044, 5.979999999999999}, {8.443999999999999, 12.22}}], 
              
              Line[{{-6.944, 7.279999999999999}, {8.544, 
               13.520000000000001`}}], 
              
              Line[{{-6.843999999999999, 8.58}, {8.644, 
               14.820000000000002`}}], 
              Line[{{-6.744, 9.879999999999999}, {8.744, 16.12}}], 
              Line[{{-6.644, 11.18}, {8.844, 17.42}}], 
              
              Line[{{-6.544, 12.48}, {8.943999999999999, 
               18.720000000000002`}}], 
              Line[{{-6.444, 13.780000000000001`}, {9.044, 
               20.020000000000003`}}], 
              
              Line[{{-6.343999999999999, 15.079999999999998`}, {9.144, 
               21.32}}], 
              Line[{{-6.244, 16.38}, {9.244, 22.62}}], 
              Line[{{-6.144, 17.68}, {9.344, 23.92}}], 
              
              Line[{{-6.044, 18.98}, {9.443999999999999, 
               25.220000000000002`}}], 
              Line[{{-5.944, 20.28}, {9.544, 26.520000000000003`}}], 
              Line[{{-5.843999999999999, 21.58}, {9.644, 27.82}}], 
              Line[{{-5.744, 22.88}, {9.744, 29.12}}], 
              Line[{{-5.644, 24.18}, {9.844, 30.42}}], 
              
              Line[{{-5.544, 25.48}, {9.943999999999999, 
               31.720000000000002`}}], 
              Line[{{-5.443999999999999, 26.78}, {10.044, 33.02}}], 
              
              Line[{{-5.343999999999999, 28.080000000000002`}, {10.144, 
               34.32000000000001}}], 
              Line[{{-5.244, 29.38}, {10.244, 35.620000000000005`}}], 
              Line[{{-5.144, 30.680000000000003`}, {10.344, 36.92}}], 
              Line[{{-5.044, 31.98}, {10.443999999999999`, 38.22}}], 
              
              Line[{{-4.943999999999999, 33.28}, {10.544, 
               39.519999999999996`}}], 
              
              Line[{{-4.843999999999999, 34.58}, {10.644, 
               40.82000000000001}}], 
              
              Line[{{-4.744, 35.879999999999995`}, {10.744, 
               42.120000000000005`}}]}}}, \
$CellContext`oneTermOfdynamicsMatrix[{
            Pattern[$CellContext`k, 
             Blank[Integer]], 
            Pattern[$CellContext`j, 
             Blank[Integer]], 
            Pattern[$CellContext`mVec, 
             Blank[List]], 
            Pattern[$CellContext`kS, 
             Blank[]], 
            Blank[], 
            Blank[], 
            Blank[], 
            Pattern[$CellContext`proj, 
             Blank[List]]}, 
           Pattern[$CellContext`r, 
            Blank[List]], 
           Pattern[$CellContext`mk, 
            Blank[]], 
           Pattern[$CellContext`epsilon, 
            Blank[List]], 
           Pattern[$CellContext`mA, 
            Blank[List]]] := $CellContext`kS 
          Dot[$CellContext`proj, 
            Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
            Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
                 Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
             Sqrt[$CellContext`mk 
              Part[$CellContext`mA, $CellContext`j]])], \
$CellContext`calcDynamics := Map[{
            Sqrt[
             Part[#, 1]], 
            Part[#, 2]}& , 
           Transpose[
            Eigensystem[
             FE`matrix$$31[FE`qLoc$$31]]]], FE`matrix$$31 = 
         ReplaceAll[$CellContext`res$2905, $CellContext`qVec -> #]& , 
         Attributes[$CellContext`res$2905] = {
          Temporary}, $CellContext`res$2905 = {{
           0.0997866725283381 + 
            0.25 (0. + 
              0.4756242568370987 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.8494117647058823 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9283667621776504 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.005882352941176467 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.005882352941176467 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9283667621776504 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.8494117647058823 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4756242568370988 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 
            0.01738863501740795 + 
            0.25 (0. + 
              0.49940546967895366` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.35764705882352943` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.25787965616045844` (0.07633587786259541 - 0.07633587786259541 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.0764705882352941 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.0764705882352941 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.25787965616045844` (0.07633587786259541 - 0.07633587786259541 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.35764705882352943` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.49940546967895366` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 0. + 
            0.25 (0. + 
              0.7094211123723042 (0. - 0.06178020632152154 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9846153846153846 (0. - 0.06178020632152154 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.8410174880763116 (0. - 0.06178020632152154 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.36 (0. - 0.06178020632152154 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.5 (0. - 0.06178020632152154 
                E^(I Dot[{0., 0.}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.047058823529411764` (0. - 0.06178020632152154 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9999999999999999 (0. - 0.06178020632152154 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.5369863013698629 (0. - 0.06178020632152154 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.24972253052164267` (0. - 0.06178020632152154 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 0. + 
            0.25 (0. + 
              0.4540295119182747 (0. - 0.06178020632152154 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.1230769230769231 (0. - 0.06178020632152154 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.36565977742448336` (0. - 0.06178020632152154 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.48 (0. - 0.06178020632152154 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.5 (0. - 0.06178020632152154 
               E^(I Dot[{0., 0.}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.21176470588235294` (0. - 0.06178020632152154 
               E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4986301369863013 (0. - 0.06178020632152154 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4328523862375139 (0. - 0.06178020632152154 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])))}, {
           0.01738863501740795 + 
            0.25 (0. + 
              0.49940546967895366` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.35764705882352943` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.25787965616045844` (0.07633587786259541 - 0.07633587786259541 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.0764705882352941 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.0764705882352941 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.25787965616045844` (0.07633587786259541 - 0.07633587786259541 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.35764705882352943` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.49940546967895366` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 
            0.07196905266250156 + 
            0.25 (0. + 
              0.5243757431629014 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.15058823529411766` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.07163323782234958 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9941176470588234 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9941176470588234 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.07163323782234958 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.15058823529411766` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.5243757431629013 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 0. + 
            0.25 (0. + 
              0.4540295119182747 (0. - 0.06178020632152154 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.1230769230769231 (0. - 0.06178020632152154 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.36565977742448336` (0. - 0.06178020632152154 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.48 (0. - 0.06178020632152154 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.5 (0. - 0.06178020632152154 
               E^(I Dot[{0., 0.}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.21176470588235294` (0. - 0.06178020632152154 
               E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4986301369863013 (0. - 0.06178020632152154 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4328523862375139 (0. - 0.06178020632152154 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 0. + 
            0.25 (0. + 
              0.29057888762769585` (0. - 0.06178020632152154 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.015384615384615389` (0. - 0.06178020632152154 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.15898251192368842` (0. - 0.06178020632152154 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.6400000000000001 (0. - 0.06178020632152154 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.5 (0. - 0.06178020632152154 
                E^(I Dot[{0., 0.}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9529411764705882 (0. - 0.06178020632152154 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.463013698630137 (0. - 0.06178020632152154 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.7502774694783573 (0. - 0.06178020632152154 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])))}, {
           0. + 0.25 (0. - 0.015427909458759537` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.03317512449046088 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.061780206321521536` 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.0029073038268951313` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.03089010316076077 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.022240874275747755` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.05195823393336232 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.06082974160888275 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.04382818269120428 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.026741709728516534` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.030805472741142245` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.013082867221028091` 
               E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.03089010316076077 E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.029654499034330338` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.02259053649276623 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.007603717701110345 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.028050036922370732` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0.06536027050606147 + 
            0.25 (0. + 
              0.4756242568370987 (1/20 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.8494117647058823 (1/20 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.9283667621776504 (1/20 - 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/
                20)) + 0.25 (0. + 
              0.005882352941176467 (1/20 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.005882352941176467 (1/20 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.9283667621776504 (1/20 - 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/
                20)) + 0.25 (0. + 
              0.8494117647058823 (1/20 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.4756242568370988 (1/20 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/20)), 
            0.011389555936402208` + 
            0.25 (0. + 
              0.49940546967895366` (1/20 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.35764705882352943` (1/20 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. - 
              0.25787965616045844` (1/20 - 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.0764705882352941 (1/20 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.0764705882352941 (1/20 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. - 
              0.25787965616045844` (1/20 - 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.35764705882352943` (1/20 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.49940546967895366` (1/20 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/20))}, {
           0. + 0.25 (0. - 0.026741709728516534` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.030805472741142245` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.013082867221028091` 
               E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.03089010316076077 E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.029654499034330338` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.02259053649276623 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.007603717701110345 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.028050036922370732` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.046352296862761995` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.028605081831060662` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.05887290249462641 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.03089010316076077 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.0395393320457738 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.00982197238815923 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.0009504647126387933 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.017952023630317268` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0.011389555936402208` + 
            0.25 (0. + 
              0.49940546967895366` (1/20 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.35764705882352943` (1/20 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. - 
              0.25787965616045844` (1/20 - 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.0764705882352941 (1/20 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.0764705882352941 (1/20 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. - 
              0.25787965616045844` (1/20 - 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.35764705882352943` (1/20 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.49940546967895366` (1/20 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/20)), 
            0.047139729493938534` + 
            0.25 (0. + 
              0.5243757431629014 (1/20 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.15058823529411766` (1/20 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.07163323782234958 (1/20 - 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/
                20)) + 0.25 (0. + 
              0.9941176470588234 (1/20 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.9941176470588234 (1/20 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.07163323782234958 (1/20 - 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/
                20)) + 0.25 (0. + 
              0.15058823529411766` (1/20 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.5243757431629013 (1/20 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/20))}}, 
         FE`qLoc$$31 = {2.68869999363613, 
          1.6795701478964697`}, $CellContext`showDynamics := 
         Module[{$CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`e$, \
$CellContext`omega$, $CellContext`points$, $CellContext`lines$, \
$CellContext`nu$, $CellContext`a$, $CellContext`b$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, {{$CellContext`a$, \
$CellContext`b$}, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
            ReplaceAll[{
              "latticeBasis", "pointsDataTable", 
               "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
               "numberOfMasses"}, 
              FE`parameterLocatorDependencies$$31]; {$CellContext`omega$, \
$CellContext`e$} = Part[FE`dynamics$$31, FE`omegaIndex$$31]; $CellContext`e$ = 
            Partition[$CellContext`e$, 2]; $CellContext`points$ = 
            Table[Part[$CellContext`pointsDataTable$, $CellContext`k] + 
              Table[FE`scale$$31 
                Re[Part[$CellContext`e$, $CellContext`k] 
                  E^(I (Dot[
                    FE`qLoc$$31, $CellContext`a$ $CellContext`i + \
$CellContext`b$ $CellContext`j] - $CellContext`omega$ #))], {$CellContext`i, -
                 Part[$CellContext`numberLatticeLinesToDisplay$, 1], 
                 
                 Part[$CellContext`numberLatticeLinesToDisplay$, 
                  1]}, {$CellContext`j, -
                 Part[$CellContext`numberLatticeLinesToDisplay$, 2], 
                 
                 Part[$CellContext`numberLatticeLinesToDisplay$, 
                  2]}]& , {$CellContext`k, $CellContext`numberOfMasses$}]; \
$CellContext`nu$ = (2 Pi) 
             If[$CellContext`omega$ == 0, 1, 1/$CellContext`omega$]; Show[{
              Table[
               ListPlot[
                
                Part[$CellContext`points$, $CellContext`k][$CellContext`nu$ \
#], PlotRange -> {{-FE`windowHalfWidth$$31/2, FE`windowHalfWidth$$31}, {-
                   FE`windowHalfWidth$$31/2, FE`windowHalfWidth$$31}}, 
                ImageSize -> FE`primaryDisplaySize$$31, PlotStyle -> Directive[
                  PointSize[
                   Sqrt[
                   Part[$CellContext`mScalarArray$, $CellContext`k] 
                    FE`mMax$$31^(-1)/350]], 
                  $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$}], 
              Graphics[{$CellContext`lines$}]}]& ], 
         Attributes[$CellContext`pointsDataTable$] = {Temporary}, 
         Attributes[$CellContext`e$] = {Temporary}, 
         Attributes[$CellContext`omega$] = {Temporary}, 
         Attributes[$CellContext`points$] = {Temporary}, 
         Attributes[$CellContext`lines$] = {Temporary}, 
         Attributes[$CellContext`nu$] = {Temporary}, 
         Attributes[$CellContext`a$] = {Temporary}, 
         Attributes[$CellContext`b$] = {Temporary}, 
         FE`dynamics$$31 = {{
           0.4909143446019329 - 3.2814135761828114`*^-18 I, {
            0.7011195363580722 + 0. I, 0.6482744399587723 - 
             0.04933848815032786 I, 0.1483374179260654 - 0.12653473454648598` 
             I, 0.2139271536037769 - 0.04424369070823941 I}}, {
           0.3958639396457433 - 5.2689842377394066`*^-18 I, {
            0.5735330610135561 + 0. I, -0.4305739567933102 + 
             0.26095779738786623` I, -0.3630388187616194 - 
             0.19116102029595572` I, -0.42888729990246593` - 
             0.2555051623983275 I}}, {
           0.36816449904032944` + 7.354520024438353*^-18 I, {
            0.1465668947706344 - 0.38643445951212246` 
             I, -0.39899229727731694` + 0.3406692334687863 I, 
             0.6568955216997205 + 0. I, 0.32500627110011515` - 
             0.12959695697228724` I}}, {
           0.30192464344667735` - 2.469830864221678*^-18 
            I, {-0.002261650198598569 - 0.09312713062641624 
             I, -0.11159407073662245` + 
             0.19002484904504996` I, -0.5976106918891063 - 
             0.07067521700377721 I, 0.7619882001991882 + 0. I}}}, 
         FE`omegaIndex$$31 = 3, FE`scale$$31 = 0.2, FE`windowHalfWidth$$31 = 
         3, FE`primaryDisplaySize$$31 = {380, 380}, FE`mMax$$31 = 
         30, $CellContext`massColors := Part[
           Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
           1]& , $CellContext`frequencyPlotCalc := 
         Module[{$CellContext`eigTable2D$, $CellContext`eigTable1D$, \
$CellContext`qMax$, $CellContext`omegaPointList2D$, \
$CellContext`omegaPointList1D$, $CellContext`range$, \
$CellContext`numberOfMasses$}, {$CellContext`qMax$, \
$CellContext`numberOfMasses$} = 
            ReplaceAll[{"qMaxVec", "numberOfMasses"}, 
              FE`parameterLocatorDependencies$$31]; $CellContext`eigTable2D$ = 
            Flatten[
              Re[
               Table[{{$CellContext`qx, $CellContext`qy}, 
                 Eigenvalues[
                  N[
                   
                   FE`matrix$$31[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax$, 1]/2, Part[$CellContext`qMax$, 1]/
                 2, Part[$CellContext`qMax$, 1]/
                 FE`meshSize$$31}, {$CellContext`qy, -
                 Part[$CellContext`qMax$, 2]/2, Part[$CellContext`qMax$, 2]/2,
                  Part[$CellContext`qMax$, 2]/FE`meshSize$$31}]], 
              1]; $CellContext`omegaPointList2D$[
              Pattern[$CellContext`nn$, 
               Blank[]]] := Map[Flatten[{
                Part[#, 1], 
                Part[
                 Sqrt[
                  
                  Part[#, 
                   2]], $CellContext`nn$]}]& , $CellContext`eigTable2D$]; \
$CellContext`range$ = Range[2 $CellContext`numberOfMasses$]; ListPlot3D[
             Map[$CellContext`omegaPointList2D$[#]& , $CellContext`range$], 
             PlotRange -> Full, ImageSize -> FE`primaryDisplaySize$$31, 
             AxesLabel -> {
              "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
               "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
         Attributes[$CellContext`eigTable2D$] = {Temporary}, 
         Attributes[$CellContext`eigTable1D$] = {Temporary}, 
         Attributes[$CellContext`qMax$] = {Temporary}, 
         Attributes[$CellContext`omegaPointList2D$] = {Temporary}, 
         Attributes[$CellContext`omegaPointList1D$] = {Temporary}, 
         Attributes[$CellContext`range$] = {Temporary}, FE`meshSize$$31 = 6, 
         Attributes[$CellContext`nn$] = {
          Temporary}, $CellContext`showFreqPlot := 
         Module[{$CellContext`aa$, $CellContext`bb$}, {$CellContext`aa$, \
$CellContext`bb$} = FE`qPlaneLoc$$31; Show[{FE`freqPlot$$31, 
              Graphics3D[
               Polygon[{{
                  Part[$CellContext`aa$, 1], 
                  Part[$CellContext`aa$, 2], 0}, {
                  Part[$CellContext`bb$, 1], 
                  Part[$CellContext`bb$, 2], 0}, {
                  Part[$CellContext`bb$, 1], 
                  Part[$CellContext`bb$, 2], 23}, {
                  Part[$CellContext`aa$, 1], 
                  Part[$CellContext`aa$, 2], 23}}]]}]], 
         Attributes[$CellContext`aa$] = {Temporary}, 
         Attributes[$CellContext`bb$] = {Temporary}, 
         FE`qPlaneLoc$$31 = {{-2.68869999363613, -1.6795701478964697`}, {
          2.68869999363613, 1.6795701478964697`}}, FE`freqPlot$$31 = 
         Graphics3D[
           GraphicsComplex[CompressedData["
1:eJx9nXVYVdvz/+3uDuzuwkDRjWI3Bna3XhNs7G7sbuxCRTGQg4qB0pwD59Ci
Yl67Bfz5vc6sfc97Pvd3/7nPM896FmvPrDXznpf7rF1u+OQeozKkS5eufY50
6TL+/n+PUgcvB5zJ7Nd1R8y3lAk/Dem/Bv6qMCFBY7ttvuY/U9t9MEQuWp17
R7NYsCcZSrea9DLf8BhlT0f/PdPKpjvgF4PjtT3fnCZ3nxeH82vfHMfvvlcv
UYP1aFUKfuuYMWOiVqxKzX3ez1IMvM4re6/aN50Wp+y8zg9Pq7w8lyMe7EkG
37DdtfwW6vPwOk8XH1Ln/Y9HOF5zK5CzaNEQtH/QLKmN+3atKtaj1diaOSDu
EK/ntVqnzSmvzpMnxCs7r/NYujd5jo5KBHuSobpLyqnNk3U7rzPX+xufc8fH
4XhtzGa3Ds+yxuL8Wp6h62Ka+MfgerT38Y32nuocp/G8vM7V78alzs6WqOy8
TkPsyLwHusaBPcnwucDV7y1HxCg7/+donNRsfMEYHK/heF4nzs/r5PXQ+jVe
J6+f7bxOeF6N1wn+UX8H/MnjNfA/z69BvHg9mnV8U9Q6rfdDilon7B+1Tthv
ap2wP9U6YT+rdcL+V+vk80Lny4HXyeeL7bxOOI8OvE44vw7/cd55vAb5gefX
IJ/wejTMP7zOlRP3eJl6W0ReanJqw70hK6JEXmqVp/alG7aRIi91WdMncv5x
k8hL8+btf+Je2Czyklarc+jZpRaRl3zCozyTO1lEXvorpVfP0t5mkZfcvphi
emWziLzUcWDRR5t8LCIvTb3VffPyEtEiL2V/UOl4z6xo/6B9PuwZP2SBWI/2
xd8rv/8es8hLyW639sVeMou85JNUL3XKTIvIS5Vnb/3awsMi8pKtXbVesW44
T5L2ttJt34CYSJGXwpf2GddvWJTIS233ej64esYs8pLN85h85p4WkZc8Qx+H
NWppFnkp+WyrsiObmkReOj9n0fm020aRl3A8rxPnV+ed1oN5idePeQmeV513
8I/+9639qc47+F+dd4iXOu/W8dXzkvV+0PMS7B+1Tthvap2wP9U6YT+rdcL+
V+vk84J5ic8X5iU4jyovwflVeQnOu8pLkB9UXoJ8ovIS5h9ep3/H68b07ph/
Phj2dUrdaywg8owhW+ZyLdy9Q0VeanGv1+Zi7mEiL12NseztVNso8tL+B3uK
jPY1irzULtz87a2jSeQl26Q303wGR4m89Lqlba1um0wiL4WULnpkeQ2TyEtN
W55zz19MjNem+O6eerA52n/ruuF9vSO3ifVoZd3vLOk4IlLkpdA+uzOmO28S
eWlC9jJtE9qiPclw4kj5yyWuG0VeCvFr/N7fwSjy0ma3ZhWLF4kQeelF1Z9z
sw2OEHmpq2PPZo55okReirj6/sjGeSJvGMyJdR6uXCzyjCGmS6s78/oFirx0
9e3mLuWq1m6BeQnH8zpxfl4nrwfzEq8f8xI8rzrv4B/1d8Cf6ryD/9V5h3ip
824dXz0vWe8HPS/B/lHrhP2m1gn7U60T9rNaJ+x/tU4+L5iX+HxhXoLzqPIS
nF+Vl+C8q7wE+UHlJcgnKi9h/uF1Hp886Mb1HhEiL9V6261UzlIizxjaTL9b
8fmwuyIv1ctauFrhcrdEXjp/KH02lyV3RV7qsmRpm0pxD0ReelIydlLggGCR
lz71zbzJeWaEyEuDl3TYkndamMhLXftV72+sFSry0pTSbXMGVQoVeelG9Pol
0ZPQ/kG747CjtUf+MJGX+qY8CLJfEi7y0vgaRkve3aEiL115U3hx8rQQkZec
pg3I8WJIoMhLn33qp3gduS/y0t/FPWxzLL0j8tKm2Zm93roHibwU0nnL6pLJ
4SIvVdj7ctziwGCRlw5/ezq9fde7Ii9ph7zD6j65LPJS4pjU9R1rVRR5Ccfz
OnF+XievB/MSrx/zEjyvOu/gH/V3wJ/qvIP/1XmHeKnzbh1fPS9Z7wc9L8H+
UeuE/abWCftTrRP2s1on7H+1Tj4vmJf4fGFegvOo8hKcX5WX4LyrvAT5QeUl
yCcqL3H+Of49cEG+bxn8Wizpu2vepc+GTjXtEwp5xmpppm/t+7RK59fui4td
avnvBr/Ivz03VoxT43s3dbyS4vW3wXXSqeohmePV+Fa9cs1JtSQbCgwIbJcl
NEGN5+cduqJNupYv9PnZ/mptuo8vtsVpP/+xv1P+nNLh0sn2neO17v+s/7O+
Hyp6+xvfxGkeIztUtC/+U9lH/boSP3RjHPzdJMPBu1e9on/3xdZ/N8lQsVPm
BR479XV2/meehwYtc4fyn67o4//YYwzbHkxt3f68Pl7FZe7uxzuMuh9UHRmw
5nH7T4la+3/Wb1LrjKq50i5pWoLW5R/7U2XfNct+VujveY7/eS5D53tVis9r
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
m1+3s/+jv67P9L5vrLKz/2uvneRz5kCMZndo9Em/ji80tm/aYzfct26sVu+P
XfmH7TwPx6v9kso5OnfT76vneN059aD8gHp4772XPd57z/G6C+M5Xh1gfl5P
HVo/2zle+LwcL/QPx8sE/lT5jfyf4594BWq8njkdr337lF6/J5/jxfFlO8cL
9oPG8YL9o3G8rlnvNxUX3p8nSG+oONJ9Hd8q/994H6XT3g+a+c3TT7+3n+MV
Zr3/NY7XW+vzov3H+dI4XnAelX/4/NYkv7Gf+4ReiY/Yqs/DcYQ8oPTkC+u8
oZ4L8oyaH/KSxnHkPEb6wYHjolG+tfn/Pm+Kiu8+qzyZouILeVXFd5J1Hlbx
rWGdt1Ucn1OeL/6nTjnwPAHWdUrFkeuIWifFEeqOei78PgLHEeqaiiPXwROk
x3h+voeQx3Mcn1L9ZTvH8bJ1vVZxPGxd31UcH1vrARXHINIPfH8mx4V1CNs5
LqBblD9B5zhwXEAXOXBclpOOWvtHZ6rnPWytMx04LpOs9ZjyW3Vr/ebAccHv
QXBcQB86cFxATzrwekB/OrD/Qa86sP9B3zqw/0EPO7D/WT+jDl/2a+H4bhFR
QodXHZ087/V0i9DhJz285447bhY6PDAmvFXqjyihw3fOdFyWc1CU0OE3Ygf7
5omPFDr8Ucs5X/MPiRQ6fNnEWaln8kcKHT4u5dm4InEmocPx+xcclzLLL+we
tTFS6PD3C3MP6zwnSujw6QULH3J1NAsdPtg0PbpMkFno8HbbIws8dLYIHb6v
yOT7bjMsQoefcT3sU2+YRejwrrR+1OH1+y+7u8mkf3eD/f/N+5Jd1k+6nf3f
qML8PbGl9e9lsP9HnJgR7zJct7P/3etMLpvzqEXocP4dE+pw89B2EzJu1efh
eBkvHQnKa9TtHK8K9nPrdvqK3wHxssfvgHC8Oh4pO7dnQd3O8aqw8t3wsrmi
hQ6v1fNoWa+O+vwcx7aVvtbu/UW3cxx/NZpwu99t3c7P5d0+oc9gd93O8zc8
PfXVlba6neO4tcnm+b7v9e+DcLyKONZs5Zqm2zlebbNve5qznf6dEfbzqt7z
fXLM0+0cr/dnRvyIWqfbOV79snRocmSfbmf/Vxt3revo/rqd/V87bKrTwVf6
etj/+H0T1Qe9Lz9weqL+HRP2v99Jm5F5Wut29vPD84W95r7Wv3fAfh7aO/eW
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
qecGff1Kb7Tsuvbmft0P7Ofgy4OqpvUPEzr8I61f6Vjyv0vC2LM1f+9PtrP/
b5d79iFy4n2hwy9cbO1664O/0OGJT4ZOrpvoJ3R4qZo/jPa7rwod7t87MMVp
7x2hw9nO83C80oaH7K9Y47zQ4a2yJZ+oWOOg0OGF6jts/fd3PDleXWE8xyvT
COv5eT0VaP1s53glwfNyvLzAP+q9O/Anx8uV/I86vHKxESV/zbshdHgQxRd1
+Fbr/aB02l7r/aN0msF6v6m4PKL9iTqcf5+FOtx8zHWlWz61/5V+g/2v9Buc
F6XfvsD3TDle36zPo/LPDzq/qMPruzu3aZFNfy6OY7x1HlD6bZl13lDPVdM6
z6j5IS8p/cZ5DHX4Ecq3qMOtn1fX4dZ5UtfhkFdVfCEPq/hC3lZx5DyPOnyz
dZ1SceQ6gjoc6o56LvzeK8cR6pqKI9dB1OGr6T1wwcOp/qIOh3qt4gj1XcUR
9ICKI+sH1OGnSIegDp9mrVuUP+2sdY7S4WnWukjpcH/SUajDQWcqHR5qrceU
3xZa6zcHjgvoPaXDZ1vrQ6XD/az1pNLh46z1p9LhYdZ6VenwPdb6Vulw0MNK
h7N+btz4Zeat1dIrXd36Y9YJN1Jjed8q/ZyzskPR3sZYbdKOmFvh+TIo/Xyi
wDDbtfvieV8pPdyCvgvzi35HrPQYfUfmdsKSum3cvip9km9J5fcHLsbT/B+U
Phk7dvORrJ8TtGM0P/szmN6nSqX52Z/8HR/Kq0qf8HeCptD62Z9NTzXtNznd
I94Pqj6e+ratysTdj7QG/9TN70rPTNn9OtHJJlFL+Cf/fFR65vPmhzF9cyZo
Dcmf7Gfbug16lD0Vr03+5+8mqee9euPy1oPp4rUCf/Kqel5net+vMf1dfq5f
OdPlK1j0kZZEf5f94Lh4cubcGRM57ykdkpvexyM9oPywsb5L4zWNErWy/4yP
1fnqo7MXHxdJ0Kr8Y/dROvADvQ95hPzJ/uHvnf3pFz4rfcXfR6Pfgyh9xd9T
m8Z+YL5Xyn5m+nexWmXyA/t5Lr0vepf2Cfuz5aJvb4e8jdWm0j7hfe488VWR
pGaxWkGqU6ofHGT5UL5rHO2rJJX/y5TO1n5MlzhtAq2H/Xmb1pOV1oPvr/6p
gz6qLmyJOPblfqU4rcwff6q6UPDKlNOOp/i95VjlH7Z/+VPflX94nmq0fvSD
C68f/Dad1s/+KU3PRfVa+aeTlR8+KP/0Jr/ReVT+cSA/k3809E8hqLP8/if1
a8o/pynuPel3QKqPoH1SgPzG/llF+5D0ql6PaN/G/9n/yg8taf/TOVV+S6Pz
4krrZ/9co3PX6M85VXWnIZ1TOl/qeb/QuabzqOop5wHiFarun6a8QXlS1SPO
M3SO1HNxXvrFv+uh9fP3qWmfq3rK+ZDOhXouzp+UD1V94e92OUGd4t+bUF5V
dYq/G055UtUdzvPUd6u6k4PqAuU9VV+4jiSQTuP18++PsO58S30Z36iNWdSd
AQf9qmcJjhJ15+aSnr2+HzSLusPfq8K6w9+rwrrzIDxrz+a/zKLuVD1xrcfA
dhZRd4z0/gDWHb73G+sO3yuOdcfjZxP79Hctou5M2VY9968vFlF3lkbEND/y
l0XUnYHLMwT4fTKLupN/ba3iPh/Nou70SHkztfRqs6g7vvR+C9Yd45HKEZc8
LKLuLH17rGBAPouoO/z+CdadYq0TPsTNtIi689rD58m1D2ZRd/j9H6w7w+h9
Iaw7/D0FrDv8/QWsO33uXHB46xgl6s4cej8K686LwI0F3CqbRd2JMU4qaOsZ
JeqOKWNR9z4DzaLurAsdcSbbMrOoO860Hqw7/L4W1p2+1xfUWVXILOpO97k9
2y9cHyXqTjeyY93hebDusB+w7rDfsO6sp+fCuhNp5Qe97rDfsO48Jz9j3WH/
YN3h/YZ1h7+jhHWHv7uEdecV7UOsO0Vp32LdWUL7H+tOBJ0XrDtOdO6w7vA5
xboziM411p1llAew7nDewLrDeQbrDuclrDv9KI9h3eF8iHWH8yfWHb7nH+sO
v1+NdYfv/8e6w3ke605/qgtYd75THcG6w+/bY9253qHQkjaLI0XdybQ8Mf5l
YZOoO40arj5Yq4xJ1B2+3x7rDt9vj3XnxbuyiwO2Roq6s+9Xj42RgSZRd/je
P6w7fE8g1h2+7x3rzorWNv4Z04yi7nxJaJblWi2TqDvd2pVpEvnOKOpO3qWn
tgTtMIq6k69tZLTrHZOoOw1yunTdrJlE3eF/z8W6k82w2Gn873Vi3XmtDTq4
fb9R1B3+91asO3m7+M/K5mUUdael4wm/sH1GUXf437ux7vB9qlh3+P5trDs7
6b5WrDsl2xlOtfoeJupOEL0PgHXnrxMWP6eWJlF3vG/9ndq3jFHUnRlXm4yZ
Wckk6s7wtDZOccUjRd0pQevBusPvJ2Dd6dbLKfJHL6OoO5fOXvraPTBC1J3L
ZMe6053mwboTTH8X644NrRPrDj8X1h1rP+h15zL5DevOBPIz1h32D9Ydft8G
6w7f04t1h+/pxbrjQPsQ6w7vW6w7r2j/Y93h84J1h88d1h0+p1h3+Fxj3eE8
gHWH8wbWnZWUZ7Du8P2oWHf4+xdYdzgfYt3h/Il1h+8FxbrD/z6OdYfvC8W6
05jyPNYdrgtYd3yojmDdaU3vl2Ld6eDUsu2creGi7ky1f9W64q9QUXeaV7xx
ffKRUFF3ZtI9FVh3DHSvBdad/q7HepbLFy7qzq0NHQq/Ph4q6s564sNYd17S
vSJYd/jeEqw7I2ycKk+MCxJ1Z1e76SvC8oSKulOvYee7NSYFi7pTcLY27N2q
h6LuOF8+luq2O1TUncUuC1JqlwkSdacO/fsF1p3+X4dnuhQSLOpO1eiO6S5d
eyjqDv/7AtYdm9uBX732PhR1Z+6lsn7F+gSIumOhf9/BusP/HoR1Zznd14R1
Jy/d74R1Z0XFD637X7gt6k4t+vcvrDtLngz5UL9UmKg7A3a+qNVjUoioO48O
XC7lX+uBqDva3sk7U1NCRN1ZQuvBusP/Hod1J9Dnxpl0De+KutM+e5ve1V7c
EXWH7Vh3eB6sO+wHrDvsN6w7jvRcWHeeWvlBrzv9yG9YdxaTn7HusH+w7vC/
L2Pd4bhj3eF9gnVnNu1DrDslaN9i3alE+x/rTl86L1h3ltK5w7rD5xTrTmE6
11h3bCkPYN3ZTXkD685IyjNYdzgvYd1JpjyGdYfzIdadAZQ/se7cpnyLdYff
n8G6M4fyNtadFpTnse5wXcC605HqCNYdfp+K75Pk5926361KyLxEZef4boiu
tPJgzkfqnknFV/e8GtszOEG3Uxx9nlTafC88Xt0/yfZb2SvOblY3Qdl5/+cY
FVChaI5Edd+s+l1SQGDM17lxys7je3x+saXC7Vh1Dy2Pv7d/9+gDjeOUncfH
/fBYEThFn4fPRYEFY/KUbK+PZ/uepeXT+3+Og/uTXxk8J6ys0aNAAty3/Mow
L7ld230v9fl5H+7oWmpnzp36POr954ixI0xe+jzs/4JtK8+Zv1Wfh/3M3DXt
P/69TPmBxrcpm7R4xuhEdf8h+6fxmhY3M4yPV/cf/u97Ufx98F4U63uzvezr
zd39eIcxHu7N/q2jBqx53P5TorLzfl5rnlAi6rG+r9jPeYb5zd97M16/Z5X8
Wb595RM14vV9xeOdXlUoYA7Q9w/eR6T2LT2XnZvdk9kZ9fn5ubpFtcp81D5e
zc/2jcOO7khsrceF18/3M7Cdz3X+knnnzuyv+5/tzOd5POeZLX8/9W5YULfz
uXYd23XesH2633h88qWTnYbY6eeO4/7w9lK/LMUSlR/Y3ivdi7zb8ut2xb2f
/Nx1K0OC8gP+uyfPz/aKvarbvZ6hz8NxuV7pxMRbf+l2Hn/Gff3KuVP05+K8
5BCYv2nBEfpz8fNeKD4pW/403c7jP7+P91s2RJ+H89Vluy2rM/1rn7O97LLa
O16c0O3qfcV9o9PfOh6v73/ywybn4yv7No9V+5z9Zn0fzu9zQeP5/hxeD88/
3zhx2UvHBHWvI++3Y4MnD5mdFgf3b3vZrywc8txl5yNl530VuelcmQyrdDvv
n4r53J3dZz2C+7q97EtkL1M4xVWPF88zdvmvTqtHJsI93l72fb7HLc52MF7d
j6r0knHRoj1vEpSd43v2ZGfvPF8SlN94fJEqhVNi9uvz8PN2PrSsaOMpul29
rzv809NqvfR52P7Ca8XQcZn1c8fPG2T5q0HHivr61e83D1xxWllWryM8PmOp
smF2v/M5z6Peg52e882WB3p+UPcaJTj1bfohVtl5H76pUeyt2Ryr31tL+6GG
bfSxZ4Z/PS/th7rFMlWYvz9OPRePf9Z6scfU8/o8fC4ujy99e+cN3Q/s59LP
krOOGaPvTx7vMveuocK5OLUP2f8rrO5Z8vfheWKs7mXy9+F5+B6n49Av8L1G
bGc/TB3cc87rC3r+5PN4sZF//WGF9P2mvpNL/z7Ldh6f3eXiZxtXPV5s53/n
5fn5/O7J833ugYJ6XuLzVb1qvaezCuj7hMdrhSrm+jk4Tj93FJeNdK55PM8z
++T8kzuf6HHnedZvmxpWsp5u5/EVKuePbusfq+6r5H2Odt7PPA/fY8nj+e9a
3/vtZR9drXrWUTXi4N5vL/u8CzofHFMmVtl5/2O+4vGtre778vf53/d9+fvg
fV/sN95XYz+dr1bnt47ie2jZfrRSyxnt6+h23m/PzHMSTrSPVfMobjZxcK5I
mzj9/l7yw6ra64aV+Jedx3/a93fftyt1/6j3eNfZltuWKU7Zef1eOfYcaNdL
9w/bV127cGhVEX0e3udLa7a8Us1GH8/2/rF9rk2Ij1F23s+Z28/KcG6b7uf/
fR+avw+Px3PH+5zPKfuH8wOvk/3Adn4u5Tfaz+wHnof9n4nWyXZ13wg9F8/D
dvYD+4fXz3FkO6//CMWd/aN+70n7hMfzOfoIceRztJLizvPw+Eu0T3j9PL4J
6VIez/ajVE/ZzzyP9X19/j7qPV7SsXzfKe/DeVCv+RzloXOn7qOmfcj5xPq+
cS97C51fPu98Xjjv8b21bOf8yXaO4xTKtzwPn4sWlN94PK+/KuVDtvP43ZQ/
ef18LpKpHvH61b0WVL/Yru61oHrH8/D+n0r1iO3q+1ZUv3geHn+J6h3nSd7n
6aleq7xK+7wM1Xf2A48PJD3wEzgGvyfGdvbnK6rjbOf9X4vqPs/P4/k9NLar
9z9JP3jAe9f8Phv7gc9FYdJF7Af17z6ko9jO4x+S7lL3gdN+fka6iMezfS/p
KHVPOPf1pLv4eXl8Tuqj2c7jb1Pfzc/L9hvUp6v6RXEZTXpS3cNMcalAulTt
TxpvIh1rfW+5l30v0p/W95Z72RcjHct23p8tiCdY32fuZb+C9DPbFX8mLsF2
3s9biGPwfci8f7i/YDvvB+5HOG/w+JbUv/B4dS8H9Rds5/PI/QjPw3Zv6l/Y
P7x+7svYzuvvSX0c+4ft3PfxeD53p6n/Yru6Z5X6NZ6Hx3N/5wEcjPtBXr/i
EtTn8vOq+4GpP+Xx7M/p1M+yncdvpf6X18Pngvt6Xg+vvwJxALYrjk3cgOfh
/b+J+ncez/bu1O+znfd/U+IDvE62M3dS92mTH/j9YbUfaP+vI76h6g7ZQ4kb
WN9b7mWvESdhO++HtsRt2I7v6Vnfc+5lb0sc5ijwQwfiRWzneQoTX1L3kFPc
SxGP4vHq31+IX6n7ySkuC4h38TxsZz7GdvX+OfE0noftzN94PMeLeR3bOS7M
93geHs88EHnmaX+/Zf0PWATP/Nlx2/Otty2CZy6d+SzfjKoWwTMti6fbFP5l
Fjwz62bfWXvSzIJnNu5X1ca2nUXwTC3a3vvJX2bBM/++nz33pIxmwTOH3XNZ
1Hu6WfDMKpU8PgVsNgueWcM2fLJjbbPgmaPc/+qz39cseOamIqN2NspgETwz
Xf/Is2l1zYJnVjS8f5b+QpTgmaPtx5nfZ7IInnn/5du/946MEjyT38NEnsnv
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
4nvIM5kH/j+D3dr+
            "], {{{
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1:eJwtlvtPV3UYx8/x+z3nKJGgCJUEeMuIEOkmTadmYguWXcjSmt1IN12mTlnF
suw2bTXXuqzWqrW1arVW/0FllmYXMwwQwQtgCl4CryDe6PX2eX549rzP+/Oc
z3k+z+1zxtauqFk+JAiCZiSFVCZBUBoGwWXpINgRwYHHwF2DDAU3whWDh4Gb
wP8gafA4uAPgKeB54DLkBvC/cLuQXPBkuApkPHgP3I3am29ORd+V2LPs8/j2
aPhsdD5SBM5I2z6jsCnFtg18BXwM3+r7T4KfENq716PLWVuKXu++VYDnJ3au
IeAR4AeR+eDjcN3ITPDNcAfd/gHwLeh89rwVnYOMAueha1ibhO5UDMDH4P8A
70YK4WfCnYmD4Aj8b3DTeS6Gb4/MZ+1RDtdD4DOx2RzZuQrgZ8DPxv8y+Cno
DTwvgj/F+mJ0Mfwy9Ovwj6JPwL8JfhJ8Enw+sncreXcaXG5guTmMP7vBvyiW
aTvXeHSStnjug49C8+c8UuZnVwzu9droiCy2pfAz0HXKP/hpdMj+5eBq+OU8
r0A+4L1DnDHW/ujRcMMDy2UmdleC97NnX2T5eg/7Bs9REfgceC34i8S+oX3f
T4JLG64Hfwz+BFkFPoNtLXoCy7fJn7Tlqxl+JzIcrgDbQfzICazO5/J8redF
3x0BP8D6HZ5fnfcqr3nV/z2eR9VkVWIxUg2cxZ+jvPs7+K/I4peZWD0op8PA
zdi0wP8Mtx25AB6u3kJ6vX7C0HKhvlJNKVankUbe3YnehE2195fidspzqvp5
HL4a/ih4leOr8fMQz7PBC+H+A88FLwE/4/WvGpjmcVANyOZucJ3qHxkHTmNT
As4ILZ5dyAzwTXC/gg/gQx++TPU+3Ksc+rl6iWcHuh05ik0Dz5o7jegzgZ1X
55ZNJ3IBm27WssH96C3slQHuSlkt6VuDsX33IDjgO908t+l91rti23cb6y1I
FnsXqqd8/si3A9j0Y/MneJafUXOpHX4r/A722ajeBu9K2azTPByZmG/yswfb
PW7/I+t/IyPVOymrAeU3L7FcX9Q5fY6qv9Rn8i0bHcOfcP/Vmzk897lvl4fW
I7JT7Sgm+5DcxPzXGXtjm+GbvM513oj1414zqjf5JN+Ux4dZe8znxk/yG74D
26q09e8g3Btucx3cl+BXwLPAL/n8eRH9kM/wGtUq78xDv6CZBh4LP8HngPr2
LfhvkFdD2397YDltQF5LbK5pvu1VXj2ep5GJ4Mns8yk2q0Obh/XgZ8EDrH+P
bMZmZ2yzQn59ltg9oppflFhf6uwn9T3sDvtMVoyzkKLQ4iBf9se25xblHfw8
7z/H+lnddz7P1eM93iNLNZeQO8FHIvNVPqvvFqi3wE2BzWnNpTWaw5HFbQw2
vZHF76nE7iDNrdrE+kv30RPg+0LbU/FVL1eiF8MX+AzPSdv8k81KdH9ks/dt
+Z6YH7rjlKP7wcvgFqJLsF8Xmh/ypwT9st81ukd0pkL4OaHN5yXodaxf8Jn8
eWLfUj1UpC1fsnnX86N7oc7zLzwxbXU6VDM2sBmu73+L/XS/U1Rva/0ukz/a
V/ur9r72OrzId7Z67/fHdu/oLvguMV79dSxlc0a10RLbDNH8OQfO9zmmf5jb
dScEdmc3+Vz6IbK8KFZrsG33+0tz7COe670e6j2G25B3vD51B2lOZfgM0b+E
/h0WJFZ3l+aYZkFoNak7aY7HWfO0NWUzR3PsQ6+9AZ8tmiFZcK0eQ9WoakDz
fLX+BZAqr8M27yOdZaP3eGdstaf6eQTblW6v++Ir703F9n8gH0Vk
                  "]], 
                 Polygon[CompressedData["
1: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
LPXU+nhXcR//AZFqEF0=
                  "]], 
                 Polygon[CompressedData["
1:eJw1lulXVlUUh+8Ld0BFQUUocEZLcTYVZ0WEhViWZjlkmqhlaZpTauGUZTZ9
aVit5lWrefoPmjWt1ETmSRGVSRRQkSGJnr327sOz3t/72+feM+2zzx2UtXnR
pjDHcQ6DB2NcxxkNhwLHWR9ynGbMTt9xLhE7Jg3wQ/AJfAyfwj7a/WOxKn6O
oxvDHacJKtGjiU+ECbCINmfxEtHJ6CkwFSbAarwsmA01tFmIdx+cR4+yZz+z
/jrw0hhnOvyKLqDfNmiHPMZ7B+2GQh6xLrQfhh4DfdAleGPR4+AuGG/9zyJW
TewGrEUfwDsIz0MH76zk3TXMqQVa4U38x2k3ljHMhFlQz7Pz8FYSWwWPwCD8
gZAEa4i9grcCHoKHYS5eLc99h/4WvocX8Rz67MMzMZAIS/AeJDYZnQwp8Bze
V3jXeH4lOhv2wHK8y3gZ6DRItzG14+1Gn+T1J+BZvE68g3hfojN45zx4IND9
kn2bDFW02Y63AH0VPYQ2Q+FDvA+gFW8bsY/Q62xOdZ7OW+b/daDj/Nf6+ga9
BJLt3UvRy+ANy7ubnq7vW7bnB/D2w17Ltfdl7dAr4JCt1SRXx/A6sTnoVHg1
0PW+bnv6Gnob3IO+YnPaAdmwHG+Z5Bk0ePqM7Nc+YvsDzYdnYDe0EdsV0vXb
KHmKXgiLodFyaB16I2ywfrfAU4HmSCbeVlsP2cPP0V8Eugcb4Al77/02FjmP
L0heWM7J+ryEPmx7vwrvZfQmeNL2XvJQ+uvNOvSC9Tbvfui+ro5B8lPOu5z7
tehUy0XZw0ehydO8exq9E3YF+p7HZByWD7KOq+38yLnNQq8J1Eu3/JtpZ6sA
uqITiDn0GYJSzlKJ1Aooxb7GXnYhnkK7OdAfynjuL2ggHkYsHFzw4DbicdAD
CmkTzTujXD1jMp9YdE90NPSSZ/HO0C4S3Q16yPnmvac81d0hSvYG72+836AI
fQ7OQhPjy7e6cjvt4gOdj08/nqtj70es1NM5djKvbvyODGk9WyD7ABXEh+Hd
G+jcGmneDDcgwurkEOIjIAlS8S7ijUdPhSkwGm8kjIBRVt+KadNBn7fApd/B
eClW/xLQ8RBj7Qbghdl6DJRaBbEyFzwPbtm6nIQW9CXmXgXVAu+vgnp0BbHf
afMH1KGrpVZCK7E/8erR12VvIdfXvmQfcokNRidCf4jE6w7RUETsKJTxTB3P
XKGvqxAjOQ0nbEx90AX4+fAj3jHZJ9qf4f9xdLmv45Tx9qNtX+sryvJF9rfQ
7o18KPD13oiwNfBtn7PtPMr53oPeCz9Zf6U8U+ZrX3n0kwuF6KPEctDFUATn
8U7j/cxzwwO9l/LtTCShF0sfgdZfqY2XPD2DS9H5MkZH74Bzvs5R+pc5Vvh6
FqJs3Xx0AEU2hh/witEl0AgNvt6bhZbPMq5Tku8yXviFWKWNVfQF9EWIIJ8C
OId3Z0jz+Iin57aGeK2veyV7ftn2vw3aZT8gx9ccuWx50J13RcIFvHGWz1Lb
5f4LEc8kNt/VtSzmmRLJM5vP27TbTLsWT+9DuRdv0q4ZWnz9FpFvlnar1e/Q
/l14z85KL7zeUh/sm0Duo+noaTDJ1v66r/XoiOXhDV/PQis6JPdOSPOvwtZj
mrwDZkC5p2dvInpSoN87M602SD2bhZ4N58mLCmgI1/omZ39OoGe23L6V/j/7
skaZ6Plwd6DfRlJX5qLTpN5ajZNxyfhcO2NyVm5iD+D/wJCe4zb7julpNSDH
03t8q9wbsMXu0lirj1IL46TeSv7x3NlwXW/5Nqy1bz35TpMxZMA86OpqjZP1
iEcnuHp37sTbDjtsX+Ks3p72tG5J/Rru6r0m3zLT0TPgP8x2Zh0=
                  "]]}]}, {
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1:eJwtlntsFlUQxff7WHZXpEihgFCwtgKtlGdLS6FAX7RaUIFaJEIaYq1GJYoS
jBE1KioINb6jKBGiQuIjakBFKg2FSJEoREStoMEgPkjwAUSIIkL8ncz8cTPn
njt37t2ZOzOb27yo4Y50EARdjG6M2igI6iFakyDYEgZBE9x65Bj4GL4c/nwq
COrgzyAvhJsJTpBPoXcVeC1yBaMeXMC+d9ArB78lfeavIw/GQfAdsgb+S2QG
/BTwQvb1B3fCnYuNfxP8DXgOayXoNCGfYUScWZ3Y2bpDClmH/g3gTtaLwZlw
V6AzDlnEuBs8Nm3zJeBt6C1AfyNylvbID+xrDu3OVyMvZX6YOwxG/37mtfDZ
cPeEdv8HkSdT9u3/ILuz9hxye2z+nM5ZS9m7DL0r0RkKNwxujs5CHkK3Avwt
8j70SuCmoPOs++155Hz2TgDfhuzH2g64P7C/HP069Gvg2pivStn9e7rffoDr
hs7n4IFwJ5m3gTPBlYwq9j7E+mDwfvifWH+AeWnafCJfXcu5r4Lf93tuQQ5B
/yvkz+jnun+Ognem7Bs/TZmPtf927F0cGReAB4B3gc+jHzHfAx4U2R31BnYj
96Xs/eiMe9GZjJ0KdO70u8k/3ZHXoPOjfO+xmxnaftnp8Hvqu/6LzW+Kl+LW
lbI4HkSeZswGn0PmoHNA75Rztvq36Jv6wm9HnsLOX4yPwX3kZ/ROgS8Ht7v/
Q3A5YyT3W8x6M6MAPBGuhNEfPB2uiTEcvIH7fOI2FZfO2M6W/UfRqUWnHZ1b
wHlpy8dZ4Azwi+DRkeXCJLgD7H2PvRfBTXWdcXqr4HLwVPAkxlzlI3t3hpYv
0+Qb1q8P7E1UM69GLmNfI2NQ2vL6A+yvwX4SWUwVxxNw2xitKcuXrY7lB+WC
crYxtHetc4uRZf4tE/w+heC7FOfI8nQReBN2XsZODJcDNz+w2iQd3XMTNgen
LXb99P3+Vicg14TGy7dvex1rC63+KKeU38qRN7D/NeekwSvBH7n/9E42I19i
TAS3I19xLD3pP478UPqx1bhecBvB77r/K92Hj/AtkdeEjtiwcnpHbHfVnZUn
ystK8BFkVWR1qYN7rvQcV4xuDe1t9wDfCN6A7h7srE8Z/h5cxFpv1UL2feE+
VLz2gdeCL4isNjZgZx029sOvS5nNvbF9s3y+y/VVb1f4O1SdqfOa9kRid6jC
zmJkS2j+PMS+LI/1gLTlpny1ObaYKXZ6z3pH2vsa8hLPuwxsZnl9O41+Ifgs
uBQ+h/ELOA9ufGQxr4c7g95eryEjGP+CS5RznpvqQQvB+Z6DSWL6quE6V3W3
B9zfsdUi1cmjyBnc7U9kIWvHkMMi8616SgPcau93TyIHuo5q+yhGGp0+cLvd
t/J5i9fweaHVTNWtIejkMn4FXxZZr1HNeRiduYm9aeVsgefmGOTN2uO5s8C/
q0w54TmuOpkHPo7N5aH5RL26CG5EYvVO9Wqy59TTzK+Dz2ZeqjfmdanM65hy
s0V3VPzQ7e3+Vx2bl1hNU5znJ5Zrqns3Jdaj5cNW5GTmPdUPInur+gf4DHtD
4U+Ah0fmT73b2XCH/Sz1u1HMfwM/JtuR9fnMxOqe/klqvKfon+F4bD1YcdG7
0b9ENXiJ+qb7We9npMeoIrF/G9UK1Ywuz1/lsnqi/k3OwmX7HfQG1AvUW47F
1i/UQ3qx3tffp/4HjsTWL+WrQn+TxYm9DfX8SvXExN6Z4j7a4yU/KA6N3Gc1
86XYmhZYHF9Q3Q/MD/mJ/XPkoz/WfSg83mu14jgjsf8z+TzL+9fvsdV95aZ6
R67/h1Sol3qM1C/+B/UlENw=
                  "]], 
                 Polygon[CompressedData["
1:eJxFl3scl/MVx5/fr8fvedJclstYWLa2xUYlpOTShUTFighd3Y1yq7kkylyy
sM1la9OWu61SVq5pRaZhoilGxoxNNmyYy1zG++2cvfzxeT3nfC/nOd/zPbfv
tuMmDB3fLIqia6MoSr6710XxMfR3oLu0imIP+PVZMBz+Vhb0gd8b3Ax9C/g6
9BusP4D5GfBbwH8JXAr9A9AXesNmzP8I/pvw3wCXQV8OtoN+m/0HMT8Tfha4
FpzA+IlgN//H/iOZv4vxn5Wxbj/GB4LBoH0z9l/D+NXgKnAA44PyX+qobv6z
B/Su4AroH5ZBf8j/BxUx1h++Xx06zMrzev62YC/oPeuwibb4VcormPsEGbtA
DwAbwQ9luHsrbNUG/pAibKbOmzXDvp7lC/AfsXd/+EvgD4LflPlNwIHQNzB2
PTgU+rDE5aw/uIi5I+G3Ye3W4HDoCYyNB23VGwwHh9Qhw/WbKR9snvc0DGzJ
3i3UKdfKDytiz3Vl0J+N1WH39qnf/tA/UbcidFb3RVVRLASnMH4qWAx9LxgD
PRbcCT0D/buzZxD83fB3gVHQo8GGyHiG+X2YPxd+ozrGpKeAfdKftLG2du90
1vcsQsb/fWBQ+oY6DwWz8yye+7m09/QybPQ0/F5F2G40/CgwBozNr/Y9jPnb
ys/HpOeXYUNlKkufPwZ6e9aPZP2c9BF95SjGjwbjUq57F4D1oEvQAlX6/A7p
P7PyzrzrDs24S9esQd/VjdjbBA1wAeu+D47wXptxJ3PTPxyTngdq6KcaIUNZ
xrB+eSz0cYntMt6dO7gO3/D+9Q11Ujftb6wUYAWy9oOcxty34d+CH1iEPovB
KOidWX86c//lvt4HZzN+Thljp4F7c+0E6J1Y2w2Mz/M9gbzHwSfs+xCsgu6H
zEms/xh+JXxf+M1bIfsR+P5F/ONd+HfAmdBngTPMKcjuAbqCC+H78x3D+geY
/2Wezzs4iblJoGcz9rj37/or8ndjzZEpT10n5lp1mgg+SF0dc24hY4sShxch
0znP2wV6BGO90f+UOmylzZakzp7FM3mWyeaf9Md5eafe7Tl1zJ0HpoCpYJq2
1Obs3beI+HkLGQ/A9ykiPh8C46A7IvPsOsaM3TerWHs69GngDeh/gb+Bl8HF
ZeSr16HvzPvYrBX/3RNZo+H7wJ8K3z39sVcrzuBZHgb/gX4VrAP/BK+Bs1h/
JrjDXFHGGZSprL6tmNN22tA1jjm3FHoZuL+Mu/ROL2DtRXXcsXe7HIyE3irz
5aiMdWlj3Lj+MngV3Q4soo5sDf8i/BD4H8NvBb8u/b0j/92mjjXOXWnNgx6I
rCOK0H+6OdNcBS6p4z71xa9Ad6xjjee4tI69jr2W/uvaDqnTVZnXOkF/rY6a
Zm3rCt7TN0AXfcecDD24iPp2ch1+PD791Jg0V3yrjli9rwzf6+cc/IzUdyxj
+7ZCL3V3zDnXuLZ/xs72ddTwmVmbG5kTpuV/pqS/6hPe4xllxOpcdHyuCp80
t3dLX72xjNxpDj2+jrxpPpI3t34v41cf0BduL8PXlH9uHTnV83RuRq7Vvt5F
72b4ljnkf1XoaW4xfowl799c+SJzt6PbnkXU0dty3jN4lpPLmHPNC1VAegH4
cxVnWptx41mdfx6cVMbev1bxD2Vbb4wn69Fa8FLG1pOZP40xa+dl8L2KqKHW
wxfgnwcb1BGD1jJlKGti2tecaA46Eb5HEfr9Bf5ZMAf61+CZrMvKnm1Mwk8t
w7cXw/8u67K1dSb8Y/Aj4XeBvxr+oazze8Pf04icYa4wt5hjzBnmO3PfxXX4
/3eh92D+Uebb1BE/xpsxZWzZt6zO+tSuDn/VFtYA7+uDzPfWg4+gO7SiV7Cm
WdtmZw7X5/X996rINeac99Pu3p//aJt+a+9oT2Nvoy8qz3jSJ0enfbwDe5Xf
gCXQv21En2NcmivaNaPnHKG/gCeZW12FjW9g7Y2NsH2bVvQ+9kD3VJFvtdfP
G9E7PZX3Y3w8XUUPYy8zpI5+cDljLzH3MniwChnKUj995bwycvGz8JuwvlMr
7lP7blmHj+oL+sTRrO3cCvtaszvX0ZPbC7/ZiF59W/B6I3KSuWkw87ubC7UB
sobB72xvD7+0CrtbO3fM+m1Paf+gzJ+mz9trLWxELFyY9vcNsEMdOqiLvHnl
yrSvPqKvbGz+Q14n0D7zrrnZMefMQfbW7zQiN9nrGlvGh32abxLfIq804q2i
jZ7N+Ns0c6vn9U1jjr0o66/n/2odOfbd7E8nl6Gzuqqz+XRy9jU75lp7QnvD
ntC9rEOc+ZpGxM+yKmQq23/6b22qbbXnkip6LHste17fUsek/ecxP7+KO/Vu
tY91wpxprjRnftbPsb436xc1Pq+zdzSiZlu738h+YDn4dxU5Qv8wp5mn7s78
o4/Zu/uG8i1lH76v+TflKX9BFT7q28B40nd71/F28g3lu0kdXOsedTkfWQPQ
r2T+lSrs5HvIN6hvUXtQe1H3+xabnvnONa7tlvdhDexufqnD9/RBe+kR4IpG
vJl8O1lv7IXMoeZSa6S10jecb7kh8DvBXquO6HNs2s878+6OL8Om67J3MUbn
Zv9p7jXGjfW1WQv+lGucszc8n3/0yX7PWmXv7dtw22b04POz5lhr7OXWy3xo
zrJ++IYyZ5urH6mid7AXskZbq3+R8WvM2bs/zprrGpHfV+bbzNxlzjZ3DzVe
wH1V+NvvwYoqzuhZb8p4smeyd7LGWmuth/ab1jVzurncd4w1Qd/WXivSfvqs
vqp/nJBytd0/qshh5jJ9QF/QJtrAs2urL4JGM3KAueDW9Af9297A/GotMyba
tcJG6lSm7Z7L+5mT+df3hv21Pam96dtV+L4xYL/rP8wpG+e//8jYLczdDFZV
URMfTL+dmrl+1yLmzfkzMr8Yr8aIb87Z2Yf53rjfmpH6ahff2L6vezXjja9N
ljaiRmqr8enPvhF8K0zK/D6/Eb7lP/23Oq6BXr8Ve+XV/dG8/+vBH6p4K9iL
79KMN4N+pG+4xrWrUp5nOrQMn1dndfUu7Z+svdbgj9NnzFXWAH3Jf/gva9pR
Zdy58W4MuX9F5j/543L9TVkf/f/K1Meaa+1dlv5kz7FeK3z+4TyXe/q3ole1
P7XXVufh4Ik8iz3HgHwv2Iso057msfzXmrxfbbYBsj4Fg25WNA==
                  "]], 
                 Polygon[CompressedData["
1:eJwtlnt0z3UYx7+b736/r7a5hI3ZzFxHc2kImxpjSgm5lVsdrHLpdKEOjQ4h
xip000W6OiecyMSY2zSGSjKJcsglnMitaHLt9e7z/PE6e+95ns/n+7k8z/P5
pYx4pu/TkZ7n5UMUHAp73hcRnhcT8rzD6N/gBmzDFo/tJvoWVEOvwrYWiuAk
ttzA80bC45DGpJnENINL+FOxNYPmcJzYcmxJ+H5Hn4A07HdAY2xn8LVA14dk
aIDtJLYUdL7vebMg1eaNwfYX4y9CdWzF2P5GX4Kd6B2wGWqE3Nyn0XUYkwB1
oQO2Jqx1GPpReAxi4QBxyfiqoKvCeeY7BxegzM5C57MEHYsey5qegoPYFmMb
iR4H4+ERxj8M9xCXybcGoV/H/hp0R1fD9i76dnQjdGOoBC2Ib2h7r4UvHmrD
Hr7xI1TG9xG+cnQ09n3on+EXW/vLzDkVTuE/gq1+yJ3lCZ0H8TUDN29TbBex
XYEKaB24uRehyxi7HXZAK+wtoQm+CxanuzyI/hX2QGLI5UYh+gi+o3AMBrOO
QfCT5VcuejpMg0Z2L7r/EvxvokPYtqC/gR9gF4SxvY9vtzSxId0jtl3YAvRd
6Lo6S/5fAG2x3aa9BO58dKf17ExPoc/BWcurwZDE2ESoBW2Jqa67Cdy9RGJL
wzaR9U6AKb47R+Xnk/AEtNf5EjfKzug8/gbohrpXGAOjLeeaEjcW3QPug/sh
zr6rfSSg+2MbAAPtjnTmmqeJ/rc8PYztEOy3vaneLqNvwHWrDx8qQR1830e4
c3vFd3WmGngb/Q70RD8ArYmL4fu90ImBy50UbEnoetCb2F6wmnvIx9cTna37
YExL4rqiu8E87HNhke/28/99WM4qn0ZhHw3tsF/V/WvvOkf43Hdn2QFdhF4L
VfEvV44zdj8cgDttrZ2Iu1s1BiOIHQ7f4v+M+GhiJmOfpBh9g/iX0AuIiY10
Y5agl/ruHmpgqwnx0I74jpCKbqX92b1pj2HZ8H3AuIWQZXmiuu2M7gKB/Kzh
U/jEcncgsQNgmO9qTLWsutgL+6ynqP+qN+TAvVCdedOxZaA7QqZ9X+fdO3B3
pbPQfvqg89Q/0cnQA3JCLsfjbE9D0EMhC90J2zy+OTfC9Sad8wr0GlgNK1nT
Q6y1D1TCNwfbBmz9+b8fbLaajQq5/apGC7Gtgq/BtzHr0MWwXvNZ39Oe+qL7
Be6v9tlGOcK8H6snWk8vZcxWvUNhdx+qH/Xq4bpveE7vh70549DjA3efutdc
82Xgm67cRHeFLtA55O5Od7jYd2+BarQK9i/57lJYZjm3Cn8hbIAc4mYRVwBz
4FXVsJ1zfuB8XXWH2GYHrne9p3ODjXY+eq/WoY/BcdvjdditnIC99kbqLStB
11Rto/+Butb3/kVPYj2TfVe30XwvgMpWE3/iPwNnYYvNoT6Vgj9L+7caO43/
j7CLL7H38rKNqRVyPU+9L8F6SAW+K2H3fb0vPvNEwVHrFVpTHsz0XR/Uu1GA
nuO7HFavmG81U9nWHGE9Vv3gFmNuan/QHFu68hvaWK+QTbmxHr1VZ2fv/lDm
HAJjfPcG6XeJ8nM++g14y96Wm/aO10Z7zBkRuLe91Obbbj7doe56hnomzISV
vushz6I3ojf5rrd+Z783dtr5KA/1O2gZ/nVQDC9gS9fdhFwuKae6WZ5o7lL+
3+q7PtVOtaC+ad/S74cMdHvdGUyw+s00PRFe1JrCrj5VdwWsZRP6K1gRdnm9
3GpaZ1lh7/416795lsfd0dtYRxmssT4fia0IvRamEjcFpkG21dGDvvue6lv9
V334efsNdN5+Q8ZZDWpMNroE3xZ7Sxbi/xBm27euYbtqNVFuvy3+A3hTPbg=

                  "]]}]}, {
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1:eJxFlntsFlUQxdft9232UzQChghBhURQE1CjGERjJGpEhBYsloI8LLUt5dXS
QouF0kJ5U4UGQQOCj4AGMRAFIhqQgAHFNgKKgKCUaArhoVZBQKtYfycziX/c
zNlz587Ozp3Hds0tziwKgyA4wkpjFURBsA7i7zgI2ieDYCZcCnkyEQQT4LfD
56NTAf8P3Bjwcvhj8NtD09+J3MVzOTKL/WvdTkdkBc/fwd+RCoKR4IXgr9Dt
xPMBcBncDeAt4IngNuDN4Ang4ay54EPoX2WtB4+FawW/By4E3887lvCu25Ab
4CrBHyKf87MN6KawuRE8Hu5dnnPBGeDXwOngp8DzWEkCMgbdnthajJ3eyPnw
deCHwPnsxegshJvFaubsYLju7kMvnYO/Hp1h8MNZf6JTA9eInIfOCORknj9F
tmV/Krge3BHchvNfgruAt+JbCXgI+2ORBaz1sd1LIXYOI3fDTQPvQO5nzQI3
hLaE9yC3+h3pri5xpgx8TdLuYhHcD9jM5n2t4LlweeCUf+Mw1hz4b2KLTwJ+
NPsjWH/B98DOM/ATwTti81/xj5B/wF1kDZAue5s8/ivBGeD+4C/wJw/9emRx
ZN9xo2LM+hhcBBeBt4EnRUpMyw35fx/4RGg5dtHzQbkRei4pf0pZe8G/sX83
/EFwO/SrlYeY6wb+kb0l8KPhRrEWgxvhXgC/Dj7v+0Xo1yJfYU0Hv4rMRWcF
8jg6eeDV4J/BTayl4OfhzsXmv75F31TD2V3IJ/HnVGh5e4HvnwrfguwLfx6+
SvmYsvtTXbRFbzY6AbJXyvJpRmTvlZ9nec9KZHlgftTCLwP3Rb9FdxvYfehe
LimvsFEa2nsrkCN1P+Bq5MvYmuy5t9Tz8FnwJvAYr51GfC1F/xdkJVwJ+B3d
N3tDkWvQvZIwf3Iii51iWBNabFchz6DTDzwQvMLxAMUYnKXvRj8bucrrVDmz
ETwKnA4+g5yPzufIHPdftnrzbf96Pr8f27cNjMw32XsT7kXlNvqdiE+UZvWu
/H40aXFbxP4C7wk52PuJcy/Bt0mzs9/y3A3+qsdWMZ4dmZ2enmO/wg3yHqB8
uxxa3AqRG/BhdGgxzA+txsV/Aj/C++T34A5Jy5kuyKaExXBQZO/SPaZj/6Tn
lfpsq/s5BPmA+zcH3ems4+A+cJmR2TmdsHtWnCchj3hvOYUcHFnP2Rabvmp8
S2z9Su+SXwfRK9B7kWs8lzQbVNe6x+Xon0iY/X2J//MvU34lbKaMw16fpPVY
9ZNa75/j0dmHbnVg80m1rHu+Ff5pz7E3sN/gPUQ9vMTr/RZ0pnhf7Qo+6vHX
9z/BcxOykv3+4HNea/3AZ9UrwXelrJ9qNml+HQM/6HWp+70Q2qw8hLwHfprn
w73gR9ym7GguaEY87u9UroZpdheyeWfKepB8U18q9rnQHr6d9zfV+FvIyYHV
TA+fm+XqdUnrReqNmimawzexv8xzSzWi2b0W3OJ5NQX9ZmK22vuw7uU0uC60
OlVsdacHEjZDdafqT0ddRz3tsPc39cwsrzXlWIG/a29sMVF8bmf/SmzzV3ed
6zNUs1X3pRnVzP7DHn/l+YLQckO9+Gv2ZiKzvT9rZu2Huy5lM0X9cJbX2mNw
GT6bNHPXolflZ8s9hjNCy0PVbGfOHoitfw3VnPXZp9qvch/kSwfv1coZ1YXy
WXn9tvums519vuhe1nmfVF1cju2/RP8qdd671It+9/8Z9Xzlqub+zdj4KLa+
rH6r+aI58xncTlZZaLW5x3GW/yNpRtfH9m+mebQ7tv8Q9apxKZvj6rv74D/w
/x/1EM1u/eNthvsPpExV2g==
                  "]], 
                 Polygon[CompressedData["
1:eJw1mHkcVVURxy+X9x73AuKe+0amEAaomYaK7ZlaAmkalpLIWoCpKZi5lZgL
KEtuuWeaS6EpBqZkWqIllLixmLLFIqKiLIIofb+fmf74fd7MOeeeM+ecmd/M
efucPqrfyLIoip5tiqLB7+7NotgNHFsXxft0LKDxh7QPRL6nKooRraI4H30q
eosxq2m7E/kOsAr5bcavBs8jzwJvgr/Q91O+acu8D6IPRx8GpiCvADchn0n/
m41Ye1dwTB02KP+cvnfLaHuLMavAv/ju3+Al5BfBQ8h/BL+rws57wRC+mU/f
PHA/+gPgb+B812fOV2nfjzlfRn8FdEFux3oX0PcC+ifrgPIc8Kk6bFwJlqft
x9G2hr73wDfrsOky5LOKsPUb2a/9RyN3Zv7L6ZuFvhf6YNC+bVFcRVuPZtg6
HPl7Zdj8X/Sh6Gejz0BfB9aCBmObYH22KbfAgeBqxm9h/EmeF303I59L2wfM
tRD9DfAx8pZGrNkdDEpbltC3GCx1bfCB58b3F/P91s1Y+7a8T204nW9a2N8O
DEQ+lLYri2iz70PWGI0+k2/+zrcn2oa8GXxHH6PtvdyT+9CftFlbNzbChhsY
e30Zts2mbRDznYB+C/oycGMZYxy7kP4f0X8m+rgq7sC7OBV9IvrvwRll+LP+
MDTPvwMYjjyX8YMZfzL9d9G/NW3TkR8D2yIfwP6upb8N409B/w9jXssz9Wxf
B1cydgxjPmKuXRnzfBn3vVsdcaF/jAWz8zu/cax30pX5rygMFnygDii73mnI
zzFmIE2n8f0kvtvciLUuRP8N+k51xNuTYBfkDsx3If1Po++I/nTe363gr8h3
gLuNbXAn8rBWzHc/+gb0p8B1ZcR82Ywz8Wy+C36LPC3jbDq/j4EnjfcqYsRY
MRY9a8/83oxL5UHgPuQnwONgOWNXJEax1jll9L1jzKb/dWpGnMsdcsjDyGsY
fw59Z6E/ir4p9VvQ16A/AiS4UWAq8vHsb2QR38tFfwKDy9iDe/l0M+7Ac/8+
WMR8I4rY7+25N23TxpXJBcr6p5ywP9/+0ljzjOpY07XPlsMaYaNtytru+iPK
8Nk+2DagFbGqT+vbDydfanO/VvicvqBP9K8jJj2b2Yzpiv5OI9ZyTe+jZzO4
RR/X1+fQ/wL4QxX8uw/9Y+lfyvivyHfJT2+hfxF9b/RL0d9AP7yOOZ17ZJ7X
lLyPIUXMfQU2TiwinoYwfg++/4WxwJhD0HdB/xn6AvSD6jgH7Z2APjd9aHrm
EffyRJ63/PfnKmzQloXgCOS9mG88369G/1odPjUo+fd1vn+tETnsnswN3ZKf
VjHmC3XM4VyLQG/kPem/zG/RP1vHnd+WvKIvKJ+U92Wb6w1N/9G3tUFbPL+v
1hFTxpYcKBcaM/qSPrUY/e4q2pSXgB1Y/5IicpK5SY6Va41pY9s7cW7X+DLy
dulvr6J3ryNHmmvMOeamYaBj28gJ5gbP3LN/DRycfGCMG9vm5760baBvPTge
+Vr6Lka+BEyoIvf+mLkuKCMHzzLXg5uQf5051ni3ZjD33pp8Iace04rzN8aM
rVPrqBW8KzlRbnw2+ftE9JvRrzdmkfvI8chHM8cZRbTZp4/pa/q3+atL8qf3
2asOTrdfn7yqFRzpnXgXcmed/vgI45t1cMxW4O3kHs/MGBqaZ+kezT3mIPc+
P+sj7buOvg3o60FHxm4FZtL2DHgO/KOKMY7V/slVcLrxbE4Z24pzkXtsH1BH
jbBnHXFq7WBON2/2zFzf2T6wE/LOWRPoM/rKzvoL8iTmXsJ6J+f5yFFyk/yx
BRsepG8K+Bj5CPomFJHPf0D/5sz/5oNNVdQ41jrG0CXYe3kr7O7Fd4eDDvQ/
WkZ92D5tNdfLQdo8IPc2Nr91b8+UwUHusX/mO++wS+7JvX29jvqpR/qvd7Y9
7Z9D71tGzBq7coRcMVTO4h66ZX1nTG3bjBgxVqz3PpPxLkfJTc51KOhXxpzq
frONPlvHXEL5gDq+P7COWNKmHtnm3K7ZLW02Hq1hd879KFtPds7ve9ZR91p7
7531pjVox2bEqPPLodr5rYzPa9APy2/sc4xzyVkHJ++6N2NgUfLlYXXc3zrk
tckPxyZnKNvmfX9YRQwYCxXt7ergpR2b4QP6gjXCoFbc8dSsD6wnS/0ZtJW7
6qh5rH3MKeaWyRnPxvDMRox7KPdr7e3ad6FfVIQN1mz/5x1ruXbpX96nNtkn
N8lJjtGH9eWfoK9NzpanrQXHg41V1LRb57065n3wURXfOua85Ge/beY+qmZw
hTFtPWiONtYbuVdtd0yPzLf6/Al11GDWYubQczivfnnO366jX77tAw7Rl5vB
uXKvnH5RK+Lf87OG3KOOMd69PtA353Ata2rnFsqbyni/eWeek7lkf7B73ol3
sS/4Ffs9row3h28P+cm2ecltNyRfyXHm0RuraFuQudX13Uv33LtvpDnp76Nb
8SaQS+SUI3NN1zaPfamOO/AuumZcWbNZu1mf+i64Bowu4068mwVV1ArWDKe0
Ioc02gYfmVvMoeZSOVfutSafxPiJZdTqi7Oecz7HLM2869hnk6vtc005e0P6
uxyo33TKeuuBjJWXwItV+JC+1KYZvqcPFnXM4VxjwD+r2JN7swb3zdPK9+Z9
ZbzltOHSMuo9bXsV/RWwLvOK8rj0b9uKrBeMCbl3Hv2Ty6iB12SNaY1lbWXf
tKyHrTmtPX1n6cv6tG+dtllvaJ+1we1Zr5jDzeUzkl+tyayFzdHmanOiudE9
jsn1+7fifLT3ajCnijPSdtvs8068G+/UuzWGjCXf3fvKhVW8lawPfFv7Tlhm
XFfxTvW9YJuy70PfHP6XcG4Zb5HO6Y9yqtzqGGt1a/YV+d+Btas1rG8L78y7
MyfKY72TP81HXZMDjeVpZXDjdubRMt5YvrV8s3qmnuU2dejnFfEfiW9b2x4v
o21j7sW7Hl/GnrbkO7Cug1s/D+YnH5i3tUnb5Ex5p1Mdb1PvT27qld841vx5
VO6ha9Zdn/COiZdxzHdQM94snofv55VVvBF3cO1m7OflKu7O+9L3jqyjZnbO
o3LsjMzH7bNuWoa+HLyLfEYdHGDs984axjzvW8P62BrWWtYafr9m/KdkPtGf
5XpzgLnAOZ1bDpubfOpdOMdbmV+ce27ygz41P/fj2/cpsH0dNb92exbyhedt
7pIj5Ir/AcwjjBs=
                  "]], 
                 Polygon[CompressedData["
1:eJwtlnm4TVUYxrdzzzntbShDESoUGh6pDCHK0IDomsfci2vOeBXJWChToQyl
UoQeDZSh0axkzFDmDMU1pLjhMU/93uf7/vg95z3vWnvttdf6vm+tEhm9G/eK
BUEwGhIwKBkEBzCeh9aQPwqCIXh/o6uiq8HjkfXbj1cOXR4qQGX4E+8g7IZX
6NMarxUMR1/SuOiyvOhBqARhShB0wssLt0A+WEa/3vQ/Hw+Cc5CDfgvxctPW
C/87dBJ9E4TwAt48vAthEFyES1AAfzXeKljq4yUZJwG307Ze46EboE+hX6W9
IboRPA1PwWC8I7Q9g+4GXfUuyMOcx9JWC10TnoRsH+MB9P3QD70Frwz6TtiE
3gg/QyZt15njNeiC/gzvBjrSekBJ+v+OVwB9L7o03Ad7fE1zoiP/7vl4udDt
tR7MKwlxeD1pY8+l/TRjn4GzUId+tX1PT9BWF13c1+NFvBLou+FRqAgjNFfa
KqG3sRdbYTe0x5vPeE1o74PuCQqkxXht8Sagd6B3wi7BMzvhCPTTOuCNTtr+
ZzB2B+io78Yfqdij7Qx9z0I79MSYjaOYuAB70e/gTYKpkEGfDXjrYaOP0Qpv
HXptaG0j8Fri/eZa7Xrfdo8XxV0fvFvRt0Eu1j8nFE5YrOf3+PwRvQSWe/8e
sNg9td1Mn/w8sxV9B7okuhQ0pV9f7SEMgAm89zm8NPRE9Nv6JujvsVOEZ4tG
NkYLvKF4o+AN2BZaXK1B96XtLnSxyGK7EBSGDb6neSLLne7oRT6/66zhNejm
uaN4KpaweC+ILocun7B40Dgv0a8g/wslrFAo7pRnedH5YHNo89L8xkIa/f/D
O4Y+Dr/4PPW96ehO0BHm0adzZDVA8RARD12UL8xtI9TRM/R7n35LoDu6Ed5S
9LLQfnvgNcY7Sv9j8ANeV7wD6JNwKm5rn+nx+Q18CwthASzyMTTuKvQUj6fV
6J9gC89vhuno5rQ9q9rH/30wV/PHa4jXADLQn+Idpi0rbvs2BG8m3icwC8b4
dyren2DtqkM2/qnQ1myN14iuXhuUt+cU+3AI/oJ0z7EsdLZ/46/KKdVY1a3Q
2tp67hxFp/CeGPT0GnoCb5/m4/t1AH1Q71fO4K2D2dBZ9R/vPfQ0+FB7h/cP
3geu/0WfDC1flbeX41Z7VOM2oNfDJHQ9vLVxyxnFYow1iEMC/vD5t0navPbD
HtgdWr5rX9onbR+aoptBC6iHt1X7pP3x9VZ+HFf8hTZ3zbOD5/6b6HEw3OuB
9vwj9HSY7O9oBv3Rg2Cg1yt5ql3L0StgpZ7zmNAcPkbP0LtCi9e6eKlaL/Rk
//baeFPQUyE1aXV0NnpOaHGjMydL60J8pKRYLmqdZ+LNUB74d9SHNuhhOne8
fujM2eznzCavH1dZ6ytx29NZyruknaHfo1fCCo8Dnc8X0efhAqTy7A6e2x63
PFHeHUR/FVrdT/VY/xr9JXwR2pzSPKd1blxDX4Yr2qvI4nNTaLVijO+zYqIt
uh3U9/UZj/eWny2ZXifLJOz+oHlVRleBoYpBvDNwOmZnmc7BBOs2iraq9KmW
sHNd53NpdAWoCOl4adDO++u8bII+R7/XknY/0T1FOfg53gJ9a8zOadVR3UcC
+ueILIZ1Zt8DpWA7bS/r7Inb/k8LrVaoZtT1evau8im0NsXsYLw5qh1eK0b6
uat1a676H1ntVQ0unrD7mM7xoX6O605WHWrAZd9r5e0V9FWvF+M97hX/Opsr
+51iIG1V0I9BS7/fjMOrwXtq+tmlM6yW35WGaX0iu9vorNI5Vxb9sH/7ALwi
9C8KD/ldRuuh9kf8LrMTbxfs9ffre2+gm6iWx+y+obkcRh+C3H7n+h9d9m75

                  "]]}]}, {
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1:eJw1lntoV2UYxw8efifOocyKLAvMlVJmmVFWgqhtTEMrUqEsKq2gItPUWopT
a7VScVvt3uamu7iL7qKb7ua2avMyL+UMuhJFUBRFdCMqKqrPl+fpj5fv93zP
877nfd/ndtIefWbJ6jFBEHzICBllURBMh7weB0E/2IfWB27k+QIwIxUEr2FT
jr4QXsg4CN8JHkfvxWZaEgQnwX70EfAoegd4Pfo78BPwOfCrwJ3YnB/aXNk3
s04V37oNbQW8ARxEHwXfZnTBB8E87MeCa7FdxbgZXoF2ha+ZDm5lfhs8B8zB
5na0Kmxegk+GL0Wv5jkT3oh2CP4C/Af4ej9vAdrn8Cz4JuxLea5mzWXww4wj
8DNoX2OTjc1B+Er4TfA3tB58nvYEnwk2YD8bXM7c3fAS9Pvh09C2YZsG1qNf
A5bz7gawEL0F7EHfHtra2sMMcDc2C8C9se1tKrwU3gN2M6Ymto6+9Qjf2YF2
AP4EuA/9cfBj7Ff43u4DJzCnNTSfLmZUBOaL7bHdbyHzJmPTDK9E38xowaYT
/TG0WvhD4IDiBByLbQFzp4R2XvlOPn8WbS5Yh/2Tijn0y8DN6BsY4/z+pU+A
Z6OVxHaP8vXdoZ1L/qvheZHilffr2E8TegNaXejxCV7q96ZvfITdWnA/Nu/B
n4a3whsju4MetG74Vvi78NPwIeZ2sfZb8Cr0KLF4Vdx2gqc8tueiV3ruVINv
uv149FsTy6sRtAz4aa0PP8bohE9PbH3NuwR+Fn4Wfgc8y+8kH61W+2D9/WBP
ZHHxN+/7Ijuv8rLI80JxeFFi+XMispifrzjg/aivfwvvrw0tfl5FH/a8Gw/m
uu+KsS1g3TL4edg/4LFxD9jLu3z0f7HdxZil2EA7B7tC+GF4Ai9SXYBfDB+C
n4wsn5XX3Z6zeeA/sT0rjmdguyhlNUc5+wHv1qC3R2ajueXoo+grec5K2Z3L
5ynmzvN7lo+0/3bsc8Hr0AfcF3/Etjfts9ZjqUV57PvUvR3leWlocfW+6g68
Dd4cWbwf19n9bptj86nq3iTWuJBRqxrmvpOv09DavU52KU6Zs0T5H5lfVPMW
JHYHqqs3wq9kNMGHeH81vA1+BD7Fc3Y4slzYw5pP8Z3L3Ua68n0f+nr0Lj/L
nsjifBv8L9XAlMV5Ezjo+Rt6HKrW9aPvhS9HPyU/+x3KPttz7WXdF+82ej38
Hv48vMPv6mH5Pba41XfPwL9wmwNof8KLPU4Whrbnu8DvvA7LRrVFcTjG41A9
qyK2/F2muhCbH++UT+FNqrOqE/DPPN/luya370X71ONHdWCW17E54Fd+FtW3
Ou9Nim3li+p2OdqvsdVD+eVL9Q8/b5nX8Eq0nxg1HgPfeAyr/oxLTC/hHN96
XcpOWbx0s4eJ2nfK6km+aq3X7XpsJ3oMKQa6GDnwX7yXvQj/Wd9hTmNg/asu
srsciC2O1FOOheZT+WUktn5Ur5oMnpuYL/I9x5Wbv8W2B/WQT/7PA+yfA+8N
rRfortPV772+qU+pv6xindXMmRRaH9GzdOXszMTqjmpCesr6+zps27xPqIe2
e91T3+nzmvN7bDWmA70AfDC0+q8Y3eX9sSO2/xDdYY3H9iF4acrmaK5qvfym
+rBFvvHerX+GNd6bi+DDnqfKnQ0pi0/VolzlfWD/EHnK8cD8qH8F9Z0Mv3/F
ZCtr7PB70Jrz9W8RWG3f4nuQL9Ndz9S5sV/s9UG9Rv9WsxPT1AfVD/P836bY
40Ex8CNapvtC/yqveA0s8X859dZN/n+ksyjn/gOhXGsI
                  "]], 
                 Polygon[CompressedData["
1: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
rMWa7PH/q+6KOg==
                  "]], 
                 Polygon[CompressedData["
1:eJxNlnlUVVUUh2++7qv7GtQGp5YDDg2r0lxq6dIU5xzKxFXS5FSrNAVBBVSE
JNQ0UWQQU0AgFRAZFEhGE3BgEJVW89xqnud5/nZ7/9Ef31q/9zvn3HvuPnvv
84IWLQ8J7+Q4zmZwwR9wnN0+x9kD2XDc7zip0A8d7jnOcoiAOvHxfkX/Br/D
Gh6wGkoZi2DsE7zd6BHoMTAawvAO40Wh30G/C+9BK14j3jDePxxGwM/4P8Ev
sI2xauaMwR8NY6EFrw3vCET79Dnvwwcyn32k+XRfOehcGGdr2pl/lN9VcAle
IKDfI/MvRX/Bms9tn/LcL9GX4+9CH8PbyboMGIpXjXcar5DfB+EyvAy8er+u
6QyTYCKcxWtnbDL6H/umGrwU1qXCORufwHgNv2vhG+bF4cVDAjzn11g1obvB
1QLzn8Ebhr4FhkIq627F70B3MFbHs+qhE94F4LPvkX1uwt8I6RInvG9Zuwdd
iP4RXSJn6mqcY2wvcRaXRrwC9CmJg83fhzcbfRfMggq872C97f979A+exuMM
XjB7GR/Q7/4DfzNeFWN/ov+CFnSDxB6etxw5gVeCvgbdG/rAAOgf0D3J3gei
s9Dj0dNhGpTxvAY4bvsMwWvyNDfa0K3QbHnl4l0Y0JrIknfjbSAOiRZHOeft
6MOsn4LeK7mILoe/IclyVs7aYX6xp3uQvdwJz/o1ZyR3yl2NheTJSLgNmhmv
xxuFLkEvQ7/AM16El+AcFOEdgi0Ws7N47TYmcTyKdxp9CpphHl4hXgLvW+9q
jck+n3I19snyTfLb1t7Mu4/I+aIHo4cENK/y8Q7AeYGxa/EGQZOdy3XoWJ4Z
iX6V525FJ8HF+BdBrfUPqb3H8ZfAIebNwMuVfoPfF4Kg3N4vzy5G98TrFdCz
j2VNd7we0At2MGcN3mrYju6Kt1byGT0KPRZul9jj3c07Z8EO9GC8+9E56IXo
BTAX8v26diQ6i7Fs2AtPwxZIsd64FZ2GHoh+Ep0IG6TGJb42Nkhi6+m51knt
Qy3cxHdU4MWiE2U9tDBvhfQddBJjK9GrYBks9bTeh1s/vYr1Vwa0ThqtH3SD
ffKdkGm5W8jcAjgIU/+Xr6Jz0GF8fzg0+LUPdOEZXeEKOS/mzbScrUcfgwPo
OVLT6EjWrYD9VlNS85WejlXDPXj3wn1QwJxIvP7oAdDZvrEV7xH0w/CQ5WmN
5USeX/dQByc8rdn99v6Tcs/YGWbIeaEzBfQ4vMWwBJ7AC2GPs2GBq2cqeSDz
h6B3MX8h/iLYJ2cs5wqPSY3ZPRiEvl7y2858oqs5FoOeiw6F6TDN1dzsyVgy
66byewpsQ3fxaX5KroVaPHLReZZPfeUOkF7g0zt3F9wosWP9YquVmTAD5ria
c5JjBa72i//yCV1p957cf/2sjk/6NTekn8nd3h3dI6D3j9xDma7W2CDrsaVy
vlBpNT2Z8Umunp/k5gRX73jJRblz0iDd0zySfIqCpYy96WkPC0OvgpXwtqe1
lyzfbWeQYX1Gaj6PtWXSX12tZYlbFPOiPY239JAU61fSt+S/SAxzo+38HsUr
srySvncQ3YY+A/mSv57WhPTubL/2cbmv5N6abF6p7NtyKdjuD+lTRZ7285mW
m1Xoo5brodY3pN8+gH4Q5tv749lbnPR79Fqr86/hK0/verkjKyVfiMEUuMPu
cOmxUpd56D7Q26f3tNRdBKxz9T+V/G95y9N4F9udIXGusPd9iP4IPvY0VyVn
N6FvYGwnc9KtT0nvmsfYfFefI2d4Hq/D0zuozP7jvYx+xdMe/6mn//lkTPr+
Z57ev8FWe+shAV6zs5Gaeh39hqf/DzbKe2WuxWCd1Y/09Dh0PPwLc4N4Yg==

                  "]]}]}, {}, {}, {}, {}, {}, {}, {}}, {{
               GrayLevel[0], 
               Line[CompressedData["
1:eJwt0DtOAlEABdCnolBpJQVChGiF/1p+goBKR2KHibAA3YCuUK0EEVTUPWAh
NpxJTObMvXeS+WRyvdv2zUII4ZIn8nRcuOJIb8VCuOBQP5dnNDmwG7LOKft2
TVbZ0yuyTIlduygL7Oj3nn3Htt6TXa7J2FV5QlLPySybrNl/zPglwZgR0fc/
L4XQZ1EfyBeGOMKr04hYdI98451l+0NO+GTF/pLfxPUpP6yS8pIN0qzbx7JA
Mbpm96P3ssUDj///cw7HmyW6
                "]]}, {
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0LtRQkEABdCFwTrQQRsAf0QQSSQqgvxUkAKkEyXTQOoAUfwhdqHMCHWI
5w3BmXtvsm/fbnS6petYCKFCT2nKZDyEdTr6VyKEKVf6p5zwQdt+l2+80rJf
5JhL/UmOeOTCHsoB53re2bn46ptbcpMURXtNJijoC/eZ80s+Ol+OeSZr9+UD
ab3o7CMy+rE8ocS2fSrL7ET/Kc+osmvXZJ0Ge3YzuiP7+sDZQ3L6t/xhxoH9
J5fRw7nrobjT7ynrN/I2tnrPf4u2Kn8=
                "]]}, {
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0MkuQwEYhuHfKRfiFkwxq0vQxqZdVNS8QFeExLBgZe4NIMF1YIGaaij7
StRleMTiyfv9yck5yWkdX8jMN0XEKNkkYkfr+kXZHm6JSHNkD+kgAxy6+7WP
Xg7cPdrNvt2lnXSw527XNnbtVCoiYdv+8Z0G36y7b/WGZftCzzmj5N7Ujb/n
mHOPaYGifdccUWHCvtcHHpl0P+kzU3ZVX3hl2v2m79SYcX/oJ7P2inevsmgf
6wmnLLkv9Ypr1tw5zbNlj2gm+f+fvzWXL0Q=
                "]]}, {
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0MlKgmEYhuEvpDOodgnZceiiwUptUOgEGqBa1ElUi9qaWq0KklJSw6nJ
BsuOy0taXNzvww/f4p/ZOsodjoUQNpmKhNDTOy3z634fD+GNH/ervvBM3+5q
hzbfdkubfLmftEGdT7umj3y4/7w9oOuuaoUHGva5no22+0D32ePWXtB55ri2
ZzVGfvTN24tcuJO6xDIFe0VTFN1pzbBKyV7TdTa4tLOa48od93aCG/e27rDL
vX2sJ5xSt6c1Ssc9oZOR//85BKbiLg8=
                "]]}, {
               
               Line[{980, 977, 1752, 1754, 996, 1776, 1777, 1475, 1750, 1014, 
                1812, 1813, 1485, 1767, 1030, 1499, 1854, 1856, 1048, 1843, 
                1511, 1889, 1891, 1068, 1929, 1930, 1065, 1085}], 
               
               Line[{983, 1759, 1760, 978, 999, 1478, 1787, 1788, 1790, 1017, 
                1489, 1823, 1825, 1828, 1033, 1870, 1871, 1034, 1051, 1903, 
                1905, 1906, 1052, 1071, 1525, 1939, 1941, 1088}], 
               
               Line[{985, 1472, 1762, 1764, 1003, 1746, 1747, 1482, 1786, 
                1019, 1821, 1495, 1797, 1799, 1037, 1838, 1508, 1868, 1055, 
                1899, 1519, 1916, 1918, 1074, 1950, 1951, 1078, 1091}], 
               
               Line[{988, 1779, 1780, 1477, 1006, 1804, 1486, 1814, 1816, 
                1022, 1858, 1859, 1502, 1850, 1040, 1046, 1892, 1894, 1058, 
                1932, 1933, 1524, 1924, 1077, 1954, 1531, 1957, 1094}], 
               
               Line[{991, 1001, 1791, 1793, 1010, 1831, 1833, 1834, 1494, 
                1025, 1873, 1874, 1506, 1865, 1043, 1053, 1907, 1909, 1062, 
                365, 1942, 1944, 1081, 1962, 1963, 1535, 1097}], 
               
               Line[{993, 1800, 1483, 1796, 1012, 1836, 1497, 1839, 1841, 
                1027, 1876, 1509, 1879, 1881, 1045, 1878, 1521, 1912, 1064, 
                1914, 1915, 1530, 1947, 1083, 1965, 1536, 1948, 1099}], 
               
               Line[{1084, 1882, 1522, 1928, 1067, 1890, 1512, 1844, 1842, 
                1047, 1855, 1500, 1801, 1029, 1766, 1765, 1484, 1811, 1013, 
                1749, 1748, 1474, 1775, 995, 1753, 1469, 1751, 979}], 
               
               Line[{1086, 1072, 1927, 1925, 1069, 1887, 1886, 1515, 1901, 
                1049, 1852, 1851, 1503, 1031, 1826, 1491, 1810, 1808, 1015, 
                1000, 1774, 1773, 1771, 997, 1756, 1755, 1470, 981}], 
               
               Line[{1090, 1938, 1528, 1949, 1073, 1917, 1520, 1900, 1898, 
                1054, 1867, 1866, 1507, 1036, 1798, 1496, 1822, 1820, 1018, 
                1785, 1784, 1481, 1745, 1002, 1763, 1473, 1761, 984}], 
               
               Line[{1092, 1532, 1955, 1952, 1075, 1922, 1920, 1919, 1066, 
                1056, 1514, 1885, 1883, 1038, 1848, 1846, 1845, 1028, 1020, 
                1488, 1807, 1805, 1802, 1004, 1769, 1768, 994, 986}], 
               
               Line[{1095, 1959, 1958, 1089, 1079, 1527, 1937, 1936, 1934, 
                1060, 1518, 1897, 1895, 1041, 1863, 1861, 1860, 1035, 1023, 
                1818, 1817, 1492, 1829, 1008, 1480, 1783, 1781, 989}], 
               
               Line[{1098, 1537, 1966, 1964, 1082, 1946, 1945, 1529, 1913, 
                1063, 1911, 1910, 1059, 1044, 1880, 1510, 1877, 1875, 1026, 
                1840, 1498, 1837, 1835, 1011, 1795, 1794, 1007, 992}], 
               
               Line[{1103, 1100, 1974, 1976, 1119, 1998, 1999, 1544, 1972, 
                1137, 2034, 2035, 1554, 1989, 1153, 1568, 2076, 2078, 1171, 
                2065, 1580, 2111, 2113, 1191, 2151, 2152, 1188, 1208}], 
               
               Line[{1106, 1981, 1982, 1101, 1122, 1547, 2009, 2010, 2012, 
                1140, 1558, 2045, 2047, 2050, 1156, 2092, 2093, 1157, 1174, 
                2125, 2127, 2128, 1175, 1194, 1594, 2161, 2163, 1211}], 
               
               Line[{1108, 1541, 1984, 1986, 1126, 1968, 1969, 1551, 2008, 
                1142, 2043, 1564, 2019, 2021, 1160, 2060, 1577, 2090, 1178, 
                2121, 1588, 2138, 2140, 1197, 2172, 2173, 1201, 1214}], 
               
               Line[{1111, 2001, 2002, 1546, 1129, 2026, 1555, 2036, 2038, 
                1145, 2080, 2081, 1571, 2072, 1163, 1169, 2114, 2116, 1181, 
                2154, 2155, 1593, 2146, 1200, 2176, 1600, 2179, 1217}], 
               
               Line[{1114, 1124, 2013, 2015, 1133, 2053, 2055, 2056, 1563, 
                1148, 2095, 2096, 1575, 2087, 1166, 1176, 2129, 2131, 1185, 
                560, 2164, 2166, 1204, 2184, 2185, 1604, 1220}], 
               
               Line[{1116, 2022, 1552, 2018, 1135, 2058, 1566, 2061, 2063, 
                1150, 2098, 1578, 2101, 2103, 1168, 2100, 1590, 2134, 1187, 
                2136, 2137, 1599, 2169, 1206, 2187, 1605, 2170, 1222}], 
               
               Line[{1207, 2104, 1591, 2150, 1190, 2112, 1581, 2066, 2064, 
                1170, 2077, 1569, 2023, 1152, 1988, 1987, 1553, 2033, 1136, 
                1971, 1970, 1543, 1997, 1118, 1975, 1538, 1973, 1102}], 
               
               Line[{1209, 1195, 2149, 2147, 1192, 2109, 2108, 1584, 2123, 
                1172, 2074, 2073, 1572, 1154, 2048, 1560, 2032, 2030, 1138, 
                1123, 1996, 1995, 1993, 1120, 1978, 1977, 1539, 1104}], 
               
               Line[{1213, 2160, 1597, 2171, 1196, 2139, 1589, 2122, 2120, 
                1177, 2089, 2088, 1576, 1159, 2020, 1565, 2044, 2042, 1141, 
                2007, 2006, 1550, 1967, 1125, 1985, 1542, 1983, 1107}], 
               
               Line[{1215, 1601, 2177, 2174, 1198, 2144, 2142, 2141, 1189, 
                1179, 1583, 2107, 2105, 1161, 2070, 2068, 2067, 1151, 1143, 
                1557, 2029, 2027, 2024, 1127, 1991, 1990, 1117, 1109}], 
               
               Line[{1218, 2181, 2180, 1212, 1202, 1596, 2159, 2158, 2156, 
                1183, 1587, 2119, 2117, 1164, 2085, 2083, 2082, 1158, 1146, 
                2040, 2039, 1561, 2051, 1131, 1549, 2005, 2003, 1112}], 
               
               Line[{1221, 1606, 2188, 2186, 1205, 2168, 2167, 1598, 2135, 
                1186, 2133, 2132, 1182, 1167, 2102, 1579, 2099, 2097, 1149, 
                2062, 1567, 2059, 2057, 1134, 2017, 2016, 1130, 1115}], 
               
               Line[{1226, 1223, 2196, 2198, 1242, 2220, 2221, 1613, 2194, 
                1260, 2256, 2257, 1623, 2211, 1276, 1637, 2298, 2300, 1294, 
                2287, 1649, 2333, 2335, 1314, 2373, 2374, 1311, 1331}], 
               
               Line[{1229, 2203, 2204, 1224, 1245, 1616, 2231, 2232, 2234, 
                1263, 1627, 2267, 2269, 2272, 1279, 2314, 2315, 1280, 1297, 
                2347, 2349, 2350, 1298, 1317, 1663, 2383, 2385, 1334}], 
               
               Line[{1231, 1610, 2206, 2208, 1249, 2190, 2191, 1620, 2230, 
                1265, 2265, 1633, 2241, 2243, 1283, 2282, 1646, 2312, 1301, 
                2343, 1657, 2360, 2362, 1320, 2394, 2395, 1324, 1337}], 
               
               Line[{1234, 2223, 2224, 1615, 1252, 2248, 1624, 2258, 2260, 
                1268, 2302, 2303, 1640, 2294, 1286, 1292, 2336, 2338, 1304, 
                2376, 2377, 1662, 2368, 1323, 2398, 1669, 2401, 1340}], 
               
               Line[{1237, 1247, 2235, 2237, 1256, 2275, 2277, 2278, 1632, 
                1271, 2317, 2318, 1644, 2309, 1289, 1299, 2351, 2353, 1308, 
                755, 2386, 2388, 1327, 2406, 2407, 1673, 1343}], 
               Line[{1239, 2244, 1621, 2240, 1258, 2280, 1635, 2283, 2285, 
                1273, 2320, 1647, 2323, 2325, 1291, 2322, 1659, 2356, 1310, 
                2358, 2359, 1668, 2391, 1329, 2409, 1674, 2392, 1345}], 
               
               Line[{1330, 2326, 1660, 2372, 1313, 2334, 1650, 2288, 2286, 
                1293, 2299, 1638, 2245, 1275, 2210, 2209, 1622, 2255, 1259, 
                2193, 2192, 1612, 2219, 1241, 2197, 1607, 2195, 1225}], 
               
               Line[{1332, 1318, 2371, 2369, 1315, 2331, 2330, 1653, 2345, 
                1295, 2296, 2295, 1641, 1277, 2270, 1629, 2254, 2252, 1261, 
                1246, 2218, 2217, 2215, 1243, 2200, 2199, 1608, 1227}], 
               
               Line[{1336, 2382, 1666, 2393, 1319, 2361, 1658, 2344, 2342, 
                1300, 2311, 2310, 1645, 1282, 2242, 1634, 2266, 2264, 1264, 
                2229, 2228, 1619, 2189, 1248, 2207, 1611, 2205, 1230}], 
               
               Line[{1338, 1670, 2399, 2396, 1321, 2366, 2364, 2363, 1312, 
                1302, 1652, 2329, 2327, 1284, 2292, 2290, 2289, 1274, 1266, 
                1626, 2251, 2249, 2246, 1250, 2213, 2212, 1240, 1232}], 
               
               Line[{1341, 2403, 2402, 1335, 1325, 1665, 2381, 2380, 2378, 
                1306, 1656, 2341, 2339, 1287, 2307, 2305, 2304, 1281, 1269, 
                2262, 2261, 1630, 2273, 1254, 1618, 2227, 2225, 1235}], 
               
               Line[{1344, 1675, 2410, 2408, 1328, 2390, 2389, 1667, 2357, 
                1309, 2355, 2354, 1305, 1290, 2324, 1648, 2321, 2319, 1272, 
                2284, 1636, 2281, 2279, 1257, 2239, 2238, 1253, 1238}], 
               
               Line[{1349, 1346, 2418, 2420, 1365, 2442, 2443, 1682, 2416, 
                1383, 2478, 2479, 1692, 2433, 1399, 1706, 2520, 2522, 1417, 
                2509, 1718, 2555, 2557, 1437, 2595, 2596, 1434, 1454}], 
               
               Line[{1352, 2425, 2426, 1347, 1368, 1685, 2453, 2454, 2456, 
                1386, 1696, 2489, 2491, 2494, 1402, 2536, 2537, 1403, 1420, 
                2569, 2571, 2572, 1421, 1440, 1732, 2605, 2607, 1457}], 
               
               Line[{1354, 1679, 2428, 2430, 1372, 2412, 2413, 1689, 2452, 
                1388, 2487, 1702, 2463, 2465, 1406, 2504, 1715, 2534, 1424, 
                2565, 1726, 2582, 2584, 1443, 2616, 2617, 1447, 1460}], 
               
               Line[{1357, 2445, 2446, 1684, 1375, 2470, 1693, 2480, 2482, 
                1391, 2524, 2525, 1709, 2516, 1409, 1415, 2558, 2560, 1427, 
                2598, 2599, 1731, 2590, 1446, 2620, 1738, 2623, 1463}], 
               
               Line[{1360, 1370, 2457, 2459, 1379, 2497, 2499, 2500, 1701, 
                1394, 2539, 2540, 1713, 2531, 1412, 1422, 2573, 2575, 1431, 
                950, 2608, 2610, 1450, 2628, 2629, 1742, 1466}], 
               
               Line[{1362, 2466, 1690, 2462, 1381, 2502, 1704, 2505, 2507, 
                1396, 2542, 1716, 2545, 2547, 1414, 2544, 1728, 2578, 1433, 
                2580, 2581, 1737, 2613, 1452, 2631, 1743, 2614, 1468}], 
               
               Line[{1453, 2548, 1729, 2594, 1436, 2556, 1719, 2510, 2508, 
                1416, 2521, 1707, 2467, 1398, 2432, 2431, 1691, 2477, 1382, 
                2415, 2414, 1681, 2441, 1364, 2419, 1676, 2417, 1348}], 
               
               Line[{1455, 1441, 2593, 2591, 1438, 2553, 2552, 1722, 2567, 
                1418, 2518, 2517, 1710, 1400, 2492, 1698, 2476, 2474, 1384, 
                1369, 2440, 2439, 2437, 1366, 2422, 2421, 1677, 1350}], 
               
               Line[{1459, 2604, 1735, 2615, 1442, 2583, 1727, 2566, 2564, 
                1423, 2533, 2532, 1714, 1405, 2464, 1703, 2488, 2486, 1387, 
                2451, 2450, 1688, 2411, 1371, 2429, 1680, 2427, 1353}], 
               
               Line[{1461, 1739, 2621, 2618, 1444, 2588, 2586, 2585, 1435, 
                1425, 1721, 2551, 2549, 1407, 2514, 2512, 2511, 1397, 1389, 
                1695, 2473, 2471, 2468, 1373, 2435, 2434, 1363, 1355}], 
               
               Line[{1464, 2625, 2624, 1458, 1448, 1734, 2603, 2602, 2600, 
                1429, 1725, 2563, 2561, 1410, 2529, 2527, 2526, 1404, 1392, 
                2484, 2483, 1699, 2495, 1377, 1687, 2449, 2447, 1358}], 
               
               Line[{1467, 1744, 2632, 2630, 1451, 2612, 2611, 1736, 2579, 
                1432, 2577, 2576, 1428, 1413, 2546, 1717, 2543, 2541, 1395, 
                2506, 1705, 2503, 2501, 1380, 2461, 2460, 1376, 1361}], 
               
               Line[{982, 1758, 1471, 1757, 998, 1772, 225, 1789, 1016, 1809, 
                1490, 1824, 1827, 1032, 1869, 1504, 1853, 1050, 1902, 1904, 
                1516, 1888, 1070, 1926, 1526, 1940, 1087}], 
               
               Line[{987, 1778, 1476, 1770, 1005, 1803, 1806, 1487, 1815, 
                1021, 1857, 1501, 1847, 1849, 1039, 1884, 1513, 1893, 1057, 
                1931, 1523, 1921, 1923, 1076, 1953, 1956, 1533, 1093}], 
               
               Line[{990, 1782, 1479, 1792, 1009, 1830, 1832, 1493, 1819, 
                1024, 1872, 1505, 1862, 1864, 1042, 1896, 1517, 1908, 1061, 
                1935, 366, 1943, 1080, 1961, 1534, 1960, 1096}], 
               
               Line[{1105, 1980, 1540, 1979, 1121, 1994, 420, 2011, 1139, 
                2031, 1559, 2046, 2049, 1155, 2091, 1573, 2075, 1173, 2124, 
                2126, 1585, 2110, 1193, 2148, 1595, 2162, 1210}], 
               
               Line[{1110, 2000, 1545, 1992, 1128, 2025, 2028, 1556, 2037, 
                1144, 2079, 1570, 2069, 2071, 1162, 2106, 1582, 2115, 1180, 
                2153, 1592, 2143, 2145, 1199, 2175, 2178, 1602, 1216}], 
               
               Line[{1113, 2004, 1548, 2014, 1132, 2052, 2054, 1562, 2041, 
                1147, 2094, 1574, 2084, 2086, 1165, 2118, 1586, 2130, 1184, 
                2157, 561, 2165, 1203, 2183, 1603, 2182, 1219}], 
               
               Line[{1228, 2202, 1609, 2201, 1244, 2216, 615, 2233, 1262, 
                2253, 1628, 2268, 2271, 1278, 2313, 1642, 2297, 1296, 2346, 
                2348, 1654, 2332, 1316, 2370, 1664, 2384, 1333}], 
               
               Line[{1233, 2222, 1614, 2214, 1251, 2247, 2250, 1625, 2259, 
                1267, 2301, 1639, 2291, 2293, 1285, 2328, 1651, 2337, 1303, 
                2375, 1661, 2365, 2367, 1322, 2397, 2400, 1671, 1339}], 
               
               Line[{1236, 2226, 1617, 2236, 1255, 2274, 2276, 1631, 2263, 
                1270, 2316, 1643, 2306, 2308, 1288, 2340, 1655, 2352, 1307, 
                2379, 756, 2387, 1326, 2405, 1672, 2404, 1342}], 
               
               Line[{1351, 2424, 1678, 2423, 1367, 2438, 810, 2455, 1385, 
                2475, 1697, 2490, 2493, 1401, 2535, 1711, 2519, 1419, 2568, 
                2570, 1723, 2554, 1439, 2592, 1733, 2606, 1456}], 
               
               Line[{1356, 2444, 1683, 2436, 1374, 2469, 2472, 1694, 2481, 
                1390, 2523, 1708, 2513, 2515, 1408, 2550, 1720, 2559, 1426, 
                2597, 1730, 2587, 2589, 1445, 2619, 2622, 1740, 1462}], 
               
               Line[{1359, 2448, 1686, 2458, 1378, 2496, 2498, 1700, 2485, 
                1393, 2538, 1712, 2528, 2530, 1411, 2562, 1724, 2574, 1430, 
                2601, 951, 2609, 1449, 2627, 1741, 2626, 1465}]}, {
               
               Line[{205, 377, 1947, 1946, 374, 1944, 1943, 367, 1937, 364, 
                357, 1924, 1923, 1922, 347, 1918, 1917, 340, 337, 1906, 330, 
                1888, 1887, 327, 1891, 1890, 320, 354}], 
               
               Line[{213, 344, 1912, 1911, 342, 1909, 1908, 334, 1897, 332, 
                1894, 1893, 324, 1885, 314, 306, 1868, 1867, 304, 1871, 296, 
                1853, 1852, 294, 1856, 1855, 286, 322}], 
               
               Line[{217, 1751, 197, 1752, 201, 1755, 199, 1758, 1759, 206, 
                1761, 208, 1762, 210, 1768, 219, 1778, 1779, 227, 1781, 1782, 
                229, 1791, 237, 1794, 239, 1800, 244}], 
               
               Line[{245, 240, 1796, 1795, 238, 1793, 1792, 230, 1783, 228, 
                1780, 220, 1770, 1769, 211, 1764, 1763, 209, 207, 1760, 200, 
                1757, 1756, 202, 1754, 1753, 198, 218}], 
               
               Line[{249, 214, 1775, 1776, 221, 1771, 1772, 224, 1787, 231, 
                234, 1745, 1746, 241, 1802, 1803, 1804, 252, 261, 264, 1829, 
                1830, 1831, 273, 1835, 1836, 276, 282}], 
               
               Line[{284, 1841, 1840, 278, 275, 1834, 266, 1819, 1818, 263, 
                1816, 1815, 254, 1807, 243, 236, 1786, 1785, 233, 1790, 1789, 
                226, 1774, 223, 216, 1750, 1749, 251}], 
               
               Line[{287, 246, 1811, 1812, 255, 1808, 1809, 258, 1823, 267, 
                1820, 1821, 270, 279, 1845, 290, 1857, 1858, 297, 1860, 300, 
                1872, 1873, 307, 1875, 1876, 310, 315}], 
               
               Line[{317, 1881, 1880, 312, 309, 302, 1865, 1864, 1863, 299, 
                292, 1850, 1849, 1848, 281, 1799, 1798, 272, 269, 1828, 1827, 
                1826, 260, 257, 248, 1767, 1766, 289}], 
               
               Line[{321, 1801, 285, 1854, 293, 1851, 295, 1869, 1870, 303, 
                1866, 305, 1838, 313, 1883, 1884, 323, 1892, 331, 1895, 1896, 
                333, 1907, 341, 1910, 343, 1878, 212}], 
               
               Line[{349, 1948, 391, 1966, 389, 1963, 387, 1960, 1959, 385, 
                1957, 383, 1956, 1955, 379, 1951, 371, 1938, 369, 1941, 1940, 
                361, 1927, 359, 1930, 351, 1882, 381}], 
               
               Line[{352, 1842, 1843, 318, 325, 328, 1901, 1902, 1903, 335, 
                1898, 1899, 338, 345, 1919, 355, 1931, 1932, 362, 1934, 1935, 
                365, 372, 375, 1913, 1914, 203}], 
               
               Line[{380, 350, 1928, 1929, 358, 1925, 1926, 360, 1939, 368, 
                370, 1949, 1950, 378, 1952, 1953, 1954, 382, 384, 1958, 386, 
                1961, 1962, 388, 1964, 1965, 390, 348}], 
               
               Line[{400, 572, 2169, 2168, 569, 2166, 2165, 562, 2159, 559, 
                552, 2146, 2145, 2144, 542, 2140, 2139, 535, 532, 2128, 525, 
                2110, 2109, 522, 2113, 2112, 515, 549}], 
               
               Line[{408, 539, 2134, 2133, 537, 2131, 2130, 529, 2119, 527, 
                2116, 2115, 519, 2107, 509, 501, 2090, 2089, 499, 2093, 491, 
                2075, 2074, 489, 2078, 2077, 481, 517}], 
               
               Line[{412, 1973, 392, 1974, 396, 1977, 394, 1980, 1981, 401, 
                1983, 403, 1984, 405, 1990, 414, 2000, 2001, 422, 2003, 2004, 
                424, 2013, 432, 2016, 434, 2022, 439}], 
               
               Line[{440, 435, 2018, 2017, 433, 2015, 2014, 425, 2005, 423, 
                2002, 415, 1992, 1991, 406, 1986, 1985, 404, 402, 1982, 395, 
                1979, 1978, 397, 1976, 1975, 393, 413}], 
               
               Line[{444, 409, 1997, 1998, 416, 1993, 1994, 419, 2009, 426, 
                429, 1967, 1968, 436, 2024, 2025, 2026, 447, 456, 459, 2051, 
                2052, 2053, 468, 2057, 2058, 471, 477}], 
               
               Line[{479, 2063, 2062, 473, 470, 2056, 461, 2041, 2040, 458, 
                2038, 2037, 449, 2029, 438, 431, 2008, 2007, 428, 2012, 2011, 
                421, 1996, 418, 411, 1972, 1971, 446}], 
               
               Line[{482, 441, 2033, 2034, 450, 2030, 2031, 453, 2045, 462, 
                2042, 2043, 465, 474, 2067, 485, 2079, 2080, 492, 2082, 495, 
                2094, 2095, 502, 2097, 2098, 505, 510}], 
               Line[{512, 2103, 2102, 507, 504, 497, 2087, 2086, 2085, 494, 
                487, 2072, 2071, 2070, 476, 2021, 2020, 467, 464, 2050, 2049, 
                2048, 455, 452, 443, 1989, 1988, 484}], 
               
               Line[{516, 2023, 480, 2076, 488, 2073, 490, 2091, 2092, 498, 
                2088, 500, 2060, 508, 2105, 2106, 518, 2114, 526, 2117, 2118, 
                528, 2129, 536, 2132, 538, 2100, 407}], 
               
               Line[{544, 2170, 586, 2188, 584, 2185, 582, 2182, 2181, 580, 
                2179, 578, 2178, 2177, 574, 2173, 566, 2160, 564, 2163, 2162, 
                556, 2149, 554, 2152, 546, 2104, 576}], 
               
               Line[{547, 2064, 2065, 513, 520, 523, 2123, 2124, 2125, 530, 
                2120, 2121, 533, 540, 2141, 550, 2153, 2154, 557, 2156, 2157, 
                560, 567, 570, 2135, 2136, 398}], 
               
               Line[{575, 545, 2150, 2151, 553, 2147, 2148, 555, 2161, 563, 
                565, 2171, 2172, 573, 2174, 2175, 2176, 577, 579, 2180, 581, 
                2183, 2184, 583, 2186, 2187, 585, 543}], 
               
               Line[{595, 767, 2391, 2390, 764, 2388, 2387, 757, 2381, 754, 
                747, 2368, 2367, 2366, 737, 2362, 2361, 730, 727, 2350, 720, 
                2332, 2331, 717, 2335, 2334, 710, 744}], 
               
               Line[{603, 734, 2356, 2355, 732, 2353, 2352, 724, 2341, 722, 
                2338, 2337, 714, 2329, 704, 696, 2312, 2311, 694, 2315, 686, 
                2297, 2296, 684, 2300, 2299, 676, 712}], 
               
               Line[{607, 2195, 587, 2196, 591, 2199, 589, 2202, 2203, 596, 
                2205, 598, 2206, 600, 2212, 609, 2222, 2223, 617, 2225, 2226, 
                619, 2235, 627, 2238, 629, 2244, 634}], 
               
               Line[{635, 630, 2240, 2239, 628, 2237, 2236, 620, 2227, 618, 
                2224, 610, 2214, 2213, 601, 2208, 2207, 599, 597, 2204, 590, 
                2201, 2200, 592, 2198, 2197, 588, 608}], 
               
               Line[{639, 604, 2219, 2220, 611, 2215, 2216, 614, 2231, 621, 
                624, 2189, 2190, 631, 2246, 2247, 2248, 642, 651, 654, 2273, 
                2274, 2275, 663, 2279, 2280, 666, 672}], 
               
               Line[{674, 2285, 2284, 668, 665, 2278, 656, 2263, 2262, 653, 
                2260, 2259, 644, 2251, 633, 626, 2230, 2229, 623, 2234, 2233, 
                616, 2218, 613, 606, 2194, 2193, 641}], 
               
               Line[{677, 636, 2255, 2256, 645, 2252, 2253, 648, 2267, 657, 
                2264, 2265, 660, 669, 2289, 680, 2301, 2302, 687, 2304, 690, 
                2316, 2317, 697, 2319, 2320, 700, 705}], 
               
               Line[{707, 2325, 2324, 702, 699, 692, 2309, 2308, 2307, 689, 
                682, 2294, 2293, 2292, 671, 2243, 2242, 662, 659, 2272, 2271, 
                2270, 650, 647, 638, 2211, 2210, 679}], 
               
               Line[{711, 2245, 675, 2298, 683, 2295, 685, 2313, 2314, 693, 
                2310, 695, 2282, 703, 2327, 2328, 713, 2336, 721, 2339, 2340, 
                723, 2351, 731, 2354, 733, 2322, 602}], 
               
               Line[{739, 2392, 781, 2410, 779, 2407, 777, 2404, 2403, 775, 
                2401, 773, 2400, 2399, 769, 2395, 761, 2382, 759, 2385, 2384, 
                751, 2371, 749, 2374, 741, 2326, 771}], 
               
               Line[{742, 2286, 2287, 708, 715, 718, 2345, 2346, 2347, 725, 
                2342, 2343, 728, 735, 2363, 745, 2375, 2376, 752, 2378, 2379, 
                755, 762, 765, 2357, 2358, 593}], 
               
               Line[{770, 740, 2372, 2373, 748, 2369, 2370, 750, 2383, 758, 
                760, 2393, 2394, 768, 2396, 2397, 2398, 772, 774, 2402, 776, 
                2405, 2406, 778, 2408, 2409, 780, 738}], 
               
               Line[{790, 962, 2613, 2612, 959, 2610, 2609, 952, 2603, 949, 
                942, 2590, 2589, 2588, 932, 2584, 2583, 925, 922, 2572, 915, 
                2554, 2553, 912, 2557, 2556, 905, 939}], 
               
               Line[{798, 929, 2578, 2577, 927, 2575, 2574, 919, 2563, 917, 
                2560, 2559, 909, 2551, 899, 891, 2534, 2533, 889, 2537, 881, 
                2519, 2518, 879, 2522, 2521, 871, 907}], 
               
               Line[{802, 2417, 782, 2418, 786, 2421, 784, 2424, 2425, 791, 
                2427, 793, 2428, 795, 2434, 804, 2444, 2445, 812, 2447, 2448, 
                814, 2457, 822, 2460, 824, 2466, 829}], 
               
               Line[{830, 825, 2462, 2461, 823, 2459, 2458, 815, 2449, 813, 
                2446, 805, 2436, 2435, 796, 2430, 2429, 794, 792, 2426, 785, 
                2423, 2422, 787, 2420, 2419, 783, 803}], 
               
               Line[{834, 799, 2441, 2442, 806, 2437, 2438, 809, 2453, 816, 
                819, 2411, 2412, 826, 2468, 2469, 2470, 837, 846, 849, 2495, 
                2496, 2497, 858, 2501, 2502, 861, 867}], 
               
               Line[{869, 2507, 2506, 863, 860, 2500, 851, 2485, 2484, 848, 
                2482, 2481, 839, 2473, 828, 821, 2452, 2451, 818, 2456, 2455, 
                811, 2440, 808, 801, 2416, 2415, 836}], 
               
               Line[{872, 831, 2477, 2478, 840, 2474, 2475, 843, 2489, 852, 
                2486, 2487, 855, 864, 2511, 875, 2523, 2524, 882, 2526, 885, 
                2538, 2539, 892, 2541, 2542, 895, 900}], 
               
               Line[{902, 2547, 2546, 897, 894, 887, 2531, 2530, 2529, 884, 
                877, 2516, 2515, 2514, 866, 2465, 2464, 857, 854, 2494, 2493, 
                2492, 845, 842, 833, 2433, 2432, 874}], 
               
               Line[{906, 2467, 870, 2520, 878, 2517, 880, 2535, 2536, 888, 
                2532, 890, 2504, 898, 2549, 2550, 908, 2558, 916, 2561, 2562, 
                918, 2573, 926, 2576, 928, 2544, 797}], 
               
               Line[{934, 2614, 976, 2632, 974, 2629, 972, 2626, 2625, 970, 
                2623, 968, 2622, 2621, 964, 2617, 956, 2604, 954, 2607, 2606, 
                946, 2593, 944, 2596, 936, 2548, 966}], 
               
               Line[{937, 2508, 2509, 903, 910, 913, 2567, 2568, 2569, 920, 
                2564, 2565, 923, 930, 2585, 940, 2597, 2598, 947, 2600, 2601, 
                950, 957, 960, 2579, 2580, 788}], 
               
               Line[{965, 935, 2594, 2595, 943, 2591, 2592, 945, 2605, 953, 
                955, 2615, 2616, 963, 2618, 2619, 2620, 967, 969, 2624, 971, 
                2627, 2628, 973, 2630, 2631, 975, 933}], 
               
               Line[{204, 1915, 376, 1945, 373, 1942, 366, 1936, 363, 1933, 
                356, 1921, 1920, 346, 1916, 339, 1900, 336, 1905, 1904, 329, 
                1886, 326, 1889, 319, 1844, 353}], 
               
               Line[{250, 1748, 215, 1777, 222, 1773, 225, 1788, 232, 1784, 
                235, 1747, 242, 1805, 1806, 253, 1814, 262, 1817, 265, 1832, 
                1833, 274, 1837, 277, 1839, 283}], 
               
               Line[{288, 1765, 247, 1813, 256, 1810, 259, 1824, 1825, 268, 
                1822, 271, 1797, 280, 1846, 1847, 291, 1859, 298, 1861, 1862, 
                301, 1874, 308, 1877, 311, 1879, 316}], 
               
               Line[{399, 2137, 571, 2167, 568, 2164, 561, 2158, 558, 2155, 
                551, 2143, 2142, 541, 2138, 534, 2122, 531, 2127, 2126, 524, 
                2108, 521, 2111, 514, 2066, 548}], 
               
               Line[{445, 1970, 410, 1999, 417, 1995, 420, 2010, 427, 2006, 
                430, 1969, 437, 2027, 2028, 448, 2036, 457, 2039, 460, 2054, 
                2055, 469, 2059, 472, 2061, 478}], 
               
               Line[{483, 1987, 442, 2035, 451, 2032, 454, 2046, 2047, 463, 
                2044, 466, 2019, 475, 2068, 2069, 486, 2081, 493, 2083, 2084, 
                496, 2096, 503, 2099, 506, 2101, 511}], 
               
               Line[{594, 2359, 766, 2389, 763, 2386, 756, 2380, 753, 2377, 
                746, 2365, 2364, 736, 2360, 729, 2344, 726, 2349, 2348, 719, 
                2330, 716, 2333, 709, 2288, 743}], 
               
               Line[{640, 2192, 605, 2221, 612, 2217, 615, 2232, 622, 2228, 
                625, 2191, 632, 2249, 2250, 643, 2258, 652, 2261, 655, 2276, 
                2277, 664, 2281, 667, 2283, 673}], 
               
               Line[{678, 2209, 637, 2257, 646, 2254, 649, 2268, 2269, 658, 
                2266, 661, 2241, 670, 2290, 2291, 681, 2303, 688, 2305, 2306, 
                691, 2318, 698, 2321, 701, 2323, 706}], 
               
               Line[{789, 2581, 961, 2611, 958, 2608, 951, 2602, 948, 2599, 
                941, 2587, 2586, 931, 2582, 924, 2566, 921, 2571, 2570, 914, 
                2552, 911, 2555, 904, 2510, 938}], 
               
               Line[{835, 2414, 800, 2443, 807, 2439, 810, 2454, 817, 2450, 
                820, 2413, 827, 2471, 2472, 838, 2480, 847, 2483, 850, 2498, 
                2499, 859, 2503, 862, 2505, 868}], 
               
               Line[{873, 2431, 832, 2479, 841, 2476, 844, 2490, 2491, 853, 
                2488, 856, 2463, 865, 2512, 2513, 876, 2525, 883, 2527, 2528, 
                886, 2540, 893, 2543, 896, 2545, 
                901}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}}}, VertexNormals -> CompressedData["
1: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
MtTCapkNWpKfc4S/58K4nuKfbKL/q5NH3Irys0F5Z32l62AK+PVqcPCQvDPI
vcPl5blykO0bm/L/dRtqrJE/r5EGMnZOTyd3VULBqLdqA28UBIct3Gf7lAZ/
HzX1WC4uB2+RnkumxXkot+zblfA3NBASNBl25s+G0gquvduUyrDM7NyDMlI/
Jwzoxn/FVBg75qDINVCB861z0s1rSV5+b2XPvSEcFQRoYpe8KiHPQOHlvSc0
uLk072PaaXvwuX5W+8f0PaCll352aKGBxiRHwAmmcJDr0LE4uvg+DC/6LfWu
+X/zEn0/0vcjY/+NWfnoPSsfGfLp+gBdH2ToQ9cf6foDQ/9ts+fFotnzAuO8
dPsg3T7AsI/srD3x9qw9kWHP77P2R7lZ+yPD/i9n/YV0fyHDX3T/It2/yPAv
HQ9AxwMw8NA8ix9wm8UPMPBDxxusm8UbMPBGxyfEzOITGPjUn8Uz+MziGRl4
puMf/Wfxjwz80+MFO2bjBRnxQo8voMcXMOKLHo8gOBuPwIhHevyC2Gz8AiN+
6fEOw1n/4h0Y8U7nB6DzAzL4gc4nQJvlE2TwCZ1/4M0s/yCDf1JPuUUuXhCL
xueWe0tnnISAM23b1AlP/r65uqG/NwwrbxfzPDFSwbnsu65YEJ7nLzqj/+N8
MlZ+z1Ao7XfBS/h1/sQE6YOEjlfXpqSgSNcSzrkiEdgvHCT/iuQv7b6mK4bx
yfi+tFtgX0QwWuwwPL2U7A84uWYsb2MqeuxYM24lkYLczrzCS4md7U0VzLk7
dVAyeOBWYnQwcK2ruNRLvvuHQzjS9ZoVhO8tnGE95gG2Jxd1m5P8Yn1tLHG5
vi9skRi95fXcApj4HidJkvX6qB/zeTeXIOfCPc901BxQRNX09nuSZ33X11r/
npuL3OW84UUXwjFEW91v9CcN1nw9vKF2phxV933eO3IjEZWfb3GZbKdBnsB9
9ly+Aty+ZGtDt0QChp58ulaG8LyNzSuvrmVl+JLzjetKnmTMy5bri+4k9W1A
9+U9VzPwppaIuFh9MipvTanbO0Lso7zwzNxdzngiVe3gg/g0jK83SOcj+VS3
+DQ/1x477LoumHFD1wrdjxnefUDV/2+HvReI+WHyNp7VhhI38L7OAtPFZJ12
uMf4/aADQmGywf5lEfjVSKxrCbGP28Debe/iRLHLVopV2zgZ387TkJAh/U6s
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
afbn0uyXpdk/pOAxoFNshj22TNXssqkwLrNcpIfMv83l+BDrUxMY+J63frQ3
B5a1nP05OjkG/g5jVit3uYCoROOfa7rFUNb7rSllaAzs0qVwssMF4kQOLNMq
r4ZrB+QPXa8n8e903frDNVc4xPe3iMOpHkSsLHgGQ8dgNGxv/QnrZLRuMmi5
phcHVwbvX7pJ/PCpSVzHxzoZjFbXb/+jG4c8y9xkqHH3og9ndrrbg7iypOfj
ohrIvGAYWX1vDNJO6W6xDDMB0VjRbz+r8iGKufqZEcHVXWrpm55Yn69azmGo
f0g24j99ePFZX4jzNsFhi/iTL0rzkeFJSKEVeT661Vqyzcke0+If3q7Kr8HE
h+One8j8s/Ryf39cc8VjYqWc6U71eOTFpt5eYr/l3kY57k4XPPu27aVcRTVO
i/x+YEzW20kv27NtlwvKpWvdS9ErxinXlYWJxD8cOWYM3s0muOQU8xL+vhzs
qzNpofzJJb2jLbnIDA5yOJQflE3F8zasHJT/rxlv/fRVOwk1jIZvznLXYk56
zHmPgjHwXv5K00TdEF+UyjQeIsW4IV9VkHq/7Grlp6emHTD+WO3CiaBMMOWq
Bioe1hs0h0gq+uF9oV+bXLlTIOUc2xQVPzbX1tHVS8fg8o0jTe6dCWDUEK9C
xVu+1EMWieIUfNFfziOxKxrcc6Y5qfj8pf7PfbHJnv97X2zNmts/vQp8sPLo
3a1bT+Vjls/Uy1jiz4pKvWVvm/PwoCN3QEyHP9gI3IEdxE550ycqZ0JK0fGX
/CbFNG3Q52j5yTHwn/zCzzR9t3/j80HhRp/lgmXIQs/YJBgWgW+lBS/xknz8
y/cg4xFLAdJFPLyf3J6Eu6Wb62VI/gq931HlKXcbtWbRXvJONv7yaN5TRPqZ
hd1HnMWup+PETe9+g1upuFTQsFOU4EBGykbdW0sTUOL69R98+gm4ekxpBglu
tMlW8j27Fog9i1RvtceFoatU3VEKZ3glutMJLuGJh0sLCS7hnex/cOkqo28B
wTE8sGczB8ExXK70D45tfufL0JvkBVX9op9N+0KhXEyjicJbLdp6h+at1/uZ
662+K1dxs3E8BmnGQ8IPjvsUTlbm5jlpX3JGuLX0ZOz2MGhR9tOhcHVUI7Fd
qPk2FgYnb9r8yw8ias3ncLjoZtXz4mN2eGJKT6fIxxu0h3PmcDvcUej72DND
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
1Tffty90RX8LM00q/rM2PO6O/eGNdvdKA7+fOk7w7epiKl/2/tbg2E3nhL3a
3ZJbclxw+LtzE5V3SjaNs1NGN1E05tfWszHG+CC66CmVpzGrXUTu/QzEi/uV
4seGPTGzK76IymufS88XyDs4QVF27uZPvTbY8FV3D4UDxrVmwcyM+lik6aZb
ttYCql3j5nAjhk/tCWvgKagxiK9z99eEX5y8czjjQdM72N/+f/UONGn6BWHz
9AsMLkSnWuRq4+DD5tdb77sAY4nRHB42+o/6BvapQUvqZ0nON4YgIOM4h5/9
NJ7/iHk8/xq080IT884L8dD4/2dp/P8naPz/Cp391gTn4dxIWkDcLmcsuf93
DufVvvU0kboALdUnb3zQ90LjdzBXF14+0kjW/egFMoF9uvdU7bFBaNVSqo6s
6+opnl4WCuwGiz5J+Hqgaq/+Geq8/ZvWSJfIPWYYeSHbZwlLFlQXeR5RIf1D
8prh0/qHwtH1p/2h8w05sPzitpkv4wRPbn/0Ko0IR84Bmz5N7xTYZFZYfIDE
myuN3z5iHr+9J43fnpPGb89B47dP6p6kvxbnAqONBYb1rYmwPt/rTRHBGZ2M
pl2rrN0h3MRcdX9jJFx+fbaMqo/MNN54m3m88eo03niuebzxyv+D7/06X7W0
kr4DqsZ7+Uev8sZxELTiJP55O3ttaJr7MGp9fN22nt4TX9T0plPnD3e8nPGU
MXIHORvzDobDgcCTIahA9S1ZF5rYhVnzIa3k4lLJxz7wflfuhuUUb8AJ5moT
GQc8XTT4wXRPPB6bVDL6Qdab9+xWh+ApLxiRWD+95W8i9B9oHqTuk16UXK+f
JHcbGCZ+KfDeyYar7/k1qe+5V4XXT0nfjwOpa3mJZ/7cxHMf2TpEiR8+Sex4
sdO2ECQaBU8+YTOAtep3piNH/nv+oX/e+QfXd1HHiw+lwwz9yl033DKg9X2r
rRDpfy6nCLrbGMbBFuezVrZeORAtwhWeQuxXYNOYfl7gA5JX23KFTuXDD7HF
b6nv3co0/u2JefzbT2n820fn8W+n0Pi3b9P4t3/T+LclRDXOL5Mqgitb4hTp
PAph87PB0e3tY7D9UusplitJcEAkczaLsxau9TgOhBeQOltm5i12yADyar8Z
C0Sl4PWS4yvOk3lW7+Q1OX7HAZ4lhAl0jKagw71Mx88k3havZIrt0LSDbVnR
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
JW6ypRknIJ+LQT71/a5xyZ0NclcCMGbYLOXOiVTcJ+coQuHAxLf39SzG/tDF
pn11x714GB+7aUThxgkMj2I2TgZ2p7ynK9mS4POryAX0BGd6/gefUjqNH4mb
xo/0mMaPlFBleI7BMxU/V5d6NJikYKu3vCyFh359CeXHY+Ow207u2IK8NFyw
I9mMws//R9d3h/X8hX9XUoiihFIiSsMolbZbkqg0SLS0tLX33nvvPT7trT1I
Jw007EISsivtiCjPeX+/n+f3XL/P9Xz/va/3dd73uc997nXOed0vyDhCeWQc
octkHCHy/RloozgPWiLjCw1R4AvltvJsTjiRAu9U8gZcNtai39oanYSd3/p+
dJVZIx0ePBLvb/hQj/hVGsQJv/A0qjD6cIo+GpE+U7rfA6cWliuPCT/y+4kq
c/pMNNT+6vgrSFWPrm//eo24T6V/Tiqi4nkqUvfdsvQuOA3NTHauDGK5hSd+
c9OUj0V6R4a1Ph3JRGKcRoo2eB0VA4NpueYTwO37AZeGz5boZEJUcgP2y3OH
Cv0rz3uiosXRqw3uiWj+63woUeekeUwtpHROEz49dHQ8Zp2O1gaVN1Rg/859
OO+jcs4myKGa0Lm5Jx8NLptpEO/Q/VPFOetSApHo4+ivA66pUN99bbYWfx9c
6yNxni0HHc7PGGHXckJjZm5NBH5LtSiHx+xyKpofFb/lq+ON5H9lcHUQfY6+
zyx+3Z6PZM4/fmLanI7KlNQFEvE6np/cFZwbRkJ8J+q13m+PRpdZtEVsiL7b
Jhy9bEyF6PCTa6Mi3/MRB3XevmdYT0bd7FyEHxag/lQNbj+lTLTyzYGnl8Ax
ftHtyx1TjFREso/t3BaAFl+OOjsT92wlLp0wZ6pD1p/Dy55v8kHMqTeEU6Zx
XJfs+ZNpqARRkw5UbehLRpf5937jx/q2UbndzrOuETEnJ1xnb4hH7xdWEtk+
4niefF6mRXFeVkU+LztCcV425SglxiNXgZgneRtdnfKRfcrpjj84DhHtDZ7s
LE+AWx48myLo0qDmcUtlE5bbKzIuijQFLooyGRflEQUuipvb47Dx7U1okHEo
kH0HCVWXn/5C4DIZxHwwOmZRgjwNxCTF+0hIjb/grgjO1wp4JIsVG/PRzYsX
jsCpOMTSK8Z3A8vZ3Ihza6M9CTlpJdvnzJUgy8uRXcT797y9rhNCQiTUa9Fn
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
             "]], {
           Axes -> True, 
            AxesLabel -> {
             "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
              "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, 
            BoxRatios -> {1, 1, 0.4}, ImageSize -> {380, 380}, 
            Method -> {"RotationControl" -> "Globe"}, 
            PlotRange -> {{-2.709857394019914, 
             2.709857394019914}, {-1.7138642998702553`, 
             1.7138642998702553`}, {2.348902509926214*^-9, 
             0.5618825841163946}}, PlotRangePadding -> {
              Scaled[0.02], 
              Scaled[0.02], 
              Scaled[0.02]}}], $CellContext`couplingLocator := LocatorPane[
           Dynamic[FE`u$$31, (FE`u$$31 = If[First[
                 Dimensions[#]] < 3, 
               Flatten[{FE`locDefault$$31, FE`mLocDefault$$31}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[FE`rawArrayOfMasses$$31]]; 
              If[$CellContext`rm$ > $CellContext`nMassesFromU, 
                FE`rawArrayOfMasses$$31 = 
                Take[FE`rawArrayOfMasses$$31, $CellContext`nMassesFromU], 
                
                While[$CellContext`rm$ < $CellContext`nMassesFromU, 
                 AppendTo[FE`rawArrayOfMasses$$31, FE`defaultMass$$31]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[FE`kArray$$31, All, 1], All, 1]]; 
              If[$CellContext`km$ > $CellContext`nMassesFromU, FE`kArray$$31 = 
                Select[FE`kArray$$31, Max[{
                    Part[#, 1], 
                    Part[#, 2]}] <= $CellContext`nMassesFromU& ], 
                
                While[$CellContext`km$ < $CellContext`nMassesFromU, 
                 Increment[$CellContext`km$]; 
                 FE`kArray$$31 = $CellContext`growKarray[$CellContext`km$]]]]; 
            Part[FE`u$$31, 1] = If[Dot[
                 Part[FE`u$$31, 1], 
                 Part[FE`u$$31, 1]] < FE`minSquaredDistanceFromOrigin$$31, 
               Part[FE`locDefault$$31, 1], 
               Part[FE`u$$31, 1]]; Part[FE`u$$31, 2] = If[Dot[
                 Part[FE`u$$31, 2], 
                 Part[FE`u$$31, 2]] < FE`minSquaredDistanceFromOrigin$$31, 
               Part[FE`locDefault$$31, 2], 
               Part[FE`u$$31, 2]]; {
               Part[FE`u$$31, 1], 
               Part[
               FE`u$$31, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[
              FE`minAngleBetweenLatticeVectors$$31]; 
            FE`rawNumberOfMasses$$31 = $CellContext`nMassesFromU; 
            FE`m1Sel$$31 = 
             If[FE`m1Sel$$31 > FE`rawNumberOfMasses$$31, 1, FE`m1Sel$$31]; 
            FE`m2Sel$$31 = 
             If[FE`m2Sel$$31 > FE`rawNumberOfMasses$$31, 1, FE`m2Sel$$31]; 
            FE`moSel$$31 = 
             If[FE`moSel$$31 > FE`rawNumberOfMasses$$31, 1, FE`moSel$$31]; 
            FE`moSel$$31 = $CellContext`adjustedmoSel; 
            FE`k1$$31 = $CellContext`kArraySelect[1]; 
            FE`k2$$31 = $CellContext`kArraySelect[2]; 
            FE`k3$$31 = $CellContext`kArraySelect[3]; 
            FE`k4$$31 = $CellContext`kArraySelect[4]; 
            FE`k5$$31 = $CellContext`kArrayOriginSelect; 
            FE`parameterLocatorDependencies$$31 = $CellContext`locDependent; 
            FE`qLoc$$31 = 
             ReplaceAll["qMaxVec", FE`parameterLocatorDependencies$$31]/2; 
            FE`qPlaneLoc$$31 = {-FE`qLoc$$31, FE`qLoc$$31}; 
            FE`couplingData$$31 = $CellContext`calculateCouplings; 
            FE`bRefreshMatrix$$31 = True; 
            FE`tick$$31 = Not[FE`tick$$31])& ], $CellContext`plotSprings, 
           LocatorAutoCreate -> True, ContinuousAction -> False], 
         FE`u$$31 = {{0.1, 1.3}, {1.936, 0.7800000000000002}, {0.9, 0.7}, {
          0.4, 1.2}, {1.3, 1.4}}, 
         FE`locDefault$$31 = {{0.1, 1.3}, {1.9, 0.8}}, 
         FE`mLocDefault$$31 = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
         Attributes[$CellContext`rm$] = {Temporary}, 
         Attributes[$CellContext`km$] = {Temporary}, 
         FE`rawArrayOfMasses$$31 = {
          13.100000000000001`, 20, 20}, $CellContext`nMassesFromU := First[
            Dimensions[FE`u$$31]] - 2, FE`defaultMass$$31 = 20, 
         FE`kArray$$31 = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
           0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 
           0.25, {1, 1, {1, 0}} -> 0.25, {1, 1, {0, 1}} -> 
           0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
           0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 
           0.25, {1, 2, {-1, -1}} -> 0.25, {1, 2, {-1, 1}} -> 
           0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
           0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 
           0.25, {1, 2, {0, 0}} -> 0.25, {2, 1, {-1, 0}} -> 
           0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
           0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 
           0.25, {2, 1, {0, 1}} -> 0.25, {2, 1, {1, 1}} -> 
           0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
           0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 
           0.25, {2, 2, {-1, 1}} -> 0.25, {2, 2, {1, 0}} -> 
           0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
           0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 
           0.25, {1, 3, {0, -1}} -> 0.25, {1, 3, {-1, -1}} -> 
           0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
           0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 
           0.25, {1, 3, {1, -1}} -> 0.25, {1, 3, {0, 0}} -> 
           0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
           0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 
           0.25, {2, 3, {1, 0}} -> 0.25, {2, 3, {0, 1}} -> 
           0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
           0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 
           0.25, {3, 1, {0, -1}} -> 0.25, {3, 1, {-1, -1}} -> 
           0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
           0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 
           0.25, {3, 1, {1, -1}} -> 0.25, {3, 2, {-1, 0}} -> 
           0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
           0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 
           0.25, {3, 2, {0, 1}} -> 0.25, {3, 2, {1, 1}} -> 
           0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
           0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 
           0.25, {3, 3, {-1, 1}} -> 0.25, {3, 3, {1, 0}} -> 
           0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
           0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`growKarray[
           Pattern[$CellContext`nmNew$, 
            Blank[Integer]]] := 
         Module[{$CellContext`k2$}, $CellContext`k2$ = Flatten[
              Map[$CellContext`constructKArrayElements[
                Part[#, 1], 
                Part[#, 2]]& , 
               Select[
                Flatten[
                 
                 Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew$}, {$CellContext`j, $CellContext`nmNew$}], 1], 
                Max[#] == $CellContext`nmNew$& ]], 2]; 
           Flatten[{FE`kArray$$31, $CellContext`k2$}, 1]], 
         Attributes[$CellContext`nmNew$] = {Temporary}, 
         Attributes[$CellContext`k2$] = {
          Temporary}, $CellContext`constructKArrayElements[
           Pattern[$CellContext`i$, 
            Blank[Integer]], 
           Pattern[$CellContext`j$, 
            Blank[Integer]]] := 
         Module[{$CellContext`a$}, $CellContext`a$ = Flatten[
              
              Table[{$CellContext`i$, $CellContext`j$, $CellContext`s 
                 Part[FE`nArray$$31, $CellContext`n]} -> 
               Part[FE`kDefaults$$31, $CellContext`n], {$CellContext`s, -1, 1,
                 2}, {$CellContext`n, 4}], 1]; 
           If[$CellContext`i$ < $CellContext`j$, 
             
             Append[$CellContext`a$, {$CellContext`i$, $CellContext`j$, {0, 
                0}} -> Part[FE`kDefaults$$31, 5]], $CellContext`a$]], 
         Attributes[$CellContext`i$] = {Temporary}, 
         Attributes[$CellContext`j$] = {Temporary}, 
         FE`nArray$$31 = {{1, 0}, {0, 1}, {1, 1}, {1, -1}}, 
         FE`kDefaults$$31 = {0.25, 0.25, 0.25, 0.25, 0.25}, 
         FE`minSquaredDistanceFromOrigin$$31 = 
         0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
           Pattern[$CellContext`minAngle$, 
            Blank[]]] := Module[{$CellContext`t$}, $CellContext`t$ = Abs[
              ArcCos[
               Dot[
                Normalize[
                 Part[FE`u$$31, 1]], 
                Normalize[
                 Part[FE`u$$31, 2]]]]]; $CellContext`t$ = 
            If[$CellContext`t$ > Pi/2, Pi - $CellContext`t$, $CellContext`t$]; 
           If[$CellContext`t$ < $CellContext`minAngle$, FE`locDefault$$31, {
              Part[FE`u$$31, 1], 
              Part[FE`u$$31, 2]}]], 
         Attributes[$CellContext`minAngle$] = {Temporary}, 
         FE`minAngleBetweenLatticeVectors$$31 = Pi/6, 
         FE`rawNumberOfMasses$$31 = 3, FE`m1Sel$$31 = 1, FE`m2Sel$$31 = 1, 
         FE`moSel$$31 = 2, $CellContext`adjustedmoSel := 
         If[FE`rawNumberOfMasses$$31 > 2, 
           If[FE`moSel$$31 == FE`m1Sel$$31, 
            First[
             DeleteCases[
              Range[FE`rawNumberOfMasses$$31], FE`m1Sel$$31]], FE`moSel$$31], 
           First[
            Delete[
             Range[2], FE`m1Sel$$31]]], FE`k1$$31 = 
         0.25, $CellContext`kArraySelect[
           Pattern[$CellContext`ni$, 
            Blank[Integer]]] := ReplaceAll[{FE`m1Sel$$31, FE`m2Sel$$31, 
            Part[FE`nArray$$31, $CellContext`ni$]}, FE`kArray$$31], 
         Attributes[$CellContext`ni$] = {Temporary}, FE`k2$$31 = 0.25, 
         FE`k3$$31 = 0.25, FE`k4$$31 = 0.25, FE`k5$$31 = 
         0.25, $CellContext`kArrayOriginSelect := ReplaceAll[
           Append[
            Sort[{FE`m1Sel$$31, FE`moSel$$31}], {0, 0}], 
           FE`kArray$$31], $CellContext`locDependent := 
         Module[{$CellContext`m$, $CellContext`latticeBasis$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`reciprocalBasis$, \
$CellContext`mObliqueComponents$, $CellContext`mPosFirstCell$, \
$CellContext`reciprocalNorms$}, $CellContext`latticeBasis$ = 
            Take[FE`u$$31, 2]; $CellContext`m$ = 
            Drop[FE`u$$31, 2]; $CellContext`numberLatticeLinesToDisplay$ = 
            Map[Ceiling[
               Abs[FE`windowHalfWidth$$31/Part[
                 Part[$CellContext`latticeBasis$, #], #]]]& , 
              Range[
              2]]; $CellContext`reciprocalBasis$ = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis$]; \
$CellContext`reciprocalNorms$ = Map[Norm[
               Part[$CellContext`reciprocalBasis$, #]]& , 
              Range[2]]; $CellContext`mObliqueComponents$ = Table[
              Dot[
               Part[$CellContext`m$, $CellContext`i], 
               
               Part[$CellContext`reciprocalBasis$, $CellContext`j]], \
{$CellContext`i, FE`rawNumberOfMasses$$31}, {$CellContext`j, 
               2}]; $CellContext`mPosFirstCell$ = 
            Map[Part[$CellContext`m$, #] - Dot[
               Floor[
                
                Part[$CellContext`mObliqueComponents$, #]], \
$CellContext`latticeBasis$]& , 
              Range[FE`rawNumberOfMasses$$31]]; {
            "mScalarArray" -> FE`rawArrayOfMasses$$31, "numberOfMasses" -> 
             FE`rawNumberOfMasses$$31, 
             "latticeBasis" -> $CellContext`latticeBasis$, "latticeNorms" -> 
             Map[Norm[
                Part[$CellContext`latticeBasis$, #]]& , 
               Range[2]], "latticeUnitVectors" -> Map[Normalize[
                Part[$CellContext`latticeBasis$, #]]& , 
               Range[2]], 
             "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay$, 
             "reciprocalBasis" -> $CellContext`reciprocalBasis$, 
             "reciprocalNorms" -> $CellContext`reciprocalNorms$, 
             "qMaxVec" -> (2 Pi) $CellContext`reciprocalNorms$, 
             "mObliqueComponents" -> $CellContext`mObliqueComponents$, 
             "mPosFirstCell" -> $CellContext`mPosFirstCell$, 
             "pointsDataTable" -> Map[$CellContext`pointsTable[
                
                Part[$CellContext`mPosFirstCell$, #], \
$CellContext`latticeBasis$, $CellContext`numberLatticeLinesToDisplay$]& , 
               Range[FE`rawNumberOfMasses$$31]], "lineTable" -> 
             Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay$, $CellContext`latticeBasis$, #]& , 
               Permutations[{1, 2}]]}], $CellContext`calcReciprocalBasis[
           Pattern[$CellContext`loc, 
            Blank[List]]] := Inverse[
           Transpose[$CellContext`loc]], $CellContext`pointsTable[
           Pattern[$CellContext`mPosFirstCell, 
            Blank[List]], 
           Pattern[$CellContext`latticeBasis, 
            Blank[List]], 
           Pattern[$CellContext`numberLatticeLinesToDisplay, 
            Blank[List]]] := 
         Table[$CellContext`mPosFirstCell + 
           Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
            
            Part[$CellContext`numberLatticeLinesToDisplay, 
             1]}, {$CellContext`j, -
            Part[$CellContext`numberLatticeLinesToDisplay, 2], 
            
            Part[$CellContext`numberLatticeLinesToDisplay, 
             2]}], $CellContext`calcLineTable[
           Pattern[$CellContext`n, 
            Blank[List]], 
           Pattern[$CellContext`b, 
            Blank[List]], 
           Pattern[$CellContext`i, 
            Blank[List]]] := 
         Module[{$CellContext`first, $CellContext`second}, \
{$CellContext`first, $CellContext`second} = $CellContext`i; Table[
             
             Line[{(-Part[$CellContext`n, $CellContext`first]) 
                Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                Part[$CellContext`b, $CellContext`second], 
               Part[$CellContext`n, $CellContext`first] 
                Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, \
-Part[$CellContext`n, $CellContext`second], 
              
              Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`calculateCouplings := 
         Module[{$CellContext`t$, $CellContext`t1$, $CellContext`t2$, \
$CellContext`r$, $CellContext`mp$, $CellContext`numberOfMasses$}, \
{$CellContext`r$, $CellContext`mp$, $CellContext`numberOfMasses$} = 
            ReplaceAll[{"latticeBasis", "mPosFirstCell", "numberOfMasses"}, 
              FE`parameterLocatorDependencies$$31]; $CellContext`t$ = 
            Map[Append[#, 
               $CellContext`relativeDifferences[$CellContext`r$, \
$CellContext`mp$, 
                First[#]]]& , 
              ReplaceAll[FE`kArray$$31, Rule -> List]]; $CellContext`t$ = 
            Map[Flatten[{
                Part[#, 1], {
                 Part[#, 2]}, 
                Part[#, 3]}, 1]& , $CellContext`t$]; $CellContext`t1$ = Table[
              Sort[
               
               Select[$CellContext`t$, And[
                Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
               Part[#, 5] < 
               Part[#2, 
                 5]& ], {$CellContext`i, $CellContext`numberOfMasses$}]; \
$CellContext`t2$ = 
            Select[$CellContext`t$, Part[#, 3] == {0, 0}& ]; $CellContext`t2$ = 
            Flatten[{$CellContext`t2$, 
               Map[Flatten[{{
                   Part[#, 2], 
                   Part[#, 1]}, 
                  Drop[#, 2]}, 1]& , $CellContext`t2$]}, 1]; $CellContext`t2$ = 
            Table[
              Sort[
               Select[$CellContext`t2$, Part[#, 1] == $CellContext`i& ], 
               Part[#, 5] < 
               Part[#2, 
                 5]& ], {$CellContext`i, $CellContext`numberOfMasses$}]; \
{$CellContext`t2$, $CellContext`t1$}], $CellContext`relativeDifferences[
           Pattern[$CellContext`r, 
            Blank[List]], 
           Pattern[$CellContext`mp, 
            Blank[List]], {
            Pattern[$CellContext`mIndex1, 
             Blank[Integer]], 
            Pattern[$CellContext`mIndex2, 
             Blank[Integer]], 
            Pattern[$CellContext`n, 
             Blank[List]]}] := 
         Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther}, \
$CellContext`pOrigin = 
            Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
            Part[$CellContext`mp, $CellContext`mIndex2] + 
             Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
            Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], $CellContext`dn = 
         3.6412959999999996`, $CellContext`projOpU[
           Pattern[$CellContext`v, 
            Blank[List]]] := {{
           Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
            Part[$CellContext`v, 2]}, {
           Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
            Part[$CellContext`v, 2]^2}}, FE`bRefreshMatrix$$31 = True, 
         FE`tick$$31 = True, $CellContext`plotSprings := 
         Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, \
$CellContext`latticeBasis$ = Take[FE`u$$31, 2]; $CellContext`aLoc$ = 
            Part[FE`u$$31, 1]; $CellContext`bLoc$ = 
            Part[FE`u$$31, 
              2]; {$CellContext`mLoc$, $CellContext`reciprocalBasis$, \
$CellContext`pointsDataTable$, $CellContext`numberLatticeLinesToDisplay$, \
$CellContext`lines$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
            ReplaceAll[{
              "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
               "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
               "numberOfMasses"}, 
              FE`parameterLocatorDependencies$$31]; $CellContext`pointsList$[
              Pattern[$CellContext`n$, 
               Blank[Integer]]] := {
              $CellContext`massColors[$CellContext`n$], Null, 
              PointSize[
               Sqrt[
               Part[$CellContext`mScalarArray$, $CellContext`n$] 
                FE`mMax$$31^(-1)/500]], 
              Map[Point[#]& , 
               Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
              Text[
               $CellContext`massLabel[$CellContext`n$], 
               Part[$CellContext`mLoc$, $CellContext`n$] + 
               FE`textDisOffset$$31]}; $CellContext`cOrigin$ = Select[
              Part[
               Part[FE`couplingData$$31, 1], FE`m1Sel$$31], 
              Take[#, 2] == {FE`m1Sel$$31, FE`moSel$$31}& ]; $CellContext`cN$ = 
            Select[
              Part[
               Part[FE`couplingData$$31, 2], FE`m1Sel$$31], 
              Take[#, 2] == {FE`m1Sel$$31, FE`m2Sel$$31}& ]; $CellContext`g$ = 
            Map[ListLinePlot[
               $CellContext`springPoints[
                Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
               ReplaceAll[
                 Part[#, 3], FE`springColorsByN$$31]]& , $CellContext`cN$]; 
           If[$CellContext`numberOfMasses$ > 1, 
             AppendTo[$CellContext`g$, 
              Map[ListLinePlot[
                $CellContext`springPoints[
                 Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
                ReplaceAll[
                  Part[#, 3], 
                  FE`springColorsByN$$31]]& , $CellContext`cOrigin$]], Null]; 
           Show[{
              Graphics[
               Flatten[{{$CellContext`lines$, Blue, 
                  Map[Arrow[{{0, 0}, 
                    Part[$CellContext`reciprocalBasis$, #]}]& , 
                   Range[2]], Thick, 
                  Arrowheads[0.05], Red, 
                  Map[Arrow[{{0, 0}, 
                    Part[$CellContext`latticeBasis$, #]}]& , 
                   Range[2]], 
                  Text[
                   OverVector["a"], $CellContext`aLoc$/2 + 
                   FE`textDisOffset$$31], 
                  Text[
                   OverVector["b"], $CellContext`bLoc$/2 + 
                   FE`textDisOffset$$31]}, 
                 Map[$CellContext`pointsList$[#]& , 
                  Range[$CellContext`numberOfMasses$]]}], 
               PlotRange -> {{-FE`windowHalfWidth$$31/2, 
                  FE`windowHalfWidth$$31}, {-FE`windowHalfWidth$$31/2, 
                  FE`windowHalfWidth$$31}}, ImageSize -> 
               FE`primaryDisplaySize$$31], $CellContext`g$}]], 
         Attributes[$CellContext`aLoc$] = {Temporary}, 
         Attributes[$CellContext`bLoc$] = {Temporary}, 
         Attributes[$CellContext`mLoc$] = {Temporary}, 
         Attributes[$CellContext`pointsList$] = {Temporary}, 
         Attributes[$CellContext`cOrigin$] = {Temporary}, 
         Attributes[$CellContext`cN$] = {Temporary}, 
         Attributes[$CellContext`g$] = {Temporary}, 
         Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
         Style[
           $CellContext`indexLabel["m", #], 
           $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
           Style[#, Italic], #2]& , Attributes[Subscript] = {NHoldRest}, 
         FE`textDisOffset$$31 = {0.25, 0.25}, $CellContext`springPoints[
           Pattern[$CellContext`a12, 
            Blank[List]], 
           Optional[
            Pattern[$CellContext`n, 
             Blank[Integer]], 8], 
           Optional[
            Pattern[$CellContext`h, 
             Blank[]], 0.05], 
           Optional[
            Pattern[$CellContext`f, 
             Blank[]], 0.1]] := 
         Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
            Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
            Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
              Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
            Dot[$CellContext`r, {$CellContext`n1, 0}]; {
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + ($CellContext`t (1 - 
                    2 $CellContext`f)) $CellContext`nd, $CellContext`h 
                 Sin[((2 
                    Pi) $CellContext`n) $CellContext`t]}], {$CellContext`t, 0,
                1, 0.01}], 
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                   2 $CellContext`f) $CellContext`nd + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
         FE`springColorsByN$$31 = {{-1, 0} -> 
           RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
           RGBColor[0, 2/3, 0], {-1, -1} -> 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
           RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
           RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
           RGBColor[0, 2/3, 0], {1, 1} -> 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
           RGBColor[0, 2/3, 2/3]}, $CellContext`dynamicsControls := {
           Row[{
             OverVector["q"], " = ", 
             
             Module[{$CellContext`qm$}, $CellContext`qm$ = 
               ReplaceAll["qMaxVec", FE`parameterLocatorDependencies$$31]; 
              Slider2D[
                Dynamic[
                FE`qLoc$$31, (FE`qLoc$$31 = #; FE`bRefreshDynamics$$31 = True; 
                 FE`tick$$31 = Not[FE`tick$$31])& ], 
                ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
             " 2 \[Pi] ", 
             Dynamic[
              NumberForm[
               MatrixForm[FE`qLoc$$31/(2 Pi)], {3, 2}]]}], 
           Row[{
             Text["time, normalized to one period:"]}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`tau$$31, (
               FE`tau$$31 = $CellContext`checkAgainstRange[#, 0, 0, 1]; 
               FE`tick$$31 = Not[FE`tick$$31])& ], {0, 1}, ImageSize -> Tiny, 
              ContinuousAction -> True, Appearance -> "Open"]}, 
            ImageSize -> {200, 60}], 
           Row[{
             Text["oscillation scale factor:"]}], 
           Row[{Manipulator[
               Dynamic[
               FE`scale$$31, (
                FE`scale$$31 = $CellContext`checkAgainstRange[#, 0.05, 0.05, 
                   1]; FE`bRefreshDynPlot$$31 = True; 
                FE`tick$$31 = Not[FE`tick$$31])& ], {0.05, 1}, ImageSize -> 
               Tiny, ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}] " ", 
             Dynamic[
              NumberForm[FE`scale$$31, {3, 2}]]}], 
           Text[
            Text["Angular frequency \[Omega](q), selection:"]], 
           Dynamic[
            SetterBar[
             Dynamic[
             FE`omegaIndex$$31, (FE`omegaIndex$$31 = #; 
              FE`bRefreshDynPlot$$31 = True; 
              FE`tick$$31 = Not[FE`tick$$31])& ], 
             Range[2 FE`rawNumberOfMasses$$31]]]}, 
         Attributes[$CellContext`qm$] = {Temporary}, FE`bRefreshDynamics$$31 = 
         False, FE`tau$$31 = 
         0.6716957092285156, $CellContext`checkAgainstRange[
           Pattern[$CellContext`v, 
            Blank[]], 
           Pattern[$CellContext`default, 
            Blank[]], 
           Pattern[$CellContext`lowerLimit, 
            Blank[]], 
           Pattern[$CellContext`upperLimit, 
            Blank[]]] := 
         Module[{$CellContext`result}, $CellContext`result = If[
              
              NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
            If[$CellContext`result < $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
            If[$CellContext`result > $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
         FE`bRefreshDynPlot$$31 = False, $CellContext`freqControls := {
           Row[{
             Text["mesh size "], 
             Manipulator[
              Dynamic[
              FE`meshSize$$31, (
               FE`meshSize$$31 = $CellContext`checkAgainstRange[#, 8, 2, 30]; 
               FE`bRefreshFreqPlot$$31 = True; 
               FE`tick$$31 = Not[FE`tick$$31])& ], {2, 30, 2}, ImageSize -> 
              Tiny, ContinuousAction -> False, 
              AppearanceElements -> {"InputField"}], " ", 
             Dynamic[FE`meshSize$$31]}], 
           LocatorPane[
            Dynamic[FE`qPlaneLoc$$31], 
            Dynamic[
             (Graphics[{
               Lighter[Gray], 
               Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                  Part[#, 1], -Part[#, 2]}, {
                  Part[#, 1], 
                  Part[#, 2]}, {-Part[#, 1], 
                  Part[#, 2]}}], Black, 
               Line[FE`qPlaneLoc$$31]}, PlotRange -> {{-Part[#, 1], 
                  Part[#, 1]}, {-Part[#, 2], 
                  Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
              ReplaceAll["qMaxVec", FE`parameterLocatorDependencies$$31]]], 
            ContinuousAction -> False]}, FE`bRefreshFreqPlot$$31 = 
         False, $CellContext`massSetter := {
           Row[{
             Text["mass: "], 
             Dynamic[
              If[FE`rawNumberOfMasses$$31 > 1, 
               SetterBar[
                Dynamic[
                FE`m1Sel$$31, (FE`m1Sel$$31 = #; $CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", FE`parameterLocatorDependencies$$31], 
                    FE`m1Sel$$31]; FE`k1$$31 = $CellContext`kArraySelect[1]; 
                 FE`k2$$31 = $CellContext`kArraySelect[2]; 
                 FE`k3$$31 = $CellContext`kArraySelect[3]; 
                 FE`k4$$31 = $CellContext`kArraySelect[4]; 
                 FE`moSel$$31 = $CellContext`adjustedmoSel; 
                 FE`k5$$31 = $CellContext`kArrayOriginSelect; 
                 FE`tick$$31 = Not[FE`tick$$31])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 Range[FE`rawNumberOfMasses$$31]]], 
               $CellContext`massLabel[1]]]}], 
           Row[{
             Manipulator[
              
              Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, FE`mMax$$31]; 
               Part[FE`rawArrayOfMasses$$31, 
                  FE`m1Sel$$31] = $CellContext`massValue; 
               FE`parameterLocatorDependencies$$31 = 
                ReplaceAll[
                 FE`parameterLocatorDependencies$$31, ("mScalarArray" -> 
                   Blank[]) :> ("mScalarArray" -> FE`rawArrayOfMasses$$31)]; 
               FE`bRefreshMatrix$$31 = True; 
               FE`tick$$31 = Not[FE`tick$$31])& ], {0.25, 
               Dynamic[FE`mMax$$31]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              
              NumberForm[$CellContext`massValue, {2, 
               1}]]}]}, $CellContext`massValue = 
         13.100000000000001`, $CellContext`m2Setter := {
           Text["coupling to neighbouring: "], 
           Dynamic[
            If[FE`rawNumberOfMasses$$31 > 1, 
             SetterBar[
              Dynamic[
              FE`m2Sel$$31, (FE`m2Sel$$31 = #; 
               FE`k1$$31 = $CellContext`kArraySelect[1]; 
               FE`k2$$31 = $CellContext`kArraySelect[2]; 
               FE`k3$$31 = $CellContext`kArraySelect[3]; 
               FE`k4$$31 = $CellContext`kArraySelect[4]; 
               FE`tick$$31 = Not[FE`tick$$31])& ], 
              Map[# -> $CellContext`massLabel[#]& , 
               Range[FE`rawNumberOfMasses$$31]]], 
             $CellContext`massLabel[1]]]}, $CellContext`km1 := {
           Row[{
             Text["horizontal: "], 
             $CellContext`kLable[1], " || ", 
             OverVector["a"], " "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k1$$31, (
               FE`k1$$31 = $CellContext`checkAgainstRange[#, FE`kMin$$31, 
                  FE`kMin$$31, FE`kMax$$31]; 
               FE`kArray$$31 = $CellContext`alterKArrayElements[1, FE`k1$$31]; 
               FE`couplingData$$31 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$31 = True; 
               FE`tick$$31 = Not[FE`tick$$31])& ], {
               Dynamic[FE`kMin$$31], 
               Dynamic[FE`kMax$$31]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[FE`k1$$31, {3, 2}]]}]}, $CellContext`kLable = Style[
           $CellContext`indexLabel["k", #], FontColor -> 
           Part[FE`springColors$$31, #]]& , FE`springColors$$31 = {
           RGBColor[2/3, 0.33333333333333337`, 0], 
           RGBColor[0, 2/3, 0], 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
           RGBColor[0, 2/3, 2/3], 
           RGBColor[2/3, 2/3, 0]}, FE`kMin$$31 = 0.05, FE`kMax$$31 = 
         1, $CellContext`alterKArrayElements[
           Pattern[$CellContext`ni$, 
            Blank[Integer]], 
           Pattern[$CellContext`v$, 
            Blank[]]] := 
         ReplaceAll[FE`kArray$$31, {({FE`m1Sel$$31, FE`m2Sel$$31, 
               Part[FE`nArray$$31, $CellContext`ni$]} -> 
             Blank[]) :> ({FE`m1Sel$$31, FE`m2Sel$$31, 
               Part[FE`nArray$$31, $CellContext`ni$]} -> $CellContext`v$), ({
              FE`m1Sel$$31, FE`m2Sel$$31, -
               Part[FE`nArray$$31, $CellContext`ni$]} -> 
             Blank[]) :> ({
              FE`m1Sel$$31, FE`m2Sel$$31, -
               Part[FE`nArray$$31, $CellContext`ni$]} -> $CellContext`v$)}], 
         Attributes[$CellContext`v$] = {Temporary}, $CellContext`km2 := {
           Row[{
             Text["vertical: "], 
             $CellContext`kLable[2], " || ", 
             OverVector["b"], " "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k2$$31, (
               FE`k2$$31 = $CellContext`checkAgainstRange[#, FE`kMin$$31, 
                  FE`kMin$$31, FE`kMax$$31]; 
               FE`kArray$$31 = $CellContext`alterKArrayElements[2, FE`k2$$31]; 
               FE`couplingData$$31 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$31 = True; 
               FE`tick$$31 = Not[FE`tick$$31])& ], {
               Dynamic[FE`kMin$$31], 
               Dynamic[FE`kMax$$31]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[FE`k2$$31, {3, 2}]]}]}, $CellContext`km3 := {
           Row[{
             Text["diagonal: "], 
             $CellContext`kLable[3], " || (", 
             OverVector["b"], " + ", 
             OverVector["a"], ") "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k3$$31, (
               FE`k3$$31 = $CellContext`checkAgainstRange[#, FE`kMin$$31, 
                  FE`kMin$$31, FE`kMax$$31]; 
               FE`kArray$$31 = $CellContext`alterKArrayElements[3, FE`k3$$31]; 
               FE`couplingData$$31 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$31 = True; 
               FE`tick$$31 = Not[FE`tick$$31])& ], {
               Dynamic[FE`kMin$$31], 
               Dynamic[FE`kMax$$31]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[FE`k3$$31, {3, 2}]]}]}, $CellContext`km4 := {
           Row[{
             Text["diagonal: "], 
             $CellContext`kLable[4], " || (", 
             OverVector["b"], " - ", 
             OverVector["a"], ") "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k4$$31, (
               FE`k4$$31 = $CellContext`checkAgainstRange[#, FE`kMin$$31, 
                  FE`kMin$$31, FE`kMax$$31]; 
               FE`kArray$$31 = $CellContext`alterKArrayElements[4, FE`k4$$31]; 
               FE`couplingData$$31 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$31 = True; 
               FE`tick$$31 = Not[FE`tick$$31])& ], {
               Dynamic[FE`kMin$$31], 
               Dynamic[FE`kMax$$31]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[FE`k4$$31, {3, 2}]]}]}, $CellContext`km5a := {
           Row[{
             Text["coupling from "], 
             Dynamic[
              $CellContext`massLabel[FE`m1Sel$$31]], 
             Text[" to: "]}], 
           Dynamic[
            If[FE`rawNumberOfMasses$$31 > 2, 
             SetterBar[
              Dynamic[
              FE`moSel$$31, (FE`moSel$$31 = #; 
               FE`k5$$31 = $CellContext`kArrayOriginSelect; 
               FE`tick$$31 = Not[FE`tick$$31])& ], 
              Map[# -> $CellContext`massLabel[#]& , 
               DeleteCases[
                Range[FE`rawNumberOfMasses$$31], FE`m1Sel$$31]]], 
             Dynamic[
              $CellContext`massLabel[
               First[
                Delete[
                 Range[2], FE`m1Sel$$31]]]]]]}, $CellContext`km5b := {
           Row[{
             $CellContext`kLable[5], ": "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k5$$31, (
               FE`k5$$31 = $CellContext`checkAgainstRange[#, FE`kMin$$31, 
                  FE`kMin$$31, FE`kMax$$31]; 
               FE`kArray$$31 = $CellContext`alterKarrayOriginElement[
                 FE`k5$$31]; 
               FE`couplingData$$31 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$31 = True; 
               FE`tick$$31 = Not[FE`tick$$31])& ], {
               Dynamic[FE`kMin$$31], 
               Dynamic[FE`kMax$$31]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[
              FE`k5$$31, {3, 2}]]}]}, $CellContext`alterKarrayOriginElement[
           Pattern[$CellContext`v$, 
            Blank[]]] := 
         Module[{$CellContext`m1oSet$}, $CellContext`m1oSet$ = Append[
              Sort[{FE`m1Sel$$31, FE`moSel$$31}], {0, 0}]; 
           ReplaceAll[
            FE`kArray$$31, ($CellContext`m1oSet$ -> 
              Blank[]) :> ($CellContext`m1oSet$ -> $CellContext`v$)]], 
         Attributes[$CellContext`m1oSet$] = {Temporary}}; {$CellContext`u$$ = 
          Flatten[{$CellContext`locDefault$$, $CellContext`mLocDefault$$}, 
            1]; $CellContext`checkAgainstRange[
            Pattern[$CellContext`v, 
             Blank[]], 
            Pattern[$CellContext`default, 
             Blank[]], 
            Pattern[$CellContext`lowerLimit, 
             Blank[]], 
            Pattern[$CellContext`upperLimit, 
             Blank[]]] := 
          Module[{$CellContext`result}, $CellContext`result = If[
               
               NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
             If[$CellContext`result < $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
             If[$CellContext`result > $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result]; \
$CellContext`springColorsByN$$ = DeleteDuplicates[
            Flatten[
             Table[$CellContext`s Part[
                 Append[$CellContext`nArray$$, {0, 0}], $CellContext`n] -> 
              Part[$CellContext`springColors$$, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 5}], 
             1]]; $CellContext`springPoints[
            Pattern[$CellContext`a12, 
             Blank[List]], 
            Optional[
             Pattern[$CellContext`n, 
              Blank[Integer]], 8], 
            Optional[
             Pattern[$CellContext`h, 
              Blank[]], 0.05], 
            Optional[
             Pattern[$CellContext`f, 
              Blank[]], 0.1]] := 
          Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
             Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
             Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
               Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
             Dot[$CellContext`r, {$CellContext`n1, 0}]; {
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                    2 $CellContext`f) $CellContext`nd, $CellContext`h 
                  Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 
                0, 1, 0.01}], 
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                    2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 
                0.01}]}]; $CellContext`indexLabel = Subscript[
            Style[#, Italic], #2]& ; $CellContext`kLable = Style[
            $CellContext`indexLabel["k", #], FontColor -> 
            Part[$CellContext`springColors$$, #]]& ; $CellContext`massColors := 
          Part[
            Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
            1]& ; $CellContext`massLabel := Style[
            $CellContext`indexLabel["m", #], 
            $CellContext`massColors[#]]& ; $CellContext`calcLineTable[
            Pattern[$CellContext`n, 
             Blank[List]], 
            Pattern[$CellContext`b, 
             Blank[List]], 
            Pattern[$CellContext`i, 
             Blank[List]]] := 
          Module[{$CellContext`first, $CellContext`second}, \
{$CellContext`first, $CellContext`second} = $CellContext`i; Table[
              
              Line[{(-Part[$CellContext`n, $CellContext`first]) 
                 Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                 Part[$CellContext`b, $CellContext`second], 
                Part[$CellContext`n, $CellContext`first] 
                 Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                 Part[$CellContext`b, $CellContext`second]}], \
{$CellContext`j, -Part[$CellContext`n, $CellContext`second], 
               
               Part[$CellContext`n, $CellContext`second]}]]; \
$CellContext`calcReciprocalBasis[
            Pattern[$CellContext`loc, 
             Blank[List]]] := Inverse[
            Transpose[$CellContext`loc]]; $CellContext`pointsTable[
            Pattern[$CellContext`mPosFirstCell, 
             Blank[List]], 
            Pattern[$CellContext`latticeBasis, 
             Blank[List]], 
            Pattern[$CellContext`numberLatticeLinesToDisplay, 
             Blank[List]]] := 
          Table[$CellContext`mPosFirstCell + 
            Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
             
             Part[$CellContext`numberLatticeLinesToDisplay, 
              1]}, {$CellContext`j, -
             Part[$CellContext`numberLatticeLinesToDisplay, 2], 
             
             Part[$CellContext`numberLatticeLinesToDisplay, 
              2]}]; $CellContext`nMassesFromU := First[
             Dimensions[$CellContext`u$$]] - 2; $CellContext`adjustedmoSel := 
          If[$CellContext`rawNumberOfMasses$$ > 2, 
            If[$CellContext`moSel$$ == $CellContext`m1Sel$$, 
             First[
              DeleteCases[
               
               Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]], $CellContext`moSel$$], 
            First[
             Delete[
              Range[
              2], $CellContext`m1Sel$$]]]; \
$CellContext`constructKArrayElements[
            Pattern[$CellContext`i$, 
             Blank[Integer]], 
            Pattern[$CellContext`j$, 
             Blank[Integer]]] := 
          Module[{$CellContext`a$}, $CellContext`a$ = Flatten[
               
               Table[{$CellContext`i$, $CellContext`j$, $CellContext`s 
                  Part[$CellContext`nArray$$, $CellContext`n]} -> 
                Part[$CellContext`kDefaults$$, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
            If[$CellContext`i$ < $CellContext`j$, 
              
              Append[$CellContext`a$, {$CellContext`i$, $CellContext`j$, {0, 
                 0}} -> Part[$CellContext`kDefaults$$, 
                 5]], $CellContext`a$]]; $CellContext`constructKArray[
            Pattern[$CellContext`r, 
             Blank[Integer]]] := Flatten[
            Table[
             $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2]; $CellContext`alterKArrayElements[
            Pattern[$CellContext`ni$, 
             Blank[Integer]], 
            Pattern[$CellContext`v$, 
             Blank[]]] := 
          ReplaceAll[$CellContext`kArray$$, {({$CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                Part[$CellContext`nArray$$, $CellContext`ni$]} -> 
              Blank[]) :> ({$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                
                Part[$CellContext`nArray$$, $CellContext`ni$]} -> \
$CellContext`v$), ({$CellContext`m1Sel$$, $CellContext`m2Sel$$, -
                Part[$CellContext`nArray$$, $CellContext`ni$]} -> 
              Blank[]) :> ({$CellContext`m1Sel$$, $CellContext`m2Sel$$, -
                Part[$CellContext`nArray$$, $CellContext`ni$]} -> \
$CellContext`v$)}]; $CellContext`alterKarrayOriginElement[
            Pattern[$CellContext`v$, 
             Blank[]]] := 
          Module[{$CellContext`m1oSet$}, $CellContext`m1oSet$ = Append[
               Sort[{$CellContext`m1Sel$$, $CellContext`moSel$$}], {0, 0}]; 
            ReplaceAll[$CellContext`kArray$$, ($CellContext`m1oSet$ -> 
               Blank[]) :> ($CellContext`m1oSet$ -> $CellContext`v$)]]; \
$CellContext`kArraySelect[
            Pattern[$CellContext`ni$, 
             Blank[Integer]]] := 
          ReplaceAll[{$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
             
             Part[$CellContext`nArray$$, $CellContext`ni$]}, \
$CellContext`kArray$$]; $CellContext`kArrayOriginSelect := ReplaceAll[
            Append[
             Sort[{$CellContext`m1Sel$$, $CellContext`moSel$$}], {0, 
             0}], $CellContext`kArray$$]; $CellContext`growKarray[
            Pattern[$CellContext`nmNew$, 
             Blank[Integer]]] := 
          Module[{$CellContext`k2$}, $CellContext`k2$ = Flatten[
               Map[$CellContext`constructKArrayElements[
                 Part[#, 1], 
                 Part[#, 2]]& , 
                Select[
                 Flatten[
                  
                  Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew$}, {$CellContext`j, $CellContext`nmNew$}], 1], 
                 Max[#] == $CellContext`nmNew$& ]], 2]; 
            Flatten[{$CellContext`kArray$$, $CellContext`k2$}, 
              1]]; $CellContext`resetLatticeVectorsIfAngleTooSmall[
            Pattern[$CellContext`minAngle$, 
             Blank[]]] := Module[{$CellContext`t$}, $CellContext`t$ = Abs[
               ArcCos[
                Dot[
                 Normalize[
                  Part[$CellContext`u$$, 1]], 
                 Normalize[
                  Part[$CellContext`u$$, 2]]]]]; $CellContext`t$ = 
             If[$CellContext`t$ > Pi/2, 
               Pi - $CellContext`t$, $CellContext`t$]; 
            If[$CellContext`t$ < $CellContext`minAngle$, \
$CellContext`locDefault$$, {
               Part[$CellContext`u$$, 1], 
               Part[$CellContext`u$$, 2]}]]; $CellContext`locDependent := 
          Module[{$CellContext`m$, $CellContext`latticeBasis$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`reciprocalBasis$, \
$CellContext`mObliqueComponents$, $CellContext`mPosFirstCell$, \
$CellContext`reciprocalNorms$}, $CellContext`latticeBasis$ = 
             Take[$CellContext`u$$, 2]; $CellContext`m$ = 
             Drop[$CellContext`u$$, 
               2]; $CellContext`numberLatticeLinesToDisplay$ = Map[Ceiling[
                Abs[$CellContext`windowHalfWidth$$/Part[
                  Part[$CellContext`latticeBasis$, #], #]]]& , 
               Range[
               2]]; $CellContext`reciprocalBasis$ = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis$]; \
$CellContext`reciprocalNorms$ = Map[Norm[
                Part[$CellContext`reciprocalBasis$, #]]& , 
               Range[2]]; $CellContext`mObliqueComponents$ = Table[
               Dot[
                Part[$CellContext`m$, $CellContext`i], 
                
                Part[$CellContext`reciprocalBasis$, $CellContext`j]], \
{$CellContext`i, $CellContext`rawNumberOfMasses$$}, {$CellContext`j, 
                2}]; $CellContext`mPosFirstCell$ = 
             Map[Part[$CellContext`m$, #] - Dot[
                Floor[
                 
                 Part[$CellContext`mObliqueComponents$, #]], \
$CellContext`latticeBasis$]& , 
               Range[$CellContext`rawNumberOfMasses$$]]; {
             "mScalarArray" -> $CellContext`rawArrayOfMasses$$, 
              "numberOfMasses" -> $CellContext`rawNumberOfMasses$$, 
              "latticeBasis" -> $CellContext`latticeBasis$, "latticeNorms" -> 
              Map[Norm[
                 Part[$CellContext`latticeBasis$, #]]& , 
                Range[2]], "latticeUnitVectors" -> Map[Normalize[
                 Part[$CellContext`latticeBasis$, #]]& , 
                Range[2]], 
              "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay$, 
              "reciprocalBasis" -> $CellContext`reciprocalBasis$, 
              "reciprocalNorms" -> $CellContext`reciprocalNorms$, "qMaxVec" -> 
              2 Pi $CellContext`reciprocalNorms$, 
              "mObliqueComponents" -> $CellContext`mObliqueComponents$, 
              "mPosFirstCell" -> $CellContext`mPosFirstCell$, 
              "pointsDataTable" -> Map[$CellContext`pointsTable[
                 
                 Part[$CellContext`mPosFirstCell$, #], \
$CellContext`latticeBasis$, $CellContext`numberLatticeLinesToDisplay$]& , 
                Range[$CellContext`rawNumberOfMasses$$]], "lineTable" -> 
              Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay$, $CellContext`latticeBasis$, #]& , 
                Permutations[{1, 2}]]}]; $CellContext`projOpU[
            Pattern[$CellContext`v, 
             Blank[List]]] := {{
            Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
             Part[$CellContext`v, 2]}, {
            Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
             Part[$CellContext`v, 2]^2}}; $CellContext`projOp[
            Pattern[$CellContext`v, 
             Blank[List]]] := $CellContext`projOpU[$CellContext`v]/
           Dot[$CellContext`v, $CellContext`v]; \
$CellContext`relativeDifferences[
            Pattern[$CellContext`r, 
             Blank[List]], 
            Pattern[$CellContext`mp, 
             Blank[List]], {
             Pattern[$CellContext`mIndex1, 
              Blank[Integer]], 
             Pattern[$CellContext`mIndex2, 
              Blank[Integer]], 
             Pattern[$CellContext`n, 
              Blank[List]]}] := 
          Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther}, \
$CellContext`pOrigin = 
             Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
             Part[$CellContext`mp, $CellContext`mIndex2] + 
              Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
             Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}]; \
$CellContext`calculateCouplings := 
          Module[{$CellContext`t$, $CellContext`t1$, $CellContext`t2$, \
$CellContext`r$, $CellContext`mp$, $CellContext`numberOfMasses$}, \
{$CellContext`r$, $CellContext`mp$, $CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "latticeBasis", "mPosFirstCell", 
                "numberOfMasses"}, \
$CellContext`parameterLocatorDependencies$$]; $CellContext`t$ = Map[Append[#, 
                $CellContext`relativeDifferences[$CellContext`r$, \
$CellContext`mp$, 
                 First[#]]]& , 
               
               ReplaceAll[$CellContext`kArray$$, Rule -> 
                List]]; $CellContext`t$ = Map[Flatten[{
                 Part[#, 1], {
                  Part[#, 2]}, 
                 Part[#, 3]}, 1]& , $CellContext`t$]; $CellContext`t1$ = Table[
               Sort[
                
                Select[$CellContext`t$, And[
                 Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
                Part[#, 5] < 
                Part[#2, 
                  5]& ], {$CellContext`i, $CellContext`numberOfMasses$}]; \
$CellContext`t2$ = 
             Select[$CellContext`t$, 
               Part[#, 3] == {0, 0}& ]; $CellContext`t2$ = 
             Flatten[{$CellContext`t2$, 
                Map[Flatten[{{
                    Part[#, 2], 
                    Part[#, 1]}, 
                   Drop[#, 2]}, 1]& , $CellContext`t2$]}, 
               1]; $CellContext`t2$ = Table[
               Sort[
                Select[$CellContext`t2$, Part[#, 1] == $CellContext`i& ], 
                Part[#, 5] < 
                Part[#2, 
                  5]& ], {$CellContext`i, $CellContext`numberOfMasses$}]; \
{$CellContext`t2$, $CellContext`t1$}]; $CellContext`plotSprings := 
          Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, \
$CellContext`latticeBasis$ = Take[$CellContext`u$$, 2]; $CellContext`aLoc$ = 
             Part[$CellContext`u$$, 1]; $CellContext`bLoc$ = 
             Part[$CellContext`u$$, 
               2]; {$CellContext`mLoc$, $CellContext`reciprocalBasis$, \
$CellContext`pointsDataTable$, $CellContext`numberLatticeLinesToDisplay$, \
$CellContext`lines$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
                "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
                "numberOfMasses"}, \
$CellContext`parameterLocatorDependencies$$]; $CellContext`pointsList$[
               Pattern[$CellContext`n$, 
                Blank[Integer]]] := {
               $CellContext`massColors[$CellContext`n$], Null, 
               PointSize[
                
                Sqrt[(Part[$CellContext`mScalarArray$, \
$CellContext`n$]/$CellContext`mMax$$)/500]], 
               Map[Point[#]& , 
                Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
               Text[
                $CellContext`massLabel[$CellContext`n$], 
                Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`textDisOffset$$]}; $CellContext`cOrigin$ = Select[
               Part[
                Part[$CellContext`couplingData$$, 1], $CellContext`m1Sel$$], 
               Take[#, 
                 2] == {$CellContext`m1Sel$$, $CellContext`moSel$$}& ]; \
$CellContext`cN$ = Select[
               Part[
                Part[$CellContext`couplingData$$, 2], $CellContext`m1Sel$$], 
               Take[#, 
                 2] == {$CellContext`m1Sel$$, $CellContext`m2Sel$$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
                $CellContext`springPoints[
                 Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
                ReplaceAll[
                  
                  Part[#, 
                   3], $CellContext`springColorsByN$$]]& , $CellContext`cN$]; 
            If[$CellContext`numberOfMasses$ > 1, 
              AppendTo[$CellContext`g$, 
               Map[ListLinePlot[
                 $CellContext`springPoints[
                  Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
                 ReplaceAll[
                   
                   Part[#, 
                    3], $CellContext`springColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
               Graphics[
                Flatten[{{$CellContext`lines$, Blue, 
                   Map[Arrow[{{0, 0}, 
                    Part[$CellContext`reciprocalBasis$, #]}]& , 
                    Range[2]], Thick, 
                   Arrowheads[0.05], Red, 
                   Map[Arrow[{{0, 0}, 
                    Part[$CellContext`latticeBasis$, #]}]& , 
                    Range[2]], 
                   Text[
                    OverVector[
                    "a"], $CellContext`aLoc$/
                    2 + $CellContext`textDisOffset$$], 
                   Text[
                    OverVector[
                    "b"], $CellContext`bLoc$/
                    2 + $CellContext`textDisOffset$$]}, 
                  Map[$CellContext`pointsList$[#]& , 
                   Range[$CellContext`numberOfMasses$]]}], 
                PlotRange -> {{(-$CellContext`windowHalfWidth$$)/
                   2, $CellContext`windowHalfWidth$$}, \
{(-$CellContext`windowHalfWidth$$)/2, $CellContext`windowHalfWidth$$}}, 
                ImageSize -> $CellContext`primaryDisplaySize$$], \
$CellContext`g$}]]; $CellContext`couplingLocator := LocatorPane[
            Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                  Dimensions[#]] < 3, 
                
                Flatten[{$CellContext`locDefault$$, \
$CellContext`mLocDefault$$}, 1], 
                If[First[
                   Dimensions[#]] > 7, 
                 Take[#, 7], #]]; 
             Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                First[
                  Dimensions[$CellContext`rawArrayOfMasses$$]]; 
               If[$CellContext`rm$ > $CellContext`nMassesFromU, \
$CellContext`rawArrayOfMasses$$ = 
                 Take[$CellContext`rawArrayOfMasses$$, \
$CellContext`nMassesFromU], 
                 
                 While[$CellContext`rm$ < $CellContext`nMassesFromU, 
                  AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`defaultMass$$]; Increment[$CellContext`rm$]]]; $CellContext`km$ = 
                Max[
                  Part[
                   Part[$CellContext`kArray$$, All, 1], All, 1]]; 
               If[$CellContext`km$ > $CellContext`nMassesFromU, \
$CellContext`kArray$$ = Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    Part[#, 2]}] <= $CellContext`nMassesFromU& ], 
                 
                 While[$CellContext`km$ < $CellContext`nMassesFromU, 
                  Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`growKarray[$CellContext`km$]]]]; 
             Part[$CellContext`u$$, 1] = If[Dot[
                  Part[$CellContext`u$$, 1], 
                  
                  Part[$CellContext`u$$, 
                   1]] < $CellContext`minSquaredDistanceFromOrigin$$, 
                Part[$CellContext`locDefault$$, 1], 
                Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                  Part[$CellContext`u$$, 2], 
                  
                  Part[$CellContext`u$$, 
                   2]] < $CellContext`minSquaredDistanceFromOrigin$$, 
                Part[$CellContext`locDefault$$, 2], 
                Part[$CellContext`u$$, 2]]; {
                Part[$CellContext`u$$, 1], 
                
                Part[$CellContext`u$$, 
                 2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`minAngleBetweenLatticeVectors$$]; \
$CellContext`rawNumberOfMasses$$ = $CellContext`nMassesFromU; \
$CellContext`m1Sel$$ = 
              If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
              If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
              If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel; $CellContext`k1$$ = $CellContext`kArraySelect[
               1]; $CellContext`k2$$ = $CellContext`kArraySelect[
               2]; $CellContext`k3$$ = $CellContext`kArraySelect[
               3]; $CellContext`k4$$ = $CellContext`kArraySelect[
               4]; $CellContext`k5$$ = $CellContext`kArrayOriginSelect; \
$CellContext`parameterLocatorDependencies$$ = $CellContext`locDependent; \
$CellContext`qLoc$$ = 
              ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
               2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
              True; $CellContext`tick$$ = 
              Not[$CellContext`tick$$])& ], $CellContext`plotSprings, 
            LocatorAutoCreate -> True, ContinuousAction -> 
            False]; $CellContext`massSetter := {
            Row[{
              Text["mass: "], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`kArraySelect[
                    1]; $CellContext`k2$$ = $CellContext`kArraySelect[
                    2]; $CellContext`k3$$ = $CellContext`kArraySelect[
                    3]; $CellContext`k4$$ = $CellContext`kArraySelect[
                    4]; $CellContext`moSel$$ = $CellContext`adjustedmoSel; \
$CellContext`k5$$ = $CellContext`kArrayOriginSelect; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]]}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`mMax$$]; 
                Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                 ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], {0.25, 
                Dynamic[$CellContext`mMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               
               NumberForm[$CellContext`massValue, {2, 
                1}]]}]}; $CellContext`m2Setter := {
            Text["coupling to neighbouring: "], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 1, 
              SetterBar[
               
               Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`kArraySelect[
                  1]; $CellContext`k2$$ = $CellContext`kArraySelect[
                  2]; $CellContext`k3$$ = $CellContext`kArraySelect[
                  3]; $CellContext`k4$$ = $CellContext`kArraySelect[
                  4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                Range[$CellContext`rawNumberOfMasses$$]]], 
              $CellContext`massLabel[1]]]}; $CellContext`km1 := {
            Row[{
              Text["horizontal: "], 
              $CellContext`kLable[1], " || ", 
              OverVector["a"], " "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`kMin$$, $CellContext`kMin$$, \
$CellContext`kMax$$]; $CellContext`kArray$$ = \
$CellContext`alterKArrayElements[
                  1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k1$$, {3, 2}]]}]}; $CellContext`km2 := {
            Row[{
              Text["vertical: "], 
              $CellContext`kLable[2], " || ", 
              OverVector["b"], " "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`kMin$$, $CellContext`kMin$$, \
$CellContext`kMax$$]; $CellContext`kArray$$ = \
$CellContext`alterKArrayElements[
                  2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k2$$, {3, 2}]]}]}; $CellContext`km3 := {
            Row[{
              Text["diagonal: "], 
              $CellContext`kLable[3], " || (", 
              OverVector["b"], " + ", 
              OverVector["a"], ") "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`kMin$$, $CellContext`kMin$$, \
$CellContext`kMax$$]; $CellContext`kArray$$ = \
$CellContext`alterKArrayElements[
                  3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k3$$, {3, 2}]]}]}; $CellContext`km4 := {
            Row[{
              Text["diagonal: "], 
              $CellContext`kLable[4], " || (", 
              OverVector["b"], " - ", 
              OverVector["a"], ") "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`kMin$$, $CellContext`kMin$$, \
$CellContext`kMax$$]; $CellContext`kArray$$ = \
$CellContext`alterKArrayElements[
                  
                  4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k4$$, {3, 2}]]}]}; $CellContext`km5a := {
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = $CellContext`kArrayOriginSelect; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}; $CellContext`km5b := {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`kMin$$, $CellContext`kMin$$, \
$CellContext`kMax$$]; $CellContext`kArray$$ = \
$CellContext`alterKarrayOriginElement[$CellContext`k5$$]; \
$CellContext`couplingData$$ = $CellContext`calculateCouplings; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               
               NumberForm[$CellContext`k5$$, {3, 
                2}]]}]}; $CellContext`freqControls := {
            Row[{
              Text["mesh size "], 
              Manipulator[
               
               Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {2,
                30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[$CellContext`meshSize$$]}], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}; $CellContext`dynamicsControls := {
            Row[{
              OverVector["q"], " = ", 
              
              Module[{$CellContext`qm$}, $CellContext`qm$ = 
                ReplaceAll[
                 "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
               Slider2D[
                 
                 Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                 ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
              " 2 \[Pi] ", 
              Dynamic[
               NumberForm[
                MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
            Row[{
              Text["time, normalized to one period:"]}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
               ContinuousAction -> True, Appearance -> "Open"]}, 
             ImageSize -> {200, 60}], 
            Row[{
              Text["oscillation scale factor:"]}], 
            Row[{Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}] " ", 
              Dynamic[
               NumberForm[$CellContext`scale$$, {3, 2}]]}], 
            Text[
             Text["Angular frequency \[Omega](q), selection:"]], 
            Dynamic[
             SetterBar[
              
              Dynamic[$CellContext`omegaIndex$$, ($CellContext`omegaIndex$$ = \
#; $CellContext`bRefreshDynPlot$$ = True; $CellContext`tick$$ = 
                Not[$CellContext`tick$$])& ], 
              Range[
              2 $CellContext`rawNumberOfMasses$$]]]}; \
$CellContext`oneTermOfdynamicsMatrix[{
             Pattern[$CellContext`k, 
              Blank[Integer]], 
             Pattern[$CellContext`j, 
              Blank[Integer]], 
             Pattern[$CellContext`mVec, 
              Blank[List]], 
             Pattern[$CellContext`kS, 
              Blank[]], 
             Blank[], 
             Blank[], 
             Blank[], 
             Pattern[$CellContext`proj, 
              Blank[List]]}, 
            Pattern[$CellContext`r, 
             Blank[List]], 
            Pattern[$CellContext`mk, 
             Blank[]], 
            Pattern[$CellContext`epsilon, 
             Blank[List]], 
            Pattern[$CellContext`mA, 
             Blank[List]]] := $CellContext`kS 
           Dot[$CellContext`proj, 
             Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
             Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
                  Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
              Sqrt[$CellContext`mk 
               Part[$CellContext`mA, $CellContext`j]])]; \
$CellContext`dynamicsMatrix := 
          Module[{$CellContext`cd$, $CellContext`r$, $CellContext`res$, \
$CellContext`epsilon$, $CellContext`m$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$}, $CellContext`cd$ = SplitBy[
               Sort[
                Flatten[$CellContext`couplingData$$, 2]], 
               First]; {$CellContext`r$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "latticeBasis", "mScalarArray", 
                "numberOfMasses"}, \
$CellContext`parameterLocatorDependencies$$]; $CellContext`epsilon$ = 
             Partition[
               IdentityMatrix[2 $CellContext`numberOfMasses$], 
               2]; $CellContext`res$ = Partition[
               Flatten[
                Table[
                 Total[
                  Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r$, 
                    
                    Part[$CellContext`mScalarArray$, $CellContext`i], \
$CellContext`epsilon$, $CellContext`mScalarArray$]& , 
                   
                   Part[$CellContext`cd$, $CellContext`i]]], {$CellContext`i, \
$CellContext`numberOfMasses$}]], 2 $CellContext`numberOfMasses$]; 
            ReplaceAll[$CellContext`res$, $CellContext`qVec -> #]& ]; \
$CellContext`calcDynamics := Map[{
             Sqrt[
              Part[#, 1]], 
             Part[#, 2]}& , 
            Transpose[
             Eigensystem[
              $CellContext`matrix$$[$CellContext`qLoc$$]]]]; \
$CellContext`showDynamics := 
          Module[{$CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`e$, \
$CellContext`omega$, $CellContext`points$, $CellContext`lines$, \
$CellContext`nu$, $CellContext`a$, $CellContext`b$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, {{$CellContext`a$, \
$CellContext`b$}, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "latticeBasis", "pointsDataTable", 
                "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
                "numberOfMasses"}, \
$CellContext`parameterLocatorDependencies$$]; {$CellContext`omega$, \
$CellContext`e$} = 
             Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$]; \
$CellContext`e$ = Partition[$CellContext`e$, 2]; $CellContext`points$ = 
             Table[Part[$CellContext`pointsDataTable$, $CellContext`k] + 
               Table[$CellContext`scale$$ 
                 Re[Part[$CellContext`e$, $CellContext`k] 
                   E^(I (Dot[$CellContext`qLoc$$, $CellContext`a$ \
$CellContext`i + $CellContext`b$ $CellContext`j] - $CellContext`omega$ #))], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay$, 1], 
                  
                  Part[$CellContext`numberLatticeLinesToDisplay$, 
                   1]}, {$CellContext`j, -
                  Part[$CellContext`numberLatticeLinesToDisplay$, 2], 
                  
                  Part[$CellContext`numberLatticeLinesToDisplay$, 
                   2]}]& , {$CellContext`k, $CellContext`numberOfMasses$}]; \
$CellContext`nu$ = 
             2 Pi If[$CellContext`omega$ == 0, 1, 1/$CellContext`omega$]; 
            Show[{
               Table[
                ListPlot[
                 
                 Part[$CellContext`points$, $CellContext`k][$CellContext`nu$ \
#], PlotRange -> {{(-$CellContext`windowHalfWidth$$)/
                    2, $CellContext`windowHalfWidth$$}, \
{(-$CellContext`windowHalfWidth$$)/2, $CellContext`windowHalfWidth$$}}, 
                 ImageSize -> $CellContext`primaryDisplaySize$$, PlotStyle -> 
                 Directive[
                   PointSize[
                    
                    Sqrt[(Part[$CellContext`mScalarArray$, \
$CellContext`k]/$CellContext`mMax$$)/350]], 
                   $CellContext`massColors[$CellContext`k]]], \
{$CellContext`k, $CellContext`numberOfMasses$}], 
               
               Graphics[{$CellContext`lines$}]}]& ]; \
$CellContext`frequencyPlotCalc := 
          Module[{$CellContext`eigTable2D$, $CellContext`eigTable1D$, \
$CellContext`qMax$, $CellContext`omegaPointList2D$, \
$CellContext`omegaPointList1D$, $CellContext`range$, \
$CellContext`numberOfMasses$}, {$CellContext`qMax$, \
$CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "qMaxVec", 
                "numberOfMasses"}, \
$CellContext`parameterLocatorDependencies$$]; $CellContext`eigTable2D$ = 
             Flatten[
               Re[
                Table[{{$CellContext`qx, $CellContext`qy}, 
                  Eigenvalues[
                   N[
                    $CellContext`matrix$$[{$CellContext`qx, \
$CellContext`qy}]]]}, {$CellContext`qx, (-Part[$CellContext`qMax$, 1])/2, 
                  Part[$CellContext`qMax$, 1]/2, 
                  Part[$CellContext`qMax$, 
                    1]/$CellContext`meshSize$$}, {$CellContext`qy, (-
                   Part[$CellContext`qMax$, 2])/2, 
                  Part[$CellContext`qMax$, 2]/2, 
                  Part[$CellContext`qMax$, 2]/$CellContext`meshSize$$}]], 
               1]; $CellContext`omegaPointList2D$[
               Pattern[$CellContext`nn$, 
                Blank[]]] := Map[Flatten[{
                 Part[#, 1], 
                 Part[
                  Sqrt[
                   
                   Part[#, 
                    2]], $CellContext`nn$]}]& , $CellContext`eigTable2D$]; \
$CellContext`range$ = Range[2 $CellContext`numberOfMasses$]; ListPlot3D[
              Map[$CellContext`omegaPointList2D$[#]& , $CellContext`range$], 
              PlotRange -> Full, 
              ImageSize -> $CellContext`primaryDisplaySize$$, 
              AxesLabel -> {
               "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
                "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]]; \
$CellContext`showFreqPlot := 
          Module[{$CellContext`aa$, $CellContext`bb$}, {$CellContext`aa$, \
$CellContext`bb$} = $CellContext`qPlaneLoc$$; Show[{$CellContext`freqPlot$$, 
               Graphics3D[
                Polygon[{{
                   Part[$CellContext`aa$, 1], 
                   Part[$CellContext`aa$, 2], 0}, {
                   Part[$CellContext`bb$, 1], 
                   Part[$CellContext`bb$, 2], 0}, {
                   Part[$CellContext`bb$, 1], 
                   Part[$CellContext`bb$, 2], 23}, {
                   Part[$CellContext`aa$, 1], 
                   Part[$CellContext`aa$, 2], 
                   23}}]]}]]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = $CellContext`growKarray[$CellContext`n$]; 
             Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix; $CellContext`dynamics$$ = \
$CellContext`calcDynamics; $CellContext`dynPlot$$ = $CellContext`showDynamics; \
$CellContext`freqPlot$$ = $CellContext`frequencyPlotCalc; Null}}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.600991920019863*^9, 3.6009919670395527`*^9}, {
   3.6009920245298405`*^9, 3.6009920501333055`*^9}, 3.60099313594541*^9, {
   3.600993187449356*^9, 3.600993239845353*^9}, {3.6009932797776365`*^9, 
   3.6009933046760607`*^9}, {3.6012440341096554`*^9, 3.6012440721578317`*^9}, 
   3.6012447781242104`*^9, {3.6012448176024685`*^9, 3.6012448561326723`*^9}, 
   3.6012449730663605`*^9, {3.6012450799064713`*^9, 3.601245088751977*^9}, {
   3.601245122802925*^9, 3.6012451299813356`*^9}, {3.6012451718047276`*^9, 
   3.601245397972664*^9}, {3.6012467859190493`*^9, 3.6012468229691687`*^9}, {
   3.601246896213358*^9, 3.6012470488980913`*^9}, {3.6012470802998877`*^9, 
   3.601247087356291*^9}, {3.6012476034298086`*^9, 3.601247625026044*^9}, {
   3.6012477383525257`*^9, 3.6012477482580924`*^9}, {3.6012479226070642`*^9, 
   3.6012479616512976`*^9}},
 CellID->220187869]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    True, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}}, {{
       2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}}}, {{{
       1, 2, {-1, 0}, 0.25, 0.9279609999999998, {0.9, 0.7}, {
        0.356, -0.09499999999999997}, {{0.3189099541898852, 
        0.46605406908264474`}, {0.46605406908264474`, 0.6810900458101148}}}, {
       1, 1, {1, 0}, 0.25, 1.6789609999999997`, {0.9, 0.7}, {
        0.9440000000000001, 1.9949999999999999`}, {{0.0011530940861640049`, 
        0.03393765549050875}, {0.03393765549050875, 0.9988469059138361}}}, {
       1, 1, {-1, 0}, 0.25, 1.6789609999999997`, {0.9, 0.7}, {
        0.856, -0.595}, {{0.0011530940861640049`, 0.03393765549050875}, {
        0.03393765549050875, 0.9988469059138361}}}, {
       1, 2, {-1, 1}, 0.25, 1.8387609999999996`, {0.9, 0.7}, {2.256, 
        0.7050000000000001}, {{0.9999864038882704, 0.0036872655010630295`}, {
        0.0036872655010630295`, 0.000013596111729583757`}}}, {
       1, 2, {1, 0}, 0.25, 3.4299610000000005`, {0.9, 0.7}, {
        0.44400000000000006`, 2.495}, {{
        0.060623429829085494`, -0.23863828189300107`}, {-0.23863828189300107`,
         0.9393765701709144}}}, {
       1, 2, {0, 1}, 0.25, 3.65, {0.9, 0.7}, {2.3, 2.}, {{0.5369863013698629, 
        0.4986301369863013}, {0.4986301369863013, 0.463013698630137}}}, {
       1, 1, {1, -1}, 0.25, 3.6897609999999994`, {0.9, 
        0.7}, {-0.9559999999999998, 1.1949999999999998`}, {{
        0.9335932598344446, -0.24899173686317352`}, {-0.24899173686317352`, 
        0.06640674016555542}}}, {
       1, 1, {-1, 1}, 0.25, 3.6897609999999994`, {0.9, 0.7}, {2.756, 
        0.20500000000000007`}, {{
        0.9335932598344446, -0.24899173686317352`}, {-0.24899173686317352`, 
        0.06640674016555542}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 2, {0, -1}, 0.25, 5.85, {0.9, 0.7}, {-1.5, 0.3999999999999999}, {{
        0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
        0.015384615384615389`}}}, {
       1, 2, {1, -1}, 0.25, 6.540761, {0.9, 0.7}, {-1.456, 
        1.6949999999999998`}, {{
        0.8486376432344798, -0.35840172114529173`}, {-0.35840172114529173`, 
        0.15136235676552007`}}}, {
       1, 1, {1, 1}, 0.25, 8.168161, {0.9, 0.7}, {2.844, 2.795}, {{
        0.46266668837697983`, 0.4986042757972081}, {0.4986042757972081, 
        0.5373333116230201}}}, {
       1, 1, {-1, -1}, 0.25, 8.168161, {0.9, 
        0.7}, {-1.044, -1.3949999999999998`}, {{0.46266668837697983`, 
        0.4986042757972081}, {0.4986042757972081, 0.5373333116230201}}}, {
       1, 2, {-1, -1}, 0.25, 8.517160999999998, {0.9, 
        0.7}, {-1.544, -0.8949999999999998}, {{0.7013059868188474, 
        0.4576853719214654}, {0.4576853719214654, 0.2986940131811527}}}, {
       1, 2, {1, 1}, 0.25, 8.819161, {0.9, 0.7}, {2.344, 3.295}, {{
        0.23643246789575562`, 0.4248907577489514}, {0.4248907577489514, 
        0.7635675321042443}}}}, {{
       2, 1, {1, 0}, 0.25, 0.9279609999999998, {0.4, 1.2}, {
        0.9440000000000001, 1.9949999999999999`}, {{0.3189099541898852, 
        0.46605406908264474`}, {0.46605406908264474`, 0.6810900458101148}}}, {
       2, 2, {1, 0}, 0.25, 1.6789610000000004`, {0.4, 1.2}, {
        0.44400000000000006`, 2.495}, {{0.0011530940861640044`, 
        0.03393765549050874}, {0.03393765549050874, 0.9988469059138361}}}, {
       2, 2, {-1, 0}, 0.25, 1.6789609999999997`, {0.4, 1.2}, {
        0.356, -0.09499999999999997}, {{0.0011530940861640049`, 
        0.03393765549050875}, {0.03393765549050875, 0.9988469059138361}}}, {
       2, 1, {1, -1}, 0.25, 1.8387609999999996`, {0.4, 
        1.2}, {-0.9559999999999998, 1.1949999999999998`}, {{
        0.9999864038882704, 0.0036872655010630295`}, {0.0036872655010630295`, 
        0.000013596111729583757`}}}, {
       2, 1, {-1, 0}, 0.25, 3.429961, {0.4, 1.2}, {0.856, -0.595}, {{
        0.06062342982908551, -0.2386382818930011}, {-0.2386382818930011, 
        0.9393765701709145}}}, {
       2, 1, {0, -1}, 0.25, 3.65, {0.4, 
        1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
        0.463013698630137}}}, {
       2, 2, {1, -1}, 0.25, 3.6897609999999994`, {0.4, 1.2}, {-1.456, 
        1.6949999999999998`}, {{
        0.9335932598344446, -0.24899173686317352`}, {-0.24899173686317352`, 
        0.06640674016555542}}}, {
       2, 2, {-1, 1}, 0.25, 3.6897609999999994`, {0.4, 1.2}, {2.256, 
        0.7050000000000001}, {{
        0.9335932598344446, -0.24899173686317352`}, {-0.24899173686317352`, 
        0.06640674016555542}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 0.3999999999999999}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{0.9846153846153846,
         0.1230769230769231}, {0.1230769230769231, 0.015384615384615389`}}}, {
       2, 1, {-1, 1}, 0.25, 6.540761, {0.4, 1.2}, {2.756, 
        0.20500000000000007`}, {{
        0.8486376432344798, -0.35840172114529173`}, {-0.35840172114529173`, 
        0.15136235676552007`}}}, {
       2, 2, {1, 1}, 0.25, 8.168161, {0.4, 1.2}, {2.344, 3.295}, {{
        0.46266668837697983`, 0.4986042757972081}, {0.4986042757972081, 
        0.5373333116230201}}}, {
       2, 2, {-1, -1}, 0.25, 8.168161, {0.4, 
        1.2}, {-1.544, -0.8949999999999998}, {{0.46266668837697983`, 
        0.4986042757972081}, {0.4986042757972081, 0.5373333116230201}}}, {
       2, 1, {1, 1}, 0.25, 8.517161, {0.4, 1.2}, {2.844, 2.795}, {{
        0.7013059868188473, 0.4576853719214654}, {0.4576853719214654, 
        0.29869401318115274`}}}, {
       2, 1, {-1, -1}, 0.25, 8.819161, {0.4, 
        1.2}, {-1.044, -1.3949999999999998`}, {{0.23643246789575562`, 
        0.4248907577489514}, {0.4248907577489514, 
        0.7635675321042443}}}}}}, $CellContext`defaultMass$$ = 
    20, $CellContext`dynamics$$ = {{
      Complex[0.6790602328891914, 9.230900003615161*^-19], {Complex[
      0.7248589832535917, 0.], Complex[
      0.650064949116095, -0.020858686170711016`], Complex[
      0.11988513411713456`, -0.0981715969681187], Complex[
      0.15160623794564831`, -0.028647866526790612`], 
      Complex[-0.002472802788942547, -0.01713913715451654], Complex[
      0.05556524411678816, 0.01890267003822048]}}, {
      Complex[0.5524636587025472, -7.594543271602355*^-18], {
      Complex[-0.38354558530686395`, 0.09744499810272776], Complex[
      0.1619813466218059, -0.23832737428749207`], Complex[0.6766558452199941, 
      0.], Complex[0.5279467930943094, 0.011722985858567875`], 
      Complex[-0.0019794387381373065`, 0.0612963317654061], Complex[
      0.14074635807044672`, 0.0077645969691057665`]}}, {
      Complex[0.5222542056555272, 7.39373223091693*^-18], {
      Complex[-0.5047764091042254, 0.08027140607893792], Complex[
      0.6076266586520926, 0.], 
      Complex[-0.41722429897453955`, -0.26584428115246467`], 
      Complex[-0.11870218623554862`, 0.011771602360776734`], Complex[
      0.10106066627579662`, 0.15510216234064736`], Complex[
      0.24672133224192438`, 0.12420825231706026`]}}, {
      Complex[0.47798270089481093`, 1.705186367657685*^-17], {Complex[
      0.11776747404882068`, -0.17021352942962187`], 
      Complex[-0.19349636076477256`, 0.18545691772731276`], 
      Complex[-0.005098087736675982, 0.0481703582836023], Complex[
      0.12443545522518613`, -0.04846883240430583], Complex[0.7520021001235273,
       0.], Complex[0.5450959458974042, 0.050065292585647264`]}}, {
      Complex[0.4208599945029234, 1.7181192359807767`*^-17], {Complex[
      0.046412084869462106`, -0.0633132278362492], 
      Complex[-0.15001494768060744`, 0.1368626263531111], 
      Complex[-0.49457449633790096`, -0.020339968952328036`], Complex[
      0.7465187765334863, 0.], 
      Complex[-0.3425167147633056, -0.05320301419822421], Complex[
      0.17190685158210708`, -0.02435844462026826]}}, {
      Complex[0.3371723422003491, 1.2680207595331082`*^-17], {Complex[
      0.08250671501222374, 0.03036710231625256], 
      Complex[-0.10759757386702096`, -0.00917692568070801], Complex[
      0.15992951319705684`, 0.020880420200147097`], 
      Complex[-0.32856173648033754`, 0.004931060374980048], 
      Complex[-0.5245849484304596, 0.028709761501831688`], Complex[
      0.7553839007471159, 0.]}}}, $CellContext`dynPlot$$ = Show[{
      Table[
       ListPlot[
        Part[$CellContext`points$7124, $CellContext`k][$CellContext`nu$7124 \
#], PlotRange -> {{(-$CellContext`windowHalfWidth$$)/
           2, $CellContext`windowHalfWidth$$}, \
{(-$CellContext`windowHalfWidth$$)/2, $CellContext`windowHalfWidth$$}}, 
        ImageSize -> $CellContext`primaryDisplaySize$$, PlotStyle -> Directive[
          PointSize[
           
           Sqrt[(Part[$CellContext`mScalarArray$7124, \
$CellContext`k]/$CellContext`mMax$$)/350]], 
          $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$7124}], 
      Graphics[{$CellContext`lines$7124}]}]& , $CellContext`dynTab$$ = 
    1, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyEvXd01MX7/h1QkBKk9yJdqdIhENjQQpVOqEqo0hNakCZFBKkB6VU6SJMq
iIEldAk1nZDN7oYkSO8lJODj8+G+Ztnr/np++Ydz5syZnX7N9eI9c5fqF9Bp
YEYPDw/P3B4eH/37b6fiG3//a0+mk+1W3nydPizN6nXip1nxx5ItSK9/YMux
t4ueW6OzNghquiLJ4p7/nvUrr7E7dj24ZdI7/C/9pvXO+klPy59zpXvI36Ij
iQc3P1X5LYM3rK48cY6r/Lbvy7fU8m/48uQeVR9L9wv5h1uGp1B90iwXW4eV
3ZQ7xfIu6nXLbk08TLuKTvhkzrunSSYd7UoLqlJ7+KIkyn/PeueddcqkcFc6
2hX2POfyBqHJJh3tCj/VaszwMrc5v+VN4YYhG5+70tGu+U831mn7w22uj2WZ
X+96g+qq+ltKfOwYWfQL9MMLK9p1zpr/5d93kkw62nVlUt/T9X7i/Pescw92
7vvVlRSTjnY9GO1fZuvV2yYd7fJt+Hr41i23Ob+lzy8ta1Qd7ioH7aq/PuHA
5CrJXB/LqF3VrvRbnsT1t+R7fWB9u1+SLB3+l55s2nXw+5iwpr8km3S0a3Ol
jMPutU+h/Pes9mEe1U9VcKWjXVd6D/QamctVDtrV8NTugTUqJnF+y5Kx61f8
duWWSUe7fp4z/vX487e4Ppb0XXe9TpRQ9bf41ew2ZV2eZAt+D+0689upCWGf
pJh0tGvj8lc199Xg/Pesi1uPP5+pfJJJR7vmZ2/fsfSBWyYdf4+qrHiZa+kt
zm/h/GhXMJWPdv3f9UmzoP7SXgvahfYiHe2i/rGYdrn3pwXtov43v0/jhfwW
Gl8L2mVznw+oj4XmD+pvwXzr8n5+mnbllfmJdLRrtMxn9/z3rJj/SEe7/GW9
IB3t+krWF+W3PJL1iHS0a6GsX6qPJUzWO9Xfclb2B9lPfNAu7CdIR7to//FB
u4Ld9ysftIv2N5//2A+R30L7pw/a9bf7fov6WGh/Rv0t2M9l/zftwv6PdLSL
9MK0q667vph2kR6ZdpF+mXaR3pl2dXTXR9Mu0lPTLtZftOtO/zbNLuxxKl1u
8Lzk5A55nUqXO5XY8v2XxxxKlwO+LVY+eJ9D6XL273zPZAxX+S1Ncm4/693I
qXR5VrMF3xy7pepjyVOz8N0fSiQqXX5kb7R55zOn0mWfCjMD9n/rVLpcfM7S
avMncP571vN1ju//fZ9T6fI8/zd9h+dOVLq84kDWlj/0T1S6fOHql0O8pyQq
Xe5RfcfTb/olKl2uP3nID4eyJypdrnxjUNcxc51Kl6OfeqZe7eZUupyzx6Iz
3ayc/541JMfZHTXqJipdfvyy8/XsoxOVLnsdTdyUf5zKb4lpPOj+8UaJSpcP
vkyMWBin6mOZWanWtD91/S2dR+Vvnn+YU+ly7qgpa2NOOJUup+3YXn7dp4lK
l2tnu7pg8gfpaFeFtC3PHUudSpfHhOadUvuVQ+nyuPbBXeb87lC6XKLb37uH
7XQoXc5XpH3ewlcdSpcfxnRMi/7GqXS5XKfOaQ/vOJUuJ79YE9VhKee/Z/1x
UqUS5+MdSpd71m/XJXWOQ+nysVcjTtYer/JbOD/axeWjXf93fdIsqD/rMtrL
ukz9Y/SrlHt/Gv2i/je/T+Nl9IvG1+iXl/t8MPpF88foF+Yb63J7mZ+syz/I
fGZdPiTzn3U5VtYL67K3rC/WZaxH1mWrrF/W5Vyy3lmXsT+wLmM/YV2m/cfo
V1f3/croF+1vRr9oPzT6Rfun0a9z7vut0S/an41+YT9nXcb+z7pMemHaNdVd
X0y7SI9Mu0i/TLtI70y7Orvro2kX6alpF+sv2jVu629j2v3uULp8c2qZKjPr
OZQu55ywI329j13pctjsngVTBicoXd4wedpV+3Ob0uVJOXte/ypTgtLlAdl/
ST56L0Hp8vz2/vdX9LQrXa4UFDh6QQW70uV+JXcGFP5M6/KpoJIRDVY4lC5X
yVLkQrrFoXQ5cMzd73/+zKF0+VL5VSVXV1T5LY3rx7waV8+hdDn2lxzVP/J2
KF2OcmSePM6L65NmKV7yYNt93g6ly87snkfmVnIoXe6/bPj0wOqc/561Y8US
pybXdihdrtKnR5NDdR1Kl3s1mFshqarKb/EalGNlSjGH0uVfFiTWTy6h6mPZ
2dYeFthT1d9ysJDnwy/+UrpmLeYd9vmBsASly7su5Hyd3tqudLnUxbVpq2rZ
lS6PHNd292z/BKXLW3ds8qgaYVO67P+23sx6nyQoXc6SHDT1+kZVH8vPnrUb
D1/H9UmzJP50vGBMX4fS5cRPv51Qa7ld6XLnDZPXB2S0K12um3fXoi+f2ZQu
H6nn531gvE3p8s47GfK/6aLyWzg/2lWTyke7/u/6/NsuqT/rMtrLukz9Y/TL
070/Xb7Svf/N79N4Gf2i8TX6VdZ9Phj9ovlj9AvzjXX5kMxP1uUdMp9ZlzH/
WZcbyHphXe4t64t1ubKsR9blzrJ+WZcHyHpnXU6U/YF1GfsJ6zLtP0a/brjv
V0a/aH8z+kX7odEv2j+NflV232+NftH+bPQL+znrMvZ/1mXSC9Ouge76YtpF
emTaRfrl4gDuemfalctdH027SE9Nu1h/0a6YbwuHNluhdNDa/OsBp777Il7p
crOILYMr94hVurwy8P7QrLVilC7f779pQY+uMUqXVyUUK/B9rZtKl6dVXRBU
t5RN6XL38tOnBK6wKV3OMmXI3TuPbEqXX3008nLemTaly1WC8u664x+vdLlZ
sz+uTPo2Xuny7WI7h766F690udeVuiG+/jaly/6D8lzOusumdPntX2uKd45X
9bHMLnt0TPVLqv6WEpfLdC/e2aZ0uckdS7235WxKl/9ZPzCX5xrO/+95I+O4
b1sn25Quh1qnvxwQZlO6fKv7xfCbs1V+i8dvO4tc+cKmdNmzWe7hH62IV7rc
vXRY6tMG8UqXk9/l9m+/Ml7p8u9tEgPX59e6nFjc81CDczaly6O2nbANGah0
1tqp7atLvmvjlS6neDW60+N6rNLl4xvrjt3yOFrp8vcTh6Rk6xCjdLlGVOuy
pbvcULq87ceIVi9m25QuD3pccPeda0oHrf1LPz33Nile6XITa7/JK8NjlS6/
SFkyr681WulypyYLLWMPRStd5vxoF5ePdv3f9UmzoP6sy2gv6zL1j9Gvae79
afSL+t/8Po2X0S8aX6Nfo93ng9Evmj9GvzDfWJf/lvnJuuwn85l1OYfMf9bl
j2W9sC5jfbEuW2U9si7XlPXLuvzRL+/XO+tyC9kfFMeW/YR1mfYfo1+v3fcr
o1+0vxn9ov3Q6Bftn0a/mrjvt0a/aH82+oX9nHUZ+7/i2O56Ydo13V1fTLtI
j0y7SL9Mu0jvTLtIH027SE9Nu1h/0a42I8qd+uZRnNLlnOPL1Q7teUPpcq5x
D2fkOxqldHlOnotxxbdFKl3O8+1nnjOTVH6L37N89pq3o5UuW8ZveunTNEbp
8pzo3MsTlscoXb6w7mTPwlExSpd7d3gSs8rvptLl1S2z7Og2NVbp8usW348v
tjxa6fLv284PP70tWulytZobFwdkj1G63OZVv5xjf4pRurwsNP+nCTlilS5f
yfjNliYbuD5plm+79XvQue8Npcsbxi4OiLp5Q+lygWwJS+Zk4/z3rL1vXvmi
zMBYpcshHTd3+DgmRuly0XHb555sF6N0eeaiAsVGhkcrXe63+N3eKROilS5v
PuxzeEJktNLleTVOVTj5WOmatfixjamlY5UOWms+bvXsxW8xSpcDotpWvTks
Runy5dCm/dcUilG63C/4p1fT90crXbZGX8taY0Ck0uW+/WvPXBUcqXR5kb9v
7oIzuT5plk0LM8968uKG0uX1w4r/vKB3jNLloz9cXLv8TrTS5Z6VrVHFTiid
tY7b/rxueolLSn853fy/CZWD+v/fv5tmQT1Zf9Eu1l/qB6NT1G9Gp6ifze/T
uBidonE0OjXSfdyNTtE8MTqFecX6O1fmIevvJpm3rL/9ZZ6z/k6XdcH6W0TW
Eevvn7LuWH+xTll/C8m6Zv3dKPsA6y/2DdZf2meMTtG+ZHSK9jGjU7TvGZ2i
fdLo1Cv3fdXoFO3DRqewb7P+Yp9n/SVdMO1q7K4jpl2kO6ZdpFOmXaRrpl25
3XXQtIt007SLdRbtKh945KsGS6OU/mYodfTPYYOilP4e6Vl1V4o1Qumvn6Pm
wu1xfyn9XXiq1p4abS8o/c10NueNJpcuKv0dn5rpp2vRl5X+7gm8VWpQ0jWl
v+XqPL847ni40t+AO4HefuOilP6W6N4qtV3dKKW/p7KUOLq3WqTS39EHik8+
vzdC6e/5WtvG9f8tQulvmEdcgV4hEUp/E17Wz3I5OULp7+wVl9u0qBOp9LfZ
1+8qVdkRqfT3n/HVe/1+O1Lp74JFlzt2Gc7571kTrvWe4PVPhNLfgccG5F3w
e4TS36e+zXN+skTlt/i0Hn7W54cIpb/f7xy+qfayCKW/3f5ISNiq62/J/vHP
Q/f0iVL6G9qv8qKFiyOU/vodrVX2Scp1pb9LEhbtqLThqtLfI68Wl9q8K0zp
79MFw2o1fHZB6W+GHW22ll1wTulvu/JTa+37+YrS37wR13vcfhSp9DdzLo8z
vt9HKf0tsn1W/7BskUp/T/zp+yzk52tKf4My/9Ure93zSn+PFY5t2eLQEaW/
nI76B1I5qP///btpFtST9RftYv2lfjA61dW934xOUT+b36dxMTpF42h0Kth9
3I1O0TwxOoV5xfqbWeYh628Xmbesv9NlnrP+NpF1wfqLdcT621vWHeuvXdYp
6+9iWdesvxm+e78PsP5i31D+132fMTqV6L4vGZ2ifczoFO17RqdonzQ6ddx9
XzU6Rfuw0Sns26y/2OdZf0kXTLuC3HXEtIt0x7SLdMq0i3TNtCvEXQdNu0g3
TbugsztSL03N9TrjyWblTvaY8u6V9bvGG/8peTbJpFezzCn6fZknVv+ZbyfY
D7nS0d7BPoeiYpYkWdL+12+PzXzw/uWl//Jm+O5Rf++HctA/RYsVWZLX35Xe
4H/lJ1nvXCler2NbVzr6Le6v5s32n+b0MGtVv9Qtj2640tGf1Rsuz5tlXrKl
5f/qE+WqZ8HLm2ZHJFu+onWK7y13DGhV1rtwmrW59M/YibW2rWlovmO0NqDv
md3blWbdWfTC7Ad+rnLQbwMmtJjcydNVDn8XTe2yrKv+tP2YaE6/aaluG/Y8
hyXFlI/x6nV8Ucmeru88rV5cvuRH/3vdmBMw4JorP9LxPbb7uCdZCjZs2KP6
dVc65qH/rwHLZ61MofYmWStG7p90poX5LhS65ipf8mN842se7R14wZWfvwOn
+WkZbet1/ewrrudzS1BOr/Dwjq7y28g8sRfpGvbTBPP9qqR/UL7kx/zx9Cj1
OMsAV36k4/tzWkeWBikTR1S5qOaDZez2qL8S1v6rN9H/Wy/WJjKvfKasbXFi
SbKlm5vuu74zdx+vNOuotQutYx4m0Xi5vrdH+cZfR1QvmOe+q3z+Xh3ld5X5
tmHX6qWbL3F7D3mb9rqPl2VPfJNX31a7zeNlvsNHfWrI/Ix+Vm3i21hXfTrJ
fMB38siPeXg4Z8W/PpmcYvK3o/yoj5fMzyLxC+rmXOyaP61lfuL7Z+THvO3f
8uTYAd3V/DT5UZ+6Mp8HBVTbeTDdVR8p3+qg+mPeJtzutzdroCs/0q/K9+Go
T3WZz4Mnrhs36oBaj6r+hktP9/0haZDaT8y9BtSnj8z/5atnnbmX7ur/9+N7
KqSRfMeO/Jjnp6Z2ujPsNuf38EB+2ictF7r9VMJiT+J90tSH5rOl8Pd/ZT58
S81nc/+i9/t92+or62Xn3Nv/pA7Gue1MiDffU3CbP2lW6JH7/HGtL5SPdVHa
OfnqV6Gu8tU9CPf+tFzd96ZNtTaqP725P829mznPkkYWT+b5YFkq9wtQny9l
vfhkmFzDa6+rPvWoPshv9vObDdJvfe7Kj/SfcZ9C6lNH1suEfP75Iwq76tNS
5tsSuQeB/FgXKXl3dZ04MYn2K9c9FNQH62Vf55Ee9dckmfq0kfrg/gjym++X
avVs3rKvK7+6V+K+n1hmFOnS/0HVJOpPV31oP7Qc2ZVj5qKeSbwfmvsyqE9j
WS/JKVN6VXx4y9SnNdUH+bEuCrwutbeU3ZUf6eb+i/v+b+n/6HS5aZHcnx/c
03Gfz5bD+TN9+jI2ieezyY9zTlNZL+kDtsduK+0653wl8x/53edPmrWBnIvc
54/rfhDKx7poX+pJnSM7kkz5fL8G5WO9NL5epIX/fu6fY97oH5oPllwng54P
PnmL54O5N4T6QF8KL6pbIN8UV306YL7JfHA/B96z5h76yn7i5S06B7ryoz6N
ZL0Et75V9nKIqz5+VB/kN9+NSPnIz/ebUJ96sl4WSvmoT9v/qD/WRU7pH/f2
uu4roT5VZb2gf2g/sfB+gnXRTsaX9kOTH/XxlfWC8XWvv6s+yM/rBfmRjntV
tP9b0mQ+0/6v6o91seDJ/Em1Fqj5bO6Lwb9AXwbIeoR/aUj3qshHWFE++Qiz
vlA+1gX2H5TP97ZQfk9ZL0my/7j3zz5v9A/NBwv2T5oP5j4a6gN9mS77J+pT
l+rj7u/uWZNl/3f3d//qjpxPaD5bDv35eeOnD1z1wXkM9+CQH+uijugXzX+T
H/WxyHr5TvQL9ekp8w3nT+THukgV/UX+DpQf9cF5zCL6S/uDqj/WBc4PtB+a
+32oD85jj7q3mbHzD1d93o/v2ZC2ct5GfqyLM3Iec8/v4YH8tP9bcF6i/d/4
3C3vz2PG/waKv0j/j3ttyN9Y1gvOe8jfRuY/7vERH7BCv4gPmPuMKB/rAufb
dOJIS+U+IPWnJcflqhFzeqZwf3pzf2Jd4HxO88HyUPwg6lNT1ss/7YbMiPFM
MfXpLPN/odxDdO/Pe9YB4i/SiXchP+oDfYG/oPls6oP8WBfwR8jP9zFRHznv
WV+1HFfr+CtXfVpJfYKp/lgXu8XfpROXS5X7lagP9CVS/B3tJ+YeKO2HliPi
T2k/NPlRnwayXjaLP0V9fKU+uO+J/FgXucS/pxM/xD1Q2v8tFvHjtP+b+mx7
7+vNugDnQXoLWRfgALS+rIXE79D6MusF5WCeg2NQP1hyFJ45/fGBFO4HyyW5
x0rjaEkQrkLjaPLjd2UcrWOFq7i399/5LJwH5cs+bKkinAflY96GUX0wP72F
OyE/0vG+AX4X87awcCekYx7WEA5G69TSUzgYyu8o5eM+L+0zlv7C5WifMfd8
8buYh+uFyyEd86qG8EbaJy1jhB/SPmn2VZpXVvAipA+UcQfnpH6w3BQuinSM
Czgq0tHPxYW7Ir2K9Fsf4b00Dy3gvTTPLROIG4Mnn1gY/mJaQ6fiydPzP1r+
UT+n4sm7T/T0G+nrVDz5ef+zFzvPcyqejHtqzJPn76xWaExtp+LJRa/ev7ep
mlPx5Lf9s59568/pYdY2w0suOTLKqXhyx/xfZD692ql48polf7fpH+lUPBn3
BJknf9442+qZS5yKJ+MeLvPkpedu3wiZ61Q8ucCon9+MWutUPJnLAU++7x+b
2XFN9YPlx4BhK0JsTsWT750v3+CTo07Fk035xJMbl2685/kzp+LJuEfMPPnz
uQn9J1VLVDz58bHVOzzLJCqeXOZInx/bl01UPNmUTzz5eKXthUMaJyqejPuS
zJPrHPAfOcqH6/ncsq1baJ1i+RMVTz4duXf++aGJiieb8oknD64dNK7t8ETF
k3FvmnnyZ5lP/jIpUs0Hy8L4Tumf/tv/zJNzFZy9r+C/6cyTeR5iXmVf2PLQ
yT48Xq574syTM2VYO+5NilPxZNyTZZ6coVnWzBUmcHsPeZv2Ek++liWs4tuv
1XiZ++PMkzft/7LC3Q/qA56M+93Mk1Ozt14TUzpR8WTkZ57cqP+c9cmVEhVP
xr115smZlza/FVRCzU+Tn3nykmmLv2zmk6h4Mtcf8zbHhPR+QR8lKp6Me83M
k8d7bdtVSq9HVX/Mc3vElQz1wtR+Yu7jM0+uEV9z+4ZDTsWTx8r9a+bJ0d5p
weV+5/weHsjPPLn7jMtDV8xV+6SpD/Nkn3KNvjozUc1n824A8+RJyZ5eS391
Mk9w3a8nnvxM9Ih5MtYX8+TAq6XeBV13Mj9R5cO/bM1w/FDqatWf3mOoP7Eu
tl2YuGHzRKfiyUFyL555co5ph/cP+qA+9ag+zJNtTd5GbRznJH7ywTsDxJMn
td1+aelYp+LJn8n9febJd7YN9JnShPcr1/sJzJO7NRicNbKeqz5tqD7Mk0+t
nlB2RE4n80PXewjEkzs2Xrh8SRHuT1d9mCdf2hTa6m5ltR+adx6YJ99+u2/w
ipMOU5/WVB/mySviT66vfcRBvPSDdxuIJ/+R4XTDv8aq/d/1vgTx5I1bapZ8
OUDNZ5OfefLdlKC/l0xwKp6M/MyTcS5ynz+udy2YJ7+dPe75oepOxZO5P7Fe
Vm7+fq59OffPMW/0D/Pkv8+M7NJ4g4Png3nvgnnyD+WbNP7mM6fiyXiPgnly
5ztzBq467VA8uRTNZ/j9kJZrptVY7aqPH9WHeXJHKR/5+V0O5snHpXzmyVx/
c/9O+od58jjaT+D3p0v/0H5i4f3E/D+LjC/thyY/8+QVMr7Mk1Ef5snLZb0w
T8b+yTz5jsxn2v9V/bEusi7rlNZvi5rP5p0T5slHZT0yT8Z7IMyTs0n5zJOx
vpgnh8n+wzyZywdPTpH9h3ky+od5cqjsn8yTcd5gntxJ9k/myagP8+S7sv8z
T8a7KMyTW2369En9tk7Fk/F+C/Nku+gX82TkZ548WfSLeTLOn8yTob/Mk5Gf
eXJO0V/myVx/rAucH5gn47zNPDn2oz8mXV3mVDy5gZy3mSfHyHmMeTLyM0/G
eYl5Ms4/zJPhL5gn4z0W5sk47zFPxvszzJPXi34xT8Y7PMyTE+R8yzwZ79gw
Tz5w43SbtI8TFU/2pv7EuvCU8znzZPhB5snDq470WvDSqXgy3s9hnvyx+Avm
ycjPPHmp+AvmyagP8+R08UfMk/GOEPPk5V6zAxZ2SFQ8meuPdQF/xzwZ7wIx
T94q/o55Mt4vYp6cWfwp82TkZ56cUfwp82TUh3nyUPHvzJPxfhHzZPhx5smo
D/NkcB7myeAAzJMbit9hnoz1wjwZHIN58oD5IzM2bqr6wby/xDz5hHAV5snI
zzy5lnAV5sl3hfMwTy4nnId5MtcH87OpcCfmyXgninlyWeFOzJPBwZgng4Mx
T0b5zJMLCpdjnoz3qZgnPxAuxzy5k/BG5slfCD9knox9lXnyAuFFzJPBOZkn
vxMuyjwZHJV58gLhrsyTwXuZJ4P3Mk9mbgyeXOLaoCtXdjkUT/74zPqJPt4O
xZPbpZXycHzrUDz58a9PLvZfbFc8Ge+rME8+1Gykb1uHXfHkPG3PRwSMtSue
7HdkxdxMXTg9zHpy/85BGYvYFU8uNrBHlmzl7IonTy23qsOzanbFk/G+DfPk
Wz3nvW62w6F4Mt6PYp58P3H3k4N3HYon553lW9FvgEPxZC4HPHluVd+sjauo
frC8azzTUayBXfHkC+1Ob/m9nkPxZFM+8WRL4WJnQ+o7FE/G+1fMk59Ztw3t
tNeuePLccrbN9v12xZMd7WZumF3RoXiyKZ94crs7G/03V3Ionox3t5gnrz/f
8PP2d+yKJ6/JUnd0aIpd8eT0JhOqf+56/8fwZFM+8eS8+3OXs1Z2KJ6M976Y
J99qcatJ+gf1wbyq0etepvHX7Yonj6rZaVmrFXbFk4vTPMS8Kl2gV95OW3m8
XO+bMU/+Y8LYtw+j7Yon430n5slXju3Ltacmt/eQt2kv8eSGHZ622FtRjZd5
94x58tg39aceD7Mrnox3yZgn9wu+b/3rql3xZORnnvz4Vu9Vez6YP/AveG+K
eXJIgde1x1ZR89PkZ57c6MznPhnC7Yonc/0xb5NXTS30+lu74skB8h4X8+T6
R8b2qlJZrUdVf8xza4FnZZ61UvuJeUeOefK0gzubtCllVzx5m7wbxjx5b/DN
CpMKcX4PD+Rnnty/Tqv5i9qofdLUh3ny4LV91t2foeazee+OeXLdh2Vu5bqd
oHiyeYeNePIj0SPmydjnmSdPreXb5vfyduYnqnz4l/nHvlk5JbPqT2/uT6yL
u0kV4maUVPPB0lfec2OeXP+w5+WZRe3Mf0x9mCfvfljmXNKSBOInH7yPRzz5
eOyFbldH2BVPzirvzjFPLuOx/s3lAN6vXPmZJ3c+M2n9zQqu+rSh+jBPztut
4/Ni923MD13v+BFP/tK6el6PXdyfuv5YFxPveActyedQPBnv7zFP3hs4uUTg
Vld9WlN9mCd/0So8W76lNuKlH7w3SDz53NArT8p841A82byLSDw57FpSxmnL
HIonIz/z5Ow30lI+vWVXPBn5mSfjXOQ+f1zvMTJPHh0d++hBe7viydyfWC8/
jlnXtvBe7p9j3ugf5smea1r4j7Oq+WDeaWSevO9U6sKS4QmKJ+MdRebJpdJz
/TStdYLiyZ40n+H3HQtTbKGervnsR/VhnlxCykd+fk+SebJTymeezPXHusgu
/cM82Z/2E/j9PdI/tJ9YeD/Buhgj40v7ocnPPBnjyzwZ9WGe/LmsF+bJeMeS
ebKnzGfa/1X9sS4q/lRv53cFHDyfzfuczJPPynpknox3LJknV5DymSdjfTFP
/k72H+bJXD54MvYf5snoH+bJeWT/ZJ6M9z+ZJ1eR/ZN5MurDPLmc7P/Mk3E+
YZ48Ynpq0fJ+CYon491R5sm7RL+YJyM/8+RQ0S/myXhHlHky9Jd5MvIzT24g
+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
8on3DqsT2mLngQjFexFXl3nvuZo5lxUeGK54b5GZsb/7LQhXvHf5+B+bvf6g
/DZcPvFe2/FxTWpvjFC8F3FIFe9Nebyt1blwxXsPtZow6fq/v8u8d3tqeuCT
dxGK9/I8xLw6Uu16m1lVoxTvRfxi5r2jy2b4c1OFCMV7u0lcV+a99s058+7f
zu095G3aS7x3VrkyDy//osbLxDVm3nv/n2x5a5cIV7x3ucSfZd6bf0P4tu23
ryvei/zMe7d23dz7wo4IxXsRT5l5795rnbtOP67mp8nPvDd2afSYjqevK97L
9ce8LX2zQKcvz11TvPdPicPLvPejUsXHn0iOULyX6495HvCF37KgALWfmDjR
zHv3+1yOzl/omuK9ryReMPPe17OOR3bKzPk9PJCfee9X80b+OGSH2idNfZj3
bq/Wss2Dj9R8NvGsmff6BP8RWi5PuOK9VsRfJt7rL3rEvBfri3lvtmPHs8d4
X1e89wSVD//SMPemPvb0q4r3vqT+xLpoXiJPoYi/rijem1niODPvnbnsfP8h
1a8p3ov6MO+d/bTyjDX/1sudn9yzfoe41cR7Dz+MCmg76LrivR0l3jTz3sgS
fgm+AdcV70V+5r2Fpu5p1G3UX4r3jpf6MO9tl/GffrdOnVa89xTicRPv9Skf
nP7u9XXFeztR/bEuavt2X+t7KVLxXsTdZt477PKw4fsGnVK896TUh3nvf+S3
nKT6g/fuHRDQMSgv8/MP4p4T782SrVXBNyOjFO9Ffua9zoGbb07PEqF4bybJ
z7z3gZyLiL+ZeOvMewe3mF++U2i44r15qD8xz0fH3Sy7pWao4r1W6k/46zWr
xt0fUues4r2nJT/z3jvtZuXIH39V8V7ET2feO6BA2Qu2pIuK93ah+Yx53lfy
oz5IH03zGf46SepD69fEi2feu1zay7y3E9Uf62KE9CfzXg/aTzDPh8p40f5m
sdJ+An99S+YP7bcmP/PegTL/mfc+lv2Qee+iXqfzzjkTqXgv5hvz3j2yXpj3
Ir48816Uz7wX64V5by3ZH5j3cvngvf/RXm+0l3lvC9nfmPcelvMA895Gsr8x
7+0k9WHei/2Zee9UOT+o73vHfb/t8+NnFe+dL+cZ5r3fi74w710o+Zn3Ql+Y
9+J8yLy3kegj816L5Gfe+4PoI/PeYKo/5jn0nXmvn5yHmfc+LHKv76obVxTv
fSTnYea9z+W8xLwX+Zn3WuQ8w7wX5xPmvUfl/M+8N+BOoLffuCjFe9vKeYx5
b7Ov31WqoubPv+tC9IV5b2Y5j6nve+X8ybx39orLbVrUiVS8d2CpTzoMP8T9
c9b7MfUn1kUROT8z7+0pfo15b9HY+WO8WkQq3pv4sn6Wy8ncn/es++X8z7wX
+Zn3XpfzP/PeXlIf5r15xL8w77WJ/2Xe+/OGiJRZhyIU7+X6Y13AfzHvDfOI
K9ArJELx3nviv5j3BgsfUN/3in9k3rtI8jPvTRD/yLwX9WHeGy/+mnnv+Vrb
xvX/LULx3l/FLzPvXSz1Yd4LDsO89434dOa9W8WPMO/FemHeW1Q4A/PeA5P3
N7+9QfWDZfSB4pPP71XjaPlWuAfzXuRn3vuXcA/mvdeEwzDv/VU4DPNerg/m
5xXhQsx7j2cpcXRvtUjFe88KF2Le+6twKua94FTMe1E+895uws2Y95bo3iq1
Xd0oxXu3Czdj3ptPeCDzXo+G7/ke817sq8x7DwvPYd5rFQ7JvLejcEvmveOF
czLvPS5clHmvXXgs895g4bHMe8F1O/1vvWQyvDdLUt93OSskW/55315wPCvi
FSI/uOLijd2CxzdxpSP/V15jd+x6cMuk4xxb9P74r+7cuGXKb4V9QOInIj/S
76yf9LT8OVc5zWQcG1b6svPAeFf6+1E85L3oSOLBzU9d6d2l/9N3NXr8aSNX
PTtL/w/esLryxDmu9IbS/+08hi9eV9RVH/jHWv4NX57c40qH3/RdWqG6R44U
k47zcPcL+YdbhrvSsV8tnhN44XGjlH/3rfc8EPVcJ/EW30n/YFyyf1ekz+HQ
JJOO/n96LOjGmP2udB4vpKP/41Jvz7nZKtn8LtpbUOJOvvuPcTH1kf6/enP3
x11Gu/Kj/xFvFOlo16CRpwt+Mv+2Zaf8LvpttMTfRH6MC+KcIh31bDorIPXl
n650jMt8ieuKdJS/qOzUuj1siBurxwX5kb5M4u0iHePVo8r6iJO//dtvwqnQ
rg0Sp7WTcCqM18V1f8bn8ko26Riv3St65mlaKcWkY7zmShxbpGO8vPP2bJLa
7rbl7X/0D/JjvB5I/FxTHxmvwt0rtyx37LbwNMNnrA6J74z8GEdfiSOMdLS3
08gNV4dk+XccpR/Qz4Mnrhs36oCrvagn4k0jHeN4af2S0VGXXPkxjvUlvjbS
UX7UltknHzmTzO9iXBCXGfkxjqMkrjfSkf/09VG/x65GXOZkM16VooavWfEq
2aRjvELbZLgS7Z1i0tFvduk3pGO8/JJq1C60LtnS8T/6AfkxXohXbuoj4/Vj
zjntO6z7t73/+zsGnmBd3Hr8+UzlXfXHeCFOOtIxXoPXbH0XmH7LpKM+iFOP
dIxLnn+yXcgb5krHuPw8Z/zr8edd6RiX80WqFy767Jal/X/0P/IjPX3XXa8T
JVzp5vz2aMPNPSuTzPkP41KjjC264TrX/WGMy6rAI2977nbl5/5BOsbl00r9
PfPdv2XS0f/zs7fvWPqAKx39f7zYs82FN7vS0c+Pqqx4mWupKx39fELyt/6P
fkN+9D//Lvqf64lygqld6P+V1A/o543LX9XcV8PVb+jnmtKf0v8W9DP6H+no
53Myvkg3/ew+Hwynwvz5/kyZyk1SD3hze5Ef/U/z0IL+p3lr+Y95bkH/z5L1
0sSd+5m49siP+tC6s6D/sX6Rjv63ua93U/5J2R/a9Iqr373tX97c/8iP9M2V
Mg67195VDsYF+4/8f4cZl1OyXyEd4xIt+yHSMS7YP5GOcbks+y3S0f/+si+Z
35X+7yb7/Fv3c76Jn478GJevRC+QjnEpIbrj9x/9ifwYl0eiX0jHuDRy10Ef
1B86iPwoH3HhkY7xgv4iHeOCuOdIN/oiOi7/b+uDcfGWuOd+/9EPcn4w+XvK
+QHpGMef5XyC8pE+1v1cpPof6Rjf5u7nItU/pj4yvjiPvdepTKb8unK+3S71
QfmF3c+HPv9x3vPBuF9xPx/6YHzpPOmD8b0h51LUB/UfIudz1Af1X+9+TvbB
uP/tfu71wbg/kXNyt/8Yd+RHOuKhIx3zAedwOc+b8cV5HukYxxbuvkD1M9LR
z+3dfYfpB/Ipph/I15hxIR9kxsVbfNP7/z/S/Yb8GC/yX2a8iouPQzrK6eju
+0z/L3X3iaafo7M2CGq6wpWOfoYPZX+ap3Id//n+TuVPz0t8IvanvnP6vbWm
OJQ/7VRiy/dfHnOlo/8dTfw79TnsUP4U8ZjYnwZ8W6x88D5XOeb8EFD9RctQ
VzrGJft3vmcyhrvSMS7bT78881kWV/3R/01ybj/r3ciVjv5PqlDk57RFrnT0
/6xmC745dsuVjv6/1KBz2c8yuOqP/s9Ts/DdH0q40tH/07Lu9i2YNVH5U8RV
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
f9ps5cxl4T5xyp82i9gyuHKPWOVPH268cGf1uRjlT1PkvWj2pysD7w/NWitG
+dMmQ1tM3t/MlY5xedB/04IeXV3pGJemG+3X7zW7ofzpqoRiBb6vdVP50wWZ
u56Lq+iqj4kvU3VBUN1SLp9r4tFU/ORN596udPMdafnpUwJXuNLR//s6vqi5
57RN+VPEfWN/mue4T8j3T+OVP/X6OiWkxoB45U+byXixP12+b//aP36NV/4U
8d3Yn+Idb/anG18E5v2svE35U7yvzv70myJbm+340ab8KeK4sT/Fu+7sT78s
1G3c3tM25U/fyjv27E+bvPq1ZZNIm/KnGBf2p7MlvgD70/DXDwZuD7Ypf4q4
aexPS57ptGWmvysd47W8w4MGlU660jkuHvvTV/5pe7vF2pQ/Rf+wP0U8O/an
nTy3Ddjwq035U8TXYH+KuAnsT5/8cOxll+425U8Rv4z9KeLBsT+dlfr16b/t
8SYd44h4Z+xPa9R8WGPSkHjlTxF3jP0p4o6xP/1l0cPKpYbGK396qdb4PA8+
8HEYrwr9ki+EL7Mpf4p+Y3/aN7Vn11gPm/Kn/+x93w/sTxGfhf1p0dNFel37
PU75U8TPYn+KuDDsT68/OFb1H0eM8qeIy8P+tMTCDnu6lYxR/nSqxCFif3rj
854/FugUq/wp+p/9KeJtsT8dUSXnkewjbyp/OiDrj38862lT/jQ8cGepsJtx
yp8ivhLSzb2SzmkfvTXxvFz+FPGbzO9K/2/Otzj57h/Ryp+aeF7yh37eIvnZ
n5p4ZPKH/uffRf8Xo3qinKbULvR/JPUD+tnErZM/9PNA6U/2p8Ol/9mfYnzZ
n05znw/GB2H+sD9F3DT2pzQPjT8Kd5+35vx/232eGx9UXNYL+1PE8WF/2sl9
3Rkf1E/WL/vT0e7r3ZRfUfYH9qfof/aniAfE/hT7D/tT7FfsT7Efsj/NIfsn
+9M5st+yP/1Y9mf2p89ln2d/ingx7E+hF+xPO4rusD9Ff7I/Rbwb9qep7jpo
zu3QQfaniIPD/nSN6C/7U8R5YX9aTnSc/SnivLA/RT+wP8X5gf2pj5xP2J9+
4X4uUv3P/rSy+7lI9Q/706/lPMb+dLqcb9mfjnI/HxofROc944PofGj8Dp0n
jd9ZKudS9qer5XzO/nSS+znZ+KMm7ude44/qyjmZ/SnGnf0p4r+wP8U5nP0p
zvPsT8kXqH5mf0q+w/TDSnefYvqhibuvMeNy390HmXGBb2J/2sTd35nxIv9l
xgs+jv1pc3ffZ/rf190nmn72/XrAqe++cP0u+jlYfCj70yqjt6blLBen/Cne
e2R/mvNl1vihc1x+EPlzjXs4I99R1/1W9P+lpvFVC38Zpfwp3s9kfzonz8W4
4tsilT+9EjL2WYfmrvIxLnm+/cxzZpIrHeNSq8rqFzcHuspH//s9y2eveduV
jv5vc/jm0Pr5Xe1C/1vGb3rp09SVjv5PKt/zXM4RrnT0/5zo3MsTlrvS0f8V
6g95nXY4RvlTvIfJ/nTSpXTr67s3lD9t1fJ0zmNzY5Q/xXixP+32qvTTgPXR
yp8iXgz7U4wL+9Nnw2tNLXwjWvlTvAfL/rRR/hnXnrSKUf4U76OyP8U7tOxP
A3uHfFohLEb5U7y7y/60RqJXj1zdYpU/nSvjwv70iryHzP60aBVHyzCPG8qf
Ig4L+9Ne1iPTvxxzw6RjvP4Y7fdN9JFYk85xdtifzi/wR0jeErHKn6J/2J8i
Pg7702H9t45I/DlG+VPEQ2F/ijgy7E+vZuzTeUWuGOVPEQ+F/Sniy7A/fbZo
bvKLra50Ew9C3j9nf/rD5s8OpP07D9mfIo4J+1PEMWF/Wmjs9Edr+8Uqf/pF
1LggzzMxyp9e7xe26O8FMcqfot/Yn65vc6FlgyYxyp+iH9ifIr4M+9MVXwza
82lytPKniMfB/hRxTNif5jq42yNubpTyp1aJO8D+NFfxj84nT4hU/hRxOtif
pjqPt47NGq38Kfqf/eliiTfB/nT1+G1tPj4eq/zprldjCuYpE6P8adbYZn/c
iIhW/rQH4qfIH8Yly8n47y4PClf+0cQfkT/z3SnigKA+Mi6cjv7ndPQ/p6P/
x1M6+t9T6ol0c3+B2oX+Rz8k5Zxa83Lpc96o/wQqH/1v4uPIH/of/cy+dZWM
C/vW1zLu7Fv7us8T448wr9i3oh/Yt550n5/GN+V2n8/GF9D8N/5opawj9q2I
R8C+ldaj8UdY1+xbR7rvA6Z87BvsW9H/7FsR14B9K/Yl9q0FZB9j3zpD9kn2
rf1lX2Xf+lT2Yfat02W/Yt96RfZ/9q3QX/atiBfAvhV6xL4V/cm+Fe/2s28l
fTTneegj+1boLPvWY6LL7FvxXj371q9F39m3Iq4c+1b0A/vWInKuYN9aXc4t
7FvpvKT6n30rnZdU/7BvbSjnNPatjeXcy77V1/3caPwRnQONP6Jzo/FBdM40
PshPzqvsW3FuZ99K52fjm+g8bHwTzs/sWwvLuLNvXSPv2LNvnSznc/atX8g5
n31rsrtfUP3MvpX8iOoH9q3kd8y4kD8y43JZ/BT7VvJ9ZrzIl5nxuiz+jn1r
Hnc/aPo/t7t/NP2cc3y52qE9Xf2JfoY/Zd+69MKRmZ2nRCnfGirvVrFvjW84
pmaFJa505P+9Z9VdKdYI5VsDypX1Wud3TX/3K+90sW/1c9RcuD3uL+VbR3c8
VHxEXlc6xmXhqVp7arS9oHzrxaalT9ef78qP/s90NueNJpcuKt/ayD5335yO
l5Rv/S4100/Xoi8r3zp0RMrAK1evKt+6N/BWqUFJ15RvHRox7OWDa9eVb90i
73qxbz1X0ra6k1+U8q2B+w7GvjsYqXzrKRkv9q2rbcWL/PkoQvnWU/K+GftW
vJ/GvnXdM+d3+X+LUL4V79qxb/2riI+v/XCE8q1n5Z039q14T499a9SkuTnz
XY9QvjVB3g9k31qzxccVs30aqXwrxkX9v6q868i+ddCb5Ab1AyKVb8V78uxb
fWdO9cu0M9Kkm/t01ZYln6vtSud4AexbN571970VF6F8K/qHfSve+Wffusuj
a+6LWyKUb10q74iyb8V7+OxbV13ofrfMvAjlW/GuO/tWvIPKvrXPxPs1G8x3
pWMc8Q48+9Z7+7eefFAiUvlWvMfOvhXvsbNv3f/N0S0VPo5SvnX+gmpxlpBw
5VuvLWk0+Yeb15Rv/Vn6jX1r2WG5B97eeln5VvQD+9bf5V1c9q2Rp95VDGx/
UflWvCvOvvWpvMfLvjV19c371U6eV741o7yfzL61wrfJw+8GX1S+Fe+fs2/9
7GCWY78UC1e+Ff3PvhXvkLNvXfDk708L1o1SvnX4/kGVzrQLV771daNKG5tU
vaR861i8Ay9/GJftc4pMW/FTqPKt7fGOuvxhXI7hPXPUR8aF09H/nI7+53T0
fwilo/9/lXoiHfUcQ+0y3ED6gX1rKJWP/jdxBOTP/L+29DP71vkyLuxbS8i4
s2/t4j5PjD/CvGLfekLqyb6V5qfxTW/c57PxBTT/jT+KknXEvhXvKrNvPeK+
Ho0/wrpm37rIfR8w5V+VfYN9K/qffSveZ2bfin2Jfese2cfYt96VfZJ963TZ
V9m39pV9mH1rE9mv2Leulv2ffSve72XfCh1h37pd9Ih9K/ZV9q29RdfYt653
10dznoc+sm+1i86ybz0qusy+Fe/usm9tJfqufKu8u8u+Ff3AvhXnCvatteTc
wr71gvt5SfU/+9Zo9/OS6h/2rTinsW8dL+de9q1n3M+Nxh/ROdD4o7Xu50bj
g+icaXzQSjmvsm/NIud29q3b3M/Pxjcddz8PG980Us7P7Fsx7uxb8R4v+9bz
cj5n3zpEzvnsWwe7+wXTz0Hu/sL0c0N3P2L64WN3/+IaR3e/Y8aF/JEZF/gp
9q3H3X2fGa9u7r7MjNc48XfsW0Pc/aDpf7u7fzT9nKHU0T+HDXL1J/oZ/hT+
Bf1z50rxeh3bJpl09ENVv9Qtj24kWbbJuRHjMnZirW1rGrreB0b/4B2wf+i8
jffHcP7E71aM3D/pTIsU9Jt6xxV+AfWxF+ka9tOE25audG7He6fyvrHxHQ3k
fbb3+9tjU3+fKWtbnFjiSjfv6T2rNvFtbLJlq/wuxqVw/IK6ORenSLsem/oP
Cqi282B6CvYr9X5pe6rnfalnGuoj7Vq6etaZe+nmHTn1fub7cqJM/XfOvf1P
6uBkUx/z/2L73rSp1ibZ+BSMSyN5L9FPyjHfpci7iG+kHLT3u3z++SMKJ1t6
SH60d1/nkR711yRZhrbp9cm8CudD+P1M5Ee7klOm9Kr48JYp39zTeXS63LTI
JEs7OVegXekDtsduK50s+0mUaVfj60Va+O+/ZWl//0y7+2dOhKBdeIezq5SD
dhVeVLdAvilJpj5oV3DrW2Uvh+BdzUMh/C5lU8mP9VVEyvFFPaVdqE8bOnfh
Hcv3+9tj064B0t62dO7CO5atpHy0N0n6LV3KQbumF+nS/0HVJEt3yY92Hf7z
88ZPHyRZOtN5Eu9zZngfJ8icWybI+Lam8wPeY/Sjdi2Vdkm8IdMPT7q3mbHz
j2RLL6kPxhfzU9av6Qe804t2ob05LleNmNPTvA+s3lFEOegHj/ZDZsR4pphy
0A9Yj53p/IP3JGUfM/3wquW4WsdfpZj+Md9byj6A/OZ7UXnnuSPpHd4PlP3N
tMuz8Mzpjw+kmHJQzyqy770lHce7iMiP+vQ8vqhkz3/3k3TSZbzXt1vyo//H
yP4M3Ud/4j1A6D7qiX0e+fndP+RH/aEXwqOMHvWZ+XaC/RDeZdXv+6Eccx+8
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
K9BPeP4O+sn69KUh6gi98BOev/M/1mB5lA==
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlgmwTmUYx889lqN7vmMbQpbuzXZxLdnDtW+5lpuQfc1gSJbIlGEQiqJo
DKUUarSZokWyL9mXkZr2lEJikOxFv/88z8z3zPM///O8z3m/9322zKGPdx8b
BkFQIS0I8qGnR0FQCP0iumEcBN14WTgJgj7oOvD90I3ge6KLwhdDeoMfiM2+
K7gIXFlkOLgZXGOkGms343MwXBZ4I7gMNo/yvBVcD5sO4HS4gej7sOmPHuLf
3YtNXWxa8Hw7FQT/IU3A98Ot4F1pbN5FfxCZTVpiuCr85+g62h/8Da0DDwDf
jU1TxyXBo9F1sX9SfnmeiW7L+zbo1kgIl41MA+/H5250c+x3ovOwW43uyvuu
4DfAD4I7IK+Bu8B1B78Dfkjnh2zW/4OriowHt4DLRZaCK8Hl+Llt4ltjxIE/
BX8Ibgj+Btwdm/d57ol9HrIGfAL+kdj2NQJuALIefAb+LnAuuAHvx4OPggty
4RMcD4QfC94P7qO7A88DdwDngBfqf4Fbgj8D/4nPm34XOv8x8PvAt8D1sWsv
/4mdoe50HXxF+AI8f8262uB64O9SxucHHwPfC/6XmNwLztY5wB8Fz4mM3wfO
hC+KzwVwd+BuIwdThkvCL4G/DoYKZnkMNMLPdYiJPCvuT/E+ApQCFwvN/gay
B5sK2BeGfw7bych5+O3wl9Hp8H+kmQjP5P2EyL71TGR+5f90mq3lCIK56Fu+
N+1Rd/oYkp+XzfnWKHCmx0JjbCYp7uCfQteAr+2x1yY2/mlwdbht+K0eWEwq
X5RjpRPTei6VWN4qj4b4N7PBuyKLa91NvsRyTDaK+fbIHPj6ieG5ijnf50hw
hcT86D/cC66CjPMY1h3rrpXX5TzHVQfKgxd4/NTx/GqnWIot57IS25P2dhzd
GX4ZfOXE7qYoslOxxvN8cEedA3gDuAe4DLoMa8uiZ7D+Kmf8JfZX0CUCu1fF
VRHw87yvoBoALodu6vGZg26p/wRurvxH7gnsnHLcRud10+NK8XLJYyAFXyK0
bxUOTYTTtc5j+ziLVvHtLPAR8OLI/tePygV0Oexj9HzFJ/owfLnYYm8HOCO2
ON/v8S+bQ+BWXldVQ9P8fynHOiIZgeVhL+zbga9EFreKz/HgsvB/8bwtZfEa
emzP8nhWLCu2ZbMV4jp4D0ajOfv+qvnYRNSQdfoe+Bh6r84uMLvBsXFPqFeA
d4FHgnco9rDZjn4dnxmqJ/ivH1o9r6s6jFQJLG/L+v1moldHdi8foxsrHgOr
7xX9vlQvsv088xRDfg5V0WO9lip2m3pMKt4WIcXhK7HHiXC1Aut/05UH4Bno
KaHl2mT0VM8p5eckz1nl5CykCXh2aGu0VvlzJLKcauC1XXmU4Xmjb72MHur3
qNxVreMXTI0sThS389QrE/uGcueI58tOdK3E9qr6cIJzLA1eqroFrqR9x1bT
lBdbPK4KsHZKZHGlGjU7stwpqP8VWX/U/1WN6e53oR7f27G44V5PRqBfQeoF
1sOW+JksQn+ivAIvDq0Hqm++hz6TZr1MPa0b32oG/pVvve1nqJ7aC8kE90Av
d5/yfVL9Xu/Z+MOs/Uj7Am9Ct8bmi9D6lfxf5DvDFE+B1dkRvmfVsAOR8epx
axUTgfXUU5HtU73sXGT+BuH/58hs1PvW+/86EFqeKF/OonelrC6Ux+eh0PLu
IPqnyPZ23uub/Mhfv9je98f/hZTFaw24TrGdX1ufI7R2RWgzjOajEomd25vg
TqrViZ2R5o1aseXQt/j7BSmpO4st14rhZyH6t5TVzaqqKzx3CmxOOALXHnwY
PSA2PQ7fJz2uZP8qduXBp+GyYsO/p4xXPq5B34jMj2aMzbwrFFp+pfOcF9i8
UdznS82QG/ysNoZ2pzp/3YPOQbHTRnftc47mKM1db4E7wx2LLNc0/+icxXdL
rPaqjz+r2SFltV5z41VwTXDN2GZL1XslwVe+T83AKz1/Nc8pRhVjzbVfn3M0
IykOVccueD9V/VkZ2Zmot5xKWb/SXb+A3s3z3x4bLXy+Ui/TXK0Yv5yy+Uu1
9KXQ5kndb25ifUHz+TSf/RT/fRPrZ6oPyvdc75vtEpu9Nav/o29GVmuHJ/Z9
9Sb1RtVk3ZHuSvOY6uRa8LLI+kh1n1e3sHYYa7eicwKbXzWbqZddxH+12Grz
WXCEXafQ6vNAnxXVo895jN3xGVW9YFRi96B6onqf6/W5C/qS/g9Yf/pKymq6
7quX72eo8jFlfVexXTm2/vk93KDYYixm7SWvgcopzRKa95Yrr1O2T83Dq7z+
qw+0iq3GJ/jvC+4Cn7+Q9cr8ms0iyyfFeanQvqs+/wP+rim34cNCloOab6/5
+ajHnQH/D8aYdX4=
            "]], 
           Polygon[CompressedData["
1:eJwtmHm4llUVxd97GM6F73tlhgQEQZB5CBBQBnEAHFBUCFGQydS0gUEezcon
S03NTMtMyzE1SiWRcgRRBhlFVHAKJUcEFdMEBEW09XvW/mPfe9aZvnP22Xvt
vd8OM2ae9qNUFMX4mqKoq/8vVoviBcm9uSj+Krld8i31N9OkLeofWxbFnWof
rb4tGjte+C7hAayN+bdJXtXc12KvbhpvXXhP+vol78ncV4RflvxJ7T9LXlK7
vsYP0HjHSlG8KdxI+CDhv2XPrSfcsvCaTcJ1hJsI/074v8LthdsLPyC8Q3iM
cJvC91ki3EC4gfBlwvslX0ku1D3mSv6n8UM13qrweWZLpJpip/5slbwv2SbR
0YrLNfac5u8XbizcoeI9Nmr9cYX3flrjH2pc/4o5ws+r0V3jTYXvEX5fuG3c
52bhbcKthNsJ3yr8H+GWwi2EbxL+pOo7crf5ko/YX/IXte+WvKP225I71b4r
u90s9E3ffdm6QUfvxdoOah9YeA/O8EfJ1qrP9oGkY+j3DvVP1v0mSc7UXSdJ
+qh9mcZ7aHxZto00SbYB3neqxheHvXwkPE74fuHDhDcJHyv8e+HBwq8K1xWe
KYxR/kBylH5jhKSr+rtJ6khGqv9Y9pTMEX5R/0dr/Zda/4bkdcl49X8nZL7G
hxQeO0v4UfYV/lD4U3QquUD935ecI/kudqC+zySl2tXSZ+As56m9QuuHa/3W
7LlPCp9YeA1970nOLT2XPegvamVHtf6N1Zy/8G8P0J79JQ3VX5GcLLlX40do
fLPGd0qf44U7CC8Qbqvxc4UPEf6XcF/hK4S/Lbw2e82/JSfFXtO091RJRb9d
lWzWfhXNb6v585gr3EX4YOE+Fb/tGuGTCr/xCcK3Cg8VHiv8huY3FW4kfKPW
d0Rvwhewh9qDJNeofTVvrPY7mjMMW0dHpe/wILqt+m6Pqv0INln6vQ/S/0/k
L720ZiX+LDkG39fYGI31kPxE7b7qW62x4cIfaP52yUPJPoAdp9L20Qg96P+h
mv9Yts1yr7rSRb1a6wBugWPQzWzNf17tseprUGtuwLawMTjip8L1hffo99Zo
/i+zuWBb8MMt2bpBR29p/O/ZvjxY+JuY3xBb0dxnquYT+KGO+i7U2FP4d435
r502vjibl3eob1nVNjuCt0+25Wuy58KZK2Ic275Z+BiN7xIeKfw4/lLaNg7H
l5Nt5P7g9wHCX1btg4OEH072TXwW370dHyvt13AjHAnHX5HNbV/qfOur5qjm
ws2TuesF4f5wKZxY+g7cRc3iIo1dHefnzsur9h3s5elkH6qvNxhV+E14m33Z
vrcSfhDeHfd7TnhmaV/GXpYn+/QlwvVif3TLnuy9VPK90hwNV6+Dc4SnSOen
xHvDLR/H/fFxfJ3f5LdXSX5YmivhZjgazrwy+27ccWnYdyfhE4k5Glgi3K2w
v8Ar3Svm/nbCH1dtj/hmT+HdwtM05wm1F0lmxHvwvnAY3Iov4bvHJfsUOkAX
J6tvsvZ+LZtbb1PfKHwlmwsfFB4h3KniWERMJDbu1fge/Ed6ryP5Qn0DIx4R
f/cLD414QXxZJ+mu9o/V17O0Te+K+IitH1uxr/4MjtL4r8M/8J9VVQttfOoX
GlspXGpuM+E/ZNsEb8cbtq1YpzsiV2kjvCHiv45aXKv5s0rrgLufJRlSmovg
pKFqr8NYk9/o4IrjHfqvUd+zGrsuO5YT09cKr5Z8UWObxraZ802N35216BBd
LiCmqL1Kfb01dxacU9rH8DVyJnKnt7O5lDflbYlT85L5bYLap0d8fEAyUe2X
s2MlfYy9lZ1r3S18ivB24RPCHuCDFZE/5eQ4jM/he3A4XL4zO/bA8XA9sZJY
wxk4yyvCA4WvFx5WOp7hb/cJnyb8UHYsmsAblT4DZ4HfT8X2NN5P478hRgmP
rjg2EaMGl74jd8VH39XcJyRdiDXkKBp7PJurJ3J+fJUYIzwFm4MPJKMiXpH/
cF50hG7g/690/31Vn3Nhdn6JLtAJuSUxkvOcLdyqdPzqIHlW/esli+JMnGVa
zJmu/2uy13YSviWZ0zZkC3fmroz1l/QLniUWkxORG03VmpalYyL22BNO01hn
4esiPxlT8dpLkzmaPXoL9yrNo+TXrUvvxZ7Ls89+fsR/7rA28lFSjl+FvWLb
2Dy2vyb8DR9sX7G99lF7nMYPKJ3T4rv48N4a2/++GvM7mBjaWeNzIrYS8+Ey
OG2YFrYpfUbOtiLiOvnKefBlvDFvPSlZr8QM9uY38CtsCts6XdKitA/NTT4j
Z0UXl4T+0clerR8U8R3bWRD2eZj69oQt0KYPmxio9Vcl+9DG7HzyGOF/ZudT
5J+c85ns/AOdjE326VXRR25Cjsrcz7X/qck6QTdNS+uyT+QnT2VzPlxPLtkk
7t8lzttF+KbkmEvshfP7Juck8+JM5HrkvJyVHLhr+Bm2152cJJnj4XrGLk72
QeagQ3QJRw+p2CfQA3puHjI52ccWhv13Vfso9X1ddb1ADkPuAmnCAfg5cRpu
IM8iHgxL1iNzhifXGKytET487vuPbB1cFOdBN+iI+HBGsu6oZw5JrjmoPS7N
tmVsmloLG/46bAXbpqajtuuRXLuS/1Frsgd7wTlwz5X4VOkYhm7RMbFtYfDL
kOCOR0Lf2Cy2+1jwUa/kt14f/EbOC3fg93AdPtw59idWtkiuXcmXGwcXb4lY
gh/hX7trXGOST8FRcBUxj9jXW/j1yKfIL/aFLzJOLPqsxrGSmpfaDH19WnUO
QS5BfUedOD/yg87JtePc7FyTnJPa9KrIV+CHjVXndOR21ATUBjdkx1ZiLLU2
OQa5xvGSXdWw4cJvjC8+GfkN49QzcDbcDWfBC+QM5A4HJteqW6I+JV9GV/At
3DwjmX/JKcgt8Hl8/13NaZ0co4nV6Khhsk7QzcPx/tSHuXSdjC2OEK5Xujbg
97FZbPfFiKc/T+ZacmByYTgD7mAP9sL/akv7Abk898W28Vl8b3ayL68OPoWz
qFWoOeH2a4WPKO2zcBf3wZcXh79x33alawZ0gU6o3TdHfL48ObaQQ5FLESOI
Fb+NfAWdbK+ad4kN1OQDSnMCsYT5cMVL2bGHGERutCLwOcncvSnyDfIlarmt
8f2BbxJ8m6BOHZ185sXBb/gyHNO4dA5ELkSOQa5BPrYhOYf/PNseeZN6EcvJ
wZfG+MSKa5Ybk2scapmjY0/2opYh5yXXIefZIfxmdj5FfjOydI57R8RP7k49
vyw536CWhCPgCr7B8C1musaXJNcc1KqckbNwprNL1+jchTudWTonW5ica5Bz
sCc1ArUBv8X3kfXJNQnnnVI61+OMnJUag7qBupLagza1xOjCfdQs1C5jCufh
fNNgjDnnx++TG5KTjZO+zhC+QfhI4W3Z3xfYg7V7Q2foblKcjZyY3DjLqWtr
fWdyUnLR6eEPxFXyRr7t4eP4Mj49WOuuD76BD8i9yamxFWyGPIwzcBZqcmrz
I4Mf4Uy4kxqS2pQahlqGHJM9WEsuR42En8HD1E7U3NRi1GR8x2AMX4SjmQOn
w+34CLksNdKi0P+Eit+TGpGaYFbYHLbHNxe+veCT7MFafJXYdk/YAzGO73mc
gd/mWwo+QQ5B7oCvwHENw4/hvv8DGDOebA==
            "]], 
           Polygon[CompressedData["
1:eJw1lnmYT2UUx+9MTXdyfxcVCmOZMWPfxzpmIzL7ljEo0ijSokz2JaMYZafN
UlGoKDyhp+zMDNkJ7U/WNtUYJiZR6nOec/rj8zzf+z3nvfddzvu+Nzz/6ZwR
wY7jFEEINPYcpybG3VALTgUcJyjUcdKIFfO8Gypcx/kFNqIPQjKxmzzPg7kS
o01D/LfQP6F/hJ+hHl5T3t8V+qFz4H6403ecPnifoBPR3aEH/ECbBnj1Icza
RuI3gihYjJeKVwN9F9SEgXgxeOnwBvo1eB16E7vXVy3eQkghZw59nA2L4B68
89JX6TfcgP14/Wn3LX41dFWoAlG0vWDjbIb+Ff0bNPH0PWfQZ+Gc5ND+Mbx4
YuHoCPiXd6cyb9vwt8Lvrs7Bp+gtsBkGkfcwDIZ82IGXS04IOhHdXcYF0Xi9
8Jail8Aim5cWEIVuAo3hMn2JJ+8jmXdPxyhjPQHH4Qy8LzFyesIm9Mfwss3V
IeIHoTd6Jl4COa3QLdFZkA2VfCMV/210JrGz5J+DNLxVeN+jy+Ai5Mq6Q19Y
K/VAfj24HOQ4AZ592GPvW4F+B5ZDBjnJMBfdjVgsxIEHyXhJcB90sHmROklD
n+Kbp2E4XileP7y/eL7uat3XsPWVdT7NdzPIS4dM63sWOQPQ69Hr4EPrcwI8
g34FXpX5Jqe/p7XzJPopGOHrd/fKmKAE8myNItFlfO8ilEMyeUmQYvMo4y3G
L2NextDXGfCiq98dSXw0jJI19rXu30Qvk/0n84A3mtxRsFNqlHfU9bR/B4gv
gPlW47ssXkDuNJhu6/Ye8Xdhpc1Btqd1kkUsG3KgGYzHGwdjpDbJCeXcyKTG
j/J8BAbineQbt6Ibob9Afwnt0N3w4iAW/sHbD3/Tlwae7k/Zp+NgLOy2uQgj
NsT2RV/0VWKVMAh9DG8ksdvpQxVYiL8ALtG2KbEVNj4Z5yG8m7yvIe1uohOI
r8XfDFvgO7zWeG3As70/E/8lKCFWXfYI+hq6K7oLdIK2nq6TrNdxG3cE3p/o
jlKf0B5ae1qXUp8XXD0HZe9PQk+EfTYXRehbGEs6c7qPnM/gmtWv1PFtoTru
Al/nZRd6J2z//9wgnkHbwzwfggc8PWPlXF4qex9WQ3Xa5so4iG/neQf8QV4F
XAlorLOnZ11tdF2oY2fnKnJXwiZIkXMtoHMeIWsuZyW09PSOqGNtw+0MDdC/
bPq3gefjMBjvqK2XtDmG/hwipbbwTgR0TRfa/Dp4QRBi9TUBf7z0n1gl8zcV
XY2xFRB/Vs4nWSc5A4i3RbeTcdm6FZI7Bea7+q3tsmaejsnlHaFSW76uZbTU
BrF15K6HFr7uR9mXE6GHnAWyjtAT/bx8g5xeptuh20M0VPX1TpS7McP6t412
W6G+3SNxnup89BAYHqx3yx5ySuGkq2djPV/XMk/2B/SxdXuO+GQ4TN+D8Wah
Y/EfRQ+DoRAm96XkytzLOQ+tfT135+FdYj7Lg/QbS2i/GJrbWSb3THP8yehJ
MMHmIID3OPoJGAuJnn73EXRtYnWgrq/znIqXLue21dBeW8P6nu472X8bYYOc
a66+Q/os/xb9pbZhANyB9zVtv4JvbK1kv9Wyf4Vu6F1ypkCS3Wtd5D0Q4+vZ
FIN3nbY3ZB9CCbnF0IF4EbGj1l7ec8DVOWvj610h99p5vHI5e1w9X+Telvs7
Xva/p3doK6s/qcOr5CwndxmscfX7ciYO431DpQbs/sqzcTwk5wU8GKz/PtKv
QvRUmCF3AF5H66voTujOcMTWP9zT/zb5f5P7t4J5vgpXoDSg8zKLvDkwO1jv
fandF9DTYZrVs9TLFPtuoc2BI/868g/p67na3u6P1egPYE2w/m/8B6ucSUE=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtl3nQj1UUxx/vU3rydH8iSzGyJluUoZS2KaOhRmJskX3flyyvfffy2vfl
te8hVISkZaZ1WkfEVFSMpSjDJEn0+Trnjzvf7z333Pu7z7ln+5Xt2K9J36wo
iu7NF0UxWDETRXsgK9Mo6sa4wOKkEEWlkihqwXoxsCSjFbwaeH9iOpPRacq+
UcibCRlT4MdYm8A5zZkfCb6GvDX4EmM8vAV4EL2m8MB5h5xLlmF+FBzK3u/A
V5AfybK11ro368edX82ye54ER6PfOTU+BN6Y38hGpxHYFfk55OORd0jt/GHw
0omdr9+pAW8ve4AddX94Eec/sD4c/bacNQb5eHAc8hHwNujUZz4U/jS4ljEH
Pg7MYUyETwaro9cJ3pN9E5lPhY8F/+TsbvBL4ADmufBBYD/GJPhgsBd7XwXP
c4fDWWbnFcy7JWbPGZzZx/W174zb7RT4FDrF9Dbsvca8C/Ir4MPIBsBrgW0Y
g+EvgzXcbrVj+x591+Ngd37jIvumc0495gORPyPbxmaHzuA0/y59XyfnPcCe
she8O9jBbfgE2CU1m1fijif8bqfBX/x99ea70VsA3wWuYiyBvw++w1gI3wfm
MabDl4JrOHMlfG1ib90MXgg+hrGM9Qz+vgichXyJ/DExvghcor3I7kRnMN95
OcveawFjBjqj0Jmf2F3Ko/Omn7NTPo7+z+h3QrcvowCyFcgWMWJ4b2R5qd15
DmdsSO07qnHODnA+8u3ga4x58M3g8MS+axK42v1qr/wqsfXi7F3BOW/Ay8Br
ylfQeVDnuS/NBS9yh2xwZmpvrLduwhnDmFdjvifYHu19MrH4HQ5vCX+Ltcry
A2RzUvPlH5F9znhOb4msEL/9tueQ6an56jnWD3qOGI9sLKMh/AtkrzNKwgch
m5Ka73yE7DijnfwY2algPj0VfhW+Ab4Ufgk+Et4/sbhQbmkHvoe8DvLG8N+D
xxL68xkz4fm4YwF/+0V6h9Rskx/ZDfRzZffU4krxNZBzyjFawu8G16NTWL8r
e8MrwesjvyO2+NV73yZfh98OZsXmz4q5gonlN+WZhcHW5A8Zzz9lwL9Y6w6/
kWX7dU5BsDBrbeHlE+PKRdnB9K4zRsAfQ55BdzW8gcfai7HZ/HnwK9kstTj+
BD7a37cV+z4Llr/0jtJRXH4cbL/O6ZxYrtM5XyonM5r4m76gN4zsXZVntedr
36v5N/BGiem0TsxfdKbuWNpzy32x2UX2UR1QzlIOGMPe82BX5DXZO5jfK6sY
8DzfTnuRn3Ud6Sqf/AaODXaObKsc3wv5P8znBntT6YxzG8rmdRKL0X7wW8GK
zivEdq5qx0T0e6SWp2fAS7DWR/EClmP00DvGFiv63qrKn4nFlHxStbUDvAq8
kMda8dhyhvxE+a+H59hpnD8wtfUcvV2wmqfccpfn7aKKh2A+1wf5KMaz8E+R
HfIYmeXxrtq7H9nw1PL9gWCx/wB8d7B1xVF7t7POb5hYTnhIuTYY6rv0nv1S
87dVyLe5LRTLDRI7c6/ra/8++CPIU+WHYDrD1DOopvmbbg/mL6o7zZF/6z4m
n1kMzw+vlVgdVyyUhQ9JzXd2sP4B41H4CGTVFaOR5TXp6A13sr7LY1Z5rG5i
76X4rerfpfu293yi3KIcrjvnBatPqlO6w0TvbQ673WTf74PJ1dcchZ9m9Pbc
NVc5Dv5T8FjinGmp9Q2qm13Bycy7yBfQyUmtTp5wrvr5K/wMo7/nNNlT/lkP
POZ9iXJmK3BCZGet83wom+i9lEvWIFvm9pTPjHaf2ep5V/Vadbukx6ZitHZi
+U15Lzu1vuBDt7fqSN3YfFU9xibkmz1PDkgtL3VULHgMqu+YF6zfVB0fA15h
vj62GndBfhlbP7NU9Vq9BLhKeRm+SnkyWK8p3z7pdpYNE/L4QvhI+DzGcvVI
idUN1dxN4Fm3oeyf4+cvS6wub0VeImN9jnJLBeQVvK6pN1ieWp0vjSzXe4Nq
7sOK+9n6Dvhq9m5EXjRjNVv3X4t8P7wSshn6PXTyEqtNs5DHyJf5HUrCs/UN
qifwvon1dfqu1L9R9WsbOBP5FrCU5yLluJt74VPBmYn1FKXY9672RXaPDYnd
cx3nLE6tbwroLEhMZ01ifYW4ZLqbfucedGbHdh/V1OXee5RFXixj77jUa6vu
f0vG/i/ov0MJ/WZq/VqRjPWlnSLri6swPxDbfdSDqadSX6ZarH7ssvcv6oVG
gH+7n6ifqex7defrwXpQ1fGb9Vy9cWw9ifroP4L1geq1csHZqfXg14LlT/Wz
W4L1e3qXLM7eGDznev+jWP4vWFzrPurR9N9BtXh+sDPV+/8bzLbqOQtzzv+2
obBD
            "]], 
           Polygon[CompressedData["
1:eJw1mHf81lUVx788F/Obj/cBRVKcTIlRDkzTLJPEVY4IVEBA9o+9Ym9B9gaF
nzIEWWquHJm7vacz0xQUxVyVopZZfd58Tn+c13PPOfd7xxmfc+7Tov/orqMq
RVF0a1AUDfX79bIoLhbdlovidtETok6pKL4t3Tcl/0HIGHcVPaRxe+k7iE4R
bRXfSL/DNP/L0t8n/l7RNzS+RPSIxr2kv0bjfqKHs7+7VOPLQjZT3/ZOnvsd
0RkaT5VsZtVzOAtn4ts7RedoPFGyb0n3Q/FfED9F/JXie4p6iH4s+U9EvxSd
K/1s6QdI/l3xLcW3Sj7nLdl34OxfEW3T+CzpRmj+ueJ3it8hukDjC+NO46Vr
l3zXmaK9MuiVkh1X2oadpRsXtv1R9hk521Wi80SjpTtRc76Xfd5p4ruI/7n4
X4suTt7jktgPW/4qdJM0XiLdWs05tFYUv5DsQo0n49PSdx6YvCZr/5S7iZ8l
vr/4WeJf13kHiT9F/Grx/xQ/Unxn8b1F09lb3/xWusdEj4qmyBdTRZ2kP1W0
UbJNojtEx2vuqPi+i2iMxlmyDdLdKKoXfUnys0V3a9xGuklxXtY4RPyQwmtz
J+52vaim8TrpP6l4/a9Jf4P4htINjvOfKRqqcQO+kW6tqCDe9HOSdJvFH5Rs
8zPErxLfVPxY8ROq/v6LohWSr4yzshZrcmZkzYNn7lLx7+s8fcXX6fvl4pcR
g9KdXnr8XsX3QbZFfGN931/8WaXP+N+K92S9B8V3TLZZl7AfMUJsoLtO9Kbm
95N+iPabK/7tin3QKYi93q1Yd63oHY37SDa46hhvFfFIHF1ROldOkuwB6eZj
E/FbxDeVvX+THYvEzxx9v0D8UeIHiD9Hc8eK5mu8XrJGmt+u9Nk44xzNXSg6
Urrhkn1Vuj9mxxIx1ae0D/ElMXOPdN8XtY34vYi1xf9da/UQ37Z0DnF27nCX
dIPEXws2if9d9n26i36v8aWSLYozsDf5y5zLJB9Y+tsns8/EWfqKDtMdZkq/
UmvOFX+Q+KXil4kO1ri96HGN10t/A/4n/0QtJW8laqxxN+me05knZfuF2CRG
yZG2mvOwxpsl2yp7Hiv+NnJD/DLNPa5mGePlojmi2aLjJTsh9rif2C689/kR
72AYWMY3fLuBnBR9tuY92esW0Wmlc4GcWK/5WyS7GSI2wwYzwNJk28zkHOJX
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
            "]], 
           Polygon[CompressedData["
1:eJwtlnlUV0UYhm8gefXnJcU13HAPl/zHpdJSS620xSw1W9wVt8ByQxFUVhEV
wQAFQUBAc8Mtl8qyU6e9zmk9WamltptatrhlPe+Z74/nnPe+883cuTPzfXPb
TUoYGR/meV4mRMCqwPP+wJgR8rzV6DWwyfe8MtoOhHvei/A8z8W0V6Mv0X4Z
rkB4pOfl4hXQlkxMCmxCH8TrSFsn6Awd8TvASnvXdGJ+Q88jbhX6HPo8LEUP
xRsIg+A9e0ceei2s0VyIeQZuRK+nfQMUa954iXgX0L/rPTAXryVeW2gDO/Fu
ZR49YCu6Gd4AdC26A7o9xMC8kBtvEToJFsM/xLRjLnvRZbQV0K9Q40Ala1WO
fxRqaJsNYehrfOu/UETf7bANdsA9tCUTUwWvomMZt5pxanz3jv14+2APlBLT
CL8hLKTvMcabiJcEt9PeD+6AKtqqiClnLkd4fgU2E/MsRKGraa+BLRBN3M2Q
gb7AeF3Qk4k7ib4CVyE5cN8RTt8IqAOFePmB+yZ92yWYRcybeI/TPhamQmbI
rY3WqNJ339iV76rQ+WB+L/P8ElSE3Hu/ZZzTcAqWMFaifWck8TFaE9iIF9Cn
AdSHePpl2vzj0F2J6QZr8XIhT/tle5lle/0cegU6O3Cx6lOOjtQaak2YYwuI
hh14JcS3RbeBGNt77cdi+nzNe6PsXOt8V9g4CbRXojdDLP4t0Mt357UErxRd
yhrs5rlWZ9ry4hzjnYeLlotlilUuQsi+VzlYg94KW6AZc4qCEvRSxsmBVXCV
Phl46bBMuRNya6i1TKftLO+YhteC5+awDO8XvPboXPwl9LmI9yf8BU3wG8Mi
++5JxHyEHk7ccvRTtD0NnaETJNF2nbie6OU29tSQWwutifo+SN8HYJjmaOf5
NvRrtB2F1+GI8hWvJ/SGRcRMpP8EmOO7eX5OzMPoh+BJGIn3Gd4H8D58aPPU
O95GT0BPhDthCd47lo8p6LH0fwL+1rrjbcBL5TkNTuNNwpsMM2AFbV/gjUA/
AmO03njNiG0KC2g7w3e3RreCltBdY+PND9w6J9PnBM/Hw9x37AlcnVK96gQL
iFkIsehuyiHVY2IGMc5AGOG7NVPu90H31rpYvr8QuNxvjG4KTcyrtbyYT9sw
4ofDOvRKOy86N/8Frj42RDeC5pY7Wqsh6MFwt9WwA3g90PczzigYDTND7jtz
AldrVXNT8R4lbhQ8ZnuUrVqunNH5hh8DV9vrouuBbzmTozqGnqt5wE+BqwfK
i76MPRiG6DvwWuG1hstWm84Gbmy9Y77dN8p5395xk+VsHfJonc4Y42QrJ+Eb
nXc4Dlm05RH3JXq07fUx9FfKNfQ4vFRIg5OqkdYnX/VCOeG7XC3F2wjFsJ62
dNUO9GF51IVii1WfDN/ducrzG8CDMLtzdQ/qHdk6i6q5Nr9reJWq/cpNy33d
yYdUI3TOtaeRbs9z0Ku1JnCdfuN53zjfrZnu5lm+W/s56J+Vx/Cr7dtsvDPo
7+GHwO2vcu9j9CfwaeBqgmrDNN/Fa38T0PHKXd2feCHmcgp/FnomTLfcmkr7
FO2DvV97rj0q0LdrXaFQ/wF4EVDX9k9eUciN7ePVg/rQn7H6wVDVZMsj5bXy
u8h3/yxaF51n1RvVne6QyFjf4cWhp8EUyMKbTp84WG3/Hfo/UK5q7L3ofbBf
9yIxY3xXK3Ru0kLuP+de5QzcB+/aGRpv9UV15oT9v0Sj74IBsAvvEByEw5Z3
ml+J7keOxzbluNZP9cbusI205/Gcb94uvJ2wPdzdb28wTl90H+gFi/EC4hpA
pN0tOqe7ieuC7gwdrTZpnYtUJxVje/lW4P7d9A/XP9zV2BSrhVNC7n7QPfE/
OO1WcQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
TVPczsZexO8auBbf+R8lpBHw
            "]], 
           Polygon[CompressedData["
1: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
P0v+uyTXcBbORM75DHrLO4M=
            "]], 
           Polygon[CompressedData["
1:eJwtlndYV2UUx6/w8+mH127TXC0rRwMUULRMRMRsOtDcKy1zBVqZmuZIpdQ0
zVHmSNNEtoggCLIEFExjFJiCiTlSrEQMzbT8nN7zx+d5vvd7zvve95533VZj
w0PDPCzLioCG8KNtWW+7LGsiTIAEx7Ie8bKsh8EfvsMrxFsEC2ExPItXQLs9
bstKgi54xzwtKxN9GP814v2hH6wjVgRL0C3pry20g5V4IXhF5K9CfwEVUC59
wRZivxKLRy9H/2KbMcnYgqCWscfgR8MFYmXkfY0+jfYm7gP5eHlQoO8/SSwH
2qBn4M2EWfI95P5Bf5vxN8FTPK/BXw1rYTpeBe2a4j8ArWA13lFiP+tYzxD3
xfeD6XgP4j0Ej0MWsVO2abOLWCLslvdq3WKI5VG7fAihfR1jWUFuPFyyzTu+
RW+Fb7QuhyAIvYTYUlgGf9P+OnjQxzDJxdsOI9AjYRyU0i6XnBzwJ3aJ9x9G
N6CNBcXER5G3hVgVejH6E4iAA3hzoT3aR+oEubIO8FaiV0E4lOO56MsTytDj
dV0lay2P2aaOUs+f0JPwYojFQhzMB1+8PGJ/MbZ6mIfXB68vPK3vnY3XGv0E
PAbZug42ojfAeqi2zZp8FT0VpsGX5Jy1zdqulO+Ek1Ci375V6g3bHLM/ZPw7
0VEQDTWM5yJcc5s5+EzWHgxFD4FBsjZod4v4TWjsZb5xOTlXea6DFbr+C8n7
wTbztRFvE2zWsYzGewPG6HxI3nCdyxE6v//Q1w23meexeHfInlUtc70DHQkb
HLMfZV8O1vHlQyd0ZwiABVp7f7QfdJA5JyeV/vfCITjDevEmpyvv+ZMls52c
bZLLczr+PPRcmAPHaRtHm1hoT+wgbSPlvEHfRTwdfY7Yeeig8Wh0BuwXZJ2Q
N4nYZJgCA+WbybsB12EPOYPwXofBsgfUi4Ij6N/gAnQi9go0oj8bzuMlkjME
rx59DW5BMp4fXiE6njFkQTZMwGtCu/vhXsggLw280HdCY3jLMTXtqPtD9snH
eONkPuBNXddS01L6LIEUtCXzLGcBzxVw2m2++x3H1Ooe9N3gwD7bnBNyXhTD
VcY5QGqHLnCb77mJV44eqlq+aRh6OIyBf/H+g4b0l0osGK+S5yqohgTb1F/m
4Xlix/Fi8ZJkP2qt6vW9Uuej6BIoho5ytuFdRl+EGuir8yZzU0afp6AaJjqm
blK/+7SmAXilsg5sc0b9f1ah2xJ/EtrJ2idnl23WYk+ZK3KKFNHyjS7yTsi6
1fqOxBsFoyEMWuKdJV4LV3StNcVrDs209tK2AdoTPHSOqsithEtuc4/IWELg
lNatF/oFx9RK5qYfuj+EQgptkqGbnDfEDrjNGnLTzzPgDeMdczYEortDL70j
5bzvge4JwXrmSJ1r6acOrkAfvAxYKOsO5sv5Rk4m3n7IggXqdWa//k5pvpLz
UM5QntOIp8I++Ej3bzf8y+RFyRko+wbvZcfMq8zvOd1HJXjFMneOuYfl3E3X
fk6gm9NPC7iIjpU4sR48B+udKXdnoJeJnSb2IvSGl/SskHUvd8Vk9PdyZ3ma
8zRDv6kJbVtDG9hFXRPAV/fxTtvsYdnLwTpX8XKvwizazoYPIYVYhGP+bw7a
5i6VO1W8rnjPQReX+feR+2OHrBOY4jL/SHNk7tG9YYCMk5ypeOEwTddcpm3W
n/wbyD9CC/UCdU3E2WYfy37urutY9miQ1Msx/1LL8JbCpy7zT/Mo3/w5OhJq
mKsAnpPIe4/ndyHMZe5k+d6Z6klsr2P+S9ag18Fal/mnkXt6BvoDeN9l/n3k
X2AROptYDuSCzXsaQTMvE5P/g92MOxF8dB+nodfL+Ux8IITCEfq6DRqcino=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1l2eMVVUQx+/bfY/dy7vsoUrvva5AAAFpSlUEBKRIkQCyShcUCGCB0JEm
SAvRDyaG+AUhEBKEiCJEgkpEJQQTiRqKIL0sHX//zPjhZP5n7sw5c86ZdmuP
nTZwak4URTVSUZQLXRCiaH0mipomUVSHMRU8C14+uDK4LXguYya4LrxmjK7o
noqjaA78GfB3g+dCG8P/IjbdSszb8b0eeBb4XXBD8FLwcnAFxpV0FD3MRtF8
eB3R3QbdxHgGvBG6wW07zpql0K0OfwO4pfTh58lmcBr8Hvw60MrIVIOWZJQF
50MzjArgPOiDtMmkwFfB5cDXofcYAfwbtGzG+KWhp5jngX+FTmCPDPgONheB
T8NLs/8t5j/pLAXYjk5FZNpmzA7tpbvoxKidsjvNc3tKQR+jlwU/hOYwLwOO
oHfcnirgAkYpcAJtwZm7gX9n/1rMy4NrQLOMquAy0FaJ3eU2bPtI7wB/HfQg
OouhS+EHZFqBe4NbQmsi0w76GTIDoKPgN4fWg98aWugykj2GbTH4OHS4v/s+
8Gvo/gC9wz0MBT/hKF+mzXdaIvMOtCf8PfDOIzNH50mZf+yLTUZvXR/b5sH7
ABv2Mp+t9wU/lzEf6JqxdbX+buh05s1T5rt/+Hvp3V5k3hD8MrSPY/F2xbbv
Aegat20VdAt7bIWehj8Y3Bv8CbhRYj55VOeL7S7X8/1DxQf8ldCtrvs0so0T
W28NvBv4RoTMcPQ6uA+M1j0onsDdoV0Uf+Ae0Gb+jk0UM4zW4I+hL/kZ+0M3
su4Gj9kl0DYpe9c5sfnJsthsWA1vHbKX08a/CW0fLE6yfK/rNtTP2H5NZQvf
Y77VVByCE3BDcGdwI/fbBi4r3W2x6Qs3db7W6op8afexnv6OuqtDsdmueB8B
7c63FvJxnSW29ddDN8fmb9s99mVDp2A+qtjqBe7BGKb7SizPyE8W+r7y2T7B
7JNtT8Ern9gdD4RfVnEEHhCMr3cYBC4JrqZ4QW84874Z0x0DHqx4BjdhtEfm
R2ReDxYDsqEGY5zeCl5Hf1O9bTc/o85VKbH4GhkMyzdHB7szvftqZIa671Xg
+zC3oSK4XzAfKpNYHlQsyD938q63cbMd0OaJ5c5FweJIvq3YqgWeBH8m/J3M
p4Fngyd7XEzMWP4X/234UxkTFPPwjiHfBZmTsenK376BbsnYPWyWX/v6M4Ld
i/infV+t/ZZqBfOL2FgGXJiY3mbwWXgJ8pegfzsWr8h9+03FNbrPpyy+Lnj+
OQd9A/0FGYtl3b/iWvH9iueWodDDzDsrh0OXuHwDZI/EFrur4C3MWIwvgi4O
Fnv7+T7Pa5xq3wnmnVLGVy1bBn8l35cr7lNW2w66zC9eE5XHJijHJmb/GfjV
wCPhTw6GR4Engau7/0wBF7m/VUks/2ivFfA+j+29VHN154XgPbH5pOJ9bTA/
kD/0gF8vWP3L5fs1ctFBvp0rsPwvP1+LzH3453XvyL7K/Aj4OjIPsvZepYPF
nOraitj4equy8Mcwz4E/GfozvJKqTdDyiquM1WjVLeWfWci8EFs+HOF4L7L/
sFeHYPlIeSmdWN1uBG9abLaFYDlf55K/9/cYUywUZ61u5/gdjoXfF5xKrI4v
1J7gR8jUDCavep4LPgB95LEzJTa/Uk/ymHEDXqVgNUu1Zph8MFgtVL7qFZs9
smuHrzME3lFwvmIKvEBrqkbKtmB1/UnW+hfdZ8WM5Vjl1Gf5/oC7OIHMePRm
xtYbqLe5gs5d1u+rfOs9T+7/d6tcE2yvKqplseVJ5U/l0SJ/o9Gx3a3saRBM
T/pNHCv3Kgdnmf+lnog9cxLrlWp5n5NCZmRsfPUptYPdrfqXyP3nPnAA9F/O
8hX8q+id9XOpd5J/qHe6VGDvq55nvmKWcQ/dftDLfNvvut96rVdPIT/U2Zqx
16609R6Ks8vIFSPTJzY/l52jlKv4Vj9luT6TeH8UbM1DWp99SiTW67WAfz1r
/n8NfrH3iuoZ93tf8bX3OQ/YayD0sL+13vy294H30b2ZtV7odoHpSFf7jQ2W
mxTXKffJVLAYVD4rAM+OzfeK0T2Ttvv5M211Wb1eVWTGee3b7vemuL5SYH6r
On8X/J3fm85aMlhu1ZuOCNZPqKbI7u8Zt/yt5MMn02Z/LvuOje29FNfTYzuj
+r5HyOcFs+9u1u5NPqZ8oJ5Ha95AZqLnVuVb5f80MuOUq4Pdr2Lhfe9zlAcH
+d3K/yv7P8KjrNVl9STVvC6pto6BjtfaKYv5con1hm2C9bHy/02qdcFqiWrZ
kGC9oGrrp7H1t6rpJYL1jjqLYk156SL2F3oeU08lH1PveqHA3kj/AvonqBjs
X0J2jnHblN/zPY6UG/8DOfp7eA==
            "]], 
           Polygon[CompressedData["
1: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
vgWLdSt6DvAYPoifzIgzn58c09zF/wCJZn0G
            "]], 
           Polygon[CompressedData["
1:eJwtlnlQllUUh19QxNfvk09wBRcEDbUyUVsVcUlNQTBxSdxQQHFBUHDBRBu1
cMsFE1zGlplmqn9bzEmtbBmnzHDGMtMps819w1wRtec39/zxzHfu75577n3v
PefeLyG3OKso3PO8CoiA+ijPq2noeTcDnncf+wE8GQI6n4KBEBP0vCRYgT2T
vlkwG170PW8kXGPMQWJMwB4B6XAebQ/aFeLOxXc6Y/MhF9oTawo+k+Eififx
K8COQx9L/0swDgoY1xYtG3svPp/BELRnIR6tCX2VjNviOy0BrSN0AJ++SWhp
2OkwCtqgDUV7HLs79IZmaFWM3wpvwTDNj88Y7NGQD0eZ91/W2RrfEfRn0z8B
JsJoSEXrD0OgBT4tYbjNm2bx3iTOLmhlMcajzYFp2FNhErQLujkysEdCpvlp
X8bIT/6QC5O1//ZNU7Bz4B3ivw2x5q/9i8Lugd0TkmEwWhY+o+Am33SYb8vB
DuCXqDXofKCPjX1COYA9CJ638xiPloedr3OFYdDL9nK49hxWE7MC3vBdDM07
SjGwB8EAaI7/BcuTNPwmwiTYDJt8d1aKG8IvGvraPmu/M+m7Sm7tZ+yX8AVc
inJ+feifAjnaR/x2EGs7fOC7tSuHsuAF7KFam51bKloX7KZBlw9Vth6tq87q
5AZz3oFT2L/CCYhk3Dn6d2MP1RyQrVpAT4cMyLO8T8HuC/1sriDaFcYeYOy1
gKsJ1cYM+pfS/wj9e2nvg1t2Xv/hl0s7z3d7sA/tFzgOl/EZrjyGs7amywGX
k8rtMcQdC+PgNv3X6X+gb8K+G+X2oBt+XSHJ1rcIbSEshmK0xKBbj9Z1RGeM
toK+8JDbD+3Lz3CbuMn47qR/B32/43sKkrB9jcHeABuhBn6Ek77z34nPSliC
XQaLoDOxFtgaPsTvK/gaHtN5oU2ECbaWBmgR2JHQSPuIVgmbsTfBBuiGzzK0
cliu77M51mOv0R5gf0/8Q9AA7Q7fdBeO2bcVahx+r8Bkq99OUIq9EBbAUnxK
YS52IczWHYXPb8QcFMa+0N4OPdDuEvNv3TXwDwRs7Bz6E+jfzZhPfXefKp86
oH1E+2PojtYELQDREGF39krsV2EVVODTLORia46LcI85jzN+AGvZgk8lHKYd
j999+sMUg/YqCKKdRSvGLodlsATKYA20UB3h8z72e/AJlNge/ISdyhwVtF+D
A7T3KwZ2FaTQd9R35zuf9jwoslxLQKvTWrUetHC0Y/j2Z8zrtNfDQdprdW6w
zs6vC34n0Afit412te59tMigW2sP/JKhJ5zGbzB+5ei7oBc+bdAvqX5Uc1Yn
9+Eqdq3qFWLxyWRsBpyxOh6r+wt9o/JNv5ZrtwLuLbmH33TVuO/yRXtUplyH
l6E3NEeL0Z2q/MWno3Ja3x7hHm7tgc7oodYF9eChTSPmVCiEvyyHdG7nsc/B
GahjHQ/htu2p9ra97ntoCiE7Z/k9HXLvgd6FNtA46N6KTqop1Qs8h09X3We6
O6y2GwZdnSsflZeNTdO8t4gdR7utchifBay1FJZDQ6tV5bRy+3Pf/e9Q7sYz
vgB7FsxUflida0widifoHHL3ge6krdhVUB1ytaX9aKz1qVZC7h7/A+1POA2N
bI4Z9ibrbS5GewZSsPtBrO3BfLR5UGL1qZqutf9BtQF3BtPsHdB7cIO+7+i7
HnD3kHLi0aC782rsfTlE/w9wxP6PrbQ7aQ/938C3vrub1qGthdWW49FoF6yW
Y5Q74Ck3iBlmdazcKNLdAfX4XbHcVS20JE5raGX12xbioF3I/c/SfynlqnJW
NaE3Y7HvakFxWqK1gtYh9ybpbWpmayrB3gbVvvs/pv8s72L/D7P1QAI=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxFl3mwj1UYx98f/V7u6837iiRFyDKWweDad127i+vKvu9LrhZLYy2lmqZt
+tsSLVQk2kgxGKnRUJZUyhJRibJvqc93nmemP955vr/vec45zznn2X5VRxcV
TCsWBMG9mSAojhwWBcEL4OnImmkQ9AmDYGwcBEuyQdAZ/lhOEOQzNgi+AePL
nNf4ePT6w9eBn498Hj4P+SDfLHAh8gLz+4CXoj/O9eui/w6/832dt/kGgtcg
I8Yng0NkLb6HwSWQu11nJ7Ivv58G90MWx7ZdcJuTIDjHXj3hA7jG7DGU8Yns
2Skye/pGZofsWYGcENu56qV2Rq05XHPhVzK+nDULwA/BN4TvE5td5+C3MD4E
/susfbJhJfx9jFfmuwm+wJeC+zGvDPJR9Msib8CXRxbCV0IWZWzeEr+T85wj
xaamcEPRacq3lrGlzGsBPw9+OtxY5DjtB3e3r98isj2ExVUITV5jbjXGxsPX
jf4fuw7fl7US8CXwMHArcHnWnAx+Av0B6F/I2txLyMr8HgvuxfiP/B4uP0F+
wzcMvA/ZPrJzNUb+lrU3PZe1Mel8jzzINxi8H1kavUO6S2yoyN7tsGFEbLaV
Bv8N3xn8BzoHwF1is0G2XOX3XX6fr4NXo5MLPoEciU5JxpaDH8/YnZ0BDwX/
jvwpa+scQZaL7CzVtSa/x4AvZ+3MOvsNZFXmz9AdhuYburfzendsbus2j+Gb
j05v1hkF7gxfnfFq8seM+YfOJ50OyNHo9ELWQOcae0yF/xd50+/2etbW6YLO
/eiU5WvmvpF6vChuKoY2V++qd2yJLJfa3egt5GvlQjuL7jTX3ygP2QT9buDT
+N4hznOePSvC70vsHvNiix3FvnLAr+i9gXwtsbhVbL6PnMu6z4DnICcxZxSy
JTZMQi7K2Bn+ZE515QnGx3veWBxafCnWzzI+hr1ngPOYWwT/HDqT4dZ7/K7T
e4bmn7Pk7+i8Ap4d2fsrjnZkLZa7gk9i70z0Fmds3b9zLKbeZK9Jkdnbw/ea
De4KnhWbXYXgac53A49G/0XWeRhZL7T8UEe5Cp2XtT78Y+AndSb0cz0fKq4U
F3qXO+EbO6/xmei/Cp7LeGvNVy6K7Z3nKa6R3fnmZMyfFoV2J9rjIfQeQXZM
7Y7Ez0JOdb4TfEPPCfWRzeD7gW9yB0We/wch26I3hfEpjE9FPgs/TfP4Fuq8
2j8yO2fE5gN9wVeQS7jHrdxn69h8Sb6xAu6Ux+D2rMWF/Ly4fJh1jsK9576g
PN9VuZG1NsGvhT+eY3l4GTjLnCqM92eNAbHFX0m4epH5fBPkP+h1hB8ZWx7U
eYco/4cW+6uytqb85yKytt9nA+Sg2O6mFGv+kmN+Ln9P+N0IfnBsOtKNUqsH
evdWyMLI/Gok8hF0FqLTWn7iMT4ytFq5AFyAzmB/04GhzVWMNEW/RWxnX8M5
moM/Um1MrOYpvrZl7a31LuOZly+/AfcMrW7rLPKRYR4XI0LL4aoRzVl/gsfg
AmQx5j+Ysffa6Hn4M+QT/u46g/KX7B8cWZ9QpLyVWj3Q+lPly8zfzLwPsHO6
12XpdY0t3x+E/ws5Gv4sslpqviUfk46479CplVpdV+/R02uc1lfPoD6idmr5
RHeZC24Tm09tSgzrbj4FN/S6r1pfwfNhHfBJxoqFltu/dnv2ID9PrLdoG1sd
V02P0Wnj96W4uCc1v1KebJTa/aqvKMXvA8z5IrF8JL9SvyOsXPhWYrW7AP4a
/Mdwg9TbMG+DY3GXGfsAuVq1mPWfCi1+FafiV3m9U+3bCG4f2747ErNBZ6mA
3M7vvfDtYottxXhJnRf+MHxH1fbY3vnDxLDebj34DF+GffPh8r2fU4/R0u2/
qnyfWK+m2rrB4129VmWvazXBVTyHyGfKuo/J1/ajf9LriPKSckkHdCulFp+K
WfUA/VX72GtPYrW5U2znVY+wE66C11nlRvUDquGfwG9LrP/Q2bck9sZ601uJ
5Q3lB+Vw1YouqdVcxU0x8A+J9Tfd4LrHVvN/Tqzuqv7ewdwgtdqv/FPgb6Qc
WMb7NOWZ2HOFcsLFxHo+9X6Xvd9T33UbOjW89o31vNQlsryn3vUscmBs9aRE
av6hPPAua0xE7yV0HkWe5ncQeg/m9Vr250QWy3pr9cbygeusWdzfKIusBD8F
XDuynkb9gHpD8Vf4fcTzj3L7pRy7B+kd0x27L+ldksj6KPUJNTz/KKfKn3uA
zyC/dTvlVw/ElvP3wvWIrcf5zXtm9SG57kv6fTyxGt1dfVqO7S87jib2RrLz
MLhDbL3kV4nlz0L0b+WYLys/347c7bHfOzYfVL+knvRUYvfS221TD7susf8F
ys31uf+tHlOKo9Jes1ULtK/61V2M95SfgU+A/wNtL5jE
            "]], 
           Polygon[CompressedData["
1:eJwtmHm8V2Mex89PnZPf09E5qZAirdKK0r1tupW03ZZ7b+kq3fZFWqSNZB9m
htes/pYYUxONKCXDaDDGEs0whilLKpIlFCXVLZ+37/eP7+s8n+f7PN/zLN/1
aTl1QeX806IoqihEUV19D2ZR1CCJopnCLUMU9cmjqLdoYRpFN4ieFf/FOIqq
GS/+VaKxois1ZnBucy4QfZuZrHPUnqqx32rOh8I/FqOoUvh54T8JD5DM8cLv
Cr8p3Fcy5uj/v1DfBM19T31fxybjbOHTRVVqv66+fyBP1EzjzxWdk9haV+j7
+4KtmfWwl+80fqfGHtL/RwqvFX5EuJ7Gd9D4eerrqrHH1HemcCNRU+Sq7xrx
vtL4/4t3XNRc/bPU11q8SFSu9rPibxTv76Jtsa3vuczOiLN6VPjPwm+JPlJ7
gvqCeM1F09X+UH3/Fq+f1rNA8u9W3zXiXSF8vfBvhacKXyiao/anGv9OZmvu
Ikpy20t7ta8T/6D474pfKnyDcHvJqC/+Ke1/rK/38czulHNaonFLRV+KP0z8
9eL/RfxBua2Bf09zor0QuaLNGrM1tvt8Su0S/199/e9r4UKw/+0U/z/Cg9EV
UYlkTteYl9T3tnhjNKZW/35SeK/wHtF6tc/S2MnifSL8X+F5wvcK3625Vbnp
DLrznmi72r2D3WUn8VPXyWVq31EwXR0ufLPwL4WnCI8Rvkf4PuH5wg9JxiOx
2cM+redl4e3cjegVtU8Wba2s+dXMdJC75s5fUDuXjInivyX8Ymb3wX3l+sd3
mekwuvym+FtdP8bxr9hsCx1D1w6IdmRmM9gO97lL7cNFWxtrXCXcXfPnFkz/
T/p5TRF+Rfy/ZaaDr6r9Wmy62dDX973wx+i6cI3w++xBuI904SrhF4QfEG4i
/qSC3Ql3g86iu9z5Zr/vhcJt9P8DwrHw1cIbxV8j/LnWO1R4tfBK4RGp6ftJ
4f3CB8QfLrxJ+K/CT7t97BI9o3Y7yZstfh3J/0z4SfU/IVrHeNGj6tus79Oi
x9RuG8w2sdETwhe5PWDT2PYn+t9g4Yc1/sHM7hydQpfQhTZ+HifE/9TPhzPj
rI6p7wc//y1qb1Bf4vtFR9CVZtiI8FHhvcKVuekqOnudeKmfH3tkr+9ndhfc
CbozWuNHiRbpnBaLvuEfiekQtn/C/c95ohai77We0eJt4EzE2y2qjW39x3wP
tOnbx/4zO3vuoLn7H9a813lH3T9zXw9nZiOTRcNys50hat8sflv9u65whegu
tf+ovuXi7dGc1sKtROeLyrWH4aLP1f+F+yvssyDeV8Kf6X9DXJ+xPfZ+h3h/
KNgZdNP4Bfh+9R11/cKfvoHPcXtC3/fHFiuG+vpGa3w7yarhHIVLiQ/CpaJJ
7g/miNcT/yZ8p3B1MP6MxHwTPor4QhzoKV6vYGv4QXRpsLVtYV+xxYgzghF3
zN3C20RMiC3GFYP5d+Lbb4QnBrPRl2LzcdguOr/L72dwajaGDOZie93Yk+bf
KP4Vwj2EJwjfIzzG4/Xtwr8SniHcVbjK48lI4f7EcuHbhauEB9Anaq/+i0SX
iMY5n7g+nLsXdVZ/F9GlPmasx376qjX+loKNvVx4nvBt3EEw/cHXTlNfr9zW
ND1YnGatk4KtnT10ym1N/Js1dBQeKRqRm41iq/igJ0SNg/kmYg6xB53tlVp8
uUntgdiI5q3EzkWjyAGKZvPYPjazp2g+Dl83ghxFeLdokNqP4f9El0nGZMm6
VX0jguUM61weuQT+Z4vHi9LUbAbbwed1F64X7O6fcf9EDvBybD4f308fvgs/
wlhyCGIzMZPYucrjETbSLbWYDZ+c47j+39T9DfHvn5npH7q4zf09Z7U7Np/G
mf1L+B3XR/73nMcvcqo6wWIWcSwL5o+QQexIXbeJycRmYkSjYD57k8fvnqnN
3eb2gIznPX7iI7FdYh6xaYrnc7UeT5GxNjP/d6fO+9fqmxVMHypFZbnpLjaK
rT6k8efn5vPwfRs9BrRQX5nmL9GYvhp7JvoqvKJgesx5cxdbPHacyix/xEf0
ET/KrY8284k/bd3v4s9a5qbL6DR6vNb3Tww7or2cJn65+EuF+wWjy0WF3HgX
4kc9vyW/a5WbTGRhG41yW/Mwtz18WKWvH9/WVLin21u58Lm59dFGP89W+yzR
wGD+4VjR7pZ8bjWxQ7y+7j/IwxjbW3hZweYQsznLDR5nW5NDiX9XwfJxbBrb
HqW+tuI1wY4T89FlwWyOfyAbW8R2l3v8w4Y7BIvJxGLy9Vp91+g/14vfA3+k
8fPdf81LzT/UBMtByUWJochC5tDcdARdWSw80McscX84yePWUuHfCc8OFsPo
o32tqA1rTSxmENuG5CYLmQtSkz8zWFxCN6s8nt8v/tLUcgb6aC9LLWde7/ZU
klqNg3/a6jkYMZ24diN+CpvS3M6uL/hhYupQ4eW+njrovfufaZrXILc5/d13
k9N3EX9RwXL9INzV94O+FIVPz00H0UV8/Bi/b+Z3yO0uudOZqdUQ1BLj1K5O
zWfi69a5PiCro9sXMlf7fqkZDhbNJrHNVbHF0DWes1W7/XcMVo81Fu9IZrXi
DOE0sZqRPnhNEouznV3/iWHEsoaiixOzaeyEuDUysT2wF2Qg6wzRoczOhLNp
SK6UWU1AbcCZc47UTp1Fse+bM+FsuiV21tggtlaSmG3iE9h7y8R8BWeMbbIe
zh4bxBa75xY7Sjxek3OQW/ycgyRmw9htM7cfbLK5z+eu+yVm2+gAujA7MV3F
prFdxmPrxGBymYmJxeZBwWwRmcjGxxD7KxLzPRczJ7H4ShwnBhB7yF2JDVe6
/BrPf8p9/+MT2xNEm3j9c+4RzJfh0/AV6Bi6zPmiewX3x+hwHc8biO+LEnsz
gGhjc9jeeN//VOELsOXUbA2bq3Q95vyRiWxyAmq3WxPLFeb6edxE7pkb0cZf
4IsmpKYP6BC6NNnzD3zEMD8v9kOORq5W5vkMPmmA7xdfOCuxtwpqLmovYghx
Y5n7I3LiCs8/yDeoOfbKPq4OlvvN8fmV7k/5R5nHAWILbxjkSPgUfMsK7iFY
DXCt+O0Sqw3wYfiyRaLFwWo4ajnq7dfUrnB95s65+0Nuzw96ftPf7wsbwpZW
ev5CPtUjtTiEfmOD2GKN6xNvEvhk7oi7muaxkbx4PrmPcOPcfDq+nZqA2uBj
r3cOi47HVq/wbRXsPYUcm1jMeZJ7v+32jI9oId6XXkdgs1083mEL6DuxiBqU
tw7eIKhNeVPZ7nUZtQ5vCPs9/yDf3uf1EjUjcf514R1ej1H34UPwJdQslant
gbrrsmB7w0fhq9gze8dn4jvxk+g/byD1EquRWQ81FrUWNRG1UZbbWTH/kmBE
G5mHNS53f8GZcDa8IVDLUtPytoBPq+/7LfUcgtg5N7HcAn1gT+yFWpYaep/X
yeQ2nA25IzkkZ/SGcN3Ean7ya97Mdrif5i2NNxDeQnjDqB/sjemb2OrT9n6H
nGWt3y1vFrxdsN7zPJayPmo8YiqyeevgfvkH+Sxvhrx7fJRZvsD7xo8a84H3
HfH1MhYd3+n5coNgOoIsZP4vszeyYmI2g+1Qh56KTWanYLpEXyePA9Sk6Bi6
Ra36E4JOfZ0=
            "]], 
           Polygon[CompressedData["
1:eJwtlmlUVlUUhi8YJh9XLormkDiFmuSUDAqooQyKIijOOCCaaIpihppZ2eDq
V6tp9bfRLGtpow3aZKZm5YCkpuXQIIKIM2JmSs+7zv7xLN77nn3Od/a5Z+9L
tznlhUvCPc9bCxGwNOR5z4Xxt7nnlcNMnqfBfPQaeJaxcp7fDjzvfSak+J53
PdLz/oVl+M8zvoK45TCX51CM592LHgD9YBrxRTAQ7TPWEqIVQ+wASA+5sQCv
Av0C6z3K82p4gOe+0AeSoCteBHHFrDcM3R7dATpCFNyN1xv62+8Ox8uAEbAM
rwxvkUB3xesG3WEp3uN42ZAFqXgz8FLQrdCtIRZy4RG8VbASlhCTxr5SYbrF
xxCziOeFsBLW4hXirUC/SG5P8vwELCP+fhiPnqAY6ElcDyhA50MezCEmi7mZ
MB5m4CXaGdyHHg4Z0AXvLhiDHg05UELMed7TOdjE+9vK+7uBXu67fY1XPqy5
Gh6Dl9lfKf4zyo+YSMb7ovtAAky18ytT7rAYhhGTBnO1V5it90ZMb70PSIBJ
ePPw+mk96A/T8ObjtdV83Tv0Heh2kKg7AW1sLAO9wHe5D9DdgYHQB6bjFWlv
tl4T+d2C3eR7hHyjmTsbfwTjdxLfCeJgF+M74Qc4RFwGMReZdwE85mzDe4Wx
Op7PwKt2/y+ha6EG3sBbj5ekdwEH0L9AFXzP2A5bO4r12kOHkKsb1c86xnYz
1gzvY/QX6C3wNaSz1pd4p9E1WguG4l1lXgNsZOwzvMF476I3oweh/2PsJtTD
WdhgY43KC92TM+gFt8M44i/hXYTLEOg+4GXCceachBNwgLEhvjuPT9Bh7Dcc
rtqcQt/Vseq5AB2OV629Qw1M1HvFa0Rfg38C926q7KyOwnBi/tYY+jo0wRi8
qaw5Bcp0P60udddK0BP1XqEEkvGSIMXGdP9Uv4M0BwZbXaYoFrJD7j7ctP21
Q8dBJ7gRuH6ViE6GJOtNQ5kzBGZZ71G9xcMC/R6MtHpT/Y5VL0QXED/O7nGS
rZdud70z3jz0Qt/lqFy7QGcYi+cxVsVeRhKXA6PgYes5mdbPFqNL1avhHquz
UrxCnieEXH2ozvK1byi2OpqJVwyzrJfk2trlvutbi2y9KXiTddZWv+qTeg95
yhHyY1x+yrMo5Pqq+oH2V4F+CB60vruK8ZfoL0/z/BRU4P1oNar3/xP6Z6iE
3/B+hz8hi7FDeGfRI313PjqnYei9ePthH3wTuBqsRG9DfwfbVbPW91J91xfU
HzbjfWV19qlqSfUHn8MW+60c+91z6HqoM2+regZ6F2y3upwArcgpFlrDlcDV
R1t0G4i22jqPF4UOQXOrwQ/w/rA8P0R/BIfhEt5FOA+jfFfXqu8WIZej+otq
9Rh6L3of7A9cDTbTdxJugz2qK+Zdi3R9RnmnEZMPYYy31HfZ7lqItSNVG7au
aj8bXY0+A7WqWetrv6IPw0HrneoJ6g2Vlk8suq3uPsSHXF/QXib57jt+C90E
nr5bjHfXnQu5XqEanExcPHoU5CoX4qrJ4RS8xvg6fiORmDetB5+2HJVrsvoi
3g7YCesD945i7Oz1DhqUQ+ByUm4X7Jz1TR5n31B9S3vxu8fUuxiPY3+9IQFy
ibuCdxUadF+JCSc2DJpZD9C3W+d3ivEWPEfCQeJimB9AR7hsc/Ub6n3qgY0w
2ndn0MP+p9H/NucC9y3LRG8g5p0I18NOwHE4afvUXJ3Be+hNsBHeCtye9XtH
0EdVZ/C6neVf9m3RN6YW7xZeHvF1qofA3Rf1pFp7rg9cDe6xWlBNfIv3P95I
TZ8=
            "]], 
           Polygon[{{4102, 4101, 3157, 1569, 1579, 3159}}]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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

            "]], 
           Polygon[CompressedData["
1:eJxFmHlwltUVxt8X4X3hfl/1YtVWnXbGOm2nddppp2Onm522U6e1U9vRaV3r
giK1bthdq4JUWxEV2XdCSAgkBAiBBAIECIEIgbAHAoQdZJGiIAIVivT5eU6n
f5z57nPP/e57l3Oec8697qG+tz/VJUmS29Ik6arfHSFJWtQu5EnSEJNksXC9
8JksSSqFP5CckswrJsl8yWm1f6Wx7Rrzb43dIlmu9nmNnyFdVkiSbpIo6Vmw
OZjrrGS62rM0fqbG7xYeI/yO8FHJv9Q+Lsl7Jsnjmn+fxjToe8fU91PhVcL7
NO6s8N3CW4Q/FB4pvENzdUpGq71MfbOkOyQ8MdqaWfvlWssnC/aNn+n/61L7
9gDJaLVf1/g7pTsofEDyntq/0LiRapdJP0T6e9Q3VHMNkUxWu0wyRLJVug7J
ULWXaPw8jd8lPEy4q/bzsObpLemmdg+tYWNqfeguaPxW4QeFuwiXCVcJT9T/
H9D/Dwm3CV8rfbPwAsmX1b5Bsoh74RvMLZmv9jOSOv23XvKs2u/r/xv0//uk
/0j4iPBa4euE1wjvFH5L+FPCy6KNYez9kkTrmSx9pfQjNN990s30+1sk/Dfh
gZmdHWf4onSt6rsmt/WuVnuY+iZLN1hj7oq2J/Y2QTJOcnc0HWNe0tjx3j+K
OSX3Sl+p3yrJXMkejVmpsZ/R/G9Jt0JyVW7rb1F7tPTl0o/V2PvddvtItzc1
Oxgi/aTU5uc7D0Yby3+el3699EvU/qz+0yZd72hrZc2TJXXS10q/Se03pXtY
Uq52meQhxkpfIX2FcB/h30nWqt0m+a3avSST1B6vMcM1tntPs3lsfYGkQX1z
pdvPGI1tF24WPi08VXhQsP8yxyPCc4RrUvsG38InNwvflpuvlvh6Vkg/UHiE
3wfrfYzxkjs19i7JOfdHfONLwpuEV0k+p/YK9XVw9tHOhjNah+0Kv6a5BmXm
L23qWyzdMeEp0q2XfFH9X5CsVbsvc0rXKvl9NB+GS+AUfLtFeFFq/jxYeJpw
dWr3/xS2IzzBz/dx7l94ofB67FB4r+Rbmuvbkv1qvyBpkG6BpL9/D+74rvR7
hAvyxyAp6A6KkvHST5G+UeNflP5t4dXCt2v8TuEa55cW6V/y82b9N0rfKbw5
2l7Zc7vaXTT3NunvEN4hvE3yc7VvlWxXe67bU63m+4PwBj/v6yUb1f6HpEm6
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
1cC1Hk9Z338Byld6Tg==
            "]], 
           Polygon[CompressedData["
1:eJw1lnlQV1UYhq+lmD9u9SMdNSvLlpn2fd+zfZvKxl1LzX2vZirLXQQVAcUF
hRSDFEQQoRQBTU1l0VwQ9xXJyg0XUlRQ7HnnfP3xzLz3/b5z7rnnfOec26rH
kDaDr/E8LxwaQGbQ8y6FeF6873mbAp63GZai+zb0vEfgYThLThV8iP4A3oPF
5AzHW0XbNLWBZTAd7zBeProQiuArvGy8JZABY2kbjbcDPRldQM4KiMXbhlcG
eyCaWBL+XJhAbIP6QA9EL0CPJj4IPRiGwhD40vqNIpaIrkD/CcdgCl4MHEAf
goMwjZwE+pwN8yEf7we8JeS14zs7QHuoxrs+lDb1PK8Tzx2hhvxw37X5jvgw
+B6m453Em4OeC0lwBN6kzRvQGjJ8l1dJ3mk4BeHkVNPnJ8T7wX7e5fPOw/jl
+hZ4BT+ddtPgOG3m4aXAzxBF20nQS8/EZqETybuBNo/DE7CC2CS8LTbPmu8o
vAl4RegSKIaJQfeOE+gLUA2T8GbjeVp/dJbmCWZo3aG/rcso363XOvR62Kj+
8GYqF+KtRmLxMmmXAbmw39ajDL0NKuBB3rUUr7d900itK/6PVmtaW61xufXX
x+pE7+uL7mdjrkc/DSEEfgm6elPdxdk86ts0l0fRU/GSbV5noWvwzsF51S9e
J4hFj7Pv1vePVp94K2EtRNBuLP4YaE8sWjWCl4oOMoYw7Su8GXg55GTDmoCr
G9XBQkiDdNufM612NUdT8KZCHIzDy8XLg+XwDV4M7EPvhd22j7S+hejxxCIg
UrWqGtTeV//QBS+VMSyASMtXHXymedC+0BoSiw+4/bsLbydst/3Wwb5zFPGp
mlt9P97v/8+Hxgv56MF8f6Mwz2tGfTcPdeuZaPOo/EXoneiPyMsi/xzP5+EA
3jN4adpjPFcG3Bl2lTZ1cNHm6mu8rehSyLQzZz9eG9p+Co/BAt/NwTTiiyEL
upKzlz73QAqxe8nbZXVQS/wKXNb48MbgpaMHBN0ZpbNqA5RAKQRou1I1Cq+h
X4WXbf+uwWuGbgpNYI7v8rS/F6FP0/5MwJ0br+OdQNfCZdvTN+I1hptgvvZd
0NWn6vSM1VUS3Eb8dmgJRdpD9k1b0aU6b827D+8BuN++V2fEZvqpgn91Tmu9
tSYwj9gd5BXjTdTZDN00B9q/Vh+qk854OTqj0N0tPtx3Z22C3TW6c3bDrTY+
jVl6HXo9FKoe4Ba8FtAc5pKzNui+XXNws3n78J5CPwmP2vrqHG+L3k1sj9YW
NsHdeMn6RvSWoDu7khlfCqTa3fKTfWeJzhTYCON15kNHOwOGkbOV5y3wh/V7
AP03+i/4x9Yvw/prhb4L7rT5S/BdnSxD58JyqISTcAret7u2se4B7oMBPPeH
XN/dPQV25qywe2sh3vM2B5qLQ3i12sPortAZslU/9HeI/rrx/Dl4PF8HDaFJ
qNufAfZnJrlvo9+Fd1SHQbcPtR8bkdfH/g+0D7UfLwTcfOu+rLLxn8W7AnVw
GMrhFLxl/ek/Yg3jXw2/6Yzy3XsVP0rsGByHkTACRgXdf4fy8tF5UGDnQqrv
/l80rvqMvwGEQFPGWsH3DsIfCHm+W6+Wtj/usXrQ+fIc+ll42vqbDw+h43Q3
hLj7aDXjXwXFAXcf6k5Rnu6rMvR22GHr8QLeS/AiHMQLYyzljKU3z710J4W6
c3yZ/SPpX+lb8uox7p7Ev4Duegc5Lcg9QtuPeR6q+9x369sFnYO+lnh9uIR3
EWospjWPZKwR0M7O8xj0VXQdeLyrh70jGn8yzAm4862tjUXxX31XI6qVODvn
e+ruJG8Esf8AmvSeJg==
            "]], 
           
           Polygon[{{4286, 4285, 3226, 1803, 1813, 
            3228}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0uA1EYgOFvpq2ZqdqwrI2kNgQ7liyVlrY7WxfQxl/8/1wCCTciXIUb
YVWJPZ4hmXfeNzlzvpwzc/ujwTCJiD18iHW+TyMesKmfuc+NPGISPV3nArs6
5ww7usZVdHWFU3R0kpcfRmzTTxaxxd/c5jfzN/iVX7Cmn/gRy/qIDzGv+9zD
rF4p1zGjp7iBuv5yh/I+B+an5X6u8DGfoKpP+Qw1fc4XmNCXfAVPXHvdZH/H
jlu+Q6ELQ6d5gRfR1B3uoqWHPMKSHjvIJ1b1e/L/f38B1Wsfog==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MkuA1AUgOGjNt00iKmlFl6DhHdoqZoS09KwYlkJC5a61OqkplfwIqw0
8RQSNr6bLv78f25uzj25iwdnpdORiNjEZybijmujEZe4111+5LdsxCt6+oWf
0dVP3EdH99IZ2rqTjJZu8UNCN7nJDW7wu/l17qd3cKuv+SrtoPd5Dxd6lVdw
ohe4iCP9Z+9fbOtvLnHO/DKP8RqP8wTW9SRPoaKneQYbepbzqOoCz2WH/zLP
RWzpH/MPOe/tAo71Ei/jXO/wLmr6y90BbvRHZvi//9jcK/I=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Mkug1EcxuG/VIxXYUfCVo0x1IqExK5ba+ONCNfQUtWKoS02rFoWJLVk
SSIx1dQb8CQWvzzv4ss5J1/P0triaktEpFVLRDxyuTViRW/2Jpuc6YxI6dee
5pR+7ElO6Nse55i+7FGO6NMe5pAadpIfHOQ7c85/4ja39GBvcF139gLndW0P
sF+Xdje7VLFfvftFRbvODPMdEVkWuMMiD7RrH/JIOfuYJ9qzSywrb1d4qn37
jOcq2M/OL7PN3e26sHvZpyt7lnOq2ze+vdW9XU38/98/eTE3Qw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0EsuA1AYQOFf0kpMmCE60SFDJkSLqgbxLhOaVGIBbEBYRTfCiKSbUIq0
HototfVIfI3ByTk3N/nvI316XjwbiIgj3CQiZiyOkxElLOgLXuWPoYh35PUb
v2JFN7mBnH7hZyzrJ65jST/yAxZ1jbN8zxmumD/LV3yJaX3CZaR1ljMY1yme
wIjuuWsXg/2zuI5fb6hyiwvmt3mNP3mdN9DRm7yFrt7mHfT0Lu/hS+9zEd/6
gA/xo2vmJ53Z4jaG9ag7jfXRczyPSX1r/w5T+jrx/79/g6cwpg==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Esuw1EUgPHTxF/ULpCwEaWtx8CAGBGDRid9oKJFJAy9HwtgRGIVklpI
1aP1XoJfY/Dl+25u7snJHVopz5VSEbGImyRi32G8PyKDQ13gK94djNjBpd7m
Bi50nbdwrje5hjO9wes41WtcxYmu8DGX+Yj3zD/gIq+ioXOcRVWP8SiKOs0D
WNZvdn3Fgn7kJmb1PWe4lY6Y4DZP8jO/INt7yx3kdJffkdcf/Ikp/cXfmNY/
/IsZ/WD+PD9xG0u6z05Jb389zCOo6Fv3d6jr6+T/f/8AU3sxzw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DsvQ3Ecx+GfpU3QKuJSmzdAwhuRmqw2S72DBlG3MlRSd0YGiRrZGDWV
uIzul5mEN+A5MXzyfM8Z/vmfMzg5XSi2RMSEKqmIOw9D6YhhPdhj/ORAW0Re
H3Y/+/Ru97JHb3Y3u/RqdzKnF7uDWT3bGT6xnY+ccv49x1lQwx7liC6Tc5jT
uf3rfj86tW95oyO7zhMd2DXWWGqN2OAMNznLOW3Z8yxr217gonbsJS5r115h
RXv2Kte0bx87/5BNXqtuf/FbZ8l3uWtGF3bVu3VdJeel/v/vH3+LMrI=
          "]]}, {
         Line[{2, 487, 11, 500, 501, 20, 526, 527, 29, 560, 561, 38, 594, 595,
           47, 628, 629, 56, 662, 663, 65, 694, 74}], 
         Line[{1905, 485, 1922, 3268, 2845, 3269, 1940, 3291, 2853, 3290, 
          1958, 3317, 2861, 3318, 1975, 3343, 2870, 3342, 1990, 3366, 2879, 
          3367, 2007, 3396, 2890, 3395, 2026, 3421, 2024, 2046}], 
         Line[{1907, 486, 1923, 504, 3271, 1941, 3294, 2854, 3295, 1959, 3321,
           2864, 3320, 1976, 3345, 2873, 3346, 1991, 3371, 2882, 3370, 2008, 
          3398, 2893, 3399, 2027, 3423, 2028, 2047}], 
         Line[{1909, 2843, 3264, 1925, 2848, 3274, 3275, 1943, 3302, 2856, 
          3300, 1961, 3328, 2866, 3326, 1978, 608, 3351, 1993, 3376, 2885, 
          3379, 2010, 3406, 2896, 3404, 2030, 3429, 2034, 2049}], 
         Line[{1912, 2844, 3266, 1928, 2850, 3284, 3286, 1946, 3313, 2859, 
          3311, 1964, 3334, 2868, 3339, 1980, 2877, 3360, 3362, 1996, 3391, 
          2888, 3386, 2012, 3413, 2898, 3418, 2032, 3435, 2040, 2051}], 
         Line[{1914, 1921, 3270, 1930, 1939, 3292, 3293, 1949, 3288, 2862, 
          3319, 1967, 3315, 2871, 3344, 1982, 3341, 2881, 3369, 1998, 3364, 
          2891, 3397, 2015, 3422, 2900, 3394, 2036, 3420, 2907, 2053}], 
         Line[{1916, 1926, 3273, 1933, 3299, 2855, 3298, 1952, 3325, 2865, 
          3324, 1969, 3348, 2874, 3350, 1985, 3375, 2883, 3374, 2001, 3401, 
          2894, 3403, 2018, 3425, 2901, 3427, 2038, 3440, 2909, 2056}], 
         Line[{1918, 1931, 3278, 1935, 1950, 3305, 3307, 1954, 578, 3331, 
          1971, 3356, 2876, 3355, 1987, 1999, 3381, 3383, 2003, 3411, 2897, 
          3410, 2021, 3431, 2903, 3433, 2042, 3442, 2910, 2058}], 
         Line[{1920, 3261, 2852, 1938, 1955, 3279, 3281, 1957, 3308, 2869, 
          3337, 1974, 620, 3332, 1989, 3357, 2889, 3389, 2006, 688, 3390, 
          2023, 3417, 2905, 3438, 2045, 3444, 2912, 2060}], 
         Line[{2048, 2033, 3428, 2029, 2013, 3407, 3405, 2009, 3378, 3377, 
          2884, 1992, 609, 3352, 1977, 1965, 3329, 3327, 1960, 1947, 3303, 
          3301, 1942, 511, 3276, 1924, 1906, 3263, 1908}], 
         Line[{2050, 2039, 3434, 2031, 2019, 3414, 3412, 2011, 3385, 3384, 
          2887, 1995, 3361, 2878, 3358, 1979, 3338, 2867, 3333, 1963, 3310, 
          3309, 2858, 1945, 3285, 2851, 3282, 1927, 1910, 3265, 1911}], 
         Line[{2052, 2906, 3419, 2035, 3393, 3392, 2025, 2014, 2892, 3365, 
          3363, 1997, 3368, 2880, 3340, 1981, 2872, 3316, 3314, 1966, 2863, 
          3289, 3287, 1948, 529, 3267, 1929, 2846, 3262, 1913}], 
         Line[{2055, 2908, 3439, 2037, 2902, 3426, 3424, 2017, 2895, 3402, 
          3400, 2000, 3373, 3372, 1994, 1984, 2875, 3349, 3347, 1968, 3323, 
          3322, 1962, 1951, 3297, 3296, 1944, 1932, 2847, 3272, 1915}], 
         Line[{2057, 3441, 2054, 2041, 2904, 3432, 3430, 2020, 3409, 3408, 
          2016, 2002, 3382, 2886, 3380, 1986, 3354, 3353, 1983, 1970, 579, 
          3330, 1953, 3306, 2857, 3304, 1934, 2849, 3277, 1917}], 
         Line[{2059, 2911, 3443, 2044, 3437, 3436, 2043, 2022, 2899, 3416, 
          3415, 2005, 3388, 3387, 2004, 1988, 621, 3359, 1973, 3336, 3335, 
          1972, 1956, 3280, 2860, 3312, 1937, 3283, 1936, 1919}], 
         Line[{83, 725, 92, 738, 739, 101, 764, 765, 110, 798, 799, 119, 832, 
          833, 128, 866, 867, 137, 900, 901, 146, 932, 155}], 
         Line[{2061, 723, 2078, 3452, 2915, 3453, 2096, 3475, 2923, 3474, 
          2114, 3501, 2931, 3502, 2131, 3527, 2940, 3526, 2146, 3550, 2949, 
          3551, 2163, 3580, 2960, 3579, 2182, 3605, 2180, 2202}], 
         Line[{2063, 724, 2079, 742, 3455, 2097, 3478, 2924, 3479, 2115, 3505,
           2934, 3504, 2132, 3529, 2943, 3530, 2147, 3555, 2952, 3554, 2164, 
          3582, 2963, 3583, 2183, 3607, 2184, 2203}], 
         Line[{2065, 2913, 3448, 2081, 2918, 3458, 3459, 2099, 3486, 2926, 
          3484, 2117, 3512, 2936, 3510, 2134, 846, 3535, 2149, 3560, 2955, 
          3563, 2166, 3590, 2966, 3588, 2186, 3613, 2190, 2205}], 
         Line[{2068, 2914, 3450, 2084, 2920, 3468, 3470, 2102, 3497, 2929, 
          3495, 2120, 3518, 2938, 3523, 2136, 2947, 3544, 3546, 2152, 3575, 
          2958, 3570, 2168, 3597, 2968, 3602, 2188, 3619, 2196, 2207}], 
         Line[{2070, 2077, 3454, 2086, 2095, 3476, 3477, 2105, 3472, 2932, 
          3503, 2123, 3499, 2941, 3528, 2138, 3525, 2951, 3553, 2154, 3548, 
          2961, 3581, 2171, 3606, 2970, 3578, 2192, 3604, 2977, 2209}], 
         Line[{2072, 2082, 3457, 2089, 3483, 2925, 3482, 2108, 3509, 2935, 
          3508, 2125, 3532, 2944, 3534, 2141, 3559, 2953, 3558, 2157, 3585, 
          2964, 3587, 2174, 3609, 2971, 3611, 2194, 3624, 2979, 2212}], 
         Line[{2074, 2087, 3462, 2091, 2106, 3489, 3491, 2110, 816, 3515, 
          2127, 3540, 2946, 3539, 2143, 2155, 3565, 3567, 2159, 3595, 2967, 
          3594, 2177, 3615, 2973, 3617, 2198, 3626, 2980, 2214}], 
         Line[{2076, 3445, 2922, 2094, 2111, 3463, 3465, 2113, 3492, 2939, 
          3521, 2130, 858, 3516, 2145, 3541, 2959, 3573, 2162, 926, 3574, 
          2179, 3601, 2975, 3622, 2201, 3628, 2982, 2216}], 
         Line[{2204, 2189, 3612, 2185, 2169, 3591, 3589, 2165, 3562, 3561, 
          2954, 2148, 847, 3536, 2133, 2121, 3513, 3511, 2116, 2103, 3487, 
          3485, 2098, 749, 3460, 2080, 2062, 3447, 2064}], 
         Line[{2206, 2195, 3618, 2187, 2175, 3598, 3596, 2167, 3569, 3568, 
          2957, 2151, 3545, 2948, 3542, 2135, 3522, 2937, 3517, 2119, 3494, 
          3493, 2928, 2101, 3469, 2921, 3466, 2083, 2066, 3449, 2067}], 
         Line[{2208, 2976, 3603, 2191, 3577, 3576, 2181, 2170, 2962, 3549, 
          3547, 2153, 3552, 2950, 3524, 2137, 2942, 3500, 3498, 2122, 2933, 
          3473, 3471, 2104, 767, 3451, 2085, 2916, 3446, 2069}], 
         Line[{2211, 2978, 3623, 2193, 2972, 3610, 3608, 2173, 2965, 3586, 
          3584, 2156, 3557, 3556, 2150, 2140, 2945, 3533, 3531, 2124, 3507, 
          3506, 2118, 2107, 3481, 3480, 2100, 2088, 2917, 3456, 2071}], 
         Line[{2213, 3625, 2210, 2197, 2974, 3616, 3614, 2176, 3593, 3592, 
          2172, 2158, 3566, 2956, 3564, 2142, 3538, 3537, 2139, 2126, 817, 
          3514, 2109, 3490, 2927, 3488, 2090, 2919, 3461, 2073}], 
         Line[{2215, 2981, 3627, 2200, 3621, 3620, 2199, 2178, 2969, 3600, 
          3599, 2161, 3572, 3571, 2160, 2144, 859, 3543, 2129, 3520, 3519, 
          2128, 2112, 3464, 2930, 3496, 2093, 3467, 2092, 2075}], 
         Line[{164, 963, 173, 976, 977, 182, 1002, 1003, 191, 1036, 1037, 200,
           1070, 1071, 209, 1104, 1105, 218, 1138, 1139, 227, 1170, 236}], 
         Line[{2217, 961, 2234, 3636, 2985, 3637, 2252, 3659, 2993, 3658, 
          2270, 3685, 3001, 3686, 2287, 3711, 3010, 3710, 2302, 3734, 3019, 
          3735, 2319, 3764, 3030, 3763, 2338, 3789, 2336, 2358}], 
         Line[{2219, 962, 2235, 980, 3639, 2253, 3662, 2994, 3663, 2271, 3689,
           3004, 3688, 2288, 3713, 3013, 3714, 2303, 3739, 3022, 3738, 2320, 
          3766, 3033, 3767, 2339, 3791, 2340, 2359}], 
         Line[{2221, 2983, 3632, 2237, 2988, 3642, 3643, 2255, 3670, 2996, 
          3668, 2273, 3696, 3006, 3694, 2290, 1084, 3719, 2305, 3744, 3025, 
          3747, 2322, 3774, 3036, 3772, 2342, 3797, 2346, 2361}], 
         Line[{2224, 2984, 3634, 2240, 2990, 3652, 3654, 2258, 3681, 2999, 
          3679, 2276, 3702, 3008, 3707, 2292, 3017, 3728, 3730, 2308, 3759, 
          3028, 3754, 2324, 3781, 3038, 3786, 2344, 3803, 2352, 2363}], 
         Line[{2226, 2233, 3638, 2242, 2251, 3660, 3661, 2261, 3656, 3002, 
          3687, 2279, 3683, 3011, 3712, 2294, 3709, 3021, 3737, 2310, 3732, 
          3031, 3765, 2327, 3790, 3040, 3762, 2348, 3788, 3047, 2365}], 
         Line[{2228, 2238, 3641, 2245, 3667, 2995, 3666, 2264, 3693, 3005, 
          3692, 2281, 3716, 3014, 3718, 2297, 3743, 3023, 3742, 2313, 3769, 
          3034, 3771, 2330, 3793, 3041, 3795, 2350, 3808, 3049, 2368}], 
         Line[{2230, 2243, 3646, 2247, 2262, 3673, 3675, 2266, 1054, 3699, 
          2283, 3724, 3016, 3723, 2299, 2311, 3749, 3751, 2315, 3779, 3037, 
          3778, 2333, 3799, 3043, 3801, 2354, 3810, 3050, 2370}], 
         Line[{2232, 3629, 2992, 2250, 2267, 3647, 3649, 2269, 3676, 3009, 
          3705, 2286, 1096, 3700, 2301, 3725, 3029, 3757, 2318, 1164, 3758, 
          2335, 3785, 3045, 3806, 2357, 3812, 3052, 2372}], 
         Line[{2360, 2345, 3796, 2341, 2325, 3775, 3773, 2321, 3746, 3745, 
          3024, 2304, 1085, 3720, 2289, 2277, 3697, 3695, 2272, 2259, 3671, 
          3669, 2254, 987, 3644, 2236, 2218, 3631, 2220}], 
         Line[{2362, 2351, 3802, 2343, 2331, 3782, 3780, 2323, 3753, 3752, 
          3027, 2307, 3729, 3018, 3726, 2291, 3706, 3007, 3701, 2275, 3678, 
          3677, 2998, 2257, 3653, 2991, 3650, 2239, 2222, 3633, 2223}], 
         Line[{2364, 3046, 3787, 2347, 3761, 3760, 2337, 2326, 3032, 3733, 
          3731, 2309, 3736, 3020, 3708, 2293, 3012, 3684, 3682, 2278, 3003, 
          3657, 3655, 2260, 1005, 3635, 2241, 2986, 3630, 2225}], 
         Line[{2367, 3048, 3807, 2349, 3042, 3794, 3792, 2329, 3035, 3770, 
          3768, 2312, 3741, 3740, 2306, 2296, 3015, 3717, 3715, 2280, 3691, 
          3690, 2274, 2263, 3665, 3664, 2256, 2244, 2987, 3640, 2227}], 
         Line[{2369, 3809, 2366, 2353, 3044, 3800, 3798, 2332, 3777, 3776, 
          2328, 2314, 3750, 3026, 3748, 2298, 3722, 3721, 2295, 2282, 1055, 
          3698, 2265, 3674, 2997, 3672, 2246, 2989, 3645, 2229}], 
         Line[{2371, 3051, 3811, 2356, 3805, 3804, 2355, 2334, 3039, 3784, 
          3783, 2317, 3756, 3755, 2316, 2300, 1097, 3727, 2285, 3704, 3703, 
          2284, 2268, 3648, 3000, 3680, 2249, 3651, 2248, 2231}], 
         Line[{245, 1201, 254, 1214, 1215, 263, 1240, 1241, 272, 1274, 1275, 
          281, 1308, 1309, 290, 1342, 1343, 299, 1376, 1377, 308, 1408, 317}], 
         Line[{2373, 1199, 2390, 3820, 3055, 3821, 2408, 3843, 3063, 3842, 
          2426, 3869, 3071, 3870, 2443, 3895, 3080, 3894, 2458, 3918, 3089, 
          3919, 2475, 3948, 3100, 3947, 2494, 3973, 2492, 2514}], 
         Line[{2375, 1200, 2391, 1218, 3823, 2409, 3846, 3064, 3847, 2427, 
          3873, 3074, 3872, 2444, 3897, 3083, 3898, 2459, 3923, 3092, 3922, 
          2476, 3950, 3103, 3951, 2495, 3975, 2496, 2515}], 
         Line[{2377, 3053, 3816, 2393, 3058, 3826, 3827, 2411, 3854, 3066, 
          3852, 2429, 3880, 3076, 3878, 2446, 1322, 3903, 2461, 3928, 3095, 
          3931, 2478, 3958, 3106, 3956, 2498, 3981, 2502, 2517}], 
         Line[{2380, 3054, 3818, 2396, 3060, 3836, 3838, 2414, 3865, 3069, 
          3863, 2432, 3886, 3078, 3891, 2448, 3087, 3912, 3914, 2464, 3943, 
          3098, 3938, 2480, 3965, 3108, 3970, 2500, 3987, 2508, 2519}], 
         Line[{2382, 2389, 3822, 2398, 2407, 3844, 3845, 2417, 3840, 3072, 
          3871, 2435, 3867, 3081, 3896, 2450, 3893, 3091, 3921, 2466, 3916, 
          3101, 3949, 2483, 3974, 3110, 3946, 2504, 3972, 3117, 2521}], 
         Line[{2384, 2394, 3825, 2401, 3851, 3065, 3850, 2420, 3877, 3075, 
          3876, 2437, 3900, 3084, 3902, 2453, 3927, 3093, 3926, 2469, 3953, 
          3104, 3955, 2486, 3977, 3111, 3979, 2506, 3992, 3119, 2524}], 
         Line[{2386, 2399, 3830, 2403, 2418, 3857, 3859, 2422, 1292, 3883, 
          2439, 3908, 3086, 3907, 2455, 2467, 3933, 3935, 2471, 3963, 3107, 
          3962, 2489, 3983, 3113, 3985, 2510, 3994, 3120, 2526}], 
         Line[{2388, 3813, 3062, 2406, 2423, 3831, 3833, 2425, 3860, 3079, 
          3889, 2442, 1334, 3884, 2457, 3909, 3099, 3941, 2474, 1402, 3942, 
          2491, 3969, 3115, 3990, 2513, 3996, 3122, 2528}], 
         Line[{2516, 2501, 3980, 2497, 2481, 3959, 3957, 2477, 3930, 3929, 
          3094, 2460, 1323, 3904, 2445, 2433, 3881, 3879, 2428, 2415, 3855, 
          3853, 2410, 1225, 3828, 2392, 2374, 3815, 2376}], 
         Line[{2518, 2507, 3986, 2499, 2487, 3966, 3964, 2479, 3937, 3936, 
          3097, 2463, 3913, 3088, 3910, 2447, 3890, 3077, 3885, 2431, 3862, 
          3861, 3068, 2413, 3837, 3061, 3834, 2395, 2378, 3817, 2379}], 
         Line[{2520, 3116, 3971, 2503, 3945, 3944, 2493, 2482, 3102, 3917, 
          3915, 2465, 3920, 3090, 3892, 2449, 3082, 3868, 3866, 2434, 3073, 
          3841, 3839, 2416, 1243, 3819, 2397, 3056, 3814, 2381}], 
         Line[{2523, 3118, 3991, 2505, 3112, 3978, 3976, 2485, 3105, 3954, 
          3952, 2468, 3925, 3924, 2462, 2452, 3085, 3901, 3899, 2436, 3875, 
          3874, 2430, 2419, 3849, 3848, 2412, 2400, 3057, 3824, 2383}], 
         Line[{2525, 3993, 2522, 2509, 3114, 3984, 3982, 2488, 3961, 3960, 
          2484, 2470, 3934, 3096, 3932, 2454, 3906, 3905, 2451, 2438, 1293, 
          3882, 2421, 3858, 3067, 3856, 2402, 3059, 3829, 2385}], 
         Line[{2527, 3121, 3995, 2512, 3989, 3988, 2511, 2490, 3109, 3968, 
          3967, 2473, 3940, 3939, 2472, 2456, 1335, 3911, 2441, 3888, 3887, 
          2440, 2424, 3832, 3070, 3864, 2405, 3835, 2404, 2387}], 
         Line[{326, 1439, 335, 1452, 1453, 344, 1478, 1479, 353, 1512, 1513, 
          362, 1546, 1547, 370, 1576, 1577, 379, 1610, 1611, 388, 1642, 397}], 
         Line[{2529, 1437, 2546, 4004, 3125, 4005, 2564, 4027, 3133, 4026, 
          2582, 4051, 3141, 4052, 2599, 4079, 3152, 4078, 2615, 4077, 3158, 
          4100, 2632, 4132, 3169, 4131, 2651, 4157, 2649, 2671}], 
         Line[{2531, 1438, 2547, 1456, 4007, 2565, 4030, 3134, 4031, 2583, 
          4055, 3144, 4054, 2600, 4083, 3155, 4084, 2616, 4107, 3161, 4106, 
          2633, 4134, 3172, 4135, 2652, 4159, 2653, 2672}], 
         Line[{2533, 3123, 4000, 2549, 3128, 4010, 4011, 2567, 4038, 3136, 
          4036, 2585, 4062, 3146, 4060, 2602, 1560, 4089, 2618, 4112, 3164, 
          4115, 2635, 4142, 3175, 4140, 2655, 4165, 2659, 2674}], 
         Line[{2536, 3124, 4002, 2552, 3130, 4020, 4022, 2570, 4049, 3139, 
          4047, 2588, 4068, 3148, 4074, 2605, 4101, 3157, 4096, 2621, 4127, 
          3167, 4122, 2637, 4149, 3177, 4154, 2657, 4171, 2665, 2676}], 
         Line[{2538, 2545, 4006, 2554, 2563, 4028, 4029, 2573, 4024, 3142, 
          4053, 2591, 4050, 3150, 4076, 2607, 4103, 3160, 4105, 2623, 4098, 
          3170, 4133, 2640, 4158, 3179, 4130, 2661, 4156, 3186, 2678}], 
         Line[{2540, 2550, 4009, 2557, 4035, 3135, 4034, 2576, 4059, 3145, 
          4058, 2593, 4081, 3153, 4085, 2609, 4111, 3162, 4110, 2626, 4137, 
          3173, 4139, 2643, 4161, 3180, 4163, 2663, 4176, 3188, 2681}], 
         Line[{2542, 2555, 4014, 2559, 2574, 4041, 4043, 2578, 1530, 4065, 
          2595, 4091, 3156, 4088, 2611, 2624, 4117, 4119, 2628, 4147, 3176, 
          4146, 2646, 4167, 3182, 4169, 2667, 4178, 3189, 2683}], 
         Line[{2544, 3997, 3132, 2562, 2579, 4015, 4017, 2581, 4044, 3151, 
          4071, 2598, 1566, 4066, 2614, 4093, 3168, 4125, 2631, 1636, 4126, 
          2648, 4153, 3184, 4174, 2670, 4180, 3191, 2685}], 
         Line[{2673, 2658, 4164, 2654, 2638, 4143, 4141, 2634, 4114, 4113, 
          3163, 2617, 1561, 4090, 2601, 2589, 4063, 4061, 2584, 2571, 4039, 
          4037, 2566, 1463, 4012, 2548, 2530, 3999, 2532}], 
         Line[{2675, 2664, 4170, 2656, 2644, 4150, 4148, 2636, 4121, 4120, 
          3166, 2620, 4095, 4094, 2612, 2604, 4073, 3147, 4067, 2587, 4046, 
          4045, 3138, 2569, 4021, 3131, 4018, 2551, 2534, 4001, 2535}], 
         Line[{2677, 3185, 4155, 2660, 4129, 4128, 2650, 2639, 3171, 4099, 
          4097, 2622, 4104, 3159, 4102, 2606, 4075, 4072, 3149, 2590, 3143, 
          4025, 4023, 2572, 1481, 4003, 2553, 3126, 3998, 2537}], 
         Line[{2680, 3187, 4175, 2662, 3181, 4162, 4160, 2642, 3174, 4138, 
          4136, 2625, 4109, 4108, 2619, 2608, 3154, 4082, 4080, 2592, 4057, 
          4056, 2586, 2575, 4033, 4032, 2568, 2556, 3127, 4008, 2539}], 
         Line[{2682, 4177, 2679, 2666, 3183, 4168, 4166, 2645, 4145, 4144, 
          2641, 2627, 4118, 3165, 4116, 2610, 4087, 4086, 2603, 2594, 1531, 
          4064, 2577, 4042, 3137, 4040, 2558, 3129, 4013, 2541}], 
         Line[{2684, 3190, 4179, 2669, 4173, 4172, 2668, 2647, 3178, 4152, 
          4151, 2630, 4124, 4123, 2629, 2613, 1567, 4092, 2597, 4070, 4069, 
          2596, 2580, 4016, 3140, 4048, 2561, 4019, 2560, 2543}], 
         Line[{406, 1673, 415, 1686, 1687, 424, 1712, 1713, 433, 1746, 1747, 
          442, 1780, 1781, 450, 1810, 1811, 459, 1844, 1845, 468, 1876, 477}], 
         Line[{2686, 1671, 2703, 4188, 3194, 4189, 2721, 4211, 3202, 4210, 
          2739, 4235, 3210, 4236, 2756, 4263, 3221, 4262, 2772, 4261, 3227, 
          4284, 2789, 4316, 3238, 4315, 2808, 4341, 2806, 2828}], 
         Line[{2688, 1672, 2704, 1690, 4191, 2722, 4214, 3203, 4215, 2740, 
          4239, 3213, 4238, 2757, 4267, 3224, 4268, 2773, 4291, 3230, 4290, 
          2790, 4318, 3241, 4319, 2809, 4343, 2810, 2829}], 
         Line[{2690, 3192, 4184, 2706, 3197, 4194, 4195, 2724, 4222, 3205, 
          4220, 2742, 4246, 3215, 4244, 2759, 1794, 4273, 2775, 4296, 3233, 
          4299, 2792, 4326, 3244, 4324, 2812, 4349, 2816, 2831}], 
         Line[{2693, 3193, 4186, 2709, 3199, 4204, 4206, 2727, 4233, 3208, 
          4231, 2745, 4252, 3217, 4258, 2762, 4285, 3226, 4280, 2778, 4311, 
          3236, 4306, 2794, 4333, 3246, 4338, 2814, 4355, 2822, 2833}], 
         Line[{2695, 2702, 4190, 2711, 2720, 4212, 4213, 2730, 4208, 3211, 
          4237, 2748, 4234, 3219, 4260, 2764, 4287, 3229, 4289, 2780, 4282, 
          3239, 4317, 2797, 4342, 3248, 4314, 2818, 4340, 3255, 2835}], 
         Line[{2697, 2707, 4193, 2714, 4219, 3204, 4218, 2733, 4243, 3214, 
          4242, 2750, 4265, 3222, 4269, 2766, 4295, 3231, 4294, 2783, 4321, 
          3242, 4323, 2800, 4345, 3249, 4347, 2820, 4360, 3257, 2838}], 
         Line[{2699, 2712, 4198, 2716, 2731, 4225, 4227, 2735, 1764, 4249, 
          2752, 4275, 3225, 4272, 2768, 2781, 4301, 4303, 2785, 4331, 3245, 
          4330, 2803, 4351, 3251, 4353, 2824, 4362, 3258, 2840}], 
         Line[{2701, 4181, 3201, 2719, 2736, 4199, 4201, 2738, 4228, 3220, 
          4255, 2755, 1800, 4250, 2771, 4277, 3237, 4309, 2788, 1870, 4310, 
          2805, 4337, 3253, 4358, 2827, 4364, 3260, 2842}], 
         Line[{2830, 2815, 4348, 2811, 2795, 4327, 4325, 2791, 4298, 4297, 
          3232, 2774, 1795, 4274, 2758, 2746, 4247, 4245, 2741, 2728, 4223, 
          4221, 2723, 1697, 4196, 2705, 2687, 4183, 2689}], 
         Line[{2832, 2821, 4354, 2813, 2801, 4334, 4332, 2793, 4305, 4304, 
          3235, 2777, 4279, 4278, 2769, 2761, 4257, 3216, 4251, 2744, 4230, 
          4229, 3207, 2726, 4205, 3200, 4202, 2708, 2691, 4185, 2692}], 
         Line[{2834, 3254, 4339, 2817, 4313, 4312, 2807, 2796, 3240, 4283, 
          4281, 2779, 4288, 3228, 4286, 2763, 4259, 4256, 3218, 2747, 3212, 
          4209, 4207, 2729, 1715, 4187, 2710, 3195, 4182, 2694}], 
         Line[{2837, 3256, 4359, 2819, 3250, 4346, 4344, 2799, 3243, 4322, 
          4320, 2782, 4293, 4292, 2776, 2765, 3223, 4266, 4264, 2749, 4241, 
          4240, 2743, 2732, 4217, 4216, 2725, 2713, 3196, 4192, 2696}], 
         Line[{2839, 4361, 2836, 2823, 3252, 4352, 4350, 2802, 4329, 4328, 
          2798, 2784, 4302, 3234, 4300, 2767, 4271, 4270, 2760, 2751, 1765, 
          4248, 2734, 4226, 3206, 4224, 2715, 3198, 4197, 2698}], 
         Line[{2841, 3259, 4363, 2826, 4357, 4356, 2825, 2804, 3247, 4336, 
          4335, 2787, 4308, 4307, 2786, 2770, 1801, 4276, 2754, 4254, 4253, 
          2753, 2737, 4200, 3209, 4232, 2718, 4203, 2717, 2700}]}, {
         Line[{489, 3390, 689, 3416, 683, 681, 3410, 3409, 675, 3403, 673, 
          3402, 667, 3397, 665, 3365, 653, 651, 3386, 3385, 645, 643, 3379, 
          3378, 637, 3370, 635, 629, 625, 3367, 661}], 
         Line[{496, 655, 3389, 3388, 649, 3383, 3382, 647, 641, 639, 3374, 
          3373, 633, 3369, 3368, 631, 619, 3362, 3361, 617, 611, 3351, 609, 
          603, 601, 3346, 595, 3342, 591, 627}], 
         Line[{499, 485, 487, 486, 490, 3263, 491, 3264, 492, 3265, 493, 3266,
           494, 3262, 502, 3270, 503, 3272, 508, 3273, 509, 3277, 514, 3278, 
          515, 3283, 520, 3261, 521}], 
         Line[{18, 1938, 1937, 17, 1935, 1934, 16, 1933, 1932, 15, 1930, 1929,
           14, 1928, 1927, 13, 1925, 1924, 12, 1923, 11, 1922, 10}], 
         Line[{524, 497, 3268, 500, 504, 506, 3276, 510, 3274, 512, 3282, 516,
           3284, 518, 3267, 528, 3292, 530, 3296, 536, 3299, 538, 3304, 544, 
          3305, 546, 3312, 552, 3279, 554}], 
         Line[{555, 3281, 3280, 553, 547, 3307, 3306, 545, 539, 537, 3298, 
          3297, 531, 3293, 529, 519, 3286, 3285, 517, 513, 3275, 511, 507, 
          3271, 505, 501, 498, 3269, 525}], 
         Line[{558, 3291, 522, 526, 532, 3294, 534, 3301, 3302, 540, 542, 
          3309, 548, 3313, 550, 3287, 3288, 562, 564, 3322, 570, 3325, 572, 
          3330, 578, 580, 3335, 586, 3308, 588}], 
         Line[{589, 587, 3337, 3336, 581, 3331, 579, 573, 571, 3324, 3323, 
          565, 3319, 563, 3289, 551, 549, 3311, 3310, 543, 3300, 541, 3303, 
          535, 533, 3295, 527, 3290, 523, 559}], 
         Line[{592, 556, 3317, 560, 3321, 566, 568, 3327, 3328, 574, 576, 
          3333, 3334, 582, 584, 3314, 3315, 596, 598, 3347, 3348, 604, 606, 
          3353, 612, 3356, 614, 3359, 620, 622}], 
         Line[{623, 3332, 621, 615, 613, 3355, 3354, 607, 3350, 605, 3349, 
          599, 3344, 597, 3316, 585, 3339, 3338, 583, 577, 3326, 575, 3329, 
          569, 3320, 567, 561, 557, 3318, 593}], 
         Line[{626, 3343, 590, 594, 600, 3345, 602, 3352, 608, 610, 3358, 616,
           3360, 618, 3340, 3341, 630, 632, 3372, 638, 3375, 640, 3380, 646, 
          3381, 648, 3387, 654, 3357, 495}], 
         Line[{657, 714, 3438, 3437, 710, 3433, 708, 3432, 704, 3427, 702, 
          3426, 698, 696, 3394, 3393, 687, 3418, 685, 3414, 679, 3404, 677, 
          3407, 671, 669, 3399, 663, 3395, 659, 693}], 
         Line[{660, 624, 3366, 628, 3371, 634, 636, 3377, 642, 3376, 644, 
          3384, 650, 3391, 652, 3363, 3364, 664, 666, 3400, 3401, 672, 674, 
          3408, 680, 3411, 682, 3415, 688, 488}], 
         Line[{690, 722, 3444, 3443, 721, 3442, 720, 3441, 719, 718, 3440, 
          3439, 717, 716, 3420, 3419, 712, 711, 3435, 3434, 706, 705, 3429, 
          3428, 700, 699, 3423, 694, 3421, 691, 715}], 
         Line[{692, 3396, 658, 662, 668, 3398, 670, 3405, 3406, 676, 678, 
          3412, 3413, 684, 686, 3392, 695, 3422, 697, 3424, 3425, 701, 703, 
          3430, 3431, 707, 709, 3436, 713, 3417, 656}], 
         Line[{727, 3574, 927, 3600, 921, 919, 3594, 3593, 913, 3587, 911, 
          3586, 905, 3581, 903, 3549, 891, 889, 3570, 3569, 883, 881, 3563, 
          3562, 875, 3554, 873, 867, 863, 3551, 899}], 
         Line[{734, 893, 3573, 3572, 887, 3567, 3566, 885, 879, 877, 3558, 
          3557, 871, 3553, 3552, 869, 857, 3546, 3545, 855, 849, 3535, 847, 
          841, 839, 3530, 833, 3526, 829, 865}], 
         Line[{737, 723, 725, 724, 728, 3447, 729, 3448, 730, 3449, 731, 3450,
           732, 3446, 740, 3454, 741, 3456, 746, 3457, 747, 3461, 752, 3462, 
          753, 3467, 758, 3445, 759}], 
         Line[{99, 2094, 2093, 98, 2091, 2090, 97, 2089, 2088, 96, 2086, 2085,
           95, 2084, 2083, 94, 2081, 2080, 93, 2079, 92, 2078, 91}], 
         Line[{762, 735, 3452, 738, 742, 744, 3460, 748, 3458, 750, 3466, 754,
           3468, 756, 3451, 766, 3476, 768, 3480, 774, 3483, 776, 3488, 782, 
          3489, 784, 3496, 790, 3463, 792}], 
         Line[{793, 3465, 3464, 791, 785, 3491, 3490, 783, 777, 775, 3482, 
          3481, 769, 3477, 767, 757, 3470, 3469, 755, 751, 3459, 749, 745, 
          3455, 743, 739, 736, 3453, 763}], 
         Line[{796, 3475, 760, 764, 770, 3478, 772, 3485, 3486, 778, 780, 
          3493, 786, 3497, 788, 3471, 3472, 800, 802, 3506, 808, 3509, 810, 
          3514, 816, 818, 3519, 824, 3492, 826}], 
         Line[{827, 825, 3521, 3520, 819, 3515, 817, 811, 809, 3508, 3507, 
          803, 3503, 801, 3473, 789, 787, 3495, 3494, 781, 3484, 779, 3487, 
          773, 771, 3479, 765, 3474, 761, 797}], 
         Line[{830, 794, 3501, 798, 3505, 804, 806, 3511, 3512, 812, 814, 
          3517, 3518, 820, 822, 3498, 3499, 834, 836, 3531, 3532, 842, 844, 
          3537, 850, 3540, 852, 3543, 858, 860}], 
         Line[{861, 3516, 859, 853, 851, 3539, 3538, 845, 3534, 843, 3533, 
          837, 3528, 835, 3500, 823, 3523, 3522, 821, 815, 3510, 813, 3513, 
          807, 3504, 805, 799, 795, 3502, 831}], 
         Line[{864, 3527, 828, 832, 838, 3529, 840, 3536, 846, 848, 3542, 854,
           3544, 856, 3524, 3525, 868, 870, 3556, 876, 3559, 878, 3564, 884, 
          3565, 886, 3571, 892, 3541, 733}], 
         Line[{895, 952, 3622, 3621, 948, 3617, 946, 3616, 942, 3611, 940, 
          3610, 936, 934, 3578, 3577, 925, 3602, 923, 3598, 917, 3588, 915, 
          3591, 909, 907, 3583, 901, 3579, 897, 931}], 
         Line[{898, 862, 3550, 866, 3555, 872, 874, 3561, 880, 3560, 882, 
          3568, 888, 3575, 890, 3547, 3548, 902, 904, 3584, 3585, 910, 912, 
          3592, 918, 3595, 920, 3599, 926, 726}], 
         Line[{928, 960, 3628, 3627, 959, 3626, 958, 3625, 957, 956, 3624, 
          3623, 955, 954, 3604, 3603, 950, 949, 3619, 3618, 944, 943, 3613, 
          3612, 938, 937, 3607, 932, 3605, 929, 953}], 
         Line[{930, 3580, 896, 900, 906, 3582, 908, 3589, 3590, 914, 916, 
          3596, 3597, 922, 924, 3576, 933, 3606, 935, 3608, 3609, 939, 941, 
          3614, 3615, 945, 947, 3620, 951, 3601, 894}], 
         Line[{965, 3758, 1165, 3784, 1159, 1157, 3778, 3777, 1151, 3771, 
          1149, 3770, 1143, 3765, 1141, 3733, 1129, 1127, 3754, 3753, 1121, 
          1119, 3747, 3746, 1113, 3738, 1111, 1105, 1101, 3735, 1137}], 
         Line[{972, 1131, 3757, 3756, 1125, 3751, 3750, 1123, 1117, 1115, 
          3742, 3741, 1109, 3737, 3736, 1107, 1095, 3730, 3729, 1093, 1087, 
          3719, 1085, 1079, 1077, 3714, 1071, 3710, 1067, 1103}], 
         Line[{975, 961, 963, 962, 966, 3631, 967, 3632, 968, 3633, 969, 3634,
           970, 3630, 978, 3638, 979, 3640, 984, 3641, 985, 3645, 990, 3646, 
          991, 3651, 996, 3629, 997}], 
         Line[{180, 2250, 2249, 179, 2247, 2246, 178, 2245, 2244, 177, 2242, 
          2241, 176, 2240, 2239, 175, 2237, 2236, 174, 2235, 173, 2234, 172}], 
         Line[{1000, 973, 3636, 976, 980, 982, 3644, 986, 3642, 988, 3650, 
          992, 3652, 994, 3635, 1004, 3660, 1006, 3664, 1012, 3667, 1014, 
          3672, 1020, 3673, 1022, 3680, 1028, 3647, 1030}], 
         Line[{1031, 3649, 3648, 1029, 1023, 3675, 3674, 1021, 1015, 1013, 
          3666, 3665, 1007, 3661, 1005, 995, 3654, 3653, 993, 989, 3643, 987, 
          983, 3639, 981, 977, 974, 3637, 1001}], 
         Line[{1034, 3659, 998, 1002, 1008, 3662, 1010, 3669, 3670, 1016, 
          1018, 3677, 1024, 3681, 1026, 3655, 3656, 1038, 1040, 3690, 1046, 
          3693, 1048, 3698, 1054, 1056, 3703, 1062, 3676, 1064}], 
         Line[{1065, 1063, 3705, 3704, 1057, 3699, 1055, 1049, 1047, 3692, 
          3691, 1041, 3687, 1039, 3657, 1027, 1025, 3679, 3678, 1019, 3668, 
          1017, 3671, 1011, 1009, 3663, 1003, 3658, 999, 1035}], 
         Line[{1068, 1032, 3685, 1036, 3689, 1042, 1044, 3695, 3696, 1050, 
          1052, 3701, 3702, 1058, 1060, 3682, 3683, 1072, 1074, 3715, 3716, 
          1080, 1082, 3721, 1088, 3724, 1090, 3727, 1096, 1098}], 
         Line[{1099, 3700, 1097, 1091, 1089, 3723, 3722, 1083, 3718, 1081, 
          3717, 1075, 3712, 1073, 3684, 1061, 3707, 3706, 1059, 1053, 3694, 
          1051, 3697, 1045, 3688, 1043, 1037, 1033, 3686, 1069}], 
         Line[{1102, 3711, 1066, 1070, 1076, 3713, 1078, 3720, 1084, 1086, 
          3726, 1092, 3728, 1094, 3708, 3709, 1106, 1108, 3740, 1114, 3743, 
          1116, 3748, 1122, 3749, 1124, 3755, 1130, 3725, 971}], 
         Line[{1133, 1190, 3806, 3805, 1186, 3801, 1184, 3800, 1180, 3795, 
          1178, 3794, 1174, 1172, 3762, 3761, 1163, 3786, 1161, 3782, 1155, 
          3772, 1153, 3775, 1147, 1145, 3767, 1139, 3763, 1135, 1169}], 
         Line[{1136, 1100, 3734, 1104, 3739, 1110, 1112, 3745, 1118, 3744, 
          1120, 3752, 1126, 3759, 1128, 3731, 3732, 1140, 1142, 3768, 3769, 
          1148, 1150, 3776, 1156, 3779, 1158, 3783, 1164, 964}], 
         Line[{1166, 1198, 3812, 3811, 1197, 3810, 1196, 3809, 1195, 1194, 
          3808, 3807, 1193, 1192, 3788, 3787, 1188, 1187, 3803, 3802, 1182, 
          1181, 3797, 3796, 1176, 1175, 3791, 1170, 3789, 1167, 1191}], 
         Line[{1168, 3764, 1134, 1138, 1144, 3766, 1146, 3773, 3774, 1152, 
          1154, 3780, 3781, 1160, 1162, 3760, 1171, 3790, 1173, 3792, 3793, 
          1177, 1179, 3798, 3799, 1183, 1185, 3804, 1189, 3785, 1132}], 
         Line[{1203, 3942, 1403, 3968, 1397, 1395, 3962, 3961, 1389, 3955, 
          1387, 3954, 1381, 3949, 1379, 3917, 1367, 1365, 3938, 3937, 1359, 
          1357, 3931, 3930, 1351, 3922, 1349, 1343, 1339, 3919, 1375}], 
         Line[{1210, 1369, 3941, 3940, 1363, 3935, 3934, 1361, 1355, 1353, 
          3926, 3925, 1347, 3921, 3920, 1345, 1333, 3914, 3913, 1331, 1325, 
          3903, 1323, 1317, 1315, 3898, 1309, 3894, 1305, 1341}], 
         Line[{1213, 1199, 1201, 1200, 1204, 3815, 1205, 3816, 1206, 3817, 
          1207, 3818, 1208, 3814, 1216, 3822, 1217, 3824, 1222, 3825, 1223, 
          3829, 1228, 3830, 1229, 3835, 1234, 3813, 1235}], 
         Line[{261, 2406, 2405, 260, 2403, 2402, 259, 2401, 2400, 258, 2398, 
          2397, 257, 2396, 2395, 256, 2393, 2392, 255, 2391, 254, 2390, 253}], 
         Line[{1238, 1211, 3820, 1214, 1218, 1220, 3828, 1224, 3826, 1226, 
          3834, 1230, 3836, 1232, 3819, 1242, 3844, 1244, 3848, 1250, 3851, 
          1252, 3856, 1258, 3857, 1260, 3864, 1266, 3831, 1268}], 
         Line[{1269, 3833, 3832, 1267, 1261, 3859, 3858, 1259, 1253, 1251, 
          3850, 3849, 1245, 3845, 1243, 1233, 3838, 3837, 1231, 1227, 3827, 
          1225, 1221, 3823, 1219, 1215, 1212, 3821, 1239}], 
         Line[{1272, 3843, 1236, 1240, 1246, 3846, 1248, 3853, 3854, 1254, 
          1256, 3861, 1262, 3865, 1264, 3839, 3840, 1276, 1278, 3874, 1284, 
          3877, 1286, 3882, 1292, 1294, 3887, 1300, 3860, 1302}], 
         Line[{1303, 1301, 3889, 3888, 1295, 3883, 1293, 1287, 1285, 3876, 
          3875, 1279, 3871, 1277, 3841, 1265, 1263, 3863, 3862, 1257, 3852, 
          1255, 3855, 1249, 1247, 3847, 1241, 3842, 1237, 1273}], 
         Line[{1306, 1270, 3869, 1274, 3873, 1280, 1282, 3879, 3880, 1288, 
          1290, 3885, 3886, 1296, 1298, 3866, 3867, 1310, 1312, 3899, 3900, 
          1318, 1320, 3905, 1326, 3908, 1328, 3911, 1334, 1336}], 
         Line[{1337, 3884, 1335, 1329, 1327, 3907, 3906, 1321, 3902, 1319, 
          3901, 1313, 3896, 1311, 3868, 1299, 3891, 3890, 1297, 1291, 3878, 
          1289, 3881, 1283, 3872, 1281, 1275, 1271, 3870, 1307}], 
         Line[{1340, 3895, 1304, 1308, 1314, 3897, 1316, 3904, 1322, 1324, 
          3910, 1330, 3912, 1332, 3892, 3893, 1344, 1346, 3924, 1352, 3927, 
          1354, 3932, 1360, 3933, 1362, 3939, 1368, 3909, 1209}], 
         Line[{1371, 1428, 3990, 3989, 1424, 3985, 1422, 3984, 1418, 3979, 
          1416, 3978, 1412, 1410, 3946, 3945, 1401, 3970, 1399, 3966, 1393, 
          3956, 1391, 3959, 1385, 1383, 3951, 1377, 3947, 1373, 1407}], 
         Line[{1374, 1338, 3918, 1342, 3923, 1348, 1350, 3929, 1356, 3928, 
          1358, 3936, 1364, 3943, 1366, 3915, 3916, 1378, 1380, 3952, 3953, 
          1386, 1388, 3960, 1394, 3963, 1396, 3967, 1402, 1202}], 
         Line[{1404, 1436, 3996, 3995, 1435, 3994, 1434, 3993, 1433, 1432, 
          3992, 3991, 1431, 1430, 3972, 3971, 1426, 1425, 3987, 3986, 1420, 
          1419, 3981, 3980, 1414, 1413, 3975, 1408, 3973, 1405, 1429}], 
         Line[{1406, 3948, 1372, 1376, 1382, 3950, 1384, 3957, 3958, 1390, 
          1392, 3964, 3965, 1398, 1400, 3944, 1409, 3974, 1411, 3976, 3977, 
          1415, 1417, 3982, 3983, 1421, 1423, 3988, 1427, 3969, 1370}], 
         Line[{1441, 4126, 1637, 4152, 1631, 1629, 4146, 4145, 1623, 4139, 
          1621, 4138, 1615, 4133, 1613, 4099, 1601, 1599, 4122, 4121, 1593, 
          1591, 4115, 4114, 1585, 4106, 1583, 1577, 1573, 4100, 1609}], 
         Line[{1448, 1603, 4125, 4124, 1597, 4119, 4118, 1595, 1589, 1587, 
          4110, 4109, 1581, 4105, 4104, 1579, 1569, 4096, 4095, 1563, 4089, 
          1561, 1555, 1553, 4084, 1547, 4078, 1543, 1575}], 
         Line[{1451, 1437, 1439, 1438, 1442, 3999, 1443, 4000, 1444, 4001, 
          1445, 4002, 1446, 3998, 1454, 4006, 1455, 4008, 1460, 4009, 1461, 
          4013, 1466, 4014, 1467, 4019, 1472, 3997, 1473}], 
         Line[{342, 2562, 2561, 341, 2559, 2558, 340, 2557, 2556, 339, 2554, 
          2553, 338, 2552, 2551, 337, 2549, 2548, 336, 2547, 335, 2546, 334}], 
         Line[{1476, 1449, 4004, 1452, 1456, 1458, 4012, 1462, 4010, 1464, 
          4018, 1468, 4020, 1470, 4003, 1480, 4028, 1482, 4032, 1488, 4035, 
          1490, 4040, 1496, 4041, 1498, 4048, 1504, 4015, 1506}], 
         Line[{1507, 4017, 4016, 1505, 1499, 4043, 4042, 1497, 1491, 1489, 
          4034, 4033, 1483, 4029, 1481, 1471, 4022, 4021, 1469, 1465, 4011, 
          1463, 1459, 4007, 1457, 1453, 1450, 4005, 1477}], 
         Line[{1510, 4027, 1474, 1478, 1484, 4030, 1486, 4037, 4038, 1492, 
          1494, 4045, 1500, 4049, 1502, 4023, 4024, 1514, 1516, 4056, 1522, 
          4059, 1524, 4064, 1530, 1532, 4069, 1538, 4044, 1540}], 
         Line[{1541, 1539, 4071, 4070, 1533, 4065, 1531, 1525, 1523, 4058, 
          4057, 1517, 4053, 1515, 4025, 1503, 1501, 4047, 4046, 1495, 4036, 
          1493, 4039, 1487, 1485, 4031, 1479, 4026, 1475, 1511}], 
         Line[{1544, 1508, 4051, 1512, 4055, 1518, 1520, 4061, 4062, 1526, 
          1528, 4067, 4068, 1534, 4072, 1536, 4050, 1548, 4080, 4081, 1550, 
          1556, 4086, 1558, 4091, 1564, 4092, 1566, 1570}], 
         Line[{1571, 4066, 1567, 1565, 1559, 4088, 4087, 1557, 4085, 1551, 
          4082, 1549, 1537, 4076, 4075, 4074, 4073, 1535, 1529, 4060, 1527, 
          4063, 1521, 4054, 1519, 1513, 1509, 4052, 1545}], 
         Line[{1574, 4079, 1542, 1546, 1552, 4083, 1554, 4090, 1560, 1562, 
          4094, 1568, 4101, 4102, 4103, 1578, 1580, 4108, 1586, 4111, 1588, 
          4116, 1594, 4117, 1596, 4123, 1602, 4093, 1447}], 
         Line[{1605, 1662, 4174, 4173, 1658, 4169, 1656, 4168, 1652, 4163, 
          1650, 4162, 1646, 1644, 4130, 4129, 1635, 4154, 1633, 4150, 1627, 
          4140, 1625, 4143, 1619, 1617, 4135, 1611, 4131, 1607, 1641}], 
         Line[{1608, 1572, 4077, 1576, 4107, 1582, 1584, 4113, 1590, 4112, 
          1592, 4120, 1598, 4127, 1600, 4097, 4098, 1612, 1614, 4136, 4137, 
          1620, 1622, 4144, 1628, 4147, 1630, 4151, 1636, 1440}], 
         Line[{1638, 1670, 4180, 4179, 1669, 4178, 1668, 4177, 1667, 1666, 
          4176, 4175, 1665, 1664, 4156, 4155, 1660, 1659, 4171, 4170, 1654, 
          1653, 4165, 4164, 1648, 1647, 4159, 1642, 4157, 1639, 1663}], 
         Line[{1640, 4132, 1606, 1610, 1616, 4134, 1618, 4141, 4142, 1624, 
          1626, 4148, 4149, 1632, 1634, 4128, 1643, 4158, 1645, 4160, 4161, 
          1649, 1651, 4166, 4167, 1655, 1657, 4172, 1661, 4153, 1604}], 
         Line[{1675, 4310, 1871, 4336, 1865, 1863, 4330, 4329, 1857, 4323, 
          1855, 4322, 1849, 4317, 1847, 4283, 1835, 1833, 4306, 4305, 1827, 
          1825, 4299, 4298, 1819, 4290, 1817, 1811, 1807, 4284, 1843}], 
         Line[{1682, 1837, 4309, 4308, 1831, 4303, 4302, 1829, 1823, 1821, 
          4294, 4293, 1815, 4289, 4288, 1813, 1803, 4280, 4279, 1797, 4273, 
          1795, 1789, 1787, 4268, 1781, 4262, 1777, 1809}], 
         Line[{1685, 1671, 1673, 1672, 1676, 4183, 1677, 4184, 1678, 4185, 
          1679, 4186, 1680, 4182, 1688, 4190, 1689, 4192, 1694, 4193, 1695, 
          4197, 1700, 4198, 1701, 4203, 1706, 4181, 1707}], 
         Line[{422, 2719, 2718, 421, 2716, 2715, 420, 2714, 2713, 419, 2711, 
          2710, 418, 2709, 2708, 417, 2706, 2705, 416, 2704, 415, 2703, 414}], 
         Line[{1710, 1683, 4188, 1686, 1690, 1692, 4196, 1696, 4194, 1698, 
          4202, 1702, 4204, 1704, 4187, 1714, 4212, 1716, 4216, 1722, 4219, 
          1724, 4224, 1730, 4225, 1732, 4232, 1738, 4199, 1740}], 
         Line[{1741, 4201, 4200, 1739, 1733, 4227, 4226, 1731, 1725, 1723, 
          4218, 4217, 1717, 4213, 1715, 1705, 4206, 4205, 1703, 1699, 4195, 
          1697, 1693, 4191, 1691, 1687, 1684, 4189, 1711}], 
         Line[{1744, 4211, 1708, 1712, 1718, 4214, 1720, 4221, 4222, 1726, 
          1728, 4229, 1734, 4233, 1736, 4207, 4208, 1748, 1750, 4240, 1756, 
          4243, 1758, 4248, 1764, 1766, 4253, 1772, 4228, 1774}], 
         Line[{1775, 1773, 4255, 4254, 1767, 4249, 1765, 1759, 1757, 4242, 
          4241, 1751, 4237, 1749, 4209, 1737, 1735, 4231, 4230, 1729, 4220, 
          1727, 4223, 1721, 1719, 4215, 1713, 4210, 1709, 1745}], 
         Line[{1778, 1742, 4235, 1746, 4239, 1752, 1754, 4245, 4246, 1760, 
          1762, 4251, 4252, 1768, 4256, 1770, 4234, 1782, 4264, 4265, 1784, 
          1790, 4270, 1792, 4275, 1798, 4276, 1800, 1804}], 
         Line[{1805, 4250, 1801, 1799, 1793, 4272, 4271, 1791, 4269, 1785, 
          4266, 1783, 1771, 4260, 4259, 4258, 4257, 1769, 1763, 4244, 1761, 
          4247, 1755, 4238, 1753, 1747, 1743, 4236, 1779}], 
         Line[{1808, 4263, 1776, 1780, 1786, 4267, 1788, 4274, 1794, 1796, 
          4278, 1802, 4285, 4286, 4287, 1812, 1814, 4292, 1820, 4295, 1822, 
          4300, 1828, 4301, 1830, 4307, 1836, 4277, 1681}], 
         Line[{1839, 1896, 4358, 4357, 1892, 4353, 1890, 4352, 1886, 4347, 
          1884, 4346, 1880, 1878, 4314, 4313, 1869, 4338, 1867, 4334, 1861, 
          4324, 1859, 4327, 1853, 1851, 4319, 1845, 4315, 1841, 1875}], 
         Line[{1842, 1806, 4261, 1810, 4291, 1816, 1818, 4297, 1824, 4296, 
          1826, 4304, 1832, 4311, 1834, 4281, 4282, 1846, 1848, 4320, 4321, 
          1854, 1856, 4328, 1862, 4331, 1864, 4335, 1870, 1674}], 
         Line[{1872, 1904, 4364, 4363, 1903, 4362, 1902, 4361, 1901, 1900, 
          4360, 4359, 1899, 1898, 4340, 4339, 1894, 1893, 4355, 4354, 1888, 
          1887, 4349, 4348, 1882, 1881, 4343, 1876, 4341, 1873, 1897}], 
         Line[{1874, 4316, 1840, 1844, 1850, 4318, 1852, 4325, 4326, 1858, 
          1860, 4332, 4333, 1866, 1868, 4312, 1877, 4342, 1879, 4344, 4345, 
          1883, 1885, 4350, 4351, 1889, 1891, 4356, 1895, 4337, 
          1838}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
v2RKlzZZr5zp+XXRnJdwv2HPYi2JZLzdYn1JjOBMQsSI++x18ei5dmH1wpne
uKtbOvsQmW8SFT9o4jYWP8DET1ncWLxBPBVvwMSbUfVYfKLF3bH4RCY+Dcff
K9Ori8EsG65fXx+5or5FiIcgmde7YvH9++TTUUMw+7jdlli07Cq71Ufw4c5t
t0tN5enoPCXnjMzbYLTdMuGDBJmXkgTX2/o5iVju08QhG+6EEuMsPkkROw91
fph6U8sDzzi+zcHNC4Bn2dTHAeS7IqZj+xfmU/sXmP3rT+130Kb2O7TR+92b
wgf4ROEDMPjgqTGGJ3iawhNk8EQoPoHjHfih6qqqHWvtk3B2V5qUEVl3S6sB
l+8itvhoRmbJgYkB6MSqmzmJ2GP90+jrd3K+4W6Y8+qliBUUxEZ+Gj0/fN7Y
b/7lQAaM/z3jk+/TUNj14UWqK+EFnXk3L3+cmwarFq3mdeoOhW9DInqvh//B
Wyih8BYYvN1O4TP0XR3DZ2Dw+ShrDM/BsngMz5HBcxr/cQeF/8jg/wmBMb5A
iZ4xvkCGL2opfoHpFL8Awy/PKD4CLoqPwInmI5q/IJniL2D4ayrFd3Cd4jtg
+G4yxY/AS/EjMvx4juJTKKD4FBk+pfkXaf5Fhn+XLIyc+0AlDKefX+hueyQV
/Ksmeu4ldhqvtTBd9j4cExJXCrF2pEKZfcFBYTI+7dhBY/4zCTgskTR++0Aq
pBcuaOYgetR6LJVi1NNwIM3m7FT5MPi51Ke4iPg/vDZRUePNJbyUUfNOZtEZ
mHBIcYolwYFOTbybr5mH94J98xUzfdH5jLhwNZlX9QneLYqFGTj+5IZL08h5
spjXXNKL6G9rj70WejMBXz180mdurIdnbNX3uZJ4ezVbt9zteyJGPc7Rqoi5
AAsVrxRMJuPLdgYqXnlpDz17Zi6WD4iHM7x4Oo2MhzaddubqlQfZ30K77Xcm
w8Inmvt6SBwujAVZn2o/nLDx2PXZqeGwrjV1KIKsr/SanlCDr9G4z8Lq9c7l
54H76tdN9mS8YvuBvA0bE5Ansqzs8zx9LJIWH59B9C84t7fiuGkYZjcK1x07
aI3Lpd5EGhH/z/tmpVCUFoLWC8IC/94wxmWTRuLqyPi5vZeuGxh5oQsH/0Nv
U1Nsme1gbkzih3dcj9f2DZG40995914uBzQVttj/inzXQ+TKdOOj6RB6LMv9
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
QSszTglNck8XoOWr2OS/bdv7sPNyPk40fyzqy5WMZzy4hzcQ+X10XVs4W10b
73vHhyYCZVijOc7/8YVM9ND71KBE7k0HaPlINvlV30zKz5L76aBdk9uZkXgM
r5bPeTDwvzq+UjZ7rlPnB+TaPXZ+QOb8oEPX981mq+9b3rRrg+L6IgzfqX7k
1KRwlMoujHhH1reErr+bwlZ/pxjK+/rVhBIsv7VVQvpPHG63zN2x5zULyml5
YTb5aOq8hAf8x85LyJyXOul77h+2e+5D6n4B1X5j9wtg7hdFdF3ba6pOGZk6
5YOv7k0LPJ+B5xqbj7vpJ6PiJM1vsWR95ek6vjS2Or67FH/BJYq/gOEvXbqe
8awHVc/InPeuFzlKPCG4E6TsbT9tMAcDNvg255DzSR1dD9hK1wNOp+sBV9y2
8PiZUIZ/W0709uam4e+24a5csr7VtH/msflH0B2lDs8qxFMS811u+sei+nLZ
7InkvHSQrnN8dYGqc3xL1zlKOfC6bxFLw+16Gqpz16egeeuCO1lkX3TTdYjR
dB3iVboO8dI+R91LO/Jx2ZbCXzKS+Xj6rqqi/CtyPqTlU9jkJwuzqlmz0pAj
7VryykemaNlexQtkP8rQ9kx0/Lc9nqvnXNs1bIdVxoK+LXbJUKhqfDWK8MtK
uh6zm67HZOqp368UeHfi6WWc/t0vz60nDxV3udjzkXPX+/+wZ1jtyMvv8lFo
Y6SzsNQwAfuPiqe6EHv46PrKbnWqvvInXV85oCWuuP+vN7q+fZWVKeEFFovF
nXtG442uA73PVge6lLqfwlHqfgrM/bSXln/CJv/H/8/NbSudsO/HcY7jwWfx
w/GrfwtInAjQ9vxls6evqaSm8HcoKEw56qucFQ9tbk4L9Ij+j3QdKBdbHagb
dR8H+j4OzH385X/YE0rleVCAyvMgk+fRoPIA2ELlAZDJAxRS9x1Mou47yNx3
ttL7JYltv3TEOzy1jQzFQ0Zcge9mFODa53ITvUnczuGbZbB6agAkaFrqrneN
gF9yUvwnyH5sputYP7PVsQb9+uN1k9yHo4dsNIyWpsBuufIV4sQ/N2j5r2zy
QieCK4uNvLDp1PO9CkczsKvwj+BxYn/IsoOzQ06mg4FlYL3pMXus4bvScYjc
4y4Kb7KwnVEErSfvTussKILLmb8vziX7sYPWz2n8b/13qLwT3KDyTsDknb7S
9bZJbPW2oRtzG0pvlkCVdklf74MImOS/yCyC7KMf6kndJrZVcNj1j0BeaQrU
WSytNCP3LBsqDwY2VB4MmDzYAK0/iE1/JZWXgw4qLwdMXk6crvPlZ6vzJfCe
OTL5Kiy6vCc3V6gI2s3/wIc8wke1Zb/S3teCX31DzKKiAmhIUTuJNYQfqfwh
cMmM5Q+ByR9O7aRwtZ8NV2dS+SIUofJFyOSLtOo/6Hp11ICgoOpeSfE8OGS6
oZ2vkQUua3aHLOMvA2/HD2FGnenQaTQUZdlDzvNUHhW4zMfyqKBK51EDqbwr
yPKM5V2RybtaUfleeLR9LN+LTL7X5/hYvhcKqHwvMvlezbqxvDEoUXljZPLG
b7u2B2zx9cDYdM1eSUEHONqYKH2C7NPgnMg7XdUxOP9Twynj9B1o3Lk7ePR9
u9b6GTYFFcH4wWuPurG1EmS2fCl/Q/xTUb7OeCTcDmyTb767FkzW/XDOtwmj
uEfXqb1lq1O75RSqbPsgDevlL67MMN8KnMLSxY9JfM5uSVH5OCMLb5Y0Tl60
xQeP7T+0kO87CyZt3Px3XcolXJKY9PN1czDm7Z4nmkL8bGAaMa2kLg/71n06
/7AlAh/x7l+9hZwn+VW6eDKP5+LloK2mua2hqBuouOkD2aeNA/WKJ/R1ULbz
Z6q9oC1eXDc3/iGZbx5dJxjKVid4fCgq34X3Irauc+usRXfsWJQ1pDFaj0bX
4fKy1eFWa3Wrf3p5Fh4+cD//STAKYiWXPn1Ixl8MB0f19/viIs+o7inbg3He
5co2OeKfY7QefjY9t4W8tGNCLuGb4u6LkVaRmNEtK3WL7IsNP48qdOumYXGr
dOZywwDcG7PKew/x23fdnGXjbCNxjcm54LlFIThxnO7ITeJn7f/QP+v57+66
NZHYLzot4wRnOAayONa7EfnDdB3xarY64sUTZXe+M49Gpx1c6poubnjRKzF6
9D2GuRCnkfQrMh/dKbMXF57DzkX9Re1kXrHS916LKcShTPwcw8KV0RinJ1F6
m+DzMVr/Wjb9FRERESu6fHH7cw6PEx2u2G4lvXWQ6LGk65f3sNUvy/8Zd+4v
SxmCz8+wsjb0hs9uX7hH67bme4Q6H8t2Bq55C09PIXjg+efI5pvEzv6tGUe9
dnvgJfElzcsv2eEW597Uk6Pvq2n9qmz6dz+J2ClWfA7P3eYvOt5mjVILf+W3
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
U9XO8+oigTArv9OwQisZZ8bqPBgdn0P3JzxO9yespfvvnQ1tzTzACoOFPX1T
jc+5Q1G98sTR98MqtD2SbPZ0dY44b2aFwttpiYH9MoYgHrG5OuT/lS89/E++
9MMXo/4HN4IgZpsHZ8++RLT+461uRvyTTvdFXMLWFzF5nVxVqJIr8MxPH/+0
LRmXq3233knkk/+jj+KlBYI7J13xwwIrnlaN2QnQHdN4/DORz6D7EMqz9SHk
ps5FuJY6FwFzLppA92N8yNaPUXycwjI/Xl/c/OHh9gHfJPj48KPk+V+jdRb/
7mfI+LOvyW/uEi1/+NzhnWotZo8ThSav4//L+Mee9supf/7/gir7CzpKxp6Q
OCuy54NsIHotMawYvX89Y+vTGET3abzjZxxrqhaM89a/89/TEgUGl7KDkNhp
9x99FNMWBAhmDjljltRtl7SqWLAyVyn/SOStafmFbPKmR3atPVHhDr0/Ez83
lYXjTP5ZtW9G+/nQ9hiy2fOgXP6GxWs3mKM4Qa/YNRaPjrvC85Ton033k+Rk
6yf57uKaCT8veSPXszrZU8FhIBiQO6uf6Lel7RFjs0ddfGHUzeQg3MV1fr7R
a284nx33zJh89wDdH1KZrT9kJ+Uf2En5Bxn/pP9HH8ud1PqCPbW+yKxvPC3v
yiavaNFQ+f/Q9d5xPf7f43+kkC0ZkWwhM1TWQdlSUiGVpKLSVCqkvffee2vv
ojqEpBQysislhAohGf0ez67H8+3zur4//16303mex3msc07Xde72d/1QY9ee
N8b85jB5nOCK2//Hnr0se2J9Tr6daemH55VyMoe0nkTsGL2ak6econ0so1h9
LGOY9QwZzHpG7nqOofbYs+wRvH9dreJsCIy4YTrSRioKs7v3vnjX/7c/Zwur
P6eK5usPYauJS9I7F/MkRUGsXtNAE9H/ifaxjKF9LBNpH8uJjH6cyegHrv7U
f+yvXad2fZ5j740PTizoDZ8UC9elygU0OfuF6o9l6f+2KTPcyiQQMxcK3ozV
cUXvmbjyN6cOQ/2TwvLPlH1rVDf+IPYEpsS2zQ/Ercrempy+E2dp/8/9rP6f
MXu9hmRODMBQU+vRHfKh8Gz/l8vhRP4rtSeCZY+qLkL1kjDcZ3vSWzXSDzoq
g29z+knepf08k1j9PE9OyxTfetEPl29+NO4c2ZcLVk5b2Eyea9G+o9dZfUdz
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
0s4pSPjFwVq/gaCDCoHQ+3TJlC1E/+XhpusTsuLB9UrkPjUlUxB20bsmQOR3
MXVOuMDUOZFb53zM1EXhFlMXRW5d9DxTj4V4ph6L3HqsIFOPxb1MPRa59Vhh
pq6LaUxdF7l1XZ97hoJVE8xhQmqgfFNtIGTqbhh9lMzLpFftMU6pTqhx7Hy2
fl8KHBGyjlUm6/xrecmRpUmWcKLR0XLHjgjQWvxOazGnH+++yUk4LhwX7/it
M8E4GY0kO++rkfN5O+UqCnT+l6s4yvekyektvlh/NOvagh2X4c/ETwO6nH7d
daMzj+3JxalWci94ZQvhw7dfcXEPu8FbT2LM/OYSfOwyat6WnxlgdfOS5VAi
b7p3aeVrXcQclUyPndtPQZGFltzkqm54aPNxeYUHouuk8ooO97PY5clnfvIq
udc2/H4+foIOGsvpv1zjWYoLx5wz2PCUnD+Ua+lNuZbZlGvZsppntcfzULCQ
VTb9vCMYZCvVbYdweIKUD5tA+bBIOZIbhd/NHr3SGsr7PhoM1bSHs97w3Ivz
/tuNNuOnV8KgMzFp95HrkTAs90sDJ792ZHFmuXqUlm9uzPxdgZpHSpTyJgWj
tDlYNt0g+8tITMQ67xLerBszVM41BCdOvP7r8D1yzneKdSsK2ENK9PvF1aWp
YH/s2Lr3RI8t1Z/J0q94pO7+oXlOcHlns1KCaiKsOrw8Bck5qU/5tv0svq2I
z+br6R+L8U2p+LH3pZE4zTv44zgSl65yv7Rpr3IJrj5xke9CURzG37af5vyk
GxpmTNeU3xqE9bm+6523e8Il80ZbznciOlT/G5Z+3Kv9aeVnTbyncnMVr5c/
yO1VD7vJ6XdKubqzWVzdtuV2x28czcN3D2Z0wcQ47P288dV4sh+TT/en39HN
xL3rr5t5fotB+epLtgkkbnT87XJ4hL0Ojjr5QkLWyAbCjmsnVg381S/C0v9o
jfKa11rn8fCIVncx7+MYbb/l4k0iP4/yfAspz1eN8nwVDVT6ditm4Ra5Wj7R
nASUeiczagp5Pu6PT8Xp4iTc3hxw3W9TOt5+n2alSOy5bR2TvMwsDu6nNyYo
dKTBG+WB6YIcfjTl9tJ1CNx1OCVcckQ4vx+4VH9bNTfHCz6PuWbI+T/UZsov
3sDiF6/JS1vp3JgEsj8sRm8i+e/42rk8U8nvLqD831wW/9ehNmnzt1wrOBb0
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
P8+m83KbNS/dH7/Ku97zBXcJUQWlR9GQenbsATeynvd4VuzbxecNIiLHmxTH
RgIP1K3dz+EdUy65CYtLHtLRm46TiB9fiQdI80Wg/qrk6gEOl1zyhGmiizOa
GcX9eLM4DDftGfguw+k/T7nzS1nc+Q8PBAKSevRhwZ09yidNXXF4wuOtBkT/
auqfvLb/+seB8uJNWLz4H0ai2iVLQ6H50E7tpOlG4Np6xOkx+d1llA9+hsUH
j6dc9WgWV134eVplsGsiDKxqff5YyhX2+3t0OJD5XUn54DtZfPAwyluvY/HW
BVvk94VYJUGutdjukOYgKJwe9LOSrB9DyhNPZfHEm2LkRSQ1o+G3lPOMs4t9
oD61cQfnOxdryvVeyeJ636Zc7wgW1/visPH8gi+8Ie3TtJuB2nZwhndc0wtO
X8RSm2nnV0qj4OqGEjEfN1w7eu80DgczeXYPmJP14fD8s9OBy7IYdNXoLWed
rKJ+s2f5LcLAS3nj9AR4KLM8dF9TKGgMa9JOJfsr9B/c+VrKW29k8dabhPaP
+iKXBksn8W3wOh4N15a+/aFFzoEb/+BTy1Cutz2L66268+eKU2XJ0KDdum7O
Dm9wXm4y2H/yCOV6F7G43gYLb7UmSkaD6IBB09VdB6Fao2xMGpn34ZRbbcji
VhcUep4ekeoEYhm38gw3+2K/sqR4PHl+i/r/NMv/HYcYnvVYFs86bO8Y+478
Uxgx7NDjj6HhOBJSB45z3ot+lFuxbMAPREQTpB6LhkG9YH9PGLGnfl0+tkfE
wFR3n+fTCmKAzzqEL63vL0/8Pcs/7+wNdMIjIqG2Y4nlI9dI0Cx/7j6OjNeK
8rJPsHjZZy7MKN431xFuRua+29FjB7teCReokXk37vDWFV9sVv5bovqKebvB
//LT8Q1P+J1Ou6EGT19kWZAjJq+Iucjpr8JD/abH8tteymW+wOIyv4xouDox
Ngrfp0w4uGVFNPI5+C6zIuufn3KZ17C4zPoPxDRjv0fhQLDPz6iRsdg++WZt
L/GD9j+4w2KMP3Eq40/k+nPBvkH/w3bG/8D1fzYzvxh4cXB+gTu/0yn3+efM
/3Kf5/smXzLkicOCw+G1Ub2aOMXHW+An5/yk4z3HGq805S9rs/jLAY9X14pa
pmBWYO0Z8ckBmOfaX/eA3DsmlC88lsUXNgu1q5FQTcOAS43Njy+S+D17u/iu
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
baK/yxHc+qdqytiPhXD2db6vA8nnBzm9RzzD6T2CQO9xUs726e8vOeLVW2Nz
efal8EXp6TWhxyR/ek98knEwGA3P/Wxcd6cEbqhtneVKxg2LpDavN4jBl/oL
v98ZmwJ157aHppL3Iq7EM9tKNxHlbETv7/vsjDZNreXbST3geS9nTev0JJz6
dOpO3ZiD6P5nWRPfb0iu8VSSv0QiVqXqmnW9D8ApA0RyU8m9ECFxT17lfTw2
2Dt3pJnH4/UnRyVVSV2tovGt2/1IJD4NuDlhct9ofPqk1Hs+mWf4ki+6Qp2B
OPrELRWjcWH4fu++hY7kvLnefjRcWT4QZ43V6dYfHIR+16XEVcm5GhKjYXPc
MADrNc50uEv44pkTa56+J+N71H+VHC8LwR19Jsjq7PJHr6JIhTFk/JLvAmUt
sUgccGW90L78AMyG+bUyZP49b2ryp6jG4fzhIpaXajwxe0Vnqw153+Opj8wf
6iPzgPrISC6xbRWvtYLRY8tFvpsUw82h/fYWkzrBuI9dk7aUC2aqHtm7XKoA
1u1o8TR49+/9Mpn7bvrRlbF4deex6nkDgsD91btRvcn3WlG/mL7UL+Yc9YuJ
ofsygdmXeRnRz967ROGry3kjDrxxw1Gv2i1OkOdqf7tx/Pb1gegx3n/g0yde
uLd03G9+fNqEzgQM/OyAzknT5MbMPY2rB44at6bH9+r/9oW507Vcbo67PsSk
HLhYancKq8aK5pSSz7c9eXIh79g+eKcvdsq0txeeaWyv5eNaw02qqgds3w8Z
wxbUdNUEotAKBacIvr7c7YLC6TNIPnEx+BkTFYyJ80wiJPn4Crovo5h98Vh4
4fmz5T7Q5CLcIGoeio//GL7g/248U3/xQOUcQ+iULtUd8S4e5yrEhdj++uvD
0kF9WMyoD8uI9K3L/d9FwrNap6KTUgkgYTemLobkn/LvCuOGTFmC9yZIrpKL
jCJ1revVfny9XOqzk8347DQkqly8JmaNsXD4qmGLL+zK3z/gPd83nMYniomP
JfXHCWb8cQqL79vZbTCBZTceXNn50R3crfLua3T/9XNh/VCCqI9MH+//+sjY
SS62TU0LhoroTxtbAwJgXR8dH5k//HqV80M5wvihRFF/mXrGX+b+L73J/l0J
MMtGpio+7xToVHdWZ3b+9XNxYvxTRnksXxNYEA4f3QfGSo9LQtRYtOYlea+/
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
coWaN2aXRpPn7aZ8ohSGTyTb88OJ89KYVg/yZ/C/30/0Kd9qIMO3Gtmcf352
tz8MH5+4qHV8ODQO6fwQTtaze92vuUfPpcDt/e2LJ671Adc5Jj0+L/WLC/FZ
ZCwM8vC9P6ooFvrZhPZLJ/vbSXlYlxke1g6bYXjbKgWsDe3HnA/3hBjDlZnS
5PN7/C7NGmKWCLUpZwzLjjrAhWjdVSYkniayde1JC2NgV/eRlmpVLbikc04y
nczzk/K5Whk+F8/xiEFEZBRcfyFn1ewWBXoV9z2kyLjWi1XL1yTGwpT0/Ku3
F4XDfZ+tm8X4Om+U/3WL4X9drBs6yKV/IrxN0tsBUkkA99o0lpLzv8X0bK2P
UhREjir/9UvKCWyszwyrI+u5UOxl1j/NBYZk1RUYrfDDzu0LZyaQ+E/j4okj
uHiiIJ4XNlR3HQ+Lh6KA+J9WU6NARjn8fROJw1HKLzvA8MtuTB6ze/w3d/Bp
t9n4cIozzgu28+1P9qtWSyU7BjZin+1dsi6bIvGc9Qtlfp5X2yjp+KLwKPr3
3dH6LiwCRSGtm+/350x5bUcYXpvPyTGlmyc5Q1NU/uu1H06B6hPpot1k/v33
rh9/VRSGZ0mHtbPbE39Hlt4ewcc5Uz6XOcPnWrG553tBhfteEHzvv3hwXxvb
hF3M3HFrrx9R54KdMWVubCYfX9cuxPHd0hm+WwYXZwzI7IkzCOLsnNv/yYwO
a7C7vDRlioUV5vomXufju7Kvc/y4qww/bjnlx1kz/LgbkdeqB8dF47PUQVor
58ZgPye/2dYk/jJ+KWVGveIxTDuiPvqLHo7w9RH7Rd7H1L6HVskOswfT8tDR
sl4h4Grb/KmTPO+SX5VNM90ssfP3jia39hC86//OpDdZZ7dJlvxGg3icZ3lK
t8EgCSNnCg/k19t7bk/Ti/sejd9DfH9Fi8bhs+GX67+QePr14fh6eQxfL5fy
0UYa/ZePlqzgc1NthxtuXOIadV7EGIZr3i3i62HOfrB/bIiwJ2rPu1tdWR+O
IWddH/P4OpOU97eV4f0toPy4PQw/zrd1fv14q1TMCKq3nDk8EAvcOhtuk7ru
2mW/+AV6Sbgu0C1ou2kA7nxavY6PbyynPLhuhgenQXlwzQwP7msuxysMZHiF
0rtazlbU+mCkuLz6nnQn/KwXZ9XQ9W++oUnYqSsKO9PRv+zmo9bMGIzIVZmp
St5rpRLJhsqAeAw5N+4G3gpAuUFxXlYkDzRSHuJMhoe4eZ13sEVsIjre1fow
9HsE+g6wm/CJ5L20YTnnw4UycMOBB1P2zIzH65csM2RInXlr+8dfO32TMPnY
tnm9FEIx1H+RxUjyvDzKZwxg+IwDKW9RkeEt6l40HVhLzkGOw8IcLVVXLB69
YmgDGX9ZOHnTeuVkVBuYrm2zOBIt7pZce0ri/yjirmuIfTL2VirMOhwQgtod
cmtiyTpHZ6uPEXWIxYe3VewPHI3AUyXjRVvIebbxTG5alBWJRq31qskZAdi1
6pJPL7KeCMqXdGL4kv+vrvOO5/L7/39LQ0lLe4iiqaWi0lNGi6SyskISSVbZ
W2bZe++RLVvpKSRRSCINlRIqs9D2O1evy/dz67r93rebv87tup3rvM451znP
53Ee98fcC8Hpjly+2G+e0zs9cSPeqB0W+U363ydvvqvh90TcdHhAUXmRJ84v
s9lD+WU0NjjfqCpMROvZaZf2dfuixR62z5tI+YRdSouNOuJQOiJO+vIjd+Sp
XCelQ/o/2eTbNq0VXji/9h7fETlz7GlV4qDWgUT2A5ISdwzxrLP+Vva9bvC4
t1ieipe88v/GUZDPiqNgPI7KZMXVUMeKq0GPjqtlaV0nMHSdZv7Tvzybbglv
PsUf/TNyBTgzH2SUUr4tO3sMB2WS4MfPhX2e7f5w8HNHvBPFBRppixjamQgz
dcKap73yh4qMhfLC5HclCK2+a3PbE+Fh3nfxNxF4S19rggR57wNaHyrL0Ie+
XcOTEn4uEJUEbwp2sBvi0c1Rr2Sp+UzrQFUYOlDr5qMj/Mkkjg9839vzJxi3
VCYGepN6NKwvc5qpRuOluSlqF5f7YmvlhGPU+Y8wrRvlZ+hG9WndaLDFv7rR
JSvdv0/7tgSHKqOf68R4gkSkXq0MKU/jPHyjQ9YGvm9c/HHUygTTl8d4FpNy
iUvDM/aSdT+7Xmow4Uwghu8rSRCjdM20/tSeoT9NvTLkOLrIAtsXJufJTPVC
+/6yxTNIPREW80bvFDvinc/zbbw6bEBcoEmeWse+66/yGxi+CpyNx3GaTTjw
V2YFNJN6Yll5EDiw8iAYz4M8aX3rR+1/9a0cSWFlp8Vc0KBOzNb/kDnJk7J4
DCg9FK17bWToXrV+nP86ujkQ+u8u63y/6Apkhwf3UedLjq3z31QdvwgSZ/Ly
Ht3yheUKS40pXx5XWierxtDJPqT1qicYetUrX0eNg3ViYNT786qpa93B703E
UAAZr5ZNOrs7NTMA5fxfyBwJhM0Ns+bWkbhxH61j/crQsXax8l+MZeW/OJ7/
LqD1uW/a/9XneoUsfn2GSx8PlMT4yy/2wpNnLTu5SfmOgvsG4l7X4MX90vtu
Y07Al7H6exd1b5zW8y5n6HlP03reDQw970c2NVmNafHA7r9MLWebL+QNbJ7S
SdaZODGn5Vq8XnBBWihlOEQLqucNnuIj73X/tYWjKi0CDva4vp5q6A4jVYe5
DMj4irHyTRhk5Zswnm/+pPXC5xl64b20XriUoRf+1f+4edHbUDhqopUpLeAO
pv2b8yeRcWnfVvpzylgi1BytdX+43g8eif3kGKZ0vj6ccq/C0uBtWEbAtuEQ
uPt8qC6H9POk774hPT2eAK4hL2aL+sKKrOI6MWp/XOCeLHnbBzrL24cNpV1g
pmZpNZWvtSuLNCS0OkP/Yd7TzxaZQnGRYo0r+b0fuFbevbApFdY1H4uu8PIG
DuftEV/Ivj+F1h1/ZuiOw1jnFSACf88rcPy8worWI6cP/KtHPrljoXl2kS+w
exxWvmAmjcnVg4XUOL6m9cgnGXrkw7RudxVDt7tgjkLViQOJGPBtLvso+0GY
t2zdwyDy3rMtp/9MTg5C/w6zuQ/EoyCqfNCuifTzE1rX3M/QNc9+u65Z4GkM
/thwQz9zNlmf139Io3jRh2i981SG3tm+x3aBOrcW9prC8B7bSfjrqfarH2OU
jomlgwaGDnqQ5QcNQ55//aBh3A9a3MfdcbdNEk72a3WPuWSPo7u1PnuS+enC
8puGTJbfNIz7TY/8LPCTZE9AB0vFkqYuJ5zy5dz3n+T3BqXXBaw5H4NnNuXp
nLNzRcdp0+ZR///6zM3SU59l6KktLL90s4n4QzK/qHf9LmPozOxsiCX1d6W1
25qIyKHx/U2uL+tcoDDoVKwbdd8eZ7T0OkWjlb/G3e/iV7FzzYNVI6T+CQty
b5QVh6BSnRhnU7gOHvjSKHSP/N5aG963zyUtMOdV5LY1wr743shi5Am1/9L6
5TUM/XLxqbpbMkEXgOsqX0nur0g0eljlnkG+F0h9sdTq9SLQuDj6brq1BdzX
fOdOcTINOA/+ai0PxLOP2mKL9c9j2cF52YdJ/V+es/TgfQw9eAuts17O0Fm3
NU62aO0OBa36TVGz3Uwh4bVYkDW1PgvW7D0uGQNPHk2z5HE0hOnTM86tJO2R
ovXUQww9dT6tp/7O0FOrs/zZYT7Lnx3H/dm/0Xrzywy9+dTuzNfDbOfgc9BP
t10LlXFjqo/hCHWP2kM4/euvKNC/HVwgJS+Gxb82bbMh7RGk9em/X/yrT3+i
a+PkIBIMuUOC98LHDMC7rgAmk/o1TQTeXa6wB/a4e0scFprgSP88J+q8xcE7
csqc5DjIljS/nJ2vj+8/uJRwUXr/BSeVJtWFAtd74Wdnfpug4a/JGU6/qXuh
LP07P0P/bnIgpHh0fgzJa89HDWYEwMmdX0IKST+8+zCLv+R+ALxaErFI4rgD
NLgmbqO4+otpvfxqhl6+J0BTbIdwJGQ92OLxTsobHLMriygdYsnxLZ43mpXx
1rk5Tw5VmmCehNaWLurc76P2Hf8MOShwTULLjaboPfpElSp/Tevu/zB091qf
U8tVVNxBrll9ulGxD2o01SwxIu15RevQoxk6dB9n55eJHlFwdm5KgF6yDyQt
EKyjdNl5FbwgNhoL2b1nBOt3hEKIH8+GXeR7nHJuUu/kL3EwpZJHc0WlF3xT
dTm2hPQDSHJKGaw8iuBbZeew3wvjv1y/up605wCt99/P0Ps/a/njINTvD4/m
R3v37NOBNUFCpX7Ud0rr37sY+vfPVTLkz2af+d/7Jxr/p3+/SvMBXjP4AEOS
PV9SDnghPjW/IGsQDEKl7z9tp3ggRyV6rb1jIXn4ZszzyZdQccv7tTdIe5Q1
3nyYbasGVwMeZwQfCIfhtsIlVP5+nOYGuDG4ASpSMV2nm2PgISY127s6oLrG
JHnq3v416eRJMqqR0Bj9KiB7lSduOFnUspWMe4noy5YJzhEQXPG00S/ZH+MU
1UezyPNzaf7AJQZ/wHyZpE+ynjloWz/TuTQzGIYvuRSMUj507L1SAqP+4JYi
cvHY5mAY27vnBLWe6NG8AksGr2DPTm/FeXrOIHfyUl3vjih4ztv+QJo8r/Fq
5sUUy0Cwnm85xV/SG80uc/mbk/pHG3+W+CqGgCW/Xud3kmcvepc0r52M+xdW
f8JLVn/ieH++XT4aMTLqR+JHo6XPr5F9p+/Ll/3U/Xmah7CGwUMQKhE3VV7k
DYszW3SK1GJxcbjGU0qnv0zySNA+tkBQuia1cMm7BLz9xvGAKNkvxE30xaa+
DoS9AXHsb9Licb/5pJttFL/lPzgMCcZv/NInykL2mt2HVe/ZQu6blPD7pDzW
W7d7pbkvBsllZ0x8q4v4YZYgtS+P0PyBdAZ/QID1XhRivRfG3zvObchhcBs4
3phbu9edR8VhV3H+zY54w/ubdibFpaH5DNwMPsNLVj+jMqufYbyfS6xsNKQv
uELskuBXn0W80Y1PpyiKtPMizXN4zeA5vKF5DtoMnoPv7FUr9hhY4sTX4qsf
fA9GnfA7cfcprsJjboO2NdEYMzicxc3tB5vP8BYdo85PVnvNSR52wORdDY4J
JeFgZniisJdqZ6FErdEHZ1gixaZ10ykcFSbemd5Oymf6hl78MtsaJ8RsvqdT
HYkigrGzg0l5tEdw4uO23bixMiqxnD0c01Xv+Z4m731C8yWOMfgSTazvF1cy
+Akqa3hCHpH8fP9k05XnP5C4MTXi9QWKZzVRct01dk+w+twqOuQZg32tvdtM
SfulaE6FKoNTIUPzHA4zeA59AiOOpxNicZfbpoEMBXVYiW71qaScL2yC+NZN
0ehuUX9FpsYY+57XJKqRdm6muQ0H/4PbEMXgNijQHIw/DA5GTjKH0ux9uhja
lDvwQD4CTBqvWM38/d98jNdw26JvTzwap/+IzZG/hry2glLzqX152P2wy3of
jF2efa9ZxQdEc7zkKP5SFM3NCGNwMxbK7FQWIfNgRUByzLu1ASgm76VB+XpY
Tng8beJYAsr2T795cUUQWgv710wk87yWY0dfVyv5PmUy9gYe98d3lxbqUPog
PZq/Icjgb6ylORtpDM6Gqg5C9cZQlLHX9VKO8IWuO0EPE6jzvZYjSlmZQRi/
dIA3ZMgR3s4JMG4j9bhYfi/rGwjB8yI7f3/MMYPZxxu84qn7WsguVDfPDw/v
GPmitiYYlz0aWzBE3etYmL9uNsmjsxU8ep7rBuBcDtnlXKQf1Gm+xx0G38Px
WNMDh8dBOJfLi6vfwBA7HxuaLyDPnwwwXDT1YxR2ZhWUclRZQNiM0TBl8vwM
2bmbFgmGo6BT9Mjq71pQn+qUQO0LA9c/96c2hKN+Pd8pbxFe1M34MJny9Ysd
5dZ9ZnEZL75UuBdy0h5judfYpJL5PIX9mmyXqC/ueP+06H6oHSRfSD5CcX6c
WHEUurHiKBiPo4ZZcTU2ePyNq3E8rhalOSTRDA5J4dXtbaXfLpB4JO7IxuJd
wFn40vErqefEw1bBowviIGHrt7WCs/Vhia66wTlSz+D3hSOPmyPA8nowp5XZ
AUz1fff9G6nnrERDktLCAFgpsXz+aV19CI++3uVG2mlL80y2MXgmldZyW+9o
h2HswJ1rP0RMSfzS/Ik6Z55rzeKWSDG4JU8r5epNC6+DteKOTE5hbWAX9rTb
SMp3q8GT4KwYvJdcfaNgznVcFbLujwxp5yyac7KLwTnZSHNOChick67jQ0Oz
lP3QTUZww0QhI7TOyTCtIO0XrbnrqsDnD/c4jHkX3jaDsYg9osGkPN1ywq8X
r43RSd6vKv6VNdxLrbS/Ra0/NC+lisFLCVbuuLjOxgOMZ0rIzmo2Bb8DMIvy
nbRucXhbpBKAzWPB11vSHPBtZ0iFOKm/4pNxoVy6K94W3qwp63cSb5h2b7Ij
z9ux8iDkXfs3D8LxPKiI5rEYMngsZ26sUI0SkEefoNNmYX7G8Kio6CvFV1H9
wuK0TGFwWhoTPswx9w6BnHyJ1OEES2iZmPeR0rXdGrI7o3MzEEc0pb/X7DsB
23ceNTz5539cl2kMrgs/K+9DXgZfxS8xY0Pci0j4zp5pFR5kCh8mlM5LIe1U
H7hYymmXBGnnq5ddT12HV57ImN4n68kFmrtyg8FdOcnKf8GIlf/CeP4bv5nF
k2lm8GQ2t82ew3YwCNwXzPnoNsMAFNl4dgn8oXQ0RyyfPz+GSq8MAx3bzHDd
ej17ijOzmebPqDD4MxI0f0aSwZ/ZpNrWvzbbD64osxW4LPPAEd0X0ZR/aG7K
8RticyJhf0N3ScNrF5g0sC3mMsW3LFoDbLdjoeFNbcfFU25gv9bk0iKKf5L+
N98EV1a+ieP5pjfNtxFm8G3kab7NFwbfRjDlddnji1ZgYTf6uDEwHCeor0ud
S/1fw3rXWOq8RNj+8KJP821n0Fj7SPgkpccXOruxuzgZJL7Zd+wtcAD5oMKe
lNF+uN81JBZb54HpPxuNvCcHoNDpHxwDpJ6SCj2HyW8kUOrXvENW4rG4+qXq
0VfU/flbNq9rHQzww9mbH9d5RmOdupHzMfJ7Ndf/+K23LBqEn0gfjCpzQ603
Pue6yfPNNCfnPYOTo8E6rwA31nkFjp9XPKD5OTIMfs5YQpjbZYmrIDB9efCw
WByeEZkwh/p/cSbNz7Fi8HNe0JwZ3/f/cmaE4tle5k8twS/rFNlk7ZMwaKNE
ocNjEuf8kBYO8MrDwAFpreSodOjyDxJc/pLEmTSH5zaDwyP354qXumQJnsmS
uBC7XhcvcIu/+tJK9lmaz+PO4POcbfPYzsfvgB1HVJ3rF7njnT9nEjeT9iyi
uT1sDG5PDcuvHI1YfuU47lceJu2+WEv9Jn5Jcp382D8NnZYbZTS+pnhTf/3Q
kdftrx86jvuhFxme6HBWT8VzAR5cqaeTUFBNf1pQfz8oTXhs6qgUhKWikjy6
gkFoOyDjakadh9P8n6sM/s+lPd42x+V14MzQrPUxs52h5uh2PYqPKpDcHYn5
8fjzsbp1p4IFvO5b+1iLjMurn7NOmhV5YlRDwZWOfH8Mmn3Rq5/Mq4tWq3cW
3wYQFYxw8UozxLuXpy8cIPWEaJg2KTjGwNJTUpdrd15HM/upq5XIOA7TvJ0O
Bm/Hp97S+smJYJDV7AzlHgnCP00N0hup88aJY92Xp8Xgm8hBg4OzrEHP/L0w
JynvfS5gEqpuD+/mZBrWiRpBaLzkr1zqfgXNL6pn8IvaaS6QM4MLZPbNvPwF
VyykNrytMXf2BZ+W2/3vflA+XDmNn/tzYIn2qeenCuNgU0D5DN6efrCi+T8Z
DP4PP83/4WXwf/6YcLtNkTGGCsGMs6u/u8JvBykF6v8mHTQf6SKDj5TY/cYg
tdAXDszIYttRo4TPqmNEPpD2z40cuSuyMheyj6w+2Q/Xwczz6dGOz2Q/onlK
dQyeUpWwvoCiVihE4q+E0pZgeL8j3DGB/F5jy3Sv0O8JMHRk9dfUjVfAZXer
SgpZT1Qv3d80vacQtt5dNe/k10AYDseVuq9I3CU9x+b6u5uQkHRVOiXeBzac
1cnO6e6HOJrXxMf+L6+pQOp8PHzJBleHjbmdvzIg98CHo+0dJP43M7lk8d4T
AhKO1l/l8wSekPU7qfM6e5rvNMLgO8nGfw+LF0iEvlkhvf26sbCppqRZn7on
2fpw1O9hDMRJXYtKFjgHPVyrfNgoPfiTijt9fgmwxb8vhFPRBeQG7Lz9SD0D
NCdKiMGJkvfimMkfnwZjBz81Pah0RtWDjr2uX0mcQHOTehjcJFk/ox5e8nzo
5CyufuF0cEzd43KMzIdzXLozD7cWAM9arYc7q/Jh1zO3wen3++F0SentxK2F
oL8/dGbHyZtg9MdfdT5ZN06Vx3xUs4wF06/ZYYk1zjg1uH+vBhmXNTSfqpnB
p0pNP9H31i8Z0m7WnuSqj4FNvrWxCyhfJ5rX9ITBa2LdP/Hb91fGs9f2/+6f
ZNM8q+cMnlVshvMdg4nhcNPm0fsEvgzYeELn4Aj5vbut9tQrTcsHDaHJO49q
J8HXGPmuwtfU/WSRsIZ9ObDv+a4dGe0FcMHl9Bx7st6G0JyrDgbn6pNBXe+y
XfmgVJyXwGYXBJ7+hzSj3/dDePLFuRFOudBjWbZp2bRg4DmxYvXHj2TeruF5
+kIqHe5NnHGizcMdfarTqirI+nCO5mU1PP+Xl6X2x3Gspi0XFs4+5uMVcBPe
OOFRvRayztwS47benQ0P6qxW6O3MgVsiYS1H35B9n+Zr8TH4WsH6z9k1lhbA
YgV2e8WtxWBgZJupiGT9V5jOw5GYCmrql9mqBv3w9O1XTkDm4XLbfVV82j7w
UkxwbcPefIyXydqh20meZ/Un5rH6E8f7c+vP5M3Vu2/C7Eu2fzpe5sAVx8vV
2m3/ze/iK5l5PyUvALJULe5ECt/EbseE2Fwy34Jaawstm+zwolVIyLu62+j1
bilU15H9cfVS+bPVTnjV7ZmYXngJJsyoKwwk/RBJc8N+Mrhh2xSGFTq2RYHh
sojPGz+HgfGTaO6ZZP6kXR59m/QyGedb8/XIzk7CvLcDKu8H/sfLOsLgZQnw
/H0veLHeC+PvVaY5Y0sZnLH+zb1tB1VjMdDf8L7aiVAUnqN8ypF8pzYsDhh4
MXhinTZ/+xmbWP0M4/3McbTmXG6KFjzr2CFWnuiJbV8TuY6Q9bOW5o9JMvhj
m2n+WCCDP/ZrKLVzZF4uiXvMfbiO5uOubv7ividkHEtWabaPkWyUY+pijjce
sLfjYsW2IbJv2kzNZC8OBpuEkjzXL7kw6xj71kYyLk/tqrpXzPHFx678irxz
8rF7yoHWWtLOKR4rBexrcjE8MUMrXvc27uA75m1bQvp/6LJhBH8m5pwOm/nr
RxEO3Wgdia0n6xuLq4YRDB5aM837esfgfdW0DB8ouO6ET9dPk723wwey74V7
F1Ln8E5Le06HhOOx48euiG0uxrdzn2lFkn3qJM1Va2Jw1cb5Y38Y/LEZ1odO
ZE8twEWpxorLBdNQQ/X70+tk3l4TfXWrRj4XTyXvyfXeloE9KcKry8j3ZU1z
xowYnLEemjM2wuCMedLctgMMbtt8K/3pSqJBiN4/ujd2B0DqAd3P2b/+m+d2
LkR0Lb9uIVZpLeFo2pGH3sLDEdoP+iFLV04g3DILz01IqckUMgEfoaZJ5yj+
PM15a2Rw3pbUauot35SHs5PfTOHyzEQdLh2D4y/IONouFF37pwBTNkgPTzib
i2ew8WwpGa9p5cULan1ycYnC6bc1P9Jw7conc6TIPI+meXEfGby4cS6cDYML
5zV3St3olEw86+Gna6jkBaN7n/P+JuXWhYqiPnvz8GOhdK+gsB8eaS2oyybj
IpuwYuaCc3kYPsdWgPe8By4aVv7VRMof9L3uFenNwtP24qUPJ+WhnNMLLc3n
pN8m58rE2aaiMF+80NvVmZiSWzZZgcxbYZpHl8jg0XVNnhmz1DQa5xx50ZMd
HobxfeuTGqm8w81MVkMrD1sW2POov76OwbKP5dPIe8sXR3nYe+ch17meM7dU
HND27iafh6S8XjG/ZZt2NkZm/nLT1vNH44NxX8VI/SbTkp/OGQpHAY3G7U+q
kvHT5OVas4cpP9ztFsG1Dmi2xD1nR54Hrmk31qB0eV2mf+MobGTFUTgeR91n
xdVwjBVXw3hcrUdz884wuHlCTwM4rQ+7wkt515zukSuwsn9ZAXXfaW2PpbHm
2VzI2Ttvt+LDBPgjbFs0QNYHA98tF1eZ5MIJUd4PpQqhMKV42aN4sk8Jw8eg
LV99sMF0vayWlQWmlbdJUPcT2Gn+HheDv7dz2DvprGw4FvjOtDH9GYAHfCPG
blF6EJqzF8vg7BmsenXm5FcPdOPMeP1zixmy+91pFCLtnP6mK8tEKQU5Xk2V
DBNJxNAn12/PJfOkhebyRTO4fB9oLt8RBpfv4alFKWc0jaBprsmHMnctTL7c
9rKHKi+4nzetzhhudP05ZrLWFhxlF66k4lL908eKrpYm4UsZqXfOJ53QOk45
+ijJ95Hm+/Ex+H5Bg4tTL7Y7Y61SW7jKhRPIq4ErI0k9V89tPBblHIAFR4sN
v2X5oEJg5hp3EjfmDEp1fP7mCc4ySefSb1mB9OFHxivI81tYeRCEufzNg2A8
D9pK8wMFGPxAJ89dzS9uReFKGc2xrcMGEK20K9uW+n8izRW8yuAK7toyusGg
2R/icowu3z3hA08aMrip+yQmKnP35T3QBMdbNaIe12xwmGPmaur/zpdpDuFj
BofQl+YBvj/+Lw9Q3uG9edTSZFgrcyTfKCECWtX+TNIg81xSJz2ulr0U2mvU
Pj72TgGuzHWTa0h8uILmBHIxOIGTv//NfzF8+G/+C+P5ryPNPyxk8A8/Xusz
ytqpj0HpX5M3rTwE3JE93V9IuWJE/onOLbEgKpZeLjJwAv1rzLU/kHlYTPMS
pzJ4iVw0L1GFwUu0xo+HFC/kQMKXuRYS103xweGtW2aR7/ri6vOL13dfBZ6x
2YIXB72BLWiBHMXj2tVm3C33NBSUr2V5W7SGwKkHTtfUyXt3sfJNONb0N9/E
8XzTmOYxTmXwGJ1oHuNdBo+xb3/46sjwBKi8+eNEwMMAvMLH2Ubdi5P0vDxf
dHkaTD0Y+dknLRlK5KfZS/eSdSwzweibVh7kSNiePRafASa6nRBN1vmaMtUV
fb1e8GLTDqPs9a5Y68q/N4m0P/rZq5o+Lj+QOh5W6VgWiAI7Jz/cTOaJ+FCY
zwEeR3gkZfU8bWM0qjcsWbGOujdVdW+bz/siMBPc9Hb/QkWI3VAwd9/LfhCl
uY7RDK5jDOu8AuxZ5xU4fl4RSfMeB83/5T3G6d+/o+fiD8n2T3ImQDJ6vLVd
9XmEOsdm8R43M3iPiTQXMY/BRbwQEh/+aX44yqRcmNVgEIJH5WdlbCflQ5/Y
M/zmB2Ptvt9eub05UL65V3r95/9xI1UZ3MixH/H+2VXxODspbUP1c0vcvvxN
sRwpl6N5kiMMnqTf7118+nvNUVzDeFr1klO4++e51pcUX4vmTDYxOJNzU0/u
9+0Nh+5Kpzw7zjiYZbP8QRQZ3yghzgVC8f74c1ts2k83f3zVHSBxjIyL9bcd
K+ev3YtvV3OIbQyPgLHNLg/ZSHnd8/KTcjcccEBVatolNR9MCo2IryLjq1Nl
2wE77HDqvK1jfRJuWBLsEQOkPew0r7KTwav8EH/wXj27BQaD3sMLrd6gkqM9
u4/UI5c3O1Yi2h/P88yMnq0VC0lsFeKmpB9K7NsWTCy3xfOdDWzP3vviHI9T
ounkeanV7UlSDm4IIsHn1u7xRykOn0TqHHLU3elruLgGSOvnGl+/mYGBl14v
Wkb6gY/mQz5i8CFLJ0U0KrVqwwWz/bU9q4owYPq+G9ZkXu0w7cvdneiH55Xu
LgNpFeh6NufZPVJ/Ak9OxdcWMxRZ9umEyPxAzDD+oUDdu6ujeZt62v/yNgVo
3uY1BscyNv+ljY2UEQg+flWjPOgO7ubZL0+R8j+ntT97K9+AH2VhTtrtwZBl
6WDTRdrvSPMq9Ri8ylCaD2nH4ENesXn+ZWRnOHxTOWhun+AKV04cL6B4Jgdp
nmc0g+f5mV+yUf+XMUzN1j/2x14ZTG9VzaD2NTOOPVbJKYFQEDkk/czPDw5P
VvfiJuOoSPM/pRj8T7fY5RrHfgbDwtb0s5ucXUD5ZsAsG/J81PNLWjusyHfX
X9X0PdMOipa+KjYk/RZaLKTtJhsHVSfX52oGhkB814RFa8g8f/ZTY43vnzjg
seQuj812APW7P+6mUf4FNF/0CoMvGtc37ViDeQa8bij7ImGdBAFs0w8vJf1T
OW/mueMaBpBewv7h7Hwf+H5Qcv5E8rvu0jxSVwaP9KtGldqDp4EwYmCrtnHf
NVg7E9UDqXn7vOlIwWAAQFJr4+EbHvj1jKsbpduSYS9pef8zDCzOnU4ZOu2F
ebZvJVx+/Y9reoHBNV3qsV/SPzcU+t3nRC9dmYB4Skiyi7qvS3M7NzG4nWyW
LsLecSlg+eHkqqBLSfBii9NkLpLXrOxV2/xkTxHIuY8occ6+CTY/9WWLSdye
ajf2o9OkCMQcM7q/haRBsvR6vitNJM4pFkrWSPaEe0uvyOZPSMHDWu+yppP3
7qZ5qpYMnuolmi+6k8EX5aR5qj4MnurrSrc7bUUuaP82wGjG41BQ/Sy8iIf0
j4enf2rQjWJoW3r68ka9eGjEab3+zf2gMhQcWpYaB5P2d5l9Ec+HUskDv3RI
/P+D5qyaMDirZby/Vao35gK8KTyQ6xMDhYoCIcmkf/Y1vZuyJq0EJF8lzqwu
TwDrpHjdsEYSV1+Vvt5bnw3Lgz04PUy8cPY9hbpTZL+Lo3mthxi81hy9xybK
95JBzN82u2tTKXQvPnX7I4krdKY+OXxhXjJ0w+qRPS9zISj4V/D59//ju+5i
8F2tj1XzWzTlgKSsl/z3VeWgrz3k+i6D7MsiMpE8LdFQ/aBdP/ZrPNo6TbRP
I/uOppuhVbqCG0yzmJM/eV0Bmidpphq/64dZVX/7E3xY/Ynj/VklWb+AfUsm
bHva1qA4Pw/k2wbr28n+20zzYycz+LHsmTZX2peagVj+7uQD+wrQ4M7R1iRS
/6vJIusmTzqOf04oruhdUIKb2F0OB5F1o3FP5k4vF2tYw11b4a1WiGymk0tt
SX5qZbllX0JeCswqUxFtmRMALbvnPqgj8Rg3zbN1ZfBsOc3WlOiUucHdTFNh
XJEEo26HkqzIvuNW8tZ87NlUHGh/Z94hYARBvzbE9VP8kO+VWNrvhok/FO94
L4zD0tXbFd6QcQmgObE+DE5sCKudyMdqJ4y38zTNuV3M4Ny+qMjjtKxMgHP7
5w28tfTFnRqaik+pe/4vWPxbZQb/1obm30Yx+LclNP92H4N/e541jjiFNY4w
Po4u55q9n8dF4uLGhbcejN3GH3IpM2fV9IMav6Ob+GIT7OCWEbQKvI36Jpc0
Csh8yzx/IWB/eiy2a+l6NPdWovAbGMsLIfl4bKtK20l//K09aDB7YTGq7yp+
qEjy09bsH1ijnY4nlLjmGbT6wqz321avI783JcNjC5drEMhyZz0OvVcMhqmx
88ta+6GH5vQeYHB6tyguvTrYpIH+sn5GJqk52OJiMiOG5H3vE1jc2kAGt/YN
R0WYWkU0JnmHdRwMCoaBoAq142S8pGku7lUGF3d6zB6ThfIlWFSwhetDezw+
P/N7zQ6yLi1PeB4ZP5CNd05KHM/micI7CVFpxaT/L9H827kM/m0xzb/lZPBv
FRckGT5AI6z+2RuQcKYQ0rnV64PIfFhA84cLGfzhwymRnbV2magbPmOIc5U/
nmNfJbF88H+c4ccMznAizSWexOAST1OW/TNyqRS3O6Q92ucYgTINvzJFSN5x
bpaGAN/uSLzu6J7M2RYDZ7ILH38m8y2G5hWbMXjFS32DPcbMM3FV0x5Vy/ok
fNQto/ad8ocSvHQ0z6IIu/KctnYEe2GucvHEBBLf/m4VPHLjeC5axFtrLdGP
xcPvXDOmkvkpR3OP5Rnc4yaab1zM4Bs7TW7fV3U2FmWdxrg3S8bBJjZTEV6y
L+y029BfGpGI13mV9VXm84K/q6iVKln/XU+8SdL7mIAvnxWUPbhxHvv7jZdV
UffnwzzYrtgnYMR5Y8Psk6Xo75DUEF5P8jKXpquv3oegP7fcoR99iehQ9Wrg
I1n3QmiuchiDq6zJGyjOfpHEvVwH40Q1o/Dp/oGst6Q9Z+/N1Ip4n4VqLTFL
xTICcb6PzWMdsp57Op78OkM4AQ9d/zRDVcwC2yUHwheQeXih2exd275QXBHn
yLliljv+XnGlhZe6j8c57fgDtesokiie0KoZiMdbl8iGkPI/2ekTkTsMR8rz
9IUC7fGW2Pm1lF+zByuOwlFWHIXjcdQGVlyNr1lxNY7H1Vo0//kbg/8cpO2Y
agd6MFEpV+56ozxMHBYToO6fWB7tS0qX9wXR1af1CvMD4aC9hNxh8l67nYo/
/FRDYedxzVNh+p5Q+2nWK0ofdKD5qLrhBFE0W/E+8bN9HCgrd17aReK3IzRH
mp/Bkb73O+BQVdtl3LbOddGUU/44p9x8ShD5XrgUWLzoRgYvWrc54dsPYWeM
m30ud/aSAFBc7lxP3dd9o1o1lBmagnn6S2dUoC9yaPrVb6f4Ff/Bl3Z4yuJL
czD40gdbl95pEbCCQ6UGeXc4/bFjO2+XN6WLDO5LsGfXR9+1f6y6hT1ge+de
K3nSP2J3eUp0MAx9bxmHbNtG9qXDTiV7KB0BzakuYnCqyYT4vuLaVRzar8L5
5Z0n7FrYevMtdW/E87fv8BwffHE32ge54jCwxSzNjsyTVepRX7789IT3o5c9
N132wx+8rpJLKB3TwN88CDh4/uZBOJ4HJdMc7NMMDrayZd2mGxZ+WO+/QmFv
uw6UXX7lXU1xBmg+9nUGH7t5ZyZn7aKLsNL+7Gc/Hzd4oeDfQekf97Vxy+m8
88fUBn7/C03BuITj5E5/Mu6raZ52CoOnnU1zre8zuNZ7E15U1j5zhoVy/Bnq
+32hpN09gRr3PXsig64sCYMx8egHWg3hkDRR7hH1/691NO96L4N37crKf6GA
lf/CeP47n+Z4r/79L8d7cPL7H22e9uD+YxDjeH0gcWimVgOVr+mamuNvH1B6
0Kzs9tESPWUOr2kh5RY09/sIg/u9mOZ+xzK43xY5z3ZHzIuEc9nXzFO2BOHO
J935G6j/z04dyBAOvAirB6/N77G4DuuWLfNZR9qzunrdXK/eq/Coc/1KoXpP
mCT8oa2dvFealW+CESvfxPF8cxfNFR9hcMW1aa74LQZX3GOyTeNpzquQcURf
cz9nLh5WavU8R9bzd0H94vtsXeHFrFOSx0z9YMYznzFKN+d1X+H+sxQ/gDPe
MwJ7gqD0m9n3LuqejFL38WR5B7RTc/6Y5JGN6lwbOwRInB+ndGZdm7UB7rfL
7nBeVIhKVS+/aZE4uXiP1bOZlea4aMWtaaNG+di0gE0zn8R7t6cZ743PjAOj
8ggZVTljWOaqV8lO3een+eRmDD55E+u8AujzChw/r5CjueWpDG75Sveas1xi
eig1y982K7oQeS9+MvhE9sfFNLc8lcEtP0bzvSUZfO9m294tZZ6IkQtul33w
sMK+a2yXde+Seeija2R6wAfrzmRW8h26BX/mDY7pkHh+Ic0/X8jgn/vr7eBY
+7oIH7rOXHPgZzpY3i81n0SeN6a56NcYXPSqnfI7O7VsUH36W491Xmcx2vFA
GnX/+S3NS7dg8NJflf2yTueNhi4u3vLo3lCY9MgviY06n9ki2pTxuww1VYrk
chcE4Z7LYN56j7Rf6ZKOS0UCZInJjf1cFQJJxrc168n+xXtp3QrL3FKsqeOY
dMwtGOfNq/p1msQJK7xFq270FmJP8SbNT8URuMQrqJeT7O8PaO56A4O7PtnG
LO1dSCaszg2teCDhDw89tmeNkXkiqlL3RGnNVSg6/FouXjkBtp/ekoxkfdji
UbpfWr4IBc+nsdkVxGLcQ8clLm390LHF4ey9M7n4sXl5H8yLxeEhkY45JH4w
fMhVLfnTG20Pr61P8kvCF0sVltWS9l/9D8655ejXJ6mcp9HT2O2t2LZEnMZ2
4HsUeW+FtPbgtiENfKRwf/vk634gI60Wep/M/xTTHzcadDLwxN4qk2sj0Shb
XWofT/Zxr98sbvwk3X+58d40j305g8du4zORX1j4JsxsSD8hUO4OEfZF/NEk
XuIW95J4Fn0b+JXfL3mf4A0W6oMWxXX90EZz1/0Z3HVxmnOuwOCc3w8V5GQ7
FA8KFr/zQnbkgs/iZ0mi3f/j0j9mcOmv1SaKjuRYwIXAwYqxaYbIs+JaWy1p
f0+xLK/7yUI4ZHZtCccCW/RUb1keQuLSMJpj/4nm2LfRHHuLh3O35VTmwPQ2
u8sDL3Ih+Nd6tgskzv8TGyqpMzUCcqZUiRsFXENR8Q6F82R+7rirvyvR6RY8
8dwywZTXDzUHBqR0G0hc9PRObPDmm2AMEsdeCvjhyzqJXRtI/+ymOflCDE6+
qK6LI79/GfhPj5tjZJAPlyLfhL3K6ofRjUsCB0RyoP0jj+6ltiRwydKImUL6
oZ7m6i9gcPXVQa9oeFshiJYdbxredxNWKc1bKkbymvs6BTtrNrpjY8BK8R+2
AdhRXdA3SOZzE6/Qi4zdEuAx9bZHvpQ/RmsJtOZQ8TzN5//K4PPHcjmcSJoS
BIVr/nxtb4rDZJ0LD2VIeQTNn+dn8Oe7bj1eKcV/G/rUJ6S83pABiWoD85rJ
OhPoIjSUf6UCZsXGv1oVVgirOJs62D374ZTdqk9VopXwLbj9MVtUJvwYjE/t
DeyHoVpV3olS19CzdsaVKLV4PLzYZMoEsg5U0r4AXyv+9QU4QHPycxmc/C7a
FyCf4Qsga3Q18DJfMH4VDyh46YGgyHWk5QaSOFBd0i+5pxL4BPM3jKm4oXKO
p1VJRD8M7zHg9ilxBlMt8SX5BhXwaU5IvURaPxjRfgE2DL+AKueU3RVV5cC9
IvhTE3ccRqfs3FGdT37v4Tuu/lWV8C6pOkEo4wbyXN3dcCSgHy6XPnOxm1IO
KnsWP404VIxGEs6RWuFkH6R9B7Rp34FjtO/AhW02k852BkPbQY7oRVEI5t9W
W+wl7dduHpP7ciwHRtbGu4U434G9bNVpz8h7LWmfghSGT4G4RHv99tuJZL1Y
1jJN+R4I5L0YPu/aD/YbV6z9kp4DnPVJP05PzcczW08WXia/S66bn3w7NyHe
iftG8qxyPBUVKnaF9IMKqz/hB6s/cbw/o3m9Pxmy58EZruFFOwILYM/8t2nz
yPyUoH0QnBk+CB+sy7i3SkTAeZcpGuzTC3DBFYMH2mT/ta9Re7H8bQrwS67Q
SL16G3kwVp69iuRl7m+UpvYkQOklk0tRF/OxTmBqYDrZH1eVtVSfUcsDoSPl
m4XsroNXUsrgra5+mE37MsgzfBkyVx1WaGyXRsP7vCtvRyRCdF18lgqZ5/18
+y9cPGWBW40KTVpITCRqL1xN6SK33IvbG+Pkij9/WW5S4EnEYRcXzo3keVva
74CL4XfQx2onlrDaCePt/EP7NQgy/BpCb9+Wda/JhequuiVPwnJQ8M5Svl6y
LlnRPg7dDB+HZNrHYSHDx4Gf9nFIYPg4KLLGEWNZ4wjj4zgwfH3SJ3tXzDpi
9uf04bs4d/sFERsyf+7HPXF1HE0G9Y/XnlmuuYcYsd5yhVs/dNuZb9PZZYH2
7uX21WdrMNxJIq1Srx8a+n3E7hraww3twKDcoUqsk5/WdIN8R/HD12Y8XlGO
vkMOt473F4L4wbO7w6L6YZ5TetwEoUi0W7JXdCS+El7M45vwljy/k/abSGL4
Tawamc4VrRkHh3T2/VIpK0PZ4XeF9yv74Trre0dk+C9E77m+Xsk2DzsUF39d
ejMLKn5JKZiQ+cb2H/4O21K8drl/qMTg036GCakKYKpZ8U0jsh82RjlXd566
gzwjo4cWh4Wh2tKclFvkvVK0jwMwfByW0z4ONxk+DtNiuB/NO6ME25ZtO/fp
VTw8cutUMaC4E7SPxjGGj0ZCtLZfdVo+Lt6UsUIkxx8fd8crvCf1DNB+GSYM
vwwr2l+jjeGv0ZGzJbh6rBLNp77t4B9NwqYGfZG7ZP1Z23ysy+B6NPKEzZ7f
4REH95qniV0jcUgD7buhyfDdyH+Xq95ytBDLmxICFS7l4I5tw3N7yT64UNKy
LEGgCkMG+L/dnnsDm1NHVgX6kO9oIYeum1Y53ip+ueGuXS7OnbPuutSNfvCh
/TsaGP4d08tZPh2tDJ8O5wM9qsbseVhRmrIn0iMf1ljYYXM9yQc/pDUNr0pH
5VN2fAoqQZBZe31JIYkTdng72WXvzcUiJZ69o4YhwCHiJSnxqR8eF6mVzipM
Q9Pnvy9HPLuLR4NEPxQnknU7+WrL4VsJmKc8GvjrTik+2PvFetajfrhJ+4OE
M/xB7gsdLazedxNXBMlEso3k4X2XKxYCTWTfEX51ot7gDi5eeWFE2C0WYhJ+
VcSQfdD2mewhsw/56Pm884OccxjcO756bElHPwQkWNmHD+bjBbm0OMV1FuCW
y616jsTzZ4XZ2YN93TB74XzV/fuKUXv+g+obZB0Q2sOzqDc5Ge/YfpNpscjF
Js73WS/I809YcRSqseIoHI+jnrPiauxhxdU4HlfH0D4mxrSPSSftY8KZMMrX
KG8HL6xdJ4g7quDl5FS3SkpXsjbnVPDdYpD+OZPr0NSr4FDzR34X+Y6kq8Hj
4NwCqLmpPvahVgp33R+8u5O0x/pi7uszrokgEnI389XGELj+rbdJlswrYdoP
ZSPDD6Vw9uefSY/yUEzG+MDyrX74067OSYrM/4Hw/7/vyfLyXi+LziRoW6cd
savLD7xVPluKkvp1Y2u07VzLkOuuU3nIgzjcmOv/VpnsF5dpn5TpDJ8UK9on
5RfDJ6XhtUaFf2cGbnn+nXdRmh8KhdnlFA9SOsf2lZvs0+HDwEjeuwRfsLxs
u2vxF9Jv/MeXmq4yw+jGBYvUXIPA9lbQdEqfa/Mffiu9XRfj8sKSoOaaBF93
YhDceR386TXF626dVbW/OBeL7ZyTx2an4VfvwpQCsg9a8iy4dcU9EbUebu3i
u3cdH83UrA0j/baLlQfhJvG/eRCO50FGtJ+LHsPPhXPnlBrXdgcccyl5hDH+
UP956YgaaWc47fMSV/Cvz4v4boMl93JzYNnuoZu6Em6g6rtIdXofiWNzU7e5
NCXi2e9XZu03voFza3knLCb5hQPtC/OS4QvTTPuzODL8WXbYz0hULM2HQa88
tRnJLvAr9XM9dR9vmYvPBLnaclDorfDQCbeHlX6ia76R7+4Q7duynuHbIs7K
f0GQlf/CeP6bfIvlR/OM4Ucz8ffS9X65WbB0oGdS4axYEPr2/fZe8rysp9GR
/Su1sVT7bryFli9yDFju6CX9c4f2r1nG8K9xo/1rShn+NTPvZPFXRifD1lXf
li7NjcfzHBOG3Mm6NF+6q1boeAGMxPg2VeTEwlXfj3o7yL6/pkBaVky0GGZq
TZrirhoJyQmtzyY8I3E4K9/E56x8E8fzzXe0P04Kwx8nlfbH+cnwxzkZbt7w
67EJfDy2fdqNtCTcmLd/TwCZP+vNh8O8J98GMwW9m482hMD6vMc3c0mclhDI
Jzw0uRw2t+S2PlIMhmX7KgxTy8g+fu+d4fPyUBRITDyqUhWBU3K+1FP/12uT
1NM+MscNbz6K4jdPC8ES2+3N1LnuN5VG6xWHXJCzvd/t12Y/1I04E3+e9JvB
m/t9+eqFcGGorJO7MB29bdYdiCT71x/aZ4eT4bOz1PvveQWUsM4rcIw+r8il
/XfkGf47M8uKVDYnmqNPk7P5oUPheHZDj9YG0p7y//Df+X8Xq/9L
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.09259458092137765, 0.7486122776543305}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 2, $CellContext`k1$$ = 
    0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
    0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25}, $CellContext`kDefaults$$ = {0.25, 0.25, 
    0.25, 0.25, 0.25}, $CellContext`kMax$$ = 1, $CellContext`kMin$$ = 
    0.05, $CellContext`locDefault$$ = {{0.1, 1.3}, {1.9, 
    0.8}}, $CellContext`m1Sel$$ = 1, $CellContext`m2Sel$$ = 
    1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$7123, $CellContext`qVec -> #]& , \
$CellContext`meshSize$$ = 8, $CellContext`minAngleBetweenLatticeVectors$$ = 
    Rational[1, 6] Pi, $CellContext`minSquaredDistanceFromOrigin$$ = 
    0.1, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
    1.4}}, $CellContext`mMax$$ = 30, $CellContext`moSel$$ = 
    2, $CellContext`nArray$$ = {{1, 0}, {0, 1}, {1, 1}, {
    1, -1}}, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10, 15}, "numberOfMasses" -> 2, 
     "latticeBasis" -> {{0.04400000000000004, 1.295}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.2957472747414907`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.03395723908335312, 0.9994232866577785}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {69, 4}, 
     "reciprocalBasis" -> {{-0.32985610027625456`, 0.7834082381561044}, {
      0.533954562322187, -0.018142085515194015`}}, 
     "reciprocalNorms" -> {0.8500197141833299, 0.5342626787372659}, 
     "qMaxVec" -> {5.34083137896969, 3.356871413216396}, 
     "mObliqueComponents" -> {{0.251515276460644, 0.46785964622933246`}, {
      0.8081474456768234, 0.19181132231064196`}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}}, 
     "pointsDataTable" -> CompressedData["
1:eJxNnQWUXOX5xtd9N+suM7MS92xkI/Ou++7oJqUUt0ILFIqUUrQBCsWhQIsW
LYUQ3JkXp4HirkETQoi7/nfe5/n+p5zDgch+M/fe53v9+13vYSeEjkxJSEhI
Gv33ktF/M/n/3Y9t3vv+6fVau/Sn4BPbRnTLu4OH5S+p09Ff1S59cUQPmPfI
a6c+V6aPx//CFSP6/C2VU79oyNc/x//Cr0Y0kJM08cLSRI3/9Z/Gj+gbV/58
pr/5zRjWi+qk+I/fssuP9aLac+l1xxeenyNYL6qLDvn+bd9nJYL1orr3XxtH
v0G93nHiwqyPbh/RQ57qHf2EOv1d/JcnjuirnuUnHXNlmdovF47or/ImP3TT
+jFqv8wa0fGf7Tzr2GcS1H75UVQPPPvYZ35/9WsxrBfVM0o/eXN7eLcf60X1
hOfiF5QjWC+q757+Y9P0jFLBelF9+Kb1d7/SX6/jD7z8ha2B0eu7rXP0jtXq
tnGjv1EzorMy7qs+4IgyfWHr6G+siWrzFw1p5147Ri+P/8bjUU26N349CRr/
8XF/jura36za/a+NL8SwXlRfs8/b48d6Uf1b/OPm5ArWi+hRdj9LBetF9Nf2
63pd1v31GcX7otryl9bRO1irfywe/Z0VUb3Vfr5M43+87Lqo5sa/3vwxGv/j
M46I6mf2eQka/+Pu6VHdYc/nqRjWi2ip3b89fqwX0WftfucK1ovoTns+pYL1
IuqJP+faep0Z/+ffUb3L7nOtJsT/OT2qOXYfy/SN+D8dUV0V/9yv8/SG+D8F
UT3GLmx/7Kj4P19GdJotuCyG9SJ6hD2YvX6sF9HvTGi5gvUi+le7UaWC9SL6
oV1fvcb/VnBJVAuXxAVcq/Y1G6P6B3vepdDrxog+H5fXhXnQ/3MRrYzL6e59
MdPrJRFdeV/8eq+IYb2IPmT63+fHehHNPl9X3NaZJ1gvrB67f6WC9cL6V3ve
Pug1Napn+ZsPeqq3Fnp9N6I/3PmPlzzLS/XD+G26JaI3lKeM5E3OU5PvcRF9
Y4UJLma3dW5Eb/1h9PLuu9GP9SKaEN9+n+zzY72wzrDnmSdYL6yPxLf3j6WC
9cLabvvNB70+FNE18eWqa6HXsyMasv1Zqr+M/8ZARH8X//rv5mpcnlvLI3rW
MXEB7o3Ff/yF78N60ZfDoz/xkB/rhXXoiPlfDV+634/1wvqL+MftzBOsF9Zu
sxdlgvXCujP87egd8EGvB0d0ie3nGuh1UkSf+/3Vo3ekVFfGdbMzrP1mr3L1
/vgPvBLWaaO7rf2SPTGT1VVhPSZ59PY99Kwf641+n/jyngTodVJYz7H9P0aw
Xkg/jW/X9jLBeiF9wH7QB73mRPQlu9Aa6PWTsE60jVyqR8b1eldYG00IuToj
rteTw/qN3ejdsf3xf/xhbbAPfsmP9cJ6iv06AXr9JKR32+eNEawX0uPtwZYJ
1gvpkfHbeZ1PQ3F9PTl6vWZfarQu/rkXhPX69ktGFVYCex0O6167nznQvyes
18TNg293zL7mzyG9xp73Cj/WC+mNcXW9nyBYL6RHPxO/4fmC9UKaFL+dN5UJ
1gtp1dT4F/DBvh4d1ptfihuIGtjrmWFNicvxzRI1vSaE9QNffEPkQP//DWlX
/HKO3xUzvf49pCnmX97yY72QvnhqfIMmCtYL6e734xs6X7BeSK8dVaeuKIO9
/m9Q37X1fbCvxWHNMntXA3u9MqQnxv/6bSVqj/H+0ecb3875OdD/GSHdcWZ8
Q+6MmV67Q/qU7cd3/VgvpGvi5vQviYL1gnpZ3PwelC9YL6jj4pe7vQz2+oyg
XmT68sG+Ph/SU+PyzauBvb4spF/EzcPvS9T0ekBI/xI3H49lQ/9jQ3pv3Lyk
7YyZTLYEddOU+P3+wI/1gloQX/7bRMF6QfWZ/vMF6wX1GbNP5bDXY4O6yG60
T82+Hh/Sb+wvVsNezw9pny1coqbX9JAeajciG/p/P6gH2oPfETO93hbUCfbr
j/1YL6hzbf0kwXpBfdQMX75gvaAG7O+Xw16/H9CtcXPU5INeq0I6NBptzHuk
GnpdHdTH4uarsgTxxaNBnXdQPADIhr0+N6h5psftiC+GgnqY6fszxBdVQT3Y
9ksS9Lo6oL1z4g4yH/HFowH9Nm6OziqHvT43oP82Pfig19dG75/5g2ro9drR
+xt3fz8Xa2b8Mg8LapH5hyzY66lBVbOv22LY9gH9u9nrL/xYL6AXmP1Pgl6v
DejncfkXFgjWC+ipcXd1Xzns9dSAHmr20ov44pRRfcW36wHV+mJcX21BvTxu
nrUY9npMUH+Om+fBLOj/84CeZPHBNsQX9wT0R/PXKxFfnBLQ+y2eSRasF9AT
zZ4XIL4YE9As8yfluH9PDGuZ6c2L+MIX1GvMP1VrT1w36wO6Jy7nq4thr58J
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
V16xdP+wFPpFn9TZ9/uO9rmBn7cF/e3aJuopk/oZK7AHxag/B8dTX1XU0wSB
ffWinrd0ktxoP1+BuHXYJ8gnC5A3ra4XxEcpuH/nNcr5CMBj5o+qx0qDfb8t
frufj44T9GcyGR9OEMQ3xdDr6onyN/MvVbBH500W5MdexotTGadVMH5ukBPs
PhUwvmhinJJMfY+TVWjko9788Hg5yf7+VtSbByZS35nU8yTMkVxejHzw7CnU
ezXi6ZxpjIu8nL+bJoj/y9F3+dNY+dzsQQH2e9l4gf9n/2T5BOk3va6M2XX0
TRI1PW3zm16/nSzon2cxv5jK+8f+wCXTBPlhNZ7nkulij2+7F/WhxhnyjRno
cu6vCdJj+6kA9ZZlE+VgM9BJ3G+T5SDTw5eMN6ZIngliG/37NO63LMY70+Vx
85fs53w0nfuP9e/bZ8gpZqB9tCszZcj+vBx93X9PEtRr8hGPdU6hf0tCfP/l
VGky/X+G+u4z0+RA2//bkV9cNF0w35QF+x+dQf9UAv/gmynf2fVXQ1/rZ0rM
7q8P+nlmljxt96+c+32qeO3+5iOOPX6aFNj9T4L/aJku68ygf4x6fPoMudcC
lB2op74/g/s/m/n7TEF9oAT7+fhZtAfVyFdbmgX9Ix/qr+mzaafLWd+Yhj7L
5fnQ75PTab8T0V+5YIY8ZhvpA+g5PFN22AI7/KhfzBLMn2azvjGLei+BXp9s
5nOsQX/lgtmoswR96B+G58g1tv/KWP+ZIbtsf/J5pc6UF23/cl7/nZlyFgI6
xBs3z5Iuy4fYHziumfYoh/Wf2fT/JdBr6hzapxrYo3fmCOJNH/q9N8+VBBN4
GetjMwX10HzkO4FZtE+JqC/UNEuX5aNvo767plmuMf+6C/798dmC8wE5rI/N
oX0pgZ8KzJUZpr8a7L+aeYL6rg/3bc08+a3Zb/Yr3pol79n15aMefmOznGLP
OwH28ZjZUm36XoH6d/Mc+cbqDbvRf0uay/2dw/rhXJlk+7kEer1xHu1lDeuF
LWLu/1of64nz5VPzb2Wsr84W9OvHYH+vms39l4D5gEfmyH2Wz7yE/X7uXJlm
8dBuP+qn86Tf9lMu/FVlC+1TKfS6qkWQH9ZgPuCR+fIHi7d8mH85dwHmArrL
WH+eI79AYot6xsy5gjgtAfZ6/1w5HYPuyAffmCdn2cbag3zwhhbqN5dx8nzU
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
fzpe3BjUiRZM192cD7J66QnT9EzOB8EfTtUPOR+E80qTWT/Npf+cRF4ceZWn
TyAvroa8uHHkxfF9VhdPJy+O72d7dhp5cWMYJ05lfTOB5/mmaM69mA+C/5mk
DZwPgv+aqC9zPgj+ajx5V6U8zzeWvLganutpIi+uFnpd5HhxPH/+7RTy4vi+
uL7J9Bf7yYubqHOnYj4I9n6CnsT5IPiLcawP5pIX10ReHM/r9jVSD7X0J/Xk
xZHn+cNk8rRKaY8nkRfH+aCHJ9A+7ycvbrwuL8Z8EOzrWFXOB2G9RtQBivNo
jxvI3+J80MOsyy2sJS/OSx5ZLXlxE8mLK6X9G0/7yP5A9Tjaw33kxTXpOfdg
Pgj2rEHzOB8Ee1jP+hfncR71khdXSv6HR9/mfBB4cTXkxbGf88Q48uJKaW/G
kheXR/5XI+3PXvLi6vXtszAfRA6CHsj5IKzn0UM5H8T7QB5YKTkkVbS3teLs
DHgoteTFNfF6Srm/G8iLyyUvzsf9voe8OK/2HIH5IHtMp9TpvZwPAi+umnoc
w/1dQV5cGeP3EvqjWtqDQvLiari/6smLKyUvzkteXC55ZB7urz3kxdXoNS9h
PgjxXyX3D9+HVlymD3A+CPupiHwyvg9tWb5ewvkg1MmyGHfWkBfnIaeklPqt
pb5zWL+rYj16N+tz5Yr55FfJiyuhXhPIbyF35aMxnL/MZZ5dRl4c36NRW0de
XAJ5cTWOK05eXAn1UkFeXA7z+VLWN3cxXy9SnBd7w8/PpT4SyD/JZP02n+dj
ksmLK5NO1tER79XJJhSIyItzz6uM9oLnhxcXkxeXw/i+gPWyXeS3ZOsmi9ff
IS8ulc+D7x8bty8GXhb7AwduJC+uTGbZB74bQzxcx7ntleTF1dCvFZIXV0L/
nUdeXDZ5cemsv+wkjyiR8dN75MlsIy8ukf2ab8iLy5fV9usVfvDbygVzDxv8
4OnV8RzPHvLiqvl9ssiLKyEvLpm8OJ7Xrd0dQz6/I4ZzomtjsFcf+uHHnyAv
Loncnx/Ii8vnuc4d5MWVk0ORJBhnqOPcegbngquZ9yWQF1dCXtxmzhlnK851
fELO8o4Y9PcJzoWM/ncm80DoNokcuARyldk/OSqN/y0nJyCHf488zxsKyNOp
Zh3lB/LiSnQartePcDRLeT/80B/fh1a72496/ud+3k/y13i++sAs8uJ4Hv7Q
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
i2sij3mx/B9qay3B
      "], "lineTable" -> {{
        Line[{{-10.636000000000003`, -92.55499999999999}, \
{-4.5639999999999965`, 86.15499999999999}}], 
        Line[{{-8.736000000000002, -91.755}, {-2.6639999999999966`, 
         86.95499999999998}}], 
        Line[{{-6.836000000000002, -90.95499999999998}, {-0.7639999999999971, 
         87.755}}], 
        Line[{{-4.936000000000003, -90.15499999999999}, {1.1360000000000028`, 
         88.55499999999999}}], 
        Line[{{-3.0360000000000027`, -89.35499999999999}, {
         3.0360000000000027`, 89.35499999999999}}], 
        Line[{{-1.1360000000000028`, -88.55499999999999}, {4.936000000000003, 
         90.15499999999999}}], 
        Line[{{0.7639999999999971, -87.755}, {6.836000000000002, 
         90.95499999999998}}], 
        Line[{{2.6639999999999966`, -86.95499999999998}, {8.736000000000002, 
         91.755}}], 
        Line[{{4.5639999999999965`, -86.15499999999999}, {10.636000000000003`,
          92.55499999999999}}]}, {
        Line[{{-10.636000000000003`, -92.55499999999999}, {
         4.5639999999999965`, -86.15499999999999}}], 
        Line[{{-10.592000000000002`, -91.26}, {4.607999999999997, -84.86}}], 
        Line[{{-10.548000000000002`, -89.965}, {
         4.6519999999999975`, -83.565}}], 
        Line[{{-10.504000000000001`, -88.67}, {4.695999999999997, -82.27}}], 
        Line[{{-10.460000000000003`, -87.375}, {4.739999999999997, -80.975}}], 
        Line[{{-10.416000000000002`, -86.08}, {
         4.783999999999997, -79.67999999999999}}], 
        Line[{{-10.372000000000002`, -84.785}, {
         4.827999999999998, -78.38499999999999}}], 
        Line[{{-10.328000000000003`, -83.49}, {
         4.871999999999997, -77.08999999999999}}], 
        Line[{{-10.284000000000002`, -82.195}, {
         4.915999999999997, -75.79499999999999}}], 
        Line[{{-10.240000000000002`, -80.89999999999999}, {
         4.959999999999997, -74.49999999999999}}], 
        Line[{{-10.196000000000002`, -79.605}, {5.003999999999998, -73.205}}], 
        Line[{{-10.152000000000001`, -78.31}, {5.047999999999997, -71.91}}], 
        Line[{{-10.108000000000002`, -77.015}, {5.091999999999997, -70.615}}], 
        Line[{{-10.064000000000002`, -75.72}, {5.1359999999999975`, -69.32}}], 
        Line[{{-10.020000000000001`, -74.425}, {
         5.179999999999998, -68.02499999999999}}], 
        Line[{{-9.976000000000003, -73.13}, {
         5.2239999999999975`, -66.72999999999999}}], 
        Line[{{-9.932000000000002, -71.835}, {
         5.267999999999997, -65.43499999999999}}], 
        Line[{{-9.888000000000002, -70.54}, {5.311999999999998, -64.14}}], 
        Line[{{-9.844000000000001, -69.245}, {5.355999999999998, -62.845}}], 
        Line[{{-9.8, -67.95}, {5.399999999999998, -61.55}}], 
        Line[{{-9.756000000000002, -66.655}, {
         5.443999999999997, -60.254999999999995`}}], 
        Line[{{-9.712000000000002, -65.36}, {
         5.487999999999998, -58.959999999999994`}}], 
        Line[{{-9.668000000000001, -64.065}, {
         5.531999999999998, -57.66499999999999}}], 
        Line[{{-9.624000000000002, -62.769999999999996`}, {
         5.575999999999998, -56.36999999999999}}], 
        Line[{{-9.580000000000002, -61.475}, {
         5.619999999999997, -55.074999999999996`}}], 
        Line[{{-9.536000000000001, -60.18}, {
         5.663999999999998, -53.779999999999994`}}], 
        Line[{{-9.492, -58.885}, {5.707999999999998, -52.48499999999999}}], 
        Line[{{-9.448, -57.59}, {5.751999999999998, -51.19}}], 
        Line[{{-9.404000000000002, -56.295}, {
         5.795999999999998, -49.894999999999996`}}], 
        Line[{{-9.360000000000001, -55.}, {
         5.839999999999998, -48.599999999999994`}}], 
        Line[{{-9.316, -53.705}, {5.883999999999999, -47.30499999999999}}], 
        Line[{{-9.272000000000002, -52.41}, {
         5.927999999999998, -46.00999999999999}}], 
        Line[{{-9.228000000000002, -51.115}, {
         5.971999999999998, -44.714999999999996`}}], 
        Line[{{-9.184000000000001, -49.82}, {
         6.015999999999998, -43.419999999999995`}}], 
        Line[{{-9.14, -48.525}, {6.059999999999999, -42.12499999999999}}], 
        Line[{{-9.096, -47.230000000000004`}, {6.103999999999998, -40.83}}], 
        Line[{{-9.052000000000001, -45.935}, {6.147999999999998, -39.535}}], 
        Line[{{-9.008000000000001, -44.64}, {
         6.191999999999998, -38.239999999999995`}}], 
        Line[{{-8.964, -43.345}, {6.235999999999999, -36.94499999999999}}], 
        Line[{{-8.920000000000002, -42.05}, {
         6.2799999999999985`, -35.64999999999999}}], 
        Line[{{-8.876000000000001, -40.755}, {6.323999999999998, -34.355}}], 
        Line[{{-8.832, -39.46}, {6.3679999999999986`, -33.059999999999995`}}], 
        Line[{{-8.788, -38.165}, {6.411999999999999, -31.764999999999997`}}], 
        Line[{{-8.744, -36.870000000000005`}, {
         6.455999999999999, -30.470000000000002`}}], 
        Line[{{-8.700000000000001, -35.575}, {6.499999999999998, -29.175}}], 
        Line[{{-8.656, -34.28}, {6.543999999999999, -27.88}}], 
        Line[{{-8.612, -32.985}, {6.587999999999999, -26.584999999999997`}}], 
        Line[{{-8.568000000000001, -31.689999999999998`}, {
         6.631999999999999, -25.29}}], 
        Line[{{-8.524000000000001, -30.395}, {6.675999999999998, -23.995}}], 
        Line[{{-8.48, -29.099999999999998`}, {6.719999999999999, -22.7}}], 
        Line[{{-8.436, -27.804999999999996`}, {
         6.763999999999999, -21.404999999999998`}}], 
        Line[{{-8.392, -26.509999999999998`}, {6.807999999999999, -20.11}}], 
        Line[{{-8.348, -25.215}, {6.8519999999999985`, -18.815}}], 
        Line[{{-8.304, -23.919999999999998`}, {6.895999999999999, -17.52}}], 
        Line[{{-8.26, -22.624999999999996`}, {
         6.9399999999999995`, -16.224999999999998`}}], 
        Line[{{-8.216000000000001, -21.33}, {6.983999999999999, -14.93}}], 
        Line[{{-8.172, -20.035}, {7.027999999999999, -13.635000000000002`}}], 
        Line[{{-8.128, -18.74}, {7.071999999999999, -12.34}}], 
        Line[{{-8.084, -17.445}, {7.116, -11.044999999999998`}}], 
        Line[{{-8.04, -16.15}, {7.159999999999999, -9.75}}], 
        Line[{{-7.996, -14.855}, {7.203999999999999, -8.454999999999998}}], 
        Line[{{-7.952, -13.559999999999999`}, {
         7.247999999999999, -7.159999999999999}}], 
        Line[{{-7.9079999999999995`, -12.265}, {7.292, -5.864999999999999}}], 
        Line[{{-7.864, -10.969999999999999`}, {
         7.335999999999999, -4.569999999999999}}], 
        Line[{{-7.82, -9.675}, {7.379999999999999, -3.2749999999999995`}}], 
        Line[{{-7.776, -8.379999999999999}, {
         7.4239999999999995`, -1.9799999999999995`}}], 
        Line[{{-7.731999999999999, -7.085}, {7.468, -0.6849999999999996}}], 
        Line[{{-7.688, -5.79}, {7.512, 0.6100000000000003}}], 
        Line[{{-7.644, -4.495}, {7.555999999999999, 1.9050000000000002`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.555999999999999, -1.9050000000000002`}, {7.644, 4.495}}], 
        Line[{{-7.512, -0.6100000000000003}, {7.688, 5.79}}], 
        Line[{{-7.468, 0.6849999999999996}, {7.731999999999999, 7.085}}], 
        Line[{{-7.4239999999999995`, 1.9799999999999995`}, {7.776, 
         8.379999999999999}}], 
        Line[{{-7.379999999999999, 3.2749999999999995`}, {7.82, 9.675}}], 
        Line[{{-7.335999999999999, 4.569999999999999}, {7.864, 
         10.969999999999999`}}], 
        Line[{{-7.292, 5.864999999999999}, {7.9079999999999995`, 12.265}}], 
        Line[{{-7.247999999999999, 7.159999999999999}, {7.952, 
         13.559999999999999`}}], 
        Line[{{-7.203999999999999, 8.454999999999998}, {7.996, 14.855}}], 
        Line[{{-7.159999999999999, 9.75}, {8.04, 16.15}}], 
        Line[{{-7.116, 11.044999999999998`}, {8.084, 17.445}}], 
        Line[{{-7.071999999999999, 12.34}, {8.128, 18.74}}], 
        Line[{{-7.027999999999999, 13.635000000000002`}, {8.172, 20.035}}], 
        Line[{{-6.983999999999999, 14.93}, {8.216000000000001, 21.33}}], 
        Line[{{-6.9399999999999995`, 16.224999999999998`}, {8.26, 
         22.624999999999996`}}], 
        Line[{{-6.895999999999999, 17.52}, {8.304, 23.919999999999998`}}], 
        Line[{{-6.8519999999999985`, 18.815}, {8.348, 25.215}}], 
        Line[{{-6.807999999999999, 20.11}, {8.392, 26.509999999999998`}}], 
        Line[{{-6.763999999999999, 21.404999999999998`}, {8.436, 
         27.804999999999996`}}], 
        Line[{{-6.719999999999999, 22.7}, {8.48, 29.099999999999998`}}], 
        Line[{{-6.675999999999998, 23.995}, {8.524000000000001, 30.395}}], 
        Line[{{-6.631999999999999, 25.29}, {8.568000000000001, 
         31.689999999999998`}}], 
        Line[{{-6.587999999999999, 26.584999999999997`}, {8.612, 32.985}}], 
        Line[{{-6.543999999999999, 27.88}, {8.656, 34.28}}], 
        Line[{{-6.499999999999998, 29.175}, {8.700000000000001, 35.575}}], 
        Line[{{-6.455999999999999, 30.470000000000002`}, {8.744, 
         36.870000000000005`}}], 
        Line[{{-6.411999999999999, 31.764999999999997`}, {8.788, 38.165}}], 
        Line[{{-6.3679999999999986`, 33.059999999999995`}, {8.832, 39.46}}], 
        Line[{{-6.323999999999998, 34.355}, {8.876000000000001, 40.755}}], 
        Line[{{-6.2799999999999985`, 35.64999999999999}, {8.920000000000002, 
         42.05}}], 
        Line[{{-6.235999999999999, 36.94499999999999}, {8.964, 43.345}}], 
        Line[{{-6.191999999999998, 38.239999999999995`}, {9.008000000000001, 
         44.64}}], 
        Line[{{-6.147999999999998, 39.535}, {9.052000000000001, 45.935}}], 
        Line[{{-6.103999999999998, 40.83}, {9.096, 47.230000000000004`}}], 
        Line[{{-6.059999999999999, 42.12499999999999}, {9.14, 48.525}}], 
        Line[{{-6.015999999999998, 43.419999999999995`}, {9.184000000000001, 
         49.82}}], 
        Line[{{-5.971999999999998, 44.714999999999996`}, {9.228000000000002, 
         51.115}}], 
        Line[{{-5.927999999999998, 46.00999999999999}, {9.272000000000002, 
         52.41}}], 
        Line[{{-5.883999999999999, 47.30499999999999}, {9.316, 53.705}}], 
        Line[{{-5.839999999999998, 48.599999999999994`}, {9.360000000000001, 
         55.}}], 
        Line[{{-5.795999999999998, 49.894999999999996`}, {9.404000000000002, 
         56.295}}], 
        Line[{{-5.751999999999998, 51.19}, {9.448, 57.59}}], 
        Line[{{-5.707999999999998, 52.48499999999999}, {9.492, 58.885}}], 
        Line[{{-5.663999999999998, 53.779999999999994`}, {9.536000000000001, 
         60.18}}], 
        Line[{{-5.619999999999997, 55.074999999999996`}, {9.580000000000002, 
         61.475}}], 
        Line[{{-5.575999999999998, 56.36999999999999}, {9.624000000000002, 
         62.769999999999996`}}], 
        Line[{{-5.531999999999998, 57.66499999999999}, {9.668000000000001, 
         64.065}}], 
        Line[{{-5.487999999999998, 58.959999999999994`}, {9.712000000000002, 
         65.36}}], 
        Line[{{-5.443999999999997, 60.254999999999995`}, {9.756000000000002, 
         66.655}}], 
        Line[{{-5.399999999999998, 61.55}, {9.8, 67.95}}], 
        Line[{{-5.355999999999998, 62.845}, {9.844000000000001, 69.245}}], 
        Line[{{-5.311999999999998, 64.14}, {9.888000000000002, 70.54}}], 
        Line[{{-5.267999999999997, 65.43499999999999}, {9.932000000000002, 
         71.835}}], 
        Line[{{-5.2239999999999975`, 66.72999999999999}, {9.976000000000003, 
         73.13}}], 
        Line[{{-5.179999999999998, 68.02499999999999}, {10.020000000000001`, 
         74.425}}], 
        Line[{{-5.1359999999999975`, 69.32}, {10.064000000000002`, 75.72}}], 
        Line[{{-5.091999999999997, 70.615}, {10.108000000000002`, 77.015}}], 
        Line[{{-5.047999999999997, 71.91}, {10.152000000000001`, 78.31}}], 
        Line[{{-5.003999999999998, 73.205}, {10.196000000000002`, 79.605}}], 
        Line[{{-4.959999999999997, 74.49999999999999}, {10.240000000000002`, 
         80.89999999999999}}], 
        Line[{{-4.915999999999997, 75.79499999999999}, {10.284000000000002`, 
         82.195}}], 
        Line[{{-4.871999999999997, 77.08999999999999}, {10.328000000000003`, 
         83.49}}], 
        Line[{{-4.827999999999998, 78.38499999999999}, {10.372000000000002`, 
         84.785}}], 
        Line[{{-4.783999999999997, 79.67999999999999}, {10.416000000000002`, 
         86.08}}], 
        Line[{{-4.739999999999997, 80.975}, {10.460000000000003`, 87.375}}], 
        Line[{{-4.695999999999997, 82.27}, {10.504000000000001`, 88.67}}], 
        Line[{{-4.6519999999999975`, 83.565}, {10.548000000000002`, 89.965}}], 
        Line[{{-4.607999999999997, 84.86}, {10.592000000000002`, 91.26}}], 
        Line[{{-4.5639999999999965`, 86.15499999999999}, {10.636000000000003`,
          92.55499999999999}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`primaryDisplaySize$$ = {380, 380}, $CellContext`qLoc$$ = {
    2.670415689484845, 
    1.678435706608198}, $CellContext`qPlaneLoc$$ = {{-2.670415689484845, \
-1.678435706608198}, {2.670415689484845, 
    1.678435706608198}}, $CellContext`rawArrayOfMasses$$ = {10, 
    15}, $CellContext`rawNumberOfMasses$$ = 2, $CellContext`scale$$ = 
    0.2, $CellContext`springColors$$ = {
     RGBColor[
      Rational[2, 3], 0.33333333333333337`, 0], 
     RGBColor[0, 
      Rational[2, 3], 0], 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
     RGBColor[0, 
      Rational[2, 3], 
      Rational[2, 3]], 
     RGBColor[
      Rational[2, 3], 
      Rational[2, 3], 0]}, $CellContext`springColorsByN$$ = {{-1, 0} -> 
     RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`tabNumber$$ = 3, $CellContext`tau$$ = 
    0, $CellContext`textDisOffset$$ = {0.25, 0.25}, $CellContext`tick$$ = 
    True, $CellContext`u$$ = {{0.04400000000000004, 1.295}, {1.9, 0.8}, {0.9, 
    0.7}, {0.4, 1.2}}, $CellContext`windowHalfWidth$$ = 3, Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        If[$CellContext`rawNumberOfMasses$$ == 1, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; \
$CellContext`dynamicsControls], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Row[$CellContext`tabNumber$$ = $CellContext`freqTab$$; \
$CellContext`freqControls], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; \
{$CellContext`massSetter, $CellContext`m2Setter, $CellContext`km1, \
$CellContext`km2, $CellContext`km3, $CellContext`km4}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}], 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; \
$CellContext`dynamicsControls], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Row[$CellContext`tabNumber$$ = $CellContext`freqTab$$; \
$CellContext`freqControls], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; \
{$CellContext`massSetter, $CellContext`m2Setter, $CellContext`km1, \
$CellContext`km2, $CellContext`km3, $CellContext`km4, $CellContext`km5a, \
$CellContext`km5b}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tau$$], 0}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`meshSize$$], 8}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`minSquaredDistanceFromOrigin$$], 0.1}, 0}, {{
       Hold[$CellContext`minAngleBetweenLatticeVectors$$], Rational[1, 6] Pi},
       0}, {{
       Hold[$CellContext`locDefault$$], {{0.1, 1.3}, {1.9, 0.8}}}, 0}, {{
       Hold[$CellContext`defaultMass$$], 20}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`springColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}, {{
       Hold[$CellContext`kDefaults$$], {0.25, 0.25, 0.25, 0.25, 0.25}}, 0}, {{
       Hold[$CellContext`kMin$$], 0.05}, 0}, {{
       Hold[$CellContext`kMax$$], 1}, 0}, {{
       Hold[$CellContext`mMax$$], 30}, 0}, {{
       Hold[$CellContext`windowHalfWidth$$], 3}, 0}, {{
       Hold[$CellContext`springColors$$], {
        RGBColor[
         Rational[2, 3], 0.33333333333333337`, 0], 
        RGBColor[0, 
         Rational[2, 3], 0], 
        RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
        RGBColor[0, 
         Rational[2, 3], 
         Rational[2, 3]], 
        RGBColor[
         Rational[2, 3], 
         Rational[2, 3], 0]}}, 0}, {{
       Hold[$CellContext`primaryDisplaySize$$], {380, 380}}, 0}, {{
       Hold[$CellContext`textDisOffset$$], {0.25, 0.25}}, 0}, {{
       Hold[$CellContext`nArray$$], {{1, 0}, {0, 1}, {1, 1}, {1, -1}}}, 0}}, 
    Typeset`size$$ = Automatic, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`defaultMass$$ = 
        20, $CellContext`dynamics$$ = {}, $CellContext`dynPlot$$ = {}, \
$CellContext`dynTab$$ = 
        1, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
        0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
        0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`kDefaults$$ = {0.25, 
         0.25, 0.25, 0.25, 0.25}, $CellContext`kMax$$ = 
        1, $CellContext`kMin$$ = 
        0.05, $CellContext`locDefault$$ = {{0.1, 1.3}, {1.9, 
         0.8}}, $CellContext`m1Sel$$ = 1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`meshSize$$ = 
        8, $CellContext`minAngleBetweenLatticeVectors$$ = 
        Rational[1, 6] Pi, $CellContext`minSquaredDistanceFromOrigin$$ = 
        0.1, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
         1.4}}, $CellContext`mMax$$ = 30, $CellContext`moSel$$ = 
        2, $CellContext`nArray$$ = {{1, 0}, {0, 1}, {1, 1}, {
         1, -1}}, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`primaryDisplaySize$$ = {380, 
         380}, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`springColors$$ = {
          RGBColor[
           Rational[2, 3], 0.33333333333333337`, 0], 
          RGBColor[0, 
           Rational[2, 3], 0], 
          RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
          RGBColor[0, 
           Rational[2, 3], 
           Rational[2, 3]], 
          RGBColor[
           Rational[2, 3], 
           Rational[2, 3], 
           0]}, $CellContext`springColorsByN$$ = {}, $CellContext`tabNumber$$ = 
        1, $CellContext`tau$$ = 
        0, $CellContext`textDisOffset$$ = {0.25, 0.25}, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}, $CellContext`windowHalfWidth$$ = 3}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ($CellContext`tick$$; Dynamic[
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics; $CellContext`bRefreshDynamics$$ = 
             False; $CellContext`bRefreshDynPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`showDynamics; $CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynamics[$CellContext`tau$$], 
          
          If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc; $CellContext`bRefreshFreqPlot$$ = False, 
             Null]; $CellContext`showFreqPlot, \
$CellContext`couplingLocator]]]), "Specifications" :> {
        Dynamic[
         If[$CellContext`rawNumberOfMasses$$ == 1, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; \
$CellContext`dynamicsControls], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Row[$CellContext`tabNumber$$ = $CellContext`freqTab$$; \
$CellContext`freqControls], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; \
{$CellContext`massSetter, $CellContext`m2Setter, $CellContext`km1, \
$CellContext`km2, $CellContext`km3, $CellContext`km4}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}], 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; \
$CellContext`dynamicsControls], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Row[$CellContext`tabNumber$$ = $CellContext`freqTab$$; \
$CellContext`freqControls], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; \
{$CellContext`massSetter, $CellContext`m2Setter, $CellContext`km1, \
$CellContext`km2, $CellContext`km3, $CellContext`km4, $CellContext`km5a, \
$CellContext`km5b}]}, 
           Dynamic[$CellContext`tabNumber$$], 
           ImageSize -> {250, 350}]]], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tau$$, 0}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`meshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`minSquaredDistanceFromOrigin$$, 0.1}, 0, 
         ControlType -> 
         None}, {{$CellContext`minAngleBetweenLatticeVectors$$, 
          Rational[1, 6] Pi}, 0, ControlType -> 
         None}, {{$CellContext`locDefault$$, {{0.1, 1.3}, {1.9, 0.8}}}, 0, 
         ControlType -> None}, {{$CellContext`defaultMass$$, 20}, 0, 
         ControlType -> None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, 
         ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`springColorsByN$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`kDefaults$$, {0.25, 0.25, 0.25, 0.25, 0.25}}, 
         0, ControlType -> None}, {{$CellContext`kMin$$, 0.05}, 0, 
         ControlType -> None}, {{$CellContext`kMax$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mMax$$, 30}, 0, ControlType -> 
         None}, {{$CellContext`windowHalfWidth$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`springColors$$, {
           RGBColor[
            Rational[2, 3], 0.33333333333333337`, 0], 
           RGBColor[0, 
            Rational[2, 3], 0], 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
           RGBColor[0, 
            Rational[2, 3], 
            Rational[2, 3]], 
           RGBColor[
            Rational[2, 3], 
            Rational[2, 3], 0]}}, 0, ControlType -> 
         None}, {{$CellContext`primaryDisplaySize$$, {380, 380}}, 0, 
         ControlType -> None}, {{$CellContext`textDisOffset$$, {0.25, 0.25}}, 
         0, ControlType -> 
         None}, {{$CellContext`nArray$$, {{1, 0}, {0, 1}, {1, 1}, {1, -1}}}, 
         0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{915., {292., 299.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({{$CellContext`dynamicsMatrix := 
         Module[{$CellContext`cd$, $CellContext`r$, $CellContext`res$, \
$CellContext`epsilon$, $CellContext`m$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$}, $CellContext`cd$ = SplitBy[
              Sort[
               Flatten[FE`couplingData$$31, 2]], 
              First]; {$CellContext`r$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
            ReplaceAll[{"latticeBasis", "mScalarArray", "numberOfMasses"}, 
              FE`parameterLocatorDependencies$$31]; $CellContext`epsilon$ = 
            Partition[
              IdentityMatrix[2 $CellContext`numberOfMasses$], 
              2]; $CellContext`res$ = Partition[
              Flatten[
               Table[
                Total[
                 Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r$, 
                   
                   Part[$CellContext`mScalarArray$, $CellContext`i], \
$CellContext`epsilon$, $CellContext`mScalarArray$]& , 
                  
                  Part[$CellContext`cd$, $CellContext`i]]], {$CellContext`i, \
$CellContext`numberOfMasses$}]], 2 $CellContext`numberOfMasses$]; 
           ReplaceAll[$CellContext`res$, $CellContext`qVec -> #]& ], 
         Attributes[$CellContext`r$] = {Temporary}, 
         FE`couplingData$$31 = {{{{
             1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{
              0.5, -0.5}, {-0.5, 0.5}}}, {
             1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 
              1.4}, {{0.24615384615384625`, 0.4307692307692308}, {
              0.4307692307692308, 0.7538461538461539}}}}, {{
             2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{
              0.5, -0.5}, {-0.5, 0.5}}}, {
             2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 
              1.4}, {{0.9529411764705882, 0.21176470588235285`}, {
              0.21176470588235285`, 0.047058823529411736`}}}}, {{
             3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 
              1.4}, {{0.24615384615384625`, 0.4307692307692308}, {
              0.4307692307692308, 0.7538461538461539}}}, {
             3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 
              1.4}, {{0.9529411764705882, 0.21176470588235285`}, {
              0.21176470588235285`, 0.047058823529411736`}}}}}, {{{
             1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
              0.09999999999999987}, {{
              0.19999999999999987`, -0.3999999999999999}, \
{-0.3999999999999999, 0.8}}}, {
             1, 2, {-1, 0}, 0.25, 1., {0.9, 0.7}, {
              0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {
              0.48, 0.6400000000000001}}}, {
             1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
              0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
              0.9941176470588234}}}, {
             1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
              0.8, -0.6000000000000001}, {{0.005882352941176467, 
              0.0764705882352941}, {0.0764705882352941, 
              0.9941176470588234}}}, {
             1, 2, {-1, 1}, 0.25, 1.7852959999999995`, {0.9, 0.7}, {
              2.2359999999999998`, 0.6800000000000002}, {{
              
              0.9997759475179465, -0.014966705801166713`}, \
{-0.014966705801166713`, 0.00022405248205339165`}}}, {
             1, 3, {0, -1}, 0.25, 2.3656960000000002`, {0.9, 
              0.7}, {-0.6359999999999999, 0.6199999999999997}, {{
              0.9972946650795368, 0.05194243047289273}, {0.05194243047289273, 
              0.002705334920463173}}}, {
             1, 2, {1, 0}, 0.25, 3.4000000000000004`, {0.9, 0.7}, {0.5, 
              2.5}, {{0.047058823529411764`, -0.21176470588235294`}, \
{-0.21176470588235294`, 0.9529411764705882}}}, {
             1, 3, {1, -1}, 0.25, 3.5504959999999994`, {0.9, 
              0.7}, {-0.5359999999999998, 1.9199999999999997`}, {{
              0.5807909655439691, -0.4934296503925085}, {-0.4934296503925085, 
              0.4192090344560309}}}, {
             1, 1, {1, -1}, 0.25, 3.6412959999999996`, {0.9, 
              0.7}, {-0.9359999999999998, 1.2199999999999998`}, {{
              0.9257407252802299, -0.2621923622798036}, {-0.2621923622798036, 
              0.07425927471977006}}}, {
             1, 1, {-1, 1}, 0.25, 3.6412959999999996`, {0.9, 0.7}, {
              2.7359999999999998`, 0.18000000000000016`}, {{
              0.9257407252802299, -0.2621923622798036}, {-0.2621923622798036, 
              0.07425927471977006}}}, {
             1, 2, {0, 1}, 0.25, 3.7004960000000007`, {0.9, 0.7}, {2.336, 
              1.9800000000000002`}, {{0.5572485418170968, 
              0.49671179214894434`}, {0.49671179214894434`, 
              0.4427514581829031}}}, {
             1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 
              2.7}, {{0.05882352941176473, 0.23529411764705888`}, {
              0.23529411764705888`, 0.9411764705882353}}}, {
             1, 1, {0, 1}, 0.25, 4.356496, {0.9, 0.7}, {2.836, 
              1.4800000000000002`}, {{0.8603464802905821, 
              0.3466271976377347}, {0.3466271976377347, 
              0.13965351970941794`}}}, {
             1, 1, {0, -1}, 0.25, 4.356496, {0.9, 
              0.7}, {-1.036, -0.0800000000000003}, {{0.8603464802905821, 
              0.3466271976377347}, {0.3466271976377347, 
              0.13965351970941794`}}}, {
             1, 3, {-1, -1}, 0.25, 4.580896000000001, {0.9, 
              0.7}, {-0.736, -0.6800000000000002}, {{0.5842734696443664, 
              0.49284681424769305`}, {0.49284681424769305`, 
              0.4157265303556335}}}, {
             1, 3, {-1, 1}, 0.25, 5.032096000000001, {0.9, 0.7}, {3.136, 
              0.8800000000000001}, {{0.9935613311033813, 
              0.07998257584910946}, {0.07998257584910946, 
              0.006438668896618835}}}, {
             1, 2, {0, -1}, 0.25, 6.012496, {0.9, 0.7}, {-1.536, 
              0.4199999999999997}, {{0.9869604902855652, 
              0.11344373451558232`}, {0.11344373451558232`, 
              0.01303950971443476}}}, {
             1, 2, {1, -1}, 0.25, 6.497295999999999, {0.9, 0.7}, {-1.436, 
              1.7199999999999998`}, {{
              0.8398718482273242, -0.3667248652362459}, {-0.3667248652362459, 
              0.16012815177267584`}}}, {
             1, 3, {0, 1}, 0.25, 7.647296000000001, {0.9, 0.7}, {
              3.2359999999999998`, 2.18}, {{0.7135719605988835, 
              0.45209182435203243`}, {0.45209182435203243`, 
              0.2864280394011165}}}, {
             1, 1, {1, 1}, 0.25, 8.471696000000001, {0.9, 0.7}, {2.936, 
              2.7800000000000002`}, {{0.48931123118676584`, 
              0.4998857371652618}, {0.4998857371652618, 
              0.5106887688132341}}}, {
             1, 1, {-1, -1}, 0.25, 8.471696000000001, {0.9, 
              0.7}, {-1.1360000000000001`, -1.3800000000000001`}, {{
              0.48931123118676584`, 0.4998857371652618}, {0.4998857371652618, 
              0.5106887688132341}}}, {
             1, 2, {-1, -1}, 0.25, 8.927696000000001, {0.9, 
              0.7}, {-1.6360000000000001`, -0.8800000000000001}, {{
              0.7203757834048112, 0.44881456537050546`}, {
              0.44881456537050546`, 0.27962421659518877`}}}, {
             1, 2, {1, 1}, 0.25, 9.015696, {0.9, 0.7}, {2.436, 
              3.2800000000000002`}, {{0.26168761679630725`, 
              0.43955341883754734`}, {0.43955341883754734`, 
              0.7383123832036929}}}, {
             1, 3, {1, 1}, 0.25, 13.662496000000004`, {0.9, 0.7}, {
              3.3360000000000003`, 3.48}, {{0.43433469257740315`, 
              0.4956693125472827}, {0.4956693125472827, 
              0.5656653074225968}}}}, {{
             2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {
              0.48, 0.6400000000000001}}}, {
             2, 3, {1, -1}, 0.25, 1.3944959999999993`, {0.4, 
              1.2}, {-0.5359999999999998, 1.9199999999999997`}, {{
              0.6282527881040892, -0.483271375464684}, {-0.483271375464684, 
              0.3717472118959107}}}, {
             2, 3, {0, -1}, 0.25, 1.4096960000000003`, {0.4, 
              1.2}, {-0.6359999999999999, 0.6199999999999997}, {{
              0.7613669897623316, 0.4262479286314214}, {0.4262479286314214, 
              0.2386330102376685}}}, {
             2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
              2.5}, {{0.005882352941176467, 0.0764705882352941}, {
              0.0764705882352941, 0.9941176470588234}}}, {
             2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
              0.30000000000000004`, -0.10000000000000009`}, {{
              0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
              0.9941176470588234}}}, {
             2, 1, {1, -1}, 0.25, 1.7852959999999995`, {0.4, 
              1.2}, {-0.9359999999999998, 1.2199999999999998`}, {{
              0.9997759475179465, -0.014966705801166713`}, \
{-0.014966705801166713`, 0.00022405248205339165`}}}, {
             2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 
              0.09999999999999987}, {{
              0.34594594594594585`, -0.4756756756756756}, \
{-0.4756756756756756, 0.654054054054054}}}, {
             2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
              1.4000000000000001`, 2.7}, {{0.3076923076923076, 
              0.46153846153846145`}, {0.46153846153846145`, 
              0.6923076923076924}}}, {
             2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
              0.8, -0.6000000000000001}, {{
              0.047058823529411764`, -0.21176470588235294`}, \
{-0.21176470588235294`, 0.9529411764705882}}}, {
             2, 2, {1, -1}, 0.25, 3.6412959999999996`, {0.4, 1.2}, {-1.436, 
              1.7199999999999998`}, {{
              0.9257407252802299, -0.2621923622798036}, {-0.2621923622798036, 
              0.07425927471977006}}}, {
             2, 2, {-1, 1}, 0.25, 3.6412959999999996`, {0.4, 1.2}, {
              2.2359999999999998`, 0.6800000000000002}, {{
              0.9257407252802299, -0.2621923622798036}, {-0.2621923622798036, 
              0.07425927471977006}}}, {
             2, 1, {0, -1}, 0.25, 3.7004960000000007`, {0.4, 
              1.2}, {-1.036, -0.0800000000000003}, {{0.5572485418170968, 
              0.49671179214894434`}, {0.49671179214894434`, 
              0.4427514581829031}}}, {
             2, 2, {0, 1}, 0.25, 4.356496, {0.4, 1.2}, {2.336, 
              1.9800000000000002`}, {{0.8603464802905821, 
              0.3466271976377347}, {0.3466271976377347, 
              0.13965351970941794`}}}, {
             2, 2, {0, -1}, 0.25, 4.356496, {0.4, 1.2}, {-1.536, 
              0.4199999999999997}, {{0.8603464802905821, 
              0.3466271976377347}, {0.3466271976377347, 
              0.13965351970941794`}}}, {
             2, 3, {-1, -1}, 0.25, 4.824896000000001, {0.4, 
              1.2}, {-0.736, -0.6800000000000002}, {{0.26746607595272526`, 
              0.4426375200626086}, {0.4426375200626086, 
              0.7325339240472749}}}, {
             2, 1, {0, 1}, 0.25, 6.012496, {0.4, 1.2}, {2.836, 
              1.4800000000000002`}, {{0.9869604902855652, 
              0.11344373451558232`}, {0.11344373451558232`, 
              0.01303950971443476}}}, {
             2, 1, {-1, 1}, 0.25, 6.497295999999999, {0.4, 1.2}, {
              2.7359999999999998`, 0.18000000000000016`}, {{
              0.8398718482273242, -0.3667248652362459}, {-0.3667248652362459, 
              0.16012815177267584`}}}, {
             2, 3, {-1, 1}, 0.25, 7.588096000000001, {0.4, 1.2}, {3.136, 
              0.8800000000000001}, {{
              0.9865051786376978, -0.1153807226476839}, {-0.1153807226476839, 
              0.013494821362302201`}}}, {
             2, 2, {1, 1}, 0.25, 8.471696000000001, {0.4, 1.2}, {2.436, 
              3.2800000000000002`}, {{0.48931123118676584`, 
              0.4998857371652618}, {0.4998857371652618, 
              0.5106887688132341}}}, {
             2, 2, {-1, -1}, 0.25, 8.471696000000001, {0.4, 
              1.2}, {-1.6360000000000001`, -0.8800000000000001}, {{
              0.48931123118676584`, 0.4998857371652618}, {0.4998857371652618, 
              0.5106887688132341}}}, {
             2, 1, {1, 1}, 0.25, 8.927696000000001, {0.4, 1.2}, {2.936, 
              2.7800000000000002`}, {{0.7203757834048112, 
              0.44881456537050546`}, {0.44881456537050546`, 
              0.27962421659518877`}}}, {
             2, 3, {0, 1}, 0.25, 9.003295999999999, {0.4, 1.2}, {
              3.2359999999999998`, 2.18}, {{0.893327954562418, 
              0.3086958376132475}, {0.3086958376132475, 
              0.10667204543758202`}}}, {
             2, 1, {-1, -1}, 0.25, 9.015696, {0.4, 
              1.2}, {-1.1360000000000001`, -1.3800000000000001`}, {{
              0.26168761679630725`, 0.43955341883754734`}, {
              0.43955341883754734`, 0.7383123832036929}}}, {
             2, 3, {1, 1}, 0.25, 13.818496000000003`, {0.4, 1.2}, {
              3.3360000000000003`, 3.48}, {{0.6238085534055225, 
              0.48442898561464287`}, {0.48442898561464287`, 
              0.37619144659447745`}}}}, {{
             3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
              0.19999999999999998`, -0.39999999999999997`}, \
{-0.39999999999999997`, 0.7999999999999999}}}, {
             3, 2, {-1, 1}, 0.25, 1.394495999999999, {1.3, 1.4}, {
              2.2359999999999998`, 0.6800000000000002}, {{
              0.6282527881040892, -0.48327137546468396`}, \
{-0.48327137546468396`, 0.37174721189591076`}}}, {
             3, 2, {0, 1}, 0.25, 1.4096959999999998`, {1.3, 1.4}, {2.336, 
              1.9800000000000002`}, {{0.7613669897623316, 
              0.42624792863142147`}, {0.42624792863142147`, 
              0.23863301023766856`}}}, {
             3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
              1.4000000000000001`, 2.7}, {{0.005882352941176479, 
              0.07647058823529418}, {0.07647058823529418, 
              0.9941176470588236}}}, {
             3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
              0.09999999999999987}, {{0.00588235294117648, 
              0.07647058823529418}, {0.07647058823529418, 
              0.9941176470588234}}}, {
             3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 
              2.5}, {{0.34594594594594597`, -0.47567567567567565`}, \
{-0.47567567567567565`, 0.654054054054054}}}, {
             3, 1, {0, 1}, 0.25, 2.365696, {1.3, 1.4}, {2.836, 
              1.4800000000000002`}, {{0.9972946650795368, 
              0.05194243047289274}, {0.05194243047289274, 
              0.0027053349204631738`}}}, {
             3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
              0.30000000000000004`, -0.10000000000000009`}, {{
              0.3076923076923077, 0.46153846153846156`}, {
              0.46153846153846156`, 0.6923076923076923}}}, {
             3, 1, {-1, 1}, 0.25, 3.5504959999999985`, {1.3, 1.4}, {
              2.7359999999999998`, 0.18000000000000016`}, {{
              0.580790965543969, -0.4934296503925086}, {-0.4934296503925086, 
              0.41920903445603097`}}}, {
             3, 3, {1, -1}, 0.25, 3.6412959999999996`, {1.3, 
              1.4}, {-0.5359999999999998, 1.9199999999999997`}, {{
              0.9257407252802299, -0.2621923622798036}, {-0.2621923622798036, 
              0.07425927471977006}}}, {
             3, 3, {-1, 1}, 0.25, 3.641296, {1.3, 1.4}, {3.136, 
              0.8800000000000001}, {{
              0.9257407252802299, -0.2621923622798036}, {-0.2621923622798036, 
              0.07425927471977005}}}, {
             3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {
              0.8, -0.6000000000000001}, {{0.058823529411764705`, 
              0.23529411764705882`}, {0.23529411764705882`, 
              0.9411764705882353}}}, {
             3, 3, {0, 1}, 0.25, 4.356495999999999, {1.3, 1.4}, {
              3.2359999999999998`, 2.18}, {{0.8603464802905821, 
              0.3466271976377347}, {0.3466271976377347, 
              0.13965351970941797`}}}, {
             3, 3, {0, -1}, 0.25, 4.356496, {1.3, 1.4}, {-0.6359999999999999, 
              0.6199999999999997}, {{0.8603464802905821, 
              0.3466271976377347}, {0.3466271976377347, 
              0.13965351970941794`}}}, {
             3, 1, {1, 1}, 0.25, 4.580896000000001, {1.3, 1.4}, {2.936, 
              2.7800000000000002`}, {{0.5842734696443663, 
              0.49284681424769305`}, {0.49284681424769305`, 
              0.4157265303556336}}}, {
             3, 2, {1, 1}, 0.25, 4.824896000000001, {1.3, 1.4}, {2.436, 
              3.2800000000000002`}, {{0.26746607595272515`, 
              0.4426375200626086}, {0.4426375200626086, 
              0.7325339240472749}}}, {
             3, 1, {1, -1}, 0.25, 5.032095999999999, {1.3, 
              1.4}, {-0.9359999999999998, 1.2199999999999998`}, {{
              0.9935613311033812, 0.07998257584910948}, {0.07998257584910948, 
              0.006438668896618837}}}, {
             3, 2, {1, -1}, 0.25, 7.588095999999999, {1.3, 1.4}, {-1.436, 
              1.7199999999999998`}, {{
              0.9865051786376978, -0.1153807226476839}, {-0.1153807226476839, 
              0.013494821362302204`}}}, {
             3, 1, {0, -1}, 0.25, 7.6472960000000025`, {1.3, 
              1.4}, {-1.036, -0.0800000000000003}, {{0.7135719605988836, 
              0.4520918243520324}, {0.4520918243520324, 
              0.28642803940111644`}}}, {
             3, 3, {1, 1}, 0.25, 8.471696000000001, {1.3, 1.4}, {
              3.3360000000000003`, 3.48}, {{0.48931123118676606`, 
              0.4998857371652619}, {0.4998857371652619, 
              0.5106887688132341}}}, {
             3, 3, {-1, -1}, 0.25, 8.471696000000001, {1.3, 
              1.4}, {-0.736, -0.6800000000000002}, {{0.48931123118676584`, 
              0.4998857371652618}, {0.4998857371652618, 
              0.5106887688132341}}}, {
             3, 2, {0, -1}, 0.25, 9.003296000000002, {1.3, 1.4}, {-1.536, 
              0.4199999999999997}, {{0.8933279545624181, 
              0.3086958376132474}, {0.3086958376132474, 
              0.10667204543758198`}}}, {
             3, 1, {-1, -1}, 0.25, 13.662496, {1.3, 
              1.4}, {-1.1360000000000001`, -1.3800000000000001`}, {{
              0.43433469257740304`, 0.4956693125472827}, {0.4956693125472827, 
              0.5656653074225969}}}, {
             3, 2, {-1, -1}, 0.25, 13.818496000000001`, {1.3, 
              1.4}, {-1.6360000000000001`, -0.8800000000000001}, {{
              0.6238085534055225, 0.48442898561464287`}, {
              0.48442898561464287`, 0.3761914465944775}}}}}}, 
         FE`parameterLocatorDependencies$$31 = {
          "mScalarArray" -> {13.100000000000001`, 20, 20}, "numberOfMasses" -> 
           3, "latticeBasis" -> {{0.1, 1.3}, {1.936, 0.7800000000000002}}, 
           "latticeNorms" -> {1.3038404810405297`, 2.0872220773075396`}, 
           "latticeUnitVectors" -> {{0.07669649888473705, 
            0.9970544855015816}, {0.9275486403906708, 0.3737024480912828}}, 
           "numberLatticeLinesToDisplay" -> {30, 4}, 
           "reciprocalBasis" -> {{-0.3198294243070363, 0.7938330326390027}, {
            0.5330490405117271, -0.04100377234705593}}, 
           "reciprocalNorms" -> {0.8558397889566752, 0.5346237826146177}, 
           "qMaxVec" -> {5.37739998727226, 3.3591402957929395`}, 
           "mObliqueComponents" -> {{0.2678366409709692, 
            0.4510414958176152}, {0.8246678694439887, 0.16401508938822373`}, {
            0.6955879940954566, 0.6355584713793669}}, 
           "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
           "pointsDataTable" -> CompressedData["
1:eJxdnAmUZWV5rqvnoXqo4dQ8jz131zxX7f+cU30R5SY2mDgEcVheZIUEOiQm
rIZwiaH1BogNSecao6KIrKCYluCELHH/F1BusghKLtCiaGwZojYQoGkaugHv
Pvt73n/V3r0WnlWeqnP2fve7v394n/31fPDSc//HyqqqqhXJf/PJf+uS/5Yn
/z1566fv776jz7+y9fxD935j0V9S95f+X2/u8ufe1Xnw+L5F3/j4Q6fOe7LJ
Hznr2IHC82X/3c+17vlpf41ff/SW/fPXlv2/PVj5V+UvrPwbLPsHb977zRNv
3B/fe7LygSU/OLz2K+3veT2qfNpdF5R8+bo/+M8zX9roDhSSTzxd9Kev+v3v
/MnfNrrHko9b/8miv+Oyi2587so+f0PlAzYv+spff2i2yz+7Lzmg28u83+Tf
cqzyCWX/z+nPm/0Xkz8/+mTJL6tK//n0f68u+eYvv/jv//2Dd8TJwZzc2l7y
3/3X9ACj9PTuKvrN75r++v/9002ucjgH3lH073/6h70/ea3RVT7ulhec//No
/IK7z+7zlbM5eVHZf6Hy1490+spfd64q+7duWL7j441NPj2cm0v+6VTPTX4+
FajkL0qFeTP+VOXf40Vf8x+//defvOQLUSrPR4r+XR+aTf6f30SV0zteW/RP
9K/+i78rb3b/VNH7iPPff9vkXxXf3+TSj3ur82en39fnpe9M+nmdvgt97Xo2
+ivQtym9fhv9UfR9KL1er8ej6b+iP5z89mUX/Z+oIs/5P3D+tfR6VLnK6R28
2PlHL/9VcglrXHo4a5zfdedn/+sfv9/kTP8If/R66ftI+vud/tvoe2WqX6Nv
QF87/o3+j9B3LD2OM3Hqo+ud/1ByNaPxh6Jt6Qfq/Je56tRvkZ9Nz7fG3Z+e
/4I/3LzydzftanZXpuc7z/n3mp8Tfc3PHebnRF873gbz8xFd3w1e+v5DeqFe
s+N5MPIVt6/+i0cju96R/9v0+5Y7u74L+KHG2ffN4+dmZ58/h197zc+Jvubn
DvNzoq+932B+TvQ1P1f7s9F3eWrkV+PU11cv+AN/V7mDfhKZvvP+falflzvT
c47Pr3XbU/3m8HOz+0Xl4z4wy/n2eulrx9/upa/5ucHfh77m5/Ve+pqfX4nt
us37F9+oXPFjkZ3PnN+Z+mOFuzW9gWbRv9a9t/J1T8xwPVtc6ofCDH7o9R9D
X/Nzu19AX7ueBX8Kfc3P6/xX0df8/HL84cphPTPrB9J681SU3g+ds/h5pUv9
/84Z/Fzn0utxaBo/t5ifH5jCHz1e+pqf2730NT8X0G+O41/npa/pciI2H834
d6f3939Gqf8enub8V5mf10/j5zqX6l2aws+tLr1/D0xy/j1e+pqebVbvEn3t
eOu99LXru9ZLXzuOF83P50z7ypf9pf+1+fngFH5ebX6+ZxI/1JmfT07g51bz
8+4J/Nrjpa/5rc1LX3u/3h9CX/PzGi99rTy/ENvrlI/Tevyc1eOpSfy62vy8
f4LPr3ep3reN836rS2+PY2Ocb48/D33T6v5Iq5e+dn3qvfQ1PVebnxN97T5/
1vz8NZ3vC+bn4+P4Y435uW/cX5rqX29+Pn/MP5Bezzbz8+FRvq/H/Jzoa9e3
1fx8j65nnfk50df8vMr8nOj76fR6/cr8fOG4/5v0+rxkfr5pDD+vNT8fHcXP
BfPz5lGOt436PII/us3Pib7m51Yvfc3PdV762v2/yvyc6GvH8Yz5uWWM+/uE
+XnfKH5eR30e8XPp+RbMz/cO4+d28/PpIc6/20tf83OL+TnR14631ktfu74r
vfS1cetJ6vMI33+S+jyCn9dTn4fxc4H6PMT1bXfp7Xv+Hvza7aWv+a3FS197
v9b8nOhrfl7hpa/NN35ufr56GH++wvxiiPq83urvsT18foMz/Xbz++3OxvOd
nG+3+TnR1/zc7KWv+avWS1/Tczn1eYj7/XHqs8731ehH6fnsxh/VzsaXXfi5
wd2dHu8O/NzB+LGd7+umPo/g52bqs76/hvo8hJ+X+QvQdyI9jv8XW53ehZ9P
R/b3O/HzBmf1fDt+bnTd6QXdxvF2UK+34L8u6vMQfm720tf8XIN+u/HzMn8/
+n4m1edf0GcHn3cmsnq6DT9tZHzaip8bnd3Pg/i5k/rYz+93eelrftb8dBfH
v5nj3cH1rfLS9+/T4/k248VWPu+NKJVn/Rb8vInxYAA/Nzq7f/q4vp34uRc/
dfoIfc1vTf4O9P1A+v4mL33t99+MpW8V/8zXg3o/uiy9ofr5eRN+7tXn4+ce
fb+z8aVLx+dvRV/zc6NvRF/Oz0tfzj+WvugTWR3qk37O9O6RvtS7bvzc5C5N
j7cDP3e5VK59rfivk/FhC35uZDwY4Pc3eum72/wRS187nn+JrP50c38s4/p0
cnw17vfS32/Dz81uLr0ezRxvl+tIBWrAfx1e+pqfG7305f7Azz3473T8cfQd
sfsLfdqpn8vQo0X3p42fWxvxc7OtJ9bXc3902/rr6Gb07/DS1/zM/DTRl/rB
+NGh+hKfi77Un8jqdJPqk62vCgW+r9alt+PJGvzc7L6S+rNa9c9dkn7+KtVH
L32pn4wPbfh5PfWoWfU37kJfc/PPI3uto56voN5uVH1316R6rlH9d/8tPd9l
Gh9cbXr8r8SMH8zPW/Bzgfu5UeMP/qrX+BT/CH0ZvyLTaZ3GN+7fFdTPWsav
07H5ucV9ND2+4zHjp3t7qsfXY/u+duZ7BfzMfDnR1/y8jvVONX4+EV+Gvhfa
+I5/3owZ/239d/zF2I6vzn0n1evR2Pzc6sbSA34iYn7h/ir9gxOR+bmNersR
Pxe4v9fgl7X4aRl+filuQF/T5VfRGOO8ff4qV5Pq+UDE/Ml9J62nz0fm51b3
41TfM5Edf4/bkR7fSmf6tzEercDP9b6Ivszv/LXoy/wvvgF9mR9G0on5I+PV
Kb6v3lk9W+7Mz63uHen9sNYxP3V/kxpuk2P+6l9AX+a3/ofoy/zXd6Mv8+P4
GvRl/sxrlTN/rnHm/9X8XG/r4QMbHPNz5qu1vN/D+wVn9aXV//Ix09f8XOfv
RF/WB/5R9GX9EG9FX9YX6LOe813LeFDjzM/1zOfrnfm5zd2Y6tHoWN+gZ4uz
72v1t6Mv6yNfQF/z8yr2p9Y61leMX5sc6y/8XOdYnzF+N3B8Bdanzc783M5+
QhvH2+OeTOtvpzM/t/g59DU/1/kD6Gt+WWn7H4m+W2z9GV+Bvuafl7nfm5z5
eZ2z+UCre8rWt4xnHc78zHz5QLczf/VSr3vxc4vfh76sr/1+9DU/r2D91ehO
2Po8PoK+dp1eYfxqR//1zCe6+L4Gxu8e/NxO/e5Dv15n86V+/Nxs+2GJvuw/
sD5t5v3lzFfb3FW2fxH/An3Nxq/i5x78Wc18r5efG5zV834+v4P9lQHe78X/
W/Bzs/8W+pqfa/xj6Mv+Ddev2zXa/k4sfdn/idKXT+l8Nzjz+wD+aHA2vx/E
zx2Mt1vRs5f12Ta+r9kfR1/2r/w16Gt+XualL/tfsfRlf4zxdBA/b2T82sLx
NXK/bcPPnczPtnO8vdx/O/FzE/7oxc81vhN9zc9VXvp+xvYHY+lrvnkd/2zF
zxsZv7bjZ81Pd+DnTurNLvzVx/7HHvzc5KXvT23/00vf99j+aHwW+g7Z/mn8
GPqan9+k/uxA/03Mz3fyfU34eTd+7uR+GkK/PtPv4SH82uilb63tD3vp623/
OD6Gvmttfznaj76qy/ayG39uxs97+LmJn4fwcxf7U8O834ffR/Bzo5e+7J97
6cv+OvVml3vE9t9ZP+zhelXZ6zlDLrb9e9Y3w/ijif25Yfzcxf09gp59dj0v
HsXPjV76/lkaCGxgfN/tPpGOD6fjavT9rcrlffqHkfS1+2sZr8NuoHK5r6th
f3KE69HMfHXUpXfzym72N0c53j7q5xh+bvCfQN8vVS5HzQb8PeReSuvfa7H0
/Wbl19921PKIRF8bJ5abj54ZcddX5H2xhvoyip+bbb76kTF3U+XPJ7uZn43j
r37z16oJ/NzA/TyMn6vt+iX6mp9Pxbegb2tFzjt/Gh1HX7vPV/A65l6qnM67
atk/GeP7WthfGXcPJ2696ve7zc/XTqBfP/VgEj8XLJ9I9DU/r/fS1/x8Mpa+
xbTc/YL9izF8vNJerx536Z9/t5Z6N4FfW5ztj0y69HQ+2039m+T9fvPzTVP4
ueClr/l5Hfv1Y/j55Vj6fqTy59HTkfQ1P6/kdQI/17H/Nok/WpjvTDmzX7f5
uW8aP/dTn6bxc8FLX/PzWi99zc8vmZ8Tff+x8ueX/TKSvubjVfbaMoWf66i/
U1yPVvYvp/FzD/V4huPtNz9PzeLnen8W+pqf13rpa35+MZa+P6n8+a3Hzc+J
vubn1dTFafxcx/7tDH5uZf01g5972P+dxV8D1Ms5/Fxvfk70NT+voR5Nua8l
bvhc63+ZnxN9N1b+/PHnzc+JvubjNfb6tRn8XM/8Rt/Xxv73HH7uoT7Po98A
9XkeP9eZnxN9a1JDrvbS93+m84vjsfT9fBrgvMj+8ix+XsvrHH6uZ/9/Dr+2
mZ8PzePnHurzAu8PUJ8j/Fznpa/5eRX1cca97YOVI/xlLH1nKl/3uZci6Ws+
Xkt9nsfPBerzAv5g/v7EAn7uoT5H+HnAxrtx52x/o85L3z9N/bzSS9+mdL7z
NPV53j1SuRzTL0fSl3UprwtuMPVzgfocuavS69HO8Tl3cernXvPv5Y7jHeB4
HX6u9dLX/LzS8rBE3yfPVP6fX8TS95KKXf/9ZCR9P8y6wvKdCD8zX36nw8/t
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
1FyOj5rP8VHzOT5qIcdHRYGPsnzWBT7Kvk88ifgo8STio+bc9Rk+at59KcNH
LeT4qIj8XXyUeJJW8nfxJD341wU+Kj3e9mLgo6Sv+Kgb0DfLRy24n8JHSV/x
UTZuuMBHWf7uAh9l+/ku8FGWvxcDH2Xz+2KOj1rI8VFR4KOkr/go6Ss+yvJ3
F/gomx8VAx9l+Xsx8FE23ykFPsry91Lgo6Sv+CjpKz5K+oqPkr7io+x582Lg
o9L1zZPiSdpYf5YCH5Wul28XTzLAfKQc+Kij6Cs+6gr0FR/Vhb7io+5DX/FR
6XUbLAU+yvxWCnxUut57vhT4KNvfKmf5qG+UAx8lfcVHHUNf8VEH0Vd81Db0
FR9lx1UKfFRaH4bKWT7qcDnLR71aDnyU+WMx8FFfRF/xUW9BX/FRz6Kv+Cjp
Kz4q9fMfl7N81NFylo+aWczyUTctZvmo5XsDH7UefcVHHUFf8VHnom+Gj/pG
OctHtSxm+ag/X8zyUccWs3zU3r1ZPuq2vU75qdWrRfY/6S/xapn9LvpLHFY/
DvpLDJXZD6e/xIMlf9HS/hIXlUJ+yvUO+Sl+YP+tmfGsGPLTU3a+7A93sJ9a
Zn+3weNHfxX5KX4lv3gtxs++QH6K39n/Xe64H9gPrGF8U3+OZsf9FPJTG1/K
ft3S/hK3l8iX9Pxeyd9Jforf4ACUnxb9leSnxjsVQ35q450L+WnB6gl5VLPq
OfvL9JdI9FV+Sr0K/SWoZ/4p8lPuR699Q+oh/Mgx1cvQX4J6GvpLUG+z/SUO
L4T8VPoqP6Weh/yUek++ss4zHpB/vcw+ooPXeCqy+ydi/3El99tCyE9vtPEo
5KdWL+dDfkq95ffbyXPEBxVUr7P5aaLv6NL8tCXy71man+5bCPkp851sf4l7
5/Bzq+ZLIT89hb7sP5ifE33ZnyB/i/DzWstbEn0/TX5q6555fy35qV3vefy8
mvFsDj/UOfs+9edoZb9uJuSn0ncd+an0/WfyU8Z7/LzGS99l5Kc2fs3BszxH
vxTxK6vdZTafC/mp7RfP4OdWzbfxM/lpom8mP030ZX+L/ek5/Ex+muj70NL+
EqM6X/pLXDyDn9doPaHnE7Xe4Hq2aT2SzU9XzWfz00Rf5afMF/Eb/SWOqB8I
/SWemcYP9JfonNbzmfC1U9n+Eocms/0lHpjI5qeJvo8u7S/xgviROi99M/0l
En15rpK8corPP6H1UMhPWY/q+VatVzl+PS83nu0vkeh76dL+Eom+7B9rvYGf
6S+R6KvnTlkPZvtLHJwI+anl1eN6/pf9IfEU7Vrvh/y0G32Vn0pf5afSV/np
2eibzU8nQn7KfkXITy1/GQv5qY2foyE/ZT8EP9Nf4mHxOfSXSPQlfzA/J/o+
tbS/RKLvZ8hPjdfS+b4KrzWKn6u136Pnx7UfpOfLtV+U7S+R6JvpL3HPeMhP
pS/5DbzWWMhPbdwY5fqcZr4/onyI+jwc8lP2y0J+yn6ans/30pd8inxSfFCN
l77KT6Uv/QGoz+JnzlCfh0N+yn6h8jXtJ3L8newP7VL/Ai99ye+89N1Nfsp+
EH6u8tJXuRf7dSE/ZT+P+qz9oN3KH3n+W/05Osmfd5CPdlKfR0J+Kn3JP730
fR/56dnoq+TU/Lwn5KfsJ+f6S+wI+anV3+2hv4SNZ1t1fNRn9Xtp1H4hefQm
8u096PlGfAp9byA/Nf/s5P4Q3yeeQ/0ltim/Zn0qvqKL/RjxFZ3U53B9tZ+q
66/9Vvkjfi/6ZvtLbJO/mH9uDf0l2E8P/SXIM0J/Cfbj5W8vffG/9ptDfsp+
tO6fWPoqPyUvCP0lbH9GfEWN8hzdv8p7Qn8J8grxE/hlu/gKxu9t+LnaS1/q
Syx9lZ/aa7/qE7xYX+gvQd4lPoT8uSv0l7D5bDt+Fk+3NfSX+Cr6Kj+Vvu8j
P5W+2fy0N/SXII8K/SVs/78j9Jf4guVZob+E5TdNGj8Yr9Tvhflgou9h8lPp
+wD5qfSF/4ketDwOP6/EL23ih5w9L9ksvsiR92n8dG+3PFDjq5e+yk+lL+Mz
17NL43d8N/oyviuv1PivvFjzA+bv9Zo/KG/2yk/N/+s1//DSl/mJl77KT8kL
Nb+JyWs1/2F/vqD5Efd3reZP8D0bNL9y9ZYXe+WnX7Y8GX6izUtf+DfG82b8
vAYep0HzP9bPdeLrqD+bNH+knqzV/JJ6vEzzT/cey9Nj5afWn+Pp+APkp9JX
+ekF6Kv8VPoyP44BxMQfRnruQfmp6XcmVn5q9/vzsfLT/cYbxMpPnzAeIYKP
9NIXftL/DvoeJj9tQN9PkJ/egb7KT8WNKj/9ufEU8Bz19Ac5GsF/OhtgX4qU
n1q/kDcj5afwHFofeXgPrZ/Q61TM+iqGF4nFbWjcYH3G+uHZSPkpPEqk/BRe
JeSn8CzkkS30HzlDf5U6346+yk9vQF/Wn/Ej6Kv8VLml8lO7P5ax/1VgfbWG
fK0dvmVjyE+NN6kjb2vxL6MvfLJ/3QooPM4KP4u+rM/jb6Ev63fxSOw/rWc8
rQ75KbwY+WM7+hVCfgpvFvLTbvRVfno9+io/hbdyV5OfwmPl8tOakJ/Cc4X8
FN4r5Kd2/VtCfmr3Uzt5drO/FH3h2/0/oe9h8tPj6NtMfgqvFvJT83ODu5L8
FN6N/a4G5vNt5Nfqf9aJnr3MZ7tDfvoo+io/lb7sb5GHFxz7X7H0VX5q/mnl
+mzErx25/hLduf4SPbn+En34uYn8v57fr4F3aQz9Jc5H378nPz2AvuovYTp1
5fpL9OBn9Zfo5Xw7xbPm+ksM4ucm8YTuZ+Sn+9H33eSn0reb/PQo+tIXCV/3
ov8m27842Ufe3CSeFz93ivcN+Sm8ashPr0HfGvLTfegbZ/pL9Lga8lPpm81P
B0J+avORwZCfmr+3hvwUHjrkp/DSXA/1l+hxi+Snx9F3S6a/RL/7Ifmp9FV+
Cm/seP6J8Us8h+bL2/Fzl3hx9OzDz7ty/SX62J/fwHxngOcdT8fS9xzyU+mr
/BQeO+SnNp/dEfJTeG7257vp97M7m59ODeFnnj9J9P0y+an0PUF+egR9v05+
Oo++F5Kfmk47Hc/PsR7ejZ+b9TxBNj+9Zyibnx4cxs8NXvr+jPxU+r6b/BRe
3LWTnx5FX54fxNd7svnpgSH83KLnLbL56fqRbH768EjIT6Wv8lPpG5OfwtO7
0tL8NNE3k59WDWfz0weGQ37K8yjZ/PSdo9n8tHMMPxe89F0kP30OfbeQn/K8
gfuTpflpom8mPz1nBD/X6Xkc/Nxi9eiJ0Wx/iVvEd9Bf4uLx0F/iAPoqP70X
fa8jP5W+t5Gf7kNfjaPGj42G/hI8rxT6S1h9Hw/56X57HifkpzwPhZ/pL5Ho
++Wl/SUSfU+Qnz6Gvj9e2l8i0fdC8lOb1o/h5zo9z4WfW/W8V7a/xPxktr/E
qin8TH6a6Puzpflpou+d5KfSd9PS/hKJvmPkpzYvm8j2lzg9gZ/bWH9NZvtL
XDsV8lOep8v2l0j0zfSXSPS9ivxU+t68tL9Eoq/yU8tTJrP9Jc6aCvkpzwtm
+0scnc72l7hpBj/TXyLRd3Fpf4lE398iP+V5sGx/iUTfTH+JB6fwc0HPS+Ln
NsbXmWx/ib5Z/DxAfZrFz/Q/S/RVfip9m8lPpa/y033oq/zUloMz+LlAP+cZ
rke7+fm22ZCf2ng9F/JTqx/z+LkWXmsKP6/U84LuGfLTx9D3D8lPO9H3QvJT
e53FzwU9b4uf9XzOXMhPeV435KdWPxbwM/0lEn2fWNpfItH3Q+Sn0ncN+elx
9B0jPzVea869SH5q9XkeP3eYn0sLIT+1+hGF/NTqcxT6S0hf9ZfgeVP3Ov0l
pO/N9JeQvubnDbwuhP4SPK8d+ktYfY5CfwmeR872lzjkQn8J6Vuiv4T0PUx/
CZ7XdbP0l5C+D9Ffgueps/0l1rvQX+KIPY/tpugvwfPa+Jn+EuNF/Fzjpa/6
S/C8snsX/SWk76P0l5C+mf4S5zj8TH+JOxzXQ/PBYra/xOXF0F/C8p4i/NNm
6vMCfq6iPkfwfXca35fo+4f0lziEvuLmbZnq8HMj42URPzNfvrsY+kvwvH/o
L2H9PErwanr+xLlv01/iq+jrl/aXSPRds7S/RKKv+Zn+Ep8q4mf6S7xRxM/0
l/hAKdtf4nviW7YwnyzDY23U8/6uKzXY66yvivCGXv0Y3NvTCWMV47X4lhp7
dSX83MT4LX6ly9EPAj+L7yvz/habb/+gDG+0Uf0Q3MG0oJ6J6UfhfpQa6t/U
r8J1phd4md2/H1U/kBrGU/Et9Od9q3iRLsbXMn6Gx6xdxM9b4O8W4cM2qF+E
O54uMF+z9USir/GPj9j9lOj76/QPlgd9bZyooV9KGT83wxeWOb5ueK1F/Ez/
qrsWOd4t8Fp78XO1vwV9z0sN+Kr180v0HUsXKD9hPC+7b6YTkOVBXxvXa3ld
xM/iH8SXdDPei29hPnjBXvy8lfn/Xvf/AReG5+8=
            "], "lineTable" -> {{
              
              Line[{{-10.744, -42.120000000000005`}, {-4.744, 
               35.879999999999995`}}], 
              Line[{{-8.808, -41.34}, {-2.808, 36.66}}], 
              Line[{{-6.872, -40.56}, {-0.8719999999999999, 37.44}}], 
              Line[{{-4.936, -39.78}, {1.064, 38.22}}], 
              Line[{{-3., -39.}, {3., 39.}}], 
              Line[{{-1.064, -38.22}, {4.936, 39.78}}], 
              Line[{{0.8719999999999999, -37.44}, {6.872, 40.56}}], 
              Line[{{2.808, -36.66}, {8.808, 41.34}}], 
              
              Line[{{4.744, -35.879999999999995`}, {10.744, 
               42.120000000000005`}}]}, {
              
              Line[{{-10.744, -42.120000000000005`}, {
               4.744, -35.879999999999995`}}], 
              
              Line[{{-10.644, -40.82000000000001}, {
               4.843999999999999, -34.58}}], 
              
              Line[{{-10.544, -39.519999999999996`}, {
               4.943999999999999, -33.28}}], 
              Line[{{-10.443999999999999`, -38.22}, {5.044, -31.98}}], 
              Line[{{-10.344, -36.92}, {5.144, -30.680000000000003`}}], 
              Line[{{-10.244, -35.620000000000005`}, {5.244, -29.38}}], 
              
              Line[{{-10.144, -34.32000000000001}, {
               5.343999999999999, -28.080000000000002`}}], 
              Line[{{-10.044, -33.02}, {5.443999999999999, -26.78}}], 
              
              Line[{{-9.943999999999999, -31.720000000000002`}, {
               5.544, -25.48}}], 
              Line[{{-9.844, -30.42}, {5.644, -24.18}}], 
              Line[{{-9.744, -29.12}, {5.744, -22.88}}], 
              Line[{{-9.644, -27.82}, {5.843999999999999, -21.58}}], 
              Line[{{-9.544, -26.520000000000003`}, {5.944, -20.28}}], 
              
              Line[{{-9.443999999999999, -25.220000000000002`}, {
               6.044, -18.98}}], 
              Line[{{-9.344, -23.92}, {6.144, -17.68}}], 
              Line[{{-9.244, -22.62}, {6.244, -16.38}}], 
              
              Line[{{-9.144, -21.32}, {
               6.343999999999999, -15.079999999999998`}}], 
              
              Line[{{-9.044, -20.020000000000003`}, {
               6.444, -13.780000000000001`}}], 
              
              Line[{{-8.943999999999999, -18.720000000000002`}, {
               6.544, -12.48}}], 
              Line[{{-8.844, -17.42}, {6.644, -11.18}}], 
              Line[{{-8.744, -16.12}, {6.744, -9.879999999999999}}], 
              
              Line[{{-8.644, -14.820000000000002`}, {
               6.843999999999999, -8.58}}], 
              
              Line[{{-8.544, -13.520000000000001`}, {
               6.944, -7.279999999999999}}], 
              
              Line[{{-8.443999999999999, -12.22}, {
               7.044, -5.979999999999999}}], 
              Line[{{-8.344, -10.920000000000002`}, {7.144, -4.68}}], 
              
              Line[{{-8.244, -9.620000000000001}, {
               7.244, -3.379999999999999}}], 
              
              Line[{{-8.144, -8.32}, {
               7.343999999999999, -2.079999999999999}}], 
              
              Line[{{-8.044, -7.020000000000001}, {
               7.444, -0.7799999999999994}}], 
              
              Line[{{-7.944, -5.720000000000001}, {7.544, 
               0.5200000000000009}}], 
              
              Line[{{-7.843999999999999, -4.420000000000001}, {7.644, 
               1.820000000000001}}], 
              
              Line[{{-7.744, -3.120000000000001}, {7.744, 
               3.120000000000001}}], 
              
              Line[{{-7.644, -1.820000000000001}, {7.843999999999999, 
               4.420000000000001}}], 
              
              Line[{{-7.544, -0.5200000000000009}, {7.944, 
               5.720000000000001}}], 
              
              Line[{{-7.444, 0.7799999999999994}, {8.044, 
               7.020000000000001}}], 
              Line[{{-7.343999999999999, 2.079999999999999}, {8.144, 8.32}}], 
              Line[{{-7.244, 3.379999999999999}, {8.244, 9.620000000000001}}], 
              Line[{{-7.144, 4.68}, {8.344, 10.920000000000002`}}], 
              Line[{{-7.044, 5.979999999999999}, {8.443999999999999, 12.22}}], 
              
              Line[{{-6.944, 7.279999999999999}, {8.544, 
               13.520000000000001`}}], 
              
              Line[{{-6.843999999999999, 8.58}, {8.644, 
               14.820000000000002`}}], 
              Line[{{-6.744, 9.879999999999999}, {8.744, 16.12}}], 
              Line[{{-6.644, 11.18}, {8.844, 17.42}}], 
              
              Line[{{-6.544, 12.48}, {8.943999999999999, 
               18.720000000000002`}}], 
              
              Line[{{-6.444, 13.780000000000001`}, {9.044, 
               20.020000000000003`}}], 
              
              Line[{{-6.343999999999999, 15.079999999999998`}, {9.144, 
               21.32}}], 
              Line[{{-6.244, 16.38}, {9.244, 22.62}}], 
              Line[{{-6.144, 17.68}, {9.344, 23.92}}], 
              
              Line[{{-6.044, 18.98}, {9.443999999999999, 
               25.220000000000002`}}], 
              Line[{{-5.944, 20.28}, {9.544, 26.520000000000003`}}], 
              Line[{{-5.843999999999999, 21.58}, {9.644, 27.82}}], 
              Line[{{-5.744, 22.88}, {9.744, 29.12}}], 
              Line[{{-5.644, 24.18}, {9.844, 30.42}}], 
              
              Line[{{-5.544, 25.48}, {9.943999999999999, 
               31.720000000000002`}}], 
              Line[{{-5.443999999999999, 26.78}, {10.044, 33.02}}], 
              
              Line[{{-5.343999999999999, 28.080000000000002`}, {10.144, 
               34.32000000000001}}], 
              Line[{{-5.244, 29.38}, {10.244, 35.620000000000005`}}], 
              Line[{{-5.144, 30.680000000000003`}, {10.344, 36.92}}], 
              Line[{{-5.044, 31.98}, {10.443999999999999`, 38.22}}], 
              
              Line[{{-4.943999999999999, 33.28}, {10.544, 
               39.519999999999996`}}], 
              
              Line[{{-4.843999999999999, 34.58}, {10.644, 
               40.82000000000001}}], 
              
              Line[{{-4.744, 35.879999999999995`}, {10.744, 
               42.120000000000005`}}]}}}, \
$CellContext`oneTermOfdynamicsMatrix[{
            Pattern[$CellContext`k, 
             Blank[Integer]], 
            Pattern[$CellContext`j, 
             Blank[Integer]], 
            Pattern[$CellContext`mVec, 
             Blank[List]], 
            Pattern[$CellContext`kS, 
             Blank[]], 
            Blank[], 
            Blank[], 
            Blank[], 
            Pattern[$CellContext`proj, 
             Blank[List]]}, 
           Pattern[$CellContext`r, 
            Blank[List]], 
           Pattern[$CellContext`mk, 
            Blank[]], 
           Pattern[$CellContext`epsilon, 
            Blank[List]], 
           Pattern[$CellContext`mA, 
            Blank[List]]] := $CellContext`kS 
          Dot[$CellContext`proj, 
            Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
            Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
                 Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
             Sqrt[$CellContext`mk 
              Part[$CellContext`mA, $CellContext`j]])], \
$CellContext`calcDynamics := Map[{
            Sqrt[
             Part[#, 1]], 
            Part[#, 2]}& , 
           Transpose[
            Eigensystem[
             FE`matrix$$31[FE`qLoc$$31]]]], FE`matrix$$31 = 
         ReplaceAll[$CellContext`res$2905, $CellContext`qVec -> #]& , 
         Attributes[$CellContext`res$2905] = {
          Temporary}, $CellContext`res$2905 = {{
           0.0997866725283381 + 
            0.25 (0. + 
              0.4756242568370987 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.8494117647058823 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9283667621776504 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.005882352941176467 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.005882352941176467 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9283667621776504 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.8494117647058823 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4756242568370988 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 
            0.01738863501740795 + 
            0.25 (0. + 
              0.49940546967895366` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.35764705882352943` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.25787965616045844` (0.07633587786259541 - 0.07633587786259541 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.0764705882352941 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.0764705882352941 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.25787965616045844` (0.07633587786259541 - 0.07633587786259541 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.35764705882352943` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.49940546967895366` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 0. + 
            0.25 (0. + 
              0.7094211123723042 (0. - 0.06178020632152154 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9846153846153846 (0. - 0.06178020632152154 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.8410174880763116 (0. - 0.06178020632152154 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.36 (0. - 0.06178020632152154 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.5 (0. - 0.06178020632152154 
                E^(I Dot[{0., 0.}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.047058823529411764` (0. - 0.06178020632152154 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9999999999999999 (0. - 0.06178020632152154 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.5369863013698629 (0. - 0.06178020632152154 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.24972253052164267` (0. - 0.06178020632152154 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 0. + 
            0.25 (0. + 
              0.4540295119182747 (0. - 0.06178020632152154 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.1230769230769231 (0. - 0.06178020632152154 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.36565977742448336` (0. - 0.06178020632152154 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.48 (0. - 0.06178020632152154 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.5 (0. - 0.06178020632152154 
               E^(I Dot[{0., 0.}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.21176470588235294` (0. - 0.06178020632152154 
               E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4986301369863013 (0. - 0.06178020632152154 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4328523862375139 (0. - 0.06178020632152154 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])))}, {
           0.01738863501740795 + 
            0.25 (0. + 
              0.49940546967895366` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.35764705882352943` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.25787965616045844` (0.07633587786259541 - 0.07633587786259541 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.0764705882352941 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.0764705882352941 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.25787965616045844` (0.07633587786259541 - 0.07633587786259541 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.35764705882352943` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.49940546967895366` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 
            0.07196905266250156 + 
            0.25 (0. + 
              0.5243757431629014 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.15058823529411766` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.07163323782234958 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9941176470588234 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9941176470588234 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.07163323782234958 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.15058823529411766` (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.5243757431629013 (0.07633587786259541 - 0.07633587786259541 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 0. + 
            0.25 (0. + 
              0.4540295119182747 (0. - 0.06178020632152154 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.1230769230769231 (0. - 0.06178020632152154 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.36565977742448336` (0. - 0.06178020632152154 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.48 (0. - 0.06178020632152154 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.5 (0. - 0.06178020632152154 
               E^(I Dot[{0., 0.}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.21176470588235294` (0. - 0.06178020632152154 
               E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4986301369863013 (0. - 0.06178020632152154 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4328523862375139 (0. - 0.06178020632152154 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 0. + 
            0.25 (0. + 
              0.29057888762769585` (0. - 0.06178020632152154 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.015384615384615389` (0. - 0.06178020632152154 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.15898251192368842` (0. - 0.06178020632152154 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.6400000000000001 (0. - 0.06178020632152154 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.5 (0. - 0.06178020632152154 
                E^(I Dot[{0., 0.}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9529411764705882 (0. - 0.06178020632152154 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.463013698630137 (0. - 0.06178020632152154 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.7502774694783573 (0. - 0.06178020632152154 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])))}, {
           0. + 0.25 (0. - 0.015427909458759537` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.03317512449046088 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.061780206321521536` 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.0029073038268951313` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.03089010316076077 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.022240874275747755` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.05195823393336232 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.06082974160888275 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.04382818269120428 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.026741709728516534` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.030805472741142245` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.013082867221028091` 
               E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.03089010316076077 E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.029654499034330338` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.02259053649276623 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.007603717701110345 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.028050036922370732` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0.06536027050606147 + 
            0.25 (0. + 
              0.4756242568370987 (1/20 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.8494117647058823 (1/20 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.9283667621776504 (1/20 - 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/
                20)) + 0.25 (0. + 
              0.005882352941176467 (1/20 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.005882352941176467 (1/20 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.9283667621776504 (1/20 - 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/
                20)) + 0.25 (0. + 
              0.8494117647058823 (1/20 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.4756242568370988 (1/20 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/20)), 
            0.011389555936402208` + 
            0.25 (0. + 
              0.49940546967895366` (1/20 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.35764705882352943` (1/20 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. - 
              0.25787965616045844` (1/20 - 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.0764705882352941 (1/20 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.0764705882352941 (1/20 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. - 
              0.25787965616045844` (1/20 - 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.35764705882352943` (1/20 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.49940546967895366` (1/20 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/20))}, {
           0. + 0.25 (0. - 0.026741709728516534` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.030805472741142245` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.013082867221028091` 
               E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.03089010316076077 E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.029654499034330338` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.02259053649276623 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.007603717701110345 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.028050036922370732` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.046352296862761995` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.028605081831060662` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.05887290249462641 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.03089010316076077 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.0395393320457738 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.00982197238815923 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.0009504647126387933 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.017952023630317268` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0.011389555936402208` + 
            0.25 (0. + 
              0.49940546967895366` (1/20 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.35764705882352943` (1/20 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. - 
              0.25787965616045844` (1/20 - 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.0764705882352941 (1/20 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.0764705882352941 (1/20 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. - 
              0.25787965616045844` (1/20 - 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.35764705882352943` (1/20 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.49940546967895366` (1/20 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/20)), 
            0.047139729493938534` + 
            0.25 (0. + 
              0.5243757431629014 (1/20 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.15058823529411766` (1/20 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.07163323782234958 (1/20 - 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/
                20)) + 0.25 (0. + 
              0.9941176470588234 (1/20 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.9941176470588234 (1/20 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.07163323782234958 (1/20 - 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/
                20)) + 0.25 (0. + 
              0.15058823529411766` (1/20 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.5243757431629013 (1/20 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/20))}}, 
         FE`qLoc$$31 = {2.68869999363613, 
          1.6795701478964697`}, $CellContext`showDynamics := 
         Module[{$CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`e$, \
$CellContext`omega$, $CellContext`points$, $CellContext`lines$, \
$CellContext`nu$, $CellContext`a$, $CellContext`b$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, {{$CellContext`a$, \
$CellContext`b$}, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
            ReplaceAll[{
              "latticeBasis", "pointsDataTable", 
               "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
               "numberOfMasses"}, 
              FE`parameterLocatorDependencies$$31]; {$CellContext`omega$, \
$CellContext`e$} = Part[FE`dynamics$$31, FE`omegaIndex$$31]; $CellContext`e$ = 
            Partition[$CellContext`e$, 2]; $CellContext`points$ = 
            Table[Part[$CellContext`pointsDataTable$, $CellContext`k] + 
              Table[
               FE`scale$$31 
                Re[Part[$CellContext`e$, $CellContext`k] 
                  E^(I (Dot[
                    FE`qLoc$$31, $CellContext`a$ $CellContext`i + \
$CellContext`b$ $CellContext`j] - $CellContext`omega$ #))], {$CellContext`i, -
                 Part[$CellContext`numberLatticeLinesToDisplay$, 1], 
                 
                 Part[$CellContext`numberLatticeLinesToDisplay$, 
                  1]}, {$CellContext`j, -
                 Part[$CellContext`numberLatticeLinesToDisplay$, 2], 
                 
                 Part[$CellContext`numberLatticeLinesToDisplay$, 
                  2]}]& , {$CellContext`k, $CellContext`numberOfMasses$}]; \
$CellContext`nu$ = (2 Pi) 
             If[$CellContext`omega$ == 0, 1, 1/$CellContext`omega$]; Show[{
              Table[
               ListPlot[
                
                Part[$CellContext`points$, $CellContext`k][$CellContext`nu$ \
#], PlotRange -> {{-FE`windowHalfWidth$$31/2, FE`windowHalfWidth$$31}, {-
                   FE`windowHalfWidth$$31/2, FE`windowHalfWidth$$31}}, 
                ImageSize -> FE`primaryDisplaySize$$31, PlotStyle -> Directive[
                  PointSize[
                   Sqrt[
                   Part[$CellContext`mScalarArray$, $CellContext`k] 
                    FE`mMax$$31^(-1)/350]], 
                  $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$}], 
              Graphics[{$CellContext`lines$}]}]& ], 
         Attributes[$CellContext`pointsDataTable$] = {Temporary}, 
         Attributes[$CellContext`e$] = {Temporary}, 
         Attributes[$CellContext`omega$] = {Temporary}, 
         Attributes[$CellContext`points$] = {Temporary}, 
         Attributes[$CellContext`lines$] = {Temporary}, 
         Attributes[$CellContext`nu$] = {Temporary}, 
         Attributes[$CellContext`a$] = {Temporary}, 
         Attributes[$CellContext`b$] = {Temporary}, 
         FE`dynamics$$31 = {{
           0.4909143446019329 - 3.2814135761828114`*^-18 I, {
            0.7011195363580722 + 0. I, 0.6482744399587723 - 
             0.04933848815032786 I, 0.1483374179260654 - 0.12653473454648598` 
             I, 0.2139271536037769 - 0.04424369070823941 I}}, {
           0.3958639396457433 - 5.2689842377394066`*^-18 I, {
            0.5735330610135561 + 0. I, -0.4305739567933102 + 
             0.26095779738786623` I, -0.3630388187616194 - 
             0.19116102029595572` I, -0.42888729990246593` - 
             0.2555051623983275 I}}, {
           0.36816449904032944` + 7.354520024438353*^-18 I, {
            0.1465668947706344 - 0.38643445951212246` 
             I, -0.39899229727731694` + 0.3406692334687863 I, 
             0.6568955216997205 + 0. I, 0.32500627110011515` - 
             0.12959695697228724` I}}, {
           0.30192464344667735` - 2.469830864221678*^-18 
            I, {-0.002261650198598569 - 0.09312713062641624 
             I, -0.11159407073662245` + 
             0.19002484904504996` I, -0.5976106918891063 - 
             0.07067521700377721 I, 0.7619882001991882 + 0. I}}}, 
         FE`omegaIndex$$31 = 3, FE`scale$$31 = 0.2, FE`windowHalfWidth$$31 = 
         3, FE`primaryDisplaySize$$31 = {380, 380}, FE`mMax$$31 = 
         30, $CellContext`massColors := Part[
           Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
           1]& , $CellContext`frequencyPlotCalc := 
         Module[{$CellContext`eigTable2D$, $CellContext`eigTable1D$, \
$CellContext`qMax$, $CellContext`omegaPointList2D$, \
$CellContext`omegaPointList1D$, $CellContext`range$, \
$CellContext`numberOfMasses$}, {$CellContext`qMax$, \
$CellContext`numberOfMasses$} = 
            ReplaceAll[{"qMaxVec", "numberOfMasses"}, 
              FE`parameterLocatorDependencies$$31]; $CellContext`eigTable2D$ = 
            Flatten[
              Re[
               Table[{{$CellContext`qx, $CellContext`qy}, 
                 Eigenvalues[
                  N[
                   
                   FE`matrix$$31[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax$, 1]/2, Part[$CellContext`qMax$, 1]/
                 2, Part[$CellContext`qMax$, 1]/
                 FE`meshSize$$31}, {$CellContext`qy, -
                 Part[$CellContext`qMax$, 2]/2, Part[$CellContext`qMax$, 2]/2,
                  Part[$CellContext`qMax$, 2]/FE`meshSize$$31}]], 
              1]; $CellContext`omegaPointList2D$[
              Pattern[$CellContext`nn$, 
               Blank[]]] := Map[Flatten[{
                Part[#, 1], 
                Part[
                 Sqrt[
                  
                  Part[#, 
                   2]], $CellContext`nn$]}]& , $CellContext`eigTable2D$]; \
$CellContext`range$ = Range[2 $CellContext`numberOfMasses$]; ListPlot3D[
             Map[$CellContext`omegaPointList2D$[#]& , $CellContext`range$], 
             PlotRange -> Full, ImageSize -> FE`primaryDisplaySize$$31, 
             AxesLabel -> {
              "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
               "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
         Attributes[$CellContext`eigTable2D$] = {Temporary}, 
         Attributes[$CellContext`eigTable1D$] = {Temporary}, 
         Attributes[$CellContext`qMax$] = {Temporary}, 
         Attributes[$CellContext`omegaPointList2D$] = {Temporary}, 
         Attributes[$CellContext`omegaPointList1D$] = {Temporary}, 
         Attributes[$CellContext`range$] = {Temporary}, FE`meshSize$$31 = 6, 
         Attributes[$CellContext`nn$] = {
          Temporary}, $CellContext`showFreqPlot := 
         Module[{$CellContext`aa$, $CellContext`bb$}, {$CellContext`aa$, \
$CellContext`bb$} = FE`qPlaneLoc$$31; Show[{FE`freqPlot$$31, 
              Graphics3D[
               Polygon[{{
                  Part[$CellContext`aa$, 1], 
                  Part[$CellContext`aa$, 2], 0}, {
                  Part[$CellContext`bb$, 1], 
                  Part[$CellContext`bb$, 2], 0}, {
                  Part[$CellContext`bb$, 1], 
                  Part[$CellContext`bb$, 2], 23}, {
                  Part[$CellContext`aa$, 1], 
                  Part[$CellContext`aa$, 2], 23}}]]}]], 
         Attributes[$CellContext`aa$] = {Temporary}, 
         Attributes[$CellContext`bb$] = {Temporary}, 
         FE`qPlaneLoc$$31 = {{-2.68869999363613, -1.6795701478964697`}, {
          2.68869999363613, 1.6795701478964697`}}, FE`freqPlot$$31 = 
         Graphics3D[
           GraphicsComplex[CompressedData["
1:eJx9nXVYVdvz/+3uDuzuwkDRjWI3Bna3XhNs7G7sbuxCRTGQg4qB0pwD59Ci
Yl67Bfz5vc6sfc97Pvd3/7nPM896FmvPrDXznpf7rF1u+OQeozKkS5eufY50
6TL+/n+PUgcvB5zJ7Nd1R8y3lAk/Dem/Bv6qMCFBY7ttvuY/U9t9MEQuWp17
R7NYsCcZSrea9DLf8BhlT0f/PdPKpjvgF4PjtT3fnCZ3nxeH82vfHMfvvlcv
UYP1aFUKfuuYMWOiVqxKzX3ez1IMvM4re6/aN50Wp+y8zg9Pq7w8lyMe7EkG
37DdtfwW6vPwOk8XH1Ln/Y9HOF5zK5CzaNEQtH/QLKmN+3atKtaj1diaOSDu
EK/ntVqnzSmvzpMnxCs7r/NYujd5jo5KBHuSobpLyqnNk3U7rzPX+xufc8fH
4XhtzGa3Ds+yxuL8Wp6h62Ka+MfgerT38Y32nuocp/G8vM7V78alzs6WqOy8
TkPsyLwHusaBPcnwucDV7y1HxCg7/+donNRsfMEYHK/heF4nzs/r5PXQ+jVe
J6+f7bxOeF6N1wn+UX8H/MnjNfA/z69BvHg9mnV8U9Q6rfdDilon7B+1Tthv
ap2wP9U6YT+rdcL+V+vk80Lny4HXyeeL7bxOOI8OvE44vw7/cd55vAb5gefX
IJ/wejTMP7zOlRP3eJl6W0ReanJqw70hK6JEXmqVp/alG7aRIi91WdMncv5x
k8hL8+btf+Je2Czyklarc+jZpRaRl3zCozyTO1lEXvorpVfP0t5mkZfcvphi
emWziLzUcWDRR5t8LCIvTb3VffPyEtEiL2V/UOl4z6xo/6B9PuwZP2SBWI/2
xd8rv/8es8hLyW639sVeMou85JNUL3XKTIvIS5Vnb/3awsMi8pKtXbVesW44
T5L2ttJt34CYSJGXwpf2GddvWJTIS233ej64esYs8pLN85h85p4WkZc8Qx+H
NWppFnkp+WyrsiObmkReOj9n0fm020aRl3A8rxPnV+ed1oN5idePeQmeV513
8I/+9639qc47+F+dd4iXOu/W8dXzkvV+0PMS7B+1Tthvap2wP9U6YT+rdcL+
V+vk84J5ic8X5iU4jyovwflVeQnOu8pLkB9UXoJ8ovIS5h9ep3/H68b07ph/
Phj2dUrdaywg8owhW+ZyLdy9Q0VeanGv1+Zi7mEiL12NseztVNso8tL+B3uK
jPY1irzULtz87a2jSeQl26Q303wGR4m89Lqlba1um0wiL4WULnpkeQ2TyEtN
W55zz19MjNem+O6eerA52n/ruuF9vSO3ifVoZd3vLOk4IlLkpdA+uzOmO28S
eWlC9jJtE9qiPclw4kj5yyWuG0VeCvFr/N7fwSjy0ma3ZhWLF4kQeelF1Z9z
sw2OEHmpq2PPZo55okReirj6/sjGeSJvGMyJdR6uXCzyjCGmS6s78/oFirx0
9e3mLuWq1m6BeQnH8zpxfl4nrwfzEq8f8xI8rzrv4B/1d8Cf6ryD/9V5h3ip
824dXz0vWe8HPS/B/lHrhP2m1gn7U60T9rNaJ+x/tU4+L5iX+HxhXoLzqPIS
nF+Vl+C8q7wE+UHlJcgnKi9h/uF1Hp886Mb1HhEiL9V6261UzlIizxjaTL9b
8fmwuyIv1ctauFrhcrdEXjp/KH02lyV3RV7qsmRpm0pxD0ReelIydlLggGCR
lz71zbzJeWaEyEuDl3TYkndamMhLXftV72+sFSry0pTSbXMGVQoVeelG9Pol
0ZPQ/kG747CjtUf+MJGX+qY8CLJfEi7y0vgaRkve3aEiL115U3hx8rQQkZec
pg3I8WJIoMhLn33qp3gduS/y0t/FPWxzLL0j8tKm2Zm93roHibwU0nnL6pLJ
4SIvVdj7ctziwGCRlw5/ezq9fde7Ii9ph7zD6j65LPJS4pjU9R1rVRR5Ccfz
OnF+XievB/MSrx/zEjyvOu/gH/V3wJ/qvIP/1XmHeKnzbh1fPS9Z7wc9L8H+
UeuE/abWCftTrRP2s1on7H+1Tj4vmJf4fGFegvOo8hKcX5WX4LyrvAT5QeUl
yCcqL3H+Of49cEG+bxn8Wizpu2vepc+GTjXtEwp5xmpppm/t+7RK59fui4td
avnvBr/Ivz03VoxT43s3dbyS4vW3wXXSqeohmePV+Fa9cs1JtSQbCgwIbJcl
NEGN5+cduqJNupYv9PnZ/mptuo8vtsVpP/+xv1P+nNLh0sn2neO17v+s/7O+
Hyp6+xvfxGkeIztUtC/+U9lH/boSP3RjHPzdJMPBu1e9on/3xdZ/N8lQsVPm
BR479XV2/meehwYtc4fyn67o4//YYwzbHkxt3f68Pl7FZe7uxzuMuh9UHRmw
5nH7T4la+3/Wb1LrjKq50i5pWoLW5R/7U2XfNct+VujveY7/eS5D53tVis9r
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
m1+3s/+jv67P9L5vrLKz/2uvneRz5kCMZndo9Em/ji80tm/aYzfct26sVu+P
XfmH7TwPx6v9kso5OnfT76vneN059aD8gHp4772XPd57z/G6C+M5Xh1gfl5P
HVo/2zle+LwcL/QPx8sE/lT5jfyf4594BWq8njkdr337lF6/J5/jxfFlO8cL
9oPG8YL9o3G8rlnvNxUX3p8nSG+oONJ9Hd8q/994H6XT3g+a+c3TT7+3n+MV
Zr3/NY7XW+vzov3H+dI4XnAelX/4/NYkv7Gf+4ReiY/Yqs/DcYQ8oPTkC+u8
oZ4L8oyaH/KSxnHkPEb6wYHjolG+tfn/Pm+Kiu8+qzyZouILeVXFd5J1Hlbx
rWGdt1Ucn1OeL/6nTjnwPAHWdUrFkeuIWifFEeqOei78PgLHEeqaiiPXwROk
x3h+voeQx3Mcn1L9ZTvH8bJ1vVZxPGxd31UcH1vrARXHINIPfH8mx4V1CNs5
LqBblD9B5zhwXEAXOXBclpOOWvtHZ6rnPWytMx04LpOs9ZjyW3Vr/ebAccHv
QXBcQB86cFxATzrwekB/OrD/Qa86sP9B3zqw/0EPO7D/WT+jDl/2a+H4bhFR
QodXHZ087/V0i9DhJz285447bhY6PDAmvFXqjyihw3fOdFyWc1CU0OE3Ygf7
5omPFDr8Ucs5X/MPiRQ6fNnEWaln8kcKHT4u5dm4InEmocPx+xcclzLLL+we
tTFS6PD3C3MP6zwnSujw6QULH3J1NAsdPtg0PbpMkFno8HbbIws8dLYIHb6v
yOT7bjMsQoefcT3sU2+YRejwrrR+1OH1+y+7u8mkf3eD/f/N+5Jd1k+6nf3f
qML8PbGl9e9lsP9HnJgR7zJct7P/3etMLpvzqEXocP4dE+pw89B2EzJu1efh
eBkvHQnKa9TtHK8K9nPrdvqK3wHxssfvgHC8Oh4pO7dnQd3O8aqw8t3wsrmi
hQ6v1fNoWa+O+vwcx7aVvtbu/UW3cxx/NZpwu99t3c7P5d0+oc9gd93O8zc8
PfXVlba6neO4tcnm+b7v9e+DcLyKONZs5Zqm2zlebbNve5qznf6dEfbzqt7z
fXLM0+0cr/dnRvyIWqfbOV79snRocmSfbmf/Vxt3revo/rqd/V87bKrTwVf6
etj/+H0T1Qe9Lz9weqL+HRP2v99Jm5F5Wut29vPD84W95r7Wv3fAfh7aO/eW
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
qecGff1Kb7Tsuvbmft0P7Ofgy4OqpvUPEzr8I61f6Vjyv0vC2LM1f+9PtrP/
b5d79iFy4n2hwy9cbO1664O/0OGJT4ZOrpvoJ3R4qZo/jPa7rwod7t87MMVp
7x2hw9nO83C80oaH7K9Y47zQ4a2yJZ+oWOOg0OGF6jts/fd3PDleXWE8xyvT
COv5eT0VaP1s53glwfNyvLzAP+q9O/Anx8uV/I86vHKxESV/zbshdHgQxRd1
+Fbr/aB02l7r/aN0msF6v6m4PKL9iTqcf5+FOtx8zHWlWz61/5V+g/2v9Buc
F6XfvsD3TDle36zPo/LPDzq/qMPruzu3aZFNfy6OY7x1HlD6bZl13lDPVdM6
z6j5IS8p/cZ5DHX4Ecq3qMOtn1fX4dZ5UtfhkFdVfCEPq/hC3lZx5DyPOnyz
dZ1SceQ6gjoc6o56LvzeK8cR6pqKI9dB1OGr6T1wwcOp/qIOh3qt4gj1XcUR
9ICKI+sH1OGnSIegDp9mrVuUP+2sdY7S4WnWukjpcH/SUajDQWcqHR5qrceU
3xZa6zcHjgvoPaXDZ1vrQ6XD/az1pNLh46z1p9LhYdZ6VenwPdb6Vulw0MNK
h7N+btz4Zeat1dIrXd36Y9YJN1Jjed8q/ZyzskPR3sZYbdKOmFvh+TIo/Xyi
wDDbtfvieV8pPdyCvgvzi35HrPQYfUfmdsKSum3cvip9km9J5fcHLsbT/B+U
Phk7dvORrJ8TtGM0P/szmN6nSqX52Z/8HR/Kq0qf8HeCptD62Z9NTzXtNznd
I94Pqj6e+ratysTdj7QG/9TN70rPTNn9OtHJJlFL+Cf/fFR65vPmhzF9cyZo
Dcmf7Gfbug16lD0Vr03+5+8mqee9euPy1oPp4rUCf/Kqel5net+vMf1dfq5f
OdPlK1j0kZZEf5f94Lh4cubcGRM57ykdkpvexyM9oPywsb5L4zWNErWy/4yP
1fnqo7MXHxdJ0Kr8Y/dROvADvQ95hPzJ/uHvnf3pFz4rfcXfR6Pfgyh9xd9T
m8Z+YL5Xyn5m+nexWmXyA/t5Lr0vepf2Cfuz5aJvb4e8jdWm0j7hfe488VWR
pGaxWkGqU6ofHGT5UL5rHO2rJJX/y5TO1n5MlzhtAq2H/Xmb1pOV1oPvr/6p
gz6qLmyJOPblfqU4rcwff6q6UPDKlNOOp/i95VjlH7Z/+VPflX94nmq0fvSD
C68f/Dad1s/+KU3PRfVa+aeTlR8+KP/0Jr/ReVT+cSA/k3809E8hqLP8/if1
a8o/pynuPel3QKqPoH1SgPzG/llF+5D0ql6PaN/G/9n/yg8taf/TOVV+S6Pz
4krrZ/9co3PX6M85VXWnIZ1TOl/qeb/QuabzqOop5wHiFarun6a8QXlS1SPO
M3SO1HNxXvrFv+uh9fP3qWmfq3rK+ZDOhXouzp+UD1V94e92OUGd4t+bUF5V
dYq/G055UtUdzvPUd6u6k4PqAuU9VV+4jiSQTuP18++PsO58S30Z36iNWdSd
AQf9qmcJjhJ15+aSnr2+HzSLusPfq8K6w9+rwrrzIDxrz+a/zKLuVD1xrcfA
dhZRd4z0/gDWHb73G+sO3yuOdcfjZxP79Hctou5M2VY9968vFlF3lkbEND/y
l0XUnYHLMwT4fTKLupN/ba3iPh/Nou70SHkztfRqs6g7vvR+C9Yd45HKEZc8
LKLuLH17rGBAPouoO/z+CdadYq0TPsTNtIi689rD58m1D2ZRd/j9H6w7w+h9
Iaw7/D0FrDv8/QWsO33uXHB46xgl6s4cej8K686LwI0F3CqbRd2JMU4qaOsZ
JeqOKWNR9z4DzaLurAsdcSbbMrOoO860Hqw7/L4W1p2+1xfUWVXILOpO97k9
2y9cHyXqTjeyY93hebDusB+w7rDfsO6sp+fCuhNp5Qe97rDfsO48Jz9j3WH/
YN3h/YZ1h7+jhHWHv7uEdecV7UOsO0Vp32LdWUL7H+tOBJ0XrDtOdO6w7vA5
xboziM411p1llAew7nDewLrDeQbrDuclrDv9KI9h3eF8iHWH8yfWHb7nH+sO
v1+NdYfv/8e6w3ke605/qgtYd75THcG6w+/bY9253qHQkjaLI0XdybQ8Mf5l
YZOoO40arj5Yq4xJ1B2+3x7rDt9vj3XnxbuyiwO2Roq6s+9Xj42RgSZRd/je
P6w7fE8g1h2+7x3rzorWNv4Z04yi7nxJaJblWi2TqDvd2pVpEvnOKOpO3qWn
tgTtMIq6k69tZLTrHZOoOw1yunTdrJlE3eF/z8W6k82w2Gn873Vi3XmtDTq4
fb9R1B3+91asO3m7+M/K5mUUdael4wm/sH1GUXf437ux7vB9qlh3+P5trDs7
6b5WrDsl2xlOtfoeJupOEL0PgHXnrxMWP6eWJlF3vG/9ndq3jFHUnRlXm4yZ
Wckk6s7wtDZOccUjRd0pQevBusPvJ2Dd6dbLKfJHL6OoO5fOXvraPTBC1J3L
ZMe6053mwboTTH8X644NrRPrDj8X1h1rP+h15zL5DevOBPIz1h32D9Ydft8G
6w7f04t1h+/pxbrjQPsQ6w7vW6w7r2j/Y93h84J1h88d1h0+p1h3+Fxj3eE8
gHWH8wbWnZWUZ7Du8P2oWHf4+xdYdzgfYt3h/Il1h+8FxbrD/z6OdYfvC8W6
05jyPNYdrgtYd3yojmDdaU3vl2Ld6eDUsu2creGi7ky1f9W64q9QUXeaV7xx
ffKRUFF3ZtI9FVh3DHSvBdad/q7HepbLFy7qzq0NHQq/Ph4q6s564sNYd17S
vSJYd/jeEqw7I2ycKk+MCxJ1Z1e76SvC8oSKulOvYee7NSYFi7pTcLY27N2q
h6LuOF8+luq2O1TUncUuC1JqlwkSdacO/fsF1p3+X4dnuhQSLOpO1eiO6S5d
eyjqDv/7AtYdm9uBX732PhR1Z+6lsn7F+gSIumOhf9/BusP/HoR1Zznd14R1
Jy/d74R1Z0XFD637X7gt6k4t+vcvrDtLngz5UL9UmKg7A3a+qNVjUoioO48O
XC7lX+uBqDva3sk7U1NCRN1ZQuvBusP/Hod1J9Dnxpl0De+KutM+e5ve1V7c
EXWH7Vh3eB6sO+wHrDvsN6w7jvRcWHeeWvlBrzv9yG9YdxaTn7HusH+w7vC/
L2Pd4bhj3eF9gnVnNu1DrDslaN9i3alE+x/rTl86L1h3ltK5w7rD5xTrTmE6
11h3bCkPYN3ZTXkD685IyjNYdzgvYd1JpjyGdYfzIdadAZQ/se7cpnyLdYff
n8G6M4fyNtadFpTnse5wXcC605HqCNYdfp+K75Pk5926361KyLxEZef4boiu
tPJgzkfqnknFV/e8GtszOEG3Uxx9nlTafC88Xt0/yfZb2SvOblY3Qdl5/+cY
FVChaI5Edd+s+l1SQGDM17lxys7je3x+saXC7Vh1Dy2Pv7d/9+gDjeOUncfH
/fBYEThFn4fPRYEFY/KUbK+PZ/uepeXT+3+Og/uTXxk8J6ys0aNAAty3/Mow
L7ld230v9fl5H+7oWmpnzp36POr954ixI0xe+jzs/4JtK8+Zv1Wfh/3M3DXt
P/69TPmBxrcpm7R4xuhEdf8h+6fxmhY3M4yPV/cf/u97Ufx98F4U63uzvezr
zd39eIcxHu7N/q2jBqx53P5TorLzfl5rnlAi6rG+r9jPeYb5zd97M16/Z5X8
Wb595RM14vV9xeOdXlUoYA7Q9w/eR6T2LT2XnZvdk9kZ9fn5ubpFtcp81D5e
zc/2jcOO7khsrceF18/3M7Cdz3X+knnnzuyv+5/tzOd5POeZLX8/9W5YULfz
uXYd23XesH2633h88qWTnYbY6eeO4/7w9lK/LMUSlR/Y3ivdi7zb8ut2xb2f
/Nx1K0OC8gP+uyfPz/aKvarbvZ6hz8NxuV7pxMRbf+l2Hn/Gff3KuVP05+K8
5BCYv2nBEfpz8fNeKD4pW/403c7jP7+P91s2RJ+H89Vluy2rM/1rn7O97LLa
O16c0O3qfcV9o9PfOh6v73/ywybn4yv7No9V+5z9Zn0fzu9zQeP5/hxeD88/
3zhx2UvHBHWvI++3Y4MnD5mdFgf3b3vZrywc8txl5yNl530VuelcmQyrdDvv
n4r53J3dZz2C+7q97EtkL1M4xVWPF88zdvmvTqtHJsI93l72fb7HLc52MF7d
j6r0knHRoj1vEpSd43v2ZGfvPF8SlN94fJEqhVNi9uvz8PN2PrSsaOMpul29
rzv809NqvfR52P7Ca8XQcZn1c8fPG2T5q0HHivr61e83D1xxWllWryM8PmOp
smF2v/M5z6Peg52e882WB3p+UPcaJTj1bfohVtl5H76pUeyt2Ryr31tL+6GG
bfSxZ4Z/PS/th7rFMlWYvz9OPRePf9Z6scfU8/o8fC4ujy99e+cN3Q/s59LP
krOOGaPvTx7vMveuocK5OLUP2f8rrO5Z8vfheWKs7mXy9+F5+B6n49Av8L1G
bGc/TB3cc87rC3r+5PN4sZF//WGF9P2mvpNL/z7Ldh6f3eXiZxtXPV5s53/n
5fn5/O7J833ugYJ6XuLzVb1qvaezCuj7hMdrhSrm+jk4Tj93FJeNdK55PM8z
++T8kzuf6HHnedZvmxpWsp5u5/EVKuePbusfq+6r5H2Odt7PPA/fY8nj+e9a
3/vtZR9drXrWUTXi4N5vL/u8CzofHFMmVtl5/2O+4vGtre778vf53/d9+fvg
fV/sN95XYz+dr1bnt47ie2jZfrRSyxnt6+h23m/PzHMSTrSPVfMobjZxcK5I
mzj9/l7yw6ra64aV+Jedx3/a93fftyt1/6j3eNfZltuWKU7Zef1eOfYcaNdL
9w/bV127cGhVEX0e3udLa7a8Us1GH8/2/rF9rk2Ij1F23s+Z28/KcG6b7uf/
fR+avw+Px3PH+5zPKfuH8wOvk/3Adn4u5Tfaz+wHnof9n4nWyXZ13wg9F8/D
dvYD+4fXz3FkO6//CMWd/aN+70n7hMfzOfoIceRztJLizvPw+Eu0T3j9PL4J
6VIez/ajVE/ZzzyP9X19/j7qPV7SsXzfKe/DeVCv+RzloXOn7qOmfcj5xPq+
cS97C51fPu98Xjjv8b21bOf8yXaO4xTKtzwPn4sWlN94PK+/KuVDtvP43ZQ/
ef18LpKpHvH61b0WVL/Yru61oHrH8/D+n0r1iO3q+1ZUv3geHn+J6h3nSd7n
6aleq7xK+7wM1Xf2A48PJD3wEzgGvyfGdvbnK6rjbOf9X4vqPs/P4/k9NLar
9z9JP3jAe9f8Phv7gc9FYdJF7Af17z6ko9jO4x+S7lL3gdN+fka6iMezfS/p
KHVPOPf1pLv4eXl8Tuqj2c7jb1Pfzc/L9hvUp6v6RXEZTXpS3cNMcalAulTt
TxpvIh1rfW+5l30v0p/W95Z72RcjHct23p8tiCdY32fuZb+C9DPbFX8mLsF2
3s9biGPwfci8f7i/YDvvB+5HOG/w+JbUv/B4dS8H9Rds5/PI/QjPw3Zv6l/Y
P7x+7svYzuvvSX0c+4ft3PfxeD53p6n/Yru6Z5X6NZ6Hx3N/5wEcjPtBXr/i
EtTn8vOq+4GpP+Xx7M/p1M+yncdvpf6X18Pngvt6Xg+vvwJxALYrjk3cgOfh
/b+J+ncez/bu1O+znfd/U+IDvE62M3dS92mTH/j9YbUfaP+vI76h6g7ZQ4kb
WN9b7mWvESdhO++HtsRt2I7v6Vnfc+5lb0sc5ijwQwfiRWzneQoTX1L3kFPc
SxGP4vHq31+IX6n7ySkuC4h38TxsZz7GdvX+OfE0noftzN94PMeLeR3bOS7M
93geHs88EHnmaX+/Zf0PWATP/Nlx2/Otty2CZy6d+SzfjKoWwTMti6fbFP5l
Fjwz62bfWXvSzIJnNu5X1ca2nUXwTC3a3vvJX2bBM/++nz33pIxmwTOH3XNZ
1Hu6WfDMKpU8PgVsNgueWcM2fLJjbbPgmaPc/+qz39cseOamIqN2NspgETwz
Xf/Is2l1zYJnVjS8f5b+QpTgmaPtx5nfZ7IInnn/5du/946MEjyT38NEnsnv
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
4nvIM5kH/j+D3dr+
            "], {{{
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1:eJwtlvtPV3UYx8/x+z3nKJGgCJUEeMuIEOkmTadmYguWXcjSmt1IN12mTlnF
suw2bTXXuqzWqrW1arVW/0FllmYXMwwQwQtgCl4CryDe6PX2eX549rzP+/Oc
z3k+z+1zxtauqFk+JAiCZiSFVCZBUBoGwWXpINgRwYHHwF2DDAU3whWDh4Gb
wP8gafA4uAPgKeB54DLkBvC/cLuQXPBkuApkPHgP3I3am29ORd+V2LPs8/j2
aPhsdD5SBM5I2z6jsCnFtg18BXwM3+r7T4KfENq716PLWVuKXu++VYDnJ3au
IeAR4AeR+eDjcN3ITPDNcAfd/gHwLeh89rwVnYOMAueha1ibhO5UDMDH4P8A
70YK4WfCnYmD4Aj8b3DTeS6Gb4/MZ+1RDtdD4DOx2RzZuQrgZ8DPxv8y+Cno
DTwvgj/F+mJ0Mfwy9Ovwj6JPwL8JfhJ8Enw+sncreXcaXG5guTmMP7vBvyiW
aTvXeHSStnjug49C8+c8UuZnVwzu9droiCy2pfAz0HXKP/hpdMj+5eBq+OU8
r0A+4L1DnDHW/ujRcMMDy2UmdleC97NnX2T5eg/7Bs9REfgceC34i8S+oX3f
T4JLG64Hfwz+BFkFPoNtLXoCy7fJn7Tlqxl+JzIcrgDbQfzICazO5/J8redF
3x0BP8D6HZ5fnfcqr3nV/z2eR9VkVWIxUg2cxZ+jvPs7+K/I4peZWD0op8PA
zdi0wP8Mtx25AB6u3kJ6vX7C0HKhvlJNKVankUbe3YnehE2195fidspzqvp5
HL4a/ih4leOr8fMQz7PBC+H+A88FLwE/4/WvGpjmcVANyOZucJ3qHxkHTmNT
As4ILZ5dyAzwTXC/gg/gQx++TPU+3Ksc+rl6iWcHuh05ik0Dz5o7jegzgZ1X
55ZNJ3IBm27WssH96C3slQHuSlkt6VuDsX33IDjgO908t+l91rti23cb6y1I
FnsXqqd8/si3A9j0Y/MneJafUXOpHX4r/A722ajeBu9K2azTPByZmG/yswfb
PW7/I+t/IyPVOymrAeU3L7FcX9Q5fY6qv9Rn8i0bHcOfcP/Vmzk897lvl4fW
I7JT7Sgm+5DcxPzXGXtjm+GbvM513oj1414zqjf5JN+Ux4dZe8znxk/yG74D
26q09e8g3Btucx3cl+BXwLPAL/n8eRH9kM/wGtUq78xDv6CZBh4LP8HngPr2
LfhvkFdD2397YDltQF5LbK5pvu1VXj2ep5GJ4Mns8yk2q0Obh/XgZ8EDrH+P
bMZmZ2yzQn59ltg9oppflFhf6uwn9T3sDvtMVoyzkKLQ4iBf9se25xblHfw8
7z/H+lnddz7P1eM93iNLNZeQO8FHIvNVPqvvFqi3wE2BzWnNpTWaw5HFbQw2
vZHF76nE7iDNrdrE+kv30RPg+0LbU/FVL1eiF8MX+AzPSdv8k81KdH9ks/dt
+Z6YH7rjlKP7wcvgFqJLsF8Xmh/ypwT9st81ukd0pkL4OaHN5yXodaxf8Jn8
eWLfUj1UpC1fsnnX86N7oc7zLzwxbXU6VDM2sBmu73+L/XS/U1Rva/0ukz/a
V/ur9r72OrzId7Z67/fHdu/oLvguMV79dSxlc0a10RLbDNH8OQfO9zmmf5jb
dScEdmc3+Vz6IbK8KFZrsG33+0tz7COe670e6j2G25B3vD51B2lOZfgM0b+E
/h0WJFZ3l+aYZkFoNak7aY7HWfO0NWUzR3PsQ6+9AZ8tmiFZcK0eQ9WoakDz
fLX+BZAqr8M27yOdZaP3eGdstaf6eQTblW6v++Ir703F9n8gH0Vk
                  "]], 
                 Polygon[CompressedData["
1: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
LPXU+nhXcR//AZFqEF0=
                  "]], 
                 Polygon[CompressedData["
1:eJw1lulXVlUUh+8Ld0BFQUUocEZLcTYVZ0WEhViWZjlkmqhlaZpTauGUZTZ9
aVit5lWrefoPmjWt1ETmSRGVSRRQkSGJnr327sOz3t/72+feM+2zzx2UtXnR
pjDHcQ6DB2NcxxkNhwLHWR9ynGbMTt9xLhE7Jg3wQ/AJfAyfwj7a/WOxKn6O
oxvDHacJKtGjiU+ECbCINmfxEtHJ6CkwFSbAarwsmA01tFmIdx+cR4+yZz+z
/jrw0hhnOvyKLqDfNmiHPMZ7B+2GQh6xLrQfhh4DfdAleGPR4+AuGG/9zyJW
TewGrEUfwDsIz0MH76zk3TXMqQVa4U38x2k3ljHMhFlQz7Pz8FYSWwWPwCD8
gZAEa4i9grcCHoKHYS5eLc99h/4WvocX8Rz67MMzMZAIS/AeJDYZnQwp8Bze
V3jXeH4lOhv2wHK8y3gZ6DRItzG14+1Gn+T1J+BZvE68g3hfojN45zx4IND9
kn2bDFW02Y63AH0VPYQ2Q+FDvA+gFW8bsY/Q62xOdZ7OW+b/daDj/Nf6+ga9
BJLt3UvRy+ANy7ubnq7vW7bnB/D2w17Ltfdl7dAr4JCt1SRXx/A6sTnoVHg1
0PW+bnv6Gnob3IO+YnPaAdmwHG+Z5Bk0ePqM7Nc+YvsDzYdnYDe0EdsV0vXb
KHmKXgiLodFyaB16I2ywfrfAU4HmSCbeVlsP2cPP0V8Eugcb4Al77/02FjmP
L0heWM7J+ryEPmx7vwrvZfQmeNL2XvJQ+uvNOvSC9Tbvfui+ro5B8lPOu5z7
tehUy0XZw0ehydO8exq9E3YF+p7HZByWD7KOq+38yLnNQq8J1Eu3/JtpZ6sA
uqITiDn0GYJSzlKJ1Aooxb7GXnYhnkK7OdAfynjuL2ggHkYsHFzw4DbicdAD
CmkTzTujXD1jMp9YdE90NPSSZ/HO0C4S3Q16yPnmvac81d0hSvYG72+836AI
fQ7OQhPjy7e6cjvt4gOdj08/nqtj70es1NM5djKvbvyODGk9WyD7ABXEh+Hd
G+jcGmneDDcgwurkEOIjIAlS8S7ijUdPhSkwGm8kjIBRVt+KadNBn7fApd/B
eClW/xLQ8RBj7Qbghdl6DJRaBbEyFzwPbtm6nIQW9CXmXgXVAu+vgnp0BbHf
afMH1KGrpVZCK7E/8erR12VvIdfXvmQfcokNRidCf4jE6w7RUETsKJTxTB3P
XKGvqxAjOQ0nbEx90AX4+fAj3jHZJ9qf4f9xdLmv45Tx9qNtX+sryvJF9rfQ
7o18KPD13oiwNfBtn7PtPMr53oPeCz9Zf6U8U+ZrX3n0kwuF6KPEctDFUATn
8U7j/cxzwwO9l/LtTCShF0sfgdZfqY2XPD2DS9H5MkZH74Bzvs5R+pc5Vvh6
FqJs3Xx0AEU2hh/witEl0AgNvt6bhZbPMq5Tku8yXviFWKWNVfQF9EWIIJ8C
OId3Z0jz+Iin57aGeK2veyV7ftn2vw3aZT8gx9ccuWx50J13RcIFvHGWz1Lb
5f4LEc8kNt/VtSzmmRLJM5vP27TbTLsWT+9DuRdv0q4ZWnz9FpFvlnar1e/Q
/l14z85KL7zeUh/sm0Duo+noaTDJ1v66r/XoiOXhDV/PQis6JPdOSPOvwtZj
mrwDZkC5p2dvInpSoN87M602SD2bhZ4N58mLCmgI1/omZ39OoGe23L6V/j/7
skaZ6Plwd6DfRlJX5qLTpN5ajZNxyfhcO2NyVm5iD+D/wJCe4zb7julpNSDH
03t8q9wbsMXu0lirj1IL46TeSv7x3NlwXW/5Nqy1bz35TpMxZMA86OpqjZP1
iEcnuHp37sTbDjtsX+Ks3p72tG5J/Rru6r0m3zLT0TPgP8x2Zh0=
                  "]]}]}, {
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1:eJwtlntsFlUQxff7WHZXpEihgFCwtgKtlGdLS6FAX7RaUIFaJEIaYq1GJYoS
jBE1KioINb6jKBGiQuIjakBFKg2FSJEoREStoMEgPkjwAUSIIkL8ncz8cTPn
njt37t2ZOzOb27yo4Y50EARdjG6M2igI6iFakyDYEgZBE9x65Bj4GL4c/nwq
COrgzyAvhJsJTpBPoXcVeC1yBaMeXMC+d9ArB78lfeavIw/GQfAdsgb+S2QG
/BTwQvb1B3fCnYuNfxP8DXgOayXoNCGfYUScWZ3Y2bpDClmH/g3gTtaLwZlw
V6AzDlnEuBs8Nm3zJeBt6C1AfyNylvbID+xrDu3OVyMvZX6YOwxG/37mtfDZ
cPeEdv8HkSdT9u3/ILuz9hxye2z+nM5ZS9m7DL0r0RkKNwxujs5CHkK3Avwt
8j70SuCmoPOs++155Hz2TgDfhuzH2g64P7C/HP069Gvg2pivStn9e7rffoDr
hs7n4IFwJ5m3gTPBlYwq9j7E+mDwfvifWH+AeWnafCJfXcu5r4Lf93tuQQ5B
/yvkz+jnun+Ognem7Bs/TZmPtf927F0cGReAB4B3gc+jHzHfAx4U2R31BnYj
96Xs/eiMe9GZjJ0KdO70u8k/3ZHXoPOjfO+xmxnaftnp8Hvqu/6LzW+Kl+LW
lbI4HkSeZswGn0PmoHNA75Rztvq36Jv6wm9HnsLOX4yPwX3kZ/ROgS8Ht7v/
Q3A5YyT3W8x6M6MAPBGuhNEfPB2uiTEcvIH7fOI2FZfO2M6W/UfRqUWnHZ1b
wHlpy8dZ4Azwi+DRkeXCJLgD7H2PvRfBTXWdcXqr4HLwVPAkxlzlI3t3hpYv
0+Qb1q8P7E1UM69GLmNfI2NQ2vL6A+yvwX4SWUwVxxNw2xitKcuXrY7lB+WC
crYxtHetc4uRZf4tE/w+heC7FOfI8nQReBN2XsZODJcDNz+w2iQd3XMTNgen
LXb99P3+Vicg14TGy7dvex1rC63+KKeU38qRN7D/NeekwSvBH7n/9E42I19i
TAS3I19xLD3pP478UPqx1bhecBvB77r/K92Hj/AtkdeEjtiwcnpHbHfVnZUn
ystK8BFkVWR1qYN7rvQcV4xuDe1t9wDfCN6A7h7srE8Z/h5cxFpv1UL2feE+
VLz2gdeCL4isNjZgZx029sOvS5nNvbF9s3y+y/VVb1f4O1SdqfOa9kRid6jC
zmJkS2j+PMS+LI/1gLTlpny1ObaYKXZ6z3pH2vsa8hLPuwxsZnl9O41+Ifgs
uBQ+h/ELOA9ufGQxr4c7g95eryEjGP+CS5RznpvqQQvB+Z6DSWL6quE6V3W3
B9zfsdUi1cmjyBnc7U9kIWvHkMMi8616SgPcau93TyIHuo5q+yhGGp0+cLvd
t/J5i9fweaHVTNWtIejkMn4FXxZZr1HNeRiduYm9aeVsgefmGOTN2uO5s8C/
q0w54TmuOpkHPo7N5aH5RL26CG5EYvVO9Wqy59TTzK+Dz2ZeqjfmdanM65hy
s0V3VPzQ7e3+Vx2bl1hNU5znJ5Zrqns3Jdaj5cNW5GTmPdUPInur+gf4DHtD
4U+Ah0fmT73b2XCH/Sz1u1HMfwM/JtuR9fnMxOqe/klqvKfon+F4bD1YcdG7
0b9ENXiJ+qb7We9npMeoIrF/G9UK1Ywuz1/lsnqi/k3OwmX7HfQG1AvUW47F
1i/UQ3qx3tffp/4HjsTWL+WrQn+TxYm9DfX8SvXExN6Z4j7a4yU/KA6N3Gc1
86XYmhZYHF9Q3Q/MD/mJ/XPkoz/WfSg83mu14jgjsf8z+TzL+9fvsdV95aZ6
R67/h1Sol3qM1C/+B/UlENw=
                  "]], 
                 Polygon[CompressedData["
1:eJxFl3scl/MVx5/fr8fvedJclstYWLa2xUYlpOTShUTFighd3Y1yq7kkylyy
sM1la9OWu61SVq5pRaZhoilGxoxNNmyYy1zG++2cvfzxeT3nfC/nOd/zPbfv
tuMmDB3fLIqia6MoSr6710XxMfR3oLu0imIP+PVZMBz+Vhb0gd8b3Ax9C/g6
9BusP4D5GfBbwH8JXAr9A9AXesNmzP8I/pvw3wCXQV8OtoN+m/0HMT8Tfha4
FpzA+IlgN//H/iOZv4vxn5Wxbj/GB4LBoH0z9l/D+NXgKnAA44PyX+qobv6z
B/Su4AroH5ZBf8j/BxUx1h++Xx06zMrzev62YC/oPeuwibb4VcormPsEGbtA
DwAbwQ9luHsrbNUG/pAibKbOmzXDvp7lC/AfsXd/+EvgD4LflPlNwIHQNzB2
PTgU+rDE5aw/uIi5I+G3Ye3W4HDoCYyNB23VGwwHh9Qhw/WbKR9snvc0DGzJ
3i3UKdfKDytiz3Vl0J+N1WH39qnf/tA/UbcidFb3RVVRLASnMH4qWAx9LxgD
PRbcCT0D/buzZxD83fB3gVHQo8GGyHiG+X2YPxd+ozrGpKeAfdKftLG2du90
1vcsQsb/fWBQ+oY6DwWz8yye+7m09/QybPQ0/F5F2G40/CgwBozNr/Y9jPnb
ys/HpOeXYUNlKkufPwZ6e9aPZP2c9BF95SjGjwbjUq57F4D1oEvQAlX6/A7p
P7PyzrzrDs24S9esQd/VjdjbBA1wAeu+D47wXptxJ3PTPxyTngdq6KcaIUNZ
xrB+eSz0cYntMt6dO7gO3/D+9Q11Ujftb6wUYAWy9oOcxty34d+CH1iEPovB
KOidWX86c//lvt4HZzN+Thljp4F7c+0E6J1Y2w2Mz/M9gbzHwSfs+xCsgu6H
zEms/xh+JXxf+M1bIfsR+P5F/ONd+HfAmdBngTPMKcjuAbqCC+H78x3D+geY
/2Wezzs4iblJoGcz9rj37/or8ndjzZEpT10n5lp1mgg+SF0dc24hY4sShxch
0znP2wV6BGO90f+UOmylzZakzp7FM3mWyeaf9Md5eafe7Tl1zJ0HpoCpYJq2
1Obs3beI+HkLGQ/A9ykiPh8C46A7IvPsOsaM3TerWHs69GngDeh/gb+Bl8HF
ZeSr16HvzPvYrBX/3RNZo+H7wJ8K3z39sVcrzuBZHgb/gX4VrAP/BK+Bs1h/
JrjDXFHGGZSprL6tmNN22tA1jjm3FHoZuL+Mu/ROL2DtRXXcsXe7HIyE3irz
5aiMdWlj3Lj+MngV3Q4soo5sDf8i/BD4H8NvBb8u/b0j/92mjjXOXWnNgx6I
rCOK0H+6OdNcBS6p4z71xa9Ad6xjjee4tI69jr2W/uvaDqnTVZnXOkF/rY6a
Zm3rCt7TN0AXfcecDD24iPp2ch1+PD791Jg0V3yrjli9rwzf6+cc/IzUdyxj
+7ZCL3V3zDnXuLZ/xs72ddTwmVmbG5kTpuV/pqS/6hPe4xllxOpcdHyuCp80
t3dLX72xjNxpDj2+jrxpPpI3t34v41cf0BduL8PXlH9uHTnV83RuRq7Vvt5F
72b4ljnkf1XoaW4xfowl799c+SJzt6PbnkXU0dty3jN4lpPLmHPNC1VAegH4
cxVnWptx41mdfx6cVMbev1bxD2Vbb4wn69Fa8FLG1pOZP40xa+dl8L2KqKHW
wxfgnwcb1BGD1jJlKGti2tecaA46Eb5HEfr9Bf5ZMAf61+CZrMvKnm1Mwk8t
w7cXw/8u67K1dSb8Y/Aj4XeBvxr+oazze8Pf04icYa4wt5hjzBnmO3PfxXX4
/3eh92D+Uebb1BE/xpsxZWzZt6zO+tSuDn/VFtYA7+uDzPfWg4+gO7SiV7Cm
WdtmZw7X5/X996rINeac99Pu3p//aJt+a+9oT2Nvoy8qz3jSJ0enfbwDe5Xf
gCXQv21En2NcmivaNaPnHKG/gCeZW12FjW9g7Y2NsH2bVvQ+9kD3VJFvtdfP
G9E7PZX3Y3w8XUUPYy8zpI5+cDljLzH3MniwChnKUj995bwycvGz8JuwvlMr
7lP7blmHj+oL+sTRrO3cCvtaszvX0ZPbC7/ZiF59W/B6I3KSuWkw87ubC7UB
sobB72xvD7+0CrtbO3fM+m1Paf+gzJ+mz9trLWxELFyY9vcNsEMdOqiLvHnl
yrSvPqKvbGz+Q14n0D7zrrnZMefMQfbW7zQiN9nrGlvGh32abxLfIq804q2i
jZ7N+Ns0c6vn9U1jjr0o66/n/2odOfbd7E8nl6Gzuqqz+XRy9jU75lp7QnvD
ntC9rEOc+ZpGxM+yKmQq23/6b22qbbXnkip6LHste17fUsek/ecxP7+KO/Vu
tY91wpxprjRnftbPsb436xc1Pq+zdzSiZlu738h+YDn4dxU5Qv8wp5mn7s78
o4/Zu/uG8i1lH76v+TflKX9BFT7q28B40nd71/F28g3lu0kdXOsedTkfWQPQ
r2T+lSrs5HvIN6hvUXtQe1H3+xabnvnONa7tlvdhDexufqnD9/RBe+kR4IpG
vJl8O1lv7IXMoeZSa6S10jecb7kh8DvBXquO6HNs2s878+6OL8Om67J3MUbn
Zv9p7jXGjfW1WQv+lGucszc8n3/0yX7PWmXv7dtw22b04POz5lhr7OXWy3xo
zrJ++IYyZ5urH6mid7AXskZbq3+R8WvM2bs/zprrGpHfV+bbzNxlzjZ3DzVe
wH1V+NvvwYoqzuhZb8p4smeyd7LGWmuth/ab1jVzurncd4w1Qd/WXivSfvqs
vqp/nJBytd0/qshh5jJ9QF/QJtrAs2urL4JGM3KAueDW9Af9297A/GotMyba
tcJG6lSm7Z7L+5mT+df3hv21Pam96dtV+L4xYL/rP8wpG+e//8jYLczdDFZV
URMfTL+dmrl+1yLmzfkzMr8Yr8aIb87Z2Yf53rjfmpH6ahff2L6vezXjja9N
ljaiRmqr8enPvhF8K0zK/D6/Eb7lP/23Oq6BXr8Ve+XV/dG8/+vBH6p4K9iL
79KMN4N+pG+4xrWrUp5nOrQMn1dndfUu7Z+svdbgj9NnzFXWAH3Jf/gva9pR
Zdy58W4MuX9F5j/543L9TVkf/f/K1Meaa+1dlv5kz7FeK3z+4TyXe/q3ole1
P7XXVufh4Ik8iz3HgHwv2Iso057msfzXmrxfbbYBsj4Fg25WNA==
                  "]], 
                 Polygon[CompressedData["
1:eJwtlnt0z3UYx7+b736/r7a5hI3ZzFxHc2kImxpjSgm5lVsdrHLpdKEOjQ4h
xip000W6OiecyMSY2zSGSjKJcsglnMitaHLt9e7z/PE6e+95ns/n+7k8z/P5
pYx4pu/TkZ7n5UMUHAp73hcRnhcT8rzD6N/gBmzDFo/tJvoWVEOvwrYWiuAk
ttzA80bC45DGpJnENINL+FOxNYPmcJzYcmxJ+H5Hn4A07HdAY2xn8LVA14dk
aIDtJLYUdL7vebMg1eaNwfYX4y9CdWzF2P5GX4Kd6B2wGWqE3Nyn0XUYkwB1
oQO2Jqx1GPpReAxi4QBxyfiqoKvCeeY7BxegzM5C57MEHYsey5qegoPYFmMb
iR4H4+ERxj8M9xCXybcGoV/H/hp0R1fD9i76dnQjdGOoBC2Ib2h7r4UvHmrD
Hr7xI1TG9xG+cnQ09n3on+EXW/vLzDkVTuE/gq1+yJ3lCZ0H8TUDN29TbBex
XYEKaB24uRehyxi7HXZAK+wtoQm+CxanuzyI/hX2QGLI5UYh+gi+o3AMBrOO
QfCT5VcuejpMg0Z2L7r/EvxvokPYtqC/gR9gF4SxvY9vtzSxId0jtl3YAvRd
6Lo6S/5fAG2x3aa9BO58dKf17ExPoc/BWcurwZDE2ESoBW2Jqa67Cdy9RGJL
wzaR9U6AKb47R+Xnk/AEtNf5EjfKzug8/gbohrpXGAOjLeeaEjcW3QPug/sh
zr6rfSSg+2MbAAPtjnTmmqeJ/rc8PYztEOy3vaneLqNvwHWrDx8qQR1830e4
c3vFd3WmGngb/Q70RD8ArYmL4fu90ImBy50UbEnoetCb2F6wmnvIx9cTna37
YExL4rqiu8E87HNhke/28/99WM4qn0ZhHw3tsF/V/WvvOkf43Hdn2QFdhF4L
VfEvV44zdj8cgDttrZ2Iu1s1BiOIHQ7f4v+M+GhiJmOfpBh9g/iX0AuIiY10
Y5agl/ruHmpgqwnx0I74jpCKbqX92b1pj2HZ8H3AuIWQZXmiuu2M7gKB/Kzh
U/jEcncgsQNgmO9qTLWsutgL+6ynqP+qN+TAvVCdedOxZaA7QqZ9X+fdO3B3
pbPQfvqg89Q/0cnQA3JCLsfjbE9D0EMhC90J2zy+OTfC9Sad8wr0GlgNK1nT
Q6y1D1TCNwfbBmz9+b8fbLaajQq5/apGC7Gtgq/BtzHr0MWwXvNZ39Oe+qL7
Be6v9tlGOcK8H6snWk8vZcxWvUNhdx+qH/Xq4bpveE7vh70549DjA3efutdc
82Xgm67cRHeFLtA55O5Od7jYd2+BarQK9i/57lJYZjm3Cn8hbIAc4mYRVwBz
4FXVsJ1zfuB8XXWH2GYHrne9p3ODjXY+eq/WoY/BcdvjdditnIC99kbqLStB
11Rto/+Butb3/kVPYj2TfVe30XwvgMpWE3/iPwNnYYvNoT6Vgj9L+7caO43/
j7CLL7H38rKNqRVyPU+9L8F6SAW+K2H3fb0vPvNEwVHrFVpTHsz0XR/Uu1GA
nuO7HFavmG81U9nWHGE9Vv3gFmNuan/QHFu68hvaWK+QTbmxHr1VZ2fv/lDm
HAJjfPcG6XeJ8nM++g14y96Wm/aO10Z7zBkRuLe91Obbbj7doe56hnomzISV
vushz6I3ojf5rrd+Z783dtr5KA/1O2gZ/nVQDC9gS9fdhFwuKae6WZ5o7lL+
3+q7PtVOtaC+ad/S74cMdHvdGUyw+s00PRFe1JrCrj5VdwWsZRP6K1gRdnm9
3GpaZ1lh7/416795lsfd0dtYRxmssT4fia0IvRamEjcFpkG21dGDvvue6lv9
V334efsNdN5+Q8ZZDWpMNroE3xZ7Sxbi/xBm27euYbtqNVFuvy3+A3hTPbg=

                  "]]}]}, {
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1:eJxFlntsFlUQxdft9232UzQChghBhURQE1CjGERjJGpEhBYsloI8LLUt5dXS
QouF0kJ5U4UGQQOCj4AGMRAFIhqQgAHFNgKKgKCUaArhoVZBQKtYfycziX/c
zNlz587Ozp3Hds0tziwKgyA4wkpjFURBsA7i7zgI2ieDYCZcCnkyEQQT4LfD
56NTAf8P3Bjwcvhj8NtD09+J3MVzOTKL/WvdTkdkBc/fwd+RCoKR4IXgr9Dt
xPMBcBncDeAt4IngNuDN4Ang4ay54EPoX2WtB4+FawW/By4E3887lvCu25Ab
4CrBHyKf87MN6KawuRE8Hu5dnnPBGeDXwOngp8DzWEkCMgbdnthajJ3eyPnw
deCHwPnsxegshJvFaubsYLju7kMvnYO/Hp1h8MNZf6JTA9eInIfOCORknj9F
tmV/Krge3BHchvNfgruAt+JbCXgI+2ORBaz1sd1LIXYOI3fDTQPvQO5nzQI3
hLaE9yC3+h3pri5xpgx8TdLuYhHcD9jM5n2t4LlweeCUf+Mw1hz4b2KLTwJ+
NPsjWH/B98DOM/ATwTti81/xj5B/wF1kDZAue5s8/ivBGeD+4C/wJw/9emRx
ZN9xo2LM+hhcBBeBt4EnRUpMyw35fx/4RGg5dtHzQbkRei4pf0pZe8G/sX83
/EFwO/SrlYeY6wb+kb0l8KPhRrEWgxvhXgC/Dj7v+0Xo1yJfYU0Hv4rMRWcF
8jg6eeDV4J/BTayl4OfhzsXmv75F31TD2V3IJ/HnVGh5e4HvnwrfguwLfx6+
SvmYsvtTXbRFbzY6AbJXyvJpRmTvlZ9nec9KZHlgftTCLwP3Rb9FdxvYfehe
LimvsFEa2nsrkCN1P+Bq5MvYmuy5t9Tz8FnwJvAYr51GfC1F/xdkJVwJ+B3d
N3tDkWvQvZIwf3Iii51iWBNabFchz6DTDzwQvMLxAMUYnKXvRj8bucrrVDmz
ETwKnA4+g5yPzufIHPdftnrzbf96Pr8f27cNjMw32XsT7kXlNvqdiE+UZvWu
/H40aXFbxP4C7wk52PuJcy/Bt0mzs9/y3A3+qsdWMZ4dmZ2enmO/wg3yHqB8
uxxa3AqRG/BhdGgxzA+txsV/Aj/C++T34A5Jy5kuyKaExXBQZO/SPaZj/6Tn
lfpsq/s5BPmA+zcH3ems4+A+cJmR2TmdsHtWnCchj3hvOYUcHFnP2Rabvmp8
S2z9Su+SXwfRK9B7kWs8lzQbVNe6x+Xon0iY/X2J//MvU34lbKaMw16fpPVY
9ZNa75/j0dmHbnVg80m1rHu+Ff5pz7E3sN/gPUQ9vMTr/RZ0pnhf7Qo+6vHX
9z/BcxOykv3+4HNea/3AZ9UrwXelrJ9qNml+HQM/6HWp+70Q2qw8hLwHfprn
w73gR9ym7GguaEY87u9UroZpdheyeWfKepB8U18q9rnQHr6d9zfV+FvIyYHV
TA+fm+XqdUnrReqNmimawzexv8xzSzWi2b0W3OJ5NQX9ZmK22vuw7uU0uC60
OlVsdacHEjZDdafqT0ddRz3tsPc39cwsrzXlWIG/a29sMVF8bmf/SmzzV3ed
6zNUs1X3pRnVzP7DHn/l+YLQckO9+Gv2ZiKzvT9rZu2Huy5lM0X9cJbX2mNw
GT6bNHPXolflZ8s9hjNCy0PVbGfOHoitfw3VnPXZp9qvch/kSwfv1coZ1YXy
WXn9tvums519vuhe1nmfVF1cju2/RP8qdd671It+9/8Z9Xzlqub+zdj4KLa+
rH6r+aI58xncTlZZaLW5x3GW/yNpRtfH9m+mebQ7tv8Q9apxKZvj6rv74D/w
/x/1EM1u/eNthvsPpExV2g==
                  "]], 
                 Polygon[CompressedData["
1:eJw1mHkcVVURxy+X9x73AuKe+0amEAaomYaK7ZlaAmkalpLIWoCpKZi5lZgL
KEtuuWeaS6EpBqZkWqIllLixmLLFIqKiLIIofb+fmf74fd7MOeeeM+ecmd/M
efucPqrfyLIoip5tiqLB7+7NotgNHFsXxft0LKDxh7QPRL6nKooRraI4H30q
eosxq2m7E/kOsAr5bcavBs8jzwJvgr/Q91O+acu8D6IPRx8GpiCvADchn0n/
m41Ye1dwTB02KP+cvnfLaHuLMavAv/ju3+Al5BfBQ8h/BL+rws57wRC+mU/f
PHA/+gPgb+B812fOV2nfjzlfRn8FdEFux3oX0PcC+ifrgPIc8Kk6bFwJlqft
x9G2hr73wDfrsOky5LOKsPUb2a/9RyN3Zv7L6ZuFvhf6YNC+bVFcRVuPZtg6
HPl7Zdj8X/Sh6Gejz0BfB9aCBmObYH22KbfAgeBqxm9h/EmeF303I59L2wfM
tRD9DfAx8pZGrNkdDEpbltC3GCx1bfCB58b3F/P91s1Y+7a8T204nW9a2N8O
DEQ+lLYri2iz70PWGI0+k2/+zrcn2oa8GXxHH6PtvdyT+9CftFlbNzbChhsY
e30Zts2mbRDznYB+C/oycGMZYxy7kP4f0X8m+rgq7sC7OBV9IvrvwRll+LP+
MDTPvwMYjjyX8YMZfzL9d9G/NW3TkR8D2yIfwP6upb8N409B/w9jXssz9Wxf
B1cydgxjPmKuXRnzfBn3vVsdcaF/jAWz8zu/cax30pX5rygMFnygDii73mnI
zzFmIE2n8f0kvtvciLUuRP8N+k51xNuTYBfkDsx3If1Po++I/nTe363gr8h3
gLuNbXAn8rBWzHc/+gb0p8B1ZcR82Ywz8Wy+C36LPC3jbDq/j4EnjfcqYsRY
MRY9a8/83oxL5UHgPuQnwONgOWNXJEax1jll9L1jzKb/dWpGnMsdcsjDyGsY
fw59Z6E/ir4p9VvQ16A/AiS4UWAq8vHsb2QR38tFfwKDy9iDe/l0M+7Ac/8+
WMR8I4rY7+25N23TxpXJBcr6p5ywP9/+0ljzjOpY07XPlsMaYaNtytru+iPK
8Nk+2DagFbGqT+vbDydfanO/VvicvqBP9K8jJj2b2Yzpiv5OI9ZyTe+jZzO4
RR/X1+fQ/wL4QxX8uw/9Y+lfyvivyHfJT2+hfxF9b/RL0d9AP7yOOZ17ZJ7X
lLyPIUXMfQU2TiwinoYwfg++/4WxwJhD0HdB/xn6AvSD6jgH7Z2APjd9aHrm
EffyRJ63/PfnKmzQloXgCOS9mG88369G/1odPjUo+fd1vn+tETnsnswN3ZKf
VjHmC3XM4VyLQG/kPem/zG/RP1vHnd+WvKIvKJ+U92Wb6w1N/9G3tUFbPL+v
1hFTxpYcKBcaM/qSPrUY/e4q2pSXgB1Y/5IicpK5SY6Va41pY9s7cW7X+DLy
dulvr6J3ryNHmmvMOeamYaBj28gJ5gbP3LN/DRycfGCMG9vm5760baBvPTge
+Vr6Lka+BEyoIvf+mLkuKCMHzzLXg5uQf5051ni3ZjD33pp8Iace04rzN8aM
rVPrqBW8KzlRbnw2+ftE9JvRrzdmkfvI8chHM8cZRbTZp4/pa/q3+atL8qf3
2asOTrdfn7yqFRzpnXgXcmed/vgI45t1cMxW4O3kHs/MGBqaZ+kezT3mIPc+
P+sj7buOvg3o60FHxm4FZtL2DHgO/KOKMY7V/slVcLrxbE4Z24pzkXtsH1BH
jbBnHXFq7WBON2/2zFzf2T6wE/LOWRPoM/rKzvoL8iTmXsJ6J+f5yFFyk/yx
BRsepG8K+Bj5CPomFJHPf0D/5sz/5oNNVdQ41jrG0CXYe3kr7O7Fd4eDDvQ/
WkZ92D5tNdfLQdo8IPc2Nr91b8+UwUHusX/mO++wS+7JvX29jvqpR/qvd7Y9
7Z9D71tGzBq7coRcMVTO4h66ZX1nTG3bjBgxVqz3PpPxLkfJTc51KOhXxpzq
frONPlvHXEL5gDq+P7COWNKmHtnm3K7ZLW02Hq1hd879KFtPds7ve9ZR91p7
7531pjVox2bEqPPLodr5rYzPa9APy2/sc4xzyVkHJ++6N2NgUfLlYXXc3zrk
tckPxyZnKNvmfX9YRQwYCxXt7ergpR2b4QP6gjXCoFbc8dSsD6wnS/0ZtJW7
6qh5rH3MKeaWyRnPxvDMRox7KPdr7e3ad6FfVIQN1mz/5x1ruXbpX96nNtkn
N8lJjtGH9eWfoK9NzpanrQXHg41V1LRb57065n3wURXfOua85Ge/beY+qmZw
hTFtPWiONtYbuVdtd0yPzLf6/Al11GDWYubQczivfnnO366jX77tAw7Rl5vB
uXKvnH5RK+Lf87OG3KOOMd69PtA353Ata2rnFsqbyni/eWeek7lkf7B73ol3
sS/4Ffs9row3h28P+cm2ecltNyRfyXHm0RuraFuQudX13Uv33LtvpDnp76Nb
8SaQS+SUI3NN1zaPfamOO/AuumZcWbNZu1mf+i64Bowu4068mwVV1ArWDKe0
Ioc02gYfmVvMoeZSOVfutSafxPiJZdTqi7Oecz7HLM2869hnk6vtc005e0P6
uxyo33TKeuuBjJWXwItV+JC+1KYZvqcPFnXM4VxjwD+r2JN7swb3zdPK9+Z9
ZbzltOHSMuo9bXsV/RWwLvOK8rj0b9uKrBeMCbl3Hv2Ty6iB12SNaY1lbWXf
tKyHrTmtPX1n6cv6tG+dtllvaJ+1we1Zr5jDzeUzkl+tyayFzdHmanOiudE9
jsn1+7fifLT3ajCnijPSdtvs8068G+/UuzWGjCXf3fvKhVW8lawPfFv7Tlhm
XFfxTvW9YJuy70PfHP6XcG4Zb5HO6Y9yqtzqGGt1a/YV+d+Btas1rG8L78y7
MyfKY72TP81HXZMDjeVpZXDjdubRMt5YvrV8s3qmnuU2dejnFfEfiW9b2x4v
o21j7sW7Hl/GnrbkO7Cug1s/D+YnH5i3tUnb5Ex5p1Mdb1PvT27qld841vx5
VO6ha9Zdn/COiZdxzHdQM94snofv55VVvBF3cO1m7OflKu7O+9L3jqyjZnbO
o3LsjMzH7bNuWoa+HLyLfEYdHGDs984axjzvW8P62BrWWtYafr9m/KdkPtGf
5XpzgLnAOZ1bDpubfOpdOMdbmV+ce27ygz41P/fj2/cpsH0dNb92exbyhedt
7pIj5Ir/AcwjjBs=
                  "]], 
                 Polygon[CompressedData["
1:eJwtlnm4TVUYxrdzzzntbShDESoUGh6pDCHK0IDomsfci2vOeBXJWChToQyl
UoQeDZSh0axkzFDmDMU1pLjhMU/93uf7/vg95z3vWnvttdf6vm+tEhm9G/eK
BUEwGhIwKBkEBzCeh9aQPwqCIXh/o6uiq8HjkfXbj1cOXR4qQGX4E+8g7IZX
6NMarxUMR1/SuOiyvOhBqARhShB0wssLt0A+WEa/3vQ/Hw+Cc5CDfgvxctPW
C/87dBJ9E4TwAt48vAthEFyES1AAfzXeKljq4yUZJwG307Ze46EboE+hX6W9
IboRPA1PwWC8I7Q9g+4GXfUuyMOcx9JWC10TnoRsH+MB9P3QD70Frwz6TtiE
3gg/QyZt15njNeiC/gzvBjrSekBJ+v+OVwB9L7o03Ad7fE1zoiP/7vl4udDt
tR7MKwlxeD1pY8+l/TRjn4GzUId+tX1PT9BWF13c1+NFvBLou+FRqAgjNFfa
KqG3sRdbYTe0x5vPeE1o74PuCQqkxXht8Sagd6B3wi7BMzvhCPTTOuCNTtr+
ZzB2B+io78Yfqdij7Qx9z0I79MSYjaOYuAB70e/gTYKpkEGfDXjrYaOP0Qpv
HXptaG0j8Fri/eZa7Xrfdo8XxV0fvFvRt0Eu1j8nFE5YrOf3+PwRvQSWe/8e
sNg9td1Mn/w8sxV9B7okuhQ0pV9f7SEMgAm89zm8NPRE9Nv6JujvsVOEZ4tG
NkYLvKF4o+AN2BZaXK1B96XtLnSxyGK7EBSGDb6neSLLne7oRT6/66zhNejm
uaN4KpaweC+ILocun7B40Dgv0a8g/wslrFAo7pRnedH5YHNo89L8xkIa/f/D
O4Y+Dr/4PPW96ehO0BHm0adzZDVA8RARD12UL8xtI9TRM/R7n35LoDu6Ed5S
9LLQfnvgNcY7Sv9j8ANeV7wD6JNwKm5rn+nx+Q18CwthASzyMTTuKvQUj6fV
6J9gC89vhuno5rQ9q9rH/30wV/PHa4jXADLQn+Idpi0rbvs2BG8m3icwC8b4
dyren2DtqkM2/qnQ1myN14iuXhuUt+cU+3AI/oJ0z7EsdLZ/46/KKdVY1a3Q
2tp67hxFp/CeGPT0GnoCb5/m4/t1AH1Q71fO4K2D2dBZ9R/vPfQ0+FB7h/cP
3geu/0WfDC1flbeX41Z7VOM2oNfDJHQ9vLVxyxnFYow1iEMC/vD5t0navPbD
HtgdWr5rX9onbR+aoptBC6iHt1X7pP3x9VZ+HFf8hTZ3zbOD5/6b6HEw3OuB
9vwj9HSY7O9oBv3Rg2Cg1yt5ql3L0StgpZ7zmNAcPkbP0LtCi9e6eKlaL/Rk
//baeFPQUyE1aXV0NnpOaHGjMydL60J8pKRYLmqdZ+LNUB74d9SHNuhhOne8
fujM2eznzCavH1dZ6ytx29NZyruknaHfo1fCCo8Dnc8X0efhAqTy7A6e2x63
PFHeHUR/FVrdT/VY/xr9JXwR2pzSPKd1blxDX4Yr2qvI4nNTaLVijO+zYqIt
uh3U9/UZj/eWny2ZXifLJOz+oHlVRleBoYpBvDNwOmZnmc7BBOs2iraq9KmW
sHNd53NpdAWoCOl4adDO++u8bII+R7/XknY/0T1FOfg53gJ9a8zOadVR3UcC
+ueILIZ1Zt8DpWA7bS/r7Inb/k8LrVaoZtT1evau8im0NsXsYLw5qh1eK0b6
uat1a676H1ntVQ0unrD7mM7xoX6O605WHWrAZd9r5e0V9FWvF+M97hX/Opsr
+51iIG1V0I9BS7/fjMOrwXtq+tmlM6yW35WGaX0iu9vorNI5Vxb9sH/7ALwi
9C8KD/ldRuuh9kf8LrMTbxfs9ffre2+gm6iWx+y+obkcRh+C3H7n+h9d9m75

                  "]]}]}, {
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1:eJw1lntoV2UYxw8efifOocyKLAvMlVJmmVFWgqhtTEMrUqEsKq2gItPUWopT
a7VScVvt3uamu7iL7qKb7ua2avMyL+UMuhJFUBRFdCMqKqrPl+fpj5fv93zP
877nfd/ndtIefWbJ6jFBEHzICBllURBMh7weB0E/2IfWB27k+QIwIxUEr2FT
jr4QXsg4CN8JHkfvxWZaEgQnwX70EfAoegd4Pfo78BPwOfCrwJ3YnB/aXNk3
s04V37oNbQW8ARxEHwXfZnTBB8E87MeCa7FdxbgZXoF2ha+ZDm5lfhs8B8zB
5na0Kmxegk+GL0Wv5jkT3oh2CP4C/Af4ej9vAdrn8Cz4JuxLea5mzWXww4wj
8DNoX2OTjc1B+Er4TfA3tB58nvYEnwk2YD8bXM7c3fAS9Pvh09C2YZsG1qNf
A5bz7gawEL0F7EHfHtra2sMMcDc2C8C9se1tKrwU3gN2M6Ymto6+9Qjf2YF2
AP4EuA/9cfBj7Ff43u4DJzCnNTSfLmZUBOaL7bHdbyHzJmPTDK9E38xowaYT
/TG0WvhD4IDiBByLbQFzp4R2XvlOPn8WbS5Yh/2Tijn0y8DN6BsY4/z+pU+A
Z6OVxHaP8vXdoZ1L/qvheZHilffr2E8TegNaXejxCV7q96ZvfITdWnA/Nu/B
n4a3whsju4MetG74Vvi78NPwIeZ2sfZb8Cr0KLF4Vdx2gqc8tueiV3ruVINv
uv149FsTy6sRtAz4aa0PP8bohE9PbH3NuwR+Fn4Wfgc8y+8kH61W+2D9/WBP
ZHHxN+/7Ijuv8rLI80JxeFFi+XMispifrzjg/aivfwvvrw0tfl5FH/a8Gw/m
uu+KsS1g3TL4edg/4LFxD9jLu3z0f7HdxZil2EA7B7tC+GF4Ai9SXYBfDB+C
n4wsn5XX3Z6zeeA/sT0rjmdguyhlNUc5+wHv1qC3R2ajueXoo+grec5K2Z3L
5ynmzvN7lo+0/3bsc8Hr0AfcF3/Etjfts9ZjqUV57PvUvR3leWlocfW+6g68
Dd4cWbwf19n9bptj86nq3iTWuJBRqxrmvpOv09DavU52KU6Zs0T5H5lfVPMW
JHYHqqs3wq9kNMGHeH81vA1+BD7Fc3Y4slzYw5pP8Z3L3Ua68n0f+nr0Lj/L
nsjifBv8L9XAlMV5Ezjo+Rt6HKrW9aPvhS9HPyU/+x3KPttz7WXdF+82ej38
Hv48vMPv6mH5Pba41XfPwL9wmwNof8KLPU4Whrbnu8DvvA7LRrVFcTjG41A9
qyK2/F2muhCbH++UT+FNqrOqE/DPPN/luya370X71ONHdWCW17E54Fd+FtW3
Ou9Nim3li+p2OdqvsdVD+eVL9Q8/b5nX8Eq0nxg1HgPfeAyr/oxLTC/hHN96
XcpOWbx0s4eJ2nfK6km+aq3X7XpsJ3oMKQa6GDnwX7yXvQj/Wd9hTmNg/asu
srsciC2O1FOOheZT+WUktn5Ur5oMnpuYL/I9x5Wbv8W2B/WQT/7PA+yfA+8N
rRfortPV772+qU+pv6xindXMmRRaH9GzdOXszMTqjmpCesr6+zps27xPqIe2
e91T3+nzmvN7bDWmA70AfDC0+q8Y3eX9sSO2/xDdYY3H9iF4acrmaK5qvfym
+rBFvvHerX+GNd6bi+DDnqfKnQ0pi0/VolzlfWD/EHnK8cD8qH8F9Z0Mv3/F
ZCtr7PB70Jrz9W8RWG3f4nuQL9Ndz9S5sV/s9UG9Rv9WsxPT1AfVD/P836bY
40Ex8CNapvtC/yqveA0s8X859dZN/n+ksyjn/gOhXGsI
                  "]], 
                 Polygon[CompressedData["
1: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
rMWa7PH/q+6KOg==
                  "]], 
                 Polygon[CompressedData["
1:eJxNlnlUVVUUh2++7qv7GtQGp5YDDg2r0lxq6dIU5xzKxFXS5FSrNAVBBVSE
JNQ0UWQQU0AgFRAZFEhGE3BgEJVW89xqnud5/nZ7/9Ef31q/9zvn3HvuPnvv
84IWLQ8J7+Q4zmZwwR9wnN0+x9kD2XDc7zip0A8d7jnOcoiAOvHxfkX/Br/D
Gh6wGkoZi2DsE7zd6BHoMTAawvAO40Wh30G/C+9BK14j3jDePxxGwM/4P8Ev
sI2xauaMwR8NY6EFrw3vCET79Dnvwwcyn32k+XRfOehcGGdr2pl/lN9VcAle
IKDfI/MvRX/Bms9tn/LcL9GX4+9CH8PbyboMGIpXjXcar5DfB+EyvAy8er+u
6QyTYCKcxWtnbDL6H/umGrwU1qXCORufwHgNv2vhG+bF4cVDAjzn11g1obvB
1QLzn8Ebhr4FhkIq627F70B3MFbHs+qhE94F4LPvkX1uwt8I6RInvG9Zuwdd
iP4RXSJn6mqcY2wvcRaXRrwC9CmJg83fhzcbfRfMggq872C97f979A+exuMM
XjB7GR/Q7/4DfzNeFWN/ov+CFnSDxB6etxw5gVeCvgbdG/rAAOgf0D3J3gei
s9Dj0dNhGpTxvAY4bvsMwWvyNDfa0K3QbHnl4l0Y0JrIknfjbSAOiRZHOeft
6MOsn4LeK7mILoe/IclyVs7aYX6xp3uQvdwJz/o1ZyR3yl2NheTJSLgNmhmv
xxuFLkEvQ7/AM16El+AcFOEdgi0Ws7N47TYmcTyKdxp9CpphHl4hXgLvW+9q
jck+n3I19snyTfLb1t7Mu4/I+aIHo4cENK/y8Q7AeYGxa/EGQZOdy3XoWJ4Z
iX6V525FJ8HF+BdBrfUPqb3H8ZfAIebNwMuVfoPfF4Kg3N4vzy5G98TrFdCz
j2VNd7we0At2MGcN3mrYju6Kt1byGT0KPRZul9jj3c07Z8EO9GC8+9E56IXo
BTAX8v26diQ6i7Fs2AtPwxZIsd64FZ2GHoh+Ep0IG6TGJb42Nkhi6+m51knt
Qy3cxHdU4MWiE2U9tDBvhfQddBJjK9GrYBks9bTeh1s/vYr1Vwa0ThqtH3SD
ffKdkGm5W8jcAjgIU/+Xr6Jz0GF8fzg0+LUPdOEZXeEKOS/mzbScrUcfgwPo
OVLT6EjWrYD9VlNS85WejlXDPXj3wn1QwJxIvP7oAdDZvrEV7xH0w/CQ5WmN
5USeX/dQByc8rdn99v6Tcs/YGWbIeaEzBfQ4vMWwBJ7AC2GPs2GBq2cqeSDz
h6B3MX8h/iLYJ2cs5wqPSY3ZPRiEvl7y2858oqs5FoOeiw6F6TDN1dzsyVgy
66byewpsQ3fxaX5KroVaPHLReZZPfeUOkF7g0zt3F9wosWP9YquVmTAD5ria
c5JjBa72i//yCV1p957cf/2sjk/6NTekn8nd3h3dI6D3j9xDma7W2CDrsaVy
vlBpNT2Z8Umunp/k5gRX73jJRblz0iDd0zySfIqCpYy96WkPC0OvgpXwtqe1
lyzfbWeQYX1Gaj6PtWXSX12tZYlbFPOiPY239JAU61fSt+S/SAxzo+38HsUr
srySvncQ3YY+A/mSv57WhPTubL/2cbmv5N6abF6p7NtyKdjuD+lTRZ7285mW
m1Xoo5brodY3pN8+gH4Q5tv749lbnPR79Fqr86/hK0/verkjKyVfiMEUuMPu
cOmxUpd56D7Q26f3tNRdBKxz9T+V/G95y9N4F9udIXGusPd9iP4IPvY0VyVn
N6FvYGwnc9KtT0nvmsfYfFefI2d4Hq/D0zuozP7jvYx+xdMe/6mn//lkTPr+
Z57ev8FWe+shAV6zs5Gaeh39hqf/DzbKe2WuxWCd1Y/09Dh0PPwLc4N4Yg==

                  "]]}]}, {}, {}, {}, {}, {}, {}, {}}, {{
               GrayLevel[0], 
               Line[CompressedData["
1:eJwt0DtOAlEABdCnolBpJQVChGiF/1p+goBKR2KHibAA3YCuUK0EEVTUPWAh
NpxJTObMvXeS+WRyvdv2zUII4ZIn8nRcuOJIb8VCuOBQP5dnNDmwG7LOKft2
TVbZ0yuyTIlduygL7Oj3nn3Htt6TXa7J2FV5QlLPySybrNl/zPglwZgR0fc/
L4XQZ1EfyBeGOMKr04hYdI98451l+0NO+GTF/pLfxPUpP6yS8pIN0qzbx7JA
Mbpm96P3ssUDj///cw7HmyW6
                "]]}, {
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0LtRQkEABdCFwTrQQRsAf0QQSSQqgvxUkAKkEyXTQOoAUfwhdqHMCHWI
5w3BmXtvsm/fbnS6petYCKFCT2nKZDyEdTr6VyKEKVf6p5zwQdt+l2+80rJf
5JhL/UmOeOTCHsoB53re2bn46ptbcpMURXtNJijoC/eZ80s+Ol+OeSZr9+UD
ab3o7CMy+rE8ocS2fSrL7ET/Kc+osmvXZJ0Ge3YzuiP7+sDZQ3L6t/xhxoH9
J5fRw7nrobjT7ynrN/I2tnrPf4u2Kn8=
                "]]}, {
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0MkuQwEYhuHfKRfiFkwxq0vQxqZdVNS8QFeExLBgZe4NIMF1YIGaaij7
StRleMTiyfv9yck5yWkdX8jMN0XEKNkkYkfr+kXZHm6JSHNkD+kgAxy6+7WP
Xg7cPdrNvt2lnXSw527XNnbtVCoiYdv+8Z0G36y7b/WGZftCzzmj5N7Ujb/n
mHOPaYGifdccUWHCvtcHHpl0P+kzU3ZVX3hl2v2m79SYcX/oJ7P2inevsmgf
6wmnLLkv9Ypr1tw5zbNlj2gm+f+fvzWXL0Q=
                "]]}, {
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0MlKgmEYhuEvpDOodgnZceiiwUptUOgEGqBa1ElUi9qaWq0KklJSw6nJ
BsuOy0taXNzvww/f4p/ZOsodjoUQNpmKhNDTOy3z634fD+GNH/ervvBM3+5q
hzbfdkubfLmftEGdT7umj3y4/7w9oOuuaoUHGva5no22+0D32ePWXtB55ri2
ZzVGfvTN24tcuJO6xDIFe0VTFN1pzbBKyV7TdTa4tLOa48od93aCG/e27rDL
vX2sJ5xSt6c1Ssc9oZOR//85BKbiLg8=
                "]]}, {
               
               Line[{980, 977, 1752, 1754, 996, 1776, 1777, 1475, 1750, 1014, 
                1812, 1813, 1485, 1767, 1030, 1499, 1854, 1856, 1048, 1843, 
                1511, 1889, 1891, 1068, 1929, 1930, 1065, 1085}], 
               
               Line[{983, 1759, 1760, 978, 999, 1478, 1787, 1788, 1790, 1017, 
                1489, 1823, 1825, 1828, 1033, 1870, 1871, 1034, 1051, 1903, 
                1905, 1906, 1052, 1071, 1525, 1939, 1941, 1088}], 
               
               Line[{985, 1472, 1762, 1764, 1003, 1746, 1747, 1482, 1786, 
                1019, 1821, 1495, 1797, 1799, 1037, 1838, 1508, 1868, 1055, 
                1899, 1519, 1916, 1918, 1074, 1950, 1951, 1078, 1091}], 
               
               Line[{988, 1779, 1780, 1477, 1006, 1804, 1486, 1814, 1816, 
                1022, 1858, 1859, 1502, 1850, 1040, 1046, 1892, 1894, 1058, 
                1932, 1933, 1524, 1924, 1077, 1954, 1531, 1957, 1094}], 
               
               Line[{991, 1001, 1791, 1793, 1010, 1831, 1833, 1834, 1494, 
                1025, 1873, 1874, 1506, 1865, 1043, 1053, 1907, 1909, 1062, 
                365, 1942, 1944, 1081, 1962, 1963, 1535, 1097}], 
               
               Line[{993, 1800, 1483, 1796, 1012, 1836, 1497, 1839, 1841, 
                1027, 1876, 1509, 1879, 1881, 1045, 1878, 1521, 1912, 1064, 
                1914, 1915, 1530, 1947, 1083, 1965, 1536, 1948, 1099}], 
               
               Line[{1084, 1882, 1522, 1928, 1067, 1890, 1512, 1844, 1842, 
                1047, 1855, 1500, 1801, 1029, 1766, 1765, 1484, 1811, 1013, 
                1749, 1748, 1474, 1775, 995, 1753, 1469, 1751, 979}], 
               
               Line[{1086, 1072, 1927, 1925, 1069, 1887, 1886, 1515, 1901, 
                1049, 1852, 1851, 1503, 1031, 1826, 1491, 1810, 1808, 1015, 
                1000, 1774, 1773, 1771, 997, 1756, 1755, 1470, 981}], 
               
               Line[{1090, 1938, 1528, 1949, 1073, 1917, 1520, 1900, 1898, 
                1054, 1867, 1866, 1507, 1036, 1798, 1496, 1822, 1820, 1018, 
                1785, 1784, 1481, 1745, 1002, 1763, 1473, 1761, 984}], 
               
               Line[{1092, 1532, 1955, 1952, 1075, 1922, 1920, 1919, 1066, 
                1056, 1514, 1885, 1883, 1038, 1848, 1846, 1845, 1028, 1020, 
                1488, 1807, 1805, 1802, 1004, 1769, 1768, 994, 986}], 
               
               Line[{1095, 1959, 1958, 1089, 1079, 1527, 1937, 1936, 1934, 
                1060, 1518, 1897, 1895, 1041, 1863, 1861, 1860, 1035, 1023, 
                1818, 1817, 1492, 1829, 1008, 1480, 1783, 1781, 989}], 
               
               Line[{1098, 1537, 1966, 1964, 1082, 1946, 1945, 1529, 1913, 
                1063, 1911, 1910, 1059, 1044, 1880, 1510, 1877, 1875, 1026, 
                1840, 1498, 1837, 1835, 1011, 1795, 1794, 1007, 992}], 
               
               Line[{1103, 1100, 1974, 1976, 1119, 1998, 1999, 1544, 1972, 
                1137, 2034, 2035, 1554, 1989, 1153, 1568, 2076, 2078, 1171, 
                2065, 1580, 2111, 2113, 1191, 2151, 2152, 1188, 1208}], 
               
               Line[{1106, 1981, 1982, 1101, 1122, 1547, 2009, 2010, 2012, 
                1140, 1558, 2045, 2047, 2050, 1156, 2092, 2093, 1157, 1174, 
                2125, 2127, 2128, 1175, 1194, 1594, 2161, 2163, 1211}], 
               
               Line[{1108, 1541, 1984, 1986, 1126, 1968, 1969, 1551, 2008, 
                1142, 2043, 1564, 2019, 2021, 1160, 2060, 1577, 2090, 1178, 
                2121, 1588, 2138, 2140, 1197, 2172, 2173, 1201, 1214}], 
               
               Line[{1111, 2001, 2002, 1546, 1129, 2026, 1555, 2036, 2038, 
                1145, 2080, 2081, 1571, 2072, 1163, 1169, 2114, 2116, 1181, 
                2154, 2155, 1593, 2146, 1200, 2176, 1600, 2179, 1217}], 
               
               Line[{1114, 1124, 2013, 2015, 1133, 2053, 2055, 2056, 1563, 
                1148, 2095, 2096, 1575, 2087, 1166, 1176, 2129, 2131, 1185, 
                560, 2164, 2166, 1204, 2184, 2185, 1604, 1220}], 
               
               Line[{1116, 2022, 1552, 2018, 1135, 2058, 1566, 2061, 2063, 
                1150, 2098, 1578, 2101, 2103, 1168, 2100, 1590, 2134, 1187, 
                2136, 2137, 1599, 2169, 1206, 2187, 1605, 2170, 1222}], 
               
               Line[{1207, 2104, 1591, 2150, 1190, 2112, 1581, 2066, 2064, 
                1170, 2077, 1569, 2023, 1152, 1988, 1987, 1553, 2033, 1136, 
                1971, 1970, 1543, 1997, 1118, 1975, 1538, 1973, 1102}], 
               
               Line[{1209, 1195, 2149, 2147, 1192, 2109, 2108, 1584, 2123, 
                1172, 2074, 2073, 1572, 1154, 2048, 1560, 2032, 2030, 1138, 
                1123, 1996, 1995, 1993, 1120, 1978, 1977, 1539, 1104}], 
               
               Line[{1213, 2160, 1597, 2171, 1196, 2139, 1589, 2122, 2120, 
                1177, 2089, 2088, 1576, 1159, 2020, 1565, 2044, 2042, 1141, 
                2007, 2006, 1550, 1967, 1125, 1985, 1542, 1983, 1107}], 
               
               Line[{1215, 1601, 2177, 2174, 1198, 2144, 2142, 2141, 1189, 
                1179, 1583, 2107, 2105, 1161, 2070, 2068, 2067, 1151, 1143, 
                1557, 2029, 2027, 2024, 1127, 1991, 1990, 1117, 1109}], 
               
               Line[{1218, 2181, 2180, 1212, 1202, 1596, 2159, 2158, 2156, 
                1183, 1587, 2119, 2117, 1164, 2085, 2083, 2082, 1158, 1146, 
                2040, 2039, 1561, 2051, 1131, 1549, 2005, 2003, 1112}], 
               
               Line[{1221, 1606, 2188, 2186, 1205, 2168, 2167, 1598, 2135, 
                1186, 2133, 2132, 1182, 1167, 2102, 1579, 2099, 2097, 1149, 
                2062, 1567, 2059, 2057, 1134, 2017, 2016, 1130, 1115}], 
               
               Line[{1226, 1223, 2196, 2198, 1242, 2220, 2221, 1613, 2194, 
                1260, 2256, 2257, 1623, 2211, 1276, 1637, 2298, 2300, 1294, 
                2287, 1649, 2333, 2335, 1314, 2373, 2374, 1311, 1331}], 
               
               Line[{1229, 2203, 2204, 1224, 1245, 1616, 2231, 2232, 2234, 
                1263, 1627, 2267, 2269, 2272, 1279, 2314, 2315, 1280, 1297, 
                2347, 2349, 2350, 1298, 1317, 1663, 2383, 2385, 1334}], 
               
               Line[{1231, 1610, 2206, 2208, 1249, 2190, 2191, 1620, 2230, 
                1265, 2265, 1633, 2241, 2243, 1283, 2282, 1646, 2312, 1301, 
                2343, 1657, 2360, 2362, 1320, 2394, 2395, 1324, 1337}], 
               
               Line[{1234, 2223, 2224, 1615, 1252, 2248, 1624, 2258, 2260, 
                1268, 2302, 2303, 1640, 2294, 1286, 1292, 2336, 2338, 1304, 
                2376, 2377, 1662, 2368, 1323, 2398, 1669, 2401, 1340}], 
               Line[{1237, 1247, 2235, 2237, 1256, 2275, 2277, 2278, 1632, 
                1271, 2317, 2318, 1644, 2309, 1289, 1299, 2351, 2353, 1308, 
                755, 2386, 2388, 1327, 2406, 2407, 1673, 1343}], 
               
               Line[{1239, 2244, 1621, 2240, 1258, 2280, 1635, 2283, 2285, 
                1273, 2320, 1647, 2323, 2325, 1291, 2322, 1659, 2356, 1310, 
                2358, 2359, 1668, 2391, 1329, 2409, 1674, 2392, 1345}], 
               
               Line[{1330, 2326, 1660, 2372, 1313, 2334, 1650, 2288, 2286, 
                1293, 2299, 1638, 2245, 1275, 2210, 2209, 1622, 2255, 1259, 
                2193, 2192, 1612, 2219, 1241, 2197, 1607, 2195, 1225}], 
               
               Line[{1332, 1318, 2371, 2369, 1315, 2331, 2330, 1653, 2345, 
                1295, 2296, 2295, 1641, 1277, 2270, 1629, 2254, 2252, 1261, 
                1246, 2218, 2217, 2215, 1243, 2200, 2199, 1608, 1227}], 
               
               Line[{1336, 2382, 1666, 2393, 1319, 2361, 1658, 2344, 2342, 
                1300, 2311, 2310, 1645, 1282, 2242, 1634, 2266, 2264, 1264, 
                2229, 2228, 1619, 2189, 1248, 2207, 1611, 2205, 1230}], 
               
               Line[{1338, 1670, 2399, 2396, 1321, 2366, 2364, 2363, 1312, 
                1302, 1652, 2329, 2327, 1284, 2292, 2290, 2289, 1274, 1266, 
                1626, 2251, 2249, 2246, 1250, 2213, 2212, 1240, 1232}], 
               
               Line[{1341, 2403, 2402, 1335, 1325, 1665, 2381, 2380, 2378, 
                1306, 1656, 2341, 2339, 1287, 2307, 2305, 2304, 1281, 1269, 
                2262, 2261, 1630, 2273, 1254, 1618, 2227, 2225, 1235}], 
               
               Line[{1344, 1675, 2410, 2408, 1328, 2390, 2389, 1667, 2357, 
                1309, 2355, 2354, 1305, 1290, 2324, 1648, 2321, 2319, 1272, 
                2284, 1636, 2281, 2279, 1257, 2239, 2238, 1253, 1238}], 
               
               Line[{1349, 1346, 2418, 2420, 1365, 2442, 2443, 1682, 2416, 
                1383, 2478, 2479, 1692, 2433, 1399, 1706, 2520, 2522, 1417, 
                2509, 1718, 2555, 2557, 1437, 2595, 2596, 1434, 1454}], 
               
               Line[{1352, 2425, 2426, 1347, 1368, 1685, 2453, 2454, 2456, 
                1386, 1696, 2489, 2491, 2494, 1402, 2536, 2537, 1403, 1420, 
                2569, 2571, 2572, 1421, 1440, 1732, 2605, 2607, 1457}], 
               Line[{1354, 1679, 2428, 2430, 1372, 2412, 2413, 1689, 2452, 
                1388, 2487, 1702, 2463, 2465, 1406, 2504, 1715, 2534, 1424, 
                2565, 1726, 2582, 2584, 1443, 2616, 2617, 1447, 1460}], 
               
               Line[{1357, 2445, 2446, 1684, 1375, 2470, 1693, 2480, 2482, 
                1391, 2524, 2525, 1709, 2516, 1409, 1415, 2558, 2560, 1427, 
                2598, 2599, 1731, 2590, 1446, 2620, 1738, 2623, 1463}], 
               
               Line[{1360, 1370, 2457, 2459, 1379, 2497, 2499, 2500, 1701, 
                1394, 2539, 2540, 1713, 2531, 1412, 1422, 2573, 2575, 1431, 
                950, 2608, 2610, 1450, 2628, 2629, 1742, 1466}], 
               
               Line[{1362, 2466, 1690, 2462, 1381, 2502, 1704, 2505, 2507, 
                1396, 2542, 1716, 2545, 2547, 1414, 2544, 1728, 2578, 1433, 
                2580, 2581, 1737, 2613, 1452, 2631, 1743, 2614, 1468}], 
               
               Line[{1453, 2548, 1729, 2594, 1436, 2556, 1719, 2510, 2508, 
                1416, 2521, 1707, 2467, 1398, 2432, 2431, 1691, 2477, 1382, 
                2415, 2414, 1681, 2441, 1364, 2419, 1676, 2417, 1348}], 
               
               Line[{1455, 1441, 2593, 2591, 1438, 2553, 2552, 1722, 2567, 
                1418, 2518, 2517, 1710, 1400, 2492, 1698, 2476, 2474, 1384, 
                1369, 2440, 2439, 2437, 1366, 2422, 2421, 1677, 1350}], 
               
               Line[{1459, 2604, 1735, 2615, 1442, 2583, 1727, 2566, 2564, 
                1423, 2533, 2532, 1714, 1405, 2464, 1703, 2488, 2486, 1387, 
                2451, 2450, 1688, 2411, 1371, 2429, 1680, 2427, 1353}], 
               
               Line[{1461, 1739, 2621, 2618, 1444, 2588, 2586, 2585, 1435, 
                1425, 1721, 2551, 2549, 1407, 2514, 2512, 2511, 1397, 1389, 
                1695, 2473, 2471, 2468, 1373, 2435, 2434, 1363, 1355}], 
               
               Line[{1464, 2625, 2624, 1458, 1448, 1734, 2603, 2602, 2600, 
                1429, 1725, 2563, 2561, 1410, 2529, 2527, 2526, 1404, 1392, 
                2484, 2483, 1699, 2495, 1377, 1687, 2449, 2447, 1358}], 
               
               Line[{1467, 1744, 2632, 2630, 1451, 2612, 2611, 1736, 2579, 
                1432, 2577, 2576, 1428, 1413, 2546, 1717, 2543, 2541, 1395, 
                2506, 1705, 2503, 2501, 1380, 2461, 2460, 1376, 1361}], 
               Line[{982, 1758, 1471, 1757, 998, 1772, 225, 1789, 1016, 1809, 
                1490, 1824, 1827, 1032, 1869, 1504, 1853, 1050, 1902, 1904, 
                1516, 1888, 1070, 1926, 1526, 1940, 1087}], 
               
               Line[{987, 1778, 1476, 1770, 1005, 1803, 1806, 1487, 1815, 
                1021, 1857, 1501, 1847, 1849, 1039, 1884, 1513, 1893, 1057, 
                1931, 1523, 1921, 1923, 1076, 1953, 1956, 1533, 1093}], 
               
               Line[{990, 1782, 1479, 1792, 1009, 1830, 1832, 1493, 1819, 
                1024, 1872, 1505, 1862, 1864, 1042, 1896, 1517, 1908, 1061, 
                1935, 366, 1943, 1080, 1961, 1534, 1960, 1096}], 
               
               Line[{1105, 1980, 1540, 1979, 1121, 1994, 420, 2011, 1139, 
                2031, 1559, 2046, 2049, 1155, 2091, 1573, 2075, 1173, 2124, 
                2126, 1585, 2110, 1193, 2148, 1595, 2162, 1210}], 
               
               Line[{1110, 2000, 1545, 1992, 1128, 2025, 2028, 1556, 2037, 
                1144, 2079, 1570, 2069, 2071, 1162, 2106, 1582, 2115, 1180, 
                2153, 1592, 2143, 2145, 1199, 2175, 2178, 1602, 1216}], 
               
               Line[{1113, 2004, 1548, 2014, 1132, 2052, 2054, 1562, 2041, 
                1147, 2094, 1574, 2084, 2086, 1165, 2118, 1586, 2130, 1184, 
                2157, 561, 2165, 1203, 2183, 1603, 2182, 1219}], 
               
               Line[{1228, 2202, 1609, 2201, 1244, 2216, 615, 2233, 1262, 
                2253, 1628, 2268, 2271, 1278, 2313, 1642, 2297, 1296, 2346, 
                2348, 1654, 2332, 1316, 2370, 1664, 2384, 1333}], 
               
               Line[{1233, 2222, 1614, 2214, 1251, 2247, 2250, 1625, 2259, 
                1267, 2301, 1639, 2291, 2293, 1285, 2328, 1651, 2337, 1303, 
                2375, 1661, 2365, 2367, 1322, 2397, 2400, 1671, 1339}], 
               
               Line[{1236, 2226, 1617, 2236, 1255, 2274, 2276, 1631, 2263, 
                1270, 2316, 1643, 2306, 2308, 1288, 2340, 1655, 2352, 1307, 
                2379, 756, 2387, 1326, 2405, 1672, 2404, 1342}], 
               
               Line[{1351, 2424, 1678, 2423, 1367, 2438, 810, 2455, 1385, 
                2475, 1697, 2490, 2493, 1401, 2535, 1711, 2519, 1419, 2568, 
                2570, 1723, 2554, 1439, 2592, 1733, 2606, 1456}], 
               Line[{1356, 2444, 1683, 2436, 1374, 2469, 2472, 1694, 2481, 
                1390, 2523, 1708, 2513, 2515, 1408, 2550, 1720, 2559, 1426, 
                2597, 1730, 2587, 2589, 1445, 2619, 2622, 1740, 1462}], 
               
               Line[{1359, 2448, 1686, 2458, 1378, 2496, 2498, 1700, 2485, 
                1393, 2538, 1712, 2528, 2530, 1411, 2562, 1724, 2574, 1430, 
                2601, 951, 2609, 1449, 2627, 1741, 2626, 1465}]}, {
               
               Line[{205, 377, 1947, 1946, 374, 1944, 1943, 367, 1937, 364, 
                357, 1924, 1923, 1922, 347, 1918, 1917, 340, 337, 1906, 330, 
                1888, 1887, 327, 1891, 1890, 320, 354}], 
               
               Line[{213, 344, 1912, 1911, 342, 1909, 1908, 334, 1897, 332, 
                1894, 1893, 324, 1885, 314, 306, 1868, 1867, 304, 1871, 296, 
                1853, 1852, 294, 1856, 1855, 286, 322}], 
               
               Line[{217, 1751, 197, 1752, 201, 1755, 199, 1758, 1759, 206, 
                1761, 208, 1762, 210, 1768, 219, 1778, 1779, 227, 1781, 1782, 
                229, 1791, 237, 1794, 239, 1800, 244}], 
               
               Line[{245, 240, 1796, 1795, 238, 1793, 1792, 230, 1783, 228, 
                1780, 220, 1770, 1769, 211, 1764, 1763, 209, 207, 1760, 200, 
                1757, 1756, 202, 1754, 1753, 198, 218}], 
               
               Line[{249, 214, 1775, 1776, 221, 1771, 1772, 224, 1787, 231, 
                234, 1745, 1746, 241, 1802, 1803, 1804, 252, 261, 264, 1829, 
                1830, 1831, 273, 1835, 1836, 276, 282}], 
               
               Line[{284, 1841, 1840, 278, 275, 1834, 266, 1819, 1818, 263, 
                1816, 1815, 254, 1807, 243, 236, 1786, 1785, 233, 1790, 1789, 
                226, 1774, 223, 216, 1750, 1749, 251}], 
               
               Line[{287, 246, 1811, 1812, 255, 1808, 1809, 258, 1823, 267, 
                1820, 1821, 270, 279, 1845, 290, 1857, 1858, 297, 1860, 300, 
                1872, 1873, 307, 1875, 1876, 310, 315}], 
               
               Line[{317, 1881, 1880, 312, 309, 302, 1865, 1864, 1863, 299, 
                292, 1850, 1849, 1848, 281, 1799, 1798, 272, 269, 1828, 1827, 
                1826, 260, 257, 248, 1767, 1766, 289}], 
               
               Line[{321, 1801, 285, 1854, 293, 1851, 295, 1869, 1870, 303, 
                1866, 305, 1838, 313, 1883, 1884, 323, 1892, 331, 1895, 1896, 
                333, 1907, 341, 1910, 343, 1878, 212}], 
               
               Line[{349, 1948, 391, 1966, 389, 1963, 387, 1960, 1959, 385, 
                1957, 383, 1956, 1955, 379, 1951, 371, 1938, 369, 1941, 1940, 
                361, 1927, 359, 1930, 351, 1882, 381}], 
               
               Line[{352, 1842, 1843, 318, 325, 328, 1901, 1902, 1903, 335, 
                1898, 1899, 338, 345, 1919, 355, 1931, 1932, 362, 1934, 1935, 
                365, 372, 375, 1913, 1914, 203}], 
               
               Line[{380, 350, 1928, 1929, 358, 1925, 1926, 360, 1939, 368, 
                370, 1949, 1950, 378, 1952, 1953, 1954, 382, 384, 1958, 386, 
                1961, 1962, 388, 1964, 1965, 390, 348}], 
               
               Line[{400, 572, 2169, 2168, 569, 2166, 2165, 562, 2159, 559, 
                552, 2146, 2145, 2144, 542, 2140, 2139, 535, 532, 2128, 525, 
                2110, 2109, 522, 2113, 2112, 515, 549}], 
               
               Line[{408, 539, 2134, 2133, 537, 2131, 2130, 529, 2119, 527, 
                2116, 2115, 519, 2107, 509, 501, 2090, 2089, 499, 2093, 491, 
                2075, 2074, 489, 2078, 2077, 481, 517}], 
               
               Line[{412, 1973, 392, 1974, 396, 1977, 394, 1980, 1981, 401, 
                1983, 403, 1984, 405, 1990, 414, 2000, 2001, 422, 2003, 2004, 
                424, 2013, 432, 2016, 434, 2022, 439}], 
               
               Line[{440, 435, 2018, 2017, 433, 2015, 2014, 425, 2005, 423, 
                2002, 415, 1992, 1991, 406, 1986, 1985, 404, 402, 1982, 395, 
                1979, 1978, 397, 1976, 1975, 393, 413}], 
               
               Line[{444, 409, 1997, 1998, 416, 1993, 1994, 419, 2009, 426, 
                429, 1967, 1968, 436, 2024, 2025, 2026, 447, 456, 459, 2051, 
                2052, 2053, 468, 2057, 2058, 471, 477}], 
               
               Line[{479, 2063, 2062, 473, 470, 2056, 461, 2041, 2040, 458, 
                2038, 2037, 449, 2029, 438, 431, 2008, 2007, 428, 2012, 2011, 
                421, 1996, 418, 411, 1972, 1971, 446}], 
               
               Line[{482, 441, 2033, 2034, 450, 2030, 2031, 453, 2045, 462, 
                2042, 2043, 465, 474, 2067, 485, 2079, 2080, 492, 2082, 495, 
                2094, 2095, 502, 2097, 2098, 505, 510}], 
               
               Line[{512, 2103, 2102, 507, 504, 497, 2087, 2086, 2085, 494, 
                487, 2072, 2071, 2070, 476, 2021, 2020, 467, 464, 2050, 2049, 
                2048, 455, 452, 443, 1989, 1988, 484}], 
               
               Line[{516, 2023, 480, 2076, 488, 2073, 490, 2091, 2092, 498, 
                2088, 500, 2060, 508, 2105, 2106, 518, 2114, 526, 2117, 2118, 
                528, 2129, 536, 2132, 538, 2100, 407}], 
               
               Line[{544, 2170, 586, 2188, 584, 2185, 582, 2182, 2181, 580, 
                2179, 578, 2178, 2177, 574, 2173, 566, 2160, 564, 2163, 2162, 
                556, 2149, 554, 2152, 546, 2104, 576}], 
               
               Line[{547, 2064, 2065, 513, 520, 523, 2123, 2124, 2125, 530, 
                2120, 2121, 533, 540, 2141, 550, 2153, 2154, 557, 2156, 2157, 
                560, 567, 570, 2135, 2136, 398}], 
               
               Line[{575, 545, 2150, 2151, 553, 2147, 2148, 555, 2161, 563, 
                565, 2171, 2172, 573, 2174, 2175, 2176, 577, 579, 2180, 581, 
                2183, 2184, 583, 2186, 2187, 585, 543}], 
               
               Line[{595, 767, 2391, 2390, 764, 2388, 2387, 757, 2381, 754, 
                747, 2368, 2367, 2366, 737, 2362, 2361, 730, 727, 2350, 720, 
                2332, 2331, 717, 2335, 2334, 710, 744}], 
               
               Line[{603, 734, 2356, 2355, 732, 2353, 2352, 724, 2341, 722, 
                2338, 2337, 714, 2329, 704, 696, 2312, 2311, 694, 2315, 686, 
                2297, 2296, 684, 2300, 2299, 676, 712}], 
               
               Line[{607, 2195, 587, 2196, 591, 2199, 589, 2202, 2203, 596, 
                2205, 598, 2206, 600, 2212, 609, 2222, 2223, 617, 2225, 2226, 
                619, 2235, 627, 2238, 629, 2244, 634}], 
               
               Line[{635, 630, 2240, 2239, 628, 2237, 2236, 620, 2227, 618, 
                2224, 610, 2214, 2213, 601, 2208, 2207, 599, 597, 2204, 590, 
                2201, 2200, 592, 2198, 2197, 588, 608}], 
               
               Line[{639, 604, 2219, 2220, 611, 2215, 2216, 614, 2231, 621, 
                624, 2189, 2190, 631, 2246, 2247, 2248, 642, 651, 654, 2273, 
                2274, 2275, 663, 2279, 2280, 666, 672}], 
               Line[{674, 2285, 2284, 668, 665, 2278, 656, 2263, 2262, 653, 
                2260, 2259, 644, 2251, 633, 626, 2230, 2229, 623, 2234, 2233, 
                616, 2218, 613, 606, 2194, 2193, 641}], 
               
               Line[{677, 636, 2255, 2256, 645, 2252, 2253, 648, 2267, 657, 
                2264, 2265, 660, 669, 2289, 680, 2301, 2302, 687, 2304, 690, 
                2316, 2317, 697, 2319, 2320, 700, 705}], 
               
               Line[{707, 2325, 2324, 702, 699, 692, 2309, 2308, 2307, 689, 
                682, 2294, 2293, 2292, 671, 2243, 2242, 662, 659, 2272, 2271, 
                2270, 650, 647, 638, 2211, 2210, 679}], 
               
               Line[{711, 2245, 675, 2298, 683, 2295, 685, 2313, 2314, 693, 
                2310, 695, 2282, 703, 2327, 2328, 713, 2336, 721, 2339, 2340, 
                723, 2351, 731, 2354, 733, 2322, 602}], 
               
               Line[{739, 2392, 781, 2410, 779, 2407, 777, 2404, 2403, 775, 
                2401, 773, 2400, 2399, 769, 2395, 761, 2382, 759, 2385, 2384, 
                751, 2371, 749, 2374, 741, 2326, 771}], 
               
               Line[{742, 2286, 2287, 708, 715, 718, 2345, 2346, 2347, 725, 
                2342, 2343, 728, 735, 2363, 745, 2375, 2376, 752, 2378, 2379, 
                755, 762, 765, 2357, 2358, 593}], 
               
               Line[{770, 740, 2372, 2373, 748, 2369, 2370, 750, 2383, 758, 
                760, 2393, 2394, 768, 2396, 2397, 2398, 772, 774, 2402, 776, 
                2405, 2406, 778, 2408, 2409, 780, 738}], 
               
               Line[{790, 962, 2613, 2612, 959, 2610, 2609, 952, 2603, 949, 
                942, 2590, 2589, 2588, 932, 2584, 2583, 925, 922, 2572, 915, 
                2554, 2553, 912, 2557, 2556, 905, 939}], 
               
               Line[{798, 929, 2578, 2577, 927, 2575, 2574, 919, 2563, 917, 
                2560, 2559, 909, 2551, 899, 891, 2534, 2533, 889, 2537, 881, 
                2519, 2518, 879, 2522, 2521, 871, 907}], 
               
               Line[{802, 2417, 782, 2418, 786, 2421, 784, 2424, 2425, 791, 
                2427, 793, 2428, 795, 2434, 804, 2444, 2445, 812, 2447, 2448, 
                814, 2457, 822, 2460, 824, 2466, 829}], 
               
               Line[{830, 825, 2462, 2461, 823, 2459, 2458, 815, 2449, 813, 
                2446, 805, 2436, 2435, 796, 2430, 2429, 794, 792, 2426, 785, 
                2423, 2422, 787, 2420, 2419, 783, 803}], 
               
               Line[{834, 799, 2441, 2442, 806, 2437, 2438, 809, 2453, 816, 
                819, 2411, 2412, 826, 2468, 2469, 2470, 837, 846, 849, 2495, 
                2496, 2497, 858, 2501, 2502, 861, 867}], 
               
               Line[{869, 2507, 2506, 863, 860, 2500, 851, 2485, 2484, 848, 
                2482, 2481, 839, 2473, 828, 821, 2452, 2451, 818, 2456, 2455, 
                811, 2440, 808, 801, 2416, 2415, 836}], 
               
               Line[{872, 831, 2477, 2478, 840, 2474, 2475, 843, 2489, 852, 
                2486, 2487, 855, 864, 2511, 875, 2523, 2524, 882, 2526, 885, 
                2538, 2539, 892, 2541, 2542, 895, 900}], 
               
               Line[{902, 2547, 2546, 897, 894, 887, 2531, 2530, 2529, 884, 
                877, 2516, 2515, 2514, 866, 2465, 2464, 857, 854, 2494, 2493, 
                2492, 845, 842, 833, 2433, 2432, 874}], 
               
               Line[{906, 2467, 870, 2520, 878, 2517, 880, 2535, 2536, 888, 
                2532, 890, 2504, 898, 2549, 2550, 908, 2558, 916, 2561, 2562, 
                918, 2573, 926, 2576, 928, 2544, 797}], 
               
               Line[{934, 2614, 976, 2632, 974, 2629, 972, 2626, 2625, 970, 
                2623, 968, 2622, 2621, 964, 2617, 956, 2604, 954, 2607, 2606, 
                946, 2593, 944, 2596, 936, 2548, 966}], 
               
               Line[{937, 2508, 2509, 903, 910, 913, 2567, 2568, 2569, 920, 
                2564, 2565, 923, 930, 2585, 940, 2597, 2598, 947, 2600, 2601, 
                950, 957, 960, 2579, 2580, 788}], 
               
               Line[{965, 935, 2594, 2595, 943, 2591, 2592, 945, 2605, 953, 
                955, 2615, 2616, 963, 2618, 2619, 2620, 967, 969, 2624, 971, 
                2627, 2628, 973, 2630, 2631, 975, 933}], 
               
               Line[{204, 1915, 376, 1945, 373, 1942, 366, 1936, 363, 1933, 
                356, 1921, 1920, 346, 1916, 339, 1900, 336, 1905, 1904, 329, 
                1886, 326, 1889, 319, 1844, 353}], 
               
               Line[{250, 1748, 215, 1777, 222, 1773, 225, 1788, 232, 1784, 
                235, 1747, 242, 1805, 1806, 253, 1814, 262, 1817, 265, 1832, 
                1833, 274, 1837, 277, 1839, 283}], 
               
               Line[{288, 1765, 247, 1813, 256, 1810, 259, 1824, 1825, 268, 
                1822, 271, 1797, 280, 1846, 1847, 291, 1859, 298, 1861, 1862, 
                301, 1874, 308, 1877, 311, 1879, 316}], 
               
               Line[{399, 2137, 571, 2167, 568, 2164, 561, 2158, 558, 2155, 
                551, 2143, 2142, 541, 2138, 534, 2122, 531, 2127, 2126, 524, 
                2108, 521, 2111, 514, 2066, 548}], 
               
               Line[{445, 1970, 410, 1999, 417, 1995, 420, 2010, 427, 2006, 
                430, 1969, 437, 2027, 2028, 448, 2036, 457, 2039, 460, 2054, 
                2055, 469, 2059, 472, 2061, 478}], 
               
               Line[{483, 1987, 442, 2035, 451, 2032, 454, 2046, 2047, 463, 
                2044, 466, 2019, 475, 2068, 2069, 486, 2081, 493, 2083, 2084, 
                496, 2096, 503, 2099, 506, 2101, 511}], 
               
               Line[{594, 2359, 766, 2389, 763, 2386, 756, 2380, 753, 2377, 
                746, 2365, 2364, 736, 2360, 729, 2344, 726, 2349, 2348, 719, 
                2330, 716, 2333, 709, 2288, 743}], 
               
               Line[{640, 2192, 605, 2221, 612, 2217, 615, 2232, 622, 2228, 
                625, 2191, 632, 2249, 2250, 643, 2258, 652, 2261, 655, 2276, 
                2277, 664, 2281, 667, 2283, 673}], 
               
               Line[{678, 2209, 637, 2257, 646, 2254, 649, 2268, 2269, 658, 
                2266, 661, 2241, 670, 2290, 2291, 681, 2303, 688, 2305, 2306, 
                691, 2318, 698, 2321, 701, 2323, 706}], 
               
               Line[{789, 2581, 961, 2611, 958, 2608, 951, 2602, 948, 2599, 
                941, 2587, 2586, 931, 2582, 924, 2566, 921, 2571, 2570, 914, 
                2552, 911, 2555, 904, 2510, 938}], 
               
               Line[{835, 2414, 800, 2443, 807, 2439, 810, 2454, 817, 2450, 
                820, 2413, 827, 2471, 2472, 838, 2480, 847, 2483, 850, 2498, 
                2499, 859, 2503, 862, 2505, 868}], 
               
               Line[{873, 2431, 832, 2479, 841, 2476, 844, 2490, 2491, 853, 
                2488, 856, 2463, 865, 2512, 2513, 876, 2525, 883, 2527, 2528, 
                886, 2540, 893, 2543, 896, 2545, 
                901}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}}}, VertexNormals -> CompressedData["
1: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
MtTCapkNWpKfc4S/58K4nuKfbKL/q5NH3Irys0F5Z32l62AK+PVqcPCQvDPI
vcPl5blykO0bm/L/dRtqrJE/r5EGMnZOTyd3VULBqLdqA28UBIct3Gf7lAZ/
HzX1WC4uB2+RnkumxXkot+zblfA3NBASNBl25s+G0gquvduUyrDM7NyDMlI/
Jwzoxn/FVBg75qDINVCB861z0s1rSV5+b2XPvSEcFQRoYpe8KiHPQOHlvSc0
uLk072PaaXvwuX5W+8f0PaCll352aKGBxiRHwAmmcJDr0LE4uvg+DC/6LfWu
+X/zEn0/0vcjY/+NWfnoPSsfGfLp+gBdH2ToQ9cf6foDQ/9ts+fFotnzAuO8
dPsg3T7AsI/srD3x9qw9kWHP77P2R7lZ+yPD/i9n/YV0fyHDX3T/It2/yPAv
HQ9AxwMw8NA8ix9wm8UPMPBDxxusm8UbMPBGxyfEzOITGPjUn8Uz+MziGRl4
puMf/Wfxjwz80+MFO2bjBRnxQo8voMcXMOKLHo8gOBuPwIhHevyC2Gz8AiN+
6fEOw1n/4h0Y8U7nB6DzAzL4gc4nQJvlE2TwCZ1/4M0s/yCDf1JPuUUuXhCL
xueWe0tnnISAM23b1AlP/r65uqG/NwwrbxfzPDFSwbnsu65YEJ7nLzqj/+N8
MlZ+z1Ao7XfBS/h1/sQE6YOEjlfXpqSgSNcSzrkiEdgvHCT/iuQv7b6mK4bx
yfi+tFtgX0QwWuwwPL2U7A84uWYsb2MqeuxYM24lkYLczrzCS4md7U0VzLk7
dVAyeOBWYnQwcK2ruNRLvvuHQzjS9ZoVhO8tnGE95gG2Jxd1m5P8Yn1tLHG5
vi9skRi95fXcApj4HidJkvX6qB/zeTeXIOfCPc901BxQRNX09nuSZ33X11r/
npuL3OW84UUXwjFEW91v9CcN1nw9vKF2phxV933eO3IjEZWfb3GZbKdBnsB9
9ly+Aty+ZGtDt0QChp58ulaG8LyNzSuvrmVl+JLzjetKnmTMy5bri+4k9W1A
9+U9VzPwppaIuFh9MipvTanbO0Lso7zwzNxdzngiVe3gg/g0jK83SOcj+VS3
+DQ/1x477LoumHFD1wrdjxnefUDV/2+HvReI+WHyNp7VhhI38L7OAtPFZJ12
uMf4/aADQmGywf5lEfjVSKxrCbGP28Debe/iRLHLVopV2zgZ387TkJAh/U6s
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
afbn0uyXpdk/pOAxoFNshj22TNXssqkwLrNcpIfMv83l+BDrUxMY+J63frQ3
B5a1nP05OjkG/g5jVit3uYCoROOfa7rFUNb7rSllaAzs0qVwssMF4kQOLNMq
r4ZrB+QPXa8n8e903frDNVc4xPe3iMOpHkSsLHgGQ8dgNGxv/QnrZLRuMmi5
phcHVwbvX7pJ/PCpSVzHxzoZjFbXb/+jG4c8y9xkqHH3og9ndrrbg7iypOfj
ohrIvGAYWX1vDNJO6W6xDDMB0VjRbz+r8iGKufqZEcHVXWrpm55Yn69azmGo
f0g24j99ePFZX4jzNsFhi/iTL0rzkeFJSKEVeT661Vqyzcke0+If3q7Kr8HE
h+One8j8s/Ryf39cc8VjYqWc6U71eOTFpt5eYr/l3kY57k4XPPu27aVcRTVO
i/x+YEzW20kv27NtlwvKpWvdS9ErxinXlYWJxD8cOWYM3s0muOQU8xL+vhzs
qzNpofzJJb2jLbnIDA5yOJQflE3F8zasHJT/rxlv/fRVOwk1jIZvznLXYk56
zHmPgjHwXv5K00TdEF+UyjQeIsW4IV9VkHq/7Grlp6emHTD+WO3CiaBMMOWq
Bioe1hs0h0gq+uF9oV+bXLlTIOUc2xQVPzbX1tHVS8fg8o0jTe6dCWDUEK9C
xVu+1EMWieIUfNFfziOxKxrcc6Y5qfj8pf7PfbHJnv97X2zNmts/vQp8sPLo
3a1bT+Vjls/Uy1jiz4pKvWVvm/PwoCN3QEyHP9gI3IEdxE550ycqZ0JK0fGX
/CbFNG3Q52j5yTHwn/zCzzR9t3/j80HhRp/lgmXIQs/YJBgWgW+lBS/xknz8
y/cg4xFLAdJFPLyf3J6Eu6Wb62VI/gq931HlKXcbtWbRXvJONv7yaN5TRPqZ
hd1HnMWup+PETe9+g1upuFTQsFOU4EBGykbdW0sTUOL69R98+gm4ekxpBglu
tMlW8j27Fog9i1RvtceFoatU3VEKZ3glutMJLuGJh0sLCS7hnex/cOkqo28B
wTE8sGczB8ExXK70D45tfufL0JvkBVX9op9N+0KhXEyjicJbLdp6h+at1/uZ
662+K1dxs3E8BmnGQ8IPjvsUTlbm5jlpX3JGuLX0ZOz2MGhR9tOhcHVUI7Fd
qPk2FgYnb9r8yw8ias3ncLjoZtXz4mN2eGJKT6fIxxu0h3PmcDvcUej72DND
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
1Tffty90RX8LM00q/rM2PO6O/eGNdvdKA7+fOk7w7epiKl/2/tbg2E3nhL3a
3ZJbclxw+LtzE5V3SjaNs1NGN1E05tfWszHG+CC66CmVpzGrXUTu/QzEi/uV
4seGPTGzK76IymufS88XyDs4QVF27uZPvTbY8FV3D4UDxrVmwcyM+lik6aZb
ttYCql3j5nAjhk/tCWvgKagxiK9z99eEX5y8czjjQdM72N/+f/UONGn6BWHz
9AsMLkSnWuRq4+DD5tdb77sAY4nRHB42+o/6BvapQUvqZ0nON4YgIOM4h5/9
NJ7/iHk8/xq080IT884L8dD4/2dp/P8naPz/Cp391gTn4dxIWkDcLmcsuf93
DufVvvU0kboALdUnb3zQ90LjdzBXF14+0kjW/egFMoF9uvdU7bFBaNVSqo6s
6+opnl4WCuwGiz5J+Hqgaq/+Geq8/ZvWSJfIPWYYeSHbZwlLFlQXeR5RIf1D
8prh0/qHwtH1p/2h8w05sPzitpkv4wRPbn/0Ko0IR84Bmz5N7xTYZFZYfIDE
myuN3z5iHr+9J43fnpPGb89B47dP6p6kvxbnAqONBYb1rYmwPt/rTRHBGZ2M
pl2rrN0h3MRcdX9jJFx+fbaMqo/MNN54m3m88eo03niuebzxyv+D7/06X7W0
kr4DqsZ7+Uev8sZxELTiJP55O3ttaJr7MGp9fN22nt4TX9T0plPnD3e8nPGU
MXIHORvzDobDgcCTIahA9S1ZF5rYhVnzIa3k4lLJxz7wflfuhuUUb8AJ5moT
GQc8XTT4wXRPPB6bVDL6Qdab9+xWh+ApLxiRWD+95W8i9B9oHqTuk16UXK+f
JHcbGCZ+KfDeyYar7/k1qe+5V4XXT0nfjwOpa3mJZ/7cxHMf2TpEiR8+Sex4
sdO2ECQaBU8+YTOAtep3piNH/nv+oX/e+QfXd1HHiw+lwwz9yl033DKg9X2r
rRDpfy6nCLrbGMbBFuezVrZeORAtwhWeQuxXYNOYfl7gA5JX23KFTuXDD7HF
b6nv3co0/u2JefzbT2n820fn8W+n0Pi3b9P4t3/T+LclRDXOL5Mqgitb4hTp
PAph87PB0e3tY7D9UusplitJcEAkczaLsxau9TgOhBeQOltm5i12yADyar8Z
C0Sl4PWS4yvOk3lW7+Q1OX7HAZ4lhAl0jKagw71Mx88k3havZIrt0LSDbVnR
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
JW6ypRknIJ+LQT71/a5xyZ0NclcCMGbYLOXOiVTcJ+coQuHAxLf39SzG/tDF
pn11x714GB+7aUThxgkMj2I2TgZ2p7ynK9mS4POryAX0BGd6/gefUjqNH4mb
xo/0mMaPlFBleI7BMxU/V5d6NJikYKu3vCyFh359CeXHY+Ow207u2IK8NFyw
I9mMws//R9d3h/X8hX9XUoiihFIiSsMolbZbkqg0SLS0tLX33nvvPT7trT1I
Jw007EISsivtiCjPeX+/n+f3XL/P9Xz/va/3dd73uc997nXOed0vyDhCeWQc
octkHCHy/RloozgPWiLjCw1R4AvltvJsTjiRAu9U8gZcNtai39oanYSd3/p+
dJVZIx0ePBLvb/hQj/hVGsQJv/A0qjD6cIo+GpE+U7rfA6cWliuPCT/y+4kq
c/pMNNT+6vgrSFWPrm//eo24T6V/Tiqi4nkqUvfdsvQuOA3NTHauDGK5hSd+
c9OUj0V6R4a1Ph3JRGKcRoo2eB0VA4NpueYTwO37AZeGz5boZEJUcgP2y3OH
Cv0rz3uiosXRqw3uiWj+63woUeekeUwtpHROEz49dHQ8Zp2O1gaVN1Rg/859
OO+jcs4myKGa0Lm5Jx8NLptpEO/Q/VPFOetSApHo4+ivA66pUN99bbYWfx9c
6yNxni0HHc7PGGHXckJjZm5NBH5LtSiHx+xyKpofFb/lq+ON5H9lcHUQfY6+
zyx+3Z6PZM4/fmLanI7KlNQFEvE6np/cFZwbRkJ8J+q13m+PRpdZtEVsiL7b
Jhy9bEyF6PCTa6Mi3/MRB3XevmdYT0bd7FyEHxag/lQNbj+lTLTyzYGnl8Ax
ftHtyx1TjFREso/t3BaAFl+OOjsT92wlLp0wZ6pD1p/Dy55v8kHMqTeEU6Zx
XJfs+ZNpqARRkw5UbehLRpf5937jx/q2UbndzrOuETEnJ1xnb4hH7xdWEtk+
4niefF6mRXFeVkU+LztCcV425SglxiNXgZgneRtdnfKRfcrpjj84DhHtDZ7s
LE+AWx48myLo0qDmcUtlE5bbKzIuijQFLooyGRflEQUuipvb47Dx7U1okHEo
kH0HCVWXn/5C4DIZxHwwOmZRgjwNxCTF+0hIjb/grgjO1wp4JIsVG/PRzYsX
jsCpOMTSK8Z3A8vZ3Ihza6M9CTlpJdvnzJUgy8uRXcT797y9rhNCQiTUa9Fn
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
             "]], {
           Axes -> True, 
            AxesLabel -> {
             "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
              "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, 
            BoxRatios -> {1, 1, 0.4}, ImageSize -> {380, 380}, 
            Method -> {"RotationControl" -> "Globe"}, 
            PlotRange -> {{-2.709857394019914, 
             2.709857394019914}, {-1.7138642998702553`, 
             1.7138642998702553`}, {2.348902509926214*^-9, 
             0.5618825841163946}}, PlotRangePadding -> {
              Scaled[0.02], 
              Scaled[0.02], 
              Scaled[0.02]}}], $CellContext`couplingLocator := LocatorPane[
           Dynamic[FE`u$$31, (FE`u$$31 = If[First[
                 Dimensions[#]] < 3, 
               Flatten[{FE`locDefault$$31, FE`mLocDefault$$31}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[FE`rawArrayOfMasses$$31]]; 
              If[$CellContext`rm$ > $CellContext`nMassesFromU, 
                FE`rawArrayOfMasses$$31 = 
                Take[FE`rawArrayOfMasses$$31, $CellContext`nMassesFromU], 
                
                While[$CellContext`rm$ < $CellContext`nMassesFromU, 
                 AppendTo[FE`rawArrayOfMasses$$31, FE`defaultMass$$31]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[FE`kArray$$31, All, 1], All, 1]]; 
              If[$CellContext`km$ > $CellContext`nMassesFromU, FE`kArray$$31 = 
                Select[FE`kArray$$31, Max[{
                    Part[#, 1], 
                    Part[#, 2]}] <= $CellContext`nMassesFromU& ], 
                
                While[$CellContext`km$ < $CellContext`nMassesFromU, 
                 Increment[$CellContext`km$]; 
                 FE`kArray$$31 = $CellContext`growKarray[$CellContext`km$]]]]; 
            Part[FE`u$$31, 1] = If[Dot[
                 Part[FE`u$$31, 1], 
                 Part[FE`u$$31, 1]] < FE`minSquaredDistanceFromOrigin$$31, 
               Part[FE`locDefault$$31, 1], 
               Part[FE`u$$31, 1]]; Part[FE`u$$31, 2] = If[Dot[
                 Part[FE`u$$31, 2], 
                 Part[FE`u$$31, 2]] < FE`minSquaredDistanceFromOrigin$$31, 
               Part[FE`locDefault$$31, 2], 
               Part[FE`u$$31, 2]]; {
               Part[FE`u$$31, 1], 
               Part[
               FE`u$$31, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[
              FE`minAngleBetweenLatticeVectors$$31]; 
            FE`rawNumberOfMasses$$31 = $CellContext`nMassesFromU; 
            FE`m1Sel$$31 = 
             If[FE`m1Sel$$31 > FE`rawNumberOfMasses$$31, 1, FE`m1Sel$$31]; 
            FE`m2Sel$$31 = 
             If[FE`m2Sel$$31 > FE`rawNumberOfMasses$$31, 1, FE`m2Sel$$31]; 
            FE`moSel$$31 = 
             If[FE`moSel$$31 > FE`rawNumberOfMasses$$31, 1, FE`moSel$$31]; 
            FE`moSel$$31 = $CellContext`adjustedmoSel; 
            FE`k1$$31 = $CellContext`kArraySelect[1]; 
            FE`k2$$31 = $CellContext`kArraySelect[2]; 
            FE`k3$$31 = $CellContext`kArraySelect[3]; 
            FE`k4$$31 = $CellContext`kArraySelect[4]; 
            FE`k5$$31 = $CellContext`kArrayOriginSelect; 
            FE`parameterLocatorDependencies$$31 = $CellContext`locDependent; 
            FE`qLoc$$31 = 
             ReplaceAll["qMaxVec", FE`parameterLocatorDependencies$$31]/2; 
            FE`qPlaneLoc$$31 = {-FE`qLoc$$31, FE`qLoc$$31}; 
            FE`couplingData$$31 = $CellContext`calculateCouplings; 
            FE`bRefreshMatrix$$31 = True; 
            FE`tick$$31 = Not[FE`tick$$31])& ], $CellContext`plotSprings, 
           LocatorAutoCreate -> True, ContinuousAction -> False], 
         FE`u$$31 = {{0.1, 1.3}, {1.936, 0.7800000000000002}, {0.9, 0.7}, {
          0.4, 1.2}, {1.3, 1.4}}, 
         FE`locDefault$$31 = {{0.1, 1.3}, {1.9, 0.8}}, 
         FE`mLocDefault$$31 = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
         Attributes[$CellContext`rm$] = {Temporary}, 
         Attributes[$CellContext`km$] = {Temporary}, 
         FE`rawArrayOfMasses$$31 = {
          13.100000000000001`, 20, 20}, $CellContext`nMassesFromU := First[
            Dimensions[FE`u$$31]] - 2, FE`defaultMass$$31 = 20, 
         FE`kArray$$31 = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
           0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 
           0.25, {1, 1, {1, 0}} -> 0.25, {1, 1, {0, 1}} -> 
           0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
           0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 
           0.25, {1, 2, {-1, -1}} -> 0.25, {1, 2, {-1, 1}} -> 
           0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
           0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 
           0.25, {1, 2, {0, 0}} -> 0.25, {2, 1, {-1, 0}} -> 
           0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
           0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 
           0.25, {2, 1, {0, 1}} -> 0.25, {2, 1, {1, 1}} -> 
           0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
           0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 
           0.25, {2, 2, {-1, 1}} -> 0.25, {2, 2, {1, 0}} -> 
           0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
           0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 
           0.25, {1, 3, {0, -1}} -> 0.25, {1, 3, {-1, -1}} -> 
           0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
           0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 
           0.25, {1, 3, {1, -1}} -> 0.25, {1, 3, {0, 0}} -> 
           0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
           0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 
           0.25, {2, 3, {1, 0}} -> 0.25, {2, 3, {0, 1}} -> 
           0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
           0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 
           0.25, {3, 1, {0, -1}} -> 0.25, {3, 1, {-1, -1}} -> 
           0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
           0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 
           0.25, {3, 1, {1, -1}} -> 0.25, {3, 2, {-1, 0}} -> 
           0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
           0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 
           0.25, {3, 2, {0, 1}} -> 0.25, {3, 2, {1, 1}} -> 
           0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
           0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 
           0.25, {3, 3, {-1, 1}} -> 0.25, {3, 3, {1, 0}} -> 
           0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
           0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`growKarray[
           Pattern[$CellContext`nmNew$, 
            Blank[Integer]]] := 
         Module[{$CellContext`k2$}, $CellContext`k2$ = Flatten[
              Map[$CellContext`constructKArrayElements[
                Part[#, 1], 
                Part[#, 2]]& , 
               Select[
                Flatten[
                 
                 Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew$}, {$CellContext`j, $CellContext`nmNew$}], 1], 
                Max[#] == $CellContext`nmNew$& ]], 2]; 
           Flatten[{FE`kArray$$31, $CellContext`k2$}, 1]], 
         Attributes[$CellContext`nmNew$] = {Temporary}, 
         Attributes[$CellContext`k2$] = {
          Temporary}, $CellContext`constructKArrayElements[
           Pattern[$CellContext`i$, 
            Blank[Integer]], 
           Pattern[$CellContext`j$, 
            Blank[Integer]]] := 
         Module[{$CellContext`a$}, $CellContext`a$ = Flatten[
              
              Table[{$CellContext`i$, $CellContext`j$, $CellContext`s 
                 Part[FE`nArray$$31, $CellContext`n]} -> 
               Part[FE`kDefaults$$31, $CellContext`n], {$CellContext`s, -1, 1,
                 2}, {$CellContext`n, 4}], 1]; 
           If[$CellContext`i$ < $CellContext`j$, 
             
             Append[$CellContext`a$, {$CellContext`i$, $CellContext`j$, {0, 
                0}} -> Part[FE`kDefaults$$31, 5]], $CellContext`a$]], 
         Attributes[$CellContext`i$] = {Temporary}, 
         Attributes[$CellContext`j$] = {Temporary}, 
         FE`nArray$$31 = {{1, 0}, {0, 1}, {1, 1}, {1, -1}}, 
         FE`kDefaults$$31 = {0.25, 0.25, 0.25, 0.25, 0.25}, 
         FE`minSquaredDistanceFromOrigin$$31 = 
         0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
           Pattern[$CellContext`minAngle$, 
            Blank[]]] := Module[{$CellContext`t$}, $CellContext`t$ = Abs[
              ArcCos[
               Dot[
                Normalize[
                 Part[FE`u$$31, 1]], 
                Normalize[
                 Part[FE`u$$31, 2]]]]]; $CellContext`t$ = 
            If[$CellContext`t$ > Pi/2, Pi - $CellContext`t$, $CellContext`t$]; 
           If[$CellContext`t$ < $CellContext`minAngle$, FE`locDefault$$31, {
              Part[FE`u$$31, 1], 
              Part[FE`u$$31, 2]}]], 
         Attributes[$CellContext`minAngle$] = {Temporary}, 
         FE`minAngleBetweenLatticeVectors$$31 = Pi/6, 
         FE`rawNumberOfMasses$$31 = 3, FE`m1Sel$$31 = 1, FE`m2Sel$$31 = 1, 
         FE`moSel$$31 = 2, $CellContext`adjustedmoSel := 
         If[FE`rawNumberOfMasses$$31 > 2, 
           If[FE`moSel$$31 == FE`m1Sel$$31, 
            First[
             DeleteCases[
              Range[FE`rawNumberOfMasses$$31], FE`m1Sel$$31]], FE`moSel$$31], 
           First[
            Delete[
             Range[2], FE`m1Sel$$31]]], FE`k1$$31 = 
         0.25, $CellContext`kArraySelect[
           Pattern[$CellContext`ni$, 
            Blank[Integer]]] := ReplaceAll[{FE`m1Sel$$31, FE`m2Sel$$31, 
            Part[FE`nArray$$31, $CellContext`ni$]}, FE`kArray$$31], 
         Attributes[$CellContext`ni$] = {Temporary}, FE`k2$$31 = 0.25, 
         FE`k3$$31 = 0.25, FE`k4$$31 = 0.25, FE`k5$$31 = 
         0.25, $CellContext`kArrayOriginSelect := ReplaceAll[
           Append[
            Sort[{FE`m1Sel$$31, FE`moSel$$31}], {0, 0}], 
           FE`kArray$$31], $CellContext`locDependent := 
         Module[{$CellContext`m$, $CellContext`latticeBasis$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`reciprocalBasis$, \
$CellContext`mObliqueComponents$, $CellContext`mPosFirstCell$, \
$CellContext`reciprocalNorms$}, $CellContext`latticeBasis$ = 
            Take[FE`u$$31, 2]; $CellContext`m$ = 
            Drop[FE`u$$31, 2]; $CellContext`numberLatticeLinesToDisplay$ = 
            Map[Ceiling[
               Abs[FE`windowHalfWidth$$31/Part[
                 Part[$CellContext`latticeBasis$, #], #]]]& , 
              Range[
              2]]; $CellContext`reciprocalBasis$ = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis$]; \
$CellContext`reciprocalNorms$ = Map[Norm[
               Part[$CellContext`reciprocalBasis$, #]]& , 
              Range[2]]; $CellContext`mObliqueComponents$ = Table[
              Dot[
               Part[$CellContext`m$, $CellContext`i], 
               
               Part[$CellContext`reciprocalBasis$, $CellContext`j]], \
{$CellContext`i, FE`rawNumberOfMasses$$31}, {$CellContext`j, 
               2}]; $CellContext`mPosFirstCell$ = 
            Map[Part[$CellContext`m$, #] - Dot[
               Floor[
                
                Part[$CellContext`mObliqueComponents$, #]], \
$CellContext`latticeBasis$]& , 
              Range[FE`rawNumberOfMasses$$31]]; {
            "mScalarArray" -> FE`rawArrayOfMasses$$31, "numberOfMasses" -> 
             FE`rawNumberOfMasses$$31, 
             "latticeBasis" -> $CellContext`latticeBasis$, "latticeNorms" -> 
             Map[Norm[
                Part[$CellContext`latticeBasis$, #]]& , 
               Range[2]], "latticeUnitVectors" -> Map[Normalize[
                Part[$CellContext`latticeBasis$, #]]& , 
               Range[2]], 
             "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay$, 
             "reciprocalBasis" -> $CellContext`reciprocalBasis$, 
             "reciprocalNorms" -> $CellContext`reciprocalNorms$, 
             "qMaxVec" -> (2 Pi) $CellContext`reciprocalNorms$, 
             "mObliqueComponents" -> $CellContext`mObliqueComponents$, 
             "mPosFirstCell" -> $CellContext`mPosFirstCell$, 
             "pointsDataTable" -> Map[$CellContext`pointsTable[
                
                Part[$CellContext`mPosFirstCell$, #], \
$CellContext`latticeBasis$, $CellContext`numberLatticeLinesToDisplay$]& , 
               Range[FE`rawNumberOfMasses$$31]], "lineTable" -> 
             Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay$, $CellContext`latticeBasis$, #]& , 
               Permutations[{1, 2}]]}], $CellContext`calcReciprocalBasis[
           Pattern[$CellContext`loc, 
            Blank[List]]] := Inverse[
           Transpose[$CellContext`loc]], $CellContext`pointsTable[
           Pattern[$CellContext`mPosFirstCell, 
            Blank[List]], 
           Pattern[$CellContext`latticeBasis, 
            Blank[List]], 
           Pattern[$CellContext`numberLatticeLinesToDisplay, 
            Blank[List]]] := 
         Table[$CellContext`mPosFirstCell + 
           Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
            
            Part[$CellContext`numberLatticeLinesToDisplay, 
             1]}, {$CellContext`j, -
            Part[$CellContext`numberLatticeLinesToDisplay, 2], 
            
            Part[$CellContext`numberLatticeLinesToDisplay, 
             2]}], $CellContext`calcLineTable[
           Pattern[$CellContext`n, 
            Blank[List]], 
           Pattern[$CellContext`b, 
            Blank[List]], 
           Pattern[$CellContext`i, 
            Blank[List]]] := 
         Module[{$CellContext`first, $CellContext`second}, \
{$CellContext`first, $CellContext`second} = $CellContext`i; Table[
             
             Line[{(-Part[$CellContext`n, $CellContext`first]) 
                Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                Part[$CellContext`b, $CellContext`second], 
               Part[$CellContext`n, $CellContext`first] 
                Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, \
-Part[$CellContext`n, $CellContext`second], 
              
              Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`calculateCouplings := 
         Module[{$CellContext`t$, $CellContext`t1$, $CellContext`t2$, \
$CellContext`r$, $CellContext`mp$, $CellContext`numberOfMasses$}, \
{$CellContext`r$, $CellContext`mp$, $CellContext`numberOfMasses$} = 
            ReplaceAll[{"latticeBasis", "mPosFirstCell", "numberOfMasses"}, 
              FE`parameterLocatorDependencies$$31]; $CellContext`t$ = 
            Map[Append[#, 
               $CellContext`relativeDifferences[$CellContext`r$, \
$CellContext`mp$, 
                First[#]]]& , 
              ReplaceAll[FE`kArray$$31, Rule -> List]]; $CellContext`t$ = 
            Map[Flatten[{
                Part[#, 1], {
                 Part[#, 2]}, 
                Part[#, 3]}, 1]& , $CellContext`t$]; $CellContext`t1$ = Table[
              Sort[
               
               Select[$CellContext`t$, And[
                Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
               Part[#, 5] < 
               Part[#2, 
                 5]& ], {$CellContext`i, $CellContext`numberOfMasses$}]; \
$CellContext`t2$ = 
            Select[$CellContext`t$, Part[#, 3] == {0, 0}& ]; $CellContext`t2$ = 
            Flatten[{$CellContext`t2$, 
               Map[Flatten[{{
                   Part[#, 2], 
                   Part[#, 1]}, 
                  Drop[#, 2]}, 1]& , $CellContext`t2$]}, 1]; $CellContext`t2$ = 
            Table[
              Sort[
               Select[$CellContext`t2$, Part[#, 1] == $CellContext`i& ], 
               Part[#, 5] < 
               Part[#2, 
                 5]& ], {$CellContext`i, $CellContext`numberOfMasses$}]; \
{$CellContext`t2$, $CellContext`t1$}], $CellContext`relativeDifferences[
           Pattern[$CellContext`r, 
            Blank[List]], 
           Pattern[$CellContext`mp, 
            Blank[List]], {
            Pattern[$CellContext`mIndex1, 
             Blank[Integer]], 
            Pattern[$CellContext`mIndex2, 
             Blank[Integer]], 
            Pattern[$CellContext`n, 
             Blank[List]]}] := 
         Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther}, \
$CellContext`pOrigin = 
            Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
            Part[$CellContext`mp, $CellContext`mIndex2] + 
             Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
            Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], $CellContext`dn = 
         3.6412959999999996`, $CellContext`projOpU[
           Pattern[$CellContext`v, 
            Blank[List]]] := {{
           Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
            Part[$CellContext`v, 2]}, {
           Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
            Part[$CellContext`v, 2]^2}}, FE`bRefreshMatrix$$31 = True, 
         FE`tick$$31 = True, $CellContext`plotSprings := 
         Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, \
$CellContext`latticeBasis$ = Take[FE`u$$31, 2]; $CellContext`aLoc$ = 
            Part[FE`u$$31, 1]; $CellContext`bLoc$ = 
            Part[FE`u$$31, 
              2]; {$CellContext`mLoc$, $CellContext`reciprocalBasis$, \
$CellContext`pointsDataTable$, $CellContext`numberLatticeLinesToDisplay$, \
$CellContext`lines$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
            ReplaceAll[{
              "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
               "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
               "numberOfMasses"}, 
              FE`parameterLocatorDependencies$$31]; $CellContext`pointsList$[
              Pattern[$CellContext`n$, 
               Blank[Integer]]] := {
              $CellContext`massColors[$CellContext`n$], Null, 
              PointSize[
               Sqrt[
               Part[$CellContext`mScalarArray$, $CellContext`n$] 
                FE`mMax$$31^(-1)/500]], 
              Map[Point[#]& , 
               Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
              Text[
               $CellContext`massLabel[$CellContext`n$], 
               Part[$CellContext`mLoc$, $CellContext`n$] + 
               FE`textDisOffset$$31]}; $CellContext`cOrigin$ = Select[
              Part[
               Part[FE`couplingData$$31, 1], FE`m1Sel$$31], 
              Take[#, 2] == {FE`m1Sel$$31, FE`moSel$$31}& ]; $CellContext`cN$ = 
            Select[
              Part[
               Part[FE`couplingData$$31, 2], FE`m1Sel$$31], 
              Take[#, 2] == {FE`m1Sel$$31, FE`m2Sel$$31}& ]; $CellContext`g$ = 
            Map[ListLinePlot[
               $CellContext`springPoints[
                Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
               ReplaceAll[
                 Part[#, 3], FE`springColorsByN$$31]]& , $CellContext`cN$]; 
           If[$CellContext`numberOfMasses$ > 1, 
             AppendTo[$CellContext`g$, 
              Map[ListLinePlot[
                $CellContext`springPoints[
                 Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
                ReplaceAll[
                  Part[#, 3], 
                  FE`springColorsByN$$31]]& , $CellContext`cOrigin$]], Null]; 
           Show[{
              Graphics[
               Flatten[{{$CellContext`lines$, Blue, 
                  Map[Arrow[{{0, 0}, 
                    Part[$CellContext`reciprocalBasis$, #]}]& , 
                   Range[2]], Thick, 
                  Arrowheads[0.05], Red, 
                  Map[Arrow[{{0, 0}, 
                    Part[$CellContext`latticeBasis$, #]}]& , 
                   Range[2]], 
                  Text[
                   OverVector["a"], $CellContext`aLoc$/2 + 
                   FE`textDisOffset$$31], 
                  Text[
                   OverVector["b"], $CellContext`bLoc$/2 + 
                   FE`textDisOffset$$31]}, 
                 Map[$CellContext`pointsList$[#]& , 
                  Range[$CellContext`numberOfMasses$]]}], 
               PlotRange -> {{-FE`windowHalfWidth$$31/2, 
                  FE`windowHalfWidth$$31}, {-FE`windowHalfWidth$$31/2, 
                  FE`windowHalfWidth$$31}}, ImageSize -> 
               FE`primaryDisplaySize$$31], $CellContext`g$}]], 
         Attributes[$CellContext`aLoc$] = {Temporary}, 
         Attributes[$CellContext`bLoc$] = {Temporary}, 
         Attributes[$CellContext`mLoc$] = {Temporary}, 
         Attributes[$CellContext`pointsList$] = {Temporary}, 
         Attributes[$CellContext`cOrigin$] = {Temporary}, 
         Attributes[$CellContext`cN$] = {Temporary}, 
         Attributes[$CellContext`g$] = {Temporary}, 
         Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
         Style[
           $CellContext`indexLabel["m", #], 
           $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
           Style[#, Italic], #2]& , Attributes[Subscript] = {NHoldRest}, 
         FE`textDisOffset$$31 = {0.25, 0.25}, $CellContext`springPoints[
           Pattern[$CellContext`a12, 
            Blank[List]], 
           Optional[
            Pattern[$CellContext`n, 
             Blank[Integer]], 8], 
           Optional[
            Pattern[$CellContext`h, 
             Blank[]], 0.05], 
           Optional[
            Pattern[$CellContext`f, 
             Blank[]], 0.1]] := 
         Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
            Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
            Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
              Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
            Dot[$CellContext`r, {$CellContext`n1, 0}]; {
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + ($CellContext`t (1 - 
                    2 $CellContext`f)) $CellContext`nd, $CellContext`h 
                 Sin[((2 
                    Pi) $CellContext`n) $CellContext`t]}], {$CellContext`t, 0,
                1, 0.01}], 
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                   2 $CellContext`f) $CellContext`nd + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
         FE`springColorsByN$$31 = {{-1, 0} -> 
           RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
           RGBColor[0, 2/3, 0], {-1, -1} -> 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
           RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
           RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
           RGBColor[0, 2/3, 0], {1, 1} -> 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
           RGBColor[0, 2/3, 2/3]}, $CellContext`dynamicsControls := {
           Row[{
             OverVector["q"], " = ", 
             
             Module[{$CellContext`qm$}, $CellContext`qm$ = 
               ReplaceAll["qMaxVec", FE`parameterLocatorDependencies$$31]; 
              Slider2D[
                Dynamic[
                FE`qLoc$$31, (FE`qLoc$$31 = #; FE`bRefreshDynamics$$31 = True; 
                 FE`tick$$31 = Not[FE`tick$$31])& ], 
                ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
             " 2 \[Pi] ", 
             Dynamic[
              NumberForm[
               MatrixForm[FE`qLoc$$31/(2 Pi)], {3, 2}]]}], 
           Row[{
             Text["time, normalized to one period:"]}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`tau$$31, (
               FE`tau$$31 = $CellContext`checkAgainstRange[#, 0, 0, 1]; 
               FE`tick$$31 = Not[FE`tick$$31])& ], {0, 1}, ImageSize -> Tiny, 
              ContinuousAction -> True, Appearance -> "Open"]}, 
            ImageSize -> {200, 60}], 
           Row[{
             Text["oscillation scale factor:"]}], 
           Row[{Manipulator[
               Dynamic[
               FE`scale$$31, (
                FE`scale$$31 = $CellContext`checkAgainstRange[#, 0.05, 0.05, 
                   1]; FE`bRefreshDynPlot$$31 = True; 
                FE`tick$$31 = Not[FE`tick$$31])& ], {0.05, 1}, ImageSize -> 
               Tiny, ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}] " ", 
             Dynamic[
              NumberForm[FE`scale$$31, {3, 2}]]}], 
           Text[
            Text["Angular frequency \[Omega](q), selection:"]], 
           Dynamic[
            SetterBar[
             Dynamic[
             FE`omegaIndex$$31, (FE`omegaIndex$$31 = #; 
              FE`bRefreshDynPlot$$31 = True; 
              FE`tick$$31 = Not[FE`tick$$31])& ], 
             Range[2 FE`rawNumberOfMasses$$31]]]}, 
         Attributes[$CellContext`qm$] = {Temporary}, FE`bRefreshDynamics$$31 = 
         False, FE`tau$$31 = 
         0.6716957092285156, $CellContext`checkAgainstRange[
           Pattern[$CellContext`v, 
            Blank[]], 
           Pattern[$CellContext`default, 
            Blank[]], 
           Pattern[$CellContext`lowerLimit, 
            Blank[]], 
           Pattern[$CellContext`upperLimit, 
            Blank[]]] := 
         Module[{$CellContext`result}, $CellContext`result = If[
              
              NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
            If[$CellContext`result < $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
            If[$CellContext`result > $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
         FE`bRefreshDynPlot$$31 = False, $CellContext`freqControls := {
           Row[{
             Text["mesh size "], 
             Manipulator[
              Dynamic[
              FE`meshSize$$31, (
               FE`meshSize$$31 = $CellContext`checkAgainstRange[#, 8, 2, 30]; 
               FE`bRefreshFreqPlot$$31 = True; 
               FE`tick$$31 = Not[FE`tick$$31])& ], {2, 30, 2}, ImageSize -> 
              Tiny, ContinuousAction -> False, 
              AppearanceElements -> {"InputField"}], " ", 
             Dynamic[FE`meshSize$$31]}], 
           LocatorPane[
            Dynamic[FE`qPlaneLoc$$31], 
            Dynamic[
             (Graphics[{
               Lighter[Gray], 
               Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                  Part[#, 1], -Part[#, 2]}, {
                  Part[#, 1], 
                  Part[#, 2]}, {-Part[#, 1], 
                  Part[#, 2]}}], Black, 
               Line[FE`qPlaneLoc$$31]}, PlotRange -> {{-Part[#, 1], 
                  Part[#, 1]}, {-Part[#, 2], 
                  Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
              ReplaceAll["qMaxVec", FE`parameterLocatorDependencies$$31]]], 
            ContinuousAction -> False]}, FE`bRefreshFreqPlot$$31 = 
         False, $CellContext`massSetter := {
           Row[{
             Text["mass: "], 
             Dynamic[
              If[FE`rawNumberOfMasses$$31 > 1, 
               SetterBar[
                Dynamic[
                FE`m1Sel$$31, (FE`m1Sel$$31 = #; $CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", FE`parameterLocatorDependencies$$31], 
                    FE`m1Sel$$31]; FE`k1$$31 = $CellContext`kArraySelect[1]; 
                 FE`k2$$31 = $CellContext`kArraySelect[2]; 
                 FE`k3$$31 = $CellContext`kArraySelect[3]; 
                 FE`k4$$31 = $CellContext`kArraySelect[4]; 
                 FE`moSel$$31 = $CellContext`adjustedmoSel; 
                 FE`k5$$31 = $CellContext`kArrayOriginSelect; 
                 FE`tick$$31 = Not[FE`tick$$31])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 Range[FE`rawNumberOfMasses$$31]]], 
               $CellContext`massLabel[1]]]}], 
           Row[{
             Manipulator[
              
              Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, FE`mMax$$31]; 
               Part[FE`rawArrayOfMasses$$31, 
                  FE`m1Sel$$31] = $CellContext`massValue; 
               FE`parameterLocatorDependencies$$31 = 
                ReplaceAll[
                 FE`parameterLocatorDependencies$$31, ("mScalarArray" -> 
                   Blank[]) :> ("mScalarArray" -> FE`rawArrayOfMasses$$31)]; 
               FE`bRefreshMatrix$$31 = True; 
               FE`tick$$31 = Not[FE`tick$$31])& ], {0.25, 
               Dynamic[FE`mMax$$31]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              
              NumberForm[$CellContext`massValue, {2, 
               1}]]}]}, $CellContext`massValue = 
         13.100000000000001`, $CellContext`m2Setter := {
           Text["coupling to neighbouring: "], 
           Dynamic[
            If[FE`rawNumberOfMasses$$31 > 1, 
             SetterBar[
              Dynamic[
              FE`m2Sel$$31, (FE`m2Sel$$31 = #; 
               FE`k1$$31 = $CellContext`kArraySelect[1]; 
               FE`k2$$31 = $CellContext`kArraySelect[2]; 
               FE`k3$$31 = $CellContext`kArraySelect[3]; 
               FE`k4$$31 = $CellContext`kArraySelect[4]; 
               FE`tick$$31 = Not[FE`tick$$31])& ], 
              Map[# -> $CellContext`massLabel[#]& , 
               Range[FE`rawNumberOfMasses$$31]]], 
             $CellContext`massLabel[1]]]}, $CellContext`km1 := {
           Row[{
             Text["horizontal: "], 
             $CellContext`kLable[1], " || ", 
             OverVector["a"], " "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k1$$31, (
               FE`k1$$31 = $CellContext`checkAgainstRange[#, FE`kMin$$31, 
                  FE`kMin$$31, FE`kMax$$31]; 
               FE`kArray$$31 = $CellContext`alterKArrayElements[1, FE`k1$$31]; 
               FE`couplingData$$31 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$31 = True; 
               FE`tick$$31 = Not[FE`tick$$31])& ], {
               Dynamic[FE`kMin$$31], 
               Dynamic[FE`kMax$$31]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[FE`k1$$31, {3, 2}]]}]}, $CellContext`kLable = Style[
           $CellContext`indexLabel["k", #], FontColor -> 
           Part[FE`springColors$$31, #]]& , FE`springColors$$31 = {
           RGBColor[2/3, 0.33333333333333337`, 0], 
           RGBColor[0, 2/3, 0], 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
           RGBColor[0, 2/3, 2/3], 
           RGBColor[2/3, 2/3, 0]}, FE`kMin$$31 = 0.05, FE`kMax$$31 = 
         1, $CellContext`alterKArrayElements[
           Pattern[$CellContext`ni$, 
            Blank[Integer]], 
           Pattern[$CellContext`v$, 
            Blank[]]] := 
         ReplaceAll[FE`kArray$$31, {({FE`m1Sel$$31, FE`m2Sel$$31, 
               Part[FE`nArray$$31, $CellContext`ni$]} -> 
             Blank[]) :> ({FE`m1Sel$$31, FE`m2Sel$$31, 
               Part[FE`nArray$$31, $CellContext`ni$]} -> $CellContext`v$), ({
              FE`m1Sel$$31, FE`m2Sel$$31, -
               Part[FE`nArray$$31, $CellContext`ni$]} -> 
             Blank[]) :> ({
              FE`m1Sel$$31, FE`m2Sel$$31, -
               Part[FE`nArray$$31, $CellContext`ni$]} -> $CellContext`v$)}], 
         Attributes[$CellContext`v$] = {Temporary}, $CellContext`km2 := {
           Row[{
             Text["vertical: "], 
             $CellContext`kLable[2], " || ", 
             OverVector["b"], " "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k2$$31, (
               FE`k2$$31 = $CellContext`checkAgainstRange[#, FE`kMin$$31, 
                  FE`kMin$$31, FE`kMax$$31]; 
               FE`kArray$$31 = $CellContext`alterKArrayElements[2, FE`k2$$31]; 
               FE`couplingData$$31 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$31 = True; 
               FE`tick$$31 = Not[FE`tick$$31])& ], {
               Dynamic[FE`kMin$$31], 
               Dynamic[FE`kMax$$31]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[FE`k2$$31, {3, 2}]]}]}, $CellContext`km3 := {
           Row[{
             Text["diagonal: "], 
             $CellContext`kLable[3], " || (", 
             OverVector["b"], " + ", 
             OverVector["a"], ") "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k3$$31, (
               FE`k3$$31 = $CellContext`checkAgainstRange[#, FE`kMin$$31, 
                  FE`kMin$$31, FE`kMax$$31]; 
               FE`kArray$$31 = $CellContext`alterKArrayElements[3, FE`k3$$31]; 
               FE`couplingData$$31 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$31 = True; 
               FE`tick$$31 = Not[FE`tick$$31])& ], {
               Dynamic[FE`kMin$$31], 
               Dynamic[FE`kMax$$31]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[FE`k3$$31, {3, 2}]]}]}, $CellContext`km4 := {
           Row[{
             Text["diagonal: "], 
             $CellContext`kLable[4], " || (", 
             OverVector["b"], " - ", 
             OverVector["a"], ") "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k4$$31, (
               FE`k4$$31 = $CellContext`checkAgainstRange[#, FE`kMin$$31, 
                  FE`kMin$$31, FE`kMax$$31]; 
               FE`kArray$$31 = $CellContext`alterKArrayElements[4, FE`k4$$31]; 
               FE`couplingData$$31 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$31 = True; 
               FE`tick$$31 = Not[FE`tick$$31])& ], {
               Dynamic[FE`kMin$$31], 
               Dynamic[FE`kMax$$31]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[FE`k4$$31, {3, 2}]]}]}, $CellContext`km5a := {
           Row[{
             Text["coupling from "], 
             Dynamic[
              $CellContext`massLabel[FE`m1Sel$$31]], 
             Text[" to: "]}], 
           Dynamic[
            If[FE`rawNumberOfMasses$$31 > 2, 
             SetterBar[
              Dynamic[
              FE`moSel$$31, (FE`moSel$$31 = #; 
               FE`k5$$31 = $CellContext`kArrayOriginSelect; 
               FE`tick$$31 = Not[FE`tick$$31])& ], 
              Map[# -> $CellContext`massLabel[#]& , 
               DeleteCases[
                Range[FE`rawNumberOfMasses$$31], FE`m1Sel$$31]]], 
             Dynamic[
              $CellContext`massLabel[
               First[
                Delete[
                 Range[2], FE`m1Sel$$31]]]]]]}, $CellContext`km5b := {
           Row[{
             $CellContext`kLable[5], ": "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k5$$31, (
               FE`k5$$31 = $CellContext`checkAgainstRange[#, FE`kMin$$31, 
                  FE`kMin$$31, FE`kMax$$31]; 
               FE`kArray$$31 = $CellContext`alterKarrayOriginElement[
                 FE`k5$$31]; 
               FE`couplingData$$31 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$31 = True; 
               FE`tick$$31 = Not[FE`tick$$31])& ], {
               Dynamic[FE`kMin$$31], 
               Dynamic[FE`kMax$$31]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[
              FE`k5$$31, {3, 2}]]}]}, $CellContext`alterKarrayOriginElement[
           Pattern[$CellContext`v$, 
            Blank[]]] := 
         Module[{$CellContext`m1oSet$}, $CellContext`m1oSet$ = Append[
              Sort[{FE`m1Sel$$31, FE`moSel$$31}], {0, 0}]; 
           ReplaceAll[
            FE`kArray$$31, ($CellContext`m1oSet$ -> 
              Blank[]) :> ($CellContext`m1oSet$ -> $CellContext`v$)]], 
         Attributes[$CellContext`m1oSet$] = {Temporary}}; {$CellContext`u$$ = 
          Flatten[{$CellContext`locDefault$$, $CellContext`mLocDefault$$}, 
            1]; $CellContext`checkAgainstRange[
            Pattern[$CellContext`v, 
             Blank[]], 
            Pattern[$CellContext`default, 
             Blank[]], 
            Pattern[$CellContext`lowerLimit, 
             Blank[]], 
            Pattern[$CellContext`upperLimit, 
             Blank[]]] := 
          Module[{$CellContext`result}, $CellContext`result = If[
               
               NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
             If[$CellContext`result < $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
             If[$CellContext`result > $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result]; \
$CellContext`springColorsByN$$ = DeleteDuplicates[
            Flatten[
             Table[$CellContext`s Part[
                 Append[$CellContext`nArray$$, {0, 0}], $CellContext`n] -> 
              Part[$CellContext`springColors$$, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 5}], 
             1]]; $CellContext`springPoints[
            Pattern[$CellContext`a12, 
             Blank[List]], 
            Optional[
             Pattern[$CellContext`n, 
              Blank[Integer]], 8], 
            Optional[
             Pattern[$CellContext`h, 
              Blank[]], 0.05], 
            Optional[
             Pattern[$CellContext`f, 
              Blank[]], 0.1]] := 
          Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
             Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
             Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
               Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
             Dot[$CellContext`r, {$CellContext`n1, 0}]; {
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                    2 $CellContext`f) $CellContext`nd, $CellContext`h 
                  Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 
                0, 1, 0.01}], 
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                    2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 
                0.01}]}]; $CellContext`indexLabel = Subscript[
            Style[#, Italic], #2]& ; $CellContext`kLable = Style[
            $CellContext`indexLabel["k", #], FontColor -> 
            Part[$CellContext`springColors$$, #]]& ; $CellContext`massColors := 
          Part[
            Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
            1]& ; $CellContext`massLabel := Style[
            $CellContext`indexLabel["m", #], 
            $CellContext`massColors[#]]& ; $CellContext`calcLineTable[
            Pattern[$CellContext`n, 
             Blank[List]], 
            Pattern[$CellContext`b, 
             Blank[List]], 
            Pattern[$CellContext`i, 
             Blank[List]]] := 
          Module[{$CellContext`first, $CellContext`second}, \
{$CellContext`first, $CellContext`second} = $CellContext`i; Table[
              
              Line[{(-Part[$CellContext`n, $CellContext`first]) 
                 Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                 Part[$CellContext`b, $CellContext`second], 
                Part[$CellContext`n, $CellContext`first] 
                 Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                 Part[$CellContext`b, $CellContext`second]}], \
{$CellContext`j, -Part[$CellContext`n, $CellContext`second], 
               
               Part[$CellContext`n, $CellContext`second]}]]; \
$CellContext`calcReciprocalBasis[
            Pattern[$CellContext`loc, 
             Blank[List]]] := Inverse[
            Transpose[$CellContext`loc]]; $CellContext`pointsTable[
            Pattern[$CellContext`mPosFirstCell, 
             Blank[List]], 
            Pattern[$CellContext`latticeBasis, 
             Blank[List]], 
            Pattern[$CellContext`numberLatticeLinesToDisplay, 
             Blank[List]]] := 
          Table[$CellContext`mPosFirstCell + 
            Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
             
             Part[$CellContext`numberLatticeLinesToDisplay, 
              1]}, {$CellContext`j, -
             Part[$CellContext`numberLatticeLinesToDisplay, 2], 
             
             Part[$CellContext`numberLatticeLinesToDisplay, 
              2]}]; $CellContext`nMassesFromU := First[
             Dimensions[$CellContext`u$$]] - 2; $CellContext`adjustedmoSel := 
          If[$CellContext`rawNumberOfMasses$$ > 2, 
            If[$CellContext`moSel$$ == $CellContext`m1Sel$$, 
             First[
              DeleteCases[
               
               Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]], $CellContext`moSel$$], 
            First[
             Delete[
              Range[
              2], $CellContext`m1Sel$$]]]; \
$CellContext`constructKArrayElements[
            Pattern[$CellContext`i$, 
             Blank[Integer]], 
            Pattern[$CellContext`j$, 
             Blank[Integer]]] := 
          Module[{$CellContext`a$}, $CellContext`a$ = Flatten[
               
               Table[{$CellContext`i$, $CellContext`j$, $CellContext`s 
                  Part[$CellContext`nArray$$, $CellContext`n]} -> 
                Part[$CellContext`kDefaults$$, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
            If[$CellContext`i$ < $CellContext`j$, 
              
              Append[$CellContext`a$, {$CellContext`i$, $CellContext`j$, {0, 
                 0}} -> Part[$CellContext`kDefaults$$, 
                 5]], $CellContext`a$]]; $CellContext`constructKArray[
            Pattern[$CellContext`r, 
             Blank[Integer]]] := Flatten[
            Table[
             $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2]; $CellContext`alterKArrayElements[
            Pattern[$CellContext`ni$, 
             Blank[Integer]], 
            Pattern[$CellContext`v$, 
             Blank[]]] := 
          ReplaceAll[$CellContext`kArray$$, {({$CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                Part[$CellContext`nArray$$, $CellContext`ni$]} -> 
              Blank[]) :> ({$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                
                Part[$CellContext`nArray$$, $CellContext`ni$]} -> \
$CellContext`v$), ({$CellContext`m1Sel$$, $CellContext`m2Sel$$, -
                Part[$CellContext`nArray$$, $CellContext`ni$]} -> 
              Blank[]) :> ({$CellContext`m1Sel$$, $CellContext`m2Sel$$, -
                Part[$CellContext`nArray$$, $CellContext`ni$]} -> \
$CellContext`v$)}]; $CellContext`alterKarrayOriginElement[
            Pattern[$CellContext`v$, 
             Blank[]]] := 
          Module[{$CellContext`m1oSet$}, $CellContext`m1oSet$ = Append[
               Sort[{$CellContext`m1Sel$$, $CellContext`moSel$$}], {0, 0}]; 
            ReplaceAll[$CellContext`kArray$$, ($CellContext`m1oSet$ -> 
               Blank[]) :> ($CellContext`m1oSet$ -> $CellContext`v$)]]; \
$CellContext`kArraySelect[
            Pattern[$CellContext`ni$, 
             Blank[Integer]]] := 
          ReplaceAll[{$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
             
             Part[$CellContext`nArray$$, $CellContext`ni$]}, \
$CellContext`kArray$$]; $CellContext`kArrayOriginSelect := ReplaceAll[
            Append[
             Sort[{$CellContext`m1Sel$$, $CellContext`moSel$$}], {0, 
             0}], $CellContext`kArray$$]; $CellContext`growKarray[
            Pattern[$CellContext`nmNew$, 
             Blank[Integer]]] := 
          Module[{$CellContext`k2$}, $CellContext`k2$ = Flatten[
               Map[$CellContext`constructKArrayElements[
                 Part[#, 1], 
                 Part[#, 2]]& , 
                Select[
                 Flatten[
                  
                  Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew$}, {$CellContext`j, $CellContext`nmNew$}], 1], 
                 Max[#] == $CellContext`nmNew$& ]], 2]; 
            Flatten[{$CellContext`kArray$$, $CellContext`k2$}, 
              1]]; $CellContext`resetLatticeVectorsIfAngleTooSmall[
            Pattern[$CellContext`minAngle$, 
             Blank[]]] := Module[{$CellContext`t$}, $CellContext`t$ = Abs[
               ArcCos[
                Dot[
                 Normalize[
                  Part[$CellContext`u$$, 1]], 
                 Normalize[
                  Part[$CellContext`u$$, 2]]]]]; $CellContext`t$ = 
             If[$CellContext`t$ > Pi/2, 
               Pi - $CellContext`t$, $CellContext`t$]; 
            If[$CellContext`t$ < $CellContext`minAngle$, \
$CellContext`locDefault$$, {
               Part[$CellContext`u$$, 1], 
               Part[$CellContext`u$$, 2]}]]; $CellContext`locDependent := 
          Module[{$CellContext`m$, $CellContext`latticeBasis$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`reciprocalBasis$, \
$CellContext`mObliqueComponents$, $CellContext`mPosFirstCell$, \
$CellContext`reciprocalNorms$}, $CellContext`latticeBasis$ = 
             Take[$CellContext`u$$, 2]; $CellContext`m$ = 
             Drop[$CellContext`u$$, 
               2]; $CellContext`numberLatticeLinesToDisplay$ = Map[Ceiling[
                Abs[$CellContext`windowHalfWidth$$/Part[
                  Part[$CellContext`latticeBasis$, #], #]]]& , 
               Range[
               2]]; $CellContext`reciprocalBasis$ = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis$]; \
$CellContext`reciprocalNorms$ = Map[Norm[
                Part[$CellContext`reciprocalBasis$, #]]& , 
               Range[2]]; $CellContext`mObliqueComponents$ = Table[
               Dot[
                Part[$CellContext`m$, $CellContext`i], 
                
                Part[$CellContext`reciprocalBasis$, $CellContext`j]], \
{$CellContext`i, $CellContext`rawNumberOfMasses$$}, {$CellContext`j, 
                2}]; $CellContext`mPosFirstCell$ = 
             Map[Part[$CellContext`m$, #] - Dot[
                Floor[
                 
                 Part[$CellContext`mObliqueComponents$, #]], \
$CellContext`latticeBasis$]& , 
               Range[$CellContext`rawNumberOfMasses$$]]; {
             "mScalarArray" -> $CellContext`rawArrayOfMasses$$, 
              "numberOfMasses" -> $CellContext`rawNumberOfMasses$$, 
              "latticeBasis" -> $CellContext`latticeBasis$, "latticeNorms" -> 
              Map[Norm[
                 Part[$CellContext`latticeBasis$, #]]& , 
                Range[2]], "latticeUnitVectors" -> Map[Normalize[
                 Part[$CellContext`latticeBasis$, #]]& , 
                Range[2]], 
              "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay$, 
              "reciprocalBasis" -> $CellContext`reciprocalBasis$, 
              "reciprocalNorms" -> $CellContext`reciprocalNorms$, "qMaxVec" -> 
              2 Pi $CellContext`reciprocalNorms$, 
              "mObliqueComponents" -> $CellContext`mObliqueComponents$, 
              "mPosFirstCell" -> $CellContext`mPosFirstCell$, 
              "pointsDataTable" -> Map[$CellContext`pointsTable[
                 
                 Part[$CellContext`mPosFirstCell$, #], \
$CellContext`latticeBasis$, $CellContext`numberLatticeLinesToDisplay$]& , 
                Range[$CellContext`rawNumberOfMasses$$]], "lineTable" -> 
              Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay$, $CellContext`latticeBasis$, #]& , 
                Permutations[{1, 2}]]}]; $CellContext`projOpU[
            Pattern[$CellContext`v, 
             Blank[List]]] := {{
            Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
             Part[$CellContext`v, 2]}, {
            Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
             Part[$CellContext`v, 2]^2}}; $CellContext`projOp[
            Pattern[$CellContext`v, 
             Blank[List]]] := $CellContext`projOpU[$CellContext`v]/
           Dot[$CellContext`v, $CellContext`v]; \
$CellContext`relativeDifferences[
            Pattern[$CellContext`r, 
             Blank[List]], 
            Pattern[$CellContext`mp, 
             Blank[List]], {
             Pattern[$CellContext`mIndex1, 
              Blank[Integer]], 
             Pattern[$CellContext`mIndex2, 
              Blank[Integer]], 
             Pattern[$CellContext`n, 
              Blank[List]]}] := 
          Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther}, \
$CellContext`pOrigin = 
             Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
             Part[$CellContext`mp, $CellContext`mIndex2] + 
              Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
             Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}]; \
$CellContext`calculateCouplings := 
          Module[{$CellContext`t$, $CellContext`t1$, $CellContext`t2$, \
$CellContext`r$, $CellContext`mp$, $CellContext`numberOfMasses$}, \
{$CellContext`r$, $CellContext`mp$, $CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "latticeBasis", "mPosFirstCell", 
                "numberOfMasses"}, \
$CellContext`parameterLocatorDependencies$$]; $CellContext`t$ = Map[Append[#, 
                $CellContext`relativeDifferences[$CellContext`r$, \
$CellContext`mp$, 
                 First[#]]]& , 
               
               ReplaceAll[$CellContext`kArray$$, Rule -> 
                List]]; $CellContext`t$ = Map[Flatten[{
                 Part[#, 1], {
                  Part[#, 2]}, 
                 Part[#, 3]}, 1]& , $CellContext`t$]; $CellContext`t1$ = Table[
               Sort[
                
                Select[$CellContext`t$, And[
                 Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
                Part[#, 5] < 
                Part[#2, 
                  5]& ], {$CellContext`i, $CellContext`numberOfMasses$}]; \
$CellContext`t2$ = 
             Select[$CellContext`t$, 
               Part[#, 3] == {0, 0}& ]; $CellContext`t2$ = 
             Flatten[{$CellContext`t2$, 
                Map[Flatten[{{
                    Part[#, 2], 
                    Part[#, 1]}, 
                   Drop[#, 2]}, 1]& , $CellContext`t2$]}, 
               1]; $CellContext`t2$ = Table[
               Sort[
                Select[$CellContext`t2$, Part[#, 1] == $CellContext`i& ], 
                Part[#, 5] < 
                Part[#2, 
                  5]& ], {$CellContext`i, $CellContext`numberOfMasses$}]; \
{$CellContext`t2$, $CellContext`t1$}]; $CellContext`plotSprings := 
          Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, \
$CellContext`latticeBasis$ = Take[$CellContext`u$$, 2]; $CellContext`aLoc$ = 
             Part[$CellContext`u$$, 1]; $CellContext`bLoc$ = 
             Part[$CellContext`u$$, 
               2]; {$CellContext`mLoc$, $CellContext`reciprocalBasis$, \
$CellContext`pointsDataTable$, $CellContext`numberLatticeLinesToDisplay$, \
$CellContext`lines$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
                "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
                "numberOfMasses"}, \
$CellContext`parameterLocatorDependencies$$]; $CellContext`pointsList$[
               Pattern[$CellContext`n$, 
                Blank[Integer]]] := {
               $CellContext`massColors[$CellContext`n$], Null, 
               PointSize[
                
                Sqrt[(Part[$CellContext`mScalarArray$, \
$CellContext`n$]/$CellContext`mMax$$)/500]], 
               Map[Point[#]& , 
                Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
               Text[
                $CellContext`massLabel[$CellContext`n$], 
                Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`textDisOffset$$]}; $CellContext`cOrigin$ = Select[
               Part[
                Part[$CellContext`couplingData$$, 1], $CellContext`m1Sel$$], 
               Take[#, 
                 2] == {$CellContext`m1Sel$$, $CellContext`moSel$$}& ]; \
$CellContext`cN$ = Select[
               Part[
                Part[$CellContext`couplingData$$, 2], $CellContext`m1Sel$$], 
               Take[#, 
                 2] == {$CellContext`m1Sel$$, $CellContext`m2Sel$$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
                $CellContext`springPoints[
                 Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
                ReplaceAll[
                  
                  Part[#, 
                   3], $CellContext`springColorsByN$$]]& , $CellContext`cN$]; 
            If[$CellContext`numberOfMasses$ > 1, 
              AppendTo[$CellContext`g$, 
               Map[ListLinePlot[
                 $CellContext`springPoints[
                  Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
                 ReplaceAll[
                   
                   Part[#, 
                    3], $CellContext`springColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
               Graphics[
                Flatten[{{$CellContext`lines$, Blue, 
                   Map[Arrow[{{0, 0}, 
                    Part[$CellContext`reciprocalBasis$, #]}]& , 
                    Range[2]], Thick, 
                   Arrowheads[0.05], Red, 
                   Map[Arrow[{{0, 0}, 
                    Part[$CellContext`latticeBasis$, #]}]& , 
                    Range[2]], 
                   Text[
                    OverVector[
                    "a"], $CellContext`aLoc$/
                    2 + $CellContext`textDisOffset$$], 
                   Text[
                    OverVector[
                    "b"], $CellContext`bLoc$/
                    2 + $CellContext`textDisOffset$$]}, 
                  Map[$CellContext`pointsList$[#]& , 
                   Range[$CellContext`numberOfMasses$]]}], 
                PlotRange -> {{(-$CellContext`windowHalfWidth$$)/
                   2, $CellContext`windowHalfWidth$$}, \
{(-$CellContext`windowHalfWidth$$)/2, $CellContext`windowHalfWidth$$}}, 
                ImageSize -> $CellContext`primaryDisplaySize$$], \
$CellContext`g$}]]; $CellContext`couplingLocator := LocatorPane[
            Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                  Dimensions[#]] < 3, 
                
                Flatten[{$CellContext`locDefault$$, \
$CellContext`mLocDefault$$}, 1], 
                If[First[
                   Dimensions[#]] > 7, 
                 Take[#, 7], #]]; 
             Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                First[
                  Dimensions[$CellContext`rawArrayOfMasses$$]]; 
               If[$CellContext`rm$ > $CellContext`nMassesFromU, \
$CellContext`rawArrayOfMasses$$ = 
                 Take[$CellContext`rawArrayOfMasses$$, \
$CellContext`nMassesFromU], 
                 
                 While[$CellContext`rm$ < $CellContext`nMassesFromU, 
                  AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`defaultMass$$]; Increment[$CellContext`rm$]]]; $CellContext`km$ = 
                Max[
                  Part[
                   Part[$CellContext`kArray$$, All, 1], All, 1]]; 
               If[$CellContext`km$ > $CellContext`nMassesFromU, \
$CellContext`kArray$$ = Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    Part[#, 2]}] <= $CellContext`nMassesFromU& ], 
                 
                 While[$CellContext`km$ < $CellContext`nMassesFromU, 
                  Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`growKarray[$CellContext`km$]]]]; 
             Part[$CellContext`u$$, 1] = If[Dot[
                  Part[$CellContext`u$$, 1], 
                  
                  Part[$CellContext`u$$, 
                   1]] < $CellContext`minSquaredDistanceFromOrigin$$, 
                Part[$CellContext`locDefault$$, 1], 
                Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                  Part[$CellContext`u$$, 2], 
                  
                  Part[$CellContext`u$$, 
                   2]] < $CellContext`minSquaredDistanceFromOrigin$$, 
                Part[$CellContext`locDefault$$, 2], 
                Part[$CellContext`u$$, 2]]; {
                Part[$CellContext`u$$, 1], 
                
                Part[$CellContext`u$$, 
                 2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`minAngleBetweenLatticeVectors$$]; \
$CellContext`rawNumberOfMasses$$ = $CellContext`nMassesFromU; \
$CellContext`m1Sel$$ = 
              If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
              If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
              If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel; $CellContext`k1$$ = $CellContext`kArraySelect[
               1]; $CellContext`k2$$ = $CellContext`kArraySelect[
               2]; $CellContext`k3$$ = $CellContext`kArraySelect[
               3]; $CellContext`k4$$ = $CellContext`kArraySelect[
               4]; $CellContext`k5$$ = $CellContext`kArrayOriginSelect; \
$CellContext`parameterLocatorDependencies$$ = $CellContext`locDependent; \
$CellContext`qLoc$$ = 
              ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
               2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
              True; $CellContext`tick$$ = 
              Not[$CellContext`tick$$])& ], $CellContext`plotSprings, 
            LocatorAutoCreate -> True, ContinuousAction -> 
            False]; $CellContext`massSetter := {
            Row[{
              Text["mass: "], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`kArraySelect[
                    1]; $CellContext`k2$$ = $CellContext`kArraySelect[
                    2]; $CellContext`k3$$ = $CellContext`kArraySelect[
                    3]; $CellContext`k4$$ = $CellContext`kArraySelect[
                    4]; $CellContext`moSel$$ = $CellContext`adjustedmoSel; \
$CellContext`k5$$ = $CellContext`kArrayOriginSelect; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]]}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`mMax$$]; 
                Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                 ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], {0.25, 
                Dynamic[$CellContext`mMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               
               NumberForm[$CellContext`massValue, {2, 
                1}]]}]}; $CellContext`m2Setter := {
            Text["coupling to neighbouring: "], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 1, 
              SetterBar[
               
               Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`kArraySelect[
                  1]; $CellContext`k2$$ = $CellContext`kArraySelect[
                  2]; $CellContext`k3$$ = $CellContext`kArraySelect[
                  3]; $CellContext`k4$$ = $CellContext`kArraySelect[
                  4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                Range[$CellContext`rawNumberOfMasses$$]]], 
              $CellContext`massLabel[1]]]}; $CellContext`km1 := {
            Row[{
              Text["horizontal: "], 
              $CellContext`kLable[1], " || ", 
              OverVector["a"], " "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`kMin$$, $CellContext`kMin$$, \
$CellContext`kMax$$]; $CellContext`kArray$$ = \
$CellContext`alterKArrayElements[
                  1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k1$$, {3, 2}]]}]}; $CellContext`km2 := {
            Row[{
              Text["vertical: "], 
              $CellContext`kLable[2], " || ", 
              OverVector["b"], " "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`kMin$$, $CellContext`kMin$$, \
$CellContext`kMax$$]; $CellContext`kArray$$ = \
$CellContext`alterKArrayElements[
                  2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k2$$, {3, 2}]]}]}; $CellContext`km3 := {
            Row[{
              Text["diagonal: "], 
              $CellContext`kLable[3], " || (", 
              OverVector["b"], " + ", 
              OverVector["a"], ") "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`kMin$$, $CellContext`kMin$$, \
$CellContext`kMax$$]; $CellContext`kArray$$ = \
$CellContext`alterKArrayElements[
                  3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k3$$, {3, 2}]]}]}; $CellContext`km4 := {
            Row[{
              Text["diagonal: "], 
              $CellContext`kLable[4], " || (", 
              OverVector["b"], " - ", 
              OverVector["a"], ") "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`kMin$$, $CellContext`kMin$$, \
$CellContext`kMax$$]; $CellContext`kArray$$ = \
$CellContext`alterKArrayElements[
                  
                  4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k4$$, {3, 2}]]}]}; $CellContext`km5a := {
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = $CellContext`kArrayOriginSelect; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}; $CellContext`km5b := {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`kMin$$, $CellContext`kMin$$, \
$CellContext`kMax$$]; $CellContext`kArray$$ = \
$CellContext`alterKarrayOriginElement[$CellContext`k5$$]; \
$CellContext`couplingData$$ = $CellContext`calculateCouplings; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               
               NumberForm[$CellContext`k5$$, {3, 
                2}]]}]}; $CellContext`freqControls := {
            Row[{
              Text["mesh size "], 
              Manipulator[
               
               Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {2,
                30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[$CellContext`meshSize$$]}], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}; $CellContext`dynamicsControls := {
            Row[{
              OverVector["q"], " = ", 
              
              Module[{$CellContext`qm$}, $CellContext`qm$ = 
                ReplaceAll[
                 "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
               Slider2D[
                 
                 Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                 ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
              " 2 \[Pi] ", 
              Dynamic[
               NumberForm[
                MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
            Row[{
              Text["time, normalized to one period:"]}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
               ContinuousAction -> True, Appearance -> "Open"]}, 
             ImageSize -> {200, 60}], 
            Row[{
              Text["oscillation scale factor:"]}], 
            Row[{Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}] " ", 
              Dynamic[
               NumberForm[$CellContext`scale$$, {3, 2}]]}], 
            Text[
             Text["Angular frequency \[Omega](q), selection:"]], 
            Dynamic[
             SetterBar[
              
              Dynamic[$CellContext`omegaIndex$$, ($CellContext`omegaIndex$$ = \
#; $CellContext`bRefreshDynPlot$$ = True; $CellContext`tick$$ = 
                Not[$CellContext`tick$$])& ], 
              Range[
              2 $CellContext`rawNumberOfMasses$$]]]}; \
$CellContext`oneTermOfdynamicsMatrix[{
             Pattern[$CellContext`k, 
              Blank[Integer]], 
             Pattern[$CellContext`j, 
              Blank[Integer]], 
             Pattern[$CellContext`mVec, 
              Blank[List]], 
             Pattern[$CellContext`kS, 
              Blank[]], 
             Blank[], 
             Blank[], 
             Blank[], 
             Pattern[$CellContext`proj, 
              Blank[List]]}, 
            Pattern[$CellContext`r, 
             Blank[List]], 
            Pattern[$CellContext`mk, 
             Blank[]], 
            Pattern[$CellContext`epsilon, 
             Blank[List]], 
            Pattern[$CellContext`mA, 
             Blank[List]]] := $CellContext`kS 
           Dot[$CellContext`proj, 
             Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
             Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
                  Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
              Sqrt[$CellContext`mk 
               Part[$CellContext`mA, $CellContext`j]])]; \
$CellContext`dynamicsMatrix := 
          Module[{$CellContext`cd$, $CellContext`r$, $CellContext`res$, \
$CellContext`epsilon$, $CellContext`m$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$}, $CellContext`cd$ = SplitBy[
               Sort[
                Flatten[$CellContext`couplingData$$, 2]], 
               First]; {$CellContext`r$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "latticeBasis", "mScalarArray", 
                "numberOfMasses"}, \
$CellContext`parameterLocatorDependencies$$]; $CellContext`epsilon$ = 
             Partition[
               IdentityMatrix[2 $CellContext`numberOfMasses$], 
               2]; $CellContext`res$ = Partition[
               Flatten[
                Table[
                 Total[
                  Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r$, 
                    
                    Part[$CellContext`mScalarArray$, $CellContext`i], \
$CellContext`epsilon$, $CellContext`mScalarArray$]& , 
                   
                   Part[$CellContext`cd$, $CellContext`i]]], {$CellContext`i, \
$CellContext`numberOfMasses$}]], 2 $CellContext`numberOfMasses$]; 
            ReplaceAll[$CellContext`res$, $CellContext`qVec -> #]& ]; \
$CellContext`calcDynamics := Map[{
             Sqrt[
              Part[#, 1]], 
             Part[#, 2]}& , 
            Transpose[
             Eigensystem[
              $CellContext`matrix$$[$CellContext`qLoc$$]]]]; \
$CellContext`showDynamics := 
          Module[{$CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`e$, \
$CellContext`omega$, $CellContext`points$, $CellContext`lines$, \
$CellContext`nu$, $CellContext`a$, $CellContext`b$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, {{$CellContext`a$, \
$CellContext`b$}, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "latticeBasis", "pointsDataTable", 
                "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
                "numberOfMasses"}, \
$CellContext`parameterLocatorDependencies$$]; {$CellContext`omega$, \
$CellContext`e$} = 
             Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$]; \
$CellContext`e$ = Partition[$CellContext`e$, 2]; $CellContext`points$ = 
             Table[Part[$CellContext`pointsDataTable$, $CellContext`k] + 
               Table[$CellContext`scale$$ 
                 Re[Part[$CellContext`e$, $CellContext`k] 
                   E^(I (Dot[$CellContext`qLoc$$, $CellContext`a$ \
$CellContext`i + $CellContext`b$ $CellContext`j] - $CellContext`omega$ #))], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay$, 1], 
                  
                  Part[$CellContext`numberLatticeLinesToDisplay$, 
                   1]}, {$CellContext`j, -
                  Part[$CellContext`numberLatticeLinesToDisplay$, 2], 
                  
                  Part[$CellContext`numberLatticeLinesToDisplay$, 
                   2]}]& , {$CellContext`k, $CellContext`numberOfMasses$}]; \
$CellContext`nu$ = 
             2 Pi If[$CellContext`omega$ == 0, 1, 1/$CellContext`omega$]; 
            Show[{
               Table[
                ListPlot[
                 
                 Part[$CellContext`points$, $CellContext`k][$CellContext`nu$ \
#], PlotRange -> {{(-$CellContext`windowHalfWidth$$)/
                    2, $CellContext`windowHalfWidth$$}, \
{(-$CellContext`windowHalfWidth$$)/2, $CellContext`windowHalfWidth$$}}, 
                 ImageSize -> $CellContext`primaryDisplaySize$$, PlotStyle -> 
                 Directive[
                   PointSize[
                    
                    Sqrt[(Part[$CellContext`mScalarArray$, \
$CellContext`k]/$CellContext`mMax$$)/350]], 
                   $CellContext`massColors[$CellContext`k]]], \
{$CellContext`k, $CellContext`numberOfMasses$}], 
               
               Graphics[{$CellContext`lines$}]}]& ]; \
$CellContext`frequencyPlotCalc := 
          Module[{$CellContext`eigTable2D$, $CellContext`eigTable1D$, \
$CellContext`qMax$, $CellContext`omegaPointList2D$, \
$CellContext`omegaPointList1D$, $CellContext`range$, \
$CellContext`numberOfMasses$}, {$CellContext`qMax$, \
$CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "qMaxVec", 
                "numberOfMasses"}, \
$CellContext`parameterLocatorDependencies$$]; $CellContext`eigTable2D$ = 
             Flatten[
               Re[
                Table[{{$CellContext`qx, $CellContext`qy}, 
                  Eigenvalues[
                   N[
                    $CellContext`matrix$$[{$CellContext`qx, \
$CellContext`qy}]]]}, {$CellContext`qx, (-Part[$CellContext`qMax$, 1])/2, 
                  Part[$CellContext`qMax$, 1]/2, 
                  Part[$CellContext`qMax$, 
                    1]/$CellContext`meshSize$$}, {$CellContext`qy, (-
                   Part[$CellContext`qMax$, 2])/2, 
                  Part[$CellContext`qMax$, 2]/2, 
                  Part[$CellContext`qMax$, 2]/$CellContext`meshSize$$}]], 
               1]; $CellContext`omegaPointList2D$[
               Pattern[$CellContext`nn$, 
                Blank[]]] := Map[Flatten[{
                 Part[#, 1], 
                 Part[
                  Sqrt[
                   
                   Part[#, 
                    2]], $CellContext`nn$]}]& , $CellContext`eigTable2D$]; \
$CellContext`range$ = Range[2 $CellContext`numberOfMasses$]; ListPlot3D[
              Map[$CellContext`omegaPointList2D$[#]& , $CellContext`range$], 
              PlotRange -> Full, 
              ImageSize -> $CellContext`primaryDisplaySize$$, 
              AxesLabel -> {
               "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
                "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]]; \
$CellContext`showFreqPlot := 
          Module[{$CellContext`aa$, $CellContext`bb$}, {$CellContext`aa$, \
$CellContext`bb$} = $CellContext`qPlaneLoc$$; Show[{$CellContext`freqPlot$$, 
               Graphics3D[
                Polygon[{{
                   Part[$CellContext`aa$, 1], 
                   Part[$CellContext`aa$, 2], 0}, {
                   Part[$CellContext`bb$, 1], 
                   Part[$CellContext`bb$, 2], 0}, {
                   Part[$CellContext`bb$, 1], 
                   Part[$CellContext`bb$, 2], 23}, {
                   Part[$CellContext`aa$, 1], 
                   Part[$CellContext`aa$, 2], 
                   23}}]]}]]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = $CellContext`growKarray[$CellContext`n$]; 
             Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix; $CellContext`dynamics$$ = \
$CellContext`calcDynamics; $CellContext`dynPlot$$ = $CellContext`showDynamics; \
$CellContext`freqPlot$$ = $CellContext`frequencyPlotCalc; Null}}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.600991920019863*^9, 3.6009919670395527`*^9}, {
   3.6009920245298405`*^9, 3.6009920501333055`*^9}, 3.60099313594541*^9, {
   3.600993187449356*^9, 3.600993239845353*^9}, {3.6009932797776365`*^9, 
   3.6009933046760607`*^9}, {3.6012440341096554`*^9, 3.6012440721578317`*^9}, 
   3.6012447781242104`*^9, {3.6012448176024685`*^9, 3.6012448561326723`*^9}, 
   3.6012449730663605`*^9, {3.6012450799064713`*^9, 3.601245088751977*^9}, {
   3.601245122802925*^9, 3.6012451299813356`*^9}, {3.6012451718047276`*^9, 
   3.601245397972664*^9}, {3.6012467859190493`*^9, 3.6012468229691687`*^9}, {
   3.601246896213358*^9, 3.6012470488980913`*^9}, {3.6012470802998877`*^9, 
   3.601247087356291*^9}, {3.6012476034298086`*^9, 3.601247625026044*^9}, {
   3.6012477383525257`*^9, 3.6012477482580924`*^9}, {3.6012479226070642`*^9, 
   3.6012479616512976`*^9}, {3.60124799980648*^9, 3.6012480000074916`*^9}},
 CellID->186947484]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "DetailsSection"],

Cell[TextData[{
 "The positions of masses within a periodic array of cells, can be described \
by summing the lattice vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["r", "\[RightVector]"], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], " ", "=", " ", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["n", "1"], ",", " ", 
        SubscriptBox["n", "2"]}], ")"}]}]], " ", "=", " ", 
    RowBox[{
     RowBox[{
      SubscriptBox["n", "1"], 
      OverscriptBox["a", "\[RightVector]"]}], " ", "+", " ", 
     RowBox[{
      SubscriptBox["n", 
       RowBox[{"2", " "}]], 
      OverscriptBox["b", "\[RightVector]"]}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", representing the origin of each of the lattice cell, and a relative \
vector to the position of each of the masses.",
 " ",
 "With ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 " representing the equilibrium position of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 ", the position of that mass is ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 "+ ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.6008874666091995`*^9, 3.600887466629201*^9}, 
   3.6012090394184523`*^9},
 CellID->143536934],

Cell[TextData[{
 "Let ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["a", "\[RightVector]"], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], "=", " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["r", "\[RightVector]"], 
      OverscriptBox["n", "\[RightVector]"]], "+", 
     SubscriptBox[
      OverscriptBox["p", "\[RightVector]"], "k"], " ", "-", " ", 
     SubscriptBox[
      OverscriptBox["r", "\[RightVector]"], 
      OverscriptBox["m", "\[RightVector]"]], "-", 
     SubscriptBox[
      OverscriptBox["p", "\[RightVector]"], "j"]}]}], TraditionalForm]], 
  "InlineMath"],
 ", with direction ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["a", "^"], 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", represent the equilibrium separation of the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 " from the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["j", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["m", "\[RightVector]"]], TraditionalForm]]],
 ".",
 " ",
 "If the harmonic coupling between these masses has magnitude ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]]],
 ", then the system of equations describing the vector displacement ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["u", "\[RightVector]"], 
    RowBox[{"n", ",", " ", "k", " "}]], TraditionalForm]]],
 " for the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in unit cell ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["n", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " from the equilibrium position is given by"
}], "DetailNotes",
 CellChangeTimes->{{3.6008874666091995`*^9, 3.600887467295239*^9}, {
  3.6012090498004904`*^9, 3.601209051237634*^9}},
 CellID->185095190],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubscriptBox["m", "k"], " ", 
    SubscriptBox[
     OverscriptBox[
      OverscriptBox["u", "\[RightVector]"], ".."], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}]]}], "=", " ", 
   RowBox[{"-", 
    RowBox[{
     UnderscriptBox["\[Sum]", 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", 
       RowBox[{"k", " ", "\[NotEqual]", " ", 
        OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
     RowBox[{
      SubscriptBox["K", 
       RowBox[{
        OverscriptBox["n", "\[RightVector]"], ",", 
        RowBox[{"k", ";", 
         OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
      SubscriptBox["Proj", 
       SubscriptBox[
        OverscriptBox["a", "^"], 
        RowBox[{
         OverscriptBox["n", "\[RightVector]"], ",", 
         RowBox[{"k", ";", 
          OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox[
         OverscriptBox["u", "\[RightVector]"], 
         RowBox[{
          OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}]], "-", " ", 
        SubscriptBox[
         OverscriptBox["u", "\[RightVector]"], 
         RowBox[{
          OverscriptBox["m", "\[RightVector]"], ",", " ", "j"}]]}], ")"}], 
      " "}]}]}]}], TraditionalForm]]]], "DetailNotes",
 CellChangeTimes->{{3.6008875035133104`*^9, 3.6008875050703993`*^9}},
 CellID->413013362],

Cell[TextData[{
 "In general, we have one such equation for each ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}], TraditionalForm]]],
 " pair.",
 " ",
 "A trial solution of the form: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox[
      OverscriptBox["u", "\[RightVector]"], 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", " ", "k", " "}]], "(", "t", 
     ")"}], "=", " ", 
    RowBox[{
     FractionBox[
      RowBox[{
       SubscriptBox[
        OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
       OverscriptBox["q", "\[RightVector]"], ")"}], 
      SqrtBox[
       SubscriptBox["m", "k"]]], " ", 
     SuperscriptBox["e", 
      RowBox[{"I", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          SubscriptBox[
           OverscriptBox["r", "\[RightVector]"], 
           OverscriptBox["n", "\[RightVector]"]], ".", " ", 
          OverscriptBox["q", "\[RightVector]"]}], " ", "-", " ", 
         RowBox[{"\[Omega]", " ", "t"}]}], ")"}]}]]}]}], TraditionalForm]]],
 " can be used to decouple this system, resulting in a single equation for \
each ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass of the form"
}], "DetailNotes",
 CellChangeTimes->{3.601209052017712*^9},
 CellID->160232404],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SuperscriptBox["\[Omega]", "2"], " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
     OverscriptBox["q", "\[RightVector]"], ")"}]}], " ", "=", " ", 
   RowBox[{
    UnderscriptBox["\[Sum]", 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", 
      RowBox[{"k", " ", "\[NotEqual]", " ", 
       OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
    RowBox[{
     SubscriptBox["K", 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", 
       RowBox[{"k", ";", 
        OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
     SubscriptBox["Proj", 
      SubscriptBox[
       OverscriptBox["a", "^"], 
       RowBox[{
        OverscriptBox["n", "\[RightVector]"], ",", 
        RowBox[{"k", ";", 
         OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        RowBox[{
         SubscriptBox[
          OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
         OverscriptBox["q", "\[RightVector]"], ")"}], 
        SubscriptBox["m", "k"]], "-", " ", 
       RowBox[{
        FractionBox[
         RowBox[{
          SubscriptBox[
           OverscriptBox["\[Epsilon]", "\[RightVector]"], "j"], "(", 
          OverscriptBox["q", "\[RightVector]"], ")"}], 
         SqrtBox[
          RowBox[{
           SubscriptBox["m", "k"], 
           SubscriptBox["m", "j"]}]]], 
        SuperscriptBox["e", 
         RowBox[{"I", " ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SubscriptBox[
              OverscriptBox["r", "\[RightVector]"], 
              OverscriptBox["m", "\[RightVector]"]], " ", "-", " ", 
             SubscriptBox[
              OverscriptBox["r", "\[RightVector]"], 
              OverscriptBox["n", "\[RightVector]"]]}], ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}]}]]}]}], ")"}]}]}]}], 
  TraditionalForm]]]], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.5980567961741514`*^9}, {
  3.5991430414266324`*^9, 3.5991431578722925`*^9}, {3.5991432045039597`*^9, 
  3.5991434204693127`*^9}, {3.599995184437109*^9, 3.599995299044664*^9}, {
  3.5999955623567247`*^9, 3.59999570266675*^9}, {3.599995845419915*^9, 
  3.599996134802467*^9}, {3.5999964591490183`*^9, 3.599996636408157*^9}, {
  3.6000782740315385`*^9, 3.6000782764963427`*^9}, {3.6000800168821993`*^9, 
  3.600080195362113*^9}, {3.6000802877454753`*^9, 3.6000802964814906`*^9}, {
  3.600819379450795*^9, 3.6008194857548757`*^9}, {3.6008195456733027`*^9, 
  3.6008197257836046`*^9}, {3.600819776466503*^9, 3.6008198064982214`*^9}, {
  3.600819885519741*^9, 3.6008199013896484`*^9}, {3.6008233445915885`*^9, 
  3.6008233557062244`*^9}, {3.600823461634283*^9, 3.6008234639174137`*^9}},
 CellID->323301769],

Cell[TextData[{
 "This describes all the steady state lattice vibrations, the normal modes, \
that can be modelled by the trial solution. Here ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " is a vector in reciprocal space, effectively parameterizing the angular \
velocity ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", " ", "=", " ", 
    RowBox[{"\[Omega]", "(", 
     OverscriptBox["q", "\[RightVector]"], ")"}]}], TraditionalForm]], 
  "InlineMath"],
 ". The vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["\[Epsilon]", "\[RightVector]"], "(", "q", ")"}], " "}], 
   TraditionalForm]]],
 "is an eigenvector of the equations of motion of the system for this assumed \
solution, where ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Omega]", "2"], TraditionalForm]], "InlineMath"],
 " are the eigenvalues of this system.",
 " ",
 "For such a one atom basis, there are two such ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Omega]", "2"], TraditionalForm]], "InlineMath"],
 " eigenvalues per ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " point, each with a different characteristic motion."
}], "DetailNotes",
 CellChangeTimes->{{3.6008875562233257`*^9, 3.600887556236326*^9}, {
  3.6012090526877794`*^9, 3.6012090538738976`*^9}},
 CellID->72937650],

Cell[TextData[{
 "The rank of the resulting eigenvalue problem depends on the number of \
masses per unit cell, but the complexity of the matrix expression depends on \
the number of neighboring interactions that are considered.",
 " ",
 "For example, given lattice vectors ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], ",", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", diagonals ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["r", "\[RightVector]"], "=", 
     RowBox[{
      OverscriptBox["a", "\[RightVector]"], " ", "+", " ", 
      OverscriptBox["b", "\[RightVector]"]}]}], ",", " ", 
    RowBox[{
     OverscriptBox["s", "\[RightVector]"], "=", 
     RowBox[{
      OverscriptBox["a", "\[RightVector]"], " ", "-", " ", 
      OverscriptBox["b", "\[RightVector]"], " "}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", and a one atom basis, where each unit cell contains a single mass coupled \
with harmonic oscillator forces between only nearest neighbors, the normal \
mode solutions follow from the solution of the eigenvalue problem"
}], "DetailNotes",
 CellChangeTimes->{{3.6008875562233257`*^9, 3.600887556623348*^9}, {
   3.6008880360077677`*^9, 3.600888037934878*^9}, 3.601209054354946*^9},
 CellID->69846009],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          SuperscriptBox["\[Omega]", "2"], "0"},
         {"0", 
          SuperscriptBox["\[Omega]", "2"]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], " ", 
     OverscriptBox["\[Epsilon]", "\[RightVector]"]}], " ", "=", " ", 
    RowBox[{
     FractionBox["4", "m"], 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{
        SubscriptBox["k", 
         RowBox[{"1", " "}]], 
        OverscriptBox["a", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["a", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           OverscriptBox["a", "\[RightVector]"], " ", ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", " ", 
       RowBox[{
        SubscriptBox["k", 
         RowBox[{"2", " "}]], 
        OverscriptBox["b", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["b", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           OverscriptBox["b", "\[RightVector]"], " ", ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", " ", 
       RowBox[{
        SubscriptBox["k", "3"], 
        OverscriptBox["r", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["r", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", " ", 
            RowBox[{
             OverscriptBox["b", "\[RightVector]"], " ", "+", " ", 
             OverscriptBox["a", "\[RightVector]"]}], " ", ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", " ", 
       RowBox[{
        SubscriptBox["k", "4"], 
        OverscriptBox["s", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["s", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", " ", 
            RowBox[{
             OverscriptBox["b", "\[RightVector]"], " ", "-", " ", 
             OverscriptBox["a", "\[RightVector]"]}], " ", ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}]}],
       ")"}], 
     OverscriptBox["\[Epsilon]", "\[RightVector]"]}]}], TraditionalForm]], 
  "InlineMath"],
 "   ",
 " "
}], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.598056894559779*^9}, {
   3.598056950150959*^9, 3.5980569832608523`*^9}, {3.598057031767627*^9, 
   3.598057031774627*^9}, {3.598057330464711*^9, 3.598057330604719*^9}, {
   3.5980584907700768`*^9, 3.5980584911520987`*^9}, {3.5991428674046793`*^9, 
   3.5991429352825613`*^9}, 3.5991434894172564`*^9, {3.599143745937928*^9, 
   3.599143747597023*^9}, {3.599144339776894*^9, 3.599144393338958*^9}, {
   3.5999961526324863`*^9, 3.599996166069255*^9}, {3.6000802839234686`*^9, 
   3.6000802840794687`*^9}, {3.600823510848098*^9, 3.6008235167144337`*^9}, {
   3.6012090548449945`*^9, 3.6012090598194923`*^9}, {3.601209092614772*^9, 
   3.6012090941649265`*^9}},
 CellID->508431597],

Cell[TextData[{
 "Controls are provided to display the dynamics associated with each of the \
characteristic angular frequencies ",
 Cell[BoxData[
  FormBox["\[Omega]", TraditionalForm]]],
 ", for given reciprocal vector values ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 "."
}], "DetailNotes",
 CellID->122369289],

Cell[TextData[{
 "Three tabs are provided in this Demonstration. The primary tab provides \
plots the solution for particular ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " point, and one of the angular velocity eigenvalues ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "(", 
    OverscriptBox["q", "\[RightVector]"], ")"}], TraditionalForm]]],
 " for that ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " point. In that tab, selecting run for the time control will animate the \
lattice vibrations. A scaling tab is provided to alter the initial magnitude \
of the eigenvectors, tantamount to picking the initial time boundary value \
constraints.",
 " ",
 "Note that it is possible to select physically unrealistic scaling factors \
that allow for collisions that are not modelled by this system."
}], "DetailNotes",
 CellChangeTimes->{
  3.601208839708481*^9, {3.6012090601785283`*^9, 3.6012090619407043`*^9}},
 CellID->476930990],

Cell[TextData[{
 "A second tab provides the dispersion relation, the dependence of angular \
velocity ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "(", 
    OverscriptBox["q", "\[RightVector]"], ")"}], TraditionalForm]]],
 " on all",
 " ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " points."
}], "DetailNotes",
 CellChangeTimes->{3.601209062576768*^9},
 CellID->450664638],

Cell[TextData[{
 "Finally, a parameters tab provides controls for the spring constants ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", the primitive unit cell lattice vectors ",
 Cell[BoxData[
  RowBox[{
   OverscriptBox["a", "\[RightVector]"], ",", 
   OverscriptBox["b", "\[RightVector]"]}]], "InlineMath"],
 ", and the positions of the masses ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 " within each unit cell of the lattice. Additional mass position locators, \
up to five total, may be added or deleted by Alt-clicking on the lattice cell \
in the desired location. For mass locator removal, it is neccessary to adjust \
one of the other locators so that the remove takes effect.",
 " ",
 "Note that it is possible to select equilibrium mass positions that are too \
proximate, leading to physically unrealistic dynamics."
}], "DetailNotes",
 CellChangeTimes->{{3.600966198344832*^9, 3.600966236435011*^9}, {
  3.6012090632078314`*^9, 3.6012090644089513`*^9}},
 CellID->557416845],

Cell["\<\
Note that the total number of interactions, even when those interactions are \
restricted to just the neighboring lattice cells, increases fast as \
additional masses per cell are added. For example, with three masses per unit \
cell, considering only the neighboring and origin cells, there are 29 \
interactions possible for each mass. To simplify the physical constants \
dialog, which would get unwieldy if methods to choose from all possible \
couplings, distinct \"spring constant\" selection is only available for a \
subset of the possible interactions. This imposes the following respective \
constraints along the \"horizontal\", \"vertical\", \"NE diagonal\", and \"NW \
diagonal\" directions connecting the masses across the cells\
\>", "DetailNotes",
 CellChangeTimes->{{3.6008880438402157`*^9, 3.600888044919277*^9}, {
  3.6012090650310135`*^9, 3.6012090662031307`*^9}},
 CellID->204245605],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"0", ",", "1"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"0", ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", "0"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], ")"}]}], ",", "j"}]]}], 
   TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", "1"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], ")"}]}], ",", "j"}]]}], 
   TraditionalForm]]],
 " ."
}], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.598056894559779*^9}, {
   3.598056950150959*^9, 3.5980569832608523`*^9}, {3.598057031767627*^9, 
   3.598057031774627*^9}, {3.598057330464711*^9, 3.598057446094325*^9}, {
   3.59805756332403*^9, 3.5980575811080475`*^9}, {3.5980576945015335`*^9, 
   3.5980577077462907`*^9}, {3.5980585058849416`*^9, 3.598058539899887*^9}, {
   3.5982726803130836`*^9, 3.598272680323084*^9}, {3.598396857147249*^9, 
   3.598396862212539*^9}, 3.5983970077038608`*^9, {3.5986527341628847`*^9, 
   3.598652736497018*^9}, {3.599142949402369*^9, 3.599142973472746*^9}, {
   3.599144400390361*^9, 3.5991444194934535`*^9}, {3.599144544232588*^9, 
   3.599144772358636*^9}, {3.5991448024383564`*^9, 3.599144812883954*^9}, {
   3.599996318317963*^9, 3.599996379259449*^9}, {3.600076492258809*^9, 
   3.600076523646064*^9}, {3.6000766422374725`*^9, 3.600076689224755*^9}, {
   3.6000767765225077`*^9, 3.6000772270044994`*^9}, {3.6000776433692303`*^9, 
   3.6000781070644455`*^9}, {3.60007816099374*^9, 3.600078188605788*^9}, {
   3.60007853087039*^9, 3.6000790980561857`*^9}, {3.60007913498145*^9, 
   3.6000792378012314`*^9}, {3.6000792689076858`*^9, 3.600079283852512*^9}, {
   3.6000793585454435`*^9, 3.6000793899326982`*^9}, {3.6000794650156302`*^9, 
   3.600079471318041*^9}, {3.600887622755131*^9, 3.6008876400591207`*^9}},
 CellID->325571302],

Cell[TextData[{
 "These are labeled ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "1"], TraditionalForm]], "InlineMath"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "2"], TraditionalForm]], "InlineMath"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "3"], TraditionalForm]], "InlineMath"],
 ", and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "4"], TraditionalForm]], "InlineMath"],
 " in the parameters tab respectively. For example, the first identity above \
is the imposition of an equality constraint on the coupling constants in the \
\"left\" and \"right\" directions separating masses in neighboring \
\"horizontal\" cells (when the lattice is square). Those are the interactions \
directed primarily along the lattice vector directions ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[PlusMinus]", 
    OverscriptBox["a", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 " (primarily since these directions are also adjusted for the positions of \
the masses within the respective cells if different).",
 " ",
 "Similarly, the same coupling constants are used for each of the pairs of \
directions in the that are directed primarily along the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[PlusMinus]", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", \[PlusMinus](",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], " ", "+", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 "), \[PlusMinus](",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], " ", "-", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ") directions separating the lattice cells."
}], "DetailNotes",
 CellChangeTimes->{{3.6008880598061285`*^9, 3.600888064512398*^9}, {
  3.6012090668131914`*^9, 3.6012090675292635`*^9}},
 CellID->64527093],

Cell[TextData[{
 "When there is when there is more than mass per unit cell, distinct coupling \
constants for the intra-cell interactions between the masses within the \
origin unit cell may be selected (i.e. ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["0", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["0", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]]],
 ").",
 " ",
 "These are labeled ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "5"], TraditionalForm]], "InlineMath"],
 " in the parameters tab."
}], "DetailNotes",
 CellChangeTimes->{{3.600887684261649*^9, 3.6008876842696495`*^9}, 
   3.6008880700537148`*^9, 3.6012090681853285`*^9},
 CellID->209290908],

Cell["\<\
General theory describing oscillations around lattice equilibrium points can \
be found in:\
\>", "DetailNotes",
 CellID->30163790],

Cell["\<\
Neil W Ashcroft and N David Mermin. Solid State Physics. Holt, Rinehart and \
Winston, New York, 1976. Chapters 21, 22.\
\>", "DetailNotes",
 CellChangeTimes->{3.601209069027413*^9},
 CellID->213153736]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.600887285796858*^9},
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.600887286596904*^9},
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.6008872914131794`*^9},
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["one atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208909916481*^9}},
 CellID->476564237],

Cell["two atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208912380481*^9}},
 CellID->245358486],

Cell["n atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.6012089151324806`*^9}},
 CellID->584424833],

Cell["lattice vibration", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.6012089173234806`*^9}},
 CellID->103468090],

Cell["phonon", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208919819481*^9}},
 CellID->21953905],

Cell["reciprocal lattice vector", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208922747481*^9}},
 CellID->733906711],

Cell["angular frequency", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208922739481*^9}},
 CellID->200946478]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "RelatedLinksSection"],

Cell[TextData[ButtonBox["Analysis of Lattice Vibrations in Two Dimensions",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/\
AnalysisOfLatticeVibrationsInTwoDimensions/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/\
AnalysisOfLatticeVibrationsInTwoDimensions/"]], "RelatedLinks",
 CellChangeTimes->{{3.598398001761718*^9, 3.5983980017637177`*^9}, {
  3.5983985448847823`*^9, 3.598398544890783*^9}},
 CellID->24498121],

Cell[TextData[ButtonBox["Motion of Atoms in Crystal",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/MotionOfAtomsInCrystal/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/MotionOfAtomsInCrystal/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981123320417`*^9}, {3.5983985249356413`*^9, 
   3.5983985249386415`*^9}},
 CellID->28998832],

Cell[TextData[ButtonBox["Normal Modes in a Periodic Square Lattice",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/NormalModesInAPeriodicSquareLattice/\
"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/NormalModesInAPeriodicSquareLattice/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981127470655`*^9}, {3.5983984299812107`*^9, 
   3.598398430938265*^9}, {3.598398474839776*^9, 3.5983984748437767`*^9}},
 CellID->63968418],

Cell[TextData[ButtonBox["Simple Harmonic Motion for a Spring",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/SimpleHarmonicMotionForASpring/"], 
   None},
 ButtonNote->
  "http://demonstrations.wolfram.com/SimpleHarmonicMotionForASpring/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981127470655`*^9}, {3.5983984299812107`*^9, 
   3.5983984299832106`*^9}, {3.5983985017343144`*^9, 3.598398501741315*^9}},
 CellID->611518950]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell[TextData[{
 "Contributed by: ",
 ButtonBox["Peeter Joot",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Peeter+Joot"], 
    None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Peeter+Joot"]
}], "Author",
 CellChangeTimes->{
  3.600887159561638*^9, {3.601208952954481*^9, 3.601208952959481*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1584, 765},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ResizeImages"->{
  Cell[1834055, 33270, 312, 8, 30, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[1834370, 33280, 719, 17, 30, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "DragLocators"->{
  Cell[1835092, 33299, 381, 12, 30, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "CreateAndDeleteLocators"->{
  Cell[1835476, 33313, 680, 16, 30, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "SliderZoom"->{
  Cell[1836159, 33331, 844, 21, 30, "ControlSuggestions",
   CellTags->"SliderZoom"]},
 "GamepadControls"->{
  Cell[1837006, 33354, 369, 9, 30, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "AutomaticAnimation"->{
  Cell[1837378, 33365, 1464, 31, 30, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[1838845, 33398, 908, 21, 30, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ResizeImages", 1844093, 33550},
 {"RotateAndZoomIn3D", 1844205, 33553},
 {"DragLocators", 1844318, 33556},
 {"CreateAndDeleteLocators", 1844437, 33559},
 {"SliderZoom", 1844554, 33562},
 {"GamepadControls", 1844663, 33565},
 {"AutomaticAnimation", 1844779, 33568},
 {"BookmarkAnimation", 1844899, 33571}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 101, 1, 98, "DemoTitle"],
Cell[683, 25, 33, 0, 365, "InitializationSection"],
Cell[CellGroupData[{
Cell[741, 29, 29, 0, 245, "ManipulateSection"],
Cell[CellGroupData[{
Cell[795, 33, 182443, 3987, 20194, "Input"],
Cell[183241, 4022, 432495, 7867, 532, "Output",
 CellID->246806892]
}, Open  ]],
Cell[615751, 11892, 105, 2, 32, "Input",
 CellID->534877709]
}, Open  ]],
Cell[CellGroupData[{
Cell[615893, 11899, 36, 0, 228, "ManipulateCaptionSection"],
Cell[615932, 11901, 975, 15, 106, "ManipulateCaption"]
}, Open  ]],
Cell[CellGroupData[{
Cell[616944, 11921, 28, 0, 229, "ThumbnailSection"],
Cell[616975, 11923, 587934, 10164, 606, "Output",
 CellID->220187869]
}, Open  ]],
Cell[CellGroupData[{
Cell[1204946, 22092, 28, 0, 189, "SnapshotsSection"],
Cell[1204977, 22094, 601969, 10393, 606, "Output",
 CellID->186947484]
}, Open  ]],
Cell[CellGroupData[{
Cell[1806983, 32492, 26, 0, 452, "DetailsSection"],
Cell[1807012, 32494, 1712, 56, 68, "DetailNotes",
 CellID->143536934],
Cell[1808727, 32552, 2521, 81, 66, "DetailNotes",
 CellID->185095190],
Cell[1811251, 32635, 1466, 42, 50, "DetailNotes",
 CellID->413013362],
Cell[1812720, 32679, 1371, 44, 74, "DetailNotes",
 CellID->160232404],
Cell[1814094, 32725, 2874, 70, 55, "DetailNotes",
 CellID->323301769],
Cell[1816971, 32797, 1415, 40, 74, "DetailNotes",
 CellID->72937650],
Cell[1818389, 32839, 1327, 32, 72, "DetailNotes",
 CellID->69846009],
Cell[1819719, 32873, 3782, 100, 59, "DetailNotes",
 CellID->508431597],
Cell[1823504, 32975, 375, 11, 29, "DetailNotes",
 CellID->122369289],
Cell[1823882, 32988, 1057, 25, 68, "DetailNotes",
 CellID->476930990],
Cell[1824942, 33015, 440, 15, 29, "DetailNotes",
 CellID->450664638],
Cell[1825385, 33032, 1246, 30, 77, "DetailNotes",
 CellID->557416845],
Cell[1826634, 33064, 914, 14, 86, "DetailNotes",
 CellID->204245605],
Cell[1827551, 33080, 3421, 94, 38, "DetailNotes",
 CellID->325571302],
Cell[1830975, 33176, 1908, 51, 93, "DetailNotes",
 CellID->64527093],
Cell[1832886, 33229, 733, 21, 58, "DetailNotes",
 CellID->209290908],
Cell[1833622, 33252, 141, 4, 28, "DetailNotes",
 CellID->30163790],
Cell[1833766, 33258, 212, 5, 28, "DetailNotes",
 CellID->213153736]
}, Open  ]],
Cell[CellGroupData[{
Cell[1834015, 33268, 37, 0, 168, "ControlSuggestionsSection"],
Cell[1834055, 33270, 312, 8, 30, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[1834370, 33280, 719, 17, 30, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[1835092, 33299, 381, 12, 30, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[1835476, 33313, 680, 16, 30, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[1836159, 33331, 844, 21, 30, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[1837006, 33354, 369, 9, 30, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[1837378, 33365, 1464, 31, 30, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[1838845, 33398, 908, 21, 30, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1839790, 33424, 30, 0, 208, "SearchTermsSection"],
Cell[1839823, 33426, 174, 3, 28, "SearchTerms",
 CellID->476564237],
Cell[1840000, 33431, 174, 3, 28, "SearchTerms",
 CellID->245358486],
Cell[1840177, 33436, 174, 3, 28, "SearchTerms",
 CellID->584424833],
Cell[1840354, 33441, 179, 3, 28, "SearchTerms",
 CellID->103468090],
Cell[1840536, 33446, 165, 3, 28, "SearchTerms",
 CellID->21953905],
Cell[1840704, 33451, 185, 3, 28, "SearchTerms",
 CellID->733906711],
Cell[1840892, 33456, 177, 3, 28, "SearchTerms",
 CellID->200946478]
}, Open  ]],
Cell[CellGroupData[{
Cell[1841106, 33464, 31, 0, 188, "RelatedLinksSection"],
Cell[1841140, 33466, 468, 10, 28, "RelatedLinks",
 CellID->24498121],
Cell[1841611, 33478, 486, 11, 28, "RelatedLinks",
 CellID->28998832],
Cell[1842100, 33491, 575, 12, 28, "RelatedLinks",
 CellID->63968418],
Cell[1842678, 33505, 564, 12, 28, "RelatedLinks",
 CellID->611518950]
}, Open  ]],
Cell[CellGroupData[{
Cell[1843279, 33522, 25, 0, 188, "AuthorSection"],
Cell[1843307, 33524, 384, 11, 28, "Author"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
