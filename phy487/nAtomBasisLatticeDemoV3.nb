(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[   1328065,      24808]
NotebookOptionsPosition[   1322178,      24634]
NotebookOutlinePosition[   1323827,      24684]
CellTagsIndexPosition[   1323475,      24672]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Phonon Modes for 2D Lattice Vibrations", "DemoTitle",
 CellChangeTimes->{3.600887141142584*^9}],

Cell["", "InitializationSection"],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"tick", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"Dynamic", "@", 
     RowBox[{"If", "[", " ", 
      RowBox[{
       RowBox[{"tabNumber", " ", "\[Equal]", " ", "dynTab"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", " ", 
          RowBox[{"bRefreshMatrix", ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"matrix", " ", "=", " ", 
              RowBox[{"dynamicsMatrix", "[", " ", 
               RowBox[{
               "parameterLocatorDependencies", ",", " ", "couplingData"}], 
               " ", "]"}]}], " ", ";", 
             RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
             RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";", 
             " ", 
             RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
            ")"}], ","}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", " ", 
          RowBox[{"bRefreshDynamics", ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"dynamics", " ", "=", " ", 
              RowBox[{"calcDynamics", "[", " ", 
               RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}]}], 
             " ", ";", 
             RowBox[{"bRefreshDynamics", " ", "=", " ", "False"}], " ", ";", 
             RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}]}], ")"}], 
           ","}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", " ", 
          RowBox[{"bRefreshDynPlot", ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"dynPlot", " ", "=", " ", 
              RowBox[{"showDynamics", "[", " ", 
               RowBox[{"parameterLocatorDependencies", ",", " ", 
                RowBox[{"dynamics", "[", 
                 RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale", 
                ",", " ", "qLoc"}], " ", "]"}]}], " ", ";", 
             RowBox[{"bRefreshDynPlot", " ", "=", " ", "False"}]}], ")"}], 
           ","}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"dynPlot", "[", "tau", "]"}]}], " ", "\[IndentingNewLine]", 
        ")"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Plot", "[", 
         RowBox[{"x", ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "*)"}], 
       "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"tabNumber", " ", "\[Equal]", " ", "freqTab"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", " ", 
            RowBox[{"bRefreshMatrix", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"matrix", " ", "=", " ", 
                RowBox[{"dynamicsMatrix", "[", " ", 
                 RowBox[{
                 "parameterLocatorDependencies", ",", " ", "couplingData"}], 
                 " ", "]"}]}], " ", ";", 
               RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
               RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";", 
               " ", 
               RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
              ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"If", "[", " ", 
            RowBox[{"bRefreshFreqPlot", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"freqPlot", " ", "=", " ", 
                RowBox[{"frequencyPlotCalc", "[", " ", 
                 RowBox[{
                 "parameterLocatorDependencies", ",", " ", "matrix", ",", " ",
                   "meshSize"}], "]"}]}], " ", ";", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"Beep", "[", "]"}], " ", ";"}], "*)"}], 
               RowBox[{"bRefreshFreqPlot", " ", "=", " ", "False"}]}], " ", 
              ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"showFreqPlot", "[", " ", 
            RowBox[{"qPlaneLoc", ",", " ", "freqPlot"}], " ", "]"}]}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", "freqPlot", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", "matrix", "*)"}], "\[IndentingNewLine]", ")"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"Plot", "[", 
           RowBox[{
            RowBox[{"-", "x"}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "*)"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{"(*", "couplingLocator", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"LocatorPane", "[", " ", 
          RowBox[{
           RowBox[{"Dynamic", "[", 
            RowBox[{"u", ",", 
             RowBox[{
              RowBox[{"(", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"u", " ", "=", " ", 
                 RowBox[{"If", " ", "[", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], "<", "3"}], ",", " ", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Flatten", "[", " ", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], 
                    "}"}], ",", " ", "1"}], "]"}], ",", " ", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    "cap", " ", "the", " ", "number", " ", "of", " ", 
                    "Locators", " ", "at", " ", "5"}], ",", " ", 
                    RowBox[{
                    "so", " ", "the", " ", "selection", " ", "Pane", " ", 
                    RowBox[{"doesn", "'"}], "t", " ", "start", " ", 
                    "truncating", " ", 
                    RowBox[{"the", " ", "'"}], "to", " ", 
                    RowBox[{"neighbouring", "'"}], " ", "SetterBar"}]}], " ", 
                    "*)"}], "\[IndentingNewLine]", 
                   RowBox[{"If", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], " ", ">", " ", "7"}], ",", " ", 
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", "7"}], "]"}], ",", " ", "#"}], "]"}]}], 
                  " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                "\[IndentingNewLine]", 
                RowBox[{"Module", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"rm", ",", "km"}], "}"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"rm", " ", "=", " ", 
                    RowBox[{"First", "@", 
                    RowBox[{"Dimensions", "[", "rawArrayOfMasses", "]"}]}]}], 
                   " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                   RowBox[{"If", " ", "[", 
                    RowBox[{
                    RowBox[{"rm", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "rawArrayOfMasses"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"rawArrayOfMasses", " ", "=", " ", 
                    RowBox[{"Take", "[", " ", 
                    RowBox[{"rawArrayOfMasses", ",", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "rawArrayOfMasses", " ", "if", " ", 
                    "required"}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"rm", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{
                    "rawArrayOfMasses", ",", " ", "glConstDefaultMass"}], 
                    "]"}], " ", ";", " ", 
                    RowBox[{"rm", "++"}]}]}], " ", "]"}]}], 
                    "\[IndentingNewLine]", "]"}], " ", ";", 
                   "\[IndentingNewLine]", "\[IndentingNewLine]", 
                   RowBox[{"km", " ", "=", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], " ", "//", " ", 
                    "Max"}]}], " ", ";", "\[IndentingNewLine]", 
                   "\[IndentingNewLine]", 
                   RowBox[{"If", " ", "[", 
                    RowBox[{
                    RowBox[{"km", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "kArray"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"Select", "[", 
                    RowBox[{"kArray", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "\[LessEqual]", "  ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], "&"}], 
                    ")"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "kArray", " ", "if", " ", "required"}], 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"km", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"km", "++"}], " ", ";", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnKarrayForAdditionalMassIndex", "[", 
                    RowBox[{"kArray", ",", "km"}], "]"}]}]}]}], " ", "]"}]}], 
                    " ", "\[IndentingNewLine]", "]"}]}]}], 
                 "\[IndentingNewLine]", "]"}], " ", ";", 
                "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                  RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                  "lattice", " ", "vector", " ", "end", " ", "points", " ", 
                  "to", " ", "be", " ", "too", " ", "close", " ", "to", " ", 
                  "the", " ", "origin"}], " ", "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"u", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", 
                 RowBox[{"If", "[", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "<", " ", 
                    "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                   RowBox[{"glConstLocDefault", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                   RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"u", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", 
                 RowBox[{"If", "[", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ".", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], " ", "<", " ", 
                    "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                   RowBox[{"glConstLocDefault", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                   RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
                "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                  RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                  "angle", " ", "between", " ", "lattice", " ", "vectors", 
                  " ", "get", " ", "too", " ", "small"}], " ", "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                   RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], " ", "=", " ", 
                 RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
                  RowBox[{
                  "u", ",", " ", " ", 
                   "glConstMinAngleBetweenLatticeVectors"}], " ", "]"}]}], 
                " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"rawNumberOfMasses", " ", "=", " ", 
                 RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", ";", 
                "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                 "These", " ", "are", " ", "in", " ", "case", " ", "the", " ",
                   "number", " ", "of", " ", "locators", " ", "were", " ", 
                  "changed", " ", "and", " ", "we", " ", "have", " ", "a", 
                  " ", "mass", " ", "selected", " ", "that", " ", "is", " ", 
                  "now", " ", 
                  RowBox[{"invalid", "."}]}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"m1Sel", " ", "=", " ", 
                 RowBox[{"If", " ", "[", " ", 
                  RowBox[{
                   RowBox[{"m1Sel", " ", ">", "rawNumberOfMasses"}], ",", " ",
                    "1", ",", " ", "m1Sel"}], "]"}]}], " ", ";", 
                "\[IndentingNewLine]", 
                RowBox[{"m2Sel", " ", "=", " ", 
                 RowBox[{"If", " ", "[", " ", 
                  RowBox[{
                   RowBox[{"m2Sel", " ", ">", "rawNumberOfMasses"}], ",", " ",
                    "1", ",", " ", "m2Sel"}], "]"}]}], " ", ";", 
                "\[IndentingNewLine]", 
                RowBox[{"moSel", " ", "=", " ", 
                 RowBox[{"If", " ", "[", " ", 
                  RowBox[{
                   RowBox[{"moSel", " ", ">", "rawNumberOfMasses"}], ",", " ",
                    "1", ",", " ", "moSel"}], " ", "]"}]}], " ", ";", 
                "\[IndentingNewLine]", 
                RowBox[{"moSel", " ", "=", " ", 
                 RowBox[{"adjustedmoSel", "[", " ", 
                  RowBox[{
                  "rawNumberOfMasses", ",", " ", "moSel", ",", " ", "m1Sel"}],
                   " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{
                  "Adjust", " ", "these", " ", "for", " ", "Slider", " ", 
                   "display", " ", "in", " ", "case", " ", "m1Sel"}], ",", 
                  " ", "m2Sel", ",", " ", 
                  RowBox[{
                  "or", " ", "moSel", " ", "were", " ", "changed", " ", 
                   "just", " ", 
                   RowBox[{"above", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"k1", " ", "=", " ", 
                 RowBox[{"selectVFromKarray", "[", 
                  RowBox[{
                  "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                   "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                RowBox[{"k2", " ", "=", " ", 
                 RowBox[{"selectVFromKarray", "[", 
                  RowBox[{
                  "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "2"}], 
                  "]"}]}], " ", ";", "\[IndentingNewLine]", 
                RowBox[{"k3", " ", "=", " ", 
                 RowBox[{"selectVFromKarray", "[", 
                  RowBox[{
                  "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "3"}], 
                  "]"}]}], " ", ";", "\[IndentingNewLine]", 
                RowBox[{"k4", " ", "=", " ", 
                 RowBox[{"selectVFromKarray", "[", 
                  RowBox[{
                  "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "4"}], 
                  "]"}]}], " ", ";", "\[IndentingNewLine]", 
                RowBox[{"k5", " ", "=", " ", 
                 RowBox[{"selectOriginVFromKarray", "[", " ", 
                  RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                  " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                "\[IndentingNewLine]", 
                RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
                 RowBox[{"locDependent", "[", " ", 
                  RowBox[{
                  "u", ",", " ", "rawNumberOfMasses", ",", 
                   "rawArrayOfMasses"}], " ", "]"}]}], " ", ";", 
                "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                  RowBox[{"Reset", " ", "in", " ", "case", " ", "a"}], ",", 
                  RowBox[{"or", " ", "b", " ", "changed"}], ",", " ", 
                  RowBox[{
                  "and", " ", "the", " ", "last", " ", "selected", " ", 
                   "value", " ", "is", " ", "now", " ", "out", " ", "of", " ", 
                   RowBox[{"range", "."}]}]}], " ", "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"qLoc", " ", "=", " ", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                   "\"\<qMaxVec\>\"", "/.", "parameterLocatorDependencies"}], 
                   " ", ")"}], "/", "2"}]}], "  ", ";", "\[IndentingNewLine]", 
                RowBox[{"qPlaneLoc", " ", "=", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
                "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"couplingData", " ", "=", " ", 
                 RowBox[{"calculateCouplings", "[", " ", 
                  RowBox[{
                  "parameterLocatorDependencies", ",", " ", "kArray"}], " ", 
                  "]"}]}], " ", ";", "\[IndentingNewLine]", 
                "\[IndentingNewLine]", 
                RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", ";", 
                "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"tick", "=", 
                 RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], "]"}],
            ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"Why", " ", 
              RowBox[{"doesn", "'"}], "t", " ", "Alt"}], "-", 
             RowBox[{
             "click", " ", "to", " ", "remove", " ", "existing", " ", 
              "Locator", " ", "refresh", " ", "this", " ", 
              RowBox[{"plot", "?", "  ", 
               RowBox[{"Workaround", ":", " ", 
                RowBox[{
                "move", " ", "one", " ", "of", " ", "the", " ", "other", " ", 
                 "locators", " ", "to", " ", "refresh"}]}]}]}]}], " ", "*)"}],
            "\[IndentingNewLine]", 
           RowBox[{"plotSprings", "[", 
            RowBox[{
            "u", ",", " ", "parameterLocatorDependencies", ",", 
             "couplingData", ",", "m1Sel", ",", " ", "m2Sel", ",", " ", 
             "moSel"}], "]"}], " ", ",", "\[IndentingNewLine]", 
           RowBox[{"LocatorAutoCreate", "\[Rule]", "True"}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", " ", "]"}]}],
       "]"}]}]}], " ", 
   RowBox[{"(*", 
    RowBox[{"If", ",", "If"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", "0", "*)"}], "\[IndentingNewLine]", ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Dynamic", "@", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"k5manip", ",", 
        RowBox[{"TabView", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<dynamics\>\"", " ", "\[Rule]", "  ", 
             RowBox[{"Column", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "dynTab"}], " ", ";", 
               RowBox[{"(*", "dynamicsControls", "*)"}], 
               RowBox[{"{", " ", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Row", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"OverVector", "[", "\"\<q\>\"", "]"}], ",", 
                    "\[IndentingNewLine]", "\"\< = \>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "qm", "}"}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"qm", " ", "=", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", "  ", "/.", 
                    "parameterLocatorDependencies"}], ")"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Slider2D", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"qLoc", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"qLoc", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", 
                    RowBox[{"(*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.01", ",", "0.01"}], "}"}], ",", " ", "qm"}], 
                    "}"}], "*)"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", " ", "qm"}], ")"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], 
                    "\[IndentingNewLine]", ",", " ", 
                    RowBox[{"ImageSize", " ", "\[Rule]", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"150", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}], " ", "&"}], ")"}], 
                    " ", "@", " ", "qm"}]}]}], "\[IndentingNewLine]", 
                    "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", " ", 
                    "\[IndentingNewLine]", "\"\< 2 \[Pi] \>\"", ",", "  ", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"(", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"qLoc", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "Pi"}], ")"}]}], " ", "//", " ", 
                    "MatrixForm"}], ")"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "Text", "@", "\"\<time, normalized to one period:\>\""}], 
                   "}"}], "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"Manipulator", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"tau", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"tau", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0", ",", " ", "0", ",", " ", "1"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "True"}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}]}], 
                    "]"}], "}"}], "\[IndentingNewLine]", ",", " ", 
                   RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"200", ",", "60"}], "}"}]}]}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{"Text", "@", "\"\<oscillation scale factor:\>\""}],
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Manipulator", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"scale", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"scale", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.05", ",", " ", "0.05", ",", " ", "1"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.05", ",", "1"}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], 
                    "\[IndentingNewLine]", "\"\< \>\""}], ",", "  ", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"(", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"scale", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], 
                  "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Text", "[", 
                  RowBox[{
                  "Text", "@", 
                   "\"\<Angular frequency \[Omega](q), selection:\>\""}], 
                  "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Dynamic", "@", 
                  RowBox[{"SetterBar", "[", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"omegaIndex", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"omegaIndex", "=", "#"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", 
                    RowBox[{"Range", "[", 
                    RowBox[{"2", "rawNumberOfMasses"}], "]"}]}], " ", 
                   "]"}]}]}], "\[IndentingNewLine]", "}"}]}], " ", "]"}]}], 
            "\[IndentingNewLine]", ",", 
            RowBox[{
            "\"\<\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))\>\
\"", " ", "\[Rule]", "  ", 
             RowBox[{"Column", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "freqTab"}], " ", ";", 
               RowBox[{"(*", "freqControls", "*)"}], 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Row", "[", 
                  RowBox[{"{", " ", 
                   RowBox[{
                    RowBox[{"Text", "@", "\"\<mesh size \>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Manipulator", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"meshSize", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"meshSize", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "8", ",", " ", "2", ",", " ", "30"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "30", ",", "2"}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
                    "\"\< \>\"", ",", " ", 
                    RowBox[{"Dynamic", "[", "meshSize", "]"}]}], " ", 
                   "\[IndentingNewLine]", "}"}], "]"}], ",", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"LocatorPane", "[", 
                  RowBox[{
                   RowBox[{"Dynamic", "[", "qPlaneLoc", 
                    RowBox[{"(*", 
                    RowBox[{",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"qPlaneLoc", " ", "=", " ", "#"}], ";", " ", 
                    RowBox[{"tick", "=", 
                    RowBox[{
                    RowBox[{"Not", "[", "tick", "]"}], " ", "&"}]}]}], 
                    ")"}]}], "*)"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Graphics", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Lighter", "@", "Gray"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Polygon", "[", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    ")"}], "\[IndentingNewLine]", " ", "]"}], ",", 
                    "\[IndentingNewLine]", "Black", ",", 
                    RowBox[{"Line", "[", "qPlaneLoc", "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                    " ", 
                    RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    "/", "2"}]}], "\[IndentingNewLine]", ",", 
                    RowBox[{"ImageSize", " ", "\[Rule]", "  ", 
                    RowBox[{"200", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}]}]}], 
                    "\[IndentingNewLine]", "]"}], " ", "&"}], " ", "@", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", " ", "/.", 
                    "parameterLocatorDependencies"}], ")"}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
                  "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                "}"}]}], " ", "]"}]}], "\[IndentingNewLine]", ",", " ", 
            RowBox[{"\"\<parameters\>\"", "\[Rule]", 
             RowBox[{"Grid", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "parametersTab"}], " ", 
               ";", "\[IndentingNewLine]", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<mp: \>\"", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mPosFirstCell\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<tn: \>\"", ",", " ", "tabNumber"}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<qLoc = \>\"", ",", " ", "qLoc"}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<qPlaneLoc = \>\"", ",", " ", "qPlaneLoc"}], 
                   "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<u = \>\"", ",", " ", "u"}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", " ", 
                   RowBox[{"\"\<qr:\>\"", " ", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], ")"}]}], "}"}],
                   ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<cd:\>\"", ",", " ", 
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<cd:\>\"", ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}]}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", " ", 
                   RowBox[{"\"\<m1Sel, m2Sel, moSel = \>\"", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"m1Sel", ",", " ", "m2Sel", ",", " ", "moSel"}], 
                    "}"}]}], "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<cN: \>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Select", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
                    RowBox[{"{", 
                    RowBox[{"m1Sel", ",", " ", "m2Sel"}], "}"}]}], "&"}]}], 
                    " ", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", "7", ",", "4"}], "}"}], "]"}], "]"}]}], 
                   "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<cN: \>\"", ",", 
                    RowBox[{
                    RowBox[{"Select", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
                    RowBox[{"{", 
                    RowBox[{"m1Sel", ",", " ", "m2Sel"}], "}"}]}], "&"}]}], 
                    " ", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", " ", 
                   RowBox[{
                   "\"\<rawArrayOfMasses = \>\"", ",", " ", 
                    "rawArrayOfMasses"}], " ", "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<range \[Omega]: \>\"", ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"2", "rawNumberOfMasses"}], "]"}]}], "}"}], ","}],
                  "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<kArray = \>\"", ",", " ", "kArray"}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<km: \>\"", ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], " ", "//", " ", 
                    "Max"}]}], "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<km: \>\"", ",", " ", 
                    RowBox[{"DeleteDuplicates", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ")"}]}]}], " ", 
                   "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                   "\"\<couplingData = \>\"", ",", " ", "couplingData"}], 
                   "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<k1, k2, k3, k4, k5 = \>\"", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    "k1", ",", " ", "k2", ",", " ", "k3", ",", " ", "k4", ",",
                     " ", "k5"}], "}"}]}], "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<ms: \>\"", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<nm: \>\"", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<numberOfMasses\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<nm: \>\"", ",", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<re: \>\"", ",", " ", 
                    RowBox[{"2", " ", "Pi", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<reciprocalNorms\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}]}], "}"}], ","}],
                  "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<sc: \>\"", ",", " ", 
                    RowBox[{"DeleteDuplicates", "@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", " ", 
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{"glConstNeighboringCellIndexes", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
                    RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
                    RowBox[{"foo", "[", "n", "]"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"s", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}],
                     ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", 
                    "1"}], "]"}]}]}], " ", "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<mm: \>\"", ",", 
                    RowBox[{
                    RowBox[{"matrix", "[", "qLoc", "]"}], " ", "//", " ", 
                    "MatrixForm"}]}], "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<mm: \>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SplitBy", "[", " ", 
                    RowBox[{
                    RowBox[{"Sort", "@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"couplingData", ",", " ", "2"}], "]"}]}], " ", 
                    ",", " ", "First"}], " ", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"(*", "massSetter", "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Text", "[", "\"\<mass: \>\"", "]"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "@", 
                    RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"m1Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m1Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", 
                    ",", "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"moSel", " ", "=", " ", 
                    RowBox[{"adjustedmoSel", "[", " ", 
                    RowBox[{
                    "rawNumberOfMasses", ",", " ", "moSel", ",", " ", 
                    "m1Sel"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", " ", "]"}]}], "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"massValue", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.25", ",", " ", "0.25", ",", " ", 
                    "glConstMMax"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"rawArrayOfMasses", "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "=", "massValue"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
                    RowBox[{"(", 
                    RowBox[{"parameterLocatorDependencies", " ", "/.", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"\"\<mScalarArray\>\"", ",", " ", "_"}], "]"}], 
                    " ", "\[RuleDelayed]", " ", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", ",", " ", "rawArrayOfMasses"}], 
                    "]"}]}], ")"}]}], " ", ")"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{"0.25", ",", 
                    RowBox[{"Dynamic", "@", "glConstMMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"massValue", ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "m2Setter", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                   "Text", "[", "\"\<coupling to neighbouring: \>\"", " ", 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                   RowBox[{"Dynamic", "@", 
                    RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"m2Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m2Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
                    RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
                  "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "km1", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<horizontal: \>\""}], ",", 
                    RowBox[{"kLable", "[", "1", "]"}], ",", " ", 
                    "\"\< || \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", 
                    "\"\< \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k1", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k1", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1", ",", " ", "k1"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k1", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "km2", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<vertical: \>\""}], ",", 
                    RowBox[{"kLable", "[", "2", "]"}], ",", " ", 
                    "\"\< || \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", 
                    "\"\< \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k2", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k2", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "2", ",", " ", "k2"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k2", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], " ", 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "km3", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
                    RowBox[{"kLable", "[", "3", "]"}], ",", " ", 
                    "\"\< || (\>\"", ",", "  ", 
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
                    "\"\< + \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
                    "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k3", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k3", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "3", ",", " ", "k3"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k3", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "km4", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
                    RowBox[{"kLable", "[", "4", "]"}], ",", " ", 
                    "\"\< || (\>\"", ",", "  ", 
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
                    "\"\< - \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
                    "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k4", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k4", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "4", ",", " ", "k4"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k4", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"k5manip", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"k5manip", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "\[IndentingNewLine]", 
                "}"}]}], " ", "\[IndentingNewLine]", "]"}]}]}], 
           "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Dynamic", " ", "@", "tabNumber"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ImageSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"250", ",", "350"}], "}"}]}]}], " ", 
         "\[IndentingNewLine]", "]"}]}], " ", "\[IndentingNewLine]", "]"}], 
      " ", "@", "\[IndentingNewLine]", 
      RowBox[{"If", "[", " ", 
       RowBox[{
        RowBox[{"rawNumberOfMasses", " ", "\[Equal]", " ", "1"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Row", "[", 
             RowBox[{"{", " ", 
              RowBox[{
               RowBox[{"Text", "@", "\"\<coupling from \>\""}], ",", " ", 
               RowBox[{"Dynamic", "@", 
                RowBox[{"massLabel", "[", " ", "m1Sel", "]"}]}], ",", 
               RowBox[{"Text", "@", "\"\< to: \>\""}]}], "}"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Dynamic", "@", 
             RowBox[{"If", " ", "[", " ", 
              RowBox[{
               RowBox[{"rawNumberOfMasses", " ", ">", " ", "2"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"moSel", ",", 
                   RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"moSel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                  "]"}], ",", " ", "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                    " ", 
                   RowBox[{"(", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}], ",", 
                    "m1Sel"}], "]"}], ")"}]}], ")"}]}], "\[IndentingNewLine]",
                 "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Dynamic", "@", 
                RowBox[{"massLabel", "[", " ", 
                 RowBox[{"First", "@", 
                  RowBox[{"Delete", "[", " ", 
                   RowBox[{
                    RowBox[{"Range", "[", "2", "]"}], ",", " ", "m1Sel"}], 
                   "]"}]}], " ", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
           "\[IndentingNewLine]", "}"}], " ", ",", 
          RowBox[{"{", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Row", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"kLable", "[", "5", "]"}], ",", " ", "\"\<: \>\""}], 
              "}"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Row", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"k5", ",", 
                   RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k5", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKarrayOriginElement", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "moSel", ",", " ", 
                    "k5"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                  "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                   RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                 RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                 RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                 RowBox[{"AppearanceElements", "\[Rule]", 
                  RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               "\"\< \>\"", ",", 
               RowBox[{"Dynamic", "@", 
                RowBox[{"NumberForm", "[", " ", 
                 RowBox[{"k5", ",", 
                  RowBox[{"{", 
                   RowBox[{"3", ",", "2"}], "}"}]}], "]"}]}]}], 
              "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
           "}"}]}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
       "]"}]}], " ", 
     RowBox[{"(*", "If", "*)"}], "\[IndentingNewLine]", ")"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tick", ",", "False"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qPlaneLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tau", ",", "0"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"omegaIndex", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"scale", ",", " ", "0.2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"meshSize", ",", "8"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"matrix", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynamics", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshMatrix", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynamics", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshFreqPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tabNumber", ",", "1"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynTab", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqTab", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parametersTab", ",", " ", "3"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstMinSquaredDistanceFromOrigin", ",", " ", "0.1"}], "}"}],
      ",", " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstMinAngleBetweenLatticeVectors", ",", " ", 
       RowBox[{"Pi", "/", "6"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstLocDefault", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0.1", ",", " ", "1.3"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1.9", ",", " ", "0.8"}], "}"}]}], "}"}]}], "}"}], ",", " ",
      "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstDefaultMass", ",", " ", "20"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstKDefaults", ",", " ", 
       RowBox[{"{", 
        RowBox[{
        "0.25", ",", " ", "0.25", ",", " ", "0.25", ",", " ", "0.25", ",", 
         " ", "0.25"}], "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstKMin", ",", " ", "0.05"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstKMax", ",", " ", "1"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstMMax", ",", " ", "30"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstWindowHalfWidth", ",", " ", "3"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstSpringColors", ",", 
       RowBox[{"Darker", "@", 
        RowBox[{"{", " ", 
         RowBox[{
         "Orange", ",", "Green", ",", "Purple", ",", "Cyan", ",", "Yellow"}], 
         " ", "}"}]}]}], " ", "}"}], " ", ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstPrimaryDisplaySize", ",", " ", 
       RowBox[{"{", 
        RowBox[{"380", ",", "380"}], "}"}]}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstTextDisplayOffsetHack", ",", " ", 
       RowBox[{"{", 
        RowBox[{"0.25", ",", " ", "0.25"}], "}"}]}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstNeighboringCellIndexes", ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], " ", "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "The", " ", "number", " ", "of", " ", "default", " ", "masses", " ", 
     "are", " ", "coupled", " ", "by", " ", "these", " ", "next", " ", "four",
      " ", 
     RowBox[{"variables", "."}]}], " ", "*)"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawNumberOfMasses", ",", " ", "3"}], "}"}], ",", " ", "None"}],
     "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mLocDefault", ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0.9", ",", "0.7"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0.4", ",", " ", "1.2"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1.3", ",", " ", "1.4"}], "}"}]}], "}"}]}], "}"}], ",", " ",
      "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawArrayOfMasses", ",", " ", 
       RowBox[{"{", 
        RowBox[{"10", ",", " ", "15", ",", " ", "20"}], "}"}]}], "}"}], ",", 
     " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"moSel", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"pick", " ", "anything", " ", "that", " ", 
     RowBox[{"isn", "'"}], "t", " ", "m1Sel"}], " ", "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m1Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m2Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"kArray", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], " ", 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"u", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parameterLocatorDependencies", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"couplingData", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstSpringColorsByN", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k1", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k2", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k3", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k4", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k5", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
    RowBox[{"{", "tick", "}"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{",", 
     RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "*)"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"SynchronousInitialization", "\[Rule]", "False"}], 
   "\[IndentingNewLine]", ",", " ", 
   RowBox[{"Initialization", " ", "\[RuleDelayed]", " ", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"(*", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"TODO", ":", "\[IndentingNewLine]", 
        RowBox[{GridBox[{
           {
            RowBox[{"restore", " ", "SaveDefinitions"}]},
           {
            RowBox[{
             RowBox[{
             "move", " ", "stuff", " ", "out", " ", "of", " ", 
              "Initialization"}], " ", "\[RuleDelayed]", " ", 
             RowBox[{"block", "."}]}]},
           {
            RowBox[{
             RowBox[{"introduce", " ", "firstInit", " ", 
              RowBox[{"variable", ".", "  ", "\[IndentingNewLine]", "See"}], 
              " ", "if", " ", "that", " ", "can", " ", "be", " ", "used", " ",
               "instead", " ", "of", " ", "Initialization"}], " ", 
             "\[RuleDelayed]", " ", 
             RowBox[{
             "block", " ", "so", " ", "that", " ", "the", " ", "copies", " ", 
              "of", " ", "the", " ", "output", " ", "cells", " ", "can", " ", 
              "be", " ", "independent"}]}]}
          },
          
          GridBoxDividers->{
           "Columns" -> {True, {False}, True}, "ColumnsIndexed" -> {}, 
            "Rows" -> {{True}}, "RowsIndexed" -> {}}], "\[IndentingNewLine]", 
         "Nice", " ", "to", " ", "have"}]}], ",", " ", 
       RowBox[{"future", " ", "possible", " ", "maintainance", " ", 
        RowBox[{"TODOs", ":", "\[IndentingNewLine]", GridBox[{
           {
            RowBox[{
             RowBox[{
             "implement", " ", "a", " ", "min", " ", "separation", " ", "for",
               " ", "the", " ", "equilibrium", " ", "mass", " ", "positions", 
              " ", "too", " ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                "as", " ", "done", " ", "for", " ", "the", " ", "lattice", 
                 " ", "vectors"}], ")"}], ".", " ", "\[IndentingNewLine]", 
               "Trickier"}]}], ",", " ", 
             RowBox[{
             "since", " ", "that", " ", "should", " ", "be", " ", "based", 
              " ", "on", " ", "the", " ", "separations", " ", "in", " ", 
              "the", " ", "origin", " ", "cell"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{
             "and", " ", "not", " ", "the", " ", "obsolute", " ", 
              "separations", " ", "of", " ", "the", " ", 
              RowBox[{"locators", ".", "\[IndentingNewLine]", "Even"}], " ", 
              "if", " ", "that", " ", "is", " ", "done"}], ",", " ", 
             RowBox[{"that", " ", 
              RowBox[{"doesn", "'"}], "t", " ", "mean", " ", "that", " ", 
              "the", " ", "scaling", " ", 
              RowBox[{"won", "'"}], "t", " ", "allow", " ", "for", " ", 
              "overlap", " ", "in", " ", "the", " ", "dynamic", " ", 
              RowBox[{"tab", "."}]}]}]},
           {
            RowBox[{
            "would", " ", "be", " ", "cool", " ", "to", " ", "make", " ", 
             "qLoc", " ", "a", " ", "pair", " ", "of", " ", "Locators", " ", 
             RowBox[{"that", ":", "\[IndentingNewLine]", " ", 
              RowBox[{
              "trace", " ", "out", " ", "constrained", " ", "positions", " ", 
               "along", " ", "the", " ", "2", " ", "Pi", " ", "scaled", " ", 
               "reciprocal", " ", "lattice", " ", 
               RowBox[{"vectors", ".", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                 "returning", " ", "the", " ", "distance", " ", "from", " ", 
                  "the", " ", "origin", " ", "of", " ", "each", " ", "of", 
                  " ", "those", " ", "locators"}], ")"}]}]}]}]}]},
           {
            RowBox[{
            "a", " ", "message", " ", "box", " ", "on", " ", "user", " ", 
             RowBox[{"error", ":", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"-", " ", "when"}], " ", "an", " ", "angle", " ", "or",
                " ", "distance", " ", "from", " ", "origin", " ", "change", 
               " ", "has", " ", "driven", " ", "a", " ", "reset", " ", "of", 
               " ", "the", " ", "lattice", " ", 
               RowBox[{"vectors", ".", "\[IndentingNewLine]", 
                RowBox[{"-", " ", "when"}]}], " ", "too", " ", "many", " ", 
               "of", " ", "the", " ", "locators", " ", "have", " ", "been", 
               " ", "deleted", " ", "and", " ", "a", " ", "forced", " ", 
               "reset", " ", "to", " ", "the", " ", "defaults", " ", 
               RowBox[{"occurs", "."}]}]}]}]},
           {
            RowBox[{
             RowBox[{
              RowBox[{"some", " ", "of", " ", 
               RowBox[{"the", " ", "::", "usage"}]}], " ", "=", " ", 
              RowBox[{
              "\"\<\>\"", " ", "strings", " ", "are", " ", "now", " ", "out", 
               " ", "of", " ", "date"}]}], " ", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
               "all", " ", "commented", " ", "out", " ", "with", " ", "move", 
                " ", "of", " ", "the", " ", "functions", " ", "from", " ", 
                "global", " ", "init", " ", "section", " ", "to", " ", "the", 
                " ", "Manipulate", " ", "Initializer", " ", "section"}], 
               ")"}], "."}]}]},
           {
            RowBox[{
            "Can", " ", "the", " ", "frequency", " ", "qPlaneLoc", " ", 
             "LocatorPane", " ", "look", " ", "more", " ", "like", " ", 
             "Slider2D", " ", "in", " ", "the", " ", "dynamics", " ", "tab", 
             " ", "for", " ", 
             RowBox[{"consistency", "?"}]}]},
           {
            RowBox[{
             RowBox[{
             "Am", " ", "using", " ", "a", " ", "calculated", " ", "value", 
              " ", "for", " ", "the", " ", "max", " ", "freq", " ", "for", 
              " ", "the", " ", "freq", " ", "plot", " ", "intersection", " ", 
              RowBox[{"plane", ".", " ", "\[IndentingNewLine]", "Hardcoded"}],
               " ", "this", " ", "to", " ", "magic", " ", "#", " ", 
              RowBox[{"that", "'"}], "s", " ", "out", " ", "of", " ", "the", 
              " ", "graphic", " ", 
              RowBox[{"(", "23", ")"}]}], ",", " ", 
             RowBox[{
             "but", " ", "that", " ", "could", " ", "be", " ", "wrong", " ", 
              "for", " ", "some", " ", "params"}]}]},
           {
            RowBox[{
             RowBox[{
             "Scaling", " ", "of", " ", "the", " ", "masses", " ", "ended", 
              " ", "up", " ", "different", " ", "for", " ", "the", " ", 
              "dynPlot", " ", 
              RowBox[{"vs", ".", " ", "parameters"}], " ", 
              RowBox[{"tab", ".", " ", "\[IndentingNewLine]", "Hacked"}], " ",
               "the", " ", "dynPlot", " ", "scaling", " ", "for", " ", 
              "now"}], ",", " ", 
             RowBox[{"to", " ", "be", " ", "a", " ", "bit", " ", 
              RowBox[{"closer", "."}]}]}]}
          },
          
          GridBoxDividers->{
           "Columns" -> {True, {False}, True}, "ColumnsIndexed" -> {}, 
            "Rows" -> {{True}}, "RowsIndexed" -> {}}]}]}]}], 
      "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Clear", "[", 
        RowBox[{
        "glConstMinSquaredDistanceFromOrigin", ",", 
         "glConstMinAngleBetweenLatticeVectors", ",", "glConstLocDefault", 
         ",", "glConstDefaultMass", ",", "glConstKDefaults", ",", 
         "glConstKMin", ",", "glConstKMax", ",", "glConstMMax", ",", 
         "glConstWindowHalfWidth", ",", "glConstSpringColors", ",", 
         "glConstPrimaryDisplaySize", ",", "glConstTextDisplayOffsetHack", 
         ",", "glConstNeighboringCellIndexes", ",", 
         "glConstSpringColorsByN"}], "]"}], ";"}], "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"glConstMinAngleBetweenLatticeVectors", "=", 
        RowBox[{"Pi", "/", "6"}]}], ";", "\n", 
       RowBox[{"glConstLocDefault", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0.1", ",", "1.3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1.9", ",", "0.8"}], "}"}]}], "}"}]}], ";", "\n", 
       RowBox[{"glConstDefaultMass", "=", "20"}], ";", "\n", 
       RowBox[{"glConstKDefaults", "=", 
        RowBox[{"{", 
         RowBox[{"0.25", ",", "0.25", ",", "0.25", ",", "0.25", ",", "0.25"}],
          "}"}]}], ";", "\n", 
       RowBox[{"glConstKMin", "=", "0.05"}], ";", "\n", 
       RowBox[{"glConstKMax", "=", "1"}], ";", "\n", 
       RowBox[{"glConstMMax", "=", "30"}], ";", "\n", 
       RowBox[{"glConstWindowHalfWidth", "=", "3"}], ";", "\n", 
       RowBox[{"glConstSpringColors", "=", 
        RowBox[{"Darker", "@", 
         RowBox[{"{", 
          RowBox[{
          "Orange", ",", "Green", ",", "Purple", ",", "Cyan", ",", "Yellow"}],
           "}"}]}]}], ";", "\n", 
       RowBox[{"glConstPrimaryDisplaySize", "=", 
        RowBox[{"{", 
         RowBox[{"380", ",", "380"}], "}"}]}], ";", "\n", 
       RowBox[{"glConstTextDisplayOffsetHack", "=", 
        RowBox[{"{", 
         RowBox[{"0.25", ",", "0.25"}], "}"}]}], ";", "\n", 
       RowBox[{"glConstNeighboringCellIndexes", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ";"}], "*)"}], "\n", "\n",
      "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"ClearAll", "[", 
        RowBox[{
        "adjustedmoSel", ",", "returnAlteredKArrayElements", ",", 
         "returnAlteredKarrayOriginElement", ",", "calcDynamics", ",", 
         "calcLineTable", ",", "calcReciprocalBasis", ",", 
         "calculateCouplings", ",", "constructKArray", ",", 
         "constructKArrayElements", ",", "dynamicsMatrix", ",", 
         "frequencyPlotCalc", ",", "returnKarrayForAdditionalMassIndex", ",", 
         "indexLabel", ",", "selectOriginVFromKarray", ",", 
         "selectVFromKarray", ",", "kLable", ",", "spScaled", ",", 
         "locDependent", ",", "nMassesFromLocArray", ",", 
         "oneTermOfdynamicsMatrix", ",", "plotSprings", " ", ",", 
         "pointsTable", ",", "projOp", ",", "projOpU", ",", 
         "resetLatticeVectorsIfAngleTooSmall", ",", "showDynamics", ",", 
         "showFreqPlot", ",", "springPoints"}], "]"}], " ", ";"}], "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "0"}], "}"}], "\[Rule]", 
         RowBox[{"RGBColor", "[", "...", "]"}]}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}]}], "}"}], "\[Rule]", 
         RowBox[{"RGBColor", "[", "...", "]"}]}], ",", " ", "..."}], "}"}], 
      "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"glConstSpringColorsByN", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "@", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"s", " ", 
              RowBox[{
               RowBox[{"Append", "[", 
                RowBox[{"glConstNeighboringCellIndexes", ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
             RowBox[{"glConstSpringColors", "[", 
              RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"s", ",", " ", 
              RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",", 
            " ", 
            RowBox[{"{", 
             RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", "1"}], 
         "]"}]}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "This", " ", "is", " ", "to", " ", "deal", " ", "with", " ", 
         "InputForm", " ", "Manipulators"}], ",", " ", 
        RowBox[{
         RowBox[{"that", " ", "allow", " ", "non"}], "-", 
         RowBox[{
         "numeric", " ", "values", " ", "to", " ", "be", " ", "passed"}]}], 
        ",", " ", 
        RowBox[{
        "or", " ", "values", " ", "that", " ", "exceed", " ", "the", " ", 
         "range", " ", "specified", " ", "in", " ", "the", " ", 
         RowBox[{"Manipulator", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"checkAgainstRange", "[", 
        RowBox[{
        "v_", ",", "default_", ",", "lowerLimit_", ",", " ", "upperLimit_"}], 
        "]"}], " ", ":=", " ", "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"result", " ", "=", " ", 
           RowBox[{"If", " ", "[", " ", 
            RowBox[{
             RowBox[{"NumberQ", "[", "v", "]"}], ",", "v", ",", " ", 
             "default"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"result", " ", "=", " ", 
           RowBox[{"If", " ", "[", " ", 
            RowBox[{
             RowBox[{"result", " ", "<=", " ", "upperLimit"}], ",", " ", 
             "result", ",", "default"}], " ", "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"result", " ", "=", " ", 
           RowBox[{"If", " ", "[", " ", 
            RowBox[{
             RowBox[{"result", " ", ">=", " ", "lowerLimit"}], ",", " ", 
             "result", ",", "default"}], " ", "]"}]}], " ", ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "result"}]}], 
        "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Based", " ", "on", " ", "my", " ", "ListLinePlot", " ", "answer", " ",
         "posted", " ", 
        RowBox[{"in", ":", " ", 
         ButtonBox[
          RowBox[{
           RowBox[{"http", ":"}], "//", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
              "a"}], "/", "37228"}], "/", "10"}]}],
          BaseStyle->"Hyperlink",
          ButtonData->{
            URL["http://mathematica.stackexchange.com/a/37228/10"], None},
          ButtonNote->"http://mathematica.stackexchange.com/a/37228/10"]}]}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"springPoints", "::", "usage"}], " ", "=", " ", 
         "\"\<springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]\>\""}], " ", ";"}], "*)"}], 
      "\n", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"springPoints", "[", " ", 
        RowBox[{"a12_List", ",", " ", 
         RowBox[{"n_Integer:", "8"}], ",", 
         RowBox[{"h_:", ".05"}], ",", " ", 
         RowBox[{"f_:", " ", "0.1"}]}], " ", "]"}], " ", ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "a1", ",", " ", "a2", ",", " ", "n1", ",", " ", "springDiff", ",", 
           " ", "nd", ",", " ", "r", ",", " ", "r1"}], " ", "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a1", ",", " ", "a2"}], "}"}], " ", "=", " ", "a12"}], 
          " ", ";", "\[IndentingNewLine]", 
          RowBox[{"n1", " ", "=", " ", 
           RowBox[{"Norm", "[", "a1", "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"springDiff", " ", "=", " ", 
           RowBox[{"a2", " ", "-", " ", "a1"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"nd", " ", "=", " ", 
           RowBox[{"Norm", "[", "springDiff", "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"r", " ", "=", " ", 
           RowBox[{"RotationMatrix", "[", 
            RowBox[{"ArcTan", " ", "@@", "  ", "springDiff"}], " ", "]"}]}], 
          " ", ";", "\[IndentingNewLine]", 
          RowBox[{"r1", " ", "=", " ", 
           RowBox[{"r", " ", ".", " ", 
            RowBox[{"{", 
             RowBox[{"n1", ",", " ", "0"}], "}"}]}]}], " ", ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Table", "[", " ", 
             RowBox[{
              RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
               RowBox[{"r", " ", ".", " ", 
                RowBox[{"{", " ", 
                 RowBox[{
                  RowBox[{"n1", " ", "+", " ", 
                   RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                   RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}]}], ",", " ", 
                  RowBox[{"h", " ", 
                   RowBox[{"Sin", "[", " ", 
                    RowBox[{"2", " ", "Pi", " ", "n", " ", "t"}], "]"}]}]}], 
                 "}"}]}]}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
               " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Table", "[", " ", 
             RowBox[{
              RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
               RowBox[{"r", " ", ".", " ", 
                RowBox[{"{", " ", 
                 RowBox[{
                  RowBox[{"n1", " ", "+", " ", 
                   RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}], " ", "+", " ", 
                   RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
                 "}"}]}]}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
               " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Table", "[", " ", 
             RowBox[{
              RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
               RowBox[{"r", " ", ".", " ", 
                RowBox[{"{", " ", 
                 RowBox[{
                  RowBox[{"n1", " ", "+", 
                   RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
                 "}"}]}]}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
               " ", "}"}]}], " ", "]"}]}], "\[IndentingNewLine]", "}"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"indexLabel", "::", "usage"}], " ", "=", " ", 
         "\"\<\!\(\*SubscriptBox[\(k\), \(\(i\)\(\\\ \)\)]\)(or other \
character) in italic. indexLabel['k', 1]\>\""}], " ", ";"}], 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"indexLabel", " ", "=", " ", 
       RowBox[{
        RowBox[{"Subscript", "[", 
         RowBox[{
          RowBox[{"Style", "[", 
           RowBox[{"#1", ",", "Italic"}], "]"}], ",", " ", "#2"}], "]"}], " ",
         "&"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"kLable", "::", "usage"}], " ", "=", " ", 
         "\"\<\!\(\*SubscriptBox[\(k\), \(\(i\)\(\\\ \)\)]\)(or other \
character) in italic and colored by spring index. kLable[k]\>\""}], " ", 
        ";"}], "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"kLable", " ", "=", " ", 
       RowBox[{
        RowBox[{"Style", "[", " ", 
         RowBox[{
          RowBox[{"indexLabel", "[", 
           RowBox[{"\"\<k\>\"", ",", " ", "#"}], "]"}], ",", " ", 
          RowBox[{"FontColor", "\[Rule]", 
           RowBox[{"glConstSpringColors", "[", 
            RowBox[{"[", "#", "]"}], "]"}]}]}], " ", "]"}], " ", "&"}]}], " ",
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"massColors", " ", ":=", " ", 
       RowBox[{"(", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Darker", "[", 
           RowBox[{"{", " ", 
            RowBox[{
            "Blue", ",", " ", "Green", ",", " ", "Purple", ",", " ", "Red", 
             ",", " ", "Orange"}], " ", "}"}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"Mod", "[", 
             RowBox[{"#", ",", " ", "5"}], "]"}], " ", "+", " ", "1"}], "]"}],
           " ", "]"}], " ", "&"}], " ", ")"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"massLabel", " ", ":=", " ", 
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"indexLabel", "[", 
           RowBox[{"\"\<m\>\"", ",", " ", "#"}], "]"}], ",", " ", 
          RowBox[{"massColors", "[", "#", "]"}]}], "]"}], " ", "&"}]}], " ", 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"calcLineTable", "[", " ", 
        RowBox[{"n_List", ",", " ", "b_List", ",", " ", "i_List"}], " ", 
        "]"}], " ", ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"first", ",", " ", "second"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"first", ",", " ", "second"}], "}"}], " ", "=", " ", 
           "i"}], " ", ";", "\[IndentingNewLine]", 
          RowBox[{"Table", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Line", "[", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"n", "[", 
                   RowBox[{"[", "first", "]"}], "]"}]}], 
                 RowBox[{"b", "[", 
                  RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
                RowBox[{"j", " ", 
                 RowBox[{"b", "[", 
                  RowBox[{"[", "second", "]"}], "]"}]}]}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"n", "[", 
                  RowBox[{"[", "first", "]"}], "]"}], 
                 RowBox[{"b", "[", 
                  RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
                RowBox[{"j", " ", 
                 RowBox[{"b", "[", 
                  RowBox[{"[", "second", "]"}], "]"}]}]}]}], "}"}], " ", 
             "\[IndentingNewLine]", "]"}], " ", "\[IndentingNewLine]", ",", 
            " ", 
            RowBox[{"{", 
             RowBox[{"j", ",", " ", 
              RowBox[{"-", 
               RowBox[{"n", "[", 
                RowBox[{"[", "second", "]"}], "]"}]}], ",", " ", 
              RowBox[{"n", "[", 
               RowBox[{"[", "second", "]"}], "]"}]}], "}"}]}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
      " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"calcReciprocalBasis", "::", "usage"}], " ", "=", " ", 
         "\"\<Return a reciprocal frame basis for a set of vectors.  This \
doesn't include the 2 \[Pi] scaling that is common in solid state physics.  \
Example, displaying the desired Kronicker delta behaviour:\n\nb = \
{{2,1},{-1/4, 2}} ;\ng = calcReciprocalBasis[ b ] ;\n\n{g[[1]].loc[[1]],\
\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].loc[[1]],\
\[IndentingNewLine]g[[2]].loc[[2]]}\n\>\""}], " ", ";"}], 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"calcReciprocalBasis", "[", "loc_List", "]"}], " ", ":=", " ", 
       RowBox[{"Inverse", "[", " ", 
        RowBox[{"Transpose", "[", " ", "loc", " ", "]"}], " ", "]"}]}], " ", 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"pointsTable", "[", " ", 
        RowBox[{
        "mPosFirstCell_List", ",", " ", "latticeBasis_List", ",", " ", 
         "numberLatticeLinesToDisplay_List"}], " ", "]"}], " ", ":=", " ", 
       RowBox[{"Table", "[", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"mPosFirstCell", " ", "+", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", "j"}], "}"}], ".", " ", "latticeBasis"}]}], 
         "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", 
           RowBox[{"-", 
            RowBox[{"numberLatticeLinesToDisplay", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ",", 
           RowBox[{"numberLatticeLinesToDisplay", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "\[IndentingNewLine]", 
         ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", " ", 
           RowBox[{"-", 
            RowBox[{"numberLatticeLinesToDisplay", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
           RowBox[{"numberLatticeLinesToDisplay", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "\[IndentingNewLine]", 
        "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"nMassesFromLocArray", "[", "uLoc_", "]"}], " ", ":=", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Dimensions", "[", "uLoc", "]"}], " ", "//", " ", 
           "First"}], ")"}], " ", "-", "2"}], ")"}]}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"adjustedmoSel", "[", 
        RowBox[{"rNumM_", ",", "mOrigInd_", ",", "m1Ind_"}], "]"}], ":=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"rNumM", ">", "2"}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", " ", 
          RowBox[{
           RowBox[{"mOrigInd", "\[Equal]", "m1Ind"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"First", "[", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"Range", "[", "rNumM", "]"}], ",", "m1Ind"}], "]"}], 
            "]"}], ",", "\[IndentingNewLine]", "mOrigInd"}], " ", 
          "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"First", "@", 
          RowBox[{"Delete", "[", 
           RowBox[{
            RowBox[{"Range", "[", "2", "]"}], ",", "m1Ind"}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"constructKArrayElements", "[", " ", 
        RowBox[{"i_Integer", ",", " ", "j_Integer"}], "  ", "]"}], " ", ":=", 
       " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "a", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"a", " ", "=", " ", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"i", ",", " ", "j", ",", " ", 
                  RowBox[{"s", " ", 
                   RowBox[{"glConstNeighboringCellIndexes", "[", 
                    RowBox[{"[", "n", "]"}], "]"}]}]}], "}"}], " ", "\[Rule]",
                 " ", 
                RowBox[{"glConstKDefaults", "[", 
                 RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"s", ",", " ", 
                 RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], 
               ",", " ", 
               RowBox[{"{", 
                RowBox[{"n", ",", " ", "4"}], "}"}]}], " ", "]"}], ",", " ", 
             "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", " ", "[", " ", 
           RowBox[{
            RowBox[{"i", " ", "<", " ", "j"}], ",", " ", 
            RowBox[{"Append", "[", 
             RowBox[{"a", ",", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"i", ",", "j", ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0"}], "}"}]}], "}"}], " ", "\[Rule]", 
               " ", 
               RowBox[{"glConstKDefaults", "[", 
                RowBox[{"[", "5", "]"}], "]"}]}]}], "]"}], ",", " ", "a"}], 
           " ", "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"constructKArray", "[", " ", "r_Integer", " ", "]"}], " ", ":=",
        " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"constructKArrayElements", "[", 
            RowBox[{"i", ",", "j"}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "r"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"j", ",", "r"}], "}"}]}], "]"}], ",", " ", "2"}], "]"}]}],
       " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"returnAlteredKArrayElements", "[", 
        RowBox[{
        "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", 
         "ni_Integer", ",", "v_"}], "]"}], ":=", 
       RowBox[{"(", 
        RowBox[{"kA", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Rule", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"m1Ind", ",", "m2Ind", ",", 
                RowBox[{"glConstNeighboringCellIndexes", "[", 
                 RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "_"}], "]"}], 
            "\[RuleDelayed]", 
            RowBox[{"Rule", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"m1Ind", ",", "m2Ind", ",", 
                RowBox[{"glConstNeighboringCellIndexes", "[", 
                 RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "v"}], 
             "]"}]}], ",", 
           RowBox[{
            RowBox[{"Rule", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"m1Ind", ",", "m2Ind", ",", 
                RowBox[{"-", 
                 RowBox[{"glConstNeighboringCellIndexes", "[", 
                  RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "_"}], 
             "]"}], "\[RuleDelayed]", 
            RowBox[{"Rule", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"m1Ind", ",", "m2Ind", ",", 
                RowBox[{"-", 
                 RowBox[{"glConstNeighboringCellIndexes", "[", 
                  RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "v"}], 
             "]"}]}]}], "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"returnAlteredKarrayOriginElement", "[", 
        RowBox[{
        "kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer", ",", "v_"}], 
        "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "m1oSet", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"m1oSet", "=", 
           RowBox[{"Append", "[", 
            RowBox[{
             RowBox[{"Sort", "[", 
              RowBox[{"{", 
               RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"kA", "/.", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Rule", "[", 
              RowBox[{"m1oSet", ",", "_"}], "]"}], "\[RuleDelayed]", 
             RowBox[{"Rule", "[", 
              RowBox[{"m1oSet", ",", "v"}], "]"}]}], ")"}]}]}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", "\n", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"To", " ", "refresh", " ", "k1"}], ",", "k2", ",", "k3", ",", 
        RowBox[{
        "k4", " ", "after", " ", "changing", " ", "m1Sel", " ", "or", " ", 
         RowBox[{"m2Sel", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"selectVFromKarray", "[", 
        RowBox[{
        "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", 
         "ni_Integer"}], "]"}], ":=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m1Ind", ",", "m2Ind", ",", 
           RowBox[{"glConstNeighboringCellIndexes", "[", 
            RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], "/.", "kA"}], ")"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "To", " ", "refresh", " ", "k5", " ", "after", " ", "changing", " ", 
        "m1Sel", " ", "and", " ", "moSel"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"selectOriginVFromKarray", "[", 
        RowBox[{"kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer"}], 
        "]"}], ":=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Append", "[", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "/.", "kA"}], ")"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"returnKarrayForAdditionalMassIndex", "[", " ", 
        RowBox[{"kA_List", ",", "nmNew_Integer"}], " ", "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "k2", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"k2", " ", "=", " ", 
           RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"constructKArrayElements", "[", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], ")"}],
               "/@", " ", 
              RowBox[{"(", 
               RowBox[{"Select", "[", 
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{
                   RowBox[{"Table", "[", " ", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", " ", "nmNew"}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", " ", "nmNew"}], "}"}]}], "]"}], ",", 
                   " ", "1"}], "]"}], ",", " ", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Max", "[", "#", "]"}], " ", "\[Equal]", " ", 
                   "nmNew"}], " ", "&"}]}], "]"}], ")"}]}], ",", " ", "2"}], 
            "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"kArray", ",", " ", "k2"}], "]"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"kA", ",", " ", "k2"}], "}"}], ",", " ", "1"}], 
           "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
        RowBox[{"uLoc_List", ",", "minAngle_"}], "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "t", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"t", " ", "=", " ", 
           RowBox[{"Abs", "[", 
            RowBox[{"ArcCos", "[", 
             RowBox[{
              RowBox[{"Normalize", "[", 
               RowBox[{"uLoc", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", ".", " ", 
              RowBox[{"Normalize", "[", 
               RowBox[{"uLoc", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}], "]"}]}], " ", 
          ";", "\[IndentingNewLine]", 
          RowBox[{"t", " ", "=", " ", 
           RowBox[{"If", " ", "[", " ", 
            RowBox[{
             RowBox[{"t", " ", ">", " ", 
              RowBox[{"Pi", "/", "2"}]}], ",", " ", 
             RowBox[{"Pi", "-", "t"}], ",", " ", "t"}], "]"}]}], " ", ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", " ", 
           RowBox[{
            RowBox[{"t", " ", "<", " ", "minAngle"}], ",", 
            "\[IndentingNewLine]", "glConstLocDefault", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"uLoc", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
              RowBox[{"uLoc", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"locDependent", "::", "usage"}], " ", "=", " ", 
         "\"\<Locator dependent calculations (i.e. based on the mass \
positions and the unit cell basis vectors)\n\nExample:\n\n\
locDependent[{1/2,1}, {1,1/2}, {{0.1,0.2} + {1/2,1} + {1,1/2}, {0.3, 0.5} - \
{1/2,1} - {1,1/2}}]\n\nWill see: {0.1,0.2}, {0.3, 0.5} ; as the mPosFirstCell \
values.\n\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"locDependent", "[", " ", 
        RowBox[{"uLoc_List", ",", "numMasses_Integer", ",", " ", "rma_List"}],
         " ", "]"}], "  ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "m", ",", "latticeBasis", ",", " ", "numberLatticeLinesToDisplay", 
           ",", "reciprocalBasis", ",", "mObliqueComponents", ",", " ", 
           "mPosFirstCell", ",", " ", "reciprocalNorms"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"latticeBasis", " ", "=", 
           RowBox[{"Take", "[", 
            RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"m", " ", "=", " ", 
           RowBox[{"Drop", "[", 
            RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"numberLatticeLinesToDisplay", " ", "=", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Ceiling", "[", "  ", 
               RowBox[{"Abs", "[", 
                RowBox[{"glConstWindowHalfWidth", "/", " ", 
                 RowBox[{
                  RowBox[{"latticeBasis", "[", 
                   RowBox[{"[", "#", "]"}], "]"}], "[", 
                  RowBox[{"[", "#", "]"}], "]"}]}], "]"}], "]"}], " ", "&"}], 
             " ", "/@", " ", 
             RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"reciprocalBasis", " ", "=", " ", 
           RowBox[{
           "calcReciprocalBasis", "[", " ", "latticeBasis", " ", "]"}]}], " ",
           ";", "\[IndentingNewLine]", 
          RowBox[{"reciprocalNorms", " ", "=", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Norm", "[", 
               RowBox[{"reciprocalBasis", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
             " ", 
             RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"mObliqueComponents", " ", "=", " ", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"m", "[", 
               RowBox[{"[", " ", "i", " ", "]"}], "]"}], " ", ".", " ", 
              RowBox[{"reciprocalBasis", "[", 
               RowBox[{"[", " ", "j", " ", "]"}], "]"}]}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"i", ",", " ", "numMasses"}], "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"j", ",", " ", "2"}], "}"}]}], "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"mPosFirstCell", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"m", "[", 
                RowBox[{"[", "#", "]"}], "]"}], " ", "-", " ", 
               RowBox[{
                RowBox[{"Floor", "[", 
                 RowBox[{"mObliqueComponents", "[", 
                  RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", ".", " ", 
                "latticeBasis"}]}], " ", ")"}], " ", "&"}], " ", "/@", " ", 
            RowBox[{"Range", "[", "numMasses", "]"}]}]}], " ", ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<mScalarArray\>\"", " ", "\[Rule]", " ", "rma"}], ",",
             "\[IndentingNewLine]", 
            RowBox[{
            "\"\<numberOfMasses\>\"", " ", "\[Rule]", " ", "numMasses"}], ",",
             "\[IndentingNewLine]", 
            RowBox[{
            "\"\<latticeBasis\>\"", " ", "\[Rule]", " ", "latticeBasis"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<latticeNorms\>\"", "\[Rule]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Norm", "[", 
                 RowBox[{"latticeBasis", "[", 
                  RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@",
                " ", 
               RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\<latticeUnitVectors\>\"", "\[Rule]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Normalize", "[", 
                 RowBox[{"latticeBasis", "[", 
                  RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@",
                " ", 
               RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
            "\"\<numberLatticeLinesToDisplay\>\"", "\[Rule]", " ", 
             "numberLatticeLinesToDisplay"}], ",", "\[IndentingNewLine]", 
            RowBox[{
            "\"\<reciprocalBasis\>\"", "\[Rule]", " ", "reciprocalBasis"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{
            "\"\<reciprocalNorms\>\"", "\[Rule]", " ", "reciprocalNorms"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<qMaxVec\>\"", " ", "\[Rule]", " ", 
             RowBox[{"(", 
              RowBox[{"2", " ", "Pi", " ", "reciprocalNorms"}], ")"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
            "\"\<mObliqueComponents\>\"", "\[Rule]", " ", 
             "mObliqueComponents"}], ",", "\[IndentingNewLine]", 
            RowBox[{
            "\"\<mPosFirstCell\>\"", "\[Rule]", " ", "mPosFirstCell"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\<pointsDataTable\>\"", "\[Rule]", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"pointsTable", "[", 
                  RowBox[{
                   RowBox[{"mPosFirstCell", "[", 
                    RowBox[{"[", "#", "]"}], "]"}], ",", "latticeBasis", ",", 
                   "numberLatticeLinesToDisplay"}], "]"}], ")"}], " ", "&"}], 
               "/@", " ", 
               RowBox[{"Range", "[", "numMasses", "]"}]}], ")"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\<lineTable\>\"", " ", "\[Rule]", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"calcLineTable", "[", " ", 
                 RowBox[{
                 "numberLatticeLinesToDisplay", ",", " ", "latticeBasis", ",",
                   " ", "#"}], " ", "]"}], " ", "&"}], " ", "/@", " ", 
               RowBox[{"Permutations", "[", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ")"}]}]}], 
           "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
      " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"projOp", "::", "usage"}], " ", "=", " ", 
         "\"\<given an input vector \!\(\*OverscriptBox[\(v\), \(\
\[RightVector]\)]\) = {\!\(\*SubscriptBox[\(v\), \(x\)]\), \
\!\(\*SubscriptBox[\(v\), \(y\)]\)}, compute the projection matrix operator \
along the unit vector in that direction.\n\n   projOp[{1, 0}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"1\", \"0\"},
{\"0\", \"0\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{0, 1}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"0\", \"0\"},
{\"0\", \"1\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{a,b}] // MatrixForm = \!\
\(\*Cell[TextData[Cell[BoxData[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{
FractionBox[
SuperscriptBox[\"a\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]},
{
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
SuperscriptBox[\"b\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}]],
CellChangeTimes->{{3.5990911441851797`*^9, 3.599091144641206*^9}, \
3.5990913830438423`*^9, 3.5990915191646276`*^9, 3.599091555028679*^9, \
3.599091735722014*^9, {3.599091916353346*^9, 3.599091928988068*^9}}]]]\)\n\
\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"projOpU", "[", "v_List", "]"}], " ", ":=", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"v", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "^", "2"}], ",", " ", 
           RowBox[{
            RowBox[{"v", "[", 
             RowBox[{"[", "1", "]"}], "]"}], 
            RowBox[{"v", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"v", "[", 
             RowBox[{"[", "1", "]"}], "]"}], 
            RowBox[{"v", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
           RowBox[{
            RowBox[{"v", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "^", "2"}]}], "}"}]}], "}"}]}], 
      " ", ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"projOp", "[", "v_List", "]"}], " ", ":=", " ", 
       RowBox[{
        RowBox[{"projOpU", "[", "v", "]"}], "/", 
        RowBox[{"(", 
         RowBox[{"v", ".", " ", "v"}], ")"}]}]}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"relativeDifferences", "::", "usage"}], " ", "=", " ", 
         "\"\<Example: relativeDifferences[ {aLoc,bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}}\>\""}], ",", " ", 
        RowBox[{
         RowBox[{
         "is", " ", "a", " ", "tuple", " ", "for", " ", "the", " ", "spring", 
          " ", "constant", " ", "between", " ", "m1", " ", "in", " ", "the", 
          " ", "origin", " ", "cell", " ", "to", " ", "m2", " ", "in", " ", 
          "the", " ", "lattice", " ", "cell", " ", 
          RowBox[{"{", 
           RowBox[{"n1", ",", "n2"}], "}"}]}], " ", ";"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"relativeDifferences", "[", " ", 
        RowBox[{"r_List", ",", "mp_List", ",", " ", 
         RowBox[{"{", 
          RowBox[{
          "mIndex1_Integer", ",", " ", "mIndex2_Integer", ",", " ", 
           "n_List"}], "}"}]}], "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "d", ",", " ", "pOrigin", ",", " ", "pOther", ",", " ", "dn"}], 
          "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"pOrigin", " ", "=", " ", 
           RowBox[{"mp", "[", 
            RowBox[{"[", " ", "mIndex1", " ", "]"}], "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"pOther", " ", "=", " ", 
           RowBox[{
            RowBox[{"mp", "[", 
             RowBox[{"[", " ", "mIndex2", " ", "]"}], "]"}], "+", " ", 
            RowBox[{"n", " ", ".", " ", "r"}]}]}], "  ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"d", " ", "=", " ", 
           RowBox[{"pOther", " ", "-", " ", "pOrigin"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"dn", " ", "=", " ", 
           RowBox[{"d", " ", ".", "d"}]}], " ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"dn", ",", " ", "pOrigin", ",", " ", "pOther", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"projOpU", "[", "d", "]"}], "/", "dn"}], "  ", 
             RowBox[{"(*", 
              RowBox[{"//", " ", "MatrixForm"}], "*)"}], ")"}]}], 
           "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
      " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"calculateCouplings", "::", "usage"}], " ", "=", " ", 
         "\"\<Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions.\>\""}], 
        " ", ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"calculateCouplings", "[", 
        RowBox[{"ld_List", ",", " ", "kA_List"}], "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "t", ",", " ", "t1", ",", " ", "t2", ",", " ", "r", ",", " ", "mp", 
           ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"r", ",", " ", "mp", ",", " ", "numberOfMasses"}], "}"}], 
           " ", "=", " ", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "\"\<latticeBasis\>\"", ",", " ", "\"\<mPosFirstCell\>\"", ",", 
              " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", 
            "ld"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"t", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Append", "[", 
              RowBox[{"#", ",", " ", 
               RowBox[{"relativeDifferences", "[", 
                RowBox[{"r", ",", " ", "mp", ",", " ", 
                 RowBox[{"First", "[", "#", "]"}]}], "]"}]}], " ", "]"}], 
             "&"}], "/@", " ", 
            RowBox[{"(", 
             RowBox[{"kA", "/.", " ", 
              RowBox[{"Rule", " ", "\[Rule]", " ", "List"}]}], ")"}]}]}], " ",
           ";", "\[IndentingNewLine]", 
          RowBox[{"t", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "}"}], ",", " ", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", "3", "]"}], "]"}]}], "}"}], ",", " ", "1"}], 
              "]"}], " ", "&"}], "/@", " ", "t"}]}], " ", ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"t1", " ", "=", " ", 
           RowBox[{"Table", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Sort", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"Select", "[", " ", 
                 RowBox[{"t", ",", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                    "i"}], ")"}], " ", "&&", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "\[NotEqual]", " ", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0"}], "}"}]}], ")"}]}], " ", 
                   "&"}]}], "]"}], ")"}], ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"#1", "[", 
                  RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
                 RowBox[{"#2", "[", 
                  RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
             "\[IndentingNewLine]", ",", " ", 
             RowBox[{"{", 
              RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
            "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"t2", " ", "=", " ", 
           RowBox[{"Select", "[", " ", 
            RowBox[{"t", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "3", "]"}], "]"}], " ", "==", " ", 
               RowBox[{"{", 
                RowBox[{"0", ",", " ", "0"}], "}"}]}], " ", "&"}]}], "]"}]}], 
          " ", ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"the", " ", "rest", " ", "of", " ", "the", " ", 
            RowBox[{"permutations", ":"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"t2", " ", "=", " ", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"t2", ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", " ", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}]}], "}"}], ",", " ", 
                   "1"}], "]"}], " ", "&"}], "/@", " ", "t2"}]}], "}"}], ",", 
             " ", "1"}], "]"}]}], "  ", ";", "\[IndentingNewLine]", 
          RowBox[{"t2", " ", "=", " ", 
           RowBox[{"Table", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Sort", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"Select", "[", " ", 
                 RowBox[{"t2", ",", " ", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                    "i"}], ")"}], " ", "&"}]}], "]"}], ")"}], ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"#1", "[", 
                  RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
                 RowBox[{"#2", "[", 
                  RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
             "\[IndentingNewLine]", ",", " ", 
             RowBox[{"{", 
              RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
            "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"t2", ",", " ", "t1"}], "}"}]}]}], "\[IndentingNewLine]", 
        "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"spScaled", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"s1_List", ",", "s2_List"}], "}"}], ",", " ", 
         "scaleKValue_", ",", " ", "referenceSepSquared_"}], "]"}], " ", ":=",
        " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "ds", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ds", " ", "=", " ", 
           RowBox[{"s2", " ", "-", " ", "s1"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"springPoints", "[", " ", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"s1", ",", "s2"}], "}"}], ",", 
            RowBox[{"Ceiling", "[", 
             RowBox[{"12", " ", "scaleKValue", " ", 
              RowBox[{"Sqrt", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"ds", ".", "ds"}], ")"}], "/", 
                "referenceSepSquared"}], "]"}]}], "]"}]}], " ", "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"plotSprings", "::", "usage"}], " ", "=", " ", 
         "\"\<Example:\n\nModule[{parameterLocatorDependencies},\
\[IndentingNewLine]parameterLocatorDependencies = locDependent[{1/2,1}, \
{1,1/2}, {{0.1,1.2} + {1/2,1} + {1,1/2}, {1.3, 0.5} - {1/2,1} - {1,1/2}}] ;\
\[IndentingNewLine]plotSprings[{10,20}, parameterLocatorDependencies ] \
\[IndentingNewLine]]\n\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"plotSprings", "[", 
        RowBox[{
        "uLoc_List", ",", " ", "ld_List", ",", "cd_List", ",", 
         "m1Ind_Integer", ",", " ", "m2Ind_Integer", ",", " ", 
         "moInd_Integer"}], "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "aLoc", ",", " ", "bLoc", ",", "mLoc", ",", "pointsList", ",", 
           "latticeBasis", ",", "reciprocalBasis", ",", "pointsDataTable", 
           ",", " ", "numberLatticeLinesToDisplay", ",", " ", "lines", ",", 
           " ", "cOrigin", ",", " ", "cN", ",", " ", "g", ",", " ", 
           "mScalarArray", ",", " ", "numberOfMasses", ",", " ", "scaleLoc"}],
           "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"latticeBasis", " ", "=", " ", 
           RowBox[{"Take", "[", " ", 
            RowBox[{"uLoc", ",", " ", "2"}], " ", "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"aLoc", " ", "=", " ", 
           RowBox[{"uLoc", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
          RowBox[{"bLoc", " ", "=", " ", 
           RowBox[{"uLoc", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
          RowBox[{"scaleLoc", " ", "=", " ", 
           RowBox[{
            RowBox[{"aLoc", ".", "aLoc"}], "  ", "+", " ", 
            RowBox[{"bLoc", " ", ".", "bLoc"}]}]}], " ", ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "mLoc", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
             "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
             "mScalarArray", ",", " ", "numberOfMasses"}], "}"}], "=", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "\"\<mPosFirstCell\>\"", ",", "\"\<reciprocalBasis\>\"", ",", 
              "\"\<pointsDataTable\>\"", ",", 
              "\"\<numberLatticeLinesToDisplay\>\"", ",", " ", 
              "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", 
              " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", 
            "ld"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pointsList", "[", "n_Integer", "]"}], " ", ":=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"massColors", "[", "n", "]"}], ",", 
             "\[IndentingNewLine]", ",", 
             RowBox[{"PointSize", "[", 
              RowBox[{"Sqrt", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"mScalarArray", "[", 
                  RowBox[{"[", "n", "]"}], "]"}], "/", "glConstMMax"}], "/", 
                "500"}], "]"}], "]"}], "\[IndentingNewLine]", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"Point", "[", " ", "#", " ", "]"}], " ", "&"}], " ", "/@",
               " ", 
              RowBox[{"pointsDataTable", "[", 
               RowBox[{"[", "n", "]"}], "]"}]}], "\[IndentingNewLine]", ",", 
             RowBox[{"Text", "[", 
              RowBox[{
               RowBox[{"massLabel", "[", " ", "n", "]"}], ",", 
               RowBox[{
                RowBox[{"mLoc", "[", 
                 RowBox[{"[", "n", "]"}], "]"}], " ", "+", " ", 
                "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
            "\[IndentingNewLine]", "}"}]}], " ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"cOrigin", " ", "=", " ", 
           RowBox[{"Select", "[", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"cd", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "[", 
              RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", " ", 
               RowBox[{"{", 
                RowBox[{"m1Ind", ",", " ", "moInd"}], "}"}]}], " ", "&"}]}], 
            " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
          RowBox[{"cN", " ", "=", " ", 
           RowBox[{"Select", "[", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"cd", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "[", 
              RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
               RowBox[{"{", 
                RowBox[{"m1Ind", ",", " ", "m2Ind"}], "}"}]}], "&"}]}], " ", 
            "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"g", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"spScaled", "[", 
                RowBox[{
                 RowBox[{"Take", "[", 
                  RowBox[{"#", ",", 
                   RowBox[{"{", 
                    RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", " ", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "4", "]"}], "]"}], "/", "glConstKMax"}], ",", 
                 " ", "scaleLoc"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
               "\[IndentingNewLine]", 
               RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                  "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", 
             "&"}], "/@", " ", "cN"}]}], " ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", " ", "[", " ", 
           RowBox[{
            RowBox[{"numberOfMasses", " ", ">", " ", "1"}], ",", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"g", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"spScaled", "[", 
                   RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", " ", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], "/", "glConstKMax"}], ",",
                     " ", "scaleLoc"}], "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
                  "\[IndentingNewLine]", 
                  RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                    "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", 
                "&"}], "/@", " ", "cOrigin"}]}], "]"}], ","}], " ", "]"}], 
          " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Show", "[", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Graphics", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"lines", "\[IndentingNewLine]", ",", "Blue", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"reciprocalBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                    RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]",
                     ",", "Thick", ",", 
                    RowBox[{"Arrowheads", "[", "0.05", "]"}], 
                    "\[IndentingNewLine]", ",", "Red", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"latticeBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                    RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]",
                     ",", 
                    RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"aLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"bLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
                   "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"pointsList", "[", "#", "]"}], " ", "&"}], "/@", 
                   " ", 
                   RowBox[{"Range", "[", "numberOfMasses", "]"}]}]}], 
                 "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", 
               ",", 
               RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", 
                    " ", "glConstWindowHalfWidth"}], "}"}], ",", " ", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", 
                    " ", "glConstWindowHalfWidth"}], "}"}]}], "}"}]}], 
               "\[IndentingNewLine]", ",", 
               RowBox[{
               "ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}]}], 
              "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "g"}],
             "\[IndentingNewLine]", "}"}], " ", "]"}]}]}], " ", 
        "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        FormBox[
         RowBox[{" ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"grab", " ", "data", " ", 
             RowBox[{"from", ":", " ", "rawArrayOfMasses"}]}], ",", " ", 
            "parameterLocatorDependencies", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"couplingData", "[", 
                RowBox[{"[", "_", "]"}], "]"}], "[", 
               RowBox[{"[", "_", "]"}], "]"}], "[", 
              RowBox[{"[", "_", "]"}], "]"}], " ", "=", " ", 
             RowBox[{"{", 
              RowBox[{"k", ",", " ", "j", ",", " ", 
               OverscriptBox["m", "\[RightVector]"], ",", " ", 
               SubscriptBox["K", 
                RowBox[{
                 OverscriptBox["n", "\[RightVector]"], ",", 
                 RowBox[{"k", ";", 
                  OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], ",", 
               " ", 
               SuperscriptBox[
                SubscriptBox[
                 OverscriptBox["a", "\[RightVector]"], 
                 RowBox[{
                  OverscriptBox["m", "\[RightVector]"], ",", 
                  RowBox[{"j", ";", 
                   OverscriptBox["0", "\[RightVector]"]}], ",", "k"}]], "2"], 
               ",", " ", 
               SubscriptBox[
                OverscriptBox["p", "\[RightVector]"], "k"], ",", " ", 
               RowBox[{
                SubscriptBox[
                 OverscriptBox["r", "\[RightVector]"], 
                 OverscriptBox["m", "\[RightVector]"]], " ", "+", " ", 
                SubscriptBox[
                 OverscriptBox["p", "\[RightVector]"], "j"]}], ",", " ", 
               SubscriptBox["Proj", 
                SubscriptBox[
                 OverscriptBox["a", "\[RightVector]"], 
                 RowBox[{
                  OverscriptBox["m", "\[RightVector]"], ",", 
                  RowBox[{"j", ";", 
                   OverscriptBox["0", "\[RightVector]"]}], ",", "k"}]]]}], 
              "}"}]}]}], "\[IndentingNewLine]", 
           RowBox[{"ex", ":", " ", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", "0.5`", ",", 
              "1.`", ",", 
              RowBox[{"{", 
               RowBox[{"0.9`", ",", "0.7`"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.30000000000000004`", ",", 
                RowBox[{"-", "0.10000000000000009`"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0.36`", ",", "0.48`"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.48`", ",", "0.6400000000000001`"}], "}"}]}], 
               "}"}]}], "}"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
            "to", " ", "form", " ", "equations", " ", "of", " ", "the", " ", 
             RowBox[{"form", ":", "\[IndentingNewLine]", 
              RowBox[{
               SuperscriptBox["\[Omega]", "2"], " ", 
               RowBox[{
                SubscriptBox[
                 OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
                OverscriptBox["q", "\[RightVector]"], ")"}]}]}]}], " ", "=", 
            " ", 
            RowBox[{
             UnderscriptBox["\[Sum]", 
              RowBox[{
               OverscriptBox["0", "\[RightVector]"], ",", 
               RowBox[{"k", " ", "\[NotEqual]", " ", 
                OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
             RowBox[{
              SubscriptBox["K", 
               RowBox[{
                OverscriptBox["0", "\[RightVector]"], ",", 
                RowBox[{"k", ";", 
                 OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
              SubscriptBox["Proj", 
               SubscriptBox[
                OverscriptBox["a", "^"], 
                RowBox[{
                 OverscriptBox["n", "\[RightVector]"], ",", 
                 RowBox[{"k", ";", 
                  OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
              RowBox[{"(", 
               RowBox[{
                FractionBox[
                 RowBox[{
                  SubscriptBox[
                   OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
                  OverscriptBox["q", "\[RightVector]"], ")"}], 
                 SubscriptBox["m", "k"]], "-", " ", 
                RowBox[{
                 FractionBox[
                  RowBox[{
                   SubscriptBox[
                    OverscriptBox["\[Epsilon]", "\[RightVector]"], "j"], "(", 
                   OverscriptBox["q", "\[RightVector]"], ")"}], 
                  SqrtBox[
                   RowBox[{
                    SubscriptBox["m", "k"], 
                    SubscriptBox["m", "j"]}]]], 
                 SuperscriptBox["e", 
                  RowBox[{"I", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    SubscriptBox[
                    OverscriptBox["r", "\[RightVector]"], 
                    OverscriptBox["m", "\[RightVector]"]], " ", ".", " ", 
                    OverscriptBox["q", "\[RightVector]"]}], " ", ")"}]}]]}]}],
                ")"}]}]}]}]}]}],
         TraditionalForm], "\[IndentingNewLine]", "Note", " ", "that", " ", 
        "qVec", " ", "here", " ", "is", " ", "intended", " ", "to", " ", "be",
         " ", "an", " ", "undefined", " ", 
        RowBox[{"global", ".", "  ", "Is"}], " ", "there", " ", "a", " ", 
        "way", " ", "to", " ", "do", " ", "that", " ", 
        RowBox[{"programatically", "?"}]}], "\[IndentingNewLine]", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"oneTermOfdynamicsMatrix", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "k_Integer", ",", " ", "j_Integer", ",", " ", "mVec_List", ",", " ",
            "kS_", ",", " ", "_", ",", "_", ",", "_", ",", "proj_List"}], 
          "}"}], ",", " ", "r_List", ",", " ", "mk_", ",", " ", 
         "epsilon_List", ",", " ", "mA_List"}], "]"}], " ", ":=", " ", 
       RowBox[{"(", 
        RowBox[{"kS", " ", 
         RowBox[{"proj", "  ", ".", 
          RowBox[{"(", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"epsilon", "[", 
              RowBox[{"[", "k", "]"}], "]"}], "/", "mk"}], " ", "-", " ", 
            RowBox[{
             RowBox[{"epsilon", "[", 
              RowBox[{"[", "j", "]"}], "]"}], 
             RowBox[{
              RowBox[{"E", "^", 
               RowBox[{"(", 
                RowBox[{"I", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"mVec", " ", ".", " ", "r"}], ")"}], ".", " ", 
                   "qVec"}], ")"}]}], ")"}]}], "/", 
              RowBox[{"Sqrt", "[", " ", 
               RowBox[{"mk", " ", 
                RowBox[{"mA", "[", 
                 RowBox[{"[", "j", "]"}], "]"}]}], " ", "]"}]}]}]}], 
           ")"}]}]}], "  ", ")"}]}], "  ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"dynamicsMatrix", "[", 
        RowBox[{"ld_List", ",", " ", "cd_List"}], "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "cdFlatAndSorted", ",", " ", "r", ",", " ", "res", ",", " ", 
           "epsilon", ",", " ", "m", ",", "mScalarArray", ",", " ", 
           "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"cdFlatAndSorted", " ", "=", " ", 
           RowBox[{"SplitBy", "[", " ", 
            RowBox[{
             RowBox[{"Sort", "@", 
              RowBox[{"Flatten", "[", 
               RowBox[{"cd", ",", " ", "2"}], "]"}]}], " ", ",", " ", 
             "First"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"r", ",", "mScalarArray", ",", " ", "numberOfMasses"}], 
            "}"}], " ", "=", " ", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "\"\<latticeBasis\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", 
              " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", 
            "ld"}]}], " ", ";", " ", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{
             RowBox[{"Here", " ", 
              SubscriptBox[
               OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], " ", 
              RowBox[{"(", 
               RowBox[{"=", 
                RowBox[{"epsilon", "[", 
                 RowBox[{"[", "k", "]"}], "]"}]}], ")"}], " ", "is", " ", 
              "represented", " ", "as", " ", "a", " ", "2", "x", 
              RowBox[{"(", 
               RowBox[{"2", "N"}], ")"}], " ", "matrix", " ", "with", " ", 
              "the", " ", "vector", " ", "factored", " ", 
              RowBox[{"out", ".", "  ", "For"}], " ", "example", " ", "with", 
              " ", "N"}], " ", "=", " ", "3"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{
             SubscriptBox[
              OverscriptBox["\[Epsilon]", "\[RightVector]"], "1"], "=", " ", 
             RowBox[{
              RowBox[{
               TagBox[
                RowBox[{"(", "\[NoBreak]", GridBox[{
                   {"1", "0", "0", "0", "0", "0"},
                   {"0", "1", "0", "0", "0", "0"}
                  },
                  
                  GridBoxAlignment->{
                   "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                  GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
                Function[BoxForm`e$, 
                 MatrixForm[BoxForm`e$]]], "\[IndentingNewLine]", 
               "\[IndentingNewLine]", "This", " ", "will", " ", "be", " ", 
               "pre"}], "-", 
              RowBox[{
              "multiplied", " ", "by", " ", "a", " ", "2", "x2", " ", 
               "projection", " ", 
               RowBox[{"matrix", ".", "\[IndentingNewLine]", "The"}], " ", 
               "whole", " ", "thing", " ", "should", " ", "be", " ", 
               "logically", " ", "treated", " ", "as", " ", "if", " ", "it", 
               " ", "is", " ", "post"}], "-", 
              RowBox[{
              "multiplied", " ", "by", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", Cell[TextData[Cell[BoxData[
                TagBox[
                 RowBox[{"(", "\[NoBreak]", GridBox[{
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "1"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "2"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "1"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "2"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "1"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "2"}]]}
                   },
                   
                   GridBoxAlignment->{
                    "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                   GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
                 Function[BoxForm`e$, 
                  MatrixForm[BoxForm`e$]]]],
                
                CellChangeTimes->{{3.600871330362259*^9, 
                 3.6008713538916054`*^9}}]]]}]}]}]}], "\[IndentingNewLine]", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"epsilon", " ", "=", " ", 
           RowBox[{"Partition", "[", 
            RowBox[{
             RowBox[{"IdentityMatrix", "[", " ", 
              RowBox[{"2", " ", "numberOfMasses"}], " ", "]"}], ",", "2"}], 
            "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"res", " ", "=", " ", 
           RowBox[{"Partition", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Table", "[", " ", 
               RowBox[{
                RowBox[{"Total", "@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"oneTermOfdynamicsMatrix", "[", 
                    RowBox[{"#", ",", " ", "r", ",", " ", 
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", " ", "epsilon", ",", 
                    " ", "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
                   RowBox[{"(", 
                    RowBox[{"cdFlatAndSorted", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ")"}]}], ",", 
                " ", 
                RowBox[{"{", 
                 RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], "]"}], 
              " ", "//", " ", "Flatten"}], ",", " ", 
             RowBox[{"2", " ", "numberOfMasses"}]}], "]"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"res", " ", "/.", " ", 
            RowBox[{"qVec", " ", "\[Rule]", " ", "#"}]}], " ", "&"}]}]}], " ",
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{";", 
          RowBox[{"cdFlatAndSorted", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{";", 
          RowBox[{"mScalarArray", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{";", 
          RowBox[{
           RowBox[{
            RowBox[{"oneTermOfdynamicsMatrix", "[", 
             RowBox[{"#", ",", " ", "r", ",", " ", 
              RowBox[{"mScalarArray", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", " ", 
              "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"cdFlatAndSorted", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{";", "res"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{";", "epsilon"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{";", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"oneTermOfdynamicsMatrix", "[", " ", 
              RowBox[{
              "parameterLocatorDependencies", ",", " ", "couplingData"}], " ",
               "]"}], "[", 
             RowBox[{"#", ",", " ", "r", ",", 
              RowBox[{"mScalarArray", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", 
              "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"cd", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
        "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"calcDynamics", "::", "usage"}], " ", "=", " ", 
         "\"\<a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\
\),\!\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each \
of the system eigenvalues, when evaluated at qLoc\>\""}], " ", ";"}], 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"calcDynamics", "[", "mAtQ_List", "]"}], " ", ":=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Sqrt", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Eigensystem", "[", " ", "mAtQ", " ", "]"}], " ", "//", 
           " ", "Transpose"}], ")"}]}], ")"}]}], "  ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"showDynamics", "[", 
        RowBox[{
        "ld_List", ",", " ", "dynAtOmegaIndex_List", ",", " ", "sc_", ",", 
         " ", "ql_"}], "]"}], " ", ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "pointsDataTable", ",", "numberLatticeLinesToDisplay", ",", " ", 
           "e", ",", " ", "omega", ",", " ", "points", ",", " ", "lines", ",",
            " ", "nu", ",", " ", "a", ",", "b", ",", " ", "mScalarArray", ",",
            " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"a", ",", " ", "b"}], "}"}], ",", "pointsDataTable", 
             ",", "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
             "mScalarArray", ",", " ", "numberOfMasses"}], "}"}], "=", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "\"\<latticeBasis\>\"", ",", "\"\<pointsDataTable\>\"", ",", 
              "\"\<numberLatticeLinesToDisplay\>\"", ",", " ", 
              "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", 
              " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", 
            "ld"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"omega", ",", " ", "e"}], "}"}], " ", "=", " ", 
           "dynAtOmegaIndex"}], " ", ";", "\[IndentingNewLine]", 
          RowBox[{"e", " ", "=", " ", 
           RowBox[{"Partition", "[", 
            RowBox[{"e", ",", "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{"points", " ", "=", " ", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"pointsDataTable", "[", 
                RowBox[{"[", "k", "]"}], "]"}], " ", "+", " ", 
               RowBox[{"Table", "[", " ", "\[IndentingNewLine]", " ", 
                RowBox[{
                 RowBox[{"sc", " ", 
                  RowBox[{"Re", "[", 
                   RowBox[{
                    RowBox[{"e", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], " ", 
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"I", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    RowBox[{"ql", " ", ".", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"a", " ", "i"}], " ", "+", " ", 
                    RowBox[{"b", " ", "j"}]}], ")"}]}], " ", "-", " ", 
                    RowBox[{"omega", " ", "#"}]}], ")"}]}], ")"}]}]}], " ", 
                   "]"}]}], "\[IndentingNewLine]", ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", " ", 
                   RowBox[{"-", 
                    RowBox[{"numberLatticeLinesToDisplay", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                   RowBox[{"numberLatticeLinesToDisplay", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{"{", 
                  RowBox[{"j", ",", " ", 
                   RowBox[{"-", 
                    RowBox[{"numberLatticeLinesToDisplay", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                   RowBox[{"numberLatticeLinesToDisplay", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], 
                "\[IndentingNewLine]", "]"}]}], " ", "&"}], ",", 
             RowBox[{"{", 
              RowBox[{"k", ",", "numberOfMasses"}], "}"}]}], "]"}]}], " ", 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"nu", " ", "=", " ", 
           RowBox[{"2", " ", "Pi", " ", 
            RowBox[{"If", "[", " ", 
             RowBox[{
              RowBox[{"omega", " ", "\[Equal]", " ", "0"}], ",", " ", "1", 
              ",", " ", 
              RowBox[{"1", "/", "omega"}]}], "]"}]}]}], " ", ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Show", "[", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"ListPlot", "[", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"points", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "[", 
                    RowBox[{"nu", " ", "#"}], "]"}], "\[IndentingNewLine]", 
                   ",", 
                   RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", 
                    " ", "glConstWindowHalfWidth"}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", 
                    " ", "glConstWindowHalfWidth"}], "}"}]}], "}"}]}], 
                   "\[IndentingNewLine]", ",", 
                   RowBox[{
                   "ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], 
                   "\[IndentingNewLine]", ",", " ", 
                   RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "/", "glConstMMax"}], "/",
                     "350"}], "]"}], "]"}], ",", 
                    RowBox[{"massColors", "[", "k", "]"}]}], "]"}]}]}], 
                  "\[IndentingNewLine]", "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"k", ",", "numberOfMasses"}], "}"}]}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Graphics", "[", 
                RowBox[{
                "{", "\[IndentingNewLine]", "lines", "\[IndentingNewLine]", 
                 "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], " ", 
            "&"}], ")"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"frequencyPlotCalc", "::", "usage"}], " ", "=", " ", 
         "\"\<frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
meshSize]\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"frequencyPlotCalc", "[", 
        RowBox[{"ld_List", ",", "m_", ",", "meshSz_Integer"}], "]"}], " ", ":=",
        " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "eigTable2D", ",", " ", "eigTable1D", ",", " ", "qMax", ",", " ", 
           "omegaPointList2D", ",", " ", "omegaPointList1D", ",", " ", 
           "range", ",", " ", "numberOfMasses"}], "}"}], ",", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"qMax", ",", " ", "numberOfMasses"}], "}"}], " ", "=", 
           " ", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<qMaxVec\>\"", ",", "\"\<numberOfMasses\>\""}], 
             "}"}], " ", "/.", " ", "ld"}]}], " ", ";", "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{"eigTable2D", " ", "=", " ", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Re", "[", 
              RowBox[{"Table", "[", "  ", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"qx", ",", " ", "qy"}], "}"}], " ", ",", 
                  RowBox[{"Eigenvalues", "[", " ", 
                   RowBox[{
                    RowBox[{"m", "[", " ", 
                    RowBox[{"{", 
                    RowBox[{"qx", ",", " ", "qy"}], "}"}], "  ", "]"}], " ", "//",
                     " ", "N"}], " ", "]"}]}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"qx", ",", " ", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"qMax", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                  RowBox[{
                   RowBox[{"qMax", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/", "2"}], ",", " ", 
                  RowBox[{
                   RowBox[{"qMax", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/", " ", "meshSz"}]}], 
                 "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"qy", ",", " ", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"qMax", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                  RowBox[{
                   RowBox[{"qMax", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/", "2"}], ",", " ", 
                  RowBox[{
                   RowBox[{"qMax", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/", " ", "meshSz"}]}], 
                 "}"}]}], " ", "]"}], " ", "]"}], ",", "1"}], "]"}]}], " ", 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"omegaPointList2D", "[", "nn_", "]"}], " ", ":=", "  ", 
           RowBox[{
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"Sqrt", "[", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
                 RowBox[{"[", "nn", "]"}], "]"}]}], "}"}], "]"}], "&"}], "/@",
             " ", "eigTable2D"}]}], "  ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"range", " ", "=", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"2", " ", "numberOfMasses"}], ")"}], " ", "//", " ", 
             "Range"}], ")"}]}], " ", ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"ListPlot3D", "[", " ", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"omegaPointList2D", "[", "#", "]"}], " ", "&"}], "/@", 
             " ", "range"}], ",", " ", 
            RowBox[{"PlotRange", " ", "\[Rule]", " ", "Full"}], " ", ",", " ", 
            RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], 
            ",", 
            RowBox[{"AxesLabel", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
              "\"\<\!\(\*SubscriptBox[\(q\), \(x\)]\)\>\"", ",", " ", 
               "\"\<\!\(\*SubscriptBox[\(q\), \(y\)]\)\>\""}], "}"}]}]}], 
           "]"}]}]}], "\[IndentingNewLine]", "]"}]}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"showFreqPlot", "[", " ", 
        RowBox[{"qPlaneLoc", ",", " ", "freqPlot"}], " ", "]"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"showFreqPlot", "[", 
        RowBox[{"qpl_List", ",", " ", "freqPlotData_"}], "]"}], " ", ":=", 
       " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"aa", ",", " ", "bb"}], "}"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"aa", ",", " ", "bb"}], "}"}], " ", "=", "  ", "qpl"}], 
          " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Show", "[", 
           RowBox[{"{", 
            RowBox[{"freqPlotData", ",", "\[IndentingNewLine]", 
             RowBox[{"Graphics3D", "[", " ", 
              RowBox[{"Polygon", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"aa", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                   RowBox[{"aa", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", 
                 " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"bb", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                   RowBox[{"bb", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", 
                 "  ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"bb", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                   RowBox[{"bb", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"aa", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                   RowBox[{"aa", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}]}], 
                "}"}], "]"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
           "]"}]}]}], "\[IndentingNewLine]", "]"}]}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"u", " ", "=", " ", 
       RowBox[{"Flatten", "[", " ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], "}"}], ",", 
         " ", "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
       RowBox[{"locDependent", "[", " ", 
        RowBox[{"u", ",", " ", "rawNumberOfMasses", ",", "rawArrayOfMasses"}],
         " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      RowBox[{"kArray", " ", "=", " ", 
       RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", "n", "}"}], ",", 
        RowBox[{
         RowBox[{"n", " ", "=", " ", "2"}], " ", ";", 
         RowBox[{"While", "[", 
          RowBox[{
           RowBox[{"n", "\[LessEqual]", "rawNumberOfMasses"}], ",", 
           RowBox[{
            RowBox[{"kArray", " ", "=", " ", 
             RowBox[{"returnKarrayForAdditionalMassIndex", "[", 
              RowBox[{"kArray", ",", "n"}], "]"}]}], " ", ";", " ", 
            RowBox[{"n", "++"}]}]}], "]"}]}]}], " ", "]"}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"qLoc", " ", "=", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
         "\"\<qMaxVec\>\"", " ", "/.", " ", "parameterLocatorDependencies"}], 
         ")"}], "/", "2"}]}], " ", ";", "\[IndentingNewLine]", 
      RowBox[{"qPlaneLoc", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
      "\[IndentingNewLine]", 
      RowBox[{"couplingData", " ", "=", " ", 
       RowBox[{"calculateCouplings", "[", " ", 
        RowBox[{"parameterLocatorDependencies", ",", " ", "kArray"}], " ", 
        "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"bRefreshMatrix", ":", " ", 
         RowBox[{"dependent", " ", "on"}], ":", " ", 
         "parameterLocatorDependencies"}], ",", " ", "couplingData"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"matrix", " ", "=", " ", 
       RowBox[{"dynamicsMatrix", "[", " ", 
        RowBox[{"parameterLocatorDependencies", ",", " ", "couplingData"}], 
        " ", "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"bRefreshDynamics", ":", " ", 
         RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", "qLoc", 
        ","}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"dynamics", " ", "=", " ", 
       RowBox[{"calcDynamics", "[", " ", 
        RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}]}], " ", 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"bRefreshDynPlot", ":", " ", 
         RowBox[{"dependent", " ", "on", " ", "dynamics"}]}], ",", " ", 
        "omegaIndex", ",", " ", "scale"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"dynPlot", " ", "=", " ", 
       RowBox[{"showDynamics", "[", " ", 
        RowBox[{"parameterLocatorDependencies", ",", " ", 
         RowBox[{"dynamics", "[", 
          RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale", ",", 
         " ", "qLoc"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"bRefreshFreqPlot", ":", " ", 
         RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
        "meshSize"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"freqPlot", " ", "=", " ", 
       RowBox[{"frequencyPlotCalc", "[", " ", 
        RowBox[{
        "parameterLocatorDependencies", ",", " ", "matrix", ",", " ", 
         "meshSize"}], "]"}]}], " ", ";"}], "\[IndentingNewLine]", "}"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.6012856991198053`*^9, 3.601285748872651*^9}, {
   3.6012859053636017`*^9, 3.6012860895571375`*^9}, 3.6012861966102605`*^9, 
   3.6012862451990395`*^9, {3.601286323980545*^9, 3.601286325903655*^9}, {
   3.6012897158895516`*^9, 3.601289757803949*^9}, {3.601289975679411*^9, 
   3.601290010657411*^9}, 3.6012903878479853`*^9, 3.601290508670896*^9, 
   3.6012905692553616`*^9, {3.601290616078039*^9, 3.6012906891772203`*^9}, {
   3.6012907218100867`*^9, 3.601290762882436*^9}, {3.601290798035447*^9, 
   3.601290830856324*^9}, 3.6012908640212207`*^9, {3.6012909143490996`*^9, 
   3.6012909145471106`*^9}, 3.601290953958365*^9, 3.6012912884985*^9, 
   3.601292661648039*^9, 3.601292801025011*^9, {3.60129343233712*^9, 
   3.601293432742143*^9}, {3.6012936972312713`*^9, 3.601293697420282*^9}, {
   3.601293746641097*^9, 3.6012937466790996`*^9}, {3.6012939318926935`*^9, 
   3.6012939323037167`*^9}, {3.601294122251581*^9, 3.601294122467593*^9}, 
   3.6012942551301813`*^9, {3.6012944188215437`*^9, 3.601294442762913*^9}, 
   3.6012945563934126`*^9, {3.6012947238489904`*^9, 3.601294724282015*^9}, {
   3.601294819100438*^9, 3.601294822709645*^9}, {3.601294854070439*^9, 
   3.6012948700413523`*^9}, {3.6012949096116157`*^9, 3.60129491161473*^9}, {
   3.6012949467127376`*^9, 3.6012949997707725`*^9}, {3.6012950467344584`*^9, 
   3.6012951491413155`*^9}, {3.601295359317337*^9, 3.6012953849268017`*^9}, {
   3.601295418964749*^9, 3.601295420398831*^9}, {3.601295453499724*^9, 
   3.6012955534934435`*^9}, {3.6012956581504297`*^9, 3.601295662191661*^9}, {
   3.601295721258039*^9, 3.6012957219340773`*^9}, {3.6012957646705217`*^9, 
   3.6012957896289496`*^9}, {3.6012958529855733`*^9, 
   3.6012958586618977`*^9}, {3.601295913976062*^9, 3.6012959436967616`*^9}, {
   3.601296341996543*^9, 3.6012964001018667`*^9}, {3.601336678098962*^9, 
   3.601336680790116*^9}, {3.6013367235775633`*^9, 3.6013367790977387`*^9}, {
   3.6013369349916553`*^9, 3.601336936211725*^9}, {3.6013370383875694`*^9, 
   3.6013370750826683`*^9}, 3.6013371429395494`*^9, 3.601337566315765*^9, {
   3.601338513955967*^9, 3.6013385337200975`*^9}, {3.60133922645572*^9, 
   3.6013396338640223`*^9}, {3.6013396705321193`*^9, 3.6013397023859415`*^9}, 
   3.6013397521847897`*^9, 3.6013397842236223`*^9, {3.6013414267195673`*^9, 
   3.6013414779554977`*^9}, {3.601341510226344*^9, 3.601341553452816*^9}, {
   3.6013416074459047`*^9, 3.601341732179039*^9}, {3.6013417709832582`*^9, 
   3.601341773048376*^9}, {3.6013418030950947`*^9, 3.601341829328595*^9}, {
   3.6013418853628006`*^9, 3.60134192539209*^9}, {3.6013420837631483`*^9, 
   3.601342091228575*^9}, {3.6013421244354744`*^9, 3.6013421255055356`*^9}, {
   3.6013424243136263`*^9, 3.6013424628088284`*^9}, {3.6013425669597855`*^9, 
   3.60134260410191*^9}, {3.601342653128714*^9, 3.60134269118089*^9}, {
   3.6013427434898825`*^9, 3.6013428183741655`*^9}, {3.6013428554752874`*^9, 
   3.6013429284744625`*^9}, {3.601343155348439*^9, 3.6013431748575554`*^9}, {
   3.6013432402402945`*^9, 3.601343243047456*^9}, {3.6013728841012077`*^9, 
   3.601372898139011*^9}, 3.6013732103028655`*^9, {3.6013736062875147`*^9, 
   3.601373617186138*^9}, {3.6013736703691797`*^9, 3.6013736757484875`*^9}, {
   3.6013737644445605`*^9, 3.6013738259320774`*^9}, {3.601373880318188*^9, 
   3.6013738807622137`*^9}, {3.601373930592064*^9, 3.6013740138608265`*^9}, 
   3.6013740833438005`*^9, {3.6013743921204615`*^9, 3.6013743995508866`*^9}, {
   3.601376004654693*^9, 3.6013760652761607`*^9}, {3.6013761073615675`*^9, 
   3.601376109726703*^9}, {3.6013762418632607`*^9, 3.6013762706199055`*^9}, {
   3.6013764217675505`*^9, 3.6013764421647177`*^9}, {3.6013764852931843`*^9, 
   3.601376534031972*^9}, 3.6013767594198637`*^9, {3.601376798212082*^9, 
   3.6013768123988934`*^9}, {3.601376842723628*^9, 3.6013768470198736`*^9}, 
   3.6013769814775643`*^9, {3.6013770607510986`*^9, 3.6013770804222236`*^9}, {
   3.6013771146021786`*^9, 3.601377267127903*^9}, {3.6013776406582675`*^9, 
   3.6013777043149085`*^9}, {3.60137774106301*^9, 3.601377776794054*^9}, {
   3.6013778998590927`*^9, 3.6013779615506215`*^9}, {3.6013780025319653`*^9, 
   3.601378107712981*^9}, {3.601378187923569*^9, 3.6013781888226204`*^9}, {
   3.601378541843812*^9, 3.6013785438579273`*^9}, {3.601378606400505*^9, 
   3.6013786399894257`*^9}, 3.6013789710053587`*^9, {3.601379244924026*^9, 
   3.6013792601378965`*^9}, {3.6013797062534127`*^9, 3.601379814705616*^9}, {
   3.6013800450787926`*^9, 3.6013801333048387`*^9}, {3.6013801681638327`*^9, 
   3.601380174497195*^9}, 3.601380332364224*^9, {3.6013804134238605`*^9, 
   3.601380422033353*^9}, 3.6013807242136364`*^9, {3.6013808932393045`*^9, 
   3.601380911144328*^9}, {3.6013809766870775`*^9, 3.601380980871317*^9}, {
   3.6013810504522963`*^9, 3.601381055250571*^9}, 3.6013810887984896`*^9, {
   3.6013811956085987`*^9, 3.601381198745778*^9}, 3.6013815380711865`*^9, 
   3.601381569981012*^9, {3.6013818768465633`*^9, 3.6013818892262716`*^9}, {
   3.6013819268874254`*^9, 3.6013819321247253`*^9}, {3.601381966633699*^9, 
   3.601382005394916*^9}, {3.6013820818052864`*^9, 3.601382093712968*^9}, {
   3.6013821327572007`*^9, 3.601382246165687*^9}, {3.601384091891257*^9, 
   3.6013841028678846`*^9}, {3.60138417499401*^9, 3.6013843173251505`*^9}},
 CellID->52826071],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    True, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}}, {{
       2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}, {{
       3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}, {
       3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}}, {{{
       1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
        0.09999999999999987}, {{
        0.19999999999999987`, -0.3999999999999999}, {-0.3999999999999999, 
        0.8}}}, {
       1, 2, {-1, 0}, 0.25, 1., {0.9, 0.7}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       1, 2, {-1, 1}, 0.25, 1.6899999999999995`, {0.9, 0.7}, {
        2.1999999999999997`, 0.7}, {{0.9999999999999999, 0.}, {0., 0.}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 3, {0, -1}, 0.25, 2.2600000000000002`, {0.9, 
        0.7}, {-0.5999999999999999, 0.5999999999999999}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       1, 3, {1, -1}, 0.25, 3.3999999999999995`, {0.9, 
        0.7}, {-0.4999999999999998, 1.9}, {{
        0.5764705882352942, -0.4941176470588236}, {-0.4941176470588236, 
        0.423529411764706}}}, {
       1, 2, {1, 0}, 0.25, 3.4000000000000004`, {0.9, 0.7}, {0.5, 2.5}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 2, {0, 1}, 0.25, 3.65, {0.9, 0.7}, {2.3, 2.}, {{0.5369863013698629, 
        0.4986301369863013}, {0.4986301369863013, 0.463013698630137}}}, {
       1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 2.7}, {{
        0.05882352941176473, 0.23529411764705888`}, {0.23529411764705888`, 
        0.9411764705882353}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 3, {-1, -1}, 0.25, 4.520000000000001, {0.9, 
        0.7}, {-0.7, -0.7000000000000002}, {{0.5663716814159291, 
        0.49557522123893794`}, {0.49557522123893794`, 
        0.43362831858407075`}}}, {
       1, 3, {-1, 1}, 0.25, 4.879999999999999, {0.9, 0.7}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       1, 2, {0, -1}, 0.25, 5.85, {0.9, 0.7}, {-1.5, 0.3999999999999999}, {{
        0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
        0.015384615384615389`}}}, {
       1, 2, {1, -1}, 0.25, 6.289999999999999, {0.9, 0.7}, {-1.4, 1.7}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       1, 3, {0, 1}, 0.25, 7.540000000000002, {0.9, 0.7}, {3.2, 2.2}, {{
        0.7015915119363394, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 2, {-1, -1}, 0.25, 8.81, {0.9, 0.7}, {-1.6, -0.9000000000000001}, {{
        0.7094211123723042, 0.4540295119182747}, {0.4540295119182747, 
        0.29057888762769585`}}}, {
       1, 2, {1, 1}, 0.25, 9.009999999999998, {0.9, 0.7}, {2.4, 3.3}, {{
        0.24972253052164267`, 0.4328523862375139}, {0.4328523862375139, 
        0.7502774694783573}}}, {
       1, 3, {1, 1}, 0.25, 13.599999999999998`, {0.9, 0.7}, {3.3, 3.5}, {{
        0.423529411764706, 0.4941176470588236}, {0.4941176470588236, 
        0.5764705882352942}}}}, {{
       2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       2, 3, {1, -1}, 0.25, 1.2999999999999996`, {0.4, 
        1.2}, {-0.4999999999999998, 1.9}, {{
        0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
        0.376923076923077}}}, {
       2, 3, {0, -1}, 0.25, 1.3599999999999999`, {0.4, 
        1.2}, {-0.5999999999999999, 0.5999999999999999}, {{0.7352941176470588,
         0.44117647058823534`}, {0.44117647058823534`, 
        0.2647058823529413}}}, {
       2, 1, {1, -1}, 0.25, 1.6899999999999995`, {0.4, 
        1.2}, {-0.8999999999999998, 1.2}, {{0.9999999999999999, 0.}, {0., 
        0.}}}, {2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
        2.5}, {{0.005882352941176467, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 0.09999999999999987}, {{
        0.34594594594594585`, -0.4756756756756756}, {-0.4756756756756756, 
        0.654054054054054}}}, {
       2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
        1.4000000000000001`, 2.7}, {{0.3076923076923076, 
        0.46153846153846145`}, {0.46153846153846145`, 0.6923076923076924}}}, {
       2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
        0.8, -0.6000000000000001}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {-1.4, 1.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {
        2.1999999999999997`, 0.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {0, -1}, 0.25, 3.65, {0.4, 
        1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
        0.463013698630137}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 0.3999999999999999}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 3, {-1, -1}, 0.25, 4.82, {0.4, 1.2}, {-0.7, -0.7000000000000002}, {{
        0.25103734439834025`, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{0.9846153846153846,
         0.1230769230769231}, {0.1230769230769231, 0.015384615384615389`}}}, {
       2, 1, {-1, 1}, 0.25, 6.289999999999999, {0.4, 1.2}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       2, 3, {-1, 1}, 0.25, 7.379999999999998, {0.4, 1.2}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9878048780487806, -0.10975609756097565`}, {-0.10975609756097565`, 
        0.01219512195121952}}}, {
       2, 2, {1, 1}, 0.25, 8.409999999999998, {0.4, 1.2}, {2.4, 3.3}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {0.4, 1.2}, {-1.6, -0.9000000000000001}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 1, {1, 1}, 0.25, 8.809999999999999, {0.4, 1.2}, {2.9, 2.8}, {{
        0.7094211123723043, 0.4540295119182747}, {0.4540295119182747, 
        0.2905788876276958}}}, {
       2, 3, {0, 1}, 0.25, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
        0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570139`}}}, {
       2, 1, {-1, -1}, 0.25, 9.010000000000002, {0.4, 
        1.2}, {-1.1, -1.4000000000000001`}, {{0.24972253052164256`, 
        0.4328523862375138}, {0.4328523862375138, 0.7502774694783573}}}, {
       2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{0.6138686131386862,
         0.48686131386861314`}, {0.48686131386861314`, 
        0.3861313868613139}}}}, {{
       3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
        0.19999999999999998`, -0.39999999999999997`}, {-0.39999999999999997`, 
        0.7999999999999999}}}, {
       3, 2, {-1, 1}, 0.25, 1.2999999999999994`, {1.3, 1.4}, {
        2.1999999999999997`, 0.7}, {{
        0.6230769230769229, -0.48461538461538467`}, {-0.48461538461538467`, 
        0.3769230769230771}}}, {
       3, 2, {0, 1}, 0.25, 1.3599999999999997`, {1.3, 1.4}, {2.3, 2.}, {{
        0.7352941176470587, 0.4411764705882354}, {0.4411764705882354, 
        0.2647058823529413}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
        1.4000000000000001`, 2.7}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
        0.09999999999999987}, {{0.00588235294117648, 0.07647058823529418}, {
        0.07647058823529418, 0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 2.5}, {{
        0.34594594594594597`, -0.47567567567567565`}, {-0.47567567567567565`, 
        0.654054054054054}}}, {
       3, 1, {0, 1}, 0.25, 2.26, {1.3, 1.4}, {2.8, 1.5}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.3076923076923077, 
        0.46153846153846156`}, {0.46153846153846156`, 0.6923076923076923}}}, {
       3, 1, {-1, 1}, 0.25, 3.399999999999999, {1.3, 1.4}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.576470588235294, -0.4941176470588235}, {-0.4941176470588235, 
        0.423529411764706}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.3, 
        1.4}, {-0.4999999999999998, 1.9}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999984`, {1.3, 1.4}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9283667621776505, -0.25787965616045855`}, {-0.25787965616045855`, 
        0.07163323782234961}}}, {
       3, 3, {0, 1}, 0.25, 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
        0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.3, 1.4}, {-0.5999999999999999, 
        0.5999999999999999}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {0.8, -0.6000000000000001}, {{
        0.058823529411764705`, 0.23529411764705882`}, {0.23529411764705882`, 
        0.9411764705882353}}}, {
       3, 1, {1, 1}, 0.25, 4.52, {1.3, 1.4}, {2.9, 2.8}, {{0.5663716814159292,
         0.49557522123893805`}, {0.49557522123893805`, 
        0.43362831858407075`}}}, {
       3, 2, {1, 1}, 0.25, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
        0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       3, 1, {1, -1}, 0.25, 4.879999999999999, {1.3, 
        1.4}, {-0.8999999999999998, 1.2}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       3, 2, {1, -1}, 0.25, 7.380000000000001, {1.3, 1.4}, {-1.4, 1.7}, {{
        0.9878048780487805, -0.10975609756097562`}, {-0.10975609756097562`, 
        0.012195121951219514`}}}, {
       3, 1, {0, -1}, 0.25, 7.539999999999999, {1.3, 
        1.4}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7015915119363395, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{0.4756242568370986,
         0.49940546967895355`}, {0.49940546967895355`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.3, 1.4}, {-0.7, -0.7000000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 2, {0, -1}, 0.25, 8.84, {1.3, 1.4}, {-1.5, 0.3999999999999999}, {{
        0.8868778280542985, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570136`}}}, {
       3, 1, {-1, -1}, 0.25, 13.600000000000001`, {1.3, 
        1.4}, {-1.1, -1.4000000000000001`}, {{0.42352941176470593`, 
        0.4941176470588235}, {0.4941176470588235, 0.576470588235294}}}, {
       3, 2, {-1, -1}, 0.25, 13.700000000000001`, {1.3, 
        1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
        0.4868613138686131}, {0.4868613138686131, 
        0.38613138686131376`}}}}}}, $CellContext`dynamics$$ = {{
      Complex[4.252297410602208, -7.662528307386322*^-18], {
       Complex[0.7567023120566828, 0.], 
       Complex[0.6536029291122348, -0.0001788943020059129], 
       Complex[0.005513403043112809, -0.006194280064333546], 
       Complex[0.010269020739239649`, -0.0005721127599694941], 
       Complex[-0.0006658911669672943, -0.0024069783901113214`], 
       Complex[0.004347537578404993, 0.0022594519710096702`]}}, {
      Complex[3.270521621873675, -7.813658163506356*^-18], {
       Complex[-0.6536399915383492, -0.00030637975529804493`], 
       Complex[0.7564975686173675, 0.], 
       Complex[0.003256977929828838, -0.0008990047821220681], 
       Complex[0.007237115969763234, 0.010521287294565352`], 
       Complex[-0.004858597163317104, 0.003876192727992754], 
       Complex[0.015352686842074033`, 0.004155838151900385]}}, {
      Complex[0.5491705598395172, 2.8759744577514037`*^-17], {
       Complex[-0.0028973296180442656`, -0.00713994273289795], 
       Complex[-0.012703105191830388`, 0.00007408609889859082], 
       Complex[0.8304589138114189, 0.], 
       Complex[0.552502955658702, -0.005624697661006539], 
       Complex[-0.03509157769386804, 0.02172083167383089], 
       Complex[0.043639015120719854`, 0.0349072280482927]}}, {
      Complex[0.4834516529528866, 2.2031212624217096`*^-17], {
       Complex[0.0019785320193494273`, -0.004792200044745708], 
       Complex[-0.0068707367667282075`, 0.005890375666124598], 
       Complex[-0.11977230334395164`, 0.06343242790301373], 
       Complex[0.17808910747442724`, -0.027580609846519673`], 
       Complex[0.7469913109945034, 0.], 
       Complex[0.6252903786805657, -0.007851274436092764]}}, {
      Complex[0.4246452038294519, -3.202379125037765*^-17], {
       Complex[0.0008085168640870573, -0.0020318936957042983`], 
       Complex[-0.00966825946493522, 0.009037332441233942], 
       Complex[-0.5138010755481991, -0.006292959583686919], 
       Complex[0.7381521269591975, 0.], 
       Complex[-0.39867220214229376`, -0.025188250378835375`], 
       Complex[0.16731804121388238`, -0.05788834379024049]}}, {
      Complex[0.33902251461154426`, 2.6141663296856393`*^-17], {
       Complex[0.007383051140891514, 0.0032762347654724075`], 
       Complex[-0.009792489351295406, -0.0005369756479460383], 
       Complex[0.1645604519653952, 0.027882667624232332`], 
       Complex[-0.34204996226455503`, -0.0098404202480495], 
       Complex[-0.5291889647502656, 0.025317326497841963`], 
       Complex[0.7577625301873101, 0.]}}}, $CellContext`dynPlot$$ = Show[{
      Table[
       ListPlot[
        Part[$CellContext`points$522, $CellContext`k][$CellContext`nu$522 #], 
        PlotRange -> {{(-$CellContext`glConstWindowHalfWidth$$)/
           2, $CellContext`glConstWindowHalfWidth$$}, \
{(-$CellContext`glConstWindowHalfWidth$$)/
           2, $CellContext`glConstWindowHalfWidth$$}}, 
        ImageSize -> $CellContext`glConstPrimaryDisplaySize$$, PlotStyle -> 
        Directive[
          PointSize[
           
           Sqrt[(Part[$CellContext`mScalarArray$522, \
$CellContext`k]/$CellContext`glConstMMax$$)/350]], 
          $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$522}], 
      Graphics[{$CellContext`lines$522}]}]& , $CellContext`dynTab$$ = 
    1, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyEnXV0lkf3tQMleRI0wa24uxUN3MElSHD34lrc3bW4W3B3hwYPLnEIEbwQ
IDjFv35vz577ffZ5u375h7VmzZpn5ozs2Rf3zGTv1K9Rl4QuLi5JvVxcfvr7
30Y/rzt0aafrqfpLI//62utLwKoVq3xaJfTyQXr5fRuOffv9XYD7+NNu3TJ5
+jjnjwvo5Tf9c0Su5Cbd7z/pkQHedbZ8eVctmUl3kb9tuWaebZ9B5bfKTl65
onQyu/y6/5RvPXu5atVeh6qPdTPqdP6TQ7yoPl+sKU1e991Y1cvne+hftZpX
cTHtmp4764YZYzxNOto14m3P5unTeFL+uIDvL0skXOxrp6Ndzb4eLTrhJ7t8
tCtT8zaLygZ5cX5rS9GiI6ZUSGnS0a6flqz54Z8wJdfHulJzy9S3DVX9reBP
X0Krrkd83gegXbNvhozJMNhOR7uuD/2zXssnnD8uIOhCm+MJN3mZdLQr/Ej5
W93zpzTpaNfl849PeKRJyfmt8x3m79jZ1y4H7Zq+usOMDctUfaxbHTvnTJFa
1d9aH1ovbmxBTx+//6Q/Mu1K5f7Hs03f7HS062bMXJfFXb0of1zAws9DVh5q
aKejXTWWvau2aaFdDtq1cvDlkue/JOf81u6wL/Hb2yUz6WjXnC8FPsb5JeP6
WGO35On54c/kXH8rcWqvmzVnefrg99CurP3rxl0o4WXS0a42X3uEtVzP+eMC
iv6S3/15ZHKTjnZlTvxgcKkGSU06/obkfjbtcpkknN/i/GhXYSof7frf9fli
of7SXgvtQnuRjnZRfCy0a75zPC20i+Jv/Ut/Ib9F/WuhXTQeLLNuOI8f1N/C
eGvyz/g07fKX8Yl0tAvj2Tl/XADGP9LRLswXpPP8ovwW5iPS0a6bMn+pPtZV
me9Ufwvrg6wnPmgX1hOko120/vigXQmd1ysftIvWNzNeaD1EfovWTx+0i9Zb
1Mei9Rn1t7Cey/pv2oX1H+lm3XDWC9Mu0hfTLtIj0y7SL9Mu0jvTrr7O+mja
RXpq2sX6i3b1HjqkoqNAYqXLrSo9f7u9qofS5ZfBZc5/++ZQulzjiUfzrRvc
lC7PPBGSrN5jV6XL5RoHXLfuuCpdrn90x6CHZdyULn+PP1I08qKb0uVsLSsv
2tTOoXT5wI636ybNT6x0OXWP9WP37vRQuvx4x5Nu92a6K13++rlJjX03HEqX
J1bbM8R/hkPp8unkzwtuXu1Quuz3x+OYku8dSpeXv4vaN3Cou9Llhyvcfi+U
yEPpsuPrvbRuxTyULo8cU8AzKMBd6XKqswVnXSrlrnTZK+u4FElOO5Qurw9o
nKjPeIfS5S63or3LzHYoXV6XesmcSy7uSpcvV+83YNgHrs/f6+Hgy783z5pY
6XKnc8Wznl7lULq8YHCa3F/TOJQuL472rLV6mJvS5Wez8hTa/NZV6XL2Xzee
9TvsqnT5e/VEk64mclO6/KT/xAnXUqr6WP1yjmpdarC70uUHO/IlnLDIQ+ly
6cYDPrW76FC6nPXriQdvz7gpXT48o23Xn4/Y6wLate10sTOv7yRSujw20ZJi
RUYl4vwW50e7TlD5aNf/rs8XC/VnXUZ7WZcpPka/KJ5Gvyj+Rr+ov4x+Uf8a
/VrmPB6MftH4MfqF8ca67Cnjk3UZ45l1eYOMf9blvjJfWJcxv1iXMR9Zl5PL
/GVdHibznXUZ6wPrMtYT1mVaf4x++TqvV0a/aH0z44XWQ6NftH4a/XrovN4a
/aL12egX1nPWZaz/rMukF3a7nPXFtIv0yLSL9Mu0i/TOtOuVsz6adpGemnax
/qJdpz/Vy3l9/j2LdXnLw3wN/dzsdLRr9Ya6e+f9EWuxLv/V7dHCVbvtdLTr
TdaSvssCVX7rbe6gaaky2uWjXT6LF259FKjqY7VcNHzT85L3Ldblb8d7vt/7
6p7Fupzi18x7Gre209Gu+JDYgXWKcv64gJ0DvpTuX99OR7sS3Wi4J9F1Ox3t
+uXNu9ahC+5zfutrHve3bh4PLNbl8/G9B4WG3ef6WDPKxD72ynuf6295rPjV
PcVExMHWZZ+6jSvdaGino12jDrVu5XKK88cFRA2uusNn5H2LdTnXvdcrtn+1
09Guyv610h2OUvmty1tuJbhcxE5Hu2IGlv80e7SqjzW2yczcJYqp+lsrHq+r
ceCXexbrcr/StafUXmano11tKzmqxWW4b7Eu/+q4cWRbUjsd7Qp8FRG1qKtd
DtqVaOe2Cwfvx3J+q2eFVe8f7LPT0a7Ormf/eL0jlutjjU5Z6tqwm7Fcf2vj
/OsLG3jfM+sv2rXjz7Utx++z09Guixfaj2r1C+ePCxhT2HNcwf2xJh3tSjz2
zSv/SXY6/hqtrFss73CV3+L8aNcEKh/t+t/1+WKh/qzLaC/rMsXH6FcX53ga
/aL4m9+n/jL6Rf1r9KuD83gw+kXjx+gXxhvr8moZn6zLE2Q8sy7fl/HPuhwk
84V1GfOLdTmnzEfW5bsyf1mXR8h8Z12uJusD6zLWE9ZlWn+Mfl1yXq+MftH6
ZvSL1kOjX7R+Gv3a67zeGv2i9dnoF9Zz1mWs/6zLpBemXZWc9cW0i/TItIv0
y7SL9M60a42zPpp2kZ6adrH+ol0j6m8pGfMqWunyzKFvvP2G3lW6fGV1g+05
4iOULg+efbJ3o2vhSpevHT87pGJmld+6FF2zRM6Ud5UuL1nQJaTNPlUf63Gn
CeW71oxRuux6JfPRN2lilC4nLh+S7PueKKXLfrELv2euF6V0OfXLDqXCLkQp
XX6xK/hozkfRSpfLNN5YIO/ZGKXLvi+fjGyXMFbpcnz9n/98dzNG6XLD3c9y
vciu6m851r11ffcjSunyvttN3r4cE6V0+c72sIqJJkQrXQ7t6Ve35sgYpcsV
hm49cv1ljNLlnR6XrUMvVX5rba/V25b/GqN0eX6+1sUa+UQrXe6z5uIvv7dX
9bdS1c6T4UDNKKXLaUL/arDyXLTS5QfzPlbbXiFG6fKAdqHzrGwxSpcdVpq1
saeilC73uN6x9JEjt5Uuh26cuzxoQLjS5V19hp168yRc6bJfw+BtYWG3lS7H
lJh7Pu5RlNLltd+blh5dKUbp8vbuP3ZOrRCtdDnm/fY+G/fcVro8rdlhzyrv
wpQu7y7xIKzCgzCly5wf7Yql8tGu/12fLxbqz7qM9rIuU3yMfu10jqfRL4q/
+X3qL6Nf1L9Gv/o7jwejXzR+jH5hvLEup5HxybrcW8Yz6/JiGf+sy+tkvrAu
75f5xbqM+ci6HCLzl3UZ8511eb+sD6zLWE9Yl2n9MfoV57xeGf2i9c3oF62H
Rr9o/TT6ldV5vTX6Reuz0S+s56zLWP9Zl0kvTLtIX0y7SI9Mu0i/TLtI70y7
Ljvro2kX6alpF+sv2rVnwKFUnQtHKl2e9G3c3S8Bt5Uun7o6o/ut5mFKl8+c
iO1VL3mo0uXAoW0++ZdR+a3FHeqVmesernT5XqfGjdN3Cle6nC40taPW8XCl
y+Xyn3/QMXGE0uV6Lq1ndt8XqXR5rV/NLseucf64gES3EyRL5BaudHnAlKkT
x34PU7rc4ZXLg99rqfzWvL+2D9i6PVzp8ovAPteWZo9Qupxu0YtX13eq+lsN
fpmfplev20qXn3Z8t2rrw9tKl4v6p/nxPDXnjwvIeXJPmtwDI5Quz300dfS2
l+FKl98uHv6m8shwpct+tVN5fcoYrnS5XMzdbkduhyldHhTZL937+uFKlx+e
fDqlSvY7SperJMq29222CKXLKS6trlclNlzpcuIbw98tmhOudNm/auPmY8qG
K12e7RGUIENImNLlcR+8L9X/KVTp8qtD6xsm/xKidPnirjajfYtHaF2usuTg
M+uO0uU2d6yEj26EK12e2nlH/k21wpUuuzWafvyRa7jS5ckpWs/Oseu60l9O
R/25HNT/f//uFwv1VPor7WL9pTgYnXrjHDejUxRn8/vUL0anqB+NTjmc+93o
FI0To1MYV6y/f8o4ZP0dIuOW9beCjHPWX8wL1l/MI9bfOTLvWH9zyTxl/S0u
85r195msA6y/WDdYf2mdMToV77wuGZ2idczoFK17RqdonTQ65eq8rhqdonXY
6BTWbdZfrPOsv6QLpl2kI6ZdpDumXaRTpl2ka6ZdAc46aNpFumnaxTqLdv3s
V2b0zH2hSn8/dpg08fqAUK2/9zbue5QvROlvwKS6na56XFX6+9u+Sp1LNLqs
9LfGtriNU5dfVfr702ePQ2s63lD6u/924LNkQ24p/f1a9Ecd/5TBSn+n70sU
UW5ZqNLfRk2L+u5vEKr0d+CRA8fjeoUo/V3+4E4Ov/hgpb/LOx1c5XIvWOnv
E+/MtW4/C1b6e7ZX3mJD04Yo/d3geuphi24hSn9LXB/ZZXBoiNJfr4fdl7b3
ClX6W/eP51MGruT8cQFjg6Z1fV4iROlvtQLpZzf5u56sv39mT1j+aWCw0t/7
3qd3TzgTrPT32Yrk9Sc8Dlb6+6Jtrhx1bqr6W617n52Sa1So0t/k7gELS18I
Vvpb9XOXDd9bBCn9XX69z8rBY28q/Y2+HDusQ8drSn+L754cNzDqstLftHua
Lp/vf1H74ja+Wa+1uKn0N2/Tj4+2fQpR+jvueLphLeaFKv09dOZNtip/x5/1
d3iBOu1y1Lil9Ldkk6oHchS5pPT3yvErf54ffUzpL6ebfRGVg/r/79/9YqGe
rL9oF+svxcHoFMXN6BTF2fw+9YvRKepH+/+Lnfvd6BSNE6NTGFesv61kHLL+
vpZxy/obJ+Oc9fexzAvW30cyj1h/a8i8Y/0dJ/OU9ddX5jXrL9YB1l+sG6y/
tM4YnfrDeV0yOkXrmNEpWveMTtE6aXRqsPO6anSK1mH7Oy5Zt1l/sc6z/pIu
mHZ9/OSkI6ZdpDumXaRTpl2ka7b+OuugaRfppmkXdHbLp6tjPf9KeKpa7lMt
R3//GFCrcf/Qv+p6+iC9mDU905icrwN+Kjti0piSdjraW7l82t1Wek+fL/+J
2yszHvx6XyrV4Si+e9Tf+6EcxKfUkqFjE7ZLYdIr/Kf8hwGZUzvGeb5MbtIR
t0HZ5+z8ujEFpV8JaBYY4J7B3S4f8Tzy7vcKg/p5+tT6T31CTX0yeLvGlU7v
5VOP5im+t9zya+1c3hm+BFSX+Gy//tOn1/vMd4wBFeh7Zud2fQlY0KHdgAGn
7HLM+D+4NajsGLsc/i6a2mUV6Dtq6eF4To+0+t95NKNdLi9TPvqr6/5kW4ba
33kGlOPyJT/i/+edwHZX/7LzIx3fYzv3+0Or9tzHSVaus9MxDj+cWV2/wGQv
au/DgIUdZw4+08R8Fwpds8uX/GZf2mrEuMGL7fz8HTiNT6vnsT2p95zger6z
rqc82KLFr3b5vjJOPk313X/zm12+L5cv+TF+BszJnn/dWzs/0vF9LM0jKygu
eqxLMi8eD1ahzUP8B7319HEJ+898Cagi4+qV1TjzuDeePs2ddN/+zty5v74E
JPky3CtoOPeX/b09yse4ulHQe/PHPF6mfP5eHeU3lfF29POMTLXypaT2HvA2
7XXuL6vMxQ6pMoaq/jLf4aM+JWR8Fj9a9P3UzHZ9Gsl4wHfRyI9xuD/26fa7
I+389Sk/6lNOxmeGJzUnLOpp16eOjE98/4z8GLcXMrqcz1lfjU+TH/UpI+P5
0O2IQ3NP2vWp8y/1x7hNsTXdTEd7Oz/Sa8r34ahPcRnPBQYm8rj6Xs1HVX8z
zkMmN02wX60n5lwD6tNexn/wp7kHNwbb4+2f/j1zYrV8x478GOf1XLoWHHKJ
87u4ID+tk1bQzt2jtrZW66SpD41n6/iTDbEdu6nxbM5ftPln3Q6oIfOlbMKF
HcbdxPf/50548zkFp/Hz9zgVPXIeP/b8QvmYF2lfjor7mMjLlK/OQTjH07p8
rULOWkNUPL1XUTwxL1LkqRWUIIUnjwdrr5wvQH2KynwZNrJ/uWmf7faWpfog
v/n/kcvV/cLa2/mRXgznKaQ+pWW+1IxPFTIviV2fWjLefpdzEMiPedEw84fJ
GaukoPUqzpor+VEfzJf4ZZNy1U9g18eX6oP8mBdNszwe63MiucmP9J9xTsR5
PbGWxfyVZfLf+Z3jadeH1kPL69CQFjOmpeD10JyXQX0qy3yJCggLGbUxmalP
HaoP8mNezKjXKjowg50f6UNx/sV5/bdelD82vKCfWv/tczrO49kKG7Q76kFr
NZ5Nfuxzqsp8KTmtYvDNJZ5mn1NPxj/yO4+fLwHYFzmPH/t8EMrHvKi/5Y/J
z5LY5fP5GpSP+ZLq+wDvCr5JKT7HvHE+iMaD1bV/fIlXYXZ+PjeE+kBf8oz4
ceuGbwpTHxkPAQtkPDjvA+MCOqbf9qNX2uS0D7TPAaE+lWS+hCacWtrzpl2f
ZlQf5Me8aCvlIz+fb0J9ysp8CZfyUZ+6VB/kx7zoIvFxbq99Xgn1KSLzJYfE
h9YTi9cTzIt60r+0Hpr8qE8NmS8ppX+d62/XB/kxL6bJfEF+pONcFa3/FsYz
rf+q/pgXqc/sajs1htdD+7wY/Av05aXMR/iXinSuinxEQBopn3yEmV8oH/PC
U9YflM/ntlB+K5kvd2X9cY7PHm/Eh8aD1VjWTxoP5jwa6gN9wfqJ+pTB/lDq
4+zv4gKw/jv7u7iAabI/ofFsrRvbPdxvuD0fsR/Dfgn5MS8WiX7R+Df5UR9L
5ksN0S/Up5WMt3Oy/0R+zIvkor/I70f5UR/sx6C/tD6o+mNeYP9A66E534f6
YD/2e4sBd4p2suvzT/+eP3FJ9tvIj3nhK/sx5/wuLshP679VRvZLtP4bn7vh
n/2Y8b/wF1//5Vwb8leW+YL9HvL7yvjHOT7iAwHQL+ID5jwjyje+WPa3X4kj
4TwgxdOatvuFS0QTL46nN8cT8yK57M9pPFhh4gdRn5IyX3qMGu/VMomXqU9j
Gf8J5ByiczzjAs6Lv/hKvAv5UR/oy0HxFzSezblL5Me82Cf+CPn5PCbqI/u9
gAdf0jfbcsSuT22pT0KqP+ZFafF3X4nL4Xwl6gN9KSb+jtYTcw6U1kPruvhT
Wg9NftSngswX+FPUpwbVB/kxLwaKf/9K/BDnQGn9t+DHaf039dn0j6838wKc
B+k1ZV7cEg5A8yvgmPgdml9mvqAcjPNrwjEoDpZnR78P1Wd5cRzMOVbqR2uJ
cBXqR5Mfv1sE41y4inN74wLAeVC+rMPWAuE8KL/Vv9QH4xPcCfn5vC1+F+MW
3AnpGIe/CQejeWp1EQ6G8htS+bTOWOuFy9E6Y8754ncxDsHlkI5xdVR4I62T
FvghrZNmXaVxFQBehPQu0u/gnBQHa4hwUaSjX34Wjop0xLm0cFekF5a4gffS
OLTAe2mcW7WJG4MnT30fXyd9nIfiyWvfP9154Ym74smHgwOP7hrmoXhyqViP
FQ+6uiue7Cbn1Jgn9zw1d3F8NXfFk9NeHta++lKH4snZf9t9vXB5Tr8ScC4y
9bYfd9wUT546rsqZoUfcFE++mqRRUs/9DsWTcU6QefLSNClaFtzqoXgyzuEy
T/ZMeTC+ervEiidffPs48HRpD8WTuRzw5Ogrh3P8ts9N8eRve5qOHnjCTfHk
PWk8Ttze6K54simfePK3wx4jmnZwVzwZ54iZJ7v/Wvdm9Tg3xZNvHK9dYFZa
h+LJjvY+TysmdFc82ZRPPNkx+9m2/3/+lHkyzksyT84bfmOqo71D8eS6A3x/
y7vWoXjy5eLpz4ZtdCiebMonnpwq4YSTjikOxZNxrpN58uvzMTETHzsUT57w
ef38HsXdFU/ul33XkktF3BVP5nGIcdUupGeb6vc8FE/GOVDmyY7PazI+eeZQ
PHmhnJNlnlziSdb0iX/n9h7wNu0lnpyqf5dS8YtUf5nz48yTp+/6uVDZlQ7F
k5fIeV7myaF+WZ7tb+ZQPBn5mSfvnVe57ZEbDsWTcW6defKwp5UOf//sUDwZ
+Zknh4y5uD0ks0Px5MVUf3PeuWnwzy3/XpeYJ8fJuWbmyasnHVubxVvNR1V/
jPMSqzal/HDIXfFknF9mnrz89PynhU+4KZ6cQ85fM0++P+/rg3YrOb+LC/Iz
Tw5/VX58o2/uiiejPsyTR07r7nlmnhrP5t4A5smVOwwd36oYztfbPNmcZyee
/IvoEfNkzC/mybfL9kg07LmbKV+d3yeefC5jFZdq/iqe3hxPzIt9M3+LTXBJ
jQdzLwHz5FYvHqe5tMquT1mqD/PkzaXKhLdNb+dHurlngHhynux72yf0cyie
jPP7zJPPVZk97cp0h+LJyM88+VaSKrXvh7qa+vhSfZgn19lccGjdbnZ+pJv7
DYgnt2w9/LN/InfFk/+k+mNerDrwvmvYQXfFk3GPAfPkxynjqmSvbdenDtWH
ebJfqSwjAjLY+ZFu7m0gntzsk2/5b9U9FE8290sQT/7y+/BLve94KJ6M/MyT
x4W8eVO+kLviycjPPBn7IufxY99rwTw5cO7KrKlXOhRP5nhivlgb67Ua7cPx
OeaN+DBPDpmYMWdMPzUezH0XzJMnls62P/aZm+LJGJ/Mk2+M7j9ocBc3xZN5
PMPv187Qyj/mg12fZlQf5slBUj7y870czJNrSfnMk7n+mBeID/NkXk/g9xEf
Wk8sXk8wL9C/tB6a/MyTK0n/Mk9GfZgnY74wT8Z9IMyTJ8h4pvXfyvY/18Mv
VrJx10a/2mXnRzrGM/Pk5jIfmSdDv5gnJ5XymSdjfjFPXinrD/NkLh88+ZGs
P8yTER/myVg/mSfjHhXmyS1k/WSefEnqwzz5vKz/zJNxLwrz5Ow3s7le3Oqq
eDLub2GevE30i3ky8jNPLiD6xTwZ97EwTz4k+ss8uY/kZ57cRvSXeTLXH/MC
+wfmybiXhnnyzYSFzmU+66Z4sr/st5knYz/GPBn5mSf7yH6JeTL2P8yT24q/
YJ68X+5jYZ6M/R7zZNw/wzz5k+gX82Tcw8M8Gftb5sm4x4Z5co08FdPPOKbi
6c3xND5a9ufMkz3FDzJPTpKwYP6wwe6KJ+P+HObJ8BfMk5GfeXKo+AvmyfCn
zJODxR8xT04m/pp58t3ATnN+Oe1QPJnrj3mRTvwd82TcC8Q8eZr4O+bJQ4U/
ME92FX/KPBn5mSfDnzJPRn2YJ8O/M0/G/UXMk/uIH2eejPuXmCeD8zBPfiMc
gHnyCPE7zJMxX5gn1xOOwTy5QdsmG+duUXEw9y8xT3YTrsI8GfmZJ+cWrsI8
+apwHubJrsJ5mCdzfTA+Pwl3Yp6Me6KYJzuEOzFP/i4cjHnyLuFgzJNRPvPk
C8LlmCfjfirmyTHC5ZgnTxPeyDx5kfBD5slYV5knTxRexDwZnJN5Mrgo82Rw
VObJ4K7Mk9cI72WeDN7LPHkacWPw5DYb/F2Cit2zmCdvK5iyWocCdjrG+dW7
kzpdy3jPYp7cqnL9TrMG454Zfb8K8+RNSXK9G+dmp4MnN+rz6pHbj1iLefKY
FSty3Kp0z2KePHLomW/X69jp6N/UHgsbH955z2KePCfF+36PNt6zmCfjfhvm
ydWTebtum23ujTE8GfdHMU/+s8jBp55D7XIQt4PVs3TbONQup/y/lAOenHpW
5wHvwjg90hqW50XF2V73LebJCxdur1V2ql1+OS6feHL1QWt+i3ho50c67r9i
nry6Xf36Q7rb6RifCc+6zG3b4L7FPLm/f51d/rnMPTyGJ5vyiSenjsiep0UX
Oz/Sce8W8+S5VQYm6ziZ6/nOGvB4R42xhe3ywZN39Hg70ueiXb4vl088ucLl
1eUuHLHzIx33ETFPLp6+X/joSDUerInbn4yJPXrPYp48ZEijVxt23LOYJ/M4
xLjKF1Fm6Lxm3F/2/WbMk3uPKH7j/XO7fKTjfifmyWt+zefa/i2394C3aS/x
5AdPeo/4c4XqL3PvGfPkV+0WTW/62K4PeDLuJWOevK7S9H3vq963mCcjP/Pk
vvWyD6lT1a4P/AvuW2OeHLQ3+FDxAmp8mvzMk6sN6lBg+yS7PnX+pf4Ytx+6
PzqxtridH+kX5T4u5skHmyZ71SBIzUdVf7Mfu/CLm/92tZ6Ye+SYJ6epWX/v
nng7/v/075kTrnJvGPPk9Zs/9S0dy/ldXJCfefK5jx8Xr22p1klTH+bJQT4T
N3dso8azue+OefLKMU0SNOqG+9ZsnmzuYSOe3Fz0iHky5hfz5AUTSsb6b7bL
L/8v5cO/PClQ6WHANBVP70QUT8yLjAMOfwnrf4/Hg7lPj3ly2m5LlidcZ9en
LNWHefJvy/tljmtv50e6uR+PeHK65nVio/rY9QFP/lXunWOevO7E90grDa9X
9r1/zJNzzn23KzapXR9fqg/z5KeHu3Rb+T7W5Ee6uZePePLrQnnfzHsZazFP
7kz1x7wYs7/98KYuaj009xMyT3Ysvt56x367PnWoPsyTt28YOfLlTjs/0s19
g8ST578tFOVTWq3/9r2IxJPXeh95kaCcGs8mP/PkQ4WWuIeWtfc54MnIzzx5
tuyLnMePfR8j8+T1zy9teJrQLh/pHE/Ml+i4d/NdF3N8jnkjPsyTy0fVHHh2
hRoP5p5G5snpus77Oc/rWIt5Mu5RZJ48YFmPNcn3xFrMk7vQeIbfL3PmTvPL
S+36NKP6ME9G+cjP90kyT0b5zJO5/pgXiA/zZF5P4PfTSHxoPbF4PcG88Jf+
pfXQ5GeejP5lnoz6ME/GfGGejPWTefJhGc+0/qv6Y15sOVlmaPehajyb+zmZ
Jy+U+cg8GfdYMk/eKuUzT8b8Yp48VtYf5slcPngy1h/myYgP8+Q/Zf1knoz7
P5knv5X1k3ky6sM8eb2s/8yTcZ8n8+RfzsaGbKplxwf7Mdw7yjwZ+sU8GfmZ
J2cS/WKefEv2n8yTs4j+Mk9GfubJqUV/mSdz/TEv5sv+gXky9tvMk0NfDphS
76Jdn3/69/wJH9lvM0/2l/0Y82TkZ568QvZLzJOx/2GenF/8BfNk3CPKPPm8
7PeYJ+PeVObJ/qJfzJNxfyzzZDfZ3zJPxv2rzJMnXfp9RJ4c9zme3hxPzIv3
sj9nnpxD/CDz5Nw5vl6d+NN9i3nyRbn3lXlyqPgL5snIzzy5svgL5sm455Z5
8mrxR8yTcf8t8+R6dbMevzHBrg948iWqv7kfQPwd82TcZ8s8+YX4O+bJuHeX
eTL8KfNk5GeevFr8KfNk1Id5Mvw782Tcu8s8eZD4cebJqA/zZHAe5sngAMyT
g8XvME/GfGGe/JtwDObJ68teexDVVMXB3BvMPBlchXky8jNPnidchXlyIuE8
zJPBeZgnc30wPmsKd2KejPuNmSevEu7EPBkcjHnyYuFgzJNRPvNkcDnmybhX
mXlyGuFyzJPBG5kngx8yT8a6qniy8CLmyeCczJPBRZknNxWOyjx5i3BX5sk7
hfcyTwbvZZ7M3Bg8+XKLzrnzpo5SPPnmvq1lU2WNUjz55fazq0rfv6t48q/h
m9adzx6teDLuBWWe3L9GRL+vrSIVTz5Xca5f6st3FE8uvrpWqgotIxVPbnvQ
d+mecZGKJ0+YesBvX3yk4smRPfKenZUgRvFk3MvKPPnNgNDc4zNEK56Me1CZ
J1ep9sfal37RiienufDL6t+fRCmezOWAJ7ssG1Jk47MoxZP3RCVJ0z9JtOLJ
H69mKtcnV7TiyaZ84smDdrQ4lXxdtOLJuLeZeXLaIxkfz2odo3hy1d8qR2+p
HKN48r2kKSf+UixG8WRTPvPkBZXKfeoRo3gy7qdlnvwsosG8wrO4nu+szNMP
7d5aKkbx5HJdNr/+HBGjeLIpn++72FXm4Mv/yo903FPNPPlDggrZdq5X48Fy
Kz2t/dsZ0YonDz31pIbf3/mZJ/M4xLiKnr5w3IclUYon415u5snRWbqdDo+O
VjwZ9xIzT87x9uqKo5+4vQe8TXuJJ2fKVebW9gOqv8x93cyT87iGPcl+K1rx
ZNynzTx5w8OU/c7Wi1E8GfmZJy+ckGbh1BwxiifjnnDmyacreM9a767Gp8nP
PDm8p5V76tQYxZO5/hi3OVq33xEeHq14srvcI808+U2c/7ase9V8VPXHOG+/
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
oS/Mex/J/pB57xDRR+a9DyQ/817oo7p/mOqPcQ59Z95bVfbDzHs/jFpcdVnS
m4r33pf9MPPek7JfYt77QPIz760q+xnmvdifMO/F/l+9Z7cvUUS5ZaGK93rJ
fox5b4nrI7sMDuXx8yUA+sK8t5Xsx5j3XpH9J/PeDa6nHrboFqJ479aq5Y7X
9b6leO8DiifmxW3ZPzPvhV9j3hvxMPfWDgNDFO/9o1feYkPThijeGyL7f+a9
yM+8t5/s/5n3Vpf6MO+dKf6FeS/8L/PeRk3exY96Hqx4L9cf8+Kx+C/mvU+8
M9e6/V/1gR79Jv6LeW8d4QPMe2uIf2Tei/zMe7uKf2Tei/ow77XEXzPvXd7p
4CqXe8GK9xYSv8y811fqw7wXHIZ57zvx6cx74UeY92K+MO/dKZyBeW/AhL67
VkaqOFjLH9zJ4RcfrHjvK+EezHuRn3nvMeEezHvbCYdh3ptMOAzzXq6P+X9t
4ULMewcfOXA8rleI4r1vhQsx73UIp2Le20E4FfNelM+897pwM+a9jZoW9d3f
IFTx3nvCzZj3PhceyLy3p/A99Z6drKvMe9MLz2He21s4JPPeH8Itmff2Ec7J
vBdclHnvIeGxzHvBY5n3gus2+s98cTW8t9Gc3etj53j6/PinveB4AXhPEPnB
FSvmd5sUXDiFSUf+Xn7TP0fkSm7SsY9tfC39l8cHkpnya8t4aCrvJyI/0r3r
bPnyrloyk15N+nHg4WXtC+y20//pxQPe23LNPNs+g/27LST+s9N1Gv04g13P
xhL/spNXriidzG5XRYm/V/lVmQfNsNPhH5+9XLVqr8OuJ/xm28e7O5ex7HTs
h29Gnc5/coidjvWq4LKWdYu39fLZKjwQ9cR7i98lPuiXCUnPj75V205H/L1f
Xy/UvJidzv2FdMR/2+AP6Wdt9jS/i/bi3cnv1C9419LUR+J/NP/MTlE97XTE
H++NIh3t6nT2/NQYt5Q+2+R3Ebee8v4m8qNf8M4p0lHPpp2fnEid1U5Hv/wk
77oiHeV3i19f1Xcb3l3V/YL8SMd7u0hHf93IFrRrxee/4yacCu3CO62NhFOh
v4psaNe13C5Pk47+8lvjn2hXDS+Tjv4KkndskY7+Cg3wvXDwiZfPt3+JD/Kj
v/B+rqmP9JdfgGfNcn/HrYkznwnA+87Ij368LO8IIx3trbngxIHI014+2yQO
iHOBgYk8rr6324t6npf3ppGOftw8dnim/InsdPTjdHlfG+kov7DL/bDbzTzN
76Jf8C4z8qMf8c440pH/2IoWUwOz4t3bR6a/3rzdNDhLCS+Tjv4q0Wdi/Txt
7HSOG9LRXy8uHexf5K2nT8N/iQPyo7/wXrmpj/RX4me9+1Xz+Lu9//k7Bp4Q
UOyX/O7PI5Ob/OgvvJOOdPRX7jwP5pUtbKejPninHunolyw9Fry90txOR7/M
+VLgY5yfnY5+cQRtKfY6c3KfBv8Sf+RH+rgteXp++NOuD/old6n5Ezq6eBo9
Rr9UKh3ZwTPOTke/jPC1Xmx2t9MRn6ISH6SjXzZmdbN+X5TMpCP+mRM/GFyq
QVL7dyX+l5Z0HTv2bBKTjjgPyf1s2uUydjrijPx1KG5zJW7Ij/jz7yL+XE+U
U4TahfhzHBDnNl97hLVcb6cjzoinxN9CnBF/pCPO7tK/SEec5zuPB8Opssv4
GXMuZ6Eqn/Z5o70/S3uRH/GncWgh/nmcx631L+PcQvwxX6o4cz/zrj3yoz40
7yzEH/MX6Yg/zXdTPtYH39Z3yreoe8mb44/8Rndi5ros7mqXg355LeuP/H+H
6ResV0hHv2A9RDr6Besn0tEvWG+RjvhjXTK/K/GvJev8N+d9vnk/HflZL5CO
fmkoutPsX+KJ/OgX6BfS0S/Bzjrog/pDB5Ef5eNdeKSjv+qL/iId/YJ3z5Fu
fKXouPy/rQ/6Be+eN/uXOMj+weTH/gHp6EfsT1A+0ns474tU/JGO/qV9kYqP
qY/0b0fZj/2jU66mfOxvN0t9UD7tD33QXtrv+aDfjzjvD33Qv7Sf9EH/Yl+K
+qD+2J+jPqg/7ZN90O+07/VBv2Of3Pxf+h35DceW99CRbt7Rk3247OdN/2I/
j3T0I/kCFWekI87kO1QczO9KHMjXmH4hH2T6Bb7pn/8/0nFDfvQX+S/TX03F
xyEd5fRz9n0m/j7OPtHE2X38abdumezfRZwbiw9lf/qg1d6ltw95KH/6WN4n
Yn+ay2P+3ZC1djryvwwuc/7bN4fyp8ujss1p3NCh/CneY2J/WuOJR/OtG9yU
P/2zYb8SI6vb6eiXmSdCktV77Kr86X1Hnb41Yu10xL9c44Dr1h07HfGv5nYo
e0oPu3zEv/7RHYMelrHTEf9NISWC2o+z0xH/7/FHikZetNMR/7m5Rt8/lcqh
/CneVWd/+nDGFc9M2RIrf/ptxvmBlzJ7KH+K/mJ/+rpxlvBLhd2VP8X76exP
0S/sTwPWTGhXYKdD+VO8X8b+1D9//VsbFjqUP8U76exP8W4a+9PpXZ9OfnHJ
ofypn7wTx/50cMtOlxqXdlf+9If0C/tTvN/H/tSqNSD7zZPuyp/i3Tf2p5Ur
Tkn1/KO7SUd/BWYreL3eCDud351nf5rydWi9Z58dyp8iPuxP8R4f+9NW8U89
vNc5lD/F++DsT/GuOvvTSbWWZWs01aH8Kd4HZ3+K99bZn/709lgXl0A7Hf2I
98TZn5YuPNFl3Uh35U/xziP7U7xbyv60X9TKBH/O8FD+9PPKnP7RLR3Kn6Yu
sKB0vUA35U8RN/anpw5mOpajtJvyp4gD+1O8f8r+dPJfjz6ODHVV/hTvU7M/
xbur7E89Q0PWJ492Vf4U796yPx0YWfWnazPdlD/FO7/sTwte/vHS5ZxD+VPE
n/0p3l9mf5q/e1CR1q4etk+Uftm2eUnfrdUdJh390qtqso3TKrqZdI4P0tEv
xfLUXDi1tp2O+Jv3u/G7Ev/UDzp/mrvdTkeczXvZ8oc4p5H87E/Ne+Xyh/jz
7yL+JameKOcEtQvx70txQJzNu/Dyhzhvl3iyP0X82Z+if9mf0ngwPmiAjB/2
p2gv+1Mah8YfpXAet2b/T+Pc+KApMl/Yn+KdXPanNO+MDzoj85f96TLn+W7K
TyvrA/tTxJ/9Kd7bZX/6RdYf9qd9ZL1if1pG1kP2p3jvmP2ph6y37E/xHjH7
02myzrM/xXus7E+hF+xPoTvsT5dLPNmfQr/Yn3o666DZt0MH2Z8mFz1lf3pW
9Jf9Kd5RZX/qIzrO/vS1vKPK/hRxYH+K/QP70wGyP2F/mtt5X6Tiz/50ivO+
SMWH/Sn2Y+xPfWV/y/7U4bw/9EF7ab9nfNAp5/2h8Tu0nzR+55XsS9mfYn/O
/jTGeZ9s/NFD532v8UdfZZ/M/nS49Dv7U7yvyv4U+3D2p9jPsz/d4OwLVJzZ
n1Zx9h0qDuxPydeYfiEfZPrlqfgm9qcPnf2d6S/yX6a/VoiPY3/6ytn3mfjn
dvaJJs6tKj1/u72qh/Kn8KHsT0v1q1B+bt17FvvTnfLeAfvT9efKJ/jtfqxJ
R/7VG+runfeHnY74+7plWJ/ucKzF/hTvO7A//avbo4WrdtvloF/eV03af8Vx
Ox398iZrSd9lgXY6+uWtf8KeYa/sdMT/be6gaaky2r+L+GdsV3LZ1/52OuLv
s3jh1keBdjrify2NI9/Tb3Y64t9y0fBNz0veN+lmn5DvTb0GKe9b7E/xTiv7
07Erv3s1qG6nI/7Xc/ZtGlXJTuf+Yn96e+2mgeXn3LPYn+I9Vvan6Bf2p6s6
5HR7UczOj/jjPRT2p8tmjcnb9/p9i/0p3l1lf4p3WNifdph5rOTLeDs/+uW8
vDvD/nTzgk07347Buza6X9if4j0g9qe1e/gP9Qz9O27kT/HOKfvTduObX30y
7Z5JN9x7cYOJa3+28/M7tuxPx2/PmOvD8fsW+1PEh/0p3p9lf7qv8qqWxV/g
fVLbZ+G9UfaneKeV/enk3LNn+Uz5ux/Jn+K9UfaneL+V/WmT5FO+FQyz86Mf
8T4p+9OiDzuliG12z2J/indC2Z/inVD2p7NXpS39tgTe5bH9adfy+bosv22n
o79ic/T6XifVfYv9KeLG/jTN18a+a4/es9ifIg7sT/GeGvvTR9crB23M9Xd7
yZ/ivUv2p3jHjf1pmXc5o69ettNRH7yjx/60a7Zid57tttPRL3gHk/3pq5lf
qh/8e51nf4r4sz/Fe47sT+c1SlD8V7d75vs58/9HzV3iXgy009EvOT+X+V7l
XaxJ5/ggHf1Srdn4sk9W2OmIv3kPFL8r8d81e43nozF2OuJs3t+UP8QZ+dmf
mvdD5Q/x599F/GtQPVHOBGqX0X2KA+Js3pmVP/P9gMST/Sniz/70tfQv+9Mu
zuPB+KDuMn7Yn6K97E9pHBp/ROPW7P9pnBsf9FjmC/tTvLvH/pTmnfFBqWX+
sj/t4DzfTfkxsj6wP0X82Z/i/T72p1h/2J/+LusV+9MSsh6yP8X7iexPW8l6
y/40SNYl9qczZJ1nf4r33difQi/Yn0J32J8inuxP8T4d+9Oxzjpo9u3QQfan
eLeO/WlB0V/2p3iXjf1pe9Fx9qd4l439KeLA/rSO7B/Yn26T/Qn703nO+yIV
f/annZ33RSo+7E+Xyn6M/Wkl2d+yP13lvD80Poj2e8YHrXTeHxq/Q/tJ43fu
yL6U/Sn25+xP0zjvk40/2uu87zX+6Kbsk9mfot/Zn+K9Nvan2IezP8V+nv3p
FWdfoOLM/jS9s+9QcWB/+sbZ15h+IR9k+gW+if3pXmd/Z/qL/Jfpr7ri49if
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
30r6aPbz0Ef2rbjPn33rdtFl9q24r559a3LRd/ateFeOfSviwL4V+wr2rRNl
38K+daLzfknFn32rj/N+ScWHfesw2aexb8W+l30r7RuNP6J9oPFHtG80Poj2
mcYHnZD9KvtW7NvZt9L+2fgmN+f9sPFNwbJ/Zt9aQvqdfes6uceefetQ2Z+z
b8U+n30r+QUVZ/atx539iIoD+9Yizn7H9Av5I9Mv1cRPsW91c/Z9pr/Il5n+
gr9j30p+0MQ/p7N/NHGe9G3c3S8Bt0064gx/yr51RkRbl53zQ5VvHSD3VrFv
bZ09TaY71+x05A+4t3Hfo3x2OuKfPOXj14/S3lK+danc08W+NWBS3U5XPa4q
37p0xflOPwpfUb71t32VOpdodFn51jZFFiVqO8TOb7673ha3cepyu3zEP3fQ
552pvl9TvjXRZ49DazreUL61da/H9/suuKl86/7bgc+SDbmlfGvEpAcZW1QL
Ur41Su71Yt/68qfl84YMClW+9b7bgIk3okKUbx0o/cW+1e16zfhVhUOUb8X9
ZuxbcX8a+9aMOWt1yPdnsPKtuNeOfevpG3++ef4oWPlW3PPGvhX36bFvbRqS
3XuLS4jyrWfl/kD2rQeODEz8Z6UQ5VsPSL+wb8W9juxb457+nLvb6hDlW3Gf
PPvWIre2zX0aFmLS0V9dLh77sLubnc7vBbBv7Tjm5vC1yUOUb0V82Lfi3kj2
rWnzzH6Qxdx7b/uv5XKPKPtW3IfPvrXL7nvvfjkfrHwr7nVn34p78tm3dn3+
ZMyEEDvd3Esm97iyb30+KkPZrq1DlG/FfezsW3EfO/vWXI8GNimTJ1T51nzj
569cniJY+da+D3tkK9/7lvKtiBv7VvdS0RG5i91QvhVxYN8aJffism91VCxZ
omfWq8q34l5x9q3F5T5e9q3rd7+o8tOpS8q3ppP7k9m3Hi81pHfabVf1/6vK
/czsW5+3WJfQe2uQ8q2IP/tW3EPOvrXJNMfu8dVDlW9dOmS1VeJEkPKt80N6
HSkZdU351uK4B17+0C+JlzUJmVD6rPKtuAcb+dEvV3CfOeoj/cLpiD+nI/6c
jvhfp3TEP6XUE+mopze1C/FfKnFg3xpE5Zvv3HDPv/wh/ogz+1b0C/vWZ9Lv
6v9bnceJ8UeHZVyxb70h9WTfSuPT+KYNzuPZ+AIa/8Yfucs8Yt+Ke5XZt0Y7
z0fjjzxkXrNvpXXAlN9P1g32rYg/+1bcz8y+Nb+sS+xb88g6xr71payT7Fvj
ZF1l39pd1mH2rY9lvWLf2lXWf/atuL+Xfesj0RH2rdAjdV5V4sm+tYboGvvW
zs76aPbz0Ef2reNEZ9m3dhVdZt+Ke3fZt0Lf2be+lXt32bciDuxbsa9g37pX
9i3sW48675dU/Nm3NnLeL6n4sG89Jfs09q1/ffpn38u+9Y3zvtH4I9oHGn9E
+0bjg2ifaXyQu+xX2bfWln07+9ZY5/2z8U2DnffDxjc9lP0z+1b0O/tW3MfL
vhX7c/at2Oezb23u7BdMnD9+cvIXJs5ZnP2IiUN1Z/9i4tDa2e+YfiF/ZPoF
fop962Bn32f665SzLzP95Sn+jn0r+UETf/KPJs4fO0yaeH2AHU/EGf4U/gXx
yZTaMc7zZXJz3w7i0CwwwD2Du6fPJtk3mu+0r//06fU++35gxAf3gP2g/Tbu
H8P+E7+7sOPMwWeaeOGcr7rHFX4B9fk01Xf/zW9ePk1p34774uR+Y+M7guR+
tn/Wt1em/q+sxpnHvfE06RhXxY8WfT81s5fPRvld8x3jk5oTFvVEu16Z+h+6
HXFo7klz/5u6v7QB1TNM6vkF9ZF2BX2ae3BjsKcpB/2I+zP/KSfU1L9swoUd
xt30NPXBOLx8rULOWkM8zf056JdVcl9iMykH7cW9iJ+lHHN+Kj5VyLwknj4t
JT/aG79sUq76CTx9evq2dszMH3gC7cK9jsiPdkUFhIWM2pjMlI9+eVH+2PCC
fp4+9WVfYTjktIrBN5fgfrZQ065U3wd4V/BN6tPg+bn6z8/9cQLtwj2cTaUc
cy/BiB+3bvimMPVBu0ITTi3teRP3bR44wfdwVpX8mF+5pJwaqKe0K6XUx5f2
XbjH8p/17ZVp10tpb13ad+Eey9pSPtp7V+L2VcpBu5bF/JVl8onkPi0kP9q1
fmz3cL/hKXwa035ygdzPmeCfd4LMvqWm9G8d2j/gPsZm1K690i55b8jEYX6L
AXeKdvL0aS31Qf+WkfEp89fEAff0ol1o77TdL1wimph7gNU9iigHceg5arxX
yyRephzE4aDMx8a0/zHrg5SDODz4kr7ZliNeJj7o92KyDiC/ue9a7nluSHqH
+wNlfTPtStHR70P1WXY5qOcCWfe+kY7jXkTkR3267E+2ZegyxE3f17dD8ptz
8bI+Q/cRz+1yHyB0H/XEOo/8fO8f8qP+P4teCI8yevRT2RGTxpTEfaf6fj+U
Y86DN+4f+ldd+x5y9Evay8PaV1/qUHp0LjL1th933JQeLU2TomXBrR5Kj3Dv
B+sR7hthPXK093laMaG70iPc28Z6dLl4+rNhGx1Kj3A/DOvRG7mPhfWoX/Zd
Sy4VcVd6NG3Xz4XKrnQoPdo7r3LbIzccSo9CxlzcHpLZofQI95WxHnlKPVmP
lp2e/7TwCTelR7gvi/Wocoeh41sVcyg9Opexiks1fzelRznkfiTWo1ZyDxLr
UZ7se9sn9HMoPbqVpErt+6GuSo9wjxPr0eOUcVWy13ZVetTsk2/5b9U9lB6N
C3nzpnwhd6VH1sZ6rUb7uCo9wr1brEcTS2fbH/vMTelR7Qyt/GM+uCo9Qv1Z
j1AO61ElqQ/rEe6tYj1qLu1lPcK9VaxHjyRurEctWg//7J/IXelRjpvZXC9u
dVV6hPu4WI8KSP+yHuE+K9YjtIv16FbCQucyn3VTeuQj45P1CPfysR7VyFMx
/YxjbkqPcG8S61GShAXzhw12V3oUKvOR9cisD6RHdwM7zfnltEPp0XRZB1iP
cK8j6xHuiWI9atC2yca5WxxKj1xl3WM9wj1IrEe70nicuL3RXekR7udhPVos
6zPrEe7/YT3COs96hHt+WI+gF6xHa98/3XnhibvSI9znw3o07X18nfRxHkqP
GvV59cjtR6zFejRy6Jlv1+vcs1iPqifzdt02277/B+3FOV/WI5wvZj3q719n
l3+u+xbrEe5pYT3a0ePtSJ+L9y3WI9xnwnqE89esR0OGNHq1YYedjnH+qt2i
6U0f37NYj/rWyz6kTlW0y9ajaoM6FNg+CefW9f0krEc4t856lLpm/b174s05
cXU/BuvRyjFNEjTqds9iPXpSoNLDgGn3LNYj3IfAepRW7j1gPUrbvE5sVJ97
FutRzrnvdsUmvWexHuHeBtYjx+LrrXfsj7VYj+a/LRTlU/qexXp0qNAS99Cy
OH9t61F03Lv5rotjLdYj3LPBepSu67yf87y264N2lTlzp/nlpbgHw9Yj1J/1
KI2Uw3qE+rAe4Z4K1qOF0l7WI/QL6xHixnr0tlDeN/NexlqsR6XPxoZsqnXP
Yj3C/RusR5mlf1mPcN8C61EvaRfrUdjLAVPqXbxnsR6tkPHJenRe7uFhPZp0
6fcReXKY+3/UPQmsR3lyfL068af7FutRZZmPrEeYd6xH9epmPX5jwn2L9eiF
rAOsR6vlHifWI9wPwHrkX/bag6im9u+inlj3WI9w7wHr0eKF22uVnXrPYj3C
eXzWI6zPrEc47896hHWe9Qjn+lmPmopesB7tLJiyWocCuM9En99nPWqzwd8l
qNg9xevOVpzrl/ryHaVHbQ76Lt0zLlLp0ZsBobnHZ4hWelRazvWwHuE8EevR
vaQpJ/5SLEbpEc5lsx6V67L59eeIGKVHOP/FevRBzluxHg099aSG33+lm3Hu
GvYk+61opUcLJqRZODVHjNKj8J5W7qlTY5Qe4Twy61E5qSfr0S3/yUPPBt9V
eoTzsKxHsVm+fvcaF630yPXncf23zrmr9AjnH1mP5so5R9ajjb1nHqyxKVLp
0aDlsW5nj0QqPcI5Tdaj4fNn5RzdLELpUZ6n27+d9I9SenS+XuDRo57RSo+q
9D5a1lEwXOkRztWyHhWMq1DmpFek0qNM95d0z9g3XOkRztWyHhWVcliPUB/W
I5yPZj1Ce1mPcP6a9WiYxI31aNaUbCNPr7+j9Gh0qxq3fBJHKj3aJedtWY+2
Sv+yHuF8JetRuLSL9ehCeKE+5/ZEKj3C+GQ9Kifn7lmP2myI73clPFrpEc5F
sh4V+vhmTpWl0UqPQmU+sh6Z9YH0qEZU20uBy2OUHuWWdYD1KJfc28B6hPOA
yh/dvf71eY8YpUdY91iPcM6R9ejb1Uzl+uSKVnqE83esR69lfWY9wj0nrEft
ZJ1nPRoi5/hYj66IXrAehe7bWjZV1iilRzPlvB7r0ZUWnXPnTR2l9OhBnd9O
5EscpvQo84/fKnmtCFN6VKlh2fPbOt9ReoTvdVmP8J0w69Hl7CvrBh0JV3qE
c1isRx97VtuzakW40iOcV2I9wnfUrEflgjO2eLU8QunRqiOBw083jFB69KhX
tRd7qoQrPap3x6Xc2j/ClR7h/BHrEerJejT7446Ajh3DlR4NkvMvrEePSnZ9
cfVAuNKjflsHeEz/GKb0COcaWI9qy/kF1qNs41rv/SlJmNKjkDp9PUpkDdd6
JOcvWI+2XbRyLUoTjHXY1GeW1KcO6c5myc/6VXDuxMf9AiOUfpUIXtev1rkI
pTut1uS7miJ/kNKdKVJP1i/vZFsq3smu9QjpLUmPtko9WXcKSD1Zd9Be1p1N
Ug7rTslL0w8kyB2mdKfr9gWrggcEK93BeRnWnezSj6w7OB/BujNezsuw7hyr
Edm2lhWmdOehjEPWnc5yno51p06fx7liW4Yr3cG5Btadfbf6vqnx9/rAulNH
5h3rDs53sO6smeYTX2t1uNIdzHfWHZzHZN3BOQ7Wnf1zXI7Heocr3bkq6xvr
Ds4psO6sPJlkyrBkEUp38P08646PrMOsO/g+n3XnZ1nPWXfwHT7rzkPRBdad
Gr1Ov/vRKULpzmT53p515+n3FyVLHL2jdKe7vI/MutMd7yyT7vSSd5xZd5bJ
9zasO/jOh3UnqbyXzbpzRr4jYt3pd6Hrom2PgpXu4Htj1h18B8W6U1jeN2fd
GSjvtrPu9Oid5srOP4OV7vSXd+pZd/D9MOtOFef36027XozrU3nqjptKd/D9
KutO1WWThheaEqR0p1LiM41WL72pdKekfJfIuoPvD1l3AutOebI5WZDSnRkp
5i8+XfOK0p1g+X6SdWfOhff9CiY/p3SnqNSHdWe65GfdOZQ0S71bxUKV7nx7
U6zXyV7BSnc2+I5ZVumvC0p3bko9WXcWnr38x9AbN5XuIJ11B+1i3Tkq9WTd
QXtZd2ZIOaw7DaIOr525MEjpztyTa9M+yRKo/Y5878q6c0X6Uf1/kHzfyLqT
Ub53Zd35PGpx1WVJbyrdqSbjkHXHS76HZ93ZVrXc8bret5TuPJTvEll3Ih7m
3tphYIjSnX4y71h38H0m606jJu/iRz0PVrqD+c6601XOU7Du4Hs81p2ACX13
rYwMVrqTTNY31h18Z8i60+G437qik0KU7uD7N9YdrMOsOwPl+zrWnZ6ynrPu
4Ds61p3eogusO4dnrczaNj5E6Q6+l2PdOTX9XOFEU0LxHan6rgzpqP+Rd79X
GNTPvBNqzhOVWjJ0bMJ2KUy64czyHQXSMZ4HZZ+z8+tGOz9/j7dF1nn87oA5
2fOve+tl0vk7Pfn+Vr1LjvIRZ7ynifz8XjnyI/797zya0S6Xnc7vyG8h3cT3
fiif3zdHfsTtzzuB7a7+ZdcT4+rDmdX1C0y2f5ffkUc5/D54E9IpfF+HdH4f
HOWYc46tRowbvNj+XZRzPeXBFi1+/a/4S3/he8UmpKf0vq16n13WMdO/9Vy6
FhxyydOk8/d+zUmn8L0f0s17QPK+MMrh7yFRf5SP751QT6Tj/XeUw99P4nf5
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
0WXmJ9tk3WN+0kbWZ+YnOC/J/CSt7B+YnxyS9Zz5SR/ZPzA/mSr7FuYnt8v2
SDTsuZviJwsGp8n9NY1D8RPso5ifWLKvZn5yU851Mj/Bvp35Cc59Mz85tWZC
uwI7HYqfWLUGZL950l3xkwjZ9zI/aSn7TOYnzudAbX4yoGWnS41Luyt+8k32
IcxPcG6U+QnOazM/SSH7f+YnU7o+nfzikkPxE+y7mJ/g/CnzE185/878JFj2
gcxPkp0tOOtSKXfFT86ID2J+gnPuzE/Syf6W+Qn21cxPcK6f+Ynr5zUZnzxz
KH6Cc7LMTxaJ72N+4p+//q0NCx2Kn0wT38r8xNxXQPwE9wAwPzHnc4mf5BZf
xvzETfwU8xOc52V+gvO8zE9eNc4Sfqmwu+InV8UnMj9xiD9lfvJJ/Cbzk//r
vDDzk68zzg+8lNlD8ZPv4peZn8SI72Z+cuHt48DTpT0UP0ndY/3YvTs9FD95
OOOKZ6ZsiRU/AU9gfgL+wPwEvIL5Cc4jMz85HBx4dNcwD8VPcB6Z+QnO7TI/
Se2xsPHhnXY6+nFTklzvxrnZ6XyumfnJmBUrctyqZOfn887MTypcXl3uwpH7
FvMTnLNjftLO+T1ow09Sy3vEzE8KyXvTzE+G5XlRcbaXnY5+WS3vLDM/wblC
5ifj5V1s5ifVB635LeKhXU/0b8KzLnPbNrB/F/07V96bZn5yTs51Mj/B+WXm
J7PlvXLmJ6kjsudp0cX+XZQz4PGOGmML/1f8pb9wHpz5SS7n98FNfrwzzvxk
/eZPfUvH3rOYn+A8NfMTnNtlfoL32Zmf4Lw585M1cp6U+clkeVed+QnOpzM/
iZX35ZmfPHjS+/8Vdu9RNeVtHMDD++Yy7sS4RxqGcUkZJkaFNIMIIYZxreQy
TJp0m8htNDTjEkalSa4lYtwTInKZkjqn9kk6J5KklFsMY/K+a73Pc7a+z7uW
v6z1W9Y+2z6//dvP83H29xfwMFI9Po/fqLmfu7EfcaX939FP+P139JNWbyeM
ijmj/nt5Xu0aEvpH1TD1/PF9efSTufTeMfpJ9lHNSase6jjPwxMTGz0Zm63O
K3zvHv2kz/3ZTQonqeeJ76Gjn7ycV5wcY6Wep3H/sie6gq0e6vU39sU3HbL3
dlWvm/G5nNbfNPbge/OB/r4Zve+PfnJwT2BgxaFCO/QTft8c/YTff0c/4XwA
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
f+c/yZiE4A==
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlgmwTmUYx889lqN7vmMbQpbuzXZxLdnDtW+5lpuQfc1gSJbIlGEQiqJo
DKUUarSZokWyL9mXkZr2lEJikOxFv/88z8z3zPM///O8z3m/9322zKGPdx8b
BkFQIS0I8qGnR0FQCP0iumEcBN14WTgJgj7oOvD90I3ge6KLwhdDeoMfiM2+
K7gIXFlkOLgZXGOkGms343MwXBZ4I7gMNo/yvBVcD5sO4HS4gej7sOmPHuLf
3YtNXWxa8Hw7FQT/IU3A98Ot4F1pbN5FfxCZTVpiuCr85+g62h/8Da0DDwDf
jU1TxyXBo9F1sX9SfnmeiW7L+zbo1kgIl41MA+/H5250c+x3ovOwW43uyvuu
4DfAD4I7IK+Bu8B1B78Dfkjnh2zW/4OriowHt4DLRZaCK8Hl+Llt4ltjxIE/
BX8Ibgj+Btwdm/d57ol9HrIGfAL+kdj2NQJuALIefAb+LnAuuAHvx4OPggty
4RMcD4QfC94P7qO7A88DdwDngBfqf4Fbgj8D/4nPm34XOv8x8PvAt8D1sWsv
/4mdoe50HXxF+AI8f8262uB64O9SxucHHwPfC/6XmNwLztY5wB8Fz4mM3wfO
hC+KzwVwd+BuIwdThkvCL4G/DoYKZnkMNMLPdYiJPCvuT/E+ApQCFwvN/gay
B5sK2BeGfw7bych5+O3wl9Hp8H+kmQjP5P2EyL71TGR+5f90mq3lCIK56Fu+
N+1Rd/oYkp+XzfnWKHCmx0JjbCYp7uCfQteAr+2x1yY2/mlwdbht+K0eWEwq
X5RjpRPTei6VWN4qj4b4N7PBuyKLa91NvsRyTDaK+fbIHPj6ieG5ijnf50hw
hcT86D/cC66CjPMY1h3rrpXX5TzHVQfKgxd4/NTx/GqnWIot57IS25P2dhzd
GX4ZfOXE7qYoslOxxvN8cEedA3gDuAe4DLoMa8uiZ7D+Kmf8JfZX0CUCu1fF
VRHw87yvoBoALodu6vGZg26p/wRurvxH7gnsnHLcRud10+NK8XLJYyAFXyK0
bxUOTYTTtc5j+ziLVvHtLPAR8OLI/tePygV0Oexj9HzFJ/owfLnYYm8HOCO2
ON/v8S+bQ+BWXldVQ9P8fynHOiIZgeVhL+zbga9EFreKz/HgsvB/8bwtZfEa
emzP8nhWLCu2ZbMV4jp4D0ajOfv+qvnYRNSQdfoe+Bh6r84uMLvBsXFPqFeA
d4FHgnco9rDZjn4dnxmqJ/ivH1o9r6s6jFQJLG/L+v1moldHdi8foxsrHgOr
7xX9vlQvsv088xRDfg5V0WO9lip2m3pMKt4WIcXhK7HHiXC1Aut/05UH4Bno
KaHl2mT0VM8p5eckz1nl5CykCXh2aGu0VvlzJLKcauC1XXmU4Xmjb72MHur3
qNxVreMXTI0sThS389QrE/uGcueI58tOdK3E9qr6cIJzLA1eqroFrqR9x1bT
lBdbPK4KsHZKZHGlGjU7stwpqP8VWX/U/1WN6e53oR7f27G44V5PRqBfQeoF
1sOW+JksQn+ivAIvDq0Hqm++hz6TZr1MPa0b32oG/pVvve1nqJ7aC8kE90Av
d5/yfVL9Xu/Z+MOs/Uj7Am9Ct8bmi9D6lfxf5DvDFE+B1dkRvmfVsAOR8epx
axUTgfXUU5HtU73sXGT+BuH/58hs1PvW+/86EFqeKF/OonelrC6Ux+eh0PLu
IPqnyPZ23uub/Mhfv9je98f/hZTFaw24TrGdX1ufI7R2RWgzjOajEomd25vg
TqrViZ2R5o1aseXQt/j7BSmpO4st14rhZyH6t5TVzaqqKzx3CmxOOALXHnwY
PSA2PQ7fJz2uZP8qduXBp+GyYsO/p4xXPq5B34jMj2aMzbwrFFp+pfOcF9i8
UdznS82QG/ysNoZ2pzp/3YPOQbHTRnftc47mKM1db4E7wx2LLNc0/+icxXdL
rPaqjz+r2SFltV5z41VwTXDN2GZL1XslwVe+T83AKz1/Nc8pRhVjzbVfn3M0
IykOVccueD9V/VkZ2Zmot5xKWb/SXb+A3s3z3x4bLXy+Ui/TXK0Yv5yy+Uu1
9KXQ5kndb25ifUHz+TSf/RT/fRPrZ6oPyvdc75vtEpu9Nav/o29GVmuHJ/Z9
9Sb1RtVk3ZHuSvOY6uRa8LLI+kh1n1e3sHYYa7eicwKbXzWbqZddxH+12Grz
WXCEXafQ6vNAnxXVo895jN3xGVW9YFRi96B6onqf6/W5C/qS/g9Yf/pKymq6
7quX72eo8jFlfVexXTm2/vk93KDYYixm7SWvgcopzRKa95Yrr1O2T83Dq7z+
qw+0iq3GJ/jvC+4Cn7+Q9cr8ms0iyyfFeanQvqs+/wP+rim34cNCloOab6/5
+ajHnQH/D8aYdX4=
            "]], 
           Polygon[CompressedData["
1:eJwtmHm4llUVxd97GM6F73tlhgQEQZB5CBBQBnEAHFBUCFGQydS0gUEezcon
S03NTMtMyzE1SiWRcgRRBhlFVHAKJUcEFdMEBEW09XvW/mPfe9aZvnP22Xvt
vd8OM2ae9qNUFMX4mqKoq/8vVoviBcm9uSj+Krld8i31N9OkLeofWxbFnWof
rb4tGjte+C7hAayN+bdJXtXc12KvbhpvXXhP+vol78ncV4RflvxJ7T9LXlK7
vsYP0HjHSlG8KdxI+CDhv2XPrSfcsvCaTcJ1hJsI/074v8LthdsLPyC8Q3iM
cJvC91ki3EC4gfBlwvslX0ku1D3mSv6n8UM13qrweWZLpJpip/5slbwv2SbR
0YrLNfac5u8XbizcoeI9Nmr9cYX3flrjH2pc/4o5ws+r0V3jTYXvEX5fuG3c
52bhbcKthNsJ3yr8H+GWwi2EbxL+pOo7crf5ko/YX/IXte+WvKP225I71b4r
u90s9E3ffdm6QUfvxdoOah9YeA/O8EfJ1qrP9oGkY+j3DvVP1v0mSc7UXSdJ
+qh9mcZ7aHxZto00SbYB3neqxheHvXwkPE74fuHDhDcJHyv8e+HBwq8K1xWe
KYxR/kBylH5jhKSr+rtJ6khGqv9Y9pTMEX5R/0dr/Zda/4bkdcl49X8nZL7G
hxQeO0v4UfYV/lD4U3QquUD935ecI/kudqC+zySl2tXSZ+As56m9QuuHa/3W
7LlPCp9YeA1970nOLT2XPegvamVHtf6N1Zy/8G8P0J79JQ3VX5GcLLlX40do
fLPGd0qf44U7CC8Qbqvxc4UPEf6XcF/hK4S/Lbw2e82/JSfFXtO091RJRb9d
lWzWfhXNb6v585gr3EX4YOE+Fb/tGuGTCr/xCcK3Cg8VHiv8huY3FW4kfKPW
d0Rvwhewh9qDJNeofTVvrPY7mjMMW0dHpe/wILqt+m6Pqv0INln6vQ/S/0/k
L720ZiX+LDkG39fYGI31kPxE7b7qW62x4cIfaP52yUPJPoAdp9L20Qg96P+h
mv9Yts1yr7rSRb1a6wBugWPQzWzNf17tseprUGtuwLawMTjip8L1hffo99Zo
/i+zuWBb8MMt2bpBR29p/O/ZvjxY+JuY3xBb0dxnquYT+KGO+i7U2FP4d435
r502vjibl3eob1nVNjuCt0+25Wuy58KZK2Ic275Z+BiN7xIeKfw4/lLaNg7H
l5Nt5P7g9wHCX1btg4OEH072TXwW370dHyvt13AjHAnHX5HNbV/qfOur5qjm
ws2TuesF4f5wKZxY+g7cRc3iIo1dHefnzsur9h3s5elkH6qvNxhV+E14m33Z
vrcSfhDeHfd7TnhmaV/GXpYn+/QlwvVif3TLnuy9VPK90hwNV6+Dc4SnSOen
xHvDLR/H/fFxfJ3f5LdXSX5YmivhZjgazrwy+27ccWnYdyfhE4k5Glgi3K2w
v8Ar3Svm/nbCH1dtj/hmT+HdwtM05wm1F0lmxHvwvnAY3Iov4bvHJfsUOkAX
J6tvsvZ+LZtbb1PfKHwlmwsfFB4h3KniWERMJDbu1fge/Ed6ryP5Qn0DIx4R
f/cLD414QXxZJ+mu9o/V17O0Te+K+IitH1uxr/4MjtL4r8M/8J9VVQttfOoX
GlspXGpuM+E/ZNsEb8cbtq1YpzsiV2kjvCHiv45aXKv5s0rrgLufJRlSmovg
pKFqr8NYk9/o4IrjHfqvUd+zGrsuO5YT09cKr5Z8UWObxraZ802N35216BBd
LiCmqL1Kfb01dxacU9rH8DVyJnKnt7O5lDflbYlT85L5bYLap0d8fEAyUe2X
s2MlfYy9lZ1r3S18ivB24RPCHuCDFZE/5eQ4jM/he3A4XL4zO/bA8XA9sZJY
wxk4yyvCA4WvFx5WOp7hb/cJnyb8UHYsmsAblT4DZ4HfT8X2NN5P478hRgmP
rjg2EaMGl74jd8VH39XcJyRdiDXkKBp7PJurJ3J+fJUYIzwFm4MPJKMiXpH/
cF50hG7g/690/31Vn3Nhdn6JLtAJuSUxkvOcLdyqdPzqIHlW/esli+JMnGVa
zJmu/2uy13YSviWZ0zZkC3fmroz1l/QLniUWkxORG03VmpalYyL22BNO01hn
4esiPxlT8dpLkzmaPXoL9yrNo+TXrUvvxZ7Ls89+fsR/7rA28lFSjl+FvWLb
2Dy2vyb8DR9sX7G99lF7nMYPKJ3T4rv48N4a2/++GvM7mBjaWeNzIrYS8+Ey
OG2YFrYpfUbOtiLiOvnKefBlvDFvPSlZr8QM9uY38CtsCts6XdKitA/NTT4j
Z0UXl4T+0clerR8U8R3bWRD2eZj69oQt0KYPmxio9Vcl+9DG7HzyGOF/ZudT
5J+c85ns/AOdjE326VXRR25Cjsrcz7X/qck6QTdNS+uyT+QnT2VzPlxPLtkk
7t8lzttF+KbkmEvshfP7Juck8+JM5HrkvJyVHLhr+Bm2152cJJnj4XrGLk72
QeagQ3QJRw+p2CfQA3puHjI52ccWhv13Vfso9X1ddb1ADkPuAmnCAfg5cRpu
IM8iHgxL1iNzhifXGKytET487vuPbB1cFOdBN+iI+HBGsu6oZw5JrjmoPS7N
tmVsmloLG/46bAXbpqajtuuRXLuS/1Frsgd7wTlwz5X4VOkYhm7RMbFtYfDL
kOCOR0Lf2Cy2+1jwUa/kt14f/EbOC3fg93AdPtw59idWtkiuXcmXGwcXb4lY
gh/hX7trXGOST8FRcBUxj9jXW/j1yKfIL/aFLzJOLPqsxrGSmpfaDH19WnUO
QS5BfUedOD/yg87JtePc7FyTnJPa9KrIV+CHjVXndOR21ATUBjdkx1ZiLLU2
OQa5xvGSXdWw4cJvjC8+GfkN49QzcDbcDWfBC+QM5A4HJteqW6I+JV9GV/At
3DwjmX/JKcgt8Hl8/13NaZ0co4nV6Khhsk7QzcPx/tSHuXSdjC2OEK5Xujbg
97FZbPfFiKc/T+ZacmByYTgD7mAP9sL/akv7Abk898W28Vl8b3ayL68OPoWz
qFWoOeH2a4WPKO2zcBf3wZcXh79x33alawZ0gU6o3TdHfL48ObaQQ5FLESOI
Fb+NfAWdbK+ad4kN1OQDSnMCsYT5cMVL2bGHGERutCLwOcncvSnyDfIlarmt
8f2BbxJ8m6BOHZ185sXBb/gyHNO4dA5ELkSOQa5BPrYhOYf/PNseeZN6EcvJ
wZfG+MSKa5Ybk2scapmjY0/2opYh5yXXIefZIfxmdj5FfjOydI57R8RP7k49
vyw536CWhCPgCr7B8C1musaXJNcc1KqckbNwprNL1+jchTudWTonW5ica5Bz
sCc1ArUBv8X3kfXJNQnnnVI61+OMnJUag7qBupLagza1xOjCfdQs1C5jCufh
fNNgjDnnx++TG5KTjZO+zhC+QfhI4W3Z3xfYg7V7Q2foblKcjZyY3DjLqWtr
fWdyUnLR6eEPxFXyRr7t4eP4Mj49WOuuD76BD8i9yamxFWyGPIwzcBZqcmrz
I4Mf4Uy4kxqS2pQahlqGHJM9WEsuR42En8HD1E7U3NRi1GR8x2AMX4SjmQOn
w+34CLksNdKi0P+Eit+TGpGaYFbYHLbHNxe+veCT7MFafJXYdk/YAzGO73mc
gd/mWwo+QQ5B7oCvwHENw4/hvv8DGDOebA==
            "]], 
           Polygon[CompressedData["
1:eJw1lnmYT2UUx+9MTXdyfxcVCmOZMWPfxzpmIzL7ljEo0ijSokz2JaMYZafN
UlGoKDyhp+zMDNkJ7U/WNtUYJiZR6nOec/rj8zzf+z3nvfddzvu+Nzz/6ZwR
wY7jFEEINPYcpybG3VALTgUcJyjUcdKIFfO8Gypcx/kFNqIPQjKxmzzPg7kS
o01D/LfQP6F/hJ+hHl5T3t8V+qFz4H6403ecPnifoBPR3aEH/ECbBnj1Icza
RuI3gihYjJeKVwN9F9SEgXgxeOnwBvo1eB16E7vXVy3eQkghZw59nA2L4B68
89JX6TfcgP14/Wn3LX41dFWoAlG0vWDjbIb+Ff0bNPH0PWfQZ+Gc5ND+Mbx4
YuHoCPiXd6cyb9vwt8Lvrs7Bp+gtsBkGkfcwDIZ82IGXS04IOhHdXcYF0Xi9
8Jail8Aim5cWEIVuAo3hMn2JJ+8jmXdPxyhjPQHH4Qy8LzFyesIm9Mfwss3V
IeIHoTd6Jl4COa3QLdFZkA2VfCMV/210JrGz5J+DNLxVeN+jy+Ai5Mq6Q19Y
K/VAfj24HOQ4AZ592GPvW4F+B5ZDBjnJMBfdjVgsxIEHyXhJcB90sHmROklD
n+Kbp2E4XileP7y/eL7uat3XsPWVdT7NdzPIS4dM63sWOQPQ69Hr4EPrcwI8
g34FXpX5Jqe/p7XzJPopGOHrd/fKmKAE8myNItFlfO8ilEMyeUmQYvMo4y3G
L2NextDXGfCiq98dSXw0jJI19rXu30Qvk/0n84A3mtxRsFNqlHfU9bR/B4gv
gPlW47ssXkDuNJhu6/Ye8Xdhpc1Btqd1kkUsG3KgGYzHGwdjpDbJCeXcyKTG
j/J8BAbineQbt6Ibob9Afwnt0N3w4iAW/sHbD3/Tlwae7k/Zp+NgLOy2uQgj
NsT2RV/0VWKVMAh9DG8ksdvpQxVYiL8ALtG2KbEVNj4Z5yG8m7yvIe1uohOI
r8XfDFvgO7zWeG3As70/E/8lKCFWXfYI+hq6K7oLdIK2nq6TrNdxG3cE3p/o
jlKf0B5ae1qXUp8XXD0HZe9PQk+EfTYXRehbGEs6c7qPnM/gmtWv1PFtoTru
Al/nZRd6J2z//9wgnkHbwzwfggc8PWPlXF4qex9WQ3Xa5so4iG/neQf8QV4F
XAlorLOnZ11tdF2oY2fnKnJXwiZIkXMtoHMeIWsuZyW09PSOqGNtw+0MDdC/
bPq3gefjMBjvqK2XtDmG/hwipbbwTgR0TRfa/Dp4QRBi9TUBf7z0n1gl8zcV
XY2xFRB/Vs4nWSc5A4i3RbeTcdm6FZI7Bea7+q3tsmaejsnlHaFSW76uZbTU
BrF15K6HFr7uR9mXE6GHnAWyjtAT/bx8g5xeptuh20M0VPX1TpS7McP6t412
W6G+3SNxnup89BAYHqx3yx5ySuGkq2djPV/XMk/2B/SxdXuO+GQ4TN+D8Wah
Y/EfRQ+DoRAm96XkytzLOQ+tfT135+FdYj7Lg/QbS2i/GJrbWSb3THP8yehJ
MMHmIID3OPoJGAuJnn73EXRtYnWgrq/znIqXLue21dBeW8P6nu472X8bYYOc
a66+Q/os/xb9pbZhANyB9zVtv4JvbK1kv9Wyf4Vu6F1ypkCS3Wtd5D0Q4+vZ
FIN3nbY3ZB9CCbnF0IF4EbGj1l7ec8DVOWvj610h99p5vHI5e1w9X+Telvs7
Xva/p3doK6s/qcOr5CwndxmscfX7ciYO431DpQbs/sqzcTwk5wU8GKz/PtKv
QvRUmCF3AF5H66voTujOcMTWP9zT/zb5f5P7t4J5vgpXoDSg8zKLvDkwO1jv
fandF9DTYZrVs9TLFPtuoc2BI/868g/p67na3u6P1egPYE2w/m/8B6ucSUE=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtl3nQj1UUxx/vU3rydH8iSzGyJluUoZS2KaOhRmJskX3flyyvfffy2vfl
te8hVISkZaZ1WkfEVFSMpSjDJEn0+Trnjzvf7z333Pu7z7ln+5Xt2K9J36wo
iu7NF0UxWDETRXsgK9Mo6sa4wOKkEEWlkihqwXoxsCSjFbwaeH9iOpPRacq+
UcibCRlT4MdYm8A5zZkfCb6GvDX4EmM8vAV4EL2m8MB5h5xLlmF+FBzK3u/A
V5AfybK11ro368edX82ye54ER6PfOTU+BN6Y38hGpxHYFfk55OORd0jt/GHw
0omdr9+pAW8ve4AddX94Eec/sD4c/bacNQb5eHAc8hHwNujUZz4U/jS4ljEH
Pg7MYUyETwaro9cJ3pN9E5lPhY8F/+TsbvBL4ADmufBBYD/GJPhgsBd7XwXP
c4fDWWbnFcy7JWbPGZzZx/W174zb7RT4FDrF9Dbsvca8C/Ir4MPIBsBrgW0Y
g+EvgzXcbrVj+x591+Ngd37jIvumc0495gORPyPbxmaHzuA0/y59XyfnPcCe
she8O9jBbfgE2CU1m1fijif8bqfBX/x99ea70VsA3wWuYiyBvw++w1gI3wfm
MabDl4JrOHMlfG1ib90MXgg+hrGM9Qz+vgichXyJ/DExvghcor3I7kRnMN95
OcveawFjBjqj0Jmf2F3Ko/Omn7NTPo7+z+h3QrcvowCyFcgWMWJ4b2R5qd15
DmdsSO07qnHODnA+8u3ga4x58M3g8MS+axK42v1qr/wqsfXi7F3BOW/Ay8Br
ylfQeVDnuS/NBS9yh2xwZmpvrLduwhnDmFdjvifYHu19MrH4HQ5vCX+Ltcry
A2RzUvPlH5F9znhOb4msEL/9tueQ6an56jnWD3qOGI9sLKMh/AtkrzNKwgch
m5Ka73yE7DijnfwY2algPj0VfhW+Ab4Ufgk+Et4/sbhQbmkHvoe8DvLG8N+D
xxL68xkz4fm4YwF/+0V6h9Rskx/ZDfRzZffU4krxNZBzyjFawu8G16NTWL8r
e8MrwesjvyO2+NV73yZfh98OZsXmz4q5gonlN+WZhcHW5A8Zzz9lwL9Y6w6/
kWX7dU5BsDBrbeHlE+PKRdnB9K4zRsAfQ55BdzW8gcfai7HZ/HnwK9kstTj+
BD7a37cV+z4Llr/0jtJRXH4cbL/O6ZxYrtM5XyonM5r4m76gN4zsXZVntedr
36v5N/BGiem0TsxfdKbuWNpzy32x2UX2UR1QzlIOGMPe82BX5DXZO5jfK6sY
8DzfTnuRn3Ud6Sqf/AaODXaObKsc3wv5P8znBntT6YxzG8rmdRKL0X7wW8GK
zivEdq5qx0T0e6SWp2fAS7DWR/EClmP00DvGFiv63qrKn4nFlHxStbUDvAq8
kMda8dhyhvxE+a+H59hpnD8wtfUcvV2wmqfccpfn7aKKh2A+1wf5KMaz8E+R
HfIYmeXxrtq7H9nw1PL9gWCx/wB8d7B1xVF7t7POb5hYTnhIuTYY6rv0nv1S
87dVyLe5LRTLDRI7c6/ra/8++CPIU+WHYDrD1DOopvmbbg/mL6o7zZF/6z4m
n1kMzw+vlVgdVyyUhQ9JzXd2sP4B41H4CGTVFaOR5TXp6A13sr7LY1Z5rG5i
76X4rerfpfu293yi3KIcrjvnBatPqlO6w0TvbQ673WTf74PJ1dcchZ9m9Pbc
NVc5Dv5T8FjinGmp9Q2qm13Bycy7yBfQyUmtTp5wrvr5K/wMo7/nNNlT/lkP
POZ9iXJmK3BCZGet83wom+i9lEvWIFvm9pTPjHaf2ep5V/Vadbukx6ZitHZi
+U15Lzu1vuBDt7fqSN3YfFU9xibkmz1PDkgtL3VULHgMqu+YF6zfVB0fA15h
vj62GndBfhlbP7NU9Vq9BLhKeRm+SnkyWK8p3z7pdpYNE/L4QvhI+DzGcvVI
idUN1dxN4Fm3oeyf4+cvS6wub0VeImN9jnJLBeQVvK6pN1ieWp0vjSzXe4Nq
7sOK+9n6Dvhq9m5EXjRjNVv3X4t8P7wSshn6PXTyEqtNs5DHyJf5HUrCs/UN
qifwvon1dfqu1L9R9WsbOBP5FrCU5yLluJt74VPBmYn1FKXY9672RXaPDYnd
cx3nLE6tbwroLEhMZ01ifYW4ZLqbfucedGbHdh/V1OXee5RFXixj77jUa6vu
f0vG/i/ov0MJ/WZq/VqRjPWlnSLri6swPxDbfdSDqadSX6ZarH7ssvcv6oVG
gH+7n6ifqex7defrwXpQ1fGb9Vy9cWw9ifroP4L1geq1csHZqfXg14LlT/Wz
W4L1e3qXLM7eGDznev+jWP4vWFzrPurR9N9BtXh+sDPV+/8bzLbqOQtzzv+2
obBD
            "]], 
           Polygon[CompressedData["
1:eJw1mHf81lUVx788F/Obj/cBRVKcTIlRDkzTLJPEVY4IVEBA9o+9Ym9B9gaF
nzIEWWquHJm7vacz0xQUxVyVopZZfd58Tn+c13PPOfd7xxmfc+7Tov/orqMq
RVF0a1AUDfX79bIoLhbdlovidtETok6pKL4t3Tcl/0HIGHcVPaRxe+k7iE4R
bRXfSL/DNP/L0t8n/l7RNzS+RPSIxr2kv0bjfqKHs7+7VOPLQjZT3/ZOnvsd
0RkaT5VsZtVzOAtn4ts7RedoPFGyb0n3Q/FfED9F/JXie4p6iH4s+U9EvxSd
K/1s6QdI/l3xLcW3Sj7nLdl34OxfEW3T+CzpRmj+ueJ3it8hukDjC+NO46Vr
l3zXmaK9MuiVkh1X2oadpRsXtv1R9hk521Wi80SjpTtRc76Xfd5p4ruI/7n4
X4suTt7jktgPW/4qdJM0XiLdWs05tFYUv5DsQo0n49PSdx6YvCZr/5S7iZ8l
vr/4WeJf13kHiT9F/Grx/xQ/Unxn8b1F09lb3/xWusdEj4qmyBdTRZ2kP1W0
UbJNojtEx2vuqPi+i2iMxlmyDdLdKKoXfUnys0V3a9xGuklxXtY4RPyQwmtz
J+52vaim8TrpP6l4/a9Jf4P4htINjvOfKRqqcQO+kW6tqCDe9HOSdJvFH5Rs
8zPErxLfVPxY8ROq/v6LohWSr4yzshZrcmZkzYNn7lLx7+s8fcXX6fvl4pcR
g9KdXnr8XsX3QbZFfGN931/8WaXP+N+K92S9B8V3TLZZl7AfMUJsoLtO9Kbm
95N+iPabK/7tin3QKYi93q1Yd63oHY37SDa46hhvFfFIHF1ROldOkuwB6eZj
E/FbxDeVvX+THYvEzxx9v0D8UeIHiD9Hc8eK5mu8XrJGmt+u9Nk44xzNXSg6
Urrhkn1Vuj9mxxIx1ae0D/ElMXOPdN8XtY34vYi1xf9da/UQ37Z0DnF27nCX
dIPEXws2if9d9n26i36v8aWSLYozsDf5y5zLJB9Y+tsns8/EWfqKDtMdZkq/
UmvOFX+Q+KXil4kO1ri96HGN10t/A/4n/0QtJW8laqxxN+me05knZfuF2CRG
yZG2mvOwxpsl2yp7Hiv+NnJD/DLNPa5mGePlojmi2aLjJTsh9rif2C689/kR
72AYWMY3fLuBnBR9tuY92esW0Wmlc4GcWK/5WyS7GSI2wwYzwNJk28zkHOJX
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
            "]], 
           Polygon[CompressedData["
1:eJwtlnlUV0UYhm8gefXnJcU13HAPl/zHpdJSS620xSw1W9wVt8ByQxFUVhEV
wQAFQUBAc8Mtl8qyU6e9zmk9WamltptatrhlPe+Z74/nnPe+883cuTPzfXPb
TUoYGR/meV4mRMCqwPP+wJgR8rzV6DWwyfe8MtoOhHvei/A8z8W0V6Mv0X4Z
rkB4pOfl4hXQlkxMCmxCH8TrSFsn6Awd8TvASnvXdGJ+Q88jbhX6HPo8LEUP
xRsIg+A9e0ceei2s0VyIeQZuRK+nfQMUa954iXgX0L/rPTAXryVeW2gDO/Fu
ZR49YCu6Gd4AdC26A7o9xMC8kBtvEToJFsM/xLRjLnvRZbQV0K9Q40Ala1WO
fxRqaJsNYehrfOu/UETf7bANdsA9tCUTUwWvomMZt5pxanz3jv14+2APlBLT
CL8hLKTvMcabiJcEt9PeD+6AKtqqiClnLkd4fgU2E/MsRKGraa+BLRBN3M2Q
gb7AeF3Qk4k7ib4CVyE5cN8RTt8IqAOFePmB+yZ92yWYRcybeI/TPhamQmbI
rY3WqNJ339iV76rQ+WB+L/P8ElSE3Hu/ZZzTcAqWMFaifWck8TFaE9iIF9Cn
AdSHePpl2vzj0F2J6QZr8XIhT/tle5lle/0cegU6O3Cx6lOOjtQaak2YYwuI
hh14JcS3RbeBGNt77cdi+nzNe6PsXOt8V9g4CbRXojdDLP4t0Mt357UErxRd
yhrs5rlWZ9ry4hzjnYeLlotlilUuQsi+VzlYg94KW6AZc4qCEvRSxsmBVXCV
Phl46bBMuRNya6i1TKftLO+YhteC5+awDO8XvPboXPwl9LmI9yf8BU3wG8Mi
++5JxHyEHk7ccvRTtD0NnaETJNF2nbie6OU29tSQWwutifo+SN8HYJjmaOf5
NvRrtB2F1+GI8hWvJ/SGRcRMpP8EmOO7eX5OzMPoh+BJGIn3Gd4H8D58aPPU
O95GT0BPhDthCd47lo8p6LH0fwL+1rrjbcBL5TkNTuNNwpsMM2AFbV/gjUA/
AmO03njNiG0KC2g7w3e3RreCltBdY+PND9w6J9PnBM/Hw9x37AlcnVK96gQL
iFkIsehuyiHVY2IGMc5AGOG7NVPu90H31rpYvr8QuNxvjG4KTcyrtbyYT9sw
4ofDOvRKOy86N/8Frj42RDeC5pY7Wqsh6MFwt9WwA3g90PczzigYDTND7jtz
AldrVXNT8R4lbhQ8ZnuUrVqunNH5hh8DV9vrouuBbzmTozqGnqt5wE+BqwfK
i76MPRiG6DvwWuG1hstWm84Gbmy9Y77dN8p5395xk+VsHfJonc4Y42QrJ+Eb
nXc4Dlm05RH3JXq07fUx9FfKNfQ4vFRIg5OqkdYnX/VCOeG7XC3F2wjFsJ62
dNUO9GF51IVii1WfDN/ducrzG8CDMLtzdQ/qHdk6i6q5Nr9reJWq/cpNy33d
yYdUI3TOtaeRbs9z0Ku1JnCdfuN53zjfrZnu5lm+W/s56J+Vx/Cr7dtsvDPo
7+GHwO2vcu9j9CfwaeBqgmrDNN/Fa38T0PHKXd2feCHmcgp/FnomTLfcmkr7
FO2DvV97rj0q0LdrXaFQ/wF4EVDX9k9eUciN7ePVg/rQn7H6wVDVZMsj5bXy
u8h3/yxaF51n1RvVne6QyFjf4cWhp8EUyMKbTp84WG3/Hfo/UK5q7L3ofbBf
9yIxY3xXK3Ru0kLuP+de5QzcB+/aGRpv9UV15oT9v0Sj74IBsAvvEByEw5Z3
ml+J7keOxzbluNZP9cbusI205/Gcb94uvJ2wPdzdb28wTl90H+gFi/EC4hpA
pN0tOqe7ieuC7gwdrTZpnYtUJxVje/lW4P7d9A/XP9zV2BSrhVNC7n7QPfE/
OO1WcQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
TVPczsZexO8auBbf+R8lpBHw
            "]], 
           Polygon[CompressedData["
1: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
P0v+uyTXcBbORM75DHrLO4M=
            "]], 
           Polygon[CompressedData["
1:eJwtlndYV2UUx6/w8+mH127TXC0rRwMUULRMRMRsOtDcKy1zBVqZmuZIpdQ0
zVHmSNNEtoggCLIEFExjFJiCiTlSrEQMzbT8nN7zx+d5vvd7zvve95533VZj
w0PDPCzLioCG8KNtWW+7LGsiTIAEx7Ie8bKsh8EfvsMrxFsEC2ExPItXQLs9
bstKgi54xzwtKxN9GP814v2hH6wjVgRL0C3pry20g5V4IXhF5K9CfwEVUC59
wRZivxKLRy9H/2KbMcnYgqCWscfgR8MFYmXkfY0+jfYm7gP5eHlQoO8/SSwH
2qBn4M2EWfI95P5Bf5vxN8FTPK/BXw1rYTpeBe2a4j8ArWA13lFiP+tYzxD3
xfeD6XgP4j0Ej0MWsVO2abOLWCLslvdq3WKI5VG7fAihfR1jWUFuPFyyzTu+
RW+Fb7QuhyAIvYTYUlgGf9P+OnjQxzDJxdsOI9AjYRyU0i6XnBzwJ3aJ9x9G
N6CNBcXER5G3hVgVejH6E4iAA3hzoT3aR+oEubIO8FaiV0E4lOO56MsTytDj
dV0lay2P2aaOUs+f0JPwYojFQhzMB1+8PGJ/MbZ6mIfXB68vPK3vnY3XGv0E
PAbZug42ojfAeqi2zZp8FT0VpsGX5Jy1zdqulO+Ek1Ci375V6g3bHLM/ZPw7
0VEQDTWM5yJcc5s5+EzWHgxFD4FBsjZod4v4TWjsZb5xOTlXea6DFbr+C8n7
wTbztRFvE2zWsYzGewPG6HxI3nCdyxE6v//Q1w23meexeHfInlUtc70DHQkb
HLMfZV8O1vHlQyd0ZwiABVp7f7QfdJA5JyeV/vfCITjDevEmpyvv+ZMls52c
bZLLczr+PPRcmAPHaRtHm1hoT+wgbSPlvEHfRTwdfY7Yeeig8Wh0BuwXZJ2Q
N4nYZJgCA+WbybsB12EPOYPwXofBsgfUi4Ij6N/gAnQi9go0oj8bzuMlkjME
rx59DW5BMp4fXiE6njFkQTZMwGtCu/vhXsggLw280HdCY3jLMTXtqPtD9snH
eONkPuBNXddS01L6LIEUtCXzLGcBzxVw2m2++x3H1Ooe9N3gwD7bnBNyXhTD
VcY5QGqHLnCb77mJV44eqlq+aRh6OIyBf/H+g4b0l0osGK+S5yqohgTb1F/m
4Xlix/Fi8ZJkP2qt6vW9Uuej6BIoho5ytuFdRl+EGuir8yZzU0afp6AaJjqm
blK/+7SmAXilsg5sc0b9f1ah2xJ/EtrJ2idnl23WYk+ZK3KKFNHyjS7yTsi6
1fqOxBsFoyEMWuKdJV4LV3StNcVrDs209tK2AdoTPHSOqsithEtuc4/IWELg
lNatF/oFx9RK5qYfuj+EQgptkqGbnDfEDrjNGnLTzzPgDeMdczYEortDL70j
5bzvge4JwXrmSJ1r6acOrkAfvAxYKOsO5sv5Rk4m3n7IggXqdWa//k5pvpLz
UM5QntOIp8I++Ej3bzf8y+RFyRko+wbvZcfMq8zvOd1HJXjFMneOuYfl3E3X
fk6gm9NPC7iIjpU4sR48B+udKXdnoJeJnSb2IvSGl/SskHUvd8Vk9PdyZ3ma
8zRDv6kJbVtDG9hFXRPAV/fxTtvsYdnLwTpX8XKvwizazoYPIYVYhGP+bw7a
5i6VO1W8rnjPQReX+feR+2OHrBOY4jL/SHNk7tG9YYCMk5ypeOEwTddcpm3W
n/wbyD9CC/UCdU3E2WYfy37urutY9miQ1Msx/1LL8JbCpy7zT/Mo3/w5OhJq
mKsAnpPIe4/ndyHMZe5k+d6Z6klsr2P+S9ag18Fal/mnkXt6BvoDeN9l/n3k
X2AROptYDuSCzXsaQTMvE5P/g92MOxF8dB+nodfL+Ux8IITCEfq6DRqcino=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1l2eMVVUQx+/bfY/dy7vsoUrvva5AAAFpSlUEBKRIkQCyShcUCGCB0JEm
SAvRDyaG+AUhEBKEiCJEgkpEJQQTiRqKIL0sHX//zPjhZP5n7sw5c86ZdmuP
nTZwak4URTVSUZQLXRCiaH0mipomUVSHMRU8C14+uDK4LXguYya4LrxmjK7o
noqjaA78GfB3g+dCG8P/IjbdSszb8b0eeBb4XXBD8FLwcnAFxpV0FD3MRtF8
eB3R3QbdxHgGvBG6wW07zpql0K0OfwO4pfTh58lmcBr8Hvw60MrIVIOWZJQF
50MzjArgPOiDtMmkwFfB5cDXofcYAfwbtGzG+KWhp5jngX+FTmCPDPgONheB
T8NLs/8t5j/pLAXYjk5FZNpmzA7tpbvoxKidsjvNc3tKQR+jlwU/hOYwLwOO
oHfcnirgAkYpcAJtwZm7gX9n/1rMy4NrQLOMquAy0FaJ3eU2bPtI7wB/HfQg
OouhS+EHZFqBe4NbQmsi0w76GTIDoKPgN4fWg98aWugykj2GbTH4OHS4v/s+
8Gvo/gC9wz0MBT/hKF+mzXdaIvMOtCf8PfDOIzNH50mZf+yLTUZvXR/b5sH7
ABv2Mp+t9wU/lzEf6JqxdbX+buh05s1T5rt/+Hvp3V5k3hD8MrSPY/F2xbbv
Aegat20VdAt7bIWehj8Y3Bv8CbhRYj55VOeL7S7X8/1DxQf8ldCtrvs0so0T
W28NvBv4RoTMcPQ6uA+M1j0onsDdoV0Uf+Ae0Gb+jk0UM4zW4I+hL/kZ+0M3
su4Gj9kl0DYpe9c5sfnJsthsWA1vHbKX08a/CW0fLE6yfK/rNtTP2H5NZQvf
Y77VVByCE3BDcGdwI/fbBi4r3W2x6Qs3db7W6op8afexnv6OuqtDsdmueB8B
7c63FvJxnSW29ddDN8fmb9s99mVDp2A+qtjqBe7BGKb7SizPyE8W+r7y2T7B
7JNtT8Ern9gdD4RfVnEEHhCMr3cYBC4JrqZ4QW84874Z0x0DHqx4BjdhtEfm
R2ReDxYDsqEGY5zeCl5Hf1O9bTc/o85VKbH4GhkMyzdHB7szvftqZIa671Xg
+zC3oSK4XzAfKpNYHlQsyD938q63cbMd0OaJ5c5FweJIvq3YqgWeBH8m/J3M
p4Fngyd7XEzMWP4X/234UxkTFPPwjiHfBZmTsenK376BbsnYPWyWX/v6M4Ld
i/infV+t/ZZqBfOL2FgGXJiY3mbwWXgJ8pegfzsWr8h9+03FNbrPpyy+Lnj+
OQd9A/0FGYtl3b/iWvH9iueWodDDzDsrh0OXuHwDZI/EFrur4C3MWIwvgi4O
Fnv7+T7Pa5xq3wnmnVLGVy1bBn8l35cr7lNW2w66zC9eE5XHJijHJmb/GfjV
wCPhTw6GR4Engau7/0wBF7m/VUks/2ivFfA+j+29VHN154XgPbH5pOJ9bTA/
kD/0gF8vWP3L5fs1ctFBvp0rsPwvP1+LzH3453XvyL7K/Aj4OjIPsvZepYPF
nOraitj4equy8Mcwz4E/GfozvJKqTdDyiquM1WjVLeWfWci8EFs+HOF4L7L/
sFeHYPlIeSmdWN1uBG9abLaFYDlf55K/9/cYUywUZ61u5/gdjoXfF5xKrI4v
1J7gR8jUDCavep4LPgB95LEzJTa/Uk/ymHEDXqVgNUu1Zph8MFgtVL7qFZs9
smuHrzME3lFwvmIKvEBrqkbKtmB1/UnW+hfdZ8WM5Vjl1Gf5/oC7OIHMePRm
xtYbqLe5gs5d1u+rfOs9T+7/d6tcE2yvKqplseVJ5U/l0SJ/o9Gx3a3saRBM
T/pNHCv3Kgdnmf+lnog9cxLrlWp5n5NCZmRsfPUptYPdrfqXyP3nPnAA9F/O
8hX8q+id9XOpd5J/qHe6VGDvq55nvmKWcQ/dftDLfNvvut96rVdPIT/U2Zqx
16609R6Ks8vIFSPTJzY/l52jlKv4Vj9luT6TeH8UbM1DWp99SiTW67WAfz1r
/n8NfrH3iuoZ93tf8bX3OQ/YayD0sL+13vy294H30b2ZtV7odoHpSFf7jQ2W
mxTXKffJVLAYVD4rAM+OzfeK0T2Ttvv5M211Wb1eVWTGee3b7vemuL5SYH6r
On8X/J3fm85aMlhu1ZuOCNZPqKbI7u8Zt/yt5MMn02Z/LvuOje29FNfTYzuj
+r5HyOcFs+9u1u5NPqZ8oJ5Ha95AZqLnVuVb5f80MuOUq4Pdr2Lhfe9zlAcH
+d3K/yv7P8KjrNVl9STVvC6pto6BjtfaKYv5con1hm2C9bHy/02qdcFqiWrZ
kGC9oGrrp7H1t6rpJYL1jjqLYk156SL2F3oeU08lH1PveqHA3kj/AvonqBjs
X0J2jnHblN/zPY6UG/8DOfp7eA==
            "]], 
           Polygon[CompressedData["
1:eJxNmHvcz+UZx38//W58PY/n61AOWXIsFHJMqSZCaTIKESmRktNySETlVKFC
RQ7bWlvbWm3YyvKqmNNotsVrtdZptdc200oRSZL2efe5/tgf1/Pc1+F7/+7D
dfhcd+OREwdMqFQoFK4pFgol/d+mP1tFm0SbRdfnhUL/VCicLf1Ps0LhAfH3
iT9P/Abx14kKGv9BtscrLHtedH9u2wkaV5N+r/QnpX9VfDvxD2uOR6UfIxqk
cXPJnsgsQ7dE9JjGo0WjRE9L9wvRraKqst2h+T7RfC+Kby/+N+Jvlt1C0Tx9
20WyFuX+9mrxLYqeo6r4d2T7rijT+BbJqkj3kvgDmm9E7j2z15+J5mm8PObb
Jf5i8Y3FnyG+uub/jviR4s8S/2Rm+pHoyty672vcTLrWsvm2+CtEHZJlP5Tu
ctFRHeFz+v3/6Pdniq8p3Xviq8j2U8l2afyK6LDG/SQboe9byeaZzOuvrPEx
6U+RrruopfQNJVsuXY+QMV4heiyzDptLJO8rGqxxG8kaaj8zpK+h8Zuar5J0
JdFbGr8tShpfJbpE9k1ks0q220Xna3ynZHOk6y06T+N2ovNFfWLP7JX7vVDj
M+L71eIHiO8p/hzxz4rvL/67uc+Qs7xTVCHdZ/r9L7T/kdLdKFor+brM4376
vnXRMu5op2hu7ru7XNRR+m9Jn2t/R8u0D43/ovn+rfnuk/4e6S+W7HeZ7+gc
8Wsy391DogdF3SRvlby2S8NfWeOtuffOGfC7C8TPFd8WnxT/tX7joH7rkKgo
3djc3+yMtU4Rlcv2n9JXk/x+8dXFVzCH+HtFQ5N9HF8/XXwt8bXZE7EoWR32
xhnmpuoaL8isayW+svgqyfILxDfT/9P1zWLp5+Pjoq6SX5Q7JoiNMuknZ14T
ssmx1lmiu0RnS9YCXxOdEvPdK/n3RJNi34WwqSp9raK/bSa+ae7f5LeXiZaK
OkrWSdRZVF/2jcO/OohvT07QeElmm24Rf3zbRnxrUdLdVhadm9vvHpdupWiR
qL5sP9eeGua+zwbiy4jZ3DaNxF+Q/C1rZK0fyL489x5OxHmwN3LYV6LxmXMb
a2At5IQuuX30mGh6+O7nGh8p2efuEH8tZ6Npt0t2JGwPl3znfHNU/J/Efymb
EeKHi4rS7ZHsQ+n6ij8m3Qvi91U4RxCrxCy540p+U/oNkn0g/WeineQG6Q/L
9yvL/v2Scyi5tJ/oC9lvkeygbAeJ/0r8i+I/qnDME/uT4m7JCa+Lz4vOFfg0
vl1bfLHcNpzVu5EvuLuayWfOHZYi/1YSP0b8iQrvjT0eKfN91dP4ImIqd84j
942V/DbRl3E+JdmMznwXr5LLi76TduQfao/GCzOPiQ1iBBm+97XsTy3aB4lR
YnW0bMbnjjlij2/49jbRcI07yGZT+OxpGqdkX54Z+fK45mycu/5RG8dLP5nc
kvlsPpG+rvit4jvjS9JPET8t4v0AZ0i9pCbhi5EPJ5LvxHcUvzligFxG/BMb
t+deO3torPPfQ44lt0q2OnecVkqO0ZZRT6jV1OxPdd5NJDtZ8plwNjPIZ6IX
NM9G0T0aT02u2c01/+zca2cPv80co+Rycjqx+5T4n5ADsAsaG/gB3d0RX9WS
43Zq5D9yFLmK35up8QzR3RrfQb7UuJNs1ss2F/+PkmvkRGqD+H1x//hH9fBv
bLCtKfoo/OV27k78/pLju47Gp4rqJNcY4hWfwpZv6pFrRR+WvEbWWjtkjKeF
T46N32UtzMnc7JG9NhJfTM5B5Nu6YYMO30BG7uR+sP2V+F+KpuIbQROivqEb
mTmW/0XMx12NDzzGnTUQ3zDZv+dmrhG1o/5VK3cObJAcY8QaNthy/2dSm3P7
co2Ib/Rzou4w93DRAH1/pvQ/lry/6HjBOYZcM1D6HoGH8IMfRH7sLtk17F1r
aCq+l/ghuf2HXH9hMrZ4RLRMtFvyP2YeLwY7FS37c/g3+HCpdI9D1DUwaGbM
iA4bYmGJ+IWhb6Xfrl9u7HWVZDfwexHPLcRfmrvWcx/USGo+NZ5aD0YF0xGT
YJWbk2OVNbKuv4reoNbkrvdg3gkRC5zFqOSYWJM7LttpHe1FL2fGXtOlvyU3
LgBLLEvGMGDeluKHJGPhlzJjFTDLfPHPZY6tceKn5/Ydcgc5BB/CX8kt+DOx
MCj3HbEu4nF57jPjrPaKfi/aIXpN9Hrm+1ga+Aast1j8ArBj0XbItsU9PRL3
sULURntrW+7xCs62aBl7Zu/v6Zv3RTeGP+M/h+Q/ranhor9J/qbowdy/uSPW
9jB3FPloY+Qo/P6h3Lp54c+NkjHNlsy5gzUvjvy7JfbB3PjMK5nXydqfj3oA
hqOHYQ+s+23J34n1LIr8x1x8j2/hY4tyz0WvwJ6Z863QrxS/ktqkuXpEfl6V
+8y7in80+S6wwbY7NTRzDaWWUjOpnWW5Y58z4+yGZa6d4IH/6vyuz1xbqecf
ix8s/mTB/dzWwBDU272B6an5W6IeHyrzHXAXxPTQzHgHW76hVoNZwC47/q8n
2V1yTaG20JOh2x6/B56m9zk3GT/3FL+xZMwF9rosd79AfQavjhM/LPoB+ptr
c8cqMQsepz+jnyMHkYvo+ej9fl1yzQDzbIj61idzDBPLzZNx/dXiL0vOQasD
I4AL6Fs6R7/SKblnoHeorfuqVW7cT28yWNQn+it6KXqu10ruIenFbor6AUYB
yw3JvBbWtL/C+BxsAcYoT8bcZyXnILAFGKKQXN/AFmBSsGmX5PWBd2skYwrq
BxipXtSXRVFTqC3UVmzBxGBjcBh4AfwM1mZP7K157tpLfQPf0xPRG53gTUB8
T9ERjV+WbG30qPSqYNhemX0M/wFDDsyMGfE1fA4siU/im2DWj8vsH9vivMCf
4GV6OzAyWJke/I2Se1rOc53G62M+fHlfzIfPHyyznvXQQ/fO/JvYro/17g9/
ABMfkP1M7XdK8nsA/T25mFgkJslLxOOekJOrqfHUerBJedQsaldv0dDcfTW+
gE8My40FwNZgEDAB+ABssjtiZXPkozHJ2I6aTm3vK/663Dmb3A3mAftQM6gd
YDyw3okyzweGAcusi/oxMLk3HhfxT77grYOaS+2lJpP3n4p6cUVyLaDGg+WP
llz7qfX4Fj0mNZ8z4qyIOWKPPoDaRo2jx+MOucu/l9xb3BT4APtRcYZrknMc
Z7sr8uOc5F74mainXZPfNqiB1EJ6avpkai61lzcK3iqejvVMCXy4Ns5vkvi7
chNjMCpYFcwOdp8V9ZIehF6EfNSLs83ca33Tc1V4TuYG84JFb4j8wxsDbw1g
BLAC7ye8q5A7yF3kMHIIbyxgo7bJby/UJrDZA8k1inpF7ZqcjLWRoaN+LInz
4G1ndnIupIZRy+gveXuixlPrwXxgP/ypY+AB3jKoWdQu3sB4CyPHkeuaJr+9
PBF4plPkuk3xPT0GvQ75sK7405J7qZ/HfrhT7pZaT+0Dk1HzeQsgV9Fj0Gtw
xqyFOZn72cAjxAtvPasi3sBnYDnWR/9wSeTmJwMv4a/9w7+5Y+51VtC0ZJ9H
Nztzv0kPQy/DWwJYl/xNnuMNCBwFpgBbELOshTWBlcDf5M4myW8jxCA26IhN
vgWLdSt6DvAYPoifzIgzn58c09zF/wCJZn0G
            "]], 
           Polygon[CompressedData["
1:eJwtlnlQllUUh19QxNfvk09wBRcEDbUyUVsVcUlNQTBxSdxQQHFBUHDBRBu1
cMsFE1zGlplmqn9bzEmtbBmnzHDGMtMps819w1wRtec39/zxzHfu75577n3v
PefeLyG3OKso3PO8CoiA+ijPq2noeTcDnncf+wE8GQI6n4KBEBP0vCRYgT2T
vlkwG170PW8kXGPMQWJMwB4B6XAebQ/aFeLOxXc6Y/MhF9oTawo+k+Eififx
K8COQx9L/0swDgoY1xYtG3svPp/BELRnIR6tCX2VjNviOy0BrSN0AJ++SWhp
2OkwCtqgDUV7HLs79IZmaFWM3wpvwTDNj88Y7NGQD0eZ91/W2RrfEfRn0z8B
JsJoSEXrD0OgBT4tYbjNm2bx3iTOLmhlMcajzYFp2FNhErQLujkysEdCpvlp
X8bIT/6QC5O1//ZNU7Bz4B3ivw2x5q/9i8Lugd0TkmEwWhY+o+Am33SYb8vB
DuCXqDXofKCPjX1COYA9CJ638xiPloedr3OFYdDL9nK49hxWE7MC3vBdDM07
SjGwB8EAaI7/BcuTNPwmwiTYDJt8d1aKG8IvGvraPmu/M+m7Sm7tZ+yX8AVc
inJ+feifAjnaR/x2EGs7fOC7tSuHsuAF7KFam51bKloX7KZBlw9Vth6tq87q
5AZz3oFT2L/CCYhk3Dn6d2MP1RyQrVpAT4cMyLO8T8HuC/1sriDaFcYeYOy1
gKsJ1cYM+pfS/wj9e2nvg1t2Xv/hl0s7z3d7sA/tFzgOl/EZrjyGs7amywGX
k8rtMcQdC+PgNv3X6X+gb8K+G+X2oBt+XSHJ1rcIbSEshmK0xKBbj9Z1RGeM
toK+8JDbD+3Lz3CbuMn47qR/B32/43sKkrB9jcHeABuhBn6Ek77z34nPSliC
XQaLoDOxFtgaPsTvK/gaHtN5oU2ECbaWBmgR2JHQSPuIVgmbsTfBBuiGzzK0
cliu77M51mOv0R5gf0/8Q9AA7Q7fdBeO2bcVahx+r8Bkq99OUIq9EBbAUnxK
YS52IczWHYXPb8QcFMa+0N4OPdDuEvNv3TXwDwRs7Bz6E+jfzZhPfXefKp86
oH1E+2PojtYELQDREGF39krsV2EVVODTLORia46LcI85jzN+AGvZgk8lHKYd
j999+sMUg/YqCKKdRSvGLodlsATKYA20UB3h8z72e/AJlNge/ISdyhwVtF+D
A7T3KwZ2FaTQd9R35zuf9jwoslxLQKvTWrUetHC0Y/j2Z8zrtNfDQdprdW6w
zs6vC34n0Afit412te59tMigW2sP/JKhJ5zGbzB+5ei7oBc+bdAvqX5Uc1Yn
9+Eqdq3qFWLxyWRsBpyxOh6r+wt9o/JNv5ZrtwLuLbmH33TVuO/yRXtUplyH
l6E3NEeL0Z2q/MWno3Ja3x7hHm7tgc7oodYF9eChTSPmVCiEvyyHdG7nsc/B
GahjHQ/htu2p9ra97ntoCiE7Z/k9HXLvgd6FNtA46N6KTqop1Qs8h09X3We6
O6y2GwZdnSsflZeNTdO8t4gdR7utchifBay1FJZDQ6tV5bRy+3Pf/e9Q7sYz
vgB7FsxUflida0widifoHHL3ge6krdhVUB1ytaX9aKz1qVZC7h7/A+1POA2N
bI4Z9ibrbS5GewZSsPtBrO3BfLR5UGL1qZqutf9BtQF3BtPsHdB7cIO+7+i7
HnD3kHLi0aC782rsfTlE/w9wxP6PrbQ7aQ/938C3vrub1qGthdWW49FoF6yW
Y5Q74Ck3iBlmdazcKNLdAfX4XbHcVS20JE5raGX12xbioF3I/c/SfynlqnJW
NaE3Y7HvakFxWqK1gtYh9ybpbWpmayrB3gbVvvs/pv8s72L/D7P1QAI=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxFl3mwj1UYx98f/V7u6837iiRFyDKWweDad127i+vKvu9LrhZLYy2lmqZt
+tsSLVQk2kgxGKnRUJZUyhJRibJvqc93nmemP955vr/vec45zznn2X5VRxcV
TCsWBMG9mSAojhwWBcEL4OnImmkQ9AmDYGwcBEuyQdAZ/lhOEOQzNgi+AePL
nNf4ePT6w9eBn498Hj4P+SDfLHAh8gLz+4CXoj/O9eui/w6/832dt/kGgtcg
I8Yng0NkLb6HwSWQu11nJ7Ivv58G90MWx7ZdcJuTIDjHXj3hA7jG7DGU8Yns
2Skye/pGZofsWYGcENu56qV2Rq05XHPhVzK+nDULwA/BN4TvE5td5+C3MD4E
/susfbJhJfx9jFfmuwm+wJeC+zGvDPJR9Msib8CXRxbCV0IWZWzeEr+T85wj
xaamcEPRacq3lrGlzGsBPw9+OtxY5DjtB3e3r98isj2ExVUITV5jbjXGxsPX
jf4fuw7fl7US8CXwMHArcHnWnAx+Av0B6F/I2txLyMr8HgvuxfiP/B4uP0F+
wzcMvA/ZPrJzNUb+lrU3PZe1Mel8jzzINxi8H1kavUO6S2yoyN7tsGFEbLaV
Bv8N3xn8BzoHwF1is0G2XOX3XX6fr4NXo5MLPoEciU5JxpaDH8/YnZ0BDwX/
jvwpa+scQZaL7CzVtSa/x4AvZ+3MOvsNZFXmz9AdhuYburfzendsbus2j+Gb
j05v1hkF7gxfnfFq8seM+YfOJ50OyNHo9ELWQOcae0yF/xd50+/2etbW6YLO
/eiU5WvmvpF6vChuKoY2V++qd2yJLJfa3egt5GvlQjuL7jTX3ygP2QT9buDT
+N4hznOePSvC70vsHvNiix3FvnLAr+i9gXwtsbhVbL6PnMu6z4DnICcxZxSy
JTZMQi7K2Bn+ZE515QnGx3veWBxafCnWzzI+hr1ngPOYWwT/HDqT4dZ7/K7T
e4bmn7Pk7+i8Ap4d2fsrjnZkLZa7gk9i70z0Fmds3b9zLKbeZK9Jkdnbw/ea
De4KnhWbXYXgac53A49G/0XWeRhZL7T8UEe5Cp2XtT78Y+AndSb0cz0fKq4U
F3qXO+EbO6/xmei/Cp7LeGvNVy6K7Z3nKa6R3fnmZMyfFoV2J9rjIfQeQXZM
7Y7Ez0JOdb4TfEPPCfWRzeD7gW9yB0We/wch26I3hfEpjE9FPgs/TfP4Fuq8
2j8yO2fE5gN9wVeQS7jHrdxn69h8Sb6xAu6Ux+D2rMWF/Ly4fJh1jsK9576g
PN9VuZG1NsGvhT+eY3l4GTjLnCqM92eNAbHFX0m4epH5fBPkP+h1hB8ZWx7U
eYco/4cW+6uytqb85yKytt9nA+Sg2O6mFGv+kmN+Ln9P+N0IfnBsOtKNUqsH
evdWyMLI/Gok8hF0FqLTWn7iMT4ytFq5AFyAzmB/04GhzVWMNEW/RWxnX8M5
moM/Um1MrOYpvrZl7a31LuOZly+/AfcMrW7rLPKRYR4XI0LL4aoRzVl/gsfg
AmQx5j+Ysffa6Hn4M+QT/u46g/KX7B8cWZ9QpLyVWj3Q+lPly8zfzLwPsHO6
12XpdY0t3x+E/ws5Gv4sslpqviUfk46479CplVpdV+/R02uc1lfPoD6idmr5
RHeZC24Tm09tSgzrbj4FN/S6r1pfwfNhHfBJxoqFltu/dnv2ID9PrLdoG1sd
V02P0Wnj96W4uCc1v1KebJTa/aqvKMXvA8z5IrF8JL9SvyOsXPhWYrW7AP4a
/Mdwg9TbMG+DY3GXGfsAuVq1mPWfCi1+FafiV3m9U+3bCG4f2747ErNBZ6mA
3M7vvfDtYottxXhJnRf+MHxH1fbY3vnDxLDebj34DF+GffPh8r2fU4/R0u2/
qnyfWK+m2rrB4129VmWvazXBVTyHyGfKuo/J1/ajf9LriPKSckkHdCulFp+K
WfUA/VX72GtPYrW5U2znVY+wE66C11nlRvUDquGfwG9LrP/Q2bck9sZ601uJ
5Q3lB+Vw1YouqdVcxU0x8A+J9Tfd4LrHVvN/Tqzuqv7ewdwgtdqv/FPgb6Qc
WMb7NOWZ2HOFcsLFxHo+9X6Xvd9T33UbOjW89o31vNQlsryn3vUscmBs9aRE
av6hPPAua0xE7yV0HkWe5ncQeg/m9Vr250QWy3pr9cbygeusWdzfKIusBD8F
XDuynkb9gHpD8Vf4fcTzj3L7pRy7B+kd0x27L+ldksj6KPUJNTz/KKfKn3uA
zyC/dTvlVw/ElvP3wvWIrcf5zXtm9SG57kv6fTyxGt1dfVqO7S87jib2RrLz
MLhDbL3kV4nlz0L0b+WYLys/347c7bHfOzYfVL+knvRUYvfS221TD7susf8F
ys31uf+tHlOKo9Jes1ULtK/61V2M95SfgU+A/wNtL5jE
            "]], 
           Polygon[CompressedData["
1:eJwtmHm8V2Mex89PnZPf09E5qZAirdKK0r1tupW03ZZ7b+kq3fZFWqSNZB9m
htes/pYYUxONKCXDaDDGEs0whilLKpIlFCXVLZ+37/eP7+s8n+f7PN/zLN/1
aTl1QeX806IoqihEUV19D2ZR1CCJopnCLUMU9cmjqLdoYRpFN4ieFf/FOIqq
GS/+VaKxois1ZnBucy4QfZuZrHPUnqqx32rOh8I/FqOoUvh54T8JD5DM8cLv
Cr8p3Fcy5uj/v1DfBM19T31fxybjbOHTRVVqv66+fyBP1EzjzxWdk9haV+j7
+4KtmfWwl+80fqfGHtL/RwqvFX5EuJ7Gd9D4eerrqrHH1HemcCNRU+Sq7xrx
vtL4/4t3XNRc/bPU11q8SFSu9rPibxTv76Jtsa3vuczOiLN6VPjPwm+JPlJ7
gvqCeM1F09X+UH3/Fq+f1rNA8u9W3zXiXSF8vfBvhacKXyiao/anGv9OZmvu
Ikpy20t7ta8T/6D474pfKnyDcHvJqC/+Ke1/rK/38czulHNaonFLRV+KP0z8
9eL/RfxBua2Bf09zor0QuaLNGrM1tvt8Su0S/199/e9r4UKw/+0U/z/Cg9EV
UYlkTteYl9T3tnhjNKZW/35SeK/wHtF6tc/S2MnifSL8X+F5wvcK3625Vbnp
DLrznmi72r2D3WUn8VPXyWVq31EwXR0ufLPwL4WnCI8Rvkf4PuH5wg9JxiOx
2cM+redl4e3cjegVtU8Wba2s+dXMdJC75s5fUDuXjInivyX8Ymb3wX3l+sd3
mekwuvym+FtdP8bxr9hsCx1D1w6IdmRmM9gO97lL7cNFWxtrXCXcXfPnFkz/
T/p5TRF+Rfy/ZaaDr6r9Wmy62dDX973wx+i6cI3w++xBuI904SrhF4QfEG4i
/qSC3Ql3g86iu9z5Zr/vhcJt9P8DwrHw1cIbxV8j/LnWO1R4tfBK4RGp6ftJ
4f3CB8QfLrxJ+K/CT7t97BI9o3Y7yZstfh3J/0z4SfU/IVrHeNGj6tus79Oi
x9RuG8w2sdETwhe5PWDT2PYn+t9g4Yc1/sHM7hydQpfQhTZ+HifE/9TPhzPj
rI6p7wc//y1qb1Bf4vtFR9CVZtiI8FHhvcKVuekqOnudeKmfH3tkr+9ndhfc
CbozWuNHiRbpnBaLvuEfiekQtn/C/c95ohai77We0eJt4EzE2y2qjW39x3wP
tOnbx/4zO3vuoLn7H9a813lH3T9zXw9nZiOTRcNys50hat8sflv9u65whegu
tf+ovuXi7dGc1sKtROeLyrWH4aLP1f+F+yvssyDeV8Kf6X9DXJ+xPfZ+h3h/
KNgZdNP4Bfh+9R11/cKfvoHPcXtC3/fHFiuG+vpGa3w7yarhHIVLiQ/CpaJJ
7g/miNcT/yZ8p3B1MP6MxHwTPor4QhzoKV6vYGv4QXRpsLVtYV+xxYgzghF3
zN3C20RMiC3GFYP5d+Lbb4QnBrPRl2LzcdguOr/L72dwajaGDOZie93Yk+bf
KP4Vwj2EJwjfIzzG4/Xtwr8SniHcVbjK48lI4f7EcuHbhauEB9Anaq/+i0SX
iMY5n7g+nLsXdVZ/F9GlPmasx376qjX+loKNvVx4nvBt3EEw/cHXTlNfr9zW
ND1YnGatk4KtnT10ym1N/Js1dBQeKRqRm41iq/igJ0SNg/kmYg6xB53tlVp8
uUntgdiI5q3EzkWjyAGKZvPYPjazp2g+Dl83ghxFeLdokNqP4f9El0nGZMm6
VX0jguUM61weuQT+Z4vHi9LUbAbbwed1F64X7O6fcf9EDvBybD4f308fvgs/
wlhyCGIzMZPYucrjETbSLbWYDZ+c47j+39T9DfHvn5npH7q4zf09Z7U7Np/G
mf1L+B3XR/73nMcvcqo6wWIWcSwL5o+QQexIXbeJycRmYkSjYD57k8fvnqnN
3eb2gIznPX7iI7FdYh6xaYrnc7UeT5GxNjP/d6fO+9fqmxVMHypFZbnpLjaK
rT6k8efn5vPwfRs9BrRQX5nmL9GYvhp7JvoqvKJgesx5cxdbPHacyix/xEf0
ET/KrY8284k/bd3v4s9a5qbL6DR6vNb3Tww7or2cJn65+EuF+wWjy0WF3HgX
4kc9vyW/a5WbTGRhG41yW/Mwtz18WKWvH9/WVLin21u58Lm59dFGP89W+yzR
wGD+4VjR7pZ8bjWxQ7y+7j/IwxjbW3hZweYQsznLDR5nW5NDiX9XwfJxbBrb
HqW+tuI1wY4T89FlwWyOfyAbW8R2l3v8w4Y7BIvJxGLy9Vp91+g/14vfA3+k
8fPdf81LzT/UBMtByUWJochC5tDcdARdWSw80McscX84yePWUuHfCc8OFsPo
o32tqA1rTSxmENuG5CYLmQtSkz8zWFxCN6s8nt8v/tLUcgb6aC9LLWde7/ZU
klqNg3/a6jkYMZ24diN+CpvS3M6uL/hhYupQ4eW+njrovfufaZrXILc5/d13
k9N3EX9RwXL9INzV94O+FIVPz00H0UV8/Bi/b+Z3yO0uudOZqdUQ1BLj1K5O
zWfi69a5PiCro9sXMlf7fqkZDhbNJrHNVbHF0DWes1W7/XcMVo81Fu9IZrXi
DOE0sZqRPnhNEouznV3/iWHEsoaiixOzaeyEuDUysT2wF2Qg6wzRoczOhLNp
SK6UWU1AbcCZc47UTp1Fse+bM+FsuiV21tggtlaSmG3iE9h7y8R8BWeMbbIe
zh4bxBa75xY7Sjxek3OQW/ycgyRmw9htM7cfbLK5z+eu+yVm2+gAujA7MV3F
prFdxmPrxGBymYmJxeZBwWwRmcjGxxD7KxLzPRczJ7H4ShwnBhB7yF2JDVe6
/BrPf8p9/+MT2xNEm3j9c+4RzJfh0/AV6Bi6zPmiewX3x+hwHc8biO+LEnsz
gGhjc9jeeN//VOELsOXUbA2bq3Q95vyRiWxyAmq3WxPLFeb6edxE7pkb0cZf
4IsmpKYP6BC6NNnzD3zEMD8v9kOORq5W5vkMPmmA7xdfOCuxtwpqLmovYghx
Y5n7I3LiCs8/yDeoOfbKPq4OlvvN8fmV7k/5R5nHAWILbxjkSPgUfMsK7iFY
DXCt+O0Sqw3wYfiyRaLFwWo4ajnq7dfUrnB95s65+0Nuzw96ftPf7wsbwpZW
ev5CPtUjtTiEfmOD2GKN6xNvEvhk7oi7muaxkbx4PrmPcOPcfDq+nZqA2uBj
r3cOi47HVq/wbRXsPYUcm1jMeZJ7v+32jI9oId6XXkdgs1083mEL6DuxiBqU
tw7eIKhNeVPZ7nUZtQ5vCPs9/yDf3uf1EjUjcf514R1ej1H34UPwJdQslant
gbrrsmB7w0fhq9gze8dn4jvxk+g/byD1EquRWQ81FrUWNRG1UZbbWTH/kmBE
G5mHNS53f8GZcDa8IVDLUtPytoBPq+/7LfUcgtg5N7HcAn1gT+yFWpYaep/X
yeQ2nA25IzkkZ/SGcN3Ean7ya97Mdrif5i2NNxDeQnjDqB/sjemb2OrT9n6H
nGWt3y1vFrxdsN7zPJayPmo8YiqyeevgfvkH+Sxvhrx7fJRZvsD7xo8a84H3
HfH1MhYd3+n5coNgOoIsZP4vszeyYmI2g+1Qh56KTWanYLpEXyePA9Sk6Bi6
Ra36E4JOfZ0=
            "]], 
           Polygon[CompressedData["
1:eJwtlmlUVlUUhi8YJh9XLormkDiFmuSUDAqooQyKIijOOCCaaIpihppZ2eDq
V6tp9bfRLGtpow3aZKZm5YCkpuXQIIKIM2JmSs+7zv7xLN77nn3Od/a5Z+9L
tznlhUvCPc9bCxGwNOR5z4Xxt7nnlcNMnqfBfPQaeJaxcp7fDjzvfSak+J53
PdLz/oVl+M8zvoK45TCX51CM592LHgD9YBrxRTAQ7TPWEqIVQ+wASA+5sQCv
Av0C6z3K82p4gOe+0AeSoCteBHHFrDcM3R7dATpCFNyN1xv62+8Ox8uAEbAM
rwxvkUB3xesG3WEp3uN42ZAFqXgz8FLQrdCtIRZy4RG8VbASlhCTxr5SYbrF
xxCziOeFsBLW4hXirUC/SG5P8vwELCP+fhiPnqAY6ElcDyhA50MezCEmi7mZ
MB5m4CXaGdyHHg4Z0AXvLhiDHg05UELMed7TOdjE+9vK+7uBXu67fY1XPqy5
Gh6Dl9lfKf4zyo+YSMb7ovtAAky18ytT7rAYhhGTBnO1V5it90ZMb70PSIBJ
ePPw+mk96A/T8ObjtdV83Tv0Heh2kKg7AW1sLAO9wHe5D9DdgYHQB6bjFWlv
tl4T+d2C3eR7hHyjmTsbfwTjdxLfCeJgF+M74Qc4RFwGMReZdwE85mzDe4Wx
Op7PwKt2/y+ha6EG3sBbj5ekdwEH0L9AFXzP2A5bO4r12kOHkKsb1c86xnYz
1gzvY/QX6C3wNaSz1pd4p9E1WguG4l1lXgNsZOwzvMF476I3oweh/2PsJtTD
WdhgY43KC92TM+gFt8M44i/hXYTLEOg+4GXCceachBNwgLEhvjuPT9Bh7Dcc
rtqcQt/Vseq5AB2OV629Qw1M1HvFa0Rfg38C926q7KyOwnBi/tYY+jo0wRi8
qaw5Bcp0P60udddK0BP1XqEEkvGSIMXGdP9Uv4M0BwZbXaYoFrJD7j7ctP21
Q8dBJ7gRuH6ViE6GJOtNQ5kzBGZZ71G9xcMC/R6MtHpT/Y5VL0QXED/O7nGS
rZdud70z3jz0Qt/lqFy7QGcYi+cxVsVeRhKXA6PgYes5mdbPFqNL1avhHquz
UrxCnieEXH2ozvK1byi2OpqJVwyzrJfk2trlvutbi2y9KXiTddZWv+qTeg95
yhHyY1x+yrMo5Pqq+oH2V4F+CB60vruK8ZfoL0/z/BRU4P1oNar3/xP6Z6iE
3/B+hz8hi7FDeGfRI313PjqnYei9ePthH3wTuBqsRG9DfwfbVbPW91J91xfU
HzbjfWV19qlqSfUHn8MW+60c+91z6HqoM2+regZ6F2y3upwArcgpFlrDlcDV
R1t0G4i22jqPF4UOQXOrwQ/w/rA8P0R/BIfhEt5FOA+jfFfXqu8WIZej+otq
9Rh6L3of7A9cDTbTdxJugz2qK+Zdi3R9RnmnEZMPYYy31HfZ7lqItSNVG7au
aj8bXY0+A7WqWetrv6IPw0HrneoJ6g2Vlk8suq3uPsSHXF/QXib57jt+C90E
nr5bjHfXnQu5XqEanExcPHoU5CoX4qrJ4RS8xvg6fiORmDetB5+2HJVrsvoi
3g7YCesD945i7Oz1DhqUQ+ByUm4X7Jz1TR5n31B9S3vxu8fUuxiPY3+9IQFy
ibuCdxUadF+JCSc2DJpZD9C3W+d3ivEWPEfCQeJimB9AR7hsc/Ub6n3qgY0w
2ndn0MP+p9H/NucC9y3LRG8g5p0I18NOwHE4afvUXJ3Be+hNsBHeCtye9XtH
0EdVZ/C6neVf9m3RN6YW7xZeHvF1qofA3Rf1pFp7rg9cDe6xWlBNfIv3P95I
TZ8=
            "]], 
           Polygon[{{4102, 4101, 3157, 1569, 1579, 3159}}]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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

            "]], 
           Polygon[CompressedData["
1:eJxFmHlwltUVxt8X4X3hfl/1YtVWnXbGOm2nddppp2Onm522U6e1U9vRaV3r
giK1bthdq4JUWxEV2XdCSAgkBAiBBAIECIEIgbAHAoQdZJGiIAIVivT5eU6n
f5z57nPP/e57l3Oec8697qG+tz/VJUmS29Ik6arfHSFJWtQu5EnSEJNksXC9
8JksSSqFP5CckswrJsl8yWm1f6Wx7Rrzb43dIlmu9nmNnyFdVkiSbpIo6Vmw
OZjrrGS62rM0fqbG7xYeI/yO8FHJv9Q+Lsl7Jsnjmn+fxjToe8fU91PhVcL7
NO6s8N3CW4Q/FB4pvENzdUpGq71MfbOkOyQ8MdqaWfvlWssnC/aNn+n/61L7
9gDJaLVf1/g7pTsofEDyntq/0LiRapdJP0T6e9Q3VHMNkUxWu0wyRLJVug7J
ULWXaPw8jd8lPEy4q/bzsObpLemmdg+tYWNqfeguaPxW4QeFuwiXCVcJT9T/
H9D/Dwm3CV8rfbPwAsmX1b5Bsoh74RvMLZmv9jOSOv23XvKs2u/r/xv0//uk
/0j4iPBa4euE1wjvFH5L+FPCy6KNYez9kkTrmSx9pfQjNN990s30+1sk/Dfh
gZmdHWf4onSt6rsmt/WuVnuY+iZLN1hj7oq2J/Y2QTJOcnc0HWNe0tjx3j+K
OSX3Sl+p3yrJXMkejVmpsZ/R/G9Jt0JyVW7rb1F7tPTl0o/V2PvddvtItzc1
Oxgi/aTU5uc7D0Yby3+el3699EvU/qz+0yZd72hrZc2TJXXS10q/Se03pXtY
Uq52meQhxkpfIX2FcB/h30nWqt0m+a3avSST1B6vMcM1tntPs3lsfYGkQX1z
pdvPGI1tF24WPi08VXhQsP8yxyPCc4RrUvsG38InNwvflpuvlvh6Vkg/UHiE
3wfrfYzxkjs19i7JOfdHfONLwpuEV0k+p/YK9XVw9tHOhjNah+0Kv6a5BmXm
L23qWyzdMeEp0q2XfFH9X5CsVbsvc0rXKvl9NB+GS+AUfLtFeFFq/jxYeJpw
dWr3/xS2IzzBz/dx7l94ofB67FB4r+Rbmuvbkv1qvyBpkG6BpL9/D+74rvR7
hAvyxyAp6A6KkvHST5G+UeNflP5t4dXCt2v8TuEa55cW6V/y82b9N0rfKbw5
2l7Zc7vaXTT3NunvEN4hvE3yc7VvlWxXe67bU63m+4PwBj/v6yUb1f6HpEm6
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
1cC1Hk9Z338Byld6Tg==
            "]], 
           Polygon[CompressedData["
1:eJw1lnlQV1UYhq+lmD9u9SMdNSvLlpn2fd+zfZvKxl1LzX2vZirLXQQVAcUF
hRSDFEQQoRQBTU1l0VwQ9xXJyg0XUlRQ7HnnfP3xzLz3/b5z7rnnfOec26rH
kDaDr/E8LxwaQGbQ8y6FeF6873mbAp63GZai+zb0vEfgYThLThV8iP4A3oPF
5AzHW0XbNLWBZTAd7zBeProQiuArvGy8JZABY2kbjbcDPRldQM4KiMXbhlcG
eyCaWBL+XJhAbIP6QA9EL0CPJj4IPRiGwhD40vqNIpaIrkD/CcdgCl4MHEAf
goMwjZwE+pwN8yEf7we8JeS14zs7QHuoxrs+lDb1PK8Tzx2hhvxw37X5jvgw
+B6m453Em4OeC0lwBN6kzRvQGjJ8l1dJ3mk4BeHkVNPnJ8T7wX7e5fPOw/jl
+hZ4BT+ddtPgOG3m4aXAzxBF20nQS8/EZqETybuBNo/DE7CC2CS8LTbPmu8o
vAl4RegSKIaJQfeOE+gLUA2T8GbjeVp/dJbmCWZo3aG/rcso363XOvR62Kj+
8GYqF+KtRmLxMmmXAbmw39ajDL0NKuBB3rUUr7d900itK/6PVmtaW61xufXX
x+pE7+uL7mdjrkc/DSEEfgm6elPdxdk86ts0l0fRU/GSbV5noWvwzsF51S9e
J4hFj7Pv1vePVp94K2EtRNBuLP4YaE8sWjWCl4oOMoYw7Su8GXg55GTDmoCr
G9XBQkiDdNufM612NUdT8KZCHIzDy8XLg+XwDV4M7EPvhd22j7S+hejxxCIg
UrWqGtTeV//QBS+VMSyASMtXHXymedC+0BoSiw+4/bsLbydst/3Wwb5zFPGp
mlt9P97v/8+Hxgv56MF8f6Mwz2tGfTcPdeuZaPOo/EXoneiPyMsi/xzP5+EA
3jN4adpjPFcG3Bl2lTZ1cNHm6mu8rehSyLQzZz9eG9p+Co/BAt/NwTTiiyEL
upKzlz73QAqxe8nbZXVQS/wKXNb48MbgpaMHBN0ZpbNqA5RAKQRou1I1Cq+h
X4WXbf+uwWuGbgpNYI7v8rS/F6FP0/5MwJ0br+OdQNfCZdvTN+I1hptgvvZd
0NWn6vSM1VUS3Eb8dmgJRdpD9k1b0aU6b827D+8BuN++V2fEZvqpgn91Tmu9
tSYwj9gd5BXjTdTZDN00B9q/Vh+qk854OTqj0N0tPtx3Z22C3TW6c3bDrTY+
jVl6HXo9FKoe4Ba8FtAc5pKzNui+XXNws3n78J5CPwmP2vrqHG+L3k1sj9YW
NsHdeMn6RvSWoDu7khlfCqTa3fKTfWeJzhTYCON15kNHOwOGkbOV5y3wh/V7
AP03+i/4x9Yvw/prhb4L7rT5S/BdnSxD58JyqISTcAret7u2se4B7oMBPPeH
XN/dPQV25qywe2sh3vM2B5qLQ3i12sPortAZslU/9HeI/rrx/Dl4PF8HDaFJ
qNufAfZnJrlvo9+Fd1SHQbcPtR8bkdfH/g+0D7UfLwTcfOu+rLLxn8W7AnVw
GMrhFLxl/ek/Yg3jXw2/6Yzy3XsVP0rsGByHkTACRgXdf4fy8tF5UGDnQqrv
/l80rvqMvwGEQFPGWsH3DsIfCHm+W6+Wtj/usXrQ+fIc+ll42vqbDw+h43Q3
hLj7aDXjXwXFAXcf6k5Rnu6rMvR22GHr8QLeS/AiHMQLYyzljKU3z710J4W6
c3yZ/SPpX+lb8uox7p7Ev4Duegc5Lcg9QtuPeR6q+9x369sFnYO+lnh9uIR3
EWospjWPZKwR0M7O8xj0VXQdeLyrh70jGn8yzAm4862tjUXxX31XI6qVODvn
e+ruJG8Esf8AmvSeJg==
            "]], 
           
           Polygon[{{4286, 4285, 3226, 1803, 1813, 
            3228}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0uA1EYgOFvpq2ZqdqwrI2kNgQ7liyVlrY7WxfQxl/8/1wCCTciXIUb
YVWJPZ4hmXfeNzlzvpwzc/ujwTCJiD18iHW+TyMesKmfuc+NPGISPV3nArs6
5ww7usZVdHWFU3R0kpcfRmzTTxaxxd/c5jfzN/iVX7Cmn/gRy/qIDzGv+9zD
rF4p1zGjp7iBuv5yh/I+B+an5X6u8DGfoKpP+Qw1fc4XmNCXfAVPXHvdZH/H
jlu+Q6ELQ6d5gRfR1B3uoqWHPMKSHjvIJ1b1e/L/f38B1Wsfog==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MkuA1AUgOGjNt00iKmlFl6DhHdoqZoS09KwYlkJC5a61OqkplfwIqw0
8RQSNr6bLv78f25uzj25iwdnpdORiNjEZybijmujEZe4111+5LdsxCt6+oWf
0dVP3EdH99IZ2rqTjJZu8UNCN7nJDW7wu/l17qd3cKuv+SrtoPd5Dxd6lVdw
ohe4iCP9Z+9fbOtvLnHO/DKP8RqP8wTW9SRPoaKneQYbepbzqOoCz2WH/zLP
RWzpH/MPOe/tAo71Ei/jXO/wLmr6y90BbvRHZvi//9jcK/I=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Mkug1EcxuG/VIxXYUfCVo0x1IqExK5ba+ONCNfQUtWKoS02rFoWJLVk
SSIx1dQb8CQWvzzv4ss5J1/P0triaktEpFVLRDxyuTViRW/2Jpuc6YxI6dee
5pR+7ElO6Nse55i+7FGO6NMe5pAadpIfHOQ7c85/4ja39GBvcF139gLndW0P
sF+Xdje7VLFfvftFRbvODPMdEVkWuMMiD7RrH/JIOfuYJ9qzSywrb1d4qn37
jOcq2M/OL7PN3e26sHvZpyt7lnOq2ze+vdW9XU38/98/eTE3Qw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0EsuA1AYQOFf0kpMmCE60SFDJkSLqgbxLhOaVGIBbEBYRTfCiKSbUIq0
HototfVIfI3ByTk3N/nvI316XjwbiIgj3CQiZiyOkxElLOgLXuWPoYh35PUb
v2JFN7mBnH7hZyzrJ65jST/yAxZ1jbN8zxmumD/LV3yJaX3CZaR1ljMY1yme
wIjuuWsXg/2zuI5fb6hyiwvmt3mNP3mdN9DRm7yFrt7mHfT0Lu/hS+9zEd/6
gA/xo2vmJ53Z4jaG9ag7jfXRczyPSX1r/w5T+jrx/79/g6cwpg==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Esuw1EUgPHTxF/ULpCwEaWtx8CAGBGDRid9oKJFJAy9HwtgRGIVklpI
1aP1XoJfY/Dl+25u7snJHVopz5VSEbGImyRi32G8PyKDQ13gK94djNjBpd7m
Bi50nbdwrje5hjO9wes41WtcxYmu8DGX+Yj3zD/gIq+ioXOcRVWP8SiKOs0D
WNZvdn3Fgn7kJmb1PWe4lY6Y4DZP8jO/INt7yx3kdJffkdcf/Ikp/cXfmNY/
/IsZ/WD+PD9xG0u6z05Jb389zCOo6Fv3d6jr6+T/f/8AU3sxzw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DsvQ3Ecx+GfpU3QKuJSmzdAwhuRmqw2S72DBlG3MlRSd0YGiRrZGDWV
uIzul5mEN+A5MXzyfM8Z/vmfMzg5XSi2RMSEKqmIOw9D6YhhPdhj/ORAW0Re
H3Y/+/Ru97JHb3Y3u/RqdzKnF7uDWT3bGT6xnY+ccv49x1lQwx7liC6Tc5jT
uf3rfj86tW95oyO7zhMd2DXWWGqN2OAMNznLOW3Z8yxr217gonbsJS5r115h
RXv2Kte0bx87/5BNXqtuf/FbZ8l3uWtGF3bVu3VdJeel/v/vH3+LMrI=
          "]]}, {
         Line[{2, 487, 11, 500, 501, 20, 526, 527, 29, 560, 561, 38, 594, 595,
           47, 628, 629, 56, 662, 663, 65, 694, 74}], 
         Line[{1905, 485, 1922, 3268, 2845, 3269, 1940, 3291, 2853, 3290, 
          1958, 3317, 2861, 3318, 1975, 3343, 2870, 3342, 1990, 3366, 2879, 
          3367, 2007, 3396, 2890, 3395, 2026, 3421, 2024, 2046}], 
         Line[{1907, 486, 1923, 504, 3271, 1941, 3294, 2854, 3295, 1959, 3321,
           2864, 3320, 1976, 3345, 2873, 3346, 1991, 3371, 2882, 3370, 2008, 
          3398, 2893, 3399, 2027, 3423, 2028, 2047}], 
         Line[{1909, 2843, 3264, 1925, 2848, 3274, 3275, 1943, 3302, 2856, 
          3300, 1961, 3328, 2866, 3326, 1978, 608, 3351, 1993, 3376, 2885, 
          3379, 2010, 3406, 2896, 3404, 2030, 3429, 2034, 2049}], 
         Line[{1912, 2844, 3266, 1928, 2850, 3284, 3286, 1946, 3313, 2859, 
          3311, 1964, 3334, 2868, 3339, 1980, 2877, 3360, 3362, 1996, 3391, 
          2888, 3386, 2012, 3413, 2898, 3418, 2032, 3435, 2040, 2051}], 
         Line[{1914, 1921, 3270, 1930, 1939, 3292, 3293, 1949, 3288, 2862, 
          3319, 1967, 3315, 2871, 3344, 1982, 3341, 2881, 3369, 1998, 3364, 
          2891, 3397, 2015, 3422, 2900, 3394, 2036, 3420, 2907, 2053}], 
         Line[{1916, 1926, 3273, 1933, 3299, 2855, 3298, 1952, 3325, 2865, 
          3324, 1969, 3348, 2874, 3350, 1985, 3375, 2883, 3374, 2001, 3401, 
          2894, 3403, 2018, 3425, 2901, 3427, 2038, 3440, 2909, 2056}], 
         Line[{1918, 1931, 3278, 1935, 1950, 3305, 3307, 1954, 578, 3331, 
          1971, 3356, 2876, 3355, 1987, 1999, 3381, 3383, 2003, 3411, 2897, 
          3410, 2021, 3431, 2903, 3433, 2042, 3442, 2910, 2058}], 
         Line[{1920, 3261, 2852, 1938, 1955, 3279, 3281, 1957, 3308, 2869, 
          3337, 1974, 620, 3332, 1989, 3357, 2889, 3389, 2006, 688, 3390, 
          2023, 3417, 2905, 3438, 2045, 3444, 2912, 2060}], 
         Line[{2048, 2033, 3428, 2029, 2013, 3407, 3405, 2009, 3378, 3377, 
          2884, 1992, 609, 3352, 1977, 1965, 3329, 3327, 1960, 1947, 3303, 
          3301, 1942, 511, 3276, 1924, 1906, 3263, 1908}], 
         Line[{2050, 2039, 3434, 2031, 2019, 3414, 3412, 2011, 3385, 3384, 
          2887, 1995, 3361, 2878, 3358, 1979, 3338, 2867, 3333, 1963, 3310, 
          3309, 2858, 1945, 3285, 2851, 3282, 1927, 1910, 3265, 1911}], 
         Line[{2052, 2906, 3419, 2035, 3393, 3392, 2025, 2014, 2892, 3365, 
          3363, 1997, 3368, 2880, 3340, 1981, 2872, 3316, 3314, 1966, 2863, 
          3289, 3287, 1948, 529, 3267, 1929, 2846, 3262, 1913}], 
         Line[{2055, 2908, 3439, 2037, 2902, 3426, 3424, 2017, 2895, 3402, 
          3400, 2000, 3373, 3372, 1994, 1984, 2875, 3349, 3347, 1968, 3323, 
          3322, 1962, 1951, 3297, 3296, 1944, 1932, 2847, 3272, 1915}], 
         Line[{2057, 3441, 2054, 2041, 2904, 3432, 3430, 2020, 3409, 3408, 
          2016, 2002, 3382, 2886, 3380, 1986, 3354, 3353, 1983, 1970, 579, 
          3330, 1953, 3306, 2857, 3304, 1934, 2849, 3277, 1917}], 
         Line[{2059, 2911, 3443, 2044, 3437, 3436, 2043, 2022, 2899, 3416, 
          3415, 2005, 3388, 3387, 2004, 1988, 621, 3359, 1973, 3336, 3335, 
          1972, 1956, 3280, 2860, 3312, 1937, 3283, 1936, 1919}], 
         Line[{83, 725, 92, 738, 739, 101, 764, 765, 110, 798, 799, 119, 832, 
          833, 128, 866, 867, 137, 900, 901, 146, 932, 155}], 
         Line[{2061, 723, 2078, 3452, 2915, 3453, 2096, 3475, 2923, 3474, 
          2114, 3501, 2931, 3502, 2131, 3527, 2940, 3526, 2146, 3550, 2949, 
          3551, 2163, 3580, 2960, 3579, 2182, 3605, 2180, 2202}], 
         Line[{2063, 724, 2079, 742, 3455, 2097, 3478, 2924, 3479, 2115, 3505,
           2934, 3504, 2132, 3529, 2943, 3530, 2147, 3555, 2952, 3554, 2164, 
          3582, 2963, 3583, 2183, 3607, 2184, 2203}], 
         Line[{2065, 2913, 3448, 2081, 2918, 3458, 3459, 2099, 3486, 2926, 
          3484, 2117, 3512, 2936, 3510, 2134, 846, 3535, 2149, 3560, 2955, 
          3563, 2166, 3590, 2966, 3588, 2186, 3613, 2190, 2205}], 
         Line[{2068, 2914, 3450, 2084, 2920, 3468, 3470, 2102, 3497, 2929, 
          3495, 2120, 3518, 2938, 3523, 2136, 2947, 3544, 3546, 2152, 3575, 
          2958, 3570, 2168, 3597, 2968, 3602, 2188, 3619, 2196, 2207}], 
         Line[{2070, 2077, 3454, 2086, 2095, 3476, 3477, 2105, 3472, 2932, 
          3503, 2123, 3499, 2941, 3528, 2138, 3525, 2951, 3553, 2154, 3548, 
          2961, 3581, 2171, 3606, 2970, 3578, 2192, 3604, 2977, 2209}], 
         Line[{2072, 2082, 3457, 2089, 3483, 2925, 3482, 2108, 3509, 2935, 
          3508, 2125, 3532, 2944, 3534, 2141, 3559, 2953, 3558, 2157, 3585, 
          2964, 3587, 2174, 3609, 2971, 3611, 2194, 3624, 2979, 2212}], 
         Line[{2074, 2087, 3462, 2091, 2106, 3489, 3491, 2110, 816, 3515, 
          2127, 3540, 2946, 3539, 2143, 2155, 3565, 3567, 2159, 3595, 2967, 
          3594, 2177, 3615, 2973, 3617, 2198, 3626, 2980, 2214}], 
         Line[{2076, 3445, 2922, 2094, 2111, 3463, 3465, 2113, 3492, 2939, 
          3521, 2130, 858, 3516, 2145, 3541, 2959, 3573, 2162, 926, 3574, 
          2179, 3601, 2975, 3622, 2201, 3628, 2982, 2216}], 
         Line[{2204, 2189, 3612, 2185, 2169, 3591, 3589, 2165, 3562, 3561, 
          2954, 2148, 847, 3536, 2133, 2121, 3513, 3511, 2116, 2103, 3487, 
          3485, 2098, 749, 3460, 2080, 2062, 3447, 2064}], 
         Line[{2206, 2195, 3618, 2187, 2175, 3598, 3596, 2167, 3569, 3568, 
          2957, 2151, 3545, 2948, 3542, 2135, 3522, 2937, 3517, 2119, 3494, 
          3493, 2928, 2101, 3469, 2921, 3466, 2083, 2066, 3449, 2067}], 
         Line[{2208, 2976, 3603, 2191, 3577, 3576, 2181, 2170, 2962, 3549, 
          3547, 2153, 3552, 2950, 3524, 2137, 2942, 3500, 3498, 2122, 2933, 
          3473, 3471, 2104, 767, 3451, 2085, 2916, 3446, 2069}], 
         Line[{2211, 2978, 3623, 2193, 2972, 3610, 3608, 2173, 2965, 3586, 
          3584, 2156, 3557, 3556, 2150, 2140, 2945, 3533, 3531, 2124, 3507, 
          3506, 2118, 2107, 3481, 3480, 2100, 2088, 2917, 3456, 2071}], 
         Line[{2213, 3625, 2210, 2197, 2974, 3616, 3614, 2176, 3593, 3592, 
          2172, 2158, 3566, 2956, 3564, 2142, 3538, 3537, 2139, 2126, 817, 
          3514, 2109, 3490, 2927, 3488, 2090, 2919, 3461, 2073}], 
         Line[{2215, 2981, 3627, 2200, 3621, 3620, 2199, 2178, 2969, 3600, 
          3599, 2161, 3572, 3571, 2160, 2144, 859, 3543, 2129, 3520, 3519, 
          2128, 2112, 3464, 2930, 3496, 2093, 3467, 2092, 2075}], 
         Line[{164, 963, 173, 976, 977, 182, 1002, 1003, 191, 1036, 1037, 200,
           1070, 1071, 209, 1104, 1105, 218, 1138, 1139, 227, 1170, 236}], 
         Line[{2217, 961, 2234, 3636, 2985, 3637, 2252, 3659, 2993, 3658, 
          2270, 3685, 3001, 3686, 2287, 3711, 3010, 3710, 2302, 3734, 3019, 
          3735, 2319, 3764, 3030, 3763, 2338, 3789, 2336, 2358}], 
         Line[{2219, 962, 2235, 980, 3639, 2253, 3662, 2994, 3663, 2271, 3689,
           3004, 3688, 2288, 3713, 3013, 3714, 2303, 3739, 3022, 3738, 2320, 
          3766, 3033, 3767, 2339, 3791, 2340, 2359}], 
         Line[{2221, 2983, 3632, 2237, 2988, 3642, 3643, 2255, 3670, 2996, 
          3668, 2273, 3696, 3006, 3694, 2290, 1084, 3719, 2305, 3744, 3025, 
          3747, 2322, 3774, 3036, 3772, 2342, 3797, 2346, 2361}], 
         Line[{2224, 2984, 3634, 2240, 2990, 3652, 3654, 2258, 3681, 2999, 
          3679, 2276, 3702, 3008, 3707, 2292, 3017, 3728, 3730, 2308, 3759, 
          3028, 3754, 2324, 3781, 3038, 3786, 2344, 3803, 2352, 2363}], 
         Line[{2226, 2233, 3638, 2242, 2251, 3660, 3661, 2261, 3656, 3002, 
          3687, 2279, 3683, 3011, 3712, 2294, 3709, 3021, 3737, 2310, 3732, 
          3031, 3765, 2327, 3790, 3040, 3762, 2348, 3788, 3047, 2365}], 
         Line[{2228, 2238, 3641, 2245, 3667, 2995, 3666, 2264, 3693, 3005, 
          3692, 2281, 3716, 3014, 3718, 2297, 3743, 3023, 3742, 2313, 3769, 
          3034, 3771, 2330, 3793, 3041, 3795, 2350, 3808, 3049, 2368}], 
         Line[{2230, 2243, 3646, 2247, 2262, 3673, 3675, 2266, 1054, 3699, 
          2283, 3724, 3016, 3723, 2299, 2311, 3749, 3751, 2315, 3779, 3037, 
          3778, 2333, 3799, 3043, 3801, 2354, 3810, 3050, 2370}], 
         Line[{2232, 3629, 2992, 2250, 2267, 3647, 3649, 2269, 3676, 3009, 
          3705, 2286, 1096, 3700, 2301, 3725, 3029, 3757, 2318, 1164, 3758, 
          2335, 3785, 3045, 3806, 2357, 3812, 3052, 2372}], 
         Line[{2360, 2345, 3796, 2341, 2325, 3775, 3773, 2321, 3746, 3745, 
          3024, 2304, 1085, 3720, 2289, 2277, 3697, 3695, 2272, 2259, 3671, 
          3669, 2254, 987, 3644, 2236, 2218, 3631, 2220}], 
         Line[{2362, 2351, 3802, 2343, 2331, 3782, 3780, 2323, 3753, 3752, 
          3027, 2307, 3729, 3018, 3726, 2291, 3706, 3007, 3701, 2275, 3678, 
          3677, 2998, 2257, 3653, 2991, 3650, 2239, 2222, 3633, 2223}], 
         Line[{2364, 3046, 3787, 2347, 3761, 3760, 2337, 2326, 3032, 3733, 
          3731, 2309, 3736, 3020, 3708, 2293, 3012, 3684, 3682, 2278, 3003, 
          3657, 3655, 2260, 1005, 3635, 2241, 2986, 3630, 2225}], 
         Line[{2367, 3048, 3807, 2349, 3042, 3794, 3792, 2329, 3035, 3770, 
          3768, 2312, 3741, 3740, 2306, 2296, 3015, 3717, 3715, 2280, 3691, 
          3690, 2274, 2263, 3665, 3664, 2256, 2244, 2987, 3640, 2227}], 
         Line[{2369, 3809, 2366, 2353, 3044, 3800, 3798, 2332, 3777, 3776, 
          2328, 2314, 3750, 3026, 3748, 2298, 3722, 3721, 2295, 2282, 1055, 
          3698, 2265, 3674, 2997, 3672, 2246, 2989, 3645, 2229}], 
         Line[{2371, 3051, 3811, 2356, 3805, 3804, 2355, 2334, 3039, 3784, 
          3783, 2317, 3756, 3755, 2316, 2300, 1097, 3727, 2285, 3704, 3703, 
          2284, 2268, 3648, 3000, 3680, 2249, 3651, 2248, 2231}], 
         Line[{245, 1201, 254, 1214, 1215, 263, 1240, 1241, 272, 1274, 1275, 
          281, 1308, 1309, 290, 1342, 1343, 299, 1376, 1377, 308, 1408, 317}], 
         Line[{2373, 1199, 2390, 3820, 3055, 3821, 2408, 3843, 3063, 3842, 
          2426, 3869, 3071, 3870, 2443, 3895, 3080, 3894, 2458, 3918, 3089, 
          3919, 2475, 3948, 3100, 3947, 2494, 3973, 2492, 2514}], 
         Line[{2375, 1200, 2391, 1218, 3823, 2409, 3846, 3064, 3847, 2427, 
          3873, 3074, 3872, 2444, 3897, 3083, 3898, 2459, 3923, 3092, 3922, 
          2476, 3950, 3103, 3951, 2495, 3975, 2496, 2515}], 
         Line[{2377, 3053, 3816, 2393, 3058, 3826, 3827, 2411, 3854, 3066, 
          3852, 2429, 3880, 3076, 3878, 2446, 1322, 3903, 2461, 3928, 3095, 
          3931, 2478, 3958, 3106, 3956, 2498, 3981, 2502, 2517}], 
         Line[{2380, 3054, 3818, 2396, 3060, 3836, 3838, 2414, 3865, 3069, 
          3863, 2432, 3886, 3078, 3891, 2448, 3087, 3912, 3914, 2464, 3943, 
          3098, 3938, 2480, 3965, 3108, 3970, 2500, 3987, 2508, 2519}], 
         Line[{2382, 2389, 3822, 2398, 2407, 3844, 3845, 2417, 3840, 3072, 
          3871, 2435, 3867, 3081, 3896, 2450, 3893, 3091, 3921, 2466, 3916, 
          3101, 3949, 2483, 3974, 3110, 3946, 2504, 3972, 3117, 2521}], 
         Line[{2384, 2394, 3825, 2401, 3851, 3065, 3850, 2420, 3877, 3075, 
          3876, 2437, 3900, 3084, 3902, 2453, 3927, 3093, 3926, 2469, 3953, 
          3104, 3955, 2486, 3977, 3111, 3979, 2506, 3992, 3119, 2524}], 
         Line[{2386, 2399, 3830, 2403, 2418, 3857, 3859, 2422, 1292, 3883, 
          2439, 3908, 3086, 3907, 2455, 2467, 3933, 3935, 2471, 3963, 3107, 
          3962, 2489, 3983, 3113, 3985, 2510, 3994, 3120, 2526}], 
         Line[{2388, 3813, 3062, 2406, 2423, 3831, 3833, 2425, 3860, 3079, 
          3889, 2442, 1334, 3884, 2457, 3909, 3099, 3941, 2474, 1402, 3942, 
          2491, 3969, 3115, 3990, 2513, 3996, 3122, 2528}], 
         Line[{2516, 2501, 3980, 2497, 2481, 3959, 3957, 2477, 3930, 3929, 
          3094, 2460, 1323, 3904, 2445, 2433, 3881, 3879, 2428, 2415, 3855, 
          3853, 2410, 1225, 3828, 2392, 2374, 3815, 2376}], 
         Line[{2518, 2507, 3986, 2499, 2487, 3966, 3964, 2479, 3937, 3936, 
          3097, 2463, 3913, 3088, 3910, 2447, 3890, 3077, 3885, 2431, 3862, 
          3861, 3068, 2413, 3837, 3061, 3834, 2395, 2378, 3817, 2379}], 
         Line[{2520, 3116, 3971, 2503, 3945, 3944, 2493, 2482, 3102, 3917, 
          3915, 2465, 3920, 3090, 3892, 2449, 3082, 3868, 3866, 2434, 3073, 
          3841, 3839, 2416, 1243, 3819, 2397, 3056, 3814, 2381}], 
         Line[{2523, 3118, 3991, 2505, 3112, 3978, 3976, 2485, 3105, 3954, 
          3952, 2468, 3925, 3924, 2462, 2452, 3085, 3901, 3899, 2436, 3875, 
          3874, 2430, 2419, 3849, 3848, 2412, 2400, 3057, 3824, 2383}], 
         Line[{2525, 3993, 2522, 2509, 3114, 3984, 3982, 2488, 3961, 3960, 
          2484, 2470, 3934, 3096, 3932, 2454, 3906, 3905, 2451, 2438, 1293, 
          3882, 2421, 3858, 3067, 3856, 2402, 3059, 3829, 2385}], 
         Line[{2527, 3121, 3995, 2512, 3989, 3988, 2511, 2490, 3109, 3968, 
          3967, 2473, 3940, 3939, 2472, 2456, 1335, 3911, 2441, 3888, 3887, 
          2440, 2424, 3832, 3070, 3864, 2405, 3835, 2404, 2387}], 
         Line[{326, 1439, 335, 1452, 1453, 344, 1478, 1479, 353, 1512, 1513, 
          362, 1546, 1547, 370, 1576, 1577, 379, 1610, 1611, 388, 1642, 397}], 
         Line[{2529, 1437, 2546, 4004, 3125, 4005, 2564, 4027, 3133, 4026, 
          2582, 4051, 3141, 4052, 2599, 4079, 3152, 4078, 2615, 4077, 3158, 
          4100, 2632, 4132, 3169, 4131, 2651, 4157, 2649, 2671}], 
         Line[{2531, 1438, 2547, 1456, 4007, 2565, 4030, 3134, 4031, 2583, 
          4055, 3144, 4054, 2600, 4083, 3155, 4084, 2616, 4107, 3161, 4106, 
          2633, 4134, 3172, 4135, 2652, 4159, 2653, 2672}], 
         Line[{2533, 3123, 4000, 2549, 3128, 4010, 4011, 2567, 4038, 3136, 
          4036, 2585, 4062, 3146, 4060, 2602, 1560, 4089, 2618, 4112, 3164, 
          4115, 2635, 4142, 3175, 4140, 2655, 4165, 2659, 2674}], 
         Line[{2536, 3124, 4002, 2552, 3130, 4020, 4022, 2570, 4049, 3139, 
          4047, 2588, 4068, 3148, 4074, 2605, 4101, 3157, 4096, 2621, 4127, 
          3167, 4122, 2637, 4149, 3177, 4154, 2657, 4171, 2665, 2676}], 
         Line[{2538, 2545, 4006, 2554, 2563, 4028, 4029, 2573, 4024, 3142, 
          4053, 2591, 4050, 3150, 4076, 2607, 4103, 3160, 4105, 2623, 4098, 
          3170, 4133, 2640, 4158, 3179, 4130, 2661, 4156, 3186, 2678}], 
         Line[{2540, 2550, 4009, 2557, 4035, 3135, 4034, 2576, 4059, 3145, 
          4058, 2593, 4081, 3153, 4085, 2609, 4111, 3162, 4110, 2626, 4137, 
          3173, 4139, 2643, 4161, 3180, 4163, 2663, 4176, 3188, 2681}], 
         Line[{2542, 2555, 4014, 2559, 2574, 4041, 4043, 2578, 1530, 4065, 
          2595, 4091, 3156, 4088, 2611, 2624, 4117, 4119, 2628, 4147, 3176, 
          4146, 2646, 4167, 3182, 4169, 2667, 4178, 3189, 2683}], 
         Line[{2544, 3997, 3132, 2562, 2579, 4015, 4017, 2581, 4044, 3151, 
          4071, 2598, 1566, 4066, 2614, 4093, 3168, 4125, 2631, 1636, 4126, 
          2648, 4153, 3184, 4174, 2670, 4180, 3191, 2685}], 
         Line[{2673, 2658, 4164, 2654, 2638, 4143, 4141, 2634, 4114, 4113, 
          3163, 2617, 1561, 4090, 2601, 2589, 4063, 4061, 2584, 2571, 4039, 
          4037, 2566, 1463, 4012, 2548, 2530, 3999, 2532}], 
         Line[{2675, 2664, 4170, 2656, 2644, 4150, 4148, 2636, 4121, 4120, 
          3166, 2620, 4095, 4094, 2612, 2604, 4073, 3147, 4067, 2587, 4046, 
          4045, 3138, 2569, 4021, 3131, 4018, 2551, 2534, 4001, 2535}], 
         Line[{2677, 3185, 4155, 2660, 4129, 4128, 2650, 2639, 3171, 4099, 
          4097, 2622, 4104, 3159, 4102, 2606, 4075, 4072, 3149, 2590, 3143, 
          4025, 4023, 2572, 1481, 4003, 2553, 3126, 3998, 2537}], 
         Line[{2680, 3187, 4175, 2662, 3181, 4162, 4160, 2642, 3174, 4138, 
          4136, 2625, 4109, 4108, 2619, 2608, 3154, 4082, 4080, 2592, 4057, 
          4056, 2586, 2575, 4033, 4032, 2568, 2556, 3127, 4008, 2539}], 
         Line[{2682, 4177, 2679, 2666, 3183, 4168, 4166, 2645, 4145, 4144, 
          2641, 2627, 4118, 3165, 4116, 2610, 4087, 4086, 2603, 2594, 1531, 
          4064, 2577, 4042, 3137, 4040, 2558, 3129, 4013, 2541}], 
         Line[{2684, 3190, 4179, 2669, 4173, 4172, 2668, 2647, 3178, 4152, 
          4151, 2630, 4124, 4123, 2629, 2613, 1567, 4092, 2597, 4070, 4069, 
          2596, 2580, 4016, 3140, 4048, 2561, 4019, 2560, 2543}], 
         Line[{406, 1673, 415, 1686, 1687, 424, 1712, 1713, 433, 1746, 1747, 
          442, 1780, 1781, 450, 1810, 1811, 459, 1844, 1845, 468, 1876, 477}], 
         Line[{2686, 1671, 2703, 4188, 3194, 4189, 2721, 4211, 3202, 4210, 
          2739, 4235, 3210, 4236, 2756, 4263, 3221, 4262, 2772, 4261, 3227, 
          4284, 2789, 4316, 3238, 4315, 2808, 4341, 2806, 2828}], 
         Line[{2688, 1672, 2704, 1690, 4191, 2722, 4214, 3203, 4215, 2740, 
          4239, 3213, 4238, 2757, 4267, 3224, 4268, 2773, 4291, 3230, 4290, 
          2790, 4318, 3241, 4319, 2809, 4343, 2810, 2829}], 
         Line[{2690, 3192, 4184, 2706, 3197, 4194, 4195, 2724, 4222, 3205, 
          4220, 2742, 4246, 3215, 4244, 2759, 1794, 4273, 2775, 4296, 3233, 
          4299, 2792, 4326, 3244, 4324, 2812, 4349, 2816, 2831}], 
         Line[{2693, 3193, 4186, 2709, 3199, 4204, 4206, 2727, 4233, 3208, 
          4231, 2745, 4252, 3217, 4258, 2762, 4285, 3226, 4280, 2778, 4311, 
          3236, 4306, 2794, 4333, 3246, 4338, 2814, 4355, 2822, 2833}], 
         Line[{2695, 2702, 4190, 2711, 2720, 4212, 4213, 2730, 4208, 3211, 
          4237, 2748, 4234, 3219, 4260, 2764, 4287, 3229, 4289, 2780, 4282, 
          3239, 4317, 2797, 4342, 3248, 4314, 2818, 4340, 3255, 2835}], 
         Line[{2697, 2707, 4193, 2714, 4219, 3204, 4218, 2733, 4243, 3214, 
          4242, 2750, 4265, 3222, 4269, 2766, 4295, 3231, 4294, 2783, 4321, 
          3242, 4323, 2800, 4345, 3249, 4347, 2820, 4360, 3257, 2838}], 
         Line[{2699, 2712, 4198, 2716, 2731, 4225, 4227, 2735, 1764, 4249, 
          2752, 4275, 3225, 4272, 2768, 2781, 4301, 4303, 2785, 4331, 3245, 
          4330, 2803, 4351, 3251, 4353, 2824, 4362, 3258, 2840}], 
         Line[{2701, 4181, 3201, 2719, 2736, 4199, 4201, 2738, 4228, 3220, 
          4255, 2755, 1800, 4250, 2771, 4277, 3237, 4309, 2788, 1870, 4310, 
          2805, 4337, 3253, 4358, 2827, 4364, 3260, 2842}], 
         Line[{2830, 2815, 4348, 2811, 2795, 4327, 4325, 2791, 4298, 4297, 
          3232, 2774, 1795, 4274, 2758, 2746, 4247, 4245, 2741, 2728, 4223, 
          4221, 2723, 1697, 4196, 2705, 2687, 4183, 2689}], 
         Line[{2832, 2821, 4354, 2813, 2801, 4334, 4332, 2793, 4305, 4304, 
          3235, 2777, 4279, 4278, 2769, 2761, 4257, 3216, 4251, 2744, 4230, 
          4229, 3207, 2726, 4205, 3200, 4202, 2708, 2691, 4185, 2692}], 
         Line[{2834, 3254, 4339, 2817, 4313, 4312, 2807, 2796, 3240, 4283, 
          4281, 2779, 4288, 3228, 4286, 2763, 4259, 4256, 3218, 2747, 3212, 
          4209, 4207, 2729, 1715, 4187, 2710, 3195, 4182, 2694}], 
         Line[{2837, 3256, 4359, 2819, 3250, 4346, 4344, 2799, 3243, 4322, 
          4320, 2782, 4293, 4292, 2776, 2765, 3223, 4266, 4264, 2749, 4241, 
          4240, 2743, 2732, 4217, 4216, 2725, 2713, 3196, 4192, 2696}], 
         Line[{2839, 4361, 2836, 2823, 3252, 4352, 4350, 2802, 4329, 4328, 
          2798, 2784, 4302, 3234, 4300, 2767, 4271, 4270, 2760, 2751, 1765, 
          4248, 2734, 4226, 3206, 4224, 2715, 3198, 4197, 2698}], 
         Line[{2841, 3259, 4363, 2826, 4357, 4356, 2825, 2804, 3247, 4336, 
          4335, 2787, 4308, 4307, 2786, 2770, 1801, 4276, 2754, 4254, 4253, 
          2753, 2737, 4200, 3209, 4232, 2718, 4203, 2717, 2700}]}, {
         Line[{489, 3390, 689, 3416, 683, 681, 3410, 3409, 675, 3403, 673, 
          3402, 667, 3397, 665, 3365, 653, 651, 3386, 3385, 645, 643, 3379, 
          3378, 637, 3370, 635, 629, 625, 3367, 661}], 
         Line[{496, 655, 3389, 3388, 649, 3383, 3382, 647, 641, 639, 3374, 
          3373, 633, 3369, 3368, 631, 619, 3362, 3361, 617, 611, 3351, 609, 
          603, 601, 3346, 595, 3342, 591, 627}], 
         Line[{499, 485, 487, 486, 490, 3263, 491, 3264, 492, 3265, 493, 3266,
           494, 3262, 502, 3270, 503, 3272, 508, 3273, 509, 3277, 514, 3278, 
          515, 3283, 520, 3261, 521}], 
         Line[{18, 1938, 1937, 17, 1935, 1934, 16, 1933, 1932, 15, 1930, 1929,
           14, 1928, 1927, 13, 1925, 1924, 12, 1923, 11, 1922, 10}], 
         Line[{524, 497, 3268, 500, 504, 506, 3276, 510, 3274, 512, 3282, 516,
           3284, 518, 3267, 528, 3292, 530, 3296, 536, 3299, 538, 3304, 544, 
          3305, 546, 3312, 552, 3279, 554}], 
         Line[{555, 3281, 3280, 553, 547, 3307, 3306, 545, 539, 537, 3298, 
          3297, 531, 3293, 529, 519, 3286, 3285, 517, 513, 3275, 511, 507, 
          3271, 505, 501, 498, 3269, 525}], 
         Line[{558, 3291, 522, 526, 532, 3294, 534, 3301, 3302, 540, 542, 
          3309, 548, 3313, 550, 3287, 3288, 562, 564, 3322, 570, 3325, 572, 
          3330, 578, 580, 3335, 586, 3308, 588}], 
         Line[{589, 587, 3337, 3336, 581, 3331, 579, 573, 571, 3324, 3323, 
          565, 3319, 563, 3289, 551, 549, 3311, 3310, 543, 3300, 541, 3303, 
          535, 533, 3295, 527, 3290, 523, 559}], 
         Line[{592, 556, 3317, 560, 3321, 566, 568, 3327, 3328, 574, 576, 
          3333, 3334, 582, 584, 3314, 3315, 596, 598, 3347, 3348, 604, 606, 
          3353, 612, 3356, 614, 3359, 620, 622}], 
         Line[{623, 3332, 621, 615, 613, 3355, 3354, 607, 3350, 605, 3349, 
          599, 3344, 597, 3316, 585, 3339, 3338, 583, 577, 3326, 575, 3329, 
          569, 3320, 567, 561, 557, 3318, 593}], 
         Line[{626, 3343, 590, 594, 600, 3345, 602, 3352, 608, 610, 3358, 616,
           3360, 618, 3340, 3341, 630, 632, 3372, 638, 3375, 640, 3380, 646, 
          3381, 648, 3387, 654, 3357, 495}], 
         Line[{657, 714, 3438, 3437, 710, 3433, 708, 3432, 704, 3427, 702, 
          3426, 698, 696, 3394, 3393, 687, 3418, 685, 3414, 679, 3404, 677, 
          3407, 671, 669, 3399, 663, 3395, 659, 693}], 
         Line[{660, 624, 3366, 628, 3371, 634, 636, 3377, 642, 3376, 644, 
          3384, 650, 3391, 652, 3363, 3364, 664, 666, 3400, 3401, 672, 674, 
          3408, 680, 3411, 682, 3415, 688, 488}], 
         Line[{690, 722, 3444, 3443, 721, 3442, 720, 3441, 719, 718, 3440, 
          3439, 717, 716, 3420, 3419, 712, 711, 3435, 3434, 706, 705, 3429, 
          3428, 700, 699, 3423, 694, 3421, 691, 715}], 
         Line[{692, 3396, 658, 662, 668, 3398, 670, 3405, 3406, 676, 678, 
          3412, 3413, 684, 686, 3392, 695, 3422, 697, 3424, 3425, 701, 703, 
          3430, 3431, 707, 709, 3436, 713, 3417, 656}], 
         Line[{727, 3574, 927, 3600, 921, 919, 3594, 3593, 913, 3587, 911, 
          3586, 905, 3581, 903, 3549, 891, 889, 3570, 3569, 883, 881, 3563, 
          3562, 875, 3554, 873, 867, 863, 3551, 899}], 
         Line[{734, 893, 3573, 3572, 887, 3567, 3566, 885, 879, 877, 3558, 
          3557, 871, 3553, 3552, 869, 857, 3546, 3545, 855, 849, 3535, 847, 
          841, 839, 3530, 833, 3526, 829, 865}], 
         Line[{737, 723, 725, 724, 728, 3447, 729, 3448, 730, 3449, 731, 3450,
           732, 3446, 740, 3454, 741, 3456, 746, 3457, 747, 3461, 752, 3462, 
          753, 3467, 758, 3445, 759}], 
         Line[{99, 2094, 2093, 98, 2091, 2090, 97, 2089, 2088, 96, 2086, 2085,
           95, 2084, 2083, 94, 2081, 2080, 93, 2079, 92, 2078, 91}], 
         Line[{762, 735, 3452, 738, 742, 744, 3460, 748, 3458, 750, 3466, 754,
           3468, 756, 3451, 766, 3476, 768, 3480, 774, 3483, 776, 3488, 782, 
          3489, 784, 3496, 790, 3463, 792}], 
         Line[{793, 3465, 3464, 791, 785, 3491, 3490, 783, 777, 775, 3482, 
          3481, 769, 3477, 767, 757, 3470, 3469, 755, 751, 3459, 749, 745, 
          3455, 743, 739, 736, 3453, 763}], 
         Line[{796, 3475, 760, 764, 770, 3478, 772, 3485, 3486, 778, 780, 
          3493, 786, 3497, 788, 3471, 3472, 800, 802, 3506, 808, 3509, 810, 
          3514, 816, 818, 3519, 824, 3492, 826}], 
         Line[{827, 825, 3521, 3520, 819, 3515, 817, 811, 809, 3508, 3507, 
          803, 3503, 801, 3473, 789, 787, 3495, 3494, 781, 3484, 779, 3487, 
          773, 771, 3479, 765, 3474, 761, 797}], 
         Line[{830, 794, 3501, 798, 3505, 804, 806, 3511, 3512, 812, 814, 
          3517, 3518, 820, 822, 3498, 3499, 834, 836, 3531, 3532, 842, 844, 
          3537, 850, 3540, 852, 3543, 858, 860}], 
         Line[{861, 3516, 859, 853, 851, 3539, 3538, 845, 3534, 843, 3533, 
          837, 3528, 835, 3500, 823, 3523, 3522, 821, 815, 3510, 813, 3513, 
          807, 3504, 805, 799, 795, 3502, 831}], 
         Line[{864, 3527, 828, 832, 838, 3529, 840, 3536, 846, 848, 3542, 854,
           3544, 856, 3524, 3525, 868, 870, 3556, 876, 3559, 878, 3564, 884, 
          3565, 886, 3571, 892, 3541, 733}], 
         Line[{895, 952, 3622, 3621, 948, 3617, 946, 3616, 942, 3611, 940, 
          3610, 936, 934, 3578, 3577, 925, 3602, 923, 3598, 917, 3588, 915, 
          3591, 909, 907, 3583, 901, 3579, 897, 931}], 
         Line[{898, 862, 3550, 866, 3555, 872, 874, 3561, 880, 3560, 882, 
          3568, 888, 3575, 890, 3547, 3548, 902, 904, 3584, 3585, 910, 912, 
          3592, 918, 3595, 920, 3599, 926, 726}], 
         Line[{928, 960, 3628, 3627, 959, 3626, 958, 3625, 957, 956, 3624, 
          3623, 955, 954, 3604, 3603, 950, 949, 3619, 3618, 944, 943, 3613, 
          3612, 938, 937, 3607, 932, 3605, 929, 953}], 
         Line[{930, 3580, 896, 900, 906, 3582, 908, 3589, 3590, 914, 916, 
          3596, 3597, 922, 924, 3576, 933, 3606, 935, 3608, 3609, 939, 941, 
          3614, 3615, 945, 947, 3620, 951, 3601, 894}], 
         Line[{965, 3758, 1165, 3784, 1159, 1157, 3778, 3777, 1151, 3771, 
          1149, 3770, 1143, 3765, 1141, 3733, 1129, 1127, 3754, 3753, 1121, 
          1119, 3747, 3746, 1113, 3738, 1111, 1105, 1101, 3735, 1137}], 
         Line[{972, 1131, 3757, 3756, 1125, 3751, 3750, 1123, 1117, 1115, 
          3742, 3741, 1109, 3737, 3736, 1107, 1095, 3730, 3729, 1093, 1087, 
          3719, 1085, 1079, 1077, 3714, 1071, 3710, 1067, 1103}], 
         Line[{975, 961, 963, 962, 966, 3631, 967, 3632, 968, 3633, 969, 3634,
           970, 3630, 978, 3638, 979, 3640, 984, 3641, 985, 3645, 990, 3646, 
          991, 3651, 996, 3629, 997}], 
         Line[{180, 2250, 2249, 179, 2247, 2246, 178, 2245, 2244, 177, 2242, 
          2241, 176, 2240, 2239, 175, 2237, 2236, 174, 2235, 173, 2234, 172}], 
         Line[{1000, 973, 3636, 976, 980, 982, 3644, 986, 3642, 988, 3650, 
          992, 3652, 994, 3635, 1004, 3660, 1006, 3664, 1012, 3667, 1014, 
          3672, 1020, 3673, 1022, 3680, 1028, 3647, 1030}], 
         Line[{1031, 3649, 3648, 1029, 1023, 3675, 3674, 1021, 1015, 1013, 
          3666, 3665, 1007, 3661, 1005, 995, 3654, 3653, 993, 989, 3643, 987, 
          983, 3639, 981, 977, 974, 3637, 1001}], 
         Line[{1034, 3659, 998, 1002, 1008, 3662, 1010, 3669, 3670, 1016, 
          1018, 3677, 1024, 3681, 1026, 3655, 3656, 1038, 1040, 3690, 1046, 
          3693, 1048, 3698, 1054, 1056, 3703, 1062, 3676, 1064}], 
         Line[{1065, 1063, 3705, 3704, 1057, 3699, 1055, 1049, 1047, 3692, 
          3691, 1041, 3687, 1039, 3657, 1027, 1025, 3679, 3678, 1019, 3668, 
          1017, 3671, 1011, 1009, 3663, 1003, 3658, 999, 1035}], 
         Line[{1068, 1032, 3685, 1036, 3689, 1042, 1044, 3695, 3696, 1050, 
          1052, 3701, 3702, 1058, 1060, 3682, 3683, 1072, 1074, 3715, 3716, 
          1080, 1082, 3721, 1088, 3724, 1090, 3727, 1096, 1098}], 
         Line[{1099, 3700, 1097, 1091, 1089, 3723, 3722, 1083, 3718, 1081, 
          3717, 1075, 3712, 1073, 3684, 1061, 3707, 3706, 1059, 1053, 3694, 
          1051, 3697, 1045, 3688, 1043, 1037, 1033, 3686, 1069}], 
         Line[{1102, 3711, 1066, 1070, 1076, 3713, 1078, 3720, 1084, 1086, 
          3726, 1092, 3728, 1094, 3708, 3709, 1106, 1108, 3740, 1114, 3743, 
          1116, 3748, 1122, 3749, 1124, 3755, 1130, 3725, 971}], 
         Line[{1133, 1190, 3806, 3805, 1186, 3801, 1184, 3800, 1180, 3795, 
          1178, 3794, 1174, 1172, 3762, 3761, 1163, 3786, 1161, 3782, 1155, 
          3772, 1153, 3775, 1147, 1145, 3767, 1139, 3763, 1135, 1169}], 
         Line[{1136, 1100, 3734, 1104, 3739, 1110, 1112, 3745, 1118, 3744, 
          1120, 3752, 1126, 3759, 1128, 3731, 3732, 1140, 1142, 3768, 3769, 
          1148, 1150, 3776, 1156, 3779, 1158, 3783, 1164, 964}], 
         Line[{1166, 1198, 3812, 3811, 1197, 3810, 1196, 3809, 1195, 1194, 
          3808, 3807, 1193, 1192, 3788, 3787, 1188, 1187, 3803, 3802, 1182, 
          1181, 3797, 3796, 1176, 1175, 3791, 1170, 3789, 1167, 1191}], 
         Line[{1168, 3764, 1134, 1138, 1144, 3766, 1146, 3773, 3774, 1152, 
          1154, 3780, 3781, 1160, 1162, 3760, 1171, 3790, 1173, 3792, 3793, 
          1177, 1179, 3798, 3799, 1183, 1185, 3804, 1189, 3785, 1132}], 
         Line[{1203, 3942, 1403, 3968, 1397, 1395, 3962, 3961, 1389, 3955, 
          1387, 3954, 1381, 3949, 1379, 3917, 1367, 1365, 3938, 3937, 1359, 
          1357, 3931, 3930, 1351, 3922, 1349, 1343, 1339, 3919, 1375}], 
         Line[{1210, 1369, 3941, 3940, 1363, 3935, 3934, 1361, 1355, 1353, 
          3926, 3925, 1347, 3921, 3920, 1345, 1333, 3914, 3913, 1331, 1325, 
          3903, 1323, 1317, 1315, 3898, 1309, 3894, 1305, 1341}], 
         Line[{1213, 1199, 1201, 1200, 1204, 3815, 1205, 3816, 1206, 3817, 
          1207, 3818, 1208, 3814, 1216, 3822, 1217, 3824, 1222, 3825, 1223, 
          3829, 1228, 3830, 1229, 3835, 1234, 3813, 1235}], 
         Line[{261, 2406, 2405, 260, 2403, 2402, 259, 2401, 2400, 258, 2398, 
          2397, 257, 2396, 2395, 256, 2393, 2392, 255, 2391, 254, 2390, 253}], 
         Line[{1238, 1211, 3820, 1214, 1218, 1220, 3828, 1224, 3826, 1226, 
          3834, 1230, 3836, 1232, 3819, 1242, 3844, 1244, 3848, 1250, 3851, 
          1252, 3856, 1258, 3857, 1260, 3864, 1266, 3831, 1268}], 
         Line[{1269, 3833, 3832, 1267, 1261, 3859, 3858, 1259, 1253, 1251, 
          3850, 3849, 1245, 3845, 1243, 1233, 3838, 3837, 1231, 1227, 3827, 
          1225, 1221, 3823, 1219, 1215, 1212, 3821, 1239}], 
         Line[{1272, 3843, 1236, 1240, 1246, 3846, 1248, 3853, 3854, 1254, 
          1256, 3861, 1262, 3865, 1264, 3839, 3840, 1276, 1278, 3874, 1284, 
          3877, 1286, 3882, 1292, 1294, 3887, 1300, 3860, 1302}], 
         Line[{1303, 1301, 3889, 3888, 1295, 3883, 1293, 1287, 1285, 3876, 
          3875, 1279, 3871, 1277, 3841, 1265, 1263, 3863, 3862, 1257, 3852, 
          1255, 3855, 1249, 1247, 3847, 1241, 3842, 1237, 1273}], 
         Line[{1306, 1270, 3869, 1274, 3873, 1280, 1282, 3879, 3880, 1288, 
          1290, 3885, 3886, 1296, 1298, 3866, 3867, 1310, 1312, 3899, 3900, 
          1318, 1320, 3905, 1326, 3908, 1328, 3911, 1334, 1336}], 
         Line[{1337, 3884, 1335, 1329, 1327, 3907, 3906, 1321, 3902, 1319, 
          3901, 1313, 3896, 1311, 3868, 1299, 3891, 3890, 1297, 1291, 3878, 
          1289, 3881, 1283, 3872, 1281, 1275, 1271, 3870, 1307}], 
         Line[{1340, 3895, 1304, 1308, 1314, 3897, 1316, 3904, 1322, 1324, 
          3910, 1330, 3912, 1332, 3892, 3893, 1344, 1346, 3924, 1352, 3927, 
          1354, 3932, 1360, 3933, 1362, 3939, 1368, 3909, 1209}], 
         Line[{1371, 1428, 3990, 3989, 1424, 3985, 1422, 3984, 1418, 3979, 
          1416, 3978, 1412, 1410, 3946, 3945, 1401, 3970, 1399, 3966, 1393, 
          3956, 1391, 3959, 1385, 1383, 3951, 1377, 3947, 1373, 1407}], 
         Line[{1374, 1338, 3918, 1342, 3923, 1348, 1350, 3929, 1356, 3928, 
          1358, 3936, 1364, 3943, 1366, 3915, 3916, 1378, 1380, 3952, 3953, 
          1386, 1388, 3960, 1394, 3963, 1396, 3967, 1402, 1202}], 
         Line[{1404, 1436, 3996, 3995, 1435, 3994, 1434, 3993, 1433, 1432, 
          3992, 3991, 1431, 1430, 3972, 3971, 1426, 1425, 3987, 3986, 1420, 
          1419, 3981, 3980, 1414, 1413, 3975, 1408, 3973, 1405, 1429}], 
         Line[{1406, 3948, 1372, 1376, 1382, 3950, 1384, 3957, 3958, 1390, 
          1392, 3964, 3965, 1398, 1400, 3944, 1409, 3974, 1411, 3976, 3977, 
          1415, 1417, 3982, 3983, 1421, 1423, 3988, 1427, 3969, 1370}], 
         Line[{1441, 4126, 1637, 4152, 1631, 1629, 4146, 4145, 1623, 4139, 
          1621, 4138, 1615, 4133, 1613, 4099, 1601, 1599, 4122, 4121, 1593, 
          1591, 4115, 4114, 1585, 4106, 1583, 1577, 1573, 4100, 1609}], 
         Line[{1448, 1603, 4125, 4124, 1597, 4119, 4118, 1595, 1589, 1587, 
          4110, 4109, 1581, 4105, 4104, 1579, 1569, 4096, 4095, 1563, 4089, 
          1561, 1555, 1553, 4084, 1547, 4078, 1543, 1575}], 
         Line[{1451, 1437, 1439, 1438, 1442, 3999, 1443, 4000, 1444, 4001, 
          1445, 4002, 1446, 3998, 1454, 4006, 1455, 4008, 1460, 4009, 1461, 
          4013, 1466, 4014, 1467, 4019, 1472, 3997, 1473}], 
         Line[{342, 2562, 2561, 341, 2559, 2558, 340, 2557, 2556, 339, 2554, 
          2553, 338, 2552, 2551, 337, 2549, 2548, 336, 2547, 335, 2546, 334}], 
         Line[{1476, 1449, 4004, 1452, 1456, 1458, 4012, 1462, 4010, 1464, 
          4018, 1468, 4020, 1470, 4003, 1480, 4028, 1482, 4032, 1488, 4035, 
          1490, 4040, 1496, 4041, 1498, 4048, 1504, 4015, 1506}], 
         Line[{1507, 4017, 4016, 1505, 1499, 4043, 4042, 1497, 1491, 1489, 
          4034, 4033, 1483, 4029, 1481, 1471, 4022, 4021, 1469, 1465, 4011, 
          1463, 1459, 4007, 1457, 1453, 1450, 4005, 1477}], 
         Line[{1510, 4027, 1474, 1478, 1484, 4030, 1486, 4037, 4038, 1492, 
          1494, 4045, 1500, 4049, 1502, 4023, 4024, 1514, 1516, 4056, 1522, 
          4059, 1524, 4064, 1530, 1532, 4069, 1538, 4044, 1540}], 
         Line[{1541, 1539, 4071, 4070, 1533, 4065, 1531, 1525, 1523, 4058, 
          4057, 1517, 4053, 1515, 4025, 1503, 1501, 4047, 4046, 1495, 4036, 
          1493, 4039, 1487, 1485, 4031, 1479, 4026, 1475, 1511}], 
         Line[{1544, 1508, 4051, 1512, 4055, 1518, 1520, 4061, 4062, 1526, 
          1528, 4067, 4068, 1534, 4072, 1536, 4050, 1548, 4080, 4081, 1550, 
          1556, 4086, 1558, 4091, 1564, 4092, 1566, 1570}], 
         Line[{1571, 4066, 1567, 1565, 1559, 4088, 4087, 1557, 4085, 1551, 
          4082, 1549, 1537, 4076, 4075, 4074, 4073, 1535, 1529, 4060, 1527, 
          4063, 1521, 4054, 1519, 1513, 1509, 4052, 1545}], 
         Line[{1574, 4079, 1542, 1546, 1552, 4083, 1554, 4090, 1560, 1562, 
          4094, 1568, 4101, 4102, 4103, 1578, 1580, 4108, 1586, 4111, 1588, 
          4116, 1594, 4117, 1596, 4123, 1602, 4093, 1447}], 
         Line[{1605, 1662, 4174, 4173, 1658, 4169, 1656, 4168, 1652, 4163, 
          1650, 4162, 1646, 1644, 4130, 4129, 1635, 4154, 1633, 4150, 1627, 
          4140, 1625, 4143, 1619, 1617, 4135, 1611, 4131, 1607, 1641}], 
         Line[{1608, 1572, 4077, 1576, 4107, 1582, 1584, 4113, 1590, 4112, 
          1592, 4120, 1598, 4127, 1600, 4097, 4098, 1612, 1614, 4136, 4137, 
          1620, 1622, 4144, 1628, 4147, 1630, 4151, 1636, 1440}], 
         Line[{1638, 1670, 4180, 4179, 1669, 4178, 1668, 4177, 1667, 1666, 
          4176, 4175, 1665, 1664, 4156, 4155, 1660, 1659, 4171, 4170, 1654, 
          1653, 4165, 4164, 1648, 1647, 4159, 1642, 4157, 1639, 1663}], 
         Line[{1640, 4132, 1606, 1610, 1616, 4134, 1618, 4141, 4142, 1624, 
          1626, 4148, 4149, 1632, 1634, 4128, 1643, 4158, 1645, 4160, 4161, 
          1649, 1651, 4166, 4167, 1655, 1657, 4172, 1661, 4153, 1604}], 
         Line[{1675, 4310, 1871, 4336, 1865, 1863, 4330, 4329, 1857, 4323, 
          1855, 4322, 1849, 4317, 1847, 4283, 1835, 1833, 4306, 4305, 1827, 
          1825, 4299, 4298, 1819, 4290, 1817, 1811, 1807, 4284, 1843}], 
         Line[{1682, 1837, 4309, 4308, 1831, 4303, 4302, 1829, 1823, 1821, 
          4294, 4293, 1815, 4289, 4288, 1813, 1803, 4280, 4279, 1797, 4273, 
          1795, 1789, 1787, 4268, 1781, 4262, 1777, 1809}], 
         Line[{1685, 1671, 1673, 1672, 1676, 4183, 1677, 4184, 1678, 4185, 
          1679, 4186, 1680, 4182, 1688, 4190, 1689, 4192, 1694, 4193, 1695, 
          4197, 1700, 4198, 1701, 4203, 1706, 4181, 1707}], 
         Line[{422, 2719, 2718, 421, 2716, 2715, 420, 2714, 2713, 419, 2711, 
          2710, 418, 2709, 2708, 417, 2706, 2705, 416, 2704, 415, 2703, 414}], 
         Line[{1710, 1683, 4188, 1686, 1690, 1692, 4196, 1696, 4194, 1698, 
          4202, 1702, 4204, 1704, 4187, 1714, 4212, 1716, 4216, 1722, 4219, 
          1724, 4224, 1730, 4225, 1732, 4232, 1738, 4199, 1740}], 
         Line[{1741, 4201, 4200, 1739, 1733, 4227, 4226, 1731, 1725, 1723, 
          4218, 4217, 1717, 4213, 1715, 1705, 4206, 4205, 1703, 1699, 4195, 
          1697, 1693, 4191, 1691, 1687, 1684, 4189, 1711}], 
         Line[{1744, 4211, 1708, 1712, 1718, 4214, 1720, 4221, 4222, 1726, 
          1728, 4229, 1734, 4233, 1736, 4207, 4208, 1748, 1750, 4240, 1756, 
          4243, 1758, 4248, 1764, 1766, 4253, 1772, 4228, 1774}], 
         Line[{1775, 1773, 4255, 4254, 1767, 4249, 1765, 1759, 1757, 4242, 
          4241, 1751, 4237, 1749, 4209, 1737, 1735, 4231, 4230, 1729, 4220, 
          1727, 4223, 1721, 1719, 4215, 1713, 4210, 1709, 1745}], 
         Line[{1778, 1742, 4235, 1746, 4239, 1752, 1754, 4245, 4246, 1760, 
          1762, 4251, 4252, 1768, 4256, 1770, 4234, 1782, 4264, 4265, 1784, 
          1790, 4270, 1792, 4275, 1798, 4276, 1800, 1804}], 
         Line[{1805, 4250, 1801, 1799, 1793, 4272, 4271, 1791, 4269, 1785, 
          4266, 1783, 1771, 4260, 4259, 4258, 4257, 1769, 1763, 4244, 1761, 
          4247, 1755, 4238, 1753, 1747, 1743, 4236, 1779}], 
         Line[{1808, 4263, 1776, 1780, 1786, 4267, 1788, 4274, 1794, 1796, 
          4278, 1802, 4285, 4286, 4287, 1812, 1814, 4292, 1820, 4295, 1822, 
          4300, 1828, 4301, 1830, 4307, 1836, 4277, 1681}], 
         Line[{1839, 1896, 4358, 4357, 1892, 4353, 1890, 4352, 1886, 4347, 
          1884, 4346, 1880, 1878, 4314, 4313, 1869, 4338, 1867, 4334, 1861, 
          4324, 1859, 4327, 1853, 1851, 4319, 1845, 4315, 1841, 1875}], 
         Line[{1842, 1806, 4261, 1810, 4291, 1816, 1818, 4297, 1824, 4296, 
          1826, 4304, 1832, 4311, 1834, 4281, 4282, 1846, 1848, 4320, 4321, 
          1854, 1856, 4328, 1862, 4331, 1864, 4335, 1870, 1674}], 
         Line[{1872, 1904, 4364, 4363, 1903, 4362, 1902, 4361, 1901, 1900, 
          4360, 4359, 1899, 1898, 4340, 4339, 1894, 1893, 4355, 4354, 1888, 
          1887, 4349, 4348, 1882, 1881, 4343, 1876, 4341, 1873, 1897}], 
         Line[{1874, 4316, 1840, 1844, 1850, 4318, 1852, 4325, 4326, 1858, 
          1860, 4332, 4333, 1866, 1868, 4312, 1877, 4342, 1879, 4344, 4345, 
          1883, 1885, 4350, 4351, 1889, 1891, 4356, 1895, 4337, 
          1838}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
fwoid7OjV0sGQX1er0cdpaNr9k1Yu0TJAU8M13HziZhg5PfIjJH6/Cvx08Lw
c1KlIV1jeRyKTS4pWH4/BJ2rxScV5lD65dkboZb8cHz+2824RsUPB/20Nhxp
YkHVM+79bnteUzq0z2PnUmM8rzPUson67n4R/80M/0uvyp3QnfYaG6Jts2av
tEAHE1nDgV7qHCBzm9eTuc3sua8ueyZKjNfzwhNT18nJnHTAyJbPndojdeDJ
DXio0AG94jpMZQ5Z4syrSj6nR+YxavP7jbkQjM/E5TYsu+eO8gsyLs6n6rS7
xP9mhv+zP7grJiZ64cStCipS0jrouJ+rdZDaVwFkXrQEY150or1dy7Ooy3Dp
jbna9s0m4L7ZUPketS6hj9cY2X8xhy7Zg3LyD6h9GGPBuWJkrp3k1B4+T2f8
1iG2UrHdGNVbWlLmUs9DiH9xhv/TulxnL0c9xpiFveGiHNb4dPbriyPnvxuZ
Ux1N5lTPJnOqBWZfv7X4hinMKlfJWWttC1sX3+ZdQtkf2cDr/TbjBYzd7bv0
DMdz0E/8eatypA+ZLsVpIWWBexYN5PLvtULVAwEsTcrem8yjHsf69zzqj/mB
uc9ljFDgE87kazFCMbe4m7p//jN3F0+Qudzs7+uws5pfnscD3KgpOWy6xwLH
ck45MZWyf0fmWucw5lrfXJUm8GuxHZivqTsTFL8R3prWathS8fiQ981jvG/s
bYsga9fXkLKnWl7ZxByU+To1nan9s4rM6y4i87pryLzunM/yMTGXLWHCT98v
RyN1Iaw0sWcu9XNVyTzt303/nqf96t6lq20nrCDyhKXjRztFiF08+8iq/7If
Ytjf6Ku7UP/VCTzeLzOXmvkUnETc03qoPDeQOeE3GXPCz4sG8C6c5AOWY82s
r8fZwfddK5WKqPO2idjfYtiL3Jxn/WWMD6wcvyIy8bkz5LV7TigYqedJPNMY
88D95BZUW+6n/Gz9wX3tQzAclq99f6qWBVxkTrgMmRN+gswJ/9GosmWI/w0c
UFq/Jmu6JyiM87KrpM6NZhKPHiOeWUtzXo179Qpmly2quHbSGH4GTW0fR627
Lpl/bkPmn48n88/rjF3O2UhHgOHQfPnd2/zg8JcmtfONLFhB5pOfJPPJhcl8
8ma1V4t/zYqBsSY7FWx6vCH37YzPn6uofU7sTzDsJRvSRU0zfSDDrdH12cBN
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
r39bQ8EPp224JY7U/cJLOIYHGRzDi2f35ivam2LJVnnDrINhoOUwsPsDFf9s
wvsrJry/5YT3t5X2j3/ujfoHtv97ZP9LMvb/s9Iax9sLdfCGWebUl9WR4Ptr
e75oCwsmEf/lDP8KtxoutYmF4s6H3pev3XuD2w2nXFGh7EXJ+65mvK97zqRv
99r9seWD/yzX9z4Y5bS48jS1n+sIJ/ECg5OYZ1rLNfnbc7ylN2MjNITChsCp
gjyU/UISTxEjnpo1E8U/hbujxHiemV0OXvDYecLyt1T+Own3sIhwDyUI97Bt
f9EaC2t3HN4/VfYFTxCm6rkkSozcX4TPuInBZ3y8akHtVGkvFNtQ8+jAYCxu
k43/fKD8H3sJhv23TPthrjRXzNGw5OwK9YAN/ENzD1L3byjhLQ55/5u3qGYu
cuP2sUA8OyHcVjzRBvNvt2jP/cGCOGJvwuAzBsq3n1Rfb4dS3RtMdhu+ws5p
cy/+pt6Xm8QjyojnE32/Yw19vyP7fuci3MlYBneyJMzYeJq+L845pSz32M4R
P77VP5RH7Z9WwoUUZXAhn2iUOJW7BaF0aux7wfoXOLGw/kEflc8x/LT9ZoY9
P13PYCtdzyC7nplPdKgFQ4f20/U/OtD1P7Lr//WEt6jA4C1OD37u6xwwBtaI
Tuq0H/aHNZza4jep73ca4UvWMfiSvtmj9wuuou8XYN8vJoSzOZnB2XwkJNx5
6uF91HoTKVa4yxdmvVh5KJbyk044lVsZnEqTmSsvhiu8RjXpsjGZs60wVbXu
fAiVz69/4WwaTZE/feGsL2pbY5bmxucYIngtu41a3zBjmr/5hsHfnJ32QONI
mBFOLWkfKg/xhvl2Pq92U/u8gfAxrzH4mKfNO7XbpzuidM6xLXvvPwQrWVWu
gpG/R02n7WWI/Vtiv6M7ruGrnj1eaPTdmbfIEx8bVV1XoPyLkHiiGPGsmmak
+UDdCgedfn8IFvNEvnElf6ZS+7aYcEK5CCeUrX8Nn6ot0Fhsj6f0VfpvT9IC
NZVbW05SzyeSeLYz4lE3GLyZw2GFx+5s3Lyv+AI4RM9MGeF8bSfcz1cM7qdz
ttKVg34uqLgq65a4ki+aNPU3L6Lyr034pO8ZfFJRWj9iIq0fka0fLxL7LIZ9
CTffSh8ZdZz3rqkouVIVZxTMkf1B/dxzJB43RjwvvS9KHj13ASB9XBjq74aD
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
tQL3vT75o8R6E3i40uELQxDsmLc5McveA8r7/JnfE/PVifuRdSn9yPV4nNKU
cQ4Ye153PJYAttOrJE6IhILsl66bKp3EvoT7Ya2p/cjRYteDTrtBzsTiWkPe
ADg2YHnrBLEOOc29thxly4Y+jzop/dvhYG2j6NKTS4Nd/+jzLVO759VuHQ6/
NQLfLpKOhOSLin3rZ3wbrunrCrsnweIhI6URvxdom69rukg3DR7ay2V4zsuA
UedeQyaeTGgbjq3leEODj7gfdgz3w/bhfti1KXO/ak2lwFBtq/O1Z3HQZ97/
vPU9cT0/MFzxvDM8GHfiWZYXhlT4Tn3/QLyPDZmaBfmjAfB7G7dgBlcS5K1N
bfMj1k/02tHvhgvfgFGWbSGjijWw3O+oYyLivDToXGIzm6No/8G2g2ruD/93
Hq0ePOub0X0HLJUVL0uxxUKsXX5LG/Fem35u3bAlyRo9Xld58GhbBKqWNRea
8dmbwH2mQ5Q+U4eh2fsgW/I+iH6f4x/6djufDEerSuc6v1GxQuJv/wQp/yD2
T9yXeo7Slyod4Ml0ZMFr1P+WNeD5szeQlmM5NU583vsffak/dVPtroylolVd
78VviySix8LefCWFxHrwYIw72xOO7g3y8Ys/9wad3we65Ij10Ft8cONW9ng0
N/SCSPTpcLRfVLgUdf673/bTjcKIaxcT0IppPY2p5zZQnrGp8RAx7w9wf2UM
pb/yPn4uWcpzDSy4Yf7TKQkdN+o728vuhRy3RFb6dxD7PLk+UQK5PhF9faqn
2gnt3RyEVtCaHhjv00fhP8QOrJ6c8fewLalcnIKChRWWpq6MRMxn985ZVEfs
exfJvkg+Sl8kz6kLV8dt/NHr1+OdhW/uoWrG1c5RM/2JQmt3SVwORKcaOo8z
srqi4LDPYnUzHFXcH3qB0h9acy9atfp8JBKwZmoROeiE2m48PbyYOAdtp1z7
Ofe5oOVNpXdhnikq9H/E2ETsM2k7vJKNTzog0VE1bTGrl2hNnc+HLGLfKMH9
gL8p/YCtd3s6NoWaw+stzU4qWopoic8WxefE9yrs7FJeOx4OxWfWP2VV9gJt
Bdsic2Ie7+A+R1ZKn2PxK45z3qfewP3Scd+jG4xBRXv6q9D4f32L3fP+7r/b
SO7PcEJ2dn9G9P05Avf3FVL6+/TU/c4xH84FB4d7Qc++h8BFtXShvSk0MMR9
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
f+f/AfvpeUw=
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.10348164494983718`, 4.558130177621855}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstDefaultMass$$ = 
    20, $CellContext`glConstKDefaults$$ = {0.25, 0.25, 0.25, 0.25, 
    0.25}, $CellContext`glConstKMax$$ = 1, $CellContext`glConstKMin$$ = 
    0.05, $CellContext`glConstLocDefault$$ = {{0.1, 1.3}, {1.9, 
    0.8}}, $CellContext`glConstMinAngleBetweenLatticeVectors$$ = 
    Rational[1, 6] Pi, $CellContext`glConstMinSquaredDistanceFromOrigin$$ = 
    0.1, $CellContext`glConstMMax$$ = 
    30, $CellContext`glConstNeighboringCellIndexes$$ = {{1, 0}, {0, 1}, {1, 
    1}, {1, -1}}, $CellContext`glConstPrimaryDisplaySize$$ = {380, 
    380}, $CellContext`glConstSpringColors$$ = {
     RGBColor[
      Rational[2, 3], 0.33333333333333337`, 0], 
     RGBColor[0, 
      Rational[2, 3], 0], 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
     RGBColor[0, 
      Rational[2, 3], 
      Rational[2, 3]], 
     RGBColor[
      Rational[2, 3], 
      Rational[2, 3], 0]}, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
     RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`glConstTextDisplayOffsetHack$$ = {0.25, 
    0.25}, $CellContext`glConstWindowHalfWidth$$ = 3, $CellContext`k1$$ = 
    0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
    0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$520, $CellContext`qVec -> #]& , \
$CellContext`meshSize$$ = 8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 
    1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {0.25, 15, 20}, "numberOfMasses" -> 3, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.8200836820083681, 0.1673640167364017}, {0.6778242677824267, 
      0.6485355648535565}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
     "pointsDataTable" -> CompressedData["
1:eJxdnUtsXEd2htsSJdESLVMUJbGpF0mR1Fsi2Xy/urop77jKTtvJDCdZJYA3
2Q2XWXgRBHkMM0kwi8DIcgBuJsAA7EU2zigveKXVGDBAwICBsSHDI8WOHLnP
953JvQSE6+6+99TrVNVfdb5bnvzBn/zBjwYajcbJN/+23vx7+82/E2/+7fX/
bvUa3//1nvQWWt//3ewdfP/39ElcD670+l+/2In7GsO9Z9//fbDT+/f+fzR6
fTOzO72/79//0VHY62Lvm3bY6/Z+3b9/qIS9DvYul7DXiXRat3p/9/39zSeR
zrMb8f3hDr9fiXR3d3pL/c/vRvrH3d5bYTDs7nd7v+wn/C9HYa/b+7e+vW/b
Ya/T+9v+7++UsNcJO3uXS9gr5O9WpPv+Dr/fiHwN7ZC/y/H9h93ej/v/cb73
3fd/7W7vj/qfXx/1k3lueX/5q7DX6f0wfm+HPT+fj/Q/LNovYa9Q31Ncu73X
/R+uk6+u+SedLu33DtdO7z+i/EdRj53en0f9tMNewd537bBTevNRvyXsFeu/
LPavbexORblnu72f9j9fx5+yfaM9n3bI9xD+VHph55uj/vcflN5fhf+0w57l
b5R+u+63yd+7pd/uh9th9+BK6dfz8Rbln6L9O/jf9chns0N+L+FPBX8ZinR2
C/ZeRX6etXn+43aUw/K+Ff7b2ia94RLtvkV5x0rY2aS+psLuc8tzDX+yPi9F
vQwV/Pkc/t3unejbe3kU5d/u/WU4Urtfb4dbvR/10z0R6R9vYn+4/Kxf3k3y
N1b67b67Qf6mSLfw+7Ve//6DNs+P4ifb+PNZ6mkbf/76KNptq/c//fb4TbTX
3ib1dZLyb/D5QvSvZ+vYH4v2bKzjD5P093b0m++uUn7rdzTS39+i/t8Ovznc
JJ9fHUX5N/DXT9thbwN7J+nf6zx/AX9aox6a4c+Hq/w+Sb628OerlN/2HcVv
N7lvkHra4PsXMd4crNM+x/SvNco/QH9aI38X8KdV/K+JP61Q/kn82fq9iv9u
kN+Lkf7xOvkbpD7Xsfdl+PPuGvd/Fv68b3lPRfqHpjeCPy1jbzzas7lMfU1y
3aA845R/ne8vkq71e4Z6WsXeFzE/NFaZDz6P8bhl+qdj/Ntbxv5IiXwu8fs4
/rSIvUnKv0Z9j4c/N63vkfCT3VXyeRp/WiFfn4c/Hy7THr8Nfz5eMv+U388X
8adFnh/Hn1p8nqD8q9hr8n3WL/60wn2n8Jtl+uFn4c97S/jfl+HPB4vYO0P5
W7Y//alF/q4yPi/w+wT9aQV7Tcpv+47Qn5bI5wD1uUh9HTN/LuJ/L8Kfd1vU
72D48/6C/QN/mqd8V/GnOco/wX3L2GuS7yX7J+navgPYsXyfMj4vkP5XjM+W
923607zjB/1pDnvXqJ/H2JugPy06PlF+07tAf/LzSepzgXb8JPx53/S+Rl/M
4Y9nQ988e+z4Sv4eOf4yXj4gfxOUv8XzY/iF5R1m3JvnvhPkw/p+zvhseV+2
4/5H5P9czJ+th84/MV8c3Kf9r5WYd+5h7yblX8D/1F+Wdxh/muP+t5gnHveW
+/Y/Por0H+J/r2L+aj3A3jnSv+f8jD/fJX/XY37fu536NPI5h70rlN/yDlMv
j1KfRvoPUp9G+vdTn0a+71K/Q6R/B3uX8Z9Zync95tNn06lP477H2LtC+tbv
u+TjPvc16O/3yD/69OAO9r7Fn2+r30h/JvVp2EO3N27gz1OpT6O+HqQ+jfze
S30a99/l/tdHUf+3zV8jyj/r78zv03w+T/mnUp+GvUnTx79vmj/Sv4s/Xyb9
O6lPo/yzqU8j/Rnrh/Qtb6OoG6hf0p9IfYrfUO83YnxqjKc+jftv43+XSH8m
9WncP536NNKf4vmP2o7zUf5G+RH1/h36NNK/6vqp2G+oF8aD0dSnkf409i/h
z7dSn0b6k6lPf0a/VJ/G79dSn0a+m6lPw47rgjHqb8T+zf3vpj6N+6awf4n0
rd9zpHPd8eUo0hl3/GE+v0L6J6j/Uep3mPSHU58uYJfxj/oZSH1KO6Y+ZV5J
ffpjxknGX9Y3l7D3Cf1pxPGb8fYdx3fKfyb1Ke3q/EB+vzpSn6LT8OdR0r+c
+jSeu5j61HEpvkefvrkvvh8g/ZPYvcB4+IpyNMnvZ9TzBPX5i18dVOphFP+7
mPOW+rSBH1X16Snq6xj/ec28OlDUjdQb+fs41rFv9OkJ6jU+Z/201aeME/jz
RdIfzKvzhOn8mHajnMwPn5LeqWK/C7sjlP8L2nWc8ehb+2WxHNGO49Yz/nyR
ddY31O8Z2ulz2ve3Rz9nXEYftq2nuJ4m/ZekN1L0c/oB+UEXNSbtX/6e7fCM
fhjpPad9T1Nvz9voY/L5ol0td4Nx5kwxX/gd6Q9Z/qJfxe+T1M9oUZ/+BeNs
+PMI+ySf076n8Cf2cd74oX5L+1EvZynvIPPVML9fzCvjIumzz7I3yfg0js5v
4s9ft1kf6S+2q37EuHt8FPPdeer5Bf48wv2DpH/JcYjvx0jvKulf47PtdbOo
T/+u4ocX7E9Fv3IcoX/jz6PZL9ynYHworhu8L9J3nlIP6seT2J2iPcdIf5j8
Xch1CeOb41GJ/ZLfHLmuZHxsq/Oq7TaRfmE9MP5i9xb3mY9pfh/Dny/xvfpr
zH6Bfr1a/gY/D/+0vC/b9pNI5xzlnyraje+nsX+NfM5kvUQ6t3OetR+Gfww7
X1Gut1yHlEeMa/HcJOm+ws8tL/uVrZn0o8jHrDqD9O9wneK5e6R3JedZ9IHr
+qI+jftvFfa/GPemKf83zKez3D/E9Tbp2I/uFssZ39/PemR9UdSn5pP9PdKf
5rmGeqgwLjD+3CZdx9k7pKc+vVf0uzDzgOsN0n/I87brY+pRXTJDe52nvWYp
12vSv4O9n2/Gc3f9nfHnPp/Pc9/DHGfC3iN+Jz/NuWK9xzAyx+/sVx7ctnz0
r7vk91vmhXvln6N+SN/yNrg+wj/epfyPKfcVPs9h7wb1Np/9LK4LRX3KeqGw
f+56gvZUnz4s/xT+Q396rH+xX2F5GZeb88VxKda7pn+T9fsC+aIf7Leoj0uu
p8jfOddb9h/0+1xh/Ye/zBXH8bjO5zwR1wXyN0Y9md5NxsdFnrvl/k9Rn0b9
P8af0ZH7c4x/v4t5dne+/GOMP9G/m5aPeft4QV1K+VvFcSzsLZI/xsndJddh
kc/mcur6uG8efz5Le807/tK/FyjXJ/hPy/Gb6yLXC6S7lPNWXJf4fYJ6Wi72
47C3wnXU/QrnH/bDW+T3q9Adxy32BT5l/8Lysl+5v5Q6Iuwtu87An0xvAn9a
yXE77K0W9Sn7Ofiz+6e25wv6+1L548gY/rycui6ulneEfK2U6v7pKuWdIB9r
fO84t87v7p8ukr8z7ActMd+jg/eX0eWfsf9leqco/2pRd4S9VdIZZ395jfqe
YL9wneenqc+Noj6N/C7jz2fQ9cvlf9GnYWel/Gf/qk4zffdP11znUf51fh8n
XxtcnYc2uE5TL5vkd4T+tII/n8afVov6NKp9DXtfhD8fr6U+jfpcT30a9jZS
B4W9zdSnYW8LezP0zy3KNeJ+Mu1zivlirUQ8z3WS9fsl86flVZdvpi4Ne5v4
81W+30p9GvW2nTogru1S0afNderD/dP18oeR8fDnw43Up1H+zdSnUX7LO4o/
bZfq/ul26rKw13ZfKJ4rJfUp8QjGv5P402Z5HP0b/b7FOuErxuct0nub63bq
07i2yR/6tFlSn4Y/l6JuiPyW1KfEa/Dnk8ZzytfoU+I97PN9TfzG8p3FXpv8
Uj9PC79fi/R7hfxNxfezndSJ/ec+6KQ+jfu28ecT+NN26tOoZ8v7Ev8pNX1a
Up/GfaZ3jXx1Up/G9x3um+W5Lv7Ffu5um/Z7Kz4PldSn/fvft35ftfvj0HPL
y35l6aQ+7af/YYd02K8c6qY+DXtd8jcb49rzburTaI+CP7NfeVjKB337HxEP
6KQ+jfa0/EO0l+Vlv3K3W9w/DXtd/Bl92txxnxV/2kl9Gt2mlG8jg0fEk8uf
9Z//F3iDTu4DEI92nyfS/6Cb+jTsdckfevDpTurTsLfD87P405PUp/F9p/yg
//k1ekd7/7oZ6XTx59fsv5u+69Qd8nuZdCz/DXTBE+zd4vsn5G+W556kPo3+
3y3wDaEHP+ymPo348g72GrT/TlWfPt9JfRp3mR769MMnqU/D3nvYu4299/Cv
6cjPvvzIBHrDz83kOeL5EeLv8iQDyXMYfwp73Yw/hRl5kkHGQ3mD0ejnu/Ik
08Tf5TcmkueI34nPDe24/5Y8R7TDgPXbW2H8DHsd9km+ivHhfXkS1vdD8iSj
yXNE/qZJ1/TdR+5m/Cme6+Y+Xrh9p+c+YdRjp3eyb++T5Dl+yPgZdgqfz9Iu
8gfu+7R7xhHoH/AVN+F55EnYb+h1Mv50EP0v40/0zx76OnkO9Hebbk18/lzy
HC3GzxgPtinXLebPDvtgxBH2bd8x5lvrdzh5DvcVGb8y/hQ6qZ3xp2hXeRLj
YfIkl+i38iTEHUqnykc9L1U+6n3bFz5qSF6nkTxHhY/a3874U+R/K/koeQ7H
zyivPAl81IHteSN5jrheSZ5DPor5LfkoeQ75KHkO+Sh5DvmosLeR8acYf+QN
bK92xp8i/t6uxp925UnOJ88hHyXPEfZ++St5DvkoeQ75KHkO7CfPIR+FfqHf
GAeyPS8nz+H4Kc9h/EmeQz5KnkM+Sp5DPirsyTvIR8lXwGvtbmX8KfKb7cv8
upHxJ3kO40/yHPJR8hxRfvYb9leTjwp/ki9wfb9c5aMamxl/inzLkxjvsX2H
kueo8lGrNT7K8spHyTu4vpc3kI+Sp4BHOlzP+JM8B+MD/d3P8lHyJC/pTys9
9Bv9yfK6vl9KPirmD3mSseQ5wh482548iXzUao2PWqnxUZZXPmqZ9pCPsrzG
nxZz31iew/W9PEeVj1qt8VGmJx+13DOuJM9R5aMWa3zUYo2PkieRj1qo8VHz
NT5qucZH2b7yUfIkub6vxZ9aNT5KvkE+Sp7E9at8g+t7eRL5qKUaH7VY46Na
2JOPatX4KPkR+SjLKx9leiOMf4+xx/q+JV9hXFqeRD5KfsT9D+tXPmoee/JR
8zU+Sp7kNOuYR8lHxe8Pc9877MsbyEct1Pgo61s+Sp5EPmou+Sh5DuJjbXkO
8s/8+SDjEPIcru8jXni3xkfN1/iorN/kOYxTRvqPko+S55CPkudg/4b079b4
qDvJR4W92RofNZd8VOTX9h1JnkN9GunfT30qz6E+rfIcg6QvX+F6eib5qLB3
q8ZHPUo+Ku5/kHwU+8/cN5A8R5QPfXpwu8ZHWd633QdLfeq8GffJR02mPo36
up/6VJ6D8St5DsY32mkWe58kz8H4mDxHfD5L+SdTn8pzxO/Gn+QNJkj/TvJR
8hzx/HDyHFU+ajr5KHmOsPcyeY5I55zrsNSn+E3yUfHcWOrTSH82+Sh5jsi/
+w23Up/Kc1Tj6jdTnzrvsL9O+s3ko4wLUC+5T6c+ZZ+8xkdZXuNzE6lPo72u
pz5lnzD1KevCGh/lPrc8kvXO+v7NPB33y0dNJh8lzxH5f5dyXeW+Rq475KNo
hxofNZJ8lDxHPHeZfacz2LuRPMce7Uo7pj6V51CfynPE/caf5Bj8k195nTxH
fHZ9fzL1aeTzFfuSxsM+O1KfotOSj5LnoHzZz9Snkf5Q8lGOk2SMfXPz/S7j
4Zd8Vp9+fOT6/lt0ygF+wD528lGUq8ZHDVb1afIc8PtvdJDxJ3kO9peS54j0
ruBPXzDP3cw4o/qUcSL5KMc962Gpko9XR/IclLMtzxHpvcV6WJ5juDgO0K8z
LmTc1n3aZ/iNfmr8KdI3bnGOfvScdnp5JM9R5aNekP6JYrsZf4rv3ccfS56D
8S/jMIyPjM/HxAVGe/v4hfUW38uxyEd9Q3nlowYy/sRzGX8yTsf4X+M55AZ4
T+WNPo16+bQtHxXXr2nvt5PnYH6ingb1k7b9yHwZV7HcrtMZFzMuFs9N1HgO
+ajX7Wr86ZTtqh9l/GmxUm75KOdJuRf2yRpyJsmvJM8Rn22viaI+dZ+9ykfp
h4Opo6p8lPuEn7XVwQeVclzLetJP4qoeNM5jPOxWjY8aqcWfrN8zyXOg/47U
LfJRjiP6bdgzPfl9OY3xjAt6X+RjpsZHXcl5zbgV9p2vMv7EfIY9+aipjD8Z
N16kXuP7meSj3FeN7+Ve7iQfRT8r8lEHjAvUf/Icxp/iObmLL/F7yzuY++72
o8jH7eSjwp58wyTP3U8+ynY0/hT3GWdwXJxOPiqem8n4U6RzO8c1eY54jv3K
PfmVq3z/IP1InkN9GvffqvFRM/Zf+V7u/zR5DvmouMqvqE/vZ/wp7DzkKh/1
KONP8hyMT6Q/m/GnsGv9Gg+7m3xUPHcv+ai4PqjxUaYnH/U4+Sh5Dv0uvjfe
z37lwZ2MP0X6pmf86X7Gn+J7y/syeQ7ml+Q5jD/Jczz7/+NA8hxTyXOoT1kv
JR8V6T9IPkqew/hTpC+/8Sp5jvh+KHmOSvxpbyH5qLjKU0zx3GLyUawnM/4U
9yW/4no0+ago/3zGn6L88hvun8qTwKcfypNcZ39DnmQqeQ71aWR3rsZHzeMv
3+Ev84X9weQ5jD9F+5neO8lzVPmoJa43kucw/hTPyZPAR+3PZ/xJniPS4f3S
Zgt7P9+Mbt9KPiraf7HKR+0v5bwtzxG/M281V7AnHyXfcRl/kSfx/VJ5km/x
38WMP0X5La981HLGn+Q5qnzUSo2PWq3xUWu5DmI/K/koeQ75qCj/UpWP2pcn
kY+yvPJRqzU+yvTlo+RJ5KPkSdw/XUo+Kp5bZnx8RX9aqfFR8iTyUaupu9iP
JH/yUaYnH7VR46M2ko+K/C4nH9XP1k9WanzUao2PWksdHO0vTyIfJU8iHyVf
IR8l3yAftVXjo1ZrfNRqjY9aq/FR66lP47pR46NMTz5KnkQ+Sr5CPmq7xket
0T7yUes1Pmq9xkdZXvmozdSn8hxVPmo79ak8R+RPPqpd46PWa3zURo2P2qzx
UVs1PsryqpvlSdw/bVf1aVOeAp2yX1KfEo/BX+SjNmt81Fb5h/5n+SjTk49q
pz6V54j8jSfPoa6R55CPkudQnxKvSj6KeFb5Bn0qz/Hf/evn6GXTP027FMZr
68fy8z5nQ35B/ke+YZrnOqlPo/zbNT6qnfo04sHyGqxz3y9Vffq8pD6NUdL0
xpPniPvR1UNd7M0kzxH+xX7us3byUbG/W1KfynOoT2M/2PKyX7kvT3IxeQ75
qLDXTX0qzxH5m+H9853Up8SDk4/q3/+iJB8lz6E+jfa3/LxPMGt5R5PncB0S
9uRJJpPnkI8KezupTyOfneSj5DmqfFQ3+Sh5Dtdtka9u6tOwJ1+hHpQnUb8/
qfJRe09Sn8ITVPmo0k0+Sp5DPip4Hst3NnmOCh/13N/ho4o8yVTyHBU+aui9
Kh+1300+Ktq/m/o0/NvyvuQ8gp3Up9Hfn1T5qH3TU58+SX0a9uRJ4KMO33Pd
yPgnP+I+8BOu7t/t4PdDNb6C8yWedfP9PdqzGj9tdDN+ij/k+3v4S8ZP8Sf3
X3v4m/wA/t0ljjCUfIXvdeHPvQf95z/W38kf8//TDvsmw/h3cX+5yFdQf+gf
+RnOlziUH+F8id1uz33Z6HYdxk3jpx3iy+xTJV9xgvlJ3oD393aL++/4TZv2
mOoxHmX8lPGK/PG+3IfaP9tjvPO9H/ia0nNfEv4tz5dgPM3zJeDnqudL7G/z
eRK/6GT8lPE891kZ7zN+Kl/B+pT9oJL7WrG/Z3kHiudlhL9cIN61nfHT0A3y
BsTjZvUv9r178iO83/i0kO9B2ktehvhpU97i2Pm2Gj/d38rzJeQrIj3m/2N5
jknWV/oT+1NNeZqL7C96Honv72333FeOfG4Rf/+sLV/B/FPkK9g/YRzzfI4m
+9OeH0Fc5FA+aTzSP7Y+LxK/3O753ma0/xbt+MWRfIXvsclXRHlPF/mKqC/m
/6bndfD+3u4a7UF77Xkeie+5bpE/51vPWyF+2pAncR96g/GF8yX21vEn96fW
fD8Rf5I3UI/4mfhpcyvjp5Hfzdy3j/JvZPw0yu95IJwvcex5IJwv0bS88sjy
HPLaKxk/9byM+N04kvxIEzueN8P5Ei3reyD5CvyX/cRV/dv1UPV8icaK77cW
+Qr6T5GvCHvET/f1pybll1+Bjz6WHxlIvsI4hXxFpP+V68Xq+RKHS77/y/pI
ngJ+vCnfMYFdeZ0x+pPlvUA/Wkm+L9pfnsL4qTzL1235CsbPIl8R9pn/D1q5
bxn25Ck4X+JYfkSezvNQ5JGTn8GfljKuEfVpeX/Xlq/gPe4iX8H6k/4kb4Ae
Sb7CeOVyxk8jv0v4CedLNJYyfhrllyf5+Ei+Iuy9astXRHl9X8705LXnM37q
eRnxmfMldj2P5Ar+JB80jD95/kkj+Qr0BeOzfMc3jM/zGT8Ne3PG12i/x/me
YuRX3sD4qf7k/l2r53v77LdhDz76YL5XfY95LuOncdtj8vsOOu+R8Ufmc8/n
cP9O3uEG5bc9LzM+ex7IecZneZLXMT/sej6H50s8zvipfAXPF/kK7Bf5ivj9
BvPFHfziBumYvnpQfuQd+tdj6tPzJR7le8/yFdRfW74i/NfzJe4avy5VvkJe
ezb1KfvRGT+N9B+lPo1aeJj6lP3u2vkSd1Ofxn2eR+J71bOpT+P7Gf3XfanU
p3Hfw+T74n7Pmxmi3jx/Rb7vjv3LeEHG7eI+eQ7jVtOpT+P7qYyTyFeoT6O+
7qc+jfzeTX0a93k+x++O5CuMn1b5ihOkf8vxq8hXqE+J42LvZsZNf1y5yut4
TsVs6tPI50xVnx54HonxU89VM34qT2K88nrq0/h93PnBfc8q3/fM+h2tcuzu
T8mVZvxUXudT+G/HjYEipxfPGTceky+qvUdpHG0k9WnYvZXnSxAHSn3qvBL3
vUAPXkt9Kl8R+RpA//ner+dLXEx96jhr3PRnlDvsX03dEVfjp5Z3MLm7+P3L
I/kK46fWq/tTxHuT7/PcFfVp2DmVcTfGrSP1aaR7LfVplH8s9anrQvQf++O+
x/Z5W+4kvj9N+oPqS/eFU5/u4Ye0e/IV+hXvlSTfp47HfnJJ6lM51rD3Rdv3
HqI8Z9in9ryMi+W/eI56Ls4z8ftk+SHtHvbGU3dVyz2U+lTuUH0qp+7+lNwo
7VvUIbR/ka8gvp77SJGe+y+NWvx00PVRcmL4Z567iP8eyVfg323njbhfLuRz
yut+kOdlGD+VGzC+LF/RTK6H/kn6cqADzOMfHRk/dR1q/BR/kEPKOAJ+Xqw3
9Sn+lvtT+j3756TveyUXcp+C9XeuG1ifU0/O4+bjVC1+qg6T77uA7rhWy6dx
8ys5Tv2Ufhv1PJyc3B7t5riLHxxZD2HP+OmwXFqNA7hkXCvjp+6Tx+9T6JHf
c3/GjexH9hP7KbqjzEW95Tk6xk+r7w0OJecT9Xop9zXhn4rnZcR9U8V+f8C4
1qJc7F/lPk1cPV9iVO7qyDib8VPGDe43nus5Ep5/ZhzF720nr8blruS6Gv3U
04761LiI50vs4QdyX8zXcn25z2w7hb1bRX1qnMD4aeTD8zJ+f+5VPO/5Z1fx
v9f0b88j+cWm47zckHFrnmd8Nj25HM+v8Dy225lP+Qry73sXtMc7qQN+zThg
v/wF40w853kk7lfKc7hfKb/ifqW8gfHluxk/la+gXdx3sf171XpUn04zznu+
hPXbUA+Xaj+T52C/8tk9/EF9+iDjp+jxjJ8aN+T9rJ77+PG750vczvipfIXj
nudl0D9dT9h/SfdhLX76uBo/3Z1zfCB9eRLPKZMP+h3jzV3nJfSy55GcKPIV
VX36KPt92Jsr6lP5ikr89GDe8RP9LB90lvHmHv7n+ycP8pwu1pNyqa43q/HT
fdPzfRj5EeOD8hTET4/lD0ZZ39zP+Gmk8xB//go9+Ij2+tT3GbDn+x7yI74P
Y/qef2Z66q8W5ZlOvoJxDh7zEf48yPxqeeH7DufQoce+71GNn+5aXvcH5Tnc
P/Uz+v1QvsP46VKeLxH5navGT1vzxOO+PIp2n8d/nOcWMn4adlo5T8fV8srT
yXOo35dzXAx78hbwfYfzVU56f6GoT/u377boN5wv0ZQfOe1+V/J9YW8p+b6w
5/kcjCu7Kxk/DXurPk9/snynmT9avM/M+RIHi8kJx31LnttHubJ8pGt68n2e
RyK/5vkccodrGT+N9l/M+Gm0/xLxL86XOF6Sq/Z9M+x5Hq48h+cFy4+4P7hW
ndeO1yjPTPIV+B/9e6l2LuKyOhudtlI9X6Jh/cr3WV73B9eS72M/OuOn7Fdn
/DSe2+R3dPzxcsZP+350uILegfP+yWrGT6P91zJ+Gu2/nrov7Fle3vc49HwQ
9HvyFXCbu1uOX/Sn1aI+DTtrcu2sU+RZ5JBN3/ejTU/9vpl8X9iTp/D8M3kL
56Vtx3f60xrtw7pidx1+jXVLcwN/fsl5KRupT6P88ivGT00PnbQrP+L5CfIU
nJt13E59Gs+t5/kSUY8bBV2P/tr03EnGZ8srd76d+lS+Iu5Tf5meukGeQc61
pD6N/G7Sv3kv43gTnu4jeK0t4mZw6vvbycHLV0S+LhsPTH1KvLCqT5/Ld8zG
c6WT+jS+34IfUZ9ulz/tP8/5Eo025+14/lk79Snx0OT7Iv/yHp43Js8wRXt2
UrfJV0T9nWd83oaPeE181vL+YpNipD6Vr+D5SP+FPA3vnzzVPjq3J+8B3zfb
TQ66yle8g94o5aMoP3qwpD6N5yyv73t0avpUfsX9StOT7+umPpWviPtu53kZ
0e/g+z4s8BrE94c68IYfeR4D/oI+fW552a8s3dSn/eQ/NH3019AO9cW65v2d
1PXyFerT6N+d8tfRf/DfTtmM/uV5FalPoz3lR3jf49jyEk/f3Ul9GvZ2Up+G
vSc8j+7ef5L6NNq/gz+jT5924R+fR3/qyZPw/4+YlVchvv+B/MgY/iTvgR58
Ks/BuqQn33Ibe54Hcpb9gi7+7L7VTurTuG8n9WnYlSfxXE3Tc50sP6LekR+R
73uP++Xc3yv/B3CLMXs=
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {
    0.25, 15, 20}, $CellContext`rawNumberOfMasses$$ = 
    3, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
    3, $CellContext`tau$$ = 0, $CellContext`tick$$ = 
    False, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 0.8}, {0.9, 0.7}, {0.4, 
    1.2}, {1.3, 1.4}}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period:"]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open"]}, 
                ImageSize -> {200, 60}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Text[
                Text["Angular frequency \[Omega](q), selection:"]], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["mesh size "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`meshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax$$]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax$$]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin$$], 
                Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tau$$], 0}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`meshSize$$], 8}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`glConstMinSquaredDistanceFromOrigin$$], 0.1}, 0}, {{
       Hold[$CellContext`glConstMinAngleBetweenLatticeVectors$$], 
       Rational[1, 6] Pi}, 0}, {{
       Hold[$CellContext`glConstLocDefault$$], {{0.1, 1.3}, {1.9, 0.8}}}, 
      0}, {{
       Hold[$CellContext`glConstDefaultMass$$], 20}, 0}, {{
       Hold[$CellContext`glConstKDefaults$$], {0.25, 0.25, 0.25, 0.25, 0.25}},
       0}, {{
       Hold[$CellContext`glConstKMin$$], 0.05}, 0}, {{
       Hold[$CellContext`glConstKMax$$], 1}, 0}, {{
       Hold[$CellContext`glConstMMax$$], 30}, 0}, {{
       Hold[$CellContext`glConstWindowHalfWidth$$], 3}, 0}, {{
       Hold[$CellContext`glConstSpringColors$$], {
        RGBColor[
         Rational[2, 3], 0.33333333333333337`, 0], 
        RGBColor[0, 
         Rational[2, 3], 0], 
        RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
        RGBColor[0, 
         Rational[2, 3], 
         Rational[2, 3]], 
        RGBColor[
         Rational[2, 3], 
         Rational[2, 3], 0]}}, 0}, {{
       Hold[$CellContext`glConstPrimaryDisplaySize$$], {380, 380}}, 0}, {{
       Hold[$CellContext`glConstTextDisplayOffsetHack$$], {0.25, 0.25}}, 0}, {{
       Hold[$CellContext`glConstNeighboringCellIndexes$$], {{1, 0}, {0, 1}, {
       1, 1}, {1, -1}}}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstDefaultMass$$ = 
        20, $CellContext`glConstKDefaults$$ = {0.25, 0.25, 0.25, 0.25, 
         0.25}, $CellContext`glConstKMax$$ = 1, $CellContext`glConstKMin$$ = 
        0.05, $CellContext`glConstLocDefault$$ = {{0.1, 1.3}, {1.9, 
         0.8}}, $CellContext`glConstMinAngleBetweenLatticeVectors$$ = 
        Rational[1, 6] Pi, $CellContext`glConstMinSquaredDistanceFromOrigin$$ = 
        0.1, $CellContext`glConstMMax$$ = 
        30, $CellContext`glConstNeighboringCellIndexes$$ = {{1, 0}, {0, 1}, {
         1, 1}, {1, -1}}, $CellContext`glConstPrimaryDisplaySize$$ = {380, 
         380}, $CellContext`glConstSpringColors$$ = {
          RGBColor[
           Rational[2, 3], 0.33333333333333337`, 0], 
          RGBColor[0, 
           Rational[2, 3], 0], 
          RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
          RGBColor[0, 
           Rational[2, 3], 
           Rational[2, 3]], 
          RGBColor[
           Rational[2, 3], 
           Rational[2, 3], 
           0]}, $CellContext`glConstSpringColorsByN$$ = {}, \
$CellContext`glConstTextDisplayOffsetHack$$ = {0.25, 
         0.25}, $CellContext`glConstWindowHalfWidth$$ = 3, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`meshSize$$ = 
        8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
         1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tau$$ = 
        0, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ($CellContext`tick$$; Dynamic[
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`bRefreshDynPlot$$ = 
             False, Null]; $CellContext`dynPlot$$[$CellContext`tau$$], 
          
          If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
             Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
           LocatorPane[
            Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                  Dimensions[#]] < 3, 
                
                Flatten[{$CellContext`glConstLocDefault$$, \
$CellContext`mLocDefault$$}, 1], 
                If[First[
                   Dimensions[#]] > 7, 
                 Take[#, 7], #]]; 
             Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                First[
                  Dimensions[$CellContext`rawArrayOfMasses$$]]; 
               If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                   $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                 
                 While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass$$]; 
                  Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                  Part[
                   Part[$CellContext`kArray$$, All, 1], All, 1]]; 
               If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                 Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                 
                 While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                  Part[$CellContext`u$$, 1], 
                  
                  Part[$CellContext`u$$, 
                   1]] < $CellContext`glConstMinSquaredDistanceFromOrigin$$, 
                Part[$CellContext`glConstLocDefault$$, 1], 
                Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                  Part[$CellContext`u$$, 2], 
                  
                  Part[$CellContext`u$$, 
                   2]] < $CellContext`glConstMinSquaredDistanceFromOrigin$$, 
                Part[$CellContext`glConstLocDefault$$, 2], 
                Part[$CellContext`u$$, 2]]; {
                Part[$CellContext`u$$, 1], 
                
                Part[$CellContext`u$$, 
                 2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors$$]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
              If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
              If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
              If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
              ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
               2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
              True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
            $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
            LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period:"]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open"]}, 
                 ImageSize -> {200, 60}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Text[
                 Text["Angular frequency \[Omega](q), selection:"]], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["mesh size "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`meshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax$$]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax$$]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin$$], 
                 Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tau$$, 0}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`meshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`glConstMinSquaredDistanceFromOrigin$$, 0.1}, 0,
          ControlType -> 
         None}, {{$CellContext`glConstMinAngleBetweenLatticeVectors$$, 
          Rational[1, 6] Pi}, 0, ControlType -> 
         None}, {{$CellContext`glConstLocDefault$$, {{0.1, 1.3}, {1.9, 0.8}}},
          0, ControlType -> None}, {{$CellContext`glConstDefaultMass$$, 20}, 
         0, ControlType -> 
         None}, {{$CellContext`glConstKDefaults$$, {0.25, 0.25, 0.25, 0.25, 
          0.25}}, 0, ControlType -> 
         None}, {{$CellContext`glConstKMin$$, 0.05}, 0, ControlType -> 
         None}, {{$CellContext`glConstKMax$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`glConstMMax$$, 30}, 0, ControlType -> 
         None}, {{$CellContext`glConstWindowHalfWidth$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`glConstSpringColors$$, {
           RGBColor[
            Rational[2, 3], 0.33333333333333337`, 0], 
           RGBColor[0, 
            Rational[2, 3], 0], 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
           RGBColor[0, 
            Rational[2, 3], 
            Rational[2, 3]], 
           RGBColor[
            Rational[2, 3], 
            Rational[2, 3], 0]}}, 0, ControlType -> 
         None}, {{$CellContext`glConstPrimaryDisplaySize$$, {380, 380}}, 0, 
         ControlType -> 
         None}, {{$CellContext`glConstTextDisplayOffsetHack$$, {0.25, 0.25}}, 
         0, ControlType -> 
         None}, {{$CellContext`glConstNeighboringCellIndexes$$, {{1, 0}, {0, 
          1}, {1, 1}, {1, -1}}}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{915., {292., 299.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({{$CellContext`dynamicsMatrix[
           Pattern[$CellContext`ld, 
            Blank[List]], 
           Pattern[$CellContext`cd, 
            Blank[List]]] := 
         Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
              Sort[
               Flatten[$CellContext`cd, 2]], 
              First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
            ReplaceAll[{
              "latticeBasis", "mScalarArray", 
               "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
            Partition[
              IdentityMatrix[2 $CellContext`numberOfMasses], 
              2]; $CellContext`res = Partition[
              Flatten[
               Table[
                Total[
                 Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                   
                   Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                  
                  Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
              2 $CellContext`numberOfMasses]; 
           ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
            Pattern[$CellContext`k, 
             Blank[Integer]], 
            Pattern[$CellContext`j, 
             Blank[Integer]], 
            Pattern[$CellContext`mVec, 
             Blank[List]], 
            Pattern[$CellContext`kS, 
             Blank[]], 
            Blank[], 
            Blank[], 
            Blank[], 
            Pattern[$CellContext`proj, 
             Blank[List]]}, 
           Pattern[$CellContext`r, 
            Blank[List]], 
           Pattern[$CellContext`mk, 
            Blank[]], 
           Pattern[$CellContext`epsilon, 
            Blank[List]], 
           Pattern[$CellContext`mA, 
            Blank[List]]] := $CellContext`kS 
          Dot[$CellContext`proj, 
            Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
            Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
                 Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
             Sqrt[$CellContext`mk 
              Part[$CellContext`mA, $CellContext`j]])], \
$CellContext`calcDynamics[
           Pattern[$CellContext`mAtQ, 
            Blank[List]]] := Map[{
            Sqrt[
             Part[#, 1]], 
            Part[#, 2]}& , 
           Transpose[
            Eigensystem[$CellContext`mAtQ]]], $CellContext`showDynamics[
           Pattern[$CellContext`ld$, 
            Blank[List]], 
           Pattern[$CellContext`dynAtOmegaIndex$, 
            Blank[List]], 
           Pattern[$CellContext`sc$, 
            Blank[]], 
           Pattern[$CellContext`ql$, 
            Blank[]]] := 
         Module[{$CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`e$, \
$CellContext`omega$, $CellContext`points$, $CellContext`lines$, \
$CellContext`nu$, $CellContext`a$, $CellContext`b$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, {{$CellContext`a$, \
$CellContext`b$}, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
            ReplaceAll[{
              "latticeBasis", "pointsDataTable", 
               "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
               "numberOfMasses"}, $CellContext`ld$]; {$CellContext`omega$, \
$CellContext`e$} = $CellContext`dynAtOmegaIndex$; $CellContext`e$ = 
            Partition[$CellContext`e$, 2]; $CellContext`points$ = 
            Table[Part[$CellContext`pointsDataTable$, $CellContext`k] + 
              Table[$CellContext`sc$ 
                Re[Part[$CellContext`e$, $CellContext`k] 
                  E^(I (Dot[$CellContext`ql$, $CellContext`a$ $CellContext`i + \
$CellContext`b$ $CellContext`j] - $CellContext`omega$ #))], {$CellContext`i, -
                 Part[$CellContext`numberLatticeLinesToDisplay$, 1], 
                 
                 Part[$CellContext`numberLatticeLinesToDisplay$, 
                  1]}, {$CellContext`j, -
                 Part[$CellContext`numberLatticeLinesToDisplay$, 2], 
                 
                 Part[$CellContext`numberLatticeLinesToDisplay$, 
                  2]}]& , {$CellContext`k, $CellContext`numberOfMasses$}]; \
$CellContext`nu$ = (2 Pi) 
             If[$CellContext`omega$ == 0, 1, 1/$CellContext`omega$]; Show[{
              Table[
               ListPlot[
                
                Part[$CellContext`points$, $CellContext`k][$CellContext`nu$ \
#], PlotRange -> {{(-FE`glConstWindowHalfWidth$$39)/2, 
                   FE`glConstWindowHalfWidth$$39}, {(-
                    FE`glConstWindowHalfWidth$$39)/2, 
                   FE`glConstWindowHalfWidth$$39}}, ImageSize -> 
                FE`glConstPrimaryDisplaySize$$39, PlotStyle -> Directive[
                  PointSize[
                   Sqrt[
                   Part[$CellContext`mScalarArray$, $CellContext`k] (
                    FE`glConstMMax$$39^(-1)/350)]], 
                  $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$}], 
              Graphics[{$CellContext`lines$}]}]& ], 
         Attributes[$CellContext`ld$] = {Temporary}, 
         Attributes[$CellContext`dynAtOmegaIndex$] = {Temporary}, 
         Attributes[$CellContext`sc$] = {Temporary}, 
         Attributes[$CellContext`ql$] = {Temporary}, 
         Attributes[$CellContext`mScalarArray$] = {Temporary}, 
         Attributes[$CellContext`numberOfMasses$] = {Temporary}, 
         FE`glConstWindowHalfWidth$$39 = 3, 
         FE`glConstPrimaryDisplaySize$$39 = {380, 380}, FE`glConstMMax$$39 = 
         30, $CellContext`massColors := Part[
           Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
           1]& , $CellContext`frequencyPlotCalc[
           Pattern[$CellContext`ld$, 
            Blank[List]], 
           Pattern[$CellContext`m$, 
            Blank[]], 
           Pattern[$CellContext`meshSz$, 
            Blank[Integer]]] := 
         Module[{$CellContext`eigTable2D$, $CellContext`eigTable1D$, \
$CellContext`qMax$, $CellContext`omegaPointList2D$, \
$CellContext`omegaPointList1D$, $CellContext`range$, \
$CellContext`numberOfMasses$}, {$CellContext`qMax$, \
$CellContext`numberOfMasses$} = 
            ReplaceAll[{
              "qMaxVec", 
               "numberOfMasses"}, $CellContext`ld$]; $CellContext`eigTable2D$ = 
            Flatten[
              Re[
               Table[{{$CellContext`qx, $CellContext`qy}, 
                 Eigenvalues[
                  N[
                   $CellContext`m$[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, (-Part[$CellContext`qMax$, 1])/2, 
                 Part[$CellContext`qMax$, 1]/2, 
                 Part[$CellContext`qMax$, 
                   1]/$CellContext`meshSz$}, {$CellContext`qy, (-
                  Part[$CellContext`qMax$, 2])/2, Part[$CellContext`qMax$, 2]/
                 2, Part[$CellContext`qMax$, 2]/$CellContext`meshSz$}]], 
              1]; $CellContext`omegaPointList2D$[
              Pattern[$CellContext`nn$, 
               Blank[]]] := Map[Flatten[{
                Part[#, 1], 
                Part[
                 Sqrt[
                  
                  Part[#, 
                   2]], $CellContext`nn$]}]& , $CellContext`eigTable2D$]; \
$CellContext`range$ = Range[2 $CellContext`numberOfMasses$]; ListPlot3D[
             Map[$CellContext`omegaPointList2D$[#]& , $CellContext`range$], 
             PlotRange -> Full, ImageSize -> FE`glConstPrimaryDisplaySize$$39,
              AxesLabel -> {
              "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
               "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
         Attributes[$CellContext`m$] = {Temporary}, 
         Attributes[$CellContext`meshSz$] = {Temporary}, 
         Attributes[$CellContext`nn$] = {Temporary}, $CellContext`showFreqPlot[
           Pattern[$CellContext`qpl, 
            Blank[List]], 
           Pattern[$CellContext`freqPlotData, 
            Blank[]]] := 
         Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
              Graphics3D[
               Polygon[{{
                  Part[$CellContext`aa, 1], 
                  Part[$CellContext`aa, 2], 0}, {
                  Part[$CellContext`bb, 1], 
                  Part[$CellContext`bb, 2], 0}, {
                  Part[$CellContext`bb, 1], 
                  Part[$CellContext`bb, 2], 23}, {
                  Part[$CellContext`aa, 1], 
                  Part[$CellContext`aa, 2], 
                  23}}]]}]], $CellContext`nMassesFromLocArray[
           Pattern[$CellContext`uLoc, 
            Blank[]]] := First[
            Dimensions[$CellContext`uLoc]] - 
          2, $CellContext`returnKarrayForAdditionalMassIndex[
           Pattern[$CellContext`kA, 
            Blank[List]], 
           Pattern[$CellContext`nmNew, 
            Blank[Integer]]] := 
         Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
              Map[$CellContext`constructKArrayElements[
                Part[#, 1], 
                Part[#, 2]]& , 
               Select[
                Flatten[
                 
                 Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
                Max[#] == $CellContext`nmNew& ]], 2]; 
           Flatten[{$CellContext`kA, $CellContext`k2}, 
             1]], $CellContext`constructKArrayElements[
           Pattern[$CellContext`i$, 
            Blank[Integer]], 
           Pattern[$CellContext`j$, 
            Blank[Integer]]] := 
         Module[{$CellContext`a$}, $CellContext`a$ = Flatten[
              
              Table[{$CellContext`i$, $CellContext`j$, $CellContext`s 
                 Part[FE`glConstNeighboringCellIndexes$$39, $CellContext`n]} -> 
               Part[
                FE`glConstKDefaults$$39, $CellContext`n], {$CellContext`s, -1,
                 1, 2}, {$CellContext`n, 4}], 1]; 
           If[$CellContext`i$ < $CellContext`j$, 
             
             Append[$CellContext`a$, {$CellContext`i$, $CellContext`j$, {0, 
                0}} -> Part[FE`glConstKDefaults$$39, 5]], $CellContext`a$]], 
         Attributes[$CellContext`i$] = {Temporary}, 
         Attributes[$CellContext`j$] = {Temporary}, 
         FE`glConstNeighboringCellIndexes$$39 = {{1, 0}, {0, 1}, {1, 1}, {
          1, -1}}, 
         FE`glConstKDefaults$$39 = {0.25, 0.25, 0.25, 0.25, 
          0.25}, $CellContext`resetLatticeVectorsIfAngleTooSmall[
           Pattern[$CellContext`uLoc$, 
            Blank[List]], 
           Pattern[$CellContext`minAngle$, 
            Blank[]]] := Module[{$CellContext`t$}, $CellContext`t$ = Abs[
              ArcCos[
               Dot[
                Normalize[
                 Part[$CellContext`uLoc$, 1]], 
                Normalize[
                 Part[$CellContext`uLoc$, 2]]]]]; $CellContext`t$ = 
            If[$CellContext`t$ > Pi/2, Pi - $CellContext`t$, $CellContext`t$]; 
           If[$CellContext`t$ < $CellContext`minAngle$, 
             FE`glConstLocDefault$$39, {
              Part[$CellContext`uLoc$, 1], 
              Part[$CellContext`uLoc$, 2]}]], 
         Attributes[$CellContext`uLoc$] = {Temporary}, 
         Attributes[$CellContext`minAngle$] = {Temporary}, 
         Attributes[$CellContext`t$] = {Temporary}, 
         FE`glConstLocDefault$$39 = {{0.1, 1.3}, {1.9, 
          0.8}}, $CellContext`adjustedmoSel[
           Pattern[$CellContext`rNumM, 
            Blank[]], 
           Pattern[$CellContext`mOrigInd, 
            Blank[]], 
           Pattern[$CellContext`m1Ind, 
            Blank[]]] := If[$CellContext`rNumM > 2, 
           If[$CellContext`mOrigInd == $CellContext`m1Ind, 
            First[
             DeleteCases[
              
              Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
           First[
            Delete[
             Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
           Pattern[$CellContext`kA$, 
            Blank[List]], 
           Pattern[$CellContext`m1Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`m2Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`ni$, 
            Blank[Integer]]] := 
         ReplaceAll[{$CellContext`m1Ind$, $CellContext`m2Ind$, 
            Part[
            FE`glConstNeighboringCellIndexes$$39, $CellContext`ni$]}, \
$CellContext`kA$], Attributes[$CellContext`kA$] = {Temporary}, 
         Attributes[$CellContext`m1Ind$] = {Temporary}, 
         Attributes[$CellContext`m2Ind$] = {Temporary}, 
         Attributes[$CellContext`ni$] = {
          Temporary}, $CellContext`selectOriginVFromKarray[
           Pattern[$CellContext`kA, 
            Blank[List]], 
           Pattern[$CellContext`m1Ind, 
            Blank[Integer]], 
           Pattern[$CellContext`moInd, 
            Blank[Integer]]] := ReplaceAll[
           Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
            0}], $CellContext`kA], $CellContext`locDependent[
           Pattern[$CellContext`uLoc$, 
            Blank[List]], 
           Pattern[$CellContext`numMasses$, 
            Blank[Integer]], 
           Pattern[$CellContext`rma$, 
            Blank[List]]] := 
         Module[{$CellContext`m$, $CellContext`latticeBasis$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`reciprocalBasis$, \
$CellContext`mObliqueComponents$, $CellContext`mPosFirstCell$, \
$CellContext`reciprocalNorms$}, $CellContext`latticeBasis$ = 
            Take[$CellContext`uLoc$, 2]; $CellContext`m$ = 
            Drop[$CellContext`uLoc$, 
              2]; $CellContext`numberLatticeLinesToDisplay$ = Map[Ceiling[
               Abs[FE`glConstWindowHalfWidth$$39/Part[
                 Part[$CellContext`latticeBasis$, #], #]]]& , 
              Range[
              2]]; $CellContext`reciprocalBasis$ = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis$]; \
$CellContext`reciprocalNorms$ = Map[Norm[
               Part[$CellContext`reciprocalBasis$, #]]& , 
              Range[2]]; $CellContext`mObliqueComponents$ = Table[
              Dot[
               Part[$CellContext`m$, $CellContext`i], 
               
               Part[$CellContext`reciprocalBasis$, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses$}, {$CellContext`j, 
               2}]; $CellContext`mPosFirstCell$ = 
            Map[Part[$CellContext`m$, #] - Dot[
               Floor[
                
                Part[$CellContext`mObliqueComponents$, #]], \
$CellContext`latticeBasis$]& , 
              Range[$CellContext`numMasses$]]; {
            "mScalarArray" -> $CellContext`rma$, 
             "numberOfMasses" -> $CellContext`numMasses$, 
             "latticeBasis" -> $CellContext`latticeBasis$, "latticeNorms" -> 
             Map[Norm[
                Part[$CellContext`latticeBasis$, #]]& , 
               Range[2]], "latticeUnitVectors" -> Map[Normalize[
                Part[$CellContext`latticeBasis$, #]]& , 
               Range[2]], 
             "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay$, 
             "reciprocalBasis" -> $CellContext`reciprocalBasis$, 
             "reciprocalNorms" -> $CellContext`reciprocalNorms$, 
             "qMaxVec" -> (2 Pi) $CellContext`reciprocalNorms$, 
             "mObliqueComponents" -> $CellContext`mObliqueComponents$, 
             "mPosFirstCell" -> $CellContext`mPosFirstCell$, 
             "pointsDataTable" -> Map[$CellContext`pointsTable[
                
                Part[$CellContext`mPosFirstCell$, #], \
$CellContext`latticeBasis$, $CellContext`numberLatticeLinesToDisplay$]& , 
               Range[$CellContext`numMasses$]], "lineTable" -> 
             Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay$, $CellContext`latticeBasis$, #]& , 
               Permutations[{1, 2}]]}], 
         Attributes[$CellContext`numMasses$] = {Temporary}, 
         Attributes[$CellContext`rma$] = {
          Temporary}, $CellContext`calcReciprocalBasis[
           Pattern[$CellContext`loc, 
            Blank[List]]] := Inverse[
           Transpose[$CellContext`loc]], $CellContext`pointsTable[
           Pattern[$CellContext`mPosFirstCell, 
            Blank[List]], 
           Pattern[$CellContext`latticeBasis, 
            Blank[List]], 
           Pattern[$CellContext`numberLatticeLinesToDisplay, 
            Blank[List]]] := 
         Table[$CellContext`mPosFirstCell + 
           Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
            
            Part[$CellContext`numberLatticeLinesToDisplay, 
             1]}, {$CellContext`j, -
            Part[$CellContext`numberLatticeLinesToDisplay, 2], 
            
            Part[$CellContext`numberLatticeLinesToDisplay, 
             2]}], $CellContext`calcLineTable[
           Pattern[$CellContext`n, 
            Blank[List]], 
           Pattern[$CellContext`b, 
            Blank[List]], 
           Pattern[$CellContext`i, 
            Blank[List]]] := 
         Module[{$CellContext`first, $CellContext`second}, \
{$CellContext`first, $CellContext`second} = $CellContext`i; Table[
             
             Line[{(-Part[$CellContext`n, $CellContext`first]) 
                Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                Part[$CellContext`b, $CellContext`second], 
               Part[$CellContext`n, $CellContext`first] 
                Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, \
-Part[$CellContext`n, $CellContext`second], 
              
              Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`calculateCouplings[
           Pattern[$CellContext`ld, 
            Blank[List]], 
           Pattern[$CellContext`kA, 
            Blank[List]]] := 
         Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
            ReplaceAll[{
              "latticeBasis", "mPosFirstCell", 
               "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
            Map[Append[#, 
               $CellContext`relativeDifferences[$CellContext`r, \
$CellContext`mp, 
                First[#]]]& , 
              ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
            Map[Flatten[{
                Part[#, 1], {
                 Part[#, 2]}, 
                Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
              Sort[
               
               Select[$CellContext`t, And[
                Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
               Part[#, 5] < 
               Part[#2, 
                 5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
            Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
            Flatten[{$CellContext`t2, 
               Map[Flatten[{{
                   Part[#, 2], 
                   Part[#, 1]}, 
                  Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
            Table[
              Sort[
               Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
               Part[#, 5] < 
               Part[#2, 
                 5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], $CellContext`relativeDifferences[
           Pattern[$CellContext`r, 
            Blank[List]], 
           Pattern[$CellContext`mp, 
            Blank[List]], {
            Pattern[$CellContext`mIndex1, 
             Blank[Integer]], 
            Pattern[$CellContext`mIndex2, 
             Blank[Integer]], 
            Pattern[$CellContext`n, 
             Blank[List]]}] := 
         Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
            Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
            Part[$CellContext`mp, $CellContext`mIndex2] + 
             Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
            
            Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], $CellContext`projOpU[
           Pattern[$CellContext`v, 
            Blank[List]]] := {{
           Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
            Part[$CellContext`v, 2]}, {
           Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
            Part[$CellContext`v, 2]^2}}, $CellContext`plotSprings[
           Pattern[$CellContext`uLoc$, 
            Blank[List]], 
           Pattern[$CellContext`ld$, 
            Blank[List]], 
           Pattern[$CellContext`cd$, 
            Blank[List]], 
           Pattern[$CellContext`m1Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`m2Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`moInd$, 
            Blank[Integer]]] := 
         Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
            Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
            Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
            Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
            Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
             Dot[$CellContext`bLoc$, $CellContext`bLoc$]; \
{$CellContext`mLoc$, $CellContext`reciprocalBasis$, \
$CellContext`pointsDataTable$, $CellContext`numberLatticeLinesToDisplay$, \
$CellContext`lines$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
            ReplaceAll[{
              "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
               "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
               "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
              Pattern[$CellContext`n$, 
               Blank[Integer]]] := {
              $CellContext`massColors[$CellContext`n$], Null, 
              PointSize[
               Sqrt[
               Part[$CellContext`mScalarArray$, $CellContext`n$] (
                 FE`glConstMMax$$39^(-1)/500)]], 
              Map[Point[#]& , 
               Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
              Text[
               $CellContext`massLabel[$CellContext`n$], 
               Part[$CellContext`mLoc$, $CellContext`n$] + 
               FE`glConstTextDisplayOffsetHack$$39]}; $CellContext`cOrigin$ = 
            Select[
              Part[
               Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
              Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
              Part[
               Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
              Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
               $CellContext`spScaled[
                Take[#, {6, 7}], Part[#, 4]/
                FE`glConstKMax$$39, $CellContext`scaleLoc$], AspectRatio -> 
               Automatic, PlotStyle -> ReplaceAll[
                 Part[#, 3], 
                 FE`glConstSpringColorsByN$$39]]& , $CellContext`cN$]; 
           If[$CellContext`numberOfMasses$ > 1, 
             AppendTo[$CellContext`g$, 
              Map[ListLinePlot[
                $CellContext`spScaled[
                 Take[#, {6, 7}], Part[#, 4]/
                 FE`glConstKMax$$39, $CellContext`scaleLoc$], AspectRatio -> 
                Automatic, PlotStyle -> ReplaceAll[
                  Part[#, 3], 
                  FE`glConstSpringColorsByN$$39]]& , $CellContext`cOrigin$]], 
             Null]; Show[{
              Graphics[
               Flatten[{{$CellContext`lines$, Blue, 
                  Map[Arrow[{{0, 0}, 
                    Part[$CellContext`reciprocalBasis$, #]}]& , 
                   Range[2]], Thick, 
                  Arrowheads[0.05], Red, 
                  Map[Arrow[{{0, 0}, 
                    Part[$CellContext`latticeBasis$, #]}]& , 
                   Range[2]], 
                  Text[
                   OverVector["a"], $CellContext`aLoc$/2 + 
                   FE`glConstTextDisplayOffsetHack$$39], 
                  Text[
                   OverVector["b"], $CellContext`bLoc$/2 + 
                   FE`glConstTextDisplayOffsetHack$$39]}, 
                 Map[$CellContext`pointsList$[#]& , 
                  Range[$CellContext`numberOfMasses$]]}], 
               PlotRange -> {{(-FE`glConstWindowHalfWidth$$39)/2, 
                  FE`glConstWindowHalfWidth$$39}, {(-
                   FE`glConstWindowHalfWidth$$39)/2, 
                  FE`glConstWindowHalfWidth$$39}}, ImageSize -> 
               FE`glConstPrimaryDisplaySize$$39], $CellContext`g$}]], 
         Attributes[$CellContext`cd$] = {Temporary}, 
         Attributes[$CellContext`moInd$] = {Temporary}, 
         Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
         Style[
           $CellContext`indexLabel["m", #], 
           $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
           Style[#, Italic], #2]& , Attributes[Subscript] = {NHoldRest}, 
         FE`glConstTextDisplayOffsetHack$$39 = {0.25, 
          0.25}, $CellContext`spScaled[{
            Pattern[$CellContext`s1, 
             Blank[List]], 
            Pattern[$CellContext`s2, 
             Blank[List]]}, 
           Pattern[$CellContext`scaleKValue, 
            Blank[]], 
           Pattern[$CellContext`referenceSepSquared, 
            Blank[]]] := 
         Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
             
             Ceiling[(12 $CellContext`scaleKValue) 
              Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
           Pattern[$CellContext`a12, 
            Blank[List]], 
           Optional[
            Pattern[$CellContext`n, 
             Blank[Integer]], 8], 
           Optional[
            Pattern[$CellContext`h, 
             Blank[]], 0.05], 
           Optional[
            Pattern[$CellContext`f, 
             Blank[]], 0.1]] := 
         Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
            Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
            Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
              Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
            Dot[$CellContext`r, {$CellContext`n1, 0}]; {
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + ($CellContext`t (1 - 
                    2 $CellContext`f)) $CellContext`nd, $CellContext`h 
                 Sin[((2 
                    Pi) $CellContext`n) $CellContext`t]}], {$CellContext`t, 0,
                1, 0.01}], 
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                   2 $CellContext`f) $CellContext`nd + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
         FE`glConstKMax$$39 = 1, 
         FE`glConstSpringColorsByN$$39 = {{-1, 0} -> 
           RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
           RGBColor[0, 2/3, 0], {-1, -1} -> 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
           RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
           RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
           RGBColor[0, 2/3, 0], {1, 1} -> 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
           RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
           Pattern[$CellContext`v, 
            Blank[]], 
           Pattern[$CellContext`default, 
            Blank[]], 
           Pattern[$CellContext`lowerLimit, 
            Blank[]], 
           Pattern[$CellContext`upperLimit, 
            Blank[]]] := 
         Module[{$CellContext`result}, $CellContext`result = If[
              
              NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
            If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
            If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], \
$CellContext`massValue = $CellContext`checkAgainstRange[
          0.25, 0.25, 0.25, 30], $CellContext`kLable = Style[
           $CellContext`indexLabel["k", #], FontColor -> 
           Part[FE`glConstSpringColors$$39, #]]& , FE`glConstSpringColors$$39 = {
           RGBColor[2/3, 0.33333333333333337`, 0], 
           RGBColor[0, 2/3, 0], 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
           RGBColor[0, 2/3, 2/3], 
           RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKArrayElements[
           Pattern[$CellContext`kA$, 
            Blank[List]], 
           Pattern[$CellContext`m1Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`m2Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`ni$, 
            Blank[Integer]], 
           Pattern[$CellContext`v$, 
            Blank[]]] := 
         ReplaceAll[$CellContext`kA$, {({$CellContext`m1Ind$, \
$CellContext`m2Ind$, 
               Part[FE`glConstNeighboringCellIndexes$$39, $CellContext`ni$]} -> 
             Blank[]) :> ({$CellContext`m1Ind$, $CellContext`m2Ind$, 
               Part[
               FE`glConstNeighboringCellIndexes$$39, $CellContext`ni$]} -> \
$CellContext`v$), ({$CellContext`m1Ind$, $CellContext`m2Ind$, -
               Part[FE`glConstNeighboringCellIndexes$$39, $CellContext`ni$]} -> 
             Blank[]) :> ({$CellContext`m1Ind$, $CellContext`m2Ind$, -
               Part[FE`glConstNeighboringCellIndexes$$39, $CellContext`ni$]} -> \
$CellContext`v$)}], 
         Attributes[$CellContext`v$] = {
          Temporary}, $CellContext`returnAlteredKarrayOriginElement[
           Pattern[$CellContext`kA, 
            Blank[List]], 
           Pattern[$CellContext`m1Ind, 
            Blank[Integer]], 
           Pattern[$CellContext`moInd, 
            Blank[Integer]], 
           Pattern[$CellContext`v, 
            Blank[]]] := 
         Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
              Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
           ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
              Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; \
{$CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault$$, \
$CellContext`mLocDefault$$}, 1]; $CellContext`glConstSpringColorsByN$$ = 
          DeleteDuplicates[
            Flatten[
             Table[$CellContext`s Part[
                 
                 Append[$CellContext`glConstNeighboringCellIndexes$$, {0, 
                  0}], $CellContext`n] -> 
              Part[$CellContext`glConstSpringColors$$, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 5}], 
             1]]; $CellContext`checkAgainstRange[
            Pattern[$CellContext`v, 
             Blank[]], 
            Pattern[$CellContext`default, 
             Blank[]], 
            Pattern[$CellContext`lowerLimit, 
             Blank[]], 
            Pattern[$CellContext`upperLimit, 
             Blank[]]] := 
          Module[{$CellContext`result}, $CellContext`result = If[
               
               NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
             If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
             If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result]; \
$CellContext`springPoints[
            Pattern[$CellContext`a12, 
             Blank[List]], 
            Optional[
             Pattern[$CellContext`n, 
              Blank[Integer]], 8], 
            Optional[
             Pattern[$CellContext`h, 
              Blank[]], 0.05], 
            Optional[
             Pattern[$CellContext`f, 
              Blank[]], 0.1]] := 
          Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
             Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
             Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
               Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
             Dot[$CellContext`r, {$CellContext`n1, 0}]; {
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + ($CellContext`t (1 - 
                    2 $CellContext`f)) $CellContext`nd, $CellContext`h 
                  Sin[((2 
                    Pi) $CellContext`n) $CellContext`t]}], {$CellContext`t, 0,
                 1, 0.01}], 
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                    2 $CellContext`f) $CellContext`nd + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 
                0.01}]}]; $CellContext`indexLabel = Subscript[
            Style[#, Italic], #2]& ; $CellContext`kLable = Style[
            $CellContext`indexLabel["k", #], FontColor -> 
            Part[$CellContext`glConstSpringColors$$, #]]& ; \
$CellContext`massColors := Part[
            Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
            1]& ; $CellContext`massLabel := Style[
            $CellContext`indexLabel["m", #], 
            $CellContext`massColors[#]]& ; $CellContext`calcLineTable[
            Pattern[$CellContext`n, 
             Blank[List]], 
            Pattern[$CellContext`b, 
             Blank[List]], 
            Pattern[$CellContext`i, 
             Blank[List]]] := 
          Module[{$CellContext`first, $CellContext`second}, \
{$CellContext`first, $CellContext`second} = $CellContext`i; Table[
              
              Line[{(-Part[$CellContext`n, $CellContext`first]) 
                 Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                 Part[$CellContext`b, $CellContext`second], 
                Part[$CellContext`n, $CellContext`first] 
                 Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                 Part[$CellContext`b, $CellContext`second]}], \
{$CellContext`j, -Part[$CellContext`n, $CellContext`second], 
               
               Part[$CellContext`n, $CellContext`second]}]]; \
$CellContext`calcReciprocalBasis[
            Pattern[$CellContext`loc, 
             Blank[List]]] := Inverse[
            Transpose[$CellContext`loc]]; $CellContext`pointsTable[
            Pattern[$CellContext`mPosFirstCell, 
             Blank[List]], 
            Pattern[$CellContext`latticeBasis, 
             Blank[List]], 
            Pattern[$CellContext`numberLatticeLinesToDisplay, 
             Blank[List]]] := 
          Table[$CellContext`mPosFirstCell + 
            Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
             
             Part[$CellContext`numberLatticeLinesToDisplay, 
              1]}, {$CellContext`j, -
             Part[$CellContext`numberLatticeLinesToDisplay, 2], 
             
             Part[$CellContext`numberLatticeLinesToDisplay, 
              2]}]; $CellContext`nMassesFromLocArray[
            Pattern[$CellContext`uLoc, 
             Blank[]]] := First[
             Dimensions[$CellContext`uLoc]] - 2; $CellContext`adjustedmoSel[
            Pattern[$CellContext`rNumM, 
             Blank[]], 
            Pattern[$CellContext`mOrigInd, 
             Blank[]], 
            Pattern[$CellContext`m1Ind, 
             Blank[]]] := If[$CellContext`rNumM > 2, 
            If[$CellContext`mOrigInd == $CellContext`m1Ind, 
             First[
              DeleteCases[
               
               Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
            First[
             Delete[
              Range[
              2], $CellContext`m1Ind]]]; $CellContext`constructKArrayElements[
            Pattern[$CellContext`i$, 
             Blank[Integer]], 
            Pattern[$CellContext`j$, 
             Blank[Integer]]] := 
          Module[{$CellContext`a$}, $CellContext`a$ = Flatten[
               
               Table[{$CellContext`i$, $CellContext`j$, $CellContext`s 
                  Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`n]} -> 
                Part[$CellContext`glConstKDefaults$$, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
            If[$CellContext`i$ < $CellContext`j$, 
              
              Append[$CellContext`a$, {$CellContext`i$, $CellContext`j$, {0, 
                 0}} -> Part[$CellContext`glConstKDefaults$$, 
                 5]], $CellContext`a$]]; $CellContext`constructKArray[
            Pattern[$CellContext`r, 
             Blank[Integer]]] := Flatten[
            Table[
             $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2]; $CellContext`returnAlteredKArrayElements[
            Pattern[$CellContext`kA$, 
             Blank[List]], 
            Pattern[$CellContext`m1Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`m2Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`ni$, 
             Blank[Integer]], 
            Pattern[$CellContext`v$, 
             Blank[]]] := 
          ReplaceAll[$CellContext`kA$, {({$CellContext`m1Ind$, \
$CellContext`m2Ind$, 
                
                Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]} -> Blank[]) :> ({$CellContext`m1Ind$, $CellContext`m2Ind$, 
                
                Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]} -> $CellContext`v$), ({$CellContext`m1Ind$, \
$CellContext`m2Ind$, -
                Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]} -> 
              Blank[]) :> ({$CellContext`m1Ind$, $CellContext`m2Ind$, -
                Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]} -> $CellContext`v$)}]; \
$CellContext`returnAlteredKarrayOriginElement[
            Pattern[$CellContext`kA, 
             Blank[List]], 
            Pattern[$CellContext`m1Ind, 
             Blank[Integer]], 
            Pattern[$CellContext`moInd, 
             Blank[Integer]], 
            Pattern[$CellContext`v, 
             Blank[]]] := 
          Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
               Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
            ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
               Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]; \
$CellContext`selectVFromKarray[
            Pattern[$CellContext`kA$, 
             Blank[List]], 
            Pattern[$CellContext`m1Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`m2Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`ni$, 
             Blank[Integer]]] := 
          ReplaceAll[{$CellContext`m1Ind$, $CellContext`m2Ind$, 
             
             Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]}, $CellContext`kA$]; $CellContext`selectOriginVFromKarray[
            Pattern[$CellContext`kA, 
             Blank[List]], 
            Pattern[$CellContext`m1Ind, 
             Blank[Integer]], 
            Pattern[$CellContext`moInd, 
             Blank[Integer]]] := ReplaceAll[
            Append[
             Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
             0}], $CellContext`kA]; \
$CellContext`returnKarrayForAdditionalMassIndex[
            Pattern[$CellContext`kA, 
             Blank[List]], 
            Pattern[$CellContext`nmNew, 
             Blank[Integer]]] := 
          Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
               Map[$CellContext`constructKArrayElements[
                 Part[#, 1], 
                 Part[#, 2]]& , 
                Select[
                 Flatten[
                  
                  Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
                 Max[#] == $CellContext`nmNew& ]], 2]; 
            Flatten[{$CellContext`kA, $CellContext`k2}, 
              1]]; $CellContext`resetLatticeVectorsIfAngleTooSmall[
            Pattern[$CellContext`uLoc$, 
             Blank[List]], 
            Pattern[$CellContext`minAngle$, 
             Blank[]]] := Module[{$CellContext`t$}, $CellContext`t$ = Abs[
               ArcCos[
                Dot[
                 Normalize[
                  Part[$CellContext`uLoc$, 1]], 
                 Normalize[
                  Part[$CellContext`uLoc$, 2]]]]]; $CellContext`t$ = 
             If[$CellContext`t$ > Pi/2, 
               Pi - $CellContext`t$, $CellContext`t$]; 
            If[$CellContext`t$ < $CellContext`minAngle$, \
$CellContext`glConstLocDefault$$, {
               Part[$CellContext`uLoc$, 1], 
               Part[$CellContext`uLoc$, 2]}]]; $CellContext`locDependent[
            Pattern[$CellContext`uLoc$, 
             Blank[List]], 
            Pattern[$CellContext`numMasses$, 
             Blank[Integer]], 
            Pattern[$CellContext`rma$, 
             Blank[List]]] := 
          Module[{$CellContext`m$, $CellContext`latticeBasis$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`reciprocalBasis$, \
$CellContext`mObliqueComponents$, $CellContext`mPosFirstCell$, \
$CellContext`reciprocalNorms$}, $CellContext`latticeBasis$ = 
             Take[$CellContext`uLoc$, 2]; $CellContext`m$ = 
             Drop[$CellContext`uLoc$, 
               2]; $CellContext`numberLatticeLinesToDisplay$ = Map[Ceiling[
                Abs[$CellContext`glConstWindowHalfWidth$$/Part[
                  Part[$CellContext`latticeBasis$, #], #]]]& , 
               Range[
               2]]; $CellContext`reciprocalBasis$ = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis$]; \
$CellContext`reciprocalNorms$ = Map[Norm[
                Part[$CellContext`reciprocalBasis$, #]]& , 
               Range[2]]; $CellContext`mObliqueComponents$ = Table[
               Dot[
                Part[$CellContext`m$, $CellContext`i], 
                
                Part[$CellContext`reciprocalBasis$, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses$}, {$CellContext`j, 
                2}]; $CellContext`mPosFirstCell$ = 
             Map[Part[$CellContext`m$, #] - Dot[
                Floor[
                 
                 Part[$CellContext`mObliqueComponents$, #]], \
$CellContext`latticeBasis$]& , 
               Range[$CellContext`numMasses$]]; {
             "mScalarArray" -> $CellContext`rma$, 
              "numberOfMasses" -> $CellContext`numMasses$, 
              "latticeBasis" -> $CellContext`latticeBasis$, "latticeNorms" -> 
              Map[Norm[
                 Part[$CellContext`latticeBasis$, #]]& , 
                Range[2]], "latticeUnitVectors" -> Map[Normalize[
                 Part[$CellContext`latticeBasis$, #]]& , 
                Range[2]], 
              "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay$, 
              "reciprocalBasis" -> $CellContext`reciprocalBasis$, 
              "reciprocalNorms" -> $CellContext`reciprocalNorms$, 
              "qMaxVec" -> (2 Pi) $CellContext`reciprocalNorms$, 
              "mObliqueComponents" -> $CellContext`mObliqueComponents$, 
              "mPosFirstCell" -> $CellContext`mPosFirstCell$, 
              "pointsDataTable" -> Map[$CellContext`pointsTable[
                 
                 Part[$CellContext`mPosFirstCell$, #], \
$CellContext`latticeBasis$, $CellContext`numberLatticeLinesToDisplay$]& , 
                Range[$CellContext`numMasses$]], "lineTable" -> 
              Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay$, $CellContext`latticeBasis$, #]& , 
                Permutations[{1, 2}]]}]; $CellContext`projOpU[
            Pattern[$CellContext`v, 
             Blank[List]]] := {{
            Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
             Part[$CellContext`v, 2]}, {
            Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
             Part[$CellContext`v, 2]^2}}; $CellContext`projOp[
            Pattern[$CellContext`v, 
             Blank[List]]] := $CellContext`projOpU[$CellContext`v]/
           Dot[$CellContext`v, $CellContext`v]; \
$CellContext`relativeDifferences[
            Pattern[$CellContext`r, 
             Blank[List]], 
            Pattern[$CellContext`mp, 
             Blank[List]], {
             Pattern[$CellContext`mIndex1, 
              Blank[Integer]], 
             Pattern[$CellContext`mIndex2, 
              Blank[Integer]], 
             Pattern[$CellContext`n, 
              Blank[List]]}] := 
          Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
             Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
             Part[$CellContext`mp, $CellContext`mIndex2] + 
              Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
             Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}]; \
$CellContext`calculateCouplings[
            Pattern[$CellContext`ld, 
             Blank[List]], 
            Pattern[$CellContext`kA, 
             Blank[List]]] := 
          Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
             ReplaceAll[{
               "latticeBasis", "mPosFirstCell", 
                "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
             Map[Append[#, 
                $CellContext`relativeDifferences[$CellContext`r, \
$CellContext`mp, 
                 First[#]]]& , 
               ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
             Map[Flatten[{
                 Part[#, 1], {
                  Part[#, 2]}, 
                 Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
               Sort[
                
                Select[$CellContext`t, And[
                 Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
                Part[#, 5] < 
                Part[#2, 
                  5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
             Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
             Flatten[{$CellContext`t2, 
                Map[Flatten[{{
                    Part[#, 2], 
                    Part[#, 1]}, 
                   Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
             Table[
               Sort[
                Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
                Part[#, 5] < 
                Part[#2, 
                  5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}]; $CellContext`spScaled[{
             Pattern[$CellContext`s1, 
              Blank[List]], 
             Pattern[$CellContext`s2, 
              Blank[List]]}, 
            Pattern[$CellContext`scaleKValue, 
             Blank[]], 
            Pattern[$CellContext`referenceSepSquared, 
             Blank[]]] := 
          Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
              Ceiling[(12 $CellContext`scaleKValue) 
               Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]]; \
$CellContext`plotSprings[
            Pattern[$CellContext`uLoc$, 
             Blank[List]], 
            Pattern[$CellContext`ld$, 
             Blank[List]], 
            Pattern[$CellContext`cd$, 
             Blank[List]], 
            Pattern[$CellContext`m1Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`m2Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`moInd$, 
             Blank[Integer]]] := 
          Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
             Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
             Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
             Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
             Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
              Dot[$CellContext`bLoc$, $CellContext`bLoc$]; \
{$CellContext`mLoc$, $CellContext`reciprocalBasis$, \
$CellContext`pointsDataTable$, $CellContext`numberLatticeLinesToDisplay$, \
$CellContext`lines$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
                "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
                "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
               Pattern[$CellContext`n$, 
                Blank[Integer]]] := {
               $CellContext`massColors[$CellContext`n$], Null, 
               PointSize[
                
                Sqrt[(Part[$CellContext`mScalarArray$, \
$CellContext`n$]/$CellContext`glConstMMax$$)/500]], 
               Map[Point[#]& , 
                Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
               Text[
                $CellContext`massLabel[$CellContext`n$], 
                Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack$$]}; $CellContext`cOrigin$ = Select[
               Part[
                Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
               Take[#, 
                 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
               Part[
                Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
               Take[#, 
                 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
                $CellContext`spScaled[
                 Take[#, {6, 7}], 
                 Part[#, 
                   4]/$CellContext`glConstKMax$$, $CellContext`scaleLoc$], 
                AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                  
                  Part[#, 
                   3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
              AppendTo[$CellContext`g$, 
               Map[ListLinePlot[
                 $CellContext`spScaled[
                  Take[#, {6, 7}], 
                  Part[#, 
                    4]/$CellContext`glConstKMax$$, $CellContext`scaleLoc$], 
                 AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                   
                   Part[#, 
                    3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
               Graphics[
                Flatten[{{$CellContext`lines$, Blue, 
                   Map[Arrow[{{0, 0}, 
                    Part[$CellContext`reciprocalBasis$, #]}]& , 
                    Range[2]], Thick, 
                   Arrowheads[0.05], Red, 
                   Map[Arrow[{{0, 0}, 
                    Part[$CellContext`latticeBasis$, #]}]& , 
                    Range[2]], 
                   Text[
                    OverVector[
                    "a"], $CellContext`aLoc$/
                    2 + $CellContext`glConstTextDisplayOffsetHack$$], 
                   Text[
                    OverVector[
                    "b"], $CellContext`bLoc$/
                    2 + $CellContext`glConstTextDisplayOffsetHack$$]}, 
                  Map[$CellContext`pointsList$[#]& , 
                   Range[$CellContext`numberOfMasses$]]}], 
                PlotRange -> {{(-$CellContext`glConstWindowHalfWidth$$)/
                   2, $CellContext`glConstWindowHalfWidth$$}, \
{(-$CellContext`glConstWindowHalfWidth$$)/
                   2, $CellContext`glConstWindowHalfWidth$$}}, 
                ImageSize -> $CellContext`glConstPrimaryDisplaySize$$], \
$CellContext`g$}]]; $CellContext`oneTermOfdynamicsMatrix[{
             Pattern[$CellContext`k, 
              Blank[Integer]], 
             Pattern[$CellContext`j, 
              Blank[Integer]], 
             Pattern[$CellContext`mVec, 
              Blank[List]], 
             Pattern[$CellContext`kS, 
              Blank[]], 
             Blank[], 
             Blank[], 
             Blank[], 
             Pattern[$CellContext`proj, 
              Blank[List]]}, 
            Pattern[$CellContext`r, 
             Blank[List]], 
            Pattern[$CellContext`mk, 
             Blank[]], 
            Pattern[$CellContext`epsilon, 
             Blank[List]], 
            Pattern[$CellContext`mA, 
             Blank[List]]] := $CellContext`kS 
           Dot[$CellContext`proj, 
             Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
             Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
                  Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
              Sqrt[$CellContext`mk 
               Part[$CellContext`mA, $CellContext`j]])]; \
$CellContext`dynamicsMatrix[
            Pattern[$CellContext`ld, 
             Blank[List]], 
            Pattern[$CellContext`cd, 
             Blank[List]]] := 
          Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
               Sort[
                Flatten[$CellContext`cd, 2]], 
               First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
             ReplaceAll[{
               "latticeBasis", "mScalarArray", 
                "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
             Partition[
               IdentityMatrix[2 $CellContext`numberOfMasses], 
               2]; $CellContext`res = Partition[
               Flatten[
                Table[
                 Total[
                  Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                    
                    Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                   
                   Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
               2 $CellContext`numberOfMasses]; 
            ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ]; \
$CellContext`calcDynamics[
            Pattern[$CellContext`mAtQ, 
             Blank[List]]] := Map[{
             Sqrt[
              Part[#, 1]], 
             Part[#, 2]}& , 
            Transpose[
             Eigensystem[$CellContext`mAtQ]]]; $CellContext`showDynamics[
            Pattern[$CellContext`ld$, 
             Blank[List]], 
            Pattern[$CellContext`dynAtOmegaIndex$, 
             Blank[List]], 
            Pattern[$CellContext`sc$, 
             Blank[]], 
            Pattern[$CellContext`ql$, 
             Blank[]]] := 
          Module[{$CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`e$, \
$CellContext`omega$, $CellContext`points$, $CellContext`lines$, \
$CellContext`nu$, $CellContext`a$, $CellContext`b$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, {{$CellContext`a$, \
$CellContext`b$}, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "latticeBasis", "pointsDataTable", 
                "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
                "numberOfMasses"}, $CellContext`ld$]; {$CellContext`omega$, \
$CellContext`e$} = $CellContext`dynAtOmegaIndex$; $CellContext`e$ = 
             Partition[$CellContext`e$, 2]; $CellContext`points$ = 
             Table[Part[$CellContext`pointsDataTable$, $CellContext`k] + 
               Table[$CellContext`sc$ 
                 Re[Part[$CellContext`e$, $CellContext`k] 
                   E^(I (Dot[$CellContext`ql$, $CellContext`a$ $CellContext`i + \
$CellContext`b$ $CellContext`j] - $CellContext`omega$ #))], {$CellContext`i, -
                  Part[$CellContext`numberLatticeLinesToDisplay$, 1], 
                  
                  Part[$CellContext`numberLatticeLinesToDisplay$, 
                   1]}, {$CellContext`j, -
                  Part[$CellContext`numberLatticeLinesToDisplay$, 2], 
                  
                  Part[$CellContext`numberLatticeLinesToDisplay$, 
                   2]}]& , {$CellContext`k, $CellContext`numberOfMasses$}]; \
$CellContext`nu$ = (2 Pi) 
              If[$CellContext`omega$ == 0, 1, 1/$CellContext`omega$]; Show[{
               Table[
                ListPlot[
                 
                 Part[$CellContext`points$, $CellContext`k][$CellContext`nu$ \
#], PlotRange -> {{(-$CellContext`glConstWindowHalfWidth$$)/
                    2, $CellContext`glConstWindowHalfWidth$$}, \
{(-$CellContext`glConstWindowHalfWidth$$)/
                    2, $CellContext`glConstWindowHalfWidth$$}}, 
                 ImageSize -> $CellContext`glConstPrimaryDisplaySize$$, 
                 PlotStyle -> Directive[
                   PointSize[
                    
                    Sqrt[(Part[$CellContext`mScalarArray$, \
$CellContext`k]/$CellContext`glConstMMax$$)/350]], 
                   $CellContext`massColors[$CellContext`k]]], \
{$CellContext`k, $CellContext`numberOfMasses$}], 
               
               Graphics[{$CellContext`lines$}]}]& ]; \
$CellContext`frequencyPlotCalc[
            Pattern[$CellContext`ld$, 
             Blank[List]], 
            Pattern[$CellContext`m$, 
             Blank[]], 
            Pattern[$CellContext`meshSz$, 
             Blank[Integer]]] := 
          Module[{$CellContext`eigTable2D$, $CellContext`eigTable1D$, \
$CellContext`qMax$, $CellContext`omegaPointList2D$, \
$CellContext`omegaPointList1D$, $CellContext`range$, \
$CellContext`numberOfMasses$}, {$CellContext`qMax$, \
$CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "qMaxVec", 
                "numberOfMasses"}, $CellContext`ld$]; \
$CellContext`eigTable2D$ = Flatten[
               Re[
                Table[{{$CellContext`qx, $CellContext`qy}, 
                  Eigenvalues[
                   N[
                    $CellContext`m$[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, (-Part[$CellContext`qMax$, 1])/2, 
                  Part[$CellContext`qMax$, 1]/2, 
                  Part[$CellContext`qMax$, 
                    1]/$CellContext`meshSz$}, {$CellContext`qy, (-
                   Part[$CellContext`qMax$, 2])/2, 
                  Part[$CellContext`qMax$, 2]/2, 
                  Part[$CellContext`qMax$, 2]/$CellContext`meshSz$}]], 
               1]; $CellContext`omegaPointList2D$[
               Pattern[$CellContext`nn$, 
                Blank[]]] := Map[Flatten[{
                 Part[#, 1], 
                 Part[
                  Sqrt[
                   
                   Part[#, 
                    2]], $CellContext`nn$]}]& , $CellContext`eigTable2D$]; \
$CellContext`range$ = Range[2 $CellContext`numberOfMasses$]; ListPlot3D[
              Map[$CellContext`omegaPointList2D$[#]& , $CellContext`range$], 
              PlotRange -> Full, 
              ImageSize -> $CellContext`glConstPrimaryDisplaySize$$, 
              AxesLabel -> {
               "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
                "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]]; \
$CellContext`showFreqPlot[
            Pattern[$CellContext`qpl, 
             Blank[List]], 
            Pattern[$CellContext`freqPlotData, 
             Blank[]]] := 
          Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
               Graphics3D[
                Polygon[{{
                   Part[$CellContext`aa, 1], 
                   Part[$CellContext`aa, 2], 0}, {
                   Part[$CellContext`bb, 1], 
                   Part[$CellContext`bb, 2], 0}, {
                   Part[$CellContext`bb, 1], 
                   Part[$CellContext`bb, 2], 23}, {
                   Part[$CellContext`aa, 1], 
                   Part[$CellContext`aa, 2], 
                   23}}]]}]]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; Null}}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.600991920019863*^9, 3.6009919670395527`*^9}, {
   3.6009920245298405`*^9, 3.6009920501333055`*^9}, 3.60099313594541*^9, {
   3.600993187449356*^9, 3.600993239845353*^9}, {3.6009932797776365`*^9, 
   3.6009933046760607`*^9}, {3.6012440341096554`*^9, 3.6012440721578317`*^9}, 
   3.6012447781242104`*^9, {3.6012448176024685`*^9, 3.6012448561326723`*^9}, 
   3.6012449730663605`*^9, {3.6012450799064713`*^9, 3.601245088751977*^9}, {
   3.601245122802925*^9, 3.6012451299813356`*^9}, {3.6012451718047276`*^9, 
   3.601245397972664*^9}, {3.6012467859190493`*^9, 3.6012468229691687`*^9}, {
   3.601246896213358*^9, 3.6012470488980913`*^9}, {3.6012470802998877`*^9, 
   3.601247087356291*^9}, {3.6012476034298086`*^9, 3.601247625026044*^9}, {
   3.6012477383525257`*^9, 3.6012477482580924`*^9}, {3.6012479226070642`*^9, 
   3.6012479616512976`*^9}, 3.6012480156453857`*^9, {3.6013815489528093`*^9, 
   3.6013815749782977`*^9}, 3.6013816959272156`*^9, 3.6013818936795263`*^9, 
   3.601381933169785*^9, 3.6013820135453825`*^9},
 CellID->663844757]
}, Open  ]],

Cell[BoxData["\[AliasDelimiter]"], "Input",
 CellChangeTimes->{3.601245184099431*^9},
 CellID->534877709]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell["\<\
A lattice of atoms can be modelled as harmonic oscillators, with forces \
proportional to the displacements of the atoms from equilibrium positions. \
The simplest such model introduces coupling for only the nearest neighbor \
atoms. In this demonstration, a lattice cell containing 1-5 atoms is \
modelled, with nearest neighbor harmonic coupling to the mass(es) in each \
nearby cell. Normal mode solutions to these equations of motion are plotted. \
Controls are provided to alter the coupling \"spring constants\" and other \
free parameters, as well as controls to select from the reciprocal space \
vectors, and angular frequencies associated with the normal mode solutions. A \
time control is also provided to display changes of the lattice through one \
period of the lattice vibration.  A plot of the dispersion relation, showing \
the angular velocities associated with each reciprocal vector is also \
provided.\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.6008873855675645`*^9, {3.601208787872481*^9, 3.601208804510481*^9}, {
   3.601209090380548*^9, 3.601209091209631*^9}, {3.6013823516277194`*^9, 
   3.601382454828622*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    True, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}}, {{
       2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}, {{
       3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}, {
       3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}}, {{{
       1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
        0.09999999999999987}, {{
        0.19999999999999987`, -0.3999999999999999}, {-0.3999999999999999, 
        0.8}}}, {
       1, 2, {-1, 0}, 0.25, 1., {0.9, 0.7}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       1, 2, {-1, 1}, 0.25, 1.6899999999999995`, {0.9, 0.7}, {
        2.1999999999999997`, 0.7}, {{0.9999999999999999, 0.}, {0., 0.}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 3, {0, -1}, 0.25, 2.2600000000000002`, {0.9, 
        0.7}, {-0.5999999999999999, 0.5999999999999999}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       1, 3, {1, -1}, 0.25, 3.3999999999999995`, {0.9, 
        0.7}, {-0.4999999999999998, 1.9}, {{
        0.5764705882352942, -0.4941176470588236}, {-0.4941176470588236, 
        0.423529411764706}}}, {
       1, 2, {1, 0}, 0.25, 3.4000000000000004`, {0.9, 0.7}, {0.5, 2.5}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 2, {0, 1}, 0.25, 3.65, {0.9, 0.7}, {2.3, 2.}, {{0.5369863013698629, 
        0.4986301369863013}, {0.4986301369863013, 0.463013698630137}}}, {
       1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 2.7}, {{
        0.05882352941176473, 0.23529411764705888`}, {0.23529411764705888`, 
        0.9411764705882353}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 3, {-1, -1}, 0.25, 4.520000000000001, {0.9, 
        0.7}, {-0.7, -0.7000000000000002}, {{0.5663716814159291, 
        0.49557522123893794`}, {0.49557522123893794`, 
        0.43362831858407075`}}}, {
       1, 3, {-1, 1}, 0.25, 4.879999999999999, {0.9, 0.7}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       1, 2, {0, -1}, 0.25, 5.85, {0.9, 0.7}, {-1.5, 0.3999999999999999}, {{
        0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
        0.015384615384615389`}}}, {
       1, 2, {1, -1}, 0.25, 6.289999999999999, {0.9, 0.7}, {-1.4, 1.7}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       1, 3, {0, 1}, 0.25, 7.540000000000002, {0.9, 0.7}, {3.2, 2.2}, {{
        0.7015915119363394, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 2, {-1, -1}, 0.25, 8.81, {0.9, 0.7}, {-1.6, -0.9000000000000001}, {{
        0.7094211123723042, 0.4540295119182747}, {0.4540295119182747, 
        0.29057888762769585`}}}, {
       1, 2, {1, 1}, 0.25, 9.009999999999998, {0.9, 0.7}, {2.4, 3.3}, {{
        0.24972253052164267`, 0.4328523862375139}, {0.4328523862375139, 
        0.7502774694783573}}}, {
       1, 3, {1, 1}, 0.25, 13.599999999999998`, {0.9, 0.7}, {3.3, 3.5}, {{
        0.423529411764706, 0.4941176470588236}, {0.4941176470588236, 
        0.5764705882352942}}}}, {{
       2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       2, 3, {1, -1}, 0.25, 1.2999999999999996`, {0.4, 
        1.2}, {-0.4999999999999998, 1.9}, {{
        0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
        0.376923076923077}}}, {
       2, 3, {0, -1}, 0.25, 1.3599999999999999`, {0.4, 
        1.2}, {-0.5999999999999999, 0.5999999999999999}, {{0.7352941176470588,
         0.44117647058823534`}, {0.44117647058823534`, 
        0.2647058823529413}}}, {
       2, 1, {1, -1}, 0.25, 1.6899999999999995`, {0.4, 
        1.2}, {-0.8999999999999998, 1.2}, {{0.9999999999999999, 0.}, {0., 
        0.}}}, {2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
        2.5}, {{0.005882352941176467, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 0.09999999999999987}, {{
        0.34594594594594585`, -0.4756756756756756}, {-0.4756756756756756, 
        0.654054054054054}}}, {
       2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
        1.4000000000000001`, 2.7}, {{0.3076923076923076, 
        0.46153846153846145`}, {0.46153846153846145`, 0.6923076923076924}}}, {
       2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
        0.8, -0.6000000000000001}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {-1.4, 1.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {
        2.1999999999999997`, 0.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {0, -1}, 0.25, 3.65, {0.4, 
        1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
        0.463013698630137}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 0.3999999999999999}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 3, {-1, -1}, 0.25, 4.82, {0.4, 1.2}, {-0.7, -0.7000000000000002}, {{
        0.25103734439834025`, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{0.9846153846153846,
         0.1230769230769231}, {0.1230769230769231, 0.015384615384615389`}}}, {
       2, 1, {-1, 1}, 0.25, 6.289999999999999, {0.4, 1.2}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       2, 3, {-1, 1}, 0.25, 7.379999999999998, {0.4, 1.2}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9878048780487806, -0.10975609756097565`}, {-0.10975609756097565`, 
        0.01219512195121952}}}, {
       2, 2, {1, 1}, 0.25, 8.409999999999998, {0.4, 1.2}, {2.4, 3.3}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {0.4, 1.2}, {-1.6, -0.9000000000000001}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 1, {1, 1}, 0.25, 8.809999999999999, {0.4, 1.2}, {2.9, 2.8}, {{
        0.7094211123723043, 0.4540295119182747}, {0.4540295119182747, 
        0.2905788876276958}}}, {
       2, 3, {0, 1}, 0.25, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
        0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570139`}}}, {
       2, 1, {-1, -1}, 0.25, 9.010000000000002, {0.4, 
        1.2}, {-1.1, -1.4000000000000001`}, {{0.24972253052164256`, 
        0.4328523862375138}, {0.4328523862375138, 0.7502774694783573}}}, {
       2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{0.6138686131386862,
         0.48686131386861314`}, {0.48686131386861314`, 
        0.3861313868613139}}}}, {{
       3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
        0.19999999999999998`, -0.39999999999999997`}, {-0.39999999999999997`, 
        0.7999999999999999}}}, {
       3, 2, {-1, 1}, 0.25, 1.2999999999999994`, {1.3, 1.4}, {
        2.1999999999999997`, 0.7}, {{
        0.6230769230769229, -0.48461538461538467`}, {-0.48461538461538467`, 
        0.3769230769230771}}}, {
       3, 2, {0, 1}, 0.25, 1.3599999999999997`, {1.3, 1.4}, {2.3, 2.}, {{
        0.7352941176470587, 0.4411764705882354}, {0.4411764705882354, 
        0.2647058823529413}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
        1.4000000000000001`, 2.7}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
        0.09999999999999987}, {{0.00588235294117648, 0.07647058823529418}, {
        0.07647058823529418, 0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 2.5}, {{
        0.34594594594594597`, -0.47567567567567565`}, {-0.47567567567567565`, 
        0.654054054054054}}}, {
       3, 1, {0, 1}, 0.25, 2.26, {1.3, 1.4}, {2.8, 1.5}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.3076923076923077, 
        0.46153846153846156`}, {0.46153846153846156`, 0.6923076923076923}}}, {
       3, 1, {-1, 1}, 0.25, 3.399999999999999, {1.3, 1.4}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.576470588235294, -0.4941176470588235}, {-0.4941176470588235, 
        0.423529411764706}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.3, 
        1.4}, {-0.4999999999999998, 1.9}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999984`, {1.3, 1.4}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9283667621776505, -0.25787965616045855`}, {-0.25787965616045855`, 
        0.07163323782234961}}}, {
       3, 3, {0, 1}, 0.25, 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
        0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.3, 1.4}, {-0.5999999999999999, 
        0.5999999999999999}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {0.8, -0.6000000000000001}, {{
        0.058823529411764705`, 0.23529411764705882`}, {0.23529411764705882`, 
        0.9411764705882353}}}, {
       3, 1, {1, 1}, 0.25, 4.52, {1.3, 1.4}, {2.9, 2.8}, {{0.5663716814159292,
         0.49557522123893805`}, {0.49557522123893805`, 
        0.43362831858407075`}}}, {
       3, 2, {1, 1}, 0.25, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
        0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       3, 1, {1, -1}, 0.25, 4.879999999999999, {1.3, 
        1.4}, {-0.8999999999999998, 1.2}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       3, 2, {1, -1}, 0.25, 7.380000000000001, {1.3, 1.4}, {-1.4, 1.7}, {{
        0.9878048780487805, -0.10975609756097562`}, {-0.10975609756097562`, 
        0.012195121951219514`}}}, {
       3, 1, {0, -1}, 0.25, 7.539999999999999, {1.3, 
        1.4}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7015915119363395, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{0.4756242568370986,
         0.49940546967895355`}, {0.49940546967895355`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.3, 1.4}, {-0.7, -0.7000000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 2, {0, -1}, 0.25, 8.84, {1.3, 1.4}, {-1.5, 0.3999999999999999}, {{
        0.8868778280542985, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570136`}}}, {
       3, 1, {-1, -1}, 0.25, 13.600000000000001`, {1.3, 
        1.4}, {-1.1, -1.4000000000000001`}, {{0.42352941176470593`, 
        0.4941176470588235}, {0.4941176470588235, 0.576470588235294}}}, {
       3, 2, {-1, -1}, 0.25, 13.700000000000001`, {1.3, 
        1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
        0.4868613138686131}, {0.4868613138686131, 
        0.38613138686131376`}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.6790602328891914, 9.230900003615161*^-19], {
       Complex[0.7248589832535917, 0.], 
       Complex[0.650064949116095, -0.020858686170711016`], 
       Complex[0.11988513411713456`, -0.0981715969681187], 
       Complex[0.15160623794564831`, -0.028647866526790612`], 
       Complex[-0.002472802788942547, -0.01713913715451654], 
       Complex[0.05556524411678816, 0.01890267003822048]}}, {
      Complex[0.5524636587025472, -7.594543271602355*^-18], {
       Complex[-0.38354558530686395`, 0.09744499810272776], 
       Complex[0.1619813466218059, -0.23832737428749207`], 
       Complex[0.6766558452199941, 0.], 
       Complex[0.5279467930943094, 0.011722985858567875`], 
       Complex[-0.0019794387381373065`, 0.0612963317654061], 
       Complex[0.14074635807044672`, 0.0077645969691057665`]}}, {
      Complex[0.5222542056555272, 7.39373223091693*^-18], {
       Complex[-0.5047764091042254, 0.08027140607893792], 
       Complex[0.6076266586520926, 0.], 
       Complex[-0.41722429897453955`, -0.26584428115246467`], 
       Complex[-0.11870218623554862`, 0.011771602360776734`], 
       Complex[0.10106066627579662`, 0.15510216234064736`], 
       Complex[0.24672133224192438`, 0.12420825231706026`]}}, {
      Complex[0.47798270089481093`, 1.705186367657685*^-17], {
       Complex[0.11776747404882068`, -0.17021352942962187`], 
       Complex[-0.19349636076477256`, 0.18545691772731276`], 
       Complex[-0.005098087736675982, 0.0481703582836023], 
       Complex[0.12443545522518613`, -0.04846883240430583], 
       Complex[0.7520021001235273, 0.], 
       Complex[0.5450959458974042, 0.050065292585647264`]}}, {
      Complex[0.4208599945029234, 1.7181192359807767`*^-17], {
       Complex[0.046412084869462106`, -0.0633132278362492], 
       Complex[-0.15001494768060744`, 0.1368626263531111], 
       Complex[-0.49457449633790096`, -0.020339968952328036`], 
       Complex[0.7465187765334863, 0.], 
       Complex[-0.3425167147633056, -0.05320301419822421], 
       Complex[0.17190685158210708`, -0.02435844462026826]}}, {
      Complex[0.3371723422003491, 1.2680207595331082`*^-17], {
       Complex[0.08250671501222374, 0.03036710231625256], 
       Complex[-0.10759757386702096`, -0.00917692568070801], 
       Complex[0.15992951319705684`, 0.020880420200147097`], 
       Complex[-0.32856173648033754`, 0.004931060374980048], 
       Complex[-0.5245849484304596, 0.028709761501831688`], 
       Complex[0.7553839007471159, 0.]}}}, $CellContext`dynPlot$$ = Show[{
      Table[
       ListPlot[
        Part[$CellContext`points$1374, $CellContext`k][$CellContext`nu$1374 \
#], PlotRange -> {{(-$CellContext`glConstWindowHalfWidth$$)/
           2, $CellContext`glConstWindowHalfWidth$$}, \
{(-$CellContext`glConstWindowHalfWidth$$)/
           2, $CellContext`glConstWindowHalfWidth$$}}, 
        ImageSize -> $CellContext`glConstPrimaryDisplaySize$$, PlotStyle -> 
        Directive[
          PointSize[
           
           Sqrt[(Part[$CellContext`mScalarArray$1374, \
$CellContext`k]/$CellContext`glConstMMax$$)/350]], 
          $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$1374}], 
      Graphics[{$CellContext`lines$1374}]}]& , $CellContext`dynTab$$ = 
    1, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyEvXd01MX7/h1QkBKk9yJdqdIhENjQQpVOqEqo0hNakCZFBKkB6VU6SJMq
iIEldAk1nZDN7oYkSO8lJODj8+G+Ztnr/np++Ydz5syZnX7N9eI9c5fqF9Bp
YEYPDw/P3B4eH/37b6fiG3//a0+mk+1W3nydPizN6nXip1nxx5ItSK9/YMux
t4ueW6OzNghquiLJ4p7/nvUrr7E7dj24ZdI7/C/9pvXO+klPy59zpXvI36Ij
iQc3P1X5LYM3rK48cY6r/Lbvy7fU8m/48uQeVR9L9wv5h1uGp1B90iwXW4eV
3ZQ7xfIu6nXLbk08TLuKTvhkzrunSSYd7UoLqlJ7+KIkyn/PeueddcqkcFc6
2hX2POfyBqHJJh3tCj/VaszwMrc5v+VN4YYhG5+70tGu+U831mn7w22uj2WZ
X+96g+qq+ltKfOwYWfQL9MMLK9p1zpr/5d93kkw62nVlUt/T9X7i/Pescw92
7vvVlRSTjnY9GO1fZuvV2yYd7fJt+Hr41i23Ob+lzy8ta1Qd7ioH7aq/PuHA
5CrJXB/LqF3VrvRbnsT1t+R7fWB9u1+SLB3+l55s2nXw+5iwpr8km3S0a3Ol
jMPutU+h/Pes9mEe1U9VcKWjXVd6D/QamctVDtrV8NTugTUqJnF+y5Kx61f8
duWWSUe7fp4z/vX487e4Ppb0XXe9TpRQ9bf41ew2ZV2eZAt+D+0689upCWGf
pJh0tGvj8lc199Xg/Pesi1uPP5+pfJJJR7vmZ2/fsfSBWyYdf4+qrHiZa+kt
zm/h/GhXMJWPdv3f9UmzoP7SXgvahfYiHe2i/rGYdrn3pwXtov43v0/jhfwW
Gl8L2mVznw+oj4XmD+pvwXzr8n5+mnbllfmJdLRrtMxn9/z3rJj/SEe7/GW9
IB3t+krWF+W3PJL1iHS0a6GsX6qPJUzWO9Xfclb2B9lPfNAu7CdIR7to//FB
u4Ld9ysftIv2N5//2A+R30L7pw/a9bf7fov6WGh/Rv0t2M9l/zftwv6PdLSL
9MK0q667vph2kR6ZdpF+mXaR3pl2dXTXR9Mu0lPTLtZftOtO/zbNLuxxKl1u
8Lzk5A55nUqXO5XY8v2XxxxKlwO+LVY+eJ9D6XL273zPZAxX+S1Ncm4/693I
qXR5VrMF3xy7pepjyVOz8N0fSiQqXX5kb7R55zOn0mWfCjMD9n/rVLpcfM7S
avMncP571vN1ju//fZ9T6fI8/zd9h+dOVLq84kDWlj/0T1S6fOHql0O8pyQq
Xe5RfcfTb/olKl2uP3nID4eyJypdrnxjUNcxc51Kl6OfeqZe7eZUupyzx6Iz
3ayc/541JMfZHTXqJipdfvyy8/XsoxOVLnsdTdyUf5zKb4lpPOj+8UaJSpcP
vkyMWBin6mOZWanWtD91/S2dR+Vvnn+YU+ly7qgpa2NOOJUup+3YXn7dp4lK
l2tnu7pg8gfpaFeFtC3PHUudSpfHhOadUvuVQ+nyuPbBXeb87lC6XKLb37uH
7XQoXc5XpH3ewlcdSpcfxnRMi/7GqXS5XKfOaQ/vOJUuJ79YE9VhKee/Z/1x
UqUS5+MdSpd71m/XJXWOQ+nysVcjTtYer/JbOD/axeWjXf93fdIsqD/rMtrL
ukz9Y/SrlHt/Gv2i/je/T+Nl9IvG1+iXl/t8MPpF88foF+Yb63J7mZ+syz/I
fGZdPiTzn3U5VtYL67K3rC/WZaxH1mWrrF/W5Vyy3lmXsT+wLmM/YV2m/cfo
V1f3/croF+1vRr9oPzT6Rfun0a9z7vut0S/an41+YT9nXcb+z7pMemHaNdVd
X0y7SI9Mu0i/TLtI70y7Orvro2kX6alpF+sv2jVu629j2v3uULp8c2qZKjPr
OZQu55ywI329j13pctjsngVTBicoXd4wedpV+3Ob0uVJOXte/ypTgtLlAdl/
ST56L0Hp8vz2/vdX9LQrXa4UFDh6QQW70uV+JXcGFP5M6/KpoJIRDVY4lC5X
yVLkQrrFoXQ5cMzd73/+zKF0+VL5VSVXV1T5LY3rx7waV8+hdDn2lxzVP/J2
KF2OcmSePM6L65NmKV7yYNt93g6ly87snkfmVnIoXe6/bPj0wOqc/561Y8US
pybXdihdrtKnR5NDdR1Kl3s1mFshqarKb/EalGNlSjGH0uVfFiTWTy6h6mPZ
2dYeFthT1d9ysJDnwy/+UrpmLeYd9vmBsASly7su5Hyd3tqudLnUxbVpq2rZ
lS6PHNd292z/BKXLW3ds8qgaYVO67P+23sx6nyQoXc6SHDT1+kZVH8vPnrUb
D1/H9UmzJP50vGBMX4fS5cRPv51Qa7ld6XLnDZPXB2S0K12um3fXoi+f2ZQu
H6nn531gvE3p8s47GfK/6aLyWzg/2lWTyke7/u/6/NsuqT/rMtrLukz9Y/TL
070/Xb7Svf/N79N4Gf2i8TX6VdZ9Phj9ovlj9AvzjXX5kMxP1uUdMp9ZlzH/
WZcbyHphXe4t64t1ubKsR9blzrJ+WZcHyHpnXU6U/YF1GfsJ6zLtP0a/brjv
V0a/aH8z+kX7odEv2j+NflV232+NftH+bPQL+znrMvZ/1mXSC9Ouge76YtpF
emTaRfrl4gDuemfalctdH027SE9Nu1h/0a6YbwuHNluhdNDa/OsBp777Il7p
crOILYMr94hVurwy8P7QrLVilC7f779pQY+uMUqXVyUUK/B9rZtKl6dVXRBU
t5RN6XL38tOnBK6wKV3OMmXI3TuPbEqXX3008nLemTaly1WC8u664x+vdLlZ
sz+uTPo2Xuny7WI7h766F690udeVuiG+/jaly/6D8lzOusumdPntX2uKd45X
9bHMLnt0TPVLqv6WEpfLdC/e2aZ0uckdS7235WxKl/9ZPzCX5xrO/+95I+O4
b1sn25Quh1qnvxwQZlO6fKv7xfCbs1V+i8dvO4tc+cKmdNmzWe7hH62IV7rc
vXRY6tMG8UqXk9/l9m+/Ml7p8u9tEgPX59e6nFjc81CDczaly6O2nbANGah0
1tqp7atLvmvjlS6neDW60+N6rNLl4xvrjt3yOFrp8vcTh6Rk6xCjdLlGVOuy
pbvcULq87ceIVi9m25QuD3pccPeda0oHrf1LPz33Nile6XITa7/JK8NjlS6/
SFkyr681WulypyYLLWMPRStd5vxoF5ePdv3f9UmzoP6sy2gv6zL1j9Gvae79
afSL+t/8Po2X0S8aX6Nfo93ng9Evmj9GvzDfWJf/lvnJuuwn85l1OYfMf9bl
j2W9sC5jfbEuW2U9si7XlPXLuvzRL+/XO+tyC9kfFMeW/YR1mfYfo1+v3fcr
o1+0vxn9ov3Q6Bftn0a/mrjvt0a/aH82+oX9nHUZ+7/i2O56Ydo13V1fTLtI
j0y7SL9Mu0jvTLtIH027SE9Nu1h/0a42I8qd+uZRnNLlnOPL1Q7teUPpcq5x
D2fkOxqldHlOnotxxbdFKl3O8+1nnjOTVH6L37N89pq3o5UuW8ZveunTNEbp
8pzo3MsTlscoXb6w7mTPwlExSpd7d3gSs8rvptLl1S2z7Og2NVbp8usW348v
tjxa6fLv284PP70tWulytZobFwdkj1G63OZVv5xjf4pRurwsNP+nCTlilS5f
yfjNliYbuD5plm+79XvQue8Npcsbxi4OiLp5Q+lygWwJS+Zk4/z3rL1vXvmi
zMBYpcshHTd3+DgmRuly0XHb555sF6N0eeaiAsVGhkcrXe63+N3eKROilS5v
PuxzeEJktNLleTVOVTj5WOmatfixjamlY5UOWms+bvXsxW8xSpcDotpWvTks
Runy5dCm/dcUilG63C/4p1fT90crXbZGX8taY0Ck0uW+/WvPXBUcqXR5kb9v
7oIzuT5plk0LM8968uKG0uX1w4r/vKB3jNLloz9cXLv8TrTS5Z6VrVHFTiid
tY7b/rxueolLSn853fy/CZWD+v/fv5tmQT1Zf9Eu1l/qB6NT1G9Gp6ifze/T
uBidonE0OjXSfdyNTtE8MTqFecX6O1fmIevvJpm3rL/9ZZ6z/k6XdcH6W0TW
Eevvn7LuWH+xTll/C8m6Zv3dKPsA6y/2DdZf2meMTtG+ZHSK9jGjU7TvGZ2i
fdLo1Cv3fdXoFO3DRqewb7P+Yp9n/SVdMO1q7K4jpl2kO6ZdpFOmXaRrpl25
3XXQtIt007SLdRbtKh945KsGS6OU/mYodfTPYYOilP4e6Vl1V4o1Qumvn6Pm
wu1xfyn9XXiq1p4abS8o/c10NueNJpcuKv0dn5rpp2vRl5X+7gm8VWpQ0jWl
v+XqPL847ni40t+AO4HefuOilP6W6N4qtV3dKKW/p7KUOLq3WqTS39EHik8+
vzdC6e/5WtvG9f8tQulvmEdcgV4hEUp/E17Wz3I5OULp7+wVl9u0qBOp9LfZ
1+8qVdkRqfT3n/HVe/1+O1Lp74JFlzt2Gc7571kTrvWe4PVPhNLfgccG5F3w
e4TS36e+zXN+skTlt/i0Hn7W54cIpb/f7xy+qfayCKW/3f5ISNiq62/J/vHP
Q/f0iVL6G9qv8qKFiyOU/vodrVX2Scp1pb9LEhbtqLThqtLfI68Wl9q8K0zp
79MFw2o1fHZB6W+GHW22ll1wTulvu/JTa+37+YrS37wR13vcfhSp9DdzLo8z
vt9HKf0tsn1W/7BskUp/T/zp+yzk52tKf4My/9Ure93zSn+PFY5t2eLQEaW/
nI76B1I5qP///btpFtST9RftYv2lfjA61dW934xOUT+b36dxMTpF42h0Kth9
3I1O0TwxOoV5xfqbWeYh628Xmbesv9NlnrP+NpF1wfqLdcT621vWHeuvXdYp
6+9iWdesvxm+e78PsP5i31D+132fMTqV6L4vGZ2ifczoFO17RqdonzQ6ddx9
XzU6Rfuw0Sns26y/2OdZf0kXTLuC3HXEtIt0x7SLdMq0i3TNtCvEXQdNu0g3
TbugsztSL03N9TrjyWblTvaY8u6V9bvGG/8peTbJpFezzCn6fZknVv+ZbyfY
D7nS0d7BPoeiYpYkWdL+12+PzXzw/uWl//Jm+O5Rf++HctA/RYsVWZLX35Xe
4H/lJ1nvXCler2NbVzr6Le6v5s32n+b0MGtVv9Qtj2640tGf1Rsuz5tlXrKl
5f/qE+WqZ8HLm2ZHJFu+onWK7y13DGhV1rtwmrW59M/YibW2rWlovmO0NqDv
md3blWbdWfTC7Ad+rnLQbwMmtJjcydNVDn8XTe2yrKv+tP2YaE6/aaluG/Y8
hyXFlI/x6nV8Ucmeru88rV5cvuRH/3vdmBMw4JorP9LxPbb7uCdZCjZs2KP6
dVc65qH/rwHLZ61MofYmWStG7p90poX5LhS65ipf8mN842se7R14wZWfvwOn
+WkZbet1/ewrrudzS1BOr/Dwjq7y28g8sRfpGvbTBPP9qqR/UL7kx/zx9Cj1
OMsAV36k4/tzWkeWBikTR1S5qOaDZez2qL8S1v6rN9H/Wy/WJjKvfKasbXFi
SbKlm5vuu74zdx+vNOuotQutYx4m0Xi5vrdH+cZfR1QvmOe+q3z+Xh3ld5X5
tmHX6qWbL3F7D3mb9rqPl2VPfJNX31a7zeNlvsNHfWrI/Ix+Vm3i21hXfTrJ
fMB38siPeXg4Z8W/PpmcYvK3o/yoj5fMzyLxC+rmXOyaP61lfuL7Z+THvO3f
8uTYAd3V/DT5UZ+6Mp8HBVTbeTDdVR8p3+qg+mPeJtzutzdroCs/0q/K9+Go
T3WZz4Mnrhs36oBaj6r+hktP9/0haZDaT8y9BtSnj8z/5atnnbmX7ur/9+N7
KqSRfMeO/Jjnp6Z2ujPsNuf38EB+2ictF7r9VMJiT+J90tSH5rOl8Pd/ZT58
S81nc/+i9/t92+or62Xn3Nv/pA7Gue1MiDffU3CbP2lW6JH7/HGtL5SPdVHa
OfnqV6Gu8tU9CPf+tFzd96ZNtTaqP725P829mznPkkYWT+b5YFkq9wtQny9l
vfhkmFzDa6+rPvWoPshv9vObDdJvfe7Kj/SfcZ9C6lNH1suEfP75Iwq76tNS
5tsSuQeB/FgXKXl3dZ04MYn2K9c9FNQH62Vf55Ee9dckmfq0kfrg/gjym++X
avVs3rKvK7+6V+K+n1hmFOnS/0HVJOpPV31oP7Qc2ZVj5qKeSbwfmvsyqE9j
WS/JKVN6VXx4y9SnNdUH+bEuCrwutbeU3ZUf6eb+i/v+b+n/6HS5aZHcnx/c
03Gfz5bD+TN9+jI2ieezyY9zTlNZL+kDtsduK+0653wl8x/53edPmrWBnIvc
54/rfhDKx7poX+pJnSM7kkz5fL8G5WO9NL5epIX/fu6fY97oH5oPllwng54P
PnmL54O5N4T6QF8KL6pbIN8UV306YL7JfHA/B96z5h76yn7i5S06B7ryoz6N
ZL0Et75V9nKIqz5+VB/kN9+NSPnIz/ebUJ96sl4WSvmoT9v/qD/WRU7pH/f2
uu4roT5VZb2gf2g/sfB+gnXRTsaX9kOTH/XxlfWC8XWvv6s+yM/rBfmRjntV
tP9b0mQ+0/6v6o91seDJ/Em1Fqj5bO6Lwb9AXwbIeoR/aUj3qshHWFE++Qiz
vlA+1gX2H5TP97ZQfk9ZL0my/7j3zz5v9A/NBwv2T5oP5j4a6gN9mS77J+pT
l+rj7u/uWZNl/3f3d//qjpxPaD5bDv35eeOnD1z1wXkM9+CQH+uijugXzX+T
H/WxyHr5TvQL9ekp8w3nT+THukgV/UX+DpQf9cF5zCL6S/uDqj/WBc4PtB+a
+32oD85jj7q3mbHzD1d93o/v2ZC2ct5GfqyLM3Iec8/v4YH8tP9bcF6i/d/4
3C3vz2PG/waKv0j/j3ttyN9Y1gvOe8jfRuY/7vERH7BCv4gPmPuMKB/rAufb
dOJIS+U+IPWnJcflqhFzeqZwf3pzf2Jd4HxO88HyUPwg6lNT1ss/7YbMiPFM
MfXpLPN/odxDdO/Pe9YB4i/SiXchP+oDfYG/oPls6oP8WBfwR8jP9zFRHznv
WV+1HFfr+CtXfVpJfYKp/lgXu8XfpROXS5X7lagP9CVS/B3tJ+YeKO2HliPi
T2k/NPlRnwayXjaLP0V9fKU+uO+J/FgXucS/pxM/xD1Q2v8tFvHjtP+b+mx7
7+vNugDnQXoLWRfgALS+rIXE79D6MusF5WCeg2NQP1hyFJ45/fGBFO4HyyW5
x0rjaEkQrkLjaPLjd2UcrWOFq7i399/5LJwH5cs+bKkinAflY96GUX0wP72F
OyE/0vG+AX4X87awcCekYx7WEA5G69TSUzgYyu8o5eM+L+0zlv7C5WifMfd8
8buYh+uFyyEd86qG8EbaJy1jhB/SPmn2VZpXVvAipA+UcQfnpH6w3BQuinSM
Czgq0tHPxYW7Ir2K9Fsf4b00Dy3gvTTPLROIG4Mnn1gY/mJaQ6fiydPzP1r+
UT+n4sm7T/T0G+nrVDz5ef+zFzvPcyqejHtqzJPn76xWaExtp+LJRa/ev7ep
mlPx5Lf9s59568/pYdY2w0suOTLKqXhyx/xfZD692ql48polf7fpH+lUPBn3
BJknf9442+qZS5yKJ+MeLvPkpedu3wiZ61Q8ucCon9+MWutUPJnLAU++7x+b
2XFN9YPlx4BhK0JsTsWT750v3+CTo07Fk035xJMbl2685/kzp+LJuEfMPPnz
uQn9J1VLVDz58bHVOzzLJCqeXOZInx/bl01UPNmUTzz5eKXthUMaJyqejPuS
zJPrHPAfOcqH6/ncsq1baJ1i+RMVTz4duXf++aGJiieb8oknD64dNK7t8ETF
k3FvmnnyZ5lP/jIpUs0Hy8L4Tumf/tv/zJNzFZy9r+C/6cyTeR5iXmVf2PLQ
yT48Xq574syTM2VYO+5NilPxZNyTZZ6coVnWzBUmcHsPeZv2Ek++liWs4tuv
1XiZ++PMkzft/7LC3Q/qA56M+93Mk1Ozt14TUzpR8WTkZ57cqP+c9cmVEhVP
xr115smZlza/FVRCzU+Tn3nykmmLv2zmk6h4Mtcf8zbHhPR+QR8lKp6Me83M
k8d7bdtVSq9HVX/Mc3vElQz1wtR+Yu7jM0+uEV9z+4ZDTsWTx8r9a+bJ0d5p
weV+5/weHsjPPLn7jMtDV8xV+6SpD/Nkn3KNvjozUc1n824A8+RJyZ5eS391
Mk9w3a8nnvxM9Ih5MtYX8+TAq6XeBV13Mj9R5cO/bM1w/FDqatWf3mOoP7Eu
tl2YuGHzRKfiyUFyL555co5ph/cP+qA+9ag+zJNtTd5GbRznJH7ywTsDxJMn
td1+aelYp+LJn8n9febJd7YN9JnShPcr1/sJzJO7NRicNbKeqz5tqD7Mk0+t
nlB2RE4n80PXewjEkzs2Xrh8SRHuT1d9mCdf2hTa6m5ltR+adx6YJ99+u2/w
ipMOU5/WVB/mySviT66vfcRBvPSDdxuIJ/+R4XTDv8aq/d/1vgTx5I1bapZ8
OUDNZ5OfefLdlKC/l0xwKp6M/MyTcS5ynz+udy2YJ7+dPe75oepOxZO5P7Fe
Vm7+fq59OffPMW/0D/Pkv8+M7NJ4g4Png3nvgnnyD+WbNP7mM6fiyXiPgnly
5ztzBq467VA8uRTNZ/j9kJZrptVY7aqPH9WHeXJHKR/5+V0O5snHpXzmyVx/
c/9O+od58jjaT+D3p0v/0H5i4f3E/D+LjC/thyY/8+QVMr7Mk1Ef5snLZb0w
T8b+yTz5jsxn2v9V/bEusi7rlNZvi5rP5p0T5slHZT0yT8Z7IMyTs0n5zJOx
vpgnh8n+wzyZywdPTpH9h3ky+od5cqjsn8yTcd5gntxJ9k/myagP8+S7sv8z
T8a7KMyTW2369En9tk7Fk/F+C/Nku+gX82TkZ548WfSLeTLOn8yTob/Mk5Gf
eXJO0V/myVx/rAucH5gn47zNPDn2oz8mXV3mVDy5gZy3mSfHyHmMeTLyM0/G
eYl5Ms4/zJPhL5gn4z0W5sk47zFPxvszzJPXi34xT8Y7PMyTE+R8yzwZ79gw
Tz5w43SbtI8TFU/2pv7EuvCU8znzZPhB5snDq470WvDSqXgy3s9hnvyx+Avm
ycjPPHmp+AvmyagP8+R08UfMk/GOEPPk5V6zAxZ2SFQ8meuPdQF/xzwZ7wIx
T94q/o55Mt4vYp6cWfwp82TkZ56cUfwp82TUh3nyUPHvzJPxfhHzZPhx5smo
D/NkcB7myeAAzJMbit9hnoz1wjwZHIN58oD5IzM2bqr6wby/xDz5hHAV5snI
zzy5lnAV5sl3hfMwTy4nnId5MtcH87OpcCfmyXgninlyWeFOzJPBwZgng4Mx
T0b5zJMLCpdjnoz3qZgnPxAuxzy5k/BG5slfCD9knox9lXnyAuFFzJPBOZkn
vxMuyjwZHJV58gLhrsyTwXuZJ4P3Mk9mbgyeXOLaoCtXdjkUT/74zPqJPt4O
xZPbpZXycHzrUDz58a9PLvZfbFc8Ge+rME8+1Gykb1uHXfHkPG3PRwSMtSue
7HdkxdxMXTg9zHpy/85BGYvYFU8uNrBHlmzl7IonTy23qsOzanbFk/G+DfPk
Wz3nvW62w6F4Mt6PYp58P3H3k4N3HYon553lW9FvgEPxZC4HPHluVd+sjauo
frC8azzTUayBXfHkC+1Ob/m9nkPxZFM+8WRL4WJnQ+o7FE/G+1fMk59Ztw3t
tNeuePLccrbN9v12xZMd7WZumF3RoXiyKZ94crs7G/03V3Ionox3t5gnrz/f
8PP2d+yKJ6/JUnd0aIpd8eT0JhOqf+56/8fwZFM+8eS8+3OXs1Z2KJ6M976Y
J99qcatJ+gf1wbyq0etepvHX7Yonj6rZaVmrFXbFk4vTPMS8Kl2gV95OW3m8
XO+bMU/+Y8LYtw+j7Yon430n5slXju3Ltacmt/eQt2kv8eSGHZ622FtRjZd5
94x58tg39aceD7Mrnox3yZgn9wu+b/3rql3xZORnnvz4Vu9Vez6YP/AveG+K
eXJIgde1x1ZR89PkZ57c6MznPhnC7Yonc/0xb5NXTS30+lu74skB8h4X8+T6
R8b2qlJZrUdVf8xza4FnZZ61UvuJeUeOefK0gzubtCllVzx5m7wbxjx5b/DN
CpMKcX4PD+Rnnty/Tqv5i9qofdLUh3ny4LV91t2foeazee+OeXLdh2Vu5bqd
oHiyeYeNePIj0SPmydjnmSdPreXb5vfyduYnqnz4l/nHvlk5JbPqT2/uT6yL
u0kV4maUVPPB0lfec2OeXP+w5+WZRe3Mf0x9mCfvfljmXNKSBOInH7yPRzz5
eOyFbldH2BVPzirvzjFPLuOx/s3lAN6vXPmZJ3c+M2n9zQqu+rSh+jBPztut
4/Ni923MD13v+BFP/tK6el6PXdyfuv5YFxPveActyedQPBnv7zFP3hs4uUTg
Vld9WlN9mCd/0So8W76lNuKlH7w3SDz53NArT8p841A82byLSDw57FpSxmnL
HIonIz/z5Ow30lI+vWVXPBn5mSfjXOQ+f1zvMTJPHh0d++hBe7viydyfWC8/
jlnXtvBe7p9j3ugf5smea1r4j7Oq+WDeaWSevO9U6sKS4QmKJ+MdRebJpdJz
/TStdYLiyZ40n+H3HQtTbKGervnsR/VhnlxCykd+fk+SebJTymeezPXHusgu
/cM82Z/2E/j9PdI/tJ9YeD/Buhgj40v7ocnPPBnjyzwZ9WGe/LmsF+bJeMeS
ebKnzGfa/1X9sS4q/lRv53cFHDyfzfuczJPPynpknox3LJknV5DymSdjfTFP
/k72H+bJXD54MvYf5snoH+bJeWT/ZJ6M9z+ZJ1eR/ZN5MurDPLmc7P/Mk3E+
YZ48Ynpq0fJ+CYon491R5sm7RL+YJyM/8+RQ0S/myXhHlHky9Jd5MvIzT24g
+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
8on3DqsT2mLngQjFexFXl3nvuZo5lxUeGK54b5GZsb/7LQhXvHf5+B+bvf6g
/DZcPvFe2/FxTWpvjFC8F3FIFe9Nebyt1blwxXsPtZow6fq/v8u8d3tqeuCT
dxGK9/I8xLw6Uu16m1lVoxTvRfxi5r2jy2b4c1OFCMV7u0lcV+a99s058+7f
zu095G3aS7x3VrkyDy//osbLxDVm3nv/n2x5a5cIV7x3ucSfZd6bf0P4tu23
ryvei/zMe7d23dz7wo4IxXsRT5l5795rnbtOP67mp8nPvDd2afSYjqevK97L
9ce8LX2zQKcvz11TvPdPicPLvPejUsXHn0iOULyX6495HvCF37KgALWfmDjR
zHv3+1yOzl/omuK9ryReMPPe17OOR3bKzPk9PJCfee9X80b+OGSH2idNfZj3
bq/Wss2Dj9R8NvGsmff6BP8RWi5PuOK9VsRfJt7rL3rEvBfri3lvtmPHs8d4
X1e89wSVD//SMPemPvb0q4r3vqT+xLpoXiJPoYi/rijem1niODPvnbnsfP8h
1a8p3ov6MO+d/bTyjDX/1sudn9yzfoe41cR7Dz+MCmg76LrivR0l3jTz3sgS
fgm+AdcV70V+5r2Fpu5p1G3UX4r3jpf6MO9tl/GffrdOnVa89xTicRPv9Skf
nP7u9XXFeztR/bEuavt2X+t7KVLxXsTdZt477PKw4fsGnVK896TUh3nvf+S3
nKT6g/fuHRDQMSgv8/MP4p4T782SrVXBNyOjFO9Ffua9zoGbb07PEqF4bybJ
z7z3gZyLiL+ZeOvMewe3mF++U2i44r15qD8xz0fH3Sy7pWao4r1W6k/46zWr
xt0fUues4r2nJT/z3jvtZuXIH39V8V7ET2feO6BA2Qu2pIuK93ah+Yx53lfy
oz5IH03zGf46SepD69fEi2feu1zay7y3E9Uf62KE9CfzXg/aTzDPh8p40f5m
sdJ+An99S+YP7bcmP/PegTL/mfc+lv2Qee+iXqfzzjkTqXgv5hvz3j2yXpj3
Ir48816Uz7wX64V5by3ZH5j3cvngvf/RXm+0l3lvC9nfmPcelvMA895Gsr8x
7+0k9WHei/2Zee9UOT+o73vHfb/t8+NnFe+dL+cZ5r3fi74w710o+Zn3Ql+Y
9+J8yLy3kegj816L5Gfe+4PoI/PeYKo/5jn0nXmvn5yHmfc+LHKv76obVxTv
fSTnYea9z+W8xLwX+Zn3WuQ8w7wX5xPmvUfl/M+8N+BOoLffuCjFe9vKeYx5
b7Ov31WqoubPv+tC9IV5b2Y5j6nve+X8ybx39orLbVrUiVS8d2CpTzoMP8T9
c9b7MfUn1kUROT8z7+0pfo15b9HY+WO8WkQq3pv4sn6Wy8ncn/es++X8z7wX
+Zn3XpfzP/PeXlIf5r15xL8w77WJ/2Xe+/OGiJRZhyIU7+X6Y13AfzHvDfOI
K9ArJELx3nviv5j3BgsfUN/3in9k3rtI8jPvTRD/yLwX9WHeGy/+mnnv+Vrb
xvX/LULx3l/FLzPvXSz1Yd4LDsO89434dOa9W8WPMO/FemHeW1Q4A/PeA5P3
N7+9QfWDZfSB4pPP71XjaPlWuAfzXuRn3vuXcA/mvdeEwzDv/VU4DPNerg/m
5xXhQsx7j2cpcXRvtUjFe88KF2Le+6twKua94FTMe1E+895uws2Y95bo3iq1
Xd0oxXu3Czdj3ptPeCDzXo+G7/ke817sq8x7DwvPYd5rFQ7JvLejcEvmveOF
czLvPS5clHmvXXgs895g4bHMe8F1O/1vvWQyvDdLUt93OSskW/55315wPCvi
FSI/uOLijd2CxzdxpSP/V15jd+x6cMuk4xxb9P74r+7cuGXKb4V9QOInIj/S
76yf9LT8OVc5zWQcG1b6svPAeFf6+1E85L3oSOLBzU9d6d2l/9N3NXr8aSNX
PTtL/w/esLryxDmu9IbS/+08hi9eV9RVH/jHWv4NX57c40qH3/RdWqG6R44U
k47zcPcL+YdbhrvSsV8tnhN44XGjlH/3rfc8EPVcJ/EW30n/YFyyf1ekz+HQ
JJOO/n96LOjGmP2udB4vpKP/41Jvz7nZKtn8LtpbUOJOvvuPcTH1kf6/enP3
x11Gu/Kj/xFvFOlo16CRpwt+Mv+2Zaf8LvpttMTfRH6MC+KcIh31bDorIPXl
n650jMt8ieuKdJS/qOzUuj1siBurxwX5kb5M4u0iHePVo8r6iJO//dtvwqnQ
rg0Sp7WTcCqM18V1f8bn8ko26Riv3St65mlaKcWkY7zmShxbpGO8vPP2bJLa
7rbl7X/0D/JjvB5I/FxTHxmvwt0rtyx37LbwNMNnrA6J74z8GEdfiSOMdLS3
08gNV4dk+XccpR/Qz4Mnrhs36oCrvagn4k0jHeN4af2S0VGXXPkxjvUlvjbS
UX7UltknHzmTzO9iXBCXGfkxjqMkrjfSkf/09VG/x65GXOZkM16VooavWfEq
2aRjvELbZLgS7Z1i0tFvduk3pGO8/JJq1C60LtnS8T/6AfkxXohXbuoj4/Vj
zjntO6z7t73/+zsGnmBd3Hr8+UzlXfXHeCFOOtIxXoPXbH0XmH7LpKM+iFOP
dIxLnn+yXcgb5krHuPw8Z/zr8edd6RiX80WqFy767Jal/X/0P/IjPX3XXa8T
JVzp5vz2aMPNPSuTzPkP41KjjC264TrX/WGMy6rAI2977nbl5/5BOsbl00r9
PfPdv2XS0f/zs7fvWPqAKx39f7zYs82FN7vS0c+Pqqx4mWupKx39fELyt/6P
fkN+9D//Lvqf64lygqld6P+V1A/o543LX9XcV8PVb+jnmtKf0v8W9DP6H+no
53Myvkg3/ew+Hwynwvz5/kyZyk1SD3hze5Ef/U/z0IL+p3lr+Y95bkH/z5L1
0sSd+5m49siP+tC6s6D/sX6Rjv63ua93U/5J2R/a9Iqr373tX97c/8iP9M2V
Mg67195VDsYF+4/8f4cZl1OyXyEd4xIt+yHSMS7YP5GOcbks+y3S0f/+si+Z
35X+7yb7/Fv3c76Jn478GJevRC+QjnEpIbrj9x/9ifwYl0eiX0jHuDRy10Ef
1B86iPwoH3HhkY7xgv4iHeOCuOdIN/oiOi7/b+uDcfGWuOd+/9EPcn4w+XvK
+QHpGMef5XyC8pE+1v1cpPof6Rjf5u7nItU/pj4yvjiPvdepTKb8unK+3S71
QfmF3c+HPv9x3vPBuF9xPx/6YHzpPOmD8b0h51LUB/UfIudz1Af1X+9+TvbB
uP/tfu71wbg/kXNyt/8Yd+RHOuKhIx3zAedwOc+b8cV5HukYxxbuvkD1M9LR
z+3dfYfpB/Ipph/I15hxIR9kxsVbfNP7/z/S/Yb8GC/yX2a8iouPQzrK6eju
+0z/L3X3iaafo7M2CGq6wpWOfoYPZX+ap3Id//n+TuVPz0t8IvanvnP6vbWm
OJQ/7VRiy/dfHnOlo/8dTfw79TnsUP4U8ZjYnwZ8W6x88D5XOeb8EFD9RctQ
VzrGJft3vmcyhrvSMS7bT78881kWV/3R/01ybj/r3ciVjv5PqlDk57RFrnT0
/6xmC745dsuVjv6/1KBz2c8yuOqP/s9Ts/DdH0q40tH/07Lu9i2YNVH5U8RV
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
f9ps5cxl4T5xyp82i9gyuHKPWOVPH268cGf1uRjlT1PkvWj2pysD7w/NWitG
+dMmQ1tM3t/MlY5xedB/04IeXV3pGJemG+3X7zW7ofzpqoRiBb6vdVP50wWZ
u56Lq+iqj4kvU3VBUN1SLp9r4tFU/ORN596udPMdafnpUwJXuNLR//s6vqi5
57RN+VPEfWN/mue4T8j3T+OVP/X6OiWkxoB45U+byXixP12+b//aP36NV/4U
8d3Yn+Idb/anG18E5v2svE35U7yvzv70myJbm+340ab8KeK4sT/Fu+7sT78s
1G3c3tM25U/fyjv27E+bvPq1ZZNIm/KnGBf2p7MlvgD70/DXDwZuD7Ypf4q4
aexPS57ptGWmvysd47W8w4MGlU660jkuHvvTV/5pe7vF2pQ/Rf+wP0U8O/an
nTy3Ddjwq035U8TXYH+KuAnsT5/8cOxll+425U8Rv4z9KeLBsT+dlfr16b/t
8SYd44h4Z+xPa9R8WGPSkHjlTxF3jP0p4o6xP/1l0cPKpYbGK396qdb4PA8+
8HEYrwr9ki+EL7Mpf4p+Y3/aN7Vn11gPm/Kn/+x93w/sTxGfhf1p0dNFel37
PU75U8TPYn+KuDDsT68/OFb1H0eM8qeIy8P+tMTCDnu6lYxR/nSqxCFif3rj
854/FugUq/wp+p/9KeJtsT8dUSXnkewjbyp/OiDrj38862lT/jQ8cGepsJtx
yp8ivhLSzb2SzmkfvTXxvFz+FPGbzO9K/2/Otzj57h/Ryp+aeF7yh37eIvnZ
n5p4ZPKH/uffRf8Xo3qinKbULvR/JPUD+tnErZM/9PNA6U/2p8Ol/9mfYnzZ
n05znw/GB2H+sD9F3DT2pzQPjT8Kd5+35vx/232eGx9UXNYL+1PE8WF/2sl9
3Rkf1E/WL/vT0e7r3ZRfUfYH9qfof/aniAfE/hT7D/tT7FfsT7Efsj/NIfsn
+9M5st+yP/1Y9mf2p89ln2d/ingx7E+hF+xPO4rusD9Ff7I/Rbwb9qep7jpo
zu3QQfaniIPD/nSN6C/7U8R5YX9aTnSc/SnivLA/RT+wP8X5gf2pj5xP2J9+
4X4uUv3P/rSy+7lI9Q/706/lPMb+dLqcb9mfjnI/HxofROc944PofGj8Dp0n
jd9ZKudS9qer5XzO/nSS+znZ+KMm7ude44/qyjmZ/SnGnf0p4r+wP8U5nP0p
zvPsT8kXqH5mf0q+w/TDSnefYvqhibuvMeNy390HmXGBb2J/2sTd35nxIv9l
xgs+jv1pc3ffZ/rf190nmn72/XrAqe++cP0u+jlYfCj70yqjt6blLBen/Cne
e2R/mvNl1vihc1x+EPlzjXs4I99R1/1W9P+lpvFVC38Zpfwp3s9kfzonz8W4
4tsilT+9EjL2WYfmrvIxLnm+/cxzZpIrHeNSq8rqFzcHuspH//s9y2eveduV
jv5vc/jm0Pr5Xe1C/1vGb3rp09SVjv5PKt/zXM4RrnT0/5zo3MsTlrvS0f8V
6g95nXY4RvlTvIfJ/nTSpXTr67s3lD9t1fJ0zmNzY5Q/xXixP+32qvTTgPXR
yp8iXgz7U4wL+9Nnw2tNLXwjWvlTvAfL/rRR/hnXnrSKUf4U76OyP8U7tOxP
A3uHfFohLEb5U7y7y/60RqJXj1zdYpU/nSvjwv70iryHzP60aBVHyzCPG8qf
Ig4L+9Ne1iPTvxxzw6RjvP4Y7fdN9JFYk85xdtifzi/wR0jeErHKn6J/2J8i
Pg7702H9t45I/DlG+VPEQ2F/ijgy7E+vZuzTeUWuGOVPEQ+F/Sniy7A/fbZo
bvKLra50Ew9C3j9nf/rD5s8OpP07D9mfIo4J+1PEMWF/Wmjs9Edr+8Uqf/pF
1LggzzMxyp9e7xe26O8FMcqfot/Yn65vc6FlgyYxyp+iH9ifIr4M+9MVXwza
82lytPKniMfB/hRxTNif5jq42yNubpTyp1aJO8D+NFfxj84nT4hU/hRxOtif
pjqPt47NGq38Kfqf/eliiTfB/nT1+G1tPj4eq/zprldjCuYpE6P8adbYZn/c
iIhW/rQH4qfIH8Yly8n47y4PClf+0cQfkT/z3SnigKA+Mi6cjv7ndPQ/p6P/
x1M6+t9T6ol0c3+B2oX+Rz8k5Zxa83Lpc96o/wQqH/1v4uPIH/of/cy+dZWM
C/vW1zLu7Fv7us8T448wr9i3oh/Yt550n5/GN+V2n8/GF9D8N/5opawj9q2I
R8C+ldaj8UdY1+xbR7rvA6Z87BvsW9H/7FsR14B9K/Yl9q0FZB9j3zpD9kn2
rf1lX2Xf+lT2Yfat02W/Yt96RfZ/9q3QX/atiBfAvhV6xL4V/cm+Fe/2s28l
fTTneegj+1boLPvWY6LL7FvxXj371q9F39m3Iq4c+1b0A/vWInKuYN9aXc4t
7FvpvKT6n30rnZdU/7BvbSjnNPatjeXcy77V1/3caPwRnQONP6Jzo/FBdM40
PshPzqvsW3FuZ99K52fjm+g8bHwTzs/sWwvLuLNvXSPv2LNvnSznc/atX8g5
n31rsrtfUP3MvpX8iOoH9q3kd8y4kD8y43JZ/BT7VvJ9ZrzIl5nxuiz+jn1r
Hnc/aPo/t7t/NP2cc3y52qE9Xf2JfoY/Zd+69MKRmZ2nRCnfGirvVrFvjW84
pmaFJa505P+9Z9VdKdYI5VsDypX1Wud3TX/3K+90sW/1c9RcuD3uL+VbR3c8
VHxEXlc6xmXhqVp7arS9oHzrxaalT9ef78qP/s90NueNJpcuKt/ayD5335yO
l5Rv/S4100/Xoi8r3zp0RMrAK1evKt+6N/BWqUFJ15RvHRox7OWDa9eVb90i
73qxbz1X0ra6k1+U8q2B+w7GvjsYqXzrKRkv9q2rbcWL/PkoQvnWU/K+GftW
vJ/GvnXdM+d3+X+LUL4V79qxb/2riI+v/XCE8q1n5Z039q14T499a9SkuTnz
XY9QvjVB3g9k31qzxccVs30aqXwrxkX9v6q868i+ddCb5Ab1AyKVb8V78uxb
fWdO9cu0M9Kkm/t01ZYln6vtSud4AexbN571970VF6F8K/qHfSve+Wffusuj
a+6LWyKUb10q74iyb8V7+OxbV13ofrfMvAjlW/GuO/tWvIPKvrXPxPs1G8x3
pWMc8Q48+9Z7+7eefFAiUvlWvMfOvhXvsbNv3f/N0S0VPo5SvnX+gmpxlpBw
5VuvLWk0+Yeb15Rv/Vn6jX1r2WG5B97eeln5VvQD+9bf5V1c9q2Rp95VDGx/
UflWvCvOvvWpvMfLvjV19c371U6eV741o7yfzL61wrfJw+8GX1S+Fe+fs2/9
7GCWY78UC1e+Ff3PvhXvkLNvXfDk708L1o1SvnX4/kGVzrQLV771daNKG5tU
vaR861i8Ay9/GJftc4pMW/FTqPKt7fGOuvxhXI7hPXPUR8aF09H/nI7+53T0
fwilo/9/lXoiHfUcQ+0y3ED6gX1rKJWP/jdxBOTP/L+29DP71vkyLuxbS8i4
s2/t4j5PjD/CvGLfekLqyb6V5qfxTW/c57PxBTT/jT+KknXEvhXvKrNvPeK+
Ho0/wrpm37rIfR8w5V+VfYN9K/qffSveZ2bfin2Jfese2cfYt96VfZJ963TZ
V9m39pV9mH1rE9mv2Leulv2ffSve72XfCh1h37pd9Ih9K/ZV9q29RdfYt653
10dznoc+sm+1i86ybz0qusy+Fe/usm9tJfqufKu8u8u+Ff3AvhXnCvatteTc
wr71gvt5SfU/+9Zo9/OS6h/2rTinsW8dL+de9q1n3M+Nxh/ROdD4o7Xu50bj
g+icaXzQSjmvsm/NIud29q3b3M/Pxjcddz8PG980Us7P7Fsx7uxb8R4v+9bz
cj5n3zpEzvnsWwe7+wXTz0Hu/sL0c0N3P2L64WN3/+IaR3e/Y8aF/JEZF/gp
9q3H3X2fGa9u7r7MjNc48XfsW0Pc/aDpf7u7fzT9nKHU0T+HDXL1J/oZ/hT+
Bf1z50rxeh3bJpl09ENVv9Qtj24kWbbJuRHjMnZirW1rGrreB0b/4B2wf+i8
jffHcP7E71aM3D/pTIsU9Jt6xxV+AfWxF+ka9tOE25audG7He6fyvrHxHQ3k
fbb3+9tjU3+fKWtbnFjiSjfv6T2rNvFtbLJlq/wuxqVw/IK6ORenSLsem/oP
Cqi282B6CvYr9X5pe6rnfalnGuoj7Vq6etaZe+nmHTn1fub7cqJM/XfOvf1P
6uBkUx/z/2L73rSp1ibZ+BSMSyN5L9FPyjHfpci7iG+kHLT3u3z++SMKJ1t6
SH60d1/nkR711yRZhrbp9cm8CudD+P1M5Ee7klOm9Kr48JYp39zTeXS63LTI
JEs7OVegXekDtsduK50s+0mUaVfj60Va+O+/ZWl//0y7+2dOhKBdeIezq5SD
dhVeVLdAvilJpj5oV3DrW2Uvh+BdzUMh/C5lU8mP9VVEyvFFPaVdqE8bOnfh
Hcv3+9tj064B0t62dO7CO5atpHy0N0n6LV3KQbumF+nS/0HVJEt3yY92Hf7z
88ZPHyRZOtN5Eu9zZngfJ8icWybI+Lam8wPeY/Sjdi2Vdkm8IdMPT7q3mbHz
j2RLL6kPxhfzU9av6Qe804t2ob05LleNmNPTvA+s3lFEOegHj/ZDZsR4pphy
0A9Yj53p/IP3JGUfM/3wquW4WsdfpZj+Md9byj6A/OZ7UXnnuSPpHd4PlP3N
tMuz8Mzpjw+kmHJQzyqy770lHce7iMiP+vQ8vqhkz3/3k3TSZbzXt1vyo//H
yP4M3Ud/4j1A6D7qiX0e+fndP+RH/aEXwqOMHvWZ+XaC/RDeZdXv+6Eccx+8
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
K9BPeP4O+sn69KUh6gi98BOev/M/1mB5lA==
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlgmwTmUYx889lqN7vmMbQpbuzXZxLdnDtW+5lpuQfc1gSJbIlGEQiqJo
DKUUarSZokWyL9mXkZr2lEJikOxFv/88z8z3zPM///O8z3m/9322zKGPdx8b
BkFQIS0I8qGnR0FQCP0iumEcBN14WTgJgj7oOvD90I3ge6KLwhdDeoMfiM2+
K7gIXFlkOLgZXGOkGms343MwXBZ4I7gMNo/yvBVcD5sO4HS4gej7sOmPHuLf
3YtNXWxa8Hw7FQT/IU3A98Ot4F1pbN5FfxCZTVpiuCr85+g62h/8Da0DDwDf
jU1TxyXBo9F1sX9SfnmeiW7L+zbo1kgIl41MA+/H5250c+x3ovOwW43uyvuu
4DfAD4I7IK+Bu8B1B78Dfkjnh2zW/4OriowHt4DLRZaCK8Hl+Llt4ltjxIE/
BX8Ibgj+Btwdm/d57ol9HrIGfAL+kdj2NQJuALIefAb+LnAuuAHvx4OPggty
4RMcD4QfC94P7qO7A88DdwDngBfqf4Fbgj8D/4nPm34XOv8x8PvAt8D1sWsv
/4mdoe50HXxF+AI8f8262uB64O9SxucHHwPfC/6XmNwLztY5wB8Fz4mM3wfO
hC+KzwVwd+BuIwdThkvCL4G/DoYKZnkMNMLPdYiJPCvuT/E+ApQCFwvN/gay
B5sK2BeGfw7bych5+O3wl9Hp8H+kmQjP5P2EyL71TGR+5f90mq3lCIK56Fu+
N+1Rd/oYkp+XzfnWKHCmx0JjbCYp7uCfQteAr+2x1yY2/mlwdbht+K0eWEwq
X5RjpRPTei6VWN4qj4b4N7PBuyKLa91NvsRyTDaK+fbIHPj6ieG5ijnf50hw
hcT86D/cC66CjPMY1h3rrpXX5TzHVQfKgxd4/NTx/GqnWIot57IS25P2dhzd
GX4ZfOXE7qYoslOxxvN8cEedA3gDuAe4DLoMa8uiZ7D+Kmf8JfZX0CUCu1fF
VRHw87yvoBoALodu6vGZg26p/wRurvxH7gnsnHLcRud10+NK8XLJYyAFXyK0
bxUOTYTTtc5j+ziLVvHtLPAR8OLI/tePygV0Oexj9HzFJ/owfLnYYm8HOCO2
ON/v8S+bQ+BWXldVQ9P8fynHOiIZgeVhL+zbga9EFreKz/HgsvB/8bwtZfEa
emzP8nhWLCu2ZbMV4jp4D0ajOfv+qvnYRNSQdfoe+Bh6r84uMLvBsXFPqFeA
d4FHgnco9rDZjn4dnxmqJ/ivH1o9r6s6jFQJLG/L+v1moldHdi8foxsrHgOr
7xX9vlQvsv088xRDfg5V0WO9lip2m3pMKt4WIcXhK7HHiXC1Aut/05UH4Bno
KaHl2mT0VM8p5eckz1nl5CykCXh2aGu0VvlzJLKcauC1XXmU4Xmjb72MHur3
qNxVreMXTI0sThS389QrE/uGcueI58tOdK3E9qr6cIJzLA1eqroFrqR9x1bT
lBdbPK4KsHZKZHGlGjU7stwpqP8VWX/U/1WN6e53oR7f27G44V5PRqBfQeoF
1sOW+JksQn+ivAIvDq0Hqm++hz6TZr1MPa0b32oG/pVvve1nqJ7aC8kE90Av
d5/yfVL9Xu/Z+MOs/Uj7Am9Ct8bmi9D6lfxf5DvDFE+B1dkRvmfVsAOR8epx
axUTgfXUU5HtU73sXGT+BuH/58hs1PvW+/86EFqeKF/OonelrC6Ux+eh0PLu
IPqnyPZ23uub/Mhfv9je98f/hZTFaw24TrGdX1ufI7R2RWgzjOajEomd25vg
TqrViZ2R5o1aseXQt/j7BSmpO4st14rhZyH6t5TVzaqqKzx3CmxOOALXHnwY
PSA2PQ7fJz2uZP8qduXBp+GyYsO/p4xXPq5B34jMj2aMzbwrFFp+pfOcF9i8
UdznS82QG/ysNoZ2pzp/3YPOQbHTRnftc47mKM1db4E7wx2LLNc0/+icxXdL
rPaqjz+r2SFltV5z41VwTXDN2GZL1XslwVe+T83AKz1/Nc8pRhVjzbVfn3M0
IykOVccueD9V/VkZ2Zmot5xKWb/SXb+A3s3z3x4bLXy+Ui/TXK0Yv5yy+Uu1
9KXQ5kndb25ifUHz+TSf/RT/fRPrZ6oPyvdc75vtEpu9Nav/o29GVmuHJ/Z9
9Sb1RtVk3ZHuSvOY6uRa8LLI+kh1n1e3sHYYa7eicwKbXzWbqZddxH+12Grz
WXCEXafQ6vNAnxXVo895jN3xGVW9YFRi96B6onqf6/W5C/qS/g9Yf/pKymq6
7quX72eo8jFlfVexXTm2/vk93KDYYixm7SWvgcopzRKa95Yrr1O2T83Dq7z+
qw+0iq3GJ/jvC+4Cn7+Q9cr8ms0iyyfFeanQvqs+/wP+rim34cNCloOab6/5
+ajHnQH/D8aYdX4=
            "]], 
           Polygon[CompressedData["
1:eJwtmHm4llUVxd97GM6F73tlhgQEQZB5CBBQBnEAHFBUCFGQydS0gUEezcon
S03NTMtMyzE1SiWRcgRRBhlFVHAKJUcEFdMEBEW09XvW/mPfe9aZvnP22Xvt
vd8OM2ae9qNUFMX4mqKoq/8vVoviBcm9uSj+Krld8i31N9OkLeofWxbFnWof
rb4tGjte+C7hAayN+bdJXtXc12KvbhpvXXhP+vol78ncV4RflvxJ7T9LXlK7
vsYP0HjHSlG8KdxI+CDhv2XPrSfcsvCaTcJ1hJsI/074v8LthdsLPyC8Q3iM
cJvC91ki3EC4gfBlwvslX0ku1D3mSv6n8UM13qrweWZLpJpip/5slbwv2SbR
0YrLNfac5u8XbizcoeI9Nmr9cYX3flrjH2pc/4o5ws+r0V3jTYXvEX5fuG3c
52bhbcKthNsJ3yr8H+GWwi2EbxL+pOo7crf5ko/YX/IXte+WvKP225I71b4r
u90s9E3ffdm6QUfvxdoOah9YeA/O8EfJ1qrP9oGkY+j3DvVP1v0mSc7UXSdJ
+qh9mcZ7aHxZto00SbYB3neqxheHvXwkPE74fuHDhDcJHyv8e+HBwq8K1xWe
KYxR/kBylH5jhKSr+rtJ6khGqv9Y9pTMEX5R/0dr/Zda/4bkdcl49X8nZL7G
hxQeO0v4UfYV/lD4U3QquUD935ecI/kudqC+zySl2tXSZ+As56m9QuuHa/3W
7LlPCp9YeA1970nOLT2XPegvamVHtf6N1Zy/8G8P0J79JQ3VX5GcLLlX40do
fLPGd0qf44U7CC8Qbqvxc4UPEf6XcF/hK4S/Lbw2e82/JSfFXtO091RJRb9d
lWzWfhXNb6v585gr3EX4YOE+Fb/tGuGTCr/xCcK3Cg8VHiv8huY3FW4kfKPW
d0Rvwhewh9qDJNeofTVvrPY7mjMMW0dHpe/wILqt+m6Pqv0INln6vQ/S/0/k
L720ZiX+LDkG39fYGI31kPxE7b7qW62x4cIfaP52yUPJPoAdp9L20Qg96P+h
mv9Yts1yr7rSRb1a6wBugWPQzWzNf17tseprUGtuwLawMTjip8L1hffo99Zo
/i+zuWBb8MMt2bpBR29p/O/ZvjxY+JuY3xBb0dxnquYT+KGO+i7U2FP4d435
r502vjibl3eob1nVNjuCt0+25Wuy58KZK2Ic275Z+BiN7xIeKfw4/lLaNg7H
l5Nt5P7g9wHCX1btg4OEH072TXwW370dHyvt13AjHAnHX5HNbV/qfOur5qjm
ws2TuesF4f5wKZxY+g7cRc3iIo1dHefnzsur9h3s5elkH6qvNxhV+E14m33Z
vrcSfhDeHfd7TnhmaV/GXpYn+/QlwvVif3TLnuy9VPK90hwNV6+Dc4SnSOen
xHvDLR/H/fFxfJ3f5LdXSX5YmivhZjgazrwy+27ccWnYdyfhE4k5Glgi3K2w
v8Ar3Svm/nbCH1dtj/hmT+HdwtM05wm1F0lmxHvwvnAY3Iov4bvHJfsUOkAX
J6tvsvZ+LZtbb1PfKHwlmwsfFB4h3KniWERMJDbu1fge/Ed6ryP5Qn0DIx4R
f/cLD414QXxZJ+mu9o/V17O0Te+K+IitH1uxr/4MjtL4r8M/8J9VVQttfOoX
GlspXGpuM+E/ZNsEb8cbtq1YpzsiV2kjvCHiv45aXKv5s0rrgLufJRlSmovg
pKFqr8NYk9/o4IrjHfqvUd+zGrsuO5YT09cKr5Z8UWObxraZ802N35216BBd
LiCmqL1Kfb01dxacU9rH8DVyJnKnt7O5lDflbYlT85L5bYLap0d8fEAyUe2X
s2MlfYy9lZ1r3S18ivB24RPCHuCDFZE/5eQ4jM/he3A4XL4zO/bA8XA9sZJY
wxk4yyvCA4WvFx5WOp7hb/cJnyb8UHYsmsAblT4DZ4HfT8X2NN5P478hRgmP
rjg2EaMGl74jd8VH39XcJyRdiDXkKBp7PJurJ3J+fJUYIzwFm4MPJKMiXpH/
cF50hG7g/690/31Vn3Nhdn6JLtAJuSUxkvOcLdyqdPzqIHlW/esli+JMnGVa
zJmu/2uy13YSviWZ0zZkC3fmroz1l/QLniUWkxORG03VmpalYyL22BNO01hn
4esiPxlT8dpLkzmaPXoL9yrNo+TXrUvvxZ7Ls89+fsR/7rA28lFSjl+FvWLb
2Dy2vyb8DR9sX7G99lF7nMYPKJ3T4rv48N4a2/++GvM7mBjaWeNzIrYS8+Ey
OG2YFrYpfUbOtiLiOvnKefBlvDFvPSlZr8QM9uY38CtsCts6XdKitA/NTT4j
Z0UXl4T+0clerR8U8R3bWRD2eZj69oQt0KYPmxio9Vcl+9DG7HzyGOF/ZudT
5J+c85ns/AOdjE326VXRR25Cjsrcz7X/qck6QTdNS+uyT+QnT2VzPlxPLtkk
7t8lzttF+KbkmEvshfP7Juck8+JM5HrkvJyVHLhr+Bm2152cJJnj4XrGLk72
QeagQ3QJRw+p2CfQA3puHjI52ccWhv13Vfso9X1ddb1ADkPuAmnCAfg5cRpu
IM8iHgxL1iNzhifXGKytET487vuPbB1cFOdBN+iI+HBGsu6oZw5JrjmoPS7N
tmVsmloLG/46bAXbpqajtuuRXLuS/1Frsgd7wTlwz5X4VOkYhm7RMbFtYfDL
kOCOR0Lf2Cy2+1jwUa/kt14f/EbOC3fg93AdPtw59idWtkiuXcmXGwcXb4lY
gh/hX7trXGOST8FRcBUxj9jXW/j1yKfIL/aFLzJOLPqsxrGSmpfaDH19WnUO
QS5BfUedOD/yg87JtePc7FyTnJPa9KrIV+CHjVXndOR21ATUBjdkx1ZiLLU2
OQa5xvGSXdWw4cJvjC8+GfkN49QzcDbcDWfBC+QM5A4HJteqW6I+JV9GV/At
3DwjmX/JKcgt8Hl8/13NaZ0co4nV6Khhsk7QzcPx/tSHuXSdjC2OEK5Xujbg
97FZbPfFiKc/T+ZacmByYTgD7mAP9sL/akv7Abk898W28Vl8b3ayL68OPoWz
qFWoOeH2a4WPKO2zcBf3wZcXh79x33alawZ0gU6o3TdHfL48ObaQQ5FLESOI
Fb+NfAWdbK+ad4kN1OQDSnMCsYT5cMVL2bGHGERutCLwOcncvSnyDfIlarmt
8f2BbxJ8m6BOHZ185sXBb/gyHNO4dA5ELkSOQa5BPrYhOYf/PNseeZN6EcvJ
wZfG+MSKa5Ybk2scapmjY0/2opYh5yXXIefZIfxmdj5FfjOydI57R8RP7k49
vyw536CWhCPgCr7B8C1musaXJNcc1KqckbNwprNL1+jchTudWTonW5ica5Bz
sCc1ArUBv8X3kfXJNQnnnVI61+OMnJUag7qBupLagza1xOjCfdQs1C5jCufh
fNNgjDnnx++TG5KTjZO+zhC+QfhI4W3Z3xfYg7V7Q2foblKcjZyY3DjLqWtr
fWdyUnLR6eEPxFXyRr7t4eP4Mj49WOuuD76BD8i9yamxFWyGPIwzcBZqcmrz
I4Mf4Uy4kxqS2pQahlqGHJM9WEsuR42En8HD1E7U3NRi1GR8x2AMX4SjmQOn
w+34CLksNdKi0P+Eit+TGpGaYFbYHLbHNxe+veCT7MFafJXYdk/YAzGO73mc
gd/mWwo+QQ5B7oCvwHENw4/hvv8DGDOebA==
            "]], 
           Polygon[CompressedData["
1:eJw1lnmYT2UUx+9MTXdyfxcVCmOZMWPfxzpmIzL7ljEo0ijSokz2JaMYZafN
UlGoKDyhp+zMDNkJ7U/WNtUYJiZR6nOec/rj8zzf+z3nvfddzvu+Nzz/6ZwR
wY7jFEEINPYcpybG3VALTgUcJyjUcdKIFfO8Gypcx/kFNqIPQjKxmzzPg7kS
o01D/LfQP6F/hJ+hHl5T3t8V+qFz4H6403ecPnifoBPR3aEH/ECbBnj1Icza
RuI3gihYjJeKVwN9F9SEgXgxeOnwBvo1eB16E7vXVy3eQkghZw59nA2L4B68
89JX6TfcgP14/Wn3LX41dFWoAlG0vWDjbIb+Ff0bNPH0PWfQZ+Gc5ND+Mbx4
YuHoCPiXd6cyb9vwt8Lvrs7Bp+gtsBkGkfcwDIZ82IGXS04IOhHdXcYF0Xi9
8Jail8Aim5cWEIVuAo3hMn2JJ+8jmXdPxyhjPQHH4Qy8LzFyesIm9Mfwss3V
IeIHoTd6Jl4COa3QLdFZkA2VfCMV/210JrGz5J+DNLxVeN+jy+Ai5Mq6Q19Y
K/VAfj24HOQ4AZ592GPvW4F+B5ZDBjnJMBfdjVgsxIEHyXhJcB90sHmROklD
n+Kbp2E4XileP7y/eL7uat3XsPWVdT7NdzPIS4dM63sWOQPQ69Hr4EPrcwI8
g34FXpX5Jqe/p7XzJPopGOHrd/fKmKAE8myNItFlfO8ilEMyeUmQYvMo4y3G
L2NextDXGfCiq98dSXw0jJI19rXu30Qvk/0n84A3mtxRsFNqlHfU9bR/B4gv
gPlW47ssXkDuNJhu6/Ye8Xdhpc1Btqd1kkUsG3KgGYzHGwdjpDbJCeXcyKTG
j/J8BAbineQbt6Ibob9Afwnt0N3w4iAW/sHbD3/Tlwae7k/Zp+NgLOy2uQgj
NsT2RV/0VWKVMAh9DG8ksdvpQxVYiL8ALtG2KbEVNj4Z5yG8m7yvIe1uohOI
r8XfDFvgO7zWeG3As70/E/8lKCFWXfYI+hq6K7oLdIK2nq6TrNdxG3cE3p/o
jlKf0B5ae1qXUp8XXD0HZe9PQk+EfTYXRehbGEs6c7qPnM/gmtWv1PFtoTru
Al/nZRd6J2z//9wgnkHbwzwfggc8PWPlXF4qex9WQ3Xa5so4iG/neQf8QV4F
XAlorLOnZ11tdF2oY2fnKnJXwiZIkXMtoHMeIWsuZyW09PSOqGNtw+0MDdC/
bPq3gefjMBjvqK2XtDmG/hwipbbwTgR0TRfa/Dp4QRBi9TUBf7z0n1gl8zcV
XY2xFRB/Vs4nWSc5A4i3RbeTcdm6FZI7Bea7+q3tsmaejsnlHaFSW76uZbTU
BrF15K6HFr7uR9mXE6GHnAWyjtAT/bx8g5xeptuh20M0VPX1TpS7McP6t412
W6G+3SNxnup89BAYHqx3yx5ySuGkq2djPV/XMk/2B/SxdXuO+GQ4TN+D8Wah
Y/EfRQ+DoRAm96XkytzLOQ+tfT135+FdYj7Lg/QbS2i/GJrbWSb3THP8yehJ
MMHmIID3OPoJGAuJnn73EXRtYnWgrq/znIqXLue21dBeW8P6nu472X8bYYOc
a66+Q/os/xb9pbZhANyB9zVtv4JvbK1kv9Wyf4Vu6F1ypkCS3Wtd5D0Q4+vZ
FIN3nbY3ZB9CCbnF0IF4EbGj1l7ec8DVOWvj610h99p5vHI5e1w9X+Telvs7
Xva/p3doK6s/qcOr5CwndxmscfX7ciYO431DpQbs/sqzcTwk5wU8GKz/PtKv
QvRUmCF3AF5H66voTujOcMTWP9zT/zb5f5P7t4J5vgpXoDSg8zKLvDkwO1jv
fandF9DTYZrVs9TLFPtuoc2BI/868g/p67na3u6P1egPYE2w/m/8B6ucSUE=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtl3nQj1UUxx/vU3rydH8iSzGyJluUoZS2KaOhRmJskX3flyyvfffy2vfl
te8hVISkZaZ1WkfEVFSMpSjDJEn0+Trnjzvf7z333Pu7z7ln+5Xt2K9J36wo
iu7NF0UxWDETRXsgK9Mo6sa4wOKkEEWlkihqwXoxsCSjFbwaeH9iOpPRacq+
UcibCRlT4MdYm8A5zZkfCb6GvDX4EmM8vAV4EL2m8MB5h5xLlmF+FBzK3u/A
V5AfybK11ro368edX82ye54ER6PfOTU+BN6Y38hGpxHYFfk55OORd0jt/GHw
0omdr9+pAW8ve4AddX94Eec/sD4c/bacNQb5eHAc8hHwNujUZz4U/jS4ljEH
Pg7MYUyETwaro9cJ3pN9E5lPhY8F/+TsbvBL4ADmufBBYD/GJPhgsBd7XwXP
c4fDWWbnFcy7JWbPGZzZx/W174zb7RT4FDrF9Dbsvca8C/Ir4MPIBsBrgW0Y
g+EvgzXcbrVj+x591+Ngd37jIvumc0495gORPyPbxmaHzuA0/y59XyfnPcCe
she8O9jBbfgE2CU1m1fijif8bqfBX/x99ea70VsA3wWuYiyBvw++w1gI3wfm
MabDl4JrOHMlfG1ib90MXgg+hrGM9Qz+vgichXyJ/DExvghcor3I7kRnMN95
OcveawFjBjqj0Jmf2F3Ko/Omn7NTPo7+z+h3QrcvowCyFcgWMWJ4b2R5qd15
DmdsSO07qnHODnA+8u3ga4x58M3g8MS+axK42v1qr/wqsfXi7F3BOW/Ay8Br
ylfQeVDnuS/NBS9yh2xwZmpvrLduwhnDmFdjvifYHu19MrH4HQ5vCX+Ltcry
A2RzUvPlH5F9znhOb4msEL/9tueQ6an56jnWD3qOGI9sLKMh/AtkrzNKwgch
m5Ka73yE7DijnfwY2algPj0VfhW+Ab4Ufgk+Et4/sbhQbmkHvoe8DvLG8N+D
xxL68xkz4fm4YwF/+0V6h9Rskx/ZDfRzZffU4krxNZBzyjFawu8G16NTWL8r
e8MrwesjvyO2+NV73yZfh98OZsXmz4q5gonlN+WZhcHW5A8Zzz9lwL9Y6w6/
kWX7dU5BsDBrbeHlE+PKRdnB9K4zRsAfQ55BdzW8gcfai7HZ/HnwK9kstTj+
BD7a37cV+z4Llr/0jtJRXH4cbL/O6ZxYrtM5XyonM5r4m76gN4zsXZVntedr
36v5N/BGiem0TsxfdKbuWNpzy32x2UX2UR1QzlIOGMPe82BX5DXZO5jfK6sY
8DzfTnuRn3Ud6Sqf/AaODXaObKsc3wv5P8znBntT6YxzG8rmdRKL0X7wW8GK
zivEdq5qx0T0e6SWp2fAS7DWR/EClmP00DvGFiv63qrKn4nFlHxStbUDvAq8
kMda8dhyhvxE+a+H59hpnD8wtfUcvV2wmqfccpfn7aKKh2A+1wf5KMaz8E+R
HfIYmeXxrtq7H9nw1PL9gWCx/wB8d7B1xVF7t7POb5hYTnhIuTYY6rv0nv1S
87dVyLe5LRTLDRI7c6/ra/8++CPIU+WHYDrD1DOopvmbbg/mL6o7zZF/6z4m
n1kMzw+vlVgdVyyUhQ9JzXd2sP4B41H4CGTVFaOR5TXp6A13sr7LY1Z5rG5i
76X4rerfpfu293yi3KIcrjvnBatPqlO6w0TvbQ673WTf74PJ1dcchZ9m9Pbc
NVc5Dv5T8FjinGmp9Q2qm13Bycy7yBfQyUmtTp5wrvr5K/wMo7/nNNlT/lkP
POZ9iXJmK3BCZGet83wom+i9lEvWIFvm9pTPjHaf2ep5V/Vadbukx6ZitHZi
+U15Lzu1vuBDt7fqSN3YfFU9xibkmz1PDkgtL3VULHgMqu+YF6zfVB0fA15h
vj62GndBfhlbP7NU9Vq9BLhKeRm+SnkyWK8p3z7pdpYNE/L4QvhI+DzGcvVI
idUN1dxN4Fm3oeyf4+cvS6wub0VeImN9jnJLBeQVvK6pN1ieWp0vjSzXe4Nq
7sOK+9n6Dvhq9m5EXjRjNVv3X4t8P7wSshn6PXTyEqtNs5DHyJf5HUrCs/UN
qifwvon1dfqu1L9R9WsbOBP5FrCU5yLluJt74VPBmYn1FKXY9672RXaPDYnd
cx3nLE6tbwroLEhMZ01ifYW4ZLqbfucedGbHdh/V1OXee5RFXixj77jUa6vu
f0vG/i/ov0MJ/WZq/VqRjPWlnSLri6swPxDbfdSDqadSX6ZarH7ssvcv6oVG
gH+7n6ifqex7defrwXpQ1fGb9Vy9cWw9ifroP4L1geq1csHZqfXg14LlT/Wz
W4L1e3qXLM7eGDznev+jWP4vWFzrPurR9N9BtXh+sDPV+/8bzLbqOQtzzv+2
obBD
            "]], 
           Polygon[CompressedData["
1:eJw1mHf81lUVx788F/Obj/cBRVKcTIlRDkzTLJPEVY4IVEBA9o+9Ym9B9gaF
nzIEWWquHJm7vacz0xQUxVyVopZZfd58Tn+c13PPOfd7xxmfc+7Tov/orqMq
RVF0a1AUDfX79bIoLhbdlovidtETok6pKL4t3Tcl/0HIGHcVPaRxe+k7iE4R
bRXfSL/DNP/L0t8n/l7RNzS+RPSIxr2kv0bjfqKHs7+7VOPLQjZT3/ZOnvsd
0RkaT5VsZtVzOAtn4ts7RedoPFGyb0n3Q/FfED9F/JXie4p6iH4s+U9EvxSd
K/1s6QdI/l3xLcW3Sj7nLdl34OxfEW3T+CzpRmj+ueJ3it8hukDjC+NO46Vr
l3zXmaK9MuiVkh1X2oadpRsXtv1R9hk521Wi80SjpTtRc76Xfd5p4ruI/7n4
X4suTt7jktgPW/4qdJM0XiLdWs05tFYUv5DsQo0n49PSdx6YvCZr/5S7iZ8l
vr/4WeJf13kHiT9F/Grx/xQ/Unxn8b1F09lb3/xWusdEj4qmyBdTRZ2kP1W0
UbJNojtEx2vuqPi+i2iMxlmyDdLdKKoXfUnys0V3a9xGuklxXtY4RPyQwmtz
J+52vaim8TrpP6l4/a9Jf4P4htINjvOfKRqqcQO+kW6tqCDe9HOSdJvFH5Rs
8zPErxLfVPxY8ROq/v6LohWSr4yzshZrcmZkzYNn7lLx7+s8fcXX6fvl4pcR
g9KdXnr8XsX3QbZFfGN931/8WaXP+N+K92S9B8V3TLZZl7AfMUJsoLtO9Kbm
95N+iPabK/7tin3QKYi93q1Yd63oHY37SDa46hhvFfFIHF1ROldOkuwB6eZj
E/FbxDeVvX+THYvEzxx9v0D8UeIHiD9Hc8eK5mu8XrJGmt+u9Nk44xzNXSg6
Urrhkn1Vuj9mxxIx1ae0D/ElMXOPdN8XtY34vYi1xf9da/UQ37Z0DnF27nCX
dIPEXws2if9d9n26i36v8aWSLYozsDf5y5zLJB9Y+tsns8/EWfqKDtMdZkq/
UmvOFX+Q+KXil4kO1ri96HGN10t/A/4n/0QtJW8laqxxN+me05knZfuF2CRG
yZG2mvOwxpsl2yp7Hiv+NnJD/DLNPa5mGePlojmi2aLjJTsh9rif2C689/kR
72AYWMY3fLuBnBR9tuY92esW0Wmlc4GcWK/5WyS7GSI2wwYzwNJk28zkHOJX
iU9a5w9gebIPsRs5DNYfnJzbnP8ujddKthg8Ea3T+E7JjpFuh/baLtop+a7w
P7mYknObO96j8YrCdyenwaZKcq4viXggfz4n3VrRGnCD3A5cPC85ZoldMAgs
OzoZm9pp/Uc1vlmy7WGfR5LPuDry/ohkTFgV2PiaaI/olYrPgz/fqBg7O0f8
gklg54lar41oveT1pf1FbKyJs4JH/6k458l95t4X8bQ+4uhuYqXwN6yBvIPk
HUXNa7Yl591UdX6/VTEGkO/MYS423hE+P+B7allp/RP6vr7w2tR6sO/05Jrf
qjRWgBmLs22yqnQMYSswrU76/RVjXcfSuYlP8M3J4a+Xxc8QP6ZqPDpU628X
34y6F/gAlnWIfNpS+MzkKLW2WeQuNXqO+AuSazcxRWxRDxrWXMOo5dR0ahs9
ALXkmOTegBoO9hyWXNvJGXJno/jD9f0RooeILclWls4JcgPMr4/9FpXOSWKb
fJghOkrjZjX3ANivSXJvgOz25Jxh7tHid8X6G6q2Mbamp6G3oaZdH/kyS/Pb
B36WxGg2ZoAd1KzN0XdQGz6fXIepC/QOYCbYWWq9lcn5+umac4hcWif+EPGX
hz1OFf842CzZNo1vkmxh6b6HfKano7drLH195GN91T7El9Rz+iDWYC36MfpC
agC1gG/4Ftqs8aaoD+QsuUsN3JVt8xWiJuELeiJ6PexDr/Qv+pHsOcxlvDHw
D9mA8H9/yV6Jvop6drn4Z6it1EyNV0u2QLoG2mO5+OvEjyxNI0RFzTrih17y
Gs35Wbb+wFzxr4mvaM4i6gExKHt8Svzq5B5sYmmaEHUDHT0NtQz/0Ou8KhpM
fyPaq/HHojnJNZfaO55407ivZC9l+ww/zo5a8BmNd8b+08T/WXOmUp9FL2bP
XRXxxzf06fTL3SR7Vvo68XPF9xD/fPYarMWdPsmucdS6NZJN4VvRYo2HS7YH
7Mquh8jQDRPNK3yf3dkxkaN/IVapq9T6UZK9lW3nhcn7YcsTpL+6ML6Cs09r
zosVvwF4C1BjwUYwskXN9Ztaj3+p709l34078jYAfwZqfCx3yO4D6IcvSq77
+AdfjdX4TelmZ/fr1MRBVec19iVnyd2nKq7l1PRGpWPi7GSMIVZaBF4+rzmT
wbOIb/CQ3mVJ4BWYDrZjc2x/lei57DcUPsI3PcH1yNd7NW5ds0/x7VLqU9Ux
MVf8wsKxMjvq8x3JPcKRpd8e3Im7IUNHzaB24MOhyTGG/+aJ31dxPaOG/IP6
mv2umFy6hwOrweyW4v+SnWsHcg7/V90Lfqg5E6T7EzmY3JMNKV0jWXtf+Jda
AhbSA1FTXqaHS47JoRFPQyOuX8i2F2uyVl3YCX93T35HMmd+cgzybZvSvTg9
+TTp7s/GMjCNXmVKtq/w2eGlMQfsoQeiF2L8AHhVWIYNsAXvkFxzzaP2sT69
P7Ibwz/MrQb+0ROPLt1Dbwv8Ib+nB56A0WD1uNI9NNgIRr6L7YlT0dsafyB6
Vns9U7EejKtLrolg37+J4fAn8QCe3xr5C97tk35c+IN+Fxln4UzMfT07N8lR
3nqtw34vaL+p2VhGrpPzYNoC2WR+1X7bHfWVmkGtODkZk8FmbIgtj4/8flrr
PVnxfReInyH9/uwYJ9bJb3ohfIZt90ePxJugdXKPSK84MftsnHFg1b0R+EAP
QS/Bm5S3KW9s6gf1GRyiVj4WdFpyzUbH+5j/BrgTd+M/B/57uDo5H+lB6EV4
8yyIO3P3/8cq/0FQ+6iB3J/79tLaL+mM07NznFynps3V+u+Hf4kP/I6P8TU9
93Bio3QsbZDsI2p7aWwin/lv4cCbXXyf5FwEw/4afgLbuke9AfPAvvdiffZk
716l/0ugh6eXby6+d+H8BAtuze5/6wr3eoNLv/2oWa/GXsMD/9nzHfaOejoq
cpdcpiaRw03FXxHxhO+IUbBra3LsTo77TknGHu7M3anx1PqbsnsheiLelryT
ORtnXBH9A3iyI7lXGBH1iBpDrSEHsfWkyC3evLwfeSPwViAfyJUlyb0CeDxB
/JnJ/3XNj3yhh6BW94j+BJ8SN3+L/BqfjJvUe2rD+cn/xYwp7Vt8gC/oIfbG
OUdGfSV3FyfXVmrWR/F/DLWMNyT1Bx/VxGdRV413Rz41wedRf8A26hW5Rs5R
W8FksLknNVH8h9Ev4CPwdF7p3g88AKt4E/A2eDD5LcMbhV6Ynpi3y9TIP3za
v+qemt6afo7/Noj5PbE/ubCt6t6e/OTtvKxqLMJm2I43Nm9tMO6DsM2QwHNs
tCj8wxuZHnxx1dg3TPwb2cSYmCQ2Jwe+Y5N+vH1Kv5V48/H2w0f4ih4AXJ8R
/Q81n9rPm+XjinsI7A9GkTfkKthFDBHzxDqxxZuL/1p4L/EW+x9xprYn
            "]], 
           Polygon[CompressedData["
1:eJwtlnlUV0UYhm8gefXnJcU13HAPl/zHpdJSS620xSw1W9wVt8ByQxFUVhEV
wQAFQUBAc8Mtl8qyU6e9zmk9WamltptatrhlPe+Z74/nnPe+883cuTPzfXPb
TUoYGR/meV4mRMCqwPP+wJgR8rzV6DWwyfe8MtoOhHvei/A8z8W0V6Mv0X4Z
rkB4pOfl4hXQlkxMCmxCH8TrSFsn6Awd8TvASnvXdGJ+Q88jbhX6HPo8LEUP
xRsIg+A9e0ceei2s0VyIeQZuRK+nfQMUa954iXgX0L/rPTAXryVeW2gDO/Fu
ZR49YCu6Gd4AdC26A7o9xMC8kBtvEToJFsM/xLRjLnvRZbQV0K9Q40Ala1WO
fxRqaJsNYehrfOu/UETf7bANdsA9tCUTUwWvomMZt5pxanz3jv14+2APlBLT
CL8hLKTvMcabiJcEt9PeD+6AKtqqiClnLkd4fgU2E/MsRKGraa+BLRBN3M2Q
gb7AeF3Qk4k7ib4CVyE5cN8RTt8IqAOFePmB+yZ92yWYRcybeI/TPhamQmbI
rY3WqNJ339iV76rQ+WB+L/P8ElSE3Hu/ZZzTcAqWMFaifWck8TFaE9iIF9Cn
AdSHePpl2vzj0F2J6QZr8XIhT/tle5lle/0cegU6O3Cx6lOOjtQaak2YYwuI
hh14JcS3RbeBGNt77cdi+nzNe6PsXOt8V9g4CbRXojdDLP4t0Mt357UErxRd
yhrs5rlWZ9ry4hzjnYeLlotlilUuQsi+VzlYg94KW6AZc4qCEvRSxsmBVXCV
Phl46bBMuRNya6i1TKftLO+YhteC5+awDO8XvPboXPwl9LmI9yf8BU3wG8Mi
++5JxHyEHk7ccvRTtD0NnaETJNF2nbie6OU29tSQWwutifo+SN8HYJjmaOf5
NvRrtB2F1+GI8hWvJ/SGRcRMpP8EmOO7eX5OzMPoh+BJGIn3Gd4H8D58aPPU
O95GT0BPhDthCd47lo8p6LH0fwL+1rrjbcBL5TkNTuNNwpsMM2AFbV/gjUA/
AmO03njNiG0KC2g7w3e3RreCltBdY+PND9w6J9PnBM/Hw9x37AlcnVK96gQL
iFkIsehuyiHVY2IGMc5AGOG7NVPu90H31rpYvr8QuNxvjG4KTcyrtbyYT9sw
4ofDOvRKOy86N/8Frj42RDeC5pY7Wqsh6MFwt9WwA3g90PczzigYDTND7jtz
AldrVXNT8R4lbhQ8ZnuUrVqunNH5hh8DV9vrouuBbzmTozqGnqt5wE+BqwfK
i76MPRiG6DvwWuG1hstWm84Gbmy9Y77dN8p5395xk+VsHfJonc4Y42QrJ+Eb
nXc4Dlm05RH3JXq07fUx9FfKNfQ4vFRIg5OqkdYnX/VCOeG7XC3F2wjFsJ62
dNUO9GF51IVii1WfDN/ducrzG8CDMLtzdQ/qHdk6i6q5Nr9reJWq/cpNy33d
yYdUI3TOtaeRbs9z0Ku1JnCdfuN53zjfrZnu5lm+W/s56J+Vx/Cr7dtsvDPo
7+GHwO2vcu9j9CfwaeBqgmrDNN/Fa38T0PHKXd2feCHmcgp/FnomTLfcmkr7
FO2DvV97rj0q0LdrXaFQ/wF4EVDX9k9eUciN7ePVg/rQn7H6wVDVZMsj5bXy
u8h3/yxaF51n1RvVne6QyFjf4cWhp8EUyMKbTp84WG3/Hfo/UK5q7L3ofbBf
9yIxY3xXK3Ru0kLuP+de5QzcB+/aGRpv9UV15oT9v0Sj74IBsAvvEByEw5Z3
ml+J7keOxzbluNZP9cbusI205/Gcb94uvJ2wPdzdb28wTl90H+gFi/EC4hpA
pN0tOqe7ieuC7gwdrTZpnYtUJxVje/lW4P7d9A/XP9zV2BSrhVNC7n7QPfE/
OO1WcQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
TVPczsZexO8auBbf+R8lpBHw
            "]], 
           Polygon[CompressedData["
1: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
P0v+uyTXcBbORM75DHrLO4M=
            "]], 
           Polygon[CompressedData["
1:eJwtlndYV2UUx6/w8+mH127TXC0rRwMUULRMRMRsOtDcKy1zBVqZmuZIpdQ0
zVHmSNNEtoggCLIEFExjFJiCiTlSrEQMzbT8nN7zx+d5vvd7zvve95533VZj
w0PDPCzLioCG8KNtWW+7LGsiTIAEx7Ie8bKsh8EfvsMrxFsEC2ExPItXQLs9
bstKgi54xzwtKxN9GP814v2hH6wjVgRL0C3pry20g5V4IXhF5K9CfwEVUC59
wRZivxKLRy9H/2KbMcnYgqCWscfgR8MFYmXkfY0+jfYm7gP5eHlQoO8/SSwH
2qBn4M2EWfI95P5Bf5vxN8FTPK/BXw1rYTpeBe2a4j8ArWA13lFiP+tYzxD3
xfeD6XgP4j0Ej0MWsVO2abOLWCLslvdq3WKI5VG7fAihfR1jWUFuPFyyzTu+
RW+Fb7QuhyAIvYTYUlgGf9P+OnjQxzDJxdsOI9AjYRyU0i6XnBzwJ3aJ9x9G
N6CNBcXER5G3hVgVejH6E4iAA3hzoT3aR+oEubIO8FaiV0E4lOO56MsTytDj
dV0lay2P2aaOUs+f0JPwYojFQhzMB1+8PGJ/MbZ6mIfXB68vPK3vnY3XGv0E
PAbZug42ojfAeqi2zZp8FT0VpsGX5Jy1zdqulO+Ek1Ci375V6g3bHLM/ZPw7
0VEQDTWM5yJcc5s5+EzWHgxFD4FBsjZod4v4TWjsZb5xOTlXea6DFbr+C8n7
wTbztRFvE2zWsYzGewPG6HxI3nCdyxE6v//Q1w23meexeHfInlUtc70DHQkb
HLMfZV8O1vHlQyd0ZwiABVp7f7QfdJA5JyeV/vfCITjDevEmpyvv+ZMls52c
bZLLczr+PPRcmAPHaRtHm1hoT+wgbSPlvEHfRTwdfY7Yeeig8Wh0BuwXZJ2Q
N4nYZJgCA+WbybsB12EPOYPwXofBsgfUi4Ij6N/gAnQi9go0oj8bzuMlkjME
rx59DW5BMp4fXiE6njFkQTZMwGtCu/vhXsggLw280HdCY3jLMTXtqPtD9snH
eONkPuBNXddS01L6LIEUtCXzLGcBzxVw2m2++x3H1Ooe9N3gwD7bnBNyXhTD
VcY5QGqHLnCb77mJV44eqlq+aRh6OIyBf/H+g4b0l0osGK+S5yqohgTb1F/m
4Xlix/Fi8ZJkP2qt6vW9Uuej6BIoho5ytuFdRl+EGuir8yZzU0afp6AaJjqm
blK/+7SmAXilsg5sc0b9f1ah2xJ/EtrJ2idnl23WYk+ZK3KKFNHyjS7yTsi6
1fqOxBsFoyEMWuKdJV4LV3StNcVrDs209tK2AdoTPHSOqsithEtuc4/IWELg
lNatF/oFx9RK5qYfuj+EQgptkqGbnDfEDrjNGnLTzzPgDeMdczYEortDL70j
5bzvge4JwXrmSJ1r6acOrkAfvAxYKOsO5sv5Rk4m3n7IggXqdWa//k5pvpLz
UM5QntOIp8I++Ej3bzf8y+RFyRko+wbvZcfMq8zvOd1HJXjFMneOuYfl3E3X
fk6gm9NPC7iIjpU4sR48B+udKXdnoJeJnSb2IvSGl/SskHUvd8Vk9PdyZ3ma
8zRDv6kJbVtDG9hFXRPAV/fxTtvsYdnLwTpX8XKvwizazoYPIYVYhGP+bw7a
5i6VO1W8rnjPQReX+feR+2OHrBOY4jL/SHNk7tG9YYCMk5ypeOEwTddcpm3W
n/wbyD9CC/UCdU3E2WYfy37urutY9miQ1Msx/1LL8JbCpy7zT/Mo3/w5OhJq
mKsAnpPIe4/ndyHMZe5k+d6Z6klsr2P+S9ag18Fal/mnkXt6BvoDeN9l/n3k
X2AROptYDuSCzXsaQTMvE5P/g92MOxF8dB+nodfL+Ux8IITCEfq6DRqcino=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1l2eMVVUQx+/bfY/dy7vsoUrvva5AAAFpSlUEBKRIkQCyShcUCGCB0JEm
SAvRDyaG+AUhEBKEiCJEgkpEJQQTiRqKIL0sHX//zPjhZP5n7sw5c86ZdmuP
nTZwak4URTVSUZQLXRCiaH0mipomUVSHMRU8C14+uDK4LXguYya4LrxmjK7o
noqjaA78GfB3g+dCG8P/IjbdSszb8b0eeBb4XXBD8FLwcnAFxpV0FD3MRtF8
eB3R3QbdxHgGvBG6wW07zpql0K0OfwO4pfTh58lmcBr8Hvw60MrIVIOWZJQF
50MzjArgPOiDtMmkwFfB5cDXofcYAfwbtGzG+KWhp5jngX+FTmCPDPgONheB
T8NLs/8t5j/pLAXYjk5FZNpmzA7tpbvoxKidsjvNc3tKQR+jlwU/hOYwLwOO
oHfcnirgAkYpcAJtwZm7gX9n/1rMy4NrQLOMquAy0FaJ3eU2bPtI7wB/HfQg
OouhS+EHZFqBe4NbQmsi0w76GTIDoKPgN4fWg98aWugykj2GbTH4OHS4v/s+
8Gvo/gC9wz0MBT/hKF+mzXdaIvMOtCf8PfDOIzNH50mZf+yLTUZvXR/b5sH7
ABv2Mp+t9wU/lzEf6JqxdbX+buh05s1T5rt/+Hvp3V5k3hD8MrSPY/F2xbbv
Aegat20VdAt7bIWehj8Y3Bv8CbhRYj55VOeL7S7X8/1DxQf8ldCtrvs0so0T
W28NvBv4RoTMcPQ6uA+M1j0onsDdoV0Uf+Ae0Gb+jk0UM4zW4I+hL/kZ+0M3
su4Gj9kl0DYpe9c5sfnJsthsWA1vHbKX08a/CW0fLE6yfK/rNtTP2H5NZQvf
Y77VVByCE3BDcGdwI/fbBi4r3W2x6Qs3db7W6op8afexnv6OuqtDsdmueB8B
7c63FvJxnSW29ddDN8fmb9s99mVDp2A+qtjqBe7BGKb7SizPyE8W+r7y2T7B
7JNtT8Ern9gdD4RfVnEEHhCMr3cYBC4JrqZ4QW84874Z0x0DHqx4BjdhtEfm
R2ReDxYDsqEGY5zeCl5Hf1O9bTc/o85VKbH4GhkMyzdHB7szvftqZIa671Xg
+zC3oSK4XzAfKpNYHlQsyD938q63cbMd0OaJ5c5FweJIvq3YqgWeBH8m/J3M
p4Fngyd7XEzMWP4X/234UxkTFPPwjiHfBZmTsenK376BbsnYPWyWX/v6M4Ld
i/infV+t/ZZqBfOL2FgGXJiY3mbwWXgJ8pegfzsWr8h9+03FNbrPpyy+Lnj+
OQd9A/0FGYtl3b/iWvH9iueWodDDzDsrh0OXuHwDZI/EFrur4C3MWIwvgi4O
Fnv7+T7Pa5xq3wnmnVLGVy1bBn8l35cr7lNW2w66zC9eE5XHJijHJmb/GfjV
wCPhTw6GR4Engau7/0wBF7m/VUks/2ivFfA+j+29VHN154XgPbH5pOJ9bTA/
kD/0gF8vWP3L5fs1ctFBvp0rsPwvP1+LzH3453XvyL7K/Aj4OjIPsvZepYPF
nOraitj4equy8Mcwz4E/GfozvJKqTdDyiquM1WjVLeWfWci8EFs+HOF4L7L/
sFeHYPlIeSmdWN1uBG9abLaFYDlf55K/9/cYUywUZ61u5/gdjoXfF5xKrI4v
1J7gR8jUDCavep4LPgB95LEzJTa/Uk/ymHEDXqVgNUu1Zph8MFgtVL7qFZs9
smuHrzME3lFwvmIKvEBrqkbKtmB1/UnW+hfdZ8WM5Vjl1Gf5/oC7OIHMePRm
xtYbqLe5gs5d1u+rfOs9T+7/d6tcE2yvKqplseVJ5U/l0SJ/o9Gx3a3saRBM
T/pNHCv3Kgdnmf+lnog9cxLrlWp5n5NCZmRsfPUptYPdrfqXyP3nPnAA9F/O
8hX8q+id9XOpd5J/qHe6VGDvq55nvmKWcQ/dftDLfNvvut96rVdPIT/U2Zqx
16609R6Ks8vIFSPTJzY/l52jlKv4Vj9luT6TeH8UbM1DWp99SiTW67WAfz1r
/n8NfrH3iuoZ93tf8bX3OQ/YayD0sL+13vy294H30b2ZtV7odoHpSFf7jQ2W
mxTXKffJVLAYVD4rAM+OzfeK0T2Ttvv5M211Wb1eVWTGee3b7vemuL5SYH6r
On8X/J3fm85aMlhu1ZuOCNZPqKbI7u8Zt/yt5MMn02Z/LvuOje29FNfTYzuj
+r5HyOcFs+9u1u5NPqZ8oJ5Ha95AZqLnVuVb5f80MuOUq4Pdr2Lhfe9zlAcH
+d3K/yv7P8KjrNVl9STVvC6pto6BjtfaKYv5con1hm2C9bHy/02qdcFqiWrZ
kGC9oGrrp7H1t6rpJYL1jjqLYk156SL2F3oeU08lH1PveqHA3kj/AvonqBjs
X0J2jnHblN/zPY6UG/8DOfp7eA==
            "]], 
           Polygon[CompressedData["
1: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
vgWLdSt6DvAYPoifzIgzn58c09zF/wCJZn0G
            "]], 
           Polygon[CompressedData["
1:eJwtlnlQllUUh19QxNfvk09wBRcEDbUyUVsVcUlNQTBxSdxQQHFBUHDBRBu1
cMsFE1zGlplmqn9bzEmtbBmnzHDGMtMps819w1wRtec39/zxzHfu75577n3v
PefeLyG3OKso3PO8CoiA+ijPq2noeTcDnncf+wE8GQI6n4KBEBP0vCRYgT2T
vlkwG170PW8kXGPMQWJMwB4B6XAebQ/aFeLOxXc6Y/MhF9oTawo+k+Eififx
K8COQx9L/0swDgoY1xYtG3svPp/BELRnIR6tCX2VjNviOy0BrSN0AJ++SWhp
2OkwCtqgDUV7HLs79IZmaFWM3wpvwTDNj88Y7NGQD0eZ91/W2RrfEfRn0z8B
JsJoSEXrD0OgBT4tYbjNm2bx3iTOLmhlMcajzYFp2FNhErQLujkysEdCpvlp
X8bIT/6QC5O1//ZNU7Bz4B3ivw2x5q/9i8Lugd0TkmEwWhY+o+Am33SYb8vB
DuCXqDXofKCPjX1COYA9CJ638xiPloedr3OFYdDL9nK49hxWE7MC3vBdDM07
SjGwB8EAaI7/BcuTNPwmwiTYDJt8d1aKG8IvGvraPmu/M+m7Sm7tZ+yX8AVc
inJ+feifAjnaR/x2EGs7fOC7tSuHsuAF7KFam51bKloX7KZBlw9Vth6tq87q
5AZz3oFT2L/CCYhk3Dn6d2MP1RyQrVpAT4cMyLO8T8HuC/1sriDaFcYeYOy1
gKsJ1cYM+pfS/wj9e2nvg1t2Xv/hl0s7z3d7sA/tFzgOl/EZrjyGs7amywGX
k8rtMcQdC+PgNv3X6X+gb8K+G+X2oBt+XSHJ1rcIbSEshmK0xKBbj9Z1RGeM
toK+8JDbD+3Lz3CbuMn47qR/B32/43sKkrB9jcHeABuhBn6Ek77z34nPSliC
XQaLoDOxFtgaPsTvK/gaHtN5oU2ECbaWBmgR2JHQSPuIVgmbsTfBBuiGzzK0
cliu77M51mOv0R5gf0/8Q9AA7Q7fdBeO2bcVahx+r8Bkq99OUIq9EBbAUnxK
YS52IczWHYXPb8QcFMa+0N4OPdDuEvNv3TXwDwRs7Bz6E+jfzZhPfXefKp86
oH1E+2PojtYELQDREGF39krsV2EVVODTLORia46LcI85jzN+AGvZgk8lHKYd
j999+sMUg/YqCKKdRSvGLodlsATKYA20UB3h8z72e/AJlNge/ISdyhwVtF+D
A7T3KwZ2FaTQd9R35zuf9jwoslxLQKvTWrUetHC0Y/j2Z8zrtNfDQdprdW6w
zs6vC34n0Afit412te59tMigW2sP/JKhJ5zGbzB+5ei7oBc+bdAvqX5Uc1Yn
9+Eqdq3qFWLxyWRsBpyxOh6r+wt9o/JNv5ZrtwLuLbmH33TVuO/yRXtUplyH
l6E3NEeL0Z2q/MWno3Ja3x7hHm7tgc7oodYF9eChTSPmVCiEvyyHdG7nsc/B
GahjHQ/htu2p9ra97ntoCiE7Z/k9HXLvgd6FNtA46N6KTqop1Qs8h09X3We6
O6y2GwZdnSsflZeNTdO8t4gdR7utchifBay1FJZDQ6tV5bRy+3Pf/e9Q7sYz
vgB7FsxUflida0widifoHHL3ge6krdhVUB1ytaX9aKz1qVZC7h7/A+1POA2N
bI4Z9ibrbS5GewZSsPtBrO3BfLR5UGL1qZqutf9BtQF3BtPsHdB7cIO+7+i7
HnD3kHLi0aC782rsfTlE/w9wxP6PrbQ7aQ/938C3vrub1qGthdWW49FoF6yW
Y5Q74Ck3iBlmdazcKNLdAfX4XbHcVS20JE5raGX12xbioF3I/c/SfynlqnJW
NaE3Y7HvakFxWqK1gtYh9ybpbWpmayrB3gbVvvs/pv8s72L/D7P1QAI=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxFl3mwj1UYx98f/V7u6837iiRFyDKWweDad127i+vKvu9LrhZLYy2lmqZt
+tsSLVQk2kgxGKnRUJZUyhJRibJvqc93nmemP955vr/vec45zznn2X5VRxcV
TCsWBMG9mSAojhwWBcEL4OnImmkQ9AmDYGwcBEuyQdAZ/lhOEOQzNgi+AePL
nNf4ePT6w9eBn498Hj4P+SDfLHAh8gLz+4CXoj/O9eui/w6/832dt/kGgtcg
I8Yng0NkLb6HwSWQu11nJ7Ivv58G90MWx7ZdcJuTIDjHXj3hA7jG7DGU8Yns
2Skye/pGZofsWYGcENu56qV2Rq05XHPhVzK+nDULwA/BN4TvE5td5+C3MD4E
/susfbJhJfx9jFfmuwm+wJeC+zGvDPJR9Msib8CXRxbCV0IWZWzeEr+T85wj
xaamcEPRacq3lrGlzGsBPw9+OtxY5DjtB3e3r98isj2ExVUITV5jbjXGxsPX
jf4fuw7fl7US8CXwMHArcHnWnAx+Av0B6F/I2txLyMr8HgvuxfiP/B4uP0F+
wzcMvA/ZPrJzNUb+lrU3PZe1Mel8jzzINxi8H1kavUO6S2yoyN7tsGFEbLaV
Bv8N3xn8BzoHwF1is0G2XOX3XX6fr4NXo5MLPoEciU5JxpaDH8/YnZ0BDwX/
jvwpa+scQZaL7CzVtSa/x4AvZ+3MOvsNZFXmz9AdhuYburfzendsbus2j+Gb
j05v1hkF7gxfnfFq8seM+YfOJ50OyNHo9ELWQOcae0yF/xd50+/2etbW6YLO
/eiU5WvmvpF6vChuKoY2V++qd2yJLJfa3egt5GvlQjuL7jTX3ygP2QT9buDT
+N4hznOePSvC70vsHvNiix3FvnLAr+i9gXwtsbhVbL6PnMu6z4DnICcxZxSy
JTZMQi7K2Bn+ZE515QnGx3veWBxafCnWzzI+hr1ngPOYWwT/HDqT4dZ7/K7T
e4bmn7Pk7+i8Ap4d2fsrjnZkLZa7gk9i70z0Fmds3b9zLKbeZK9Jkdnbw/ea
De4KnhWbXYXgac53A49G/0XWeRhZL7T8UEe5Cp2XtT78Y+AndSb0cz0fKq4U
F3qXO+EbO6/xmei/Cp7LeGvNVy6K7Z3nKa6R3fnmZMyfFoV2J9rjIfQeQXZM
7Y7Ez0JOdb4TfEPPCfWRzeD7gW9yB0We/wch26I3hfEpjE9FPgs/TfP4Fuq8
2j8yO2fE5gN9wVeQS7jHrdxn69h8Sb6xAu6Ux+D2rMWF/Ly4fJh1jsK9576g
PN9VuZG1NsGvhT+eY3l4GTjLnCqM92eNAbHFX0m4epH5fBPkP+h1hB8ZWx7U
eYco/4cW+6uytqb85yKytt9nA+Sg2O6mFGv+kmN+Ln9P+N0IfnBsOtKNUqsH
evdWyMLI/Gok8hF0FqLTWn7iMT4ytFq5AFyAzmB/04GhzVWMNEW/RWxnX8M5
moM/Um1MrOYpvrZl7a31LuOZly+/AfcMrW7rLPKRYR4XI0LL4aoRzVl/gsfg
AmQx5j+Ysffa6Hn4M+QT/u46g/KX7B8cWZ9QpLyVWj3Q+lPly8zfzLwPsHO6
12XpdY0t3x+E/ws5Gv4sslpqviUfk46479CplVpdV+/R02uc1lfPoD6idmr5
RHeZC24Tm09tSgzrbj4FN/S6r1pfwfNhHfBJxoqFltu/dnv2ID9PrLdoG1sd
V02P0Wnj96W4uCc1v1KebJTa/aqvKMXvA8z5IrF8JL9SvyOsXPhWYrW7AP4a
/Mdwg9TbMG+DY3GXGfsAuVq1mPWfCi1+FafiV3m9U+3bCG4f2747ErNBZ6mA
3M7vvfDtYottxXhJnRf+MHxH1fbY3vnDxLDebj34DF+GffPh8r2fU4/R0u2/
qnyfWK+m2rrB4129VmWvazXBVTyHyGfKuo/J1/ajf9LriPKSckkHdCulFp+K
WfUA/VX72GtPYrW5U2znVY+wE66C11nlRvUDquGfwG9LrP/Q2bck9sZ601uJ
5Q3lB+Vw1YouqdVcxU0x8A+J9Tfd4LrHVvN/Tqzuqv7ewdwgtdqv/FPgb6Qc
WMb7NOWZ2HOFcsLFxHo+9X6Xvd9T33UbOjW89o31vNQlsryn3vUscmBs9aRE
av6hPPAua0xE7yV0HkWe5ncQeg/m9Vr250QWy3pr9cbygeusWdzfKIusBD8F
XDuynkb9gHpD8Vf4fcTzj3L7pRy7B+kd0x27L+ldksj6KPUJNTz/KKfKn3uA
zyC/dTvlVw/ElvP3wvWIrcf5zXtm9SG57kv6fTyxGt1dfVqO7S87jib2RrLz
MLhDbL3kV4nlz0L0b+WYLys/347c7bHfOzYfVL+knvRUYvfS221TD7susf8F
ys31uf+tHlOKo9Jes1ULtK/61V2M95SfgU+A/wNtL5jE
            "]], 
           Polygon[CompressedData["
1:eJwtmHm8V2Mex89PnZPf09E5qZAirdKK0r1tupW03ZZ7b+kq3fZFWqSNZB9m
htes/pYYUxONKCXDaDDGEs0whilLKpIlFCXVLZ+37/eP7+s8n+f7PN/zLN/1
aTl1QeX806IoqihEUV19D2ZR1CCJopnCLUMU9cmjqLdoYRpFN4ieFf/FOIqq
GS/+VaKxois1ZnBucy4QfZuZrHPUnqqx32rOh8I/FqOoUvh54T8JD5DM8cLv
Cr8p3Fcy5uj/v1DfBM19T31fxybjbOHTRVVqv66+fyBP1EzjzxWdk9haV+j7
+4KtmfWwl+80fqfGHtL/RwqvFX5EuJ7Gd9D4eerrqrHH1HemcCNRU+Sq7xrx
vtL4/4t3XNRc/bPU11q8SFSu9rPibxTv76Jtsa3vuczOiLN6VPjPwm+JPlJ7
gvqCeM1F09X+UH3/Fq+f1rNA8u9W3zXiXSF8vfBvhacKXyiao/anGv9OZmvu
Ikpy20t7ta8T/6D474pfKnyDcHvJqC/+Ke1/rK/38czulHNaonFLRV+KP0z8
9eL/RfxBua2Bf09zor0QuaLNGrM1tvt8Su0S/199/e9r4UKw/+0U/z/Cg9EV
UYlkTteYl9T3tnhjNKZW/35SeK/wHtF6tc/S2MnifSL8X+F5wvcK3625Vbnp
DLrznmi72r2D3WUn8VPXyWVq31EwXR0ufLPwL4WnCI8Rvkf4PuH5wg9JxiOx
2cM+redl4e3cjegVtU8Wba2s+dXMdJC75s5fUDuXjInivyX8Ymb3wX3l+sd3
mekwuvym+FtdP8bxr9hsCx1D1w6IdmRmM9gO97lL7cNFWxtrXCXcXfPnFkz/
T/p5TRF+Rfy/ZaaDr6r9Wmy62dDX973wx+i6cI3w++xBuI904SrhF4QfEG4i
/qSC3Ql3g86iu9z5Zr/vhcJt9P8DwrHw1cIbxV8j/LnWO1R4tfBK4RGp6ftJ
4f3CB8QfLrxJ+K/CT7t97BI9o3Y7yZstfh3J/0z4SfU/IVrHeNGj6tus79Oi
x9RuG8w2sdETwhe5PWDT2PYn+t9g4Yc1/sHM7hydQpfQhTZ+HifE/9TPhzPj
rI6p7wc//y1qb1Bf4vtFR9CVZtiI8FHhvcKVuekqOnudeKmfH3tkr+9ndhfc
CbozWuNHiRbpnBaLvuEfiekQtn/C/c95ohai77We0eJt4EzE2y2qjW39x3wP
tOnbx/4zO3vuoLn7H9a813lH3T9zXw9nZiOTRcNys50hat8sflv9u65whegu
tf+ovuXi7dGc1sKtROeLyrWH4aLP1f+F+yvssyDeV8Kf6X9DXJ+xPfZ+h3h/
KNgZdNP4Bfh+9R11/cKfvoHPcXtC3/fHFiuG+vpGa3w7yarhHIVLiQ/CpaJJ
7g/miNcT/yZ8p3B1MP6MxHwTPor4QhzoKV6vYGv4QXRpsLVtYV+xxYgzghF3
zN3C20RMiC3GFYP5d+Lbb4QnBrPRl2LzcdguOr/L72dwajaGDOZie93Yk+bf
KP4Vwj2EJwjfIzzG4/Xtwr8SniHcVbjK48lI4f7EcuHbhauEB9Anaq/+i0SX
iMY5n7g+nLsXdVZ/F9GlPmasx376qjX+loKNvVx4nvBt3EEw/cHXTlNfr9zW
ND1YnGatk4KtnT10ym1N/Js1dBQeKRqRm41iq/igJ0SNg/kmYg6xB53tlVp8
uUntgdiI5q3EzkWjyAGKZvPYPjazp2g+Dl83ghxFeLdokNqP4f9El0nGZMm6
VX0jguUM61weuQT+Z4vHi9LUbAbbwed1F64X7O6fcf9EDvBybD4f308fvgs/
wlhyCGIzMZPYucrjETbSLbWYDZ+c47j+39T9DfHvn5npH7q4zf09Z7U7Np/G
mf1L+B3XR/73nMcvcqo6wWIWcSwL5o+QQexIXbeJycRmYkSjYD57k8fvnqnN
3eb2gIznPX7iI7FdYh6xaYrnc7UeT5GxNjP/d6fO+9fqmxVMHypFZbnpLjaK
rT6k8efn5vPwfRs9BrRQX5nmL9GYvhp7JvoqvKJgesx5cxdbPHacyix/xEf0
ET/KrY8284k/bd3v4s9a5qbL6DR6vNb3Tww7or2cJn65+EuF+wWjy0WF3HgX
4kc9vyW/a5WbTGRhG41yW/Mwtz18WKWvH9/WVLin21u58Lm59dFGP89W+yzR
wGD+4VjR7pZ8bjWxQ7y+7j/IwxjbW3hZweYQsznLDR5nW5NDiX9XwfJxbBrb
HqW+tuI1wY4T89FlwWyOfyAbW8R2l3v8w4Y7BIvJxGLy9Vp91+g/14vfA3+k
8fPdf81LzT/UBMtByUWJochC5tDcdARdWSw80McscX84yePWUuHfCc8OFsPo
o32tqA1rTSxmENuG5CYLmQtSkz8zWFxCN6s8nt8v/tLUcgb6aC9LLWde7/ZU
klqNg3/a6jkYMZ24diN+CpvS3M6uL/hhYupQ4eW+njrovfufaZrXILc5/d13
k9N3EX9RwXL9INzV94O+FIVPz00H0UV8/Bi/b+Z3yO0uudOZqdUQ1BLj1K5O
zWfi69a5PiCro9sXMlf7fqkZDhbNJrHNVbHF0DWes1W7/XcMVo81Fu9IZrXi
DOE0sZqRPnhNEouznV3/iWHEsoaiixOzaeyEuDUysT2wF2Qg6wzRoczOhLNp
SK6UWU1AbcCZc47UTp1Fse+bM+FsuiV21tggtlaSmG3iE9h7y8R8BWeMbbIe
zh4bxBa75xY7Sjxek3OQW/ycgyRmw9htM7cfbLK5z+eu+yVm2+gAujA7MV3F
prFdxmPrxGBymYmJxeZBwWwRmcjGxxD7KxLzPRczJ7H4ShwnBhB7yF2JDVe6
/BrPf8p9/+MT2xNEm3j9c+4RzJfh0/AV6Bi6zPmiewX3x+hwHc8biO+LEnsz
gGhjc9jeeN//VOELsOXUbA2bq3Q95vyRiWxyAmq3WxPLFeb6edxE7pkb0cZf
4IsmpKYP6BC6NNnzD3zEMD8v9kOORq5W5vkMPmmA7xdfOCuxtwpqLmovYghx
Y5n7I3LiCs8/yDeoOfbKPq4OlvvN8fmV7k/5R5nHAWILbxjkSPgUfMsK7iFY
DXCt+O0Sqw3wYfiyRaLFwWo4ajnq7dfUrnB95s65+0Nuzw96ftPf7wsbwpZW
ev5CPtUjtTiEfmOD2GKN6xNvEvhk7oi7muaxkbx4PrmPcOPcfDq+nZqA2uBj
r3cOi47HVq/wbRXsPYUcm1jMeZJ7v+32jI9oId6XXkdgs1083mEL6DuxiBqU
tw7eIKhNeVPZ7nUZtQ5vCPs9/yDf3uf1EjUjcf514R1ej1H34UPwJdQslant
gbrrsmB7w0fhq9gze8dn4jvxk+g/byD1EquRWQ81FrUWNRG1UZbbWTH/kmBE
G5mHNS53f8GZcDa8IVDLUtPytoBPq+/7LfUcgtg5N7HcAn1gT+yFWpYaep/X
yeQ2nA25IzkkZ/SGcN3Ean7ya97Mdrif5i2NNxDeQnjDqB/sjemb2OrT9n6H
nGWt3y1vFrxdsN7zPJayPmo8YiqyeevgfvkH+Sxvhrx7fJRZvsD7xo8a84H3
HfH1MhYd3+n5coNgOoIsZP4vszeyYmI2g+1Qh56KTWanYLpEXyePA9Sk6Bi6
Ra36E4JOfZ0=
            "]], 
           Polygon[CompressedData["
1:eJwtlmlUVlUUhi8YJh9XLormkDiFmuSUDAqooQyKIijOOCCaaIpihppZ2eDq
V6tp9bfRLGtpow3aZKZm5YCkpuXQIIKIM2JmSs+7zv7xLN77nn3Od/a5Z+9L
tznlhUvCPc9bCxGwNOR5z4Xxt7nnlcNMnqfBfPQaeJaxcp7fDjzvfSak+J53
PdLz/oVl+M8zvoK45TCX51CM592LHgD9YBrxRTAQ7TPWEqIVQ+wASA+5sQCv
Av0C6z3K82p4gOe+0AeSoCteBHHFrDcM3R7dATpCFNyN1xv62+8Ox8uAEbAM
rwxvkUB3xesG3WEp3uN42ZAFqXgz8FLQrdCtIRZy4RG8VbASlhCTxr5SYbrF
xxCziOeFsBLW4hXirUC/SG5P8vwELCP+fhiPnqAY6ElcDyhA50MezCEmi7mZ
MB5m4CXaGdyHHg4Z0AXvLhiDHg05UELMed7TOdjE+9vK+7uBXu67fY1XPqy5
Gh6Dl9lfKf4zyo+YSMb7ovtAAky18ytT7rAYhhGTBnO1V5it90ZMb70PSIBJ
ePPw+mk96A/T8ObjtdV83Tv0Heh2kKg7AW1sLAO9wHe5D9DdgYHQB6bjFWlv
tl4T+d2C3eR7hHyjmTsbfwTjdxLfCeJgF+M74Qc4RFwGMReZdwE85mzDe4Wx
Op7PwKt2/y+ha6EG3sBbj5ekdwEH0L9AFXzP2A5bO4r12kOHkKsb1c86xnYz
1gzvY/QX6C3wNaSz1pd4p9E1WguG4l1lXgNsZOwzvMF476I3oweh/2PsJtTD
WdhgY43KC92TM+gFt8M44i/hXYTLEOg+4GXCceachBNwgLEhvjuPT9Bh7Dcc
rtqcQt/Vseq5AB2OV629Qw1M1HvFa0Rfg38C926q7KyOwnBi/tYY+jo0wRi8
qaw5Bcp0P60udddK0BP1XqEEkvGSIMXGdP9Uv4M0BwZbXaYoFrJD7j7ctP21
Q8dBJ7gRuH6ViE6GJOtNQ5kzBGZZ71G9xcMC/R6MtHpT/Y5VL0QXED/O7nGS
rZdud70z3jz0Qt/lqFy7QGcYi+cxVsVeRhKXA6PgYes5mdbPFqNL1avhHquz
UrxCnieEXH2ozvK1byi2OpqJVwyzrJfk2trlvutbi2y9KXiTddZWv+qTeg95
yhHyY1x+yrMo5Pqq+oH2V4F+CB60vruK8ZfoL0/z/BRU4P1oNar3/xP6Z6iE
3/B+hz8hi7FDeGfRI313PjqnYei9ePthH3wTuBqsRG9DfwfbVbPW91J91xfU
HzbjfWV19qlqSfUHn8MW+60c+91z6HqoM2+regZ6F2y3upwArcgpFlrDlcDV
R1t0G4i22jqPF4UOQXOrwQ/w/rA8P0R/BIfhEt5FOA+jfFfXqu8WIZej+otq
9Rh6L3of7A9cDTbTdxJugz2qK+Zdi3R9RnmnEZMPYYy31HfZ7lqItSNVG7au
aj8bXY0+A7WqWetrv6IPw0HrneoJ6g2Vlk8suq3uPsSHXF/QXib57jt+C90E
nr5bjHfXnQu5XqEanExcPHoU5CoX4qrJ4RS8xvg6fiORmDetB5+2HJVrsvoi
3g7YCesD945i7Oz1DhqUQ+ByUm4X7Jz1TR5n31B9S3vxu8fUuxiPY3+9IQFy
ibuCdxUadF+JCSc2DJpZD9C3W+d3ivEWPEfCQeJimB9AR7hsc/Ub6n3qgY0w
2ndn0MP+p9H/NucC9y3LRG8g5p0I18NOwHE4afvUXJ3Be+hNsBHeCtye9XtH
0EdVZ/C6neVf9m3RN6YW7xZeHvF1qofA3Rf1pFp7rg9cDe6xWlBNfIv3P95I
TZ8=
            "]], 
           Polygon[{{4102, 4101, 3157, 1569, 1579, 3159}}]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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

            "]], 
           Polygon[CompressedData["
1:eJxFmHlwltUVxt8X4X3hfl/1YtVWnXbGOm2nddppp2Onm522U6e1U9vRaV3r
giK1bthdq4JUWxEV2XdCSAgkBAiBBAIECIEIgbAHAoQdZJGiIAIVivT5eU6n
f5z57nPP/e57l3Oec8697qG+tz/VJUmS29Ik6arfHSFJWtQu5EnSEJNksXC9
8JksSSqFP5CckswrJsl8yWm1f6Wx7Rrzb43dIlmu9nmNnyFdVkiSbpIo6Vmw
OZjrrGS62rM0fqbG7xYeI/yO8FHJv9Q+Lsl7Jsnjmn+fxjToe8fU91PhVcL7
NO6s8N3CW4Q/FB4pvENzdUpGq71MfbOkOyQ8MdqaWfvlWssnC/aNn+n/61L7
9gDJaLVf1/g7pTsofEDyntq/0LiRapdJP0T6e9Q3VHMNkUxWu0wyRLJVug7J
ULWXaPw8jd8lPEy4q/bzsObpLemmdg+tYWNqfeguaPxW4QeFuwiXCVcJT9T/
H9D/Dwm3CV8rfbPwAsmX1b5Bsoh74RvMLZmv9jOSOv23XvKs2u/r/xv0//uk
/0j4iPBa4euE1wjvFH5L+FPCy6KNYez9kkTrmSx9pfQjNN990s30+1sk/Dfh
gZmdHWf4onSt6rsmt/WuVnuY+iZLN1hj7oq2J/Y2QTJOcnc0HWNe0tjx3j+K
OSX3Sl+p3yrJXMkejVmpsZ/R/G9Jt0JyVW7rb1F7tPTl0o/V2PvddvtItzc1
Oxgi/aTU5uc7D0Yby3+el3699EvU/qz+0yZd72hrZc2TJXXS10q/Se03pXtY
Uq52meQhxkpfIX2FcB/h30nWqt0m+a3avSST1B6vMcM1tntPs3lsfYGkQX1z
pdvPGI1tF24WPi08VXhQsP8yxyPCc4RrUvsG38InNwvflpuvlvh6Vkg/UHiE
3wfrfYzxkjs19i7JOfdHfONLwpuEV0k+p/YK9XVw9tHOhjNah+0Kv6a5BmXm
L23qWyzdMeEp0q2XfFH9X5CsVbsvc0rXKvl9NB+GS+AUfLtFeFFq/jxYeJpw
dWr3/xS2IzzBz/dx7l94ofB67FB4r+Rbmuvbkv1qvyBpkG6BpL9/D+74rvR7
hAvyxyAp6A6KkvHST5G+UeNflP5t4dXCt2v8TuEa55cW6V/y82b9N0rfKbw5
2l7Zc7vaXTT3NunvEN4hvE3yc7VvlWxXe67bU63m+4PwBj/v6yUb1f6HpEm6
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
1cC1Hk9Z338Byld6Tg==
            "]], 
           Polygon[CompressedData["
1:eJw1lnlQV1UYhq+lmD9u9SMdNSvLlpn2fd+zfZvKxl1LzX2vZirLXQQVAcUF
hRSDFEQQoRQBTU1l0VwQ9xXJyg0XUlRQ7HnnfP3xzLz3/b5z7rnnfOec26rH
kDaDr/E8LxwaQGbQ8y6FeF6873mbAp63GZai+zb0vEfgYThLThV8iP4A3oPF
5AzHW0XbNLWBZTAd7zBeProQiuArvGy8JZABY2kbjbcDPRldQM4KiMXbhlcG
eyCaWBL+XJhAbIP6QA9EL0CPJj4IPRiGwhD40vqNIpaIrkD/CcdgCl4MHEAf
goMwjZwE+pwN8yEf7we8JeS14zs7QHuoxrs+lDb1PK8Tzx2hhvxw37X5jvgw
+B6m453Em4OeC0lwBN6kzRvQGjJ8l1dJ3mk4BeHkVNPnJ8T7wX7e5fPOw/jl
+hZ4BT+ddtPgOG3m4aXAzxBF20nQS8/EZqETybuBNo/DE7CC2CS8LTbPmu8o
vAl4RegSKIaJQfeOE+gLUA2T8GbjeVp/dJbmCWZo3aG/rcso363XOvR62Kj+
8GYqF+KtRmLxMmmXAbmw39ajDL0NKuBB3rUUr7d900itK/6PVmtaW61xufXX
x+pE7+uL7mdjrkc/DSEEfgm6elPdxdk86ts0l0fRU/GSbV5noWvwzsF51S9e
J4hFj7Pv1vePVp94K2EtRNBuLP4YaE8sWjWCl4oOMoYw7Su8GXg55GTDmoCr
G9XBQkiDdNufM612NUdT8KZCHIzDy8XLg+XwDV4M7EPvhd22j7S+hejxxCIg
UrWqGtTeV//QBS+VMSyASMtXHXymedC+0BoSiw+4/bsLbydst/3Wwb5zFPGp
mlt9P97v/8+Hxgv56MF8f6Mwz2tGfTcPdeuZaPOo/EXoneiPyMsi/xzP5+EA
3jN4adpjPFcG3Bl2lTZ1cNHm6mu8rehSyLQzZz9eG9p+Co/BAt/NwTTiiyEL
upKzlz73QAqxe8nbZXVQS/wKXNb48MbgpaMHBN0ZpbNqA5RAKQRou1I1Cq+h
X4WXbf+uwWuGbgpNYI7v8rS/F6FP0/5MwJ0br+OdQNfCZdvTN+I1hptgvvZd
0NWn6vSM1VUS3Eb8dmgJRdpD9k1b0aU6b827D+8BuN++V2fEZvqpgn91Tmu9
tSYwj9gd5BXjTdTZDN00B9q/Vh+qk854OTqj0N0tPtx3Z22C3TW6c3bDrTY+
jVl6HXo9FKoe4Ba8FtAc5pKzNui+XXNws3n78J5CPwmP2vrqHG+L3k1sj9YW
NsHdeMn6RvSWoDu7khlfCqTa3fKTfWeJzhTYCON15kNHOwOGkbOV5y3wh/V7
AP03+i/4x9Yvw/prhb4L7rT5S/BdnSxD58JyqISTcAret7u2se4B7oMBPPeH
XN/dPQV25qywe2sh3vM2B5qLQ3i12sPortAZslU/9HeI/rrx/Dl4PF8HDaFJ
qNufAfZnJrlvo9+Fd1SHQbcPtR8bkdfH/g+0D7UfLwTcfOu+rLLxn8W7AnVw
GMrhFLxl/ek/Yg3jXw2/6Yzy3XsVP0rsGByHkTACRgXdf4fy8tF5UGDnQqrv
/l80rvqMvwGEQFPGWsH3DsIfCHm+W6+Wtj/usXrQ+fIc+ll42vqbDw+h43Q3
hLj7aDXjXwXFAXcf6k5Rnu6rMvR22GHr8QLeS/AiHMQLYyzljKU3z710J4W6
c3yZ/SPpX+lb8uox7p7Ev4Duegc5Lcg9QtuPeR6q+9x369sFnYO+lnh9uIR3
EWospjWPZKwR0M7O8xj0VXQdeLyrh70jGn8yzAm4862tjUXxX31XI6qVODvn
e+ruJG8Esf8AmvSeJg==
            "]], 
           
           Polygon[{{4286, 4285, 3226, 1803, 1813, 
            3228}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0uA1EYgOFvpq2ZqdqwrI2kNgQ7liyVlrY7WxfQxl/8/1wCCTciXIUb
YVWJPZ4hmXfeNzlzvpwzc/ujwTCJiD18iHW+TyMesKmfuc+NPGISPV3nArs6
5ww7usZVdHWFU3R0kpcfRmzTTxaxxd/c5jfzN/iVX7Cmn/gRy/qIDzGv+9zD
rF4p1zGjp7iBuv5yh/I+B+an5X6u8DGfoKpP+Qw1fc4XmNCXfAVPXHvdZH/H
jlu+Q6ELQ6d5gRfR1B3uoqWHPMKSHjvIJ1b1e/L/f38B1Wsfog==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MkuA1AUgOGjNt00iKmlFl6DhHdoqZoS09KwYlkJC5a61OqkplfwIqw0
8RQSNr6bLv78f25uzj25iwdnpdORiNjEZybijmujEZe4111+5LdsxCt6+oWf
0dVP3EdH99IZ2rqTjJZu8UNCN7nJDW7wu/l17qd3cKuv+SrtoPd5Dxd6lVdw
ohe4iCP9Z+9fbOtvLnHO/DKP8RqP8wTW9SRPoaKneQYbepbzqOoCz2WH/zLP
RWzpH/MPOe/tAo71Ei/jXO/wLmr6y90BbvRHZvi//9jcK/I=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Mkug1EcxuG/VIxXYUfCVo0x1IqExK5ba+ONCNfQUtWKoS02rFoWJLVk
SSIx1dQb8CQWvzzv4ss5J1/P0triaktEpFVLRDxyuTViRW/2Jpuc6YxI6dee
5pR+7ElO6Nse55i+7FGO6NMe5pAadpIfHOQ7c85/4ja39GBvcF139gLndW0P
sF+Xdje7VLFfvftFRbvODPMdEVkWuMMiD7RrH/JIOfuYJ9qzSywrb1d4qn37
jOcq2M/OL7PN3e26sHvZpyt7lnOq2ze+vdW9XU38/98/eTE3Qw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0EsuA1AYQOFf0kpMmCE60SFDJkSLqgbxLhOaVGIBbEBYRTfCiKSbUIq0
HototfVIfI3ByTk3N/nvI316XjwbiIgj3CQiZiyOkxElLOgLXuWPoYh35PUb
v2JFN7mBnH7hZyzrJ65jST/yAxZ1jbN8zxmumD/LV3yJaX3CZaR1ljMY1yme
wIjuuWsXg/2zuI5fb6hyiwvmt3mNP3mdN9DRm7yFrt7mHfT0Lu/hS+9zEd/6
gA/xo2vmJ53Z4jaG9ag7jfXRczyPSX1r/w5T+jrx/79/g6cwpg==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Esuw1EUgPHTxF/ULpCwEaWtx8CAGBGDRid9oKJFJAy9HwtgRGIVklpI
1aP1XoJfY/Dl+25u7snJHVopz5VSEbGImyRi32G8PyKDQ13gK94djNjBpd7m
Bi50nbdwrje5hjO9wes41WtcxYmu8DGX+Yj3zD/gIq+ioXOcRVWP8SiKOs0D
WNZvdn3Fgn7kJmb1PWe4lY6Y4DZP8jO/INt7yx3kdJffkdcf/Ikp/cXfmNY/
/IsZ/WD+PD9xG0u6z05Jb389zCOo6Fv3d6jr6+T/f/8AU3sxzw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DsvQ3Ecx+GfpU3QKuJSmzdAwhuRmqw2S72DBlG3MlRSd0YGiRrZGDWV
uIzul5mEN+A5MXzyfM8Z/vmfMzg5XSi2RMSEKqmIOw9D6YhhPdhj/ORAW0Re
H3Y/+/Ru97JHb3Y3u/RqdzKnF7uDWT3bGT6xnY+ccv49x1lQwx7liC6Tc5jT
uf3rfj86tW95oyO7zhMd2DXWWGqN2OAMNznLOW3Z8yxr217gonbsJS5r115h
RXv2Kte0bx87/5BNXqtuf/FbZ8l3uWtGF3bVu3VdJeel/v/vH3+LMrI=
          "]]}, {
         Line[{2, 487, 11, 500, 501, 20, 526, 527, 29, 560, 561, 38, 594, 595,
           47, 628, 629, 56, 662, 663, 65, 694, 74}], 
         Line[{1905, 485, 1922, 3268, 2845, 3269, 1940, 3291, 2853, 3290, 
          1958, 3317, 2861, 3318, 1975, 3343, 2870, 3342, 1990, 3366, 2879, 
          3367, 2007, 3396, 2890, 3395, 2026, 3421, 2024, 2046}], 
         Line[{1907, 486, 1923, 504, 3271, 1941, 3294, 2854, 3295, 1959, 3321,
           2864, 3320, 1976, 3345, 2873, 3346, 1991, 3371, 2882, 3370, 2008, 
          3398, 2893, 3399, 2027, 3423, 2028, 2047}], 
         Line[{1909, 2843, 3264, 1925, 2848, 3274, 3275, 1943, 3302, 2856, 
          3300, 1961, 3328, 2866, 3326, 1978, 608, 3351, 1993, 3376, 2885, 
          3379, 2010, 3406, 2896, 3404, 2030, 3429, 2034, 2049}], 
         Line[{1912, 2844, 3266, 1928, 2850, 3284, 3286, 1946, 3313, 2859, 
          3311, 1964, 3334, 2868, 3339, 1980, 2877, 3360, 3362, 1996, 3391, 
          2888, 3386, 2012, 3413, 2898, 3418, 2032, 3435, 2040, 2051}], 
         Line[{1914, 1921, 3270, 1930, 1939, 3292, 3293, 1949, 3288, 2862, 
          3319, 1967, 3315, 2871, 3344, 1982, 3341, 2881, 3369, 1998, 3364, 
          2891, 3397, 2015, 3422, 2900, 3394, 2036, 3420, 2907, 2053}], 
         Line[{1916, 1926, 3273, 1933, 3299, 2855, 3298, 1952, 3325, 2865, 
          3324, 1969, 3348, 2874, 3350, 1985, 3375, 2883, 3374, 2001, 3401, 
          2894, 3403, 2018, 3425, 2901, 3427, 2038, 3440, 2909, 2056}], 
         Line[{1918, 1931, 3278, 1935, 1950, 3305, 3307, 1954, 578, 3331, 
          1971, 3356, 2876, 3355, 1987, 1999, 3381, 3383, 2003, 3411, 2897, 
          3410, 2021, 3431, 2903, 3433, 2042, 3442, 2910, 2058}], 
         Line[{1920, 3261, 2852, 1938, 1955, 3279, 3281, 1957, 3308, 2869, 
          3337, 1974, 620, 3332, 1989, 3357, 2889, 3389, 2006, 688, 3390, 
          2023, 3417, 2905, 3438, 2045, 3444, 2912, 2060}], 
         Line[{2048, 2033, 3428, 2029, 2013, 3407, 3405, 2009, 3378, 3377, 
          2884, 1992, 609, 3352, 1977, 1965, 3329, 3327, 1960, 1947, 3303, 
          3301, 1942, 511, 3276, 1924, 1906, 3263, 1908}], 
         Line[{2050, 2039, 3434, 2031, 2019, 3414, 3412, 2011, 3385, 3384, 
          2887, 1995, 3361, 2878, 3358, 1979, 3338, 2867, 3333, 1963, 3310, 
          3309, 2858, 1945, 3285, 2851, 3282, 1927, 1910, 3265, 1911}], 
         Line[{2052, 2906, 3419, 2035, 3393, 3392, 2025, 2014, 2892, 3365, 
          3363, 1997, 3368, 2880, 3340, 1981, 2872, 3316, 3314, 1966, 2863, 
          3289, 3287, 1948, 529, 3267, 1929, 2846, 3262, 1913}], 
         Line[{2055, 2908, 3439, 2037, 2902, 3426, 3424, 2017, 2895, 3402, 
          3400, 2000, 3373, 3372, 1994, 1984, 2875, 3349, 3347, 1968, 3323, 
          3322, 1962, 1951, 3297, 3296, 1944, 1932, 2847, 3272, 1915}], 
         Line[{2057, 3441, 2054, 2041, 2904, 3432, 3430, 2020, 3409, 3408, 
          2016, 2002, 3382, 2886, 3380, 1986, 3354, 3353, 1983, 1970, 579, 
          3330, 1953, 3306, 2857, 3304, 1934, 2849, 3277, 1917}], 
         Line[{2059, 2911, 3443, 2044, 3437, 3436, 2043, 2022, 2899, 3416, 
          3415, 2005, 3388, 3387, 2004, 1988, 621, 3359, 1973, 3336, 3335, 
          1972, 1956, 3280, 2860, 3312, 1937, 3283, 1936, 1919}], 
         Line[{83, 725, 92, 738, 739, 101, 764, 765, 110, 798, 799, 119, 832, 
          833, 128, 866, 867, 137, 900, 901, 146, 932, 155}], 
         Line[{2061, 723, 2078, 3452, 2915, 3453, 2096, 3475, 2923, 3474, 
          2114, 3501, 2931, 3502, 2131, 3527, 2940, 3526, 2146, 3550, 2949, 
          3551, 2163, 3580, 2960, 3579, 2182, 3605, 2180, 2202}], 
         Line[{2063, 724, 2079, 742, 3455, 2097, 3478, 2924, 3479, 2115, 3505,
           2934, 3504, 2132, 3529, 2943, 3530, 2147, 3555, 2952, 3554, 2164, 
          3582, 2963, 3583, 2183, 3607, 2184, 2203}], 
         Line[{2065, 2913, 3448, 2081, 2918, 3458, 3459, 2099, 3486, 2926, 
          3484, 2117, 3512, 2936, 3510, 2134, 846, 3535, 2149, 3560, 2955, 
          3563, 2166, 3590, 2966, 3588, 2186, 3613, 2190, 2205}], 
         Line[{2068, 2914, 3450, 2084, 2920, 3468, 3470, 2102, 3497, 2929, 
          3495, 2120, 3518, 2938, 3523, 2136, 2947, 3544, 3546, 2152, 3575, 
          2958, 3570, 2168, 3597, 2968, 3602, 2188, 3619, 2196, 2207}], 
         Line[{2070, 2077, 3454, 2086, 2095, 3476, 3477, 2105, 3472, 2932, 
          3503, 2123, 3499, 2941, 3528, 2138, 3525, 2951, 3553, 2154, 3548, 
          2961, 3581, 2171, 3606, 2970, 3578, 2192, 3604, 2977, 2209}], 
         Line[{2072, 2082, 3457, 2089, 3483, 2925, 3482, 2108, 3509, 2935, 
          3508, 2125, 3532, 2944, 3534, 2141, 3559, 2953, 3558, 2157, 3585, 
          2964, 3587, 2174, 3609, 2971, 3611, 2194, 3624, 2979, 2212}], 
         Line[{2074, 2087, 3462, 2091, 2106, 3489, 3491, 2110, 816, 3515, 
          2127, 3540, 2946, 3539, 2143, 2155, 3565, 3567, 2159, 3595, 2967, 
          3594, 2177, 3615, 2973, 3617, 2198, 3626, 2980, 2214}], 
         Line[{2076, 3445, 2922, 2094, 2111, 3463, 3465, 2113, 3492, 2939, 
          3521, 2130, 858, 3516, 2145, 3541, 2959, 3573, 2162, 926, 3574, 
          2179, 3601, 2975, 3622, 2201, 3628, 2982, 2216}], 
         Line[{2204, 2189, 3612, 2185, 2169, 3591, 3589, 2165, 3562, 3561, 
          2954, 2148, 847, 3536, 2133, 2121, 3513, 3511, 2116, 2103, 3487, 
          3485, 2098, 749, 3460, 2080, 2062, 3447, 2064}], 
         Line[{2206, 2195, 3618, 2187, 2175, 3598, 3596, 2167, 3569, 3568, 
          2957, 2151, 3545, 2948, 3542, 2135, 3522, 2937, 3517, 2119, 3494, 
          3493, 2928, 2101, 3469, 2921, 3466, 2083, 2066, 3449, 2067}], 
         Line[{2208, 2976, 3603, 2191, 3577, 3576, 2181, 2170, 2962, 3549, 
          3547, 2153, 3552, 2950, 3524, 2137, 2942, 3500, 3498, 2122, 2933, 
          3473, 3471, 2104, 767, 3451, 2085, 2916, 3446, 2069}], 
         Line[{2211, 2978, 3623, 2193, 2972, 3610, 3608, 2173, 2965, 3586, 
          3584, 2156, 3557, 3556, 2150, 2140, 2945, 3533, 3531, 2124, 3507, 
          3506, 2118, 2107, 3481, 3480, 2100, 2088, 2917, 3456, 2071}], 
         Line[{2213, 3625, 2210, 2197, 2974, 3616, 3614, 2176, 3593, 3592, 
          2172, 2158, 3566, 2956, 3564, 2142, 3538, 3537, 2139, 2126, 817, 
          3514, 2109, 3490, 2927, 3488, 2090, 2919, 3461, 2073}], 
         Line[{2215, 2981, 3627, 2200, 3621, 3620, 2199, 2178, 2969, 3600, 
          3599, 2161, 3572, 3571, 2160, 2144, 859, 3543, 2129, 3520, 3519, 
          2128, 2112, 3464, 2930, 3496, 2093, 3467, 2092, 2075}], 
         Line[{164, 963, 173, 976, 977, 182, 1002, 1003, 191, 1036, 1037, 200,
           1070, 1071, 209, 1104, 1105, 218, 1138, 1139, 227, 1170, 236}], 
         Line[{2217, 961, 2234, 3636, 2985, 3637, 2252, 3659, 2993, 3658, 
          2270, 3685, 3001, 3686, 2287, 3711, 3010, 3710, 2302, 3734, 3019, 
          3735, 2319, 3764, 3030, 3763, 2338, 3789, 2336, 2358}], 
         Line[{2219, 962, 2235, 980, 3639, 2253, 3662, 2994, 3663, 2271, 3689,
           3004, 3688, 2288, 3713, 3013, 3714, 2303, 3739, 3022, 3738, 2320, 
          3766, 3033, 3767, 2339, 3791, 2340, 2359}], 
         Line[{2221, 2983, 3632, 2237, 2988, 3642, 3643, 2255, 3670, 2996, 
          3668, 2273, 3696, 3006, 3694, 2290, 1084, 3719, 2305, 3744, 3025, 
          3747, 2322, 3774, 3036, 3772, 2342, 3797, 2346, 2361}], 
         Line[{2224, 2984, 3634, 2240, 2990, 3652, 3654, 2258, 3681, 2999, 
          3679, 2276, 3702, 3008, 3707, 2292, 3017, 3728, 3730, 2308, 3759, 
          3028, 3754, 2324, 3781, 3038, 3786, 2344, 3803, 2352, 2363}], 
         Line[{2226, 2233, 3638, 2242, 2251, 3660, 3661, 2261, 3656, 3002, 
          3687, 2279, 3683, 3011, 3712, 2294, 3709, 3021, 3737, 2310, 3732, 
          3031, 3765, 2327, 3790, 3040, 3762, 2348, 3788, 3047, 2365}], 
         Line[{2228, 2238, 3641, 2245, 3667, 2995, 3666, 2264, 3693, 3005, 
          3692, 2281, 3716, 3014, 3718, 2297, 3743, 3023, 3742, 2313, 3769, 
          3034, 3771, 2330, 3793, 3041, 3795, 2350, 3808, 3049, 2368}], 
         Line[{2230, 2243, 3646, 2247, 2262, 3673, 3675, 2266, 1054, 3699, 
          2283, 3724, 3016, 3723, 2299, 2311, 3749, 3751, 2315, 3779, 3037, 
          3778, 2333, 3799, 3043, 3801, 2354, 3810, 3050, 2370}], 
         Line[{2232, 3629, 2992, 2250, 2267, 3647, 3649, 2269, 3676, 3009, 
          3705, 2286, 1096, 3700, 2301, 3725, 3029, 3757, 2318, 1164, 3758, 
          2335, 3785, 3045, 3806, 2357, 3812, 3052, 2372}], 
         Line[{2360, 2345, 3796, 2341, 2325, 3775, 3773, 2321, 3746, 3745, 
          3024, 2304, 1085, 3720, 2289, 2277, 3697, 3695, 2272, 2259, 3671, 
          3669, 2254, 987, 3644, 2236, 2218, 3631, 2220}], 
         Line[{2362, 2351, 3802, 2343, 2331, 3782, 3780, 2323, 3753, 3752, 
          3027, 2307, 3729, 3018, 3726, 2291, 3706, 3007, 3701, 2275, 3678, 
          3677, 2998, 2257, 3653, 2991, 3650, 2239, 2222, 3633, 2223}], 
         Line[{2364, 3046, 3787, 2347, 3761, 3760, 2337, 2326, 3032, 3733, 
          3731, 2309, 3736, 3020, 3708, 2293, 3012, 3684, 3682, 2278, 3003, 
          3657, 3655, 2260, 1005, 3635, 2241, 2986, 3630, 2225}], 
         Line[{2367, 3048, 3807, 2349, 3042, 3794, 3792, 2329, 3035, 3770, 
          3768, 2312, 3741, 3740, 2306, 2296, 3015, 3717, 3715, 2280, 3691, 
          3690, 2274, 2263, 3665, 3664, 2256, 2244, 2987, 3640, 2227}], 
         Line[{2369, 3809, 2366, 2353, 3044, 3800, 3798, 2332, 3777, 3776, 
          2328, 2314, 3750, 3026, 3748, 2298, 3722, 3721, 2295, 2282, 1055, 
          3698, 2265, 3674, 2997, 3672, 2246, 2989, 3645, 2229}], 
         Line[{2371, 3051, 3811, 2356, 3805, 3804, 2355, 2334, 3039, 3784, 
          3783, 2317, 3756, 3755, 2316, 2300, 1097, 3727, 2285, 3704, 3703, 
          2284, 2268, 3648, 3000, 3680, 2249, 3651, 2248, 2231}], 
         Line[{245, 1201, 254, 1214, 1215, 263, 1240, 1241, 272, 1274, 1275, 
          281, 1308, 1309, 290, 1342, 1343, 299, 1376, 1377, 308, 1408, 317}], 
         Line[{2373, 1199, 2390, 3820, 3055, 3821, 2408, 3843, 3063, 3842, 
          2426, 3869, 3071, 3870, 2443, 3895, 3080, 3894, 2458, 3918, 3089, 
          3919, 2475, 3948, 3100, 3947, 2494, 3973, 2492, 2514}], 
         Line[{2375, 1200, 2391, 1218, 3823, 2409, 3846, 3064, 3847, 2427, 
          3873, 3074, 3872, 2444, 3897, 3083, 3898, 2459, 3923, 3092, 3922, 
          2476, 3950, 3103, 3951, 2495, 3975, 2496, 2515}], 
         Line[{2377, 3053, 3816, 2393, 3058, 3826, 3827, 2411, 3854, 3066, 
          3852, 2429, 3880, 3076, 3878, 2446, 1322, 3903, 2461, 3928, 3095, 
          3931, 2478, 3958, 3106, 3956, 2498, 3981, 2502, 2517}], 
         Line[{2380, 3054, 3818, 2396, 3060, 3836, 3838, 2414, 3865, 3069, 
          3863, 2432, 3886, 3078, 3891, 2448, 3087, 3912, 3914, 2464, 3943, 
          3098, 3938, 2480, 3965, 3108, 3970, 2500, 3987, 2508, 2519}], 
         Line[{2382, 2389, 3822, 2398, 2407, 3844, 3845, 2417, 3840, 3072, 
          3871, 2435, 3867, 3081, 3896, 2450, 3893, 3091, 3921, 2466, 3916, 
          3101, 3949, 2483, 3974, 3110, 3946, 2504, 3972, 3117, 2521}], 
         Line[{2384, 2394, 3825, 2401, 3851, 3065, 3850, 2420, 3877, 3075, 
          3876, 2437, 3900, 3084, 3902, 2453, 3927, 3093, 3926, 2469, 3953, 
          3104, 3955, 2486, 3977, 3111, 3979, 2506, 3992, 3119, 2524}], 
         Line[{2386, 2399, 3830, 2403, 2418, 3857, 3859, 2422, 1292, 3883, 
          2439, 3908, 3086, 3907, 2455, 2467, 3933, 3935, 2471, 3963, 3107, 
          3962, 2489, 3983, 3113, 3985, 2510, 3994, 3120, 2526}], 
         Line[{2388, 3813, 3062, 2406, 2423, 3831, 3833, 2425, 3860, 3079, 
          3889, 2442, 1334, 3884, 2457, 3909, 3099, 3941, 2474, 1402, 3942, 
          2491, 3969, 3115, 3990, 2513, 3996, 3122, 2528}], 
         Line[{2516, 2501, 3980, 2497, 2481, 3959, 3957, 2477, 3930, 3929, 
          3094, 2460, 1323, 3904, 2445, 2433, 3881, 3879, 2428, 2415, 3855, 
          3853, 2410, 1225, 3828, 2392, 2374, 3815, 2376}], 
         Line[{2518, 2507, 3986, 2499, 2487, 3966, 3964, 2479, 3937, 3936, 
          3097, 2463, 3913, 3088, 3910, 2447, 3890, 3077, 3885, 2431, 3862, 
          3861, 3068, 2413, 3837, 3061, 3834, 2395, 2378, 3817, 2379}], 
         Line[{2520, 3116, 3971, 2503, 3945, 3944, 2493, 2482, 3102, 3917, 
          3915, 2465, 3920, 3090, 3892, 2449, 3082, 3868, 3866, 2434, 3073, 
          3841, 3839, 2416, 1243, 3819, 2397, 3056, 3814, 2381}], 
         Line[{2523, 3118, 3991, 2505, 3112, 3978, 3976, 2485, 3105, 3954, 
          3952, 2468, 3925, 3924, 2462, 2452, 3085, 3901, 3899, 2436, 3875, 
          3874, 2430, 2419, 3849, 3848, 2412, 2400, 3057, 3824, 2383}], 
         Line[{2525, 3993, 2522, 2509, 3114, 3984, 3982, 2488, 3961, 3960, 
          2484, 2470, 3934, 3096, 3932, 2454, 3906, 3905, 2451, 2438, 1293, 
          3882, 2421, 3858, 3067, 3856, 2402, 3059, 3829, 2385}], 
         Line[{2527, 3121, 3995, 2512, 3989, 3988, 2511, 2490, 3109, 3968, 
          3967, 2473, 3940, 3939, 2472, 2456, 1335, 3911, 2441, 3888, 3887, 
          2440, 2424, 3832, 3070, 3864, 2405, 3835, 2404, 2387}], 
         Line[{326, 1439, 335, 1452, 1453, 344, 1478, 1479, 353, 1512, 1513, 
          362, 1546, 1547, 370, 1576, 1577, 379, 1610, 1611, 388, 1642, 397}], 
         Line[{2529, 1437, 2546, 4004, 3125, 4005, 2564, 4027, 3133, 4026, 
          2582, 4051, 3141, 4052, 2599, 4079, 3152, 4078, 2615, 4077, 3158, 
          4100, 2632, 4132, 3169, 4131, 2651, 4157, 2649, 2671}], 
         Line[{2531, 1438, 2547, 1456, 4007, 2565, 4030, 3134, 4031, 2583, 
          4055, 3144, 4054, 2600, 4083, 3155, 4084, 2616, 4107, 3161, 4106, 
          2633, 4134, 3172, 4135, 2652, 4159, 2653, 2672}], 
         Line[{2533, 3123, 4000, 2549, 3128, 4010, 4011, 2567, 4038, 3136, 
          4036, 2585, 4062, 3146, 4060, 2602, 1560, 4089, 2618, 4112, 3164, 
          4115, 2635, 4142, 3175, 4140, 2655, 4165, 2659, 2674}], 
         Line[{2536, 3124, 4002, 2552, 3130, 4020, 4022, 2570, 4049, 3139, 
          4047, 2588, 4068, 3148, 4074, 2605, 4101, 3157, 4096, 2621, 4127, 
          3167, 4122, 2637, 4149, 3177, 4154, 2657, 4171, 2665, 2676}], 
         Line[{2538, 2545, 4006, 2554, 2563, 4028, 4029, 2573, 4024, 3142, 
          4053, 2591, 4050, 3150, 4076, 2607, 4103, 3160, 4105, 2623, 4098, 
          3170, 4133, 2640, 4158, 3179, 4130, 2661, 4156, 3186, 2678}], 
         Line[{2540, 2550, 4009, 2557, 4035, 3135, 4034, 2576, 4059, 3145, 
          4058, 2593, 4081, 3153, 4085, 2609, 4111, 3162, 4110, 2626, 4137, 
          3173, 4139, 2643, 4161, 3180, 4163, 2663, 4176, 3188, 2681}], 
         Line[{2542, 2555, 4014, 2559, 2574, 4041, 4043, 2578, 1530, 4065, 
          2595, 4091, 3156, 4088, 2611, 2624, 4117, 4119, 2628, 4147, 3176, 
          4146, 2646, 4167, 3182, 4169, 2667, 4178, 3189, 2683}], 
         Line[{2544, 3997, 3132, 2562, 2579, 4015, 4017, 2581, 4044, 3151, 
          4071, 2598, 1566, 4066, 2614, 4093, 3168, 4125, 2631, 1636, 4126, 
          2648, 4153, 3184, 4174, 2670, 4180, 3191, 2685}], 
         Line[{2673, 2658, 4164, 2654, 2638, 4143, 4141, 2634, 4114, 4113, 
          3163, 2617, 1561, 4090, 2601, 2589, 4063, 4061, 2584, 2571, 4039, 
          4037, 2566, 1463, 4012, 2548, 2530, 3999, 2532}], 
         Line[{2675, 2664, 4170, 2656, 2644, 4150, 4148, 2636, 4121, 4120, 
          3166, 2620, 4095, 4094, 2612, 2604, 4073, 3147, 4067, 2587, 4046, 
          4045, 3138, 2569, 4021, 3131, 4018, 2551, 2534, 4001, 2535}], 
         Line[{2677, 3185, 4155, 2660, 4129, 4128, 2650, 2639, 3171, 4099, 
          4097, 2622, 4104, 3159, 4102, 2606, 4075, 4072, 3149, 2590, 3143, 
          4025, 4023, 2572, 1481, 4003, 2553, 3126, 3998, 2537}], 
         Line[{2680, 3187, 4175, 2662, 3181, 4162, 4160, 2642, 3174, 4138, 
          4136, 2625, 4109, 4108, 2619, 2608, 3154, 4082, 4080, 2592, 4057, 
          4056, 2586, 2575, 4033, 4032, 2568, 2556, 3127, 4008, 2539}], 
         Line[{2682, 4177, 2679, 2666, 3183, 4168, 4166, 2645, 4145, 4144, 
          2641, 2627, 4118, 3165, 4116, 2610, 4087, 4086, 2603, 2594, 1531, 
          4064, 2577, 4042, 3137, 4040, 2558, 3129, 4013, 2541}], 
         Line[{2684, 3190, 4179, 2669, 4173, 4172, 2668, 2647, 3178, 4152, 
          4151, 2630, 4124, 4123, 2629, 2613, 1567, 4092, 2597, 4070, 4069, 
          2596, 2580, 4016, 3140, 4048, 2561, 4019, 2560, 2543}], 
         Line[{406, 1673, 415, 1686, 1687, 424, 1712, 1713, 433, 1746, 1747, 
          442, 1780, 1781, 450, 1810, 1811, 459, 1844, 1845, 468, 1876, 477}], 
         Line[{2686, 1671, 2703, 4188, 3194, 4189, 2721, 4211, 3202, 4210, 
          2739, 4235, 3210, 4236, 2756, 4263, 3221, 4262, 2772, 4261, 3227, 
          4284, 2789, 4316, 3238, 4315, 2808, 4341, 2806, 2828}], 
         Line[{2688, 1672, 2704, 1690, 4191, 2722, 4214, 3203, 4215, 2740, 
          4239, 3213, 4238, 2757, 4267, 3224, 4268, 2773, 4291, 3230, 4290, 
          2790, 4318, 3241, 4319, 2809, 4343, 2810, 2829}], 
         Line[{2690, 3192, 4184, 2706, 3197, 4194, 4195, 2724, 4222, 3205, 
          4220, 2742, 4246, 3215, 4244, 2759, 1794, 4273, 2775, 4296, 3233, 
          4299, 2792, 4326, 3244, 4324, 2812, 4349, 2816, 2831}], 
         Line[{2693, 3193, 4186, 2709, 3199, 4204, 4206, 2727, 4233, 3208, 
          4231, 2745, 4252, 3217, 4258, 2762, 4285, 3226, 4280, 2778, 4311, 
          3236, 4306, 2794, 4333, 3246, 4338, 2814, 4355, 2822, 2833}], 
         Line[{2695, 2702, 4190, 2711, 2720, 4212, 4213, 2730, 4208, 3211, 
          4237, 2748, 4234, 3219, 4260, 2764, 4287, 3229, 4289, 2780, 4282, 
          3239, 4317, 2797, 4342, 3248, 4314, 2818, 4340, 3255, 2835}], 
         Line[{2697, 2707, 4193, 2714, 4219, 3204, 4218, 2733, 4243, 3214, 
          4242, 2750, 4265, 3222, 4269, 2766, 4295, 3231, 4294, 2783, 4321, 
          3242, 4323, 2800, 4345, 3249, 4347, 2820, 4360, 3257, 2838}], 
         Line[{2699, 2712, 4198, 2716, 2731, 4225, 4227, 2735, 1764, 4249, 
          2752, 4275, 3225, 4272, 2768, 2781, 4301, 4303, 2785, 4331, 3245, 
          4330, 2803, 4351, 3251, 4353, 2824, 4362, 3258, 2840}], 
         Line[{2701, 4181, 3201, 2719, 2736, 4199, 4201, 2738, 4228, 3220, 
          4255, 2755, 1800, 4250, 2771, 4277, 3237, 4309, 2788, 1870, 4310, 
          2805, 4337, 3253, 4358, 2827, 4364, 3260, 2842}], 
         Line[{2830, 2815, 4348, 2811, 2795, 4327, 4325, 2791, 4298, 4297, 
          3232, 2774, 1795, 4274, 2758, 2746, 4247, 4245, 2741, 2728, 4223, 
          4221, 2723, 1697, 4196, 2705, 2687, 4183, 2689}], 
         Line[{2832, 2821, 4354, 2813, 2801, 4334, 4332, 2793, 4305, 4304, 
          3235, 2777, 4279, 4278, 2769, 2761, 4257, 3216, 4251, 2744, 4230, 
          4229, 3207, 2726, 4205, 3200, 4202, 2708, 2691, 4185, 2692}], 
         Line[{2834, 3254, 4339, 2817, 4313, 4312, 2807, 2796, 3240, 4283, 
          4281, 2779, 4288, 3228, 4286, 2763, 4259, 4256, 3218, 2747, 3212, 
          4209, 4207, 2729, 1715, 4187, 2710, 3195, 4182, 2694}], 
         Line[{2837, 3256, 4359, 2819, 3250, 4346, 4344, 2799, 3243, 4322, 
          4320, 2782, 4293, 4292, 2776, 2765, 3223, 4266, 4264, 2749, 4241, 
          4240, 2743, 2732, 4217, 4216, 2725, 2713, 3196, 4192, 2696}], 
         Line[{2839, 4361, 2836, 2823, 3252, 4352, 4350, 2802, 4329, 4328, 
          2798, 2784, 4302, 3234, 4300, 2767, 4271, 4270, 2760, 2751, 1765, 
          4248, 2734, 4226, 3206, 4224, 2715, 3198, 4197, 2698}], 
         Line[{2841, 3259, 4363, 2826, 4357, 4356, 2825, 2804, 3247, 4336, 
          4335, 2787, 4308, 4307, 2786, 2770, 1801, 4276, 2754, 4254, 4253, 
          2753, 2737, 4200, 3209, 4232, 2718, 4203, 2717, 2700}]}, {
         Line[{489, 3390, 689, 3416, 683, 681, 3410, 3409, 675, 3403, 673, 
          3402, 667, 3397, 665, 3365, 653, 651, 3386, 3385, 645, 643, 3379, 
          3378, 637, 3370, 635, 629, 625, 3367, 661}], 
         Line[{496, 655, 3389, 3388, 649, 3383, 3382, 647, 641, 639, 3374, 
          3373, 633, 3369, 3368, 631, 619, 3362, 3361, 617, 611, 3351, 609, 
          603, 601, 3346, 595, 3342, 591, 627}], 
         Line[{499, 485, 487, 486, 490, 3263, 491, 3264, 492, 3265, 493, 3266,
           494, 3262, 502, 3270, 503, 3272, 508, 3273, 509, 3277, 514, 3278, 
          515, 3283, 520, 3261, 521}], 
         Line[{18, 1938, 1937, 17, 1935, 1934, 16, 1933, 1932, 15, 1930, 1929,
           14, 1928, 1927, 13, 1925, 1924, 12, 1923, 11, 1922, 10}], 
         Line[{524, 497, 3268, 500, 504, 506, 3276, 510, 3274, 512, 3282, 516,
           3284, 518, 3267, 528, 3292, 530, 3296, 536, 3299, 538, 3304, 544, 
          3305, 546, 3312, 552, 3279, 554}], 
         Line[{555, 3281, 3280, 553, 547, 3307, 3306, 545, 539, 537, 3298, 
          3297, 531, 3293, 529, 519, 3286, 3285, 517, 513, 3275, 511, 507, 
          3271, 505, 501, 498, 3269, 525}], 
         Line[{558, 3291, 522, 526, 532, 3294, 534, 3301, 3302, 540, 542, 
          3309, 548, 3313, 550, 3287, 3288, 562, 564, 3322, 570, 3325, 572, 
          3330, 578, 580, 3335, 586, 3308, 588}], 
         Line[{589, 587, 3337, 3336, 581, 3331, 579, 573, 571, 3324, 3323, 
          565, 3319, 563, 3289, 551, 549, 3311, 3310, 543, 3300, 541, 3303, 
          535, 533, 3295, 527, 3290, 523, 559}], 
         Line[{592, 556, 3317, 560, 3321, 566, 568, 3327, 3328, 574, 576, 
          3333, 3334, 582, 584, 3314, 3315, 596, 598, 3347, 3348, 604, 606, 
          3353, 612, 3356, 614, 3359, 620, 622}], 
         Line[{623, 3332, 621, 615, 613, 3355, 3354, 607, 3350, 605, 3349, 
          599, 3344, 597, 3316, 585, 3339, 3338, 583, 577, 3326, 575, 3329, 
          569, 3320, 567, 561, 557, 3318, 593}], 
         Line[{626, 3343, 590, 594, 600, 3345, 602, 3352, 608, 610, 3358, 616,
           3360, 618, 3340, 3341, 630, 632, 3372, 638, 3375, 640, 3380, 646, 
          3381, 648, 3387, 654, 3357, 495}], 
         Line[{657, 714, 3438, 3437, 710, 3433, 708, 3432, 704, 3427, 702, 
          3426, 698, 696, 3394, 3393, 687, 3418, 685, 3414, 679, 3404, 677, 
          3407, 671, 669, 3399, 663, 3395, 659, 693}], 
         Line[{660, 624, 3366, 628, 3371, 634, 636, 3377, 642, 3376, 644, 
          3384, 650, 3391, 652, 3363, 3364, 664, 666, 3400, 3401, 672, 674, 
          3408, 680, 3411, 682, 3415, 688, 488}], 
         Line[{690, 722, 3444, 3443, 721, 3442, 720, 3441, 719, 718, 3440, 
          3439, 717, 716, 3420, 3419, 712, 711, 3435, 3434, 706, 705, 3429, 
          3428, 700, 699, 3423, 694, 3421, 691, 715}], 
         Line[{692, 3396, 658, 662, 668, 3398, 670, 3405, 3406, 676, 678, 
          3412, 3413, 684, 686, 3392, 695, 3422, 697, 3424, 3425, 701, 703, 
          3430, 3431, 707, 709, 3436, 713, 3417, 656}], 
         Line[{727, 3574, 927, 3600, 921, 919, 3594, 3593, 913, 3587, 911, 
          3586, 905, 3581, 903, 3549, 891, 889, 3570, 3569, 883, 881, 3563, 
          3562, 875, 3554, 873, 867, 863, 3551, 899}], 
         Line[{734, 893, 3573, 3572, 887, 3567, 3566, 885, 879, 877, 3558, 
          3557, 871, 3553, 3552, 869, 857, 3546, 3545, 855, 849, 3535, 847, 
          841, 839, 3530, 833, 3526, 829, 865}], 
         Line[{737, 723, 725, 724, 728, 3447, 729, 3448, 730, 3449, 731, 3450,
           732, 3446, 740, 3454, 741, 3456, 746, 3457, 747, 3461, 752, 3462, 
          753, 3467, 758, 3445, 759}], 
         Line[{99, 2094, 2093, 98, 2091, 2090, 97, 2089, 2088, 96, 2086, 2085,
           95, 2084, 2083, 94, 2081, 2080, 93, 2079, 92, 2078, 91}], 
         Line[{762, 735, 3452, 738, 742, 744, 3460, 748, 3458, 750, 3466, 754,
           3468, 756, 3451, 766, 3476, 768, 3480, 774, 3483, 776, 3488, 782, 
          3489, 784, 3496, 790, 3463, 792}], 
         Line[{793, 3465, 3464, 791, 785, 3491, 3490, 783, 777, 775, 3482, 
          3481, 769, 3477, 767, 757, 3470, 3469, 755, 751, 3459, 749, 745, 
          3455, 743, 739, 736, 3453, 763}], 
         Line[{796, 3475, 760, 764, 770, 3478, 772, 3485, 3486, 778, 780, 
          3493, 786, 3497, 788, 3471, 3472, 800, 802, 3506, 808, 3509, 810, 
          3514, 816, 818, 3519, 824, 3492, 826}], 
         Line[{827, 825, 3521, 3520, 819, 3515, 817, 811, 809, 3508, 3507, 
          803, 3503, 801, 3473, 789, 787, 3495, 3494, 781, 3484, 779, 3487, 
          773, 771, 3479, 765, 3474, 761, 797}], 
         Line[{830, 794, 3501, 798, 3505, 804, 806, 3511, 3512, 812, 814, 
          3517, 3518, 820, 822, 3498, 3499, 834, 836, 3531, 3532, 842, 844, 
          3537, 850, 3540, 852, 3543, 858, 860}], 
         Line[{861, 3516, 859, 853, 851, 3539, 3538, 845, 3534, 843, 3533, 
          837, 3528, 835, 3500, 823, 3523, 3522, 821, 815, 3510, 813, 3513, 
          807, 3504, 805, 799, 795, 3502, 831}], 
         Line[{864, 3527, 828, 832, 838, 3529, 840, 3536, 846, 848, 3542, 854,
           3544, 856, 3524, 3525, 868, 870, 3556, 876, 3559, 878, 3564, 884, 
          3565, 886, 3571, 892, 3541, 733}], 
         Line[{895, 952, 3622, 3621, 948, 3617, 946, 3616, 942, 3611, 940, 
          3610, 936, 934, 3578, 3577, 925, 3602, 923, 3598, 917, 3588, 915, 
          3591, 909, 907, 3583, 901, 3579, 897, 931}], 
         Line[{898, 862, 3550, 866, 3555, 872, 874, 3561, 880, 3560, 882, 
          3568, 888, 3575, 890, 3547, 3548, 902, 904, 3584, 3585, 910, 912, 
          3592, 918, 3595, 920, 3599, 926, 726}], 
         Line[{928, 960, 3628, 3627, 959, 3626, 958, 3625, 957, 956, 3624, 
          3623, 955, 954, 3604, 3603, 950, 949, 3619, 3618, 944, 943, 3613, 
          3612, 938, 937, 3607, 932, 3605, 929, 953}], 
         Line[{930, 3580, 896, 900, 906, 3582, 908, 3589, 3590, 914, 916, 
          3596, 3597, 922, 924, 3576, 933, 3606, 935, 3608, 3609, 939, 941, 
          3614, 3615, 945, 947, 3620, 951, 3601, 894}], 
         Line[{965, 3758, 1165, 3784, 1159, 1157, 3778, 3777, 1151, 3771, 
          1149, 3770, 1143, 3765, 1141, 3733, 1129, 1127, 3754, 3753, 1121, 
          1119, 3747, 3746, 1113, 3738, 1111, 1105, 1101, 3735, 1137}], 
         Line[{972, 1131, 3757, 3756, 1125, 3751, 3750, 1123, 1117, 1115, 
          3742, 3741, 1109, 3737, 3736, 1107, 1095, 3730, 3729, 1093, 1087, 
          3719, 1085, 1079, 1077, 3714, 1071, 3710, 1067, 1103}], 
         Line[{975, 961, 963, 962, 966, 3631, 967, 3632, 968, 3633, 969, 3634,
           970, 3630, 978, 3638, 979, 3640, 984, 3641, 985, 3645, 990, 3646, 
          991, 3651, 996, 3629, 997}], 
         Line[{180, 2250, 2249, 179, 2247, 2246, 178, 2245, 2244, 177, 2242, 
          2241, 176, 2240, 2239, 175, 2237, 2236, 174, 2235, 173, 2234, 172}], 
         Line[{1000, 973, 3636, 976, 980, 982, 3644, 986, 3642, 988, 3650, 
          992, 3652, 994, 3635, 1004, 3660, 1006, 3664, 1012, 3667, 1014, 
          3672, 1020, 3673, 1022, 3680, 1028, 3647, 1030}], 
         Line[{1031, 3649, 3648, 1029, 1023, 3675, 3674, 1021, 1015, 1013, 
          3666, 3665, 1007, 3661, 1005, 995, 3654, 3653, 993, 989, 3643, 987, 
          983, 3639, 981, 977, 974, 3637, 1001}], 
         Line[{1034, 3659, 998, 1002, 1008, 3662, 1010, 3669, 3670, 1016, 
          1018, 3677, 1024, 3681, 1026, 3655, 3656, 1038, 1040, 3690, 1046, 
          3693, 1048, 3698, 1054, 1056, 3703, 1062, 3676, 1064}], 
         Line[{1065, 1063, 3705, 3704, 1057, 3699, 1055, 1049, 1047, 3692, 
          3691, 1041, 3687, 1039, 3657, 1027, 1025, 3679, 3678, 1019, 3668, 
          1017, 3671, 1011, 1009, 3663, 1003, 3658, 999, 1035}], 
         Line[{1068, 1032, 3685, 1036, 3689, 1042, 1044, 3695, 3696, 1050, 
          1052, 3701, 3702, 1058, 1060, 3682, 3683, 1072, 1074, 3715, 3716, 
          1080, 1082, 3721, 1088, 3724, 1090, 3727, 1096, 1098}], 
         Line[{1099, 3700, 1097, 1091, 1089, 3723, 3722, 1083, 3718, 1081, 
          3717, 1075, 3712, 1073, 3684, 1061, 3707, 3706, 1059, 1053, 3694, 
          1051, 3697, 1045, 3688, 1043, 1037, 1033, 3686, 1069}], 
         Line[{1102, 3711, 1066, 1070, 1076, 3713, 1078, 3720, 1084, 1086, 
          3726, 1092, 3728, 1094, 3708, 3709, 1106, 1108, 3740, 1114, 3743, 
          1116, 3748, 1122, 3749, 1124, 3755, 1130, 3725, 971}], 
         Line[{1133, 1190, 3806, 3805, 1186, 3801, 1184, 3800, 1180, 3795, 
          1178, 3794, 1174, 1172, 3762, 3761, 1163, 3786, 1161, 3782, 1155, 
          3772, 1153, 3775, 1147, 1145, 3767, 1139, 3763, 1135, 1169}], 
         Line[{1136, 1100, 3734, 1104, 3739, 1110, 1112, 3745, 1118, 3744, 
          1120, 3752, 1126, 3759, 1128, 3731, 3732, 1140, 1142, 3768, 3769, 
          1148, 1150, 3776, 1156, 3779, 1158, 3783, 1164, 964}], 
         Line[{1166, 1198, 3812, 3811, 1197, 3810, 1196, 3809, 1195, 1194, 
          3808, 3807, 1193, 1192, 3788, 3787, 1188, 1187, 3803, 3802, 1182, 
          1181, 3797, 3796, 1176, 1175, 3791, 1170, 3789, 1167, 1191}], 
         Line[{1168, 3764, 1134, 1138, 1144, 3766, 1146, 3773, 3774, 1152, 
          1154, 3780, 3781, 1160, 1162, 3760, 1171, 3790, 1173, 3792, 3793, 
          1177, 1179, 3798, 3799, 1183, 1185, 3804, 1189, 3785, 1132}], 
         Line[{1203, 3942, 1403, 3968, 1397, 1395, 3962, 3961, 1389, 3955, 
          1387, 3954, 1381, 3949, 1379, 3917, 1367, 1365, 3938, 3937, 1359, 
          1357, 3931, 3930, 1351, 3922, 1349, 1343, 1339, 3919, 1375}], 
         Line[{1210, 1369, 3941, 3940, 1363, 3935, 3934, 1361, 1355, 1353, 
          3926, 3925, 1347, 3921, 3920, 1345, 1333, 3914, 3913, 1331, 1325, 
          3903, 1323, 1317, 1315, 3898, 1309, 3894, 1305, 1341}], 
         Line[{1213, 1199, 1201, 1200, 1204, 3815, 1205, 3816, 1206, 3817, 
          1207, 3818, 1208, 3814, 1216, 3822, 1217, 3824, 1222, 3825, 1223, 
          3829, 1228, 3830, 1229, 3835, 1234, 3813, 1235}], 
         Line[{261, 2406, 2405, 260, 2403, 2402, 259, 2401, 2400, 258, 2398, 
          2397, 257, 2396, 2395, 256, 2393, 2392, 255, 2391, 254, 2390, 253}], 
         Line[{1238, 1211, 3820, 1214, 1218, 1220, 3828, 1224, 3826, 1226, 
          3834, 1230, 3836, 1232, 3819, 1242, 3844, 1244, 3848, 1250, 3851, 
          1252, 3856, 1258, 3857, 1260, 3864, 1266, 3831, 1268}], 
         Line[{1269, 3833, 3832, 1267, 1261, 3859, 3858, 1259, 1253, 1251, 
          3850, 3849, 1245, 3845, 1243, 1233, 3838, 3837, 1231, 1227, 3827, 
          1225, 1221, 3823, 1219, 1215, 1212, 3821, 1239}], 
         Line[{1272, 3843, 1236, 1240, 1246, 3846, 1248, 3853, 3854, 1254, 
          1256, 3861, 1262, 3865, 1264, 3839, 3840, 1276, 1278, 3874, 1284, 
          3877, 1286, 3882, 1292, 1294, 3887, 1300, 3860, 1302}], 
         Line[{1303, 1301, 3889, 3888, 1295, 3883, 1293, 1287, 1285, 3876, 
          3875, 1279, 3871, 1277, 3841, 1265, 1263, 3863, 3862, 1257, 3852, 
          1255, 3855, 1249, 1247, 3847, 1241, 3842, 1237, 1273}], 
         Line[{1306, 1270, 3869, 1274, 3873, 1280, 1282, 3879, 3880, 1288, 
          1290, 3885, 3886, 1296, 1298, 3866, 3867, 1310, 1312, 3899, 3900, 
          1318, 1320, 3905, 1326, 3908, 1328, 3911, 1334, 1336}], 
         Line[{1337, 3884, 1335, 1329, 1327, 3907, 3906, 1321, 3902, 1319, 
          3901, 1313, 3896, 1311, 3868, 1299, 3891, 3890, 1297, 1291, 3878, 
          1289, 3881, 1283, 3872, 1281, 1275, 1271, 3870, 1307}], 
         Line[{1340, 3895, 1304, 1308, 1314, 3897, 1316, 3904, 1322, 1324, 
          3910, 1330, 3912, 1332, 3892, 3893, 1344, 1346, 3924, 1352, 3927, 
          1354, 3932, 1360, 3933, 1362, 3939, 1368, 3909, 1209}], 
         Line[{1371, 1428, 3990, 3989, 1424, 3985, 1422, 3984, 1418, 3979, 
          1416, 3978, 1412, 1410, 3946, 3945, 1401, 3970, 1399, 3966, 1393, 
          3956, 1391, 3959, 1385, 1383, 3951, 1377, 3947, 1373, 1407}], 
         Line[{1374, 1338, 3918, 1342, 3923, 1348, 1350, 3929, 1356, 3928, 
          1358, 3936, 1364, 3943, 1366, 3915, 3916, 1378, 1380, 3952, 3953, 
          1386, 1388, 3960, 1394, 3963, 1396, 3967, 1402, 1202}], 
         Line[{1404, 1436, 3996, 3995, 1435, 3994, 1434, 3993, 1433, 1432, 
          3992, 3991, 1431, 1430, 3972, 3971, 1426, 1425, 3987, 3986, 1420, 
          1419, 3981, 3980, 1414, 1413, 3975, 1408, 3973, 1405, 1429}], 
         Line[{1406, 3948, 1372, 1376, 1382, 3950, 1384, 3957, 3958, 1390, 
          1392, 3964, 3965, 1398, 1400, 3944, 1409, 3974, 1411, 3976, 3977, 
          1415, 1417, 3982, 3983, 1421, 1423, 3988, 1427, 3969, 1370}], 
         Line[{1441, 4126, 1637, 4152, 1631, 1629, 4146, 4145, 1623, 4139, 
          1621, 4138, 1615, 4133, 1613, 4099, 1601, 1599, 4122, 4121, 1593, 
          1591, 4115, 4114, 1585, 4106, 1583, 1577, 1573, 4100, 1609}], 
         Line[{1448, 1603, 4125, 4124, 1597, 4119, 4118, 1595, 1589, 1587, 
          4110, 4109, 1581, 4105, 4104, 1579, 1569, 4096, 4095, 1563, 4089, 
          1561, 1555, 1553, 4084, 1547, 4078, 1543, 1575}], 
         Line[{1451, 1437, 1439, 1438, 1442, 3999, 1443, 4000, 1444, 4001, 
          1445, 4002, 1446, 3998, 1454, 4006, 1455, 4008, 1460, 4009, 1461, 
          4013, 1466, 4014, 1467, 4019, 1472, 3997, 1473}], 
         Line[{342, 2562, 2561, 341, 2559, 2558, 340, 2557, 2556, 339, 2554, 
          2553, 338, 2552, 2551, 337, 2549, 2548, 336, 2547, 335, 2546, 334}], 
         Line[{1476, 1449, 4004, 1452, 1456, 1458, 4012, 1462, 4010, 1464, 
          4018, 1468, 4020, 1470, 4003, 1480, 4028, 1482, 4032, 1488, 4035, 
          1490, 4040, 1496, 4041, 1498, 4048, 1504, 4015, 1506}], 
         Line[{1507, 4017, 4016, 1505, 1499, 4043, 4042, 1497, 1491, 1489, 
          4034, 4033, 1483, 4029, 1481, 1471, 4022, 4021, 1469, 1465, 4011, 
          1463, 1459, 4007, 1457, 1453, 1450, 4005, 1477}], 
         Line[{1510, 4027, 1474, 1478, 1484, 4030, 1486, 4037, 4038, 1492, 
          1494, 4045, 1500, 4049, 1502, 4023, 4024, 1514, 1516, 4056, 1522, 
          4059, 1524, 4064, 1530, 1532, 4069, 1538, 4044, 1540}], 
         Line[{1541, 1539, 4071, 4070, 1533, 4065, 1531, 1525, 1523, 4058, 
          4057, 1517, 4053, 1515, 4025, 1503, 1501, 4047, 4046, 1495, 4036, 
          1493, 4039, 1487, 1485, 4031, 1479, 4026, 1475, 1511}], 
         Line[{1544, 1508, 4051, 1512, 4055, 1518, 1520, 4061, 4062, 1526, 
          1528, 4067, 4068, 1534, 4072, 1536, 4050, 1548, 4080, 4081, 1550, 
          1556, 4086, 1558, 4091, 1564, 4092, 1566, 1570}], 
         Line[{1571, 4066, 1567, 1565, 1559, 4088, 4087, 1557, 4085, 1551, 
          4082, 1549, 1537, 4076, 4075, 4074, 4073, 1535, 1529, 4060, 1527, 
          4063, 1521, 4054, 1519, 1513, 1509, 4052, 1545}], 
         Line[{1574, 4079, 1542, 1546, 1552, 4083, 1554, 4090, 1560, 1562, 
          4094, 1568, 4101, 4102, 4103, 1578, 1580, 4108, 1586, 4111, 1588, 
          4116, 1594, 4117, 1596, 4123, 1602, 4093, 1447}], 
         Line[{1605, 1662, 4174, 4173, 1658, 4169, 1656, 4168, 1652, 4163, 
          1650, 4162, 1646, 1644, 4130, 4129, 1635, 4154, 1633, 4150, 1627, 
          4140, 1625, 4143, 1619, 1617, 4135, 1611, 4131, 1607, 1641}], 
         Line[{1608, 1572, 4077, 1576, 4107, 1582, 1584, 4113, 1590, 4112, 
          1592, 4120, 1598, 4127, 1600, 4097, 4098, 1612, 1614, 4136, 4137, 
          1620, 1622, 4144, 1628, 4147, 1630, 4151, 1636, 1440}], 
         Line[{1638, 1670, 4180, 4179, 1669, 4178, 1668, 4177, 1667, 1666, 
          4176, 4175, 1665, 1664, 4156, 4155, 1660, 1659, 4171, 4170, 1654, 
          1653, 4165, 4164, 1648, 1647, 4159, 1642, 4157, 1639, 1663}], 
         Line[{1640, 4132, 1606, 1610, 1616, 4134, 1618, 4141, 4142, 1624, 
          1626, 4148, 4149, 1632, 1634, 4128, 1643, 4158, 1645, 4160, 4161, 
          1649, 1651, 4166, 4167, 1655, 1657, 4172, 1661, 4153, 1604}], 
         Line[{1675, 4310, 1871, 4336, 1865, 1863, 4330, 4329, 1857, 4323, 
          1855, 4322, 1849, 4317, 1847, 4283, 1835, 1833, 4306, 4305, 1827, 
          1825, 4299, 4298, 1819, 4290, 1817, 1811, 1807, 4284, 1843}], 
         Line[{1682, 1837, 4309, 4308, 1831, 4303, 4302, 1829, 1823, 1821, 
          4294, 4293, 1815, 4289, 4288, 1813, 1803, 4280, 4279, 1797, 4273, 
          1795, 1789, 1787, 4268, 1781, 4262, 1777, 1809}], 
         Line[{1685, 1671, 1673, 1672, 1676, 4183, 1677, 4184, 1678, 4185, 
          1679, 4186, 1680, 4182, 1688, 4190, 1689, 4192, 1694, 4193, 1695, 
          4197, 1700, 4198, 1701, 4203, 1706, 4181, 1707}], 
         Line[{422, 2719, 2718, 421, 2716, 2715, 420, 2714, 2713, 419, 2711, 
          2710, 418, 2709, 2708, 417, 2706, 2705, 416, 2704, 415, 2703, 414}], 
         Line[{1710, 1683, 4188, 1686, 1690, 1692, 4196, 1696, 4194, 1698, 
          4202, 1702, 4204, 1704, 4187, 1714, 4212, 1716, 4216, 1722, 4219, 
          1724, 4224, 1730, 4225, 1732, 4232, 1738, 4199, 1740}], 
         Line[{1741, 4201, 4200, 1739, 1733, 4227, 4226, 1731, 1725, 1723, 
          4218, 4217, 1717, 4213, 1715, 1705, 4206, 4205, 1703, 1699, 4195, 
          1697, 1693, 4191, 1691, 1687, 1684, 4189, 1711}], 
         Line[{1744, 4211, 1708, 1712, 1718, 4214, 1720, 4221, 4222, 1726, 
          1728, 4229, 1734, 4233, 1736, 4207, 4208, 1748, 1750, 4240, 1756, 
          4243, 1758, 4248, 1764, 1766, 4253, 1772, 4228, 1774}], 
         Line[{1775, 1773, 4255, 4254, 1767, 4249, 1765, 1759, 1757, 4242, 
          4241, 1751, 4237, 1749, 4209, 1737, 1735, 4231, 4230, 1729, 4220, 
          1727, 4223, 1721, 1719, 4215, 1713, 4210, 1709, 1745}], 
         Line[{1778, 1742, 4235, 1746, 4239, 1752, 1754, 4245, 4246, 1760, 
          1762, 4251, 4252, 1768, 4256, 1770, 4234, 1782, 4264, 4265, 1784, 
          1790, 4270, 1792, 4275, 1798, 4276, 1800, 1804}], 
         Line[{1805, 4250, 1801, 1799, 1793, 4272, 4271, 1791, 4269, 1785, 
          4266, 1783, 1771, 4260, 4259, 4258, 4257, 1769, 1763, 4244, 1761, 
          4247, 1755, 4238, 1753, 1747, 1743, 4236, 1779}], 
         Line[{1808, 4263, 1776, 1780, 1786, 4267, 1788, 4274, 1794, 1796, 
          4278, 1802, 4285, 4286, 4287, 1812, 1814, 4292, 1820, 4295, 1822, 
          4300, 1828, 4301, 1830, 4307, 1836, 4277, 1681}], 
         Line[{1839, 1896, 4358, 4357, 1892, 4353, 1890, 4352, 1886, 4347, 
          1884, 4346, 1880, 1878, 4314, 4313, 1869, 4338, 1867, 4334, 1861, 
          4324, 1859, 4327, 1853, 1851, 4319, 1845, 4315, 1841, 1875}], 
         Line[{1842, 1806, 4261, 1810, 4291, 1816, 1818, 4297, 1824, 4296, 
          1826, 4304, 1832, 4311, 1834, 4281, 4282, 1846, 1848, 4320, 4321, 
          1854, 1856, 4328, 1862, 4331, 1864, 4335, 1870, 1674}], 
         Line[{1872, 1904, 4364, 4363, 1903, 4362, 1902, 4361, 1901, 1900, 
          4360, 4359, 1899, 1898, 4340, 4339, 1894, 1893, 4355, 4354, 1888, 
          1887, 4349, 4348, 1882, 1881, 4343, 1876, 4341, 1873, 1897}], 
         Line[{1874, 4316, 1840, 1844, 1850, 4318, 1852, 4325, 4326, 1858, 
          1860, 4332, 4333, 1866, 1868, 4312, 1877, 4342, 1879, 4344, 4345, 
          1883, 1885, 4350, 4351, 1889, 1891, 4356, 1895, 4337, 
          1838}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
v2RKlzZZr5zp+XXRnJdwv2HPYi2JZLzdYn1JjOBMQsSI++x18ei5dmH1wpne
uKtbOvsQmW8SFT9o4jYWP8DET1ncWLxBPBVvwMSbUfVYfKLF3bH4RCY+Dcff
K9Ori8EsG65fXx+5or5FiIcgmde7YvH9++TTUUMw+7jdlli07Cq71Ufw4c5t
t0tN5enoPCXnjMzbYLTdMuGDBJmXkgTX2/o5iVju08QhG+6EEuMsPkkROw91
fph6U8sDzzi+zcHNC4Bn2dTHAeS7IqZj+xfmU/sXmP3rT+130Kb2O7TR+92b
wgf4ROEDMPjgqTGGJ3iawhNk8EQoPoHjHfih6qqqHWvtk3B2V5qUEVl3S6sB
l+8itvhoRmbJgYkB6MSqmzmJ2GP90+jrd3K+4W6Y8+qliBUUxEZ+Gj0/fN7Y
b/7lQAaM/z3jk+/TUNj14UWqK+EFnXk3L3+cmwarFq3mdeoOhW9DInqvh//B
Wyih8BYYvN1O4TP0XR3DZ2Dw+ShrDM/BsngMz5HBcxr/cQeF/8jg/wmBMb5A
iZ4xvkCGL2opfoHpFL8Awy/PKD4CLoqPwInmI5q/IJniL2D4ayrFd3Cd4jtg
+G4yxY/AS/EjMvx4juJTKKD4FBk+pfkXaf5Fhn+XLIyc+0AlDKefX+hueyQV
/Ksmeu4ldhqvtTBd9j4cExJXCrF2pEKZfcFBYTI+7dhBY/4zCTgskTR++0Aq
pBcuaOYgetR6LJVi1NNwIM3m7FT5MPi51Ke4iPg/vDZRUePNJbyUUfNOZtEZ
mHBIcYolwYFOTbybr5mH94J98xUzfdH5jLhwNZlX9QneLYqFGTj+5IZL08h5
spjXXNKL6G9rj70WejMBXz180mdurIdnbNX3uZJ4ezVbt9zteyJGPc7Rqoi5
AAsVrxRMJuPLdgYqXnlpDz17Zi6WD4iHM7x4Oo2MhzaddubqlQfZ30K77Xcm
w8Inmvt6SBwujAVZn2o/nLDx2PXZqeGwrjV1KIKsr/SanlCDr9G4z8Lq9c7l
54H76tdN9mS8YvuBvA0bE5Ansqzs8zx9LJIWH59B9C84t7fiuGkYZjcK1x07
aI3Lpd5EGhH/z/tmpVCUFoLWC8IC/94wxmWTRuLqyPi5vZeuGxh5oQsH/0Nv
U1Nsme1gbkzih3dcj9f2DZG40995914uBzQVttj/inzXQ+TKdOOj6RB6LMv9
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
QSszTglNck8XoOWr2OS/bdv7sPNyPk40fyzqy5WMZzy4hzcQ+X10XVs4W10b
73vHhyYCZVijOc7/8YVM9ND71KBE7k0HaPlINvlV30zKz5L76aBdk9uZkXgM
r5bPeTDwvzq+UjZ7rlPnB+TaPXZ+QOb8oEPX981mq+9b3rRrg+L6IgzfqX7k
1KRwlMoujHhH1reErr+bwlZ/pxjK+/rVhBIsv7VVQvpPHG63zN2x5zULyml5
YTb5aOq8hAf8x85LyJyXOul77h+2e+5D6n4B1X5j9wtg7hdFdF3ba6pOGZk6
5YOv7k0LPJ+B5xqbj7vpJ6PiJM1vsWR95ek6vjS2Or67FH/BJYq/gOEvXbqe
8awHVc/InPeuFzlKPCG4E6TsbT9tMAcDNvg255DzSR1dD9hK1wNOp+sBV9y2
8PiZUIZ/W0709uam4e+24a5csr7VtH/msflH0B2lDs8qxFMS811u+sei+nLZ
7InkvHSQrnN8dYGqc3xL1zlKOfC6bxFLw+16Gqpz16egeeuCO1lkX3TTdYjR
dB3iVboO8dI+R91LO/Jx2ZbCXzKS+Xj6rqqi/CtyPqTlU9jkJwuzqlmz0pAj
7VryykemaNlexQtkP8rQ9kx0/Lc9nqvnXNs1bIdVxoK+LXbJUKhqfDWK8MtK
uh6zm67HZOqp368UeHfi6WWc/t0vz60nDxV3udjzkXPX+/+wZ1jtyMvv8lFo
Y6SzsNQwAfuPiqe6EHv46PrKbnWqvvInXV85oCWuuP+vN7q+fZWVKeEFFovF
nXtG442uA73PVge6lLqfwlHqfgrM/bSXln/CJv/H/8/NbSudsO/HcY7jwWfx
w/GrfwtInAjQ9vxls6evqaSm8HcoKEw56qucFQ9tbk4L9Ij+j3QdKBdbHagb
dR8H+j4OzH385X/YE0rleVCAyvMgk+fRoPIA2ELlAZDJAxRS9x1Mou47yNx3
ttL7JYltv3TEOzy1jQzFQ0Zcge9mFODa53ITvUnczuGbZbB6agAkaFrqrneN
gF9yUvwnyH5sputYP7PVsQb9+uN1k9yHo4dsNIyWpsBuufIV4sQ/N2j5r2zy
QieCK4uNvLDp1PO9CkczsKvwj+BxYn/IsoOzQ06mg4FlYL3pMXus4bvScYjc
4y4Kb7KwnVEErSfvTussKILLmb8vziX7sYPWz2n8b/13qLwT3KDyTsDknb7S
9bZJbPW2oRtzG0pvlkCVdklf74MImOS/yCyC7KMf6kndJrZVcNj1j0BeaQrU
WSytNCP3LBsqDwY2VB4MmDzYAK0/iE1/JZWXgw4qLwdMXk6crvPlZ6vzJfCe
OTL5Kiy6vCc3V6gI2s3/wIc8wke1Zb/S3teCX31DzKKiAmhIUTuJNYQfqfwh
cMmM5Q+ByR9O7aRwtZ8NV2dS+SIUofJFyOSLtOo/6Hp11ICgoOpeSfE8OGS6
oZ2vkQUua3aHLOMvA2/HD2FGnenQaTQUZdlDzvNUHhW4zMfyqKBK51EDqbwr
yPKM5V2RybtaUfleeLR9LN+LTL7X5/hYvhcKqHwvMvlezbqxvDEoUXljZPLG
b7u2B2zx9cDYdM1eSUEHONqYKH2C7NPgnMg7XdUxOP9Twynj9B1o3Lk7ePR9
u9b6GTYFFcH4wWuPurG1EmS2fCl/Q/xTUb7OeCTcDmyTb767FkzW/XDOtwmj
uEfXqb1lq1O75RSqbPsgDevlL67MMN8KnMLSxY9JfM5uSVH5OCMLb5Y0Tl60
xQeP7T+0kO87CyZt3Px3XcolXJKY9PN1czDm7Z4nmkL8bGAaMa2kLg/71n06
/7AlAh/x7l+9hZwn+VW6eDKP5+LloK2mua2hqBuouOkD2aeNA/WKJ/R1ULbz
Z6q9oC1eXDc3/iGZbx5dJxjKVid4fCgq34X3Irauc+usRXfsWJQ1pDFaj0bX
4fKy1eFWa3Wrf3p5Fh4+cD//STAKYiWXPn1Ixl8MB0f19/viIs+o7inbg3He
5co2OeKfY7QefjY9t4W8tGNCLuGb4u6LkVaRmNEtK3WL7IsNP48qdOumYXGr
dOZywwDcG7PKew/x23fdnGXjbCNxjcm54LlFIThxnO7ITeJn7f/QP+v57+66
NZHYLzot4wRnOAayONa7EfnDdB3xarY64sUTZXe+M49Gpx1c6poubnjRKzF6
9D2GuRCnkfQrMh/dKbMXF57DzkX9Re1kXrHS916LKcShTPwcw8KV0RinJ1F6
m+DzMVr/Wjb9FRERESu6fHH7cw6PEx2u2G4lvXWQ6LGk65f3sNUvy/8Zd+4v
SxmCz8+wsjb0hs9uX7hH67bme4Q6H8t2Bq55C09PIXjg+efI5pvEzv6tGUe9
dnvgJfElzcsv2eEW597Uk6Pvq2n9qmz6dz+J2ClWfA7P3eYvOt5mjVILf+W3
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
U9XO8+oigTArv9OwQisZZ8bqPBgdn0P3JzxO9yespfvvnQ1tzTzACoOFPX1T
jc+5Q1G98sTR98MqtD2SbPZ0dY44b2aFwttpiYH9MoYgHrG5OuT/lS89/E++
9MMXo/4HN4IgZpsHZ8++RLT+461uRvyTTvdFXMLWFzF5nVxVqJIr8MxPH/+0
LRmXq3233knkk/+jj+KlBYI7J13xwwIrnlaN2QnQHdN4/DORz6D7EMqz9SHk
ps5FuJY6FwFzLppA92N8yNaPUXycwjI/Xl/c/OHh9gHfJPj48KPk+V+jdRb/
7mfI+LOvyW/uEi1/+NzhnWotZo8ThSav4//L+Mee9supf/7/gir7CzpKxp6Q
OCuy54NsIHotMawYvX89Y+vTGET3abzjZxxrqhaM89a/89/TEgUGl7KDkNhp
9x99FNMWBAhmDjljltRtl7SqWLAyVyn/SOStafmFbPKmR3atPVHhDr0/Ez83
lYXjTP5ZtW9G+/nQ9hiy2fOgXP6GxWs3mKM4Qa/YNRaPjrvC85Ton033k+Rk
6yf57uKaCT8veSPXszrZU8FhIBiQO6uf6Lel7RFjs0ddfGHUzeQg3MV1fr7R
a284nx33zJh89wDdH1KZrT9kJ+Uf2En5Bxn/pP9HH8ud1PqCPbW+yKxvPC3v
yiavaNFQ+f/Q9d5xPf7f43+kkC0ZkWwhM1TWQdlSUiGVpKLSVCqkvffee2vv
ojqEpBQysislhAohGf0ez67H8+3zur4//16303mex3msc07Xde72d/1QY9ee
N8b85jB5nOCK2//Hnr0se2J9Tr6daemH55VyMoe0nkTsGL2ak6econ0so1h9
LGOY9QwZzHpG7nqOofbYs+wRvH9dreJsCIy4YTrSRioKs7v3vnjX/7c/Zwur
P6eK5usPYauJS9I7F/MkRUGsXtNAE9H/ifaxjKF9LBNpH8uJjH6cyegHrv7U
f+yvXad2fZ5j740PTizoDZ8UC9elygU0OfuF6o9l6f+2KTPcyiQQMxcK3ozV
cUXvmbjyN6cOQ/2TwvLPlH1rVDf+IPYEpsS2zQ/Ercrempy+E2dp/8/9rP6f
MXu9hmRODMBQU+vRHfKh8Gz/l8vhRP4rtSeCZY+qLkL1kjDcZ3vSWzXSDzoq
g29z+knepf08k1j9PE9OyxTfetEPl29+NO4c2ZcLVk5b2Eyea9G+o9dZfUdz
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
0s4pSPjFwVq/gaCDCoHQ+3TJlC1E/+XhpusTsuLB9UrkPjUlUxB20bsmQOR3
MXVOuMDUOZFb53zM1EXhFlMXRW5d9DxTj4V4ph6L3HqsIFOPxb1MPRa59Vhh
pq6LaUxdF7l1XZ97hoJVE8xhQmqgfFNtIGTqbhh9lMzLpFftMU6pTqhx7Hy2
fl8KHBGyjlUm6/xrecmRpUmWcKLR0XLHjgjQWvxOazGnH+++yUk4LhwX7/it
M8E4GY0kO++rkfN5O+UqCnT+l6s4yvekyektvlh/NOvagh2X4c/ETwO6nH7d
daMzj+3JxalWci94ZQvhw7dfcXEPu8FbT2LM/OYSfOwyat6WnxlgdfOS5VAi
b7p3aeVrXcQclUyPndtPQZGFltzkqm54aPNxeYUHouuk8ooO97PY5clnfvIq
udc2/H4+foIOGsvpv1zjWYoLx5wz2PCUnD+Ua+lNuZbZlGvZsppntcfzULCQ
VTb9vCMYZCvVbYdweIKUD5tA+bBIOZIbhd/NHr3SGsr7PhoM1bSHs97w3Ivz
/tuNNuOnV8KgMzFp95HrkTAs90sDJ792ZHFmuXqUlm9uzPxdgZpHSpTyJgWj
tDlYNt0g+8tITMQ67xLerBszVM41BCdOvP7r8D1yzneKdSsK2ENK9PvF1aWp
YH/s2Lr3RI8t1Z/J0q94pO7+oXlOcHlns1KCaiKsOrw8Bck5qU/5tv0svq2I
z+br6R+L8U2p+LH3pZE4zTv44zgSl65yv7Rpr3IJrj5xke9CURzG37af5vyk
GxpmTNeU3xqE9bm+6523e8Il80ZbznciOlT/G5Z+3Kv9aeVnTbyncnMVr5c/
yO1VD7vJ6XdKubqzWVzdtuV2x28czcN3D2Z0wcQ47P288dV4sh+TT/en39HN
xL3rr5t5fotB+epLtgkkbnT87XJ4hL0Ojjr5QkLWyAbCjmsnVg381S/C0v9o
jfKa11rn8fCIVncx7+MYbb/l4k0iP4/yfAspz1eN8nwVDVT6ditm4Ra5Wj7R
nASUeiczagp5Pu6PT8Xp4iTc3hxw3W9TOt5+n2alSOy5bR2TvMwsDu6nNyYo
dKTBG+WB6YIcfjTl9tJ1CNx1OCVcckQ4vx+4VH9bNTfHCz6PuWbI+T/UZsov
3sDiF6/JS1vp3JgEsj8sRm8i+e/42rk8U8nvLqD831wW/9ehNmnzt1wrOBb0
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
P8+m83KbNS/dH7/Ku97zBXcJUQWlR9GQenbsATeynvd4VuzbxecNIiLHmxTH
RgIP1K3dz+EdUy65CYtLHtLRm46TiB9fiQdI80Wg/qrk6gEOl1zyhGmiizOa
GcX9eLM4DDftGfguw+k/T7nzS1nc+Q8PBAKSevRhwZ09yidNXXF4wuOtBkT/
auqfvLb/+seB8uJNWLz4H0ai2iVLQ6H50E7tpOlG4Np6xOkx+d1llA9+hsUH
j6dc9WgWV134eVplsGsiDKxqff5YyhX2+3t0OJD5XUn54DtZfPAwyluvY/HW
BVvk94VYJUGutdjukOYgKJwe9LOSrB9DyhNPZfHEm2LkRSQ1o+G3lPOMs4t9
oD61cQfnOxdryvVeyeJ636Zc7wgW1/visPH8gi+8Ie3TtJuB2nZwhndc0wtO
X8RSm2nnV0qj4OqGEjEfN1w7eu80DgczeXYPmJP14fD8s9OBy7IYdNXoLWed
rKJ+s2f5LcLAS3nj9AR4KLM8dF9TKGgMa9JOJfsr9B/c+VrKW29k8dabhPaP
+iKXBksn8W3wOh4N15a+/aFFzoEb/+BTy1Cutz2L66268+eKU2XJ0KDdum7O
Dm9wXm4y2H/yCOV6F7G43gYLb7UmSkaD6IBB09VdB6Fao2xMGpn34ZRbbcji
VhcUep4ekeoEYhm38gw3+2K/sqR4PHl+i/r/NMv/HYcYnvVYFs86bO8Y+478
Uxgx7NDjj6HhOBJSB45z3ot+lFuxbMAPREQTpB6LhkG9YH9PGLGnfl0+tkfE
wFR3n+fTCmKAzzqEL63vL0/8Pcs/7+wNdMIjIqG2Y4nlI9dI0Cx/7j6OjNeK
8rJPsHjZZy7MKN431xFuRua+29FjB7teCReokXk37vDWFV9sVv5bovqKebvB
//LT8Q1P+J1Ou6EGT19kWZAjJq+Iucjpr8JD/abH8tteymW+wOIyv4xouDox
Ngrfp0w4uGVFNPI5+C6zIuufn3KZ17C4zPoPxDRjv0fhQLDPz6iRsdg++WZt
L/GD9j+4w2KMP3Eq40/k+nPBvkH/w3bG/8D1fzYzvxh4cXB+gTu/0yn3+efM
/3Kf5/smXzLkicOCw+G1Ub2aOMXHW+An5/yk4z3HGq805S9rs/jLAY9X14pa
pmBWYO0Z8ckBmOfaX/eA3DsmlC88lsUXNgu1q5FQTcOAS43Njy+S+D17u/iu
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
baK/yxHc+qdqytiPhXD2db6vA8nnBzm9RzzD6T2CQO9xUs726e8vOeLVW2Nz
efal8EXp6TWhxyR/ek98knEwGA3P/Wxcd6cEbqhtneVKxg2LpDavN4jBl/oL
v98ZmwJ157aHppL3Iq7EM9tKNxHlbETv7/vsjDZNreXbST3geS9nTev0JJz6
dOpO3ZiD6P5nWRPfb0iu8VSSv0QiVqXqmnW9D8ApA0RyU8m9ECFxT17lfTw2
2Dt3pJnH4/UnRyVVSV2tovGt2/1IJD4NuDlhct9ofPqk1Hs+mWf4ki+6Qp2B
OPrELRWjcWH4fu++hY7kvLnefjRcWT4QZ43V6dYfHIR+16XEVcm5GhKjYXPc
MADrNc50uEv44pkTa56+J+N71H+VHC8LwR19Jsjq7PJHr6JIhTFk/JLvAmUt
sUgccGW90L78AMyG+bUyZP49b2ryp6jG4fzhIpaXajwxe0Vnqw153+Opj8wf
6iPzgPrISC6xbRWvtYLRY8tFvpsUw82h/fYWkzrBuI9dk7aUC2aqHtm7XKoA
1u1o8TR49+/9Mpn7bvrRlbF4deex6nkDgsD91btRvcn3WlG/mL7UL+Yc9YuJ
ofsygdmXeRnRz967ROGry3kjDrxxw1Gv2i1OkOdqf7tx/Pb1gegx3n/g0yde
uLd03G9+fNqEzgQM/OyAzknT5MbMPY2rB44at6bH9+r/9oW507Vcbo67PsSk
HLhYancKq8aK5pSSz7c9eXIh79g+eKcvdsq0txeeaWyv5eNaw02qqgds3w8Z
wxbUdNUEotAKBacIvr7c7YLC6TNIPnEx+BkTFYyJ80wiJPn4Crovo5h98Vh4
4fmz5T7Q5CLcIGoeio//GL7g/248U3/xQOUcQ+iULtUd8S4e5yrEhdj++uvD
0kF9WMyoD8uI9K3L/d9FwrNap6KTUgkgYTemLobkn/LvCuOGTFmC9yZIrpKL
jCJ1revVfny9XOqzk8347DQkqly8JmaNsXD4qmGLL+zK3z/gPd83nMYniomP
JfXHCWb8cQqL79vZbTCBZTceXNn50R3crfLua3T/9XNh/VCCqI9MH+//+sjY
SS62TU0LhoroTxtbAwJgXR8dH5k//HqV80M5wvihRFF/mXrGX+b+L73J/l0J
MMtGpio+7xToVHdWZ3b+9XNxYvxTRnksXxNYEA4f3QfGSo9LQtRYtOYlea+/
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
coWaN2aXRpPn7aZ8ohSGTyTb88OJ89KYVg/yZ/C/30/0Kd9qIMO3Gtmcf352
tz8MH5+4qHV8ODQO6fwQTtaze92vuUfPpcDt/e2LJ671Adc5Jj0+L/WLC/FZ
ZCwM8vC9P6ooFvrZhPZLJ/vbSXlYlxke1g6bYXjbKgWsDe3HnA/3hBjDlZnS
5PN7/C7NGmKWCLUpZwzLjjrAhWjdVSYkniayde1JC2NgV/eRlmpVLbikc04y
nczzk/K5Whk+F8/xiEFEZBRcfyFn1ewWBXoV9z2kyLjWi1XL1yTGwpT0/Ku3
F4XDfZ+tm8X4Om+U/3WL4X9drBs6yKV/IrxN0tsBUkkA99o0lpLzv8X0bK2P
UhREjir/9UvKCWyszwyrI+u5UOxl1j/NBYZk1RUYrfDDzu0LZyaQ+E/j4okj
uHiiIJ4XNlR3HQ+Lh6KA+J9WU6NARjn8fROJw1HKLzvA8MtuTB6ze/w3d/Bp
t9n4cIozzgu28+1P9qtWSyU7BjZin+1dsi6bIvGc9Qtlfp5X2yjp+KLwKPr3
3dH6LiwCRSGtm+/350x5bUcYXpvPyTGlmyc5Q1NU/uu1H06B6hPpot1k/v33
rh9/VRSGZ0mHtbPbE39Hlt4ewcc5Uz6XOcPnWrG553tBhfteEHzvv3hwXxvb
hF3M3HFrrx9R54KdMWVubCYfX9cuxPHd0hm+WwYXZwzI7IkzCOLsnNv/yYwO
a7C7vDRlioUV5vomXufju7Kvc/y4qww/bjnlx1kz/LgbkdeqB8dF47PUQVor
58ZgPye/2dYk/jJ+KWVGveIxTDuiPvqLHo7w9RH7Rd7H1L6HVskOswfT8tDR
sl4h4Grb/KmTPO+SX5VNM90ssfP3jia39hC86//OpDdZZ7dJlvxGg3icZ3lK
t8EgCSNnCg/k19t7bk/Ti/sejd9DfH9Fi8bhs+GX67+QePr14fh6eQxfL5fy
0UYa/ZePlqzgc1NthxtuXOIadV7EGIZr3i3i62HOfrB/bIiwJ2rPu1tdWR+O
IWddH/P4OpOU97eV4f0toPy4PQw/zrd1fv14q1TMCKq3nDk8EAvcOhtuk7ru
2mW/+AV6Sbgu0C1ou2kA7nxavY6PbyynPLhuhgenQXlwzQwP7msuxysMZHiF
0rtazlbU+mCkuLz6nnQn/KwXZ9XQ9W++oUnYqSsKO9PRv+zmo9bMGIzIVZmp
St5rpRLJhsqAeAw5N+4G3gpAuUFxXlYkDzRSHuJMhoe4eZ13sEVsIjre1fow
9HsE+g6wm/CJ5L20YTnnw4UycMOBB1P2zIzH65csM2RInXlr+8dfO32TMPnY
tnm9FEIx1H+RxUjyvDzKZwxg+IwDKW9RkeEt6l40HVhLzkGOw8IcLVVXLB69
YmgDGX9ZOHnTeuVkVBuYrm2zOBIt7pZce0ri/yjirmuIfTL2VirMOhwQgtod
cmtiyTpHZ6uPEXWIxYe3VewPHI3AUyXjRVvIebbxTG5alBWJRq31qskZAdi1
6pJPL7KeCMqXdGL4kv+vrvOO5/L7/39LQ0lLe4iiqaWi0lNGi6SyskISSVbZ
W2bZe++RLVvpKSRRSCINlRIqs9D2O1evy/dz67r93rebv87tup3rvM451znP
53Ee98fcC8Hpjly+2G+e0zs9cSPeqB0W+U363ydvvqvh90TcdHhAUXmRJ84v
s9lD+WU0NjjfqCpMROvZaZf2dfuixR62z5tI+YRdSouNOuJQOiJO+vIjd+Sp
XCelQ/o/2eTbNq0VXji/9h7fETlz7GlV4qDWgUT2A5ISdwzxrLP+Vva9bvC4
t1ieipe88v/GUZDPiqNgPI7KZMXVUMeKq0GPjqtlaV0nMHSdZv7Tvzybbglv
PsUf/TNyBTgzH2SUUr4tO3sMB2WS4MfPhX2e7f5w8HNHvBPFBRppixjamQgz
dcKap73yh4qMhfLC5HclCK2+a3PbE+Fh3nfxNxF4S19rggR57wNaHyrL0Ie+
XcOTEn4uEJUEbwp2sBvi0c1Rr2Sp+UzrQFUYOlDr5qMj/Mkkjg9839vzJxi3
VCYGepN6NKwvc5qpRuOluSlqF5f7YmvlhGPU+Y8wrRvlZ+hG9WndaLDFv7rR
JSvdv0/7tgSHKqOf68R4gkSkXq0MKU/jPHyjQ9YGvm9c/HHUygTTl8d4FpNy
iUvDM/aSdT+7Xmow4Uwghu8rSRCjdM20/tSeoT9NvTLkOLrIAtsXJufJTPVC
+/6yxTNIPREW80bvFDvinc/zbbw6bEBcoEmeWse+66/yGxi+CpyNx3GaTTjw
V2YFNJN6Yll5EDiw8iAYz4M8aX3rR+1/9a0cSWFlp8Vc0KBOzNb/kDnJk7J4
DCg9FK17bWToXrV+nP86ujkQ+u8u63y/6Apkhwf3UedLjq3z31QdvwgSZ/Ly
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
6WDTRdrvSPMq9Ri8ylCaD2nH4ENesXn+ZWRnOHxTOWhun+AKV04cL6B4Jgdp
nmc0g+f5mV+yUf+XMUzN1j/2x14ZTG9VzaD2NTOOPVbJKYFQEDkk/czPDw5P
VvfiJuOoSPM/pRj8T7fY5RrHfgbDwtb0s5ucXUD5ZsAsG/J81PNLWjusyHfX
X9X0PdMOipa+KjYk/RZaLKTtJhsHVSfX52oGhkB814RFa8g8f/ZTY43vnzjg
seQuj812APW7P+6mUf4FNF/0CoMvGtc37ViDeQa8bij7ImGdBAFs0w8vJf1T
OW/mueMaBpBewv7h7Hwf+H5Qcv5E8rvu0jxSVwaP9KtGldqDp4EwYmCrtnHf
NVg7E9UDqXn7vOlIwWAAQFJr4+EbHvj1jKsbpduSYS9pef8zDCzOnU4ZOu2F
ebZvJVx+/Y9reoHBNV3qsV/SPzcU+t3nRC9dmYB4Skiyi7qvS3M7NzG4nWyW
LsLecSlg+eHkqqBLSfBii9NkLpLXrOxV2/xkTxHIuY8occ6+CTY/9WWLSdye
ajf2o9OkCMQcM7q/haRBsvR6vitNJM4pFkrWSPaEe0uvyOZPSMHDWu+yppP3
7qZ5qpYMnuolmi+6k8EX5aR5qj4MnurrSrc7bUUuaP82wGjG41BQ/Sy8iIf0
j4enf2rQjWJoW3r68ka9eGjEab3+zf2gMhQcWpYaB5P2d5l9Ec+HUskDv3RI
/P+D5qyaMDirZby/Vao35gK8KTyQ6xMDhYoCIcmkf/Y1vZuyJq0EJF8lzqwu
TwDrpHjdsEYSV1+Vvt5bnw3Lgz04PUy8cPY9hbpTZL+Lo3mthxi81hy9xybK
95JBzN82u2tTKXQvPnX7I4krdKY+OXxhXjJ0w+qRPS9zISj4V/D59//ju+5i
8F2tj1XzWzTlgKSsl/z3VeWgrz3k+i6D7MsiMpE8LdFQ/aBdP/ZrPNo6TbRP
I/uOppuhVbqCG0yzmJM/eV0Bmidpphq/64dZVX/7E3xY/Ynj/VklWb+AfUsm
bHva1qA4Pw/k2wbr28n+20zzYycz+LHsmTZX2peagVj+7uQD+wrQ4M7R1iRS
/6vJIusmTzqOf04oruhdUIKb2F0OB5F1o3FP5k4vF2tYw11b4a1WiGymk0tt
SX5qZbllX0JeCswqUxFtmRMALbvnPqgj8Rg3zbN1ZfBsOc3WlOiUucHdTFNh
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
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.09259458092137765, 0.7486122776543305}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstDefaultMass$$ = 
    20, $CellContext`glConstKDefaults$$ = {0.25, 0.25, 0.25, 0.25, 
    0.25}, $CellContext`glConstKMax$$ = 1, $CellContext`glConstKMin$$ = 
    0.05, $CellContext`glConstLocDefault$$ = {{0.1, 1.3}, {1.9, 
    0.8}}, $CellContext`glConstMinAngleBetweenLatticeVectors$$ = 
    Rational[1, 6] Pi, $CellContext`glConstMinSquaredDistanceFromOrigin$$ = 
    0.1, $CellContext`glConstMMax$$ = 
    30, $CellContext`glConstNeighboringCellIndexes$$ = {{1, 0}, {0, 1}, {1, 
    1}, {1, -1}}, $CellContext`glConstPrimaryDisplaySize$$ = {380, 
    380}, $CellContext`glConstSpringColors$$ = {
     RGBColor[
      Rational[2, 3], 0.33333333333333337`, 0], 
     RGBColor[0, 
      Rational[2, 3], 0], 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
     RGBColor[0, 
      Rational[2, 3], 
      Rational[2, 3]], 
     RGBColor[
      Rational[2, 3], 
      Rational[2, 3], 0]}, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
     RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`glConstTextDisplayOffsetHack$$ = {0.25, 
    0.25}, $CellContext`glConstWindowHalfWidth$$ = 3, $CellContext`k1$$ = 
    0.8700000000000001, $CellContext`k2$$ = 
    0.9800000000000001, $CellContext`k3$$ = 
    0.8350000000000001, $CellContext`k4$$ = 0.935, $CellContext`k5$$ = 
    1., $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$1373, $CellContext`qVec -> #]& , \
$CellContext`meshSize$$ = 8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 
    1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 3, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10, 15, 20}, "numberOfMasses" -> 3, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.8200836820083681, 0.1673640167364017}, {0.6778242677824267, 
      0.6485355648535565}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
     "pointsDataTable" -> CompressedData["
1:eJxdnUtsXEd2htsSJdESLVMUJbGpF0mR1Fsi2Xy/urop77jKTtvJDCdZJYA3
2Q2XWXgRBHkMM0kwi8DIcgBuJsAA7EU2zigveKXVGDBAwICBsSHDI8WOHLnP
953JvQSE6+6+99TrVNVfdb5bnvzBn/zBjwYajcbJN/+23vx7+82/E2/+7fX/
bvUa3//1nvQWWt//3ewdfP/39ElcD670+l+/2In7GsO9Z9//fbDT+/f+fzR6
fTOzO72/79//0VHY62Lvm3bY6/Z+3b9/qIS9DvYul7DXiXRat3p/9/39zSeR
zrMb8f3hDr9fiXR3d3pL/c/vRvrH3d5bYTDs7nd7v+wn/C9HYa/b+7e+vW/b
Ya/T+9v+7++UsNcJO3uXS9gr5O9WpPv+Dr/fiHwN7ZC/y/H9h93ej/v/cb73
3fd/7W7vj/qfXx/1k3lueX/5q7DX6f0wfm+HPT+fj/Q/LNovYa9Q31Ncu73X
/R+uk6+u+SedLu33DtdO7z+i/EdRj53en0f9tMNewd537bBTevNRvyXsFeu/
LPavbexORblnu72f9j9fx5+yfaM9n3bI9xD+VHph55uj/vcflN5fhf+0w57l
b5R+u+63yd+7pd/uh9th9+BK6dfz8Rbln6L9O/jf9chns0N+L+FPBX8ZinR2
C/ZeRX6etXn+43aUw/K+Ff7b2ia94RLtvkV5x0rY2aS+psLuc8tzDX+yPi9F
vQwV/Pkc/t3unejbe3kU5d/u/WU4Urtfb4dbvR/10z0R6R9vYn+4/Kxf3k3y
N1b67b67Qf6mSLfw+7Ve//6DNs+P4ifb+PNZ6mkbf/76KNptq/c//fb4TbTX
3ib1dZLyb/D5QvSvZ+vYH4v2bKzjD5P093b0m++uUn7rdzTS39+i/t8Ovznc
JJ9fHUX5N/DXT9thbwN7J+nf6zx/AX9aox6a4c+Hq/w+Sb628OerlN/2HcVv
N7lvkHra4PsXMd4crNM+x/SvNco/QH9aI38X8KdV/K+JP61Q/kn82fq9iv9u
kN+Lkf7xOvkbpD7Xsfdl+PPuGvd/Fv68b3lPRfqHpjeCPy1jbzzas7lMfU1y
3aA845R/ne8vkq71e4Z6WsXeFzE/NFaZDz6P8bhl+qdj/Ntbxv5IiXwu8fs4
/rSIvUnKv0Z9j4c/N63vkfCT3VXyeRp/WiFfn4c/Hy7THr8Nfz5eMv+U388X
8adFnh/Hn1p8nqD8q9hr8n3WL/60wn2n8Jtl+uFn4c97S/jfl+HPB4vYO0P5
W7Y//alF/q4yPi/w+wT9aQV7Tcpv+47Qn5bI5wD1uUh9HTN/LuJ/L8Kfd1vU
72D48/6C/QN/mqd8V/GnOco/wX3L2GuS7yX7J+navgPYsXyfMj4vkP5XjM+W
923607zjB/1pDnvXqJ/H2JugPy06PlF+07tAf/LzSepzgXb8JPx53/S+Rl/M
4Y9nQ988e+z4Sv4eOf4yXj4gfxOUv8XzY/iF5R1m3JvnvhPkw/p+zvhseV+2
4/5H5P9czJ+th84/MV8c3Kf9r5WYd+5h7yblX8D/1F+Wdxh/muP+t5gnHveW
+/Y/Por0H+J/r2L+aj3A3jnSv+f8jD/fJX/XY37fu536NPI5h70rlN/yDlMv
j1KfRvoPUp9G+vdTn0a+71K/Q6R/B3uX8Z9Zync95tNn06lP477H2LtC+tbv
u+TjPvc16O/3yD/69OAO9r7Fn2+r30h/JvVp2EO3N27gz1OpT6O+HqQ+jfze
S30a99/l/tdHUf+3zV8jyj/r78zv03w+T/mnUp+GvUnTx79vmj/Sv4s/Xyb9
O6lPo/yzqU8j/Rnrh/Qtb6OoG6hf0p9IfYrfUO83YnxqjKc+jftv43+XSH8m
9WncP536NNKf4vmP2o7zUf5G+RH1/h36NNK/6vqp2G+oF8aD0dSnkf409i/h
z7dSn0b6k6lPf0a/VJ/G79dSn0a+m6lPw47rgjHqb8T+zf3vpj6N+6awf4n0
rd9zpHPd8eUo0hl3/GE+v0L6J6j/Uep3mPSHU58uYJfxj/oZSH1KO6Y+ZV5J
ffpjxknGX9Y3l7D3Cf1pxPGb8fYdx3fKfyb1Ke3q/EB+vzpSn6LT8OdR0r+c
+jSeu5j61HEpvkefvrkvvh8g/ZPYvcB4+IpyNMnvZ9TzBPX5i18dVOphFP+7
mPOW+rSBH1X16Snq6xj/ec28OlDUjdQb+fs41rFv9OkJ6jU+Z/201aeME/jz
RdIfzKvzhOn8mHajnMwPn5LeqWK/C7sjlP8L2nWc8ehb+2WxHNGO49Yz/nyR
ddY31O8Z2ulz2ve3Rz9nXEYftq2nuJ4m/ZekN1L0c/oB+UEXNSbtX/6e7fCM
fhjpPad9T1Nvz9voY/L5ol0td4Nx5kwxX/gd6Q9Z/qJfxe+T1M9oUZ/+BeNs
+PMI+ySf076n8Cf2cd74oX5L+1EvZynvIPPVML9fzCvjIumzz7I3yfg0js5v
4s9ft1kf6S+2q37EuHt8FPPdeer5Bf48wv2DpH/JcYjvx0jvKulf47PtdbOo
T/+u4ocX7E9Fv3IcoX/jz6PZL9ynYHworhu8L9J3nlIP6seT2J2iPcdIf5j8
Xch1CeOb41GJ/ZLfHLmuZHxsq/Oq7TaRfmE9MP5i9xb3mY9pfh/Dny/xvfpr
zH6Bfr1a/gY/D/+0vC/b9pNI5xzlnyraje+nsX+NfM5kvUQ6t3OetR+Gfww7
X1Gut1yHlEeMa/HcJOm+ws8tL/uVrZn0o8jHrDqD9O9wneK5e6R3JedZ9IHr
+qI+jftvFfa/GPemKf83zKez3D/E9Tbp2I/uFssZ39/PemR9UdSn5pP9PdKf
5rmGeqgwLjD+3CZdx9k7pKc+vVf0uzDzgOsN0n/I87brY+pRXTJDe52nvWYp
12vSv4O9n2/Gc3f9nfHnPp/Pc9/DHGfC3iN+Jz/NuWK9xzAyx+/sVx7ctnz0
r7vk91vmhXvln6N+SN/yNrg+wj/epfyPKfcVPs9h7wb1Np/9LK4LRX3KeqGw
f+56gvZUnz4s/xT+Q396rH+xX2F5GZeb88VxKda7pn+T9fsC+aIf7Leoj0uu
p8jfOddb9h/0+1xh/Ye/zBXH8bjO5zwR1wXyN0Y9md5NxsdFnrvl/k9Rn0b9
P8af0ZH7c4x/v4t5dne+/GOMP9G/m5aPeft4QV1K+VvFcSzsLZI/xsndJddh
kc/mcur6uG8efz5Le807/tK/FyjXJ/hPy/Gb6yLXC6S7lPNWXJf4fYJ6Wi72
47C3wnXU/QrnH/bDW+T3q9Adxy32BT5l/8Lysl+5v5Q6Iuwtu87An0xvAn9a
yXE77K0W9Sn7Ofiz+6e25wv6+1L548gY/rycui6ulneEfK2U6v7pKuWdIB9r
fO84t87v7p8ukr8z7ActMd+jg/eX0eWfsf9leqco/2pRd4S9VdIZZ395jfqe
YL9wneenqc+Noj6N/C7jz2fQ9cvlf9GnYWel/Gf/qk4zffdP11znUf51fh8n
XxtcnYc2uE5TL5vkd4T+tII/n8afVov6NKp9DXtfhD8fr6U+jfpcT30a9jZS
B4W9zdSnYW8LezP0zy3KNeJ+Mu1zivlirUQ8z3WS9fsl86flVZdvpi4Ne5v4
81W+30p9GvW2nTogru1S0afNderD/dP18oeR8fDnw43Up1H+zdSnUX7LO4o/
bZfq/ul26rKw13ZfKJ4rJfUp8QjGv5P402Z5HP0b/b7FOuErxuct0nub63bq
07i2yR/6tFlSn4Y/l6JuiPyW1KfEa/Dnk8ZzytfoU+I97PN9TfzG8p3FXpv8
Uj9PC79fi/R7hfxNxfezndSJ/ec+6KQ+jfu28ecT+NN26tOoZ8v7Ev8pNX1a
Up/GfaZ3jXx1Up/G9x3um+W5Lv7Ffu5um/Z7Kz4PldSn/fvft35ftfvj0HPL
y35l6aQ+7af/YYd02K8c6qY+DXtd8jcb49rzburTaI+CP7NfeVjKB337HxEP
6KQ+jfa0/EO0l+Vlv3K3W9w/DXtd/Bl92txxnxV/2kl9Gt2mlG8jg0fEk8uf
9Z//F3iDTu4DEI92nyfS/6Cb+jTsdckfevDpTurTsLfD87P405PUp/F9p/yg
//k1ekd7/7oZ6XTx59fsv5u+69Qd8nuZdCz/DXTBE+zd4vsn5G+W556kPo3+
3y3wDaEHP+ymPo348g72GrT/TlWfPt9JfRp3mR769MMnqU/D3nvYu4299/Cv
6cjPvvzIBHrDz83kOeL5EeLv8iQDyXMYfwp73Yw/hRl5kkHGQ3mD0ejnu/Ik
08Tf5TcmkueI34nPDe24/5Y8R7TDgPXbW2H8DHsd9km+ivHhfXkS1vdD8iSj
yXNE/qZJ1/TdR+5m/Cme6+Y+Xrh9p+c+YdRjp3eyb++T5Dl+yPgZdgqfz9Iu
8gfu+7R7xhHoH/AVN+F55EnYb+h1Mv50EP0v40/0zx76OnkO9Hebbk18/lzy
HC3GzxgPtinXLebPDvtgxBH2bd8x5lvrdzh5DvcVGb8y/hQ6qZ3xp2hXeRLj
YfIkl+i38iTEHUqnykc9L1U+6n3bFz5qSF6nkTxHhY/a3874U+R/K/koeQ7H
zyivPAl81IHteSN5jrheSZ5DPor5LfkoeQ75KHkO+Sh5DvmosLeR8acYf+QN
bK92xp8i/t6uxp925UnOJ88hHyXPEfZ++St5DvkoeQ75KHkO7CfPIR+FfqHf
GAeyPS8nz+H4Kc9h/EmeQz5KnkM+Sp5DPirsyTvIR8lXwGvtbmX8KfKb7cv8
upHxJ3kO40/yHPJR8hxRfvYb9leTjwp/ki9wfb9c5aMamxl/inzLkxjvsX2H
kueo8lGrNT7K8spHyTu4vpc3kI+Sp4BHOlzP+JM8B+MD/d3P8lHyJC/pTys9
9Bv9yfK6vl9KPirmD3mSseQ5wh482548iXzUao2PWqnxUZZXPmqZ9pCPsrzG
nxZz31iew/W9PEeVj1qt8VGmJx+13DOuJM9R5aMWa3zUYo2PkieRj1qo8VHz
NT5qucZH2b7yUfIkub6vxZ9aNT5KvkE+Sp7E9at8g+t7eRL5qKUaH7VY46Na
2JOPatX4KPkR+SjLKx9leiOMf4+xx/q+JV9hXFqeRD5KfsT9D+tXPmoee/JR
8zU+Sp7kNOuYR8lHxe8Pc9877MsbyEct1Pgo61s+Sp5EPmou+Sh5DuJjbXkO
8s/8+SDjEPIcru8jXni3xkfN1/iorN/kOYxTRvqPko+S55CPkudg/4b079b4
qDvJR4W92RofNZd8VOTX9h1JnkN9GunfT30qz6E+rfIcg6QvX+F6eib5qLB3
q8ZHPUo+Ku5/kHwU+8/cN5A8R5QPfXpwu8ZHWd633QdLfeq8GffJR02mPo36
up/6VJ6D8St5DsY32mkWe58kz8H4mDxHfD5L+SdTn8pzxO/Gn+QNJkj/TvJR
8hzx/HDyHFU+ajr5KHmOsPcyeY5I55zrsNSn+E3yUfHcWOrTSH82+Sh5jsi/
+w23Up/Kc1Tj6jdTnzrvsL9O+s3ko4wLUC+5T6c+ZZ+8xkdZXuNzE6lPo72u
pz5lnzD1KevCGh/lPrc8kvXO+v7NPB33y0dNJh8lzxH5f5dyXeW+Rq475KNo
hxofNZJ8lDxHPHeZfacz2LuRPMce7Uo7pj6V51CfynPE/caf5Bj8k195nTxH
fHZ9fzL1aeTzFfuSxsM+O1KfotOSj5LnoHzZz9Snkf5Q8lGOk2SMfXPz/S7j
4Zd8Vp9+fOT6/lt0ygF+wD528lGUq8ZHDVb1afIc8PtvdJDxJ3kO9peS54j0
ruBPXzDP3cw4o/qUcSL5KMc962Gpko9XR/IclLMtzxHpvcV6WJ5juDgO0K8z
LmTc1n3aZ/iNfmr8KdI3bnGOfvScdnp5JM9R5aNekP6JYrsZf4rv3ccfS56D
8S/jMIyPjM/HxAVGe/v4hfUW38uxyEd9Q3nlowYy/sRzGX8yTsf4X+M55AZ4
T+WNPo16+bQtHxXXr2nvt5PnYH6ingb1k7b9yHwZV7HcrtMZFzMuFs9N1HgO
+ajX7Wr86ZTtqh9l/GmxUm75KOdJuRf2yRpyJsmvJM8Rn22viaI+dZ+9ykfp
h4Opo6p8lPuEn7XVwQeVclzLetJP4qoeNM5jPOxWjY8aqcWfrN8zyXOg/47U
LfJRjiP6bdgzPfl9OY3xjAt6X+RjpsZHXcl5zbgV9p2vMv7EfIY9+aipjD8Z
N16kXuP7meSj3FeN7+Ve7iQfRT8r8lEHjAvUf/Icxp/iObmLL/F7yzuY++72
o8jH7eSjwp58wyTP3U8+ynY0/hT3GWdwXJxOPiqem8n4U6RzO8c1eY54jv3K
PfmVq3z/IP1InkN9GvffqvFRM/Zf+V7u/zR5DvmouMqvqE/vZ/wp7DzkKh/1
KONP8hyMT6Q/m/GnsGv9Gg+7m3xUPHcv+ai4PqjxUaYnH/U4+Sh5Dv0uvjfe
z37lwZ2MP0X6pmf86X7Gn+J7y/syeQ7ml+Q5jD/Jczz7/+NA8hxTyXOoT1kv
JR8V6T9IPkqew/hTpC+/8Sp5jvh+KHmOSvxpbyH5qLjKU0zx3GLyUawnM/4U
9yW/4no0+ago/3zGn6L88hvun8qTwKcfypNcZ39DnmQqeQ71aWR3rsZHzeMv
3+Ev84X9weQ5jD9F+5neO8lzVPmoJa43kucw/hTPyZPAR+3PZ/xJniPS4f3S
Zgt7P9+Mbt9KPiraf7HKR+0v5bwtzxG/M281V7AnHyXfcRl/kSfx/VJ5km/x
38WMP0X5La981HLGn+Q5qnzUSo2PWq3xUWu5DmI/K/koeQ75qCj/UpWP2pcn
kY+yvPJRqzU+yvTlo+RJ5KPkSdw/XUo+Kp5bZnx8RX9aqfFR8iTyUaupu9iP
JH/yUaYnH7VR46M2ko+K/C4nH9XP1k9WanzUao2PWksdHO0vTyIfJU8iHyVf
IR8l3yAftVXjo1ZrfNRqjY9aq/FR66lP47pR46NMTz5KnkQ+Sr5CPmq7xket
0T7yUes1Pmq9xkdZXvmozdSn8hxVPmo79ak8R+RPPqpd46PWa3zURo2P2qzx
UVs1PsryqpvlSdw/bVf1aVOeAp2yX1KfEo/BX+SjNmt81Fb5h/5n+SjTk49q
pz6V54j8jSfPoa6R55CPkudQnxKvSj6KeFb5Bn0qz/Hf/evn6GXTP027FMZr
68fy8z5nQ35B/ke+YZrnOqlPo/zbNT6qnfo04sHyGqxz3y9Vffq8pD6NUdL0
xpPniPvR1UNd7M0kzxH+xX7us3byUbG/W1KfynOoT2M/2PKyX7kvT3IxeQ75
qLDXTX0qzxH5m+H9853Up8SDk4/q3/+iJB8lz6E+jfa3/LxPMGt5R5PncB0S
9uRJJpPnkI8KezupTyOfneSj5DmqfFQ3+Sh5Dtdtka9u6tOwJ1+hHpQnUb8/
qfJRe09Sn8ITVPmo0k0+Sp5DPip4Hst3NnmOCh/13N/ho4o8yVTyHBU+aui9
Kh+1300+Ktq/m/o0/NvyvuQ8gp3Up9Hfn1T5qH3TU58+SX0a9uRJ4KMO33Pd
yPgnP+I+8BOu7t/t4PdDNb6C8yWedfP9PdqzGj9tdDN+ij/k+3v4S8ZP8Sf3
X3v4m/wA/t0ljjCUfIXvdeHPvQf95z/W38kf8//TDvsmw/h3cX+5yFdQf+gf
+RnOlziUH+F8id1uz33Z6HYdxk3jpx3iy+xTJV9xgvlJ3oD393aL++/4TZv2
mOoxHmX8lPGK/PG+3IfaP9tjvPO9H/ia0nNfEv4tz5dgPM3zJeDnqudL7G/z
eRK/6GT8lPE891kZ7zN+Kl/B+pT9oJL7WrG/Z3kHiudlhL9cIN61nfHT0A3y
BsTjZvUv9r178iO83/i0kO9B2ktehvhpU97i2Pm2Gj/d38rzJeQrIj3m/2N5
jknWV/oT+1NNeZqL7C96Honv72333FeOfG4Rf/+sLV/B/FPkK9g/YRzzfI4m
+9OeH0Fc5FA+aTzSP7Y+LxK/3O753ma0/xbt+MWRfIXvsclXRHlPF/mKqC/m
/6bndfD+3u4a7UF77Xkeie+5bpE/51vPWyF+2pAncR96g/GF8yX21vEn96fW
fD8Rf5I3UI/4mfhpcyvjp5Hfzdy3j/JvZPw0yu95IJwvcex5IJwv0bS88sjy
HPLaKxk/9byM+N04kvxIEzueN8P5Ei3reyD5CvyX/cRV/dv1UPV8icaK77cW
+Qr6T5GvCHvET/f1pybll1+Bjz6WHxlIvsI4hXxFpP+V68Xq+RKHS77/y/pI
ngJ+vCnfMYFdeZ0x+pPlvUA/Wkm+L9pfnsL4qTzL1235CsbPIl8R9pn/D1q5
bxn25Ck4X+JYfkSezvNQ5JGTn8GfljKuEfVpeX/Xlq/gPe4iX8H6k/4kb4Ae
Sb7CeOVyxk8jv0v4CedLNJYyfhrllyf5+Ei+Iuy9astXRHl9X8705LXnM37q
eRnxmfMldj2P5Ar+JB80jD95/kkj+Qr0BeOzfMc3jM/zGT8Ne3PG12i/x/me
YuRX3sD4qf7k/l2r53v77LdhDz76YL5XfY95LuOncdtj8vsOOu+R8Ufmc8/n
cP9O3uEG5bc9LzM+ex7IecZneZLXMT/sej6H50s8zvipfAXPF/kK7Bf5ivj9
BvPFHfziBumYvnpQfuQd+tdj6tPzJR7le8/yFdRfW74i/NfzJe4avy5VvkJe
ezb1KfvRGT+N9B+lPo1aeJj6lP3u2vkSd1Ofxn2eR+J71bOpT+P7Gf3XfanU
p3Hfw+T74n7Pmxmi3jx/Rb7vjv3LeEHG7eI+eQ7jVtOpT+P7qYyTyFeoT6O+
7qc+jfzeTX0a93k+x++O5CuMn1b5ihOkf8vxq8hXqE+J42LvZsZNf1y5yut4
TsVs6tPI50xVnx54HonxU89VM34qT2K88nrq0/h93PnBfc8q3/fM+h2tcuzu
T8mVZvxUXudT+G/HjYEipxfPGTceky+qvUdpHG0k9WnYvZXnSxAHSn3qvBL3
vUAPXkt9Kl8R+RpA//ner+dLXEx96jhr3PRnlDvsX03dEVfjp5Z3MLm7+P3L
I/kK46fWq/tTxHuT7/PcFfVp2DmVcTfGrSP1aaR7LfVplH8s9anrQvQf++O+
x/Z5W+4kvj9N+oPqS/eFU5/u4Ye0e/IV+hXvlSTfp47HfnJJ6lM51rD3Rdv3
HqI8Z9in9ryMi+W/eI56Ls4z8ftk+SHtHvbGU3dVyz2U+lTuUH0qp+7+lNwo
7VvUIbR/ka8gvp77SJGe+y+NWvx00PVRcmL4Z567iP8eyVfg323njbhfLuRz
yut+kOdlGD+VGzC+LF/RTK6H/kn6cqADzOMfHRk/dR1q/BR/kEPKOAJ+Xqw3
9Sn+lvtT+j3756TveyUXcp+C9XeuG1ifU0/O4+bjVC1+qg6T77uA7rhWy6dx
8ys5Tv2Ufhv1PJyc3B7t5riLHxxZD2HP+OmwXFqNA7hkXCvjp+6Tx+9T6JHf
c3/GjexH9hP7KbqjzEW95Tk6xk+r7w0OJecT9Xop9zXhn4rnZcR9U8V+f8C4
1qJc7F/lPk1cPV9iVO7qyDib8VPGDe43nus5Ep5/ZhzF720nr8blruS6Gv3U
04761LiI50vs4QdyX8zXcn25z2w7hb1bRX1qnMD4aeTD8zJ+f+5VPO/5Z1fx
v9f0b88j+cWm47zckHFrnmd8Nj25HM+v8Dy225lP+Qry73sXtMc7qQN+zThg
v/wF40w853kk7lfKc7hfKb/ifqW8gfHluxk/la+gXdx3sf171XpUn04zznu+
hPXbUA+Xaj+T52C/8tk9/EF9+iDjp+jxjJ8aN+T9rJ77+PG750vczvipfIXj
nudl0D9dT9h/SfdhLX76uBo/3Z1zfCB9eRLPKZMP+h3jzV3nJfSy55GcKPIV
VX36KPt92Jsr6lP5ikr89GDe8RP9LB90lvHmHv7n+ycP8pwu1pNyqa43q/HT
fdPzfRj5EeOD8hTET4/lD0ZZ39zP+Gmk8xB//go9+Ij2+tT3GbDn+x7yI74P
Y/qef2Z66q8W5ZlOvoJxDh7zEf48yPxqeeH7DufQoce+71GNn+5aXvcH5Tnc
P/Uz+v1QvsP46VKeLxH5navGT1vzxOO+PIp2n8d/nOcWMn4adlo5T8fV8srT
yXOo35dzXAx78hbwfYfzVU56f6GoT/u377boN5wv0ZQfOe1+V/J9YW8p+b6w
5/kcjCu7Kxk/DXurPk9/snynmT9avM/M+RIHi8kJx31LnttHubJ8pGt68n2e
RyK/5vkccodrGT+N9l/M+Gm0/xLxL86XOF6Sq/Z9M+x5Hq48h+cFy4+4P7hW
ndeO1yjPTPIV+B/9e6l2LuKyOhudtlI9X6Jh/cr3WV73B9eS72M/OuOn7Fdn
/DSe2+R3dPzxcsZP+350uILegfP+yWrGT6P91zJ+Gu2/nrov7Fle3vc49HwQ
9HvyFXCbu1uOX/Sn1aI+DTtrcu2sU+RZ5JBN3/ejTU/9vpl8X9iTp/D8M3kL
56Vtx3f60xrtw7pidx1+jXVLcwN/fsl5KRupT6P88ivGT00PnbQrP+L5CfIU
nJt13E59Gs+t5/kSUY8bBV2P/tr03EnGZ8srd76d+lS+Iu5Tf5meukGeQc61
pD6N/G7Sv3kv43gTnu4jeK0t4mZw6vvbycHLV0S+LhsPTH1KvLCqT5/Ld8zG
c6WT+jS+34IfUZ9ulz/tP8/5Eo025+14/lk79Snx0OT7Iv/yHp43Js8wRXt2
UrfJV0T9nWd83oaPeE181vL+YpNipD6Vr+D5SP+FPA3vnzzVPjq3J+8B3zfb
TQ66yle8g94o5aMoP3qwpD6N5yyv73t0avpUfsX9StOT7+umPpWviPtu53kZ
0e/g+z4s8BrE94c68IYfeR4D/oI+fW552a8s3dSn/eQ/NH3019AO9cW65v2d
1PXyFerT6N+d8tfRf/DfTtmM/uV5FalPoz3lR3jf49jyEk/f3Ul9GvZ2Up+G
vSc8j+7ef5L6NNq/gz+jT5924R+fR3/qyZPw/4+YlVchvv+B/MgY/iTvgR58
Ks/BuqQn33Ibe54Hcpb9gi7+7L7VTurTuG8n9WnYlSfxXE3Tc50sP6LekR+R
73uP++Xc3yv/B3CLMXs=
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {10, 15, 
    20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 3, $CellContext`tau$$ = 
    0, $CellContext`tick$$ = True, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 
    0.8}, {0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period:"]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open"]}, 
                ImageSize -> {200, 60}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Text[
                Text["Angular frequency \[Omega](q), selection:"]], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["mesh size "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`meshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax$$]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax$$]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin$$], 
                Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tau$$], 0}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`meshSize$$], 8}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`glConstMinSquaredDistanceFromOrigin$$], 0.1}, 0}, {{
       Hold[$CellContext`glConstMinAngleBetweenLatticeVectors$$], 
       Rational[1, 6] Pi}, 0}, {{
       Hold[$CellContext`glConstLocDefault$$], {{0.1, 1.3}, {1.9, 0.8}}}, 
      0}, {{
       Hold[$CellContext`glConstDefaultMass$$], 20}, 0}, {{
       Hold[$CellContext`glConstKDefaults$$], {0.25, 0.25, 0.25, 0.25, 0.25}},
       0}, {{
       Hold[$CellContext`glConstKMin$$], 0.05}, 0}, {{
       Hold[$CellContext`glConstKMax$$], 1}, 0}, {{
       Hold[$CellContext`glConstMMax$$], 30}, 0}, {{
       Hold[$CellContext`glConstWindowHalfWidth$$], 3}, 0}, {{
       Hold[$CellContext`glConstSpringColors$$], {
        RGBColor[
         Rational[2, 3], 0.33333333333333337`, 0], 
        RGBColor[0, 
         Rational[2, 3], 0], 
        RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
        RGBColor[0, 
         Rational[2, 3], 
         Rational[2, 3]], 
        RGBColor[
         Rational[2, 3], 
         Rational[2, 3], 0]}}, 0}, {{
       Hold[$CellContext`glConstPrimaryDisplaySize$$], {380, 380}}, 0}, {{
       Hold[$CellContext`glConstTextDisplayOffsetHack$$], {0.25, 0.25}}, 0}, {{
       Hold[$CellContext`glConstNeighboringCellIndexes$$], {{1, 0}, {0, 1}, {
       1, 1}, {1, -1}}}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstDefaultMass$$ = 
        20, $CellContext`glConstKDefaults$$ = {0.25, 0.25, 0.25, 0.25, 
         0.25}, $CellContext`glConstKMax$$ = 1, $CellContext`glConstKMin$$ = 
        0.05, $CellContext`glConstLocDefault$$ = {{0.1, 1.3}, {1.9, 
         0.8}}, $CellContext`glConstMinAngleBetweenLatticeVectors$$ = 
        Rational[1, 6] Pi, $CellContext`glConstMinSquaredDistanceFromOrigin$$ = 
        0.1, $CellContext`glConstMMax$$ = 
        30, $CellContext`glConstNeighboringCellIndexes$$ = {{1, 0}, {0, 1}, {
         1, 1}, {1, -1}}, $CellContext`glConstPrimaryDisplaySize$$ = {380, 
         380}, $CellContext`glConstSpringColors$$ = {
          RGBColor[
           Rational[2, 3], 0.33333333333333337`, 0], 
          RGBColor[0, 
           Rational[2, 3], 0], 
          RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
          RGBColor[0, 
           Rational[2, 3], 
           Rational[2, 3]], 
          RGBColor[
           Rational[2, 3], 
           Rational[2, 3], 
           0]}, $CellContext`glConstSpringColorsByN$$ = {}, \
$CellContext`glConstTextDisplayOffsetHack$$ = {0.25, 
         0.25}, $CellContext`glConstWindowHalfWidth$$ = 3, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`meshSize$$ = 
        8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
         1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tau$$ = 
        0, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ($CellContext`tick$$; Dynamic[
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`bRefreshDynPlot$$ = 
             False, Null]; $CellContext`dynPlot$$[$CellContext`tau$$], 
          
          If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
             Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
           LocatorPane[
            Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                  Dimensions[#]] < 3, 
                
                Flatten[{$CellContext`glConstLocDefault$$, \
$CellContext`mLocDefault$$}, 1], 
                If[First[
                   Dimensions[#]] > 7, 
                 Take[#, 7], #]]; 
             Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                First[
                  Dimensions[$CellContext`rawArrayOfMasses$$]]; 
               If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                   $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                 
                 While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass$$]; 
                  Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                  Part[
                   Part[$CellContext`kArray$$, All, 1], All, 1]]; 
               If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                 Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                 
                 While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                  Part[$CellContext`u$$, 1], 
                  
                  Part[$CellContext`u$$, 
                   1]] < $CellContext`glConstMinSquaredDistanceFromOrigin$$, 
                Part[$CellContext`glConstLocDefault$$, 1], 
                Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                  Part[$CellContext`u$$, 2], 
                  
                  Part[$CellContext`u$$, 
                   2]] < $CellContext`glConstMinSquaredDistanceFromOrigin$$, 
                Part[$CellContext`glConstLocDefault$$, 2], 
                Part[$CellContext`u$$, 2]]; {
                Part[$CellContext`u$$, 1], 
                
                Part[$CellContext`u$$, 
                 2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors$$]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
              If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
              If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
              If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
              ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
               
               2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
              True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
            $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
            LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period:"]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open"]}, 
                 ImageSize -> {200, 60}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Text[
                 Text["Angular frequency \[Omega](q), selection:"]], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["mesh size "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`meshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax$$]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax$$]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin$$], 
                 Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tau$$, 0}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`meshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`glConstMinSquaredDistanceFromOrigin$$, 0.1}, 0,
          ControlType -> 
         None}, {{$CellContext`glConstMinAngleBetweenLatticeVectors$$, 
          Rational[1, 6] Pi}, 0, ControlType -> 
         None}, {{$CellContext`glConstLocDefault$$, {{0.1, 1.3}, {1.9, 0.8}}},
          0, ControlType -> None}, {{$CellContext`glConstDefaultMass$$, 20}, 
         0, ControlType -> 
         None}, {{$CellContext`glConstKDefaults$$, {0.25, 0.25, 0.25, 0.25, 
          0.25}}, 0, ControlType -> 
         None}, {{$CellContext`glConstKMin$$, 0.05}, 0, ControlType -> 
         None}, {{$CellContext`glConstKMax$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`glConstMMax$$, 30}, 0, ControlType -> 
         None}, {{$CellContext`glConstWindowHalfWidth$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`glConstSpringColors$$, {
           RGBColor[
            Rational[2, 3], 0.33333333333333337`, 0], 
           RGBColor[0, 
            Rational[2, 3], 0], 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
           RGBColor[0, 
            Rational[2, 3], 
            Rational[2, 3]], 
           RGBColor[
            Rational[2, 3], 
            Rational[2, 3], 0]}}, 0, ControlType -> 
         None}, {{$CellContext`glConstPrimaryDisplaySize$$, {380, 380}}, 0, 
         ControlType -> 
         None}, {{$CellContext`glConstTextDisplayOffsetHack$$, {0.25, 0.25}}, 
         0, ControlType -> 
         None}, {{$CellContext`glConstNeighboringCellIndexes$$, {{1, 0}, {0, 
          1}, {1, 1}, {1, -1}}}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{915., {292., 299.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({{$CellContext`dynamicsMatrix[
           Pattern[$CellContext`ld, 
            Blank[List]], 
           Pattern[$CellContext`cd, 
            Blank[List]]] := 
         Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
              Sort[
               Flatten[$CellContext`cd, 2]], 
              First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
            ReplaceAll[{
              "latticeBasis", "mScalarArray", 
               "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
            Partition[
              IdentityMatrix[2 $CellContext`numberOfMasses], 
              2]; $CellContext`res = Partition[
              Flatten[
               Table[
                Total[
                 Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                   
                   Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                  
                  Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
              2 $CellContext`numberOfMasses]; 
           ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
            Pattern[$CellContext`k, 
             Blank[Integer]], 
            Pattern[$CellContext`j, 
             Blank[Integer]], 
            Pattern[$CellContext`mVec, 
             Blank[List]], 
            Pattern[$CellContext`kS, 
             Blank[]], 
            Blank[], 
            Blank[], 
            Blank[], 
            Pattern[$CellContext`proj, 
             Blank[List]]}, 
           Pattern[$CellContext`r, 
            Blank[List]], 
           Pattern[$CellContext`mk, 
            Blank[]], 
           Pattern[$CellContext`epsilon, 
            Blank[List]], 
           Pattern[$CellContext`mA, 
            Blank[List]]] := $CellContext`kS 
          Dot[$CellContext`proj, 
            Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
            Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
                 Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
             Sqrt[$CellContext`mk 
              Part[$CellContext`mA, $CellContext`j]])], \
$CellContext`calcDynamics[
           Pattern[$CellContext`mAtQ, 
            Blank[List]]] := Map[{
            Sqrt[
             Part[#, 1]], 
            Part[#, 2]}& , 
           Transpose[
            Eigensystem[$CellContext`mAtQ]]], $CellContext`showDynamics[
           Pattern[$CellContext`ld$, 
            Blank[List]], 
           Pattern[$CellContext`dynAtOmegaIndex$, 
            Blank[List]], 
           Pattern[$CellContext`sc$, 
            Blank[]], 
           Pattern[$CellContext`ql$, 
            Blank[]]] := 
         Module[{$CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`e$, \
$CellContext`omega$, $CellContext`points$, $CellContext`lines$, \
$CellContext`nu$, $CellContext`a$, $CellContext`b$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, {{$CellContext`a$, \
$CellContext`b$}, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
            ReplaceAll[{
              "latticeBasis", "pointsDataTable", 
               "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
               "numberOfMasses"}, $CellContext`ld$]; {$CellContext`omega$, \
$CellContext`e$} = $CellContext`dynAtOmegaIndex$; $CellContext`e$ = 
            Partition[$CellContext`e$, 2]; $CellContext`points$ = 
            Table[Part[$CellContext`pointsDataTable$, $CellContext`k] + 
              Table[$CellContext`sc$ 
                Re[Part[$CellContext`e$, $CellContext`k] 
                  E^(I (Dot[$CellContext`ql$, $CellContext`a$ $CellContext`i + \
$CellContext`b$ $CellContext`j] - $CellContext`omega$ #))], {$CellContext`i, -
                 Part[$CellContext`numberLatticeLinesToDisplay$, 1], 
                 
                 Part[$CellContext`numberLatticeLinesToDisplay$, 
                  1]}, {$CellContext`j, -
                 Part[$CellContext`numberLatticeLinesToDisplay$, 2], 
                 
                 Part[$CellContext`numberLatticeLinesToDisplay$, 
                  2]}]& , {$CellContext`k, $CellContext`numberOfMasses$}]; \
$CellContext`nu$ = (2 Pi) 
             If[$CellContext`omega$ == 0, 1, 1/$CellContext`omega$]; Show[{
              Table[
               ListPlot[
                
                Part[$CellContext`points$, $CellContext`k][$CellContext`nu$ \
#], PlotRange -> {{(-FE`glConstWindowHalfWidth$$39)/2, 
                   FE`glConstWindowHalfWidth$$39}, {(-
                    FE`glConstWindowHalfWidth$$39)/2, 
                   FE`glConstWindowHalfWidth$$39}}, ImageSize -> 
                FE`glConstPrimaryDisplaySize$$39, PlotStyle -> Directive[
                  PointSize[
                   Sqrt[
                   Part[$CellContext`mScalarArray$, $CellContext`k] (
                    FE`glConstMMax$$39^(-1)/350)]], 
                  $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$}], 
              Graphics[{$CellContext`lines$}]}]& ], 
         Attributes[$CellContext`ld$] = {Temporary}, 
         Attributes[$CellContext`dynAtOmegaIndex$] = {Temporary}, 
         Attributes[$CellContext`sc$] = {Temporary}, 
         Attributes[$CellContext`ql$] = {Temporary}, 
         Attributes[$CellContext`mScalarArray$] = {Temporary}, 
         Attributes[$CellContext`numberOfMasses$] = {Temporary}, 
         FE`glConstWindowHalfWidth$$39 = 3, 
         FE`glConstPrimaryDisplaySize$$39 = {380, 380}, FE`glConstMMax$$39 = 
         30, $CellContext`massColors := Part[
           Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
           1]& , $CellContext`frequencyPlotCalc[
           Pattern[$CellContext`ld$, 
            Blank[List]], 
           Pattern[$CellContext`m$, 
            Blank[]], 
           Pattern[$CellContext`meshSz$, 
            Blank[Integer]]] := 
         Module[{$CellContext`eigTable2D$, $CellContext`eigTable1D$, \
$CellContext`qMax$, $CellContext`omegaPointList2D$, \
$CellContext`omegaPointList1D$, $CellContext`range$, \
$CellContext`numberOfMasses$}, {$CellContext`qMax$, \
$CellContext`numberOfMasses$} = 
            ReplaceAll[{
              "qMaxVec", 
               "numberOfMasses"}, $CellContext`ld$]; $CellContext`eigTable2D$ = 
            Flatten[
              Re[
               Table[{{$CellContext`qx, $CellContext`qy}, 
                 Eigenvalues[
                  N[
                   $CellContext`m$[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, (-Part[$CellContext`qMax$, 1])/2, 
                 Part[$CellContext`qMax$, 1]/2, 
                 Part[$CellContext`qMax$, 
                   1]/$CellContext`meshSz$}, {$CellContext`qy, (-
                  Part[$CellContext`qMax$, 2])/2, Part[$CellContext`qMax$, 2]/
                 2, Part[$CellContext`qMax$, 2]/$CellContext`meshSz$}]], 
              1]; $CellContext`omegaPointList2D$[
              Pattern[$CellContext`nn$, 
               Blank[]]] := Map[Flatten[{
                Part[#, 1], 
                Part[
                 Sqrt[
                  
                  Part[#, 
                   2]], $CellContext`nn$]}]& , $CellContext`eigTable2D$]; \
$CellContext`range$ = Range[2 $CellContext`numberOfMasses$]; ListPlot3D[
             Map[$CellContext`omegaPointList2D$[#]& , $CellContext`range$], 
             PlotRange -> Full, ImageSize -> FE`glConstPrimaryDisplaySize$$39,
              AxesLabel -> {
              "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
               "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
         Attributes[$CellContext`m$] = {Temporary}, 
         Attributes[$CellContext`meshSz$] = {Temporary}, 
         Attributes[$CellContext`nn$] = {Temporary}, $CellContext`showFreqPlot[
           Pattern[$CellContext`qpl, 
            Blank[List]], 
           Pattern[$CellContext`freqPlotData, 
            Blank[]]] := 
         Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
              Graphics3D[
               Polygon[{{
                  Part[$CellContext`aa, 1], 
                  Part[$CellContext`aa, 2], 0}, {
                  Part[$CellContext`bb, 1], 
                  Part[$CellContext`bb, 2], 0}, {
                  Part[$CellContext`bb, 1], 
                  Part[$CellContext`bb, 2], 23}, {
                  Part[$CellContext`aa, 1], 
                  Part[$CellContext`aa, 2], 
                  23}}]]}]], $CellContext`nMassesFromLocArray[
           Pattern[$CellContext`uLoc, 
            Blank[]]] := First[
            Dimensions[$CellContext`uLoc]] - 
          2, $CellContext`returnKarrayForAdditionalMassIndex[
           Pattern[$CellContext`kA, 
            Blank[List]], 
           Pattern[$CellContext`nmNew, 
            Blank[Integer]]] := 
         Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
              Map[$CellContext`constructKArrayElements[
                Part[#, 1], 
                Part[#, 2]]& , 
               Select[
                Flatten[
                 
                 Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
                Max[#] == $CellContext`nmNew& ]], 2]; 
           Flatten[{$CellContext`kA, $CellContext`k2}, 
             1]], $CellContext`constructKArrayElements[
           Pattern[$CellContext`i$, 
            Blank[Integer]], 
           Pattern[$CellContext`j$, 
            Blank[Integer]]] := 
         Module[{$CellContext`a$}, $CellContext`a$ = Flatten[
              
              Table[{$CellContext`i$, $CellContext`j$, $CellContext`s 
                 Part[FE`glConstNeighboringCellIndexes$$39, $CellContext`n]} -> 
               Part[FE`glConstKDefaults$$39, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
           If[$CellContext`i$ < $CellContext`j$, 
             
             Append[$CellContext`a$, {$CellContext`i$, $CellContext`j$, {0, 
                0}} -> Part[FE`glConstKDefaults$$39, 5]], $CellContext`a$]], 
         Attributes[$CellContext`i$] = {Temporary}, 
         Attributes[$CellContext`j$] = {Temporary}, 
         FE`glConstNeighboringCellIndexes$$39 = {{1, 0}, {0, 1}, {1, 1}, {
          1, -1}}, 
         FE`glConstKDefaults$$39 = {0.25, 0.25, 0.25, 0.25, 
          0.25}, $CellContext`resetLatticeVectorsIfAngleTooSmall[
           Pattern[$CellContext`uLoc$, 
            Blank[List]], 
           Pattern[$CellContext`minAngle$, 
            Blank[]]] := Module[{$CellContext`t$}, $CellContext`t$ = Abs[
              ArcCos[
               Dot[
                Normalize[
                 Part[$CellContext`uLoc$, 1]], 
                Normalize[
                 Part[$CellContext`uLoc$, 2]]]]]; $CellContext`t$ = 
            If[$CellContext`t$ > Pi/2, Pi - $CellContext`t$, $CellContext`t$]; 
           If[$CellContext`t$ < $CellContext`minAngle$, 
             FE`glConstLocDefault$$39, {
              Part[$CellContext`uLoc$, 1], 
              Part[$CellContext`uLoc$, 2]}]], 
         Attributes[$CellContext`uLoc$] = {Temporary}, 
         Attributes[$CellContext`minAngle$] = {Temporary}, 
         Attributes[$CellContext`t$] = {Temporary}, 
         FE`glConstLocDefault$$39 = {{0.1, 1.3}, {1.9, 
          0.8}}, $CellContext`adjustedmoSel[
           Pattern[$CellContext`rNumM, 
            Blank[]], 
           Pattern[$CellContext`mOrigInd, 
            Blank[]], 
           Pattern[$CellContext`m1Ind, 
            Blank[]]] := If[$CellContext`rNumM > 2, 
           If[$CellContext`mOrigInd == $CellContext`m1Ind, 
            First[
             DeleteCases[
              
              Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
           First[
            Delete[
             Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
           Pattern[$CellContext`kA$, 
            Blank[List]], 
           Pattern[$CellContext`m1Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`m2Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`ni$, 
            Blank[Integer]]] := 
         ReplaceAll[{$CellContext`m1Ind$, $CellContext`m2Ind$, 
            Part[
            FE`glConstNeighboringCellIndexes$$39, $CellContext`ni$]}, \
$CellContext`kA$], Attributes[$CellContext`kA$] = {Temporary}, 
         Attributes[$CellContext`m1Ind$] = {Temporary}, 
         Attributes[$CellContext`m2Ind$] = {Temporary}, 
         Attributes[$CellContext`ni$] = {
          Temporary}, $CellContext`selectOriginVFromKarray[
           Pattern[$CellContext`kA, 
            Blank[List]], 
           Pattern[$CellContext`m1Ind, 
            Blank[Integer]], 
           Pattern[$CellContext`moInd, 
            Blank[Integer]]] := ReplaceAll[
           Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
            0}], $CellContext`kA], $CellContext`locDependent[
           Pattern[$CellContext`uLoc$, 
            Blank[List]], 
           Pattern[$CellContext`numMasses$, 
            Blank[Integer]], 
           Pattern[$CellContext`rma$, 
            Blank[List]]] := 
         Module[{$CellContext`m$, $CellContext`latticeBasis$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`reciprocalBasis$, \
$CellContext`mObliqueComponents$, $CellContext`mPosFirstCell$, \
$CellContext`reciprocalNorms$}, $CellContext`latticeBasis$ = 
            Take[$CellContext`uLoc$, 2]; $CellContext`m$ = 
            Drop[$CellContext`uLoc$, 
              2]; $CellContext`numberLatticeLinesToDisplay$ = Map[Ceiling[
               Abs[FE`glConstWindowHalfWidth$$39/Part[
                 Part[$CellContext`latticeBasis$, #], #]]]& , 
              Range[
              2]]; $CellContext`reciprocalBasis$ = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis$]; \
$CellContext`reciprocalNorms$ = Map[Norm[
               Part[$CellContext`reciprocalBasis$, #]]& , 
              Range[2]]; $CellContext`mObliqueComponents$ = Table[
              Dot[
               Part[$CellContext`m$, $CellContext`i], 
               
               Part[$CellContext`reciprocalBasis$, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses$}, {$CellContext`j, 
               2}]; $CellContext`mPosFirstCell$ = 
            Map[Part[$CellContext`m$, #] - Dot[
               Floor[
                
                Part[$CellContext`mObliqueComponents$, #]], \
$CellContext`latticeBasis$]& , 
              Range[$CellContext`numMasses$]]; {
            "mScalarArray" -> $CellContext`rma$, 
             "numberOfMasses" -> $CellContext`numMasses$, 
             "latticeBasis" -> $CellContext`latticeBasis$, "latticeNorms" -> 
             Map[Norm[
                Part[$CellContext`latticeBasis$, #]]& , 
               Range[2]], "latticeUnitVectors" -> Map[Normalize[
                Part[$CellContext`latticeBasis$, #]]& , 
               Range[2]], 
             "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay$, 
             "reciprocalBasis" -> $CellContext`reciprocalBasis$, 
             "reciprocalNorms" -> $CellContext`reciprocalNorms$, 
             "qMaxVec" -> (2 Pi) $CellContext`reciprocalNorms$, 
             "mObliqueComponents" -> $CellContext`mObliqueComponents$, 
             "mPosFirstCell" -> $CellContext`mPosFirstCell$, 
             "pointsDataTable" -> Map[$CellContext`pointsTable[
                
                Part[$CellContext`mPosFirstCell$, #], \
$CellContext`latticeBasis$, $CellContext`numberLatticeLinesToDisplay$]& , 
               Range[$CellContext`numMasses$]], "lineTable" -> 
             Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay$, $CellContext`latticeBasis$, #]& , 
               Permutations[{1, 2}]]}], 
         Attributes[$CellContext`numMasses$] = {Temporary}, 
         Attributes[$CellContext`rma$] = {
          Temporary}, $CellContext`calcReciprocalBasis[
           Pattern[$CellContext`loc, 
            Blank[List]]] := Inverse[
           Transpose[$CellContext`loc]], $CellContext`pointsTable[
           Pattern[$CellContext`mPosFirstCell, 
            Blank[List]], 
           Pattern[$CellContext`latticeBasis, 
            Blank[List]], 
           Pattern[$CellContext`numberLatticeLinesToDisplay, 
            Blank[List]]] := 
         Table[$CellContext`mPosFirstCell + 
           Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
            
            Part[$CellContext`numberLatticeLinesToDisplay, 
             1]}, {$CellContext`j, -
            Part[$CellContext`numberLatticeLinesToDisplay, 2], 
            
            Part[$CellContext`numberLatticeLinesToDisplay, 
             2]}], $CellContext`calcLineTable[
           Pattern[$CellContext`n, 
            Blank[List]], 
           Pattern[$CellContext`b, 
            Blank[List]], 
           Pattern[$CellContext`i, 
            Blank[List]]] := 
         Module[{$CellContext`first, $CellContext`second}, \
{$CellContext`first, $CellContext`second} = $CellContext`i; Table[
             
             Line[{(-Part[$CellContext`n, $CellContext`first]) 
                Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                Part[$CellContext`b, $CellContext`second], 
               Part[$CellContext`n, $CellContext`first] 
                Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, \
-Part[$CellContext`n, $CellContext`second], 
              
              Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`calculateCouplings[
           Pattern[$CellContext`ld, 
            Blank[List]], 
           Pattern[$CellContext`kA, 
            Blank[List]]] := 
         Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
            ReplaceAll[{
              "latticeBasis", "mPosFirstCell", 
               "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
            Map[Append[#, 
               $CellContext`relativeDifferences[$CellContext`r, \
$CellContext`mp, 
                First[#]]]& , 
              ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
            Map[Flatten[{
                Part[#, 1], {
                 Part[#, 2]}, 
                Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
              Sort[
               
               Select[$CellContext`t, And[
                Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
               Part[#, 5] < 
               Part[#2, 
                 5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
            Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
            Flatten[{$CellContext`t2, 
               Map[Flatten[{{
                   Part[#, 2], 
                   Part[#, 1]}, 
                  Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
            Table[
              Sort[
               Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
               Part[#, 5] < 
               Part[#2, 
                 5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], $CellContext`relativeDifferences[
           Pattern[$CellContext`r, 
            Blank[List]], 
           Pattern[$CellContext`mp, 
            Blank[List]], {
            Pattern[$CellContext`mIndex1, 
             Blank[Integer]], 
            Pattern[$CellContext`mIndex2, 
             Blank[Integer]], 
            Pattern[$CellContext`n, 
             Blank[List]]}] := 
         Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
            Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
            Part[$CellContext`mp, $CellContext`mIndex2] + 
             Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
            Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], $CellContext`projOpU[
           Pattern[$CellContext`v, 
            Blank[List]]] := {{
           Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
            Part[$CellContext`v, 2]}, {
           Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
            Part[$CellContext`v, 2]^2}}, $CellContext`plotSprings[
           Pattern[$CellContext`uLoc$, 
            Blank[List]], 
           Pattern[$CellContext`ld$, 
            Blank[List]], 
           Pattern[$CellContext`cd$, 
            Blank[List]], 
           Pattern[$CellContext`m1Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`m2Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`moInd$, 
            Blank[Integer]]] := 
         Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
            Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
            Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
            Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
            Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
             Dot[$CellContext`bLoc$, $CellContext`bLoc$]; \
{$CellContext`mLoc$, $CellContext`reciprocalBasis$, \
$CellContext`pointsDataTable$, $CellContext`numberLatticeLinesToDisplay$, \
$CellContext`lines$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
            ReplaceAll[{
              "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
               "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
               "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
              Pattern[$CellContext`n$, 
               Blank[Integer]]] := {
              $CellContext`massColors[$CellContext`n$], Null, 
              PointSize[
               Sqrt[
               Part[$CellContext`mScalarArray$, $CellContext`n$] (
                 FE`glConstMMax$$39^(-1)/500)]], 
              Map[Point[#]& , 
               Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
              Text[
               $CellContext`massLabel[$CellContext`n$], 
               Part[$CellContext`mLoc$, $CellContext`n$] + 
               FE`glConstTextDisplayOffsetHack$$39]}; $CellContext`cOrigin$ = 
            Select[
              Part[
               Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
              Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
              Part[
               Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
              Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
               $CellContext`spScaled[
                Take[#, {6, 7}], Part[#, 4]/
                FE`glConstKMax$$39, $CellContext`scaleLoc$], AspectRatio -> 
               Automatic, PlotStyle -> ReplaceAll[
                 Part[#, 3], 
                 FE`glConstSpringColorsByN$$39]]& , $CellContext`cN$]; 
           If[$CellContext`numberOfMasses$ > 1, 
             AppendTo[$CellContext`g$, 
              Map[ListLinePlot[
                $CellContext`spScaled[
                 Take[#, {6, 7}], Part[#, 4]/
                 FE`glConstKMax$$39, $CellContext`scaleLoc$], AspectRatio -> 
                Automatic, PlotStyle -> ReplaceAll[
                  Part[#, 3], 
                  FE`glConstSpringColorsByN$$39]]& , $CellContext`cOrigin$]], 
             Null]; Show[{
              Graphics[
               Flatten[{{$CellContext`lines$, Blue, 
                  Map[Arrow[{{0, 0}, 
                    Part[$CellContext`reciprocalBasis$, #]}]& , 
                   Range[2]], Thick, 
                  Arrowheads[0.05], Red, 
                  Map[Arrow[{{0, 0}, 
                    Part[$CellContext`latticeBasis$, #]}]& , 
                   Range[2]], 
                  Text[
                   OverVector["a"], $CellContext`aLoc$/2 + 
                   FE`glConstTextDisplayOffsetHack$$39], 
                  Text[
                   OverVector["b"], $CellContext`bLoc$/2 + 
                   FE`glConstTextDisplayOffsetHack$$39]}, 
                 Map[$CellContext`pointsList$[#]& , 
                  Range[$CellContext`numberOfMasses$]]}], 
               PlotRange -> {{(-FE`glConstWindowHalfWidth$$39)/2, 
                  FE`glConstWindowHalfWidth$$39}, {(-
                   FE`glConstWindowHalfWidth$$39)/2, 
                  FE`glConstWindowHalfWidth$$39}}, ImageSize -> 
               FE`glConstPrimaryDisplaySize$$39], $CellContext`g$}]], 
         Attributes[$CellContext`cd$] = {Temporary}, 
         Attributes[$CellContext`moInd$] = {Temporary}, 
         Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
         Style[
           $CellContext`indexLabel["m", #], 
           $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
           Style[#, Italic], #2]& , Attributes[Subscript] = {NHoldRest}, 
         FE`glConstTextDisplayOffsetHack$$39 = {0.25, 
          0.25}, $CellContext`spScaled[{
            Pattern[$CellContext`s1, 
             Blank[List]], 
            Pattern[$CellContext`s2, 
             Blank[List]]}, 
           Pattern[$CellContext`scaleKValue, 
            Blank[]], 
           Pattern[$CellContext`referenceSepSquared, 
            Blank[]]] := 
         Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
             
             Ceiling[(12 $CellContext`scaleKValue) 
              Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
           Pattern[$CellContext`a12, 
            Blank[List]], 
           Optional[
            Pattern[$CellContext`n, 
             Blank[Integer]], 8], 
           Optional[
            Pattern[$CellContext`h, 
             Blank[]], 0.05], 
           Optional[
            Pattern[$CellContext`f, 
             Blank[]], 0.1]] := 
         Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
            Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
            Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
              Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
            Dot[$CellContext`r, {$CellContext`n1, 0}]; {
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + ($CellContext`t (1 - 
                    2 $CellContext`f)) $CellContext`nd, $CellContext`h 
                 Sin[((2 
                    Pi) $CellContext`n) $CellContext`t]}], {$CellContext`t, 0,
                1, 0.01}], 
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                   2 $CellContext`f) $CellContext`nd + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
         FE`glConstKMax$$39 = 1, 
         FE`glConstSpringColorsByN$$39 = {{-1, 0} -> 
           RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
           RGBColor[0, 2/3, 0], {-1, -1} -> 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
           RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
           RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
           RGBColor[0, 2/3, 0], {1, 1} -> 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
           RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
           Pattern[$CellContext`v, 
            Blank[]], 
           Pattern[$CellContext`default, 
            Blank[]], 
           Pattern[$CellContext`lowerLimit, 
            Blank[]], 
           Pattern[$CellContext`upperLimit, 
            Blank[]]] := 
         Module[{$CellContext`result}, $CellContext`result = If[
              
              NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
            If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
            If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], \
$CellContext`massValue = $CellContext`checkAgainstRange[
          0.25, 0.25, 0.25, 30], $CellContext`kLable = Style[
           $CellContext`indexLabel["k", #], FontColor -> 
           Part[FE`glConstSpringColors$$39, #]]& , FE`glConstSpringColors$$39 = {
           RGBColor[2/3, 0.33333333333333337`, 0], 
           RGBColor[0, 2/3, 0], 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
           RGBColor[0, 2/3, 2/3], 
           RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKArrayElements[
           Pattern[$CellContext`kA$, 
            Blank[List]], 
           Pattern[$CellContext`m1Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`m2Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`ni$, 
            Blank[Integer]], 
           Pattern[$CellContext`v$, 
            Blank[]]] := 
         ReplaceAll[$CellContext`kA$, {({$CellContext`m1Ind$, \
$CellContext`m2Ind$, 
               Part[FE`glConstNeighboringCellIndexes$$39, $CellContext`ni$]} -> 
             Blank[]) :> ({$CellContext`m1Ind$, $CellContext`m2Ind$, 
               Part[
               FE`glConstNeighboringCellIndexes$$39, $CellContext`ni$]} -> \
$CellContext`v$), ({$CellContext`m1Ind$, $CellContext`m2Ind$, -
               Part[FE`glConstNeighboringCellIndexes$$39, $CellContext`ni$]} -> 
             Blank[]) :> ({$CellContext`m1Ind$, $CellContext`m2Ind$, -
               Part[FE`glConstNeighboringCellIndexes$$39, $CellContext`ni$]} -> \
$CellContext`v$)}], 
         Attributes[$CellContext`v$] = {
          Temporary}, $CellContext`returnAlteredKarrayOriginElement[
           Pattern[$CellContext`kA, 
            Blank[List]], 
           Pattern[$CellContext`m1Ind, 
            Blank[Integer]], 
           Pattern[$CellContext`moInd, 
            Blank[Integer]], 
           Pattern[$CellContext`v, 
            Blank[]]] := 
         Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
              Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
           ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
              Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; \
{$CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault$$, \
$CellContext`mLocDefault$$}, 1]; $CellContext`glConstSpringColorsByN$$ = 
          DeleteDuplicates[
            Flatten[
             Table[$CellContext`s Part[
                 
                 Append[$CellContext`glConstNeighboringCellIndexes$$, {0, 
                  0}], $CellContext`n] -> 
              Part[$CellContext`glConstSpringColors$$, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 5}], 
             1]]; $CellContext`checkAgainstRange[
            Pattern[$CellContext`v, 
             Blank[]], 
            Pattern[$CellContext`default, 
             Blank[]], 
            Pattern[$CellContext`lowerLimit, 
             Blank[]], 
            Pattern[$CellContext`upperLimit, 
             Blank[]]] := 
          Module[{$CellContext`result}, $CellContext`result = If[
               
               NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
             If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
             If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result]; \
$CellContext`springPoints[
            Pattern[$CellContext`a12, 
             Blank[List]], 
            Optional[
             Pattern[$CellContext`n, 
              Blank[Integer]], 8], 
            Optional[
             Pattern[$CellContext`h, 
              Blank[]], 0.05], 
            Optional[
             Pattern[$CellContext`f, 
              Blank[]], 0.1]] := 
          Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
             Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
             Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
               Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
             Dot[$CellContext`r, {$CellContext`n1, 0}]; {
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + ($CellContext`t (1 - 
                    2 $CellContext`f)) $CellContext`nd, $CellContext`h 
                  Sin[((2 
                    Pi) $CellContext`n) $CellContext`t]}], {$CellContext`t, 0,
                 1, 0.01}], 
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                    2 $CellContext`f) $CellContext`nd + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 
                0.01}]}]; $CellContext`indexLabel = Subscript[
            Style[#, Italic], #2]& ; $CellContext`kLable = Style[
            $CellContext`indexLabel["k", #], FontColor -> 
            Part[$CellContext`glConstSpringColors$$, #]]& ; \
$CellContext`massColors := Part[
            Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
            1]& ; $CellContext`massLabel := Style[
            $CellContext`indexLabel["m", #], 
            $CellContext`massColors[#]]& ; $CellContext`calcLineTable[
            Pattern[$CellContext`n, 
             Blank[List]], 
            Pattern[$CellContext`b, 
             Blank[List]], 
            Pattern[$CellContext`i, 
             Blank[List]]] := 
          Module[{$CellContext`first, $CellContext`second}, \
{$CellContext`first, $CellContext`second} = $CellContext`i; Table[
              
              Line[{(-Part[$CellContext`n, $CellContext`first]) 
                 Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                 Part[$CellContext`b, $CellContext`second], 
                Part[$CellContext`n, $CellContext`first] 
                 Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                 Part[$CellContext`b, $CellContext`second]}], \
{$CellContext`j, -Part[$CellContext`n, $CellContext`second], 
               
               Part[$CellContext`n, $CellContext`second]}]]; \
$CellContext`calcReciprocalBasis[
            Pattern[$CellContext`loc, 
             Blank[List]]] := Inverse[
            Transpose[$CellContext`loc]]; $CellContext`pointsTable[
            Pattern[$CellContext`mPosFirstCell, 
             Blank[List]], 
            Pattern[$CellContext`latticeBasis, 
             Blank[List]], 
            Pattern[$CellContext`numberLatticeLinesToDisplay, 
             Blank[List]]] := 
          Table[$CellContext`mPosFirstCell + 
            Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
             
             Part[$CellContext`numberLatticeLinesToDisplay, 
              1]}, {$CellContext`j, -
             Part[$CellContext`numberLatticeLinesToDisplay, 2], 
             
             Part[$CellContext`numberLatticeLinesToDisplay, 
              2]}]; $CellContext`nMassesFromLocArray[
            Pattern[$CellContext`uLoc, 
             Blank[]]] := First[
             Dimensions[$CellContext`uLoc]] - 2; $CellContext`adjustedmoSel[
            Pattern[$CellContext`rNumM, 
             Blank[]], 
            Pattern[$CellContext`mOrigInd, 
             Blank[]], 
            Pattern[$CellContext`m1Ind, 
             Blank[]]] := If[$CellContext`rNumM > 2, 
            If[$CellContext`mOrigInd == $CellContext`m1Ind, 
             First[
              DeleteCases[
               
               Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
            First[
             Delete[
              Range[
              2], $CellContext`m1Ind]]]; $CellContext`constructKArrayElements[
            Pattern[$CellContext`i$, 
             Blank[Integer]], 
            Pattern[$CellContext`j$, 
             Blank[Integer]]] := 
          Module[{$CellContext`a$}, $CellContext`a$ = Flatten[
               
               Table[{$CellContext`i$, $CellContext`j$, $CellContext`s 
                  Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`n]} -> 
                Part[$CellContext`glConstKDefaults$$, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
            If[$CellContext`i$ < $CellContext`j$, 
              
              Append[$CellContext`a$, {$CellContext`i$, $CellContext`j$, {0, 
                 0}} -> Part[$CellContext`glConstKDefaults$$, 
                 5]], $CellContext`a$]]; $CellContext`constructKArray[
            Pattern[$CellContext`r, 
             Blank[Integer]]] := Flatten[
            Table[
             $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2]; $CellContext`returnAlteredKArrayElements[
            Pattern[$CellContext`kA$, 
             Blank[List]], 
            Pattern[$CellContext`m1Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`m2Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`ni$, 
             Blank[Integer]], 
            Pattern[$CellContext`v$, 
             Blank[]]] := 
          ReplaceAll[$CellContext`kA$, {({$CellContext`m1Ind$, \
$CellContext`m2Ind$, 
                
                Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]} -> Blank[]) :> ({$CellContext`m1Ind$, $CellContext`m2Ind$, 
                
                Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]} -> $CellContext`v$), ({$CellContext`m1Ind$, \
$CellContext`m2Ind$, -
                Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]} -> 
              Blank[]) :> ({$CellContext`m1Ind$, $CellContext`m2Ind$, -
                Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]} -> $CellContext`v$)}]; \
$CellContext`returnAlteredKarrayOriginElement[
            Pattern[$CellContext`kA, 
             Blank[List]], 
            Pattern[$CellContext`m1Ind, 
             Blank[Integer]], 
            Pattern[$CellContext`moInd, 
             Blank[Integer]], 
            Pattern[$CellContext`v, 
             Blank[]]] := 
          Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
               Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
            ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
               Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]; \
$CellContext`selectVFromKarray[
            Pattern[$CellContext`kA$, 
             Blank[List]], 
            Pattern[$CellContext`m1Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`m2Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`ni$, 
             Blank[Integer]]] := 
          ReplaceAll[{$CellContext`m1Ind$, $CellContext`m2Ind$, 
             
             Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]}, $CellContext`kA$]; $CellContext`selectOriginVFromKarray[
            Pattern[$CellContext`kA, 
             Blank[List]], 
            Pattern[$CellContext`m1Ind, 
             Blank[Integer]], 
            Pattern[$CellContext`moInd, 
             Blank[Integer]]] := ReplaceAll[
            Append[
             Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
             0}], $CellContext`kA]; \
$CellContext`returnKarrayForAdditionalMassIndex[
            Pattern[$CellContext`kA, 
             Blank[List]], 
            Pattern[$CellContext`nmNew, 
             Blank[Integer]]] := 
          Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
               Map[$CellContext`constructKArrayElements[
                 Part[#, 1], 
                 Part[#, 2]]& , 
                Select[
                 Flatten[
                  
                  Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
                 Max[#] == $CellContext`nmNew& ]], 2]; 
            Flatten[{$CellContext`kA, $CellContext`k2}, 
              1]]; $CellContext`resetLatticeVectorsIfAngleTooSmall[
            Pattern[$CellContext`uLoc$, 
             Blank[List]], 
            Pattern[$CellContext`minAngle$, 
             Blank[]]] := Module[{$CellContext`t$}, $CellContext`t$ = Abs[
               ArcCos[
                Dot[
                 Normalize[
                  Part[$CellContext`uLoc$, 1]], 
                 Normalize[
                  Part[$CellContext`uLoc$, 2]]]]]; $CellContext`t$ = 
             If[$CellContext`t$ > Pi/2, 
               Pi - $CellContext`t$, $CellContext`t$]; 
            If[$CellContext`t$ < $CellContext`minAngle$, \
$CellContext`glConstLocDefault$$, {
               Part[$CellContext`uLoc$, 1], 
               Part[$CellContext`uLoc$, 2]}]]; $CellContext`locDependent[
            Pattern[$CellContext`uLoc$, 
             Blank[List]], 
            Pattern[$CellContext`numMasses$, 
             Blank[Integer]], 
            Pattern[$CellContext`rma$, 
             Blank[List]]] := 
          Module[{$CellContext`m$, $CellContext`latticeBasis$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`reciprocalBasis$, \
$CellContext`mObliqueComponents$, $CellContext`mPosFirstCell$, \
$CellContext`reciprocalNorms$}, $CellContext`latticeBasis$ = 
             Take[$CellContext`uLoc$, 2]; $CellContext`m$ = 
             Drop[$CellContext`uLoc$, 
               2]; $CellContext`numberLatticeLinesToDisplay$ = Map[Ceiling[
                Abs[$CellContext`glConstWindowHalfWidth$$/Part[
                  Part[$CellContext`latticeBasis$, #], #]]]& , 
               Range[
               2]]; $CellContext`reciprocalBasis$ = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis$]; \
$CellContext`reciprocalNorms$ = Map[Norm[
                Part[$CellContext`reciprocalBasis$, #]]& , 
               Range[2]]; $CellContext`mObliqueComponents$ = Table[
               Dot[
                Part[$CellContext`m$, $CellContext`i], 
                
                Part[$CellContext`reciprocalBasis$, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses$}, {$CellContext`j, 
                2}]; $CellContext`mPosFirstCell$ = 
             Map[Part[$CellContext`m$, #] - Dot[
                Floor[
                 
                 Part[$CellContext`mObliqueComponents$, #]], \
$CellContext`latticeBasis$]& , 
               Range[$CellContext`numMasses$]]; {
             "mScalarArray" -> $CellContext`rma$, 
              "numberOfMasses" -> $CellContext`numMasses$, 
              "latticeBasis" -> $CellContext`latticeBasis$, "latticeNorms" -> 
              Map[Norm[
                 Part[$CellContext`latticeBasis$, #]]& , 
                Range[2]], "latticeUnitVectors" -> Map[Normalize[
                 Part[$CellContext`latticeBasis$, #]]& , 
                Range[2]], 
              "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay$, 
              "reciprocalBasis" -> $CellContext`reciprocalBasis$, 
              "reciprocalNorms" -> $CellContext`reciprocalNorms$, 
              "qMaxVec" -> (2 Pi) $CellContext`reciprocalNorms$, 
              "mObliqueComponents" -> $CellContext`mObliqueComponents$, 
              "mPosFirstCell" -> $CellContext`mPosFirstCell$, 
              "pointsDataTable" -> Map[$CellContext`pointsTable[
                 
                 Part[$CellContext`mPosFirstCell$, #], \
$CellContext`latticeBasis$, $CellContext`numberLatticeLinesToDisplay$]& , 
                Range[$CellContext`numMasses$]], "lineTable" -> 
              Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay$, $CellContext`latticeBasis$, #]& , 
                Permutations[{1, 2}]]}]; $CellContext`projOpU[
            Pattern[$CellContext`v, 
             Blank[List]]] := {{
            Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
             Part[$CellContext`v, 2]}, {
            Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
             Part[$CellContext`v, 2]^2}}; $CellContext`projOp[
            Pattern[$CellContext`v, 
             Blank[List]]] := $CellContext`projOpU[$CellContext`v]/
           Dot[$CellContext`v, $CellContext`v]; \
$CellContext`relativeDifferences[
            Pattern[$CellContext`r, 
             Blank[List]], 
            Pattern[$CellContext`mp, 
             Blank[List]], {
             Pattern[$CellContext`mIndex1, 
              Blank[Integer]], 
             Pattern[$CellContext`mIndex2, 
              Blank[Integer]], 
             Pattern[$CellContext`n, 
              Blank[List]]}] := 
          Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
             Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
             Part[$CellContext`mp, $CellContext`mIndex2] + 
              Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
             Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}]; \
$CellContext`calculateCouplings[
            Pattern[$CellContext`ld, 
             Blank[List]], 
            Pattern[$CellContext`kA, 
             Blank[List]]] := 
          Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
             ReplaceAll[{
               "latticeBasis", "mPosFirstCell", 
                "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
             Map[Append[#, 
                $CellContext`relativeDifferences[$CellContext`r, \
$CellContext`mp, 
                 First[#]]]& , 
               ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
             Map[Flatten[{
                 Part[#, 1], {
                  Part[#, 2]}, 
                 Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
               Sort[
                
                Select[$CellContext`t, And[
                 Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
                Part[#, 5] < 
                Part[#2, 
                  5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
             Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
             Flatten[{$CellContext`t2, 
                Map[Flatten[{{
                    Part[#, 2], 
                    Part[#, 1]}, 
                   Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
             Table[
               Sort[
                Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
                Part[#, 5] < 
                Part[#2, 
                  5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}]; $CellContext`spScaled[{
             Pattern[$CellContext`s1, 
              Blank[List]], 
             Pattern[$CellContext`s2, 
              Blank[List]]}, 
            Pattern[$CellContext`scaleKValue, 
             Blank[]], 
            Pattern[$CellContext`referenceSepSquared, 
             Blank[]]] := 
          Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
              
              Ceiling[(12 $CellContext`scaleKValue) 
               Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]]; \
$CellContext`plotSprings[
            Pattern[$CellContext`uLoc$, 
             Blank[List]], 
            Pattern[$CellContext`ld$, 
             Blank[List]], 
            Pattern[$CellContext`cd$, 
             Blank[List]], 
            Pattern[$CellContext`m1Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`m2Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`moInd$, 
             Blank[Integer]]] := 
          Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
             Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
             Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
             Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
             Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
              Dot[$CellContext`bLoc$, $CellContext`bLoc$]; \
{$CellContext`mLoc$, $CellContext`reciprocalBasis$, \
$CellContext`pointsDataTable$, $CellContext`numberLatticeLinesToDisplay$, \
$CellContext`lines$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
                "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
                "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
               Pattern[$CellContext`n$, 
                Blank[Integer]]] := {
               $CellContext`massColors[$CellContext`n$], Null, 
               PointSize[
                
                Sqrt[(Part[$CellContext`mScalarArray$, \
$CellContext`n$]/$CellContext`glConstMMax$$)/500]], 
               Map[Point[#]& , 
                Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
               Text[
                $CellContext`massLabel[$CellContext`n$], 
                Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack$$]}; $CellContext`cOrigin$ = Select[
               Part[
                Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
               Take[#, 
                 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
               Part[
                Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
               Take[#, 
                 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
                $CellContext`spScaled[
                 Take[#, {6, 7}], 
                 Part[#, 
                   4]/$CellContext`glConstKMax$$, $CellContext`scaleLoc$], 
                AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                  
                  Part[#, 
                   3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
              AppendTo[$CellContext`g$, 
               Map[ListLinePlot[
                 $CellContext`spScaled[
                  Take[#, {6, 7}], 
                  Part[#, 
                    4]/$CellContext`glConstKMax$$, $CellContext`scaleLoc$], 
                 AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                   
                   Part[#, 
                    3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
               Graphics[
                Flatten[{{$CellContext`lines$, Blue, 
                   Map[Arrow[{{0, 0}, 
                    Part[$CellContext`reciprocalBasis$, #]}]& , 
                    Range[2]], Thick, 
                   Arrowheads[0.05], Red, 
                   Map[Arrow[{{0, 0}, 
                    Part[$CellContext`latticeBasis$, #]}]& , 
                    Range[2]], 
                   Text[
                    OverVector[
                    "a"], $CellContext`aLoc$/
                    2 + $CellContext`glConstTextDisplayOffsetHack$$], 
                   Text[
                    OverVector[
                    "b"], $CellContext`bLoc$/
                    2 + $CellContext`glConstTextDisplayOffsetHack$$]}, 
                  Map[$CellContext`pointsList$[#]& , 
                   Range[$CellContext`numberOfMasses$]]}], 
                PlotRange -> {{(-$CellContext`glConstWindowHalfWidth$$)/
                   2, $CellContext`glConstWindowHalfWidth$$}, \
{(-$CellContext`glConstWindowHalfWidth$$)/
                   2, $CellContext`glConstWindowHalfWidth$$}}, 
                ImageSize -> $CellContext`glConstPrimaryDisplaySize$$], \
$CellContext`g$}]]; $CellContext`oneTermOfdynamicsMatrix[{
             Pattern[$CellContext`k, 
              Blank[Integer]], 
             Pattern[$CellContext`j, 
              Blank[Integer]], 
             Pattern[$CellContext`mVec, 
              Blank[List]], 
             Pattern[$CellContext`kS, 
              Blank[]], 
             Blank[], 
             Blank[], 
             Blank[], 
             Pattern[$CellContext`proj, 
              Blank[List]]}, 
            Pattern[$CellContext`r, 
             Blank[List]], 
            Pattern[$CellContext`mk, 
             Blank[]], 
            Pattern[$CellContext`epsilon, 
             Blank[List]], 
            Pattern[$CellContext`mA, 
             Blank[List]]] := $CellContext`kS 
           Dot[$CellContext`proj, 
             Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
             Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
                  Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
              Sqrt[$CellContext`mk 
               Part[$CellContext`mA, $CellContext`j]])]; \
$CellContext`dynamicsMatrix[
            Pattern[$CellContext`ld, 
             Blank[List]], 
            Pattern[$CellContext`cd, 
             Blank[List]]] := 
          Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
               Sort[
                Flatten[$CellContext`cd, 2]], 
               First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
             ReplaceAll[{
               "latticeBasis", "mScalarArray", 
                "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
             Partition[
               IdentityMatrix[2 $CellContext`numberOfMasses], 
               2]; $CellContext`res = Partition[
               Flatten[
                Table[
                 Total[
                  Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                    
                    Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                   
                   Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
               2 $CellContext`numberOfMasses]; 
            ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ]; \
$CellContext`calcDynamics[
            Pattern[$CellContext`mAtQ, 
             Blank[List]]] := Map[{
             Sqrt[
              Part[#, 1]], 
             Part[#, 2]}& , 
            Transpose[
             Eigensystem[$CellContext`mAtQ]]]; $CellContext`showDynamics[
            Pattern[$CellContext`ld$, 
             Blank[List]], 
            Pattern[$CellContext`dynAtOmegaIndex$, 
             Blank[List]], 
            Pattern[$CellContext`sc$, 
             Blank[]], 
            Pattern[$CellContext`ql$, 
             Blank[]]] := 
          Module[{$CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`e$, \
$CellContext`omega$, $CellContext`points$, $CellContext`lines$, \
$CellContext`nu$, $CellContext`a$, $CellContext`b$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, {{$CellContext`a$, \
$CellContext`b$}, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "latticeBasis", "pointsDataTable", 
                "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
                "numberOfMasses"}, $CellContext`ld$]; {$CellContext`omega$, \
$CellContext`e$} = $CellContext`dynAtOmegaIndex$; $CellContext`e$ = 
             Partition[$CellContext`e$, 2]; $CellContext`points$ = 
             Table[Part[$CellContext`pointsDataTable$, $CellContext`k] + 
               Table[$CellContext`sc$ 
                 Re[Part[$CellContext`e$, $CellContext`k] 
                   E^(I (Dot[$CellContext`ql$, $CellContext`a$ $CellContext`i + \
$CellContext`b$ $CellContext`j] - $CellContext`omega$ #))], {$CellContext`i, -
                  Part[$CellContext`numberLatticeLinesToDisplay$, 1], 
                  
                  Part[$CellContext`numberLatticeLinesToDisplay$, 
                   1]}, {$CellContext`j, -
                  Part[$CellContext`numberLatticeLinesToDisplay$, 2], 
                  
                  Part[$CellContext`numberLatticeLinesToDisplay$, 
                   2]}]& , {$CellContext`k, $CellContext`numberOfMasses$}]; \
$CellContext`nu$ = (2 Pi) 
              If[$CellContext`omega$ == 0, 1, 1/$CellContext`omega$]; Show[{
               Table[
                ListPlot[
                 
                 Part[$CellContext`points$, $CellContext`k][$CellContext`nu$ \
#], PlotRange -> {{(-$CellContext`glConstWindowHalfWidth$$)/
                    2, $CellContext`glConstWindowHalfWidth$$}, \
{(-$CellContext`glConstWindowHalfWidth$$)/
                    2, $CellContext`glConstWindowHalfWidth$$}}, 
                 ImageSize -> $CellContext`glConstPrimaryDisplaySize$$, 
                 PlotStyle -> Directive[
                   PointSize[
                    
                    Sqrt[(Part[$CellContext`mScalarArray$, \
$CellContext`k]/$CellContext`glConstMMax$$)/350]], 
                   $CellContext`massColors[$CellContext`k]]], \
{$CellContext`k, $CellContext`numberOfMasses$}], 
               
               Graphics[{$CellContext`lines$}]}]& ]; \
$CellContext`frequencyPlotCalc[
            Pattern[$CellContext`ld$, 
             Blank[List]], 
            Pattern[$CellContext`m$, 
             Blank[]], 
            Pattern[$CellContext`meshSz$, 
             Blank[Integer]]] := 
          Module[{$CellContext`eigTable2D$, $CellContext`eigTable1D$, \
$CellContext`qMax$, $CellContext`omegaPointList2D$, \
$CellContext`omegaPointList1D$, $CellContext`range$, \
$CellContext`numberOfMasses$}, {$CellContext`qMax$, \
$CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "qMaxVec", 
                "numberOfMasses"}, $CellContext`ld$]; \
$CellContext`eigTable2D$ = Flatten[
               Re[
                Table[{{$CellContext`qx, $CellContext`qy}, 
                  Eigenvalues[
                   N[
                    $CellContext`m$[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, (-Part[$CellContext`qMax$, 1])/2, 
                  Part[$CellContext`qMax$, 1]/2, 
                  Part[$CellContext`qMax$, 
                    1]/$CellContext`meshSz$}, {$CellContext`qy, (-
                   Part[$CellContext`qMax$, 2])/2, 
                  Part[$CellContext`qMax$, 2]/2, 
                  Part[$CellContext`qMax$, 2]/$CellContext`meshSz$}]], 
               1]; $CellContext`omegaPointList2D$[
               Pattern[$CellContext`nn$, 
                Blank[]]] := Map[Flatten[{
                 Part[#, 1], 
                 Part[
                  Sqrt[
                   
                   Part[#, 
                    2]], $CellContext`nn$]}]& , $CellContext`eigTable2D$]; \
$CellContext`range$ = Range[2 $CellContext`numberOfMasses$]; ListPlot3D[
              Map[$CellContext`omegaPointList2D$[#]& , $CellContext`range$], 
              PlotRange -> Full, 
              ImageSize -> $CellContext`glConstPrimaryDisplaySize$$, 
              AxesLabel -> {
               "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
                "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]]; \
$CellContext`showFreqPlot[
            Pattern[$CellContext`qpl, 
             Blank[List]], 
            Pattern[$CellContext`freqPlotData, 
             Blank[]]] := 
          Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
               Graphics3D[
                Polygon[{{
                   Part[$CellContext`aa, 1], 
                   Part[$CellContext`aa, 2], 0}, {
                   Part[$CellContext`bb, 1], 
                   Part[$CellContext`bb, 2], 0}, {
                   Part[$CellContext`bb, 1], 
                   Part[$CellContext`bb, 2], 23}, {
                   Part[$CellContext`aa, 1], 
                   Part[$CellContext`aa, 2], 
                   23}}]]}]]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; Null}}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.600991920019863*^9, 3.6009919670395527`*^9}, {
   3.6009920245298405`*^9, 3.6009920501333055`*^9}, 3.60099313594541*^9, {
   3.600993187449356*^9, 3.600993239845353*^9}, {3.6009932797776365`*^9, 
   3.6009933046760607`*^9}, {3.6012440341096554`*^9, 3.6012440721578317`*^9}, 
   3.6012447781242104`*^9, {3.6012448176024685`*^9, 3.6012448561326723`*^9}, 
   3.6012449730663605`*^9, {3.6012450799064713`*^9, 3.601245088751977*^9}, {
   3.601245122802925*^9, 3.6012451299813356`*^9}, {3.6012451718047276`*^9, 
   3.601245397972664*^9}, {3.6012467859190493`*^9, 3.6012468229691687`*^9}, {
   3.601246896213358*^9, 3.6012470488980913`*^9}, {3.6012470802998877`*^9, 
   3.601247087356291*^9}, {3.6012476034298086`*^9, 3.601247625026044*^9}, {
   3.6012477383525257`*^9, 3.6012477482580924`*^9}, {3.6012479226070642`*^9, 
   3.6012479616512976`*^9}, 3.6012480156453857`*^9, {3.6013815489528093`*^9, 
   3.6013815749782977`*^9}, 3.6013816959272156`*^9, 3.6013818936795263`*^9, 
   3.601381933169785*^9, 3.6013820135453825`*^9, {3.6013836360981865`*^9, 
   3.6013836435886154`*^9}},
 CellID->496505927]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}}, {{
       2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}, {{
       3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}, {
       3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}}, {{{
       1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
        0.09999999999999987}, {{
        0.19999999999999987`, -0.3999999999999999}, {-0.3999999999999999, 
        0.8}}}, {
       1, 2, {-1, 0}, 0.25, 1., {0.9, 0.7}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       1, 2, {-1, 1}, 0.25, 1.6899999999999995`, {0.9, 0.7}, {
        2.1999999999999997`, 0.7}, {{0.9999999999999999, 0.}, {0., 0.}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 3, {0, -1}, 0.25, 2.2600000000000002`, {0.9, 
        0.7}, {-0.5999999999999999, 0.5999999999999999}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       1, 3, {1, -1}, 0.25, 3.3999999999999995`, {0.9, 
        0.7}, {-0.4999999999999998, 1.9}, {{
        0.5764705882352942, -0.4941176470588236}, {-0.4941176470588236, 
        0.423529411764706}}}, {
       1, 2, {1, 0}, 0.25, 3.4000000000000004`, {0.9, 0.7}, {0.5, 2.5}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 2, {0, 1}, 0.25, 3.65, {0.9, 0.7}, {2.3, 2.}, {{0.5369863013698629, 
        0.4986301369863013}, {0.4986301369863013, 0.463013698630137}}}, {
       1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 2.7}, {{
        0.05882352941176473, 0.23529411764705888`}, {0.23529411764705888`, 
        0.9411764705882353}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 3, {-1, -1}, 0.25, 4.520000000000001, {0.9, 
        0.7}, {-0.7, -0.7000000000000002}, {{0.5663716814159291, 
        0.49557522123893794`}, {0.49557522123893794`, 
        0.43362831858407075`}}}, {
       1, 3, {-1, 1}, 0.25, 4.879999999999999, {0.9, 0.7}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       1, 2, {0, -1}, 0.25, 5.85, {0.9, 0.7}, {-1.5, 0.3999999999999999}, {{
        0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
        0.015384615384615389`}}}, {
       1, 2, {1, -1}, 0.25, 6.289999999999999, {0.9, 0.7}, {-1.4, 1.7}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       1, 3, {0, 1}, 0.25, 7.540000000000002, {0.9, 0.7}, {3.2, 2.2}, {{
        0.7015915119363394, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 2, {-1, -1}, 0.25, 8.81, {0.9, 0.7}, {-1.6, -0.9000000000000001}, {{
        0.7094211123723042, 0.4540295119182747}, {0.4540295119182747, 
        0.29057888762769585`}}}, {
       1, 2, {1, 1}, 0.25, 9.009999999999998, {0.9, 0.7}, {2.4, 3.3}, {{
        0.24972253052164267`, 0.4328523862375139}, {0.4328523862375139, 
        0.7502774694783573}}}, {
       1, 3, {1, 1}, 0.25, 13.599999999999998`, {0.9, 0.7}, {3.3, 3.5}, {{
        0.423529411764706, 0.4941176470588236}, {0.4941176470588236, 
        0.5764705882352942}}}}, {{
       2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       2, 3, {1, -1}, 0.25, 1.2999999999999996`, {0.4, 
        1.2}, {-0.4999999999999998, 1.9}, {{
        0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
        0.376923076923077}}}, {
       2, 3, {0, -1}, 0.25, 1.3599999999999999`, {0.4, 
        1.2}, {-0.5999999999999999, 0.5999999999999999}, {{0.7352941176470588,
         0.44117647058823534`}, {0.44117647058823534`, 
        0.2647058823529413}}}, {
       2, 1, {1, -1}, 0.25, 1.6899999999999995`, {0.4, 
        1.2}, {-0.8999999999999998, 1.2}, {{0.9999999999999999, 0.}, {0., 
        0.}}}, {2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
        2.5}, {{0.005882352941176467, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 0.09999999999999987}, {{
        0.34594594594594585`, -0.4756756756756756}, {-0.4756756756756756, 
        0.654054054054054}}}, {
       2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
        1.4000000000000001`, 2.7}, {{0.3076923076923076, 
        0.46153846153846145`}, {0.46153846153846145`, 0.6923076923076924}}}, {
       2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
        0.8, -0.6000000000000001}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {-1.4, 1.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {
        2.1999999999999997`, 0.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {0, -1}, 0.25, 3.65, {0.4, 
        1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
        0.463013698630137}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 0.3999999999999999}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 3, {-1, -1}, 0.25, 4.82, {0.4, 1.2}, {-0.7, -0.7000000000000002}, {{
        0.25103734439834025`, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{0.9846153846153846,
         0.1230769230769231}, {0.1230769230769231, 0.015384615384615389`}}}, {
       2, 1, {-1, 1}, 0.25, 6.289999999999999, {0.4, 1.2}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       2, 3, {-1, 1}, 0.25, 7.379999999999998, {0.4, 1.2}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9878048780487806, -0.10975609756097565`}, {-0.10975609756097565`, 
        0.01219512195121952}}}, {
       2, 2, {1, 1}, 0.25, 8.409999999999998, {0.4, 1.2}, {2.4, 3.3}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {0.4, 1.2}, {-1.6, -0.9000000000000001}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 1, {1, 1}, 0.25, 8.809999999999999, {0.4, 1.2}, {2.9, 2.8}, {{
        0.7094211123723043, 0.4540295119182747}, {0.4540295119182747, 
        0.2905788876276958}}}, {
       2, 3, {0, 1}, 0.25, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
        0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570139`}}}, {
       2, 1, {-1, -1}, 0.25, 9.010000000000002, {0.4, 
        1.2}, {-1.1, -1.4000000000000001`}, {{0.24972253052164256`, 
        0.4328523862375138}, {0.4328523862375138, 0.7502774694783573}}}, {
       2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{0.6138686131386862,
         0.48686131386861314`}, {0.48686131386861314`, 
        0.3861313868613139}}}}, {{
       3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
        0.19999999999999998`, -0.39999999999999997`}, {-0.39999999999999997`, 
        0.7999999999999999}}}, {
       3, 2, {-1, 1}, 0.25, 1.2999999999999994`, {1.3, 1.4}, {
        2.1999999999999997`, 0.7}, {{
        0.6230769230769229, -0.48461538461538467`}, {-0.48461538461538467`, 
        0.3769230769230771}}}, {
       3, 2, {0, 1}, 0.25, 1.3599999999999997`, {1.3, 1.4}, {2.3, 2.}, {{
        0.7352941176470587, 0.4411764705882354}, {0.4411764705882354, 
        0.2647058823529413}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
        1.4000000000000001`, 2.7}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
        0.09999999999999987}, {{0.00588235294117648, 0.07647058823529418}, {
        0.07647058823529418, 0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 2.5}, {{
        0.34594594594594597`, -0.47567567567567565`}, {-0.47567567567567565`, 
        0.654054054054054}}}, {
       3, 1, {0, 1}, 0.25, 2.26, {1.3, 1.4}, {2.8, 1.5}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.3076923076923077, 
        0.46153846153846156`}, {0.46153846153846156`, 0.6923076923076923}}}, {
       3, 1, {-1, 1}, 0.25, 3.399999999999999, {1.3, 1.4}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.576470588235294, -0.4941176470588235}, {-0.4941176470588235, 
        0.423529411764706}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.3, 
        1.4}, {-0.4999999999999998, 1.9}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999984`, {1.3, 1.4}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9283667621776505, -0.25787965616045855`}, {-0.25787965616045855`, 
        0.07163323782234961}}}, {
       3, 3, {0, 1}, 0.25, 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
        0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.3, 1.4}, {-0.5999999999999999, 
        0.5999999999999999}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {0.8, -0.6000000000000001}, {{
        0.058823529411764705`, 0.23529411764705882`}, {0.23529411764705882`, 
        0.9411764705882353}}}, {
       3, 1, {1, 1}, 0.25, 4.52, {1.3, 1.4}, {2.9, 2.8}, {{0.5663716814159292,
         0.49557522123893805`}, {0.49557522123893805`, 
        0.43362831858407075`}}}, {
       3, 2, {1, 1}, 0.25, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
        0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       3, 1, {1, -1}, 0.25, 4.879999999999999, {1.3, 
        1.4}, {-0.8999999999999998, 1.2}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       3, 2, {1, -1}, 0.25, 7.380000000000001, {1.3, 1.4}, {-1.4, 1.7}, {{
        0.9878048780487805, -0.10975609756097562`}, {-0.10975609756097562`, 
        0.012195121951219514`}}}, {
       3, 1, {0, -1}, 0.25, 7.539999999999999, {1.3, 
        1.4}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7015915119363395, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{0.4756242568370986,
         0.49940546967895355`}, {0.49940546967895355`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.3, 1.4}, {-0.7, -0.7000000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 2, {0, -1}, 0.25, 8.84, {1.3, 1.4}, {-1.5, 0.3999999999999999}, {{
        0.8868778280542985, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570136`}}}, {
       3, 1, {-1, -1}, 0.25, 13.600000000000001`, {1.3, 
        1.4}, {-1.1, -1.4000000000000001`}, {{0.42352941176470593`, 
        0.4941176470588235}, {0.4941176470588235, 0.576470588235294}}}, {
       3, 2, {-1, -1}, 0.25, 13.700000000000001`, {1.3, 
        1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
        0.4868613138686131}, {0.4868613138686131, 
        0.38613138686131376`}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.6790602328891914, 9.230900003615161*^-19], {
       Complex[0.7248589832535917, 0.], 
       Complex[0.650064949116095, -0.020858686170711016`], 
       Complex[0.11988513411713456`, -0.0981715969681187], 
       Complex[0.15160623794564831`, -0.028647866526790612`], 
       Complex[-0.002472802788942547, -0.01713913715451654], 
       Complex[0.05556524411678816, 0.01890267003822048]}}, {
      Complex[0.5524636587025472, -7.594543271602355*^-18], {
       Complex[-0.38354558530686395`, 0.09744499810272776], 
       Complex[0.1619813466218059, -0.23832737428749207`], 
       Complex[0.6766558452199941, 0.], 
       Complex[0.5279467930943094, 0.011722985858567875`], 
       Complex[-0.0019794387381373065`, 0.0612963317654061], 
       Complex[0.14074635807044672`, 0.0077645969691057665`]}}, {
      Complex[0.5222542056555272, 7.39373223091693*^-18], {
       Complex[-0.5047764091042254, 0.08027140607893792], 
       Complex[0.6076266586520926, 0.], 
       Complex[-0.41722429897453955`, -0.26584428115246467`], 
       Complex[-0.11870218623554862`, 0.011771602360776734`], 
       Complex[0.10106066627579662`, 0.15510216234064736`], 
       Complex[0.24672133224192438`, 0.12420825231706026`]}}, {
      Complex[0.47798270089481093`, 1.705186367657685*^-17], {
       Complex[0.11776747404882068`, -0.17021352942962187`], 
       Complex[-0.19349636076477256`, 0.18545691772731276`], 
       Complex[-0.005098087736675982, 0.0481703582836023], 
       Complex[0.12443545522518613`, -0.04846883240430583], 
       Complex[0.7520021001235273, 0.], 
       Complex[0.5450959458974042, 0.050065292585647264`]}}, {
      Complex[0.4208599945029234, 1.7181192359807767`*^-17], {
       Complex[0.046412084869462106`, -0.0633132278362492], 
       Complex[-0.15001494768060744`, 0.1368626263531111], 
       Complex[-0.49457449633790096`, -0.020339968952328036`], 
       Complex[0.7465187765334863, 0.], 
       Complex[-0.3425167147633056, -0.05320301419822421], 
       Complex[0.17190685158210708`, -0.02435844462026826]}}, {
      Complex[0.3371723422003491, 1.2680207595331082`*^-17], {
       Complex[0.08250671501222374, 0.03036710231625256], 
       Complex[-0.10759757386702096`, -0.00917692568070801], 
       Complex[0.15992951319705684`, 0.020880420200147097`], 
       Complex[-0.32856173648033754`, 0.004931060374980048], 
       Complex[-0.5245849484304596, 0.028709761501831688`], 
       Complex[0.7553839007471159, 0.]}}}, $CellContext`dynPlot$$ = Show[{
      Table[
       ListPlot[
        Part[$CellContext`points$1857, $CellContext`k][$CellContext`nu$1857 \
#], PlotRange -> {{(-$CellContext`glConstWindowHalfWidth$$)/
           2, $CellContext`glConstWindowHalfWidth$$}, \
{(-$CellContext`glConstWindowHalfWidth$$)/
           2, $CellContext`glConstWindowHalfWidth$$}}, 
        ImageSize -> $CellContext`glConstPrimaryDisplaySize$$, PlotStyle -> 
        Directive[
          PointSize[
           
           Sqrt[(Part[$CellContext`mScalarArray$1857, \
$CellContext`k]/$CellContext`glConstMMax$$)/350]], 
          $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$1857}], 
      Graphics[{$CellContext`lines$1857}]}]& , $CellContext`dynTab$$ = 
    1, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJx9nXV0FefTx4OV4u7u7g6BiwYP7hTXUtyluFMIFHcp7pKigYsVpyQk5MZv
bkiQBoJLCPL2/JjvLvsd+vJPz5lz+2R3nnlGPrs7U6DP8Lb9E7u5uf2dys0t
yb//bZtn6/HrB5Kd91wT+v7jkAR7jXPz54adjrFZ5bH2ljXG7N739L4hd5N/
S09EHfvjpSlv8fX3tsq9ar89f4DXSbDdaHaz8LYMD0T+xo6/e8We5e2jx9Ek
j7UvPNaud8u/zd/j73rUfv/Lju0PDTn+bs1NEUenlInh9W2Z3x/d5Lk52ob/
H3/38qGLE28mf0DyWPuyZuOvJitq/h7/npVZ/Tb9ivuGHH/Xi36Pv4v123+9
Hhv+bia5Hqs81o7rhxzrtZT7hRx/d4noh9a3/WXRZ7K6+LtW/UMea69m3a+6
/7G/dfF321jtAevbvm8/CfbHfZs3vHbApeyqbd7tU8udjlR2lWqCx+XEdyOV
Xc1tuLjH6fu8ToLtmbPOH3tfuZRdBb5MHX+nE8tj7T5p/tpdsVqUsqsaJ6O2
ZRkbpezq2Nso/yUhan1bu5FZGmUZ4lJ2VaRtu4S4xyyPtc+ZXCrv1bBIZVen
3w09X2V8pLIr/j3+LtZnu2ol18N25S3Xz3blLvfLdmUX/bBdWfVp2pVV/6Zd
TbPul2FXtL+GXbWz2oNhV9+3nwT72B2HRnsej1R2lW7i7o+b6jqVXW2ZMv2O
83W4sqt+qTbHnIyNUHZVatyIUYtLOJVduVKlPrGwVKSyqzYl816cUiVS2VW3
WgtLRJeNVHa1eXFUzZi8vE6C7Vj21HHFr6t9t0elHTix8iqnsqtqmfYtLfcq
XNnV3seJsnxoH67sqhL9Hn8X67Ndecv1sF3h+tmuusv9sl21E/2wXUVZ9Gna
lVX/pl31t+6XYVe0v4Zdpbfag2FX37efBLtjYI4LDVezPcTaG/pvH1S6S5Cy
qyd9ty3u0sGh7Gp62cXjqhUIV3b146+D/3n8LFzZVf3HtuqfirA81l4m8diB
zWLClV3d73zjbui8cGVXqRtm+CXJ6jBlVzGfM/RqtSZM2dWA59n2P/Zle4i1
17f3mbLmbpCyq7b1l9jGeAcqu+Lf4+9ifbarR3I9bFdp5PrZrnC/bFeVRD9s
V40t+jTtyqp/065mWPfLsCvaX8OuyB4Mu/q+/STYmw8tcrHHsxBlV+nHxs3M
fPKesquMA/Olnh19T9mVbfy2t3UbOJRdXdt4vmuOew5lV1vGLBt+LzRY2VX3
0L+LF+ofpOwq19hdC897OpRd9Vn2+eCvEwOVXS2qeLHE+efByq42Dcnz++Lu
DmVXXUvb7+U+p+2nC8mxPtZh+1kof5ftp69cJ9tPTrkvth/oge1nq0Vvpv1Y
9WzaTz3rvhj2Q/to2E8G674b9vN9O0mwFx1xomWtFfeU/ZzoWnbfA7u/sp8l
FysfqNjimrKf8fHJ5vsG3lb2U6Tq6xtjz95V9vNlfIVuxx8GKPuJ8O0+scYX
f2U/Lz0apUu+3F/Zz9S9v2yrstJf2U+qpL//fKDnPWU/OXfN7XszZYCyn3E/
XO+WqtpVZT8jSI71sQ7bzw/yd9l+Zsh1sv3gvth+nKIHtp9EE77Vm2k/Vj2b
9jPOui+G/dA+GvbjY913w35gJ7vjb01L/z7x+UZFznf59fM7++LJtc6e/BJj
+3zvfZNO9d3O1zq6/fSnpa/trupxr1Y0fGDb3a9pYfccCfaKtgW5phZ6Ya/y
dkvJkQuM+sLemuoyrN/8f/Kb9iVv6+RbsifaWP/rdYbaF1dZv3BCrxhj/Rr/
+7vR9kVj3r3pk81cv8V/rA/9hGXbnzVgh7k+5EPe3p/98Sdzfcg/BOR6VTir
uT7Xldu//t7Yrz7TKoYUyRtj+/h1fUOfX+q0OtenbYxt59frMeQbPg/Ztnlu
jHGd2K9P2YsXLOw0rxPyIZOGLt1+07xOyINCj34ufNK8TshR5zb5n/yecZ2X
RzuC2p6PsbX8nzzGlFd7Ui1kQowt4X9/97lZDya4re5dIcbW+j/qRLfA//3e
Xk72fe2o4Q/3b3hg6/R1fdmv1/ZdFRYNTT3kga371+uxNxC7Ov5856shNVBH
X/ZpQfW1dR8T7NCbdR//9TOiZ+s+Jtj7yr60J790ha4f+9tibdikWoXN64c8
7bT+K0pMijGuH3LffnEHsvlGG9fPHADX3/SrndtqHtn6qks9c3+bfbVzW8ze
XpXSL402rr/aVzu3eW3PN/pKhFHv25vJ+UW9j/Vxro8f6h9zaHEMnaNYW7Uv
iwM2DTX1A/kpz+OXFreM4XNkrA/91JNzutZtzaxPl039NJFz+uRStXUdYkz9
VJdzapvnOHwgWYyhn+akH6wPux0Z37PV9C3m+pCv//NqhW4bzPUh/2tkucxV
15j6h/y58Bbop+FXe7PtzNf62pogUz81v9qnbebrgCFem039VPhqz7Ye17uk
mzuA7UfrH+ciT9VGDdL8qezTNryAvfeEzso+bRdT15h+PyGa7dPgTji/OF8v
qnh86tQw2ji/1eV8tS2QpdLePtHG+a0v5+to6uhBH6dHG+e3udg/OJLV/hPs
OO9W+/9XLv7Bav//nlPxJ1b7N8+v1f/E2ifnazPz/sBo8j//1mWvS9a+sCea
/E+svdX1pO83xUaT/zF5F67fXc5LsYu3LhW4Gm1cf1s5X5kfnA640ivauP7O
ch4Tp9wTM+TDfbKf0+4Gr5P1cS5wPVjf4ABy/Vgf8klyv1b/ZnI/6KeOnJe6
cl6gn45yvp7J+YJ+est53CTnEfqRU+HTgvw/zsUVOS9YH/KNcr6wPuRj5Txa
1/83b5L1oZ+ycl42bFvdL30/037EPm1fdrbOun2daT9in7be+1Jcq+YXw/7f
4J9knza3B+PuDY2PZvu0PfGvmXpxO2WftqALn+vvP6Ds01gfcVyu347zjjiO
8wX/gDiO8wV/QnHWjr9LcdaO66Q4a8d9UZw1zqk134i1w29b841Ye3Xx89Z8
4988X+ICrrO2nJc637c329Pv25tt4/ftzZ3tDXb+t8RHrA854inWh9xT4i/W
Z14NPdQQ+/9xbtNWT4o+NPTQUM7Lxb/XVai054Ghh6pyvn7N9iTTpFLmOrDn
CMmjsA7kwyXvwjqQu+X4mqfhfj3EnpHP4H7dxf73SP6D+5U82bZe8iXcb5v/
uF/Yw3mJF5Rn2odJfKE8055b4hHWqYO8QvJnrIN9Xyr5NtbpJfu+VPJzrIN9
+SJ5MtYx6inJq7EO5C7Jw7FOGdFDDakXsE410Vu01BdYp57o2UvqEa5Tevw9
OLygr0vVKf7V54/79aVL1SmN/9iZLihzlKpTwPm5ThmfZ8BZz1IuVafcvzjn
+LrZLlWntBq049CDcJeqU3h9nNPSXUs3HZHDpeqU5Ku8Mx2Z4FJ1isvPPeKF
w6XqFKzPdUour7BUnkNdqk7pVWp/3lszXapO2X51coVma1yqTsk6/+nkqzVd
qk4puGZFpd/+cKk6pczuWrGtU0epOgXPTbhOaXP6Qs2Bf7lUnfJrwfKTnFtc
qk7Zu3DTqU5TXKpOwXMHrlMCNw066yoUpeqU5+VS312aPkrVKakuHHpg++RS
dQqep3CdAr1xndJT9Mx1CvaF6xS+fuxv2T15r6yOdKk6ZUvDCfc/LnCpOiVT
pJ9bn0ouVafgORHXKX+uLnOtSGaXqlN6nsh8q0lHl6pTUjgS7gxZ41J1Cp5/
cZ2S4UjU5OEuPkextg15qq8t7HSpOqX4wsXHg8PUOTLW5zol9WPvRInTRak6
xZljXq+43S5Vpxxt1sUeUt+l6hTjORrVKTnmN9q78Y1L1SnxnXYfKTLOpeqU
kGKpTh14G6nqFDy/4zplS8zAQ32fulSd0iZ26ZncD12qTkn84tTVe5HKDyj9
41w0me3dfI6fsk/b1uIlX/c8pOzT9uHW5g01Fyv7NJ5jcp3y7n3Mrq5uLlWn
/DxuS4W4Qi5Vp4S96npmRmOXqlPwXJLrFJx3rlOmin/gOgX+hPJA4/xyndKm
69pUNXKz/4m156mRPH5vN/Y/sfZH2cY+yL2e/Y/5/JTrlDfHk3mdnOFSdUq1
8cWbRRV3qTplYrXmyVL7sv2cdjee/1KdguvhOiW3XD/XKbhfq38znyNznXJM
zgvXKS45X1ynpJXzyHWKO/l/Pi9cpyTI+eI6JZecR65TsD7XKV5p7OEDIlyq
Tvml8PqHdaJcqk5pUmv8i6wPlP83nqdznTLv8fajNxcq+7T59K6cf+ZeZZ+2
58GXFle/oezTWJ/rlCRy3rlOaSv+gesU+BOuU/B3uU45LdfJdcocuS+uU3BO
uU4pJn6b65R14ue5TkktcYHrlP+wN9t/2JvtP+zNne0Ndo74yHXKNomnXKeU
l/jLdYqd8i7UKS273fY71zpK1Sk9Pp9wG1Q6StUpw7duK5fhxyhVp5SXPIrr
lMKSd3Gdkl3yNK5TkM9wnfJS8h+uU4IkX+I6he8X9vBO4gXXKZslvnCd0lji
EdcpbSV/5jolRvJtrlMmSH7OdUq05Mlcp6SQvJrrlLKSh3Od0kzqBa5TAqS+
4Dqlp9QjXKfs92iePOeqSFWn3H/4YF3M2EhVp+RcMLPskQ6Rqk7BeyNcp2wZ
dch9wO8Rqk7ZOihiz5NyTlWnbO2RJtvo205Vp/D6OKevhy/eVGWRU9UpwQNG
1b11z6nqFOfBUiMrpI9UdQrW5zql8cvKO2t5Rqo6ZX/QTyufjIhUdUp6+9zZ
G5dHqjqlyOT+z3N4Rag6Zd/EZhnal3CqOqX8hHIVl1xyqjoF7+FwnZKzzfLj
v1xxqjql3XL7q+1vnapOufLP2DXDMkWqOgXvsajnKTMu5Y/OGanqFFfQoGnN
3SJVndK2V26f/jedqk7B+zlcp0BvXKfsEz1zneIh+8J1iouuH/vbJGnn5Mn/
tSuuU54eG70w8792yHXK73290hRcFqHqFLynxHVK4+0ZJuacF6HqlGc3txXs
kMOp6pRVryrd8trnVHUK3kfiOqWr1+6mtes6VZ3SJtPRAxdWOFWd0nj1mQwe
j9U5MtbnOsWRZ1LBgpecqk55d9n5YnJxp6pTsv3S6MK9xRGqTjHe46I6ZbS/
16UV652qTilfPlXl3sERqk55+tvc7WWyRag6Be+DcZ0yYnOjYxuGOVWd8ue1
nK/3HXOqOiX+xbPKZ947VZ3C+jfqjn4hv527xH4mwRZdYpv/u7LKPm3NCzh6
pZ+i7NN4L47rlEtd5xZ6HxKh6pRW23ofP3/RqeqUuDGbtjfsEKnqFLznpp6n
yHnnOqWt+AeuU+BPKA80zi/XKdVXvmgaOCdC1Sk1s1VP8mt29j+xdve1U30K
/Wv/XKewfaJOCfZc8dOqWU5Vp4yZ2bdRn+sRqk5Jd7ximbLp2H5OuxvvE1Kd
guvhOqWGXD/XKVXlfq3+zXwvkesUnBeuU3C+uE7BeeQ6pTv5fz4vXKfgfHGd
MkbOI9cpWJ/rlMy3Ok5+mSJS1SkZsqwa/+WxU9UpH5ZNfZ/jvPL/xvuZXKf0
ff1nvR0LlH3aMvr2XFmgWaSqUy7uS/F4Y8pIVadgfa5TcN65TvEW/8B1CvwJ
1yn4u1ynZJLr5DoF98V1Cs4p1ylNxG9zndJW/DzXKd0lLnCdkvn79mZ78317
swV+397c2d6M54YSH7lOeSLxlOuUphJ/uU5pR3kX6pSXi0NrbXOLVHVKugtd
Npzf7lR1Ss0BH8+7N3GqOqWi5FFcp+yXvIvrlKKSp3Gd0k7yGa5ToiT/4Tpl
neRLXKfw/cIeWkq84DolRuIL1ykJEo+4Ttkh+TPXKdsl3+Y6ZZvk51ynREqe
zHVKqOTVXKe8lTyc65RcUi+o5ylSX3CdgnqE65ShnodLXvk5QtUpias0XtG4
ToSqU9bkivh0LUOEqlPwHjLXKVNSZbvcIT5I1Smpjy360GZjiKpTNnR1q+BZ
L0zVKaVpfZzTzxGdH1XyCVZ1ysl/Ug+qlS9U1Smj3p5/WH9mmKpTsD7XKbFN
xuVsNTNc1Sleu/d/3BIRruqUSj/ej3hZM0LVKSV7P8n7wRWk6pRBPaoeXjcs
RNUpO7pNr1crIVTVKVHynjPXKZviCniV3Rmu6pTAJ6VGjZ4cruqUdLFVOpxs
Ha7qFLwXzXXKmbMbq1eMDFd1StOJV1LkDA1XdUpQ5WchiQLDVZ2C9725Tqko
euM6ZbHomeuUR7IvXKfUp+vH/o4eefjJxi1hqk45GRk78kW3UFWnfGpV7F3D
bCGqTmkg77FznfI6V51kl3cEqTrlo3/wlLJvg1WdkvS3sa/XeISqOgXv53Od
cr9S3Oi9n8NUneJRo9XIPGFhqk7ZU+fwsKWn1Dky1uc6ZfKo8p8Wdg1TdUqm
31YVq1kmVNUp+3Z8bPP4S7CqU6AfrlPqtkt4msg/VNUpG1qWTlE8b4iqU941
/qmw5+AgVae0k+8LuE65Psy/2eG14apOWdir9r5xDcJVndK87a5UtZ8qP6D0
j3MxbaN/4yTrwlWd8vZs7R25Gyr7tA2L2JW4ahyvb35nwXVKKS/PKj9cDlZ1
SuaeNeNG/xmi6pTPZYvucu0MVXXKQ3zHQXVKKjnvXKcEiH/gOmWj+BPKA43z
y3XKmF6e1Y9dClZ1yq5ENV/f9g5RdUrItiKHH+0IVXUK2yfqlE2znm/pmTdU
1SnlL925d2ZHsKpTLiQ+lDJ7Gbaf0+6wH65TcD1cp+D6uU4ZK/dr9W/mdy5c
p+yV88J1SkY5X1ynTJLzyHUK+3+cizdyXrhOWSvni+uU2nIeuU7B+lynFHyW
8eOUmDBVp9RYl/m3t5XCVZ3SqlHW3CNmKv9vfO/DdUqjyZlejX3A/jnBtuNd
5rkbKiv7tCUbkzXHpZnKPo31uU5pIeed65RF4h+4ToE/4TolufxdrlN2yXVy
ndJE7ovrFHzfxHXKXvHbXKc0Fj/PdUq0xAWuU/7D3mz/YW+2/7A3d7Y32Pln
iY9cp5yWeMp1yjiJv1ynVKS8C3VK87RnzlQcFq7qlKOX9m1f0D5c1Sk5J25Y
HFkzXNUpOyWP4joFeRfXKaUkT+M6JVjyGa5TWkj+w3WKXfIlrlMqfT/PtI+Q
eMF1ynuJL1ynTJd4xHXKNsmfuU5JL/k21ynTJD/nOmWC5Mlcp/hIXs11ipvz
ax7OdcoGqRe4Tkkm9QXXKcOkHuE65c61O6F3WoSoOqVd4Ulv6u4NVnVK0LTC
6Y4mD1Z1Cr7n4jqlcMPm/vtmB6o6pVqB8ev8CztUndL087beCZcdqk7h9XFO
/1gyoHTnvoGqTqm6O+Le+rQOVadcv9BxmvOUQ9UpWJ/rlJujql4+kT9E1Slv
R4RmX9c/RNUp+YdPHzplb4iqU1b8fKFUJlugqlOyDuvbfNvaQFWnrBmZbEiF
14GqTsF3glynRAydtKDnR4eqU/KNcEyvsCFI1Sm9RlWekMQ9WNUp+P6O65Sh
0wpe+lQwSNUpvxYa91NQpEPVKUuuXn93dJND1Sn4rpDrFOiN65Q3omeuU7Av
XKdsoevH/m54lnJF7wSHqlNCkzT+snmZQ9UpubLP+jmimEPVKfiOkuuUnRUc
Yy6mCFR1Ss2PS8LdygWqOuXvKx4etvaBqk7B955cp1z79VRh3/QO/Txltm/b
nhGBqk4JWfhwety+QFWnYH2uU2L7DN24uqRD1SlnWlc6POwHh6pTFtWJv9go
KlDVKcZ3prK+TfTD63uIfk7T+hJ3bAtp/aZy/V1I/6hTDuX0HV5xqkPVKStX
O2c3L+ZQdcqUzM/W9vMNVHUK6x/nIj7xjLRJugepOqXkoHoXn0QFqTql6+1E
4wIHB6s6Bd/tcp3y4Kl9718LHapOGXXo/LRhnYJ0nTLiQvtshYNVnbIA3wVT
nYLzznUK/APXKU7xJ1yn4PxynbIhWbrUb/YHqjolIqJH/dvrA1WdUuDkwQk7
FgaqOqUv2SfsNr/8nusIrM91xHq5Hq4jupB9Ig9/0fjKrnpHA1UePv3z4i3J
YgNVHp7uzw5rrxdS/s3G+kGdAnvmOgX2z3XKP3JeuE7B99Sc5/u6Bc861lzt
ry3LnWfhO3eq/bV13fhD9XWJglSej+vnPB/nhfN8nC/O8w/KeeQ8v4v8Xc7z
M8t1cp5/R+6L8/yFdI6Qny/4vp5tp76vZ9vj7+vZHXrmOgJ+VT3vED/MdcR1
8duch2+vsnNHZHOHysPLvt1+3q2pQ+XhJ4//EZrfw6HqhZwSp7heQFzjemG9
xEGuF5D/cH6+WOI45+eI+5yf/yJ5AufnnF9xnsN1BPIiriOQR3GeD3/LeX4J
8c+c58Ofc57fTPJPzvOrS77KeX4RyW85z78heSbn+dUkL+U8f7vksZznOyTf
5jwf+Tnn+cjnOc9vf21L0Iey91SePzP/wr6nrweoPP/whNFxE/sFqDwf/Qc4
z+/yYeW5i9VvqTw/49qEgXsy+qo8/33l/SNe/HhX5fnhtD7OUb33p3qcueOv
8vybKxtlXOr0V3l++0p+f/V75q/yfFw/5/kp395d7ch4T+X5mcaMCXhf+57K
83O/zJIh5+B7Ks/vW2Xhgj2Jb6k8v/puZ//8p+6oPH/e4pxbb57wU3n+C+l7
wHl++24jC/xQP0Dl+UvSdXfWnRig8vyrlzw2Tj4coPJ89ElQeb7Hw1d5Egeo
PP/jmZHDEicLUHn+ogofHz1IHqDyfPR/4DwfeuM8P6PomfP8FLIvnOejPwbn
+ePOTp3b4oGfyvNzta9XzL7ujsrzm5WZUy9m0E2V50+Qvhac55d4mMf/fJJb
Ks+/nCp5vOeZOyrPL599gtewU34qz/9V+l1wnl960Mb1oVl8VZ6/0b/aK8+6
firPT2O72+ziz+ocGX0/OM9PlvXp8aIr/VSeX+5GibO/lb2j8vx2gyamvlXx
psrzoR/O85PS+sjzS9H6yPM9aX3k+aNI/8jza7W7e77/q7v6+44Rh493KOGv
8vyBi5fsb9RT+QFDP5znb9oTejTJAPYzCbbseS6tW5Y2QOX5y5bunZnvRIDK
89FfhfP84Cv5aubLcUvl+Zsb1Ppt7a++Ks+/+8eAyX/E3VV5flL0b6E8/4qc
d87zF4t/4Dwf/oTzfJxfzvOz5UzT8X6lmyrPP12mTesz5e+oPP/glmY7rq/y
U3n+dLJP2O0B+T3n+Sdkfc7zM8v1cJ4/iuwTef6OEscyrj/qr/L8W7vjZ7r5
+qs8/1Wxuq/6P/VXeT7rB3l+K7FnzvNLiv1znp9Ezgvn+c/F/3Oef6f0nUdj
Ut5Tef7yDqkHuv+p9tfWaWrTmCS91P4a1895/s9yXjjPbyfni/N8dzmPnOd3
kL/Lef5SuU7O82/KfXGe/wOdI+T5zb+vZ1vx7+vZlvj7enaHnjnPTy9+lfP8
zeKHOc8vI36b8/z+3mO65xt8V+X5jgLb91Sz+ak8v6mX/9tW/67DeX49iVOc
52eWuMZ5/hiJg5znI7/iPB9xnPN8xH3O84dJnsB5vpPyK+QzCyTP4TzfXfIi
zvMHSB7Fef4S8bec52cV/8x5Pvw55/kfJP/kPD+z5Kuc53eX/Jbz/I6SZ3Ke
f1vyUs7zG0key3k+8m3O85Gfc56PfB79xBqCC21I0mppY7MfrMRH+6XJU7M1
DDD6054vL+d9ftd457te0dyvTPUfRj4QEdRq3+M4U95U7Hn4hFIHiz035Q3F
/t2yJz/S/wX3MfZ25z7GeL58qvfEpEN6m9fTTvYlKlX6DhV9TTn8QKrjO3fE
1zHvV+oU1Q8ZdhsSElnv1BVTDjuf1mH24iNOU45zUcS3WPCe92Z/Y+j5hHtM
+sR9TTn0vPuUd6lcYaYcel5bdbZH5Q4PbG3+Xz3oflyQQ//x99z73U9i9mGG
/ge9LzJwYg1TDv07cqb7Od3wh7a9//t3GvHR6CNk7SPn7c59nrEvs+6NrBP6
gynHvpwfGpsuw2DzOrEvn5L1d3ncjLHtlfwK+kTfD/we+8V9pLFfh739y7xI
YcqxX8VuXtvd/4F5/Vh/o+tsoZCLZl9o7Nf4wHJpunqZz++xXyU/bdjyKOs3
7x/LfoUXSll5/KZoWyKJv7gv9MnB71mfRr0n+zWogW35/ESmHPtV1z15z1Th
Zl9r7Fe2KndKLjlpyrEv3Acb+8K/x77YaH1c/0C5nlb/oX/8HnLus419CRP9
GH5c9qUE6RP7Av1Lvl0X+wJ7QB8/yLGPkGO/sO+QY7+OiJ1Qn0DV3xv78kXs
E3Lsy2WxZ+N6ZF8WiP3L+YU/N/p475L7wvrol2LtZ+jtzn3FsY/hck4hxz4O
lXMNuXG+xA9Ajv3i/uTYrw3ifyDHfu0VfwU59svq35IZ+2X1h8nqYl+mW/1n
XexLqNXfKr1BDr2lsfrzutiX+1b/Xxf7QvGi7n/El7rQM8WjutDzCGv8qgs9
R0q86/QfesbvIec+7dD/ImucrQv9/2WNy3Wh/y8Ux6H/Wb+7MkaNMPtyQ/95
Lox3JVQy5dD/iWdpDmd5p/q6qz7w0P9579StC5835dB/2eZjC+S4Ysqh/42u
8JdpbnE/eW937icP/ZcsFbR3RFbzOqH/phGDl0V0NeXQ/6BlCeNbbDbl0DP3
pYeee+07Nfz4Q1MOPdfM+GD60VhTDj1nmZjx94PPzD7z0PPS+A/bd3uZcui5
qdvj1jOumnLoOUlyx8cuX1wqvlv1oPvYcHzvNqHFwH0ephz6/xDlX6RwR1MO
/a9r2S16Q/8oFd/Rf4DjO/fbx744rhZ8NtrTlGNfxjn61LpbzJQb32s83Dav
fKIoFd/xvTzHd+7nj/3qtrLciMPnTDn2K0nlKanvbjPlWH/f3Wu7X811qfj+
a/cUSXfsdKn4fm+APXW3vi4V38uMHJslQ36Xiu/oL8HxnecCYL9+z+lzpc+l
SBXfN59qMfzznkgV3/d3Ds+2binPI/B253kE2JcD9HvsyxZaH9e/XK6H47vR
74XiO98X9gX64fjO+sS+QP8c32EPHN93yz5yfE8k+87xHXbC8Z3nLGBfsop9
cnyfIPbM8T1E7J/jO+YpcHxHnwGO7zzfAfu4Uc4px/fPcq45vvcQP8DxnedE
YL+Sif/h+N5c/BXHd6t/M+N7Jos/NON7Nav/NOJ7N6u/VXrj+N7H6s+N+N7I
6v+N+F7cGi+M+M7zLAw9W+OREd/LWeOXEd8vSLzj+G63+GczvvO8DOj/lDXO
GvE9rzUuG/F9NsVx6L/mzc7H/x5hxk3o//PzRPGe5rwGI77PKdNx/Kab5twN
6J/ncUD/ryb2qHDoqdknH/p3TMo8wL7OlEP/ZybfWHensSmH/nmuB/TfJv+P
WVZVNH8P/Se+7NW1xQhTbvQnGZhtS+KDphx65vkg0HPWAf4/lk0w5dDztfPJ
S/+R0rxf6HlSLvdW2XOa80SMeLHct0byb+aDQM85cq30mVXelEPPf27rYnOr
FKniu1UPuv8Dx/flZePXB1Yy5dB/YMWAseUrmnLoP3u1Q60W/ns9HN/x3TrH
d557gn150ipyaHRJU459+bVf1aPRRU059iXtxN/eRheMVPEd35lyfOe5Ktiv
fs/3FxvX1JQbdWK78ZmTjzHlWD/uz3qJ1myKVPH9XbrqttFlnCq+p86QItnR
yxEqvhfIGHLjebcIFd/xXTbHd57ngv0KuHa+wrab4Sq+j5waeDfz9nAV39NU
fjJ63hSeC+PtznNhsC+p6ffYl2G0Pq7fT66H47vxHTrFd547g33JJ/rh+J6K
9Il9gf45vsMeOL4/k33k+F5S9p3jO+yE4zvPu8G+wD45vsOeOb4/Ffvn+I65
Nhzf8X0ux3ees4N9zCnnlON7kJxrju+rxA9wfOd5PdivE+J/OL7nEn/F8X2q
xb+Z8X2ixR+a8Z38pxHfyd8qvXF897b6cyO+J7H6fyO+U7ww4jvPFYKefazx
yIjvQdb4ZcT31xLvOL63s/hnM77z3CLof541zhrx/Ys1LhvxneM49H+0/se9
55KbcRP6X5zHuaL6hFAV3we9vzD16CNjHooR33kuEvQ/rFr0kWrZTTn0v2Z9
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
veH394VjQI7fvxBus5O40xLhJ9b+5zftawondQ2paeof+9JuaIdLR32+Ob/y
+xKXzo2K/cZ+YP8RUj9CDrsdJnwActjtF+EJ24nX4f1Da39yb/fhUs9CjvXd
On/lGJDz+4rWfube7m45vtbLO4nv4X1FrIPrcVv1lcPg91jfrdNXngO58d2B
8B/cF+zhi3AbrA/5COE/kMNO9gqPwvr4vUu4E+SGnQvvghx20kH4GPPGJjUv
hnjcdine2Pdm/2dvTrkUbzxzL9f7feNcijda+z2avNHan9DkjehnyLwxR8V1
N7afdineGLDyxomiO1yKNy7ZcLLvlzCX4o3op8e8sam1/57qF8q8Ee+XMm98
//HLPvflLsUbfy+1alLHji7FG/E+KvPGoQPzNlr9p0vxRrynyryxdNfSTUfk
cCneuO75ipz987kUb0wx71NslyIuxRuTr/LOdGSCS/HGsaXzxOyY6lK80eXn
HvHC4VK8Ee/NMm/Ee7PMG2eVSTM20wqX4o14n5Z5Y9zd0sN6PnUp3riktnfp
oI8uxRu7Wfs0qn6tzBvRr5V54yVHu5W3bC7FG6t0SJuvV1+X4o1exy/MrDPN
pXgj+moyb0RfTeaN6KvJvLHvst/6l/d2Kd6Ye82kDCmeuBRvxHvIzBurlchb
9GSQS/FGvJ/MvBHvJzNvzDr/6eSrNV2KNxZcs6LSb3+4FG88vytg2j9TXIo3
ltldK7Z16ijFG2+dmFztUIxL8cafr56ZlcbuUryxhrXPp+qjy7xxnLXvqOqj
y7wR72MzbwxoZj+4vLNL8cZXn1qvTLTRpXgj3t9m3jj1551Hj69zKd6I97qZ
N+I9ZOaN1fanmjT/okvxRmezzln37nQp3oj3lpk3Zr70cFavKy7FG/E+M/PG
snvyXlkd6VK88XamnbPTP3cp3vjL1DINFnxxKd6I99WZN25pOOH+xwUuxRvr
Hvqydexal+KNeL+deWOmSD+3PpVcijfivXHmjRmORE0e7nIp3hibLd3iITEu
xRuvTK21aeBjl+KNG/JUX1vY6VK8cfzsfnvz33cp3lh84eLjwWEuxRufnMyW
YqGXS/FG++PHA8eVcCneeGv+pPQZ07sUb7T2STZ5o7VPsskb0SeZeSP6CTNv
xHcEzBvjF4R3qnPTpXgjvi9g3rjX64d+7y67FG9sW7adW449LsUbj1n7D6u+
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
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlElsjWEUhr/bq/9nuFq05kRMCwmRiMSCSCxIRCLEQgyxIRGJUIlgIxFT
JPY1L+zU1FZRNdTVa6remlpCqCJmNURQSUl5XucsTs/T9z/3G8453xm1vGzB
2oIQwg4sjZ3BInYCqyoMoRL/LAnhPVYHV6PVpi22gT8d6OfhU+if4QtwDfwV
X4x9x76gf1I8+g1+cxX+g/Yd+wJfRf8Gf4Zz8DmsCS6IFp+BH+BPozfonOhn
4BzcAz4L34J7R9O0fgLX+joZ+ALcAg+HL8HP4dFwhZ8zkzLri433mL7oj9n3
Gr4ndgW7iP4MPzZabBE2AW4Ptua4aOfPa114EvYarkebCr/TOvB17Cc8D+0a
/AOeC3fji7Cn7NuEHll/JfpNOMCLfF+ddXU0r/O/IH4n/w/l/254WrSct8GT
4TfwZeUJS4hZodzCf9EXRruH1l0D78KGwff4Pj1aXVS7GdHqpRrNjFZj1U53
V05GorWyXy+4CV/Ht3vwEPTz8H14GLwbG87699GmwG/Rs/BtrBR9i3JIP+xB
P4K2weNb4GasBN7seVMOS+CX7DdQ/Yb/gA2CO9N2X+VwIzF34YHwVo/vJGZ+
tH2lb4/WZxmvV6X3fw1nGcT3kmB7n0Q/qZ5P7F7qq9bE3kuV3lBi59RdtrHm
HXgwepfXtCf6JvQ5fnf1w3rPuXLSiKXgxdF4ADEdaesN1WuJ1079sNR7Q/HL
vL/+x+v99KAfguVtlveheuBj2s6wCm2290bWe1I5KUWr5w7lnv8cvBc+Cu/z
+XBY66esV3WucjtOqPZvijmk9xKsH7LYMX6/H3+L9R4Hy7P6Q71XjE30d9qK
9jCx/lHPtMCP8H2C5TdfaPFlxDd7v6nPs75X3vfWGXLox4k/oJ5knRPwQbg5
sRhxI9wrZXnT2/iatlrrHf3G9w/2PrWvdH2/4v1ZUWg93waPYcM83KhzwF34
fsHu88LnpObnOn+nel+1PrtSeiOe5wrvPfVYW2Jrqtz1+EuJ1UC10CzSviOi
3Ut3vJnYfZXn64nNSc3MLrjdZ7jm9rvEaqNZ/crntma4eluz/0li9dKcP5u2
Gat7/U1sDmsW/oL/AcD2508=
            "]], 
           Polygon[CompressedData["
1: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
f4B3bmU=
            "]], 
           Polygon[CompressedData["
1:eJwtlVdsjmEUx5/P1/d9tQhJa4cQJK4kCIkVEiOIFYk9LirElRGUhBA73Ft1
wZ1dqkPp/Lq/juhEqb1nUZRq1O/knItf+v/+5zzP+4zznA5N3Lx4Uxfn3FLw
IBw4F+FvOj9i0B7cQGfhPfGdewrPIApn8K4Qq0BXwhpyQyHnyvE+hp37BJfQ
p8i7TTwbcqALeXl4+VAJt8jJw8+FC+iTeAXoWeTNlFy813iz0XX4tTIfXj26
wde/dXh38BrR9+AhNEEzXCN2jViq6RT0TXQaHGDOvqy5D8RDFbHBeINgCDwm
PxsvCR1HPBZ8iOLtwdsN+yDBxmaw53QosfO57OmeTqBvQKrsl9g6xiTCBghs
vmHoZvvecPQI2/srvNHoMTAWtsIWqCE2gLHbAt1PCnnX8dLRGbAUfwksB0de
qaf3cZqf5+EcFJK3k3hX4h9Ydxv8hnw7c/neOBgPjfgNkGtrkrtpY/wvaPe1
btKIjcLvyXyV6Bbyv4b17DOkruCq3UeS7b3C0zXsgmpyq6BZ6oe8L4wbif8U
nUPeA/wmm1Pm/gf9Q3oeF6125HyzfK257YGeTy2xgeTtQA+A/jAw0LqRWpK6
L0EXS+3ZPiT+B90O9VZfEU/XNYnYZJgCFawhGta6kfurR3cX32q7J7oX+FCE
V2rnKOcZj/cTr4S8BHRveM+63/n67m4T++hr3TehH0ANZBErhM9O1zAVpkE/
qWfbY63lyby/0M/5Xiv8kDuEHOhk3nJ5h+gicr84nWc6zIACvDdO738CTLR6
3wv7Zb2cabWn5yu1eBTvGByHT76uPZXYHeb4jJ6PPw8W2r6LPa3PZbDC+kcZ
3ndyv/m6R1lTq6/raxEN382bE2hfyLd1zrU1v5Vzgw/mSR94BI/tnUgPkLe3
HjZa/UsdrrK3ImuQfrYWVkKn0/cj8dVQxjylcnZwVmra+mCy6Sp0ta99oNjX
/GTrlxFf+9tF643yBuU8FsAiuyupB7mbfxDCi+JlePrmpd4P4x0J9LylhjqI
/4UfdqapVjvSq1/AS7iJl219N8/uo87ehdxXKIbeHKPfc4H2aanhTE/Hyh3K
PG/gLRy0+79L7C/10wGxgdaTrDUO3S3QHptgdSJjDgUai9rc8lZ6QIuv7z1i
df3N7use+r70Nutvt/hOJkTC+n9J3sp/WeALsQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlFlszVEQh8/lf52LSEiUpKnutGi06aIPgqpQrVjah1Jbg/JiS2wPlgdi
DYrUklSFIp6IF0EkHkiERDyIKlWt0qp9q5aqEt9k5mFyvjv/OefOmfnNSVi2
rmRtH+fcLqwv9i3s3LaQc5+9c53wWHyTA+fq4Ri4P5zO91S4inU3tgfLjjh3
lD0j4MfElvP7LFwSaNwxLBzR9TjWL6Ln74Oz4DhsFfwBXxx7Yjl/COvakOaw
3vadwCLE/rC9ufBN/jcPfoHvD1YDL8T/Ez4MF8OTAuV8+C3+5XA3+4osz158
HdheOAffCtaVWB84CtsAZ3DGS2IK4EfsnYW/Fv6LrwurhOfi64EzyHk28b8t
n8X4u+FquNT4FLwIHoSttrtPlPqyt4g10fwf8SfDa+BPcAs2A64jh1vYFLgJ
XxUcK374BBwHP4GfYQlwrdd85H/LOO8GvyfDUYHWU+6eib8CO2f3uk1MPtwc
1t5JL6dZbeW+eXADnAVfJXaO7f2Hb6nVR2r7HMuGr3mtf4XEwE/hePgMPNA0
8D6sukqhDumiBfyb+f0VfzS8Cf4Cv8bmwo3sfQXPgRu89lE0mUHsYKub1PC7
aXs0vuHYRtE5vqER1ZnUNkXqzv/GBqoBybOHM9/wbT7cCbfB8+AOr/OyVXKN
aG1kLrID1arUqwB/Kr9HOr3XHau5aLWQtQhrwXcSi7HZ+YWlET+VfUdM/4dC
qj3pe5PXPEXDf+HTIY0XbSVhidg5rzMrtT0PL2FNJmY8a3lI85E7vAurznuJ
KeXMTKe9y4HHwQWB6igeTmFt5VuJ9Mhr36WnB+B2uAzusntEE58b0ppvl37h
n2DnZNn/joLTOL8xrHlVetWq5H/Rax1k3gsjqp8c+KDX3OTMMfh3yuq0B/tN
M6Id0UYxa7tpQ3TS5rWmUit5l1IsnySrm/CwQDUp83LB66xJn5pNA3LHy3C0
9VR6K3dfgP8K/rv2Fsk8Dgj0zZT5euBVb6LbGptTmU05RzRQ77UOcsfrXuss
+b/wqn3R1RbWh171L7MwPaRalX60mT4v2byKX77Hm57l7doh2nea6z17N2Su
Z7ImOH3X5O2VOWrle7W953X2vokGJ1Lz+17fQ5md/5cUyw0=
            "]], 
           Polygon[CompressedData["
1:eJxNl1eQFVUQhmdgrjMqIBJU2EXCwsKyLBIkLEsQRJCMBBMoweyDqA+Gskot
U5WCigEwAeaEOUfMCRVQzDkLYhZFwPR/9E+tD3/dnnP69Onu0+m2nz1n0nEN
kiRpmiZJpt8teZKMEz1e+Ev0M8LTQhtt7i6sFf2tsF74XlggXC40015z4ULR
84SLhfnCi8JwydpbeN7rFwkdxdspC57B2huUxtnrhUrRnYUK4SZ93yjcItxq
1Gi9m/duEKpFl0v3d0pJskTfi4VrheuEK4UrhKuEq4WfhdPFf4bwm+hNwtg0
bN5ink6iO6Zx9tE87uLOx0VfY/3ggXehfYDtLbKwrS/nk7CxidAmCfvfta8G
iG6bhM/u0ffdnBHdT7hL9J15rN/rvYPFX5UEzzJ93y7sJrpVFjzwcra/v2eL
f1YasjbbRmw7wm/K21ZK3lr5a1iRJEOFQTo7WBguem9hhDBS2KeINejLdW6I
fgf7DGeJiQ6SNSyNWLnVb4WOyxwDvDlvXWn70G2mcIf5bhN2zcImzt7sNfYq
tFYh+funEW/E4lNCeRYxeZnoS+3XBb6zu98LXR7zG/J2TwjLvd9eMsuykMUa
NDK5l7jbJQud7tf3fcKDwkPCk5bzlHV5wrKXe43c+Eb4zjnCG3EXd6LbOmFS
Gj5r5zu4a6XWV/kcPOy1FwYK1eI9TmdayN87CjPsv0ZFYKbfu4nolsJRoo/G
BtE9/D6ssccae8cIuxVxhrPEzM6iuwvHiz5B6Ol3Pkf0HknEyCPON3ICv87Q
/mLRS9BJdCdhkegrhC5FxCyxyxp7rLF3pdC1iDu460Sht+j38siTD4QPhQO0
don2LhUOLuIO7lqKzkXYgC3HCmVFnCXXqDnIeFMY6Prydh6Apua8k4ff69Lg
gXdfyZgrep4wSvRkYX4aOqDLP8qZXrKnq74nOFfOF31BGjkzSfZ2S8In+OYf
yTw8jdxLnDtnp+FTfDtAOCuNNfZ66nznJGRuy0NkoxO6rXeMEBsdsrABWzrp
TGt9v6XvNcIorX1Wihwhrjdq7U/hJ+FH7NTaKOEX10Rq4Qbhc+EzoUp7XYm9
LGoFNeML5x258kceMj8VPvE59pFJrGAfd9EvpoqeInydRw5jA7qT26x95bxZ
axnI2nY3/OQ+Mtj/Upgsenfd0TaLO86x/37Iwx+j07Cft35dOFX0KcJrot8Q
Rjr/W7mGUndWe2+NY+Zt+xD76A30iI9t61bf/s/m8e4f8FJfj/R7b3EcE4v7
CB/lcRc5T66vtt/pRWcKv7ve4ZtXRK/Iw89jfP8m+423fzkPHnrqc8ILefTa
l/K4iztftIyT06ihyK5WDM1JI8fJdXKO3KPGbChFzC/U9wLHW2OdaZTFHdyF
D/ElMle4Zq20z9b4PvR61bzURmox9W+5bV5lXmK1vIi8Je57eX4Y5HycK3on
91DymtowxTlJLh4oTC1iDfqgIno2vbtM9pR0rhDyLOaCpXnMDNQuahizA3dT
O8g5dMiEhsKiPOaGktegkY2s7bKYMZCJb3YUns3rfUT9oec39kzQ3H3kAaFN
ETZja29mqiLWoPckd1yDqYu9hOZCM+qE9urQRXRDeODNgm4g1GSxVqLmU6+F
y+jzRX3drRJyZKfBA2/JfX077410zeHtF7hGU6u7y54+vpN7arR+rtZ3dU+h
DrcSWvu33Ha18l6Z19o7/qgp1a4x1Jq2Wm8ndHQ/ID4rinqedj679W5qbBE6
bKUd16ztgN/SsBF78D1zFj2cN2iaRUwRS+/nMZNQO6mhzCq13JdETaY28yZd
9H1SGm+1rhT89GB68RD3Z3oEccns0iGNGYJZgt7eLokeQ560zGJWJf7opf19
H/2X2Q1dmQ2npfVzx3TRhwgP5zHr1KYxQzLzEKutxV+eRswSm8Q+OUCMdnP9
xuf46BLuTEMGslpYv7ZpzLKLnT/Mt8zQ6IAu6IAurLHHDHy9Y7p3GjKQtaf7
Ff2L+OBNqh3TxPav4j/A/arS9Z/eQE3/ctt7uC/Bu9E1kNrHLFvh+QR7iAd4
mbPpYZwZq7UxwjhhvPBvHvMO88/feZwhljoUIauzcFoab8BbDNR3XRFz7l5F
zNXMMOQQuQQPa5U+20M4z7bWOCa72dYeljXAfX+I44lcZ64mP9GxSr9d0tCd
ukAdovcPd11gDZozaRFzBHlPLSjzfEmPwE/MJMwmVZZdi87CUPENy2JmYnbq
qTOT9T1O6JHEfDVJe9sLBXejYxb3MV/hQ3yJrH74JguZjYuYQZkjdypihpxt
f5JL1K2tv/ZFndeg8fUg4UL3H2Zd5JJT5BJ1HZ3QjflrYhEzcHPLgX+/LGzB
pkPNv58w1rbRF+gVzI7T7AfuQPZU1wtsxtYR9hE87O0vzCpi5sRvh3ntqjRm
PHgP9/oUzmShwyHCROu2RfViszBe9IQseJGF7znTzD7b5iv+gzFnjxbGuN7T
n3gD3oI6TV0urDc6oAvzaq1jg9mjgWOEmCf2+Q/QOYsYI9ZqkrB3hN+ZnBlr
P/D2o51H1Ht6Izpkzidm2sSxyLwwz/7YWIo3qcvq3za3ztvb132LmGWpEdQK
crdjEv/JyWH2+zhmax1TTewjfNXUa80cB4c6nvlPMN3vTLwQ0/h9mtegeQvs
xXZ6xA6+A/3Ribv/A5hgvsk=
            "]], 
           Polygon[CompressedData["
1:eJwtlGdsjWEUx9829+Z9rahQQlQH0VaIorckRqtmtHQkaG0qvlgxEysxEiQU
JUqM0lpfrMQWEiNWkBCrRmvXrOqwtfxOzvnwy/3f/3nW+zznnMhJMzNnBDuO
MwL8UO46zoogx1kOi+Ar5keYim7gOU5DaAQ/GfcDfsNkYu8Y8xqdhn6JfoN+
C7WQY/E69D+oQxfhTWad4T72hlq8QryJeDmexlJgCPy12FBPz7cYXYn3BV0B
J+EEnIIAsSfEDqKz0G/Rh9CHIZ75K/Gq8ALoBE9j2XhleEfQR12NrcKrxuuO
7gFJkAjJsJ7Yd4utRtegE/mGJOgP/SATdgfp+e8Rb43uDj0gz846Fj0OEuAp
Y0rwUtEpMAie4x3HO2bfGI/3GC+CNcM9fZdpeFF2R7LfePQET++xBC8J7yxz
z8F52RN/B94fYmmcMR1K0X2DNH4BLsIa6IXXE7rZvsM8fYNae780dG/oZfez
Du8bsb3MjUQXo/ejD0AT9gmBx5Yj4T59owlyZhgJbxj/GaajQ1ivKTSDSMZG
QBzMIXadebH4MdABllg+XMW/4up3y/dcc3W9GejZMAvaefq9yeiBMMDGfbK7
lNxu7On+8h6D8V4QK0U/h2euzpG5mfBa8hDmolswpyW0gsuMuyTj7Q3kXB5+
PvqHX3NEcqUCPR9vISyA24y7BTddXXeeed9gKXoZjLJ8bcP8MJ/WotRYNDqY
Paag3xPvyP9OUEO82tbItpqIZlx7T+9xsdW51Gw6+hW6DP0OqqDS1TWy7I3K
/foOocxt7ul3y/gMu48P6I/wAobgteIMMRDr05qV9wqgB8FguM+cMKuLjbAJ
nsITu+8MO5PkTrHF0q3PpFveST1moDNhDBTg7YRt8JPYCOk1kA3bzVtjNSX9
Yi0619XfgNXjOvR6V9eVmu/DWVMgFeqBB7uIRxB76Nd9Ze1ffq2zcfBA3ilI
v2kz5MMem/PIamWf5Uki3mn0GVdrdjtsc/V+ZI0d6LtwRzzLTekRDThHfQj1
6RqSd1thi6u9R+5W1om1d/hg/Vx6SIXlmORsGLSBOOgMXa0PSr8sZP5uKIIo
q22Jd4Fu1gelX8p9FLg6PtK+8YarNVtudSK5Le+QBaOtH/2yt8xDb4Bc6yVy
f+GS29De7qCtpz3vk/UKqen/Eh3uDw==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlFlIVlEQx+93v+vXveZaLuWSmZZLL4GYmGQ7Fb31Xg+B0UK2SRBWCEnl
S6QFPhhFlloGEkQWlhIFaVBaEmoQaYEFtlEZZNnyG2Yehvnf//2fOXPOmZns
bXs3V7qO49RiYeyg5zhDIcfp9h0nLuI4I+D74BjwM/Ad8EzwAPg2uBJ9OeuO
4ONN3wkfCx4G9/i67jnWBW5Htwl9YUTXCn8Dvg2bBqfDXwL3gaPBs7EJ8CDc
eewR2IcLY23gw3BbiVNMzJ2Ww0v4h/AXsV5wAPce/B2cAn6KL3NUF3D4NWDX
1XP1w11HOx8cDxcbOE4jcdehacXnwGfC58C/C+nZX+PHseXgbrxruR0lTiu+
FL4DvxB+AWuLWDvI9zJH99tnuhD/H1tukqOPdjX4TUjXS5x2fJWnmlp8Kpq1
4CR8C3F+8z+NOM3gX+C5docfwCNwSeAV6Gs8fSN565vwH/GfsFf27vJ2t8Dj
2DdwMly17XvAU73EfMH/jIjeX4hzJUT0Pp7AZ4Hj4GPg0/Dp2KjUEn4lcY4T
JxHNKPp++J/YH6uBeVgsuuhAuVXoQ67WodReh51Fch4Ce+Cr4GrwZ+wHeI68
Feaxrs/yDIN7wXXsvZ6YTfhJqz25twxX3/ct3F9s0uJMW/2kgmdhY+ABuE7L
Tc43YXrRyFkl1hjclN2h1J7kJe81hf9q7yVvlGB3IneTaXmGOXs5VgAukNrB
UsCL4fKwfOPrOcMG1l7A5/GdA18c6P6SR3agOUsd1bFnrqv1nO1qTYq+BE02
OBlcCN6N7gr6f1Haa3K3x2St7I0mH24RtpE4zew7A3wPTT2aiOHtvt6L3M8p
T/tC+nQLuMDOJXMgwWrghK/5ypos/pfZGfPt7JJbWqA9IL2wizhR8Hf5rvA1
B+m/Hb7WlbzRSV/PJf2Rytpc68Gl4D38a0HjWL1JrcbD74e/bGeX+F3g0772
vtybzIMsmw+J6KvsriROk689LLNLakxqz0PzwHKWWA2evmNGoPsUwfeEdIbK
PJFeO2S5yUz4Yr0s/R6x857xdVaXoK/w9E6uSQzrBcE1Nsek3s6iabD5KXNS
6kz6Ky7QvpYZO8z/UntfmXWNNodlfsq9Sb0s4f85m6syh/8DDPitzA==
            "]], 
           Polygon[CompressedData["
1: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
vOk/HyJPCg==
            "]], 
           Polygon[CompressedData["
1:eJwtldlvTVEUh89pT499Wr2toa7WXBptSQgxhz/CgydDIsaYacU8JGJKzIIo
UaqtITyYtdqaYogihmglYoohiLmiaPGtrPXw5f7yW/vsvfbaa+/bbfyskTMT
PM8bBUnQKvK8NIyuoedtCzxvOzj0Nd/ztjo82A5ZjMuEjtCO8dmMOYp/BI7D
Xcan4A0knk08Bz0IPRg2E98EW+AC40Jiv9G/oB36O14TejW8Rb+Bp5BOrJet
t5W89kEx5OD1gFziucR6omOQiu6Ml4ZOh3xojxeHttAt1BxeMfdrqIIWlnMO
8R4yRn7xJjLuCvHLUAFJeGNYezQsJFaOlxBqDj35ZghzDIVhsJH4Bqf7rrRv
pRbdJVd0CXMchNxIc8/DyyOWhx6HPxamBnoGe5jDI34QPQ09HWY4za/SajkJ
PRl28c1OKAs0J6nRJKu57HMKeir0xe8D/e2sZL8RXPf1rHfATlhq+0wktgy9
3GmuUnPZ53AYAf9opBLGVUON5Zlve5L4YfI5AnE5y0h7KcPOI990tp11b7jB
9wHeOr4pgj2QTPyGr3nthiKYiz8H7qPfE1sc6NnH+LZLqL3dGpbiL4EMvG++
9t1FqEen4V1BX4U18ByvNd469Hrw0aW+1nwWzIa49exb9DtZG07CCTgNdcRS
Q+3nZ+hWoc691mkdD+EFeCvQK2UfMMdpHeWcC9AdiDehG9A/oRFeQif21j3U
c5bzrsW7BXdsLbkz8m0z2peLDuXErkMiulOo9b0JLalNitwbewOkZsnoKNJY
zO5TFvxhvq98891pTnehBXEHL6xmksNtiz23ffvM40FipOt3xGsPP+QcoBH+
Mj5T3gT0Z/QXp2uVQanT9aUW5VbfU3DGzi8W6t6SmTuCBFujkNoUwKpA5z0g
52J90oZ4PfoxVMEjO69qdA2chQd49+GOvWvFePuc3hPpw/32dkk/vUa/cdoP
0qc38W5DrY0rcbp+ptVR9iT1SIAg0l6Xc5E+vgcP4YPludfpG+DsfkoOcm/7
wQB7U+StlTdpASy2/pI7K3oRLIHD1nOFTvvLs76e73TfdVZLuReX5H2hbhMC
7Wupz7xAa15re3tsd+esvf0t0efQ5+EJfMRrKz3OdysDPfMGX+/KR/gEFbJf
vJl2P+Weyn0rwzsOxyy/Zqf/D3GbQ/rlP+DL0no=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxNlWtoz2EUx39++/nV719CUt56axfbmGHsPuz+t7u5bXNbzDS3cinG1Eza
XCdMGWlDjBdqconEpBBixbxio70QaYUsn9M5L7w4nc//+3ue85znPOd5/lNr
NhXVu47jNGERWGPgOPsRFvqO045fgnYMX8jvi/i/fB/wHOcQ/BGuxwrgmXx/
iV7O+DS4FW0pXIt/gr4c387YNvwy9IMSGyuGS/HnsOXwGXwCVgTH4WOIFYMv
Z24OFg1Ho2XbmDTJFT0KH+VrnivQh1lzGloenOXqPBkvsTe6muca/AvGNeBv
ECOOuelwCjzP1++X4EfYLjgDrQCOtLXCtq7kk4Mdhz+h3cd2uFqH3EDziIT7
4N1wpq97k3zueZpDCfzY0/0WwDfgeDiDcanMy4VPwIPwDDgTTofnw2vhLvi1
rZuONl0Mrgh0rVisDC5xda0qfJ+t248Pmy7fU3ytyVVb9yQ8HGgfyB6/BLpf
yedroOcbZm4vPs/GD6EP8rsDHglUl/MdQiuCa+AR+CnfGl3NoRN/HvuFFhFy
nB7JWeqBnYV/ol9wddwfeDH6ZXgiY/vtjKS2YawbnoD+AH2n1UTiSD5j0fMt
pgcXW5zxIa2b9Fsx82KthqXwZL5dlxqhTbHcSuG3Fl9644qrvdeFr5PcHT0n
6UXRf3t6/lKHvfhEX3v/ADFG+bba0f1+hqvhH/hRvl2zdSeFlCXOGMun1PYr
a4ZCWr9K5n7wtD5Sh3G2X7lb34n3DNsHZ6FlWT9Lf8Zb/6+XvrI4Ek/uhdyz
Wuu3dXA1nOzr/V4Fbwu0h2ahpWJb4R60m572811P75T0apXcAzt3ySHZYnbL
GWKF/8WpYO4b5m5xNeatQPtzM3zT3qIqxnzDz5G7j34Kfa5xK7wIbpHesv6R
d+wOnOTrPeiw8Svh03KH7E1LkHfG17euE61c7pPcAbuDcjc3BNqPEvd2oDnI
W3cY3o7l29uYbTkMoDXYHiX+bKwMbg6UZY2jcJ3Nlbo99HTdFrQmO5dm/Cv7
LW/1HjvTBb7eU3m333naw3L3KwONI++evNOJtu4Rq4+8x+8DPW/ZTy/83P4L
JGaS1act0LOQ+l+D/wEYUrtg
            "]], 
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1:eJw1lWdsjlEUxx+8nuS+IXb46qsaNWqvbqstOrQVVbO1VYy0JXbsvamKXSPV
kQgJsSliz6C+oEqbIASRGL+Tc3z4pf/+z7njuefe87YeO2P49Lqe56VAfdjh
PG8URg/f83aid0FXdAJeDno2zIGzAc87A+ss/wZ6EzodnQbJ0I1x+/E2oTfC
KhiAl4yXBCkQiheKtxy9DFaKb2O3olPRl5n7PjyAUrwcvH7Ey9DlTteVMd3x
NqO3wEk4AcUwy/JrGV8Dv6AY7w+xRbAQYogvxVuMrhv0vDqQjFeCVw8di16G
XgkrLO8bfIXvsBcvnpx56LnQBR2Pl+v0jNbCBsiwsxW9HjbCaLyeeDfZVwU8
h8V484nlOZ0jzGqQb/UYik6CRPNknkTzMqEXOY/xHkEEOg/vKTobsmCy+Hgd
fZ1b9jodb6bTOk8R8KZCFHT2dcwki0XidcILcjYOGsIxvKF419n/tYDWQGp1
Dx0gvg9dCHsgjrx2AjoMushY8qthK3oQsQ/oj07rcAqvBXO0hFbwFv8NVME2
y69Bb0cPQb9nzWpIwIuHtnhtbQ0Z8w7eW/5gYkfQh6EIJuL1xguBNuhoiJG/
Fj8Kx+Qc8fr4er656At4F+GSxdfjbYBs6EtOIt5wp/e/A14HvFTT8gbS0SOh
lH2XBDS/PbH2xDLR8lCnwQTbX/2g3rsqcr/CNxhhY/7PnQb9YBDeQAi3msv9
jJP6EpvmtPbljC+D8wGNyT1O8vWtNGOt5kGtQTs7y1jiA2Vu6G93Qu5JhGhb
N8LuicTDIQqdj3cVfQMq5O3aO5O6/mbtPxBpd1bO8orTfKlhiNUhxun6cq8K
7O3JefhQif8KXsMa+W5fe4f0kHCrlbwLubMNoBEcxxtG7CX+C6dzrLZ+JXue
j14EC+E5sXNwCJ3ga0+R3iI9ZAnebWJ34C48c/ruIu27ZWym3TG5O2PQY+E0
zMbrL++WuZ5AtK994CaxW07n/eu0byXZm5A+tdt6iLz5vehCGAKDnd5hOTN5
AwfsPCqZ+xN8hib27Ynk/eD/nwHdU5bd2XHo8U5/CzKsT8l6e2CB0x4Vbd8t
fbSx9QE5S5m7aVC9k3gnoMh6xBdyPzvtoQXWD2KtB8u5PYCHTn8/VlsNZf8H
nfaFbfZu5c3Xwj+a+djD
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlGtMz2EUx3/+//1++G0uZSu5pckkUpk3amZzacaGZS5JRUq6/ummm0gv
jM2wGbN5gdnM5oV7No0XzCoZLxImlUsYiS3vXD/HOS+enc/v+5zn/J7nOec8
Mbmh9LKA4zjNjCAj3nec6wgZnuOkwV1wmOs40UxOZ1xAW8XoRt+Gzw/sLtYN
Yrfz/RpbwnwNHIb/XTgbbkdfBg9jQ/g/wk4hbik8A1uPz0T8+/Ephb8yfxQu
8TT2EbgaHo3PIfh5QNe+wlahj0I/iF4HR8J98FPmivFpw7Ya38a+Y+yGf2In
8+/32Hr8p7KuHD0JbVpQz3wevZURgCuJXcsIh++h3bCYEvsU378CepYYu8NN
nsaQWN1oWZ7uZQm8Gb4JJ8Nr7Dy5np5HzvURewb9j9wv+kLi1qKnYcv4/oa+
yNezy520w4XwAHoDXAR/gBvhYk/jNcFXfU10OVqsq7mbi21BH4Fegd7ImA0P
ol00f/HpJUYfoxJtLz5x6F/g44x+9B1oJ+G38E5P9zkEH0O7bHco8fM8jRVC
a4Cr+cViqwHJ3UP0fXAd+kr0cWjjGZ1WAz7cAUcFNY8yn4xfDbzU1f3L3j7h
M1POzL82evovqeEXVp+SxyeWd8nRObiHMQ8+wHyKqzXZhhZr+Za+eAknoDd5
eg+z4AG0PVbzj+FeRiLcjHYFDlr9nIX/Sv3BmVYDCWg5cAe8HF7HeGb9lc4e
GhyNk2V9FGW5lrotgOODeoeyj2yLMwl9hcXZ6ukdyV3NcfX/Uucj0bYwd4vv
RHzXW19LHUo+JOZqqWf8quAI7H6rjc+25/997GtfSS+Eu3ouiTnf1zehB86B
J8gdONqrefZW5PraUxI/lbVxfF+z3pHeLEQfg11rb5GcxeO7wNF3qQz9jdVe
tK2VXMu5WuAFaBusN0Oe9p2sdV19Z6Q+U+2dkTcnxc4ia5PgIcu13MN3qw3J
+yXrF+mjTOtTyWmx9V0RWgbjt/Vvna/vjvSF1InU8x1f607qrws+bf6yT6ln
qfPDaA8sX+IntZwPd2Ij8SmB8/EfK73l6Lsgb6Dk6j5rI6zHpddP2F0VMF9h
fSpcZO9GobwV1ssSc9hqWHpB4kjv56H9Ay4lwRA=
            "]], 
           Polygon[CompressedData["
1:eJxNl3m8j0UUxt/en/emUVpVN5eLm/XaQnKRSlkL7Yv2fbdGRKV93/dNpX0v
FEoltGpDJdpTkVS0aPtDz7fz+OiP5/OemTlz5szMmeect/ExQ/cdkmdZVmyQ
ZbX0fTllWamUZaMkjy3LstZFlg2T/JuUHtLYdmqfrvYitQep3a0I3caa87Xa
xwoLNLZQOE7yAI2P03hrjf+o9iPCw8KjwmPCc8KzwvPCC8KuwirNXS3sLrnK
6/2p9i1q76j2GWpvKXuz1D5MeF9j84WjJB8vn0/T+Kdqn5rCBrZ+EXql0EEX
H/F1c9k7Ufqz1O6t9ndCE9muEr7HnvCxxhYLJ0meKkwRpgszhC00/9QsfMCX
pPZJWcxhbj9htuQ5wl6S+wiv5NHH2AXydzznrvbnKXzAF3TQ5Uw5W3zCtweF
B4TdtE5PYaAwWvNbafwn9X8mvKS5LwqfSL5BuF64UbhJ6F7EnWF3qfCt0LwU
NnoUgZ2FbzyGjSXCp7bdRGONhSslX5VCF5vYYs7jvtcnhad8VpOFaT4z7ngz
rbdpKe5+IfEifCh8JOwp9CduhIFCM9luKjxjO5tJ3lTYTXJP4QPbYG7DUqz7
hOOkcxHyH3nEDH1P26+dJHcpQmYOuvQ95th8wv2sVbeIuGTNwUKhdWoJB0uu
U8Sdc9cnpOg7SDjEumcL32v95cK4FGfXSLgirT/DlXm8Mc524yJsYutE4RKh
din871QEOgoXe+xwvwHi+mjf8V95vBfuviTdXKiW3Npn9kYeMctZ1hY2FPZW
/z7CRu5D3tcglolpxjo6fonRHRLEkWVrRRxNuStiiXehsRM0tIHGahXhA2u3
SdHHnHW69wqvSn+u0ED7bF7EnU927MxmPXSE11LE/Jky8Xoeb4Ez5CyvFq5x
vLN3OAOuuhy/ZHeM2juofb7a5wkVkhsU8ZbuF3Yt4k1NkHwu71K40LrLbI85
c9XeSvbqCa+n4CC4iD7G4Ei48vc8eI643k5j9YVFKYBcIXyc4s3ydquFnyWX
a41thetSvFveRnkpbGALm9hek0ecAmRinJjtYj6Gw4l1uBXOgque9744A/be
sIg90odc6bi6SLhUuEy4Q7hduEuYKNzpPuS7hduEW61D/83C33nEILHYUjZb
FOEDvlRLblXE24cDkNFhjD50iYEp9vsVn/FcxwBnxFmRT1bbr3+01nDtuY3m
TVK7shR3yt3eR9zkEWPE2j32u5102xcRI5z59Y6dibaJrbZ++6dkkZPgAGKO
2MPmfY5feGeS1wKTvPaDXgub2GLNLYvIGbxZ3m5b7kW2XhDaS24kvCv5PaEJ
trmrFLwBP/DmeHvkrMFlMVaRglPQ2UVyjxQc0ck8id/kwT2EvinyCrmnv3V3
FjqYV5B/lv2RWfQ1tk/4UkXsEs/2Cd9apfCdPbS0Hr5zZpwdvs1Te2gWPsID
1d53uxT8OD7Fm5tgmwudn+t7vQXO7+UpOAPuaJFiPbjneNl+Jg8OYv9/+H10
t91zHPPE+bIUeZTcviJF/P8g3RV5rE8/uf8s2Ty3LGqW1n6fP6TIcUttZ7lt
MAfdCWWxZjefK77UCF2ErbT3ekWMrzE/dPX4HNcDnVPwawdhxxRt5u6UIm6w
QX8n9zGGTeodbNS4f3oeMcaczrbVxWtV+Y7qOo9u7z5k8kFLxyMczlnvn6L2
IQeQC8jL1DHbmKfoI1fsZ11qQvJ2ud9WpXmGnEhubGjePTBF3wHCEtdX+1uH
3Doki7mHql1Wipw72PvlHI6QfKTPlX3ylug7zvFDPt26CF/weVu/c3IkuZLa
73PXqF/kIdN3TAqd/8bKYg1qSc6YtYd67Ax9Rwmj/W1m3kJmrKnz2BDJpwvD
hRH+DvO8M1PkeWoHasuTrXuaddDljfbzmQ9wTMx2fdjRekP/58u6NbA9Rhjp
PuSxKWKcWKcmOdt6zGtunh7jvhbm5bGe29K8fZbtIFcbcO/SPMa+8vuhXv0i
Rc1D7XOydOoXsY85Pk9iqF8Rb405zIUD4ZOZecQxdR15j7xZ6ZxZ4Xp1fFlw
KtxKDUgtyHijUugyh/qVWpiagdphvtrvp6hbe7hd4fz8bgpbcD95F5v01Xf+
fVtyV43VCL2FPkX0MVbumpYaklqSvEXtgkzdSQ6jr73zAL5S78zRd2v/b5G7
ydPUyTPxW+jFHWRRb8xLkcNneOylFH1vCXsUocueOBv2NN/+v+M90yYnUEvC
kfATnA/Pk/PJ/XDLNJ89XAJXzzC/w9mV2MsjR5EX4Axqyal5cAm1JrUfc5gL
J8KN/dW/ZxF8upJ4LuLfsI3jh/NbYD/fS/FPwR3xLuAGOOIUyatS1ADk/l/8
hZ/5xxxUrO9D3ruI86nn+uzNFDkUboAjyDW/2g66+xRxB9whd8fdwClwC5wA
N/CPxr8a/1j8D1H3UO9Qg1A3UDc1LUXNSe1JbUQthA66PV1nLnFscu7bl2IO
c+E8uI+cRG4iZ5I765SizuWuyM3MucjxNELttXnUNtRI1ErUpm/4y/6JoRqv
Ta27OIUP5DL+BcmJ5DTq6I2lv4lwbYo1WZs+xvgH/9P13a1+718Kff2W163J
WryVfwGvQPyi
            "]], 
           Polygon[CompressedData["
1:eJwtlWdszlEUh//e1/viRsVKazVUa1XV/mJvDYLWbGu1Rs2WKtralVixY4aE
DxKExB7RqoSQqp0YUbUpoUaML/Zzcs6Hp/2959x77r3nnnv+EakZCek+z/MS
IQDh/GkAkfAbx0jneaOc/s8Iet4fbIno5ehWfs/7hP4MX6AT/MD/HcphJmMm
wD10P3z9IQ4qETsINQLqG4ptE4QQrxp8xpbOvC3YNsMU9AtsW9EbYYON/4Rt
Fr7b6JrMy0F3JmYXyML2DH8oOgqaQJrEgmnwBt80xudBrF/3/xW+wXpYZ2t9
tHP0QveEPnAN21hsqfAQ/RhKYAS+Fdha+zVOPGsmwAx0Kf6J+GaiZ8n68Bre
QXPGL8Y3B/4xrhK/g5CMbzyMg1R4YjE+2Jwl6HLZo+XouU/Xkvjp8BzqMK4T
e+gPcbBQ1rWzL0IvlvtFH8d2A25CQ2zDYRik4HtgZ5O9voX30MLWDyFmVcut
xK2P3o9uhH8R/u787hHQtSTn07EtQS+FunAX2x0ospzGO60HqZv7Pt1DktOa
m43tr0/zUm57WIZtIPEHQQAqQit8pxmXZHck+x+IbTAMgbbmT8bXDt0eOls9
Sd11RXeDEnhktS41Uio1BY3RERAKufgS4SRzI/BFQpSdTepkHL566PqQD+eh
EGowdwG+VeiVsAaqYJtn8U4xtwDyIdppzsrkfvEtR+fBBSiALGx+5l6UnEht
wGjbk8yVfMRAazhj5z6HPgtz0T6/xplt73sXejfscbr3Ymzj8TVAh1ucWGgj
MfCNCeq76A19bbyc+5qdaT66GH0dtjl9x2nYXjJuu9O6l3uV9fbCPrgKV6DI
anhhUGN/Zdw3uG57mgqv0L/gp8WTs5+wOm7k9F4KLV+SI+kV2Yy5afeQbT3k
DlyGS7Z+mN2vnKM2uhZUtjs6ge04ZKIr+DWX0532AekHb+2usiy/R/AdhWNO
+89UG19mb+IGurrVhOzrltOzSY7monMg1+nbb8m4aGhmfaMONR8Gk60HSM+U
XvzR+qPUdhersdWwFpzdi/Qj6SuT0BlSA/Lbaa3nWS976rT3y/dgB3qn0xpp
Yr01Rj4cfs1HU7E77SlyB1KLKfaWpfcPcPoW21ktSu10QHe0XEqcA+iDcMhp
75AeMjig35tHVrOSc/EfdprbNPtGSN/LdJqzYjtnW+b2hj4Bfb9hVk/SH1/A
f4ks4+s=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlNtLVFEUhw8d5hCzi56KXqIk6KEgrMwgiaCbaZBQaWh2cVIJNS0LjFJH
bXS8jvdRJ/Ouo5VaFET1EkRFBP01RRBBfYu1HhbrO7+9zt5rr732zojUXajd
4HneY8zH9jnPuwj0BRi+B60W3x7yvC58BeN18E24CL4DtxPTgF/in0H0FPog
XAofg5OBxp+Aq4mLET8UaMxV9Hz0Rfv3GbwCJ4gZJrYbzkXfgX4eK4NH0Maw
cvgU2kl8N/GTvs53DStAf4qfwppgHzsg++C/El9zrsSv8r2M/8z4jOwbfVTy
QE/jv6BnWE0qyGcPXAgnAs1P8pzDD6H1wnH8iq/6En6JsRH4JfFFtq6s38Y8
UXwL43G4FZ4JtIaSQz+6h56JHkP7Br/wda0QfBDuQH9ueX5yun/Zc6PTfU9j
UThNTBJ+D4/ZWrNoQ3CLrdtr+UzDc1gnvIC2LLWGP8B9rD1IWin8d75X0dcY
f2u8bvlIPb9KvrIG8VPEP4Fvo1ejJ0I65zz8A1uzf98ZS62k3wb4dwwfQeuC
H/q6RznrGPp8oD25yH+PsGY5b7QFbABeRuuEs+CNTs9UzuSj9ZjU5zVcwlxR
T8/3Adbp6bnc85Wr5Tyxfiwt/Y/dsD5MWh9eRqvBrsPDaHetV0etVyvgYrTx
QPuu1M5IzuuV6LZHWWev017pJ7YHOwvvRDtj88vd2Q1fsnta6LRGslY23GR1
aLZadfh6jtIDs4xnYY2yNlpVSO/LcbR/Yc87ZH0l6+bBv9AG7C7nEpNne5c9
TmA18Fan91Ty/BnWfpM7NOV0fqmh1HXRzmUCvdfm3+X0vKS2Sfi+5TaJFrP+
lJ5MWH2i1kvyJm1nvAs+DIfh/VYTuZvjVvPTcu+lP2zOTLu/UtuU9eQ2eyuk
t9Ytt3z4d1jfulbWLQtpHa6gHyXmjd1H6f8j+GzMOa2fvKU5vvae5LbZ6Z2S
tyHitG/lfpU7raH01y24Hh/3dG3Zl8y5xen8MmclOfwJ6zsmb0IPY212l+tt
j/IO51i8/Ndg/SBn/Tes74a8gfFAe76Y+AKLl3c2ZWdaZW9PE/o5X+PlHm1C
/w+6ZMrr
            "]], 
           Polygon[CompressedData["
1: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
XAf2/A==
            "]], 
           Polygon[CompressedData["
1:eJwtledvzlEUx388nh96rTdWYguJEZsE8cIuRcVu7apZtWNvOqgOVVqjWqNV
NV8QMyHEDn+NFQSfb8558cnzzTn3d8655957np5Zm+dsahpFUQYkYUyIotEw
DpYkoqgsjqI9OHbDYTiE7RS+9rADvR1y4DzrrmM7gy6HAriK7RLsQ2/Dt13f
wGLiZMJqmItvALancAVdC2fhRmw5NqIvoDugO8JlqNZaOOfrHqIfwF30HWyP
0MWxxe6J7gW9IVfxVCO+Ffg2o1dSwwqYgF4lG/prShSlootY9w39HRbiz8ZW
iS0DnQkVHmcaeibMgmEwNNi+9+MbgU6HZegN3kf1szW2kdhOsK4tul2wuKux
VWFbgl4KU9QvP4ep6FQ4i16ZsHzzYD4s8PrPxVbrIkiBlhBglOdqgW7uPuUv
jK0fyxOWS/G1n5rYzvoo+hgcD9aLaTp/fD/QP+Ge9/wT/s/wBV7DK3gDDfhu
seYZuhJdwt4vwqWknddtbB/wfQwW451/cwdfDWtq4S22Gx5H/vd+X3T+DR77
udZAKbbr2BrQN+ElvPCaFKMR3+Ngd0S138X2BN0Ip9H12ErJWZa0GGXY6mLz
34I6OIEtD38lVCXt3hdiuxabvx5q0YcT1rd8KIAq9UB3F99R3Wvd02DvqcbX
l+t+BvtVjCMJ+yYfPRw9FsZAUvvXXYDzXqf2XUE9Z+Bq0nr7wP3KfcH3qP3o
js9Gp8NUOBlbXcqnWk9Ckb+zWrjm56d+H1K96Jux5VLO4+gh2NJgBvwi/mVs
B9C7WL8X9unOBXsT1e4bFWzdQXS++uo2vfdc9EV8ndCdvQfDsP0h9l/4B9m6
93o3fi46g2p/e5o1O4Plz8M21Ov6nWIx9J40407jm45OgxL0vITNiz7QF7I0
J4LlKvS5tg69FjYEm1Gafzk6S3QxbPLam2CLgvVH+RP+frPQe2EPbPU464PF
yPWZtyXYjKrw9651G+l1DpT7m9U86w7doEew96m5VQrzE1Z/P+gPk2AiTA42
ZzTLpDPQmbDGZ08rnZHPBs2pNtAsWO15fga6fxnUsShpM0XrC2KrYavmPUz3
WaHZOt7zZ/uM6oru4rWn+v1TzQu8FtU0BN/AYP8PxX4ugxSfnFtgV9L+WzRv
Bwfzlfi+9a3mRqPuqd61v/37/uY1p+r4vh7+A4lu4Eo=
            "]]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0DlSgjEYBuAPUAopXAZESg9E4xE8gJ5JaUAKQNxwuYFCo3IN9k0ceH7H
mTx5ky+TTJLT88uzi1RElKlQIr0TkSLYZCJODH/lmh9WFNWWcsGcGcdqUzlh
TMH8yOGHHCTMV8k+FszJ0eebLz7J0uaWFk2SOzac2aRFOlmXbe64R4sH3SNP
dDJ/T4hn+cIrb+yqvfNBlx57DBgyYsw+VWrcUCfPFdf//7UF4Cwv4Q==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0LlOAlEAhtFLRBFE0FYWY7BAEgVsFF6A1YW1QSh4AC0VCpCnQN/WM7E4
+eb+ydxk5mr5MXyPhRCeqHi412k8hAljRtRtA33lhWdq0Tvap0eXqq2jbVrc
Of+684c9N847/WbLhmvbQue8MePS1tQGjzxwYTtwZ5xDcs5HmuCYJHlbSk9I
c0rBltEsZ5xTtI3cOWbClJLtU79YsaZsq2qNevRvuLWVo2+J/f+vPy6DFNk=

          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DlSQkEUBdD+ltMqRNagoAEGEghqkZgATgxCqgsSB0RKJAESlcRhGyiJ
yDbUYxmcuv1u0N314tWzvdMohJBj4LAru7Mh3NPhjh1dW97S4oZtXVNec8Ul
Wd2FbHBOxrw8E0KMJdLmRbnAPHNs6Kbe/WLCJ+u6N/nKC8+s6PLuLFBk1bwv
DzjkiITuWJYoUyGpq8oTatRZ043c+c4HY1K6b/nztwz/ith0fDA/8sSQLV1P
9qP/ff0CHbgnow==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0yglEAx+Gj6UbcBDbFRixCmqmFFurNRgxXkVqUrkIWlVC+rkpRPgZN
j2nxzG/Of3Hmfc9ydJ49Wwoh7LAWC+FIZ/EQ/vjlh7LtW7/45IPINtUJ77xR
so11xCtF52t3trmi4NzSS5o0yNtO9YQKx+zbtnWLFJukbR13dunFF997o31u
uWPXdq8DhjywZ3vUJ555IWMruTOi/P/P5GxVvaBGnQNbQpOss8GhbUVXY4v3
mgOfIy16
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0EtOQjEYBtCfy70gL/dAAm5ERUUNyhJMwMcAEhwo6NbAiY+J4DYUJ4oL
0EMcnH7t16RtWj8bdge5iDjmIYm4l90s4pQTOtyt9+URh7SZ6A7kPnu0GOt2
5Q7b3Fpv5SOaNLi23pQ1qlQY6n7cu+KbL650b3LBnFd6ut/U4NwcfdNE5knJ
ONcVZJENSlzoyrJClRqXundnfrDkk4Eu9Z6MAkVGukd7Tzzzwo1uKmfJ/3/9
AVUvIQM=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0LlOQlEYhdFjiA/ieyCNQ4NYMDgAitg4FKD0TiCQKMQBExBQIIDPybqx
WPn4d3FC7sZ5NV1ZCyGkSMRC+NK/9RCWLJjTs810yoRfPm0/OmbEkA/btw7o
8+5eenPBnFd3VzvRb15o22p6yw1V6rZ9TbFHkjtbxptZcty7D/SQI455sOW1
QJETHm2nWuKMMk+2C29ecsU1LVtDn2lGd/T/bFu6zQ67vNniuhn7/14rKDMm
0Q==
          "]]}, {
         Line[{945, 1727, 1729, 1730, 1449, 1724, 960, 1754, 1453, 1713, 1715,
           1718, 978, 1816, 1464, 1746, 1748, 1751, 996, 1869, 1476, 1811, 
          1813, 1013}], 
         Line[{949, 1450, 1737, 1739, 1742, 1745, 965, 1783, 1459, 1795, 1797,
           1800, 983, 1863, 1865, 1866, 1472, 1850, 1000, 1891, 1481, 1910, 
          1912, 1017}], 
         Line[{953, 1770, 1772, 1773, 1458, 1767, 970, 979, 1827, 1829, 1831, 
          1834, 987, 254, 1882, 1884, 1887, 1006, 1916, 1484, 1922, 1924, 
          1021}], 
         Line[{957, 971, 1801, 1803, 1806, 1810, 975, 1776, 1778, 1779, 1475, 
          1860, 992, 268, 1835, 1837, 1840, 1010, 1906, 1908, 1909, 1490, 
          1026}], 
         Line[{1011, 993, 1872, 1870, 1867, 994, 1749, 1466, 1819, 1817, 1814,
           976, 1716, 1455, 1757, 1755, 1752, 958, 1722, 1720, 1719, 1447, 
          1725, 943}], 
         Line[{1014, 1001, 1895, 1892, 1888, 997, 1847, 1844, 1842, 1841, 
          1469, 980, 966, 1788, 1787, 1784, 1780, 962, 156, 1736, 1734, 1731, 
          946}], 
         Line[{1018, 1486, 1920, 1917, 1913, 1003, 1480, 1881, 1879, 1876, 
          1873, 984, 1468, 1826, 1825, 1823, 1820, 967, 1764, 1761, 1759, 
          1758, 961, 950}], 
         Line[{1023, 1928, 1926, 1925, 1022, 1007, 1483, 1903, 1902, 1900, 
          1897, 989, 1857, 1854, 1852, 1851, 988, 972, 1807, 1463, 1794, 1792,
           1789, 954}], 
         Line[{1029, 1945, 1947, 1948, 1493, 1942, 1044, 1972, 1497, 1931, 
          1933, 1936, 1062, 2034, 1508, 1964, 1966, 1969, 1080, 2087, 1520, 
          2029, 2031, 1097}], 
         Line[{1033, 1494, 1955, 1957, 1960, 1963, 1049, 2001, 1503, 2013, 
          2015, 2018, 1067, 2081, 2083, 2084, 1516, 2068, 1084, 2109, 1525, 
          2128, 2130, 1101}], 
         Line[{1037, 1988, 1990, 1991, 1502, 1985, 1054, 1063, 2045, 2047, 
          2049, 2052, 1071, 389, 2100, 2102, 2105, 1090, 2134, 1528, 2140, 
          2142, 1105}], 
         Line[{1041, 1055, 2019, 2021, 2024, 2028, 1059, 1994, 1996, 1997, 
          1519, 2078, 1076, 403, 2053, 2055, 2058, 1094, 2124, 2126, 2127, 
          1534, 1110}], 
         Line[{1095, 1077, 2090, 2088, 2085, 1078, 1967, 1510, 2037, 2035, 
          2032, 1060, 1934, 1499, 1975, 1973, 1970, 1042, 1940, 1938, 1937, 
          1491, 1943, 1027}], 
         Line[{1098, 1085, 2113, 2110, 2106, 1081, 2065, 2062, 2060, 2059, 
          1513, 1064, 1050, 2006, 2005, 2002, 1998, 1046, 291, 1954, 1952, 
          1949, 1030}], 
         Line[{1102, 1530, 2138, 2135, 2131, 1087, 1524, 2099, 2097, 2094, 
          2091, 1068, 1512, 2044, 2043, 2041, 2038, 1051, 1982, 1979, 1977, 
          1976, 1045, 1034}], 
         Line[{1107, 2146, 2144, 2143, 1106, 1091, 1527, 2121, 2120, 2118, 
          2115, 1073, 2075, 2072, 2070, 2069, 1072, 1056, 2025, 1507, 2012, 
          2010, 2007, 1038}], 
         Line[{1113, 2163, 2165, 2166, 1537, 2160, 1128, 2190, 1541, 2149, 
          2151, 2154, 1146, 2252, 1552, 2182, 2184, 2187, 1164, 2305, 1564, 
          2247, 2249, 1181}], 
         Line[{1117, 1538, 2173, 2175, 2178, 2181, 1133, 2219, 1547, 2231, 
          2233, 2236, 1151, 2299, 2301, 2302, 1560, 2286, 1168, 2327, 1569, 
          2346, 2348, 1185}], 
         Line[{1121, 2206, 2208, 2209, 1546, 2203, 1138, 1147, 2263, 2265, 
          2267, 2270, 1155, 524, 2318, 2320, 2323, 1174, 2352, 1572, 2358, 
          2360, 1189}], 
         Line[{1125, 1139, 2237, 2239, 2242, 2246, 1143, 2212, 2214, 2215, 
          1563, 2296, 1160, 538, 2271, 2273, 2276, 1178, 2342, 2344, 2345, 
          1578, 1194}], 
         Line[{1179, 1161, 2308, 2306, 2303, 1162, 2185, 1554, 2255, 2253, 
          2250, 1144, 2152, 1543, 2193, 2191, 2188, 1126, 2158, 2156, 2155, 
          1535, 2161, 1111}], 
         Line[{1182, 1169, 2331, 2328, 2324, 1165, 2283, 2280, 2278, 2277, 
          1557, 1148, 1134, 2224, 2223, 2220, 2216, 1130, 426, 2172, 2170, 
          2167, 1114}], 
         Line[{1186, 1574, 2356, 2353, 2349, 1171, 1568, 2317, 2315, 2312, 
          2309, 1152, 1556, 2262, 2261, 2259, 2256, 1135, 2200, 2197, 2195, 
          2194, 1129, 1118}], 
         Line[{1191, 2364, 2362, 2361, 1190, 1175, 1571, 2339, 2338, 2336, 
          2333, 1157, 2293, 2290, 2288, 2287, 1156, 1140, 2243, 1551, 2230, 
          2228, 2225, 1122}], 
         Line[{1197, 2381, 2383, 2384, 1581, 2378, 1212, 2408, 1585, 2367, 
          2369, 2372, 1230, 2470, 1596, 2400, 2402, 2405, 1248, 2523, 1608, 
          2465, 2467, 1265}], 
         Line[{1201, 1582, 2391, 2393, 2396, 2399, 1217, 2437, 1591, 2449, 
          2451, 2454, 1235, 2517, 2519, 2520, 1604, 2504, 1252, 2545, 1613, 
          2564, 2566, 1269}], 
         Line[{1205, 2424, 2426, 2427, 1590, 2421, 1222, 1231, 2481, 2483, 
          2485, 2488, 1239, 659, 2536, 2538, 2541, 1258, 2570, 1616, 2576, 
          2578, 1273}], 
         Line[{1209, 1223, 2455, 2457, 2460, 2464, 1227, 2430, 2432, 2433, 
          1607, 2514, 1244, 673, 2489, 2491, 2494, 1262, 2560, 2562, 2563, 
          1622, 1278}], 
         Line[{1263, 1245, 2526, 2524, 2521, 1246, 2403, 1598, 2473, 2471, 
          2468, 1228, 2370, 1587, 2411, 2409, 2406, 1210, 2376, 2374, 2373, 
          1579, 2379, 1195}], 
         Line[{1266, 1253, 2549, 2546, 2542, 1249, 2501, 2498, 2496, 2495, 
          1601, 1232, 1218, 2442, 2441, 2438, 2434, 1214, 561, 2390, 2388, 
          2385, 1198}], 
         Line[{1270, 1618, 2574, 2571, 2567, 1255, 1612, 2535, 2533, 2530, 
          2527, 1236, 1600, 2480, 2479, 2477, 2474, 1219, 2418, 2415, 2413, 
          2412, 1213, 1202}], 
         Line[{1275, 2582, 2580, 2579, 1274, 1259, 1615, 2557, 2556, 2554, 
          2551, 1241, 2511, 2508, 2506, 2505, 1240, 1224, 2461, 1595, 2448, 
          2446, 2443, 1206}], 
         Line[{1281, 2599, 2601, 2602, 1625, 2596, 1296, 2626, 1629, 2585, 
          2587, 2590, 1314, 2701, 1644, 2618, 2620, 2623, 1332, 2695, 1653, 
          2761, 2763, 1349}], 
         Line[{1285, 1626, 2609, 2611, 2614, 2617, 1301, 2655, 1635, 2668, 
          2672, 2678, 1319, 2739, 2744, 2748, 1652, 2736, 1336, 2755, 1658, 
          2783, 2785, 1353}], 
         Line[{1289, 2642, 2644, 2645, 1634, 2639, 1306, 2707, 2709, 2710, 
          1640, 2682, 1323, 783, 2764, 2766, 2769, 1342, 2789, 1661, 2795, 
          2797, 1357}], 
         Line[{1293, 1307, 2683, 2685, 2688, 2692, 1311, 2648, 2650, 2651, 
          1649, 2720, 1328, 797, 2721, 2723, 2726, 1346, 2779, 2781, 2782, 
          1667, 1362}], 
         Line[{1347, 1329, 2698, 2696, 2693, 1330, 2621, 1646, 2704, 2702, 
          2699, 1312, 2588, 1631, 2629, 2627, 2624, 1294, 2594, 2592, 2591, 
          1623, 2597, 1279}], 
         Line[{1350, 1337, 2759, 2756, 2752, 1333, 2733, 2730, 2728, 2727, 
          1324, 1316, 1302, 2660, 2659, 2656, 2652, 1298, 696, 2608, 2606, 
          2603, 1282}], 
         Line[{1354, 1663, 2793, 2790, 2786, 1339, 1657, 2751, 2749, 2745, 
          2740, 1320, 2679, 2673, 2669, 2667, 1637, 1303, 2636, 2633, 2631, 
          2630, 1297, 1286}], 
         Line[{1359, 2801, 2799, 2798, 1358, 1343, 1660, 2776, 2775, 2773, 
          2770, 1325, 2717, 2714, 2712, 2711, 1315, 1308, 2689, 1643, 2666, 
          2664, 2661, 1290}], 
         Line[{1365, 2818, 2820, 2821, 1670, 2815, 1380, 2845, 1674, 2804, 
          2806, 2809, 1398, 2920, 1689, 2837, 2839, 2842, 1416, 2914, 1698, 
          2980, 2982, 1433}], 
         Line[{1369, 1671, 2828, 2830, 2833, 2836, 1385, 2874, 1680, 2887, 
          2891, 2897, 1403, 2958, 2963, 2967, 1697, 2955, 1420, 2974, 1703, 
          3002, 3004, 1437}], 
         Line[{1373, 2861, 2863, 2864, 1679, 2858, 1390, 2926, 2928, 2929, 
          1685, 2901, 1407, 910, 2983, 2985, 2988, 1426, 3008, 1706, 3014, 
          3016, 1441}], 
         Line[{1377, 1391, 2902, 2904, 2907, 2911, 1395, 2867, 2869, 2870, 
          1694, 2939, 1412, 924, 2940, 2942, 2945, 1430, 2998, 3000, 3001, 
          1712, 1446}], 
         Line[{1431, 1413, 2917, 2915, 2912, 1414, 2840, 1691, 2923, 2921, 
          2918, 1396, 2807, 1676, 2848, 2846, 2843, 1378, 2813, 2811, 2810, 
          1668, 2816, 1363}], 
         Line[{1434, 1421, 2978, 2975, 2971, 1417, 2952, 2949, 2947, 2946, 
          1408, 1400, 1386, 2879, 2878, 2875, 2871, 1382, 823, 2827, 2825, 
          2822, 1366}], 
         Line[{1438, 1708, 3012, 3009, 3005, 1423, 1702, 2970, 2968, 2964, 
          2959, 1404, 2898, 2892, 2888, 2886, 1682, 1387, 2855, 2852, 2850, 
          2849, 1381, 1370}], 
         Line[{1443, 3020, 3018, 3017, 1442, 1427, 1705, 2995, 2994, 2992, 
          2989, 1409, 2936, 2933, 2931, 2930, 1399, 1392, 2908, 1688, 2885, 
          2883, 2880, 1374}], 
         Line[{944, 1726, 1728, 1448, 1721, 1723, 959, 1753, 1756, 1454, 1714,
           1717, 977, 1815, 1818, 1465, 1747, 1750, 995, 1868, 1871, 1477, 
          1812, 1012}], 
         Line[{947, 1732, 1735, 1452, 1740, 1743, 963, 1781, 1785, 194, 1798, 
          981, 1861, 1470, 1843, 1845, 1848, 998, 1889, 1893, 1896, 1002, 
          1015}], 
         Line[{948, 1733, 1451, 1738, 1741, 1744, 964, 1782, 1786, 1460, 1796,
           1799, 982, 1862, 1864, 1471, 1846, 1849, 999, 1890, 1894, 1482, 
          1911, 1016}], 
         Line[{951, 1768, 1456, 1760, 1762, 1765, 968, 1821, 1824, 222, 1832, 
          985, 1874, 1877, 1880, 1479, 1885, 1004, 1914, 1918, 1921, 1487, 
          1019}], 
         Line[{952, 1769, 1771, 1457, 1763, 1766, 969, 1822, 1467, 1828, 1830,
           1833, 986, 1875, 1878, 1478, 1883, 1886, 1005, 1915, 1919, 1485, 
          1923, 1020}], 
         Line[{955, 1790, 1793, 1462, 1804, 1808, 973, 1774, 1473, 1853, 1855,
           1858, 990, 1898, 1901, 270, 1838, 1008, 1904, 1488, 1927, 1929, 
          1024}], 
         Line[{956, 1791, 1461, 1802, 1805, 1809, 974, 1775, 1777, 1474, 1856,
           1859, 991, 1899, 269, 1836, 1839, 1009, 1905, 1907, 1489, 1930, 
          1025}], 
         Line[{1028, 1944, 1946, 1492, 1939, 1941, 1043, 1971, 1974, 1498, 
          1932, 1935, 1061, 2033, 2036, 1509, 1965, 1968, 1079, 2086, 2089, 
          1521, 2030, 1096}], 
         Line[{1031, 1950, 1953, 1496, 1958, 1961, 1047, 1999, 2003, 329, 
          2016, 1065, 2079, 1514, 2061, 2063, 2066, 1082, 2107, 2111, 2114, 
          1086, 1099}], 
         Line[{1032, 1951, 1495, 1956, 1959, 1962, 1048, 2000, 2004, 1504, 
          2014, 2017, 1066, 2080, 2082, 1515, 2064, 2067, 1083, 2108, 2112, 
          1526, 2129, 1100}], 
         Line[{1035, 1986, 1500, 1978, 1980, 1983, 1052, 2039, 2042, 357, 
          2050, 1069, 2092, 2095, 2098, 1523, 2103, 1088, 2132, 2136, 2139, 
          1531, 1103}], 
         Line[{1036, 1987, 1989, 1501, 1981, 1984, 1053, 2040, 1511, 2046, 
          2048, 2051, 1070, 2093, 2096, 1522, 2101, 2104, 1089, 2133, 2137, 
          1529, 2141, 1104}], 
         Line[{1039, 2008, 2011, 1506, 2022, 2026, 1057, 1992, 1517, 2071, 
          2073, 2076, 1074, 2116, 2119, 405, 2056, 1092, 2122, 1532, 2145, 
          2147, 1108}], 
         Line[{1040, 2009, 1505, 2020, 2023, 2027, 1058, 1993, 1995, 1518, 
          2074, 2077, 1075, 2117, 404, 2054, 2057, 1093, 2123, 2125, 1533, 
          2148, 1109}], 
         Line[{1112, 2162, 2164, 1536, 2157, 2159, 1127, 2189, 2192, 1542, 
          2150, 2153, 1145, 2251, 2254, 1553, 2183, 2186, 1163, 2304, 2307, 
          1565, 2248, 1180}], 
         Line[{1115, 2168, 2171, 1540, 2176, 2179, 1131, 2217, 2221, 464, 
          2234, 1149, 2297, 1558, 2279, 2281, 2284, 1166, 2325, 2329, 2332, 
          1170, 1183}], 
         Line[{1116, 2169, 1539, 2174, 2177, 2180, 1132, 2218, 2222, 1548, 
          2232, 2235, 1150, 2298, 2300, 1559, 2282, 2285, 1167, 2326, 2330, 
          1570, 2347, 1184}], 
         Line[{1119, 2204, 1544, 2196, 2198, 2201, 1136, 2257, 2260, 492, 
          2268, 1153, 2310, 2313, 2316, 1567, 2321, 1172, 2350, 2354, 2357, 
          1575, 1187}], 
         Line[{1120, 2205, 2207, 1545, 2199, 2202, 1137, 2258, 1555, 2264, 
          2266, 2269, 1154, 2311, 2314, 1566, 2319, 2322, 1173, 2351, 2355, 
          1573, 2359, 1188}], 
         Line[{1123, 2226, 2229, 1550, 2240, 2244, 1141, 2210, 1561, 2289, 
          2291, 2294, 1158, 2334, 2337, 540, 2274, 1176, 2340, 1576, 2363, 
          2365, 1192}], 
         Line[{1124, 2227, 1549, 2238, 2241, 2245, 1142, 2211, 2213, 1562, 
          2292, 2295, 1159, 2335, 539, 2272, 2275, 1177, 2341, 2343, 1577, 
          2366, 1193}], 
         Line[{1196, 2380, 2382, 1580, 2375, 2377, 1211, 2407, 2410, 1586, 
          2368, 2371, 1229, 2469, 2472, 1597, 2401, 2404, 1247, 2522, 2525, 
          1609, 2466, 1264}], 
         Line[{1199, 2386, 2389, 1584, 2394, 2397, 1215, 2435, 2439, 599, 
          2452, 1233, 2515, 1602, 2497, 2499, 2502, 1250, 2543, 2547, 2550, 
          1254, 1267}], 
         Line[{1200, 2387, 1583, 2392, 2395, 2398, 1216, 2436, 2440, 1592, 
          2450, 2453, 1234, 2516, 2518, 1603, 2500, 2503, 1251, 2544, 2548, 
          1614, 2565, 1268}], 
         Line[{1203, 2422, 1588, 2414, 2416, 2419, 1220, 2475, 2478, 627, 
          2486, 1237, 2528, 2531, 2534, 1611, 2539, 1256, 2568, 2572, 2575, 
          1619, 1271}], 
         Line[{1204, 2423, 2425, 1589, 2417, 2420, 1221, 2476, 1599, 2482, 
          2484, 2487, 1238, 2529, 2532, 1610, 2537, 2540, 1257, 2569, 2573, 
          1617, 2577, 1272}], 
         Line[{1207, 2444, 2447, 1594, 2458, 2462, 1225, 2428, 1605, 2507, 
          2509, 2512, 1242, 2552, 2555, 675, 2492, 1260, 2558, 1620, 2581, 
          2583, 1276}], 
         Line[{1208, 2445, 1593, 2456, 2459, 2463, 1226, 2429, 2431, 1606, 
          2510, 2513, 1243, 2553, 674, 2490, 2493, 1261, 2559, 2561, 1621, 
          2584, 1277}], 
         Line[{1280, 2598, 2600, 1624, 2593, 2595, 1295, 2625, 2628, 1630, 
          2586, 2589, 1313, 2700, 2703, 1645, 2619, 2622, 1331, 2694, 2697, 
          1654, 2762, 1348}], 
         Line[{1283, 2604, 2607, 1628, 2612, 2615, 1299, 2653, 2657, 734, 
          2676, 1317, 2737, 1650, 2729, 2731, 2734, 1334, 2753, 2757, 2760, 
          1338, 1351}], 
         Line[{1284, 2605, 1627, 2610, 2613, 2616, 1300, 2654, 2658, 1636, 
          2671, 2677, 1318, 2738, 2743, 1651, 2732, 2735, 1335, 2754, 2758, 
          1659, 2784, 1352}], 
         Line[{1287, 2640, 1632, 2632, 2634, 2637, 1304, 2705, 1638, 2670, 
          2674, 2680, 1321, 2741, 2746, 2750, 1656, 2767, 1340, 2787, 2791, 
          2794, 1664, 1355}], 
         Line[{1288, 2641, 2643, 1633, 2635, 2638, 1305, 2706, 2708, 1639, 
          2675, 2681, 1322, 2742, 2747, 1655, 2765, 2768, 1341, 2788, 2792, 
          1662, 2796, 1356}], 
         Line[{1291, 2662, 2665, 1642, 2686, 2690, 1309, 2646, 1647, 2713, 
          2715, 2718, 1326, 2771, 2774, 799, 2724, 1344, 2777, 1665, 2800, 
          2802, 1360}], 
         Line[{1292, 2663, 1641, 2684, 2687, 2691, 1310, 2647, 2649, 1648, 
          2716, 2719, 1327, 2772, 798, 2722, 2725, 1345, 2778, 2780, 1666, 
          2803, 1361}], 
         Line[{1364, 2817, 2819, 1669, 2812, 2814, 1379, 2844, 2847, 1675, 
          2805, 2808, 1397, 2919, 2922, 1690, 2838, 2841, 1415, 2913, 2916, 
          1699, 2981, 1432}], 
         Line[{1367, 2823, 2826, 1673, 2831, 2834, 1383, 2872, 2876, 861, 
          2895, 1401, 2956, 1695, 2948, 2950, 2953, 1418, 2972, 2976, 2979, 
          1422, 1435}], 
         Line[{1368, 2824, 1672, 2829, 2832, 2835, 1384, 2873, 2877, 1681, 
          2890, 2896, 1402, 2957, 2962, 1696, 2951, 2954, 1419, 2973, 2977, 
          1704, 3003, 1436}], 
         Line[{1371, 2859, 1677, 2851, 2853, 2856, 1388, 2924, 1683, 2889, 
          2893, 2899, 1405, 2960, 2965, 2969, 1701, 2986, 1424, 3006, 3010, 
          3013, 1709, 1439}], 
         Line[{1372, 2860, 2862, 1678, 2854, 2857, 1389, 2925, 2927, 1684, 
          2894, 2900, 1406, 2961, 2966, 1700, 2984, 2987, 1425, 3007, 3011, 
          1707, 3015, 1440}], 
         Line[{1375, 2881, 2884, 1687, 2905, 2909, 1393, 2865, 1692, 2932, 
          2934, 2937, 1410, 2990, 2993, 926, 2943, 1428, 2996, 1710, 3019, 
          3021, 1444}], 
         Line[{1376, 2882, 1686, 2903, 2906, 2910, 1394, 2866, 2868, 1693, 
          2935, 2938, 1411, 2991, 925, 2941, 2944, 1429, 2997, 2999, 1711, 
          3022, 1445}]}, {
         Line[{163, 1909, 283, 1930, 1929, 1928, 280, 1924, 1923, 277, 1921, 
          1920, 267, 1912, 1911, 264, 1896, 1895, 253, 1813, 1812, 246, 1872, 
          274}], 
         Line[{171, 1840, 1839, 1838, 271, 1903, 261, 1887, 1886, 1885, 257, 
          1881, 235, 231, 1850, 1849, 1848, 1847, 219, 1751, 1750, 1749, 211, 
          250}], 
         Line[{176, 149, 1725, 1726, 1727, 157, 1731, 1732, 1733, 153, 1737, 
          164, 1758, 184, 1768, 1769, 1770, 188, 1789, 1790, 1791, 200, 1801, 
          204}], 
         Line[{207, 1810, 1809, 1808, 1807, 203, 191, 187, 1767, 1766, 1765, 
          1764, 167, 1745, 1744, 1743, 156, 160, 152, 1724, 1723, 1722, 179}], 
         Line[{212, 1752, 1753, 1754, 172, 180, 1780, 1781, 1782, 1783, 192, 
          196, 1820, 1821, 1822, 220, 1827, 224, 1851, 236, 1774, 1775, 1776, 
          240}], 
         Line[{243, 239, 1860, 1859, 1858, 1857, 227, 1834, 1833, 1832, 223, 
          1826, 199, 1800, 1799, 1798, 195, 1788, 183, 1718, 1717, 1716, 175, 
          215}], 
         Line[{247, 1814, 1815, 1816, 208, 216, 1841, 228, 1861, 1862, 1863, 
          232, 1873, 1874, 1875, 254, 258, 1897, 1898, 1899, 268, 168}], 
         Line[{272, 1867, 1868, 1869, 244, 251, 1888, 1889, 1890, 1891, 262, 
          265, 1913, 1914, 1915, 1916, 275, 278, 1925, 281, 1904, 1905, 1906, 
          161}], 
         Line[{298, 2127, 418, 2148, 2147, 2146, 415, 2142, 2141, 412, 2139, 
          2138, 402, 2130, 2129, 399, 2114, 2113, 388, 2031, 2030, 381, 2090, 
          409}], 
         Line[{306, 2058, 2057, 2056, 406, 2121, 396, 2105, 2104, 2103, 392, 
          2099, 370, 366, 2068, 2067, 2066, 2065, 354, 1969, 1968, 1967, 346, 
          385}], 
         Line[{311, 284, 1943, 1944, 1945, 292, 1949, 1950, 1951, 288, 1955, 
          299, 1976, 319, 1986, 1987, 1988, 323, 2007, 2008, 2009, 335, 2019, 
          339}], 
         Line[{342, 2028, 2027, 2026, 2025, 338, 326, 322, 1985, 1984, 1983, 
          1982, 302, 1963, 1962, 1961, 291, 295, 287, 1942, 1941, 1940, 314}], 
         Line[{347, 1970, 1971, 1972, 307, 315, 1998, 1999, 2000, 2001, 327, 
          331, 2038, 2039, 2040, 355, 2045, 359, 2069, 371, 1992, 1993, 1994, 
          375}], 
         Line[{378, 374, 2078, 2077, 2076, 2075, 362, 2052, 2051, 2050, 358, 
          2044, 334, 2018, 2017, 2016, 330, 2006, 318, 1936, 1935, 1934, 310, 
          350}], 
         Line[{382, 2032, 2033, 2034, 343, 351, 2059, 363, 2079, 2080, 2081, 
          367, 2091, 2092, 2093, 389, 393, 2115, 2116, 2117, 403, 303}], 
         Line[{407, 2085, 2086, 2087, 379, 386, 2106, 2107, 2108, 2109, 397, 
          400, 2131, 2132, 2133, 2134, 410, 413, 2143, 416, 2122, 2123, 2124, 
          296}], 
         Line[{433, 2345, 553, 2366, 2365, 2364, 550, 2360, 2359, 547, 2357, 
          2356, 537, 2348, 2347, 534, 2332, 2331, 523, 2249, 2248, 516, 2308, 
          544}], 
         Line[{441, 2276, 2275, 2274, 541, 2339, 531, 2323, 2322, 2321, 527, 
          2317, 505, 501, 2286, 2285, 2284, 2283, 489, 2187, 2186, 2185, 481, 
          520}], 
         Line[{446, 419, 2161, 2162, 2163, 427, 2167, 2168, 2169, 423, 2173, 
          434, 2194, 454, 2204, 2205, 2206, 458, 2225, 2226, 2227, 470, 2237, 
          474}], 
         Line[{477, 2246, 2245, 2244, 2243, 473, 461, 457, 2203, 2202, 2201, 
          2200, 437, 2181, 2180, 2179, 426, 430, 422, 2160, 2159, 2158, 449}], 
         Line[{482, 2188, 2189, 2190, 442, 450, 2216, 2217, 2218, 2219, 462, 
          466, 2256, 2257, 2258, 490, 2263, 494, 2287, 506, 2210, 2211, 2212, 
          510}], 
         Line[{513, 509, 2296, 2295, 2294, 2293, 497, 2270, 2269, 2268, 493, 
          2262, 469, 2236, 2235, 2234, 465, 2224, 453, 2154, 2153, 2152, 445, 
          485}], 
         Line[{517, 2250, 2251, 2252, 478, 486, 2277, 498, 2297, 2298, 2299, 
          502, 2309, 2310, 2311, 524, 528, 2333, 2334, 2335, 538, 438}], 
         Line[{542, 2303, 2304, 2305, 514, 521, 2324, 2325, 2326, 2327, 532, 
          535, 2349, 2350, 2351, 2352, 545, 548, 2361, 551, 2340, 2341, 2342, 
          431}], 
         Line[{568, 2563, 688, 2584, 2583, 2582, 685, 2578, 2577, 682, 2575, 
          2574, 672, 2566, 2565, 669, 2550, 2549, 658, 2467, 2466, 651, 2526, 
          679}], 
         Line[{576, 2494, 2493, 2492, 676, 2557, 666, 2541, 2540, 2539, 662, 
          2535, 640, 636, 2504, 2503, 2502, 2501, 624, 2405, 2404, 2403, 616, 
          655}], 
         Line[{581, 554, 2379, 2380, 2381, 562, 2385, 2386, 2387, 558, 2391, 
          569, 2412, 589, 2422, 2423, 2424, 593, 2443, 2444, 2445, 605, 2455, 
          609}], 
         Line[{612, 2464, 2463, 2462, 2461, 608, 596, 592, 2421, 2420, 2419, 
          2418, 572, 2399, 2398, 2397, 561, 565, 557, 2378, 2377, 2376, 584}], 
         Line[{617, 2406, 2407, 2408, 577, 585, 2434, 2435, 2436, 2437, 597, 
          601, 2474, 2475, 2476, 625, 2481, 629, 2505, 641, 2428, 2429, 2430, 
          645}], 
         Line[{648, 644, 2514, 2513, 2512, 2511, 632, 2488, 2487, 2486, 628, 
          2480, 604, 2454, 2453, 2452, 600, 2442, 588, 2372, 2371, 2370, 580, 
          620}], 
         Line[{652, 2468, 2469, 2470, 613, 621, 2495, 633, 2515, 2516, 2517, 
          637, 2527, 2528, 2529, 659, 663, 2551, 2552, 2553, 673, 573}], 
         Line[{677, 2521, 2522, 2523, 649, 656, 2542, 2543, 2544, 2545, 667, 
          670, 2567, 2568, 2569, 2570, 680, 683, 2579, 686, 2558, 2559, 2560, 
          566}], 
         Line[{703, 2782, 815, 2803, 2802, 2801, 812, 2797, 2796, 809, 2794, 
          2793, 803, 2785, 2784, 792, 2760, 2759, 789, 2763, 2762, 778, 2698, 
          806}], 
         Line[{711, 2726, 2725, 2724, 800, 2776, 796, 2769, 2768, 2767, 786, 
          2751, 771, 2736, 2735, 2734, 2733, 759, 2623, 2622, 2621, 751, 
          782}], 
         Line[{716, 689, 2597, 2598, 2599, 697, 2603, 2604, 2605, 693, 2609, 
          704, 2630, 724, 2640, 2641, 2642, 728, 2661, 2662, 2663, 740, 2683, 
          744}], 
         Line[{747, 2692, 2691, 2690, 2689, 743, 731, 727, 2639, 2638, 2637, 
          2636, 707, 2617, 2616, 2615, 696, 700, 692, 2596, 2595, 2594, 719}], 
         Line[{752, 2624, 2625, 2626, 712, 720, 2652, 2653, 2654, 2655, 732, 
          2667, 736, 2705, 2706, 2707, 760, 2711, 764, 2646, 2647, 2648, 
          772}], 
         Line[{775, 767, 2720, 2719, 2718, 2717, 763, 739, 2682, 2681, 2680, 
          2679, 2678, 2677, 2676, 735, 2660, 723, 2590, 2589, 2588, 715, 
          755}], 
         Line[{779, 2699, 2700, 2701, 748, 756, 2727, 768, 2737, 2738, 2739, 
          2740, 2741, 2742, 783, 793, 2770, 2771, 2772, 797, 708}], 
         Line[{804, 2693, 2694, 2695, 776, 787, 2752, 2753, 2754, 2755, 790, 
          801, 2786, 2787, 2788, 2789, 807, 810, 2798, 813, 2777, 2778, 2779, 
          701}], 
         Line[{830, 3001, 942, 3022, 3021, 3020, 939, 3016, 3015, 936, 3013, 
          3012, 930, 3004, 3003, 919, 2979, 2978, 916, 2982, 2981, 905, 2917, 
          933}], 
         Line[{838, 2945, 2944, 2943, 927, 2995, 923, 2988, 2987, 2986, 913, 
          2970, 898, 2955, 2954, 2953, 2952, 886, 2842, 2841, 2840, 878, 
          909}], 
         Line[{843, 816, 2816, 2817, 2818, 824, 2822, 2823, 2824, 820, 2828, 
          831, 2849, 851, 2859, 2860, 2861, 855, 2880, 2881, 2882, 867, 2902, 
          871}], 
         Line[{874, 2911, 2910, 2909, 2908, 870, 858, 854, 2858, 2857, 2856, 
          2855, 834, 2836, 2835, 2834, 823, 827, 819, 2815, 2814, 2813, 846}], 
         Line[{879, 2843, 2844, 2845, 839, 847, 2871, 2872, 2873, 2874, 859, 
          2886, 863, 2924, 2925, 2926, 887, 2930, 891, 2865, 2866, 2867, 
          899}], 
         Line[{902, 894, 2939, 2938, 2937, 2936, 890, 866, 2901, 2900, 2899, 
          2898, 2897, 2896, 2895, 862, 2879, 850, 2809, 2808, 2807, 842, 
          882}], 
         Line[{906, 2918, 2919, 2920, 875, 883, 2946, 895, 2956, 2957, 2958, 
          2959, 2960, 2961, 910, 920, 2989, 2990, 2991, 924, 835}], 
         Line[{931, 2912, 2913, 2914, 903, 914, 2971, 2972, 2973, 2974, 917, 
          928, 3005, 3006, 3007, 3008, 934, 937, 3017, 940, 2996, 2997, 2998, 
          828}], 
         Line[{162, 1908, 1907, 282, 1927, 1926, 279, 1922, 276, 1919, 1918, 
          1917, 266, 1910, 263, 1894, 1893, 1892, 252, 1811, 245, 1871, 1870, 
          273}], 
         Line[{169, 1835, 269, 1901, 1900, 259, 1882, 255, 1878, 1877, 1876, 
          233, 1865, 1864, 229, 1843, 1842, 217, 1746, 209, 1818, 1817, 248}], 
         Line[{170, 1837, 1836, 270, 1902, 260, 1884, 1883, 256, 1880, 1879, 
          234, 1866, 230, 1846, 1845, 1844, 218, 1748, 1747, 210, 1819, 249}], 
         Line[{177, 1719, 150, 1728, 1729, 158, 1734, 1735, 154, 1738, 1739, 
          165, 1759, 1760, 185, 1771, 1772, 189, 1792, 1793, 201, 1802, 1803, 
          205}], 
         Line[{178, 1720, 1721, 151, 1730, 159, 1736, 155, 1740, 1741, 1742, 
          166, 1761, 1762, 1763, 186, 1773, 190, 1794, 202, 1804, 1805, 1806, 
          206}], 
         Line[{213, 1755, 1756, 173, 1713, 181, 1784, 1785, 1786, 193, 1795, 
          197, 1823, 1824, 221, 1828, 1829, 225, 1852, 1853, 237, 1777, 1778, 
          241}], 
         Line[{214, 1757, 174, 1714, 1715, 182, 1787, 194, 1796, 1797, 198, 
          1825, 222, 1830, 1831, 226, 1854, 1855, 1856, 238, 1779, 242}], 
         Line[{297, 2126, 2125, 417, 2145, 2144, 414, 2140, 411, 2137, 2136, 
          2135, 401, 2128, 398, 2112, 2111, 2110, 387, 2029, 380, 2089, 2088, 
          408}], 
         Line[{304, 2053, 404, 2119, 2118, 394, 2100, 390, 2096, 2095, 2094, 
          368, 2083, 2082, 364, 2061, 2060, 352, 1964, 344, 2036, 2035, 383}], 
         Line[{305, 2055, 2054, 405, 2120, 395, 2102, 2101, 391, 2098, 2097, 
          369, 2084, 365, 2064, 2063, 2062, 353, 1966, 1965, 345, 2037, 384}], 
         Line[{312, 1937, 285, 1946, 1947, 293, 1952, 1953, 289, 1956, 1957, 
          300, 1977, 1978, 320, 1989, 1990, 324, 2010, 2011, 336, 2020, 2021, 
          340}], 
         Line[{313, 1938, 1939, 286, 1948, 294, 1954, 290, 1958, 1959, 1960, 
          301, 1979, 1980, 1981, 321, 1991, 325, 2012, 337, 2022, 2023, 2024, 
          341}], 
         Line[{348, 1973, 1974, 308, 1931, 316, 2002, 2003, 2004, 328, 2013, 
          332, 2041, 2042, 356, 2046, 2047, 360, 2070, 2071, 372, 1995, 1996, 
          376}], 
         Line[{349, 1975, 309, 1932, 1933, 317, 2005, 329, 2014, 2015, 333, 
          2043, 357, 2048, 2049, 361, 2072, 2073, 2074, 373, 1997, 377}], 
         Line[{432, 2344, 2343, 552, 2363, 2362, 549, 2358, 546, 2355, 2354, 
          2353, 536, 2346, 533, 2330, 2329, 2328, 522, 2247, 515, 2307, 2306, 
          543}], 
         Line[{439, 2271, 539, 2337, 2336, 529, 2318, 525, 2314, 2313, 2312, 
          503, 2301, 2300, 499, 2279, 2278, 487, 2182, 479, 2254, 2253, 518}], 
         Line[{440, 2273, 2272, 540, 2338, 530, 2320, 2319, 526, 2316, 2315, 
          504, 2302, 500, 2282, 2281, 2280, 488, 2184, 2183, 480, 2255, 519}], 
         Line[{447, 2155, 420, 2164, 2165, 428, 2170, 2171, 424, 2174, 2175, 
          435, 2195, 2196, 455, 2207, 2208, 459, 2228, 2229, 471, 2238, 2239, 
          475}], 
         Line[{448, 2156, 2157, 421, 2166, 429, 2172, 425, 2176, 2177, 2178, 
          436, 2197, 2198, 2199, 456, 2209, 460, 2230, 472, 2240, 2241, 2242, 
          476}], 
         Line[{483, 2191, 2192, 443, 2149, 451, 2220, 2221, 2222, 463, 2231, 
          467, 2259, 2260, 491, 2264, 2265, 495, 2288, 2289, 507, 2213, 2214, 
          511}], 
         Line[{484, 2193, 444, 2150, 2151, 452, 2223, 464, 2232, 2233, 468, 
          2261, 492, 2266, 2267, 496, 2290, 2291, 2292, 508, 2215, 512}], 
         Line[{567, 2562, 2561, 687, 2581, 2580, 684, 2576, 681, 2573, 2572, 
          2571, 671, 2564, 668, 2548, 2547, 2546, 657, 2465, 650, 2525, 2524, 
          678}], 
         Line[{574, 2489, 674, 2555, 2554, 664, 2536, 660, 2532, 2531, 2530, 
          638, 2519, 2518, 634, 2497, 2496, 622, 2400, 614, 2472, 2471, 653}], 
         Line[{575, 2491, 2490, 675, 2556, 665, 2538, 2537, 661, 2534, 2533, 
          639, 2520, 635, 2500, 2499, 2498, 623, 2402, 2401, 615, 2473, 654}], 
         Line[{582, 2373, 555, 2382, 2383, 563, 2388, 2389, 559, 2392, 2393, 
          570, 2413, 2414, 590, 2425, 2426, 594, 2446, 2447, 606, 2456, 2457, 
          610}], 
         Line[{583, 2374, 2375, 556, 2384, 564, 2390, 560, 2394, 2395, 2396, 
          571, 2415, 2416, 2417, 591, 2427, 595, 2448, 607, 2458, 2459, 2460, 
          611}], 
         Line[{618, 2409, 2410, 578, 2367, 586, 2438, 2439, 2440, 598, 2449, 
          602, 2477, 2478, 626, 2482, 2483, 630, 2506, 2507, 642, 2431, 2432, 
          646}], 
         Line[{619, 2411, 579, 2368, 2369, 587, 2441, 599, 2450, 2451, 603, 
          2479, 627, 2484, 2485, 631, 2508, 2509, 2510, 643, 2433, 647}], 
         Line[{702, 2781, 2780, 814, 2800, 2799, 811, 2795, 808, 2792, 2791, 
          2790, 802, 2783, 791, 2758, 2757, 2756, 788, 2761, 777, 2697, 2696, 
          805}], 
         Line[{709, 2721, 798, 2774, 2773, 794, 2764, 784, 2747, 2746, 2745, 
          2744, 2743, 769, 2729, 2728, 757, 2618, 749, 2703, 2702, 780}], 
         Line[{710, 2723, 2722, 799, 2775, 795, 2766, 2765, 785, 2750, 2749, 
          2748, 770, 2732, 2731, 2730, 758, 2620, 2619, 750, 2704, 781}], 
         Line[{717, 2591, 690, 2600, 2601, 698, 2606, 2607, 694, 2610, 2611, 
          705, 2631, 2632, 725, 2643, 2644, 729, 2664, 2665, 741, 2684, 2685, 
          745}], 
         Line[{718, 2592, 2593, 691, 2602, 699, 2608, 695, 2612, 2613, 2614, 
          706, 2633, 2634, 2635, 726, 2645, 730, 2666, 742, 2686, 2687, 2688, 
          746}], 
         Line[{753, 2627, 2628, 713, 2585, 721, 2656, 2657, 2658, 733, 2668, 
          2669, 2670, 737, 2708, 2709, 761, 2712, 2713, 765, 2649, 2650, 
          773}], 
         Line[{754, 2629, 714, 2586, 2587, 722, 2659, 734, 2671, 2672, 2673, 
          2674, 2675, 738, 2710, 762, 2714, 2715, 2716, 766, 2651, 774}], 
         Line[{829, 3000, 2999, 941, 3019, 3018, 938, 3014, 935, 3011, 3010, 
          3009, 929, 3002, 918, 2977, 2976, 2975, 915, 2980, 904, 2916, 2915, 
          932}], 
         Line[{836, 2940, 925, 2993, 2992, 921, 2983, 911, 2966, 2965, 2964, 
          2963, 2962, 896, 2948, 2947, 884, 2837, 876, 2922, 2921, 907}], 
         Line[{837, 2942, 2941, 926, 2994, 922, 2985, 2984, 912, 2969, 2968, 
          2967, 897, 2951, 2950, 2949, 885, 2839, 2838, 877, 2923, 908}], 
         Line[{844, 2810, 817, 2819, 2820, 825, 2825, 2826, 821, 2829, 2830, 
          832, 2850, 2851, 852, 2862, 2863, 856, 2883, 2884, 868, 2903, 2904, 
          872}], 
         Line[{845, 2811, 2812, 818, 2821, 826, 2827, 822, 2831, 2832, 2833, 
          833, 2852, 2853, 2854, 853, 2864, 857, 2885, 869, 2905, 2906, 2907, 
          873}], 
         Line[{880, 2846, 2847, 840, 2804, 848, 2875, 2876, 2877, 860, 2887, 
          2888, 2889, 864, 2927, 2928, 888, 2931, 2932, 892, 2868, 2869, 
          900}], 
         Line[{881, 2848, 841, 2805, 2806, 849, 2878, 861, 2890, 2891, 2892, 
          2893, 2894, 865, 2929, 889, 2933, 2934, 2935, 893, 2870, 
          901}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
rrE01DOUucMBl3vjxD659UhZnpyUGUo1YFesH3WADt2yu+8xnl/j76jO645e
lXD8ipCwgM90XmYE/+mkPDI7KY/MRMoj+/hfGrm4XhFcNZqpbautYLHppD2x
n4g3bVz7/KcxKppPLY3VNoM9W2ZrvmL8Sx0tp1OyG8oYeBOQQmUIs6clQgl7
SyPJZyST75+zbPrltz24qQdcke+1QOMrHXSEnofKMuYmdhsD2+0G65Pe9qi2
wDWFiF9R3Rgy7BE8BdlL18U6Y1xQMAQvE/unDCmfHkjKp+uT8ulGtDtk6zcx
I8nBu1rKFQFguAAbEjFOH2oXc7f/NJpQMDv+pNoW7PjOUhHn4FbenzGU3qrI
W+dOE//HS4ipy9hmkdhnSPI9yeSvifeM/FMZiPwW1Koz6cOQZVt31ACRl3fu
Nzk/44fyvWK/3acMQtNbNJn4CTlbH9xIO+SDIop1DvfO+6ITyXVFloT/E2GX
VkTnBOEioJ7OGAK5k+ylyhi/u1XTTOSgEmgJd/VGh/uC6KjR9lsY5xk60GQU
bIHmpc8Y3N7gBAr2L34QdstNWqeVZOt04JGzN4OmC6qKD9vAo+iPPJkWnhD2
xsLn/nPn7AY4vLxNtW3ZBik0M8wS89jIIKdHW+cCH/Wb+z86qIJF4gbfbox3
AL36Z7yOzp7cxJ7UGYHkHGn50vF433s215RJBKNfDSZr6Bd8UYPk2m1Eno5W
Oq5PhjYI1VYs0dtlWqA9t13KXDGeS7KHJ9v+2x7uKxrNvxDzRmcKnY9q9keg
9MQD2bNYvjociGXXMUa3oy0aNdn8kImMrEAR/n7UJ4tvtkEPrCJptQQNLZEi
3c1kQv9PpPoHcbL6B6oiic7Lv+zQSMPluQ2cpnB/X785YVe+8y8kAnjOg1uD
7ppD7TYQaH7Rh5DTuszVH+brBtJPurgkfR0h21tE8DbGoxg/Wz1u0gCD2N85
1b+dYMfXmJwPxLo+zbbp6KZwEO1UWeFT8Aerr7QsxHna1xj4asUzFaLmT8Ya
sYbD5uw155qwPxl6X1vzjfgpkH/Co1wY4IBenn1oROxjHzJE5R24jOHu5sON
rc+MUfstliPEuvPbKGTxZskebJ5FH7olK4Xo6p9WfVr5/+ph4CrZeL3bJ/0z
NnkjtvuPZSWt6NGrF6WtRDzhQwlTofZ1T9T5Lorh/md9VK08YkPgif3a3kxn
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
1FIR3V7BiZRrhehd0bC/Cv7+25rRB+W+MUijt2W4f0s+2nuCvV0S6/+K9L5K
Gtn7KsnVyuJG3J5oousgr+upMsi6aP+ciAtdMPMRWuYKRwbStCbDxyvAZNND
Fyo8vzBylGKuNx7JiVrtHWSpgopyNjtevB5VSO+osJK9o3LPvXzLD+pI6Pts
1Bu7pQAKgpcYh7B9cp+POrfrRzz4SWS//1pYARH9N/LbpjBv00CpZZAKYoeP
f+lJr4XveffzxQf+s35TydbvYvienWK1pmj36baGmxZFUKH2gWYnlo9Szd0d
bzmguLcOF8Ni8uHUBunIccxDis7ueO5NnqjxM7+4aE0OHI6oHrTCPJwlvfei
SPbey/rt3x79STJD7eWXO+RFSpD1szkhKszz2efD6fqaRshdyFji1K0S1CK4
i6IIz+NHw7Vpj3fpIasliloRoVJ08LO/khTGO0j2o0dmPx8uSu2IXjZCuw48
eTTVXY5Ub2V/3Yjnl6b9KEekihbS8VHfZ+dZhazvR9R3Y57HZzyyt8mdQxuo
GhAFXQ266CNh/uoT9udJ79vokb1vU1gURTs9bop2Ob8JDanPBw9Kk61DmAdl
+q1hjJ8d0BDEs15RyoBNUp1bH+LxJmhfSSzR8ER7X5/YlHgwFtBS1aF8vF7y
SO/eINK7N9Wkd2++WEZLS/Y6oeLuh0E7eooR5caDBxYwP2Zq8xIj85aIOtlE
vXThJnLbDhlT2H4aDv+8dttJC8Uy7zh3ja4aZf0/yt48msvnj/un0EKLLIk2
kYokSasaskaEkCzZ9yWy7/u+r9m3kCRrSshQlPaUQgihiBKpiHRf8206n9Oc
u/O7f//OeZ/LZd7Xe2aumdfz8eAKdDo2Sj233b/vX5+4/7kdlc4jAzaASexT
3uiHHPBCh/29K/V9fR/4/vJMWyzgfbCG1eTnRQAX1k4VUN/7gbKSM5+HM8G7
532mEysvgbPijQJo/GnMMjLkTogF50WfX6IXvglqLQ3tdnRMgKX2fWpB5YYg
jKObyWbhOpBNGRntfUO9L7C9kzrxNAR6aUWqCj64BppzV3w2HJoAJ/BzvpF4
zp/n2y8MxVjDxmXMGsskL0LB0QP5fNS4xCF1bdX0RmdYZ3PjzHjJBWhybNkT
VN/eLtgl8m3aC97V4N7Ek+8Hz+97yOn+679+tif6Oe0dXEXX4w8++EQKlCzK
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
ex4z50B2HZ0wFDf7/wBzSaa1
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.18136732083989981`, 0.7388484123529594}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstDefaultMass$$ = 
    20, $CellContext`glConstKDefaults$$ = {0.25, 0.25, 0.25, 0.25, 
    0.25}, $CellContext`glConstKMax$$ = 1, $CellContext`glConstKMin$$ = 
    0.05, $CellContext`glConstLocDefault$$ = {{0.1, 1.3}, {1.9, 
    0.8}}, $CellContext`glConstMinAngleBetweenLatticeVectors$$ = 
    Rational[1, 6] Pi, $CellContext`glConstMinSquaredDistanceFromOrigin$$ = 
    0.1, $CellContext`glConstMMax$$ = 
    30, $CellContext`glConstNeighboringCellIndexes$$ = {{1, 0}, {0, 1}, {1, 
    1}, {1, -1}}, $CellContext`glConstPrimaryDisplaySize$$ = {380, 
    380}, $CellContext`glConstSpringColors$$ = {
     RGBColor[
      Rational[2, 3], 0.33333333333333337`, 0], 
     RGBColor[0, 
      Rational[2, 3], 0], 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
     RGBColor[0, 
      Rational[2, 3], 
      Rational[2, 3]], 
     RGBColor[
      Rational[2, 3], 
      Rational[2, 3], 0]}, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
     RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`glConstTextDisplayOffsetHack$$ = {0.25, 
    0.25}, $CellContext`glConstWindowHalfWidth$$ = 3, $CellContext`k1$$ = 
    0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
    0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$1856, $CellContext`qVec -> #]& , \
$CellContext`meshSize$$ = 4, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 
    1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
    4, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10, 15, 20}, "numberOfMasses" -> 3, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.8200836820083681, 0.1673640167364017}, {0.6778242677824267, 
      0.6485355648535565}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
     "pointsDataTable" -> CompressedData["
1:eJxdnUtsXEd2htsSJdESLVMUJbGpF0mR1Fsi2Xy/urop77jKTtvJDCdZJYA3
2Q2XWXgRBHkMM0kwi8DIcgBuJsAA7EU2zigveKXVGDBAwICBsSHDI8WOHLnP
953JvQSE6+6+99TrVNVfdb5bnvzBn/zBjwYajcbJN/+23vx7+82/E2/+7fX/
bvUa3//1nvQWWt//3ewdfP/39ElcD670+l+/2In7GsO9Z9//fbDT+/f+fzR6
fTOzO72/79//0VHY62Lvm3bY6/Z+3b9/qIS9DvYul7DXiXRat3p/9/39zSeR
zrMb8f3hDr9fiXR3d3pL/c/vRvrH3d5bYTDs7nd7v+wn/C9HYa/b+7e+vW/b
Ya/T+9v+7++UsNcJO3uXS9gr5O9WpPv+Dr/fiHwN7ZC/y/H9h93ej/v/cb73
3fd/7W7vj/qfXx/1k3lueX/5q7DX6f0wfm+HPT+fj/Q/LNovYa9Q31Ncu73X
/R+uk6+u+SedLu33DtdO7z+i/EdRj53en0f9tMNewd537bBTevNRvyXsFeu/
LPavbexORblnu72f9j9fx5+yfaM9n3bI9xD+VHph55uj/vcflN5fhf+0w57l
b5R+u+63yd+7pd/uh9th9+BK6dfz8Rbln6L9O/jf9chns0N+L+FPBX8ZinR2
C/ZeRX6etXn+43aUw/K+Ff7b2ia94RLtvkV5x0rY2aS+psLuc8tzDX+yPi9F
vQwV/Pkc/t3unejbe3kU5d/u/WU4Urtfb4dbvR/10z0R6R9vYn+4/Kxf3k3y
N1b67b67Qf6mSLfw+7Ve//6DNs+P4ifb+PNZ6mkbf/76KNptq/c//fb4TbTX
3ib1dZLyb/D5QvSvZ+vYH4v2bKzjD5P093b0m++uUn7rdzTS39+i/t8Ovznc
JJ9fHUX5N/DXT9thbwN7J+nf6zx/AX9aox6a4c+Hq/w+Sb628OerlN/2HcVv
N7lvkHra4PsXMd4crNM+x/SvNco/QH9aI38X8KdV/K+JP61Q/kn82fq9iv9u
kN+Lkf7xOvkbpD7Xsfdl+PPuGvd/Fv68b3lPRfqHpjeCPy1jbzzas7lMfU1y
3aA845R/ne8vkq71e4Z6WsXeFzE/NFaZDz6P8bhl+qdj/Ntbxv5IiXwu8fs4
/rSIvUnKv0Z9j4c/N63vkfCT3VXyeRp/WiFfn4c/Hy7THr8Nfz5eMv+U388X
8adFnh/Hn1p8nqD8q9hr8n3WL/60wn2n8Jtl+uFn4c97S/jfl+HPB4vYO0P5
W7Y//alF/q4yPi/w+wT9aQV7Tcpv+47Qn5bI5wD1uUh9HTN/LuJ/L8Kfd1vU
72D48/6C/QN/mqd8V/GnOco/wX3L2GuS7yX7J+navgPYsXyfMj4vkP5XjM+W
923607zjB/1pDnvXqJ/H2JugPy06PlF+07tAf/LzSepzgXb8JPx53/S+Rl/M
4Y9nQ988e+z4Sv4eOf4yXj4gfxOUv8XzY/iF5R1m3JvnvhPkw/p+zvhseV+2
4/5H5P9czJ+th84/MV8c3Kf9r5WYd+5h7yblX8D/1F+Wdxh/muP+t5gnHveW
+/Y/Por0H+J/r2L+aj3A3jnSv+f8jD/fJX/XY37fu536NPI5h70rlN/yDlMv
j1KfRvoPUp9G+vdTn0a+71K/Q6R/B3uX8Z9Zync95tNn06lP477H2LtC+tbv
u+TjPvc16O/3yD/69OAO9r7Fn2+r30h/JvVp2EO3N27gz1OpT6O+HqQ+jfze
S30a99/l/tdHUf+3zV8jyj/r78zv03w+T/mnUp+GvUnTx79vmj/Sv4s/Xyb9
O6lPo/yzqU8j/Rnrh/Qtb6OoG6hf0p9IfYrfUO83YnxqjKc+jftv43+XSH8m
9WncP536NNKf4vmP2o7zUf5G+RH1/h36NNK/6vqp2G+oF8aD0dSnkf409i/h
z7dSn0b6k6lPf0a/VJ/G79dSn0a+m6lPw47rgjHqb8T+zf3vpj6N+6awf4n0
rd9zpHPd8eUo0hl3/GE+v0L6J6j/Uep3mPSHU58uYJfxj/oZSH1KO6Y+ZV5J
ffpjxknGX9Y3l7D3Cf1pxPGb8fYdx3fKfyb1Ke3q/EB+vzpSn6LT8OdR0r+c
+jSeu5j61HEpvkefvrkvvh8g/ZPYvcB4+IpyNMnvZ9TzBPX5i18dVOphFP+7
mPOW+rSBH1X16Snq6xj/ec28OlDUjdQb+fs41rFv9OkJ6jU+Z/201aeME/jz
RdIfzKvzhOn8mHajnMwPn5LeqWK/C7sjlP8L2nWc8ehb+2WxHNGO49Yz/nyR
ddY31O8Z2ulz2ve3Rz9nXEYftq2nuJ4m/ZekN1L0c/oB+UEXNSbtX/6e7fCM
fhjpPad9T1Nvz9voY/L5ol0td4Nx5kwxX/gd6Q9Z/qJfxe+T1M9oUZ/+BeNs
+PMI+ySf076n8Cf2cd74oX5L+1EvZynvIPPVML9fzCvjIumzz7I3yfg0js5v
4s9ft1kf6S+2q37EuHt8FPPdeer5Bf48wv2DpH/JcYjvx0jvKulf47PtdbOo
T/+u4ocX7E9Fv3IcoX/jz6PZL9ynYHworhu8L9J3nlIP6seT2J2iPcdIf5j8
Xch1CeOb41GJ/ZLfHLmuZHxsq/Oq7TaRfmE9MP5i9xb3mY9pfh/Dny/xvfpr
zH6Bfr1a/gY/D/+0vC/b9pNI5xzlnyraje+nsX+NfM5kvUQ6t3OetR+Gfww7
X1Gut1yHlEeMa/HcJOm+ws8tL/uVrZn0o8jHrDqD9O9wneK5e6R3JedZ9IHr
+qI+jftvFfa/GPemKf83zKez3D/E9Tbp2I/uFssZ39/PemR9UdSn5pP9PdKf
5rmGeqgwLjD+3CZdx9k7pKc+vVf0uzDzgOsN0n/I87brY+pRXTJDe52nvWYp
12vSv4O9n2/Gc3f9nfHnPp/Pc9/DHGfC3iN+Jz/NuWK9xzAyx+/sVx7ctnz0
r7vk91vmhXvln6N+SN/yNrg+wj/epfyPKfcVPs9h7wb1Np/9LK4LRX3KeqGw
f+56gvZUnz4s/xT+Q396rH+xX2F5GZeb88VxKda7pn+T9fsC+aIf7Leoj0uu
p8jfOddb9h/0+1xh/Ye/zBXH8bjO5zwR1wXyN0Y9md5NxsdFnrvl/k9Rn0b9
P8af0ZH7c4x/v4t5dne+/GOMP9G/m5aPeft4QV1K+VvFcSzsLZI/xsndJddh
kc/mcur6uG8efz5Le807/tK/FyjXJ/hPy/Gb6yLXC6S7lPNWXJf4fYJ6Wi72
47C3wnXU/QrnH/bDW+T3q9Adxy32BT5l/8Lysl+5v5Q6Iuwtu87An0xvAn9a
yXE77K0W9Sn7Ofiz+6e25wv6+1L548gY/rycui6ulneEfK2U6v7pKuWdIB9r
fO84t87v7p8ukr8z7ActMd+jg/eX0eWfsf9leqco/2pRd4S9VdIZZ395jfqe
YL9wneenqc+Noj6N/C7jz2fQ9cvlf9GnYWel/Gf/qk4zffdP11znUf51fh8n
XxtcnYc2uE5TL5vkd4T+tII/n8afVov6NKp9DXtfhD8fr6U+jfpcT30a9jZS
B4W9zdSnYW8LezP0zy3KNeJ+Mu1zivlirUQ8z3WS9fsl86flVZdvpi4Ne5v4
81W+30p9GvW2nTogru1S0afNderD/dP18oeR8fDnw43Up1H+zdSnUX7LO4o/
bZfq/ul26rKw13ZfKJ4rJfUp8QjGv5P402Z5HP0b/b7FOuErxuct0nub63bq
07i2yR/6tFlSn4Y/l6JuiPyW1KfEa/Dnk8ZzytfoU+I97PN9TfzG8p3FXpv8
Uj9PC79fi/R7hfxNxfezndSJ/ec+6KQ+jfu28ecT+NN26tOoZ8v7Ev8pNX1a
Up/GfaZ3jXx1Up/G9x3um+W5Lv7Ffu5um/Z7Kz4PldSn/fvft35ftfvj0HPL
y35l6aQ+7af/YYd02K8c6qY+DXtd8jcb49rzburTaI+CP7NfeVjKB337HxEP
6KQ+jfa0/EO0l+Vlv3K3W9w/DXtd/Bl92txxnxV/2kl9Gt2mlG8jg0fEk8uf
9Z//F3iDTu4DEI92nyfS/6Cb+jTsdckfevDpTurTsLfD87P405PUp/F9p/yg
//k1ekd7/7oZ6XTx59fsv5u+69Qd8nuZdCz/DXTBE+zd4vsn5G+W556kPo3+
3y3wDaEHP+ymPo348g72GrT/TlWfPt9JfRp3mR769MMnqU/D3nvYu4299/Cv
6cjPvvzIBHrDz83kOeL5EeLv8iQDyXMYfwp73Yw/hRl5kkHGQ3mD0ejnu/Ik
08Tf5TcmkueI34nPDe24/5Y8R7TDgPXbW2H8DHsd9km+ivHhfXkS1vdD8iSj
yXNE/qZJ1/TdR+5m/Cme6+Y+Xrh9p+c+YdRjp3eyb++T5Dl+yPgZdgqfz9Iu
8gfu+7R7xhHoH/AVN+F55EnYb+h1Mv50EP0v40/0zx76OnkO9Hebbk18/lzy
HC3GzxgPtinXLebPDvtgxBH2bd8x5lvrdzh5DvcVGb8y/hQ6qZ3xp2hXeRLj
YfIkl+i38iTEHUqnykc9L1U+6n3bFz5qSF6nkTxHhY/a3874U+R/K/koeQ7H
zyivPAl81IHteSN5jrheSZ5DPor5LfkoeQ75KHkO+Sh5DvmosLeR8acYf+QN
bK92xp8i/t6uxp925UnOJ88hHyXPEfZ++St5DvkoeQ75KHkO7CfPIR+FfqHf
GAeyPS8nz+H4Kc9h/EmeQz5KnkM+Sp5DPirsyTvIR8lXwGvtbmX8KfKb7cv8
upHxJ3kO40/yHPJR8hxRfvYb9leTjwp/ki9wfb9c5aMamxl/inzLkxjvsX2H
kueo8lGrNT7K8spHyTu4vpc3kI+Sp4BHOlzP+JM8B+MD/d3P8lHyJC/pTys9
9Bv9yfK6vl9KPirmD3mSseQ5wh482548iXzUao2PWqnxUZZXPmqZ9pCPsrzG
nxZz31iew/W9PEeVj1qt8VGmJx+13DOuJM9R5aMWa3zUYo2PkieRj1qo8VHz
NT5qucZH2b7yUfIkub6vxZ9aNT5KvkE+Sp7E9at8g+t7eRL5qKUaH7VY46Na
2JOPatX4KPkR+SjLKx9leiOMf4+xx/q+JV9hXFqeRD5KfsT9D+tXPmoee/JR
8zU+Sp7kNOuYR8lHxe8Pc9877MsbyEct1Pgo61s+Sp5EPmou+Sh5DuJjbXkO
8s/8+SDjEPIcru8jXni3xkfN1/iorN/kOYxTRvqPko+S55CPkudg/4b079b4
qDvJR4W92RofNZd8VOTX9h1JnkN9GunfT30qz6E+rfIcg6QvX+F6eib5qLB3
q8ZHPUo+Ku5/kHwU+8/cN5A8R5QPfXpwu8ZHWd633QdLfeq8GffJR02mPo36
up/6VJ6D8St5DsY32mkWe58kz8H4mDxHfD5L+SdTn8pzxO/Gn+QNJkj/TvJR
8hzx/HDyHFU+ajr5KHmOsPcyeY5I55zrsNSn+E3yUfHcWOrTSH82+Sh5jsi/
+w23Up/Kc1Tj6jdTnzrvsL9O+s3ko4wLUC+5T6c+ZZ+8xkdZXuNzE6lPo72u
pz5lnzD1KevCGh/lPrc8kvXO+v7NPB33y0dNJh8lzxH5f5dyXeW+Rq475KNo
hxofNZJ8lDxHPHeZfacz2LuRPMce7Uo7pj6V51CfynPE/caf5Bj8k195nTxH
fHZ9fzL1aeTzFfuSxsM+O1KfotOSj5LnoHzZz9Snkf5Q8lGOk2SMfXPz/S7j
4Zd8Vp9+fOT6/lt0ygF+wD528lGUq8ZHDVb1afIc8PtvdJDxJ3kO9peS54j0
ruBPXzDP3cw4o/qUcSL5KMc962Gpko9XR/IclLMtzxHpvcV6WJ5juDgO0K8z
LmTc1n3aZ/iNfmr8KdI3bnGOfvScdnp5JM9R5aNekP6JYrsZf4rv3ccfS56D
8S/jMIyPjM/HxAVGe/v4hfUW38uxyEd9Q3nlowYy/sRzGX8yTsf4X+M55AZ4
T+WNPo16+bQtHxXXr2nvt5PnYH6ingb1k7b9yHwZV7HcrtMZFzMuFs9N1HgO
+ajX7Wr86ZTtqh9l/GmxUm75KOdJuRf2yRpyJsmvJM8Rn22viaI+dZ+9ykfp
h4Opo6p8lPuEn7XVwQeVclzLetJP4qoeNM5jPOxWjY8aqcWfrN8zyXOg/47U
LfJRjiP6bdgzPfl9OY3xjAt6X+RjpsZHXcl5zbgV9p2vMv7EfIY9+aipjD8Z
N16kXuP7meSj3FeN7+Ve7iQfRT8r8lEHjAvUf/Icxp/iObmLL/F7yzuY++72
o8jH7eSjwp58wyTP3U8+ynY0/hT3GWdwXJxOPiqem8n4U6RzO8c1eY54jv3K
PfmVq3z/IP1InkN9GvffqvFRM/Zf+V7u/zR5DvmouMqvqE/vZ/wp7DzkKh/1
KONP8hyMT6Q/m/GnsGv9Gg+7m3xUPHcv+ai4PqjxUaYnH/U4+Sh5Dv0uvjfe
z37lwZ2MP0X6pmf86X7Gn+J7y/syeQ7ml+Q5jD/Jczz7/+NA8hxTyXOoT1kv
JR8V6T9IPkqew/hTpC+/8Sp5jvh+KHmOSvxpbyH5qLjKU0zx3GLyUawnM/4U
9yW/4no0+ago/3zGn6L88hvun8qTwKcfypNcZ39DnmQqeQ71aWR3rsZHzeMv
3+Ev84X9weQ5jD9F+5neO8lzVPmoJa43kucw/hTPyZPAR+3PZ/xJniPS4f3S
Zgt7P9+Mbt9KPiraf7HKR+0v5bwtzxG/M281V7AnHyXfcRl/kSfx/VJ5km/x
38WMP0X5La981HLGn+Q5qnzUSo2PWq3xUWu5DmI/K/koeQ75qCj/UpWP2pcn
kY+yvPJRqzU+yvTlo+RJ5KPkSdw/XUo+Kp5bZnx8RX9aqfFR8iTyUaupu9iP
JH/yUaYnH7VR46M2ko+K/C4nH9XP1k9WanzUao2PWksdHO0vTyIfJU8iHyVf
IR8l3yAftVXjo1ZrfNRqjY9aq/FR66lP47pR46NMTz5KnkQ+Sr5CPmq7xket
0T7yUes1Pmq9xkdZXvmozdSn8hxVPmo79ak8R+RPPqpd46PWa3zURo2P2qzx
UVs1PsryqpvlSdw/bVf1aVOeAp2yX1KfEo/BX+SjNmt81Fb5h/5n+SjTk49q
pz6V54j8jSfPoa6R55CPkudQnxKvSj6KeFb5Bn0qz/Hf/evn6GXTP027FMZr
68fy8z5nQ35B/ke+YZrnOqlPo/zbNT6qnfo04sHyGqxz3y9Vffq8pD6NUdL0
xpPniPvR1UNd7M0kzxH+xX7us3byUbG/W1KfynOoT2M/2PKyX7kvT3IxeQ75
qLDXTX0qzxH5m+H9853Up8SDk4/q3/+iJB8lz6E+jfa3/LxPMGt5R5PncB0S
9uRJJpPnkI8KezupTyOfneSj5DmqfFQ3+Sh5Dtdtka9u6tOwJ1+hHpQnUb8/
qfJRe09Sn8ITVPmo0k0+Sp5DPip4Hst3NnmOCh/13N/ho4o8yVTyHBU+aui9
Kh+1300+Ktq/m/o0/NvyvuQ8gp3Up9Hfn1T5qH3TU58+SX0a9uRJ4KMO33Pd
yPgnP+I+8BOu7t/t4PdDNb6C8yWedfP9PdqzGj9tdDN+ij/k+3v4S8ZP8Sf3
X3v4m/wA/t0ljjCUfIXvdeHPvQf95z/W38kf8//TDvsmw/h3cX+5yFdQf+gf
+RnOlziUH+F8id1uz33Z6HYdxk3jpx3iy+xTJV9xgvlJ3oD393aL++/4TZv2
mOoxHmX8lPGK/PG+3IfaP9tjvPO9H/ia0nNfEv4tz5dgPM3zJeDnqudL7G/z
eRK/6GT8lPE891kZ7zN+Kl/B+pT9oJL7WrG/Z3kHiudlhL9cIN61nfHT0A3y
BsTjZvUv9r178iO83/i0kO9B2ktehvhpU97i2Pm2Gj/d38rzJeQrIj3m/2N5
jknWV/oT+1NNeZqL7C96Honv72333FeOfG4Rf/+sLV/B/FPkK9g/YRzzfI4m
+9OeH0Fc5FA+aTzSP7Y+LxK/3O753ma0/xbt+MWRfIXvsclXRHlPF/mKqC/m
/6bndfD+3u4a7UF77Xkeie+5bpE/51vPWyF+2pAncR96g/GF8yX21vEn96fW
fD8Rf5I3UI/4mfhpcyvjp5Hfzdy3j/JvZPw0yu95IJwvcex5IJwv0bS88sjy
HPLaKxk/9byM+N04kvxIEzueN8P5Ei3reyD5CvyX/cRV/dv1UPV8icaK77cW
+Qr6T5GvCHvET/f1pybll1+Bjz6WHxlIvsI4hXxFpP+V68Xq+RKHS77/y/pI
ngJ+vCnfMYFdeZ0x+pPlvUA/Wkm+L9pfnsL4qTzL1235CsbPIl8R9pn/D1q5
bxn25Ck4X+JYfkSezvNQ5JGTn8GfljKuEfVpeX/Xlq/gPe4iX8H6k/4kb4Ae
Sb7CeOVyxk8jv0v4CedLNJYyfhrllyf5+Ei+Iuy9astXRHl9X8705LXnM37q
eRnxmfMldj2P5Ar+JB80jD95/kkj+Qr0BeOzfMc3jM/zGT8Ne3PG12i/x/me
YuRX3sD4qf7k/l2r53v77LdhDz76YL5XfY95LuOncdtj8vsOOu+R8Ufmc8/n
cP9O3uEG5bc9LzM+ex7IecZneZLXMT/sej6H50s8zvipfAXPF/kK7Bf5ivj9
BvPFHfziBumYvnpQfuQd+tdj6tPzJR7le8/yFdRfW74i/NfzJe4avy5VvkJe
ezb1KfvRGT+N9B+lPo1aeJj6lP3u2vkSd1Ofxn2eR+J71bOpT+P7Gf3XfanU
p3Hfw+T74n7Pmxmi3jx/Rb7vjv3LeEHG7eI+eQ7jVtOpT+P7qYyTyFeoT6O+
7qc+jfzeTX0a93k+x++O5CuMn1b5ihOkf8vxq8hXqE+J42LvZsZNf1y5yut4
TsVs6tPI50xVnx54HonxU89VM34qT2K88nrq0/h93PnBfc8q3/fM+h2tcuzu
T8mVZvxUXudT+G/HjYEipxfPGTceky+qvUdpHG0k9WnYvZXnSxAHSn3qvBL3
vUAPXkt9Kl8R+RpA//ner+dLXEx96jhr3PRnlDvsX03dEVfjp5Z3MLm7+P3L
I/kK46fWq/tTxHuT7/PcFfVp2DmVcTfGrSP1aaR7LfVplH8s9anrQvQf++O+
x/Z5W+4kvj9N+oPqS/eFU5/u4Ye0e/IV+hXvlSTfp47HfnJJ6lM51rD3Rdv3
HqI8Z9in9ryMi+W/eI56Ls4z8ftk+SHtHvbGU3dVyz2U+lTuUH0qp+7+lNwo
7VvUIbR/ka8gvp77SJGe+y+NWvx00PVRcmL4Z567iP8eyVfg323njbhfLuRz
yut+kOdlGD+VGzC+LF/RTK6H/kn6cqADzOMfHRk/dR1q/BR/kEPKOAJ+Xqw3
9Sn+lvtT+j3756TveyUXcp+C9XeuG1ifU0/O4+bjVC1+qg6T77uA7rhWy6dx
8ys5Tv2Ufhv1PJyc3B7t5riLHxxZD2HP+OmwXFqNA7hkXCvjp+6Tx+9T6JHf
c3/GjexH9hP7KbqjzEW95Tk6xk+r7w0OJecT9Xop9zXhn4rnZcR9U8V+f8C4
1qJc7F/lPk1cPV9iVO7qyDib8VPGDe43nus5Ep5/ZhzF720nr8blruS6Gv3U
04761LiI50vs4QdyX8zXcn25z2w7hb1bRX1qnMD4aeTD8zJ+f+5VPO/5Z1fx
v9f0b88j+cWm47zckHFrnmd8Nj25HM+v8Dy225lP+Qry73sXtMc7qQN+zThg
v/wF40w853kk7lfKc7hfKb/ifqW8gfHluxk/la+gXdx3sf171XpUn04zznu+
hPXbUA+Xaj+T52C/8tk9/EF9+iDjp+jxjJ8aN+T9rJ77+PG750vczvipfIXj
nudl0D9dT9h/SfdhLX76uBo/3Z1zfCB9eRLPKZMP+h3jzV3nJfSy55GcKPIV
VX36KPt92Jsr6lP5ikr89GDe8RP9LB90lvHmHv7n+ycP8pwu1pNyqa43q/HT
fdPzfRj5EeOD8hTET4/lD0ZZ39zP+Gmk8xB//go9+Ij2+tT3GbDn+x7yI74P
Y/qef2Z66q8W5ZlOvoJxDh7zEf48yPxqeeH7DufQoce+71GNn+5aXvcH5Tnc
P/Uz+v1QvsP46VKeLxH5navGT1vzxOO+PIp2n8d/nOcWMn4adlo5T8fV8srT
yXOo35dzXAx78hbwfYfzVU56f6GoT/u377boN5wv0ZQfOe1+V/J9YW8p+b6w
5/kcjCu7Kxk/DXurPk9/snynmT9avM/M+RIHi8kJx31LnttHubJ8pGt68n2e
RyK/5vkccodrGT+N9l/M+Gm0/xLxL86XOF6Sq/Z9M+x5Hq48h+cFy4+4P7hW
ndeO1yjPTPIV+B/9e6l2LuKyOhudtlI9X6Jh/cr3WV73B9eS72M/OuOn7Fdn
/DSe2+R3dPzxcsZP+350uILegfP+yWrGT6P91zJ+Gu2/nrov7Fle3vc49HwQ
9HvyFXCbu1uOX/Sn1aI+DTtrcu2sU+RZ5JBN3/ejTU/9vpl8X9iTp/D8M3kL
56Vtx3f60xrtw7pidx1+jXVLcwN/fsl5KRupT6P88ivGT00PnbQrP+L5CfIU
nJt13E59Gs+t5/kSUY8bBV2P/tr03EnGZ8srd76d+lS+Iu5Tf5meukGeQc61
pD6N/G7Sv3kv43gTnu4jeK0t4mZw6vvbycHLV0S+LhsPTH1KvLCqT5/Ld8zG
c6WT+jS+34IfUZ9ulz/tP8/5Eo025+14/lk79Snx0OT7Iv/yHp43Js8wRXt2
UrfJV0T9nWd83oaPeE181vL+YpNipD6Vr+D5SP+FPA3vnzzVPjq3J+8B3zfb
TQ66yle8g94o5aMoP3qwpD6N5yyv73t0avpUfsX9StOT7+umPpWviPtu53kZ
0e/g+z4s8BrE94c68IYfeR4D/oI+fW552a8s3dSn/eQ/NH3019AO9cW65v2d
1PXyFerT6N+d8tfRf/DfTtmM/uV5FalPoz3lR3jf49jyEk/f3Ul9GvZ2Up+G
vSc8j+7ef5L6NNq/gz+jT5924R+fR3/qyZPw/4+YlVchvv+B/MgY/iTvgR58
Ks/BuqQn33Ibe54Hcpb9gi7+7L7VTurTuG8n9WnYlSfxXE3Tc50sP6LekR+R
73uP++Xc3yv/B3CLMXs=
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {10, 15, 
    20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
    0.375, $CellContext`tabNumber$$ = 3, $CellContext`tau$$ = 
    0.00302886962890625, $CellContext`tick$$ = True, $CellContext`u$$ = {{0.1,
     1.3}, {1.9, 0.8}, {0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period:"]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open"]}, 
                ImageSize -> {200, 60}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Text[
                Text["Angular frequency \[Omega](q), selection:"]], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["mesh size "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`meshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax$$]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax$$]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin$$], 
                Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tau$$], 0}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`meshSize$$], 8}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`glConstMinSquaredDistanceFromOrigin$$], 0.1}, 0}, {{
       Hold[$CellContext`glConstMinAngleBetweenLatticeVectors$$], 
       Rational[1, 6] Pi}, 0}, {{
       Hold[$CellContext`glConstLocDefault$$], {{0.1, 1.3}, {1.9, 0.8}}}, 
      0}, {{
       Hold[$CellContext`glConstDefaultMass$$], 20}, 0}, {{
       Hold[$CellContext`glConstKDefaults$$], {0.25, 0.25, 0.25, 0.25, 0.25}},
       0}, {{
       Hold[$CellContext`glConstKMin$$], 0.05}, 0}, {{
       Hold[$CellContext`glConstKMax$$], 1}, 0}, {{
       Hold[$CellContext`glConstMMax$$], 30}, 0}, {{
       Hold[$CellContext`glConstWindowHalfWidth$$], 3}, 0}, {{
       Hold[$CellContext`glConstSpringColors$$], {
        RGBColor[
         Rational[2, 3], 0.33333333333333337`, 0], 
        RGBColor[0, 
         Rational[2, 3], 0], 
        RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
        RGBColor[0, 
         Rational[2, 3], 
         Rational[2, 3]], 
        RGBColor[
         Rational[2, 3], 
         Rational[2, 3], 0]}}, 0}, {{
       Hold[$CellContext`glConstPrimaryDisplaySize$$], {380, 380}}, 0}, {{
       Hold[$CellContext`glConstTextDisplayOffsetHack$$], {0.25, 0.25}}, 0}, {{
       Hold[$CellContext`glConstNeighboringCellIndexes$$], {{1, 0}, {0, 1}, {
       1, 1}, {1, -1}}}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstDefaultMass$$ = 
        20, $CellContext`glConstKDefaults$$ = {0.25, 0.25, 0.25, 0.25, 
         0.25}, $CellContext`glConstKMax$$ = 1, $CellContext`glConstKMin$$ = 
        0.05, $CellContext`glConstLocDefault$$ = {{0.1, 1.3}, {1.9, 
         0.8}}, $CellContext`glConstMinAngleBetweenLatticeVectors$$ = 
        Rational[1, 6] Pi, $CellContext`glConstMinSquaredDistanceFromOrigin$$ = 
        0.1, $CellContext`glConstMMax$$ = 
        30, $CellContext`glConstNeighboringCellIndexes$$ = {{1, 0}, {0, 1}, {
         1, 1}, {1, -1}}, $CellContext`glConstPrimaryDisplaySize$$ = {380, 
         380}, $CellContext`glConstSpringColors$$ = {
          RGBColor[
           Rational[2, 3], 0.33333333333333337`, 0], 
          RGBColor[0, 
           Rational[2, 3], 0], 
          RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
          RGBColor[0, 
           Rational[2, 3], 
           Rational[2, 3]], 
          RGBColor[
           Rational[2, 3], 
           Rational[2, 3], 
           0]}, $CellContext`glConstSpringColorsByN$$ = {}, \
$CellContext`glConstTextDisplayOffsetHack$$ = {0.25, 
         0.25}, $CellContext`glConstWindowHalfWidth$$ = 3, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`meshSize$$ = 
        8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
         1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tau$$ = 
        0, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ($CellContext`tick$$; Dynamic[
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`bRefreshDynPlot$$ = 
             False, Null]; $CellContext`dynPlot$$[$CellContext`tau$$], 
          
          If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
             Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
           LocatorPane[
            Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                  Dimensions[#]] < 3, 
                
                Flatten[{$CellContext`glConstLocDefault$$, \
$CellContext`mLocDefault$$}, 1], 
                If[First[
                   Dimensions[#]] > 7, 
                 Take[#, 7], #]]; 
             Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                First[
                  Dimensions[$CellContext`rawArrayOfMasses$$]]; 
               If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                   $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                 
                 While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass$$]; 
                  Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                  Part[
                   Part[$CellContext`kArray$$, All, 1], All, 1]]; 
               If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                 Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                 
                 While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                  Part[$CellContext`u$$, 1], 
                  
                  Part[$CellContext`u$$, 
                   1]] < $CellContext`glConstMinSquaredDistanceFromOrigin$$, 
                Part[$CellContext`glConstLocDefault$$, 1], 
                Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                  Part[$CellContext`u$$, 2], 
                  
                  Part[$CellContext`u$$, 
                   2]] < $CellContext`glConstMinSquaredDistanceFromOrigin$$, 
                Part[$CellContext`glConstLocDefault$$, 2], 
                Part[$CellContext`u$$, 2]]; {
                Part[$CellContext`u$$, 1], 
                
                Part[$CellContext`u$$, 
                 2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors$$]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
              If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
              If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
              If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
              ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
               2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
              True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
            $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
            LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period:"]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open"]}, 
                 ImageSize -> {200, 60}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Text[
                 Text["Angular frequency \[Omega](q), selection:"]], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["mesh size "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`meshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax$$]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax$$]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin$$], 
                    Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin$$, \
$CellContext`glConstKMin$$, $CellContext`glConstKMax$$]; \
$CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin$$], 
                 Dynamic[$CellContext`glConstKMax$$]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tau$$, 0}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`meshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`glConstMinSquaredDistanceFromOrigin$$, 0.1}, 0,
          ControlType -> 
         None}, {{$CellContext`glConstMinAngleBetweenLatticeVectors$$, 
          Rational[1, 6] Pi}, 0, ControlType -> 
         None}, {{$CellContext`glConstLocDefault$$, {{0.1, 1.3}, {1.9, 0.8}}},
          0, ControlType -> None}, {{$CellContext`glConstDefaultMass$$, 20}, 
         0, ControlType -> 
         None}, {{$CellContext`glConstKDefaults$$, {0.25, 0.25, 0.25, 0.25, 
          0.25}}, 0, ControlType -> 
         None}, {{$CellContext`glConstKMin$$, 0.05}, 0, ControlType -> 
         None}, {{$CellContext`glConstKMax$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`glConstMMax$$, 30}, 0, ControlType -> 
         None}, {{$CellContext`glConstWindowHalfWidth$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`glConstSpringColors$$, {
           RGBColor[
            Rational[2, 3], 0.33333333333333337`, 0], 
           RGBColor[0, 
            Rational[2, 3], 0], 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
           RGBColor[0, 
            Rational[2, 3], 
            Rational[2, 3]], 
           RGBColor[
            Rational[2, 3], 
            Rational[2, 3], 0]}}, 0, ControlType -> 
         None}, {{$CellContext`glConstPrimaryDisplaySize$$, {380, 380}}, 0, 
         ControlType -> 
         None}, {{$CellContext`glConstTextDisplayOffsetHack$$, {0.25, 0.25}}, 
         0, ControlType -> 
         None}, {{$CellContext`glConstNeighboringCellIndexes$$, {{1, 0}, {0, 
          1}, {1, 1}, {1, -1}}}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{915., {292., 299.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({{$CellContext`dynamicsMatrix[
           Pattern[$CellContext`ld, 
            Blank[List]], 
           Pattern[$CellContext`cd, 
            Blank[List]]] := 
         Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
              Sort[
               Flatten[$CellContext`cd, 2]], 
              First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
            ReplaceAll[{
              "latticeBasis", "mScalarArray", 
               "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
            Partition[
              IdentityMatrix[2 $CellContext`numberOfMasses], 
              2]; $CellContext`res = Partition[
              Flatten[
               Table[
                Total[
                 Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                   
                   Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                  
                  Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
              2 $CellContext`numberOfMasses]; 
           ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
            Pattern[$CellContext`k, 
             Blank[Integer]], 
            Pattern[$CellContext`j, 
             Blank[Integer]], 
            Pattern[$CellContext`mVec, 
             Blank[List]], 
            Pattern[$CellContext`kS, 
             Blank[]], 
            Blank[], 
            Blank[], 
            Blank[], 
            Pattern[$CellContext`proj, 
             Blank[List]]}, 
           Pattern[$CellContext`r, 
            Blank[List]], 
           Pattern[$CellContext`mk, 
            Blank[]], 
           Pattern[$CellContext`epsilon, 
            Blank[List]], 
           Pattern[$CellContext`mA, 
            Blank[List]]] := $CellContext`kS 
          Dot[$CellContext`proj, 
            Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
            Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
                 Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
             Sqrt[$CellContext`mk 
              Part[$CellContext`mA, $CellContext`j]])], \
$CellContext`calcDynamics[
           Pattern[$CellContext`mAtQ, 
            Blank[List]]] := Map[{
            Sqrt[
             Part[#, 1]], 
            Part[#, 2]}& , 
           Transpose[
            Eigensystem[$CellContext`mAtQ]]], $CellContext`showDynamics[
           Pattern[$CellContext`ld$, 
            Blank[List]], 
           Pattern[$CellContext`dynAtOmegaIndex$, 
            Blank[List]], 
           Pattern[$CellContext`sc$, 
            Blank[]], 
           Pattern[$CellContext`ql$, 
            Blank[]]] := 
         Module[{$CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`e$, \
$CellContext`omega$, $CellContext`points$, $CellContext`lines$, \
$CellContext`nu$, $CellContext`a$, $CellContext`b$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, {{$CellContext`a$, \
$CellContext`b$}, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
            ReplaceAll[{
              "latticeBasis", "pointsDataTable", 
               "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
               "numberOfMasses"}, $CellContext`ld$]; {$CellContext`omega$, \
$CellContext`e$} = $CellContext`dynAtOmegaIndex$; $CellContext`e$ = 
            Partition[$CellContext`e$, 2]; $CellContext`points$ = 
            Table[Part[$CellContext`pointsDataTable$, $CellContext`k] + 
              Table[$CellContext`sc$ 
                Re[Part[$CellContext`e$, $CellContext`k] 
                  E^(I (Dot[$CellContext`ql$, $CellContext`a$ $CellContext`i + \
$CellContext`b$ $CellContext`j] - $CellContext`omega$ #))], {$CellContext`i, -
                 Part[$CellContext`numberLatticeLinesToDisplay$, 1], 
                 
                 Part[$CellContext`numberLatticeLinesToDisplay$, 
                  1]}, {$CellContext`j, -
                 Part[$CellContext`numberLatticeLinesToDisplay$, 2], 
                 
                 Part[$CellContext`numberLatticeLinesToDisplay$, 
                  2]}]& , {$CellContext`k, $CellContext`numberOfMasses$}]; \
$CellContext`nu$ = (2 Pi) 
             If[$CellContext`omega$ == 0, 1, 1/$CellContext`omega$]; Show[{
              Table[
               ListPlot[
                
                Part[$CellContext`points$, $CellContext`k][$CellContext`nu$ \
#], PlotRange -> {{(-FE`glConstWindowHalfWidth$$39)/2, 
                   FE`glConstWindowHalfWidth$$39}, {(-
                    FE`glConstWindowHalfWidth$$39)/2, 
                   FE`glConstWindowHalfWidth$$39}}, ImageSize -> 
                FE`glConstPrimaryDisplaySize$$39, PlotStyle -> Directive[
                  PointSize[
                   Sqrt[
                   Part[$CellContext`mScalarArray$, $CellContext`k] (
                    FE`glConstMMax$$39^(-1)/350)]], 
                  $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$}], 
              Graphics[{$CellContext`lines$}]}]& ], 
         Attributes[$CellContext`ld$] = {Temporary}, 
         Attributes[$CellContext`dynAtOmegaIndex$] = {Temporary}, 
         Attributes[$CellContext`sc$] = {Temporary}, 
         Attributes[$CellContext`ql$] = {Temporary}, 
         Attributes[$CellContext`mScalarArray$] = {Temporary}, 
         Attributes[$CellContext`numberOfMasses$] = {Temporary}, 
         FE`glConstWindowHalfWidth$$39 = 3, 
         FE`glConstPrimaryDisplaySize$$39 = {380, 380}, FE`glConstMMax$$39 = 
         30, $CellContext`massColors := Part[
           Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
           1]& , $CellContext`frequencyPlotCalc[
           Pattern[$CellContext`ld$, 
            Blank[List]], 
           Pattern[$CellContext`m$, 
            Blank[]], 
           Pattern[$CellContext`meshSz$, 
            Blank[Integer]]] := 
         Module[{$CellContext`eigTable2D$, $CellContext`eigTable1D$, \
$CellContext`qMax$, $CellContext`omegaPointList2D$, \
$CellContext`omegaPointList1D$, $CellContext`range$, \
$CellContext`numberOfMasses$}, {$CellContext`qMax$, \
$CellContext`numberOfMasses$} = 
            ReplaceAll[{
              "qMaxVec", 
               "numberOfMasses"}, $CellContext`ld$]; $CellContext`eigTable2D$ = 
            Flatten[
              Re[
               Table[{{$CellContext`qx, $CellContext`qy}, 
                 Eigenvalues[
                  N[
                   $CellContext`m$[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, (-Part[$CellContext`qMax$, 1])/2, 
                 Part[$CellContext`qMax$, 1]/2, 
                 Part[$CellContext`qMax$, 
                   1]/$CellContext`meshSz$}, {$CellContext`qy, (-
                  Part[$CellContext`qMax$, 2])/2, Part[$CellContext`qMax$, 2]/
                 2, Part[$CellContext`qMax$, 2]/$CellContext`meshSz$}]], 
              1]; $CellContext`omegaPointList2D$[
              Pattern[$CellContext`nn$, 
               Blank[]]] := Map[Flatten[{
                Part[#, 1], 
                Part[
                 Sqrt[
                  
                  Part[#, 
                   2]], $CellContext`nn$]}]& , $CellContext`eigTable2D$]; \
$CellContext`range$ = Range[2 $CellContext`numberOfMasses$]; ListPlot3D[
             Map[$CellContext`omegaPointList2D$[#]& , $CellContext`range$], 
             PlotRange -> Full, ImageSize -> FE`glConstPrimaryDisplaySize$$39,
              AxesLabel -> {
              "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
               "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
         Attributes[$CellContext`m$] = {Temporary}, 
         Attributes[$CellContext`meshSz$] = {Temporary}, 
         Attributes[$CellContext`nn$] = {Temporary}, $CellContext`showFreqPlot[
           Pattern[$CellContext`qpl, 
            Blank[List]], 
           Pattern[$CellContext`freqPlotData, 
            Blank[]]] := 
         Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
              Graphics3D[
               Polygon[{{
                  Part[$CellContext`aa, 1], 
                  Part[$CellContext`aa, 2], 0}, {
                  Part[$CellContext`bb, 1], 
                  Part[$CellContext`bb, 2], 0}, {
                  Part[$CellContext`bb, 1], 
                  Part[$CellContext`bb, 2], 23}, {
                  Part[$CellContext`aa, 1], 
                  Part[$CellContext`aa, 2], 
                  23}}]]}]], $CellContext`nMassesFromLocArray[
           Pattern[$CellContext`uLoc, 
            Blank[]]] := First[
            Dimensions[$CellContext`uLoc]] - 
          2, $CellContext`returnKarrayForAdditionalMassIndex[
           Pattern[$CellContext`kA, 
            Blank[List]], 
           Pattern[$CellContext`nmNew, 
            Blank[Integer]]] := 
         Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
              Map[$CellContext`constructKArrayElements[
                Part[#, 1], 
                Part[#, 2]]& , 
               Select[
                Flatten[
                 
                 Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
                Max[#] == $CellContext`nmNew& ]], 2]; 
           Flatten[{$CellContext`kA, $CellContext`k2}, 
             1]], $CellContext`constructKArrayElements[
           Pattern[$CellContext`i$, 
            Blank[Integer]], 
           Pattern[$CellContext`j$, 
            Blank[Integer]]] := 
         Module[{$CellContext`a$}, $CellContext`a$ = Flatten[
              
              Table[{$CellContext`i$, $CellContext`j$, $CellContext`s 
                 Part[FE`glConstNeighboringCellIndexes$$39, $CellContext`n]} -> 
               Part[FE`glConstKDefaults$$39, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
           If[$CellContext`i$ < $CellContext`j$, 
             
             Append[$CellContext`a$, {$CellContext`i$, $CellContext`j$, {0, 
                0}} -> Part[FE`glConstKDefaults$$39, 5]], $CellContext`a$]], 
         Attributes[$CellContext`i$] = {Temporary}, 
         Attributes[$CellContext`j$] = {Temporary}, 
         FE`glConstNeighboringCellIndexes$$39 = {{1, 0}, {0, 1}, {1, 1}, {
          1, -1}}, 
         FE`glConstKDefaults$$39 = {0.25, 0.25, 0.25, 0.25, 
          0.25}, $CellContext`resetLatticeVectorsIfAngleTooSmall[
           Pattern[$CellContext`uLoc$, 
            Blank[List]], 
           Pattern[$CellContext`minAngle$, 
            Blank[]]] := Module[{$CellContext`t$}, $CellContext`t$ = Abs[
              ArcCos[
               Dot[
                Normalize[
                 Part[$CellContext`uLoc$, 1]], 
                Normalize[
                 Part[$CellContext`uLoc$, 2]]]]]; $CellContext`t$ = 
            If[$CellContext`t$ > Pi/2, Pi - $CellContext`t$, $CellContext`t$]; 
           If[$CellContext`t$ < $CellContext`minAngle$, 
             FE`glConstLocDefault$$39, {
              Part[$CellContext`uLoc$, 1], 
              Part[$CellContext`uLoc$, 2]}]], 
         Attributes[$CellContext`uLoc$] = {Temporary}, 
         Attributes[$CellContext`minAngle$] = {Temporary}, 
         Attributes[$CellContext`t$] = {Temporary}, 
         FE`glConstLocDefault$$39 = {{0.1, 1.3}, {1.9, 
          0.8}}, $CellContext`adjustedmoSel[
           Pattern[$CellContext`rNumM, 
            Blank[]], 
           Pattern[$CellContext`mOrigInd, 
            Blank[]], 
           Pattern[$CellContext`m1Ind, 
            Blank[]]] := If[$CellContext`rNumM > 2, 
           If[$CellContext`mOrigInd == $CellContext`m1Ind, 
            First[
             DeleteCases[
              
              Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
           First[
            Delete[
             Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
           Pattern[$CellContext`kA$, 
            Blank[List]], 
           Pattern[$CellContext`m1Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`m2Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`ni$, 
            Blank[Integer]]] := 
         ReplaceAll[{$CellContext`m1Ind$, $CellContext`m2Ind$, 
            Part[
            FE`glConstNeighboringCellIndexes$$39, $CellContext`ni$]}, \
$CellContext`kA$], Attributes[$CellContext`kA$] = {Temporary}, 
         Attributes[$CellContext`m1Ind$] = {Temporary}, 
         Attributes[$CellContext`m2Ind$] = {Temporary}, 
         Attributes[$CellContext`ni$] = {
          Temporary}, $CellContext`selectOriginVFromKarray[
           Pattern[$CellContext`kA, 
            Blank[List]], 
           Pattern[$CellContext`m1Ind, 
            Blank[Integer]], 
           Pattern[$CellContext`moInd, 
            Blank[Integer]]] := ReplaceAll[
           Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
            0}], $CellContext`kA], $CellContext`locDependent[
           Pattern[$CellContext`uLoc$, 
            Blank[List]], 
           Pattern[$CellContext`numMasses$, 
            Blank[Integer]], 
           Pattern[$CellContext`rma$, 
            Blank[List]]] := 
         Module[{$CellContext`m$, $CellContext`latticeBasis$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`reciprocalBasis$, \
$CellContext`mObliqueComponents$, $CellContext`mPosFirstCell$, \
$CellContext`reciprocalNorms$}, $CellContext`latticeBasis$ = 
            Take[$CellContext`uLoc$, 2]; $CellContext`m$ = 
            Drop[$CellContext`uLoc$, 
              2]; $CellContext`numberLatticeLinesToDisplay$ = Map[Ceiling[
               Abs[FE`glConstWindowHalfWidth$$39/Part[
                 Part[$CellContext`latticeBasis$, #], #]]]& , 
              Range[
              2]]; $CellContext`reciprocalBasis$ = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis$]; \
$CellContext`reciprocalNorms$ = Map[Norm[
               Part[$CellContext`reciprocalBasis$, #]]& , 
              Range[2]]; $CellContext`mObliqueComponents$ = Table[
              Dot[
               Part[$CellContext`m$, $CellContext`i], 
               
               Part[$CellContext`reciprocalBasis$, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses$}, {$CellContext`j, 
               2}]; $CellContext`mPosFirstCell$ = 
            Map[Part[$CellContext`m$, #] - Dot[
               Floor[
                
                Part[$CellContext`mObliqueComponents$, #]], \
$CellContext`latticeBasis$]& , 
              Range[$CellContext`numMasses$]]; {
            "mScalarArray" -> $CellContext`rma$, 
             "numberOfMasses" -> $CellContext`numMasses$, 
             "latticeBasis" -> $CellContext`latticeBasis$, "latticeNorms" -> 
             Map[Norm[
                Part[$CellContext`latticeBasis$, #]]& , 
               Range[2]], "latticeUnitVectors" -> Map[Normalize[
                Part[$CellContext`latticeBasis$, #]]& , 
               Range[2]], 
             "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay$, 
             "reciprocalBasis" -> $CellContext`reciprocalBasis$, 
             "reciprocalNorms" -> $CellContext`reciprocalNorms$, 
             "qMaxVec" -> (2 Pi) $CellContext`reciprocalNorms$, 
             "mObliqueComponents" -> $CellContext`mObliqueComponents$, 
             "mPosFirstCell" -> $CellContext`mPosFirstCell$, 
             "pointsDataTable" -> Map[$CellContext`pointsTable[
                
                Part[$CellContext`mPosFirstCell$, #], \
$CellContext`latticeBasis$, $CellContext`numberLatticeLinesToDisplay$]& , 
               Range[$CellContext`numMasses$]], "lineTable" -> 
             Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay$, $CellContext`latticeBasis$, #]& , 
               Permutations[{1, 2}]]}], 
         Attributes[$CellContext`numMasses$] = {Temporary}, 
         Attributes[$CellContext`rma$] = {
          Temporary}, $CellContext`calcReciprocalBasis[
           Pattern[$CellContext`loc, 
            Blank[List]]] := Inverse[
           Transpose[$CellContext`loc]], $CellContext`pointsTable[
           Pattern[$CellContext`mPosFirstCell, 
            Blank[List]], 
           Pattern[$CellContext`latticeBasis, 
            Blank[List]], 
           Pattern[$CellContext`numberLatticeLinesToDisplay, 
            Blank[List]]] := 
         Table[$CellContext`mPosFirstCell + 
           Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
            
            Part[$CellContext`numberLatticeLinesToDisplay, 
             1]}, {$CellContext`j, -
            Part[$CellContext`numberLatticeLinesToDisplay, 2], 
            
            Part[$CellContext`numberLatticeLinesToDisplay, 
             2]}], $CellContext`calcLineTable[
           Pattern[$CellContext`n, 
            Blank[List]], 
           Pattern[$CellContext`b, 
            Blank[List]], 
           Pattern[$CellContext`i, 
            Blank[List]]] := 
         Module[{$CellContext`first, $CellContext`second}, \
{$CellContext`first, $CellContext`second} = $CellContext`i; Table[
             
             Line[{(-Part[$CellContext`n, $CellContext`first]) 
                Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                Part[$CellContext`b, $CellContext`second], 
               Part[$CellContext`n, $CellContext`first] 
                Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, \
-Part[$CellContext`n, $CellContext`second], 
              
              Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`calculateCouplings[
           Pattern[$CellContext`ld, 
            Blank[List]], 
           Pattern[$CellContext`kA, 
            Blank[List]]] := 
         Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
            ReplaceAll[{
              "latticeBasis", "mPosFirstCell", 
               "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
            Map[Append[#, 
               $CellContext`relativeDifferences[$CellContext`r, \
$CellContext`mp, 
                First[#]]]& , 
              ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
            Map[Flatten[{
                Part[#, 1], {
                 Part[#, 2]}, 
                Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
              Sort[
               
               Select[$CellContext`t, And[
                Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
               Part[#, 5] < 
               Part[#2, 
                 5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
            Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
            Flatten[{$CellContext`t2, 
               Map[Flatten[{{
                   Part[#, 2], 
                   Part[#, 1]}, 
                  Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
            Table[
              Sort[
               Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
               Part[#, 5] < 
               Part[#2, 
                 5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], $CellContext`relativeDifferences[
           Pattern[$CellContext`r, 
            Blank[List]], 
           Pattern[$CellContext`mp, 
            Blank[List]], {
            Pattern[$CellContext`mIndex1, 
             Blank[Integer]], 
            Pattern[$CellContext`mIndex2, 
             Blank[Integer]], 
            Pattern[$CellContext`n, 
             Blank[List]]}] := 
         Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
            Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
            Part[$CellContext`mp, $CellContext`mIndex2] + 
             Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
            Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], $CellContext`projOpU[
           Pattern[$CellContext`v, 
            Blank[List]]] := {{
           Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
            Part[$CellContext`v, 2]}, {
           Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
            Part[$CellContext`v, 2]^2}}, $CellContext`plotSprings[
           Pattern[$CellContext`uLoc$, 
            Blank[List]], 
           Pattern[$CellContext`ld$, 
            Blank[List]], 
           Pattern[$CellContext`cd$, 
            Blank[List]], 
           Pattern[$CellContext`m1Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`m2Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`moInd$, 
            Blank[Integer]]] := 
         Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
            Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
            Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
            Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
            Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
             Dot[$CellContext`bLoc$, $CellContext`bLoc$]; \
{$CellContext`mLoc$, $CellContext`reciprocalBasis$, \
$CellContext`pointsDataTable$, $CellContext`numberLatticeLinesToDisplay$, \
$CellContext`lines$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
            ReplaceAll[{
              "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
               "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
               "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
              Pattern[$CellContext`n$, 
               Blank[Integer]]] := {
              $CellContext`massColors[$CellContext`n$], Null, 
              PointSize[
               Sqrt[
               Part[$CellContext`mScalarArray$, $CellContext`n$] (
                 FE`glConstMMax$$39^(-1)/500)]], 
              Map[Point[#]& , 
               Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
              Text[
               $CellContext`massLabel[$CellContext`n$], 
               Part[$CellContext`mLoc$, $CellContext`n$] + 
               FE`glConstTextDisplayOffsetHack$$39]}; $CellContext`cOrigin$ = 
            Select[
              Part[
               Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
              Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
              Part[
               Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
              Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
               $CellContext`spScaled[
                Take[#, {6, 7}], Part[#, 4]/
                FE`glConstKMax$$39, $CellContext`scaleLoc$], AspectRatio -> 
               Automatic, PlotStyle -> ReplaceAll[
                 Part[#, 3], 
                 FE`glConstSpringColorsByN$$39]]& , $CellContext`cN$]; 
           If[$CellContext`numberOfMasses$ > 1, 
             AppendTo[$CellContext`g$, 
              Map[ListLinePlot[
                $CellContext`spScaled[
                 Take[#, {6, 7}], Part[#, 4]/
                 FE`glConstKMax$$39, $CellContext`scaleLoc$], AspectRatio -> 
                Automatic, PlotStyle -> ReplaceAll[
                  Part[#, 3], 
                  FE`glConstSpringColorsByN$$39]]& , $CellContext`cOrigin$]], 
             Null]; Show[{
              Graphics[
               Flatten[{{$CellContext`lines$, Blue, 
                  Map[Arrow[{{0, 0}, 
                    Part[$CellContext`reciprocalBasis$, #]}]& , 
                   Range[2]], Thick, 
                  Arrowheads[0.05], Red, 
                  Map[Arrow[{{0, 0}, 
                    Part[$CellContext`latticeBasis$, #]}]& , 
                   Range[2]], 
                  Text[
                   OverVector["a"], $CellContext`aLoc$/2 + 
                   FE`glConstTextDisplayOffsetHack$$39], 
                  Text[
                   OverVector["b"], $CellContext`bLoc$/2 + 
                   FE`glConstTextDisplayOffsetHack$$39]}, 
                 Map[$CellContext`pointsList$[#]& , 
                  Range[$CellContext`numberOfMasses$]]}], 
               PlotRange -> {{(-FE`glConstWindowHalfWidth$$39)/2, 
                  FE`glConstWindowHalfWidth$$39}, {(-
                   FE`glConstWindowHalfWidth$$39)/2, 
                  FE`glConstWindowHalfWidth$$39}}, ImageSize -> 
               FE`glConstPrimaryDisplaySize$$39], $CellContext`g$}]], 
         Attributes[$CellContext`cd$] = {Temporary}, 
         Attributes[$CellContext`moInd$] = {Temporary}, 
         Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
         Style[
           $CellContext`indexLabel["m", #], 
           $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
           Style[#, Italic], #2]& , Attributes[Subscript] = {NHoldRest}, 
         FE`glConstTextDisplayOffsetHack$$39 = {0.25, 
          0.25}, $CellContext`spScaled[{
            Pattern[$CellContext`s1, 
             Blank[List]], 
            Pattern[$CellContext`s2, 
             Blank[List]]}, 
           Pattern[$CellContext`scaleKValue, 
            Blank[]], 
           Pattern[$CellContext`referenceSepSquared, 
            Blank[]]] := 
         Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
             
             Ceiling[(12 $CellContext`scaleKValue) 
              Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
           Pattern[$CellContext`a12, 
            Blank[List]], 
           Optional[
            Pattern[$CellContext`n, 
             Blank[Integer]], 8], 
           Optional[
            Pattern[$CellContext`h, 
             Blank[]], 0.05], 
           Optional[
            Pattern[$CellContext`f, 
             Blank[]], 0.1]] := 
         Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
            Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
            Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
              Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
            Dot[$CellContext`r, {$CellContext`n1, 0}]; {
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + ($CellContext`t (1 - 
                    2 $CellContext`f)) $CellContext`nd, $CellContext`h 
                 Sin[((2 
                    Pi) $CellContext`n) $CellContext`t]}], {$CellContext`t, 0,
                1, 0.01}], 
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                   2 $CellContext`f) $CellContext`nd + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
         FE`glConstKMax$$39 = 1, 
         FE`glConstSpringColorsByN$$39 = {{-1, 0} -> 
           RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
           RGBColor[0, 2/3, 0], {-1, -1} -> 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
           RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
           RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
           RGBColor[0, 2/3, 0], {1, 1} -> 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
           RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
           Pattern[$CellContext`v, 
            Blank[]], 
           Pattern[$CellContext`default, 
            Blank[]], 
           Pattern[$CellContext`lowerLimit, 
            Blank[]], 
           Pattern[$CellContext`upperLimit, 
            Blank[]]] := 
         Module[{$CellContext`result}, $CellContext`result = If[
              
              NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
            If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
            If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], \
$CellContext`massValue = $CellContext`checkAgainstRange[
          0.25, 0.25, 0.25, 30], $CellContext`kLable = Style[
           $CellContext`indexLabel["k", #], FontColor -> 
           Part[FE`glConstSpringColors$$39, #]]& , FE`glConstSpringColors$$39 = {
           RGBColor[2/3, 0.33333333333333337`, 0], 
           RGBColor[0, 2/3, 0], 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
           RGBColor[0, 2/3, 2/3], 
           RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKArrayElements[
           Pattern[$CellContext`kA$, 
            Blank[List]], 
           Pattern[$CellContext`m1Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`m2Ind$, 
            Blank[Integer]], 
           Pattern[$CellContext`ni$, 
            Blank[Integer]], 
           Pattern[$CellContext`v$, 
            Blank[]]] := 
         ReplaceAll[$CellContext`kA$, {({$CellContext`m1Ind$, \
$CellContext`m2Ind$, 
               Part[FE`glConstNeighboringCellIndexes$$39, $CellContext`ni$]} -> 
             Blank[]) :> ({$CellContext`m1Ind$, $CellContext`m2Ind$, 
               Part[
               FE`glConstNeighboringCellIndexes$$39, $CellContext`ni$]} -> \
$CellContext`v$), ({$CellContext`m1Ind$, $CellContext`m2Ind$, -
               Part[FE`glConstNeighboringCellIndexes$$39, $CellContext`ni$]} -> 
             Blank[]) :> ({$CellContext`m1Ind$, $CellContext`m2Ind$, -
               Part[FE`glConstNeighboringCellIndexes$$39, $CellContext`ni$]} -> \
$CellContext`v$)}], 
         Attributes[$CellContext`v$] = {
          Temporary}, $CellContext`returnAlteredKarrayOriginElement[
           Pattern[$CellContext`kA, 
            Blank[List]], 
           Pattern[$CellContext`m1Ind, 
            Blank[Integer]], 
           Pattern[$CellContext`moInd, 
            Blank[Integer]], 
           Pattern[$CellContext`v, 
            Blank[]]] := 
         Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
              Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
           ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
              Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; \
{$CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault$$, \
$CellContext`mLocDefault$$}, 1]; $CellContext`glConstSpringColorsByN$$ = 
          DeleteDuplicates[
            Flatten[
             Table[$CellContext`s Part[
                 
                 Append[$CellContext`glConstNeighboringCellIndexes$$, {0, 
                  0}], $CellContext`n] -> 
              Part[$CellContext`glConstSpringColors$$, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 5}], 
             1]]; $CellContext`checkAgainstRange[
            Pattern[$CellContext`v, 
             Blank[]], 
            Pattern[$CellContext`default, 
             Blank[]], 
            Pattern[$CellContext`lowerLimit, 
             Blank[]], 
            Pattern[$CellContext`upperLimit, 
             Blank[]]] := 
          Module[{$CellContext`result}, $CellContext`result = If[
               
               NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
             If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
             If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result]; \
$CellContext`springPoints[
            Pattern[$CellContext`a12, 
             Blank[List]], 
            Optional[
             Pattern[$CellContext`n, 
              Blank[Integer]], 8], 
            Optional[
             Pattern[$CellContext`h, 
              Blank[]], 0.05], 
            Optional[
             Pattern[$CellContext`f, 
              Blank[]], 0.1]] := 
          Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
             Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
             Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
               Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
             Dot[$CellContext`r, {$CellContext`n1, 0}]; {
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + ($CellContext`t (1 - 
                    2 $CellContext`f)) $CellContext`nd, $CellContext`h 
                  Sin[((2 
                    Pi) $CellContext`n) $CellContext`t]}], {$CellContext`t, 0,
                 1, 0.01}], 
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                    2 $CellContext`f) $CellContext`nd + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 
                0.01}]}]; $CellContext`indexLabel = Subscript[
            Style[#, Italic], #2]& ; $CellContext`kLable = Style[
            $CellContext`indexLabel["k", #], FontColor -> 
            Part[$CellContext`glConstSpringColors$$, #]]& ; \
$CellContext`massColors := Part[
            Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
            1]& ; $CellContext`massLabel := Style[
            $CellContext`indexLabel["m", #], 
            $CellContext`massColors[#]]& ; $CellContext`calcLineTable[
            Pattern[$CellContext`n, 
             Blank[List]], 
            Pattern[$CellContext`b, 
             Blank[List]], 
            Pattern[$CellContext`i, 
             Blank[List]]] := 
          Module[{$CellContext`first, $CellContext`second}, \
{$CellContext`first, $CellContext`second} = $CellContext`i; Table[
              
              Line[{(-Part[$CellContext`n, $CellContext`first]) 
                 Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                 Part[$CellContext`b, $CellContext`second], 
                Part[$CellContext`n, $CellContext`first] 
                 Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                 Part[$CellContext`b, $CellContext`second]}], \
{$CellContext`j, -Part[$CellContext`n, $CellContext`second], 
               
               Part[$CellContext`n, $CellContext`second]}]]; \
$CellContext`calcReciprocalBasis[
            Pattern[$CellContext`loc, 
             Blank[List]]] := Inverse[
            Transpose[$CellContext`loc]]; $CellContext`pointsTable[
            Pattern[$CellContext`mPosFirstCell, 
             Blank[List]], 
            Pattern[$CellContext`latticeBasis, 
             Blank[List]], 
            Pattern[$CellContext`numberLatticeLinesToDisplay, 
             Blank[List]]] := 
          Table[$CellContext`mPosFirstCell + 
            
            Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
             
             Part[$CellContext`numberLatticeLinesToDisplay, 
              1]}, {$CellContext`j, -
             Part[$CellContext`numberLatticeLinesToDisplay, 2], 
             
             Part[$CellContext`numberLatticeLinesToDisplay, 
              2]}]; $CellContext`nMassesFromLocArray[
            Pattern[$CellContext`uLoc, 
             Blank[]]] := First[
             Dimensions[$CellContext`uLoc]] - 2; $CellContext`adjustedmoSel[
            Pattern[$CellContext`rNumM, 
             Blank[]], 
            Pattern[$CellContext`mOrigInd, 
             Blank[]], 
            Pattern[$CellContext`m1Ind, 
             Blank[]]] := If[$CellContext`rNumM > 2, 
            If[$CellContext`mOrigInd == $CellContext`m1Ind, 
             First[
              DeleteCases[
               
               Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
            First[
             Delete[
              Range[
              2], $CellContext`m1Ind]]]; $CellContext`constructKArrayElements[
            Pattern[$CellContext`i$, 
             Blank[Integer]], 
            Pattern[$CellContext`j$, 
             Blank[Integer]]] := 
          Module[{$CellContext`a$}, $CellContext`a$ = Flatten[
               
               Table[{$CellContext`i$, $CellContext`j$, $CellContext`s 
                  Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`n]} -> 
                Part[$CellContext`glConstKDefaults$$, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
            If[$CellContext`i$ < $CellContext`j$, 
              
              Append[$CellContext`a$, {$CellContext`i$, $CellContext`j$, {0, 
                 0}} -> Part[$CellContext`glConstKDefaults$$, 
                 5]], $CellContext`a$]]; $CellContext`constructKArray[
            Pattern[$CellContext`r, 
             Blank[Integer]]] := Flatten[
            Table[
             $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2]; $CellContext`returnAlteredKArrayElements[
            Pattern[$CellContext`kA$, 
             Blank[List]], 
            Pattern[$CellContext`m1Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`m2Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`ni$, 
             Blank[Integer]], 
            Pattern[$CellContext`v$, 
             Blank[]]] := 
          ReplaceAll[$CellContext`kA$, {({$CellContext`m1Ind$, \
$CellContext`m2Ind$, 
                
                Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]} -> Blank[]) :> ({$CellContext`m1Ind$, $CellContext`m2Ind$, 
                
                Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]} -> $CellContext`v$), ({$CellContext`m1Ind$, \
$CellContext`m2Ind$, -
                Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]} -> 
              Blank[]) :> ({$CellContext`m1Ind$, $CellContext`m2Ind$, -
                Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]} -> $CellContext`v$)}]; \
$CellContext`returnAlteredKarrayOriginElement[
            Pattern[$CellContext`kA, 
             Blank[List]], 
            Pattern[$CellContext`m1Ind, 
             Blank[Integer]], 
            Pattern[$CellContext`moInd, 
             Blank[Integer]], 
            Pattern[$CellContext`v, 
             Blank[]]] := 
          Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
               Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
            ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
               Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]; \
$CellContext`selectVFromKarray[
            Pattern[$CellContext`kA$, 
             Blank[List]], 
            Pattern[$CellContext`m1Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`m2Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`ni$, 
             Blank[Integer]]] := 
          ReplaceAll[{$CellContext`m1Ind$, $CellContext`m2Ind$, 
             
             Part[$CellContext`glConstNeighboringCellIndexes$$, \
$CellContext`ni$]}, $CellContext`kA$]; $CellContext`selectOriginVFromKarray[
            Pattern[$CellContext`kA, 
             Blank[List]], 
            Pattern[$CellContext`m1Ind, 
             Blank[Integer]], 
            Pattern[$CellContext`moInd, 
             Blank[Integer]]] := ReplaceAll[
            Append[
             Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
             0}], $CellContext`kA]; \
$CellContext`returnKarrayForAdditionalMassIndex[
            Pattern[$CellContext`kA, 
             Blank[List]], 
            Pattern[$CellContext`nmNew, 
             Blank[Integer]]] := 
          Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
               Map[$CellContext`constructKArrayElements[
                 Part[#, 1], 
                 Part[#, 2]]& , 
                Select[
                 Flatten[
                  
                  Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
                 Max[#] == $CellContext`nmNew& ]], 2]; 
            Flatten[{$CellContext`kA, $CellContext`k2}, 
              1]]; $CellContext`resetLatticeVectorsIfAngleTooSmall[
            Pattern[$CellContext`uLoc$, 
             Blank[List]], 
            Pattern[$CellContext`minAngle$, 
             Blank[]]] := Module[{$CellContext`t$}, $CellContext`t$ = Abs[
               ArcCos[
                Dot[
                 Normalize[
                  Part[$CellContext`uLoc$, 1]], 
                 Normalize[
                  Part[$CellContext`uLoc$, 2]]]]]; $CellContext`t$ = 
             If[$CellContext`t$ > Pi/2, 
               Pi - $CellContext`t$, $CellContext`t$]; 
            
            If[$CellContext`t$ < $CellContext`minAngle$, \
$CellContext`glConstLocDefault$$, {
               Part[$CellContext`uLoc$, 1], 
               Part[$CellContext`uLoc$, 2]}]]; $CellContext`locDependent[
            Pattern[$CellContext`uLoc$, 
             Blank[List]], 
            Pattern[$CellContext`numMasses$, 
             Blank[Integer]], 
            Pattern[$CellContext`rma$, 
             Blank[List]]] := 
          Module[{$CellContext`m$, $CellContext`latticeBasis$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`reciprocalBasis$, \
$CellContext`mObliqueComponents$, $CellContext`mPosFirstCell$, \
$CellContext`reciprocalNorms$}, $CellContext`latticeBasis$ = 
             Take[$CellContext`uLoc$, 2]; $CellContext`m$ = 
             Drop[$CellContext`uLoc$, 
               2]; $CellContext`numberLatticeLinesToDisplay$ = Map[Ceiling[
                Abs[$CellContext`glConstWindowHalfWidth$$/Part[
                  Part[$CellContext`latticeBasis$, #], #]]]& , 
               Range[
               2]]; $CellContext`reciprocalBasis$ = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis$]; \
$CellContext`reciprocalNorms$ = Map[Norm[
                Part[$CellContext`reciprocalBasis$, #]]& , 
               Range[2]]; $CellContext`mObliqueComponents$ = Table[
               Dot[
                Part[$CellContext`m$, $CellContext`i], 
                
                Part[$CellContext`reciprocalBasis$, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses$}, {$CellContext`j, 
                2}]; $CellContext`mPosFirstCell$ = 
             Map[Part[$CellContext`m$, #] - Dot[
                Floor[
                 
                 Part[$CellContext`mObliqueComponents$, #]], \
$CellContext`latticeBasis$]& , 
               Range[$CellContext`numMasses$]]; {
             "mScalarArray" -> $CellContext`rma$, 
              "numberOfMasses" -> $CellContext`numMasses$, 
              "latticeBasis" -> $CellContext`latticeBasis$, "latticeNorms" -> 
              Map[Norm[
                 Part[$CellContext`latticeBasis$, #]]& , 
                Range[2]], "latticeUnitVectors" -> Map[Normalize[
                 Part[$CellContext`latticeBasis$, #]]& , 
                Range[2]], 
              "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay$, 
              "reciprocalBasis" -> $CellContext`reciprocalBasis$, 
              "reciprocalNorms" -> $CellContext`reciprocalNorms$, 
              "qMaxVec" -> (2 Pi) $CellContext`reciprocalNorms$, 
              "mObliqueComponents" -> $CellContext`mObliqueComponents$, 
              "mPosFirstCell" -> $CellContext`mPosFirstCell$, 
              "pointsDataTable" -> Map[$CellContext`pointsTable[
                 
                 Part[$CellContext`mPosFirstCell$, #], \
$CellContext`latticeBasis$, $CellContext`numberLatticeLinesToDisplay$]& , 
                Range[$CellContext`numMasses$]], "lineTable" -> 
              Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay$, $CellContext`latticeBasis$, #]& , 
                Permutations[{1, 2}]]}]; $CellContext`projOpU[
            Pattern[$CellContext`v, 
             Blank[List]]] := {{
            Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
             Part[$CellContext`v, 2]}, {
            Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
             Part[$CellContext`v, 2]^2}}; $CellContext`projOp[
            Pattern[$CellContext`v, 
             Blank[List]]] := $CellContext`projOpU[$CellContext`v]/
           Dot[$CellContext`v, $CellContext`v]; \
$CellContext`relativeDifferences[
            Pattern[$CellContext`r, 
             Blank[List]], 
            Pattern[$CellContext`mp, 
             Blank[List]], {
             Pattern[$CellContext`mIndex1, 
              Blank[Integer]], 
             Pattern[$CellContext`mIndex2, 
              Blank[Integer]], 
             Pattern[$CellContext`n, 
              Blank[List]]}] := 
          Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
             Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
             Part[$CellContext`mp, $CellContext`mIndex2] + 
              Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
             Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}]; \
$CellContext`calculateCouplings[
            Pattern[$CellContext`ld, 
             Blank[List]], 
            Pattern[$CellContext`kA, 
             Blank[List]]] := 
          Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
             ReplaceAll[{
               "latticeBasis", "mPosFirstCell", 
                "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
             Map[Append[#, 
                $CellContext`relativeDifferences[$CellContext`r, \
$CellContext`mp, 
                 First[#]]]& , 
               ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
             Map[Flatten[{
                 Part[#, 1], {
                  Part[#, 2]}, 
                 Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
               Sort[
                
                Select[$CellContext`t, And[
                 Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
                Part[#, 5] < 
                Part[#2, 
                  5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
             Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
             Flatten[{$CellContext`t2, 
                Map[Flatten[{{
                    Part[#, 2], 
                    Part[#, 1]}, 
                   Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
             Table[
               Sort[
                Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
                Part[#, 5] < 
                Part[#2, 
                  5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}]; $CellContext`spScaled[{
             Pattern[$CellContext`s1, 
              Blank[List]], 
             Pattern[$CellContext`s2, 
              Blank[List]]}, 
            Pattern[$CellContext`scaleKValue, 
             Blank[]], 
            Pattern[$CellContext`referenceSepSquared, 
             Blank[]]] := 
          Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
              
              Ceiling[(12 $CellContext`scaleKValue) 
               Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]]; \
$CellContext`plotSprings[
            Pattern[$CellContext`uLoc$, 
             Blank[List]], 
            Pattern[$CellContext`ld$, 
             Blank[List]], 
            Pattern[$CellContext`cd$, 
             Blank[List]], 
            Pattern[$CellContext`m1Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`m2Ind$, 
             Blank[Integer]], 
            Pattern[$CellContext`moInd$, 
             Blank[Integer]]] := 
          Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
             Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
             Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
             Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
             Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
              Dot[$CellContext`bLoc$, $CellContext`bLoc$]; \
{$CellContext`mLoc$, $CellContext`reciprocalBasis$, \
$CellContext`pointsDataTable$, $CellContext`numberLatticeLinesToDisplay$, \
$CellContext`lines$, $CellContext`mScalarArray$, \
$CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
                "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
                "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
               Pattern[$CellContext`n$, 
                Blank[Integer]]] := {
               $CellContext`massColors[$CellContext`n$], Null, 
               PointSize[
                
                Sqrt[(Part[$CellContext`mScalarArray$, \
$CellContext`n$]/$CellContext`glConstMMax$$)/500]], 
               Map[Point[#]& , 
                Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
               Text[
                $CellContext`massLabel[$CellContext`n$], 
                Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack$$]}; $CellContext`cOrigin$ = Select[
               Part[
                Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
               Take[#, 
                 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
               Part[
                Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
               Take[#, 
                 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
                $CellContext`spScaled[
                 Take[#, {6, 7}], 
                 Part[#, 
                   4]/$CellContext`glConstKMax$$, $CellContext`scaleLoc$], 
                AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                  
                  Part[#, 
                   3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
              AppendTo[$CellContext`g$, 
               Map[ListLinePlot[
                 $CellContext`spScaled[
                  Take[#, {6, 7}], 
                  Part[#, 
                    4]/$CellContext`glConstKMax$$, $CellContext`scaleLoc$], 
                 AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                   
                   Part[#, 
                    3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
               Graphics[
                Flatten[{{$CellContext`lines$, Blue, 
                   Map[Arrow[{{0, 0}, 
                    Part[$CellContext`reciprocalBasis$, #]}]& , 
                    Range[2]], Thick, 
                   Arrowheads[0.05], Red, 
                   Map[Arrow[{{0, 0}, 
                    Part[$CellContext`latticeBasis$, #]}]& , 
                    Range[2]], 
                   Text[
                    OverVector[
                    "a"], $CellContext`aLoc$/
                    2 + $CellContext`glConstTextDisplayOffsetHack$$], 
                   Text[
                    OverVector[
                    "b"], $CellContext`bLoc$/
                    2 + $CellContext`glConstTextDisplayOffsetHack$$]}, 
                  Map[$CellContext`pointsList$[#]& , 
                   Range[$CellContext`numberOfMasses$]]}], 
                PlotRange -> {{(-$CellContext`glConstWindowHalfWidth$$)/
                   2, $CellContext`glConstWindowHalfWidth$$}, \
{(-$CellContext`glConstWindowHalfWidth$$)/
                   2, $CellContext`glConstWindowHalfWidth$$}}, 
                ImageSize -> $CellContext`glConstPrimaryDisplaySize$$], \
$CellContext`g$}]]; $CellContext`oneTermOfdynamicsMatrix[{
             Pattern[$CellContext`k, 
              Blank[Integer]], 
             Pattern[$CellContext`j, 
              Blank[Integer]], 
             Pattern[$CellContext`mVec, 
              Blank[List]], 
             Pattern[$CellContext`kS, 
              Blank[]], 
             Blank[], 
             Blank[], 
             Blank[], 
             Pattern[$CellContext`proj, 
              Blank[List]]}, 
            Pattern[$CellContext`r, 
             Blank[List]], 
            Pattern[$CellContext`mk, 
             Blank[]], 
            Pattern[$CellContext`epsilon, 
             Blank[List]], 
            Pattern[$CellContext`mA, 
             Blank[List]]] := $CellContext`kS 
           Dot[$CellContext`proj, 
             Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
             Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
                  Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
              Sqrt[$CellContext`mk 
               Part[$CellContext`mA, $CellContext`j]])]; \
$CellContext`dynamicsMatrix[
            Pattern[$CellContext`ld, 
             Blank[List]], 
            Pattern[$CellContext`cd, 
             Blank[List]]] := 
          Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
               Sort[
                Flatten[$CellContext`cd, 2]], 
               First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
             ReplaceAll[{
               "latticeBasis", "mScalarArray", 
                "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
             Partition[
               IdentityMatrix[2 $CellContext`numberOfMasses], 
               2]; $CellContext`res = Partition[
               Flatten[
                Table[
                 Total[
                  Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                    
                    Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                   
                   Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
               2 $CellContext`numberOfMasses]; 
            ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ]; \
$CellContext`calcDynamics[
            Pattern[$CellContext`mAtQ, 
             Blank[List]]] := Map[{
             Sqrt[
              Part[#, 1]], 
             Part[#, 2]}& , 
            Transpose[
             Eigensystem[$CellContext`mAtQ]]]; $CellContext`showDynamics[
            Pattern[$CellContext`ld$, 
             Blank[List]], 
            Pattern[$CellContext`dynAtOmegaIndex$, 
             Blank[List]], 
            Pattern[$CellContext`sc$, 
             Blank[]], 
            Pattern[$CellContext`ql$, 
             Blank[]]] := 
          Module[{$CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`e$, \
$CellContext`omega$, $CellContext`points$, $CellContext`lines$, \
$CellContext`nu$, $CellContext`a$, $CellContext`b$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$}, {{$CellContext`a$, \
$CellContext`b$}, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "latticeBasis", "pointsDataTable", 
                "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
                "numberOfMasses"}, $CellContext`ld$]; {$CellContext`omega$, \
$CellContext`e$} = $CellContext`dynAtOmegaIndex$; $CellContext`e$ = 
             Partition[$CellContext`e$, 2]; $CellContext`points$ = 
             Table[Part[$CellContext`pointsDataTable$, $CellContext`k] + 
               Table[$CellContext`sc$ 
                 Re[Part[$CellContext`e$, $CellContext`k] 
                   E^(I (Dot[$CellContext`ql$, $CellContext`a$ $CellContext`i + \
$CellContext`b$ $CellContext`j] - $CellContext`omega$ #))], {$CellContext`i, -
                  Part[$CellContext`numberLatticeLinesToDisplay$, 1], 
                  
                  Part[$CellContext`numberLatticeLinesToDisplay$, 
                   1]}, {$CellContext`j, -
                  Part[$CellContext`numberLatticeLinesToDisplay$, 2], 
                  
                  Part[$CellContext`numberLatticeLinesToDisplay$, 
                   2]}]& , {$CellContext`k, $CellContext`numberOfMasses$}]; \
$CellContext`nu$ = (2 Pi) 
              If[$CellContext`omega$ == 0, 1, 1/$CellContext`omega$]; Show[{
               Table[
                ListPlot[
                 
                 Part[$CellContext`points$, $CellContext`k][$CellContext`nu$ \
#], PlotRange -> {{(-$CellContext`glConstWindowHalfWidth$$)/
                    2, $CellContext`glConstWindowHalfWidth$$}, \
{(-$CellContext`glConstWindowHalfWidth$$)/
                    2, $CellContext`glConstWindowHalfWidth$$}}, 
                 ImageSize -> $CellContext`glConstPrimaryDisplaySize$$, 
                 PlotStyle -> Directive[
                   PointSize[
                    
                    Sqrt[(Part[$CellContext`mScalarArray$, \
$CellContext`k]/$CellContext`glConstMMax$$)/350]], 
                   $CellContext`massColors[$CellContext`k]]], \
{$CellContext`k, $CellContext`numberOfMasses$}], 
               
               Graphics[{$CellContext`lines$}]}]& ]; \
$CellContext`frequencyPlotCalc[
            Pattern[$CellContext`ld$, 
             Blank[List]], 
            Pattern[$CellContext`m$, 
             Blank[]], 
            Pattern[$CellContext`meshSz$, 
             Blank[Integer]]] := 
          Module[{$CellContext`eigTable2D$, $CellContext`eigTable1D$, \
$CellContext`qMax$, $CellContext`omegaPointList2D$, \
$CellContext`omegaPointList1D$, $CellContext`range$, \
$CellContext`numberOfMasses$}, {$CellContext`qMax$, \
$CellContext`numberOfMasses$} = 
             ReplaceAll[{
               "qMaxVec", 
                "numberOfMasses"}, $CellContext`ld$]; \
$CellContext`eigTable2D$ = Flatten[
               Re[
                Table[{{$CellContext`qx, $CellContext`qy}, 
                  Eigenvalues[
                   N[
                    $CellContext`m$[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, (-Part[$CellContext`qMax$, 1])/2, 
                  Part[$CellContext`qMax$, 1]/2, 
                  Part[$CellContext`qMax$, 
                    1]/$CellContext`meshSz$}, {$CellContext`qy, (-
                   Part[$CellContext`qMax$, 2])/2, 
                  Part[$CellContext`qMax$, 2]/2, 
                  Part[$CellContext`qMax$, 2]/$CellContext`meshSz$}]], 
               1]; $CellContext`omegaPointList2D$[
               Pattern[$CellContext`nn$, 
                Blank[]]] := Map[Flatten[{
                 Part[#, 1], 
                 Part[
                  Sqrt[
                   
                   Part[#, 
                    2]], $CellContext`nn$]}]& , $CellContext`eigTable2D$]; \
$CellContext`range$ = Range[2 $CellContext`numberOfMasses$]; ListPlot3D[
              Map[$CellContext`omegaPointList2D$[#]& , $CellContext`range$], 
              PlotRange -> Full, 
              ImageSize -> $CellContext`glConstPrimaryDisplaySize$$, 
              AxesLabel -> {
               "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
                "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]]; \
$CellContext`showFreqPlot[
            Pattern[$CellContext`qpl, 
             Blank[List]], 
            Pattern[$CellContext`freqPlotData, 
             Blank[]]] := 
          Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
               Graphics3D[
                Polygon[{{
                   Part[$CellContext`aa, 1], 
                   Part[$CellContext`aa, 2], 0}, {
                   Part[$CellContext`bb, 1], 
                   Part[$CellContext`bb, 2], 0}, {
                   Part[$CellContext`bb, 1], 
                   Part[$CellContext`bb, 2], 23}, {
                   Part[$CellContext`aa, 1], 
                   Part[$CellContext`aa, 2], 
                   23}}]]}]]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; Null}}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.600991920019863*^9, 3.6009919670395527`*^9}, {
   3.6009920245298405`*^9, 3.6009920501333055`*^9}, 3.60099313594541*^9, {
   3.600993187449356*^9, 3.600993239845353*^9}, {3.6009932797776365`*^9, 
   3.6009933046760607`*^9}, {3.6012440341096554`*^9, 3.6012440721578317`*^9}, 
   3.6012447781242104`*^9, {3.6012448176024685`*^9, 3.6012448561326723`*^9}, 
   3.6012449730663605`*^9, {3.6012450799064713`*^9, 3.601245088751977*^9}, {
   3.601245122802925*^9, 3.6012451299813356`*^9}, {3.6012451718047276`*^9, 
   3.601245397972664*^9}, {3.6012467859190493`*^9, 3.6012468229691687`*^9}, {
   3.601246896213358*^9, 3.6012470488980913`*^9}, {3.6012470802998877`*^9, 
   3.601247087356291*^9}, {3.6012476034298086`*^9, 3.601247625026044*^9}, {
   3.6012477383525257`*^9, 3.6012477482580924`*^9}, {3.6012479226070642`*^9, 
   3.6012479616512976`*^9}, 3.6012480156453857`*^9, {3.6013815489528093`*^9, 
   3.6013815749782977`*^9}, 3.6013816959272156`*^9, 3.6013818936795263`*^9, 
   3.601381933169785*^9, 3.6013820135453825`*^9, {3.601383178395008*^9, 
   3.601383178848034*^9}, {3.601383387351959*^9, 3.601383409076202*^9}},
 CellID->343404192],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Part", "::", "partw"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Part \[NoBreak]\\!\\(4\\)\[NoBreak] of \
\[NoBreak]\\!\\({\\(\\({0.9`, 0.7`}\\)\\), \\(\\({0.4`, 1.2`}\\)\\), \
\\(\\({1.3`, 1.4`}\\)\\)}\\)\[NoBreak] does not exist. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/partw\\\", \
ButtonNote -> \\\"Part::partw\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.601383714107649*^9},
 CellID->415059657],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Part", "::", "partw"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Part \[NoBreak]\\!\\(4\\)\[NoBreak] of \
\[NoBreak]\\!\\({\\(\\({0.9`, 0.7`}\\)\\), \\(\\({0.4`, 1.2`}\\)\\), \
\\(\\({1.3`, 1.4`}\\)\\)}\\)\[NoBreak] does not exist. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/partw\\\", \
ButtonNote -> \\\"Part::partw\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6013837149756985`*^9},
 CellID->433816277],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Part", "::", "partw"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Part \[NoBreak]\\!\\(5\\)\[NoBreak] of \
\[NoBreak]\\!\\({\\(\\({0.9`, 0.7`}\\)\\), \\(\\({0.4`, 1.2`}\\)\\), \
\\(\\({1.3`, 1.4`}\\)\\)}\\)\[NoBreak] does not exist. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/partw\\\", \
ButtonNote -> \\\"Part::partw\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6013837150027*^9},
 CellID->264288021],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Further output of \[NoBreak]\\!\\(\\*StyleBox[\\(Part :: \
partw\\), \\\"MessageName\\\"]\\)\[NoBreak] will be suppressed during this \
calculation. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/stop\\\", ButtonNote -> \
\\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.601383715034702*^9},
 CellID->255228475]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "DetailsSection"],

Cell[TextData[{
 "The positions of masses within a two dimensional periodic array of cells, \
can be described by summing the lattice vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["r", "\[RightVector]"], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], " ", "=", " ", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["n", "1"], ",", " ", 
        SubscriptBox["n", "2"]}], ")"}]}]], " ", "=", " ", 
    RowBox[{
     RowBox[{
      SubscriptBox["n", "1"], 
      OverscriptBox["a", "\[RightVector]"]}], " ", "+", " ", 
     RowBox[{
      SubscriptBox["n", 
       RowBox[{"2", " "}]], 
      OverscriptBox["b", "\[RightVector]"]}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", representing the origin of each of the lattice cell, and a relative \
vector to the position of each of the masses.",
 " ",
 "With ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 " representing the equilibrium position of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 ", the position of that mass is ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 "+ ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.6008874666091995`*^9, 3.600887466629201*^9}, 
   3.6012090394184523`*^9, {3.601382475199787*^9, 3.601382478123955*^9}},
 CellID->143536934],

Cell[TextData[{
 "Let ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["a", "\[RightVector]"], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], "=", " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["r", "\[RightVector]"], 
      OverscriptBox["n", "\[RightVector]"]], "+", 
     SubscriptBox[
      OverscriptBox["p", "\[RightVector]"], "k"], " ", "-", " ", 
     SubscriptBox[
      OverscriptBox["r", "\[RightVector]"], 
      OverscriptBox["m", "\[RightVector]"]], "-", 
     SubscriptBox[
      OverscriptBox["p", "\[RightVector]"], "j"]}]}], TraditionalForm]], 
  "InlineMath"],
 ", with direction ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["a", "^"], 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", represent the equilibrium separation of the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 " from the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["j", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["m", "\[RightVector]"]], TraditionalForm]]],
 ".",
 " ",
 "If the harmonic coupling between these masses has magnitude ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]]],
 ", then the system of equations describing the vector displacement ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["u", "\[RightVector]"], 
    RowBox[{"n", ",", " ", "k", " "}]], TraditionalForm]]],
 " for the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in unit cell ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["n", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " from the equilibrium position is given by"
}], "DetailNotes",
 CellChangeTimes->{{3.6008874666091995`*^9, 3.600887467295239*^9}, {
  3.6012090498004904`*^9, 3.601209051237634*^9}},
 CellID->185095190],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubscriptBox["m", "k"], " ", 
    SubscriptBox[
     OverscriptBox[
      OverscriptBox["u", "\[RightVector]"], ".."], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}]]}], "=", " ", 
   RowBox[{"-", 
    RowBox[{
     UnderscriptBox["\[Sum]", 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", 
       RowBox[{"k", " ", "\[NotEqual]", " ", 
        OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
     RowBox[{
      SubscriptBox["K", 
       RowBox[{
        OverscriptBox["n", "\[RightVector]"], ",", 
        RowBox[{"k", ";", 
         OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
      SubscriptBox["Proj", 
       SubscriptBox[
        OverscriptBox["a", "^"], 
        RowBox[{
         OverscriptBox["n", "\[RightVector]"], ",", 
         RowBox[{"k", ";", 
          OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox[
         OverscriptBox["u", "\[RightVector]"], 
         RowBox[{
          OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}]], "-", " ", 
        SubscriptBox[
         OverscriptBox["u", "\[RightVector]"], 
         RowBox[{
          OverscriptBox["m", "\[RightVector]"], ",", " ", "j"}]]}], ")"}], 
      " "}]}]}]}], TraditionalForm]]]], "DetailNotes",
 CellChangeTimes->{{3.6008875035133104`*^9, 3.6008875050703993`*^9}},
 CellID->413013362],

Cell[TextData[{
 "In general, we have one such equation for each ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}], TraditionalForm]]],
 " pair.",
 " ",
 "A trial solution of the form: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox[
      OverscriptBox["u", "\[RightVector]"], 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", " ", "k", " "}]], "(", "t", 
     ")"}], "=", " ", 
    RowBox[{
     FractionBox[
      RowBox[{
       SubscriptBox[
        OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
       OverscriptBox["q", "\[RightVector]"], ")"}], 
      SqrtBox[
       SubscriptBox["m", "k"]]], " ", 
     SuperscriptBox["e", 
      RowBox[{"I", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          SubscriptBox[
           OverscriptBox["r", "\[RightVector]"], 
           OverscriptBox["n", "\[RightVector]"]], ".", " ", 
          OverscriptBox["q", "\[RightVector]"]}], " ", "-", " ", 
         RowBox[{"\[Omega]", " ", "t"}]}], ")"}]}]]}]}], TraditionalForm]]],
 " can be used to decouple this system, resulting in a single equation for \
each ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass of the form"
}], "DetailNotes",
 CellChangeTimes->{3.601209052017712*^9},
 CellID->160232404],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SuperscriptBox["\[Omega]", "2"], " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
     OverscriptBox["q", "\[RightVector]"], ")"}]}], " ", "=", " ", 
   RowBox[{
    UnderscriptBox["\[Sum]", 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", 
      RowBox[{"k", " ", "\[NotEqual]", " ", 
       OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
    RowBox[{
     SubscriptBox["K", 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", 
       RowBox[{"k", ";", 
        OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
     SubscriptBox["Proj", 
      SubscriptBox[
       OverscriptBox["a", "^"], 
       RowBox[{
        OverscriptBox["n", "\[RightVector]"], ",", 
        RowBox[{"k", ";", 
         OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        RowBox[{
         SubscriptBox[
          OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
         OverscriptBox["q", "\[RightVector]"], ")"}], 
        SubscriptBox["m", "k"]], "-", " ", 
       RowBox[{
        FractionBox[
         RowBox[{
          SubscriptBox[
           OverscriptBox["\[Epsilon]", "\[RightVector]"], "j"], "(", 
          OverscriptBox["q", "\[RightVector]"], ")"}], 
         SqrtBox[
          RowBox[{
           SubscriptBox["m", "k"], 
           SubscriptBox["m", "j"]}]]], 
        SuperscriptBox["e", 
         RowBox[{"I", " ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SubscriptBox[
              OverscriptBox["r", "\[RightVector]"], 
              OverscriptBox["m", "\[RightVector]"]], " ", "-", " ", 
             SubscriptBox[
              OverscriptBox["r", "\[RightVector]"], 
              OverscriptBox["n", "\[RightVector]"]]}], ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}]}]]}]}], ")"}]}]}]}], 
  TraditionalForm]]]], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.5980567961741514`*^9}, {
  3.5991430414266324`*^9, 3.5991431578722925`*^9}, {3.5991432045039597`*^9, 
  3.5991434204693127`*^9}, {3.599995184437109*^9, 3.599995299044664*^9}, {
  3.5999955623567247`*^9, 3.59999570266675*^9}, {3.599995845419915*^9, 
  3.599996134802467*^9}, {3.5999964591490183`*^9, 3.599996636408157*^9}, {
  3.6000782740315385`*^9, 3.6000782764963427`*^9}, {3.6000800168821993`*^9, 
  3.600080195362113*^9}, {3.6000802877454753`*^9, 3.6000802964814906`*^9}, {
  3.600819379450795*^9, 3.6008194857548757`*^9}, {3.6008195456733027`*^9, 
  3.6008197257836046`*^9}, {3.600819776466503*^9, 3.6008198064982214`*^9}, {
  3.600819885519741*^9, 3.6008199013896484`*^9}, {3.6008233445915885`*^9, 
  3.6008233557062244`*^9}, {3.600823461634283*^9, 3.6008234639174137`*^9}},
 CellID->323301769],

Cell[TextData[{
 "This describes all the steady state lattice vibrations, the normal modes, \
that can be modelled by this trial solution. Here ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " is a vector in reciprocal space, effectively parameterizing the angular \
velocity ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", " ", "=", " ", 
    RowBox[{"\[Omega]", "(", 
     OverscriptBox["q", "\[RightVector]"], ")"}]}], TraditionalForm]], 
  "InlineMath"],
 ". The vector ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    FormBox[
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{
           SubscriptBox[
            OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
           OverscriptBox["q", "\[RightVector]"], ")"}]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]],
     TraditionalForm], "k"], TraditionalForm]], "InlineMath",
  FormatType->"TraditionalForm"],
 ", is an eigenvector of the equations of motion of the system for this \
assumed solution, where ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Omega]", "2"], TraditionalForm]], "InlineMath"],
 " are the eigenvalues of this system. For an N-atom basis, there are ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", " ", "N"}], TraditionalForm]], "InlineMath",
  FormatType->"TraditionalForm"],
 " such ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Omega]", "2"], TraditionalForm]], "InlineMath"],
 " eigenvalues per ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " point, each resulting in a different characteristic motion."
}], "DetailNotes",
 CellChangeTimes->{{3.6008875562233257`*^9, 3.600887556236326*^9}, {
  3.6012090526877794`*^9, 3.6012090538738976`*^9}, {3.6013825361482735`*^9, 
  3.601382742763091*^9}},
 CellID->72937650],

Cell[TextData[{
 "The rank of the resulting eigenvalue problem depends on the number of \
masses per unit cell, but the complexity of the matrix expression depends on \
the number of neighboring interactions that are considered.",
 " ",
 "For example, given lattice vectors ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], ",", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", diagonals ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["r", "\[RightVector]"], "=", 
     RowBox[{
      OverscriptBox["a", "\[RightVector]"], " ", "+", " ", 
      OverscriptBox["b", "\[RightVector]"]}]}], ",", " ", 
    RowBox[{
     OverscriptBox["s", "\[RightVector]"], "=", 
     RowBox[{
      OverscriptBox["a", "\[RightVector]"], " ", "-", " ", 
      OverscriptBox["b", "\[RightVector]"], " "}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", and a one atom basis, where each unit cell contains a single mass coupled \
with harmonic oscillator forces between only nearest neighbors, the normal \
mode solutions follow from the solution of the eigenvalue problem"
}], "DetailNotes",
 CellChangeTimes->{{3.6008875562233257`*^9, 3.600887556623348*^9}, {
   3.6008880360077677`*^9, 3.600888037934878*^9}, 3.601209054354946*^9},
 CellID->69846009],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          SuperscriptBox["\[Omega]", "2"], "0"},
         {"0", 
          SuperscriptBox["\[Omega]", "2"]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], " ", 
     OverscriptBox["\[Epsilon]", "\[RightVector]"]}], " ", "=", " ", 
    RowBox[{
     FractionBox["4", "m"], 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{
        SubscriptBox["k", 
         RowBox[{"1", " "}]], 
        OverscriptBox["a", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["a", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           OverscriptBox["a", "\[RightVector]"], " ", ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", " ", 
       RowBox[{
        SubscriptBox["k", 
         RowBox[{"2", " "}]], 
        OverscriptBox["b", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["b", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           OverscriptBox["b", "\[RightVector]"], " ", ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", " ", 
       RowBox[{
        SubscriptBox["k", "3"], 
        OverscriptBox["r", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["r", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", " ", 
            RowBox[{
             OverscriptBox["b", "\[RightVector]"], " ", "+", " ", 
             OverscriptBox["a", "\[RightVector]"]}], " ", ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", " ", 
       RowBox[{
        SubscriptBox["k", "4"], 
        OverscriptBox["s", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["s", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", " ", 
            RowBox[{
             OverscriptBox["b", "\[RightVector]"], " ", "-", " ", 
             OverscriptBox["a", "\[RightVector]"]}], " ", ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}]}],
       ")"}], 
     OverscriptBox["\[Epsilon]", "\[RightVector]"]}]}], TraditionalForm]], 
  "InlineMath"],
 "   ",
 " "
}], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.598056894559779*^9}, {
   3.598056950150959*^9, 3.5980569832608523`*^9}, {3.598057031767627*^9, 
   3.598057031774627*^9}, {3.598057330464711*^9, 3.598057330604719*^9}, {
   3.5980584907700768`*^9, 3.5980584911520987`*^9}, {3.5991428674046793`*^9, 
   3.5991429352825613`*^9}, 3.5991434894172564`*^9, {3.599143745937928*^9, 
   3.599143747597023*^9}, {3.599144339776894*^9, 3.599144393338958*^9}, {
   3.5999961526324863`*^9, 3.599996166069255*^9}, {3.6000802839234686`*^9, 
   3.6000802840794687`*^9}, {3.600823510848098*^9, 3.6008235167144337`*^9}, {
   3.6012090548449945`*^9, 3.6012090598194923`*^9}, {3.601209092614772*^9, 
   3.6012090941649265`*^9}},
 CellID->508431597],

Cell[TextData[{
 "Controls are provided to display the dynamics associated with each of the \
characteristic angular frequencies ",
 Cell[BoxData[
  FormBox["\[Omega]", TraditionalForm]]],
 ", for given reciprocal vector values ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 "."
}], "DetailNotes",
 CellID->122369289],

Cell[TextData[{
 "Three tabs are provided in this Demonstration. The primary tab displays the \
dynamics of the solution for particular pair of (",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "(", 
    OverscriptBox["q", "\[RightVector]"], ")"}], TraditionalForm]]],
 ") values. In that tab, selecting run for the time control will animate the \
lattice vibrations. A scaling control is provided to alter the initial \
magnitude of the eigenvectors, tantamount to picking the initial time \
boundary value constraints. Note that it is possible to select physically \
unrealistic scaling factors that allow for collisions that are not modelled \
by this system."
}], "DetailNotes",
 CellChangeTimes->{
  3.601208839708481*^9, {3.6012090601785283`*^9, 3.6012090619407043`*^9}, {
   3.601382813834156*^9, 3.601382893437709*^9}},
 CellID->476930990],

Cell[TextData[{
 "A second tab provides the dispersion relation, the dependence of angular \
velocity ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "(", 
    OverscriptBox["q", "\[RightVector]"], ")"}], TraditionalForm]]],
 " on all ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " points."
}], "DetailNotes",
 CellChangeTimes->{
  3.601209062576768*^9, {3.6013829455216885`*^9, 3.6013829491098933`*^9}},
 CellID->450664638],

Cell[TextData[{
 "Finally, a parameters tab provides controls for the spring constants ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", the primitive unit cell lattice vectors ",
 Cell[BoxData[
  RowBox[{
   OverscriptBox["a", "\[RightVector]"], ",", 
   OverscriptBox["b", "\[RightVector]"]}]], "InlineMath"],
 ", and the positions of the masses ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 " within each unit cell of the lattice. Additional mass position locators, \
up to five total, may be added or deleted by Alt-clicking on the lattice cell \
in the desired location. For mass locator removal, it is neccessary to adjust \
one of the other locators so that the remove takes effect. Note that it is \
possible to select equilibrium mass positions that are too proximate, leading \
to physically unrealistic dynamics, such as masses passing through each other."
}], "DetailNotes",
 CellChangeTimes->{{3.600966198344832*^9, 3.600966236435011*^9}, {
  3.6012090632078314`*^9, 3.6012090644089513`*^9}, {3.601382988189129*^9, 
  3.6013829971846433`*^9}},
 CellID->557416845],

Cell["\<\
Note that the total number of interactions, even when those interactions are \
restricted to just the neighboring lattice cells, increases fast as \
additional masses per cell are added. For example, with three masses per unit \
cell, considering only the neighboring and origin cells, there are 29 \
interactions possible for each mass. To simplify the physical constants \
dialog, which would get unwieldy if methods to choose from all possible \
couplings, distinct \"spring constant\" selection is only available for a \
subset of the possible interactions. This imposes the following respective \
constraints along the \"horizontal\", \"vertical\", \"NE diagonal\", and \"NW \
diagonal\" directions connecting the masses across the cells\
\>", "DetailNotes",
 CellChangeTimes->{{3.6008880438402157`*^9, 3.600888044919277*^9}, {
  3.6012090650310135`*^9, 3.6012090662031307`*^9}},
 CellID->204245605],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"0", ",", "1"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"0", ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", "0"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], ")"}]}], ",", "j"}]]}], 
   TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", "1"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], ")"}]}], ",", "j"}]]}], 
   TraditionalForm]]],
 " ."
}], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.598056894559779*^9}, {
   3.598056950150959*^9, 3.5980569832608523`*^9}, {3.598057031767627*^9, 
   3.598057031774627*^9}, {3.598057330464711*^9, 3.598057446094325*^9}, {
   3.59805756332403*^9, 3.5980575811080475`*^9}, {3.5980576945015335`*^9, 
   3.5980577077462907`*^9}, {3.5980585058849416`*^9, 3.598058539899887*^9}, {
   3.5982726803130836`*^9, 3.598272680323084*^9}, {3.598396857147249*^9, 
   3.598396862212539*^9}, 3.5983970077038608`*^9, {3.5986527341628847`*^9, 
   3.598652736497018*^9}, {3.599142949402369*^9, 3.599142973472746*^9}, {
   3.599144400390361*^9, 3.5991444194934535`*^9}, {3.599144544232588*^9, 
   3.599144772358636*^9}, {3.5991448024383564`*^9, 3.599144812883954*^9}, {
   3.599996318317963*^9, 3.599996379259449*^9}, {3.600076492258809*^9, 
   3.600076523646064*^9}, {3.6000766422374725`*^9, 3.600076689224755*^9}, {
   3.6000767765225077`*^9, 3.6000772270044994`*^9}, {3.6000776433692303`*^9, 
   3.6000781070644455`*^9}, {3.60007816099374*^9, 3.600078188605788*^9}, {
   3.60007853087039*^9, 3.6000790980561857`*^9}, {3.60007913498145*^9, 
   3.6000792378012314`*^9}, {3.6000792689076858`*^9, 3.600079283852512*^9}, {
   3.6000793585454435`*^9, 3.6000793899326982`*^9}, {3.6000794650156302`*^9, 
   3.600079471318041*^9}, {3.600887622755131*^9, 3.6008876400591207`*^9}},
 CellID->325571302],

Cell[TextData[{
 "These are labeled ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "1"], TraditionalForm]], "InlineMath"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "2"], TraditionalForm]], "InlineMath"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "3"], TraditionalForm]], "InlineMath"],
 ", and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "4"], TraditionalForm]], "InlineMath"],
 " in the parameters tab respectively. For example, the first identity above \
is the imposition of an equality constraint on the coupling constants in the \
\"left\" and \"right\" directions separating masses in neighboring \
\"horizontal\" cells (when the lattice is square). Those are the interactions \
directed primarily along the lattice vector directions ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[PlusMinus]", 
    OverscriptBox["a", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 " (primarily since these directions are also adjusted for the positions of \
the masses within the respective cells if different).",
 " ",
 "Similarly, the same coupling constants are used for each of the pairs of \
directions in the that are directed primarily along the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[PlusMinus]", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", \[PlusMinus](",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], " ", "+", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 "), \[PlusMinus](",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], " ", "-", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ") directions separating the lattice cells."
}], "DetailNotes",
 CellChangeTimes->{{3.6008880598061285`*^9, 3.600888064512398*^9}, {
  3.6012090668131914`*^9, 3.6012090675292635`*^9}},
 CellID->64527093],

Cell[TextData[{
 "When there is when there is more than mass per unit cell, distinct coupling \
constants for the intra-cell interactions between the masses within the \
origin unit cell may be selected (i.e. ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["0", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["0", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]]],
 ").",
 " ",
 "These are labeled ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "5"], TraditionalForm]], "InlineMath"],
 " in the parameters tab."
}], "DetailNotes",
 CellChangeTimes->{{3.600887684261649*^9, 3.6008876842696495`*^9}, 
   3.6008880700537148`*^9, 3.6012090681853285`*^9},
 CellID->209290908],

Cell["\<\
General theory describing oscillations around lattice equilibrium points can \
be found in:\
\>", "DetailNotes",
 CellID->30163790],

Cell["\<\
Neil W Ashcroft and N David Mermin. Solid State Physics. Holt, Rinehart and \
Winston, New York, 1976. Chapters 21, 22.\
\>", "DetailNotes",
 CellChangeTimes->{3.601209069027413*^9},
 CellID->213153736]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.600887285796858*^9},
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.600887286596904*^9},
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.6008872914131794`*^9},
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["one atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208909916481*^9}},
 CellID->476564237],

Cell["two atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208912380481*^9}},
 CellID->245358486],

Cell["n atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.6012089151324806`*^9}},
 CellID->584424833],

Cell["lattice vibration", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.6012089173234806`*^9}},
 CellID->103468090],

Cell["phonon", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208919819481*^9}},
 CellID->21953905],

Cell["reciprocal lattice vector", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208922747481*^9}},
 CellID->733906711],

Cell["angular frequency", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208922739481*^9}},
 CellID->200946478]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "RelatedLinksSection"],

Cell[TextData[ButtonBox["Analysis of Lattice Vibrations in Two Dimensions",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/\
AnalysisOfLatticeVibrationsInTwoDimensions/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/\
AnalysisOfLatticeVibrationsInTwoDimensions/"]], "RelatedLinks",
 CellChangeTimes->{{3.598398001761718*^9, 3.5983980017637177`*^9}, {
  3.5983985448847823`*^9, 3.598398544890783*^9}},
 CellID->24498121],

Cell[TextData[ButtonBox["Motion of Atoms in Crystal",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/MotionOfAtomsInCrystal/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/MotionOfAtomsInCrystal/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981123320417`*^9}, {3.5983985249356413`*^9, 
   3.5983985249386415`*^9}},
 CellID->28998832],

Cell[TextData[ButtonBox["Normal Modes in a Periodic Square Lattice",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/NormalModesInAPeriodicSquareLattice/\
"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/NormalModesInAPeriodicSquareLattice/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981127470655`*^9}, {3.5983984299812107`*^9, 
   3.598398430938265*^9}, {3.598398474839776*^9, 3.5983984748437767`*^9}},
 CellID->63968418],

Cell[TextData[ButtonBox["Simple Harmonic Motion for a Spring",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/SimpleHarmonicMotionForASpring/"], 
   None},
 ButtonNote->
  "http://demonstrations.wolfram.com/SimpleHarmonicMotionForASpring/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981127470655`*^9}, {3.5983984299812107`*^9, 
   3.5983984299832106`*^9}, {3.5983985017343144`*^9, 3.598398501741315*^9}},
 CellID->611518950]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell[TextData[{
 "Contributed by: ",
 ButtonBox["Peeter Joot",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Peeter+Joot"], 
    None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Peeter+Joot"]
}], "Author",
 CellChangeTimes->{
  3.600887159561638*^9, {3.601208952954481*^9, 3.601208952959481*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1584, 765},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ResizeImages"->{
  Cell[1312514, 24365, 312, 8, 30, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[1312829, 24375, 719, 17, 30, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "DragLocators"->{
  Cell[1313551, 24394, 381, 12, 30, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "CreateAndDeleteLocators"->{
  Cell[1313935, 24408, 680, 16, 30, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "SliderZoom"->{
  Cell[1314618, 24426, 844, 21, 30, "ControlSuggestions",
   CellTags->"SliderZoom"]},
 "GamepadControls"->{
  Cell[1315465, 24449, 369, 9, 30, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "AutomaticAnimation"->{
  Cell[1315837, 24460, 1464, 31, 30, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[1317304, 24493, 908, 21, 30, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ResizeImages", 1322552, 24645},
 {"RotateAndZoomIn3D", 1322664, 24648},
 {"DragLocators", 1322777, 24651},
 {"CreateAndDeleteLocators", 1322896, 24654},
 {"SliderZoom", 1323013, 24657},
 {"GamepadControls", 1323122, 24660},
 {"AutomaticAnimation", 1323238, 24663},
 {"BookmarkAnimation", 1323358, 24666}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 101, 1, 98, "DemoTitle"],
Cell[683, 25, 33, 0, 365, "InitializationSection"],
Cell[CellGroupData[{
Cell[741, 29, 29, 0, 245, "ManipulateSection"],
Cell[CellGroupData[{
Cell[795, 33, 201311, 4360, 21135, "Input",
 CellID->52826071],
Cell[202109, 4395, 380774, 6672, 606, "Output",
 CellID->663844757]
}, Open  ]],
Cell[582898, 11070, 105, 2, 32, "Input",
 CellID->534877709]
}, Open  ]],
Cell[CellGroupData[{
Cell[583040, 11077, 36, 0, 228, "ManipulateCaptionSection"],
Cell[583079, 11079, 1155, 18, 106, "ManipulateCaption"]
}, Open  ]],
Cell[CellGroupData[{
Cell[584271, 11102, 28, 0, 229, "ThumbnailSection"],
Cell[584302, 11104, 379415, 6650, 606, "Output",
 CellID->496505927]
}, Open  ]],
Cell[CellGroupData[{
Cell[963754, 17759, 28, 0, 189, "SnapshotsSection"],
Cell[963785, 17761, 318334, 5745, 606, "Output",
 CellID->343404192],
Cell[1282122, 23508, 563, 12, 28, "Message",
 CellID->415059657],
Cell[1282688, 23522, 565, 12, 28, "Message",
 CellID->433816277],
Cell[1283256, 23536, 561, 12, 28, "Message",
 CellID->264288021],
Cell[1283820, 23550, 548, 12, 28, "Message",
 CellID->255228475]
}, Open  ]],
Cell[CellGroupData[{
Cell[1284405, 23567, 26, 0, 452, "DetailsSection"],
Cell[1284434, 23569, 1774, 56, 68, "DetailNotes",
 CellID->143536934],
Cell[1286211, 23627, 2521, 81, 66, "DetailNotes",
 CellID->185095190],
Cell[1288735, 23710, 1466, 42, 50, "DetailNotes",
 CellID->413013362],
Cell[1290204, 23754, 1371, 44, 74, "DetailNotes",
 CellID->160232404],
Cell[1291578, 23800, 2874, 70, 55, "DetailNotes",
 CellID->323301769],
Cell[1294455, 23872, 2355, 64, 76, "DetailNotes",
 CellID->72937650],
Cell[1296813, 23938, 1327, 32, 72, "DetailNotes",
 CellID->69846009],
Cell[1298143, 23972, 3782, 100, 59, "DetailNotes",
 CellID->508431597],
Cell[1301928, 24074, 375, 11, 29, "DetailNotes",
 CellID->122369289],
Cell[1302306, 24087, 958, 21, 68, "DetailNotes",
 CellID->476930990],
Cell[1303267, 24110, 488, 15, 29, "DetailNotes",
 CellID->450664638],
Cell[1303758, 24127, 1332, 30, 96, "DetailNotes",
 CellID->557416845],
Cell[1305093, 24159, 914, 14, 86, "DetailNotes",
 CellID->204245605],
Cell[1306010, 24175, 3421, 94, 38, "DetailNotes",
 CellID->325571302],
Cell[1309434, 24271, 1908, 51, 93, "DetailNotes",
 CellID->64527093],
Cell[1311345, 24324, 733, 21, 58, "DetailNotes",
 CellID->209290908],
Cell[1312081, 24347, 141, 4, 28, "DetailNotes",
 CellID->30163790],
Cell[1312225, 24353, 212, 5, 28, "DetailNotes",
 CellID->213153736]
}, Open  ]],
Cell[CellGroupData[{
Cell[1312474, 24363, 37, 0, 168, "ControlSuggestionsSection"],
Cell[1312514, 24365, 312, 8, 30, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[1312829, 24375, 719, 17, 30, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[1313551, 24394, 381, 12, 30, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[1313935, 24408, 680, 16, 30, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[1314618, 24426, 844, 21, 30, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[1315465, 24449, 369, 9, 30, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[1315837, 24460, 1464, 31, 30, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[1317304, 24493, 908, 21, 30, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1318249, 24519, 30, 0, 208, "SearchTermsSection"],
Cell[1318282, 24521, 174, 3, 28, "SearchTerms",
 CellID->476564237],
Cell[1318459, 24526, 174, 3, 28, "SearchTerms",
 CellID->245358486],
Cell[1318636, 24531, 174, 3, 28, "SearchTerms",
 CellID->584424833],
Cell[1318813, 24536, 179, 3, 28, "SearchTerms",
 CellID->103468090],
Cell[1318995, 24541, 165, 3, 28, "SearchTerms",
 CellID->21953905],
Cell[1319163, 24546, 185, 3, 28, "SearchTerms",
 CellID->733906711],
Cell[1319351, 24551, 177, 3, 28, "SearchTerms",
 CellID->200946478]
}, Open  ]],
Cell[CellGroupData[{
Cell[1319565, 24559, 31, 0, 188, "RelatedLinksSection"],
Cell[1319599, 24561, 468, 10, 28, "RelatedLinks",
 CellID->24498121],
Cell[1320070, 24573, 486, 11, 28, "RelatedLinks",
 CellID->28998832],
Cell[1320559, 24586, 575, 12, 28, "RelatedLinks",
 CellID->63968418],
Cell[1321137, 24600, 564, 12, 28, "RelatedLinks",
 CellID->611518950]
}, Open  ]],
Cell[CellGroupData[{
Cell[1321738, 24617, 25, 0, 188, "AuthorSection"],
Cell[1321766, 24619, 384, 11, 28, "Author"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
