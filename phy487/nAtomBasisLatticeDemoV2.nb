(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[   1295807,      23324]
NotebookOptionsPosition[   1290653,      23173]
NotebookOutlinePosition[   1292304,      23223]
CellTagsIndexPosition[   1291952,      23211]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Phonon Modes for 2D Lattice Vibrations\
\>", "DemoTitle",
 CellChangeTimes->{3.600887141142584*^9}],

Cell["", "InitializationSection"],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "\[IndentingNewLine]", 
   RowBox[{"TODO", ":", "\[IndentingNewLine]", 
    RowBox[{GridBox[{
       {
        RowBox[{"Recreate", " ", "snapshots", " ", "and", " ", "thumbnails"}]},
       {
        RowBox[{
         RowBox[{
         "scaling", " ", "of", " ", "the", " ", "mass", " ", "size", " ", 
          "on", " ", "the", " ", "dynamics", " ", "tab", " ", "is", " ", 
          "too", " ", "extreme", " ", "for", " ", "m"}], " ", "=", " ", 
         "10."}]}
      }], "\[IndentingNewLine]", "\[IndentingNewLine]", "Minor", " ", 
     "maintaince", " ", "TODOs", " ", 
     RowBox[{"(", 
      RowBox[{"nice", " ", "to", " ", "haves"}], ")"}]}], ":", 
    "\[IndentingNewLine]", GridBox[{
      {
       RowBox[{
        RowBox[{
        "implement", " ", "a", " ", "min", " ", "separation", " ", "for", " ",
          "the", " ", "equilibrium", " ", "mass", " ", "positions", " ", 
         "too", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
           "as", " ", "done", " ", "for", " ", "the", " ", "lattice", " ", 
            "vectors"}], ")"}], ".", " ", "\[IndentingNewLine]", 
          "Trickier"}]}], ",", " ", 
        RowBox[{
        "since", " ", "that", " ", "should", " ", "be", " ", "based", " ", 
         "on", " ", "the", " ", "separations", " ", "in", " ", "the", " ", 
         "origin", " ", "cell"}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{
        "and", " ", "not", " ", "the", " ", "obsolute", " ", "separations", 
         " ", "of", " ", "the", " ", 
         RowBox[{"locators", "."}]}]}]},
      {
       RowBox[{
       "would", " ", "be", " ", "cool", " ", "to", " ", "make", " ", "qLoc", 
        " ", "a", " ", "pair", " ", "of", " ", "Locators", " ", 
        RowBox[{"that", ":", "\[IndentingNewLine]", " ", 
         RowBox[{
         "trace", " ", "out", " ", "constrained", " ", "positions", " ", 
          "along", " ", "the", " ", "2", " ", "Pi", " ", "scaled", " ", 
          "reciprocal", " ", "lattice", " ", 
          RowBox[{"vectors", ".", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
            "returning", " ", "the", " ", "distance", " ", "from", " ", "the",
              " ", "origin", " ", "of", " ", "each", " ", "of", " ", "those", 
             " ", "locators"}], ")"}]}]}]}]}]},
      {
       RowBox[{"a", " ", "message", " ", "box", " ", "on", " ", "user", " ", 
        RowBox[{"error", ":", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"-", " ", "when"}], " ", "an", " ", "angle", " ", "or", " ",
           "distance", " ", "from", " ", "origin", " ", "change", " ", "has", 
          " ", "driven", " ", "a", " ", "reset", " ", "of", " ", "the", " ", 
          "lattice", " ", 
          RowBox[{"vectors", ".", "\[IndentingNewLine]", 
           RowBox[{"-", " ", "when"}]}], " ", "too", " ", "many", " ", "of", 
          " ", "the", " ", "locators", " ", "have", " ", "been", " ", 
          "deleted", " ", "and", " ", "a", " ", "forced", " ", "reset", " ", 
          "to", " ", "the", " ", "defaults", " ", 
          RowBox[{"occurs", "."}]}]}]}]},
      {
       RowBox[{
        RowBox[{
        "some", " ", "of", " ", "the", " ", "usage", " ", "messages", " ", 
         "are", " ", "now", " ", "out", " ", "of", " ", "date"}], " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
          "all", " ", "commented", " ", "out", " ", "with", " ", "move", " ", 
           "of", " ", "the", " ", "functions", " ", "from", " ", "global", 
           " ", "init", " ", "section", " ", "to", " ", "the", " ", 
           "Manipulate", " ", "Initializer", " ", "section"}], ")"}], "."}]}]},
      {
       RowBox[{
       "Can", " ", "the", " ", "frequency", " ", "qPlaneLoc", " ", 
        "LocatorPane", " ", "look", " ", "more", " ", "like", " ", "Slider2D",
         " ", "in", " ", "the", " ", "dynamics", " ", "tab", " ", "for", " ", 
        RowBox[{"consistency", "?"}]}]},
      {
       RowBox[{
        RowBox[{
        "Am", " ", "using", " ", "a", " ", "calculated", " ", "value", " ", 
         "for", " ", "the", " ", "max", " ", "freq", " ", "for", " ", "the", 
         " ", "freq", " ", "plot", " ", "intersection", " ", 
         RowBox[{"plane", ".", "  ", "\[IndentingNewLine]", "Hardcoded"}], 
         " ", "this", " ", "to", " ", "magic", " ", "#", " ", 
         RowBox[{"that", "'"}], "s", " ", "out", " ", "of", " ", "the", " ", 
         "graphic", " ", 
         RowBox[{"(", "23", ")"}]}], ",", " ", 
        RowBox[{
        "but", " ", "that", " ", "could", " ", "be", " ", "wrong", " ", "for",
          " ", "some", " ", 
         RowBox[{"params", "."}]}]}]}
     },
     GridBoxDividers->{
      "Columns" -> {True, {False}, True}, "ColumnsIndexed" -> {}, 
       "Rows" -> {{True}}, "RowsIndexed" -> {}}]}], "\[IndentingNewLine]", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"tick", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Dynamic", "@", 
      RowBox[{"If", "[", " ", 
       RowBox[{
        RowBox[{"tabNumber", " ", "\[Equal]", " ", "dynTab"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", " ", 
           RowBox[{"bRefreshMatrix", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"matrix", " ", "=", " ", "dynamicsMatrix"}], " ", ";", 
              RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
              RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";", 
              " ", 
              RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
             ")"}], ","}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", " ", 
           RowBox[{"bRefreshDynamics", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"dynamics", " ", "=", " ", "calcDynamics"}], " ", ";", 
              RowBox[{"bRefreshDynamics", " ", "=", " ", "False"}], " ", ";", 
              RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}]}], ")"}], 
            ","}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", " ", 
           RowBox[{"bRefreshDynPlot", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"dynPlot", " ", "=", " ", "showDynamics"}], " ", ";", 
              RowBox[{"bRefreshDynPlot", " ", "=", " ", "False"}]}], ")"}], 
            ","}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"showDynamics", "[", "tau", "]"}]}], "\[IndentingNewLine]", 
         ")"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"tabNumber", " ", "\[Equal]", " ", "freqTab"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", " ", 
             RowBox[{"bRefreshMatrix", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"matrix", " ", "=", " ", "dynamicsMatrix"}], " ", ";", 
                RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
                RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";",
                 " ", 
                RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
               ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"If", "[", " ", 
             RowBox[{"bRefreshFreqPlot", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"freqPlot", " ", "=", " ", "frequencyPlotCalc"}], " ",
                 ";", 
                RowBox[{"bRefreshFreqPlot", " ", "=", " ", "False"}]}], " ", 
               ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
            "showFreqPlot"}], "\[IndentingNewLine]", ")"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          "couplingLocator"}], "\[IndentingNewLine]", " ", "]"}]}], "]"}]}]}],
     " ", 
    RowBox[{"(*", 
     RowBox[{"If", ",", "If"}], "*)"}], " ", "\[IndentingNewLine]", ",", " ", 
    RowBox[{"Dynamic", "@", 
     RowBox[{"If", "[", " ", 
      RowBox[{
       RowBox[{"lastNumMasses", " ", "\[Equal]", " ", "1"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"TabView", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"\"\<dynamics\>\"", " ", "\[Rule]", "  ", 
            RowBox[{"Column", "[", " ", 
             RowBox[{
              RowBox[{"tabNumber", " ", "=", " ", "dynTab"}], " ", ";", 
              "dynamicsControls"}], " ", "]"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{
           "\"\<\[Omega](\!\(\*OverscriptBox[\(q\), \
\(\[RightVector]\)]\))\>\"", " ", "\[Rule]", "  ", 
            RowBox[{"Row", "[", " ", 
             RowBox[{
              RowBox[{"tabNumber", " ", "=", " ", "freqTab"}], " ", ";", 
              "freqControls"}], " ", "]"}]}], "\[IndentingNewLine]", ",", " ", 
           RowBox[{"\"\<parameters\>\"", "\[Rule]", 
            RowBox[{"Grid", "[", " ", 
             RowBox[{
              RowBox[{"tabNumber", " ", "=", " ", "parametersTab"}], " ", ";", 
              RowBox[{"{", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{
               "massSetter", ",", "m2Setter", ",", "km1", ",", "km2", ",", 
                "km3", ",", "km4"}], " ", "}"}]}], " ", "]"}]}]}], 
          "\[IndentingNewLine]", "}"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{"Dynamic", " ", "@", "tabNumber"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"250", ",", "350"}], "}"}]}]}], " ", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"TabView", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"\"\<dynamics\>\"", " ", "\[Rule]", "  ", 
            RowBox[{"Column", "[", " ", 
             RowBox[{
              RowBox[{"tabNumber", " ", "=", " ", "dynTab"}], " ", ";", 
              "dynamicsControls"}], " ", "]"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{
           "\"\<\[Omega](\!\(\*OverscriptBox[\(q\), \
\(\[RightVector]\)]\))\>\"", " ", "\[Rule]", "  ", 
            RowBox[{"Row", "[", " ", 
             RowBox[{
              RowBox[{"tabNumber", " ", "=", " ", "freqTab"}], " ", ";", 
              "freqControls"}], " ", "]"}]}], "\[IndentingNewLine]", ",", " ", 
           RowBox[{"\"\<parameters\>\"", "\[Rule]", 
            RowBox[{"Grid", "[", " ", 
             RowBox[{
              RowBox[{"tabNumber", " ", "=", " ", "parametersTab"}], " ", ";", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<mp: \>\"", ",", " ", 
                   RowBox[{"(", 
                    RowBox[{"\"\<mPosFirstCell\>\"", " ", "/.", " ", "ld"}], 
                    ")"}]}], "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<tn: \>\"", ",", " ", "tabNumber"}], "}"}], 
                 ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<u = \>\"", ",", " ", "u"}], "}"}], ","}], 
                "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"\"\<qr:\>\"", " ", ",", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", 
                    RowBox[{"(", 
                    RowBox[{"\"\<qMaxVec\>\"", " ", "/.", " ", "ld"}], 
                    ")"}]}], ")"}]}], "}"}], ","}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<cd:\>\"", ",", " ", 
                   RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], "}"}], ","}], 
                "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<cd:\>\"", ",", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}]}], "}"}], 
                 ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"\"\<m1Sel, m2Sel, moSel = \>\"", ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"m1Sel", ",", " ", "m2Sel", ",", " ", "moSel"}], 
                    "}"}]}], "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{
                  "\"\<mScalarArray = \>\"", ",", " ", "mScalarArray"}], " ", 
                  "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<range \[Omega]: \>\"", ",", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", "lastNumMasses"}], "]"}]}], "}"}], ","}], 
                "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<kArray = \>\"", ",", " ", "kArray"}], "}"}], 
                 ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<couplingData = \>\"", ",", " ", "couplingData"}], 
                  "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<k1, k2, k3, k4, k5 = \>\"", ",", " ", 
                   RowBox[{"{", 
                    RowBox[{
                    "k1", ",", " ", "k2", ",", " ", "k3", ",", " ", "k4", ",",
                     " ", "k5"}], "}"}]}], "}"}], ","}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<re: \>\"", ",", " ", 
                   RowBox[{"2", " ", "Pi", 
                    RowBox[{"(", 
                    RowBox[{"\"\<reciprocalNorms\>\"", " ", "/.", " ", "ld"}],
                     ")"}]}]}], "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<sc: \>\"", ",", " ", 
                   RowBox[{"DeleteDuplicates", "@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", " ", 
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{"nArray", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
                    RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
                    RowBox[{"foo", "[", "n", "]"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"s", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}],
                     ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", 
                    "1"}], "]"}]}]}], " ", "}"}], ","}], "*)"}], 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{
               "massSetter", ",", "m2Setter", ",", "km1", ",", "km2", ",", 
                "km3", ",", "km4", ",", " ", "km5"}], " ", "}"}]}], " ", 
             "]"}]}]}], "\[IndentingNewLine]", "}"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"Dynamic", " ", "@", "tabNumber"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"250", ",", "350"}], "}"}]}]}], " ", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"tick", ",", "False"}], "}"}], ",", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"qPlaneLoc", ",", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"qLoc", ",", 
        RowBox[{"{", "}"}]}], "}"}], ",", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"tau", ",", "0"}], "}"}], ",", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"omegaIndex", ",", " ", "1"}], "}"}], ",", " ", "None"}], 
     "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"scale", ",", " ", "0.2"}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"meshSize", ",", "8"}], "}"}], ",", "None"}], "}"}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"matrix", ",", " ", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"dynamics", ",", " ", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"dynPlot", ",", " ", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"freqPlot", ",", " ", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bRefreshMatrix", ",", " ", "False"}], "}"}], ",", " ", 
      "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bRefreshDynamics", ",", " ", "False"}], "}"}], ",", " ", 
      "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bRefreshDynPlot", ",", " ", "False"}], "}"}], ",", " ", 
      "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bRefreshFreqPlot", ",", " ", "False"}], "}"}], ",", " ", 
      "None"}], "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"tabNumber", ",", "1"}], "}"}], ",", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"dynTab", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"freqTab", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"parametersTab", ",", " ", "3"}], "}"}], ",", " ", "None"}], 
     "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"minSquaredDistanceFromOrigin", ",", " ", "0.1"}], "}"}], ",", 
      " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"minAngleBetweenLatticeVectors", ",", " ", 
        RowBox[{"Pi", "/", "6"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"locDefault", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0.1", ",", " ", "1.3"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1.9", ",", " ", "0.8"}], "}"}]}], "}"}]}], "}"}], ",", 
      " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"defaultMass", ",", " ", "20"}], "}"}], ",", " ", "None"}], 
     "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "The", " ", "number", " ", "of", " ", "default", " ", "masses", " ", 
      "are", " ", "coupled", " ", "by", " ", "these", " ", "next", " ", 
      "four", " ", 
      RowBox[{"variables", "."}]}], " ", "*)"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"lastNumMasses", ",", " ", "3"}], "}"}], ",", " ", "None"}], 
     "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"mLocDefault", ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0.9", ",", "0.7"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0.4", ",", " ", "1.2"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1.3", ",", " ", "1.4"}], "}"}]}], "}"}]}], "}"}], ",", 
      " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"mScalarArray", ",", " ", 
        RowBox[{"{", 
         RowBox[{"10", ",", " ", "15", ",", " ", "20"}], "}"}]}], "}"}], ",", 
      " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"moSel", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], 
    " ", 
    RowBox[{"(*", " ", 
     RowBox[{"pick", " ", "anything", " ", "that", " ", 
      RowBox[{"isn", "'"}], "t", " ", "m1Sel"}], " ", "*)"}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m1Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m2Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"kArray", ",", " ", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], " ", 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"u", ",", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"ld", ",", " ", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"couplingData", ",", " ", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"springColorsByN", ",", " ", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{"k1", ",", "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{"k2", ",", "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{"k3", ",", "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{"k4", ",", "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{"k5", ",", "None"}], "}"}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"kDefaults", ",", " ", 
        RowBox[{"{", 
         RowBox[{
         "0.25", ",", " ", "0.25", ",", " ", "0.25", ",", " ", "0.25", ",", 
          " ", "0.25"}], "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"kMin", ",", " ", "0.05"}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"kMax", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"mMax", ",", " ", "30"}], "}"}], ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"windowHalfWidth", ",", " ", "3"}], "}"}], ",", " ", "None"}], 
     "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"springColors", ",", 
        RowBox[{"Darker", "@", 
         RowBox[{"{", " ", 
          RowBox[{
          "Orange", ",", "Green", ",", "Purple", ",", "Cyan", ",", "Yellow"}],
           " ", "}"}]}]}], " ", "}"}], " ", ",", " ", "None"}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"primaryDisplaySize", ",", " ", 
        RowBox[{"{", 
         RowBox[{"380", ",", "380"}], "}"}]}], "}"}], ",", " ", "None"}], 
     "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"textDisOffset", ",", " ", 
        RowBox[{"{", 
         RowBox[{"0.25", ",", " ", "0.25"}], "}"}]}], "}"}], ",", " ", 
      "None"}], "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"nArray", ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1", ",", "1"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], " ", "}"}], ",", " ", 
      "None"}], "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
    RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
     RowBox[{"{", "tick", "}"}]}], "\[IndentingNewLine]", ",", 
    RowBox[{"ControlPlacement", "\[Rule]", "Left"}], "\[IndentingNewLine]", 
    ",", 
    RowBox[{"SaveDefinitions", "\[Rule]", "True"}], "\[IndentingNewLine]", 
    ",", 
    RowBox[{"SynchronousInitialization", "\[Rule]", "False"}], 
    "\[IndentingNewLine]", ",", " ", 
    RowBox[{"Initialization", " ", "\[RuleDelayed]", " ", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"u", " ", "=", " ", 
        RowBox[{"Flatten", "[", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"locDefault", ",", " ", "mLocDefault"}], "}"}], ",", " ", 
          "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
       RowBox[{"springColorsByN", " ", "=", " ", 
        RowBox[{"DeleteDuplicates", "@", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"s", " ", 
               RowBox[{
                RowBox[{"Append", "[", 
                 RowBox[{"nArray", ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
                RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
              RowBox[{"springColors", "[", 
               RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"s", ",", " ", 
               RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",",
              " ", 
             RowBox[{"{", 
              RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", "1"}], 
          "]"}]}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Based", " ", "on", " ", "my", " ", "ListLinePlot", " ", "answer", 
         " ", "posted", " ", 
         RowBox[{"in", ":", " ", 
          ButtonBox[
           RowBox[{
            RowBox[{"http", ":"}], "//", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/",
                "a"}], "/", "37228"}], "/", "10"}]}],
           BaseStyle->"Hyperlink",
           ButtonData->{
             URL["http://mathematica.stackexchange.com/a/37228/10"], None},
           ButtonNote->"http://mathematica.stackexchange.com/a/37228/10"]}]}],
         " ", "*)"}], "\n", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"ClearAll", "[", "springPoints", "]"}], " ", ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"springPoints", "::", "usage"}], " ", "=", " ", 
          "\"\<springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]\>\""}], " ", ";"}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"springPoints", "[", " ", 
         RowBox[{"a12_List", ",", " ", 
          RowBox[{"n_Integer:", "8"}], ",", 
          RowBox[{"h_:", ".05"}], ",", " ", 
          RowBox[{"f_:", " ", "0.1"}]}], " ", "]"}], " ", ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "a1", ",", " ", "a2", ",", " ", "n1", ",", " ", "springDiff", ",", 
            " ", "nd", ",", " ", "r", ",", " ", "r1"}], " ", "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", " ", "a2"}], "}"}], " ", "=", " ", "a12"}], 
           " ", ";", "\[IndentingNewLine]", 
           RowBox[{"n1", " ", "=", " ", 
            RowBox[{"Norm", "[", "a1", "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"springDiff", " ", "=", " ", 
            RowBox[{"a2", " ", "-", " ", "a1"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"nd", " ", "=", " ", 
            RowBox[{"Norm", "[", "springDiff", "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"r", " ", "=", " ", 
            RowBox[{"RotationMatrix", "[", 
             RowBox[{"ArcTan", " ", "@@", "  ", "springDiff"}], " ", "]"}]}], 
           " ", ";", "\[IndentingNewLine]", 
           RowBox[{"r1", " ", "=", " ", 
            RowBox[{"r", " ", ".", " ", 
             RowBox[{"{", 
              RowBox[{"n1", ",", " ", "0"}], "}"}]}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Table", "[", " ", 
              RowBox[{
               RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
                RowBox[{"r", " ", ".", " ", 
                 RowBox[{"{", " ", 
                  RowBox[{
                   RowBox[{"n1", " ", "+", " ", 
                    RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                    RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}]}], ",", " ", 
                   RowBox[{"h", " ", 
                    RowBox[{"Sin", "[", " ", 
                    RowBox[{"2", " ", "Pi", " ", "n", " ", "t"}], "]"}]}]}], 
                  "}"}]}]}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}],
                 " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Table", "[", " ", 
              RowBox[{
               RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
                RowBox[{"r", " ", ".", " ", 
                 RowBox[{"{", " ", 
                  RowBox[{
                   RowBox[{"n1", " ", "+", " ", 
                    RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}], " ", "+", " ", 
                    RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
                  "}"}]}]}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}],
                 " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Table", "[", " ", 
              RowBox[{
               RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
                RowBox[{"r", " ", ".", " ", 
                 RowBox[{"{", " ", 
                  RowBox[{
                   RowBox[{"n1", " ", "+", 
                    RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
                  "}"}]}]}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}],
                 " ", "}"}]}], " ", "]"}]}], "\[IndentingNewLine]", "}"}]}]}],
          "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"ClearAll", "[", "indexLabel", "]"}], " ", ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"indexLabel", "::", "usage"}], " ", "=", " ", 
          "\"\<\!\(\*SubscriptBox[\(k\), \(\(i\)\(\\\ \)\)]\)(or other \
character) in italic. indexLabel['k', 1]\>\""}], " ", ";"}], 
        "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"indexLabel", " ", "=", " ", 
        RowBox[{
         RowBox[{"Subscript", "[", 
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{"#1", ",", "Italic"}], "]"}], ",", " ", "#2"}], "]"}], 
         " ", "&"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"ClearAll", "[", "kLable", "]"}], " ", ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"kLable", "::", "usage"}], " ", "=", " ", 
          "\"\<\!\(\*SubscriptBox[\(k\), \(\(i\)\(\\\ \)\)]\)(or other \
character) in italic and colored by spring index. kLable[k]\>\""}], " ", 
         ";"}], "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"kLable", " ", "=", " ", 
        RowBox[{
         RowBox[{"Style", "[", " ", 
          RowBox[{
           RowBox[{"indexLabel", "[", 
            RowBox[{"\"\<k\>\"", ",", " ", "#"}], "]"}], ",", " ", 
           RowBox[{"FontColor", "\[Rule]", 
            RowBox[{"springColors", "[", 
             RowBox[{"[", "#", "]"}], "]"}]}]}], " ", "]"}], " ", "&"}]}], 
       " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"massColors", " ", ":=", " ", 
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Darker", "[", 
            RowBox[{"{", " ", 
             RowBox[{
             "Blue", ",", " ", "Green", ",", " ", "Purple", ",", " ", "Red", 
              ",", " ", "Orange"}], " ", "}"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"Mod", "[", 
              RowBox[{"#", ",", " ", "5"}], "]"}], " ", "+", " ", "1"}], 
            "]"}], " ", "]"}], " ", "&"}], " ", ")"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"massLabel", " ", ":=", " ", 
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{"indexLabel", "[", 
            RowBox[{"\"\<m\>\"", ",", " ", "#"}], "]"}], ",", " ", 
           RowBox[{"massColors", "[", "#", "]"}]}], "]"}], " ", "&"}]}], " ", 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"ClearAll", "[", "calcLineTable", "]"}], " ", ";"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"calcLineTable", "[", " ", 
         RowBox[{"n_List", ",", " ", "b_List", ",", " ", "i_List"}], " ", 
         "]"}], " ", ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"first", ",", " ", "second"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"first", ",", " ", "second"}], "}"}], " ", "=", " ", 
            "i"}], " ", ";", "\[IndentingNewLine]", 
           RowBox[{"Table", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Line", "[", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"n", "[", 
                    RowBox[{"[", "first", "]"}], "]"}]}], 
                  RowBox[{"b", "[", 
                   RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
                 RowBox[{"j", " ", 
                  RowBox[{"b", "[", 
                   RowBox[{"[", "second", "]"}], "]"}]}]}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"n", "[", 
                   RowBox[{"[", "first", "]"}], "]"}], 
                  RowBox[{"b", "[", 
                   RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
                 RowBox[{"j", " ", 
                  RowBox[{"b", "[", 
                   RowBox[{"[", "second", "]"}], "]"}]}]}]}], "}"}], " ", 
              "\[IndentingNewLine]", "]"}], " ", "\[IndentingNewLine]", ",", 
             " ", 
             RowBox[{"{", 
              RowBox[{"j", ",", " ", 
               RowBox[{"-", 
                RowBox[{"n", "[", 
                 RowBox[{"[", "second", "]"}], "]"}]}], ",", " ", 
               RowBox[{"n", "[", 
                RowBox[{"[", "second", "]"}], "]"}]}], "}"}]}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"ClearAll", "[", " ", "calcReciprocalBasis", " ", "]"}], " ",
          ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"calcReciprocalBasis", "::", "usage"}], " ", "=", " ", 
          "\"\<Return a reciprocal frame basis for a set of vectors.  This \
doesn't include the 2 \[Pi] scaling that is common in solid state physics.  \
Example, displaying the desired Kronicker delta behaviour:\n\nb = \
{{2,1},{-1/4, 2}} ;\ng = calcReciprocalBasis[ b ] ;\n\n{g[[1]].loc[[1]],\
\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].loc[[1]],\
\[IndentingNewLine]g[[2]].loc[[2]]}\n\>\""}], " ", ";"}], 
        "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"calcReciprocalBasis", "[", "loc_List", "]"}], " ", ":=", " ", 
        RowBox[{"Inverse", "[", " ", 
         RowBox[{"Transpose", "[", " ", "loc", " ", "]"}], " ", "]"}]}], " ", 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"ClearAll", "[", " ", "pointsTable", " ", "]"}], " ", ";"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"pointsTable", "[", " ", 
         RowBox[{
         "mPosFirstCell_List", ",", " ", "latticeBasis_List", ",", " ", 
          "numberLatticeLinesToDisplay_List"}], " ", "]"}], " ", ":=", " ", 
        RowBox[{"Table", "[", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"mPosFirstCell", " ", "+", " ", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"i", ",", "j"}], "}"}], ".", " ", "latticeBasis"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", 
            RowBox[{"-", 
             RowBox[{"numberLatticeLinesToDisplay", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ",", 
            RowBox[{"numberLatticeLinesToDisplay", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "\[IndentingNewLine]", 
          ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", 
            RowBox[{"-", 
             RowBox[{"numberLatticeLinesToDisplay", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
            RowBox[{"numberLatticeLinesToDisplay", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "\[IndentingNewLine]",
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"nMasses", " ", ":=", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Dimensions", "[", "u", "]"}], " ", "//", " ", "First"}], 
           ")"}], " ", "-", "2"}], ")"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"adjustedmoSel", " ", ":=", " ", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"lastNumMasses", " ", ">", " ", "2"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", " ", "[", 
           RowBox[{
            RowBox[{"moSel", " ", "\[Equal]", " ", "m1Sel"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"First", "[", 
             RowBox[{"DeleteCases", "[", 
              RowBox[{
               RowBox[{"Range", "[", "lastNumMasses", "]"}], ",", "m1Sel"}], 
              "]"}], "]"}], ",", " ", "\[IndentingNewLine]", "moSel"}], "]"}],
           ",", " ", "\[IndentingNewLine]", 
          RowBox[{"First", "@", 
           RowBox[{"Delete", "[", " ", 
            RowBox[{
             RowBox[{"Range", "[", "2", "]"}], ",", " ", "m1Sel"}], "]"}]}]}],
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"constructKArrayElements", "[", " ", 
         RowBox[{"i_Integer", ",", " ", "j_Integer"}], "  ", "]"}], " ", ":=",
         " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "a", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"a", " ", "=", " ", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"i", ",", " ", "j", ",", " ", 
                   RowBox[{"s", " ", 
                    RowBox[{"nArray", "[", 
                    RowBox[{"[", "n", "]"}], "]"}]}]}], "}"}], " ", "\[Rule]",
                  " ", 
                 RowBox[{"kDefaults", "[", 
                  RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"s", ",", " ", 
                  RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], 
                ",", " ", 
                RowBox[{"{", 
                 RowBox[{"n", ",", " ", "4"}], "}"}]}], " ", "]"}], ",", " ", 
              "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"If", " ", "[", " ", 
            RowBox[{
             RowBox[{"i", " ", "<", " ", "j"}], ",", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"a", ",", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"i", ",", "j", ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0"}], "}"}]}], "}"}], " ", "\[Rule]", 
                " ", 
                RowBox[{"kDefaults", "[", 
                 RowBox[{"[", "5", "]"}], "]"}]}]}], "]"}], ",", " ", "a"}], 
            " ", "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"constructKArray", "[", " ", "r_Integer", " ", "]"}], " ", ":=",
         " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"constructKArrayElements", "[", 
             RowBox[{"i", ",", "j"}], "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"i", ",", " ", "r"}], "}"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"j", ",", "r"}], "}"}]}], "]"}], ",", " ", "2"}], 
         "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"alterKArrayElements", "[", " ", 
         RowBox[{"ni_Integer", ",", " ", "v_"}], " ", "]"}], " ", ":=", " ", 
        RowBox[{"(", 
         RowBox[{"kArray", " ", "/.", " ", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Rule", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"m1Sel", ",", "m2Sel", ",", " ", 
                 RowBox[{"nArray", "[", 
                  RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", " ", "_"}], 
              "]"}], " ", "\[RuleDelayed]", " ", 
             RowBox[{"Rule", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"m1Sel", ",", "m2Sel", ",", " ", 
                 RowBox[{"nArray", "[", 
                  RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", " ", "v"}], 
              "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Rule", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"m1Sel", ",", "m2Sel", ",", " ", 
                 RowBox[{"-", 
                  RowBox[{"nArray", "[", 
                   RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", " ", 
               "_"}], "]"}], " ", "\[RuleDelayed]", " ", 
             RowBox[{"Rule", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"m1Sel", ",", "m2Sel", ",", " ", 
                 RowBox[{"-", 
                  RowBox[{"nArray", "[", 
                   RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", " ", 
               "v"}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], " ", ")"}]}],
        " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"alterKarrayOriginElement", "[", "v_", "]"}], " ", ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "m1oSet", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"m1oSet", " ", "=", " ", 
            RowBox[{"Append", "[", 
             RowBox[{
              RowBox[{"Sort", "[", 
               RowBox[{"{", 
                RowBox[{"m1Sel", ",", " ", "moSel"}], "}"}], "]"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"kArray", " ", "/.", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Rule", "[", 
               RowBox[{"m1oSet", ",", " ", "_"}], "]"}], " ", 
              "\[RuleDelayed]", " ", 
              RowBox[{"Rule", "[", 
               RowBox[{"m1oSet", ",", " ", "v"}], "]"}]}], ")"}]}]}]}], 
         "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"To", " ", "refresh", " ", "k1"}], ",", "k2", ",", "k3", ",", 
         RowBox[{
         "k4", " ", "after", " ", "changing", " ", "m1Sel", " ", "or", " ", 
          RowBox[{"m2Sel", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"kArraySelect", "[", " ", "ni_Integer", " ", "]"}], " ", ":=",
         " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"m1Sel", ",", "m2Sel", ",", 
            RowBox[{"nArray", "[", 
             RowBox[{"[", "ni", "]"}], "]"}]}], " ", "}"}], " ", "/.", " ", 
          "kArray"}], ")"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "To", " ", "refresh", " ", "k5", " ", "after", " ", "changing", " ", 
         "m1Sel", " ", "and", " ", "moSel"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"kArrayOriginSelect", " ", ":=", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Append", "[", 
           RowBox[{
            RowBox[{"Sort", "[", 
             RowBox[{"{", 
              RowBox[{"m1Sel", ",", " ", "moSel"}], "}"}], "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}]}], "]"}], " ", " ", "/.", " ", 
          "kArray"}], ")"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"growKarray", "[", " ", "nmNew_Integer", " ", "]"}], " ", ":=",
         " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "k2", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"k2", " ", "=", " ", 
            RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"constructKArrayElements", "[", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                   RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], 
                ")"}], "/@", " ", 
               RowBox[{"(", 
                RowBox[{"Select", "[", 
                 RowBox[{
                  RowBox[{"Flatten", "[", 
                   RowBox[{
                    RowBox[{"Table", "[", " ", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", " ", "nmNew"}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", " ", "nmNew"}], "}"}]}], "]"}], ",", 
                    " ", "1"}], "]"}], ",", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Max", "[", "#", "]"}], " ", "\[Equal]", " ", 
                    "nmNew"}], " ", "&"}]}], "]"}], ")"}]}], ",", " ", "2"}], 
             "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"kArray", ",", " ", "k2"}], "}"}], ",", " ", "1"}], 
            "]"}]}]}], "\[IndentingNewLine]", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", "minAngle_", "]"}],
         " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "t", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"t", " ", "=", " ", 
            RowBox[{"Abs", "[", 
             RowBox[{"ArcCos", "[", 
              RowBox[{
               RowBox[{"Normalize", "[", 
                RowBox[{"u", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", ".", " ", 
               RowBox[{"Normalize", "[", 
                RowBox[{"u", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}], "]"}]}], " ",
            ";", "\[IndentingNewLine]", 
           RowBox[{"t", " ", "=", " ", 
            RowBox[{"If", " ", "[", " ", 
             RowBox[{
              RowBox[{"t", " ", ">", " ", 
               RowBox[{"Pi", "/", "2"}]}], ",", " ", 
              RowBox[{"Pi", "-", "t"}], ",", " ", "t"}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"If", "[", " ", 
            RowBox[{
             RowBox[{"t", " ", "<", " ", "minAngle"}], ",", 
             "\[IndentingNewLine]", "locDefault", ",", " ", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"u", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
               RowBox[{"u", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"ClearAll", "[", " ", "locDependent", " ", "]"}], " ", ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"locDependent", "::", "usage"}], " ", "=", " ", 
          "\"\<Locator dependent calculations (i.e. based on the mass \
positions and the unit cell basis vectors)\n\nExample:\n\n\
locDependent[{1/2,1}, {1,1/2}, {{0.1,0.2} + {1/2,1} + {1,1/2}, {0.3, 0.5} - \
{1/2,1} - {1,1/2}}]\n\nWill see: {0.1,0.2}, {0.3, 0.5} ; as the mPosFirstCell \
values.\n\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"locDependent", " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "m", ",", "latticeBasis", ",", " ", "numberLatticeLinesToDisplay", 
            ",", "reciprocalBasis", ",", "mObliqueComponents", ",", " ", 
            "mPosFirstCell", ",", " ", "reciprocalNorms"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"latticeBasis", " ", "=", 
            RowBox[{"Take", "[", 
             RowBox[{"u", ",", " ", "2"}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"m", " ", "=", " ", 
            RowBox[{"Drop", "[", 
             RowBox[{"u", ",", " ", "2"}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"numberLatticeLinesToDisplay", " ", "=", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Ceiling", "[", "  ", 
                RowBox[{"Abs", "[", 
                 RowBox[{"windowHalfWidth", "/", " ", 
                  RowBox[{
                   RowBox[{"latticeBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}], "[", 
                   RowBox[{"[", "#", "]"}], "]"}]}], "]"}], "]"}], " ", "&"}],
               " ", "/@", " ", 
              RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"reciprocalBasis", " ", "=", " ", 
            RowBox[{
            "calcReciprocalBasis", "[", " ", "latticeBasis", " ", "]"}]}], 
           " ", ";", "\[IndentingNewLine]", 
           RowBox[{"reciprocalNorms", " ", "=", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Norm", "[", 
                RowBox[{"reciprocalBasis", "[", 
                 RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@",
               " ", 
              RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"mObliqueComponents", " ", "=", " ", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"m", "[", 
                RowBox[{"[", " ", "i", " ", "]"}], "]"}], " ", ".", " ", 
               RowBox[{"reciprocalBasis", "[", 
                RowBox[{"[", " ", "j", " ", "]"}], "]"}]}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "lastNumMasses"}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"j", ",", " ", "2"}], "}"}]}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"mPosFirstCell", " ", "=", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"m", "[", 
                 RowBox[{"[", "#", "]"}], "]"}], " ", "-", " ", 
                RowBox[{
                 RowBox[{"Floor", "[", 
                  RowBox[{"mObliqueComponents", "[", 
                   RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", ".", " ", 
                 "latticeBasis"}]}], " ", ")"}], " ", "&"}], " ", "/@", " ", 
             RowBox[{"Range", "[", "lastNumMasses", "]"}]}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
             "\"\<latticeBasis\>\"", " ", "\[Rule]", " ", "latticeBasis"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"\"\<latticeNorms\>\"", "\[Rule]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Norm", "[", 
                  RowBox[{"latticeBasis", "[", 
                   RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@",
                 " ", 
                RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"\"\<latticeUnitVectors\>\"", "\[Rule]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Normalize", "[", 
                  RowBox[{"latticeBasis", "[", 
                   RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@",
                 " ", 
                RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
             "\"\<numberLatticeLinesToDisplay\>\"", "\[Rule]", " ", 
              "numberLatticeLinesToDisplay"}], ",", "\[IndentingNewLine]", 
             RowBox[{
             "\"\<reciprocalBasis\>\"", "\[Rule]", " ", "reciprocalBasis"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{
             "\"\<reciprocalNorms\>\"", "\[Rule]", " ", "reciprocalNorms"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"\"\<qMaxVec\>\"", " ", "\[Rule]", " ", 
              RowBox[{"(", 
               RowBox[{"2", " ", "Pi", " ", "reciprocalNorms"}], ")"}]}], ",",
              "\[IndentingNewLine]", 
             RowBox[{
             "\"\<mObliqueComponents\>\"", "\[Rule]", " ", 
              "mObliqueComponents"}], ",", "\[IndentingNewLine]", 
             RowBox[{
             "\"\<mPosFirstCell\>\"", "\[Rule]", " ", "mPosFirstCell"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"\"\<pointsDataTable\>\"", "\[Rule]", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"pointsTable", "[", 
                   RowBox[{
                    RowBox[{"mPosFirstCell", "[", 
                    RowBox[{"[", "#", "]"}], "]"}], ",", "latticeBasis", ",", 
                    "numberLatticeLinesToDisplay"}], "]"}], ")"}], " ", "&"}],
                 "/@", " ", 
                RowBox[{"Range", "[", "lastNumMasses", "]"}]}], ")"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"\"\<lineTable\>\"", " ", "\[Rule]", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"calcLineTable", "[", " ", 
                  RowBox[{
                  "numberLatticeLinesToDisplay", ",", " ", "latticeBasis", 
                   ",", " ", "#"}], " ", "]"}], " ", "&"}], " ", "/@", " ", 
                RowBox[{"Permutations", "[", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ")"}]}]}], 
            "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"ClearAll", "[", " ", "projOp", " ", "]"}], " ", ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"projOp", "::", "usage"}], " ", "=", " ", 
          "\"\<given an input vector \!\(\*OverscriptBox[\(v\), \(\
\[RightVector]\)]\) = {\!\(\*SubscriptBox[\(v\), \(x\)]\), \
\!\(\*SubscriptBox[\(v\), \(y\)]\)}, compute the projection matrix operator \
along the unit vector in that direction.\n\n   projOp[{1, 0}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"1\", \"0\"},
{\"0\", \"0\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{0, 1}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"0\", \"0\"},
{\"0\", \"1\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{a,b}] // MatrixForm = \!\
\(\*Cell[TextData[Cell[BoxData[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{
FractionBox[
SuperscriptBox[\"a\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]},
{
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
SuperscriptBox[\"b\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}]],
CellChangeTimes->{{3.5990911441851797`*^9, 3.599091144641206*^9}, \
3.5990913830438423`*^9, 3.5990915191646276`*^9, 3.599091555028679*^9, \
3.599091735722014*^9, {3.599091916353346*^9, 3.599091928988068*^9}}]]]\)\n\
\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"projOpU", "[", "v_List", "]"}], " ", ":=", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"v", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "^", "2"}], ",", " ", 
            RowBox[{
             RowBox[{"v", "[", 
              RowBox[{"[", "1", "]"}], "]"}], 
             RowBox[{"v", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"v", "[", 
              RowBox[{"[", "1", "]"}], "]"}], 
             RowBox[{"v", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
            RowBox[{
             RowBox[{"v", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "^", "2"}]}], "}"}]}], "}"}]}], 
       " ", ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"projOp", "[", "v_List", "]"}], " ", ":=", " ", 
        RowBox[{
         RowBox[{"projOpU", "[", "v", "]"}], "/", 
         RowBox[{"(", 
          RowBox[{"v", ".", " ", "v"}], ")"}]}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
          RowBox[{"ClearAll", "[", " ", "relativeDifferences", " ", "]"}], 
          " ", ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"relativeDifferences", "::", "usage"}], " ", "=", " ", 
           "\"\<Example: relativeDifferences[ {aLoc,bLoc}, {mLoc1, mLoc2, \
...}, kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: \
(kArray[[1]] /. Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, \
{nIndex1, nIndex2}}\>\""}]}], ",", " ", 
         RowBox[{
          RowBox[{
          "is", " ", "a", " ", "tuple", " ", "for", " ", "the", " ", "spring",
            " ", "constant", " ", "between", " ", "m1", " ", "in", " ", "the",
            " ", "origin", " ", "cell", " ", "to", " ", "m2", " ", "in", " ", 
           "the", " ", "lattice", " ", "cell", " ", 
           RowBox[{"{", 
            RowBox[{"n1", ",", "n2"}], "}"}]}], " ", ";"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"relativeDifferences", "[", " ", 
         RowBox[{"r_List", ",", "mp_List", ",", " ", 
          RowBox[{"{", 
           RowBox[{
           "mIndex1_Integer", ",", " ", "mIndex2_Integer", ",", " ", 
            "n_List"}], "}"}]}], "]"}], " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"d", ",", " ", "pOrigin", ",", " ", "pOther"}], "}"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pOrigin", " ", "=", " ", 
            RowBox[{"mp", "[", 
             RowBox[{"[", " ", "mIndex1", " ", "]"}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"pOther", " ", "=", " ", 
            RowBox[{
             RowBox[{"mp", "[", 
              RowBox[{"[", " ", "mIndex2", " ", "]"}], "]"}], "+", " ", 
             RowBox[{"n", " ", ".", " ", "r"}]}]}], "  ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"d", " ", "=", " ", 
            RowBox[{"pOther", " ", "-", " ", "pOrigin"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"dn", " ", "=", " ", 
            RowBox[{"d", " ", ".", "d"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{"dn", ",", " ", "pOrigin", ",", " ", "pOther", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"projOpU", "[", "d", "]"}], "/", "dn"}], "  ", 
              RowBox[{"(*", 
               RowBox[{"//", " ", "MatrixForm"}], "*)"}], ")"}]}], 
            "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"ClearAll", "[", " ", "calculateCouplings", " ", "]"}], " ", 
         ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"calculateCouplings", "::", "usage"}], " ", "=", " ", 
          "\"\<Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions.\>\""}], 
         " ", ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"calculateCouplings", " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "t", ",", " ", "t1", ",", " ", "t2", ",", " ", "r", ",", " ", 
            "mp"}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"r", ",", " ", "mp"}], "}"}], " ", "=", " ", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "\"\<latticeBasis\>\"", ",", " ", "\"\<mPosFirstCell\>\""}], 
              "}"}], " ", "/.", " ", "ld"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"t", " ", "=", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"Append", "[", 
               RowBox[{"#", ",", " ", 
                RowBox[{"relativeDifferences", "[", 
                 RowBox[{"r", ",", " ", "mp", ",", " ", 
                  RowBox[{"First", "[", "#", "]"}]}], "]"}]}], " ", "]"}], 
              "&"}], "/@", " ", 
             RowBox[{"(", 
              RowBox[{"kArray", " ", "/.", " ", 
               RowBox[{"Rule", " ", "\[Rule]", " ", "List"}]}], ")"}]}]}], 
           " ", ";", "\[IndentingNewLine]", 
           RowBox[{"t", " ", "=", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                  RowBox[{"{", 
                   RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "}"}], ",", " ", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "3", "]"}], "]"}]}], "}"}], ",", " ", "1"}], 
               "]"}], " ", "&"}], "/@", " ", "t"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"t1", " ", "=", " ", 
            RowBox[{"Table", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Sort", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"Select", "[", " ", 
                  RowBox[{"t", ",", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                    "i"}], ")"}], " ", "&&", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "\[NotEqual]", " ", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0"}], "}"}]}], ")"}]}], " ", 
                    "&"}]}], "]"}], ")"}], ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#1", "[", 
                   RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
                  RowBox[{"#2", "[", 
                   RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
              "\[IndentingNewLine]", ",", " ", 
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "lastNumMasses"}], "}"}]}], 
             "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"t2", " ", "=", " ", 
            RowBox[{"Select", "[", " ", 
             RowBox[{"t", ",", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], " ", "==", " ", 
                RowBox[{"{", 
                 RowBox[{"0", ",", " ", "0"}], "}"}]}], " ", "&"}]}], "]"}]}],
            " ", ";", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"the", " ", "rest", " ", "of", " ", "the", " ", 
             RowBox[{"permutations", ":"}]}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"t2", " ", "=", " ", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"t2", ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Flatten", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", " ", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}]}], "}"}], ",", " ", 
                    "1"}], "]"}], " ", "&"}], "/@", " ", "t2"}]}], "}"}], ",",
               " ", "1"}], "]"}]}], "  ", ";", "\[IndentingNewLine]", 
           RowBox[{"t2", " ", "=", " ", 
            RowBox[{"Table", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Sort", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"Select", "[", " ", 
                  RowBox[{"t2", ",", " ", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                    "i"}], ")"}], " ", "&"}]}], "]"}], ")"}], ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#1", "[", 
                   RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
                  RowBox[{"#2", "[", 
                   RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
              "\[IndentingNewLine]", ",", " ", 
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "lastNumMasses"}], "}"}]}], 
             "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"t2", ",", " ", "t1"}], "}"}]}]}], "\[IndentingNewLine]", 
         "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"ClearAll", "[", " ", "plotSprings", " ", "]"}], " ", ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"plotSprings", "::", "usage"}], " ", "=", " ", 
          "\"\<Example:\n\nModule[{ld},\[IndentingNewLine]ld = \
locDependent[{1/2,1}, {1,1/2}, {{0.1,1.2} + {1/2,1} + {1,1/2}, {1.3, 0.5} - \
{1/2,1} - {1,1/2}}] ;\[IndentingNewLine]plotSprings[{10,20}, ld ] \
\[IndentingNewLine]]\n\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"plotSprings", " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "aLoc", ",", " ", "bLoc", ",", "mLoc", ",", "pointsList", ",", 
            "latticeBasis", ",", "reciprocalBasis", ",", "pointsDataTable", 
            ",", " ", "numberLatticeLinesToDisplay", ",", " ", "lines", ",", 
            " ", "cOrigin", ",", " ", "cN", ",", " ", "g"}], "}"}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"latticeBasis", " ", "=", " ", 
            RowBox[{"Take", "[", " ", 
             RowBox[{"u", ",", " ", "2"}], " ", "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"aLoc", " ", "=", " ", 
            RowBox[{"u", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"bLoc", " ", "=", " ", 
            RowBox[{"u", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "mLoc", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
              "numberLatticeLinesToDisplay", ",", " ", "lines"}], "}"}], "=", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "\"\<mPosFirstCell\>\"", ",", "\"\<reciprocalBasis\>\"", ",", 
               "\"\<pointsDataTable\>\"", ",", 
               "\"\<numberLatticeLinesToDisplay\>\"", ",", " ", 
               "\"\<lineTable\>\""}], "}"}], "  ", "/.", " ", "ld"}]}], "  ", 
           ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"pointsList", "[", "n_Integer", "]"}], " ", ":=", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"massColors", "[", "n", "]"}], ",", 
              "\[IndentingNewLine]", ",", 
              RowBox[{"PointSize", "[", 
               RowBox[{"Sqrt", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"mScalarArray", "[", 
                   RowBox[{"[", "n", "]"}], "]"}], "/", "mMax"}], "/", 
                 "500"}], "]"}], "]"}], "\[IndentingNewLine]", ",", 
              RowBox[{
               RowBox[{
                RowBox[{"Point", "[", " ", "#", " ", "]"}], " ", "&"}], " ", "/@",
                " ", 
               RowBox[{"pointsDataTable", "[", 
                RowBox[{"[", "n", "]"}], "]"}]}], "\[IndentingNewLine]", ",", 
              RowBox[{"Text", "[", 
               RowBox[{
                RowBox[{"massLabel", "[", " ", "n", "]"}], ",", 
                RowBox[{
                 RowBox[{"mLoc", "[", 
                  RowBox[{"[", "n", "]"}], "]"}], " ", "+", " ", 
                 "textDisOffset"}]}], "]"}]}], "\[IndentingNewLine]", "}"}]}],
            " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"cOrigin", " ", "=", " ", 
            RowBox[{"Select", "[", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"couplingData", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "[", 
               RowBox[{"[", "m1Sel", "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{
                RowBox[{"Take", "[", 
                 RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", " ", 
                RowBox[{"{", 
                 RowBox[{"m1Sel", ",", " ", "moSel"}], "}"}]}], " ", "&"}]}], 
             " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
           RowBox[{"cN", " ", "=", " ", 
            RowBox[{"Select", "[", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"couplingData", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "[", 
               RowBox[{"[", "m1Sel", "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{
                RowBox[{"Take", "[", 
                 RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
                RowBox[{"{", 
                 RowBox[{"m1Sel", ",", " ", "m2Sel"}], "}"}]}], "&"}]}], " ", 
             "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"g", " ", "=", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"springPoints", "[", " ", 
                 RowBox[{"Take", "[", 
                  RowBox[{"#", ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"6", ",", "7"}], "}"}]}], "]"}], " ", "]"}], " ", 
                ",", "\[IndentingNewLine]", 
                RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
                "\[IndentingNewLine]", 
                RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                   "springColorsByN"}], ")"}]}]}], " ", "]"}], " ", "&"}], "/@",
              " ", "cN"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"If", " ", "[", " ", 
            RowBox[{
             RowBox[{"lastNumMasses", " ", ">", " ", "1"}], ",", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"g", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"springPoints", "[", " ", 
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", "7"}], "}"}]}], "]"}], " ", "]"}], " ", 
                   ",", "\[IndentingNewLine]", 
                   RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
                   "\[IndentingNewLine]", 
                   RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                    "springColorsByN"}], ")"}]}]}], " ", "]"}], " ", "&"}], "/@",
                 " ", "cOrigin"}]}], "]"}], ","}], " ", "]"}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"Show", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Graphics", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Flatten", "[", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"lines", "\[IndentingNewLine]", ",", "Blue", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"reciprocalBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                    RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]",
                     ",", "Thick", ",", 
                    RowBox[{"Arrowheads", "[", "0.05", "]"}], 
                    "\[IndentingNewLine]", ",", "Red", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"latticeBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                    RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]",
                     ",", 
                    RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"aLoc", "/", "2"}], " ", "+", " ", 
                    "textDisOffset"}]}], "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"bLoc", "/", "2"}], " ", "+", " ", 
                    "textDisOffset"}]}], "]"}]}], "\[IndentingNewLine]", 
                    "}"}], ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"pointsList", "[", "#", "]"}], " ", "&"}], "/@", 
                    " ", 
                    RowBox[{"Range", "[", "lastNumMasses", "]"}]}]}], 
                  "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", 
                ",", 
                RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "windowHalfWidth"}], "/", "2"}], ",", " ", 
                    "windowHalfWidth"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "windowHalfWidth"}], "/", "2"}], ",", " ", 
                    "windowHalfWidth"}], "}"}]}], "}"}]}], 
                "\[IndentingNewLine]", ",", 
                RowBox[{"ImageSize", "\[Rule]", "primaryDisplaySize"}]}], 
               "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
              "g"}], "\[IndentingNewLine]", "}"}], " ", "]"}]}]}], " ", 
         "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"couplingLocator", " ", ":=", 
        RowBox[{"LocatorPane", "[", " ", 
         RowBox[{
          RowBox[{"Dynamic", "[", 
           RowBox[{"u", ",", 
            RowBox[{
             RowBox[{"(", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"u", " ", "=", " ", 
                RowBox[{"If", " ", "[", " ", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], "<", "3"}], ",", " ", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Flatten", "[", " ", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"locDefault", ",", " ", "mLocDefault"}], "}"}], 
                    ",", " ", "1"}], "]"}], ",", " ", "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{
                    "cap", " ", "the", " ", "number", " ", "of", " ", 
                    "Locators", " ", "at", " ", "5"}], ",", " ", 
                    RowBox[{
                    "so", " ", "the", " ", "selection", " ", "Pane", " ", 
                    RowBox[{"doesn", "'"}], "t", " ", "start", " ", 
                    "truncating", " ", 
                    RowBox[{"the", " ", "'"}], "to", " ", 
                    RowBox[{"neighbouring", "'"}], " ", "SetterBar"}]}], " ", 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"If", "[", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], " ", ">", " ", "7"}], ",", " ", 
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", "7"}], "]"}], ",", " ", "#"}], "]"}]}], 
                 " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{
                 "This", " ", "assumes", " ", "just", " ", "one", " ", 
                  "added", " ", "at", " ", "a", " ", "time"}], ",", " ", 
                 RowBox[{
                  RowBox[{"but", " ", 
                   RowBox[{"that", "'"}], "s", " ", "probably", " ", 
                   RowBox[{"okay", ".", "  ", "Only"}], " ", "Alt"}], "-", 
                  RowBox[{
                  "click", " ", "delete", " ", "of", " ", "one", " ", "at", 
                   " ", "a", " ", "time", " ", "appears", " ", 
                   RowBox[{"possible", "."}]}]}]}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"mScalarArray", ",", "kArray"}], "}"}], " ", "=", 
                RowBox[{"If", " ", "[", " ", 
                 RowBox[{
                  RowBox[{"nMasses", " ", ">", " ", "lastNumMasses"}], ",", 
                  " ", "\[IndentingNewLine]", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{"mScalarArray", ",", " ", "defaultMass"}], "]"}], 
                    ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"growKarray", "[", "nMasses", "]"}]}], 
                   "\[IndentingNewLine]", "}"}], ",", " ", 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"mScalarArray", ",", " ", "nMasses"}], " ", "]"}],
                     ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"Select", "[", 
                    RowBox[{"kArray", ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "\[LessEqual]", "  ", "nMasses"}], "&"}]}], "]"}]}], 
                   "\[IndentingNewLine]", "}"}]}], "]"}]}], " ", ";", " ", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                 "lattice", " ", "vector", " ", "end", " ", "points", " ", 
                 "to", " ", "be", " ", "too", " ", "close", " ", "to", " ", 
                 "the", " ", "origin"}], " ", "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"u", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", 
                RowBox[{"If", "[", " ", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "<", " ", 
                   "minSquaredDistanceFromOrigin"}], ",", " ", 
                  RowBox[{"locDefault", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                  RowBox[{"u", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"u", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", 
                RowBox[{"If", "[", " ", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ".", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], " ", "<", " ", 
                   "minSquaredDistanceFromOrigin"}], ",", " ", 
                  RowBox[{"locDefault", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                  RowBox[{"u", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                 "angle", " ", "between", " ", "lattice", " ", "vectors", " ",
                  "get", " ", "too", " ", "small"}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"u", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                  RowBox[{"u", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "}"}], " ", "=", " ", 
                RowBox[{
                "resetLatticeVectorsIfAngleTooSmall", "[", " ", 
                 "minAngleBetweenLatticeVectors", " ", "]"}]}], " ", ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"lastNumMasses", " ", "=", " ", "nMasses"}], " ", ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                "These", " ", "are", " ", "in", " ", "case", " ", "the", " ", 
                 "number", " ", "of", " ", "locators", " ", "were", " ", 
                 "changed", " ", "and", " ", "we", " ", "have", " ", "a", " ",
                  "mass", " ", "selected", " ", "that", " ", "is", " ", "now",
                  " ", 
                 RowBox[{"invalid", "."}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"m1Sel", " ", "=", " ", 
                RowBox[{"If", " ", "[", " ", 
                 RowBox[{
                  RowBox[{"m1Sel", " ", ">", "lastNumMasses"}], ",", " ", "1",
                   ",", " ", "m1Sel"}], "]"}]}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{"m2Sel", " ", "=", " ", 
                RowBox[{"If", " ", "[", " ", 
                 RowBox[{
                  RowBox[{"m2Sel", " ", ">", "lastNumMasses"}], ",", " ", "1",
                   ",", " ", "m2Sel"}], "]"}]}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{"moSel", " ", "=", " ", 
                RowBox[{"If", " ", "[", " ", 
                 RowBox[{
                  RowBox[{"moSel", " ", ">", "lastNumMasses"}], ",", " ", "1",
                   ",", " ", "moSel"}], " ", "]"}]}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{"moSel", " ", "=", " ", "adjustedmoSel"}], " ", ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                 "Adjust", " ", "these", " ", "for", " ", "Slider", " ", 
                  "display", " ", "in", " ", "case", " ", "m1Sel"}], ",", " ",
                  "m2Sel", ",", " ", 
                 RowBox[{
                 "or", " ", "moSel", " ", "were", " ", "changed", " ", "just",
                   " ", 
                  RowBox[{"above", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"k1", " ", "=", " ", 
                RowBox[{"kArraySelect", "[", "1", "]"}]}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{"k2", " ", "=", " ", 
                RowBox[{"kArraySelect", "[", "2", "]"}]}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{"k3", " ", "=", " ", 
                RowBox[{"kArraySelect", "[", "3", "]"}]}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{"k4", " ", "=", " ", 
                RowBox[{"kArraySelect", "[", "4", "]"}]}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{"k5", " ", "=", " ", "kArrayOriginSelect"}], " ", ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"ld", " ", "=", " ", "locDependent"}], " ", ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"Reset", " ", "in", " ", "case", " ", "a"}], ",", 
                 RowBox[{"or", " ", "b", " ", "changed"}], ",", " ", 
                 RowBox[{
                 "and", " ", "the", " ", "last", " ", "selected", " ", 
                  "value", " ", "is", " ", "now", " ", "out", " ", "of", " ", 
                  RowBox[{"range", "."}]}]}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"qLoc", " ", "=", " ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"\"\<qMaxVec\>\"", " ", "/.", " ", "ld"}], ")"}], 
                 "/", "2"}]}], " ", ";", "\[IndentingNewLine]", 
               RowBox[{"qPlaneLoc", " ", "=", " ", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"couplingData", " ", "=", " ", "calculateCouplings"}], 
               " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", ";", 
               "\[IndentingNewLine]", 
               RowBox[{"tick", "=", 
                RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], "]"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"Why", " ", 
             RowBox[{"doesn", "'"}], "t", " ", "Alt"}], "-", 
            RowBox[{
            "click", " ", "to", " ", "remove", " ", "existing", " ", 
             "Locator", " ", "refresh", " ", "this", " ", 
             RowBox[{"plot", "?", "  ", 
              RowBox[{"Workaround", ":", " ", 
               RowBox[{
               "move", " ", "one", " ", "of", " ", "the", " ", "other", " ", 
                "locators", " ", "to", " ", "refresh"}]}]}]}]}], " ", "*)"}], 
          "\[IndentingNewLine]", "plotSprings", ",", "\[IndentingNewLine]", 
          RowBox[{"LocatorAutoCreate", "\[Rule]", "True"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
         "\[IndentingNewLine]", "]"}]}], "  ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"massSetter", " ", ":=", " ", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Text", "[", "\"\<mass: \>\"", "]"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"If", " ", "[", " ", 
               RowBox[{
                RowBox[{"lastNumMasses", " ", ">", " ", "1"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"m1Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m1Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"kArraySelect", "[", "1", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"kArraySelect", "[", "2", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"kArraySelect", "[", "3", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"kArraySelect", "[", "4", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"moSel", " ", "=", " ", "adjustedmoSel"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", "kArrayOriginSelect"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], ",", " ", "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", " ", "]"}]}], "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "lastNumMasses", "]"}]}], ")"}]}], 
                 "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
               "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "}"}],
            "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"massValue", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"massValue", " ", "=", " ", "#"}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "=", "massValue"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{"0.25", ",", 
                 RowBox[{"Dynamic", "@", "mMax"}]}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
               RowBox[{"AppearanceElements", "\[Rule]", 
                RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
              "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
             "\"\< \>\"", ",", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"NumberForm", "[", 
               RowBox[{
                RowBox[{"mScalarArray", "[", 
                 RowBox[{"[", "m1Sel", "]"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "1"}], "}"}]}], "]"}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
         "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"m2Setter", " ", ":=", " ", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
          "Text", "[", "\"\<coupling to neighbouring: \>\"", " ", "]"}], ",", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"Dynamic", "@", 
           RowBox[{"If", " ", "[", " ", 
            RowBox[{
             RowBox[{"lastNumMasses", " ", ">", " ", "1"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"m2Sel", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"m2Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"kArraySelect", "[", "1", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"kArraySelect", "[", "2", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"kArraySelect", "[", "3", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"kArraySelect", "[", "4", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], ",", " ", "\[IndentingNewLine]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#", " ", "\[Rule]", " ", 
                   RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                  " ", 
                 RowBox[{"Range", "[", "lastNumMasses", "]"}]}], ")"}]}], 
              "\[IndentingNewLine]", "]"}], ",", 
             RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
       " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"km1", " ", ":=", " ", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{"{", " ", 
            RowBox[{
             RowBox[{"Text", "@", "\"\<horizontal: \>\""}], ",", 
             RowBox[{"kLable", "[", "1", "]"}], ",", " ", "\"\< || \>\"", ",",
              " ", 
             RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", 
             "\"\< \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"k1", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"k1", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"alterKArrayElements", "[", " ", 
                    RowBox[{"1", ",", " ", "k1"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    "couplingData", " ", "=", " ", "calculateCouplings"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Dynamic", "@", "kMin"}], ",", 
                 RowBox[{"Dynamic", "@", "kMax"}]}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
               RowBox[{"AppearanceElements", "\[Rule]", 
                RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
              "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
             "\[IndentingNewLine]", "\"\< \>\"", ",", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"NumberForm", "[", 
               RowBox[{"k1", ",", 
                RowBox[{"{", 
                 RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
         "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"km2", " ", ":=", " ", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{"{", " ", 
            RowBox[{
             RowBox[{"Text", "@", "\"\<vertical: \>\""}], ",", 
             RowBox[{"kLable", "[", "2", "]"}], ",", " ", "\"\< || \>\"", ",",
              " ", 
             RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", 
             "\"\< \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"k2", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"k2", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"alterKArrayElements", "[", " ", 
                    RowBox[{"2", ",", " ", "k2"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    "couplingData", " ", "=", " ", "calculateCouplings"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Dynamic", "@", "kMin"}], ",", 
                 RowBox[{"Dynamic", "@", "kMax"}]}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
               RowBox[{"AppearanceElements", "\[Rule]", 
                RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
              "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
             "\"\< \>\"", ",", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"NumberForm", "[", 
               RowBox[{"k2", ",", 
                RowBox[{"{", 
                 RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], "]"}]}], " ", "\[IndentingNewLine]",
          "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"km3", " ", ":=", " ", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{"{", " ", 
            RowBox[{
             RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
             RowBox[{"kLable", "[", "3", "]"}], ",", " ", "\"\< || (\>\"", 
             ",", "  ", 
             RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
             "\"\< + \>\"", ",", " ", 
             RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
             "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"k3", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"k3", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"alterKArrayElements", "[", " ", 
                    RowBox[{"3", ",", " ", "k3"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    "couplingData", " ", "=", " ", "calculateCouplings"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Dynamic", "@", "kMin"}], ",", 
                 RowBox[{"Dynamic", "@", "kMax"}]}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
               RowBox[{"AppearanceElements", "\[Rule]", 
                RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
              "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
             "\"\< \>\"", ",", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"NumberForm", "[", 
               RowBox[{"k3", ",", 
                RowBox[{"{", 
                 RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
         "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"km4", " ", ":=", " ", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{"{", " ", 
            RowBox[{
             RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
             RowBox[{"kLable", "[", "4", "]"}], ",", " ", "\"\< || (\>\"", 
             ",", "  ", 
             RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
             "\"\< - \>\"", ",", " ", 
             RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
             "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"k4", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"k4", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"alterKArrayElements", "[", " ", 
                    RowBox[{"4", ",", " ", "k4"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    "couplingData", " ", "=", " ", "calculateCouplings"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Dynamic", "@", "kMin"}], ",", 
                 RowBox[{"Dynamic", "@", "kMax"}]}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
               RowBox[{"AppearanceElements", "\[Rule]", 
                RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
              "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
             "\"\< \>\"", ",", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"NumberForm", "[", 
               RowBox[{"k4", ",", 
                RowBox[{"{", 
                 RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
         "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"km5", " ", ":=", " ", 
        RowBox[{"{", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{"{", " ", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Text", "@", "\"\<origin coupling from \>\""}], ",", " ", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"massLabel", "[", " ", "m1Sel", "]"}]}], ",", 
             RowBox[{"Text", "@", "\"\< to \>\""}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"If", " ", "[", " ", 
               RowBox[{
                RowBox[{"lastNumMasses", " ", ">", " ", "2"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"moSel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"moSel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", "kArrayOriginSelect"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], ",", " ", "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                     " ", 
                    RowBox[{"(", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", "lastNumMasses", "]"}], ",", 
                    "m1Sel"}], "]"}], ")"}]}], ")"}]}], "\[IndentingNewLine]",
                  "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"Dynamic", "@", 
                 RowBox[{"massLabel", "[", " ", 
                  RowBox[{"First", "@", 
                   RowBox[{"Delete", "[", " ", 
                    RowBox[{
                    RowBox[{"Range", "[", "2", "]"}], ",", " ", "m1Sel"}], 
                    "]"}]}], " ", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
             "\[IndentingNewLine]", ",", " ", "\"\< \>\"", ",", " ", 
             RowBox[{"kLable", "[", "5", "]"}], ",", " ", "\"\<: \>\""}], 
            "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"k5", ",", 
                 RowBox[{
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"k5", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{
                    "alterKarrayOriginElement", "[", " ", "k5", " ", "]"}]}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{
                    "couplingData", " ", "=", " ", "calculateCouplings"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Dynamic", "@", "kMin"}], ",", 
                 RowBox[{"Dynamic", "@", "kMax"}]}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
               RowBox[{"AppearanceElements", "\[Rule]", 
                RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
              "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{",", " ", 
                RowBox[{"Enabled", " ", "\[Rule]", " ", 
                 RowBox[{"(", 
                  RowBox[{"lastNumMasses", " ", ">", " ", "1"}], ")"}]}]}], 
               "*)"}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
             ",", "\"\< \>\"", ",", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"NumberForm", "[", " ", 
               RowBox[{"k5", ",", 
                RowBox[{"{", 
                 RowBox[{"3", ",", "2"}], "}"}]}], "]"}]}]}], 
            "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
         "}"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"freqControls", " ", ":=", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{"{", " ", 
            RowBox[{
             RowBox[{"Text", "@", "\"\<mesh size \>\""}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Manipulator", "[", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"meshSize", ",", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"meshSize", "=", "#"}], ";", 
                    RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}], " ", 
                    ";", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"2", ",", "30", ",", "2"}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
               RowBox[{"AppearanceElements", "\[Rule]", 
                RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
             "\"\< \>\"", ",", " ", 
             RowBox[{"Dynamic", "[", "meshSize", "]"}]}], " ", 
            "\[IndentingNewLine]", "}"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"LocatorPane", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", "qPlaneLoc", 
             RowBox[{"(*", 
              RowBox[{",", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"qPlaneLoc", " ", "=", " ", "#"}], ";", " ", 
                 RowBox[{"tick", "=", 
                  RowBox[{
                   RowBox[{"Not", "[", "tick", "]"}], " ", "&"}]}]}], ")"}]}],
               "*)"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"Graphics", "[", 
                RowBox[{
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Lighter", "@", "Gray"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Polygon", "[", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    ")"}], "\[IndentingNewLine]", " ", "]"}], ",", 
                   "\[IndentingNewLine]", "Black", ",", 
                   RowBox[{"Line", "[", "qPlaneLoc", "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 " ", 
                 RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                   "/", "2"}]}], "\[IndentingNewLine]", ",", 
                 RowBox[{"ImageSize", " ", "\[Rule]", "  ", 
                  RowBox[{"200", " ", 
                   RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}]}]}], 
                "\[IndentingNewLine]", "]"}], " ", "&"}], " ", "@", " ", 
              RowBox[{"(", 
               RowBox[{"\"\<qMaxVec\>\"", " ", "/.", " ", "ld"}], ")"}]}], 
             " ", "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
            "\[IndentingNewLine]", 
            RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
           "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "}"}]}], 
       " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"dynamicsControls", " ", ":=", "\[IndentingNewLine]", 
        RowBox[{"{", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"OverVector", "[", "\"\<q\>\"", "]"}], ",", 
             "\[IndentingNewLine]", "\"\< = \>\"", ",", "\[IndentingNewLine]", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", "qm", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"qm", " ", "=", " ", 
                 RowBox[{"(", 
                  RowBox[{"\"\<qMaxVec\>\"", " ", "/.", " ", "ld"}], ")"}]}], 
                " ", ";", "\[IndentingNewLine]", 
                RowBox[{"Slider2D", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"qLoc", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"qLoc", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], ",", " ", 
                  RowBox[{"(*", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.01", ",", "0.01"}], "}"}], ",", " ", "qm"}], 
                    "}"}], "*)"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", " ", "qm"}], ")"}], 
                  "\[IndentingNewLine]", ",", 
                  RowBox[{"ContinuousAction", "\[Rule]", "False"}], 
                  "\[IndentingNewLine]", ",", " ", 
                  RowBox[{"ImageSize", " ", "\[Rule]", " ", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"150", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}], " ", "&"}], ")"}], 
                    " ", "@", " ", "qm"}]}]}], "\[IndentingNewLine]", 
                 "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", " ", 
             "\[IndentingNewLine]", "\"\< 2 \[Pi] \>\"", ",", "  ", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"(", 
               RowBox[{"NumberForm", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"qLoc", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "Pi"}], ")"}]}], " ", "//", " ", 
                   "MatrixForm"}], ")"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
              "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", 
            RowBox[{"Text", "@", "\"\<time, normalized to one period:\>\""}], 
            "}"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"Manipulator", "[", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"tau", ",", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"tau", "=", "#"}], ";", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"ContinuousAction", "\[Rule]", "True"}], ",", 
               RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}]}], "]"}], 
             "}"}], "\[IndentingNewLine]", ",", " ", 
            RowBox[{"ImageSize", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"200", ",", "60"}], "}"}]}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", 
            RowBox[{"Text", "@", "\"\<oscillation scale factor:\>\""}], "}"}],
            "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"Manipulator", "[", 
               RowBox[{
                RowBox[{"Dynamic", "[", 
                 RowBox[{"scale", ",", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"scale", "=", "#"}], ";", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                 "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.05", ",", "1"}], "}"}], ",", 
                RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                RowBox[{"AppearanceElements", "\[Rule]", 
                 RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], 
              "\[IndentingNewLine]", "\"\< \>\""}], ",", "  ", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"(", 
               RowBox[{"NumberForm", "[", 
                RowBox[{"scale", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
              "]"}]}], "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
           "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Text", "[", 
           RowBox[{
           "Text", "@", "\"\<Angular frequency \[Omega](q), selection:\>\""}],
            "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Dynamic", "@", 
           RowBox[{"SetterBar", "[", 
            RowBox[{
             RowBox[{"Dynamic", "[", 
              RowBox[{"omegaIndex", ",", 
               RowBox[{
                RowBox[{"(", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"omegaIndex", "=", "#"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                  ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"tick", "=", 
                   RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
              "]"}], ",", " ", 
             RowBox[{"Range", "[", 
              RowBox[{"2", "lastNumMasses"}], "]"}]}], " ", "]"}]}]}], 
         "\[IndentingNewLine]", "}"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         FormBox[
          RowBox[{" ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"grab", " ", "data", " ", 
              RowBox[{"from", ":", " ", "mScalarArray"}]}], ",", " ", "ld", 
             ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"couplingData", "[", 
                 RowBox[{"[", "_", "]"}], "]"}], "[", 
                RowBox[{"[", "_", "]"}], "]"}], "[", 
               RowBox[{"[", "_", "]"}], "]"}], " ", "=", " ", 
              RowBox[{"{", 
               RowBox[{"k", ",", " ", "j", ",", " ", 
                OverscriptBox["m", "\[RightVector]"], ",", " ", 
                SubscriptBox["K", 
                 RowBox[{
                  OverscriptBox["n", "\[RightVector]"], ",", 
                  RowBox[{"k", ";", 
                   OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], ",", 
                " ", 
                SuperscriptBox[
                 SubscriptBox[
                  OverscriptBox["a", "\[RightVector]"], 
                  RowBox[{
                   OverscriptBox["m", "\[RightVector]"], ",", 
                   RowBox[{"j", ";", 
                    OverscriptBox["0", "\[RightVector]"]}], ",", "k"}]], "2"],
                 ",", " ", 
                SubscriptBox[
                 OverscriptBox["p", "\[RightVector]"], "k"], ",", " ", 
                RowBox[{
                 SubscriptBox[
                  OverscriptBox["r", "\[RightVector]"], 
                  OverscriptBox["m", "\[RightVector]"]], " ", "+", " ", 
                 SubscriptBox[
                  OverscriptBox["p", "\[RightVector]"], "j"]}], ",", " ", 
                SubscriptBox["Proj", 
                 SubscriptBox[
                  OverscriptBox["a", "\[RightVector]"], 
                  RowBox[{
                   OverscriptBox["m", "\[RightVector]"], ",", 
                   RowBox[{"j", ";", 
                    OverscriptBox["0", "\[RightVector]"]}], ",", "k"}]]]}], 
               "}"}]}]}], "\[IndentingNewLine]", 
            RowBox[{"ex", ":", " ", 
             RowBox[{"{", 
              RowBox[{"1", ",", "2", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", "0.5`", ",", 
               "1.`", ",", 
               RowBox[{"{", 
                RowBox[{"0.9`", ",", "0.7`"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0.30000000000000004`", ",", 
                 RowBox[{"-", "0.10000000000000009`"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0.36`", ",", "0.48`"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0.48`", ",", "0.6400000000000001`"}], "}"}]}], 
                "}"}]}], "}"}]}], "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
             "to", " ", "form", " ", "equations", " ", "of", " ", "the", " ", 
              RowBox[{"form", ":", "\[IndentingNewLine]", 
               RowBox[{
                SuperscriptBox["\[Omega]", "2"], " ", 
                RowBox[{
                 SubscriptBox[
                  OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
                 OverscriptBox["q", "\[RightVector]"], ")"}]}]}]}], " ", "=", 
             " ", 
             RowBox[{
              UnderscriptBox["\[Sum]", 
               RowBox[{
                OverscriptBox["0", "\[RightVector]"], ",", 
                RowBox[{"k", " ", "\[NotEqual]", " ", 
                 OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
              RowBox[{
               SubscriptBox["K", 
                RowBox[{
                 OverscriptBox["0", "\[RightVector]"], ",", 
                 RowBox[{"k", ";", 
                  OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
               SubscriptBox["Proj", 
                SubscriptBox[
                 OverscriptBox["a", "^"], 
                 RowBox[{
                  OverscriptBox["n", "\[RightVector]"], ",", 
                  RowBox[{"k", ";", 
                   OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
               RowBox[{"(", 
                RowBox[{
                 FractionBox[
                  RowBox[{
                   SubscriptBox[
                    OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
                   OverscriptBox["q", "\[RightVector]"], ")"}], 
                  SubscriptBox["m", "k"]], "-", " ", 
                 RowBox[{
                  FractionBox[
                   RowBox[{
                    SubscriptBox[
                    OverscriptBox["\[Epsilon]", "\[RightVector]"], "j"], "(", 
                    OverscriptBox["q", "\[RightVector]"], ")"}], 
                   SqrtBox[
                    RowBox[{
                    SubscriptBox["m", "k"], 
                    SubscriptBox["m", "j"]}]]], 
                  SuperscriptBox["e", 
                   RowBox[{"I", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SubscriptBox[
                    OverscriptBox["r", "\[RightVector]"], 
                    OverscriptBox["m", "\[RightVector]"]], " ", ".", " ", 
                    OverscriptBox["q", "\[RightVector]"]}], " ", ")"}]}]]}]}],
                 ")"}]}]}]}]}]}],
          TraditionalForm], "\[IndentingNewLine]", "Note", " ", "that", " ", 
         "qVec", " ", "here", " ", "is", " ", "intended", " ", "to", " ", 
         "be", " ", "an", " ", "undefined", " ", 
         RowBox[{"global", "."}]}], "\[IndentingNewLine]", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"oneTermOfdynamicsMatrix", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "k_Integer", ",", " ", "j_Integer", ",", " ", "mVec_List", ",", 
            " ", "kS_", ",", " ", "_", ",", "_", ",", "_", ",", "proj_List"}],
            "}"}], ",", " ", "r_List", ",", " ", "mk_", ",", " ", 
          "epsilon_List"}], "]"}], " ", ":=", " ", 
        RowBox[{"(", 
         RowBox[{"kS", " ", 
          RowBox[{"proj", "  ", ".", 
           RowBox[{"(", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"epsilon", "[", 
               RowBox[{"[", "k", "]"}], "]"}], "/", "mk"}], " ", "-", " ", 
             RowBox[{
              RowBox[{"epsilon", "[", 
               RowBox[{"[", "j", "]"}], "]"}], 
              RowBox[{
               RowBox[{"E", "^", 
                RowBox[{"(", 
                 RowBox[{"I", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"mVec", " ", ".", " ", "r"}], ")"}], ".", " ", 
                    "qVec"}], ")"}]}], ")"}]}], "/", 
               RowBox[{"Sqrt", "[", " ", 
                RowBox[{"mk", " ", 
                 RowBox[{"mScalarArray", "[", 
                  RowBox[{"[", "j", "]"}], "]"}]}], " ", "]"}]}]}]}], 
            ")"}]}]}], "  ", ")"}]}], "  ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"dynamicsMatrix", " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "cd", ",", " ", "r", ",", " ", "res", ",", " ", "epsilon", ",", 
            " ", "m"}], "}"}], ",", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"cd", " ", "=", " ", 
            RowBox[{"SplitBy", "[", " ", 
             RowBox[{
              RowBox[{"Sort", "@", 
               RowBox[{"Flatten", "[", 
                RowBox[{"couplingData", ",", " ", "2"}], "]"}]}], " ", ",", 
              " ", "First"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
           RowBox[{"r", " ", "=", " ", 
            RowBox[{"(", 
             RowBox[{"\"\<latticeBasis\>\"", " ", "/.", " ", "ld"}], ")"}]}], 
           " ", ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{
              RowBox[{"Here", " ", 
               SubscriptBox[
                OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], " ", 
               RowBox[{"(", 
                RowBox[{"=", 
                 RowBox[{"epsilon", "[", 
                  RowBox[{"[", "k", "]"}], "]"}]}], ")"}], " ", "is", " ", 
               "represented", " ", "as", " ", "a", " ", "2", "x", 
               RowBox[{"(", 
                RowBox[{"2", "N"}], ")"}], " ", "matrix", " ", "with", " ", 
               "the", " ", "vector", " ", "factored", " ", 
               RowBox[{"out", ".", "  ", "For"}], " ", "example", " ", "with",
                " ", "N"}], " ", "=", " ", "3"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{
              SubscriptBox[
               OverscriptBox["\[Epsilon]", "\[RightVector]"], "1"], "=", " ", 
              RowBox[{
               RowBox[{
                TagBox[
                 RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"1", "0", "0", "0", "0", "0"},
                    {"0", "1", "0", "0", "0", "0"}
                   },
                   
                   GridBoxAlignment->{
                    "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                   GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
                 Function[BoxForm`e$, 
                  MatrixForm[BoxForm`e$]]], "\[IndentingNewLine]", 
                "\[IndentingNewLine]", "This", " ", "will", " ", "be", " ", 
                "pre"}], "-", 
               RowBox[{
               "multiplied", " ", "by", " ", "a", " ", "2", "x2", " ", 
                "projection", " ", 
                RowBox[{"matrix", ".", "\[IndentingNewLine]", "The"}], " ", 
                "whole", " ", "thing", " ", "should", " ", "be", " ", 
                "logically", " ", "treated", " ", "as", " ", "if", " ", "it", 
                " ", "is", " ", "post"}], "-", 
               RowBox[{
               "multiplied", " ", "by", "\[IndentingNewLine]", 
                "\[IndentingNewLine]", Cell[TextData[Cell[BoxData[
                 TagBox[
                  RowBox[{"(", "\[NoBreak]", GridBox[{
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "1"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "2"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "1"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "2"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "1"}]]},
                    {
                    SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "2"}]]}
                    },
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                    GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
                  Function[BoxForm`e$, 
                   MatrixForm[BoxForm`e$]]]],
                 
                 CellChangeTimes->{{3.600871330362259*^9, 
                  3.6008713538916054`*^9}}]]]}]}]}]}], "\[IndentingNewLine]", 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{"epsilon", " ", "=", " ", 
            RowBox[{"Partition", "[", 
             RowBox[{
              RowBox[{"IdentityMatrix", "[", " ", 
               RowBox[{"2", " ", "lastNumMasses"}], " ", "]"}], ",", "2"}], 
             "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"res", " ", "=", " ", 
            RowBox[{"Partition", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Table", "[", " ", 
                RowBox[{
                 RowBox[{"Total", "@", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"oneTermOfdynamicsMatrix", "[", 
                    RowBox[{"#", ",", " ", "r", ",", 
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", " ", "epsilon"}], 
                    " ", "]"}], " ", "&"}], "/@", 
                    RowBox[{"(", 
                    RowBox[{"cd", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ")"}]}], ",", 
                 " ", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", " ", "lastNumMasses"}], "}"}]}], "]"}], 
               " ", "//", " ", "Flatten"}], ",", " ", 
              RowBox[{"2", " ", "lastNumMasses"}]}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"res", " ", "/.", " ", 
             RowBox[{"qVec", " ", "\[Rule]", " ", "#"}]}], " ", "&"}]}]}], 
         " ", "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"ClearAll", "[", " ", "calcDynamics", " ", "]"}], " ", ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"calcDynamics", "::", "usage"}], " ", "=", " ", 
          "\"\<a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \
\(k\)]\),\!\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for \
each of the system eigenvalues, when evaluated at qLoc\>\""}], " ", ";"}], 
        "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"calcDynamics", " ", ":=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Sqrt", "[", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Eigensystem", "[", " ", 
             RowBox[{"matrix", "[", "qLoc", "]"}], " ", "]"}], " ", "//", " ",
             "Transpose"}], ")"}]}], ")"}]}], "  ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"ClearAll", "[", " ", "showDynamics", " ", "]"}], " ", ";"}],
         "*)"}], "\[IndentingNewLine]", 
       RowBox[{"showDynamics", " ", ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "pointsDataTable", ",", "numberLatticeLinesToDisplay", ",", " ", 
            "e", ",", " ", "omega", ",", " ", "points", ",", " ", "lines", 
            ",", " ", "nu", ",", " ", "a", ",", "b"}], "}"}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"a", ",", " ", "b"}], "}"}], ",", "pointsDataTable", 
              ",", "numberLatticeLinesToDisplay", ",", " ", "lines"}], "}"}], 
            "=", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "\"\<latticeBasis\>\"", ",", "\"\<pointsDataTable\>\"", ",", 
               "\"\<numberLatticeLinesToDisplay\>\"", ",", " ", 
               "\"\<lineTable\>\""}], "}"}], " ", "/.", " ", "ld"}]}], " ", 
           ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"omega", ",", " ", "e"}], "}"}], " ", "=", " ", 
            RowBox[{"dynamics", "[", 
             RowBox[{"[", "omegaIndex", "]"}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"e", " ", "=", " ", 
            RowBox[{"Partition", "[", 
             RowBox[{"e", ",", "2"}], "]"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"points", " ", "=", " ", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"pointsDataTable", "[", 
                 RowBox[{"[", "k", "]"}], "]"}], " ", "+", " ", 
                RowBox[{"Table", "[", " ", "\[IndentingNewLine]", " ", 
                 RowBox[{
                  RowBox[{"scale", " ", 
                   RowBox[{"Re", "[", 
                    RowBox[{
                    RowBox[{"e", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], " ", 
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"I", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    RowBox[{"qLoc", " ", ".", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"a", " ", "i"}], " ", "+", " ", 
                    RowBox[{"b", " ", "j"}]}], ")"}]}], " ", "-", " ", 
                    RowBox[{"omega", " ", "#"}]}], ")"}]}], ")"}]}]}], " ", 
                    "]"}]}], "\[IndentingNewLine]", ",", 
                  RowBox[{"{", 
                   RowBox[{"i", ",", " ", 
                    RowBox[{"-", 
                    RowBox[{"numberLatticeLinesToDisplay", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"numberLatticeLinesToDisplay", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], 
                  "\[IndentingNewLine]", ",", 
                  RowBox[{"{", 
                   RowBox[{"j", ",", " ", 
                    RowBox[{"-", 
                    RowBox[{"numberLatticeLinesToDisplay", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"numberLatticeLinesToDisplay", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], 
                 "\[IndentingNewLine]", "]"}]}], " ", "&"}], ",", 
              RowBox[{"{", 
               RowBox[{"k", ",", "lastNumMasses"}], "}"}]}], "]"}]}], " ", 
           ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"nu", " ", "=", " ", 
            RowBox[{"2", " ", "Pi", " ", 
             RowBox[{"If", "[", " ", 
              RowBox[{
               RowBox[{"omega", " ", "\[Equal]", " ", "0"}], ",", " ", "1", 
               ",", " ", 
               RowBox[{"1", "/", "omega"}]}], "]"}]}]}], " ", ";", " ", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Show", "[", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"ListPlot", "[", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"points", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "[", 
                    RowBox[{"nu", " ", "#"}], "]"}], "\[IndentingNewLine]", 
                    ",", 
                    RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "windowHalfWidth"}], "/", "2"}], ",", " ", 
                    "windowHalfWidth"}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "windowHalfWidth"}], "/", "2"}], ",", " ", 
                    "windowHalfWidth"}], "}"}]}], "}"}]}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{"ImageSize", "\[Rule]", "primaryDisplaySize"}], 
                    "\[IndentingNewLine]", ",", " ", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "/", "mMax"}], "/", 
                    "500"}], "]"}], "]"}], ",", 
                    RowBox[{"massColors", "[", "k", "]"}]}], "]"}]}]}], 
                   "\[IndentingNewLine]", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"k", ",", "lastNumMasses"}], "}"}]}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                 "{", "\[IndentingNewLine]", "lines", "\[IndentingNewLine]", 
                  "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], " ", 
             "&"}], ")"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"ClearAll", "[", " ", "frequencyPlot", " ", "]"}], " ", ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"frequencyPlot", "::", "usage"}], " ", "=", " ", 
          "\"\<frequencyPlot[ dynamicsMatrix[{1,0}, {0,1}, 8, { 2 Pi, 2 Pi }, \
0.5, 0.5, 0.25, 0.25, 1][#] &, ld ]\>\""}], " ", ";"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"frequencyPlotCalc", " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "eigTable2D", ",", " ", "eigTable1D", ",", " ", "qMax", ",", " ", 
            "omegaPointList2D", ",", " ", "omegaPointList1D", ",", " ", 
            "range"}], "}"}], ",", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"qMax", " ", "=", " ", 
            RowBox[{"(", 
             RowBox[{"\"\<qMaxVec\>\"", " ", "/.", " ", "ld"}], ")"}]}], " ", 
           ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"eigTable2D", " ", "=", " ", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{"Re", "[", 
               RowBox[{"Table", "[", "  ", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"qx", ",", " ", "qy"}], "}"}], " ", ",", 
                   RowBox[{"Eigenvalues", "[", " ", 
                    RowBox[{
                    RowBox[{"matrix", "[", " ", 
                    RowBox[{"{", 
                    RowBox[{"qx", ",", " ", "qy"}], "}"}], "  ", "]"}], " ", "//",
                     " ", "N"}], " ", "]"}]}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"qx", ",", " ", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"qMax", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                   RowBox[{
                    RowBox[{"qMax", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/", "2"}], ",", " ", 
                   RowBox[{
                    RowBox[{"qMax", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/", " ", "meshSize"}]}], 
                  "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"qy", ",", " ", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"qMax", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                   RowBox[{
                    RowBox[{"qMax", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/", "2"}], ",", " ", 
                   RowBox[{
                    RowBox[{"qMax", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/", " ", "meshSize"}]}], 
                  "}"}]}], " ", "]"}], " ", "]"}], ",", "1"}], "]"}]}], " ", 
           ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"omegaPointList2D", "[", "nn_", "]"}], " ", ":=", "  ", 
            RowBox[{
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
                  RowBox[{"[", "nn", "]"}], "]"}]}], "}"}], "]"}], "&"}], "/@",
              " ", "eigTable2D"}]}], "  ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"range", " ", "=", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"2", " ", "lastNumMasses"}], ")"}], " ", "//", " ", 
              "Range"}], ")"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"ListPlot3D", "[", " ", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"omegaPointList2D", "[", "#", "]"}], " ", "&"}], "/@", 
              " ", "range"}], ",", " ", 
             RowBox[{"PlotRange", " ", "\[Rule]", " ", "Full"}], " ", ",", 
             " ", 
             RowBox[{"ImageSize", "\[Rule]", "primaryDisplaySize"}], ",", 
             RowBox[{"AxesLabel", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
               "\"\<\!\(\*SubscriptBox[\(q\), \(x\)]\)\>\"", ",", " ", 
                "\"\<\!\(\*SubscriptBox[\(q\), \(y\)]\)\>\""}], "}"}]}]}], 
            "]"}]}]}], "\[IndentingNewLine]", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"showFreqPlot", " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"aa", ",", " ", "bb"}], "}"}], ",", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"aa", ",", " ", "bb"}], "}"}], " ", "=", "  ", 
            "qPlaneLoc"}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"Show", "[", 
            RowBox[{"{", 
             RowBox[{"freqPlot", ",", "\[IndentingNewLine]", 
              RowBox[{"Graphics3D", "[", " ", 
               RowBox[{"Polygon", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"aa", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"aa", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", 
                  " ", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"bb", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"bb", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", 
                  "  ", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"bb", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"bb", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"aa", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"aa", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}]}], 
                 "}"}], "]"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
            "]"}]}]}], "\[IndentingNewLine]", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"k1", ",", "k2", ",", "k3", ",", "k4", ",", "k5"}], "}"}], 
        " ", "=", " ", "kDefaults"}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"ld", " ", "=", " ", "locDependent"}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"kArray", " ", "=", " ", 
        RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "n", "}"}], ",", 
         RowBox[{
          RowBox[{"n", " ", "=", " ", "2"}], " ", ";", 
          RowBox[{"While", "[", 
           RowBox[{
            RowBox[{"n", "\[LessEqual]", "lastNumMasses"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"kArray", " ", "=", " ", 
               RowBox[{"growKarray", "[", "n", "]"}]}], ")"}], " ", ";", " ", 
             RowBox[{"n", "++"}]}]}], "]"}]}]}], " ", "]"}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"qLoc", " ", "=", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"\"\<qMaxVec\>\"", " ", "/.", " ", "ld"}], ")"}], "/", 
         "2"}]}], " ", ";", "\[IndentingNewLine]", 
       RowBox[{"qPlaneLoc", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"couplingData", " ", "=", " ", "calculateCouplings"}], " ", 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"bRefreshMatrix", ":", " ", 
          RowBox[{"dependent", " ", "on"}], ":", " ", "ld"}], ",", 
         "couplingData", ",", " ", "mScalarArray"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"matrix", " ", "=", " ", "dynamicsMatrix"}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"bRefreshDynamics", ":", " ", 
          RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", "qLoc",
          ","}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"dynamics", " ", "=", " ", "calcDynamics"}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"bRefreshDynPlot", ":", " ", 
          RowBox[{"dependent", " ", "on", " ", "dynamics"}]}], ",", " ", 
         "omegaIndex", ",", " ", "scale"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"dynPlot", " ", "=", " ", "showDynamics"}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"bRefreshFreqPlot", ":", " ", 
          RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
         "meshSize"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"freqPlot", " ", "=", " ", "frequencyPlotCalc"}], " ", ";"}], 
      "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{
  3.6008871152711043`*^9, {3.6008878463659205`*^9, 3.600887886015188*^9}, {
   3.6008879391292267`*^9, 3.6008879415153627`*^9}, {3.600888091984969*^9, 
   3.6008883433153443`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}}, {{
       2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}, {{
       3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}, {
       3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}}, {{{
       1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
        0.09999999999999987}, {{
        0.19999999999999987`, -0.3999999999999999}, {-0.3999999999999999, 
        0.8}}}, {
       1, 2, {-1, 0}, 0.25, 1., {0.9, 0.7}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       1, 2, {-1, 1}, 0.25, 1.6899999999999995`, {0.9, 0.7}, {
        2.1999999999999997`, 0.7}, {{0.9999999999999999, 0.}, {0., 0.}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 3, {0, -1}, 0.25, 2.2600000000000002`, {0.9, 
        0.7}, {-0.5999999999999999, 0.5999999999999999}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       1, 3, {1, -1}, 0.25, 3.3999999999999995`, {0.9, 
        0.7}, {-0.4999999999999998, 1.9}, {{
        0.5764705882352942, -0.4941176470588236}, {-0.4941176470588236, 
        0.423529411764706}}}, {
       1, 2, {1, 0}, 0.25, 3.4000000000000004`, {0.9, 0.7}, {0.5, 2.5}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 2, {0, 1}, 0.25, 3.65, {0.9, 0.7}, {2.3, 2.}, {{0.5369863013698629, 
        0.4986301369863013}, {0.4986301369863013, 0.463013698630137}}}, {
       1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 2.7}, {{
        0.05882352941176473, 0.23529411764705888`}, {0.23529411764705888`, 
        0.9411764705882353}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 3, {-1, -1}, 0.25, 4.520000000000001, {0.9, 
        0.7}, {-0.7, -0.7000000000000002}, {{0.5663716814159291, 
        0.49557522123893794`}, {0.49557522123893794`, 
        0.43362831858407075`}}}, {
       1, 3, {-1, 1}, 0.25, 4.879999999999999, {0.9, 0.7}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       1, 2, {0, -1}, 0.25, 5.85, {0.9, 0.7}, {-1.5, 0.3999999999999999}, {{
        0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
        0.015384615384615389`}}}, {
       1, 2, {1, -1}, 0.25, 6.289999999999999, {0.9, 0.7}, {-1.4, 1.7}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       1, 3, {0, 1}, 0.25, 7.540000000000002, {0.9, 0.7}, {3.2, 2.2}, {{
        0.7015915119363394, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 2, {-1, -1}, 0.25, 8.81, {0.9, 0.7}, {-1.6, -0.9000000000000001}, {{
        0.7094211123723042, 0.4540295119182747}, {0.4540295119182747, 
        0.29057888762769585`}}}, {
       1, 2, {1, 1}, 0.25, 9.009999999999998, {0.9, 0.7}, {2.4, 3.3}, {{
        0.24972253052164267`, 0.4328523862375139}, {0.4328523862375139, 
        0.7502774694783573}}}, {
       1, 3, {1, 1}, 0.25, 13.599999999999998`, {0.9, 0.7}, {3.3, 3.5}, {{
        0.423529411764706, 0.4941176470588236}, {0.4941176470588236, 
        0.5764705882352942}}}}, {{
       2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       2, 3, {1, -1}, 0.25, 1.2999999999999996`, {0.4, 
        1.2}, {-0.4999999999999998, 1.9}, {{
        0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
        0.376923076923077}}}, {
       2, 3, {0, -1}, 0.25, 1.3599999999999999`, {0.4, 
        1.2}, {-0.5999999999999999, 0.5999999999999999}, {{0.7352941176470588,
         0.44117647058823534`}, {0.44117647058823534`, 
        0.2647058823529413}}}, {
       2, 1, {1, -1}, 0.25, 1.6899999999999995`, {0.4, 
        1.2}, {-0.8999999999999998, 1.2}, {{0.9999999999999999, 0.}, {0., 
        0.}}}, {2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
        2.5}, {{0.005882352941176467, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 0.09999999999999987}, {{
        0.34594594594594585`, -0.4756756756756756}, {-0.4756756756756756, 
        0.654054054054054}}}, {
       2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
        1.4000000000000001`, 2.7}, {{0.3076923076923076, 
        0.46153846153846145`}, {0.46153846153846145`, 0.6923076923076924}}}, {
       2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
        0.8, -0.6000000000000001}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {-1.4, 1.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {
        2.1999999999999997`, 0.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {0, -1}, 0.25, 3.65, {0.4, 
        1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
        0.463013698630137}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 0.3999999999999999}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 3, {-1, -1}, 0.25, 4.82, {0.4, 1.2}, {-0.7, -0.7000000000000002}, {{
        0.25103734439834025`, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{0.9846153846153846,
         0.1230769230769231}, {0.1230769230769231, 0.015384615384615389`}}}, {
       2, 1, {-1, 1}, 0.25, 6.289999999999999, {0.4, 1.2}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       2, 3, {-1, 1}, 0.25, 7.379999999999998, {0.4, 1.2}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9878048780487806, -0.10975609756097565`}, {-0.10975609756097565`, 
        0.01219512195121952}}}, {
       2, 2, {1, 1}, 0.25, 8.409999999999998, {0.4, 1.2}, {2.4, 3.3}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {0.4, 1.2}, {-1.6, -0.9000000000000001}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 1, {1, 1}, 0.25, 8.809999999999999, {0.4, 1.2}, {2.9, 2.8}, {{
        0.7094211123723043, 0.4540295119182747}, {0.4540295119182747, 
        0.2905788876276958}}}, {
       2, 3, {0, 1}, 0.25, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
        0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570139`}}}, {
       2, 1, {-1, -1}, 0.25, 9.010000000000002, {0.4, 
        1.2}, {-1.1, -1.4000000000000001`}, {{0.24972253052164256`, 
        0.4328523862375138}, {0.4328523862375138, 0.7502774694783573}}}, {
       2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{0.6138686131386862,
         0.48686131386861314`}, {0.48686131386861314`, 
        0.3861313868613139}}}}, {{
       3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
        0.19999999999999998`, -0.39999999999999997`}, {-0.39999999999999997`, 
        0.7999999999999999}}}, {
       3, 2, {-1, 1}, 0.25, 1.2999999999999994`, {1.3, 1.4}, {
        2.1999999999999997`, 0.7}, {{
        0.6230769230769229, -0.48461538461538467`}, {-0.48461538461538467`, 
        0.3769230769230771}}}, {
       3, 2, {0, 1}, 0.25, 1.3599999999999997`, {1.3, 1.4}, {2.3, 2.}, {{
        0.7352941176470587, 0.4411764705882354}, {0.4411764705882354, 
        0.2647058823529413}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
        1.4000000000000001`, 2.7}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
        0.09999999999999987}, {{0.00588235294117648, 0.07647058823529418}, {
        0.07647058823529418, 0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 2.5}, {{
        0.34594594594594597`, -0.47567567567567565`}, {-0.47567567567567565`, 
        0.654054054054054}}}, {
       3, 1, {0, 1}, 0.25, 2.26, {1.3, 1.4}, {2.8, 1.5}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.3076923076923077, 
        0.46153846153846156`}, {0.46153846153846156`, 0.6923076923076923}}}, {
       3, 1, {-1, 1}, 0.25, 3.399999999999999, {1.3, 1.4}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.576470588235294, -0.4941176470588235}, {-0.4941176470588235, 
        0.423529411764706}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.3, 
        1.4}, {-0.4999999999999998, 1.9}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999984`, {1.3, 1.4}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9283667621776505, -0.25787965616045855`}, {-0.25787965616045855`, 
        0.07163323782234961}}}, {
       3, 3, {0, 1}, 0.25, 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
        0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.3, 1.4}, {-0.5999999999999999, 
        0.5999999999999999}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {0.8, -0.6000000000000001}, {{
        0.058823529411764705`, 0.23529411764705882`}, {0.23529411764705882`, 
        0.9411764705882353}}}, {
       3, 1, {1, 1}, 0.25, 4.52, {1.3, 1.4}, {2.9, 2.8}, {{0.5663716814159292,
         0.49557522123893805`}, {0.49557522123893805`, 
        0.43362831858407075`}}}, {
       3, 2, {1, 1}, 0.25, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
        0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       3, 1, {1, -1}, 0.25, 4.879999999999999, {1.3, 
        1.4}, {-0.8999999999999998, 1.2}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       3, 2, {1, -1}, 0.25, 7.380000000000001, {1.3, 1.4}, {-1.4, 1.7}, {{
        0.9878048780487805, -0.10975609756097562`}, {-0.10975609756097562`, 
        0.012195121951219514`}}}, {
       3, 1, {0, -1}, 0.25, 7.539999999999999, {1.3, 
        1.4}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7015915119363395, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{0.4756242568370986,
         0.49940546967895355`}, {0.49940546967895355`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.3, 1.4}, {-0.7, -0.7000000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 2, {0, -1}, 0.25, 8.84, {1.3, 1.4}, {-1.5, 0.3999999999999999}, {{
        0.8868778280542985, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570136`}}}, {
       3, 1, {-1, -1}, 0.25, 13.600000000000001`, {1.3, 
        1.4}, {-1.1, -1.4000000000000001`}, {{0.42352941176470593`, 
        0.4941176470588235}, {0.4941176470588235, 0.576470588235294}}}, {
       3, 2, {-1, -1}, 0.25, 13.700000000000001`, {1.3, 
        1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
        0.4868613138686131}, {0.4868613138686131, 
        0.38613138686131376`}}}}}}, $CellContext`defaultMass$$ = 
    20, $CellContext`dynamics$$ = {{
      Complex[0.6790602328891914, 9.230900003615161*^-19], {Complex[
      0.7248589832535917, 0.], Complex[
      0.650064949116095, -0.020858686170711016`], Complex[
      0.11988513411713456`, -0.0981715969681187], Complex[
      0.15160623794564831`, -0.028647866526790612`], 
      Complex[-0.002472802788942547, -0.01713913715451654], Complex[
      0.05556524411678816, 0.01890267003822048]}}, {
      Complex[0.5524636587025472, -7.594543271602355*^-18], {
      Complex[-0.38354558530686395`, 0.09744499810272776], Complex[
      0.1619813466218059, -0.23832737428749207`], Complex[0.6766558452199941, 
      0.], Complex[0.5279467930943094, 0.011722985858567875`], 
      Complex[-0.0019794387381373065`, 0.0612963317654061], Complex[
      0.14074635807044672`, 0.0077645969691057665`]}}, {
      Complex[0.5222542056555272, 7.39373223091693*^-18], {
      Complex[-0.5047764091042254, 0.08027140607893792], Complex[
      0.6076266586520926, 0.], 
      Complex[-0.41722429897453955`, -0.26584428115246467`], 
      Complex[-0.11870218623554862`, 0.011771602360776734`], Complex[
      0.10106066627579662`, 0.15510216234064736`], Complex[
      0.24672133224192438`, 0.12420825231706026`]}}, {
      Complex[0.47798270089481093`, 1.705186367657685*^-17], {Complex[
      0.11776747404882068`, -0.17021352942962187`], 
      Complex[-0.19349636076477256`, 0.18545691772731276`], 
      Complex[-0.005098087736675982, 0.0481703582836023], Complex[
      0.12443545522518613`, -0.04846883240430583], Complex[0.7520021001235273,
       0.], Complex[0.5450959458974042, 0.050065292585647264`]}}, {
      Complex[0.4208599945029234, 1.7181192359807767`*^-17], {Complex[
      0.046412084869462106`, -0.0633132278362492], 
      Complex[-0.15001494768060744`, 0.1368626263531111], 
      Complex[-0.49457449633790096`, -0.020339968952328036`], Complex[
      0.7465187765334863, 0.], 
      Complex[-0.3425167147633056, -0.05320301419822421], Complex[
      0.17190685158210708`, -0.02435844462026826]}}, {
      Complex[0.3371723422003491, 1.2680207595331082`*^-17], {Complex[
      0.08250671501222374, 0.03036710231625256], 
      Complex[-0.10759757386702096`, -0.00917692568070801], Complex[
      0.15992951319705684`, 0.020880420200147097`], 
      Complex[-0.32856173648033754`, 0.004931060374980048], 
      Complex[-0.5245849484304596, 0.028709761501831688`], Complex[
      0.7553839007471159, 0.]}}}, $CellContext`dynPlot$$ = Show[{
      Table[
       ListPlot[
        Part[$CellContext`points$3736, $CellContext`k][$CellContext`nu$3736 \
#], PlotRange -> {{(-$CellContext`windowHalfWidth$$)/
           2, $CellContext`windowHalfWidth$$}, \
{(-$CellContext`windowHalfWidth$$)/2, $CellContext`windowHalfWidth$$}}, 
        ImageSize -> $CellContext`primaryDisplaySize$$, PlotStyle -> Directive[
          PointSize[
           
           Sqrt[(Part[$CellContext`mScalarArray$$, \
$CellContext`k]/$CellContext`mMax$$)/500]], 
          $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`lastNumMasses$$}], 
      Graphics[{$CellContext`lines$3736}]}]& , $CellContext`dynTab$$ = 
    1, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJx0nXVUVdv3t7G7O0FFUcHAwkA35lexwU5sEcVCscHuRhQ7sDDAREHdiIoB
SnedA2wQ86gcRQ/q63uZcy32XON3/7ljfMYe82zOs2OtOR+hyfSFdrOKGxkZ
zW1tZFTi3//tGp25+/JaqaBhR5LzC5wMcrdH27akBCgS5gOspw74fS1fHmq0
bvnbgTzvpck4+PuzXn529OzqNW+yWN5l02ztb8tvco+Dgy+VnMPzti3ftf2z
VCfPsrGxa96I50P/+9z38shuLpeufMwk9RW5aUiJL1OjMkkdjayM/hYaHcJz
6/+Oj5U3916x7MILnnf9L38mN104bn/JeJ4b/fefn/U+/4xb577yfGDh8ZJl
0MXQ/zXm52lTWF9av+BgvZZTed6+8Hyk9gdGXvwQQI9XpLATFddXac+/txGF
P6/UyaHn96BrCqmjkzp6H/ruUC+bn3/h9yn1n1gu79ekbFJfLzV5cNFKceb5
wEJeUqMVSS3vjcwmn2uQXtqGmp6tli0dfj3ZNHxDCcbd5/3lJuaTFZYj9+sH
j71xep/FcuT+oWzct1c7eY7cB/rVXth6IM+R+/XS5+dvbcxz5J75ZFegaXla
X5Fl/aJtIWVoHY38MM/9nk1tniN3h/ZZ0+d34TlyP+VybuZ4J54j96mv716M
us9z5H5vR8fUSFP+PSD34in5qywu8By5bwg9qk1pnU2OV6SJRx+VrX+U58h9
0KmE9vHp2aSOTtrqUOLtzy88R+7Fng8f8jGC1tdLrV0jVy/dwnPk7rd+Seqq
ZvRzDdKQ8RWC+zxQpOS19Q/EjC3GuOec7Hm7fmWeI/ceJ2bvqfkgi+XI3cdI
P/fuZp4j90bVIp5Uncdz5P6lmGOnP7N4jtzjfu8fWncFra/Ip3bbzZ55htbR
yDfdTGZHZfEcuQ953TZ6SH9+/sg9+/7ms2Mf8xy5T4pcbzJqWDbLkfuWxvFD
YhN4jtzfHuqmibXNYTlyd1jUe+jUAznk+H/XxxHzI/XO8xy5L23Q5vHQ9bSO
TpqwutZ1/zY8R+4PnAYOOnuPno9e6mLjcfJ15yLnD9ynRC7q3ilAIZ9rkBx+
j3ncZYwi2Uy6/vfW+D8ycj9k/OLxbU0Wy5F7pa2m0fvu8xy5+z3/8LSvH8+R
+5wmQ7qbPuE5cg9yWjGv+leeI3evwd/9PHsppL4iB01wXbTxskLqaORrg5fb
6dpmsxy5G7o/ndfiCc+R+/Z9a8cE2OewHLk3HhniNj6M58i9Xem/NV80eMty
5N58mdOwL114jtwrmQS1b1ufHq9ISXJB3y0veX3krt1y4cygETmkjk6qcmhC
fKhc5PyBu+9Di10HLbJJfb109E/jpdeKfD/I/XnSh9HRfRXyuQbpVWCd6Z/+
ZkkvH5glPyrxi3EPqWb7rHosz5H7miblVyhxPEfuxb4fCfyZz3Pkfn3JzC71
rRWWI/ej82/033ua58i9cpcaYVubZpP6ijzl3caqmrvZpI5GzrQ9GO4/OIfl
yH1w2l33gDCeI/eSgwwpOWZvWY7cL/+9O+HhCJ4j93LPDsr3e/McuTd4UfFz
egGvj9wt611ofGBnDjlekVYcj23u+ZufP3J/6Lzt6NnZ2aSOTpp7vktmhST+
/SD31GoNbWNmKaS+XtrrLbWxq8pz5J77dOJZ06Qs8rkG6dHNxQkWwbgO0XPu
cq3vb3N5jtzLn+5/I7GKwnLk3uzAm0rXxvIcuR/WxvgsC+I5ci8+odeF032y
WY7c99yynzb0TTapr8iVIzpuuDssh9TRyK7ntN4RvjxH7g1n1TDemMFz5B5k
l5UclsZz5D64Z/788948R+5L6vs2sLDmOXI/ER/S8vttfp7I3WhcF7+9zbLJ
8YrU3lJbYspx/j0g9x4n026uaaOQOjrJt2OjLjVT+PeP3O832JdY52IWqa+X
zBYuqBa3k+fI/a751gHvtmWRzzVINfJvnhx2KktK+e/5/4VxH7RvYc4eY4Xl
yN29/cntdWbyHLmfjHqwLe0Jz5G70bHcqms7ZbMcuZ9vFm9c0pvnyD3tZnbr
a7+zSX1F3vMp8Ozhdjmkjkbe61X61pG2PEfuHarON2+Tz+sg9/tZlo4LD/Ic
uSfczlDyqvIcuW8zHv3rzVb+cyH3+pObhyVX4jlybx3Sy7K5bxY5XpE++Hwt
Gzif58h95vVLJtf6ZJE6OmlSQc3J/dvwHLnfni5PiGpN6+ulz2kmV+N78By5
ZwyUoyrMoJ9rkHZc3dJkl3eW9Oq/58A7xr12Xu07QxcrLEfu0Tlv5tg/4zly
97C5lbKkcTbLkfvHdbbn/zryHLmv/KQ93O4Qz5F7Ut8nIXYHskl9RT4z4UsF
10m0jkaeIHnYxfzk54PcY2s7FBxbw3Pk3umO1fXrf/jPi9yrm1td2H2I58h9
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
tSdMI3iVb9ZX79HiGa2jkyau3HC491ON4FX6Bsx+e/8Vra+XIj8Nr/CiyOci
9zaPXEKz/tDPNUjFVla8cKK7lnl3yL392vSxiTE8R+79yrkdL5fHc+TeKuLP
2bQyGSxH7sdt10bOqMRz5P416WyLjcV4jtzLvunUoaWG1lfkqS53roVf0JI6
Gnmv5mbFV5N4jtyv98xKbVib52wuc3pMyRNajeBVpodaNegv8xy5p7dJa5p4
mefIvfONYS36nOA5cn+zZHfj4Yfp8Yp0tWnS4H5FcuRe22RyiUtCHZ0Uu6ax
weMqz5G7xbvBRy6/oPX1kkPr/c/L/Sxy/vjvIu1Mm87tpSWfa5BqGV52TN2k
FbzK2bdi6nl+0gpe5YGKh9ut/akVvMrunYzs//dNK3iVgTvGJs+K1wpe5eMP
reacPqMVvEpnm0VGk8fQ+op8uYzXoMHlaR2NHJtlZh0boRG8Ss8ngSt3XtEI
XuW88rkj13poBK+y48EBxTK3aASvMmVZjyATd43gVXY0Np5o7KYRvMph3U3W
azfS4xXJxTfo5/a9GsGr7B52LVfrTevopICDyY97vdQIXuWVU3v/SiW0glcZ
FFS51oLhWsGrbGXe2+W4p1bwKlfkzPzi/kzLvDvk3tzO3vApl+fI/YnTj57H
k7TEe9TLXy0aHT1yk+fIPX1DjQ11FmmJD6mTy7Z8b7vYhOfIffNq88bPUzSC
V/njRLzZVF8NqaORz9YKNXU8yHPk3vG+xezIDTxH7sMar8opWMlz5B7wY0FQ
Z1eeI/eh5Hjmz5P6yP0cOR/k/oucP3J3Jz8vcq9Ivh/knky+T/bvJsj3j9xD
CC/k3gr4Uq8SrwfqVZrD9UO9ShmuN+pVXoDrk3qV9+B6pl4lXv/Uq1wC9wv1
KofD/UW9yrZwP1KvMhXuX+pVWsL9Tr1KJ3g+UK8SnyfUq8TnD/UqfeB5Rb3K
RfB8o15lMDwPqVeJz0/qVVrD85Z6lfh8pl7lHHieU6+yATz/qVdpDO8L6lXi
+4V6la3gfUS9yjh4f1Gvsga876hXeQ3ej9SrxPcp9Srx/Uu9ygx4X1OvUgvv
d+pV4nqAepVXYf1AvcpdsN6gXuVkWJ9QrxLXM9SrLID1D/UqT8J6iXqVLWB9
Rb3KAbAeo15lO1i/Ua+yBKz3qFdpButD6lXiepJ6lX6w/qRe5SRYr1KvEte3
1KtsC+th6lWOhPUz9SrXwHqbepVbYX1Ovcp1sJ6nXiWu/6lXmQL7BepV4v6C
epV5sB+hXiXuX6hXeQb2O9SrfAH7I+pV7oH9FPUq78P+i3qVzWC/Rr3KL7C/
o14l7gepV1kT9o/Uq/wf7DepV7kU9qfUqzwK+1nqVU6B/S/1KnWwX6ZeZXnY
X1Ovshzsx6lXOQX279Sr9IX9PvUqsT9AvcrG0E+gXmVd6D9Qr7I29CuoV3kH
+hvUq8yFfgj1KrF/Qr3KQdBvoV7lJujPUK/SHvo51KtsCf0f6lVehX4R9SrL
Q3+JepVp0I+iXuVN6F9Rr3IV9LuoV+kH/THqVXpBP416lVOg/0a9yp7Qr6Ne
ZRXo71Gvsjf0A6lXif1D6lViv5F6lY+hP0m9SlfoZ1KvchP0P6lX2Qr6pdSr
7AT9VepVYj+WepXYv6VeZXXo91KvEvvD1KsMhX4y9SqHQv+ZepXXoF9NvUrs
b1OvEvvh1Ku8CP1z6lViv516lR+hP0+9ysXQz6deZSD0/6lXifMC6lXGwHyB
epUlYB5BvcqTML+gXiXOO6hX2RPmI9Sr3AfzFOpVOsH8hXqV/WFeQ73KS+r5
DuOepJ4HMe7T1PMjxj1HPW9i3Ml8inHPUM+zGPdA9fyLcQ9Vz8sY9yvq+Rrj
HqWexzHuNdXzO8Zdq573Me6j1fNBxr20ep7IuGeq54/cn1fPKxn3fer5JuN+
XT0PZdz91PNTxt0V5q3UqxwF81nqVeI8l3qVvWH+S71KnBdTr3IUzJepV/kU
5tHUq2wB82vqVT6DeTf1KuvDfJx6lSEwT6de5QGYv1OvciDM66lXuQLm+9Sr
HAg+APUqHcEfoF4l+gbUq/wJfgL1KmXwGahX2QT8B+pVXgNfgnqVt8GvoF6l
LfgY1KucC/4G9So9wfegXmU6+CHUqxwFPgn1KoeCf0K9yq3gq1CvciL4LdSr
RB+GepX7wJ+hXuUy8G2oV4l+DvUqfcHnoV5lT/B/qFeZDb4Q9SrRL6JeZVvw
kahXif4S9SojwXeiXiX6UdSrzACfinqV6F9Rr3KW2tdi3Hup/S7G/bjaB2Pc
K6j9McZ9i9o3Y9yXqP00xn2L2mdj3NPU/hvj7qT25Rj30mq/jnHXqn08xj1K
7e8x7rLa92PcN6j9QMZ9mNonZNxvqv1Dxv2y2ldk3Dup/UbGnfiQjPt74k8i
92XnfZcOu8t9QuZZ7S73wHwb9R718gT3Bt+WjeY5cm+2MrTFpHqiV/mzY8H1
57fSBa+y6spLBSdt0kl9Rb5qKNvNNi1N8CqXWy6t0HQXz5H7+4ZlfXcP4jly
7/d7cu1XtXmO3L3WuIen56UKXuXU4W2TR2fznP3eA5el7Xy+8By5Jw461H9W
8zRyvCKdnHO/8fStPEfujhVOKffep5E6OknubuW/oR3/HpD7IPNl877apZP6
ekkz/uCovpN4zv7dRFb5ISuGpZPPNUhtly9asrtVuuBVeo6SDIuNRa9yXEKT
4ZN+Uu9RL0ec8Bg37b5G8ConvZ5gut1Z9Cq3GD68W24uepWfVmz8WzYrXfAq
H/u9ff51Y7rgVWaFdDxr0zVd8CorZPxoN6ZkuuBVOpas8OHThzTBq7w5ynpi
zvc0watsbhNtiDNJF7xKL3unxXsmpAteZXbzgE8/99DjFan7Ud2VqrfTBa8y
rv2RK9oXtM6/+31l9XP+b9IFr9Jtctdk4xBaXy+NSVxou+16uuBVBmWk3lmy
lX6uQar3bt3eOqPSBa+y25KxVpd6il5l88PPb9vlawSvcsD73OqP72kErzLr
0IVxGzdoBK/yleeARQtHaQSvcujBiedbtKX1FTl/U7sAo2q0jkZ+dbb7Ce3v
dMGrnLZi0cXLX9IFr7LF8632T3+mC15llzmfxz4urRG8ypCMbWdTi3wucv+y
tsOIcQ00gld5P//JvopN6fGK1LzM8mGBzTWCV1n6Sucr81rQOjppfFKH0ham
GsGrtLW4s9zSmNb/95y/eLFzxboawavcE6rZIlehn2uQmke9b9u8jEbwKg+8
b1+z2h+eI/fl/lWzr7/mOXIfqTPbrDnLc+ZVjpwxR1nHc/Z7D+7pr96exnPk
/szXf0vZIbS+Ij+VK2V49qJ1NHJaZI8b2V15zn4/7aMew34Uydm6bn+7t/Ws
eY7cjxqN+VrbhufIPdOscvHzfXmO3M8vvznHegDPkft8M+MGIf+jxyvSzpFV
5y4ZyHPkviTwY7OQgbSOTnI+Z20cPKjI+QP34p1LmKQNofX10vxRJQI32xc5
f+CeuS2se/Mp9HP/7eMmvPawddIIXuW6Nj0P5F/QCF6lc5tKl/0PagSv0uLk
cvc9azWCVynf8LSMd9QIXuWUxt4Vv07QCF7lnsvXDxweSesrsiH2Qr9KQ2kd
jZxvuK89P1gjeJVV72ctPVUkR+5xVk3sAorkyL3vjWlnhhTJkXuPYpsKattq
BK/yjVvtXWYDNYJX2a/n63af+tPjFalthboeK/ppBK8yLXh816P9aR2ddHeF
efbRoucP3P+U7NVq+DhaXy/lap8qg+drBK/yWut37UtupZ9rkIzL7r687yKu
u7hXqa1Q0X+HOc+R++q5ZR/Yt+c5cm80zi5mkCXPkfuYrw2GPCmSI/cmboez
+3XkOfv3Mq0bB6/pTOsrcobp6DaTrWgdjby/8Rzn4l15jtw/jEjY8KkLz5F7
jmnDqrlFPhe5T+6xo1VWW54j98ezDpys15LnbB+XWPPmYhOeI/d52eH1K9en
xyvShwX5zhPr8hy5n9qd0V1pTOvopP1TQ+N3tSty/sB9W/Qqq7+DaH29NKLl
242h84ucP3APXjp6x29P+rkG6Vbdip9avtQw7w65p1noFl4Zny54lX1ce7xY
t5rnyN3xeZ3xW8/xHLlb+OtWjnzFc+Re627XCWff8hy5hzS+tlM20PqK/Lz6
9A0RxTSkjka2VsI/TTLiOXL3Od/er/g3Xoet65y0RrWSeI7cz12xKH36Ls+R
+6z7rY9E7OY5cp9Ys3elwfN5zvo2qb1a9phGj1ekFgUrF3Vz4Tlyv+73vzJt
vWkdndRwXVvfPR+KnD/++/e8c82Wm2pIfb10LHRor6UTeY7c7cKdi985piGf
a5DyxmdN9Fc0glf5+3ZYiQA5TfAq1xhqbI0rnS54la76zSPW9U0XvMpxU37r
NjmlC15l6qj5Gw6sSxe8yhmX/55evpbWV+QF7da4NZ9D62jkDZsvDKjZNV3w
Kg9urvDy0sc0watMjTpr/dcjTfAqp6b6KWb2aYJXOb902PNGPdIEr/LTtFO/
cvqlCV6lWcj934lz6PGK5Fv5jJnHqTTBqyw2sM59o3e0jk5q9nBUH6sB6YJX
WeJ0vWZDbqcLXqWZQynjsvVFr/LxrIbxa6aIXuXEwwP2RR7lPh5yN9k7sP/n
/DTBq9zv7V6/Vst0liP3s8U/pz3uxXPk/ud2uPMaa54jd6s5D0+MaMxztp4/
Nr3f8pQ0Ul+RN6xf6DFjYRqpo5FNg32Wu+lTBa/SrY9JQjlfniP3aadNL5w8
xHPkXmNvv+JeHjxH7gHdxzbv681z5H5t+IjTZYN5jtx3PtAt/faBHq9IBdff
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
SSWfa5DKrHV8l/s5VfAqD1iXKGc8Nk3wKmNqX9+Z7JoqeJUjfELnfh+eIniV
GZY+62rMSBa8yrevm+ZrI5MErzLWyLuXn3OS4FUa3wkpeNQhSfAqrc90dL5n
kSR6ldMfZActThK8yorbB56qUCZZ8Crz0/tvl0OSBa/yWNtrVx4sShG8ymEN
Tq/urKQIXmX35NCl1dunCl7lUPlhxvVZqYJXudrmROab/amCVxm48sDlnHup
glfp8WvV3Q3JtL5eKqi37/OvH6mCV+nh3DTrcPk0wav83t9xc5+KaYJXmX5D
OVLy33VCvcpF5x+Uys9LEbzKFR6ffoRPShG8ypDiDe+mVE0RvMoW43YsiPmY
LHiVU8zqbJr3LlnwKtd3ezH0YBlaRyPv/XppzKc+KYJX2XdlM9cLe1MEr9Ju
dcqxVskpglf51cvrQ369VMGrLCUF5QYOThW8ykfNO3T96ZIqeJVlvMr/nepF
j1ekn49iAowDUgWv8nKFzzd6xNE6OmlRnUsVG75PFbxKq9xH+Q/zaH29ZLT5
yftXH1MFr/JbreWL6kXSzzVITuXPzf52MlXwKoeH/pkyewDPWZ/2YXLW3xcp
glc5JmTXozhPniP35nVbzSvYx3Pk3jUo96rrBZ6z32f19PWHH29ofUWu+HlP
Rb1RKqmjkcslehift+Q5+31Wc+47/hzPc+Te9filzVkreI7cq5mdC07cx3Pk
nme7yX2tN8+Re4Uym2tXusNz5H7z0GxDi2B6vCLl3JxYvdgrniP3yMpjIg6+
pHV00o5NeundgyLnD9wXzR/eZcFpWl8vPRrSqfPHpUXOH7ifzjm8yqYX/VyD
dMLn8VTXyqmCV3kvY36dPaVTBa+yidX4gyW1KYJXOWRZlSeddCmCV6lTrmdM
qZ8qeJWtL36YtGpoquBVxoddO5y5OlXwKruMqXnF5wSto5G7fnU563wjVfAq
uz9Zf0ZzP1XwKsu+9nLyCkgVvMq5c9yXzLibKniVHU9tf/j4eqrgVT612PIs
4Vyq4FVuKX7ZapQHPV6RniuVNm1dmyp4laNPV6qzbxKto5OuujT+UdMyVfAq
fWwcX3YyovX10qrKTd9UiUkRvMpSc6WqP/xTBK+ynFVVh1L3cL3Bvco+uVLX
381TWY7crx4rZxkzgOfIvcEntwk13HiO3A3uoR39b/Gc/T0p/8rtz8bxHLl3
KL5sjq1C6yty7ckbNvTOpHU08qSdQ546xvIcuS9KHlouXeY5m8ssO3d203me
I/fMca+ikrfyHLkvep2Tfm42z9k+rnte0GGJ58h9fOWQ7Q5V6PGKNG5i34N1
Y/n3zH7PSb9q80scTiF1/q3nv881qjqd54z77wVXGvdJIfX1UvfDk6bfsuY5
ct9Y+cQU3Sj6uQYp5081h+FHUgSvcrpPULfjp1NZjtw/rWq5o2UCz5F7wYJG
00YV8By5byvhYd26dBrL2d9/N9+6+reBH4/cR116+SIvi9ZX5Ere1/9GPEsl
dTTy0UdBoSPO8By5D719JdRhBc+R+6LqmTF2g3iO3AeffVl/bGWes78jdnlj
VpWH/PtB7vMueA5xHspz1rdZExXTKTRZ8ConBRQ7mTee58ynfTHC+kPdZFJH
J7kHVJ40rDLPkfvby8sWzWtP6+ulGc9rzb+8nOfIfXpZy48zcunnGqQb0yyX
bb+RIniVIU1iHO3ri15ljYCnJuE10gSv8nBGWEbJ36mCVznCUVcyLC1V8Cor
lFzl1etBquBV1vhbb9AKz1TBq/QrE2y4M5/W0chBjd2/lO6eKniVBfby3u6f
UgSvMmunU41ODimCV1n3YEGl4ZOTBa/Se22bkzNLJAle5Uzzkm13RiUIXuXZ
AE1OP6sEwatMXHtsZotmCYJXGXB0XVrVabSOTvI1H3HYOTZB8CrP7anRa5Nr
ouBV3t10do+bQ5LgVe5NDPje702y4FW6jq1yoU9P7gGyfxcZW+rjgnyes99n
5bRq77A4niP3h8evye1v8By5X2sTPKZgO8+Re/S7JV73pvIcuXsmr766xoLW
V+T6yftGR8SnkDoa+VNoHQ+HCjxH7u0XldE2HJUkeJWPyxUU3EqPF7xK6fWX
Pv5pcYJXmbvHpfv9pzxH7rN2+9S+G8Bz5J7Uf8nOxg/o8YqUv+v2igahPEfu
Zfpf8ej/idbRSc1/Rrcd2oufJ3KPPv8qo+eOBMGrrHar3YKbX/nPi9ynZiuS
jV8K+dx/z/mt9yPaBKYKXuXCToPLrItKFbzKRn3dS145nyp4ldomRuZ/l6QK
XqVl5zpD/DpTH1InL/l9rKGSkCJ4lZ+Tqwe5Vk8RvMoyx7sfrDo6SfAqv1W4
9WfErnjBq7T31L19kBAneJUt8v56Dw6JE7zKxpZbjAcHxAle5dSr17VpN+ME
r3J1gFXrMX5xgld5vsyvCU1v0eMV6evuK16eD+IEr/KzbVqfx3G0jk7q9jRi
YbxZguBV9pA2Dzn+IknwKl92c4xosyBF8CqlYtoleSOpz2mQjnfcXS49iXt9
7PeU6upczY3gOXIfPPb+7wPbqfeol1u+LGbWuRXPkbvvaRfThC0pgldZJfLo
Ju/uyYJXaSNPX3Pk3/NTXV+Rf61ueCQiKU7wKh27aQqcn/IcubtfLPN7WSDP
kftIzzIJPe7yHLnb9dkjudzmOXK3I8cj9zWkPnJfTM6H/b5Kcv7IXSI/L3Kn
3w9yv06+T/Z7jcj3j9yHEF7IfT7wFbxKuB6oV9kbrh/qVb6A6416ld3g+qRe
JV7P1KvUwfVPvcpvcL9Qr9Ib7i/qVa6E+5F6lTPg/qVeZRO436lX2RSeD9Sr
tIPnCfUq8+D5Q73K0vC8ol7lJ3i+Ua8Sn4fUq8TnJ/Uq8XlLvcrG8HymXiU+
z6lX+Qme/9SrnAPvC+pV4vuFepVx8D6iXqUFvL+oV1kM3nfUqzTA+5F6lYnw
PqVe5Qx4/1KvEt/X1KvE9zv1Kh/BeoB6lW1g/UC9yg+w3qBeZSNYn1Cv8gCs
Z6hXGQfrH+pV+sF6iXqVgbC+ol5lU1iPUa9yBazfqFeJ6z3qVeL6kHqV92E9
Sb3KE7D+pF7lVVivUq/yHqxvqVeZAOth6lWegfUz9SodYL1NvUpcn1Ovshas
56lXqYX1P/Uqf8N+gXqVMuwvqFeJ+xHqVVaH/Qv1KnG/Q73KkbA/ol7lEdhP
Ua+yNuy/qFf5GPZr1KvE/R31KmfAfpB6lbh/pF7lB9hvUq9yA+xPqVd5HPaz
wu+rhP0v9SqfwH6ZepXzYX9NvUp/2I9Tr3II7N+pV4n7fepVDob+APUqT0E/
gXqVlaH/QL3KEdCvoF7l79aF/Q3qVW6Hfgj1Kn9D/4R6ldhvoV7lROjPUK8y
G/o51KvcBP0f6lV2g34R9SrPQ3+JepUF0I+iXmV56F9RrxL7XdSrnA79MepV
VoN+mvB3wKH/Rr3KDOjXUa/SEfp71Kt0hn4g9SonQ/+QepX1od9IvUpz6E9S
r3I09DOpV1kA/U/qVWK/lHqVftBfpV7lAOjHUq+yLPRvqVeJ/V7qVS6G/jD1
Ki9CP5l6lT7Qf6Ze5QjoV1Ov8iX0t6lXuRn64dSrDIH+OfUqsd9OvcqF0J+n
XmU56OdTr7IH9P+pV9kL5gXUq+wE8wXqVSbBPIJ6lS1hfkG9Spx3UK9yKMxH
qFfZGOYp1Kv0h/kL9Sq9YF5Dvcoz6vkO4/5QPQ9i3Jeo50eM+071vIlxj1LP
pxj3t+p5FuN+Sz3/YtzLqedljPs39XyNca+tnscx7t3U8zvGPVU972PcK6nn
g4x7OfU8kXGvqJ4/Mu7W6nkl495SPd9k3Eer56GMe4h6fsq428O8lXqV82E+
S73KPJjnUq+yGMx/qVeJ82LqVa6B+TL1KnEeTb3KPzC/pl4lzrupV/kA5uPU
qywO83TqVX6C+Tv1KkfAvJ56lUNgvk+9SvQBqFfpDv4A9SongG9Avcrm4CdQ
r/IV+AzUq1wO/gP1Kl3Al6BepQb8CupVGsDHoF7lYfA3qFdpAN+DepUHwQ+h
XuVD8EmoV7kG/BPqVQ4GX4V6lT3Bb6FepT34MNSrRH+GepU/wbehXmU58HOo
V4k+D/UqbcD/oV5lI/CFqFcZBX4R9Srfg49EvUr0l6hXORJ8J+pVoh9FvUoP
8KmoV1kW/CvqVa5R+1qMO/G7GPdJah+Mcder/THG3V3tmzHundV+GuO+R+2z
Me6L1P4b475K7csx7rlqv45x76z28Rh34u8x7kZq349xV9R+IOPeX+0TMu7E
P2TcN6l9RcZdUfuNjHu+2odk3Kk/idwHL2gePOUz9waR+3T7Be1lR54j92ON
pH13ZO5JIve3QVc+tFK4l4jcB5ds+b2qG/cYkXu1ZZ821LwXK3iVuRkvh/Ws
EUvqaOTG+0ttXv4wRvAq6+yWCi6d4zlyH7exVei33zxH7tXnGFfclMXrI/eZ
HVY0v3woTvAqS5vPy10XxXPk3qX35AtjftHjFcmjUdfQlkU8T+Te0/Xsd5u+
8aSOTjo7Ldlx0OwiXij+3oO2De2nbI0n9fXSlayfDhvPF/FCgfvxfn88Hsn0
cw3S0xNBE+rFxgteZYq5w87zC5MFr/Jh0qd4l9/Ue/y3nl9q3vCBWZLgVRq7
Lt/zxC1B8CpvnNv5wOtAnOBVev3+1KHf91jBq2z/ynNR7sdYwaucZfHh+bUy
cYJX+WqLX0qrTnGCV/lrTv7xuY5xglepm7nqau1TcYJXWS7tYYcq0XGCV3nu
9ha3e6XjBa/SZrDnlTY94gWv8tGW6BoOi+IFr/J7288xO87TOjrJ1Pji4xuJ
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
2VBpQSz5XIMU1rlU7lL3WMGfPNDA4uM6JVrwJ5d91Mz7sCha8CenN7b5XuJ9
lOBP9jy/vGnHsVGCP1nmRqfUbfcjBX/ya7jVMps6kYI/eSSjYa0SrhGCPzn3
/rwLQUHhgj/549E9x9hbbwR/cuGlrremhr4W/EmPDrYf3v8ME/xJ2bbi90Em
YYI/uXmy2/3UjqGCP9ng4uRlXS6+EvzJo1EWl0buDxX8yQkRuvDjj94I/uTE
pUObV9VECv5kmO1Dp/Q5MYI/qV/k/fll/1jBn5zUbqmP7RLqbRokzz8X63Xb
Esv8OuT+Zvb27TWGR7McuXfMN21Vbhf3/Vi/rvS0p7MucD8QuS/27fd727kI
lrO/H3TXcNuldrjgT1YcNedoYmSY4E/u+V/9wTeOvBL9yYdvqhbb/0LwJ636
3HSPTgsR/MnTv/x7VNv3TPAnL87r0+Xh6qeCP5n65Moog80TwZ+83GiW81op
WPAne/fa4hIYQo9XpOS/eyq1+cjPk/Xrfv7MdHobTuropJZXXf92eMK/Z+Te
8cTbeNOyMaT+v/tdnvAk92kR/xO4V7xo03iPZSz5XIP0y/uKidu8WMGf3PZu
wD5lYLTgT67a5HWydqcowZ8s07Haly+ZEYI/adX+kHNE8BvBnyyf5L+1oXOo
4E/2GdDEdJPyXPAnk5aNtHQc/lT8e9+DB/q0ygwS/Ml2jn6TG2YGCv7kosmu
uv/5+wv+ZIMHxzoNaHNH8Cedz9cf0c39puBPDtI3zZ248b7gTyatj25TeeNT
wZ+80XZ6L++QF4I/efeKY/nIOWGCP3ngpqbEFX244E/2v9EzbOfFSMGfvORx
/YtVk2jBn8yy7+V0sX+M4E9ei0yes+xXjOBP1r+4ZUZoeZ4j9+EHVq/skBMl
+JP3Gsb2t3eKZDn7PTbHtz32GhMu+JOVL19pafmPO+bI3an0y4kVrJ4L/mSP
sGujQ0OCBX9yUohisJn6QPAn11crdtTM6JbgT2b4aR5mVjgn+JOvSI58N5E6
yHcq+Vzk25mcJ/KdQn4u5FuCfA/I9xT53pDvDfI9I9+RhAvyrQMcqT95GbhT
fzIDrhPqT56H64r6kz3gOqT+5A64bqk/eRmuc+pPXof7gvqTiXAfUX+yN9x3
1J8cAvcp9SdjAgvva+HvesNzgPqTHeC5Qf3JrvCcof6kBp5L1J+U4DlG/Ul8
7lF/shc8J6k/WRqeq9SfdIXnMPUn98Jzm/qTBnjOU3+yArwXqD85B94j1J+0
gvcO9SebwXuK+pP74b1G/ckseA9Sf7IHvDepP+kN71nqTybDe5n6k5fgPU79
ya3w3qf+ZEtYJ1B/chmsK6g/uQPWIdSfLA7rFupPzoF1DvUnZ8O6SPj9k7CO
ov5kB1h3UX8yEtZp1J88COs66k9OhHUg9Se/w7qR+pOhsM6k/iSuS6k/ietY
6k8eh3Uv9SfrwjqZ+pPusK6m/uRTWIdTf/IYrNupPzkf1vnUn/wO+wLqT86B
fQT1Jz1h30H9yQ+wT6H+ZGnY11B/0gb2QdSfdIB9E/UnXWGfRf3JPbAvo/5k
NOzjqD/pAPs+6k/iPpH6k+tgX0n9SdyHUn+yIexbqT9ZsnnhPpf6k7gvpv7k
QNhHU3/SB/bd1J8sgH069Sc9YF9P/UnsA1B/cin0Dag/iX0G6k8+gL4E9SeX
Qx+D+pPY96D+5Anok1B/shT0Vag/+Rb6MNSfLAt9G+pPWkKfh/qTz6EvRP1J
7CNRfzIC+k7Un8Q+FfUnb0Bfi/qTpaAPRv1Jc+ibUX8S+2zUn8S+HPUn/aCP
R/3JWOj7UX+yCfQJqT95EvqK1J9Mgz4k9SeXQt+S+pNzoc9J/cne0Bel/mRH
6KNSf7IA+q7Un5SgT0v9ydXQ16X+ZE3oA1N/shv0jak/uQ36zNSfPAt9aepP
ekMfm/qT4dD3pv6kFfTJqT85Dfrq1J88Cn146k/K0Len/uRE6PNTf7IkzAWo
P2kPcwTqT76DuQP1Jx/CnIL6kwaYa1B/0gHmINSffA1zE+pPdoI5C/UnnWAu
Q/3Jmuo5DuPurZ77MO7W6jkR4/5dPVdi3MkcinHPUM+t+O8ZVs+5+LpOPRdj
3D+p52iM+yz13I1xJ3M6xj1YPddj3PXqOSDj3kw9N2TcW6jnjIw7mUsy7jnq
OSbjHqueezLuxuo5KePuBnNV6k86wByW+pMamNtSf7I3zHmpP4lzYepPVoY5
MvUnce5M/clbMKem/uRRmGtTf3IyzMGpP/kR5ubUn/zlXjhnp/5kIMzlqT+J
c3zqT3rC3J/6k1HgCVB/shR4BdSfbAYeAvUnB4K3QP1J9ByoP3kWvAjqT14D
j4L6k0bgXVB/shF4GtSffAheB/Un0QOh/uRS8EaoP2kDngn1J1PAS6H+JHos
1J9E74X6kyXBk6H+ZGfwaqg/qQEPh/qTWvB2qD/ZDTwf6k/+Ai+I+pOfwCOi
/qQC3hH1J9eCp0T9yZngNVF/0gAeFPUn+4M3Rf3J5uBZUX/SR+1lMe5N1R4X
4x6u9r4Y95dqT4xxJ14Z495D7aEx7qPU3hrjblB7boz7arUXx7hvVXt03JdW
e3eM+y61p8e4l3FXeX2Me0u1B8i4P1R7g4z7XLVnyLhfUHuJjPt7tcfIuFuq
vUfGvQ14kgP/y2PZ8//pl7WLpv5UpEs/w9yq5hcPGrLeuuLaB7/kynUT1yid
eI7XQ7Uxe/4cSs9iuc2P9e5rT32XjdqumpB6mOd4naSENIrsv4PnXY+VerNW
+0126Ldnwe6xPMfrZ23Z/iW9R/C804LneWs3fJVv9nNyODWc53hduZXybDyr
Pc9HhtSLKnj1QZ4d/aRegyY8Z/8Oq3rl02ea87xP5SYLfg/LkZ9Z3f+Z1Iye
vyL7T8z926YtzzuMaVn2T5RW/j5Bf65cN3o+GnlV/NtmyiCe9/vve0uQO/W7
lVlqOs/xuj0W/32d6SqeD/zvPEPlV7YDbOLOFPne4Hr+UqphXkIQz03+y8/L
67fNy75l4Dle51P25Jb61liR/sTmDxzbxyho0LwTxr8r/pLnTqlzaeYbfjw+
B1YmDCs9ZxA/HrmbHnjmFxVQ5Hz++3mDpGkNyzh3WMivE7yPri5seD9qP6/T
97/v+Ye8/OblVhZ3s1iO10mbLF3t30d5/W7/XQ/R0rn5i3zjvvL6eD+uKT8o
ZkyVbFan203vgN/78uTZ86f0a72b18frqk+9ym5HPXn9cXljrxS0SpMaruvT
JHlJNsvxvg5w2bTm4SZe3/I/7l/kq/snWO334PXxOky4u2h42atF+P53PllS
yvD08eYJ2eT8FeldoteHxBRef8x/5/NJfnbBd4ltFK+P162/aT+3sclFrqvC
61Y60z3pe3Y0r4/PmVGPPsZ0KpvD6hReh2/l4/O9d/7+TL9/RW6XN/P90ub8
e57U1HNTwbbPUp/woWlvauWQ70cnWedsHZ9rxOt3/u97zpS7fRz8vvX/FPL9
aGTfWYMnabfz+h2k7Q3WNfsijTo3ysg7k58/+32Mut07k17x78f2v58rWV6z
K+pA4wBeH++jZpt+nuxWktfp9bLvxbU2emlYp3bt/h6g379eWtBqQ0nbJdnk
PCPkd23jPDYO4Tned1bn1xds28Hr9Cl87kn+Q1demWHPc/b7YGvd7NSqHK/T
4r86d+Svfm49ykTyHO/TntVMI8ZU4t/zsMLnsDTC39REDlQIX4M0sk/aY/ns
v3zmIFPregZ5MDy36/oGDezwhvNl//4xvXjgnB9Z7Hi2ng+IGLYvnB8/ofA8
pSj/YbMP23G+eF9PqP7eb9iqHFanb/Og8Wv//JDLhfap0PM1r4/39YJ3H3uG
ZfP6nQq/Z6nCsOO/ht3i9fG+3rLZ7nBmEK/fo5CjnBTUf+Km97w++33XU6b4
pzTi14Nd4XUiBS+JG3opi9dnvzf4hZE8II7X7wjvl6+LHPseacW/T7yvZ1hk
Vta58PqFz6VMyS5lWda5dHr+itTVouan4f68/tjC+0ie4L3BpNo2Xp/9O0HD
4M07c4s8nwvvU+nCR4/i887z+nhft450vBE6l9cf+N/z/J3cXbK4M+D/X/+q
71+Rl4e4v922lF9vYwufM1LvhL5hu0zo96OTOpe9F/z4O6/TtfA5Jt/cYNQk
yyObfD8auVaFIbrNJYs8Bwqfk9Is95FVrR4UuY/gvr7rEfDu6BJeZ2Thc1jO
3TJ1+cFW/OfC+9q1c/fVo3fw+j0Ln/PSt3UOh9pbZpPvXy/NPZW47eFn/j1b
Fr5H5KQdLZevus7r432tJE1cnfKV1+9f+J6SCnKex+lucC54X9eIa/uihBuv
37TwPSiXr3C9f8lqb1mO93XpmF8zvNu95c/zwvevVPPDmQqlhiqEr0E6NMl/
f3VzRRql8hINcohc6/vbXH79433d/ZBjP0N8Fjse7+vyp/vfSKzCz3NF4TpB
si02qJx7X36e7O8kHvo0qmfXt6xOf1IHc7yvmx14U+naWF5/UuG6Rap6Y9C5
MhKvj/f1lKVZA2ZW4PWt4P49rI3xWRbE63chOXu+Fa6jpLonV7p1LMnr4339
9qhFs26+OaxO5/+jPvv71BN6XTjdh1+H3eF9PaXnvpYP+uWQ81ekkbOmtjnQ
ntdvQ+qoeb2X99yynzb0Da8/AN7X1eNfluxbndfH+zokb/ikimd4HVtSR/39
K3LliI4b7g7jdcYUrnslu/wHuR/WZJPvRyfZnZE0q2vwOtakjvr70ciu57Te
Eb5FnpPwvl5l7vL62ifOBe/rKOvT9Tcd5t+zBamj/txYueGsGsYbM4o85wv3
BVLF15M8Xi1XyPevl6qv9v9zqQuvb0XqYI73dZBdVnJYWpH3FLyvG32d59qh
Ea+P9/W08jbD9+Xx+6jw/t33YHDP/PnnvXNI7meNObs+7f90WDv5p3Qm2Lb6
4cwswtcgFeuc3P1EJK8/jNzX6vrB1vRzWR+yvm8DC2ue94D762R8SMvvtzlf
m/8j7///6DrvuJrf948jQvZokEJWyKhQVN6KqCREZK+yRUhJVnb2KLKLyA4R
GcemiPYep3QKKUfDKPH7fH+u61xv13n07/U4Xufuft/X9b6v8XTAfoLZFfPD
zgPC9nYiuxHYazG74v97McxVmX6cnosV2PsyO55z85PZN3x6kd0R7GbMrvi9
bGOdAa0z83ncECK196Vpnic7nsO7zD6wBjueq25Ll7RI3kl2yxrseE5u99w2
/NN2stvWYMfn3urHjZMOp/KFWsn/i/NyyYi/50TiOsuntes8mcKOcdtpeo+N
c33ILkB+XTRx4yOzZ2THOKztFnliUzrZTSC/dq2buamyd4HCjnG1KqH27SxL
svf569cSz0rj2pv8yY5xcnJyWrXDabI7QH79fGOXF7vfkx3jnk5K1v7kPLIP
gfw69+mDRcP/y0f+Xb9MctC24dp3lfT5vpBfJ9pa2jav5OuRSuqofDo6L1ek
D/n1L+0BFQF3yK7g7FpcyLEJJLsp3AdW/NTdFbNaZIe4keq8YpAg2rdfOX/z
6y/l3yfOeUP7jHFgXvx3de0bMmHi/z93mQTz6x+LZvsMe0WfR383X5B29Lcx
fR6f++LAxJMjPsnY+kOETaNehsWdJLtizkRHZ0iFCelYQn4d83z4pBSNAoUd
z4mvjb1tXQP6uwZDfn1r5OqsdZl0PjFuzFriOtDxv7wAdcwgv14mN2m61YD0
Fb8funfTcntH0oe6h3B5ctNp2S9IH+OM14Lc+UnrSR/z6zkj3i3Kn0f6iv9f
ZYPdJelo0frhfa3mFBpdz4GvXyZMqdPG3NWW9B0hv37Z457VcgfSx3ObZGa7
9nt70Tn/e68WKjbnxqR3J33F/Lxj/xOR+qQ/FPJr0xHSUw3r8f2XSeRNL85p
F0XPcTrk18d2bY2+rMX3Ry4U7Xy6opc26RtDfm2/sUr19WEZ2x+ppFvKpOW6
U0Vx4G9eI1xxVjGa2Cafnf8y4d0U7bv1OpD+CMiv858II3x1SB/9yFQrUr3q
M+kIkF9XeXW+HWXA979C0IzoVxpuSvrdIL+eVxjiVvcq2dHvPliUnLHYKYqT
f/NKYffWns3aTSA7xuGhf5aY35hPOtqQX6f8KG5/ZQLZ0U/vhy8ZqCqQzmjI
r+v4bfKMD+TPt0pwymgWffxmvjD1b71UkV+vaRBRe5YaPV/FXOty1TOW//kp
fh792sHw8KWLIn90hfy6/GLjpSu0aJ0KrvNU2oHsBvS9mF9fKA3sZNmxQGFH
v7b9pDb6RUPSN4H82u79dbstJe8VdvTrUap69XvL3it0ML8e8nCDYX010lf4
9XXjNxZv6Tw4QX6dL13hMDyR9NGvc7c/0fOIJX3Mr7+P+lpk9oT2B/1aJ7Oj
y8XFpG8G+fWm92fq9XvJ1y8Tnuywmv/1FemPg/dR/4P5yVdakL6C0z/Wc+Wy
StrnkZBft+v8SfX6C9JHv/Zw1Zx76i3pj4D8+vD65smrM/PZ/sskl3pPm/lg
L+lPgfxa3WX/ndMJfH/kQve9CV87vyd9zK+PTGqsUeiez/ZHKhniMHXBikGk
j/n1En+VWr5y0ke/PnJuyqYOaqQzBvLrT16BsX30yI5+3dfkRa+QX6SD+fU7
PZ+qbx3z2f5XCF+7qZh3tCWdvvA+dZ+98JVlkejvAr/2LBo+ZH486WN+PaPN
9oBRbqLzD37dsVfXKR5nSb8D5NcLo1RjDr0gffTrpqEhi37fJn3Mr1+9G1xL
LTWfPd8qIe3NbLUHGjLo9z+7bw/+++zak9Wv69P5R79+DP0R/Dz6dU7IjBWL
4+m8bYD39W69XdXG12id6NcDvOo0Hnr+vUIH9lPSM3DTYsOlpD+Y2VGnP7yv
WyX4bd54jvTRrw/lP8lLCiJ98xr00a8v7Wg2tE457fN4qIf/qWx0Y08o6aNf
VzsYtzt3jvT7MR20o1/vGxqes3096Q/4e68TdIJ9Yzaf5+uXCW8Xbp7z6jbp
GzAdtCvyazvPl/W6kr4dvK/1NHydc0XxB/363W2t7amJpG/HdP7df5kk3GSJ
3Z0PpIP59aQ3d88ezeT7IxdUvm13j6xHOmZM59/9kUp2+ceWr3gkipOQXwf+
7ndzR0v6u9CvZ7yySrYeQ/pWON/y4+mn0nP8uZNdEechv5bbbf2WPief7X+F
MDw55XtiBOkPqEFfMUfx5kLqlSOkbw3v6+imm3at0qBzi359SSvezc+QzqEB
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
ZQ12PCfd4h46xy0nu20NdnzuY9zVrdUX5SrxXIK+X8ttp8iOcXtu3JlXAy6S
HefN7ofMcZe9JTvG4S/deky8kUp27HONDqxvbPSL7BhXM8d+mHZRJU+J57pn
3WdwRAeyY5wsjfTr3KsL2bHPZV6vyYF3A8mOcc95YOLPgkFkx3mzxBfzntQf
kcfWL5OMerTpl/Uwsit4rh8aAY1s+HqkknP9Fre7M0SkD/n17Enbw26YkR3j
zOtUqdXYPnmMZ0mQ2OW3Hlm3vcgOcePBqE2n2zUnO/Jcq8eONnb8RvuJcSD/
m37uTVmuEs/lueJr7u54+jz6e1/biUcbbqTP43PfONCybte8XLb+EME1bHP5
aNHzxTiw8NG1c3vCSQf7WR8t3r6TVJAdz8mUjk3HXfwjOj+QX+tLTHWu7sxl
PE6S0M3w3LRZvqSDPNeh6aM+La6Tp8RzXXvXdMi0FrRvyHO18815MtWH9DHO
PK9b7JHiRPqYX+tEPm9s25b08Rza+DpHOLcWnR94X584P6O+qglfv0xo5SKT
TjMmfexnbfhUsHWbBunjuW2Uf61xej3ROYe5siGWVfoLdHIZ71MkhG7219ur
TfrYz/qdXLhhQq08tv8ySfceoYMvvicd7GdFXTFfMKsJ3x+5cPmS8xD9JqSP
PNebIMeRKkm5bH+kkvyJcd61wkRxAPpZo3pZXlpVL5ed/zIh2MJb0ro+6WA/
K2KC7ymLw2RHPxpRT7tB4QpRXIL8+uELQ5229fj+VwgvWn0OmdaQdLCfNbTd
Jq1R48iOfuc+6n7PJgNFcRLqnNKOPfsmNBadf3xfO/WbeVSddJDnsj6ydFus
JtkV+XVv6YGzqqSD/SzB32fKTl3+fKuE8k16B1b3ylXiubJt1leWfiF99Ose
HR969H5An0e/ftgozq7DD/o89rOMgw7fzSySKvFcxvELH3TNlSrxXF7Vy3ap
V5M++vWAjD9dl4j0kefqc9t68O63UsbjJAnp36sllq9IH/PrhNWnlr/9Sfro
1zcrpc6yfNLHftazwGV+pvdJH/16f+VeVeEu6WN+HTW9R+/iXNJHvx6l30Az
8K4ozkB+vW7Fsbsl1/n6ZcKS15ZjPl4nfexnNSv8taPrRtJXcJpzct+88yJ9
7GdZOK4a2v+qlPE+RUJprEn7eSJ97Gct3P340uqFfP9lkhS907MXG5I+9rPu
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
SznPhfOinOeaAHPgSjwXzKNynusNzK1xnusDzMFynisB5mA5z9Ub5mw5zxUN
c7ac56oNc7yc53oBc7yc57oCc8Kc58qGOWHOcyXCHDLnuebBHDLnud7BnDPn
ue4f3PwofRDpo18fgjlqznOdhzlqznPdgTltznONnlyZu8ua9NGvL8EcOOe5
zsEcOOe5cM6c81ybfg5qOn8U33+ZZCnMsXOea5HXywifw7lsf+TCaJiT5zxX
CszJc57rNszhc57LqE294ap+pI9+jXP+nOfCOX/Ocx0AjoDzXBHAEXCeCzkF
znOtBU6B81y6wEFwnmuBd56JqgvZ0a+Rs+A8137gLDjPVQ18B+e5DgDfwXku
nBvnPFcP4Ec4z9UeeBPOcxUBn8J5rtnAs3CeSwP4F85z1Sr5y8twngv5Gs5z
IY/Dea6BwO9wngt5H85zXfP3MN/Qkq9HLnQEnojzXC3nHlJ53kh0buG8Ia/E
eS7kmzjPhTwU57l6Xxm/rvYQ0f7DeUDeivNcjotNtrpY8fpYlWAb6Ljbb1CO
Es81yDWo+0V1ZZ6rkc3OD21+SpV4ri5Tg67pRJEd423vr91H/K8Oxnmu5EO/
22tuJLvi95olS65vW0F25LnuSJwi6swnO8bDibOHNr7Vn+zIczUuyzM7pUZ2
BYdupN+wSW2yI89l4nB8fsPIHLZ+maTJCNUVqy6RHXmu84cfJoctz2HrkUqy
11ZIQxeQHXkuswM2je5akR3jyen6yU0uCWRHnmverPyjOr3JjvFBq/8n6859
yY4812jD0YEnTciO/t6hzKXvHvMcJZ5riqVPvmEV7QP6+58p1n5/uirzXA7d
FsfUei96jnDfjuiU/KH2VNH6IQ6sz9Vrum8WfS/yXPeefj8eGCNV4rneFDd4
E3uF9JHn0pCPP5e2K4fxOEnCpQfdqwP2kz7et9sOLSy5foD08VzdK6s7M3wD
6SPP5ZrR+VjhHdLHOBN1ZMk9y/ukj/NmvcoTF11cIGUckFzypNvJpi2nkD7y
XA2WTYhqmcrXLxMGe/bR/5RG+shz2XRaX2U2hvTx3O4IahigaUH6yHP1tt2b
bJmew3ifIqFzpX1A9kfSx7r39KMrTm/uzfdfJpkerPv2dTfSR57rVdiHZkIJ
3x+5sNxm3oP2xaSPPNeh7U6pT3X5/kglQfs/S4q0SR95roXuoR7Bn0TnHDnr
zGen+uaTPvJc9et7P8nSIn3F761X/2xeoCWKP1Df6Lq6d9m6eL7/FcLR2+cd
P7/NYeuMlUgLyqZ5tiV99Lv9kT8brGsnihtQD3llM6zqebTo/EMcTnmX/Nrj
CukjzzXHp9npJR1JH/30w029Los7ifwR7tuT/Zst/bqVP98qIURLfehZ3xxl
nquZUbdzYaSPfl3Q+1lIpo4yzyVv5uDVP5g+jzxXmPtSu0p9sqNfj98y0vFx
D6kSz9Utu5V042Gyo1/fKg2u/X4r6SDP9cmxw4V1faSMx0kSRnqXTonuSzp4
36732nBQ/lqyo1+HpzWUtF1KOshzXTMx8+ncj+zo1y33fXX62I908L69boXb
vrfzyI5+XbH5TnjwVNJBnsvmcHT4owF8/TLB2WBohoYJ6SDPdadO90smE8mO
ft2uKOydscjfkeey+R28w81EynifIsH85v55R0T6yHNpL906N8We779MsmRf
rctLbUkHea5B3Qa6apjy/ZEL7x9GtPw+gHTwvl3e+s0pFRu+P1KJu/tR9W/D
SQfr3pmFP6JXi/Zf8Xujfae+ri/SR57rwOJ088rhZEe/dvH2Xlgh0sf7trZb
Ug8PI77/FULsWqcfr/qTDvJcfZd+b/5whOjvAr8e9vasSfwI0sH7dnWz0tPB
hqLzD35tejF5Zqlo/chz1V/Y2ztOtD/o122en+y/3kYUz+G+vblXZr8QI/58
qwSHgMxck4FSJZ4rt1HjCL+epI9+raITeePhffo8+vWa+Q3ujxP5EfJcRW93
3Z1tKzo/4Ncyv4K13jakY810OM+l4+yYaGtIOshz+Z8cPbGDSB/9evPa6ieX
R0g5lyGZUKpt/9SQ7AOYnfNcty6k9mkm2mf067cRQT1chpNO/xr00a87rj9c
MMyYdLCePzg+rWKkNV+/THjeTqOhpzXp9GI6nOca10P3iY/oHGLeIXg2+bFT
pI9+rfJ4sLGraP12TIfzXHmdnXpNE8UB7BfUWdPS6Oxwvj9yweXp0vDOI0nH
nOlwnmu/7jy3OqaiOAnv66h5QeFFI0V+BH79Z8yXguVOpGPAdDjP9XlMqm+J
yI8wD0pzvhbTbiLf/wrBb13rKW3nis4P0+E8V2Hnds0/ip4v9i/Ov1Y1ezJf
dP7Brwc9mb3ijQ/p/PXfffenmfl1z+/N7WHmaOc816lveVHqG/jzrRJutZvW
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
i+M813eYu+M8V8cuC32E/nx/pJLWMNfHea61MNfHea4bMDfIeS6cG+Q8F84l
cp5rZu01W9t48f2vEMJh7pHzXDj3yHmuCTBXyXkuPZir5DxXMcxtcp5r18vf
BsZdyI7+i/OlSjwXzItynqsK5sA5z4XzqJznGgVza5znSoU5WM5zucIcLOe5
DsKcLee5XsCcLee5cI6X81zvYY6X81y2MCfMea4uMCfMeS6cQ+Y8V0OYQ+Y8
VzDMOXOea9TNTYVXCkgf/XoFzFFznusAzFFznmsqzGlznuvN/tdDJR9IH/26
A8yBc55rGsyBc54L58w5z2WsX1y49SPff9l/77u/c+yc56p3Tv9C8Qi+P3Lh
KczJc54L5+Q5z/UK5vA5zzWm29s67ZaL/Aj8OhLm/DnPhXP+nOdCjoDzXJrA
EXCe6zlwCpznQk6B81y+wEFwnmvq2LW/TJ6Kzj/4NXIWnOe6C5wF57l0ge/g
PNc04Ds4z3UO5sY5zzUK+BHOc2kAb8J5LlfgUzjPdR54Fs5zCcC/cJ6rAHgZ
znNdA76G81zNgMfhPJcZ8Duc50Leh/NcnkHb0/QMpGw9/93TgSfiPJfO7Cmq
gyxF5xbO2wbglTjPlQJ8E+e5ugMPxXmu1lmtNvT/SHY8D02At+I8V/zgPrZL
1ZR5ruuZd2tVZmQp8VzRAYY2/r/JrpgTjjS8qDeR7MhzaX2sHztgdaYSz5Xu
cuiNwTiyI8+13a7quG9QhhLPpX1u65ste8iOPNcKs9mRT7eQXfE7C2E+/tla
ZEee60LANLvVb9OVeC7P6FqxJ2PIjjzXtbij2RdOp7P1yySmGvVblJ8nO/Jc
o15qdV16Jp2tRyrZXzHmg/UNsiPPZbA1wqpxAdkxnqR1S7Yb9JPsyHO1tRac
jBbQ34Xx4eSWJbqtfMiOPNfbrUVN0hvRPqO/r3rbNm+3dqYSzzXjzjSjazr0
HNHfZWlVi1P7ZSvxXIcN7SuqskXPEe7b7rYf7jU6RnaMA7dLDdf4nKfvRZ7r
/a3Oswufkx3PybwrFlMSROcHeS7zzvqaKb8zGY+TJHw68Wxh14ZZSjzXHpfx
kWnjSB/PlcduvX2fx5AO8lwZS2Sd7S1pHxS/U+B3LNnVjvRx3qzLnbRF84VM
xgHJJX0aD2rS1Y70kee6XxHb/djyLLZ+mWC6/qnWa2/SR56rTVODXnOnkz6e
21sey02vTyV95LlcWvppxG/MYrxPkTD8pqHmp2DSx7r3y992J6wX8f2XSYYf
6tlr2GbSR55rwMkLl8wf8f2RC/q5E5+sfE76yHPFyI9d/xrE90cqeSPTvWcb
SfrIcx31n2aR9ZL0MU5afGu0LS6X9JHn6tp96usQKemjH+1f5iZ/Vy6KP1Df
eB2Tcb3nd77/FcKD8uMlbhVZbJ2xkgdqc9dZ1yU7+t3znU+a1+9BOshzVR6J
2mtVQnaMw4udTUaY/iId5LnUtTvedbMlO/rpxpknJy5wEvkj3LcrVhsM8arm
z7dKaBUR8aBEnqXEc60OfOXX4zvtD/r14cGla/r70efRr1+l3p2nkkGfR56r
0U3DZDs3Wif69a9herfaeZEO1r1L2nbVXf02U4nn2hNVYpmVRvrIc00ynTL1
3q4sxuMkCS4BU7qp+JM+3rfrZCddnptK+ujXa5fvHqb6g/SR52oY+9JvwHnS
R7+eeth07dMrpI/3bd/jFuqu1aSPfr2kuCjsbidRnIH7ttNFnSmdHvL1ywS5
6ZG5zZ+QPvJcc0ryH6X1Ijv69dnoisuhY0hHwXPN6DJbNzaL8T5FgsVuvceF
70gHeS4X9YLybtOy2P7LJIt+LR+6dhXpIM/V1qb0x4Eovj9yoTrGoatKIung
fbtoVT+bC75ZbH+kks9F9y199oviANy3cwdMbpeYKvIj8OvEHtsO+0eTDvJc
wc2Gj99/jOzo13Mu700oCCIdvG/f8WrYot1Lvv8VQs6HNc0zw0gHea7Vq3ce
Dbog+rvArxM36BgZXCQdvG9PMkxy3CSKn+jX0b+3VlzeRjrIc/l1mrqxu+h7
0a8dNXeo1r5COnjfVl19Qh7oxp9vlbB5stGcWxOylHguq4+CaXUX0ke/zp46
tvtmDfo8+vXlYw0NE4fT55HnGjmz9reP10XnB/y6k53N1b6XScea6XCeS7tk
/eRW60kHea7uq18dHC/aB/TrCe+fp3UJzeJchqRqw2vjiJtkH8DsnOeqNeK3
4+JLZEe/HjvvyIdXp0infw366NeTIpr2DU4mHaznP2mRP+vaHr7+//KISUGF
IftIpxfT4TyXUR2PeXYyUbyF97WavP1hv31ZjPcpEsrvzagX50k6dkyH81wa
03x9Ld+TDvYLZgeOCDq3ku+PXDhrOt5WbTzpmDMdznNN3Wn/bEGSKE7C+/rE
jU+qRfYiPwK/Pv46ON9Kn3QMmA7nuZZljGqYIxHFeciDrqlMzdfT4ftfITQ6
WdCt/q9MJZ4LdTjPtcTjTPDmENF7Ct7XzzYLP4+VUJxHv/68LWnhjjTS/+u/
++6/d46Oz9iWxexh5mjnPNelH+07H47JZM+3Sig5+CsnKIb0HZhfc56Lfy/6
6bKYwpwzc8mOPFfLQeWPDgtZjFdStlvXYFfMYzd9sWNmM7Ib1WBX8MtThh7U
SqK/y6oGO57zBsNaLFY5THbHGux4bsu/za/VfHYmjxvCxeoll3StyG5ag31g
DXY8V4MOT51905zsljXY8Zxsanpiunw82W1rsONzL/zdYuboI5lKPNdZl1ZW
Nz8QX6D4fwv93vVpWUh2nDerY1m/hXEd4h0wDncauWPjhl/0eexz2ZvpFUhV
6PMYVyvbXbrqKPo89rkCvHN1rpeTHePksFyVp00+kx37XFaSCvOX6WTHuFf3
YVaoUxzZcd7snXfD+Mq7WWz9Msk3n5uD/a6RHftc0uaPNXsc4uuRSs4G9HVa
t02kD/n1p7cdnKLnkx3jzMDjYeYpTlmMZ0mQGF88dsLJSGSHuBHTd0vnRs3I
jjzXjXalzm/z6DliHFg/PUBTPThTied6NkK2VVdVmecy2/68npqE5s/xuQce
aJ/atIKvP0TQCwxec3QkfS/GgXDdkpYhTel7sZ+Vca7T3QsivgDPyUXBIq5t
imj/Ib8eOPWXtCgyQ4nnuli/dPMttwwlnktv+8vjG56SPp6r9SPTermEkz7y
XN49F5S9H0H6GGcGNw5IMy1IV+K5MrV0vXTOkD6ew6WeqwKrdovWD+/rpd6r
w2z2pyvxXBY9Q5tZ7iJ97GeVrRzuriXiF/DcOhVHe3vPEp1zmCv74jHnhfeU
dMb7FAndLDJdKhaSPvazznzVHR9oz/dfJnF1v6A/VI/0sZ+178bFX79np7P9
kQsxGjkLNTaQPvJcxT7bzxQ14PsjlThXvH5yM5jOCfazptgZeF8KTGfnv0zQ
7JT1vu8T0sd+VsXeov0xPnSu0I80Z8+50zOIniPOlfUb6N9B+o3vf4Vw59ud
cl1DOj/Yz2q0bqC3/mSyo98lRRs3KG9POtjP8pq3O6nHNvpejMNXfA72OZ5H
OshzuTn4bNl4Mk2J5+rd11NfRTdNiee6IDnodMcrkz3fKkEvZ/5jz8RMJZ5L
u87E7ssTaP/Rr09WLb40s6Eyz6UbM7gw4Tp9HvtZK0L2ypu4pyrxXDaqYz83
dUlV4rm2BI5csSuU5tvRr49s6Llvpy/pI8/VbZp5v+DXKUo819ypE4NPv0hR
4rkSz8o9HnqRPvr1mLLHDk/tSB/7WXXPWq+v9iJ99Gthw4W711eTPubXR/Xc
ZhgN4bySXBJ9J64qsJLOG/az0nNVvYKX8vXLhAX1Qks6eJI+9rNCcxZ+e+lK
zwv9Ok27V9UPZ9LHflb6wcCeGgEpjPcpEnK/HBp46TzpYz8rcspyWczQTLb/
MklMz9hNjyrIj7CfNfVOtXp6Lt8fubCoZcv3WQ3p+WJ+XfuD+8Gz//kj57nK
zBrnt75M5wTza9nTFbc/TCY7+rVZ26XNc2ulKfFcKl1svg8dTN+Lfv3G/lvB
oQhaJ+bX1v6370z3SGP7XyG81/5YfeQCrRPnyvqsKLvi3Zb2Df1698/fkSGN
SR/z6zHDK66vmUn+i379fcaYY1YC7TPOlS1e6LNr7ptkJZ6rq9Ys/blPk5V4
rqKTlcsff8tkz7dKuLbUxcxUxFUhzzVXrnn5YyydT/Rr7I/g59GvR068W31g
B30e59P2v7I8V3Cf1ol+XaeL1NMpIlmJ59KPqt2tf3fOE5Gd81yHvwwvcbuV
zHicJGHA0vFdSm6QvnkN+orf0zy9snPqVtpn5LnUuxfY1hfpo18baWrNm3WL
9PsxHbSjXzePO7r57KAMJZ6rMnR+cIe7fP0yITxmSZzJI9JHnqsZ6KAd/dpK
MtvnSDydZ+S53DPGxaYkJDPep0jw2DF2YnAm6WN+bQk6/+6/TPJrTbsjsemk
o/j969sZFmflfH/kwsr9+3NWFqco8VyVoPPv/kglCwZKf7k9Ix3Mr0+b723s
PkQUH8CvpUc0btQdmK7Ec204X7/a4x5/7mTnPJdh5rXEjgnpbP8rhLapR7/v
aUrPcUAN+ujXYwPqp5rdJn3sS968svJrp0g6V+jX2wbpzd0mOocGTAftirqZ
1R5hZTjpY379UW9itJWI61T4tY3zvdJ40ndgfv3v/jwXHNn32tRgH1+DHf3O
h+3P8Brs6Efu8NzRrvh9LnZOhtRgH1qDHc/5YHaeFb/PxfwIz20TZkeei/sd
nsMrzN+R57rK7Ir+NYs/VjXY8ZzYQ1xV+GkNdnzui+H5cp7rM5wTznPthHPI
eS65i83i0rWZSjyXNvgF57n6gB9xnisX/JTzXBHFWlsaFKQp8VyrIG5wnms9
xBnOc62EOMZ5rttrFjnXiUpm65dJbkFc5TwXxmHOcxlCnOc819hpW61sbpJd
8TuA8N7hPJc/vKc4z1UX3oOc5zq68s/PxAdkxzigD+93znMdh/s257m+wHuf
81zXIT5wnqsK7huc57I5/35CiAo9F4wPO+A+w3kuvM9wnksG9yXOc/WC+xLn
uV7BfYzzXCPgPsZ5roFw3+M8V22473GeSw73Sc5zPZ7fxCL5GtnxfOJ9lfNc
99cvTOybk8rWLxNew32Y81wT4D7Mea5MuG9znusu3Lc5z5UC93nOc6XBfZ7z
XJgvcJ4L8wXOc72GfITzXG/P2PXtuzGF7Y9UYg75Due5MN/hPNdYyKc4z1UH
8inOc82CfI3zXEmQr3Ge6zDkg5zn6gz5IOe5rCHf5DyXYbhu3YSdIp4R4nB7
yGc5z7UM8lnOc+lD3s15rnaQR3Oeqz/UxzjPFQp5Oue5bsJ9nvNcV6E+wHmu
+VAf4DzXW6g/cJ4L6w+c58L6Bue5VKG+wXmu1lA/4TyXIdRPOM+lBfUZznOV
Q32G81xOUP/hPBfWfzjP9QbqS5znKoH6Eue55kL9ivNcM4KaJzTeTvro13pQ
H+M8l+YSp9GdTTifWyQ4Qv2N81yfoP7GeS4zqO9xnqsc6nuc51oG9UPOc7lB
/ZDzXAOhPsl5riyoT3KeawPUPznPteCD7iK1JvTc0a9Dob7KeS5VldGzf7/k
+18hXID6Lee5sH7Lea7rUB/mPFcW1Ic5z3Uc6s+c52qan3u1vSudK/TrdVD3
5jzXS6h7c56rE9TTOM91HerqnOd6A3V4znP1hbo957lMoM7Pea4P0BfgPNd5
6CNwniuyTief7GCuLxOwT8F5LuxrcJ6rFvRBOM8lQN+E81xDoM/Cea4D0Jfh
PFcV9HE4zxVv0NKutJyvv0LoDH0iznOpQF+J81x3oA/Fea4z0LfiPBfOIXCe
q3enG10PpWUq8VzYb+U8l3GQT2B5Adkx3taF/i/nuS5Dv5jzXIHQj+Y813Ho
X3OeKxj645znmgH9dM5zyaFfz3muRtDf5zxXC5gf4DzXyatObpIgvh6pZAzM
M3CeqzbMP3CeayLMV3CeSx/mMTjPhfMenOcaA/MhnOeaBHMsnOcKhLkyznPh
fAvnuT5DH5zzXDhXw3muXTBXw3muJJjb4TyXM8ztcJ4L54I4z7UG5oI4z+UC
c0ec57oLc0ec58K5Js5znYO5Js5zlcLcFOe5vj9eE/TsOdnxfKq8/TuXxXmu
TzCXpcRzwdwX57m6tVpfMjGd7Hieca6M81wXr/tWVS/g/l4knIe5Nc5z4dwa
57nKYC6O81yzYC6O81w4d8d5rh9dbm4Pu873RyqZBnN9nOfaBHN9nOdaB3OD
nOdqAHODnOeaA3OJnOdqOP1cms/PTLb/FcJemHvkPJczzD1ynqsK5io5z/UZ
5io5z4Vzm5znci/dM8BsBumj//rCfCnnudbAvCjnuQphDpzzXD9hHpXzXL4w
t8Z5LjeYg+U8V2uYg+U8F87Zcp7rJ8zZcp7rPszxcp7rKczxcp7LH+aEOc8V
DXPCnOcyhzlkznP1gjlkznO9hTlnznPFWKo2XpBD+ujXvWCOmvNcb2COmvNc
1jCnzXku8285vfRCSR/9egTMgXOe6wXMgXOe6ybMmXOeS6fDojbvj/H9l0lw
jp3zXK9XbNByt+H7IxcMYU6e81yRMCfPea4wmMPnPNemXF/Di1NIH/16Ncz5
c54rC+b8Oc9VAhwB57n2AUfAea65wClwnksAToHzXLeAg+A8l25315LCA2RH
vz4BnAXnuZYBZ8F5Lk/gOzjP5QJ8B+e5NGFunPNc74Af4TzXceBNOM+FfArn
uTKBZ+E8Vy/gXzjP5Q+8DOe5xgJfw3kuE+BxOM91BfgdznN5AO/Dea4R+e21
62plsPXIBW/giTjP1Uk76PzpjmTH89YOeCXOc20DvonzXMhDcZ7LfMDDc1qG
9FzwPPgAb8V5rsPVVW9dd2ex+liV8PZqg9o7pqUo8Vz6i1/u32RD3JDi/w9f
atQop5T4I+S5UnNnrDvkyHmoCslCV4sRZtVpSjxXr9CKzCGSVCWea/wDJ4nG
eLIjzzXsvapbu/pkx3h441lAcwv/ZCWeq4PNrI+/2pMd41vVmPCRVg3IjjzX
4h6lA3/XTmbrl0nyCj8bX6tFduS5/L4u9qjTOpmtRyqZsrvjG6Et2ZHn6hYX
nnHcjOwYT2ZObnbRxZrsyHMNG2odOW4J2TE+NP/xzrvRarIjz/XKw13VIYjs
6O+/u1efsriarMRzff66bJ3Od3pe6O+xIfEyt+UZSjzXqTHzdE396PPIc8U9
u1bXNEm0fogDB3wWHW/wnr4Xea5zUavi+3xLU+K5omMNXdaOpHOCPNcWnToB
LxumMB4nSZgY0ayjsVaKEs+lWfVVv7tHqhLPdUM9N9jrK+kgz2U/X7vOToHs
GGdyT9t/G+FA+jhvdmjW0FqbJ6YwDkguuVrxRXO3Cukgz7Vht/ezXqv4+mWC
j0GT4X82kw7yXNlGPZtbZ9K+4bk9NCwu8d1l0bmCONZzfredLw6mMN6nSHDq
+uvYuXukj3Xv9ZIXrwwvJrP9l0mWSK7MWn2C9JHn8mq7NeZpHt8fuTB4hMeq
TV9JH3mu5t81mpVfSGb7I5U0bbbGpOtFkR9BnOzWUqI/qRb5NcbJTqdLF/zq
Qs8Rea71Hfsm3npA+orf8anfrNL+mch/ob6RMaOhi4dtKtv/CmFgfa91h5xT
2TpjJd8GyfPi3pI++t2es/VcLAtEcQPqISP175gPmU/6GId/VPcOkmwnfeS5
fjbWOdyhFu0b+qnX1fDK401on5Hnsuvq16t+SCp7vlXCo5C4hFm3UpV4rjnX
3u18szxdiecyc93WtdwuQ4nnaje755wNIn9EnuunjkGPwd1pnejX1m+/pTYc
mKLEc53SNbbwuZymxHPlD9CeVmJA+shzfajd8ovUKYXxOEnCgE1pDRbOI328
bxs9a9lWo4j+XvTrR6VNxpzcRvuMPNfMcrOv70X+hX59+8wVefxh0sf79hvz
/IzgaaSPfr145pSVA9qQPvJcV3Pjyzxu8fXLBNOiLU1eRJE+8lwqf7yWHahH
+ujXSeXjjiQmkw7yXEdmRx4eX5jCeJ8i4evkPfPGVJM+8lxvVr508YpNYfv/
3/trVsONRldJB3mukC8qb06qp7L9kQtGtnk6usa0Trxv5y4x8x95NYXtj1Ty
p/B9ePuDojgA9+26OR6+UWNIH/16/0HjsieLSR95rq+TE0YsCiB99Ov5y/xM
ytaTPt63R+U116+9M5Xtf4Uw0/z0klFXSB95LkO1qkv9t5A++rVrr9wHK5eT
Pt63N63r8OnsG9JHv3432mvxgp+kjzxX59+XvxitJn3063zvE+3uLyB9vG/f
d6h/V7dtGnu+VYJUT8vl4fg0JZ7r9Mr9S5MyyL/Qr9U2JJoJF9KVeK70qytm
eW2jzyPPpZZQpzzIXXR+wK9VH1uMn+uaosRzoQ7nuQ52Kt6eY0j6yHNd2dgx
t4dbCuNxkgSXKzlea0X6yHNNurkn9KksVYnnQjvnuZptOfKjXKSv+N3eWpcM
3ReSfv8a9NGve3yyP7EnmPSxnj/ZzzIrfSFfv0zo0Ez7Ux0P0u/FdDjPNTXj
rX4nV9LHvMO+Ub34WhtSGO9TJHzq0/b31a2kb8d0OM/1Y/qdc417kj72C6wr
x/dNPsD3Ry7smFpkPu8M6ZszHc5zNfWvSn5eKoqT8L6OHWBXMee6yI/Ar2do
y9dEJZK+AdPhPNfkqQeHLL4nivOQB81/FXHyi4zvf4UQnSHPX2hA6zRhOpzn
6vor9Pf5zaL3FLyv3Z+16xpjRfuGfj2wdvKbaw9I/6//7ruv4XHe75FDCrOH
maOd81wjF00P/pOeyp5vlVCy7v3GLtvJjxyYX3Oei38v+qlbQZDz0bZkR57L
/PaRlqs+JivxXNxuXYMd/eieob/NhftkN6rBjn5xf0oP92p/slvVYMdzPnv/
76trV5PdsQY7nlufA2ZFm9yTedwQRn5qPq4ykOx4Du2ZfWANdjxXBsf9258w
of1EnqsXs+M5CWzh99tnFZ0T5LmOMjs+951GT7o/khNHgPNmkzx1Nta6n6rE
c83ttL006A7Zcd5MZ/c0m8eHyY5xeP+eOwfaHyA79rmeHrTynrmE7BhXB+e3
NWw0l+zY53IKb/CyrkB2jJPHJ5zKdh1AduxzNeowdfSdJmTHuLfBq+Jg57pk
x3kz480NwrqkpyjxXFrad5t9fEd27HOtbdHwZsnZFLYeqeSnWeK4sUfJjvNm
LosX2qS4kR3jTIMxo4douaQwniVBMsEgovX4SSI7xI2mQ9eW1u5NduS5BoUP
/bRFhewYB/LGGlgv/EHz5Jhf2xWoHPiQQZ9Hf7+7/s3SikSaw8fn/uzax+Gv
E/n6Q4Shc8NnLipKVuK5ItJrN+r3hL4X+1mXbpzK2BZF8/N4TjL9V85PeCza
f8ivp9ZbP9jhaDLjcZIEHdPDWtHbSB95rrxzFUNU7pI+nqu0EeeuOl8kfeS5
+lbk3/q5lPQxznSf7v06xJb0Mb+evyshq20g6eM5DFD/Gltrr2j98L6e0cO4
MqYrX79M+JE15OtgddLHftb6F50mp60hfTy3C1aWBq5fJnpe+P+EOy16Pqgy
SYnnevjO+ltweZISz2UYPG6S6lS+/zJJ5eTUm4dHkz72szZvuV8w+kMS2x+5
cLxseuXEYtJHnuvrNbeKqYP4/kglSd8e91DpRfrYzxrpO8+qsF4yO/9lQscr
HawbdqX9wX6W7sOdbbdokj76keypr25cA9LHubJyv6ueVXl8/yuExdtv7e03
hXSwn7XRx/GlTRl9L/rdFk3p1vhU0sF+lt3KzwOCoymeYBweJZRlZBgQb4I8
V5LjdfNjIr9APx36fG9ExEvaZ+xndV8/qPtYB87rVQkrne83SfeluXfMrzcf
XDOlchL9XejXffb0vhaSRzwL+rXOzL25mcPo89jPUik5VXL3Cj1f9OvGl742
Cl6bqMRz3Yr7eb6OJemjX284uaFXd2PSR55rd3O9R4HOiUo815fKD7+e3E9Q
4rlUuj1u87g36aNfZw/wre7YmfSxn6XusdlEb3eCEs9V8lg3YfpW0sf82qOq
+ffW7Ukf/bpadrdomDrpYz+rQ/dBj4fMSWDrlwldnb/vDb1F+tjP0pR5LYlR
I33F//9vPnN3h3qkj/2sL/aXv3pdTGC8T5HgqdXr9wtj2n/sZy07Ejzo4+9k
tv8yyYH9A6+1K6Xzhv2s8+XuXVIsEtn+yIXJJ0bOqjJJUuK5VPq/j1palMz2
Rypp0+lY3RHPSB/za9WyB3MFLzo/ivy6smXb3vtFPAvk19UhAarFIs4I/fqK
9Vdh1XhaJ+bXWyo62J3eyHm6CmHcroytRz7RPuNcWe9Wd9qbjaB9Q78+F5YR
/qVenBLPNVnvY2yjayKeEfw6Iurx7uUtiUfDubLMj3ala7fHKvFcBU5Rd+d8
jlbiuRx8nk/YvCaNPd8qwX7m+ZCn0jQlnuvkIp0Du6fS34V+/RL6I/h59Ot6
/aJU97ehz+N82ueW2ikj70cp8Vy5fwwTgiNfKPFcbjPqL7KoIC5jMLNznqtx
6ImGa9a9VOK5Fh9wGX42j/TNa9BX9Kn7X+/rKiV95Lkifi4OqR9M60e/3je8
vuWwY1FKPBfqoB39+tHy2SYb40gf+3QBHs+aXS6OYuv/L184Pr7Ys3+sEs+F
OmhX5NcGkqR2D0kfea6NS+6YO25IYLxPkTA84YfVz2cJSjwX6vy7///FCV3J
0KXNyE8xvz59XjazkVUi2x+5kL4mMexKF9IxYzr/7o9U8muCtk/6ITrPmF8H
/Vmn1uUG/V3o1yfvRHmfyUlmXEySpNzF6MCwd/y5J0nkYOc8V7263QLbt05h
+18hNMgxyK62oHOOPFcR00e/Du5rPOGqaYQSzzXzpssw+VbSR79uVj8u+Mwd
0kee6xjo/Lv+58IFpo/5ddOflnZDi1LY860S9LXaHsmaSRyTA/NrtKM/nmXf
i9zWOWZH/+L7gNxWMbOjv1TB80U7clvD2HnA8z+C2ZHbsmV2PM/O7Nwit8X9
Bc/nY2Y3qsGO582K+fWgGux4ftxZnLGqwY7nQQ3ip8Ifwd6I2RX8DjxHzm2p
wXng3FYjOG+c27ptFGh+fSnZMd7Wh/PPuS1V8BfObQWBP3JuK6Nf+44G4zgn
JZdkQXzg3FYwxBPObdlAvOLc1oY6/mW63rFK3NYDiJ+c2zoI8ZZzW34Qzzm3
1Tvnd64044USt+UE7xfObZWf//s+4txWPLzvOLf1ykp6K/ITff7vcw4zfwHv
cc5t9YV7Nee2RsL7nXNbPSEOcG4rHO4VnNua/P7T4BGFr5W4rTNwb+HclhPc
Wzi35Qj3Is5tdYN7Eee2QuDexbmtrXDv4tzWQbjXKXFb5/7e6zi3hfdGzm0V
nj3d+tMYsiv+fzO4l3Ju68L6rx/LopPZ+mXCXrj3cm7rLNx7Obe1HO7VnNta
DPdqzm2pwb2dc1tFcG/n3FZnyAs4t6UOeQHntn5B3sG5Lbk8I+hFagLbH6mk
EPIazm0th7yGc1sZkDdxbqsp5E2c2yqEvIxzW/UgL+Pcli/kfZzb2g55H+e2
VCGv5NxWkYHGPBUTEbcIcbgD5K2c2/pT/Ddv5dyWAPk157Z2Qr7Mua0IqINx
bgvzcc5t2cG9nXNb9lAH4NxWItQBOLe1GeoMnNuyhToD57aWQh2Dc1sboI7B
ua0CqJNwbqsC6iSc28I6DOe2NKEOw7mtaKjzcG4L6zyc2zoBdSTObX2COhLn
tiqgTsW5rQSLDw0v/UxS4rYioQ7Gua0+vTzLm7uksHheJCyCOhvntiZCnY1z
W5VQx+Pc1gao43Fu6yDUCTm3NRPqhJzb6gF1SM5tuUAdknNbyVDn5NyWZpBB
71WzSB/9WhfqqJzbihvQJVn/Jt//CiEd6rSc25oGdVrObWEdmHNbWAfm3NYL
qDNzbmvii9VfjN6RPvo11rc5t2UP9W3ObXlA3YxzW1g/59wW1ts5tzUe6vOc
26oP9XzObc2C+j/ntr5Dv4BzW4esN4eNfM71ZUIb6EdwbmsA9C84t4X9Ds5t
qUF/hHNb2E/h3Bb2Xzi3ZQH9Gs5tNcrZZxvtl8rWXyHshX4Q57awf8S5rXnQ
b+LcFvanOLdVH+YNOLeV3nrK5aSFaUrclgn0VTm3tV/r4s5R58mO8fYV9Hk5
tzUP+sKc25oOfWfObcVAn5pzW9ugD865reHQN+fcVhH05Tm3NRL6+Jzb0oU5
Ac5tPd68eXDgSr4eqaT6z8X/n1vg3FYTmHPg3NZsmKPg3FYYzF1wbqshzHVw
bqsRzIFwbqsA5lU4t2UO82Oc27oHcyyc2yqGfjfntnB+hnNbXWB+hnNb82A+
h3NbOJ/DuS2c/+HcljHM/3BuayHMF3FuywHmizi3dRDmlzi3VQrzS5zb+g3z
UZzbelR9ao/maNLH84nzV5zbwvkrzm3lw3wX57bWhi+++64t6eN5xvkxzm19
zvUP3xOewvy9SEiF+TTObR2G+TTObeH8G+e2VGH+jXNbbjBfx7mtwVdmqnW6
nML2RyoJh/k9zm3FwPwe57ZwPpBzW9NhPpBzWwNh/pBzW8tdNQ6uikpl+18h
FMB8o9LvcMF8I+e2RsD8JOe2TsP8JOe2dGA+k3Nbz6avvzBfh/TRf1fDHCnn
tmbDXCjntuJh3ptzW/Ywd8q5rVyYT+PcViXMu3Ju6xfMu3Juax/M03Juywbm
aTm3NQDmdTm39RPmdTm3NRfmgTm3lQrzwJzbwnljzm2tg3ljzm3hPDPntgYm
hUZ01SR99OshMC/Nua1WMC/NuS2cx+bcVptxRcPmRqcocVvjYN6bc1s47825
rYMwT865rTOfcifkXE5h+y+T4Lw657Zc6wdkaiby/ZELOA/Pua31MA/PuS2c
t+fc1psLuyM3nhD5Efh1OMzzc25rNMzzc27LCXgBzm21AV6Ac1uvgUfg3NZm
4BE4t4W8A+e2Xk7UC9uSQ/6Lfn0GeArObSFPwbmtWj3+chyc2/oCHAfntp7C
fDjntl4DJ8K5rabAlXBuayhwKJzbmgHcCue2kHPh3NY04GI4t4UcDee2coG7
4dzWIuB0OLf1E7gezm3tjvm43HctX49cuAncEOe2npyUzTLJIzuet4nAJXFu
yxA4Js5tuQH3xLmt3NJmiVtO0PNS/B4ucFWc2/oeajEjul2GErd1asfhpu52
CUrc1smPU29v3JmkxG29f2i3wX4r2ZHbCrtyyvHAWrIr7uFHX19vuJrsyG05
r/n6+r0L2TF+9qgu8lsyiezIbQWdyitq1Z/sCm4r92Li7dhEJW7rTqTDse2L
6O9S3FtuNPXW7UN25LZ8jnhur/8kTonb6n157ebv/mRHbstm0uCLi+/FKnFb
kd6fuo2+QHbktlJfNl1bvJDsGE+uhi73sFtAduS2Arq4tV6zg+wYH7YfHGyr
uofsyG211q3cNjGa7Ip7uMHL3UnvYpW4rX2+QzW3LKH9RH/X+918ldGeJCVu
a2ZlfN6a2aLnCPftZ84Pb25To/3BOPAoQmNzTLM4JW7LYtePqqaOpI/nZNHc
MZHVNqSP3Jaapcu1biPiGHeTJBS0HhUcZk/6eN9uttDatIUR6eO5ar3a9+oJ
LdJHbqu8x8vH57eSPsaZjVNzvnfdTfo4V1b74dJln94lKnFbG3vIUuZepXOI
3NbeUx/u34vh65cJh8bVvRWcRPrIbXWZMSPWbi/p47k9Mjpn9yoN0kdu64Sa
rnHbnDjG9RQJ53+8lKd3jVfitqpXFW2Z8DBBidv60Wre18EXyS+Q29pfFj1L
Y2W8ErclDd27Vn096SO3lTFB8lllawLbH6nkubxL3S9rSB+5LZejty1W7iR9
jJNqX57rBmaQPnJb7jeKy0O9SF/xe3bNq+rnryB95LYOZp93b2iQwPa/Qpi8
2cZn20C+zlhJ313LTqm5kx39rvX8Fg07eoviBtRDNl2M1ooeQXaMw7HTr9/Q
CyAd5LbubrnUWmcL2dFPbzbW0s7yJR3ktga9GHzASJrAnm+VcGztxAkPSxKU
uC3Xkxrt1w+g86/4Ha5LlwIKlicpcVuzKmo9CdCmzyO3dTn61b35u2md6NfF
tSXtHuyk78W69+iHBx1mtiJ99GuLwz4LVpbTeUZu69yFfXXeifYH/XrTr9MP
BwSQPt63H+keOxtZmKjEbXksuNF50CvSR27r5Iy4Hv3PkD76dZ/NmUOGniV9
vG/far/E2SuC9NGv6995cVZ+jPSR2xr4uZVhi3C+fpnwsp/vFtsI0kdua1K8
StDsXaSPfn3PvvXK9Z6kj9xWWvCtjabRCYzrKRI0c9ftbB1L+shtmWrHX1ix
JJHtv0zSIGH7x8EzSB+5rbkj3Rs2TeP7IxdUblcOafyF9PG+Xd3e3KPf5P/j
677jev6+B4AnsrL3lj0jIzPe+IjIyIrsvWVESCgj2YmmkZlNMkuKJFlp6P1u
vXuPtkgoEuXX4+uc19U5D7/Pn/dxH7f7Pve81r3P40Pjow4ZmmPybuEEMT7u
e1fzMnvyopJox+v6miZKPameGAfrttZ7P52lO16043Vt8/7o1o6jxTj4vm1i
WOfb+O7vSPwLZOsWDmtwSSbGwbqtFpfGvXhoJtrxus7+vvnX7RFiHHzffuo3
YrzhTNEu1WPOu9nm02oxDtZtLR7o9/uoqWjH67rGiCnOB0z/up/D+3ZAlPpq
xYPvyPr+lGXZrtALOPuO1W393thjxr2/8h+v663acQHlTeJY3ZbR5C3P1/yV
z1i3dWNe1IN7w0U7Xtc6tZpF1x0h/q4pGYfWbQ1ulvSh3W4xDtZtWfdve/P5
X3HA6/qIY/7LembvaP1FyOK9tdsbTxbtfUg7rdtKqFsUd/yvdcTr2nyI46yb
5mIc43+ML/1/Pe5Hyup1EOPgfn6XRwEPalrQ+afL1mnytFcniHEMyTi0bksT
NXNz/9/iOsLvjiMOcZlef/0uvK7Hjtxbu9JMMc5oMg6t2zq79tyLxUoxPp4X
bLDfEbVzLo1PnmzRyUfu/azF+CZkHFq31fqbz8b3T/66T8Lz+u4TR9+t6/+6
juC63jKmYXitA2L8rmQcWreVsEv/ZuC1v+7z8B3UYGl3uckxGv8CWUD8pP3K
u3/lDxmH1m35z/39asXJv55T8Lye3MN5Q3DIX/kP17XPVv9J8Wli/D/Xr0vQ
5xGmNSsdjSXtfibYTuu27kdtdLj1ia7vT9n+14P8n9cU1+k4cl3Tui36d/E6
vVouoyhzv2jHuq3ufR841nSKJXVJvN30H+14HZXzy6//3EG09/xHO14X/q/j
nX3+ah/2j3bM8+1XVp41dhPtE//RjnkbF2l+fHVCLL1vyLoYWXqa/HW99PtH
e/9/tGNehecFGl3MEe1D/9GOeWLstOK/d3/db0f9ox3XvUoF1+XX54h6AfRm
i0bUGxnZ9h2r20qxc/S9XEm0ozebUqK5Xz8yltVtubwM8D5+TbTjOdfhQtNf
9deIdryvjvCe9LyVuWjHc65Mv/W5O6uLdrxPJvZqO6txRgyr2xqXM6Rns8ui
He97VW8PbbTPQbSjN+vYoWhRtGkMmX96SPSKr9VDm4t2POcKudW3QkJGNKvb
GhH1aJLRE9GO3uybLLLhxMOiXfr3TnX6+d1ZFU3qVmJDFMVLflyw+Ksd7hv/
1TnV06itaMe6rTeHd1d89zOK1W3VeXLx4AVNFKvbat3ZuOj3HBFPvN5r9XM1
W2ElnDyu+7svui/tSmLI/C/IGlZQj1sbLv4u3gfUPUsmRZ8SfxfPs8z3+x92
ehjD6rYOu1oo75j9FX/4vo4MG/Ni5/ooUncTJ+vQ4eHQb5ZifKzbylkcunnE
c+HwMa+mXVHWnL1VxA3rtqbn9bGaZyrGx/vMoyqOV942E+Pj97WJn8lH525i
fMzDpiMSjs87K8bB86zzLi6OnWvR+afL6tm+z1xlKMbH8yyXuMQlgyaIdszb
os0rhhk6vGV1W4bner0JWiPGx/tYeuuuPRfLxTh4nnX6gIX2kyqS1W3Nr3gl
cMbTN6xua7PdOK2fZzSJT57sv0fnJmj6iXXEuq2tDqGFD7q+YXVb9g9PJKk7
vmZ1Wz87rKl/YFksyf+vMnnzapnb9UUe4nnWf8H/DVpx9hWr2zruYLxh8ouX
rG6r/Mouk4YVvCPxL5AdNG6XH9RV1JXgeZblhgKvxlNEnQVed/snbNr44PoL
Vre13+9NockCcf/E+3C7uY4dZlmL8bFu61SDcsdKhr9gdVtnx4048i4wgtVt
Gd2Z65VtT+vyfspKMg2N0x2F28fv6y+rttneaCzqffC6NnoyfeAob1EvgNf1
0nkmQ+uOFuuI51n3p3dwLz8ugtVtTaw088JZP1GXgd/XVRfpL71SK4bVbeV3
SE8/VE9cL1i3ddel/p6VA56zuq3jg74cvR7wl+eH7+tWdVrcUcSKOgK8rlMH
ukarF7xldVuL52s+W9mEs7qtW18+5xf2EfPH7+vH0d0cAhSRrG7LILry0Z7T
XrO6rbXOVocqXqPzT5eZZCuny2QvWd2WuXaq2eNboh4Er+t7L/wdvQxEPuB5
VvOskNy0uFekridHVriwwGrXpLesbsvdSbVqvGsEq9sadeVp34eaZ6xuq16/
C/pt3keR+OTJnhye73pmglhH/L5+/tyo09s5z1jd1uvM7J0+kaGsbmvLFm/j
vW4iD/G61smPaaXbT9SVoCv7HqFtWW9+KKvb0n0wbqeq62NWt1V/T/iC7760
7q9AZuS5PcFKT1wX6Mr6jTFIm+Ufwuq2lu80dt12JIjVbS34ntHHu+lfdYtw
XffOsVr4YYIYH12Z9UO7w5MrBbG6LWtd92GxLQNZ3Vb0xPzjqTPiyPr+lEVE
d2o+c5Oog8C6rcYXnRa8qirihte1N5yPYH+8rse7btncM1OsI/q0yjdfTli3
I4DVbVVOWeZ7yYHWgxSEPGgWZzppRTSr28J2Wrf1vrGRl+7TIFJ3Eyd7G17N
979hQaxu6z4ZH6/riyecn3hZijzHuq03Wd+LO315yuq28o0ctv+YFMbqti7A
ONiO13WNy1c79rB+xeq2Zs4LTXc7+YzMP132a77huhFREaxuqxqMg+14Xa+o
+GKGfl9xn8G6rWCdXvod974idT05MqOQN4+/j3zD6raWwThl41/63Ht9fcqr
cHG94Pe1usH+kbY3I0l88mS63SZqPlwTdTpYtzUAxikbH3XInPD0n0PmiHXE
72vT5dZTO5WI+zBe10NXdqzpL4thdVv7apfz7qBzm9VtOUE7rdt6m19hdKp1
DIl/gczKp/HitvtEnmPd1i4yPl7XX/zUj1L1z7G6rXBr03KbFonrCK/rG1kl
Dc84vGN1W59gnLLzfyZTkPHx+7rzJa9pykPvyPr+lDmE15RvbCCua7x+m8B1
je14Pb4jfxfrtpJJO15fziQOWLflQtrxelkM64vtWLfVh+SD9O99kXas26L5
g/k8j+Qt1m1VINcL5mdF0o51W5VJO+bbGXJdY93WOdKO+eNP7jNYt3WbtGM+
TIT7p3Q9/qMd17cRrCOt2+oI+UDrtq5BvtG6rcGNY+3HXhD1EXi/nQL5T+u2
nsH1Quu2+sP1SOu2CrpX89qQG83qtn4Z/rk/0LqtN3A/oXVbreF+Reu2FraK
6NDg8EtWt/UT7p+0bms63G9p3dYXuJ/Tuq0qU5tf1uo9YnVbIfB8oXVbifA8
onVbauWf5x2t2zLtYexRpcUDVrfVFZ7jtG6rO7xX07qtt/B8p3VbW+E+QOu2
esF7Ba3bavrSwrT4ciCr2xoP7y20bmsevLfQuq1u8F5E67bawnsRrdsquv/n
vYvWbTWA9y5at1UO3uto3dYXeK+jdVvP4L2R1m2Nrnx8W5P8GFa3FQLvpbRu
a9RLe9f9Fk9Z3ZYZvPfSuq3a8N5L67a+wXs1rds6Au/VtG7rBry307otfG+n
dVsy+C6gdVsj4LuA1m3hdwet29o6yfZJj5cvSHzUIRfhu4bWbUXAdw2t29LA
dxOt25oB3020buswfJfRuq0W8F1G67a+wncfrdu6Ct99tG5rDHxX0roti7YN
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
98/SfFL8MzpfLxbjYP6YDypceeF8pmwKtOP6DjyV4m9vKOKJcXtUpeDU7CaZ
Mpv/Pd/zpflb71ha4+YIMR+MT6THtg/DVmZI8cc8+aX7Rj3uoBgff2+a3Tfr
zsHpMi+IP/5ey9/Vsg86Z8pqQvyl+4N6Sfm7SSJP6PxtYZ4Yn+bDwj+1vSDm
ifO59fFHi7jINNlHmCfm4ebuBiUu4WJ8/Ltrnm0rsPUS7djfNWhI/wt706T4
Y5zj72jT82tlyJKhHfO2csKiUVXs0+G6+yC1O82vavQtLF3qj3n4tk/sa8Nf
6bKHkFe4LocOfn7WKFb0x3yzf9J0ZmvnDHhPyJXGebkq8tvGThkyb4gzrteh
RMPgu55iHJo/f+pG86TxNxb1KrfTTfwuzIdxXpEZU0ufUxsh/ri+q937va05
T4yP66ue3P/T/LqZUjuul8fqxwmnrmXIXv/v/vBemk/if0/DJ7qKv0vjnALt
mA8Lb1wyuD4sTeqPcfvQ7UW3icvSZXsh/jj/WVfubfjtIsbH+Jyt7b/NISVN
ij/mT6+wXr8CzMX4+Hsf3tI7OmVrmmw4xB9/b3gHnRCd0ue7G8Qf82ry1vjQ
jWvFOHT+O2GeGJ+vr3aNrbFVxBPn88Vt+4lLXdOk/Mf83OX50efCBjE+/t0Y
gzXlp/QS7dh/0Y2GLwZb4Xssj/NLWBfM2/IllUyPJ6XDd2Kq1L7M2cWjSl3R
H/PwsapkSP/hoh3zyr2OyfEF+zKgri1d6r8mr28Np66iP80HbMd1fFvXe1bk
fxmyclg/AutSdcqll3rj0qT+uC4Nu9h16PcwXWrHOJ9486Rc5xbpkFca6e++
7fW214nroj/Gp06Xvr4H3cT4mG/d+89bNXBgGlx3qdI8TVt3nxe+WIyD+fZq
08aIN7piHJz/lBlNF1ZIS5VZQnxw/mmhspE7motxMH+sBiXVSU1MldoxTx4O
yhx8LEe0Yz5MfTp+jG1D8XcxH/wv9x1TcwnmiUZa37nVlGNjGmfAfOKk9stf
vNoMbZUh9cd1nF0YZddwgGjHdbfaUHDqaIMM2TT4XRiHNLXNuBHvUqX+NP7Y
jvHsnFt7bU7DdFnd/z0vMqW41f/m8dE8VoyDcRsR5jVXc1D8Llz3Gcd1fnfv
lCZL/V97tPR3qy4b3ft+sOiP675o8PnX27LE+Ljumv626y6HiXb8XfMbrJoX
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
Zn++dlDDnP+SynPbXc1XM+ffsH25TLcOGub8W24xnTDRV/PPfKDOf2g177ER
IzTM+Q8c397GoVjNnP+1WUG/+4dpmPMvGNamv3c9DXP+/erXCYgeqGE+3Oj9
/baxazXM+WOcqfPH9aXOf/qs7UMjHmuY8zdomZN1Z4WGOf8qc6ob1CyvZc4/
feyO/KR+Wub87cx3Oo3rrmXO3/bK/hr5SzXM+Vd7GbI8vaOWOX+Luhesx/6n
Zc7/dniP5CoyLXP+dx5FNpTX1jLnPzC2+szlf42P/W+PPhW/TEfLnH/Vhemn
m0/VMOe/WrPs3IspGub8Py6L7KKdpWHOP2DMzmA763+vI3X+mok+sZrS65Q6
/7g1kRM7Dtcy5594M/1C5+ca5vzr7DO5YfVbw5x/etNDA15qNMz5H7b1dB7R
S8ucv9rKscTFUsuc/5RaL2zOftUw57+hU61j+su0zPkfCPh2usFKLXP+T7v6
F6bN1TLnn3NU9XSSmZY5/6U77+XY/BUHXN+i8rER/g21zPmfahDXtE+yhjn/
W61cZutv0jDnn1DNKeSEjYY5/9ZdatwY4Kphzr/Z9l5DbO9qmPMPv/JtTB07
LXP+GH/q/I932TZ+V10tc/76rmq7Kmu1zPl7fW9z2Guoljl/pxMvZl5epGXO
X3da7+V1mmmZ83+rWD2+3FYtc/64LtT538nfUaeSk5Y5/6czXuoU7tQy5z+t
evIIta2WOX8rxzuXdszSMuevdyFpxMleWub8nw61Dd/3TsOcv3f2V8e+vzTM
+Rv77J847pGGOf9f35urzthqmPNfqG8wYtklDXP+4e0t147fq2XOP95+Tou1
Wg1z/j0b5HW/6Khlzh/jT53/p56GUZXNtcz5F9q77AheqWXOf5dZ8767S8en
zj+k+rNLPftqmfP/kJa6OHWfljn/4vLZlTs4a5nzL9S/bu1mp2XOf5p+2w2F
pflAnf+Ey2a1q2RqmPO/WafDDvkALXP+frWSU05W0TLnP/Djr/8i72iY859p
2iW/slzDnL/ZwPjqr301kqPG9c2d0bFvhKOGOf8hB/p6TvUR/XHd3934VMEl
RMOcf6D3qtrGW7RSf1z3QPXlxJ06Wub8X+jfDl5Ump/U+a/rf2/7rbliHLpe
1PlfXbe8c2Ft0R/zJDXr7o5tM7TM+fdYN81v/XjRH/On9dD5DX+sEe2YPyer
+j2YsVnLnH/TH/Om6A0R/TF/BjzQnq2/Qcuc//Vv2thDiSKeGLdrunZf7pb+
Xur8u3QPiNSzFONLdWGVWn67PEjLnL/Ol6yR9/LF+Ph7nRt0D7EvfS+lzv/W
m6U3Ky3WMudfUsk0vP81MQ6dP3X+R43aXR65WswT55NTY0XW2Osa5vz7L25V
9Yi7GB//rmqWIvjpftGO/ass8HKYXHr/oc5/uvXs2P8aaZnzDxzQeEPoZQ1z
/nVjNzWKfKthzr/o5kq/phka5vxv2uhfqqurZc4/bPjINrFNtMz5B2hqtDlV
pGHOf0b7o63WftIw54/5Q53/Q9Pug+8baJnz94yYmr1ugpY5f0/vDOtCrYY5
/xONJ7moJmiZ8z94vNPXU6XvgdT5Vy/qnLm/i5Y5f4wzdf7Hdzd4NrOfhjn/
0TufDfpemifU+Q/Osg66Zahlzt+um67jUk8Nc/6NbRMGhg7VMOf/dGtHVdYc
DXP+VxymPE0pfV+lzv+oJmbXiaka5vxx/tT5XzKLuPA7RMOc/8XMYSfSWmuY
809t65E6ZKaGOX+/sAummsYa5vx7dptTQ6+Zhjl/jDN1/l9yXkyoWRpP6vzd
z7W/l1Z6vVPnfyk1Zdriilrm/Jfc8Z/3oLWWOf9js8e+X6mrZc4f84E6/7Cm
eVN6NNYy53/y4pxKFftqmPOvFnm6+vr3Gub8rT59HP3ytIY5/8qRvXt2VGuY
89/u4ly1wjgNc/67shZ6dqipYc6/gf4u++xHGub8l6lbtu2XqWbO/979Nlv6
RKmZ879vucNnkIeGOf9IxzoD2z9TM+fvt/fhVdVf7ZJXmZz0Y0ismjl/y30r
jjf/pmbOv7ioRUpJoYY5/03Faw7UL9Yw5z+/+uABZ6pqmfNPtrWasKWCljn/
MK81+/oFqZnzx/hT57/i7XrTccc0zPnLbVrvGRyiZs6/xWHzDTb9Ncz5r68U
WBSUq2bO33rIGp1Zlhrm/FWv+jY1/Wt86b16XOCC275q5vzL1bE+a+atZs7/
zjcnnZEeaub8GxjMKn/ppJo5/y7xy1p731Yz5z8gYUtV62I1c/4j9uXeTFCr
mfPv5rx9fy1DDXP+9pZrH3z6ruHOX9XFwzJdw5x/7+W5fp191Mz5D5lsHFb7
poY5/9AN92OPuKiZ88c4U+efH2wS/vGnmjl/t0tdvFa4qpnzN373ebpRsJo5
/7sPlElDSuNPnf/uLV1aPE9WM+ff6+iIcqlOaub8e87NX6zermbO/8m1ltYO
jmrm/Lu4eib5HFAz56+3yCW1bYmaOf8Br69na86rmfO/525WO0ShZs6/j9H4
fZadNMz5H3ZZfyJql4Y5f/xdOvAfrnvNZJ0px6M0zPmf7PJg6/GTGqk/5kPW
1EY1ph3RMOfvNHvBLtMtYnzMh+DBd+On99Yw5z9msXzMh+ka5vyfbPa1sdop
xqHrRZ1/nmm9wraNxTwxf7Rb6l2cd0nNnH/NZ52Ct58X42P+LM/cYtp8v2jH
/Kn0rH2lnvZq5vxxvXTK/BdkEvh91WPjjWrm/Gl/jBuOT51/idnOMEcX0R/j
sxLmSZ1/PomDVFcLcaDOH+NMnX9kqyPmoXPEODh/B4g/df503XE+j2HdqfP3
JnklnZ9CXmE79q8F+Umdfw/IZ+r8XSD/qfN//jFl9uVhGub8e8J1RJ2/z56q
B+b+NT7m2x24HqnzLw/XNXX+J1b+N97OR82cP+YDdf77ng0IkoWqmfPvBPcT
6vxv3cy5FnRfzZx/MNyXqPPvAfcx6vzrwnOHOn+MM3X+a+C+TZ3/PbjfUueP
923q/PvAfZs6f7OJaYaD3TTM+RfAc4E6/xIzuUnf0uuCOv8DSXuX37ylYc4f
50+dvzE816jzx+cadf6pJ/uXf67WMOdvD89N6vy3wnOWOv+y+Sycf3d4XlPn
bwzPfer8h8Nznzp/fH+gzn/rhzfR/WLUzPljPlDnfzjujseMZ2rm/O/C+wx1
/rrw/kOd/314X6LOH99jqfPXwHsXdf5l81A4fxt4r6POvxm8B1LnvwzeJ6nz
x/dP6vzT4T2WOn9876XOvwTen6nznwjv29T5q1t1MYqtpmHOH9/bqfO/Be/5
1Pnfge8F6vwxztT534fvDur868H3C3X+S+D7hTp//A6izt8bvnOp898G31PU
+U+D7zLq/PXhO446/2fwPUidP34/Uue/Ar5DqfP3hO9Z6vyvwvcsdf658F1M
nX8P+L6mzh+/06nzvwHf6dT54z4Adf6XYB+AOv+iIVe2Vy6NJ3X+uC9BnT+u
C3X+uO9BnT/ue1DnvxX2T6jzHwX7MNT5+8M+HnX+s2H/gTr/fbBfRJ3/7R9r
uq/ar2HOH/edqPP3gv0r6vxnwf4Ydf4fbplkpH7WMOffAPbNqPO/Dvt11PmH
wn4ddf41YT+QOv9fsB9Inf9D2Fekzn8Q7PdS54/7ltT594P9T+r8k2D/kzp/
V9hfpc4/G/ZXqfM3Of7og+tdDXP+N2G/lzp/zAfq/L0MZ283DtUw54/7ydT5
T9wx+WSOpZY5/3awX02d/3XY96bO/zqcg1Dnj3Gmzv8JnAtQ538c9u2p8+8J
+//U+RvA/j91/rH+TrGzq2iZ88fzBer818D5BXX+L+G8gzp/nD91/nieQp0/
nqdQ5z8Uzmuo85fDeQ11/p/h3Ic6/49w/kWd/yg4P6LOf/jHxc3G3NQw54/n
UNT5X9i3/ZiVo5Y5/2twzkWd/yQ4L6POf1C5KYOWrNQy54/5Q51/jF+Phsb1
tMz54zkddf6fzW66GVtpmfPH8z7q/PF8kDp/PLelzh/jTJ1/eTj3pM5/J5xj
Uuc/0HnA4qk2Wub8i+A8lDr/IOWo754/NMz5f4RzVer8e8D5LHX+CZe6Dw68
pWHOH+dPnT+eC1PnnwDnwtT53wtvN2P0Fg1z/gvg3Jk6/59wTk2df28416bO
P6zs+biUb6fKno9L+VMRztmp859w9FbXQ/pa5vxx3anzb/jqwsl5g7XM+eO5
P3X+6y23tAj6qz+uC/EDUpxvgzeg/jysrE+Q8jAGPAN1/nvARVDnf7yso5Dm
6Q0egzr/iLKuQ8qT1LKuQ8oHA/Ah1Pm3LOtJpHW/CS6FOn90LNT5/wT3Qp3/
R/Az1PmvBD9Dnf+SjPGzciv+O87U+R8Cz0Od/1RwQdT5rwYXRJ1/Evgi6snH
gvuizt8VnBJ1/vXAO1HnrwYfRZ1/Tk1rM/dzoj/OH/0Vdf7otajzfw/uizr/
6ivLR/uvEP0lPwl+jDp/9GbU+d8Bn0ad/y1wbtT5DwDnRp3/ffBy1PnXAHdH
nb89OL1/rQt1/hngAKnztwcHSJ1/C3CG1PlXBWdInT96RerAncA3Uue/ATwk
df64jtT5o7ekzh/dJnX+38BtUudvAv6TOn8D8KXU+TcCj0qdP7pT6vzRu1Ln
j96VOn90s9T5o7+lzr8i+GTq/JuC76XOfxV4YOr83co6ZClPVoMrps6/cln/
zNaXOv/74Jmp808u666l+PcEL02df0RZX83iQJ3/uLKeXPq9J8GBU+dvBm6c
Ov/q6sdjrnwV/XH+0eDSqfN/VNbP/3M+OH4eeHjq/NeBz6fO/xN4e+r80edT
5z9tmMGD+VFq5vzt9P1CZi8T/hz7W1WNHLVti2iX6gLsv1Zb1lfNnP/lg8un
NClRMed/IPWsfGesaMc8qbX50q9TQ0Q75kmLvecMH79IYa47d9PO35XTRH/M
E6OLg5SK5SnM+Xfb7fzLrk0Kc/65Fq88S0zFOJg/XvYOb1X5Sub8Mz+f7Jj5
WIyP+ePnKcvrnK1kzl82Z1fgHv0U5vw32IY1M5woxsH8MZy7JktrLdoxT5bp
+6Q/yBHtmCfaexXPz+4n5o/54DZsl8p7qmjHfNhWzrBGzgQVc/7+k01mZH5L
Yc7/3t5tR2Zlq5nzj4oPnOWepWbO3/3uxsEFR9XM+Q8f+zBCPy6FOf9fq802
DzThzn/CzLNNL5SOQ53/g3EOST9C/p0P1PmvPm+uLJiuZs5/tO2WwRXXqpjz
7+4RUMfsr3zDdd/4rv4y8xYq5vyjB1Z8FPElhfnwsUdnXGjfTc2cP8aZOn9c
X+r8dU37JwzvrmLO37D/O9mRTBVz/o+D6hiFrVcx59+ofc7k8Jsq5vzbFZ/9
9fKKijn/5cO8Mpo6qpjzv5mU7tHjiIo5f7mR51VNhIo5/wtfmt468lrFnP+M
VufN7RermPNf3vRdncmBKub8F83Vbdqv9O9S52/Y1WKMdWkeUufvNiTC+OxJ
NXP+Lu6zl+fPUTPn3+S/zNxbrup/riN1/nULR4fYV1Mz5195jeWLOvEq5vzd
Dk45++y7ijn/DV8dLz0qbafO/9nN+06Vx6iZ8++z5NPUJxXVzPkfGfV1rEk9
NXP+Xc/3mHX9r/lL9dEDt6zxb6Fmzn/fzio+b9uqmfOveNX46vL2aub8+wXV
PmfWRc2cf5z1pPkfW6uZ8w9Z1k1+qqmaOf+NO1z9Y2qrmfO/vls+9meomjn/
Dil11Y4eaub8P582/aZ1UTPnn9fiSJJO6XONOv+bfQfat+2tZs4f40+d/+jh
CXGdB6mZ8+8z/nS5wd3UzPm3jHj4O7efmjn/sBP+QycMVDPnf+jyDVePCWrm
/L11LL80GKJmzh/XhTr/YwM3Jo0ermbOv8rbpUPLjVQz51++0rvJI83UzPmv
e/ixTfhf7dI+5EjrlntHq5nzf7Yqu+4tAzVz/veH7/zYw0LNnP+zgYnTt85Q
M+d/am/mbMNDaub8v12smOBvo2bO3+3U+KkGo9TM+fd5qp5ydbaaOf+Tsd6x
30aqmfPH+FPnb+eTs+L2GDVz/rumv71y1lzNnH+7Rq7et0vbqfOf1LlFqL2x
mjn//27NOzPmr3Gk+p3TSw2O//W7pH8fL+Wzsupf88d1vD1V72dc6bpT53/3
msG691PUzPmnhFr18zZVM+cf0TTv2/Nxaub82/rsS78xT82c/3obxz1j56uZ
87ePN2hh6aCWHDWu78K0JsOOGKmZ83d4NkVn+F2V1F/6Lm7X18Wph5o5/2l9
sy5fl4nxcd1zjxduT+upZs5fL2eS/dNyaub87fQ/53XvJcah60Wdv3JI8p3r
5UV/6d8/P+e11an0fZg6/+Jy4QXK/qK/5DTu+2za1Fe0Y/5kdX+18krpfYk6
//AW1/eH/BTxwfyZNXBfp7TS+w91/j4HtQPSW4jxMW5BujbnurdXM+df+O52
85OdRH+MT7W56zJkzdXM+S8fv72ol7noL9U9jcltHNFIzZx/vabvHlwovf9T
5x+Q6HOo3QwxDp0/df4LjJq2Ht9O9Mf5HDa5v7pTHzVz/g2uXNaz/SsPpXO9
rbdmLfrr72L/DIPAymsPqJnzP3e1a8XT91TM+Y/Zv+6Dw24Vc/4bc4891O2m
Ys5/tGzXsg+l41Dnn7qxs7lboIo5/xn32reuoVEx5z/RcmB6ppOKOX/PNWvO
9IpSMeeP+UOdf3t19u/pL1TM+S/cs/WkTen1Qp1/75m78hS/VMz51+6XNSLl
h4o5/x/97660UKuY819w+fdp260q5vwxztT53/AbWanbeRVz/q0t1hivLo0/
df5GDfQ89h1UMecfXRjS5OliFXP+hm1dxhvrq5nzX917Rcrm1Srm/N3dVmzZ
76Zizt91fNqAgIlq5vxx/tT5u4x0auzwIYU5f9uV3lVjy6mZ83+wd9L3Js5q
5vzbqgv98mVq5vwXHlp85Px+NXP+GGfq/H9uXrNZp4GKOf+XheWWfuqmYs4/
6/KT045TVcz5m3jUavF2s4o5/4FxV+YUy1TM+WM+UOf/JWxEj3kzVMz5X8x9
cbRVDxVz/vv0Evak1FEx57/vd5BPp6spzPmPPT5/uG1yCnP+c5R+6R0mpTDn
P1bpMNllUApz/juGFT8+fCaFOX/9Y11/zbVMYc7/oEmHkxeOpDDnn9wmqeWx
tSnM+Zczaxig8z6FOf+kgt12QfNUzPl3MnI16pavYs5/xvkGl+eM5c6/vskJ
88eGKub8h7Ze4dV0nIo5/6gZqvY+g1TM+V8uKuea1E7FnP/7qnrjP9dLYc4f
40+d/5UJJQfeW6Qw59++6E5RzroU5vwn7Fh0cXiMkjn/LOdz634cVzLnf2V5
XFFiqxTm/OseHq7rdUzJnP/37fV33bmqZM6/mZNB1W0KJXP+c/2vWAQ2SGHO
v/6X1ImTlqUw5++xpM+5V+9SmPOvfGLL+MR+3PnbHBl3b/5UFXP+u+e8HXo6
TcWcf8nHnmNdxqqY848Z3H5xhVYq5vzb6z7sPfakkjn/6/Ltg2oGpTDnP+34
72tW95XM+WOcqfPf1alz2MkbSub8S0yatL5UMYU5/9d6/awfbFTyf89/aL8O
CfOUzPn3rnvVpftXJXP+LoY3B8+ep2TOX9Nc/8mRDUrm/O/7jK6x31vJnP/B
30sK90cpmfPfMUWx3Kibijl/h9Zm0SGNU5jzv5/k1X6dYwpz/h2fbrvRtYKK
Of/jtdM2nNupYs4ff5cO/Ifr7ru43RZt6f2BOv/UvnXrZDmomPPX7D04s7g4
hTn/UNPiNp8WifHF/w+o1vROpfcr6vzv11Rm3C1JYc4/26a1pWK/GIeuF3X+
8x/189ldOj72x/zRzf42/ddFJXP+/80t8h96S4yP+TNvd1PfMZtFO+ZPQvfs
kW6zlcz5b4H10inzX5DJlexy9YsmK5nzdyD9MW5JMD51/qbOC0+PeC7mg/GZ
C/Okzn8xiYP077Nl/YkDdf4fIc7U+Y8f1L3t+vJi3XH+PSH+1Pk/JuuO87GD
dafOP43kFf5dNeQVtmP/i5Cf1Pnvh3ymzt8b8p86f6sG5xaceqtizr89XEfU
+Ydesr1rMVvJnT9cj9T574Trmjp/w419HJ9uUjLnj/lDnb/PC7utPR+nMOd/
AO4n1PlP8NsYbXtRyZx/INyXqPNXw32MOn987lDnj3Gmzv8M3Lep818F91vq
/H/BfZs6/1i4b1PnX+dA5ov111OY83eC5wJ1/nb7Vqy4Gahkzv/E5YJtb8ur
mPPH+VPn3wmea9T543ONOv/dtlYHXi1UMecfC89N6vzxOUudf9l8Fs5/Dzyv
qfPXg+c+df7r4LlPnT++P1Dn/9A/sNmmyyrm/DEfqPPv0Nd7zTwTFXP+M+B9
hjr/5vD+Q53/T3hfos6/PLzHUudfD967qPM/WyYPhfNPh/c66vwnwnsgdf7X
4H2SOv9R8P5JnT++x1LnHwPvvdT5N4T3Z+r8p8H7NnX+TjbHXozaombOvx28
t1Pnnwzv+dT54/cCdf4YZ+r898N3B3X++P1CnX9N+H6hzn88fAdR54/fudT5
z4LvKer8D8J3GXX++B1HnT9+D1Lnvwi+H6nzHwTfodT5v4bvWer88XuWOn/8
LqbOfwF8X1PnHwjf6dT5t4bvdOr8j8I+AHX+62EfgDr/bTXCY0+bqZnzPwr7
EtT547pQ598F9j2o818G+x7U+b+F/RPq/A1gH4Y6f9zHo87/NOw/UOdfBPtF
1PmPXfO0Vc/zoj/+3jqw70Sd/yLYv6LO3w32x6jz17pWbee0R4yDefUc9s2o
89fAfh11/lawX0ed/2bYD6TO3xz2A6nzx31F6vxnwH4vdf5ZsG9JnX892P+k
zh/3P6nzXwj7q9T5u8D+KnX+lxoctTw4X82cf13Y76XOH/OBOv/cyh1XPuqv
Zs4f95Op8w+YsqB4Zk01c/7VYb+aOv9g2Pemzl8J5yDU+WOcqfO3gHMB6vyz
Yd+eOn/c/6fOPwj2/6nzH3Sve/Kjlmrm/MfA+QJ1/pvh/II6/wpw3kGdP86f
On8rOE+hzv8jnKdQ5+8I5zXU+eN5DXX+i+Hchzr/YXD+RZ3/Zjg/os6/6YY1
R9vaqZnzt4FzKOr8m5WMm71nhJo5/+dwzkWd/z04L6POf137UT1HD1Uz54/5
Q53/8yVn7uT89bswH+7AOR11/henW09fbaJmzh/P+6jz18D5IHX+eG5LnT/G
mTr/A3DuSZ1/ezjHpM5/04HfVtF/zQfj4wTnodT5Pzefujl7iJo5/81wrkqd
vw+cz1Ln/2lX/g6XsWrm/HH+1Pm7w7kwdf594VyYOv9Gm1J6NduiZs6/AM6d
qfM/DufU1PmHwbk2df7kfFzkW9nzcSl/ouGcnTr/ptZxnTf0VDPnj+tOnX+F
z74HpgmfIK0jnvtT5/+l3muf8uLcX1qXqmX9gBTno+ANqD8vX9YnSHl4HDwD
df7PwUVQ529Q1lFI8xwFHoM6f+I6pDwJK+s6pHz4DD6EOv/csp5EWvdr4FKo
80fHQp0/uhfq/AeCn6HOXwF+hjr/KpXsQpWN/h1n6vwPguehzr8zuCDq/CeD
C6LO3xV8EfXkseC+qPM3BqdEnf968E7U+aOPos6/Yp5matYyNXP+tcFfUeeP
Xos6f3Rf1PkvrzByrU2Emjn/o+DHqPNHb0ad/xLwadT5zwbnRp0/Ojfq/NHL
UefvB+6OOv+V4PT+tS7U+aMDpM4fHSB1/ugMqfMPBmdInX8F8IrUgS8E30id
/03wkNT54zpS5x8F3pI6f3Sb1Pk7gtukzt8C/Cd1/oHgS6nztwCPSp3/B3Cn
1PmPAO9Knf9P8K7U+buBm6XO/z74W+r80SdT5+8Ivpc6/2Pgganzty3rkKU8
0YArps4/r6x/ZutLnX9X8MzU+X8p666l+JuAl6bO/05ZX83iQJ1/7bKeXPq9
XcGBU+ffE9w4df4fvNP657Xnzr8luHTq/DeV9fPSfIhvl8bfCx6eOv/p4POp
80dvT50/+nzq/D1PrC7sNFnJnP/7wcqcFS+SmPPvHiGbGXRHOHbsf9sh2vJn
/WTm/E2MDcMjPyQw539+1uBhoWmiHfNkeOz5pV2t4pnzz8150NT0lIK57jid
84P9rBOZ888t6Ph4eX8Fc/4pu+2vjW6kYM5fnnJRJ9tOzAfzJ2fB2YNWUxTM
+e9r1HxtXV8xT8yf7U2f5Ov8FO2YP7u/pXVPNEhizn9ZUadRqg9inpg/Lu6K
Tel7kpnz39ntoG3fViL+mCfVNtSxC1wg2jEftp9xsWrkIdoxH0akns5c+EzJ
nP93lenekPAk5vxvbykYpjVUMud/abHDqfuvkpnzb5wb+HVXQhJz/tHLvxxJ
zklizj/DN8yq27dE5vwNF4x5+FmVxJz/mvxJr+QLk/+ZD9T5u42L6dH2VRJz
/u3zWlkN6pHInP8Pr8o1XycmM+d/vtymKybjE5nzH7O93ecHmkTmw2d3aLhr
+fsk5vwLIc7U+eP6UucfkX1ZlXgwmTn/1XVT3ZJdkpjzH/7z7vdzVZXM+S/8
fUZx/qqSOX+zEeWej5ymZM5/zBX/U1OnJzHn7y1P35kTqmTOf8uQk6mRR5TM
+X/2er3y0BMlc/7NHxkdjoxXMudvtk8vNjhbyZy/dUKxb55eCnP+PVuN0s2N
TGbO38dcb6q8TzJz/pGhN7a7f0tizv/QwsmBCZOS/7mO1Pk/W6JTa3mDZOb8
gwqiOh1fp2TOP9s4Y/HoZcnM+UcOuBFjFpHMnH/1sDcfvv/1uzB/vnh5fShs
rGTO//aDmYP0LZXM+X9YXX+OTXQyc/4L5pw63nWPkjn/rcbaV59uKZnzv6z/
6dZAuZI5/y2TKum6DVYy5699dX3Pro9K5vyb9h26bvhnJXP+99aOemtamg/U
+af9Hnl8Q1Ayc/65Tdq32FwaH+r8B3+afiz7aDJz/r3c+yc3OpPMnH+VqOf7
+lxUMueP8afOf/8yi9qtqiuZ87/Y+8e+VkFK5vzXG1wc/tZUyZx/67fXgjut
VTLnr3h93SN1i5I5/9odzoUmuCiZ88d1oc6/aHOFxWcuKZnznxNZUNn7oZI5
f+8Vpw5UjVAy5x9dwzLq6Aslc/47S/YXv7yrZM7f99yFeZEBSub8PZKfGBvu
UzLnn6kju3zVXMmc/7XwET5RacnM+Z8yVMWM0lMy599pc8TRyX5K5vyT+8za
dnuIkjn/gfNs1b/9lcz5Y/yp8++79cOl42eVzPkHTP955uJdJXP+bi/r9l8R
qGTOv6fuhiWj05XM+S9d4rBuwT0lc/4eoc7bK11TMud/wcNjW4MTSub8v1/L
9xuwU8mc/53wcb9rDVAy5z/ldPWGLjOVzPlf7XArJ7mtkjn/qWvtxt9po2TO
3/XiM/PW75OZ8z9b+4GsOBjfZ4TzNzNa8jN1spI5/4CpgwenPlFK/XHd999v
N3KRl5I5/xzThYO/u4r+uO6h2cVrMt8omfO337j+pV7pfYY6/zGnxv0qWCbG
oetFnb/DEM/snGzRH/PkYla+6yuVkjn/D5+2PCueJ/pj/izu9Wbx+ZeiXfr/
YNYYZ9K0dN2p85986UVEfproj/mTOu1lTFLp/Zw6/8rDa68s7yHij3HzzOoc
ry5dd+r8NxZET34WI8bH+Bi3ndXOvoOSOf8cy54LpxaI8fH3Nqqc5nIlNZk5
f72xe957lF6n1PnXqRhh0nC/GIfOnzr/drvTrw30FvPE+Zzp1/lq3enJzPnH
3A5v295LjI9/d93o9IrLZKId+9/KO9BSMy6ZOX/zsy+aTK2hZM7f/3769l4a
JXP+1TMT1+RVT2HOP/RB/DhZuRTm/N++8Um6pUxmzr/tvJdXnUuUzPnXsvE7
7FEuhTn/+dO7rVhyI5k5f8wf6vzd7TTNb+UrmfP363z7i1/pc406/zttLp7z
cU1mzt+m/71X8QeUzPlnDnCb2GCKkjn/ur8bj9rkrmTOH+NMnf/pCAuTD42S
mPNPW+q8rUPp8506/xV3n9xM3qxkzt/zyB2XCdWSmfM335+xetiMJOb8v72/
e3W4bRJz/nuy3VJ6WSmZ83fSPtFfmJzEnL8PzJ86/xK3LUNlvsnM+U+37Tgv
rkESc/4PTX6emd08mTl/3wemuXsnJTHn37rf+zF3Xycx5z8a4kydf++wEUea
1Uhhzr+48vi2v1RK5vzzL6TYZH1UMuc/8+TUfE2Ykjn/1s7PTzg8VTLnj/lA
nf/6gz36V52rZM5/jd1mP7Mjicz5zw7weWxQT8mc//utDv53dyYz5++etOWa
fVclc/6Njv6qPn5WEnP+9Tq1GdbtfgJz/hWuHfg1Ky+ZOf/yNl+qZu2KZ85f
/81KvW4d45nzLzicc+SNfTJz/oHe21JqzYtnzn9lhXLl8ovjmfO/XmVGRrkP
Ccz5W4XdORG7Lok5f6e+e5pWKn1uUue/28vc5sAlJXP+xul997ufVDLnv+9h
uPOo5Urm/CucN91evEnBnD/Gnzr/8R49F905n8ycf2L3CdYLXyiY869x6nBg
cPck5vxnppYYR9rHM+f/KanO4411kpnzl735POx+ipw5f+caO9b2C5Uz5396
WY0Jyx/KmfPv8XPBoJnP5cz5VzK9esw0V86c/4Tz0TNGHVEw559Xc9rkuR5J
3Pl3Le6wKTiBOf8DVv1eJQ9JZs4/coBBDR0vJXP+e6/ufzi19H2MOv9Iq0W2
p0PkzPnPf2WX1bA0z6nz3z06pt+He3Lm/DHO1PmXe9DohvpsAnP+53JMezR/
JmfOv0109Fenngrm/G81+1WQ+VLOnP+QkPn2njHxzPm36OHU0jxQzpx/xqeo
2yb+cub8a2k8hwXdkjPnP6fr7739S8ehzr/95sSZF5WJzPnnjU4Z9kQuZ86/
SFvsWzkqnjn/nSYba6R7JzHnP7/mfy9DGymZ88ffpQP/4bqH2ug7byn93qTO
f2CvbJ+wkcJvS/6n98MLFeOTmfOf6XN0ZegdMT7mw/fhR1beOpjEnL/RrqcB
WYVJzPm7KHS6jrkvxqHrRZ2/90o329Ytkpjzt1wxtke/ODlz/ukpsZXTo8T4
0vd43lf7LyGiXfr/Z3mPnLevdD7U+eN66ZT5L8hk4rBDsvWlcaDO/zPpL/07
QjA+df7RDzb5HwgW/TE+G2Ge1PnTOEj/HzeIA3X+rhBn6vxNPloX6dolM+eP
8afOfwZZd5wPrjt1/gNIXkl1tZBX2C79fwAhP6nzbwX5TJ3/Ash/6vxlDyue
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
M1bOnP+i+d8yjw0W85f+v3i19ZZcKn3Poc6/MHLnhIf3FMz5T943+NiYcWIc
On/q/H2Vb47ucBT9cT5rsox2n9kiZ87f8+nNGk9Gi98leaf/JgW8yhLxwf6D
819XfNY+njn/KwfONrmip2DO/4Xldrstpc8v6vyntl/dr0bp36XO/9tTv+VN
S7+XqfPfuf9j6KI4OXP+uzyKvN0WxzPn32jupk9tx8Yz5z981CbTBlflzPlj
/lDnP+VO5ecVZPHM+fcwbxtSQalgzr8kpHhoo31y5vyV8+Kn13BTMOev9NTt
8XiMgjn/0+302h/yVTDnj3Gmzv/AZ9/quXXlzPl36JNSY9kTOXP+o2/1nHx/
n4I5/+e+y34WbJcz57+j3aaaLTrJmfP/8cAo1aX0fZg6/3OWnoNOLFIw57/2
5sLWdZVy5vxx/tT5P3C45qFoqmDOv23wl1o39eXM+VtdmfIwyyCeOf+7aqt2
xmflzPnbzP3k6XU4njl/jDN1/kvzY4pcm8cz5+9zeGty/kUFc/6BXsdGli9R
MOfv1KrKry1xCub8tb4FQ8oHKJjzx3ygzv/6VVfTknUK5vzndO5V9Ka9nDn/
ZV8eNbw0SMGc/4lxIbuUlRTM+fd4qqq+doCCOf/9Z16EXYmSM+f/pp1u9S6l
+U+d//QvXWYWGiqY8zfulxFX3FrOnH/HN1cKbgbHMeffInh/k90NFcz5T1ze
2u+Jexxz/nvHLipX4VUcc/6/I071T26qYM7/V9sn0372TGDOv2vKs3N7diiY
878b/eOi7lAFc/4//3N629FawZx/+Nnbx3qUvodQ519/w66+rQ/GMueP8afO
v3e8qzKjiYI5/y+Tf8iNnN8x528R4dSja6GcOf+TfWLehZfeH9i/5x9gXH3G
Vzlz/oVZU66EBb9jzr9f/Mydl2vFMOd/dlerojYG0cz563kqzH8di2bO3zu8
75jXUTHM+T8/7tb8wIQ45vwN905bYtA6gTn/jEfjl7yfo2DO//H48SG/ZsUz
5582elPNpZ0VzPm/f71dsbm+gjl/q145YRs7RTHnf3Pl5RpuFRTM+Y+1HXs9
f/dr/u/5Q5yp8+81xSTIpPR5R53/mF5N7Ja0j2LOP+i6UfMmdeOY87941yX+
XZ8o5vxndg2JaxYsZ85/R9dYo6m1w5nz33G6/tGlFqHM+Wu1TrcNs8OY8y8e
snbp7IFvmPN/3yLixFwLBXP+8q793WY1eMecfxujge3mXpEz5/+mnapRxF9x
w/WN7rNG93zp+z91+DGVl7Q7lx/InL8qOL6lfS0Fc/7639p8qzhRwZz/lNHJ
Y6Pfy5nP11mr8rgZHs6c/5w294wHxMmZ8zc7P0LnUAZ3+HMyHMItz8Uw54/r
RZ2/lUXOoUaxwplL9V9d5bVf5sUyz790b+9n9r9eMc8f7x5SpV1MEPP5uC46
Zf4LMnE36mV5o9995v/jSX+M/1cYn/p8On/p/yMG86T+v9ebpr+Hy98yz28H
v5e6/ZRX6xfrF3LnT9dLOkeDOFOfX5PkA85/Hqwv9f/3SL7hfKZD/mC79O/8
Qx5Sz78Crkfq+SMhz6nn7xE7fatf93jm+SPheqGe3yq4yo4Ja0OZ528H1x31
/Hj9Us9/tG/YnK0VY5jnV0A+UM9v9npCv+ej4pjnL4L7BvX8+5YcWNNoYxzz
/Elw/6Gefxvcr6jnd4PnC/X8ayDO1PNfgvsz9fxX4L5KPb8Z3J+p5w+B+zP1
/LZeU+rV/yFnnt8Y7v/U8z/ZYF/kcO4l8/x27eO1m0vkzPPj/Knnnw7PL+r5
8flFPX/+NcvlFk0UzPN/gOcj9fxZ8Dylnn99mXwWnj8EnsvU83eE5zv1/Ph8
p54/HN4TqOd3KjAYfdpRwTy/O+QD9fxvFvhWySiOY56/Ary3MM8P7znU8xvD
exH1/OPgfZV6/m/wfkU9f9k8FJ4f39+o5zeD9z3q+TvBeyP1/Ebwnkk9fxi8
r1LP/wPeb6nnN4T3ZOr5C+G9mnr+Ues/9Dn7Mp55fnw/p54f3+ep528I3wXU
84+HOFPP/3+NnXlYTd0b9zMVEWXMnBAiQyhDSSRzxpCSMiWhqChkjlJmmcdC
hZShklRkiAp1ZtXp7HOaCKFISrze97nXPo/7vp7r9/bnvta123uttdf6rs/6
nL3Z+gL7/LNgnYJ9frZOwT5/Nqx3sM8fDOtZ7PPvg3UT9vnZ+gv7/Gy9hn3+
G7Duwz7/VVgnYp9/N6w3sc9/Edat2Oe/B+tW7POvgvUv9vnZOhr7/PNhPY59
/gRYj2Ofn633sc/fG9b75L39PpMefIyREJ//AvAH7POzdsE+/y7gG9jnrwO+
gX3+TOAk2OfvC7wF+/wuwOuwz884A/b5GRfCPv9I7RFNezioz8N/twL4Evb5
TYFTYZ9/AnAw7POfqM9O/zFP3V6sX/kAH8M+/27gctjnDwQuh31+B+B+2Odn
3A/7/IwfYp+/I3Bd7PNbAJ/EPv9x4JzY5x8FnBP7/FeAo2Kfn3FU7PNr7GjS
o8ef8RD7/N+B62Kfn/UH7PPP0dIeOe1P/sQ+/2jgxtjn1zOwPTv0o5T4/L+A
S2Offynwbezzr4L9Duzzs3rGPv8i4P/Y52d8Hvv8zsD5sc8fD5wf+/yblBbf
Z52TEZ+f7SNgn18C+xTY56+AfQ3s87Prxz7/dtg3wT4/2zfBPj/bl8E+vx/s
y2Cfn+3vYJ//E+xzYZ/fEPaJsM9/WP9ayPRIGfH59WG/Cfv8kwv0eww4KSU+
vy3sZ2Gf/zvsi2Gf31Qp2+aWJiU+P+s/2Od/aTbl29JbUuLzZ8F+HPb5H3C5
Awz1ZMTn7wX7etjn7wP7gNjn94L9Wezzs3rGPn9X2N/EPr8c9iuxz78ycsmY
+n/dF6ufhbDviX3+sd1iZoVfkRGf/yPsn2Kf3xr2YbHP39xTvtn5s4z4/Oz6
sc8fB/u/2OfvBfu/2Of/On39hYjbb4jPz/aXsc/P9qOxz98M9q+xz4/2wfn+
pvn3PjjffwxgPx37/HYq3b4NQmTE52ftjn3+K4Vpek1tZMTn/w77+9jnV64Z
HTb1ppT4/HP+9gT4etYCrwB75shD4PvhC/AWsM+vCf4D9vkf/e1L8NfJgXeB
fX7nv/0Nvp9o/u1v8P3hLHgg2Ocv+Nsb4dv9Pvgn2OcvBF8F+/wV4Ldgn78Y
PBns8zNPBvv8W3sMFsWnSP6znrHPnwjeDvb5N4P/g33+U+D/YJ//N3hE2Buv
Ar8L+/zMR8I+P/OasM9/Gzwo7PPfT8hbe3+X+vzs+plnhX1+A/CysM//GPwu
7PP/LvnRc7VuHvH5mSeGff5w8Mqwz78GPDTs8zOfDfv81uCzYZ//NXhx2Odn
fh32+QPBx/uvdsE+/xfw/bDPz4Hvh31+5hNin/8L+ITY548FLxH73lbgMWKf
vwq8R+zzs3bEPv8N8Cqxz/8T/Ezs858APxP7/MzzxD7/e/BIsc8/BrxT7POf
AL8U+/zMa8U+/0HwWrHPbwd+LPb5mWeLfX498JCxzx8OHi/x+cH7xT4/8o35
fpIN/jD2+dP+9pxJ+2Kf3w+8Zezzf/jbr+brvwt40djnD/nboyb1gH1+3b+9
cf5+M8D3xj5/Z/DDsc/f4PrR55Z91PfFrn8j+OfY5x/8tyev/o4Auh52fua9
Y5+fefjY5x8PXj32+avAw8c+/3flBOmzQDHx+RtyjzbYrFR75vx4Nc85uXmg
+jgrn/kgcMnhpWLi85uU3OywsZO6PDvutzY38Fw79XHWT5IXDrxemiYkPn+7
6HnLa7rnEH+7fIjRe/+G6vKsn4xpUvyxbHAm8fkVAXu1uiZlEJ+/5nRn7sTc
HOLzb0sfFmM67Tnx+R2Xvxtf1i+b+PzzIkeHVpx9QXz+a8EdpW45mcTnv32+
6WvFenV51n/SbWdPPDJAfX7WT/x+NAnKkbwkPv/4lC6JLs9eE5/fb6Ot/7ki
9X3x73NzEV+3z88lPr/pCumLjQY5xOc/WrXU1SBITHz+WTZrDpX7i4nP7/Fy
y+nv68TE59+ZIPYuGfWa+Px7a5uW99cQE59/1Jjw42OWi4nP37ZB4872i1/9
Z3/APn/1GqNH/SQi4vNrVJ2NlwpyiM9f0+BabNuCl8Tnbxr5XrD63Gvi89/Q
amNyad9r4oFrmT03ahEvJD7/UKhn7PNvhvbFPn83/xLtgTtyiM8fnvV74g1r
AfH5nya/+TZAkUN8/lmR90umJeUSn3/IveBNK2xzic//KOhgw+TBucTnP+jR
4cCJ97nE5x/v6tnyVHIu8fkX9ej5ebKlgPj8VfsauetNFBCf3/mhd9NWjwXE
59dMO/NGa6KQ+Pz3fm5recBbTHz+8IyaaK0ZYuLzX7udO6Vlloj4/K1WTRih
Zyr+z3bEPv+4q6HHblYKiM9/4MLbB8kvc4nPPz57wa9WSQLi8z+VHt7v8ed+
sc/fz736K7dRRHx+jR3H31TIBcTnf53D6RysERCfv37LvIK8ciHx+bfHZs3u
215IfP5rA2dE5o8SEp9fmJp74uJKIfH5Z4ec/H7tlZD4/EcCm2fUXRQSnz/u
yqMubZVC4vMnLQ3WkhmJiM/f4mZx+DUbMfH5Z6QetXNpIyY+f0GHvNSjrcXE
5w+fPDEn75mI+PznF+caD48QEp+f1T/2+dt9vjg/coqI+Pw+blZv3TcLic/v
OPy5zmMzEfH5n2U3aXzPRER8/vcfn1c5/+v/snZfcfKUU1YfEfH5Wbtgn3/e
4AM/+/QSEZ/fNPfWjVn/Os6u/9SSJdbDjEXE53dsNGBbkLmI+PyTf4r2PZwh
Ij7/7K7RPyImiYjP73lxVl7ZehHx+X2V3ZJUF0XE5193cmjjvD/zAvb5B0ZI
XnzMFhGff+3IXrEZE0TE57dbU/5w+VkR8fm33C3pJbcQEZ+f1T/2+R8ZtW6z
1VVEfP6bWybtXW8vIj5/z/nRrwfOFBGfX5nj5D/yt5D4/GeM3x3fOENEfP42
/cd46MwWEZ9/5+g2oW7zRMTnv7l95geRk4j4/J/NL5ofPSAiPv/5pnPGDVkp
Ij7/Bp1+9nN2iojPn6tc9u7RLRHx+aNHDDg5K05EfH7X3k9OSd6zXK32+YfZ
CnULr4mIz39IU0Pr3jR1edbugtkbgmNWi4jPr3f2bfSmburyrN0/eiz2dzIV
EZ+/4dles24YiIjPv63rymbjPgn58+D2wj7/F3dHzyeh6vKsn6QfMYzfKxES
nz/5+t7974zU18n6T0CK/dHZierzsP7zwD19t9UlIfH5k3/Z/Pj+Z5zHPv8X
2wmttI4Kic+/7drq8OFh6vOzemtx8HTBun1C4vMfT9m3Y9VWdXn+Pefekqke
u4TE519X1bLw7Xr1fbH73fO0++ro7ULi8/dtYzRAX0tIfP6LjWuitxxWnwdf
P/b5u0l+v3llqb5Odj393Q7kGdYKic8/3aOFud439fnZ//U/FFT8JUJ9nJV/
45L2K6ivmPj8v2oC2nExucTn79tfuirRSER8/ofnzAbVHhQSn//rxnK3zCdC
4vPPSbz2berPXOLzl89P3SR0FhKfXxxbcfn+eCHx+a9su2ER7yIgPj/rP9jn
L4vzqdilIyQ+f5Djz9vOJwXE59/kcux0pyIB8fnL31+UmI0VEJ8/a4q55c7K
XOLzV7429x3bIZf4/PVQz9jnN3S1NFg7J5f4/AtS2lV8XpVLfP6Zgt73L3zJ
IT5/cHzYqRO9c4nP7/dh+doPUgHx+W+HS66W1ucQnz9k8pn+N37nEJ9/6tao
LzMeiojPz64f+/w7Ono8b7TyNfH5X9nFXtJ+ICA+f/r8GU3umYmJz/993OgF
oUEi4vO7T4yYUbRQTHz+n1DP2OePS7o3ff0MIfH50x55FGRECIjPn+PqGNr5
koD4/G0HBq6t4nKJz1++It3fNiOX+PysP2Cfv3uDiGULZ+UQn//KoUM7jHVz
iM8/6IFe06l/1pvY59e7KTMIaPKK+Pw6c91Ov8nNJj7/MdMpH97/yCY+v1er
d6UDS7KIz6+5rKJHvCqL+Pwzd67tsO9jJvH5k7X88zPnZRGff1zqeEuP8Czi
8y/K+fz6bOor4vOPcH9X3WingPj8SnlcjEgiIj5/+ra0zcZuYuLzi+uqZlyc
LSA+v/by5iuv/ctjZ+3YPl/g8r1XLvH5AwwWa54Nf018frclyi8O3s+Iz98C
6h/7/C2W77V42j6T+PxBJuM73zj/gvj8im0PJ5UnZhCfPzC0OvtR0VPi84+z
7dFrd0kG8fkjV40zS9n8hPj8Mzt1yj+j8Zj4/NUxvuu6NHpMfP6Nr6dFHorI
oD7/jx9FHm9fE5/f4+1RX8+2QuLzu7SJ8aq0FROff8bNS9P3rhARn7+XyV6t
5e3FxOfv6mXurfPnecQ+/+ESk7YxhjnE598/5MrPPpceEZ8/bJDnjsnjs4nP
/3hGl1cTXB8Tn98a6hn7/IP6H5zh4POY+PyLDC7aXxFkEJ//xTaDN4miVOLz
O1982twy/R7x+VdpvnBsbp5BfP5OD84MszWJJz6/W5JTdQPru8Tnt9lqqucc
/pD4/Ft3jbmfGp9BfP4FI7IzRpkJic9/77q7dq5bNvH5J8fuattoRQ7x+b8b
Vhe6LhMQn7/dsrzQkJ9C4vPb/v6RflL7OvH53309fGNUkID4/Pqaxa6tD6p9
eN4LjZ/WZmZIDvH5o7RFtT0apRKf/2uJym7qymzi89euaBbsGZxLfP5zIxOb
Fwx/THx+1l7Y51954sKTVSteEp+/Wi/tgsaf/smO8/s1HlVT7sYmEp9/mY77
mV/PI4nPHw/tovHX3wMLSRyXUtQ8gvj8kag8q38XOD/2+d3Q9fMeFFwn9vkz
HW3tigzUHj7//SC4X+zzB6wb6T5uRS7x+Q+j9mL36wL1jH1+3B/473NB+2Kf
fyzqb+x6dkD/Ycf5fSvoh9jnz03+53nEPn8b6OfY519v2OWoX4yI+Pyf4XnB
Pr9F0th6v1E3iM8/Dp477PPPgucX+/wvOmTdGNjjAfH5o6A/YJ/f3STadPIW
tVfPfx8Nxg3s83/3EJWrpqt/d8C/hxbGH+zzT4TxCvv8h2B+wT6/GOoZ+/xs
fMY+vwuMq9jnd4HxGfv8Ihifsc9/S3uAZDQ/Pqh9/hEw/mOf36Mg5O4wm4fE
57/+sHzlhYlqPx9fP/b5D8D8hX3+kzB/YZ9/W63L/CUr1O3F/u9RmB+xz98Z
5lPs8+f91Z/VPr8hzMvY53eG+R37/Gx+xz7/SsgJ2Odvv/fZ0u9X1eVxf8A+
v8Dy66x2qwRW2Of3g9yCff5PkHOwz28HuQj7/A6QV7HPHwX5Cvv84//qh2qf
3wvyG/b5X0Pewz6/JuRG7PM3gpyJff4dkFexz68H+Rb7/CwnY5+f5Wrs8wfG
vayxWComPj8H+Rz7/OaQ57HPbwrrAuzzs3rGPj9bX2Cf//fSf9Yp2OefBusU
7PN7w3oH+/ydYT2Lff4zsG7CPn8rWH9hn5+t17DP3w3Wfdjn/wDrROzzt4P1
Jvb5U2Ddin1+tm7FPv8tWP9in38JrKOxz58G63Hs83+F9Tj2+XfBeh/7/Nmw
3sc+v6F956kDV4uIzx8E/AH7/F2gXbDPvxH4Bvb5E4BvYJ9/H3AS7PPPBt6C
fX7G67DPzzgD9vkzgAthn/+p1hI/3zO5xOdnfAn7/HuBU2Gf/ypwMOzzf+o3
f0Z/QyHx+R8AH8M+/xTgctjnfw9cDvv8jPthn78KuB/2+fsDP8Q+P+O62OeX
AJ/EPr8dcE7s8zPOiX3+LsBRsc/fBzgq9vm3P3kgeJYuIj5/T+C62Odn/QH7
/MY7ombtbyYiPj/jxtjnvz34WOnmzwLi8zMujX3+5sC3sc8fDvsd2Odn9Yx9
/kLg/9jnTwI+j33+B8D5sc+/GTg/9vnfOqTv9mgsIj5/GuwjYJ8/APYpsM/P
9jWwz8+uH/v8bWHfBPv8n2HfBPv8x2BfBvv8YtiXwT6/OezvYJ//NOxzYZ+f
7RNhn79J763u3/NExOe/CvtN2OffnTBN9NpIRHx+H9jPwj7/J9gXwz7/mtEH
D91tKCI+P+s/2OePf7TjaoCPiPj8sbAfh33+xFlpd0b8Wddgn38X7Othn789
7ANin5/tz2Kfn9Uz9vnLYX8T+/xGsF+Jff6uRj98fpiJiM8fB/ue2OcXj/kd
OmWqiPj8abB/in3+ANiHxT7/+Zr4uODzIuLzs+vHPv962P/FPv902P/FPr/x
+Ijvke9ExOdn+8vY518P+9HY5/eD/Wvs88/6ex+c729ef++Dq3/3Dfvp2Oe3
MmldPWOQiPj8rN2xz+/w4s6djs+FxOc/Dfv72Of/2d3Cd9hCEfH5h/7tCfD1
7AReAfbMkYfA98Pl4C1gn5/5D9jnd/rbl+CvUx+8C+zzX/jb3+D7idHf/gbf
HyLAA8E+f+Hf3gjf7jrgn2Cf/x74KtjnZ34L9vlngSeDfX7myWCf3/v2x69R
fsL/rGfs88eAt4N9fo2Af/wf7PNvBv8H+/wvwCPC3vhY8Luwz1+7/R8fCfv8
z8Frwj4/86Cwz/+g8mfoKYmI+PzjwbPCPr8meFnY578Bfhf2+SVOqfm954iJ
zx8Bnhj2+ZPAK8M+fxPw0LDP/wl8Nuzzu4DPhn3++eDFYZ//CPh12Od/Cj7e
f7UL9vmngO+Hff6B4Pthn/8q+ITY52c+Ifb5u4KXiH1v5qlin384eI/Y52ft
iH3+i+BVYp9fo+E/fib2+XXAz8Q+fyPwPLHP3wY8UuzzW4J3in3+T+CXYp9/
L3it2OcPAa8V+/zrwI/FPn8YeLbY5w8GDxn7/EHg8WKfn3m/2OdP/Ns35vvJ
GPCHsc/v9rfnzLfvxr89ZL5dHoG3jH3+X3/71Xz9R4IXjX1+x789ar4e9kI9
YJ8/9W9vnL9fDnxv7PNPAz8c+/ziXf0XzK5T+//s+g3AP8c+f5O/Pfn/vB7e
KwDvHfv8zMPHPv8L8Oqxz28AHj7zTlm9ZU6xHSu5VAz7gGpf1Cl3h8Fcu1Kr
D+Dpsf4j69PUySCpmPeKWb2V7F+s3z+0lPeB+d8jDy53eXNffR7+d0kvlPET
A9T/l3/PcGeTR9N3lFlFwnWyepgbMVfjclEp+CcavB+7JVRwpNv9Ev7/8t8l
/xKq2neh1OoFXCfvodU+17b5WMJ7s+x+u816ts0hu4z3YNl9db32cm9IWRnL
//y+592QytqWhcVWS8BzY/e1eY33omONS/jz8L8705Z4N0gt5f06noum9+/q
qVXG+3KsXX4UNXetXVfGe57sOqN/JyxMmfmW5Wd+fzbIN+9OD+0Sth7hrzP7
vdmdRKcSto7jr/PN5NrCoKgSq8vgQ/L7p5aH+j6wKbPKQr5fytqg0+ErSq1M
4f+y5/fxzRBx9fQy3sti96Ucm31kQmoZ71Ox+9KeuSPmQPu3vN/I7muqZc3q
K5fLrILAb2H1/65vD42n/sWwv1zB7ydaLvj+kdtWDP+3jL+vitOyBvu2llq9
Rv6Dg2V+66K8It7zYe1y0SaEc6ku4v0c1n+02vR9mNy12EoPzs/z6ldrDzhI
inkPhM+rYy5nb31bxHsd7PrFTfwGfcwvAn8pj2+XU83KOfNOpVbjYP+aXX9m
7649fStLgG+r9/0P7Z+T5JheZHUGzs+u/+iDj+2q/vxfto/M6r+3Q/rpt8OL
rSbB+fl9jdrR0VVNi2F/RL2vbZs1c+rWq0VWr2Bfj3/ed1vrRVWUwP0+4q//
bICnc1RoCV+eXX+n2hGBmn1KrN6hfdKRngsNG/6phzrY32T9p6rV2h99Kous
RHB+dv3Rk07X3P3TXmyfkX8uEg+IhiQUAe8S8/uPWS13hW5oX8LvN/EeAtxv
MuwT8e+1hvqxgfKs/58YYdTy0/ti8D+L+HXQry4mDxf8qX92ft6zgvZi+1Cs
/4RB+zKezK5fAv2B7Tex6/917N12VbNSfh+EtYtuf/Or+8OKrZrB/gu7r+nQ
D8cAn2Tt0hT6LXhi/DqR9fPHiIfnj3/8bPaRUv787L7K4TkaDedn7WJiauqw
xrWY55bsvsrgOWWcn12/5K6q5KtuKfjzn9Xr+oa3XxmpSmF/RM1RlbdLjWPq
S3legcdnV+AMrB7qYJxkfID/ng6Mq2PQ+u7E1Oq442P48Vn9Xpr30/c8SC7j
OQb/3gwYzwPh/Kx9Tc5F1Q+sLma/a+DroTvMF2/QemchzKcwH/F5TALz0T3I
k6wdff+ev/jcZdPycrvA9urz8+8VrD88Xd+vmM+lrL0SYP5luZ1dJ5uvw1De
dnmZECn4M79f/Wf+Va/LICdEwXHWbz9WDPH9lVtMcsW7DmmNP65SklxxcMPJ
INuhKpIrYjuuH7hhqZLkiiadsg6tHqEiuSKt0L9uvpWK5Ioeb472TPdUklzx
eMDtmmIXFckV0Xbt4htaqkiuWFY6Y1GFporkij5FIh2nXiqSK4Zpzkvdp1KS
XPFa6jmjQYCK5Irmd1sl7PpzHOeKlQ3GfLQ5qSS5otPuy6uDUpQkVzgu+nAs
dqSK5IqQuL2VpgtVJFc8aPiq16e1KpIrPhQXrSjapyK5Yth+g+TuAUqSK1z1
uBZWCUqSK8Tb0ho4vVOSXOF76Kn9jmUqkitiW/fZKRmlIrniy6TYsOEOKpIr
8h+cc5q5TkVyReS+bcccdqhIrhh1TxXezldFcoXbSJ1PBWOUJFcM3OmVG26r
JLlC/sX9WrKBiuSKVztajzZ6ypFcMS9+dVX9G47kimVrxidc/sKRXLE/RDC8
ZJ2S5ApFlnnnCWkcyRValYcHD33AkVzhkTbmiL2GiuSKYs0cYV21kuSK9gaL
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
3ugb39vgQIKI5I2d9wacD+8rInmjeJzP5HkTRCRvXH/3yfDZcBHJG+z9jThv
bDmztKtuuojkjSX1x8P1zohI3lh5ekrMxl0ikjf6pyTdazVTRPIGe38jzhvJ
8PsynDdSfrXcp6stInljF/xuDucN9rtInDfuLh5tHHzvJckbOYZtzo859ork
jUtxI0qa+uSSvMHeZ4XzRmljB9+RSwUkb5xp7uTY45mI5I2ilieuWuhmk7wR
De8ZwHljyjXu4x3LpyRvWHwx3pjyOIfkDUHbJREhDV6TvHEK3quA84agTXAn
5wFCkjfu2QaE/eIek7xh0Gy7n1fUY5I3DOA9RThvBK9a+bykgYDkjVV5B1MX
rcgheeM2vH8D541keG8Jzhs/4D0kOG98Fk7aaLn0PskbGzLf5G0LTiB549na
CQ38lotI3tCH+8J5oxnUA84bMVBvOG9sfl6yZEb/5yRv3Ire6Rbr+ILkDTm0
I84bZtDuOG+Mg36C80aZpoFjI0MByRun4L0HOG+8gf6J8wbrzzhvFEP/x3nj
Pbz3AOeN8/B84bwRlLnnxqbLr0jeiIfnF+eNOvidPs4bDvv8F3WsySV5g71P
EucN9rs/nDduwPiJ80YRjLc4b7Df8eG88brfeo2r74Qkb7BxHueNtxXHnWu/
iEjemALzCM4b7HdtOG+weQrnjbV/z2t83ghp4eefO1tI8gb73RPOGw9hXsZ5
YxrM4zhvmMHvqnDeOAz5AeeNn9c3KB7vELPjfK5wPvCuSVW3Ev44/7vsqoKM
mAzeF+Xflx7cKfWA70r1cX4f3NNU8XKU+jj/Xb/WLS9e6q0+zr8HyfFjSPYQ
9XGet/t2+lHroD6Of+fC8ga7fku9XjnzdMr44+z6p4ebr9l2T30eVj+/Hu93
6Xe7hC/P7mvFamcb4/3q8qx/WjQ8rRU7S/27FZ5fXV7+eNpFdXn2vBTMUDj0
l6nLs3pI7GWzbX6+ujzrD3NTP4qGNVVfP6ufu14LPGaYqdvl//d3NKw86/82
z+0izl1Rl+ffh1l+fdIej1K+POsntYLJTmU9Svn3bLN61hTVLr086C1/nP+u
Wda45pYv1e3Cf/cw7rH41fEyvjyr5yYXa/yn/VSXZ/Wcvl4yPapYXZ7V89uP
rbIEjur2YvU8ofGEd/5Z6vL8987qpgaGvFOXZ/VsnOt+K2ulup7534k/2e2+
5Y36fll9PvaIMhRNVp+f1Zv5wym99ArU52H1prV484xNJ0vgfaf0dzHsOP++
6wK3oFc9Ssj7zHVvTY7QsnrLl2f1Jk+a5aQXqi7P6m1R5eLmXJn6/Px7feuW
lrUzVN8Xqzdn+H0QK8/q7cCdOa7TX6nLs3p79nWGU4tLpXx51j/f2ii061eo
z8PqbcruWmW/F+p6Y/0w6VZvnVWu6vph9Tm/Q9zq+wp1eVafUxr+uNW5obo8
q5+UZt/OO3dS/1/+fVAntn4Yt1p9nex+izdVrzVOVZ+H3dfo84W3t5ioj7P+
cPvjj27iV8X8cXb9Xk+3fttwSn2cXeeRB2NHXgkuttKA99OydncTfG/X+c84
w46zdi/QrBy74Jj6OGvfaYIcpaB1KX+c9/pqhzbYFaY+ztqrq1R+WKJSH+f9
lq+dHx2sVR/nv9OX2kU65Jn6OM/rihpcXzux1Go+vK+VXf+Du2tGaloV88fZ
9Z+N1dlyUEN9HtYuHwYc9vHrWMKX59978Nm85Z4B6vKsvT7fnZswOFZ9fna/
KUWhISpHdXnWjtr2UZlN7NTlWT2IR08O+N5dXZ5f188efu5+X3V5Vj/dns+O
945T1z//HrDeA+8c6qQuz68H060m7uyqLs9/571jtmvQv87Pe+ytpzS7dLbY
ygnyMKvPllFXPH4lFPHHeQ+h8lRP6x7q+mf1ef7R04pbderyrD617+st71it
rmfee+S87WxF6vKsPpNv6FkMDlaXZ/UZYVaV0Pq5ujyrzwdn+vt41arvi9Wn
7/IOKy68KuKPs3qbeuS9n/Cd+jys3ubfq7e50U5dD6x+fFfWp8flqc/DnqOx
PaV+rv/3Ofp/f08esHr7ZHKiWvdYEX+c1dvt8Khb55JK+POzejO2DgxuGKku
z3v1h19ITw1Rl2f1lj/pfIdZV9XlWb11aBcyIvJf7cj7igEDC27dUpfnx88p
GzOaGKnLs3p7naAfJBOpy7N+aNxKc3hkofo4qzf9iZmed+6o65P1t8RX1dWy
ber6YfWZP39wV6uz6vKsPjPh93SsPKufQijPjvPfO4P/y47z/AFdJ7uvw3C/
7DjrD/pQb+w4u35W/+w4u84EaMdJ/1w/v47QgueFHWftvjVuvOVvPXV51r7x
UD/sOP8935EjAuw6qY+z9noF7cKOs3YZBe3LjvPr9/L5Zcbh6uOs/k2gv02H
9/Wx678P4yc7zq7fCvo5Ow9rl3XwXLDy/PvVDbfUVfdQl2fttQCeL1ae3e/D
E9uGfv2kvk7WjubbDbdYB6jLs3pgzzUrz/+eHcYBVp7fXy7IrT78Ul2etXsK
jDPsOP87XBiv2HlYvbHxjZXn39exy62VtGWpVR2sQ1l9LoP5tA69X/Hgnv6t
usxTXyerTzYOs/KsPj/CuM3Ks/pUwTjPyrP63A7zAivP6rMzzCOsPKtPQ5h3
WHl+fwfmKXac1VsyzHfsPKy/lfaofF99QX39rN7KYZ5l52H1dg7mZVae53Uw
v7Pj7H5nQx6oQ+v9VPhdJzvOrr875A12nLXvS8/36w40Ux9n1yOHnAM8U/1c
wzriMnrfl/3RUIlmS3V51l6JkBsvo/dubenv8zKmQn2c1T/Lq+w467cBu4/2
15tbxh/nOT/k58vovVKtIYez9/Pg9SY7zr8nH/I/Ow+rf7ZeYOXZfVVtdQkb
PER9nfx3jWHdwcrz++ZHPsRW5arL8+/H26nRo/hYKV+e1cMAWO+w8qwd18H6
iJVn9dM/3MHx0m11ef49dbD+wu9fYus1Vp71h/SoOZudmqrLs/ocButBxitY
fS4G/sCOs/r8CetQdh7+u0iwbmXlWX3awjoXv08pANbFrDyrzzyNM6ZXa9Tl
WX0mwLqblWf1ydbprDyrT7auZ8dZvV3eNKWqRYz6d7j8dyqBJ7Dj/PeUgUuw
8/C/Kzd27zM65r9/z8uOs/udDvyEHWf35Qe8hR3n3wcOfIYdZ+0YBJznKuJI
7PfCmCP9enxgRMEVJeFIl/v5HX87XEk4ko3uharn7ZSEIy28+9xUW1dJOFLc
NGvHXa2VhCPJ37mdtjBUEo6UsEHaM2OMknAk9rtmzJEG9Wn8oecCFeFIcety
j85W/76J5xtvbcffin6rJBwpadqu1E1rlYQjFZ9/vH9oDxXhSJnLu5n82qMk
HEns9Wp2XxsV4UjajSJiX0UrCUeKceg7684UFeFIg3KXj1kiUhKO9L9+N405
0hDHL8OWGqkIR6opmeOmMVhFONKw4PzXPtVKwpGuKDWVq/aqCEd602JP2llv
JeFIs9/v6xnkpSIcyU0ztuP8i0rCkZ5dq57WepOKcKSToqz9PSVKwpE26SpS
69arCEeqez7FebuOinCklvPv5AxdrCIc6W7bQCdbSxXhSI/ah973W6oiHOlD
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
5kjfgM9gjiQFzoM5Evte2/8B0Oqp6w==
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxNmnf8leP/x++j6dwn0nDuOyM5n89BicxklUQDKWnvVER7qBSlQXuhQkZG
hCKy98jeqy2rItmVEfk9X72u3+Px/eN9Xq/rOu/ruq/7mu/r/b5r9Rp00cB9
oijKlI2iMuBRSG2kOjIvjaKrclF0QzGKRoM3Z6JoLHgZMg7eB6xWEkWT4FPR
vZL0DPgN8JHwmRmXH4IsgA8P+qPAedRZtcR5c+FXqzw6s8AB5M2HDwYroXMh
eB06R4Odya8DdkDGwI/J+bmj4Nek1h8EHwEflHOdA3OuS3XeFuq/Ft4frFLi
/2dT//FgF/KPA69Hr6/egfxx4Bzy24Pd9B+8O3gpOr3gPcHuSH/4UPB0sDVy
RhDxi5DKPOsa8Fp0jkPOhNcDL0Caws9MrdODuqcV/Qw9qxc4nv/Gwvfn/5bh
fVuDFyGj4W3BushV6gfwEmRKxu8gnd5Bv7PGA94JbE6d54f299Q4w3uDk1I/
czptuJC8VshpyCnk9QPrgydqHsBPAA9BvyH8RL17mBsNwUbIFYEP478z9B91
nqp0xum74yj6gbl2F3gW6e7qB3Bi6nqGgJ8lUbQDna8S8y/hr4K/IBl0VoO3
Un4L+YvAxcg2+J3gSuRf+O2xn9sN/QbgRvI2IL8F/DXwrchu5B/kw8R1NKfN
B9GOfSnXH94/9XtfVXSbR1BnY7BFzvOhufobnZbw89THgV8GHsl/HeFHaIxS
40jqqZ3zvK0TyqqefmBCuk8YX42DxkNjKf1O4FHg5anzVH+FEo/vKHjFEr/r
1dQ/hvR5Glv4+eDAjNNNcp63Z4Nxids+EZ194edoncCbghPQaQZeEN5R73ou
0jNjvfvopx/psyXgOeSdq3Wk+RHmdiNwDHqzwvy8h75dhf4vBdpKmffhY8Cl
WcrC7wcXIx3h94AtKH+q1jt4L+lzQn516rkL3FHqZ+rZ6pcWoc/V95q7p4a+
0zot1b7AezWE11cfam4ijTW3wQeorxX1P6i2kG5Aft3Qx33CejiddBP1SWqd
C8JY69mdw/ufRbq99g3wIerqrP2V9j4Kbw2vBZ8Bbw6fDT6LNIQ/A85EjoRP
A+cgJwWd6cgJ8CngLORM+FzwXfpxEfgr/fA82Jb8G8AqPON28DfybwM7aF2A
jyEXwZ8A70AuiNyPHxbcnnxivpK8v0o9Lmq/3kPtPwOeQ2cZvAv8EfCDgvFP
9B8GTyd/Ofh+wfhHqefDCfRJIXX/nwdvCqbaT+E1wHLMvf01RxmjRupH5Gjt
n+QdnvF/DShzNrwErJrzGFUD62RcRvq1+a8eeFhq3iSMW63UddYPvC784NTl
VU918MCc50webBfaoHqPD/v2SeDRqXUH086T4c20D6TmJ8JLwVOQi7X/p14P
9cIcbZtxvarznNC207QfIMfCa4JVqLsAPwDsSrqH5h9YkvO8KoT9Un3YIqDS
0js8tLtWKHv+//SzzqNjwcO0dwSddvxXExzOu7QO76I1e1DOZ5fGRWtEdbbV
O/7PM4VKnxTGqH5oc+NQz8XgoTn3wyFgj9T7sPL1XJ0pA1M/V+dvt9Tz+Wzm
T2Xm2L2x93ntLd8n3uffAyvT1gPIGwrPw7PwAfB94d8x306FHwxPyd9AfQfB
8/CR5NeHXwG/E141dT8fmbrdan8d+EnoXIrO7eicIRsl9n51IryPzi34Hub0
Kp71CXxXqfeOGuhPLdpWmEA9f/Hfp+h3Ie/HUq/tt8hbB+8C35KPou2lXttZ
yp6A3jT0H9FZR/4g8l9Gfwr5XXK2Af4kvR/t/A+dj9AtB/8QfBdJ4e+Bz8cy
7KLoOfB39CvC/0b/J+Qp8lpT3w7yX4BfDN+Htn4F7w5/Gvwvst7GxGfjdu1d
pA+gnjK0YzW8MnwduBapAF8DfoD8hf774B8FY6ei+6E8OrsSty8Nbf4c+Rv9
T8Cy1HsE+RvgnyEHhTq/Rqpl3L4vY7/LJvBFZGfkd7iGZ5yWs82wQH0o+wK+
CLkR/YXg/dqL4U/pHEltl8om1BrsAO+ofSWsF9lHTyKPwl/U3h7292ZB55Qw
T6RzO/w+8GEJ/BlwPrIE/gj4Ou/8M+1cB36N/An/DtyW+N03Jz4vtKdpb3uF
9DqdBeCmYP98DL6MfBH4HN5xaM428/thjDRWk4s+p3PMk6FFr+ELg82ptdxS
+y7598S2nZrBn4g9vk3gN8Jfgl8IXw7fCu8Af1vjCu9aDGPGeN4Mn0P9eZ7V
Fv6S5ho6g4rel7WmroBXgCdhfe3d03SeI83hTcBWYZ/Uvnps6vNT9rBsY52n
XcJeqv1SdmaHsIf0CvVo7ymCE4K9ki2xTotQ/x+yH5FdSFnSB2bcTr1TJfg7
4ETkWf4fD/7Ku70Bvzcxv5a8htQ9Iba9OBl8MLH+LeBtpD8O9ud1yJtBZxLy
Efx68En0ZoGNqect2a/kr0881j/B1yTu+2/gN4EvkF6rNZiYy776PPFYaw68
mHherYc/Bz6d2Jb+BHxD57fOX/A1ZL7ssqLrVf1KP0D+O/BnwZXqC9ld4Ez+
2xS5rctit/Mh8NvE2LJoO3lLsJXbZm0vax9QH6uvv0aWxn6v+2PPI9WzLOzh
mvM/6D0St+fNwFV2i/Y9pAzjsgP8VGsF+R65L3Hfam98VPcB+ArwscCfAD8J
+ip3M8/brDGK3ecau+dD/Q+QdwHv8k7i/5tqXGI/981gz65BVutuQDoh/1dw
nxLvS9kwV4/XeZt639J978iM74DiyqsRbAbZDir7L3X041kVc7aFdK+QTm3Z
G9IhfTA8A/6Dbon2ebBKarycsv/Q5pj8nczNl2PP59fAVWpf4LtjrzWdbxtV
Hv4YuB4pBtvmX8pvJt2TOvfEtk/03AgpDfv89sh9oX6oENqstpfX3Q9eLuf+
kR21U2cO7/gHeCl1/hn7nFJ6F3IM/K/YetI/lLb9DK8F/wXcEdbj7zp/Csa+
RevofbdrXML7btOcRA6Fb5WNUOK6Lyv63fcP5+M/BbezktY9cpRsPLAi8gN6
vdHfErv/vwe/Q2pm/J/6p7r6Ad1yqZ/TC/13qffbsG/fyvw/P7KdvT/pheDP
nNu94VeR3zIxnwXvD7ajv2ZT57yc9yztXWVLfHbcCr8L7IteeZ5VnWdV57/x
8gXAO+bsB5AvQjq3UOdosBy6k7W3aX6Qrqg+Qr8rPIJXDXwBySu1xlUOGYW0
oa7JssfkH+C/keQ1B2tQbjH8kNj50+GXyr4ifX3kZ6gO1aV3y5BeCO6jMS9x
ndNT30V1J5UtNDL4LuSzkX9Jvotx4AjSCzP2DQ0O983rUvuOxJU3LGf/ksrK
PzMcflVqH840+JzUPqWJ8Cmpz0bpDws+DfkcRqe+58ovJJ+T7sUTgn7r0Da1
R3bWPHjXnP1Kytd5qruz6pdPSvq6E+r+3TXoy3fTJtzlW4EHlNiPIX9GGZ0H
oX/WM6/ugI+jP7sh18GbgefqXGD+5Biv78Eryd+muxT5A+ANEvNr4e11LifW
aSobNbFuNti/ylcdU8HhujNqbyZ9Nfin5irtuBH+t+6UlO0DbwHuJD1WZ6Xm
Nemh8MbgKUh/eH2wdeL/9y+67mGh/nm6dyLXIO209tA5AJ1/s26z0sNlc8v+
03yGTyS/oWyPxP3TRfYDMhc+RM9Fdyl8P/CSxO8jm78a6flRqCv2/Dwwdlm9
Y5vE9r50pJsN81bz9+TY7TxJ+wpym7a82O2+OrzHwMhtG4T8nPVc19ionYPh
Z+q8zXq9bAfPSoxx0eMyjfw+4f0mhXoqxW6/nvUfuhPge3T/Ru9StSfxnJEf
bobuH+BUzTHdSUu8P9wTbEvNt5tkzyJ3wl8AJ6N3m9YOuBR8QDrIzfx3H7gi
2L0Pwp9IbSOr7PScdeQDXBBs5vt1XoC3IJP4/ybaszJ1/UvAlRnbvY8FVPoO
ZHFqX+utqfVXwJ8HZ4b1OCNnO1zr/Q5wIulFGT9jemiPdF7hvyfCe6lOvcvj
srVTv9/8ovtkAvzGouuRv1RptVn+z5ng9Tm3b0rOZdWfs1Pvq7eE/fbqsAfK
v30tcl3Ge+7UnPcWldX+Iq47hfzB9yJzQ1vVZo2D6pOffDnyEum7wGXh/rE0
jIX6YTE4C1zOf3dnbD8vTZ23sOh6Vf+SUL/6bW5q37vq6Ac+G8bgZd1RkEfg
z8neTu2blc3/aqh/eeBPwleB92Sc/1Rop/r5NbBNKDsALF9iX/iQon0dsgeq
BR3d44eRX8z53iSfmvyZA+DD1Yac/aKat9NSt1nzQVx+91mU7ZvaDylfvfyN
0h+b2i8h/4j8EVem9k2OR79zap/HiMDlWx6cuh/U/w+k9jPLB6J7gcqOh09O
/Z5PZ/zeGhvd0TRWursoTjEbfBC9ZdJLzTWOd4Jzc+4rndfq50VhDWq8VFbx
Dvn95UfVvUP9Nhg+MrU/9iTKjaHNgzTPMvb/i8uPPrZoP+3QcDbp/ip/iHzt
OkPlpx8d+kq+3lHwejn7yhT7OFn+nYyfIb+0bAPFCt7hfDmP/eQg3eMS73s9
wYR95yHlgxvze8286BPwQJ1L0V53QfQO6VQ2PFgOrCH9yFxYPugo/S64GmEL
iz4CP0UO0bkD5kOdqvuNkP6CnzeRsvC3wZ4UPBjeA6xs0zEqDaj0/shhNmGi
mjpT0DtaZx/YPev2dAO7IscGXjPoq03/5J0vH8u3yOHaw8GPkYrw98EPkArw
98A4sd/ydfpvOBUco7MNLJ/YL10NXKX7IHlbaegEkCHZm5bORPA78l9B52T1
GXnjyTtOZ73OXvmldD4Grve8ChwT2j9KtmPe+v+Ba/Puhx/BnXk/68fQfvXb
VnUqzxhNuc2lbrP8ZiN1/iOnRP7vVdozAvym1Pkk96Z3UL4qfH3on/3gn4Md
s3urjTqo7Yl9xfJXf0n6Mvg34FdZn/1fgx8H//BH8hcj/YKN8TkyBL4WPJHy
m8CKvMSGrM87pT+nMZ+AZchfU7BuOfinwQ+v/94seFzkc76ZdOPIdvaCrPt5
PrgWnY1gBcoelti3/Tfvuyb421eDjyPd4E+FNusc/yzrZ/UJOppjmrNXhDql
X0f346xtgvfA15CemtfgJKQp/HrwjYJxG8/tnPU66qS+ok9rwX8Cj0hc7j90
NuXdx2tKrVNJ7QFfz9ree0v+c6RTeG49yl4iHd3bSF8Ofw58Kev1/qLeS3dC
3cmp81vw4jBeLyBXRP7vaaRF6IcnkTaR4w6rwnP1/NLE95r/30Nk452deM4c
ofEFXyx4vW2DD4x9RxwSO6bztOYheGVsP8Zo+QMKzjut6PzXNA/Bociroeww
5D348MCfhA8G75ZdCDag7Hbq6Sc7Lvho5bu4TPd55GH4+eBE9OvoDqzzC1wU
Ob2I/Bcj+2+3IC11Lw3+YPlD+usOhXwOHxA7rXw9W899GX6b1gL8Xvh1ut/x
30r4JWDr2LGti8GuyGPwLmDH2D4l8c7Ic9qvwJsp3wk8njZMAZ+P7C/6nvof
hc/VPTLxPexQdMaCz0SOl02N7e/oAbaP7Y/qFMp2AI9Dv03sdl4Etgtl5bMS
XxLa/13B7a1XdB9qXFqBFyL3RO6jrQXXcazWl9qtPTm2nvTvSjwf+jJ3vtB8
hh/Lf6WKrce2qY+L/W1BtcjfGmg+jkPGR57L40LeVurooX1b9xftyZQ7QmOt
fURjDZ4W+w51KngG8mBkvX5ZnxnS+SPvONpf4N95nx3ypWuP7cX/G2hnH/BQ
8nuDv+eNG8nvSV0vkF8fvJg2jICfA87L+huJuaF+vcsGzf+s1/gA8Eakkd5J
azb2OJ4AflPwPLlR/oOCz+JpOiMSz9tZ4MHoLQt9q/wjwFq8+yb0j4Ifrngx
OCdyuiS2H6CgeRzGVP2s/te9Zqx8a/BS8g6TzQbOjpzujtwf5uGJyO2hnc1C
G84BGyKPwxvHbnMj8Cjqma0zEX40/Gzwicjps2KvkSaxx/2+yPesGYnrqF20
D1z+k7fBRkX7Xn8reP/vSn5tzcm8z6nf8i67GH5tyJddsCbvtt0JPxP8Q/c9
DJjyqWMiNTKOu5wW7s66Y6r/pXtk0fNK+4D2A82flyK/W7OwFzWPfda0jxxb
/brgtXxDYh+lfJXyh79XcEz191LzJuQfkDj2qvO3gvb72Pqvq+7Yvixx+Tfl
b9xFuTIljhHKl6i7ttZE28R+KunL5ycfoGIuOlgGhzvyFeBlicd0oM5qZEzI
31Owr0w+b8VaFHPZN3DFjHYm9qPKt/pB4vu+fBE9wEr00W9Z+wQahTuvfBSK
6chHtydx/L0B+RUTx6Q+1t5WdCxHPl6l5XeT/03+/6ZhP28R+x30Looj3KT7
c+SYtfxsWfJ3U+dHBZ9pP9G3bxd8ZqXKT+zrlr9X+/wj8DnhfeXDuySsF+1d
kxPHqXVGK369u2D/ao7nfFrwGSvDSuey4uAHJ9aTvuw9rSn1c13NG+TWyGvy
bMU+YvvPdRbo/5KibQDF6DOJ7Zap1PVDqX2D7bROwc0Fr6/pidfRXfAJ4H3B
Plwi+yvxuX9kYq5vInaWuqzWVh19p5FYXzHHu/m/ZSgrn+c36PQo2j9ZX3t+
1t8TaD9Um7YVfF4Vi473K+6v+GOlxN8VKEapuJv8pZvD+pJfvH3R9wvV9wvt
aUDeA2Gf1Dm7IvK+r29m5EfdL/X81JxspX0ucUxE6/2a2PELxVd0rn2gMyB2
bEV4ZohNKd73pPYhZE9kP7bimFXJz1D/6oLtuLIhTqs6VfeSxPbFqUXHQVT/
Mo1vYhtDcS6do++H/J8LtlNOL5qvCuea7BbpPxT0dYYuTPxcff+g7zpWBzuz
JnxD4rjH+SEmpouV4rGfJv7WqUXR3xfpXX5MHIfdN8z5O2KvR32zpFipYqaK
wamsYrI/J47daf7r+6lfE8dG5aN+Nnas8Bn1YeyYo+Icj8T+xunh2PNfsdNW
Rcd0yoZ9QDqK4a6IHT9aCJ5b9LsopvBb4jiy6r6I/Djn8c3mHEPRmGpsfw33
lF1gd9Iz4P20B4cy8nXrPJUfTP486YyCn5f4LtAbfnxi/7/iApVTf2OmbztS
MKP5l7UNHKeOyfQpOi6g7z5+iv0Nib5J0Lc97fjvldixEulLR9977Jdz/ZUU
K83ZDy/+d+xvMBSn6Vh0TF37866wfyp2obiF4hf6/mRnyK+Q+t2r0P514PTY
cboZ2j9ix8bmxY7tK1//3xB7Xil/bxsjx7TnBH2VU2xOdZwlnzDrbXLW91PF
E99BZ2niuIbiTfqeUDEjxT4UA1H8pRC44iM1wv6vi6e+pVEcdkHss3hhWC9r
Iscc9S2K4tH6LkXfBiiupbiJYi6aq9pfdNdoH/Y02agzw1j/mPWY/pS1T2Bf
+Id5+xxkm23P26faO+gcHjuGUAv8Peu9Yofssth7o/I3FhxfUPxC/lL9v1/R
fuabyB+mM4F668H35H12qR7Vtzvr81S+btUj/8chRfsuZPvp/nI15ZfDZyb2
w/cJ81D5sq1qFm1H3U3+pMT2tmwt2dFtwp4gXiH2Gar4Ta/EMZlqRdvYK8I5
pXvHU/AF8JcKthlXl1pfdvWoxHdD2auyW7uEu6TulG2p7/XI9r18F/KBbM7b
r659eIrsHNJ14bvzvl/IBrsefK1gP4P8IorXyDctZ4n0dU9dW+r7i85T2fVy
AshHIRvs37zv3fomR3d53RkPBy/J2ucje7pTYn92Fd53XdaxA93J5Q8Zontw
qW3s48P5uDrcuxV/OCaxza/vdnTW606/Cf11BfsZZHv3z7pPZFd/Fe7yX4Tn
ys8/AlybeO2sClxr6pvE39Go/YOz7nN9U1c2sf2v81r3FtmXsjP1vZDmkvxS
60sdV5hOfvXYvhp9fzg2a5+/7uO6l+tbJN1HqsSOj8hPcnJi34vOX9mBivuo
jhpF+w3UD/IZKXbTS+dmYv+SznSd7fK9rOf/8vrWI2v/lfpRYyG/1Ne0rUzi
9lRNfJfQnWJkGGv5gb4NOvI/bQn+kL6R65Uvjr+iL/M+R/StUJuiv9/TWaZv
/W5KbP/rWyndW3R/0TdR+t5A9/3HwfNirwvZdbp76K6n2M28xLb04sQ+wDKy
K/L2RcgWku/ii9jnuL750beCrcIZenRif9I+2tsLvoufUnSdut/X1d6cdf9/
AH6IXBi4vm88I7S/V2w7X3dk1ak4jGI32kd1TsmH1zf29wPyKcjO150yKTqW
KntvTGJ7Sd8e6BuEPkFf5fTdYzP4gVorifdDfQ/WKqwj3el0d3462AyVY+9X
imfJvu0Or5u435aEdSpfh+zk+Ynnv+7Buxm7FVnfj1YGn4/Wy6tZn4eyXd/M
2vcl+012nPrtFfgdie8XitV3K9ru7Uh+MfH9UPdEfTsnn4/q+5dn/R/K+3gI

            "]], 
           Polygon[CompressedData["
1:eJxNm3X8VcXzxs81QM+5Bhh3j4Hi/fBBUSxUxEZFQVQURVoBCyUEMRBRscAg
FLtA7A4M9Gt3dyIGGIiCKCp2/J63z/zx+2Nfd+bMnt09G7Mzz8xtOeiY7sOX
ybLs5mWzbDn97pKybKR+38/FN2bZ1UWWzRf/tco1opeXfBvRl0n+Q6ssO1vP
XhT/gsoZoi/S8x6iD1K5RHSp+nuJflj0YtXPxXcRP1H8IvEvi/+S9vRuJ/X3
ovgvxF8sfnfxjeJ7i5+h+j+p/krVLGtZybL1VaqiJ6jeY5I/qnKW6KP17FzJ
zlMZUvX4PpbsE5Xxoi8s1bdkx0p2gdq/TO0/JNlxkm3f6PePl/w4lSNFv5b8
/VdJvqfkH+t3NcmaqywneQ/Jx0n+p8bXTPKt1f5Okh2gsp/odSXfR/JXJK9I
frz4S8XX1M7a4jcVP1D8s5L/re97Q7/dxO+r8qro7yT/R/QDqr+/6v8gPlPb
T4rvIf6depb11KOnVfcfvb+V+txZ8gNVthW9rMbYSnSjyky981sty1ozF6q/
UPV3V529JNtaZTvRH6nOX3yPygfMifobLvpl1c9YD9XZSnW7RP1K6fn4VHUP
kfxZ/a4pvqbynOir9P4jevVM0btI/qnaGcV8q8wTvbXkR4r+WHQTyR8VP0f8
Kaq/Y6PXm7Fto7Ky6JXV33qiF0g+SPLHkteXvbdzo9eR9ZylMqrw/n1b9Fux
hm1V/xDRn6u/P9m/am+c2jtKbU/W+xtK3kfy1yVfhvHo92jxQ1Qez70+h4o+
TOVN0b+p/gp6/0G13Vn17yu8Xn+z50T/ovVZVvKXRPeW/BHVf0WyKeJ3E/+S
5DuJn8xaazz7aRxnqf7Z7CHRA1R/vORNmVfV76Lx7sPaquwmemOV9qL3Dp71
biZ6VZVMdG896y16d5VOrJeerSN6bZV/1GYHPdtVdE+VjqJX1rNLOH8q24o+
v/RYTuGsqf9VS58/1mK4+O1Lt72ZSmvRPTlXoi9U6c3ei/2Six6q+meIHym+
L+dU/EB93wT1lauvmvgD9XyE5MfE9/dT/X6i91TZR3RdpZ3oppINUf3LxV8s
/nDxE8Xnpb/tPbXXT/wy+j2L/cexEb1KQ5aNjbGd0+gzylldR/yoqH+56l6h
sixrpvGdIfpfrc9qjT4v7P2DVXqJHqRySMVnqFfM7+ait1BZRvQqpXXVIrV1
mN6v6dl24rdXmaNn+0renfXQ82MlP1j9na3+lpdsDfE9JD9I8g3QS+L/lnwl
8S9L3kv8h4W/lzWdXXi++oreRPVHSr566fPPXjha/Hql1+oP1R2MvtLvzRLf
orJN4faaSt4k5nCh+vuD+0B0f9X/J/r/WfyR4hvU3m7iN1VpIXqe5D+r/iOS
Hxj6YBnJKipPiV6q/V6Ifkb0QZKP1O8z6C+V4bSp988XXYpeR/Kqfs8Vf45K
QV3J58b52bXR84s+KPR9w5hf8W3Ez5d8oPgFqv8b+ld8H/E7ld5LW7JnS88/
64/O3qJ0f9eo/jSVlUSvp3Kn6LtU1i88/1XV/UH0EY3WG+iP01QGi+4c54Ez
10f0huxZ7gvJjkF/6/ufU1tjQr+dofauE99CfAvxo5LP36riy0b3Q3/M2ffc
PZJ3kvxG7cel0hdrid+O+1v8L608XvYue3gd0euX3o+c9aPU3rf63Zj9ofKd
6Jty3zXdog32Kfu1ZfSHnPY7qFyPTdBgfVyN+f5LfT6VWz+211jeUVko+ga9
21Xy13LfH8eETr1W47lC75+k96eGHH3bO+4Y2hga9xltjy19H3OXT1H9yeJP
QD/E/T2l9H3PXT1J/Ht16+dX476dJPk5kh8q+fnijxQ/UPwe4s/kvhA/THxn
9K74Dup/mN5/Lu7Tozjj6B5sCcnPLa2f0dPjxU8Xf7n448VfiP7R/AxF34o/
Q/zGau9g7m+197vaayO+v/h7uTvEP5RbfkjYSP9T2TnznTBL9Jqq35n9L/pb
1e+m/gaHvkJfPK/v3SHu828k71lalzdIfkLcX9hi2GRf5e4Pe6xLjKll1fql
BzZV1XoUfXpJ7OfD1d4A0buKPl3tbabxDNK7L+rdf9XfBuIPiLH+Ib57aduj
heofp/pf6PlgyY9S+TL6O5r1DJ3Wgz5EH6bSXfRlev8i0QNFn6f3T+VeFj9F
pa3oFupvP7V1W+z3E8XfIT6FPXW4+PPENxe/lvhhyee5iPtliPgLxY9V6Y6u
ST7fnJV1se80nzPErxX65yP10V99rYXNINvphtx7tU+cwZ56/3Tue9HNGW+y
7thK76fo72TxF6iMEL1O2IPTVf/HVrYP942z9bP4BvG9xF8jfkkr38e38r2h
Ez7VGDABZa5nL4g+Sswk0aPZQ6K7qpwoemLwU3KvNWt+Qe77mfvvZHSW6EJ1
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
NyI+R+x1Ye7YM3PG3GGzYruSQzIgd44BuQbEm4mPg5mCnRKTxxZgzpg78q/I
ZQW/A8cj32ZgzP/3NccPif0tiPj1b7ljn6eq/J7bPsX2xsfD12NMjI0c5x2T
MUR8Q3xMfE1yuMjl2oT5I3cTnabxPy/+RtUfWRo7wcfF1yV/h1xB8oV+qhmj
xBf8z6dtdHx8nGSnqaxS2IbFlm1WOLaJfw92u2fVWCg5NcNy57gsiny4Prlz
bOZG/Jvvw2bCdpqcbAvvg71Y+PvJxR4cdfApsTf6FvY1yS8amTt/jlys8cl7
5wD0fegwdNkMPZsY56lHYfx2Qd1nirngGTLucO5yYtBT2G/JWAs2Nrb218mx
GjAbsBvGwFjAjK9Itof4b8rNMUbid7uH/iB3CTzz17g/+W8K+o1Y1o+F/WP2
PLZ5t8JnARvrtMIYILYX/iu+FJgQ2BD4y/Gin80cm14Q98uXYf+BrxwXNu3i
unVgx7g/vqz7+6jLO9xNfBffh82OfUwMFFud3Bdio8S7+O8a/59covf7BU38
kzgo+ORJhW08bD3yk/hvGfEv4mDEJ3fS77WZc8F4H1seG603856s6/aP9V+U
bK9jt4MFMSfMDT7b1+r/k7B/0BHEgxkjY31I/Py69zvt0v43de/5F6IvZMRz
9y6858il4P+Z2JP8B+8c7LxkbKFn7Kf/A3wBz7M=
            "]], 
           Polygon[CompressedData["
1:eJwt13nY1lMex/E77c/9aNF2P6Us95OKYipkMswQMdR0yUxMy4wWmqJNO9K+
l21IQlKYdrmmyTajIhFRkp1hZLKUySQNSc3re53fH+/rOp/P+Z79/M45v5P6
DOk6+JhcLvcCKqOkPJe7pDSXuxSDKuRyN5blcnMxXXoybwoW0PsKgnlL8rnc
Yuykx/PH8EaLuQl30Sv5rwsdI2Y0/lPM5Sbx/yD/j7hR/Bi6FI2lPxHzMX4U
9yHKpOtjkTomquvHBrnc6dI9SnK57thFL+T3F/Mn/E3e3fRhlKjvC94eVFP/
IAzgNdFuY1xJV0I93m4xX+KINuvxWvA+pf+FY+jF6tuk7lH0WOwTt4z3Cm8u
fRuepBeLvV/ZieqfgHrm8zt+Zd4qMSvxGb0fFXnL6KX4kJ6h7GReJ+Uux830
Ie28Lf9N1JSX4zVQ5x3yb8di3mre18oflf1wzBW200v4s8TMDsTdQT/Ffy8b
x0g8Rtfll8uvG/1FyxgD5vEG0TdgFt0FjaQbor+868tSnVH3EN5gHKdv43ij
eZfRv0aeV4rOpcmLvFujfm2v05cb9GMIlmRzMEn+MHEjUEe523kzeFPpaVgY
bWIarwfdHTXEbVD+bvXck097Lvbeqmz/hTcPm+hFuD6f2o3276Enq+9W9fVW
Vz/UVt8o/r3yC+Ia4SNrMbYs7dnYu33ie6BvwnBeX/o6TI91sy9bKft7e/Rq
fEw/pL6NvIHqGoSv1fc4bzvvPnoBXqWLuCo85eajJt1cnXVK0xrFWtWhf+RX
l/5Muc9ROWJ4HZWdoNx4VKRP5rcRV0XZyqhobFX558Q+EDMSL+jLMHHnyj+n
NM1FzMnh7HsbIWY0Nom7U9kneL/T5tXx3fD2iytm9Y0tiUlzPKCN5BR6Ol4S
UJnXjncjPQzP8zZiiPTQkjRnMXe1xHXI2h2On3gT9WecfvXSv2tQyziqiztX
3CQxE/Gium6LNZI/PNtrsR/XiJulr7OxRfxf6JrK9yxN9UW9E8rSWRTrezbv
LFQtT+dJnCu/VPZ87NLGo7zNvFvpifgvbyrvUd6pdIs4x3jfYFw+xUX8I2Km
4BHpU3hN8U8xA3hzeA3pxriJ/jPW8s6l2+NTcQt4z/BuocdjBT0c83g/Gf9h
dKPvyNaopZjTMDnGjxW88+hfxTmkvpHGOzg7c7rgWONdWkhzFHM1B2vpMVgQ
dwRdCX3okdn3cVSbR+I8pmup72T1HRDzLY5q4xHeA9n9MQn1tTFX7OPKlosp
Yhx9Gnrx3lfXR3hP2c0xryVpfWOd82Ia4XLpDbFv0ZQ+AVfwHqdX43Xljud1
4m2KvYdm9Jv8F6U3x3cZ7fPe4r1Kv4w+vJ/FWdog7d2+4WEffUohlYmyW7BT
uYa85dIrsv7FfiwYb1XjrIYmxn1s3G/88+TPEjcz2oq7LRvHvfQ8vFJM53uc
84dj7nBcWfpW45u5X8xCHEfv1p+eJekejO8zvtPa2TfzIG8RXlNftew7f4he
jHpxlqAHbxm9FAX6pGz+3qU/QOu4PzFbegYuldcgm/tOWV8W4FVtfKXtJrxr
6euwnldX3CXZtz8ZVehKOJs3mB6EDeK2YG5JmpeYn2ML6du/MDv/HsBWMfOz
fX+lOeka510x7fE1vCvo3+KLYjo7u/GeU24jdvCm8x7jXSWmO+7Lzqa2WZ/7
4ds4r3nXZPtqPd4opjHH2J+g12J7MfUx+vpXeh1OpOtn411Fr8E2cTOy762u
NutgBF3behat7/f0//KxAZ1R/Ab5FBfx8Z2ej6HSO6IfaFlIb7F4k51iXzWN
9xNdgoa8Q8r+FG8V9bXgtePVElMzznxeRV7d7E3z74jVv8G8gbwTxZyAbmVp
rzbJ7pRdOCyukvJ5+SU4M9oXM76Q3mTxNquHD8QdMYeteb319xrsoffzJ8uf
kE/3XNx3B2IvqGcFbzk+od+JMzGf3pPxrvyGPpi9m96I9yV+UFeNrH/xbVVH
I/p4tOLtj3MYeboKCrwt9Msx14V05se51o/ui6+KaV7i/fcP+u9RXswtvFG8
juq/ONopT/d+3PHt6Z/Htx3rxhvGa0O3RpXydIfEXXIm3TbeTnSfeO9mZc+L
e4meiom8i+gOGEUPxQ28crqIHnSFbN2e1ren4v2sfz/EuzPeCvjeeHbTI7Jz
vLlyzdC3LJ1jcZ7tsRZ7cQF9BDXEbYs3UsxLdgcM4Z2qXIt4w2Rvi3g/rxfz
HA6IO4it0q/l0/rFOk7Lvq3Tea1iLeP+zb7L5nSzWHv62biTpO/EVnnL412C
rtIfxvsIZ8Z5g5W8C8RdFHtVfRfHXcP7XMxuvM9rz/tC+kv0jvZj3fBAdued
EW/3+NfgPczrQHfE7aEL6S3fme6Eu+JcQn/ed+o7iCvi/jUPc4xzrjm5Dcvi
HuNvyO7QX2AmvUc710pfl095ERNvx/mxlWM/oxc9KOZUuno+9TP6+2BWX5Qd
gL3qujkbR8RVw8C4Z/E0rwv9G+wupvdQvNPivdYOQ8rSP9Ki7K1yYdzf9Fjc
z6tKV4l+0tXFlil7ML4rVLB32/D7idtn/N+gY5w5cWbFPYRZcR/Sq7Et7i3e
fLxEn1FI6xDr8VWc5fRl2B9na9wL8trSZxVSOrwD6Bx3bSHdefGPsyP2tLF9
h+fzaf/FPoz/uejftcruVO5NvC2mRXaXxTn5Ft7hncrryXs73hB4l3eokN7K
z6rvmXib8Pby1kk/GVr8R/TnMb58+leLsyfOoG9jjfLpjIizIv4ZZ2b/aiPN
+5h4l5u//wMgZxBm
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
YYnXi2IcT1CalDnud21i+RuCTsWLFFvSupNPeEniGPL38GtqP8983mmlf6K8
gnzg2GOh84zGpkfi84vsWLfEvrrmUFa0r/xH6vWkdfVbOP/I5qv+oUXP++70
qUtoj+JY9YPfqzOBxmmc/OrYc3JbkOkavtUtyOsfHaLxyBwDr5N5b9B61LrU
P9LaVzzqPnRdGDlvp5j/teCP/PNrQlxaMeJGeZ89GygXkPpM2gP8LudY/sqc
48wDItffP8T0FNsbHvImT6emFVe/A7pj6phtv9Q5QeXOblOsn3JV5HyE9K8J
cRWdf3WOPhRcFmIH7VPHkGcoTpVzfvNm+D/x/gSdt7WmwJvgXRs5B3kLZSj0
7bFzbcKfC86JKA+ofKDybsp7Pgq2yjt2viXE2JU3vDnwlQtQTuCvnPNOLyFT
JfZ3FRs9MMQ5NQ7KH50D/bAw9Xm/Q2q6XeSYuXKg9/N+O3qGps4TDUmd57oh
ch72gdj5Dsl15/mIyLGF2Tw/Dj0v8E+E7p/6/6qudFRTnBf6ILBr6hiL9G+j
/YsZwy/BE3UWVTtT5+OeQnZHyHNdEflZsQ7FiBRnmBP4s2LHYaR7IfIXBP2d
g37tmzuCfuXlfis4N6fx+CXIn4r8JanzdBr7X+Hn4R0Xec59oL0RfB98mnIl
9LNgLu/czjPIp4rFy77FjrUqzqZYivJIt0OPj51vVQxkE7iesgl6V865p80h
7tcu77zxnwXTmj/Ppq4vPa+BYykPRc7TKK6+hza8h/yxPNeG3zR2Tlk5JuWa
NE92h7yqciVn8v6bEAMQ/3VwYrnzL2+UO/8iHKM2FO0XKmbbJ3aOSfW7w5+Y
+BykvijP/Czy36B/JDIfph4f5RTKoHvFnrfKVz1JuRn6mdj5t9ugX46dJ1L/
/kLP27Fz2cppTwtrWfSLqdeI/JkpPD8a+d5Ah7x1juH9pNj3BN4EX6U8DP0G
2Jx3BejjU98leEt2NHxLuVo9TwnzdnKwP4p1LUKmZuwYY63wLeVqoqLzlMpX
Kv+4AN79ke82vFDuewjyyX7MOe71HHpGx17vyo+OiJ0z1ThMjH33QO1UbE3z
aHGIQyhvpXy+cvdXBJumPiqn9nps/T8g87dyZTyP0f4YOyatOay5rNhgA3gf
K+ep8Y48Lms15uAnwTYqvtcmdV5EtlS2TjFSze0mqX3PZ6GXgzNT6/ksxGOP
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
lek=
            "]], 
           Polygon[CompressedData["
1:eJxNm3m8VuP6xvd+t2R410KGetcqSsveZUwZKpVGypjSoMzznPE4HMMxHvPh
kEg0oCJUKFMkVKg0k4gUEco8HsPv+nbd5/P5/fF89nO/z7Ce9aznue/7uu57
NztxSJ9zS1VVVeNqqqo20t/n86qqM1Q/UuVJ1bdX+UwdflepVb1PXVXVo2lV
VTe1n1VUVd2uekfVO6ncqfqZWVXVQeq7t8oRqnfTmBq1rZfcTvURKr0lT1Tf
J1X213wX6++O+u1stZ2tMf3Vt1dSVbW8tqrqZsmnSh4keaXkI9T/MfVvr/7X
qf85au+l9r1UTlN9sNrnqn2Q2h9X+0DJr0nuIvm+3OujL2OGqN5b7Y+ofTe1
35B7zay9jZ63UM/7j9paqq1FvN9R6j9Tf7tKfkD9/6NygOpT9NszKv3V/rz+
tqa/2vaVfHS8Xz/JAyS/Irmz5FskHx7raaXnLdDz2urvoZIPY79Ub6yyq+q7
qeyQuH8b1XvG+3bWfBdpvl003wn6Hv0kPxvf5BzJfSU/Ibm75Dv0vLEq/fl2
KlNV31t9BmmugZr7Iz3/APW/Tv33UPvJartEz+ij9mPVvkrtdZK3llyWPFNy
N/W/Wv13Uv8hmu8gtbdSew/G8G4qTVXP1P9N9e+h/tfE97te/U9X+wFq3zP6
D4nvebr6f6b+h6pPWX1/Zo9UPzj1Wfpa5ZDU8nLV31M5SPVOGt9B9TqV9qp3
1Jgqjf9S8u6qn6/fuqp+sOZfrPl31m/fSK6nPl1VP1Dru0Hz7Cf5MsltVf6r
9i0ld1a9p8rGqn9bcv+BKg0k/yG5u+rdNf6fGr+7fjtR+3eInnOi2k7im6p+
YO6+jDlK9f21np0lb6O22VrPcXxTybuwRtaq+S7XfI3U/wL13yv3XrAnh6ve
UOUdns0z1Xcnyeskl2p839qo/CI5kbyv6r3qfGc5z6dqfQdJfpl7KPlmtR/H
Gkv+JkerfoXWMED1C1R/X+sbzJ5K7iL5Xb6Pxo/U+H01/gzNt6t+b6L2xryD
6n9T/1NU76/6h7WefzBzqxyv+pFqb6/6Tir7qp5qDcu4n5qzleY+UuVp1Tug
HzT/yegUtffW2BWa7wr1b6W2yXH/XkaHSB4Q57t/zL+f+i9V/3aSKzxP8lzJ
jdRndcl71Fj1E2P+3VX6Zr6/x2jeVPMdofbG+m1jtW2q8a9r/FOMUduhKver
Pkj9Z6v/QMmPSh6ucpjqJ6mMCn30qtr7SX5E8t3cGdWPUxmq+iflqqrvq6uq
vlP5WPVKZvlT1Z+vtf6Ynlo/D9F+TNGYU2qsUx9W/RmVkzkb8bwGGv+nxq/W
+Odqrb9eT60D0AUH5D773IFOqv+mfs1VL9D5qrfPrfu3qvH53k3lO8n1JfdS
fVfN30hyU+3Hy5r/yNx3hTvTQfV9mFP1LWos9889F3Nyn1rkvssb1fj5O2m+
BpI/0rOn1vr8/0Pr3VXtl6r9HnSA6ser3Kv6JJUTVD8k5Am5df8cjXlLZbTk
vpJPD3v2nMppqvdReUz1keh87kLI6O/nUuv0u7jvkm+V3Jg54v7cFufxRslf
VqR/tL8zVT5Q/crcuv8O9fm3yhm5x94aMvZpXsw/PrdORje/Get9MOwj33Sc
6ker/3z9fmCsZ1pu3c33ezr3GeIsnRky56e+9m+Tks/Mb1rTGq3tSdUfqbX+
2Vp9/+ROqL5W7cvU/prKO6q/mHsu5pwc7/ee2sZp/HCNfyj32Tsj2uerfQZj
VRZXfOY5++eovJBbv7yY+huci77JfXY4Qz3QZ2o/M2zscWrvJPk8yTvzjSVv
qvNQUt+39PyJen57tZ+SWn+ie/EfLpC8D/OjG7WGlVrL6+r/pPrvqDl+ljxX
8qRa+wScjyEq01XvqPHna3wz9jC3Pb1EckPWI/lVPf8+PX+eznc9tXWos0+A
v3Oa5j5effIa2wRsQ1+VatW3i/HH5K7zW+/c/blvGWeO9Yd92jba22n+k1Lf
Ee7Kybn7MubouK/clUrI+6j/oFh/H8mvqJyLbYn9b6v249VeSB4k+aXc784e
cFcOCnvGO5yk+kLtU8p9VVlc9pnn/NaPds4MZ2etSkvV91D5SfXNa2yfd8xt
a3mn1rl1Jrrz15Ltzw4qn5dsAxnfRuvrm/o8oFs20n5/re+1VM9+utb2+y/s
I3cc26nvu1btL6j9UbV3yW3rsHl7q16ofFXyfiNvqfn+UP+p6j+u1vYTW4i+
3xNdoNJE8iYqB6veSP1r1Paz+k+udTvvzh5wl/fTek/Veuu4o+i/3L4Ae8h5
7qL2y9TenDsg+Uet9yPul+Z7vNbfm7WxRvaH9+B9Pld5vuw1sJbvS9avfL8T
UutUdCv+yU3x/Atz+19XSm4n+eLc/se1qc8MZ+dNvc8IzTVZ5WPVX4/z/KTK
svDP2T/O+wDV/5b7LnLGOeufqc9T6vtAjMdnwze6PrUvt0q/TVTb8JhvqcpY
dI/uyxZ19gk5e6yRtZ6Q25epieedoju0Z+hHdO07Gv+Cxq/W+FTyl5In4O9J
3lzyAskPYR8kJ5IXSn5C8r0qr2SWh6n+uMqHmX0sdAXfjG/HHmKLuBPs7QeZ
+zJmXmafCt+KO8XdGpz7blbF+cMf5awfpfa9Ga91TNXYZ1VWqH62ft+Ls4c+
Un2K5ry95DWzdtbIWueo70Yav6vef0vui+QZOh+H67cxqe3ZMD1rQeK9vV9l
oeq7aXyGf6f6K7X2t/CdW3N/Evu8+L6bqP6a2pPEtgCbsJnqzcOeg+ma5G7H
V8NnSxM/7wbVr1eZr3qd+nyAvwWmqbM/wN3lDoMHp2fuz9rq11nfsV/ocHT5
M2r/t9ofVnlO9bfj+7Enk+M88n5va/zG6n+w9uNmya9KrqkzJkS3XRBY8T31
f1Ttd6vMzPx90A3YEGzJedyZGt9B7uIc9XlQfd/VfJuCzST/R/I4lRnUVc5m
f9W+Vvt1q+TTJP9L8je11ufcDe4Iumak2gHMY9X+m9pf12/no4tVXs39/R5K
vYYzC7//HZxH9f+v+j+hPoPZn+j/Wu764LBHD6rfrep/m8oo1Sdq/NWqv676
Txr/gORzJI+R/Ivkw/S8UYEnb83tjz+Y2kfCVwLfPhz49/bc+Hlcap/0JsmH
SL4v/H/w6MGSh6X2SfFNwYP/Sm0fsFfcf7DbhMDvb+AzSHctUJml+ida39Ml
7zl7/4l+W6q2V1Tertj+YJuwUTNy+/dPpfZ58H3Ar1NT+2T4ZvANjwce/Qf6
T3PuXzJmAjt11x7/PfbqZ/ZXv90k+WXJ1Rr7rp45G99M5TPVv1VZofobId+o
fuep//kqNyVe7xK1PSBd/GCt9Tf+xByVb/CFVN6qtk5HXqPnTdfYdRrboM6Y
eAvVtykZK7Mf6E506NrMzwP7gIGuV/3TinX//XreAxp7pfoMVNulavuy1ueQ
8wgHcoPqo9R+ueqTVP9D7R9p/EKNH6bxI0JeJPklldkVn/e7uHvq/5fae2m/
rgy5irOi9n9IvlbyerWP1zy/auxvKo+pnqn/p1F/SO3rwt99XPLDki/WuEtK
/gaXcGc133q+tdrH1NqfOTH4gWPxJSTXl7wQm4kuzo3fwfJ71hnzg/2P1W/t
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
h4mBvIRvnZlbGBvydhr/c+L7843kYZm5jalxnsBUxHrQueje3QvHj4gtbciH
UXkn7C32knwSYsnElJsntodrEq+BtYCZwE7EEFfF98dXh/P7KO4z3C3fpDr3
fe0W+mfz3PoV7vM1yRuFfmom+VXJv4Z/tjLxnVkQ5wlsgI5fHeexSer95Lyg
//ZI/U3r5daPcFZgvPq59Xtd6u9H7hDnD2wCh7su8/f5JbE/SfwRfQ9X+7bk
/oXtBdiR9R1aeL9/S4xB12cRc0zNoRCLxN7AS8JP9ilsj7ZMbc+IJ/AM4pec
CZ4NnoFLZj2siz7YkiRsGe/I3djADcfdY25+W5/47qBLHguZNXG3OBOsFX94
Qtn+Kbkhu4Ytxd7B/7In2B5sIHuFPds07E/vwvqvQ2LOEO6Qb8TeY1P4dvDh
K0v+3nx3vjG6Ah3Nt8d+b5z6fHyb+RvxfNbBt+tbGN9hk7BN32Ve21+B7+GY
4JqI8RLL/TPzXd1Hv7VLzdcRByIetH/wveSpEbPZt7D96Sa5r+RTMvP9Jybm
/K7KHI+4OvjDWzLzj9dIvqzkWAt8/lWJc+I6FraPPRLHC87IzEeeEPNfEvax
a2IMA5aBL7w5nkesEn76qJiPXFn4S/L2yN+7NHO8om9i+4Qtg98mD5F8xAsz
85HEoYhH3R72u2PieMbRmfnUvyeOd2A/8SfgFuFvBxaOV1yu9qNKjl0RLxmd
OH5BbJUYM7pyr/+nH1uHPTuqsH7rFJh8q9w+Hr4uPi++X4Pcuq99fB/0MXEH
OP7BhfVx2/DHBhX2h3qGP5Pl5hjhGuEfdwl7SqyJnLNjC8dnTk7Mz7YtHF86
VfIZkq/JHI86K7F9JjeVeNS5iXOU2xe2d/Aw8DFvZY7vEAcjHnZjZo4JrgnO
G/8K/LgiOIf5me3HIvRn6vjGL5l92XrBD3HGwQ74rJx98MfssvEB3AB4bFb4
/00L55iAT/D/iV2Sn4OvuCrs2cTcuXNwNOQbDgs+hxw68hfhc4gFk2NIriH4
7OWyfe56mfHbH4GPGoU/RZ4y+cr9MuO/l/DNq52rA/6bFjmN2we+Wib5m2rn
+mAvFv/PRmTGc+9L/l3tO6n/s7lz8+CEyIcDj3yo9q1KzhUET60IvLhVZn5g
ZDx/fcX5XsTWybkj925W6tz1rsEhkkMOF0pMnNj4eYX54fnBN45P3bdbcEzk
kJyWmv8mtwQO9tzgyM7KnfNwYWrOl1wIcmjuTZ3PRm4N+X49VJ8UfBjzw1/t
FpwS62A9bYNPYr3wneTUkVc6JvdaZgdfxveDf4KHIvfg6tzPui/4OHJ6OwX3
TS4e+ffkhpIjSr7o6YXXPiz4Ovi+XjWO//Mb+BKcCF5sVJiPGR14/bvA68+V
HVP/q2K8t7Zs/qOuMB78Gl4Bm1AYL/4YnMIOmX0GfAfyU8Dz4M/vI4bbEnyR
GVt+y5kBZ2bGkutCBj8XiXN6yUWdHngZPmCXwvi3fuL4FLkxG4Utnxl3DJ8D
7FaV2hehnfuHP4JfAn8zNDiSD4Nvu7ds/oRYe4vMWOHLwKPg840T8xO1mfFy
dayP3B04RLhE8lmvzY03tk7MT5HPwP8A7JEYz5DrD99BHjD5wNtk5jcmls0h
wSXBb0yW/Fm1cz3hNybF/WpcmN+YEveJXDjw95q4z+QGwxc+WDa/RO4DfMaS
4E+I5Y/OHPv6d+J4FvE8/iehoX5rXTg+WEkc8yPXH76zdeL/aeB/KcBve0tu
hv3PHN/k/baX3CNzfJQ8cXzIzpnjoy0l55I7ZI5Xbg+XLblNZn6NWAf5SnsU
5ljhWuEr9izs/76TmBMn/4ScoCGpc5LIFQLPwOvD7x9UOH8BW0iO/sjEMXlk
dDi6HE4JXYNOQjeRg3BWyTYAW7AhBlyyj4CvQMwf241PgG8Ax8NZQEehq+A4
uBufl819rAquDH4FnoU7wF3gm/PtiYGy1mGJY6MX6u8hJcd8yVFgPNwOfAq8
yvmJ10f8kzjoBh+82joWXTsisCAxkwcS9wcb9493OiawOPFu4t7kWOCbYBOx
jbQTSyVeStyUeOiExHiUXCfik08mzqkZk5nzg5vFBmAL4PjQzdiUCaE7ONvY
hxfLjrfelTjfo0vhcYxfEe3kUID3sdnYbuLB48O/6qH+PwUXh/5Aj8BhNYw6
ugWOirOEDkIXEbMkt40cTmKZcFQ/VFuHocteyBxrJf+X/DRyTIjd4uPh68Fx
cfbQcei66zPHsu8EMyeOGRPL5p14N3I4WCs+IL7gzPAdiOnMUn1i4lgw8WXi
zMMTf8uz4gyA+dlr3pl3B39vyC9MHNseH+t9NHFsnJg52P6RxLF05gf7gvmI
K/OtyPUjh29yYjwMvn4xMVdA7Jy1sCbyj4jR4yvdljh2/1T4yufFeGLc+Mr4
0PjSxMRppx+xcvA7WHVDbK3O/AW5l28kjmUTc9/w/yGJfVli3KyPdXK2yMnA
18CHxZeFA8I3xifHNz8ocewQfgmeqXPis8yZhmfi/pDfc4LKRYk5Ee7DfYlj
73BUcEv45PjmcFRwOT0Tc1cPhm9HztPsxBwXWAaf+Z14PneJOwXvxH3jWcfH
M/h/I85a7+AjWB+5IvBl+yf+fyHej/8B+1ti/gjffUDiXJrhobuIUZKXRM4R
XFK/xLlI5As8rfoVJeeKkWPAt8HHx9e/LzO3MzTO5y8RX5pTNtcOv8NZ5wxN
BY+qvmPJ+hs9Dl+1T9TR7fMiNgKHTBygV2bdjo7HlpFjwlh0OLqcfJZnE/MP
5KYtDG6dnLP/lv3/b+SitGUPEnPa+LZvlh1raBa2hDXtmJh/g1vDZmA7WC/r
25eSmFsn1oAO4P/n4O/g62oT57rAAfI8fFh8WfiwtxKfSXJ1fyk79oG/gs4A
A4GFDk/MLZLTQ/4tNgxbBn/2UmIOjlxE+Mw2sR/YPvidpdH+WmZOH9+kJjHX
/2fcKe7jgYU5fmwhPgW+BetBfyUqv5Z9B7mLcDSdC9uIYWEDuhY+0/fFmb83
c0wFfYvexXebGtw+Noj88x0K+1dgCLAEMR58t1kR+0G/spfsKXEcvgdrKcc3
3jjOD/E1cnuJH62udkyEOA78KLFPfAh8if8Dh8cn3w==
            "]], 
           Polygon[CompressedData["
1:eJwtl2V0FkcYhTeQoPlCcLJfgQBfEoK7U6B4i7tTIEAS3AlSgru2uAd3l1Kc
FinSU6BAS5DSgwYvUCRAn3tmfjzn7L37vjOz45unc58mvVM4jnMCAiCv6zjB
GFcDHecKBKHjvY5TJqXjLA5ynGUQ43OcDyGOc9/PcXYSswdy4g0kLj9x0cR0
h67oXpAPrwO6PTRH16XMYh7HKQ65qasE+jHs5/kW3k34DZ0GXlHHUco/Arls
HRGUN4WypkM3vJTEPSNuMzGbIARvgI3rpnZAZ/Q91UPZSXCYul6jM8Fncg+T
dwhSoIcQW5DcgeQNgG8pz8FPIu44Mb9AKF4qvBd4u9G74Au8DHjJtl92QDL9
1Jfy4ihnMJSl3DHoF/iJNncffEZHk78oyPSz+nsUcWkp7wzvT4Ifbc6Gzkvc
WfRpeEMZgWoHHOT9fb7tHlxH5wB/vD+Iuwz5yHuK9yPe38TchkvoUq4ZB41H
CaiHHkzdBWhDX9rSBzqSmxXfIS6Jsp5CfrwwvIx4/uSlhsJ4wbYPrhNzE8Lx
JlFeJcrbRVl7oRdeT7y8eO3QbaEJeg7UxDuLPgfr0R/pm0eUt5yylsEjdAR1
ZNH3ou9BdvSnEDNGK9Er1EZ0Ic0Pj2mf2pmPuPSu6Tf13ynIQ0xuOBFo5prm
XDrXrIUM5CRrfKAgMS5eAN6f6Gvgw2tAG1vT1lYQSttj0ZltX2m+HIMA9F3a
s4jnhYFm7WgN9SE2jJzO5HaCNmivrSMFbQ6AcHRliMQLRmeAguiH5F+lnFWU
txpyqH2wheet6hfevSOmALHZyM1BnldjTEwuvHR4T4h7DBF27n7wM2v/Lwjz
mXyVMx89T+OJDrW52SgrBIq5Zq5qzvbnG/pBD3Rx/FzEZVLfQ1Gfmavq+xfq
Z8iNzm/HUt+WWeURl9qurRvE3IYs6BB4wPNDO0baH7QuH9s+SICXIWZdPvcz
Y5QIGdGFlE8dn9AfoYDP7Gtaj1qXg6A3+r3d1zRGC+AOeih+IeKGEjNE40Tu
dLztPO+AYrwbgfa39W4nbxt4iVuF35z3x4g7qrWEd4S4i1p7MJE2bXLNutb6
fqZvgEjiiuJ58SKJKwBV0d+DNuyR6BFQibjFeHF4w9HDYBJ6ol1v2icnwzCv
aaPaOgk9EaLInUhsFLlNyGsMA9DzYQDebPQs1UvcTLwYvJnoOVANrwieixeB
zq+2oKdQRxXqWEj5C3QOEDfZ1qH2fQeV8dbhjcE7g/4VdqG74k8NMu1TO0dq
P8DvRVwcMUOhos/Mq5x4hdFFoCY6j9Y1novOCSXR32kOUs4eytsPs9Htya/L
cx14QnwYXg1ii+iZPJ9yFQM/8XwQRvFuFTEToCPPc/EWCPR46/VE94Dy5EXi
ZcXLgs6uc05rEm+S9mL0FTiJHg7N8WLRvaCC5pXt527orqobfQAu6EyE8bzb
gC4P4R7T9xqDwiqPbynK947j28bqzKO8sfjteR9FXBcoizcarw3eaPQ4mKG+
gtZ4zdBNoRRxq13z7eqDI/A13hSNE94o9Bj4Eq80tPSYXJURb+dfRdqyjXbs
hJ7ELMVfQ8xaj5nDmsvxtl7N53iY6przUetyOXkJEEvuIPxGxLVQHVAGL86u
y5XErIYJXrNWdXYvRa9QP6Cjya1Jbivy2kIcehF+Q+I2EbNRawQ9Dr8DcdHE
dIdy1LEcbwPPG6EP735AL4NhPK/H2wS1iFuBNxJvKnoKzEYPhWZ4NdE1NJ7o
LsSOV1shnPr7Ue88/P7ETSdmGlQhZhveaY9ZH1ona9H9oCG6EVTH66xzWnPI
Y9av1pjW2kK7fg/gHVLb0TM1z6lvC/Vu1v7sM2Wq7ARiVqpMzQ3ilgSZ/lM/
6i401zXfrj7YAgnofTAHb7fWLqzRXkzsebz/0G/gCV5fyrxAWed1xqt+3Wng
EnHl8CrKJ2YcXgXdjdCjtR/rLgnPiWuArg8diOuEl93uxcOhP/qT+oq4jOhg
aOwzdzvd8TKgM+lugech9ipeLXRtcL1mXjXGq6K5DO3Ux8Sm4316OMS7f/Gy
614SZHJVRiA6hf3eULx80MJnvAt4HyjrPTwnNwHvNO/PBJkx0FgEQyJxZfBK
Q2ty0+BdxCule6LuAjqT8a7rjowurjuG9l1IS9mpPOZ80DnxDd4x3WthMt5W
vPUwluezeOdgL/qV7RfdgR/BP6650/jbs9FPeyD6LaShvrQ643h3Fx1BWxqr
L+GGznX0ZtecYTrLLsMJ7cX4SXg1iKsO7WhbZq/JUW5TzS30ZztuFdCVISPe
NLxozW3K6qQzzjXfom+6ir6m8wL9EU7hecgLhEY+MyYam7zoPPrXwJuBV40+
P4H+WfMaPdDuJZV1Zmk/QS+xZ+hq9DqdKeSuJLYZuUfIO6z7gc+c1frevcTs
gdq6I+Edx3uHfgv1lGv3A62PfVAHr7/mFl5F7fXQHF1DdwSPqVf16yyfBbHa
H/HmwVfaY/FC8Upqb9YegB4CTfGqK0b9he4JddQujzlbdMYMs+eMvFoQ45rz
PNaePTHaY3TX0D8SXjG+tSikQ6eHK3i50DmhGW15Sewnj5njmuspvWaNaK08
xHsAt9AN9N9EzkfNC60JvABif+c5NX4qeIP33jXvFZcM9cnLQtwdu7Zyg5/X
xB234xsG/l5TpnLD0ZGQWnMIqto713FYqG8g7o7H/Pfo/+cZOknrAf0aNuMl
uuZb9E0+8iKgJW1pqvYEmf1F81XzVvu29u8ovC7am9D/A6mhC8c=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
NPwYzb3I/xKUBf/qu7DXHxX5H4As8v8n0m3JM18q2H9sDB+QOQbQ/xVFwTcr
juzbq/0qyHOJ/fTnMvPxwX9TPKC44B+wcmJ9nXMpNlQbL+g/kMxx6ZpS+3jH
yW/KnFsaGOaQxqcVdX+W/575fxSdlTQu9pljk2KfFSrmXQ/+qNgD/m2pzyWb
wr8J55It4D8EnTeUdy61fyk/U/d+yjtXvj5vLv//Z3B2qWPnFXpO5v8bdEY8
P+/zR31X9adz6JP0dT2n1GtfObo09XllI+SzSr1+tG60npQT7soc/JO2B4YY
W/+iyHfRvi9fRj7A0eD01Oebyu8v1Rlm7PWls7kusdeU2nojdv5QOeM3g1z3
y1KP7aFg59j5DcX8ZwYbVSfIh4e6ZcE2yt6fGGyg1pTmyWchNlfsIx9S3++v
vOOsP/OOuf4An9bcKHPO8XnqbkPWv9jxuWIxxYy7wGuCbdeetSPv+Ej1t4dz
OOV+tXbaI19c6mcp1tibd5vqj/IUqquzzu15x+/CJzPH+1o7xYnPSNSOzkxW
KycCrgHzkc9QtAarltmmKI8kuyE7o3y48k3KO3VOfS1579Q58I1cH0i9TbF1
dF2v4DzBI5ltkvbHr8L8lq3UfF+bd8yjPtQus682u+CciOah7NLGvG2F/oWK
6d8nIT5Ny2wfB9CHFpnXtuKvJXnPx8V5x+QaZ6210hDLHAoeTJlT7BhVsaRk
zWjj8Mgx8mFgGjkmElcso/O4Q0IMK2yC/ouZbZByQW0KjnFbZY7rFAvov6AT
QtwnuyG7JFuhuLp+Zlum3JFyGrIZzyLbBw4qdmy/MOSvlKPZUmr5P+CyvNey
clhtij33egXUtc6MV5U65/N7qXlrrVnNzcxrQ+cvi8I81Fgp/7MCfJj7O+Dv
aD6DC0vd5iZwZ/gHQFz9Ub7toczfWjZF/z8oR6R/IdSW2mkHXwTOyvn8Wn6G
8qLa96qU2a+TjzxaexrX02PnUbX/1kBepcR7sPZBxQfDQn5YZ44/J87bL0/s
K0r30DLnhZUfVu5Y8YPsiebVfcjuz/l8rlLY399M3c5N2t+Vrypx3JIDZyqW
Q74osQ+vuGx86hz7xfIJwAf4hjOK/c9bXWTX5/zPh86CH5C/AFYo8TmR2tTz
rw590LmR5JrDOiNIlFtlPE+Szcg5n59S7sn5nnIs8q1ao9M9th8in3lYbD9k
aOzzR7373MS59CrIZmX2qQ6l/2PByshuzPme8huDwH/QeSj4KvLlpv0/f6dm
mc/PtPbLx/6XrBz4fuw4Qs9Vjli6j6X2u3QW9rp8ycT5+UnyZ4OvrrNCrRf5
DMqnfpF4XOYljttuhZfE7o98m8dTP0u+lc6cpH9NzmcNV4c+67k6u1dO+3Pt
xZG/hfq5I/K/TzpjUB5IZx9PyAYVfNbxtdY+evW1F4C/Jj73+Bl5Uewcu/5z
k77+WxuUOL7RP2n7wKNjz5MyxYeUS+G1Yp+5SEf/zt0J3kF5lnJE7PfVs3T+
orMSnVcsDXkq5avENQ4zEp8HVUf3m8zjInn10E/ll5Rn2pM5xtAZ3MDEZzSK
AY+MPQ911qK9RvPkrtRjoGfdkrPPWTnY812Rz03Un/UhHvkt8dnNTuVidEaD
XgH9Sam51suQ1GcrNTUXM7+v3vW5sCYeDutCa0rXE5Ujij0mGqsDKbfnXH9r
5HOibeDcvNu4Lcj1T9RmcGPkNbQlcp/1P9jO0Ge1+U3i7655ojMqnbXp+8yj
b79HPh9X3WXBhvyYOCeh76jvqf8DZGc2Rf4XSzhFdRPPE+UxBuub5Lx+NLe/
yDmW1BnprGDrJNN5umLOMQX/p1Qp9Vmn/qmoH/vs6UuwYpnPd76Wj17meqo/
iTJN8zFnPZ1H94c3BCfFPn//PHCdYU2O/SydkW6lzwsTf+/p4Lk8e0zO/xGJ
q583g6Njx6o6g1+a+TxYOaupsc+2dKals1idyeo/EMXUOgfem/nMSO+xJbP9
1pnXV7HPppVP0NnXPN3P+dxZ56+Kx3VOrHPtz8DiMp+pK4cgf0n/TSlG0xnd
2Nh2Q3o6L9Z7/x7eS2fWK5UHi30G/WHsWEh2Q+Ooc+SeOf+bNT52+xNjx/OK
6+/Xd4t9xiS5/meYAFYo85my2isq87vLt9T/C+qP/jGQXr3QT8WUzWL7mfrf
SWflS+HvxT671L+O72sdcT075/z7o8G+qQ/vhli0J3i51mjOZ7p9Y38jtXN3
6PNl4L2pv4vOHj9OfIaif5Ck85PWW+p/kCT/MHF+QM+9NfX/pGpfz1E7ynPv
0zla5n8Kla9+IfYZ9/Ox55/mmNo9P7WfrP9DpgTbrrUjO6/1rX8e9c+D6m3O
/M+x9gvliFR3Uuj/3DCvNb//D8shMVs=
            "]], 
           Polygon[CompressedData["
1:eJwtm3n8VtMWxn+8b1R4z8mc9xxDDr9wudc83WueuYbM15wh8zymSGVqRJOU
BtGgUKbSbEgS0SgpkRIVSSoU7vP1rD/257efd+8z773Ws561frs0vaXJzRvX
1NQMKtXUlPW3nNfUPK7O9WlNzfLamppr9PdZ4T5q16n/TbWmpqPmflGpqblC
442SmpqJwm+r7ar+21lNTRPN3UxzP9B4A+GRGttFY/cL/yB8m8YP1PjnwtsL
D4tjWwhvl/t6XPd74S91vfYav1vtffV/1fzmGr9Y499q/DvhG4RPFf5auBCe
qrm5znef8ELhazR+sMbnCY8W/q/wbxp/V/gC/d5T+Bm1/6m/TNfoouMf4Bmr
fj7ub6jaTur/ot96qt9WbaX6w4qamtY69mzeDfej357UWAu12eo/p/GDNb42
rvejrn+78L81/wvh5zV+LC9e+H3hYRo/RniD5r8nPFfnaKNzPR3XK2nePzW+
TxwzSvNPi/O/o/mTNedOzX1cbVLV46dq/HK1ierX1/vtpP4DOnax5m8h/JTw
tTx7rb873/+x+N4bqZ2u/hlqG6u/reZ3Vr+1+qs0fwPPqGv9qvVwY63Pw/m6
qN2gfkXtbPXPUUvUn6B7OEv9eupP1vyfhO8UPlp4gfA64euEjxX+UvgY/W3J
/cZv9+t9Ddf16ut579D495p/o8aaxPs/R3/vE75X7SyeRW2Q+oPV2qm/t9pV
6l+p9g/1x2R+vj91vkk6/jz9drPwTfFNWR8Pq99WrZX6h+r531S/v9pu6m/Q
8Q+qf6vGfojjWQ9t1KbrneyjOcPV76W2tfrbaf5Y3f+But6dmv+68ImsZ7VP
1P84c5/fhmd+ft7HtWpHqp/ouMk6/gO1Bur/lfn+WLtLdL7xwkfGu/5Q+DXh
k4QvURupfh3dQ3v1T9L4Qo2vzfy+zhWeI1xXeIzOXVfnvl24JDxYeCvhu4XX
Z/4WN2r+CuFVmdfKf2I9s397C49Qq6q/NvbLxjr+NvY771RjF6o1VL+vjj9Q
/R+xI7U+L+dvGetngcavVn9/9edqfJrO11zn66w2o+r1eZjGD41vyHp+Uv1H
9ftqzd9duJtwJ+E1wpvH+FXC3wlvE/fbVHhprJ+OZe8R3smDaj3Uf5o9x95L
vRZ45/uq30jHv6F+P7VM/Xczr/fNNTal1uuPvcCeeCz2A9/nCLUtwp520rPc
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
sauF983MFc+J7wG/ejpsaOfC+gVc7ejEWhfxO7E+NgJb8VhwIWoQyNGgMcHV
4Axwh0MiNqFm6YrE+gp6CDERsdGjhXMtcES4IvyAWgZy7F01dlbmfCLf6KbM
36uM/SkZw2c6BZ/oWLgGpWvwjTuC3/YM/9Aq1hP5P/gFPOOozLlMODJcOYv1
uXtiLYt4YGTw/W6FNcBJsdaILYnR4fpweLg875R3iz51ofrPhrZG/EocCx9q
kTjHfX7wJ/wU/uryzBoJsTIxE7ETx6O9owf0Vn9Qau2a+Glgar4xSsfnwo9k
Hmcvk08hr0J9Gb4I+zMis8YHdxqZWvuDv1CL92/sr8a3zhwrEhMTG4/LXPtH
TpN6ltMy58bJ0TXNzFfGau5+wr0yawjEVthgbDF7jr0HP28afK9t4hwyuWQ0
AWIvYihiKTRY1jMxOrE6/P32xGuAtYAGiBZIDvM89S8Lbv+F2uWJ45t7E+tt
1P6gub5UckxLbMt+of5uTFyDnCLrlvULH0XDoxaAmJrY+uhYH9zvfzPvSfbm
ksCDMnOlpYnrY+C/rRPn7C/OrCETexGDE4ujaaJt/hHrA/59X+zPCzKvR3L9
HH9KxEfk0tE3T83M2Tn2u3j+GrWBJccExAbUbxDbkeN8PfH+JH/KPWNXXoln
Zc8Sx8xLXEtKTekX6i+JejQ0B7QHbF4Rc7GFN8b3JEbCts2ruB64Q8k1Bdgk
uD8x4qAYp96AGgdqhrtm9p1wGrgNdSPkXsnBUu8yP7gzNSp1Ute7wsWOUyur
PzdsA/c0O+5/h7JtPrx4bvhO/AN+ApuJrSSmGRLrGa6+Sep6pa+ivnhu1EP8
WHVsRsxE7DRCx9Up2+bgU9ZVrZ3US1x/uoX+9hbuVXJNKrFaj5Ljt98qrtdk
PVFjcqj6m2TWiojxiPWog8DX4HOo//ijGrFkxbHhZonXKmuWGhaO4/hhcX72
NHsbDgGXWF319bkPYkdsArEaMQm2gvWC1rVp4vpO/Cf27H21g2N98G55x9jh
Lqzhsjn28Lgf6mlYc9SIsj/YC8TUxNbUF3E9aogWJLYJcBViGmwFGt/nZWs+
aD8DM9uebxLXh1HvuE98S2IdbCSxKTFkz9g/2FY0gSfC3rIfuiX2beQEqAUh
h0+uYHHF/OLJ2CN3JvYdPxEPJ7Yn7KWrEuca8BnsxS6JfQk+A+6NRoIv6ZW4
Ngv/ip9lfbD2WIOvJr4e72ZQcBpsALExMTG2AZvH3ibmxRZiT7Atj4Tvx57x
Lfgm6Bi9wjfgj/HL+HD2NzF431h/cB84UCVxbgougA2lXpN4iNwK/qZlYnuM
7UbjgRs9J3xI2TEiseL8quM14ja0pTaZtRBiVmLX1pm1IWJWYldyLvPiXtFe
BmTef+xNYtOlOs+zJetTxH/wO2qbv05cH7i06lpeNE20zZMyaz9oOmg7+JsV
gdGGvg2ti3OmiW08uZp7wvZT3wFepdY+sU3/mxuErce+k6tZHvVirAd8B8+A
ToSPWRl9fA81t9TZsyZZm/cW1mvRWNFa4et/JK4voZYcLoy2D18el1ofosaL
/b1R5hwdXBiODdfGBqypWF/FNowJrRvOQF6OPfxHxTXB7O3REassjfOjp3M9
rgsXbxb5iSmpc4UzQ1ulxnZ9avvO+6aG+lP1f0+d6yAnOoS4MeqP+Z+Dz9Sf
rt8+K1vzJ4fwUdW1yp3ieGJIYsl5qXNP5BTIRc5NnWsgp4n2S0xFbDW2cCxC
DEIscnXkA4ixibXXhn19WO3n0Lu/0vM/UfJaoV4Y+zFXbVbqGgzyRcTExMbz
qj6Wc6yp2l5jmx8JjI9cVLENxBaSbyLXvSZiV/Q6as1YI+ur9oFfVvzOloRe
91fo79hqbCh2cGCcj5wp34fvROyE3s5aYc0017N3yK0lEHMTe/NMPNv9Jdez
Xx8+AZ95d2EOVtLxb5XMzchJ8b3WRaw/VcfcW7IPpn6c+gBy9WgYaBn4KPwS
74B30Sh1rRH1H9SBgKn/I///d81W8MWdU9cGkM8mt75n6tz/zKr/NwZ9cWHV
Gib+8sHA5ODJzaNxoHUcmzlXDgeh3gyOfW5ijgPXIZamvor4emXiWBstbI/A
1DQQC6LBo8XjYy5MzMnwPd0yz+c4YvW3go+hYaHloYdTG/53ziWzTZtVcU08
tg49ndp4agy/rrqmAK0GzQjt6JOqvw3fiP/n+YCcS8nH8/9IxKzYeez97YXP
yRhz+P+bD6v+3yU4xpSq+QZc6Z7A09Valuyj+H8j9l/rkn04+x1OAq/iGI7l
/yfgQsfGN6bej/fzPzhT6noSakXS1P//Mavqb8M3WlQ1v6EWtFVg8iNfRA3q
91XnDNFu0ATQBtC00Lb2S11LQn0qWhkaGloaeja1tujPd+r5P6/6f6N6xv6l
3oLai23VZuiYoan3Lnu4W2ofMSuxD8J3dMisfU1JrF9SP0OtD5oP2g/6Cf/r
hMbZv3DND7kSNCC0INbA6sT6KmsDnzUtcbyOL6Mmh9w1ORZyLfi8T+N8+EI4
6TuJOQ9clRofank6p679gQONT1wTDzf6NbX9IB9LXrZL6v8V6RHXeDNzrQV7
bGxmn/lhYp+KL0Xvo1Yb/vuE8JuFa9fJcZHrapm6VqZjvAPqadBa26SuXUKv
rZ+6hotarnfj/fA/YX//r1vu3Co5J3JP6En8bxma9JDM9h2tcAXPq373zO/u
F7gunD+z9vRrYOwDtoIaEv6fqHvqWqZ343uyJrZMvQZZK7NiP50az8/z8D2p
saKucE7YC+6X/09Dj6UWlP+Bm5T5GRhjDvWbrGn+t4maKdY675vv+ZLa+an/
X4f/vWodawINmdwhOUW05RERc8DhehSuryb3A0eDq8FJ+L8DNCi4Cnrf8sQ2
hVpQ8svUc6FJok3ir6kdoT6GOhk4LP/rcHjZ3JYaQ3z10tAe4ehLEnMguDu1
J9QCUjNIfS4xJP9rAScmtoTz3Jg45oYLUdODNovGhtYG54B7YKOpNyIfRJxA
vNCiMIeeE98b/oK/51vzzfEhcCDq3olR4EbolcsiJutbOAZaVbHNwHaw3sn1
YyPwmWj+1Hqh8aL1oodSV8Safz5zjMX/hqAhEHtRA4GWjOaK9vp/fUXboA==

            "]], 
           Polygon[CompressedData["
1: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
MESi/weF6UTq
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
6avI3y5zvqotfRgHDkF/u2LP2HktceX9FPPeFcqPgh+ZOp+j/J5yXMqzKU/y
T6nj5c/CXFVcrFy68urDc5/ZPAp/RnmHxGv89tw5wb8p+17wgw9Hv0ZxeNE2
+WN4q6Lt6nr4YUX7wLfkPmt5WN8BniU+Wxmq8onPj+7OPRe/gt8X1upG+AT4
mYnX+wPwqxKP8xT4qMTrcafWYdF7zRj4CYnPqh7LvQa+T/2tles6Ad2y3L5L
H/o2RzYo8Z5+dG5/UXHrkXrH2PlA+aiKKauFfL5yXXnuGFkxr3LqylV2LTg2
bh5iW8W4ir+6hjEvjZ0XVcz5Jded4X+CjyVes7JHeqbye8rzfVzqPF+N3PlM
+bSKraW/CP4b+Cr33krszygG1PetFtpXXFgmf7vMORDlOp5CKsoHCFznPyND
7kLnBcPAialzKgPRf1/mHM5tQS+f8zFwj8RnVXsmPk/RGZzOAwuJz3GkV97j
N/pwXciZvFvwtXIdXxecT1EeSfkKnd1UTbwulDNRfkZnPTqH2i9w6ZT/+RR+
H/o39Tztxan7qZzKDbnzKjpX0vmS5prO+6qBjWUHI58pzgh7iubzb2U+T7uV
uvekzu1o/kv/LfyR1Lkb5XA0h6uFNnW+qLHVeebo3Gdw2pu0R+lsTuNzb+r8
lc7jJqU+H/3sf/jvYf/S+WYTrseG+at+qr86b9Uep3uvpj5PfCb1mWYbdOOU
M+G9ry04N6v1pJi6dWIRV7kLuTeyYNuqGPMSjQnYKdifLrHXk/aX0Ylja+07
YxPvKYNkE3LvQbfBn9I4g2WRr+8Ie5b2K+X5lYtQbmRsaGdc8A2awP9KvSdp
bxoY/AHtQb+mXt9HyGdLbJOvACfntqvXwx/KHcMrlpetmIyuWdjL+ife91Vu
ZOI9V/t0Il9eMYjijXLbatnsK8Oz9Iztqe39/TpvSl1+ZWouH+bL1Hut9lyN
hWIP7d3KRSiuUHwhO1MZPCzymet/Qt7mv+Cz4dvNSX2/4v+UaYZ+Mzg/9fm4
1qZ8nvN5zl3054LE/VGe9nKkSuQ9SWc12oM0FvNDuxvAg5Sjgt+X2HYeCD8L
fCd1nXmp31fjI99kWOJ97RbwpsTvIr41+DzyfVRXY7Ul9XhqLGuGdtX+2eB5
yMGR+y1f7k/e6/nUuR3N57nBZ1PZO3PnnJX7+gqck9mHfzbkIT7S+EfOvygP
0yfER99Sdwl1/5M45tL1T4nzML8mjneUexkQ/HbplofYV/5wBfCPxHHZ75p7
ieMLxb2KO/4FV1K+hHLjI1//krgPKq9YVzGv4jHFaP/VuObOKY3Qu2eOd5Uf
GBhQ14qvmnLvVvm0mfusfILqS98bfhx4UuZ6rRS7Kb6KHM8qhzMJvhXclrgd
cZVX3K34+lvG9pjI++afiWOW38BvZFcix5+fJ84PfAau1/yCH8RzLqP+YPjp
4K7EuSyVUXz6CbiId7wJ3ZDIMZXKT9Dayfyt9M12RI61dL9naEc5DcXYbUP7
0qtvil/+0h6CjIr8jB2Jx1BxdZfM8fGbud/j/8fys1LnhjeBPUIfLgGbpT6X
0T8wyt3cGPRdQvzYN4yr2roDuTiU0TiLS9c9c/vKMyv3pZyZxlk5tfWpY6Id
qf16rYsDkBn08dTI+ZErI+fizkWmJ44Bn0scJ84FXwkx+FmRrw9g/rSB78X9
SVyfA38PnJc4/7AQnIN01vpOnAPR2pwKvpH4OYpZHkpsP+XfK+ej+OXhxHmS
p8EXeO4T4AWRcyXKF00Bn1euLnEe4OnQnvqvWELxkfIkypfcnTjWkz25VnMu
9O3exP7tPeDExO8irnhEz5+WOw/cNXL8uyBxjDM/vLti6Fkak9S2cFbq/38U
J64C16SO1/SvzvgQa8l+6jxO/xLov4PHsHXDCj5r65n6PL0X2AWZXfD/J+I6
iz89dRmd3XcAe6f+P+EqcO9y58me4zkdc5/369+q80L+UOegyn29QJkXc+dQ
lEvRXiaufIvyQ8prKQeuXPhZ4Vlqf2bivVX1lQfrpPdKnPt6Wbrc+S7tj7pW
/k33X849x9Sm2lY/T4kcn8pvbBv5W2q+aT96Jtht2eS3wZWJc2srEufihLNp
c1Xos3JFqXJMwf7oHzP9Y9A1dX5ceXLl8+VjymdYDFaWLYbXy7w2VFe5Nj2r
e2hTZTTfDsncvvqvXNycYC/eyLym9oMvArsltl2XJl5bWmPVI8fqmgOK4TuG
tahn7R15L9PepxzCxdy/J8Qr2q+Ve9Ber5zE0+g7g5Uil+uD5JFzEZcl3jf1
3MXhHZckPg+QzVa+fQ3XPeBrE+cGhXNps6byU+ibZM7xaJ32i6wXL82cj1U+
X+cgsp2yoVfonROvL+UslMNXnlbx+zquewY7oLZ0hqK2lRdVv17LvUaHRj7n
WIh+texM5jhG/VR/deaiPFXVzOcF10Q+F1gbOS/3aWR7NTSs+brhm+ocYVHI
3SmHNz3sy/PBN7UXBL4w8LdC+Z2aG2BDpJvsY2b/XL7KptRzRe3rLEM5c+W+
HgFbh9xdm5BLnAO/K3MucXbQ6/8oncv3U/wWzlAaFR3zqXxbcBp1lsIfzcy3
wF/X+OeOsfXvx2EhD1kF3FrmswadOTThen7ks5JKRfsPyl8rD6t8rOLcdkWP
SXvwYGRe4A2Lfq760zj1Wb/+d32ZutvQz8vMl8v2Zj7P0nnQPcodUuflyOdA
92s9wGdmPpd5J3KuVf1ahyyIXOYN2eHM19LrbEw5W5WfIpugtRo519cqjG3r
8L76T60l4/Ei97ain5uZLwt1NSd2RZ4jH0Q+G1LOV/+qaexPzX2W8b5sV+Z/
1JTb0f8S+iftKp09UuYI+jM9co768tj/6ugfNOVklZvVuZ7yq3V1NpU7Byv/
Kis656mzkrrhfK0quDH3N9O30/URRY+DzuRKi84hVyv6bEX4fu48rPKxyhnX
LHpMlBPNeO6L8DGZc7aaP8eF3KlwW+4yystuzZ2PzeFbQpuzw/w8uuh30b39
Q55Z+WY9a0bkXG2t8Fyd++jcRv+K9AQ7x87PXBI796XYqxntfyFbRfnG1OsW
ztpURvkV+Tl7Fj22OkvckHtMx4QcmnLs+o4nF50bL4CrlYMpty+ncwH1U/lh
+Xuvh711Xeq48nSefYdy+OC+ka/3DmOo91I7yluvzf0/if5VOTf199WZvv6P
VD5fz9+Re94sDfPoeHRzw3s1CTZT51xbEp9v6rxE43dXsI8bEp/jbJRvRblB
kf1Scdm3Wpn9yjHBPiqvrrMPvbNsq+znkDBeGreKRZ/l6bk6g9YZgXSrcp9H
nAL/KHdbsrlqu2tm//wc2aLgu8qHVd9kM79KvNY2wWdlPse7OfRZ5dWH2pn/
z7yGsWlB++dljh16hbWjfz71P9KZXPePfObbPHA9V+V1Zrsw93+h+n9Ja0w+
qfZc7YWqK9++M7gxcn+U69e/oMqv6tkNcuek9K9dw9C+nqNz4I2hvM6O9S3O
ynxGvAH+kvpTtO3SGP0fRXrSqg==
            "]], 
           Polygon[CompressedData["
1:eJwtm3n8VcP/xz+We+1yzrXrniPdD9cWFYUoLUobyVJKUhGRssu+lCWiKFrs
S8latrJEIkqLJVqpVMi+bz/r7/X8vt5/zOPO68ycOXPmzLzfr/dy6/Ud3HXQ
hjU1NY9sVFOzsX5fr9bUbFuqqbm7WFNzQV5TM1v4+7Sm5kbhnsKnqVyi+q0q
p+fuv7X6TxXeqbam5g3hr9T/EeEBap8j/JvwHcJnCb8q/LHwncLdhWcKrxIe
K3yS8CzhtcLjhfsJj1J5QfWGesb+JbevU/t1utZNbUcIX5ZovEJNzQFZTc35
wn8LfyJ8u3Bb4SuFLxbeTXihcKHk8c/V/a8Jf6LxxgmfIvyO8KYlv19/4QXC
GwnfInyq8Efqe43qV6usUL2Nrl2k+s0qPVTvqzJC9YsDn5y7PiLu76QyWvUl
uvflqtdjperX6lpXtZ2gMrToOTG3zTTn0zX3AXqHgSotde0s/Z6vaysqXr/V
qe85TvceLnya2i9T+/KK1+dy4WuFVwp3FL5Z+HrhWo09XXiu7u+j+7fR93tF
eJnwGOFjNV4b4fvV/2b130v9PxJurPWYovZc/TNdu0JtZ8f8zlX7r/pdrWvf
6XmXaYwH1Xff+H7sn5HCl6q0z73GrDV7qo/qb+n+n/X84cK9hFsJD9Z4F2i8
jzTem8LfqX2y2gfm3m/fpl7TM4RbC5+r/gPUv6y5batrx6vtfvV5TG0XqPyn
9mVq/6Hi/f1N6v2e6n0OUv9BRa9nK9Vv1hgr1HcT9dlcZZr6v6XfjmrfkrPA
/hf+QX0eUN8pwo8Jd1L75hrvfdWPUb2Lynuq/60+B6v+jOrPp14D1uI0lXaq
D9H9W+r6exrvWvV9Wvg54SN4nsbbW31OjfWi/4dqu0L1y1U+UH0XXTtR9amq
T1F5Sfd/rt+7dC3R/VOFnxLuLLyF8DPCLwi3Fd5K+ErhTPgXPX+inn9knHee
2Vr1q9ReX+01PEPtzYV7az2vU//thJ8SflztrdW+kfrvpdJP9SFxP/v3TPW/
Qf33UP8jcp/lc1QOVv1Ztb+k+5sJ1xHeRuVo1afFeh3P+ur+h3V/R93fQriP
8KXCu2TeHz/G/j0z9564vWiZxF5hf5yTeM/m8X7M7ZbYf+9y5rRPnxK+Xnge
+yX1+e0b78NaLNS1F9T2vMps1Tvo2o5q+1L124p+Jt9jrtp/1++9yAS1vy38
p/DjwufH/h6k+dyo+VQ1n0HIT+G5wt9U/L1Pi73zoto6qFyv9kvUvrP6H6b2
89R+g8pRqj+u9gfV90DhDXPvefb+4cKb1loe3RLfo63qj6r9HrUfIPy7xusl
/IrGn63xews/IfxQ6jO0fZzPH4TvES7VWiegG86P5yOz1qh9WNGy7EnhScJN
hAvC7YWHavxxGv8gjd9I+HDhrsI/l/U9hK8VHiJcUfsFql+p+lUqFyaWR3fr
9z7hz7Q+O6reQ/WeKjup/pHGaKV6ono99W2v31N4F5W2qn+gMXfSXDZWeVn1
c9BPur5E7dcJ/637T1L9EF1rSJvwscLthJsID1NpqPf5VNfGqP8MlU01Vlll
vuo/qX8X3k3991ffUmZZ3Uq4MftFeCP2Sjz/PZUd+FbscdUr6tdN/U9QOUr1
m3RPOz3vV+GnOV8q/6m+rfpPySzz0R3oUHTBzSpHIqt07TW1b6FytvrvqbH2
VNtA9CvrpGtXq+0W4c7qv5X6v8nYmv/JajtCfQ6s+j14n6NVmqp+gMqpqp8W
eLX6t1F9e9Xrq/+zGmN7jbVByIf3K9ZffGO+9VCVfVKvwUNqHy7cXHi9+owT
3lV4D/XtJPylxq4KdxHuI7xB5u/K922psk3i79+W+arsgBxS/wNCHv+pZ98g
fIjw58KTdf+Nws2Ei3r+S8J7Ce+t+zqr/Ws973P2ILpD13ZX2x2Zv3UjzhTf
Xe3tkDVqr+UsxvMKGu9F9a1N/O26xfz24X3121f4nYrv4V722Dcaa1/2k/Ag
4a11/26qd1S9g0o96qHLzlTppPpj6vOn6k1iPhXdv3PiOa3VeNcK76nrvwk/
or57VD0O481DngjvK3yi8B9lvyPv2gt9KLwb/C/xN11Z9hlKYk9+LPxt2Wu1
T7xbI/0OFj5H5UDquraDnv+z8K963lHCY0K+rRPuLDxS+C7hwzS/TsI3CY8U
XqP2vsLzhBcLn6v2fsLvCk8T7ivcR/gX4XnClwlfKFyj560RHi18Jnwysc6+
Al0rfFys/4bCZ8H3hN8V/krP6y08S/gt4dPVfrLwTOE3hfsJD4CvCr/DflT/
g4SPFr5GeEu1NxM+UbifcJ3Qh33hQXx/4d0z67rTda2/ynnIf/1+rWsTOJvC
64VnwKEyy3hkPXxhT53tA9BZiWXQr1r7w4R7xRlM1f9Q4R7CQ4XrCx8i3C32
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
A/wHZ4o=
            "]], 
           Polygon[CompressedData["
1:eJwt13ncllMex/G7Xag891OpeO676Clp0TZjlGTQRDPTGDUjJssURaaolIpC
2qiULGmjsgxaxlrMvGZIlhkqISJaKPtSUdoU79+c64/P63W+3/M75zrXdc75
nXM16nP1eYMq5nK5laiCyoVcrq9C65Jc7iSsaZzLNeTdzBtBX4+NvKq8frxT
6Y5Yy2vKm8ibTt+JrbwavEG8VnRL7C/L5Y7mXaZ8eUnqI/oqYrTyPbxZaEO3
wBTeA/SD6ECfjIUlyYu65vQ+fV6QPaMN3vDcM/jzeQvo+fiEVyV7twvo3sjT
27Xtnr1vOxyka2ZjPp++EO9p25I3lfcQ/TBOK6Rv1Yf3J7oXatHrxHZVPgtX
qDucdxKmKT/Kewxn0tXQRfkMDFVXm/43uudzuT9gX8TT9XGd8hhxN6MxfRQG
8zrQpyBHN8EE3hR6Gj42jrq84bw/0ufinWwux/J60OfhSPpETOaNokfiQ3GH
fIeLeKfRv8ZbvPLsGX3pPqiTvdt03u30VHwkbhNuVL4Jt6hrJKYj5mTjm4xm
9PGFVP//OGzWrpQ3hNefHoANvGN5N/CujG+K93kTirnc0qqeX5rLtUWxPJeb
xHuCV4eujfq8OqigXBH3qrtazDr9XewbX4TmvG/onfEuypfzLsNG+mHs9tyu
9Nl4mr4TH/Ga0M0wn26LO3hLjG0putFdsbgkeVHXmp6Lr5Uba9cUe73HfbEG
edXoqphGL8L+mDf6PLxEt8MM3j/09zi603vQ3piHibkWh/T3Be8a5cEoqNtA
P4tu9G+xRx9/pw+K7UR3wAHeYl7Ot7qBHolfaLuP9yM6KE/lTUElMTt4o5Sv
w+nqKhTTWo0125bXJtav/ofyVvL+Zbz/jL0UY8MK3nJ6GXrEvsKHvE9jn8a6
oetl6z72Vk+8q79Ctg5m0HejVSHll4HZev4z1oubxyvPpzmKuZpBl2TrKtZz
J1SiJ2E97wB9CDu0PSF83l30TGzjXc17XXkVnlF3aYwjPOW1kW/wqbjhvFd4
K+gX0JcegJeUV+JVdSMjl+IN5S2x5vGFtmN5a3nbIm/iy9hDvFW8g7HH4/vT
d2Ebrzp9GHaKm8z7gPdx7D+Mpt/kdy5J+Tly7GG8h7BLuYt2v8ETMb/ZPi8T
dyy+poeZz3nmdYeY7ciXp30T+2cLvRm96Qb8uvbV0XhE3WjebH1+pb+GYo6P
9WYcw3gv857X/39wCf0Dv5hPcRE/izeikL5RfKsX0Z+u5Rkvxx7AJZ5xvGeM
KabnxXMb4BgxOV5n3lxx98e34U3mtVDfEgvVjaIHYbf67/Ao7yZ6CGYpVxVX
HfW0nc5bzutKn42H6Wrownta2+WoIe5w3jm8++h5qMZbwHuV10m7U9GIN8S7
vOjdnvNez+J8+ipxd8ce1e599KBn8j8R90v6FDxCV8zOmRbaNcdq3+4z83QO
r0g3xGu8Z+JM0l9r7U7CA/RWcXUjV5ekMzLOyiX8s/JpHcR6eJD+Hq21ncy7
HZWNeWHkRfW/ojviR8+4JdYW73P9fYaveKvQTPnEOAfV7SlL6/zVbE9/EetK
zHTeZt5uehe+aZzmPeZ/D/0DJsQdAu9m3n5sF3cAJ+fTWGJMC8Tcn+XOeN92
2C/mDt6WeE/t9uJb3u1ZfqkVazneOfozxt68Y8Q0wOd09UI6s+PsPhNvi+vH
W85bF7kF19EHcIpvdau+JqGib5U3dz2z9TcHP4mpwJ+gPDGfzpY4Y+JcvTib
t0LknLKUeyMH9xDXE/+Nc6KQzqY4o3rjTfrLOKt5f6EvxGr6u2ze+tP9It/F
3sI45fGxB9VtpavEms6nPB75/GDkMGN+QLmNNdoe04ppH0VOj9w+HN+Kq847
mzebnhXnlL72FtIZEWfFiHhf32pbfL98GkuMKdZUJW3PVL6FNza+fXyDQtqr
Q+khsf/p8eKW8JobRysUPGM7vxWvr5g+sUcir4tbrbwm7knqjqKr4izlx3lP
4cjy9H7xnsvo51CrmM6zGPNC+iFU4R2R7d8X6ZWoRxdxEe8F+nnUjPfN7pix
j2pjC11H3Ip8aht9RC6o4Bl/FXeCmKZ4vXE6H+Obzo89ier6q8/rxVtML4p8
RT+WnaFx/zsXK+LcKqb3jPd9I+4cxfTt22c5Z0GsP14T9OG9Rv8PR3lGDd7v
eUvpJTicV5PXnfdk5H8cUZ72a+zb0rgTx/2Pvs0zNvA20RsxKvabtq9o29H8
dEBDbafylvGa0SegjHctby7v65hblJSnHDubt43eir5ZHo8cHLl4J/5GD8d9
vF309ygtT2tjaZafq2BEMeXyyOmV6UqoK+4S3q1Z2z24hj6aX600xUX89cV0
TsX58a2Yb3Al/Zl5ersknedxro+JNZnloTWRczE4cou48cpjS9L/QPwXjMnu
ApFzfsSt2f1leHanHo3jCuk+FGfAW3EXj5zTON374/5/FT0IH/CujRxbkp4b
z498eJsxPpmdKadhJj0Wi3mHvMNBDI3zJDs/asQ+iHNOf+OynF1C18Y9cbfK
vnNZzCPG0VPwFK8zfTrmFNP5GHN0TOxJHFue5ijuB/VD42b6RtQrTV7UxR3i
3tgfyk15TTCRHokFvBz9U4ynPN3/4v5yROy1mHdjnh97WkyX0rS+Yp3NEddI
/XH5lOMj1/+O/w69DjPEXUEfp89u2p2D1bxFvIFxtipvErcRvejB2bn/ceRN
XFpMZ2GciQW6DLuNZQD/LnHv0etjbxbTf12cFQPN0TUoo38G7Ak0Vw==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxNmgfUFEX2xT9BmDFgmh5RFL9uYORrchSQnHMOEiQqGclJEAEJKiKCAibA
hDkn1F1zzmHVXXNckKComEAE/r/rrT3nf868c2/VvK6urvjeq0pGTekzuVRR
UdGh0kVF/IqGxEVFZ2eKijqC+3JFRRfA/wSHgtOQ6cgB0uPBv8DDoqKiifAi
8CyeGQJvH5tPgZ8D/oHeGPjv4CDSe8Hi1Hy+ygTHxC6jEvmj4AfRSQK/EJ1Z
YCdkALwF2BnpCq8L1lYa3gH8jedGw38F+8TGipTTDz6Y/LbgCGQYvEvg+qZx
sXUmw0eC+3luXPj2NqS3gyelbgO1hdqoPvVdAtYD+xT4XrADOlPBjRmnJyN3
wM9TOyEPwieBa5Et8KvAC5BH4QvBeciz8AXgxciL8Esii/iloZzrVWfwBuo2
FmzHeyeAt5M/HpyJbILPAG9E5054P+p4O/wG+HqwP+m74TcFfj66XShnfmSd
ueAY5J+hTH3LUxoHkb/xoVD+IORmeG3wXfDJjJ8ZTLkTwHbqK40JeEuwDHrn
wQ8HR6m9kdlIadKLQ/7E2Pk9wTqkL4eXBUuF8aZxN5v/8mA16nw6uIL8FDwJ
WQAvH8qZpfYHa5GeA68JDo9dh8ngsWp3+NFqV+Rt+HXghDx9mEUPbFlwX89H
//jIY/sY8ARkWcb1ODqUc5TaJzYWqNtx4Gryc2D7gr9xbmgTfcvQ2PlV+b8u
+tUit4e+ZWDG7TYJ+THnNvkJjPhvTfjGC3i+GKyZ+jl9o9pV3zcwPNsdnd08
dwo6P4AjMk5neG4ufA+8LXVISNdCp5LGUMZplX8VfAVYg/RF8Oqa78hK+ACw
BFkf8lX/y0I7L+SZymBtyqwCLso4fRoyA14RbFMw1kDn1Mjz/RSNafIvhV9E
GU8n9Al98Sz4TsbjTGPsn7HH5CPgCr7hGM0R8Jdi+gP+W7H53rJFRR+BPyFH
aX0AR6J3OHwEOFzzO/B9Za1fTm1Huqrmcs7P/kH+f8DK1G0YeTtLzEujs438
leRVUfuDkxk3Q8L4aaX1hfwzwcv4tpfhK8HfeeY4eIEyxvBMGfho8HTSFTTO
0a8KP4+8H3nXZPVZxmnV7QT4RPAvypkG/oxOf8q9WvNdbcqzMTxLOdXhC9H5
HZ130T+M/K3gUPJKaU3TO4qNO8K7Ts243LfJL4J/C76P7KYd3ip2/vfw14vd
lj+WdVuUDlx6qdYW9QllzgOPzDhdijpVgx8HPky6MvwhcAlSHr4IXJZzP16k
7479LdUKfnY+eb9S5iwwq30EnIvkNQdyzj9Naws4A8nBp2pPQ6pn3BYrwpqs
dXUdZfYBWzAOe0deG9WGXXhfB/BM8ttHngvtwFZhDjYHz0Huh58Ldgpr/ib1
NdKCdGOe7ah1POOymiC3wpuBTZHrMtYbhfxDYwD8Luy72nvuoZwl5HVP/Q69
S+v+o7HXq7djzwXNi/fAx8A3kMeDiL+pduSZ5zIuaynyPHyZyuOZJ9T+4H2B
3wsuQxrwf33euwi8KeN9qiFyRcb/daJ9GisPnR5h39H+0ld7T1gfbiF9j9Yy
dHshI8lrHfRXhDneXf+Rbk5+58h7VjewZ9iP1DfS0Tpzeexy1IbXwofz332a
v9pDIn//QLARcq3mndo+Np6Rus5ak5fH7lP1l/qtK/ld1CfodI28/ih9NnIN
fIiQZ27R3oRut4Lr2Ez9W7DOav5/g/mwi7H/Gng7a9YS1oEnwH8i18KfAX/g
ub/Q/z6yiJcifxzlROhUhGeRIngOPJf8w+FHwT/WfgP/DPxUz/PsJ+AB7Tvk
H4fOyILzJlG3E0mXIv8IsDTr0Unww8FSeecflvd7/9K+h/47jLmGWofVb+R9
Db8L/Fl7Hvq/guUo6xfy96PzC+k92kfA0ZRTBp2j+f9H0mWzzh9D/gF0Dif/
Q6198PfBHbH5X7LH0DkEz6BzDnwf/BD53ajThZHHT9dgowyA94Pfq7ki+yL1
/v0veM/U9tPDshHgX/E9Z8BPhR8Red8fAr8V/o32qNS2xXjZmfBZke2llvCh
kfu6Vepxdh06panfbur2B7wsfDv501LzY/ne8uB/I/Otkb/lK3AKOk1VltZ8
nm2Teu3YoLFJfifya8XWeYs6H8f/RRor5P+uvSC1vTIj9nfvIv8+8CHkP/AH
tV6pL3lvV3Ae5cwBr+K5GQXnL6e8XuQNh/cAO4V9ah75beFj4B3yLqcPvCNY
Ju+xpzEzgXJOhldJ/GxH+GiN1bz7Wv1+HtITPgXdZepL/rsuNZ9L/npwjvY1
+GXwGUg/+AKwL7qz4P3A2aRHw5eAk9EfCJ8DnwofBJ8LPz9x/aeRt4d2eUbt
zbsGFtwew+Bfk/+J9v3YOn9qb+W5mzVe4Dep/WQbgwPR/xL+nWwt8HbyPoDf
FpnvhN+hOad9Cxyeetz+W+tE6vw/0DkIDip4bqrvfkZ2ZDzeHkP3W9kt4BPI
R/Ateh79n+D7ZPNErvNT2hMijzfxv+cbfDi6r0aeU2+AryOfw18DhxaMY6nP
K+D28C2vhHVGc/BH0tu0phW8Li2jDe8AS1LbuK3IXwGvRz9MIr8+6RronyB/
grHZGn6PbATSleBHgJvD3qo9/fawhtwF1uPZBmE9uVu+XcivorEEL5IfI7sH
Pg68Xs9oDwVvCPu4eKT9FF4FfJF0R/gr4KtI/cBL+O812YLU/QWwLvnPgluQ
M9XmYAve+4VsitRl3ihfVutBqL++o0zs954I7i2xXVI2dvl9M7bl9pXYRqmp
fi7xN8iWk726nPa8E7w4a349sg2dfuh8U+xvl633LXmL+e9q5CJkS9gvbk2c
p//WI0+FvUP7yJbw35OJbbYTqc+BYMvJdpJtem7OtqVs0e/4L4L/Wez3H2Bv
6isbjG++Oedv/JL/jteaVmzeh/yt1O3TYKPKVq1FnVeRv4v8ITnbkIND+QOF
5B9JmU/BG6G7Bt4u77nZGGmOfiXe1RDeFp7CL1ebwS/LOf8x8M8S23yy/Rbn
PLY0xtTOa0g3ha8Fr5JPA79S/R3bXi0du5614Hl47YL//4syc6RrZtyPcwte
67S2zKGeByPvs7fAF1PnTfB18P55r0trU69NM2V3aH+BXwAvpowYORIZT/5b
kefmfPiR6FTWXpx6zu/mvefCn4u8Fh0Ve0wWx26f5/TNqe12ffcfJbbby4f+
PR69ipq/YF3yS+Dl4If4L4UfG7js3z08m8guVPtRZuXYc+Ek2dGx21B9dEbB
XHV4HN12GT8ju13jX/NgQbDb5wX7WeNN9ndJwXb13mLzv/2kEvssp4S+kG8i
+3w3uK/Yc/zo2Fy+y+4S2+eq/0xwguYZfHzwg4Q/lPh7r4Efgo/Le18YC+5g
LB9CdiJ/ItuQrcgD2tsp536tr7zvw4zthA9I/xbsmUfCOqx1XPuF9tPf0Hk2
8tr4TLBPVMZQ2vDdsP6/E7kPtVY/H3mdfxQcgc6T4Fa1Ifh4ZBtGfE3ifW21
9kDqPT7rvXkGeAkyE1nLfyvAe8BWSFX4GeAA7bvwQXnvE9ov9D7ZRipf40q2
iPaIwdTlTo0vzffI5ar8S5G3I+8d7wVb8SNwYuq2UdxJ+9zd5H0FrgP/q7UU
/mrsca39RfvMG6SvBvvz7Bfkfal85Bry3sr4v6c0t8He6KwCXyH/irA3/ay6
8f+wgveucei8GPYm7VFvIgdDO/8n2DnaX2X3am9VvfU+1U3vVznaW7XHag99
SfZm6v1xeyjzZeSzjP97IbxL79wfee7KFn1e9gP5j8kfoa2nq93Au+iDC+Eb
wQ3I5fAHwNbIqfASrRXIRLW1dPNetxfmvc5MBDfKdwPPD+NWtotsmEsTxwgU
a1qVeGzPy/qZa0lPgq8AF+VtL6lM2UziWqMuR84O9tsk/psvuwt8hm94Tza2
fGX54OTdGNY27S8X6T1hXOm/pRL4Mv0fdP72XULdVoZ6ytaSzTUz2Jkz9E2U
Pxa+NPG36Ruvga/Muq1k8+lbFvDfzdThAnBR1mm123zwJvLnZP2M9NXO5wdb
UfVcmLWevkV9cUPi+TIbfqX2Q+Qy+H3gdO058FngVK3ToZ4X8d9QtWtq+3M0
/Hr4mLz7QunBefej9AbmXf4Q2cvIKPjZebf5NPCG1HGeqVmn1b/nZm3vqk3U
D5tS2+ELwvh5LvY86EP+y/D3NbZj+0h7wryQD7Vbdn5qH0rzRekdyHFZ+4vy
H4+H/xTy92fsh+wJPtcxiX2HL+TvUM62YEN+C1aW/Z61fyK/cid509HZFdY0
pWvxbDX+bwrWQBJ49cT5J8JPA2uG/DqyD5FG8O5gXaQ6vHniuqrOJ8OPyfrd
eq90ymvvTOzDHpZ1XZuEuklvFHXbG2zpLyP7qt9oDUCyWa9vByL7yPJd85RV
Dn4CeHxiH1m+sHzV3/l/Nt/4m/Z58vfK9keOUFvRT/si+557w3qgPV2+dJLY
Xx5PXU6CV4LXTuxTF2keU+bYgn3iWan9Pq3JX2u9jFwf+X7yf9VXM1P7y5ms
66RntdaVobxDkdtW5R4M/FD4LrWz2lv9KF/su8jjR+v247Ij1Dfkt0nMK2Tt
o+ncQH7ES8iNkdcE+TkbtL7DN4KbIseONgafQ898nHEMQW2rOMTHseOWL8Tu
F8UezuNbuue8/mtP2RW7TPngHwefS76X9hHtHdvAd5EX4E/HjrMrfnUtuBp5
Fb4mso782c/AT2P7Z4N41+bI8+WWyPnao+XH3Bry9b98N/0/GP2j8l6fjwab
qV3gfcBC4jFwSmIbTTrSlS3XIPR9HHhDpFOYC03ABsjp8OLEfnDNrNu9cdZj
t3LI038aN431PrBeYi6dXmAm7z6S33xE8J3Fla/4Sdm840CqZwlSjnTFMFar
Jv6mC1L/l2atWw+pr7mJVEocq6mQ2GdXefMUY088v1Qfcc3N8qFNZG80AvcH
O0r21ObEe8Lm1Hxq2Kdk4/dWP4JPIu1lL+Uc69bZ2cDYcRedu30Nbgw23gbw
6uCXXZezTSssovxrc/YRpLMOaZaxzfdlsEvlszVAvxe8PtgDPAfpiTSOXZ+G
8iUzroP8tD4Zp8VlA6uOR6XW11lhX43VnM9KPsm5LJV5LtJLPjzYWrYS/3WD
fwrelHPsWn5jc41v+V2pfZD18IMlrPE5x/DlL90vfyjj+PaW8I4ncrbP68DL
x7bDlZdVTAtsQ/4DOfvdd4CHp/a175N9nNqnvg1eOrWvrdi40rLha2fsR32e
cxvJ530wZ59IZcrvWA3uL7E/JZtc6UeRJhn7YnUKPvuQrS4uf+tAif2p2qHO
aoeWGfvLmwNXXEs+pfz9W4KPpm9Uu8i/VuxL3/NtzufFaruvwzj5Buyfs08x
QH5mseP5+4vN5Wtupw4fwn9lbO4Al+bs012s7y32GcpO8Kyc/QKVIx+2F/jf
Euv8TP57wmL7NTuCj6IyfylrVPqIjP2Lg8HHeBG97eDL4AvFniefgK8U26f+
InA98yrYI/jgPcFBGuMZ+8m95Y+WdZ2ko3l2Ts4+ucqR790/jOOmmkeUtYf8
fxWbyz/6Hnw9tLniHc/nPNZfAl/OOU4i/nSYp/Itmxc8rqqqT7XGkhcxfj7I
+Txd6Sax++FE8n8Gu2d85lgjdrylScGxyjfIOxadN0NfK/1uzjEfxY8vyTm2
o35ZnrP/rrM56XcOOqq/zsUU62xGme9pPUhdzw81DuBvqy0y/q+m5gm8Ymyf
U+NEsZQ7Q7xF/rjiSoovZUOsSfqaMx1ll8g2014aYpuV8l4vtW7+L47ZMegU
a8/QWgq2I11btp98ON5xFnnrqVubsPZrvR+s9VQ2Zurym2sPAYclLmOJ4seh
Dh0Sr9lau6XXPuSrjuJa59PE/7UI67vq1en/re8VQ71VZnvZcWBv2SWyrVPz
brJbZGeR1137Ud4+S51Qh5Pz3o+Uf0re+2MF8LbENvP1ieMcWvOXg/cntttv
SszXwh9P7EvIX1gS/Igpgd/If6vgDyYuczX8EfCWxH7KdeC9iW37GwK/Cv5Y
YntZdViDDAztL9tGvC18ROI2V5xZ8eZRoR3+10cj9bzKTuw3X02bXJL3OJFP
p3jchqzjc3rHlVm/828bKut33BXGs8Zbo7A/ttWembdtcDqYIi3Vl2B1pCu8
GlhXbQ2vA16Y2HdQHLWnxgS8oLhqwXFvxb/HJn5uOfWsnXff1ZLPV3AZl6aO
gTeT/6H9K+94eBOwad7tcCb4GXVuHPapBgXHaMuk5lonFQOTb/4w/E6wfvBr
zgAbIT0CV/lqh4bhWwbIHgInJ8bLNE81N7Kuk9qkC/x4sEXe8ZmW8p/yjnHo
rKFb8AvkUxyb93juBlbOe5xrPk4veG5Olf2St/2lMvN5+xdRKEdtPggckrid
eyb2N6oH3j74qjqj6JwP8yeUr/ONK0NsT/6v4ivzE5+JKL7XJ+9+6Q1WQYZm
7UuqnLNDnXU20QZcHWKcGnut8xbxVnmfp/TOWk9nFsq7IrWPrPZZrD5H8lmf
940Pc0d3TypEvpt0cmSbR/ZIb7BzwefOF8c+f1wHXxn7XEt3VI6MfGaqc1Wd
r+ouyir40thn9zrr110FnU0vh18Y+8xSZ5c629KdIt0vulJ2UTjX3w62oH6n
aMwnvptRoOw6qeujc+xGqc9Pdfdpbezz1LUZ3xvpHLjyVqUeHzobakv6YvLb
gC0jv1d8dOoYjc4mdG6rOzYLYp+5645Ta/B80ldqT4l9Hr0543No5ev+SPXU
Z/cbyL9KNlqx9/YPin0+q/3862Lf79J+pHM33fMpx7On62y64DNrnV2vi32n
ZYniQvx/V8Zn1eXCGYP2RN0H0r0gPT848hmxzqB1fqjz9GHg3bHveunscnns
M2id5X0uPwf+LfhK7FjZV+Ca2OfXOh/M6tsyvgc1LJSpc/RPgq/0Vuz7NmvD
eNAdI901Gg8+GfvcXzqvhVjoR4Er/x+x74T8QJu8CXYo+F5bFe0jBd9HaBv4
behfH/uMVLGy2eDW4N+pzqti99FG+Ympz7cUk9R9Jt1P0l2svmHODgUnxb6j
NRasG3ms6i6Z7gVpbCySfsH3ATaFZ7XftkxcT911uSJ2jE5r+KPgQ8g6+D8S
P6s7ax1T5ysudzO4PvKdCMU5dY9tUxi32rMUf1P8SvkPhXVSdwmWws+IfL9O
6+cc8ObYd94e0RxFhsO7xd7jrqCch8EYvYUZ39PSPSjNWd330r1B3T+5Q75M
eHZsKEf3oybELl/3B9unblvdPWmS+k6I7jxsBh+IfSfk1thxZsV6707c5ivC
uNV9I/nvisnqfXrvE7HvSWpcTQEvTL3mdkk837XnyvbpGtpH68lt4V06W9e9
O/Wd1oJmwS+Wfyx/Wev5WYnjcorrXZW4nrpv0iP1fTPdh1kcO56sOwbbwRdj
xwD6onNl5Biv7klqPur+RT3yN6ReKxU7fSd2/GBAaq6Y/87YcbZH4HeB/YMt
pb1bcfWm8H6J36X5qHkp2142+Wc6T4u8Nmrt1Z3YqfDRsc8N5SfKH+wU+37j
2bFjW/KjFRPQvR2d42/L+V6r+n1ObN++Qlg/xyS2E9TOAxLbXItTc+2/E2Wb
kd6Z873WinnXWfZlj/DsOGHiPVHxt8/DuvFS7Nif4gk6e2qYOA6hONbIxPuR
9lbFunX2/WFsG7UX+VOCfo0wvxTTUzxD8a6JBds4C6hXs9h2ezvwl5z3Jt0h
1N0hzanXg38hn/c0vSfnu7uy6VUH2cVLU98xlo+jO8EDYt8RPi01113KaeAP
wUfbAw6Lfe84Dm2j+bIrZxtP9snMxPcGdM4iG11rvu7L6expV9D/HhwVbKeR
ssXyjrGLK2aouI/inLMLjvtew7sO5dzXupes+vzOOPl3se9VKiZQL/adZJVd
IbW9rXiQbPFplHUOfFFiLhttZeryZXfJNlRcUbHRKHGcWfHvEaGvZe8sRP/8
1Pd1FIdUHPss2SSJ20T3XWfG9o/epw4npI4RKUZ6bOK7jLobqbuNuruiGOrU
1GcET5O/Jfb9B51b/RD2/Z/QfafYNmoN3ntxat+wAzrVY98l1vrXmfxqseMz
umNTE91WWT+jO1FaLxugM4H3jgg2+cchvvHvnPcP7SO6fyxbSL5Ok2APyx6T
XfZm7DjhQxpTsf1Z+cVVg80pW1rjsy98euK7LrLdlqW+I6e7og/GjtXIh5Uv
K//9O77xJcUGUt/L1HpYKaxjOnfT/Tft47rzpRi4bNHO4AexY6TPxv4u2emX
pPZ/u2TcB/JndUfi9Nj6OrP7IrYdI3tG9yt0h3laWFveCX6x7rPrrpP2Zd3X
a13wPfzpsX2B/mGc/1bic1ndh9ya8510rTnS113jNLWt3ibss4pl6U6w7j7X
C/6F/Iz/AyqYh+U=
            "]], 
           Polygon[CompressedData["
1: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
wt7MvXf7q3SD11RqBScxf+itqn2+7C9zYC7NhNfGfnNW7YP/OE9kZ2+VDoL7
5ObtIvDuufeSPd2Ztrn3chdkgLsfHqr2HrP/nfkPZC/o7H99wRtTKuZPeHGv
GG/z3LJWFq264v1uHP+PrO2Ue+6bBh2ZbhL6cfug81/85/65efp/aw9+3ZY7
I+y/7tq/q4RP5WxEXyZ6F3im2v9B/4Fhv9SozZlqe57KfoK7qG6UaOcL7yT8
YOFjhB8S/cFHCj6SOmQ98MPZk2rvUf/YL3j1wMAXa7zOGq+v8Km5fUD4gsYK
ny78AuEHVzwmY1/Ie0b4eOFnCh8X/0ebbionCR8hvHvgZ6j9dhWvCdtsNu8J
4f2FH11YvtkrbLiegrvCE4JbMCZjxXl2ifXer7JE8KnVvg9P13jNK76z+kV7
9oI96RL8AK8cpDJE8GnItNr3EN5b+ODcvMycmBv2ZKfQlz1jf9lL5PHA3DLZ
PPb34OBXeHcb9Z9bZ/mEN5gP9mdt8M9u0R/7tWO1ZQbZWYJOFDxC/S/lra49
mS/8LOHXC5+n0kPwBNXNLMwTNXFeo9V3fm7asapbIlpv/c4EV+lTcV/2up/K
ofCReHCAeHFi2f6vYzXmyGh7UZ1tdmx3/GPdkP/MbenTSXChdkdUu09LwVup
z+eJ/XVd472C7wYfzkDs3dx73Vptz+Ltm/ltNCHGewmfSJXfGLxXZqv9AOar
9kt5W6qsSewvxVfdVfVHVXvNrKcvMpJan2FLzhfeKs53fOgPZL2p6k6t83kf
EPKJ/hob5wsPw8s9Qt/AI/AKbwreFsxpcuH2XavNo/AqPn98/72ETxQ+F5lA
llW3iLNS+TXxG479OIf3k2iD1OY47iuNOTzkB1ljj9irUaqbJPpC7vSK5XW4
8Bm5z5NzhTcW5z7rhSoX5NYRXUIfwe+H5eblTtF/tPoNETxY5QjBd6lukeBZ
KlcInpNb9keJdnmdz4CzmKi6BdF/suBjkMeK29GeGMhIeBaZFHyJygOCVyBz
gi9SuVPwSpVl1ebxxwU/rHIZukTlRsH/ULlU8BnR/8HcfRnjdsEPqSwVPCfG
Y47M4UTh80Kejhd8DnPgv0QfJ/pQ4SfE+RyJLoOPVFaIfnLF4zPXWzlTzib2
c7noJ1asb07WWd2Bjqy2zDL+bbn/i/+8KPcesVf0oS/rYy2s6TH0Z+6xz472
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
            "]], 
           Polygon[CompressedData["
1:eJwt13n4llMex/GnjIqS6vf71VyUnoeekrQIUZFKRSXaRKUi7cvvV9r3nZTK
VpStDYUxBsN0zTQYM3MNxixmyYwZTOYSSmHSQsu8vte5/3hf1/l87s/33Pdz
7nOfc57C8Iq+5ZVzudybOBVV8rnckpJcbiEurJrLldDNi7ncMnoxCrzTeA0K
uVxZtVzueGkudwxjZAZgjvZMvCz3rFwLdNf+vdp30E6mDe9j7f+gq2sX0I30
d5b+qpZ5BoyTW8Vf63ov/fVGL97xhrlcXd5ctQvQjHeK3Nm8B+h1qEnvxpNq
tuIz176mH8c27XLeZPRTW+K+J7RPopL7V6M/i3q5h3kP4R36C3zC20Cvxx/p
rfgRbzG9BM/R56AN76+eYxda0Z0wkPcR/SE6uO8NGKJmaDxj3EvmJt780tRf
9LslfgOe117KW4YX4rfiUt7T+noKrdXV5W3W3oKGrp2aT+Mf7+Fedffh1/k0
fvV4Q+RuwQF6fT49QzzLbTHW+qtnHGoZj89j/FCF/l7uG7n/0YdwBu9c3hW8
X+rrDVyutlk+vdd4v7vRls7hLN4oeiQayTXktefdR9+L6vQPUJ/3EL0Btekv
8Slvo3s+gV30me5d1fNVN1dqoAldHafy9sp8gRHucUh2n9oP6A+Rk2nH6897
W/9v4Xz6cNwn3pHMbpxSSPMqnqVcZiKa6K+M15K3hl6NFryTvCO8f6v7GLcX
0zcS38qzMs+jPr3fWFfN+puMY/QR1OFNoCviWdTWkG2SeeNxVKYR7yreJnoj
Suk6aMZ7kt6Gi9WekdWupR/GRdk4t+O9Qu9AG953+izjDaRvxh76TLkLeDPp
GTjJa8rrwvsZ/SouVXsZdpakdx7vPi/zQ7TS/gXvNZxHv4S7jMfymLeuPRXv
17ge0/6S9xVG6eurfPpG41vdgo/o0wrpe4zvMuf91qVroArvAG8/Rqo9j3d6
WZoHMR9q0jvUr3T9Hryo3210efRJn45y3jC6mI1pzIN30b6YslEzSa4CfXkV
+uyj74bucQ6G0t9m8+pFmZ/gZrklvBW8G6IOa/PpG45v+RZ6MK6XmxLzV7sG
1rh2J70Bw+hbY32Jb5YeJLuDfqU0zc2Yo/Wy+Rfv4+exHse8wqux5pameRjz
8UTMae1/8P6F4foa47mv8zvK/IZSXE+35b+pn9fRTf7CfFoDY+zjm/lnrAky
43k38M5WdxYGFNLeEHvEdrXP4RK5ubjL9TuxTH673B1yc+Rq6asEnWRG8ibx
6tBlmE6vlq1QszRqsZVeilG8CXQFZqm9W/YBtfXVnY1Z9N1yY2PfwCD5mXRH
2dqu18RS+XlyS/NpzGPsq2MS/V22rr1Nv4UhxbRfxJz8Xaz/sU7z7ox76Luv
e/TBFN5EXm9eA7p+3Dsy/MralVDPtUJ4+qscewwWxjdGP4rbY53ChlgH6R6y
ddTVRg+1o+hq2VoS+++i2Jdjn+Xf6nozuQswOsYZ/XlN6fMxPvYYXifeRfQl
KC+kOdQq2y/vR0u5hfwRcu1l2mEyPRUDstpWmBjvl3cbryXdIsa7kOZMzJ1P
9PVfXElXYDbvW/og+mZngWt5e+jP0JlujZ6xHtD70YuenM2Xw/QhDIh1yb3n
ac/O9reqkeN18Qydsnc+y7McsmbVdr2PXG98QD8S+yhveKwZ6KNukmzfeDdq
87gt9g4cj7OCzEGMlntZ7c7szDARm/NpfW6c7VsPxh4vd38+vcN4l6Njn6Jr
ZetznFXmoHKMi2wH97uqLM2bmD+VsvPLOJmxaCzTINvj/0T/Bc3pJdm3cLXa
zpheSPM8fnuMQUdMUjuDN5B3JX1FvHPeWF4vXr1YS2P+0o9jkfbiyLi2ki7K
jna/MSVpHGM8P0Xl7MwwNNZ2mUpxHuC97re+hm883z3Zea0RfR4W0Ivi2+Sd
SxdwdTGtTbFOxXr1EvbR07Ag1i79n8Bw+li2hr0g82N8Tl8U3whvr8w+dKcP
4g3Xf4UP4txBP+b55sc64LfNwOzsLBDraKynP8VAXjfeFyWpv+i3Zeyf6KT9
Hu9vMZ/lDmf7dL+Yy/ioYVrX5vKO0kcwMJ/OcXGWulT/l8SZjV6Hx3lT6Rl4
OuYPOvL+oO7PsY+6xzC8W5rWoViP4rx1FF9r/5b3G9wi8x7vkdJ0Fo0z6V76
APZob+ZtinGgN+EZ3vRYI3Gj2mdiX+atjr0Hb+SzdZF3Gd0u9mt6cOwLcWYs
Tf1G/2vi92lfzGuNbjLbs/0y9tpV2ElXNfY5Y7+L/nvsaXK1Yv+ulvaj93Fc
7sFsXHrSPdBTbrbcYLnyWIOwqpDWyoXZvGqCrnKLs722MV1EF9462VlqR6i7
PfYQegXG8+bS87CeXqh2udpz1DVA52Ka+/ENjJIZGXOGtyf2btefj98h/z49
I3uWWMdzcX7Jp7WkT/ZddsMdaqein3b/srROx3r9BBZoz459DHOy9TSuR+4m
TItafc53j+NxRoxvjp4id6Ncc5kLMUFuAq91WVqLY02eTz+WT/9xusaYYDXd
X3ZaaZoHMR828nabv/1L0nyOeR3n0BXxTuI8J9cQc2OfjW+Jd02873hP+lru
PuOy3zEHawvpvLI+m0NtcE0xrQfRX3f6uqCYzjprsu/jclxbTOvaSP2NiT0L
M+N/kNwyufYyHbAy9oRsnsZ+fgauKqbfHL/9ZnWDY03kfZ/9Rxzstw2Kb5ue
F+MX55ayNI5Tsv0t2uENxAL6Lve4V21b/V+B7jF22T44SGZIrJeF9P8q9qHY
j2ahqdz/AVCQFwY=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
mkpfRp6DU0ip1kZsu0znyNvB1xDvx4LrXgm/Txg3jU838OrE7wTuCbT8mB+Q
7yZdFvmdwJuhz+p7mWwWUjGyX9M49PN/to1sA+pekNinuybMl/yedfCHBftQ
/1FtqC35dZI/EDwVHEE/r4B+Q2NGOl/rBGxMnTqR/RnJaPwqMA7tZefBv0pj
CP9s6M6yeSmvEnm++8I/T+uMPjwd+x2p7NAOidec1m3zMIYay85BRnbvFbH9
Nb0hqBe7nznNS+z3J8/EtlFf1Loo2I7V24nnY9uxwj0F+7aqt7Jgm1W2ruJI
HWLvqQtj3yOUQB+TuM+NwzqvrrWosQLfyNv/zSf2heXnZjUvsX0N3aHLB5Ts
cr5VK7YvIH9DdyvVI/vFeldySGT79d7E86E7lIqBr3L5xXWpt4J26oAHRM6r
/7K99T7k/tjz9VDYC7LNM8zLA4nfnmwrWG9oP+0u2Gf5R3fqBcu01lgl9h00
dw+DO3X/XWI5zana3lVwXED+i2L1u8P+3RP2Yt2gN7SXtV+0b+QjbwtvHp6L
7ctonmqH/6L/9GTsNzPyUwbnPZ//8q2LYq9xzYvWjN6fPAUeR1u1oc9PPBfy
uZch/0rsGF332G+3tG4fiP0WSLiz4Lrq87HglZo/6LPAIynfV/o5tl+juJ/0
Rf2w3/KxY8jt0cNTwZsSv2PRmwG9HdLboj9p/xbwqMjveU5JrK/k90m+JvQ5
4AWxYxQdY8cStH7qR357pDdIw/OOP+ib3xbcjnTRhWDXxGPwT8F+jdbkUYnf
4Cl+f2bqtdReehCZdrH1vPK699fbp4d0xpGqSl8l9ikVM1RM9PTY/pFiRH3i
oLdjv0MT/UoYN81LJ3Bq7Pjga7HPBp0R8k8HJL5b0X2KfH1990ytr9i++Vng
7YlxU8HvuPQma2PBfZMeuAw8PPa4aV5OIx0d2ddTPED6TbGrN2KPm/qgOJF0
vu7sNK5Vw9jqfYfm5eDIb9dl/8sP0D2p4jbNwBax/W6949JabRt0lOrUDG1c
nDjWpLtCxRYOo/w77QvwoMj588M+6hj+o95BPQ2WK1qPa36ngJdEjhNqzXfU
uk0c/9D4aJw0hnprXxJ0rPZLS7BH7DdvWueNYu8F6X2tDen2vuC+RZ/90tv7
FR2DU5z8nNh7U7pYsQXFwksp/y+9BT+k
            "]], 
           Polygon[CompressedData["
1:eJxNm3W4VdXWxrd99rHFvZatey63eo4NiIotdoIFNirmNa967cYOsDEIQUKU
VkRKKUUMGhVBRBRbscWA7/35Dp/n+2M+e4w1Y801Y8Q7xq6eeckxF69YKpX6
rFQqrazfXkWptEd9qTQ2L5XOaSyVpqdS6e5yqTQ/K5U2EX+l+F3Fnyr+x4ZS
aVs9q1Pbl/RsJfVdrPonRH+p+i1U16iykuqf07OXa6XSLNXfK/oT1W+muvP0
21L87ipni35YpZ3oE1UeEf2d2ncXvYLGWFnlIvE7iz9QdV/o/XP1e5f4O1U+
EL2W2jwv+gWVeyql0lZ6x1I9Hyp+SXL7p0V3VflQ9OdVta0rlcapfC/6Rc2x
j+p+U11NfS9XnxbMR/wSva+DvnFFrU8HvedQ1W+t8qfq+qrNr2p7rupXVv0l
qj9SdYP121z8LipDRL+usrfofVTuEX2i2v+uvheIPkLt79UYR8Va/Kz3Xa7n
G6ntxipXiL5c7dcW/V/RR6n9S2ozRN+5UPP/W/PfQs9Hqf9olUJ0g9qsqN9H
xC/U2BuKn62xnxT/jvgHNN72Gq+z2rRV3XGqO1R1h6kcL3q4xh+u8cfH+tyv
9g1qP0jtz4zv20L85ioDRA9VqYheP9rM0BgdNdZtKl9knsPDopdnntvr4m8W
/yhnQvSKhc/SKrHfv2feK/bsF9E/qE0v0V+Jzvl+7Vc38X+L30b8JapvKv4I
8V9p7pOT3z9T/Aaqf1v8HeLfF7+R+O56326a6yt6VwfxPcTvLn6U+LPFb8ae
qf0bKlXRdYXXl3Vu1uj12EbtJ4o/T/w5Gr9R9W01/vcNnv+Qss8f55D9b6z3
Gk4SPVPt71HdAtVtqv6dNd4OqnuUsyF+UqzPO6qviB+gMZ/SfkzVfvyl/bhV
9Qep/mLV/9rgOzhcfDn33XxOzx5S++FqP4+zLv4J8SPFLxK/mtqPVPtN1H5n
tf9Kz15VXX+Vj0T/qDJR9CCV70RPU3lO9NioP139fmVvVE4TvUbu97+ssqbo
fnrfA3rfm2o/v+r7+bjqHlNZXfT73DnVdecOVt2/p+qeiW/4VP330Lcl8e30
rZ8mn5V61W3HWVafgeo7Ieb3hkpP0S+rvCn6dZUeol9SmSR6HfUbqP4DVHYT
/aLGH6j5zVL9ihq7v/hHxL8t/jO1Hyq+f8VrwtoMFt9L/AzxN+vsDRL/jPj5
4uvUf6D4SeIXi79L9UPE9xb/kfjf1H+Y+AHi3xJ/q+q/qHotWdMPRf+kMkn0
YJUfRC9UeUX0sypvsxdVrxVrNr5q+cXdHKAyU/TzGv/xivvQlz1n75+J739L
pXed93+66DlV7+3EeB9ngjravCt6skov0SPi/XfpvGyp8/mU1u4Urf+u+n1N
azlOZTHyNLP876Kybu79Yq9vifv9pcpTon9Wuy25v+Kv4n6IX1386MyyHx3w
iugRqr9G9CjRa4e+QD4erXJ+6JhvQp6he4arXM3507M1Vbd5o88h53Gk1vsO
zb/Q/B/Xs5NUN0Htb1LdW2q/vvhHxbcVPwJdIn6u+E7ivxdfiJ+W+VtuVZke
3/BL6BS+rSr+68wyaqjed4HoHUXvoHKu6JEqHUSfFXN8QvPYUfPZSeXp3O/4
Uc87l/3uJP5b8YOQeeL/SD6/66ntDqobKf5a1l9t1hE/VXvUT3s1Js7TOvre
SarfSO13Qn+LX0fv6i7+NPFj1f961U9U//XEv6M+fdV3tMp70DpP91d83rir
56n9tmp/MrJYdXdqvHU1Xi+Nd7r6n6H6rVV/lOq/Vv2FmeXTgdx50S+r/nzk
qegmav+4+FPF/0/872rfReM103jPabz2qm+VWd/vpHIR8jNz//NUJrF+hfUr
uueMRtfzPTfEO/pozG6a/3TN/0btxy5xFpBRTUUfo/4/iT5J9EHq/6Dmc5z4
59S3zN4iP2PP+qn/LapvFXt5jsoq4t/T2B/rHa+r7Zbil4pfLP4N8RuI/1r8
Kmo7o8H2z31ln9GJonfErhK9scoBIcMv0+/BZcv2TVS+V/9vkKGq+4/47Tk/
8f4aZwLZpPrJDbbJ2uv5bmXbarnKV+yd6ieo7gP9/iL+V5W5opfq2VVq30bt
O6ltxh1V3SzVjVNdxplS/UWqH5+8R1eKP6XsvRsc+vS/yNTk7/1G/Reo/yS1
/UnldLXfT/XdarZpOog/smxb5zfxl4pvjcxX/dV6tofog/Rsgeq2Z43Fr6yy
negWms+2YU/+prYba//eFr1QZRvRh/ANordS2w/VfxdsNPRQ2fbZXipri26i
+jmq3031O6t+ip5tqP5Tw969Evkjeqfkd1fU/r0G2xyfZdZR2CLNxafc9sHK
6r+nnq0lem21maX2u6u+mepfRR+q/i7VH87eqv52lQPErxDznaf2u+q3ufhd
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
PvANsAAwO7C7/wOGGcXl
            "]], 
           Polygon[CompressedData["
1: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
            "]]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0ktLVVEYgOGlHjU9XvKS6dBJghHOJEiwn6Ci0UwMElSwuYJOlQZKOnVW
5v16jtdOYdSgUPGCYpozRf+CoOCzwcHL8+3Jt9fa7Mp3H5q600IIH9WSG0KR
h6V4CM94xlds0HuV54XQwxcc4ht+5rrW9LsihFX+4gp/MsktJrisH+YlprjI
b1zgBuc5F+0zz0Y7OcMVTjPJKU5Gu8wTXORXLnCcXzSsfmfr5Vu2s4aNrFOV
Yp6Lee6Od+6e4DUPNWj+zjZO8iVHWch+durSt2phiq85yufsYhmjb5quP09D
yOBfxrjNTGZpx5zNXT7iHnO4T2tCPDqP2VHDEfN5zAKesJCP9c9cxFMW84wl
/M9SPlG1Pllaz00284IdvGEfR1TrpRNsZYoDPOAYr3j78J/cAx+bTOs=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0kkrxVEYwOGDFbn2UoSPQLG2othY2JmueR4SH4Id2QlLK5L5mmeuKZFp
QfEBJIpsPDeLX8/735zOe/rnRnsqu5NCCMMaTQ/hNDmE90gIz8zMCOGTqSkh
ZKvKdwE7WMoxVrNffdrPCqGXe+zhDru5zS52atPcwXW2M8Y2rrKVLVoxN3OZ
TVxkIxfYwKjmzfWcYx1nWcsalWnD3Qo5zhx2MY1f9nlRie84s7jEDztPc0RH
5iFOMspBVrCCxcxPZM7grzf78YDXfOMML7mmmI4z7coTbjDOTW7pzLzNc+7w
kru84h73E+eaD3jDQ97yiHc8Tpyre/MpHxjnI8/4xHNe6DVxrrt984cRd8+z
Qx6LWMRyDZjrOcFBHnKYT5ziYvL/f/IHTadZng==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0j1PU2EcxuF/tXVEJuTFqgiiQgJshB2/gIupE/oB2gFQwRdeWsCE1UES
+ACEWAM2aiRG0ybUqIGgjS1UZxdNdHbhShx+ue4znec8Od23c9eziYhY0UFL
RD4ZMdga8ZQ3+Ixl1fXE8y9uMJGK+MI2DqhflXTEVZZ5he95me/Yx0t6a/dy
hz18w4t8zW5e0Cv7PF/yHEtM8wXPsktbdiefs4NFtvOMTuifs/121hob3GSF
Ra1qznOBGeY4zJu8ppQ9zB+nvYslnuIK/56M+K5bdpWj3GYr1/nTHT7mhCZV
7YqY4gfe4Ufe5T19sqf5mTPc433u8wEf6sB+xK+cZY1z/MZ5Lqhu59lggYdc
5BGXuKw1tTjjFke4y3E2OcU/TPnGbbuTTQ4x6S7G2MEMs8n//8kx4WJOaQ==

          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0j1I1HEcx/GvQ67WOUlENIQNPVjaw+ldD7pKkKDtDQop1xQOCrW3FCht
ORkUJJKUaKLYYKRo5915D/agpVC3SXvR62h48/r8lz+//4//iTv3ejJ1EfFI
DUciUvURQ4mIWxxnP0f0WDnPk/zJeR5ujPjEfe3p/fGIH1zmdy5xl4vc4Tct
2F85zy+c42fOcpsVvbXLfMMSZ1jka26xoGk7zynm+IqbzOqdks72nAk+YdWZ
RzmgntqZPKf5lKeYYSP/Horosqs8ygJ/u5clfuRLjmvCfshhDvIm+3iSN3ha
Z7RyLOIsP/Bc7R1s4Xmt2he4xlaus40bvMhLytqXmeMV5pnkFtvZoaKdYolp
lnmVFV7jdfWq29nu8j4f8BnHOMMXXNSBnWeTb//FTv7hbSbcT3P9///kHx0/
WB8=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0r9L1HEcx/F3S5cO3WCting4RqBD/Qc1XEGLNNjg7QkF1ahTdndW/s5q
0S0uxDhPQxRbivwRktiPoailX/7I1Ls0W3pAw5PHa3x/vnzr29ovXD4UETml
ayLKiYhHxyKqjkSssJZNOqPk8YhWpniFad7kQz3Qs/qI+5zjMGd5jzMc4qCm
7QE+ZT+n2McSe9mjCfsui7zDJ7zNcXYzrzE7x8fMssBb7NJVXXPbJZ7nWTay
mXWq1l9vq3jrKj+zwEVOqdMe5UV28yRvMMEMz+mjb3WaJaaYZ5IZHhyO+KKv
el4X8Y0v+J0v+YNrmrfXucANLnGTr/iTW1q2f/E1t7nCHa5yl2W9sSt8y998
xz2+5z7/6Kjbsm5rYJGn+IFpbrON13XCG/Ns4Qg7OMl+LvBT4v9/8g89uF+U

          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0r9PE3Ecx+EPA8ayGIdCqBNx00QZ3URsRaSiIgts6Ehs/wfcqqNRFwVR
0ZYWpARjNCUBDQWJ8XcZdCYkOlT+Ap7G4ZXnfcvdfS/XcyM/kmuLiDsqJCPK
iYjdzog1HumKaPCPoiMi6zrJCZ5ggWc5qutaPR4xwhqv8R2v8i2vcFhv7Mt8
zSxXOMRlXuKgqvZFLnGAi7zABWaYVtk+zxL7WeQ59ulk637erZN32cab/Osc
O1rXGdcVHuVD7jnzbea1ao/zPjO8xV6meYyHlLL/HY7Y981+c4t1zrDKR3qs
9z0R0/zAGW7wCWdVt59yk8/4kc+5zTm+0Cf7JT+zyC8s8RvnWdZ3u8IfXOBP
LrLBV1xqPbf1PO/2i0022e0M7c5yiime1qSd5j2OscYcv3KKDxL//5MDTGlW
0Q==
          "]]}, {
         Line[{6089, 6087, 6110, 9688, 6111, 6138, 9153, 9696, 6158, 9711, 
          6159, 6179, 9170, 9724, 6199, 6200, 6229, 9745, 6230, 6259, 9753, 
          6260, 6280, 9767, 6281, 6300, 9195, 9780, 6321, 6322, 6351, 9801, 
          6352, 6381, 9809, 6382, 6401, 9823, 6402, 6421, 6422, 6448, 6449, 
          6478, 9842, 6479, 6507, 9850, 6508, 6528, 9231, 9864, 6549, 6550, 
          6576}], 
         Line[{6090, 6088, 6112, 9689, 6115, 6139, 9698, 6141, 6160, 9164, 
          9713, 6180, 9171, 9726, 6201, 6204, 6231, 9746, 6234, 6261, 9755, 
          6263, 6282, 9188, 9769, 6301, 9196, 9782, 6323, 6326, 6353, 9802, 
          6356, 6383, 9811, 6385, 6403, 9213, 9825, 6423, 6426, 6450, 6453, 
          6480, 9843, 6483, 6509, 9852, 6511, 6529, 9232, 9866, 6551, 6553, 
          6577}], 
         Line[{6092, 6091, 6114, 9690, 6118, 6140, 9156, 9700, 6161, 9165, 
          9715, 6182, 9172, 9728, 6203, 6207, 6233, 9747, 6237, 6262, 9181, 
          9757, 6283, 9189, 9771, 6303, 9197, 9784, 6325, 6329, 6355, 9803, 
          6359, 6384, 9813, 6387, 6404, 9214, 9827, 6425, 6429, 6452, 6456, 
          6482, 9844, 6486, 6510, 9854, 6513, 6531, 9233, 9868, 6552, 6556, 
          6579}], 
         Line[{6093, 6095, 6117, 9691, 6123, 6142, 9702, 6147, 6163, 9717, 
          6168, 6184, 9730, 6188, 6206, 6212, 6236, 9748, 6242, 6264, 9759, 
          6269, 6285, 9773, 6290, 6305, 9786, 6310, 6328, 6334, 6358, 9804, 
          6364, 6386, 9815, 6391, 6406, 9829, 6411, 6428, 6433, 6455, 6461, 
          6485, 9845, 6491, 6512, 9856, 6518, 6533, 9870, 6538, 6555, 6561, 
          6581}], 
         Line[{6094, 6098, 6119, 9692, 6127, 6143, 9704, 6150, 6164, 2732, 
          6185, 9175, 9732, 6208, 6216, 6238, 9749, 6246, 6265, 9761, 6272, 
          6286, 2896, 6306, 9199, 9788, 6330, 6338, 6360, 9805, 6368, 6388, 
          9206, 9817, 6407, 3061, 6430, 6436, 6457, 6465, 6487, 9846, 6495, 
          6514, 9226, 9858, 6534, 3184, 6557, 6565, 6582}], 
         Line[{6096, 6100, 6121, 9693, 6131, 6145, 9159, 9706, 6166, 9167, 
          9720, 6186, 9176, 9733, 6210, 6220, 6240, 9750, 6250, 6267, 9763, 
          6275, 6288, 9192, 9776, 6308, 9200, 9789, 6332, 6342, 6362, 9806, 
          6372, 6389, 3024, 6409, 9217, 9832, 6431, 6439, 6459, 6469, 6489, 
          9847, 6499, 6516, 9860, 6523, 6536, 9235, 9873, 6559, 6568, 6584}], 
         Line[{6097, 6103, 6122, 9151, 9694, 6146, 9708, 6154, 6167, 9168, 
          9721, 6187, 9177, 9735, 6211, 6223, 6241, 9751, 6253, 6268, 9185, 
          9765, 6289, 9193, 9777, 6309, 9201, 9791, 6333, 6345, 6363, 9807, 
          6375, 6390, 9209, 9820, 6410, 9218, 9833, 6432, 6442, 6460, 6472, 
          6490, 9848, 6502, 6517, 9229, 9862, 6537, 9236, 9874, 6560, 6571, 
          6585}], 
         Line[{6099, 6109, 6124, 9687, 9152, 6148, 9695, 9162, 6169, 9710, 
          9169, 6189, 9723, 9178, 6213, 6228, 6243, 6258, 9744, 6270, 9752, 
          9186, 6291, 9766, 9194, 6311, 6320, 9779, 6335, 6350, 6365, 6380, 
          9800, 6392, 9808, 9211, 6412, 9822, 9219, 6434, 6447, 6462, 6477, 
          6492, 9841, 9222, 6519, 9849, 9230, 6539, 9863, 9237, 6562, 6575, 
          6586}], 
         Line[{6101, 6113, 6126, 9697, 9154, 6149, 9712, 9163, 6171, 6181, 
          9725, 6190, 6202, 9737, 6215, 6232, 6245, 9754, 9179, 6271, 9768, 
          9187, 6292, 6302, 9781, 6312, 6324, 9793, 6337, 6354, 6367, 9810, 
          9203, 6394, 9824, 9212, 6413, 6424, 9835, 6435, 6451, 6464, 6481, 
          6494, 9851, 9223, 6520, 6530, 9865, 6540, 9876, 9238, 6564, 6578, 
          6588}], 
         Line[{6102, 6116, 6128, 9699, 9155, 6151, 6162, 9714, 6172, 6183, 
          9727, 6191, 6205, 9738, 6217, 6235, 6247, 9756, 9180, 6273, 6284, 
          9770, 6293, 6304, 9783, 6313, 6327, 9794, 6339, 6357, 6369, 9812, 
          9204, 6395, 6405, 9826, 6414, 6427, 9836, 6437, 6454, 6466, 6484, 
          6496, 9853, 9224, 6521, 6532, 9867, 6541, 6554, 9877, 6566, 6580, 
          6589}], 
         Line[{6104, 6120, 6130, 6144, 9701, 6152, 6165, 9716, 6173, 9729, 
          9173, 6192, 6209, 9739, 6219, 6239, 6249, 6266, 9758, 6274, 6287, 
          9772, 6294, 6307, 9785, 6314, 6331, 9795, 6341, 6361, 6371, 9814, 
          9205, 6396, 6408, 9828, 6415, 9837, 9220, 6438, 6458, 6468, 6488, 
          6498, 6515, 9855, 6522, 6535, 9869, 6543, 6558, 9878, 6567, 6583, 
          6591}], 
         Line[{6105, 6125, 6133, 9703, 9157, 6153, 6170, 9718, 6174, 9731, 
          9174, 6194, 6214, 9740, 6222, 6244, 6252, 9760, 9182, 6276, 9774, 
          9190, 6295, 9787, 9198, 6316, 6336, 9796, 6344, 6366, 6374, 6393, 
          9816, 6397, 9830, 9215, 6416, 9838, 9221, 6441, 6463, 6471, 6493, 
          6501, 9857, 9225, 6524, 9871, 9234, 6544, 6563, 9879, 6570, 6587, 
          6593}], 
         Line[{6106, 6129, 6134, 9705, 9158, 6155, 9719, 9166, 6175, 2775, 
          6195, 6218, 9741, 6224, 6248, 6254, 9762, 9183, 6277, 9775, 9191, 
          6296, 2939, 6317, 6340, 9797, 6346, 6370, 6376, 9818, 9207, 6398, 
          9831, 9216, 6417, 3089, 6443, 6467, 6473, 6497, 6503, 9859, 9227, 
          6525, 6542, 9872, 6545, 3212, 6572, 6590, 6594}], 
         Line[{6107, 6132, 6136, 9707, 9160, 6156, 2738, 6177, 6193, 9734, 
          6197, 6221, 9742, 6226, 6251, 6256, 9764, 9184, 6278, 2902, 6298, 
          6315, 9790, 6318, 6343, 9798, 6348, 6373, 6378, 9819, 9208, 6399, 
          3067, 6419, 6440, 9839, 6445, 6470, 6475, 6500, 6505, 9861, 9228, 
          6526, 3190, 6547, 6569, 9880, 6573, 6592, 6596}], 
         Line[{6108, 6135, 6137, 9709, 9161, 6157, 6176, 9722, 6178, 6196, 
          9736, 6198, 6225, 9743, 6227, 6255, 6257, 2865, 6279, 6297, 9778, 
          6299, 9792, 9202, 6319, 6347, 9799, 6349, 6377, 6379, 9821, 9210, 
          6400, 6418, 9834, 6420, 6444, 9840, 6446, 6474, 6476, 6504, 6506, 
          3153, 6527, 6546, 9875, 6548, 9881, 9239, 6574, 6595, 6597}], 
         Line[{6600, 6598, 6621, 9883, 6622, 6649, 9242, 9891, 6669, 9906, 
          6670, 6690, 9259, 9919, 6710, 6711, 6740, 9940, 6741, 6770, 9948, 
          6771, 6791, 9962, 6792, 6811, 9284, 9975, 6832, 6833, 6862, 9996, 
          6863, 6892, 10004, 6893, 6912, 10018, 6913, 6932, 6933, 6959, 6960, 
          6989, 10037, 6990, 7018, 10045, 7019, 7039, 9320, 10059, 7060, 7061,
           7087}], 
         Line[{6601, 6599, 6623, 9884, 6626, 6650, 9893, 6652, 6671, 9253, 
          9908, 6691, 9260, 9921, 6712, 6715, 6742, 9941, 6745, 6772, 9950, 
          6774, 6793, 9277, 9964, 6812, 9285, 9977, 6834, 6837, 6864, 9997, 
          6867, 6894, 10006, 6896, 6914, 9302, 10020, 6934, 6937, 6961, 6964, 
          6991, 10038, 6994, 7020, 10047, 7022, 7040, 9321, 10061, 7062, 7064,
           7088}], 
         Line[{6603, 6602, 6625, 9885, 6629, 6651, 9245, 9895, 6672, 9254, 
          9910, 6693, 9261, 9923, 6714, 6718, 6744, 9942, 6748, 6773, 9270, 
          9952, 6794, 9278, 9966, 6814, 9286, 9979, 6836, 6840, 6866, 9998, 
          6870, 6895, 10008, 6898, 6915, 9303, 10022, 6936, 6940, 6963, 6967, 
          6993, 10039, 6997, 7021, 10049, 7024, 7042, 9322, 10063, 7063, 7067,
           7090}], 
         Line[{6604, 6606, 6628, 9886, 6634, 6653, 9897, 6658, 6674, 9912, 
          6679, 6695, 9925, 6699, 6717, 6723, 6747, 9943, 6753, 6775, 9954, 
          6780, 6796, 9968, 6801, 6816, 9981, 6821, 6839, 6845, 6869, 9999, 
          6875, 6897, 10010, 6902, 6917, 10024, 6922, 6939, 6944, 6966, 6972, 
          6996, 10040, 7002, 7023, 10051, 7029, 7044, 10065, 7049, 7066, 7072,
           7092}], 
         Line[{6605, 6609, 6630, 9887, 6638, 6654, 9899, 6661, 6675, 3306, 
          6696, 9264, 9927, 6719, 6727, 6749, 9944, 6757, 6776, 9956, 6783, 
          6797, 3470, 6817, 9288, 9983, 6841, 6849, 6871, 10000, 6879, 6899, 
          9295, 10012, 6918, 3635, 6941, 6947, 6968, 6976, 6998, 10041, 7006, 
          7025, 9315, 10053, 7045, 3758, 7068, 7076, 7093}], 
         Line[{6607, 6611, 6632, 9888, 6642, 6656, 9248, 9901, 6677, 9256, 
          9915, 6697, 9265, 9928, 6721, 6731, 6751, 9945, 6761, 6778, 9958, 
          6786, 6799, 9281, 9971, 6819, 9289, 9984, 6843, 6853, 6873, 10001, 
          6883, 6900, 3598, 6920, 9306, 10027, 6942, 6950, 6970, 6980, 7000, 
          10042, 7010, 7027, 10055, 7034, 7047, 9324, 10068, 7070, 7079, 
          7095}], 
         Line[{6608, 6614, 6633, 9240, 9889, 6657, 9903, 6665, 6678, 9257, 
          9916, 6698, 9266, 9930, 6722, 6734, 6752, 9946, 6764, 6779, 9274, 
          9960, 6800, 9282, 9972, 6820, 9290, 9986, 6844, 6856, 6874, 10002, 
          6886, 6901, 9298, 10015, 6921, 9307, 10028, 6943, 6953, 6971, 6983, 
          7001, 10043, 7013, 7028, 9318, 10057, 7048, 9325, 10069, 7071, 7082,
           7096}], 
         Line[{6610, 6620, 6635, 9882, 9241, 6659, 9890, 9251, 6680, 9905, 
          9258, 6700, 9918, 9267, 6724, 6739, 6754, 6769, 9939, 6781, 9947, 
          9275, 6802, 9961, 9283, 6822, 6831, 9974, 6846, 6861, 6876, 6891, 
          9995, 6903, 10003, 9300, 6923, 10017, 9308, 6945, 6958, 6973, 6988, 
          7003, 10036, 9311, 7030, 10044, 9319, 7050, 10058, 9326, 7073, 7086,
           7097}], 
         Line[{6612, 6624, 6637, 9892, 9243, 6660, 9907, 9252, 6682, 6692, 
          9920, 6701, 6713, 9932, 6726, 6743, 6756, 9949, 9268, 6782, 9963, 
          9276, 6803, 6813, 9976, 6823, 6835, 9988, 6848, 6865, 6878, 10005, 
          9292, 6905, 10019, 9301, 6924, 6935, 10030, 6946, 6962, 6975, 6992, 
          7005, 10046, 9312, 7031, 7041, 10060, 7051, 10071, 9327, 7075, 7089,
           7099}], 
         Line[{6613, 6627, 6639, 9894, 9244, 6662, 6673, 9909, 6683, 6694, 
          9922, 6702, 6716, 9933, 6728, 6746, 6758, 9951, 9269, 6784, 6795, 
          9965, 6804, 6815, 9978, 6824, 6838, 9989, 6850, 6868, 6880, 10007, 
          9293, 6906, 6916, 10021, 6925, 6938, 10031, 6948, 6965, 6977, 6995, 
          7007, 10048, 9313, 7032, 7043, 10062, 7052, 7065, 10072, 7077, 7091,
           7100}], 
         Line[{6615, 6631, 6641, 6655, 9896, 6663, 6676, 9911, 6684, 9924, 
          9262, 6703, 6720, 9934, 6730, 6750, 6760, 6777, 9953, 6785, 6798, 
          9967, 6805, 6818, 9980, 6825, 6842, 9990, 6852, 6872, 6882, 10009, 
          9294, 6907, 6919, 10023, 6926, 10032, 9309, 6949, 6969, 6979, 6999, 
          7009, 7026, 10050, 7033, 7046, 10064, 7054, 7069, 10073, 7078, 7094,
           7102}], 
         Line[{6616, 6636, 6644, 9898, 9246, 6664, 6681, 9913, 6685, 9926, 
          9263, 6705, 6725, 9935, 6733, 6755, 6763, 9955, 9271, 6787, 9969, 
          9279, 6806, 9982, 9287, 6827, 6847, 9991, 6855, 6877, 6885, 6904, 
          10011, 6908, 10025, 9304, 6927, 10033, 9310, 6952, 6974, 6982, 7004,
           7012, 10052, 9314, 7035, 10066, 9323, 7055, 7074, 10074, 7081, 
          7098, 7104}], 
         Line[{6617, 6640, 6645, 9900, 9247, 6666, 9914, 9255, 6686, 3349, 
          6706, 6729, 9936, 6735, 6759, 6765, 9957, 9272, 6788, 9970, 9280, 
          6807, 3513, 6828, 6851, 9992, 6857, 6881, 6887, 10013, 9296, 6909, 
          10026, 9305, 6928, 3663, 6954, 6978, 6984, 7008, 7014, 10054, 9316, 
          7036, 7053, 10067, 7056, 3786, 7083, 7101, 7105}], 
         Line[{6618, 6643, 6647, 9902, 9249, 6667, 3312, 6688, 6704, 9929, 
          6708, 6732, 9937, 6737, 6762, 6767, 9959, 9273, 6789, 3476, 6809, 
          6826, 9985, 6829, 6854, 9993, 6859, 6884, 6889, 10014, 9297, 6910, 
          3641, 6930, 6951, 10034, 6956, 6981, 6986, 7011, 7016, 10056, 9317, 
          7037, 3764, 7058, 7080, 10075, 7084, 7103, 7107}], 
         Line[{6619, 6646, 6648, 9904, 9250, 6668, 6687, 9917, 6689, 6707, 
          9931, 6709, 6736, 9938, 6738, 6766, 6768, 3439, 6790, 6808, 9973, 
          6810, 9987, 9291, 6830, 6858, 9994, 6860, 6888, 6890, 10016, 9299, 
          6911, 6929, 10029, 6931, 6955, 10035, 6957, 6985, 6987, 7015, 7017, 
          3727, 7038, 7057, 10070, 7059, 10076, 9328, 7085, 7106, 7108}], 
         Line[{7111, 7109, 7132, 10078, 7133, 7160, 9331, 10086, 7180, 10101, 
          7181, 7201, 9348, 10114, 7221, 7222, 7251, 10135, 7252, 7281, 10143,
           7282, 7302, 10157, 7303, 7322, 9373, 10170, 7343, 7344, 7373, 
          10191, 7374, 7403, 10199, 7404, 7423, 10213, 7424, 7443, 7444, 7470,
           7471, 7500, 10232, 7501, 7529, 10240, 7530, 7550, 9409, 10254, 
          7571, 7572, 7598}], 
         Line[{7112, 7110, 7134, 10079, 7137, 7161, 10088, 7163, 7182, 9342, 
          10103, 7202, 9349, 10116, 7223, 7226, 7253, 10136, 7256, 7283, 
          10145, 7285, 7304, 9366, 10159, 7323, 9374, 10172, 7345, 7348, 7375,
           10192, 7378, 7405, 10201, 7407, 7425, 9391, 10215, 7445, 7448, 
          7472, 7475, 7502, 10233, 7505, 7531, 10242, 7533, 7551, 9410, 10256,
           7573, 7575, 7599}], 
         Line[{7114, 7113, 7136, 10080, 7140, 7162, 9334, 10090, 7183, 9343, 
          10105, 7204, 9350, 10118, 7225, 7229, 7255, 10137, 7259, 7284, 9359,
           10147, 7305, 9367, 10161, 7325, 9375, 10174, 7347, 7351, 7377, 
          10193, 7381, 7406, 10203, 7409, 7426, 9392, 10217, 7447, 7451, 7474,
           7478, 7504, 10234, 7508, 7532, 10244, 7535, 7553, 9411, 10258, 
          7574, 7578, 7601}], 
         Line[{7115, 7117, 7139, 10081, 7145, 7164, 10092, 7169, 7185, 10107, 
          7190, 7206, 10120, 7210, 7228, 7234, 7258, 10138, 7264, 7286, 10149,
           7291, 7307, 10163, 7312, 7327, 10176, 7332, 7350, 7356, 7380, 
          10194, 7386, 7408, 10205, 7413, 7428, 10219, 7433, 7450, 7455, 7477,
           7483, 7507, 10235, 7513, 7534, 10246, 7540, 7555, 10260, 7560, 
          7577, 7583, 7603}], 
         Line[{7116, 7120, 7141, 10082, 7149, 7165, 10094, 7172, 7186, 3880, 
          7207, 9353, 10122, 7230, 7238, 7260, 10139, 7268, 7287, 10151, 7294,
           7308, 4044, 7328, 9377, 10178, 7352, 7360, 7382, 10195, 7390, 7410,
           9384, 10207, 7429, 4209, 7452, 7458, 7479, 7487, 7509, 10236, 7517,
           7536, 9404, 10248, 7556, 4332, 7579, 7587, 7604}], 
         Line[{7118, 7122, 7143, 10083, 7153, 7167, 9337, 10096, 7188, 9345, 
          10110, 7208, 9354, 10123, 7232, 7242, 7262, 10140, 7272, 7289, 
          10153, 7297, 7310, 9370, 10166, 7330, 9378, 10179, 7354, 7364, 7384,
           10196, 7394, 7411, 4172, 7431, 9395, 10222, 7453, 7461, 7481, 7491,
           7511, 10237, 7521, 7538, 10250, 7545, 7558, 9413, 10263, 7581, 
          7590, 7606}], 
         Line[{7119, 7125, 7144, 9329, 10084, 7168, 10098, 7176, 7189, 9346, 
          10111, 7209, 9355, 10125, 7233, 7245, 7263, 10141, 7275, 7290, 9363,
           10155, 7311, 9371, 10167, 7331, 9379, 10181, 7355, 7367, 7385, 
          10197, 7397, 7412, 9387, 10210, 7432, 9396, 10223, 7454, 7464, 7482,
           7494, 7512, 10238, 7524, 7539, 9407, 10252, 7559, 9414, 10264, 
          7582, 7593, 7607}], 
         Line[{7121, 7131, 7146, 10077, 9330, 7170, 10085, 9340, 7191, 10100, 
          9347, 7211, 10113, 9356, 7235, 7250, 7265, 7280, 10134, 7292, 10142,
           9364, 7313, 10156, 9372, 7333, 7342, 10169, 7357, 7372, 7387, 7402,
           10190, 7414, 10198, 9389, 7434, 10212, 9397, 7456, 7469, 7484, 
          7499, 7514, 10231, 9400, 7541, 10239, 9408, 7561, 10253, 9415, 7584,
           7597, 7608}], 
         Line[{7123, 7135, 7148, 10087, 9332, 7171, 10102, 9341, 7193, 7203, 
          10115, 7212, 7224, 10127, 7237, 7254, 7267, 10144, 9357, 7293, 
          10158, 9365, 7314, 7324, 10171, 7334, 7346, 10183, 7359, 7376, 7389,
           10200, 9381, 7416, 10214, 9390, 7435, 7446, 10225, 7457, 7473, 
          7486, 7503, 7516, 10241, 9401, 7542, 7552, 10255, 7562, 10266, 9416,
           7586, 7600, 7610}], 
         Line[{7124, 7138, 7150, 10089, 9333, 7173, 7184, 10104, 7194, 7205, 
          10117, 7213, 7227, 10128, 7239, 7257, 7269, 10146, 9358, 7295, 7306,
           10160, 7315, 7326, 10173, 7335, 7349, 10184, 7361, 7379, 7391, 
          10202, 9382, 7417, 7427, 10216, 7436, 7449, 10226, 7459, 7476, 7488,
           7506, 7518, 10243, 9402, 7543, 7554, 10257, 7563, 7576, 10267, 
          7588, 7602, 7611}], 
         Line[{7126, 7142, 7152, 7166, 10091, 7174, 7187, 10106, 7195, 10119, 
          9351, 7214, 7231, 10129, 7241, 7261, 7271, 7288, 10148, 7296, 7309, 
          10162, 7316, 7329, 10175, 7336, 7353, 10185, 7363, 7383, 7393, 
          10204, 9383, 7418, 7430, 10218, 7437, 10227, 9398, 7460, 7480, 7490,
           7510, 7520, 7537, 10245, 7544, 7557, 10259, 7565, 7580, 10268, 
          7589, 7605, 7613}], 
         Line[{7127, 7147, 7155, 10093, 9335, 7175, 7192, 10108, 7196, 10121, 
          9352, 7216, 7236, 10130, 7244, 7266, 7274, 10150, 9360, 7298, 10164,
           9368, 7317, 10177, 9376, 7338, 7358, 10186, 7366, 7388, 7396, 7415,
           10206, 7419, 10220, 9393, 7438, 10228, 9399, 7463, 7485, 7493, 
          7515, 7523, 10247, 9403, 7546, 10261, 9412, 7566, 7585, 10269, 7592,
           7609, 7615}], 
         Line[{7128, 7151, 7156, 10095, 9336, 7177, 10109, 9344, 7197, 3923, 
          7217, 7240, 10131, 7246, 7270, 7276, 10152, 9361, 7299, 10165, 9369,
           7318, 4087, 7339, 7362, 10187, 7368, 7392, 7398, 10208, 9385, 7420,
           10221, 9394, 7439, 4237, 7465, 7489, 7495, 7519, 7525, 10249, 9405,
           7547, 7564, 10262, 7567, 4360, 7594, 7612, 7616}], 
         Line[{7129, 7154, 7158, 10097, 9338, 7178, 3886, 7199, 7215, 10124, 
          7219, 7243, 10132, 7248, 7273, 7278, 10154, 9362, 7300, 4050, 7320, 
          7337, 10180, 7340, 7365, 10188, 7370, 7395, 7400, 10209, 9386, 7421,
           4215, 7441, 7462, 10229, 7467, 7492, 7497, 7522, 7527, 10251, 9406,
           7548, 4338, 7569, 7591, 10270, 7595, 7614, 7618}], 
         Line[{7130, 7157, 7159, 10099, 9339, 7179, 7198, 10112, 7200, 7218, 
          10126, 7220, 7247, 10133, 7249, 7277, 7279, 4013, 7301, 7319, 10168,
           7321, 10182, 9380, 7341, 7369, 10189, 7371, 7399, 7401, 10211, 
          9388, 7422, 7440, 10224, 7442, 7466, 10230, 7468, 7496, 7498, 7526, 
          7528, 4301, 7549, 7568, 10265, 7570, 10271, 9417, 7596, 7617, 
          7619}], 
         Line[{7622, 7620, 7643, 10273, 7644, 7671, 9420, 10281, 7691, 10296, 
          7692, 7712, 9437, 10309, 7732, 7733, 7762, 10330, 7763, 7792, 10338,
           7793, 7813, 10352, 7814, 7833, 9462, 10365, 7854, 7855, 7884, 
          10386, 7885, 7914, 10394, 7915, 7934, 10408, 7935, 7954, 7955, 7981,
           7982, 8011, 10427, 8012, 8040, 10435, 8041, 8061, 9498, 10449, 
          8082, 8083, 8109}], 
         Line[{7623, 7621, 7645, 10274, 7648, 7672, 10283, 7674, 7693, 9431, 
          10298, 7713, 9438, 10311, 7734, 7737, 7764, 10331, 7767, 7794, 
          10340, 7796, 7815, 9455, 10354, 7834, 9463, 10367, 7856, 7859, 7886,
           10387, 7889, 7916, 10396, 7918, 7936, 9480, 10410, 7956, 7959, 
          7983, 7986, 8013, 10428, 8016, 8042, 10437, 8044, 8062, 9499, 10451,
           8084, 8086, 8110}], 
         Line[{7625, 7624, 7647, 10275, 7651, 7673, 9423, 10285, 7694, 9432, 
          10300, 7715, 9439, 10313, 7736, 7740, 7766, 10332, 7770, 7795, 9448,
           10342, 7816, 9456, 10356, 7836, 9464, 10369, 7858, 7862, 7888, 
          10388, 7892, 7917, 10398, 7920, 7937, 9481, 10412, 7958, 7962, 7985,
           7989, 8015, 10429, 8019, 8043, 10439, 8046, 8064, 9500, 10453, 
          8085, 8089, 8112}], 
         Line[{7626, 7628, 7650, 10276, 7656, 7675, 10287, 7680, 7696, 10302, 
          7701, 7717, 10315, 7721, 7739, 7745, 7769, 10333, 7775, 7797, 10344,
           7802, 7818, 10358, 7823, 7838, 10371, 7843, 7861, 7867, 7891, 
          10389, 7897, 7919, 10400, 7924, 7939, 10414, 7944, 7961, 7966, 7988,
           7994, 8018, 10430, 8024, 8045, 10441, 8051, 8066, 10455, 8071, 
          8088, 8094, 8114}], 
         Line[{7627, 7631, 7652, 10277, 7660, 7676, 10289, 7683, 7697, 4454, 
          7718, 9442, 10317, 7741, 7749, 7771, 10334, 7779, 7798, 10346, 7805,
           7819, 4618, 7839, 9466, 10373, 7863, 7871, 7893, 10390, 7901, 7921,
           9473, 10402, 7940, 4783, 7963, 7969, 7990, 7998, 8020, 10431, 8028,
           8047, 9493, 10443, 8067, 4906, 8090, 8098, 8115}], 
         Line[{7629, 7633, 7654, 10278, 7664, 7678, 9426, 10291, 7699, 9434, 
          10305, 7719, 9443, 10318, 7743, 7753, 7773, 10335, 7783, 7800, 
          10348, 7808, 7821, 9459, 10361, 7841, 9467, 10374, 7865, 7875, 7895,
           10391, 7905, 7922, 4746, 7942, 9484, 10417, 7964, 7972, 7992, 8002,
           8022, 10432, 8032, 8049, 10445, 8056, 8069, 9502, 10458, 8092, 
          8101, 8117}], 
         Line[{7630, 7636, 7655, 9418, 10279, 7679, 10293, 7687, 7700, 9435, 
          10306, 7720, 9444, 10320, 7744, 7756, 7774, 10336, 7786, 7801, 9452,
           10350, 7822, 9460, 10362, 7842, 9468, 10376, 7866, 7878, 7896, 
          10392, 7908, 7923, 9476, 10405, 7943, 9485, 10418, 7965, 7975, 7993,
           8005, 8023, 10433, 8035, 8050, 9496, 10447, 8070, 9503, 10459, 
          8093, 8104, 8118}], 
         Line[{7632, 7642, 7657, 10272, 9419, 7681, 10280, 9429, 7702, 10295, 
          9436, 7722, 10308, 9445, 7746, 7761, 7776, 7791, 10329, 7803, 10337,
           9453, 7824, 10351, 9461, 7844, 7853, 10364, 7868, 7883, 7898, 7913,
           10385, 7925, 10393, 9478, 7945, 10407, 9486, 7967, 7980, 7995, 
          8010, 8025, 10426, 9489, 8052, 10434, 9497, 8072, 10448, 9504, 8095,
           8108, 8119}], 
         Line[{7634, 7646, 7659, 10282, 9421, 7682, 10297, 9430, 7704, 7714, 
          10310, 7723, 7735, 10322, 7748, 7765, 7778, 10339, 9446, 7804, 
          10353, 9454, 7825, 7835, 10366, 7845, 7857, 10378, 7870, 7887, 7900,
           10395, 9470, 7927, 10409, 9479, 7946, 7957, 10420, 7968, 7984, 
          7997, 8014, 8027, 10436, 9490, 8053, 8063, 10450, 8073, 10461, 9505,
           8097, 8111, 8121}], 
         Line[{7635, 7649, 7661, 10284, 9422, 7684, 7695, 10299, 7705, 7716, 
          10312, 7724, 7738, 10323, 7750, 7768, 7780, 10341, 9447, 7806, 7817,
           10355, 7826, 7837, 10368, 7846, 7860, 10379, 7872, 7890, 7902, 
          10397, 9471, 7928, 7938, 10411, 7947, 7960, 10421, 7970, 7987, 7999,
           8017, 8029, 10438, 9491, 8054, 8065, 10452, 8074, 8087, 10462, 
          8099, 8113, 8122}], 
         Line[{7637, 7653, 7663, 7677, 10286, 7685, 7698, 10301, 7706, 10314, 
          9440, 7725, 7742, 10324, 7752, 7772, 7782, 7799, 10343, 7807, 7820, 
          10357, 7827, 7840, 10370, 7847, 7864, 10380, 7874, 7894, 7904, 
          10399, 9472, 7929, 7941, 10413, 7948, 10422, 9487, 7971, 7991, 8001,
           8021, 8031, 8048, 10440, 8055, 8068, 10454, 8076, 8091, 10463, 
          8100, 8116, 8124}], 
         Line[{7638, 7658, 7666, 10288, 9424, 7686, 7703, 10303, 7707, 10316, 
          9441, 7727, 7747, 10325, 7755, 7777, 7785, 10345, 9449, 7809, 10359,
           9457, 7828, 10372, 9465, 7849, 7869, 10381, 7877, 7899, 7907, 7926,
           10401, 7930, 10415, 9482, 7949, 10423, 9488, 7974, 7996, 8004, 
          8026, 8034, 10442, 9492, 8057, 10456, 9501, 8077, 8096, 10464, 8103,
           8120, 8126}], 
         Line[{7639, 7662, 7667, 10290, 9425, 7688, 10304, 9433, 7708, 4497, 
          7728, 7751, 10326, 7757, 7781, 7787, 10347, 9450, 7810, 10360, 9458,
           7829, 4661, 7850, 7873, 10382, 7879, 7903, 7909, 10403, 9474, 7931,
           10416, 9483, 7950, 4811, 7976, 8000, 8006, 8030, 8036, 10444, 9494,
           8058, 8075, 10457, 8078, 4934, 8105, 8123, 8127}], 
         Line[{7640, 7665, 7669, 10292, 9427, 7689, 4460, 7710, 7726, 10319, 
          7730, 7754, 10327, 7759, 7784, 7789, 10349, 9451, 7811, 4624, 7831, 
          7848, 10375, 7851, 7876, 10383, 7881, 7906, 7911, 10404, 9475, 7932,
           4789, 7952, 7973, 10424, 7978, 8003, 8008, 8033, 8038, 10446, 9495,
           8059, 4912, 8080, 8102, 10465, 8106, 8125, 8129}], 
         Line[{7641, 7668, 7670, 10294, 9428, 7690, 7709, 10307, 7711, 7729, 
          10321, 7731, 7758, 10328, 7760, 7788, 7790, 4587, 7812, 7830, 10363,
           7832, 10377, 9469, 7852, 7880, 10384, 7882, 7910, 7912, 10406, 
          9477, 7933, 7951, 10419, 7953, 7977, 10425, 7979, 8007, 8009, 8037, 
          8039, 4875, 8060, 8079, 10460, 8081, 10466, 9506, 8107, 8128, 
          8130}], 
         Line[{8133, 8131, 8154, 10468, 8155, 8182, 9509, 10476, 8202, 10491, 
          8203, 8223, 9526, 10504, 8243, 8244, 8273, 10525, 8274, 8303, 10533,
           8304, 8324, 10547, 8325, 8344, 9551, 10559, 8365, 8366, 8394, 
          10581, 8395, 8424, 10589, 8425, 8444, 10603, 8445, 8464, 8465, 8491,
           8492, 8521, 10622, 8522, 8550, 10630, 8551, 8571, 9588, 10644, 
          8592, 8593, 8619}], 
         Line[{8134, 8132, 8156, 10469, 8159, 8183, 10478, 8185, 8204, 9520, 
          10493, 8224, 9527, 10506, 8245, 8248, 8275, 10526, 8278, 8305, 
          10535, 8307, 8326, 9544, 10549, 8345, 9552, 10561, 8367, 8370, 8396,
           10582, 8399, 8426, 10591, 8428, 8446, 9570, 10605, 8466, 8469, 
          8493, 8496, 8523, 10623, 8526, 8552, 10632, 8554, 8572, 9589, 10646,
           8594, 8596, 8620}], 
         Line[{8136, 8135, 8158, 10470, 8162, 8184, 9512, 10480, 8205, 9521, 
          10495, 8226, 9528, 10508, 8247, 8251, 8277, 10527, 8281, 8306, 9537,
           10537, 8327, 9545, 10551, 8347, 9553, 10563, 8369, 8373, 8398, 
          10583, 8402, 8427, 10593, 8430, 8447, 9571, 10607, 8468, 8472, 8495,
           8499, 8525, 10624, 8529, 8553, 10634, 8556, 8574, 9590, 10648, 
          8595, 8599, 8622}], 
         Line[{8137, 8139, 8161, 10471, 8167, 8186, 10482, 8191, 8207, 10497, 
          8212, 8228, 10510, 8232, 8250, 8256, 8280, 10528, 8286, 8308, 10539,
           8313, 8329, 10553, 8334, 8349, 10565, 8354, 8372, 8379, 8401, 
          10584, 8407, 8429, 10595, 8434, 8449, 10609, 8454, 8471, 8476, 8498,
           8504, 8528, 10625, 8534, 8555, 10636, 8561, 8576, 10650, 8581, 
          8598, 8604, 8624}], 
         Line[{8138, 8142, 8163, 10472, 8171, 8187, 10484, 8194, 8208, 5028, 
          8229, 9531, 10512, 8252, 8260, 8282, 10529, 8290, 8309, 10541, 8316,
           8330, 5192, 8350, 9555, 10567, 8374, 8383, 8403, 10585, 8411, 8431,
           9563, 10597, 8450, 5356, 8473, 8479, 8500, 8508, 8530, 10626, 8538,
           8557, 9583, 10638, 8577, 5479, 8600, 8608, 8625}], 
         Line[{8140, 8144, 8165, 10473, 8175, 8189, 9515, 10486, 8210, 9523, 
          10500, 8230, 9532, 10513, 8254, 8264, 8284, 10530, 8294, 8311, 
          10543, 8319, 8332, 9548, 10556, 8352, 9556, 10568, 8375, 8386, 8405,
           10586, 8415, 8432, 5319, 8452, 9574, 10612, 8474, 8482, 8502, 8512,
           8532, 10627, 8542, 8559, 10640, 8566, 8579, 9592, 10653, 8602, 
          8611, 8627}], 
         Line[{8141, 8147, 8166, 9507, 10474, 8190, 10488, 8198, 8211, 9524, 
          10501, 8231, 9533, 10515, 8255, 8267, 8285, 10531, 8297, 8312, 9541,
           10545, 8333, 9549, 10557, 8353, 9557, 10570, 8376, 8390, 8406, 
          10587, 8418, 8433, 9566, 10600, 8453, 9575, 10613, 8475, 8485, 8503,
           8515, 8533, 10628, 8545, 8560, 9586, 10642, 8580, 9593, 10654, 
          8603, 8614, 8628}], 
         Line[{8143, 8153, 8168, 10467, 9508, 8192, 10475, 9518, 8213, 10490, 
          9525, 8233, 10503, 9534, 8257, 8272, 8287, 8302, 10524, 8314, 10532,
           9542, 8335, 10546, 9550, 8355, 9559, 10572, 8378, 8393, 8408, 8423,
           10580, 8435, 10588, 9568, 8455, 10602, 9576, 8477, 8490, 8505, 
          8520, 8535, 10621, 9579, 8562, 10629, 9587, 8582, 10643, 9594, 8605,
           8618, 8629}], 
         Line[{8145, 8157, 8170, 10477, 9510, 8193, 10492, 9519, 8215, 8225, 
          10505, 8234, 8246, 10517, 8259, 8276, 8289, 10534, 9535, 8315, 
          10548, 9543, 8336, 8346, 10560, 8356, 8364, 10573, 8380, 8397, 8410,
           10590, 9560, 8437, 10604, 9569, 8456, 8467, 10615, 8478, 8494, 
          8507, 8524, 8537, 10631, 9580, 8563, 8573, 10645, 8583, 10656, 9595,
           8607, 8621, 8631}], 
         Line[{8146, 8160, 8172, 10479, 9511, 8195, 8206, 10494, 8216, 8227, 
          10507, 8235, 8249, 10518, 8261, 8279, 8291, 10536, 9536, 8317, 8328,
           10550, 8337, 8348, 10562, 8357, 8368, 10574, 8382, 8400, 8412, 
          10592, 9561, 8438, 8448, 10606, 8457, 8470, 10616, 8480, 8497, 8509,
           8527, 8539, 10633, 9581, 8564, 8575, 10647, 8584, 8597, 10657, 
          8609, 8623, 8632}], 
         Line[{8148, 8164, 8174, 8188, 10481, 8196, 8209, 10496, 8217, 10509, 
          9529, 8236, 8253, 10519, 8263, 8283, 8293, 8310, 10538, 8318, 8331, 
          10552, 8338, 8351, 10564, 8358, 8371, 10575, 8384, 8404, 8414, 
          10594, 9562, 8439, 8451, 10608, 8458, 10617, 9577, 8481, 8501, 8511,
           8531, 8541, 8558, 10635, 8565, 8578, 10649, 8586, 8601, 10658, 
          8610, 8626, 8634}], 
         Line[{8149, 8169, 8177, 10483, 9513, 8197, 8214, 10498, 8218, 10511, 
          9530, 8238, 8258, 10520, 8266, 8288, 8296, 10540, 9538, 8320, 10554,
           9546, 8339, 10566, 9554, 8360, 8377, 10576, 8387, 8409, 8417, 8436,
           10596, 8440, 10610, 9572, 8459, 10618, 9578, 8484, 8506, 8514, 
          8536, 8544, 10637, 9582, 8567, 10651, 9591, 8587, 8606, 10659, 8613,
           8630, 8636}], 
         Line[{8150, 8173, 8178, 10485, 9514, 8199, 10499, 9522, 8219, 5071, 
          8239, 8262, 10521, 8268, 8292, 8298, 10542, 9539, 8321, 10555, 9547,
           8340, 5235, 8361, 8381, 10577, 8389, 8413, 8419, 10598, 9564, 8441,
           10611, 9573, 8460, 5384, 8486, 8510, 8516, 8540, 8546, 10639, 9584,
           8568, 8585, 10652, 8588, 5507, 8615, 8633, 8637}], 
         Line[{8151, 8176, 8180, 10487, 9516, 8200, 5034, 8221, 8237, 10514, 
          8241, 8265, 10522, 8270, 8295, 8300, 10544, 9540, 8322, 5198, 8342, 
          8359, 10569, 8362, 8385, 10578, 8391, 8416, 8421, 10599, 9565, 8442,
           5362, 8462, 8483, 10619, 8488, 8513, 8518, 8543, 8548, 10641, 9585,
           8569, 5485, 8590, 8612, 10660, 8616, 8635, 8639}], 
         Line[{8152, 8179, 8181, 10489, 9517, 8201, 8220, 10502, 8222, 8240, 
          10516, 8242, 8269, 10523, 8271, 8299, 8301, 5161, 8323, 8341, 10558,
           8343, 10571, 9558, 8363, 8388, 10579, 8392, 8420, 8422, 10601, 
          9567, 8443, 8461, 10614, 8463, 8487, 10620, 8489, 8517, 8519, 8547, 
          8549, 5448, 8570, 8589, 10655, 8591, 10661, 9596, 8617, 8638, 
          8640}], 
         Line[{8643, 8641, 8664, 10663, 8665, 8692, 9599, 10671, 8712, 10686, 
          8713, 8733, 9616, 10699, 8753, 8754, 8783, 10720, 8784, 8813, 10728,
           8814, 8834, 10742, 8835, 8854, 9641, 10754, 8875, 8876, 8904, 
          10776, 8905, 8934, 10784, 8935, 8954, 10798, 8955, 8974, 8975, 9001,
           9002, 9031, 10817, 9032, 9060, 10825, 9061, 9081, 9678, 10839, 
          9102, 9103, 9129}], 
         Line[{8644, 8642, 8666, 10664, 8669, 8693, 10673, 8695, 8714, 9610, 
          10688, 8734, 9617, 10701, 8755, 8758, 8785, 10721, 8788, 8815, 
          10730, 8817, 8836, 9634, 10744, 8855, 9642, 10756, 8877, 8880, 8906,
           10777, 8909, 8936, 10786, 8938, 8956, 9660, 10800, 8976, 8979, 
          9003, 9006, 9033, 10818, 9036, 9062, 10827, 9064, 9082, 9679, 10841,
           9104, 9106, 9130}], 
         Line[{8646, 8645, 8668, 10665, 8672, 8694, 9602, 10675, 8715, 9611, 
          10690, 8736, 9618, 10703, 8757, 8761, 8787, 10722, 8791, 8816, 9627,
           10732, 8837, 9635, 10746, 8857, 9643, 10758, 8879, 8883, 8908, 
          10778, 8912, 8937, 10788, 8940, 8957, 9661, 10802, 8978, 8982, 9005,
           9009, 9035, 10819, 9039, 9063, 10829, 9066, 9084, 9680, 10843, 
          9105, 9109, 9132}], 
         Line[{8647, 8649, 8671, 10666, 8677, 8696, 10677, 8701, 8717, 10692, 
          8722, 8738, 10705, 8742, 8760, 8766, 8790, 10723, 8796, 8818, 10734,
           8823, 8839, 10748, 8844, 8859, 10760, 8864, 8882, 8889, 8911, 
          10779, 8917, 8939, 10790, 8944, 8959, 10804, 8964, 8981, 8986, 9008,
           9014, 9038, 10820, 9044, 9065, 10831, 9071, 9086, 10845, 9091, 
          9108, 9114, 9134}], 
         Line[{8648, 8652, 8673, 10667, 8681, 8697, 10679, 8704, 8718, 5601, 
          8739, 9621, 10707, 8762, 8770, 8792, 10724, 8800, 8819, 10736, 8826,
           8840, 5765, 8860, 9645, 10762, 8884, 8893, 8913, 10780, 8921, 8941,
           9653, 10792, 8960, 5929, 8983, 8989, 9010, 9018, 9040, 10821, 9048,
           9067, 9673, 10833, 9087, 6052, 9110, 9118, 9135}], 
         Line[{8650, 8654, 8675, 10668, 8685, 8699, 9605, 10681, 8720, 9613, 
          10695, 8740, 9622, 10708, 8764, 8774, 8794, 10725, 8804, 8821, 
          10738, 8829, 8842, 9638, 10751, 8862, 9646, 10763, 8885, 8896, 8915,
           10781, 8925, 8942, 5892, 8962, 9664, 10807, 8984, 8992, 9012, 9022,
           9042, 10822, 9052, 9069, 10835, 9076, 9089, 9682, 10848, 9112, 
          9121, 9137}], 
         Line[{8651, 8657, 8676, 9597, 10669, 8700, 10683, 8708, 8721, 9614, 
          10696, 8741, 9623, 10710, 8765, 8777, 8795, 10726, 8807, 8822, 9631,
           10740, 8843, 9639, 10752, 8863, 9647, 10765, 8886, 8900, 8916, 
          10782, 8928, 8943, 9656, 10795, 8963, 9665, 10808, 8985, 8995, 9013,
           9025, 9043, 10823, 9055, 9070, 9676, 10837, 9090, 9683, 10849, 
          9113, 9124, 9138}], 
         Line[{8653, 8663, 8678, 10662, 9598, 8702, 10670, 9608, 8723, 10685, 
          9615, 8743, 10698, 9624, 8767, 8782, 8797, 8812, 10719, 8824, 10727,
           9632, 8845, 10741, 9640, 8865, 9649, 10767, 8888, 8903, 8918, 8933,
           10775, 8945, 10783, 9658, 8965, 10797, 9666, 8987, 9000, 9015, 
          9030, 9045, 10816, 9669, 9072, 10824, 9677, 9092, 10838, 9684, 9115,
           9128, 9139}], 
         Line[{8655, 8667, 8680, 10672, 9600, 8703, 10687, 9609, 8725, 8735, 
          10700, 8744, 8756, 10712, 8769, 8786, 8799, 10729, 9625, 8825, 
          10743, 9633, 8846, 8856, 10755, 8866, 8874, 10768, 8890, 8907, 8920,
           10785, 9650, 8947, 10799, 9659, 8966, 8977, 10810, 8988, 9004, 
          9017, 9034, 9047, 10826, 9670, 9073, 9083, 10840, 9093, 10851, 9685,
           9117, 9131, 9141}], 
         Line[{8656, 8670, 8682, 10674, 9601, 8705, 8716, 10689, 8726, 8737, 
          10702, 8745, 8759, 10713, 8771, 8789, 8801, 10731, 9626, 8827, 8838,
           10745, 8847, 8858, 10757, 8867, 8878, 10769, 8892, 8910, 8922, 
          10787, 9651, 8948, 8958, 10801, 8967, 8980, 10811, 8990, 9007, 9019,
           9037, 9049, 10828, 9671, 9074, 9085, 10842, 9094, 9107, 10852, 
          9119, 9133, 9142}], 
         Line[{8658, 8674, 8684, 8698, 10676, 8706, 8719, 10691, 8727, 10704, 
          9619, 8746, 8763, 10714, 8773, 8793, 8803, 8820, 10733, 8828, 8841, 
          10747, 8848, 8861, 10759, 8868, 8881, 10770, 8894, 8914, 8924, 
          10789, 9652, 8949, 8961, 10803, 8968, 10812, 9667, 8991, 9011, 9021,
           9041, 9051, 9068, 10830, 9075, 9088, 10844, 9096, 9111, 10853, 
          9120, 9136, 9144}], 
         Line[{8659, 8679, 8687, 10678, 9603, 8707, 8724, 10693, 8728, 10706, 
          9620, 8748, 8768, 10715, 8776, 8798, 8806, 10735, 9628, 8830, 10749,
           9636, 8849, 10761, 9644, 8870, 8887, 10771, 8897, 8919, 8927, 8946,
           10791, 8950, 10805, 9662, 8969, 10813, 9668, 8994, 9016, 9024, 
          9046, 9054, 10832, 9672, 9077, 10846, 9681, 9097, 9116, 10854, 9123,
           9140, 9146}], 
         Line[{8660, 8683, 8688, 10680, 9604, 8709, 10694, 9612, 8729, 5644, 
          8749, 8772, 10716, 8778, 8802, 8808, 10737, 9629, 8831, 10750, 9637,
           8850, 5808, 8871, 8891, 10772, 8899, 8923, 8929, 10793, 9654, 8951,
           10806, 9663, 8970, 5957, 8996, 9020, 9026, 9050, 9056, 10834, 9674,
           9078, 9095, 10847, 9098, 6080, 9125, 9143, 9147}], 
         Line[{8661, 8686, 8690, 10682, 9606, 8710, 5607, 8731, 8747, 10709, 
          8751, 8775, 10717, 8780, 8805, 8810, 10739, 9630, 8832, 5771, 8852, 
          8869, 10764, 8872, 8895, 10773, 8901, 8926, 8931, 10794, 9655, 8952,
           5935, 8972, 8993, 10814, 8998, 9023, 9028, 9053, 9058, 10836, 9675,
           9079, 6058, 9100, 9122, 10855, 9126, 9145, 9149}], 
         Line[{8662, 8689, 8691, 10684, 9607, 8711, 8730, 10697, 8732, 8750, 
          10711, 8752, 8779, 10718, 8781, 8809, 8811, 5734, 8833, 8851, 10753,
           8853, 10766, 9648, 8873, 8898, 10774, 8902, 8930, 8932, 10796, 
          9657, 8953, 8971, 10809, 8973, 8997, 10815, 8999, 9027, 9029, 9057, 
          9059, 6021, 9080, 9099, 10850, 9101, 10856, 9686, 9127, 9148, 
          9150}]}, {
         Line[{2645, 3034, 3031, 9821, 3030, 3027, 3026, 9819, 3023, 3022, 
          9818, 3019, 3018, 9816, 3015, 3014, 3011, 9814, 3010, 3007, 3006, 
          9812, 3003, 3002, 9810, 2999, 2998, 9800, 2993, 2992, 2991, 9807, 
          2990, 2989, 2988, 9806, 2987, 2986, 9805, 2985, 2984, 9804, 2983, 
          2982, 2981, 9803, 2980, 2979, 2978, 9802, 2977, 2976, 9801, 2975, 
          2974, 2996}], 
         Line[{2667, 2646, 2647, 9688, 2648, 2649, 9689, 2650, 2651, 2652, 
          9690, 2653, 2654, 2655, 9691, 2656, 2657, 9692, 2658, 2659, 9693, 
          2660, 2661, 2662, 9694, 2663, 2664, 2665, 9687, 2669, 2670, 9697, 
          2673, 2674, 9699, 2677, 2678, 2681, 9701, 2682, 2685, 2686, 9703, 
          2689, 2690, 2693, 9705, 2694, 9707, 2697, 2698, 2701, 9709, 2702, 
          2705, 2706}], 
         Line[{2708, 2666, 2668, 9696, 2671, 2672, 9698, 2675, 2676, 2679, 
          9700, 2680, 2683, 2684, 9702, 2687, 2688, 9704, 2691, 2692, 2695, 
          9706, 2696, 2699, 9708, 2700, 2703, 2704, 9695, 2710, 2711, 9712, 
          2714, 2715, 2718, 9714, 2719, 2722, 9716, 2723, 2726, 2727, 9718, 
          2730, 2731, 9719, 2734, 2735, 2738, 2739, 2742, 9722, 2743, 2746, 
          2747}], 
         Line[{2749, 2707, 2709, 9711, 2712, 2713, 2716, 9713, 2717, 2720, 
          9715, 2721, 2724, 2725, 9717, 2728, 2729, 2732, 2733, 2736, 9720, 
          2737, 2740, 9721, 2741, 2744, 2745, 9710, 2751, 2752, 2755, 9725, 
          2756, 2759, 9727, 2760, 2763, 9729, 2764, 2767, 2768, 9731, 2771, 
          2772, 2775, 2776, 2779, 9734, 2780, 2783, 9736, 2784, 2787, 2788}], 
         Line[{2789, 2748, 2750, 2753, 9724, 2754, 9726, 2757, 2758, 2761, 
          9728, 2762, 2765, 2766, 9730, 2769, 2770, 2773, 9732, 2774, 2777, 
          9733, 2778, 2781, 9735, 2782, 2785, 2786, 9723, 2790, 2791, 9737, 
          2792, 2793, 2794, 9738, 2795, 2796, 9739, 2797, 2798, 2799, 2800, 
          9740, 2801, 9741, 2802, 2803, 2804, 9742, 2805, 2806, 9743, 2807, 
          2808, 2809}], 
         Line[{2831, 2810, 2811, 9745, 2812, 2813, 9746, 2814, 2815, 9747, 
          2816, 2817, 2818, 2819, 9748, 2820, 2821, 9749, 2822, 2823, 9750, 
          2824, 2825, 2826, 9751, 2827, 2828, 2829, 9744, 2833, 2834, 9754, 
          2837, 2838, 2841, 9756, 2842, 2845, 9758, 2846, 2849, 2850, 9760, 
          2853, 2854, 9762, 2857, 2858, 9764, 2861, 2862, 2865, 2866, 2869, 
          2870}], 
         Line[{2872, 2830, 2832, 9753, 2835, 2836, 2839, 9755, 2840, 2843, 
          9757, 2844, 2847, 2848, 9759, 2851, 2852, 9761, 2855, 2856, 9763, 
          2859, 2860, 2863, 9765, 2864, 2867, 2868, 9752, 2874, 2875, 9768, 
          2878, 2879, 2882, 9770, 2883, 2886, 9772, 2887, 2890, 2891, 9774, 
          2894, 2895, 9775, 2898, 2899, 2902, 2903, 2906, 9778, 2907, 2910, 
          2911}], 
         Line[{2913, 2871, 2873, 9767, 2876, 2877, 2880, 9769, 2881, 2884, 
          9771, 2885, 2888, 2889, 9773, 2892, 2893, 2896, 2897, 2900, 9776, 
          2901, 2904, 9777, 2905, 2908, 2909, 9766, 2915, 2916, 9781, 2919, 
          2920, 9783, 2923, 2924, 2927, 9785, 2928, 2931, 2932, 9787, 2935, 
          2936, 2939, 2940, 2943, 9790, 2944, 2947, 9792, 2948, 2951, 2952}], 
         Line[{2953, 2912, 2914, 9780, 2917, 2918, 2921, 9782, 2922, 2925, 
          9784, 2926, 2929, 2930, 9786, 2933, 2934, 2937, 9788, 2938, 9789, 
          2941, 2942, 2945, 9791, 2946, 2949, 2950, 9779, 2954, 2955, 2956, 
          9793, 2957, 2958, 9794, 2959, 9795, 2960, 2961, 2962, 2963, 9796, 
          2964, 2965, 2966, 9797, 2967, 2968, 9798, 2969, 2970, 9799, 2971, 
          2972, 2973}], 
         Line[{2994, 3075, 3072, 9834, 3071, 3068, 3067, 3064, 3063, 9831, 
          3060, 3059, 9830, 3056, 3055, 3052, 9828, 3051, 3048, 9826, 3047, 
          3044, 3043, 9824, 3040, 3039, 9808, 3033, 3032, 3029, 9820, 3028, 
          3025, 3024, 3021, 3020, 9817, 3017, 3016, 9815, 3013, 3012, 3009, 
          9813, 3008, 3005, 3004, 9811, 3001, 3000, 9809, 2997, 2995, 3037}], 
         Line[{3035, 3095, 3094, 9840, 3093, 3092, 3091, 9839, 3090, 3089, 
          3088, 3087, 9838, 3086, 3085, 3084, 9837, 3083, 3082, 9836, 3081, 
          3080, 3079, 9835, 3078, 3077, 9822, 3074, 3073, 3070, 9833, 3069, 
          3066, 9832, 3065, 3062, 3061, 3058, 3057, 9829, 3054, 3053, 3050, 
          9827, 3049, 3046, 9825, 3045, 3042, 3041, 9823, 3038, 3036, 3076}], 
         Line[{336, 335, 6476, 334, 6475, 333, 6473, 332, 6471, 331, 330, 
          6468, 329, 6466, 328, 6464, 327, 6462, 326, 325, 6460, 324, 6459, 
          323, 6457, 322, 6455, 321, 320, 6452, 319, 6450, 318, 6448, 317, 
          316}], 
         Line[{3096, 3157, 3154, 3153, 3150, 9861, 3149, 3146, 3145, 9859, 
          3142, 3141, 9857, 3138, 3137, 3134, 9855, 3133, 3130, 3129, 9853, 
          3126, 3125, 9851, 3122, 3121, 9841, 3116, 3115, 3114, 3113, 9848, 
          3112, 3111, 9847, 3110, 3109, 9846, 3108, 3107, 9845, 3106, 3105, 
          3104, 3103, 9844, 3102, 3101, 9843, 3100, 9842, 3099, 3098, 3097, 
          3119}], 
         Line[{3117, 3198, 3195, 9875, 3194, 3191, 3190, 3187, 3186, 9872, 
          3183, 3182, 9871, 3179, 3178, 3175, 9869, 3174, 3171, 9867, 3170, 
          3167, 3166, 9865, 3163, 3162, 9849, 3156, 3155, 3152, 9862, 3151, 
          3148, 3147, 9860, 3144, 3143, 9858, 3140, 3139, 9856, 3136, 3135, 
          3132, 9854, 3131, 3128, 3127, 9852, 3124, 3123, 9850, 3120, 3118, 
          3160}], 
         Line[{3158, 3218, 3217, 9881, 3216, 3215, 9880, 3214, 3213, 3212, 
          3211, 3210, 9879, 3209, 3208, 3207, 9878, 3206, 3205, 9877, 3204, 
          3203, 3202, 9876, 3201, 3200, 9863, 3197, 3196, 3193, 9874, 3192, 
          3189, 9873, 3188, 3185, 3184, 3181, 3180, 9870, 3177, 3176, 3173, 
          9868, 3172, 3169, 9866, 3168, 3165, 3164, 9864, 3161, 3159, 3199}], 
         Line[{3219, 3608, 3605, 10016, 3604, 3601, 3600, 10014, 3597, 3596, 
          10013, 3593, 3592, 10011, 3589, 3588, 3585, 10009, 3584, 3581, 3580,
           10007, 3577, 3576, 10005, 3573, 3572, 9995, 3567, 3566, 3565, 
          10002, 3564, 3563, 3562, 10001, 3561, 3560, 10000, 3559, 3558, 9999,
           3557, 3556, 3555, 9998, 3554, 3553, 3552, 9997, 3551, 3550, 9996, 
          3549, 3548, 3570}], 
         Line[{3241, 3220, 3221, 9883, 3222, 3223, 9884, 3224, 3225, 3226, 
          9885, 3227, 3228, 3229, 9886, 3230, 3231, 9887, 3232, 3233, 9888, 
          3234, 3235, 3236, 9889, 3237, 3238, 3239, 9882, 3243, 3244, 9892, 
          3247, 3248, 9894, 3251, 3252, 3255, 9896, 3256, 3259, 3260, 9898, 
          3263, 3264, 3267, 9900, 3268, 9902, 3271, 3272, 3275, 9904, 3276, 
          3279, 3280}], 
         Line[{3282, 3240, 3242, 9891, 3245, 3246, 9893, 3249, 3250, 3253, 
          9895, 3254, 3257, 3258, 9897, 3261, 3262, 9899, 3265, 3266, 3269, 
          9901, 3270, 3273, 9903, 3274, 3277, 3278, 9890, 3284, 3285, 9907, 
          3288, 3289, 3292, 9909, 3293, 3296, 9911, 3297, 3300, 3301, 9913, 
          3304, 3305, 9914, 3308, 3309, 3312, 3313, 3316, 9917, 3317, 3320, 
          3321}], 
         Line[{3323, 3281, 3283, 9906, 3286, 3287, 3290, 9908, 3291, 3294, 
          9910, 3295, 3298, 3299, 9912, 3302, 3303, 3306, 3307, 3310, 9915, 
          3311, 3314, 9916, 3315, 3318, 3319, 9905, 3325, 3326, 3329, 9920, 
          3330, 3333, 9922, 3334, 3337, 9924, 3338, 3341, 3342, 9926, 3345, 
          3346, 3349, 3350, 3353, 9929, 3354, 3357, 9931, 3358, 3361, 3362}], 
         Line[{3363, 3322, 3324, 3327, 9919, 3328, 9921, 3331, 3332, 3335, 
          9923, 3336, 3339, 3340, 9925, 3343, 3344, 3347, 9927, 3348, 3351, 
          9928, 3352, 3355, 9930, 3356, 3359, 3360, 9918, 3364, 3365, 9932, 
          3366, 3367, 3368, 9933, 3369, 3370, 9934, 3371, 3372, 3373, 3374, 
          9935, 3375, 9936, 3376, 3377, 3378, 9937, 3379, 3380, 9938, 3381, 
          3382, 3383}], 
         Line[{3405, 3384, 3385, 9940, 3386, 3387, 9941, 3388, 3389, 9942, 
          3390, 3391, 3392, 3393, 9943, 3394, 3395, 9944, 3396, 3397, 9945, 
          3398, 3399, 3400, 9946, 3401, 3402, 3403, 9939, 3407, 3408, 9949, 
          3411, 3412, 3415, 9951, 3416, 3419, 9953, 3420, 3423, 3424, 9955, 
          3427, 3428, 9957, 3431, 3432, 9959, 3435, 3436, 3439, 3440, 3443, 
          3444}], 
         Line[{3446, 3404, 3406, 9948, 3409, 3410, 3413, 9950, 3414, 3417, 
          9952, 3418, 3421, 3422, 9954, 3425, 3426, 9956, 3429, 3430, 9958, 
          3433, 3434, 3437, 9960, 3438, 3441, 3442, 9947, 3448, 3449, 9963, 
          3452, 3453, 3456, 9965, 3457, 3460, 9967, 3461, 3464, 3465, 9969, 
          3468, 3469, 9970, 3472, 3473, 3476, 3477, 3480, 9973, 3481, 3484, 
          3485}], 
         Line[{3487, 3445, 3447, 9962, 3450, 3451, 3454, 9964, 3455, 3458, 
          9966, 3459, 3462, 3463, 9968, 3466, 3467, 3470, 3471, 3474, 9971, 
          3475, 3478, 9972, 3479, 3482, 3483, 9961, 3489, 3490, 9976, 3493, 
          3494, 9978, 3497, 3498, 3501, 9980, 3502, 3505, 3506, 9982, 3509, 
          3510, 3513, 3514, 3517, 9985, 3518, 3521, 9987, 3522, 3525, 3526}], 
         Line[{3527, 3486, 3488, 9975, 3491, 3492, 3495, 9977, 3496, 3499, 
          9979, 3500, 3503, 3504, 9981, 3507, 3508, 3511, 9983, 3512, 9984, 
          3515, 3516, 3519, 9986, 3520, 3523, 3524, 9974, 3528, 3529, 3530, 
          9988, 3531, 3532, 9989, 3533, 9990, 3534, 3535, 3536, 3537, 9991, 
          3538, 3539, 3540, 9992, 3541, 3542, 9993, 3543, 3544, 9994, 3545, 
          3546, 3547}], 
         Line[{3568, 3649, 3646, 10029, 3645, 3642, 3641, 3638, 3637, 10026, 
          3634, 3633, 10025, 3630, 3629, 3626, 10023, 3625, 3622, 10021, 3621,
           3618, 3617, 10019, 3614, 3613, 10003, 3607, 3606, 3603, 10015, 
          3602, 3599, 3598, 3595, 3594, 10012, 3591, 3590, 10010, 3587, 3586, 
          3583, 10008, 3582, 3579, 3578, 10006, 3575, 3574, 10004, 3571, 3569,
           3611}], 
         Line[{3609, 3669, 3668, 10035, 3667, 3666, 3665, 10034, 3664, 3663, 
          3662, 3661, 10033, 3660, 3659, 3658, 10032, 3657, 3656, 10031, 3655,
           3654, 3653, 10030, 3652, 3651, 10017, 3648, 3647, 3644, 10028, 
          3643, 3640, 10027, 3639, 3636, 3635, 3632, 3631, 10024, 3628, 3627, 
          3624, 10022, 3623, 3620, 10020, 3619, 3616, 3615, 10018, 3612, 3610,
           3650}], 
         Line[{777, 776, 6987, 775, 6986, 774, 6984, 773, 6982, 772, 771, 
          6979, 770, 6977, 769, 6975, 768, 6973, 767, 766, 6971, 765, 6970, 
          764, 6968, 763, 6966, 762, 761, 6963, 760, 6961, 759, 6959, 758, 
          757}], 
         Line[{3670, 3731, 3728, 3727, 3724, 10056, 3723, 3720, 3719, 10054, 
          3716, 3715, 10052, 3712, 3711, 3708, 10050, 3707, 3704, 3703, 10048,
           3700, 3699, 10046, 3696, 3695, 10036, 3690, 3689, 3688, 3687, 
          10043, 3686, 3685, 10042, 3684, 3683, 10041, 3682, 3681, 10040, 
          3680, 3679, 3678, 3677, 10039, 3676, 3675, 10038, 3674, 10037, 3673,
           3672, 3671, 3693}], 
         Line[{3691, 3772, 3769, 10070, 3768, 3765, 3764, 3761, 3760, 10067, 
          3757, 3756, 10066, 3753, 3752, 3749, 10064, 3748, 3745, 10062, 3744,
           3741, 3740, 10060, 3737, 3736, 10044, 3730, 3729, 3726, 10057, 
          3725, 3722, 3721, 10055, 3718, 3717, 10053, 3714, 3713, 10051, 3710,
           3709, 3706, 10049, 3705, 3702, 3701, 10047, 3698, 3697, 10045, 
          3694, 3692, 3734}], 
         Line[{3732, 3792, 3791, 10076, 3790, 3789, 10075, 3788, 3787, 3786, 
          3785, 3784, 10074, 3783, 3782, 3781, 10073, 3780, 3779, 10072, 3778,
           3777, 3776, 10071, 3775, 3774, 10058, 3771, 3770, 3767, 10069, 
          3766, 3763, 10068, 3762, 3759, 3758, 3755, 3754, 10065, 3751, 3750, 
          3747, 10063, 3746, 3743, 10061, 3742, 3739, 3738, 10059, 3735, 3733,
           3773}], 
         Line[{3793, 4182, 4179, 10211, 4178, 4175, 4174, 10209, 4171, 4170, 
          10208, 4167, 4166, 10206, 4163, 4162, 4159, 10204, 4158, 4155, 4154,
           10202, 4151, 4150, 10200, 4147, 4146, 10190, 4141, 4140, 4139, 
          10197, 4138, 4137, 4136, 10196, 4135, 4134, 10195, 4133, 4132, 
          10194, 4131, 4130, 4129, 10193, 4128, 4127, 4126, 10192, 4125, 4124,
           10191, 4123, 4122, 4144}], 
         Line[{3815, 3794, 3795, 10078, 3796, 3797, 10079, 3798, 3799, 3800, 
          10080, 3801, 3802, 3803, 10081, 3804, 3805, 10082, 3806, 3807, 
          10083, 3808, 3809, 3810, 10084, 3811, 3812, 3813, 10077, 3817, 3818,
           10087, 3821, 3822, 10089, 3825, 3826, 3829, 10091, 3830, 3833, 
          3834, 10093, 3837, 3838, 3841, 10095, 3842, 10097, 3845, 3846, 3849,
           10099, 3850, 3853, 3854}], 
         Line[{3856, 3814, 3816, 10086, 3819, 3820, 10088, 3823, 3824, 3827, 
          10090, 3828, 3831, 3832, 10092, 3835, 3836, 10094, 3839, 3840, 3843,
           10096, 3844, 3847, 10098, 3848, 3851, 3852, 10085, 3858, 3859, 
          10102, 3862, 3863, 3866, 10104, 3867, 3870, 10106, 3871, 3874, 3875,
           10108, 3878, 3879, 10109, 3882, 3883, 3886, 3887, 3890, 10112, 
          3891, 3894, 3895}], 
         Line[{3897, 3855, 3857, 10101, 3860, 3861, 3864, 10103, 3865, 3868, 
          10105, 3869, 3872, 3873, 10107, 3876, 3877, 3880, 3881, 3884, 10110,
           3885, 3888, 10111, 3889, 3892, 3893, 10100, 3899, 3900, 3903, 
          10115, 3904, 3907, 10117, 3908, 3911, 10119, 3912, 3915, 3916, 
          10121, 3919, 3920, 3923, 3924, 3927, 10124, 3928, 3931, 10126, 3932,
           3935, 3936}], 
         Line[{3937, 3896, 3898, 3901, 10114, 3902, 10116, 3905, 3906, 3909, 
          10118, 3910, 3913, 3914, 10120, 3917, 3918, 3921, 10122, 3922, 3925,
           10123, 3926, 3929, 10125, 3930, 3933, 3934, 10113, 3938, 3939, 
          10127, 3940, 3941, 3942, 10128, 3943, 3944, 10129, 3945, 3946, 3947,
           3948, 10130, 3949, 10131, 3950, 3951, 3952, 10132, 3953, 3954, 
          10133, 3955, 3956, 3957}], 
         Line[{3979, 3958, 3959, 10135, 3960, 3961, 10136, 3962, 3963, 10137, 
          3964, 3965, 3966, 3967, 10138, 3968, 3969, 10139, 3970, 3971, 10140,
           3972, 3973, 3974, 10141, 3975, 3976, 3977, 10134, 3981, 3982, 
          10144, 3985, 3986, 3989, 10146, 3990, 3993, 10148, 3994, 3997, 3998,
           10150, 4001, 4002, 10152, 4005, 4006, 10154, 4009, 4010, 4013, 
          4014, 4017, 4018}], 
         Line[{4020, 3978, 3980, 10143, 3983, 3984, 3987, 10145, 3988, 3991, 
          10147, 3992, 3995, 3996, 10149, 3999, 4000, 10151, 4003, 4004, 
          10153, 4007, 4008, 4011, 10155, 4012, 4015, 4016, 10142, 4022, 4023,
           10158, 4026, 4027, 4030, 10160, 4031, 4034, 10162, 4035, 4038, 
          4039, 10164, 4042, 4043, 10165, 4046, 4047, 4050, 4051, 4054, 10168,
           4055, 4058, 4059}], 
         Line[{4061, 4019, 4021, 10157, 4024, 4025, 4028, 10159, 4029, 4032, 
          10161, 4033, 4036, 4037, 10163, 4040, 4041, 4044, 4045, 4048, 10166,
           4049, 4052, 10167, 4053, 4056, 4057, 10156, 4063, 4064, 10171, 
          4067, 4068, 10173, 4071, 4072, 4075, 10175, 4076, 4079, 4080, 10177,
           4083, 4084, 4087, 4088, 4091, 10180, 4092, 4095, 10182, 4096, 4099,
           4100}], 
         Line[{4101, 4060, 4062, 10170, 4065, 4066, 4069, 10172, 4070, 4073, 
          10174, 4074, 4077, 4078, 10176, 4081, 4082, 4085, 10178, 4086, 
          10179, 4089, 4090, 4093, 10181, 4094, 4097, 4098, 10169, 4102, 4103,
           4104, 10183, 4105, 4106, 10184, 4107, 10185, 4108, 4109, 4110, 
          4111, 10186, 4112, 4113, 4114, 10187, 4115, 4116, 10188, 4117, 4118,
           10189, 4119, 4120, 4121}], 
         Line[{4142, 4223, 4220, 10224, 4219, 4216, 4215, 4212, 4211, 10221, 
          4208, 4207, 10220, 4204, 4203, 4200, 10218, 4199, 4196, 10216, 4195,
           4192, 4191, 10214, 4188, 4187, 10198, 4181, 4180, 4177, 10210, 
          4176, 4173, 4172, 4169, 4168, 10207, 4165, 4164, 10205, 4161, 4160, 
          4157, 10203, 4156, 4153, 4152, 10201, 4149, 4148, 10199, 4145, 4143,
           4185}], 
         Line[{4183, 4243, 4242, 10230, 4241, 4240, 4239, 10229, 4238, 4237, 
          4236, 4235, 10228, 4234, 4233, 4232, 10227, 4231, 4230, 10226, 4229,
           4228, 4227, 10225, 4226, 4225, 10212, 4222, 4221, 4218, 10223, 
          4217, 4214, 10222, 4213, 4210, 4209, 4206, 4205, 10219, 4202, 4201, 
          4198, 10217, 4197, 4194, 10215, 4193, 4190, 4189, 10213, 4186, 4184,
           4224}], 
         Line[{1218, 1217, 7498, 1216, 7497, 1215, 7495, 1214, 7493, 1213, 
          1212, 7490, 1211, 7488, 1210, 7486, 1209, 7484, 1208, 1207, 7482, 
          1206, 7481, 1205, 7479, 1204, 7477, 1203, 1202, 7474, 1201, 7472, 
          1200, 7470, 1199, 1198}], 
         Line[{4244, 4305, 4302, 4301, 4298, 10251, 4297, 4294, 4293, 10249, 
          4290, 4289, 10247, 4286, 4285, 4282, 10245, 4281, 4278, 4277, 10243,
           4274, 4273, 10241, 4270, 4269, 10231, 4264, 4263, 4262, 4261, 
          10238, 4260, 4259, 10237, 4258, 4257, 10236, 4256, 4255, 10235, 
          4254, 4253, 4252, 4251, 10234, 4250, 4249, 10233, 4248, 10232, 4247,
           4246, 4245, 4267}], 
         Line[{4265, 4346, 4343, 10265, 4342, 4339, 4338, 4335, 4334, 10262, 
          4331, 4330, 10261, 4327, 4326, 4323, 10259, 4322, 4319, 10257, 4318,
           4315, 4314, 10255, 4311, 4310, 10239, 4304, 4303, 4300, 10252, 
          4299, 4296, 4295, 10250, 4292, 4291, 10248, 4288, 4287, 10246, 4284,
           4283, 4280, 10244, 4279, 4276, 4275, 10242, 4272, 4271, 10240, 
          4268, 4266, 4308}], 
         Line[{4306, 4366, 4365, 10271, 4364, 4363, 10270, 4362, 4361, 4360, 
          4359, 4358, 10269, 4357, 4356, 4355, 10268, 4354, 4353, 10267, 4352,
           4351, 4350, 10266, 4349, 4348, 10253, 4345, 4344, 4341, 10264, 
          4340, 4337, 10263, 4336, 4333, 4332, 4329, 4328, 10260, 4325, 4324, 
          4321, 10258, 4320, 4317, 10256, 4316, 4313, 4312, 10254, 4309, 4307,
           4347}], 
         Line[{4367, 4756, 4753, 10406, 4752, 4749, 4748, 10404, 4745, 4744, 
          10403, 4741, 4740, 10401, 4737, 4736, 4733, 10399, 4732, 4729, 4728,
           10397, 4725, 4724, 10395, 4721, 4720, 10385, 4715, 4714, 4713, 
          10392, 4712, 4711, 4710, 10391, 4709, 4708, 10390, 4707, 4706, 
          10389, 4705, 4704, 4703, 10388, 4702, 4701, 4700, 10387, 4699, 4698,
           10386, 4697, 4696, 4718}], 
         Line[{4389, 4368, 4369, 10273, 4370, 4371, 10274, 4372, 4373, 4374, 
          10275, 4375, 4376, 4377, 10276, 4378, 4379, 10277, 4380, 4381, 
          10278, 4382, 4383, 4384, 10279, 4385, 4386, 4387, 10272, 4391, 4392,
           10282, 4395, 4396, 10284, 4399, 4400, 4403, 10286, 4404, 4407, 
          4408, 10288, 4411, 4412, 4415, 10290, 4416, 10292, 4419, 4420, 4423,
           10294, 4424, 4427, 4428}], 
         Line[{4430, 4388, 4390, 10281, 4393, 4394, 10283, 4397, 4398, 4401, 
          10285, 4402, 4405, 4406, 10287, 4409, 4410, 10289, 4413, 4414, 4417,
           10291, 4418, 4421, 10293, 4422, 4425, 4426, 10280, 4432, 4433, 
          10297, 4436, 4437, 4440, 10299, 4441, 4444, 10301, 4445, 4448, 4449,
           10303, 4452, 4453, 10304, 4456, 4457, 4460, 4461, 4464, 10307, 
          4465, 4468, 4469}], 
         Line[{4471, 4429, 4431, 10296, 4434, 4435, 4438, 10298, 4439, 4442, 
          10300, 4443, 4446, 4447, 10302, 4450, 4451, 4454, 4455, 4458, 10305,
           4459, 4462, 10306, 4463, 4466, 4467, 10295, 4473, 4474, 4477, 
          10310, 4478, 4481, 10312, 4482, 4485, 10314, 4486, 4489, 4490, 
          10316, 4493, 4494, 4497, 4498, 4501, 10319, 4502, 4505, 10321, 4506,
           4509, 4510}], 
         Line[{4511, 4470, 4472, 4475, 10309, 4476, 10311, 4479, 4480, 4483, 
          10313, 4484, 4487, 4488, 10315, 4491, 4492, 4495, 10317, 4496, 4499,
           10318, 4500, 4503, 10320, 4504, 4507, 4508, 10308, 4512, 4513, 
          10322, 4514, 4515, 4516, 10323, 4517, 4518, 10324, 4519, 4520, 4521,
           4522, 10325, 4523, 10326, 4524, 4525, 4526, 10327, 4527, 4528, 
          10328, 4529, 4530, 4531}], 
         Line[{4553, 4532, 4533, 10330, 4534, 4535, 10331, 4536, 4537, 10332, 
          4538, 4539, 4540, 4541, 10333, 4542, 4543, 10334, 4544, 4545, 10335,
           4546, 4547, 4548, 10336, 4549, 4550, 4551, 10329, 4555, 4556, 
          10339, 4559, 4560, 4563, 10341, 4564, 4567, 10343, 4568, 4571, 4572,
           10345, 4575, 4576, 10347, 4579, 4580, 10349, 4583, 4584, 4587, 
          4588, 4591, 4592}], 
         Line[{4594, 4552, 4554, 10338, 4557, 4558, 4561, 10340, 4562, 4565, 
          10342, 4566, 4569, 4570, 10344, 4573, 4574, 10346, 4577, 4578, 
          10348, 4581, 4582, 4585, 10350, 4586, 4589, 4590, 10337, 4596, 4597,
           10353, 4600, 4601, 4604, 10355, 4605, 4608, 10357, 4609, 4612, 
          4613, 10359, 4616, 4617, 10360, 4620, 4621, 4624, 4625, 4628, 10363,
           4629, 4632, 4633}], 
         Line[{4635, 4593, 4595, 10352, 4598, 4599, 4602, 10354, 4603, 4606, 
          10356, 4607, 4610, 4611, 10358, 4614, 4615, 4618, 4619, 4622, 10361,
           4623, 4626, 10362, 4627, 4630, 4631, 10351, 4637, 4638, 10366, 
          4641, 4642, 10368, 4645, 4646, 4649, 10370, 4650, 4653, 4654, 10372,
           4657, 4658, 4661, 4662, 4665, 10375, 4666, 4669, 10377, 4670, 4673,
           4674}], 
         Line[{4675, 4634, 4636, 10365, 4639, 4640, 4643, 10367, 4644, 4647, 
          10369, 4648, 4651, 4652, 10371, 4655, 4656, 4659, 10373, 4660, 
          10374, 4663, 4664, 4667, 10376, 4668, 4671, 4672, 10364, 4676, 4677,
           4678, 10378, 4679, 4680, 10379, 4681, 10380, 4682, 4683, 4684, 
          4685, 10381, 4686, 4687, 4688, 10382, 4689, 4690, 10383, 4691, 4692,
           10384, 4693, 4694, 4695}], 
         Line[{4716, 4797, 4794, 10419, 4793, 4790, 4789, 4786, 4785, 10416, 
          4782, 4781, 10415, 4778, 4777, 4774, 10413, 4773, 4770, 10411, 4769,
           4766, 4765, 10409, 4762, 4761, 10393, 4755, 4754, 4751, 10405, 
          4750, 4747, 4746, 4743, 4742, 10402, 4739, 4738, 10400, 4735, 4734, 
          4731, 10398, 4730, 4727, 4726, 10396, 4723, 4722, 10394, 4719, 4717,
           4759}], 
         Line[{4757, 4817, 4816, 10425, 4815, 4814, 4813, 10424, 4812, 4811, 
          4810, 4809, 10423, 4808, 4807, 4806, 10422, 4805, 4804, 10421, 4803,
           4802, 4801, 10420, 4800, 4799, 10407, 4796, 4795, 4792, 10418, 
          4791, 4788, 10417, 4787, 4784, 4783, 4780, 4779, 10414, 4776, 4775, 
          4772, 10412, 4771, 4768, 10410, 4767, 4764, 4763, 10408, 4760, 4758,
           4798}], 
         Line[{1659, 1658, 8009, 1657, 8008, 1656, 8006, 1655, 8004, 1654, 
          1653, 8001, 1652, 7999, 1651, 7997, 1650, 7995, 1649, 1648, 7993, 
          1647, 7992, 1646, 7990, 1645, 7988, 1644, 1643, 7985, 1642, 7983, 
          1641, 7981, 1640, 1639}], 
         Line[{4818, 4879, 4876, 4875, 4872, 10446, 4871, 4868, 4867, 10444, 
          4864, 4863, 10442, 4860, 4859, 4856, 10440, 4855, 4852, 4851, 10438,
           4848, 4847, 10436, 4844, 4843, 10426, 4838, 4837, 4836, 4835, 
          10433, 4834, 4833, 10432, 4832, 4831, 10431, 4830, 4829, 10430, 
          4828, 4827, 4826, 4825, 10429, 4824, 4823, 10428, 4822, 10427, 4821,
           4820, 4819, 4841}], 
         Line[{4839, 4920, 4917, 10460, 4916, 4913, 4912, 4909, 4908, 10457, 
          4905, 4904, 10456, 4901, 4900, 4897, 10454, 4896, 4893, 10452, 4892,
           4889, 4888, 10450, 4885, 4884, 10434, 4878, 4877, 4874, 10447, 
          4873, 4870, 4869, 10445, 4866, 4865, 10443, 4862, 4861, 10441, 4858,
           4857, 4854, 10439, 4853, 4850, 4849, 10437, 4846, 4845, 10435, 
          4842, 4840, 4882}], 
         Line[{4880, 4940, 4939, 10466, 4938, 4937, 10465, 4936, 4935, 4934, 
          4933, 4932, 10464, 4931, 4930, 4929, 10463, 4928, 4927, 10462, 4926,
           4925, 4924, 10461, 4923, 4922, 10448, 4919, 4918, 4915, 10459, 
          4914, 4911, 10458, 4910, 4907, 4906, 4903, 4902, 10455, 4899, 4898, 
          4895, 10453, 4894, 4891, 10451, 4890, 4887, 4886, 10449, 4883, 4881,
           4921}], 
         Line[{4941, 5329, 5326, 10601, 5325, 5322, 5321, 10599, 5318, 5317, 
          10598, 5314, 5313, 10596, 5310, 5309, 5306, 10594, 5305, 5302, 5301,
           10592, 5298, 5297, 10590, 5294, 5293, 10580, 5288, 5287, 5286, 
          10587, 5285, 5284, 5283, 10586, 5282, 5281, 10585, 5280, 5279, 
          10584, 5278, 5277, 5276, 10583, 5275, 5274, 5273, 10582, 5272, 5271,
           10581, 5270, 5269, 5291}], 
         Line[{4963, 4942, 4943, 10468, 4944, 4945, 10469, 4946, 4947, 4948, 
          10470, 4949, 4950, 4951, 10471, 4952, 4953, 10472, 4954, 4955, 
          10473, 4956, 4957, 4958, 10474, 4959, 4960, 4961, 10467, 4965, 4966,
           10477, 4969, 4970, 10479, 4973, 4974, 4977, 10481, 4978, 4981, 
          4982, 10483, 4985, 4986, 4989, 10485, 4990, 10487, 4993, 4994, 4997,
           10489, 4998, 5001, 5002}], 
         Line[{5004, 4962, 4964, 10476, 4967, 4968, 10478, 4971, 4972, 4975, 
          10480, 4976, 4979, 4980, 10482, 4983, 4984, 10484, 4987, 4988, 4991,
           10486, 4992, 4995, 10488, 4996, 4999, 5000, 10475, 5006, 5007, 
          10492, 5010, 5011, 5014, 10494, 5015, 5018, 10496, 5019, 5022, 5023,
           10498, 5026, 5027, 10499, 5030, 5031, 5034, 5035, 5038, 10502, 
          5039, 5042, 5043}], 
         Line[{5045, 5003, 5005, 10491, 5008, 5009, 5012, 10493, 5013, 5016, 
          10495, 5017, 5020, 5021, 10497, 5024, 5025, 5028, 5029, 5032, 10500,
           5033, 5036, 10501, 5037, 5040, 5041, 10490, 5047, 5048, 5051, 
          10505, 5052, 5055, 10507, 5056, 5059, 10509, 5060, 5063, 5064, 
          10511, 5067, 5068, 5071, 5072, 5075, 10514, 5076, 5079, 10516, 5080,
           5083, 5084}], 
         Line[{5085, 5044, 5046, 5049, 10504, 5050, 10506, 5053, 5054, 5057, 
          10508, 5058, 5061, 5062, 10510, 5065, 5066, 5069, 10512, 5070, 5073,
           10513, 5074, 5077, 10515, 5078, 5081, 5082, 10503, 5086, 5087, 
          10517, 5088, 5089, 5090, 10518, 5091, 5092, 10519, 5093, 5094, 5095,
           5096, 10520, 5097, 10521, 5098, 5099, 5100, 10522, 5101, 5102, 
          10523, 5103, 5104, 5105}], 
         Line[{5127, 5106, 5107, 10525, 5108, 5109, 10526, 5110, 5111, 10527, 
          5112, 5113, 5114, 5115, 10528, 5116, 5117, 10529, 5118, 5119, 10530,
           5120, 5121, 5122, 10531, 5123, 5124, 5125, 10524, 5129, 5130, 
          10534, 5133, 5134, 5137, 10536, 5138, 5141, 10538, 5142, 5145, 5146,
           10540, 5149, 5150, 10542, 5153, 5154, 10544, 5157, 5158, 5161, 
          5162, 5165, 5166}], 
         Line[{5168, 5126, 5128, 10533, 5131, 5132, 5135, 10535, 5136, 5139, 
          10537, 5140, 5143, 5144, 10539, 5147, 5148, 10541, 5151, 5152, 
          10543, 5155, 5156, 5159, 10545, 5160, 5163, 5164, 10532, 5170, 5171,
           10548, 5174, 5175, 5178, 10550, 5179, 5182, 10552, 5183, 5186, 
          5187, 10554, 5190, 5191, 10555, 5194, 5195, 5198, 5199, 5202, 10558,
           5203, 5206, 5207}], 
         Line[{5209, 5167, 5169, 10547, 5172, 5173, 5176, 10549, 5177, 5180, 
          10551, 5181, 5184, 5185, 10553, 5188, 5189, 5192, 5193, 5196, 10556,
           5197, 5200, 10557, 5201, 5204, 5205, 10546, 5211, 5212, 10560, 
          5215, 5216, 10562, 5219, 5220, 5223, 10564, 5224, 5227, 5228, 10566,
           5231, 5232, 5235, 5236, 5239, 10569, 5240, 5243, 10571, 5244, 5247,
           5248}], 
         Line[{5249, 5208, 5210, 10559, 5213, 5214, 5217, 10561, 5218, 5221, 
          10563, 5222, 5225, 5226, 10565, 5229, 5230, 5233, 10567, 5234, 
          10568, 5237, 5238, 5241, 10570, 5242, 5245, 10572, 5246, 5250, 5251,
           10573, 5252, 5253, 10574, 5254, 10575, 5255, 5256, 5257, 5258, 
          10576, 5259, 5260, 5261, 10577, 5262, 5263, 10578, 5264, 5265, 
          10579, 5266, 5267, 5268}], 
         Line[{5289, 5370, 5367, 10614, 5366, 5363, 5362, 5359, 5358, 10611, 
          5355, 5354, 10610, 5351, 5350, 5347, 10608, 5346, 5343, 10606, 5342,
           5339, 5338, 10604, 5335, 5334, 10588, 5328, 5327, 5324, 10600, 
          5323, 5320, 5319, 5316, 5315, 10597, 5312, 5311, 10595, 5308, 5307, 
          5304, 10593, 5303, 5300, 5299, 10591, 5296, 5295, 10589, 5292, 5290,
           5332}], 
         Line[{5330, 5390, 5389, 10620, 5388, 5387, 5386, 10619, 5385, 5384, 
          5383, 5382, 10618, 5381, 5380, 5379, 10617, 5378, 5377, 10616, 5376,
           5375, 5374, 10615, 5373, 5372, 10602, 5369, 5368, 5365, 10613, 
          5364, 5361, 10612, 5360, 5357, 5356, 5353, 5352, 10609, 5349, 5348, 
          5345, 10607, 5344, 5341, 10605, 5340, 5337, 5336, 10603, 5333, 5331,
           5371}], 
         Line[{2099, 2098, 8519, 2097, 8518, 2096, 8516, 2095, 8514, 2094, 
          2093, 8511, 2092, 8509, 2091, 8507, 2090, 8505, 2089, 2088, 8503, 
          2087, 8502, 2086, 8500, 2085, 8498, 2084, 2083, 8495, 2082, 8493, 
          2081, 8491, 2080, 2079}], 
         Line[{5391, 5452, 5449, 5448, 5445, 10641, 5444, 5441, 5440, 10639, 
          5437, 5436, 10637, 5433, 5432, 5429, 10635, 5428, 5425, 5424, 10633,
           5421, 5420, 10631, 5417, 5416, 10621, 5411, 5410, 5409, 5408, 
          10628, 5407, 5406, 10627, 5405, 5404, 10626, 5403, 5402, 10625, 
          5401, 5400, 5399, 5398, 10624, 5397, 5396, 10623, 5395, 10622, 5394,
           5393, 5392, 5414}], 
         Line[{5412, 5493, 5490, 10655, 5489, 5486, 5485, 5482, 5481, 10652, 
          5478, 5477, 10651, 5474, 5473, 5470, 10649, 5469, 5466, 10647, 5465,
           5462, 5461, 10645, 5458, 5457, 10629, 5451, 5450, 5447, 10642, 
          5446, 5443, 5442, 10640, 5439, 5438, 10638, 5435, 5434, 10636, 5431,
           5430, 5427, 10634, 5426, 5423, 5422, 10632, 5419, 5418, 10630, 
          5415, 5413, 5455}], 
         Line[{5453, 5513, 5512, 10661, 5511, 5510, 10660, 5509, 5508, 5507, 
          5506, 5505, 10659, 5504, 5503, 5502, 10658, 5501, 5500, 10657, 5499,
           5498, 5497, 10656, 5496, 5495, 10643, 5492, 5491, 5488, 10654, 
          5487, 5484, 10653, 5483, 5480, 5479, 5476, 5475, 10650, 5472, 5471, 
          5468, 10648, 5467, 5464, 10646, 5463, 5460, 5459, 10644, 5456, 5454,
           5494}], 
         Line[{5514, 5902, 5899, 10796, 5898, 5895, 5894, 10794, 5891, 5890, 
          10793, 5887, 5886, 10791, 5883, 5882, 5879, 10789, 5878, 5875, 5874,
           10787, 5871, 5870, 10785, 5867, 5866, 10775, 5861, 5860, 5859, 
          10782, 5858, 5857, 5856, 10781, 5855, 5854, 10780, 5853, 5852, 
          10779, 5851, 5850, 5849, 10778, 5848, 5847, 5846, 10777, 5845, 5844,
           10776, 5843, 5842, 5864}], 
         Line[{5536, 5515, 5516, 10663, 5517, 5518, 10664, 5519, 5520, 5521, 
          10665, 5522, 5523, 5524, 10666, 5525, 5526, 10667, 5527, 5528, 
          10668, 5529, 5530, 5531, 10669, 5532, 5533, 5534, 10662, 5538, 5539,
           10672, 5542, 5543, 10674, 5546, 5547, 5550, 10676, 5551, 5554, 
          5555, 10678, 5558, 5559, 5562, 10680, 5563, 10682, 5566, 5567, 5570,
           10684, 5571, 5574, 5575}], 
         Line[{5577, 5535, 5537, 10671, 5540, 5541, 10673, 5544, 5545, 5548, 
          10675, 5549, 5552, 5553, 10677, 5556, 5557, 10679, 5560, 5561, 5564,
           10681, 5565, 5568, 10683, 5569, 5572, 5573, 10670, 5579, 5580, 
          10687, 5583, 5584, 5587, 10689, 5588, 5591, 10691, 5592, 5595, 5596,
           10693, 5599, 5600, 10694, 5603, 5604, 5607, 5608, 5611, 10697, 
          5612, 5615, 5616}], 
         Line[{5618, 5576, 5578, 10686, 5581, 5582, 5585, 10688, 5586, 5589, 
          10690, 5590, 5593, 5594, 10692, 5597, 5598, 5601, 5602, 5605, 10695,
           5606, 5609, 10696, 5610, 5613, 5614, 10685, 5620, 5621, 5624, 
          10700, 5625, 5628, 10702, 5629, 5632, 10704, 5633, 5636, 5637, 
          10706, 5640, 5641, 5644, 5645, 5648, 10709, 5649, 5652, 10711, 5653,
           5656, 5657}], 
         Line[{5658, 5617, 5619, 5622, 10699, 5623, 10701, 5626, 5627, 5630, 
          10703, 5631, 5634, 5635, 10705, 5638, 5639, 5642, 10707, 5643, 5646,
           10708, 5647, 5650, 10710, 5651, 5654, 5655, 10698, 5659, 5660, 
          10712, 5661, 5662, 5663, 10713, 5664, 5665, 10714, 5666, 5667, 5668,
           5669, 10715, 5670, 10716, 5671, 5672, 5673, 10717, 5674, 5675, 
          10718, 5676, 5677, 5678}], 
         Line[{5700, 5679, 5680, 10720, 5681, 5682, 10721, 5683, 5684, 10722, 
          5685, 5686, 5687, 5688, 10723, 5689, 5690, 10724, 5691, 5692, 10725,
           5693, 5694, 5695, 10726, 5696, 5697, 5698, 10719, 5702, 5703, 
          10729, 5706, 5707, 5710, 10731, 5711, 5714, 10733, 5715, 5718, 5719,
           10735, 5722, 5723, 10737, 5726, 5727, 10739, 5730, 5731, 5734, 
          5735, 5738, 5739}], 
         Line[{5741, 5699, 5701, 10728, 5704, 5705, 5708, 10730, 5709, 5712, 
          10732, 5713, 5716, 5717, 10734, 5720, 5721, 10736, 5724, 5725, 
          10738, 5728, 5729, 5732, 10740, 5733, 5736, 5737, 10727, 5743, 5744,
           10743, 5747, 5748, 5751, 10745, 5752, 5755, 10747, 5756, 5759, 
          5760, 10749, 5763, 5764, 10750, 5767, 5768, 5771, 5772, 5775, 10753,
           5776, 5779, 5780}], 
         Line[{5782, 5740, 5742, 10742, 5745, 5746, 5749, 10744, 5750, 5753, 
          10746, 5754, 5757, 5758, 10748, 5761, 5762, 5765, 5766, 5769, 10751,
           5770, 5773, 10752, 5774, 5777, 5778, 10741, 5784, 5785, 10755, 
          5788, 5789, 10757, 5792, 5793, 5796, 10759, 5797, 5800, 5801, 10761,
           5804, 5805, 5808, 5809, 5812, 10764, 5813, 5816, 10766, 5817, 5820,
           5821}], 
         Line[{5822, 5781, 5783, 10754, 5786, 5787, 5790, 10756, 5791, 5794, 
          10758, 5795, 5798, 5799, 10760, 5802, 5803, 5806, 10762, 5807, 
          10763, 5810, 5811, 5814, 10765, 5815, 5818, 10767, 5819, 5823, 5824,
           10768, 5825, 5826, 10769, 5827, 10770, 5828, 5829, 5830, 5831, 
          10771, 5832, 5833, 5834, 10772, 5835, 5836, 10773, 5837, 5838, 
          10774, 5839, 5840, 5841}], 
         Line[{5862, 5943, 5940, 10809, 5939, 5936, 5935, 5932, 5931, 10806, 
          5928, 5927, 10805, 5924, 5923, 5920, 10803, 5919, 5916, 10801, 5915,
           5912, 5911, 10799, 5908, 5907, 10783, 5901, 5900, 5897, 10795, 
          5896, 5893, 5892, 5889, 5888, 10792, 5885, 5884, 10790, 5881, 5880, 
          5877, 10788, 5876, 5873, 5872, 10786, 5869, 5868, 10784, 5865, 5863,
           5905}], 
         Line[{5903, 5963, 5962, 10815, 5961, 5960, 5959, 10814, 5958, 5957, 
          5956, 5955, 10813, 5954, 5953, 5952, 10812, 5951, 5950, 10811, 5949,
           5948, 5947, 10810, 5946, 5945, 10797, 5942, 5941, 5938, 10808, 
          5937, 5934, 10807, 5933, 5930, 5929, 5926, 5925, 10804, 5922, 5921, 
          5918, 10802, 5917, 5914, 10800, 5913, 5910, 5909, 10798, 5906, 5904,
           5944}], 
         Line[{2539, 2538, 9029, 2537, 9028, 2536, 9026, 2535, 9024, 2534, 
          2533, 9021, 2532, 9019, 2531, 9017, 2530, 9015, 2529, 2528, 9013, 
          2527, 9012, 2526, 9010, 2525, 9008, 2524, 2523, 9005, 2522, 9003, 
          2521, 9001, 2520, 2519}], 
         Line[{5964, 6025, 6022, 6021, 6018, 10836, 6017, 6014, 6013, 10834, 
          6010, 6009, 10832, 6006, 6005, 6002, 10830, 6001, 5998, 5997, 10828,
           5994, 5993, 10826, 5990, 5989, 10816, 5984, 5983, 5982, 5981, 
          10823, 5980, 5979, 10822, 5978, 5977, 10821, 5976, 5975, 10820, 
          5974, 5973, 5972, 5971, 10819, 5970, 5969, 10818, 5968, 10817, 5967,
           5966, 5965, 5987}], 
         Line[{5985, 6066, 6063, 10850, 6062, 6059, 6058, 6055, 6054, 10847, 
          6051, 6050, 10846, 6047, 6046, 6043, 10844, 6042, 6039, 10842, 6038,
           6035, 6034, 10840, 6031, 6030, 10824, 6024, 6023, 6020, 10837, 
          6019, 6016, 6015, 10835, 6012, 6011, 10833, 6008, 6007, 10831, 6004,
           6003, 6000, 10829, 5999, 5996, 5995, 10827, 5992, 5991, 10825, 
          5988, 5986, 6028}], 
         Line[{6026, 6086, 6085, 10856, 6084, 6083, 10855, 6082, 6081, 6080, 
          6079, 6078, 10854, 6077, 6076, 6075, 10853, 6074, 6073, 10852, 6072,
           6071, 6070, 10851, 6069, 6068, 10838, 6065, 6064, 6061, 10849, 
          6060, 6057, 10848, 6056, 6053, 6052, 6049, 6048, 10845, 6045, 6044, 
          6041, 10843, 6040, 6037, 10841, 6036, 6033, 6032, 10839, 6029, 6027,
           6067}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
AkRcDHdwrU3BKs5a10kyXms6Hm2e8UyAbfwPzV5rpWPI9MJBARKnlEZelWOY
TITRZRJXFviko3bc78wzZH7qhBlKWrKnguvg4zUu3ilkH3mdaErkhy8a3/NS
90bXvyezyzlDMLF5w2A+GV8hW89wfS4njL9ScSgtzwOXxZ0rZid21Wli2ea8
pHN4Y/vFkUeC53DNq2KDGSLviNT8cAtcYLU8+5Crlj54Rgbe9CfyuhkngwP3
okH9V6WD1cdQ6HvvtnAzGV+O0mYewQep0LJrTXs8VzRMtu9trCTr5aXSMhaT
LVlw+k9G9VqXJGDZufExFR+NDMnN8opkwR3RepH1u+NBKuRImDkZl29zZhFL
R1PhwyEmj+T8INDbyW21gcpzZi+5uXswAbRcG4IazOzBz+xprCz53cXsixMs
bkcBa9jI8o51EljD7yB4nLKTrOpXQpRCgTvj9nMPbjs84ChzbhGZnwpL7A8m
3gsFq+ncnYqKXsjF+73Zlrq/MXmjWtVoGEScvFF00CQIzXdJ/44ldsnljziU
tofC6vdRRgudwvCR+7thfiLXTQ50tQmIhJtOBkcHn8ag8J5dxRT3fmL7UdeL
nZEwkBvC5l+VgCt7VzIwUPnSdpPWrwrRIMJUeXBBXTJWb9WNmKZ4gz2T2UqB
MbA6+6TlyZIUvPrx/EpuIheTuv/ytnASpNzZ+aKzOBmTve94I5kn9trtmzd8
S4BZcKyVWpmANmlXfa2JfoRM7k8at/ohp0bJsvj0O7hn+zc3itP4dDNhzGHI
GhO6eYp1k62gjiu1KYeM49i2mU9qDjdhZTrPWvVF7uDso7KQ4kUD8wa9R6q8
YcntZouf0VGwtNpjsw2lhw2NRXV6oeAytMr67tcUuH5bVlmd/O7M7T9dkmPR
0Op83auBPRkGLik9OErkGjtNdHOCQ2Dpjpn4Gdk4+Cs41USd04w/OSbQE0bs
tcz9r2a//eGHxPjVBNLPwJ0lOQuCHcHMLdqyrNEOlppzKlN5aSvRLVvnPt8B
e5lb1eYfroDSQv8Qipc7K8JZd2WDDZwKOOav8FsLa6WTmp9S5y86TgnYMjnC
l7myV8PWttiLjC9ciLwzN2o4g+wTo4f3Rk/6uuDzyZAYcSIvkf/PL1mKvP/a
UxfPvvLDM2HZrtQ5lFs3/Q1Fj3rBYhu9NRqDwQhHUkSo+9utjRpPvhfzgsdf
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
vSqPVSpjwF467ci9ogXVT43/uWifjIo+naszdpL5s1zHONW9FcO3P3OdEnmM
l/oSbwjUjUKxD49uc+gbvLjR4oOiZTUauY6M5Q6MgvxNrT723EYMslG40hNf
jXZekQ8Dyb7MxvQT8DzTT8AN//yEqvUbmro3+6JbhLHD8RhHFJrUThan7kFY
+TpbsdsXtVRpvnMUnJAnYnXhKiKn98/99DXJDw+c7hx9qGKDn6YPjrAReRfT
z0G2Yww/B2f9nJc5nFt32AfjDjXeUx6iVvi3prH6IJGPfEz7T9cmDE30ds0T
fvUQLU129MQQexs90pJ3SDcE56t8lnapMEeeqJpATvJ8ii3DT0MwY/hpOOun
eTL9Ooxg+nUw69dx3GT4gfid6QdC+T8/UJbpN8J3GYbfCKL//Ea2BTaV7hwR
QBOJYlf3KQY5/dZn4sQ+VxVvLX8yNwaVjl21fM+aCbq70rW7iF+au3LV9uXG
5bhrYNj67H0asBwK9zxP/NJ13Sq7OHVLUCJ7I/f5Rd6oELBcp7+JDjZPVSWv
1tXg35+DzvNKnFB7OL+6zJf44XVfrGTDq3BO3TrRvHdxuHdF3I7FMXTgV3ds
Zv1RjFO8R89ZTaVgkuCcaFYSp+Rc8XtDc05CbREj++VWCbhu69/1aWMk3mH6
+Xid6efjrJ9/8ygjLsCZOkZcgLNxwWmDkAP+Hn4oV9wRuFreG30a+35TfXty
nerHzh8JxHbpwodRNzxx05O7VVTc0X50utB2WQgetBKXkpZ3w/cBl29HEPkR
ZlyDS8UYcQ3OxjU3KiQ4/jONRps0r+zSOBdccebv3wBiH/pLr4YZFcbgYqfn
3VfUbfBL/OWOA0Quy4yzsIqPEWfhbJylzIzL8NEnRlyGP/7FZV5lvDs+cQXC
1MXDGeIV5WA1oFhOq6K4NQfTj4YxsFBbK47jbDWY7PB9/DGM2JkNHEc1vvtD
TotG2/iOSlD/tPAKbx4ddM0bimRCXPCPiKm15JdkyNkgOt36nQ4ik01LHmMg
9r8QEsk7ZwzdOadsM8n4zOdyLxzhCMGra3VD3H6ZYqOF0WlR6t5h/ddfP50N
xniTr3kyll5YnRsh5kTl1Zcu/Jn4xh8lYwLWTQj449yiGS4tIue6r9ys9cYb
Xz/YNMe0n4Z2nM31F8l7tHPKLV/4euAKr5OFASdpyJVmIJNN9TG2NNrcLuGJ
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
/vFMwF75nhEk9tPg/eVG7pQfCkfXKlyrDcEw/fw2V+r+NeR2CQuJhLofVdtP
8gbCf0qc0xLUfU/zenj+0eOkH6My5JqM76+L7rNXycWTx32DNcn7T3qdWGsR
mQDqvbZBvEFR8PXdlnV+ZH3dPFy676BaOhx7GtavdjsJPnx2Dpsm4xzUofiS
zyUDP4Vl1iV6FuCBb+1fhV5RIHxe/vkfuWp81GxVRi6sEWdaG3MiA4Z17k1R
Bom9tZp5XasrgVV814p3lBTCUGfkpjQSv6Ln9Uz+o2dV4s5WpuQcvPE2v++B
bClWrmot1yb281O9pUo8sATu9o6f+dlWCFOJOUXUOMhI17Do1eNS6ObZIC/Y
VQT9zQycjhUkr5nXc+sfPem39nsKHUnHjS5+rCuulaB3O8uOD50kX5Owd9r2
sxxG+z3lVtCVwoWh2bccZD3+aR3/uOxIJZhcOeOkwlQG8oelsjSTKZAxr4fj
Hz1Hk1RNv8364hLr2uj+7lysusbpv5WMZ8ut9U+bNCqhbLCk42pfKYRF50XE
ET3Kf53/XpgshY+3NkgOXSkCsxsdLkcr/6dn8T96DgfXCz76qQclq16WGw1l
49k0m1Z6Ys98FplXnxiUwevJR1MVhkVwP27C2bacAvs66btNlxZBfoMQh0pA
IQye1MypaaFA3Lyegn/0lAd9e9TCkApd471nX3T7oJ2Gw9AMsavUz8py7RcK
4bOItKVZVAEYPJrWojwh/qF+1xPDx7nwlfscR091JuTqUmRvkTj4aF5P5j96
6jdE3Ds/UAJbxgKD9srEgnyNVfhO4n9umadfE3XJAdHfv/Un6dNBWnuT74sh
Eo/OLJsO+5IMV751MW3siAOWi69uPyX5y9fXI2c+R1cBj6Fm8atNyTD4liFO
nrqPY16+4x+5W4PS2CfJJKgYfO/zTSMawr/trblIPbfKRbK76WA0iMt89d2b
7wmm4oxKMdR7oObXtfw/6/rXvH6Ref1v5/W3uEgqd2k1gNSA32Y7jmK4rNqq
YWlGgU6JksvuxQ3Aq8Bw7+COYrCiS6D/SHDF83n57n/k/83L9/4jj2TaPLVk
RyMIi12OKntSAjeY3S1Nb///cvGPCaycn+qg6PZ1MXnpIvCq2Jd5heAliXl5
8T9yGf+4hjIjBKGDi8dWM+WBEsXAM4TgB+l5+b5/5OFvjiWIMJYB6w7lTKkV
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
DojXbN4fidvTrD1x4YFuCLK/2lk0MJkDGjNWevQYn49EnF/TQxDyFODXZcsB
OcHUDkJvkB2pP0GfFYreL7yWt2/JAjayZw6uuP0L3BuzrzpFoLp758rqtLPA
aats7PV54n0bg0gtqVikQ5Z8omAyE6xSeXOId0Tl+Hyae04kIJWSPl7hzjT4
bZc9woXr+VmPe/ozczIiMXHQ3XM8DQrqfjN0YZ4gbZGz7zzxvldGuWq6MhHq
lFX9PHB5rbYE49oDaejhi/pRLdt4kBRzMcwl3hs/9KHd/FQGCt6we9CmKhKe
vx9U8iXiwrRM37YIZ6Jycy2fa9XhsOvY9Q7iHa2pXnQjtBrvKw3hY7uiL1SM
RRWp4e/uEe66dk8iB00a5LcLM3uCLM+ZL/swHv/o6GZq7nwkLdjpxtJ1C1JE
XKPOEvE7OYM9yoIFCATrjVngIvTsYg4yx/Nb5PCxqAt/ilBgTEuTUPJddHy3
gxPxjrryBZ/9u2yKkJknK1fSnAOS1vM+eRLPYwuZN8FnIRwoDVvPePhlAsPK
YVISXM9wJQ9Xb5sI1PfBVoLKIANmrP9sSyfu2SFy7rBRGJgeSyFjf5YGJ3q4
Y99he3AXlt1JqlSCpKxrnF+e9EPPqAd6NuNxR617yam9thgdPj1/G2X5oXOc
CfmRGP+h26dUP+YN3CJtOXNC6ZByUNRYkdBJ1qk/JFlwhcvbWMN9aTKgvDKg
azPGx2d5fEuLipHoD0jZ8C0YfXisd0kN8yRQHZkoGy9Cj9M3tpoeDEbqz1g6
mfH/8nSYhoyrOIBzwlHaghupsP+CB08aHne+FocanUO14Qml4gdZ3iTQWrZ4
nYPt32iXI+0RnQIkvz/ocxt7MFL4WXFWG69rvOxmY58q8xGJw+hGw0+BaGi8
YRMVbmfjjRM/VeaMEFVeD/WW2ASIHhjduYh5ut9mkxjJ2iIZH4ojqgKxMJU/
qhyFx90eL9rCqatZaMu33zfHN3oiMj0aTQfi3N5eOSS5OhN5DeT5Kh53R/Jb
5PTmMG7Lbq8d5eCJ8i5VZ9/F/qw6i1zAHczDsKj+IX4pBHn6u6kE/ImE4Edd
LkScWmD5MfNP5ZlI396Nn2a7O2LY+Pb9IuYx3nzs0K6j6ShuyLt/0wlzRPGi
4zzxvpzpze8NnWHhyJhLsUXHPRQ+dZl5EecV4xvOl56OiEJzUrLFD3f7wfOj
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
MUDxa6kQMf7jT/z9eKXisFc4L81htTd2POV3fEWe83jizEuFB4Zoe6O25kT2
fRR6caiH1EfM9j2zV+q8jXul/NzEOC0xPHbzWbL/cOndmJCRU/Fo/HZzb76g
N1ox7mY9Q9gxNq28wrcuDue0tx5M3emOD2OVp8n9phe2VFKsnDOV/twmJ8SC
zdBUk6ObzMc38F4u3rTZCCSfGG+ufaGEgu0bVpP5+4bA9NTte+NQWatT2l/a
E8WCSg3XEnbeqe2rUX0UjR/mbt1Oa3dGJj+v0AhifD4eu8PBGG8Jso1q0oPh
15H7Sekush61IiFPf1fAIwhI3Fj6QZQHL6jvjiLPHXOOfr75l0gU+g1f8aqW
d8afESJ7x8h6y7DB1Re5IfglxzY8usEW59dY/VQl3m+h/+gEzX4XGNZ4sENl
gzw8Vh2mtyDrXd++jbdZ+EBWzmaxjcqm8E6zsJrsH1jNrcNn4xWEXLs/X2Hc
8wANrkbadxJ2jC9Mv97I4Yt6pXXFYZsM0WGvfOoz4nqT46HpzaZBoLBq7Z3I
fEfYKVVgHUFcH2tc3X66OgR+H1oXzPLiMZRKrlVfSeCm16gvKb/xRp5jN+pY
VxpjrZep9HeyD+TZ0aIdDx/huWN7Rg5rKyPb+r3hyaSO5kLP4zHdcLg5Z7Xy
1SU3WKUlUHSL1F9s/vTqiWI4pM/Prty+zh1Cr+Yzkft0PRdtPHqsHiBz5rSz
oxHgG6W6r+2EHa1Cg7f0A4YocNN419FSFRyw3DRO8lV41VfUx62OASqDI4J+
j32hTUT59TPifQ1s+mqsqhsJzCsmxqeCPcHDs5Ga5BtzpAmyPkzzx495N1ZZ
KuogD9UJZ7Kv6fAJAemXIaZQGX85u00oBr7SsQc1ENe/Meu28+CORMWhdhNe
YS9sT/iyg8T3ht0+fGxQA11Vgt9cEZJDSaY2EbK+NMbX0+f0xRCCVnS8yd6j
DlfNQzeTz9m9ZEfrHzuXqybs7+pEY/CtXEXNR36YaLr5xUuyrntlM/L03IdU
LZPAtpxbsCZfv4usQ665H2DcFG8HKz8fzuKVvwTxG67+LSXweTt/e2aFMAwM
cw4q0X2MDldS0wuI8aSyX8RD/8G3WJRuze5xhM1Dkfwa/MqgNCLM70PYMd5D
zZvj5QN0LG/0Cu5ZQtgBLlPyPKZlO2H/2Lmgvekoz0QAZqcYVXcIOuHuoVlB
0t9+MchGuX73BzGDHTIHLc0h7dxKkauEnd4jWbVnqgIgyZtOOvzkfaj/JWhC
nj97bslO5j92Nm0+t0Vb7TGy6O58OfPwJvKFdxVoknG1RnnvxEAQiL5OvROa
+RB0IlaWkP29JaYHxG+fjILx9277fw44g/OP2CfkuYfrluzQ/mNn9z3OA/Pt
6ph+z2b/fLAh5KWF3CDf113vlOqey9GwhdXbsovfBcqkts8mEHZyxsIcBgti
wT15hO9ItSvcDOoJNiH7NS3ZyfvHjh2HonKpigzYW0THBhwxhnqBil6yH1ct
+woty+9xwPDqWv28pid8zF8TSfKNtUb33979IA6ypQ4MH5b1hhtrve8VEHjK
kh3nf+xsGWdRf33bFrjLNVtGXOzg8+z1XWS9fYS+oJFlUzxonl9RMJDtA3m/
vq0WJuy82RfDHdgWC5ouduKGJW7QfEd+luRxsSzZ4fnHjuubwNteD90hrTbN
8zaPCwyypViWE++rVGeAt7EpFkKGHzb67HAn/EmshuwrtTn0pFpWdASka3l2
PQqyBY6Gtfu8CD/xmea4qX/YF3Ry1WJ/WDrCzGGv7YaEHd8l/N4/uKT4jbVM
0uFAlRKpfWzPAzil+nE12Zcpq+8aU6arP+hd+G+b0Ip7yB2QlWFOXL93aV77
/jOvA5fs6/9jn21kuKbiYzh8Wzn70dXMB9btbhEYIt7vwPuLdvUGsfDxSUkb
zVkf+HW9tPoEOR+X8P5/8KEl/PM/eHqD1qNT91Kh69lEsgtPEAT7MR+YIeKc
jCX8/T/4Me6ags6/WXCiZeRygFkw2CZ94XxFxI28S7jAP/jRFZX3+Z/kgPPq
EukrLgGgeG3ux1siPuRewl3+wY+/iFU8P5MDuawHJd1Pu0G2Jq/pJSJuXFEj
NjkKaUDzu/YX7567QD+fGnfs1//gW/7B56sX8RX/4HJqMrTXbsfBViNG+eHT
Eliwa0sEydOQXcLt/8HXFPPTbMwPgc+mHxnmd/vhf522W+SI97tiCf/6D+6m
NaZZ5moPn7PsoyxkEnBrcuML0p9v3vn8LaQ2EDlaS6fVOlxQOWpKnDwPa6+4
79ZKfz808upc/dDFAZ+27rI9R+qpxVkoNiucMX2/UphOvTH6Mgn/MCT83O/p
JHfsYXscE1ThizC9h2vf7b5I9t+uETGgPa92BKk+rqNNsDEA39ZhI1If3fL7
RJb4mjNgMfR57tZPQ3ipcCmH1F9vtLrmkv5UH2Z9dTVyBYzBZaTP5AOBRzI6
RqufMwHOMPnk689Ngb0Vql+SOqBAo7MhYS7QEqrYbvzRAZgk17zfSuDi247y
UVO7wlPVwN8ibx3hZJhmCtnPWUZpj64Krw88P/2N7lC+Gwyly7GR/2v33LE+
WVtfsLr+Ko4/1QN+rL53bwWZX8TuN7874Qfp6/9q5TJ5wMAVr8lXZJxpaxC3
5ksQCAfyXmmc8gHzob7eV8Q47/647mObZTTEeStvpv0VDCXFquUfZ8h6/lWD
q7cSYcxdNHyUPgYssku/kzyoPY9Hnm6NTgObP9yXKdOxEKkluaebQsT573Q+
6thmgpz0BqtatRi4bO61/zjhtywPTUXrYgrh7mcNm5LAdHhXekH36RsKWPnW
6A7nlYLG6KqUAEoWlHd+FvZvoIB9Ifekhpw52Mk+2dFMYwkvGbUriojxqayO
4mK+GIqM70c/MbV64OD1xJIc4vn75lf9t87RGi56BtDE8NqBwTijkztxvZzp
TFJvZQmsM9j2g8EjHf6r4PYpfkmBmNrGX8Zs5VBD4X6fJJ4IAS4RvALEfec8
XmmtGXaB40U7x2qrnOCCVl4z2U8svHOlShS1G9gduv+5qMUFVsOOXDKuPtUw
MtusXgOZGsW1d1ozYGSayXFFFPHdzy5k37K6BppsLp9ONEiHW8hJ7RNHXC/4
XMb0pSecj9lX8HnDYzjKHmPqS9jxYXU1e+TjA03rtyj3CLtCa7nbBam/ZB+b
lp0WBdWg4WKe2fwlCUa2bd00lULkv7t/23YzVsNV2VotBd84iPkhfm1NLnmu
ikp20SM/mM2UHbrV4g75z6+MDZH9PD96/ndMMwQS1c6ann/pD8XW9NdZiXHr
lCrRm6ergdLja5TctMJhPXv1oY9pRJ77qMOnTbAaMkKa9odd9IfvXcc/UxVQ
ID4yXcvxdSisPtd4arY6ALy92PXJ/QipxjtS9/qjgTVWW6y12g+czXWUk4n5
/v28dpLaC4SCNG4GqjJzqDdVsTOoItYxVG0/NVEJLlk9Qjm8ElAXORsxUEuB
8wdtZx1PEt+p2nN/kosDYGeuhGwW4YfBwUyf/U+lg7iVZGl/cwIohR+xjCbW
McaD+fERJ8qgM/jeLgtNF7TaIx+5sY0C+Ryi9pyeT6Cu6K+GKZ0Plga4dL98
RazDrsMJ67izIaXo60hqYTLE8PiVzQ4R+Xtd8p/OlaVQaJ1VFsGQD3VGgns/
VBP+z7KJuet5McS33avEa1HYq3FEk9JJgdUpvEHvthdBsEnUiqz/4tFwu+JQ
VRcForP+vv8VXgmfXSM4VbiLgSH5u8qVeCIeThXpfUxfA+5RX7Jlxkuhmu26
KasDBaytC948js0GYf2j4S+YElHIYmvSjREiD6V5u7PAIAW0c2xEOeLTcIVF
UKUXkW82eYqlCGTVQTyfaiFnYxnI/HgnK3+byOOORBTw2tbCruynLa+bS4Cv
hDX/jiXhz4Mfxsf2B8DNNE7aU7L5OL31ccda4v9uCtJtTN1uD9ls5/RXrS/A
8HGcDBkk8rKOuZB5pwYIEhkwmP2vHBrnnynQi1GAX8FdNe5SHYycdA46OpEP
+ge2VO2wpcBPk47zLHUeiD9eSOxRKsVL4T2cX4l5ve5q5DOR074o2/GJ9dR4
CXbeO76x8y1xX+qIL48C7UDJP6rr/bgHHA97VkzqJs62PX/qI38axznn7hmo
q8HlmKsfyH3nUye8zWKbHCG8xExhc7IfuO3a1s9P5h1102N/FGuB7VjG3HX/
HLA439Nk7EOBI7mlLlqJCG5GvTrTt1LA4lQYXVMx8V2IWVcz0u0EUu8c0xo5
/SFtnfba3YSdO7oUntAtPsAXtpOve5cfOL27er2I5EWonHHu5K4Eziy1/+qj
E2GS2bLeAilgNpulv5OqHAojPjspnIyHna7UcyufEf5852u/5EpfsN9u3qXJ
4Qcvb63iIvP0iPcfxqSjQiHrDqfh9j3hIGSiv9OH7PdoU/I6E5+Auhtd7oBC
ADz7KCjzmPDbmp/+8oxMT+CPXtPYWwdP4FAr0dfsoACXTQUtekeA26yQgB9t
FDS4ZfWfI+ZFbf7lu0+KU0H1pleDmXAGPPvrJspF+s++54ZDaUVQ1OxhenWV
Aqp/LDRq7SXiosla1uuvC8B1kDJeVmOBmt6S/pkDxHfwXYG7cUYRMO9VEAkR
KIR2T5sZW2I+enBeO2atVwxFl9I0vk0VgDyfgMYsMS/oQm/IjuzPh8N6Rs0e
GT7YWvNemZxHPzNutjreJX5/SMgkkDUE2/Q+NazrJ+K9W9ovVw+XgomtJ0OR
dzGMJzlS/uZRgEdk50r/w3VwLy9m5ndiDUxtwpqNpymAXEz3/24rgPCvV+WF
TGLQ1sTQ4PFHYl2dnY8f3ZsDdXpDnJNcWfiGnWmdGWG/1fBT6J8H9YRdAZ+C
e3Xg63RJl2EnBeqU+K8b6NbAhN/m9TMfy+GLG69UuxkF1PZx3Lyukgpzm0ap
Pq3OxxRUWnGOGJ/+IjWqKAd/CPrSFtD8pwI1N+xs+q+euO/lHnbXllqYs5I5
+ul0JZTEKvYeJObdbj5RsI+uhKFqi32aRUWg+dDEPj6ByCsrN50oqHqE8Yn6
LSrF1ai2mzWzOYcCysasLBY6QRjekNpwXqYaXagL9sYS4/C9v9x/Qr8C9ITP
iksT4//IQFFSMpMC1/tE9tYK5oCEUXjnX+MkoD5a6RhHjLPSbbsH5s1J+KRo
zGpmZQ3WSm78eyWJAje4+r5oN8Xgb8cN3oepq/Db96gLs08o4CgZ94BvMBVG
vFfypZhGwNpjChIK40T+snOs7MurWLDRdaQcl/aBnCvPdP4SfhV4h7dZMz0e
GeTZzG+fRdQerz/tX04BJt9bh7lmotBMapq/TqQUwzyOFV0m/LPK+NNlEFGA
OjupQHgWBAJDLvqT5D5p8ML+CAwv7o/A8v7IX00r/qPrH0L/j2OZVidi4cFA
SsdBMi/265Xy1AyEhE49mqy5hzDYdrGcPB9T1XPy1+0Wf6j7vuKxxmVLOGqo
Y0fyz9kad+5/GBcLetVh20dXZoJN2FmRGeK7wPF/4Alj9MH63/3AfCOdgXKs
KTRkBUyRugaeqLRJtm2esC+SRhBoNCGvjmsPG/GcnEt2jP6xY3j61s8fk3mw
+oYfMAfkg+QXUVN9Yv46Wdv2Mw24gUFYJsO3c/SQvcGOh6y76stwi75TeAzR
P+ybqqLu4KD0iI0GgZsu2Vn/j518qsvda99UwWijRNjKglrIYMp1lJGjQJrf
j7ybf+xgMoPCHXTYFC3ZcnTI/pPab1clcGjaglNcL5Vp40O8eOjqGKknLVqy
Q1myk75kZ4SaEX+P18LXBye7P1Y0QEtIhvvERuI7lcVLE1IYg0EyIa4ph3NR
P3HVo4PEehKlODvxti8C3QJm54v35KHvuD3D8WEKjC7ZoSzZaV6yczrk6tXA
7mLQqrTt/WHxBIKrUt+fIPx/9+vaCo5bcajyNlz1l3Mhbuw8tzO7m7BzjZvn
QVwBeoapjUudrEFaflMnd18KnFyyo/aPnQ1rW7t07gXCMVer22MbzaDnjGgM
uZ7/1aAv9rYrwdFfqTJdX+uwd27iRaEOEVd/dI8ImCrB3ANDkUGx9fjriYCe
mDyRRwg3JOzNdoQN99ca9bxzAWuG/S1kv5RjS/g7s/+NP1PuVUoJeoKpL7I+
rderR3/+acYLshQwEBOgXxmRixoP/4Srdlbg712dP0OJeGnw1KKdyH/s+D7W
C5ZSUIL+eyaSik8vAkP70yCy7k19b5VJZFcCDtdadM2uK0W5e40JI4Q/3Hw4
/q6zMxaFj8UM2W8uxi0l8mKF74h8xGXRTqH2/7azIN/aVbio41JP+v96LpvC
y7H0dtFYfd00sXZDAf6WfM7ym1hXtbLeMvHuc0KlORZljr5UnDE5cWkXkd9l
LM3r6n/mtWYZzwf+c7fQx0gwPPegInp/M5Ui+W+GS3jkP/j9JTz9H3zfjW0q
T3cbY7nc68ddPLeQJ+GBAsn7YlvCm/7BD35R9xxWDsTiXQ6zJ+N9sfHme58V
xPP8MRfOXz9QjJlSo9/jR0vQ/pyiCVvh/+BZ/+BUFot4yRJut4QLxLleuVlU
g/JvAvamVDUi7Q3vlYmEPxcsziOcWJxHuDyPSpfw3/8HPvsPjuMJI+xK2Xgw
Yt81Op4C/NZWHbmBiIvylnCmf3Dn4aYVl1PCUNLsR4MJRzpaB6Y35fwg/G0J
P/sPrnvp0T2ZOnt03Ky+WaMuGttOayYhGZ8v4fr/4CmL7xd77RfeLy6/33W3
DKTejYRAMuXGlhiHXLjtdYhO/QuRpzjU7Q2eiwLGWjt5ZZoCEMzgCdz+iVh/
nqRldBHxh6HwjDOFB0FEjGNOqYgCNKpPFdv6suDNK1f7AaFqsPx4uliD+E7x
/oqt8QsohsSIJvEPYXXAWa/Z1mtEgf9YWT81chXAPfHdXMNWtaB9ZaKq2pkC
tPuMU+8WEHFnnkPK3fga2Czz6xIzEe/95GC57jNfCBfuQ+E4EZ9empFtiibi
3otJp9hjTVJhOlf3i6pOKUiMXbgjR+R9vkNH7lMq46C+WMt5ajof9tH/0HMi
4odhbweHiQondH25cmf5Zhf4qVY6sJrwt9W5IvEDzc5In0lzI0jNFk6F2OmI
Evh2T4kue1sXTMvPsU0uNYRrP4MsyPVc43TZMe3r9rgnKl9v+oMm3PrjXUzq
QRzuzjC1HnHAgHMTY8+PnoanRk+LSB0HY03QDXYDX5xWG3ul91kbt1Ed8CDr
rgdNcyOs3wXi2nf/Hf5x0Bx3Gr+ZJ/P6M6lh3wt9g3H1uy06YrfscEMyj6Qv
yee56n2BTiIGv4LpQJ2wD07WZt/vIPsBdr+Udm+NxxdjZ96lioXixxYucdUp
4vs+sBBvw5NNC/E2LsfbGSeu6jJ5JoL+2z8dryQrISGELZWJiHu3ZiysDzD+
Z2F9gN9L6wOvgsDgxaw4WJmgI0nDiPC4Vq38eQURJ9Td9Xv/KAUPeHw8qN4S
h8WbKJu3Ef75s7AwAhVycLvZt+iVQlEoDsa2BUReo2vu4R39MxlY486cZm+t
AQrLF5OpSCLO3LZ/rK4wBEwhYGCOpQb8rwRqzhD5qVTAZdFzdCXI3Uhb0qid
gz+2nbpf9ZzIdw5H7nJvf4KHJb2mN/zIw9Ucm+9LE3GL5lcD9bPyd3CgKUng
QQ5CqsJ/ilNEHvqbUftF9vooPL7b79yFtaXQlqJRIviayPt07I+cynuKjEec
9zLvrsLT2q21JucI/6y79Kv3Xh3OiJkK8Z6twAP6wyfy1SlQuU5N80NVEh4I
DeEtf18Ee3mn+g4S83eM/fkvjsQUHFUu772glw+7a+63v++hwB79mdW8BjUo
82islfVqOcZz2p1oMadASQOvgghtLQaVeOy6kfEUrerFitYfpkCWkMn39Rvy
UTPk7S6lzzFwz6p9zzsibmfdmcjp9TsfP1ds8zv0KBRepShvNyfwWRvD6Lr+
cmyhqGjbqj7BE/LhIW+jKXDJO/5GX0Ipfhi/X1P/ugjLtnSZzRDrHtffnQf7
RQrwU2mwaPY+P9gLu0M2kX2kmYouH1QuxgjhIM0Zf2NYFSM5i8T3etvWuo2c
tSXIOkO94t50Ed7e09Jzq4QCE4v5CNov5iPYuJSPcNj/fBzuXowVVZ6Zf4/b
oJLg4LNNhJ0+nhtVp6mKsP1aKssXTUdcYfN7SoyYj73WBi8neaLwSubzkyXd
oXg3sHsvuW/I8CUgsOVKOFb+R1XDuTMYIwdfZ5PnKWwakfIaHCnFNc/FvPQq
ffH5qJl7NhGXsibI/yfFU4k/nPiveUzEYRjHltWsRP7CYh/St6rXF+P9dNdr
rgvGGnE/pqw/FFivTFdWL+mLRq41dXr6QZj8WdWlm8BVxFfPrTtehd/PVnj0
2yZilmDc2z5ifWt4KzuRQsTxP2OM+bq2puM7CmPT+lTi/c7+p8ao6YM8eRG8
0jZBWMHe8HuasHP8yrMTIaL2eFxU35GaeM4zgey1D4h5fWlzWqSLey1a82UN
J7rmonxlWYWZBxFHCeerS1ypxXVT6X6JCnl4ImnCcYzArR9R2czm2GFipMxb
PmVPXJ3ypZ88r/bMYn0MhroX6mOwXB97pRLGtJrBFs4keYbaHywCVfpfEyuJ
cb61GM+DymI8D8vx/PkPju2r2x5jsEl3dJBTIWS1F169Q8QJjl/E65VjnmKu
brW6lFUJUqXe/MSiQYFq3kF965/VWH22TCO6qggj2n7mSHoR8bBaff96qhBM
3z6c69VWAF4nwD6csHPhv2O39PenYHXHUV3bhgy4eO135TfCT14v1jfw5WJ9
A68t1TeGFusnWLpYP0Fcqp/wbzrdJTaRhVtaDT/8pk0CoV0c6hqEnZu8Hj0n
TQrQV1aRqnN3DPg50uhUE/93VSRV4OrViJcOlIfuoynAtpxr164Q68nK6LDP
B4h4i+UBt5CudDZeelmRJE/k9f1N47+i1YowQchBPKo1HBhu8KVGEX7b+yza
YDS8BA3Gw1eG7n4Mz9kahh8S8di3vTTRK1flopPtb/54jXQ8sWJy/z7i/9bT
q3IeZM7GA+8D7elSU7BG83W2DJHHvapoT6vWrkT+vvA6VQ1HeKMQdtv/KQWS
bvYOiPVXoq31nRf7+C3grJz+Zuo6Ik+ndWTftzYLvTfWBB3IS8Gfa2d/Kg6T
+/Vz/3mPxuBrEYvnA90BqNvZUN1G5nGDf5gTTlRh/DrXQ2u3SOD2dyuMV1US
64l1aR1DRBXS5V/L1Rz2Qw93o2cypRQQCjK4TFMfhgnqHMl9I4FIb3k65hox
v7gX64fIrb5QP8Tl+iFP7bDZk+Qq1Lv2NF9mPgR9ujcGDxQT873aIGO0sAbH
KVt20/AnIIvxjJxHLAW+lgd7Kkf64W3zc10PrDxwY6NqxHvi+6X3/MyHU/ne
2PaXzUft8WOsuPpTnDwX+P3L3HXM9bXI+/valvsiqZg/l/vMz58CLy6UfFjD
XI12GzVD75enoaPGfnOGdCK+UnxbzqHpibz9x7OVWJ3R/IWqLHmuN/VFjYOv
tNzwmFVyGuWpC7btnpMmddNcPr/qjLOrcY55bbGrYyaKipuIZsQT/hMQP97J
X4HvCs+nHdtNrGMct8qoiXGL2bpyiumVMx4cMWs0WPMYTZuzXUbJ+rDv5MD3
H9a454IOg9Iae/QUsuR1IHVeMvuEbGbL0dMo0ubwcAbaPuE7foSwc3Uspk0r
rgjzyyLXrXdKwT4RZTYrsm5WsFD3xi3SC3VvXK57s/5J27f9khOw8N/ZElJd
CAXGGvu+Ev48wL9pvGY0D/OkHsDBmiRsecPTa0rg/It1eDy5WIfHS0t1+CuL
dXscXKzbY8RS3T5wsc6Psh4LdX5crvNTnxdmPVIQhb4ML821lYKRofCk+lEi
ruB7ZPwgbC4ISwfEbj0M9cGhNxvKSH477cypdWF3A7HQxc3y1m0fNBtM3U/q
/lpzo6av2/jhBrWnPFSX3DFGuS6BQtbZWis3rbrji6NvQ3w4b7hjmngv105i
PKcDlOyyfrvis4HZuJPzTlhao3u+h8Ar/Bf2TXAkeGHfBJf3Tag/RHxV/mmN
BzUSr720scbbNHe7Q0g+CXXp30wdc4xQbB5xcLdA1Z8ztCUE7iFrEcFxXRqE
XzVnd9LxobL3y2Kyf6xqAOvkbSKYXM+wpnT7BjlY03ySltQHPUho46qQsITs
V11dsmuuQMOVjSxvyTxutaP0xxY7oF71S6i4+g5cK6aM5ZL7OIv7UODis7AP
Bcv7UHmL+1Zwrn1h3wqW961YBBd4CGi3yEPAZR7CSK3qVGJrEJq8GHLfNHUb
1+3eeuQHcX12lH+2BxG3PF7RGuXw0wb1KUGDwsT4n9T/QN2QHYXSruvYJWlt
MXF2XdMOAtdQGXvVERiLlT+PRKZauaN1cnSxHrlfqXehIfdIPN55Klw/mOyB
ylu0jpB9SH7pTHcMycTh9hsSW9O+uuKD/LkuepJXk3/QaWpDHHoJZNqUS3mg
ufI2J1L3nXNjl/i0SyxKuMXaDX1yx+n3s9kGBB5Ra6LJVhCDWma/C6Vs3DDk
dsM28hyu3f7Nb4/cjEb6m+Jnzm5zwSLKtp9k3/i1BpRQp7AQZAnuf5mSYYeG
WdYbyb6IK0K5Y6RPBuFL8zVSRWet8SSDXXkvgXu1xf9Y6e6DPXsPddT5GuPf
+mfVnWR/UYVJJjc9b7zUQS33VNME430kXX4Q+B9nbXP+TY54OSpMYC29MtqJ
s0WSfrJnkV+BZn0L/Apc5lekLfIx8LLOAh8Dl/kYKgFWEa0X9VC9SfPiKg9F
DLh4fCO5P8i5k5OemqIB3I2r4tc+BDBo3j9C5rlbmJhFd0roQtOWzXeu75uu
rKcIPCL1U/PNZ2+GNYUQeVzlgQyaXOSp6NK8S8TDPG2Rg4kxUejoO3Hyc6YP
Mipw3wVifA5pf+J8T+QFLHVyCYxbtLAj+qw+Wfe4eZn5w/ofoZjDcDcjSdoV
lWcaw0m9IRben9a+ZQe0h1OEPt2QBgY9+cIy4r5SNpmKpf3EeqJxV3faWhOs
yyU0yPOIrZ3OKzlBOK7Sdl1vrkfMP6ajBeZk37DtVl6v/UOQUfOBTt1XF4x8
OFhDnoelij+H5Qx8oJ7p5xuTJ+awf611VjPxPDTqGw/xpfvCxGxeIKXeDMRf
G7CR5yEek3684tSBQLyQVbl+1PgR3nSQ4P9K2KESTXvkv8MHH10q9E7l0MfZ
9C9byT7YnlIKF15lBIBkaS1tUpApSDKXzQuSfJKsOyGsrUEwrMe9/uDpB+Dj
fF6raeG8SOvVDHvcUF2O2U16ShMTtu0Uv0zyhXQ8G81onDEmP5GtPvo27mhT
NSL/b147Ly1PbjScHbknFCPyGLZHZ8uR59HQWj94OZ0cA0IUZo1vYq7wON9I
jZrsD8AimTb5wQpfTu2k5FNfgXdF51xJ3lqk5DUV55uGmM7PIE1/4Db4T+ba
kDyNw6w50/NnYqCsLpHmorkLhBTlFskQdoKm7TWzk2NhY95nK+ZcN3BOEAzT
J+aFsMdr9XVtZ2FtvHtDWYUJ9LgLCpB9j7dH3K1OuG4A8+x52fH5D2F4hM+J
9M9bOcXdbJzx8Ockg1Rbkg+w2AV+IPuYGV3pOnpbPw6aOAcndkp5Aru9dN87
Av857SOYOmoKK8qeDvLnWMGBYo1Csn/dqIvL3mZvK/iwJYLtxNoHwKP9lTuJ
wMWuqESZrowF0/gA5VolF7h8fKvFOPGcZla3vZubo+HiW3ueNYJO8G2yTTmc
+F/MZ0WsX4c5wqcDmZYDwnag5ew9RJ7PtXGRlwiOogu8RFjmJX49X90gPh0B
L+hKvz25YweP/7y+bkb424MBQf+BTyEQGa3jY+VlAcblNtnk+SxBw/95RYf7
QZKKptyX3S5wG4Uk9pJ9eCJvNbndDgENjU5J3Q+eMFzf9R+pe70xwpZyxN0X
ZDfu5+1/q4rTrYMPyPueNzzy+3jwY3ATPDFU0meH0HcolIWsSx8Sa/SKjIRd
LDuEt3/zAu8vmxbOw7pbMKt1wiQaUlZS6L53eUBiP6c8GRedaGGteHXzMjpv
GD968UEYqsyFTZN9X2UTrSVX54eh3n8fcpyf5GGom+Dd00S8t+bZAh8Vy3MX
+Ki4zEfN/VZ0Z1t+BGa1n2vgKPDFRrbccC/C/tymBR4snni8wIOFZR7sJ75j
Aa8s4uDWf5+4WPqJeSZT9uIe8X73LvJswc1kgWcL15Z4tiuOLPBscUvAAs8W
lnm2eTQLPF4RQcoCjxeWebxNizxemI1Z4PHCMo/Xd5EnDFFPF3jCsMwTVulk
aRFQ1IBK2r3S2aJGcOrkqVGyXlfpVHjmmJ497J1RkBRhsgf64MHWewT+dZGH
DJdZFnjIsMxDZl7kOUO2+gLPGZZ5znKKaCpg6gi+l9nO8K9+BGvKXUUlCDsi
ojKHe+XdIPKbZjjDD2cwnbUeItefSTtLpjHBXDjf4fIrnz0QvNpphbOIdXWN
k/BLef8c+OHt5PRqow+8dFij8pKwP5nPHBut4AmiLw48Mb7mAleTJnNiFvrw
BDpkMPjAeiZj0d+Vj2HEp+AO2ffebKau0+loDuT1mqvF2HnA0Ru/clqJ+Koz
5kvqrtWZkM3Tx3TjjDm81D6dn0+Mz5bVxZhR4Qtzot5/LpxyB22TpuqNhJ2p
volz9J+Cod3wxuuj33zh07D7vAPZ335gb0SoRzrY0T4KqN12A65dyk1mIuKx
J66Z/hwKyXDVb3Tz5nQayPy+Yh3Z5/PxoKrHXfcQ6F5zNvEJse6uyw5h0CPs
zEx/+nj0WxwckPNZybA6DIa8GTqriett+ZPXmx2IhyMG32VoVO7jbjvdXazE
vG4yM73GPxEDRtGSAbSfbNB4ZtM5CfK87EWeP2gu8vxhmedPt6gjgLeLOgJY
1hGUrFyrnywUAVPu9iIeu1yxgPLRWJzsQyVoc158wAUO9aie4bgXhWuGDsyQ
5/qNsHEdojHOBW6fI8dKmBLBwLYtbeozBYwf5RxgcHwCE58d9XacSgfVq2qT
Eo3Ed4ReetJphzxwGMp4dxclYvMRozXR08Q86ue/f3XnY7STszydO5qMK0LY
wYo8H21j+RN+zjIoFdlgW6eSDuFOzzNmnpJ1TlF+BepqGC8Rqfsrmg7m8GJM
hcgjnun5ZKbZBeB27ucZ+4cycdLVa5ca4Z8rJRd445i6yBvHZd4426J+BH7n
LuhHYFk/8nFRbwLsi3oTWNab5C7qU6CTZ0GfAsv6lKBFPQvcX9SzwLKeZf2i
/gXeLepfQH9J/6K9qJeB9NsLehlY1svcX9TXgEzFgr4GtJb0NbKDzg38H8oh
SZxpg+1jJ0zwnNpz7QUFNOWoDgyvKQehoZX5qtOeKM/K4vLpJbHODLdVyG4u
AUm2R3lUDkHonX7wei2R5zbljk1XSeXCT3/WrUc2JGEkS9pUIvG+ml23iGWc
zoH/WCIt2y2TMHEXdZgnse4NiXgHc+hkEfFwt/iuT8no97t8OJjwk77vHIVm
s8Hw8m+fNw1/KiY/vSjXQqwzMttO7ahM94bj6gMsPzIysWZ19Xn4QYHjAzTv
nmk9RMgf+GsTWoyhjQyJQx8oEM2/Q2+dmR/u09+tv7YoH3OHR5IUBinQ8Gu1
1KPjoWiUcFd8VKwAr+/1Em/9RORHj2c6KPLhmF/gKLTtSiHK5LT3xfcR61LC
SLTCTW88npw2sbrNBlskco3I9WQuea3PXykz1H0v6hKYkAHnH4I8Lcnfk3ry
9IHNfTxbuFFTyyMH1Co27aok1oGrzvPFKlxusJ4SQ82x8QmsE/KXa++gwLkY
U9F0Kh+woX/w1TK2Arw/9Xd8b6DAl+bdIhLXo+FcP1fYiE8NrOsTcnyYSAFF
3J/4oC0MmLbKF83Q1sDA9kYVbsI/t7IwHrhZ5QcWNWr+uV5VoE137dszIn/X
GMuUiaZ4Qk/9ZU/Tl0/ghdnZFbtfUSD2EI8XdZUTtl10z4uiZEJYKG+TEzGe
2yj8K2f2e2BTnGbKl+NJUOnaXOE0RfaZibFfTRuHmSfLHAQMLUFtR2FqJbE+
PD9sTqssHYdpb48ytZ9RA/sg/sCK3yRvJz2+xD0JndJW664m4iNniX7ebsIO
f7DmE5ojSUgvmmQh8tse5xUfav8ldaZw3rnhYTLWfeuzYtD2xRkrk/mjxDzN
yT76UYg+Gb8esB6kPeiHTuw9a9QJ3GS9O+dPgXg8Rv+d+m9BKApt+7Axgexj
09JYI6EXhxc9L6WwD4VhMbXgCvK+ZRqqU1NtQUg3xC7uExmCWRxRq0KJdaZe
RM5OPD8Ipdcel/v6MARpyh95kPzeeSdd5TnvUGD0HzuvlpMP04cq3nAR/pzk
8Oj8w3N2OF1U7R5bnAoSbUEWmr+IOPPr31VWYqHgxpHRLHKrEII/Mnr1EP4T
9bZBVb/cC98n7M1zP+qP033zCfHkeSgqFSZNwZ74gW9FibW+PzIb2mikk+ci
6Rszn6rwhs/dX7f49hXD/ZCXhy53UeD1V7vzH4oD4fNPIRWNTQjpwjRJydUU
6NJykdNn88Kojyz+QrF+KPNLNLmasHPoSqhu42FPpKt4HBvS7Iff1a+qPiP7
MOT133is4gpljW+GptZWQLbp0zOuz4m4+t7gaT6X+3h+T8yp+/6lcCd2pPLT
GwrsSpTiXSvng98/vZHp6/bDH3HPdpL7CxJKQx+4X3ijkE84PfW0H/qs9bsZ
TuDhb4q5Vj8LxJ4PA4rTdvlw2cqyUpaYd97nzuo8l41Bv64ncW1fMmGV+M/X
7cR3tjiU+2TiH1/8yawsICXtjzTVSUfJc7Vqfyt4thzxxSvrfz4V1PQn8tYx
KbJvnsjZmc8lRrGoId/AcYYxBe5lx3iyE9/Tjxkpd+hjE/D0xIuS76d8YZv0
/dijxPofwH3YOHG/L/LreWT2X/BHndOH6TUJO41OY186cv1wlbK72Ft5f6zu
NhMiz3duTPrAwsyeiF+9Btnj3ttBOHPlpjLCTptsx3ol2wSk+SBVofyfFByb
pO3SI+KrHZyRF4paA/B8g9v84BU/7NLvhnlS1yNWycOSEYBq+wd4JGr8UJcr
L4LUoXN92v1nd108GrF371Hu0sKjYgIz7wk7nJRGPwv2ONS+e39gMsMCmVmD
6/NJHjXf8zYRjUD0ET3BSLHyQ1mz/0fXe8dz/b1/wAmRFhGFiqJo0LI+latl
hFQqIoRCSSSRMrL33nvvvTfH3isqkhIqZb3Jyr7PK7p/j9vj/v7p+Xg/nu+3
c65zned1znWdq9XnK+YhF1zSvpPuj6QEpFjGtT1Qk9q9EB2ML4YJasvJR6Av
/gzUsslmKFDs92dabM/klld9pC3CUN+Flb7JG+bIeY49qAfjoeZD3NseByJS
RNjlCipPJNHScogM85ystvhTHR+AdAp+SwjFeSLamyQtOoxfD5thHpQJQsKP
qpiY7toi2ZSXj/2JflIDAr8Ocfijopv2U+ZsTkjN4gsTUSdyPu7LWx/2YLS/
lOlj/UtPRM2084oX/t6S84iJkykcBYj2mb084obY1EWOk2Fcdov4rdIffqjm
IL/L9whH1KymIEKPeQ7VCn37JOyFLsldSrlF6YQaZm+SEe+HPKnYJpr5IBzx
9G2gdlfzRFfpLHcY43Hjn4pcWdQORxuZW7asKHqj2/LTPtwYP0dv52BtHIb3
2SX1qR8Z0HXq8h5avO8YTryo6yB5gXAw+ZO3Vekgzngw6+MItsOJXZP2B32B
meNJ5/f7GfCGT5PhJNaN166UqV1g9kR51l82HyZzRgFhykeniP4XI9tSGvHf
A3oUF/ZruCATNft6Qh9aXuLOG9fzAO+Di7O6YZnQ0hrrwPwL208N48gsgwL6
wn+GrCM3HRLe8pZb4v3i6iXedLOdjkjjYk2HP4srsqEnaehjnoWgO48p9lii
y1uCt+eec0Pdr9kPE/3r+/9rPXfU0wZpNgvfejedAjOObsNEf9uDzpXdksdD
EOvip4bJlEQYuep60RHjbqlCBZfkzNEFOpenN2PcUPhDwU8VRHydK8neOaOO
3O2D/Ib7XNHzl5PkNFhXl0z3K5BJR6CGpef9P9liwXKAfV8C3u8cyXpfjspG
oUMzG/P3XQyDoY7zEXdmiLyIwh9fT8ogdYdz0xp8buiuSfWpLZintp8/gcqD
A3nm/ucr9MwTjc9unksi8pYntPsyv0Wh0tt383bqBcBgxWYXcey3Byy1+Vz0
opH43FNm1RBPmAzeWMmK1+OdctIOluadaMnFstZWwBMFnPjBStRRRu7wcn2w
9wW8NyczY/3jjsRbpIprME6dpb5VfR/2D/4VyzalLkCSfDPdgnnaRoRMBxMj
UVrXY+UYWVugTdtTR4vt5KIonRp73TOI8Q7euGXFE20Q8bawwTyuBzVTfozo
QegyuX/VgBeKmjIXVcE4eQZ9+ImeCDToJihWJ2oFqqkf82Mxj23xRum4nlD0
Taxsawq3GfD8TtXdjtfLEKeR2Cm5R2AonhIujP3PrayD0eaY5+aJglPPHQ3g
/tmFFHt6HzT/+kbxIYyrWczt/HM5BH1Op3mYzWMKw1GqLM8xj1fsobd6Wn4o
l3LDiJLZS3ikLL+/ANsh573wZQUXY2C+qmN6XsYXaRzvEyb6kDIwdv33eCPm
12o986krAG26GywkjnGKlCNNErd8kM+ltuLtL/Wgo9KQlfje8unh6jJ9B3TI
eFedzqnnkLO3V+4qnscxI4UWgdDTMGfmR9f8OgDRUYIf0SeRpV7uT9CFFyip
ke/OychQRCahVniW6FvHd0qgoNEafaJUCmhr0YNn+dd3EOct0aXDGykljFDf
csRdeqoe4W5BS7ZPGN9VEVJ6/90LVCH0MOCJZASqD/JlFST67DC8mn0ca4UY
ZYJae2NjkCCt7W1JPI+1evrjW/IjQJq+qslPMhrG+pacY3F8NLAMo1MRYTBQ
ef3Ou20Z8JjRV6ofr7tOqagchsJAiDC2+LLdLBzm4+//mMI8cV0FD48xPUNS
V/qoLvTyoSqpoCwS/j3vFHP2fJ0zgIzqU7SjAyoQdT/83meMN67xhK3j2UMe
H11O7gnJFvkzutWBEFllZjWGf3+holar0qQp3Js5fCHsshI84yjyrcI8Yrmp
Y/Z6DiBNmza+J+kRGmCRiSbe0fJZUYhRN3wBtJOZXi09QWCac+4ecf/4eA3f
ug4fmn9mdOCLK3zaeTD7yUFNVDjspEW8T75Lo/OL8BVfOCYgEv5A9jTEk4Vu
pcXzK7/GQ7GO54V669vQoWdo4W1xh/g1P/jllrmjFc9vVZSs//KVIMgY/fFh
lNUANecI3F8k6vge6IVuqAiCnbM+V8nqXqNim9fWbRg3WuOZXcdjPinztTNF
Eh0Uv3m9yt8bLDcGLcji38NO+bW/RDoUIoKqexTFjVB4w1FVot/l5SNBoc+Y
o8DH+5pdG6sp+i1cX8JIvP+2xsO+jqePf/SRzMQD6Oat7k7O8oLM5h8+BsQ9
wrtso5PfI0H5VzCfvo85otrP7nMI85wuu7XZqDYG3pps1OJqd0QhZmVNfdj/
TKzxfFzHs+GzimNv7iV4YOY3MGnoCUHmlWnEeebQD7/Tl5ViQcv1v05GV2fk
9GpFTg3zCMaLnLuUEAONj5u2i/j6o2YFc95rxPuZazxq63iafqVW32N8BYpk
hU3V2p6gzypwmPA/ptP01CkXYkB9tPhjgXwgekQWYyCEecob4gqybkVCMB/3
3qiJaEQj+Cp4APvnr/+DJ+Fj039VodZAdnI2/9IOb4jY5XuBHOMsHeWVpxbD
gfO/zVJFZ2ORDtn0wwrMw0ttpJ512w20HFYqwxXTkXrJezkJvE99MiBXF7/g
ALuPOLoGd7rBll0xO4n97usavnMdLiJE4caX6wgTtXMuJ/UzkEx7zBvA++zG
SxcTxHWeob1Kku6bPXORXZSXPDXWzw3/Y12PrPHvWsffnhchu8nQA2he7qyh
rPUE8zttWsQ5oZhfFEVhvy/YPVYS551whPNWcfHCGJdYwy3W4dJruM06PPoz
fwvFl2Bo4WfQ3P3UEWwvWXTvwPYZt4bXrcM5zYrfqNJHAGNZTIFovzVsg3OX
KIj60zWcYR3+1UhBgss2CgwjNPJk9xoAR/qDljGsD/vX8CfrcI2vb2/xPIgC
zk2bWSKuaqNm4QQDemzPdIay4lKxUWA05PH9amYkUiZjFnsz9X+48Tp8xxpu
vg4Xv2V2Q36LHyzRb5adEMtGpJ6a4qPfsK5bwzcw/H/xxINmMtyfrZF4l+z0
wieEglq2ZPQjEpSt4ZLrcIb6Okr/iFA0GKQsWnSyHMUWWCVsyyTBS7mclq1+
0dA2VuCYUegIhkotKPkP8e66CbPAnmi4suIW4U3pBPezM/v/YPxNxCa39qAI
CKL1paHudoHl+oPPxYl+IpmdO95zRsDdyHdjScWukHK3hpPQh55SMa3HuMKh
jcX3ts0BVwhjydGgxuMvh/bt2xQdBrHW6mFjXW4gG/l1ZDdxHrXk7liUFwhI
P31n34QHvFdj/DaJ8QDaryemvwRAl6C3DCf293BejmIfnneescDteq/9gXZH
U69ZrQcYGVRbamPcZsGm7p6fH3QtmHLfo/GElaNirS5EH/CzlTk0VH6gMecj
I3XWE8xE57gjMK78okvoMNaf1M4/NA4+9gRt8uvtxHtiYhe52QUSvMDSW2lu
c4snJFWIZxB9YENCXB4q13iCkhtFYtKgJ+ik6i8KYXxuLiQx56cHTGyqoQHs
ByajmCqfEPcjWS5LrQewLq2lT+ri94QUOicLV4wfVvU+sO+jO2yO2MRrt+IJ
DueiWY0xbsSY9+m2hxuc2nf8ceuQF/QPsNAT7yFoOG4usU1wgdd0fxw95z2h
4YtaZRHGrWR8h9KYAyCayerhH8ogsHkrRp+Gx5921NTj5csIkDGszjyy9Ao4
6W/T0eHx7JuPrN8vGwtvLRkmvh90gw9WVrkXsP/88UlES7AvHOx7pap6uEzB
l76pVZboZ1c/qrXzYgQ0bKBmZW4LhFijGmUHbA+uusZJTNYRMHcyOcunJRDq
vikKq2O8K9Atx2IoDJy8c09Wy5vDqdY6qMA8hqxxz8TuhMG23Gml/sQ3YFqv
LDWM8daFF1PZQZEQGFgiONQUDFUcplLEu0mGP2JHnNySIevZ5hPpnMHAzT04
wTGO9Zs9xdHCmDAIuV8tkJdkAX0+dMx1mKetj4eM41ooHN4SFxey2wbGSp1u
zGM8QYr5deLXOHB71kFXJuwLJ9yiyg9N4315m8OhV5EJcEdZxuqylScMnDUO
V8PrcdhFnzsiKBimzI6llynZAG3ilgv3sD0UTi07lkoGQu9VA5eJczagGfcp
iLh/58r9ubvhayLQCn8TrijxgJPcu3e+wv68ZCh91/jOJLhBuVPrR5sDCBbT
MhH7BWfitsfBNv7w7FW+6AtxW5D5lKp1BM8jb3ji6/a3fiDK1Lf/9B17+Dxo
ZHyGeHci7EpZmWISjKU3bj162gSc6xKkiPfbRa5N9WReiIPvQfM8b76pQYje
didbPG6y7H6MO2h8oZZrC73/VgeIlxeUNsU8TqSMC1IvvKGxbVj0w0YHGFsM
PkycY4Tt5L9mdi8WWPWUJLVYzREo/EoZwzzfq7Z6HhMOg2bKhFvTVe5IYvGe
JCMeT1FyybjgVE8QsgtvffDYAY4/LH1NRvQpcHXNuhPjCcPqd+Ut2Z3hW2mN
NqGHF14ddJgz9YNKUePiYakEdDn7ucJ7PA4Pfrb3HC57DYcHo8lHuTNQv86o
3MNRjIvozNjv8YBnez8b/JB0Ao6O5SvsmL+RXmBw+8M4qH4+acpVGAl5/21y
n8Zxln6f0sDFV66IWno4PVkYoT7DtpjOchIcCBmO/xrrgTSz3m45q1GGcme0
7C4VkWBF5riyEHMc7N3+i2bQMgoSdu/lzMI8F4SfhZPuF0KpI+m+19lM0Dzm
S2WG/WfpBYsVzulw1HO4wZqiqQJ1C3ypjo7Eceh4Gl/zAX/k733zZblvOWIO
2fp2KY0EH8rt9MMNETDeLhXqEcwFxnL/tiL8efKVEf8MjVqovNVfFmJcAjE0
5shYmATeVTPL4zm26N6VNFHlP8Xo4z7HgC8N2J5PPVb0adJBh/3KtWnGC1Hd
Jk5vw3YSZKVpMxWfcQX94BmPh6fN4eF90cvdeHx69vJpHNWPhNsPw9+FvzWC
5aWVZ3bYD4QzM2gNzrkAh9WYwPQPKxhTfytN1JUrk9kkv8mrB+7WeWcX6RLQ
zPn0+Q87CTYJh4rfXmkGTbh44tCObDgdxJA+SYbtNvJARPhDFxja4x9RHW0F
idVnbGqJuGmQmS/Q1hN2sLEqd0kawb7LdZ+J9ycbt/5ufaX1Fn5Nu/EcDs4C
PqpDE+8zxmByyWCEr7sV4tOnzL+FhIHvk5tXRObH4NWmlH1d2K4oaHtfHTzw
GkKbfYWMMM+nHw/yy5s8gJuZbkj6ySt4V+JWFrhM9ONm9p5zb4aR/Nai0F4v
eOB4xfIrG45D7fJ1fsg3QJRBR1fZSS1wvZx22/gGCT7veHimPNodSnR7yB5L
vILxn01LRDy+sytMz27MDV5XvD/DM2MInfVq+4g+0SdCXqT66DWAYebXUtuo
V0gtw7+d9ToJ8gWdcu68qYB3hRP6J9ozEfeHj92BXjhedvgj2KzpDm47qYbn
qPA6jeAoJPpHyMumLw9uc4eOqLiFPAYzmJXRSiXyjTdfKlAWf1YGD4o3s8pw
56A3/Y4C38JIEDgcYLivOxPCOpepC/elo+rX0vkvPhLvSbKakNu6ArXTUNYw
jRlwShyJJfJznCPkmUufYN1ypyxtSCEEft2fvFBM6NU64KM9Ew+xr25kgWE2
yr52/VhgDwlOHbrr4/P5NXwPjBGsnypCvbWlt9+14N+jpaik/DgKWo9X6PZT
h0L8lUcSPphHqOJj6Ia0ShjA6otVvxKe7KlLFMV2+3vc+ADPSCBCvxsKCvUr
0LxTkLxnHNYbjxpn6Pf4IqmyYZf8wVL0komjl7sC+8NBupxrxtXwaXis5H5f
FdixRYi8ZiXBvnoyy0q3NtDk7qU9sb0BSig3Rl8SGAMuJaPGp6OBSFfA/rAW
WTmin7LvtckmwasAm6UdHfoAKWW1AlCEDOLn2e6/JQFV2HGWcal2UH+RfIVq
pRGmr+1NKeweBfJr/PoxBp1Q/0B42PbkW1jkVj3BbTECD3NrNz2094ezTiJG
roq5yOD6QvOtLyR4vsGNWYcmCoJMLkz65uUiLkTBvozH30LCzPo770eQ4L+4
WWH2LUgu9j78j3wELon3SCy964Q76kmBzNfqoG9K8/vOnaPgW1sxJuSYCF88
d4ZShmUiR+Gupou92M/002+60ZMEDU2Fd7NHM1Dh1MbJPIx/EOUZb/Z3RBxC
4ZLXcRwU2Tkw24D95/Lq/Qhsj/57PwL/7kfMX7AfXzZxRqXfXCifmARCfXu6
BpE38rnuzjff3i64Pex4gXG5GpKcg/sDZ0fgvaVgWm3/e7gravX4KFUW/Izw
aNgwPwqq+sKZH03+gzgRzzN+8k6wmS6r7QqOZ9lfrOIR6/AN+4JTT+P5Kp/9
JZFknonqT2/u724fg5kvcmMGtnhdm3rBFeF81D/Gfivh8xj06f//8xi1PJYv
GjcBtRMD05GJRoAWqsNiiHvqsFDRN98K4S6ZqXu2dC06KKfyfUIcr/cNx4PY
AvOA92bByKaLdagm3XRiG8YN13hU1vFM3PwpnrgQCgN32/1YjkfDdZ9LB/rx
vp9zizNX5GcqbLV85ecp34SO2+85L8RJAqaD0cp5KoFoiS+JxvHyO2ReKvQ8
SW4Mfq/xfFvHwwg70vWpcuEoxTJrkXE6PDeq3+vShvX/sy9mZt5hqG6w7jCd
Vh0yHCr2jVQngculQgaHkhQU5GKfYERfixZMhI/kPiEB8xrPiXU8QS6ocPBe
Axx/8ZNjm2gLBFQtsZSrjYG/UtH1ma3Z6FXVvWGO/jpkviE+ersECY5RXN0V
OxmDTv4u2WMVUYFyN/C2ckSQIHaNR2iNx3+Np9aVTmLoWDuMOvl89b6C7UV/
suABzwgcgj/TZ1A0omCO9Dt2oBw1z25UMsX72rE+rxvT6vdR1L1WsUGGRLQk
GKUkj8fhYer1n5Re7ZDQ+vlIffgHoBOsNCp4MQKaa3jiGr5jDWfcbH/7yowT
qJpk/XK+EoWifnp/0cFxlsfHKwJ7L/hBgkdSp2ddBJqtIoVPYD2ptcaTvMaz
fY3n6vfmeXPefEidMzrm5VgFLeGZPlnPsF15HhHfqBINlc53ebuvJKEeYZGh
XqwrFDZdoSmpwDrQqFt0MTQJpW55JXF2mPT/8sSs8bSu8dxWu5MS97gcDXd+
NN1cX4s4VUS2tBwkwS0TM/OkJ/HghdpdLEYTUZ7HkN4tzGM8fuQRbVICXIqe
vcbXmoCclBMURDD+fm1dH1i3rhXX+KfX+DnW+FXX8I1dq/jBNdzovhd3A1Ub
2nrovrP9eCf6cH135JznCJit4TvW8Pdr+OkB25M53R3oU8nYg+TNnSjTW6d1
5vAIhI6ovy7TqUO9IpKZjLHY/vsbhVx9xiBuDR9cw4+t4bFrePc6PN2+ZMTt
WzbKPwaxaaLZKPf1raqPWLcYyfxdLyhc/u96QdJr60VxDXdeh59fw7XX4RfL
7pItKxmiIYELcVV7zFHjZ7IRot86xxr+Yx3u/seDo6hUA04G5Xd1fXJFlkJb
PxDncuNruNQ6nHPwj0lUnjVc3yhg3n7SD2mj4iAizjq+hl9bhwuK/J1H2CP4
dx7Rv3lkN5bOVNWKR855fooLxgnweza2wWoE61JekbZU2TjUVvJzo7ZaAswJ
ycprYDtsa/Gs00+LQjfOgPXYiVi4lK11+vxvrMOnJOSCd4UjPkRRoK4cB+d1
U6W0iDhiz4HSZ/uV0aOVIwWb+ZNA5oisz6Mpog9O0CfzRSPwP2q6zXswHXxS
7sTOYv6g0l6QuOwIHXUDF0YeZUGn6mWz0kESbFG3oWzZkwiw8ae5Ams5yG6y
PleYRILEMVLFpZ/5MPlWh8udpwHMwg2kGI+SYDA2a6PF4yzwm9vtrDhSD/6n
fY0P4X1fFMWHUO3IhI9WT5Tuc7XDFbuh3t2BY/Dfia81FZ4RYJR+/9Y2qbfQ
/m52A1vDGPz8w+C/cCkdbW3mCp480wQfNuT/icP+dtBt6cMd+zxkueBUGbyn
Eb7srHdrOkCCXaylM/WCbQi9PGI4+i0fsqROhsk1jUHQU07HT5ZtKHoiMDD5
USbcXeRjKX43BrfsBylbhttQFsXglcyYVBjorO2+2DwGhyYzb7DQdyL2b4wq
6tfykKhAU5lb9ii0WNsfHQ74gIJLaKyPVhaiyfJL+Txlo3CYc2vQbqtONLjh
atSr/bXINiMyZtupUXBe1dXIX+Wvrkb/dPX2oLMfd+ckoJMdfnKn3mUApeuK
dFkfkWf+1w+g4Ji/fgAc1/wAWdCxIXm+SKSTy07dMZIDy5KblzKxHtPS5/Z1
2PsBZTggYXW+WqSiy1ppbjgKG4wl9hjkd6KaSeomMZF2VNhrRXdWHK/rfs62
wA2+aP4I48OY3XlQfcH/cQbm8Yp/Wamr/gDpK7TIxM8Xwfy+g4cGsa5jfR72
7FtRBwq2PtIXlt+GPpDcrxwRGQWeO7WaVCpvkcOVtD6ztBZUOM90sqNjFNx1
rUWi453gbgqj6/iVcggU/ZB+F+uutvKBe/N/3KBMd8vvvuclcFHuzvvgOhJE
WjYEUO8oQxOt+XX7gkvRu9b2eSprrMM9fE24zYvR0eBLQ9VBRcjYRj5oOZgE
cT80m2/TeqCCU2ZmgWN5oKvJbr/QTYL/MqNytB20kEjnhRSd38Ww9dy3Ma1G
rG8PPdA84lyM5hP5m+kiipBzgWRNGebp9wAW4dMJqHg+PL6k1B49GyhcNsJ+
41Rw6dPCt3EoOqKQ3zCuCH7NsVNx1GJ/8k5/09W0XPSU/vexa4p431Y/dk6u
jAQONraBDWL+iP+FCkoe9EFHlbcotuM418Q0uH+xwB8d/XrP1YrLB4X/+hNP
3OeqstUsvIyuQialUYfCXiRD6uYfTeN2JND8/Z3X80clWvQZYz7iFwX7T83N
X/clgfCHUdatLAGIMlaWRmvaG3EE7jpK8DN0/o07UM9q3IG61uKOH27c51W0
a9F/A6pWXcHRUBD4rOqXDtZ7PKQ/XR4tiG5l9KVfqzeURUtonqYjAYWiLG+n
uQcyopZ6n8ZvhCRQ4Ew85pk+e6c7RNYTlXMx36399hItH7JfcsL4oMiQ+rB3
K+oovfIt1TMM9csbj+Yuj8ExsX2jY5YtSLG71KlHIg7te/qSh20LCd4WDugd
EvBAAa9ZT6u2miDdBbGCKMyTcrV635sZD2R3LeyDD78JGgc7F4I/SzVmgRXv
R2fO36hTHclA7JffSPD+GIP2UuM6W4dm9DLITofFIgv5iEU/16HBcUfVFmad
Zx44YB4aO/DbGDUw91KHYR6JoaNZSjucEEPI/foNvdYIvbKjIPoQiSC1YAPX
RlSosPt9vE4h6v48fJqOntC9Cg8mfteiHZElEoc0C1CuUj35MVGst3+zHNhW
6oJW2jbZ3jljjjwehfD0YZ7C1XMw9MX87zkY+ncONi4rJO1J5gyO+x+m/9dR
AjvGCu/oYfs5uqrbEWXzX90O/3S76BSVTst1f4iwuN4m8KUcNv4wemSQgv0z
r7DzFGUFesp5oGPpSQFajByyMLYhweTUq016PxGi0Sx/Mr8jF32jdL2sgXVa
oMENc68tEaCClYs8fSVwslvojuJ48BD/Y1u7H77QYFI+WWJYDo2fNtbdysDr
69bfcwy0su3vOQb6d44xvHpOgvhWz0lQ/to5yUq5mu7SvB/osOSyiZwsg0tq
pKXhIhzH9Rx45ZCHbf9CG8c5lXSwXagzO0MiwVPSycrChx4o4jLPQMhGR0Rr
PyXGhcdNKdE8Ht3xQtIpzvPCwU6oIE3AnHhXP4yacdIyyBPZUn1ka+RLgibR
KB86vH+ZuEwcvdARiKLzKJ3prLyAP3VFIwvbf6WgQ/ZsrhdqsOzmDZx0Qt6J
20fzMM/IeIXTXTofdNjo5ym5Hkck9ysx1Q3jBit6pGOuwaifrFt6mNoWpA7o
rhDvlXG9hBRqygRkJ3o9ofiNAOx8w6HLj+PWrlqnl1MvfdGeJEuNo9IOiJSZ
MUvkpRxndue6ouiHaCyDzTRv2qKrqocTVDF+oudGgpBpHBLfa3z5CqUFmvgt
dp/oN83Gtvvedf44dGLmq8PVODfkdWxqyB/zn9kakq64zx/dP9rLu2Btg8Q7
SzVFMU/G6jkhkhX/e06I/p0TJtEKp4vcTkUvJZ3TrwW6oFLZ1I/l4yT48xOv
+E0paPb1oGnRV09EEyJcoIPnq/Tttz7B2SAkF1fGtjBkjfIMV2StMY9e1XCo
tFAoSvRSEnh33xqVtkmabSLeZ6Yo+nm1MxFNuB80PES8Hyn54Sgl1hWa7ik/
hWfj0fLp42/0Hwagm1n1OUV4XsS7Lqv9yAtDt4sVt8/UWKGYyB9f0vC88DSd
h30m4chqlJfVSfQNCk7b7WJF1IlIMfIatEQhtl27lWx0glGh2F7mHDwOoef4
/BVootBBmzHdurkgtMQ7Ri6Kx2373J36EyM4DlreklReYoaS438F1mOe3DGh
mh8x4Uh4MlAl45gp6v8c/tEA42HDdUy38Ly8zlt5Ip0XgP4MCYWKY1w9eTxk
OtAP/aJctCpsD0COz5L9iX6OpSN/z7dRrcHf823073xbc+PL2qLlV3DNwPL2
tcYi4PumH/WolQR7L5g5Nj51RU/jir6nUnkhTh1/yVQ8X+2r5+2of+/f83b0
77ydY/V8Hn0I/3s+j/6dzxuunuejkZq/5/no33m+Sa7F6A0WTzTbM1kLIZ7I
75mqM1FH0/nhY9dOS09Et/nchy/ZXuihac0cB8bHrRxtNIq8UeFZ9hIGVU+k
3cAIxLsKH/WOfvd75IPoyKS3imC+hDvLKURfjP1t+xV/sviiYy/q8ovzPJD3
tZJ9xD3ycGNhYckDP7RX/EqD6UcP5GrdcpDo0zE/+vd+BGlv/3s/gl6t3Y/o
Bugd3YjjXMnp1DBudQ80z3vabg/Rb71ukXmnRRAyzCzlUb/kgZpS3JSJfqxe
rQN9JMlg1PNYyeH+qAfaJyUTEoLxmN0gVc8SgRaCymYvDbqinNdmM6ZYF2UG
zG/99iQCqfsxUhi8d0bO4Beth/EWJfGPDZUR6AHPxMRpPWfkozLwTZTI31i9
b0Jpy3/vm9C/+yb51fsp9HT07/0U+nc/dX3lb74B8lvNN0Baa/kGd1Pzrx58
L4vSUukvcy9kwoUrZOZ6GP8ybxjrc9kLHYhFA4ZS6SC4JPpsdJSoG/JvSmj2
Q3RhbWf6FdJAw2qI/NEYtue2Dx3HLSLR0ONCBtfiGIiXFOq9iNfL8c8jzp3h
Mcjk5TMT3qwQMKn4+ucc1huCm6cbBGNi0HEXlYvv3gXCm4IxlR6MK+sOCBSc
jkEx9x5yB2xxB9fBdzpEH88w2PnK4W0M6qea7/yd6gIOo/cMMjFOcUAsvdEj
GlG2OPIr6ZoAncEJmRM4LqY6XpDa4RWFXHbWdE9PvQblzd/73mE86JdmPGiF
oayhg5OCjfrw/vxVpa1EX/V71VcSroagnTt7gnq19eEWm6sB8S4o0/5tEo/8
fVFuwgfaVqtH8FFneHkW29vUeGcpw7wPiki53fDGWgVqvI0ziT7LPUZsm88u
uSCuBGnH8FOacGw6sYRxhXiv6W8eBWqm+ptHAf/yKJ6t5l0g+pW/eRfoX95F
NN2p9oOCL5A7L4dQ9x1FpMQwfp3or9Qcso+ucvszKF403C95VhbdsOKaIt51
nIl60ylUbQgKcXUK/CsPUfeKS3YXxkcsLlWnjXshQ11BBo3hNET+hpmXyONq
6zpbsxxpARvf/9zwVDoSIj1uXTEg+tk9tPsZ/OceVPZYRytPZ8Ku605ghu0h
P3bixkl5/Hm2EWeu2+GwZZ8TyQHbc3iEo8gUrwNsHtno+lD2KaJ+VD1B1NH0
Hz9vI5bjAinRar2LpY+RBU3i4m6MB7/eG7DvvRAaquq2lU4PArWjmtREPp7W
/WXmfnUDFOjypER6ezDofldiIvI04u5sD2d09IWj56jl3v6njgy1Qr8s4s+T
mB40nYvwh+bqOPnM6GdIzOjyLLHf6Rg3bSpPMkAaFxJlDW/6wrc3ma/HiXgz
kZZJKk8LuabdsFeT8oEYoa/HeIn3J2/sYXpNCoRD7TK+pRHmiLRr3/Hv+HtX
OMlCeeyDYUmDJ+zCfgt05EPKc3vCn8iM82V8fYHiNt22iZ3whgtOHtt5MM9B
HpatQWVmKL1Ts7DewRP6Vs6deErUl1V97u3ligKOtnJDXxVLJNItEUbcj3/r
+RURWhkFb3NJtbZnrFH0+bQGM4yXDQZ3Nxc9RYOMF3xONnmAVZmNZg7m+ehl
tpP7th6KqAuNKBv0gK+O5EHJRH3Z++Cbyw+jYculi9/oYpzQe39DlTK83o1Z
R6ajlaJgMCPWh+muF7r1PfAd4QccnX28H9+gR8qqtLSS+R5QtaV/jjhXlyqX
jn7rogKLV5Jjb9N7QoVP6yyRtzY34aJ6oiAGLFm7GJcgADXIXpNkx/tX0H/O
dfGO0bCr4wjbh4lwNHfTvvwXjq/fViXoXLymADKX/L87MOFgQ1WH4yPmudpr
wZy9RROsfnvsU+V1hbIXkoP0RB0iX3zIB5EgKPlP6vWW7jhU63JN/RTm+agp
cEqlyRf0uszEMs8noS/HfGiU8L584xnjq3M5psD/5cyA+LAr8ESptRP8n1fz
D8Fr89/8Q/iXf5jCM9rHKegOzRs1L1DrpiC52M/ntLFOUNSl+CKSrgzHHxkf
RLfSEc/KtkpprN+KCpcHz75zAofWVw9ojdzA1/tHpSjmCf0Ttp891BnO/uLY
L83iDjKa47WE/Yyphnv81+SA+OJv6dxhyECL2kkFu7GflPrvtbRFsxfaykIR
aj+Qjhw0RERDRwh9IrLnSqUbOKTczGHtc4bbrGz/nSbugx7ZuHae8wKNT0n8
GuN2wDCm7b2M7XbLDB3LL74wFDZ1l9v/aia64nFUm6jPsr9+u4f6DP493ipp
FNJxqM6kWYHoV3tuNe8UmFfzTuFf3umPix/OF9xxheP7OsNL+CNBXkpTfQjb
W8hqvivYif/Nd4V/+a6HcmkuLpb7gVvxzB3BYgf4ZNz4mRP/nvDVfFpIX82n
hX/5tLyr+bTwZjWfFv7l095czdeFpNV8Xdixlq9rsJqvCyuaf/N14V++ruxq
PjBwXvqbDwz/8oFFyOQhOTMQHhg6CtlzeAJpKbp5FOMdN0UeDLL5Q9HEknjF
CU+o9P6ST+Qbbw3/m28MH1bzjeFfvjH9aj4zfNT4m88M//KZRZDpitwJP6jd
913FhtwTJIR7Aok8B564ku3kET5waX/XXNI2Tyga6mL9gXHpM78/sChGgc9j
uTNSSnpQk1KlTod5anTl2h4wRUOygsKSe/Up0E2rjUrH4ywqVBrENeEJ/Keu
p2y87AWyZ+O2H8LjdusPzY2HkZ6g+fjW9NsbXlC/ZO3IS4yzoWv4C4UYkP+T
ri3ia4Lm7mkIEes3iy1IvvNpNDzKzFaY/e6F/HkXY0fxPvh7S0r1p2wv+KS3
XxXMvOBy8Tc7It9b8tDyu/EcD+j04I9mvOUFg9MutUT/soy0lLMFtJGQefnY
pkbfSMRMZh5thvdfpc8Pt5dsjoBq+8ZQZeY09HXnft5b2G4ha9HuzRsPKOET
sBV47wmn8yw2E3kahi9Lege2usGxTQ/anOo94UYF90gKcW9e8fRi4TZv2LPw
TMp1MAfNHhCSVv2K/WrFVJHxcVu4vCGAl0G8AKXGvvtk1In96mo+P3it5vPD
77V8fqEbf+sFgHW1XgD+1QtYNl20WApVQWW8gUeNDYsQveLWZzltOC4IVVF5
p+SK1GY7coqnilDewe1Te1qwvqWQSyzwdIHNrHd//LfsCbkLfI7Ee+yHA46x
MFG6QIIPr7dJoxdQadc4xGB8d8StHwVLwYjLILzyi2cR8rWrWNjcjPXGhL1J
8Y4AVPPnMuW7tlzElPuhntSD/cByvHWqnyvkpDedZ5/xhNhzJpqETiY/LEb5
M9wXBtszdK2u+MPOrIWSTCKvY0nXc8OvAITeUZVQKWSjxmsPPj8bwPM4+Tc/
HMb2/M0Phztr+eHzq3UiILlaJwL/6kT4V+tKIHG1rgT+1ZWEr9ahgMVqHQr8
q0MpWq1bAfvVuhX4V7fCtVrnAtKrdS7wr87l2GpdDLxerYuBf3Ux0qt1NCCf
/LeOBv7V0XzRn+J8sTUCrAYvvdGhMkdDBnp1Z/DvTGtgrjzpGw4nWjWLE2qd
0QwdxdZv+P8KNCqg7m71hLdPLtP8uhyMDsc+/WKGP886k6ilUWOALLwlZIor
cpHVsXuUer0k2Ccnw5X55RVScTUnP/O1AAU5Zzv1vcd+vmvw59KsI1r8OK0l
urkEGTaqJz9pIMFtqULVGNMA5M1qtS3jYCVKMN3ZfycCxxH7dHcdpAxH566+
0bS5VIl2ef7iSgnFdhtzY9Q/1xVtyPJZfCBSjLQoSbqzTSQYsqL3LDijjZ6/
fHjy51I2+pTRy6b0Da9fhxPxnot30ec/u99FBmWi7m16+2WGSOAqRZMrVycL
ivsuj+58nI44379K58D7yzky3tADtQpo6tjm45wfstFzeMHYinlkRzzuJg9p
Qd6ipPp+Cl04/Hs0huhfE6tyT/IhtQZQNS5lCFk8h8FrcuSEDvzJe34pe0Ed
9kmrguI2M4g67bqB6MOu1Hh84WuNFigJUpb8SLEAk+q2OKI+WiorpWbLyddQ
ufJizxNSAJALjioReTLUVyP2m24yBeMZ88JusjCQ90iN3Uzon41vAhzFNOCI
4fxWpYPRYHPDTicC+zGDp7s+PSV/DS5PuFPGJ/OBUp5TtaOLBOai2fOvmwRR
Zqr7NZXccjAUvL/vRAb2zxG/bqobOSJTdcvTxa4V4FLM+KA8HvtnE3PrnU/S
Uady88OsujJYuNvx9iLGb5MXFAZPZaJrCtx8QUWlQM2Ys5s5lQQvrFidyZzL
kA2T7cA99wx4WRT+sDGOBGfbuhzrnpWjr/Z5doWdqdDnsvOiTzSeryDy9hfD
1ahqmr2OtdcBtnIHDsrYkmBgp3F2xI9q1MitlHcnzRxuqLFUDmP8bkdYWOF8
DSrQEz9dQOmBdk0wny9/hXXjwQLV3Iu1aHuJq//FK17Iam4H3TFDEuTx+iqc
flKDJrngrJWQP9q6aPqN5g3Wbx8DL0kOVCPqpae6VcV+KL1JxYbFhgRJkbHS
fiwWsO3V60X6m69AeWyuypXQ7dqpR8voNeFEQ+T1y9+1gKdZRIWomy5OUMxl
qLcCMXtSk1OwOYQgYQ55wh6+p8NcfhXydCP3vPLEF2mbXZsb98Dronvf4Mqz
KvQxlu2ivqovEtCVkO/zJsHFB09O3s62AdvpXUYWJ6zhqpLpDQ7MYzfxh6Nr
jz0kux6S6DFzgI1vZi42YR1C2xeZ+ORhJSI9TPavdfRFeykPS+mEYT95+oxj
HVslqtCgp2up9UUU1z3VZvA6ogsZrM4nOYKRMtfM4DdfOO/lepfIR917ZPow
W6o9nB7w7XkREwx1Uz79p7BdWejrF7bQVCDOXUXfNTkDUJvfdcm8JOzHAq8N
HawpR1ZB4+RkYQHI7Pi7XVvxvKc3D/b2HH8CC7annUv84sBx6EAjcd6ozbRJ
fo/kCSTFI8E7jv2QEkeK0za8P5YHpp0/U4SQgNisA3lgIBK5LK1JvIfjNW12
TGGyFNHWfz516lggigwIVOIvx3gbtZuTjDP6lCKdVx6aAGOSTxcnsf78nnKT
5udoFOqXWzrMcSYd9GK33VbAcdDjQ/81jUWVov49L/kbF4IQde7uIKoKElw7
1joYfbwEXb3glzyjFob450PSSmqwH3s1uq2EOhVRDRsbRi1EQ5Tpx+oV7B82
XHkg53I3A/k9zJmwex0G5rZWkxKY/wYvw43C0QKUyZEnmlQSgWbFEgtG24i+
Fdwid24VILfn15xMoiPQ7wUy1tF2EphJDqfXDWejSWXXe6WxzpDA3Xq9Ee8j
dClqDLq+OciGm0Xomok1cN1LWnrUT4LqsXihO9P5aMByQ88brUjk/vnAXEwH
CRrOXmM/XJ6DSusGq+N3RyOkUn2aGu9rDRoGeXqWOch+19nazg83gFxq4QwV
5h+0Ac9O52z0xJuJQaifHEjcwO7+nQSfGO7+SXuSgdxkPUys6SOQnRuriN5P
Eix9F40RdklHH55PzHm9CUfSbruy/PE4mOXK127C+mBTedH9gA2KqCtKVWGy
D+s0yTMsdlR5qPSR4NakBSP0PJ1iPOIL1lesx6ll5NORjkxgd9LFCCSey7Y3
BPPEuXLtcopNRm5KVsJkZFGouiI92hLrcBTxU3H6azZi+qxjm0ltgFh6N38J
wP426bvkw6qGLOTwmMKDcVgfgRYXmxrW1WfUFLUFwuOQsueZJ7XaIWhmppWL
yD+MUW2Mq5SPRa419E7q+4NR9IY92/dgvfRhsvEo20ZnMGkuqmF4Ygucuh38
pUSe/9RPOkkVM2hmoUyBUwZwlzUJEvG6++6taSX33g2SfffSqlY6wulkdmfi
feBiumjPiLhMlMU8/eu5rz56cz7Gig3/X1dEm5+HqGai3aask3zoBfL23bqr
DOOl1d7TBuru4Fc1bX3TxRl88vWuEX3frB0+Clyd94CBRGGeKvw9bbvF7iG8
Hoc62d8Z3MhAygzGfZsiDdHn0rTuvXh83u7n1aHYkoEcZoLFab2NUFddomsK
xnmflp9fxDrg0/huXqlGT9iScUhHF/NEcohz/BFzg6Pmi5cTsjyhQ2fajtB7
waEFJRdH0tA2aSoH7nsmqPpFpvrf95ounkmxNElFH5KX2PJyzZDNbOv0WRx/
naV4oXMnwglKo+gY3sV5AO3ojOJmoo6J4qrVQqI9pL0ROKvP5Q6KB/TK1DDe
JhLenyaXhD6yeDZ8A2MkwsxMYsPrVLBicMs1nWR05tvVya6pN2hLg40MK56v
LrdY62o7AwhKqk/WwnHVgYirs0RfFcvGsEnh+qegSvoaIH3fHVrNlmiJfnas
XZn+irxJ6CQPu62sgB1612vWO4R52N8Wh1GVxiN1hdJfl3ts0ZXUI5uH8byH
9/4Yll25hmoFu01YRGzh8eR5duIdLQYuW4mHQrfQgS3fL9+YNodP6h3xxLtY
F5+dnJnSS0AN6S/6nFmdkaeZcgUz5rkh3sEfSxmHVBKXM55ed0JHVGzOLGLd
9bly5nnFtYfoYfWR84IVr0CmqZSR6KMd7xKzbPlEEd3fQffIYe9zeFoWcOcn
xm/cPv0o3TkGZb2Pk/xZ6o601SWmCL0XefYuhwp/NMrfOFD9OssDOZZ8CXiA
/eQOxin/8qEDYBp6eewF4zPYw3KvmagnyvTkGpL7IwNWB7/z/elTB4myfFai
b5T4f8IcnwrDkXOYVjBjlSuiOJ+sRMRNjz1t9F2fh6Pmbffflla4o/fkl12T
ifc8V+S333x6F1Htaly2NFQCE7qLYkQf+Q86Eu/sLqsBrffEudlaGTDJ3PB4
DuNdLAXHk0TC0AWm8StUjV5IgmzwQwzmCTO1ab04FopI7Nucn4V6oz4p98wA
oi6m8JZsbJce2GpKZe6muAM7HAyUiX5Gm8qdK3/PySOapIgrgg1M6MMrinvE
OyEM6v9tk+sIQElaL/lnN3qia09yH7Dh/UhdJvD0EMkfTUtmtid6eaDrNK8X
FTEul7eprbzPC2ibP4/rMLnD7Z6VJD1s54wcTr+1khzhDcvsAxY9a9hw7nnm
d2w/Qgc+PnAN9wPKLbfLNpR6AkUVgwRRB6dNUdreeeYmejwTtGtAmwf5Bbyq
J97v8rgsEP+J5hWcu92kWLt1K2ozO95MnNf9t8azaR2PzLcNyQL3giFR/QhH
7w5vYAR3xqvEvcO01gy/gDGM+edYfdhxGgkm0Ya+xTwsJ0SOKapxolrTdqas
H3dQis3JPcT3usaTWoaehoOlkrn3E08vUPmpVUTUI7j8D/y97s8Xw3K3QXMl
SvFgsAJivLY9lHh/lUd56PklZRsouJWmWoT1rwTVo0dEH5N/PObreAIFnMJS
RyNAQGzh3vP3zjDH6TBIxDXA+P2VxtcnYCdJW3LBSx35uwT5EPrHc1fi9nGu
BzBW9i2nTlwLNXDtNSLsM2CN58w6HuskNrudVjFgHTo/tIXWFSTHB2aIOqkc
jt5oGkV96OQSeklyf4zqLpYpfiHeMxdzcNR79AYkQ+d2ZsgbotCCV/uJd27/
8Vis4wkRHrp3em8SVNXEmZYUuoDgeduZKOwfGttvOPX4mcDJ8cMltwKN0XtR
P7EQws8fnNQtqXgKKVElI05PXJHCr83NRL3qP57ydTwlh//UH55PBDWzz5Ld
58zAIFciVR37N4H6q8fPnH0B30csQ2Luu6F+tqO3xrG93c47kMcwYYaiWO3n
6ZQdUVTOF1ninBmt8dxfx5P8DibYq9Jg5s/71HvnLGC+m/nuKPbPQRT09G9b
TREv+fK5wlInxClPuUxF8Exf0sjfbo/C5p/KCiV5o7EjmVRVS//HM72OxzqJ
Npn7bSZc4XW0sWQ0h8NfBzh9sZ5hkJnYKJlnh2QFX9j+ZPBBvloeX4i+FUG/
X545t8sDsXyJpJw+54n8Ogz1ifPbPqv2nXRVGXB5R0h/9o7ncJA3/9nRERJ8
XcMvrMNl//i0m0e5I7rfFk0SlJ5InQ3JxGIeHva3GzZ2uCN7DqmS+nYXFMGn
ZbsJj5vs2rresW5d9/0P/qwHkg8jxHLBUW+raVK3IYTd7P9e/xXPu13jwPbY
bFBN2BE35fUUpt/mil7E+qdhDVdah//7/L11+EcmzfBf7Xnw2/ll6mYzbfjT
cU5MA+uurjV8ZB2u8oeaqTAoH8hXZj5OvlRBTeOhh7d2k0B1Dd+xDt/Zzus7
W5sLT7VVjueIeqDgIlnO21+IdzNW8efrcMfrr78xnc6C+/QT2o3dcSiYVNJJ
hv/f9OtI5/wGPzhQd6H588tUdPpep+ZjPO/xazj7OjxmDT+4Dn/Xf/Yrh78d
GvoWLcB1NBIVbP8xKonXb/ca/msdnl9dTKa76Iju6+fMjbL6oM/l5bucl/4P
V1qHz4TzVQbU2SCFP6pP5OJtUN3hEiaiz2z+UpHOjeRIuK6XdFyNJxRK6H0Y
l/A+e+umqMLWH1GQnTvqlXw3HDwbfVMj8L4M6Y2RitpxUCfsJMzFGwGnFTlM
m3+TwOGy8y0m3kRIrRnd1J4UCQGOqrQdRN/qVxebLvWkgsqB/PdCl6OhLLGW
MwXrtOmtu8ILbdMhbM/2lKN8UdB/Nf7UAaLO16vwveFIBvgcyQoLV42AUylb
armx/hTcLkO+61gWPHwfdHkuOhIOawblO2G9XfRhikbNOhfkq/ezxZyPAkX5
poZneH4jAlUFhRbygLLAnKbrehQMbWzfv/8D9ht0EVwpt4pgkfy7TyFfNMzI
lX+qbiDBgtNvucWqYtBxmOxLH4uCI8rXtn2qxut6U63d/egSuBDEQ10VFg7u
bw4NOFeR4GbYm40Lk6Xwjffq75zZMDC8K6j0FeH96E5u86+f5fCqOzOgOCsc
pNzOuW7EcZz2JPAdd6+AbTk/Xv/E+0Bj3m0N9hi87lQ9aItjK6CXJivV+lwI
PL9DG3YC4+d63j/ZgXFLvRS6jTS+oChZyZYcS4Iv6tRXu2uqgG1/vD6MB0Ab
vb5JpjsJdO5kuTeqV4ML60xEU0MgLPFwn+lzwHHH8835mi5RMPtHZedL+iQI
tN4c6jKG9XMnf1Bpexj8iDTPf6gWCKmvM/Rl5kjwQ07ov3vqMRBZtYXesDEV
FFv3btqA50vT9b+7XM+rQfS9/8bQvgAwzX1g74T5JV9UPudQrIb5edoIVREf
OGPym0XOiQROZ3p9J38lwufRPVLH+tMh6vq3p204zirfSZau6pcKvVo+t30g
C/g+x4gdwPPlM/dy4x2XWlA4LOVrQh8AG5TzEyL0SEAmMJPmz1QHld1Zb/S/
+0NXgTH7vickaFoRZmjSzQLqpeVtNHWZ0LDA9ZYfx33bur6epo7IgbchPzIo
CzNgUzZPwlwLXu9FNo6SorVwfuXAjWsXHCE0TftImSEJ/qgzSmt21MDt45I2
1g/14UTC14gAExxH/BdxOmhfPtzqUXWwXsyEn++Sor7jeR+Zqw+etSuGetOy
55EeORCR4nU5Lo0EBxo7upR1ayClSfqGxm43VMHYsihkTgI3vqz5Lr4qeFbB
xvG0JQopCY0sUXmRoEVc8shbHF7RNX9nJo/KgZRZmmca0TheA36vnKVyqLzd
QkGnnAVmGzXjZ3zxvvPgnaeyfBkUX+O/7j+aha5znDH4EIX9qiS5BlldIfh5
ZUlvv1GAUp80l6Qm4nVNabfF7WklULvMbxnalQVCgoMdlI4kYHosGLL9VxU8
UM1geD6bBZIpL+3ijHDcXVzsz1SdDLOtdS71PeWI7cI4bXUkCTZ7u+1dnIkG
qpz61/Z5FWgfi9GZDREkMA4LlFngr4GpjeZJYTJZoJBc2TeJ5+WcddHAedY6
oJXzhgOLGUD5WG0C3cXxxZCduVXiLRT/8n3ht7EqxJY0WJTlQQIjKepl2CQI
7r0K8Z2WFUjmi21KXwIJrn6jUIRH9dBxupl/OTsDssu/SMyLY317jkq2mLwR
dtCL5dpopcHBE+apqQIkmDq88GtLtQUSktO+lVmcjfK2kNNU43iW82YYT2Xn
Y9Rre/nn1rQU5N3EvpMH+yu78yeyLE82wvPPVzKpmpKg3v6GQYQgnscFRs0W
ySbguvPR2jwmDmiMdEMVj+F92Y4t/sxNNbSR8p7ipe3+iCvj8wqRX6TUrczV
fF0dNU9ln+drd0P/aReVLOD9lO9kz8dsm2ZoUCX9OGUaD281eZHZHqwbb1t0
hzK3QO/ItN2P7FjQua+0NExHgoeet/lV9bjR5w/H5i5aWSLNIQkxIi4WWshQ
nX0piWJZ0m5J+JkjETKN54UY5zOTZ9Bg14b5Zzw7tlXlQDvr9o6reH1p847J
yzJHwEDm04+f3OMhh/P03CKOKy2YqnnGr8sB7e1Xd3Y8LQB5/XdWJp0k2Fp7
UJf/dAvMkNkcS2qMgfcjCty78O+R3NE/6RjQDIx1ilsP/g4GyQqXD777iH6X
s8u+Di/A5IubLGdwIViEeEnZdGB93jhKe5gyGJwkycvCGUogjr+3ob+WBBu9
F5wEklpgg/eF4/xewSC9WHxu93ZsVzvZahZ16iGoO5Zn4roDMl0UvEqhSILc
dHNjKa5IKF+OIf/vUzFE7qotCqwhgfKUklTtk1jgbvu46zRHGRjGGsik5mK/
V/DIVrumFtTOySvJM0UiGvkypfPaJJgvLmOwz64ALsEjIebdGWgqV6TlG153
jkyDz1U+JMLQYwrrgIYyaC4ZTO5KwXYyUuXdl5kCj54cOKGCKuCdnrl0bgBe
j5OftnXJFsPOffNyDW9LEKXj9q8OPiSIoi0U+SWUA+ly1m+P01Uj0891n1L1
STCYLHP/wGQeNNzcbeQXVQ6t8reueriQ4OXeL0NJ/xXCn0K+hnCGcrDVpko7
60T0OXWikDOIhLpwEre+XAO6b73MwS+J15EgZeqzm6FwwibLgp+mGXnceNGa
eYgEj6xavV3ziuBjnnIig3Q5pByxYOK1JsFzAZo3vvplwByy/6bBB7z/pL8L
1sPr8buFrlpf+3XklhK0/0NWC3ITuXemi5boU39+u7alF2xVPLptX0A9sjq8
XLCM16ksF4REPyoHppomkXNW5dBwkN9qrwYJenrN9r+XqQKF4J9pHnfKwclT
4lgk/p2X5Cb7g/J94QePjI5ydRXqCNVsU8HrWiVH4KiuViSErhS1deqXokmm
0WKzMrzPKjCwOx+sBoa7p1h/d+J53KZwUUyMBNUHxxtv/G4A+ectOxKp8mH7
JiT8+CAJ/FKFd0fRxkOfc9Fx94RMJMW/sJOtD8fLJ8P7HfbifTriwob+5WSk
HJn5iX2UBGX9GajAvBGOVVnySK7kQpH/sUsI2+1FpTPhCrLNwPosxsj7Rg6Y
tJkMZVHjfcqOuWs7ioRrXlbGbJ+iEVL4vi0bxx1Nh8U6L3J4Af22arUuf29E
J/GJ7xfx/qFGYrFMRDOYVU7cm/qSDdlbyukMKEnAq/uI66VCM/Yrb922+sfD
Chm1/B8WEgyT7S0Ja/eAVkU+cYoUTxQZ0PlCnXi/5R6FsWa5B/yM+zb5otoP
2Z22MHbD/N5b82MUNOOQ6N7vZpN/CsDTMspqfzMJxOZ5iPsReLB6PwL6a/cj
IVQHRE8UpqDbp+ISwK0I1Ebs3EwrsO5NkKjYtL0ZVKxeju4gRUOSbYwYOx7P
ANZu5pinjdB/l4me7EEYojTa9Lr6PAm++XRHbmJIR1RxPEzRx8phhEK1NhDr
kN41nHodrsH5ll1ApgY0Dba0pdeUI9bdX7w+niSBGU0nXXNAJWzJnmC8LlmF
FtUPt1vyY92yxrN5HY+ouNWU4/1E1OA6p+bdUwW3jzY/0rPDdhWPUpSni+C8
yM2NCjtr0SbjDR0biPos+2uBx6pzobD74+hh/no09nPyvYbw//E0reN5v83m
ZhFLJmogj+Lv7a6G1xZ81/ueYz+wgfPqQ6wn/VkGG5OgCQ19Mot6gu1kpOLd
O9WnmdAVZd/1kbEOHfMhcS7IkaBtjad+Hc+fBcdLW3Rj0PEGrujzI7WQbD1Q
KPcIjw9Zh4mzST64c5/fFM/QgErSH+yuPU4CWl9pJankPCgRMd+9otuIdDpf
BkXvJcH4Gg/POh5vmRTnmfNJ6Pd+Lpup8Vp4vnAuJeQBCcz3/bDu4SuEsu6w
Co3uOrQ5ZzMHH96/aG47OLpHlYLBtSdiaZOVSEy3WPGCCgmc/wfPK9c/QbXD
mYjL5auJwko9WA1Lmivj8dxTyrK0/VQZFI1bkFceLUdKw0Vdlti/iYknZT26
XAwhydq7P24tQ19LhPp6nLE+P5So9HAb1qNGw9V70+qxn+4I6pclwd01vGkd
rhphZL1IUwSf3HnoBzeXIn+ZltoL2N+qDrHtH2LKg+9Xoy/JqhSjOeMLx39h
/ayyxtO4jofsuPBvs0pTMHlya7kI++ONjPHRXjguOHmZqabsQgZIah0kk83O
RDbb7888xfvd0L65Pk9SCnS4SJ9mo09Hssbl/w9d3x2O9ff/X6lEKomsSFMk
WSXCs4xKKpWRUhKFyE4KZe+999573fZ4miFKgxaRhncSt0rR/p27W9fn+rmu
r/+c63W97vN6zsfzeR7nnM47JJ6MiNDfc23ee1y1rOW010ej05vPfJ0ZFRiW
UNMQRuo+MapBYtj7QrjIy2/4uKIEm4Ke9rqQce3UBw1GzdlwgsvrUfHKUkxi
c1o8Tfw0fM6vleb5te/c+33nvT93bjxpbjx0bjyFmvR4zdIoMK/SDdHhuIc1
uZ8DIrmIPcyNW84b5yq84jOREAQyidXf5SM7cYd+gHQoied3Jh8FLnEvgu/H
hLSlwzpwwYuu7rWXqNA5N/513vjDufHZeeMRnWa+x0VL4JLkL53t1Z1oK+Su
yqlFhfUr//oLPKP7C96Y85eNc+P988b/Pd83b/xh9OvnDCIFxG8mRZgetaJY
bCxXNKl37s6Nr5o3PqHTs7ZwRSkcV/r43C+gGV+ynuhVSaHCu7nxo/PGVXub
yzx086G3VNo6nqkejSz0L3wi8VPl/xivpOsRZOh6xH967Av+aXVZtQA3rXWW
kntbCvuD+9+YDlOBPbfr5/vyQuzJvLd+H1cZlDD5Dha+IHWlf+BeO/lyjC1T
WavHWgntrfnvFUkdymZipfzrIwV5Myk9v65WwYoApTfTzQSfeH6veuJXh+Gp
BZNrSxogaIFt6PMYKlAuGDdqmdfiPY4Dy3WdmoC7nMkjLZgKzk5vBZzY67E+
dSSK1aYFTjm5S/oRnH9/pVXC2hVNeM0gk33bsTZYdqCVs4340a3ufg7W8Ebc
2y97l+XrbYjibE5yA4K300dYGVprUdmO0TzZrAvGrfJmluykQtt2ygKuPgp+
bbpyrv1cN7htE2PooOETv8k/okmV2BzwUE9wwR344PW49aYUFQrBZ/FJq2Jc
eQ6MZw3vQcuuriNPSN6U06v4oW9bjtu3DJ5Y33YX8lf8t3k1IxW6lu97qZ3X
iHareCRqq29Dh4H4zen9VOBYfuGMVFILTgh77RacbgIGzdxX4+ep0Ht+cdS9
mVa02bWKccu5JmAUHz6fSeL2nZIClfP5PdhRJ9YtdTQUYk5b8haIUsFp16X6
fuG7GKdempfp5AJvRviDd22jQt3W26nxKnex5KTabkaFHKyMGzW9QeLzBTqu
xhA6rsZ/uHo4VHuTnUU0qmX8mbl2IRa2LV5gQzvn5AQ9DuAlehyAf3Fgo28o
3w+MwaCtNp47j8aDiBRjaul3KujydHZHrbqLS9M4hB6szEWnlCvsv9eTOkXu
A+++wHtYUq+ePvWoFKc6+XQaf0+C5NG9v3bIpePvbYWKx5TTwZfiwHt5mgq8
qwReDsal4/f7/svMTfLhYFvriByp94WSpVtkHnah96EUtfLpeqzaZir93wYi
521bhmI2deGGYYVArl8NGPLtidEHosdH3ZyDobpJWPRoImHoMAUK2NTOJ5D6
QuO+uE8mNQpbpdvYJE41wUl3R+3RWpKvr+77yjfYjvGGw7aJ1xpRXzlte9gR
KtT8ZGef3NuOlnpx2zIyGrHpyC3FlpMkj3x9UNFlE4e+RtvNpnlaYWOy75rr
pK402/1jw46BdPxV2vLg/dIOEOxhucpxleTrJZZfHwq2oaDqg//auJrwvPnH
DVNEvwssK+tMVJrw06KY5ZVKLSi3zeDXkstUWFfyqIzrjiu+EwtheTzUDTNM
cv4b95I8dfCD4/V1yajlVK/utP0uhMioHwneTH6XDxQ/9dfiNbkWb8pMM27c
sU35qCsV3H1uOll0VaOWSEtQ/Y9mtHD+kTvkTVsvwIWazVmY2/lkQPXaHYL7
bks1H6BCs6z/8mMeFSg7lLdaVL8FVOWX7HxO8P+y3osizVOVmMjLJn53fwvG
rhqV/UjqcXt63YFO9LoDH83VHao6Af7t+Q0o+hrOs8s3wZvbOk+3eJE8pZng
WuzbgprqX7vEXjTAnc8qTtzWpO4Tt4s1ci/Gi2wauUaXm1DvpLZcTQHJU0Fr
i7yP5ePzqreOD98j7r9n5axJIfj/C59I7mQnbmWVyxsai4UWbtslZgQnvGll
5hdw78aO2aAbU/oByB3gx1RL4oDxOIe5aHA8Ggeu3H7SvwEfuw9kHCB1mXfX
kan9T6IwtL5+Zpd3PW4Pmgn/QOKY0vJV190330OX0xrWsV+iMeBKzfgxTqIv
tcwR/4K7uCOf+sRQJB73HT3hN0D86wovM8vQqyCMGxpPexhTj4fMbbTvdBO/
+KSkzHjFDLb4qN33761B5zDvF7seE/+Vv/HHP+Me1t5WElDNysJblQ9FfZhI
HZTIsilu5i62y31a2jOVif0aeqZR7FQ41rbmcLSGBe5msGF6vL0Sl3192iRE
8r44vQ+GIal/+2D4rw+2S7Uir9TmDKCI8ZensR4wEiMmHE7q7pN03I4Lcv7i
dviH29/fCFoZKnMR1pc6CXw3DgGLymLzD79JnTK016PR/y62/lfakBGWjcKT
QvCUmwqeXbK41K8HU6f1G8qTsvFCBdvKxyT+rHw8e2JC9gJstUnx4A+MgetP
rd1SaPfFfLtPUUm7CVD9cPjL2SKwbj7HqUfiTxC9j4EJ9D4Gds71MQ7Q+yQo
Re+T4Ma5Psn51zwnM+S9wIFBwUbYsAJW99uff0n82pyDNy47fxN+O5/xfM2W
Zhhl9tAUJfW1ceuw93/tXfjhCsPFYxwlqDy62rGM1Gsdn7fwf2HtxNsBfSv9
W4vx/dmw4P5zpF52vxr10VoPQzpcQ0e9WkB9I9/O6lwSJz/nUxOL03FSblxC
/yHCPY/DK8+SuPFjxHTd8EQ7Ppt66HSSoRw/Lqp69N6SCvU3rpTe3NKO7NMD
j3y6y5HSOKgRco0KK86I3Qiwr8BDkcE1PPYNkK+zK8SN2PnvXzvuv5WvxhCR
pcWyrY1QUfstOSiZCmHJLZwCrG2Y+yEFW7dWYGOs0sCFW1TY5lxdLrm0Bcf/
e/d9RKECk7K/XOsjdWt94Gx0iXwDLtgrKF0UVgnfzsbMKuVR4XRX2dkRl1Z8
IrL28DLzZLiUfGjaKoE8f23x6hNiTaiq25ykpleJydl6oalJxI/ofUJ8QO8T
4r8+YfBFNY9u13Z0Le3xiiyNgoPZrEq3fKlQUnDx6SuzDvTqYw8M8JcGD2+N
sRI7KjC8yuL21qxGGanf1Znt5ei7r1tdm+CQ1TzMNW/XVCDL/o3nZd6X4XE9
ofYqgkNkWuUtDSs6cfBS6vqfReGorWmid+EiFVq9VYb6LnXgcF2KgWJNNNZ8
soipJ3helNFp/4+qMizy33E39nUJvru4Y+uOpyR+Woild9uV4DlQShswKsUX
MULFqwap0Ljsfbi4UAc+G7C9sEEzFjOaPZ1liV5q9jM7ui69jUxHbt4MHYjB
FQImqOtOhcCTMyc5fXJx1ykLtZVBpfgE3wu6EHvrf3P7x5v8TCx/9Om6964S
zI+x7JJ6R/BnqOXBjqJ2fNCaw3dzcwymGk7cOkLibenx5kbJlDY0thuzzbof
jU/XsnOVh1Ghit7fxu3f/va38V9/+wy+55F1MYD2bw25w4Vu8Mb1ixltHbOv
RfR7Hl8b8m/6YGT0PBrTngWfmo4m+Yjeb8dAer8ddef67Wfo/Xncu/xvfx7/
9eev0fv5uI/ez8d//Xwh1sO61eXNOP6sce/RPSkY8XiB2IZCKmzyqVuXvxxx
8MfWtzfbErBlq3zDwSYqSFnW721Ua8SvOikcErlpeP7AMp/PZJxT5kdinFsD
epnkZkxZkXxop6to3UryYOQR2xtX6vGE6n873LszkLtWdnsAicPZWZleNjbV
qNbYr/d6eQYaW+nz7eujQjd9fQTD6esj+G995JCjz7TB+3IsPp+xceBaOl7u
2Fm2l8TDUzn9S3RUy1Bh75nCnLg0tO3u1s16S8ZfrKsPyS7GgW+/ce/9FNz+
njoyOk7i8CUGJZ7Nhdib9OW3/sF0THid3jv6geDbbmbl6pE8NLhV0hZ8Jx3z
1X1mQ4leHt1giVD7nIOtVwyz26zTUE2sN+rjFBXi6OtN+JK+3oShc+tNjL//
rk/hGvr6FP5bnxKk8w2wYP1fvgH+4xtcTGarVa4PhcsBWwwXugTB6XcrHw7S
9gv4TSse/y8ElFX4fOu/hMKmt9bJyWR8oOplxrq+EFjUIcnG1xIKna9QN5eM
p39JHqI+DwBxjTtDIY0hoKPme5mTvN+2v2B6yN8cPM8rrvp0JxLq9V/q08aP
Mt9NO77FFl6/mrj2WjISPr4Nc6TxjlrD2ZsL16tA/KUgT67NHvDiTOSWONo6
uKHwvUeXfygceqaYFHDFFaSWHuam3ePzYP2d20F3PNBdMuT+jL8L1GeH31An
4yW7r9sw7nNDzVRZyWZRFwjav1vR7C8Pdpe/jPAt3Cag6Fx11Rwerj8eRrtX
aJGJg1EGoz1mevxs8TtpBrc7+3Y+ouUvjsANX/Zcxb7W75tvqxlCRt7l5Jdk
PNdh9eUb626gsMM6QxVvLShzVeh4TDv3pvjHhlPu2ug+UPjwQ4QmWHQHnqPd
O8P1R5nGo4Ak2788CvjHo2Cf+cu7QF3fv7wL+Me70PP1Zky8a4s5Ckvk6n9L
QPmRFiPavUhZlby3+vM0kTsp50dezX2Fna4DmrT3yPfoai3/aYacaw4/oiw8
hD09epK0+7aC9p3O8S24iSwB1SMZyldR68P6w8VkvNP6loLawjgwOplZ8fUe
0W/B2bO0cx2L+necCLUKhRWM0k82HwuCilUlO98T/Z4s5Y7YtS4ZbiyJ+2hh
GgGXW/e+jaKtq97pkgsKNsYf6Y/y3i07hXZPPu/7Qt5fy3nEuqNcBdycWQU/
PT6KC99m5dPmOTze+OnRlyTQNV5FkWCIAFZfZ88S2jmW7y6wZhxOAfPPnrLj
30Ogc0A5ooaMZ422ru7YZgM3Ga3q+T1PoIPFCzEaP+doxJ2DkXLn4JV657p7
D89jp4sjhXbv2OwbOxZ9g1Rg5PDaMRkTDMx7I5mP0ngjKmLyugczoG2E4Vfr
dChQL4w1qs9SwVJbUrf+phG6fFkur+pkjRqL8n++Ie/hUc/1NTE6godmE65a
utti0s5Pl2ny7/2j7Ml/NgvSlxgOTXmEQFhwPiP/DBWwIWR0e20mmGe56K6N
94f7D622vSTjIkf4jXTqLOClyL331GU3MfqjV2A9eY+uKuc7m/M2cIUSrJMq
7o4NcKqHxuONdV2Rd/hPFihvF9D9M+wH5ovki5fS7pUwF0+QscoB//vLuVwz
3GFq5fENqsSvJ1U5eX8O6COXW9zuWVVv/MHy4osteY+to5j7tq038N1G5QjZ
Ol/8YSlPlSDjxW8lngTsyYPNF3bWvw1zA7P1TSW0/VYjL9+Lel8oAhmpPYJC
A17AvOHG2xUELx3V/2+lpY0VJr4VkpVZFoKbR6jLJ4mfFhWkHr2r5451Sko7
urTDsUz06xYRMl6Zsv2K974iuKRzZvfmUhd4LKapYkre841yjZdtWSF0/nd2
Qfrz6/CudfOR/E8kD/Ju4GuS8scuhZdR+1wiceWzqpDrxN48di8TaPIMxczs
DYu//QnFTTsPDPvQzv/s75h0jyuCr4yxq/9zuwHW4TyR4uT9VDr/EKzp/EP4
xz+M8G9YfDM2FL/4iOgPOoXgxxcqmrXkPczZ5h2nJcNwUv0hr5xjEKYqaBnQ
7lP7MsSwrH+mFGSAcYdM6HVQrlmxPYvE7XNPXj/e3l8OtSN96pQvDuD/PClK
8j9iV33ZlZLMocjo/ci+jCkIw1gnFtH2FX5dkBnwzDQE706d12ZS80e9GCbx
PUQ+/du0li86VQ4Guq6DMGYL4gU6XLdIHu9eHlgiLV8GzGvleASbzeAWQ4/r
RvK7z2a9DPM4ApA/aFzJmsMLhX+XvGiinfNQNPPuROUFNBMLVM62N8E37U6N
H2n3eV34yzuFJXTeKfzjnar0J14evxwLLieUA9YnhoK1TFOhEvH3PDrfFa7R
+a7wj+9aa3MkfHY5BRSfbh/8PGkN9gpdP1tHqSBA59PCOeO/fFr4x6eto/Np
gZnOpwXVOT7tOzpfF2zpfF34x9f1pPN1Qbv+L18X/vF1J+l8YBiP/MsHxn98
YCdGfV+BA6VwSKtl61GmVNDKY7jcSeS2xEYqUFa+AoRH1kvwHk8DhSXtes40
fi+dbwzXef7yjfEf33gpnc8MK4T/8plRaI7PfOhx+0vulgqYUaYsffU5FUzr
uQ4dfUHq3wdvmnXia0CyI5+afT0d9DXv+X+5T4UP2aJBql8roBGe9Qw8DkSj
/KEFEy9JXDX8YHTKsIzgQeZ365hS0CnoSUwvkVvjGr8nLRvqYMMrAa6prcnA
t1FPm+UeFZQ7Pb9SbtaBfG3M7/xTiaC9UDZLgeDSJMtgpmCOIvDmtgB7zjSU
q9aoriY4gZPt0crGncnwsSMh51dqIX4+elfsGsEJx45PSvp61cMo07MsLZMk
ePt+i9npLuKnB+Pig083wRrWAQnfn4kgNz7teqaGCjPmZ16MMEbAlOepzwbX
S7De0YrDjuj9TTvzos9b9TBgT0Wk5Y08rOYQWcBIcIW6L7NEmFYTPPW7US1v
kwDP7Bq3Pybv0Z15/k09oRn2+C8adVKOhaf9Gt/DCW635dWiyPTboK4Z01SO
QCpe/GmxRvMHFQywWYaJ2xcZDly6YbE/HhXax645Eju8Refzgz6dzw//+Pys
9P0CIErfLwBL5vYLmFQdyhUy8UWJEgt1nb0xuCrxyTHaPRo12bNCbJw+KMwe
aefQ54usRslctPvvvm1lfvAlqhV0GUYoG9dEw8kSOTnDRII3DPMV7NLbIOjt
bEXTWBQYUXPb6ghO/vBdzC441hO3GVDXsp7yQJ4HseOb/tD69m/Npnvc8S7L
0cr4EGcMDHpJOU/GA3zYPml4tEEzS/dU4rIoeOzaYrYtgth5baVdU1E77J38
MLrnTDRsqN3+0obg8wpmXSnDWRfs3Le/RPDPddzv6vsphLaPm84PBxY6Pxz+
8cOz6ftEQFjo7z4R+LdPRIC+rwRc6PtK4N++Ei36PhQQtvm7DwX+7UO5S9+3
An+2/923gifn9q08pO9zAebZv/tccMXcPpet9H0x8Ia+Lwb/7Ys5S99HA7fo
+2jw3z6apxy8upXUYtC0zXAUnG5Cs5I/7HVkXOqedsSmvBywv/bqu/2FFvxR
9jvIiehxuGPdt811rmBeqz7hqNCKhUa/E8PTSB4UMzh/8/hVODvkLxG+sgqd
3rY+iiN+faGR7cXILXv0FTyq/MaqAoeHfL6z0+63OmQ91rz1JmrNbKmRXFeO
mvLpRlQSH2z+kxFe2XYVLzoZvY/RSMB2vrqbtPOl29NvHlS2tUV54T/L9udH
YaRokvEosR+JJwovOzwv4esTCwKfZLritmnBURqvIE+4eeuhg5Y4+FZKyOKJ
PbIu7tp5l4xritRV/yo0Q98AlWUph2zR755z1yAZbxeL1Ky+bIzh71ULzoxb
oU7SSn/aPizm2vsC0mdSYDqmLWhhUjlEduv6VZP5s/15Of7TPAweO6ev1Q0o
hKnAUavFJK/1HP9kesouAxaoi7adbaFA8OGBdXZEDnzjHh0/ZePh5/6X/HHC
pbC0RNI0h8RVmd89HL2dGrhMPBR3YwpYGz7VTCB+t8TfpuVBkC30LpI6fvtL
OrBusXhe+I3U18sLjubs90ML3bFZ6r54qDJYXEI7p0JHp0t8b1M0bhL1lox4
6wSOVIvEaCIf7ouqkOofh7dX7BM5cdgTuGbcBu+S5+MtHrC6paWjVe2QfOGd
G3hVMKCml7x/8rC+ff/6QgxqsW7UkoxA1ZSk8E3ku2peXct7aZOJfSECX5I6
r+Ir/gXfywke8+051B89QUEqS5hEBX8aZr9I17QYJnK7G8JUdzMf2fxr9uRZ
BqNx+y1taZLXBpKzLR9bNGDb9uh3nuwFqL/yaoZSA/GLhm1SKi0tKO5y4dmy
u2XofOuYws5QYm/HIj4AYykyufANX2qJxS+GCccVaecEvrZYQXVtw9b0/eve
fKdg5uphLkUHgn+8onV5vzfhGqEt+2M/F2B1Hf9dozyCT+pUGZ+OVeL27dlq
fBdzcaVx0OAfUj/yJWepDNtlo6jrvm3Uk1bw/j/5OE2C3wrbVktsLTwDqdQQ
ob28GWD80cc7n8jn1B3NTZ07m/GcWb21cV4J1mQ9Uj1E/CtHwKMm+FgC9IZm
rpG8UgZ+M3ECyQRv3FesTQy77QPqLj3dlldz4U/n80/KJD6cecd2tLTqOiS/
83GdFciGBAHlcSfyuyzvjja9sWxF816mGWObcuQ2Mu9m8SXy1A7YVxjlj3mU
DvS8GAtQ5tFaTzu35Kjg25/qN7FL9OW1Oy9TQMq9xYHWn2cJZr+Q+bYNswV7
MpfyVGDdaI1Kvx0V+OfsoWmePaxSSj+fwZKOenaZt3e1G8A126nrxwgOP9JY
YR2ln4tcXyqS3XLdMXe6MTGQzP9uxdGnr1rbULrqzbMbHyg4bsQTRrGnwk8z
7T/OhWV48covnrH+OMyIVU3VIXJYMza70n51LdZeU0m99i0LnYtXm9LWlQ6N
CmocqC5Fdd/k7k2TIWi3LLJJluj39Jycz8+Ts9qcfhfM06+C6DozT2IPto6D
9k9iKBjm9e6SqiNtv634+t1dFbinxDCgrTcVJfUr+Y4RnMCfMGN+7XI7jn1R
EOX9RcG4jfeYY6yoIPx7j1OsSgmu2NSWOWSjAqdTTEcsqKRObGu3YGJswTDO
n5mJigX4mYF9Vx2Jh7lKcdsO/axBk6rL+75pZyOXxMF8AfJdYT/3tZ5cFYX+
4Ue1D3bFAExKVtH2/5rGySzjaq9FncA93NNPklGbxySap5cKB4OL9tlp52Fe
W5/88RVeUCSVVF1IcL7s7uBwsQu+kO4QE3+wJBcE1ix3XEHkv97Sk1HLdbLR
b/2kw5/QbOhk9Yk8Tuwn4ODjmQWByfA6Mkg+fagEhLeb9aqROHOtc1vLS99r
wO/GFDejmQXGexRM2Yn/vpY+t2hGNgyP63ZYz2yMgIYjC5fz0+6DO5iSqtae
iRJdGnnHhq2RO0JW3Z08b6H+K/d7RQx+kF0z9PKPDUQetK3yot1bMadHrXl6
3GQkVb7QqgYf7FpVcKQ9C9ex+A2ok+8d2cj5y/RIE5766piYwJOFfxzihJMq
qCAeprldS70Zj44c9tZxK0VRKS8PAyLn7bX/Gfz+rw2N9b9rdF6owLEdga7f
r1Ih815OKYtVFS4bWgzBnQVY1rujOpLgvYeGvtuaKbdRt8vMqcGsCg0dhguE
dYneo7lO/NrUjoylb5YumSrHevadJ5VJ/h25lBHE8agRGVh3YbRJOUrE8X3I
LKDCMtZH0p/CmvCV0skRSk822vREPuUpI/j5imfd4vflKDK6yutqrA18q1P1
5CR2Xt4uy3bJJR7Nv+cwv/yaBnnn4ibMiF7sd3h2pQa3oE3WiU3FvJWotqF4
haMfFdJw5EX2jhAoj7Dr2htYBkKlwrmWYyTunSm3dh/OgPB9m3fkaVdAQ+UT
k5xBKoxuYnj7IykXLgjXLDxrSoG1yVv/SxggdnjJmvXbHlfUq+dzCFPzgk8S
qqEyJH9ZDH21X7o8EtXivCl37rpg7qoiH9r5ErHueQICz1NxyJvZZ12yB/Zv
FbWNI/7+TTP2kfJkMVKeHaVUjGSinrX4m0CSl9890j549EQ5dqqWrjZwDcbi
xOWj+eR7s+bkzzJP/g7OE60vmJpw7LPlnkdNFRjfH2kSRvT48JEe5Ux6Nhrn
PDPxNYqBHdYXc6nEzhVXsQZ7DDfjN/1uY5uP1dhfJ7Xtgg/Js3bTTm3SLfjT
L4zLxLEKb+TYj1WQeJihfGxZsXUV5t1jdf0pXo1hmmf5mqqp8OrXcFkbpQH9
F9h+7TYtxT3Ze40CiF2FzenFdp5eqh7ldR3aXIZ2J5uHfGQSMGpmV+Ih8r2q
G53Zhj754EhH3vkH9dEQ4ejdLUY772K/CVqcTIJEYTOTy68KYU3thJUlwfPx
XXBVJ7oUzHaYHLlHqQaeAI6Lx24T+zzuEevpUgbD1wujg35VQdKv9doWZFzz
k1yDRXQ+sLiqqApUlgPV2Du9gejRr0NavjilDLgsN702O1YJE+8sdyzvpoLQ
77NWzcYF8DBD3a1XvQTKTX99qyB1kI3dCfe6T7HoELx7w/CtcHS7bH/6FYkz
71ruD59TysPl5r0vJ2RysOKPCQ8jqUc+BaqtdkhIB51nLpGCkYnw+fX6NaFf
qRCuxGtXVFWG3uI1rXzRJP/KaYgYkvz4Wyvj4K0nOTDiKM9gzZkHQuziS8uI
X6fPyT9/nvz9Ar8WMu+oxqbUVQsW6tbgl+GVghPEX/oOqbr/11SOR0OXzybn
VaCqPYMe1x2SZx3vbW8qTkQpyclJEdEslDe7+naQ2EPGZdkAccU85PYOZV92
sQqDetm2vHtI5mN77fZiIwuooYy4vOcKxzfmlQ88SL3wWibn9JngUqg5slKA
91UmmEqZpUmSOnQWxSb802pAj4Wr5vrnMvi4WuL23iYqJHusYdLc1gici+pu
J9dWgZHFquvW6VRYuPNWgOHJcujtuCysMlwO6wp1/zwh8WpUml3D4i5Cxn8T
ZzW31cCT62HcETHEzletEr7YVQPmm747TMlSQDBHxC+ynnYO+ecbs2sKYOaE
4dTbhALguBfX94zUlfbsl3sN/pQBO8vz9rjaYkiq3hGQ/Iz40UaGw2L5OcDS
s+jCCs8UODMUqiD9idSP/C9stjCloew2UW2LR1nY3Va+tI2Mp7Sn+Gv7ZOIO
iudzfrEi/LAw8p0TifNX8saD5ZblIsPm9Ww11FJkM/vNzULsRHK684J+ZSUc
PCoaZDOYCxv3M3tL9FNB41V+X2pSEW4P9P36jaMKrb7kqY2S721WzN43bpeL
vjqHebmXlKMdhxS3BMF1gSPXGb9/bIbbiRl7TEcrYfC78poPgVRInNMX1zx9
3Sww2nn0UAqmHQg4KfqgDJ8cuqtXTPTyoqXPb0GvNx4Jrh37c7MEcySuR5kT
PyrfcI7FP7wJ1hv8She7XQUqRWOt6tEkL4S65BQ3xIJVvG7qYqt0vLUu5o8L
8d9FC9813xunwI/JApPQixFwXmvH0Az5XuVcLvZ7nr4wcmvJpRuBOSSv7pWf
Inlz8fB/x6eSGkDWRr9ykC8LRkaYUw82U2FvWGpbzVUEMflF4ytXlMIRqlVA
NKmL3T/blS2ybwP1V+UbxfkqQelt52AMwTkaNYedTz5zg5/LTCqfuuWg1Q0b
D0XiR887PXzuT7RBnplir+e3Svi9K0tTgeCK3T+4UswW1wC7wfHdn8+Vgga7
uOujdhJPqqpvL3VqhZa43ecGXlaAj6TIKyk3Ui+P6g9+5SwFvGP2bULNFtsK
bAxTSL2/R1pUZZd1KZyN2OGTsy8DWEcrXH2JXcnOzV9o3vy1YkXfbhWsg4un
I3rWWqfDwCZx1mcknnBu4zp3+HQV/Hq6fPJBVTpwvOXoa3pCBaWtWicHRLNg
h3FUyn+PY+CibMLKt0RuWpVBy6XHCwle7DPzWhcDvN4fv9QQXPTt7teTsgtT
QMV5zIUp7RAerKf6/aadBzu7cPYH823gFmXrMWGogL1P28wCLlMhkj9e7TRm
Yqq9zXi9SjGq57UdOkLy3bNjK0JPjWTgg0MDj59Ll+D5bQ78VSQOKzO4PPMI
zUQZ8VT95a1lGNecmV5I9DvjtbgnJLId3E6sO6+1ugpu1lybfWlCBcFN+zhK
8hNwwFoWB4rLcNCbd+oDkU+vtEmwGX8S8nmeabfOLsYbPBPbOkg8zDF2MmRL
bgUFuU2HH1lToF/yfF+ZBxX05uxnYJ79yEy//+laH4ay61bonOQtxcJbqtnH
afeFnbPzFnYpBq/NiwImBUxRpKfOwGqKClFLDp1vU2qBM6/4n0qtoEBldcSy
xjAqmBlMcR0Pb4DlR2x4LNemQNr3A+JriD3YP/P6tSCsDUq3x68xTSqF31vE
KU9cCf7pYn9ZHlJO/jd+/+51GIiPaGpmjP5Pzjzz5OzyMH3g5eJy2GVwayi8
ORaO/bq4htYP3PPj2133yTY4Y/bL9sHdCnAOGrUNsKXCVlvfRJGSOjC4fEZC
jiEDvD4/zsrsIv744fbugB3NMKjzSfhaVwkMBx1n5CE4fMx9nAHfF0J/gEbR
4g0hMPtt396f5HvPG6cpZH6qBY91TEfXfMiGnXv3ed4k7zm2zELp55kWaL6q
qH4wrARUWX0SZmOp8ORHM+eVshzYrZP+7SCDG0yqZMRvIX7kMDf/zfPmL/v+
jMiqmhaIXXgymeNEGfD1mIjnEXmGqMqGsDnmArs7s/DXR9dB0NS+oYzoS0DW
7HDa7ThY2M8t4Zzpghe0bVJo50OeOlPgoZKSDH8SV7fGFnni0Ye2M6nEblUn
uAdvyLiC+ccwLpsDybijKsr8NRl3mJMz5zw5O57vcWJNSUXzZMUT3C6FeNYs
4bsX8VOzy0EXoj6GY3iAZ8oJoUyEu8WvrEm8qtGcufjGyQODz9+K59bIxayZ
HYtDyDzD/a/X2OXGQdwyEfevA9GoMuzr9IfgscMhz/N7WFwgQHpsfMwoCg18
DxfQzkESnbMHpq3/vz1Ub2EuPaeE8GRLwYSTfwFI1/4seUrwz6/RQ2lr31XC
2abp64/3pMPv3uPqp0jeOX4g/p6tUwvUex4JOrSWAg7TlstoPEOpRYpHC7pa
oPTMs8AZNgrInvB+2k7i/JavU1K319fDwZRZg3uapXA57L6yax0VePS+Pt7g
0Aj9EyxhiIXQoRb9tqeK5N/3jHumr9TA6af/8c2050DCr6vXnpP66NXpJIV4
RKBYXH0o/7MczNd+aQzOpoKn+y9jPq9SsDCIb6SsT4BtWUavikl8mBK4zpzw
MBtapnYat0UHQmwuh6sKsZPqpTWpbvZN0ORQofPhEAXcTJSFpwnOjNryZ4NM
bQIE5vhSa/VVkHpOUOD23/unxpwupvhD1ukkc6vuYHRb8dRMmbavVuHhwzWP
DHBb+KFe/rBUNEyPERYkes8fsnEs2ROJR6umZHV9C1HkS4t6DLFz51ZH3rpY
P9yesWLxgbpk5LN/9fI8eZ6rv3hbh0sofPlP4+zru65wazWcvUXez/50Jduo
eiREeerscefRQMGgshO09YW0TY5dESZlcO3C4z9t4xkgULJiZvI1ydePTeK8
3LIgYHNdU95oGBR5rUsq+vo/+avOk/+R4kDHoJoGqF1Yb/qKnQILIseCREj8
N1epZXk+nQqXda4P8Ou6gtb0jFsesauHH48/W7m4FlLa/FrEJEpBKjtb/1cL
FSimGw6He5fDzm0K6/eG5oBKk9qn3CEqHDh7eavmm0oYah26ZmVYDjaKUYuC
O0i9vDFgZ35zHsQ/8oiQe5cEF1ulk1Z/JDgz8v2rFIkUeHgloHfZsSCovSfg
v4DIJ1AhP1UvIBJsl1Q8WJHpAGXDqXK0ex6v34r3s+dxA+Vwl2NJi66j1m6T
ZX60+wgu26VPqknC+Ss3uJQOBmFEdUo5Dxk/r9MjErDDHx/biAg/5UtF5+eT
v8rId8lf1C/uEUzEnfVvTc7cKMGIrVG7SwlezU3MWBS1IgV98ozHIhMKMcRP
f3gfwRt3for2dbdnox1bYY76z3IUe8qMG8n3+h64eya2OAE225jq130Ng5N1
dtsukPlbJj517uwthr7VrBeXUHNASuEHryXxu8UqPSpl3fGQ9vzBzvZRHxjc
6CWiT4szE+WrjZwqoC6DgXf/dgqo/Lne6Efi4dpFduIiWh6ge7yy0fPOIXyj
OsIcQ75LeU7OL+bJ2aR0i2RyUCkcTmDnSHQvBA3RWwUrCR7T+1T8wHDEFH7x
fXtQZeWOn0oGZKJo68j1470OlGz4IeXN26+YDpdVFjJcJnpxM9YIm2BMAYsy
p4zZJTFw5hDvkdpvpA7aOLrVmy0PQnk2MAvqFUK1hNaXF6S+29dcypUQHwJ6
TFf9eoLdgWWnuGMA0VeceHjYynfu0PE2oV8t3Ah2PoiYiSC/OxZRfdW74xho
aMvtCK26jqblG9/QzjfY4tEZLz7kgTs3KTzBB6G4O8o0WIu8Z71o334fzmwU
ccO1f2pL0cEudXiW2H+YF6/loYpoLBm4PtIrlIolFX0jEmSee8teXZ1ak4Gn
48ROL4zPw1obLsPkSVr/cFok+koBzk683e1SXo4yEip1y0g99ehNdkLot0JU
PTpRsn5NBYpvyD7C9Zjkkbnv0pn3XSYTXLaDIjlwPKs+50ZqMTi/OxkrQeSw
eJUoh1JsEbxkGbumepgCBwRvyPsRvPSg6uMq1ZBScOZWYyhtLgf2vbrbd5G6
KRqOjQ8vtcJL55Wlth6xx8QPDUvuETmkmVCaF8WWgOMfPt7Xl8sgRCuJ34XE
YR6Gz6OFtwpAt9kz5Hp8KdSbjLYPE/2u1nN/3vnZDXcMqK0yGvJGtuHqFk7y
nvI5fQXN09eetfcGP74shBGb+IUU7VIIOWgiRMPtr5wUCrszUiCGV9439WsK
uFv2lm0n+chawzQp9UQiyqpFxopKpuCiapNO2n2F54/3CdYwRoJ+8r7IgwwR
4CTczVJB7Dn5WWhgnK4LOAnKb1I96AKc+zOfO9DOr+gyu+5WFQf+QiNapV1p
oC7rLFFK3t83SslhqH4lFyi6Lqvo2pP6BX//piBlTr+V8/Sr53k109PWDeWZ
eZLPGLuixmPcRluv4fvsNSNGCYLJIJUvkpQIcKh2Czam3e889ap9Z3Y4ntnK
8zmjJBwdDDvefyPz/MjBOim0pAhX8+8e6bUtxSDzXeH3iV+vvP0fV7RkKvq0
37ehbkxDJr2C3XtJXLX9yPFS5LsnHJG+nfTNOwDse8aq6mh8mBUDt9JWlmL+
k5g2FaYKNHroZc9I6pory/wGn+7Iw5BKO8sas3xs/3mO353kqZUCrZwWARdA
IceeO0/QAv4UvP5OO9fik6WN41OLEkz9sGL3A/4y3DJyrdP9ORUmjH/xnrtQ
hPkSJlNbHlCwMPypryGxz+01U5v1rhF82VByT96TguU3eRWdye8u6H/8Vrw0
F2fv+U+LpxVhbXz4rp8k/vDmfY18SwnHeydfndAa98In5wYUZ4l8rBdE6Icf
KCJxWf9C/9oKCE23jmsndZ+0l6bcDYs8OP79YkkRbwVQRa+s2ELssJUtt6vo
WT6UepVY90mVQ/bm+iEcJHhgWa6g9dNAnDxirROh5ou3+yOOuxL5CJSGu50e
Twdp96DolJP5UNP1FvmIP1ql/zBbvTgLoO5zmSZ7KaxUHrMTJPMMOp6gKrU8
GTlzpO6vjYjH1tNNC5RofNQ5+/GdZz9uVrK2a6ujoe32FH+HThaoZizR+E3w
ksX3RT1OuR5QGay507MvFIaVPqufop27y1W5RGZtFoZ1Frew62fihjPMeTIk
7q0d25F39Io6cqoJqEfzXIOM5Xecabyg5KiwdMFYXxws03yVrm+PUmu2LJal
nYNhd7c9bOk2qDobo7zraQg82XRP6g3tPug5OffNk7P+zJbuP+kV6OX1waj7
bBnOVDJLuhCcs+DqaI786WRc0m73NP9dJNqfTGymnYsyFntL7E2lMz7ay7ZP
fMwODt2Q2EDj74XLGjFuV8vFzcesOJ2VM3Bm2CwxlNRZ6g/e6NufrMD6JSHV
Vxkr8Ou3L0+bSF4o/LX89eBR8nvOIxd9fYpwg88iY1Oir7hlIfXsM17I4moZ
2zi6E1KnvTicyPsV+fPjnN4VYqy+h42CbSG6lH5/eeUNFQzn5u87b/5RbW6L
vmsmYAqbzUBNvT+2nlpVu474V69KFZNWVgUqqGj+LHhbjpRNtVqdJK/Fg4i/
yo5sDE65+aewLwc3L/n67TPBw5/SDY9d3V2Myx9u5br0PgenHuSLMpN4tfAw
fnj4Ihx35/rzue4Kw57NUylCRJ7b5+T8cp6cHTwH739wz4ZGcQaX9OUUsGC2
WreD+PWKybrQorMJoLS+6MsapRLYl1hw8NgH2vlI7cJm3glwIlDAuZM9HygD
J0VPE3tggVqPtPFg8DE0CRS+mwbmQpRUB2KHp3mNz4BTANw9J3a1kjsTJJd+
OwwkHnrZ0u2BMs8ejtwzmHwc4oJcf5pWHt8SDpd+jHUdIeMiSjJXPXX9cPzq
kcE7lUZw7sKJfYeJ/F1vzHBxlkdhk4PY+eUMN1CH2T6on3xXbrQQI9NsCsqr
fozQ4Q/FfOEzxWeIncR2X/At6olHvbGGVYvPWoLkw4/540T+bnpXghI/5+DY
LU+HtIJETFJNMXj46X969Jinx0xbzjWPjcrwc8O70NOzWSjVrDzrS+poz42H
D/mdqEWDtezbc1tKMcJ1bBqbCA7xWXWyNbwen2fqaEdUlqHirlMVjZVUuH02
ufxdfS1usmg/xidfjhmnK+6PEvy5+UfKhMx4GYpwLO2fFs1CzY08ma9GqBAg
lfmUypqAGZWbFkqR+ZukircPkvlLZItKfn3tADILq7KXTiXAULqeHO3e4bN0
vA33K//ibfiHtyMjRPjSA5Xxxbo2fP07A866vw3jJfri2y3tWGasD4HreBUr
lqSC/MxKq6sEpyV1KDXPNgfgIo3mlB/rCf40sNA4RvRy4FjofsakJvSLBEm+
ZxSUuXGrXTaZxIE5OR+YJ2eBmu4mzy9ZuO+EwcJGnQCcAEm9byRfpJ0Kc41e
3IibWn+3qxWVEjl8lL1TTp4327skjrsEm4VXb91mGYdWcU/2s0zQ9tUGO65O
qULpEpn7qxZlY35aQW8twQlX7EYqFjmXovahC5YUpkjclzvQtI7WX2Vvtfez
QYwfEiq87lyC8XtWL+0pIXZFr8vwIb0uw391mbHzUQO+lS241b/hQ2JHGdZ7
JUFPNBUSws85v7rQiOYTRRW/SwuwrkrBZmMNFRSOm571iqjABSkC61+HJpA6
VH9TBsEJ9vcVPr6piME7/E8PZ4tGw5fmzhzafRbKh9dasqaEAKPQ1cjeA2lw
Cz48KSPyV5ELruNcHAZUtuL2X0G5kKdobewxTexzWj7SIToNLNakfgmdLoTG
ugPiQcQfnQyZWxjFXJCx//OL629TYWFGG7We2Plskd6NGrUozH+/br8hBEBL
euORg7R7Iu6v2qb3MQEjRE55L4jygiWbPwXJEr3sofcBsIPeB8B1c32AAww+
hx2Y8lDuSMBpOzkPNFfhZFxA8sV9vYymlMEsnCrs2vx9tTMuEHB6F03yi90d
I+OjH5pxj9oTRj+vIuQJnDUITyE4f04vZ+fpZfeEyiKRhCJcOMRWP/kuBH/Y
dyvLEvuM3dv4OOFWPZ6vNH4qz5aLws+1P0i1UuHlDfvgMcdmnFjPc2O2qRgZ
qaOKR9Kp0JTc1h27sx3Pb3h2bceqCrzy+FPPcxvij6NSEb3TiLEVdoKbuovw
lP498e9E70rU/K3OhbfxWa/qbhaxSuQoWvyE/TyxH3q/CO/T+0X4r180ayud
mD3biMKiMntzqgpx6rSI+PsK8rtveLjFpRGlDI2bWopS8GdCL8dN2jmZ139S
CpjKMX/F79ErBzTg8CZJV3WCZ/T5uKf2fWrFGFH/dEM3CgasXS2hTN5fvbnq
8r2YWHgqyLix7FkhyIk2nHOhnf9D75vhe3rfDHLn+maBNrLShX7teFX1aofa
cAVyahSztV2hgvgp9xnJI7FwRXZf6v2AMqjQtjj5heQFvsllqOSUAWK36nsj
WUogqWL15uNkPp7NTnZ8kxkEL18+vPsyqY9WTmQGkDhjqt3OonImE3xHv6dJ
UougO1jh1Rvy/C/VxoSK4CYU6e5qfgAFuDQ04EpQERVqBjZGVJQkYdnItT2H
LtjAe/6MdjliV/Let5Pb6nLxo7i339NbCfh1J+PR6ySuKufXhvAsLMGF2YcY
lp2JRMP1kh/FCM55ySHheiWzFqcpxgPJHMnoKZW/sKKXCqmw2JJ3VzUaJauF
vhPKQc2rwyHrCX7T72uKdA8qxRVeLio1+Rn46RuP12KCiy6c9Vs9y1qKwgyi
hbGX3cDu2LF6axI3vOfsIXGePbAaRJWLf6/GZ7viil0ECzGIOVEluJsKOWag
3MHQir8k+jYrDFYi99Tvc4s8qKAlrJD3yDAP97wfYGaQDoCs4oKNWsRPD1Df
LSvLacNtlKT17zZW4lQZu5KrHal/6X1vfDXyt++NynN9768PdLUMTRGtPp9s
jiyoQuOY9tSKJCr8mJPzlnlyHqGvC8BB+roA/FsXKExyVpwIK8faJxKeyfHu
OMO/4GIG0bua6MbbcYeb8eqR2SE1x2qcvcKmyxBMheU7Vt+dsonE8dUfhZOc
U2HngZ/XTb/R7rX5z9uRvQCqnGw8l+tXwoBQb48KiauJ3boPN8pFgKhOpMKA
ZSn49FpuPU/8932vsMmH7GYUXSx95M2WSlx/mvNRIYkbe/RM+e7dyYGdm7fP
rHQoh7d1b2ySCK74MDf/w/PmL0NfT8Ej9PUU3DC3nvJnj+Ok06Ii0OZx5JIy
qYTnWsZ/zMjznu/XfKtyyASLwdBqDpFCeNBKeW1P5mNuc+bhAZZcuFQr3aVZ
VQqZmr+YvUlevnjB5lCHWCpI5zR0Oo9kwcwWCwXxz8TfQxoYDcJd0bzxaOX1
eldYLfd8/UXa+YrL4k4aS+SjsdfKXUnSaTieJX1VnvgjZ8PhKg2lfPzTIH1H
8UQmPvG2KVcidsX9IXc4iqEcz0VENJ+MK0A1/ven/AlurBRTdjMQCAHTq38W
D5VnwLI7gomHCP55WLKIXUy/BicVx5Yuf1mBTXdYZfxJHnkVCbWua8qxUNDR
j8GoFAP6Df7Ikvpl0QLK7h3iUYBHnfszHhcA38R9I1pf6Mv/YT9CCglSLyjV
KPL1x7nfT6uQtWOX1SyJV2ZL78jJhiFylLzo1SH2EGHA/SMlnrwnwtSzfHEm
3IgtWymoSAGWZwueXCD5K+V9yITRihp0lDV6IitRhpJCGhMDJA5P0tcHsYm+
Poj/1gc70tJXnG8twbiDDkOL11fhpvbT+S96qCA4J+eweXJu1z7oePlHBfSk
Pg+KEKmBBv2RRW+IHL7wYF3rxUwIfxrHqvY+H96+3qKXRfJdn0mJK1UyB0NW
7NGbdinBYqEEkU7yu3Y7DNe4vSiDK5a+mwbjKsA95UiZGfndNF8NQ37NIrjJ
ukN0rI4CdQJnYrOJPDUihwqqEqrA2uuy5qHN1XA3b0zStJrgltPmG2bCs1A7
Znyy5EweKnVySQlN0O5/WRXtU5gLuEGwv6y2ABJk7+S10fYfzc3/zrz5qwf9
XRfGZPq6MH6aWxd+5do+JstfDkGHX7yu3l0G0xYcaseIfz3bIyLf+zMBnJrf
VwY2xoMJZepMBfHHi/fint/YlgOFzwN8tmVnA0/NrTJ+EicXcHYEaF+Lh5Ol
TGLJuVFQd3zjs+UEVwx9K1wqZ5aLicLUKGe3IrwjP5B8ksQB/WdbQw/L5mPm
9JDQWu1yHL5AEflG7DM9N3n2fEMp+trsY9bWqcCFzVlxlSTeHnAo27f6AgXv
9HifOhRZg3u+LMgerCdx8mLFOMfGEpSVOsw75VKFM/FZMiwED7fM6T1mnt5P
nnMJP3Q9FmsOtuyqXlKGD+005f+e23am/OL4gwi8eHD8gP10Po7Lr4ziIHlh
KOzSYE5UHSgFx73hLauGni07ZwdyafvOFnxyWBQKr7IdaqP3xaDR0lfqYSS/
dBjULZwOocBw6YQ+t2UqVCvG2TW/pEJBiOIWvRUxwJtfN6YulYeug8tEF3ym
3W9ypKL2WD0c3jMmkzFQDDsNRKvvNFBhNZ0XAez+f3kR8I8XIUnnUcAQnUcB
j+d4FMNcPI9SjJvAsLw4aMUIBRg5IxU+EJyz5pKU/5GoUtgZKHHqWbwbUCe7
7Gl1U/dzuDXsXgM5p9793FdfCp8zB1PNiR+Z737jezm+GPSfP2hbxJoKQjGW
HA9IHCsJm310qy8dmHKXj3+6GwL2KX2DSOLGtSdapRQZXyjr2/+03tQL46Ll
VF4THD5B57GgOJ3HgpxzPJaNWmuNpuuy0ICr9ffkdAU2TKauo9DuE6fzZ8CZ
zp+Bw3P8mdit+a6aT4MxlXLrdJ88yasq1oImNJxp3dBiQZ5/dMK6VU6iEorC
34TKk+cb5uTMMU/OShz3kj47loP+AveGTctc4YLvevVpYofi4c9n7YMQLhxu
OdfoUwZO8crrB/OpsNOFqyvKAqEo+pzijcgMuH3o0XIdUgdJJFX784u0Q8yG
X3HhfyggtOIIs7AtFaKlq6X/SBG/9VbcvGIkBOycK1h3PCf1jt5DP3Ou2xAp
+mX4k0AlGKfPtLy5RIVjdL4TONH5TvDfHN9Jis6PAh46Pwp2zvGjnuwp/OFc
VAis04oHZfjigSKmc1OHxH9uOv8KVu3+y7+Cf/wrtZ+vdFo3lgDX/UTxjWOh
AIH54VeJn5aUXHwpZJgFLvJeG1dcN4I7K/L1NtLqX6l1ke8U7WHpXve6Zv0o
NBmQPTVG8Ll71M7+CJ0w4M/Tuvc9NBzF/LSO0Xgy2c9fph2hNXWPf/j22SwT
/zt2ZYErec/+A3/5aThL56fhP37aB/G/PDf0ofPc8B/PTe9nipC74kHgZS7I
rhvPxWxtJTHafSW3TP0d76fmwvnrHG9edtlhtcy1lAQyjnjve2l7FGTcPmZ7
6mYivjYb0Agn9YU3nacHaZV/eXrAM8fTi5vTy5N5eqmrNLijnFMMC7Zbtp5n
ugmG6pIp/ATnizsa2uz83gLbNzDVfbIsgfelv/edjyDyofMMoYLOMwSJOZ4h
K51nCLN0niH84xkK0fmK4ErnK8I/vqKCqbISg0MLMD672Wa4vQwatM7YaURS
4SCdDwnedD4k/ONDHpjTI/M8Pf5+95dvCaV0viW4zPEt39N5m8BH523C+zne
5ls6bxMumv3lbcI/3ubvV0Pm92OzYbgmXy3+lyNofFzXw03qpiV0fikU0fml
UD/HLz0qL306mUcPLL7yRPXXpuJWyZZSNtq9J+n2QryjyZCsKifzM9IFWTQL
TZrJ+M///vJdwYLOdwWeOb6r0kr9UbE+H3DU7NpY2BmDmebjzrR7bcSYj7mc
2OuC+5kzK3uScrD2rgWDMslT/INSLcdNY/HGmC/vf7ylOBOhcUeQxCVnOj8Z
Pqz4y0+GrDl+cn38X34vXqTze9Fkjt/bT+cDg4DzXz4wjs3xgYPoPGTgdP7L
Q4avczzk3X12KZJXa2BX9nZOftZ0QPWlN8seEJxG5z9Dtd9f/jMYzfGf/+mX
aZ5+P9P5zJBB5zPDPz5zZ+Cbt6/z08HdhQF4Rw1Auu/L9wkyT246XxrY6Hxp
cJnjSwfQ+dVgROdXw4U5frXTnBzezZPDy4sO8TGtvhDbtex99u1QFO1lYeAn
8dmRzgOHiea/PHD4xwMXtvzLGwfzmr+8cbCd441zK1udfujhCmrCTPtZBxOw
gcFPgnZ+tTerm82l5DjYm395PCrXA7Wmgk7R7ncT1BZbU/A8CKuoC0UDSgrw
olFApgTJp71z88mcN58QzlUaB00v4/jtzZMO3Nn4RuL+1SSilxWdoZu6lyeh
xSv5hALWMryqyV3ETMM5d7+uEiqNwcl4wQIDxRI8GsU5yEZw0foTf/n5eJbO
z8egOX7+U70hcaONfqDWeKCg5k8GUEuFfa1o56X/DPO+dV4LlR13y9loxIFY
r/pyVRLffBevPHwiMA6eWi0WTJfLAsnPX3TdSfx5Lv0qd88af2Dc/urB98Vp
0GLrYbKLdo+P7yjTC8Ew7PvT13XxmRc0Fh3pod3/1ZG6+q6xiQfGjwT3bckN
AX3z90puZPx3w6oCfvY41HgkuUd3iRd8q1jmNUQ7D/zBtYeJHil473OHOHe3
FPZ9dZetJ370gl9xw7oD6bi0o1W/anwzmvnd8RAnv/uSZWxN781MLNrK2aT1
1BGVhlMFo8l3Od8L0rJPycfcRb8X3GELROGS+yLyxD6ZKt88c27Ixm3cI8qm
R2+iq4JZ/nfiX90adUqX2kuxIuB+rQXE4JreVDsqwUWHJr5e107JQ5k+mxXu
rD7YFZuieJrUld+nM5S0YyqQElN54kZcKq7VL7k7ReKhXgj/5wyvStz1mdnQ
WzoT5csO8QiR/M4tsPWUpUYRSou3splah6L7d8tj5iTeJu65uLKPqRxHn/3Z
tIQxA0Wi7grQ9oUVJT72YbPJwhNqLLbKmyNw78dvpb5knh9W62aaXojGT9Ep
aeAfjG3Sz6zfELkZ8h58wFbujrmqbKeEIq0g8TT1TiDB84Ja0Z9UztlA4r6W
TlOPEPiY/5b9OW0dsPhryDuGCuz58mc4JSQV+c9Zb3Qn/nJg71umXV7XoI1S
xHspLA3kWzYIORE5t7k9dpD38sJ70SJZJqU+EBmgW/GOvMel3yrmjnwovlAo
aN1XGQyYZLVvgHYvoaLTwBWfCpR8fN5//8l0FFnCz8ZH5NPA9N/i04+TsW5k
wWrlr1YwKZy5dZZ2T+szVcmvzxNwnG8suJTHHqwebu1LJN/F5nn37YgPBb8f
2+Zc0JqO+9cmijiQeQ7P2cPLefZw5q3+J6EHJN49uFm0z/MaUri4hXiI/+pn
n9ledSwPX2w5LP2k2h3PpW2w7yF6HNpgal5yvhSnu69fLv6TioN5Z1OZiH8p
hnrWbWQoQbtf1YpHnoYiX2ZNYiXJOzddmRacfl+GnB3cBnaDcbgtMPRZxyiJ
t25PShU6C5Db0w84GAIQiw/LHvz0f8s5f06/KvP0K/riCrejLwUH7zSEKMek
4c+StjsiBD/f+rUj9JZAMa6L3bdWgC8CuxgFPZQI/mHhsLHJkyrF0HsytwVM
k7FjTUZ5ArFbnrzqc1X1wdhbFMdfd1oLjiudvriIto84bVmpt0sW+tzq2O/C
G4qdlANFU+R3H/fYB0uoluLyVSicvSsGbyzw3LaIxH/9uwb6TuOXMTn03d03
xR7g8jPTjcZb8JMYss95loDrnJa3XjtljSEeAmUFRF/sza2OfQK+uN/p/rGx
OmuwN6lyOEaeF5DesPPD4luwaUNLx7BQBJjYpq8UJ/Yj5bbxQEj5RdixkfJ7
c3oonF3ZItVCxnUeZgsG7/aHY+HfshfWx4E1lkzR9uVpUzRfTqwOxYj6hjOX
ZG/Cc0998WzyfECc5qCcQQqO70nftLJZDz8ErTl5h8bH2K+z6kB3Juo5yrdr
fnHDYY6WgzIkPvxYvhCLXWKwjuWB6NJod7yU1BRM68c2zumRf54eNwSvWnNU
sgSD+U929KlF49b7vPlXSbwVk1sv/CojFWH990vP4rxwknV7YBqxQ0e5lwuW
7ijFoaigt2198bhdMYDZjeDACZkifZbCUvy1ecuBcb1kPDJNORBD7I3NlldQ
/E86jtTarWXRicVmy8BfciT+zy7n2Lvj/9H13vFcf+//uJV2UkZSkpaypajo
KpEokqSsjIRkF2XvPbL3eNp7k1QvVypkpYmWEqISJUoRv/OQvp/bz+32/vfc
zu16XI/7dZ1zrnOd+7nOeBFG73m78pxbAv4IS0qWJHbXNPTJ61uYjYKMM7SD
ohH4wWOBN3Xvmy1w6sii4Fx064m6gaxJeMKP4ZIbmfcknvo8ytZOQq+Lra9T
a91xdHlQUDTBkztXPmHrx1AMX8+5INDdFGhmjrepOvnjXY+OJWxyQEb5jxGX
VngBvehAlQtpjy79L9yDPxNHNA1fNodEo6xs+cQz8t3agUXtYzGGUL777Ho3
vihgFn+/9Tyxy9GVW/ZsbPGE/pTG1qOLk+H2/eXnqHcoljP2rQ92CAUR7m+l
bQFpwNVa8406N5Rdx1Wzvc8OYyZlFJ9pB2Br9ZLDB8l3N0sGD/QH2+KSod0a
aU4RKFRd2hlF5LPvF9lxZkMkVtnya79QDkPvsPcXqHvZMrsN6Sd6E5GVQedV
35c4FD65VsSfyLeMWhKY8D0YyyKvyonmaeGf/CX5AkT+yjn8e+fh77eg/s/R
kUzsFzdP8BxLRG9/3iFOMl52aYTwlx31wpfTAUbWE1fB/3zPNyci50nZbq69
Rulom3tbVzU0FlOCrGSDiL/ZPWbeLhiRinu2Hi4M8I1E5n23IpKJPtPtQ85b
hyKRS3xcoSEpBSvXKoQ0kfYzqZ+UrHUiUW9KIipS0wdb9v3mo+pUdM/ZZck8
u2z99pSprsIHryQOn/tReAEHjq7+7kbas9RrTpx8b4yv7k2eZm6whQPjHM09
pF0hmpPesfQ8oNA1+xNLfcHqURY/1T98ysajNdQTXh/7ZpGsGgViCjVblpPv
mnWbXx8VCoDndt4xmR4JMLV87610YkeJdHp9l9/X4O4V/Xt7CtPA8VSWGw/R
/0++RqLRuWvwbkGVoVM/DdxWeytQ+xQxe2OJN5yBMGb04qGZURq0bos4m0ja
C913rtRvuICy33cnCDfF4EkxQ+1hYseHw5XlJ/j9sVQk/IVlWgq22i+MvUfF
1Qvs7AJV7cCp9ZjZ73W2cL7Dhqudev8ioZVJjy0CTx54KhFnRsPuqOf5nkT+
lfCxD8K1V0EycbXFh343sD8mtZmq4/F7Dv818/Cv8NCv2xMQhrpVPsrPRmOR
P2nkZSn1rjr3dp1LDj4oulFt3Xr+MCyUb8nwI/gMpYfm7hYyRbo2+Se1b10Q
U005kMgXUbvLKufvgeej3yV+fBuPzAYbfNnJf53iljh1+7MqKHGfVp2+YIxF
tRsWUe/RZIu9dGCo9IIE96WbHxReBZO13r1XSbuEOOvDNvow+LlvoOHpQn9Q
u+x41op8t29aOE5zKBqCFkT5vKuPAIEhsQe1RM+9wakz+35GgY6xeN7FDBo8
LY/yHSPrYLT/qn2OU8mQGKSx+sLWBBA/z2fyiOIdZWcql3GlAp1QxHrtniTg
1x7/PE78Vn0m3PBgRwg4On7+MGxEgxsj06NfCD4+Z2y2WlbFAc9xMcXwI8ng
fDnL5hBp33ueVenXjTCwL15T8N4mDmRtF6dSeaG3BeJcVmN+GHQ4O5J9ewou
UFBMpe5x9K9fkaOpEIkpQg9fejfQ8Ll53satRM4Cnu8sb5ODsYnrXMeGwTRc
/tNvkyhp/27CedclOhwslcvr98R6gkwMu+5lgkOe1FKeHXkBqBUvpLefJQ2N
HAe6HpL+ARPfs1njwnCFukmHtlMazpx6m7GFtM8Mbebnu5oKl2LlFlyUiwDp
2LGIp6R9+5y9zs2zl7BlQMWZu57oJMwUXPYoES0b2bZT/i8vGX1F76MMBu43
ebk6PRRvMn4QYKd4bhcXbql6mwLtacf6pO2iQV9f7b0DkW/vG8u1xdoefHVP
nDVY74Gq0orKsaR/tZP8q2LPUFigWOXlyXAaDK7LilNyOt8su1FlrQ8qamXC
e1+FoNPa6Y/rKL/Nrtk0fjwGQgS2Od4+4Qwbw17+oOKuSy7Hkq8IFQMdb9nM
2+BEcBeoim8iccvWhn0qAeUZoPVddORQYQQcfCLnGUHs+1Z15gyHhBXIr+lM
6jvuj8atbQy6RL7xu/gw7+JcKGQ0XPomLRY0Ph+mKZF46WzTqpYtgunw/dfd
Mxcz4sFx2ccmOSLncF/BNt/HRaB5M/29k0kSXAxl4/xKvrvTocjSvzQYrK+I
7Xz9zgDPN72QEiLyP+u+6rWJTwOL8drMjtYY8H7WacdL/NBlTv8/G/7/+g9U
R6FPcSwkRy25dV3DCfpGxvWoump0Pdc0uKcLQCl++eNx82i4GNjl9f0b9Y4V
v2o5RkJ7YNXAD/doiLHcbFxA7KWbWulZnZoJV0aGvfd+CoOdx+qv7SP65w3u
2HHqcQqMRgzF51z0hgiTHXXUe/dPzdPYr02UwZos+zU9f1LgaZvnoYVkvQ7O
VfnSezEKb67xj1kXRsM80WVr2Cne6a0firv6IrFwRPBUZF8KCjTc8KXqxggJ
6mrU/wlDUbECD1dmGsqUrUl/Rd0/Pfs7RLi3FJhHkhcp/EgGLm0DkUwSJxwx
XraCgd8L99l1jddrJ2D8Q8fTFK/bwIGuVicpAD88vbYkpzIeBRTHVjeS9tcL
mbsYxMrgxZuvThWOycD+qKx2LZHzac5/lOb5z23dmw88Gh3R69DCdIneWIzh
z3GII3hy0tvXN+cEwdjBmXpO24uY0XybcRfFe+zivHFDsRQ+S8TrVz5Khqtw
avIziQ/rGC32BoqnwkmWu/yP13vA0oNakh8Jbk3Bt7/o5ebCMb4m4y2lYUBv
tbvWhOwfXW4XN645Gg3t6kJLeTMsQCOK9zFVp+X5HM7r5+H8ZMrXf4CpFEbH
ypgE+cNhA7DsbCH+IH3JWs72eAVE9xfvfmRNA1Hd8CqK5yM/fjzYqIEG7BaJ
Licl/cHWbdJ0IdFnSfnuLWdHK6DFc33K6q00WHBjRwM92WcJNuo67MzIh5mS
orbNpwPgqX42pwJ1vk9/z6PDrxz6mSyv3VqXAD4PXvZ2DIwA/FKcGezJhZmY
+3ud6WOB6dWBhQdIf2+PEJuvi7JB2HWxtE6RF3Aai7Asmvg//Yfm6V9gMpzy
3bkMBIrCP/YE0eB7YOVYBPnfK/rC8T8D8mHxhORCjWIPkFrtGF1M5Bf3JDMe
XE+D6O7v+3aVOsLV4d2+98l/1S1eq3CgIws0OALGVC0NYMvbV798yXdttV/L
ZnWnwKMextZq18s4Va4bJTj1fzivm4fz/tOtynat4Ri7siLI4UYiBrenu94l
8g82TN/b3umFYaxSV8y0IzG4mtaxleJ1B51SLtvmjPhdycP7XhTKZofKbSDt
UcMF+9ZHXIIXXmq7C29546UlsbEUL+vo6VizUKGvtRq1qesrK33RVOMoNxVv
eM75w5d5/nCr4bTkU7Ms8P4vx2TpqUhQZ+dRPkvlqTbrsA1AGcjq3bkk6BoD
sRO0bGPih4mcQtHGUqVwg/92d//GdBhi7586R/z/UoDgy2m9CuDedTy+/VUG
LC/1C1B7PwI8y8K/GEjngXf7ylwmpiRw4aat+jVKvUe8Zcup7gqoGuV/dmYk
A1pOHz7J0kP2EQluB14eKof/JN5Kjxcmwc6wxs4PxB9y4o4UbHxTAqVRO3Ry
NDLB6na/bibZf2VaXB0pLyuCp6/3La2ciAA6jTKPNrLf3+PO9x+zTQ4kGbbf
EXD3hdXnbTZ8IvHkhxa9qFsHymF73BaLvYPZwHJts+CX91R9S58HX/PSwOeu
aNJhBXNIqOVhX03s4jV455QPmX8TqjLjY3ZYoELF6YMGZPyuynqUpeoZCD+N
PPkVhoMwKP3WgRCC586A1F4XtMXo6+7mY/bJqBvEX+RD/OHKZf8vkvbOaJxl
XfPydyi+8zO+8Ib038ww8Xr/Gmcom1rqb1ixF+g4lFwpfi99p/QlC317kLqb
K6o4Yo4spmGpVF0ysYMFmabcyWD4syVWKSEMtjstfUbVebhtYrKsJiQThjyF
eYU2BkDTdmHPRuKfvHP4B8zD/5mh/IY7o6UwWXph/fOabFgTdyZtpJ/EY6nW
tb9ep4P/wzV7zyW6QtqC51lU3qmhL2zApb0MGhiWjK0Nz4Z+HXpzATIPfLOs
0ZdTLQa+O19fRR5IgzufOvkmhsi+SekOXX9UETAyqIRt+54DapElKqeIvWpO
HxYsdsmGzo3yiodKo+Fr4MK6A8QuqddVIrZXJsO7STW/G6w+MPBthwNVlyz+
auGJgKYYkLV8fMfP3g6iDj17R62/9GYLe1uLgsBqWrLzoJA+Djlz60kTfG59
9dBgOuwOL+4LvGDXuooFyqI3KT685hh/uGmqNRoOdMhKFkSgg7qfYARlL2Pt
O3HhQXje47bLwcY0dOk323WC/G/dUaaki2uisVhYDh60pGH65QaX42TdXFSY
W9tcSEOn9DGl+J85WLRJTJmqZ2XvIDOlJecPYr3LOJOP2pDxZrZai3x30FnU
XD4+CWJiU+g3yERCa19uljax11azIw8d3ePhrUKPZpaZB1zV+q+M4iv2WrnF
nMnLAb0VC/ZdW5MNIm/MLySSfSjbYbMN/psDQDzUY7vcpy2w6PiCLwZE/pn/
gbNhMw+DNlMBOD1xsJ7yy4JMheWe6mQf/d9u+kNy9h7AsGJxlYijLf7s+GKR
QtU5GdWh/VmbASy34rs9ryRBrWiGBi+ZBz4J//CaXpsALz27+G8NhYH5k5Hn
ksQud+XW3v3hmwl68ilaa+myQe2/rac6STxwKVPwUVdTMGRVrmv+0OcAgzZ2
75mJ/IzrjPkeFt6gS89QFrBaH8a3VKdTdWKFnd990My1htGZEXfJVxdRLtDC
/z1lx4WrAs05rXEx85GBRSo++GJNsYYraV/RPZEmx5SG8e6q3S/6snFxWXDB
YbLvXuFv07WuKBS9319fpns3BhOSO1NXEDw3Tf/nxvgkGXOs2S/rvE7DsMSk
uADyXwu7Ln7Y0ZqJ+rzJDbY78lBzQkdaneAsY+N5eKVJBm47/ZPbsjUb1+R+
+jNJ/sts7r+S5/2X+tZBNatz8cC8xIjbVSIBhpFRuZX4T+O2RdlDyulwJyWg
0/pQJoyH5+8/TdaXtLv7OOO/ZEF5AceXybAsuFIp+0CCyC+yWHjrwxdttAtw
Lrx7wQJD7ptaUe8Vhpzvk9m3Jheag74yHDfKBb1r1nlJxI7rXN/FHtZMh5/D
tY5pWzKhdcYm+twYVSdHyleUwxYfLHfa0i7tghl3j/BS74finL1059lrI/uS
EhmVbFgk+vVMW3EO0HlVLbMlOHh5RGevE4mHoI2Lvt6UjANj9aCPe4nfhuUJ
y5+9FI0c+1K3XWSOxeFz+502Uu99fBN2km4NAb4u25bK+kDgC8trsSTjKyNX
6vqkrR1o6VoGPOK3g8J1Ow81En3+uKXL3VgcAZJhg0osZ+LBwkGWU4rIWXh8
8XMltkzp5Oy8KgbGaul/PP8tc/YNmWdf/YX660rIOFfTrEw11bFHH3XboltE
fo1c/sxOdIc1Ny+ZlWYGQNomSUcqzmcySr8ZGhmE65oWdlwJDES1susYTvQU
uWepUZmQjTcGKpq6uHPRhoWu9BOJH5gtOEyG2BJQ2/T19Wd0CegWWMpHvVs6
JrH1/H/eV8CLqdfgDpsnRLawlFPvV/63znvVuo5sVF0UL36tMxcPsW4KpPhd
Vs2eJxgsM/GVAa88X3QmepuVSL8g88ZnvvHgnlgBqNB+p7Cv0gAyGPVWUO9j
/u4U2ZmZmoOd7ZoknsrBukipBcpEjsTxMza5Vum4+eifq8nGWbhaY4jRl/j/
okYFdqeBTNxW+DCeb1k2Hv0jZBtG7LvLETYLaCTgZ5+3VXby8fj+/fSJFqL/
hor2Vr+aMMw1fnRL6LAbThxS5y0gOPD57qnZN50Onuy5jxWMs+EH/cIDXkTP
4WePl3dlpENl4YqN4ip5sP9xAn0IWWdr3/G7t9dkAEeeRKLkxVyyfs38F0Pa
vZexnX7r6osid28zPbP3wLwrZ/ZS8e2y7MWmPwWTIWnPfkUDx3SoF2V4dYqM
x9PXJnhWv0uF14wHu1vLsuCXgIpmAfHnH3uHh/rXxqFukWKjX0gkmtz+Y0rx
637N+c+uef5zn21Mu3RZEJyki7g1mpQIvJ8DDVVIO+t/NqEPBy1h0G1P2/pj
PjDYGVxIxUUlDTbJ7mQ+cahLyZRuT0Ga79SJe0SfY6VN4fU5Nrhix+53C9aY
ACvtkAhVH1KSLWXhOF0AXpYqXGx13hqnQ5/2qVH1uxweJLe5ueDW4Qih5AJX
CHHb+Ziq67h5DueyeTiv4Fm/vt29EF/MPOw/wpyD0W31b6ZJHBVN7/tLyyke
L+wecxoxCEXZB2uqqbrZpzcK/opZGoB7DyRPrPisBb7rX57RJ/IFDq0hlsjE
CEO6tWd3JKO5SsyIGVlPF2Q2L+qYzkUe/0ydd4dzcZfc6nZ6Mm/0CLjrC10r
wPKMnOaxT9n4SbfqJlWftk+2rWVvWyByj72Td/GVw8KF0TNHqfzzsIKhxXsa
sp+yTomUSME1DMaKvwk+LP9Dfx7meyOr9iRgX2Goe/8VL2Sxn7n8jej/8sAr
hxPPclBNW+6YS0oWHhqqoW8n88zYaNXIh+Mx+Ph40mJvtQgc+NB4lMqrnAw8
MIOcyej4xatrV1gkhvg89BUn80/tg7JVK1974Mc1K+7577TGbq++F6lET8E5
nO/OwznIusTqTy2J5/W4Hf2/5cBR30b1bOLP8jvL25YkBoKs13L2+oQ0qOCx
eGtPvTssTBfuuyECNsiC9Lr6VPjPU7GlnrRv5LjPsznaEX7ye6hotUbDJc3L
idQ9gjt5EjUGHseAVWNa2FUhCgTMHn06R53XzPkDzzx/sHYa2GNuHoEeD9g/
5Cg6g6Ojk68j6f8i6dCuFUzhuGaj0UW9ITaMDZOy6ibtyZ+kT3krxCLjqr3q
q79eQrV9Blupe7ttsUOrNm9PRd7vVQKX2v2wZP3pyWyCzxW9X1Gx1TS0l65x
iGw7jV2vtdJTSfvnYqu70xuzMCbu8gvG11HYdjjg5Alix6Vzdnwyz46qbrQe
1uRCbFi8e7PgahoOh5cybiP2kshmXrmwqwxra3rpfr3LxgyJAou3ZH9Xrl3a
1yZeiu4uOkn7lmRhdrWGTzZ1737cX/BxQC4mbd103sCThhcVMk+qEfyln/fa
XHiXjCUmAh8KHcPR4P6EzwmiZ+gGJukdjG74RObo9uLfNnDyqHIJVbeWqUir
bcfyS3BdbvJ7X1EwnHl4qYibtI/8jbeBvno23oZ/8fZSSXvDk6ti8IGEcYGg
gz8cc+dn9CK4+Z432se2PRgdXUPWf48LgPcjvoPRBOdt7o0LxQbjUcEwbXJn
phmo+5yhnSL9z/weWSinWI59oq1OnFI56Dte/iKV7Bcc53COmYdzosp0b8Xu
HCw2zmX97eaLAiV05WwE5+MXd+ikVhZhdfWMiMKnNGQympoQJOPxWTyD/2/m
Qvz+g/m2Q2M45hxWHHEk+KSMsS+I/FSGM8aCnDuWJuM5fRK9Ezz7i348cs8r
Rls7CZu0+BDcv4DLi6oPcFiIbfpeQCUGfHg8Oe6agQGWkZLpb0dA5+++DG9K
zO7L8N++TLlZY4WoWAnWjaa8D5ygoXaCC9thErc71ddUMW/KwtDBIvfb7OF4
5KYzI1XPlvPhzTWBsgkYns9Xxq/oiW7r3Ip/E5yNGAo32xRbI3xkSsws9YYC
6c5o6h1zrdi1svp7PGCgyGDplu3hcNxO9vg1gjMPncaRo4NeULmO219HNhrS
fsb0dxGc9wilGqT6R4DXl4dThn8SwTzGuj6O4HkgvySSrj4Zj2Xeu7C90BVy
VPruUvP51+pXDRsLU9GXcYPEw0lr5L1+PJqBqu/Xtv0U+74snJpuOKAcpY/v
l1h9HSH7oMC/eQB8VTibB8B/eQAjo3tq3bfycfy/pRqez3xQstF4VJusO4+S
GetqDbPwy3jpRa4ybzwC9wosiZz3BoY/nqXloMYl2WmV4ijcKH+3LG58hPzn
X7tcnWeXDV9jT71SLkCRymelRjlBKKHmqxlH1uuBdqeQhY/LUXTzmS+RaxPQ
1y/hlwDZ5+7zt1bxl63EwS01Ox220rBYP85YktjrNr+LFN1gBT50Tl4QzpmG
ZN/8KJm0P6ZbN+r9tARbGl7Yrr+QiH6bAzwkiV8Nf19/l32qFPezwB6VomQ8
dJxBz52M66S/+SIU2jibL0KGuXxRxpCFDkdYGcJ/CsN85+LxjODZZkHSv1FT
ve79GRp+zYrccPO+G+oabyuLJHb5/e3D2yyhcFR+lPE1854+CGmJuz6jxlH9
9XvP7pShUZP2QrPuFCxce7YoiOBsiTbr3mz0hyyv/ofdW8h+4kqeH1WPceTV
bN4MmdVn82bwL2/mWLJ4tdbFMoyQWxKgWpCCYVbLrNTJvsbJ5ZQB/V53+DL2
ZLlpTjywyrwbEiD+M9yBEsMxkcC8OmjHlGUK/C7MyOgh87bdS9+fapuuwYWT
66zr1WnAGRmh9560F49Unk7hiYK0VUt3qZ2iwVcB8ygg7QPKtLC1u+OxL1Be
MHjKA7UXrjm3k8g//vJZcfPTVOTWU+X/eM8d7cXlHai8UPQK5++MbjFY5Hu6
ofFjNFr4Z7hvIf+lWT/wocs3G12fsKR6CIShdJ6+/VIyjjg0F8iY34vBW8mX
Lr2wvELiul6rTiJfviH+vyVp+air+OqEpVcMTlYcXTZM5oFRprI3IQvTUFjx
+fFz+dHoerr7exrZh26qqCthfRqCb05teXxmnwVYbU2Qpd4pbv8f/iC9e2B1
SQ+Zl6K+Xt52KB4PPl9mH0P8nPfmtl8e7YU4YxUe338mCUtOGAu+I/O8auq+
4h49f+TkvGBVYmgDvUuyI84Q+XFf9LxPB+ch5y8WKeNnsTi+JKs3gvjzsb95
bxwbm81747+8Ny1R+dXqiVQcDa9PTCRxqF74yoijRP/uOZxfz8O59/jsuQBs
/HsuAAvnzgXuWHIHna4Nwoc9wl0dD1bg2jWPrwF1f9lgRVrTGxpuP8x9+3V9
DNq/Wt/lS+QzO5WxVFZfQil2m+yo4+7wsnOjaBbp3zgzMfGHJxAihRd9O+FA
g1bNl86cxI7JNV8kpnx0YHSs+iTnkTB4Zf/w+nfizzcDMmXZbqSgybFzdzpu
hCOHw7E+dirf0q547kxLGMQ8RmnPwDRgiSzP5iD+83lO/63z9Df7e56CjCqz
5yn47zzl0DFdidIzQfDGeOqqOFsaPKH7/KKKyDGym/avfRIB9BHv7r3xp4Gm
E1fSaapeuttaLTaTYPgQ+9Mu+Fsa5FZVDwpR+83ugAD5B37A1Keh092TDD4W
143GqXHKceWazC5tVHixd6PHBW0QLTsm+Jvg4PVgR76qZwRyiRl1xI/F4aTc
azPqPtTqrRsPbLkchlLOjApKPgnoYbOnUozivUQx7GXiSMDrbqErjO8kIsfZ
uG518t2d4yIc8kNy8NxwoutgohOMDAZ8pc4Hqxe6mu/Yk4ybNl61cFyUjMUX
q86dJXYpNfV3a/4VjTt42Ec+9KSg1wuvF4ZEzrB9kGxgoAH0rku9s7fTDwa7
/DktiJyEOf/5Ns9/Qs+rDBd6xGPDuaLbBs+SUaZIbukkaQ+8X+2nFRiLDSe2
B1lXR6L8ZZ8+VaL/2XU8yUN6drB8Zerbwe0RYFfp5hpP7XforY3UvULxyAQ3
V/hXX1zToZ0dSdq/i86eD2Kf5+z5IP47H7RJ+SQ/VuCBbEqJEU8tIzG3/pIM
VX8jew5n63k471yEflJxEfCt9W2R4WAK8BeyBX+ieFxy0SK912xh/7gcs9YN
DxjvN/2RSPrndPy4Yjd+FQ39q93DDf0xi8vOWI60+yy3Ffqo7g3TEXdLtAqv
gUFW2dNk8l3HdrkzLw8Gglpg/OcvJ2mQv+TrO35id8HjTG+9l4SDZLOYus1Y
LFhDUEwqwWHMh0HJUtQeDzcurk3a6oZHxmojM4n8sT8aExZ7AmGTuWIhsw0N
wo1OmawlciT/h/5ijLPnwhj591wY/50Lb2Dkl6VZRMCjiII8s4008NyrK0Cd
O7edk9mx5cRl2MthqS6iHw8mP+/uMCTjIuJ1ntw6fW9o3/j1lIVDCqR0hMr/
JN+1O71Yx2LEHFZluK67IxAH19tvxOdTce/Hs1ni/T74evjpj54xGg50Zect
Jv2VN5eGKzpdw2oFZtomzzT0TBoLkCHfFX2++c8dthAEIWGBOGkaZnmeKFhO
+k9wDupqJgTh61EGtmM9idgd4DFD5bXUf6pHHmINQg5ds1+fjtLQ1e0sPx/p
f2HO7qvm2f3zIja+32tt0GprYnz3vSj0qfZ22E/F7fLZlkH8Gvig7nh3fYU3
xjj/GY4g+BQHaK8a1YwDP0Mt1yciCeCdcvktVc9EocNT4c2fi8Be432hnNkW
y3xqbN+S/haZ9joupwMB+UXylhpehmNC8iFSVL4ue1FuwG57qJZNn3mF/vhN
YILpCOUnLI2He2wiQG/jKp3lNe4Qecf/OcUPOfOXFwF5W2Z5EfCPF5Hzl0cB
RnmzPAr4x6N4WX1WPo8zGzJKi/wbPibCmuGQejUSJ3Ac+ZIaJBMIWlrM7LG3
5GBac9jyJPnuoykvvbTn6bBuz67LngmJ0CxbN+ZA1ruSmCsfzAtTYKOlweYn
Z6Oh6smlXwHku2F8aSNs0pFQWbb9j3B3BPBWCwxQ+c/37u/Lv/K7w5arQtej
2P3BWbW6lDrHvMowy2PB8L88Flwzx2N5/9PKbM87b9y42P3pdHMyFh1SFeOm
6or/5c9A+5lZ/gwcmuPPeOxLkjR6eh7bN3fvkNeNRJFHZ4Oo+gN1N/LrufgK
YOKuefHrxEQwyNWneXwbgetzOFfMw/lGWORH3o+hUH9iGS/7zsOoZXI0YyVp
N1v5ZbVyZR4MbTyg84E5CcRzKzriqPcOmox+3KFLBKEbt1i9zVwgOGU06SvR
M6CnvqFsUQ4wWfZ+/nEwCsxd3Dq5yP79ULt6s656HPh7XPY8+u4CLGjb5ptF
8JnkmTReZlQAtTe5WM6kxoJbQtkX6v7I8r2zfCeY2TTLd4J/fCfXv/woEIqd
5UfBP36U2q311+h50qBSyfLuA2EyXl3MXvISPHn/8q8gh3eWfwX/+FdDDH5S
MVIF0B2a1BSTEQRSP3dW5pN1v3YhS90p2WwY/y0s6KPvCQyjOUVDBOeC4gyX
xS0+sDj81FR3jQNsrqHvp+pvhNacH5iYSgWlgjT/CnV1MLl4sI+q8xZ1I3xL
y9pQ0EpZbZUprIv3MsM5qPo8dI9n+Wl4LGKWn4b/+Gnyu2Z5bkj3l+eG/3hu
h3s7OH6lncMRtTfmckkRWE6XEZ9K8TClXq9vP+gH3SzZWU8e2uDWG6HfqXtY
kznjPMv/mMGFz4wvBNN98YBJadBl0r6pbZanB5/+8vTg6hxPT3HOLhnz7LL/
Eca63wqB9uVvFDxuHMWKlPp9fFSeU6Zt9TaeXHibXMfU0xwJPk3FT/TIOMr+
yzOEnoRZniH84xm2sM3yDMG3fZZnCP94hix/+YqQ+pevCP/4inzDMldO0fLg
7OUY5TerEiF5x3mXN8Qfnv/lQ0Lgj1k+JKyf40MOztnx4Tw7PvzLt4Sy+lm+
JfzjW7LwzfI2Qa11lrcJr+Z4m+V/eZsQ8Je3CevmeJvrd614YE6fB59L3GQ0
rrhDYheX3zj530nvWX4pHD8+yy+Ff/zSlowDCrmr40HLX1fgg99VZEo7Zk29
+xzLoLJGZ1sW8It/eRNdYgRKfKEpv8m8JPiX7wovn8/yXeEf3zWB6z5Hwu0U
WJsj1WP14jJyvOB5vZP4ifcb31qVgFBIZ6ztbbEKR55Ddg1Uvfcgx3Nranu0
8NviJovB38k4vmqbkCPpv0h9lp8MGDLLT4ZVc/zkFSdn+b14+i+/F//xe//w
zPKBIV1plg+M//jA3X95yPBWdJaHDP94yBv23bF6MZoIRy6ODLC89wZh9xe5
VL5i5/As/xnan87yn+HBHP95y5x9DefZd+gvnxmkX87ymUFgjs88dIufnts6
G6S3jeYpNNuD1OTvcjqCW/pfvjRo/uVLg/QcX5ptfJZfDRLxs/xq+MevXjiH
w+15OKjsLxJgiIqHyNJd25ReWOOJppODegRP6fZZHjhE08/ywOEfD9x6+Sxv
HMZ4Z3nj8I83/qutWLKpPo7g99TB3tITKxmi5eUpnomFxbarV9LA5snJ5abF
epha+clAksqrVFypTs0zgy89lZHJ1vHIIZ8db0Htm+b0qZmnj+2Lp0Yrx/xB
/ND2KF3tGDzgyWdsTdp5Uw8dPhXmgRXs4ibYT8MLebEW0kQ+qy5TEGutD7Yb
r8hfFkBDSUaPlkOk/dtffj52/uXn4z9+fppzkqW2RBqeH/ow2LcnA2rbVmIs
aR/jblwRHZOKIsyqkcaSuXAkg7HxC7GXkaP7QTGOPDxFWyTVFpUG9fcOvlEj
64uUGI/NkH42HlnWdD4mIxuWNpjd30r8xMZbhUt2kob+r9Xofkdnw1bVpHgv
gmdmoveHr5YZ2LMHopkeZMMNts+av4kcRt+brMGP09EsnzcvxyoDghZ9PhNK
/KdTTLhldFMGjtw7PSMykwr3bzMoU/XuNKeXnNixhoZDmf6bjHzTQYc5rTWa
qkdx+w+jqlwmTjYdpXENxALHwUOeZ8h8ru6y8rLx92xUUrqz7/iPENjlvfBE
L+n/gD96RaJFOu57b3nH8WUSvNjuNGpF+idPlSjlMxfiyQxbkd2ltsDHajWa
RvS/EnFtx6/3mWj4pknaaXM0iL492WVJ+mvKP41rulGGrldF4iavO6PPVtZj
W4ZGwC2spqBbpRIX3/azyw+NxMebN24v6RuBVp5Gd8W7ObjZ5Nq0tUAgHL+6
y9KD6BNyekf+hYUV2O2fVvLOKxEfLR9dpEfmMZq5ntiKiTyUvPSGPqImHO9M
8a/fS/AZyDZIk3ZPQ93OZtbHJqGoYhkoc5yKz2u7xRqq4/FMynBS+TnAJLYV
YEb8hy9+jGO6JAz1T07fdV7tCX7PI9pjyTxw8SLD5l8NJXjo9IWgDzaO6Dx9
aNNiYscxr42Hm58k4v7vtMZkxky4QHsH14me7D/5T3LaHgHpMTEZq/os6NrT
lhRDxoXEuG8dd2M0Xri5LPMBVafw4LNqearerHWr0H8Py7COx7razTUYI9LV
knTIenSm4Xlvc1oCcr3Y5FP2NJvMx2rxbKS/vqk5NoZ44ac0K/GGsWzQ26qr
eo7g/JX7qLLzUDleqaNXr2GJxrvHS0NfDBA5c/7weZ4/LF1zrWu9ewhq2Vk+
UyR+23XA5CF1Pm5iqTgxeTsdP9Zy60g7JII1k0TitZ/Uufn98+dLy7DxeoQv
Y2s8NpbknXtE5o04xxtJn9yzkV9hU9MtzXD4T/HlgkEiXzk1UPQiWwEKmKF2
SJg9DK5b+dSU2KVI6PZj3vex2Ct6Bz7nJUC8t7fM9O//w1l5Hs6pc/YVnmdf
Q5XLH+3Wl2EpYyKL4UwIJlk5Xm4mfuX/2yL7NScZ57uyPNOrIuDgrRq/aIon
doflvNj+Unzm2yOflxqO6Qm8AgpkXTPzL8q9JEBDPiZ15a0BVujs/kbzJbVP
MfxtmmWbh8WLNtWqnwlEm6EkJXFqvXtwfe1y+SxcXKiz0arEF5YdDu00J/bl
XALn3rjH4vCgz8VPFRbQYV93k8rnD7PJbAw+nYn+4lV8R8wv4c9AxzBrsp+9
rbHEOWJfKg7LVekw2eqiyU2eAYpfFFXa6SviFY7J1RKsh1u9oTngKp8B8cM3
tIi6A9viMfzNeT+O/xxAgeFHiy6RnzJsXO7NG4Mt3zXs9kIwRBpMPFSh7lcq
mWoGsTjBou01vfdOZcHlAwIFlUTP3I9HEoU+ysHQVOrn3SMZ4JsWZNNE9OGR
vV38h9ULvSq042NYaaCX7PMzkeAArRbXPqk5gUviLpaCszTYpuLFT9VBLZyz
Y888O8bxhs00f0/BU3xH4sUvXIOAQwdGlUj/DT4shSOaWbhq+Lf+pwXeyGi8
Qs+J6CN0inGdoHEGRi28K16/wh5yYn7VzBB9rOx9emyjcjDv8rRF52ozrOTp
2CRH8Zfs9m2SlHBHrg8nm8+mhYLy0o0PnlLvD3pH/Ljqmo3XVBguDYM7HhRO
YnpO+h+NaCu4Z5GBPosWl+zn8UAGTTdpiq8rY+/BveBeJPZueMCy+aMblPsZ
Ne6hcP4eP/AmJBXPyXmyTjy4in2ekSVUvqVCUMiOmzMes41XX43kN8TdRYv2
+fyh9teWK7UTYlHx0UM9wRZVFK3wrnlMvVt0ddjO4mscarqtkuVZcxYdpjeY
hpL2RcuSy7RFY3FDh5RMWqgJNDea+L8h7QfFS3YwfIzHGONqjrtZFkD/7dsj
NdK+QZT+zbAhDc9lhN9t+HAVvF4VvafOg6wXFyutiI8FB7auo95NyfDM4Zuu
NsHfjbP7aMOKVNDmwe936iKgps1ThOJJXh3IGrFU9oZXu2omaKaJcELcPzCP
ygv1fpFhttOD79eeDXFVR0DeM5EuKv8gpKUi6UDm5UCV5uM7RM2wJ5Gu2Z60
+8/hzz4Pfwe931I7OUIxP9a6c4fDVUjUFYEJ0r5IRulbfEIk6jxfUKepooZH
VsWdpuqd/rlwKfqWWTh6fWmG2AR5kNSTF3xE2q0fjEkz/4zAE9eUpLb6n0OJ
bpoGxed5+KZi194UOxDlGetdNGELsskKyq0kHnP9clFqiPcaiuTX5Xcsv4D3
ub5+YSTtw3N2MZ5nl3t6QTNmZ/wx31Qi9cx2Q2zNC8k3Jv2fv/IR2rrDAzWu
RT9l0lJF5w8Kx6pIu2+q0uTlCnfsX8sUe1VgLz583cx1k+K3BK9duDTYDpPK
b+et8j2ID8saiil+i9TX3W0am3xxqXPAn+hBdXRh+XaPOjdRrT2WZjyWgvl7
1pkmuVqB6AtOdnGqTtGKqP3phWHoeqVA8IuGDfrn6WzrJP+7Sv7L4geD8fis
OdV4bagLqsov/kPto1s8fHd0MKVBW2uljIpwMNwwpbtE1TUNOqtz3uxGFEjV
cb3zKQwE+6mtlRS/FyQVlo0aXASxw0ctpbRUIchJR4Z6R5JToizMYtwPeHtd
PfvLvGDDZWVPFiovYakQblDPC/uCLz1K/igKjXo3P86Q9hdz+AvOw39Q7KSL
n81paBJ89Yl+9DS09CxIpngOe6uEY1NuADy3O9C4//jj2lPc3HWUHLUvh5JH
y41hizYbA4foTni/jP41xdt/3chlMK0XCTJsoltMijSxK0uczpe6l6T5Kd6f
ZgSWYrfedz1nwpxb+Zq/qHsKJocLWHncoPPCg6MKmVqQ6idddYeKz+sV2nRk
vGB/5tnanB+nid9E7U6j9JcD0R5Db5BceKb3itUhuPYy9CbFG2+VeiJvkuSD
+9JzPr3hdcdF6t07qTpsXl+/MvzR84KQnQMSNqLnUXzhNT4qjyfbukK17Yk1
sLbFF9qoeeK2s0cMqXsQT/aL6sZaxKDFm6n7t0y8MY61ppXCP2OXO5bdtETL
bt22AIMgXLHr6EOKLyGh8muF5Go/1NcPvV2/MgrVfmwRGyT9L2pfZjlnmwPj
C+sEWyw10CBm85vzZB5bpxeSIrkrE/zjYb1how/mbeE7uI3MYyY8ubevn0oH
/bfbO9746KJm5xO3W1T+Z7uY+YazQfBp+4Wb94LPw4bWFmcZ8t2CDTXFVp9j
4efLCZFP6TzQKlJXd49899PGm0p891PBfy3T21WaTigX0vzhLZlnUpl4TuVb
RMNo5rPX2tbmoN1rzMdP3aOZs5fsPHt5Byw6rbkuCc493fso9+slVNdb1kjd
57X9pJku9TIcaE8Na2UipHGx7z7WOtJ/lJ397omYa7D6R/O+hn5FME9z7VtA
9GScuD0cfigchA6IBZduOQ4bZ5qmqHOopLqqr3kLYyBCk1m6LdEcas8lPqfu
12Ccm9UzmwR4qXmBWdrvIl6u5rshRb1v1RS9N3ZvLPz5edFUfdAGRMbMlB+R
dut2DoO9WxNB+xhDPIZ6ItfZnzkPiJ7aBWbhK5NSQd2vY019niPUjgRvGiI4
SPXuDLKTioGu1O2rkhxkoVFq3StWqt6jDutRKVUaxL3bwba4wAoqbSKDG0l/
2brJ4702rsDEkC71Gv2xOujekCD5L0NWZv0pKxpc2Z1t+lhTDet2JWbVT1J1
cV+d+jUTD8Muwtf6dpjC5/sX7lPzf1PjzH39OhOQnBIal+OJQo6y4fOG5LvO
c/qfn6c/vfl1ruv8ydAmrcHMrOIALhvDAql96JPsR2JJbFHA4T7cE7QnEjs7
7y+eJO13QjMkfY964bLqtcaGVjGo5fbKo4CKhysd6KpmHMGv9u5/O17F4cTo
VU9T0s44LVHbfcwE31+8kZTIQ8Plhv19A0T/3qYqzQWKJfBw41d1k+RAiOKY
6poZIXHFEhMB3cl04HhXXSpdH4ilDe/H84nfZic/XNy8MhiyO6TalFQjMb8v
dKqeyM/nerlW9HUy+LLESnGrBmK5YCdDJ5Fvrqh27uhQHpz8UuaXYOcN25hc
HdlJPHZ4NHzKij8RXsjIu2xWcse2TwvGXpH/usTmWN5K1r/GU2/bBsIC0eOo
aMEIka+yyl1XIzgH9l5qTanebgJnLfbqHqPi2zn/6ZrnP0YnlFJuP40D1cIq
00sXXHGqJr6Cirt2Mcfdv/8xBWK0FZ4cqNKG1p4w/oMUn+emqJyAVzrIqDh3
tKXo47FMI2MaGY/ORvlspbyZcOR32NOIJR6wqHSHlCHB4c8i95ndn3IhZulw
xINyb4jRiTvyjronflnP+f2DVAgVU6pvtneA6yfMvvURHD7M4fxoHs4qKyLY
69UzgHZwNL9yWzS6fbRoNiXxlZ+q0J2SgCI4YrN718LzXsCbbDs+RfaVHXG3
OUPos+Dgcd/X4yP+0Cl1NN11Yva+ds3S8gJ4t7Jsj1eQKjQbgg8dibcrT522
4i5MAO+1PYOZlxNRZ2XeocPUOdGVrpvp/+VAfqvGgrGPnmigZXK3g8T/75Ib
F5vezIfwJFkHfB8Ok5Nr10dR9yh3M5jAoxAwlfKVWW2RitIrAzvlyX+pzumf
PU9/pXTDYv7aEljIlXXZMzYC7o4cPdNL4vb4yZQWrYYU6Mi6vSjpTwo+YhhJ
ofLbbd4LkuRz1OA1bfHN3ffS0EZ3+d6VRH645+sH39fFwrr9nRU0yMC22PdN
PKT/QEYl24J9gSDGdq/38pdsXMDTyrKO+MPAHM6t83DufBmufH3cHbbcDPYX
049E2JeWeoCMR1G7uJcWX61xr3KgKYtyAOYpL2Wm7u2acQbe0BINJnG8e3rX
eX/c9oTLI5P0jxkx+dW8NRqe5Pqs46myRNk3k0+pPKdkasrk+tPe8PTZlOn1
lss4ueOnP3U/8fWcP8TN84d0+X5/C5VckItI5L65NRwcZ5K+U3VO+Necf2+7
NAf2yG1mjXP3x9Dvy6yp/zpXvWf7j58l8EpcgEdlIB6efuZNO/eFrLM3D9Rq
CJdBcrckR0Z8DLS7byvzI/tQzurWdWI3sqBFcNWT1LWJ8O2JSNMdIr+pW9Ng
PUMJ8FeoDrMfD4SlJrbLFcl+bZ9ORk7BnkJo0Vwg9DHiJOxJPnshgNj9RDv9
0KaVBfBw17GGsjoacF9iU9lG+j9YnKlcOJINYVIaj1c3eOO4+Yc8LaJnT9xF
U7+HGZBDJ2P9Iy4S9TxXtupS75FlvmPQ5i+GPFvh608ZU8D9nTVQddrptjdb
0WWlQUPU2suPWpPwh/PHXX1Ejiq/OaPkRxqMWWrGcxil4wuOK4UyxD89ylJi
jkTQIMpb5cZ1tmw8mtG/kp34+ercH88PxKaB1R6T6QmPHOwH+R/eoyMQK63v
PeDhjGoG5z+eFfLCQu2vsjYUb1lzv45GgB2G3zht47jNBnoaHVIeUXHFqMIz
4SAb8C8oZ7KJVoatN4sHP1P30d6ZTosoxUKwmdrKPVLhsHX614cbZN6I6b71
63gbDXazuN1cAAHI0aO86CcZX2vm8G+fh79whNVSPv586CtcKXT9QRosL6MZ
aBE8R/Z/Cb80SYN+h6qjT0Si0Vdz+vNtMs94dazwQdZc+PjLJXvJSBysFj7y
yZP87zvFSN/JzengXPJ1Y9cmH3iW8PaDGfku3dXJ5weGE6Hd63zgA/YMeKur
duMgwZOJfQHN7koC+MV8XvaUQwbv8buLHSLzIccaz2/aF6LhW68Vf4GrBwY8
ujlOxTOdPxQvXleOAaapDeED8deQ67XaXTYqznnPtMqZKwZuJRTdfOISjZN7
oz0VCQ4mGeE+TmHxYONpdvB9SxLuFBaslCD6TKW6LPLfmQB7cgfVSzzT8P1X
q63UPZ1JDffo78xpIPDp1XbdjmzME8PE48TfTpdufbHpWyJUppzZnCmTid5e
qZxBxO6HmZueNEulQeSRhL6JsQxUKZAp5CN4slSs/8OnZ433Az68eTLlAtjE
tbSa2l8EsloKl3mAbb7MykMskZC/JsDyMBmnp61VM8v1IiBwuYFX93J3NC9Z
M2xB3d9ZOHn7uy/pt15kj+viDPiQ6w9dRM8DVmKyzLlhsFiC8cuHmGCU3P1B
gKpbMnnlL84P5+Hs3O1JV9sTDts/Kx+brkmAOyapRdQ+9JFv0X9FhyNB9PKm
e+v/i8K7V7hEqLofZ7/d3/4zyhMC9+tvum7lB9MvqjV5qfPfSO4j8lLOxK7Z
sr/DLsLvPGutuxRvfErM0WdSDXyk1wvsbE6BZ+ZDOkpEjspurgZ9HidQC5O9
pvr7HNYrpLe2UOd0V6Ocjvh7QFfkoj87Mtxwm5FrLHWeskXYUkdguw+8767Z
taUqAJ1+Mj7+RN2/SOx35/AMAJrj8GHV+gj8yfboC/WOtmJMrGMMwWf04rF3
VsczMcxF+SYLwcfRvOlw355AqBuKlaf/kYCO/23+4Uz0qTnyPonONgDEahxM
79mm4Wt6i0Hq3Hm79pcZQ2UvqLvEavifdgZ6d4nJNRI/X5r85XBNUAj0397T
tDKYhvQxWTzdpL/C3H8dm/df/ZmdunbPXXHfhTznoe/RcDLzWPR7oqdq861F
OSX++MRpf6pqcDLsi8hRoc6z7FnOGm1dZwNd7wdcLn2iQbNFSytVT3jzszMV
SoMWoE+/ec35x/a48re302PqPrjjtHHRUTs4//LVS2uDDGhxtctjIvp4V8l4
hv22Q4fMlkNrHtJAnnOq6wp1H41TddH3bdT57vmz+bn+qJclfmMrkXNlzl5e
8+zVfjyOfutCaXDiUck+czIDxKP1dbcT+WufPVfdlWWDXKVMLtIxEXB+7ZXF
FP9htGtqz5beS2C2v/jtWsUo7C+XuXWU8tuZxbzxOjaY1rl3/9MgX/jgn7/K
ktpHi57puOFoiDdNAwPppe3gIUuMUzdp52ey+2orFYAvueIXBEkngo4X2w/q
nOX762mJN1710pMxL3yTsur+Xz1/kzn73p9nX4cHeSV3+s/BKgaPyI77digx
skGcem839b+1XO9SfPFtfrJHuF8ENEUMFlH7jpNGUhKOZ61B+fiTc7crfbDA
is/egfQ//uDpqdMVMninwDrOxCIDuQ9whHARHEQEVtH1PTOBfsHgtRuCI5GJ
O/LPVSLnR4kX/coiF6xf9nWCY9gPJNSCm6j3EJ8v4+2WEz4JP1rOKOYmp2Og
rv0Ade9+j+3hkpl+ZbRNHgyIl07GKZmSHblEf64scbW9Btao86P7yLXSK+B1
8OU2al9cXBGX8viuLT5oPLF914oMXFfZu4jiLTSL7tUKXREIW10aWY/6peLZ
IoG+S8TuCy+MdL1UM8SnXmoiOcvSUG6BZrkVaaf7apsi+9oBbm2Ol9uvGI0p
C24sZZ3df+2zbVZ1Ql2LzYaiy7QgxGpdNXW/zMW8YpBd/BrGD7B8zFpGg533
K6YWEDkXg0VWm/gloa+iY7/XMbKu5jYsnSHzoVx0zNuDDP6oFResxK6dAQ57
2/OiyDgqW54rZzcmhIrvgw/v3n0Zb+wqu/CB2l/faxfwt/DDXIOJy3ScaZDR
tor3A/kvQ61OzfOMUShw2PWQsEEmHDb9uOkbmccY9zJzQ8IppEmcv8q/1Rsr
xIqKqHtbAv/Dfxr29z/bwBmF3abLFI5JppF9hd7uZqJP0KTrwpHyAFQPYs7j
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
9NmrQjK/KHaJSNJ9PoN1eXQ732alg5aS8+YDxB9YIj/UFVHcwVRj5/cP74Lg
iL/XReo53PNzdty8wI5014b+e8tYgsUOH4Uzy+PBgtFPp7CNzMthmUeESxEl
pH+4LQ0Lw5MnzurTV1DA5z8WgUoFRNffPT9jpO7CzN8syplq4ofv+XZIWFTi
+fMRo3vz7HFl/6XWKDJOj791q9u+OBh7H/slJH2KhrCCuz/MqfdVeW2U599f
jlesbXOdJRwweMf3t7ubSb0zlOgXqVeCjUa3XvvrOeC5/g4HKufzSFQmIVMl
EyWLBH16hT2Ald7EaoTEfyvuW2vzigvxcXJSRlueM5b0KreJEz1PmLi3jJ/J
Q34GjomQRWT+jey9j8MknvyX8lPrRA6adAhLyLb5YlmAUehbkm833a9cXSKW
jRdlXL2EWc7jWb6/D43JvK9WfkpF7FsG0tcIbbX39MM1XZ//pZLf1WQ33SF1
4jGKe+tGW/YH4Mvx5EsKk0ROBfon8T7xWGfI6fGUPRjz8jXl5Ui9Fmyn+o/3
hRv8SxWw66N3Ab6gNxLUfWqsC5gyv+oDwbVTjgqeDyGw6JYclXf1iLTXy7zj
DtdX174RmPKHPyf171LzzD4LoW9mjnfh0Y57Y7J+QVDwKfdBN3me9Ki4XGI0
EznOrnDjU7uH9WY5V/uInKJz+u9eoP8LiXFHzG0SkE/juN4kyXO2837UUCT5
id+OL/WiwVm45GrQk74rD9A5LjXRepzUX2tPb2HxS8Drqo6/tsXfhHH94JNp
5H1LpX3LhguScHnU19tB6cNHTVY4yoiQ/8t58kyZ0Qk30LfbZcnF7gRiiRs2
UfcNk3Mb6HIL4nG1tzrD+iphlLud++MMkSd+zi43FtjFV8ElLOxiHCrbnZP5
oKKIDLzMa3lIXjS+1yW6ZUMMCv8yaXydr4P6YzmjBiTfW3vYaN/E6RjcHBDe
euTkbVzhv/G5OHnuKco5rTkUiq3uQtV795nhRfa9wqeo/eojftEFXA5Hv4fP
R254OuE6Be3n1PXDJewdTH3DMcj1VjOJQSQIo3NicS2Rc6OYjmZIUxBOZXXt
/LzbA1//Wk5/jHxn5bsDb/rzA3GV/mhf6X4fVLM5soyLPC/uF/uyJswXao51
MD3O9gRtffZ06rmSi0Ld5mKL/MDjb0uezE0feDyiR59BPVc+de37AVFrmAzJ
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
jyPVVJ+Z1Xlt91+b1/Y/28Fl0w==
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702558`}, {
       0.03720008557169903, 0.7598559161924545}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 2, $CellContext`k1$$ = 
    0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
    0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`kDefaults$$ = {0.25, 0.25, 
    0.25, 0.25, 0.25}, $CellContext`kMax$$ = 1, $CellContext`kMin$$ = 
    0.05, $CellContext`lastNumMasses$$ = 3, $CellContext`ld$$ = {
    "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.8200836820083681, 0.1673640167364017}, {0.6778242677824267, 
      0.6485355648535565}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
     "pointsDataTable" -> CompressedData["
1:eJxdnUtsXEd2htsSJdESLVMUJbGpF0mR1Fsi2Xy/urop77jKTtvJDCdZJYA3
2Q2XWXgRBHkMM0kwi8DIcgBuJsAA7EU2zigveKXVGDBAwICBsSHDI8WOHLnP
953JvQSE6+6+99TrVNVfdb5bnvzBn/zBjwYajcbJN/+23vx7+82/E2/+7fX/
bvUa3//1nvQWWt//3ewdfP/39ElcD670+l+/2In7GsO9Z9//fbDT+/f+fzR6
fTOzO72/79//0VHY62Lvm3bY6/Z+3b9/qIS9DvYul7DXiXRat3p/9/39zSeR
zrMb8f3hDr9fiXR3d3pL/c/vRvrH3d5bYTDs7nd7v+wn/C9HYa/b+7e+vW/b
Ya/T+9v+7++UsNcJO3uXS9gr5O9WpPv+Dr/fiHwN7ZC/y/H9h93ej/v/cb73
3fd/7W7vj/qfXx/1k3lueX/5q7DX6f0wfm+HPT+fj/Q/LNovYa9Q31Ncu73X
/R+uk6+u+SedLu33DtdO7z+i/EdRj53en0f9tMNewd537bBTevNRvyXsFeu/
LPavbexORblnu72f9j9fx5+yfaM9n3bI9xD+VHph55uj/vcflN5fhf+0w57l
b5R+u+63yd+7pd/uh9th9+BK6dfz8Rbln6L9O/jf9chns0N+L+FPBX8ZinR2
C/ZeRX6etXn+43aUw/K+Ff7b2ia94RLtvkV5x0rY2aS+psLuc8tzDX+yPi9F
vQwV/Pkc/t3unejbe3kU5d/u/WU4Urtfb4dbvR/10z0R6R9vYn+4/Kxf3k3y
N1b67b67Qf6mSLfw+7Ve//6DNs+P4ifb+PNZ6mkbf/76KNptq/c//fb4TbTX
3ib1dZLyb/D5QvSvZ+vYH4v2bKzjD5P093b0m++uUn7rdzTS39+i/t8Ovznc
JJ9fHUX5N/DXT9thbwN7J+nf6zx/AX9aox6a4c+Hq/w+Sb628OerlN/2HcVv
N7lvkHra4PsXMd4crNM+x/SvNco/QH9aI38X8KdV/K+JP61Q/kn82fq9iv9u
kN+Lkf7xOvkbpD7Xsfdl+PPuGvd/Fv68b3lPRfqHpjeCPy1jbzzas7lMfU1y
3aA845R/ne8vkq71e4Z6WsXeFzE/NFaZDz6P8bhl+qdj/Ntbxv5IiXwu8fs4
/rSIvUnKv0Z9j4c/N63vkfCT3VXyeRp/WiFfn4c/Hy7THr8Nfz5eMv+U388X
8adFnh/Hn1p8nqD8q9hr8n3WL/60wn2n8Jtl+uFn4c97S/jfl+HPB4vYO0P5
W7Y//alF/q4yPi/w+wT9aQV7Tcpv+47Qn5bI5wD1uUh9HTN/LuJ/L8Kfd1vU
72D48/6C/QN/mqd8V/GnOco/wX3L2GuS7yX7J+navgPYsXyfMj4vkP5XjM+W
923607zjB/1pDnvXqJ/H2JugPy06PlF+07tAf/LzSepzgXb8JPx53/S+Rl/M
4Y9nQ988e+z4Sv4eOf4yXj4gfxOUv8XzY/iF5R1m3JvnvhPkw/p+zvhseV+2
4/5H5P9czJ+th84/MV8c3Kf9r5WYd+5h7yblX8D/1F+Wdxh/muP+t5gnHveW
+/Y/Por0H+J/r2L+aj3A3jnSv+f8jD/fJX/XY37fu536NPI5h70rlN/yDlMv
j1KfRvoPUp9G+vdTn0a+71K/Q6R/B3uX8Z9Zync95tNn06lP477H2LtC+tbv
u+TjPvc16O/3yD/69OAO9r7Fn2+r30h/JvVp2EO3N27gz1OpT6O+HqQ+jfze
S30a99/l/tdHUf+3zV8jyj/r78zv03w+T/mnUp+GvUnTx79vmj/Sv4s/Xyb9
O6lPo/yzqU8j/Rnrh/Qtb6OoG6hf0p9IfYrfUO83YnxqjKc+jftv43+XSH8m
9WncP536NNKf4vmP2o7zUf5G+RH1/h36NNK/6vqp2G+oF8aD0dSnkf409i/h
z7dSn0b6k6lPf0a/VJ/G79dSn0a+m6lPw47rgjHqb8T+zf3vpj6N+6awf4n0
rd9zpHPd8eUo0hl3/GE+v0L6J6j/Uep3mPSHU58uYJfxj/oZSH1KO6Y+ZV5J
ffpjxknGX9Y3l7D3Cf1pxPGb8fYdx3fKfyb1Ke3q/EB+vzpSn6LT8OdR0r+c
+jSeu5j61HEpvkefvrkvvh8g/ZPYvcB4+IpyNMnvZ9TzBPX5i18dVOphFP+7
mPOW+rSBH1X16Snq6xj/ec28OlDUjdQb+fs41rFv9OkJ6jU+Z/201aeME/jz
RdIfzKvzhOn8mHajnMwPn5LeqWK/C7sjlP8L2nWc8ehb+2WxHNGO49Yz/nyR
ddY31O8Z2ulz2ve3Rz9nXEYftq2nuJ4m/ZekN1L0c/oB+UEXNSbtX/6e7fCM
fhjpPad9T1Nvz9voY/L5ol0td4Nx5kwxX/gd6Q9Z/qJfxe+T1M9oUZ/+BeNs
+PMI+ySf076n8Cf2cd74oX5L+1EvZynvIPPVML9fzCvjIumzz7I3yfg0js5v
4s9ft1kf6S+2q37EuHt8FPPdeer5Bf48wv2DpH/JcYjvx0jvKulf47PtdbOo
T/+u4ocX7E9Fv3IcoX/jz6PZL9ynYHworhu8L9J3nlIP6seT2J2iPcdIf5j8
Xch1CeOb41GJ/ZLfHLmuZHxsq/Oq7TaRfmE9MP5i9xb3mY9pfh/Dny/xvfpr
zH6Bfr1a/gY/D/+0vC/b9pNI5xzlnyraje+nsX+NfM5kvUQ6t3OetR+Gfww7
X1Gut1yHlEeMa/HcJOm+ws8tL/uVrZn0o8jHrDqD9O9wneK5e6R3JedZ9IHr
+qI+jftvFfa/GPemKf83zKez3D/E9Tbp2I/uFssZ39/PemR9UdSn5pP9PdKf
5rmGeqgwLjD+3CZdx9k7pKc+vVf0uzDzgOsN0n/I87brY+pRXTJDe52nvWYp
12vSv4O9n2/Gc3f9nfHnPp/Pc9/DHGfC3iN+Jz/NuWK9xzAyx+/sVx7ctnz0
r7vk91vmhXvln6N+SN/yNrg+wj/epfyPKfcVPs9h7wb1Np/9LK4LRX3KeqGw
f+56gvZUnz4s/xT+Q396rH+xX2F5GZeb88VxKda7pn+T9fsC+aIf7Leoj0uu
p8jfOddb9h/0+1xh/Ye/zBXH8bjO5zwR1wXyN0Y9md5NxsdFnrvl/k9Rn0b9
P8af0ZH7c4x/v4t5dne+/GOMP9G/m5aPeft4QV1K+VvFcSzsLZI/xsndJddh
kc/mcur6uG8efz5Le807/tK/FyjXJ/hPy/Gb6yLXC6S7lPNWXJf4fYJ6Wi72
47C3wnXU/QrnH/bDW+T3q9Adxy32BT5l/8Lysl+5v5Q6Iuwtu87An0xvAn9a
yXE77K0W9Sn7Ofiz+6e25wv6+1L548gY/rycui6ulneEfK2U6v7pKuWdIB9r
fO84t87v7p8ukr8z7ActMd+jg/eX0eWfsf9leqco/2pRd4S9VdIZZ395jfqe
YL9wneenqc+Noj6N/C7jz2fQ9cvlf9GnYWel/Gf/qk4zffdP11znUf51fh8n
XxtcnYc2uE5TL5vkd4T+tII/n8afVov6NKp9DXtfhD8fr6U+jfpcT30a9jZS
B4W9zdSnYW8LezP0zy3KNeJ+Mu1zivlirUQ8z3WS9fsl86flVZdvpi4Ne5v4
81W+30p9GvW2nTogru1S0afNderD/dP18oeR8fDnw43Up1H+zdSnUX7LO4o/
bZfq/ul26rKw13ZfKJ4rJfUp8QjGv5P402Z5HP0b/b7FOuErxuct0nub63bq
07i2yR/6tFlSn4Y/l6JuiPyW1KfEa/Dnk8ZzytfoU+I97PN9TfzG8p3FXpv8
Uj9PC79fi/R7hfxNxfezndSJ/ec+6KQ+jfu28ecT+NN26tOoZ8v7Ev8pNX1a
Up/GfaZ3jXx1Up/G9x3um+W5Lv7Ffu5um/Z7Kz4PldSn/fvft35ftfvj0HPL
y35l6aQ+7af/YYd02K8c6qY+DXtd8jcb49rzburTaI+CP7NfeVjKB337HxEP
6KQ+jfa0/EO0l+Vlv3K3W9w/DXtd/Bl92txxnxV/2kl9Gt2mlG8jg0fEk8uf
9Z//F3iDTu4DEI92nyfS/6Cb+jTsdckfevDpTurTsLfD87P405PUp/F9p/yg
//k1ekd7/7oZ6XTx59fsv5u+69Qd8nuZdCz/DXTBE+zd4vsn5G+W556kPo3+
3y3wDaEHP+ymPo348g72GrT/TlWfPt9JfRp3mR769MMnqU/D3nvYu4299/Cv
6cjPvvzIBHrDz83kOeL5EeLv8iQDyXMYfwp73Yw/hRl5kkHGQ3mD0ejnu/Ik
08Tf5TcmkueI34nPDe24/5Y8R7TDgPXbW2H8DHsd9km+ivHhfXkS1vdD8iSj
yXNE/qZJ1/TdR+5m/Cme6+Y+Xrh9p+c+YdRjp3eyb++T5Dl+yPgZdgqfz9Iu
8gfu+7R7xhHoH/AVN+F55EnYb+h1Mv50EP0v40/0zx76OnkO9Hebbk18/lzy
HC3GzxgPtinXLebPDvtgxBH2bd8x5lvrdzh5DvcVGb8y/hQ6qZ3xp2hXeRLj
YfIkl+i38iTEHUqnykc9L1U+6n3bFz5qSF6nkTxHhY/a3874U+R/K/koeQ7H
zyivPAl81IHteSN5jrheSZ5DPor5LfkoeQ75KHkO+Sh5DvmosLeR8acYf+QN
bK92xp8i/t6uxp925UnOJ88hHyXPEfZ++St5DvkoeQ75KHkO7CfPIR+FfqHf
GAeyPS8nz+H4Kc9h/EmeQz5KnkM+Sp5DPirsyTvIR8lXwGvtbmX8KfKb7cv8
upHxJ3kO40/yHPJR8hxRfvYb9leTjwp/ki9wfb9c5aMamxl/inzLkxjvsX2H
kueo8lGrNT7K8spHyTu4vpc3kI+Sp4BHOlzP+JM8B+MD/d3P8lHyJC/pTys9
9Bv9yfK6vl9KPirmD3mSseQ5wh482548iXzUao2PWqnxUZZXPmqZ9pCPsrzG
nxZz31iew/W9PEeVj1qt8VGmJx+13DOuJM9R5aMWa3zUYo2PkieRj1qo8VHz
NT5qucZH2b7yUfIkub6vxZ9aNT5KvkE+Sp7E9at8g+t7eRL5qKUaH7VY46Na
2JOPatX4KPkR+SjLKx9leiOMf4+xx/q+JV9hXFqeRD5KfsT9D+tXPmoee/JR
8zU+Sp7kNOuYR8lHxe8Pc9877MsbyEct1Pgo61s+Sp5EPmou+Sh5DuJjbXkO
8s/8+SDjEPIcru8jXni3xkfN1/iorN/kOYxTRvqPko+S55CPkudg/4b079b4
qDvJR4W92RofNZd8VOTX9h1JnkN9GunfT30qz6E+rfIcg6QvX+F6eib5qLB3
q8ZHPUo+Ku5/kHwU+8/cN5A8R5QPfXpwu8ZHWd633QdLfeq8GffJR02mPo36
up/6VJ6D8St5DsY32mkWe58kz8H4mDxHfD5L+SdTn8pzxO/Gn+QNJkj/TvJR
8hzx/HDyHFU+ajr5KHmOsPcyeY5I55zrsNSn+E3yUfHcWOrTSH82+Sh5jsi/
+w23Up/Kc1Tj6jdTnzrvsL9O+s3ko4wLUC+5T6c+ZZ+8xkdZXuNzE6lPo72u
pz5lnzD1KevCGh/lPrc8kvXO+v7NPB33y0dNJh8lzxH5f5dyXeW+Rq475KNo
hxofNZJ8lDxHPHeZfacz2LuRPMce7Uo7pj6V51CfynPE/caf5Bj8k195nTxH
fHZ9fzL1aeTzFfuSxsM+O1KfotOSj5LnoHzZz9Snkf5Q8lGOk2SMfXPz/S7j
4Zd8Vp9+fOT6/lt0ygF+wD528lGUq8ZHDVb1afIc8PtvdJDxJ3kO9peS54j0
ruBPXzDP3cw4o/qUcSL5KMc962Gpko9XR/IclLMtzxHpvcV6WJ5juDgO0K8z
LmTc1n3aZ/iNfmr8KdI3bnGOfvScdnp5JM9R5aNekP6JYrsZf4rv3ccfS56D
8S/jMIyPjM/HxAVGe/v4hfUW38uxyEd9Q3nlowYy/sRzGX8yTsf4X+M55AZ4
T+WNPo16+bQtHxXXr2nvt5PnYH6ingb1k7b9yHwZV7HcrtMZFzMuFs9N1HgO
+ajX7Wr86ZTtqh9l/GmxUm75KOdJuRf2yRpyJsmvJM8Rn22viaI+dZ+9ykfp
h4Opo6p8lPuEn7XVwQeVclzLetJP4qoeNM5jPOxWjY8aqcWfrN8zyXOg/47U
LfJRjiP6bdgzPfl9OY3xjAt6X+RjpsZHXcl5zbgV9p2vMv7EfIY9+aipjD8Z
N16kXuP7meSj3FeN7+Ve7iQfRT8r8lEHjAvUf/Icxp/iObmLL/F7yzuY++72
o8jH7eSjwp58wyTP3U8+ynY0/hT3GWdwXJxOPiqem8n4U6RzO8c1eY54jv3K
PfmVq3z/IP1InkN9GvffqvFRM/Zf+V7u/zR5DvmouMqvqE/vZ/wp7DzkKh/1
KONP8hyMT6Q/m/GnsGv9Gg+7m3xUPHcv+ai4PqjxUaYnH/U4+Sh5Dv0uvjfe
z37lwZ2MP0X6pmf86X7Gn+J7y/syeQ7ml+Q5jD/Jczz7/+NA8hxTyXOoT1kv
JR8V6T9IPkqew/hTpC+/8Sp5jvh+KHmOSvxpbyH5qLjKU0zx3GLyUawnM/4U
9yW/4no0+ago/3zGn6L88hvun8qTwKcfypNcZ39DnmQqeQ71aWR3rsZHzeMv
3+Ev84X9weQ5jD9F+5neO8lzVPmoJa43kucw/hTPyZPAR+3PZ/xJniPS4f3S
Zgt7P9+Mbt9KPiraf7HKR+0v5bwtzxG/M281V7AnHyXfcRl/kSfx/VJ5km/x
38WMP0X5La981HLGn+Q5qnzUSo2PWq3xUWu5DmI/K/koeQ75qCj/UpWP2pcn
kY+yvPJRqzU+yvTlo+RJ5KPkSdw/XUo+Kp5bZnx8RX9aqfFR8iTyUaupu9iP
JH/yUaYnH7VR46M2ko+K/C4nH9XP1k9WanzUao2PWksdHO0vTyIfJU8iHyVf
IR8l3yAftVXjo1ZrfNRqjY9aq/FR66lP47pR46NMTz5KnkQ+Sr5CPmq7xket
0T7yUes1Pmq9xkdZXvmozdSn8hxVPmo79ak8R+RPPqpd46PWa3zURo2P2qzx
UVs1PsryqpvlSdw/bVf1aVOeAp2yX1KfEo/BX+SjNmt81Fb5h/5n+SjTk49q
pz6V54j8jSfPoa6R55CPkudQnxKvSj6KeFb5Bn0qz/Hf/evn6GXTP027FMZr
68fy8z5nQ35B/ke+YZrnOqlPo/zbNT6qnfo04sHyGqxz3y9Vffq8pD6NUdL0
xpPniPvR1UNd7M0kzxH+xX7us3byUbG/W1KfynOoT2M/2PKyX7kvT3IxeQ75
qLDXTX0qzxH5m+H9853Up8SDk4/q3/+iJB8lz6E+jfa3/LxPMGt5R5PncB0S
9uRJJpPnkI8KezupTyOfneSj5DmqfFQ3+Sh5Dtdtka9u6tOwJ1+hHpQnUb8/
qfJRe09Sn8ITVPmo0k0+Sp5DPip4Hst3NnmOCh/13N/ho4o8yVTyHBU+aui9
Kh+1300+Ktq/m/o0/NvyvuQ8gp3Up9Hfn1T5qH3TU58+SX0a9uRJ4KMO33Pd
yPgnP+I+8BOu7t/t4PdDNb6C8yWedfP9PdqzGj9tdDN+ij/k+3v4S8ZP8Sf3
X3v4m/wA/t0ljjCUfIXvdeHPvQf95z/W38kf8//TDvsmw/h3cX+5yFdQf+gf
+RnOlziUH+F8id1uz33Z6HYdxk3jpx3iy+xTJV9xgvlJ3oD393aL++/4TZv2
mOoxHmX8lPGK/PG+3IfaP9tjvPO9H/ia0nNfEv4tz5dgPM3zJeDnqudL7G/z
eRK/6GT8lPE891kZ7zN+Kl/B+pT9oJL7WrG/Z3kHiudlhL9cIN61nfHT0A3y
BsTjZvUv9r178iO83/i0kO9B2ktehvhpU97i2Pm2Gj/d38rzJeQrIj3m/2N5
jknWV/oT+1NNeZqL7C96Honv72333FeOfG4Rf/+sLV/B/FPkK9g/YRzzfI4m
+9OeH0Fc5FA+aTzSP7Y+LxK/3O753ma0/xbt+MWRfIXvsclXRHlPF/mKqC/m
/6bndfD+3u4a7UF77Xkeie+5bpE/51vPWyF+2pAncR96g/GF8yX21vEn96fW
fD8Rf5I3UI/4mfhpcyvjp5Hfzdy3j/JvZPw0yu95IJwvcex5IJwv0bS88sjy
HPLaKxk/9byM+N04kvxIEzueN8P5Ei3reyD5CvyX/cRV/dv1UPV8icaK77cW
+Qr6T5GvCHvET/f1pybll1+Bjz6WHxlIvsI4hXxFpP+V68Xq+RKHS77/y/pI
ngJ+vCnfMYFdeZ0x+pPlvUA/Wkm+L9pfnsL4qTzL1235CsbPIl8R9pn/D1q5
bxn25Ck4X+JYfkSezvNQ5JGTn8GfljKuEfVpeX/Xlq/gPe4iX8H6k/4kb4Ae
Sb7CeOVyxk8jv0v4CedLNJYyfhrllyf5+Ei+Iuy9astXRHl9X8705LXnM37q
eRnxmfMldj2P5Ar+JB80jD95/kkj+Qr0BeOzfMc3jM/zGT8Ne3PG12i/x/me
YuRX3sD4qf7k/l2r53v77LdhDz76YL5XfY95LuOncdtj8vsOOu+R8Ufmc8/n
cP9O3uEG5bc9LzM+ex7IecZneZLXMT/sej6H50s8zvipfAXPF/kK7Bf5ivj9
BvPFHfziBumYvnpQfuQd+tdj6tPzJR7le8/yFdRfW74i/NfzJe4avy5VvkJe
ezb1KfvRGT+N9B+lPo1aeJj6lP3u2vkSd1Ofxn2eR+J71bOpT+P7Gf3XfanU
p3Hfw+T74n7Pmxmi3jx/Rb7vjv3LeEHG7eI+eQ7jVtOpT+P7qYyTyFeoT6O+
7qc+jfzeTX0a93k+x++O5CuMn1b5ihOkf8vxq8hXqE+J42LvZsZNf1y5yut4
TsVs6tPI50xVnx54HonxU89VM34qT2K88nrq0/h93PnBfc8q3/fM+h2tcuzu
T8mVZvxUXudT+G/HjYEipxfPGTceky+qvUdpHG0k9WnYvZXnSxAHSn3qvBL3
vUAPXkt9Kl8R+RpA//ner+dLXEx96jhr3PRnlDvsX03dEVfjp5Z3MLm7+P3L
I/kK46fWq/tTxHuT7/PcFfVp2DmVcTfGrSP1aaR7LfVplH8s9anrQvQf++O+
x/Z5W+4kvj9N+oPqS/eFU5/u4Ye0e/IV+hXvlSTfp47HfnJJ6lM51rD3Rdv3
HqI8Z9in9ryMi+W/eI56Ls4z8ftk+SHtHvbGU3dVyz2U+lTuUH0qp+7+lNwo
7VvUIbR/ka8gvp77SJGe+y+NWvx00PVRcmL4Z567iP8eyVfg323njbhfLuRz
yut+kOdlGD+VGzC+LF/RTK6H/kn6cqADzOMfHRk/dR1q/BR/kEPKOAJ+Xqw3
9Sn+lvtT+j3756TveyUXcp+C9XeuG1ifU0/O4+bjVC1+qg6T77uA7rhWy6dx
8ys5Tv2Ufhv1PJyc3B7t5riLHxxZD2HP+OmwXFqNA7hkXCvjp+6Tx+9T6JHf
c3/GjexH9hP7KbqjzEW95Tk6xk+r7w0OJecT9Xop9zXhn4rnZcR9U8V+f8C4
1qJc7F/lPk1cPV9iVO7qyDib8VPGDe43nus5Ep5/ZhzF720nr8blruS6Gv3U
04761LiI50vs4QdyX8zXcn25z2w7hb1bRX1qnMD4aeTD8zJ+f+5VPO/5Z1fx
v9f0b88j+cWm47zckHFrnmd8Nj25HM+v8Dy225lP+Qry73sXtMc7qQN+zThg
v/wF40w853kk7lfKc7hfKb/ifqW8gfHluxk/la+gXdx3sf171XpUn04zznu+
hPXbUA+Xaj+T52C/8tk9/EF9+iDjp+jxjJ8aN+T9rJ77+PG750vczvipfIXj
nudl0D9dT9h/SfdhLX76uBo/3Z1zfCB9eRLPKZMP+h3jzV3nJfSy55GcKPIV
VX36KPt92Jsr6lP5ikr89GDe8RP9LB90lvHmHv7n+ycP8pwu1pNyqa43q/HT
fdPzfRj5EeOD8hTET4/lD0ZZ39zP+Gmk8xB//go9+Ij2+tT3GbDn+x7yI74P
Y/qef2Z66q8W5ZlOvoJxDh7zEf48yPxqeeH7DufQoce+71GNn+5aXvcH5Tnc
P/Uz+v1QvsP46VKeLxH5navGT1vzxOO+PIp2n8d/nOcWMn4adlo5T8fV8srT
yXOo35dzXAx78hbwfYfzVU56f6GoT/u377boN5wv0ZQfOe1+V/J9YW8p+b6w
5/kcjCu7Kxk/DXurPk9/snynmT9avM/M+RIHi8kJx31LnttHubJ8pGt68n2e
RyK/5vkccodrGT+N9l/M+Gm0/xLxL86XOF6Sq/Z9M+x5Hq48h+cFy4+4P7hW
ndeO1yjPTPIV+B/9e6l2LuKyOhudtlI9X6Jh/cr3WV73B9eS72M/OuOn7Fdn
/DSe2+R3dPzxcsZP+350uILegfP+yWrGT6P91zJ+Gu2/nrov7Fle3vc49HwQ
9HvyFXCbu1uOX/Sn1aI+DTtrcu2sU+RZ5JBN3/ejTU/9vpl8X9iTp/D8M3kL
56Vtx3f60xrtw7pidx1+jXVLcwN/fsl5KRupT6P88ivGT00PnbQrP+L5CfIU
nJt13E59Gs+t5/kSUY8bBV2P/tr03EnGZ8srd76d+lS+Iu5Tf5meukGeQc61
pD6N/G7Sv3kv43gTnu4jeK0t4mZw6vvbycHLV0S+LhsPTH1KvLCqT5/Ld8zG
c6WT+jS+34IfUZ9ulz/tP8/5Eo025+14/lk79Snx0OT7Iv/yHp43Js8wRXt2
UrfJV0T9nWd83oaPeE181vL+YpNipD6Vr+D5SP+FPA3vnzzVPjq3J+8B3zfb
TQ66yle8g94o5aMoP3qwpD6N5yyv73t0avpUfsX9StOT7+umPpWviPtu53kZ
0e/g+z4s8BrE94c68IYfeR4D/oI+fW552a8s3dSn/eQ/NH3019AO9cW65v2d
1PXyFerT6N+d8tfRf/DfTtmM/uV5FalPoz3lR3jf49jyEk/f3Ul9GvZ2Up+G
vSc8j+7ef5L6NNq/gz+jT5924R+fR3/qyZPw/4+YlVchvv+B/MgY/iTvgR58
Ks/BuqQn33Ibe54Hcpb9gi7+7L7VTurTuG8n9WnYlSfxXE3Tc50sP6LekR+R
73uP++Xc3yv/B3CLMXs=
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`locDefault$$ = {{
    0.1, 1.3}, {1.9, 0.8}}, $CellContext`m1Sel$$ = 1, $CellContext`m2Sel$$ = 
    1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$3735, $CellContext`qVec -> #]& , \
$CellContext`meshSize$$ = 20, $CellContext`minAngleBetweenLatticeVectors$$ = 
    Rational[1, 6] Pi, $CellContext`minSquaredDistanceFromOrigin$$ = 
    0.1, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
    1.4}}, $CellContext`mMax$$ = 30, $CellContext`moSel$$ = 
    2, $CellContext`mScalarArray$$ = {10, 15, 20}, $CellContext`nArray$$ = {{
    1, 0}, {0, 1}, {1, 1}, {1, -1}}, $CellContext`omegaIndex$$ = 
    1, $CellContext`parametersTab$$ = 3, $CellContext`primaryDisplaySize$$ = {
    380, 380}, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, 
    0.25}, {2.709857394019914, 1.7138642998702553`}}, $CellContext`scale$$ = 
    0.2, $CellContext`springColors$$ = {
     RGBColor[
      Rational[2, 3], 0.33333333333333337`, 0], 
     RGBColor[0, 
      Rational[2, 3], 0], 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
     RGBColor[0, 
      Rational[2, 3], 
      Rational[2, 3]], 
     RGBColor[
      Rational[2, 3], 
      Rational[2, 3], 0]}, $CellContext`springColorsByN$$ = {{-1, 0} -> 
     RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`tabNumber$$ = 3, $CellContext`tau$$ = 
    0.2919310569763184, $CellContext`textDisOffset$$ = {0.25, 
    0.25}, $CellContext`tick$$ = True, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 
    0.8}, {0.9, 0.7}, {0.4, 1.2}, {1.3, 
    1.4}}, $CellContext`windowHalfWidth$$ = 3, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        If[$CellContext`lastNumMasses$$ == 1, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; \
$CellContext`dynamicsControls], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Row[$CellContext`tabNumber$$ = $CellContext`freqTab$$; \
$CellContext`freqControls], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; \
{$CellContext`massSetter, $CellContext`m2Setter, $CellContext`km1, \
$CellContext`km2, $CellContext`km3, $CellContext`km4}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}], 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; \
$CellContext`dynamicsControls], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Row[$CellContext`tabNumber$$ = $CellContext`freqTab$$; \
$CellContext`freqControls], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; \
{$CellContext`massSetter, $CellContext`m2Setter, $CellContext`km1, \
$CellContext`km2, $CellContext`km3, $CellContext`km4, $CellContext`km5}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tau$$], 0}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`meshSize$$], 8}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`minSquaredDistanceFromOrigin$$], 0.1}, 0}, {{
       Hold[$CellContext`minAngleBetweenLatticeVectors$$], Rational[1, 6] Pi},
       0}, {{
       Hold[$CellContext`locDefault$$], {{0.1, 1.3}, {1.9, 0.8}}}, 0}, {{
       Hold[$CellContext`defaultMass$$], 20}, 0}, {{
       Hold[$CellContext`lastNumMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`mScalarArray$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`ld$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`springColorsByN$$], {}}, 0}, {
      Hold[$CellContext`k1$$], 0}, {
      Hold[$CellContext`k2$$], 0}, {
      Hold[$CellContext`k3$$], 0}, {
      Hold[$CellContext`k4$$], 0}, {
      Hold[$CellContext`k5$$], 0}, {{
       Hold[$CellContext`kDefaults$$], {0.25, 0.25, 0.25, 0.25, 0.25}}, 0}, {{
       Hold[$CellContext`kMin$$], 0.05}, 0}, {{
       Hold[$CellContext`kMax$$], 1}, 0}, {{
       Hold[$CellContext`mMax$$], 30}, 0}, {{
       Hold[$CellContext`windowHalfWidth$$], 3}, 0}, {{
       Hold[$CellContext`springColors$$], {
        RGBColor[
         Rational[2, 3], 0.33333333333333337`, 0], 
        RGBColor[0, 
         Rational[2, 3], 0], 
        RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
        RGBColor[0, 
         Rational[2, 3], 
         Rational[2, 3]], 
        RGBColor[
         Rational[2, 3], 
         Rational[2, 3], 0]}}, 0}, {{
       Hold[$CellContext`primaryDisplaySize$$], {380, 380}}, 0}, {{
       Hold[$CellContext`textDisOffset$$], {0.25, 0.25}}, 0}, {{
       Hold[$CellContext`nArray$$], {{1, 0}, {0, 1}, {1, 1}, {1, -1}}}, 0}}, 
    Typeset`size$$ = Automatic, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`defaultMass$$ = 
        20, $CellContext`dynamics$$ = {}, $CellContext`dynPlot$$ = {}, \
$CellContext`dynTab$$ = 
        1, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`k1$$ = 0, $CellContext`k2$$ = 0, $CellContext`k3$$ = 
        0, $CellContext`k4$$ = 0, $CellContext`k5$$ = 
        0, $CellContext`kArray$$ = {}, $CellContext`kDefaults$$ = {0.25, 0.25,
          0.25, 0.25, 0.25}, $CellContext`kMax$$ = 1, $CellContext`kMin$$ = 
        0.05, $CellContext`lastNumMasses$$ = 
        3, $CellContext`ld$$ = {}, $CellContext`locDefault$$ = {{0.1, 1.3}, {
         1.9, 0.8}}, $CellContext`m1Sel$$ = 1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`meshSize$$ = 
        8, $CellContext`minAngleBetweenLatticeVectors$$ = 
        Rational[1, 6] Pi, $CellContext`minSquaredDistanceFromOrigin$$ = 
        0.1, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
         1.4}}, $CellContext`mMax$$ = 30, $CellContext`moSel$$ = 
        2, $CellContext`mScalarArray$$ = {10, 15, 
         20}, $CellContext`nArray$$ = {{1, 0}, {0, 1}, {1, 1}, {
         1, -1}}, $CellContext`omegaIndex$$ = 1, $CellContext`parametersTab$$ = 
        3, $CellContext`primaryDisplaySize$$ = {380, 
         380}, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`scale$$ = 0.2, $CellContext`springColors$$ = {
          RGBColor[
           Rational[2, 3], 0.33333333333333337`, 0], 
          RGBColor[0, 
           Rational[2, 3], 0], 
          RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
          RGBColor[0, 
           Rational[2, 3], 
           Rational[2, 3]], 
          RGBColor[
           Rational[2, 3], 
           Rational[2, 3], 
           0]}, $CellContext`springColorsByN$$ = {}, $CellContext`tabNumber$$ = 
        1, $CellContext`tau$$ = 
        0, $CellContext`textDisOffset$$ = {0.25, 0.25}, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}, $CellContext`windowHalfWidth$$ = 3}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ($CellContext`tick$$; Dynamic[
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics; $CellContext`bRefreshDynamics$$ = 
             False; $CellContext`bRefreshDynPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`showDynamics; $CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynamics[$CellContext`tau$$], 
          
          If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc; $CellContext`bRefreshFreqPlot$$ = False, 
             Null]; $CellContext`showFreqPlot, \
$CellContext`couplingLocator]]]), "Specifications" :> {
        Dynamic[
         If[$CellContext`lastNumMasses$$ == 1, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; \
$CellContext`dynamicsControls], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Row[$CellContext`tabNumber$$ = $CellContext`freqTab$$; \
$CellContext`freqControls], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; \
{$CellContext`massSetter, $CellContext`m2Setter, $CellContext`km1, \
$CellContext`km2, $CellContext`km3, $CellContext`km4}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}], 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; \
$CellContext`dynamicsControls], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Row[$CellContext`tabNumber$$ = $CellContext`freqTab$$; \
$CellContext`freqControls], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; \
{$CellContext`massSetter, $CellContext`m2Setter, $CellContext`km1, \
$CellContext`km2, $CellContext`km3, $CellContext`km4, $CellContext`km5}]}, 
           Dynamic[$CellContext`tabNumber$$], 
           ImageSize -> {250, 350}]]], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tau$$, 0}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`meshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`minSquaredDistanceFromOrigin$$, 0.1}, 0, 
         ControlType -> 
         None}, {{$CellContext`minAngleBetweenLatticeVectors$$, 
          Rational[1, 6] Pi}, 0, ControlType -> 
         None}, {{$CellContext`locDefault$$, {{0.1, 1.3}, {1.9, 0.8}}}, 0, 
         ControlType -> None}, {{$CellContext`defaultMass$$, 20}, 0, 
         ControlType -> None}, {{$CellContext`lastNumMasses$$, 3}, 0, 
         ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`mScalarArray$$, {10, 15, 20}}, 0, ControlType -> 
         None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`ld$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`couplingData$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`springColorsByN$$, {}}, 0, ControlType -> 
         None}, {$CellContext`k1$$, 0, ControlType -> 
         None}, {$CellContext`k2$$, 0, ControlType -> 
         None}, {$CellContext`k3$$, 0, ControlType -> 
         None}, {$CellContext`k4$$, 0, ControlType -> 
         None}, {$CellContext`k5$$, 0, ControlType -> 
         None}, {{$CellContext`kDefaults$$, {0.25, 0.25, 0.25, 0.25, 0.25}}, 
         0, ControlType -> None}, {{$CellContext`kMin$$, 0.05}, 0, 
         ControlType -> None}, {{$CellContext`kMax$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mMax$$, 30}, 0, ControlType -> 
         None}, {{$CellContext`windowHalfWidth$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`springColors$$, {
           RGBColor[
            Rational[2, 3], 0.33333333333333337`, 0], 
           RGBColor[0, 
            Rational[2, 3], 0], 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
           RGBColor[0, 
            Rational[2, 3], 
            Rational[2, 3]], 
           RGBColor[
            Rational[2, 3], 
            Rational[2, 3], 0]}}, 0, ControlType -> 
         None}, {{$CellContext`primaryDisplaySize$$, {380, 380}}, 0, 
         ControlType -> None}, {{$CellContext`textDisOffset$$, {0.25, 0.25}}, 
         0, ControlType -> 
         None}, {{$CellContext`nArray$$, {{1, 0}, {0, 1}, {1, 1}, {1, -1}}}, 
         0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{915., {292., 299.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({{$CellContext`dynamicsMatrix := 
         Module[{$CellContext`cd$, $CellContext`r$, $CellContext`res$, \
$CellContext`epsilon$, $CellContext`m$}, $CellContext`cd$ = SplitBy[
              Sort[
               Flatten[FE`couplingData$$26, 2]], First]; $CellContext`r$ = 
            ReplaceAll["latticeBasis", FE`ld$$26]; $CellContext`epsilon$ = 
            Partition[
              IdentityMatrix[2 FE`lastNumMasses$$26], 2]; $CellContext`res$ = 
            Partition[
              Flatten[
               Table[
                Total[
                 Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r$, 
                   Part[
                   FE`mScalarArray$$26, $CellContext`i], \
$CellContext`epsilon$]& , 
                  Part[$CellContext`cd$, $CellContext`i]]], {$CellContext`i, 
                 FE`lastNumMasses$$26}]], 2 FE`lastNumMasses$$26]; 
           ReplaceAll[$CellContext`res$, $CellContext`qVec -> #]& ], 
         Attributes[$CellContext`cd$] = {Temporary}, 
         Attributes[$CellContext`r$] = {Temporary}, 
         Attributes[$CellContext`res$] = {Temporary}, 
         Attributes[$CellContext`epsilon$] = {Temporary}, 
         Attributes[$CellContext`m$] = {Temporary}, 
         FE`couplingData$$26 = {{{{
             1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{
              0.5, -0.5}, {-0.5, 0.5}}}, {
             1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 
              1.4}, {{0.24615384615384625`, 0.4307692307692308}, {
              0.4307692307692308, 0.7538461538461539}}}}, {{
             2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{
              0.5, -0.5}, {-0.5, 0.5}}}, {
             2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 
              1.4}, {{0.9529411764705882, 0.21176470588235285`}, {
              0.21176470588235285`, 0.047058823529411736`}}}}, {{
             3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 
              1.4}, {{0.24615384615384625`, 0.4307692307692308}, {
              0.4307692307692308, 0.7538461538461539}}}, {
             3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 
              1.4}, {{0.9529411764705882, 0.21176470588235285`}, {
              0.21176470588235285`, 0.047058823529411736`}}}}}, {{{
             1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
              0.09999999999999987}, {{
              0.19999999999999987`, -0.3999999999999999}, \
{-0.3999999999999999, 0.8}}}, {
             1, 2, {-1, 0}, 0.25, 1., {0.9, 0.7}, {
              0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {
              0.48, 0.6400000000000001}}}, {
             1, 2, {-1, 1}, 0.25, 1.6899999999999995`, {0.9, 0.7}, {
              2.1999999999999997`, 0.7}, {{0.9999999999999999, 0.}, {0., 
              0.}}}, {1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
              1., 2.}, {{0.005882352941176467, 0.0764705882352941}, {
              0.0764705882352941, 0.9941176470588234}}}, {
             1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
              0.8, -0.6000000000000001}, {{0.005882352941176467, 
              0.0764705882352941}, {0.0764705882352941, 
              0.9941176470588234}}}, {
             1, 3, {0, -1}, 0.25, 2.2600000000000002`, {0.9, 
              0.7}, {-0.5999999999999999, 0.5999999999999999}, {{
              0.9955752212389379, 0.06637168141592925}, {0.06637168141592925, 
              0.004424778761061955}}}, {
             1, 3, {1, -1}, 0.25, 3.3999999999999995`, {0.9, 
              0.7}, {-0.4999999999999998, 1.9}, {{
              0.5764705882352942, -0.4941176470588236}, {-0.4941176470588236, 
              0.423529411764706}}}, {
             1, 2, {1, 0}, 0.25, 3.4000000000000004`, {0.9, 0.7}, {0.5, 
              2.5}, {{0.047058823529411764`, -0.21176470588235294`}, \
{-0.21176470588235294`, 0.9529411764705882}}}, {
             1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
              0.7}, {-0.8999999999999998, 1.2}, {{
              0.9283667621776504, -0.25787965616045844`}, \
{-0.25787965616045844`, 0.07163323782234958}}}, {
             1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
              2.6999999999999997`, 0.19999999999999996`}, {{
              0.9283667621776504, -0.25787965616045844`}, \
{-0.25787965616045844`, 0.07163323782234958}}}, {
             1, 2, {0, 1}, 0.25, 3.65, {0.9, 0.7}, {2.3, 2.}, {{
              0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
              0.463013698630137}}}, {
             1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 
              2.7}, {{0.05882352941176473, 0.23529411764705888`}, {
              0.23529411764705888`, 0.9411764705882353}}}, {
             1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{
              0.8494117647058823, 0.35764705882352943`}, {
              0.35764705882352943`, 0.15058823529411766`}}}, {
             1, 1, {0, -1}, 0.25, 4.25, {0.9, 
              0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
              0.8494117647058823, 0.35764705882352943`}, {
              0.35764705882352943`, 0.15058823529411766`}}}, {
             1, 3, {-1, -1}, 0.25, 4.520000000000001, {0.9, 
              0.7}, {-0.7, -0.7000000000000002}, {{0.5663716814159291, 
              0.49557522123893794`}, {0.49557522123893794`, 
              0.43362831858407075`}}}, {
             1, 3, {-1, 1}, 0.25, 4.879999999999999, {0.9, 0.7}, {
              3.0999999999999996`, 0.8999999999999999}, {{0.9918032786885246, 
              0.09016393442622948}, {0.09016393442622948, 
              0.008196721311475407}}}, {
             1, 2, {0, -1}, 0.25, 5.85, {0.9, 0.7}, {-1.5, 
              0.3999999999999999}, {{0.9846153846153846, 
              0.1230769230769231}, {0.1230769230769231, 
              0.015384615384615389`}}}, {
             1, 2, {1, -1}, 0.25, 6.289999999999999, {0.9, 0.7}, {-1.4, 
              1.7}, {{
              0.8410174880763116, -0.36565977742448336`}, \
{-0.36565977742448336`, 0.15898251192368842`}}}, {
             1, 3, {0, 1}, 0.25, 7.540000000000002, {0.9, 0.7}, {3.2, 2.2}, {{
              0.7015915119363394, 0.45755968169761274`}, {
              0.45755968169761274`, 0.2984084880636605}}}, {
             1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
              0.4756242568370988, 0.49940546967895366`}, {
              0.49940546967895366`, 0.5243757431629013}}}, {
             1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
              0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
              0.49940546967895366`}, {0.49940546967895366`, 
              0.5243757431629014}}}, {
             1, 2, {-1, -1}, 0.25, 8.81, {0.9, 
              0.7}, {-1.6, -0.9000000000000001}, {{0.7094211123723042, 
              0.4540295119182747}, {0.4540295119182747, 
              0.29057888762769585`}}}, {
             1, 2, {1, 1}, 0.25, 9.009999999999998, {0.9, 0.7}, {2.4, 3.3}, {{
              0.24972253052164267`, 0.4328523862375139}, {0.4328523862375139, 
              0.7502774694783573}}}, {
             1, 3, {1, 1}, 0.25, 13.599999999999998`, {0.9, 0.7}, {3.3, 
              3.5}, {{0.423529411764706, 0.4941176470588236}, {
              0.4941176470588236, 0.5764705882352942}}}}, {{
             2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {
              0.48, 0.6400000000000001}}}, {
             2, 3, {1, -1}, 0.25, 1.2999999999999996`, {0.4, 
              1.2}, {-0.4999999999999998, 1.9}, {{
              0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
              0.376923076923077}}}, {
             2, 3, {0, -1}, 0.25, 1.3599999999999999`, {0.4, 
              1.2}, {-0.5999999999999999, 0.5999999999999999}, {{
              0.7352941176470588, 0.44117647058823534`}, {
              0.44117647058823534`, 0.2647058823529413}}}, {
             2, 1, {1, -1}, 0.25, 1.6899999999999995`, {0.4, 
              1.2}, {-0.8999999999999998, 1.2}, {{0.9999999999999999, 0.}, {
              0., 0.}}}, {
             2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
              2.5}, {{0.005882352941176467, 0.0764705882352941}, {
              0.0764705882352941, 0.9941176470588234}}}, {
             2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
              0.30000000000000004`, -0.10000000000000009`}, {{
              0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
              0.9941176470588234}}}, {
             2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 
              0.09999999999999987}, {{
              0.34594594594594585`, -0.4756756756756756}, \
{-0.4756756756756756, 0.654054054054054}}}, {
             2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
              1.4000000000000001`, 2.7}, {{0.3076923076923076, 
              0.46153846153846145`}, {0.46153846153846145`, 
              0.6923076923076924}}}, {
             2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
              0.8, -0.6000000000000001}, {{
              0.047058823529411764`, -0.21176470588235294`}, \
{-0.21176470588235294`, 0.9529411764705882}}}, {
             2, 2, {1, -1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {-1.4, 
              1.7}, {{0.9283667621776504, -0.25787965616045844`}, \
{-0.25787965616045844`, 0.07163323782234958}}}, {
             2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {
              2.1999999999999997`, 0.7}, {{
              0.9283667621776504, -0.25787965616045844`}, \
{-0.25787965616045844`, 0.07163323782234958}}}, {
             2, 1, {0, -1}, 0.25, 3.65, {0.4, 
              1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
              0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
              0.463013698630137}}}, {
             2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{
              0.8494117647058823, 0.35764705882352943`}, {
              0.35764705882352943`, 0.15058823529411766`}}}, {
             2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 
              0.3999999999999999}, {{0.8494117647058823, 
              0.35764705882352943`}, {0.35764705882352943`, 
              0.15058823529411766`}}}, {
             2, 3, {-1, -1}, 0.25, 4.82, {0.4, 
              1.2}, {-0.7, -0.7000000000000002}, {{0.25103734439834025`, 
              0.4336099585062241}, {0.4336099585062241, 
              0.7489626556016598}}}, {
             2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{
              0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
              0.015384615384615389`}}}, {
             2, 1, {-1, 1}, 0.25, 6.289999999999999, {0.4, 1.2}, {
              2.6999999999999997`, 0.19999999999999996`}, {{
              0.8410174880763116, -0.36565977742448336`}, \
{-0.36565977742448336`, 0.15898251192368842`}}}, {
             2, 3, {-1, 1}, 0.25, 7.379999999999998, {0.4, 1.2}, {
              3.0999999999999996`, 0.8999999999999999}, {{
              0.9878048780487806, -0.10975609756097565`}, \
{-0.10975609756097565`, 0.01219512195121952}}}, {
             2, 2, {1, 1}, 0.25, 8.409999999999998, {0.4, 1.2}, {2.4, 3.3}, {{
              0.4756242568370988, 0.49940546967895366`}, {
              0.49940546967895366`, 0.5243757431629013}}}, {
             2, 2, {-1, -1}, 0.25, 8.41, {0.4, 
              1.2}, {-1.6, -0.9000000000000001}, {{0.4756242568370987, 
              0.49940546967895366`}, {0.49940546967895366`, 
              0.5243757431629014}}}, {
             2, 1, {1, 1}, 0.25, 8.809999999999999, {0.4, 1.2}, {2.9, 2.8}, {{
              0.7094211123723043, 0.4540295119182747}, {0.4540295119182747, 
              0.2905788876276958}}}, {
             2, 3, {0, 1}, 0.25, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
              0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
              0.11312217194570139`}}}, {
             2, 1, {-1, -1}, 0.25, 9.010000000000002, {0.4, 
              1.2}, {-1.1, -1.4000000000000001`}, {{0.24972253052164256`, 
              0.4328523862375138}, {0.4328523862375138, 
              0.7502774694783573}}}, {
             2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{
              0.6138686131386862, 0.48686131386861314`}, {
              0.48686131386861314`, 0.3861313868613139}}}}, {{
             3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
              0.19999999999999998`, -0.39999999999999997`}, \
{-0.39999999999999997`, 0.7999999999999999}}}, {
             3, 2, {-1, 1}, 0.25, 1.2999999999999994`, {1.3, 1.4}, {
              2.1999999999999997`, 0.7}, {{
              0.6230769230769229, -0.48461538461538467`}, \
{-0.48461538461538467`, 0.3769230769230771}}}, {
             3, 2, {0, 1}, 0.25, 1.3599999999999997`, {1.3, 1.4}, {2.3, 
              2.}, {{0.7352941176470587, 0.4411764705882354}, {
              0.4411764705882354, 0.2647058823529413}}}, {
             3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
              1.4000000000000001`, 2.7}, {{0.005882352941176479, 
              0.07647058823529418}, {0.07647058823529418, 
              0.9941176470588236}}}, {
             3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
              0.09999999999999987}, {{0.00588235294117648, 
              0.07647058823529418}, {0.07647058823529418, 
              0.9941176470588234}}}, {
             3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 
              2.5}, {{0.34594594594594597`, -0.47567567567567565`}, \
{-0.47567567567567565`, 0.654054054054054}}}, {
             3, 1, {0, 1}, 0.25, 2.26, {1.3, 1.4}, {2.8, 1.5}, {{
              0.9955752212389379, 0.06637168141592925}, {0.06637168141592925, 
              0.004424778761061955}}}, {
             3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
              0.30000000000000004`, -0.10000000000000009`}, {{
              0.3076923076923077, 0.46153846153846156`}, {
              0.46153846153846156`, 0.6923076923076923}}}, {
             3, 1, {-1, 1}, 0.25, 3.399999999999999, {1.3, 1.4}, {
              2.6999999999999997`, 0.19999999999999996`}, {{
              0.576470588235294, -0.4941176470588235}, {-0.4941176470588235, 
              0.423529411764706}}}, {
             3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.3, 
              1.4}, {-0.4999999999999998, 1.9}, {{
              0.9283667621776504, -0.25787965616045844`}, \
{-0.25787965616045844`, 0.07163323782234958}}}, {
             3, 3, {-1, 1}, 0.25, 3.4899999999999984`, {1.3, 1.4}, {
              3.0999999999999996`, 0.8999999999999999}, {{
              0.9283667621776505, -0.25787965616045855`}, \
{-0.25787965616045855`, 0.07163323782234961}}}, {
             3, 3, {0, 1}, 0.25, 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
              0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
              0.15058823529411772`}}}, {
             3, 3, {0, -1}, 0.25, 4.25, {1.3, 1.4}, {-0.5999999999999999, 
              0.5999999999999999}, {{0.8494117647058823, 
              0.35764705882352943`}, {0.35764705882352943`, 
              0.15058823529411766`}}}, {
             3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {
              0.8, -0.6000000000000001}, {{0.058823529411764705`, 
              0.23529411764705882`}, {0.23529411764705882`, 
              0.9411764705882353}}}, {
             3, 1, {1, 1}, 0.25, 4.52, {1.3, 1.4}, {2.9, 2.8}, {{
              0.5663716814159292, 0.49557522123893805`}, {
              0.49557522123893805`, 0.43362831858407075`}}}, {
             3, 2, {1, 1}, 0.25, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
              0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
              0.7489626556016598}}}, {
             3, 1, {1, -1}, 0.25, 4.879999999999999, {1.3, 
              1.4}, {-0.8999999999999998, 1.2}, {{0.9918032786885246, 
              0.09016393442622948}, {0.09016393442622948, 
              0.008196721311475407}}}, {
             3, 2, {1, -1}, 0.25, 7.380000000000001, {1.3, 1.4}, {-1.4, 
              1.7}, {{0.9878048780487805, -0.10975609756097562`}, \
{-0.10975609756097562`, 0.012195121951219514`}}}, {
             3, 1, {0, -1}, 0.25, 7.539999999999999, {1.3, 
              1.4}, {-0.9999999999999999, -0.10000000000000009`}, {{
              0.7015915119363395, 0.45755968169761274`}, {
              0.45755968169761274`, 0.2984084880636605}}}, {
             3, 3, {1, 1}, 0.25, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{
              0.4756242568370986, 0.49940546967895355`}, {
              0.49940546967895355`, 0.5243757431629014}}}, {
             3, 3, {-1, -1}, 0.25, 8.41, {1.3, 
              1.4}, {-0.7, -0.7000000000000002}, {{0.4756242568370987, 
              0.49940546967895366`}, {0.49940546967895366`, 
              0.5243757431629014}}}, {
             3, 2, {0, -1}, 0.25, 8.84, {1.3, 1.4}, {-1.5, 
              0.3999999999999999}, {{0.8868778280542985, 
              0.3167420814479638}, {0.3167420814479638, 
              0.11312217194570136`}}}, {
             3, 1, {-1, -1}, 0.25, 13.600000000000001`, {1.3, 
              1.4}, {-1.1, -1.4000000000000001`}, {{0.42352941176470593`, 
              0.4941176470588235}, {0.4941176470588235, 
              0.576470588235294}}}, {
             3, 2, {-1, -1}, 0.25, 13.700000000000001`, {1.3, 
              1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
              0.4868613138686131}, {0.4868613138686131, 
              0.38613138686131376`}}}}}}, 
         FE`ld$$26 = {
          "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
           "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
           "latticeUnitVectors" -> {{0.07669649888473705, 
            0.9970544855015816}, {0.9216353751380655, 0.3880570000581329}}, 
           "numberLatticeLinesToDisplay" -> {30, 4}, 
           "reciprocalBasis" -> {{-0.33472803347280333`, 
            0.7949790794979079}, {0.5439330543933054, -0.04184100418410042}}, 
           "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
           "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
           "mObliqueComponents" -> {{0.2552301255230125, 
            0.4602510460251046}, {0.8200836820083681, 0.1673640167364017}, {
            0.6778242677824267, 0.6485355648535565}}, 
           "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
           "pointsDataTable" -> CompressedData["
1:eJxdnUtsXEd2htsSJdESLVMUJbGpF0mR1Fsi2Xy/urop77jKTtvJDCdZJYA3
2Q2XWXgRBHkMM0kwi8DIcgBuJsAA7EU2zigveKXVGDBAwICBsSHDI8WOHLnP
953JvQSE6+6+99TrVNVfdb5bnvzBn/zBjwYajcbJN/+23vx7+82/E2/+7fX/
bvUa3//1nvQWWt//3ewdfP/39ElcD670+l+/2In7GsO9Z9//fbDT+/f+fzR6
fTOzO72/79//0VHY62Lvm3bY6/Z+3b9/qIS9DvYul7DXiXRat3p/9/39zSeR
zrMb8f3hDr9fiXR3d3pL/c/vRvrH3d5bYTDs7nd7v+wn/C9HYa/b+7e+vW/b
Ya/T+9v+7++UsNcJO3uXS9gr5O9WpPv+Dr/fiHwN7ZC/y/H9h93ej/v/cb73
3fd/7W7vj/qfXx/1k3lueX/5q7DX6f0wfm+HPT+fj/Q/LNovYa9Q31Ncu73X
/R+uk6+u+SedLu33DtdO7z+i/EdRj53en0f9tMNewd537bBTevNRvyXsFeu/
LPavbexORblnu72f9j9fx5+yfaM9n3bI9xD+VHph55uj/vcflN5fhf+0w57l
b5R+u+63yd+7pd/uh9th9+BK6dfz8Rbln6L9O/jf9chns0N+L+FPBX8ZinR2
C/ZeRX6etXn+43aUw/K+Ff7b2ia94RLtvkV5x0rY2aS+psLuc8tzDX+yPi9F
vQwV/Pkc/t3unejbe3kU5d/u/WU4Urtfb4dbvR/10z0R6R9vYn+4/Kxf3k3y
N1b67b67Qf6mSLfw+7Ve//6DNs+P4ifb+PNZ6mkbf/76KNptq/c//fb4TbTX
3ib1dZLyb/D5QvSvZ+vYH4v2bKzjD5P093b0m++uUn7rdzTS39+i/t8Ovznc
JJ9fHUX5N/DXT9thbwN7J+nf6zx/AX9aox6a4c+Hq/w+Sb628OerlN/2HcVv
N7lvkHra4PsXMd4crNM+x/SvNco/QH9aI38X8KdV/K+JP61Q/kn82fq9iv9u
kN+Lkf7xOvkbpD7Xsfdl+PPuGvd/Fv68b3lPRfqHpjeCPy1jbzzas7lMfU1y
3aA845R/ne8vkq71e4Z6WsXeFzE/NFaZDz6P8bhl+qdj/Ntbxv5IiXwu8fs4
/rSIvUnKv0Z9j4c/N63vkfCT3VXyeRp/WiFfn4c/Hy7THr8Nfz5eMv+U388X
8adFnh/Hn1p8nqD8q9hr8n3WL/60wn2n8Jtl+uFn4c97S/jfl+HPB4vYO0P5
W7Y//alF/q4yPi/w+wT9aQV7Tcpv+47Qn5bI5wD1uUh9HTN/LuJ/L8Kfd1vU
72D48/6C/QN/mqd8V/GnOco/wX3L2GuS7yX7J+navgPYsXyfMj4vkP5XjM+W
923607zjB/1pDnvXqJ/H2JugPy06PlF+07tAf/LzSepzgXb8JPx53/S+Rl/M
4Y9nQ988e+z4Sv4eOf4yXj4gfxOUv8XzY/iF5R1m3JvnvhPkw/p+zvhseV+2
4/5H5P9czJ+th84/MV8c3Kf9r5WYd+5h7yblX8D/1F+Wdxh/muP+t5gnHveW
+/Y/Por0H+J/r2L+aj3A3jnSv+f8jD/fJX/XY37fu536NPI5h70rlN/yDlMv
j1KfRvoPUp9G+vdTn0a+71K/Q6R/B3uX8Z9Zync95tNn06lP477H2LtC+tbv
u+TjPvc16O/3yD/69OAO9r7Fn2+r30h/JvVp2EO3N27gz1OpT6O+HqQ+jfze
S30a99/l/tdHUf+3zV8jyj/r78zv03w+T/mnUp+GvUnTx79vmj/Sv4s/Xyb9
O6lPo/yzqU8j/Rnrh/Qtb6OoG6hf0p9IfYrfUO83YnxqjKc+jftv43+XSH8m
9WncP536NNKf4vmP2o7zUf5G+RH1/h36NNK/6vqp2G+oF8aD0dSnkf409i/h
z7dSn0b6k6lPf0a/VJ/G79dSn0a+m6lPw47rgjHqb8T+zf3vpj6N+6awf4n0
rd9zpHPd8eUo0hl3/GE+v0L6J6j/Uep3mPSHU58uYJfxj/oZSH1KO6Y+ZV5J
ffpjxknGX9Y3l7D3Cf1pxPGb8fYdx3fKfyb1Ke3q/EB+vzpSn6LT8OdR0r+c
+jSeu5j61HEpvkefvrkvvh8g/ZPYvcB4+IpyNMnvZ9TzBPX5i18dVOphFP+7
mPOW+rSBH1X16Snq6xj/ec28OlDUjdQb+fs41rFv9OkJ6jU+Z/201aeME/jz
RdIfzKvzhOn8mHajnMwPn5LeqWK/C7sjlP8L2nWc8ehb+2WxHNGO49Yz/nyR
ddY31O8Z2ulz2ve3Rz9nXEYftq2nuJ4m/ZekN1L0c/oB+UEXNSbtX/6e7fCM
fhjpPad9T1Nvz9voY/L5ol0td4Nx5kwxX/gd6Q9Z/qJfxe+T1M9oUZ/+BeNs
+PMI+ySf076n8Cf2cd74oX5L+1EvZynvIPPVML9fzCvjIumzz7I3yfg0js5v
4s9ft1kf6S+2q37EuHt8FPPdeer5Bf48wv2DpH/JcYjvx0jvKulf47PtdbOo
T/+u4ocX7E9Fv3IcoX/jz6PZL9ynYHworhu8L9J3nlIP6seT2J2iPcdIf5j8
Xch1CeOb41GJ/ZLfHLmuZHxsq/Oq7TaRfmE9MP5i9xb3mY9pfh/Dny/xvfpr
zH6Bfr1a/gY/D/+0vC/b9pNI5xzlnyraje+nsX+NfM5kvUQ6t3OetR+Gfww7
X1Gut1yHlEeMa/HcJOm+ws8tL/uVrZn0o8jHrDqD9O9wneK5e6R3JedZ9IHr
+qI+jftvFfa/GPemKf83zKez3D/E9Tbp2I/uFssZ39/PemR9UdSn5pP9PdKf
5rmGeqgwLjD+3CZdx9k7pKc+vVf0uzDzgOsN0n/I87brY+pRXTJDe52nvWYp
12vSv4O9n2/Gc3f9nfHnPp/Pc9/DHGfC3iN+Jz/NuWK9xzAyx+/sVx7ctnz0
r7vk91vmhXvln6N+SN/yNrg+wj/epfyPKfcVPs9h7wb1Np/9LK4LRX3KeqGw
f+56gvZUnz4s/xT+Q396rH+xX2F5GZeb88VxKda7pn+T9fsC+aIf7Leoj0uu
p8jfOddb9h/0+1xh/Ye/zBXH8bjO5zwR1wXyN0Y9md5NxsdFnrvl/k9Rn0b9
P8af0ZH7c4x/v4t5dne+/GOMP9G/m5aPeft4QV1K+VvFcSzsLZI/xsndJddh
kc/mcur6uG8efz5Le807/tK/FyjXJ/hPy/Gb6yLXC6S7lPNWXJf4fYJ6Wi72
47C3wnXU/QrnH/bDW+T3q9Adxy32BT5l/8Lysl+5v5Q6Iuwtu87An0xvAn9a
yXE77K0W9Sn7Ofiz+6e25wv6+1L548gY/rycui6ulneEfK2U6v7pKuWdIB9r
fO84t87v7p8ukr8z7ActMd+jg/eX0eWfsf9leqco/2pRd4S9VdIZZ395jfqe
YL9wneenqc+Noj6N/C7jz2fQ9cvlf9GnYWel/Gf/qk4zffdP11znUf51fh8n
XxtcnYc2uE5TL5vkd4T+tII/n8afVov6NKp9DXtfhD8fr6U+jfpcT30a9jZS
B4W9zdSnYW8LezP0zy3KNeJ+Mu1zivlirUQ8z3WS9fsl86flVZdvpi4Ne5v4
81W+30p9GvW2nTogru1S0afNderD/dP18oeR8fDnw43Up1H+zdSnUX7LO4o/
bZfq/ul26rKw13ZfKJ4rJfUp8QjGv5P402Z5HP0b/b7FOuErxuct0nub63bq
07i2yR/6tFlSn4Y/l6JuiPyW1KfEa/Dnk8ZzytfoU+I97PN9TfzG8p3FXpv8
Uj9PC79fi/R7hfxNxfezndSJ/ec+6KQ+jfu28ecT+NN26tOoZ8v7Ev8pNX1a
Up/GfaZ3jXx1Up/G9x3um+W5Lv7Ffu5um/Z7Kz4PldSn/fvft35ftfvj0HPL
y35l6aQ+7af/YYd02K8c6qY+DXtd8jcb49rzburTaI+CP7NfeVjKB337HxEP
6KQ+jfa0/EO0l+Vlv3K3W9w/DXtd/Bl92txxnxV/2kl9Gt2mlG8jg0fEk8uf
9Z//F3iDTu4DEI92nyfS/6Cb+jTsdckfevDpTurTsLfD87P405PUp/F9p/yg
//k1ekd7/7oZ6XTx59fsv5u+69Qd8nuZdCz/DXTBE+zd4vsn5G+W556kPo3+
3y3wDaEHP+ymPo348g72GrT/TlWfPt9JfRp3mR769MMnqU/D3nvYu4299/Cv
6cjPvvzIBHrDz83kOeL5EeLv8iQDyXMYfwp73Yw/hRl5kkHGQ3mD0ejnu/Ik
08Tf5TcmkueI34nPDe24/5Y8R7TDgPXbW2H8DHsd9km+ivHhfXkS1vdD8iSj
yXNE/qZJ1/TdR+5m/Cme6+Y+Xrh9p+c+YdRjp3eyb++T5Dl+yPgZdgqfz9Iu
8gfu+7R7xhHoH/AVN+F55EnYb+h1Mv50EP0v40/0zx76OnkO9Hebbk18/lzy
HC3GzxgPtinXLebPDvtgxBH2bd8x5lvrdzh5DvcVGb8y/hQ6qZ3xp2hXeRLj
YfIkl+i38iTEHUqnykc9L1U+6n3bFz5qSF6nkTxHhY/a3874U+R/K/koeQ7H
zyivPAl81IHteSN5jrheSZ5DPor5LfkoeQ75KHkO+Sh5DvmosLeR8acYf+QN
bK92xp8i/t6uxp925UnOJ88hHyXPEfZ++St5DvkoeQ75KHkO7CfPIR+FfqHf
GAeyPS8nz+H4Kc9h/EmeQz5KnkM+Sp5DPirsyTvIR8lXwGvtbmX8KfKb7cv8
upHxJ3kO40/yHPJR8hxRfvYb9leTjwp/ki9wfb9c5aMamxl/inzLkxjvsX2H
kueo8lGrNT7K8spHyTu4vpc3kI+Sp4BHOlzP+JM8B+MD/d3P8lHyJC/pTys9
9Bv9yfK6vl9KPirmD3mSseQ5wh482548iXzUao2PWqnxUZZXPmqZ9pCPsrzG
nxZz31iew/W9PEeVj1qt8VGmJx+13DOuJM9R5aMWa3zUYo2PkieRj1qo8VHz
NT5qucZH2b7yUfIkub6vxZ9aNT5KvkE+Sp7E9at8g+t7eRL5qKUaH7VY46Na
2JOPatX4KPkR+SjLKx9leiOMf4+xx/q+JV9hXFqeRD5KfsT9D+tXPmoee/JR
8zU+Sp7kNOuYR8lHxe8Pc9877MsbyEct1Pgo61s+Sp5EPmou+Sh5DuJjbXkO
8s/8+SDjEPIcru8jXni3xkfN1/iorN/kOYxTRvqPko+S55CPkudg/4b079b4
qDvJR4W92RofNZd8VOTX9h1JnkN9GunfT30qz6E+rfIcg6QvX+F6eib5qLB3
q8ZHPUo+Ku5/kHwU+8/cN5A8R5QPfXpwu8ZHWd633QdLfeq8GffJR02mPo36
up/6VJ6D8St5DsY32mkWe58kz8H4mDxHfD5L+SdTn8pzxO/Gn+QNJkj/TvJR
8hzx/HDyHFU+ajr5KHmOsPcyeY5I55zrsNSn+E3yUfHcWOrTSH82+Sh5jsi/
+w23Up/Kc1Tj6jdTnzrvsL9O+s3ko4wLUC+5T6c+ZZ+8xkdZXuNzE6lPo72u
pz5lnzD1KevCGh/lPrc8kvXO+v7NPB33y0dNJh8lzxH5f5dyXeW+Rq475KNo
hxofNZJ8lDxHPHeZfacz2LuRPMce7Uo7pj6V51CfynPE/caf5Bj8k195nTxH
fHZ9fzL1aeTzFfuSxsM+O1KfotOSj5LnoHzZz9Snkf5Q8lGOk2SMfXPz/S7j
4Zd8Vp9+fOT6/lt0ygF+wD528lGUq8ZHDVb1afIc8PtvdJDxJ3kO9peS54j0
ruBPXzDP3cw4o/qUcSL5KMc962Gpko9XR/IclLMtzxHpvcV6WJ5juDgO0K8z
LmTc1n3aZ/iNfmr8KdI3bnGOfvScdnp5JM9R5aNekP6JYrsZf4rv3ccfS56D
8S/jMIyPjM/HxAVGe/v4hfUW38uxyEd9Q3nlowYy/sRzGX8yTsf4X+M55AZ4
T+WNPo16+bQtHxXXr2nvt5PnYH6ingb1k7b9yHwZV7HcrtMZFzMuFs9N1HgO
+ajX7Wr86ZTtqh9l/GmxUm75KOdJuRf2yRpyJsmvJM8Rn22viaI+dZ+9ykfp
h4Opo6p8lPuEn7XVwQeVclzLetJP4qoeNM5jPOxWjY8aqcWfrN8zyXOg/47U
LfJRjiP6bdgzPfl9OY3xjAt6X+RjpsZHXcl5zbgV9p2vMv7EfIY9+aipjD8Z
N16kXuP7meSj3FeN7+Ve7iQfRT8r8lEHjAvUf/Icxp/iObmLL/F7yzuY++72
o8jH7eSjwp58wyTP3U8+ynY0/hT3GWdwXJxOPiqem8n4U6RzO8c1eY54jv3K
PfmVq3z/IP1InkN9GvffqvFRM/Zf+V7u/zR5DvmouMqvqE/vZ/wp7DzkKh/1
KONP8hyMT6Q/m/GnsGv9Gg+7m3xUPHcv+ai4PqjxUaYnH/U4+Sh5Dv0uvjfe
z37lwZ2MP0X6pmf86X7Gn+J7y/syeQ7ml+Q5jD/Jczz7/+NA8hxTyXOoT1kv
JR8V6T9IPkqew/hTpC+/8Sp5jvh+KHmOSvxpbyH5qLjKU0zx3GLyUawnM/4U
9yW/4no0+ago/3zGn6L88hvun8qTwKcfypNcZ39DnmQqeQ71aWR3rsZHzeMv
3+Ev84X9weQ5jD9F+5neO8lzVPmoJa43kucw/hTPyZPAR+3PZ/xJniPS4f3S
Zgt7P9+Mbt9KPiraf7HKR+0v5bwtzxG/M281V7AnHyXfcRl/kSfx/VJ5km/x
38WMP0X5La981HLGn+Q5qnzUSo2PWq3xUWu5DmI/K/koeQ75qCj/UpWP2pcn
kY+yvPJRqzU+yvTlo+RJ5KPkSdw/XUo+Kp5bZnx8RX9aqfFR8iTyUaupu9iP
JH/yUaYnH7VR46M2ko+K/C4nH9XP1k9WanzUao2PWksdHO0vTyIfJU8iHyVf
IR8l3yAftVXjo1ZrfNRqjY9aq/FR66lP47pR46NMTz5KnkQ+Sr5CPmq7xket
0T7yUes1Pmq9xkdZXvmozdSn8hxVPmo79ak8R+RPPqpd46PWa3zURo2P2qzx
UVs1PsryqpvlSdw/bVf1aVOeAp2yX1KfEo/BX+SjNmt81Fb5h/5n+SjTk49q
pz6V54j8jSfPoa6R55CPkudQnxKvSj6KeFb5Bn0qz/Hf/evn6GXTP027FMZr
68fy8z5nQ35B/ke+YZrnOqlPo/zbNT6qnfo04sHyGqxz3y9Vffq8pD6NUdL0
xpPniPvR1UNd7M0kzxH+xX7us3byUbG/W1KfynOoT2M/2PKyX7kvT3IxeQ75
qLDXTX0qzxH5m+H9853Up8SDk4/q3/+iJB8lz6E+jfa3/LxPMGt5R5PncB0S
9uRJJpPnkI8KezupTyOfneSj5DmqfFQ3+Sh5Dtdtka9u6tOwJ1+hHpQnUb8/
qfJRe09Sn8ITVPmo0k0+Sp5DPip4Hst3NnmOCh/13N/ho4o8yVTyHBU+aui9
Kh+1300+Ktq/m/o0/NvyvuQ8gp3Up9Hfn1T5qH3TU58+SX0a9uRJ4KMO33Pd
yPgnP+I+8BOu7t/t4PdDNb6C8yWedfP9PdqzGj9tdDN+ij/k+3v4S8ZP8Sf3
X3v4m/wA/t0ljjCUfIXvdeHPvQf95z/W38kf8//TDvsmw/h3cX+5yFdQf+gf
+RnOlziUH+F8id1uz33Z6HYdxk3jpx3iy+xTJV9xgvlJ3oD393aL++/4TZv2
mOoxHmX8lPGK/PG+3IfaP9tjvPO9H/ia0nNfEv4tz5dgPM3zJeDnqudL7G/z
eRK/6GT8lPE891kZ7zN+Kl/B+pT9oJL7WrG/Z3kHiudlhL9cIN61nfHT0A3y
BsTjZvUv9r178iO83/i0kO9B2ktehvhpU97i2Pm2Gj/d38rzJeQrIj3m/2N5
jknWV/oT+1NNeZqL7C96Honv72333FeOfG4Rf/+sLV/B/FPkK9g/YRzzfI4m
+9OeH0Fc5FA+aTzSP7Y+LxK/3O753ma0/xbt+MWRfIXvsclXRHlPF/mKqC/m
/6bndfD+3u4a7UF77Xkeie+5bpE/51vPWyF+2pAncR96g/GF8yX21vEn96fW
fD8Rf5I3UI/4mfhpcyvjp5Hfzdy3j/JvZPw0yu95IJwvcex5IJwv0bS88sjy
HPLaKxk/9byM+N04kvxIEzueN8P5Ei3reyD5CvyX/cRV/dv1UPV8icaK77cW
+Qr6T5GvCHvET/f1pybll1+Bjz6WHxlIvsI4hXxFpP+V68Xq+RKHS77/y/pI
ngJ+vCnfMYFdeZ0x+pPlvUA/Wkm+L9pfnsL4qTzL1235CsbPIl8R9pn/D1q5
bxn25Ck4X+JYfkSezvNQ5JGTn8GfljKuEfVpeX/Xlq/gPe4iX8H6k/4kb4Ae
Sb7CeOVyxk8jv0v4CedLNJYyfhrllyf5+Ei+Iuy9astXRHl9X8705LXnM37q
eRnxmfMldj2P5Ar+JB80jD95/kkj+Qr0BeOzfMc3jM/zGT8Ne3PG12i/x/me
YuRX3sD4qf7k/l2r53v77LdhDz76YL5XfY95LuOncdtj8vsOOu+R8Ufmc8/n
cP9O3uEG5bc9LzM+ex7IecZneZLXMT/sej6H50s8zvipfAXPF/kK7Bf5ivj9
BvPFHfziBumYvnpQfuQd+tdj6tPzJR7le8/yFdRfW74i/NfzJe4avy5VvkJe
ezb1KfvRGT+N9B+lPo1aeJj6lP3u2vkSd1Ofxn2eR+J71bOpT+P7Gf3XfanU
p3Hfw+T74n7Pmxmi3jx/Rb7vjv3LeEHG7eI+eQ7jVtOpT+P7qYyTyFeoT6O+
7qc+jfzeTX0a93k+x++O5CuMn1b5ihOkf8vxq8hXqE+J42LvZsZNf1y5yut4
TsVs6tPI50xVnx54HonxU89VM34qT2K88nrq0/h93PnBfc8q3/fM+h2tcuzu
T8mVZvxUXudT+G/HjYEipxfPGTceky+qvUdpHG0k9WnYvZXnSxAHSn3qvBL3
vUAPXkt9Kl8R+RpA//ner+dLXEx96jhr3PRnlDvsX03dEVfjp5Z3MLm7+P3L
I/kK46fWq/tTxHuT7/PcFfVp2DmVcTfGrSP1aaR7LfVplH8s9anrQvQf++O+
x/Z5W+4kvj9N+oPqS/eFU5/u4Ye0e/IV+hXvlSTfp47HfnJJ6lM51rD3Rdv3
HqI8Z9in9ryMi+W/eI56Ls4z8ftk+SHtHvbGU3dVyz2U+lTuUH0qp+7+lNwo
7VvUIbR/ka8gvp77SJGe+y+NWvx00PVRcmL4Z567iP8eyVfg323njbhfLuRz
yut+kOdlGD+VGzC+LF/RTK6H/kn6cqADzOMfHRk/dR1q/BR/kEPKOAJ+Xqw3
9Sn+lvtT+j3756TveyUXcp+C9XeuG1ifU0/O4+bjVC1+qg6T77uA7rhWy6dx
8ys5Tv2Ufhv1PJyc3B7t5riLHxxZD2HP+OmwXFqNA7hkXCvjp+6Tx+9T6JHf
c3/GjexH9hP7KbqjzEW95Tk6xk+r7w0OJecT9Xop9zXhn4rnZcR9U8V+f8C4
1qJc7F/lPk1cPV9iVO7qyDib8VPGDe43nus5Ep5/ZhzF720nr8blruS6Gv3U
04761LiI50vs4QdyX8zXcn25z2w7hb1bRX1qnMD4aeTD8zJ+f+5VPO/5Z1fx
v9f0b88j+cWm47zckHFrnmd8Nj25HM+v8Dy225lP+Qry73sXtMc7qQN+zThg
v/wF40w853kk7lfKc7hfKb/ifqW8gfHluxk/la+gXdx3sf171XpUn04zznu+
hPXbUA+Xaj+T52C/8tk9/EF9+iDjp+jxjJ8aN+T9rJ77+PG750vczvipfIXj
nudl0D9dT9h/SfdhLX76uBo/3Z1zfCB9eRLPKZMP+h3jzV3nJfSy55GcKPIV
VX36KPt92Jsr6lP5ikr89GDe8RP9LB90lvHmHv7n+ycP8pwu1pNyqa43q/HT
fdPzfRj5EeOD8hTET4/lD0ZZ39zP+Gmk8xB//go9+Ij2+tT3GbDn+x7yI74P
Y/qef2Z66q8W5ZlOvoJxDh7zEf48yPxqeeH7DufQoce+71GNn+5aXvcH5Tnc
P/Uz+v1QvsP46VKeLxH5navGT1vzxOO+PIp2n8d/nOcWMn4adlo5T8fV8srT
yXOo35dzXAx78hbwfYfzVU56f6GoT/u377boN5wv0ZQfOe1+V/J9YW8p+b6w
5/kcjCu7Kxk/DXurPk9/snynmT9avM/M+RIHi8kJx31LnttHubJ8pGt68n2e
RyK/5vkccodrGT+N9l/M+Gm0/xLxL86XOF6Sq/Z9M+x5Hq48h+cFy4+4P7hW
ndeO1yjPTPIV+B/9e6l2LuKyOhudtlI9X6Jh/cr3WV73B9eS72M/OuOn7Fdn
/DSe2+R3dPzxcsZP+350uILegfP+yWrGT6P91zJ+Gu2/nrov7Fle3vc49HwQ
9HvyFXCbu1uOX/Sn1aI+DTtrcu2sU+RZ5JBN3/ejTU/9vpl8X9iTp/D8M3kL
56Vtx3f60xrtw7pidx1+jXVLcwN/fsl5KRupT6P88ivGT00PnbQrP+L5CfIU
nJt13E59Gs+t5/kSUY8bBV2P/tr03EnGZ8srd76d+lS+Iu5Tf5meukGeQc61
pD6N/G7Sv3kv43gTnu4jeK0t4mZw6vvbycHLV0S+LhsPTH1KvLCqT5/Ld8zG
c6WT+jS+34IfUZ9ulz/tP8/5Eo025+14/lk79Snx0OT7Iv/yHp43Js8wRXt2
UrfJV0T9nWd83oaPeE181vL+YpNipD6Vr+D5SP+FPA3vnzzVPjq3J+8B3zfb
TQ66yle8g94o5aMoP3qwpD6N5yyv73t0avpUfsX9StOT7+umPpWviPtu53kZ
0e/g+z4s8BrE94c68IYfeR4D/oI+fW552a8s3dSn/eQ/NH3019AO9cW65v2d
1PXyFerT6N+d8tfRf/DfTtmM/uV5FalPoz3lR3jf49jyEk/f3Ul9GvZ2Up+G
vSc8j+7ef5L6NNq/gz+jT5924R+fR3/qyZPw/4+YlVchvv+B/MgY/iTvgR58
Ks/BuqQn33Ibe54Hcpb9gi7+7L7VTurTuG8n9WnYlSfxXE3Tc50sP6LekR+R
73uP++Xc3yv/B3CLMXs=
            "], "lineTable" -> {{
              Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
              Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
              Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
              Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
              Line[{{-3., -39.}, {3., 39.}}], 
              Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
              Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
              Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
              Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
              Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
              
              Line[{{-10.5, -40.900000000000006`}, {
               4.699999999999999, -34.5}}], 
              
              Line[{{-10.4, -39.6}, {
               4.799999999999999, -33.199999999999996`}}], 
              
              Line[{{-10.3, -38.300000000000004`}, {
               4.8999999999999995`, -31.900000000000002`}}], 
              Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
              Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
              
              Line[{{-10., -34.400000000000006`}, {
               5.199999999999999, -28.000000000000004`}}], 
              
              Line[{{-9.9, -33.1}, {
               5.299999999999999, -26.700000000000003`}}], 
              
              Line[{{-9.8, -31.8}, {
               5.3999999999999995`, -25.400000000000002`}}], 
              Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
              Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
              Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
              Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
              
              Line[{{-9.3, -25.3}, {
               5.8999999999999995`, -18.900000000000002`}}], 
              Line[{{-9.2, -24.}, {6., -17.6}}], 
              Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
              Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
              Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
              
              Line[{{-8.8, -18.8}, {
               6.3999999999999995`, -12.400000000000002`}}], 
              Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
              Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
              Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
              Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
              
              Line[{{-8.299999999999999, -12.3}, {
               6.8999999999999995`, -5.8999999999999995`}}], 
              Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
              Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
              Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
              
              Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
               7.3, -0.7000000000000002}}], 
              
              Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
               0.6000000000000001}}], 
              Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
              Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
              Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
              
              Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
               5.800000000000001}}], 
              
              Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
               7.1000000000000005`}}], 
              Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
              Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
              Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
              Line[{{-6.8999999999999995`, 5.8999999999999995`}, {
               8.299999999999999, 12.3}}], 
              Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
              Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
              Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
              Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
              
              Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 
               18.8}}], 
              Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
              Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
              Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
              Line[{{-6., 17.6}, {9.2, 24.}}], 
              
              Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 
               25.3}}], 
              Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
              Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
              Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
              Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
              
              Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 
               31.8}}], 
              Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
              
              Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
               34.400000000000006`}}], 
              Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
              Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
              
              Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
               38.300000000000004`}}], 
              Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
              Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
              Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, FE`lastNumMasses$$26 = 
         3, $CellContext`oneTermOfdynamicsMatrix[{
            Pattern[$CellContext`k$, 
             Blank[Integer]], 
            Pattern[$CellContext`j$, 
             Blank[Integer]], 
            Pattern[$CellContext`mVec$, 
             Blank[List]], 
            Pattern[$CellContext`kS$, 
             Blank[]], 
            Blank[], 
            Blank[], 
            Blank[], 
            Pattern[$CellContext`proj$, 
             Blank[List]]}, 
           Pattern[$CellContext`r$, 
            Blank[List]], 
           Pattern[$CellContext`mk$, 
            Blank[]], 
           Pattern[$CellContext`epsilon$, 
            Blank[List]]] := $CellContext`kS$ 
          Dot[$CellContext`proj$, 
            Part[$CellContext`epsilon$, $CellContext`k$]/$CellContext`mk$ - 
            Part[$CellContext`epsilon$, $CellContext`j$] (E^(I Dot[
                 
                 Dot[$CellContext`mVec$, $CellContext`r$], \
$CellContext`qVec])/
             Sqrt[$CellContext`mk$ 
              Part[FE`mScalarArray$$26, $CellContext`j$]])], 
         Attributes[$CellContext`k$] = {Temporary}, 
         Attributes[$CellContext`j$] = {Temporary}, 
         Attributes[$CellContext`mVec$] = {Temporary}, 
         Attributes[$CellContext`kS$] = {Temporary}, 
         Attributes[$CellContext`proj$] = {Temporary}, 
         Attributes[$CellContext`mk$] = {Temporary}, 
         FE`mScalarArray$$26 = {0.25, 15, 20}, $CellContext`calcDynamics := 
         Map[{
            Sqrt[
             Part[#, 1]], 
            Part[#, 2]}& , 
           Transpose[
            Eigensystem[
             FE`matrix$$26[FE`qLoc$$26]]]], FE`matrix$$26 = 
         ReplaceAll[$CellContext`res$3069, $CellContext`qVec -> #]& , 
         Attributes[$CellContext`res$3069] = {
          Temporary}, $CellContext`res$3069 = {{
           9.98914070933026 + 
            0.25 (0. + 
              0.4756242568370987 (4. - 4. 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.8494117647058823 (4. - 4. 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9283667621776504 (4. - 4. 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.005882352941176467 (4. - 4. 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.005882352941176467 (4. - 4. 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9283667621776504 (4. - 4. 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.8494117647058823 (4. - 4. 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4756242568370988 (4. - 4. 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 2.286898342107176 + 
            0.25 (0. + 
              0.49940546967895366` (4. - 4. 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.35764705882352943` (4. - 4. 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.25787965616045844` (4. - 4. 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.0764705882352941 (4. - 4. 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.0764705882352941 (4. - 4. 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.25787965616045844` (4. - 4. 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.35764705882352943` (4. - 4. 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.49940546967895366` (4. - 4. 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 0. + 
            0.25 (0. + 
              0.7094211123723042 (0. - 0.5163977794943222 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9846153846153846 (0. - 0.5163977794943222 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.8410174880763116 (0. - 0.5163977794943222 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.36 (0. - 0.5163977794943222 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.5 (0. - 0.5163977794943222 
                E^(I Dot[{0., 0.}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.047058823529411764` (0. - 0.5163977794943222 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9999999999999999 (0. - 0.5163977794943222 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.5369863013698629 (0. - 0.5163977794943222 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.24972253052164267` (0. - 0.5163977794943222 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 0. + 
            0.25 (0. + 
              0.4540295119182747 (0. - 0.5163977794943222 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.1230769230769231 (0. - 0.5163977794943222 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.36565977742448336` (0. - 0.5163977794943222 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.48 (0. - 0.5163977794943222 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.5 (0. - 0.5163977794943222 
               E^(I Dot[{0., 0.}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.21176470588235294` (0. - 0.5163977794943222 
               E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4986301369863013 (0. - 0.5163977794943222 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4328523862375139 (0. - 0.5163977794943222 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 0. + 
            0.25 (0. + 
              0.5663716814159291 (0. - 0.4472135954999579 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9955752212389379 (0. - 0.4472135954999579 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.5764705882352942 (0. - 0.4472135954999579 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.19999999999999987` (0. - 0.4472135954999579 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.24615384615384625` (0. - 0.4472135954999579 
                E^(I Dot[{0., 0.}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.05882352941176473 (0. - 0.4472135954999579 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9918032786885246 (0. - 0.4472135954999579 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.7015915119363394 (0. - 0.4472135954999579 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.423529411764706 (0. - 0.4472135954999579 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 0. + 
            0.25 (0. + 
              0.49557522123893794` (0. - 0.4472135954999579 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.06637168141592925 (0. - 0.4472135954999579 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.4941176470588236 (0. - 0.4472135954999579 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.3999999999999999 (0. - 0.4472135954999579 
               E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4307692307692308 (0. - 0.4472135954999579 
                E^(I Dot[{0., 0.}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.23529411764705888` (0. - 0.4472135954999579 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.09016393442622948 (0. - 0.4472135954999579 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.45755968169761274` (0. - 0.4472135954999579 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4941176470588236 (0. - 0.4472135954999579 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])))}, {
           2.286898342107176 + 
            0.25 (0. + 
              0.49940546967895366` (4. - 4. 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.35764705882352943` (4. - 4. 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.25787965616045844` (4. - 4. 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.0764705882352941 (4. - 4. 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.0764705882352941 (4. - 4. 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.25787965616045844` (4. - 4. 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.35764705882352943` (4. - 4. 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.49940546967895366` (4. - 4. 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 8.010859290669739 + 
            0.25 (0. + 
              0.5243757431629014 (4. - 4. 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.15058823529411766` (4. - 4. 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.07163323782234958 (4. - 4. 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9941176470588234 (4. - 4. 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9941176470588234 (4. - 4. 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.07163323782234958 (4. - 4. 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.15058823529411766` (4. - 4. 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.5243757431629013 (4. - 4. 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 0. + 
            0.25 (0. + 
              0.4540295119182747 (0. - 0.5163977794943222 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.1230769230769231 (0. - 0.5163977794943222 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.36565977742448336` (0. - 0.5163977794943222 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.48 (0. - 0.5163977794943222 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.5 (0. - 0.5163977794943222 
               E^(I Dot[{0., 0.}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.21176470588235294` (0. - 0.5163977794943222 
               E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4986301369863013 (0. - 0.5163977794943222 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4328523862375139 (0. - 0.5163977794943222 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 0. + 
            0.25 (0. + 
              0.29057888762769585` (0. - 0.5163977794943222 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.015384615384615389` (0. - 0.5163977794943222 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.15898251192368842` (0. - 0.5163977794943222 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.6400000000000001 (0. - 0.5163977794943222 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.5 (0. - 0.5163977794943222 
                E^(I Dot[{0., 0.}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9529411764705882 (0. - 0.5163977794943222 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.463013698630137 (0. - 0.5163977794943222 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.7502774694783573 (0. - 0.5163977794943222 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 0. + 
            0.25 (0. + 
              0.49557522123893794` (0. - 0.4472135954999579 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.06637168141592925 (0. - 0.4472135954999579 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.4941176470588236 (0. - 0.4472135954999579 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. - 
              0.3999999999999999 (0. - 0.4472135954999579 
               E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4307692307692308 (0. - 0.4472135954999579 
                E^(I Dot[{0., 0.}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.23529411764705888` (0. - 0.4472135954999579 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.09016393442622948 (0. - 0.4472135954999579 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.45755968169761274` (0. - 0.4472135954999579 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.4941176470588236 (0. - 0.4472135954999579 
                E^(I Dot[{2., 2.1}, $CellContext`qVec]))), 0. + 
            0.25 (0. + 
              0.43362831858407075` (0. - 0.4472135954999579 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.004424778761061955 (0. - 0.4472135954999579 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.423529411764706 (0. - 0.4472135954999579 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.8 (0. - 0.4472135954999579 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.7538461538461539 (0. - 0.4472135954999579 
                E^(I Dot[{0., 0.}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.9411764705882353 (0. - 0.4472135954999579 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.008196721311475407 (0. - 0.4472135954999579 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.2984084880636605 (0. - 0.4472135954999579 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec]))) + 
            0.25 (0. + 
              0.5764705882352942 (0. - 0.4472135954999579 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])))}, {
           0. + 0.25 (0. - 0.1289561602510793 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.2772985336462661 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.5163977794943221 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.024301071976203396` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.2581988897471611 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.18590320061795598` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.4342995633584999 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.5084531982713326 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.36634348715544995` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.22352401110187084` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.2574914955286757 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.10935482389291529` 
               E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.2581988897471611 E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.24787093415727465` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.18882589711239128` 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.06355664978391659 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.23445983177948793` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0.18222267958263078` + 
            0.25 (0. + 
              0.4756242568370987 (1/15 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.8494117647058823 (1/15 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.9283667621776504 (1/15 - 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/
                15)) + 0.25 (0. + 
              0.005882352941176467 (1/15 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.005882352941176467 (1/15 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.9283667621776504 (1/15 - 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/
                15)) + 0.25 (0. + 
              0.8494117647058823 (1/15 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.4756242568370988 (1/15 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/15)), 
            0.03654683848153319 + 
            0.25 (0. + 
              0.49940546967895366` (1/15 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.35764705882352943` (1/15 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/15)) + 
            0.25 (0. - 
              0.25787965616045844` (1/15 - 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.0764705882352941 (1/15 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.0764705882352941 (1/15 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/15)) + 
            0.25 (0. - 
              0.25787965616045844` (1/15 - 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.35764705882352943` (1/15 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.49940546967895366` (1/15 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/15)), 0. + 
            0.25 (0. - 0.014493647836503056` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.042452225675707785` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.03597336292643053 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.019973198501695162` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.05501808447571729 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.017764623667373098` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.05703094122482891 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.051203915276546004` 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.03544172090426828 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.0250344826266871 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.025471335405424674` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.02797928227611264 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.027463147939830845` 
               E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.012226240994603836` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.026646935501059652` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.006336771247203213 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.01828711259876643 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.028108951062005873` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec]))}, {
           0. + 0.25 (0. - 0.22352401110187084` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.2574914955286757 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.10935482389291529` 
               E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.2581988897471611 E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.24787093415727465` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.18882589711239128` 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.06355664978391659 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.23445983177948793` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.3874416192432428 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.23909924584805606` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.4920967075181188 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.2581988897471611 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.3304945788763663 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.0820982161358223 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.007944581222989574 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.15005429233887227` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0.03654683848153319 + 
            0.25 (0. + 
              0.49940546967895366` (1/15 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.35764705882352943` (1/15 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/15)) + 
            0.25 (0. - 
              0.25787965616045844` (1/15 - 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.0764705882352941 (1/15 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.0764705882352941 (1/15 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/15)) + 
            0.25 (0. - 
              0.25787965616045844` (1/15 - 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.35764705882352943` (1/15 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.49940546967895366` (1/15 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/15)), 
            0.11777732041736921` + 
            0.25 (0. + 
              0.5243757431629014 (1/15 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.15058823529411766` (1/15 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.07163323782234958 (1/15 - 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/
                15)) + 0.25 (0. + 
              0.9941176470588234 (1/15 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.9941176470588234 (1/15 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.07163323782234958 (1/15 - 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/
                15)) + 0.25 (0. + 
              0.15058823529411766` (1/15 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/15)) + 
            0.25 (0. + 
              0.5243757431629013 (1/15 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/15)), 0. + 
            0.25 (0. - 0.0250344826266871 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.025471335405424674` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.02797928227611264 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.027463147939830845` 
               E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.012226240994603836` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.026646935501059652` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.006336771247203213 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.01828711259876643 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.028108951062005873` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.04324137908245953 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.015282801243254809` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.021761663992532057` 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.03776182841726742 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.0027169424432452968` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.039970403251589494` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.0007040856941336905 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.0065311116424165835` 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.022293306014694314` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec]))}, {
           0. + 0.25 (0. - 0.18940811103527633` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.313761262625302 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.44354791029094187` 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.026306682088232818` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.11008334658460507` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.08944271909999157 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.25780548446468154` 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.4452347742809315 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.2532891160353744 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.22097612954115567` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.20462691040780567` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.04032253729917652 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.10522672835293127` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.19264585652305882` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.17888543819998315` E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.22097612954115567` 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.02968231828539546 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.2216279765309526 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.03544172090426828 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.051203915276546 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.05703094122482889 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.017764623667373105` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.05501808447571729 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.019973198501695166` 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.03597336292643052 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.04245222567570778 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.014493647836503053` 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.028108951062005873` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.01828711259876643 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.0063367712472032125` 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.026646935501059656` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.012226240994603836` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.027463147939830852` E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.027979282276112644` 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.025471335405424674` 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.0250344826266871 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0.13081072754147838` + 
            0.25 (0. + 
              0.4756242568370987 (1/20 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.8494117647058823 (1/20 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.9283667621776504 (1/20 - 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/
                20)) + 0.25 (0. + 
              0.00588235294117648 (1/20 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.005882352941176479 (1/20 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.9283667621776505 (1/20 - 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/
                20)) + 0.25 (0. + 
              0.8494117647058822 (1/20 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.4756242568370986 (1/20 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/20)), 
            0.033217246264685175` + 
            0.25 (0. + 
              0.49940546967895366` (1/20 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.35764705882352943` (1/20 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. - 
              0.25787965616045844` (1/20 - 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.07647058823529418 (1/20 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.07647058823529418 (1/20 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. - 
              0.25787965616045855` (1/20 - 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.3576470588235295 (1/20 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.49940546967895355` (1/20 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/20))}, {
           0. + 0.25 (0. - 0.22097612954115567` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.20462691040780567` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.04032253729917652 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.10522672835293127` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.19264585652305882` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.17888543819998315` E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.22097612954115567` 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.02968231828539546 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.2216279765309526 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.25780548446468154` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.13345233287465588` 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.003665685209016047 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.4209069134117251 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.3371302489153529 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.3577708763999663 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.18940811103527636` 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.001978821219026366 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.1939244794645835 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.028108951062005873` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.01828711259876643 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.0063367712472032125` 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.026646935501059656` 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.012226240994603836` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.027463147939830852` E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. + 
              0.027979282276112644` 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.025471335405424674` 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.0250344826266871 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0. + 
            0.25 (0. - 0.022293306014694307` 
              E^(I Dot[{-2., -2.1}, $CellContext`qVec])) + 
            0.25 (0. - 0.006531111642416583 
              E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.0007040856941336902 
              E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.03997040325158949 
              E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.0027169424432452968` 
              E^(I Dot[{0., 0.}, $CellContext`qVec])) + 
            0.25 (0. - 0.03776182841726742 
              E^(I Dot[{0.1, 1.3}, $CellContext`qVec])) + 
            0.25 (0. - 0.021761663992532064` 
              E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])) + 
            0.25 (0. - 0.015282801243254809` 
              E^(I Dot[{1.9, 0.8}, $CellContext`qVec])) + 
            0.25 (0. - 0.04324137908245953 
              E^(I Dot[{2., 2.1}, $CellContext`qVec])), 0.033217246264685175` + 
            0.25 (0. + 
              0.49940546967895366` (1/20 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.35764705882352943` (1/20 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. - 
              0.25787965616045844` (1/20 - 
               E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.07647058823529418 (1/20 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.07647058823529418 (1/20 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. - 
              0.25787965616045855` (1/20 - 
               E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.3576470588235295 (1/20 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.49940546967895355` (1/20 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/20)), 
            0.09418927245852161 + 
            0.25 (0. + 
              0.5243757431629014 (1/20 - 
                E^(I Dot[{-2., -2.1}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.15058823529411766` (1/20 - 
                E^(I Dot[{-1.9, -0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.07163323782234958 (1/20 - 
                E^(I Dot[{-1.7999999999999998`, 0.5}, $CellContext`qVec])/
                20)) + 0.25 (0. + 
              0.9941176470588234 (1/20 - 
                E^(I Dot[{-0.1, -1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.9941176470588236 (1/20 - 
                E^(I Dot[{0.1, 1.3}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.07163323782234961 (1/20 - 
                E^(I Dot[{1.7999999999999998`, -0.5}, $CellContext`qVec])/
                20)) + 0.25 (0. + 
              0.15058823529411772` (1/20 - 
                E^(I Dot[{1.9, 0.8}, $CellContext`qVec])/20)) + 
            0.25 (0. + 
              0.5243757431629014 (1/20 - 
                E^(I Dot[{2., 2.1}, $CellContext`qVec])/20))}}, 
         FE`qLoc$$26 = {2.709857394019914, 
          1.7138642998702553`}, $CellContext`showDynamics := 
         Module[{$CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`e$, \
$CellContext`omega$, $CellContext`points$, $CellContext`lines$, \
$CellContext`nu$, $CellContext`a$, $CellContext`b$}, {{$CellContext`a$, \
$CellContext`b$}, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$} = 
            ReplaceAll[{
              "latticeBasis", "pointsDataTable", 
               "numberLatticeLinesToDisplay", "lineTable"}, 
              FE`ld$$26]; {$CellContext`omega$, $CellContext`e$} = 
            Part[FE`dynamics$$26, FE`omegaIndex$$26]; $CellContext`e$ = 
            Partition[$CellContext`e$, 2]; $CellContext`points$ = 
            Table[Part[$CellContext`pointsDataTable$, $CellContext`k] + 
              Table[FE`scale$$26 
                Re[Part[$CellContext`e$, $CellContext`k] 
                  E^(I (Dot[
                    FE`qLoc$$26, $CellContext`a$ $CellContext`i + \
$CellContext`b$ $CellContext`j] - $CellContext`omega$ #))], {$CellContext`i, -
                 Part[$CellContext`numberLatticeLinesToDisplay$, 1], 
                 
                 Part[$CellContext`numberLatticeLinesToDisplay$, 
                  1]}, {$CellContext`j, -
                 Part[$CellContext`numberLatticeLinesToDisplay$, 2], 
                 
                 Part[$CellContext`numberLatticeLinesToDisplay$, 
                  2]}]& , {$CellContext`k, 
               FE`lastNumMasses$$26}]; $CellContext`nu$ = 
            2 Pi If[$CellContext`omega$ == 0, 1, 1/$CellContext`omega$]; Show[{
              Table[
               ListPlot[
                
                Part[$CellContext`points$, $CellContext`k][$CellContext`nu$ \
#], PlotRange -> {{-FE`windowHalfWidth$$26/2, FE`windowHalfWidth$$26}, {-
                   FE`windowHalfWidth$$26/2, FE`windowHalfWidth$$26}}, 
                ImageSize -> FE`primaryDisplaySize$$26, PlotStyle -> Directive[
                  PointSize[
                   Sqrt[
                   Part[FE`mScalarArray$$26, $CellContext`k] FE`mMax$$26^(-1)/
                    500]], 
                  $CellContext`massColors[$CellContext`k]]], {$CellContext`k, 
                FE`lastNumMasses$$26}], 
              Graphics[{$CellContext`lines$}]}]& ], 
         Attributes[$CellContext`pointsDataTable$] = {Temporary}, 
         Attributes[$CellContext`numberLatticeLinesToDisplay$] = {Temporary}, 
         Attributes[$CellContext`e$] = {Temporary}, 
         Attributes[$CellContext`omega$] = {Temporary}, 
         Attributes[$CellContext`points$] = {Temporary}, 
         Attributes[$CellContext`lines$] = {Temporary}, 
         Attributes[$CellContext`nu$] = {Temporary}, 
         Attributes[$CellContext`a$] = {Temporary}, 
         Attributes[$CellContext`b$] = {Temporary}, 
         FE`dynamics$$26 = {{
           4.252297410602208 - 7.662528307386322*^-18 I, {
            0.7567023120566828 + 0. I, 0.6536029291122348 - 
             0.0001788943020059129 I, 0.005513403043112809 - 
             0.006194280064333546 I, 0.010269020739239649` - 
             0.0005721127599694941 I, -0.0006658911669672943 - 
             0.0024069783901113214` I, 0.004347537578404993 + 
             0.0022594519710096702` I}}, {
           3.270521621873675 - 7.813658163506356*^-18 
            I, {-0.6536399915383492 - 0.00030637975529804493` I, 
             0.7564975686173675 + 0. I, 0.003256977929828838 - 
             0.0008990047821220681 I, 0.007237115969763234 + 
             0.010521287294565352` I, -0.004858597163317104 + 
             0.003876192727992754 I, 0.015352686842074033` + 
             0.004155838151900385 I}}, {
           0.5491705598395172 + 
            2.8759744577514037`*^-17 I, {-0.0028973296180442656` - 
             0.00713994273289795 I, -0.012703105191830388` + 
             0.00007408609889859082 I, 0.8304589138114189 + 0. I, 
             0.552502955658702 - 0.005624697661006539 I, -0.03509157769386804 + 
             0.02172083167383089 I, 0.043639015120719854` + 
             0.0349072280482927 I}}, {
           0.4834516529528866 + 2.2031212624217096`*^-17 I, {
            0.0019785320193494273` - 0.004792200044745708 
             I, -0.0068707367667282075` + 
             0.005890375666124598 I, -0.11977230334395164` + 
             0.06343242790301373 I, 0.17808910747442724` - 
             0.027580609846519673` I, 0.7469913109945034 + 0. I, 
             0.6252903786805657 - 0.007851274436092764 I}}, {
           0.4246452038294519 - 3.202379125037765*^-17 I, {
            0.0008085168640870573 - 0.0020318936957042983` 
             I, -0.00966825946493522 + 
             0.009037332441233942 I, -0.5138010755481991 - 
             0.006292959583686919 I, 0.7381521269591975 + 
             0. I, -0.39867220214229376` - 0.025188250378835375` I, 
             0.16731804121388238` - 0.05788834379024049 I}}, {
           0.33902251461154426` + 2.6141663296856393`*^-17 I, {
            0.007383051140891514 + 
             0.0032762347654724075` I, -0.009792489351295406 - 
             0.0005369756479460383 I, 0.1645604519653952 + 
             0.027882667624232332` I, -0.34204996226455503` - 
             0.0098404202480495 I, -0.5291889647502656 + 
             0.025317326497841963` I, 0.7577625301873101 + 0. I}}}, 
         FE`omegaIndex$$26 = 1, FE`scale$$26 = 0.2, FE`windowHalfWidth$$26 = 
         3, FE`primaryDisplaySize$$26 = {380, 380}, FE`mMax$$26 = 
         30, $CellContext`massColors := Part[
           Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
           1]& , $CellContext`frequencyPlotCalc := 
         Module[{$CellContext`eigTable2D$, $CellContext`eigTable1D$, \
$CellContext`qMax$, $CellContext`omegaPointList2D$, \
$CellContext`omegaPointList1D$, $CellContext`range$}, $CellContext`qMax$ = 
            ReplaceAll["qMaxVec", FE`ld$$26]; $CellContext`eigTable2D$ = 
            Flatten[
              Re[
               Table[{{$CellContext`qx, $CellContext`qy}, 
                 Eigenvalues[
                  N[
                   
                   FE`matrix$$26[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax$, 1]/2, Part[$CellContext`qMax$, 1]/
                 2, Part[$CellContext`qMax$, 1]/
                 FE`meshSize$$26}, {$CellContext`qy, -
                 Part[$CellContext`qMax$, 2]/2, Part[$CellContext`qMax$, 2]/2,
                  Part[$CellContext`qMax$, 2]/FE`meshSize$$26}]], 
              1]; $CellContext`omegaPointList2D$[
              Pattern[$CellContext`nn$, 
               Blank[]]] := Map[Flatten[{
                Part[#, 1], 
                Part[
                 Sqrt[
                  
                  Part[#, 
                   2]], $CellContext`nn$]}]& , $CellContext`eigTable2D$]; \
$CellContext`range$ = Range[2 FE`lastNumMasses$$26]; ListPlot3D[
             Map[$CellContext`omegaPointList2D$[#]& , $CellContext`range$], 
             PlotRange -> Full, ImageSize -> FE`primaryDisplaySize$$26, 
             AxesLabel -> {
              "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
               "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
         Attributes[$CellContext`eigTable2D$] = {Temporary}, 
         Attributes[$CellContext`eigTable1D$] = {Temporary}, 
         Attributes[$CellContext`qMax$] = {Temporary}, 
         Attributes[$CellContext`omegaPointList2D$] = {Temporary}, 
         Attributes[$CellContext`omegaPointList1D$] = {Temporary}, 
         Attributes[$CellContext`range$] = {Temporary}, FE`meshSize$$26 = 8, 
         Attributes[$CellContext`nn$] = {
          Temporary}, $CellContext`showFreqPlot := 
         Module[{$CellContext`aa$, $CellContext`bb$}, {$CellContext`aa$, \
$CellContext`bb$} = FE`qPlaneLoc$$26; Show[{FE`freqPlot$$26, 
              Graphics3D[
               Polygon[{{
                  Part[$CellContext`aa$, 1], 
                  Part[$CellContext`aa$, 2], 0}, {
                  Part[$CellContext`bb$, 1], 
                  Part[$CellContext`bb$, 2], 0}, {
                  Part[$CellContext`bb$, 1], 
                  Part[$CellContext`bb$, 2], 1}, {
                  Part[$CellContext`aa$, 1], 
                  Part[$CellContext`aa$, 2], 1}}]]}]], 
         Attributes[$CellContext`aa$] = {Temporary}, 
         Attributes[$CellContext`bb$] = {Temporary}, 
         FE`qPlaneLoc$$26 = {{-2.709857394019914, -1.7138642998702553`}, {
          2.709857394019914, 1.7138642998702553`}}, FE`freqPlot$$26 = 
         Graphics3D[
           GraphicsComplex[CompressedData["
1:eJyEnXV0lkf3tQMleRI0wa24uxUN3MElSHD34lrc3bW4W3B3hwYPLnEIEbwQ
IDjFv35vz577ffZ5u375h7VmzZpn5ozs2Rf3zGTv1K9Rl4QuLi5JvVxcfvr7
30Y/rzt0aafrqfpLI//62utLwKoVq3xaJfTyQXr5fRuOffv9XYD7+NNu3TJ5
+jjnjwvo5Tf9c0Su5Cbd7z/pkQHedbZ8eVctmUl3kb9tuWaebZ9B5bfKTl65
onQyu/y6/5RvPXu5atVeh6qPdTPqdP6TQ7yoPl+sKU1e991Y1cvne+hftZpX
cTHtmp4764YZYzxNOto14m3P5unTeFL+uIDvL0skXOxrp6Ndzb4eLTrhJ7t8
tCtT8zaLygZ5cX5rS9GiI6ZUSGnS0a6flqz54Z8wJdfHulJzy9S3DVX9reBP
X0Krrkd83gegXbNvhozJMNhOR7uuD/2zXssnnD8uIOhCm+MJN3mZdLQr/Ej5
W93zpzTpaNfl849PeKRJyfmt8x3m79jZ1y4H7Zq+usOMDctUfaxbHTvnTJFa
1d9aH1ovbmxBTx+//6Q/Mu1K5f7Hs03f7HS062bMXJfFXb0of1zAws9DVh5q
aKejXTWWvau2aaFdDtq1cvDlkue/JOf81u6wL/Hb2yUz6WjXnC8FPsb5JeP6
WGO35On54c/kXH8rcWqvmzVnefrg99CurP3rxl0o4WXS0a42X3uEtVzP+eMC
iv6S3/15ZHKTjnZlTvxgcKkGSU06/obkfjbtcpkknN/i/GhXYSof7frf9fli
of7SXgvtQnuRjnZRfCy0a75zPC20i+Jv/Ut/Ib9F/WuhXTQeLLNuOI8f1N/C
eGvyz/g07fKX8Yl0tAvj2Tl/XADGP9LRLswXpPP8ovwW5iPS0a6bMn+pPtZV
me9Ufwvrg6wnPmgX1hOko120/vigXQmd1ysftIvWNzNeaD1EfovWTx+0i9Zb
1Mei9Rn1t7Cey/pv2oX1H+lm3XDWC9Mu0hfTLtIj0y7SL9Mu0jvTrr7O+mja
RXpq2sX6i3b1HjqkoqNAYqXLrSo9f7u9qofS5ZfBZc5/++ZQulzjiUfzrRvc
lC7PPBGSrN5jV6XL5RoHXLfuuCpdrn90x6CHZdyULn+PP1I08qKb0uVsLSsv
2tTOoXT5wI636ybNT6x0OXWP9WP37vRQuvx4x5Nu92a6K13++rlJjX03HEqX
J1bbM8R/hkPp8unkzwtuXu1Quuz3x+OYku8dSpeXv4vaN3Cou9Llhyvcfi+U
yEPpsuPrvbRuxTyULo8cU8AzKMBd6XKqswVnXSrlrnTZK+u4FElOO5Qurw9o
nKjPeIfS5S63or3LzHYoXV6XesmcSy7uSpcvV+83YNgHrs/f6+Hgy783z5pY
6XKnc8Wznl7lULq8YHCa3F/TOJQuL472rLV6mJvS5Wez8hTa/NZV6XL2Xzee
9TvsqnT5e/VEk64mclO6/KT/xAnXUqr6WP1yjmpdarC70uUHO/IlnLDIQ+ly
6cYDPrW76FC6nPXriQdvz7gpXT48o23Xn4/Y6wLate10sTOv7yRSujw20ZJi
RUYl4vwW50e7TlD5aNf/rs8XC/VnXUZ7WZcpPka/KJ5Gvyj+Rr+ov4x+Uf8a
/VrmPB6MftH4MfqF8ca67Cnjk3UZ45l1eYOMf9blvjJfWJcxv1iXMR9Zl5PL
/GVdHibznXUZ6wPrMtYT1mVaf4x++TqvV0a/aH0z44XWQ6NftH4a/XrovN4a
/aL12egX1nPWZaz/rMukF3a7nPXFtIv0yLSL9Mu0i/TOtOuVsz6adpGemnax
/qJdpz/Vy3l9/j2LdXnLw3wN/dzsdLRr9Ya6e+f9EWuxLv/V7dHCVbvtdLTr
TdaSvssCVX7rbe6gaaky2uWjXT6LF259FKjqY7VcNHzT85L3Ldblb8d7vt/7
6p7Fupzi18x7Gre209Gu+JDYgXWKcv64gJ0DvpTuX99OR7sS3Wi4J9F1Ox3t
+uXNu9ahC+5zfutrHve3bh4PLNbl8/G9B4WG3ef6WDPKxD72ynuf6295rPjV
PcVExMHWZZ+6jSvdaGino12jDrVu5XKK88cFRA2uusNn5H2LdTnXvdcrtn+1
09Guyv610h2OUvmty1tuJbhcxE5Hu2IGlv80e7SqjzW2yczcJYqp+lsrHq+r
ceCXexbrcr/StafUXmano11tKzmqxWW4b7Eu/+q4cWRbUjsd7Qp8FRG1qKtd
DtqVaOe2Cwfvx3J+q2eFVe8f7LPT0a7Ormf/eL0jlutjjU5Z6tqwm7Fcf2vj
/OsLG3jfM+sv2rXjz7Utx++z09Guixfaj2r1C+ePCxhT2HNcwf2xJh3tSjz2
zSv/SXY6/hqtrFss73CV3+L8aNcEKh/t+t/1+WKh/qzLaC/rMsXH6FcX53ga
/aL4m9+n/jL6Rf1r9KuD83gw+kXjx+gXxhvr8moZn6zLE2Q8sy7fl/HPuhwk
84V1GfOLdTmnzEfW5bsyf1mXR8h8Z12uJusD6zLWE9ZlWn+Mfl1yXq+MftH6
ZvSL1kOjX7R+Gv3a67zeGv2i9dnoF9Zz1mWs/6zLpBemXZWc9cW0i/TItIv0
y7SL9M60a42zPpp2kZ6adrH+ol0j6m8pGfMqWunyzKFvvP2G3lW6fGV1g+05
4iOULg+efbJ3o2vhSpevHT87pGJmld+6FF2zRM6Ud5UuL1nQJaTNPlUf63Gn
CeW71oxRuux6JfPRN2lilC4nLh+S7PueKKXLfrELv2euF6V0OfXLDqXCLkQp
XX6xK/hozkfRSpfLNN5YIO/ZGKXLvi+fjGyXMFbpcnz9n/98dzNG6XLD3c9y
vciu6m851r11ffcjSunyvttN3r4cE6V0+c72sIqJJkQrXQ7t6Ve35sgYpcsV
hm49cv1ljNLlnR6XrUMvVX5rba/V25b/GqN0eX6+1sUa+UQrXe6z5uIvv7dX
9bdS1c6T4UDNKKXLaUL/arDyXLTS5QfzPlbbXiFG6fKAdqHzrGwxSpcdVpq1
saeilC73uN6x9JEjt5Uuh26cuzxoQLjS5V19hp168yRc6bJfw+BtYWG3lS7H
lJh7Pu5RlNLltd+blh5dKUbp8vbuP3ZOrRCtdDnm/fY+G/fcVro8rdlhzyrv
wpQu7y7xIKzCgzCly5wf7Yql8tGu/12fLxbqz7qM9rIuU3yMfu10jqfRL4q/
+X3qL6Nf1L9Gv/o7jwejXzR+jH5hvLEup5HxybrcW8Yz6/JiGf+sy+tkvrAu
75f5xbqM+ci6HCLzl3UZ8511eb+sD6zLWE9Yl2n9MfoV57xeGf2i9c3oF62H
Rr9o/TT6ldV5vTX6Reuz0S+s56zLWP9Zl0kvTLtIX0y7SI9Mu0i/TLtI70y7
Ljvro2kX6alpF+sv2rVnwKFUnQtHKl2e9G3c3S8Bt5Uun7o6o/ut5mFKl8+c
iO1VL3mo0uXAoW0++ZdR+a3FHeqVmesernT5XqfGjdN3Cle6nC40taPW8XCl
y+Xyn3/QMXGE0uV6Lq1ndt8XqXR5rV/NLseucf64gES3EyRL5BaudHnAlKkT
x34PU7rc4ZXLg99rqfzWvL+2D9i6PVzp8ovAPteWZo9Qupxu0YtX13eq+lsN
fpmfplev20qXn3Z8t2rrw9tKl4v6p/nxPDXnjwvIeXJPmtwDI5Quz300dfS2
l+FKl98uHv6m8shwpct+tVN5fcoYrnS5XMzdbkduhyldHhTZL937+uFKlx+e
fDqlSvY7SperJMq29222CKXLKS6trlclNlzpcuIbw98tmhOudNm/auPmY8qG
K12e7RGUIENImNLlcR+8L9X/KVTp8qtD6xsm/xKidPnirjajfYtHaF2usuTg
M+uO0uU2d6yEj26EK12e2nlH/k21wpUuuzWafvyRa7jS5ckpWs/Oseu60l9O
R/25HNT/f//uFwv1VPor7WL9pTgYnXrjHDejUxRn8/vUL0anqB+NTjmc+93o
FI0To1MYV6y/f8o4ZP0dIuOW9beCjHPWX8wL1l/MI9bfOTLvWH9zyTxl/S0u
85r195msA6y/WDdYf2mdMToV77wuGZ2idczoFK17RqdonTQ65eq8rhqdonXY
6BTWbdZfrPOsv6QLpl2kI6ZdpDumXaRTpl2ka6ZdAc46aNpFumnaxTqLdv3s
V2b0zH2hSn8/dpg08fqAUK2/9zbue5QvROlvwKS6na56XFX6+9u+Sp1LNLqs
9LfGtriNU5dfVfr702ePQ2s63lD6u/924LNkQ24p/f1a9Ecd/5TBSn+n70sU
UW5ZqNLfRk2L+u5vEKr0d+CRA8fjeoUo/V3+4E4Ov/hgpb/LOx1c5XIvWOnv
E+/MtW4/C1b6e7ZX3mJD04Yo/d3geuphi24hSn9LXB/ZZXBoiNJfr4fdl7b3
ClX6W/eP51MGruT8cQFjg6Z1fV4iROlvtQLpZzf5u56sv39mT1j+aWCw0t/7
3qd3TzgTrPT32Yrk9Sc8Dlb6+6Jtrhx1bqr6W617n52Sa1So0t/k7gELS18I
Vvpb9XOXDd9bBCn9XX69z8rBY28q/Y2+HDusQ8drSn+L754cNzDqstLftHua
Lp/vf1H74ja+Wa+1uKn0N2/Tj4+2fQpR+jvueLphLeaFKv09dOZNtip/x5/1
d3iBOu1y1Lil9Ldkk6oHchS5pPT3yvErf54ffUzpL6ebfRGVg/r/79/9YqGe
rL9oF+svxcHoFMXN6BTF2fw+9YvRKepH+/+Lnfvd6BSNE6NTGFesv61kHLL+
vpZxy/obJ+Oc9fexzAvW30cyj1h/a8i8Y/0dJ/OU9ddX5jXrL9YB1l+sG6y/
tM4YnfrDeV0yOkXrmNEpWveMTtE6aXRqsPO6anSK1mH7Oy5Zt1l/sc6z/pIu
mHZ9/OSkI6ZdpDumXaRTpl2ka7b+OuugaRfppmkXdHbLp6tjPf9KeKpa7lMt
R3//GFCrcf/Qv+p6+iC9mDU905icrwN+Kjti0piSdjraW7l82t1Wek+fL/+J
2yszHvx6XyrV4Si+e9Tf+6EcxKfUkqFjE7ZLYdIr/Kf8hwGZUzvGeb5MbtIR
t0HZ5+z8ujEFpV8JaBYY4J7B3S4f8Tzy7vcKg/p5+tT6T31CTX0yeLvGlU7v
5VOP5im+t9zya+1c3hm+BFSX+Gy//tOn1/vMd4wBFeh7Zud2fQlY0KHdgAGn
7HLM+D+4NajsGLsc/i6a2mUV6Dtq6eF4To+0+t95NKNdLi9TPvqr6/5kW4ba
33kGlOPyJT/i/+edwHZX/7LzIx3fYzv3+0Or9tzHSVaus9MxDj+cWV2/wGQv
au/DgIUdZw4+08R8Fwpds8uX/GZf2mrEuMGL7fz8HTiNT6vnsT2p95zger6z
rqc82KLFr3b5vjJOPk313X/zm12+L5cv+TF+BszJnn/dWzs/0vF9LM0jKygu
eqxLMi8eD1ahzUP8B7319HEJ+898Cagi4+qV1TjzuDeePs2ddN/+zty5v74E
JPky3CtoOPeX/b09yse4ulHQe/PHPF6mfP5eHeU3lfF29POMTLXypaT2HvA2
7XXuL6vMxQ6pMoaq/jLf4aM+JWR8Fj9a9P3UzHZ9Gsl4wHfRyI9xuD/26fa7
I+389Sk/6lNOxmeGJzUnLOpp16eOjE98/4z8GLcXMrqcz1lfjU+TH/UpI+P5
0O2IQ3NP2vWp8y/1x7hNsTXdTEd7Oz/Sa8r34ahPcRnPBQYm8rj6Xs1HVX8z
zkMmN02wX60n5lwD6tNexn/wp7kHNwbb4+2f/j1zYrV8x478GOf1XLoWHHKJ
87u4ID+tk1bQzt2jtrZW66SpD41n6/iTDbEdu6nxbM5ftPln3Q6oIfOlbMKF
HcbdxPf/50548zkFp/Hz9zgVPXIeP/b8QvmYF2lfjor7mMjLlK/OQTjH07p8
rULOWkNUPL1XUTwxL1LkqRWUIIUnjwdrr5wvQH2KynwZNrJ/uWmf7faWpfog
v/n/kcvV/cLa2/mRXgznKaQ+pWW+1IxPFTIviV2fWjLefpdzEMiPedEw84fJ
GaukoPUqzpor+VEfzJf4ZZNy1U9g18eX6oP8mBdNszwe63MiucmP9J9xTsR5
PbGWxfyVZfLf+Z3jadeH1kPL69CQFjOmpeD10JyXQX0qy3yJCggLGbUxmalP
HaoP8mNezKjXKjowg50f6UNx/sV5/bdelD82vKCfWv/tczrO49kKG7Q76kFr
NZ5Nfuxzqsp8KTmtYvDNJZ5mn1NPxj/yO4+fLwHYFzmPH/t8EMrHvKi/5Y/J
z5LY5fP5GpSP+ZLq+wDvCr5JKT7HvHE+iMaD1bV/fIlXYXZ+PjeE+kBf8oz4
ceuGbwpTHxkPAQtkPDjvA+MCOqbf9qNX2uS0D7TPAaE+lWS+hCacWtrzpl2f
ZlQf5Me8aCvlIz+fb0J9ysp8CZfyUZ+6VB/kx7zoIvFxbq99Xgn1KSLzJYfE
h9YTi9cTzIt60r+0Hpr8qE8NmS8ppX+d62/XB/kxL6bJfEF+pONcFa3/FsYz
rf+q/pgXqc/sajs1htdD+7wY/Av05aXMR/iXinSuinxEQBopn3yEmV8oH/PC
U9YflM/ntlB+K5kvd2X9cY7PHm/Eh8aD1VjWTxoP5jwa6gN9wfqJ+pTB/lDq
4+zv4gKw/jv7u7iAabI/ofFsrRvbPdxvuD0fsR/Dfgn5MS8WiX7R+Df5UR9L
5ksN0S/Up5WMt3Oy/0R+zIvkor/I70f5UR/sx6C/tD6o+mNeYP9A66E534f6
YD/2e4sBd4p2suvzT/+eP3FJ9tvIj3nhK/sx5/wuLshP679VRvZLtP4bn7vh
n/2Y8b/wF1//5Vwb8leW+YL9HvL7yvjHOT7iAwHQL+ID5jwjyje+WPa3X4kj
4TwgxdOatvuFS0QTL46nN8cT8yK57M9pPFhh4gdRn5IyX3qMGu/VMomXqU9j
Gf8J5ByiczzjAs6Lv/hKvAv5UR/oy0HxFzSezblL5Me82Cf+CPn5PCbqI/u9
gAdf0jfbcsSuT22pT0KqP+ZFafF3X4nL4Xwl6gN9KSb+jtYTcw6U1kPruvhT
Wg9NftSngswX+FPUpwbVB/kxLwaKf/9K/BDnQGn9t+DHaf039dn0j6838wKc
B+k1ZV7cEg5A8yvgmPgdml9mvqAcjPNrwjEoDpZnR78P1Wd5cRzMOVbqR2uJ
cBXqR5Mfv1sE41y4inN74wLAeVC+rMPWAuE8KL/Vv9QH4xPcCfn5vC1+F+MW
3AnpGIe/CQejeWp1EQ6G8htS+bTOWOuFy9E6Y8754ncxDsHlkI5xdVR4I62T
FvghrZNmXaVxFQBehPQu0u/gnBQHa4hwUaSjX34Wjop0xLm0cFekF5a4gffS
OLTAe2mcW7WJG4MnT30fXyd9nIfiyWvfP9154Ym74smHgwOP7hrmoXhyqViP
FQ+6uiue7Cbn1Jgn9zw1d3F8NXfFk9NeHta++lKH4snZf9t9vXB5Tr8ScC4y
9bYfd9wUT546rsqZoUfcFE++mqRRUs/9DsWTcU6QefLSNClaFtzqoXgyzuEy
T/ZMeTC+ervEiidffPs48HRpD8WTuRzw5Ogrh3P8ts9N8eRve5qOHnjCTfHk
PWk8Ttze6K54simfePK3wx4jmnZwVzwZ54iZJ7v/Wvdm9Tg3xZNvHK9dYFZa
h+LJjvY+TysmdFc82ZRPPNkx+9m2/3/+lHkyzksyT84bfmOqo71D8eS6A3x/
y7vWoXjy5eLpz4ZtdCiebMonnpwq4YSTjikOxZNxrpN58uvzMTETHzsUT57w
ef38HsXdFU/ul33XkktF3BVP5nGIcdUupGeb6vc8FE/GOVDmyY7PazI+eeZQ
PHmhnJNlnlziSdb0iX/n9h7wNu0lnpyqf5dS8YtUf5nz48yTp+/6uVDZlQ7F
k5fIeV7myaF+WZ7tb+ZQPBn5mSfvnVe57ZEbDsWTcW6defKwp5UOf//sUDwZ
+Zknh4y5uD0ks0Px5MVUf3PeuWnwzy3/XpeYJ8fJuWbmyasnHVubxVvNR1V/
jPMSqzal/HDIXfFknF9mnrz89PynhU+4KZ6cQ85fM0++P+/rg3YrOb+LC/Iz
Tw5/VX58o2/uiiejPsyTR07r7nlmnhrP5t4A5smVOwwd36oYztfbPNmcZyee
/IvoEfNkzC/mybfL9kg07LmbKV+d3yeefC5jFZdq/iqe3hxPzIt9M3+LTXBJ
jQdzLwHz5FYvHqe5tMquT1mqD/PkzaXKhLdNb+dHurlngHhynux72yf0cyie
jPP7zJPPVZk97cp0h+LJyM88+VaSKrXvh7qa+vhSfZgn19lccGjdbnZ+pJv7
DYgnt2w9/LN/InfFk/+k+mNerDrwvmvYQXfFk3GPAfPkxynjqmSvbdenDtWH
ebJfqSwjAjLY+ZFu7m0gntzsk2/5b9U9FE8290sQT/7y+/BLve94KJ6M/MyT
x4W8eVO+kLviycjPPBn7IufxY99rwTw5cO7KrKlXOhRP5nhivlgb67Ua7cPx
OeaN+DBPDpmYMWdMPzUezH0XzJMnls62P/aZm+LJGJ/Mk2+M7j9ocBc3xZN5
PMPv187Qyj/mg12fZlQf5slBUj7y870czJNrSfnMk7n+mBeID/NkXk/g9xEf
Wk8sXk8wL9C/tB6a/MyTK0n/Mk9GfZgnY74wT8Z9IMyTJ8h4pvXfyvY/18Mv
VrJx10a/2mXnRzrGM/Pk5jIfmSdDv5gnJ5XymSdjfjFPXinrD/NkLh88+ZGs
P8yTER/myVg/mSfjHhXmyS1k/WSefEnqwzz5vKz/zJNxLwrz5Ow3s7le3Oqq
eDLub2GevE30i3ky8jNPLiD6xTwZ97EwTz4k+ss8uY/kZ57cRvSXeTLXH/MC
+wfmybiXhnnyzYSFzmU+66Z4sr/st5knYz/GPBn5mSf7yH6JeTL2P8yT24q/
YJ68X+5jYZ6M/R7zZNw/wzz5k+gX82Tcw8M8Gftb5sm4x4Z5co08FdPPOKbi
6c3xND5a9ufMkz3FDzJPTpKwYP6wwe6KJ+P+HObJ8BfMk5GfeXKo+AvmyfCn
zJODxR8xT04m/pp58t3ATnN+Oe1QPJnrj3mRTvwd82TcC8Q8eZr4O+bJQ4U/
ME92FX/KPBn5mSfDnzJPRn2YJ8O/M0/G/UXMk/uIH2eejPuXmCeD8zBPfiMc
gHnyCPE7zJMxX5gn1xOOwTy5QdsmG+duUXEw9y8xT3YTrsI8GfmZJ+cWrsI8
+apwHubJrsJ5mCdzfTA+Pwl3Yp6Me6KYJzuEOzFP/i4cjHnyLuFgzJNRPvPk
C8LlmCfjfirmyTHC5ZgnTxPeyDx5kfBD5slYV5knTxRexDwZnJN5Mrgo82Rw
VObJ4K7Mk9cI72WeDN7LPHkacWPw5DYb/F2Cit2zmCdvK5iyWocCdjrG+dW7
kzpdy3jPYp7cqnL9TrMG454Zfb8K8+RNSXK9G+dmp4MnN+rz6pHbj1iLefKY
FSty3Kp0z2KePHLomW/X69jp6N/UHgsbH955z2KePCfF+36PNt6zmCfjfhvm
ydWTebtum23ujTE8GfdHMU/+s8jBp55D7XIQt4PVs3TbONQup/y/lAOenHpW
5wHvwjg90hqW50XF2V73LebJCxdur1V2ql1+OS6feHL1QWt+i3ho50c67r9i
nry6Xf36Q7rb6RifCc+6zG3b4L7FPLm/f51d/rnMPTyGJ5vyiSenjsiep0UX
Oz/Sce8W8+S5VQYm6ziZ6/nOGvB4R42xhe3ywZN39Hg70ueiXb4vl088ucLl
1eUuHLHzIx33ETFPLp6+X/joSDUerInbn4yJPXrPYp48ZEijVxt23LOYJ/M4
xLjKF1Fm6Lxm3F/2/WbMk3uPKH7j/XO7fKTjfifmyWt+zefa/i2394C3aS/x
5AdPeo/4c4XqL3PvGfPkV+0WTW/62K4PeDLuJWOevK7S9H3vq963mCcjP/Pk
vvWyD6lT1a4P/AvuW2OeHLQ3+FDxAmp8mvzMk6sN6lBg+yS7PnX+pf4Ytx+6
PzqxtridH+kX5T4u5skHmyZ71SBIzUdVf7Mfu/CLm/92tZ6Ye+SYJ6epWX/v
nng7/v/075kTrnJvGPPk9Zs/9S0dy/ldXJCfefK5jx8Xr22p1klTH+bJQT4T
N3dso8azue+OefLKMU0SNOqG+9ZsnmzuYSOe3Fz0iHky5hfz5AUTSsb6b7bL
L/8v5cO/PClQ6WHANBVP70QUT8yLjAMOfwnrf4/Hg7lPj3ly2m5LlidcZ9en
LNWHefJvy/tljmtv50e6uR+PeHK65nVio/rY9QFP/lXunWOevO7E90grDa9X
9r1/zJNzzn23KzapXR9fqg/z5KeHu3Rb+T7W5Ee6uZePePLrQnnfzHsZazFP
7kz1x7wYs7/98KYuaj009xMyT3Ysvt56x367PnWoPsyTt28YOfLlTjs/0s19
g8ST578tFOVTWq3/9r2IxJPXeh95kaCcGs8mP/PkQ4WWuIeWtfc54MnIzzx5
tuyLnMePfR8j8+T1zy9teJrQLh/pHE/Ml+i4d/NdF3N8jnkjPsyTy0fVHHh2
hRoP5p5G5snpus77Oc/rWIt5Mu5RZJ48YFmPNcn3xFrMk7vQeIbfL3PmTvPL
S+36NKP6ME9G+cjP90kyT0b5zJO5/pgXiA/zZF5P4PfTSHxoPbF4PcG88Jf+
pfXQ5GeejP5lnoz6ME/GfGGejPWTefJhGc+0/qv6Y15sOVlmaPehajyb+zmZ
Jy+U+cg8GfdYMk/eKuUzT8b8Yp48VtYf5slcPngy1h/myYgP8+Q/Zf1knoz7
P5knv5X1k3ky6sM8eb2s/8yTcZ8n8+RfzsaGbKplxwf7Mdw7yjwZ+sU8GfmZ
J2cS/WKefEv2n8yTs4j+Mk9GfubJqUV/mSdz/TEv5sv+gXky9tvMk0NfDphS
76Jdn3/69/wJH9lvM0/2l/0Y82TkZ568QvZLzJOx/2GenF/8BfNk3CPKPPm8
7PeYJ+PeVObJ/qJfzJNxfyzzZDfZ3zJPxv2rzJMnXfp9RJ4c9zme3hxPzIv3
sj9nnpxD/CDz5Nw5vl6d+NN9i3nyRbn3lXlyqPgL5snIzzy5svgL5sm455Z5
8mrxR8yTcf8t8+R6dbMevzHBrg948iWqv7kfQPwd82TcZ8s8+YX4O+bJuHeX
eTL8KfNk5GeevFr8KfNk1Id5Mvw782Tcu8s8eZD4cebJqA/zZHAe5sngAMyT
g8XvME/GfGGe/JtwDObJ68teexDVVMXB3BvMPBlchXky8jNPnidchXlyIuE8
zJPBeZgnc30wPmsKd2KejPuNmSevEu7EPBkcjHnyYuFgzJNRPvNkcDnmybhX
mXlyGuFyzJPBG5kngx8yT8a6qniy8CLmyeCczJPBRZknNxWOyjx5i3BX5sk7
hfcyTwbvZZ7M3Bg8+XKLzrnzpo5SPPnmvq1lU2WNUjz55fazq0rfv6t48q/h
m9adzx6teDLuBWWe3L9GRL+vrSIVTz5Xca5f6st3FE8uvrpWqgotIxVPbnvQ
d+mecZGKJ0+YesBvX3yk4smRPfKenZUgRvFk3MvKPPnNgNDc4zNEK56Me1CZ
J1ep9sfal37RiienufDL6t+fRCmezOWAJ7ssG1Jk47MoxZP3RCVJ0z9JtOLJ
H69mKtcnV7TiyaZ84smDdrQ4lXxdtOLJuLeZeXLaIxkfz2odo3hy1d8qR2+p
HKN48r2kKSf+UixG8WRTPvPkBZXKfeoRo3gy7qdlnvwsosG8wrO4nu+szNMP
7d5aKkbx5HJdNr/+HBGjeLIpn++72FXm4Mv/yo903FPNPPlDggrZdq5X48Fy
Kz2t/dsZ0YonDz31pIbf3/mZJ/M4xLiKnr5w3IclUYon415u5snRWbqdDo+O
VjwZ9xIzT87x9uqKo5+4vQe8TXuJJ2fKVebW9gOqv8x93cyT87iGPcl+K1rx
ZNynzTx5w8OU/c7Wi1E8GfmZJy+ckGbh1BwxiifjnnDmyacreM9a767Gp8nP
PDm8p5V76tQYxZO5/hi3OVq33xEeHq14srvcI808+U2c/7ase9V8VPXHOG+/
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
oS/Mex/J/pB57xDRR+a9DyQ/817oo7p/mOqPcQ59Z95bVfbDzHs/jFpcdVnS
m4r33pf9MPPek7JfYt77QPIz760q+xnmvdifMO/F/l+9Z7cvUUS5ZaGK93rJ
fox5b4nrI7sMDuXx8yUA+sK8t5Xsx5j3XpH9J/PeDa6nHrboFqJ479aq5Y7X
9b6leO8DiifmxW3ZPzPvhV9j3hvxMPfWDgNDFO/9o1feYkPThijeGyL7f+a9
yM+8t5/s/5n3Vpf6MO+dKf6FeS/8L/PeRk3exY96Hqx4L9cf8+Kx+C/mvU+8
M9e6/V/1gR79Jv6LeW8d4QPMe2uIf2Tei/zMe7uKf2Tei/ow77XEXzPvXd7p
4CqXe8GK9xYSv8y811fqw7wXHIZ57zvx6cx74UeY92K+MO/dKZyBeW/AhL67
VkaqOFjLH9zJ4RcfrHjvK+EezHuRn3nvMeEezHvbCYdh3ptMOAzzXq6P+X9t
4ULMewcfOXA8rleI4r1vhQsx73UIp2Le20E4FfNelM+897pwM+a9jZoW9d3f
IFTx3nvCzZj3PhceyLy3p/A99Z6drKvMe9MLz2He21s4JPPeH8Itmff2Ec7J
vBdclHnvIeGxzHvBY5n3gus2+s98cTW8t9Gc3etj53j6/PinveB4AXhPEPnB
FSvmd5sUXDiFSUf+Xn7TP0fkSm7SsY9tfC39l8cHkpnya8t4aCrvJyI/0r3r
bPnyrloyk15N+nHg4WXtC+y20//pxQPe23LNPNs+g/27LST+s9N1Gv04g13P
xhL/spNXriidzG5XRYm/V/lVmQfNsNPhH5+9XLVqr8OuJ/xm28e7O5ex7HTs
h29Gnc5/coidjvWq4LKWdYu39fLZKjwQ9cR7i98lPuiXCUnPj75V205H/L1f
Xy/UvJidzv2FdMR/2+AP6Wdt9jS/i/bi3cnv1C9419LUR+J/NP/MTlE97XTE
H++NIh3t6nT2/NQYt5Q+2+R3Ebee8v4m8qNf8M4p0lHPpp2fnEid1U5Hv/wk
77oiHeV3i19f1Xcb3l3V/YL8SMd7u0hHf93IFrRrxee/4yacCu3CO62NhFOh
v4psaNe13C5Pk47+8lvjn2hXDS+Tjv4KkndskY7+Cg3wvXDwiZfPt3+JD/Kj
v/B+rqmP9JdfgGfNcn/HrYkznwnA+87Ij368LO8IIx3trbngxIHI014+2yQO
iHOBgYk8rr6324t6npf3ppGOftw8dnim/InsdPTjdHlfG+kov7DL/bDbzTzN
76Jf8C4z8qMf8c440pH/2IoWUwOz4t3bR6a/3rzdNDhLCS+Tjv4q0Wdi/Txt
7HSOG9LRXy8uHexf5K2nT8N/iQPyo7/wXrmpj/RX4me9+1Xz+Lu9//k7Bp4Q
UOyX/O7PI5Ob/OgvvJOOdPRX7jwP5pUtbKejPninHunolyw9Fry90txOR7/M
+VLgY5yfnY5+cQRtKfY6c3KfBv8Sf+RH+rgteXp++NOuD/old6n5Ezq6eBo9
Rr9UKh3ZwTPOTke/jPC1Xmx2t9MRn6ISH6SjXzZmdbN+X5TMpCP+mRM/GFyq
QVL7dyX+l5Z0HTv2bBKTjjgPyf1s2uUydjrijPx1KG5zJW7Ij/jz7yL+XE+U
U4TahfhzHBDnNl97hLVcb6cjzoinxN9CnBF/pCPO7tK/SEec5zuPB8Opssv4
GXMuZ6Eqn/Z5o70/S3uRH/GncWgh/nmcx631L+PcQvwxX6o4cz/zrj3yoz40
7yzEH/MX6Yg/zXdTPtYH39Z3yreoe8mb44/8Rndi5ros7mqXg355LeuP/H+H
6ResV0hHv2A9RDr6Besn0tEvWG+RjvhjXTK/K/GvJev8N+d9vnk/HflZL5CO
fmkoutPsX+KJ/OgX6BfS0S/Bzjrog/pDB5Ef5eNdeKSjv+qL/iId/YJ3z5Fu
fKXouPy/rQ/6Be+eN/uXOMj+weTH/gHp6EfsT1A+0ns474tU/JGO/qV9kYqP
qY/0b0fZj/2jU66mfOxvN0t9UD7tD33QXtrv+aDfjzjvD33Qv7Sf9EH/Yl+K
+qD+2J+jPqg/7ZN90O+07/VBv2Of3Pxf+h35DceW99CRbt7Rk3247OdN/2I/
j3T0I/kCFWekI87kO1QczO9KHMjXmH4hH2T6Bb7pn/8/0nFDfvQX+S/TX03F
xyEd5fRz9n0m/j7OPtHE2X38abdumezfRZwbiw9lf/qg1d6ltw95KH/6WN4n
Yn+ay2P+3ZC1djryvwwuc/7bN4fyp8ujss1p3NCh/CneY2J/WuOJR/OtG9yU
P/2zYb8SI6vb6eiXmSdCktV77Kr86X1Hnb41Yu10xL9c44Dr1h07HfGv5nYo
e0oPu3zEv/7RHYMelrHTEf9NISWC2o+z0xH/7/FHikZetNMR/7m5Rt8/lcqh
/CneVWd/+nDGFc9M2RIrf/ptxvmBlzJ7KH+K/mJ/+rpxlvBLhd2VP8X76exP
0S/sTwPWTGhXYKdD+VO8X8b+1D9//VsbFjqUP8U76exP8W4a+9PpXZ9OfnHJ
ofypn7wTx/50cMtOlxqXdlf+9If0C/tTvN/H/tSqNSD7zZPuyp/i3Tf2p5Ur
Tkn1/KO7SUd/BWYreL3eCDud351nf5rydWi9Z58dyp8iPuxP8R4f+9NW8U89
vNc5lD/F++DsT/GuOvvTSbWWZWs01aH8Kd4HZ3+K99bZn/709lgXl0A7Hf2I
98TZn5YuPNFl3Uh35U/xziP7U7xbyv60X9TKBH/O8FD+9PPKnP7RLR3Kn6Yu
sKB0vUA35U8RN/anpw5mOpajtJvyp4gD+1O8f8r+dPJfjz6ODHVV/hTvU7M/
xbur7E89Q0PWJ492Vf4U796yPx0YWfWnazPdlD/FO7/sTwte/vHS5ZxD+VPE
n/0p3l9mf5q/e1CR1q4etk+Uftm2eUnfrdUdJh390qtqso3TKrqZdI4P0tEv
xfLUXDi1tp2O+Jv3u/G7Ev/UDzp/mrvdTkeczXvZ8oc4p5H87E/Ne+Xyh/jz
7yL+JameKOcEtQvx70txQJzNu/Dyhzhvl3iyP0X82Z+if9mf0ngwPmiAjB/2
p2gv+1Mah8YfpXAet2b/T+Pc+KApMl/Yn+KdXPanNO+MDzoj85f96TLn+W7K
TyvrA/tTxJ/9Kd7bZX/6RdYf9qd9ZL1if1pG1kP2p3jvmP2ph6y37E/xHjH7
02myzrM/xXus7E+hF+xPoTvsT5dLPNmfQr/Yn3o666DZt0MH2Z8mFz1lf3pW
9Jf9Kd5RZX/qIzrO/vS1vKPK/hRxYH+K/QP70wGyP2F/mtt5X6Tiz/50ivO+
SMWH/Sn2Y+xPfWV/y/7U4bw/9EF7ab9nfNAp5/2h8Tu0nzR+55XsS9mfYn/O
/jTGeZ9s/NFD532v8UdfZZ/M/nS49Dv7U7yvyv4U+3D2p9jPsz/d4OwLVJzZ
n1Zx9h0qDuxPydeYfiEfZPrlqfgm9qcPnf2d6S/yX6a/VoiPY3/6ytn3mfjn
dvaJJs6tKj1/u72qh/Kn8KHsT0v1q1B+bt17FvvTnfLeAfvT9efKJ/jtfqxJ
R/7VG+runfeHnY74+7plWJ/ucKzF/hTvO7A//avbo4WrdtvloF/eV03af8Vx
Ox398iZrSd9lgXY6+uWtf8KeYa/sdMT/be6gaaky2r+L+GdsV3LZ1/52OuLv
s3jh1keBdjrify2NI9/Tb3Y64t9y0fBNz0veN+lmn5DvTb0GKe9b7E/xTiv7
07Erv3s1qG6nI/7Xc/ZtGlXJTuf+Yn96e+2mgeXn3LPYn+I9Vvan6Bf2p6s6
5HR7UczOj/jjPRT2p8tmjcnb9/p9i/0p3l1lf4p3WNifdph5rOTLeDs/+uW8
vDvD/nTzgk07347Buza6X9if4j0g9qe1e/gP9Qz9O27kT/HOKfvTduObX30y
7Z5JN9x7cYOJa3+28/M7tuxPx2/PmOvD8fsW+1PEh/0p3p9lf7qv8qqWxV/g
fVLbZ+G9UfaneKeV/enk3LNn+Uz5ux/Jn+K9UfaneL+V/WmT5FO+FQyz86Mf
8T4p+9OiDzuliG12z2J/indC2Z/inVD2p7NXpS39tgTe5bH9adfy+bosv22n
o79ic/T6XifVfYv9KeLG/jTN18a+a4/es9ifIg7sT/GeGvvTR9crB23M9Xd7
yZ/ivUv2p3jHjf1pmXc5o69ettNRH7yjx/60a7Zid57tttPRL3gHk/3pq5lf
qh/8e51nf4r4sz/Fe47sT+c1SlD8V7d75vs58/9HzV3iXgy009EvOT+X+V7l
XaxJ5/ggHf1Srdn4sk9W2OmIv3kPFL8r8d81e43nozF2OuJs3t+UP8QZ+dmf
mvdD5Q/x599F/GtQPVHOBGqX0X2KA+Js3pmVP/P9gMST/Sniz/70tfQv+9Mu
zuPB+KDuMn7Yn6K97E9pHBp/ROPW7P9pnBsf9FjmC/tTvLvH/pTmnfFBqWX+
sj/t4DzfTfkxsj6wP0X82Z/i/T72p1h/2J/+LusV+9MSsh6yP8X7iexPW8l6
y/40SNYl9qczZJ1nf4r33difQi/Yn0J32J8inuxP8T4d+9Oxzjpo9u3QQfan
eLeO/WlB0V/2p3iXjf1pe9Fx9qd4l439KeLA/rSO7B/Yn26T/Qn703nO+yIV
f/annZ33RSo+7E+Xyn6M/Wkl2d+yP13lvD80Poj2e8YHrXTeHxq/Q/tJ43fu
yL6U/Sn25+xP0zjvk40/2uu87zX+6Kbsk9mfot/Zn+K9Nvan2IezP8V+nv3p
FWdfoOLM/jS9s+9QcWB/+sbZ15h+IR9k+gW+if3pXmd/Z/qL/Jfpr7ri49if
rnH2fSb+G5x9oonzlof5Gvq52b+LOP8iPpT9acLO9Y6kOxCl/GkquT+Z/WnB
JNkHldt/R/nTK6sbbM8RH6H8abbFbrPKt4tQ/jRO7otmfzp49sneja6FK3+6
bsOp14Hv7HT0y/XjZ4dUzGz/Lvql7rXJTYqls+uJ+F+KrlkiZ8q7yp8WO9rs
J59OdnsR/yULuoS02WfXE/G3vgyceu+rnY74P+40oXzXmjHKn75ffGP4jiIx
yp/+WPrP/dLsTwvPLjUl2dgo5U9LPBmx7NP0KOVPU0t/sT8dXz/jx69No5U/
xftu7E9xjzf705TjvQfkbhKj/CnuV2d/+mRJea83D2KUP8U7buxPca87+9Mz
iz7ERzyLUf40Xu6xZ3+a7cdEt9+Gxyh/in5hf9pQ3hdgf1ooX79Fr36PVv4U
76axP71wZtHS4S7RJh391WJmqvMbv9vp/C4e+1P316MSJjkYo/wp4sP+FO8F
sD8ddKrcqDMvY5Q/xftl7E/x7hv7003lSw3esjVG+VO8X8b+FO/BsT/NcHlU
nyFBdn70I947Y3/644FXydc3opQ/xbtj7E/x7hj7U59BQ/P6N45S/nRUyWGX
c7rEKH9aYFjXXu8Lxyh/irixPz1R/3363/tHK3+6RuLA/hTvs7A/PTylQq+r
JyKVP8X7QexP8S4M+9Osx4Z1P78oQvlTvMvD/vSMx6SdnXaGK3+6W94hYn86
LmbjwV9jIpQ/RfzZn+J9KPanGaoUL9sxOlL50037CwxIeDJa+dPqu0Nnp/0Q
qfxpDN47kz/0S8lNxQMGNopQ/hTvN5nflfivqHbt7R9xYcqf4r0qpJj9mORn
f2reI5M/xJ9/F/EvRfVEOfeoXYh/TYoD4mzerZM/xBnxZH+aXuLP/nSM9C/7
053O48H4oNMyftif4t009qdhzuPQ+KNszuPW7P97Oo9z44OOynxhf4p3fNif
OpznnfFBmL/sT/s7z3dTPtYH9qeIP/tTvAfE/hTrD/tTrFfsTxM8/Gc9ZH+6
WNZP9qeZZb1lf7pO1iX2p9tknWd/ivdi2J/uF71gfzpUdIf9KeLJ/hT6xf7U
4ayDZt8OHWR/indw2J82F/1lf4p3XtifQsfZn36Ud17YnyIO7E+xf2B/mkX2
J+xPnzrvi1T82Z+edt4XqfiwP30s+zH2p9jfsj9N57w/ND6I9nvGB9H+0Pgd
2k8avzNF9qXsTy/L/pz9Kd5HZn+a1Xnfa/xRGdknsz9Fv7M/xfsv7E+xD2d/
+kH28+xPKzn7AhVn9qfkO0wcLjr7FBOHOs6+xvTLNWcfZPoFvon9aVZnf2f6
i/yX6S/4OPan5PtM/As5+0QT51lD33j7DbXbhTj/JD6U/WnGI5mG7R5yR/nT
RHLfI/vTHI8m+z9OYvtB5D91dUb3W83DlD89fe6Xnin2hyp/ivsz2Z+eORHb
q17y/zonK/1SffnqEn/52+nol8ChbT75l7HLQb8Ufd4kfYa1djriv7hDvTJz
3e12GZ3q6He+8S92utkndGrcOH0nO918P5CpVOE9c+x0xD9daGpHreN2OuKf
70fv9yH3w5U/xX2Y7E+H5Gs4zMvnjvKnQQtzlYt5Gq78KfqL/enx3dUuVk4Y
rvwp7gVlf4p+YX/ao0K1ktNyhit/ivtg2Z8OHxRW4OcR4cqf4l0Y9qe4h5b9
qRWbNNu6x+HKn76Qe3fZn07YVThmf7cI5U/RL+xP08l9yOxPSz6yflqV9Lby
p7hHl/1p0oST618ZdVv5061FOyf2OBdh0vmdHfanLRuuvPSkWITyp4gP+1O8
j8P+tPIfLmU/HAhX/hTvobA/xT3P7E+z978w/mffcOVP8R4K+1O8L8P+tFrq
YSdafA4z6ehHvJ/C/rR5200BzVKHK3+Ke7PZn+LedfanO68WupHpSITyp1u6
tv+x3CVC+dOkdZNm7304XPlTxI39abPpj3PP6Byu/CniwP4U78uwP12yaf4O
37/nL/tTvF/A/hTvmLA/dRs39dH+uFDlT8fJuwPsT4806z+7yI8Q5U/xrgH7
06gS454UWhym/Cniz/70krw3wf405K/hGVaUva386ZssHxZVnxWu/OmFO8vf
VM8brvypK95PkT/0y/3emcaPLBKs/KN5f0T+0C+T8Q4I6iP9wumIP6eb7w0o
HfGfSumI/2OpJ9JRTzdqF+IfKHF4mGJsyWs5Lnij/tOpfMTfvI8jf4g/4sy+
Ff3CvhX9zr71jfM4Mf7oqIwr9q2IA/tWGp/GNzmcx7PxBTT+jT9aKvOIfSve
I2DfSvPR+KOmMq/Ztzqc1wFTfhJZN9i3Iv7sW/GuAfvWrbIusW/dLesY+9YW
sk6yb60g6yr71hqyDrNvxXrFvjWHrP/sW3HvPftW6Aj7VugR+1bEk30r7u1n
30r6aPbz0Ef2rbjPn33rdtFl9q24r559a3LRd/ateFeOfSviwL4V+wr2rRNl
38K+daLzfknFn32rj/N+ScWHfesw2aexb8W+l30r7RuNP6J9oPFHtG80Poj2
mcYHnZD9KvtW7NvZt9L+2fgmN+f9sPFNwbJ/Zt9aQvqdfes6uceefetQ2Z+z
b8U+n30r+QUVZ/atx539iIoD+9Yizn7H9Av5I9Mv1cRPsW91c/Z9pr/Il5n+
gr9j30p+0MQ/p7N/NHGe9G3c3S8Bt0064gx/yr51RkRbl53zQ5VvHSD3VrFv
bZ09TaY71+x05A+4t3Hfo3x2OuKfPOXj14/S3lK+danc08W+NWBS3U5XPa4q
37p0xflOPwpfUb71t32VOpdodFn51jZFFiVqO8TOb7673ha3cepyu3zEP3fQ
552pvl9TvjXRZ49DazreUL61da/H9/suuKl86/7bgc+SDbmlfGvEpAcZW1QL
Ur41Su71Yt/68qfl84YMClW+9b7bgIk3okKUbx0o/cW+1e16zfhVhUOUb8X9
ZuxbcX8a+9aMOWt1yPdnsPKtuNeOfevpG3++ef4oWPlW3PPGvhX36bFvbRqS
3XuLS4jyrWfl/kD2rQeODEz8Z6UQ5VsPSL+wb8W9juxb457+nLvb6hDlW3Gf
PPvWIre2zX0aFmLS0V9dLh77sLubnc7vBbBv7Tjm5vC1yUOUb0V82Lfi3kj2
rWnzzH6Qxdx7b/uv5XKPKPtW3IfPvrXL7nvvfjkfrHwr7nVn34p78tm3dn3+
ZMyEEDvd3Esm97iyb30+KkPZrq1DlG/FfezsW3EfO/vWXI8GNimTJ1T51nzj
569cniJY+da+D3tkK9/7lvKtiBv7VvdS0RG5i91QvhVxYN8aJffism91VCxZ
omfWq8q34l5x9q3F5T5e9q3rd7+o8tOpS8q3ppP7k9m3Hi81pHfabVf1/6vK
/czsW5+3WJfQe2uQ8q2IP/tW3EPOvrXJNMfu8dVDlW9dOmS1VeJEkPKt80N6
HSkZdU351uK4B17+0C+JlzUJmVD6rPKtuAcb+dEvV3CfOeoj/cLpiD+nI/6c
jvhfp3TEP6XUE+mopze1C/FfKnFg3xpE5Zvv3HDPv/wh/ogz+1b0C/vWZ9Lv
6v9bnceJ8UeHZVyxb70h9WTfSuPT+KYNzuPZ+AIa/8Yfucs8Yt+Ke5XZt0Y7
z0fjjzxkXrNvpXXAlN9P1g32rYg/+1bcz8y+Nb+sS+xb88g6xr71payT7Fvj
ZF1l39pd1mH2rY9lvWLf2lXWf/atuL+Xfesj0RH2rdAjdV5V4sm+tYboGvvW
zs76aPbz0Ef2reNEZ9m3dhVdZt+Ke3fZt0Lf2be+lXt32bciDuxbsa9g37pX
9i3sW48675dU/Nm3NnLeL6n4sG89Jfs09q1/ffpn38u+9Y3zvtH4I9oHGn9E
+0bjg2ifaXyQu+xX2bfWln07+9ZY5/2z8U2DnffDxjc9lP0z+1b0O/tW3MfL
vhX7c/at2Oezb23u7BdMnD9+cvIXJs5ZnP2IiUN1Z/9i4tDa2e+YfiF/ZPoF
fop962Bn32f665SzLzP95Sn+jn0r+UETf/KPJs4fO0yaeH2AHU/EGf4U/gXx
yZTaMc7zZXJz3w7i0CwwwD2Du6fPJtk3mu+0r//06fU++35gxAf3gP2g/Tbu
H8P+E7+7sOPMwWeaeOGcr7rHFX4B9fk01Xf/zW9ePk1p34774uR+Y+M7guR+
tn/Wt1em/q+sxpnHvfE06RhXxY8WfT81s5fPRvld8x3jk5oTFvVEu16Z+h+6
HXFo7klz/5u6v7QB1TNM6vkF9ZF2BX2ae3BjsKcpB/2I+zP/KSfU1L9swoUd
xt30NPXBOLx8rULOWkM8zf056JdVcl9iMykH7cW9iJ+lHHN+Kj5VyLwknj4t
JT/aG79sUq76CTx9evq2dszMH3gC7cK9jsiPdkUFhIWM2pjMlI9+eVH+2PCC
fp4+9WVfYTjktIrBN5fgfrZQ065U3wd4V/BN6tPg+bn6z8/9cQLtwj2cTaUc
cy/BiB+3bvimMPVBu0ITTi3teRP3bR44wfdwVpX8mF+5pJwaqKe0K6XUx5f2
XbjH8p/17ZVp10tpb13ad+Eey9pSPtp7V+L2VcpBu5bF/JVl8onkPi0kP9q1
fmz3cL/hKXwa035ygdzPmeCfd4LMvqWm9G8d2j/gPsZm1K690i55b8jEYX6L
AXeKdvL0aS31Qf+WkfEp89fEAff0ol1o77TdL1wimph7gNU9iigHceg5arxX
yyRephzE4aDMx8a0/zHrg5SDODz4kr7ZliNeJj7o92KyDiC/ue9a7nluSHqH
+wNlfTPtStHR70P1WXY5qOcCWfe+kY7jXkTkR3267E+2ZegyxE3f17dD8ptz
8bI+Q/cRz+1yHyB0H/XEOo/8fO8f8qP+P4teCI8yevRT2RGTxpTEfaf6fj+U
Y86DN+4f+ldd+x5y9Evay8PaV1/qUHp0LjL1th933JQeLU2TomXBrR5Kj3Dv
B+sR7hthPXK093laMaG70iPc28Z6dLl4+rNhGx1Kj3A/DOvRG7mPhfWoX/Zd
Sy4VcVd6NG3Xz4XKrnQoPdo7r3LbIzccSo9CxlzcHpLZofQI95WxHnlKPVmP
lp2e/7TwCTelR7gvi/Wocoeh41sVcyg9Opexiks1fzelRznkfiTWo1ZyDxLr
UZ7se9sn9HMoPbqVpErt+6GuSo9wjxPr0eOUcVWy13ZVetTsk2/5b9U9lB6N
C3nzpnwhd6VH1sZ6rUb7uCo9wr1brEcTS2fbH/vMTelR7Qyt/GM+uCo9Qv1Z
j1AO61ElqQ/rEe6tYj1qLu1lPcK9VaxHjyRurEctWg//7J/IXelRjpvZXC9u
dVV6hPu4WI8KSP+yHuE+K9YjtIv16FbCQucyn3VTeuQj45P1CPfysR7VyFMx
/YxjbkqPcG8S61GShAXzhw12V3oUKvOR9cisD6RHdwM7zfnltEPp0XRZB1iP
cK8j6xHuiWI9atC2yca5WxxKj1xl3WM9wj1IrEe70nicuL3RXekR7udhPVos
6zPrEe7/YT3COs96hHt+WI+gF6xHa98/3XnhibvSI9znw3o07X18nfRxHkqP
GvV59cjtR6zFejRy6Jlv1+vcs1iPqifzdt02277/B+3FOV/WI5wvZj3q719n
l3+u+xbrEe5pYT3a0ePtSJ+L9y3WI9xnwnqE89esR0OGNHq1YYedjnH+qt2i
6U0f37NYj/rWyz6kTlW0y9ajaoM6FNg+CefW9f0krEc4t856lLpm/b174s05
cXU/BuvRyjFNEjTqds9iPXpSoNLDgGn3LNYj3IfAepRW7j1gPUrbvE5sVJ97
FutRzrnvdsUmvWexHuHeBtYjx+LrrXfsj7VYj+a/LRTlU/qexXp0qNAS99Cy
OH9t61F03Lv5rotjLdYj3LPBepSu67yf87y264N2lTlzp/nlpbgHw9Yj1J/1
KI2Uw3qE+rAe4Z4K1qOF0l7WI/QL6xHixnr0tlDeN/NexlqsR6XPxoZsqnXP
Yj3C/RusR5mlf1mPcN8C61EvaRfrUdjLAVPqXbxnsR6tkPHJenRe7uFhPZp0
6fcReXKY+3/UPQmsR3lyfL068af7FutRZZmPrEeYd6xH9epmPX5jwn2L9eiF
rAOsR6vlHifWI9wPwHrkX/bag6im9u+inlj3WI9w7wHr0eKF22uVnXrPYj3C
eXzWI6zPrEc47896hHWe9Qjn+lmPmopesB7tLJiyWocCuM9En99nPWqzwd8l
qNg9xevOVpzrl/ryHaVHbQ76Lt0zLlLp0ZsBobnHZ4hWelRazvWwHuE8EevR
vaQpJ/5SLEbpEc5lsx6V67L59eeIGKVHOP/FevRBzluxHg099aSG33+lm3Hu
GvYk+61opUcLJqRZODVHjNKj8J5W7qlTY5Qe4Twy61E5qSfr0S3/yUPPBt9V
eoTzsKxHsVm+fvcaF630yPXncf23zrmr9AjnH1mP5so5R9ajjb1nHqyxKVLp
0aDlsW5nj0QqPcI5Tdaj4fNn5RzdLELpUZ6n27+d9I9SenS+XuDRo57RSo+q
9D5a1lEwXOkRztWyHhWMq1DmpFek0qNM95d0z9g3XOkRztWyHhWVcliPUB/W
I5yPZj1Ce1mPcP6a9WiYxI31aNaUbCNPr7+j9Gh0qxq3fBJHKj3aJedtWY+2
Sv+yHuF8JetRuLSL9ehCeKE+5/ZEKj3C+GQ9Kifn7lmP2myI73clPFrpEc5F
sh4V+vhmTpWl0UqPQmU+sh6Z9YH0qEZU20uBy2OUHuWWdYD1KJfc28B6hPOA
yh/dvf71eY8YpUdY91iPcM6R9ejb1Uzl+uSKVnqE83esR69lfWY9wj0nrEft
ZJ1nPRoi5/hYj66IXrAehe7bWjZV1iilRzPlvB7r0ZUWnXPnTR2l9OhBnd9O
5EscpvQo84/fKnmtCFN6VKlh2fPbOt9ReoTvdVmP8J0w69Hl7CvrBh0JV3qE
c1isRx97VtuzakW40iOcV2I9wnfUrEflgjO2eLU8QunRqiOBw083jFB69KhX
tRd7qoQrPap3x6Xc2j/ClR7h/BHrEerJejT7446Ajh3DlR4NkvMvrEePSnZ9
cfVAuNKjflsHeEz/GKb0COcaWI9qy/kF1qNs41rv/SlJmNKjkDp9PUpkDdd6
JOcvWI+2XbRyLUoTjHXY1GeW1KcO6c5myc/6VXDuxMf9AiOUfpUIXtev1rkI
pTut1uS7miJ/kNKdKVJP1i/vZFsq3smu9QjpLUmPtko9WXcKSD1Zd9Be1p1N
Ug7rTslL0w8kyB2mdKfr9gWrggcEK93BeRnWnezSj6w7OB/BujNezsuw7hyr
Edm2lhWmdOehjEPWnc5yno51p06fx7liW4Yr3cG5Btadfbf6vqnx9/rAulNH
5h3rDs53sO6smeYTX2t1uNIdzHfWHZzHZN3BOQ7Wnf1zXI7Heocr3bkq6xvr
Ds4psO6sPJlkyrBkEUp38P08646PrMOsO/g+n3XnZ1nPWXfwHT7rzkPRBdad
Gr1Ov/vRKULpzmT53p515+n3FyVLHL2jdKe7vI/MutMd7yyT7vSSd5xZd5bJ
9zasO/jOh3UnqbyXzbpzRr4jYt3pd6Hrom2PgpXu4Htj1h18B8W6U1jeN2fd
GSjvtrPu9Oid5srOP4OV7vSXd+pZd/D9MOtOFef36027XozrU3nqjptKd/D9
KutO1WWThheaEqR0p1LiM41WL72pdKekfJfIuoPvD1l3AutOebI5WZDSnRkp
5i8+XfOK0p1g+X6SdWfOhff9CiY/p3SnqNSHdWe65GfdOZQ0S71bxUKV7nx7
U6zXyV7BSnc2+I5ZVumvC0p3bko9WXcWnr38x9AbN5XuIJ11B+1i3Tkq9WTd
QXtZd2ZIOaw7DaIOr525MEjpztyTa9M+yRKo/Y5878q6c0X6Uf1/kHzfyLqT
Ub53Zd35PGpx1WVJbyrdqSbjkHXHS76HZ93ZVrXc8bret5TuPJTvEll3Ih7m
3tphYIjSnX4y71h38H0m606jJu/iRz0PVrqD+c6601XOU7Du4Hs81p2ACX13
rYwMVrqTTNY31h18Z8i60+G437qik0KU7uD7N9YdrMOsOwPl+zrWnZ6ynrPu
4Ds61p3eogusO4dnrczaNj5E6Q6+l2PdOTX9XOFEU0LxHan6rgzpqP+Rd79X
GNTPvBNqzhOVWjJ0bMJ2KUy64czyHQXSMZ4HZZ+z8+tGOz9/j7dF1nn87oA5
2fOve+tl0vk7Pfn+Vr1LjvIRZ7ynifz8XjnyI/797zya0S6Xnc7vyG8h3cT3
fiif3zdHfsTtzzuB7a7+ZdcT4+rDmdX1C0y2f5ffkUc5/D54E9IpfF+HdH4f
HOWYc46tRowbvNj+XZRzPeXBFi1+/a/4S3/he8UmpKf0vq16n13WMdO/9Vy6
FhxyydOk8/d+zUmn8L0f0s17QPK+MMrh7yFRf5SP751QT6Tj/XeUw99P4nf5
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
0WXmJ9tk3WN+0kbWZ+YnOC/J/CSt7B+YnxyS9Zz5SR/ZPzA/mSr7FuYnt8v2
SDTsuZviJwsGp8n9NY1D8RPso5ifWLKvZn5yU851Mj/Bvp35Cc59Mz85tWZC
uwI7HYqfWLUGZL950l3xkwjZ9zI/aSn7TOYnzudAbX4yoGWnS41Luyt+8k32
IcxPcG6U+QnOazM/SSH7f+YnU7o+nfzikkPxE+y7mJ/g/CnzE185/878JFj2
gcxPkp0tOOtSKXfFT86ID2J+gnPuzE/Syf6W+Qn21cxPcK6f+Ynr5zUZnzxz
KH6Cc7LMTxaJ72N+4p+//q0NCx2Kn0wT38r8xNxXQPwE9wAwPzHnc4mf5BZf
xvzETfwU8xOc52V+gvO8zE9eNc4Sfqmwu+InV8UnMj9xiD9lfvJJ/Cbzk//r
vDDzk68zzg+8lNlD8ZPv4peZn8SI72Z+cuHt48DTpT0UP0ndY/3YvTs9FD95
OOOKZ6ZsiRU/AU9gfgL+wPwEvIL5Cc4jMz85HBx4dNcwD8VPcB6Z+QnO7TI/
Se2xsPHhnXY6+nFTklzvxrnZ6XyumfnJmBUrctyqZOfn887MTypcXl3uwpH7
FvMTnLNjftLO+T1ow09Sy3vEzE8KyXvTzE+G5XlRcbaXnY5+WS3vLDM/wblC
5ifj5V1s5ifVB635LeKhXU/0b8KzLnPbNrB/F/07V96bZn5yTs51Mj/B+WXm
J7PlvXLmJ6kjsudp0cX+XZQz4PGOGmML/1f8pb9wHpz5SS7n98FNfrwzzvxk
/eZPfUvH3rOYn+A8NfMTnNtlfoL32Zmf4Lw585M1cp6U+clkeVed+QnOpzM/
iZX35ZmfPHjS+/8Vdu9RNeVtHMDD++Yy7sS4RxqGcUkZJkaFNIMIIYZxreQy
TJp0m8htNDTjEkalSa4lYtwTInKZkjqn9kk6J5KklFsMY/K+a73Pc7a+z7uW
v6z1W9Y+2z6//dvP83H29xfwMFI9Po/fqLmfu7EfcaX939FP+P139JNWbyeM
ijmj/nt5Xu0aEvpH1TD1/PF9efSTufTeMfpJ9lHNSase6jjPwxMTGz0Zm63O
K3zvHv2kz/3ZTQonqeeJ76Gjn7ycV5wcY6Wep3H/sie6gq0e6vU39sU3HbL3
dlWvm/G5nNbfNPbge/OB/r4Zve+PfnJwT2BgxaFCO/QTft8c/YTff0c/4XwA
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
f+c/yZiE4A==
            "], {{{
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1:eJwtlgmwTmUYx889lqN7vmMbQpbuzXZxLdnDtW+5lpuQfc1gSJbIlGEQiqJo
DKUUarSZokWyL9mXkZr2lEJikOxFv/88z8z3zPM///O8z3m/9322zKGPdx8b
BkFQIS0I8qGnR0FQCP0iumEcBN14WTgJgj7oOvD90I3ge6KLwhdDeoMfiM2+
K7gIXFlkOLgZXGOkGms343MwXBZ4I7gMNo/yvBVcD5sO4HS4gej7sOmPHuLf
3YtNXWxa8Hw7FQT/IU3A98Ot4F1pbN5FfxCZTVpiuCr85+g62h/8Da0DDwDf
jU1TxyXBo9F1sX9SfnmeiW7L+zbo1kgIl41MA+/H5250c+x3ovOwW43uyvuu
4DfAD4I7IK+Bu8B1B78Dfkjnh2zW/4OriowHt4DLRZaCK8Hl+Llt4ltjxIE/
BX8Ibgj+Btwdm/d57ol9HrIGfAL+kdj2NQJuALIefAb+LnAuuAHvx4OPggty
4RMcD4QfC94P7qO7A88DdwDngBfqf4Fbgj8D/4nPm34XOv8x8PvAt8D1sWsv
/4mdoe50HXxF+AI8f8262uB64O9SxucHHwPfC/6XmNwLztY5wB8Fz4mM3wfO
hC+KzwVwd+BuIwdThkvCL4G/DoYKZnkMNMLPdYiJPCvuT/E+ApQCFwvN/gay
B5sK2BeGfw7bych5+O3wl9Hp8H+kmQjP5P2EyL71TGR+5f90mq3lCIK56Fu+
N+1Rd/oYkp+XzfnWKHCmx0JjbCYp7uCfQteAr+2x1yY2/mlwdbht+K0eWEwq
X5RjpRPTei6VWN4qj4b4N7PBuyKLa91NvsRyTDaK+fbIHPj6ieG5ijnf50hw
hcT86D/cC66CjPMY1h3rrpXX5TzHVQfKgxd4/NTx/GqnWIot57IS25P2dhzd
GX4ZfOXE7qYoslOxxvN8cEedA3gDuAe4DLoMa8uiZ7D+Kmf8JfZX0CUCu1fF
VRHw87yvoBoALodu6vGZg26p/wRurvxH7gnsnHLcRud10+NK8XLJYyAFXyK0
bxUOTYTTtc5j+ziLVvHtLPAR8OLI/tePygV0Oexj9HzFJ/owfLnYYm8HOCO2
ON/v8S+bQ+BWXldVQ9P8fynHOiIZgeVhL+zbga9EFreKz/HgsvB/8bwtZfEa
emzP8nhWLCu2ZbMV4jp4D0ajOfv+qvnYRNSQdfoe+Bh6r84uMLvBsXFPqFeA
d4FHgnco9rDZjn4dnxmqJ/ivH1o9r6s6jFQJLG/L+v1moldHdi8foxsrHgOr
7xX9vlQvsv088xRDfg5V0WO9lip2m3pMKt4WIcXhK7HHiXC1Aut/05UH4Bno
KaHl2mT0VM8p5eckz1nl5CykCXh2aGu0VvlzJLKcauC1XXmU4Xmjb72MHur3
qNxVreMXTI0sThS389QrE/uGcueI58tOdK3E9qr6cIJzLA1eqroFrqR9x1bT
lBdbPK4KsHZKZHGlGjU7stwpqP8VWX/U/1WN6e53oR7f27G44V5PRqBfQeoF
1sOW+JksQn+ivAIvDq0Hqm++hz6TZr1MPa0b32oG/pVvve1nqJ7aC8kE90Av
d5/yfVL9Xu/Z+MOs/Uj7Am9Ct8bmi9D6lfxf5DvDFE+B1dkRvmfVsAOR8epx
axUTgfXUU5HtU73sXGT+BuH/58hs1PvW+/86EFqeKF/OonelrC6Ux+eh0PLu
IPqnyPZ23uub/Mhfv9je98f/hZTFaw24TrGdX1ufI7R2RWgzjOajEomd25vg
TqrViZ2R5o1aseXQt/j7BSmpO4st14rhZyH6t5TVzaqqKzx3CmxOOALXHnwY
PSA2PQ7fJz2uZP8qduXBp+GyYsO/p4xXPq5B34jMj2aMzbwrFFp+pfOcF9i8
UdznS82QG/ysNoZ2pzp/3YPOQbHTRnftc47mKM1db4E7wx2LLNc0/+icxXdL
rPaqjz+r2SFltV5z41VwTXDN2GZL1XslwVe+T83AKz1/Nc8pRhVjzbVfn3M0
IykOVccueD9V/VkZ2Zmot5xKWb/SXb+A3s3z3x4bLXy+Ui/TXK0Yv5yy+Uu1
9KXQ5kndb25ifUHz+TSf/RT/fRPrZ6oPyvdc75vtEpu9Nav/o29GVmuHJ/Z9
9Sb1RtVk3ZHuSvOY6uRa8LLI+kh1n1e3sHYYa7eicwKbXzWbqZddxH+12Grz
WXCEXafQ6vNAnxXVo895jN3xGVW9YFRi96B6onqf6/W5C/qS/g9Yf/pKymq6
7quX72eo8jFlfVexXTm2/vk93KDYYixm7SWvgcopzRKa95Yrr1O2T83Dq7z+
qw+0iq3GJ/jvC+4Cn7+Q9cr8ms0iyyfFeanQvqs+/wP+rim34cNCloOab6/5
+ajHnQH/D8aYdX4=
                  "]], 
                 Polygon[CompressedData["
1:eJwtmHm4llUVxd97GM6F73tlhgQEQZB5CBBQBnEAHFBUCFGQydS0gUEezcon
S03NTMtMyzE1SiWRcgRRBhlFVHAKJUcEFdMEBEW09XvW/mPfe9aZvnP22Xvt
vd8OM2ae9qNUFMX4mqKoq/8vVoviBcm9uSj+Krld8i31N9OkLeofWxbFnWof
rb4tGjte+C7hAayN+bdJXtXc12KvbhpvXXhP+vol78ncV4RflvxJ7T9LXlK7
vsYP0HjHSlG8KdxI+CDhv2XPrSfcsvCaTcJ1hJsI/074v8LthdsLPyC8Q3iM
cJvC91ki3EC4gfBlwvslX0ku1D3mSv6n8UM13qrweWZLpJpip/5slbwv2SbR
0YrLNfac5u8XbizcoeI9Nmr9cYX3flrjH2pc/4o5ws+r0V3jTYXvEX5fuG3c
52bhbcKthNsJ3yr8H+GWwi2EbxL+pOo7crf5ko/YX/IXte+WvKP225I71b4r
u90s9E3ffdm6QUfvxdoOah9YeA/O8EfJ1qrP9oGkY+j3DvVP1v0mSc7UXSdJ
+qh9mcZ7aHxZto00SbYB3neqxheHvXwkPE74fuHDhDcJHyv8e+HBwq8K1xWe
KYxR/kBylH5jhKSr+rtJ6khGqv9Y9pTMEX5R/0dr/Zda/4bkdcl49X8nZL7G
hxQeO0v4UfYV/lD4U3QquUD935ecI/kudqC+zySl2tXSZ+As56m9QuuHa/3W
7LlPCp9YeA1970nOLT2XPegvamVHtf6N1Zy/8G8P0J79JQ3VX5GcLLlX40do
fLPGd0qf44U7CC8Qbqvxc4UPEf6XcF/hK4S/Lbw2e82/JSfFXtO091RJRb9d
lWzWfhXNb6v585gr3EX4YOE+Fb/tGuGTCr/xCcK3Cg8VHiv8huY3FW4kfKPW
d0Rvwhewh9qDJNeofTVvrPY7mjMMW0dHpe/wILqt+m6Pqv0INln6vQ/S/0/k
L720ZiX+LDkG39fYGI31kPxE7b7qW62x4cIfaP52yUPJPoAdp9L20Qg96P+h
mv9Yts1yr7rSRb1a6wBugWPQzWzNf17tseprUGtuwLawMTjip8L1hffo99Zo
/i+zuWBb8MMt2bpBR29p/O/ZvjxY+JuY3xBb0dxnquYT+KGO+i7U2FP4d435
r502vjibl3eob1nVNjuCt0+25Wuy58KZK2Ic275Z+BiN7xIeKfw4/lLaNg7H
l5Nt5P7g9wHCX1btg4OEH072TXwW370dHyvt13AjHAnHX5HNbV/qfOur5qjm
ws2TuesF4f5wKZxY+g7cRc3iIo1dHefnzsur9h3s5elkH6qvNxhV+E14m33Z
vrcSfhDeHfd7TnhmaV/GXpYn+/QlwvVif3TLnuy9VPK90hwNV6+Dc4SnSOen
xHvDLR/H/fFxfJ3f5LdXSX5YmivhZjgazrwy+27ccWnYdyfhE4k5Glgi3K2w
v8Ar3Svm/nbCH1dtj/hmT+HdwtM05wm1F0lmxHvwvnAY3Iov4bvHJfsUOkAX
J6tvsvZ+LZtbb1PfKHwlmwsfFB4h3KniWERMJDbu1fge/Ed6ryP5Qn0DIx4R
f/cLD414QXxZJ+mu9o/V17O0Te+K+IitH1uxr/4MjtL4r8M/8J9VVQttfOoX
GlspXGpuM+E/ZNsEb8cbtq1YpzsiV2kjvCHiv45aXKv5s0rrgLufJRlSmovg
pKFqr8NYk9/o4IrjHfqvUd+zGrsuO5YT09cKr5Z8UWObxraZ802N35216BBd
LiCmqL1Kfb01dxacU9rH8DVyJnKnt7O5lDflbYlT85L5bYLap0d8fEAyUe2X
s2MlfYy9lZ1r3S18ivB24RPCHuCDFZE/5eQ4jM/he3A4XL4zO/bA8XA9sZJY
wxk4yyvCA4WvFx5WOp7hb/cJnyb8UHYsmsAblT4DZ4HfT8X2NN5P478hRgmP
rjg2EaMGl74jd8VH39XcJyRdiDXkKBp7PJurJ3J+fJUYIzwFm4MPJKMiXpH/
cF50hG7g/690/31Vn3Nhdn6JLtAJuSUxkvOcLdyqdPzqIHlW/esli+JMnGVa
zJmu/2uy13YSviWZ0zZkC3fmroz1l/QLniUWkxORG03VmpalYyL22BNO01hn
4esiPxlT8dpLkzmaPXoL9yrNo+TXrUvvxZ7Ls89+fsR/7rA28lFSjl+FvWLb
2Dy2vyb8DR9sX7G99lF7nMYPKJ3T4rv48N4a2/++GvM7mBjaWeNzIrYS8+Ey
OG2YFrYpfUbOtiLiOvnKefBlvDFvPSlZr8QM9uY38CtsCts6XdKitA/NTT4j
Z0UXl4T+0clerR8U8R3bWRD2eZj69oQt0KYPmxio9Vcl+9DG7HzyGOF/ZudT
5J+c85ns/AOdjE326VXRR25Cjsrcz7X/qck6QTdNS+uyT+QnT2VzPlxPLtkk
7t8lzttF+KbkmEvshfP7Juck8+JM5HrkvJyVHLhr+Bm2152cJJnj4XrGLk72
QeagQ3QJRw+p2CfQA3puHjI52ccWhv13Vfso9X1ddb1ADkPuAmnCAfg5cRpu
IM8iHgxL1iNzhifXGKytET487vuPbB1cFOdBN+iI+HBGsu6oZw5JrjmoPS7N
tmVsmloLG/46bAXbpqajtuuRXLuS/1Frsgd7wTlwz5X4VOkYhm7RMbFtYfDL
kOCOR0Lf2Cy2+1jwUa/kt14f/EbOC3fg93AdPtw59idWtkiuXcmXGwcXb4lY
gh/hX7trXGOST8FRcBUxj9jXW/j1yKfIL/aFLzJOLPqsxrGSmpfaDH19WnUO
QS5BfUedOD/yg87JtePc7FyTnJPa9KrIV+CHjVXndOR21ATUBjdkx1ZiLLU2
OQa5xvGSXdWw4cJvjC8+GfkN49QzcDbcDWfBC+QM5A4HJteqW6I+JV9GV/At
3DwjmX/JKcgt8Hl8/13NaZ0co4nV6Khhsk7QzcPx/tSHuXSdjC2OEK5Xujbg
97FZbPfFiKc/T+ZacmByYTgD7mAP9sL/akv7Abk898W28Vl8b3ayL68OPoWz
qFWoOeH2a4WPKO2zcBf3wZcXh79x33alawZ0gU6o3TdHfL48ObaQQ5FLESOI
Fb+NfAWdbK+ad4kN1OQDSnMCsYT5cMVL2bGHGERutCLwOcncvSnyDfIlarmt
8f2BbxJ8m6BOHZ185sXBb/gyHNO4dA5ELkSOQa5BPrYhOYf/PNseeZN6EcvJ
wZfG+MSKa5Ybk2scapmjY0/2opYh5yXXIefZIfxmdj5FfjOydI57R8RP7k49
vyw536CWhCPgCr7B8C1musaXJNcc1KqckbNwprNL1+jchTudWTonW5ica5Bz
sCc1ArUBv8X3kfXJNQnnnVI61+OMnJUag7qBupLagza1xOjCfdQs1C5jCufh
fNNgjDnnx++TG5KTjZO+zhC+QfhI4W3Z3xfYg7V7Q2foblKcjZyY3DjLqWtr
fWdyUnLR6eEPxFXyRr7t4eP4Mj49WOuuD76BD8i9yamxFWyGPIwzcBZqcmrz
I4Mf4Uy4kxqS2pQahlqGHJM9WEsuR42En8HD1E7U3NRi1GR8x2AMX4SjmQOn
w+34CLksNdKi0P+Eit+TGpGaYFbYHLbHNxe+veCT7MFafJXYdk/YAzGO73mc
gd/mWwo+QQ5B7oCvwHENw4/hvv8DGDOebA==
                  "]], 
                 Polygon[CompressedData["
1:eJw1lnmYT2UUx+9MTXdyfxcVCmOZMWPfxzpmIzL7ljEo0ijSokz2JaMYZafN
UlGoKDyhp+zMDNkJ7U/WNtUYJiZR6nOec/rj8zzf+z3nvfddzvu+Nzz/6ZwR
wY7jFEEINPYcpybG3VALTgUcJyjUcdKIFfO8Gypcx/kFNqIPQjKxmzzPg7kS
o01D/LfQP6F/hJ+hHl5T3t8V+qFz4H6403ecPnifoBPR3aEH/ECbBnj1Icza
RuI3gihYjJeKVwN9F9SEgXgxeOnwBvo1eB16E7vXVy3eQkghZw59nA2L4B68
89JX6TfcgP14/Wn3LX41dFWoAlG0vWDjbIb+Ff0bNPH0PWfQZ+Gc5ND+Mbx4
YuHoCPiXd6cyb9vwt8Lvrs7Bp+gtsBkGkfcwDIZ82IGXS04IOhHdXcYF0Xi9
8Jail8Aim5cWEIVuAo3hMn2JJ+8jmXdPxyhjPQHH4Qy8LzFyesIm9Mfwss3V
IeIHoTd6Jl4COa3QLdFZkA2VfCMV/210JrGz5J+DNLxVeN+jy+Ai5Mq6Q19Y
K/VAfj24HOQ4AZ592GPvW4F+B5ZDBjnJMBfdjVgsxIEHyXhJcB90sHmROklD
n+Kbp2E4XileP7y/eL7uat3XsPWVdT7NdzPIS4dM63sWOQPQ69Hr4EPrcwI8
g34FXpX5Jqe/p7XzJPopGOHrd/fKmKAE8myNItFlfO8ilEMyeUmQYvMo4y3G
L2NextDXGfCiq98dSXw0jJI19rXu30Qvk/0n84A3mtxRsFNqlHfU9bR/B4gv
gPlW47ssXkDuNJhu6/Ye8Xdhpc1Btqd1kkUsG3KgGYzHGwdjpDbJCeXcyKTG
j/J8BAbineQbt6Ibob9Afwnt0N3w4iAW/sHbD3/Tlwae7k/Zp+NgLOy2uQgj
NsT2RV/0VWKVMAh9DG8ksdvpQxVYiL8ALtG2KbEVNj4Z5yG8m7yvIe1uohOI
r8XfDFvgO7zWeG3As70/E/8lKCFWXfYI+hq6K7oLdIK2nq6TrNdxG3cE3p/o
jlKf0B5ae1qXUp8XXD0HZe9PQk+EfTYXRehbGEs6c7qPnM/gmtWv1PFtoTru
Al/nZRd6J2z//9wgnkHbwzwfggc8PWPlXF4qex9WQ3Xa5so4iG/neQf8QV4F
XAlorLOnZ11tdF2oY2fnKnJXwiZIkXMtoHMeIWsuZyW09PSOqGNtw+0MDdC/
bPq3gefjMBjvqK2XtDmG/hwipbbwTgR0TRfa/Dp4QRBi9TUBf7z0n1gl8zcV
XY2xFRB/Vs4nWSc5A4i3RbeTcdm6FZI7Bea7+q3tsmaejsnlHaFSW76uZbTU
BrF15K6HFr7uR9mXE6GHnAWyjtAT/bx8g5xeptuh20M0VPX1TpS7McP6t412
W6G+3SNxnup89BAYHqx3yx5ySuGkq2djPV/XMk/2B/SxdXuO+GQ4TN+D8Wah
Y/EfRQ+DoRAm96XkytzLOQ+tfT135+FdYj7Lg/QbS2i/GJrbWSb3THP8yehJ
MMHmIID3OPoJGAuJnn73EXRtYnWgrq/znIqXLue21dBeW8P6nu472X8bYYOc
a66+Q/os/xb9pbZhANyB9zVtv4JvbK1kv9Wyf4Vu6F1ypkCS3Wtd5D0Q4+vZ
FIN3nbY3ZB9CCbnF0IF4EbGj1l7ec8DVOWvj610h99p5vHI5e1w9X+Telvs7
Xva/p3doK6s/qcOr5CwndxmscfX7ciYO431DpQbs/sqzcTwk5wU8GKz/PtKv
QvRUmCF3AF5H66voTujOcMTWP9zT/zb5f5P7t4J5vgpXoDSg8zKLvDkwO1jv
fandF9DTYZrVs9TLFPtuoc2BI/868g/p67na3u6P1egPYE2w/m/8B6ucSUE=

                  "]]}]}, {
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1:eJwtl3nQj1UUxx/vU3rydH8iSzGyJluUoZS2KaOhRmJskX3flyyvfffy2vfl
te8hVISkZaZ1WkfEVFSMpSjDJEn0+Trnjzvf7z333Pu7z7ln+5Xt2K9J36wo
iu7NF0UxWDETRXsgK9Mo6sa4wOKkEEWlkihqwXoxsCSjFbwaeH9iOpPRacq+
UcibCRlT4MdYm8A5zZkfCb6GvDX4EmM8vAV4EL2m8MB5h5xLlmF+FBzK3u/A
V5AfybK11ro368edX82ye54ER6PfOTU+BN6Y38hGpxHYFfk55OORd0jt/GHw
0omdr9+pAW8ve4AddX94Eec/sD4c/bacNQb5eHAc8hHwNujUZz4U/jS4ljEH
Pg7MYUyETwaro9cJ3pN9E5lPhY8F/+TsbvBL4ADmufBBYD/GJPhgsBd7XwXP
c4fDWWbnFcy7JWbPGZzZx/W174zb7RT4FDrF9Dbsvca8C/Ir4MPIBsBrgW0Y
g+EvgzXcbrVj+x591+Ngd37jIvumc0495gORPyPbxmaHzuA0/y59XyfnPcCe
she8O9jBbfgE2CU1m1fijif8bqfBX/x99ea70VsA3wWuYiyBvw++w1gI3wfm
MabDl4JrOHMlfG1ib90MXgg+hrGM9Qz+vgichXyJ/DExvghcor3I7kRnMN95
OcveawFjBjqj0Jmf2F3Ko/Omn7NTPo7+z+h3QrcvowCyFcgWMWJ4b2R5qd15
DmdsSO07qnHODnA+8u3ga4x58M3g8MS+axK42v1qr/wqsfXi7F3BOW/Ay8Br
ylfQeVDnuS/NBS9yh2xwZmpvrLduwhnDmFdjvifYHu19MrH4HQ5vCX+Ltcry
A2RzUvPlH5F9znhOb4msEL/9tueQ6an56jnWD3qOGI9sLKMh/AtkrzNKwgch
m5Ka73yE7DijnfwY2algPj0VfhW+Ab4Ufgk+Et4/sbhQbmkHvoe8DvLG8N+D
xxL68xkz4fm4YwF/+0V6h9Rskx/ZDfRzZffU4krxNZBzyjFawu8G16NTWL8r
e8MrwesjvyO2+NV73yZfh98OZsXmz4q5gonlN+WZhcHW5A8Zzz9lwL9Y6w6/
kWX7dU5BsDBrbeHlE+PKRdnB9K4zRsAfQ55BdzW8gcfai7HZ/HnwK9kstTj+
BD7a37cV+z4Llr/0jtJRXH4cbL/O6ZxYrtM5XyonM5r4m76gN4zsXZVntedr
36v5N/BGiem0TsxfdKbuWNpzy32x2UX2UR1QzlIOGMPe82BX5DXZO5jfK6sY
8DzfTnuRn3Ud6Sqf/AaODXaObKsc3wv5P8znBntT6YxzG8rmdRKL0X7wW8GK
zivEdq5qx0T0e6SWp2fAS7DWR/EClmP00DvGFiv63qrKn4nFlHxStbUDvAq8
kMda8dhyhvxE+a+H59hpnD8wtfUcvV2wmqfccpfn7aKKh2A+1wf5KMaz8E+R
HfIYmeXxrtq7H9nw1PL9gWCx/wB8d7B1xVF7t7POb5hYTnhIuTYY6rv0nv1S
87dVyLe5LRTLDRI7c6/ra/8++CPIU+WHYDrD1DOopvmbbg/mL6o7zZF/6z4m
n1kMzw+vlVgdVyyUhQ9JzXd2sP4B41H4CGTVFaOR5TXp6A13sr7LY1Z5rG5i
76X4rerfpfu293yi3KIcrjvnBatPqlO6w0TvbQ673WTf74PJ1dcchZ9m9Pbc
NVc5Dv5T8FjinGmp9Q2qm13Bycy7yBfQyUmtTp5wrvr5K/wMo7/nNNlT/lkP
POZ9iXJmK3BCZGet83wom+i9lEvWIFvm9pTPjHaf2ep5V/Vadbukx6ZitHZi
+U15Lzu1vuBDt7fqSN3YfFU9xibkmz1PDkgtL3VULHgMqu+YF6zfVB0fA15h
vj62GndBfhlbP7NU9Vq9BLhKeRm+SnkyWK8p3z7pdpYNE/L4QvhI+DzGcvVI
idUN1dxN4Fm3oeyf4+cvS6wub0VeImN9jnJLBeQVvK6pN1ieWp0vjSzXe4Nq
7sOK+9n6Dvhq9m5EXjRjNVv3X4t8P7wSshn6PXTyEqtNs5DHyJf5HUrCs/UN
qifwvon1dfqu1L9R9WsbOBP5FrCU5yLluJt74VPBmYn1FKXY9672RXaPDYnd
cx3nLE6tbwroLEhMZ01ifYW4ZLqbfucedGbHdh/V1OXee5RFXixj77jUa6vu
f0vG/i/ov0MJ/WZq/VqRjPWlnSLri6swPxDbfdSDqadSX6ZarH7ssvcv6oVG
gH+7n6ifqex7defrwXpQ1fGb9Vy9cWw9ifroP4L1geq1csHZqfXg14LlT/Wz
W4L1e3qXLM7eGDznev+jWP4vWFzrPurR9N9BtXh+sDPV+/8bzLbqOQtzzv+2
obBD
                  "]], 
                 Polygon[CompressedData["
1:eJw1mHf81lUVx788F/Obj/cBRVKcTIlRDkzTLJPEVY4IVEBA9o+9Ym9B9gaF
nzIEWWquHJm7vacz0xQUxVyVopZZfd58Tn+c13PPOfd7xxmfc+7Tov/orqMq
RVF0a1AUDfX79bIoLhbdlovidtETok6pKL4t3Tcl/0HIGHcVPaRxe+k7iE4R
bRXfSL/DNP/L0t8n/l7RNzS+RPSIxr2kv0bjfqKHs7+7VOPLQjZT3/ZOnvsd
0RkaT5VsZtVzOAtn4ts7RedoPFGyb0n3Q/FfED9F/JXie4p6iH4s+U9EvxSd
K/1s6QdI/l3xLcW3Sj7nLdl34OxfEW3T+CzpRmj+ueJ3it8hukDjC+NO46Vr
l3zXmaK9MuiVkh1X2oadpRsXtv1R9hk521Wi80SjpTtRc76Xfd5p4ruI/7n4
X4suTt7jktgPW/4qdJM0XiLdWs05tFYUv5DsQo0n49PSdx6YvCZr/5S7iZ8l
vr/4WeJf13kHiT9F/Grx/xQ/Unxn8b1F09lb3/xWusdEj4qmyBdTRZ2kP1W0
UbJNojtEx2vuqPi+i2iMxlmyDdLdKKoXfUnys0V3a9xGuklxXtY4RPyQwmtz
J+52vaim8TrpP6l4/a9Jf4P4htINjvOfKRqqcQO+kW6tqCDe9HOSdJvFH5Rs
8zPErxLfVPxY8ROq/v6LohWSr4yzshZrcmZkzYNn7lLx7+s8fcXX6fvl4pcR
g9KdXnr8XsX3QbZFfGN931/8WaXP+N+K92S9B8V3TLZZl7AfMUJsoLtO9Kbm
95N+iPabK/7tin3QKYi93q1Yd63oHY37SDa46hhvFfFIHF1ROldOkuwB6eZj
E/FbxDeVvX+THYvEzxx9v0D8UeIHiD9Hc8eK5mu8XrJGmt+u9Nk44xzNXSg6
Urrhkn1Vuj9mxxIx1ae0D/ElMXOPdN8XtY34vYi1xf9da/UQ37Z0DnF27nCX
dIPEXws2if9d9n26i36v8aWSLYozsDf5y5zLJB9Y+tsns8/EWfqKDtMdZkq/
UmvOFX+Q+KXil4kO1ri96HGN10t/A/4n/0QtJW8laqxxN+me05knZfuF2CRG
yZG2mvOwxpsl2yp7Hiv+NnJD/DLNPa5mGePlojmi2aLjJTsh9rif2C689/kR
72AYWMY3fLuBnBR9tuY92esW0Wmlc4GcWK/5WyS7GSI2wwYzwNJk28zkHOJX
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
                  "]], 
                 Polygon[CompressedData["
1:eJwtlnlUV0UYhm8gefXnJcU13HAPl/zHpdJSS620xSw1W9wVt8ByQxFUVhEV
wQAFQUBAc8Mtl8qyU6e9zmk9WamltptatrhlPe+Z74/nnPe+883cuTPzfXPb
TUoYGR/meV4mRMCqwPP+wJgR8rzV6DWwyfe8MtoOhHvei/A8z8W0V6Mv0X4Z
rkB4pOfl4hXQlkxMCmxCH8TrSFsn6Awd8TvASnvXdGJ+Q88jbhX6HPo8LEUP
xRsIg+A9e0ceei2s0VyIeQZuRK+nfQMUa954iXgX0L/rPTAXryVeW2gDO/Fu
ZR49YCu6Gd4AdC26A7o9xMC8kBtvEToJFsM/xLRjLnvRZbQV0K9Q40Ala1WO
fxRqaJsNYehrfOu/UETf7bANdsA9tCUTUwWvomMZt5pxanz3jv14+2APlBLT
CL8hLKTvMcabiJcEt9PeD+6AKtqqiClnLkd4fgU2E/MsRKGraa+BLRBN3M2Q
gb7AeF3Qk4k7ib4CVyE5cN8RTt8IqAOFePmB+yZ92yWYRcybeI/TPhamQmbI
rY3WqNJ339iV76rQ+WB+L/P8ElSE3Hu/ZZzTcAqWMFaifWck8TFaE9iIF9Cn
AdSHePpl2vzj0F2J6QZr8XIhT/tle5lle/0cegU6O3Cx6lOOjtQaak2YYwuI
hh14JcS3RbeBGNt77cdi+nzNe6PsXOt8V9g4CbRXojdDLP4t0Mt357UErxRd
yhrs5rlWZ9ry4hzjnYeLlotlilUuQsi+VzlYg94KW6AZc4qCEvRSxsmBVXCV
Phl46bBMuRNya6i1TKftLO+YhteC5+awDO8XvPboXPwl9LmI9yf8BU3wG8Mi
++5JxHyEHk7ccvRTtD0NnaETJNF2nbie6OU29tSQWwutifo+SN8HYJjmaOf5
NvRrtB2F1+GI8hWvJ/SGRcRMpP8EmOO7eX5OzMPoh+BJGIn3Gd4H8D58aPPU
O95GT0BPhDthCd47lo8p6LH0fwL+1rrjbcBL5TkNTuNNwpsMM2AFbV/gjUA/
AmO03njNiG0KC2g7w3e3RreCltBdY+PND9w6J9PnBM/Hw9x37AlcnVK96gQL
iFkIsehuyiHVY2IGMc5AGOG7NVPu90H31rpYvr8QuNxvjG4KTcyrtbyYT9sw
4ofDOvRKOy86N/8Frj42RDeC5pY7Wqsh6MFwt9WwA3g90PczzigYDTND7jtz
AldrVXNT8R4lbhQ8ZnuUrVqunNH5hh8DV9vrouuBbzmTozqGnqt5wE+BqwfK
i76MPRiG6DvwWuG1hstWm84Gbmy9Y77dN8p5395xk+VsHfJonc4Y42QrJ+Eb
nXc4Dlm05RH3JXq07fUx9FfKNfQ4vFRIg5OqkdYnX/VCOeG7XC3F2wjFsJ62
dNUO9GF51IVii1WfDN/ducrzG8CDMLtzdQ/qHdk6i6q5Nr9reJWq/cpNy33d
yYdUI3TOtaeRbs9z0Ku1JnCdfuN53zjfrZnu5lm+W/s56J+Vx/Cr7dtsvDPo
7+GHwO2vcu9j9CfwaeBqgmrDNN/Fa38T0PHKXd2feCHmcgp/FnomTLfcmkr7
FO2DvV97rj0q0LdrXaFQ/wF4EVDX9k9eUciN7ePVg/rQn7H6wVDVZMsj5bXy
u8h3/yxaF51n1RvVne6QyFjf4cWhp8EUyMKbTp84WG3/Hfo/UK5q7L3ofbBf
9yIxY3xXK3Ru0kLuP+de5QzcB+/aGRpv9UV15oT9v0Sj74IBsAvvEByEw5Z3
ml+J7keOxzbluNZP9cbusI205/Gcb94uvJ2wPdzdb28wTl90H+gFi/EC4hpA
pN0tOqe7ieuC7gwdrTZpnYtUJxVje/lW4P7d9A/XP9zV2BSrhVNC7n7QPfE/
OO1WcQ==
                  "]]}]}, {
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1: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
TVPczsZexO8auBbf+R8lpBHw
                  "]], 
                 Polygon[CompressedData["
1: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
P0v+uyTXcBbORM75DHrLO4M=
                  "]], 
                 Polygon[CompressedData["
1:eJwtlndYV2UUx6/w8+mH127TXC0rRwMUULRMRMRsOtDcKy1zBVqZmuZIpdQ0
zVHmSNNEtoggCLIEFExjFJiCiTlSrEQMzbT8nN7zx+d5vvd7zvve95533VZj
w0PDPCzLioCG8KNtWW+7LGsiTIAEx7Ie8bKsh8EfvsMrxFsEC2ExPItXQLs9
bstKgi54xzwtKxN9GP814v2hH6wjVgRL0C3pry20g5V4IXhF5K9CfwEVUC59
wRZivxKLRy9H/2KbMcnYgqCWscfgR8MFYmXkfY0+jfYm7gP5eHlQoO8/SSwH
2qBn4M2EWfI95P5Bf5vxN8FTPK/BXw1rYTpeBe2a4j8ArWA13lFiP+tYzxD3
xfeD6XgP4j0Ej0MWsVO2abOLWCLslvdq3WKI5VG7fAihfR1jWUFuPFyyzTu+
RW+Fb7QuhyAIvYTYUlgGf9P+OnjQxzDJxdsOI9AjYRyU0i6XnBzwJ3aJ9x9G
N6CNBcXER5G3hVgVejH6E4iAA3hzoT3aR+oEubIO8FaiV0E4lOO56MsTytDj
dV0lay2P2aaOUs+f0JPwYojFQhzMB1+8PGJ/MbZ6mIfXB68vPK3vnY3XGv0E
PAbZug42ojfAeqi2zZp8FT0VpsGX5Jy1zdqulO+Ek1Ci375V6g3bHLM/ZPw7
0VEQDTWM5yJcc5s5+EzWHgxFD4FBsjZod4v4TWjsZb5xOTlXea6DFbr+C8n7
wTbztRFvE2zWsYzGewPG6HxI3nCdyxE6v//Q1w23meexeHfInlUtc70DHQkb
HLMfZV8O1vHlQyd0ZwiABVp7f7QfdJA5JyeV/vfCITjDevEmpyvv+ZMls52c
bZLLczr+PPRcmAPHaRtHm1hoT+wgbSPlvEHfRTwdfY7Yeeig8Wh0BuwXZJ2Q
N4nYZJgCA+WbybsB12EPOYPwXofBsgfUi4Ij6N/gAnQi9go0oj8bzuMlkjME
rx59DW5BMp4fXiE6njFkQTZMwGtCu/vhXsggLw280HdCY3jLMTXtqPtD9snH
eONkPuBNXddS01L6LIEUtCXzLGcBzxVw2m2++x3H1Ooe9N3gwD7bnBNyXhTD
VcY5QGqHLnCb77mJV44eqlq+aRh6OIyBf/H+g4b0l0osGK+S5yqohgTb1F/m
4Xlix/Fi8ZJkP2qt6vW9Uuej6BIoho5ytuFdRl+EGuir8yZzU0afp6AaJjqm
blK/+7SmAXilsg5sc0b9f1ah2xJ/EtrJ2idnl23WYk+ZK3KKFNHyjS7yTsi6
1fqOxBsFoyEMWuKdJV4LV3StNcVrDs209tK2AdoTPHSOqsithEtuc4/IWELg
lNatF/oFx9RK5qYfuj+EQgptkqGbnDfEDrjNGnLTzzPgDeMdczYEortDL70j
5bzvge4JwXrmSJ1r6acOrkAfvAxYKOsO5sv5Rk4m3n7IggXqdWa//k5pvpLz
UM5QntOIp8I++Ej3bzf8y+RFyRko+wbvZcfMq8zvOd1HJXjFMneOuYfl3E3X
fk6gm9NPC7iIjpU4sR48B+udKXdnoJeJnSb2IvSGl/SskHUvd8Vk9PdyZ3ma
8zRDv6kJbVtDG9hFXRPAV/fxTtvsYdnLwTpX8XKvwizazoYPIYVYhGP+bw7a
5i6VO1W8rnjPQReX+feR+2OHrBOY4jL/SHNk7tG9YYCMk5ypeOEwTddcpm3W
n/wbyD9CC/UCdU3E2WYfy37urutY9miQ1Msx/1LL8JbCpy7zT/Mo3/w5OhJq
mKsAnpPIe4/ndyHMZe5k+d6Z6klsr2P+S9ag18Fal/mnkXt6BvoDeN9l/n3k
X2AROptYDuSCzXsaQTMvE5P/g92MOxF8dB+nodfL+Ux8IITCEfq6DRqcino=

                  "]]}]}, {
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1:eJw1l2eMVVUQx+/bfY/dy7vsoUrvva5AAAFpSlUEBKRIkQCyShcUCGCB0JEm
SAvRDyaG+AUhEBKEiCJEgkpEJQQTiRqKIL0sHX//zPjhZP5n7sw5c86ZdmuP
nTZwak4URTVSUZQLXRCiaH0mipomUVSHMRU8C14+uDK4LXguYya4LrxmjK7o
noqjaA78GfB3g+dCG8P/IjbdSszb8b0eeBb4XXBD8FLwcnAFxpV0FD3MRtF8
eB3R3QbdxHgGvBG6wW07zpql0K0OfwO4pfTh58lmcBr8Hvw60MrIVIOWZJQF
50MzjArgPOiDtMmkwFfB5cDXofcYAfwbtGzG+KWhp5jngX+FTmCPDPgONheB
T8NLs/8t5j/pLAXYjk5FZNpmzA7tpbvoxKidsjvNc3tKQR+jlwU/hOYwLwOO
oHfcnirgAkYpcAJtwZm7gX9n/1rMy4NrQLOMquAy0FaJ3eU2bPtI7wB/HfQg
OouhS+EHZFqBe4NbQmsi0w76GTIDoKPgN4fWg98aWugykj2GbTH4OHS4v/s+
8Gvo/gC9wz0MBT/hKF+mzXdaIvMOtCf8PfDOIzNH50mZf+yLTUZvXR/b5sH7
ABv2Mp+t9wU/lzEf6JqxdbX+buh05s1T5rt/+Hvp3V5k3hD8MrSPY/F2xbbv
Aegat20VdAt7bIWehj8Y3Bv8CbhRYj55VOeL7S7X8/1DxQf8ldCtrvs0so0T
W28NvBv4RoTMcPQ6uA+M1j0onsDdoV0Uf+Ae0Gb+jk0UM4zW4I+hL/kZ+0M3
su4Gj9kl0DYpe9c5sfnJsthsWA1vHbKX08a/CW0fLE6yfK/rNtTP2H5NZQvf
Y77VVByCE3BDcGdwI/fbBi4r3W2x6Qs3db7W6op8afexnv6OuqtDsdmueB8B
7c63FvJxnSW29ddDN8fmb9s99mVDp2A+qtjqBe7BGKb7SizPyE8W+r7y2T7B
7JNtT8Ern9gdD4RfVnEEHhCMr3cYBC4JrqZ4QW84874Z0x0DHqx4BjdhtEfm
R2ReDxYDsqEGY5zeCl5Hf1O9bTc/o85VKbH4GhkMyzdHB7szvftqZIa671Xg
+zC3oSK4XzAfKpNYHlQsyD938q63cbMd0OaJ5c5FweJIvq3YqgWeBH8m/J3M
p4Fngyd7XEzMWP4X/234UxkTFPPwjiHfBZmTsenK376BbsnYPWyWX/v6M4Ld
i/infV+t/ZZqBfOL2FgGXJiY3mbwWXgJ8pegfzsWr8h9+03FNbrPpyy+Lnj+
OQd9A/0FGYtl3b/iWvH9iueWodDDzDsrh0OXuHwDZI/EFrur4C3MWIwvgi4O
Fnv7+T7Pa5xq3wnmnVLGVy1bBn8l35cr7lNW2w66zC9eE5XHJijHJmb/GfjV
wCPhTw6GR4Engau7/0wBF7m/VUks/2ivFfA+j+29VHN154XgPbH5pOJ9bTA/
kD/0gF8vWP3L5fs1ctFBvp0rsPwvP1+LzH3453XvyL7K/Aj4OjIPsvZepYPF
nOraitj4equy8Mcwz4E/GfozvJKqTdDyiquM1WjVLeWfWci8EFs+HOF4L7L/
sFeHYPlIeSmdWN1uBG9abLaFYDlf55K/9/cYUywUZ61u5/gdjoXfF5xKrI4v
1J7gR8jUDCavep4LPgB95LEzJTa/Uk/ymHEDXqVgNUu1Zph8MFgtVL7qFZs9
smuHrzME3lFwvmIKvEBrqkbKtmB1/UnW+hfdZ8WM5Vjl1Gf5/oC7OIHMePRm
xtYbqLe5gs5d1u+rfOs9T+7/d6tcE2yvKqplseVJ5U/l0SJ/o9Gx3a3saRBM
T/pNHCv3Kgdnmf+lnog9cxLrlWp5n5NCZmRsfPUptYPdrfqXyP3nPnAA9F/O
8hX8q+id9XOpd5J/qHe6VGDvq55nvmKWcQ/dftDLfNvvut96rVdPIT/U2Zqx
16609R6Ks8vIFSPTJzY/l52jlKv4Vj9luT6TeH8UbM1DWp99SiTW67WAfz1r
/n8NfrH3iuoZ93tf8bX3OQ/YayD0sL+13vy294H30b2ZtV7odoHpSFf7jQ2W
mxTXKffJVLAYVD4rAM+OzfeK0T2Ttvv5M211Wb1eVWTGee3b7vemuL5SYH6r
On8X/J3fm85aMlhu1ZuOCNZPqKbI7u8Zt/yt5MMn02Z/LvuOje29FNfTYzuj
+r5HyOcFs+9u1u5NPqZ8oJ5Ha95AZqLnVuVb5f80MuOUq4Pdr2Lhfe9zlAcH
+d3K/yv7P8KjrNVl9STVvC6pto6BjtfaKYv5con1hm2C9bHy/02qdcFqiWrZ
kGC9oGrrp7H1t6rpJYL1jjqLYk156SL2F3oeU08lH1PveqHA3kj/AvonqBjs
X0J2jnHblN/zPY6UG/8DOfp7eA==
                  "]], 
                 Polygon[CompressedData["
1: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
vgWLdSt6DvAYPoifzIgzn58c09zF/wCJZn0G
                  "]], 
                 Polygon[CompressedData["
1:eJwtlnlQllUUh19QxNfvk09wBRcEDbUyUVsVcUlNQTBxSdxQQHFBUHDBRBu1
cMsFE1zGlplmqn9bzEmtbBmnzHDGMtMps819w1wRtec39/zxzHfu75577n3v
PefeLyG3OKso3PO8CoiA+ijPq2noeTcDnncf+wE8GQI6n4KBEBP0vCRYgT2T
vlkwG170PW8kXGPMQWJMwB4B6XAebQ/aFeLOxXc6Y/MhF9oTawo+k+Eififx
K8COQx9L/0swDgoY1xYtG3svPp/BELRnIR6tCX2VjNviOy0BrSN0AJ++SWhp
2OkwCtqgDUV7HLs79IZmaFWM3wpvwTDNj88Y7NGQD0eZ91/W2RrfEfRn0z8B
JsJoSEXrD0OgBT4tYbjNm2bx3iTOLmhlMcajzYFp2FNhErQLujkysEdCpvlp
X8bIT/6QC5O1//ZNU7Bz4B3ivw2x5q/9i8Lugd0TkmEwWhY+o+Am33SYb8vB
DuCXqDXofKCPjX1COYA9CJ638xiPloedr3OFYdDL9nK49hxWE7MC3vBdDM07
SjGwB8EAaI7/BcuTNPwmwiTYDJt8d1aKG8IvGvraPmu/M+m7Sm7tZ+yX8AVc
inJ+feifAjnaR/x2EGs7fOC7tSuHsuAF7KFam51bKloX7KZBlw9Vth6tq87q
5AZz3oFT2L/CCYhk3Dn6d2MP1RyQrVpAT4cMyLO8T8HuC/1sriDaFcYeYOy1
gKsJ1cYM+pfS/wj9e2nvg1t2Xv/hl0s7z3d7sA/tFzgOl/EZrjyGs7amywGX
k8rtMcQdC+PgNv3X6X+gb8K+G+X2oBt+XSHJ1rcIbSEshmK0xKBbj9Z1RGeM
toK+8JDbD+3Lz3CbuMn47qR/B32/43sKkrB9jcHeABuhBn6Ek77z34nPSliC
XQaLoDOxFtgaPsTvK/gaHtN5oU2ECbaWBmgR2JHQSPuIVgmbsTfBBuiGzzK0
cliu77M51mOv0R5gf0/8Q9AA7Q7fdBeO2bcVahx+r8Bkq99OUIq9EBbAUnxK
YS52IczWHYXPb8QcFMa+0N4OPdDuEvNv3TXwDwRs7Bz6E+jfzZhPfXefKp86
oH1E+2PojtYELQDREGF39krsV2EVVODTLORia46LcI85jzN+AGvZgk8lHKYd
j999+sMUg/YqCKKdRSvGLodlsATKYA20UB3h8z72e/AJlNge/ISdyhwVtF+D
A7T3KwZ2FaTQd9R35zuf9jwoslxLQKvTWrUetHC0Y/j2Z8zrtNfDQdprdW6w
zs6vC34n0Afit412te59tMigW2sP/JKhJ5zGbzB+5ei7oBc+bdAvqX5Uc1Yn
9+Eqdq3qFWLxyWRsBpyxOh6r+wt9o/JNv5ZrtwLuLbmH33TVuO/yRXtUplyH
l6E3NEeL0Z2q/MWno3Ja3x7hHm7tgc7oodYF9eChTSPmVCiEvyyHdG7nsc/B
GahjHQ/htu2p9ra97ntoCiE7Z/k9HXLvgd6FNtA46N6KTqop1Qs8h09X3We6
O6y2GwZdnSsflZeNTdO8t4gdR7utchifBay1FJZDQ6tV5bRy+3Pf/e9Q7sYz
vgB7FsxUflida0widifoHHL3ge6krdhVUB1ytaX9aKz1qVZC7h7/A+1POA2N
bI4Z9ibrbS5GewZSsPtBrO3BfLR5UGL1qZqutf9BtQF3BtPsHdB7cIO+7+i7
HnD3kHLi0aC782rsfTlE/w9wxP6PrbQ7aQ/938C3vrub1qGthdWW49FoF6yW
Y5Q74Ck3iBlmdazcKNLdAfX4XbHcVS20JE5raGX12xbioF3I/c/SfynlqnJW
NaE3Y7HvakFxWqK1gtYh9ybpbWpmayrB3gbVvvs/pv8s72L/D7P1QAI=
                  "]]}]}, {
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1:eJxFl3mwj1UYx98f/V7u6837iiRFyDKWweDad127i+vKvu9LrhZLYy2lmqZt
+tsSLVQk2kgxGKnRUJZUyhJRibJvqc93nmemP955vr/vec45zznn2X5VRxcV
TCsWBMG9mSAojhwWBcEL4OnImmkQ9AmDYGwcBEuyQdAZ/lhOEOQzNgi+AePL
nNf4ePT6w9eBn498Hj4P+SDfLHAh8gLz+4CXoj/O9eui/w6/832dt/kGgtcg
I8Yng0NkLb6HwSWQu11nJ7Ivv58G90MWx7ZdcJuTIDjHXj3hA7jG7DGU8Yns
2Skye/pGZofsWYGcENu56qV2Rq05XHPhVzK+nDULwA/BN4TvE5td5+C3MD4E
/susfbJhJfx9jFfmuwm+wJeC+zGvDPJR9Msib8CXRxbCV0IWZWzeEr+T85wj
xaamcEPRacq3lrGlzGsBPw9+OtxY5DjtB3e3r98isj2ExVUITV5jbjXGxsPX
jf4fuw7fl7US8CXwMHArcHnWnAx+Av0B6F/I2txLyMr8HgvuxfiP/B4uP0F+
wzcMvA/ZPrJzNUb+lrU3PZe1Mel8jzzINxi8H1kavUO6S2yoyN7tsGFEbLaV
Bv8N3xn8BzoHwF1is0G2XOX3XX6fr4NXo5MLPoEciU5JxpaDH8/YnZ0BDwX/
jvwpa+scQZaL7CzVtSa/x4AvZ+3MOvsNZFXmz9AdhuYburfzendsbus2j+Gb
j05v1hkF7gxfnfFq8seM+YfOJ50OyNHo9ELWQOcae0yF/xd50+/2etbW6YLO
/eiU5WvmvpF6vChuKoY2V++qd2yJLJfa3egt5GvlQjuL7jTX3ygP2QT9buDT
+N4hznOePSvC70vsHvNiix3FvnLAr+i9gXwtsbhVbL6PnMu6z4DnICcxZxSy
JTZMQi7K2Bn+ZE515QnGx3veWBxafCnWzzI+hr1ngPOYWwT/HDqT4dZ7/K7T
e4bmn7Pk7+i8Ap4d2fsrjnZkLZa7gk9i70z0Fmds3b9zLKbeZK9Jkdnbw/ea
De4KnhWbXYXgac53A49G/0XWeRhZL7T8UEe5Cp2XtT78Y+AndSb0cz0fKq4U
F3qXO+EbO6/xmei/Cp7LeGvNVy6K7Z3nKa6R3fnmZMyfFoV2J9rjIfQeQXZM
7Y7Ez0JOdb4TfEPPCfWRzeD7gW9yB0We/wch26I3hfEpjE9FPgs/TfP4Fuq8
2j8yO2fE5gN9wVeQS7jHrdxn69h8Sb6xAu6Ux+D2rMWF/Ly4fJh1jsK9576g
PN9VuZG1NsGvhT+eY3l4GTjLnCqM92eNAbHFX0m4epH5fBPkP+h1hB8ZWx7U
eYco/4cW+6uytqb85yKytt9nA+Sg2O6mFGv+kmN+Ln9P+N0IfnBsOtKNUqsH
evdWyMLI/Gok8hF0FqLTWn7iMT4ytFq5AFyAzmB/04GhzVWMNEW/RWxnX8M5
moM/Um1MrOYpvrZl7a31LuOZly+/AfcMrW7rLPKRYR4XI0LL4aoRzVl/gsfg
AmQx5j+Ysffa6Hn4M+QT/u46g/KX7B8cWZ9QpLyVWj3Q+lPly8zfzLwPsHO6
12XpdY0t3x+E/ws5Gv4sslpqviUfk46479CplVpdV+/R02uc1lfPoD6idmr5
RHeZC24Tm09tSgzrbj4FN/S6r1pfwfNhHfBJxoqFltu/dnv2ID9PrLdoG1sd
V02P0Wnj96W4uCc1v1KebJTa/aqvKMXvA8z5IrF8JL9SvyOsXPhWYrW7AP4a
/Mdwg9TbMG+DY3GXGfsAuVq1mPWfCi1+FafiV3m9U+3bCG4f2747ErNBZ6mA
3M7vvfDtYottxXhJnRf+MHxH1fbY3vnDxLDebj34DF+GffPh8r2fU4/R0u2/
qnyfWK+m2rrB4129VmWvazXBVTyHyGfKuo/J1/ajf9LriPKSckkHdCulFp+K
WfUA/VX72GtPYrW5U2znVY+wE66C11nlRvUDquGfwG9LrP/Q2bck9sZ601uJ
5Q3lB+Vw1YouqdVcxU0x8A+J9Tfd4LrHVvN/Tqzuqv7ewdwgtdqv/FPgb6Qc
WMb7NOWZ2HOFcsLFxHo+9X6Xvd9T33UbOjW89o31vNQlsryn3vUscmBs9aRE
av6hPPAua0xE7yV0HkWe5ncQeg/m9Vr250QWy3pr9cbygeusWdzfKIusBD8F
XDuynkb9gHpD8Vf4fcTzj3L7pRy7B+kd0x27L+ldksj6KPUJNTz/KKfKn3uA
zyC/dTvlVw/ElvP3wvWIrcf5zXtm9SG57kv6fTyxGt1dfVqO7S87jib2RrLz
MLhDbL3kV4nlz0L0b+WYLys/347c7bHfOzYfVL+knvRUYvfS221TD7susf8F
ys31uf+tHlOKo9Jes1ULtK/61V2M95SfgU+A/wNtL5jE
                  "]], 
                 Polygon[CompressedData["
1:eJwtmHm8V2Mex89PnZPf09E5qZAirdKK0r1tupW03ZZ7b+kq3fZFWqSNZB9m
htes/pYYUxONKCXDaDDGEs0whilLKpIlFCXVLZ+37/eP7+s8n+f7PN/zLN/1
aTl1QeX806IoqihEUV19D2ZR1CCJopnCLUMU9cmjqLdoYRpFN4ieFf/FOIqq
GS/+VaKxois1ZnBucy4QfZuZrHPUnqqx32rOh8I/FqOoUvh54T8JD5DM8cLv
Cr8p3Fcy5uj/v1DfBM19T31fxybjbOHTRVVqv66+fyBP1EzjzxWdk9haV+j7
+4KtmfWwl+80fqfGHtL/RwqvFX5EuJ7Gd9D4eerrqrHH1HemcCNRU+Sq7xrx
vtL4/4t3XNRc/bPU11q8SFSu9rPibxTv76Jtsa3vuczOiLN6VPjPwm+JPlJ7
gvqCeM1F09X+UH3/Fq+f1rNA8u9W3zXiXSF8vfBvhacKXyiao/anGv9OZmvu
Ikpy20t7ta8T/6D474pfKnyDcHvJqC/+Ke1/rK/38czulHNaonFLRV+KP0z8
9eL/RfxBua2Bf09zor0QuaLNGrM1tvt8Su0S/199/e9r4UKw/+0U/z/Cg9EV
UYlkTteYl9T3tnhjNKZW/35SeK/wHtF6tc/S2MnifSL8X+F5wvcK3625Vbnp
DLrznmi72r2D3WUn8VPXyWVq31EwXR0ufLPwL4WnCI8Rvkf4PuH5wg9JxiOx
2cM+redl4e3cjegVtU8Wba2s+dXMdJC75s5fUDuXjInivyX8Ymb3wX3l+sd3
mekwuvym+FtdP8bxr9hsCx1D1w6IdmRmM9gO97lL7cNFWxtrXCXcXfPnFkz/
T/p5TRF+Rfy/ZaaDr6r9Wmy62dDX973wx+i6cI3w++xBuI904SrhF4QfEG4i
/qSC3Ql3g86iu9z5Zr/vhcJt9P8DwrHw1cIbxV8j/LnWO1R4tfBK4RGp6ftJ
4f3CB8QfLrxJ+K/CT7t97BI9o3Y7yZstfh3J/0z4SfU/IVrHeNGj6tus79Oi
x9RuG8w2sdETwhe5PWDT2PYn+t9g4Yc1/sHM7hydQpfQhTZ+HifE/9TPhzPj
rI6p7wc//y1qb1Bf4vtFR9CVZtiI8FHhvcKVuekqOnudeKmfH3tkr+9ndhfc
CbozWuNHiRbpnBaLvuEfiekQtn/C/c95ohai77We0eJt4EzE2y2qjW39x3wP
tOnbx/4zO3vuoLn7H9a813lH3T9zXw9nZiOTRcNys50hat8sflv9u65whegu
tf+ovuXi7dGc1sKtROeLyrWH4aLP1f+F+yvssyDeV8Kf6X9DXJ+xPfZ+h3h/
KNgZdNP4Bfh+9R11/cKfvoHPcXtC3/fHFiuG+vpGa3w7yarhHIVLiQ/CpaJJ
7g/miNcT/yZ8p3B1MP6MxHwTPor4QhzoKV6vYGv4QXRpsLVtYV+xxYgzghF3
zN3C20RMiC3GFYP5d+Lbb4QnBrPRl2LzcdguOr/L72dwajaGDOZie93Yk+bf
KP4Vwj2EJwjfIzzG4/Xtwr8SniHcVbjK48lI4f7EcuHbhauEB9Anaq/+i0SX
iMY5n7g+nLsXdVZ/F9GlPmasx376qjX+loKNvVx4nvBt3EEw/cHXTlNfr9zW
ND1YnGatk4KtnT10ym1N/Js1dBQeKRqRm41iq/igJ0SNg/kmYg6xB53tlVp8
uUntgdiI5q3EzkWjyAGKZvPYPjazp2g+Dl83ghxFeLdokNqP4f9El0nGZMm6
VX0jguUM61weuQT+Z4vHi9LUbAbbwed1F64X7O6fcf9EDvBybD4f308fvgs/
wlhyCGIzMZPYucrjETbSLbWYDZ+c47j+39T9DfHvn5npH7q4zf09Z7U7Np/G
mf1L+B3XR/73nMcvcqo6wWIWcSwL5o+QQexIXbeJycRmYkSjYD57k8fvnqnN
3eb2gIznPX7iI7FdYh6xaYrnc7UeT5GxNjP/d6fO+9fqmxVMHypFZbnpLjaK
rT6k8efn5vPwfRs9BrRQX5nmL9GYvhp7JvoqvKJgesx5cxdbPHacyix/xEf0
ET/KrY8284k/bd3v4s9a5qbL6DR6vNb3Tww7or2cJn65+EuF+wWjy0WF3HgX
4kc9vyW/a5WbTGRhG41yW/Mwtz18WKWvH9/WVLin21u58Lm59dFGP89W+yzR
wGD+4VjR7pZ8bjWxQ7y+7j/IwxjbW3hZweYQsznLDR5nW5NDiX9XwfJxbBrb
HqW+tuI1wY4T89FlwWyOfyAbW8R2l3v8w4Y7BIvJxGLy9Vp91+g/14vfA3+k
8fPdf81LzT/UBMtByUWJochC5tDcdARdWSw80McscX84yePWUuHfCc8OFsPo
o32tqA1rTSxmENuG5CYLmQtSkz8zWFxCN6s8nt8v/tLUcgb6aC9LLWde7/ZU
klqNg3/a6jkYMZ24diN+CpvS3M6uL/hhYupQ4eW+njrovfufaZrXILc5/d13
k9N3EX9RwXL9INzV94O+FIVPz00H0UV8/Bi/b+Z3yO0uudOZqdUQ1BLj1K5O
zWfi69a5PiCro9sXMlf7fqkZDhbNJrHNVbHF0DWes1W7/XcMVo81Fu9IZrXi
DOE0sZqRPnhNEouznV3/iWHEsoaiixOzaeyEuDUysT2wF2Qg6wzRoczOhLNp
SK6UWU1AbcCZc47UTp1Fse+bM+FsuiV21tggtlaSmG3iE9h7y8R8BWeMbbIe
zh4bxBa75xY7Sjxek3OQW/ycgyRmw9htM7cfbLK5z+eu+yVm2+gAujA7MV3F
prFdxmPrxGBymYmJxeZBwWwRmcjGxxD7KxLzPRczJ7H4ShwnBhB7yF2JDVe6
/BrPf8p9/+MT2xNEm3j9c+4RzJfh0/AV6Bi6zPmiewX3x+hwHc8biO+LEnsz
gGhjc9jeeN//VOELsOXUbA2bq3Q95vyRiWxyAmq3WxPLFeb6edxE7pkb0cZf
4IsmpKYP6BC6NNnzD3zEMD8v9kOORq5W5vkMPmmA7xdfOCuxtwpqLmovYghx
Y5n7I3LiCs8/yDeoOfbKPq4OlvvN8fmV7k/5R5nHAWILbxjkSPgUfMsK7iFY
DXCt+O0Sqw3wYfiyRaLFwWo4ajnq7dfUrnB95s65+0Nuzw96ftPf7wsbwpZW
ev5CPtUjtTiEfmOD2GKN6xNvEvhk7oi7muaxkbx4PrmPcOPcfDq+nZqA2uBj
r3cOi47HVq/wbRXsPYUcm1jMeZJ7v+32jI9oId6XXkdgs1083mEL6DuxiBqU
tw7eIKhNeVPZ7nUZtQ5vCPs9/yDf3uf1EjUjcf514R1ej1H34UPwJdQslant
gbrrsmB7w0fhq9gze8dn4jvxk+g/byD1EquRWQ81FrUWNRG1UZbbWTH/kmBE
G5mHNS53f8GZcDa8IVDLUtPytoBPq+/7LfUcgtg5N7HcAn1gT+yFWpYaep/X
yeQ2nA25IzkkZ/SGcN3Ean7ya97Mdrif5i2NNxDeQnjDqB/sjemb2OrT9n6H
nGWt3y1vFrxdsN7zPJayPmo8YiqyeevgfvkH+Sxvhrx7fJRZvsD7xo8a84H3
HfH1MhYd3+n5coNgOoIsZP4vszeyYmI2g+1Qh56KTWanYLpEXyePA9Sk6Bi6
Ra36E4JOfZ0=
                  "]], 
                 Polygon[CompressedData["
1:eJwtlmlUVlUUhi8YJh9XLormkDiFmuSUDAqooQyKIijOOCCaaIpihppZ2eDq
V6tp9bfRLGtpow3aZKZm5YCkpuXQIIKIM2JmSs+7zv7xLN77nn3Od/a5Z+9L
tznlhUvCPc9bCxGwNOR5z4Xxt7nnlcNMnqfBfPQaeJaxcp7fDjzvfSak+J53
PdLz/oVl+M8zvoK45TCX51CM592LHgD9YBrxRTAQ7TPWEqIVQ+wASA+5sQCv
Av0C6z3K82p4gOe+0AeSoCteBHHFrDcM3R7dATpCFNyN1xv62+8Ox8uAEbAM
rwxvkUB3xesG3WEp3uN42ZAFqXgz8FLQrdCtIRZy4RG8VbASlhCTxr5SYbrF
xxCziOeFsBLW4hXirUC/SG5P8vwELCP+fhiPnqAY6ElcDyhA50MezCEmi7mZ
MB5m4CXaGdyHHg4Z0AXvLhiDHg05UELMed7TOdjE+9vK+7uBXu67fY1XPqy5
Gh6Dl9lfKf4zyo+YSMb7ovtAAky18ytT7rAYhhGTBnO1V5it90ZMb70PSIBJ
ePPw+mk96A/T8ObjtdV83Tv0Heh2kKg7AW1sLAO9wHe5D9DdgYHQB6bjFWlv
tl4T+d2C3eR7hHyjmTsbfwTjdxLfCeJgF+M74Qc4RFwGMReZdwE85mzDe4Wx
Op7PwKt2/y+ha6EG3sBbj5ekdwEH0L9AFXzP2A5bO4r12kOHkKsb1c86xnYz
1gzvY/QX6C3wNaSz1pd4p9E1WguG4l1lXgNsZOwzvMF476I3oweh/2PsJtTD
WdhgY43KC92TM+gFt8M44i/hXYTLEOg+4GXCceachBNwgLEhvjuPT9Bh7Dcc
rtqcQt/Vseq5AB2OV629Qw1M1HvFa0Rfg38C926q7KyOwnBi/tYY+jo0wRi8
qaw5Bcp0P60udddK0BP1XqEEkvGSIMXGdP9Uv4M0BwZbXaYoFrJD7j7ctP21
Q8dBJ7gRuH6ViE6GJOtNQ5kzBGZZ71G9xcMC/R6MtHpT/Y5VL0QXED/O7nGS
rZdud70z3jz0Qt/lqFy7QGcYi+cxVsVeRhKXA6PgYes5mdbPFqNL1avhHquz
UrxCnieEXH2ozvK1byi2OpqJVwyzrJfk2trlvutbi2y9KXiTddZWv+qTeg95
yhHyY1x+yrMo5Pqq+oH2V4F+CB60vruK8ZfoL0/z/BRU4P1oNar3/xP6Z6iE
3/B+hz8hi7FDeGfRI313PjqnYei9ePthH3wTuBqsRG9DfwfbVbPW91J91xfU
HzbjfWV19qlqSfUHn8MW+60c+91z6HqoM2+regZ6F2y3upwArcgpFlrDlcDV
R1t0G4i22jqPF4UOQXOrwQ/w/rA8P0R/BIfhEt5FOA+jfFfXqu8WIZej+otq
9Rh6L3of7A9cDTbTdxJugz2qK+Zdi3R9RnmnEZMPYYy31HfZ7lqItSNVG7au
aj8bXY0+A7WqWetrv6IPw0HrneoJ6g2Vlk8suq3uPsSHXF/QXib57jt+C90E
nr5bjHfXnQu5XqEanExcPHoU5CoX4qrJ4RS8xvg6fiORmDetB5+2HJVrsvoi
3g7YCesD945i7Oz1DhqUQ+ByUm4X7Jz1TR5n31B9S3vxu8fUuxiPY3+9IQFy
ibuCdxUadF+JCSc2DJpZD9C3W+d3ivEWPEfCQeJimB9AR7hsc/Ub6n3qgY0w
2ndn0MP+p9H/NucC9y3LRG8g5p0I18NOwHE4afvUXJ3Be+hNsBHeCtye9XtH
0EdVZ/C6neVf9m3RN6YW7xZeHvF1qofA3Rf1pFp7rg9cDe6xWlBNfIv3P95I
TZ8=
                  "]], 
                 Polygon[{{4102, 4101, 3157, 1569, 1579, 3159}}]}]}, {
               EdgeForm[], 
               GraphicsGroup[{
                 Polygon[CompressedData["
1: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

                  "]], 
                 Polygon[CompressedData["
1:eJxFmHlwltUVxt8X4X3hfl/1YtVWnXbGOm2nddppp2Onm522U6e1U9vRaV3r
giK1bthdq4JUWxEV2XdCSAgkBAiBBAIECIEIgbAHAoQdZJGiIAIVivT5eU6n
f5z57nPP/e57l3Oec8697qG+tz/VJUmS29Ik6arfHSFJWtQu5EnSEJNksXC9
8JksSSqFP5CckswrJsl8yWm1f6Wx7Rrzb43dIlmu9nmNnyFdVkiSbpIo6Vmw
OZjrrGS62rM0fqbG7xYeI/yO8FHJv9Q+Lsl7Jsnjmn+fxjToe8fU91PhVcL7
NO6s8N3CW4Q/FB4pvENzdUpGq71MfbOkOyQ8MdqaWfvlWssnC/aNn+n/61L7
9gDJaLVf1/g7pTsofEDyntq/0LiRapdJP0T6e9Q3VHMNkUxWu0wyRLJVug7J
ULWXaPw8jd8lPEy4q/bzsObpLemmdg+tYWNqfeguaPxW4QeFuwiXCVcJT9T/
H9D/Dwm3CV8rfbPwAsmX1b5Bsoh74RvMLZmv9jOSOv23XvKs2u/r/xv0//uk
/0j4iPBa4euE1wjvFH5L+FPCy6KNYez9kkTrmSx9pfQjNN990s30+1sk/Dfh
gZmdHWf4onSt6rsmt/WuVnuY+iZLN1hj7oq2J/Y2QTJOcnc0HWNe0tjx3j+K
OSX3Sl+p3yrJXMkejVmpsZ/R/G9Jt0JyVW7rb1F7tPTl0o/V2PvddvtItzc1
Oxgi/aTU5uc7D0Yby3+el3699EvU/qz+0yZd72hrZc2TJXXS10q/Se03pXtY
Uq52meQhxkpfIX2FcB/h30nWqt0m+a3avSST1B6vMcM1tntPs3lsfYGkQX1z
pdvPGI1tF24WPi08VXhQsP8yxyPCc4RrUvsG38InNwvflpuvlvh6Vkg/UHiE
3wfrfYzxkjs19i7JOfdHfONLwpuEV0k+p/YK9XVw9tHOhjNah+0Kv6a5BmXm
L23qWyzdMeEp0q2XfFH9X5CsVbsvc0rXKvl9NB+GS+AUfLtFeFFq/jxYeJpw
dWr3/xS2IzzBz/dx7l94ofB67FB4r+Rbmuvbkv1qvyBpkG6BpL9/D+74rvR7
hAvyxyAp6A6KkvHST5G+UeNflP5t4dXCt2v8TuEa55cW6V/y82b9N0rfKbw5
2l7Zc7vaXTT3NunvEN4hvE3yc7VvlWxXe67bU63m+4PwBj/v6yUb1f6HpEm6
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
1cC1Hk9Z338Byld6Tg==
                  "]], 
                 Polygon[CompressedData["
1:eJw1lnlQV1UYhq+lmD9u9SMdNSvLlpn2fd+zfZvKxl1LzX2vZirLXQQVAcUF
hRSDFEQQoRQBTU1l0VwQ9xXJyg0XUlRQ7HnnfP3xzLz3/b5z7rnnfOec26rH
kDaDr/E8LxwaQGbQ8y6FeF6873mbAp63GZai+zb0vEfgYThLThV8iP4A3oPF
5AzHW0XbNLWBZTAd7zBeProQiuArvGy8JZABY2kbjbcDPRldQM4KiMXbhlcG
eyCaWBL+XJhAbIP6QA9EL0CPJj4IPRiGwhD40vqNIpaIrkD/CcdgCl4MHEAf
goMwjZwE+pwN8yEf7we8JeS14zs7QHuoxrs+lDb1PK8Tzx2hhvxw37X5jvgw
+B6m453Em4OeC0lwBN6kzRvQGjJ8l1dJ3mk4BeHkVNPnJ8T7wX7e5fPOw/jl
+hZ4BT+ddtPgOG3m4aXAzxBF20nQS8/EZqETybuBNo/DE7CC2CS8LTbPmu8o
vAl4RegSKIaJQfeOE+gLUA2T8GbjeVp/dJbmCWZo3aG/rcso363XOvR62Kj+
8GYqF+KtRmLxMmmXAbmw39ajDL0NKuBB3rUUr7d900itK/6PVmtaW61xufXX
x+pE7+uL7mdjrkc/DSEEfgm6elPdxdk86ts0l0fRU/GSbV5noWvwzsF51S9e
J4hFj7Pv1vePVp94K2EtRNBuLP4YaE8sWjWCl4oOMoYw7Su8GXg55GTDmoCr
G9XBQkiDdNufM612NUdT8KZCHIzDy8XLg+XwDV4M7EPvhd22j7S+hejxxCIg
UrWqGtTeV//QBS+VMSyASMtXHXymedC+0BoSiw+4/bsLbydst/3Wwb5zFPGp
mlt9P97v/8+Hxgv56MF8f6Mwz2tGfTcPdeuZaPOo/EXoneiPyMsi/xzP5+EA
3jN4adpjPFcG3Bl2lTZ1cNHm6mu8rehSyLQzZz9eG9p+Co/BAt/NwTTiiyEL
upKzlz73QAqxe8nbZXVQS/wKXNb48MbgpaMHBN0ZpbNqA5RAKQRou1I1Cq+h
X4WXbf+uwWuGbgpNYI7v8rS/F6FP0/5MwJ0br+OdQNfCZdvTN+I1hptgvvZd
0NWn6vSM1VUS3Eb8dmgJRdpD9k1b0aU6b827D+8BuN++V2fEZvqpgn91Tmu9
tSYwj9gd5BXjTdTZDN00B9q/Vh+qk854OTqj0N0tPtx3Z22C3TW6c3bDrTY+
jVl6HXo9FKoe4Ba8FtAc5pKzNui+XXNws3n78J5CPwmP2vrqHG+L3k1sj9YW
NsHdeMn6RvSWoDu7khlfCqTa3fKTfWeJzhTYCON15kNHOwOGkbOV5y3wh/V7
AP03+i/4x9Yvw/prhb4L7rT5S/BdnSxD58JyqISTcAret7u2se4B7oMBPPeH
XN/dPQV25qywe2sh3vM2B5qLQ3i12sPortAZslU/9HeI/rrx/Dl4PF8HDaFJ
qNufAfZnJrlvo9+Fd1SHQbcPtR8bkdfH/g+0D7UfLwTcfOu+rLLxn8W7AnVw
GMrhFLxl/ek/Yg3jXw2/6Yzy3XsVP0rsGByHkTACRgXdf4fy8tF5UGDnQqrv
/l80rvqMvwGEQFPGWsH3DsIfCHm+W6+Wtj/usXrQ+fIc+ll42vqbDw+h43Q3
hLj7aDXjXwXFAXcf6k5Rnu6rMvR22GHr8QLeS/AiHMQLYyzljKU3z710J4W6
c3yZ/SPpX+lb8uox7p7Ev4Duegc5Lcg9QtuPeR6q+9x369sFnYO+lnh9uIR3
EWospjWPZKwR0M7O8xj0VXQdeLyrh70jGn8yzAm4862tjUXxX31XI6qVODvn
e+ruJG8Esf8AmvSeJg==
                  "]], 
                 
                 Polygon[{{4286, 4285, 3226, 1803, 1813, 
                  3228}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0M0uA1EYgOFvpq2ZqdqwrI2kNgQ7liyVlrY7WxfQxl/8/1wCCTciXIUb
YVWJPZ4hmXfeNzlzvpwzc/ujwTCJiD18iHW+TyMesKmfuc+NPGISPV3nArs6
5ww7usZVdHWFU3R0kpcfRmzTTxaxxd/c5jfzN/iVX7Cmn/gRy/qIDzGv+9zD
rF4p1zGjp7iBuv5yh/I+B+an5X6u8DGfoKpP+Qw1fc4XmNCXfAVPXHvdZH/H
jlu+Q6ELQ6d5gRfR1B3uoqWHPMKSHjvIJ1b1e/L/f38B1Wsfog==
                "]]}, {
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0MkuA1AUgOGjNt00iKmlFl6DhHdoqZoS09KwYlkJC5a61OqkplfwIqw0
8RQSNr6bLv78f25uzj25iwdnpdORiNjEZybijmujEZe4111+5LdsxCt6+oWf
0dVP3EdH99IZ2rqTjJZu8UNCN7nJDW7wu/l17qd3cKuv+SrtoPd5Dxd6lVdw
ohe4iCP9Z+9fbOtvLnHO/DKP8RqP8wTW9SRPoaKneQYbepbzqOoCz2WH/zLP
RWzpH/MPOe/tAo71Ei/jXO/wLmr6y90BbvRHZvi//9jcK/I=
                "]]}, {
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0Mkug1EcxuG/VIxXYUfCVo0x1IqExK5ba+ONCNfQUtWKoS02rFoWJLVk
SSIx1dQb8CQWvzzv4ss5J1/P0triaktEpFVLRDxyuTViRW/2Jpuc6YxI6dee
5pR+7ElO6Nse55i+7FGO6NMe5pAadpIfHOQ7c85/4ja39GBvcF139gLndW0P
sF+Xdje7VLFfvftFRbvODPMdEVkWuMMiD7RrH/JIOfuYJ9qzSywrb1d4qn37
jOcq2M/OL7PN3e26sHvZpyt7lnOq2ze+vdW9XU38/98/eTE3Qw==
                "]]}, {
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0EsuA1AYQOFf0kpMmCE60SFDJkSLqgbxLhOaVGIBbEBYRTfCiKSbUIq0
HototfVIfI3ByTk3N/nvI316XjwbiIgj3CQiZiyOkxElLOgLXuWPoYh35PUb
v2JFN7mBnH7hZyzrJ65jST/yAxZ1jbN8zxmumD/LV3yJaX3CZaR1ljMY1yme
wIjuuWsXg/2zuI5fb6hyiwvmt3mNP3mdN9DRm7yFrt7mHfT0Lu/hS+9zEd/6
gA/xo2vmJ53Z4jaG9ag7jfXRczyPSX1r/w5T+jrx/79/g6cwpg==
                "]]}, {
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0Esuw1EUgPHTxF/ULpCwEaWtx8CAGBGDRid9oKJFJAy9HwtgRGIVklpI
1aP1XoJfY/Dl+25u7snJHVopz5VSEbGImyRi32G8PyKDQ13gK94djNjBpd7m
Bi50nbdwrje5hjO9wes41WtcxYmu8DGX+Yj3zD/gIq+ioXOcRVWP8SiKOs0D
WNZvdn3Fgn7kJmb1PWe4lY6Y4DZP8jO/INt7yx3kdJffkdcf/Ikp/cXfmNY/
/IsZ/WD+PD9xG0u6z05Jb389zCOo6Fv3d6jr6+T/f/8AU3sxzw==
                "]]}, {
               GrayLevel[0], 
               Line[CompressedData["
1:eJwl0DsvQ3Ecx+GfpU3QKuJSmzdAwhuRmqw2S72DBlG3MlRSd0YGiRrZGDWV
uIzul5mEN+A5MXzyfM8Z/vmfMzg5XSi2RMSEKqmIOw9D6YhhPdhj/ORAW0Re
H3Y/+/Ru97JHb3Y3u/RqdzKnF7uDWT3bGT6xnY+ccv49x1lQwx7liC6Tc5jT
uf3rfj86tW95oyO7zhMd2DXWWGqN2OAMNznLOW3Z8yxr217gonbsJS5r115h
RXv2Kte0bx87/5BNXqtuf/FbZ8l3uWtGF3bVu3VdJeel/v/vH3+LMrI=
                "]]}, {
               
               Line[{2, 487, 11, 500, 501, 20, 526, 527, 29, 560, 561, 38, 
                594, 595, 47, 628, 629, 56, 662, 663, 65, 694, 74}], 
               
               Line[{1905, 485, 1922, 3268, 2845, 3269, 1940, 3291, 2853, 
                3290, 1958, 3317, 2861, 3318, 1975, 3343, 2870, 3342, 1990, 
                3366, 2879, 3367, 2007, 3396, 2890, 3395, 2026, 3421, 2024, 
                2046}], 
               
               Line[{1907, 486, 1923, 504, 3271, 1941, 3294, 2854, 3295, 1959,
                 3321, 2864, 3320, 1976, 3345, 2873, 3346, 1991, 3371, 2882, 
                3370, 2008, 3398, 2893, 3399, 2027, 3423, 2028, 2047}], 
               
               Line[{1909, 2843, 3264, 1925, 2848, 3274, 3275, 1943, 3302, 
                2856, 3300, 1961, 3328, 2866, 3326, 1978, 608, 3351, 1993, 
                3376, 2885, 3379, 2010, 3406, 2896, 3404, 2030, 3429, 2034, 
                2049}], 
               
               Line[{1912, 2844, 3266, 1928, 2850, 3284, 3286, 1946, 3313, 
                2859, 3311, 1964, 3334, 2868, 3339, 1980, 2877, 3360, 3362, 
                1996, 3391, 2888, 3386, 2012, 3413, 2898, 3418, 2032, 3435, 
                2040, 2051}], 
               
               Line[{1914, 1921, 3270, 1930, 1939, 3292, 3293, 1949, 3288, 
                2862, 3319, 1967, 3315, 2871, 3344, 1982, 3341, 2881, 3369, 
                1998, 3364, 2891, 3397, 2015, 3422, 2900, 3394, 2036, 3420, 
                2907, 2053}], 
               
               Line[{1916, 1926, 3273, 1933, 3299, 2855, 3298, 1952, 3325, 
                2865, 3324, 1969, 3348, 2874, 3350, 1985, 3375, 2883, 3374, 
                2001, 3401, 2894, 3403, 2018, 3425, 2901, 3427, 2038, 3440, 
                2909, 2056}], 
               
               Line[{1918, 1931, 3278, 1935, 1950, 3305, 3307, 1954, 578, 
                3331, 1971, 3356, 2876, 3355, 1987, 1999, 3381, 3383, 2003, 
                3411, 2897, 3410, 2021, 3431, 2903, 3433, 2042, 3442, 2910, 
                2058}], 
               
               Line[{1920, 3261, 2852, 1938, 1955, 3279, 3281, 1957, 3308, 
                2869, 3337, 1974, 620, 3332, 1989, 3357, 2889, 3389, 2006, 
                688, 3390, 2023, 3417, 2905, 3438, 2045, 3444, 2912, 2060}], 
               
               Line[{2048, 2033, 3428, 2029, 2013, 3407, 3405, 2009, 3378, 
                3377, 2884, 1992, 609, 3352, 1977, 1965, 3329, 3327, 1960, 
                1947, 3303, 3301, 1942, 511, 3276, 1924, 1906, 3263, 1908}], 
               
               Line[{2050, 2039, 3434, 2031, 2019, 3414, 3412, 2011, 3385, 
                3384, 2887, 1995, 3361, 2878, 3358, 1979, 3338, 2867, 3333, 
                1963, 3310, 3309, 2858, 1945, 3285, 2851, 3282, 1927, 1910, 
                3265, 1911}], 
               
               Line[{2052, 2906, 3419, 2035, 3393, 3392, 2025, 2014, 2892, 
                3365, 3363, 1997, 3368, 2880, 3340, 1981, 2872, 3316, 3314, 
                1966, 2863, 3289, 3287, 1948, 529, 3267, 1929, 2846, 3262, 
                1913}], 
               
               Line[{2055, 2908, 3439, 2037, 2902, 3426, 3424, 2017, 2895, 
                3402, 3400, 2000, 3373, 3372, 1994, 1984, 2875, 3349, 3347, 
                1968, 3323, 3322, 1962, 1951, 3297, 3296, 1944, 1932, 2847, 
                3272, 1915}], 
               
               Line[{2057, 3441, 2054, 2041, 2904, 3432, 3430, 2020, 3409, 
                3408, 2016, 2002, 3382, 2886, 3380, 1986, 3354, 3353, 1983, 
                1970, 579, 3330, 1953, 3306, 2857, 3304, 1934, 2849, 3277, 
                1917}], 
               
               Line[{2059, 2911, 3443, 2044, 3437, 3436, 2043, 2022, 2899, 
                3416, 3415, 2005, 3388, 3387, 2004, 1988, 621, 3359, 1973, 
                3336, 3335, 1972, 1956, 3280, 2860, 3312, 1937, 3283, 1936, 
                1919}], 
               
               Line[{83, 725, 92, 738, 739, 101, 764, 765, 110, 798, 799, 119,
                 832, 833, 128, 866, 867, 137, 900, 901, 146, 932, 155}], 
               Line[{2061, 723, 2078, 3452, 2915, 3453, 2096, 3475, 2923, 
                3474, 2114, 3501, 2931, 3502, 2131, 3527, 2940, 3526, 2146, 
                3550, 2949, 3551, 2163, 3580, 2960, 3579, 2182, 3605, 2180, 
                2202}], 
               
               Line[{2063, 724, 2079, 742, 3455, 2097, 3478, 2924, 3479, 2115,
                 3505, 2934, 3504, 2132, 3529, 2943, 3530, 2147, 3555, 2952, 
                3554, 2164, 3582, 2963, 3583, 2183, 3607, 2184, 2203}], 
               
               Line[{2065, 2913, 3448, 2081, 2918, 3458, 3459, 2099, 3486, 
                2926, 3484, 2117, 3512, 2936, 3510, 2134, 846, 3535, 2149, 
                3560, 2955, 3563, 2166, 3590, 2966, 3588, 2186, 3613, 2190, 
                2205}], 
               
               Line[{2068, 2914, 3450, 2084, 2920, 3468, 3470, 2102, 3497, 
                2929, 3495, 2120, 3518, 2938, 3523, 2136, 2947, 3544, 3546, 
                2152, 3575, 2958, 3570, 2168, 3597, 2968, 3602, 2188, 3619, 
                2196, 2207}], 
               
               Line[{2070, 2077, 3454, 2086, 2095, 3476, 3477, 2105, 3472, 
                2932, 3503, 2123, 3499, 2941, 3528, 2138, 3525, 2951, 3553, 
                2154, 3548, 2961, 3581, 2171, 3606, 2970, 3578, 2192, 3604, 
                2977, 2209}], 
               
               Line[{2072, 2082, 3457, 2089, 3483, 2925, 3482, 2108, 3509, 
                2935, 3508, 2125, 3532, 2944, 3534, 2141, 3559, 2953, 3558, 
                2157, 3585, 2964, 3587, 2174, 3609, 2971, 3611, 2194, 3624, 
                2979, 2212}], 
               
               Line[{2074, 2087, 3462, 2091, 2106, 3489, 3491, 2110, 816, 
                3515, 2127, 3540, 2946, 3539, 2143, 2155, 3565, 3567, 2159, 
                3595, 2967, 3594, 2177, 3615, 2973, 3617, 2198, 3626, 2980, 
                2214}], 
               
               Line[{2076, 3445, 2922, 2094, 2111, 3463, 3465, 2113, 3492, 
                2939, 3521, 2130, 858, 3516, 2145, 3541, 2959, 3573, 2162, 
                926, 3574, 2179, 3601, 2975, 3622, 2201, 3628, 2982, 2216}], 
               
               Line[{2204, 2189, 3612, 2185, 2169, 3591, 3589, 2165, 3562, 
                3561, 2954, 2148, 847, 3536, 2133, 2121, 3513, 3511, 2116, 
                2103, 3487, 3485, 2098, 749, 3460, 2080, 2062, 3447, 2064}], 
               
               Line[{2206, 2195, 3618, 2187, 2175, 3598, 3596, 2167, 3569, 
                3568, 2957, 2151, 3545, 2948, 3542, 2135, 3522, 2937, 3517, 
                2119, 3494, 3493, 2928, 2101, 3469, 2921, 3466, 2083, 2066, 
                3449, 2067}], 
               
               Line[{2208, 2976, 3603, 2191, 3577, 3576, 2181, 2170, 2962, 
                3549, 3547, 2153, 3552, 2950, 3524, 2137, 2942, 3500, 3498, 
                2122, 2933, 3473, 3471, 2104, 767, 3451, 2085, 2916, 3446, 
                2069}], 
               
               Line[{2211, 2978, 3623, 2193, 2972, 3610, 3608, 2173, 2965, 
                3586, 3584, 2156, 3557, 3556, 2150, 2140, 2945, 3533, 3531, 
                2124, 3507, 3506, 2118, 2107, 3481, 3480, 2100, 2088, 2917, 
                3456, 2071}], 
               
               Line[{2213, 3625, 2210, 2197, 2974, 3616, 3614, 2176, 3593, 
                3592, 2172, 2158, 3566, 2956, 3564, 2142, 3538, 3537, 2139, 
                2126, 817, 3514, 2109, 3490, 2927, 3488, 2090, 2919, 3461, 
                2073}], 
               
               Line[{2215, 2981, 3627, 2200, 3621, 3620, 2199, 2178, 2969, 
                3600, 3599, 2161, 3572, 3571, 2160, 2144, 859, 3543, 2129, 
                3520, 3519, 2128, 2112, 3464, 2930, 3496, 2093, 3467, 2092, 
                2075}], 
               
               Line[{164, 963, 173, 976, 977, 182, 1002, 1003, 191, 1036, 
                1037, 200, 1070, 1071, 209, 1104, 1105, 218, 1138, 1139, 227, 
                1170, 236}], 
               
               Line[{2217, 961, 2234, 3636, 2985, 3637, 2252, 3659, 2993, 
                3658, 2270, 3685, 3001, 3686, 2287, 3711, 3010, 3710, 2302, 
                3734, 3019, 3735, 2319, 3764, 3030, 3763, 2338, 3789, 2336, 
                2358}], 
               
               Line[{2219, 962, 2235, 980, 3639, 2253, 3662, 2994, 3663, 2271,
                 3689, 3004, 3688, 2288, 3713, 3013, 3714, 2303, 3739, 3022, 
                3738, 2320, 3766, 3033, 3767, 2339, 3791, 2340, 2359}], 
               
               Line[{2221, 2983, 3632, 2237, 2988, 3642, 3643, 2255, 3670, 
                2996, 3668, 2273, 3696, 3006, 3694, 2290, 1084, 3719, 2305, 
                3744, 3025, 3747, 2322, 3774, 3036, 3772, 2342, 3797, 2346, 
                2361}], 
               
               Line[{2224, 2984, 3634, 2240, 2990, 3652, 3654, 2258, 3681, 
                2999, 3679, 2276, 3702, 3008, 3707, 2292, 3017, 3728, 3730, 
                2308, 3759, 3028, 3754, 2324, 3781, 3038, 3786, 2344, 3803, 
                2352, 2363}], 
               
               Line[{2226, 2233, 3638, 2242, 2251, 3660, 3661, 2261, 3656, 
                3002, 3687, 2279, 3683, 3011, 3712, 2294, 3709, 3021, 3737, 
                2310, 3732, 3031, 3765, 2327, 3790, 3040, 3762, 2348, 3788, 
                3047, 2365}], 
               
               Line[{2228, 2238, 3641, 2245, 3667, 2995, 3666, 2264, 3693, 
                3005, 3692, 2281, 3716, 3014, 3718, 2297, 3743, 3023, 3742, 
                2313, 3769, 3034, 3771, 2330, 3793, 3041, 3795, 2350, 3808, 
                3049, 2368}], 
               
               Line[{2230, 2243, 3646, 2247, 2262, 3673, 3675, 2266, 1054, 
                3699, 2283, 3724, 3016, 3723, 2299, 2311, 3749, 3751, 2315, 
                3779, 3037, 3778, 2333, 3799, 3043, 3801, 2354, 3810, 3050, 
                2370}], 
               
               Line[{2232, 3629, 2992, 2250, 2267, 3647, 3649, 2269, 3676, 
                3009, 3705, 2286, 1096, 3700, 2301, 3725, 3029, 3757, 2318, 
                1164, 3758, 2335, 3785, 3045, 3806, 2357, 3812, 3052, 2372}], 
               
               Line[{2360, 2345, 3796, 2341, 2325, 3775, 3773, 2321, 3746, 
                3745, 3024, 2304, 1085, 3720, 2289, 2277, 3697, 3695, 2272, 
                2259, 3671, 3669, 2254, 987, 3644, 2236, 2218, 3631, 2220}], 
               
               Line[{2362, 2351, 3802, 2343, 2331, 3782, 3780, 2323, 3753, 
                3752, 3027, 2307, 3729, 3018, 3726, 2291, 3706, 3007, 3701, 
                2275, 3678, 3677, 2998, 2257, 3653, 2991, 3650, 2239, 2222, 
                3633, 2223}], 
               
               Line[{2364, 3046, 3787, 2347, 3761, 3760, 2337, 2326, 3032, 
                3733, 3731, 2309, 3736, 3020, 3708, 2293, 3012, 3684, 3682, 
                2278, 3003, 3657, 3655, 2260, 1005, 3635, 2241, 2986, 3630, 
                2225}], 
               
               Line[{2367, 3048, 3807, 2349, 3042, 3794, 3792, 2329, 3035, 
                3770, 3768, 2312, 3741, 3740, 2306, 2296, 3015, 3717, 3715, 
                2280, 3691, 3690, 2274, 2263, 3665, 3664, 2256, 2244, 2987, 
                3640, 2227}], 
               
               Line[{2369, 3809, 2366, 2353, 3044, 3800, 3798, 2332, 3777, 
                3776, 2328, 2314, 3750, 3026, 3748, 2298, 3722, 3721, 2295, 
                2282, 1055, 3698, 2265, 3674, 2997, 3672, 2246, 2989, 3645, 
                2229}], 
               
               Line[{2371, 3051, 3811, 2356, 3805, 3804, 2355, 2334, 3039, 
                3784, 3783, 2317, 3756, 3755, 2316, 2300, 1097, 3727, 2285, 
                3704, 3703, 2284, 2268, 3648, 3000, 3680, 2249, 3651, 2248, 
                2231}], 
               
               Line[{245, 1201, 254, 1214, 1215, 263, 1240, 1241, 272, 1274, 
                1275, 281, 1308, 1309, 290, 1342, 1343, 299, 1376, 1377, 308, 
                1408, 317}], 
               
               Line[{2373, 1199, 2390, 3820, 3055, 3821, 2408, 3843, 3063, 
                3842, 2426, 3869, 3071, 3870, 2443, 3895, 3080, 3894, 2458, 
                3918, 3089, 3919, 2475, 3948, 3100, 3947, 2494, 3973, 2492, 
                2514}], 
               
               Line[{2375, 1200, 2391, 1218, 3823, 2409, 3846, 3064, 3847, 
                2427, 3873, 3074, 3872, 2444, 3897, 3083, 3898, 2459, 3923, 
                3092, 3922, 2476, 3950, 3103, 3951, 2495, 3975, 2496, 2515}], 
               
               Line[{2377, 3053, 3816, 2393, 3058, 3826, 3827, 2411, 3854, 
                3066, 3852, 2429, 3880, 3076, 3878, 2446, 1322, 3903, 2461, 
                3928, 3095, 3931, 2478, 3958, 3106, 3956, 2498, 3981, 2502, 
                2517}], 
               
               Line[{2380, 3054, 3818, 2396, 3060, 3836, 3838, 2414, 3865, 
                3069, 3863, 2432, 3886, 3078, 3891, 2448, 3087, 3912, 3914, 
                2464, 3943, 3098, 3938, 2480, 3965, 3108, 3970, 2500, 3987, 
                2508, 2519}], 
               
               Line[{2382, 2389, 3822, 2398, 2407, 3844, 3845, 2417, 3840, 
                3072, 3871, 2435, 3867, 3081, 3896, 2450, 3893, 3091, 3921, 
                2466, 3916, 3101, 3949, 2483, 3974, 3110, 3946, 2504, 3972, 
                3117, 2521}], 
               
               Line[{2384, 2394, 3825, 2401, 3851, 3065, 3850, 2420, 3877, 
                3075, 3876, 2437, 3900, 3084, 3902, 2453, 3927, 3093, 3926, 
                2469, 3953, 3104, 3955, 2486, 3977, 3111, 3979, 2506, 3992, 
                3119, 2524}], 
               
               Line[{2386, 2399, 3830, 2403, 2418, 3857, 3859, 2422, 1292, 
                3883, 2439, 3908, 3086, 3907, 2455, 2467, 3933, 3935, 2471, 
                3963, 3107, 3962, 2489, 3983, 3113, 3985, 2510, 3994, 3120, 
                2526}], 
               
               Line[{2388, 3813, 3062, 2406, 2423, 3831, 3833, 2425, 3860, 
                3079, 3889, 2442, 1334, 3884, 2457, 3909, 3099, 3941, 2474, 
                1402, 3942, 2491, 3969, 3115, 3990, 2513, 3996, 3122, 2528}], 
               
               Line[{2516, 2501, 3980, 2497, 2481, 3959, 3957, 2477, 3930, 
                3929, 3094, 2460, 1323, 3904, 2445, 2433, 3881, 3879, 2428, 
                2415, 3855, 3853, 2410, 1225, 3828, 2392, 2374, 3815, 2376}], 
               
               Line[{2518, 2507, 3986, 2499, 2487, 3966, 3964, 2479, 3937, 
                3936, 3097, 2463, 3913, 3088, 3910, 2447, 3890, 3077, 3885, 
                2431, 3862, 3861, 3068, 2413, 3837, 3061, 3834, 2395, 2378, 
                3817, 2379}], 
               
               Line[{2520, 3116, 3971, 2503, 3945, 3944, 2493, 2482, 3102, 
                3917, 3915, 2465, 3920, 3090, 3892, 2449, 3082, 3868, 3866, 
                2434, 3073, 3841, 3839, 2416, 1243, 3819, 2397, 3056, 3814, 
                2381}], 
               
               Line[{2523, 3118, 3991, 2505, 3112, 3978, 3976, 2485, 3105, 
                3954, 3952, 2468, 3925, 3924, 2462, 2452, 3085, 3901, 3899, 
                2436, 3875, 3874, 2430, 2419, 3849, 3848, 2412, 2400, 3057, 
                3824, 2383}], 
               
               Line[{2525, 3993, 2522, 2509, 3114, 3984, 3982, 2488, 3961, 
                3960, 2484, 2470, 3934, 3096, 3932, 2454, 3906, 3905, 2451, 
                2438, 1293, 3882, 2421, 3858, 3067, 3856, 2402, 3059, 3829, 
                2385}], 
               
               Line[{2527, 3121, 3995, 2512, 3989, 3988, 2511, 2490, 3109, 
                3968, 3967, 2473, 3940, 3939, 2472, 2456, 1335, 3911, 2441, 
                3888, 3887, 2440, 2424, 3832, 3070, 3864, 2405, 3835, 2404, 
                2387}], 
               
               Line[{326, 1439, 335, 1452, 1453, 344, 1478, 1479, 353, 1512, 
                1513, 362, 1546, 1547, 370, 1576, 1577, 379, 1610, 1611, 388, 
                1642, 397}], 
               
               Line[{2529, 1437, 2546, 4004, 3125, 4005, 2564, 4027, 3133, 
                4026, 2582, 4051, 3141, 4052, 2599, 4079, 3152, 4078, 2615, 
                4077, 3158, 4100, 2632, 4132, 3169, 4131, 2651, 4157, 2649, 
                2671}], 
               
               Line[{2531, 1438, 2547, 1456, 4007, 2565, 4030, 3134, 4031, 
                2583, 4055, 3144, 4054, 2600, 4083, 3155, 4084, 2616, 4107, 
                3161, 4106, 2633, 4134, 3172, 4135, 2652, 4159, 2653, 2672}], 
               
               Line[{2533, 3123, 4000, 2549, 3128, 4010, 4011, 2567, 4038, 
                3136, 4036, 2585, 4062, 3146, 4060, 2602, 1560, 4089, 2618, 
                4112, 3164, 4115, 2635, 4142, 3175, 4140, 2655, 4165, 2659, 
                2674}], 
               
               Line[{2536, 3124, 4002, 2552, 3130, 4020, 4022, 2570, 4049, 
                3139, 4047, 2588, 4068, 3148, 4074, 2605, 4101, 3157, 4096, 
                2621, 4127, 3167, 4122, 2637, 4149, 3177, 4154, 2657, 4171, 
                2665, 2676}], 
               
               Line[{2538, 2545, 4006, 2554, 2563, 4028, 4029, 2573, 4024, 
                3142, 4053, 2591, 4050, 3150, 4076, 2607, 4103, 3160, 4105, 
                2623, 4098, 3170, 4133, 2640, 4158, 3179, 4130, 2661, 4156, 
                3186, 2678}], 
               
               Line[{2540, 2550, 4009, 2557, 4035, 3135, 4034, 2576, 4059, 
                3145, 4058, 2593, 4081, 3153, 4085, 2609, 4111, 3162, 4110, 
                2626, 4137, 3173, 4139, 2643, 4161, 3180, 4163, 2663, 4176, 
                3188, 2681}], 
               
               Line[{2542, 2555, 4014, 2559, 2574, 4041, 4043, 2578, 1530, 
                4065, 2595, 4091, 3156, 4088, 2611, 2624, 4117, 4119, 2628, 
                4147, 3176, 4146, 2646, 4167, 3182, 4169, 2667, 4178, 3189, 
                2683}], 
               
               Line[{2544, 3997, 3132, 2562, 2579, 4015, 4017, 2581, 4044, 
                3151, 4071, 2598, 1566, 4066, 2614, 4093, 3168, 4125, 2631, 
                1636, 4126, 2648, 4153, 3184, 4174, 2670, 4180, 3191, 2685}], 
               
               Line[{2673, 2658, 4164, 2654, 2638, 4143, 4141, 2634, 4114, 
                4113, 3163, 2617, 1561, 4090, 2601, 2589, 4063, 4061, 2584, 
                2571, 4039, 4037, 2566, 1463, 4012, 2548, 2530, 3999, 2532}], 
               
               Line[{2675, 2664, 4170, 2656, 2644, 4150, 4148, 2636, 4121, 
                4120, 3166, 2620, 4095, 4094, 2612, 2604, 4073, 3147, 4067, 
                2587, 4046, 4045, 3138, 2569, 4021, 3131, 4018, 2551, 2534, 
                4001, 2535}], 
               
               Line[{2677, 3185, 4155, 2660, 4129, 4128, 2650, 2639, 3171, 
                4099, 4097, 2622, 4104, 3159, 4102, 2606, 4075, 4072, 3149, 
                2590, 3143, 4025, 4023, 2572, 1481, 4003, 2553, 3126, 3998, 
                2537}], 
               
               Line[{2680, 3187, 4175, 2662, 3181, 4162, 4160, 2642, 3174, 
                4138, 4136, 2625, 4109, 4108, 2619, 2608, 3154, 4082, 4080, 
                2592, 4057, 4056, 2586, 2575, 4033, 4032, 2568, 2556, 3127, 
                4008, 2539}], 
               
               Line[{2682, 4177, 2679, 2666, 3183, 4168, 4166, 2645, 4145, 
                4144, 2641, 2627, 4118, 3165, 4116, 2610, 4087, 4086, 2603, 
                2594, 1531, 4064, 2577, 4042, 3137, 4040, 2558, 3129, 4013, 
                2541}], 
               
               Line[{2684, 3190, 4179, 2669, 4173, 4172, 2668, 2647, 3178, 
                4152, 4151, 2630, 4124, 4123, 2629, 2613, 1567, 4092, 2597, 
                4070, 4069, 2596, 2580, 4016, 3140, 4048, 2561, 4019, 2560, 
                2543}], 
               
               Line[{406, 1673, 415, 1686, 1687, 424, 1712, 1713, 433, 1746, 
                1747, 442, 1780, 1781, 450, 1810, 1811, 459, 1844, 1845, 468, 
                1876, 477}], 
               
               Line[{2686, 1671, 2703, 4188, 3194, 4189, 2721, 4211, 3202, 
                4210, 2739, 4235, 3210, 4236, 2756, 4263, 3221, 4262, 2772, 
                4261, 3227, 4284, 2789, 4316, 3238, 4315, 2808, 4341, 2806, 
                2828}], 
               
               Line[{2688, 1672, 2704, 1690, 4191, 2722, 4214, 3203, 4215, 
                2740, 4239, 3213, 4238, 2757, 4267, 3224, 4268, 2773, 4291, 
                3230, 4290, 2790, 4318, 3241, 4319, 2809, 4343, 2810, 2829}], 
               
               Line[{2690, 3192, 4184, 2706, 3197, 4194, 4195, 2724, 4222, 
                3205, 4220, 2742, 4246, 3215, 4244, 2759, 1794, 4273, 2775, 
                4296, 3233, 4299, 2792, 4326, 3244, 4324, 2812, 4349, 2816, 
                2831}], 
               
               Line[{2693, 3193, 4186, 2709, 3199, 4204, 4206, 2727, 4233, 
                3208, 4231, 2745, 4252, 3217, 4258, 2762, 4285, 3226, 4280, 
                2778, 4311, 3236, 4306, 2794, 4333, 3246, 4338, 2814, 4355, 
                2822, 2833}], 
               
               Line[{2695, 2702, 4190, 2711, 2720, 4212, 4213, 2730, 4208, 
                3211, 4237, 2748, 4234, 3219, 4260, 2764, 4287, 3229, 4289, 
                2780, 4282, 3239, 4317, 2797, 4342, 3248, 4314, 2818, 4340, 
                3255, 2835}], 
               
               Line[{2697, 2707, 4193, 2714, 4219, 3204, 4218, 2733, 4243, 
                3214, 4242, 2750, 4265, 3222, 4269, 2766, 4295, 3231, 4294, 
                2783, 4321, 3242, 4323, 2800, 4345, 3249, 4347, 2820, 4360, 
                3257, 2838}], 
               
               Line[{2699, 2712, 4198, 2716, 2731, 4225, 4227, 2735, 1764, 
                4249, 2752, 4275, 3225, 4272, 2768, 2781, 4301, 4303, 2785, 
                4331, 3245, 4330, 2803, 4351, 3251, 4353, 2824, 4362, 3258, 
                2840}], 
               
               Line[{2701, 4181, 3201, 2719, 2736, 4199, 4201, 2738, 4228, 
                3220, 4255, 2755, 1800, 4250, 2771, 4277, 3237, 4309, 2788, 
                1870, 4310, 2805, 4337, 3253, 4358, 2827, 4364, 3260, 2842}], 
               
               Line[{2830, 2815, 4348, 2811, 2795, 4327, 4325, 2791, 4298, 
                4297, 3232, 2774, 1795, 4274, 2758, 2746, 4247, 4245, 2741, 
                2728, 4223, 4221, 2723, 1697, 4196, 2705, 2687, 4183, 2689}], 
               
               Line[{2832, 2821, 4354, 2813, 2801, 4334, 4332, 2793, 4305, 
                4304, 3235, 2777, 4279, 4278, 2769, 2761, 4257, 3216, 4251, 
                2744, 4230, 4229, 3207, 2726, 4205, 3200, 4202, 2708, 2691, 
                4185, 2692}], 
               
               Line[{2834, 3254, 4339, 2817, 4313, 4312, 2807, 2796, 3240, 
                4283, 4281, 2779, 4288, 3228, 4286, 2763, 4259, 4256, 3218, 
                2747, 3212, 4209, 4207, 2729, 1715, 4187, 2710, 3195, 4182, 
                2694}], 
               
               Line[{2837, 3256, 4359, 2819, 3250, 4346, 4344, 2799, 3243, 
                4322, 4320, 2782, 4293, 4292, 2776, 2765, 3223, 4266, 4264, 
                2749, 4241, 4240, 2743, 2732, 4217, 4216, 2725, 2713, 3196, 
                4192, 2696}], 
               
               Line[{2839, 4361, 2836, 2823, 3252, 4352, 4350, 2802, 4329, 
                4328, 2798, 2784, 4302, 3234, 4300, 2767, 4271, 4270, 2760, 
                2751, 1765, 4248, 2734, 4226, 3206, 4224, 2715, 3198, 4197, 
                2698}], 
               
               Line[{2841, 3259, 4363, 2826, 4357, 4356, 2825, 2804, 3247, 
                4336, 4335, 2787, 4308, 4307, 2786, 2770, 1801, 4276, 2754, 
                4254, 4253, 2753, 2737, 4200, 3209, 4232, 2718, 4203, 2717, 
                2700}]}, {
               
               Line[{489, 3390, 689, 3416, 683, 681, 3410, 3409, 675, 3403, 
                673, 3402, 667, 3397, 665, 3365, 653, 651, 3386, 3385, 645, 
                643, 3379, 3378, 637, 3370, 635, 629, 625, 3367, 661}], 
               
               Line[{496, 655, 3389, 3388, 649, 3383, 3382, 647, 641, 639, 
                3374, 3373, 633, 3369, 3368, 631, 619, 3362, 3361, 617, 611, 
                3351, 609, 603, 601, 3346, 595, 3342, 591, 627}], 
               
               Line[{499, 485, 487, 486, 490, 3263, 491, 3264, 492, 3265, 493,
                 3266, 494, 3262, 502, 3270, 503, 3272, 508, 3273, 509, 3277, 
                514, 3278, 515, 3283, 520, 3261, 521}], 
               
               Line[{18, 1938, 1937, 17, 1935, 1934, 16, 1933, 1932, 15, 1930,
                 1929, 14, 1928, 1927, 13, 1925, 1924, 12, 1923, 11, 1922, 
                10}], 
               
               Line[{524, 497, 3268, 500, 504, 506, 3276, 510, 3274, 512, 
                3282, 516, 3284, 518, 3267, 528, 3292, 530, 3296, 536, 3299, 
                538, 3304, 544, 3305, 546, 3312, 552, 3279, 554}], 
               
               Line[{555, 3281, 3280, 553, 547, 3307, 3306, 545, 539, 537, 
                3298, 3297, 531, 3293, 529, 519, 3286, 3285, 517, 513, 3275, 
                511, 507, 3271, 505, 501, 498, 3269, 525}], 
               
               Line[{558, 3291, 522, 526, 532, 3294, 534, 3301, 3302, 540, 
                542, 3309, 548, 3313, 550, 3287, 3288, 562, 564, 3322, 570, 
                3325, 572, 3330, 578, 580, 3335, 586, 3308, 588}], 
               
               Line[{589, 587, 3337, 3336, 581, 3331, 579, 573, 571, 3324, 
                3323, 565, 3319, 563, 3289, 551, 549, 3311, 3310, 543, 3300, 
                541, 3303, 535, 533, 3295, 527, 3290, 523, 559}], 
               
               Line[{592, 556, 3317, 560, 3321, 566, 568, 3327, 3328, 574, 
                576, 3333, 3334, 582, 584, 3314, 3315, 596, 598, 3347, 3348, 
                604, 606, 3353, 612, 3356, 614, 3359, 620, 622}], 
               
               Line[{623, 3332, 621, 615, 613, 3355, 3354, 607, 3350, 605, 
                3349, 599, 3344, 597, 3316, 585, 3339, 3338, 583, 577, 3326, 
                575, 3329, 569, 3320, 567, 561, 557, 3318, 593}], 
               Line[{626, 3343, 590, 594, 600, 3345, 602, 3352, 608, 610, 
                3358, 616, 3360, 618, 3340, 3341, 630, 632, 3372, 638, 3375, 
                640, 3380, 646, 3381, 648, 3387, 654, 3357, 495}], 
               
               Line[{657, 714, 3438, 3437, 710, 3433, 708, 3432, 704, 3427, 
                702, 3426, 698, 696, 3394, 3393, 687, 3418, 685, 3414, 679, 
                3404, 677, 3407, 671, 669, 3399, 663, 3395, 659, 693}], 
               
               Line[{660, 624, 3366, 628, 3371, 634, 636, 3377, 642, 3376, 
                644, 3384, 650, 3391, 652, 3363, 3364, 664, 666, 3400, 3401, 
                672, 674, 3408, 680, 3411, 682, 3415, 688, 488}], 
               
               Line[{690, 722, 3444, 3443, 721, 3442, 720, 3441, 719, 718, 
                3440, 3439, 717, 716, 3420, 3419, 712, 711, 3435, 3434, 706, 
                705, 3429, 3428, 700, 699, 3423, 694, 3421, 691, 715}], 
               
               Line[{692, 3396, 658, 662, 668, 3398, 670, 3405, 3406, 676, 
                678, 3412, 3413, 684, 686, 3392, 695, 3422, 697, 3424, 3425, 
                701, 703, 3430, 3431, 707, 709, 3436, 713, 3417, 656}], 
               
               Line[{727, 3574, 927, 3600, 921, 919, 3594, 3593, 913, 3587, 
                911, 3586, 905, 3581, 903, 3549, 891, 889, 3570, 3569, 883, 
                881, 3563, 3562, 875, 3554, 873, 867, 863, 3551, 899}], 
               
               Line[{734, 893, 3573, 3572, 887, 3567, 3566, 885, 879, 877, 
                3558, 3557, 871, 3553, 3552, 869, 857, 3546, 3545, 855, 849, 
                3535, 847, 841, 839, 3530, 833, 3526, 829, 865}], 
               
               Line[{737, 723, 725, 724, 728, 3447, 729, 3448, 730, 3449, 731,
                 3450, 732, 3446, 740, 3454, 741, 3456, 746, 3457, 747, 3461, 
                752, 3462, 753, 3467, 758, 3445, 759}], 
               
               Line[{99, 2094, 2093, 98, 2091, 2090, 97, 2089, 2088, 96, 2086,
                 2085, 95, 2084, 2083, 94, 2081, 2080, 93, 2079, 92, 2078, 
                91}], 
               
               Line[{762, 735, 3452, 738, 742, 744, 3460, 748, 3458, 750, 
                3466, 754, 3468, 756, 3451, 766, 3476, 768, 3480, 774, 3483, 
                776, 3488, 782, 3489, 784, 3496, 790, 3463, 792}], 
               Line[{793, 3465, 3464, 791, 785, 3491, 3490, 783, 777, 775, 
                3482, 3481, 769, 3477, 767, 757, 3470, 3469, 755, 751, 3459, 
                749, 745, 3455, 743, 739, 736, 3453, 763}], 
               
               Line[{796, 3475, 760, 764, 770, 3478, 772, 3485, 3486, 778, 
                780, 3493, 786, 3497, 788, 3471, 3472, 800, 802, 3506, 808, 
                3509, 810, 3514, 816, 818, 3519, 824, 3492, 826}], 
               
               Line[{827, 825, 3521, 3520, 819, 3515, 817, 811, 809, 3508, 
                3507, 803, 3503, 801, 3473, 789, 787, 3495, 3494, 781, 3484, 
                779, 3487, 773, 771, 3479, 765, 3474, 761, 797}], 
               
               Line[{830, 794, 3501, 798, 3505, 804, 806, 3511, 3512, 812, 
                814, 3517, 3518, 820, 822, 3498, 3499, 834, 836, 3531, 3532, 
                842, 844, 3537, 850, 3540, 852, 3543, 858, 860}], 
               
               Line[{861, 3516, 859, 853, 851, 3539, 3538, 845, 3534, 843, 
                3533, 837, 3528, 835, 3500, 823, 3523, 3522, 821, 815, 3510, 
                813, 3513, 807, 3504, 805, 799, 795, 3502, 831}], 
               
               Line[{864, 3527, 828, 832, 838, 3529, 840, 3536, 846, 848, 
                3542, 854, 3544, 856, 3524, 3525, 868, 870, 3556, 876, 3559, 
                878, 3564, 884, 3565, 886, 3571, 892, 3541, 733}], 
               
               Line[{895, 952, 3622, 3621, 948, 3617, 946, 3616, 942, 3611, 
                940, 3610, 936, 934, 3578, 3577, 925, 3602, 923, 3598, 917, 
                3588, 915, 3591, 909, 907, 3583, 901, 3579, 897, 931}], 
               
               Line[{898, 862, 3550, 866, 3555, 872, 874, 3561, 880, 3560, 
                882, 3568, 888, 3575, 890, 3547, 3548, 902, 904, 3584, 3585, 
                910, 912, 3592, 918, 3595, 920, 3599, 926, 726}], 
               
               Line[{928, 960, 3628, 3627, 959, 3626, 958, 3625, 957, 956, 
                3624, 3623, 955, 954, 3604, 3603, 950, 949, 3619, 3618, 944, 
                943, 3613, 3612, 938, 937, 3607, 932, 3605, 929, 953}], 
               
               Line[{930, 3580, 896, 900, 906, 3582, 908, 3589, 3590, 914, 
                916, 3596, 3597, 922, 924, 3576, 933, 3606, 935, 3608, 3609, 
                939, 941, 3614, 3615, 945, 947, 3620, 951, 3601, 894}], 
               Line[{965, 3758, 1165, 3784, 1159, 1157, 3778, 3777, 1151, 
                3771, 1149, 3770, 1143, 3765, 1141, 3733, 1129, 1127, 3754, 
                3753, 1121, 1119, 3747, 3746, 1113, 3738, 1111, 1105, 1101, 
                3735, 1137}], 
               
               Line[{972, 1131, 3757, 3756, 1125, 3751, 3750, 1123, 1117, 
                1115, 3742, 3741, 1109, 3737, 3736, 1107, 1095, 3730, 3729, 
                1093, 1087, 3719, 1085, 1079, 1077, 3714, 1071, 3710, 1067, 
                1103}], 
               
               Line[{975, 961, 963, 962, 966, 3631, 967, 3632, 968, 3633, 969,
                 3634, 970, 3630, 978, 3638, 979, 3640, 984, 3641, 985, 3645, 
                990, 3646, 991, 3651, 996, 3629, 997}], 
               
               Line[{180, 2250, 2249, 179, 2247, 2246, 178, 2245, 2244, 177, 
                2242, 2241, 176, 2240, 2239, 175, 2237, 2236, 174, 2235, 173, 
                2234, 172}], 
               
               Line[{1000, 973, 3636, 976, 980, 982, 3644, 986, 3642, 988, 
                3650, 992, 3652, 994, 3635, 1004, 3660, 1006, 3664, 1012, 
                3667, 1014, 3672, 1020, 3673, 1022, 3680, 1028, 3647, 1030}], 
               
               Line[{1031, 3649, 3648, 1029, 1023, 3675, 3674, 1021, 1015, 
                1013, 3666, 3665, 1007, 3661, 1005, 995, 3654, 3653, 993, 989,
                 3643, 987, 983, 3639, 981, 977, 974, 3637, 1001}], 
               
               Line[{1034, 3659, 998, 1002, 1008, 3662, 1010, 3669, 3670, 
                1016, 1018, 3677, 1024, 3681, 1026, 3655, 3656, 1038, 1040, 
                3690, 1046, 3693, 1048, 3698, 1054, 1056, 3703, 1062, 3676, 
                1064}], 
               
               Line[{1065, 1063, 3705, 3704, 1057, 3699, 1055, 1049, 1047, 
                3692, 3691, 1041, 3687, 1039, 3657, 1027, 1025, 3679, 3678, 
                1019, 3668, 1017, 3671, 1011, 1009, 3663, 1003, 3658, 999, 
                1035}], 
               
               Line[{1068, 1032, 3685, 1036, 3689, 1042, 1044, 3695, 3696, 
                1050, 1052, 3701, 3702, 1058, 1060, 3682, 3683, 1072, 1074, 
                3715, 3716, 1080, 1082, 3721, 1088, 3724, 1090, 3727, 1096, 
                1098}], 
               
               Line[{1099, 3700, 1097, 1091, 1089, 3723, 3722, 1083, 3718, 
                1081, 3717, 1075, 3712, 1073, 3684, 1061, 3707, 3706, 1059, 
                1053, 3694, 1051, 3697, 1045, 3688, 1043, 1037, 1033, 3686, 
                1069}], 
               
               Line[{1102, 3711, 1066, 1070, 1076, 3713, 1078, 3720, 1084, 
                1086, 3726, 1092, 3728, 1094, 3708, 3709, 1106, 1108, 3740, 
                1114, 3743, 1116, 3748, 1122, 3749, 1124, 3755, 1130, 3725, 
                971}], 
               
               Line[{1133, 1190, 3806, 3805, 1186, 3801, 1184, 3800, 1180, 
                3795, 1178, 3794, 1174, 1172, 3762, 3761, 1163, 3786, 1161, 
                3782, 1155, 3772, 1153, 3775, 1147, 1145, 3767, 1139, 3763, 
                1135, 1169}], 
               
               Line[{1136, 1100, 3734, 1104, 3739, 1110, 1112, 3745, 1118, 
                3744, 1120, 3752, 1126, 3759, 1128, 3731, 3732, 1140, 1142, 
                3768, 3769, 1148, 1150, 3776, 1156, 3779, 1158, 3783, 1164, 
                964}], 
               
               Line[{1166, 1198, 3812, 3811, 1197, 3810, 1196, 3809, 1195, 
                1194, 3808, 3807, 1193, 1192, 3788, 3787, 1188, 1187, 3803, 
                3802, 1182, 1181, 3797, 3796, 1176, 1175, 3791, 1170, 3789, 
                1167, 1191}], 
               
               Line[{1168, 3764, 1134, 1138, 1144, 3766, 1146, 3773, 3774, 
                1152, 1154, 3780, 3781, 1160, 1162, 3760, 1171, 3790, 1173, 
                3792, 3793, 1177, 1179, 3798, 3799, 1183, 1185, 3804, 1189, 
                3785, 1132}], 
               
               Line[{1203, 3942, 1403, 3968, 1397, 1395, 3962, 3961, 1389, 
                3955, 1387, 3954, 1381, 3949, 1379, 3917, 1367, 1365, 3938, 
                3937, 1359, 1357, 3931, 3930, 1351, 3922, 1349, 1343, 1339, 
                3919, 1375}], 
               
               Line[{1210, 1369, 3941, 3940, 1363, 3935, 3934, 1361, 1355, 
                1353, 3926, 3925, 1347, 3921, 3920, 1345, 1333, 3914, 3913, 
                1331, 1325, 3903, 1323, 1317, 1315, 3898, 1309, 3894, 1305, 
                1341}], 
               
               Line[{1213, 1199, 1201, 1200, 1204, 3815, 1205, 3816, 1206, 
                3817, 1207, 3818, 1208, 3814, 1216, 3822, 1217, 3824, 1222, 
                3825, 1223, 3829, 1228, 3830, 1229, 3835, 1234, 3813, 1235}], 
               
               Line[{261, 2406, 2405, 260, 2403, 2402, 259, 2401, 2400, 258, 
                2398, 2397, 257, 2396, 2395, 256, 2393, 2392, 255, 2391, 254, 
                2390, 253}], 
               
               Line[{1238, 1211, 3820, 1214, 1218, 1220, 3828, 1224, 3826, 
                1226, 3834, 1230, 3836, 1232, 3819, 1242, 3844, 1244, 3848, 
                1250, 3851, 1252, 3856, 1258, 3857, 1260, 3864, 1266, 3831, 
                1268}], 
               
               Line[{1269, 3833, 3832, 1267, 1261, 3859, 3858, 1259, 1253, 
                1251, 3850, 3849, 1245, 3845, 1243, 1233, 3838, 3837, 1231, 
                1227, 3827, 1225, 1221, 3823, 1219, 1215, 1212, 3821, 1239}], 
               
               Line[{1272, 3843, 1236, 1240, 1246, 3846, 1248, 3853, 3854, 
                1254, 1256, 3861, 1262, 3865, 1264, 3839, 3840, 1276, 1278, 
                3874, 1284, 3877, 1286, 3882, 1292, 1294, 3887, 1300, 3860, 
                1302}], 
               
               Line[{1303, 1301, 3889, 3888, 1295, 3883, 1293, 1287, 1285, 
                3876, 3875, 1279, 3871, 1277, 3841, 1265, 1263, 3863, 3862, 
                1257, 3852, 1255, 3855, 1249, 1247, 3847, 1241, 3842, 1237, 
                1273}], 
               
               Line[{1306, 1270, 3869, 1274, 3873, 1280, 1282, 3879, 3880, 
                1288, 1290, 3885, 3886, 1296, 1298, 3866, 3867, 1310, 1312, 
                3899, 3900, 1318, 1320, 3905, 1326, 3908, 1328, 3911, 1334, 
                1336}], 
               
               Line[{1337, 3884, 1335, 1329, 1327, 3907, 3906, 1321, 3902, 
                1319, 3901, 1313, 3896, 1311, 3868, 1299, 3891, 3890, 1297, 
                1291, 3878, 1289, 3881, 1283, 3872, 1281, 1275, 1271, 3870, 
                1307}], 
               
               Line[{1340, 3895, 1304, 1308, 1314, 3897, 1316, 3904, 1322, 
                1324, 3910, 1330, 3912, 1332, 3892, 3893, 1344, 1346, 3924, 
                1352, 3927, 1354, 3932, 1360, 3933, 1362, 3939, 1368, 3909, 
                1209}], 
               
               Line[{1371, 1428, 3990, 3989, 1424, 3985, 1422, 3984, 1418, 
                3979, 1416, 3978, 1412, 1410, 3946, 3945, 1401, 3970, 1399, 
                3966, 1393, 3956, 1391, 3959, 1385, 1383, 3951, 1377, 3947, 
                1373, 1407}], 
               
               Line[{1374, 1338, 3918, 1342, 3923, 1348, 1350, 3929, 1356, 
                3928, 1358, 3936, 1364, 3943, 1366, 3915, 3916, 1378, 1380, 
                3952, 3953, 1386, 1388, 3960, 1394, 3963, 1396, 3967, 1402, 
                1202}], 
               
               Line[{1404, 1436, 3996, 3995, 1435, 3994, 1434, 3993, 1433, 
                1432, 3992, 3991, 1431, 1430, 3972, 3971, 1426, 1425, 3987, 
                3986, 1420, 1419, 3981, 3980, 1414, 1413, 3975, 1408, 3973, 
                1405, 1429}], 
               
               Line[{1406, 3948, 1372, 1376, 1382, 3950, 1384, 3957, 3958, 
                1390, 1392, 3964, 3965, 1398, 1400, 3944, 1409, 3974, 1411, 
                3976, 3977, 1415, 1417, 3982, 3983, 1421, 1423, 3988, 1427, 
                3969, 1370}], 
               
               Line[{1441, 4126, 1637, 4152, 1631, 1629, 4146, 4145, 1623, 
                4139, 1621, 4138, 1615, 4133, 1613, 4099, 1601, 1599, 4122, 
                4121, 1593, 1591, 4115, 4114, 1585, 4106, 1583, 1577, 1573, 
                4100, 1609}], 
               
               Line[{1448, 1603, 4125, 4124, 1597, 4119, 4118, 1595, 1589, 
                1587, 4110, 4109, 1581, 4105, 4104, 1579, 1569, 4096, 4095, 
                1563, 4089, 1561, 1555, 1553, 4084, 1547, 4078, 1543, 1575}], 
               
               Line[{1451, 1437, 1439, 1438, 1442, 3999, 1443, 4000, 1444, 
                4001, 1445, 4002, 1446, 3998, 1454, 4006, 1455, 4008, 1460, 
                4009, 1461, 4013, 1466, 4014, 1467, 4019, 1472, 3997, 1473}], 
               
               Line[{342, 2562, 2561, 341, 2559, 2558, 340, 2557, 2556, 339, 
                2554, 2553, 338, 2552, 2551, 337, 2549, 2548, 336, 2547, 335, 
                2546, 334}], 
               
               Line[{1476, 1449, 4004, 1452, 1456, 1458, 4012, 1462, 4010, 
                1464, 4018, 1468, 4020, 1470, 4003, 1480, 4028, 1482, 4032, 
                1488, 4035, 1490, 4040, 1496, 4041, 1498, 4048, 1504, 4015, 
                1506}], 
               
               Line[{1507, 4017, 4016, 1505, 1499, 4043, 4042, 1497, 1491, 
                1489, 4034, 4033, 1483, 4029, 1481, 1471, 4022, 4021, 1469, 
                1465, 4011, 1463, 1459, 4007, 1457, 1453, 1450, 4005, 1477}], 
               
               Line[{1510, 4027, 1474, 1478, 1484, 4030, 1486, 4037, 4038, 
                1492, 1494, 4045, 1500, 4049, 1502, 4023, 4024, 1514, 1516, 
                4056, 1522, 4059, 1524, 4064, 1530, 1532, 4069, 1538, 4044, 
                1540}], 
               
               Line[{1541, 1539, 4071, 4070, 1533, 4065, 1531, 1525, 1523, 
                4058, 4057, 1517, 4053, 1515, 4025, 1503, 1501, 4047, 4046, 
                1495, 4036, 1493, 4039, 1487, 1485, 4031, 1479, 4026, 1475, 
                1511}], 
               
               Line[{1544, 1508, 4051, 1512, 4055, 1518, 1520, 4061, 4062, 
                1526, 1528, 4067, 4068, 1534, 4072, 1536, 4050, 1548, 4080, 
                4081, 1550, 1556, 4086, 1558, 4091, 1564, 4092, 1566, 1570}], 
               
               Line[{1571, 4066, 1567, 1565, 1559, 4088, 4087, 1557, 4085, 
                1551, 4082, 1549, 1537, 4076, 4075, 4074, 4073, 1535, 1529, 
                4060, 1527, 4063, 1521, 4054, 1519, 1513, 1509, 4052, 1545}], 
               
               Line[{1574, 4079, 1542, 1546, 1552, 4083, 1554, 4090, 1560, 
                1562, 4094, 1568, 4101, 4102, 4103, 1578, 1580, 4108, 1586, 
                4111, 1588, 4116, 1594, 4117, 1596, 4123, 1602, 4093, 1447}], 
               
               Line[{1605, 1662, 4174, 4173, 1658, 4169, 1656, 4168, 1652, 
                4163, 1650, 4162, 1646, 1644, 4130, 4129, 1635, 4154, 1633, 
                4150, 1627, 4140, 1625, 4143, 1619, 1617, 4135, 1611, 4131, 
                1607, 1641}], 
               
               Line[{1608, 1572, 4077, 1576, 4107, 1582, 1584, 4113, 1590, 
                4112, 1592, 4120, 1598, 4127, 1600, 4097, 4098, 1612, 1614, 
                4136, 4137, 1620, 1622, 4144, 1628, 4147, 1630, 4151, 1636, 
                1440}], 
               
               Line[{1638, 1670, 4180, 4179, 1669, 4178, 1668, 4177, 1667, 
                1666, 4176, 4175, 1665, 1664, 4156, 4155, 1660, 1659, 4171, 
                4170, 1654, 1653, 4165, 4164, 1648, 1647, 4159, 1642, 4157, 
                1639, 1663}], 
               
               Line[{1640, 4132, 1606, 1610, 1616, 4134, 1618, 4141, 4142, 
                1624, 1626, 4148, 4149, 1632, 1634, 4128, 1643, 4158, 1645, 
                4160, 4161, 1649, 1651, 4166, 4167, 1655, 1657, 4172, 1661, 
                4153, 1604}], 
               
               Line[{1675, 4310, 1871, 4336, 1865, 1863, 4330, 4329, 1857, 
                4323, 1855, 4322, 1849, 4317, 1847, 4283, 1835, 1833, 4306, 
                4305, 1827, 1825, 4299, 4298, 1819, 4290, 1817, 1811, 1807, 
                4284, 1843}], 
               
               Line[{1682, 1837, 4309, 4308, 1831, 4303, 4302, 1829, 1823, 
                1821, 4294, 4293, 1815, 4289, 4288, 1813, 1803, 4280, 4279, 
                1797, 4273, 1795, 1789, 1787, 4268, 1781, 4262, 1777, 1809}], 
               
               Line[{1685, 1671, 1673, 1672, 1676, 4183, 1677, 4184, 1678, 
                4185, 1679, 4186, 1680, 4182, 1688, 4190, 1689, 4192, 1694, 
                4193, 1695, 4197, 1700, 4198, 1701, 4203, 1706, 4181, 1707}], 
               
               Line[{422, 2719, 2718, 421, 2716, 2715, 420, 2714, 2713, 419, 
                2711, 2710, 418, 2709, 2708, 417, 2706, 2705, 416, 2704, 415, 
                2703, 414}], 
               
               Line[{1710, 1683, 4188, 1686, 1690, 1692, 4196, 1696, 4194, 
                1698, 4202, 1702, 4204, 1704, 4187, 1714, 4212, 1716, 4216, 
                1722, 4219, 1724, 4224, 1730, 4225, 1732, 4232, 1738, 4199, 
                1740}], 
               
               Line[{1741, 4201, 4200, 1739, 1733, 4227, 4226, 1731, 1725, 
                1723, 4218, 4217, 1717, 4213, 1715, 1705, 4206, 4205, 1703, 
                1699, 4195, 1697, 1693, 4191, 1691, 1687, 1684, 4189, 1711}], 
               
               Line[{1744, 4211, 1708, 1712, 1718, 4214, 1720, 4221, 4222, 
                1726, 1728, 4229, 1734, 4233, 1736, 4207, 4208, 1748, 1750, 
                4240, 1756, 4243, 1758, 4248, 1764, 1766, 4253, 1772, 4228, 
                1774}], 
               
               Line[{1775, 1773, 4255, 4254, 1767, 4249, 1765, 1759, 1757, 
                4242, 4241, 1751, 4237, 1749, 4209, 1737, 1735, 4231, 4230, 
                1729, 4220, 1727, 4223, 1721, 1719, 4215, 1713, 4210, 1709, 
                1745}], 
               
               Line[{1778, 1742, 4235, 1746, 4239, 1752, 1754, 4245, 4246, 
                1760, 1762, 4251, 4252, 1768, 4256, 1770, 4234, 1782, 4264, 
                4265, 1784, 1790, 4270, 1792, 4275, 1798, 4276, 1800, 1804}], 
               
               Line[{1805, 4250, 1801, 1799, 1793, 4272, 4271, 1791, 4269, 
                1785, 4266, 1783, 1771, 4260, 4259, 4258, 4257, 1769, 1763, 
                4244, 1761, 4247, 1755, 4238, 1753, 1747, 1743, 4236, 1779}], 
               
               Line[{1808, 4263, 1776, 1780, 1786, 4267, 1788, 4274, 1794, 
                1796, 4278, 1802, 4285, 4286, 4287, 1812, 1814, 4292, 1820, 
                4295, 1822, 4300, 1828, 4301, 1830, 4307, 1836, 4277, 1681}], 
               Line[{1839, 1896, 4358, 4357, 1892, 4353, 1890, 4352, 1886, 
                4347, 1884, 4346, 1880, 1878, 4314, 4313, 1869, 4338, 1867, 
                4334, 1861, 4324, 1859, 4327, 1853, 1851, 4319, 1845, 4315, 
                1841, 1875}], 
               
               Line[{1842, 1806, 4261, 1810, 4291, 1816, 1818, 4297, 1824, 
                4296, 1826, 4304, 1832, 4311, 1834, 4281, 4282, 1846, 1848, 
                4320, 4321, 1854, 1856, 4328, 1862, 4331, 1864, 4335, 1870, 
                1674}], 
               
               Line[{1872, 1904, 4364, 4363, 1903, 4362, 1902, 4361, 1901, 
                1900, 4360, 4359, 1899, 1898, 4340, 4339, 1894, 1893, 4355, 
                4354, 1888, 1887, 4349, 4348, 1882, 1881, 4343, 1876, 4341, 
                1873, 1897}], 
               
               Line[{1874, 4316, 1840, 1844, 1850, 4318, 1852, 4325, 4326, 
                1858, 1860, 4332, 4333, 1866, 1868, 4312, 1877, 4342, 1879, 
                4344, 4345, 1883, 1885, 4350, 4351, 1889, 1891, 4356, 1895, 
                4337, 1838}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            VertexNormals -> CompressedData["
1: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
fwoid7OjV0sGQX1er0cdpaNr9k1Yu0TJAU8M13HziZhg5PfIjJH6/Cvx08Lw
c1KlIV1jeRyKTS4pWH4/BJ2rxScV5lD65dkboZb8cHz+2824RsUPB/20Nhxp
YkHVM+79bnteUzq0z2PnUmM8rzPUson67n4R/80M/0uvyp3QnfYaG6Jts2av
tEAHE1nDgV7qHCBzm9eTuc3sua8ueyZKjNfzwhNT18nJnHTAyJbPndojdeDJ
DXio0AG94jpMZQ5Z4syrSj6nR+YxavP7jbkQjM/E5TYsu+eO8gsyLs6n6rS7
xP9mhv+zP7grJiZ64cStCipS0jrouJ+rdZDaVwFkXrQEY150or1dy7Ooy3Dp
jbna9s0m4L7ZUPketS6hj9cY2X8xhy7Zg3LyD6h9GGPBuWJkrp3k1B4+T2f8
1iG2UrHdGNVbWlLmUs9DiH9xhv/TulxnL0c9xpiFveGiHNb4dPbriyPnvxuZ
Ux1N5lTPJnOqBWZfv7X4hinMKlfJWWttC1sX3+ZdQtkf2cDr/TbjBYzd7bv0
DMdz0E/8eatypA+ZLsVpIWWBexYN5PLvtULVAwEsTcrem8yjHsf69zzqj/mB
uc9ljFDgE87kazFCMbe4m7p//jN3F0+Qudzs7+uws5pfnscD3KgpOWy6xwLH
ck45MZWyf0fmWucw5lrfXJUm8GuxHZivqTsTFL8R3prWathS8fiQ981jvG/s
bYsga9fXkLKnWl7ZxByU+To1nan9s4rM6y4i87pryLzunM/yMTGXLWHCT98v
RyN1Iaw0sWcu9XNVyTzt303/nqf96t6lq20nrCDyhKXjRztFiF08+8iq/7If
Ytjf6Ku7UP/VCTzeLzOXmvkUnETc03qoPDeQOeE3GXPCz4sG8C6c5AOWY82s
r8fZwfddK5WKqPO2idjfYtiL3Jxn/WWMD6wcvyIy8bkz5LV7TigYqedJPNMY
88D95BZUW+6n/Gz9wX3tQzAclq99f6qWBVxkTrgMmRN+gswJ/9GosmWI/w0c
UFq/Jmu6JyiM87KrpM6NZhKPHiOeWUtzXo179Qpmly2quHbSGH4GTW0fR627
Lpl/bkPmn48n88/rjF3O2UhHgOHQfPnd2/zg8JcmtfONLFhB5pOfJPPJhcl8
8ma1V4t/zYqBsSY7FWx6vCH37YzPn6uofU7sTzDsJRvSRU0zfSDDrdH12cBN
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
r39bQ8EPp224JY7U/cJLOIYHGRzDi2f35ivam2LJVnnDrINhoOUwsPsDFf9s
wvsrJry/5YT3t5X2j3/ujfoHtv97ZP9LMvb/s9Iax9sLdfCGWebUl9WR4Ptr
e75oCwsmEf/lDP8KtxoutYmF4s6H3pev3XuD2w2nXFGh7EXJ+65mvK97zqRv
99r9seWD/yzX9z4Y5bS48jS1n+sIJ/ECg5OYZ1rLNfnbc7ylN2MjNITChsCp
gjyU/UISTxEjnpo1E8U/hbujxHiemV0OXvDYecLyt1T+Own3sIhwDyUI97Bt
f9EaC2t3HN4/VfYFTxCm6rkkSozcX4TPuInBZ3y8akHtVGkvFNtQ8+jAYCxu
k43/fKD8H3sJhv23TPthrjRXzNGw5OwK9YAN/ENzD1L3byjhLQ55/5u3qGYu
cuP2sUA8OyHcVjzRBvNvt2jP/cGCOGJvwuAzBsq3n1Rfb4dS3RtMdhu+ws5p
cy/+pt6Xm8QjyojnE32/Yw19vyP7fuci3MlYBneyJMzYeJq+L845pSz32M4R
P77VP5RH7Z9WwoUUZXAhn2iUOJW7BaF0aux7wfoXOLGw/kEflc8x/LT9ZoY9
P13PYCtdzyC7nplPdKgFQ4f20/U/OtD1P7Lr//WEt6jA4C1OD37u6xwwBtaI
Tuq0H/aHNZza4jep73ca4UvWMfiSvtmj9wuuou8XYN8vJoSzOZnB2XwkJNx5
6uF91HoTKVa4yxdmvVh5KJbyk044lVsZnEqTmSsvhiu8RjXpsjGZs60wVbXu
fAiVz69/4WwaTZE/feGsL2pbY5bmxucYIngtu41a3zBjmr/5hsHfnJ32QONI
mBFOLWkfKg/xhvl2Pq92U/u8gfAxrzH4mKfNO7XbpzuidM6xLXvvPwQrWVWu
gpG/R02n7WWI/Vtiv6M7ruGrnj1eaPTdmbfIEx8bVV1XoPyLkHiiGPGsmmak
+UDdCgedfn8IFvNEvnElf6ZS+7aYcEK5CCeUrX8Nn6ot0Fhsj6f0VfpvT9IC
NZVbW05SzyeSeLYz4lE3GLyZw2GFx+5s3Lyv+AI4RM9MGeF8bSfcz1cM7qdz
ttKVg34uqLgq65a4ki+aNPU3L6Lyr034pO8ZfFJRWj9iIq0fka0fLxL7LIZ9
CTffSh8ZdZz3rqkouVIVZxTMkf1B/dxzJB43RjwvvS9KHj13ASB9XBjq74aD
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
tQL3vT75o8R6E3i40uELQxDsmLc5McveA8r7/JnfE/PVifuRdSn9yPV4nNKU
cQ4Ye153PJYAttOrJE6IhILsl66bKp3EvoT7Ya2p/cjRYteDTrtBzsTiWkPe
ADg2YHnrBLEOOc29thxly4Y+jzop/dvhYG2j6NKTS4Nd/+jzLVO759VuHQ6/
NQLfLpKOhOSLin3rZ3wbrunrCrsnweIhI6URvxdom69rukg3DR7ay2V4zsuA
UedeQyaeTGgbjq3leEODj7gfdgz3w/bhfti1KXO/ak2lwFBtq/O1Z3HQZ97/
vPU9cT0/MFzxvDM8GHfiWZYXhlT4Tn3/QLyPDZmaBfmjAfB7G7dgBlcS5K1N
bfMj1k/02tHvhgvfgFGWbSGjijWw3O+oYyLivDToXGIzm6No/8G2g2ruD/93
Hq0ePOub0X0HLJUVL0uxxUKsXX5LG/Fem35u3bAlyRo9Xld58GhbBKqWNRea
8dmbwH2mQ5Q+U4eh2fsgW/I+iH6f4x/6djufDEerSuc6v1GxQuJv/wQp/yD2
T9yXeo7Slyod4Ml0ZMFr1P+WNeD5szeQlmM5NU583vsffak/dVPtroylolVd
78VviySix8LefCWFxHrwYIw72xOO7g3y8Ys/9wad3we65Ij10Ft8cONW9ng0
N/SCSPTpcLRfVLgUdf673/bTjcKIaxcT0IppPY2p5zZQnrGp8RAx7w9wf2UM
pb/yPn4uWcpzDSy4Yf7TKQkdN+o728vuhRy3RFb6dxD7PLk+UQK5PhF9faqn
2gnt3RyEVtCaHhjv00fhP8QOrJ6c8fewLalcnIKChRWWpq6MRMxn985ZVEfs
exfJvkg+Sl8kz6kLV8dt/NHr1+OdhW/uoWrG1c5RM/2JQmt3SVwORKcaOo8z
srqi4LDPYnUzHFXcH3qB0h9acy9atfp8JBKwZmoROeiE2m48PbyYOAdtp1z7
Ofe5oOVNpXdhnikq9H/E2ETsM2k7vJKNTzog0VE1bTGrl2hNnc+HLGLfKMH9
gL8p/YCtd3s6NoWaw+stzU4qWopoic8WxefE9yrs7FJeOx4OxWfWP2VV9gJt
Bdsic2Ie7+A+R1ZKn2PxK45z3qfewP3Scd+jG4xBRXv6q9D4f32L3fP+7r/b
SO7PcEJ2dn9G9P05Avf3FVL6+/TU/c4xH84FB4d7Qc++h8BFtXShvSk0MMR9
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
f+f/AfvpeUw=
             "]], {
           Axes -> True, 
            AxesLabel -> {
             "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
              "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, 
            BoxRatios -> {1, 1, 0.4}, ImageSize -> {380, 380}, 
            Method -> {"RotationControl" -> "Globe"}, 
            PlotRange -> {{-2.709857394019914, 
             2.709857394019914}, {-1.7138642998702553`, 
             1.7138642998702553`}, {0.10348164494983718`, 4.558130177621855}},
             PlotRangePadding -> {
              Scaled[0.02], 
              Scaled[0.02], 
              Scaled[0.02]}}], $CellContext`couplingLocator := LocatorPane[
           Dynamic[FE`u$$26, (FE`u$$26 = If[First[
                 Dimensions[#]] < 3, 
               Flatten[{FE`locDefault$$26, FE`mLocDefault$$26}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; {FE`mScalarArray$$26, FE`kArray$$26} = 
             If[$CellContext`nMasses > FE`lastNumMasses$$26, {
                Append[FE`mScalarArray$$26, FE`defaultMass$$26], 
                $CellContext`growKarray[$CellContext`nMasses]}, {
                Take[FE`mScalarArray$$26, $CellContext`nMasses], 
                Select[FE`kArray$$26, Max[{
                    Part[#, 1], 
                    Part[#, 2]}] <= $CellContext`nMasses& ]}]; 
            Part[FE`u$$26, 1] = If[Dot[
                 Part[FE`u$$26, 1], 
                 Part[FE`u$$26, 1]] < FE`minSquaredDistanceFromOrigin$$26, 
               Part[FE`locDefault$$26, 1], 
               Part[FE`u$$26, 1]]; Part[FE`u$$26, 2] = If[Dot[
                 Part[FE`u$$26, 2], 
                 Part[FE`u$$26, 2]] < FE`minSquaredDistanceFromOrigin$$26, 
               Part[FE`locDefault$$26, 2], 
               Part[FE`u$$26, 2]]; {
               Part[FE`u$$26, 1], 
               Part[
               FE`u$$26, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[
              FE`minAngleBetweenLatticeVectors$$26]; 
            FE`lastNumMasses$$26 = $CellContext`nMasses; 
            FE`m1Sel$$26 = 
             If[FE`m1Sel$$26 > FE`lastNumMasses$$26, 1, FE`m1Sel$$26]; 
            FE`m2Sel$$26 = 
             If[FE`m2Sel$$26 > FE`lastNumMasses$$26, 1, FE`m2Sel$$26]; 
            FE`moSel$$26 = 
             If[FE`moSel$$26 > FE`lastNumMasses$$26, 1, FE`moSel$$26]; 
            FE`moSel$$26 = $CellContext`adjustedmoSel; 
            FE`k1$$26 = $CellContext`kArraySelect[1]; 
            FE`k2$$26 = $CellContext`kArraySelect[2]; 
            FE`k3$$26 = $CellContext`kArraySelect[3]; 
            FE`k4$$26 = $CellContext`kArraySelect[4]; 
            FE`k5$$26 = $CellContext`kArrayOriginSelect; 
            FE`ld$$26 = $CellContext`locDependent; 
            FE`qLoc$$26 = ReplaceAll["qMaxVec", FE`ld$$26]/2; 
            FE`qPlaneLoc$$26 = {-FE`qLoc$$26, FE`qLoc$$26}; 
            FE`couplingData$$26 = $CellContext`calculateCouplings; 
            FE`bRefreshMatrix$$26 = True; 
            FE`tick$$26 = Not[FE`tick$$26])& ], $CellContext`plotSprings, 
           LocatorAutoCreate -> True, ContinuousAction -> False], 
         FE`u$$26 = {{0.1, 1.3}, {1.9, 0.8}, {0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}, FE`locDefault$$26 = {{0.1, 1.3}, {1.9, 0.8}}, 
         FE`mLocDefault$$26 = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
         FE`kArray$$26 = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
           0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 
           0.25, {1, 1, {1, 0}} -> 0.25, {1, 1, {0, 1}} -> 
           0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
           0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 
           0.25, {1, 2, {-1, -1}} -> 0.25, {1, 2, {-1, 1}} -> 
           0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
           0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 
           0.25, {1, 2, {0, 0}} -> 0.25, {2, 1, {-1, 0}} -> 
           0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
           0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 
           0.25, {2, 1, {0, 1}} -> 0.25, {2, 1, {1, 1}} -> 
           0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
           0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 
           0.25, {2, 2, {-1, 1}} -> 0.25, {2, 2, {1, 0}} -> 
           0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
           0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 
           0.25, {1, 3, {0, -1}} -> 0.25, {1, 3, {-1, -1}} -> 
           0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
           0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 
           0.25, {1, 3, {1, -1}} -> 0.25, {1, 3, {0, 0}} -> 
           0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
           0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 
           0.25, {2, 3, {1, 0}} -> 0.25, {2, 3, {0, 1}} -> 
           0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
           0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 
           0.25, {3, 1, {0, -1}} -> 0.25, {3, 1, {-1, -1}} -> 
           0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
           0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 
           0.25, {3, 1, {1, -1}} -> 0.25, {3, 2, {-1, 0}} -> 
           0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
           0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 
           0.25, {3, 2, {0, 1}} -> 0.25, {3, 2, {1, 1}} -> 
           0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
           0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 
           0.25, {3, 3, {-1, 1}} -> 0.25, {3, 3, {1, 0}} -> 
           0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
           0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`nMasses := First[
            Dimensions[FE`u$$26]] - 2, FE`defaultMass$$26 = 
         20, $CellContext`growKarray[
           Pattern[$CellContext`nmNew$, 
            Blank[Integer]]] := 
         Module[{$CellContext`k2$}, $CellContext`k2$ = Flatten[
              Map[$CellContext`constructKArrayElements[
                Part[#, 1], 
                Part[#, 2]]& , 
               Select[
                Flatten[
                 
                 Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew$}, {$CellContext`j, $CellContext`nmNew$}], 1], 
                Max[#] == $CellContext`nmNew$& ]], 2]; 
           Flatten[{FE`kArray$$26, $CellContext`k2$}, 1]], 
         Attributes[$CellContext`nmNew$] = {Temporary}, 
         Attributes[$CellContext`k2$] = {
          Temporary}, $CellContext`constructKArrayElements[
           Pattern[$CellContext`i$, 
            Blank[Integer]], 
           Pattern[$CellContext`j$, 
            Blank[Integer]]] := 
         Module[{$CellContext`a$}, $CellContext`a$ = Flatten[
              
              Table[{$CellContext`i$, $CellContext`j$, $CellContext`s 
                 Part[FE`nArray$$26, $CellContext`n]} -> 
               Part[FE`kDefaults$$26, $CellContext`n], {$CellContext`s, -1, 1,
                 2}, {$CellContext`n, 4}], 1]; 
           If[$CellContext`i$ < $CellContext`j$, 
             
             Append[$CellContext`a$, {$CellContext`i$, $CellContext`j$, {0, 
                0}} -> Part[FE`kDefaults$$26, 5]], $CellContext`a$]], 
         Attributes[$CellContext`i$] = {Temporary}, 
         FE`nArray$$26 = {{1, 0}, {0, 1}, {1, 1}, {1, -1}}, 
         FE`kDefaults$$26 = {0.25, 0.25, 0.25, 0.25, 0.25}, 
         FE`minSquaredDistanceFromOrigin$$26 = 
         0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
           Pattern[$CellContext`minAngle$, 
            Blank[]]] := Module[{$CellContext`t$}, $CellContext`t$ = Abs[
              ArcCos[
               Dot[
                Normalize[
                 Part[FE`u$$26, 1]], 
                Normalize[
                 Part[FE`u$$26, 2]]]]]; $CellContext`t$ = 
            If[$CellContext`t$ > Pi/2, Pi - $CellContext`t$, $CellContext`t$]; 
           If[$CellContext`t$ < $CellContext`minAngle$, FE`locDefault$$26, {
              Part[FE`u$$26, 1], 
              Part[FE`u$$26, 2]}]], 
         Attributes[$CellContext`minAngle$] = {Temporary}, 
         Attributes[$CellContext`t$] = {Temporary}, 
         FE`minAngleBetweenLatticeVectors$$26 = Pi/6, FE`m1Sel$$26 = 1, 
         FE`m2Sel$$26 = 1, FE`moSel$$26 = 2, $CellContext`adjustedmoSel := 
         If[FE`lastNumMasses$$26 > 2, 
           If[FE`moSel$$26 == FE`m1Sel$$26, 
            First[
             DeleteCases[
              Range[FE`lastNumMasses$$26], FE`m1Sel$$26]], FE`moSel$$26], 
           First[
            Delete[
             Range[2], FE`m1Sel$$26]]], FE`k1$$26 = 
         0.25, $CellContext`kArraySelect[
           Pattern[$CellContext`ni$, 
            Blank[Integer]]] := ReplaceAll[{FE`m1Sel$$26, FE`m2Sel$$26, 
            Part[FE`nArray$$26, $CellContext`ni$]}, FE`kArray$$26], 
         Attributes[$CellContext`ni$] = {Temporary}, FE`k2$$26 = 0.25, 
         FE`k3$$26 = 0.25, FE`k4$$26 = 0.25, FE`k5$$26 = 
         0.25, $CellContext`kArrayOriginSelect := ReplaceAll[
           Append[
            Sort[{FE`m1Sel$$26, FE`moSel$$26}], {0, 0}], 
           FE`kArray$$26], $CellContext`locDependent := 
         Module[{$CellContext`m$, $CellContext`latticeBasis$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`reciprocalBasis$, \
$CellContext`mObliqueComponents$, $CellContext`mPosFirstCell$, \
$CellContext`reciprocalNorms$}, $CellContext`latticeBasis$ = 
            Take[FE`u$$26, 2]; $CellContext`m$ = 
            Drop[FE`u$$26, 2]; $CellContext`numberLatticeLinesToDisplay$ = 
            Map[Ceiling[
               Abs[FE`windowHalfWidth$$26/Part[
                 Part[$CellContext`latticeBasis$, #], #]]]& , 
              Range[
              2]]; $CellContext`reciprocalBasis$ = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis$]; \
$CellContext`reciprocalNorms$ = Map[Norm[
               Part[$CellContext`reciprocalBasis$, #]]& , 
              Range[2]]; $CellContext`mObliqueComponents$ = Table[
              Dot[
               Part[$CellContext`m$, $CellContext`i], 
               
               Part[$CellContext`reciprocalBasis$, $CellContext`j]], \
{$CellContext`i, FE`lastNumMasses$$26}, {$CellContext`j, 
               2}]; $CellContext`mPosFirstCell$ = 
            Map[Part[$CellContext`m$, #] - Dot[
               Floor[
                
                Part[$CellContext`mObliqueComponents$, #]], \
$CellContext`latticeBasis$]& , 
              Range[FE`lastNumMasses$$26]]; {
            "latticeBasis" -> $CellContext`latticeBasis$, "latticeNorms" -> 
             Map[Norm[
                Part[$CellContext`latticeBasis$, #]]& , 
               Range[2]], "latticeUnitVectors" -> Map[Normalize[
                Part[$CellContext`latticeBasis$, #]]& , 
               Range[2]], 
             "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay$, 
             "reciprocalBasis" -> $CellContext`reciprocalBasis$, 
             "reciprocalNorms" -> $CellContext`reciprocalNorms$, "qMaxVec" -> 
             2 Pi $CellContext`reciprocalNorms$, 
             "mObliqueComponents" -> $CellContext`mObliqueComponents$, 
             "mPosFirstCell" -> $CellContext`mPosFirstCell$, 
             "pointsDataTable" -> Map[$CellContext`pointsTable[
                
                Part[$CellContext`mPosFirstCell$, #], \
$CellContext`latticeBasis$, $CellContext`numberLatticeLinesToDisplay$]& , 
               Range[FE`lastNumMasses$$26]], "lineTable" -> 
             Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay$, $CellContext`latticeBasis$, #]& , 
               Permutations[{1, 2}]]}], 
         Attributes[$CellContext`latticeBasis$] = {Temporary}, 
         Attributes[$CellContext`reciprocalBasis$] = {Temporary}, 
         Attributes[$CellContext`mObliqueComponents$] = {Temporary}, 
         Attributes[$CellContext`mPosFirstCell$] = {Temporary}, 
         Attributes[$CellContext`reciprocalNorms$] = {
          Temporary}, $CellContext`calcReciprocalBasis[
           Pattern[$CellContext`loc, 
            Blank[List]]] := Inverse[
           Transpose[$CellContext`loc]], $CellContext`pointsTable[
           Pattern[$CellContext`mPosFirstCell, 
            Blank[List]], 
           Pattern[$CellContext`latticeBasis, 
            Blank[List]], 
           Pattern[$CellContext`numberLatticeLinesToDisplay, 
            Blank[List]]] := 
         Table[$CellContext`mPosFirstCell + 
           Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
            
            Part[$CellContext`numberLatticeLinesToDisplay, 
             1]}, {$CellContext`j, -
            Part[$CellContext`numberLatticeLinesToDisplay, 2], 
            
            Part[$CellContext`numberLatticeLinesToDisplay, 
             2]}], $CellContext`calcLineTable[
           Pattern[$CellContext`n, 
            Blank[List]], 
           Pattern[$CellContext`b, 
            Blank[List]], 
           Pattern[$CellContext`i, 
            Blank[List]]] := 
         Module[{$CellContext`first, $CellContext`second}, \
{$CellContext`first, $CellContext`second} = $CellContext`i; Table[
             
             Line[{(-Part[$CellContext`n, $CellContext`first]) 
                Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                Part[$CellContext`b, $CellContext`second], 
               Part[$CellContext`n, $CellContext`first] 
                Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, \
-Part[$CellContext`n, $CellContext`second], 
              
              Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`calculateCouplings := 
         Module[{$CellContext`t$, $CellContext`t1$, $CellContext`t2$, \
$CellContext`r$, $CellContext`mp$}, {$CellContext`r$, $CellContext`mp$} = 
            ReplaceAll[{"latticeBasis", "mPosFirstCell"}, 
              FE`ld$$26]; $CellContext`t$ = Map[Append[#, 
               $CellContext`relativeDifferences[$CellContext`r$, \
$CellContext`mp$, 
                First[#]]]& , 
              ReplaceAll[FE`kArray$$26, Rule -> List]]; $CellContext`t$ = 
            Map[Flatten[{
                Part[#, 1], {
                 Part[#, 2]}, 
                Part[#, 3]}, 1]& , $CellContext`t$]; $CellContext`t1$ = Table[
              Sort[
               
               Select[$CellContext`t$, And[
                Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
               Part[#, 5] < Part[#2, 5]& ], {$CellContext`i, 
               FE`lastNumMasses$$26}]; $CellContext`t2$ = 
            Select[$CellContext`t$, Part[#, 3] == {0, 0}& ]; $CellContext`t2$ = 
            Flatten[{$CellContext`t2$, 
               Map[Flatten[{{
                   Part[#, 2], 
                   Part[#, 1]}, 
                  Drop[#, 2]}, 1]& , $CellContext`t2$]}, 1]; $CellContext`t2$ = 
            Table[
              Sort[
               Select[$CellContext`t2$, Part[#, 1] == $CellContext`i& ], 
               Part[#, 5] < Part[#2, 5]& ], {$CellContext`i, 
               FE`lastNumMasses$$26}]; {$CellContext`t2$, $CellContext`t1$}], 
         Attributes[$CellContext`t1$] = {Temporary}, 
         Attributes[$CellContext`t2$] = {Temporary}, 
         Attributes[$CellContext`mp$] = {
          Temporary}, $CellContext`relativeDifferences[
           Pattern[$CellContext`r, 
            Blank[List]], 
           Pattern[$CellContext`mp, 
            Blank[List]], {
            Pattern[$CellContext`mIndex1, 
             Blank[Integer]], 
            Pattern[$CellContext`mIndex2, 
             Blank[Integer]], 
            Pattern[$CellContext`n, 
             Blank[List]]}] := 
         Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther}, \
$CellContext`pOrigin = 
            Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
            Part[$CellContext`mp, $CellContext`mIndex2] + 
             
             Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
            Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], $CellContext`dn = 
         3.4899999999999993`, $CellContext`projOpU[
           Pattern[$CellContext`v, 
            Blank[List]]] := {{
           Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
            Part[$CellContext`v, 2]}, {
           Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
            Part[$CellContext`v, 2]^2}}, FE`bRefreshMatrix$$26 = False, 
         FE`tick$$26 = True, $CellContext`plotSprings := 
         Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$}, \
$CellContext`latticeBasis$ = Take[FE`u$$26, 2]; $CellContext`aLoc$ = 
            Part[FE`u$$26, 1]; $CellContext`bLoc$ = 
            Part[FE`u$$26, 
              2]; {$CellContext`mLoc$, $CellContext`reciprocalBasis$, \
$CellContext`pointsDataTable$, $CellContext`numberLatticeLinesToDisplay$, \
$CellContext`lines$} = 
            ReplaceAll[{
              "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
               "numberLatticeLinesToDisplay", "lineTable"}, 
              FE`ld$$26]; $CellContext`pointsList$[
              Pattern[$CellContext`n$, 
               Blank[Integer]]] := {
              $CellContext`massColors[$CellContext`n$], Null, 
              PointSize[
               Sqrt[
               Part[FE`mScalarArray$$26, $CellContext`n$] FE`mMax$$26^(-1)/
                500]], 
              Map[Point[#]& , 
               Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
              Text[
               $CellContext`massLabel[$CellContext`n$], 
               Part[$CellContext`mLoc$, $CellContext`n$] + 
               FE`textDisOffset$$26]}; $CellContext`cOrigin$ = Select[
              Part[
               Part[FE`couplingData$$26, 1], FE`m1Sel$$26], 
              Take[#, 2] == {FE`m1Sel$$26, FE`moSel$$26}& ]; $CellContext`cN$ = 
            Select[
              Part[
               Part[FE`couplingData$$26, 2], FE`m1Sel$$26], 
              Take[#, 2] == {FE`m1Sel$$26, FE`m2Sel$$26}& ]; $CellContext`g$ = 
            Map[ListLinePlot[
               $CellContext`springPoints[
                Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
               ReplaceAll[
                 Part[#, 3], FE`springColorsByN$$26]]& , $CellContext`cN$]; 
           If[FE`lastNumMasses$$26 > 1, 
             AppendTo[$CellContext`g$, 
              Map[ListLinePlot[
                $CellContext`springPoints[
                 Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
                ReplaceAll[
                  Part[#, 3], 
                  FE`springColorsByN$$26]]& , $CellContext`cOrigin$]], Null]; 
           Show[{
              Graphics[
               Flatten[{{$CellContext`lines$, Blue, 
                  Map[Arrow[{{0, 0}, 
                    Part[$CellContext`reciprocalBasis$, #]}]& , 
                   Range[2]], Thick, 
                  Arrowheads[0.05], Red, 
                  Map[Arrow[{{0, 0}, 
                    Part[$CellContext`latticeBasis$, #]}]& , 
                   Range[2]], 
                  Text[
                   OverVector["a"], $CellContext`aLoc$/2 + 
                   FE`textDisOffset$$26], 
                  Text[
                   OverVector["b"], $CellContext`bLoc$/2 + 
                   FE`textDisOffset$$26]}, 
                 Map[$CellContext`pointsList$[#]& , 
                  Range[FE`lastNumMasses$$26]]}], 
               PlotRange -> {{-FE`windowHalfWidth$$26/2, 
                  FE`windowHalfWidth$$26}, {-FE`windowHalfWidth$$26/2, 
                  FE`windowHalfWidth$$26}}, ImageSize -> 
               FE`primaryDisplaySize$$26], $CellContext`g$}]], 
         Attributes[$CellContext`aLoc$] = {Temporary}, 
         Attributes[$CellContext`bLoc$] = {Temporary}, 
         Attributes[$CellContext`mLoc$] = {Temporary}, 
         Attributes[$CellContext`pointsList$] = {Temporary}, 
         Attributes[$CellContext`cOrigin$] = {Temporary}, 
         Attributes[$CellContext`cN$] = {Temporary}, 
         Attributes[$CellContext`g$] = {Temporary}, 
         Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
         Style[
           $CellContext`indexLabel["m", #], 
           $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
           Style[#, Italic], #2]& , Attributes[Subscript] = {NHoldRest}, 
         FE`textDisOffset$$26 = {0.25, 0.25}, $CellContext`springPoints[
           Pattern[$CellContext`a12, 
            Blank[List]], 
           Optional[
            Pattern[$CellContext`n, 
             Blank[Integer]], 8], 
           Optional[
            Pattern[$CellContext`h, 
             Blank[]], 0.05], 
           Optional[
            Pattern[$CellContext`f, 
             Blank[]], 0.1]] := 
         Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
            Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
            Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
              Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
            Dot[$CellContext`r, {$CellContext`n1, 0}]; {
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                   2 $CellContext`f) $CellContext`nd, $CellContext`h 
                 Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 
               0, 1, 0.01}], 
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                   2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
             
             Table[$CellContext`a1 - $CellContext`r1 + 
              Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
         FE`springColorsByN$$26 = {{-1, 0} -> 
           RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
           RGBColor[0, 2/3, 0], {-1, -1} -> 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
           RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
           RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
           RGBColor[0, 2/3, 0], {1, 1} -> 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
           RGBColor[0, 2/3, 2/3]}, $CellContext`dynamicsControls := {
           Row[{
             OverVector["q"], " = ", 
             
             Module[{$CellContext`qm$}, $CellContext`qm$ = 
               ReplaceAll["qMaxVec", FE`ld$$26]; Slider2D[
                Dynamic[
                FE`qLoc$$26, (FE`qLoc$$26 = #; FE`bRefreshDynamics$$26 = True; 
                 FE`tick$$26 = Not[FE`tick$$26])& ], 
                ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
             " 2 \[Pi] ", 
             Dynamic[
              NumberForm[
               MatrixForm[FE`qLoc$$26/(2 Pi)], {3, 2}]]}], 
           Row[{
             Text["time, normalized to one period:"]}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`tau$$26, (FE`tau$$26 = #; 
               FE`tick$$26 = Not[FE`tick$$26])& ], {0, 1}, ImageSize -> Tiny, 
              ContinuousAction -> True, Appearance -> "Open"]}, 
            ImageSize -> {200, 60}], 
           Row[{
             Text["oscillation scale factor:"]}], 
           Row[{Manipulator[
               Dynamic[
               FE`scale$$26, (FE`scale$$26 = #; FE`bRefreshDynPlot$$26 = True; 
                FE`tick$$26 = Not[FE`tick$$26])& ], {0.05, 1}, ImageSize -> 
               Tiny, ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}] " ", 
             Dynamic[
              NumberForm[FE`scale$$26, {3, 2}]]}], 
           Text[
            Text["Angular frequency \[Omega](q), selection:"]], 
           Dynamic[
            SetterBar[
             Dynamic[
             FE`omegaIndex$$26, (FE`omegaIndex$$26 = #; 
              FE`bRefreshDynPlot$$26 = True; 
              FE`tick$$26 = Not[FE`tick$$26])& ], 
             Range[2 FE`lastNumMasses$$26]]]}, 
         Attributes[$CellContext`qm$] = {Temporary}, FE`bRefreshDynamics$$26 = 
         False, FE`tau$$26 = 0, FE`bRefreshDynPlot$$26 = 
         False, $CellContext`freqControls := {
           Row[{
             Text["mesh size "], 
             Manipulator[
              Dynamic[
              FE`meshSize$$26, (FE`meshSize$$26 = #; 
               FE`bRefreshFreqPlot$$26 = True; 
               FE`tick$$26 = Not[FE`tick$$26])& ], {2, 30, 2}, ImageSize -> 
              Tiny, ContinuousAction -> False, 
              AppearanceElements -> {"InputField"}], " ", 
             Dynamic[FE`meshSize$$26]}], 
           LocatorPane[
            Dynamic[FE`qPlaneLoc$$26], 
            Dynamic[
             (Graphics[{
               Lighter[Gray], 
               Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                  Part[#, 1], -Part[#, 2]}, {
                  Part[#, 1], 
                  Part[#, 2]}, {-Part[#, 1], 
                  Part[#, 2]}}], Black, 
               Line[FE`qPlaneLoc$$26]}, PlotRange -> {{-Part[#, 1], 
                  Part[#, 1]}, {-Part[#, 2], 
                  Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
              ReplaceAll["qMaxVec", FE`ld$$26]]], ContinuousAction -> False]},
          FE`bRefreshFreqPlot$$26 = False, $CellContext`massSetter := {
           Row[{
             Text["mass: "], 
             Dynamic[
              If[FE`lastNumMasses$$26 > 1, 
               SetterBar[
                Dynamic[
                FE`m1Sel$$26, (
                 FE`m1Sel$$26 = #; $CellContext`massValue = 
                  Part[FE`mScalarArray$$26, FE`m1Sel$$26]; 
                 FE`k1$$26 = $CellContext`kArraySelect[1]; 
                 FE`k2$$26 = $CellContext`kArraySelect[2]; 
                 FE`k3$$26 = $CellContext`kArraySelect[3]; 
                 FE`k4$$26 = $CellContext`kArraySelect[4]; 
                 FE`moSel$$26 = $CellContext`adjustedmoSel; 
                 FE`k5$$26 = $CellContext`kArrayOriginSelect; 
                 FE`tick$$26 = Not[FE`tick$$26])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 Range[FE`lastNumMasses$$26]]], 
               $CellContext`massLabel[1]]]}], 
           Row[{
             Manipulator[
              
              Dynamic[$CellContext`massValue, ($CellContext`massValue = #; 
               Part[FE`mScalarArray$$26, 
                  FE`m1Sel$$26] = $CellContext`massValue; 
               FE`bRefreshMatrix$$26 = True; 
               FE`tick$$26 = Not[FE`tick$$26])& ], {0.25, 
               Dynamic[FE`mMax$$26]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[
               Part[FE`mScalarArray$$26, FE`m1Sel$$26], {2, 
               1}]]}]}, $CellContext`massValue = 0.25, $CellContext`m2Setter := {
           Text["coupling to neighbouring: "], 
           Dynamic[
            If[FE`lastNumMasses$$26 > 1, 
             SetterBar[
              Dynamic[
              FE`m2Sel$$26, (FE`m2Sel$$26 = #; 
               FE`k1$$26 = $CellContext`kArraySelect[1]; 
               FE`k2$$26 = $CellContext`kArraySelect[2]; 
               FE`k3$$26 = $CellContext`kArraySelect[3]; 
               FE`k4$$26 = $CellContext`kArraySelect[4]; 
               FE`tick$$26 = Not[FE`tick$$26])& ], 
              Map[# -> $CellContext`massLabel[#]& , 
               Range[FE`lastNumMasses$$26]]], 
             $CellContext`massLabel[1]]]}, $CellContext`km1 := {
           Row[{
             Text["horizontal: "], 
             $CellContext`kLable[1], " || ", 
             OverVector["a"], " "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k1$$26, (FE`k1$$26 = #; 
               FE`kArray$$26 = $CellContext`alterKArrayElements[1, FE`k1$$26]; 
               FE`couplingData$$26 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$26 = True; 
               FE`tick$$26 = Not[FE`tick$$26])& ], {
               Dynamic[FE`kMin$$26], 
               Dynamic[FE`kMax$$26]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[FE`k1$$26, {3, 2}]]}]}, $CellContext`kLable = Style[
           $CellContext`indexLabel["k", #], FontColor -> 
           Part[FE`springColors$$26, #]]& , FE`springColors$$26 = {
           RGBColor[2/3, 0.33333333333333337`, 0], 
           RGBColor[0, 2/3, 0], 
           RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
           RGBColor[0, 2/3, 2/3], 
           RGBColor[2/3, 2/3, 0]}, $CellContext`alterKArrayElements[
           Pattern[$CellContext`ni$, 
            Blank[Integer]], 
           Pattern[$CellContext`v$, 
            Blank[]]] := 
         ReplaceAll[FE`kArray$$26, {({FE`m1Sel$$26, FE`m2Sel$$26, 
               Part[FE`nArray$$26, $CellContext`ni$]} -> 
             Blank[]) :> ({FE`m1Sel$$26, FE`m2Sel$$26, 
               Part[FE`nArray$$26, $CellContext`ni$]} -> $CellContext`v$), ({
              FE`m1Sel$$26, FE`m2Sel$$26, -
               Part[FE`nArray$$26, $CellContext`ni$]} -> 
             Blank[]) :> ({
              FE`m1Sel$$26, FE`m2Sel$$26, -
               Part[FE`nArray$$26, $CellContext`ni$]} -> $CellContext`v$)}], 
         Attributes[$CellContext`v$] = {Temporary}, FE`kMin$$26 = 0.05, 
         FE`kMax$$26 = 1, $CellContext`km2 := {
           Row[{
             Text["vertical: "], 
             $CellContext`kLable[2], " || ", 
             OverVector["b"], " "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k2$$26, (FE`k2$$26 = #; 
               FE`kArray$$26 = $CellContext`alterKArrayElements[2, FE`k2$$26]; 
               FE`couplingData$$26 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$26 = True; 
               FE`tick$$26 = Not[FE`tick$$26])& ], {
               Dynamic[FE`kMin$$26], 
               Dynamic[FE`kMax$$26]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[FE`k2$$26, {3, 2}]]}]}, $CellContext`km3 := {
           Row[{
             Text["diagonal: "], 
             $CellContext`kLable[3], " || (", 
             OverVector["b"], " + ", 
             OverVector["a"], ") "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k3$$26, (FE`k3$$26 = #; 
               FE`kArray$$26 = $CellContext`alterKArrayElements[3, FE`k3$$26]; 
               FE`couplingData$$26 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$26 = True; 
               FE`tick$$26 = Not[FE`tick$$26])& ], {
               Dynamic[FE`kMin$$26], 
               Dynamic[FE`kMax$$26]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[FE`k3$$26, {3, 2}]]}]}, $CellContext`km4 := {
           Row[{
             Text["diagonal: "], 
             $CellContext`kLable[4], " || (", 
             OverVector["b"], " - ", 
             OverVector["a"], ") "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k4$$26, (FE`k4$$26 = #; 
               FE`kArray$$26 = $CellContext`alterKArrayElements[4, FE`k4$$26]; 
               FE`couplingData$$26 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$26 = True; 
               FE`tick$$26 = Not[FE`tick$$26])& ], {
               Dynamic[FE`kMin$$26], 
               Dynamic[FE`kMax$$26]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[FE`k4$$26, {3, 2}]]}]}, $CellContext`km5 := {
           Row[{
             Text["origin coupling from "], 
             Dynamic[
              $CellContext`massLabel[FE`m1Sel$$26]], 
             Text[" to "], 
             Dynamic[
              If[FE`lastNumMasses$$26 > 2, 
               SetterBar[
                Dynamic[
                FE`moSel$$26, (FE`moSel$$26 = #; 
                 FE`k5$$26 = $CellContext`kArrayOriginSelect; 
                 FE`tick$$26 = Not[FE`tick$$26])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  Range[FE`lastNumMasses$$26], FE`m1Sel$$26]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], FE`m1Sel$$26]]]]]], " ", 
             $CellContext`kLable[5], ": "}], 
           Row[{
             Manipulator[
              Dynamic[
              FE`k5$$26, (FE`k5$$26 = #; 
               FE`kArray$$26 = $CellContext`alterKarrayOriginElement[
                 FE`k5$$26]; 
               FE`couplingData$$26 = $CellContext`calculateCouplings; 
               FE`bRefreshMatrix$$26 = True; 
               FE`tick$$26 = Not[FE`tick$$26])& ], {
               Dynamic[FE`kMin$$26], 
               Dynamic[FE`kMax$$26]}, ImageSize -> Tiny, ContinuousAction -> 
              False, AppearanceElements -> {"InputField"}], " ", 
             Dynamic[
              NumberForm[
              FE`k5$$26, {3, 2}]]}]}, $CellContext`alterKarrayOriginElement[
           Pattern[$CellContext`v$, 
            Blank[]]] := 
         Module[{$CellContext`m1oSet$}, $CellContext`m1oSet$ = Append[
              Sort[{FE`m1Sel$$26, FE`moSel$$26}], {0, 0}]; 
           ReplaceAll[
            FE`kArray$$26, ($CellContext`m1oSet$ -> 
              Blank[]) :> ($CellContext`m1oSet$ -> $CellContext`v$)]], 
         Attributes[$CellContext`m1oSet$] = {Temporary}}; {$CellContext`u$$ = 
          Flatten[{$CellContext`locDefault$$, $CellContext`mLocDefault$$}, 
            1]; $CellContext`springColorsByN$$ = DeleteDuplicates[
            Flatten[
             Table[$CellContext`s Part[
                 Append[$CellContext`nArray$$, {0, 0}], $CellContext`n] -> 
              Part[$CellContext`springColors$$, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 5}], 
             1]]; $CellContext`springPoints[
            Pattern[$CellContext`a12, 
             Blank[List]], 
            Optional[
             Pattern[$CellContext`n, 
              Blank[Integer]], 8], 
            Optional[
             Pattern[$CellContext`h, 
              Blank[]], 0.05], 
            Optional[
             Pattern[$CellContext`f, 
              Blank[]], 0.1]] := 
          Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
             Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
             Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
               Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
             Dot[$CellContext`r, {$CellContext`n1, 0}]; {
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                    2 $CellContext`f) $CellContext`nd, $CellContext`h 
                  Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 
                0, 1, 0.01}], 
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                    2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
              
              Table[$CellContext`a1 - $CellContext`r1 + 
               Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 
                0.01}]}]; $CellContext`indexLabel = Subscript[
            Style[#, Italic], #2]& ; $CellContext`kLable = Style[
            $CellContext`indexLabel["k", #], FontColor -> 
            Part[$CellContext`springColors$$, #]]& ; $CellContext`massColors := 
          Part[
            Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
            1]& ; $CellContext`massLabel := Style[
            $CellContext`indexLabel["m", #], 
            $CellContext`massColors[#]]& ; $CellContext`calcLineTable[
            Pattern[$CellContext`n, 
             Blank[List]], 
            Pattern[$CellContext`b, 
             Blank[List]], 
            Pattern[$CellContext`i, 
             Blank[List]]] := 
          Module[{$CellContext`first, $CellContext`second}, \
{$CellContext`first, $CellContext`second} = $CellContext`i; Table[
              
              Line[{(-Part[$CellContext`n, $CellContext`first]) 
                 Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                 Part[$CellContext`b, $CellContext`second], 
                Part[$CellContext`n, $CellContext`first] 
                 Part[$CellContext`b, $CellContext`first] + $CellContext`j 
                 Part[$CellContext`b, $CellContext`second]}], \
{$CellContext`j, -Part[$CellContext`n, $CellContext`second], 
               
               Part[$CellContext`n, $CellContext`second]}]]; \
$CellContext`calcReciprocalBasis[
            Pattern[$CellContext`loc, 
             Blank[List]]] := Inverse[
            Transpose[$CellContext`loc]]; $CellContext`pointsTable[
            Pattern[$CellContext`mPosFirstCell, 
             Blank[List]], 
            Pattern[$CellContext`latticeBasis, 
             Blank[List]], 
            Pattern[$CellContext`numberLatticeLinesToDisplay, 
             Blank[List]]] := 
          Table[$CellContext`mPosFirstCell + 
            Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
             
             Part[$CellContext`numberLatticeLinesToDisplay, 
              1]}, {$CellContext`j, -
             Part[$CellContext`numberLatticeLinesToDisplay, 2], 
             
             Part[$CellContext`numberLatticeLinesToDisplay, 
              2]}]; $CellContext`nMasses := First[
             Dimensions[$CellContext`u$$]] - 2; $CellContext`adjustedmoSel := 
          If[$CellContext`lastNumMasses$$ > 2, 
            If[$CellContext`moSel$$ == $CellContext`m1Sel$$, 
             First[
              DeleteCases[
               
               Range[$CellContext`lastNumMasses$$], $CellContext`m1Sel$$]], \
$CellContext`moSel$$], 
            First[
             Delete[
              Range[
              2], $CellContext`m1Sel$$]]]; \
$CellContext`constructKArrayElements[
            Pattern[$CellContext`i$, 
             Blank[Integer]], 
            Pattern[$CellContext`j$, 
             Blank[Integer]]] := 
          Module[{$CellContext`a$}, $CellContext`a$ = Flatten[
               
               Table[{$CellContext`i$, $CellContext`j$, $CellContext`s 
                  Part[$CellContext`nArray$$, $CellContext`n]} -> 
                Part[$CellContext`kDefaults$$, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
            If[$CellContext`i$ < $CellContext`j$, 
              
              Append[$CellContext`a$, {$CellContext`i$, $CellContext`j$, {0, 
                 0}} -> Part[$CellContext`kDefaults$$, 
                 5]], $CellContext`a$]]; $CellContext`constructKArray[
            Pattern[$CellContext`r, 
             Blank[Integer]]] := Flatten[
            Table[
             $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2]; $CellContext`alterKArrayElements[
            Pattern[$CellContext`ni$, 
             Blank[Integer]], 
            Pattern[$CellContext`v$, 
             Blank[]]] := 
          ReplaceAll[$CellContext`kArray$$, {({$CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                Part[$CellContext`nArray$$, $CellContext`ni$]} -> 
              Blank[]) :> ({$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                
                Part[$CellContext`nArray$$, $CellContext`ni$]} -> \
$CellContext`v$), ({$CellContext`m1Sel$$, $CellContext`m2Sel$$, -
                Part[$CellContext`nArray$$, $CellContext`ni$]} -> 
              Blank[]) :> ({$CellContext`m1Sel$$, $CellContext`m2Sel$$, -
                Part[$CellContext`nArray$$, $CellContext`ni$]} -> \
$CellContext`v$)}]; $CellContext`alterKarrayOriginElement[
            Pattern[$CellContext`v$, 
             Blank[]]] := 
          Module[{$CellContext`m1oSet$}, $CellContext`m1oSet$ = Append[
               Sort[{$CellContext`m1Sel$$, $CellContext`moSel$$}], {0, 0}]; 
            ReplaceAll[$CellContext`kArray$$, ($CellContext`m1oSet$ -> 
               Blank[]) :> ($CellContext`m1oSet$ -> $CellContext`v$)]]; \
$CellContext`kArraySelect[
            Pattern[$CellContext`ni$, 
             Blank[Integer]]] := 
          ReplaceAll[{$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
             
             Part[$CellContext`nArray$$, $CellContext`ni$]}, \
$CellContext`kArray$$]; $CellContext`kArrayOriginSelect := ReplaceAll[
            Append[
             Sort[{$CellContext`m1Sel$$, $CellContext`moSel$$}], {0, 
             0}], $CellContext`kArray$$]; $CellContext`growKarray[
            Pattern[$CellContext`nmNew$, 
             Blank[Integer]]] := 
          Module[{$CellContext`k2$}, $CellContext`k2$ = Flatten[
               Map[$CellContext`constructKArrayElements[
                 Part[#, 1], 
                 Part[#, 2]]& , 
                Select[
                 Flatten[
                  
                  Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew$}, {$CellContext`j, $CellContext`nmNew$}], 1], 
                 Max[#] == $CellContext`nmNew$& ]], 2]; 
            Flatten[{$CellContext`kArray$$, $CellContext`k2$}, 
              1]]; $CellContext`resetLatticeVectorsIfAngleTooSmall[
            Pattern[$CellContext`minAngle$, 
             Blank[]]] := Module[{$CellContext`t$}, $CellContext`t$ = Abs[
               ArcCos[
                Dot[
                 Normalize[
                  Part[$CellContext`u$$, 1]], 
                 Normalize[
                  Part[$CellContext`u$$, 2]]]]]; $CellContext`t$ = 
             If[$CellContext`t$ > Pi/2, 
               Pi - $CellContext`t$, $CellContext`t$]; 
            If[$CellContext`t$ < $CellContext`minAngle$, \
$CellContext`locDefault$$, {
               Part[$CellContext`u$$, 1], 
               Part[$CellContext`u$$, 2]}]]; $CellContext`locDependent := 
          Module[{$CellContext`m$, $CellContext`latticeBasis$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`reciprocalBasis$, \
$CellContext`mObliqueComponents$, $CellContext`mPosFirstCell$, \
$CellContext`reciprocalNorms$}, $CellContext`latticeBasis$ = 
             Take[$CellContext`u$$, 2]; $CellContext`m$ = 
             Drop[$CellContext`u$$, 
               2]; $CellContext`numberLatticeLinesToDisplay$ = Map[Ceiling[
                Abs[$CellContext`windowHalfWidth$$/Part[
                  Part[$CellContext`latticeBasis$, #], #]]]& , 
               Range[
               2]]; $CellContext`reciprocalBasis$ = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis$]; \
$CellContext`reciprocalNorms$ = Map[Norm[
                Part[$CellContext`reciprocalBasis$, #]]& , 
               Range[2]]; $CellContext`mObliqueComponents$ = Table[
               Dot[
                Part[$CellContext`m$, $CellContext`i], 
                
                Part[$CellContext`reciprocalBasis$, $CellContext`j]], \
{$CellContext`i, $CellContext`lastNumMasses$$}, {$CellContext`j, 
                2}]; $CellContext`mPosFirstCell$ = 
             Map[Part[$CellContext`m$, #] - Dot[
                Floor[
                 
                 Part[$CellContext`mObliqueComponents$, #]], \
$CellContext`latticeBasis$]& , 
               Range[$CellContext`lastNumMasses$$]]; {
             "latticeBasis" -> $CellContext`latticeBasis$, "latticeNorms" -> 
              Map[Norm[
                 Part[$CellContext`latticeBasis$, #]]& , 
                Range[2]], "latticeUnitVectors" -> Map[Normalize[
                 Part[$CellContext`latticeBasis$, #]]& , 
                Range[2]], 
              "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay$, 
              "reciprocalBasis" -> $CellContext`reciprocalBasis$, 
              "reciprocalNorms" -> $CellContext`reciprocalNorms$, "qMaxVec" -> 
              2 Pi $CellContext`reciprocalNorms$, 
              "mObliqueComponents" -> $CellContext`mObliqueComponents$, 
              "mPosFirstCell" -> $CellContext`mPosFirstCell$, 
              "pointsDataTable" -> Map[$CellContext`pointsTable[
                 
                 Part[$CellContext`mPosFirstCell$, #], \
$CellContext`latticeBasis$, $CellContext`numberLatticeLinesToDisplay$]& , 
                Range[$CellContext`lastNumMasses$$]], "lineTable" -> 
              Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay$, $CellContext`latticeBasis$, #]& , 
                Permutations[{1, 2}]]}]; $CellContext`projOpU[
            Pattern[$CellContext`v, 
             Blank[List]]] := {{
            Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
             Part[$CellContext`v, 2]}, {
            Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
             Part[$CellContext`v, 2]^2}}; $CellContext`projOp[
            Pattern[$CellContext`v, 
             Blank[List]]] := $CellContext`projOpU[$CellContext`v]/
           Dot[$CellContext`v, $CellContext`v]; \
$CellContext`relativeDifferences[
            Pattern[$CellContext`r, 
             Blank[List]], 
            Pattern[$CellContext`mp, 
             Blank[List]], {
             Pattern[$CellContext`mIndex1, 
              Blank[Integer]], 
             Pattern[$CellContext`mIndex2, 
              Blank[Integer]], 
             Pattern[$CellContext`n, 
              Blank[List]]}] := 
          Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther}, \
$CellContext`pOrigin = 
             Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
             Part[$CellContext`mp, $CellContext`mIndex2] + 
              Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
             Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}]; \
$CellContext`calculateCouplings := 
          
          Module[{$CellContext`t$, $CellContext`t1$, $CellContext`t2$, \
$CellContext`r$, $CellContext`mp$}, {$CellContext`r$, $CellContext`mp$} = 
             ReplaceAll[{
               "latticeBasis", 
                "mPosFirstCell"}, $CellContext`ld$$]; $CellContext`t$ = 
             Map[Append[#, 
                $CellContext`relativeDifferences[$CellContext`r$, \
$CellContext`mp$, 
                 First[#]]]& , 
               
               ReplaceAll[$CellContext`kArray$$, Rule -> 
                List]]; $CellContext`t$ = Map[Flatten[{
                 Part[#, 1], {
                  Part[#, 2]}, 
                 Part[#, 3]}, 1]& , $CellContext`t$]; $CellContext`t1$ = Table[
               Sort[
                
                Select[$CellContext`t$, And[
                 Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
                Part[#, 5] < 
                Part[#2, 
                  5]& ], {$CellContext`i, $CellContext`lastNumMasses$$}]; \
$CellContext`t2$ = 
             Select[$CellContext`t$, 
               Part[#, 3] == {0, 0}& ]; $CellContext`t2$ = 
             Flatten[{$CellContext`t2$, 
                Map[Flatten[{{
                    Part[#, 2], 
                    Part[#, 1]}, 
                   Drop[#, 2]}, 1]& , $CellContext`t2$]}, 
               1]; $CellContext`t2$ = Table[
               Sort[
                Select[$CellContext`t2$, Part[#, 1] == $CellContext`i& ], 
                Part[#, 5] < 
                Part[#2, 
                  5]& ], {$CellContext`i, $CellContext`lastNumMasses$$}]; \
{$CellContext`t2$, $CellContext`t1$}]; $CellContext`plotSprings := 
          Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$}, \
$CellContext`latticeBasis$ = Take[$CellContext`u$$, 2]; $CellContext`aLoc$ = 
             Part[$CellContext`u$$, 1]; $CellContext`bLoc$ = 
             Part[$CellContext`u$$, 
               2]; {$CellContext`mLoc$, $CellContext`reciprocalBasis$, \
$CellContext`pointsDataTable$, $CellContext`numberLatticeLinesToDisplay$, \
$CellContext`lines$} = 
             ReplaceAll[{
               "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
                "numberLatticeLinesToDisplay", 
                "lineTable"}, $CellContext`ld$$]; $CellContext`pointsList$[
               Pattern[$CellContext`n$, 
                Blank[Integer]]] := {
               $CellContext`massColors[$CellContext`n$], Null, 
               PointSize[
                
                Sqrt[(Part[$CellContext`mScalarArray$$, \
$CellContext`n$]/$CellContext`mMax$$)/500]], 
               Map[Point[#]& , 
                Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
               Text[
                $CellContext`massLabel[$CellContext`n$], 
                Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`textDisOffset$$]}; $CellContext`cOrigin$ = Select[
               Part[
                Part[$CellContext`couplingData$$, 1], $CellContext`m1Sel$$], 
               Take[#, 
                 2] == {$CellContext`m1Sel$$, $CellContext`moSel$$}& ]; \
$CellContext`cN$ = Select[
               Part[
                Part[$CellContext`couplingData$$, 2], $CellContext`m1Sel$$], 
               Take[#, 
                 2] == {$CellContext`m1Sel$$, $CellContext`m2Sel$$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
                $CellContext`springPoints[
                 Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
                ReplaceAll[
                  
                  Part[#, 
                   3], $CellContext`springColorsByN$$]]& , $CellContext`cN$]; 
            If[$CellContext`lastNumMasses$$ > 1, 
              AppendTo[$CellContext`g$, 
               Map[ListLinePlot[
                 $CellContext`springPoints[
                  Take[#, {6, 7}]], AspectRatio -> Automatic, PlotStyle -> 
                 ReplaceAll[
                   
                   Part[#, 
                    3], $CellContext`springColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
               Graphics[
                Flatten[{{$CellContext`lines$, Blue, 
                   Map[Arrow[{{0, 0}, 
                    Part[$CellContext`reciprocalBasis$, #]}]& , 
                    Range[2]], Thick, 
                   Arrowheads[0.05], Red, 
                   Map[Arrow[{{0, 0}, 
                    Part[$CellContext`latticeBasis$, #]}]& , 
                    Range[2]], 
                   Text[
                    OverVector[
                    "a"], $CellContext`aLoc$/
                    2 + $CellContext`textDisOffset$$], 
                   Text[
                    OverVector[
                    "b"], $CellContext`bLoc$/
                    2 + $CellContext`textDisOffset$$]}, 
                  Map[$CellContext`pointsList$[#]& , 
                   Range[$CellContext`lastNumMasses$$]]}], 
                PlotRange -> {{(-$CellContext`windowHalfWidth$$)/
                   2, $CellContext`windowHalfWidth$$}, \
{(-$CellContext`windowHalfWidth$$)/2, $CellContext`windowHalfWidth$$}}, 
                ImageSize -> $CellContext`primaryDisplaySize$$], \
$CellContext`g$}]]; $CellContext`couplingLocator := LocatorPane[
            Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                  Dimensions[#]] < 3, 
                
                Flatten[{$CellContext`locDefault$$, \
$CellContext`mLocDefault$$}, 1], 
                If[First[
                   Dimensions[#]] > 7, 
                 
                 Take[#, 
                  7], #]]; {$CellContext`mScalarArray$$, \
$CellContext`kArray$$} = 
              If[$CellContext`nMasses > $CellContext`lastNumMasses$$, {
                 
                 Append[$CellContext`mScalarArray$$, \
$CellContext`defaultMass$$], 
                 $CellContext`growKarray[$CellContext`nMasses]}, {
                 Take[$CellContext`mScalarArray$$, $CellContext`nMasses], 
                 Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    Part[#, 2]}] <= $CellContext`nMasses& ]}]; 
             Part[$CellContext`u$$, 1] = If[Dot[
                  Part[$CellContext`u$$, 1], 
                  
                  Part[$CellContext`u$$, 
                   1]] < $CellContext`minSquaredDistanceFromOrigin$$, 
                Part[$CellContext`locDefault$$, 1], 
                Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                  Part[$CellContext`u$$, 2], 
                  
                  Part[$CellContext`u$$, 
                   2]] < $CellContext`minSquaredDistanceFromOrigin$$, 
                Part[$CellContext`locDefault$$, 2], 
                Part[$CellContext`u$$, 2]]; {
                Part[$CellContext`u$$, 1], 
                
                Part[$CellContext`u$$, 
                 2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`minAngleBetweenLatticeVectors$$]; $CellContext`lastNumMasses$$ = \
$CellContext`nMasses; $CellContext`m1Sel$$ = 
              If[$CellContext`m1Sel$$ > $CellContext`lastNumMasses$$, 
                1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
              If[$CellContext`m2Sel$$ > $CellContext`lastNumMasses$$, 
                1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
              If[$CellContext`moSel$$ > $CellContext`lastNumMasses$$, 
                1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel; $CellContext`k1$$ = $CellContext`kArraySelect[
               1]; $CellContext`k2$$ = $CellContext`kArraySelect[
               2]; $CellContext`k3$$ = $CellContext`kArraySelect[
               3]; $CellContext`k4$$ = $CellContext`kArraySelect[
               4]; $CellContext`k5$$ = $CellContext`kArrayOriginSelect; \
$CellContext`ld$$ = $CellContext`locDependent; $CellContext`qLoc$$ = 
              ReplaceAll["qMaxVec", $CellContext`ld$$]/
               2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
              True; $CellContext`tick$$ = 
              Not[$CellContext`tick$$])& ], $CellContext`plotSprings, 
            LocatorAutoCreate -> True, ContinuousAction -> 
            False]; $CellContext`massSetter := {
            Row[{
              Text["mass: "], 
              Dynamic[
               If[$CellContext`lastNumMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = 
                   Part[$CellContext`mScalarArray$$, $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`kArraySelect[
                    1]; $CellContext`k2$$ = $CellContext`kArraySelect[
                    2]; $CellContext`k3$$ = $CellContext`kArraySelect[
                    3]; $CellContext`k4$$ = $CellContext`kArraySelect[
                    4]; $CellContext`moSel$$ = $CellContext`adjustedmoSel; \
$CellContext`k5$$ = $CellContext`kArrayOriginSelect; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`lastNumMasses$$]]], 
                $CellContext`massLabel[1]]]}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`massValue, ($CellContext`massValue = #; 
                Part[$CellContext`mScalarArray$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
               0.25, 
                Dynamic[$CellContext`mMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[
                Part[$CellContext`mScalarArray$$, $CellContext`m1Sel$$], {2, 
                1}]]}]}; $CellContext`m2Setter := {
            Text["coupling to neighbouring: "], 
            Dynamic[
             If[$CellContext`lastNumMasses$$ > 1, 
              SetterBar[
               
               Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`kArraySelect[
                  1]; $CellContext`k2$$ = $CellContext`kArraySelect[
                  2]; $CellContext`k3$$ = $CellContext`kArraySelect[
                  3]; $CellContext`k4$$ = $CellContext`kArraySelect[
                  4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                Range[$CellContext`lastNumMasses$$]]], 
              $CellContext`massLabel[1]]]}; $CellContext`km1 := {
            Row[{
              Text["horizontal: "], 
              $CellContext`kLable[1], " || ", 
              OverVector["a"], " "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = #; \
$CellContext`kArray$$ = $CellContext`alterKArrayElements[
                  1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k1$$, {3, 2}]]}]}; $CellContext`km2 := {
            Row[{
              Text["vertical: "], 
              $CellContext`kLable[2], " || ", 
              OverVector["b"], " "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = #; \
$CellContext`kArray$$ = $CellContext`alterKArrayElements[
                  2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k2$$, {3, 2}]]}]}; $CellContext`km3 := {
            Row[{
              Text["diagonal: "], 
              $CellContext`kLable[3], " || (", 
              OverVector["b"], " + ", 
              OverVector["a"], ") "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = #; \
$CellContext`kArray$$ = $CellContext`alterKArrayElements[
                  3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k3$$, {3, 2}]]}]}; $CellContext`km4 := {
            Row[{
              Text["diagonal: "], 
              $CellContext`kLable[4], " || (", 
              OverVector["b"], " - ", 
              OverVector["a"], ") "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = #; \
$CellContext`kArray$$ = $CellContext`alterKArrayElements[
                  4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k4$$, {3, 2}]]}]}; $CellContext`km5 := {
            Row[{
              Text["origin coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to "], 
              Dynamic[
               If[$CellContext`lastNumMasses$$ > 2, 
                SetterBar[
                 
                 Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = $CellContext`kArrayOriginSelect; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  DeleteCases[
                   
                   Range[$CellContext`lastNumMasses$$], \
$CellContext`m1Sel$$]]], 
                Dynamic[
                 $CellContext`massLabel[
                  First[
                   Delete[
                    Range[2], $CellContext`m1Sel$$]]]]]], " ", 
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = #; \
$CellContext`kArray$$ = \
$CellContext`alterKarrayOriginElement[$CellContext`k5$$]; \
$CellContext`couplingData$$ = $CellContext`calculateCouplings; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`kMin$$], 
                Dynamic[$CellContext`kMax$$]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               
               NumberForm[$CellContext`k5$$, {3, 
                2}]]}]}; $CellContext`freqControls := {
            Row[{
              Text["mesh size "], 
              Manipulator[
               
               Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = #; \
$CellContext`bRefreshFreqPlot$$ = True; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[$CellContext`meshSize$$]}], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll["qMaxVec", $CellContext`ld$$]]], ContinuousAction -> 
             False]}; $CellContext`dynamicsControls := {
            Row[{
              OverVector["q"], " = ", 
              
              Module[{$CellContext`qm$}, $CellContext`qm$ = 
                ReplaceAll["qMaxVec", $CellContext`ld$$]; Slider2D[
                 
                 Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                 ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
              " 2 \[Pi] ", 
              Dynamic[
               NumberForm[
                MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
            Row[{
              Text["time, normalized to one period:"]}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny,
                ContinuousAction -> True, Appearance -> "Open"]}, 
             ImageSize -> {200, 60}], 
            Row[{
              Text["oscillation scale factor:"]}], 
            Row[{Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = #; \
$CellContext`bRefreshDynPlot$$ = True; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}] " ", 
              Dynamic[
               NumberForm[$CellContext`scale$$, {3, 2}]]}], 
            Text[
             Text["Angular frequency \[Omega](q), selection:"]], 
            Dynamic[
             SetterBar[
              
              Dynamic[$CellContext`omegaIndex$$, ($CellContext`omegaIndex$$ = \
#; $CellContext`bRefreshDynPlot$$ = True; $CellContext`tick$$ = 
                Not[$CellContext`tick$$])& ], 
              Range[
              2 $CellContext`lastNumMasses$$]]]}; \
$CellContext`oneTermOfdynamicsMatrix[{
             Pattern[$CellContext`k$, 
              Blank[Integer]], 
             Pattern[$CellContext`j$, 
              Blank[Integer]], 
             Pattern[$CellContext`mVec$, 
              Blank[List]], 
             Pattern[$CellContext`kS$, 
              Blank[]], 
             Blank[], 
             Blank[], 
             Blank[], 
             Pattern[$CellContext`proj$, 
              Blank[List]]}, 
            Pattern[$CellContext`r$, 
             Blank[List]], 
            Pattern[$CellContext`mk$, 
             Blank[]], 
            Pattern[$CellContext`epsilon$, 
             Blank[List]]] := $CellContext`kS$ 
           Dot[$CellContext`proj$, 
             Part[$CellContext`epsilon$, $CellContext`k$]/$CellContext`mk$ - 
             Part[$CellContext`epsilon$, $CellContext`j$] (E^(I Dot[
                  
                  Dot[$CellContext`mVec$, $CellContext`r$], \
$CellContext`qVec])/
              Sqrt[$CellContext`mk$ 
               Part[$CellContext`mScalarArray$$, $CellContext`j$]])]; \
$CellContext`dynamicsMatrix := 
          Module[{$CellContext`cd$, $CellContext`r$, $CellContext`res$, \
$CellContext`epsilon$, $CellContext`m$}, $CellContext`cd$ = SplitBy[
               Sort[
                Flatten[$CellContext`couplingData$$, 2]], 
               First]; $CellContext`r$ = 
             ReplaceAll[
              "latticeBasis", $CellContext`ld$$]; $CellContext`epsilon$ = 
             Partition[
               IdentityMatrix[2 $CellContext`lastNumMasses$$], 
               2]; $CellContext`res$ = Partition[
               Flatten[
                Table[
                 Total[
                  Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r$, 
                    
                    Part[$CellContext`mScalarArray$$, $CellContext`i], \
$CellContext`epsilon$]& , 
                   
                   Part[$CellContext`cd$, $CellContext`i]]], {$CellContext`i, \
$CellContext`lastNumMasses$$}]], 2 $CellContext`lastNumMasses$$]; 
            ReplaceAll[$CellContext`res$, $CellContext`qVec -> #]& ]; \
$CellContext`calcDynamics := Map[{
             Sqrt[
              Part[#, 1]], 
             Part[#, 2]}& , 
            Transpose[
             Eigensystem[
              $CellContext`matrix$$[$CellContext`qLoc$$]]]]; \
$CellContext`showDynamics := 
          Module[{$CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`e$, \
$CellContext`omega$, $CellContext`points$, $CellContext`lines$, \
$CellContext`nu$, $CellContext`a$, $CellContext`b$}, {{$CellContext`a$, \
$CellContext`b$}, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$} = 
             ReplaceAll[{
               "latticeBasis", "pointsDataTable", 
                "numberLatticeLinesToDisplay", 
                "lineTable"}, $CellContext`ld$$]; {$CellContext`omega$, \
$CellContext`e$} = 
             Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$]; \
$CellContext`e$ = Partition[$CellContext`e$, 2]; $CellContext`points$ = 
             Table[Part[$CellContext`pointsDataTable$, $CellContext`k] + 
               Table[$CellContext`scale$$ 
                 Re[Part[$CellContext`e$, $CellContext`k] 
                   E^(I (Dot[$CellContext`qLoc$$, $CellContext`a$ \
$CellContext`i + $CellContext`b$ $CellContext`j] - $CellContext`omega$ #))], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay$, 1], 
                  
                  Part[$CellContext`numberLatticeLinesToDisplay$, 
                   1]}, {$CellContext`j, -
                  Part[$CellContext`numberLatticeLinesToDisplay$, 2], 
                  
                  Part[$CellContext`numberLatticeLinesToDisplay$, 
                   2]}]& , {$CellContext`k, $CellContext`lastNumMasses$$}]; \
$CellContext`nu$ = 
             2 Pi If[$CellContext`omega$ == 0, 1, 1/$CellContext`omega$]; 
            Show[{
               Table[
                ListPlot[
                 
                 Part[$CellContext`points$, $CellContext`k][$CellContext`nu$ \
#], PlotRange -> {{(-$CellContext`windowHalfWidth$$)/
                    2, $CellContext`windowHalfWidth$$}, \
{(-$CellContext`windowHalfWidth$$)/2, $CellContext`windowHalfWidth$$}}, 
                 ImageSize -> $CellContext`primaryDisplaySize$$, PlotStyle -> 
                 Directive[
                   PointSize[
                    
                    Sqrt[(Part[$CellContext`mScalarArray$$, \
$CellContext`k]/$CellContext`mMax$$)/500]], 
                   $CellContext`massColors[$CellContext`k]]], \
{$CellContext`k, $CellContext`lastNumMasses$$}], 
               
               Graphics[{$CellContext`lines$}]}]& ]; \
$CellContext`frequencyPlotCalc := 
          Module[{$CellContext`eigTable2D$, $CellContext`eigTable1D$, \
$CellContext`qMax$, $CellContext`omegaPointList2D$, \
$CellContext`omegaPointList1D$, $CellContext`range$}, $CellContext`qMax$ = 
             ReplaceAll[
              "qMaxVec", $CellContext`ld$$]; $CellContext`eigTable2D$ = 
             Flatten[
               Re[
                Table[{{$CellContext`qx, $CellContext`qy}, 
                  Eigenvalues[
                   N[
                    $CellContext`matrix$$[{$CellContext`qx, \
$CellContext`qy}]]]}, {$CellContext`qx, (-Part[$CellContext`qMax$, 1])/2, 
                  Part[$CellContext`qMax$, 1]/2, 
                  Part[$CellContext`qMax$, 
                    1]/$CellContext`meshSize$$}, {$CellContext`qy, (-
                   Part[$CellContext`qMax$, 2])/2, 
                  Part[$CellContext`qMax$, 2]/2, 
                  Part[$CellContext`qMax$, 2]/$CellContext`meshSize$$}]], 
               1]; $CellContext`omegaPointList2D$[
               Pattern[$CellContext`nn$, 
                Blank[]]] := Map[Flatten[{
                 Part[#, 1], 
                 Part[
                  Sqrt[
                   
                   Part[#, 
                    2]], $CellContext`nn$]}]& , $CellContext`eigTable2D$]; \
$CellContext`range$ = Range[2 $CellContext`lastNumMasses$$]; ListPlot3D[
              Map[$CellContext`omegaPointList2D$[#]& , $CellContext`range$], 
              PlotRange -> Full, 
              ImageSize -> $CellContext`primaryDisplaySize$$, 
              AxesLabel -> {
               "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
                
                "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]]; \
$CellContext`showFreqPlot := 
          Module[{$CellContext`aa$, $CellContext`bb$}, {$CellContext`aa$, \
$CellContext`bb$} = $CellContext`qPlaneLoc$$; Show[{$CellContext`freqPlot$$, 
               Graphics3D[
                Polygon[{{
                   Part[$CellContext`aa$, 1], 
                   Part[$CellContext`aa$, 2], 0}, {
                   Part[$CellContext`bb$, 1], 
                   Part[$CellContext`bb$, 2], 0}, {
                   Part[$CellContext`bb$, 1], 
                   Part[$CellContext`bb$, 2], 10}, {
                   Part[$CellContext`aa$, 1], 
                   Part[$CellContext`aa$, 2], 
                   10}}]]}]]; {$CellContext`k1$$, $CellContext`k2$$, \
$CellContext`k3$$, $CellContext`k4$$, $CellContext`k5$$} = \
$CellContext`kDefaults$$; $CellContext`ld$$ = $CellContext`locDependent; \
$CellContext`kArray$$ = $CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`lastNumMasses$$, \
$CellContext`kArray$$ = $CellContext`growKarray[$CellContext`n$]; 
             Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`ld$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix; $CellContext`dynamics$$ = \
$CellContext`calcDynamics; $CellContext`dynPlot$$ = $CellContext`showDynamics; \
$CellContext`freqPlot$$ = $CellContext`frequencyPlotCalc; Null}}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.600887745384145*^9, {3.600887943553479*^9, 3.6008879696609726`*^9}},
 CellID->4299835]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell["\<\
A lattice of atoms can be modelled as harmonic oscillators, with forces \
proportional to the displacements of the atoms from equilibrium positions.  \
The simplest such model introduces coupling for only the nearest neighbor \
atoms.  In this demonstration, a lattice cell containing a single atom is \
modelled, with nearest neighbor harmonic coupling to the mass in each nearby \
cell.  Normal mode solutions to these equations of motion are plotted.  \
Controls are provided to alter the coupling \"spring constants\" and other \
free parameters, as well as controls to select from the reciprocal space \
vectors, and angular frequencies associated with the normal mode solutions.  \
A time control is also provided to display changes of the lattice through one \
period of the lattice vibration.\
\>", "ManipulateCaption",
 CellChangeTimes->{3.6008873855675645`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[1]], RectangleBox[{0, 0}], 
   InsetBox[
    StyleBox["\<\"Thumbnail Placeholder\"\>",
     StripOnInput->False,
     FontFamily->"Verdana",
     FontSize->14], {0.5, 0.6}], InsetBox[
    StyleBox["\<\"Replace this with your\"\>",
     StripOnInput->False,
     FrontFaceColor->GrayLevel[0.5],
     GraphicsColor->GrayLevel[0.5],
     FontFamily->"Verdana",
     FontSize->10,
     FontColor->GrayLevel[0.5],
     $CellContext`BackFaceColor -> GrayLevel[0.5]], {0.5, 0.45}], InsetBox[
    StyleBox["\<\"Manipulate at a particular setting.\"\>",
     StripOnInput->False,
     FrontFaceColor->GrayLevel[0.5],
     GraphicsColor->GrayLevel[0.5],
     FontFamily->"Verdana",
     FontSize->10,
     FontColor->GrayLevel[0.5],
     $CellContext`BackFaceColor -> GrayLevel[0.5]], {0.5, 0.39}], InsetBox[
    StyleBox["\<\"(Do not use a bitmap.)\"\>",
     StripOnInput->False,
     FrontFaceColor->GrayLevel[0.5],
     GraphicsColor->GrayLevel[0.5],
     FontFamily->"Verdana",
     FontSize->10,
     FontColor->GrayLevel[0.5],
     $CellContext`BackFaceColor -> GrayLevel[0.5]], {0.5, 0.315}]},
  ImageMargins->0.,
  ImageSize->220]], "Output",
 CellEditDuplicate->False]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[1]], RectangleBox[{0, 0}], 
   InsetBox[
    StyleBox["\<\"Snapshot Placeholder\"\>",
     StripOnInput->False,
     FontFamily->"Verdana",
     FontSize->14], {0.5, 0.6}], InsetBox[
    StyleBox["\<\"Replace this with your\"\>",
     StripOnInput->False,
     FrontFaceColor->GrayLevel[0.5],
     GraphicsColor->GrayLevel[0.5],
     FontFamily->"Verdana",
     FontSize->10,
     FontColor->GrayLevel[0.5],
     $CellContext`BackFaceColor -> GrayLevel[0.5]], {0.5, 0.45}], InsetBox[
    StyleBox["\<\"Manipulate at a particular setting.\"\>",
     StripOnInput->False,
     FrontFaceColor->GrayLevel[0.5],
     GraphicsColor->GrayLevel[0.5],
     FontFamily->"Verdana",
     FontSize->10,
     FontColor->GrayLevel[0.5],
     $CellContext`BackFaceColor -> GrayLevel[0.5]], {0.5, 0.39}], InsetBox[
    StyleBox["\<\"(Do not use a bitmap.)\"\>",
     StripOnInput->False,
     FrontFaceColor->GrayLevel[0.5],
     GraphicsColor->GrayLevel[0.5],
     FontFamily->"Verdana",
     FontSize->10,
     FontColor->GrayLevel[0.5],
     $CellContext`BackFaceColor -> GrayLevel[0.5]], {0.5, 0.315}]},
  ImageMargins->0.,
  ImageSize->220]], "Output",
 CellEditDuplicate->False]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "DetailsSection"],

Cell[TextData[{
 "The positions of masses within a periodic array of cells, can be described \
by summing the lattice vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["r", "\[RightVector]"], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], " ", "=", " ", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["n", "1"], ",", " ", 
        SubscriptBox["n", "2"]}], ")"}]}]], " ", "=", " ", 
    RowBox[{
     RowBox[{
      SubscriptBox["n", "1"], 
      OverscriptBox["a", "\[RightVector]"]}], " ", "+", " ", 
     RowBox[{
      SubscriptBox["n", 
       RowBox[{"2", " "}]], 
      OverscriptBox["b", "\[RightVector]"]}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", representing the origin of each of the lattice cell, and a relative \
vector to the position of each of the masses.  With ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 " representing the equilibrium position of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 ", the position of that mass is ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 "+ ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.6008874666091995`*^9, 3.600887466629201*^9}},
 CellID->143536934],

Cell[TextData[{
 "Let ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["a", "\[RightVector]"], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], "=", " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["r", "\[RightVector]"], 
      OverscriptBox["n", "\[RightVector]"]], "+", 
     SubscriptBox[
      OverscriptBox["p", "\[RightVector]"], "k"], " ", "-", " ", 
     SubscriptBox[
      OverscriptBox["r", "\[RightVector]"], 
      OverscriptBox["m", "\[RightVector]"]], "-", 
     SubscriptBox[
      OverscriptBox["p", "\[RightVector]"], "j"]}]}], TraditionalForm]], 
  "InlineMath"],
 ", with direction  ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["a", "^"], 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", represent the equilibrium separation of the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 " from the  ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["j", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["m", "\[RightVector]"]], TraditionalForm]]],
 ".  If the harmonic coupling between these masses has magnitude ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]]],
 ", then the system of equations describing the vector displacement ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["u", "\[RightVector]"], 
    RowBox[{"n", ",", " ", "k", " "}]], TraditionalForm]]],
 " for the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in unit cell ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["n", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " from the equilibrium position is given by"
}], "DetailNotes",
 CellChangeTimes->{{3.6008874666091995`*^9, 3.600887467295239*^9}},
 CellID->185095190],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubscriptBox["m", "k"], " ", 
    SubscriptBox[
     OverscriptBox[
      OverscriptBox["u", "\[RightVector]"], ".."], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}]]}], "=", " ", 
   RowBox[{"-", 
    RowBox[{
     UnderscriptBox["\[Sum]", 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", 
       RowBox[{"k", " ", "\[NotEqual]", " ", 
        OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
     RowBox[{
      SubscriptBox["K", 
       RowBox[{
        OverscriptBox["n", "\[RightVector]"], ",", 
        RowBox[{"k", ";", 
         OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
      SubscriptBox["Proj", 
       SubscriptBox[
        OverscriptBox["a", "^"], 
        RowBox[{
         OverscriptBox["n", "\[RightVector]"], ",", 
         RowBox[{"k", ";", 
          OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox[
         OverscriptBox["u", "\[RightVector]"], 
         RowBox[{
          OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}]], "-", " ", 
        SubscriptBox[
         OverscriptBox["u", "\[RightVector]"], 
         RowBox[{
          OverscriptBox["m", "\[RightVector]"], ",", " ", "j"}]]}], ")"}], 
      " "}]}]}]}], TraditionalForm]]]], "DetailNotes",
 CellChangeTimes->{{3.6008875035133104`*^9, 3.6008875050703993`*^9}},
 CellID->413013362],

Cell[TextData[{
 "In general, we have one such equation for each ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}], TraditionalForm]]],
 " pair.  A trial solution of the form: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox[
      OverscriptBox["u", "\[RightVector]"], 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", " ", "k", " "}]], "(", "t", 
     ")"}], "=", " ", 
    RowBox[{
     FractionBox[
      RowBox[{
       SubscriptBox[
        OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
       OverscriptBox["q", "\[RightVector]"], ")"}], 
      SqrtBox[
       SubscriptBox["m", "k"]]], " ", 
     SuperscriptBox["e", 
      RowBox[{"I", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          SubscriptBox[
           OverscriptBox["r", "\[RightVector]"], 
           OverscriptBox["n", "\[RightVector]"]], ".", " ", 
          OverscriptBox["q", "\[RightVector]"]}], " ", "-", " ", 
         RowBox[{"\[Omega]", " ", "t"}]}], ")"}]}]]}]}], TraditionalForm]]],
 " can be used to decouple this system, resulting in a single equation for \
each ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass of the form"
}], "DetailNotes",
 CellID->160232404],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SuperscriptBox["\[Omega]", "2"], " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
     OverscriptBox["q", "\[RightVector]"], ")"}]}], " ", "=", " ", 
   RowBox[{
    UnderscriptBox["\[Sum]", 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", 
      RowBox[{"k", " ", "\[NotEqual]", " ", 
       OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
    RowBox[{
     SubscriptBox["K", 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", 
       RowBox[{"k", ";", 
        OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
     SubscriptBox["Proj", 
      SubscriptBox[
       OverscriptBox["a", "^"], 
       RowBox[{
        OverscriptBox["n", "\[RightVector]"], ",", 
        RowBox[{"k", ";", 
         OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        RowBox[{
         SubscriptBox[
          OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
         OverscriptBox["q", "\[RightVector]"], ")"}], 
        SubscriptBox["m", "k"]], "-", " ", 
       RowBox[{
        FractionBox[
         RowBox[{
          SubscriptBox[
           OverscriptBox["\[Epsilon]", "\[RightVector]"], "j"], "(", 
          OverscriptBox["q", "\[RightVector]"], ")"}], 
         SqrtBox[
          RowBox[{
           SubscriptBox["m", "k"], 
           SubscriptBox["m", "j"]}]]], 
        SuperscriptBox["e", 
         RowBox[{"I", " ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SubscriptBox[
              OverscriptBox["r", "\[RightVector]"], 
              OverscriptBox["m", "\[RightVector]"]], " ", "-", " ", 
             SubscriptBox[
              OverscriptBox["r", "\[RightVector]"], 
              OverscriptBox["n", "\[RightVector]"]]}], ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}]}]]}]}], ")"}]}]}]}], 
  TraditionalForm]]]], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.5980567961741514`*^9}, {
  3.5991430414266324`*^9, 3.5991431578722925`*^9}, {3.5991432045039597`*^9, 
  3.5991434204693127`*^9}, {3.599995184437109*^9, 3.599995299044664*^9}, {
  3.5999955623567247`*^9, 3.59999570266675*^9}, {3.599995845419915*^9, 
  3.599996134802467*^9}, {3.5999964591490183`*^9, 3.599996636408157*^9}, {
  3.6000782740315385`*^9, 3.6000782764963427`*^9}, {3.6000800168821993`*^9, 
  3.600080195362113*^9}, {3.6000802877454753`*^9, 3.6000802964814906`*^9}, {
  3.600819379450795*^9, 3.6008194857548757`*^9}, {3.6008195456733027`*^9, 
  3.6008197257836046`*^9}, {3.600819776466503*^9, 3.6008198064982214`*^9}, {
  3.600819885519741*^9, 3.6008199013896484`*^9}, {3.6008233445915885`*^9, 
  3.6008233557062244`*^9}, {3.600823461634283*^9, 3.6008234639174137`*^9}},
 CellID->323301769],

Cell[TextData[{
 "This describes all the steady state lattice vibrations, the normal modes, \
that can be modelled by the trial solution.  ",
 "Here ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " is a vector in reciprocal space, effectively parameterizing the angular \
velocity ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", " ", "=", " ", 
    RowBox[{"\[Omega]", "(", 
     OverscriptBox["q", "\[RightVector]"], ")"}]}], TraditionalForm]], 
  "InlineMath"],
 ".  The vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["\[Epsilon]", "\[RightVector]"], "(", "q", ")"}], " "}], 
   TraditionalForm]]],
 "is an eigenvector of the equations of motion of the system for this assumed \
solution, where ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Omega]", "2"], TraditionalForm]], "InlineMath"],
 " are the eigenvalues of this system.  For such a one atom basis, there are \
two such ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Omega]", "2"], TraditionalForm]], "InlineMath"],
 " eigenvalues per ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " point, each with a different characteristic motion."
}], "DetailNotes",
 CellChangeTimes->{{3.6008875562233257`*^9, 3.600887556236326*^9}},
 CellID->72937650],

Cell[TextData[{
 "The rank of the resulting eigenvalue problem depends on the number of \
masses per unit cell, but the complexity of the matrix expression depends on \
the number of neighboring interactions that are considered.  For example, \
given lattice vectors ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], ",", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", diagonals ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["r", "\[RightVector]"], "=", 
     RowBox[{
      OverscriptBox["a", "\[RightVector]"], " ", "+", " ", 
      OverscriptBox["b", "\[RightVector]"]}]}], ",", " ", 
    RowBox[{
     OverscriptBox["s", "\[RightVector]"], "=", 
     RowBox[{
      OverscriptBox["a", "\[RightVector]"], " ", "-", " ", 
      OverscriptBox["b", "\[RightVector]"], " "}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", and a one atom basis, where each unit cell contains a single mass coupled \
with harmonic oscillator forces between only nearest neighbors, the normal \
mode solutions follow from the solution of the eigenvalue problem"
}], "DetailNotes",
 CellChangeTimes->{{3.6008875562233257`*^9, 3.600887556623348*^9}, {
  3.6008880360077677`*^9, 3.600888037934878*^9}},
 CellID->69846009],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          SuperscriptBox["\[Omega]", "2"], "0"},
         {"0", 
          SuperscriptBox["\[Omega]", "2"]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], " ", 
     OverscriptBox["\[Epsilon]", "\[RightVector]"]}], " ", "=", " ", 
    RowBox[{
     FractionBox["4", "m"], 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{
        SubscriptBox["k", 
         RowBox[{"1", " "}]], 
        OverscriptBox["a", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["a", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           OverscriptBox["a", "\[RightVector]"], " ", ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", "  ", 
       RowBox[{
        SubscriptBox["k", 
         RowBox[{"2", " "}]], 
        OverscriptBox["b", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["b", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           OverscriptBox["b", "\[RightVector]"], " ", ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", "  ", 
       RowBox[{
        SubscriptBox["k", "3"], 
        OverscriptBox["r", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["r", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", " ", 
            RowBox[{
             OverscriptBox["b", "\[RightVector]"], " ", "+", " ", 
             OverscriptBox["a", "\[RightVector]"]}], " ", ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", "  ", 
       RowBox[{
        SubscriptBox["k", "4"], 
        OverscriptBox["s", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["s", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", " ", 
            RowBox[{
             OverscriptBox["b", "\[RightVector]"], " ", "-", " ", 
             OverscriptBox["a", "\[RightVector]"]}], " ", ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}]}],
       ")"}], 
     OverscriptBox["\[Epsilon]", "\[RightVector]"]}]}], TraditionalForm]], 
  "InlineMath"],
 "               "
}], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.598056894559779*^9}, {
   3.598056950150959*^9, 3.5980569832608523`*^9}, {3.598057031767627*^9, 
   3.598057031774627*^9}, {3.598057330464711*^9, 3.598057330604719*^9}, {
   3.5980584907700768`*^9, 3.5980584911520987`*^9}, {3.5991428674046793`*^9, 
   3.5991429352825613`*^9}, 3.5991434894172564`*^9, {3.599143745937928*^9, 
   3.599143747597023*^9}, {3.599144339776894*^9, 3.599144393338958*^9}, {
   3.5999961526324863`*^9, 3.599996166069255*^9}, {3.6000802839234686`*^9, 
   3.6000802840794687`*^9}, {3.600823510848098*^9, 3.6008235167144337`*^9}},
 CellID->508431597],

Cell[TextData[{
 "Controls are provided to display the dynamics associated with each of the \
characteristic angular frequencies ",
 Cell[BoxData[
  FormBox["\[Omega]", TraditionalForm]]],
 ", for given reciprocal vector values ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 "."
}], "DetailNotes",
 CellID->122369289],

Cell[TextData[{
 "Three tabs are provided in this demonstration.  The primary tab provides \
plots the solution for particular ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " point, and one of the angular velocity eigenvalues ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "(", 
    OverscriptBox["q", "\[RightVector]"], ")"}], TraditionalForm]]],
 " for that  ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " point.  In that tab, selecting run for the time control will animate the \
lattice vibrations.  A scaling tab is provided to alter the initial magnitude \
of the eigenvectors, tantamount to picking the initial time boundary value \
constraints.  Note that it is possible to select physically unrealistic \
scaling factors that allow for collisions that are not modelled by this \
system."
}], "DetailNotes",
 CellID->476930990],

Cell[TextData[{
 "A second tab provides the dispersion relation, the dependence of angular \
velocity ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "(", 
    OverscriptBox["q", "\[RightVector]"], ")"}], TraditionalForm]]],
 " on all  ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " points."
}], "DetailNotes",
 CellID->450664638],

Cell[TextData[{
 "Finally, a parameters tab provides controls for the spring constants ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", the primitive unit cell lattice vectors ",
 Cell[BoxData[
  RowBox[{
   OverscriptBox["a", "\[RightVector]"], ",", 
   OverscriptBox["b", "\[RightVector]"]}]], "InlineMath"],
 ", and the positions of the masses ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 " within each unit cell of the lattice.  Additional mass position locators, \
up to five total, may be added or deleted by Alt-clicking on the lattice cell \
in the desired location.  Note that it is possible to select equilibrium mass \
positions that are too proximate, leading to physically unrealistic dynamics."
}], "DetailNotes",
 CellID->557416845],

Cell["\<\
Note that the total number of interactions, even when those interactions are \
restricted to just the neighboring lattice cells, increases fast as \
additional masses per cell are added.  For example, with three masses per \
unit cell, considering only the neighboring and origin cells, there are 29 \
interactions possible for each mass.  To simplify the physical constants \
dialog, which would get unwieldy if methods to choose from all possible \
couplings, distinct \"spring constant\" selection is only available for a \
subset of the possible interactions.  This imposes the following respective \
constraints along the \"horizontal\", \"vertical\", \"NE diagonal\", and \"NW \
diagonal\" directions connecting the masses across the cells\
\>", "DetailNotes",
 CellChangeTimes->{{3.6008880438402157`*^9, 3.600888044919277*^9}},
 CellID->204245605],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"0", ",", "1"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"0", ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", "0"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], ")"}]}], ",", "j"}]]}], 
   TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", "1"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], ")"}]}], ",", "j"}]]}], 
   TraditionalForm]]],
 " ."
}], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.598056894559779*^9}, {
   3.598056950150959*^9, 3.5980569832608523`*^9}, {3.598057031767627*^9, 
   3.598057031774627*^9}, {3.598057330464711*^9, 3.598057446094325*^9}, {
   3.59805756332403*^9, 3.5980575811080475`*^9}, {3.5980576945015335`*^9, 
   3.5980577077462907`*^9}, {3.5980585058849416`*^9, 3.598058539899887*^9}, {
   3.5982726803130836`*^9, 3.598272680323084*^9}, {3.598396857147249*^9, 
   3.598396862212539*^9}, 3.5983970077038608`*^9, {3.5986527341628847`*^9, 
   3.598652736497018*^9}, {3.599142949402369*^9, 3.599142973472746*^9}, {
   3.599144400390361*^9, 3.5991444194934535`*^9}, {3.599144544232588*^9, 
   3.599144772358636*^9}, {3.5991448024383564`*^9, 3.599144812883954*^9}, {
   3.599996318317963*^9, 3.599996379259449*^9}, {3.600076492258809*^9, 
   3.600076523646064*^9}, {3.6000766422374725`*^9, 3.600076689224755*^9}, {
   3.6000767765225077`*^9, 3.6000772270044994`*^9}, {3.6000776433692303`*^9, 
   3.6000781070644455`*^9}, {3.60007816099374*^9, 3.600078188605788*^9}, {
   3.60007853087039*^9, 3.6000790980561857`*^9}, {3.60007913498145*^9, 
   3.6000792378012314`*^9}, {3.6000792689076858`*^9, 3.600079283852512*^9}, {
   3.6000793585454435`*^9, 3.6000793899326982`*^9}, {3.6000794650156302`*^9, 
   3.600079471318041*^9}, {3.600887622755131*^9, 3.6008876400591207`*^9}},
 CellID->325571302],

Cell[TextData[{
 "These are labeled ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "1"], TraditionalForm]], "InlineMath"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "2"], TraditionalForm]], "InlineMath"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "3"], TraditionalForm]], "InlineMath"],
 ", and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "4"], TraditionalForm]], "InlineMath"],
 " in the parameters tab respectively.  For example, the first identity above \
is the imposition of an equality constraint on the coupling constants in the \
\"left\" and \"right\" directions separating masses in neighboring \
\"horizontal\" cells (when the lattice is square). Those are the interactions \
directed primarily along the lattice vector directions ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[PlusMinus]", 
    OverscriptBox["a", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 " (primarily since these directions are also adjusted for the positions of \
the masses within the respective cells if different).  Similarly, the same \
coupling constants are used for each of the pairs of directions in the that \
are directed primarily along the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[PlusMinus]", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", \[PlusMinus](",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], " ", "+", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 "), \[PlusMinus](",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], " ", "-", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ") directions separating the lattice cells."
}], "DetailNotes",
 CellChangeTimes->{{3.6008880598061285`*^9, 3.600888064512398*^9}},
 CellID->64527093],

Cell[TextData[{
 "When there is when there is more than mass per unit cell, distinct coupling \
constants for the intra-cell interactions between the masses within the \
origin unit cell may be selected (i.e. ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["0", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["0", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]]],
 ").  These are labeled ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "5"], TraditionalForm]], "InlineMath"],
 " in the parameters tab."
}], "DetailNotes",
 CellChangeTimes->{{3.600887684261649*^9, 3.6008876842696495`*^9}, 
   3.6008880700537148`*^9},
 CellID->209290908],

Cell["", "DetailNotes",
 CellChangeTimes->{3.600887684261649*^9},
 CellID->16226943],

Cell["\<\
General theory describing oscillations around lattice equilibrium points can \
be found in:\
\>", "DetailNotes",
 CellID->30163790],

Cell["\<\
Neil W Ashcroft and N David Mermin. Solid State Physics. Holt, Rinehart and \
Winston, New York, 1976.  Chapters 21, 22.\
\>", "DetailNotes",
 CellID->213153736]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.600887285796858*^9},
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.600887286596904*^9},
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.6008872914131794`*^9},
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["\<\
one atom basis, two atom basis, n atom basis, lattice vibration, phonon, \
reciprocal lattice vector, angular frequency\
\>", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}},
 CellID->476564237]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "RelatedLinksSection"],

Cell[TextData[ButtonBox["Analysis of Lattice Vibrations in Two Dimensions",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/\
AnalysisOfLatticeVibrationsInTwoDimensions/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/\
AnalysisOfLatticeVibrationsInTwoDimensions/"]], "RelatedLinks",
 CellChangeTimes->{{3.598398001761718*^9, 3.5983980017637177`*^9}, {
  3.5983985448847823`*^9, 3.598398544890783*^9}},
 CellID->24498121],

Cell[TextData[ButtonBox["Motion of Atoms in Crystal",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/MotionOfAtomsInCrystal/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/MotionOfAtomsInCrystal/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981123320417`*^9}, {3.5983985249356413`*^9, 
   3.5983985249386415`*^9}},
 CellID->28998832],

Cell[TextData[ButtonBox["Simple Harmonic Motion for a Spring",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/SimpleHarmonicMotionForASpring/"], 
   None},
 ButtonNote->
  "http://demonstrations.wolfram.com/SimpleHarmonicMotionForASpring/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981127470655`*^9}, {3.5983984299812107`*^9, 
   3.5983984299832106`*^9}, {3.5983985017343144`*^9, 3.598398501741315*^9}},
 CellID->611518950],

Cell[TextData[ButtonBox["Normal Modes in a Periodic Square Lattice",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/NormalModesInAPeriodicSquareLattice/\
"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/NormalModesInAPeriodicSquareLattice/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981127470655`*^9}, {3.5983984299812107`*^9, 
   3.598398430938265*^9}, {3.598398474839776*^9, 3.5983984748437767`*^9}},
 CellID->63968418]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell["Contributed by: Peeter Joot", "Author",
 CellChangeTimes->{3.600887159561638*^9}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1302, 659},
WindowMargins->{{10, Automatic}, {Automatic, 24}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "AutomaticAnimation"->{
  Cell[1285619, 23037, 1464, 31, 30, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[1287086, 23070, 908, 21, 30, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]},
 "CreateAndDeleteLocators"->{
  Cell[1283717, 22985, 680, 16, 30, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "DragLocators"->{
  Cell[1283333, 22971, 381, 12, 30, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "GamepadControls"->{
  Cell[1285247, 23026, 369, 9, 30, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "ResizeImages"->{
  Cell[1282296, 22942, 312, 8, 30, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[1282611, 22952, 719, 17, 30, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "SliderZoom"->{
  Cell[1284400, 23003, 844, 21, 30, "ControlSuggestions",
   CellTags->"SliderZoom"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"AutomaticAnimation", 1291035, 23184},
 {"BookmarkAnimation", 1291155, 23187},
 {"CreateAndDeleteLocators", 1291279, 23190},
 {"DragLocators", 1291398, 23193},
 {"GamepadControls", 1291509, 23196},
 {"ResizeImages", 1291619, 23199},
 {"RotateAndZoomIn3D", 1291731, 23202},
 {"SliderZoom", 1291842, 23205}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 109, 3, 98, "DemoTitle"],
Cell[691, 27, 33, 0, 365, "InitializationSection"],
Cell[CellGroupData[{
Cell[749, 31, 29, 0, 245, "ManipulateSection"],
Cell[CellGroupData[{
Cell[803, 35, 164859, 3640, 19352, "Input"],
Cell[165665, 3677, 1086741, 18405, 606, "Output",
 CellID->4299835]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1252455, 22088, 36, 0, 228, "ManipulateCaptionSection"],
Cell[1252494, 22090, 881, 13, 125, "ManipulateCaption"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1253412, 22108, 28, 0, 229, "ThumbnailSection"],
Cell[1253443, 22110, 1242, 34, 306, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1254722, 22149, 28, 0, 189, "SnapshotsSection"],
Cell[1254753, 22151, 1241, 34, 306, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1256031, 22190, 26, 0, 452, "DetailsSection"],
Cell[1256060, 22192, 1675, 53, 92, "DetailNotes",
 CellID->143536934],
Cell[1257738, 22247, 2463, 78, 86, "DetailNotes",
 CellID->185095190],
Cell[1260204, 22327, 1466, 42, 50, "DetailNotes",
 CellID->413013362],
Cell[1261673, 22371, 1320, 41, 77, "DetailNotes",
 CellID->160232404],
Cell[1262996, 22414, 2874, 70, 55, "DetailNotes",
 CellID->323301769],
Cell[1265873, 22486, 1362, 39, 91, "DetailNotes",
 CellID->72937650],
Cell[1267238, 22527, 1297, 31, 91, "DetailNotes",
 CellID->69846009],
Cell[1268538, 22560, 3685, 97, 59, "DetailNotes",
 CellID->508431597],
Cell[1272226, 22659, 375, 11, 29, "DetailNotes",
 CellID->122369289],
Cell[1272604, 22672, 959, 22, 88, "DetailNotes",
 CellID->476930990],
Cell[1273566, 22696, 394, 13, 29, "DetailNotes",
 CellID->450664638],
Cell[1273963, 22711, 1005, 25, 77, "DetailNotes",
 CellID->557416845],
Cell[1274971, 22738, 864, 13, 106, "DetailNotes",
 CellID->204245605],
Cell[1275838, 22753, 3421, 94, 38, "DetailNotes",
 CellID->325571302],
Cell[1279262, 22849, 1849, 49, 113, "DetailNotes",
 CellID->64527093],
Cell[1281114, 22900, 700, 19, 57, "DetailNotes",
 CellID->209290908],
Cell[1281817, 22921, 84, 2, 28, "DetailNotes",
 CellID->16226943],
Cell[1281904, 22925, 141, 4, 28, "DetailNotes",
 CellID->30163790],
Cell[1282048, 22931, 171, 4, 28, "DetailNotes",
 CellID->213153736]
}, Open  ]],
Cell[CellGroupData[{
Cell[1282256, 22940, 37, 0, 168, "ControlSuggestionsSection"],
Cell[1282296, 22942, 312, 8, 30, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[1282611, 22952, 719, 17, 30, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[1283333, 22971, 381, 12, 30, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[1283717, 22985, 680, 16, 30, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[1284400, 23003, 844, 21, 30, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[1285247, 23026, 369, 9, 30, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[1285619, 23037, 1464, 31, 30, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[1287086, 23070, 908, 21, 30, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1288031, 23096, 30, 0, 208, "SearchTermsSection"],
Cell[1288064, 23098, 236, 5, 28, "SearchTerms",
 CellID->476564237]
}, Open  ]],
Cell[CellGroupData[{
Cell[1288337, 23108, 31, 0, 188, "RelatedLinksSection"],
Cell[1288371, 23110, 468, 10, 28, "RelatedLinks",
 CellID->24498121],
Cell[1288842, 23122, 486, 11, 28, "RelatedLinks",
 CellID->28998832],
Cell[1289331, 23135, 564, 12, 28, "RelatedLinks",
 CellID->611518950],
Cell[1289898, 23149, 575, 12, 28, "RelatedLinks",
 CellID->63968418]
}, Open  ]],
Cell[CellGroupData[{
Cell[1290510, 23166, 25, 0, 188, "AuthorSection"],
Cell[1290538, 23168, 87, 1, 28, "Author"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
