(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[   2003250,      36388]
NotebookOptionsPosition[   1997297,      36211]
NotebookOutlinePosition[   1998946,      36261]
CellTagsIndexPosition[   1998594,      36249]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Phonon Modes for 2D Lattice Vibrations", "DemoTitle",
 CellChangeTimes->{3.600887141142584*^9}],

Cell[CellGroupData[{

Cell["", "InitializationSection",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{
     "glConstMinSquaredDistanceFromOrigin", ",", 
      "glConstMinAngleBetweenLatticeVectors", ",", "glConstLocDefault", ",", 
      "glConstDefaultMass", ",", "glConstKDefaults", ",", "glConstKMin", ",", 
      "glConstKMax", ",", "glConstMMax", ",", "glConstWindowHalfWidth", ",", 
      "glConstSpringColors", ",", "glConstPrimaryDisplaySize", ",", 
      "glConstTextDisplayOffsetHack", ",", "glConstNeighboringCellIndexes", 
      ",", "glConstDynPlotRange", ",", "glConstSpringColorsByN"}], "]"}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"glConstMinSquaredDistanceFromOrigin", " ", "=", " ", "0.1"}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstMinAngleBetweenLatticeVectors", "=", 
     RowBox[{"Pi", "/", "6"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstLocDefault", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.1", ",", "1.3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1.9", ",", "0.8"}], "}"}]}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstDefaultMass", "=", "20"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKDefaults", "=", 
     RowBox[{"{", 
      RowBox[{"0.25", ",", "0.25", ",", "0.25", ",", "0.25", ",", "0.25"}], 
      "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKMin", "=", "0.05"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKMax", "=", "1"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstMMax", "=", "30"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstWindowHalfWidth", "=", "3"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstSpringColors", "=", 
     RowBox[{"Darker", "@", 
      RowBox[{"{", 
       RowBox[{
       "Orange", ",", "Green", ",", "Purple", ",", "Cyan", ",", "Yellow"}], 
       "}"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstPrimaryDisplaySize", "=", 
     RowBox[{".9", 
      RowBox[{"{", 
       RowBox[{"380", ",", "380"}], "}"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstTextDisplayOffsetHack", "=", 
     RowBox[{"{", 
      RowBox[{"0.25", ",", "0.25"}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstNeighboringCellIndexes", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"glConstDynPlotRange", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", " ", 
         "glConstWindowHalfWidth"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", " ", 
         "glConstWindowHalfWidth"}], "}"}]}], "}"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], "}"}], "\[Rule]", 
       RowBox[{"RGBColor", "[", "...", "]"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"-", "1"}]}], "}"}], "\[Rule]", 
       RowBox[{"RGBColor", "[", "...", "]"}]}], ",", " ", "..."}], "}"}], 
    "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"glConstSpringColorsByN", " ", "=", " ", 
     RowBox[{"DeleteDuplicates", "@", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"s", " ", 
            RowBox[{
             RowBox[{"Append", "[", 
              RowBox[{"glConstNeighboringCellIndexes", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
           RowBox[{"glConstSpringColors", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"s", ",", " ", 
            RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",", 
          " ", 
          RowBox[{"{", 
           RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", "1"}], 
       "]"}]}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{"Future", " ", "possible", " ", "maintainance", " ", 
     RowBox[{"TODOs", ":", "\[IndentingNewLine]", GridBox[{
        {
         RowBox[{
          RowBox[{
          "implement", " ", "a", " ", "min", " ", "separation", " ", "for", 
           " ", "the", " ", "equilibrium", " ", "mass", " ", "positions", " ",
            "too", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
             "as", " ", "done", " ", "for", " ", "the", " ", "lattice", " ", 
              "vectors"}], ")"}], ".", " ", "\[IndentingNewLine]", 
            "Trickier"}]}], ",", " ", 
          RowBox[{
          "since", " ", "that", " ", "should", " ", "be", " ", "based", " ", 
           "on", " ", "the", " ", "separations", " ", "in", " ", "the", " ", 
           "origin", " ", "cell"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{
          "and", " ", "not", " ", "the", " ", "obsolute", " ", "separations", 
           " ", "of", " ", "the", " ", 
           RowBox[{"locators", ".", "\[IndentingNewLine]", "Even"}], " ", 
           "if", " ", "that", " ", "is", " ", "done"}], ",", " ", 
          RowBox[{"that", " ", 
           RowBox[{"doesn", "'"}], "t", " ", "mean", " ", "that", " ", "the", 
           " ", "scaling", " ", 
           RowBox[{"won", "'"}], "t", " ", "allow", " ", "for", " ", 
           "overlap", " ", "in", " ", "the", " ", "dynamic", " ", 
           RowBox[{"tab", "."}]}]}]},
        {
         RowBox[{
         "would", " ", "be", " ", "cool", " ", "to", " ", "make", " ", "qLoc",
           " ", "a", " ", "pair", " ", "of", " ", "Locators", " ", 
          RowBox[{"that", ":", "\[IndentingNewLine]", " ", 
           RowBox[{
           "trace", " ", "out", " ", "constrained", " ", "positions", " ", 
            "along", " ", "the", " ", "2", " ", "Pi", " ", "scaled", " ", 
            "reciprocal", " ", "lattice", " ", 
            RowBox[{"vectors", ".", "\[IndentingNewLine]", 
             RowBox[{"(", 
              RowBox[{
              "returning", " ", "the", " ", "distance", " ", "from", " ", 
               "the", " ", "origin", " ", "of", " ", "each", " ", "of", " ", 
               "those", " ", "locators"}], ")"}]}]}]}]}]},
        {
         RowBox[{"a", " ", "message", " ", "box", " ", "on", " ", "user", " ", 
          RowBox[{"error", ":", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"-", " ", "when"}], " ", "an", " ", "angle", " ", "or", 
            " ", "distance", " ", "from", " ", "origin", " ", "change", " ", 
            "has", " ", "driven", " ", "a", " ", "reset", " ", "of", " ", 
            "the", " ", "lattice", " ", 
            RowBox[{"vectors", ".", "\[IndentingNewLine]", 
             RowBox[{"-", " ", "when"}]}], " ", "too", " ", "many", " ", "of",
             " ", "the", " ", "locators", " ", "have", " ", "been", " ", 
            "deleted", " ", "and", " ", "a", " ", "forced", " ", "reset", " ",
             "to", " ", "the", " ", "defaults", " ", 
            RowBox[{"occurs", "."}]}]}]}]},
        {
         RowBox[{
         "Can", " ", "the", " ", "frequency", " ", "qPlaneLoc", " ", 
          "LocatorPane", " ", "look", " ", "more", " ", "like", " ", 
          "Slider2D", " ", "in", " ", "the", " ", "dynamics", " ", "tab", " ",
           "for", " ", 
          RowBox[{"consistency", "?"}]}]},
        {
         RowBox[{
          RowBox[{
          "Am", " ", "using", " ", "a", " ", "calculated", " ", "value", " ", 
           "for", " ", "the", " ", "max", " ", "freq", " ", "for", " ", "the",
            " ", "freq", " ", "plot", " ", "intersection", " ", 
           RowBox[{"plane", ".", " ", "\[IndentingNewLine]", "Hardcoded"}], 
           " ", "this", " ", "to", " ", "magic", " ", "#", " ", 
           RowBox[{"that", "'"}], "s", " ", "out", " ", "of", " ", "the", " ",
            "graphic", " ", 
           RowBox[{"(", "23", ")"}]}], ",", " ", 
          RowBox[{
          "but", " ", "that", " ", "could", " ", "be", " ", "wrong", " ", 
           "for", " ", "some", " ", "params"}]}]},
        {
         RowBox[{
          RowBox[{
          "Scaling", " ", "of", " ", "the", " ", "masses", " ", "ended", " ", 
           "up", " ", "different", " ", "for", " ", "the", " ", "dynPlot", 
           " ", 
           RowBox[{"vs", ".", " ", "parameters"}], " ", 
           RowBox[{"tab", ".", " ", "\[IndentingNewLine]", "Hacked"}], " ", 
           "the", " ", "dynPlot", " ", "scaling", " ", "for", " ", "now"}], 
          ",", " ", 
          RowBox[{"to", " ", "be", " ", "a", " ", "bit", " ", 
           RowBox[{"closer", "."}]}]}]}
       },
       GridBoxDividers->{
        "Columns" -> {True, {False}, True}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{True}}, "RowsIndexed" -> {}}]}]}], "\[IndentingNewLine]",
     "*)"}], "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "checkAgainstRange", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkAgainstRange", "::", "usage"}], " ", "=", " ", 
     "\"\<This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator.\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkAgainstRange", "[", 
      RowBox[{
      "v_", ",", "default_", ",", "lowerLimit_", ",", " ", "upperLimit_", ",",
        " ", 
       RowBox[{"typeFunc_", " ", ":", " ", "NumberQ"}]}], "]"}], " ", ":=", 
     " ", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"typeFunc", "[", "v", "]"}], ",", "v", ",", " ", 
           "default"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"result", " ", "<=", " ", "upperLimit"}], ",", " ", 
           "result", ",", "default"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"result", " ", ">=", " ", "lowerLimit"}], ",", " ", 
           "result", ",", "default"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "result"}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "springPoints", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Based", " ", "on", " ", "my", " ", "ListLinePlot", " ", "answer", " ", 
     "posted", " ", 
     RowBox[{"in", ":", " ", 
      ButtonBox[
       RowBox[{
        RowBox[{"http", ":"}], "//", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
           "a"}], "/", "37228"}], "/", "10"}]}],
       BaseStyle->"Hyperlink",
       ButtonData->{
         URL["http://mathematica.stackexchange.com/a/37228/10"], None},
       ButtonNote->"http://mathematica.stackexchange.com/a/37228/10"]}]}], 
    " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"springPoints", "::", "usage"}], " ", "=", " ", 
     "\"\<springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"springPoints", "[", " ", 
      RowBox[{"a12_List", ",", " ", 
       RowBox[{"n_Integer:", "8"}], ",", 
       RowBox[{"h_:", ".05"}], ",", " ", 
       RowBox[{"f_:", " ", "0.1"}]}], " ", "]"}], " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "a1", ",", " ", "a2", ",", " ", "n1", ",", " ", "springDiff", ",", 
         " ", "nd", ",", " ", "r", ",", " ", "r1"}], " ", "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a1", ",", " ", "a2"}], "}"}], " ", "=", " ", "a12"}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"n1", " ", "=", " ", 
         RowBox[{"Norm", "[", "a1", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"springDiff", " ", "=", " ", 
         RowBox[{"a2", " ", "-", " ", "a1"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nd", " ", "=", " ", 
         RowBox[{"Norm", "[", "springDiff", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", " ", "=", " ", 
         RowBox[{"RotationMatrix", "[", 
          RowBox[{"ArcTan", " ", "@@", "  ", "springDiff"}], " ", "]"}]}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"r1", " ", "=", " ", 
         RowBox[{"r", " ", ".", " ", 
          RowBox[{"{", 
           RowBox[{"n1", ",", " ", "0"}], "}"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", " ", 
                 RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                 RowBox[{"t", " ", 
                  RowBox[{"(", 
                   RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}]}], ",", " ", 
                RowBox[{"h", " ", 
                 RowBox[{"Sin", "[", " ", 
                  RowBox[{"2", " ", "Pi", " ", "n", " ", "t"}], "]"}]}]}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", " ", 
                 RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}], " ", "+", " ", 
                 RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", 
                 RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}]}], "\[IndentingNewLine]", "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "indexLabel", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"indexLabel", "::", "usage"}], " ", "=", " ", 
     "\"\<\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"indexLabel", " ", "=", " ", 
     RowBox[{
      RowBox[{"Subscript", "[", 
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{"#1", ",", "Italic"}], "]"}], ",", " ", "#2"}], "]"}], " ", 
      "&"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "kLable", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"kLable", "::", "usage"}], " ", "=", " ", 
     "\"\<SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"kLable", " ", "=", " ", 
     RowBox[{
      RowBox[{"Style", "[", " ", 
       RowBox[{
        RowBox[{"indexLabel", "[", 
         RowBox[{"\"\<k\>\"", ",", " ", "#"}], "]"}], ",", " ", 
        RowBox[{"FontColor", "\[Rule]", 
         RowBox[{"glConstSpringColors", "[", 
          RowBox[{"[", "#", "]"}], "]"}]}]}], " ", "]"}], " ", "&"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "massColors", " ", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"massColors", " ", ":=", " ", 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Darker", "[", 
         RowBox[{"{", " ", 
          RowBox[{
          "Blue", ",", " ", "Green", ",", " ", "Purple", ",", " ", "Red", ",",
            " ", "Orange"}], " ", "}"}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"Mod", "[", 
           RowBox[{"#", ",", " ", "5"}], "]"}], " ", "+", " ", "1"}], "]"}], 
        " ", "]"}], " ", "&"}], " ", ")"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "massLabel", " ", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"massLabel", " ", ":=", " ", 
     RowBox[{
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{"indexLabel", "[", 
         RowBox[{"\"\<m\>\"", ",", " ", "#"}], "]"}], ",", " ", 
        RowBox[{"massColors", "[", "#", "]"}]}], "]"}], " ", "&"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcLineTable", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcLineTable", "[", " ", 
      RowBox[{"n_List", ",", " ", "b_List", ",", " ", "i_List"}], " ", "]"}], 
     " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"first", ",", " ", "second"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"first", ",", " ", "second"}], "}"}], " ", "=", " ", "i"}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Line", "[", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"-", 
                RowBox[{"n", "[", 
                 RowBox[{"[", "first", "]"}], "]"}]}], 
               RowBox[{"b", "[", 
                RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
              RowBox[{"j", " ", 
               RowBox[{"b", "[", 
                RowBox[{"[", "second", "]"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"n", "[", 
                RowBox[{"[", "first", "]"}], "]"}], 
               RowBox[{"b", "[", 
                RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
              RowBox[{"j", " ", 
               RowBox[{"b", "[", 
                RowBox[{"[", "second", "]"}], "]"}]}]}]}], "}"}], " ", 
           "\[IndentingNewLine]", "]"}], " ", "\[IndentingNewLine]", ",", " ", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", 
            RowBox[{"-", 
             RowBox[{"n", "[", 
              RowBox[{"[", "second", "]"}], "]"}]}], ",", " ", 
            RowBox[{"n", "[", 
             RowBox[{"[", "second", "]"}], "]"}]}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcReciprocalBasis", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcReciprocalBasis", "::", "usage"}], " ", "=", " ", 
     "\"\<Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcReciprocalBasis", "[", "loc_List", "]"}], " ", ":=", " ", 
     RowBox[{"Inverse", "[", " ", 
      RowBox[{"Transpose", "[", " ", "loc", " ", "]"}], " ", "]"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "nMassesFromLocArray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"nMassesFromLocArray", "[", "uLoc_", "]"}], " ", ":=", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Dimensions", "[", "uLoc", "]"}], " ", "//", " ", "First"}], 
        ")"}], " ", "-", "2"}], ")"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "adjustedmoSel", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"adjustedmoSel", "[", 
      RowBox[{"rNumM_", ",", "mOrigInd_", ",", "m1Ind_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"rNumM", ">", "2"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", " ", 
        RowBox[{
         RowBox[{"mOrigInd", "\[Equal]", "m1Ind"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"First", "[", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Range", "[", "rNumM", "]"}], ",", "m1Ind"}], "]"}], 
          "]"}], ",", "\[IndentingNewLine]", "mOrigInd"}], " ", 
        "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"First", "@", 
        RowBox[{"Delete", "[", 
         RowBox[{
          RowBox[{"Range", "[", "2", "]"}], ",", "m1Ind"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "constructKArrayElements", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"constructKArrayElements", "[", " ", 
      RowBox[{"i_Integer", ",", " ", "j_Integer"}], "  ", "]"}], " ", ":=", 
     " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "a", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"a", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "j", ",", " ", 
                RowBox[{"s", " ", 
                 RowBox[{"glConstNeighboringCellIndexes", "[", 
                  RowBox[{"[", "n", "]"}], "]"}]}]}], "}"}], " ", "\[Rule]", 
              " ", 
              RowBox[{"glConstKDefaults", "[", 
               RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"s", ",", " ", 
               RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",",
              " ", 
             RowBox[{"{", 
              RowBox[{"n", ",", " ", "4"}], "}"}]}], " ", "]"}], ",", " ", 
           "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"i", " ", "<", " ", "j"}], ",", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"a", ",", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"i", ",", "j", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "}"}], " ", "\[Rule]", " ", 
             RowBox[{"glConstKDefaults", "[", 
              RowBox[{"[", "5", "]"}], "]"}]}]}], "]"}], ",", " ", "a"}], " ",
          "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "constructKArray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"constructKArray", "[", " ", "r_Integer", " ", "]"}], " ", ":=", 
     " ", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"constructKArrayElements", "[", 
          RowBox[{"i", ",", "j"}], "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "r"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"j", ",", "r"}], "}"}]}], "]"}], ",", " ", "2"}], "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnAlteredKArrayElements", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnAlteredKArrayElements", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", 
       "ni_Integer", ",", "v_"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"kA", "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"glConstNeighboringCellIndexes", "[", 
               RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "_"}], "]"}], 
          "\[RuleDelayed]", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"glConstNeighboringCellIndexes", "[", 
               RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "v"}], "]"}]}], 
         ",", 
         RowBox[{
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"-", 
               RowBox[{"glConstNeighboringCellIndexes", "[", 
                RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "_"}], "]"}],
           "\[RuleDelayed]", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"-", 
               RowBox[{"glConstNeighboringCellIndexes", "[", 
                RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "v"}], 
           "]"}]}]}], "}"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnAlteredKarrayOriginElement", "]"}], ";"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnAlteredKarrayOriginElement", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer", ",", "v_"}], 
      "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "m1oSet", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"m1oSet", "=", 
         RowBox[{"Append", "[", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"kA", "/.", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Rule", "[", 
            RowBox[{"m1oSet", ",", "_"}], "]"}], "\[RuleDelayed]", 
           RowBox[{"Rule", "[", 
            RowBox[{"m1oSet", ",", "v"}], "]"}]}], ")"}]}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "selectVFromKarray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"To", " ", "refresh", " ", "k1"}], ",", "k2", ",", "k3", ",", 
     RowBox[{
     "k4", " ", "after", " ", "changing", " ", "m1Sel", " ", "or", " ", 
      RowBox[{"m2Sel", "."}]}]}], "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"selectVFromKarray", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", 
       "ni_Integer"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m1Ind", ",", "m2Ind", ",", 
         RowBox[{"glConstNeighboringCellIndexes", "[", 
          RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], "/.", "kA"}], ")"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "selectOriginVFromKarray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "To", " ", "refresh", " ", "k5", " ", "after", " ", "changing", " ", 
     "m1Sel", " ", "and", " ", "moSel"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"selectOriginVFromKarray", "[", 
      RowBox[{"kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer"}], "]"}], 
     ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"Sort", "[", 
          RowBox[{"{", 
           RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "/.", "kA"}], ")"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnKarrayForAdditionalMassIndex", "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnKarrayForAdditionalMassIndex", "[", " ", 
      RowBox[{"kA_List", ",", "nmNew_Integer"}], " ", "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "k2", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"k2", " ", "=", " ", 
         RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"constructKArrayElements", "[", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], ")"}], "/@",
             " ", 
            RowBox[{"(", 
             RowBox[{"Select", "[", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"Table", "[", " ", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", " ", "nmNew"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"j", ",", " ", "nmNew"}], "}"}]}], "]"}], ",", 
                 " ", "1"}], "]"}], ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"Max", "[", "#", "]"}], " ", "\[Equal]", " ", 
                 "nmNew"}], " ", "&"}]}], "]"}], ")"}]}], ",", " ", "2"}], 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"kArray", ",", " ", "k2"}], "]"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"kA", ",", " ", "k2"}], "}"}], ",", " ", "1"}], "]"}]}]}], 
      " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "resetLatticeVectorsIfAngleTooSmall", "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
      RowBox[{"uLoc_List", ",", "minAngle_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "t", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"t", " ", "=", " ", 
         RowBox[{"Abs", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{
            RowBox[{"Normalize", "[", 
             RowBox[{"uLoc", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", ".", " ", 
            RowBox[{"Normalize", "[", 
             RowBox[{"uLoc", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}], "]"}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"t", " ", ">", " ", 
            RowBox[{"Pi", "/", "2"}]}], ",", " ", 
           RowBox[{"Pi", "-", "t"}], ",", " ", "t"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", " ", 
         RowBox[{
          RowBox[{"t", " ", "<", " ", "minAngle"}], ",", 
          "\[IndentingNewLine]", "glConstLocDefault", ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"uLoc", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
            RowBox[{"uLoc", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "projOpU", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"projOpU", "[", "v_List", "]"}], " ", ":=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "^", "2"}], ",", " ", 
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], 
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], 
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "^", "2"}]}], "}"}]}], "}"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"projOp", "::", "usage"}], " ", "=", " ", 
     "\"\<given an input vector \!\(\*OverscriptBox[\(v\), \
\(\[RightVector]\)]\) = {\!\(\*SubscriptBox[\(v\), \(x\)]\), \
\!\(\*SubscriptBox[\(v\), \(y\)]\)}, compute the projection matrix operator \
along the unit vector in that direction.\n\n   projOp[{1, 0}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"1\", \"0\"},
{\"0\", \"0\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{0, 1}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"0\", \"0\"},
{\"0\", \"1\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{a,b}] // MatrixForm = \!\
\(\*Cell[TextData[Cell[BoxData[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{
FractionBox[
SuperscriptBox[\"a\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]},
{
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
SuperscriptBox[\"b\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}]],
CellChangeTimes->{{3.5990911441851797`*^9, 3.599091144641206*^9}, \
3.5990913830438423`*^9, 3.5990915191646276`*^9, 3.599091555028679*^9, \
3.599091735722014*^9, {3.599091916353346*^9, 3.599091928988068*^9}}]]]\)\n\
\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "projOp", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"projOp", "[", "v_List", "]"}], " ", ":=", " ", 
     RowBox[{
      RowBox[{"projOpU", "[", "v", "]"}], "/", 
      RowBox[{"(", 
       RowBox[{"v", ".", " ", "v"}], ")"}]}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "relativeDifferences", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"relativeDifferences", "::", "usage"}], " ", "=", " ", 
     "\"\<Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"relativeDifferences", "[", " ", 
      RowBox[{"r_List", ",", "mp_List", ",", " ", 
       RowBox[{"{", 
        RowBox[{
        "mIndex1_Integer", ",", " ", "mIndex2_Integer", ",", " ", "n_List"}], 
        "}"}]}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "d", ",", " ", "pOrigin", ",", " ", "pOther", ",", " ", "dn"}], "}"}],
        ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"pOrigin", " ", "=", " ", 
         RowBox[{"mp", "[", 
          RowBox[{"[", " ", "mIndex1", " ", "]"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"pOther", " ", "=", " ", 
         RowBox[{
          RowBox[{"mp", "[", 
           RowBox[{"[", " ", "mIndex2", " ", "]"}], "]"}], "+", " ", 
          RowBox[{"n", " ", ".", " ", "r"}]}]}], "  ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"d", " ", "=", " ", 
         RowBox[{"pOther", " ", "-", " ", "pOrigin"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dn", " ", "=", " ", 
         RowBox[{"d", " ", ".", "d"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"dn", ",", " ", "pOrigin", ",", " ", "pOther", ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"projOpU", "[", "d", "]"}], "/", "dn"}], "  ", 
           RowBox[{"(*", 
            RowBox[{"//", " ", "MatrixForm"}], "*)"}], ")"}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calculateCouplings", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calculateCouplings", "::", "usage"}], " ", "=", " ", 
     "\"\<Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions.\>\""}], 
    " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calculateCouplings", "[", 
      RowBox[{"ld_List", ",", " ", "kA_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "t", ",", " ", "t1", ",", " ", "t2", ",", " ", "r", ",", " ", "mp", 
         ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"r", ",", " ", "mp", ",", " ", "numberOfMasses"}], "}"}], 
         " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", " ", "\"\<mPosFirstCell\>\"", ",", 
            " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}],
         " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Append", "[", 
            RowBox[{"#", ",", " ", 
             RowBox[{"relativeDifferences", "[", 
              RowBox[{"r", ",", " ", "mp", ",", " ", 
               RowBox[{"First", "[", "#", "]"}]}], "]"}]}], " ", "]"}], "&"}],
           "/@", " ", 
          RowBox[{"(", 
           RowBox[{"kA", "/.", " ", 
            RowBox[{"Rule", " ", "\[Rule]", " ", "List"}]}], ")"}]}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "}"}], ",", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "3", "]"}], "]"}]}], "}"}], ",", " ", "1"}], 
            "]"}], " ", "&"}], "/@", " ", "t"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"t1", " ", "=", " ", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Select", "[", " ", 
               RowBox[{"t", ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                    "i"}], ")"}], " ", "&&", " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "\[NotEqual]", " ", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0"}], "}"}]}], ")"}]}], " ", 
                 "&"}]}], "]"}], ")"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "[", 
                RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
           "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{"t", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "3", "]"}], "]"}], " ", "==", " ", 
             RowBox[{"{", 
              RowBox[{"0", ",", " ", "0"}], "}"}]}], " ", "&"}]}], "]"}]}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "rest", " ", "of", " ", "the", " ", 
          RowBox[{"permutations", ":"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"t2", ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", " ", 
                   RowBox[{"Drop", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}]}], "}"}], ",", " ", 
                 "1"}], "]"}], " ", "&"}], "/@", " ", "t2"}]}], "}"}], ",", 
           " ", "1"}], "]"}]}], "  ", ";", "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Select", "[", " ", 
               RowBox[{"t2", ",", " ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                   "i"}], ")"}], " ", "&"}]}], "]"}], ")"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "[", 
                RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
           "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"t2", ",", " ", "t1"}], "}"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "spScaled", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"spScaled", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"s1_List", ",", "s2_List"}], "}"}], ",", " ", "scaleKValue_", 
       ",", " ", "referenceSepSquared_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "ds", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ds", " ", "=", " ", 
         RowBox[{"s2", " ", "-", " ", "s1"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"springPoints", "[", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2"}], "}"}], ",", 
          RowBox[{"Ceiling", "[", 
           RowBox[{"12", " ", "scaleKValue", " ", 
            RowBox[{"Sqrt", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"ds", ".", "ds"}], ")"}], "/", "referenceSepSquared"}],
              "]"}]}], "]"}]}], " ", "]"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "oneTermOfdynamicsMatrix", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"oneTermOfdynamicsMatrix", "::", "usage"}], " ", "=", " ", 
     "\"\<\!\(TraditionalForm\`\(grab\\\ data\\\ \(from : \\\ \
rawArrayOfMasses\), \\\ parameterLocatorDependencies, \
\[IndentingNewLine]\(\(couplingData[\([_]\)]\)[\([_]\)]\)[\([_]\)]\\\  = \\\ \
{k, \\\ j, \\\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \\\ \
\*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\\  + \\\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]
ex : \\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]
to\\\ form\\\ equations\\\ of\\\ the\\\ \(form : \
\[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\\  = \\\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\\  \[NotEqual] \\\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\\ \
\((\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\
\[RightVector]\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), \
SubscriptBox[\(m\), \(k\)]] - \\\ \
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(j\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), \
SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \*SubscriptBox[\(m\), \(j\)]\)]] \
\*SuperscriptBox[\(e\), \(I\\\ \((\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\\  . \\\ \
\*OverscriptBox[\(q\), \(\[RightVector]\)]\\\ )\)\)])\)\[IndentingNewLine]
Note\\\ that\\\ qVec\\\ here\\\ is\\\ intended\\\ to\\\ be\\\ an\\\ undefined\
\\\ global . \\\ \\\ Is\\\ there\\\ a\\\ way\\\ to\\\ do\\\ that\\\ \
\(\(programatically\)\(?\)\)\)\)\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"oneTermOfdynamicsMatrix", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "k_Integer", ",", " ", "j_Integer", ",", " ", "mVec_List", ",", " ", 
         "kS_", ",", " ", "_", ",", "_", ",", "_", ",", "proj_List"}], "}"}], 
       ",", " ", "r_List", ",", " ", "mk_", ",", " ", "epsilon_List", ",", 
       " ", "mA_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"(", 
      RowBox[{"kS", " ", 
       RowBox[{"proj", "  ", ".", 
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"epsilon", "[", 
            RowBox[{"[", "k", "]"}], "]"}], "/", "mk"}], " ", "-", " ", 
          RowBox[{
           RowBox[{"epsilon", "[", 
            RowBox[{"[", "j", "]"}], "]"}], 
           RowBox[{
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{"I", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"mVec", " ", ".", " ", "r"}], ")"}], ".", " ", 
                 "qVec"}], ")"}]}], ")"}]}], "/", 
            RowBox[{"Sqrt", "[", " ", 
             RowBox[{"mk", " ", 
              RowBox[{"mA", "[", 
               RowBox[{"[", "j", "]"}], "]"}]}], " ", "]"}]}]}]}], ")"}]}]}], 
      "  ", ")"}]}], "  ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "dynamicsMatrix", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dynamicsMatrix", "[", 
      RowBox[{"ld_List", ",", " ", "cd_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "cdFlatAndSorted", ",", " ", "r", ",", " ", "res", ",", " ", 
         "epsilon", ",", " ", "m", ",", "mScalarArray", ",", " ", 
         "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"cdFlatAndSorted", " ", "=", " ", 
         RowBox[{"SplitBy", "[", " ", 
          RowBox[{
           RowBox[{"Sort", "@", 
            RowBox[{"Flatten", "[", 
             RowBox[{"cd", ",", " ", "2"}], "]"}]}], " ", ",", " ", "First"}],
           " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"r", ",", "mScalarArray", ",", " ", "numberOfMasses"}], 
          "}"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", 
            " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}],
         " ", ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"Here", " ", 
            SubscriptBox[
             OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], " ", 
            RowBox[{"(", 
             RowBox[{"=", 
              RowBox[{"epsilon", "[", 
               RowBox[{"[", "k", "]"}], "]"}]}], ")"}], " ", "is", " ", 
            "represented", " ", "as", " ", "a", " ", "2", "x", 
            RowBox[{"(", 
             RowBox[{"2", "N"}], ")"}], " ", "matrix", " ", "with", " ", 
            "the", " ", "vector", " ", "factored", " ", 
            RowBox[{"out", ".", "  ", "For"}], " ", "example", " ", "with", 
            " ", "N"}], " ", "=", " ", "3"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox[
            OverscriptBox["\[Epsilon]", "\[RightVector]"], "1"], "=", " ", 
           RowBox[{
            RowBox[{
             TagBox[
              RowBox[{"(", "\[NoBreak]", GridBox[{
                 {"1", "0", "0", "0", "0", "0"},
                 {"0", "1", "0", "0", "0", "0"}
                },
                
                GridBoxAlignment->{
                 "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                  "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                  "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
              Function[BoxForm`e$, 
               MatrixForm[BoxForm`e$]]], "\[IndentingNewLine]", 
             "\[IndentingNewLine]", "This", " ", "will", " ", "be", " ", 
             "pre"}], "-", 
            RowBox[{
            "multiplied", " ", "by", " ", "a", " ", "2", "x2", " ", 
             "projection", " ", 
             RowBox[{"matrix", ".", "\[IndentingNewLine]", "The"}], " ", 
             "whole", " ", "thing", " ", "should", " ", "be", " ", 
             "logically", " ", "treated", " ", "as", " ", "if", " ", "it", 
             " ", "is", " ", "post"}], "-", 
            RowBox[{
            "multiplied", " ", "by", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", Cell[TextData[Cell[BoxData[
              TagBox[
               RowBox[{"(", "\[NoBreak]", GridBox[{
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "2"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "2"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "2"}]]}
                 },
                 
                 GridBoxAlignment->{
                  "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                   "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                   "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
               Function[BoxForm`e$, 
                MatrixForm[BoxForm`e$]]]],
              
              CellChangeTimes->{{3.600871330362259*^9, 
               3.6008713538916054`*^9}}]]]}]}]}]}], "\[IndentingNewLine]", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"epsilon", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{
           RowBox[{"IdentityMatrix", "[", " ", 
            RowBox[{"2", " ", "numberOfMasses"}], " ", "]"}], ",", "2"}], 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"res", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Table", "[", " ", 
             RowBox[{
              RowBox[{"Total", "@", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"oneTermOfdynamicsMatrix", "[", 
                   RowBox[{"#", ",", " ", "r", ",", " ", 
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", " ", "epsilon", ",", 
                    " ", "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
                 RowBox[{"(", 
                  RowBox[{"cdFlatAndSorted", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ")"}]}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], "]"}], " ",
             "//", " ", "Flatten"}], ",", " ", 
           RowBox[{"2", " ", "numberOfMasses"}]}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"res", " ", "/.", " ", 
          RowBox[{"qVec", " ", "\[Rule]", " ", "#"}]}], " ", "&"}]}]}], " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{"cdFlatAndSorted", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{"mScalarArray", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{
         RowBox[{
          RowBox[{"oneTermOfdynamicsMatrix", "[", 
           RowBox[{"#", ",", " ", "r", ",", " ", 
            RowBox[{"mScalarArray", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", " ", 
            "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"cdFlatAndSorted", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", "res"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", "epsilon"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"oneTermOfdynamicsMatrix", "[", " ", 
            RowBox[{
            "parameterLocatorDependencies", ",", " ", "couplingData"}], " ", 
            "]"}], "[", 
           RowBox[{"#", ",", " ", "r", ",", 
            RowBox[{"mScalarArray", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", 
            "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"cd", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcDynamics", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcDynamics", "::", "usage"}], " ", "=", " ", 
     "\"\<a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \
\(k\)]\),\!\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for \
each of the system eigenvalues, when evaluated at qLoc.\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Example", ":", "\n", "\n", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "ld", ",", " ", "cd", ",", " ", "basisAndMassPoints", ",", " ", 
         "kArray", ",", " ", "matrix", ",", " ", "dynamics", ",", " ", 
         "qPoint", ",", " ", "omegaIndex"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"basisAndMassPoints", " ", "=", " ", 
         RowBox[{"{", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.6", ",", "1"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"-", "0.4"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"0.3", ",", "3"}], "}"}]}], " ", "}"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"ld", " ", "=", " ", 
         RowBox[{"locDependent", "[", " ", 
          RowBox[{"basisAndMassPoints", ",", " ", "1", ",", 
           RowBox[{"{", "10", "}"}]}], " ", "]"}]}], "  ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"kArray", " ", "=", " ", 
         RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"cd", " ", "=", " ", 
         RowBox[{"calculateCouplings", "[", " ", 
          RowBox[{"ld", ",", " ", "kArray"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"qPoint", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"\"\<qMaxVec\>\"", " ", "/.", " ", "ld"}], ")"}], "/", 
          "2"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"matrix", " ", "=", " ", 
         RowBox[{"dynamicsMatrix", "[", " ", 
          RowBox[{"ld", ",", " ", "cd"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynamics", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"calcDynamics", "[", " ", 
            RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}], " ", "//",
            " ", "First"}], " ", "//", " ", "TableForm"}]}]}]}], 
      "\[IndentingNewLine]", "]"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcDynamics", "[", "mAtQ_List", "]"}], " ", ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Sqrt", "[", 
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Eigensystem", "[", " ", "mAtQ", " ", "]"}], " ", "//", " ", 
         "Transpose"}], ")"}]}], ")"}]}], "  ", ";"}], "\n", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "frequencyPlotCalc", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"frequencyPlotCalc", "::", "usage"}], " ", "=", " ", 
     "\"\<frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"frequencyPlotCalc", "[", 
      RowBox[{"ld_List", ",", "m_", ",", "meshSz_Integer"}], "]"}], " ", ":=",
      " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "eigTable2D", ",", " ", "eigTable1D", ",", " ", "qMax", ",", " ", 
         "omegaPointList2D", ",", " ", "omegaPointList1D", ",", " ", "range", 
         ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"qMax", ",", " ", "numberOfMasses"}], "}"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<qMaxVec\>\"", ",", "\"\<numberOfMasses\>\""}], "}"}], 
          " ", "/.", " ", "ld"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"eigTable2D", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Re", "[", 
            RowBox[{"Table", "[", "  ", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"qx", ",", " ", "qy"}], "}"}], " ", ",", 
                RowBox[{"Eigenvalues", "[", " ", 
                 RowBox[{
                  RowBox[{"m", "[", " ", 
                   RowBox[{"{", 
                    RowBox[{"qx", ",", " ", "qy"}], "}"}], "  ", "]"}], " ", "//",
                   " ", "N"}], " ", "]"}]}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"qx", ",", " ", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"qMax", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "/", " ", "meshSz"}]}], 
               "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"qy", ",", " ", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"qMax", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "/", " ", "meshSz"}]}], 
               "}"}]}], " ", "]"}], " ", "]"}], ",", "1"}], "]"}]}], " ", ";",
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"omegaPointList2D", "[", "nn_", "]"}], " ", ":=", "  ", 
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"Sqrt", "[", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
               RowBox[{"[", "nn", "]"}], "]"}]}], "}"}], "]"}], "&"}], "/@", 
          " ", "eigTable2D"}]}], "  ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"range", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"2", " ", "numberOfMasses"}], ")"}], " ", "//", " ", 
           "Range"}], ")"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"ListPlot3D", "[", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"omegaPointList2D", "[", "#", "]"}], " ", "&"}], "/@", 
           " ", "range"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{"PlotRange", " ", "\[Rule]", " ", "Full"}], " ", ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"AxesLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<\!\(\*SubscriptBox[\(q\), \(x\)]\)\>\"", ",", " ", 
             "\"\<\!\(\*SubscriptBox[\(q\), \(y\)]\)\>\""}], "}"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\n", " ", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "showFreqPlot", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showFreqPlot", "::", "usage"}], " ", "=", " ", 
     "\"\<showFreqPlot[ qPlaneLoc, freqPlot ]\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showFreqPlot", "[", 
      RowBox[{"qpl_List", ",", " ", "freqPlotData_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"aa", ",", " ", "bb"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"aa", ",", " ", "bb"}], "}"}], " ", "=", "  ", "qpl"}], " ",
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{"{", 
          RowBox[{"freqPlotData", ",", "\[IndentingNewLine]", 
           RowBox[{"Graphics3D", "[", " ", 
            RowBox[{"Polygon", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", 
               "  ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}]}], "}"}],
              "]"}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "pointsTable", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"pointsTable", "::", "usage"}], " ", "=", " ", 
     "\"\<Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage.\>\""}], " ", 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"pointsTable", "[", " ", 
      RowBox[{"massPosition_List", ",", " ", "latticeOrigins_List"}], " ", 
      "]"}], " ", ":=", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#", " ", "+", " ", "massPosition"}], ")"}], " ", "&"}], "/@",
        " ", "latticeOrigins"}], ")"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "findLatticeCells", " ", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"findLatticeCells", "::", "usage"}], " ", "=", " ", 
     "\"\<All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"findLatticeCells", "[", 
      RowBox[{"latticeVectors_List", ",", "limits_List"}], "]"}], " ", ":=", 
     " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", " ", "b", ",", "sol", ",", " ", "oneSolution"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", " ", "b"}], "}"}], " ", "=", " ", 
         "latticeVectors"}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Rationalize", " ", "to", " ", 
          RowBox[{"fix", ":", " ", "to", ":", " ", 
           ButtonBox[
            RowBox[{
             RowBox[{"http", ":"}], "//", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], 
                 "/", "questions"}], "/", "6055"}], "/", "how"}], "-", "to", 
              "-", "get", "-", "rid", "-", "of", "-", "warnings", "-", "when",
               "-", "using", "-", "solve", "-", "on", "-", "an", "-", 
              "equation", "-", "with", "-", "inexact", "-", "coeffici"}]}],
            BaseStyle->"Hyperlink",
            ButtonData->{
              URL[
              "http://mathematica.stackexchange.com/questions/6055/how-to-get-\
rid-of-warnings-when-using-solve-on-an-equation-with-inexact-coeffici"], None},
            
            ButtonNote->
             "http://mathematica.stackexchange.com/questions/6055/how-to-get-\
rid-of-warnings-when-using-solve-on-an-equation-with-inexact-coeffici"]}]}], 
         " ", "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"oneSolution", "[", "o_", "]"}], " ", ":=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"n", ",", "m"}], "}"}], " ", "/.", 
          RowBox[{"Solve", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Rationalize", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"limits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "<", "  ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"n", " ", "a"}], " ", "+", " ", 
                   RowBox[{"m", " ", "b"}], " ", "+", " ", "o"}], ")"}], " ", 
                 ".", " ", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "0"}], "}"}]}]}], ")"}], " ", "&&", 
              "\[IndentingNewLine]", 
              RowBox[{"(", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"n", " ", "a"}], " ", "+", " ", 
                   RowBox[{"m", " ", "b"}], " ", "+", " ", "o"}], ")"}], " ", 
                 ".", " ", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "0"}], "}"}]}], " ", "<", " ", 
                RowBox[{
                 RowBox[{"limits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ")"}], " ", "&&", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"limits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "<", "  ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"n", " ", "a"}], " ", "+", " ", 
                   RowBox[{"m", " ", "b"}], " ", "+", "o"}], ")"}], " ", ".", 
                 " ", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}]}]}], ")"}], " ", "&&", 
              "\[IndentingNewLine]", 
              RowBox[{"(", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"n", " ", "a"}], " ", "+", " ", 
                   RowBox[{"m", " ", "b"}], " ", "+", "o"}], ")"}], " ", ".", 
                 " ", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}]}], " ", "<", " ", 
                RowBox[{
                 RowBox[{"limits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], " ", "]"}], 
            "\[IndentingNewLine]", ",", " ", 
            RowBox[{"{", 
             RowBox[{"n", ",", "m"}], "}"}], ",", " ", "Integers"}], 
           "]"}]}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"sol", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"oneSolution", "[", "#", "]"}], " ", "&"}], "/@", " ", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "0"}], "}"}], ",", "a", ",", " ", "b", ",",
                 " ", 
                RowBox[{"a", "+", "b"}]}], "}"}]}], " ", ",", "1"}], "]"}], 
           " ", "//", " ", "Sort"}], " ", "//", " ", "DeleteDuplicates"}]}], 
        " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#", ",", 
            RowBox[{
             RowBox[{"a", " ", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], " ", "+", " ", 
             RowBox[{"b", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], " ", "&"}], "/@", 
         " ", "sol"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "locDependent", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"locDependent", "::", "usage"}], " ", "=", " ", 
     "\"\<Locator dependent calculations (i.e. based on the mass positions \
and the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"locDependent", "[", " ", 
      RowBox[{"uLoc_List", ",", "numMasses_Integer", ",", " ", "rma_List"}], 
      " ", "]"}], "  ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "m", ",", "latticeBasis", ",", " ", "numberLatticeLinesToDisplay", 
         ",", "reciprocalBasis", ",", "mObliqueComponents", ",", " ", 
         "mPosFirstCell", ",", " ", "reciprocalNorms", ",", " ", 
         "allLatticeCellOriginsInDynPlotRange", ",", " ", "cellOrigins"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"latticeBasis", " ", "=", 
         RowBox[{"Take", "[", 
          RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"m", " ", "=", " ", 
         RowBox[{"Drop", "[", 
          RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"numberLatticeLinesToDisplay", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Ceiling", "[", "  ", 
             RowBox[{"Abs", "[", 
              RowBox[{"glConstWindowHalfWidth", "/", " ", 
               RowBox[{
                RowBox[{"latticeBasis", "[", 
                 RowBox[{"[", "#", "]"}], "]"}], "[", 
                RowBox[{"[", "#", "]"}], "]"}]}], "]"}], "]"}], " ", "&"}], 
           " ", "/@", " ", 
           RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"reciprocalBasis", " ", "=", " ", 
         RowBox[{
         "calcReciprocalBasis", "[", " ", "latticeBasis", " ", "]"}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"reciprocalNorms", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Norm", "[", 
             RowBox[{"reciprocalBasis", "[", 
              RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
           " ", 
           RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"mObliqueComponents", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"m", "[", 
             RowBox[{"[", " ", "i", " ", "]"}], "]"}], " ", ".", " ", 
            RowBox[{"reciprocalBasis", "[", 
             RowBox[{"[", " ", "j", " ", "]"}], "]"}]}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numMasses"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"j", ",", " ", "2"}], "}"}]}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"mPosFirstCell", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"m", "[", 
              RowBox[{"[", "#", "]"}], "]"}], " ", "-", " ", 
             RowBox[{
              RowBox[{"Floor", "[", 
               RowBox[{"mObliqueComponents", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", ".", " ", 
              "latticeBasis"}]}], " ", ")"}], " ", "&"}], " ", "/@", " ", 
          RowBox[{"Range", "[", "numMasses", "]"}]}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"allLatticeCellOriginsInDynPlotRange", " ", "=", " ", 
         RowBox[{
          RowBox[{"findLatticeCells", "[", 
           RowBox[{"latticeBasis", ",", "glConstDynPlotRange"}], "]"}], " ", "//",
           " ", "Transpose"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"cellOrigins", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
          "allLatticeCellOriginsInDynPlotRange", " ", "//", " ", "Last"}], 
          ")"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<mScalarArray\>\"", " ", "\[Rule]", " ", "rma"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<numberOfMasses\>\"", " ", "\[Rule]", " ", "numMasses"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<latticeBasis\>\"", " ", "\[Rule]", " ", "latticeBasis"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<latticeNorms\>\"", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Norm", "[", 
               RowBox[{"latticeBasis", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
             " ", 
             RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<latticeUnitVectors\>\"", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Normalize", "[", 
               RowBox[{"latticeBasis", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
             " ", 
             RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<numberLatticeLinesToDisplay\>\"", "\[Rule]", " ", 
           "numberLatticeLinesToDisplay"}], ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<latticeCellOriginIndexes\>\"", " ", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{
            "allLatticeCellOriginsInDynPlotRange", " ", "//", " ", "First"}], 
            ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<reciprocalBasis\>\"", "\[Rule]", " ", "reciprocalBasis"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{
          "\"\<reciprocalNorms\>\"", "\[Rule]", " ", "reciprocalNorms"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{"\"\<qMaxVec\>\"", " ", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{"2", " ", "Pi", " ", "reciprocalNorms"}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<mObliqueComponents\>\"", "\[Rule]", " ", 
           "mObliqueComponents"}], ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<mPosFirstCell\>\"", "\[Rule]", " ", "mPosFirstCell"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<pointsDataTable\>\"", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"pointsTable", "[", 
                RowBox[{
                 RowBox[{"mPosFirstCell", "[", 
                  RowBox[{"[", "#", "]"}], "]"}], ",", " ", "cellOrigins"}], 
                "]"}], ")"}], " ", "&"}], "/@", " ", 
             RowBox[{"Range", "[", "numMasses", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<lineTable\>\"", " ", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"calcLineTable", "[", " ", 
               RowBox[{
               "numberLatticeLinesToDisplay", ",", " ", "latticeBasis", ",", 
                " ", "#"}], " ", "]"}], " ", "&"}], " ", "/@", " ", 
             RowBox[{"Permutations", "[", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ")"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "plotSprings", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"plotSprings", "::", "usage"}], " ", "=", " ", 
     "\"\<Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"plotSprings", "[", 
      RowBox[{
      "uLoc_List", ",", " ", "ld_List", ",", "cd_List", ",", "m1Ind_Integer", 
       ",", " ", "m2Ind_Integer", ",", " ", "moInd_Integer"}], "]"}], " ", ":=",
      " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "aLoc", ",", " ", "bLoc", ",", "mLoc", ",", "pointsList", ",", 
         "latticeBasis", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
         " ", "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
         "cOrigin", ",", " ", "cN", ",", " ", "g", ",", " ", "mScalarArray", 
         ",", " ", "numberOfMasses", ",", " ", "scaleLoc"}], "}"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"latticeBasis", " ", "=", " ", 
         RowBox[{"Take", "[", " ", 
          RowBox[{"uLoc", ",", " ", "2"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"aLoc", " ", "=", " ", 
         RowBox[{"uLoc", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"bLoc", " ", "=", " ", 
         RowBox[{"uLoc", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"scaleLoc", " ", "=", " ", 
         RowBox[{
          RowBox[{"aLoc", ".", "aLoc"}], "  ", "+", " ", 
          RowBox[{"bLoc", " ", ".", "bLoc"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "mLoc", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
           "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
           "mScalarArray", ",", " ", "numberOfMasses"}], "}"}], "=", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<mPosFirstCell\>\"", ",", "\"\<reciprocalBasis\>\"", ",", 
            "\"\<pointsDataTable\>\"", ",", 
            "\"\<numberLatticeLinesToDisplay\>\"", ",", " ", 
            "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", " ", 
            "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}], " ",
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pointsList", "[", "n_Integer", "]"}], " ", ":=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"massColors", "[", "n", "]"}], ",", "\[IndentingNewLine]", 
           ",", 
           RowBox[{"PointSize", "[", 
            RowBox[{"Sqrt", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"mScalarArray", "[", 
                RowBox[{"[", "n", "]"}], "]"}], "/", "glConstMMax"}], "/", 
              "500"}], "]"}], "]"}], "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Point", "[", " ", "#", " ", "]"}], " ", "&"}], " ", "/@",
             " ", 
            RowBox[{"pointsDataTable", "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{"Text", "[", 
            RowBox[{
             RowBox[{"massLabel", "[", " ", "n", "]"}], ",", 
             RowBox[{
              RowBox[{"mLoc", "[", 
               RowBox[{"[", "n", "]"}], "]"}], " ", "+", " ", 
              "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
          "\[IndentingNewLine]", "}"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"cOrigin", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"cd", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", " ", 
             RowBox[{"{", 
              RowBox[{"m1Ind", ",", " ", "moInd"}], "}"}]}], " ", "&"}]}], 
          " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"cN", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"cd", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "[", 
            RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
             RowBox[{"{", 
              RowBox[{"m1Ind", ",", " ", "m2Ind"}], "}"}]}], "&"}]}], " ", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"g", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"spScaled", "[", 
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"{", 
                  RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", " ", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "4", "]"}], "]"}], "/", "glConstKMax"}], ",", 
               " ", "scaleLoc"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", "&"}],
           "/@", " ", "cN"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"numberOfMasses", " ", ">", " ", "1"}], ",", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"g", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"spScaled", "[", 
                 RowBox[{
                  RowBox[{"Take", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", " ", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], "/", "glConstKMax"}], ",",
                   " ", "scaleLoc"}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
                "\[IndentingNewLine]", 
                RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                   "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", 
              "&"}], "/@", " ", "cOrigin"}]}], "]"}], ","}], " ", "]"}], " ", 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Graphics", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", "\[IndentingNewLine]", " ", 
                 RowBox[{"lines", "\[IndentingNewLine]", ",", "Blue", ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"reciprocalBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                   RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]", 
                  ",", "Thick", ",", 
                  RowBox[{"Arrowheads", "[", "0.05", "]"}], 
                  "\[IndentingNewLine]", ",", "Red", ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"latticeBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                   RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]", 
                  ",", 
                  RowBox[{"Text", "[", 
                   RowBox[{
                    RowBox[{"OverVector", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<a\>\"", ",", "Italic"}], "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"aLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}], 
                  "\[IndentingNewLine]", ",", 
                  RowBox[{"Text", "[", 
                   RowBox[{
                    RowBox[{"OverVector", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<b\>\"", ",", "Italic"}], "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"bLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{"This", " ", "polygon", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "with", " ", "doubling", " ", "of", " ", "PlotRange"}], 
                    " ", "\[Rule]", " ", 
                    RowBox[{"glConstDynPlotRange", " ", "below"}]}], ")"}], 
                   " ", "was", " ", "to", " ", "visually", " ", "test", " ", 
                   "the", " ", "Solve", " ", "logic", " ", "used", " ", "to", 
                   " ", "find", " ", "all", " ", "the", " ", "lattice", " ", 
                   "cells", " ", "contained", " ", "or", " ", "just", " ", 
                   "outside", " ", "of", " ", "the", " ", 
                   RowBox[{"region", "."}]}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{",", 
                   RowBox[{"Lighter", "@", 
                    RowBox[{"Lighter", "@", "Gray"}]}], "\[IndentingNewLine]",
                    ",", 
                   RowBox[{"Opacity", "[", "0.5", "]"}], 
                   "\[IndentingNewLine]", ",", 
                   RowBox[{"Polygon", "[", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    ")"}], "\[IndentingNewLine]", " ", "]"}]}], " ", "*)"}], 
                 "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"pointsList", "[", "#", "]"}], " ", "&"}], "/@", 
                 " ", 
                 RowBox[{"Range", "[", "numberOfMasses", "]"}]}]}], 
               "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", 
             "\[IndentingNewLine]", ",", 
             RowBox[{"PlotRange", " ", "\[Rule]", " ", 
              RowBox[{"(*", "2", "*)"}], " ", "glConstDynPlotRange"}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}]}], 
            "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "g"}], 
          "\[IndentingNewLine]", "}"}], " ", "]"}]}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "dynamicsGraphicsTable", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dynamicsGraphicsTable", "::", "usage"}], " ", "=", " ", 
     "\"\<Calculate a time indexed table of positions for each of the \
masses\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{"Example", ":", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "ld", ",", " ", "cd", ",", " ", "basisAndMassPoints", ",", " ", 
         "kArray", ",", " ", "matrix", ",", " ", "dynamics", ",", " ", "sc", 
         ",", " ", "qPoint", ",", " ", "omegaIndex", ",", "  ", "lines", ",", 
         "mScalarArray", ",", " ", "numberOfMasses", ",", " ", "pointsData", 
         ",", "dynAtOmegaIndex", ",", " ", "dynMesh", ",", "dynTable"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"basisAndMassPoints", " ", "=", " ", 
         RowBox[{"{", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.6", ",", "1"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"-", "0.4"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"0.3", ",", "3"}], "}"}]}], " ", "}"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"ld", " ", "=", " ", 
         RowBox[{"locDependent", "[", " ", 
          RowBox[{"basisAndMassPoints", ",", " ", "1", ",", 
           RowBox[{"{", "10", "}"}]}], " ", "]"}]}], "  ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"kArray", " ", "=", " ", 
         RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"cd", " ", "=", " ", 
         RowBox[{"calculateCouplings", "[", " ", 
          RowBox[{"ld", ",", " ", "kArray"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"sc", " ", "=", " ", "0.25"}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"qPoint", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"\"\<qMaxVec\>\"", " ", "/.", " ", "ld"}], ")"}], "/", 
          "2"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"matrix", " ", "=", " ", 
         RowBox[{"dynamicsMatrix", "[", " ", 
          RowBox[{"ld", ",", " ", "cd"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynamics", " ", "=", " ", 
         RowBox[{"calcDynamics", "[", " ", 
          RowBox[{"matrix", "[", " ", "qPoint", " ", "]"}], " ", "]"}]}], " ",
         ";", "\[IndentingNewLine]", 
        RowBox[{"omegaIndex", " ", "=", " ", "1"}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynAtOmegaIndex", " ", "=", " ", 
         RowBox[{"dynamics", "[", 
          RowBox[{"[", "omegaIndex", "]"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynMesh", " ", "=", " ", "30"}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynTable", " ", "=", " ", 
         RowBox[{"dynamicsGraphicsTable", "[", 
          RowBox[{
          "ld", ",", " ", "dynAtOmegaIndex", ",", " ", "sc", ",", " ", 
           "qPoint", ",", " ", "dynMesh"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"With", "[", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"n", "=", "1"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"showDynPlot", "[", " ", 
            RowBox[{"dynTable", ",", " ", "n"}], " ", "]"}]}], " ", "]"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Animate", "[", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"showDynPlot", "[", " ", 
           RowBox[{"dynTable", ",", " ", "n"}], " ", "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"n", ",", " ", "1", ",", " ", "dynMesh", ",", " ", "1"}], 
           "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dynamicsGraphicsTable", "[", 
      RowBox[{
      "ld_List", ",", " ", "dynAtOmegaIndex_List", ",", " ", "sc_", ",", " ", 
       "qPoint_List", ",", " ", "dynMesh_Integer"}], " ", "]"}], " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "pointsDataTable", ",", "e", ",", " ", "omega", ",", " ", "lines", 
         ",", " ", "nu", ",", " ", "a", ",", "b", ",", " ", "mScalarArray", 
         ",", " ", "numberOfMasses", ",", " ", "latticeCellOriginIndexes", 
         ",", " ", "mPosFirstCell", ",", "pointsData"}], "}"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a", ",", " ", "b"}], "}"}], ",", "pointsDataTable", ",", 
           "lines", ",", " ", "mScalarArray", ",", " ", "numberOfMasses", ",",
            " ", "latticeCellOriginIndexes", ",", " ", "mPosFirstCell"}], 
          "}"}], "=", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", "\"\<pointsDataTable\>\"", ",", " ", 
            "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", " ", 
            "\"\<numberOfMasses\>\"", ",", " ", 
            "\"\<latticeCellOriginIndexes\>\"", ",", " ", 
            "\"\<mPosFirstCell\>\""}], "}"}], "  ", "/.", " ", "ld"}]}], " ", 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"omega", ",", " ", "e"}], "}"}], " ", "=", " ", 
         "dynAtOmegaIndex"}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"e", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{"e", ",", "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"nu", " ", "=", " ", 
         RowBox[{"2", " ", "Pi", " ", 
          RowBox[{"If", "[", " ", 
           RowBox[{
            RowBox[{"omega", " ", "\[Equal]", " ", "0"}], ",", " ", "1", ",", 
            " ", 
            RowBox[{"1", "/", "omega"}]}], "]"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"pointsData", " ", ":=", " ", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"a", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], " ", "+", " ", 
              RowBox[{"b", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], " ", "\[IndentingNewLine]", 
              "+", " ", 
              RowBox[{"mPosFirstCell", "[", 
               RowBox[{"[", "k", "]"}], "]"}], " ", "\[IndentingNewLine]", 
              "+", " ", 
              RowBox[{"sc", " ", 
               RowBox[{"Re", "[", " ", 
                RowBox[{
                 RowBox[{"e", "[", 
                  RowBox[{"[", " ", "k", " ", "]"}], "]"}], " ", 
                 RowBox[{"E", "^", 
                  RowBox[{"(", 
                   RowBox[{"I", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    RowBox[{"qPoint", " ", ".", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"a", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "+", " ", 
                    RowBox[{"b", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], " ", ")"}]}], "  ", 
                    "-", " ", 
                    RowBox[{"nu", " ", "tau"}]}], " ", ")"}]}], ")"}]}]}], 
                " ", "]"}]}]}], " ", "\[IndentingNewLine]", "&"}], "/@", " ", 
            "latticeCellOriginIndexes"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"k", ",", " ", "numberOfMasses"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"tau", ",", "0", ",", "1", ",", 
             RowBox[{"1", "/", "dynMesh"}]}], "}"}]}], "\[IndentingNewLine]", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"{", " ", 
         RowBox[{
         "pointsData", ",", " ", "mScalarArray", ",", "numberOfMasses", ",", 
          "lines", ",", "dynMesh"}], " ", "}"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "showDynPlot", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showDynPlot", "::", "usage"}], " ", "=", " ", 
     "\"\<showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showDynPlot", "[", 
      RowBox[{
       RowBox[{"{", " ", 
        RowBox[{
        "pointsData_List", ",", " ", "mScalarArray_List", ",", 
         "numberOfMasses_Integer", ",", "lines_List", ",", " ", 
         "dynMesh_Integer"}], " ", "}"}], ",", " ", "n_"}], " ", "]"}], " ", ":=",
      " ", 
     RowBox[{"Show", "[", 
      RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Table", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListPlot", "[", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"pointsData", "[", 
                RowBox[{"[", "k", "]"}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}], "\[IndentingNewLine]", ",", 
              RowBox[{
              "PlotRange", " ", "\[Rule]", " ", "glConstDynPlotRange"}], 
              "\[IndentingNewLine]", ",", 
              RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], 
              "\[IndentingNewLine]", ",", " ", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"Directive", "[", 
                RowBox[{
                 RowBox[{"PointSize", "[", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "/", "glConstMMax"}], "/",
                     "350"}], "]"}], "]"}], ",", 
                 RowBox[{"massColors", "[", "k", "]"}]}], "]"}]}]}], 
             "\[IndentingNewLine]", "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"k", ",", "numberOfMasses"}], "}"}]}], "]"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"Graphics", "[", 
            RowBox[{
            "{", "\[IndentingNewLine]", "lines", "\[IndentingNewLine]", "}"}],
             "]"}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
         "}"}], ",", " ", "1"}], "]"}], "\[IndentingNewLine]", "]"}]}], " ", 
    ";"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.601384568255503*^9, 3.6013846068957133`*^9}, {
   3.601384697696907*^9, 3.6013847654097795`*^9}, 3.601385370746403*^9, {
   3.601385703897458*^9, 3.6013858671947985`*^9}, {3.6013859369007854`*^9, 
   3.6013862565130663`*^9}, {3.601386287618845*^9, 3.601386609852276*^9}, 
   3.6013883021340685`*^9, {3.601388339834225*^9, 3.6013883634195743`*^9}, 
   3.6013895576548805`*^9, 3.6013897858849344`*^9, {3.6013899175164633`*^9, 
   3.6013899237438197`*^9}, {3.6013902884636803`*^9, 3.601390307373762*^9}, {
   3.6013903606908116`*^9, 3.6013903655340886`*^9}, {3.6013904046453257`*^9, 
   3.6013904283296804`*^9}, {3.6013906600559344`*^9, 3.601390689104596*^9}, {
   3.601390728076825*^9, 3.6013907681771183`*^9}, 3.6013908182919846`*^9, {
   3.601390891800189*^9, 3.601390932180499*^9}, {3.6013909695316353`*^9, 
   3.6013909758089943`*^9}, {3.6013910645760717`*^9, 3.601391320952736*^9}, {
   3.601391435270274*^9, 3.6013916772021117`*^9}, 3.6013917100099883`*^9, {
   3.6013917417488036`*^9, 3.601391758067737*^9}, {3.6013919250272865`*^9, 
   3.601391931312646*^9}, 3.601391980636467*^9, {3.6013920515635242`*^9, 
   3.6013920860454965`*^9}, {3.601392228344635*^9, 3.6013922300747347`*^9}, {
   3.6013922885550795`*^9, 3.6013923711148014`*^9}, {3.601392403747668*^9, 
   3.601392429697152*^9}, {3.601392460009886*^9, 3.6013924618869934`*^9}, 
   3.601392495188898*^9, {3.6013925358982267`*^9, 3.60139256568093*^9}, {
   3.60139267443215*^9, 3.60139267687029*^9}, {3.601392795672085*^9, 
   3.601392812691058*^9}, {3.601487330343955*^9, 3.6014874916991835`*^9}, {
   3.601487744991671*^9, 3.6014877935674496`*^9}, {3.60148964525436*^9, 
   3.6014896667695904`*^9}, {3.6014911727117257`*^9, 3.6014912011403513`*^9}, 
   3.6014913920092688`*^9, {3.6015049201900363`*^9, 3.601504921465109*^9}, {
   3.6015049694438534`*^9, 3.6015051088448267`*^9}, 3.601510158678661*^9, {
   3.601510341001089*^9, 3.6015103715238347`*^9}, {3.6015104088279686`*^9, 
   3.6015107342535815`*^9}, {3.6015107662544117`*^9, 
   3.6015107759769683`*^9}, {3.6015111875295076`*^9, 3.601511306315302*^9}, {
   3.601512394495542*^9, 3.6015124103054466`*^9}, {3.6015124586622124`*^9, 
   3.601512461037348*^9}, {3.6015125348575706`*^9, 3.601512551233507*^9}, {
   3.601512837974908*^9, 3.601512840824071*^9}, 3.6015519253794203`*^9, {
   3.60155212137263*^9, 3.601552138440606*^9}, {3.6015928398373117`*^9, 
   3.6015928406963606`*^9}, {3.601592972262886*^9, 3.601593035706515*^9}, {
   3.601593106344555*^9, 3.6015931439477057`*^9}, {3.601593175770526*^9, 
   3.6015931831749496`*^9}, 3.6015932402212124`*^9, 3.6015933437151318`*^9, {
   3.60159339980434*^9, 3.6015934133541145`*^9}, {3.601593445458951*^9, 
   3.601593483192109*^9}, {3.601593515955983*^9, 3.6015935487328577`*^9}, 
   3.601595231242092*^9, 3.601595401817848*^9, {3.60159658197935*^9, 
   3.6015965875836706`*^9}, 3.601596631546185*^9, {3.6052815582163343`*^9, 
   3.6052815594364557`*^9}, {3.6052827543579407`*^9, 
   3.6052827599364986`*^9}, {3.6053677050090313`*^9, 3.605367705470113*^9}, {
   3.605367736369602*^9, 3.605367736514658*^9}, {3.6055236055003734`*^9, 
   3.6055236247534747`*^9}},
 CellID->454600298]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"tick", ";", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"This", " ", 
        RowBox[{"If", "[", "]"}], " ", "is", " ", "effectively", " ", "my", 
        " ", "Initialization"}], " ", "\[RuleDelayed]", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"{", "}"}], " ", 
         RowBox[{"block", ".", "  ", "Done"}], " ", "with", " ", "a", " ", 
         "variable", " ", "so", " ", "that", " ", "copies", " ", "of", " ", 
         "the", " ", "output", " ", "cell", " ", 
         RowBox[{"won", "'"}], "t", " ", "re"}], "-", 
        RowBox[{"execute", " ", "their", " ", "Initialization", " ", 
         RowBox[{"cells", ".", "  ", "This"}], " ", "allows", " ", 
         "\"\<interesting\>\"", " ", "settings", " ", "to", " ", "be", " ", 
         "maintained", " ", "per"}], "-", 
        RowBox[{
        "copy", " ", "of", " ", "the", " ", "output", " ", "cell"}]}]}], ",", 
      " ", 
      RowBox[{
      "but", " ", "still", " ", "provide", " ", "an", " ", "Initialization", 
       " ", "block", " ", "for", " ", "the", " ", "primary", " ", "output", 
       " ", 
       RowBox[{"cell", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", " ", 
    RowBox[{"If", " ", "[", " ", 
     RowBox[{"bInitDefaults", ",", 
      RowBox[{"(", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"u", " ", "=", " ", 
         RowBox[{"Flatten", "[", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], "}"}], 
           ",", " ", "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
         RowBox[{"locDependent", "[", " ", 
          RowBox[{
          "u", ",", " ", "rawNumberOfMasses", ",", "rawArrayOfMasses"}], " ", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"kArray", " ", "=", " ", 
         RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "n", "}"}], ",", 
          RowBox[{
           RowBox[{"n", " ", "=", " ", "2"}], " ", ";", 
           RowBox[{"While", "[", 
            RowBox[{
             RowBox[{"n", "\[LessEqual]", "rawNumberOfMasses"}], ",", 
             RowBox[{
              RowBox[{"kArray", " ", "=", " ", 
               RowBox[{"returnKarrayForAdditionalMassIndex", "[", 
                RowBox[{"kArray", ",", "n"}], "]"}]}], " ", ";", " ", 
              RowBox[{"n", "++"}]}]}], "]"}]}]}], " ", "]"}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"qLoc", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
           "\"\<qMaxVec\>\"", " ", "/.", " ", 
            "parameterLocatorDependencies"}], ")"}], "/", "2"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"qPlaneLoc", " ", "=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"couplingData", " ", "=", " ", 
         RowBox[{"calculateCouplings", "[", " ", 
          RowBox[{"parameterLocatorDependencies", ",", " ", "kArray"}], " ", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshMatrix", ":", " ", 
           RowBox[{"dependent", " ", "on"}], ":", " ", 
           "parameterLocatorDependencies"}], ",", " ", "couplingData"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"matrix", " ", "=", " ", 
         RowBox[{"dynamicsMatrix", "[", " ", 
          RowBox[{"parameterLocatorDependencies", ",", " ", "couplingData"}], 
          " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshDynamics", ":", " ", 
           RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
          "qLoc", ","}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"dynamics", " ", "=", " ", 
         RowBox[{"calcDynamics", "[", " ", 
          RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}]}], " ", 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshDynPlot", ":", " ", 
           RowBox[{"dependent", " ", "on", " ", "dynamics"}]}], ",", " ", 
          "omegaIndex", ",", " ", "scale"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"dynPlot", " ", "=", " ", 
         RowBox[{"dynamicsGraphicsTable", "[", " ", 
          RowBox[{"parameterLocatorDependencies", ",", " ", 
           RowBox[{"dynamics", "[", 
            RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale", ",", 
           " ", "qLoc", ",", " ", "dynMeshSize"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshFreqPlot", ":", " ", 
           RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
          "freqMeshSize"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"freqPlot", " ", "=", " ", 
         RowBox[{"frequencyPlotCalc", "[", " ", 
          RowBox[{
          "parameterLocatorDependencies", ",", " ", "matrix", ",", " ", 
           "freqMeshSize"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"bInitDefaults", " ", "=", " ", "False"}], " ", ";"}], 
       "\[IndentingNewLine]", ")"}], ","}], "]"}], " ", ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "This", " ", "is", " ", "the", " ", "main", " ", "panel", " ", 
      "display"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"Dynamic", "@", 
     RowBox[{"Switch", "[", " ", 
      RowBox[{
      "tabNumber", ",", "\[IndentingNewLine]", "dynTab", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", " ", "[", " ", 
          RowBox[{"bRefreshMatrix", ",", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"matrix", " ", "=", " ", 
              RowBox[{"dynamicsMatrix", "[", " ", 
               RowBox[{
               "parameterLocatorDependencies", ",", " ", "couplingData"}], 
               " ", "]"}]}], " ", ";", 
             RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
             RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";", 
             " ", 
             RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
            ")"}], ","}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", " ", 
          RowBox[{"bRefreshDynamics", ",", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"dynamics", " ", "=", " ", 
              RowBox[{"calcDynamics", "[", " ", 
               RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}]}], 
             " ", ";", 
             RowBox[{"bRefreshDynamics", " ", "=", " ", "False"}], " ", ";", 
             RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}]}], ")"}], 
           ","}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", " ", 
          RowBox[{"bRefreshDynPlot", ",", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"dynPlot", " ", "=", " ", 
              RowBox[{"dynamicsGraphicsTable", "[", " ", 
               RowBox[{"parameterLocatorDependencies", ",", " ", 
                RowBox[{"dynamics", "[", 
                 RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale", 
                ",", " ", "qLoc", ",", "dynMeshSize"}], " ", "]"}]}], " ", 
             ";", 
             RowBox[{"bRefreshDynPlot", " ", "=", " ", "False"}]}], ")"}], 
           ","}], "]"}], " ", ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"showDynPlot", "[", " ", 
          RowBox[{"dynPlot", ",", " ", "tauSliderValue"}], " ", "]"}]}], 
        "\[IndentingNewLine]", ")"}], ",", "\[IndentingNewLine]", "freqTab", 
       ",", "\[IndentingNewLine]", 
       RowBox[{"(", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", " ", "[", " ", 
          RowBox[{"bRefreshMatrix", ",", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"matrix", " ", "=", " ", 
              RowBox[{"dynamicsMatrix", "[", " ", 
               RowBox[{
               "parameterLocatorDependencies", ",", " ", "couplingData"}], 
               " ", "]"}]}], " ", ";", 
             RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
             RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";", 
             " ", 
             RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
            ")"}], ","}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"bRefreshFreqPlot", ",", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"freqPlot", " ", "=", " ", 
              RowBox[{"frequencyPlotCalc", "[", " ", 
               RowBox[{
               "parameterLocatorDependencies", ",", " ", "matrix", ",", " ", 
                "freqMeshSize"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
             RowBox[{"bRefreshFreqPlot", " ", "=", " ", "False"}]}], " ", 
            ")"}], ","}], " ", "]"}], " ", ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"showFreqPlot", "[", " ", 
          RowBox[{"qPlaneLoc", ",", " ", "freqPlot"}], " ", "]"}]}], 
        "\[IndentingNewLine]", ")"}], ",", "\[IndentingNewLine]", "_", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"LocatorPane", "[", " ", 
        RowBox[{
         RowBox[{"Dynamic", "[", 
          RowBox[{"u", ",", 
           RowBox[{
            RowBox[{"(", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"u", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], "<", "3"}], ",", " ", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Flatten", "[", " ", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], 
                    "}"}], ",", " ", "1"}], "]"}], ",", " ", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{
                   "cap", " ", "the", " ", "number", " ", "of", " ", 
                    "Locators", " ", "at", " ", "5"}], ",", " ", 
                   RowBox[{
                   "so", " ", "the", " ", "selection", " ", "Pane", " ", 
                    RowBox[{"doesn", "'"}], "t", " ", "start", " ", 
                    "truncating", " ", 
                    RowBox[{"the", " ", "'"}], "to", " ", 
                    RowBox[{"neighbouring", "'"}], " ", "SetterBar"}]}], " ", 
                  "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"If", "[", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], " ", ">", " ", "7"}], ",", " ", 
                   RowBox[{"Take", "[", 
                    RowBox[{"#", ",", "7"}], "]"}], ",", " ", "#"}], "]"}]}], 
                " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"Module", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"rm", ",", "km"}], "}"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"rm", " ", "=", " ", 
                  RowBox[{"First", "@", 
                   RowBox[{"Dimensions", "[", "rawArrayOfMasses", "]"}]}]}], 
                 " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"If", " ", "[", 
                  RowBox[{
                   RowBox[{"rm", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "rawArrayOfMasses"}], " ", "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{"rawArrayOfMasses", " ", "=", " ", 
                    RowBox[{"Take", "[", " ", 
                    RowBox[{"rawArrayOfMasses", ",", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "rawArrayOfMasses", " ", "if", " ", 
                    "required"}], "*)"}], "\[IndentingNewLine]", 
                   RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"rm", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{
                    "rawArrayOfMasses", ",", " ", "glConstDefaultMass"}], 
                    "]"}], " ", ";", " ", 
                    RowBox[{"rm", "++"}]}]}], " ", "]"}]}], 
                  "\[IndentingNewLine]", "]"}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"km", " ", "=", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], " ", "//", " ", 
                   "Max"}]}], " ", ";", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{"If", " ", "[", 
                  RowBox[{
                   RowBox[{"km", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "kArray"}], " ", "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"Select", "[", 
                    RowBox[{"kArray", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "\[LessEqual]", "  ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], "&"}], 
                    ")"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "kArray", " ", "if", " ", "required"}], 
                    "*)"}], "\[IndentingNewLine]", 
                   RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"km", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"km", "++"}], " ", ";", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnKarrayForAdditionalMassIndex", "[", 
                    RowBox[{"kArray", ",", "km"}], "]"}]}]}]}], " ", "]"}]}], 
                  " ", "\[IndentingNewLine]", "]"}]}]}], 
               "\[IndentingNewLine]", "]"}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                "lattice", " ", "vector", " ", "end", " ", "points", " ", 
                "to", " ", "be", " ", "too", " ", "close", " ", "to", " ", 
                "the", " ", "origin"}], " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"u", "[", 
                RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", 
               RowBox[{"If", "[", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", " ", 
                   RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "<", " ", 
                  "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                 RowBox[{"glConstLocDefault", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"u", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"u", "[", 
                RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", 
               RowBox[{"If", "[", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ".", " ", 
                   RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], " ", "<", " ", 
                  "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                 RowBox[{"glConstLocDefault", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                 RowBox[{"u", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                "angle", " ", "between", " ", "lattice", " ", "vectors", " ", 
                "get", " ", "too", " ", "small"}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"u", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"u", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "}"}], " ", "=", " ", 
               RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
                RowBox[{
                "u", ",", " ", " ", "glConstMinAngleBetweenLatticeVectors"}], 
                " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"rawNumberOfMasses", " ", "=", " ", 
               RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
               "These", " ", "are", " ", "in", " ", "case", " ", "the", " ", 
                "number", " ", "of", " ", "locators", " ", "were", " ", 
                "changed", " ", "and", " ", "we", " ", "have", " ", "a", " ", 
                "mass", " ", "selected", " ", "that", " ", "is", " ", "now", 
                " ", 
                RowBox[{"invalid", "."}]}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"m1Sel", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{"m1Sel", " ", ">", "rawNumberOfMasses"}], ",", " ", 
                 "1", ",", " ", "m1Sel"}], "]"}]}], " ", ";", 
              "\[IndentingNewLine]", 
              RowBox[{"m2Sel", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{"m2Sel", " ", ">", "rawNumberOfMasses"}], ",", " ", 
                 "1", ",", " ", "m2Sel"}], "]"}]}], " ", ";", 
              "\[IndentingNewLine]", 
              RowBox[{"moSel", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{"moSel", " ", ">", "rawNumberOfMasses"}], ",", " ", 
                 "1", ",", " ", "moSel"}], " ", "]"}]}], " ", ";", 
              "\[IndentingNewLine]", 
              RowBox[{"moSel", " ", "=", " ", 
               RowBox[{"adjustedmoSel", "[", " ", 
                RowBox[{
                "rawNumberOfMasses", ",", " ", "moSel", ",", " ", "m1Sel"}], 
                " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"omegaIndex", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{"omegaIndex", " ", ">", 
                  RowBox[{"(", 
                   RowBox[{"2", "rawNumberOfMasses"}], ")"}]}], ",", " ", "1",
                  ",", " ", "omegaIndex"}], "]"}]}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{
                "Adjust", " ", "these", " ", "for", " ", "Slider", " ", 
                 "display", " ", "in", " ", "case", " ", "m1Sel"}], ",", " ", 
                "m2Sel", ",", " ", 
                RowBox[{
                "or", " ", "moSel", " ", "were", " ", "changed", " ", "just", 
                 " ", 
                 RowBox[{"above", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"k1", " ", "=", " ", 
               RowBox[{"selectVFromKarray", "[", 
                RowBox[{
                "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                 "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
              RowBox[{"k2", " ", "=", " ", 
               RowBox[{"selectVFromKarray", "[", 
                RowBox[{
                "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "2"}], 
                "]"}]}], " ", ";", "\[IndentingNewLine]", 
              RowBox[{"k3", " ", "=", " ", 
               RowBox[{"selectVFromKarray", "[", 
                RowBox[{
                "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "3"}], 
                "]"}]}], " ", ";", "\[IndentingNewLine]", 
              RowBox[{"k4", " ", "=", " ", 
               RowBox[{"selectVFromKarray", "[", 
                RowBox[{
                "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "4"}], 
                "]"}]}], " ", ";", "\[IndentingNewLine]", 
              RowBox[{"k5", " ", "=", " ", 
               RowBox[{"selectOriginVFromKarray", "[", " ", 
                RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], " ",
                 "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
               RowBox[{"locDependent", "[", " ", 
                RowBox[{
                "u", ",", " ", "rawNumberOfMasses", ",", "rawArrayOfMasses"}],
                 " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"Reset", " ", "in", " ", "case", " ", "a"}], ",", 
                RowBox[{"or", " ", "b", " ", "changed"}], ",", " ", 
                RowBox[{
                "and", " ", "the", " ", "last", " ", "selected", " ", "value",
                  " ", "is", " ", "now", " ", "out", " ", "of", " ", 
                 RowBox[{"range", "."}]}]}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"qLoc", " ", "=", " ", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                 "\"\<qMaxVec\>\"", "/.", "parameterLocatorDependencies"}], 
                 " ", ")"}], "/", "2"}]}], "  ", ";", "\[IndentingNewLine]", 
              RowBox[{"qPlaneLoc", " ", "=", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"couplingData", " ", "=", " ", 
               RowBox[{"calculateCouplings", "[", " ", 
                RowBox[{"parameterLocatorDependencies", ",", " ", "kArray"}], 
                " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"tick", "=", 
               RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"Why", " ", 
            RowBox[{"doesn", "'"}], "t", " ", "Alt"}], "-", 
           RowBox[{
           "click", " ", "to", " ", "remove", " ", "existing", " ", "Locator",
             " ", "refresh", " ", "this", " ", 
            RowBox[{"plot", "?", "  ", 
             RowBox[{"Workaround", ":", " ", 
              RowBox[{
              "move", " ", "one", " ", "of", " ", "the", " ", "other", " ", 
               "locators", " ", "to", " ", "refresh"}]}]}]}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"plotSprings", "[", 
          RowBox[{
          "u", ",", " ", "parameterLocatorDependencies", ",", "couplingData", 
           ",", "m1Sel", ",", " ", "m2Sel", ",", " ", "moSel"}], "]"}], " ", 
         ",", "\[IndentingNewLine]", 
         RowBox[{"LocatorAutoCreate", "\[Rule]", "True"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
        "\[IndentingNewLine]", "]"}]}], " ", 
      RowBox[{"(*", "LocatorPane", "*)"}], "\[IndentingNewLine]", "]"}]}]}], 
   " ", 
   RowBox[{"(*", "Switch", "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "Here", " ", "is", " ", "the", " ", "declaration", " ", "of", " ", "the",
       " ", "dynamics"}], ",", " ", 
     RowBox[{
     "the", " ", "controls", " ", "for", " ", "which", " ", "are", " ", "in", 
      " ", "this", " ", "first", " ", "\"\<variable\>\"", " ", 
      RowBox[{"declaration", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
   ",", "\[IndentingNewLine]", 
   RowBox[{"TabView", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<dynamics\>\"", " ", "\[Rule]", "  ", 
        RowBox[{"Column", "[", " ", 
         RowBox[{"{", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Dynamic", "@", 
            RowBox[{"Row", "[", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"OverVector", "[", 
                RowBox[{"Style", "[", 
                 RowBox[{"\"\<q\>\"", ",", "Italic", ",", " ", "10"}], "]"}], 
                "]"}], ",", "\[IndentingNewLine]", "\"\< = \>\"", ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "qm", "}"}], ",", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"qm", " ", "=", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", "  ", "/.", 
                    "parameterLocatorDependencies"}], ")"}]}], " ", ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Slider2D", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"qLoc", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"qLoc", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", 
                    RowBox[{"(*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.01", ",", "0.01"}], "}"}], ",", " ", "qm"}], 
                    "}"}], "*)"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", " ", "qm"}], ")"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], 
                    "\[IndentingNewLine]", ",", " ", 
                    RowBox[{"ImageSize", " ", "\[Rule]", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"150", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}], " ", "&"}], ")"}], 
                    " ", "@", " ", "qm"}]}]}], "\[IndentingNewLine]", 
                   "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", " ", 
               "\[IndentingNewLine]", 
               RowBox[{"Style", "[", 
                RowBox[{"\"\< 2 \[Pi] \>\"", ",", " ", "10"}], "]"}], ",", 
               "  ", 
               RowBox[{"Style", "[", 
                RowBox[{
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"(", 
                   RowBox[{"NumberForm", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"qLoc", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "Pi"}], ")"}]}], " ", "//", " ", 
                    "MatrixForm"}], ")"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
                  "]"}], ",", " ", "10"}], "]"}]}], "\[IndentingNewLine]", 
              "}"}], "]"}]}], ",", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"Style", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"Text", "@", "\"\<number of time intervals \>\""}], 
                ",", "\[IndentingNewLine]", 
                RowBox[{"Manipulator", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"dynMeshSize", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"dynMeshSize", " ", "=", " ", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "14", ",", " ", "4", ",", " ", "30", ",", 
                    " ", "IntegerQ"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"4", ",", "30", ",", "1"}], "}"}], ",", 
                  RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                  RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                  RowBox[{"AppearanceElements", "\[Rule]", 
                   RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
                "\"\< \>\"", ",", " ", 
                RowBox[{"Dynamic", "[", "dynMeshSize", "]"}]}], " ", 
               "\[IndentingNewLine]", "}"}], "]"}], ",", 
             "\[IndentingNewLine]", "10"}], "]"}], ",", "\[IndentingNewLine]",
            "\[IndentingNewLine]", 
           RowBox[{"Style", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "Text", "@", "\"\<time, normalized to one period, \>\""}], 
                ",", 
                RowBox[{"Style", "[", 
                 RowBox[{"\"\<t\>\"", ",", "Italic"}], "]"}], ",", 
                "\"\</\>\"", ",", 
                RowBox[{"Style", "[", 
                 RowBox[{"\"\<T\>\"", ",", "Italic"}], "]"}], ",", 
                "\"\< = \>\"", ",", " ", 
                RowBox[{"Dynamic", "[", 
                 RowBox[{"N", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"tauSliderValue", "-", "1"}], ")"}], "/", 
                   "dynMeshSize"}], "]"}], "]"}]}], "}"}], "]"}], 
             "\[IndentingNewLine]", ",", "10"}], "]"}], ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"Row", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"Manipulator", "[", 
               RowBox[{
                RowBox[{"Dynamic", "[", 
                 RowBox[{"tauSliderValue", ",", 
                  RowBox[{
                   RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"tauSliderValue", " ", "=", " ", "#"}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                 "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", 
                  RowBox[{"dynMeshSize", "+", "1"}], ",", "1"}], "}"}], ",", 
                RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                RowBox[{"ContinuousAction", "\[Rule]", "True"}], ",", 
                RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"AppearanceElements", " ", "\[Rule]", " ", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<StepLeftButton\>\"", ",", "\"\<PlayPauseButton\>\"", 
                   ",", "\"\<StepRightButton\>\"", ",", 
                   "\"\<FasterSlowerButtons\>\"", ",", 
                   "\"\<DirectionButton\>\""}], "\[IndentingNewLine]", 
                  "}"}]}]}], "\[IndentingNewLine]", "]"}]}], " ", 
             "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{",", " ", 
              RowBox[{"ImageSize", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"200", ",", "60"}], "}"}]}]}], "*)"}], 
            "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Style", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{"Text", "@", "\"\<oscillation scale factor:\>\""}], 
               "}"}], "]"}], "\[IndentingNewLine]", ",", "10"}], "]"}], ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"Style", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Manipulator", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"scale", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"scale", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.05", ",", " ", "0.05", ",", " ", "1"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0.05", ",", "1"}], "}"}], ",", 
                  RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                  RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                  RowBox[{"AppearanceElements", "\[Rule]", 
                   RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
                "\[IndentingNewLine]", "\"\< \>\"", ",", "  ", 
                RowBox[{"Dynamic", "[", 
                 RowBox[{"(", 
                  RowBox[{"NumberForm", "[", 
                   RowBox[{"scale", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
                 "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], ",", 
             "\[IndentingNewLine]", "10"}], "]"}], "\[IndentingNewLine]", ",",
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Text", "@", "\"\<angular frequency \[Omega](\>\""}], 
                ",", 
                RowBox[{"Style", "[", 
                 RowBox[{"\"\<q\>\"", ",", "Italic"}], "]"}], ",", 
                RowBox[{"Text", "@", "\"\<), selection: \>\""}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Dynamic", "@", 
                 RowBox[{"SetterBar", "[", 
                  RowBox[{
                   RowBox[{"Dynamic", "[", 
                    RowBox[{"omegaIndex", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"omegaIndex", "=", "#"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", "rawNumberOfMasses"}], "]"}]}], " ", 
                  "]"}]}]}], "\[IndentingNewLine]", "}"}], " ", "]"}], ",", 
             "10"}], "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "}"}], "]"}]}], " ", 
       RowBox[{"(*", " ", "Column", " ", "*)"}], "\[IndentingNewLine]", ",", 
       RowBox[{
       "\"\<\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))\>\"", 
        " ", "\[Rule]", "  ", 
        RowBox[{"Column", "[", " ", 
         RowBox[{
         "{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Style", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"Text", "@", "\"\<number of mesh intervals \>\""}], 
                ",", "\[IndentingNewLine]", 
                RowBox[{"Manipulator", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"freqMeshSize", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"freqMeshSize", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "12", ",", " ", "2", ",", " ", "30", ",", 
                    " ", "EvenQ"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "30", ",", "2"}], "}"}], ",", 
                  RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                  RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                  RowBox[{"AppearanceElements", "\[Rule]", 
                   RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
                "\"\< \>\"", ",", " ", 
                RowBox[{"Dynamic", "[", "freqMeshSize", "]"}]}], " ", 
               "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", 
             ",", "10"}], "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]",
            ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"LocatorPane", "[", 
            RowBox[{
             RowBox[{"Dynamic", "[", "qPlaneLoc", 
              RowBox[{"(*", 
               RowBox[{",", " ", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"qPlaneLoc", " ", "=", " ", "#"}], ";", " ", 
                  RowBox[{"tick", "=", 
                   RowBox[{
                    RowBox[{"Not", "[", "tick", "]"}], " ", "&"}]}]}], 
                 ")"}]}], "*)"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Lighter", "@", "Gray"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Polygon", "[", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    ")"}], "\[IndentingNewLine]", " ", "]"}], ",", 
                    "\[IndentingNewLine]", "Black", ",", 
                    RowBox[{"Line", "[", "qPlaneLoc", "]"}]}], 
                   "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                  " ", 
                  RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    "/", "2"}]}], "\[IndentingNewLine]", ",", 
                  RowBox[{"ImageSize", " ", "\[Rule]", "  ", 
                   RowBox[{"200", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}]}]}], 
                 "\[IndentingNewLine]", "]"}], " ", "&"}], " ", "@", " ", 
               RowBox[{"(", 
                RowBox[{
                "\"\<qMaxVec\>\"", " ", "/.", 
                 "parameterLocatorDependencies"}], ")"}]}], 
              "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
             "\[IndentingNewLine]", 
             RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
            "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "}"}], " ",
          "]"}]}], "\[IndentingNewLine]", ",", " ", 
       RowBox[{"\"\<parameters\>\"", "\[Rule]", 
        RowBox[{"Grid", "[", " ", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Text", "[", "\"\<mass: \>\"", "]"}], ",", " ", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Dynamic", "@", 
                   RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"m1Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m1Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"moSel", " ", "=", " ", 
                    RowBox[{"adjustedmoSel", "[", " ", 
                    RowBox[{
                    "rawNumberOfMasses", ",", " ", "moSel", ",", " ", 
                    "m1Sel"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", " ", "]"}]}], "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
                 "}"}], "]"}], "\[IndentingNewLine]", ",", "10"}], "]"}], ",",
              "\[IndentingNewLine]", 
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"massValue", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.25", ",", " ", "0.25", ",", " ", 
                    "glConstMMax"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"rawArrayOfMasses", "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "=", "massValue"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
                    RowBox[{"(", 
                    RowBox[{"parameterLocatorDependencies", " ", "/.", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"\"\<mScalarArray\>\"", ",", " ", "_"}], "]"}], 
                    " ", "\[RuleDelayed]", " ", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", ",", " ", "rawArrayOfMasses"}], 
                    "]"}]}], ")"}]}], " ", ")"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{"0.25", ",", 
                    RowBox[{"Dynamic", "@", "glConstMMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                   "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                  "\"\< \>\"", ",", 
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"NumberForm", "[", 
                    RowBox[{"massValue", ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}]}], "]"}], "]"}]}], 
                 "\[IndentingNewLine]", "}"}], "]"}], ",", 
               "\[IndentingNewLine]", "10"}], "]"}]}], "\[IndentingNewLine]", 
            "}"}], "\[IndentingNewLine]", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Text", "@", "\"\<\\n\>\""}], ",", " ", "\"\<\>\""}], 
            "}"}], "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Text", "[", 
              RowBox[{"Style", "[", 
               RowBox[{"\"\<coupling to neighboring: \>\"", " ", ",", "10"}], 
               "]"}], "]"}], ",", " ", "\[IndentingNewLine]", 
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Dynamic", "@", 
                RowBox[{"If", " ", "[", " ", 
                 RowBox[{
                  RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"m2Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m2Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
                  RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
                 "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
               "10"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
           "\[IndentingNewLine]", ",", " ", 
           RowBox[{
           "{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", " ", 
                 RowBox[{
                  RowBox[{"Text", "@", "\"\<horizontal: \>\""}], ",", 
                  RowBox[{"kLable", "[", "1", "]"}], ",", " ", "\"\< || \>\"",
                   ",", " ", 
                  RowBox[{"OverVector", "[", 
                   RowBox[{"Style", "[", 
                    RowBox[{"\"\<a\>\"", ",", "Italic"}], "]"}], "]"}], ",", 
                  "\"\< \>\""}], "}"}], "]"}], "\[IndentingNewLine]", ",", 
               "10"}], "]"}], "\[IndentingNewLine]", ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k1", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k1", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1", ",", " ", "k1"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                   "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                  "\[IndentingNewLine]", "\"\< \>\"", ",", 
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"NumberForm", "[", 
                    RowBox[{"k1", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                 "\[IndentingNewLine]", "}"}], "]"}], ",", 
               "\[IndentingNewLine]", "10"}], "]"}]}], "\[IndentingNewLine]", 
            "}"}], "\[IndentingNewLine]", ",", " ", 
           RowBox[{
           "{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", " ", 
                 RowBox[{
                  RowBox[{"Text", "@", "\"\<vertical: \>\""}], ",", 
                  RowBox[{"kLable", "[", "2", "]"}], ",", " ", "\"\< || \>\"",
                   ",", " ", 
                  RowBox[{"OverVector", "[", 
                   RowBox[{"Style", "[", 
                    RowBox[{"\"\<b\>\"", ",", "Italic"}], "]"}], "]"}], ",", 
                  "\"\< \>\""}], "}"}], "]"}], "\[IndentingNewLine]", ",", 
               "10"}], "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
             ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k2", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k2", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "2", ",", " ", "k2"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                   "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                  "\"\< \>\"", ",", 
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"NumberForm", "[", 
                    RowBox[{"k2", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                 "\[IndentingNewLine]", "}"}], "]"}], " ", ",", 
               "\[IndentingNewLine]", "10"}], "]"}]}], "\[IndentingNewLine]", 
            "}"}], "\[IndentingNewLine]", ",", " ", 
           RowBox[{
           "{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", " ", 
                 RowBox[{
                  RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
                  RowBox[{"kLable", "[", "3", "]"}], ",", " ", 
                  "\"\< || (\>\"", ",", "  ", 
                  RowBox[{"OverVector", "[", 
                   RowBox[{"Style", "[", 
                    RowBox[{"\"\<b\>\"", ",", "Italic"}], "]"}], "]"}], ",", 
                  " ", "\"\< + \>\"", ",", " ", 
                  RowBox[{"OverVector", "[", 
                   RowBox[{"Style", "[", 
                    RowBox[{"\"\<a\>\"", ",", "Italic"}], "]"}], "]"}], ",", 
                  " ", "\"\<) \>\""}], "}"}], "]"}], "\[IndentingNewLine]", 
               ",", "10"}], "]"}], "\[IndentingNewLine]", ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k3", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k3", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "3", ",", " ", "k3"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                   "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                  "\"\< \>\"", ",", 
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"NumberForm", "[", 
                    RowBox[{"k3", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                 "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", 
               ",", "10"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
           "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", " ", 
                 RowBox[{
                  RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
                  RowBox[{"kLable", "[", "4", "]"}], ",", " ", 
                  "\"\< || (\>\"", ",", "  ", 
                  RowBox[{"OverVector", "[", 
                   RowBox[{"Style", "[", 
                    RowBox[{"\"\<b\>\"", ",", "Italic"}], "]"}], "]"}], ",", 
                  " ", "\"\< - \>\"", ",", " ", 
                  RowBox[{"OverVector", "[", 
                   RowBox[{"Style", "[", 
                    RowBox[{"\"\<a\>\"", ",", "Italic"}], "]"}], "]"}], ",", 
                  " ", "\"\<) \>\""}], "}"}], "]"}], "\[IndentingNewLine]", 
               ",", "10"}], "]"}], "\[IndentingNewLine]", ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k4", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k4", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "4", ",", " ", "k4"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                   "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                  "\"\< \>\"", ",", 
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"NumberForm", "[", 
                    RowBox[{"k4", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                 "\[IndentingNewLine]", "}"}], "]"}], ",", 
               "\[IndentingNewLine]", "10"}], "]"}]}], "\[IndentingNewLine]", 
            "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Text", "@", "\"\<\\n\>\""}], ",", " ", "\"\<\>\""}], 
            "}"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Dynamic", "@", 
              RowBox[{"If", "[", " ", 
               RowBox[{
                RowBox[{"rawNumberOfMasses", " ", "\[Equal]", " ", "1"}], 
                "\[IndentingNewLine]", ",", "\"\<\>\"", "\[IndentingNewLine]",
                 ",", " ", 
                RowBox[{"Style", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Row", "[", 
                   RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<coupling from \>\""}], ",", " ", 
                    RowBox[{"Dynamic", "@", 
                    RowBox[{"massLabel", "[", " ", "m1Sel", "]"}]}], ",", 
                    RowBox[{"Text", "@", "\"\< to: \>\""}]}], "}"}], "]"}], 
                  "\[IndentingNewLine]", ",", " ", "10"}], "]"}]}], 
               "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"Switch", "[", 
               RowBox[{
               "rawNumberOfMasses", ",", "\[IndentingNewLine]", "1", ",", 
                "\"\<\>\"", ",", "\[IndentingNewLine]", "2", ",", " ", 
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "@", 
                   RowBox[{"massLabel", "[", " ", 
                    RowBox[{"First", "@", 
                    RowBox[{"Delete", "[", " ", 
                    RowBox[{
                    RowBox[{"Range", "[", "2", "]"}], ",", " ", "m1Sel"}], 
                    "]"}]}], " ", "]"}]}], ",", " ", "10"}], "]"}], ",", 
                "\[IndentingNewLine]", "_", ",", " ", 
                RowBox[{"Dynamic", "@", 
                 RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Dynamic", "[", 
                    RowBox[{"moSel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"moSel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                     " ", 
                    RowBox[{"(", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}], ",", 
                    "m1Sel"}], "]"}], ")"}]}], ")"}]}], "\[IndentingNewLine]",
                   "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Dynamic", "@", 
              RowBox[{"If", "[", " ", 
               RowBox[{
                RowBox[{"rawNumberOfMasses", " ", "\[Equal]", " ", "1"}], 
                ",", "\"\<\>\"", ",", 
                RowBox[{"Style", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"kLable", "[", "5", "]"}], ",", " ", 
                    "\"\<: \>\""}], "}"}], "]"}], ",", " ", "10"}], "]"}]}], 
               "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"If", "[", " ", 
               RowBox[{
                RowBox[{"rawNumberOfMasses", " ", "\[Equal]", " ", "1"}], 
                ",", "\"\<\>\"", ",", "\[IndentingNewLine]", 
                RowBox[{"Style", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", 
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k5", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k5", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKarrayOriginElement", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "moSel", ",", " ", 
                    "k5"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    ",", "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "@", 
                    RowBox[{"NumberForm", "[", " ", 
                    RowBox[{"k5", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}], ",", 
                  "\[IndentingNewLine]", "10"}], "]"}]}], 
               "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
            "}"}]}], "\[IndentingNewLine]", "}"}], " ", "]"}]}]}], " ", 
      RowBox[{"(*", "Grid", "*)"}], "\[IndentingNewLine]", "}"}], 
     "\[IndentingNewLine]", ",", " ", 
     RowBox[{"Dynamic", "[", 
      RowBox[{"tabNumber", ",", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"tabNumber", " ", "=", " ", "#"}], " ", ";", 
          RowBox[{"tick", "=", 
           RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], "]"}], 
     "\[IndentingNewLine]", ",", " ", 
     RowBox[{"ImageSize", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"250", ",", "350"}], "}"}]}]}], " ", "\[IndentingNewLine]", 
    "]"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "Localized", " ", "variable", " ", "declarations", " ", "using", " ", 
      "ControlType"}], " ", "\[Rule]", " ", 
     RowBox[{"None", " ", 
      RowBox[{"Manipulators", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tick", ",", "False"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qPlaneLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tauSliderValue", ",", "1"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"omegaIndex", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"scale", ",", " ", "0.2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqMeshSize", ",", "12"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynMeshSize", ",", "14"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"matrix", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynamics", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bInitDefaults", ",", " ", "True"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshMatrix", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynamics", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshFreqPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tabNumber", ",", "3"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynTab", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqTab", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parametersTab", ",", " ", "3"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "The", " ", "number", " ", "of", " ", "default", " ", "masses", " ", 
     "are", " ", "coupled", " ", "by", " ", "these", " ", "next", " ", "four",
      " ", 
     RowBox[{"variables", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"rawNumberOfMasses", ",", " ", "3"}], "}"}], ",", " ", 
       "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"mLocDefault", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.9", ",", "0.7"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.4", ",", " ", "1.2"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1.3", ",", " ", "1.4"}], "}"}]}], "}"}]}], "}"}], ",", 
       " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"rawArrayOfMasses", ",", " ", 
         RowBox[{"{", 
          RowBox[{"10", ",", " ", "15", ",", " ", "20"}], "}"}]}], "}"}], ",",
        " ", "None"}], "}"}]}], "*)"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawNumberOfMasses", ",", " ", "1"}], "}"}], ",", " ", "None"}],
     "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mLocDefault", ",", " ", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"0.9", ",", "0.7"}], "}"}], 
        RowBox[{"(*", 
         RowBox[{",", 
          RowBox[{"{", 
           RowBox[{"0.4", ",", " ", "1.2"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1.3", ",", " ", "1.4"}], "}"}]}], "*)"}], "}"}]}], "}"}], 
     ",", " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawArrayOfMasses", ",", " ", 
       RowBox[{"{", "10", 
        RowBox[{"(*", 
         RowBox[{",", " ", "15", ",", " ", "20"}], "*)"}], "}"}]}], "}"}], 
     ",", " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"moSel", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"pick", " ", "anything", " ", "that", " ", 
     RowBox[{"isn", "'"}], "t", " ", "m1Sel"}], " ", "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m1Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m2Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"kArray", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], " ", 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"u", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parameterLocatorDependencies", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"couplingData", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstSpringColorsByN", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k1", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k2", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k3", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k4", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k5", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
    RowBox[{"{", "tick", "}"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}], "\[IndentingNewLine]", 
   ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{
  3.6013845596960135`*^9, {3.6013849419158754`*^9, 3.6013850018713045`*^9}, {
   3.6013850794767437`*^9, 3.601385097266761*^9}, {3.601385134804908*^9, 
   3.6013851913481417`*^9}, 3.601385299290316*^9, {3.601385437846241*^9, 
   3.6013854385522814`*^9}, 3.60138559342614*^9, {3.6013868469728384`*^9, 
   3.6013870381917753`*^9}, 3.6013877675854945`*^9, {3.601388376944348*^9, 
   3.6013883890050373`*^9}, 3.6013884249690948`*^9, {3.601388673194292*^9, 
   3.6013886824388213`*^9}, {3.6013891407130327`*^9, 3.6013891464263597`*^9}, 
   3.601389335188156*^9, {3.601389712307726*^9, 3.601389713789811*^9}, {
   3.60138980486102*^9, 3.6013899056717863`*^9}, 3.6013901293345785`*^9, {
   3.60139028932573*^9, 3.6013902895987453`*^9}, {3.601390478563554*^9, 
   3.6013904836558447`*^9}, {3.6013905478495164`*^9, 3.601390553751854*^9}, 
   3.601390946273305*^9, {3.601391042574813*^9, 3.601391043374859*^9}, {
   3.6013918894322505`*^9, 3.601391892836445*^9}, {3.601392097848171*^9, 
   3.6013921005103235`*^9}, {3.601392139997582*^9, 3.6013921427507396`*^9}, 
   3.6015052226223345`*^9, {3.6015107568728757`*^9, 3.6015107572798986`*^9}, {
   3.601515719590727*^9, 3.601515719851742*^9}, {3.601551924279357*^9, 
   3.6015520208098783`*^9}, {3.6015520737049036`*^9, 
   3.6015520787571926`*^9}, {3.6015521640750723`*^9, 3.60155218763342*^9}, {
   3.6015525875472937`*^9, 3.601552630947776*^9}, {3.6015925911300864`*^9, 
   3.601592613813384*^9}, {3.6015926462762403`*^9, 3.6015926750798883`*^9}, 
   3.6015927261078067`*^9, {3.601592756429541*^9, 3.6015927749646015`*^9}, {
   3.601592813396799*^9, 3.6015928171110115`*^9}, {3.6015936054051*^9, 
   3.601593616936759*^9}, {3.6015936522817807`*^9, 3.601593659804211*^9}, {
   3.6015936977343807`*^9, 3.601593703482709*^9}, {3.6015938032044134`*^9, 
   3.601593839254475*^9}, {3.6015939055702677`*^9, 3.6015939355059805`*^9}, {
   3.6015940687956038`*^9, 3.601594074351922*^9}, {3.601594145196974*^9, 
   3.6015941714714766`*^9}, {3.6015942162630386`*^9, 3.601594258628462*^9}, {
   3.601594310046403*^9, 3.6015943121155214`*^9}, {3.601594409881113*^9, 
   3.601594438379743*^9}, {3.6015945562274837`*^9, 3.6015945581155915`*^9}, 
   3.601594604665254*^9, {3.6015946540800805`*^9, 3.601594656909242*^9}, {
   3.601594703469905*^9, 3.601594755839901*^9}, {3.6015948057987585`*^9, 
   3.601594991432376*^9}, {3.601595046788542*^9, 3.601595049002669*^9}, {
   3.6015950818715487`*^9, 3.601595181218231*^9}, {3.6015952625988855`*^9, 
   3.6015952890633993`*^9}, 3.6015953542951307`*^9, {3.6015955048957443`*^9, 
   3.6015955051827607`*^9}, {3.60159561566708*^9, 3.601595631144965*^9}, {
   3.601595829788327*^9, 3.6015958783671055`*^9}, {3.6015963343461857`*^9, 
   3.601596523434001*^9}, {3.6015979474234486`*^9, 3.6015979721458626`*^9}, 
   3.601598243986411*^9, {3.601598621801021*^9, 3.601598627504347*^9}, 
   3.603472977821165*^9, {3.603473123827165*^9, 3.603473123946165*^9}, {
   3.605282653220828*^9, 3.605282700979604*^9}, {3.6052827695354586`*^9, 
   3.6052827727827835`*^9}, {3.605366664965774*^9, 3.605366686755089*^9}, {
   3.605366804897087*^9, 3.605366813003339*^9}, {3.605366854156939*^9, 
   3.605366966755313*^9}, {3.60536701793365*^9, 3.605367034380151*^9}, {
   3.605367072406371*^9, 3.605367111800563*^9}, {3.605367148628478*^9, 
   3.6053672266778603`*^9}, {3.605367779047476*^9, 3.6053678896982927`*^9}, {
   3.605367954204419*^9, 3.6053679905957527`*^9}, {3.60536804550947*^9, 
   3.605368053347685*^9}, {3.6055177577729025`*^9, 3.6055177771810126`*^9}, {
   3.605519707005392*^9, 3.605519746962678*^9}, {3.6055197961274896`*^9, 
   3.605520063545785*^9}, {3.6055201752691755`*^9, 3.6055201920861373`*^9}, {
   3.6055202578128967`*^9, 3.605520263618229*^9}, {3.605520455675214*^9, 
   3.605520568176648*^9}, {3.605521352319499*^9, 3.6055213612310085`*^9}, {
   3.605522794078963*^9, 3.6055228639419584`*^9}, {3.605523389253005*^9, 
   3.6055234016467133`*^9}, {3.6055237608512588`*^9, 3.6055237642684546`*^9}, 
   {3.6055237943591757`*^9, 3.605523913784006*^9}, {3.6055239872182064`*^9, 
   3.605524006089286*^9}, {3.6055240403412447`*^9, 3.6055240452955284`*^9}, {
   3.605524110454255*^9, 3.6055241376208086`*^9}, {3.605524248382144*^9, 
   3.605524255519552*^9}, 3.6055243562463136`*^9, {3.605524481762493*^9, 
   3.6055245039377613`*^9}, {3.6055245744577947`*^9, 
   3.6055245871115184`*^9}, {3.605524689388368*^9, 3.6055246898623953`*^9}, {
   3.6055247943653727`*^9, 3.6055248993653784`*^9}, {3.605525077444564*^9, 
   3.6055251116085176`*^9}, {3.6055253501731625`*^9, 
   3.6055254350570183`*^9}, {3.6055255040699654`*^9, 3.605525506208088*^9}, {
   3.6055255736239433`*^9, 3.6055255954521923`*^9}, 3.6055257425096035`*^9},
 CellID->106836794],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{}}, {{{
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.4130444789719152, 2.7569151748438447`*^-18], {Complex[
      0.5861464486009521, -2.825764865181982*^-17], Complex[
      0.8102051226649282, 0.]}}, {
      Complex[0.3140688520221368, 1.8976567723170987`*^-18], {Complex[
      0.8102051226649281, 0.], Complex[-0.5861464486009522, 
      2.8257648651819845`*^-17]}}}, $CellContext`dynMeshSize$$ = 
    14, $CellContext`dynPlot$$ = {CompressedData["
1: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
lQcK3tGRmWfk0f/KHaQZ
     "], {10}, 1, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 14}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 12, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyNvXdUFsnzPYxZURGzYs5xxZwWHVEw55zXhDmBukbMYsIMiopZV8SAAXMY
lJwfHnJUUVHECGYMv/0udXs+U737npd/OKdOn356qqp7qm7d6ao1ad5gu/wm
JiZ+RU1MCvz9f3C1Y9eCzxfy6e+W/OX7rFy1/Z7OVQfPS1Igtx5aYtmPxE9q
h0zvyfs/xQt5a/NOuT96ZKvPj9xJvGgTo+jnyVKPOMQ4RFlHsfHp6hMH+69m
nQ1MblSVHrPXZJTQ5Cb0d9N6ds77nnweo/JrZGRET4sYPr+y+PqaTePttHX2
zVuPEjMk0fpUmSS+fqWzu/Wx/oeThbxr3vMqq7x8PN3eJrPnylXWjl3W8nCn
ZGWeW/IDo3l+obfRP4xJvksShBx621elkPGdfZyQQ29P6k2pMzhfHJsnSzVu
HPv2cwM+Pl2NONDDtEE2lxvV+U0mf7dYq/0u9Lb8YfGiPXcl8fFKj8J+iRaO
KXx+ZVO1nxsOXkgVcujtSIHKB+NiU/n6FY8xpZfeeK/NA73NTimScbO3pB9l
+E6P+hdmJyqVGjQ9fP35dxV6Wxo7p83HmfFCDr11HJ1U8vkaTQ69BWz9Yt9r
WwKbJ0uNbjYsrGvzJDY+Xb1RJKpUxm8pTG5Up08K3lXFPE3IoTevWS2TTUc8
5OOVsetbRXU5x+XpysBqNxyHfNHmgd5qx0RFZtul8vUr3x3XuTUYlSzk0Fuv
eyd+PzhU0o8SW79wmd8N8OePQm+uiUM2TdinyaG3Tje6qi+uJgg59JY41KtG
yzNJbJ4sdfin9rnJV1LY+HR1nIvn6wVKGpMb1eIrpjoseabJobcDGysdO+Io
jVfcLYdWWlovlc+vVDSYF7yoJAs59NblaXxuhbGJfP3KoHHnPV980J4XenO8
n9j86G+SfpSnr+ze/PwUR/p8JfQ2qpRapl/nRCGH3hzPfZz3+lKSkENvZTvX
q/WgYAqbJ0u9dCPguqV7Chufrlaf/NxyQQ0uN6qmB4sc67pOmx96K1ra0e11
+QQ+Xqk55XK/5c6xfH7Fw7/LC6uwaCGH3sI31PtatVU0X79SaPQ5n98WaHLo
LchxRungYTFcP8rsEQ3n9CuCfZci9Ga3fc/v74smCzn0Zmboa/lrryaH3oY2
Xr/MpEwymydL/dL8wglj60Q2Pl1tctB6nZIby+RGNf/ChosPXIoScujNdcWU
mJ1OIXy8MsBl7NbIB/58fqVbzKTCEdMChBx6e9/0vnnyWj5PtuJUJNq56DCj
kENvnZuVn9rwRhzXj5Iw+sn4Cr6JCtYHve1u1j930aRkIYfePt563NPQOEnI
obfPqeEV9k2PZ/NkqYfLhrcdWCeajU9Xr5++0qZYzVAmN6rmYTVmnal1R8j/
6w964+OhNz4/9HboX9eTrfD1Q2+f2PNCb9AP6VOB3qBPyKE3pn8FemP2UqC3
D3r7KtAb8wcFemP+I9bL/A3jFeafmF9h/qxAbx/1/o/1K2y/KNAb21/Qj6Lf
j6+E3vT795XQG9vvQm/sfBB6Y+eJ0Bs7f4Te2Hkl9MbON6E3dh4KvbHzU+iN
nbdCb+x8FnpboT/Phd5w/g/Ne18IvT2j9wXk0NtKer9ADr0NpveRfp4sFe8v
/fh0tTK97/Ryo4r3I+T8fcrGK3j/svmV8fS+hhx6G0Hvd7Z+JZ7iAcihNyuK
H5h+FMQbFJ8IvSE+gRx6Y/GM0BuLf4TeaunjJaE3Fl8JvbF4TOiNxW9Cbyze
E3pj8aHQG4snhd5Y/Cn01kEfrwq9Ib6dmxcPd4HehlE8DDn0NpPiZ8iht7MU
b+vnyVKPUXyuH5+ubqZ4Xi83qj0p/occenOkfIGNVxwov2DzK2GUj0AOvcVS
/sLWrzylfAdy6G0v5UdMP8oYyqco/xJ6Q/4FOfTG8jWhN5bfCb3F6vNBoTeW
Pwq9sXxT6I3lp0JvLJ8VemP5r9Aby5eF3lh+LfTG8nGhN56/Q29j6hft7F1Z
y5eht5j0EsMaWURLef2Q8BOdsp5EsXmy1Bl9lhW6MzlCyuuTzYrZnAj1l/L6
0ZXrOXY64CPl9fX7mVuM9/bh4xX3Oult1857IOX1S7xtYktX95Py+qRRS7b3
+cF/929/W769rnfpICmvv9PY8kvJOiFSXu87qMbLNq9Cpbx+SOagW/08Y6W8
/n5a9VFfBsVIef3cpV2uptWNkvL6DGunW2M2h0l5/XzfFLsEu2Apr/8yKaVK
xeAgKa/P8T1h13eiNF7ZM2vRQZ9pIVJeX3LJZ3f3a6FSXt/3c6p1DdtwKa9/
fbdK36yvEVJe/9b9y5fXwwxSXl91aOK3IuaIf7S8voj5xf5zgmOEHHqb4FQ2
9kCBaCGH3o5fcty5shmfJ0vNMpuzKzErUsrrJ0wa8+TN+ggpr/dbmHb1vH+4
lNc3Sg38YLYunI9Xjl43fZ1xjcvTFbeJF46OH6/ND73ZDb9Qqqo9X0+2UnWK
pYPPYoOU188/d+PA9uWSfpTOlax7JxiMUl5fvtr1m5kemhx6+/n94Lk+P6J4
XqzW/6PpoJEVotg8WWprO99651sZ2Ph0tcfoQ05TQyKY3Kh+KpNWvveccCmv
H1Op6DujXZiU1/9Q/EPP+4RKeX1cG9+jU7dpcujte88H3/dV5PP8HYdkvzk9
o5q2Hujtzx3thkysyp8rV6mdUn6aZbyWz0JviaFng7sujRRy6C3XYvCs0/si
hBx629k0a0OXGuFsniz13bIVk5eMDJXy+ksuPp+WrAuW8vqDsevijkQESnn9
xKMW6/Z1C+DjlfI7zmX8Fe0n5fVOZX4/3KSFJoferBfHrVxzi8+TreR0r+Zk
aamtH3rreq/pov0ORq4fZfJ9n7N2Q7AftbxeWbLCelWtUCGH3gpl1BvknxQk
5fXjnNvNjK8ZwObJUuet9Fpj29RXyuvDauW/fm+Yj5TXdy2bf+iC4nekvH5c
3YoFXWfckPL6Y1f8RkeaXpXy+irmw8Yu8rsn5fUNO207Hz5TWr9ytWLhY44t
wqS8/u3sx+0ddkRy/SjDV41p7zQwSsrrCzwacrmfU5iU128rab9/Q2aQlNc7
VijU88BNPymvP1swdtbqIj5SXn/3wOsKrolXpby+kFv9CQvr/vX/O6/n46E3
Pj/0du5f15Ot8PVDb7vY80Jv0A/P66FPnte/0utf5AvMXiJfaKS3r8gXmD+I
fIH5j1gv8zeRLzD/FPkC82eRL8zX+7/IF9h+EfkC218iX9DvRy2v1+9fLa+3
1u93oTd2Pgi9ddOfJ0Jv7PwRemPnldAbO9+E3th5KPTGzk+htzf681bojZ3P
Qm/f9Oe50BvOf57X433B83q8X3hej/cRz+t/0vuL5/Xx9L7jeT3ejzyvx/uU
5/Vf6P3L83q8r3le34be7zyvRzzA8/pfFD/wvL4CxRs8r0d8wvP6efp4RuiN
xT9CbyxeEnpj8ZXQG4vHhN5Y/Cb0xuI9oTcWHwq9vdTHk0JvLP4UemPxqtAb
4lue11ejeJjn9YifeV7/luJtntf3ofic5/VmFM/zvN6F4n+e13+kfIHn9bmU
X/C83oHyEZ7XI3/heT3yHZ7XIz/ieT3yKZ7XI//ieT3L14TeWH4n9JaozweF
3lj+KPTG8k2hN5afCr2xfFbojeW/Qm/T9fmy0BvLr4XeWD6u4SGUv3t8DVtl
/iW/T+/ABpUde3xTBy8p3qnDyAQh77xu5AHHqx/Vs9+zo49mxAo59GlSyv6T
RXSc0u+f+Z8Jf37Uv1GDI3WSxHjoeYrNN0Oj3do8zZXNVVbWea+W6dDls32U
th7of8PajgPnvtHkPT4t6PCjdqa698HjS47nY9j86Wq0eZnCtWy1+UeneC7+
/uOh+tLf/EVc+1g23qhOdjiVGj4lTsjz9Byq5revd8twRZPDjqZfnqxtqSQo
Pf953ljxvPPbrp01uEay8jP2S88RXU1onV/VTUtuFljwJo49V65qTP9t1rRP
mp7b/7Oey0rK3TsdNuUkiHmg5xe33r7N+hon5B0vn7z1Y+cH1azLETf3+3H8
uZQPSYVHTJ2i6T/PH+KUPQ4L/Ju009YJu8SMvBDSr0e8kI/9R29v1dGeKYtD
KiVwPSsFCh7p3rdqipDnreepUiXrw4dDgSliHthxcHLCuGpNtefKW0+G6he4
99ebxolM/3/HjRWDbUyfafMP7djtxnfv10pgoxPuH3qksvWnq10HldhWeGei
kOfNk6y6VLZwMhkp+aESPqtagTR3bf72j98lOc7OUQ43d9zQ/FIKm9+oZnWv
0KNKL01vlv/IH6jvj74MuzQwhen5k9KidNt97xckC3mfvP2l1HS7EDi9ZJKY
B37lUu+IfaMPKdxPlIkFDjV6+ehv/UzpVdeqcq7al/ZpY7MnFS/fFfUC5B2i
Xq/Xf646c0bNTSnvNft2yFu/ktt+eVKZl6lifvjbLfvWy55HaPNzPgDGt83T
m/q0Qh9b+30C51e7/Md64J+D/JfHni+Xxu2lhJa+1+T6LW098E/TzlMPdSsn
6iBCnkB1B4wfkucn6tAbTY6t7C/qEWorGg/eAvMfZXa15DWLh6SxfZehLN45
vUT5aWlifvjzlZpmlRpFafNDPozqIxjfIW9fqH8UOLtl8gBRN0FeKfgSej1k
KY9nLbr69JDm52Py9qPybJ/9ydgmXD/p6uOZPTb2upzC9JOujqU6DsZ3yjsH
1GcX7nu8ryLqO2pLGg+eBjsfFOPskKLz62nrtMo7f5TW523Vd4OS2XqMapTH
u2AH2zS2Ho3vgfH18s49NWDery5/dXwoxluy8fpz45MyJjx2p+eAJH7eKsfy
FVmxbJu2X7C/PLPPlrhYU5sfctTF2H5R9o4Z4b7wcIJiEvd/8ndqL9p3u78+
/NGqaiLzh1x19fAGpuZ/xjN/0Hg1GD887/2iNPVvusFtAl+PtxXWg9/Fvpv9
Nqjbq5ZJQm5F72WXCk8P3vNK4vpXfvPKTd9u+pDrXzlE9UGM/yPv/ag8qfXH
U/d1mr06AD+n8fhd7Ds/38CaaeeThdyS3uN1m3ru29Q8hfunUqB3/yONTbk/
pCuVqI6J8T3z3u9KzT2Pq05K0fy5LRuP38W+s+h5IsjieIqQ21CccMhL8Tcp
pD0v9lfjkdFJyydL+1GxpnorxrfIey5l276R9k8Spf0uxuv1k67OtRz5x4LT
2np60r6bMKr5h/4OfL/8vb8+lkytuDqJn28K6sIY347eU6lm++/Z/s/5Rn6i
oL6sX49R7Tvkj/KGg5rerCnOsYwr/jhxjbYe7K8KyvslKSEJ/P0i5mfvI2VV
ydujXE5r/t+N8anwu9h3Xm9OWCR5SftIGVWperFX+6V9JPhXI/LiTLU7xVf2
h/yGzUtNYv6Qqz63rvtuV0wCf14l/+utk/yC4sU82F+2nY8N+LNuspB3oPiq
dJEOHo/Ck7k+lfzxo31uOcRz+yo1f/Va3vOrtk7sl9beMf0mbtXmH0nx1Tr7
epUrxfP505XuQa29Kp+JFfJOFF8N3FZ/TqvmsWIe+H/cwlu/rXmRJOQ2FF+9
a7T+0PU+mn/Cz2dXMy4dczeG719lr9XiUtNfx7D1p6sNVrmMGlUyUch7UnxV
9WDdMtZKAj8flKQDTZe779Hm70B++/TK9bEhE/n8RnVzkUrOcy00vVlTfOX1
yn2D7ZNoMQ/88Np228R7xWP5+ay8u1Suerq5Zl/42/nTI/IdPGfkfqKE3Fkc
3qFAvDI2L55Xu9XzGeX487Pq1aBfespm8Kz87vRl/Cu9/nPVNMp32PqV9oOy
kx9PixLzC/6M6eVFOb9r80MOXhPGK3TObyn7WyO7rUlifFvyqy/Ej2L6VBqO
uLj5fVsDt5dS97l9wxYTDGJ+Udfet7fWXw20+Vuz+TF+EMVX7av+6eN7P0GM
b/n/uZ50xWDpkFXHJFLIu1F89eHt8O8FpkWI+eHPJzMXFXW4GC/mh/wo8cQw
vg+d81crL611pE+cGN+O/FYlvhl+F/5fz8y3i21HTT/jKL6yXuJ0st9orp90
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
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1: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
FmfWTv8DQ2HsJQ==
            "]], 
           Polygon[CompressedData["
1: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
An+zY/pRf53t++8s+Z2Ja4DvqxqD9h9cDfwO
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
dktwe3HV7VDeAj6Kzo/RruTXlMspX3s85p7K8X6WDUSfqFx0eIyVQ1PPRXb3
GPUnU+6WrSNbF2xLui8chGxO4hy9elxb5VCbqZsC3p97Tb9DfhftTuT/Xant
v1k8U82jvmz2LupfDj5T32feA+3FTO2D7lHw/sH3osnwa2Sn0W88HTzGPfD7
tL+U5fHMdqbfk1L7lqOi/D34mTp78BPAqZnzwwfgr1BWwz8BO9L2BNrMov7F
4NjeJreOzn1r+Gm54+5SdE6Nc9RaPRznojndr/1XPglOTp3vaY2aUr5FfmDq
/hfAHwenZL6X1M6dZ8rWDoXPzuyTDoGfntu+f0P2LaUDvHnuu61810DwreCc
ZAb1tVPnq3XAYfyfzzpu0X2UNsekXmedd+3/Tbn9QDXlXeCs4LN4NfJHdA+R
DcGnBucb84LXSf7tZPBv1D0FrqDP1qn3qB14czzni4JzbI1lf93RwJR+XgVf
lk2g/zz4e+b84mJ0bsztK3UGx1K2J5777GA/sEZxNXNuNj44DsqeF8L/yJy/
/D0313cu0foF77vuCzqjuksuke+Pfm9R9AM6R8vgd1K3Ff3TwE6p7wLto7+V
7U2JPkp+7xftQ+a76RW511Br9XVwfib+KLgssw8+C50zc9uKbEk5mGKEYkUh
dU6onF73XNnP1uB4pP3VPh9O23PQm0u7sng2ddfXO4TeCmZG/6Cc6EHl5+DU
xPerh+TjUr9XzIz6s6NfUu69gf73imdZZ3ptZj9/fe41Vy5xQdxz+UnlhrL/
JvJNyMdnfnOokrut/Pxc6p+Rb4K/CNalzKf/+qnvehlYLff6aJ3OgU/ILK8E
7095MtqY7mi6u9VCFsBxid9ufox+e1qwLcmmLow5keJm3aJ9sXyyzvi5sU/l
w2nu+4beKORvFWOflg0qBqF/bPC7kmKNYs4Pmd85uivnYY9+o+35wXsiWz1f
/jzze47uaENku+j8pZy6zP7tzzK/U6m/CfTTltIntT/U21Ff2vaAd6b+yEJ8
M8qcE14v/xRzGtnAacrf6G8r7RZGnynfuYi6G9HpEu/9k5DX5P8SxXL4mGB/
Irs+WHn1/++Emf2o7lCnpM7ldN6V18zP/H7TM/oonY8jcs9Zc+8PnpfaVs8F
h6IzGN432Bfpvn+6/B/fGZ44Nium6x56YfCdTu9G1WNMUcy9IjiOD5CfD86R
FNeSzO8GuuvXQL9Jbh80PbPvkg3fAbbSfTm1b5RdyQ/frtwsron842XBZ+RG
sEXU132tGM/X/cH+RX5mebBtzKTdBsZycfC9rSz3XnyKfr/gfR+knBa+qeR3
k1HxvjBU/hM8mjISfja4reQ74XCdXekmthvp6Fvr9W6g84i8N7Id0fZGZJbr
HWVdyfdq3a/7BHPd/c8KvkuOhp8XHGdlM5tLtifZlWxY73LKFUfE2KQzWjd3
/NW9oVPuvFc5+afg9ch2JbazOWXuf260PeX1x+deW9l7Au+R2z6Ue8uWlIcP
p/5Y5Jekzn/axTiiOPdN5tyhMfWtol9qCd4b/Zju7NJRnDpAOVXmGFtPd8nU
cbZx6vOgdTgj5gDyV41y5wZ6N9rOOjSL35ge8zflj02RXZT7fWFV5jcn+ZA2
4Pm5/ZreB24NfifR2bkydWy6Grw197urbOanzHeXY5BNDF439bk4cxwcFeOI
7hEzgm1CtqH9vSbm2Yq/8j86Z32QtY9+Q/cjzV1zbYDssBjrdaf7hfmNTXzP
lB1oHWRjslu9zZ4S/AarO9dLsiv0vkr8lndV7jxeMfcmxenEdyrNRfPrF/NW
zVfz1vuD/MCXwX5Gd8RTpJM7D1ZurHux/PYlwXPXO80JuX2FbGcje9Er2oPe
gf8LIEYb+A==
            "]], 
           Polygon[CompressedData["
1:eJwtmQe4FeXVRs+9c2bOAQVEFMFKVUFQQUCwYcPe/WOMURNbojG2iD2JsbfE
WGKJmugfe4siooKKgF0siKigIFbADiiCgJC1nr15nuHOmm/a+cq7372n+5En
HXBia41//Ffnz8FlrTaWv6/D8xu12u/gMfDXcNGs1U6GX4CXwW3gx6s4fzb8
I+dPht+G+xe1Wk/az+f8t+Du8LrwX+Cp8ELOX8T5D8BfwcNp35z2w+Gn4Gm0
f0f7HvCD8BR4AfxXeAbci/PX5/yz4FfhnvAG8Enw8/Aizq/gE+Hn4AVwI9n2
9+HF3O9o+Bn4I3gpfDw8KX9vK+cP5ffs1FKrbUfnPAv/mvaXaJ9L+wrOHw8v
hQ/l+dvR/gy8DP4NvBt8G/wpfCC8LfwsvAI+E94GHsF2TBHn78L+f2j/jPbD
4Z3gifBy+Fh4V/hKtpnsz2K7iv2naf+R9kPg4fBd8Fz4OHh3+O/w+/Dm8Ebw
I/ACeD94GHwf/AV8ALw1fC88Dz4J3hven+2MIt73APZfpH0l7X+GD4QnwT/B
f4D3ha+DP8zxXg9uYZvXGn12ahl9at86p44pY749keMxM8fEfY+Noe8Ppf1J
9qdybCFtR8Hj4VnwkkaM9ws5/2bmHHTfY85Vx9SxfQT+RRlzyLk0Dt7dvoU/
bo058Jsy5pxz7yF4NM+v8b5fwi/bp2WMuWPvO/lux7JNZP9zjq1sxBrx9zmH
fk/bKvDKvL9z7U9sr7M/gP7pS9v3XPN2a8z5X9F2Bttk9n/kWJP2W+BP4E1z
PV0AT4M3grvBf4Pfg/vC3eHJ9jHz9Sr4V/B03wG+ET4afhluga+ED4UP8x5F
8OHsv0t7W9qvgX8Nz877jYJHwuPgRTzvWvgo+DF4IXwB/At4Ctzg/Ivgg+G3
4CZ8MfzzbK/g2+Hfwa/BdfhW+LfwK/l+D8KnwNPy+vvhk+HP4TXhe+AT4E/h
DvA0+FJ4Qq6/K+Bfwh/C7Wm/Dz4JXjXHQ82YwPh+lO2v034hbcvhXvC78OXN
0KcvOfccuD/8ZhXrY294aM732alfm+V4fQzvCQ+Br4FnwVvD/eCz4dfgPnAP
+8N3gHeFB8FvVLH+d4AHwLM4f1XeZxL8R3gJ3B1+Hv4z/C3cpSU0QW1ocv0m
8Fj4r/CPtPeAJ8MXqL/2cRF8HvvLaO9J+2vw+fBPcG94BnwZ/B3365rPPwf+
gPa14NHw6c3QFLVlM7bezZijar99YF/0SjYmvFyF3nzO/mkc2y/1aD58CrwP
/FTqk5qj9tya83t3eDD8b/jb7N8t4alVrI99U8/UzznwCHgL+zPn27nw/8Gj
8vrj4T3gd7j+O/io1Nt+8Lac3w+9fxJeG94OXgseBfeBt4E3hsfCM+BvaqHh
avmd+XzvtzN8DzwT3j/19cGMd7+Ed4T/C3/t2od3gHtwv6Hcf23uPzr1+PO8
fivfF67Rfm/O53lVxIerc70upr0b7U/Cx7o+qohPF+X6e5L2H+B/GnPgL6rQ
7xtSH25M/d4JHgi/Chfc7yb4GON9Gf11CXwI/Dz8fS00RC2ZC3fK9X18zt92
+b4nwt9UoQ935/p9KX/PhfBBqQc+bwx8Rq7v1eBHUn/m5f3Hw2elXrWBH875
OD31y/l5WjM0VW1Vw9XyDXn+VrR3o3/HwIPhHeGt4UnwOmwbFKEPZ5bhWYxl
9slFcGe4I/yGMRBeG17fWMfWlf1Dyogtxpg32HaDH0g/JXfxGUV4oOeriJHr
FqEhask5GR9W4Vgn2lZ3TbPfYOvYjJgxOJ9vLOkDb1HEGriqDA3aPt/X++mp
huf9X69Cw35WxBxU2/R4vpvvOKoK/zMxn78q26acP6wID6OXWYtzBtJf69Bf
j9LWGx4GD4bvgFeB+8F1+G74JraFXP8d283sl7T3oX0RfAtcwBu3RPs/1RJ4
ODyI65+BB8Lbw1vCE9Q73vcV3vdx3ufnvE/HRvizTWl/ivalqXfzud+N8IIy
9GsOfC28yDGFl8C3Gg/sE7jB9XfB9XyfjvCD8GrwZnAH+AG4Pbwh3Aa+F+4E
D4CXc7//h2tV6Gcr7XfCHfL6L2n/Rz5vU/gL+Dr46tSHgfDG8HOOH9eO4Jxh
nHst7e/WYgwcC+eYc02PcG4ZGqPWuCanVzEnnBsdc/ycb535+wHH/uH4+c7w
Gmxrs13CsXdqMYecS2Mzvuv/9oLX8Dew/wrHRhp74bap5xeX4RFPLkKj1Co9
eO8iYtxZuT58zuXsX1GGBqvFetYPq/AsGxbh6fUyehq9jTHx0jJi1otFxDxj
2U0ZX40pxhbvOb0Wa9Bn6Tn+UoTm6zVc493pz61bYu0bU42tXuO1PnNGxotd
Mkaczd+yJWLHz+DzivA4Y3J9Dc/1c30ZGnhZERqoNhrDjeXGhIfK8CB6ET3M
c2XESGOla/yyMnKYbvk+5jbGwFOLiIHGRj22vvuFMry3GqVW7cv9OjdifW9T
hEdxPavZO2f/qeVeq3c35/AextzTi/D89+X4OdaO+awqYuaORXgQY6me/sQi
Ysyk1MMeRXhQc7v1Uh/N8V6owkPppdbh/ZYaO9n2yHjaJ2Oq+x7bogoPohdx
zbp2x6SfPIxj2xsfna+cvznt7RoRA42Frpk77D/uMYS2NTnnoWZ4BL2COZC5
kPF4bvoHx1cP9WwRMcnYdK4xyLkDL+Ze49XTesRgY7EapBbtBXdqhMaoNT7T
Z0+Et6pHDBlUhUapVXvDazQi5u+f68P+tg821WNk3xiTjc3GRL2yfmpDtivL
yN0GpP714LrHmuF59kx/dVOOp17KmD67Cg1erx4xTm3u4pimXt3TDE1W69Q8
tVrNa9ZDk9QmNWxxEf2ttl0ETy3C833F8y6Gp8Cd1bQyPJfea37O19uaoYVq
YlWFp1Kf5uR8ergZXkpPtQHtj6hpcF9jShWeR94y+/9+uB08yPdrhKfeK+Od
/vI+Y06u79U5/1/wD0V42qoRGr/U+NwS2m/f9ivCU9rH5kCXF+FBzI3UYP2s
ObPabL76RWvERGNj3ZhQhGaqnXqMR4vIsfQepTGqNfTyqSre1/HSc95eRk1i
cean5q7Hwf/K67+uwtNMUJ9bwuvo4T6CN2gJb6eH+Yrrn8580ZqGtY7na1Hb
aAe3cH4rW72InNTc9FHaj9BL0d6miHzWfLyDMTn1ehLPbw+vaI317Po2f/8y
89NxVeSk5qbm4CeU4bn0WnouvZj5VQ2eUIt8Wg94G7x6S3jD38N3FlFDeL2M
nM7czpxuRhk5n7mfOdn8KuaYc+0hjv2Btj+phXm+uaDr2dzEGL+oihxFNmea
mev75byfuaA508QiPLK5lDmoXlVP+WYZHvf6InJeve+Rzch11UdjoznqLUV4
VL2qnvaufJ56oqe+GV5cC69tDm5ebV5rbn5qM3Jp7/8efHYzvGyn7J+R2W5O
q/d9O/2t/v6IZuTYl2S8N/e2BvcT4/FiLeodPzHen7VG/4+top4yvTVqYM6P
H+B3cv48VkVN6sCMN9OqqKlYWxkFH1RG/eSDHG/rFxeWEfv1pHrTZbR/ks8/
pYwa2CEZ362NWZM6CF5Si1qVOdcJqRfmYt7DeXpB3nuvjEfzaB+d/nZQER7I
9WYOPTT139x6EzURnpJ+/ODUU3Oej/k9ezYj13P9PVyGp9bbup5PKyPnOD/n
o7lIW3hJa/jz88qo0Y0sIkeydmdMOizj4/1l1AD2Tr1Qrx1raynWMF5Jfz05
61nWuqwvvZX1I2ud1rSsbf1X/awiJzQXNCc0V1ye4znamFhGTvRYETUT55/x
cJ/sr3vTDx6d8c/YZ03R2qI1EWsj5phHpD8x97QG2wV+sxa1WWuMXuO51h6t
YR6Z/Wlt8/ucPw/Dj1bhx1+F79dDlZGjmKu8BE+sogZ5XPqj9+Gn4QH18Pj9
q/DAnxURj4w/XTNeGe96Zsxz32O90p+MSL94Q/qdnbK/bobXSD9ujDHWqAGu
TTVH7XmcrXc9c/gq8osd9Ib5PHOadfL9OvDbnoA3ggfD61ZRAx4O79wStWFj
pLFyjawPdKsilnXN/N0YZiwbWA9vsVkV9+oLj2vGOxi7etXj3brn+V5vbOyf
9YfN69F35ksbtURMNDa2yXy2kflWh8wvjInGRvvT2Nk285Xn8v3351iXRtQw
rGXs3hK+RL9sbrwrvJG/pYqah+f1yXfwXfY0J6tCP+9I/zIl9f729N9fVVFT
uCHjg/HRPts5+2OzevzeIZm/yUPq4bN2cC2kvxrGsX30eI3os77pt8zd9ZP9
009YuxlSxXF98jaZs3XI8V6zipyuY45ne+63C8f2Y3/bepzfN+s/ek69p55S
b2nO2jn9Suf0f7671+jDR1RxL+dcl3rkyM7FUel3BqSfWjfHw/nm3PqsjPrG
e/TRFfDXZXit6fDfmuG5jH96Lr3YAWVogZqg1htjJySrFcZ0Y7sx29htDfpZ
+Jv8fqNnUPtdw67lYTkezgnnxlqNmBvD83uHObba5Rp3rQ/K9eKYODZPVFHv
MAYYC/YpQxu8v7HGmGRs+DBr876f2qBG6EXGV1FrsSZrrVwNN3+1xqG2+/ue
yXa9xcj8fe2KyE3Naa1tWFMx1zWG6jXGFRFb55ThrR6Hz4T/WEZt3vzYWo4x
xdhiPqy3078PrcdvVBvMcfV67YvIfX0/Y83qef0PZXjLFfDtal+u/5Xwf4xt
jchdzffN/1eWkRtZE7E2Yr21V9YP9M56FHMTcxK9yypZn/gUvroZnkdv+FwR
XmhJFV7Imq613YVl5DJfwTfArakXX8PXNyOGG8uXZn9b47KWYE3B2pf1ha5F
5Ozm0+p5kV7SWH16Gd7WGoK1hN/m/NND6iWPzPmlB9YLn5LjryfVmxpT9ZbL
WyPW6jHNJfWrek9zVHNVPbHeWA0wl9oytcEap16oTfpNayytud5WaUT+Yl/a
p81G9OlPRdRk7GtrUNaarPFY69G/j8785pMyalKeY1uZ+eDA1PvVG5EvNTK/
aldFzerbIvq4yPzLWtgucM8q1vT7tHdsibXuGHxeRA3JsemY8cOcxdzFMfum
yDlSxpzyw+z6LTHXnFPLitAj55o1Lmtd1phWlFHzb8l8ym8B+gVrqWrMgio0
Z8Oc36s1Yk46N40Zxg7n2Kfpj1fCf4c/Tn89v4zNbw5+a7DNGu7dma84N62x
zStiDlp78/e/l/nXiir88r2Zb00to4Ytt0t/bgw0Fu4Gb1LFmnXt+o3D5/67
GbU7a3jfl/HN5+38ffrlj8vwznpovbY5w0M5X76t4hqv9XvRJc3Q2Jl5f7XX
byDWJKxF+G3Eb1zXFZFf++2rJet/czl2TTM8ufPR+sicKmJsm/QrXbM/ZxdR
E3Ut+812Vs7Hlkbk5J7vPdtW8c3prSLyV79FXZfjo4a0NuKdp2V+8E0ZMX7V
etYoq6gXbJ51C9eL33DezfXg/NcztK/H/He+Xpr3s0+Ww/8DSesGZw==
            "]], 
           Polygon[CompressedData["
1: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
pu9De4P2Pw7qGpo=
            "]]}]}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0ckuBEEcB+DSZuw8ACenmTjb9277NoODCweZiyXBiUTixFXwAIwZjOEl
XIi3kHgUXyeS/vX3S+pQ9a/qLZ1sHjeEEI5kSzllHIWQyKW+x1te8541vnM2
G8IbZ1hnwlhe9WnWOMUXTnJCnvVxPnGMVY5yRCr6MB85xDIH+cAPe96xzive
8IyHPEijz3GHfSwyy0w6h/5rrgF+M88qK9KjX7CLJab3kGRCiNK52JjOSV+Y
91sQRwqLbOISm7nMFWnRV9nKNbaxwKK06+vs4AY7eW7DbpaZ4ye/pF//YczI
YQrMMS/b+q61/f/3+gOXUiik
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0bsvQ2EAxuGv2tpJhEEqZlYJrbr3tHpvEbsds/C3EKv7/ZLYWCVMYtCw
skgMjB4x/PK8Jzkn53w5/UurzZVYCGFZ920hpFxcxUO41oDd4jDjiRBy7GWT
hfYQGsyzzog51ewZVjnNCqc4qbI9wRLHWeQYs5q1R1lghnmmGXHIO0eY4iCT
7OObb3tVp33DJLf54ywbXNeHvcgWs3xkD7t1Z3858yWfucMoGcIu89xjgfss
sqQDu8xDVnjEKms6tus8YYOnbHJOZ/Y8z7nAC3565y27fMsD08zo5e9evnON
39zklhLO+OS5jtj///oFu2gylw==
          "]]}, {
         Line[{1090, 1089, 1817, 1107, 1613, 1825, 1130, 1841, 1619, 1823, 
          1148, 1629, 1858, 1168, 1638, 1882, 1192, 1879, 1643, 1897, 1209, 
          1656, 1918, 1227, 1668, 1941, 1251, 1956, 1674, 1938, 1267, 1687, 
          1979, 1287, 2001, 1285, 1313, 1998, 1311, 1334}], 
         Line[{1091, 1609, 1818, 1108, 357, 1131, 1840, 1621, 1844, 1149, 
          1630, 1863, 1169, 1881, 1170, 1193, 1900, 1645, 1896, 1210, 1658, 
          1922, 1228, 1940, 1229, 1252, 1955, 1676, 1960, 1268, 1690, 1983, 
          1288, 2000, 1289, 1314, 2015, 1315, 1335}], 
         Line[{1092, 344, 1110, 1615, 1827, 1132, 1843, 1623, 1848, 1150, 
          1862, 1153, 1172, 1884, 1175, 1194, 1899, 1647, 1906, 1211, 1660, 
          1921, 1231, 1670, 1943, 1253, 1959, 1678, 1965, 1269, 1692, 1982, 
          1291, 2004, 1294, 1316, 2017, 1319, 1336}], 
         Line[{1095, 1610, 1820, 1112, 1832, 1116, 1134, 1625, 1851, 1852, 
          1152, 1633, 1870, 1174, 1889, 1178, 1196, 1909, 1650, 1905, 1213, 
          1662, 1931, 1233, 1671, 1948, 1255, 1968, 1681, 1964, 1271, 1694, 
          1991, 1293, 1701, 2008, 1318, 690, 1338}], 
         Line[{1096, 1611, 1821, 1114, 1618, 1835, 1135, 1850, 1627, 1855, 
          1154, 1635, 1869, 1176, 1888, 1183, 1197, 1908, 1652, 1913, 1214, 
          1664, 1930, 1235, 1952, 1242, 1256, 1967, 1683, 1972, 1272, 1696, 
          1995, 1295, 2011, 1302, 1320, 2021, 1327, 1339}], 
         Line[{1097, 1612, 1822, 1115, 1834, 1125, 1136, 1854, 1628, 1838, 
          1155, 1875, 1164, 1177, 1642, 1891, 1198, 1912, 1654, 1894, 1215, 
          1666, 1934, 1236, 1951, 1247, 1257, 1975, 1685, 1971, 1273, 1994, 
          1282, 1296, 2010, 1307, 1321, 2023, 1331, 1340}], 
         Line[{1099, 1106, 1826, 1119, 1129, 1842, 1139, 1147, 1859, 1860, 
          1159, 1883, 1639, 1181, 1191, 1898, 1201, 1919, 1657, 1917, 1219, 
          1226, 1942, 1240, 1957, 1675, 1260, 1977, 1688, 1980, 1277, 1286, 
          2002, 1300, 1312, 2016, 1325, 703, 1342}], 
         Line[{1100, 1109, 1828, 1120, 1845, 1622, 1140, 1861, 1631, 1864, 
          1160, 1171, 1885, 1182, 1901, 1646, 1202, 1923, 1659, 1920, 1220, 
          1230, 1944, 1241, 1958, 1677, 1261, 1981, 1691, 1984, 1278, 1290, 
          2003, 1301, 684, 1326, 2026, 1708, 1343}], 
         Line[{1101, 1113, 1830, 1122, 1846, 1624, 1141, 1865, 1632, 1867, 
          1161, 463, 1185, 1902, 1648, 1203, 1924, 1661, 1926, 1221, 1234, 
          1945, 1244, 1961, 1679, 1262, 1985, 1693, 1987, 1279, 2005, 1700, 
          1304, 2018, 1704, 1328, 2027, 1709, 1344}], 
         Line[{1103, 1117, 1833, 1124, 1137, 1853, 1143, 1157, 1871, 1873, 
          1163, 1890, 1641, 1187, 1199, 1910, 1205, 1932, 1663, 1929, 1223, 
          1238, 1949, 1246, 1258, 1969, 1264, 1992, 1695, 1990, 1281, 1298, 
          2009, 1306, 2022, 1705, 1330, 709, 1346}], 
         Line[{1104, 1121, 1836, 1127, 405, 1145, 1876, 1636, 1874, 1165, 
          1184, 1892, 1189, 1911, 1653, 1206, 1933, 1665, 1935, 1224, 1243, 
          1950, 1248, 1970, 1684, 1265, 1993, 1697, 1996, 1283, 1303, 2012, 
          1309, 696, 1332, 2029, 1711, 1347}], 
         Line[{1105, 1126, 1837, 1128, 1144, 1856, 1146, 1877, 1637, 1878, 
          1166, 1188, 1893, 1190, 1914, 1655, 1207, 1936, 1667, 1937, 1225, 
          1953, 1673, 1249, 1973, 1686, 1266, 1997, 1698, 1974, 1284, 1308, 
          2013, 1310, 2024, 1706, 1333, 2030, 1712, 1348}], 
         Line[{1337, 1322, 2019, 1317, 1297, 2006, 1292, 1274, 1986, 1270, 
          1963, 1962, 1680, 1254, 1237, 1946, 1232, 1216, 1925, 1212, 1904, 
          1903, 1649, 1195, 1886, 1640, 1173, 1156, 1866, 1151, 397, 1847, 
          1133, 1829, 1616, 1111, 1093, 1819, 1094}], 
         Line[{1341, 1707, 2025, 1324, 1703, 2014, 1299, 1699, 1999, 1276, 
          1689, 1978, 1976, 1259, 1954, 1250, 1239, 1669, 1939, 1218, 1916, 
          1915, 1208, 1200, 1644, 1895, 1180, 1880, 1167, 1158, 419, 1857, 
          1138, 1620, 1839, 1118, 1614, 1824, 1098}], 
         Line[{1345, 1710, 2028, 1329, 2020, 1323, 1305, 1702, 2007, 1280, 
          1989, 1988, 1275, 1263, 1682, 1966, 1245, 1672, 1947, 1222, 1928, 
          1927, 1217, 1204, 1651, 1907, 1186, 1887, 1179, 1162, 1872, 1634, 
          1868, 1142, 1626, 1849, 1123, 1617, 1831, 1102}], 
         Line[{1350, 1349, 2031, 1367, 1717, 2039, 1390, 2055, 1723, 2037, 
          1408, 1733, 2072, 1428, 1742, 2096, 1452, 2093, 1747, 2111, 1469, 
          1760, 2132, 1487, 1772, 2155, 1511, 2170, 1778, 2152, 1527, 1791, 
          2193, 1547, 2215, 1545, 1573, 2212, 1571, 1594}], 
         Line[{1351, 1713, 2032, 1368, 732, 1391, 2054, 1725, 2058, 1409, 
          1734, 2077, 1429, 2095, 1430, 1453, 2114, 1749, 2110, 1470, 1762, 
          2136, 1488, 2154, 1489, 1512, 2169, 1780, 2174, 1528, 1794, 2197, 
          1548, 2214, 1549, 1574, 2229, 1575, 1595}], 
         Line[{1352, 719, 1370, 1719, 2041, 1392, 2057, 1727, 2062, 1410, 
          2076, 1413, 1432, 2098, 1435, 1454, 2113, 1751, 2120, 1471, 1764, 
          2135, 1491, 1774, 2157, 1513, 2173, 1782, 2179, 1529, 1796, 2196, 
          1551, 2218, 1554, 1576, 2231, 1579, 1596}], 
         Line[{1355, 1714, 2034, 1372, 2046, 1376, 1394, 1729, 2065, 2066, 
          1412, 1737, 2084, 1434, 2103, 1438, 1456, 2123, 1754, 2119, 1473, 
          1766, 2145, 1493, 1775, 2162, 1515, 2182, 1785, 2178, 1531, 1798, 
          2205, 1553, 1805, 2222, 1578, 1065, 1598}], 
         Line[{1356, 1715, 2035, 1374, 1722, 2049, 1395, 2064, 1731, 2069, 
          1414, 1739, 2083, 1436, 2102, 1443, 1457, 2122, 1756, 2127, 1474, 
          1768, 2144, 1495, 2166, 1502, 1516, 2181, 1787, 2186, 1532, 1800, 
          2209, 1555, 2225, 1562, 1580, 2235, 1587, 1599}], 
         Line[{1357, 1716, 2036, 1375, 2048, 1385, 1396, 2068, 1732, 2052, 
          1415, 2089, 1424, 1437, 1746, 2105, 1458, 2126, 1758, 2108, 1475, 
          1770, 2148, 1496, 2165, 1507, 1517, 2189, 1789, 2185, 1533, 2208, 
          1542, 1556, 2224, 1567, 1581, 2237, 1591, 1600}], 
         Line[{1359, 1366, 2040, 1379, 1389, 2056, 1399, 1407, 2073, 2074, 
          1419, 2097, 1743, 1441, 1451, 2112, 1461, 2133, 1761, 2131, 1479, 
          1486, 2156, 1500, 2171, 1779, 1520, 2191, 1792, 2194, 1537, 1546, 
          2216, 1560, 1572, 2230, 1585, 1078, 1602}], 
         Line[{1360, 1369, 2042, 1380, 2059, 1726, 1400, 2075, 1735, 2078, 
          1420, 1431, 2099, 1442, 2115, 1750, 1462, 2137, 1763, 2134, 1480, 
          1490, 2158, 1501, 2172, 1781, 1521, 2195, 1795, 2198, 1538, 1550, 
          2217, 1561, 1059, 1586, 2240, 1812, 1603}], 
         Line[{1361, 1373, 2044, 1382, 2060, 1728, 1401, 2079, 1736, 2081, 
          1421, 838, 1445, 2116, 1752, 1463, 2138, 1765, 2140, 1481, 1494, 
          2159, 1504, 2175, 1783, 1522, 2199, 1797, 2201, 1539, 2219, 1804, 
          1564, 2232, 1808, 1588, 2241, 1813, 1604}], 
         Line[{1363, 1377, 2047, 1384, 1397, 2067, 1403, 1417, 2085, 2087, 
          1423, 2104, 1745, 1447, 1459, 2124, 1465, 2146, 1767, 2143, 1483, 
          1498, 2163, 1506, 1518, 2183, 1524, 2206, 1799, 2204, 1541, 1558, 
          2223, 1566, 2236, 1809, 1590, 1084, 1606}], 
         Line[{1364, 1381, 2050, 1387, 780, 1405, 2090, 1740, 2088, 1425, 
          1444, 2106, 1449, 2125, 1757, 1466, 2147, 1769, 2149, 1484, 1503, 
          2164, 1508, 2184, 1788, 1525, 2207, 1801, 2210, 1543, 1563, 2226, 
          1569, 1071, 1592, 2243, 1815, 1607}], 
         Line[{1365, 1386, 2051, 1388, 1404, 2070, 1406, 2091, 1741, 2092, 
          1426, 1448, 2107, 1450, 2128, 1759, 1467, 2150, 1771, 2151, 1485, 
          2167, 1777, 1509, 2187, 1790, 1526, 2211, 1802, 2188, 1544, 1568, 
          2227, 1570, 2238, 1810, 1593, 2244, 1816, 1608}], 
         Line[{1597, 1582, 2233, 1577, 1557, 2220, 1552, 1534, 2200, 1530, 
          2177, 2176, 1784, 1514, 1497, 2160, 1492, 1476, 2139, 1472, 2118, 
          2117, 1753, 1455, 2100, 1744, 1433, 1416, 2080, 1411, 772, 2061, 
          1393, 2043, 1720, 1371, 1353, 2033, 1354}], 
         Line[{1601, 1811, 2239, 1584, 1807, 2228, 1559, 1803, 2213, 1536, 
          1793, 2192, 2190, 1519, 2168, 1510, 1499, 1773, 2153, 1478, 2130, 
          2129, 1468, 1460, 1748, 2109, 1440, 2094, 1427, 1418, 794, 2071, 
          1398, 1724, 2053, 1378, 1718, 2038, 1358}], 
         Line[{1605, 1814, 2242, 1589, 2234, 1583, 1565, 1806, 2221, 1540, 
          2203, 2202, 1535, 1523, 1786, 2180, 1505, 1776, 2161, 1482, 2142, 
          2141, 1477, 1464, 1755, 2121, 1446, 2101, 1439, 1422, 2086, 1738, 
          2082, 1402, 1730, 2063, 1383, 1721, 2045, 1362}]}, {
         Line[{342, 612, 1973, 611, 606, 1970, 605, 1969, 600, 1966, 599, 594,
           1961, 593, 588, 1958, 587, 1957, 582, 1954, 576, 573, 1951, 572, 
          1952, 569, 568, 1948, 565, 1946, 564, 561, 1943, 560, 557, 1940, 
          556, 1941, 553, 581}], 
         Line[{352, 575, 1953, 574, 571, 1950, 570, 1949, 567, 1947, 566, 563,
           1945, 562, 1944, 559, 558, 1942, 555, 1939, 550, 545, 1934, 544, 
          539, 1930, 538, 1931, 533, 1925, 532, 527, 1921, 526, 1922, 521, 
          520, 1918, 515, 554}], 
         Line[{354, 339, 1817, 341, 340, 1818, 343, 344, 345, 1819, 346, 1820,
           347, 348, 1821, 349, 350, 1822, 351, 1824, 355, 1826, 358, 359, 
          1828, 362, 363, 1830, 366, 1831, 367, 1833, 370, 371, 1836, 374, 
          1837, 375, 377}], 
         Line[{380, 353, 1825, 356, 357, 360, 1827, 361, 364, 1829, 365, 1832,
           368, 369, 1835, 372, 1834, 373, 376, 1839, 381, 1842, 386, 387, 
          1845, 392, 1846, 393, 398, 1849, 399, 1853, 404, 405, 410, 1856, 
          411, 414}], 
         Line[{416, 378, 1841, 382, 1840, 384, 388, 1843, 390, 394, 1847, 396,
           1851, 400, 1850, 402, 406, 1854, 408, 412, 1857, 418, 1859, 422, 
          1861, 424, 428, 1865, 430, 434, 1868, 436, 1871, 440, 442, 1876, 
          446, 1877, 448, 451}], 
         Line[{452, 1878, 449, 447, 443, 1874, 441, 1873, 1872, 437, 435, 
          1867, 431, 429, 1864, 425, 423, 1860, 419, 413, 1838, 409, 407, 
          1855, 403, 401, 1852, 397, 395, 1848, 391, 389, 1844, 385, 383, 379,
           1823, 417}], 
         Line[{454, 415, 1858, 420, 421, 1863, 426, 1862, 427, 432, 1866, 433,
           1870, 438, 1869, 439, 444, 1875, 445, 450, 1880, 455, 1883, 458, 
          459, 1885, 462, 463, 466, 1887, 467, 1890, 470, 471, 1892, 474, 
          1893, 475, 477}], 
         Line[{480, 453, 1882, 456, 1881, 457, 460, 1884, 461, 464, 1886, 465,
           1889, 468, 1888, 469, 472, 1891, 473, 476, 1895, 481, 1898, 486, 
          487, 1901, 492, 1902, 493, 498, 1907, 499, 1910, 504, 1911, 505, 
          510, 1914, 511, 514}], 
         Line[{516, 1879, 478, 482, 484, 1900, 488, 1899, 490, 494, 1903, 496,
           1909, 500, 1908, 502, 506, 1912, 508, 512, 1915, 518, 1919, 522, 
          524, 1923, 528, 1924, 530, 534, 1927, 536, 1932, 540, 1933, 542, 
          546, 1936, 548, 551}], 
         Line[{552, 1937, 549, 547, 1935, 543, 541, 537, 1929, 1928, 535, 
          1926, 531, 529, 525, 1920, 523, 519, 1917, 1916, 513, 1894, 509, 
          507, 1913, 503, 501, 497, 1905, 1904, 495, 1906, 491, 489, 485, 
          1896, 483, 1897, 479, 517}], 
         Line[{578, 1974, 650, 648, 1996, 644, 642, 638, 1990, 1989, 636, 
          1987, 632, 630, 1984, 626, 624, 1980, 620, 1978, 614, 610, 1971, 
          608, 1972, 604, 602, 598, 1964, 1963, 596, 1965, 592, 590, 1960, 
          586, 584, 580, 1938, 618}], 
         Line[{615, 675, 2013, 674, 2012, 671, 670, 2009, 667, 2007, 666, 663,
           2005, 662, 659, 2003, 658, 2002, 655, 1999, 651, 646, 1994, 645, 
          1995, 640, 639, 1991, 634, 1986, 633, 628, 1982, 627, 1983, 622, 
          621, 1979, 616, 654}], 
         Line[{617, 579, 1956, 583, 1955, 585, 589, 1959, 591, 595, 1962, 597,
           1968, 601, 1967, 603, 607, 609, 1975, 613, 1976, 1977, 619, 623, 
          1981, 625, 629, 1985, 631, 635, 1988, 637, 1992, 641, 1993, 643, 
          647, 1997, 649, 577}], 
         Line[{652, 700, 2024, 699, 696, 695, 2022, 692, 2020, 691, 688, 2018,
           687, 684, 683, 2016, 680, 2014, 676, 673, 2010, 672, 2011, 669, 
          668, 2008, 665, 2006, 664, 661, 2004, 660, 657, 2000, 656, 2001, 
          653, 679}], 
         Line[{677, 713, 2030, 712, 2029, 711, 710, 709, 2028, 708, 707, 2027,
           706, 705, 2026, 704, 703, 2025, 701, 698, 2023, 697, 694, 2021, 
          693, 690, 2019, 689, 686, 2017, 685, 682, 2015, 681, 678, 1998, 
          702}], 
         Line[{717, 987, 2187, 986, 981, 2184, 980, 2183, 975, 2180, 974, 969,
           2175, 968, 963, 2172, 962, 2171, 957, 2168, 951, 948, 2165, 947, 
          2166, 944, 943, 2162, 940, 2160, 939, 936, 2157, 935, 932, 2154, 
          931, 2155, 928, 956}], 
         Line[{727, 950, 2167, 949, 946, 2164, 945, 2163, 942, 2161, 941, 938,
           2159, 937, 2158, 934, 933, 2156, 930, 2153, 925, 920, 2148, 919, 
          914, 2144, 913, 2145, 908, 2139, 907, 902, 2135, 901, 2136, 896, 
          895, 2132, 890, 929}], 
         Line[{729, 714, 2031, 716, 715, 2032, 718, 719, 720, 2033, 721, 2034,
           722, 723, 2035, 724, 725, 2036, 726, 2038, 730, 2040, 733, 734, 
          2042, 737, 738, 2044, 741, 2045, 742, 2047, 745, 746, 2050, 749, 
          2051, 750, 752}], 
         Line[{755, 728, 2039, 731, 732, 735, 2041, 736, 739, 2043, 740, 2046,
           743, 744, 2049, 747, 2048, 748, 751, 2053, 756, 2056, 761, 762, 
          2059, 767, 2060, 768, 773, 2063, 774, 2067, 779, 780, 785, 2070, 
          786, 789}], 
         Line[{791, 753, 2055, 757, 2054, 759, 763, 2057, 765, 769, 2061, 771,
           2065, 775, 2064, 777, 781, 2068, 783, 787, 2071, 793, 2073, 797, 
          2075, 799, 803, 2079, 805, 809, 2082, 811, 2085, 815, 817, 2090, 
          821, 2091, 823, 826}], 
         Line[{827, 2092, 824, 822, 818, 2088, 816, 2087, 2086, 812, 810, 
          2081, 806, 804, 2078, 800, 798, 2074, 794, 788, 2052, 784, 782, 
          2069, 778, 776, 2066, 772, 770, 2062, 766, 764, 2058, 760, 758, 754,
           2037, 792}], 
         Line[{829, 790, 2072, 795, 796, 2077, 801, 2076, 802, 807, 2080, 808,
           2084, 813, 2083, 814, 819, 2089, 820, 825, 2094, 830, 2097, 833, 
          834, 2099, 837, 838, 841, 2101, 842, 2104, 845, 846, 2106, 849, 
          2107, 850, 852}], 
         Line[{855, 828, 2096, 831, 2095, 832, 835, 2098, 836, 839, 2100, 840,
           2103, 843, 2102, 844, 847, 2105, 848, 851, 2109, 856, 2112, 861, 
          862, 2115, 867, 2116, 868, 873, 2121, 874, 2124, 879, 2125, 880, 
          885, 2128, 886, 889}], 
         Line[{891, 2093, 853, 857, 859, 2114, 863, 2113, 865, 869, 2117, 871,
           2123, 875, 2122, 877, 881, 2126, 883, 887, 2129, 893, 2133, 897, 
          899, 2137, 903, 2138, 905, 909, 2141, 911, 2146, 915, 2147, 917, 
          921, 2150, 923, 926}], 
         Line[{927, 2151, 924, 922, 2149, 918, 916, 912, 2143, 2142, 910, 
          2140, 906, 904, 900, 2134, 898, 894, 2131, 2130, 888, 2108, 884, 
          882, 2127, 878, 876, 872, 2119, 2118, 870, 2120, 866, 864, 860, 
          2110, 858, 2111, 854, 892}], 
         Line[{953, 2188, 1025, 1023, 2210, 1019, 1017, 1013, 2204, 2203, 
          1011, 2201, 1007, 1005, 2198, 1001, 999, 2194, 995, 2192, 989, 985, 
          2185, 983, 2186, 979, 977, 973, 2178, 2177, 971, 2179, 967, 965, 
          2174, 961, 959, 955, 2152, 993}], 
         Line[{990, 1050, 2227, 1049, 2226, 1046, 1045, 2223, 1042, 2221, 
          1041, 1038, 2219, 1037, 1034, 2217, 1033, 2216, 1030, 2213, 1026, 
          1021, 2208, 1020, 2209, 1015, 1014, 2205, 1009, 2200, 1008, 1003, 
          2196, 1002, 2197, 997, 996, 2193, 991, 1029}], 
         Line[{992, 954, 2170, 958, 2169, 960, 964, 2173, 966, 970, 2176, 972,
           2182, 976, 2181, 978, 982, 984, 2189, 988, 2190, 2191, 994, 998, 
          2195, 1000, 1004, 2199, 1006, 1010, 2202, 1012, 2206, 1016, 2207, 
          1018, 1022, 2211, 1024, 952}], 
         Line[{1027, 1075, 2238, 1074, 1071, 1070, 2236, 1067, 2234, 1066, 
          1063, 2232, 1062, 1059, 1058, 2230, 1055, 2228, 1051, 1048, 2224, 
          1047, 2225, 1044, 1043, 2222, 1040, 2220, 1039, 1036, 2218, 1035, 
          1032, 2214, 1031, 2215, 1028, 1054}], 
         Line[{1052, 1088, 2244, 1087, 2243, 1086, 1085, 1084, 2242, 1083, 
          1082, 2241, 1081, 1080, 2240, 1079, 1078, 2239, 1076, 1073, 2237, 
          1072, 1069, 2235, 1068, 1065, 2233, 1064, 1061, 2231, 1060, 1057, 
          2229, 1056, 1053, 2212, 1077}]}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
CfaGgsZK129n46ueoJi9xtmoMCmv9G06watQuxlVujmYy3dP/ihPBqrbnF9T
Tvi54gOvk+HRuVgqm+NgUBCKfCKNux3qKJA/QM/P35swP095Xl1uFxmChyqX
+kz38wEOH/VrCb8oaNhL2wdMsP9s4PToR2wezmkuSjgZn4nURemZMUSPb582
+WTw73yU/cHr+CQyE3+vbHrJEU9wYxeYQLUXun5bsbUuOAwmJ9762k38hLHm
9ndPmNvfUP4jgDfJA+c3907+rRYKp8+nfhj89U9fm57nb2PN829jzfOfquxY
va88Ba0F4iVvO8XhioKyO1oEn5H+fojd9PdDZH8/TPiVXDJ+whduHpGqj9aO
hZa9ms31wwSfWf47Jvj/2LN/H19pHOzc2pnxuSwNNquf4Dv85r/7Be8n2KvS
3zmxjP7OiezvnJX091X8QX9fRfb31S76OypsoL+jAvs7KntPoXzCnoIy/b0X
dOnvvbCc9b3X+1/s3aX+fmcGGfo7MwixvjN70v0XtKT7L8juv0zWPLH+tHY8
2kZN1Uhano5+U7dGfW4lcSL39zsYbqG/gyH7O9gcCe4NvL8iQOPSw+qp98Lg
5Akx81Jyn2I5TKmZ0Sn46/rVlWICmVjcEdo6TPiwMONoZWNPCi5evub06ups
TB8+0mZXQQGYfVoSeiMdXArefAmzZIDA+YKmf+ZzGqQXvN1onwZOC0p5IlYy
wCHvvZkN4VFfvRgqG1Wjcb/Ar64xhww8Ydv88zI5J491tlDc7RjkE3PN/7M/
DT/2LT2uSur7h8Efa+37M0C0zaSG83kauO2X3CNXRYHFzQQdI64cUHgz47Xl
1Szg233y4OpMCtL2hKwtmfsIb704zfdWMQ6dx3t1ZpH3yHT823+BVrr/guz+
i/pHDn/OJ9lQb3Pg7S3fDHAXmJvByCd4eEae76xIDoR7JZ9aMpQO/lqWyZXk
dxu6vwOX6P4OsPs7q+l+E9jQ/SaYwuo3cZn/+hR+NRV21j3nvzueDuUbNc4c
eE6BL93ngvV0nwvYfa4Uup8FB+l+FrD7WW/p/hoE0f01YPfXftP9NThD99eA
3V97QPf14And1wN2X28l3R8EAbo/CBtZ/cFTdB+Z6LS/fWRk95GvH8kQMMmL
wWA7s2ap/Rm4ToknfDZ5XxuXzBJrd0tEhRuvy6oIL+536BBSaCI6V1+Qjzew
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
KsRYTflsNT8Og6a5K70g9mxrPm+iNsSCPVfXGO8Yk4LjU62ELlawwf/G9wnX
/D1hmk5IzV7bfORuEw9aGcaGB1Ibo4qO2sB7bu5NIQdInnHRpDmK5ClPHKqk
1k6wwdnjBK2uTc1Hc5GstLwYNqhWb711gM8KLyT9+MLtiNgfs91zJYkDeUYN
uNzKjaC8eP3EMwE56Mm7eioficem6Wev2XNYG9azVWxrjmbhr6CsAgcynhI5
kx0yo+4Qki43YJ+RgJZPJ2mUkfWmH/5Fr+VONKyZ9yLJ81MejGvrbb4bSPLu
VT7cK01j4ZzU3VJhg3xgycwVE/AmcfiRLNbBx46gq13wNDYqD2JVx146RPKO
dVX7qnxcIvBp59TcrrXZEGSl07yN5JsnaX2TT7S+yVVa3+Q6rReTy9CLmZ+2
TCWGpwS5M/bssch1h/rrSp+7DNjw5WSduv6ESlx8tcnF6aQzpj+/t2d0DsnH
rXt+fdCowe7DQpM+/IjFOnzweW/O/3RkJjB0ZHj0R8qmnK/Fwce/b6Ym5qJG
4jQb16M9kO+vMvO1YzVOSwplp33KxcFQN/Mdvj3wqN93paROGQ7//jhbcW42
Pj9dwto2laxPWl9mDkNfxn5j4uKNK9LwR5fu9dQkf2z0vHGej6y3ZOMj98te
++AtnweL/PY6QVSWRdH6EZIvzL4jWFnjBa9zj7WpEP99vbOv+CeJ0+ZJ6Ju8
Ok++S89qpCw1F8v3bXvw07IHZg7A+kLJh5DYeiZo9rEUqPy17lAH8Q+zTfKD
D4iEoWKq9I39DiEgtHB1wnFyLngqmIl2NT3H90LrBRYNpOHo5Ncf9STJfD2N
Ukk5koW/59RUnio6gDLeOxKdK/43X0OM+aowSHHPUy/FW7eiR60zQrDInHvd
+d3ED9B8Mn40n4wifU8vbemLLFv+CjR84WXZ28xCjYFlT1UF2FC34GfDe/FK
dHRNONR5IA1rsywiub72wOCn+qj+D3k4uNkquo7kK33Oqb0vPdgw5QX4L7/H
wov604pyMq0xYbfXj9PkvOih9W7W0Xo372n+6gV7Q+t924oxfqGX08K5SXgi
6NsKy4NsGMe6VjZbvAA/+6+a3CoXj08ttox2kvz3abTHzTKx+9B5Kv71ZbMY
WNqbdLqCnGuuN3eoOyzIQm9vgZLWk8EIfL4pb4rZYE3r40Qw9HE6vXwHboy/
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
+d/ISYss77RpQOdynnMzRjPAefqXcUfIfky6sGGjtVQGignd3mzFH4hnaj0m
/MFvlWn9aBuGfjRHb3oJo8/dldaPXsHQj86c+a33x8RovNtz4NkiWRZYqPSE
zSDrR0E7NlQpOAXHf1HdlnAlHPkOahjfJe/fovu1a5tZIu4ePqt+3FgH0n/f
XarQ9T9daTFGnfr9dbM3akuTsSg17Qm/bThe2qZS7UL82xmzCSuHQ5JxeLGi
ve3+cHzeXfzreDPxA3TfrjWjb5ejB21P60Gfovne+e0DjdXHesPgy0uaEW5J
cCN/Uc0p8r8jQQpq/P0hUGmWP29KawpkNpy5x3pBnrdS65u4IwrFmlWCxM4+
xqOKU2cZfCX7outF7NJr1rD6lNVHngssqE2q+hL4+Q8fI9XXPI3R1/yWrpt/
YNTNtSZ/7R5ICMc18hMWpvMEYJ7oD4tPf/SjaX3kVIY+MjfdH23I6I8OpvWO
vzL0jgtuC67i2+uMdcpZ5vknnsKhj9sf1Y2w4ck/6u8V/+in3m0oNeS3MADd
2fxhnc/D0ENp0+onxM5fm9Fd3sEB+wZSzSP07OFJtPXzw7/+6ApRfdZXGX3W
o8cqavz9Qv9fYWceTuW2BvDKWJzMTepkO8pODolUkqWUEOmGkhLloMw6zjWU
BtySRIZEGSrTlilj2FibttqOuimETYZODqccQ7k4pHtXfeu7PXc9z37uvx7P
3utZ37vW976v9+cHF1SFnNrJKoR5rGRtS7Q/JtgvPED4hTn9Mwmu+8oA7wnT
S3c6A3jc8rEoQO8XXcyb9xK8uT7mrIcIzvqy5tiLfQFXgAPfx974Zjg8YueY
+vjzN9/uRYITP/eoSoXbUQr2yRq/9BbKBv3vXb3Pou8Vxbz2jPj/8trfD0mG
qrTFAzOFyzPH1BJgRMDm4BOfUB6FvbqPCK+uBua7gwi+m/bqehNeXWND34Oz
stWgeevr83VXssCzDHXlW6heK3G3OSiXXwUGzSdt52WyQOHHqukvf8exwXy6
B8Gn2+H5hL3EfMJ+zI+nEPz4fMyJZxKcOO29nSW48qhcp0iD0d1QfOWhqCM/
lkC5sZWis+j5JmS2S8Q6XIcpXJ5LtmYZPO26c64DnTtZzJubE7z5FJ436CHm
DWjvrSzhvfXBXLkFwZXb9bn1bS8tAqpuHpIsxn0QblG/p7D/m8eWnJf4VXQZ
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
q2wOLmVWwsTOPc5iqH7/D4N0dtE=
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {342., 342.}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {0., 
       0.49488850049789845`}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25}, $CellContext`m1Sel$$ = 1, $CellContext`m2Sel$$ = 
    1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$79161, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}}, $CellContext`moSel$$ = 
    2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10}, "numberOfMasses" -> 1, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}}, 
     "mPosFirstCell" -> {{0.9, 0.7}}, 
     "pointsDataTable" -> {{{-1.2000000000000002`, -2.7}, {
      0.7, -1.9000000000000001`}, {2.6, -1.1}, {-1.1, -1.4000000000000001`}, {
      0.8, -0.6000000000000001}, {2.6999999999999997`, 
      0.19999999999999996`}, {-0.9999999999999999, -0.10000000000000009`}, {
      0.9, 0.7}, {2.8, 1.5}, {-0.8999999999999998, 1.2}, {1., 2.}, {2.9, 
      2.8}, {-0.7999999999999999, 2.5}, {1.1, 3.3}}}, "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {
    10}, $CellContext`rawNumberOfMasses$$ = 1, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 3, $CellContext`tauSliderValue$$ = 
    1, $CellContext`tick$$ = False, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 
    0.8}, {0.9, 0.7}}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       TabView[{"dynamics" -> Column[{
            Dynamic[
             Row[{
               OverVector[
                Style["q", Italic, 10]], " = ", 
               
               Module[{$CellContext`qm$}, $CellContext`qm$ = 
                 ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                Slider2D[
                  
                  Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                  ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
               Style[" 2 \[Pi] ", 10], 
               Style[
                Dynamic[
                 NumberForm[
                  MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
            Style[
             Row[{
               Text["number of time intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`dynMeshSize$$]}], 10], 
            Style[
             Row[{
               Text["time, normalized to one period, "], 
               Style["t", Italic], "/", 
               Style["T", Italic], " = ", 
               Dynamic[
                
                N[($CellContext`tauSliderValue$$ - 
                  1)/$CellContext`dynMeshSize$$]]}], 10], 
            Row[{
              Dynamic[
               Manipulator[
                
                Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {
                1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                ContinuousAction -> True, Appearance -> "Open", 
                AppearanceElements -> {
                 "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                  "FasterSlowerButtons", "DirectionButton"}]]}], 
            Style[
             Row[{
               Text["oscillation scale factor:"]}], 10], 
            Style[
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
            Style[
             Row[{
               Text["angular frequency \[Omega]("], 
               Style["q", Italic], 
               Text["), selection: "], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
         "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
         Column[{
            Style[
             Row[{
               Text["number of mesh intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`freqMeshSize$$]}], 10], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}], "parameters" -> Grid[{{
             Style[
              Row[{
                Text["mass: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                  Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                   ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {0.25, 
                  Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
             Text["\n"], ""}, {
             Text[
              Style["coupling to neighboring: ", 10]], 
             Style[
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]], 10]}, {
             Style[
              Row[{
                Text["horizontal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 1], FontColor -> RGBColor[
                   Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                OverVector[
                 Style["a", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["vertical: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 2], FontColor -> RGBColor[0, 
                   Rational[2, 3], 0]], " || ", 
                OverVector[
                 Style["b", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 3], FontColor -> 
                 RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                " || (", 
                OverVector[
                 Style["b", Italic]], " + ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 4], FontColor -> RGBColor[0, 
                   Rational[2, 3], 
                   Rational[2, 3]]], " || (", 
                OverVector[
                 Style["b", Italic]], " - ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
             Text["\n"], ""}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Text["coupling from "], 
                  Dynamic[
                   $CellContext`massLabel[$CellContext`m1Sel$$]], 
                  Text[" to: "]}], 10]]], 
             Dynamic[
              Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
               Style[
                Dynamic[
                 $CellContext`massLabel[
                  First[
                   Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
               Blank[], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  DeleteCases[
                   
                   Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  $CellContext`kLable[5], ": "}], 10]]], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Dynamic[
                   Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
        Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], ImageSize -> {250, 350}]],
       Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 12}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 3}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 1}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = {
    464., {228., 236.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        12, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10}, $CellContext`rawNumberOfMasses$$ = 
        1, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
        3, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         Switch[$CellContext`tabNumber$$, $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], $CellContext`freqTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
            Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
          Blank[], 
          LocatorPane[
           Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                 Dimensions[#]] < 3, 
               
               Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[$CellContext`rawArrayOfMasses$$]]; 
              If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                  $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                
                While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[$CellContext`kArray$$, All, 1], All, 1]]; 
              If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                
                While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 1], 
               Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                 Part[$CellContext`u$$, 2], 
                 
                 Part[$CellContext`u$$, 
                  2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 2], 
               Part[$CellContext`u$$, 2]]; {
               Part[$CellContext`u$$, 1], 
               
               Part[$CellContext`u$$, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
             If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
             If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
             If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
             If[$CellContext`omegaIndex$$ > 
               2 $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
             ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
              2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
             True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
           $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
           LocatorAutoCreate -> True, ContinuousAction -> False]]]), 
      "Specifications" :> {
        TabView[{"dynamics" -> Column[{
             Dynamic[
              Row[{
                OverVector[
                 Style["q", Italic, 10]], " = ", 
                
                Module[{$CellContext`qm$}, $CellContext`qm$ = 
                  ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                 Slider2D[
                   
                   Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False,
                    ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
                Style[" 2 \[Pi] ", 10], 
                Style[
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
             Style[
              Row[{
                Text["number of time intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`dynMeshSize$$]}], 10], 
             Style[
              Row[{
                Text["time, normalized to one period, "], 
                Style["t", Italic], "/", 
                Style["T", Italic], " = ", 
                Dynamic[
                 
                 N[($CellContext`tauSliderValue$$ - 
                   1)/$CellContext`dynMeshSize$$]]}], 10], 
             Row[{
               Dynamic[
                Manipulator[
                 
                 Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {
                 1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                 ContinuousAction -> True, Appearance -> "Open", 
                 AppearanceElements -> {
                  "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                   "FasterSlowerButtons", "DirectionButton"}]]}], 
             Style[
              Row[{
                Text["oscillation scale factor:"]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
             Style[
              Row[{
                Text["angular frequency \[Omega]("], 
                Style["q", Italic], 
                Text["), selection: "], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
          "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
          Column[{
             Style[
              Row[{
                Text["number of mesh intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`freqMeshSize$$]}], 10], 
             LocatorPane[
              Dynamic[$CellContext`qPlaneLoc$$], 
              Dynamic[
               (Graphics[{
                 Lighter[Gray], 
                 Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                 Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
              ContinuousAction -> False]}], "parameters" -> Grid[{{
              Style[
               Row[{
                 Text["mass: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                   Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                   Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
              Text["\n"], ""}, {
              Text[
               Style["coupling to neighboring: ", 10]], 
              Style[
               Dynamic[
                If[$CellContext`rawNumberOfMasses$$ > 1, 
                 SetterBar[
                  
                  Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   Range[$CellContext`rawNumberOfMasses$$]]], 
                 $CellContext`massLabel[1]]], 10]}, {
              Style[
               Row[{
                 Text["horizontal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 1], FontColor -> RGBColor[
                    Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                 OverVector[
                  Style["a", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["vertical: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 2], FontColor -> RGBColor[0, 
                    Rational[2, 3], 0]], " || ", 
                 OverVector[
                  Style["b", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 3], FontColor -> 
                  RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                 " || (", 
                 OverVector[
                  Style["b", Italic]], " + ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 4], FontColor -> RGBColor[0, 
                    Rational[2, 3], 
                    Rational[2, 3]]], " || (", 
                 OverVector[
                  Style["b", Italic]], " - ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
              Text["\n"], ""}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Text["coupling from "], 
                   Dynamic[
                    $CellContext`massLabel[$CellContext`m1Sel$$]], 
                   Text[" to: "]}], 10]]], 
              Dynamic[
               Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
                Style[
                 Dynamic[
                  $CellContext`massLabel[
                   First[
                    Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
                Blank[], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   DeleteCases[
                    
                    Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   $CellContext`kLable[5], ": "}], 10]]], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Dynamic[
                    Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
         Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
         ImageSize -> {250, 350}], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 12}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10}}, 0, ControlType -> 
         None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{864., {266., 273.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, $CellContext`res,
           $CellContext`epsilon, $CellContext`m, $CellContext`mScalarArray, \
$CellContext`numberOfMasses}, $CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -(Part[$CellContext`qMax, 1]/2), Part[$CellContext`qMax, 1]/
               2, Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -(
                Part[$CellContext`qMax, 2]/2), Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}, PerformanceGoal -> 
           "Quality"]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {342., 
        342.}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, \
$CellContext`n$]/($CellContext`glConstMMax 500)]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               Part[#, 3], 
               FE`glConstSpringColorsByN$$474]]& , $CellContext`cN$]; 
         If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                Part[#, 3], 
                FE`glConstSpringColorsByN$$474]]& , $CellContext`cOrigin$]], 
           Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                  Style["a", Italic]], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                  Style["b", Italic]], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], Attributes[$CellContext`uLoc$] = {Temporary}, 
       Attributes[$CellContext`ld$] = {Temporary}, 
       Attributes[$CellContext`cd$] = {Temporary}, 
       Attributes[$CellContext`m1Ind$] = {Temporary}, 
       Attributes[$CellContext`m2Ind$] = {Temporary}, 
       Attributes[$CellContext`moInd$] = {Temporary}, 
       Attributes[$CellContext`aLoc$] = {Temporary}, 
       Attributes[$CellContext`bLoc$] = {Temporary}, 
       Attributes[$CellContext`mLoc$] = {Temporary}, 
       Attributes[$CellContext`pointsList$] = {Temporary}, 
       Attributes[$CellContext`latticeBasis$] = {Temporary}, 
       Attributes[$CellContext`reciprocalBasis$] = {Temporary}, 
       Attributes[$CellContext`pointsDataTable$] = {Temporary}, 
       Attributes[$CellContext`numberLatticeLinesToDisplay$] = {Temporary}, 
       Attributes[$CellContext`lines$] = {Temporary}, 
       Attributes[$CellContext`cOrigin$] = {Temporary}, 
       Attributes[$CellContext`cN$] = {Temporary}, 
       Attributes[$CellContext`g$] = {Temporary}, 
       Attributes[$CellContext`mScalarArray$] = {Temporary}, 
       Attributes[$CellContext`numberOfMasses$] = {Temporary}, 
       Attributes[$CellContext`scaleLoc$] = {Temporary}, 
       Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
       Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, FE`glConstSpringColorsByN$$474 = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 
       7.6000000000000005`, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]], \
$CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6055229213532424`*^9, {3.6055233758382373`*^9, 3.605523392246176*^9}, {
   3.605523656985318*^9, 3.605523754074871*^9}, {3.605524067847818*^9, 
   3.6055240751742373`*^9}, 3.605524144345194*^9, 3.6055242676772475`*^9, 
   3.6055243639877567`*^9, 3.6055245164274755`*^9, 3.605524593683894*^9, {
   3.6055246502131276`*^9, 3.605524675557577*^9}, 3.605524914592249*^9, {
   3.605524950877324*^9, 3.605525024352527*^9}, {3.6055250950575714`*^9, 
   3.6055251192499547`*^9}, {3.6055252062219296`*^9, 3.605525226185071*^9}, 
   3.6055252985342093`*^9, {3.6055253708163433`*^9, 3.605525397274857*^9}, {
   3.605525442034417*^9, 3.605525469464986*^9}, {3.6055255165876813`*^9, 
   3.6055255276503143`*^9}, {3.6055256033916464`*^9, 3.6055257473548803`*^9}, 
   3.6055258023860283`*^9},
 CellID->119007210]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell["\<\
A lattice of atoms can be modeled as harmonic oscillators, with forces \
proportional to the displacements of the atoms from equilibrium positions. \
The simplest such model introduces coupling only between nearest-neighbor \
atoms. In this Demonstration, a lattice cell containing one to five atoms is \
modeled, with nearest-neighbor harmonic coupling to the masses in each nearby \
cell. Normal mode solutions to these equations of motion are plotted. \
Controls are provided to alter the coupling \"spring constants\" and other \
free parameters, as well as controls to select from the reciprocal space \
vectors and angular frequencies associated with the normal mode solutions. A \
time control is also provided to display changes of the lattice through one \
period of the lattice vibration. A plot of the dispersion relation, showing \
the angular velocities associated with each reciprocal vector, is also \
provided.\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.6008873855675645`*^9, {3.601208787872481*^9, 3.601208804510481*^9}, {
   3.601209090380548*^9, 3.601209091209631*^9}, {3.6013823516277194`*^9, 
   3.601382454828622*^9}, 3.601647226460186*^9, {3.602873921323729*^9, 
   3.602873937673696*^9}, 3.6034728500881653`*^9, {3.6034732021011653`*^9, 
   3.603473226436165*^9}, 3.6034732593621655`*^9, {3.604161553151741*^9, 
   3.604161553631741*^9}, {3.6052829099294963`*^9, 3.6052829103275366`*^9}, {
   3.60536654494254*^9, 3.605366567283579*^9}, 3.605366599886237*^9},
 CellID->20961076]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    True, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.25, 0.39400400000000013`, {0.512, 
        0.5449999999999999}, {0.41400000000000015`, 1.165}, {{
        0.02437538705190803, -0.15421163236921429`}, {-0.15421163236921429`, 
        0.975624612948092}}}, {
       1, 4, {0, 0}, 0.25, 0.6613960000000004, {0.512, 0.5449999999999999}, {
        0.9260000000000002, 1.245}, {{0.25914278284114206`, 
        0.4381641255768102}, {0.4381641255768102, 0.7408572171588578}}}, {
       1, 5, {0, 0}, 0.25, 0.8032840000000003, {0.512, 0.5449999999999999}, {
        1.3900000000000001`, 0.7250000000000001}, {{0.9596655728235592, 
        0.1967423725606387}, {0.1967423725606387, 0.04033442717644077}}}, {
       1, 3, {0, 0}, 0.25, 1.7262440000000001`, {0.512, 0.5449999999999999}, {
        1.4500000000000002`, 1.4649999999999999`}, {{0.5096869272246567, 
        0.4999061546339915}, {0.4999061546339915, 0.49031307277534336`}}}}, {{
       2, 4, {0, 0}, 0.79, 0.268544, {0.41400000000000015`, 1.165}, {
        0.9260000000000002, 1.245}, {{0.9761677788369875, 
        0.15252621544327946`}, {0.15252621544327946`, 
        0.023832221163012434`}}}, {
       2, 1, {0, 0}, 0.25, 0.39400400000000013`, {0.512, 
        0.5449999999999999}, {0.41400000000000015`, 1.165}, {{
        0.02437538705190803, -0.15421163236921429`}, {-0.15421163236921429`, 
        0.975624612948092}}}, {
       2, 5, {0, 0}, 0.25, 1.1461759999999999`, {0.41400000000000015`, 
        1.165}, {1.3900000000000001`, 0.7250000000000001}, {{
        0.8310905131498131, -0.3746719526495058}, {-0.3746719526495058, 
        0.16890948685018706`}}}, {
       2, 3, {0, 0}, 0.25, 1.1632959999999999`, {0.41400000000000015`, 
        1.165}, {1.4500000000000002`, 1.4649999999999999`}, {{
        0.9226336203339478, 0.26717189778010053`}, {0.26717189778010053`, 
        0.07736637966605224}}}}, {{
       3, 4, {0, 0}, 0.25, 0.32297599999999993`, {1.4500000000000002`, 
        1.4649999999999999`}, {0.9260000000000002, 1.245}, {{
        0.8501436639254932, 0.35693054592291656`}, {0.35693054592291656`, 
        0.14985633607450677`}}}, {
       3, 5, {0, 0}, 0.25, 0.5511999999999997, {1.4500000000000002`, 
        1.4649999999999999`}, {1.3900000000000001`, 0.7250000000000001}, {{
        0.006531204644412207, 0.08055152394775045}, {0.08055152394775045, 
        0.9934687953555877}}}, {
       3, 2, {0, 0}, 0.25, 1.1632959999999999`, {0.41400000000000015`, 
        1.165}, {1.4500000000000002`, 1.4649999999999999`}, {{
        0.9226336203339478, 0.26717189778010053`}, {0.26717189778010053`, 
        0.07736637966605224}}}, {
       3, 1, {0, 0}, 0.25, 1.7262440000000001`, {0.512, 0.5449999999999999}, {
        1.4500000000000002`, 1.4649999999999999`}, {{0.5096869272246567, 
        0.4999061546339915}, {0.4999061546339915, 0.49031307277534336`}}}}, {{
       4, 2, {0, 0}, 0.79, 0.268544, {0.41400000000000015`, 1.165}, {
        0.9260000000000002, 1.245}, {{0.9761677788369875, 
        0.15252621544327946`}, {0.15252621544327946`, 
        0.023832221163012434`}}}, {
       4, 3, {0, 0}, 0.25, 0.32297599999999993`, {1.4500000000000002`, 
        1.4649999999999999`}, {0.9260000000000002, 1.245}, {{
        0.8501436639254932, 0.35693054592291656`}, {0.35693054592291656`, 
        0.14985633607450677`}}}, {
       4, 5, {0, 0}, 0.25, 0.485696, {0.9260000000000002, 1.245}, {
        1.3900000000000001`, 0.7250000000000001}, {{
        0.44327315851890886`, -0.49677164316774275`}, {-0.49677164316774275`, 
        0.5567268414810911}}}, {
       4, 1, {0, 0}, 0.25, 0.6613960000000004, {0.512, 0.5449999999999999}, {
        0.9260000000000002, 1.245}, {{0.25914278284114206`, 
        0.4381641255768102}, {0.4381641255768102, 0.7408572171588578}}}}, {{
       5, 4, {0, 0}, 0.25, 0.485696, {0.9260000000000002, 1.245}, {
        1.3900000000000001`, 0.7250000000000001}, {{
        0.44327315851890886`, -0.49677164316774275`}, {-0.49677164316774275`, 
        0.5567268414810911}}}, {
       5, 3, {0, 0}, 0.25, 0.5511999999999997, {1.4500000000000002`, 
        1.4649999999999999`}, {1.3900000000000001`, 0.7250000000000001}, {{
        0.006531204644412207, 0.08055152394775045}, {0.08055152394775045, 
        0.9934687953555877}}}, {
       5, 1, {0, 0}, 0.25, 0.8032840000000003, {0.512, 0.5449999999999999}, {
        1.3900000000000001`, 0.7250000000000001}, {{0.9596655728235592, 
        0.1967423725606387}, {0.1967423725606387, 0.04033442717644077}}}, {
       5, 2, {0, 0}, 0.25, 1.1461759999999999`, {0.41400000000000015`, 
        1.165}, {1.3900000000000001`, 0.7250000000000001}, {{
        0.8310905131498131, -0.3746719526495058}, {-0.3746719526495058, 
        0.16890948685018706`}}}}}, {{{
       1, 4, {-1, 0}, 0.25, 0.4585959999999999, {0.512, 0.5449999999999999}, {
        0.8260000000000002, -0.05499999999999994}, {{
        0.21499533358337214`, -0.4108191087580357}, {-0.4108191087580357, 
        0.785004666416628}}}, {
       1, 2, {-1, 0}, 0.25, 0.5016039999999998, {0.512, 0.5449999999999999}, {
        0.31400000000000017`, -0.135}, {{0.07815727147311416, 
        0.26841891212988717`}, {0.26841891212988717`, 0.9218427285268859}}}, {
       1, 3, {-1, 0}, 0.25, 0.8466440000000002, {0.512, 0.5449999999999999}, {
        1.35, 0.1649999999999998}, {{
        0.8294442528382648, -0.37612030558298415`}, {-0.37612030558298415`, 
        0.17055574716173508`}}}, {
       1, 3, {0, -1}, 0.25, 0.9398439999999995, {0.512, 
        0.5449999999999999}, {-0.44999999999999973`, 0.6649999999999998}, {{
        0.984678308314997, -0.12282889500810766`}, {-0.12282889500810766`, 
        0.015321691685003023`}}}, {
       1, 5, {1, -1}, 0.25, 1.3124839999999998`, {0.512, 
        0.5449999999999999}, {-0.4099999999999997, 1.225}, {{
        0.6476909432800703, -0.47768963278790455`}, {-0.47768963278790455`, 
        0.3523090567199298}}}, {
       1, 5, {0, -1}, 0.25, 1.4288839999999994`, {0.512, 
        0.5449999999999999}, {-0.5099999999999998, -0.07499999999999996}, {{
        0.7309788618250327, 0.44345097292712354`}, {0.44345097292712354`, 
        0.2690211381749673}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.512, 0.5449999999999999}, {
        0.612, 1.845}, {{0.005882352941176467, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.512, 
        0.5449999999999999}, {0.41200000000000003`, -0.7550000000000001}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 5, {-1, 0}, 0.25, 1.8596839999999997`, {0.512, 
        0.5449999999999999}, {1.29, -0.575}, {{
        0.32547680143508256`, -0.468552721860273}, {-0.468552721860273, 
        0.6745231985649174}}}, {
       1, 4, {0, -1}, 0.25, 2.218195999999999, {0.512, 
        0.5449999999999999}, {-0.9739999999999998, 0.44500000000000006`}, {{
        0.9954918321014015, 0.06699137497317634}, {0.06699137497317634, 
        0.004508167898598672}}}, {
       1, 3, {-1, -1}, 0.25, 2.520244, {0.512, 
        0.5449999999999999}, {-0.5499999999999998, -0.6350000000000002}, {{
        0.447513812154696, 0.4972375690607735}, {0.4972375690607735, 
        0.552486187845304}}}, {
       1, 3, {1, -1}, 0.25, 2.7594439999999993`, {0.512, 
        0.5449999999999999}, {-0.34999999999999964`, 1.9649999999999999`}, {{
        0.269273085447648, -0.4435821129183994}, {-0.4435821129183994, 
        0.7307269145523521}}}, {
       1, 2, {-1, 1}, 0.25, 2.911204, {0.512, 0.5449999999999999}, {2.214, 
        0.665}, {{0.9950535929464236, 0.07015654004322616}, {
        0.07015654004322616, 0.004946407053576467}}}, {
       1, 5, {1, 0}, 0.25, 3.146884000000002, {0.512, 0.5449999999999999}, {
        1.4900000000000002`, 2.0250000000000004`}, {{0.3039463799746034, 
        0.45995975701678227`}, {0.45995975701678227`, 0.6960536200253965}}}, {
       1, 4, {1, -1}, 0.25, 3.360995999999999, {0.512, 
        0.5449999999999999}, {-0.8739999999999997, 1.745}, {{
        0.5715555745975298, -0.4948533113398529}, {-0.4948533113398529, 
        0.4284444254024702}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.512, 
        0.5449999999999999}, {-1.2879999999999998`, 1.045}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.512, 
        0.5449999999999999}, {2.312, 0.04499999999999993}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 2, {1, 0}, 0.25, 3.686404, {0.512, 0.5449999999999999}, {
        0.5140000000000001, 2.465}, {{1.085068267070145*^-6, 
        0.0010416655363872805`}, {0.0010416655363872805`, 
        0.9999989149317329}}}, {
       1, 2, {0, -1}, 0.25, 4.024403999999999, {0.512, 
        0.5449999999999999}, {-1.4859999999999998`, 0.365}, {{
        0.991949118428468, 0.08936478544400611}, {0.08936478544400611, 
        0.00805088157153208}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.512, 0.5449999999999999}, {2.412, 
        1.345}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.512, 
        0.5449999999999999}, {-1.388, -0.2550000000000001}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 4, {1, 0}, 0.25, 4.264196, {0.512, 0.5449999999999999}, {
        1.0260000000000002`, 2.545}, {{0.061956814367819926`, 
        0.2410770987074704}, {0.2410770987074704, 0.9380431856321801}}}, {
       1, 4, {-1, -1}, 0.25, 4.475395999999999, {0.512, 
        0.5449999999999999}, {-1.0739999999999998`, -0.855}, {{
        0.5620499280957484, 0.49613486717153077`}, {0.49613486717153077`, 
        0.4379500719042516}}}, {
       1, 2, {1, -1}, 0.25, 4.856803999999999, {0.512, 
        0.5449999999999999}, {-1.3859999999999997`, 1.665}, {{
        0.7417231578626602, -0.4376870056934561}, {-0.4376870056934561, 
        0.2582768421373398}}}, {
       1, 4, {-1, 1}, 0.25, 4.941796, {0.512, 0.5449999999999999}, {2.726, 
        0.7450000000000001}, {{0.9919057767661797, 0.0896030511983903}, {
        0.0896030511983903, 0.008094223233820268}}}, {
       1, 5, {-1, -1}, 0.25, 4.945283999999999, {0.512, 
        0.5449999999999999}, {-0.6099999999999999, -1.375}, {{
        0.2545625286636723, 0.43561502231216653`}, {0.43561502231216653`, 
        0.7454374713363279}}}, {
       1, 2, {0, 1}, 0.25, 5.263604000000001, {0.512, 0.5449999999999999}, {
        2.314, 1.965}, {{0.6169164701599892, 0.4861383949096475}, {
        0.4861383949096475, 0.3830835298400108}}}, {
       1, 3, {1, 0}, 0.25, 6.005844, {0.512, 0.5449999999999999}, {
        1.5500000000000003`, 2.7649999999999997`}, {{0.1793992651157773, 
        0.3836862895539745}, {0.3836862895539745, 0.8206007348842226}}}, {
       1, 2, {-1, -1}, 0.25, 6.592003999999999, {0.512, 
        0.5449999999999999}, {-1.5859999999999999`, -0.935}, {{
        0.6677186482289756, 0.47103126757811437`}, {0.47103126757811437`, 
        0.33228135177102447`}}}, {
       1, 5, {-1, 1}, 0.25, 7.274084, {0.512, 0.5449999999999999}, {3.19, 
        0.2250000000000001}, {{
        0.9859226261340946, -0.11781002254029503`}, {-0.11781002254029503`, 
        0.014077373865905301`}}}, {
       1, 4, {0, 1}, 0.25, 7.604596, {0.512, 0.5449999999999999}, {2.826, 
        2.045}, {{0.7041262941515893, 0.4564345035554815}, {
        0.4564345035554815, 0.2958737058484106}}}, {
       1, 3, {-1, 1}, 0.25, 7.673044, {0.512, 0.5449999999999999}, {3.25, 
        0.9649999999999999}, {{0.977010427673815, 0.14987011673593947`}, {
        0.14987011673593947`, 0.022989572326185013`}}}, {
       1, 1, {1, 1}, 0.25, 8.41, {0.512, 0.5449999999999999}, {2.512, 
        2.645}, {{0.4756242568370987, 0.49940546967895366`}, {
        0.49940546967895366`, 0.5243757431629014}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.512, 
        0.5449999999999999}, {-1.488, -1.5550000000000002`}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       1, 5, {0, 1}, 0.25, 8.677684000000001, {0.512, 0.5449999999999999}, {
        3.29, 1.5250000000000001`}, {{0.8893253084578787, 
        0.31372887051429854`}, {0.31372887051429854`, 
        0.11067469154212117`}}}, {
       1, 3, {0, 1}, 0.25, 11.012644, {0.512, 0.5449999999999999}, {3.35, 
        2.2649999999999997`}, {{0.7313633310946945, 0.4432505036937541}, {
        0.4432505036937541, 0.2686366689053055}}}, {
       1, 2, {1, 1}, 0.25, 11.016004000000002`, {0.512, 0.5449999999999999}, {
        2.414, 3.265}, {{0.32839530559357094`, 0.46962945910331916`}, {
        0.46962945910331916`, 0.6716046944064291}}}, {
       1, 5, {1, 1}, 0.25, 13.481284000000002`, {0.512, 0.5449999999999999}, {
        3.39, 2.825}, {{0.6143987471816482, 0.4867370200049194}, {
        0.4867370200049194, 0.3856012528183517}}}, {
       1, 4, {1, 1}, 0.25, 13.667396000000004`, {0.512, 0.5449999999999999}, {
        2.926, 3.345}, {{0.4263720755585043, 0.494549217714918}, {
        0.494549217714918, 0.5736279244414957}}}, {
       1, 3, {1, 1}, 0.25, 17.752244, {0.512, 0.5449999999999999}, {3.45, 
        3.565}, {{0.4862395987797374, 0.4998106154917655}, {
        0.4998106154917655, 0.5137604012202626}}}}, {{
       2, 1, {1, 0}, 0.25, 0.5016039999999998, {0.41400000000000015`, 
        1.165}, {0.612, 1.845}, {{0.07815727147311416, 
        0.26841891212988717`}, {0.26841891212988717`, 0.9218427285268859}}}, {
       2, 5, {1, -1}, 0.25, 0.6825759999999997, {0.41400000000000015`, 
        1.165}, {-0.4099999999999997, 1.225}, {{
        0.9947258620285506, -0.07243149480790426}, {-0.07243149480790426, 
        0.0052741379714493445`}}}, {
       2, 3, {0, -1}, 0.25, 0.996496, {0.41400000000000015`, 
        1.165}, {-0.44999999999999973`, 0.6649999999999998}, {{
        0.7491209197026378, 0.43351905075384156`}, {0.43351905075384156`, 
        0.25087908029736217`}}}, {
       2, 3, {1, -1}, 0.25, 1.2236959999999995`, {0.41400000000000015`, 
        1.165}, {-0.34999999999999964`, 1.9649999999999999`}, {{
        0.4769942861625763, -0.49947045671473966`}, {-0.49947045671473966`, 
        0.5230057138374237}}}, {
       2, 4, {-1, 0}, 0.25, 1.658144, {0.41400000000000015`, 1.165}, {
        0.8260000000000002, -0.05499999999999994}, {{
        0.10236987861126658`, -0.3031341065673427}, {-0.3031341065673427, 
        0.8976301213887333}}}, {
       2, 2, {1, 0}, 0.6250000000000001, 1.6999999999999995`, {
        0.41400000000000015`, 1.165}, {0.5140000000000001, 2.465}, {{
        0.005882352941176469, 0.07647058823529411}, {0.07647058823529411, 
        0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.6250000000000001, 1.7000000000000002`, {
        0.41400000000000015`, 1.165}, {0.31400000000000017`, -0.135}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.25, 1.8760960000000004`, {0.41400000000000015`, 
        1.165}, {1.35, 0.1649999999999998}, {{
        0.46697823565531815`, -0.4989083714266221}, {-0.4989083714266221, 
        0.5330217643446818}}}, {
       2, 5, {1, 0}, 0.25, 1.8973760000000008`, {0.41400000000000015`, 
        1.165}, {1.4900000000000002`, 2.0250000000000004`}, {{
        0.6101985057258021, 0.48770512539422867`}, {0.48770512539422867`, 
        0.38980149427419775`}}}, {
       2, 4, {1, -1}, 0.25, 1.9953439999999996`, {0.41400000000000015`, 
        1.165}, {-0.8739999999999997, 1.745}, {{
        0.8314075166988749, -0.3743915836066363}, {-0.3743915836066363, 
        0.1685924833011251}}}, {
       2, 4, {1, 0}, 0.25, 2.2789439999999996`, {0.41400000000000015`, 
        1.165}, {1.0260000000000002`, 2.545}, {{0.1643498041198029, 
        0.37059269556426144`}, {0.37059269556426144`, 0.8356501958801971}}}, {
       2, 5, {0, -1}, 0.25, 2.391376, {0.41400000000000015`, 
        1.165}, {-0.5099999999999998, -0.07499999999999996}, {{
        0.35702290229558203`, 0.47912164377329197`}, {0.47912164377329197`, 
        0.6429770977044179}}}, {
       2, 4, {0, -1}, 0.25, 2.4449439999999996`, {0.41400000000000015`, 
        1.165}, {-0.9739999999999998, 0.44500000000000006`}, {{
        0.787970603825691, 0.4087455581804737}, {0.4087455581804737, 
        0.21202939617430913`}}}, {
       2, 1, {1, -1}, 0.25, 2.911204, {0.41400000000000015`, 
        1.165}, {-1.2879999999999998`, 1.045}, {{0.9950535929464236, 
        0.07015654004322616}, {0.07015654004322616, 0.004946407053576467}}}, {
       2, 2, {1, -1}, 0.91, 3.4899999999999993`, {0.41400000000000015`, 
        1.165}, {-1.3859999999999997`, 1.665}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.91, 3.4899999999999993`, {0.41400000000000015`, 
        1.165}, {2.214, 0.665}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {-1, 0}, 0.25, 3.686404000000001, {0.41400000000000015`, 
        1.165}, {0.41200000000000003`, -0.7550000000000001}, {{
        1.0850682670701449`*^-6, 0.0010416655363872805`}, {
        0.0010416655363872805`, 0.9999989149317329}}}, {
       2, 5, {-1, 0}, 0.25, 3.794976, {0.41400000000000015`, 1.165}, {
        1.29, -0.575}, {{
        0.20220839341276461`, -0.40164680883357357`}, {-0.40164680883357357`, 
        0.7977916065872354}}}, {
       2, 3, {1, 0}, 0.25, 3.850495999999999, {0.41400000000000015`, 1.165}, {
        1.5500000000000003`, 2.7649999999999997`}, {{0.33515058839172945`, 
        0.4720430822418723}, {0.4720430822418723, 0.6648494116082706}}}, {
       2, 1, {0, 1}, 0.25, 4.024403999999999, {0.41400000000000015`, 1.165}, {
        2.412, 1.345}, {{0.991949118428468, 0.08936478544400611}, {
        0.08936478544400611, 0.00805088157153208}}}, {
       2, 3, {-1, -1}, 0.25, 4.169296000000001, {0.41400000000000015`, 
        1.165}, {-0.5499999999999998, -0.6350000000000002}, {{
        0.2228903872500297, 0.41618537038387293`}, {0.41618537038387293`, 
        0.7771096127499704}}}, {
       2, 2, {0, 1}, 0.40499999999999997`, 4.25, {0.41400000000000015`, 
        1.165}, {2.314, 1.965}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.40499999999999997`, 4.25, {0.41400000000000015`, 
        1.165}, {-1.4859999999999998`, 0.365}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 1, {-1, 1}, 0.25, 4.856803999999999, {0.41400000000000015`, 
        1.165}, {2.312, 0.04499999999999993}, {{
        0.7417231578626602, -0.4376870056934561}, {-0.4376870056934561, 
        0.2582768421373398}}}, {
       2, 1, {0, -1}, 0.25, 5.263604000000001, {0.41400000000000015`, 
        1.165}, {-1.388, -0.2550000000000001}, {{0.6169164701599892, 
        0.4861383949096475}, {0.4861383949096475, 0.3830835298400108}}}, {
       2, 4, {-1, 1}, 0.25, 5.521743999999999, {0.41400000000000015`, 
        1.165}, {2.726, 0.7450000000000001}, {{
        0.9680535714803149, -0.17585748270836168`}, {-0.17585748270836168`, 
        0.03194642851968508}}}, {
       2, 4, {-1, -1}, 0.25, 6.294544, {0.41400000000000015`, 
        1.165}, {-1.0739999999999998`, -0.855}, {{0.3517560604866691, 
        0.47751830791873084`}, {0.47751830791873084`, 0.6482439395133309}}}, {
       2, 1, {1, 1}, 0.25, 6.592003999999999, {0.41400000000000015`, 1.165}, {
        2.512, 2.645}, {{0.6677186482289756, 0.47103126757811437`}, {
        0.47103126757811437`, 0.33228135177102447`}}}, {
       2, 4, {0, 1}, 0.25, 6.592143999999999, {0.41400000000000015`, 1.165}, {
        2.826, 2.045}, {{0.882526838005966, 0.3219832576472844}, {
        0.3219832576472844, 0.11747316199403411`}}}, {
       2, 5, {-1, -1}, 0.25, 7.500176, {0.41400000000000015`, 
        1.165}, {-0.6099999999999999, -1.375}, {{0.13980685253252723`, 
        0.3467865287427922}, {0.3467865287427922, 0.8601931474674728}}}, {
       2, 3, {-1, 1}, 0.25, 8.082896, {0.41400000000000015`, 1.165}, {3.25, 
        0.9649999999999999}, {{
        0.9950512786506222, -0.07017286873417652}, {-0.07017286873417652, 
        0.0049487213493777564`}}}, {
       2, 5, {0, 1}, 0.25, 8.400976, {0.41400000000000015`, 1.165}, {3.29, 
        1.5250000000000001`}, {{0.9845732210162248, 0.1232428232148265}, {
        0.1232428232148265, 0.015426778983775228`}}}, {
       2, 2, {1, 1}, 0.6050000000000001, 8.41, {0.41400000000000015`, 
        1.165}, {2.414, 3.265}, {{0.4756242568370987, 0.49940546967895366`}, {
        0.49940546967895366`, 0.5243757431629014}}}, {
       2, 2, {-1, -1}, 0.6050000000000001, 8.41, {0.41400000000000015`, 
        1.165}, {-1.5859999999999999`, -0.935}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       2, 5, {-1, 1}, 0.25, 8.589775999999999, {0.41400000000000015`, 
        1.165}, {3.19, 0.2250000000000001}, {{
        0.897133522457396, -0.30378440601943524`}, {-0.30378440601943524`, 
        0.10286647754260415`}}}, {
       2, 3, {0, 1}, 0.25, 9.830096, {0.41400000000000015`, 1.165}, {3.35, 
        2.2649999999999997`}, {{0.8769086283592755, 0.32854206103378836`}, {
        0.32854206103378836`, 0.1230913716407245}}}, {
       2, 1, {-1, -1}, 0.25, 11.016004000000002`, {0.41400000000000015`, 
        1.165}, {-1.488, -1.5550000000000002`}, {{0.32839530559357094`, 
        0.46962945910331916`}, {0.46962945910331916`, 0.6716046944064291}}}, {
       2, 4, {1, 1}, 0.25, 11.062544, {0.41400000000000015`, 1.165}, {2.926, 
        3.345}, {{0.5704062284407637, 0.49501814410862455`}, {
        0.49501814410862455`, 0.4295937715592363}}}, {
       2, 5, {1, 1}, 0.25, 11.612176000000002`, {0.41400000000000015`, 
        1.165}, {3.39, 2.825}, {{0.7626973618036791, 0.42542930799533174`}, {
        0.42542930799533174`, 0.2373026381963208}}}, {
       2, 3, {1, 1}, 0.25, 14.977296, {0.41400000000000015`, 1.165}, {3.45, 
        3.565}, {{0.6154178965281851, 0.48649636089184584`}, {
        0.48649636089184584`, 0.38458210347181493`}}}}, {{
       3, 5, {1, 0}, 0.25, 0.31520000000000054`, {1.4500000000000002`, 
        1.4649999999999999`}, {1.4900000000000002`, 2.0250000000000004`}, {{
        0.005076142131979696, 0.07106598984771574}, {0.07106598984771574, 
        0.9949238578680203}}}, {
       3, 1, {1, 0}, 0.25, 0.8466440000000004, {1.4500000000000002`, 
        1.4649999999999999`}, {0.612, 1.845}, {{
        0.829444252838265, -0.37612030558298415`}, {-0.37612030558298415`, 
        0.17055574716173505`}}}, {
       3, 1, {0, 1}, 0.25, 0.9398439999999995, {1.4500000000000002`, 
        1.4649999999999999`}, {2.412, 1.345}, {{
        0.984678308314997, -0.12282889500810766`}, {-0.12282889500810766`, 
        0.015321691685003023`}}}, {
       3, 2, {0, 1}, 0.25, 0.996496, {1.4500000000000002`, 
        1.4649999999999999`}, {2.314, 1.965}, {{0.7491209197026378, 
        0.43351905075384156`}, {0.43351905075384156`, 
        0.25087908029736217`}}}, {
       3, 2, {-1, 1}, 0.25, 1.2236959999999995`, {1.4500000000000002`, 
        1.4649999999999999`}, {2.214, 0.665}, {{
        0.4769942861625763, -0.49947045671473966`}, {-0.49947045671473966`, 
        0.5230057138374237}}}, {
       3, 4, {1, 0}, 0.25, 1.346176, {1.4500000000000002`, 
        1.4649999999999999`}, {1.0260000000000002`, 2.545}, {{
        0.13354568793382138`, -0.3401635447370923}, {-0.3401635447370923, 
        0.8664543120661786}}}, {
       3, 3, {1, 0}, 0.25, 1.6999999999999995`, {1.4500000000000002`, 
        1.4649999999999999`}, {1.5500000000000003`, 2.7649999999999997`}, {{
        0.005882352941176483, 0.07647058823529419}, {0.07647058823529419, 
        0.9941176470588234}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.4500000000000002`, 
        1.4649999999999999`}, {1.35, 0.1649999999999998}, {{
        0.00588235294117648, 0.07647058823529418}, {0.07647058823529418, 
        0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.25, 1.876096, {1.4500000000000002`, 
        1.4649999999999999`}, {0.5140000000000001, 2.465}, {{
        0.4669782356553183, -0.49890837142662214`}, {-0.49890837142662214`, 
        0.5330217643446817}}}, {
       3, 4, {-1, 1}, 0.25, 2.146575999999999, {1.4500000000000002`, 
        1.4649999999999999`}, {2.726, 0.7450000000000001}, {{
        0.7584991167328807, -0.42799323201228373`}, {-0.42799323201228373`, 
        0.2415008832671193}}}, {
       3, 4, {0, 1}, 0.25, 2.2297759999999998`, {1.4500000000000002`, 
        1.4649999999999999`}, {2.826, 2.045}, {{0.849132827692109, 
        0.3579193605097553}, {0.3579193605097553, 0.15086717230789107`}}}, {
       3, 1, {1, 1}, 0.25, 2.520244, {1.4500000000000002`, 
        1.4649999999999999`}, {2.512, 2.645}, {{0.447513812154696, 
        0.4972375690607735}, {0.4972375690607735, 0.552486187845304}}}, {
       3, 4, {-1, 0}, 0.25, 2.6997759999999995`, {1.4500000000000002`, 
        1.4649999999999999`}, {0.8260000000000002, -0.05499999999999994}, {{
        0.144225298691447, 0.35131803527403754`}, {0.35131803527403754`, 
        0.8557747013085529}}}, {
       3, 1, {-1, 1}, 0.25, 2.7594439999999993`, {1.4500000000000002`, 
        1.4649999999999999`}, {2.312, 0.04499999999999993}, {{
        0.269273085447648, -0.4435821129183994}, {-0.4435821129183994, 
        0.7307269145523521}}}, {
       3, 5, {0, 1}, 0.25, 3.3891999999999993`, {1.4500000000000002`, 
        1.4649999999999999`}, {3.29, 1.5250000000000001`}, {{
        0.9989378024312522, 0.03257405877493229}, {0.03257405877493229, 
        0.001062197568747797}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.4500000000000002`, 
        1.4649999999999999`}, {-0.34999999999999964`, 1.9649999999999999`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999993`, {1.4500000000000002`, 
        1.4649999999999999`}, {3.25, 0.9649999999999999}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 5, {1, -1}, 0.25, 3.5171999999999994`, {1.4500000000000002`, 
        1.4649999999999999`}, {-0.4099999999999997, 1.225}, {{
        0.9836233367451382, 0.126919140225179}, {0.126919140225179, 
        0.01637666325486179}}}, {
       3, 2, {-1, 0}, 0.25, 3.8504959999999997`, {1.4500000000000002`, 
        1.4649999999999999`}, {0.31400000000000017`, -0.135}, {{
        0.3351505883917294, 0.47204308224187225`}, {0.47204308224187225`, 
        0.6648494116082707}}}, {
       3, 2, {1, 1}, 0.25, 4.169296000000001, {1.4500000000000002`, 
        1.4649999999999999`}, {2.414, 3.265}, {{0.2228903872500297, 
        0.41618537038387293`}, {0.41618537038387293`, 0.7771096127499704}}}, {
       3, 5, {-1, 0}, 0.25, 4.1872, {1.4500000000000002`, 
        1.4649999999999999`}, {1.29, -0.575}, {{0.006113870844478422, 
        0.07795185326709982}, {0.07795185326709982, 0.9938861291555217}}}, {
       3, 3, {0, 1}, 0.25, 4.25, {1.4500000000000002`, 1.4649999999999999`}, {
        3.35, 2.2649999999999997`}, {{0.8494117647058823, 
        0.3576470588235293}, {0.3576470588235293, 0.15058823529411758`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.4500000000000002`, 
        1.4649999999999999`}, {-0.44999999999999973`, 0.6649999999999998}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       3, 5, {-1, 1}, 0.25, 4.565199999999999, {1.4500000000000002`, 
        1.4649999999999999`}, {3.19, 0.2250000000000001}, {{
        0.663191097870849, -0.4726189433102602}, {-0.4726189433102602, 
        0.33680890212915093`}}}, {
       3, 4, {1, -1}, 0.25, 5.479375999999999, {1.4500000000000002`, 
        1.4649999999999999`}, {-0.8739999999999997, 1.745}, {{
        0.9856918014022034, -0.11875804836171136`}, {-0.11875804836171136`, 
        0.014308198597796563`}}}, {
       3, 5, {1, 1}, 0.25, 5.613200000000001, {1.4500000000000002`, 
        1.4649999999999999`}, {3.39, 2.825}, {{0.670490985534098, 
        0.470034917694007}, {0.470034917694007, 0.32950901446590186`}}}, {
       3, 4, {1, 1}, 0.25, 5.712976000000001, {1.4500000000000002`, 
        1.4649999999999999`}, {2.926, 3.345}, {{0.38133820271606245`, 
        0.48571532595270833`}, {0.48571532595270833`, 0.6186617972839376}}}, {
       3, 1, {-1, 0}, 0.25, 6.005844, {1.4500000000000002`, 
        1.4649999999999999`}, {0.41200000000000003`, -0.7550000000000001}, {{
        0.1793992651157773, 0.3836862895539745}, {0.3836862895539745, 
        0.8206007348842226}}}, {
       3, 5, {0, -1}, 0.25, 6.213199999999999, {1.4500000000000002`, 
        1.4649999999999999`}, {-0.5099999999999998, -0.07499999999999996}, {{
        0.6182965299684543, 0.4858044164037856}, {0.4858044164037856, 
        0.38170347003154576`}}}, {
       3, 4, {0, -1}, 0.25, 6.916176, {1.4500000000000002`, 
        1.4649999999999999`}, {-0.9739999999999998, 0.44500000000000006`}, {{
        0.8495700514272626, 0.357492348372858}, {0.357492348372858, 
        0.15042994857273723`}}}, {
       3, 1, {1, -1}, 0.25, 7.673044, {1.4500000000000002`, 
        1.4649999999999999`}, {-1.2879999999999998`, 1.045}, {{
        0.977010427673815, 0.14987011673593947`}, {0.14987011673593947`, 
        0.022989572326185013`}}}, {
       3, 2, {1, -1}, 0.25, 8.082896, {1.4500000000000002`, 
        1.4649999999999999`}, {-1.3859999999999997`, 1.665}, {{
        0.9950512786506222, -0.07017286873417652}, {-0.07017286873417652, 
        0.0049487213493777564`}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.4500000000000002`, 1.4649999999999999`}, {
        3.45, 3.565}, {{0.4756242568370987, 0.49940546967895366`}, {
        0.49940546967895366`, 0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.4500000000000002`, 
        1.4649999999999999`}, {-0.5499999999999998, -0.6350000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 2, {0, -1}, 0.25, 9.830096, {1.4500000000000002`, 
        1.4649999999999999`}, {-1.4859999999999998`, 0.365}, {{
        0.8769086283592755, 0.32854206103378847`}, {0.32854206103378847`, 
        0.12309137164072455`}}}, {
       3, 1, {0, -1}, 0.25, 11.012644, {1.4500000000000002`, 
        1.4649999999999999`}, {-1.388, -0.2550000000000001}, {{
        0.7313633310946945, 0.4432505036937542}, {0.4432505036937542, 
        0.2686366689053056}}}, {
       3, 4, {-1, -1}, 0.25, 11.752976, {1.4500000000000002`, 
        1.4649999999999999`}, {-1.0739999999999998`, -0.855}, {{
        0.5420393949583492, 0.49822955479531306`}, {0.49822955479531306`, 
        0.45796060504165065`}}}, {
       3, 5, {-1, -1}, 0.25, 12.3092, {1.4500000000000002`, 
        1.4649999999999999`}, {-0.6099999999999999, -1.375}, {{
        0.3447502680921587, 0.47528677736977215`}, {0.47528677736977215`, 
        0.6552497319078412}}}, {
       3, 2, {-1, -1}, 0.25, 14.977296, {1.4500000000000002`, 
        1.4649999999999999`}, {-1.5859999999999999`, -0.935}, {{
        0.6154178965281851, 0.48649636089184584`}, {0.48649636089184584`, 
        0.38458210347181493`}}}, {
       3, 1, {-1, -1}, 0.25, 17.752244, {1.4500000000000002`, 
        1.4649999999999999`}, {-1.488, -1.5550000000000002`}, {{
        0.4862395987797374, 0.4998106154917655}, {0.4998106154917655, 
        0.5137604012202626}}}}, {{
       4, 1, {1, 0}, 0.25, 0.4585959999999999, {0.9260000000000002, 1.245}, {
        0.612, 1.845}, {{
        0.21499533358337214`, -0.4108191087580357}, {-0.4108191087580357, 
        0.785004666416628}}}, {
       4, 5, {1, 0}, 0.25, 0.9264960000000004, {0.9260000000000002, 1.245}, {
        1.4900000000000002`, 2.0250000000000004`}, {{0.34333229717127745`, 
        0.4748212620453839}, {0.4748212620453839, 0.6566677028287224}}}, {
       4, 3, {-1, 0}, 0.25, 1.3461760000000005`, {0.9260000000000002, 
        1.245}, {1.35, 0.1649999999999998}, {{
        0.13354568793382132`, -0.3401635447370922}, {-0.3401635447370922, 
        0.8664543120661786}}}, {
       4, 2, {1, 0}, 0.25, 1.6581439999999996`, {0.9260000000000002, 1.245}, {
        0.5140000000000001, 2.465}, {{
        0.10236987861126662`, -0.3031341065673428}, {-0.3031341065673428, 
        0.8976301213887333}}}, {
       4, 4, {1, 0}, 0.25, 1.6999999999999995`, {0.9260000000000002, 1.245}, {
        1.0260000000000002`, 2.545}, {{0.005882352941176483, 
        0.07647058823529419}, {0.07647058823529419, 0.9941176470588234}}}, {
       4, 4, {-1, 0}, 0.25, 1.7000000000000002`, {0.9260000000000002, 
        1.245}, {0.8260000000000002, -0.05499999999999994}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       4, 5, {1, -1}, 0.25, 1.7852959999999995`, {0.9260000000000002, 
        1.245}, {-0.4099999999999997, 1.225}, {{0.9997759475179465, 
        0.01496670580116688}, {0.01496670580116688, 
        0.00022405248205339663`}}}, {
       4, 2, {-1, 1}, 0.25, 1.9953439999999996`, {0.9260000000000002, 
        1.245}, {2.214, 0.665}, {{
        0.8314075166988749, -0.3743915836066363}, {-0.3743915836066363, 
        0.1685924833011251}}}, {
       4, 3, {1, -1}, 0.25, 2.146575999999999, {0.9260000000000002, 
        1.245}, {-0.34999999999999964`, 1.9649999999999999`}, {{
        0.7584991167328807, -0.42799323201228373`}, {-0.42799323201228373`, 
        0.2415008832671193}}}, {
       4, 1, {0, 1}, 0.25, 2.218195999999999, {0.9260000000000002, 1.245}, {
        2.412, 1.345}, {{0.9954918321014015, 0.06699137497317634}, {
        0.06699137497317634, 0.004508167898598672}}}, {
       4, 3, {0, -1}, 0.25, 2.229776, {0.9260000000000002, 
        1.245}, {-0.44999999999999973`, 0.6649999999999998}, {{
        0.8491328276921087, 0.35791936050975537`}, {0.35791936050975537`, 
        0.15086717230789118`}}}, {
       4, 2, {-1, 0}, 0.25, 2.278944, {0.9260000000000002, 1.245}, {
        0.31400000000000017`, -0.135}, {{0.16434980411980285`, 
        0.3705926955642614}, {0.3705926955642614, 0.8356501958801973}}}, {
       4, 2, {0, 1}, 0.25, 2.4449439999999996`, {0.9260000000000002, 1.245}, {
        2.314, 1.965}, {{0.787970603825691, 0.4087455581804737}, {
        0.4087455581804737, 0.21202939617430913`}}}, {
       4, 3, {1, 0}, 0.25, 2.6997759999999986`, {0.9260000000000002, 1.245}, {
        1.5500000000000003`, 2.7649999999999997`}, {{0.14422529869144712`, 
        0.3513180352740377}, {0.3513180352740377, 0.855774701308553}}}, {
       4, 1, {-1, 1}, 0.25, 3.360995999999999, {0.9260000000000002, 1.245}, {
        2.312, 0.04499999999999993}, {{
        0.5715555745975298, -0.4948533113398529}, {-0.4948533113398529, 
        0.4284444254024702}}}, {
       4, 5, {-1, 0}, 0.25, 3.444896, {0.9260000000000002, 1.245}, {
        1.29, -0.575}, {{
        0.038461538461538436`, -0.19230769230769226`}, {-0.19230769230769226`,
         0.9615384615384617}}}, {
       4, 4, {1, -1}, 0.25, 3.4899999999999993`, {0.9260000000000002, 
        1.245}, {-0.8739999999999997, 1.745}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       4, 4, {-1, 1}, 0.25, 3.4899999999999993`, {0.9260000000000002, 
        1.245}, {2.726, 0.7450000000000001}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       4, 5, {0, -1}, 0.25, 3.8044960000000003`, {0.9260000000000002, 
        1.245}, {-0.5099999999999998, -0.07499999999999996}, {{
        0.5420155521256954, 0.49823156602083424`}, {0.49823156602083424`, 
        0.4579844478743045}}}, {
       4, 4, {0, 1}, 0.25, 4.25, {0.9260000000000002, 1.245}, {2.826, 
        2.045}, {{0.8494117647058823, 0.3576470588235293}, {
        0.3576470588235293, 0.15058823529411758`}}}, {
       4, 4, {0, -1}, 0.25, 4.25, {0.9260000000000002, 
        1.245}, {-0.9739999999999998, 0.44500000000000006`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       4, 1, {-1, 0}, 0.25, 4.264196, {0.9260000000000002, 1.245}, {
        0.41200000000000003`, -0.7550000000000001}, {{0.061956814367819905`, 
        0.24107709870747035`}, {0.24107709870747035`, 0.9380431856321801}}}, {
       4, 1, {1, 1}, 0.25, 4.475395999999999, {0.9260000000000002, 1.245}, {
        2.512, 2.645}, {{0.5620499280957484, 0.49613486717153077`}, {
        0.49613486717153077`, 0.4379500719042516}}}, {
       4, 1, {1, -1}, 0.25, 4.941796, {0.9260000000000002, 
        1.245}, {-1.2879999999999998`, 1.045}, {{0.9919057767661797, 
        0.0896030511983903}, {0.0896030511983903, 0.008094223233820268}}}, {
       4, 3, {-1, 1}, 0.25, 5.479375999999999, {0.9260000000000002, 1.245}, {
        3.25, 0.9649999999999999}, {{
        0.9856918014022034, -0.11875804836171136`}, {-0.11875804836171136`, 
        0.014308198597796563`}}}, {
       4, 2, {1, -1}, 0.25, 5.521743999999999, {0.9260000000000002, 
        1.245}, {-1.3859999999999997`, 1.665}, {{
        0.9680535714803149, -0.17585748270836168`}, {-0.17585748270836168`, 
        0.03194642851968508}}}, {
       4, 5, {0, 1}, 0.25, 5.6668959999999995`, {0.9260000000000002, 1.245}, {
        3.29, 1.5250000000000001`}, {{0.9861652657821847, 
        0.11680468461041107`}, {0.11680468461041107`, 
        0.013834734217815187`}}}, {
       4, 3, {-1, -1}, 0.25, 5.712976000000001, {0.9260000000000002, 
        1.245}, {-0.5499999999999998, -0.6350000000000002}, {{
        0.38133820271606245`, 0.48571532595270833`}, {0.48571532595270833`, 
        0.6186617972839376}}}, {
       4, 5, {-1, 1}, 0.25, 6.166095999999999, {0.9260000000000002, 1.245}, {
        3.19, 0.2250000000000001}, {{
        0.831270872201795, -0.3745124954266038}, {-0.3745124954266038, 
        0.16872912779820493`}}}, {
       4, 2, {1, 1}, 0.25, 6.294544, {0.9260000000000002, 1.245}, {2.414, 
        3.265}, {{0.3517560604866691, 0.47751830791873084`}, {
        0.47751830791873084`, 0.6482439395133309}}}, {
       4, 2, {0, -1}, 0.25, 6.592143999999999, {0.9260000000000002, 
        1.245}, {-1.4859999999999998`, 0.365}, {{0.882526838005966, 
        0.32198325764728447`}, {0.32198325764728447`, 
        0.11747316199403417`}}}, {
       4, 3, {0, 1}, 0.25, 6.916175999999999, {0.9260000000000002, 1.245}, {
        3.35, 2.2649999999999997`}, {{0.8495700514272628, 
        0.3574923483728579}, {0.3574923483728579, 0.1504299485727372}}}, {
       4, 1, {0, -1}, 0.25, 7.604596000000001, {0.9260000000000002, 
        1.245}, {-1.388, -0.2550000000000001}, {{0.7041262941515892, 
        0.45643450355548143`}, {0.45643450355548143`, 
        0.29587370584841066`}}}, {
       4, 4, {1, 1}, 0.25, 8.41, {0.9260000000000002, 1.245}, {2.926, 
        3.345}, {{0.4756242568370987, 0.49940546967895366`}, {
        0.49940546967895366`, 0.5243757431629014}}}, {
       4, 4, {-1, -1}, 0.25, 8.41, {0.9260000000000002, 
        1.245}, {-1.0739999999999998`, -0.855}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       4, 5, {1, 1}, 0.25, 8.567696000000002, {0.9260000000000002, 1.245}, {
        3.39, 2.825}, {{0.708626449864701, 0.45439520729960536`}, {
        0.45439520729960536`, 0.2913735501352989}}}, {
       4, 5, {-1, -1}, 0.25, 9.223696, {0.9260000000000002, 
        1.245}, {-0.6099999999999999, -1.375}, {{0.2557864005925607, 
        0.4363023239274148}, {0.4363023239274148, 0.7442135994074394}}}, {
       4, 2, {-1, -1}, 0.25, 11.062544, {0.9260000000000002, 
        1.245}, {-1.5859999999999999`, -0.935}, {{0.5704062284407637, 
        0.49501814410862455`}, {0.49501814410862455`, 0.4295937715592363}}}, {
       4, 3, {1, 1}, 0.25, 11.752976, {0.9260000000000002, 1.245}, {3.45, 
        3.565}, {{0.5420393949583492, 0.49822955479531306`}, {
        0.49822955479531306`, 0.45796060504165065`}}}, {
       4, 1, {-1, -1}, 0.25, 13.667396000000004`, {0.9260000000000002, 
        1.245}, {-1.488, -1.5550000000000002`}, {{0.4263720755585043, 
        0.494549217714918}, {0.494549217714918, 0.5736279244414957}}}}, {{
       5, 3, {-1, 0}, 0.25, 0.3152000000000003, {1.3900000000000001`, 
        0.7250000000000001}, {1.35, 0.1649999999999998}, {{
        0.005076142131979699, 0.07106598984771575}, {0.07106598984771575, 
        0.9949238578680203}}}, {
       5, 2, {-1, 1}, 0.25, 0.6825759999999997, {1.3900000000000001`, 
        0.7250000000000001}, {2.214, 0.665}, {{
        0.9947258620285506, -0.07243149480790426}, {-0.07243149480790426, 
        0.0052741379714493445`}}}, {
       5, 4, {-1, 0}, 0.25, 0.926496, {1.3900000000000001`, 
        0.7250000000000001}, {0.8260000000000002, -0.05499999999999994}, {{
        0.34333229717127756`, 0.47482126204538394`}, {0.47482126204538394`, 
        0.6566677028287226}}}, {
       5, 1, {-1, 1}, 0.25, 1.3124839999999998`, {1.3900000000000001`, 
        0.7250000000000001}, {2.312, 0.04499999999999993}, {{
        0.6476909432800703, -0.47768963278790455`}, {-0.47768963278790455`, 
        0.3523090567199298}}}, {
       5, 1, {0, 1}, 0.25, 1.4288839999999994`, {1.3900000000000001`, 
        0.7250000000000001}, {2.412, 1.345}, {{0.7309788618250327, 
        0.44345097292712354`}, {0.44345097292712354`, 0.2690211381749673}}}, {
       5, 5, {1, 0}, 0.25, 1.7000000000000006`, {1.3900000000000001`, 
        0.7250000000000001}, {1.4900000000000002`, 2.0250000000000004`}, {{
        0.005882352941176479, 0.07647058823529418}, {0.07647058823529418, 
        0.9941176470588236}}}, {
       5, 5, {-1, 0}, 0.25, 1.7000000000000002`, {1.3900000000000001`, 
        0.7250000000000001}, {1.29, -0.575}, {{0.00588235294117648, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588234}}}, {
       5, 4, {-1, 1}, 0.25, 1.7852959999999995`, {1.3900000000000001`, 
        0.7250000000000001}, {2.726, 0.7450000000000001}, {{
        0.9997759475179465, 0.01496670580116688}, {0.01496670580116688, 
        0.00022405248205339663`}}}, {
       5, 1, {1, 0}, 0.25, 1.8596840000000001`, {1.3900000000000001`, 
        0.7250000000000001}, {0.612, 1.845}, {{
        0.3254768014350826, -0.468552721860273}, {-0.468552721860273, 
        0.6745231985649173}}}, {
       5, 2, {-1, 0}, 0.25, 1.8973760000000004`, {1.3900000000000001`, 
        0.7250000000000001}, {0.31400000000000017`, -0.135}, {{
        0.6101985057258023, 0.4877051253942286}, {0.4877051253942286, 
        0.3898014942741976}}}, {
       5, 2, {0, 1}, 0.25, 2.391376, {1.3900000000000001`, 
        0.7250000000000001}, {2.314, 1.965}, {{0.35702290229558203`, 
        0.47912164377329197`}, {0.47912164377329197`, 0.6429770977044179}}}, {
       5, 1, {-1, 0}, 0.25, 3.146884000000001, {1.3900000000000001`, 
        0.7250000000000001}, {0.41200000000000003`, -0.7550000000000001}, {{
        0.30394637997460344`, 0.45995975701678227`}, {0.45995975701678227`, 
        0.6960536200253966}}}, {
       5, 3, {0, -1}, 0.25, 3.3891999999999993`, {1.3900000000000001`, 
        0.7250000000000001}, {-0.44999999999999973`, 0.6649999999999998}, {{
        0.9989378024312522, 0.03257405877493229}, {0.03257405877493229, 
        0.001062197568747797}}}, {
       5, 4, {1, 0}, 0.25, 3.444895999999999, {1.3900000000000001`, 
        0.7250000000000001}, {1.0260000000000002`, 2.545}, {{
        0.03846153846153845, -0.19230769230769226`}, {-0.19230769230769226`, 
        0.9615384615384616}}}, {
       5, 5, {1, -1}, 0.25, 3.4899999999999993`, {1.3900000000000001`, 
        0.7250000000000001}, {-0.4099999999999997, 1.225}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       5, 5, {-1, 1}, 0.25, 3.4899999999999993`, {1.3900000000000001`, 
        0.7250000000000001}, {3.19, 0.2250000000000001}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       5, 3, {-1, 1}, 0.25, 3.5171999999999994`, {1.3900000000000001`, 
        0.7250000000000001}, {3.25, 0.9649999999999999}, {{0.9836233367451382,
         0.126919140225179}, {0.126919140225179, 0.01637666325486179}}}, {
       5, 2, {1, 0}, 0.25, 3.7949759999999992`, {1.3900000000000001`, 
        0.7250000000000001}, {0.5140000000000001, 2.465}, {{
        0.2022083934127647, -0.4016468088335737}, {-0.4016468088335737, 
        0.7977916065872352}}}, {
       5, 4, {0, 1}, 0.25, 3.8044959999999994`, {1.3900000000000001`, 
        0.7250000000000001}, {2.826, 2.045}, {{0.5420155521256956, 
        0.49823156602083435`}, {0.49823156602083435`, 0.4579844478743045}}}, {
       5, 3, {1, 0}, 0.25, 4.187199999999998, {1.3900000000000001`, 
        0.7250000000000001}, {1.5500000000000003`, 2.7649999999999997`}, {{
        0.006113870844478424, 0.07795185326709983}, {0.07795185326709983, 
        0.9938861291555217}}}, {
       5, 5, {0, 1}, 0.25, 4.25, {1.3900000000000001`, 0.7250000000000001}, {
        3.29, 1.5250000000000001`}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       5, 5, {0, -1}, 0.25, 4.25, {1.3900000000000001`, 
        0.7250000000000001}, {-0.5099999999999998, -0.07499999999999996}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       5, 3, {1, -1}, 0.25, 4.565199999999999, {1.3900000000000001`, 
        0.7250000000000001}, {-0.34999999999999964`, 1.9649999999999999`}, {{
        0.663191097870849, -0.4726189433102602}, {-0.4726189433102602, 
        0.33680890212915093`}}}, {
       5, 1, {1, 1}, 0.25, 4.945283999999999, {1.3900000000000001`, 
        0.7250000000000001}, {2.512, 2.645}, {{0.2545625286636723, 
        0.43561502231216653`}, {0.43561502231216653`, 0.7454374713363279}}}, {
       5, 3, {-1, -1}, 0.25, 5.613200000000001, {1.3900000000000001`, 
        0.7250000000000001}, {-0.5499999999999998, -0.6350000000000002}, {{
        0.670490985534098, 0.470034917694007}, {0.470034917694007, 
        0.32950901446590186`}}}, {
       5, 4, {0, -1}, 0.25, 5.6668959999999995`, {1.3900000000000001`, 
        0.7250000000000001}, {-0.9739999999999998, 0.44500000000000006`}, {{
        0.9861652657821847, 0.11680468461041107`}, {0.11680468461041107`, 
        0.013834734217815187`}}}, {
       5, 4, {1, -1}, 0.25, 6.166095999999999, {1.3900000000000001`, 
        0.7250000000000001}, {-0.8739999999999997, 1.745}, {{
        0.831270872201795, -0.3745124954266038}, {-0.3745124954266038, 
        0.16872912779820493`}}}, {
       5, 3, {0, 1}, 0.25, 6.213199999999999, {1.3900000000000001`, 
        0.7250000000000001}, {3.35, 2.2649999999999997`}, {{
        0.6182965299684543, 0.48580441640378547`}, {0.48580441640378547`, 
        0.3817034700315456}}}, {
       5, 1, {1, -1}, 0.25, 7.274084, {1.3900000000000001`, 
        0.7250000000000001}, {-1.2879999999999998`, 1.045}, {{
        0.9859226261340946, -0.11781002254029503`}, {-0.11781002254029503`, 
        0.014077373865905301`}}}, {
       5, 2, {1, 1}, 0.25, 7.500176, {1.3900000000000001`, 
        0.7250000000000001}, {2.414, 3.265}, {{0.13980685253252723`, 
        0.3467865287427922}, {0.3467865287427922, 0.8601931474674728}}}, {
       5, 2, {0, -1}, 0.25, 8.400976, {1.3900000000000001`, 
        0.7250000000000001}, {-1.4859999999999998`, 0.365}, {{
        0.9845732210162248, 0.1232428232148265}, {0.1232428232148265, 
        0.015426778983775228`}}}, {
       5, 5, {1, 1}, 0.25, 8.41, {1.3900000000000001`, 0.7250000000000001}, {
        3.39, 2.825}, {{0.4756242568370987, 0.49940546967895366`}, {
        0.49940546967895366`, 0.5243757431629014}}}, {
       5, 5, {-1, -1}, 0.25, 8.41, {1.3900000000000001`, 
        0.7250000000000001}, {-0.6099999999999999, -1.375}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       5, 4, {-1, -1}, 0.25, 8.567696000000002, {1.3900000000000001`, 
        0.7250000000000001}, {-1.0739999999999998`, -0.855}, {{
        0.708626449864701, 0.45439520729960536`}, {0.45439520729960536`, 
        0.2913735501352989}}}, {
       5, 2, {1, -1}, 0.25, 8.589775999999999, {1.3900000000000001`, 
        0.7250000000000001}, {-1.3859999999999997`, 1.665}, {{
        0.897133522457396, -0.30378440601943524`}, {-0.30378440601943524`, 
        0.10286647754260415`}}}, {
       5, 1, {0, -1}, 0.25, 8.677684000000001, {1.3900000000000001`, 
        0.7250000000000001}, {-1.388, -0.2550000000000001}, {{
        0.8893253084578787, 0.31372887051429854`}, {0.31372887051429854`, 
        0.11067469154212117`}}}, {
       5, 4, {1, 1}, 0.25, 9.223696, {1.3900000000000001`, 
        0.7250000000000001}, {2.926, 3.345}, {{0.2557864005925607, 
        0.4363023239274148}, {0.4363023239274148, 0.7442135994074394}}}, {
       5, 2, {-1, -1}, 0.25, 11.612176000000002`, {1.3900000000000001`, 
        0.7250000000000001}, {-1.5859999999999999`, -0.935}, {{
        0.7626973618036791, 0.42542930799533174`}, {0.42542930799533174`, 
        0.2373026381963208}}}, {
       5, 3, {1, 1}, 0.25, 12.3092, {1.3900000000000001`, 
        0.7250000000000001}, {3.45, 3.565}, {{0.3447502680921587, 
        0.47528677736977215`}, {0.47528677736977215`, 0.6552497319078412}}}, {
       5, 1, {-1, -1}, 0.25, 13.481284000000002`, {1.3900000000000001`, 
        0.7250000000000001}, {-1.488, -1.5550000000000002`}, {{
        0.6143987471816482, 0.4867370200049194}, {0.4867370200049194, 
        0.3856012528183517}}}}}}, $CellContext`dynamics$$ = {{
      Complex[1.3505133623499692`, -3.578394121083934*^-19], {Complex[
      0.7847662386407748, 0.], Complex[
      0.6021308841617853, -0.003486508837476742], Complex[
      0.09270777119778875, -0.06281639284820464], Complex[
      0.08495790448843302, -0.020246980866125693`], Complex[
      0.004780133180904822, -0.014623207362566103`], Complex[
      0.021719324127973564`, 0.015066922960807328`], 
      Complex[-0.0047259277557153015`, -0.004485183626732971], Complex[
      0.012486850098942015`, 0.00635622107714116], 
      Complex[-0.004366442188420114, 0.0024409437221818656`], Complex[
      0.01374605707198011, 0.0034052963843355676`]}}, {
      Complex[1.1889424216643592`, -6.209874468358036*^-17], {
      Complex[-0.1236059139425359, -0.03795701851632229], 
      Complex[-0.0397988408925733, -0.05555529804288045], Complex[
      0.8747916725854727, 0.], Complex[
      0.45868677432542604`, -0.0035872769018456263`], 
      Complex[-0.010357274555231813`, 0.0007622019761032738], Complex[
      0.008795984227420863, 0.003950879282727478], 
      Complex[-0.04700497444410873, 0.0048598447331600035`], Complex[
      0.005477973212982065, 0.0015364295035554063`], Complex[
      0.010849562467314196`, 0.014326877337425848`], Complex[
      0.012344675397119243`, 0.0013989858594421764`]}}, {
      Complex[0.997261962823056, 1.8554558065539142`*^-19], {
      Complex[-0.5815506099298722, -0.0011727211383385347`], Complex[
      0.7436319390249639, 0.], 
      Complex[-0.14077087541177707`, -0.10486717616467206`], Complex[
      0.17194665877990406`, 0.15914899652398679`], 
      Complex[-0.002202799014222721, 0.05399850830150872], Complex[
      0.07924009689187737, 0.061059145072888434`], 
      Complex[-0.0027052670871910204`, 0.022573117737774852`], Complex[
      0.07009356798428226, 0.02925378762816132], 
      Complex[-0.0047374019017521335`, 0.010036178243072524`], Complex[
      0.061322437947238136`, -0.0020402003224069187`]}}, {
      Complex[0.9102354628029123, 6.307700100169133*^-17], {Complex[
      0.1137266919552377, -0.10904273407851496`], Complex[-0.2041273142480412,
       0.1621050476444989], 
      Complex[-0.429689318447231, -0.002793040104576927], Complex[
      0.8439287636212973, 0.], Complex[-0.01289395384134951, 
      0.011379775301203845`], Complex[0.06618881318129759, 
      0.015476988400438513`], Complex[
      0.037455529199141524`, -0.0013999006641617733`], Complex[
      0.061178671814670814`, 0.004695021008607723], Complex[
      0.004139438578091276, 0.003287494801576768], Complex[
      0.012298852292395716`, -0.010403938172188248`]}}, {
      Complex[0.735231822739684, -2.6690990948594875`*^-17], {Complex[
      0.013268792154348218`, -0.04319184101381244], 
      Complex[-0.043568141566507394`, 0.048215826845556795`], Complex[
      0.02610001873007492, -0.010551088207550643`], 
      Complex[-0.046192548715892914`, 0.021919316647395534`], Complex[
      0.815117121315079, 0.], Complex[0.5672275836336119, 
      0.014687972516731401`], 
      Complex[-0.03663799377271004, -0.007149485478929844], Complex[
      0.015412245201941548`, 0.0013194026831571805`], Complex[
      0.023491801344418306`, 0.02410963808847372], Complex[
      0.030695431704923417`, 0.015551085889027701`]}}, {
      Complex[0.6341327273525855, -1.3097719139603684`*^-17], {Complex[
      0.010149941806165881`, -0.012638973679170839`], 
      Complex[-0.024280292548175424`, 0.011481511814454103`], Complex[
      0.06822494508986353, 0.006164688832204706], 
      Complex[-0.057517596010180826`, -0.0018768061520899847`], 
      Complex[-0.032695382441015414`, -0.027551366720348882`], Complex[
      0.0634918749476144, 0.02630477882120423], Complex[0.8409820780598873, 
      0.], Complex[0.5079419040303715, 0.018484628796183317`], Complex[
      0.07680843748027597, 0.06790638913523984], Complex[0.08243124579016817, 
      0.039458460345252196`]}}, {
      Complex[0.5313264068079205, 2.2223091675500108`*^-17], {Complex[
      0.03351978914829984, 0.008217000376650893], 
      Complex[-0.058944402186325684`, 0.023186572084719154`], Complex[
      0.02182801883883195, 0.01986887022082264], Complex[-0.08263148131234697,
       0.0018070031547187185`], Complex[-0.4940911988247095, 
      0.0348856438755096], Complex[0.6779286786190795, 0.], 
      Complex[-0.1992007946606211, 0.07613059718582973], Complex[
      0.18968485209261118`, 0.05963254969667167], Complex[
      0.1961656724907182, -0.274559691083341], Complex[
      0.19024427200914645`, -0.2170112504246879]}}, {
      Complex[0.5175194964382984, 8.531018640978656*^-18], {Complex[
      0.011654673253959715`, -0.011862613441617341`], Complex[
      0.004814353800755006, 0.016244133889740546`], 
      Complex[-0.014518095959832793`, 0.008788597332623807], Complex[
      0.00737745986916109, 0.024102699798608067`], Complex[
      0.14601933372232986`, 0.2112016017578303], 
      Complex[-0.26071673458311584`, -0.25396714288906774`], 
      Complex[-0.04512633674945943, 0.11297949700576176`], 
      Complex[-0.04290187268382623, -0.025791243847172567`], Complex[
      0.7695113596494003, 0.], Complex[0.43664438994529253`, 
      0.0003998553732447452]}}, {
      Complex[0.44387981058585185`, 1.1715809895301174`*^-17], {Complex[
      0.01731883331295701, -0.00008797851595078282], 
      Complex[-0.030346951782846306`, 0.007084689308755451], 
      Complex[-0.0077828685717515125`, 0.0007198759963979705], 
      Complex[-0.03326080344815663, -0.005100016464545153], Complex[
      0.13221070822073727`, -0.028979454183261658`], 
      Complex[-0.2460991892200824, 0.03645975442627642], 
      Complex[-0.47086663860476513`, -0.003067374883661811], Complex[
      0.8200028157189447, 0.], Complex[-0.0442012659536738, 
      0.09420347914926527], 
      Complex[-0.04506768978148814, -0.10165318855570583`]}}, {
      Complex[0.39406544453270653`, -1.0404601238067239`*^-17], {Complex[
      0.017857308098809907`, 0.002320662503309336], 
      Complex[-0.04001658253678606, 0.002358538195388485], Complex[
      0.0018262339262886769`, 0.005980446715618481], 
      Complex[-0.01267002488452573, -0.013059674375003877`], Complex[
      0.024067625689766267`, 0.00504104546853211], 
      Complex[-0.062374481679277304`, -0.007072814386887424], 
      Complex[-0.018113805831179518`, 0.06948324715027637], 
      Complex[-0.018822189403997616`, -0.12980974392342134`], 
      Complex[-0.5202895709256888, 0.017774344674337306`], Complex[
      0.8365257626695496, 0.]}}}, $CellContext`dynMeshSize$$ = 
    6, $CellContext`dynPlot$$ = {CompressedData["
1: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
XOHSP+0YRYL/A0fAYmM=
     "], {
     4.2, 7.6000000000000005`, 14.200000000000001`, 20, 26.900000000000002`}, 
     5, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 6}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 6, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJx8vXVY1Uv3/o8d2N3deuyuARtsDOzuxg7EOnYdO1AsbFRMLNzYHQjSAnuD
bDo2ISri1985s+b97Ht9/D3/PNe1rn3Nnllr1j33eh2E6hPm2k3OaWFhca68
hUWu3/9vV/nErZeX8nj1OxicmTXzh67C5/zWfY6nC4q3LNbpx8+eJl3UL937
xg/TIG7QTdh1P3BhNy1uIf93xvrAszbT2efFuKzTyca6bH2RNT3X4rR0LS73
IypP2/Et2iddlKvbyMXDmKWjfW79NMzFqY4Wp33me22zy6Ehxg26iqEtRs22
yFBx2meBmdfP3c79FT8v7Epe75kzKgPXF+8ul2yt82X7EclWrhalG1A8Xu3T
MuHW8AuztDjtM8Nygd/44hkQN+gsnIqnva2gxWmfDZ+WcYhoi+sYxAOHPAFP
N6Xh+mLu7CL7Sq9Kw/2I6tvb6K3KpQtal/a5fmS7xk2eaHHa56T6+n4+RTFu
0O27/MQyrnWaitP/it+teb10dCp+XuDnaZ+4Pu2T9iP3L2iftH+K0z7hvIL2
CflR3wP5pM8LyD+tL6BetB9hXt8stU/z+5Cl9gn3R+0T7pvaJ9xPtU+4z2qf
cP/VPqlfZH9Z0T6pvyhO+4R+tKJ9Qv9a/aHf6fMC9IHWF6AntB+B+kP7zJ5R
IrVu7lSmSy+vVpoZ553CdMklZv2Mcp+SmS45lYvueSUmmemSx46FPbsn4Dom
kWLfYET+4yamSz0b3mvZw8bEdGnLyduvrq00MV3K2eLuupJ3MW7Q9Qza57Zp
aSrTpb3nW5Q9kJ3KdCnFkOLuE4Fxk9jW1Lu+ZcNUpksnLmyzfD/CxHSp9fHW
pb8/SmG6FBkX/LbWGRPTpTzzM7pEJJiYLg0r+Hjg1b7s86L51MoWIdvY+mLz
ocq+V06mMF0q0Wrd6PSdJqZLotD8gYO3mpguNYqZmzHzRgrTpf0dqpydmiOZ
6dLzfdHdLU8mMl3Cz9M+cX3aJ+0HdYn2j7oE51X9DvlR3wP5VP0O+Vf9DvVS
/W5eX02XzO+Dpktwf9Q+4b6pfcL9VPuE+6z2Cfdf7ZP6BXWJ+gt1CfpR6RL0
r9Il6HelS6APSpdAT5Quof7QPu/UavC4T3gS0yUHq7Dwu1cSmS7tHVXkS8U9
CUyX/C+6X11hkcB06ZuV65HDafFMl9Lqe3h2bpfAdKnh8eWHdh9IYLpU90XB
yzceJjFdKv04PMXjayLTpdqdx5SPG5rIdKnaGeuAjwXY58WS/P4zB1TBuEns
qj3mdvqGRKZLOesO39y1chLTpSEdp+5PNCUwXUqP3jqk3zmMG3TnL+aP9ByS
wHTJZWo75w9t2OdF0MfuLkPWsPWFnX7I3dHDE5kufduRVLnI2SSmSw8uzPE+
lJLAdMn0YHHrjt0wbtBVWi96LzkTz3TJoVSFzrXHxjNdws/TPnF92iftB3WJ
9o+6BOdV/Q75Ud8D+VT9DvlX/Q71Uv1uXl9Nl8zvg6ZLcH/UPuG+qX3C/VT7
hPus9gn3X+2T+gV1ifoLdQn6UekS9K/SJeh3pUugD0qXQE+ULqH+0D5r+R4L
CqiNemLStbl1aOyw27FMlw4OL9qli5eR6dI3x+721l5RTJceeXU4eqKEkenS
8J0F6/9aGs10aeO67pc+lo1hunRPf3da9wXxTJemLD4YF3cslulSg+LNPTYs
jmG69GXb5M47fkQzXdpwMWeZ64NjmC6V7fT4lckylunSpwbZRe/2jGO61OaD
389Ht2OYLm34p12liq0xbtDlz5lm9JgTzXRphFvxrh+FkenSoVlunpFbMG4S
YvzSWqXnxDBdKnvIa1/b6fFMl8LLhocVrxnLdMlhfI7ExBrRTJfO7FyV4/aE
KKZL/Wskdx3TNorpEn5e3U9Yn/ZJ+0Fdov2jLsF5Vb9DftT3QD5Vv0P+Vb9D
vVS/m9dX0yXz+6DpEtwftU+4b2qfcD/VPuE+q33C/Vf7pH5BXaL+Ql2CflS6
BP2rdAn6XekS6IPSJdATpUuoP7TPKj0a1+7ixHRDV1qvm9D0FNMZ3YTFffKV
zhHFdOmffb8mfT3xhelSrlv6JZlHcZ3ffdR8iNMjGyPTpb+C6tTftd3IdKlm
yytVc+UzMl1a5Wv6EfQ8iunSJI8V01/OMzJdsp81renH/VyX/m5WYGGJ8Rg3
iVdx67r7jWX7EZUXrHjcJC6K6VL+PTtujh7CdEPXs3GZh5MeMJ3RHS5oc2fg
ZiPTpe2f9w268CiK6dLw57V+pObEuEn8uF05K8yG7UeUHfO2ktuvKKZLpV6n
vK43ych0Se//8GBOT6Yzui05Z7w8POYL06UlX9e+XDIkkukSfp72ievTPmk/
TJfk/lGX4Lyq3yE/6nsgn6rfIf+q36Feqt/N66vpkvl90HQJ7o/aJ9w3tU+4
n2qfcJ/VPuH+q31Sv6AuUX+hLkE/Kl2C/lW6BP2u8SVzfVC6BHqidAn1h/Y5
79VQnxlNIpkuxU17XbNpjQimS9Me5eo17pCB6VL0sFKP1t81MF2aWvB0yueT
uI5JLLL/WPRpx0imSweqp1VY8Fck06Vnq0a61tBFMF0y3J8YmngL4wZd47vV
B6zYE8l0aXvo4fYzc35hurQuTPQZ8zWS6dKTCZ3b/JjH9iM+u1f5luN+BNOl
JTNGuxxOjmC6JJ4ljLk9O5LpUt/3jtt/rIhkujR1RvttIaG4zu+5+PDLppmf
DEyXyk6z6HfnjYHpUrfolov/OhfBdGlFimduS0vUE5Ou+JlbtqvtIpgurehR
K2bffgPTpRZdEifmmmtguoSfp33i+rRP2g/qEu0fdQnOq/od8qO+B/Kp+h3y
r/od6qX63by+mi6Z3wdNl+D+qH3CfdP00/x+qn3CfVb7hPuv9kn9grpE/YW6
BP2odAn6V+kS9LvSJdAHpUugJ0qXUH9on1OKb/W+e0bPdGn6i+1HThwNZ7r0
NOB+Dq+UMKZLaRvPbnVwC2O65N+oS+SvIWx9UeDJwXXXn+iZLuW+bT3h+k09
06XR5UaN7btQz3SplsW+RlUvYtygyxm1eLNnpp7pkkWTyoXTShqYLrnr45u2
Kopxk6j3bdz3flFsP+J0ZsEimzfrmS7lqV7f3WG9nunS1mLBfce/x7hBV2tx
q5GzQvRMl679mu/vvot9XuQ70OzKlePhTJeMRSy2fXANZ7o0r1OnNaW76Zku
lb7q/n3LVT3TpZM+lm/Sa2DcoPswuF91l8+hTJd22Fi39boQynQJP0/7xPVp
n7Qf1CXaP+oSnFf1O+RHfQ/kU/U75F/1O9RL9bt5fTVdMr8Pmi7B/VH7hPum
5dX8fqp9wn1W+4T7r/ZJ/YK6RP2FugT9qHQJ+lfpEvS70iXQB6VLoCdKl1B/
1Fz84c2louGoPyZdieykkEJVuS5Z/RhRzaZ5CNOl+l1/tJxY9jPTpbZJQ+dM
jgllupS7ut+iC3XDmC69y73R3X1zGNMlrxInXBp4hTNd2ukRXuLGlzCmS40v
1LiqvxrGdKnr9pjsYzfY58X9Y+NOeL7AuEnse9nLrkoG24+we1PG3r0H0wHd
5IOVW37MwXRD57rq+PxbzmFMlzbkvrD0cZcwpkt717d7/zArlOnSwXUJhfJ+
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
C7H4wi3HoLqsL0R+Y0Jyg+qsL4RzzdqTV1RIV+9aR9mPr3c8nJxVQnvXesj+
bZ52wrF2Ge3eUn/Re0f7Vz9HId9H2j/F6d/1QH3FH+or/lBf9e+JaP/UX9E1
mtffFpim9k/xWZXW5ep+Svv8MNlfG57069L4s/b5brIfz42932rzBXafRZpV
eq3+C9PwPounX0eVOzqE3WeB91n2uzgr14d+F+vlfqDf1b+TMj+vQfdEfq/5
eQ062id9vpfsl8Iyn/R5a9lf62X+Qd8E5Q30TVCeQd8E6pvUf0H3B/Rf0H0D
/Wfnxb6g/VN8kuwjuJ/irsXShR27svspql4e5n1zHbuf6t+dkY9tLf0Y9S/5
WCvp35rIficfayP9HukD+EZdNfm94Bt1tE+ol/hDvQTVi/ZJ95z0ivZJcdI3
2qfieFIPaZ3m0o81lHpO6wyQ/m2c1H9ap7P0e/vkewH3U4yWOg/3U9SW7wL0
o6gi3zvoR0Hvo/l5Dbpk+X6Zn9ego/fO/LwGXVX5PtI6FaUfo/ed1mki/Rv5
AVpnsPR75B9AfwS9+6A/gnwC6K0g/wN6K8gv0T7pnkdJP0b7RP9G+0S/l/Wf
T1PzI80LZ/7zdSpO8wV9nvwb+Un6vJV8Lw5I/wlzn47eF5j7dAXkewRzn47e
L6iLIJ8MdRHkq6Eugnw47Z/u+SHpn2n/FH8l/TZ9vpPU/59yXqDPD5DvxUo5
X8A9FDQXwD0UheUcAfdQ0NwBfSc6yDkI+k4UkHMT9J3wl3OW+XkNOpqPzM9r
0NE8RZ8fKufiaDkP0ufHyTm6p5wfQWcEzX2gM4LmRNAZQXMl6KqoL+dc0FXx
UM7FoKtiuJyjaf90z6/KOZ32T/FGcq6H+6+jOQXuv47mGsiPIG4A+RHEGSD/
IkFyCci/qCc5Btw3QbwF7psgPgP3WRBvgfssSko+A/0riP9A/wriRciRijf6
2nhoCRPjSCPOeJu87EyMI2VWuzBxyjwT40h1/2kzSl8klXGkzo/sF36vZ2Ic
6cbH3SsLrDYxjrQ6PKrhwKAUxpHGnfg6d2g1E+NIYkL+GyOnmBhH+hzRe92E
jymMI1UKLX7E7b2JcaT61uffWoWlMI7kO33GoI++JsaRoua4ttpQ3MQ4Ur+n
42qObpfKONL9x8HLm1uZGEdqu6K7a7H0FMaRblpWtny41sQ4Upuetm/idpkY
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
7e+yeyLoniDPWSv7CHkO9R3ynK+yT5Hn3JLfizyH9ok8x1vqAPIc0g3kOaQz
yHP+kH9B+UeeU1bqJPKcSlJXkeeQDiPPId1GnkM6jzwnt3wXkOfUk+8I8pze
8t1BnnNWvl/Ic9Lle4c8p4t8N5HnNJTvLPKcj/JdRp5jKd9x5Dnd5LuPPOep
9DnIcwKkL0KeEyt9FPKcYOlnkOeMkv4HeQ75duQ55POR5xyXvg55jk76QOQ5
pPPIc+hdQJ5D7wjynC7SryLPeSv9LfKcYdIPI89ZIX0s8pxL0vciz1kufTvy
HDfp85Hn2Ep/jjznkvTzyHOKSf+PPIfmEeQ53nJ+QZ5D8w7ynMNyTkGekyXn
GuQ5j+RchjwnTM5xyHNo/kKe4yrnNeQ5NN8hz4mR8ybyHDs5nyLPuSfnWeQ5
i+S8jDznjpyvkee0lfMC8py7cr5AnjNFzu/Ic5rJeR95jkHyAeQ5MZInIM8h
7oE8hzgJ+3deknsgz/GSnAR5DnEY5DnEbfQjHnTsF5bLq/2/9ypN17/VlMdr
g9LEppgi5Vrcyta1lbo9ZMLpLesD0oXdv/XK49WtttfwldlfdXW2bG99oo8W
p3VatCnRKCMzTcWbyvei9O5f/xy4qsVpTnft9cDXe60Wp+9t/suxXKHBWtxG
3tsFnVL3nu6rxbvJe7tdPL00Z6QW/+823Oh4xvrAszbTtfgwWUe356P87rhr
8UGy7tf61ojq8D/77yT7rtSFgWvOW2vnpT5tfH1wi8QdWpz62ua+/ZfmIVq8
43/5EX/Xj9rvkKDFe/yXT/GhV/tel8LTxcA/7L9c3UYuHsYsHeX/cLMFd4bX
S1dxyv+57dt9WzbQ4pT/GYXPFizeQ4tT/nf5PlictE+LU/7vOPsZ3n5Jl3N3
slqnfZ2GPbsWzRAV7l/5tvVZbnXeumPbNc0omaHWoXrZPxzUZLW1Fqd6Nd2f
a1alU1qczltg5vVzt3N/VXGqVy3bQd1aftM+T/Wyqp8adiUhQ4TL+0x5vnPs
4sGsR9q5qI4P66z6EvhYW4fqWGx8xINxo7U4nWuMc8+DxgxtHVp/qI/HuVIX
tDjVsWbBy76lZlA8XtXr1NKV9eZe0OJUrw65u31tEa3FKc9tguqM2FkiQ8Wp
Xj+6dflStowWp3rproyed7y8Fqf8v35vN2iQ4X/2I/O/4lXLCc7btTjlv+HT
Mg4RbbU45d/Q3d0+ICNNxSn/h57ZdH57Q4tTnlvuOvN+50YtTnnen7T5VsI6
LU55/tZ39tHeq7U45XnUzXLTxp3W4pRnUf2c64fQNFHqD/un94Dyf6fX0rvb
Vmtxyn98K48esR21OOW/4OGVPW6lpak45T8rzu6vsae0OOU/qVO9Uvnt0kS7
k1MueNnGCIpfjw7fcPZQmmj2X1zlh+K0DtVrocORm61qanGq16PS426czqPF
6bzF79a8Xjo6VcWpXo/h81QvXJ/2Q/unONXrJ5yX6oX5oXphPqlelP+C/9br
jaD9tG9Zvvb0Jaq+gurVWdaX4lSvkeb3QVC94P4IqtcB8/um6kL387z0GxTf
7zTmaq1DGSKzzv/3+fvKp31tsfFU82aqLwTVC+6/oHpBv4g/9JegekE/qvxQ
/zaSeaM89zu8v3iButrnqY6gA8pPgm6oc4HOqPVBlwTVkXRM+gcrqgvpbaX/
3/Nmqfqa62SWqi/oqqrvWHMdVvUF3VZ1fCR1vvx/75QVrQPvlKojvSNqn7KO
tc3fHXUueKdUHeFdU3Wkd/C89GO0fg/3HB65hmnnojrelu8vxamO8F6rOk43
f99VHcEPqDoekv5B+hArqou39CEUp7qAb1H57GXuc6yoLuCLrKguJaWP2vaf
z1TnHWzuM62oLlfN/ZjK20Vz/2aFfoniVJdt5v7QiuoCftKK9tPC3H9aUf7B
r1pR/suY+1sryj/4YSvKf13pn9GHf7uUq+vnrBTmw9vcnJL7ZtdU5sO3dC9j
NXCXifnwMtUqbF9excR8+JOAApYDr6UwH36jr3fsmkEpzIefenTw1bW0ZObD
hy4Krd45KJn58NgeETcy9MnMhzuVi+55JSaZ+XCfJ/c35uudwnx4fYddz8e6
pTAfHtrz9fmjuUzMhw9e8P7DmR4m5sNfufh8vbLZxHz4s23vPthvMTEfnjfk
Sc73003Mh9P+0Yd7tC1fzH6vifnwyHfLhvy4oMUp/3FnP9UzeGtxyv/pvPXK
9Sufynz42MnL890dl8p8+NX6120cvEzMhw+0yfV0zQttfapXhX6dehY6rK1P
9fJf0fbKwDdanM6793yLsgeytTjVq+yvoA/b07Q41evw4LVb/o5NZT78aPza
vHd3aPuhOrq+KXz87v98L9Xxwebxs+du1OJ0roAeN9vX6qLFaf3iRa1qZGVo
61MdA0dF7f9yjuKaDz9wZGGFBuW0ONUr8+C1qiNma3HK87mOq45UuqLFqV5p
jafnz/1Ki1O9rKsPWhgXqcVV/g+ef+b39H/2I/PfbmDrQk82a3HK/7CCjwde
7avFKf8NEmoNGp9Hi1P+s95vGFzcM4X58JWzjy7fv1OLU57HrK4c+/SAFqc8
d95zdHj6MS1OeZ5psaR1jlAtTnnWVfhp86O1iflw2r/ysTL/5cTAJp7tTcyH
pzg0LVwnNoX58GXX18+ydEphPnx8iefvYoKSmQ+3ccjf7EWbZObDHTyM2W93
pTAfTnFah+rl41S3j8uFJObD+xbM/3JwnSTmw5/vi+5ueTKR+XD8PNUL16f9
0P4pTvXC81K9MD9UL8wn1Yvyjz68x9znxZfvJX3TfDjVF3043Afl0+D+KJ82
2vy+qbrQ/UQf/nS4fasrzqnMh/e8axF+OFhbh+oF91/5N+gX5d+gv5R/g35U
+aH+RR+etL+6U9Hb2vdSHUEHlH9LN9cNdS7QGbU+6JLyb6Rj6MNJb9GHm59X
8+HmOqn5cNBVVd9Acx1W9dWZ67aq42mp8+jD4Z1SdaR3BH04vDvqXPBOqTrC
u6bVUb6D6MOnP+md5JhP2w/VcYx8f9GHu5q/16qOsebvu6oj+AFVR/IP6MPz
SR+CPvy5uW9R+QSfo3w4+CLlw8lHoQ8Hn6l8OPgxlTfwb1bol9CHgz9UPhz8
pPLhrub+U/lw8KvKh4O/VT4c/LDy4eSf0YePqdFgcLu0RObD54zpVyLPhETm
w6sU7VekzJwk5sPXfXMYHvYjkfnw9JqTc9Tdlsh8+Np3GRNmVk9kPrzosk1P
rtxKYD58cnLrgAVzEpgPr/Iu9cmSNgnMh/tfdL+6wiKB+fAnud7Y5MuKZz78
6kijfvfXeObDy7k8q9bkZzzz4Ytv/nUpvkwC8+Gf3uxtd6FpAvPha/Odu+Ez
IIH5cP9Bxeu2WJjAfDjtH324Vd4VxvRFScyHD+8WV61NAy1O+V8y/8NQl4hE
5sOPrj62fuBZLU75f7xjzo3cMxOZD3dukTex+oME5sOf1F6RGj5E2yfVq1a5
sgVOd9XWp3rVGOuWfK+OFqfzVjtjHfCxgBaneuW4eChpTXEtTvXSX0nJ26x8
IvPhbc8fSxbXtP1QHSvETy09uaG2DtUx94EKJU7ZaXE6V6L12yL6ZVqc1k/4
cqTRZjctTnVcmvfHiKhIims+vPjPUk4mvwQVp3q99Xw0OeOuFqc8914zsmfW
US1O9epv+6pS3lVanOplV7Kdqeg4LU75PxPku6tLPy2u8l994/4CXbU45d9l
ajvnD220OOX/U9ExjhMGaXHKv+XttaPT5mhxyvN53+cnhh7R4pTnMkF93YYn
aHHK87own1ujOmt5ozzf79PR56WbFqc8Byfsy4yrn8R8OO1f+ViZ/4HXBnrs
d09gPvzLnZZH98xNYD7cw7/ooXVNE5gPz1cj2Gt4ejzz4fazzkQ3uRvPfPjo
5N4O15YlMB9OcVqH6pVSL+P5yb3xzIdfrZI/V+SyeObDHUpV6Fx7bDzz4fh5
qheuT/uh/VOc6oXnpXphfqhemE+ql53MP/pwz5+djr19Fc98eJCsL/pwuA/K
p8H9UT4N7puqC91P9OF7Is6UvlY7kfnwzVn1Zs3qoa1D9YL7r/ybr3m/KP8G
/aX8G/Sjyg/1L/rw3qHz30XP1T5PdRxkrgPKv4FuqHP1MdcZtT7okvJvpGPo
w0lv0Yebn1fz4eY6qflw0FVVX9BhVV/QbVVH0nn04fBOqTrSO4I+3ML83VHn
gndKq6P5u6bqSO8g+vA9RVYtuThT2w/Vkd5f9OHwXqs6wvuu6jjC3A+oOlpL
/4A+3E/6EPTh4FtUPsHnKB++xNwXKR9OPgp9+Fxzn6nxcHM/pvIG/s0K/RL6
cPCHyoeDn1Q+vJi5/1Q+fJ25X1U+PMPc3yofDn5Y+XDyz+jDy+UwnChZN475
8Nd5RLyXSwzz4XGbVrq96BjPfPi1TiOdbg+KYz781Ixo5yHDY5kPN270HdC3
Ywzz4Q1Pe+XpXjWa+fB5hlH5uqw2Mh9+o8nAK9bVjMyHf3Psbm/tFcV8+CS/
NQ61w6KYD//Q5MHWAtlRzIfvO3yz32xhZD68SL2aEz88NTIfvuHmP0ta9Ilm
Pnxyn/IFbxyPZj48Y+qVkV1DopkPp/2jD1/x7W1gridxzId3KK63fVRKi1P+
H5y37K5bHst8+Iuukwe2s9TilH/vzw9GX3eO4T78+MGd9TrHMB8etvv8mUV7
o5kPL5+cffCFfQzz4as6X5t5sb4Wp/N+2Ta5844f2jpUr/FLrYpmVdI+T/UK
nVgxfPrv/TAfvvi54VIj7fPqv/d5Hi7kPFOLUx37pU1ItnPX4nSuLw0a+hZM
1+K0/sbM4kciR2h5ozpeLp5/aH9vims+fEhAhwJPNsaoONVrfvjxUk+HanHK
861Q95uNK2txqlfPl2XWTv8YreJUr4Drjv1cN2pxyv+RWfecsmtocfVzKdui
xk27amQ+fIRb8a4fhRan/M+/Ydns20gtTvnffD9P1WpLtTjluXHc+le2z7U4
5Tl+SokUR0dtP5TnCwaXsleaaeelPLee+8oitJGWT/Xf9f7u3tuydxzz4bR/
5WNl/hfvafQ098QY5sMLF1124evJaObD29R1KBYda2Q+fOtSryU+XYzMh4e9
LBr24HAU8+EtLT1yRR01Mh9OcVqH6jXgRsXd1YdFMR/ePy5PnOgVxXx4/xrJ
Xce0jWI+fAB8nuqF69N+wuX+KU712gbnpXq1hfxQvTCfVK8lMv/ow33KRO7K
PkT6pvnwOrK+6MNbmd8H5dPg/iifBvdN1YXuJ/rwThO87cN+6xX68L9visLT
GmnrUL3g/iv/5mDeL8q/QX9pP5di3o8qP9S/6MNremakTNyk7YfqCDqg/T0L
c91Q5wKdUeuDLin/RjrGfLjUW/Th5ufVfLi5Tmo+HHRV1Rd0WNW3v7luqzqS
zqMPh3dK1ZHeEfTh8O6oc8E7peoI75qqI72D6MNnz3mTHeeh5Yfq+FG+v+jD
4b1WddSZv++qjh3N/YCqo6P0D+jDyYegDwffovIJPkf58MLmvkj5cPJR6MPf
mPtM5cPBj6m8gX+zQr+EPvymuT9UPhz8pPLhjcz9p/Lh0eZ+VflwV3N/q3z4
dXM/rHx4vPTP6MMDbv4oXvt+FPPhhzu69ipjb2Q+vEN4N8eKjYzMh9svH+mT
FhjFfLhuwcCv8TuimA+/3zDvzRp2UcyH3464O39Y6Sjmw//qfMelb8wX5sND
p4esOfn0C/Ph/+z7NenriS/Mh98bX+rNEgvuw6P+qt8icwz34Vtru992uB7F
fHj1hRVXfE6NYj789qMNnWxaGpkP73CkQP1bI4zMh7fsUO58zYVG5sNp/+jD
u//Tq8TgJM2fU/6nxetzn/bX4pT/kORTLzNDtDjl39Tdo7ldJaUDqu75nV85
X/z9jqAPnxFWY+jVG0bmw+tds1zpNktbh+p1IrK1c++7Wpzq5Xju/Zcd9TS/
Tee1nzWt6cf93If3uvXE5sJaLU71amdRfeLaOdHMhy9+5PK+cnPte6mObze1
TYy10tahOp7d8WzUwnDt83SuNXsHv/65SovT+sfe5jjt1kWLUx3HHO/cMrGM
5j/Vf7+YrR/u5ajFqV5LerbMruGqxSnP3psrjXvkocWpXvOONOkUfEqLq/9+
dKVLhbSdWlz9fL4ICTtr/z/7kfmfX+RO+fqFuQ/f/nnfoAuPlC9S+W+3aKbp
6XItrvqlkPUufXMtTnne/qXrCm9LLU55bmB14sf0Olqc8vz8cPaKnNZanPLc
5aRN7kFLtDjl+a/VW/9ZdS+K+XDav/KxMv/697qly2sbmQ+/7Lu99puoKObD
W3/2c2m1K4r58FYJpa++KxzFfHirn4MfT93yhfnwGdMD3rWqEMV8OMVpHarX
UzGvgF2lL8yHuzgvi4m8Hcl8+JKva18uGRLJfDh+nuqF69N+aP8Up3q1hvNS
vTA/VC/MJ9WL8o8+vPe3tIsuHqRvmg9vJOuLPhzug/JpcH+UT4P7pupC9xN9
+IJHlrUbVYlmPrztg4+O2/y0dahecP+Vf2tv3i/Kv0F/Kf8G/aj9XLHsX/Th
F/Omjy0foa2jOJ65Dij/5mCuG+pcH811Rq0PuqT8m5A6hj6c9BZ9uPl5NR9u
rpOaDwddVfUFHVb1Bd1WdSSdRx8O75SqI70j6MPh3VHngndK1RHeNVVHegfR
h1s2PbXlxHktP1THfPL9RR+eYv5eqzoGm7/vqo7gB1Qde0j/gD6cfAj6cPAt
Kp8e5j5H+XDwRcqHb5E+Cn04+Ezlw8GPqbyBf7NCv4Q+PMzcHyof3tjcTyof
Dv5T+fB75n5V+XDwt8qHgx9WPpz8M/rwk3OSHs+yiWA+PG/y/tiBkyOZDw9d
v9Z74asI5sP7WF9+7zQ5gvnwigvt6pUpHsF8+IV9xlYvPhuYD2/r4dh1+QUD
8+H5ozeeOX/CwHz40mr9bpS9bGA+PHpYqUfr7xqYD1/qHOtz5n/2Q3XJF+r1
5fm0CObDC9yY8anCrQjmwxPd7632TopgPtznUqFGm+pHMh/+8+Xh3cltI5kP
f7XouV+zFpHMh9P+0Ye776/Svuj9CObDnS/p3/+4rcUp/9scnWet/qjFKf+b
7nUp26p2JPPh67/HPIxZEsl8uGe3Up7z5kcyH74k/7g25QZr61C9euTysm1z
RYurn+efd6mLd4AWV7oderj9zJza3EH1innQdnyPbO3zVK/ux/w2Vv8eyXz4
+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
rrBcjku/Pyr9Mb/9X3Jc+j17rF10w3dxUpzyr78QcKuSdxzz4fTdMfb34QeW
+i/uGs18eKelS8t495LvT/V65Gi1w/wvOU7v61j1StXTVeQ41Wuem9fq003k
ONVr7/W2Gac7xjEf/rq1U+KOUjHMh4+dmfUnc6R8H6rjuOzjM1/6yXF6r3FL
hn08GSbH6f4zzikm+ZeT80l1XGob+bvUBIrLPtx7VWpAydqS35DqFRu6JLjp
5Vjmw9Pi5unW2Mhxqteg17bjB66MkeJUr5C76e9qfIqW4pT/u50qd9K2lOOU
/92/MmoHb49iPtzj6fM/KzM/Mx++5nnuo0O+cpzyf+C19eobpeU45fl94l/b
PkyU45TnARV//JU1UH4eyvMLh9dvy9vHMh8+G56H8q941OxV3Gw5n5T/B+4u
8392iGc+3Lph9ZHzOsQwH95rQ8mtLeZHMR/u6bt1cPt2kcyHj7b287hneMd8
+AfnUp0rLnnJfHi36kkje72OZD6c4nQfqtcP8d1Y6flFvTBO+cE41QvjVC+M
0/NEieenuLQv4H2pXt6QH6pLH8gn1aW+yD/68FbTwgOTc18zH051RB8OdZd8
2nOxftCHOxdfb/L/8Yn1iT6cvjeKPhzWueTTaF+gD1/YZdiitrvk6/+P/SX5
tz3F96OUn3vF96/kW2C/Sz4N+oP0PNRP0Ieb6iJSFhyQfy7FoS9J/o36GPrw
V6Lfog+fU+x9/3NuYbE+Kftw6KtSfaEPS/UdW7xvS3WkPs/+Pry4Tkn1JR1B
Hz63uO5I7wU6JdXxcXFdk+pIOog+PFF8NxN9OOkv+nDQa6m+oO9SHcEPSHUM
Ef4BfTj5EPThC4v7Fimf4HMkHw6+SPLh5KPQh4PPlHz4+uJ+TMpbj+L+rSfV
Bfye5MM7FveHkg+fX9xPSj58eXH/KfnwesX9quTDnxb3t5IPBz8s+XDyz506
ZZTZb1NC8tXzNiqvrzEpoHUr+ecrywefrJ6e7+B5SBEWWbmk5J9LZH+v9n5q
Aa0ryQ8P/xWc/KVEgUPRv9/3lPzzn9sRhcePFDiEK9e36bfiq+RP8i64fd67
qkDc3yj5kwmr5ppdiClwOCfuT/mk70/9FvenfOrrzT33wbGQ+qrkT2LCl3/x
K1no4C2eXzofo4di8s95hbQeJH1sXm/lDpNXhQ7t/6eb3yU/ozw4V73tfYGD
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
3GLvJesO5Q11h/KMurNG/FzUHTpfBXWH6o66Q+sEdeepWIeoO5XEukXdOS3W
P+pOotgvqDtbxL5D3bkg9inqToHY16g7a0QfQN2pKvoG6o6j6DOoO9SXUHce
iz6GukP9EHWH+ifqznTRb1F36Dwo1J02om+j7lCfR90hXUDdIR1B3aHzwc6L
fkLvG9By6pYyZoVSnOq7sETl5ydnFzqMFH2G4r362H1s+7BAjos6aua+HzBu
c4GDScy//YfiN25ZBl84Kcel/1vpFbfaU1ngcJ70S1w/bLNfrfx6cpyuv+F5
sM5bfb5Y5ybS9Z8eVTZ/XaFAitP1qtq2Tc5Uku9D+2JR1vVh50rJ11P81JG+
49fYynFaP69dJ76YvFy+D8Vnl7lUZoiNHJfO8b4/23nrD/k5pe+5+I5eVvak
fD3lv/MP5fNG+flyHkSe6f+I/4CO0/8jS3kQ18f6rWjf/VeBw8T/1SVayr/L
lJcZ96YUiH7x7AHF7/b3vbd9jRyXzmG2C3XM6C4/J61b20+udbZMk38uxa9P
bekdN6lQiks+yiHCYuRweV1RnjfbDbT64FYgxaW/c/g1bfWVEHld0fXqK93+
Nr8rrx/p+3rNbJ36VPrPuhXvFTquZliNfvL96b1e3GqXZHSU7y+dX92q0deW
R+X3xfMxKC79/2DHly82HpfzgOdm0PXUZ67tKXTNS5PvQ/v6dcB3q84d5bzR
9c7LA3rb75L3HdU9rmiaaeNoOQ8Uf19nTE9T5X/2nVgPq6p3GTJkm5wHPMeD
7i+dp6T0bOJdvlC6D9Xlzy7HyLdV5DhdH/bTddLI6vL7Ul+a4G2vOm8hvxe9
r2KIsuLV6XKcrv9rW5+0DkVyfqhfjTx/JSf6kZxnijcKu/HNNUSOU9/L/nah
idv8/6x/kQdDlwCFcX2+tM4pbwt9Am/ZNZbjdH1Ytak3z5aR9yPdv8GylDe/
TxQ49P/3/pJejwg4OMmqp5xn2heDYh6X6PFWXp+0rmbdmnL07mM5Lv1/0L6i
znY35brQfWrXTC3/vp4cl87D+brhvLOVXBe6Xj+uXM3J/+RhzP+uT5X2y17X
3ndsI+W49J3EiEl9bkbLeaPrAy/P6XfAR76e3reo6NAmCw85TvvooN+UUR/P
yfeh+ImYLSldneR9R+877WCDxXM08rql96r242zq6t5ynK6PWOYQsdBEvg/t
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
5Jm0f5FnUt9Dnkn9E3km9VvkmUdEf0OeSf0QeSb1T+SZ9YUeIc8k/UKeSXqH
PJP0CHmmt9Av5Jmkd8gzZwi9Rp45ROg78swixb9+AHkm6Qj7f3Oh48gzLYTu
I8+k78Yizzwj/APyzO5CN5Fnki9Cnkk+Cnkm+S7kmWWEL0KeST4KeeZO4buQ
Z54SczTyzI1i7kaeWV3M6cgzyU8iz4wQvhR55hDhY5FnzhH+E3nmceFj2d9n
Cp6APPOz8M/IM4lLIM8kjoE8c7GYL5Bn0jyCPHOImF+QZzqI+QJ5Zk0xjyDP
pPkFeeZUMZchz1wr5jjkma3E3Ic8k+Yv5Jk0ryHPpPkOeSZ9Rxh5ZoKYc5Fn
0nyKPJPmWeSZx8X8izzzg5jrkWcSB0CeWUpwA+SZNL8jz1wj5n3kmU8EH0Ce
SdwJeSbN9cgzZwi+gTyTuAHyTOIkyDM3CG6DPJO+v4w80yg4DPJM+v4y8kzi
S8gzEwSPQp5ZSvAr5JmPBe9Cnkl8DHnmDcHTkGcSf0Oe2UbwOuSZ3oLvIc8k
Hog889WewOMvVusZzzw92i7DPEvPeGYN1xlfl/XQM5757mFuxb2j9IxnTlvb
1LRgvp7xzCMTfC+NOaJnPHNFF7uEaUU6xjMdqzaafu+JjvHMOZ9/zrHR6RjP
9G+9f/Ky9zrGM+/V1NpUfKFjPLNkhzGN33/WMZ5ZY6vH9uZWesYzrbWx48om
6hjPrBW4vUb34zrGM5eNnPygvo2e8Uz/wm192i7QMZ5J39dGnknfe0We+WZ+
Qbuxc/SMZyYeGT80q76e8Uz1h8e+y5rqGc+8GrWjaYROx3hmHZ2jz+uHOsYz
z3b0XxkQr2c888CajAMLnusZz6w2sX/JNz91jGfaBk+Y07ibnvHMJ0ftLtuP
1TOe6aFsNDr4pp7xzFU/Mwc0rahnPPPkmE32iwt1jGcOPLxAnz5cz3gmfX8c
eWbHX6G5Dc04z6Tv+SLPVOT1WBIwUc945vzeF7uYHtUzntky7J3d8zKcZ97f
XxA6zUXPeGbOvpToAyP1jGdauD+uVLMc55n0nXTkmQvLTDReW69nPNPcaNf+
zQk945nnSztX1mzXM565bWqsZ9v5esYz+6p+eGQn6BnPrKfbEu+7TM945vnD
G/qrOugZz+xev+ON5vZ6xjN/5s7vPdtSz3imPrhnUuzJVMYznzt4mw+vm8p4
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
6FS3w4fUjGeGdWlXwvS4mvHMfXkjE5/cUzOeecY3YfisNmrGMyf16e3wK1/F
eOa4k0POr+inZjyzz7e+oyzGqxnPtLjXcpV7eTXjmbmerfct8FEzntmkaemv
/v5qxjNL9M9Wt7dQM565euMOpznvVIxn1rnxYvzkHWrGM7XZI/vZXFcxnvkw
p83Ov06rGM9cY+0/tq63mvFMpW/m66HL1IxnljbruWPrHDXjmeWS25lbrVAz
nllU7laNAEc145l1B+40mXJFxXhmj6gB3TZuUDOe2TP0zvmH69SMZxr+jOs+
4a6a8cwGt1odXxyjZjyzar8os/wXasYzu/oNjt4epWY8c1TbZUPdd6gZz3TY
4vXbeFLNeOaM9+mv/a6pGc+s1/r3vIOXVIxn+hyYUWtdNzXjmb2PNKteuEbN
eKZ/KcPIARfUjGf2XnHl+rtINeOZU02vDHuUpWY8c/Gu6Za6WDXjmevLVjjh
9E7NeGbN2mcG9wpWM545Yk6pknvy1IxnTlVf3JWXpmY8c4TP0B/e8WrGM+eN
GV5/VLKa8cyyowoOeMSoGc9sosrvNMGoZjwzd9YaTWmNmvHMqDEVR9W9p2Y8
8/Gcwydvv1Aznulv+31W5mk145m/vln+2WynYjzTpIrFOd3HZMYzX/4d5PX5
YTLjmWFRf+8Mv6hmPPPynnM/y45QM55ZPX1m0KVSKYxn1oyIttKWSGE8s/a1
PmvrmqQwnjmuRv/5kZFqxjMn/LilLPdJzXhmYL8WPb7/s86RZ5b2r/JBf1bN
eGa9hVXz315UM575d6z7KofpasYzj1rEXay8WM14ptfzHxvf7FYznnmo4iC7
RsPUjGduOlD/Xrt9asYzX6p312w4Xc145ubxSy88KadmPHOsxQW/xWPVjGeO
/VByeekPKsYzB3b/+G7XRxXjmYf7nWw+upWa8cxW4zrHDKmiZjyzXfol2279
VIxnTvT9o9y6RM145lzFYI/fbdWMZxbWMdd6+qsYz1ze43i+d6aK8cwyq8d5
pvRXMZ5Zf3Xzj+cGKBnPHOM0JDBNrWY8s8nHBKc9kWrGM3PHzsjrFq5mPHOg
7+LkkuPVjGfWKlFy2+UBasYze1442sA6UsV45uMJq4MNQWrGM/3rKH0bb1Az
nqkvVaf/5FZqxjN/in2NPPOgzZU51WzVjGfmWKZ3HRqtYjzTvZSqejlLNeOZ
GJf+j0zcB3km/Vzkmd9mHTsfWFLNeKZq0xS3P7YqxjOxX9H1O517dX5yMZnx
zFeiXyHPLCH6G/JM1ZF5dxrnqRjPrN129pPocBXjmc2eBcxzDlMxnrnq1mjL
pXXUjGfa2jsXaJurGc+84zK8lm2mivHMAUmhPeMyVIxnlht9/NOSXSrGMwfP
sz0Qbq1iPNN098/JD7apGM90Ob+5sVlNFeOZT2e+u3DgvorxTNpHyDNx39E6
p32KPJOeE3kmvRfyTMoD8swn4jmRZw4Q74U8s6zIA/JMqiPyTKo78kxaJ8gz
sY60j1qKuiPPXC3WCfJM8qXIM0lPkWeSL0WeST4WeSbqNe0jpdh3yDOpnyDP
/Cr2L/LMmqLvIc+k/ok8k/ot8kyd6G/IM6kfIs+k/ok8s63QI+SZfwv9Qp55
SOgd8kzSI+SZpF/IMycJvUOeSXqNPJP0HXkm+QHkmaQjyDNJx5Fnku4jz3QR
+oU8c4zwD8gzSTeRZ7YUvgh5Jvko5Jnku5Bnki9Cnkk+Cnkm+S7kmTRHI8+k
uRt5Js3pyDPJTyLPJF+KPJN8LPJM8p/IM8nHIs8knoA8k/wz8kziEsgziWMg
z6T5AnkmzSPIM2l+QZ5J8wXyTJpHkGfS/II8s5aYy5BnbhBzHPLMJWLuQ55J
8xfyzJFiXkOeSfMd8kyaB5Fn0pyLPJPmU+SZNM8iz9wp5l/kmVZirkeeSRwA
eSZxA+SZ08X8jjyT5n3kmcQHkGcSd0Ke2UfM9cgzewm+gTyzvuAGyDMdBCdB
nqkS3AZ5JnEe5JnWgsMgzyRehDwzVfAl5Jl1BY9CnrlG8CvkmSUF70KeSXwM
eSbxNOSZxN+QZxKvQ55JfA955mTBA5Fn/nE9tmp/gJLxzGZfXykCA5WMZ/bN
1229MEbJeOaEkcPfrh2kYjxzWVnX0w3KqhjP3FjufLn+qUrGMzcceX33jp+K
8cz8wZnGd704z7x1279Ol1UqxjNrzg/UdG2rYjxzas8N57pbqBjPNHs5q82I
AiXjmaXXPXXRqpWMZ7pMmnW63BYl45kFK2JmB5ZKZjzTf3LDE4tGKBnPjMp6
p5h1P4nxzLfm204Pt0xmPHPex5pVelsoGc/cP72Pl3N5JeOZPtnGzHqLlYxn
tu/jabZ0mJLxzIwGpcqZlVAynpl37KbJ+CrJjGc++DEvYmgFJeOZF0+OT1dU
VTKeqcs6UeVHtJLxTPWF73/7hSkZz8yK31LY9Z6S8cyCZ94Jy48pGc888+bi
9u2eKsYzTTfdGenfUMV4pt/yyy+uWqkYz1T1O2mdWiuZ8cwZQY3zzr5KZjzz
YH+nsjPrKhnPPL3Eo1F2XyXjmUP/6lrGeaKS8czoWv521w8pGc882mnbX5Gz
lIxnrvo+MbqZg5LxTM3rSDtdEyXjmUnuw53rXlMynvmoWdN8741KxjPfjL75
oMFKJeOZx9O+Hns+Qcl4ZlFt98jZXkrGMzeUu1Py0yUl45kda1fqF/1AyXjm
nxHLVuuOKBnPtBvR1DgsTcl45rxdgzw2VlYxnvnpvWmrzgcTGc/c9KW3uXcr
BeOZx3e751Wrq2A8M7LZ6XFDXygZz7xVvseJl2YqxjMHbc/rfOaokvHMru1V
o1qfVTKe2SIhYv69y0rGM+dstdRfH6tkPHNcmz+luk9VMp65bVPr/Q+tlIxn
tmnxefCGiUrGM8vcq97WppuS8cxaE3+fm1FRyXjmwKA9Mw+eVzKemXza1/bY
WiXjmS9iT21Y017JeKZNlXsvKzdSMp45ftaXsXuikxnPDNRXzPFbmMx45twe
tU0eJiUznqm08mrRuU0y45lNjvQ/7dw0mfHMTX/X6mjfOpnxzC+//Q/8qprM
eObx2m98OlxO5N8D6rDZPDokmfHMkTHz1lTZlMx45riGnftFtE5iPHOm78iv
Q8YlM545L7zeA/NSSYxnLqiYvib8soLxzB+znsf28lMynnnJt25tx0Al45kT
tyyYOOCKkvHMkGd5y95HJjOeOS1qwMNITTLjmR4NGtWbUDuZ8cwJT7eav4xT
Mp655mVRwWMzFeOZbhVcPYZUUjKe+VHsa+SZk/++8PjVFSXjmY8vletx6FIy
45nt7yzv/rqcivHMdhCn9fxI3Ad55iTxc5FnWodEDDcxSWY8M2OhTc3kDYmM
Z2K/ouvvdNqUdN9cwXgm9SvkmdTfkGeumFHU7vCiZMYzRx3xa9WsbjLjmZWq
htyo2jyZ8cwrc3bF9ZumZDyzesiGzbouKsYzNx2vGxVprmQ88928GunaL0mM
Z1Y0dF2TvC2J8cy124Y/q7s+kfFM/893vzk+SGI8s4TPp+4bbyYynvmzqanv
23LJjGfSPkKeifuO1vkssU+RZ64Rz4k8s4J4L+SZESIPyDO/i+dEnlnk/e97
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
TJq7kWfSnI48k/wb8kwr4QORZ1YTvhF5Jvk95JnkG5FnEk9Ankl+FXkmcQnk
mcQxkGfSfIE8k+YR5Jk0vyDPpPkCeSbNI8gzaX5BnklzGfJMmuOQZ/qKuY99
D0jMX8gzaV5DnknzHfJMmgeRZ9KcizyT5lPkmcvEPIs8k+Zf5JmfxVyPPJM4
APJM4gbIM2l+R55J8z7yTOIDyDOJOyHPpLkeeWau4BvIM4kbIM8kToI8k7gN
8kziPMgzicMwnil4EfJM4kvIMx8KHoU8M0/wK+SZowXvQp5JfAx5JvE05JnE
35BnEq9Dnkl8D3nmOMEDkWcm+j9wu/T/52XgmdMmjs7oezaW8cxhR+uX/Fo9
hvHMTddiD4xJjmM883a5Uwk1XOIYz7Tu2yGna1Is45nmFaNvvY6IZzyzpk27
D/pN8YxnVsqJ7bn1TTzjmdvHlp7/dnU845nlb/mkVugYz3jmGm2fLbmt4hnP
dA29MEv5KY7xzOo6v+1DusUxnrngc8WnncvEMJ45Ny28UsPYWMYzPYYPqWLm
/v/KureYqK4oDMAy2CAYEEiwgQCpUKtIqUUQiNFJi0yoIqKUFAOtDQSxICAo
N1tNqQVhMDZoLBW0KMKDBFCBooCg0IpUym2YM+cc7gYwUJDLg0gvCO3DOj78
63U/TObs2Xut9X+TzAjMM7cWzibtNdczz4w6ujpifrvIPHPas2hS6ygyz/yt
pjVsOFZknumwYX1IvKfIPPPjTJV28wmBeea9ozl/jy30Ms88ofJJdDYRmWcW
HPin39lWZJ4pWj+riJmRmWfWPddcCM2TmWfOqy0NZt4y80zTYx+9Ls+QmGce
cUw+YqTtY545eu5G/m51H/PMpeqeh+PZMvPModq9UeMmeuaZTudSCo4N6Jln
Nhc1at51FZlnTmcXG3c8FJhnPnjRLQ23GJhnam9M3sm0kJhnqjPCLuVpReaZ
A09HA9dlGphn1vzQ5D44JjDPLKwrj9d4yMwzvVWeLo/dJOaZCeHLiWmCyDxT
CGgc990sMs80ilm1rmOnyDyz2952IkkrMc/sLm0P2tcsMc80L8i9VpcpMs8c
FEKGfNbIzDNnDwWcuX1IZp7ZE12asP+qjnlmV9P4+xa7O5hn4rpyHpR19MzX
lRmnvw1qZZ6J68rr47ry+rj+5ntnWkfP/KwlSRW+Q2Ke2X/GUr+wKDLPnHaZ
Txq+IDHPtE6vHhy+LjHP9HmS7D9SJTHP7Iut1+atGJhnrtR98zLPSmSe+aT8
bLFvksA8s2RXbrHGSWSeueaDT2ysUg3MMxsEz4a4nwTmma5jRqFt1hLzzEv2
l+OmSkXmmWU16iwrOwPzTDvXrVcC2w3MM0cdvDQrLgLzzL82RL5ld0/PPPNT
9c6SGCeReeaH249belkIzDMrotVVIcsG5pl3azP+nEjsZZ6Z83V45y89OuaZ
6ufBU/2VHcwzzVzvrj49p2ee2aS7ViZZ6plnvuyuese4vJt5ZmK6dr/Htl7m
mWEO52MbZjqZZ+r3GPtYpLUxz0zxN/X62Utmnpna3VCUFi8zz0wNjTMJLpWZ
Z3YdX+uXYy0zz+xabKyI3CMzz9x0xTz45KzEPPP77FeX1S9k5pn5a2c8/z/t
zDMHNvnvCLooM8+UbFSV7Qt/MM+cXj+S0LZKxzzTYF1zuyJZxzzT4/7itjKz
PuaZp/QHffy+lJlnhp1KHY3e0sc883eqV+iZuK6cc2UdPbOT6id6pkTvHz1z
hp4XPXOQ9gc9c+KwX4smXGCeeb3aLWLeRmSe6fzd4WbdRoF55tJQcZNVjoF5
Zr50x2TEXGaeWet+/otGX4l55mRj076ANh3zTH3Eo696z3Yyz6woLAl8tKRj
ninR+UfP/Bzui3I+k+h+oWdupOdFz7xJ+4OeOUX7iZ75mOZA9Mxb9P7RM5/S
86JnjtP+oGfeh/188z/mtP/omcv0eaFnDlL/Qs/0pbkUPdOR5lj0TKU/omcq
9xc980e67+iZSn1Az1TuHXpmOt1T9EzlXqNn+lDdRs/MojqPnllJfQE98z2q
b+iZZdRf0DPdqB+x35mkuoqeeZD6GnrmSarn6JlKHUbPVOo5emYK1X/0zHnq
R+iZD6h/oWeaUr9Dz6yn+QE904TmDfTMmzSfoGe+or6PnvmM5gT2u6A0V6Bn
3qI5BD3zIs0t6JlbaM5Bz7SnHI2eWUu5Gz0zi3I6euYyzW/omd40B6JnWtLc
iJ7ZSvMeeqZMcyN65gHyBPTMKZpX0TMjySXQMwfIMdAzeyhfoGf2UB5Bz1RR
fkHPnKN8gZ45RHkEPdOC8gt6ZjXlMvTMfspx6Jm7KPehZ+opf6FnKnkNPdOL
8h16ppIH0TOdKeeiZ+ZSPkXPbKQ8i575gvIveuYc5Xr0TMUB0DMVN0DP/Jfy
O3qmkvfRM6PIB9AzFXdCz/yVcj165lXyDfTMEXID9MwUchL0zBlyG/TMaHIe
9Mx6chj0THfyIvTMOPIl9MwE8ij0zFTyK/RMW/Iu5pnkY+iZiqehZyr+hp6p
eB16puJ76Jlvkwf+BwK1zEk=
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtln1MV2UUxy8XtX5mF25YGoShGWoRU6tlumrqygpSITMFEgQDUQGlQEwg
QkVQIU1MSyvnS1rMzWnTWi86WxNXK3NZ6+Wv+kurVSvbeu/z3Tl/nH2/9/uc
597nOc8557kjy+sKa8MgCD7HkrHGKAgWIfTEQXAaewneibYBXgNfBZ+LDYbf
gFaN5cNr0eZgA+Bj0E4lgiCd970DPoFehN6GHoGD0a8An2FM385nfGvC9Faw
BbuQxLvwz8Lk9DA+HegDeOwBq3meir6E8WwsFT5PPuDowPbQhD4XrEc/BO/U
N339Q/DZxXsWwEehT2F8CngV+kRwE2OD4DvBLTyPgp+Dv4kNh69g3lH4MHgN
fDnzZ+N3HO1gwt5zGDyDZcBPgGvx24TPEXwLQ9Png3djDAWTwJmQ39h7hM9J
n/sJWMrY1YHFcR82Fr4HvMTYeHg385qxerRtzF0GjkCvDs3Ey8GN+OwFz+LT
Bt6E/jq40/e4A3wey4b3gusi+9Z3CeNb0d5VXLFc+CK0jxjLUg6BTTwvRu/y
HKiCb4a3hObTGFqe6Kx15l2R7eNjfB6BJ7QO+IfYdvi3+OTC00I7iwtYDnPP
gzF6BnoR81oie/d2tIXYfaHF/zP4AZ2nx2ckc8+iD0X/L8lySTFXXq2DD0H/
Icny8P7QcngWmIZ+HViMbyWYiT4NLOU5G8xj/JDeG1hMnsSKlW/oXycsnv0J
O2+daQnY4HFuAlvxKwCXM+80ftejHwMbeK5A745tjyvhB+HveXw60J7F+uBf
oZ3HXvX96iwUc53PSj+XLYw3e67WobX6O3d4rSsffmH/+2PLifWMt3tN7Qb7
eFdaYHm+Cp88r/06+Az4MniNx39pZLWvOKxBK/NY3QVf7bm6G/6C56t6ywH4
Lu85zeoxfOsP1tOuOTw/HVlNrYC/ElucFcu1muc96qnI4qZ8L40td5XDP4Ib
0HPhP8O3eY1vBJ8LLbffx380lgJ/FN+BofW04bHFWbX2e8LqRPWi3vCN5+RF
r/FutJP474ttD1rzuNB6ThZYGVtuKVYVHjfFSu/SOk6hXeN9rxD9p4StWbWg
b+n9Rxl/I7azacPnA4+bzuvxyHrYA7H1SfWoI8zriazWv4yt7tQHPoVXRdZ7
5sHHY0Ph89HOeS4pbmdi6wvKt7e8l7bDL4N/n2Q9/Dh8vffYLu9Rm0P7rvKz
P7Z8U76/Bl/j/fAE/AuvU/WxJZHV1lLVaKqdhXq76k97uRH8J9XuEp1RgN9f
rGE2/DbvFVr/PfB07w+p3tuHhbY/TbsWnOo9RHWt9ageVa8L4WPUmxk/prWG
1nPqvU5VO43qWaHdBZX6NnxibOvTOseCBTzngOW+L91Zt6OVqBfBp8H/ZO2X
458ZWr4Nwsah9/I9thns9VxVb7wZ/XBs8VX8+zzm6r05nmPKtcWMTQZLYrvT
1UPKYssv5dnbsa35VviD8DnYLfAKtDtC62Oa3+B3lfqSYqI9zfR7Vb1lAVjl
faDGc0/vnOD9XP8JObGt506dS2x3rs5C92SV68Xoj/ldPB1e5LHV3V3mZ5GP
lvD+/BBaCP8bXqA8gtd67b/svN/7nu6gTrQR3vNVU5meM5qb4Weg/NG5qEYn
efx1Fun+HZ1Fcmjr1NlNRt/jfUl3dB76RfwGos3ye/xKz8EU5k4PTb+EnuI9
UH2sF/5rkt2JGuvwfFNdr47t/0p3ge4atYX9+lfyulMcXkzYuesfaUJo/yfK
Ra1H/1HJsf1TIQVt4L+eb1rrvX7uys8ZfqcrB/4HlPMi1Q==
            "]], 
           Polygon[CompressedData["
1:eJxFmAfU11MYx3/vLdWP+uumJdFE3kplj7L3CJXskE1kS1I00EuLpKEiDdkh
syRlRdlUB+FYx94cx/p+fB/HOX17n+c+93fHM7733n+b/gN7nZeKouhaVRS1
9ffJXBRPCIuEG2VYXRbFO8LD0hcKs4U7hDfU9mZpebD6tS3cdrv024TXJL8u
3CV5vvCe5PeFlyXPUP+ZwiuSn1fbc8JUydOi7yDZtij8zbPSp0ifKjwn+UO1
fSCslLxK+FpyB/WdLfvr0h8SrpfcSW3vynav9HuE+4T7s+d6VpiSPeeNwgRh
pdpWBZAfVdtjwlLJLTXWyRpzlPRLhd6S+wiXSf5I9q0L7+cl6Z9Jr5Y+Xfrz
2WtibXOENyTPFb6Vr9sV9t8jQqvC410Rfh8nebywWPKrsreRfWxyXNjzrOQ9
44sPY/+j1fZA7HOY5C3Vti5iRFzmxNyrYrzzk/c+Q7hE8sXCdMk3Z9voM6Ti
MfHbBzEXYzI2MSSWt+ATya3V9pJsb0u/U/pW0j+JWK2LuK+MsVjjurDhM3zH
eCvC52Njfta6VlgjLFD7g9n5xP6GCndGTtZI3rxwrhJrbPRhHtbwsfBW9tru
Fq6M7+m7IL4nZ8id1bH++cLaqAXWQ0yIzVulc4v+j7AW4SjJRwtXZ/tghTAp
fENOX5QcY3L9VPm0seQd1dZXtgHCOcIy2ZYLgyO/mqvPQmovey2sifXT9rBw
eXZfcorc6qL+PxLvaEP+SbhI8mGyt5B9cekamhrx+bR0jtKGTO7yFxvz4YuL
s8fg26eES6INeQn1LcwXzlXbedkxnBH5937UPHX8Yth+ldxNtqvV5wXpFwoX
xByMu4YYJ9cQ61kb++8qfVzl/zWujr6jhX6Rf4Nkf0W2TSRfrrZZwVNw07Tk
GrhKOFZyE7XdX7qmRwpPl671odmxJKZXZve5r3Sc+Xa48FuVOWFp7A2umpS8
x6eoIcmd1fZN6bGPT14Tc4wj3tLPFsZIHlPx3tgjsR4rnCq5fWHeXRH8QA6R
U9cIt0vuqLbPg8s2kzwgmdOoMWoNbn0VLoz5qA/q6O3SvqIGqIUbos+aqDXm
ZO7hyZxPO99SI9RKRfglzoqeWvv1Qo3wnfp9X3pO5q4J25KIR6/k3JkpvYH0
7fGx9NPYL3Wm9ifJI33TTPYDZT8j21/4hHVR32dn2+hzVsUcOT74cBR8pT6N
JO+qtpOzY0e9EU9ieEHFtUWNweWnxxqYe5EwXvLAqJdnpM8V1FR0UdsB+F76
htJbSN9d+h3SG0pvJ7279LOEM7PjwlnD+m5KPksXhe2g5JjRZ5pQR3JW29bB
V9QfNbo8G8uyOQzbM9ljLQvbSLXVUv8fFJMG0k8R+odP//NtD/XfuLCP4Zq9
pG9amHMGZZ9j5Bnc9WBp37ZUn40ilvAzZxwxpW+f4DO+mRX7/0PzJ2JVOjfI
kcbET3o96b9L30T6UmpN+FLtX5XmjEOZqzCXLA9+4sxnrz+U5jY47jXpS4SJ
cT8YUXEf+k4WJiSPSe1Rg8w1Qbr+FVXkjPRhUrSU4k/9Vyu7/jnbTxJGSJ4k
+/qyV6T/qY09WnptrPF82Y8UdkjO397Z6IVPwnY4fJvN0XA1ck/hoeBtcpLc
7J4cp22FbYTHZHtcaCG5VrJPJ4ZeR/p6xJDYl94Te2keY3eIemCOltl7Zc/j
9d+8yGFy90Dh4OxcJqdPlP9uK12T1OLRcKNwQuQL6+GbbZJrirFOkL4HuS8c
l60fH3UGVyLvklxztOGPbvC3cGj2mcfZhw+PjDl3kqyl/LsW+hwSPuTbVkJd
9i/7daX3RE6RS+y1qdBEmKy2KXCV5AaxP/bdTkI96fWl99Uk1dK3EmbLNkfY
UvIGyTHvU3Eb3zIGfTtk+55vqqO2iB01RW1tkT3n3PB1dcxfP/nbzkKj5Pru
GPHuEfHvFrHfLs57cqAr8cmOCf5oKHnDyMtbSt8R4A44ZEDs/Vfl8gaFfUDN
NhIWRC3vKrlZxK9fxbZ9pTct3AefXsuY4esusV44mjXMCL6mrXPsp5MwPWzb
kYey1VWfMaX9CifChT2INfUi7ExekDvZXEl+wx1wRlU2r6LXk/xNlfP339rN
bkMm9+nbKpmD+YZgbZbchq1N5AsxJ/bz4jxomBwrfIgvqe2/Ak2S/YetDvEO
3iLXkL+oMofRVlv613AdZ2j0YRmsmW/rhh2ddR9ScV/a6sb8zEXMiO3Q4Jsf
pdeX3j47d8gh8ioL+yTHjNj1rjiX2V/rbE5IyZwBVzSL+k/BF6NL1w4+wTdw
MtzM/OQOZyznKfnE2XRr6fE7ST8imze6RP0eJHmE7MNZM3UT4OzhDMJGrPFn
0+SY3xX82VH6PtnYO/vOiG1/yfsJd0u+J3KAuO4euUJ/vq0W9oq+HeO84JvJ
4U/m/C/PmJucJ/e7R761F3aLuiD3T4PDpfcTRkoexRmQzYPbBz8dQ61kz82c
zM0dgbvBAcl3Bzie2oXj4CvOVM5WxmRsznRqn/qhtuCb2sHn8AM1Dvc1Tq59
OBfuhSPgCjiVuyqcC9feG34akn0/hRt+rnIOkde8udsWfpPzFt9JaB38N7X0
e4R3763Z772Z2Xdl7mgvlr7Xc9e/Se0Ts7+BV3eMsfbM9iU+JT7zhO+q/Kbl
ffl49luJNxNvOfgKn+CLE7N/F+BNy7uK3xqmRAx3CK7gzObs5oxfEt/0j/sS
Y20a+U6Ow//NI+fJ9fWCY/E3d6qbo56pReqP2u0Q9QXnEwtqjtojh8ll/Mca
WRv3icURb+6E+OTvhs4v8g3u4LyiNqgRzlZqktqk3uDT3pFPcCh8WVO6JqnF
ttk8Ss1Ra9wj6ENbr/iWNyZvTe7fCyNmvNV5DxBLYkysiSGxfKH03Yg3PW97
3l+8xXgP83bm9wB+exiS/FvOtdnnPW8o3lIDhZ7J9x3uZpwxcAMcwd2b3yi4
/3F/Hhw5eFSc9+Qmd0jeF32T75bcq7l3Ms912W89xudNypuPOxVz0Ybtich/
1sQ3syI/2SO/NfEGYu/4YHI2h8JlcBpvE2JErPgNg98yeDPwfuENxFuC3zyw
0Ye7fk32Www776B/AE6uU0s=
            "]], 
           Polygon[CompressedData["
1:eJwtlleUFkUQhYcfUUdw2BZUlCAgQRAQMJAUJQjoElfAhSUvSdICknOOy4Lk
tErOHAlKOHoIehQwggoq+qQ+CJhAMAN+91Q9fGfv3u6ev7umqnrK9crJGJKK
omgOFIKjIYpyMWYkUXQMfRwGoVvgtYHWkIM3LY6iqdCSsUsFougOvHSoxHgP
vJboVr62OV42ug/0hSx4Gq8h1IV+zFmJNwI9EsbAJLyxMAj9EgyAecw5A5vR
m2ADzGVOZ7gf3QSaQmDOx+ztIzgHs/EO4uXDWhjHfB36VXQTKI/uhreNudvh
TrwrnOl3uAZtGMuG6sx7lrFm0BzWwXC8CYydZt0ZKBwsFq3wfmJtEfRrMIx5
4xNbs97HFbfb0LdDDEPx2jFvuGIBI4PtR/vaA80YG4zXiXnF0DXQj0BNyMFr
izdUvxXsGY2hHF7XxM7ZFL7hOedhn7/n6YwNh46KgeZCZ8Y+gFMwi7EVeB+i
J8V2Ju11MXoJ1EI/yXgDqA19mL8Ubwks8/jo3F+jv4LzsBMvD28f6/fC43iN
9J7xpsA09DpYD7MY2wajPSe2o3fAG6zbD4Px0hkbq5xEz0HvRr8Oe+BFvASv
MBSBCniZeGnoe+EeuJnG7/KsyVCQ8QuccSI6U+sVb6jnedoLqqGrQFXPh6cU
A2gIlT3/D6g2dCa899EnoB3+vzw7wisAKXgOWsDz8KjH7yR6KnoK7PBY6Wxz
0YtgIRz291vV91IWuuj8kI++zO/8Bls9X4rj3Qcl4DG8V6C/ai2xOlG9tEX/
w5rS+GVSts8f8L+Hn2EL3lm8Z1S/wequJF4jP3sFdEV4CHpqL3izYa7/1mi8
3MSe8xne5/CF1/RGvPmMXeZ3rkCWP1u1fBcUgzf13oPlyHTGDqCrqd7QHfHW
si4/tvgpxxbi/cH/f6pXJdYHdjK2K1iOqAb2wn5Y4D3vULBeMdVz6bDn3yT0
RBilv4wd5ZlHYst11fYp9Av4kXIKbxX/r1bvgVmQBzeJbRnGzgWLo2Kxlflf
oreoryleOkfK3ttM1szwfnSVta0ZW+BrFLerjF2DReh+Hl+918XwiXognPbY
qk+OC1YnQxLLzfHo7tANekC2+i9ju3jmTjgYW0+ZoPgE68Hqxb183hzf63vK
cTgR7M5QLL9l7UW4BG/DW7Hlg/b5DnoKerLiDFl4L/Osd9U30DMTyznl3hCv
737KoWD1pPot6rVcESoF60Oqn76M1ZYO1tc66J2pf8AYeBhivA6J5U51xSNY
Xx3od5XutypwK3ope9gIm7x+/+M9FMRPQWnmlIdy8KDnoZ47wPvZAPRA9KBg
+VzK66OC18wKWB7s7hvteaWeqt5aAu8WvPaJ3QsZ6E6QqT7I2MRg7yXH7wx5
m32f6ke6h7sn1lv7KC7Q2PekXlMTXUu9wGOm95Dpv9EFRuDdoC9eT7MeWtT7
pPrjdWJwAy5COmNnY6tH9eof0Rdiyxfl0yjG89ALdZ5gvVVrCim+UBfqQP1g
d5V62HTlo/avu8hzQ3f24JR9A8xX7cDJ2O5xad1putv0nHrQINi9rruvN9RI
2Z2t3N4Nx+EYfArjGZsWrM8/ga4D9aG/7yXL4zFDNQmloGSwfql+XtrrZ6Zi
AL393Lo7lyuHYBkcYU4GtAt2j+h7or3qhT3kwprY7nX158mJ7WuD6hc2wWr1
lWDfRYqFvmX0nVXZ+21rdBt4IFifyfB+VBbdIdhvZXssOqIT7yv6vimKToPD
7OEQDPPa6ew9aQ16Jazyetc3XD2PURd0V/899bji6LuD9UHVlL5beurMwb4D
v4vtm0Lx+AX9K8yHebHVk+pzWWwxmID+m2f+VcDe0f9+ZldG
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1lnlsVlUQxV+/DzR9mle+hyhEtkrYUQTRQknZ2gKlLIWWNgVpAdksWlyi
JkaN0agxJgZQrKAguIBoS5FdZRFQFgWUJZioIIpEhBrUIIJU4u844x+TOe/c
uffdN/fM3Jc5dc646kQQBEexJHYkCoIp+PvDIKjCKsGT8DVxEBQSsJvxT7Db
wU/A5THWB/w4+ClsIPhTxh8F3wreBl4DrgIfBI/El7NmMX4+fD7+M/gF4BHg
XeD1Hn8IXMb6ReB5cI9gPcFbxYMj8FrwZPxE1lzHhzwNX8HzPvhzPOfAN+Bf
h58A/wX8MuwnuPZwb4FzienAe0oYLwaPAu+E78/zc8S8CT5FfKbisUpffweW
DX4W7j3wBWIywM94zH6P6Qd+CK4T6+axfm/8Xvgx8HPhN4HbgqeAPwS3A0+N
bU/aW3d8gudD+g7GV2HD4W/2fWoPDzN+KsUYMfPgShkrIyY3tPgmxAwnpgA/
Hr4zPg0bCL7MnFtCW3MNsbeBC8AbwBFzvmZ8CbgZfBb8VfjV8Hczfxb4I8Y6
gWfDlWMZ4F6haaGE+M3MnwDfnOd1xB7G7gVvhJuMDXDN5Pve7sJ/HNke72H8
Tuw68PrI8qNcVcJtAY8lfhjvag03MrDcbYbvjp9DTAnWMmnf0jdpOdG5tvB4
zXvBtS3tvYOdYb/d4H4mn/Xg+XBXwDvBr4IXShvMjXhvbWT5u4P4i+nkTvnE
nyP+OPwbjC/C9qnIiDkOvxW8ILK5jeB+8Cfgt4FfiaymtLfs0HT1J3xnYurA
/4CzweOTpteF4N+Z+z38Usb/AO8ApzP3jO//EvsZ7fmX9qT/k/DXw12LHRWG
bwI+DF4cmSbbEF8R23lVg5eDS7FWOju4HOYUss8s/DA/d9XjLK991elgcAhe
DX5JfYP4gPjzCdPYXwk7a+lnALF/85wf2HfGvjdpb09kZyddP++9Yiz4/cjW
aOY6lZ6/wy/3c2wNX+/6bw5ugx3zczmATYevjS1/0v/phK2pWu4C/2JsPUt9
r11sZ6o8KwfSXmbS5mjuWfyTrucR7G2Uf/sH0lVsfUo9YaX3IvXVOtdAFlxf
16pyq/1rvR7SJpbuOXwZPBRcxNyesfW4FfDXJO0s4qR9b1N8AeND1D8Dq8fe
PP9G/LuMn3c910TW39QPW3puBqnGmf8a/H6e02KrfWk4HbwHvxe7GnxfaPeF
evUK1b/32LTQzlo6nMtzHfEneeclbIvrf5GvH8ZWS6opaXWaf6PuhW+JP+h9
T3XdDX6G11ot/I8p289u7ELK6vcX8I3EbFdtBfbuzyO7dyp8P5r7Q8p0pT68
mPg+qiX4lcqzagD8a8ruCPX/VowP8nNXT8/3O0g9s9x7Sxk+I7T8XEzZe0uV
y9jyqfvohtBqfTB4lzTr56s+3yK0mP/7jL6raWw9tiMxOV6juhe+0Rl4T1b9
dmV8dGBn3+B3n+r8iserj3RwDUgzyqtyfgCfF5uGpFX1U32j6qsKvpff443e
3+b5P4Du/Qdiy9VG1jjL905jzqTA9cn4GHCPpPVq9eSZxE/0e7bEe5h62dLY
7kTd9UvAM/0/QfVZ4fGadxM2NLDe9BXxM/CriO/vPVN1d9rvQfXtDf6NOsvt
PI8DF4b2Tp3Lstj2p33+l9/QNFYdW7z+cx4Ed3RtqHYuew9Xr34bG8Lc9qHp
Wno7kTCdaf+6H9f6Xan/nyPeSzfBFcd2D+lee8zzrPta+pE22uKPpezeV08u
8ntQd2iu//PoHm30nl/j+5H+u8bW35SfenCX0PqqtP1lZP91s0PryTq7hpT9
a+nspuP/BTl5S+8=
            "]], 
           Polygon[CompressedData["
1:eJxNmHm0llUVxl/fD5L7Ip98GxEVEa6iODCjjBeByygy3Xu5TJcrg3NMZvM8
j6JlVmo2WGolpSkmkS1XtZaZ6VphpavBzMTSnLIUAjG058ezW6s/9vrOc/Y5
+z3DPs95zte8fkv75rIoitGHFUUP/U6LonhdFW/Ipqt8lmy/yq/KJqjcIptb
K4p5srNVPr0qijnqVxOeIrxI1lflhmyxyu3yd8o/W/jz4ZjELoRbVZ4g/7mC
vYVnCZ8tvKjwN/hWt/Aa4fXCtwr/pVEUT8iOV/0g2Z9U/r3itahNCE+rHIO+
U2XjVT5LdqHKF8nWqbxKbTco3g7hLtlxKs9W3anyrRQeIHy0bEXGOJm5FI49
X7iP8BGsgcoLw3NlzgtYu6aiOCj7u8b1rOxYxqO+j2qMvcNWyY6p7Puz2jwp
3+7S8+ol3+GywfINka2Xdan/WsW/JfsT6xFZk8o3yVbL1y27OTyHYcwx57Zb
Me9Q23GKsV/jekr4NuFJwpXanaE2rwi/LDtN5TG534yZ8f2mrjVTeaPi3x2u
Y+yjs+1lsnHyjZVtDu9BQ/ZYw3tD2wGyUeE+q1ReoXjr1H5beM7MfXrhPX1a
+E7hycJHCPeuXKburw0bc6jS90zDfWjbR/a3nC/tqb+67rlTh29x7lfI2sJ7
dLd8ZxbeuzmK0cbc5V8m/2mVc4Mc6RZeIbxceKXwt8PfZXz3KcZexXqjybGI
+XzDe9gq/HDpve3OfBsoW6NyE/kp/4/YA7VvEV4oPFT+8+V/Gzms8gTZO1Se
md+fKPy+8FpPEf516TU/QXiG8NPCx4XXib2+lzMs/wjhecJPCP9L+IDGO1b4
p8JPNnym6P+T0mdtiXC38CJ97wuK91lyvmZ8dfhszZd/SM1nDKPcLLtY5Yl5
vsmPtwhvr/v7nJ/ZwrPlX1J4jsz11rrX+wB7wlrl+SEn4aIzhGcW5ii4anrl
szlK/d8pPF94gXCL8IeEzxVuF24Tvk54h+KfU/h8LxUeCGcI/07x6uExMlZy
+q3wmfwd8p8n/FHhyRm/v3CHcIfwMuGRwpuEz8z1gN8a5Ef4rHJm+6h8iWxE
ze0v5VtqP6swf8CdnAHOwuNqPyg8ZsbeLvuyykeF+e4PsgEq95T9QuUHZG9S
uV9lLqQNbYcLz4Xb1L8f8TT/qcIPyf96wzlCrjwjOz4ck9h/lB2rcinbVTp/
a+E1Y+3gyE6VX21y/u2Q/znyX/Zg6fiHyf+S8OFq20v2T5VPzP37rfw9wjlA
LsCpc8Icy36C4doewuMLxyR25PzuEf6H8OjK+7lHeKTanxLmMjjtVJWb8/xR
h2+x8FK4XPE/Irwy+ahV+FPhnCF3pso+rPKnyTGVZ8g+EzbKtN8K93JnqP8C
4avCe8RedchuYK3kn1A4B8iFtuQXYhL7JNmLzEU2NMwBcAHze0XlMXk+WG/u
pn2q+7l898v2N8w5cA91+JZmPnJGOatwL/v9UmkOJkfIFe4Y+Igc7QuHV85d
9pi9Zs1Yu56V94C1L7I/+fCr0rnXlPnNHPuq3XnCg2rWBGgDcoxcYP8ONlwH
p8KDtF0r+3FpzoP7yCFyCf58NvkeLoe/d+d+j4IDw/fz6jCXwqncd+QEa8ca
vqDyv3ONWBvm/VquH2t2oGG+h4PgnrfLPhjee3Lg/WGNgFbg/tuZbSbVvIf0
haPXy6ZUHv+7k6/Zs9bKNkP2rrCP9nD7SbJ1Kj/e8HnjvHJfEmtwzRwzJfvC
cXAbMeD8iXkfvBc+yfy7WPiO8J3VmbzK+DjDnGXO3E11z6kl48+S/+PCd8m/
XfYxlW8Lay001666x8x33xP+3nbZnbLN6rulch1jYc60XQg/yq6HK1R3bZ4H
OOxLYR+cDK/R5uvso3zLZV9lbSvfGfDw5WHNwdqzBz9Q+YeyTTVrIrQRY7lE
eG3hMe3M9miWR+ruQ18039rKtkZ2V9j3PdmFNa8hZ7lX5v+u5NOuypoFrfLd
sAZlfdAv31H59lwz1urhutd+QO4/e7Cp8tgY4/fDY0aD7si50Ie+G1S3sfId
y93K+b0mvKfsLf2ZK3dqc+bfvXVr7snhM8XZOkflnjVraHTw0cJPleaA/sLD
hZ8vfQePFD6q8p3BXdE/rAdPl40I8ym/9BmZ5w7Nh44bC2f8Xxt8nE3qeCtw
X49J/57kY2KfGOY6OG9IeEyMgW8zVnQvGoZ7aSC5E9Zp5AS50ZF1lLmL8aHl
0Bi0WRLWeG3ZDk3O3code3JlG0oOpm9w+O7jDjwhrH8OvS3CGA1yIN8/47KO
tmgk2nJHseas9bSMz7eYI3NFQ6Al2lX3s7o19svJrzfX3aY5PCb6blR5WM1v
Jt5OaAq0ApphQ5jzuH+580annz60RYuQCwdLayhyAk0+NtdnamW9vkU2j1yp
rEGIz53B3XGB8AXCq4XPF35zuA2+zuzDXJgTscg/3n6lbFJYT6HZ0Grj2bew
HkQTcb8ME96bfIQWGJr5wJqdwhqE6yjzjuGNdeitJf/tdcd8rbRm41u8IYuM
jxadEX5jUj8zrCnQEmgKeJRvcq+hBRjL3GwzPbl2ZvYlFm/HWRmHMm9VOGBb
nnnOPpzRlfVwCfoCzYhWhE95k3Un/3Du0ZjoQNaI8d+SbfDBDY2cD2/kI1W+
nHq4WnXfCt/V+0rvP3c2992LDb8D0EYh/2PyT5S/l/An2aOa3wy8XV5IfcGb
45q6xwj3o4kYOxzdlvnKXn9T+BthzvwffzIX5oQPzdSa+ugT8BMaoDCnw+1w
+vL8/gN1cz7cj07qrPkNgi5Ep/I2QTMtq9lHG3xoRzTs8Mw/cveL4bHyja/J
Lqr8bTTnQ8l3N+h7N4bfx10130dwNtyN5kP73ZjjYI7M5yvhsTOHSytrsHvy
/4V+uR7MnZj0PaQfK78FiY2mRDeSA4tzPh15vzxYt2a7P/njSPn3NPyNfsmD
B1M/o3lrld+4vOF4u6FXeHNxP/AmW175W+gV3ih8kztjYZ7njuRVuB1df0xY
o14ZzllyFw2HlkPDX6/xXRHWuFuzHW9q3rh7U0sxplL2n4bHioZHMzbn2dqa
+cD6cm9embFW5TlhTHAV/wUxVjgFbkGrfi7PxqP5/wNnhPwih1lj1hp99oGw
jkBrkPs7c/ycAdb3l/ke2pdrdl/+n8Babsv95w7nDBODtWMNif1fpKIZog==

            "]], 
           Polygon[CompressedData["
1:eJxNlnlUllUQh18/QuIzP31vohgK4gKu4V7inqi5VIYZLinmiiai7afVFsvq
VO62uGSKYZKogFAqoqZmi5V26pSKmpq5kJplCS49c2b+6I/n8GNm7v3mzp17
7xs/Jit1asDzvFkQDqtDnncBQxPneYlBz2sKHlyP9LwzvucV4ZtHTFf8XaAb
JIR53mfY3oEd+P8irhZjomAU/pGQDrHEFRPzOXRHbyZ2E4zG1xE6wG1wBVsu
MR76OnNV4e832N7DVkkeFXAUey62fyM1hzuZrx8kwibi1kMQ3RNfL0iB9uTT
Djbii8Z3O7Zl6EPMU5X/I+Ac836ArSyg+jxc8LUWCdAWbiZuuOV6mbgKuAqf
MK4dtraQY3Vsj+5kaxJ/MrozFKHrMk88NLBccmENrIUJ2PYS0xx9mrGr0C3R
raApXJQ6wz+wBl9tbFEQDcexLcc2ED0A1lkt7kLXg5P4f4czNu+NrCkCasOP
2BwxDdBxEIM+hW0lcVep9RWYg14rc1CXgpDW427i7oFBsADbFvxH4CiU+bof
1Yhz4FsuX2MbhR4BD8AKbBGwhzE1+O3Y/+Vwi+UutchmXKSMt54Ioqs5/St9
8j62OoyLlr2SejF3MwiHPHyNsTeCFhAZpjWSPT9sdZH6xEkNrJYf4otHN5Q+
gxtsnn7o/jAU0iAfWw18w9CtIQk+wnY+oD1RZH13H3oI3C89RA4dYQK6Ob6u
6MXEfc+YvfAtBJz+/gn0ipDmLmt4EFsjxjSE+na2cuz3GuFr7PQcS/8F8FeB
SjtbS+En9EE4YHv+FbZhxKTBUFhsawqhe6P7QF9Ygm2f5RUm9ZC+JJ+WVm+p
z1qpBfqS9WdNtG+9KDXvju7h9Hy2CWrdZO6e6DtgrvXYCXrnNzgJj0u95KxA
Z9hBTIDYKrKPsJ34K8TlEZeBfyKMt3OUI3thaxyObbXsJWP6wr3QH9sC6R/8
o9EFzJUPM53OJ+fxO3xTiM2EdLnbIAMm4cuX/YWNUAxTse0nfrnsM/rLkMbL
uIXoEjsXh+EIJGG/FTZYvaWf5I4rJW6b3B0wW/oipL+3Dv962AC/2l0o/mPo
47AT3Zu4sTBOsLWl2zlbCdlwkNgDvvac7Okh9CrL/wds08npYShwukb5/cn4
CtH7TEsOWcRMg10hreVr2F6HN2Ch09qKbwC+RXYuzvF7Z6Hc+nU2vA1z5B4h
bg8x89Bzna6nD7b56FekT9A9oBNsx/cYtked9kiy2ZLJp5PkL3c/thT0y+iX
7O6RWsy0+ZKtn15Fz3JagxRsvSDT9vI5bB3Q22QdzDUQlsi9Z7kuRS+T/cY+
JKjrEd8X+J5EPwEl6NbYnnL6DnZDz0C/AC9CF8Z1ln4Mqk/eRnk7Y9D1IA4+
Dek8SeiW0AoyiHnIqRZbE3uTp9q9shmdhZ7m9I2oA3XtTpH7bbftjezXm/AW
JEKC0/dGzvHHIa3ldHjEalGKrZnTNyLb3qsWECL/6nCJftqN792Q3nHjYaLE
WE6XeU/yAnq+JV7G9YI2+Cc7raPUU+7icuuXY/a+Zdk8W0J6juU8b7X6Sj0m
OZ1jUFB7R87AWPQ4O4NbmWcX7IRKX++1/ehf4Gc7C7GMqe/0O6HM3oWnne6f
/Jbk+YzTu+46/mvwt9VKvpcK0RuhGObbvStv7E3EV5c6QVXyCQ/q9468aTXR
I5x+Y8j7WkveR3QhOsr6IMZsp3x9h+W+lDqe9rUPEuw7aAo6E676ejcusm+0
a+iz9j0neZWj//C1h+XspZHDeHmX7J2Jtb4bIzV02i8DsQ2GVDvTz9o5K7Wz
8rzT35N7+U/mvujrt2EFXPb1O6HEaj8yqPeyvDmT0JODul5Zu3xTpMJg+A8q
OWap
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlnlsVlUQxV95BcqTfh9+D9qioEEjiqIRo9EYtxg1ajRxTYwa44JrmlKg
QEpRaGlRW8QWhQSNC5IgRsAEN1BpQQWL4EIjXQBpaYGylL1SoAv+Tmb+uJnz
zp07d5t75o16fsIjef2CIKinhbS3oyDIxRZgx8RBsAXyv0QQtNOWgc+lgmAG
fS/hU4q9Cp8/4E/R30KrBDfjk5MeBNm0afTvg/8cvg/+GPgH8BHwB9h84nyC
7eV7MXYv/SXEfQW+CnsMfhF8G/z7oa2tCvsMcdOIvwGfYvAl4POTzMf3eO0H
/8ngCfiuI0YuPkl8BuOzi75yxYR/GT4Tfgu+afQdgX9QvuDh8IXgJ2md8NX4
NDJ2Ovh3xq7C5jHXV9ij8Guwh+F/9X1VY1cyZjq4m/4DtOVwA4l3J20Q8SPm
CWgH4EfAjYB7C+oC7MeMLQAvxR70c9CZ6DyXgjvhbmJMPfgM3I3gOvByfBbT
pjB2BfYG+K3wp/H5izGf+TmfpP0GHq079PPfA9fp/HG4zKStZytx/oSbAd6G
neTr3ww/GDsH/iB8N2M+9TiapxD+y9Bi1mIvZ9wGfCaBG+D2J2yP2ush8Ar4
sykbo7ErsR20mYGNb/Yc249PBXau9gIu0ZqUv6Hloe5lPjFfZb4E6zuPfdwD
Pkl/CE7QUvB5cPNoY8Ft+B9P2L0NjS1/lEtTseWRzVXPXJWRxf8X3wa+Z8Fv
BzeBi8E7wOtD29dq7ABizwVfiz3E2PngbOa/ku9y8BXplm/CTfSP4rsUfBH2
OtaxI7T8qfZ9Kv6z8P3oH8S4nxlTElgOD+N7jOaj/ydfj9Y2EL4H/Cj8dvgy
8M6E7Uvntgibk7Q1LsDnMs8l5UyT5/wmxq2OLAdWYQv9PRZht+GTj12Pz0ba
RL/fbN9LLf79krZOrfd64u/EpwefsZ7DytXp4JGMGZK0mHq/NcTrlb6Ab6H/
R74XgFsT9u50xv3haz2vCvydSqOK9Hb83Z3x3JwIvym0fWntm+FLsa8FtoeF
fncfYSsY/y62HZ81KdOg3Yy72HVP2jjLxy4J7Z3ovUgr1kqbAnuPevuTwR+C
O1z7pGkVrnXF2JGut3rvcdLyolzaFtvbk8a+6efTGNldHIZ/AG4vdlpgZ3RO
7wp7IXwj9nX4Zuw4/z5L/zXgBteN52LLOemn8qQXfjzcpa4bXfhkOP8Y3ADw
bGJuZP7u0Pbbh33BdThFf3/aabin3V/44djiyPdFxfd3MU1vMt1yQzkqHda+
7sKnxe9aZ/5dZHuR5jfT5gWmP3ozejttriHSjIixQ4lTCb8vslxT/D2hna3e
yDv4nMC/Bm5YbLVJGj4A/H1ouq1a9R7fV6fbm02Bv1H9SlheSa8y4NZip+K/
Dlvp/ln4DwF/rbqQsPxXfbk7Nu2Vvi1jbUfhZgV2Z7/421H9mu1npPM84T7y
zYyt9nTgM5y+cfgshHs8Nj/pW5VrmtaQ5muQf+jr13qkn6qD/zBnHW2Oa0Km
a2NRbHqo88lWjkV2nso95Zhq1n3wNXx3gZ8CfxHZvpQzZV7P9JanuA6r/iZd
97Kw+coJr4P3ep1NT9p73w2+He42r/XSur9du/TvoTqe6/8sGV6DRqebLpaB
Z4aW98qZVuzNnvPK/yWR3Zfusc/nutXzQXeYE1tdVk27X7XA/xNUR1pTphHS
nyzX5x6vZfpH6kpZnZJu7PJ/If1LzIxND/X9RmxvROf2EPgJr03ae43n+bfY
OmkB/hOkl35Hqjv651AN0n9Au/9fnUrZXrTXO2LLDdWajshqiXRY86v2KeaM
2OLrHbW4/iuXSuH/B2FLfgA=
            "]], 
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1:eJwtlndUl2UUx1/4Ceqr/Mj3zb0OWm47tvewvYeN0x5m61Tg1oBSQA3NQnCc
o5WmdrTMlZmmCU40FU04JqLIEHAwFAUUBbTPPff+8Tnn+957n32f+7xRQ2OG
RIc6jpMMYdDed5zNAcc5H3ScDuiO0CzScWqwPYp+DB6HS/gPYRuAHgg3wAVs
+7H9BwehP7ZpMBWmQ99mjuPT1zHipuDP8RwnxXWcGXAG21psAeIW8b0Y2qCv
gSrzeeg2tI+in27QHRKwHcWfiH8qJEMe/XrE9TB/IiRBGfbp+KfR91yYB2nY
U6Ed8QOJn4lub3oGupyYCgiiI6CSsf4I6LymYk+Gg/Q7DVsBvm9tnW3p4yS+
U/AMtjP4Q7Ft43s7vITtMrYGuAIt8GVgrw3o/h5AZ8Mk9I301xF/Jd9VsBxy
iLse3yZ0OnRGd4IucBrfVebSAr0CXYF20a1sL2X+IehQX/f7MrbcgJ7hIBkP
vqTPeBkfJuM7whoL4BgUwgxshUE9833o7rSJgh42h1bMuTWU43OYe1uZKzod
tlh+TZD8IiYSfx7jHIEr9L0U/0n8V9EOMeGwDtt62AjV+FYRuxIa0EextSPm
CVu7jPck+ik71wGM8R06xdczlX5/Ie4UbefTxwJD9BLIwtdXco+2XWjbCTpD
LLbjtJmNv4g+iuE4tCYuEn87OXcYQ9zz8By8APXEhxHzCvpl2XO7T6+iR8Mo
2S9sQWsr+yD7UeLq3CU/Ja/6o/tBH7tHs7HNgjmWIx2wvYge4mt+NTFGc2zj
6WccHGLuI7DtZM5xfMfCbnQstsNBvUcJ6E3Y0iED/iRmravruYhvM7olfYYw
3tvY3oF3YZjUCWwBaLRx5Tyq0Wdlry0n19D+d3hYchHbX+jRMBKd6el9knsl
+xFBXx8R9zF8AkPhPasBcrffR0fD5xADPrZgpJ7RHPr7EX6Av+l3BP7h4OJv
SdxI9FjGGQOb8ccQNwodh92zfuLlHvh6B5tjC4dBts8JxE509U6k0PYb28vx
6C8gTuoQ86jCtg29VdYqe4GtBOaiy/FVQCXs8vRccoO6F/94Oq8k9CQYLnUV
30ZsGyT3LA9lbVKT1qBXwWq721tsTdJmq8wBrpU98vUuSo0/J2fu6d3Ot5qc
j95jOSHz34vOkvvC+pbCOZkrvpqgzlXyaTu2HZ6e3xT6nmx3pyt79bXUXeIW
ErcP/37419M9mIdtAcyXO+3p2bSgTS/oDQ/aXTlvOVRtb9Bh2SeZt+Vrns1f
6tQBdLanb4u8ZZnYdkCGrbcR8tGlUGJ1ozksl/OwmtkS9rqaJzKHAnShq2e5
werPGfRZuFf8UgvhuNRyfEnEJkKqq+csa7ufuGLzP4Ae7Gt9lzofbTkXwVrX
870OMl29Y/fJel3dS6k/pegye0PkLcly9Z5IDYm3O5CDrQiK5f2xWl3EuGl8
z7QzrMBWKXkGtfi+t/fwkqd7cTqod/QheMTerxDmV4u/Bi5YnT5B3DLa/QoX
0dnYbiX+pN0LeSNkDqc9fWcO217Jnt1lubEI/RssgyaJ81SLbaW9X3cSe4ev
/x251lbmUAcXrZ7Lm/Gm1dtw5rqTOe2C13yttfIfI+/r676+M6vtziyxdUg+
TUQvhp+tDtYF9T3oSptuvr5z8n+yEFa4+g8k82oktgFKLddlHbKX9baeFZZf
4v8JvRv22J0Ik7nZO7fBaoTc71noVEiz9+YNq8Hylsg634LbfN3v+qD+E9zu
a30OJQ8m8P1VQHNI/od6YhvH99iA1s5h9kbIv8cH6A99fcvkHZJ6+yl8BvfA
3b7muuRwE2P18/WNrLP3X/71Gu0tvgl9M9wCvXytF5JjvdF9fL0LJ7CVybqs
v3rLnZ74rvP13+ZpeyMk7+Qf6ln4Hx3wmeg=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxFlntMV2UYx095rMWxndb55coLiZhY5gVFAxISSVETVMAUBVMMK22YXbcu
W7etrdyqLWdYyrxSGYYkWlkpM12ly2JpmTpzKatZamq2bqvPd8+z9ce77/d8
3+ec3/s+119G7aLy+ouDIDjA6sKqCYNgFVgL9koFwSdgWRwEw+Ft8PHwU2lB
sBSbX8ESnt+FF0RBMA6+CZuB2O4Ct6CPAfPQXwC7or8MNqO/Cn6aBEE12I13
L2PvJfjN2Oby3IpNFrgDmyr0LPRLsXkRng8fy2qGD0AbDF+LfXfs01lN8OFo
H7P/Prwd3MfaGtg712OzAT4am2vg6+AZ4HU8N8Ivhz8bmv4Y+Jz75CnwVmze
1nn43Vz48/AQPgi+EL6f874DtgR251L0HeAwbP7BXw2B3VdnXoR+Avv7Q/vd
e8Du2DWAhexfDV8OvwW+GtyIzTpwEfppcBZ6Jd/ahj4bXMO3Rihu8g82X8JL
0GfzfB7+INoGbO6UD9CqWO28OxebGfCf0RdiM8nPPAY+JzKbCrCUtR0+C8xn
faDYYlOB/QH4TPg81lH4NLTvwEOsarRjYFvwv3aYVYN+SWQ++RvfFCuO6D3R
b4QvgH/NeROeX4EXoPXCfj32A8CR6FvQJ6Cf9ZzsCR8Ymy87eLcfvBz+Ibw3
fBk2F7CtcZ/U8o317rfTaearndjcpfuhT0DvizaRtU25h33I3orA7Mf4mXun
rC6GwVfy3l+J5aryqoS9r+BTsB0ZWx6dZf8o62F4Nlqax133kj/3wycpZxKr
C+V8F56Xuh92h1Z328F7PR+UA7extxm9KDJfy+fF8EKvSdXyMb75iHJSdR1Z
PQ4C+7k/VeNXwhvhRfDPE+sLA1RT8Bnw/rHl/1u8m8m7Qzyfv2F/FSsntFgo
T5S3Q/1s8uEQzzGdPRtepjphtSZWXxvgf8C/8P6g35Wf18B7YJ8TW13+wP4Z
v4vqvcXjlQHPjC1GipXu2IJ+A+9m+3lG676RnX8Utr+nWW78Cwbep9SLZnpd
LED7DPyI7XPgRJ47wKmx9Y0K7fH700P73Upwj/ecn0LLbdVuuu4eWV/Kiywn
C9DfSOzM8kM7/LjHTnVT7vlQ5bWld4+AlbHVvnpAiffeTGxmep2Oi6xnb4K3
6je0AvPja95P1FdUC7rTAymzk71ioJ6uHFMPmR9ZXVTH9ruq3+nY/xLaGU6C
d/B8Aryd/de5w1h4H/hyxRV+LXwGNt97f2hGr1NcvJ+rr/6JFkXWD1V3udhv
Dc1Xp7xelLfqIcrvaewf8p6m75yEP+Q11SO2elyBNspnmeJeovtrRoD16Ge8
lx7Ebp73xptYT8PPoQ2F3wf/Vt/x+BaCdX6XCu+f8sHdKYuXYqQ4xynztXr4
FfCVoc2dKfC9ocVosZ9Bvk2P7dtv8ltPhjbLngEfDW1mPQGOwOZx8HhifVJz
5wi8jVXsfpbv1+gMykH3v2KhWaq5Ngdc5vmqWm7wus7yHqW7/4Z2PrEzqw+s
9brWfHkPPt5r7SrvS5rX8tVi+I/sd+V5MnxzYnNQc7g4ZWeU/+eHFivFWjNQ
M1Rn00xW7BSfxsT6uWbBYY/PamyWhOYr1U5TYr1KudoUWi9SvDrR+7ifJ6Nd
5HNE9T4X3qkcjm1GqH53+5nlt1RkPV8zbrDPKc2RXYn5X3HYC+/mM1rzusL7
vHpCjsdoT2K5pBheSGyGalaWYlsfWv+Rv9QD5aud2Gx036oX5fl/jH1oRV5f
OnOn96J85VbK+oXqrs6/qW+XpawH6e79vY40K/U/Tf2wL9pU/5+g2dThtXwQ
/A8uo0h5
            "]], 
           Polygon[CompressedData["
1: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
9YQ36ydxZ/67oCdBFy2jvmBv7PQ/9md4fQ==
            "]], 
           Polygon[CompressedData["
1:eJwtlnlQ1VUUx1/6sHw/81XvpyUCiooKqKCiCAoqqwiEsgQiuCCIUYhLy7RN
++S0TDVT41ZaLqnllo1ammlTapppWpqWG6aWaYCiZanZ58w5f3xmvu977/3d
++4959wbXlGXP7WFx+OZBUGQ4Ho8m7wez0i/x5OIHgx90Q/jzYCZcCKgbZvR
2bQNdzyeFHDxApCE9zZt7dD3orejU2A4hOBF0TcShtG2AO8y32uGp9HPwPMQ
T9tQmI9eBO/DPYwNZlwHCIfX8W7F+4exV+FfWImXxrhv0U+iB6D3oL+D7ZCP
1w1vB3on3M349pCMN8/m6M23e0EX9Fq8/ujRtO9HZ+JlwUhXv1GAF0Hb7fRp
C/3Qj9genYR6GG7/8w7G3Al3wQi89Xjr4BNZk6yB8UmQCd/jjcYrpt9ZdCIk
yB7i9XB1jIz9yP6vrO8A+ggchgL6XGHu52wv/0L/DcH4HaAjLJFzoS0ePVD+
F3oj3iB0KKxAL4fF1i/K9iMDHY3uBXmy13jn4A/ojNfIPA0B3YtH8ZrQkehJ
6FfhNVk3XgT/sxsMoe0tr8ZOV9l32Ef7y7IW2jpDGnoe3nx4B8biNeI9yJha
mArv4mfIGcmZQbBfz3Uu2ke7A22gDK/Jq2OqmGsydMcrxiuEIviCbx0NaLxL
3N8P0fRZircEQtAD8D5AD0a/gb6BvgkeV7038ebAbGiN9xNth+AwTMOLoc/P
6CO2P5V4v6AXyN7Z+hei34NQ1hgCPR39PxKzy2Ru9BBIhjD6L8dLMr0C/SE8
QN8LeKV4FYyfBL/in4LTlidxtPVwNG9b0j8ePQi+oj0PL0jyG9rBBbzzAa0L
Euty1uHoEejV6DWwNqD5Kzkle94W/LABfz10sjPdiI7lmzHQx2pPInoaus7V
c5azmo7+jL6f2lxZeJvQPdFl6G/Qu2C3eeV4FTAR9ga0HryIfgGesP8ra0hF
T4Zqi68c5s6GHOY7iJdPn1L0IXQu/lgoczQ2avB60X4MfRwq6Lcbbxc0Q7nF
bjo6R2ql/d84+vW3GrDBq7l31Ud+wk2f7qP8zyjaqyROodZiI9Gvde8a+npA
Y87LelrCOnQubV3p05dvxkI/2Cbz+7UuS57dgtfC1XMeBkPhPtrOWH3pYvsr
Z+jju46jdfxriTWp71KrXF1fpeXySlgl9dXVujXK6qXUIcmVOKnhtC+CxfAj
/AAHJT5tHyVOG9B/wnkowSti7kIY52i+S0w0s0eXoKN9V/JR6sVq9Bp4RWol
bf/R5wa0cTRGJA6u8/safG53QStH//tpdD2cgvHMMYf22QGtCyV4c9GNPs15
Wb/st+y75HKtndF0iKX/Rfo1+bQeSR43oMdYPBVYPI2VOo4egzdB5rQ5DsB+
258aqzntLe+kftTh9ZF6zjev+LQGSL6H+jVmsyHX4lXmypM72Or0HrxRaK+r
tVX2KAjdCjIcbZf6PQZdavdfuNRk+Njq/hR0NdRYTZEzOmv1TP777+hzAb0/
5H5JxQtDd5KYt/ug3upZmKP3kNztcscvtf6XaL9obwK5vwb6NY63SF2GLyUX
8QoYf1LWQNt49ARHc1Hiqbdf3wnyXpD7dyHeMqnXXn1vVDJmEhT59RtV6BTL
Ffl2KjrN1Zy+jDcOr5pvTYEzdg4x9t9/szr6GN7j8JRX3x3FllMSTxNgop15
id0vW2FbQHNF7vt0OQdX3xgJjt7F3V2rR46ubyfeDthqOS1vAXnzpKN7oiNh
JsyAh2ztUof6Mb6vvLkczWN5h93m6vsp0e6v1rYfJ9DH4LjtbZbVKXmjRLi6
JsmfzbDF3kDypirHP4ou9GvOSu7KG2QW3kvwrJ1ltMVTpl/fO8lW+3tDjKvv
Snl/yntuL3ofrLL/+D+wP1ae
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlnlsV0UUhR/Yh+jD/MC8BwYxQAiKihhFFDEIRkUlIrGaaOIKylahZakW
CqUUCm2lttBSaKELtkSLViRUwN2gBtEYRBaxKYG0iBCCxgURd7+Te/+Y3DNn
7sybN3PvuTNwclZ6ZtcgCL6hXUD7KgqCM9g27KJUENwdBsHXcRBMxn4Hn4Ed
kwTBZmwt40sZ+z0tCCaBc2lj4V+DuxP7Lf7jsF/SvxWbw/jztJvAu7UmOACv
AA/A7qc7GDuR9VuxLzO+n7FJ8gF/Dh4JfgH8H9/ci38X+s/4OssZvxJ7gO5E
5zVeBL+C/9kHPw2uL+sXwb8Ht4R2EL4c2wvuUn0X/xn49QZvAl+sf8DnHN+c
hd9u8NOMP0X7DW4hPnXgLfiNS4yXb57OgX4T/F7m5dC/HDxT5wDuC34O3C+0
8x+E7ebfuhpbwJwE26T9RPatReBs5gyH/xTcTnsInA/XAX4UvBR8Cvy45jJv
EHuoBH8MLmJsKvg84/XYOtpwxofRysG78OkHLgZX4tsVvAD8EriQOefZQwY+
q3X38KnE7nEPe54Dv4V2FNyMXQd/GvwZ+CePId3jEOZUgdeCS2nZ4C5wi8ET
wG/g20LrD54Fd7/Hw0bwDdj2wGJI8TZG/xVbXOlMdoDzI4sN7XOI+2veaNqR
wGJ0bsrOfA0+s8HXwb3L3DngYYoNjzXFzAjsO/SvwmYxvtPjLBP8q595I+ss
8P1shvs3tvNcA1dOywP3SGwtrTkUm5EyXBxZLGjPfbDT4XtiG1ijN3NywW/h
U4E9hc9sxWVk/7Ic3xpaA9wIfN+OLE911/Pgb4T/hHVqIsvH+XDjPdfuwqb5
+mXw8/H5Ar4Ie4/H5O1+VjqTVtZ5EnsMfor2F9nZFiie6XeCMxXTtLbA4qwl
Mn/l2nz3ke86+ocDi0/FzDy47uylxHVGsTWX1gF+AJvnsdHJHlamzD/AfxX4
BPD9yPBi+EsSu1ftvxZ7gjnpniMnPV+WgH8GP+L5Iq2TVh2Ea2XO8cDudKFr
4AH407QnwMvgfvCzKAS/SMuS3sG9iv2euZuwP7p26Y7mRpYjua450pkKxruH
pj8pbBX9C7FT8K+MTQueBa8FR+CpKYsZ6dIGuBKPyUyPgTOu36X6NngH9s/Y
tE65XEybDv47Nh2YBv4L3Bhanm7EnnXd0D9KA05KWkPL5WrsLZztOT+HQl9T
6/wB1wB+E3wvPh3s42xgGr41tL1JH5Xjus/j+D8cmlY8Flo8KU60v5Wx5a1y
rcxjvgW73WPpdewViZ31BmmC7tv15HrXuqqU1Sidwz9pdkfKm26JaY5iTLlS
4ncXJhZX0qKLwO2M/RKYblf7v18D/xF7GxVaLZOu6dyUm9qbcrwPPnukd6qp
kemc/r3WY1j5Ug/f7DVP+pbtebo9tnhTXu6LbZ0a8LWsWU2/R2j1qz62mqE6
UiFdBg9MTMul6aMS0+dl4AHgoYmdo7RIdU01ZT1rvOIaq3wv99y5DN/YNV+a
0JiyOHowsRqn+70PXJ+y8znC3DsSi6H1cE0pu/fOyObuhB/L+FG/b+XdBPrb
XM+PeQ5KQ6RXh5i7mrltnrPK3yZfJ515BR6r+uc6z7UPI/tvaeBtieWeeI1X
+Dn0hO+VmAaplvUHN4f2hhntWLH0gb9V9MYY7/ts8xohzd7qNUL1Ylts8SPN
Owze67Ehjb3Z677ORHVBOrortljSnY7UXjzfleMz/F0xE1vgdVZvqnx/X+m9
UeD6nIPNde2QVpR5bEgfSl0rpDODPS+UC3rbqKasiq2+qNaoTtb6m0TvkEMe
t3oD/A+fP2yY
            "]], 
           Polygon[CompressedData["
1:eJw1mHm0llUVxg94X4fe8HM4bxqpCZqaWlKSQw6J4pRm6DLXqtYqF7VKqdCy
EBWV6SIyeQERkXm4jIJchZtjooIyT6IIyqCAgvOYs/b8ejZ/POs7++zznnGf
59nna9P5msu6tkwptWuRUp1+G3NKU4Tby5QGCN+uUjpYeEzl/wgr5TunSOls
YYXKD6vuIeEEtWknzFLdhfJdIMxQ+SthtsrvqO91aveAcL9wgNoeGLhV/m3J
vn8LzcK+qq8Fesu/Pdn3Ldm9ZPcUKpUXqu4p4XiVf1B5Tsytg7Ase6wmYf/K
Y1K3VFie3ZZv7lLbXcl9tZLdQ/YO2Q21lFarTUfZa2UPkn+67GnCwNL2cypf
LP9FwrMqvyH8VuXNaj9D/qdlt5f9ouzxsn+i/sfIflP2qJrt8bLHCe1Vvkho
UvkD+beo/XGyR8p+V/Zi2W+pvzeFmSrPEh5V+RFhhMp3Cc9kj8lYE4TXVd4V
8+K7tcLV6m8TZy3/ier/x5XHZg4n6Xeift+Tf6P8X6r9F8K9Ks8WFmePQd8T
hZPVfoLav672I2veE/ZmVfbeETOvytevcCz1Ul1P4WbV31I6Zu6J/SaW9pR9
reydyee6V+U6ygtjjevlO7nw2vmGbzmzb6jd3sJNsf9z5BuvOY0TXlJ5k9Ag
3CHM07fzhTq130NYxFkJ1whdhd7y9RH6C7cJvVXXRxis8h7qf5X67yt7CHXE
reofjLYt5F+Z/M3p6vs0YbXKa4Sfxj5Th2+m2p8l+yW1nxLnydpOEh6OM+Ps
iCXOnLleH/HKnB+Q7wjZz8v+B+uM+8f5Ti29hq90sZ9JXttW2VfI/0ryvXhR
9sbs7zYJ9wlzhCbuTvaZcXb1wkEqv6K6X0U836zxBsi+VPZG2WM5++w6yuNK
90nfzGWasLl0bBPjF6q/FkKXuN+Daj7DfSpzCmfbT9+2lH+x/J3lfzl7DU3B
I3vFfnQTCpU3xzoYa3qcKfv0ffmOFbbJd4navqz+7oPTYr+JqZGyx7Jm2c/J
HhYxSqzeofoGYZvKH8k3WG3OUn8/E84U1qr+WeF7Kh8pHCUcLXTTN20iXogf
2k6V/VbyN/AlMcDZcx//KVxHnKtuZHY/A9X+DbVfpvqziZmwl5bGEqFDZR/x
1Sj/FGGsMFp9ZP2uVvsu2r8esj9VPDwt+2rWx10UblK5h/BC6bsPB5xa2fdf
tV+e3Ob0mD9jMNYw+Wsqr5O/J/dN9kER/1dpvEmxnwcLE+AR4Ui4Wf4b1H5o
6b2mDW3ZQ/alk/q+VLhMmC/fh2ozuea6ZtlvJ7flTrGXzIm5XSCcX/nOc/cp
z5Lv/eQ65nuA7P2FoSrfKbRCy5LXPy47Bjj74cIvY/x5wiUqnyt0jDEYi2/Y
l+HRF2d2oNouST5LtOIw2WuSeZE9YOyJ2es9OmKFs10uvKO6K0MPm4Nz4JF/
ZccSerNOuEd1o2OOzHWB6p4Q3hd+H3wCPx+mvj/X+b0me4Hsd7PHaA6tbSN/
3+Bv4og2jwuHVv72VbX9ddwPuPfx7DvDXblbaFu5jyURi7RBi3Zkf7tIWBia
gXYQU6cI6yPW2kZ8DxAOV3l79h3lbs4VDlHddyrPaUHozxmcdeG+P4PDVd6a
rE+Nsd+HCpOJXeGPKv9B+Cj2nL1viNj7ROU/ybcheT+HZHM83F5femz4Dw1j
DsfEveasVgg3qO1xaH+yDqBtn9U5nuANzgCtfC/O5sbsbwaHdqCvf9P3fxU+
z865iBXW0Bjae5XKW5I1mDly9h9nz50zPzP4n1h4SvZpwV/XKd4vjpyCXGJr
aR1FW4cUzpno64Xk/aFPNAatKeX7ZmUehbu/li9V5me0Fo1Fa78rfFHnGCNe
0Ij6mO/80jkauRo5Hrne9eqnbWFO7BbrJdckJ1sWHAvXDo17MkK/+xa+o9yv
vsLXdda03fqMHqMRaMUtsf9wHFzHvMl30Bi0hrH6w5nZY24PPUTT0La7gy+5
w9zlbtw9YRR3Ljsmic3nVV4f6Bp6iu812b8pfGeIf/KME1RuJzRnxwN3kxgm
lv+CPsnehz3Njgm4dO/CsXJtae1mvfXZ2szesYdoNNwA17YuzBE3ltZK9mNQ
Nt/AvXAy3NwU+0/OQO6wIOKF+/SkyqPiXn+YfV8AsUGM4Psg+AmOIZ6JDXIN
9pi9RvPJDY4pnAtwj9A+5szcyQvIFf4ue7bsx7JzHTQYXnkoe6/YM/Ip7jB3
eam+6VU6RjoEnxI7P4z8mByeXB49INf6RWW+XhG8Cm+fF3XzQn9pe2rku+Sw
5LI/EkYXzknbxTdzCufru/uCqzuGFpwT+oImo7/ku7yVyKvR346h17RBMzrF
+GgK2oaGoWUzCucSZ4R+o2fkCj8X5hbOl7jHG0rPhTp8jPVo6Rz+xNARcoOZ
MfbK0trH+MyV2CcXOKXwHeCdxd3kju5X+d5zt7njrSKXgZvhaHTqCO5Q8DU+
8ir2njPgrTJXfR5feIx+waHEAGdPbrki5j+iMJfC4cQeMQh37f6GtvQ1r7Q2
8ebj7bc01sd80I72cV68qXhLwV3k/qyBtaAZaF//wlrSsnKuSM5ILs2bglwa
m1yydfAXnA/3P1H67cX6iDX2ekdyfLDngDJz+P9cSmsJb0K0Gs7j3Zkrc+Gq
iF/eqGvgg5pzG+KBXGNLNhfBSeS5S2L9kwrneHAMXIMf7vo47ica92l27kRs
E2PE2uTS2g0f7czWSLQSzUF7doa+w1m8E3kL8HbnDUHePj328/LCufXQ4GNy
vmHB1XAzdfjgSbgTDiX3/HPNsYANt5IrkUvuWThn2iCcX3hMxoZXG+gLzok8
gFydOnxwMbkVYzAWOQxvh86Fc5tJpXMnOAquaor96l74P4Dm8BPzxP4jpbWK
M28deQZaP61wDrQo4oMYJ9ZnRfvfFX6L19fM5/Dh27KfjPlwR7gru0IP+E+A
d9xtpbkMTpua/RaF7+E7tII+6Iv5k6c9GPpBG7She81czH8w/BdD7ofWc3/g
8oGRPxBjqyLPIDc5qvAbtVfN/EyMEWtjSucOnAFnMTzsQwrnwuSa5wX/kyvc
mq2taCy5ztTgZ/IVct3uwrGFcyLyHP4P4L+Twwv/d9IYekF88fa5sua3CH3S
d5fQMzQerSeHIpcixoi1MaFnvBfI0/uEvpADkAugcfsVzh3QPjQQLcRPXne7
0Knwm5V3ao/on/WQO/wPCoXeNA==
            "]], 
           Polygon[CompressedData["
1:eJwtlnmUjmUYxj8ytlc+dd4PoSzRIERaaEELKZHonDrthJhhZmwzBjNmrGMZ
S4yZCRmzNPZ9SaioqE6hsoRDpP20l6gs/a5z33/8zrm+636273nu537exv2T
+yRVjEQiORAHSdFI5CbEY9AbpoeRSN1YJJKJnktsZxCJ7II0dEe8XcTfgreh
DL8UphDrR+wzvPvpex+8ileC9wC6BgRwtY87h9jD6HXopeiTjHEK6uBleFxr
uA4+1ZgaB7rBeGJd8HPRs2ArFOPtpv8c9GXaH0IfhhjtQphNfCyx2loX8UJY
BLXxhhCrhZ+FzobJ8AreQliAbkYsHprDULz6eIvpuwReg1S8Dni3wx2+P/rv
xegiWCafvgPwKqNbQEsYQ7sO+IXoD1jrETgKY2h3V5ztbwG/C6EIbyPeI7Tv
AY/CHuL34N0LXWAsbd7Da48ejd6L3hfaXm3DK8H7irHOQi56jNpBKlSkzT78
vdASXYCXH7V9S/f4VVAJqsEo7T2xN2i/HVKZZzQk+v6kob+AedpLSIEZxHbg
tUGP0N7SLw8WocvxSqFM/4fx74al6EJiB2hzEOLwkn2cyugq8Dj0hj7+H5UH
bzJHa/Rwn28nLEYv97E7QWfYit8Wrx3c5nvWC79nzPZ7k+4Eeh5zz4UttL8V
bySxZGjufTXGdmKfQ1fPz0Pow7A5sLzTvmlvtcfK+w1462EtLKF9FvRFn6DP
STgFC7T/eKthjef1Ml+Xzv80Y52BO/28CqKWTx3hI9p+6LmpO/sxeiRtR2g9
EOAtxDsKR/ystLfTaf9JaO3TPA/3h5YTLeBmz1fNtQZ/uM4SekFm1M5J53Us
sHzVXraFWyDP71M79Eb6boBNng86q/XodaHFdH4peBHaXuF3Bc+5mXit0a1i
tj+672187PnoG9FNY3ZnJ7CGTJ0d/WsRG0ybifAk+ku803AGimizFLI99jte
Er+HwYt45yvRD28quj/xBNUMr3VVmWekr0v3ojqsod9q2AHTiP3rudFD9xce
hHFRy+dUv4NJvvfKq3ivwTNgJryMVwNvNnoKY06FQVE7w1l4uaHFVJsaaA+g
id/B/NDOeZCPUYAeiK7i9ScdxsJBOBBare3q61uAnh9a3VL7PPQEdB/0MfTx
0PL1P60RL4fYRfQlWM4aywM7P+3PWvRk4s+jB8IA+Jt21xK/Jmb1SHVGtVrj
DUUnwiCYprOFHHSc7pLv6QU4D//4/Gq3P7A3R/X2OPqE1yfVqT2B5YhyUbU9
T3UcFnlOapwBvr7B/n9W0WdlYO+X3qUt6Ci6ZszejEl482g3NbTH9CX0NHSO
7gZtU/Q2eqy/6i+6p9+Vs+iv4QbGuT5mdVA1qmHM/q9ypx66PjSARjBDuQET
fV7VjSfQz8DT8J32jjkTYRz6HLk7BP2u165R/ka8D6X+/iVob2kzHc7h/QWT
8J7zM/oWvvGz7+tzlEAszt5OjVMWWn3cHFpdbe9z7Ua/E9pb1RkvHe+P0O6Y
7uJTeH/63dL3wy/oX+G30PJFa/gR/RP8rPeWNS4JrPZoHzNoMwwaoZtBU9VL
YiugO/oh6OTzKu+roqNQ0/NZfRuiX0eXK29Dez/0jus9b+V1aIWvX2/sSvQq
36Nn8b5H/xDaOvWe6V1bHNg90b6N93N4gfYZ6ExIIH4BLzu0GqVa1c9rzQS8
rNBijTzH9D3SGN0kZt8E+crzwObXeSnHLtP3ClTwPJwUWt3SuJprMro4sD1X
3duI3qS7gd4W2ndgvL9ly3Q30Vn6pvL3T/lUDa+68sL/TzfW0xW6+7ec3rI0
fQ8E9p2lHMkO7P1dgb5Ev4uVLMf1rVAPrw7UjbNvqnR9/6huBnYuOsv/AcSe
dvA=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlnlsVlUQxd/X+j1Kfc0HyPugkrYStgJhUSJohETFJaKJgrIoELCIjUhA
RIkQjdEYNZoYjRolxrgERQGhRVkqIFAWKRUKpZQWoWzFVgqiSAEtiL+TmT9u
5rxz525zZ8593Ytmj5mVEQRBLS2TNiQKgjgRBCOw+1NBkAYPA/elDQ2D4Lc4
CG7DXgd/C3YXPv2xB2P7Fn8jdjQtFzwbO4PWBVyM3Y3/TdgT+P8C7geuBz+I
LcBnfmjr3oFtgX+IdbvDD8fuhR8GfwS+D98d4IdGNk9f+Fr43bRe4Eq4S+BR
ofkMSAfBPO0fvpm2ADwY7k76ujHPIGwDfJHOAP9AaHG4O7R1hRWb6aH5TwvN
Pw88Cv4QeKLGMPYA+B7wH6zfeG0QXCSuTdhG+Gfhe+OzApxgbCZjF4O3JIPg
idj4evB88HfgfeCXwIexV5nnILYLc6QYm4/tHlocCrHNvtZXjDsD/gfciq3z
ONRpHVpH8Ga4gazdmbF5vn+dS/HYRl8an21w92O7wu9g3Sq+h/DdSP9Zz4Nq
uCngdfR/DZ4ArgQvAY8D7wR/C57EvL0SFv+5ocVtDnYgLTth97cF/xi7FZ9z
4OHgfeC7POb3YnfA3yALvx1cAM73/FRMemBrU3ZvZ+jvRqyfBh+Fq0laPGd5
bBXPf4nPTL6r4JfCVcYW0wpwU8rycRBzTIb/MWmx7cz3k8pDcCH4efAjrPsa
PsfxyQAf9nzIoj+TNl41AjfVa+FWfLLTVif18DOUu0m7r9V8/wl+F26Nx6QL
/utju3vdy1payDwR/DL4K/hvgPsEfBm8Dvyp8+vBxeBT4O/Bl1mjjbOfwz4F
3wL/Q8pqU7W7Cm4V+Cz8O7HFSLE6id2TMh1ogD9EG+P7Pw8eEVodLQA3MLYE
/njK7rknZy0HR+w5F58yzzHd9UbdE/hn8GCv697YBGPGhaZFr+NzgjlX6tzw
E+B/BR/1PFEe1tBuB5+Cm+d3ugyujNYKfh8uj7Ez8TmmvfmelWMvgo/gUwpe
TqsDvyCNovXEZyfcXt+n6iVK29mlS4+Hdq8d4Tbh1w68XHnkeXIfPj+p3sGf
KZ6x1ZXqsZ/r0smUacVa1n2M/g206+G3w5f4HqRpI5lrErg944q87nQvI10n
R2Pb+N4P/wz9i1I256OKH7gHPuMjy7G/4BfCv+V5q9gmItMlxa2/57b29jv9
18B3kuaDr5APZdhv6NuKnR4blo5NA5e7XqlvDt8VrgOKcTvpQNJyQ3rYh3Wm
en1JQ6SH0q7TnCPltaO7Lkib/qrupDFJ5qnG5nieqL4edq0sca3rAP823BKv
C9XCZlp7+JVw55OWkxeTphvS7f+0F/AFuA9iu9Ms+NLYckn8l+CN4Az4z8Ft
sb1z0pkWn1Nzj4ss5sqBmf7GbYL/MLaYqh4/8tpUDS7WXF6/oe45YXvVmyL9
u0p/gM3R2xGar+7rUtJqVrrxse9fZ1rk76HerwHYNSmLfyqyOOhcK2J7E6XP
k+Hnum5Lw/W2Saulb8WuXcr1Kn/HV8emk3pP87mHatdk6fME1/kpvq7y7T36
O0d2rg2uY6rNL2I7g84i3RnrGlLqmqC6blVNe11IK/b4/0ATXCd8shL2FhRE
Fh/VbKG/j/pH+dt1T/qcHVocVJNj/V9Fb1uNvy/S/3LPn01wN2M7JeztzKFl
JqzOd/k/zAHtK7J7V80qvppful3h9XJaNrb36Jjrlf5zLsSmIfr3yE2bzmn+
5qTlmO75Ta9l1dzE2DRK/wmvxvbWSBPSadN2adcrsemAaiTb9Ue5+kZs76D0
4WXwc/7uLPW3Sfvoyjz/A/gCZOM=
            "]], 
           Polygon[CompressedData["
1:eJw1mHm4VlUVxs+Be47Ad+ADYR/m4Xq5JAJxLRvECsqxR7ESTEBBxEwxxUxL
bS5ttnlyaLIyG8QpSyWHJMVAKxGHUpzigiIFQuK9l7H357v4432+tfdee521
1157DV/rovNOWNIry7KOPMta9PuVlGVfFsZWWTZO2E8ohaWauyF5vSqzrCF8
SfSlwvNFlj0nfE70V4UXRO+SrFcaWfZZjT8jNCSjEr4Q/L1yy71H47uFyaKn
VP52b8nun1uHvM6y4zSeKfQS/WmtP1pYJrI/JTyp8V59b2nTc2s1fqow7yeF
Twj9JWuAcInoJ7SWS/6NTa/BX+bmQUdo5pB1p/An4QDNtwkfFf241nboe1t0
vqLyWTjTpcG7TGitvGdZ2GtA7rmbOGuMsS8yNgsXJsv+YrKNyrA9Mj8vtFT+
1iBhoPAXzd0n/FkYJnmV5C3Xec7R+EPCXsnMkCGbzdX6PKGv6IHCfNELhP1F
nyje9dK9U5gt+gzkhj13S8ZbJKPOvYe9Hwwe1vY07BP7aa13bn359grtz3Lr
0CN0C+dqfomwWDgLncU7vLIO6HKqMFj0bVrrF/51e/AOYZx7DzKQdV74wQX6
Xa3fh4WPiL4jed+yuItFwnKt3Suclqw/+t0vfED0h4VHRBeSv7NhGcjaoyN0
NYxXhfOT134v3CIk7CL8RvSvhd8Kv4s7GSV9++S+K+Q/VlhXdL5XGITttX6Q
1pfHHPQk4euiLxe+KXwrvtfEX4Sb49t9ucvcOpyi8V2SfacwL/mN8FaOF1pE
P4Tvim4T/oZumlsseoz2z9T+Ls29KrxV9KHCXtFHa32k1o/QeIfGPcI00YcF
oHdqblfgbn17WO41eN+t/UNz8x2o712g8YXCRNFZbd3QcY9454pnfO7118U6
OvDtI/H52uc4SvTRwpvCH6eL/8VkvCAcEmucgW+jA2frXdsmyNgni++Pyi3z
ncKMeCd9avsEvtEjVa7Te5qttdG5z8BZntP6oaKnCc9H7BqO7+aOYdOFEbnX
12vtQN6sxh0aP6XxmMq+gY+s0PgNGieN2zX+e/Ica6OFB/AdYQK2EZ4QPV78
TfG/Q+ON3H28f3RAF3wIXRjjW6M1HpL7/ldr/Hqd4SLRFwsdtWUgC3tuirhF
bCJGPc1dEvc0XqJxa+051qYIz4reEPvRaaJ4jxfGij6HM4h/ahW+pPEr4h2p
ubNK+yC++B/NvUv04cLmZB/Cl44t7Xtl3Bt3f0z4K3d7jLA92cad6BC2J4Ys
0tppEd8GRcyDZg6f4u7xAXyNPeztJ7ohjBCGC8dq7rjwKXyrv+YG1NYBf5hT
Wjd8Gt/Fh+dp7aCYgz658h5iJz6LrCH4mMYHaHyixrMq08wNrY1aOCHWhoW9
zhQWltYP2zHHWhJOj/e6tunzE0vR8ZmmeTj38DgbZ+LtLw5ZneJZJ5yk+Tnk
4Nq+gY9MFj1BaK/NAy85Gj/fIpu/jD9F3obemnzHR8R9/i/8++DK9/zfwJGl
fZ61rXH/+Ciy8MHpYa/Hmn6j3Ne52Kx2DiOXtWru8MpzrOGf7XGH5DveIHe7
QJgg+r3EvDgLvPg0Z+pO9iV8qid86Y3YK7df4MP46czw7XHxPXTCl3ijvNUx
wkrRbbV1ag/bwUMsG1t77/uxgeLLZuGk8F9iBTFlnei3VT4bZ6xqx+y2sA92
JEYwB439HhS9SmjnnMLDEe+pn0ZVzl275eorC+ewfwoPFI5JxKbtDcc6Yt7Z
yTmZWmJT4VxN7iYXkhPJu8gcKfwj+VuPJscmYtSa5BqiM/I/9cGCyE/I6I6a
gdphVvCSw8hl7CfWPS5MFN0vd34F8OxbI4YSS6cK/xK9ifoic34/PTkmT4v7
J67jg/giPrY19j+JzpXPDz2J2ib33FpqAo3HafwejVc0bQ9iLLF2VdO2xcbk
Vu58TMQ/YnMvcmPmevgy4iP1g8YPaTyX3F251nhQ4znJPoVvEZenCv+OM8yI
3MTcJaVjKrzE3CnxflY3ffcrIy+0hyzeN+8XmR3xnts192LTtqe2e7rwHeAz
nL21tC9taJqXPcQC6s7ewnXJdc43hC1RP+eVkUXdwtqayFfc6ZBYow6kpoGn
LfLX0NK19YzIl7xZcjC1G7UfNTM13NsjP9ID0Atsj/eKzh2VvzFYeCS+vTXi
0rbku78/3ic59b6oF4gv5KwN8W6wHXnwpeSanRxInnsmOWfy/rhv/H155Hv8
gdqbHoNegx6EXoQeiLvHB3Y1HEOIJe8rnWOoF1tK9wzU88QAYkGLxn0qz2Fz
bA0vNR21XZfkdTZc752c/K6pTaHvKPzGmfuFxnt5b8I1yT7GN5DdN2IRueKM
0jGJeoHa81bx/EH4IXbT3m3CD0RfTw4Wb1G6vp0W9dXZpWvAN4f/cCfdIePg
qIeQvVvjewrXiLsibhHLeI/khMlRrxxWOqfQ92AbbETPOZTaLHdP8FpvEO8H
/b6j8bXCL4UREZeguwq/Weawx8+D71fJ55wlWbOFPyafnVqcuVuDB15kEesY
Z6VtiiziEbGJmpzanLfBW9hZ+I38VMhL60y/CegrfxJrr/VluWPk5RFPiSd8
g2/9WPiRsH/49V+TcwxvfFWs7ShcQ8KzNPyJ+7kx2SbYhjv8nuirhCuTe8ZB
AfYig7WuiO/E6FOCn7Ue4YpkH9gW/RH+Qw9FrCXmvtQwNgoLk9fgwde+H3sv
Su6X6bnpva9t2pfx6fnJfQ795wbh28n/E3DHnOO7yXbDl7H/z5J54MW+t0nW
1cm6ojO2wUexBTbh/WBjbM03+NbHknVBJ/rta0I+Pf/tTfeY9JqHaP/XiCc6
28sNn+Pi5Pvk288W/m+BepDalLw/vjYv/w0gnz3UW9SSk2rXU/T81NfEN/5L
IWasif6QWHJZxA/+T+B/gI9HfOH/iH3/Y6ArOmMb+jZ69IFR697VdOzlzfJ2
T03Owd3Ri9MfsQfehVFzUntSQ1JLcnfEoo2F77AZ/Tk1LLUsPT69/rrC/1VU
UY8Rv6m9rm/6PWBjbE3NQO2wOvrfM4XBpXt6entqDmoPenL+O8CWR0Vdt8+m
50c9i61bo36jBqOeQiay6eHptddHfqPnp/ffE+8N+fT+k6P/IUdyN/MjvuL/
2On/srND7A==
            "]], 
           Polygon[CompressedData["
1:eJxNlnlQVmUUh68Qn8l39TP1fqYESi6AuaWmNuFMZsuUNSoBYiKWWyaO5lpa
M0271rTv+6ZpuZsLaG644YZKuAACSmyGuCFuYPacOeeP/niGH79z3vfe713O
udFjpiZMCXEcZx6Ewb6A43T0Oc5+z3EOQA78hreH4BmogWS8M37HqYax6O14
i8jZim7O2O3obegs+BcexjuGdxPtBB2nK9wF5XiziXVDHyV2BI5BF3k+sXwY
hp4Kz8MJYjvkefKXWBBvJ3oVuoR3qIBySMKr5N0qYAQ6A68M3dJ1nBYQBe0Y
m0vsD8aeJt6C/1vCs3g78VqjoyDSnnESb5LEYSJE8M65ePeh+8O9cJK8jXj1
zHcVrsE3eCvxitAFUAhz8UrwxjNmLIyDVsz3K94G4qOIp8Fo+B1vr635cEiB
0/yWKlho+U/jHYKDsBsvgvkOo0+hJ6O3krMFbuCVM25jmM59DX0djpM3mLxs
/N1wnNjn8Jmtzz94X6BrZN/hrO3pUWI9eO/u0BPm4lXiPWVrvgA9Ep0KUcSH
Eh8CcyxPzs428rJgByzGG2fnSfR49ATIDuh+7ZLfJ/9DDPPNxJsB06CUnOn4
0+y8yprNQA9mrx+DRJjl03P3jKdrJustazEG7eGPJF4k5wrdGgrQyXiN0CEQ
GtTz/ATe4/CQrcHbeCHoLeh56PmwB93ep++6F/bBLJgJS4gd5Lmz0c2Ys6k9
azj5gaDGc4hPIp4Ok+ES+1QLIfyOUmLv4N1KbmNoAqn27q/h5xNfgQ4l9xZo
wKu3M5zu03PwKhwnb7mNeR38zBMe1HuXQJ4b1Puzn7wDkGl7moj3pJ3rYrtv
7cltF9RzPYGx0ehP8WuJX4IrsIGYy/v44RNidXgZeCvQYYzxQRPYFtA7KPc7
U+4U/AkfwgfwEVxg7DpyvjK9Hh1g3ubwJd75/8W/hvfhPZtDYmuJrYFqe79a
O+ORrt6fLehu6O42p8zdGjyf1p9XpF4xpp49CbfftETuq7wr894gtlTWRWoN
7LW6uhJvk8W/87QmtXL1Hsp9nIL3F7Fl5Cy1cyL775DTCH5E35RCzVyhdubk
eQ1Wa771dN41dm+lnk2E5+BnuGz7sAC9UGqnnCNb89Vy32EdJOIlQW84SGyt
zGmxXng5eO+i+6Dvgdus7ufj9UB3hzir42f5XTVQ59dzLXcg3+r8AeIF6EJY
HdCz/Qb6TXjL07vlJy9c7iFsDmje3+RVQaXdBalJg4g/CI9Yv3mA9Rro6j2R
u30C7yLvcAFetPPf4Nee10n6EHS1PVoOyzw9m7I+WwN6Zj/29FzLOmbi1aIv
yp6hB5B3Cd2GZ97u6vpIP8ySvZC6DdUwEC9PfoOnfUP6x922ppctfgTdjzn6
Q6HVBqk/YeCD8+Sd87QHxfv0HTqT28nVZ92P19PV/W2GbgqN7XfUWTzPnncF
KqAv3iG8SnSVp+/Xy/a/DF0OHZjzTii2/DhX8/tJzyGvN//3cbUPtcXbRGyz
p/cpynpEFbFR5KRBR7wO0BmmWx2X3i73bD1jMjytAUGrcYMYMwwSXP1WiMGL
lbpuZykCvy3ssudLT4zl/xjoK73Ap/3tUVfrlPTdJHSyq3sYb338FJTKWXZ1
X0XLWZIzFe9qfZTvkSHooa6epxdgjtVfqauyRkVQYusja7vKaqZ8A7wEL3va
4/fh5cJh61uyhrKWA1ztQdIj2sAYdHFAe5r0th/I/d7TuhBi90Pq3zX7Bjln
ta7CvrW6yF1gXKqr31/SE2Px4oIak74VbWsqa5vnaa+VvSkjlsK4EfCT1W+5
A1JXfpE74Ok3Vbb1PhkrZzcFPRrSrL/J94bsw1V5T7ju6bdKun1X3QGRsBh/
kaffVFLfpLb+B7nQmEE=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlntMl1UYx98fKD/QF/hl+eKlNK+hqZUhQobTyjTnrJyzVms4utlW2GXp
mkqtZjUTNZM0TUszNrxkGQVpkpW2DFymZlhZs1yaiFfEC5h9vnueP86e7/me
5znvOee5vT2Kpk4oTgqCYB8jmXFzFAQrU4KgOTMIasCXwVmJIFgdBsGIWBCs
QPaKB8EYcCX4NDr9mPdGpyejG/gfuCvAx7CtBB9kdIHvDlcPzgBfA+7KSAXX
wq1lr5HsuRJ5gfkg+D6s92KMh98Onwl3Z8xsusC3Qe5At5Gzvsa3bgf38DOc
icy2D/gUOBs5Dtu+cdN/Ff2R8B+Ftmc1sgXuDnATch1jCPhn5NXsk4ZdHfoN
KXbO48iPmf+FTGe9FPt8+HeQG+H/hs+A/xyc7vfVve9C5w3WtoR2njWhvVUj
XBW6HRx/Br4SfBb8tb9PMvZ7wFfBN8N/A44Sdn7doyP4Ivx2+Ljftx1yl/ux
E+s3ML8H/hXm++EH+jt39vfcC7eT8Z/7/Tf3RV+PgQvw29xOMdA/bufUm70F
nwzeBp6lPXjnavAzOg98AfqL2OMR5uXw51gvA9eDF8Kv9vfUG7ZF/wfwXLil
jF/B7eDmgLeCk8DLwAfA7cFn2GsZeBLcRMZC8Cm4B8CrPJ7XgY+AE+gXgT/U
OflWBfiQ+6vcfSefrgEfBmeCN4D/AC8JLfZGc5eN4OXOh3D3e+6c5Vtj/Qwn
wQNYu5V3Ss8Kgl+wmYTt9XC5cYvtHGQ/5kOQbdAZhu0sbI9i28H9JfsU1vKQ
P7LHYtbfZoxDdzrzAeg8hfwXm5nw+X7vPPgK5CX3xYvwc5GD4DcgFzPfj0zj
+zeB3/fzz0beGLO8WuD62lf7z0AORXe4n7Mh0+JWOVGt+OSMY9EfjFzvPtL7
pDBqwaVwO5C3oFOHfJ35V8gY662ZduY53GU2fA18kDC/Kc5Pyq+MYTGrL5HH
/BbFOLabwC977H0BfgncAq4ETwd/4PdVLCmmVNMOIld6HOodpvDt/vBPexzq
zPNZ/xY5HP475DyPDcWSzjgYfjOyDfPtyBLWU8F7we+BmzjDu+D7wKczzXcP
el7sAa+I7M66u3Kh1c881WNTNUe1pyy0PFLM72KeE7M8mR/aeyovVnkt/QS5
NLQzK4Y7uV9UO86rXsbsfLXoTABXIXd6zCiHdWbdqyS0uFA8LEcWe7wpdx5m
ZMcsVgtDi408znzMa+xt4OdDs50cWgzI5wu8jqm+LQJXsDYqZvl1xGOom96W
eXfwYbiuni89kQ3MO3tPafT+cm3C6pHqknpUjd+rLrTepH2aIlvrzWiOTKpH
nIusx2h/5ZdytgC+Ff6S9w/1OPUC1dQDcD+hN1FvhRyYsLyudyzbDPL1Os/r
tuA0z9/+cNkJs90dWh9Uf/nd6656kHpRuft3LfJe1kqRJ3jXuz2Hj4PnIXPR
KUPODM1fqnvTQuNn6w3Qf9Nr0XOR9bbz4IuMT8HT5CPGevAFuBc8H5V32mcJ
eLzXGdXYQq/zivNHwVO8lqqeK/6VH49FVqNk+1Bk9VnxP9nzVLn5rPpvisVz
VYoNYeVwqufFE+jM8Jqv+rDZc20jcit8ELe+9qfHg/r4GL+v8jfH301vddn/
VeSvFr97MdxRRse4xX+hx3NRaHmquFX8qn4OVT2UbWR9VD1xn/d35ZreU+d6
MrJ+qn79Pbg9fs+PW80/5HGsWM2NzH/yaQG4xGvpJj+P4j/VbRUzyinVpcf5
1m6/u/4fRrit8kvxpn6SlGX/QvoH0L+G4lxxfwLdUe5rxcBo94H8rv8H9fcv
4f4HphtXNA==
            "]], 
           Polygon[CompressedData["
1:eJw1mHu0llURxr+P7P0K3zyHZWtYq8takZUomhoIKpj3W6koXshLeclLiom3
lBTkIojpEVTuCOfgATugqECAhopyCeEkHAXERPJSaGIEhIZlYD2/numPZ30z
e/a79+yZ2TOzv06X9+9zfbtKpXJotVLZS797daxUPid0rq9UDhBWlZXKSqHU
2JeE6aKP19yPikrlt2FA7xSeFv0P4WNhteatEdYL52l+j1ql8nl9/6L4M8R3
EP+W5j0rbNe3O4TnRe8Sukh2oLCfsFzzz9X8w0T/R7Ip4o+p+hu+3SF0kuyb
wt/DOvYSfVbVuj8t9BH9dY19KPl7wtdq5v8iuk3yMyXvLr7Qt89obJvWPk5j
zZK9Lb5OsnrhHdFVzamkjf5vK3RDR2yGPViDb7HVItFdJT9b8tbSe7AX9qiJ
3kfoKfp8yQ/W98tSn69qbLO+XZL2OrTmfRdq7N7CPmD9f6W9DhI+DZ+Zsx8i
/t/hb/gWHdEVn5wj+f41+4ozcTb88SfRD0r+gPAb0fPDfj+qZh3RdaFkp+n7
fcT/QfK9U3/mtBc9tbSP8M1zwu3C89L3SH1zf2kf4+uTxYfO+4L4PeJ/KP5Z
ydvErxFeEV4V/pb+/YawVfQ69qzZP49r/hzhFNHtNLYCndFd2B6OH+h5wrbw
GGsWxGLNe02TrEl4SfTKsA7oQowQK8uEpcQ5vixN75K+P6h67MXwGfjuudJj
yL6s7z/I7znfbmGJ6OXEkGTHas6M0jqjO2PL8/7gm+8IH4VjhFjhDr1WOoaJ
XfTbIvpNYZjWHipsDNvjKeGvYXttSHuVwus5hi2xGXN/L/4LNfvjidJ7svfp
4jvJP4vDunMGzrko7QPP2YiTLaI/FBawVkfrjK4b8ny/C+vEfqvyvOz/lXrv
OVtoDesyS/TM0jGAf34p+jDN/ZXWPzHH8N1JVc99rLSuNY2tDQMaH+Nr1moR
Vmdcteb3yF8O+x5fYH9i4KX0Dzqi67yML2xGDF0uTJcuM4Sfip5YWpf3xT8l
/mihl3Czxm8Rvie6pfAZOMsY8iNnEf/r0mMDOGN47jHCcMkPkPxKjd8ofFd0
g8Z6S3Za2Basd3vpfQ4RPYY7JNkg8QdVrSO63iD+QPH3iD9V/J3oJH6x+BHi
7xY/QrhB9I3CQHKOZEuFO/MsQwrvwV7kh56i12rsQcnuw2aiVwr34y/ufeE7
z92foPnf1/xl4oeLP1yYK/pwjd1FrhM/Tnx38beK708MiD9C/O465RXxR4bt
cJMwVjhasic155Sw7ahd0wrbsK7e+70n/rFwLjuq6hglVh8pnTs2i58l/viw
bbDRVu03VPKuVZ+Js50gjCy8B3u1q/d6qzR2b/gMnGW2+JtZS3yPqm2ILS8T
v7/40eJ7hH16BTZJX+9d7/O8KfnD4ZjBzvjydOFk4XXJeuFjckvGAL6/I+03
UfIJwhmiryodO8TQccRSaduOwsZhm7HmmLTlQ6VtvVryceFYYP6CwjGxLfMF
OXhH+mJg4ZjEJ93Tp9iBvX7OnSvsQ3zJGqy1ULiJWNGc3lXXq3+G6/23RH8S
5q/N+8IarPVZuH5RA+kd3hD6it5XY7slu0gYn+e/ODznBWFPfosduRtj0z7s
wd7UzF1pB2z7ieTXhHsIeglq8H7yzc7Mx9TMV0rnK3LlB5o/O/3AXURndN+e
NtuR5xomeTfuuuRXaOy1cC4mJ6/L/b5d81y+eTj7mzbNv1r8EcJg0Z01dknp
M3AW7gy+P0nYUDhG8OujmnMCtVXrPRQGdEdhrOjGzHcbNX+y+LPSPtxv7hcx
SCxuEqaIniG8Lfod4dEwoN8VWkRPKl3bmcNcchq5je+nhXMO94ucRdwSY8Ta
GmF8eE/iqHfqgn+IhRWlY+XT9BcxQx9KT8MYNL0Oa7AW9ppIbsx4bhZ/ofh+
4ruInyT+vDCgJwt9wzmCXEH+fhx/1Dk/Ij9X/DPpb3pAesETMycMyNy9QDiV
3k3yNzR+STj3koNvK20PfIIfyP3EaKPkUwvHLjbelPWAOjU1x1qyDjaJXl/Y
p6zTL+8Id+N67J0+wRczwzWIs3CmJ8M9dofsXzeJHqI1Bgt3k9fCPmJ/fN4Y
ztfjifPw938U2mc/wL3qJn5OkTk83A9iA86+MUEvQo+I7K1cg2+5mw3CfcIj
GmsWemZ8U2OoNeR7aMaIfWrGsqxHQ0Vfmvl+hPhjU0fOSs5Hd+7X+nDfNz9r
BrHNmqzdNfMT95V6Sw9LX8QZ0Lcx45+cXKu3jPuKj5mDvZrynuHb5rwf3AHO
Rk4gjmZnrpie94U5zSnDP/QMzKGGPhCuU//rvUW/XLjGMMYbjHfFWtHrSvsM
391DrAs/ynhqEi4QPSr8NiKHkEuoUauyPjOf/ajdrwqjcw1k1LuRae+7wjGA
PYeJXpT2GFc6n1EjqY0NYZ8MyW/4dkL4TnIXJ4VrArWB2ngLvg7XRmrknjqv
0Vo4R7I2cxZkPzA8axw5lpjvl3FO7iGH0bv9jDss/mDx/cXPC/ei1Pu54Vin
5xmRdrtOmFf4jg/U+C/CtYk92XtW3iPeBfQKk/McvGvInZyXWOQMg/OcbWnv
KekfbEkPwV2blHOQscbAPFO/1GVmnomzsCc5h9xDjjqHs9Q593MfuCtnh/M/
OZt8yZuDtwdvlffDb2TeetRM6h8x0ZT2pjcZJH559lfkyvb5viO/km/75v7Y
5+M616C2zNdXhnMqa7IW36MjupJjry2d06Zmv7SzzmPXCH3Cc9mD3P7Fjt57
ZfYD6MBb893wm5S36J+FLvV+G/PG5K3J+4M3Fm8r3j/tNNYt6zVvZ7C09Dsd
GXeMu0bP35rrdsh+grf1HeE+lbfpqNJ7MmdJrjM/8zs5gNzSkPWO/naA+KuE
FZl/Jks2t3R/SX3n7XV1zkHGfeSb28I5sCH3YC/e6eiMTbEtveOgzJvk3s41
9zSb0y5L86wtWW8/K/zG+Un6uzH7Ie4ld3hc5nViktjk/XJZuCfhHTM07zZ3
Zkvmn9Gl/wPYWrjnJz/xnwnvT/5TWVx6jUvznrE29ZFaT82ntx5ZOvbQCd1G
p53nRO4VfsvypsS36DIj7w860QPTw9H3TMicT+6nv6V/vjjHf5xnv650zafO
nx/Wj/WoydRm7I/veKPcmt/wLe8gdP0v8iO2lg==
            "]], 
           Polygon[CompressedData["
1:eJw1lnlQllUUh19QPkRf+L5cLi6V2WKpWZO7pWX7Ms1UtjfTqGimk4qVS+VW
GmqioAiWogS4jIJLiqkpLrlQIlgErqVpmguIC+4rPWfO6Y9n5veec+7y3nvu
ubdZXHz3QeGe502ECPjSed5PAc+rDnreWPQ4+AC2YasZ8ry+6A/hHP4UbC+h
R/ieNxJGozdj2wIFFj8eWwJ46I3YJqITiZ0EKbAXWxa2S/SXjV4EC6Ettua0
eSjS866ir8F1OENcEv40SIXXsE2gn/HwMXoNtpvEXIWl6NWwCobiGw4r0TeC
Or7M431s32Ebhk6wfmoz7n5sh+EQzCXmIm0y0XMgA97BFk3cP+h56PmwQNaG
9n3hSfR4fKdoNwydh74e1Dl8Bn2I6Q3l2Ebhe1zmwfdBGQO9EL0I8tHrYL2s
Ab4GjDkU+xB4GdsMbFVBXd8N6HWQD5+Lj5g0qIPvALYltn5T0O3Q7aEDVNgc
HkN3ga7wjdO9CqPtJnyT0P3pqx8MhmnYumOLRw+CUTAfWz9sPSUXAtqPzFPm
K/ubZev2LrwHPSAd23l8PdG9INzGG4FOol0yxEEv6Ci5hq+Hr/u7BP0stufg
ead9zMZ2Ad9oYsZADP0dCejeLIRF8Ba8CW9bvIzfH30ZfQXKoBbtLmNfgM6F
HPu3y3AfOXkP/m30XwBP2V5XEv80+hlY6nS9/ZDu6TJ0CfwODbF59PGH0zz5
Gn8CTLA+5L+nwExf8+sHYs7DnbS5m7YXJB+hKboRtr/Rh+Aw7Id9Mkc7O3+i
/4IQOgi1oAm+OyAavRvfHtgLRRDAFgm14XZizgZ1r1/A96LT8/4qvAKnLZfk
DHayvTmJrTP6Uaf7lYxtKow03xNOc11yTnKkG7oV43SWucUyH/55DyyDpbDG
13+sIO51pzl31mrPG+hf4RfYDjWJa0RfA2kzwNd9lvwajg6n7zCoCe2Ju1/2
z86UC+lYMmY0fh9ioCtxD+KLQHdEd4B21nYHbQttzaJsTbNon+nrnGpgy0X/
jL4hZ1/yEuoRl+Pr/m/Cl49eD3dhbxype3gEjsJWuGpnXuZa4LS/i9jqY9uM
3iL9Qz3a1oUuNudj2P6F45InljcZjDPHaor0Ow99C30T7sXfgrhq9Cmn693U
5lSJPgknJAexNcBWbnlcTT8b0Bud/s9KqXXwI1Tiuy2k/yf/ecxyuBm2nehi
iLU+5FzIWZIz9Rt0Ii4qVvM0Bp0oNUhqOXGroQp9TuqrjVE7VuNbWi7VMS39
BNCRsZpfEbb/LfCVMk6Z3RuD4ROnd98tqYfokU7vNLn7ahA/xun9In65J79y
Wtvzre6ugGtBrRtSC+Pw9YY+spe+rm+V1AB0ia/36k7iimGrjVFquSN5XIbe
ZfNaZXfZWrubB2EbCPFO7zS5W4agP4UrVhvlzkuGHegA/U1FTzP/Ymy7YLfV
UMkhyffWxO1lbvukBsn5wr8diqyPVOzTfa2XpdgisaXzPQuC6OPYkpzeofvQ
36JnwiwYAB85nXuerdV0dAqkWl7L+RAdy1wawiXLdcnPB/huLufP1lFq+1H8
FVAu6++0Nkq+b2A+RVDsa52aLDVYaqndfVIfWxPXElrZG0Nyttz6Ow11iYkK
6RslDd8Mp//TBh5x+ibIsreKnIv69NMG2sJayVNfz4roQvQOX/P9ltWDG3Z2
yqx2Nca3gpg8mAvZsNzXOv1/3lfavNZIrjqt7VFWqw+gD0KG7Y3cYd+jMyHb
6TsryvZF3jRSc5pIbZAzaec8ZHuYg86FxU7fYQ/jH4d9bEDvlMmQ6DRHJL8i
QpprJXKWodBsvr090vHNdvq2kTFOYDsLZyxflju956Ltvpa9DLM3o7xlvnD6
JvgPPxyTuA==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlntMl1UYx19s7XWN33wr7cxlmStdNU1DLemiqARCKiCQEgqkiGAIQmEp
mjMrumkty1xa2U2XbqblMjNtWdnFXOYyS9MVFsqwTd2autrq893z/HH2/b7f
85zrczlvv+mNkxq6RVH0E+0i2uH0KBoZR9EVIYrqwJlpUdQA5iVR9BSYjV4J
fxh9UCqKetEa4SVoK9x+GZiDXS14B/oZ5pyFHmE7ju8n0cfSfzf8OXgDfAS8
Ej4Sfi9YTrsdfgFczNhz4CTGt8Hn+pyyGSh7vnfC34KfQ5+BzS1oE2gr0XPR
s+GL4FXwsfCF8Ar4I7HZt8S2n+Xg/ejPCtNsfzV8P6oz0T8DvgR+V2L38BV8
PVpRbGecAg7muxAcRv8geAF8KHwIvAQ+HD6G1gqfhnYEbGXsdjDf9zAHvSwx
bS28HP4QNjdwB7Xwk+jfo78KNqG/Hdt5XwYXaY+0NfACtMXw1fCJ8NPgfOz/
AifzvQVcGWxezT8UPMsdVqDfiX4d3/PQLwdrsP8d/Qf0Lq2D3hnbfuSjrJTt
+SO0Zmy+dZt94CE/49/gAOz2gFuwOQguQf8PvI+x34Eb0HeAD6bZeab4nK8r
TlI2Z3/wQGx73gtup++MfIZtlc/zMdom2m7dM9pZXysH3BbsLmYntq72uANt
I+0z+FS0Cvfv+2iZrNcO/xJ+ScpiI5f+er43oJfC58PXwguVH+4b3f8I+EzF
M3y0/ChfBcu1MuY5Cj7gPkqlLDZq0bvJ1+hLY1srM7FYvaAY133Bq8Bb0cvA
TMWM2ytWJ3vcKlY7GTMN+/PpNo9ybTj919Lmytdo/eFNykH482Ad9m3gzXzn
gdfQn0ErjS2/tK72cDrd8lcxM4z+Y36uwWhX8z0a/Ui62cle/ErXh2DT0/NH
+XKZ547yReuWY9+O/V70o6ovaAM8j7rQN3oMfAAeTzd76VnYzUMbj+0o5yXw
Yj+vzig/t2C/K7b8Ug1ZHcxHOvvFKWvi8st4rycLsVmgupVmNSXPa9pU9Cdi
q4eqlU1uI9si+hr9nrO9/hQG26fioTRYnG/TOK8x8rXq0y7fp/oeo2+daqHW
9NhT7W2Dr4cXw1fBf9Z4+DL4G7Hlb5bXZMWA7kQ1L9/HNTP/JrAvdp+Ab6Ln
wJeiZ4Bb0erh74FXpcx+IJik7IyKedVhjX2FsS/S9sOnozXQzsPb0XoEi93b
0E6AHbR9nh+653rVF9oC+ETFGX3Vbn9PYuu/EKxGKZ5PgsVolfBR4Bh/t/Tu
nID/I38kVrtUN1Q//nA9H77G64PyvRP+b2zvS2/5JrYYbqZF3aPolPKJ9g56
T8Ze6ntTXo/zfMyPrQ6qHmr+p4PFqOpDpt9nLtjha2lvm+Gfx1bTDnkdU11q
8nUPo33q8V/t+9E7WJwyG9XOrmD1SnV1XbB71f3+CJ/ldfsL+Gu+lurhfvgp
3Xti74HehQ73ifjglMWD3pfe4BGv+3XuO71BB31+1cYD8A+D+U9+7+N3qBz/
2mNSsaQ8qGHOVbG9xXoHC/zdVx27Eb6T9mts79GeYO+H4vlYbHf7J7g72Ldq
Qn1i/wi/oV3vNUrv7E2J/c/0QuvOXLPTzHff+PzVHleb4S8FexPFVwT7V1H9
Kw+WG4p5vZfLPQaUg894zS9SzfTcVA6OZ43HFZNgRmJx0S8YVy3tG+yd0tv1
brD9K0eOB9uzYjnI5+4jzTMnsTkneC1S3vWA/xLsbdPbp/8H/X/NRtvqOag8
HeA52wds8X8D/Q8UeO40g61eK3SW/wHKJVR6
            "]], 
           Polygon[CompressedData["
1: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
Bv7XQM9P78/3xgTJ3wG/yZfS
            "]], 
           Polygon[CompressedData["
1:eJxFlnmwj1UYx9/M6Kfm/vIqHLIlS2WyZ0uWa1/v5ZIs2ffk3kupyJIlS0Sy
JRTZimSriDCWFtKMZUTWhFxLhZlsNVOf7zzPTH98Zr7zfc57znnPec5zTsle
WRmZuaIomgy5ITuOon8SUfRbiKK2ySjKgFMpUXQSCuDVJXYc/Sl6NTxP+114
n6E/hB3o7bAJOhI7h3cbnYlOo690uA/yQH5YTmw6babBVI1JuyV4b6MLEy8E
76O/xiuB7kv8NPoCnIcfiKXjLUQPQ78Kr8Gz0nipxHLz3b1wEu8EDMS7SuxU
sPndRd+BW/AisVV4e9H74EfoiVcXhqBHwHBoR5v28Aq6fmzjdYCnoCpUg+7E
ahKL0XnhaXQfvHzobjAS3QivB7onvAszYRasI9aBWC84iE6D1jCb2BbY7/Pa
qrUJ1u4A3ufoL+BLmCMtD9Z6f/r2MPqQ1g564OXgXYQs3/tL6HboFegJ6Ikw
Caqwhsfw3kM3RjeB6vp3vMfxbpIXt6Be0tb3AF5LdCs4gZ+KVwTvT/Q1OIT+
Fa8W8abQDAbR33W8o8SOwc9wnrbn4Aq0J1ZJ60y7tsoxeA4q+r5e0fzhso+v
cTReOXQnvBq0OY6O8kTRUHQ7xmwPZ2hzGiri1addUdrUQWfpf2E+lML7Bc5o
3p7Xyhfta2+tpfYEqhM7AjnoAeqP/lOhMXos3mgYo3mrH8Y8CyXQzfEq06Yo
bYvACrxv8cqie+MfRf8FN30PPoGPg+Xrft/Lj/ysdEYvRS9TPqLT8YbCS/Bg
sHzO9n8qDWVgM2yCF3wPvgp29ubDAtjm/Wrt23g/D0F+1QF4E28iTIHmtKkN
fbVGMMjzXn1fQ/8Of/g+V/I1L4x+OFiOKBf/1hlHXwhWjxrCZO+7kXJQ4yet
XryOLoUunbT9/QnvCPwLQ2Jby+WwEr7D6xZbLTmF3oG3E3bBYJiNN0s1CFrE
dhZWqsbBGnhH9QVvNXojbNA/+rld4+3Wa39p0xTGozsFq3v3QxreAu0F3svB
6lZe/Ad0DtBzibWizSOeE1XQJdGPQrFguak103kqHix3mqKbab7eXvVOdS+Z
tLHGqCbFdn7Koh8LdmbLEX8Cqqo+Etvr9XQRehkshbF4+YjH0IbY4sT/tVp6
OHpEsD0oTpti8GTS6pHqVR3VO6+FddH1oAt09rzRnjYj1lV9oBvGVh+7Q0Zs
d8Q49Phg9ai2vse7zrmJGOeepNXiMX62hkE9vsvQHP0cZ3vNnuO1VXszFz0P
ZgS7gzK85ml/R/o+tMYbhR4NGzx3uuOVZ8wK0B+vHzTxfR6gHFctgkHq13Oo
ttd+1YYaUFPrDGnQJthdoP9W/buBbgKN/Qzq3s3Q/PVfUMHXUfdLLfQd1uFu
iuXOFrytMM/nPhTvOPqE+lIe4u0Lts99PP91h3b1e3whehF84POfijcNZkBL
2qz3mqTzo/XYqDWRF6xG6X743vtWPm1Dbw92xvRW2Jmw98EOH2up15UuseVh
Oa+VqpktklYDdDe10FmAVsHuXO1vGeK7EzbXGuiasDbYW0T/o9g69B7YDd8E
u2/6x9ZPS2gd7J2gO/wg+qzHdTcdhitwGa4GuzNUS3T2V9FuMt4UeAtyeR6m
ew430HsBnR1sDzYn7D1UAV0+WE1WDdW9dZm9uwS3YYD2Pti/6J/2+Jz60b5g
sPeX9j+gC3m9mu57k4nOgmdi66c+OhUauDcQLxMG+xiqpzOV7zDJz2Af7WOw
u2pcwnK7crA7t5rf9VWCvfU2ez4tRi/xM6BvdK91DFbzCvIPBXQ+fc1UJ98I
Vo/S/N2m+pLDv19MsfeTasWNFDsXemvpzTUqYW+l/wD7gnBO
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlutvF0UUhncpMau4ZgVC14DE4l2MikAEDVIMakQiWKABFEUreMFSKaUo
pbVQC7XQ0pbeS23plVLaAqVUIRIhEi+JfvLfMBovMRpvz5tzPkzm2Xdnzm92
5px3flmvF+TsnBIEwQ+0DNovmUEwMwqCD5Ig+DINgkvwBbgbPgGfhjvgdng0
DoJhnkfCIBiH+9H6aMO8v077zOde5t0YY67TT/J8Bf1b3k/SzsJn0f7idzPg
PfAq9KfhI/AA3AyPMPcyfBq+BJ/j3QR8Be0rX+cE2rPwSrg6sTEX4aton8DF
8H6tnfmlcCn8Nm0b3ML7Rtpm+DW0CsZ0sOZj9CfQd6EXob9Lq4cHE9PfgwvR
dtC2w61opbQseDpah4/ZDffBp4g5SMxOX89eX9te+H24Sfun/aTvQi+jL0tt
f7XP3fQVPB9E7+F9OXwAPgnPgu+Dy+EETuESeD+tgbk7mPuE7632Zxn8jO/z
YVobY0oZU+x7fiqx9RfAu9AKaG/Atb7+PYqPtoWWBzcltrcnidNIv9rjH9X3
0WL4P855NzwF/h1ey5h8uA2tizkDocWfFtmaY8+pIXgotjg38/wPc1t57kE/
TZ/n56jzqmTMUvgRtGueh8q9qXAmvB2+yJjP4W/Qsmjr4EPoc+H5Oi/4I8Ys
gR9Cu5+2QWtCewt+08/6Z9YxQ2enfEQfg8fgP9Gnej5vIFY169xIP+o5PIr+
t4/JRQ/RF8IHlRe0o4zfgp6Bvgi9Au1R5Sn6S/T5vufN6Iciy40axfW9Gqaf
jKzuVCfjXgtfMO871WFo9TKS2BjV6HHenwttX8pUD3BRbPkzBy2Tuff4udwZ
Wc48Sb8C/RD8OLwAHvL1DMpHdH6h1dUrsX2X9l/x56HNUE7xXBvanh9H34S+
NTVv6dI3pLbOAcWF99H3h5Z/bV4vqp+rzB8PzSu6GT8I98G9tMPKQ+Y2yMPQ
b42sbhRH8VZE9r067yOM7wotnwt57gytBhRLMeV7lfKIyOrxncjyUB7Rm9hv
VfO+NrLxRyKr/SrFRq/yuarfSvlLaDVS7Ln9b6blmupoq2K43w7xvsVzTJ45
JH9xT25K7eyVewPKH7gerd+51b1W53tjZGOUL22p1YI8+VPVip+f8nPYc0n1
d0Z3gH43NQ9X/nwf2zv5/nn5MM8TofmzNJ3XOPoFP5drse2P9qHG7xPlXm9k
YxS/F72OMTnwenhNZPuj5273w03oucp99LWRjX+Rfg36Med1iqOYoXlLn3ur
PC3XPadduea1WQSfT2z9X6M1eq7I5+WbynnV6cvo690HynluD803VOMh+m+c
3Wb3k/rE7tJWxsyOzDOUJ8qXj3mXTb+SsZ1+jjrfBr9f5Gk6O+VOXWqepvpa
Cv/hd6XWfMZrpCe1+0L32kb4Bvf/fYn5h/J5mTzO7w7dF/mx3VOzU/M6eeaS
1MZpfLavczn9Ir9b9L0PR1bvYu3BY+5d8qgceKfv7TR4unvjg35eC+i3+V2p
O7eWthq+G60Gfh6eB/+YaV7zIdoD7skHEotXR5zF9HFq3qv/Kjp35cILaD8x
997I7sFevyNa6G9Hm0u7LbW7Xj4zH37V77Vmv7vlS3P8f4Q8Qd6wODX/lT8r
jvwwQnsushzTN9T6+rPRb/G7Rvuv+0658SvrusvzR7lR5f65UP8rYlvbTfAs
/0bdkdqTVfTL0Wem9l3ak8LY1lbicXRGT6V2pvLSPPo7Utt37ZviKw9L3GN1
vtXw/7DyWc4=
            "]], 
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1:eJw1lvlXlVUUhm8OrVv62XXkK8tySC3LWdOyHNIyqSxMURxT1NLAABEFHJBB
ARVikEEUQ1SwBM1Z02Wama6Gv6R5nnve9u6HZ/Hynv2dcZ99bv/l6xJSO0Qi
kZ3QGUpjkciMaCTyVBiJTIKnYTveaLyFsAjuwIuHWaHFP4f3IroJ3oVDcBDv
fdp+jCMenYH+Cf0zZKPj8DoR1xnuhHIog3dgF22HiZmJfh5KfE4a7x7oFlof
IV5M36DnoPujB8Ig9QE78A7Rthu9Bw5DM7Tg7aXtiOJ8/lpnQRCJFAYWvxOv
mbaj/N8CU/Bm4r2gtcIe2jLwMtDpsA724eXBMHQ/2h6Eh2ACTMQrpG0i+knN
mT7LoQ4vhbZ5eHPgVXQ53mvouTANJuMV401HzwhtnbPwduMN8DXX0NdeKPl/
3ejJ6GdCm3u8x89Gv4yeDQk+1gpil0MP9Y2Xgp6qb9E7YzaHZ3Wm+Pny0B+g
T8EfnOfvkElcJ9r+RDeht6OLNJfQ4v/CvxuvCwSQRUw+jNXewyR4griu0AU2
0tZTsei/+barf/MPOuJ7Og1vKkyAgpitvVg56eensx+PHuc5PMbHyINtylWf
Zz56DIyGsb7fWrf0JJ/fFD8D5Weh1qb9VA75mT+GHgUj4VFisiAHnQ2ZsJ+Y
zexXbmBjaW934LVCvXIHrwH2h3YO3aEnDKBtMzFVfFcJ8/E249WjP0KfR5+D
M3AyZmeis9FdbMR7D28bDEWPgOHwDXt4Au8E+i6IQg3xt+BTuA1X8M4Sc5G+
jqHb8D5B34Rav6Naex26Hj7EvwQ34AJtN/CO0b4vamtqVP7ACa8Np4m7Btfh
PF4VXiVc9nHz/bxUazpAR1hM7KLAckn5sEH3U2eCrqC9Uv34uA06f2iCVt19
vmuGtsD2+yheu++R6pTmdRIuwgVoi9m6L6E3eS5+y7jfwfewFW8w3kAYBL2I
6+v3R+d1P/qB0P7qDLfgrWfsTF+v9vcc3hf8/6XuEt4RvOMx20ft51pYA1H1
Q1subTle91Qz02hLh6WwBFYFVle7+Zx7ofvCfX6PlAdDfK69oQ8Mh8dhpNco
3SPlRrtyCu8snNPZh3amp5UTtN1En3H9Mfozxv48sHad/zW866G1KU/P4p2i
7RYxtwOrW/FeRx9GD4av2devfG+HeJ5WqBZGraYPhUdgmOoD3iZIgipiVtJn
MmQEVn91B++Ffui38HL87l3BuwxXfU66M0n4C2A9umPU6pneiGrNWbmqXCN+
PjGJ8IO/aXOVS16/X1HthgTVV3gptFqrel5GzBb0FvTBmOWh8jEXrxavTrUN
DqhG+P1u9G+2hvYuJOqN0Djen+pjD/Q4GO+5mUbc25Cuv/4eqV4kwgIfX/3q
f703mntq1NpyIDu0OW3wepXlWvPaqJwK7e6X6dygNGrv9PHA3lPt0VXVJWjH
b1P90f3yXCoIrdbqfdA7UhjaG6q5Nuh+oDNhL1SH1ke716ZUSFEbXjLeOl/n
m+g1kOZ9/Pe+qj6r7jGPPNgT2DdLaTuAbgzsN8V0fz/0juj3Ti3eau9P/a7F
W6a98xx7Hb0c1mhcqMFb5XHzAnv/fouzO6u7q/clz98AvQVFfs9GwCifp34T
tIRWj1q9XqpeZXou/kJ/v8ZZv6p1FXjdIaa89v1YgV6MXhLaGjWvlXgr0Mmw
EupUt1XLA6uX+nYhJIX2+0l3bFFo+6V9KwrsN1WS18JW1Uxo8bdA93Iuepn2
1b/V76d8KAtsfO2R7kpvdB/oELXfgbtoL4Vqn3uK7732UnNdDW9ACTHFgd13
nUElMf8C1HRn9A==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlvlvVUUUx++jKvehfX1UkXclFqk0QQVEZYuAgCgKaFhcQSVhUcClqIho
MEaNxhiXaIwaE6NGY/RPUEQoFaEL3RfoZlvoCrS0LG2hCH6+OeeHk/ne75w5
M3O2uRPWb12VOyIIgmokDZkdD4KaWBDcxdiaDIKpjCuiIHhUAu6B60Oa0Jma
YAFyCFwBlwWuBGcytvA9Bf3lrHsAuRncCPcwOBscR+c430vAuXBHk7bnavBG
ZAG4A+5SehAUY3MU+oV8D4RBcI3rT0fnMXA/+BnwO+Ax6M0BPwU+Al/G2ivh
1sA1g9cxvsfcI36XD8BPgnt1FvBEcBP4ZfBycA5rj/E9A/w43E5ktev/BH4D
fB58NXrl2P8X/IvzF8DXMR6ATzAudZsn4Q8hF7nLeLgfkR3wC7Dxpp/nFvBV
CTt/PbqT4ubb2xmnISUx8+/bkd3tFDpfgl8CnwVXJ23PyXD54Bb2upAKguf4
XgjfCbfB8Tj2yXH72mca/GT5C50VjPXwZaH5rAH8CmMXcWmGO4/NVyPT072u
ZaxAJ4uxiu84Yxbzy5AJWi8dzxP5Vn4oBA9hrwF7jcggNovgB8EJ1nUyV4DO
AOMnfG/GzpmkxXcs+B64EUgmuBZuPWMd+hOxP1fx0720J3MhczeiewK8DLwj
sjyXX1eBc2QLXKb4IG+Bf4MbZu8i7MQSds56pINzTmfuNvfVMLIT/CvcV0gu
+BzcfXGrF+03G360n1PzrfAHQzvPUr63Ml+qvIfLBv/suaEcm5mwHFaefAO/
yf2gWOxR7qXbmTvBSxKWAxno3IHuac7ajs39cDcwVxuzGtzuOaNzDiCvgX+A
GwS3o7MInbvdt4fhapAk+M7I7iv/fA1uw34t9vdKB7wP/Ad4G3Mvek7K/jbw
d3Bd4MXgF8BbPF6K2+WU+Ud+Vl2vBX+GTg93249OnmLlMZ3HuCFu6z6KDG9E
vgCPjCwXdeYW72MrI9OV3ufgD72WVTt1SAo8H+4iZ+jm/L3ptpfO8C78vQnz
yQzvXYrX6/Brkfner9qQueCn4SYhaeByuG7lK2uzWfut57DslMD/x143wf2d
tDueYt/3vd8qb2s8jlPg1nlvVP2mx633Kh7tvu+syPqy8k11fTk0m+qbl7jX
ccYD6J5Omq8+9p6pms1IWM2Ogk9TzoTWf4ZDqx3VchBZ/1e//TQyO8pJ5eY+
cD64I91irpgqtoVey9ejv9JzXnXSB3cQHIF3o1PMdxNnrGP9bvhWxhLP239U
u5HFRec/5v1/Ddw8f1PUW+Z4n1HPbPa6UByPYqcmNJu/M5cHrkrZvkXgBnBx
0mpctT7V61r9XL1oCJ2xHme9j3onH0xYranP38rcFXF7B9U/5HP5vhm7/bon
fD04H1yB/ZFxey/k64eUpzF7C7u9LrZE9p7eD35euRy5v5jf7m+ZaqkwNJ/L
d5u8zzzLOOS1/L36W8piWaAc9NrcBZ7FfHXM8n58ws6gd2dMZGcu8HzWezoT
7rCfX2sX+puud/nPpMXrCPc6i06Hx+sEuAK8B1zOmIfOmdBqTX07jo1y1uyC
r2KMvF7Ue7tTtuYvcGVo/b8utBgpFhleL3rX+lP2Rujt6ErZeRTTxpTlrnJY
/bTa91JfqvbzKA9KvQYzI8uNvYoRa8d5TFW/T/jbp/8AnVk6legs8n8G/duo
BuVD+bI8ZefW3fX+6q3sc98ox3oYT3pOqmeqZhRH5Uap+013XxzZ26x/khL/
ZxgN1+v9Vv2wzXOgNfT6Vg+Rr1I2p56vfqtc2hxZner9Osf8/xOcleU=
            "]], 
           Polygon[CompressedData["
1:eJxFmPm/V2URx88XvfA9wjl+le08bIoKykVCQEVQQQXFXNAgzSRTXFMMEtNy
aU/bc2sxyqVS818wWzDSNEBZZLtc0Av3slwEgQABEfu8/UyvfpjXd+aZeZYz
z8xn5vkOvnHOtNldsiwbXsuyI/V7dsqy4/IsO150jvgNVZYtqmfZYtFG8Tdr
bJx040W3iK/KLFuhuRMlf1FyTfK/Jdclfyz7HaL1mrtOtF38wUaWbZb+fumf
l/3psn9H8rWSvym5IXmp5HMl3yb5Tc3Zo7l7RW+JHyX9eumnSv916QvRe6wt
Olr8MOlXSX+Z9PdJ3qY5q6VbJeoUv7HIslek/6fktyUPkf0yyVNk/xXZPyG6
Q/ws0S+Sx9BdLLpL/FLN/4fs39D8Fs1/Sd/zZ8kLJK+QvEnUIdosWqux8Vq/
TfrZmv9LzV9f2Zf4tFX8OOnflf4+6V+Qvr/kdZInS74p2Qf4YoLo9uQ92Ivz
rxTfqfMsqHlN1v6ybC6Q7STRHPE9RPuwl8122Q7V+mvE3yn93dK16Pxv1Xzn
3P0R0ncRTRV/heg3+IC1RE+KX6Y1XpL9cq25VPudKNsTRD+U7keiy0XNsh0m
uizWGCF+cc1rnyUaK/qjxp+L+x8j+q3434kuFg2V/SLZZxpvj/vi/vArNnfn
jhnmsga+w4esfVLpM3GWGzX+iH5vJVZFPxN/CTGltZbLvpfsBkvuKl2T6Djx
bdrvLzXfD7HfVNo/uyW3Sd4n/euSD0huJPv0PVH38HVv0cG69b3E75JuJ34X
f3Iy/75oSPIY3/ix5Cnx7UdJXqj1B+g850v+vGhM7hzrS2zL9mXxr2v9tZXX
7C79qzXvNS55Lmt8VNi3o0Xzkn28QWPzpVui+Vs1/wcau0H214seFn+KbDdK
/wXJ35f8LdGM3PJ3kr91m+io5G8+LeL1Nul/LfkdrdlPfH/uRHyz9Gulny75
u8k5SW5eLro/meDJ5wfF/zjOM1P0E3ym+S2af6XkuclxxlmxwZbYW13zGLoB
klfWnAPkwj2i1/Str4q+Kv5U6Vtr/ia+bXdh3+HD4ZL7SP+25KskXyP5gPRv
1BwfA5J9ekh0VrKvjymNWeTpl5J9hq9Y/3vJd8aa18Rd3sD5RTOJT9F5yVhL
/k3A15HvYGDvmMdZrhZdC/40nBuF5GbJdyZjExh1h/g9Otu/pN+p7+0Ze4AF
+IO912v+kprz81OSX0zGYjD5UMM+wBc9RCP4frBMa/1N+i1ae2AytoPxByX3
l9xPdLhwHJ8T30O8UhtOktwtd46Ra8zBp/hyYMytRbyyRhVyJuoj/lDsv0X0
UWX/Y4sNtheKJkfd4C7gB4X/GLsobNAdW9rfE+OeuRtynrvljhfp+4+O+tNT
Y93CtsodE8yZ3zCWUtOobdwZdwdGrJZuEvgbZ2LfTxPDuTGN/D432Uf4JpX+
hr7JMcW37dGa/6nsI3wF5oF91DBqyn5qGNgk2oetbF7T3p2SD0uezZ65a+BA
rX8d8cidgHWla+bXIm+ppfCX5s5hxshBcpEaC27s1Zotddcy9mNNcozcYq8H
IoeZ943kmjU56g+xN5q7CTynrvSL774+cuETH5TuHRhr1ff8teZ+4X3td2ty
n0HejijtA3yxhpiojPfUM3KAXGAOc7mfXZVzgtygxg8qvSe5AEZwFtamlwET
2IM1ZiXXENbmDoj1TXXfzbrCZ2SfnaIx8Y18G/WtEPUQna6xM5IxECx8k/6q
dA1hDJ7aQg2nllPjqHX0JMsr4zS9CnbMPVNr5Mk9GLWemg8Od0Z8MB/7jsLr
dEQvQo2iFlGTjhW/VroWalblfmx7+Aufo9sV/RoxvgCsqNx3gSt7C/u8NeJh
c+jozcAcbDj7/LprDN+wLPoVeqQlUTs+OXvdNQSCp4ejl1tUWcaG3gbaSs5X
1rVX9sG2qLuch1igJm8u3AOtqzyHuWsq10pq5srCeHQimCS/1kXDkrEOzDs5
dCeIupa2AbOOj3HmniYaGXWGXCjjzrnrM0PXHPGFzXhwLndNpl6MJZYjPzsa
3utw3fjBnsRTH+l7i0YlYwH5Dj6BCadqrMyd8+R+SsZK8BAsXVU5ptojFrZG
v9petw/xwQrR6sq+wVcL67bBtjX6fXqglxvegxpJXWBvak4R9QHfEXPcM71E
Z/Qj9DWnJOvvivpEjg4N/Jka9f/e5PrOOL0o9ZkehFpOTQevqKEzIj+HB4aB
ZQ+FLT0J9ZaeZWRpG3oOeg3mPprcz9+e/78f/LlogmwmBgaCe/QuTwbNCfwb
FXfMXXFn3D1z2mvuKVnrp8k8Y+dLd6Fok/h7NfZMcs2idtFj4EcwmjF4fPu0
bJ4SfSBf72+Yp9/uqHmMPpa+hl7npuhhbwm83tlwjzQz+uHdId+c25Y59Hzz
Yg/26hvvNWo0tfASyVskT5P8q+Q3Cu8e3iW8XZ4Vf0/u7/l9Mj6BV+Q0uQ3m
0dsTs8TuGaXPzjfwdhgd7zV8Oi/OAo+eM1FTqGVt9ag1ld9W5CzxeV68DzkD
Z6FnoXchx8i1D3lTVu6r6X8XV8YSMAS84E3F+4Ae58WIB3zzmH4fD+KtR4w8
Gt8+K94T4+K9As/Y/+yZOzZ0nLkt8ueVhjESLFpWN3byZpsQ8by14d4fbO2S
+w2Aj9mHc/4pcoBelZ6X3KiR36IjRU3hL7D3g+gFrsbnuXvs5uhxqHVDcvc+
g6M/5gz0Ap9LntMcuXJB4BM9Ez3LdXFeetAZUdeo3fQvvAk/K5orfoPGzi69
HvWT/wSuIo4Lv5GoO8eIphMDYJnoM8lvogOB13ujplA3eoZud8QDmAf20VM8
GHHEW2ZuYAqYgX/oI5uivxyU/CahplBLyuQ3KPFCz1sPzAfXLw1dHu8F4om3
K3ps6VnBe/5T4L8FeoCFDb/JwHJ8hu/wCb6hx7tS/DTRyOg3etITcJ7Yv3vp
HCevJ9Grls4pcgvMuEjyH5LH4KeIuiTHAHffNTnGwRIwhdj/MPCFHplefX+8
V/Df/ogRYoV7QTc9zsjZekUMgK3cIXfJfzLkCjnzXMTkA7n/wxgfPRh9Em+n
byf/Z8MdcTe8x+vid2jvv8v+3cJ78NYmBqbHN/AtRdTOHYXfFpyfXr8pYr1H
1NVuMQdbenN0+LR79Fn/Bftgon0=
            "]], 
           Polygon[CompressedData["
1:eJwtlulXVWUUh4+KwlXv8SqQ92BqQJSmgOYU4QAqpaSlaE7NppmmmANm8zx8
aFitymrVap7+hGaHSs0h5lEZBRRkhpCY7Nlr7w/Pur/72/uc8477faM3787I
HOo4zhswHJoDjrPG5zh7YC+s9RwnG28o+moYCfx6eH/i1fK/GmqgI0gcwojn
EXPIGQK/oXOId0IX/EPOvfjzyasjNtl1nOugCX0X3uPE9sBeuAeS8WoD+sx9
UI6Ow5sCN8JyvNEwCly4wjf+JieUd46AMnQ0eXcQ+xediT5BznHIwmvF24j3
NPpZeA4eg9vwGojF8I5YOICXjncZ7wn0QbiITsHbgt4Kj8BuWIK3VL5p+Zvx
HrL8VLyHPe3vKnS2jAmkW/v9MAZ68E6RcxI60H3QC5HEfDCXZ+dBEErJWY2X
gK5GZ6DXwOewH68Hbyl9SIP/pP14XxD7Er6Cb+BrT2MHiX2LnkLuWpv/ZPR8
WOXpmMvYJ9q3NuJtgE0wG68Gr8fPPMBYvH7afAZvnKftl34MSp9lvvHu9PS9
0vYqvLvtPRfQ69Dr7d3r8NbDHIs9ircNtttcXcLrtfZLn26nvctggqtjLnMT
j06A8Ta+p8nvo539cARdhFfL+mzif7Nfx74drxKvCqqhHr8O6tFlxI6SU8j/
AvgJfRSvhFgu/4+hi4OWDyVQDOfwThH7hfyf7ZlCvKKg5rdBK7TLd4kdIyef
5/IgF+8wXg66DEqhGgrxmoj9RW49uln+w1nz6myPdkIX/I6Xh1cq7YXL8m28
cMZqEkyEWxmnZTKWcJ7Y9bbfpsr6gBy8ELyb0NfY3pM1K+MbtL0qzyxBp8k8
Qa49MwF9lXY7rr5nmNWVKE9jk2AEXiiMhHxyfOTGoBcQ89BRUjvQA7aeYtCx
MFP2EHmFeDejZ8ncS53A80PAYjfgxVl9k+9Ln8bwThfmWu2JRCehb4EiWcc2
LqPxR0EF3jS82XhV9KcSWqCBNoXJnmJcK20Oe9F9cAXO410kr9v2SrG9e6j0
G0I93dMz8WZAvO2P49DIs63QYt+YbPvsbEDHIxomwrU2jj6rydPR02wsZHwK
AjpvjtX2bqudb0mtxWtHv41+B16DV6HF6uXrVl8OoLNgH3QTexnvJU/PEakf
r6DnyXhCiqu1R2rNIchAr5baC33kf4T3IXTK/sb7GD2cZ0JcrXnj8UqIVdqY
J+AlwgxPa03A0zozYGMhczhHvu/peSPniOx12fNDeOdYn87rOTsjkiXP0/X1
PXwHP8Az1r6F1gapt4vQKbYvYvFS0Ys9XeuyrgdhpKsx2T8rPD2D5Fuyhlei
IyAcTlidkdou9S9J2gWzrJ7Keo5ER4Br8yb9kjUnYzHdp32M4HvhEOfqWSpn
yjjpp6v1Mk32NvoF9PPwItxv8/yAaKi3M03Oqx32jNRWORN3wruwBa8joHMq
c/sp3ifwmafnjawDOWt3od/Dex8+8LR25dPPAjgCP5JzBu90UO8TdVavDtmY
9+Mt5/3prq5DaWsiegEstFoeb/2R9dpme0xq5h/oVuagza93EZ/VkGHoEFkX
rq6xN9Gp6MWu3gU2Sd/hQVvjcjeRO8pU2ODTPZBnNVjan48uCOoctuF55ET5
9MyQOn9S9pScNfCr7V+pDf3EBmAQ9vPOfdBlY5ZltUbWp9yp5B4ldUHuICvx
VkgdhsaA7kdp15PEnvL0HpMJuzy9i6RbnuypbeitchZav+V7O9HbYYfNlcz/
Ilt/SXa3aQ7q2XLYzsgWqV92hkmfytEVUBrUs0/ONDn7yuwZOZtq0BeCer42
QkNQ74a5dvZUME/lfj37pF5e8usZlWt3xmzIgf8BbHuQtA==
            "]]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0ElOAkEABdBqQYENrjSaoIbISnG6AJqoFzBxrZLgUo9AI6A43UFuh0MY
xHGh8XVcvPz/053qSher5wdnUQjhkJGyIuOJEBps6Z+5ED7Y1N/lG2M27Fc5
Ysi6PZB91vQX+cwTZftR9ljVu85+oKRfyjYtFuxTWWNW35d77DJtL8nF5D2y
9q/7/pDcv+7sGI9CQ17QJGW3ZJt08j15RYdJ+1recMuUfSfvyehzDpsnr1fk
NjvM2EfymBMK9pdLfLOc/Ac5jP7/5x8cLCsH
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MsuA2EYBuCvM9WWu1AWbJ2tSAi1qIWwcm6LOLRVl4YdC66DRbkM1cMz
6eLJ+77JzPx/ZrrWPmjlIuKI1yTiWG6lEdvU9KepiA6X+qNs0+LCbsoH7jm3
7+QtZ/qNvOaKU7sh65xk3bfr6fjMPVlhl317Xs5lWy/JIgU27V/3+6HLuv0p
P1jQ/yYjeizq/7LPgCV7KMPZyyInE1JW7LycoMCqXZQl1vQv3/5mI3vPHRJS
duyynGGWqv3muXcO9Wf5koz/5wgRRSPY
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MsuAwEYhuFf2pCUm7DhfiRuwLG1cFjoCTOtVlfO9ixwJ0ha9+AUWtq6
B8/E4sn7f5vJzMwubS1sTkTEIpVcxLFO5iOmuHL/FiLGXLpHOuSHC/tbB/Q5
t7/0kzP3h77zxqn9qi+cuOc9e46Oe0anKZDaY+8woup+1h5ddux7veOWDbut
LZbdu55dZiX7Dq1SY9Wu6x5r7n09IGHdTrVBk6J9qC1K7mvPvmHb/aCPPFHJ
vlX7DEjsRFOOsnfRcu7/f/4B+IA0kQ==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0L0uQ3Ecx+GfpBNX4S6wMbBLOigN56A11WXQBBOlNTG1htbE5N1CQq+D
Sb2/x9MYnny+v+Wfk9OfLo6XeiIiy1Am4kiv9JpLe6EvosiFXdB55jh3z2pK
wpl7Rqc5tfM6xSQn7pxOcGzfe/uOQ7utt9yw725pk4a9pqussNv9Fi1SYNs9
pqOs2w+9ER027Ed94pmK+0Vf2bTf9J0Pttyf+sU3VfeP/lKzE2+n7NhLukyZ
urve/Ub2aLmHdYQDe0AHM///8w+6SDhX
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0EsuQ3EYxuFPcjqgq5AwaO1EJUViA53qRRVlDyRYhy6jdR25q0tbBjVy
N0LiaTp48nu/yf8kZ7xQmS+PRMQCf0nEi26mIrb4tp/SEY982T3t0uHT/aD3
3PHhvtU27/a1XnHJm/tCz3m1G97e49ne1R226bmXtUrbntNZ8py5pzRLhhP3
mI7StBe9XaRll7RMhX33klY5GLyvNVY4dK/qGnWO3Ou6wbE94e1JTu1pzTHD
zeB7WqRE151oir794z/+JsP/+Q/D/Tkg
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MkyA2EYBdBPSSzEUMhCVhLTMrLgOTK2xLjwAOIJsWPBa0jIYIgyBFWO
sjh17+3q+vuvLpy0a6cTEZFwmY5YMcpTERU29eOZiCM29EN5wD7r9p5s0WTN
3pUJq3pd1qhSsCuyTF4/c3abnJ7IBnUW7R25TUbPyqW/56TsofsN6PPjvrfy
hjf9LhPR4V3vynse+LB7ss+nPpBDHhnbT/KZF77skXzlW+84u8ukb8+6wxzz
TNtFuUWJBfvKe9cs6+fyIv3/P38BzI8u9A==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0D03wnEYx+HbUoupzsFqkschTEyaNBEx9+CZeg3YMvA6GPA28nAqil5G
DIwup+E6n/u7/Or8J8v1Qm0kIopcJiI2jFQyIs2uuz8a8cmO+0N7dCna7/pG
h227rS223K/6wjMF+0mbbLoXvZ0l757QccbI2b/+ww+r/7+nPbos24/6wD0L
9o1eM+UuebtMxl3RKntM2/t6wIz7UI84ZtY+0VPOmLNrWmfefevtO5bcLW3T
YcUe6BffrNkNvWLdfa4XieH3/AOGky6+
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0L0uQ3Ecx+GfqQsX4V60CD04rcR7kyZMbSV0YmrrbVcJrgMD11EJRal3
O7NHDE8+v+/yz8kZLq+ntYGImCWXiWgYHb3mwF0ciiiw7051hmn27ClNyLNr
T+oEO+5xHWOUlp3TLE33j7e/2XZ39ZYb6vaVXlJ1n+oJx6zZdd1kg5Jd0JQ5
991gxD3z7gft8ciC/aR9Ft3P+sIrS/abvvPBsv2pX6y4q96useo+1DZHVOwz
Pefi75vsvCZsuUc0m/n/n79IWzKE
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Lsug3Ecx+F/J2+HJgzs7kAH3IeElh7Q6tomZdBLqGMTgg61MDHxVhkd
mh4cb8kjhief3zdv8h/e2VJtqZoIISyTjEK4M070lCf3TyqEbx7dX/rJBz37
XceMeLCHOqDr7usbr8T2iz5z7+56O+bW3dYLzrm2G7rLpbugeXJ/3+1FXWCe
lj2j0zTdGW9n2XOv6ho59u28FjhwF3WdDQ7tTS1R5sje0grH7jlvpzlzr2iG
LB27rtvscGVP6hQ37gmNov//+QuvXi8J
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DsvQ3EcBuCfrQadSoLJN8DAQCvUrTZNyu4DEP12qi4LnVSidempe1ET
A3ZP0+HJ+74n5/zzz5nY2SvuDkREiVoq4sXYHIwo8qlvpCMKdPV1ucYqH/aK
XCbPu70kF3nTF2SOLB17Xs7xqpedvU9b35ZblGjas3KGuj4uxxilZv+53y8/
nNpN2eBAvxrSqfSey2tuOLRv5R1VvSUT2hzZ9/KBR47tJ/nMif7l7G/O9Yw7
DDPChT0pp5imYde9d0min/W+SfX/5z9/cjgW
          "]]}, {
         Line[{2432, 2429, 4356, 4358, 2448, 4380, 4381, 3665, 4354, 2466, 
          4416, 4417, 3675, 4371, 2482, 3689, 4458, 4460, 2500, 4447, 3701, 
          4493, 4495, 2520, 4533, 4534, 2517, 2537}], 
         Line[{2435, 4363, 4364, 2430, 2451, 3668, 4391, 4392, 4394, 2469, 
          3679, 4427, 4429, 4432, 2485, 4474, 4475, 2486, 2503, 4507, 4509, 
          4510, 2504, 2523, 3715, 4543, 4545, 2540}], 
         Line[{2437, 3662, 4366, 4368, 2455, 4350, 4351, 3672, 4390, 2471, 
          4425, 3685, 4401, 4403, 2489, 4442, 3698, 4472, 2507, 4503, 3709, 
          4520, 4522, 2526, 4554, 4555, 2530, 2543}], 
         Line[{2440, 4383, 4384, 3667, 2458, 4408, 3676, 4418, 4420, 2474, 
          4462, 4463, 3692, 4454, 2492, 2498, 4496, 4498, 2510, 4536, 4537, 
          3714, 4528, 2529, 4558, 3721, 4561, 2546}], 
         Line[{2443, 2453, 4395, 4397, 2462, 4435, 4437, 4438, 3684, 2477, 
          4477, 4478, 3696, 4469, 2495, 2505, 4511, 4513, 2514, 657, 4546, 
          4548, 2533, 4566, 4567, 3725, 2549}], 
         Line[{2445, 4404, 3673, 4400, 2464, 4440, 3687, 4443, 4445, 2479, 
          4480, 3699, 4483, 4485, 2497, 4482, 3711, 4516, 2516, 4518, 4519, 
          3720, 4551, 2535, 4569, 3726, 4552, 2551}], 
         Line[{2536, 4486, 3712, 4532, 2519, 4494, 3702, 4448, 4446, 2499, 
          4459, 3690, 4405, 2481, 4370, 4369, 3674, 4415, 2465, 4353, 4352, 
          3664, 4379, 2447, 4357, 3659, 4355, 2431}], 
         Line[{2538, 2524, 4531, 4529, 2521, 4491, 4490, 3705, 4505, 2501, 
          4456, 4455, 3693, 2483, 4430, 3681, 4414, 4412, 2467, 2452, 4378, 
          4377, 4375, 2449, 4360, 4359, 3660, 2433}], 
         Line[{2542, 4542, 3718, 4553, 2525, 4521, 3710, 4504, 4502, 2506, 
          4471, 4470, 3697, 2488, 4402, 3686, 4426, 4424, 2470, 4389, 4388, 
          3671, 4349, 2454, 4367, 3663, 4365, 2436}], 
         Line[{2544, 3722, 4559, 4556, 2527, 4526, 4524, 4523, 2518, 2508, 
          3704, 4489, 4487, 2490, 4452, 4450, 4449, 2480, 2472, 3678, 4411, 
          4409, 4406, 2456, 4373, 4372, 2446, 2438}], 
         Line[{2547, 4563, 4562, 2541, 2531, 3717, 4541, 4540, 4538, 2512, 
          3708, 4501, 4499, 2493, 4467, 4465, 4464, 2487, 2475, 4422, 4421, 
          3682, 4433, 2460, 3670, 4387, 4385, 2441}], 
         Line[{2550, 3727, 4570, 4568, 2534, 4550, 4549, 3719, 4517, 2515, 
          4515, 4514, 2511, 2496, 4484, 3700, 4481, 4479, 2478, 4444, 3688, 
          4441, 4439, 2463, 4399, 4398, 2459, 2444}], 
         Line[{2555, 2552, 4578, 4580, 2571, 4602, 4603, 3734, 4576, 2589, 
          4638, 4639, 3744, 4593, 2605, 3758, 4680, 4682, 2623, 4669, 3770, 
          4715, 4717, 2643, 4755, 4756, 2640, 2660}], 
         Line[{2558, 4585, 4586, 2553, 2574, 3737, 4613, 4614, 4616, 2592, 
          3748, 4649, 4651, 4654, 2608, 4696, 4697, 2609, 2626, 4729, 4731, 
          4732, 2627, 2646, 3784, 4765, 4767, 2663}], 
         Line[{2560, 3731, 4588, 4590, 2578, 4572, 4573, 3741, 4612, 2594, 
          4647, 3754, 4623, 4625, 2612, 4664, 3767, 4694, 2630, 4725, 3778, 
          4742, 4744, 2649, 4776, 4777, 2653, 2666}], 
         Line[{2563, 4605, 4606, 3736, 2581, 4630, 3745, 4640, 4642, 2597, 
          4684, 4685, 3761, 4676, 2615, 2621, 4718, 4720, 2633, 4758, 4759, 
          3783, 4750, 2652, 4780, 3790, 4783, 2669}], 
         Line[{2566, 2576, 4617, 4619, 2585, 4657, 4659, 4660, 3753, 2600, 
          4699, 4700, 3765, 4691, 2618, 2628, 4733, 4735, 2637, 852, 4768, 
          4770, 2656, 4788, 4789, 3794, 2672}], 
         Line[{2568, 4626, 3742, 4622, 2587, 4662, 3756, 4665, 4667, 2602, 
          4702, 3768, 4705, 4707, 2620, 4704, 3780, 4738, 2639, 4740, 4741, 
          3789, 4773, 2658, 4791, 3795, 4774, 2674}], 
         Line[{2659, 4708, 3781, 4754, 2642, 4716, 3771, 4670, 4668, 2622, 
          4681, 3759, 4627, 2604, 4592, 4591, 3743, 4637, 2588, 4575, 4574, 
          3733, 4601, 2570, 4579, 3728, 4577, 2554}], 
         Line[{2661, 2647, 4753, 4751, 2644, 4713, 4712, 3774, 4727, 2624, 
          4678, 4677, 3762, 2606, 4652, 3750, 4636, 4634, 2590, 2575, 4600, 
          4599, 4597, 2572, 4582, 4581, 3729, 2556}], 
         Line[{2665, 4764, 3787, 4775, 2648, 4743, 3779, 4726, 4724, 2629, 
          4693, 4692, 3766, 2611, 4624, 3755, 4648, 4646, 2593, 4611, 4610, 
          3740, 4571, 2577, 4589, 3732, 4587, 2559}], 
         Line[{2667, 3791, 4781, 4778, 2650, 4748, 4746, 4745, 2641, 2631, 
          3773, 4711, 4709, 2613, 4674, 4672, 4671, 2603, 2595, 3747, 4633, 
          4631, 4628, 2579, 4595, 4594, 2569, 2561}], 
         Line[{2670, 4785, 4784, 2664, 2654, 3786, 4763, 4762, 4760, 2635, 
          3777, 4723, 4721, 2616, 4689, 4687, 4686, 2610, 2598, 4644, 4643, 
          3751, 4655, 2583, 3739, 4609, 4607, 2564}], 
         Line[{2673, 3796, 4792, 4790, 2657, 4772, 4771, 3788, 4739, 2638, 
          4737, 4736, 2634, 2619, 4706, 3769, 4703, 4701, 2601, 4666, 3757, 
          4663, 4661, 2586, 4621, 4620, 2582, 2567}], 
         Line[{2678, 2675, 4800, 4802, 2694, 4824, 4825, 3803, 4798, 2712, 
          4860, 4861, 3813, 4815, 2728, 3827, 4902, 4904, 2746, 4891, 3839, 
          4937, 4939, 2766, 4977, 4978, 2763, 2783}], 
         Line[{2681, 4807, 4808, 2676, 2697, 3806, 4835, 4836, 4838, 2715, 
          3817, 4871, 4873, 4876, 2731, 4918, 4919, 2732, 2749, 4951, 4953, 
          4954, 2750, 2769, 3853, 4987, 4989, 2786}], 
         Line[{2683, 3800, 4810, 4812, 2701, 4794, 4795, 3810, 4834, 2717, 
          4869, 3823, 4845, 4847, 2735, 4886, 3836, 4916, 2753, 4947, 3847, 
          4964, 4966, 2772, 4998, 4999, 2776, 2789}], 
         Line[{2686, 4827, 4828, 3805, 2704, 4852, 3814, 4862, 4864, 2720, 
          4906, 4907, 3830, 4898, 2738, 2744, 4940, 4942, 2756, 4980, 4981, 
          3852, 4972, 2775, 5002, 3859, 5005, 2792}], 
         Line[{2689, 2699, 4839, 4841, 2708, 4879, 4881, 4882, 3822, 2723, 
          4921, 4922, 3834, 4913, 2741, 2751, 4955, 4957, 2760, 1047, 4990, 
          4992, 2779, 5010, 5011, 3863, 2795}], 
         Line[{2691, 4848, 3811, 4844, 2710, 4884, 3825, 4887, 4889, 2725, 
          4924, 3837, 4927, 4929, 2743, 4926, 3849, 4960, 2762, 4962, 4963, 
          3858, 4995, 2781, 5013, 3864, 4996, 2797}], 
         Line[{2782, 4930, 3850, 4976, 2765, 4938, 3840, 4892, 4890, 2745, 
          4903, 3828, 4849, 2727, 4814, 4813, 3812, 4859, 2711, 4797, 4796, 
          3802, 4823, 2693, 4801, 3797, 4799, 2677}], 
         Line[{2784, 2770, 4975, 4973, 2767, 4935, 4934, 3843, 4949, 2747, 
          4900, 4899, 3831, 2729, 4874, 3819, 4858, 4856, 2713, 2698, 4822, 
          4821, 4819, 2695, 4804, 4803, 3798, 2679}], 
         Line[{2788, 4986, 3856, 4997, 2771, 4965, 3848, 4948, 4946, 2752, 
          4915, 4914, 3835, 2734, 4846, 3824, 4870, 4868, 2716, 4833, 4832, 
          3809, 4793, 2700, 4811, 3801, 4809, 2682}], 
         Line[{2790, 3860, 5003, 5000, 2773, 4970, 4968, 4967, 2764, 2754, 
          3842, 4933, 4931, 2736, 4896, 4894, 4893, 2726, 2718, 3816, 4855, 
          4853, 4850, 2702, 4817, 4816, 2692, 2684}], 
         Line[{2793, 5007, 5006, 2787, 2777, 3855, 4985, 4984, 4982, 2758, 
          3846, 4945, 4943, 2739, 4911, 4909, 4908, 2733, 2721, 4866, 4865, 
          3820, 4877, 2706, 3808, 4831, 4829, 2687}], 
         Line[{2796, 3865, 5014, 5012, 2780, 4994, 4993, 3857, 4961, 2761, 
          4959, 4958, 2757, 2742, 4928, 3838, 4925, 4923, 2724, 4888, 3826, 
          4885, 4883, 2709, 4843, 4842, 2705, 2690}], 
         Line[{2801, 2798, 5022, 5024, 2817, 5046, 5047, 3872, 5020, 2835, 
          5082, 5083, 3882, 5037, 2851, 3896, 5124, 5126, 2869, 5113, 3908, 
          5159, 5161, 2889, 5199, 5200, 2886, 2906}], 
         Line[{2804, 5029, 5030, 2799, 2820, 3875, 5057, 5058, 5060, 2838, 
          3886, 5093, 5095, 5098, 2854, 5140, 5141, 2855, 2872, 5173, 5175, 
          5176, 2873, 2892, 3922, 5209, 5211, 2909}], 
         Line[{2806, 3869, 5032, 5034, 2824, 5016, 5017, 3879, 5056, 2840, 
          5091, 3892, 5067, 5069, 2858, 5108, 3905, 5138, 2876, 5169, 3916, 
          5186, 5188, 2895, 5220, 5221, 2899, 2912}], 
         Line[{2809, 5049, 5050, 3874, 2827, 5074, 3883, 5084, 5086, 2843, 
          5128, 5129, 3899, 5120, 2861, 2867, 5162, 5164, 2879, 5202, 5203, 
          3921, 5194, 2898, 5224, 3928, 5227, 2915}], 
         Line[{2812, 2822, 5061, 5063, 2831, 5101, 5103, 5104, 3891, 2846, 
          5143, 5144, 3903, 5135, 2864, 2874, 5177, 5179, 2883, 1242, 5212, 
          5214, 2902, 5232, 5233, 3932, 2918}], 
         Line[{2814, 5070, 3880, 5066, 2833, 5106, 3894, 5109, 5111, 2848, 
          5146, 3906, 5149, 5151, 2866, 5148, 3918, 5182, 2885, 5184, 5185, 
          3927, 5217, 2904, 5235, 3933, 5218, 2920}], 
         Line[{2905, 5152, 3919, 5198, 2888, 5160, 3909, 5114, 5112, 2868, 
          5125, 3897, 5071, 2850, 5036, 5035, 3881, 5081, 2834, 5019, 5018, 
          3871, 5045, 2816, 5023, 3866, 5021, 2800}], 
         Line[{2907, 2893, 5197, 5195, 2890, 5157, 5156, 3912, 5171, 2870, 
          5122, 5121, 3900, 2852, 5096, 3888, 5080, 5078, 2836, 2821, 5044, 
          5043, 5041, 2818, 5026, 5025, 3867, 2802}], 
         Line[{2911, 5208, 3925, 5219, 2894, 5187, 3917, 5170, 5168, 2875, 
          5137, 5136, 3904, 2857, 5068, 3893, 5092, 5090, 2839, 5055, 5054, 
          3878, 5015, 2823, 5033, 3870, 5031, 2805}], 
         Line[{2913, 3929, 5225, 5222, 2896, 5192, 5190, 5189, 2887, 2877, 
          3911, 5155, 5153, 2859, 5118, 5116, 5115, 2849, 2841, 3885, 5077, 
          5075, 5072, 2825, 5039, 5038, 2815, 2807}], 
         Line[{2916, 5229, 5228, 2910, 2900, 3924, 5207, 5206, 5204, 2881, 
          3915, 5167, 5165, 2862, 5133, 5131, 5130, 2856, 2844, 5088, 5087, 
          3889, 5099, 2829, 3877, 5053, 5051, 2810}], 
         Line[{2919, 3934, 5236, 5234, 2903, 5216, 5215, 3926, 5183, 2884, 
          5181, 5180, 2880, 2865, 5150, 3907, 5147, 5145, 2847, 5110, 3895, 
          5107, 5105, 2832, 5065, 5064, 2828, 2813}], 
         Line[{2924, 2921, 5244, 5246, 2940, 5268, 5269, 3941, 5242, 2958, 
          5304, 5305, 3951, 5259, 2974, 3965, 5346, 5348, 2992, 5335, 3977, 
          5381, 5383, 3012, 5421, 5422, 3009, 3029}], 
         Line[{2927, 5251, 5252, 2922, 2943, 3944, 5279, 5280, 5282, 2961, 
          3955, 5315, 5317, 5320, 2977, 5362, 5363, 2978, 2995, 5395, 5397, 
          5398, 2996, 3015, 3991, 5431, 5433, 3032}], 
         Line[{2929, 3938, 5254, 5256, 2947, 5238, 5239, 3948, 5278, 2963, 
          5313, 3961, 5289, 5291, 2981, 5330, 3974, 5360, 2999, 5391, 3985, 
          5408, 5410, 3018, 5442, 5443, 3022, 3035}], 
         Line[{2932, 5271, 5272, 3943, 2950, 5296, 3952, 5306, 5308, 2966, 
          5350, 5351, 3968, 5342, 2984, 2990, 5384, 5386, 3002, 5424, 5425, 
          3990, 5416, 3021, 5446, 3997, 5449, 3038}], 
         Line[{2935, 2945, 5283, 5285, 2954, 5323, 5325, 5326, 3960, 2969, 
          5365, 5366, 3972, 5357, 2987, 2997, 5399, 5401, 3006, 1437, 5434, 
          5436, 3025, 5454, 5455, 4001, 3041}], 
         Line[{2937, 5292, 3949, 5288, 2956, 5328, 3963, 5331, 5333, 2971, 
          5368, 3975, 5371, 5373, 2989, 5370, 3987, 5404, 3008, 5406, 5407, 
          3996, 5439, 3027, 5457, 4002, 5440, 3043}], 
         Line[{3028, 5374, 3988, 5420, 3011, 5382, 3978, 5336, 5334, 2991, 
          5347, 3966, 5293, 2973, 5258, 5257, 3950, 5303, 2957, 5241, 5240, 
          3940, 5267, 2939, 5245, 3935, 5243, 2923}], 
         Line[{3030, 3016, 5419, 5417, 3013, 5379, 5378, 3981, 5393, 2993, 
          5344, 5343, 3969, 2975, 5318, 3957, 5302, 5300, 2959, 2944, 5266, 
          5265, 5263, 2941, 5248, 5247, 3936, 2925}], 
         Line[{3034, 5430, 3994, 5441, 3017, 5409, 3986, 5392, 5390, 2998, 
          5359, 5358, 3973, 2980, 5290, 3962, 5314, 5312, 2962, 5277, 5276, 
          3947, 5237, 2946, 5255, 3939, 5253, 2928}], 
         Line[{3036, 3998, 5447, 5444, 3019, 5414, 5412, 5411, 3010, 3000, 
          3980, 5377, 5375, 2982, 5340, 5338, 5337, 2972, 2964, 3954, 5299, 
          5297, 5294, 2948, 5261, 5260, 2938, 2930}], 
         Line[{3039, 5451, 5450, 3033, 3023, 3993, 5429, 5428, 5426, 3004, 
          3984, 5389, 5387, 2985, 5355, 5353, 5352, 2979, 2967, 5310, 5309, 
          3958, 5321, 2952, 3946, 5275, 5273, 2933}], 
         Line[{3042, 4003, 5458, 5456, 3026, 5438, 5437, 3995, 5405, 3007, 
          5403, 5402, 3003, 2988, 5372, 3976, 5369, 5367, 2970, 5332, 3964, 
          5329, 5327, 2955, 5287, 5286, 2951, 2936}], 
         Line[{3047, 3044, 5466, 5468, 3063, 5490, 5491, 4010, 5464, 3081, 
          5526, 5527, 4020, 5481, 3097, 4034, 5568, 5570, 3115, 5557, 4046, 
          5603, 5605, 3135, 5643, 5644, 3132, 3152}], 
         Line[{3050, 5473, 5474, 3045, 3066, 4013, 5501, 5502, 5504, 3084, 
          4024, 5537, 5539, 5542, 3100, 5584, 5585, 3101, 3118, 5617, 5619, 
          5620, 3119, 3138, 4060, 5653, 5655, 3155}], 
         Line[{3052, 4007, 5476, 5478, 3070, 5460, 5461, 4017, 5500, 3086, 
          5535, 4030, 5511, 5513, 3104, 5552, 4043, 5582, 3122, 5613, 4054, 
          5630, 5632, 3141, 5664, 5665, 3145, 3158}], 
         Line[{3055, 5493, 5494, 4012, 3073, 5518, 4021, 5528, 5530, 3089, 
          5572, 5573, 4037, 5564, 3107, 3113, 5606, 5608, 3125, 5646, 5647, 
          4059, 5638, 3144, 5668, 4066, 5671, 3161}], 
         Line[{3058, 3068, 5505, 5507, 3077, 5545, 5547, 5548, 4029, 3092, 
          5587, 5588, 4041, 5579, 3110, 3120, 5621, 5623, 3129, 1632, 5656, 
          5658, 3148, 5676, 5677, 4070, 3164}], 
         Line[{3060, 5514, 4018, 5510, 3079, 5550, 4032, 5553, 5555, 3094, 
          5590, 4044, 5593, 5595, 3112, 5592, 4056, 5626, 3131, 5628, 5629, 
          4065, 5661, 3150, 5679, 4071, 5662, 3166}], 
         Line[{3151, 5596, 4057, 5642, 3134, 5604, 4047, 5558, 5556, 3114, 
          5569, 4035, 5515, 3096, 5480, 5479, 4019, 5525, 3080, 5463, 5462, 
          4009, 5489, 3062, 5467, 4004, 5465, 3046}], 
         Line[{3153, 3139, 5641, 5639, 3136, 5601, 5600, 4050, 5615, 3116, 
          5566, 5565, 4038, 3098, 5540, 4026, 5524, 5522, 3082, 3067, 5488, 
          5487, 5485, 3064, 5470, 5469, 4005, 3048}], 
         Line[{3157, 5652, 4063, 5663, 3140, 5631, 4055, 5614, 5612, 3121, 
          5581, 5580, 4042, 3103, 5512, 4031, 5536, 5534, 3085, 5499, 5498, 
          4016, 5459, 3069, 5477, 4008, 5475, 3051}], 
         Line[{3159, 4067, 5669, 5666, 3142, 5636, 5634, 5633, 3133, 3123, 
          4049, 5599, 5597, 3105, 5562, 5560, 5559, 3095, 3087, 4023, 5521, 
          5519, 5516, 3071, 5483, 5482, 3061, 3053}], 
         Line[{3162, 5673, 5672, 3156, 3146, 4062, 5651, 5650, 5648, 3127, 
          4053, 5611, 5609, 3108, 5577, 5575, 5574, 3102, 3090, 5532, 5531, 
          4027, 5543, 3075, 4015, 5497, 5495, 3056}], 
         Line[{3165, 4072, 5680, 5678, 3149, 5660, 5659, 4064, 5627, 3130, 
          5625, 5624, 3126, 3111, 5594, 4045, 5591, 5589, 3093, 5554, 4033, 
          5551, 5549, 3078, 5509, 5508, 3074, 3059}], 
         Line[{3170, 3167, 5688, 5690, 3186, 5712, 5713, 4079, 5686, 3204, 
          5748, 5749, 4089, 5703, 3220, 4103, 5790, 5792, 3238, 5779, 4115, 
          5825, 5827, 3258, 5865, 5866, 3255, 3275}], 
         Line[{3173, 5695, 5696, 3168, 3189, 4082, 5723, 5724, 5726, 3207, 
          4093, 5759, 5761, 5764, 3223, 5806, 5807, 3224, 3241, 5839, 5841, 
          5842, 3242, 3261, 4129, 5875, 5877, 3278}], 
         Line[{3175, 4076, 5698, 5700, 3193, 5682, 5683, 4086, 5722, 3209, 
          5757, 4099, 5733, 5735, 3227, 5774, 4112, 5804, 3245, 5835, 4123, 
          5852, 5854, 3264, 5886, 5887, 3268, 3281}], 
         Line[{3178, 5715, 5716, 4081, 3196, 5740, 4090, 5750, 5752, 3212, 
          5794, 5795, 4106, 5786, 3230, 3236, 5828, 5830, 3248, 5868, 5869, 
          4128, 5860, 3267, 5890, 4135, 5893, 3284}], 
         Line[{3181, 3191, 5727, 5729, 3200, 5767, 5769, 5770, 4098, 3215, 
          5809, 5810, 4110, 5801, 3233, 3243, 5843, 5845, 3252, 1827, 5878, 
          5880, 3271, 5898, 5899, 4139, 3287}], 
         Line[{3183, 5736, 4087, 5732, 3202, 5772, 4101, 5775, 5777, 3217, 
          5812, 4113, 5815, 5817, 3235, 5814, 4125, 5848, 3254, 5850, 5851, 
          4134, 5883, 3273, 5901, 4140, 5884, 3289}], 
         Line[{3274, 5818, 4126, 5864, 3257, 5826, 4116, 5780, 5778, 3237, 
          5791, 4104, 5737, 3219, 5702, 5701, 4088, 5747, 3203, 5685, 5684, 
          4078, 5711, 3185, 5689, 4073, 5687, 3169}], 
         Line[{3276, 3262, 5863, 5861, 3259, 5823, 5822, 4119, 5837, 3239, 
          5788, 5787, 4107, 3221, 5762, 4095, 5746, 5744, 3205, 3190, 5710, 
          5709, 5707, 3187, 5692, 5691, 4074, 3171}], 
         Line[{3280, 5874, 4132, 5885, 3263, 5853, 4124, 5836, 5834, 3244, 
          5803, 5802, 4111, 3226, 5734, 4100, 5758, 5756, 3208, 5721, 5720, 
          4085, 5681, 3192, 5699, 4077, 5697, 3174}], 
         Line[{3282, 4136, 5891, 5888, 3265, 5858, 5856, 5855, 3256, 3246, 
          4118, 5821, 5819, 3228, 5784, 5782, 5781, 3218, 3210, 4092, 5743, 
          5741, 5738, 3194, 5705, 5704, 3184, 3176}], 
         Line[{3285, 5895, 5894, 3279, 3269, 4131, 5873, 5872, 5870, 3250, 
          4122, 5833, 5831, 3231, 5799, 5797, 5796, 3225, 3213, 5754, 5753, 
          4096, 5765, 3198, 4084, 5719, 5717, 3179}], 
         Line[{3288, 4141, 5902, 5900, 3272, 5882, 5881, 4133, 5849, 3253, 
          5847, 5846, 3249, 3234, 5816, 4114, 5813, 5811, 3216, 5776, 4102, 
          5773, 5771, 3201, 5731, 5730, 3197, 3182}], 
         Line[{3293, 3290, 5910, 5912, 3309, 5934, 5935, 4148, 5908, 3327, 
          5970, 5971, 4158, 5925, 3343, 4172, 6012, 6014, 3361, 6001, 4184, 
          6047, 6049, 3381, 6087, 6088, 3378, 3398}], 
         Line[{3296, 5917, 5918, 3291, 3312, 4151, 5945, 5946, 5948, 3330, 
          4162, 5981, 5983, 5986, 3346, 6028, 6029, 3347, 3364, 6061, 6063, 
          6064, 3365, 3384, 4198, 6097, 6099, 3401}], 
         Line[{3298, 4145, 5920, 5922, 3316, 5904, 5905, 4155, 5944, 3332, 
          5979, 4168, 5955, 5957, 3350, 5996, 4181, 6026, 3368, 6057, 4192, 
          6074, 6076, 3387, 6108, 6109, 3391, 3404}], 
         Line[{3301, 5937, 5938, 4150, 3319, 5962, 4159, 5972, 5974, 3335, 
          6016, 6017, 4175, 6008, 3353, 3359, 6050, 6052, 3371, 6090, 6091, 
          4197, 6082, 3390, 6112, 4204, 6115, 3407}], 
         Line[{3304, 3314, 5949, 5951, 3323, 5989, 5991, 5992, 4167, 3338, 
          6031, 6032, 4179, 6023, 3356, 3366, 6065, 6067, 3375, 2022, 6100, 
          6102, 3394, 6120, 6121, 4208, 3410}], 
         Line[{3306, 5958, 4156, 5954, 3325, 5994, 4170, 5997, 5999, 3340, 
          6034, 4182, 6037, 6039, 3358, 6036, 4194, 6070, 3377, 6072, 6073, 
          4203, 6105, 3396, 6123, 4209, 6106, 3412}], 
         Line[{3397, 6040, 4195, 6086, 3380, 6048, 4185, 6002, 6000, 3360, 
          6013, 4173, 5959, 3342, 5924, 5923, 4157, 5969, 3326, 5907, 5906, 
          4147, 5933, 3308, 5911, 4142, 5909, 3292}], 
         Line[{3399, 3385, 6085, 6083, 3382, 6045, 6044, 4188, 6059, 3362, 
          6010, 6009, 4176, 3344, 5984, 4164, 5968, 5966, 3328, 3313, 5932, 
          5931, 5929, 3310, 5914, 5913, 4143, 3294}], 
         Line[{3403, 6096, 4201, 6107, 3386, 6075, 4193, 6058, 6056, 3367, 
          6025, 6024, 4180, 3349, 5956, 4169, 5980, 5978, 3331, 5943, 5942, 
          4154, 5903, 3315, 5921, 4146, 5919, 3297}], 
         Line[{3405, 4205, 6113, 6110, 3388, 6080, 6078, 6077, 3379, 3369, 
          4187, 6043, 6041, 3351, 6006, 6004, 6003, 3341, 3333, 4161, 5965, 
          5963, 5960, 3317, 5927, 5926, 3307, 3299}], 
         Line[{3408, 6117, 6116, 3402, 3392, 4200, 6095, 6094, 6092, 3373, 
          4191, 6055, 6053, 3354, 6021, 6019, 6018, 3348, 3336, 5976, 5975, 
          4165, 5987, 3321, 4153, 5941, 5939, 3302}], 
         Line[{3411, 4210, 6124, 6122, 3395, 6104, 6103, 4202, 6071, 3376, 
          6069, 6068, 3372, 3357, 6038, 4183, 6035, 6033, 3339, 5998, 4171, 
          5995, 5993, 3324, 5953, 5952, 3320, 3305}], 
         Line[{3416, 3413, 6132, 6134, 3432, 6156, 6157, 4217, 6130, 3450, 
          6198, 6199, 4227, 6147, 3466, 4243, 6240, 6242, 3484, 6267, 4253, 
          6263, 6265, 3504, 6309, 6310, 3501, 3521}], 
         Line[{3419, 6139, 6140, 3414, 3435, 4220, 6167, 6168, 6170, 3453, 
          4231, 6209, 6211, 6214, 3469, 6254, 6255, 3470, 3487, 6274, 6276, 
          6277, 3488, 3507, 4267, 6319, 6321, 3524}], 
         Line[{3421, 4214, 6142, 6144, 3439, 6126, 6127, 4224, 6166, 3455, 
          6207, 4237, 6178, 6182, 3473, 6230, 4250, 6226, 3490, 6288, 4261, 
          6296, 6298, 3510, 6330, 6331, 3514, 3527}], 
         Line[{3424, 6159, 6160, 4219, 3442, 6190, 4228, 6200, 6202, 3458, 
          6235, 6236, 4242, 6185, 3476, 3482, 6269, 6271, 3494, 6312, 6313, 
          4266, 6304, 3513, 6334, 4273, 6337, 3530}], 
         Line[{3427, 3437, 6171, 6173, 3446, 6217, 6219, 6220, 4236, 3461, 
          6250, 6251, 4248, 6248, 3479, 3491, 6284, 6286, 3497, 2212, 6322, 
          6324, 3517, 6342, 6343, 4277, 3533}], 
         Line[{3429, 6186, 4225, 6176, 3448, 6222, 4239, 6227, 6229, 3464, 
          6257, 4251, 6259, 6261, 3481, 6252, 4263, 6292, 3500, 6294, 6295, 
          4272, 6327, 3519, 6345, 4278, 6328, 3535}], 
         Line[{3520, 6262, 4264, 6308, 3503, 6264, 4254, 6268, 6266, 3483, 
          6241, 4244, 6187, 3465, 6146, 6145, 4226, 6197, 3449, 6129, 6128, 
          4216, 6155, 3431, 6133, 4211, 6131, 3415}], 
         Line[{3522, 3508, 6307, 6305, 3505, 6279, 6278, 4257, 6272, 3485, 
          6238, 6237, 4245, 3467, 6212, 4233, 6196, 6194, 3451, 3436, 6154, 
          6153, 6151, 3433, 6136, 6135, 4212, 3417}], 
         Line[{3526, 6318, 4270, 6329, 3509, 6297, 4262, 6289, 6287, 3489, 
          6225, 6224, 4249, 3472, 6181, 4238, 6208, 6206, 3454, 6165, 6164, 
          4223, 6125, 3438, 6143, 4215, 6141, 3420}], 
         Line[{3528, 4274, 6335, 6332, 3511, 6302, 6300, 6299, 3502, 3492, 
          4256, 6233, 6231, 3474, 6183, 6179, 6177, 3462, 3456, 4230, 6193, 
          6191, 6188, 3440, 6149, 6148, 3430, 3422}], 
         Line[{3531, 6339, 6338, 3525, 3515, 4269, 6317, 6316, 6314, 3495, 
          4260, 6283, 6281, 3477, 6246, 6244, 6243, 3471, 3459, 6204, 6203, 
          4234, 6215, 3444, 4222, 6163, 6161, 3425}], 
         Line[{3534, 4279, 6346, 6344, 3518, 6326, 6325, 4271, 6293, 3499, 
          6291, 6290, 3498, 3480, 6260, 4252, 6258, 6256, 3463, 6228, 4240, 
          6223, 6221, 3447, 6175, 6174, 3443, 3428}], 
         Line[{3539, 3536, 6354, 6356, 3555, 6378, 6379, 4286, 6352, 3573, 
          6420, 6421, 4296, 6369, 3589, 4312, 6462, 6464, 3607, 6489, 4322, 
          6485, 6487, 3627, 6531, 6532, 3624, 3644}], 
         Line[{3542, 6361, 6362, 3537, 3558, 4289, 6389, 6390, 6392, 3576, 
          4300, 6431, 6433, 6436, 3592, 6476, 6477, 3593, 3610, 6496, 6498, 
          6499, 3611, 3630, 4336, 6541, 6543, 3647}], 
         Line[{3544, 4283, 6364, 6366, 3562, 6348, 6349, 4293, 6388, 3578, 
          6429, 4306, 6400, 6404, 3596, 6452, 4319, 6448, 3613, 6510, 4330, 
          6518, 6520, 3633, 6552, 6553, 3637, 3650}], 
         Line[{3547, 6381, 6382, 4288, 3565, 6412, 4297, 6422, 6424, 3581, 
          6457, 6458, 4311, 6407, 3599, 3605, 6491, 6493, 3617, 6534, 6535, 
          4335, 6526, 3636, 6556, 4342, 6559, 3653}], 
         Line[{3550, 3560, 6393, 6395, 3569, 6439, 6441, 6442, 4305, 3584, 
          6472, 6473, 4317, 6470, 3602, 3614, 6506, 6508, 3620, 2402, 6544, 
          6546, 3640, 6564, 6565, 4346, 3656}], 
         Line[{3552, 6408, 4294, 6398, 3571, 6444, 4308, 6449, 6451, 3587, 
          6479, 4320, 6481, 6483, 3604, 6474, 4332, 6514, 3623, 6516, 6517, 
          4341, 6549, 3642, 6567, 4347, 6550, 3658}], 
         Line[{3643, 6484, 4333, 6530, 3626, 6486, 4323, 6490, 6488, 3606, 
          6463, 4313, 6409, 3588, 6368, 6367, 4295, 6419, 3572, 6351, 6350, 
          4285, 6377, 3554, 6355, 4280, 6353, 3538}], 
         Line[{3645, 3631, 6529, 6527, 3628, 6501, 6500, 4326, 6494, 3608, 
          6460, 6459, 4314, 3590, 6434, 4302, 6418, 6416, 3574, 3559, 6376, 
          6375, 6373, 3556, 6358, 6357, 4281, 3540}], 
         Line[{3649, 6540, 4339, 6551, 3632, 6519, 4331, 6511, 6509, 3612, 
          6447, 6446, 4318, 3595, 6403, 4307, 6430, 6428, 3577, 6387, 6386, 
          4292, 6347, 3561, 6365, 4284, 6363, 3543}], 
         Line[{3651, 4343, 6557, 6554, 3634, 6524, 6522, 6521, 3625, 3615, 
          4325, 6455, 6453, 3597, 6405, 6401, 6399, 3585, 3579, 4299, 6415, 
          6413, 6410, 3563, 6371, 6370, 3553, 3545}], 
         Line[{3654, 6561, 6560, 3648, 3638, 4338, 6539, 6538, 6536, 3618, 
          4329, 6505, 6503, 3600, 6468, 6466, 6465, 3594, 3582, 6426, 6425, 
          4303, 6437, 3567, 4291, 6385, 6383, 3548}], 
         Line[{3657, 4348, 6568, 6566, 3641, 6548, 6547, 4340, 6515, 3622, 
          6513, 6512, 3621, 3603, 6482, 4321, 6480, 6478, 3586, 6450, 4309, 
          6445, 6443, 3570, 6397, 6396, 3566, 3551}], 
         Line[{2434, 4362, 3661, 4361, 2450, 4376, 517, 4393, 2468, 4413, 
          3680, 4428, 4431, 2484, 4473, 3694, 4457, 2502, 4506, 4508, 3706, 
          4492, 2522, 4530, 3716, 4544, 2539}], 
         Line[{2439, 4382, 3666, 4374, 2457, 4407, 4410, 3677, 4419, 2473, 
          4461, 3691, 4451, 4453, 2491, 4488, 3703, 4497, 2509, 4535, 3713, 
          4525, 4527, 2528, 4557, 4560, 3723, 2545}], 
         Line[{2442, 4386, 3669, 4396, 2461, 4434, 4436, 3683, 4423, 2476, 
          4476, 3695, 4466, 4468, 2494, 4500, 3707, 4512, 2513, 4539, 658, 
          4547, 2532, 4565, 3724, 4564, 2548}], 
         Line[{2557, 4584, 3730, 4583, 2573, 4598, 712, 4615, 2591, 4635, 
          3749, 4650, 4653, 2607, 4695, 3763, 4679, 2625, 4728, 4730, 3775, 
          4714, 2645, 4752, 3785, 4766, 2662}], 
         Line[{2562, 4604, 3735, 4596, 2580, 4629, 4632, 3746, 4641, 2596, 
          4683, 3760, 4673, 4675, 2614, 4710, 3772, 4719, 2632, 4757, 3782, 
          4747, 4749, 2651, 4779, 4782, 3792, 2668}], 
         Line[{2565, 4608, 3738, 4618, 2584, 4656, 4658, 3752, 4645, 2599, 
          4698, 3764, 4688, 4690, 2617, 4722, 3776, 4734, 2636, 4761, 853, 
          4769, 2655, 4787, 3793, 4786, 2671}], 
         Line[{2680, 4806, 3799, 4805, 2696, 4820, 907, 4837, 2714, 4857, 
          3818, 4872, 4875, 2730, 4917, 3832, 4901, 2748, 4950, 4952, 3844, 
          4936, 2768, 4974, 3854, 4988, 2785}], 
         Line[{2685, 4826, 3804, 4818, 2703, 4851, 4854, 3815, 4863, 2719, 
          4905, 3829, 4895, 4897, 2737, 4932, 3841, 4941, 2755, 4979, 3851, 
          4969, 4971, 2774, 5001, 5004, 3861, 2791}], 
         Line[{2688, 4830, 3807, 4840, 2707, 4878, 4880, 3821, 4867, 2722, 
          4920, 3833, 4910, 4912, 2740, 4944, 3845, 4956, 2759, 4983, 1048, 
          4991, 2778, 5009, 3862, 5008, 2794}], 
         Line[{2803, 5028, 3868, 5027, 2819, 5042, 1102, 5059, 2837, 5079, 
          3887, 5094, 5097, 2853, 5139, 3901, 5123, 2871, 5172, 5174, 3913, 
          5158, 2891, 5196, 3923, 5210, 2908}], 
         Line[{2808, 5048, 3873, 5040, 2826, 5073, 5076, 3884, 5085, 2842, 
          5127, 3898, 5117, 5119, 2860, 5154, 3910, 5163, 2878, 5201, 3920, 
          5191, 5193, 2897, 5223, 5226, 3930, 2914}], 
         Line[{2811, 5052, 3876, 5062, 2830, 5100, 5102, 3890, 5089, 2845, 
          5142, 3902, 5132, 5134, 2863, 5166, 3914, 5178, 2882, 5205, 1243, 
          5213, 2901, 5231, 3931, 5230, 2917}], 
         Line[{2926, 5250, 3937, 5249, 2942, 5264, 1297, 5281, 2960, 5301, 
          3956, 5316, 5319, 2976, 5361, 3970, 5345, 2994, 5394, 5396, 3982, 
          5380, 3014, 5418, 3992, 5432, 3031}], 
         Line[{2931, 5270, 3942, 5262, 2949, 5295, 5298, 3953, 5307, 2965, 
          5349, 3967, 5339, 5341, 2983, 5376, 3979, 5385, 3001, 5423, 3989, 
          5413, 5415, 3020, 5445, 5448, 3999, 3037}], 
         Line[{2934, 5274, 3945, 5284, 2953, 5322, 5324, 3959, 5311, 2968, 
          5364, 3971, 5354, 5356, 2986, 5388, 3983, 5400, 3005, 5427, 1438, 
          5435, 3024, 5453, 4000, 5452, 3040}], 
         Line[{3049, 5472, 4006, 5471, 3065, 5486, 1492, 5503, 3083, 5523, 
          4025, 5538, 5541, 3099, 5583, 4039, 5567, 3117, 5616, 5618, 4051, 
          5602, 3137, 5640, 4061, 5654, 3154}], 
         Line[{3054, 5492, 4011, 5484, 3072, 5517, 5520, 4022, 5529, 3088, 
          5571, 4036, 5561, 5563, 3106, 5598, 4048, 5607, 3124, 5645, 4058, 
          5635, 5637, 3143, 5667, 5670, 4068, 3160}], 
         Line[{3057, 5496, 4014, 5506, 3076, 5544, 5546, 4028, 5533, 3091, 
          5586, 4040, 5576, 5578, 3109, 5610, 4052, 5622, 3128, 5649, 1633, 
          5657, 3147, 5675, 4069, 5674, 3163}], 
         Line[{3172, 5694, 4075, 5693, 3188, 5708, 1687, 5725, 3206, 5745, 
          4094, 5760, 5763, 3222, 5805, 4108, 5789, 3240, 5838, 5840, 4120, 
          5824, 3260, 5862, 4130, 5876, 3277}], 
         Line[{3177, 5714, 4080, 5706, 3195, 5739, 5742, 4091, 5751, 3211, 
          5793, 4105, 5783, 5785, 3229, 5820, 4117, 5829, 3247, 5867, 4127, 
          5857, 5859, 3266, 5889, 5892, 4137, 3283}], 
         Line[{3180, 5718, 4083, 5728, 3199, 5766, 5768, 4097, 5755, 3214, 
          5808, 4109, 5798, 5800, 3232, 5832, 4121, 5844, 3251, 5871, 1828, 
          5879, 3270, 5897, 4138, 5896, 3286}], 
         Line[{3295, 5916, 4144, 5915, 3311, 5930, 1882, 5947, 3329, 5967, 
          4163, 5982, 5985, 3345, 6027, 4177, 6011, 3363, 6060, 6062, 4189, 
          6046, 3383, 6084, 4199, 6098, 3400}], 
         Line[{3300, 5936, 4149, 5928, 3318, 5961, 5964, 4160, 5973, 3334, 
          6015, 4174, 6005, 6007, 3352, 6042, 4186, 6051, 3370, 6089, 4196, 
          6079, 6081, 3389, 6111, 6114, 4206, 3406}], 
         Line[{3303, 5940, 4152, 5950, 3322, 5988, 5990, 4166, 5977, 3337, 
          6030, 4178, 6020, 6022, 3355, 6054, 4190, 6066, 3374, 6093, 2023, 
          6101, 3393, 6119, 4207, 6118, 3409}], 
         Line[{3418, 6138, 4213, 6137, 3434, 6152, 2077, 6169, 3452, 6195, 
          4232, 6210, 6213, 3468, 6253, 4246, 6239, 3486, 6273, 6275, 4258, 
          6280, 3506, 6306, 4268, 6320, 3523}], 
         Line[{3423, 6158, 4218, 6150, 3441, 6189, 6192, 4229, 6201, 3457, 
          6234, 4241, 6180, 6184, 3475, 6232, 4255, 6270, 3493, 6311, 4265, 
          6301, 6303, 3512, 6333, 6336, 4275, 3529}], 
         Line[{3426, 6162, 4221, 6172, 3445, 6216, 6218, 4235, 6205, 3460, 
          6249, 4247, 6245, 6247, 3478, 6282, 4259, 6285, 3496, 6315, 2213, 
          6323, 3516, 6341, 4276, 6340, 3532}], 
         Line[{3541, 6360, 4282, 6359, 3557, 6374, 2267, 6391, 3575, 6417, 
          4301, 6432, 6435, 3591, 6475, 4315, 6461, 3609, 6495, 6497, 4327, 
          6502, 3629, 6528, 4337, 6542, 3646}], 
         Line[{3546, 6380, 4287, 6372, 3564, 6411, 6414, 4298, 6423, 3580, 
          6456, 4310, 6402, 6406, 3598, 6454, 4324, 6492, 3616, 6533, 4334, 
          6523, 6525, 3635, 6555, 6558, 4344, 3652}], 
         Line[{3549, 6384, 4290, 6394, 3568, 6438, 6440, 4304, 6427, 3583, 
          6471, 4316, 6467, 6469, 3601, 6504, 4328, 6507, 3619, 6537, 2403, 
          6545, 3639, 6563, 4345, 6562, 3655}]}, {
         Line[{497, 669, 4551, 4550, 666, 4548, 4547, 659, 4541, 656, 649, 
          4528, 4527, 4526, 639, 4522, 4521, 632, 629, 4510, 622, 4492, 4491, 
          619, 4495, 4494, 612, 646}], 
         Line[{505, 636, 4516, 4515, 634, 4513, 4512, 626, 4501, 624, 4498, 
          4497, 616, 4489, 606, 598, 4472, 4471, 596, 4475, 588, 4457, 4456, 
          586, 4460, 4459, 578, 614}], 
         Line[{509, 4355, 489, 4356, 493, 4359, 491, 4362, 4363, 498, 4365, 
          500, 4366, 502, 4372, 511, 4382, 4383, 519, 4385, 4386, 521, 4395, 
          529, 4398, 531, 4404, 536}], 
         Line[{537, 532, 4400, 4399, 530, 4397, 4396, 522, 4387, 520, 4384, 
          512, 4374, 4373, 503, 4368, 4367, 501, 499, 4364, 492, 4361, 4360, 
          494, 4358, 4357, 490, 510}], 
         Line[{541, 506, 4379, 4380, 513, 4375, 4376, 516, 4391, 523, 526, 
          4349, 4350, 533, 4406, 4407, 4408, 544, 553, 556, 4433, 4434, 4435, 
          565, 4439, 4440, 568, 574}], 
         Line[{576, 4445, 4444, 570, 567, 4438, 558, 4423, 4422, 555, 4420, 
          4419, 546, 4411, 535, 528, 4390, 4389, 525, 4394, 4393, 518, 4378, 
          515, 508, 4354, 4353, 543}], 
         Line[{579, 538, 4415, 4416, 547, 4412, 4413, 550, 4427, 559, 4424, 
          4425, 562, 571, 4449, 582, 4461, 4462, 589, 4464, 592, 4476, 4477, 
          599, 4479, 4480, 602, 607}], 
         Line[{609, 4485, 4484, 604, 601, 594, 4469, 4468, 4467, 591, 584, 
          4454, 4453, 4452, 573, 4403, 4402, 564, 561, 4432, 4431, 4430, 552, 
          549, 540, 4371, 4370, 581}], 
         Line[{613, 4405, 577, 4458, 585, 4455, 587, 4473, 4474, 595, 4470, 
          597, 4442, 605, 4487, 4488, 615, 4496, 623, 4499, 4500, 625, 4511, 
          633, 4514, 635, 4482, 504}], 
         Line[{641, 4552, 683, 4570, 681, 4567, 679, 4564, 4563, 677, 4561, 
          675, 4560, 4559, 671, 4555, 663, 4542, 661, 4545, 4544, 653, 4531, 
          651, 4534, 643, 4486, 673}], 
         Line[{644, 4446, 4447, 610, 617, 620, 4505, 4506, 4507, 627, 4502, 
          4503, 630, 637, 4523, 647, 4535, 4536, 654, 4538, 4539, 657, 664, 
          667, 4517, 4518, 495}], 
         Line[{672, 642, 4532, 4533, 650, 4529, 4530, 652, 4543, 660, 662, 
          4553, 4554, 670, 4556, 4557, 4558, 674, 676, 4562, 678, 4565, 4566, 
          680, 4568, 4569, 682, 640}], 
         Line[{692, 864, 4773, 4772, 861, 4770, 4769, 854, 4763, 851, 844, 
          4750, 4749, 4748, 834, 4744, 4743, 827, 824, 4732, 817, 4714, 4713, 
          814, 4717, 4716, 807, 841}], 
         Line[{700, 831, 4738, 4737, 829, 4735, 4734, 821, 4723, 819, 4720, 
          4719, 811, 4711, 801, 793, 4694, 4693, 791, 4697, 783, 4679, 4678, 
          781, 4682, 4681, 773, 809}], 
         Line[{704, 4577, 684, 4578, 688, 4581, 686, 4584, 4585, 693, 4587, 
          695, 4588, 697, 4594, 706, 4604, 4605, 714, 4607, 4608, 716, 4617, 
          724, 4620, 726, 4626, 731}], 
         Line[{732, 727, 4622, 4621, 725, 4619, 4618, 717, 4609, 715, 4606, 
          707, 4596, 4595, 698, 4590, 4589, 696, 694, 4586, 687, 4583, 4582, 
          689, 4580, 4579, 685, 705}], 
         Line[{736, 701, 4601, 4602, 708, 4597, 4598, 711, 4613, 718, 721, 
          4571, 4572, 728, 4628, 4629, 4630, 739, 748, 751, 4655, 4656, 4657, 
          760, 4661, 4662, 763, 769}], 
         Line[{771, 4667, 4666, 765, 762, 4660, 753, 4645, 4644, 750, 4642, 
          4641, 741, 4633, 730, 723, 4612, 4611, 720, 4616, 4615, 713, 4600, 
          710, 703, 4576, 4575, 738}], 
         Line[{774, 733, 4637, 4638, 742, 4634, 4635, 745, 4649, 754, 4646, 
          4647, 757, 766, 4671, 777, 4683, 4684, 784, 4686, 787, 4698, 4699, 
          794, 4701, 4702, 797, 802}], 
         Line[{804, 4707, 4706, 799, 796, 789, 4691, 4690, 4689, 786, 779, 
          4676, 4675, 4674, 768, 4625, 4624, 759, 756, 4654, 4653, 4652, 747, 
          744, 735, 4593, 4592, 776}], 
         Line[{808, 4627, 772, 4680, 780, 4677, 782, 4695, 4696, 790, 4692, 
          792, 4664, 800, 4709, 4710, 810, 4718, 818, 4721, 4722, 820, 4733, 
          828, 4736, 830, 4704, 699}], 
         Line[{836, 4774, 878, 4792, 876, 4789, 874, 4786, 4785, 872, 4783, 
          870, 4782, 4781, 866, 4777, 858, 4764, 856, 4767, 4766, 848, 4753, 
          846, 4756, 838, 4708, 868}], 
         Line[{839, 4668, 4669, 805, 812, 815, 4727, 4728, 4729, 822, 4724, 
          4725, 825, 832, 4745, 842, 4757, 4758, 849, 4760, 4761, 852, 859, 
          862, 4739, 4740, 690}], 
         Line[{867, 837, 4754, 4755, 845, 4751, 4752, 847, 4765, 855, 857, 
          4775, 4776, 865, 4778, 4779, 4780, 869, 871, 4784, 873, 4787, 4788, 
          875, 4790, 4791, 877, 835}], 
         Line[{887, 1059, 4995, 4994, 1056, 4992, 4991, 1049, 4985, 1046, 
          1039, 4972, 4971, 4970, 1029, 4966, 4965, 1022, 1019, 4954, 1012, 
          4936, 4935, 1009, 4939, 4938, 1002, 1036}], 
         Line[{895, 1026, 4960, 4959, 1024, 4957, 4956, 1016, 4945, 1014, 
          4942, 4941, 1006, 4933, 996, 988, 4916, 4915, 986, 4919, 978, 4901, 
          4900, 976, 4904, 4903, 968, 1004}], 
         Line[{899, 4799, 879, 4800, 883, 4803, 881, 4806, 4807, 888, 4809, 
          890, 4810, 892, 4816, 901, 4826, 4827, 909, 4829, 4830, 911, 4839, 
          919, 4842, 921, 4848, 926}], 
         Line[{927, 922, 4844, 4843, 920, 4841, 4840, 912, 4831, 910, 4828, 
          902, 4818, 4817, 893, 4812, 4811, 891, 889, 4808, 882, 4805, 4804, 
          884, 4802, 4801, 880, 900}], 
         Line[{931, 896, 4823, 4824, 903, 4819, 4820, 906, 4835, 913, 916, 
          4793, 4794, 923, 4850, 4851, 4852, 934, 943, 946, 4877, 4878, 4879, 
          955, 4883, 4884, 958, 964}], 
         Line[{966, 4889, 4888, 960, 957, 4882, 948, 4867, 4866, 945, 4864, 
          4863, 936, 4855, 925, 918, 4834, 4833, 915, 4838, 4837, 908, 4822, 
          905, 898, 4798, 4797, 933}], 
         Line[{969, 928, 4859, 4860, 937, 4856, 4857, 940, 4871, 949, 4868, 
          4869, 952, 961, 4893, 972, 4905, 4906, 979, 4908, 982, 4920, 4921, 
          989, 4923, 4924, 992, 997}], 
         Line[{999, 4929, 4928, 994, 991, 984, 4913, 4912, 4911, 981, 974, 
          4898, 4897, 4896, 963, 4847, 4846, 954, 951, 4876, 4875, 4874, 942, 
          939, 930, 4815, 4814, 971}], 
         Line[{1003, 4849, 967, 4902, 975, 4899, 977, 4917, 4918, 985, 4914, 
          987, 4886, 995, 4931, 4932, 1005, 4940, 1013, 4943, 4944, 1015, 
          4955, 1023, 4958, 1025, 4926, 894}], 
         Line[{1031, 4996, 1073, 5014, 1071, 5011, 1069, 5008, 5007, 1067, 
          5005, 1065, 5004, 5003, 1061, 4999, 1053, 4986, 1051, 4989, 4988, 
          1043, 4975, 1041, 4978, 1033, 4930, 1063}], 
         Line[{1034, 4890, 4891, 1000, 1007, 1010, 4949, 4950, 4951, 1017, 
          4946, 4947, 1020, 1027, 4967, 1037, 4979, 4980, 1044, 4982, 4983, 
          1047, 1054, 1057, 4961, 4962, 885}], 
         Line[{1062, 1032, 4976, 4977, 1040, 4973, 4974, 1042, 4987, 1050, 
          1052, 4997, 4998, 1060, 5000, 5001, 5002, 1064, 1066, 5006, 1068, 
          5009, 5010, 1070, 5012, 5013, 1072, 1030}], 
         Line[{1082, 1254, 5217, 5216, 1251, 5214, 5213, 1244, 5207, 1241, 
          1234, 5194, 5193, 5192, 1224, 5188, 5187, 1217, 1214, 5176, 1207, 
          5158, 5157, 1204, 5161, 5160, 1197, 1231}], 
         Line[{1090, 1221, 5182, 5181, 1219, 5179, 5178, 1211, 5167, 1209, 
          5164, 5163, 1201, 5155, 1191, 1183, 5138, 5137, 1181, 5141, 1173, 
          5123, 5122, 1171, 5126, 5125, 1163, 1199}], 
         Line[{1094, 5021, 1074, 5022, 1078, 5025, 1076, 5028, 5029, 1083, 
          5031, 1085, 5032, 1087, 5038, 1096, 5048, 5049, 1104, 5051, 5052, 
          1106, 5061, 1114, 5064, 1116, 5070, 1121}], 
         Line[{1122, 1117, 5066, 5065, 1115, 5063, 5062, 1107, 5053, 1105, 
          5050, 1097, 5040, 5039, 1088, 5034, 5033, 1086, 1084, 5030, 1077, 
          5027, 5026, 1079, 5024, 5023, 1075, 1095}], 
         Line[{1126, 1091, 5045, 5046, 1098, 5041, 5042, 1101, 5057, 1108, 
          1111, 5015, 5016, 1118, 5072, 5073, 5074, 1129, 1138, 1141, 5099, 
          5100, 5101, 1150, 5105, 5106, 1153, 1159}], 
         Line[{1161, 5111, 5110, 1155, 1152, 5104, 1143, 5089, 5088, 1140, 
          5086, 5085, 1131, 5077, 1120, 1113, 5056, 5055, 1110, 5060, 5059, 
          1103, 5044, 1100, 1093, 5020, 5019, 1128}], 
         Line[{1164, 1123, 5081, 5082, 1132, 5078, 5079, 1135, 5093, 1144, 
          5090, 5091, 1147, 1156, 5115, 1167, 5127, 5128, 1174, 5130, 1177, 
          5142, 5143, 1184, 5145, 5146, 1187, 1192}], 
         Line[{1194, 5151, 5150, 1189, 1186, 1179, 5135, 5134, 5133, 1176, 
          1169, 5120, 5119, 5118, 1158, 5069, 5068, 1149, 1146, 5098, 5097, 
          5096, 1137, 1134, 1125, 5037, 5036, 1166}], 
         Line[{1198, 5071, 1162, 5124, 1170, 5121, 1172, 5139, 5140, 1180, 
          5136, 1182, 5108, 1190, 5153, 5154, 1200, 5162, 1208, 5165, 5166, 
          1210, 5177, 1218, 5180, 1220, 5148, 1089}], 
         Line[{1226, 5218, 1268, 5236, 1266, 5233, 1264, 5230, 5229, 1262, 
          5227, 1260, 5226, 5225, 1256, 5221, 1248, 5208, 1246, 5211, 5210, 
          1238, 5197, 1236, 5200, 1228, 5152, 1258}], 
         Line[{1229, 5112, 5113, 1195, 1202, 1205, 5171, 5172, 5173, 1212, 
          5168, 5169, 1215, 1222, 5189, 1232, 5201, 5202, 1239, 5204, 5205, 
          1242, 1249, 1252, 5183, 5184, 1080}], 
         Line[{1257, 1227, 5198, 5199, 1235, 5195, 5196, 1237, 5209, 1245, 
          1247, 5219, 5220, 1255, 5222, 5223, 5224, 1259, 1261, 5228, 1263, 
          5231, 5232, 1265, 5234, 5235, 1267, 1225}], 
         Line[{1277, 1449, 5439, 5438, 1446, 5436, 5435, 1439, 5429, 1436, 
          1429, 5416, 5415, 5414, 1419, 5410, 5409, 1412, 1409, 5398, 1402, 
          5380, 5379, 1399, 5383, 5382, 1392, 1426}], 
         Line[{1285, 1416, 5404, 5403, 1414, 5401, 5400, 1406, 5389, 1404, 
          5386, 5385, 1396, 5377, 1386, 1378, 5360, 5359, 1376, 5363, 1368, 
          5345, 5344, 1366, 5348, 5347, 1358, 1394}], 
         Line[{1289, 5243, 1269, 5244, 1273, 5247, 1271, 5250, 5251, 1278, 
          5253, 1280, 5254, 1282, 5260, 1291, 5270, 5271, 1299, 5273, 5274, 
          1301, 5283, 1309, 5286, 1311, 5292, 1316}], 
         Line[{1317, 1312, 5288, 5287, 1310, 5285, 5284, 1302, 5275, 1300, 
          5272, 1292, 5262, 5261, 1283, 5256, 5255, 1281, 1279, 5252, 1272, 
          5249, 5248, 1274, 5246, 5245, 1270, 1290}], 
         Line[{1321, 1286, 5267, 5268, 1293, 5263, 5264, 1296, 5279, 1303, 
          1306, 5237, 5238, 1313, 5294, 5295, 5296, 1324, 1333, 1336, 5321, 
          5322, 5323, 1345, 5327, 5328, 1348, 1354}], 
         Line[{1356, 5333, 5332, 1350, 1347, 5326, 1338, 5311, 5310, 1335, 
          5308, 5307, 1326, 5299, 1315, 1308, 5278, 5277, 1305, 5282, 5281, 
          1298, 5266, 1295, 1288, 5242, 5241, 1323}], 
         Line[{1359, 1318, 5303, 5304, 1327, 5300, 5301, 1330, 5315, 1339, 
          5312, 5313, 1342, 1351, 5337, 1362, 5349, 5350, 1369, 5352, 1372, 
          5364, 5365, 1379, 5367, 5368, 1382, 1387}], 
         Line[{1389, 5373, 5372, 1384, 1381, 1374, 5357, 5356, 5355, 1371, 
          1364, 5342, 5341, 5340, 1353, 5291, 5290, 1344, 1341, 5320, 5319, 
          5318, 1332, 1329, 1320, 5259, 5258, 1361}], 
         Line[{1393, 5293, 1357, 5346, 1365, 5343, 1367, 5361, 5362, 1375, 
          5358, 1377, 5330, 1385, 5375, 5376, 1395, 5384, 1403, 5387, 5388, 
          1405, 5399, 1413, 5402, 1415, 5370, 1284}], 
         Line[{1421, 5440, 1463, 5458, 1461, 5455, 1459, 5452, 5451, 1457, 
          5449, 1455, 5448, 5447, 1451, 5443, 1443, 5430, 1441, 5433, 5432, 
          1433, 5419, 1431, 5422, 1423, 5374, 1453}], 
         Line[{1424, 5334, 5335, 1390, 1397, 1400, 5393, 5394, 5395, 1407, 
          5390, 5391, 1410, 1417, 5411, 1427, 5423, 5424, 1434, 5426, 5427, 
          1437, 1444, 1447, 5405, 5406, 1275}], 
         Line[{1452, 1422, 5420, 5421, 1430, 5417, 5418, 1432, 5431, 1440, 
          1442, 5441, 5442, 1450, 5444, 5445, 5446, 1454, 1456, 5450, 1458, 
          5453, 5454, 1460, 5456, 5457, 1462, 1420}], 
         Line[{1472, 1644, 5661, 5660, 1641, 5658, 5657, 1634, 5651, 1631, 
          1624, 5638, 5637, 5636, 1614, 5632, 5631, 1607, 1604, 5620, 1597, 
          5602, 5601, 1594, 5605, 5604, 1587, 1621}], 
         Line[{1480, 1611, 5626, 5625, 1609, 5623, 5622, 1601, 5611, 1599, 
          5608, 5607, 1591, 5599, 1581, 1573, 5582, 5581, 1571, 5585, 1563, 
          5567, 5566, 1561, 5570, 5569, 1553, 1589}], 
         Line[{1484, 5465, 1464, 5466, 1468, 5469, 1466, 5472, 5473, 1473, 
          5475, 1475, 5476, 1477, 5482, 1486, 5492, 5493, 1494, 5495, 5496, 
          1496, 5505, 1504, 5508, 1506, 5514, 1511}], 
         Line[{1512, 1507, 5510, 5509, 1505, 5507, 5506, 1497, 5497, 1495, 
          5494, 1487, 5484, 5483, 1478, 5478, 5477, 1476, 1474, 5474, 1467, 
          5471, 5470, 1469, 5468, 5467, 1465, 1485}], 
         Line[{1516, 1481, 5489, 5490, 1488, 5485, 5486, 1491, 5501, 1498, 
          1501, 5459, 5460, 1508, 5516, 5517, 5518, 1519, 1528, 1531, 5543, 
          5544, 5545, 1540, 5549, 5550, 1543, 1549}], 
         Line[{1551, 5555, 5554, 1545, 1542, 5548, 1533, 5533, 5532, 1530, 
          5530, 5529, 1521, 5521, 1510, 1503, 5500, 5499, 1500, 5504, 5503, 
          1493, 5488, 1490, 1483, 5464, 5463, 1518}], 
         Line[{1554, 1513, 5525, 5526, 1522, 5522, 5523, 1525, 5537, 1534, 
          5534, 5535, 1537, 1546, 5559, 1557, 5571, 5572, 1564, 5574, 1567, 
          5586, 5587, 1574, 5589, 5590, 1577, 1582}], 
         Line[{1584, 5595, 5594, 1579, 1576, 1569, 5579, 5578, 5577, 1566, 
          1559, 5564, 5563, 5562, 1548, 5513, 5512, 1539, 1536, 5542, 5541, 
          5540, 1527, 1524, 1515, 5481, 5480, 1556}], 
         Line[{1588, 5515, 1552, 5568, 1560, 5565, 1562, 5583, 5584, 1570, 
          5580, 1572, 5552, 1580, 5597, 5598, 1590, 5606, 1598, 5609, 5610, 
          1600, 5621, 1608, 5624, 1610, 5592, 1479}], 
         Line[{1616, 5662, 1658, 5680, 1656, 5677, 1654, 5674, 5673, 1652, 
          5671, 1650, 5670, 5669, 1646, 5665, 1638, 5652, 1636, 5655, 5654, 
          1628, 5641, 1626, 5644, 1618, 5596, 1648}], 
         Line[{1619, 5556, 5557, 1585, 1592, 1595, 5615, 5616, 5617, 1602, 
          5612, 5613, 1605, 1612, 5633, 1622, 5645, 5646, 1629, 5648, 5649, 
          1632, 1639, 1642, 5627, 5628, 1470}], 
         Line[{1647, 1617, 5642, 5643, 1625, 5639, 5640, 1627, 5653, 1635, 
          1637, 5663, 5664, 1645, 5666, 5667, 5668, 1649, 1651, 5672, 1653, 
          5675, 5676, 1655, 5678, 5679, 1657, 1615}], 
         Line[{1667, 1839, 5883, 5882, 1836, 5880, 5879, 1829, 5873, 1826, 
          1819, 5860, 5859, 5858, 1809, 5854, 5853, 1802, 1799, 5842, 1792, 
          5824, 5823, 1789, 5827, 5826, 1782, 1816}], 
         Line[{1675, 1806, 5848, 5847, 1804, 5845, 5844, 1796, 5833, 1794, 
          5830, 5829, 1786, 5821, 1776, 1768, 5804, 5803, 1766, 5807, 1758, 
          5789, 5788, 1756, 5792, 5791, 1748, 1784}], 
         Line[{1679, 5687, 1659, 5688, 1663, 5691, 1661, 5694, 5695, 1668, 
          5697, 1670, 5698, 1672, 5704, 1681, 5714, 5715, 1689, 5717, 5718, 
          1691, 5727, 1699, 5730, 1701, 5736, 1706}], 
         Line[{1707, 1702, 5732, 5731, 1700, 5729, 5728, 1692, 5719, 1690, 
          5716, 1682, 5706, 5705, 1673, 5700, 5699, 1671, 1669, 5696, 1662, 
          5693, 5692, 1664, 5690, 5689, 1660, 1680}], 
         Line[{1711, 1676, 5711, 5712, 1683, 5707, 5708, 1686, 5723, 1693, 
          1696, 5681, 5682, 1703, 5738, 5739, 5740, 1714, 1723, 1726, 5765, 
          5766, 5767, 1735, 5771, 5772, 1738, 1744}], 
         Line[{1746, 5777, 5776, 1740, 1737, 5770, 1728, 5755, 5754, 1725, 
          5752, 5751, 1716, 5743, 1705, 1698, 5722, 5721, 1695, 5726, 5725, 
          1688, 5710, 1685, 1678, 5686, 5685, 1713}], 
         Line[{1749, 1708, 5747, 5748, 1717, 5744, 5745, 1720, 5759, 1729, 
          5756, 5757, 1732, 1741, 5781, 1752, 5793, 5794, 1759, 5796, 1762, 
          5808, 5809, 1769, 5811, 5812, 1772, 1777}], 
         Line[{1779, 5817, 5816, 1774, 1771, 1764, 5801, 5800, 5799, 1761, 
          1754, 5786, 5785, 5784, 1743, 5735, 5734, 1734, 1731, 5764, 5763, 
          5762, 1722, 1719, 1710, 5703, 5702, 1751}], 
         Line[{1783, 5737, 1747, 5790, 1755, 5787, 1757, 5805, 5806, 1765, 
          5802, 1767, 5774, 1775, 5819, 5820, 1785, 5828, 1793, 5831, 5832, 
          1795, 5843, 1803, 5846, 1805, 5814, 1674}], 
         Line[{1811, 5884, 1853, 5902, 1851, 5899, 1849, 5896, 5895, 1847, 
          5893, 1845, 5892, 5891, 1841, 5887, 1833, 5874, 1831, 5877, 5876, 
          1823, 5863, 1821, 5866, 1813, 5818, 1843}], 
         Line[{1814, 5778, 5779, 1780, 1787, 1790, 5837, 5838, 5839, 1797, 
          5834, 5835, 1800, 1807, 5855, 1817, 5867, 5868, 1824, 5870, 5871, 
          1827, 1834, 1837, 5849, 5850, 1665}], 
         Line[{1842, 1812, 5864, 5865, 1820, 5861, 5862, 1822, 5875, 1830, 
          1832, 5885, 5886, 1840, 5888, 5889, 5890, 1844, 1846, 5894, 1848, 
          5897, 5898, 1850, 5900, 5901, 1852, 1810}], 
         Line[{1862, 2034, 6105, 6104, 2031, 6102, 6101, 2024, 6095, 2021, 
          2014, 6082, 6081, 6080, 2004, 6076, 6075, 1997, 1994, 6064, 1987, 
          6046, 6045, 1984, 6049, 6048, 1977, 2011}], 
         Line[{1870, 2001, 6070, 6069, 1999, 6067, 6066, 1991, 6055, 1989, 
          6052, 6051, 1981, 6043, 1971, 1963, 6026, 6025, 1961, 6029, 1953, 
          6011, 6010, 1951, 6014, 6013, 1943, 1979}], 
         Line[{1874, 5909, 1854, 5910, 1858, 5913, 1856, 5916, 5917, 1863, 
          5919, 1865, 5920, 1867, 5926, 1876, 5936, 5937, 1884, 5939, 5940, 
          1886, 5949, 1894, 5952, 1896, 5958, 1901}], 
         Line[{1902, 1897, 5954, 5953, 1895, 5951, 5950, 1887, 5941, 1885, 
          5938, 1877, 5928, 5927, 1868, 5922, 5921, 1866, 1864, 5918, 1857, 
          5915, 5914, 1859, 5912, 5911, 1855, 1875}], 
         Line[{1906, 1871, 5933, 5934, 1878, 5929, 5930, 1881, 5945, 1888, 
          1891, 5903, 5904, 1898, 5960, 5961, 5962, 1909, 1918, 1921, 5987, 
          5988, 5989, 1930, 5993, 5994, 1933, 1939}], 
         Line[{1941, 5999, 5998, 1935, 1932, 5992, 1923, 5977, 5976, 1920, 
          5974, 5973, 1911, 5965, 1900, 1893, 5944, 5943, 1890, 5948, 5947, 
          1883, 5932, 1880, 1873, 5908, 5907, 1908}], 
         Line[{1944, 1903, 5969, 5970, 1912, 5966, 5967, 1915, 5981, 1924, 
          5978, 5979, 1927, 1936, 6003, 1947, 6015, 6016, 1954, 6018, 1957, 
          6030, 6031, 1964, 6033, 6034, 1967, 1972}], 
         Line[{1974, 6039, 6038, 1969, 1966, 1959, 6023, 6022, 6021, 1956, 
          1949, 6008, 6007, 6006, 1938, 5957, 5956, 1929, 1926, 5986, 5985, 
          5984, 1917, 1914, 1905, 5925, 5924, 1946}], 
         Line[{1978, 5959, 1942, 6012, 1950, 6009, 1952, 6027, 6028, 1960, 
          6024, 1962, 5996, 1970, 6041, 6042, 1980, 6050, 1988, 6053, 6054, 
          1990, 6065, 1998, 6068, 2000, 6036, 1869}], 
         Line[{2006, 6106, 2048, 6124, 2046, 6121, 2044, 6118, 6117, 2042, 
          6115, 2040, 6114, 6113, 2036, 6109, 2028, 6096, 2026, 6099, 6098, 
          2018, 6085, 2016, 6088, 2008, 6040, 2038}], 
         Line[{2009, 6000, 6001, 1975, 1982, 1985, 6059, 6060, 6061, 1992, 
          6056, 6057, 1995, 2002, 6077, 2012, 6089, 6090, 2019, 6092, 6093, 
          2022, 2029, 2032, 6071, 6072, 1860}], 
         Line[{2037, 2007, 6086, 6087, 2015, 6083, 6084, 2017, 6097, 2025, 
          2027, 6107, 6108, 2035, 6110, 6111, 6112, 2039, 2041, 6116, 2043, 
          6119, 6120, 2045, 6122, 6123, 2047, 2005}], 
         Line[{2057, 2224, 6327, 6326, 2221, 6324, 6323, 2214, 6317, 2211, 
          2204, 6304, 6303, 6302, 2192, 6298, 6297, 2189, 2182, 6277, 2179, 
          6280, 6279, 2172, 6265, 6264, 2167, 2201}], 
         Line[{2065, 2194, 6292, 6291, 2186, 6286, 6285, 2184, 6283, 2176, 
          6271, 6270, 2174, 6233, 2158, 6226, 6225, 2156, 6255, 2148, 6239, 
          6238, 2146, 6242, 6241, 2138, 2169}], 
         Line[{2069, 6131, 2049, 6132, 2053, 6135, 2051, 6138, 6139, 2058, 
          6141, 2060, 6142, 2062, 6148, 2071, 6158, 6159, 2079, 6161, 6162, 
          2081, 6171, 2089, 6174, 2091, 6186, 2096}], 
         Line[{2097, 2092, 6176, 6175, 2090, 6173, 6172, 2082, 6163, 2080, 
          6160, 2072, 6150, 6149, 2063, 6144, 6143, 2061, 2059, 6140, 2052, 
          6137, 6136, 2054, 6134, 6133, 2050, 2070}], 
         Line[{2101, 2066, 6155, 6156, 2073, 6151, 6152, 2076, 6167, 2083, 
          2086, 6125, 6126, 2093, 6188, 6189, 6190, 2104, 2113, 2116, 6215, 
          6216, 6217, 2125, 6221, 6222, 2128, 2134}], 
         Line[{2136, 6229, 6228, 2130, 2127, 6220, 2118, 6205, 6204, 2115, 
          6202, 6201, 2106, 6193, 2095, 2088, 6166, 6165, 2085, 6170, 6169, 
          2078, 6154, 2075, 2068, 6130, 6129, 2103}], 
         Line[{2139, 2098, 6197, 6198, 2107, 6194, 6195, 2110, 6209, 2119, 
          6206, 6207, 2122, 6177, 2131, 6234, 6235, 2142, 6243, 2149, 6249, 
          6250, 2152, 6256, 6257, 2159, 2162}], 
         Line[{2164, 6261, 6260, 2161, 2154, 2151, 6248, 6247, 6246, 2144, 
          2133, 6185, 6184, 6183, 6182, 6181, 2124, 2121, 6214, 6213, 6212, 
          2112, 2109, 2100, 6147, 6146, 2141}], 
         Line[{2168, 6187, 2137, 6240, 2145, 6237, 2147, 6253, 6254, 2155, 
          6224, 2157, 6230, 6231, 6232, 2173, 6269, 2175, 6281, 6282, 2183, 
          6284, 2185, 6290, 2193, 6252, 2064}], 
         Line[{2196, 6328, 2238, 6346, 2236, 6343, 2234, 6340, 6339, 2232, 
          6337, 2230, 6336, 6335, 2226, 6331, 2218, 6318, 2216, 6321, 6320, 
          2208, 6307, 2206, 6310, 2198, 6262, 2228}], 
         Line[{2199, 6266, 6267, 2165, 2170, 2177, 6272, 6273, 6274, 2180, 
          6287, 6288, 2187, 2190, 6299, 2202, 6311, 6312, 2209, 6314, 6315, 
          2212, 2219, 2222, 6293, 6294, 2055}], 
         Line[{2227, 2197, 6308, 6309, 2205, 6305, 6306, 2207, 6319, 2215, 
          2217, 6329, 6330, 2225, 6332, 6333, 6334, 2229, 2231, 6338, 2233, 
          6341, 6342, 2235, 6344, 6345, 2237, 2195}], 
         Line[{2247, 2414, 6549, 6548, 2411, 6546, 6545, 2404, 6539, 2401, 
          2394, 6526, 6525, 6524, 2382, 6520, 6519, 2379, 2372, 6499, 2369, 
          6502, 6501, 2362, 6487, 6486, 2357, 2391}], 
         Line[{2255, 2384, 6514, 6513, 2376, 6508, 6507, 2374, 6505, 2366, 
          6493, 6492, 2364, 6455, 2348, 6448, 6447, 2346, 6477, 2338, 6461, 
          6460, 2336, 6464, 6463, 2328, 2359}], 
         Line[{2259, 6353, 2239, 6354, 2243, 6357, 2241, 6360, 6361, 2248, 
          6363, 2250, 6364, 2252, 6370, 2261, 6380, 6381, 2269, 6383, 6384, 
          2271, 6393, 2279, 6396, 2281, 6408, 2286}], 
         Line[{2287, 2282, 6398, 6397, 2280, 6395, 6394, 2272, 6385, 2270, 
          6382, 2262, 6372, 6371, 2253, 6366, 6365, 2251, 2249, 6362, 2242, 
          6359, 6358, 2244, 6356, 6355, 2240, 2260}], 
         Line[{2291, 2256, 6377, 6378, 2263, 6373, 6374, 2266, 6389, 2273, 
          2276, 6347, 6348, 2283, 6410, 6411, 6412, 2294, 2303, 2306, 6437, 
          6438, 6439, 2315, 6443, 6444, 2318, 2324}], 
         Line[{2326, 6451, 6450, 2320, 2317, 6442, 2308, 6427, 6426, 2305, 
          6424, 6423, 2296, 6415, 2285, 2278, 6388, 6387, 2275, 6392, 6391, 
          2268, 6376, 2265, 2258, 6352, 6351, 2293}], 
         Line[{2329, 2288, 6419, 6420, 2297, 6416, 6417, 2300, 6431, 2309, 
          6428, 6429, 2312, 6399, 2321, 6456, 6457, 2332, 6465, 2339, 6471, 
          6472, 2342, 6478, 6479, 2349, 2352}], 
         Line[{2354, 6483, 6482, 2351, 2344, 2341, 6470, 6469, 6468, 2334, 
          2323, 6407, 6406, 6405, 6404, 6403, 2314, 2311, 6436, 6435, 6434, 
          2302, 2299, 2290, 6369, 6368, 2331}], 
         Line[{2358, 6409, 2327, 6462, 2335, 6459, 2337, 6475, 6476, 2345, 
          6446, 2347, 6452, 6453, 6454, 2363, 6491, 2365, 6503, 6504, 2373, 
          6506, 2375, 6512, 2383, 6474, 2254}], 
         Line[{2386, 6550, 2428, 6568, 2426, 6565, 2424, 6562, 6561, 2422, 
          6559, 2420, 6558, 6557, 2416, 6553, 2408, 6540, 2406, 6543, 6542, 
          2398, 6529, 2396, 6532, 2388, 6484, 2418}], 
         Line[{2389, 6488, 6489, 2355, 2360, 2367, 6494, 6495, 6496, 2370, 
          6509, 6510, 2377, 2380, 6521, 2392, 6533, 6534, 2399, 6536, 6537, 
          2402, 2409, 2412, 6515, 6516, 2245}], 
         Line[{2417, 2387, 6530, 6531, 2395, 6527, 6528, 2397, 6541, 2405, 
          2407, 6551, 6552, 2415, 6554, 6555, 6556, 2419, 2421, 6560, 2423, 
          6563, 6564, 2425, 6566, 6567, 2427, 2385}], 
         Line[{496, 4519, 668, 4549, 665, 4546, 658, 4540, 655, 4537, 648, 
          4525, 4524, 638, 4520, 631, 4504, 628, 4509, 4508, 621, 4490, 618, 
          4493, 611, 4448, 645}], 
         Line[{542, 4352, 507, 4381, 514, 4377, 517, 4392, 524, 4388, 527, 
          4351, 534, 4409, 4410, 545, 4418, 554, 4421, 557, 4436, 4437, 566, 
          4441, 569, 4443, 575}], 
         Line[{580, 4369, 539, 4417, 548, 4414, 551, 4428, 4429, 560, 4426, 
          563, 4401, 572, 4450, 4451, 583, 4463, 590, 4465, 4466, 593, 4478, 
          600, 4481, 603, 4483, 608}], 
         Line[{691, 4741, 863, 4771, 860, 4768, 853, 4762, 850, 4759, 843, 
          4747, 4746, 833, 4742, 826, 4726, 823, 4731, 4730, 816, 4712, 813, 
          4715, 806, 4670, 840}], 
         Line[{737, 4574, 702, 4603, 709, 4599, 712, 4614, 719, 4610, 722, 
          4573, 729, 4631, 4632, 740, 4640, 749, 4643, 752, 4658, 4659, 761, 
          4663, 764, 4665, 770}], 
         Line[{775, 4591, 734, 4639, 743, 4636, 746, 4650, 4651, 755, 4648, 
          758, 4623, 767, 4672, 4673, 778, 4685, 785, 4687, 4688, 788, 4700, 
          795, 4703, 798, 4705, 803}], 
         Line[{886, 4963, 1058, 4993, 1055, 4990, 1048, 4984, 1045, 4981, 
          1038, 4969, 4968, 1028, 4964, 1021, 4948, 1018, 4953, 4952, 1011, 
          4934, 1008, 4937, 1001, 4892, 1035}], 
         Line[{932, 4796, 897, 4825, 904, 4821, 907, 4836, 914, 4832, 917, 
          4795, 924, 4853, 4854, 935, 4862, 944, 4865, 947, 4880, 4881, 956, 
          4885, 959, 4887, 965}], 
         Line[{970, 4813, 929, 4861, 938, 4858, 941, 4872, 4873, 950, 4870, 
          953, 4845, 962, 4894, 4895, 973, 4907, 980, 4909, 4910, 983, 4922, 
          990, 4925, 993, 4927, 998}], 
         Line[{1081, 5185, 1253, 5215, 1250, 5212, 1243, 5206, 1240, 5203, 
          1233, 5191, 5190, 1223, 5186, 1216, 5170, 1213, 5175, 5174, 1206, 
          5156, 1203, 5159, 1196, 5114, 1230}], 
         Line[{1127, 5018, 1092, 5047, 1099, 5043, 1102, 5058, 1109, 5054, 
          1112, 5017, 1119, 5075, 5076, 1130, 5084, 1139, 5087, 1142, 5102, 
          5103, 1151, 5107, 1154, 5109, 1160}], 
         Line[{1165, 5035, 1124, 5083, 1133, 5080, 1136, 5094, 5095, 1145, 
          5092, 1148, 5067, 1157, 5116, 5117, 1168, 5129, 1175, 5131, 5132, 
          1178, 5144, 1185, 5147, 1188, 5149, 1193}], 
         Line[{1276, 5407, 1448, 5437, 1445, 5434, 1438, 5428, 1435, 5425, 
          1428, 5413, 5412, 1418, 5408, 1411, 5392, 1408, 5397, 5396, 1401, 
          5378, 1398, 5381, 1391, 5336, 1425}], 
         Line[{1322, 5240, 1287, 5269, 1294, 5265, 1297, 5280, 1304, 5276, 
          1307, 5239, 1314, 5297, 5298, 1325, 5306, 1334, 5309, 1337, 5324, 
          5325, 1346, 5329, 1349, 5331, 1355}], 
         Line[{1360, 5257, 1319, 5305, 1328, 5302, 1331, 5316, 5317, 1340, 
          5314, 1343, 5289, 1352, 5338, 5339, 1363, 5351, 1370, 5353, 5354, 
          1373, 5366, 1380, 5369, 1383, 5371, 1388}], 
         Line[{1471, 5629, 1643, 5659, 1640, 5656, 1633, 5650, 1630, 5647, 
          1623, 5635, 5634, 1613, 5630, 1606, 5614, 1603, 5619, 5618, 1596, 
          5600, 1593, 5603, 1586, 5558, 1620}], 
         Line[{1517, 5462, 1482, 5491, 1489, 5487, 1492, 5502, 1499, 5498, 
          1502, 5461, 1509, 5519, 5520, 1520, 5528, 1529, 5531, 1532, 5546, 
          5547, 1541, 5551, 1544, 5553, 1550}], 
         Line[{1555, 5479, 1514, 5527, 1523, 5524, 1526, 5538, 5539, 1535, 
          5536, 1538, 5511, 1547, 5560, 5561, 1558, 5573, 1565, 5575, 5576, 
          1568, 5588, 1575, 5591, 1578, 5593, 1583}], 
         Line[{1666, 5851, 1838, 5881, 1835, 5878, 1828, 5872, 1825, 5869, 
          1818, 5857, 5856, 1808, 5852, 1801, 5836, 1798, 5841, 5840, 1791, 
          5822, 1788, 5825, 1781, 5780, 1815}], 
         Line[{1712, 5684, 1677, 5713, 1684, 5709, 1687, 5724, 1694, 5720, 
          1697, 5683, 1704, 5741, 5742, 1715, 5750, 1724, 5753, 1727, 5768, 
          5769, 1736, 5773, 1739, 5775, 1745}], 
         Line[{1750, 5701, 1709, 5749, 1718, 5746, 1721, 5760, 5761, 1730, 
          5758, 1733, 5733, 1742, 5782, 5783, 1753, 5795, 1760, 5797, 5798, 
          1763, 5810, 1770, 5813, 1773, 5815, 1778}], 
         Line[{1861, 6073, 2033, 6103, 2030, 6100, 2023, 6094, 2020, 6091, 
          2013, 6079, 6078, 2003, 6074, 1996, 6058, 1993, 6063, 6062, 1986, 
          6044, 1983, 6047, 1976, 6002, 2010}], 
         Line[{1907, 5906, 1872, 5935, 1879, 5931, 1882, 5946, 1889, 5942, 
          1892, 5905, 1899, 5963, 5964, 1910, 5972, 1919, 5975, 1922, 5990, 
          5991, 1931, 5995, 1934, 5997, 1940}], 
         Line[{1945, 5923, 1904, 5971, 1913, 5968, 1916, 5982, 5983, 1925, 
          5980, 1928, 5955, 1937, 6004, 6005, 1948, 6017, 1955, 6019, 6020, 
          1958, 6032, 1965, 6035, 1968, 6037, 1973}], 
         Line[{2056, 6295, 2223, 6325, 2220, 6322, 2213, 6316, 2210, 6313, 
          2203, 6301, 6300, 2191, 6296, 2188, 6289, 2181, 6276, 6275, 2178, 
          6278, 2171, 6263, 2166, 6268, 2200}], 
         Line[{2102, 6128, 2067, 6157, 2074, 6153, 2077, 6168, 2084, 6164, 
          2087, 6127, 2094, 6191, 6192, 2105, 6200, 2114, 6203, 2117, 6218, 
          6219, 2126, 6223, 2129, 6227, 2135}], 
         Line[{2140, 6145, 2099, 6199, 2108, 6196, 2111, 6210, 6211, 2120, 
          6208, 2123, 6178, 6179, 6180, 2132, 6236, 2143, 6244, 6245, 2150, 
          6251, 2153, 6258, 2160, 6259, 2163}], 
         Line[{2246, 6517, 2413, 6547, 2410, 6544, 2403, 6538, 2400, 6535, 
          2393, 6523, 6522, 2381, 6518, 2378, 6511, 2371, 6498, 6497, 2368, 
          6500, 2361, 6485, 2356, 6490, 2390}], 
         Line[{2292, 6350, 2257, 6379, 2264, 6375, 2267, 6390, 2274, 6386, 
          2277, 6349, 2284, 6413, 6414, 2295, 6422, 2304, 6425, 2307, 6440, 
          6441, 2316, 6445, 2319, 6449, 2325}], 
         Line[{2330, 6367, 2289, 6421, 2298, 6418, 2301, 6432, 6433, 2310, 
          6430, 2313, 6400, 6401, 6402, 2322, 6458, 2333, 6466, 6467, 2340, 
          6473, 2343, 6480, 2350, 6481, 
          2353}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
66eN//7YiUxQH0kIk+suh/NDkobrx6ZBBwXtl2wKgulojSPvHleB3qa8AJmR
aXD4p071f+TsfnHwc56BCT6Ldum3qcjDhD3bOsep81b1IWbvSdYYMMmbM3wd
U4yCJd9E/Knz+VCo5dpOyp5C91lkk/bdQF5dljIF6jy7HRevkB9xQMugkEgt
iUL0SpO/PkndF0+Nk0UW7u4QXPeiRq2jAm1+RqenU35J92zVt5LaWPDUsrIc
/VOHxcZtQUtfTMNEF3efj3UOXBwNGZefug4G9tKKNpR9Fv58TqgqTAT3bRce
95wshsOBaq13KJw5+LfO9pF/6mxzSyu4RNrmwJvOtbbXzsWBrXvKDlLXqJnu
GsvB64kQeJw37NWnTFDaI3WLxNP/yFH5R05C2Y1V8zT+2M2Q9v5kain2Kixd
3k3dI+MdEwWtL2zg9r6S0tvaVag/4Pn+F3WemfuL6FdPxkD59pc8mQb1+Cfk
0rKPVLxzVCiPqSpPxYdWlnKO/dXotPL0zWzK/7++xHHMGe1xyxs/7coNdRjV
Zp3mTcXT52xehT6no4DBXe4m18kGFAxpyVDupsaDj8VH8GWDGWvusqBlPsA5
5646RN7DZ4/c48wfDSr2m/a409oCWi6scvxvHwSvv3kkw/++j9R69nPnFstU
nIvx2bmSpRZfJihqKFLrNrPwnIo+bYPDCQNM+LURjaYeXtVqp+L1eDjjc4UY
+Bk4dLPWpAlzUm/VqFVMQ3aX9Xx3B8XXLD4+XpvXCMfpluhYUfMHUk3o+vrj
sYonRpK++Q6kh+/gh9ppaBB3We4iEAVFxjvDnb3LIa7n1iYf6vkKae01/s0Z
ivcEYlryS2sgVE5k/xfKPml/666P/FN3/V71jez8/kzYFjC59/tDQ2QwlaVd
oOKRbMbjrA+qgcCiE3+taDgRbQJfVTSRenp/66sr/VNfXSs4L3hhJhynQn+c
6VxSDw07Doj1UOdw6a7cm16icfhatvHnapkGGE9gWzJD4aLEt2G2t7cm4lq5
O92/oRoENxjSyb2h8POZmI0qB3Pw2Qpt/rm6Cvj8ubQ2m/Ina9t+VNHVZ0L6
icdJq2+V4WWe4sTT1H432e7+xLY8EIy+Vz/Uli7Bl/7rIyc//z89j/2jZ+d6
tr1uB3NgCYvuyfd1FbjyuSQS+Td8zO8LciXC+XBlugmoxscM17YTfVL/qRv/
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
T/EUnPv4kllMyhU/hmgv8pSnnAJrKF6Dzec4GUVO2GE/zblFXuPUyqh/cj4L
ziltYmdiCgajtv49JG/A4ZC+WWywCG4+3TTL00jJ99ESIHmG3o7++oUV2cA4
ZvLkda89bJiPLyd5CRu6J2USv4pg/OCvjhcXjXHE6dhpksdQ2mB34GdoEgTq
22mVRztAM6/iPMm3TLMfn+jflwh9L0xeSt40xLbLkYv5GefAydHlwvHwKSFj
SbdvKES+zF5B8i0Vu5mCuQLjYem8ZaT0LX0Irn6dRvIzid/51BfGAkEkzNLZ
38oL6TnfLOZ/ineXPayzpJ4fz6z5inZvrLQVCib5omcmYm0JvIko5NT/6Uym
Pwga+YzOU8+rTecInYtVOMZeFeMNinAFn9hv57oILuV6NWJyLgMjovvXKWv5
QtlmU3pS599PbOIAz+s0XBrrHn38ki0UmNANCVNy/phoDtQFpaKucWhU/Wsb
mOtsf+ZBvsc8+yCUzjMBC7/0bpbd64wKDOYCpL79xy8zERyO5jgpX/JQIFEI
L+elL/1G6f+xrbG8TMwAlETsZ2sl9TEn/LziD+KXrl3cV2nlBmxMnK/vVFph
9gyzUS01Hjlx1GgwuxgT9AZuKUAINPpbsilRz+u8t5y32+dslEjQcnf84gTW
WbcqU6nnG1qT/lrWvhBvLaGP+6MWgDPix61Uv01DsHZR0SnWbGTjpt1WtP4K
nth99ilQzzdje5lHaU4h7qAOGO4MxofeRiwL1PO9mbmbz+BKNnqqLGmbzHHG
N9MSO95T8k2PnQw7+8cGww4YHw3TikaVeX++q+T96q2ZW3rHruKeFRoLf5a7
Ic8P7dFSSv+05qQlgQ2uyLvraAzDRyMYiOGPIHx28JCxygyXJo4sWTZTPWGO
O68eiyW4bqeUcsV+QRvYph/wYZW1F3ZpMuvEkfco4rd1CkupQSur6ccaitfe
uZfseoHS/5fYic9mJ+3QycTadNnTSHgroMBD7vWu5242MTLZ+GenQO3JOyHo
cJHT0ZTS/+O2JPkK+yDszGTmePjJA9dncHGR7+6rEtxst5dFovJJmekTPCH4
obJn71JKDlPOGsuwva4oXnct5nZBINLFv6Aj950j801lZ4op1I+0bLom7I/3
XSSVrlDjm98NzhdvTkQO442cxwz5MMiOTT6QOg/lE6xOTuz+aKj4i3l12FXk
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
gX3N4ZaTdIaQKPzh3tq//+sjOfzbP1L/f/tIIwPiv6yb9PEHd1um7c5M9POm
T52h4qT1wt0We6srON2g0OvVkI8/kj5H0VF1s+7vuuC6w7IoTsf72lnsPn5b
1rwI3yhd5lBnvtXYFALn23SbaQvAM2nTyJPJMfCWX5jfxXgFBOZ0igcci2H1
Ed23Hd/H4GCJvcOjKBe4Knp7UN8wFH5XqPWSepdTz329TEAfw05K0F4yiYBr
/U0bSH1spUu1vp4TgGvnfy2Ls4yG7TqaBxipdS5UdVbnDk4AJgNNndg/F3CD
5ZcLzaQvFGkUa7jCEwJjJKd1zEJQoyeL1Z30c/55vqj3z/PF/z3fLfQ7QyYM
zoIIQ0z5cYtMyJsU2N5E/j9SVifPd8gCh20jNphT/Oeq/zI/wn/CxNz1ry2z
w9uRY332gckQ4/hmZIKyY8m0/v3Gn+Go+EXkJS6GgATTq4fkfFFeH/pRnZZw
yO92VqO/54cOvU+v1VLjwfs/PbnubQMPtscFhRpF4XG7BKVPZN/Rv34a/MfP
JxNGvP4/wyEo/KfpicUQfNRr/IDYv87Gm8213A6+0nbG0gYm48qA1OXk3N3p
wKV8x39xA/+X71ePKWwS9rJBQY5dKc+NokDGR/0Uua9KNtdqzpZw7D6q7HX7
nh/wM17UJX7OaifdfkXjiWxOPxNYzEOg7Y3BOrKeaZ5t108GJaBBc0+BxSo1
WGdq5kbW/33sBXuJQxbQmFsSbNqdjvNzD5fWjZ2z+Y2EwVl8lTS+65hFJtK2
SgiRdV7+Dy7h0f/4mcKtuTZvzRVc55r6e8SxGOPNtyKJH9GfuXMrjE2RK2kF
zQBtAcrMOHWReFv5r50T/7Hz66L0srOmQWjkpWFZR2uINyuMKkle3P3OcqHU
JAklnv7hlae1Qzr2sR6SR5vE8jjEQ2/DhR+6xnpsRVjyqUCqbmwMHivQblT5
6grrP4aGLJvKxIWPl9q2k/Pw/4lP4PonPvF/8VkvLnWmZtYRDzStWk/lL6SP
L06T/C0KiFMW3qiLo1UBLlS+wyv790v5rsHDbxBufA0mMecphQ/w/n3cEj48
qDY8V/7VFd32HzNMncyEUbZd64Wo+/Zd8+epD7uNKyRMhiXYiuC1zHw08bNt
/67y5RPhmPdJxXHbVBSKvftpQvDt6CnNXLqdKTjS1P/C7HkArswdSCR4OG9T
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
e8h7OrvvBeGimbjtZ2webE8F6esFo1epdY7ANvHLqdGo5ltV48+cBsdNVlhW
ULh6/F//nf7jv2DacokaZVscSAm+w+4YjfOe5YLk3J6H7v13zTZE4PJPxY/T
Nmfi9QfbPptSOstz1WmmjDMpGONxo+YQey5WH9/PR0P03WCa07lTmXj8Usdu
Rok0dNwrq/OAiv/AUAftIIU8fBL9s3TuXhTmTepy7KfGj4ofpU3cHg+eVo02
zzfn49h3XT4k/1ea03FtfZ2NrFF+/w9d3x3W0//+T0gqqSSz0FJKSJGkuzQk
CpES7UF7D6W999577z207zSMIkWLiqYyUoSI8jsn7/fnur7v6/r9e1/ner7u
530e9+PxeJ7XOc/niQqqZDD4vS44gbj+6i4GPbu5fEy/en/rZ5MIZB53Gj5E
xLcNTHlKWORhRcXKLTPjKAxJEw0k/w+lj2Pbu/glBynm71oPG8YgfeJHmwki
vlVtLtgrLxEFP8+yJnd5o2phs7As0e/rbxef1e9xx2+Kcrq97ZJQcukmcw7B
n86vEh2KqDIw1Fcu4Dt1KsyOi02QfeEW9eJ2ppYTOOIahnbJcLCsmbp9l/An
MldC2F7siAD6l9kuJYTvvpIo0DxK8JXmO84h7r5kGKnv33KSogI2+HOI5E3N
AYOuw4TRkSToz+op7h8tA4r78zfyZgjd38/K8f1lJJQ2nL1XwpEH7VNDmoZE
/rrXXd5+a0kAD5vDM1tts/F+VvftncT49prstk8k0qC50v2p790CjDt/zdOb
4E+uYf2AzIUceO/tDL2NOcjXnFwoROCHQ3tfV3x6OdwP36a5yGqFbcv2uocI
founbXjnL14LsrtS97T/TIe7t2oddZ/PwZvx18tmVY2Qo5Bx8FZKDhzvoR4Z
QWK96erM3RfYDDIPuS2KP2TAjgHtyqVKQveTLZV+nm6B7yFUlB3HU+G8fpav
CIHzlBu3fPc7NMNmvuK4JvUwuHOW1SeH6FMq+wuLS7cbYU/WTU1DY23oO8Nr
1fh4DlaUP97/6lkLEuevqpfUuODjiuSfX/rn4MLp8JhvXyoh5vsmsfO/XbHb
6wSl2CQxTul0LZ9GKbz7YlwwvMsdf+/InSV9Ea3yr5KNvlmwp1bDTPV3Cu6d
3OXXTNRzpn5yf7VbOBzo0e94SvBYncAj4UhCf5/9k//n/+T/XepJ8vZr7th6
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
rHA9ZG++IogYZCzaOS/jc7GbfgKGvdF00isOxmNSYbZkve7+P+o3CiXTXxRk
C8C9Hw091nyi+BfztCNZdyeR4+uC01yR5njc2nXcZnC8k3HRTxjPMT0MqolG
rSOV0XUL0ZhydVqV+GHTXOLGJ68SMf/XQ20h5wj0wXdHiN+2GjnKw7NY1NXf
Ik+r5YBOiuwqxP+XHPsqO/rDG/vOpj1TEZPGW/QKXSReXtswjDIxOmGDXENM
V7U70rVfml9D7t1/UtnDP2KGh26q5q52U0ezdrnFOD1450jF5YuBGKLu+lO4
ywWv9J5IFiT3x3PzDs8NOYO+mUrffJsx3innzyY4QMO07YUWjQZ6ndPs7kjT
g/rpz4u48aLu9xOxlmtQcs9ws06CIjzxubuIM1tpVhhYbY8Ae2Fj+ZrbXNCn
HyZPcOksbKn7YuQJAfe8Qzm+2cO5p/tkCY6ViLM+eX5dC5mN08dzGW1AOZZn
EQ+VOG17N7rdAUvfm/4hcZfhec4WHoKf1yzbtx9hTALtCy+z128ygLaXzYME
b2v/1gM0/aceoP2FuMscphlQ9UenP0/WHZotFD0Jbhu/r7Y4uy4e2rqzvTUT
HTAgd3QR51sY62iovAAS9NcGhh95o3e6/2Je8Jpnaf3THQgrO3+Wilc64Pgd
42ySR4pHTrVzy0ZD+A/1V7uCPfHKrSU9pJ52t1DE+c+NGnCIm+sCY2syjOVp
m/FR6/6cQ7mrtdQNI/gmvWhV04CTcej4KOVXVtttwpndvPCP+beEVON4eCnn
SbuS0if+2FHtbRfjUTN5U5CTkhV26hpapVJysTu973k7Q3GY93Rd+WMzqFvR
U/Oa1IH3E9oaLOoKp1kP2//hjQaf3ddX6VL6HN/p+cnf2Q0mTsy2NPoEg87G
j4fJ/ffKp1NtK20j8MGynVnHL3rjueYdl0k9nJExczXVlQ6Ypnch3OGuA8ql
c0Teoex/jvH6xRlLD2y5EfVhbJ8PtKo3fHSn7LCpRWWVhboFMqhkaMg/sEGn
h/lF8X9IP47JlMFAUdD9uvXPyhRTVDj9NIfcCx7KkRpPS1TDhMdpe2NWeUIJ
O88J0qdptlmm7tqpIGhsPl+gmu8CI8GtblsI/wy9HBO81h4H2m8llX2NxG0b
BLNHKT15HuZu01zmAfffMa8/NRYJRmt5v/iSulKOH5a6XnOErfGT8Q3HkkD2
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
fPxM22psJhRvxi/Xo3i23a2CX696oQ3fjx3+WNMQhje7pK7HU/8dyTaY2VmH
gfC3jIqo9+7IulVHVY6Mb/x02Cb9gC2MnbnzKKU7CqdXWRtQ/yPdYZkND16u
jgq7XQ8NjNOgaPuhXS5kveecN3+4MmCIBy82KjW6JMN6x6AUDqrf3L16hXWC
5ph4+10tfw8NFmeXyzuR582OP3Jy4A7EjtS9QR9uJMCKxHkuevK8xYpFOyq5
A2H7icmzHTcScJfz9z/je8bO1h0RNIeuixf28fbQ8L5ttQI1j++Pae4H+20x
X+KV5dvuKHii8UCLkvOzL+uNrdZhuPL1k7vSH9zhtECaJrWuiHXnZ68OGMKR
jndfGlySMex65h85B59LaoctV4dHCe83kHVhxcyZP+taeSj9A/cLbVz28Oi2
ew1hsKxl5599e14UuytL6jLIn17bRPYZKsSX/tnn1613i2/wRaBv/5PTKzT9
ceK55xtKXx1/+WoU/uGrWbVRnfOthTna/9pvqKQVCl1Yf5zSe5moVW+A8BUM
fK5n/nG/N7wK3vvHTnpUC649tg9Aff/d3y5LJuKR4bk/dsjUBvJWZ2Mx7oXk
VyavGCwaspSg7PZ9E9/1IzzhaKwrVpJpfQAr641uUPbvr94jPmTlhBOfDnTM
R16BhidHJ/7UBRLr3mjbWuL16KFgk1vh6MRx0J7yOw+bo/vFZG5Bm+K27Odp
fnDba/MfP3W6fl/YSjkU6TMaPuvtJfgQQf+C8usQzut+BgfMUP/4pikVE2c0
sfH6QOHAxnaHjxkFmmB0pFuQ4AYUel3+gxs1pzU4Ty6xgUNqzKvPpNyEWImH
f3BGTrltf46DCSzi59UluIRG8cp/cIlexquNRdkKppVij9tPWMG95Yl/cMzD
YZs5wUM0qRpoZGP3xJKpD3/wsFm6SZLgJ7IbrH7bPeaDK7Ni/uDn4VU6r5pf
uMCRo7OXNKWtUKd87A/e/uXHg9f/8L3sof/w1UjZDx41LBe3arkI3TNBP6n5
L6mzSvuetIIW267fJpWhaLG0rozCed5dNXUkLoBF8hwc3xaD7FfS/8SFX3m8
vwtSDbHu4ffAoe4w3CHa8yeODLwbDxCzUoGF3d6zqueiMefXmz98iZyXdA76
v9GCXUsemOsppsLH6wHBtSTPefSwq+jMnXDkD8wZtb+dD5UbPmPS2AhID7h3
71kfiiO7vh76+SYPnEpcV1eNEzw05Z6o5CnF5U1qD+lPxEFz1KLiqU/EPrU+
3xbcm471H09aRyhlwAsBbXQnz3dLbereUhgPUYGcyx+JJwA2ydf3kfjIdCqE
5f1wGrTeqnMvPEUDIfui4VRS9/GoTz14HlKKTC7uOtaBTig7cWKd4ucRmIwI
vBS2KBPlWu9duZQTg0lMm3pWkPjLur1hyrHNBosUC69b0nJgWQDrohgyj358
wXaPpVm4/LfDLx3jdPSzus0mStbVzqpvl6wRi4LrYsR/5aQiv+1I/DKSX10U
zA98QvQ13tn4wHM2E6ZKFFOdqf8G6TOa7isWQvem8bkU2RSYjBT0vT1E7ISR
a2z71wy8Kh27bi9XJhbc2Dz1anQEVtvYHJrZFg07UhN6a5aXg9G2gVHr9yQu
fLtywE7ZHfTKl+z51V0NtPDat9Q9+qPMm5yzYwNA+/VSSd2rkZjvMjZmRN07
+z3xyKbqDswO7a9gK5QHW+6C3COj/x/fxdZ/+C48zxvuEJipgNi2aU6+hHJo
lE2ueVtN8Pa41M37oXlw6uEKncbAKpAenH7+7gHxo9f2CjZhARCZiKBpVQtB
Iq01FP9AlOuRSnt1D6yI1vP4YZmO8bur2FgpvmhTN0tdnUAIxh+c74PycMHI
v+PEBMEflcuH3JrT4GTYRh9ULsI3enze6wZIXtThWJGzqQRO5M/26Rpkwurm
S53iH0cAstXfFx1Khy5HYebG5EI4GpacQ/E5KKy5PKZzXQMuzKx4qG2Th4+G
lU7uJnn7wQH51Wd1E+GTxZsvyrGFOPNIm/PK1xEQ96oTbeYohMpL+V/7vgVj
i9nOoack/59hGu6eeR0MLqad/YNOechv5JojSuQc899X5RrmiuGSwXbP5mog
VMPu0XwrsXO6zthPE1GI5SG9zu8qIcmH/tm+VyOw6NqGgyINfpj/PkusnFYL
knUxoTcaR4BBS0jYoTYPf+0Wf156rBr2aTcyn22i+pLITb6ozwMOrVnT7ceq
0c/ddVqRjEdEoUv2Az/QAP+nPrRa5OlWZrhJ5lFtD+lKaAzGhbkrdxa55UFa
2zPDXUROR+71yjOrCnHqbh97HX0IyN6VZX5F1kW/9Qur+WQUlMvOv7vwrhIT
5Z/uF6f+H3vBzXMo3BUUVd+IVczVoIaStdACWRfvcM6Cin4iFrrRTH1iC0Hs
ZruINtm3X7+9Q3ZGaiCH//ZDPTZ54Kyq+lKU7POwZYX5pY0l+Lysf/GUYSY+
j+Lq2v/x/+zt/8dHUeg/cmbvgzRcqFryY0y5CFDjRR7VB7mK377vmX4gevuc
WuYanAcj0ckMlJ3snN18OpLYTQvPoTztoCrkffzOr5vYYbSTWJTadAUWRgry
miWUo0WHEXQTu305slTsWP0dlOte++jDDQW0bAn6cIDY//awgx9/FQZgXMrX
F/yXIyHmRJcH5S9aik0OO7ZFo1RbvzYHSzkeWAUbKb9bsr52z8hQBigfjXMS
5cqENOkx/tdknv0Nrr0myoVoMRhQoCqTggc7GFpyiF9Xt7sdmRoNxcOLa36Z
zGTih6FSAQoHZJVOKx/RiIXCkkX8Ezmp8DTBq4TCjb3+RWu2LM0Cfavgj8rG
6dDQ5K5F4Yy3gVpp1wMbGDL8laNEy0Fa0Y8tFC4pSzpodcxlkDrnaOzrvBhi
H81//v/hL9FUmBxOw5qP9dsrT9GQv9PvHYWHNBXfm6qF8Xh5/ujXbvEEPPAq
oZjCz0JBpdJ1oukQ9myfwfOzGdgqx93lQfC24S+/wdS+/+Y3UP546cdu7lL4
xVy+w/1kHHYvmDP9/ESdL01eJDgPjA/p1xCcR8HSij8472yj4kXiArzxKO4l
cQEH1Gb+xIWxotVKme+1kH3NGpBQTEWvT3bZVBwxfp24NpTNG+jyZxb5lWRj
usfJxxQ/2FqOek867iQ0vCHifcUxARMz3Y9TfXAg7/SR4zciUdSDqbySIwVt
ek55pJHx2SG5mLP6MXBipxvdqSum6MRosiaZ6Df3u9MXzfduWPtp2fPva4Ox
OOqpZBmJd767Ao/V2KuAkJPkxZDsWHQU7QkxpvgEwsQi+Of00E8qbpeMAw3r
/C7F3iX5jGX7FlX5Il9kKjQV/BqbDB0HftPfIONpY54XOj/TUN7GyEXshTlE
7e19SfGHiLBo6YZoxuNC2nOfiEkF6Ok1sKTulfMLsL3QLUzFMcahrtgvJP5W
sSVsJvK3xjw57eOdjlff1bg2RDihk+eq+1Q9eEyEWe+eUiYu2E32Mbsl4Z1Y
+7PhxO9kpF8vF9udhYq03Aq3+lisDy6SXCDjP+MSFmotcvFagYCEcY8Jrr92
sXcx2U+RqQPiZ8TLMMPCVsB/qSbS6w1AB9Hja3/PEy1cBfjodZjDl5lIvBqd
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
d3rL1TzDRFCJH69abUcDta9RD7TJ+I+/fP6O//D520eZ2HKpJeATf97xZAZr
bDngupm611z5l+ef7h+e/xVnnnMudUrCTxOne+i3+qD6Rg29R5TeXbsep5ym
Yc5KkVcaimE4/WlmLXXvuPOm3lW6DeH4zfHV+sSqYBxXN9GIJu8VPrxk4mhl
COgOO5xTHAwF17wp/ywy7hJcmy4TGQPGZZp6aOcP2i+S2/qJPGym98KWqMfC
+TBLizVRjnBtd/tpefL82P/oO7D8LVubwI1Q0Hyy5lOrQjRYyD1zKqT6v7d+
3prHkghXf0+1WK6LAqs+QWcq/xnRnvm57WwsTOdHe1/lC4dNI1MbV1G86J/N
rii0peCmjKksgxPRaK3T0/Kd7Ge77rbBCo4ofKR3qzD+ZQRuFV//W488nz3G
2/77VixKbFPKLtoRi662z9p+kflb/P21bfXScOtiSUe/0nicTY1Q5CV61HN/
weRbmoCSpm+ujsUk4hFBbiUN6hxG6kgdT3syunPFvnjBlIKcjEcS3MjzVZ4H
DfuXe0AXp5Agh7UTMFwYP0H1i7/aMy21Z4MaspqY/HItD4JGNrvP1H20CB4h
dq0Ncsj78z5Pdbkz3Ojfakfdayu7m/zzdWs6HghmChlNS8CgHFovE8Gf+1K6
6Vy9UbjkSJn28QNZ4GtmdtyT4NVJM9cfqy+LQLLIopz1R29Ce0RW6SeKv66m
+4zYTx183bPS/AedEZoO9MWOkvGUt7e5FyatUEr5UaP1Rm884b9Y7QoZn6Of
0nz7xQfMB5WsPpvoQV38TPElMv7qrB/jsgJ3+F4lUf2ExQbPB/xa5EzGM+Wq
Y+/mEHvYlFW0NmcJXImhZVD/zy93Z3s1nxEFjEbNNgPdcZBfxPFuJ7HDWkt0
lR0KgwzGpuiUvmjoG53YqEXdK6wxW/WUzQQkRFLr9mQkQ6xf8pJlZPxN2ekt
g5KhkPpTc8xQIB5EXaWuTFH33F+GfVOSjASRx5Ejs6Hx8HXLj0EZys6VeJla
i7Vh5ITjL6+dNDD2aJjvI+MVXQaGm1pdgdksVaDfOARLD5wUTaPurz2RXN1c
GQ1dy94s9j/oiS3fvKw1ifxKDdwR7onRoNrO+5VNJwq9XnmydFM4Fl62fbTS
EW4diRfTMYjD/kTzzezk+YFbtWOW/ZFA9674WeQuGjYkWOgzUf/3nrg4+WIm
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
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {342., 342.}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.1664885862277144, 1.438652667033866}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 
    0.6250000000000001, $CellContext`k2$$ = 
    0.40499999999999997`, $CellContext`k3$$ = 
    0.6050000000000001, $CellContext`k4$$ = 0.91, $CellContext`k5$$ = 
    0.79, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.6250000000000001, {2, 2, {0, -1}} -> 
     0.40499999999999997`, {2, 2, {-1, -1}} -> 
     0.6050000000000001, {2, 2, {-1, 1}} -> 0.91, {2, 2, {1, 0}} -> 
     0.6250000000000001, {2, 2, {0, 1}} -> 
     0.40499999999999997`, {2, 2, {1, 1}} -> 
     0.6050000000000001, {2, 2, {1, -1}} -> 0.91, {1, 3, {-1, 0}} -> 
     0.25, {1, 3, {0, -1}} -> 0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 
     0.25, {1, 3, {1, 0}} -> 0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 
     0.25, {1, 3, {1, -1}} -> 0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 
     0.25, {2, 3, {0, -1}} -> 0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 
     0.25, {2, 3, {1, 0}} -> 0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 
     0.25, {2, 3, {1, -1}} -> 0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 
     0.25, {3, 1, {0, -1}} -> 0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 
     0.25, {3, 1, {1, 0}} -> 0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 
     0.25, {3, 1, {1, -1}} -> 0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 
     0.25, {3, 2, {-1, -1}} -> 0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 
     0.25, {3, 2, {0, 1}} -> 0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 
     0.25, {3, 3, {-1, 0}} -> 0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 
     0.25, {3, 3, {-1, 1}} -> 0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 
     0.25, {3, 3, {1, 1}} -> 0.25, {3, 3, {1, -1}} -> 0.25, {1, 4, {-1, 0}} -> 
     0.25, {1, 4, {0, -1}} -> 0.25, {1, 4, {-1, -1}} -> 0.25, {1, 4, {-1, 1}} -> 
     0.25, {1, 4, {1, 0}} -> 0.25, {1, 4, {0, 1}} -> 0.25, {1, 4, {1, 1}} -> 
     0.25, {1, 4, {1, -1}} -> 0.25, {1, 4, {0, 0}} -> 0.25, {2, 4, {-1, 0}} -> 
     0.25, {2, 4, {0, -1}} -> 0.25, {2, 4, {-1, -1}} -> 0.25, {2, 4, {-1, 1}} -> 
     0.25, {2, 4, {1, 0}} -> 0.25, {2, 4, {0, 1}} -> 0.25, {2, 4, {1, 1}} -> 
     0.25, {2, 4, {1, -1}} -> 0.25, {2, 4, {0, 0}} -> 0.79, {3, 4, {-1, 0}} -> 
     0.25, {3, 4, {0, -1}} -> 0.25, {3, 4, {-1, -1}} -> 0.25, {3, 4, {-1, 1}} -> 
     0.25, {3, 4, {1, 0}} -> 0.25, {3, 4, {0, 1}} -> 0.25, {3, 4, {1, 1}} -> 
     0.25, {3, 4, {1, -1}} -> 0.25, {3, 4, {0, 0}} -> 0.25, {4, 1, {-1, 0}} -> 
     0.25, {4, 1, {0, -1}} -> 0.25, {4, 1, {-1, -1}} -> 0.25, {4, 1, {-1, 1}} -> 
     0.25, {4, 1, {1, 0}} -> 0.25, {4, 1, {0, 1}} -> 0.25, {4, 1, {1, 1}} -> 
     0.25, {4, 1, {1, -1}} -> 0.25, {4, 2, {-1, 0}} -> 0.25, {4, 2, {0, -1}} -> 
     0.25, {4, 2, {-1, -1}} -> 0.25, {4, 2, {-1, 1}} -> 0.25, {4, 2, {1, 0}} -> 
     0.25, {4, 2, {0, 1}} -> 0.25, {4, 2, {1, 1}} -> 0.25, {4, 2, {1, -1}} -> 
     0.25, {4, 3, {-1, 0}} -> 0.25, {4, 3, {0, -1}} -> 0.25, {4, 3, {-1, -1}} -> 
     0.25, {4, 3, {-1, 1}} -> 0.25, {4, 3, {1, 0}} -> 0.25, {4, 3, {0, 1}} -> 
     0.25, {4, 3, {1, 1}} -> 0.25, {4, 3, {1, -1}} -> 0.25, {4, 4, {-1, 0}} -> 
     0.25, {4, 4, {0, -1}} -> 0.25, {4, 4, {-1, -1}} -> 0.25, {4, 4, {-1, 1}} -> 
     0.25, {4, 4, {1, 0}} -> 0.25, {4, 4, {0, 1}} -> 0.25, {4, 4, {1, 1}} -> 
     0.25, {4, 4, {1, -1}} -> 0.25, {1, 5, {-1, 0}} -> 0.25, {1, 5, {0, -1}} -> 
     0.25, {1, 5, {-1, -1}} -> 0.25, {1, 5, {-1, 1}} -> 0.25, {1, 5, {1, 0}} -> 
     0.25, {1, 5, {0, 1}} -> 0.25, {1, 5, {1, 1}} -> 0.25, {1, 5, {1, -1}} -> 
     0.25, {1, 5, {0, 0}} -> 0.25, {2, 5, {-1, 0}} -> 0.25, {2, 5, {0, -1}} -> 
     0.25, {2, 5, {-1, -1}} -> 0.25, {2, 5, {-1, 1}} -> 0.25, {2, 5, {1, 0}} -> 
     0.25, {2, 5, {0, 1}} -> 0.25, {2, 5, {1, 1}} -> 0.25, {2, 5, {1, -1}} -> 
     0.25, {2, 5, {0, 0}} -> 0.25, {3, 5, {-1, 0}} -> 0.25, {3, 5, {0, -1}} -> 
     0.25, {3, 5, {-1, -1}} -> 0.25, {3, 5, {-1, 1}} -> 0.25, {3, 5, {1, 0}} -> 
     0.25, {3, 5, {0, 1}} -> 0.25, {3, 5, {1, 1}} -> 0.25, {3, 5, {1, -1}} -> 
     0.25, {3, 5, {0, 0}} -> 0.25, {4, 5, {-1, 0}} -> 0.25, {4, 5, {0, -1}} -> 
     0.25, {4, 5, {-1, -1}} -> 0.25, {4, 5, {-1, 1}} -> 0.25, {4, 5, {1, 0}} -> 
     0.25, {4, 5, {0, 1}} -> 0.25, {4, 5, {1, 1}} -> 0.25, {4, 5, {1, -1}} -> 
     0.25, {4, 5, {0, 0}} -> 0.25, {5, 1, {-1, 0}} -> 0.25, {5, 1, {0, -1}} -> 
     0.25, {5, 1, {-1, -1}} -> 0.25, {5, 1, {-1, 1}} -> 0.25, {5, 1, {1, 0}} -> 
     0.25, {5, 1, {0, 1}} -> 0.25, {5, 1, {1, 1}} -> 0.25, {5, 1, {1, -1}} -> 
     0.25, {5, 2, {-1, 0}} -> 0.25, {5, 2, {0, -1}} -> 0.25, {5, 2, {-1, -1}} -> 
     0.25, {5, 2, {-1, 1}} -> 0.25, {5, 2, {1, 0}} -> 0.25, {5, 2, {0, 1}} -> 
     0.25, {5, 2, {1, 1}} -> 0.25, {5, 2, {1, -1}} -> 0.25, {5, 3, {-1, 0}} -> 
     0.25, {5, 3, {0, -1}} -> 0.25, {5, 3, {-1, -1}} -> 0.25, {5, 3, {-1, 1}} -> 
     0.25, {5, 3, {1, 0}} -> 0.25, {5, 3, {0, 1}} -> 0.25, {5, 3, {1, 1}} -> 
     0.25, {5, 3, {1, -1}} -> 0.25, {5, 4, {-1, 0}} -> 0.25, {5, 4, {0, -1}} -> 
     0.25, {5, 4, {-1, -1}} -> 0.25, {5, 4, {-1, 1}} -> 0.25, {5, 4, {1, 0}} -> 
     0.25, {5, 4, {0, 1}} -> 0.25, {5, 4, {1, 1}} -> 0.25, {5, 4, {1, -1}} -> 
     0.25, {5, 5, {-1, 0}} -> 0.25, {5, 5, {0, -1}} -> 0.25, {5, 5, {-1, -1}} -> 
     0.25, {5, 5, {-1, 1}} -> 0.25, {5, 5, {1, 0}} -> 0.25, {5, 5, {0, 1}} -> 
     0.25, {5, 5, {1, 1}} -> 0.25, {5, 5, {1, -1}} -> 
     0.25}, $CellContext`m1Sel$$ = 2, $CellContext`m2Sel$$ = 
    2, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$104108, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}}, $CellContext`moSel$$ = 
    4, $CellContext`omegaIndex$$ = 
    6, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {
      4.2, 7.6000000000000005`, 14.200000000000001`, 20, 26.900000000000002`},
      "numberOfMasses" -> 5, "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2618828451882844, 0.25569037656903765`}, {
      0.7875732217573221, 0.17644351464435154`}, {0.67928870292887, 
      0.7274058577405859}, {0.6797907949790796, 0.45158995815899583`}, {
      0.11108786610878668`, 0.7257322175732218}}, 
     "mPosFirstCell" -> {{0.512, 0.5449999999999999}, {0.41400000000000015`, 
      1.165}, {1.4500000000000002`, 1.4649999999999999`}, {0.9260000000000002,
       1.245}, {1.3900000000000001`, 0.7250000000000001}}, 
     "pointsDataTable" -> CompressedData["
1:eJw1U1tIlEEU/nfXXXWVJcRCosyiB8vCwLRC7JyCbkhoFhEiImImBrWFRIgY
ZRE9RGREF4sICwlEwkIkorOViXRRUcvaDF3XW23mZd2bpfbPmfHAPMx85/59
s7rwZM5Rk6ZpZv3Y9GPUz72WhKenS0L0tdaeYe21OJIuL/vWHuiGU/qt1q45
4sIO2zY2GnBpwx5XeewMGaUDDZbH6i9Bqh6vgNR8J6zPu/bGlzhGw51rvocq
jaj1ioR1UHJdOPjpUHP8Jc+BTvr3ZKprf+EA2Dm/CxrvT9S1ZppQB3UPH7QH
Drof18wQuzdPQvKPtZbzN90g8Tk4V/qy7EZcGK7jemZMzX+xL9roJf2ivxix
cMmRbc/bRkDikVjADc2qfg2OtIj6FblFH8Av3H1+avLO9Zz9qWEOFxyi1swt
V3YUhOi3KOcZpwtcrwf2ukSC11TleP9wV5MB5X0YNvAAAeJyeb0wxvM74REP
OA3ZV2+diKkyotznAlTzQv0k8VmoqxEEDICc14Qrc4vS+7NMuIoHtmKoUjSw
uI9wdPKC3CBxG35kG6IgzzNPBk3YjOJjmjanCIvEMq7/mW7fEeZSfAzRXb77
II7zvQMO16w4wPv6A22cv492q3llvoDiLwCfGLcitxdvxIJiYV/IruZtZzwI
EregrBel+I7G4IKwDopX8x7j+FlgPncuUXxO03aRLsPgsAr60keB5djgozTm
34ySfxe1nXn1YHnylOLDQxn9WToDvyCBH+qVfs0o9T4KeSI8aYIqxLjlfWCP
EQyPg+TfCx2sRwvKfBomsvw9Sh9/oUvQXToJEg9D+Z/C8S33Y0W/CG8ZU/1E
4HGW7zRI3IaS1xGSc5sdUfxvvIqHecV7BPLaU6boIu/NTRJf1NEMcHjxIMm9
RmKnFAZkc4IB2sTxz9Qe/YrHUZC6X9x7ELYy7lS68ILcU0D5a0qXUYpHC/Yw
3q10FqZ0HgKJW/E/TAUq1Q==
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {
    4.2, 7.6000000000000005`, 14.200000000000001`, 20, 
     26.900000000000002`}, $CellContext`rawNumberOfMasses$$ = 
    5, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
    3, $CellContext`tauSliderValue$$ = 3, $CellContext`tick$$ = 
    True, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 0.8}, {0.512, 
    0.5449999999999999}, {0.41400000000000015`, 1.165}, {1.4500000000000002`, 
    1.4649999999999999`}, {0.9260000000000002, 1.245}, {1.3900000000000001`, 
    0.7250000000000001}}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       TabView[{"dynamics" -> Column[{
            Dynamic[
             Row[{
               OverVector[
                Style["q", Italic, 10]], " = ", 
               
               Module[{$CellContext`qm$}, $CellContext`qm$ = 
                 ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                Slider2D[
                  
                  Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                  ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
               Style[" 2 \[Pi] ", 10], 
               Style[
                Dynamic[
                 NumberForm[
                  MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
            Style[
             Row[{
               Text["number of time intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`dynMeshSize$$]}], 10], 
            Style[
             Row[{
               Text["time, normalized to one period, "], 
               Style["t", Italic], "/", 
               Style["T", Italic], " = ", 
               Dynamic[
                
                N[($CellContext`tauSliderValue$$ - 
                  1)/$CellContext`dynMeshSize$$]]}], 10], 
            Row[{
              Dynamic[
               Manipulator[
                
                Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {
                1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                ContinuousAction -> True, Appearance -> "Open", 
                AppearanceElements -> {
                 "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                  "FasterSlowerButtons", "DirectionButton"}]]}], 
            Style[
             Row[{
               Text["oscillation scale factor:"]}], 10], 
            Style[
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
            Style[
             Row[{
               Text["angular frequency \[Omega]("], 
               Style["q", Italic], 
               Text["), selection: "], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
         "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
         Column[{
            Style[
             Row[{
               Text["number of mesh intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`freqMeshSize$$]}], 10], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}], "parameters" -> Grid[{{
             Style[
              Row[{
                Text["mass: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                  Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                   ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {0.25, 
                  Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
             Text["\n"], ""}, {
             Text[
              Style["coupling to neighboring: ", 10]], 
             Style[
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]], 10]}, {
             Style[
              Row[{
                Text["horizontal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 1], FontColor -> RGBColor[
                   Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                OverVector[
                 Style["a", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["vertical: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 2], FontColor -> RGBColor[0, 
                   Rational[2, 3], 0]], " || ", 
                OverVector[
                 Style["b", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 3], FontColor -> 
                 RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                " || (", 
                OverVector[
                 Style["b", Italic]], " + ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 4], FontColor -> RGBColor[0, 
                   Rational[2, 3], 
                   Rational[2, 3]]], " || (", 
                OverVector[
                 Style["b", Italic]], " - ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
             Text["\n"], ""}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Text["coupling from "], 
                  Dynamic[
                   $CellContext`massLabel[$CellContext`m1Sel$$]], 
                  Text[" to: "]}], 10]]], 
             Dynamic[
              Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
               Style[
                Dynamic[
                 $CellContext`massLabel[
                  First[
                   Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
               Blank[], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  DeleteCases[
                   
                   Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  $CellContext`kLable[5], ": "}], 10]]], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Dynamic[
                   Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
        Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], ImageSize -> {250, 350}]],
       Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 12}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 3}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 1}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = {
    464., {228., 236.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        12, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10}, $CellContext`rawNumberOfMasses$$ = 
        1, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
        3, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         Switch[$CellContext`tabNumber$$, $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], $CellContext`freqTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
            Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
          Blank[], 
          LocatorPane[
           Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                 Dimensions[#]] < 3, 
               
               Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[$CellContext`rawArrayOfMasses$$]]; 
              
              If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                  $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                
                While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[$CellContext`kArray$$, All, 1], All, 1]]; 
              If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                
                While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 1], 
               Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                 Part[$CellContext`u$$, 2], 
                 
                 Part[$CellContext`u$$, 
                  2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 2], 
               Part[$CellContext`u$$, 2]]; {
               Part[$CellContext`u$$, 1], 
               
               Part[$CellContext`u$$, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
             If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
             If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
             If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
             If[$CellContext`omegaIndex$$ > 
               2 $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
             ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
              2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
             True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
           $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
           LocatorAutoCreate -> True, ContinuousAction -> False]]]), 
      "Specifications" :> {
        TabView[{"dynamics" -> Column[{
             Dynamic[
              Row[{
                OverVector[
                 Style["q", Italic, 10]], " = ", 
                
                Module[{$CellContext`qm$}, $CellContext`qm$ = 
                  ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                 Slider2D[
                   
                   Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False,
                    ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
                Style[" 2 \[Pi] ", 10], 
                Style[
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
             Style[
              Row[{
                Text["number of time intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`dynMeshSize$$]}], 10], 
             Style[
              Row[{
                Text["time, normalized to one period, "], 
                Style["t", Italic], "/", 
                Style["T", Italic], " = ", 
                Dynamic[
                 
                 N[($CellContext`tauSliderValue$$ - 
                   1)/$CellContext`dynMeshSize$$]]}], 10], 
             Row[{
               Dynamic[
                Manipulator[
                 
                 Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {
                 1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                 ContinuousAction -> True, Appearance -> "Open", 
                 AppearanceElements -> {
                  "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                   "FasterSlowerButtons", "DirectionButton"}]]}], 
             Style[
              Row[{
                Text["oscillation scale factor:"]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
             Style[
              Row[{
                Text["angular frequency \[Omega]("], 
                Style["q", Italic], 
                Text["), selection: "], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
          "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
          Column[{
             Style[
              Row[{
                Text["number of mesh intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`freqMeshSize$$]}], 10], 
             LocatorPane[
              Dynamic[$CellContext`qPlaneLoc$$], 
              Dynamic[
               (Graphics[{
                 Lighter[Gray], 
                 Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                 Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
              ContinuousAction -> False]}], "parameters" -> Grid[{{
              Style[
               Row[{
                 Text["mass: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                   Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                   Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
              Text["\n"], ""}, {
              Text[
               Style["coupling to neighboring: ", 10]], 
              Style[
               Dynamic[
                If[$CellContext`rawNumberOfMasses$$ > 1, 
                 SetterBar[
                  
                  Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   Range[$CellContext`rawNumberOfMasses$$]]], 
                 $CellContext`massLabel[1]]], 10]}, {
              Style[
               Row[{
                 Text["horizontal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 1], FontColor -> RGBColor[
                    Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                 OverVector[
                  Style["a", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["vertical: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 2], FontColor -> RGBColor[0, 
                    Rational[2, 3], 0]], " || ", 
                 OverVector[
                  Style["b", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 3], FontColor -> 
                  RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                 " || (", 
                 OverVector[
                  Style["b", Italic]], " + ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 4], FontColor -> RGBColor[0, 
                    Rational[2, 3], 
                    Rational[2, 3]]], " || (", 
                 OverVector[
                  Style["b", Italic]], " - ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
              Text["\n"], ""}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Text["coupling from "], 
                   Dynamic[
                    $CellContext`massLabel[$CellContext`m1Sel$$]], 
                   Text[" to: "]}], 10]]], 
              Dynamic[
               Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
                Style[
                 Dynamic[
                  $CellContext`massLabel[
                   First[
                    Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
                Blank[], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   DeleteCases[
                    
                    Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   $CellContext`kLable[5], ": "}], 10]]], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Dynamic[
                    Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
         Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
         ImageSize -> {250, 350}], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 12}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10}}, 0, ControlType -> 
         None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{864., {266., 273.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -(Part[$CellContext`qMax, 1]/2), Part[$CellContext`qMax, 1]/
               2, Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -(
                Part[$CellContext`qMax, 2]/2), Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}, PerformanceGoal -> 
           "Quality"]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {342., 
        342.}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, \
$CellContext`n$]/($CellContext`glConstMMax 500)]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               Part[#, 3], 
               FE`glConstSpringColorsByN$$474]]& , $CellContext`cN$]; 
         If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                Part[#, 3], 
                FE`glConstSpringColorsByN$$474]]& , $CellContext`cOrigin$]], 
           Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                  Style["a", Italic]], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                  Style["b", Italic]], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], Attributes[$CellContext`uLoc$] = {Temporary}, 
       Attributes[$CellContext`ld$] = {Temporary}, 
       Attributes[$CellContext`cd$] = {Temporary}, 
       Attributes[$CellContext`m1Ind$] = {Temporary}, 
       Attributes[$CellContext`m2Ind$] = {Temporary}, 
       Attributes[$CellContext`moInd$] = {Temporary}, 
       Attributes[$CellContext`aLoc$] = {Temporary}, 
       Attributes[$CellContext`bLoc$] = {Temporary}, 
       Attributes[$CellContext`mLoc$] = {Temporary}, 
       Attributes[$CellContext`pointsList$] = {Temporary}, 
       Attributes[$CellContext`latticeBasis$] = {Temporary}, 
       Attributes[$CellContext`reciprocalBasis$] = {Temporary}, 
       Attributes[$CellContext`pointsDataTable$] = {Temporary}, 
       Attributes[$CellContext`numberLatticeLinesToDisplay$] = {Temporary}, 
       Attributes[$CellContext`lines$] = {Temporary}, 
       Attributes[$CellContext`cOrigin$] = {Temporary}, 
       Attributes[$CellContext`cN$] = {Temporary}, 
       Attributes[$CellContext`g$] = {Temporary}, 
       Attributes[$CellContext`mScalarArray$] = {Temporary}, 
       Attributes[$CellContext`numberOfMasses$] = {Temporary}, 
       Attributes[$CellContext`scaleLoc$] = {Temporary}, 
       Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
       Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, FE`glConstSpringColorsByN$$474 = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 
       7.6000000000000005`, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]], \
$CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6055229213532424`*^9, {3.6055233758382373`*^9, 3.605523392246176*^9}, {
   3.605523656985318*^9, 3.605523754074871*^9}, {3.605524067847818*^9, 
   3.6055240751742373`*^9}, 3.605524144345194*^9, 3.6055242676772475`*^9, 
   3.6055243639877567`*^9, 3.6055245164274755`*^9, 3.605524593683894*^9, {
   3.6055246502131276`*^9, 3.605524675557577*^9}, 3.605524914592249*^9, {
   3.605524950877324*^9, 3.605525024352527*^9}, {3.6055250950575714`*^9, 
   3.6055251192499547`*^9}, {3.6055252062219296`*^9, 3.605525226185071*^9}, 
   3.6055252985342093`*^9, {3.6055253708163433`*^9, 3.605525397274857*^9}, {
   3.605525442034417*^9, 3.605525469464986*^9}, {3.6055255165876813`*^9, 
   3.6055255276503143`*^9}, {3.6055256033916464`*^9, 3.6055257473548803`*^9}, 
   3.6055258023860283`*^9, {3.6055258396201577`*^9, 3.6055259782210855`*^9}},
 CellID->554074245]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    True, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 3, {0, 0}, 0.25, 0.22350400000000004`, {0.9, 0.7}, {0.552, 1.02}, {{
        0.5418426515856538, -0.4982461164006013}, {-0.4982461164006013, 
        0.4581573484143462}}}, {
       1, 2, {0, 0}, 0.25, 0.3195410000000001, {0.9, 0.7}, {1.154, 1.205}, {{
        0.20190210332946298`, 0.40141953614716086`}, {0.40141953614716086`, 
        0.798097896670537}}}}, {{
       2, 1, {0, 0}, 0.25, 0.3195410000000001, {0.9, 0.7}, {1.154, 1.205}, {{
        0.20190210332946298`, 0.40141953614716086`}, {0.40141953614716086`, 
        0.798097896670537}}}, {
       2, 3, {0, 0}, 0.25, 0.39662899999999984`, {1.154, 1.205}, {0.552, 
        1.02}, {{0.9137102934984582, 0.2807913692644765}, {0.2807913692644765,
         0.08628970650154183}}}}, {{
       3, 1, {0, 0}, 0.25, 0.22350400000000004`, {0.9, 0.7}, {0.552, 1.02}, {{
        0.5418426515856538, -0.4982461164006013}, {-0.4982461164006013, 
        0.4581573484143462}}}, {
       3, 2, {0, 0}, 0.25, 0.39662899999999984`, {1.154, 1.205}, {0.552, 
        1.02}, {{0.9137102934984582, 0.2807913692644765}, {0.2807913692644765,
         0.08628970650154183}}}}}, {{{
       1, 2, {-1, 0}, 0.25, 0.6557409999999998, {0.9, 0.7}, {
        1.0539999999999998`, -0.09499999999999997}, {{
        0.036166718262240646`, -0.18670481180832046`}, {-0.18670481180832046`,
         0.9638332817377593}}}, {
       1, 3, {-1, 0}, 0.25, 1.161104, {0.9, 0.7}, {
        0.45200000000000007`, -0.28}, {{0.1728561782579338, 
        0.3781228899392302}, {0.3781228899392302, 0.8271438217420661}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 3, {-1, 1}, 0.25, 2.140704, {0.9, 0.7}, {2.352, 0.52}, {{
        0.9848647921431455, -0.12209067671196015`}, {-0.12209067671196015`, 
        0.015135207856854557`}}}, {
       1, 3, {1, 0}, 0.25, 2.6859040000000007`, {0.9, 0.7}, {0.652, 
        2.3200000000000003`}, {{
        0.022898807999094523`, -0.14958092321989166`}, {-0.14958092321989166`,
         0.9771011920009055}}}, {
       1, 2, {0, -1}, 0.25, 2.796341, {0.9, 0.7}, {-0.746, 0.405}, {{
        0.9688789743454035, 0.17364477365242645`}, {0.17364477365242645`, 
        0.031121025654596478`}}}, {
       1, 2, {1, 0}, 0.25, 3.3833409999999997`, {0.9, 0.7}, {1.254, 2.505}, {{
        0.03703912789163138, 0.1888577001254086}, {0.1888577001254086, 
        0.9629608721083687}}}, {
       1, 2, {1, -1}, 0.25, 3.4001409999999996`, {0.9, 
        0.7}, {-0.6459999999999999, 1.705}, {{
        0.7029461425276187, -0.45696046134557367`}, {-0.45696046134557367`, 
        0.2970538574723814}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 3, {0, 1}, 0.25, 3.6631040000000006`, {0.9, 0.7}, {2.452, 1.82}, {{
        0.6575581801663289, 0.4745265217695157}, {0.4745265217695157, 
        0.34244181983367117`}}}, {
       1, 2, {-1, 1}, 0.25, 4.218940999999999, {0.9, 0.7}, {
        2.9539999999999997`, 0.7050000000000001}, {{0.9999940743423528, 
        0.0024342601614955597`}, {0.0024342601614955597`, 
        5.92565764726294*^-6}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 3, {0, -1}, 0.25, 5.283904, {0.9, 0.7}, {-1.3479999999999999`, 
        0.21999999999999997`}, {{0.956395876987924, 0.2042126427732222}, {
        0.2042126427732222, 0.043604123012075925`}}}, {
       1, 3, {1, -1}, 0.25, 5.2863039999999994`, {0.9, 
        0.7}, {-1.2479999999999998`, 1.52}, {{
        0.8728033802066621, -0.33319309672693814`}, {-0.33319309672693814`, 
        0.12719661979333768`}}}, {
       1, 2, {-1, -1}, 0.25, 5.592541, {0.9, 
        0.7}, {-0.8460000000000001, -0.895}, {{0.5451039160910934, 
        0.4979614811943265}, {0.4979614811943265, 0.4548960839089065}}}, {
       1, 2, {0, 1}, 0.25, 6.342741, {0.9, 0.7}, {3.054, 2.005}, {{
        0.7315001511176319, 0.4431790609138856}, {0.4431790609138856, 
        0.268499848882368}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 3, {1, 1}, 0.25, 8.585504, {0.9, 0.7}, {2.552, 3.12}, {{
        0.31787347603588567`, 0.4656500072680649}, {0.4656500072680649, 
        0.6821265239641144}}}, {
       1, 3, {-1, -1}, 0.25, 8.681504, {0.9, 0.7}, {-1.448, -1.08}, {{
        0.6350401958001747, 0.4814188877871852}, {0.4814188877871852, 
        0.3649598041998253}}}, {
       1, 2, {1, 1}, 0.25, 11.866541000000002`, {0.9, 0.7}, {3.154, 3.305}, {{
        0.4281379047188224, 0.4948088916559594}, {0.4948088916559594, 
        0.5718620952811777}}}}, {{
       2, 1, {1, 0}, 0.25, 0.6557409999999998, {1.154, 1.205}, {1., 2.}, {{
        0.0361667182622407, -0.1867048118083206}, {-0.1867048118083206, 
        0.9638332817377593}}}, {
       2, 3, {1, 0}, 0.25, 1.4952290000000004`, {1.154, 1.205}, {0.652, 
        2.3200000000000003`}, {{
        0.1685387321941989, -0.37434399680584035`}, {-0.37434399680584035`, 
        0.8314612678058011}}}, {
       2, 2, {1, 0}, 0.25, 1.6999999999999995`, {1.154, 1.205}, {1.254, 
        2.505}, {{0.005882352941176483, 0.07647058823529419}, {
        0.07647058823529419, 0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {1.154, 1.205}, {
        1.0539999999999998`, -0.09499999999999997}, {{0.00588235294117648, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588234}}}, {
       2, 3, {-1, 1}, 0.25, 1.904429, {1.154, 1.205}, {2.352, 0.52}, {{
        0.7536138128541415, -0.4309060616069174}, {-0.4309060616069174, 
        0.24638618714585847`}}}, {
       2, 3, {0, 1}, 0.25, 2.0630290000000002`, {1.154, 1.205}, {2.452, 
        1.82}, {{0.8166652044154493, 0.3869407555589378}, {0.3869407555589378,
         0.18333479558455065`}}}, {
       2, 3, {-1, 0}, 0.25, 2.698029, {1.154, 1.205}, {
        0.45200000000000007`, -0.28}, {{0.1826533369359632, 
        0.38638205890299915`}, {0.38638205890299915`, 0.8173466630640369}}}, {
       2, 1, {0, 1}, 0.25, 2.796341, {1.154, 1.205}, {2.8, 1.5}, {{
        0.9688789743454035, 0.17364477365242645`}, {0.17364477365242645`, 
        0.031121025654596478`}}}, {
       2, 1, {-1, 0}, 0.25, 3.383341, {1.154, 1.205}, {
        0.8, -0.6000000000000001}, {{0.03703912789163134, 
        0.1888577001254085}, {0.1888577001254085, 0.9629608721083687}}}, {
       2, 1, {-1, 1}, 0.25, 3.4001409999999996`, {1.154, 1.205}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.7029461425276187, -0.45696046134557367`}, {-0.45696046134557367`, 
        0.2970538574723814}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {1.154, 
        1.205}, {-0.6459999999999999, 1.705}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {1.154, 1.205}, {
        2.9539999999999997`, 0.7050000000000001}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {1, -1}, 0.25, 4.218940999999999, {1.154, 
        1.205}, {-0.8999999999999998, 1.2}, {{0.9999940743423528, 
        0.0024342601614955597`}, {0.0024342601614955597`, 
        5.92565764726294*^-6}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {1.154, 1.205}, {3.054, 2.005}, {{
        0.8494117647058823, 0.3576470588235293}, {0.3576470588235293, 
        0.15058823529411758`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {1.154, 1.205}, {-0.746, 0.405}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 1, {1, 1}, 0.25, 5.592540999999999, {1.154, 1.205}, {2.9, 2.8}, {{
        0.5451039160910935, 0.49796148119432654`}, {0.49796148119432654`, 
        0.45489608390890646`}}}, {
       2, 3, {1, 1}, 0.25, 5.621629, {1.154, 1.205}, {2.552, 3.12}, {{
        0.3476579475450977, 0.4762267307216467}, {0.4762267307216467, 
        0.6523420524549023}}}, {
       2, 3, {1, -1}, 0.25, 5.868828999999998, {1.154, 
        1.205}, {-1.2479999999999998`, 1.52}, {{
        0.9830928793461182, -0.12892350416071077`}, {-0.12892350416071077`, 
        0.016907120653881717`}}}, {
       2, 1, {0, -1}, 0.25, 6.342741, {1.154, 
        1.205}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7315001511176319, 0.44317906091388565`}, {0.44317906091388565`, 
        0.2684998488823681}}}, {
       2, 3, {0, -1}, 0.25, 7.230228999999999, {1.154, 
        1.205}, {-1.3479999999999999`, 0.21999999999999997`}, {{
        0.8658099210965516, 0.340856423773023}, {0.340856423773023, 
        0.13419007890344833`}}}, {
       2, 2, {1, 1}, 0.25, 8.41, {1.154, 1.205}, {3.154, 3.305}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {1.154, 
        1.205}, {-0.8460000000000001, -0.895}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       2, 1, {-1, -1}, 0.25, 11.866541000000002`, {1.154, 
        1.205}, {-1.1, -1.4000000000000001`}, {{0.4281379047188224, 
        0.4948088916559594}, {0.4948088916559594, 0.5718620952811777}}}, {
       2, 3, {-1, -1}, 0.25, 11.991629, {1.154, 1.205}, {-1.448, -1.08}, {{
        0.5645941848267654, 0.49581003548391966`}, {0.49581003548391966`, 
        0.4354058151732346}}}}, {{
       3, 1, {1, 0}, 0.25, 1.161104, {0.552, 1.02}, {1., 2.}, {{
        0.1728561782579338, 0.3781228899392302}, {0.3781228899392302, 
        0.8271438217420661}}}, {
       3, 2, {-1, 0}, 0.25, 1.4952289999999997`, {0.552, 1.02}, {
        1.0539999999999998`, -0.09499999999999997}, {{
        0.1685387321941989, -0.3743439968058403}, {-0.3743439968058403, 
        0.8314612678058011}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {0.552, 1.02}, {0.652, 
        2.3200000000000003`}, {{0.005882352941176465, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {0.552, 1.02}, {
        0.45200000000000007`, -0.28}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       3, 2, {1, -1}, 0.25, 1.904429, {0.552, 1.02}, {-0.6459999999999999, 
        1.705}, {{
        0.7536138128541415, -0.4309060616069174}, {-0.4309060616069174, 
        0.24638618714585847`}}}, {
       3, 2, {0, -1}, 0.25, 2.0630290000000002`, {0.552, 1.02}, {-0.746, 
        0.405}, {{0.8166652044154493, 0.3869407555589378}, {
        0.3869407555589378, 0.18333479558455065`}}}, {
       3, 1, {1, -1}, 0.25, 2.140704, {0.552, 1.02}, {-0.8999999999999998, 
        1.2}, {{0.9848647921431455, -0.12209067671196015`}, \
{-0.12209067671196015`, 0.015135207856854557`}}}, {
       3, 1, {-1, 0}, 0.25, 2.6859040000000003`, {0.552, 1.02}, {
        0.8, -0.6000000000000001}, {{
        0.02289880799909453, -0.1495809232198917}, {-0.1495809232198917, 
        0.9771011920009056}}}, {
       3, 2, {1, 0}, 0.25, 2.6980289999999996`, {0.552, 1.02}, {1.254, 
        2.505}, {{0.18265333693596328`, 0.3863820589029992}, {
        0.3863820589029992, 0.8173466630640368}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {0.552, 
        1.02}, {-1.2479999999999998`, 1.52}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999993`, {0.552, 1.02}, {2.352, 
        0.52}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 1, {0, -1}, 0.25, 3.6631040000000006`, {0.552, 
        1.02}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.6575581801663289, 0.4745265217695157}, {0.4745265217695157, 
        0.34244181983367117`}}}, {
       3, 3, {0, 1}, 0.25, 4.25, {0.552, 1.02}, {2.452, 1.82}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {0.552, 1.02}, {-1.3479999999999999`, 
        0.21999999999999997`}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 1, {0, 1}, 0.25, 5.283904, {0.552, 1.02}, {2.8, 1.5}, {{
        0.956395876987924, 0.2042126427732222}, {0.2042126427732222, 
        0.043604123012075925`}}}, {
       3, 1, {-1, 1}, 0.25, 5.2863039999999994`, {0.552, 1.02}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.8728033802066621, -0.33319309672693814`}, {-0.33319309672693814`, 
        0.12719661979333768`}}}, {
       3, 2, {-1, -1}, 0.25, 5.621629, {0.552, 
        1.02}, {-0.8460000000000001, -0.895}, {{0.3476579475450977, 
        0.4762267307216467}, {0.4762267307216467, 0.6523420524549023}}}, {
       3, 2, {-1, 1}, 0.25, 5.868828999999998, {0.552, 1.02}, {
        2.9539999999999997`, 0.7050000000000001}, {{
        0.9830928793461182, -0.12892350416071077`}, {-0.12892350416071077`, 
        0.016907120653881717`}}}, {
       3, 2, {0, 1}, 0.25, 7.230228999999999, {0.552, 1.02}, {3.054, 
        2.005}, {{0.8658099210965516, 0.34085642377302294`}, {
        0.34085642377302294`, 0.13419007890344828`}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {0.552, 1.02}, {2.552, 3.12}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {0.552, 1.02}, {-1.448, -1.08}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 1, {-1, -1}, 0.25, 8.585504, {0.552, 
        1.02}, {-1.1, -1.4000000000000001`}, {{0.31787347603588567`, 
        0.4656500072680649}, {0.4656500072680649, 0.6821265239641144}}}, {
       3, 1, {1, 1}, 0.25, 8.681503999999999, {0.552, 1.02}, {2.9, 2.8}, {{
        0.6350401958001747, 0.4814188877871853}, {0.4814188877871853, 
        0.36495980419982527`}}}, {
       3, 2, {1, 1}, 0.25, 11.991629, {0.552, 1.02}, {3.154, 3.305}, {{
        0.5645941848267654, 0.49581003548391966`}, {0.49581003548391966`, 
        0.4354058151732346}}}}}}, $CellContext`dynamics$$ = {{
      Complex[1.2535024781865545`, 8.33933923211656*^-20], {Complex[
      0.7912925371870255, 0.], Complex[0.6056495913912743, 
      0.0012067642182265112`], Complex[
      0.028155548030476894`, -0.014913498441097371`], Complex[
      0.016546148498275026`, -0.014017348220579132`], Complex[
      0.04970507276893274, 0.0054046034822372024`], Complex[
      0.05526424708379117, 0.0019716374938939926`]}}, {
      Complex[0.818822583257939, 7.716940480082151*^-19], {
      Complex[-0.6028348604450084, 0.0037851838101199383`], Complex[
      0.7817840802009597, 0.], Complex[
      0.014696802970483007`, -0.03263795457747169], 
      Complex[-0.0402118471603789, 0.028198885983501298`], Complex[
      0.13589471584510102`, 0.002260333498283554], 
      Complex[-0.05516796656933461, -0.013418867435672886`]}}, {
      Complex[0.6141526597601407, 2.2320271566478883`*^-18], {
      Complex[-0.011657626070015595`, 0.007583585129804407], 
      Complex[-0.10918280752619884`, -0.0016601900176001494`], Complex[
      0.05488099100465309, -0.03891094800159618], Complex[
      0.09458313475831484, -0.04801584464808954], Complex[0.8208315110225518, 
      0.], Complex[0.5462008883695605, 0.002385705664088439]}}, {
      Complex[0.44912093692199573`, 2.76921403842953*^-18], {
      Complex[-0.0461976720814752, -0.014352799974086039`], Complex[
      0.014922545868522433`, -0.010174283264662505`], Complex[
      0.810534796700599, 0.], Complex[0.5379194547262682, 
      0.024641585253424914`], 
      Complex[-0.17998047624960212`, -0.08725158133797101], Complex[
      0.10013269358639848`, 0.019235463364375913`]}}, {
      Complex[0.38908389763354634`, -1.8996793954248413`*^-17], {
      Complex[-0.06710727197636869, 0.0070746316576589365`], Complex[
      0.06641612945459578, -0.005956656007541075], 
      Complex[-0.045187801736964045`, -0.06813590730405644], 
      Complex[-0.25983846060920823`, 0.19922279853762248`], 
      Complex[-0.48423884252131916`, -0.00017504759733903003`], Complex[
      0.8016373893633809, 0.]}}, {
      Complex[0.2598058449163575, -3.953357478180665*^-17], {
      Complex[-0.03859958263910673, -0.0430687947465687], Complex[
      0.05519293630264649, 0.04751929909488043], 
      Complex[-0.5739769120327077, -0.008777473196253327], Complex[
      0.7672651313674197, 0.], 
      Complex[-0.13008102284334933`, -0.1176825117997327], Complex[
      0.12992286799592193`, 
      0.1596191969177211]}}}, $CellContext`dynMeshSize$$ = 
    17, $CellContext`dynPlot$$ = {CompressedData["
1:eJwVl3k81F8bhofZGLskIdEiSpKIKOeQEJI2SZaibAkRKpIQwk8SQipEWUpk
TzlDKVt2CmU3jHUWZuzeef84/35nns9zzn1dt5y9x9nrOAwGg+UcUc4R5Bxu
zkmT0TRhmDBRsH+xc3k0nnx016Gz09zjYEVyN8u6eB01TErtbczAwSpMVT3W
kI4cA21UhozpKLwwOepJEQvVffWmqjpSgelCzi8cdgQJFqxit4biYfkBub+C
7AaQ46AjLvlsDvEEn9n2jPgVHWPoDQxJT4N9BTHBD8XGge9Qj6BJBAFWnbqT
MvaVDbwfnGqQ151BwVRV2rsbTNC58UGdQJ8Dypd/fb+Cw8C033qZ9y8Q4eT3
78Hi+gTo0jZk4qg6iWKdzDzE5XGwy4i/vnKWDqRH9waHHSXBXJ/iN+GrDCTK
HzsgWownb8KIaN0MpIDjpp9zXnmvo6td1M0yOThIg4xlw7N0NJ37dRO3CR2d
WvPC5Rez0ONH27sIjAngeK7G/EHMMDJZ1ul49B4P6yJr603u1AHfSFcp3FYa
kq1+UYrfWY4Uh6MfRvlMg4feXVKrVRRgeUJjRvMpAXplRxvw5rGBRnBL6t+A
GUSWeatkHskEibnauueO00Bw/Udn66oNMORVfN5DhQgdyV8bvZ0JcJsdf91G
DhUdS2x69xmHgz2vD7qm99OB6fq9jv7jJLh3t8jlP70M5L7zqZRRLZ7MUGma
6RwbA4qb/Z3b9qwjQR9RaPwLB2VtMHVqyXQkqXlEZCiajvrsk7XO3GahzW7/
dRJJVFAcVbyP/GYYSQ4YucjU4mHSP/n+x1M/QCyjUiLmHA1JDLd5N/sVo5cu
n2+obpkBHePUXOvtFNBW6PDsvC8B7qDrPwEDbPB08e1zk90zCHd6MHjrFSYQ
OJDL3X6BBm6K/UsYyN0AZVv2KhQKECHFJCJhaxQBUq9f9R3aREW9me17XAew
8MYmjF9dPB2oXZMN2upMgqrxwgMiWCYyanSVYhbiyfv4kxh15WPAxeJQi43w
OpqvTb0rQMfBpEnapM8gHdEScvde66EjbHOHtLkCCyV+6n8ml0IF/YGpQpiD
I8jK6ETm6Qo8LMA1MN6n/gRp8mDXISMacra8p5m4pQRdf7/zyct7M2B11b9I
sXIMmOFcm6XNCHA1Ouhen/IiaHT6XFQUMo3sl17UnxNmgh8fLMrDZGnA3d4L
JPVvAJKuhfw5EhHy/47U4X9CgEUJZyNezUwg7tCM7MtdWHg17BCJbUYH1gp0
9YlIEnSXfQtjzjHR8EroVxCJJ3940NbLlqaAuRf11CG4jhQ2li7fZ+Gg6Mbn
p57TdGT0WextJI2Odpe35+gIs1Al5UB8veIkiN2ihd9CHkHXWjvFluPw0Nww
cTqcXQ+ucLvMeGFoaLGaUFscUIEeveAazTCdAUmzb66rUcYAAeO05bAWAd45
ECR14uIieBZv6K67fRoFG1PHKv4xwOhbMQX+tDlg6Xgaym3BQGNedXt5RSKs
yb5ute5JgDsHPYI1L1JRlyREi7NY2HRL0DbekA5Y3SIS+5+QoJHqnZalCCaa
RNEVDh548lfXD33POO/iCMVeqy52Hbk3WScI9OCgp+Rr3+1FnPeXWL3EqqIj
0O+7qANZyCKrK6ATToK0bTTiuZ4RVKy8u0vZCw9jr5twtWKbwCb5H/JZnnNI
RaK1ZX3pK+ra+eBtedE00FSrj/YPoIC0vZ0qBiYEePbG4vH8w4vAzq9ratlk
Gqlhb/W8ZjDAzWjcB7PTc2C1yUrj5T4M/HNRu/GqORFKEhLHNhkT4K3sracv
LVJR+YLnlU5xHJQyfsPVHEoHMTg3xoVbJKj/rL4v05eJAnmfjnT74cmhxbuI
N8XHQWP5xyStr+toNOtJv00hDmI0W77evkZHEcaUZjl3Olo7ENugGMtCnxx+
da40UgHpnZFuktMIivpnGmfNmS8otih9ntQEfsXc1z1tOYecNWQPiDRXoZMq
juN1B6aByD2xlpOYcfDlV5Ei0ZsAJ5pPNVyaYIPw5yIvfEen0eDyql3kMSZg
Pk/dZRc3B8JJO1xeSmHg28ujXGp2RLi561N4L2fv4bI9QprGk2hF6Yb88304
aF/I/8+tgw5c2wxYlsYkOKF8VmxsHxMpqL6qDE/Fkys6G3iJfRTANfqbTkpf
R/2DPENpaTgYuVQfq6NHR6vfeKRydOlI4CRFdfdXFvqjIvx5TYkK1sVLr/A2
DCP1iFBem2d4OLj0bPcqoQH4sSxCQBNnPlpnziPDShR3VU3/IGe+cqQdZ4Md
B+Hb2iY0Ygkw1CX7068PbKC4pEGRd5lBzZ/bHzU/YIL4CXFcnAQNlMQbYnio
G4Df1WiXxkkiTCi55SZoToA3zqhlWfJMou6YfVojUjgYUZ1c9J5OB75YAZMO
LRKcffUnV3ecgQ6TBcVrq/BkwfUHDSI6FGAX90D917l1FCpxmed3MQ4OBv07
JOVCRxZ7bx8j29JR22WTgNh0Tr5I1H3umZgA7uHm371Ch1GVehRvAidfLBNn
rUPe/QRJWY2SX9U5+RlHPmp5qRTtkHVK8Pw0DUJcffp3hlBA+US7+81IAnwl
sP8VtpwN2qoLZQRuzKCIc5b5aw+ZIMcS0+F4jgb25Hd38eVvAH//4R8tskQY
bZ8mzfQjQKd96c5dLlRkcQyY9s1j4b2bY2Twgw4Ww9Rp5NMk6Os7cnj3MAMt
33r6YbIaT+47q7yrp2YMrL1ZPiojvo6SWlJkJP7hoBZvfUxEOR0FnQx7I/KB
jl5SsCv3z7NQg8C+nieaVNBNTPAmtQ2j0hV7VX4OH1S8ZrILJ34AmHvqP0dL
GgpS+/XMamcxulbC3/HFZAZ4UoKTBybHgKqLb9cDRwJUsIhe81xng6zzjyLj
JqbRza+m0vp6TBCavi3Sz4gGrm5IFb8s2wCdu/ccaiAS4Rf9F68UOdw8XlYg
a8icQHEatXm7f2Mh0bzB5a4PHSTKzh1M8yPBK+GtoFuWiQqYIM3iDZ68/8vY
Fc/WMTBVrWfwXIrD9yd2A2VsHLSQ1MjePEtHvvum+rZO0RF9pdzWUZyFzpRQ
jnn1cPiw+WRAlQcnP8XLj+7j8N2ZK1tK3rUOLOoTnLcd5OSn1Q5Jrgel6FbI
Mr2Hw4eLi8fW5yrGwJ3xmIUAPQKMrCXtVDJYBBrs9Vd/zaaRtbvQYdoCA9gc
rP1JxdDAnauVBl/WNoBzdm+p2CYiVKFeKE0JI8AHZyrWe4hUNLul7UFqHxYq
6r45OqVHB3d8StPFn5JgPv+V7BF3Jlo99HjXywA82ZUvbOvdyxRwBny4mGm3
jtLKowc8Z3Fw1D63mvWXjuazDDALo3RU4R92U0uKhcx97+lM60+CYV4Zg199
I8it/E9ndQjHz4x+HL9FbQBlIwVC96vnUPnN62QL70qkHcysspWYAWlcFX76
Wyng1lPM7dCjBJhL+6ykdm4R2LzGNT+QmUZy5+hH+v4yQLNuy7TKrTkg2mc6
NrADA8PYag7HjhCh8AVrB6mrHP5lx+tYJlKR0WJTU8g6Fo4NNroPWNKBuKHz
499hJFjsJTjAHcVETRnZkzvc8WTNwYifWXMU8KH04EvLnHXkCbPa8fU4+OUW
eX/gMzq65yVT++M1HQkJ7TlAs2UhiU/cWuJyk8BM2/Rz++cRdAVvuPTyJmd/
R/P1fp1uAiUPTP7xXphDlsV+Fxz6qlBN/2DUe99psLb9SYRMBQW82xozFX+J
AFUlVgMyJBfBJcWD5bQH0+j7KY1LGH4mUBWYV8JZzoGMCGXXEkUMDD11PdfS
igjjvu2I5IUEOJfRkvxkzyQy2jO1M2cHDrpn2L5fzKQDJVPJ3T5XSZDx1rb4
gw0T6W121sKF4snnL5UHYUXGgfrj5Fz+ynU0MJj47ttbjp+lR7jInaajUDOf
oZsX6Oi06vKfkWwWChlwOz0ZRQV1c57i1xVGkNN+37/6AXhI2+PA63OrEdzo
yDmV7DeHhN/Hunz49xWdcl//jd82Dep4ezN+bBoHf5UdbGwfEmCm9zWJ+kY2
OGZ3vPG93AwaClb5OHeZCV4qnLO3bpwDX7+dOvxOAAPDu1xmijnz/XGzowgC
AnwjmfaOoDeJNF+/4GtVxEG/4ri6mHHO/i6E71aHJHi+Es9s4WciSuhYFDMP
T8aXSInkvKGAb93iLvRH60hCuSH3bCYOHnaVnhc6SUfxlBwfKX062kgvYWtW
spCyb9mkCjcVxK6rneF6PYzs38b33n7D2Z/0RpEjTz3Y8SVZU45AQ+ZxVase
ZhXI2HCW18ViGrC5KIJO/yhgbB8jOSmOAB1Cu1VfZnP40Hv6hAvHr/mUUHjj
YyaQvXElxFadBnR68wKsmjbAJ52WdZwWEd7l85JbsyXAKII7T0oLFZ0/Vs5c
FeDs4dFM4uwEHTQ37Rsa1yFByZREJPiXgWRvb+V6/B1PXlI9vyqEpYATT8St
vQ+vo1zziNyv33DQNK/S0CaM04++ac+Y3qMjjTuvypPDWGil8LbIdvYEgNPX
WuOfDqP09l1yjjWc90dx5W+W+AkirfJkL5jQkNF//idF14vRH4OffZ2MaXDH
QyfV/zgF8Gz76tkbSIAGfVmpkc1sMMd47QD0Z5DviraHhgcTHN10RsjVkgYW
5OrdUrI3gHDWZGEaJ19K9xt7yjwiwJ+TT1W4VKgoA0zb+lKw0PVm5S/6Ozq4
p/Fhe6YtCaZOJRSpzjPQorq4uFoFnhzceSX5SckY0I09cltEaB0ZMb0yvkzi
IKvhXmd1Bx0lxQnxfWigI5vLQiMkDRbylygyYXtTATzTpW3FN4IoGNPAwwgP
rzj1txzV/QmGvbInQs/QEJkVY+sQUYzM6qWdPT1mgL3T45DaH2NAxaGp7J0F
h+9Nula/ty2CbXU3L+zNnkY4d1dhjx1MIFFrIBZ0kAZCNLTWF35tgF14d58s
Dh98jc+7/8fhA32lXebrxATiuaMfY9qJhXvjglQXrOgghWZP+RdKgrKYl8dI
ukyULxV60+MZnix+LSZ4dWUMLLi81f+qwrmftrY1BYs4aN6ueDKI49We9dHf
Nuh0dGK4+tZWIRbKFAcfjIUngQKhtP322xEUjwa1YlM5748QHDpoVw8CTgyX
h2yiIZ4ffAmdp8uRVCUtdMNhBgivLe183jIGyrRufUzTJkDduPjP+88vgued
7Buf904j6RGrLR9GGEDRi/3ucs0caHv+LSVREAOlqWf4t3L4jstnhIzc5dzP
OcOtN9SpyHSUKlnI2d/7eKeddhw+wP9Yli84fBiMkOlq2TKHkkCCrOBFLjK1
nRJwRWMOfJaNTrH0XUD9EmS3M00EuC5rvPDlFAXVNO5YHRGeQqW3lnKWTago
Tj8qrVSRDnjCDR3uKP9AyWcLebXdiNBd/Ulo6ycK0PGN9bnDP45w/wXX0/N7
Qcnd1IMx2gywRSOvRpJJB+NOY06CDjwwmo0CfPoxkBzOyuS3HUVmUb4iB/KX
QHOvwaeHH5ggpFKWft6V45di2Q3Jbrxwb6VsQU8Zp58XdJ3dpzyMeNbEYmIy
OVx8GBo6jhYA/pnq+QNACE5IKazUvZxFr2OXiSo/MOTuI94NVPM5IKE2Stu6
zkJxa2MPaZkc/pasXLYzH0UTVTfHDztMolY1YgWiTCLywYjRgiYasHynYqF6
rB4ZpMNUr4dEeFRl5cIjGypQjfxrxdYfR5Tg0W94RidQNHygWsDHAP640XP0
C0zQFPyI7BnHA89UWJwOfY2BCq4qXSS5MSTNUnvGRV8C/NJffvotMgHl7aqw
aj/HL6N7Dh934YXvJ3Gf3BZ4oWZFgBcAw2hOeJ/VT2ceiDcQMxDkZ4F07YlS
/wpBGHHtZCSudwZxEU5LpvzDkCXOfQcF1bNAXIru0rHARvfORLdXZxGgYNM3
2kG9IZQ2YTAoZTSJnN9fFvi9MIP+FB8T9rvP8YvGoouSl6sRv7tmXHkhEf6t
1z7s/5EKPhk1PHu4Po6aOj5FO9h2gFFVPgNndQZY1ypK6Xk/DxR688273/BA
WcboOeefG0BtJq9uT/AY8m19oHDv7ArIXLl8zePiPFh0/tBTzfF8p0+3c/4D
vLB0W16lSAovvGMpXHwpdwjd1fwgOfWPB7qbhDruI7AAl9htUg9LALYW/T58
wnMGPXPtP176mItseVK6JZhrFrhFfZw2iWEjS5M2A/FmAlTrHcdyOQwg09mn
nqB7EjWd+rL/4OQcShtkcZ8OpIHBgq2llg8zkWH0dZe8TiKcf7ozf8e1cZAR
0P1s+OUEYgm2BXw88RvwPgm725rAAFLvykNW/swD1X2fcgojeOB5MUoNjF0H
FJUkxT0qY+ivbW3cZO4qECobLWffmwc8WeEklzEsjAgqWLQW5ezv8bcdagxe
mPv3ZitxehDNRusMrqbzwOwMgvO+ogVgLtb8akuKAMR9jzmPqZhB/JvsZqK0
uMl/1YbddhbOAMLZvb+2ybBQmu+w48FVApR0tC26OzOIoGLb/srEKSSsX0vT
lZtDf4l2EqHNNIAR33lZISQEWCv95BP6RYTL7bzavxxHQah1jWgdZ76GRPOc
dYd/4KHIXM5xjnfVh/WddCthAqKPr33ZRR7oSCQY9b5cB/MPNNzSPUbRa9Js
mWrvKihQrM+4eGIeDGfO7xowwkJxEo9bIJEXkp2vnJEsJsF575HZ+28Gkdj7
jAiZcSK0nWywCbBcAKMVA2+aaQJw/hd52NZvFgmmRFUpW3OTk1vJ4b82zYLb
3JEHTvTMo+IvUq0PeYmQJM175NfMCHJuPZgZNTGFFB7PPJU5Po0S5/fqr+/l
5BX3xRd+2JdouFTFRDedCEc/n8j/qDECbh81P2rEuZ/ZVdd9o04NAoUWhknH
LwYQpz0SFz7MAPMY646BIzzQd5/Rs87RDRB4eOZqxtAIevFU36m2fAX0bgmp
cR1hgpMKQEPcjJOPIbwZvAq8kOf13synx/ggY/e7QReBIaT7MXhnOqcXsjIl
fy3pLgDiypOA258EIa60SG4H/xzqvnq6zL+di6y5af/Txe5ZwDjf4R7YMo+k
gZ/V6CSB4+HJ7rUHKCgi7W42DJ9C733M/UdKqMh4qwrtqgEdBPXaSfVrImQQ
nx9G8SHC4nHpHsvOUSAp6LOrhZMvojKZh7y0+gHWQ8r5mS8DUCvwdQkv6CDs
5+AjOSMeWPApyqUrBwNjnwyN01dH0PHNzXJVmsvAJGeLtdQ7JhCHzT6FNCzc
ukJ8UGvJC6U1FKxSpfhgja78hkrbEIL/HfHQO0WE2RrJcneCF4DMs3IL/mNC
MFpou1rP8ixKP6AUmSHMRZajv9pjf3EO3Emyk2bzsJBOK1tyoYIA9woKVEy0
jCFxIyHRY98n0eB/+3dtvKAi9avyzbW8nP3dOKvsVFKH+Eh/ZvQ8iFBUIEfv
+cg4OHwqFhvC4UOrV3mtKvgDervebg3azgDK3+K2HHZigJ7eF/5PfHng00ql
E+Q+DFxW/y+yLHcU6ZHHBqxeLIFsHbXEvzVMMLxvyCMvGwetu8IHZzx5YYTd
Lc8MVxLEJYdYCpoMoxNnjwotzRI5Pa7cBje6ANhhmuLvpIVg5tSr+KUzs6iv
y3KpoRxD9vYbsnitOAdSCDllvg/YaNxm6sCb1wT4WbQzyklmBI06JetlcHx2
3ltAVZJvGoV7flH7944GZH9YzO86/RMpfW46MhpHhMGTemStbioI1MvP9+cQ
qbupLlQntwN4HvFR8RRhgNSZYbsXs0ww3a5DPPeKB84miJ9wscXAoBsB9YmX
xhBjb3bw8WvL4MntfYO+2+cBlCc7yfzFQQabGXTKmtMcPEBcfhUvjLZ7skdk
8zB69Di5NfAdD4xLrhTDb2aBW6arm23dBOHq7sAfP17NIFvBaoynGBdZ6b57
Btt7FggqZm8qX2KjXh+vCUYhASYOxh/lsR5Eoq72Qb3uk0iW4XxxaWkWhYtK
d8Z40QB5Uzn5494KpMf3+PpqDRGqFXmIyfNRwb3o9lYbowm0WBh24bt5J2jn
u47fY8kA/GaVGzaT88D986MJBc5870Szas6qb4DW1Fdxhn5jqMAi4Lzz1Aq4
MDZT6+0xD5SvnarFXMFB4oViz91KvPDTm/X05+94oaxr9ay99RDquJ7Dc/cv
DzROGo4KmF4ADfpncNlIAB7N/mSxx28GzS/nXpjo5iLv8TLNs2ueAeafb9T4
irCRvgwfK26IAMW8vkRZfRxA8cTDlhM7pxCtr7ImaH4OVVXsZt5K5OSnUaCY
sGAE+p389Kj5byI863lys5YSBWg67h44VTyBlATEtt951wPecn/zu1/OANzT
pumj4fMA9xpeVuPcTyCmshHovA5EV543MidHUcbP+LTn1FXgcVJVe5Iz35xY
ge3uVCxs1Uw5UMXDC2Wsfinka5Kg5v37qkGVg8j+X1F34lUeuFD2s/Fs9AI4
ED57eP2tAIydXjSHqzNooM5nU7gNN7lds+OZ9bcZoJJxZt9KxALaqTD+6j2B
CCdPGywIYIYR+cPAv4sNUyioa71eRnEWvaz+FfBwgTPfJTGeORUfUO/6o6i/
igg/75TFaKeNgFWm+B0u9wlkHNr4QUJjAJhRYnX+DTHASaVHgk+2MgF9TPXV
kCEPzHKpFMvn4vizyB7qmuIoks9v6VeJXAUtY0UKfrLzYOE09zZ7NSysYO5U
LxHihcPS2mrxiyTI3RNAWSsfRNF5s6pvXhJhT8NIxaL+AkBD7oe5NQShtNhW
n8qqWfSio2ruowY32ZQ0E7XLehbQKIyvCdnz6PVYHK8GNxH+KLy9aStxDA22
Br+a655C1ybXlSUlphB7l+orTUgHV44MUx4//4jq5LX1JGOIMCV3fT4mYgR4
lnGXGBSMo3TpXaYOSoMgommzfm4hA6g3bJdrbqMDase5ZBqHDwE2tP22EANZ
smtRLV0jCHLn/ObatgK8F0XMY78xgZaS2rmQB1ho2nlg47A2L0x8PRLxzYAP
+q7VnFuwGEJelyRPRagRYcueNKzM2QVwfeBWiTZbECoZt4dSpeaQWTDUJz3i
Ig9cat8/KTEHbA3sp1f2LaD1yzx7Zn4T4OEh44h71yjovOI4VR5ModG3nXzb
z1JRg0vG1S2aHD7gz1qs4b+j1sY/Gs03Oe/vpbIGdmkMJB3iOtuxdRzZPg4/
pyL5F0Q7hCseNmcAQ8ldHU01dPB5YHczyZIHJk1Ei75qx8D2Vx6lHWqjaCP6
BNejjiWQhf12YPotE+hwVZsV6ODg4H+/K/odeSEunKXWNUSCOpb27/REhhGl
yn7mYOD/czv22bfsBXDiQEtOv4EQlNU87vGndhYd8POKIfRhyNXcXQ3fL8+B
NIvNSsezWOh7jt6wch4B6jGquGnMUdQspvdq4eEkUjgYbD93dhI1n3xbNTlC
A1ckpUeU4+rRw3dv/qzfIULuLSol2uMT4PyMQ85DhXGk+Tk0/QRPN2gOFlIi
CDGA3s0OV4klBrh7g8bgeswDlV1FCPArBjKWeiWesDn305U/z7J6CSi5T+wO
GmaCe+/uZqy14eAGO7pzjzvn/Sns3KkhQ4KL83KygqbDiCCu84TrGMcTJISc
3DEswKe+Xf/UiCBU0N2DDcfNIr2rP9/+/YkhW3p0TfycngURuVz4jj9stIPV
3OiSToA/ikroNdQh1HC14+6rY5PIOkMit+z4DLKLKzghHUkD5k1Huf0o31BD
lsG/02+JUNgtC589QAVKYbJ9vK3jqJQR3jd8uANkultS0ncxQBlTP0b2Fidf
nsaZDXL82syX9G2nKAbmjj0tk/YfQwmCSpEFC8uglIfd7aPP8U/8Lq1DVTho
9vzxzmVjXjhbUDIb9ZoXmn/wk1DsHkJF7wX+Xmrj4dS+xdk6IRbQi5f7r227
IHQ7+Nw77+4Myg6etI2/zEUOPLa8qVFhFuzoib59rZbNuVe3hRtqCHC6Vyis
KX0AxfabG5rmTSJpZYPxmvw5tHxkKr3Rh+PXyy/r23EfUduyD/NPCxFS3nv5
3BWdAErqOXmGoRMo7te32Ltc3SC04SmeFcgAaQmBJRdp8+CeoO0WJU4/+uee
kv6bvA4CvnqSbp0ZQ3sTq06+cl8FmxO2vu7j+LUIxmLvwCYcVOC5w66R5IVf
hlZ21bfwwrr9NvtVRYfQRZ0Qt52IBw78ytBdqV8ALk2HHOivBaDpkUNBN5M5
PeeL2ptUSW5ySru9ErloBoRO3qnU9GehgC2Gl68xCZDRePmZp+sgoh25/wN4
TCH+eLNU7Zg5xN+66yC7jJOfejRGTYIvyJST9OtrJ8J4DZLwHa4x0NmrcMgn
fwJZkwxrDUX/Au0QOVHvdgYwy/qne45/HkTMbwkvtueB22+UZYTcXQeCs7WZ
Ti9HUdCNvtOdtFXgnKkTqGI5D0g8nsEBV7FQdOOl9288LyxfM0iIDyPBfN98
U/HMQfTjrodzymZOT/Yv9XVxWQAFhzprM5sFOJ7Rk3C6ZAmRr0X82n+cm0y5
cdXo+dcBQNiU5PliyxoiUK5YfxvGwHxR0YyIu0Non7G34IctC2jeAmcbUDaP
DO5UHAsS6gNXZF7u0cj6hdwcCqMMJLmh7yHjI0HWY0DgZKXdkT9MRD7ytY3r
ahboB/4eii49wBQfcS3TbR48OTV+Z/s9HHQO2ZOdrr8MUj5Al/fXFtCXrVnS
MH8ZpH93awQzI2B8+azVXQY39MwQSzh5Gw9l3Z+79h0jwrwTYRSh9Hm0w8go
09WdB0aEOtrr5k2DLbGnhhoF+CA8p8M178VGJdk9R0bkcOTMZtHUIsofoAWN
biO9ZfR0NrW4ko6BVjpcLpf/DSF2yQzrUd88mr3uf6dccgG5WR0Rdp7qALJj
u3xJvNkIF7ngVXOE4/lWzTV+PX2gkB2YMoxlISPq7jk8fxsghrlbGsb8Az68
PDlKJQwQts1hX9pvHDT+8sP9qtASKJ6TzQ3wYiEHx/CXL9xWgYTEHtMAwwkQ
2J907OpuLnjCO/LG5js4mLEzq/T2AA9ciVzpU+tjIK8PvMFvWAToBh8AmWPT
4Gj39W3/afPBs1/JxXwmLFS+8dU6TxxPLks+ce7FplaQURbo1P+ChQxbvV+q
U7igcaLJj1SVCYTO8H2Uj2EhMrPn+ooxA61uuy7uzvEuOFyVJWL2AdlbRZ4M
48LB87nOrb2hbcC2p0qwvoWN6m5J98XQ/oKJtzaTVcdHgESiIeHn6gzoiqzS
ClPGQVUlV6kosALQK1ngcHMBMQ35NgS/LINPbg4Emx9UYDHtFrs5HAOnHUtD
Qzyx8PD7gfOlz0gwV/kKs/49DTlqny/yU8DDv41aPsvmE8Dbq9peo48ffiq2
pm9TZ6MtCn+Nvp3HkdvbIEnKtB6Y0nn8MQcXUOAu3+SPTG5IWBG5Uacwh1pP
W75Y+7aIasp5JvL0Z5CzguQz4ck+IAFTtDxAK9KX22Ho14CFEk+kiq/bdQJ+
F3kFjUo2SrQ3d19w/Au+v1wJSnChgBDuFIbOzwnAKkxgnODHwj27l80jMRsA
o//bqf4AE122/FHtTmCDglvE6ymK48C13eU1JpUL2liTDwlqYaGbYMN04QwJ
+uY1p/e1zaG3fGWSIWE4eCnLYlOz8igoabb7u/mpIFQ2NXKyubmEBh/d1bAL
5CaHL2rdlgloA6GlLtwFB9lo4r8SvypNTu+qkJYoukND18Kx5aVvllC0zYHQ
hCuTKCLd9biD8jAIcGD3qmn3I9mi3StvarhhsagVZoN7CLAPDvZd/b2AjF4O
DL773gJ4f47XxiaOASILTevtngTad8JO5Tlww/hflTM6zzFQyunTkYfJdLSr
IVBwq+M8OJg14ZGWNgzef3rw6n4AFqpY2vgd58bBz7l1YjsyeCH3fMuy7yE6
2peyVA2S8HAEhKp/NxkB6xJG3YOzgtA4dvqCl8QKSru688SKNIcPRufq9kT2
ApLBi0wh+jK66un69aU/N5S8KV/1gH8a8QeElil5LaKGLinBhvOz6O/nC5Hl
nO/dU431PLkwiPLU29y+/uCCh0eixwrDxkHZw8hhbAUTBZmUBH8peQnKgysd
1P2HgEu9iSXuLg0Im/tJcaQClvZW0nJZG2CmpkDJcZ2O1LcccvATWABRx3fv
Up0ZAGtbNHa8SuT0h+qkrBw5PDQXHzO9+oMITdU631P8mMgCnpT5xPGK2C3G
8nXXKeCG1sbqDo5fT9523izVtowEcao31Sy5yB/4ruyLkRkEpSomLcmma2hC
atI02IoLyg8ZiuyKG0Ufdii5LyizkKfv+10nqQxk8Zp16pLtIDC6EevkpPkH
Je+IxPjncEFNh2MG1ZxcgH2nPzfv5swnQ/A8LfcaOZv3hC4I9IGgxfW6T1VM
wNabM2j7jYUnNYSPU21WwVFshLIoaR6lKKo+jvBcBAGTJ8p4HYeAeX3P9NV1
LPzx/NuD3+/wMPQBftlpggDHHnEJFrXOo+6Qppz5BB4Y8iSd9G50EoDd0X97
6zn5olXKxnUsosjHSSeD1rnJ2oObrZ60/gNvn/btu2WyiohoWvH4TwzUSRZ1
/fRtEM0FLNglVM0j/r83+/4YLyAXHRtf+Ok3sIzSFJIIrkF/lNYCLUK44dtz
/sr5mcMgOCASUJLmUdLM6UDl9CrQfRTd1BLpBTkWCXxM+XnwyU937fhXHNyr
EFvp6bgEUgYCdfwILKR2UHlprWIFRAspV8ZXcu6zv6C/3CFuiLgP7n2yCw/7
jbq7RquJ8LXcHXGPbfPoh00McObigS1v+ITz8DNg9NsTEa8JEmx5kFc6WMdC
bRVcyy/zceRXvobrSSZdIMIXyBZ9X0QPlQce8x/jgmbtj1NNWkdQd1eXj+qF
BfRjQ/fM/jPzyC6YPS7P0wGgt6q06fMkZFrqWSb6CgsHw16qH8npBqj3yY/+
Phbi/9zAzZfRDYAw9WKbyyBAM3uPxlrRQSh194LCJxyk3VHOjIlaAsPHdEfM
jFlo2Wy78ILiKrgWVeomfpEK+tcYwcQSDNzf1KCRgcfBO24Xe6ipvFC+zThf
aJ6ODmoIDJzWIEDjloTwKcwUmNgrg/Or4oOmAe2vbjuxkO4Qpn7zBo7s1hOt
c+RlIyjQmJp+lLeAUlu4GBaXOPlJTl9d2DuFMqtHvFtus1GS9pKu7C8a8rzE
K3Eiqxt4zioZUiSq0NSIh9J+ARwMGmZc3zLVCjBpi8bOpEWkd9lSR/12P5AN
/JX1u3sUVChv9ki5OgVy/fdeb0BYePZ7dMLh/FWwrfbq0p/UeXTiverCd/sl
YPtLdIlXjQpI39wsSr5h4JHqxPti2lgoOStbKDVNgndvXpL130lDHUN98f2l
HC5aRNbkhVHAsVX3G8NJAlB/lnIEYBZRdaBnz/P3WHL+7EdnS61G8DfVsNH5
+QKKfC3UclYZC6MUvGJcLWgoMTV+46PFEirwfrf/gN0UehfI2v01ZACYZur/
U1bvRhGPM+NLvLHwdvUlha9//4DcFUKrxx42KjVjvWI/+wNMrn2ZH39BATk1
+9cP3+b46ST7NaWAG9ZkSn64vwUD33xwfHb+OgPt5H175WLZAhAn1Q+TPcaA
7uX6kJGz3HBYWJh2wR0LjTPXqJufk6ChSrvmGRUaOt9cxpNXjYPj3gIj3y6M
AOsxvHfPpCC8J2qVZ3JsGdVGgRLjdi7ykP/YRMZgJ8gY7uM+kLyIwqyaE7t5
sZD7fK1B1Oc5FKGioPfFaQmlhvod99gzhTC92B3y0iNAP3WH7uLbQaSxaVSH
n/M/Iq9NLgZNj4CvSGRzO20eYciYfbq/vwHZJONPOJ1R8D2CeLHTbhoc9Dt7
d4szN3QYbFjsfcLZj7YVOyCQjuJD4NvgI/PAMEsr5a/KEAiwPWn5TgwHn2Ha
HMJu42C3x6Fy9igPtPBck+0SYiB5gid6b0aAGXExGdFbRwGzL8j1bbIgpBR7
79YBK8j2oOPg3CqGPHXqwlD0o3+gxiDtz7TSKtpv+dbDicQN4whRvrUyVORb
Wh9UmMzZR8fu7LZYGhLpdb0f+mwYjJLrlQ9EDCC+rQeHAlO4IM3VguWaNwEY
rOQbjyEnP5s1+09vj0cZOX38OM8BcC1nh6fPLB2cyT5ZrL8DC71vsi4Sy9aB
ReyD5Rs5DDT9+phSvgILhD2Z2hmDGwTPQU1ubSwOar45f+CcFx7q6M6Ej0GO
f0Y0NUyozKNlf4/gBhEeuLjL+hNQngD861ZN6lR+yH3P/Ya58jIiqG22wAxw
kZN+7tF2VBgEo0nN51PPr6HyL9dvFeK5IEWIT7fwyjDKlBZdFPJYQN/ztGOG
5efR5kvjZo/V/oFr5s0RAXbtKOrhF9skjs91X+uQ7fxEAbYZD/wPBjERxoZA
SDl6F8S5jLlty+oB9Ttq7Kjn5kEKe9q58DgONtdb6TUuLoMbZq5motPzaF/f
5QdvKEvgwqOiRhJlGGA2NYvcsMPCe89NVNyf4aHeweKC4yQiPFeSfCuxcR6l
a3fWvXvKA9ktThfZitPgZ3Dze/3jfDCFK3+udZaNspVkb16txJLt+044i073
greX2r+Mcbj/xvF4QUMXBn7yWahW3jWEHH+ynBs5vSF0iJ3A4OTok9MKYu8J
XaCVlfNV9mIRsjPXulDA4oahP6TX350ZAKTzlSGR9xZQ9mda4p61BoALYMo2
MPtA1c+Gn9vsmKBwe2WSXi8OMo3krj4jLAExbvvCa/Ys9HZ1myz/2VVw+GQF
0cVtHJgFnfyMD+KCrzW9uOW/4KCK2rxH7f/7QsWI8z1bJvq4jbxm5kCEb1ze
ZxaVTYOc19vwdTx8MCG3Hq/A+d5FObl38Vg8eWhflurl3jbwOb5ngmDJRgc7
3Ui1GVwwd/N+WS4vClpTsmk5KMD5fXndY4GyTKSQ9o29eLsDpGWu2GnR0xEu
pXvHvnEsbEobGkoeagcWtKLruAg2iq89rJSyuQ8YwdtU9uFhELedyiyomAM3
j/Ws4Jw5eV9tP7Pj4TLQtOJpON6xgAx4GLe+X1sBgv699z40U4E/75hsSggG
/s1WOhObhoWRFdNuqvokaBFw6fiGJB1ZNU9fzg3Bw2KeytjRK1RQnPg8+r0r
Pzz6WyV1VycLKWy+dlMoC0fGBDn9fOJQD1L8kli16gso8bC1gyLHn6rA2+Hz
vTOINJA19OHMIkrzvrJLEM2ioDz5vb4tPUDzY/OoT3g9kj/RtH1gFgvnrznJ
LQW0A9loqe+CdDaqUQzqb2z8B06eGXomtT4Gss0n9XB3qaDndE9RhCkWSnWe
amnetw5KTgTNupQykd/iNqrRGBtMrUApK8EJYHU/Y96Mw+HItYTQsf1YmLgk
rvWPiw/GybY+/d44hxIrbM8wQ3AwJFj09XPaKAi79rCcCgUhuUeV5Ta2iDDn
+waGZ7nJ136w3hDDWkC3y7ZCMU5/b489vNdRFwt/nrqA9UygoR1Lz93yXi+h
XSWZ21puTqK43Ou76+2HAGZa9uOZ5D60+CuzzIrI4TuxrYbh1w8UeBxyG21Y
6GxCuZmvdQe43q1+30SeAgj4PS3KGlSQ6r5znHab04ezT9sU3sNA4V//MY+3
0tEc+YTMB/I80I2s6vXJGAHFGVfxTSJYyOuFFxP5joXCJTo+23hJMCNp5WNp
NQ3dqbslIaqFh2s5fsFnt42AqqX6hZ3cQvB/qeGzqg==
     "], {3.1000000000000005`, 24.500000000000004`, 12.8}, 3, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 17}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 6, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJx8vXdUFMvz/m9AxYw5e82KOUdkMIMRRcQcMIuYs2LAnEUUFUExAGIWFVHR
FUEMIBKWKLuLmNhdUFlQQVC/93et6nlv1cff/eeeU2dO01PVXc/TL3dmGjsu
HjO7RLFixaZXLlas5L//H9PgTNDzK6UejTz+Or/IqVDhdcy9z6cFuRLGu5r1
Lfw5xKCYnbW33IeCHBLPUKw5uW5k6JsvIl4M/gv1dyr/xoJdLyXfeu37K9BA
x5deJh274ZMs/12Yj+R0r2/miVu5Uu2WbU/d+VikwHk+KdngS/B1g4jjPOs6
rhzb4RaNZyh6fXZWfoqWx8F5tk7v6NUrI49eL5UM8nUZ+4TGDVLxPUsm9fFi
85EelH5hn3kD/26WmOcne9ekxy1yRRznuXW3/9Ky+TSeofA59zDm1S85jvNc
tK+Sz4SXBnq95LG1wfbpe3Lo+FLj1/kLHizKofORelQ4NrS9p0HCcXGeZvvH
bp3unyviOM86c9N32p80kHiGoluT5cV9XnwRcfyv1mTV9g9fPtPrJXo9zpOO
j/PE+cD8JZwnzh/jOE9yvxLOk+RH/B2ST7xeIvnH8SVSL5yPZFzfIjFP4/VQ
JOZJ1o+YJ1lvYp5kfYp5kvUs5knWv5gn7hfYX1Y4T9xfGMd5kv1ohfMk+9fq
L/sdr5dIf8DxJdJPcD4S7T84z6sb9rVVH85mfelIRNFdt8ZZrC95ul5IWzFG
x/pSpTuVf/XopGV96eO9mrkNa9O4QTqp7Bq0K0DL+lJWSnlXuxU61peyB0/a
3uZhNutLbhUn3jC/nMX60uk2pmHjPPWsL60sdz+rZAM960uNb13cP3EAjRuk
eNWIZYXf9Kwv2UX69/74KYv1pZs92/Q71kbP+lJzh8Y9PNx0rC/tjCx+P+y9
lvUlv4g+bZue1bK+5Ca17TKzNR3HIAVcXPpg4m0960vrzr0uur48m/WltW7Z
PZbrdKwv7StYcaHLbi3rS+tPZNacNjqT9SUr62Fri6I+sr5Er8d50vFxnjgf
2pdw/rQvkfsV+53kR/wdkk+x30n+xX4n9RL73bi+cl8yXg9yXyLrR8yTrDcx
T7I+xTzJehbzJOtfzBP3C+1LuL9oXyL7UfQlsn9FXyL7XfQl0h9EXyL9RPQl
2n9wniuOHV9usU7N+lLMCuvDDcxVrC91+7m1X8WLaawvvdqV3mfW8zTWl94k
mWneptBxDFKQ44NmZew0rC/dr/C7aVy+mvWlUhl3H0fnqFhfUitmTnerqGZ9
KefU28rVxmpYXzrgF7a93vR01pfSrhVOtBpN4wZp+uu5OS5NNKwvhR44UGFL
KTXrSxukJ6U291KzvrRovk+x1/s1rC/9erNK7xagYX1pdbbz/HoV6DgZ0rTO
HY4WN1GxvvT99ugtHfPTWF/adGuuMiBIxfrSXaeHfVt4qFlfClz9q2XZGSrW
l4ak/VPo7JTG+tKY0fO8p/dJY32JXo/zpOPjPHE+tC/h/GlfIvcr9jvJj/g7
JJ9iv5P8i/1O6iX2u3F95b5kvB7kvkTWj5gnWW9inmR9inmS9SzmSda/mCfu
F9qXcH/RvkT2o+hLZP+KvkT2u+hLpD+IvkT6iehLtP/gPHt3WzFs3/BU1pcG
FNy9XfglkfWl1NcTKwWeUrK+5FvGY/HAK0rWl/pW6p3RMD2Z9aWVkwxb+i1P
ZX3Joc09m7y5qawvDd/YtmupT8msL7lats7raZPC+tIVy6tz9k9JZX2paGsz
r9P6VNaXKp+c9tU+ncYN0rs6R1XhXdh8pE9jxs2ubJbC+lKpapfUcx6nsL7U
I8Ni5X3XVNaXrFZujWzsksr60saBKwdVrkbHyZD6LXBxarIqkfWlaXGHs8fs
TGR9aZ/X9zu2j5NZXzpWM7/1yUOprC+5uo8vUPxKZn2pmtXlSXEu8awvLXHc
uXH95HjWl+j1OE86Ps4T50P7Es6f9iVyv2K/k/yIv0PyKfY7yb/Y76Re8n43
qq/cl4zXg9yXyPoR8yTrTcyTrE8xT7KexTzJ+hfzxP1C+xLuL9qXyH4UfYns
X9GXyH4XfYn0B9GXSD8RfYn2H8GXMvf17Ng5ifWlS1d7nHVTJLC+pOtzoopz
cizrS/22mO4Ieh3H+pJm8KeZG4PiWV+akrp647xqStaXZq/3mmu3XMn60qTe
P3e9nJvE+lJV2z4jfGslsL5UU7Nc23COkvWlfnMrvs21U7K+5O2hsR6zk8YN
Ule/2klDSySwvtQ14Xyj9m1ZH1AE1zdY/DJNYH2p9YEj9R4FKFlfOn+lbf6h
FkrWlwa+mtGk5eV41pc2lE963fRrHOtLHnHF91dvEc/60rrC5a/adElifcn5
y6jKG0YpWV8qffHTdA8f1mcUNRN2ey5wj2H95/+OGyQ6Ds4H/y47r8E8af8h
9yX2NcmD+Dskb2JfkzyLfU3qIva1cR3l/mNcd7n/kHUi5knWlZgnWYdinmTd
inmSdS7mifuC9h/cR7T/kH0n+g/Zp6L/kH0t+g/pA6L/kL4hcyTSZ3CemW+G
hS+tQ/uGQdFggvKQ9YNY1n+GbP61RVkmkvUf9w5jDjUOeML6j2fY3PaTrz1j
/Wf0ktbZEyZGsf5T++r5DwfSXrH+M8x2ybR1JeNY/3HU+43KORTL+s+FM11z
K5aMZf3n+wHX5hvTYlj/mexRwzH1C40bJKlepsk3y1jWf2Y+3lNWeT+W9R/D
3vxdH3NjWP/Zaqgd2640jWcohlu7Dg478pL1n7vRKaE7ZkSy/vPY/NrLK8+f
s/5z0CLY/EBSDOs/ExKaDateLY71n91+Oh+3E6xvKIJLBJfYZf6C9Z8SjmZN
BoWFsP7zf8cNEh0H54N/l/YfnCftP+S+xL4meRB/h+RN7GuSZ5ljG9dF7Gvj
Osr9x7jucv8h60TMk6wrMU+yDsU8yboV8yTrXMwT9wXtP7iPaP8h+070H7JP
Rf8h+1r0H9IHRP8hfUP0H+wzFwqiNpnll3hkuXW8p8vtrwpz+7ONVloapF8J
+dYO/Ys9GvJtea+fTQoU2Q+Cu5tsNYjr7XsPCC66la1YccVq3PMA+fr+Yyus
+5nyQbFt0dczlyfkiuvxfnevGbAjVJKvx/gVk8Li3tsNUuF/8S8inwGXjnoW
r50r2f43/68innr51dsHeoN0fpZNM4s6hSJe7mrZdusUBvJ3MxTpqbenB/7I
IX83Q2FdN2fZuWryPIf/N06k4oBrVHe/LvI8/8RfKyZNaefo1Fq+HuuS6XW7
X4anfD3GKx/+vfptfq5k/d/8E8Q8Zwa/d2y+Olca8V/8vYgHvV3VXzf43/H/
3Jdi+NOWdVyG/FC4jB1Z7FyKQRr7Jw+KP3n+pjg/OKPjjLG5UrHE//Km6PXm
S6rLwlxFZM9VM/55Jc8T12GbRkOkus1zxTwFN7jwo/9gjYHmQarr3G9chUMs
D9KyzrXO9HgrzxPrWMa/3vGLafI8MR69stLM+uPkeQo/M7B4+wOv5HF6BZ6/
9/PQO4VrkxqtqipzxTh//q5eMTWkXNMNb+VxOki7621smqPoPa5Yww8Gut4y
JOuVTxPVa3Np3aXgbjfLKKzy6HqWGpdv0HBWpzy6nqWVlmf3tNyTR+43QxFR
Kj9X9z/zxLizjccYzQd6v/+eZ/d3vRGfL9/vtLSLq4t+ahTpJTLahVyVx+n1
3/VxCmVfy97NRsrjjPwvHqh4tsZz8L5sus4N0pm6Njd+hNL7NUgrpvy4PvZS
Lt3v0tyA1gfrLcil+10qvv7BQo9Cg5gnruebRy97eZ/OE/PE+PCgf049T5Ln
ifEPiYdPf63M1qFUzmHM6GN2bB1KAblz7h0xGCSHP/tCYQP9p1fqia0fS+ZK
k//sI4UE/Sqg0YPtp17hv8+Gh3SHdYX/bovzx3WO/QHnj/EU6CcizxDH/kPq
JcXGGBrb78ij9ZJ6NU6t5PCc1Us6szS0cHyFXHFfuP61j7qtTvOR7wvjxavv
/V27Ya64r67kvnAcS+i3G6vvtMzxlccZA/056kGXmecayeN0/kt+cF8EXTvy
6+uUPLqepZdeM7aktmTrWXq3u72JIieH7l/Jv67tyS0T8+j+lQ5bj8ozrcv2
r7Rx1cgRh1JySH4yFIPD9GlhnWh+MhQPl3X43OlXDslPhqI7/Ds+jtPyv/hj
RfqNuT0vDTeIcXr/l7dERfkF2V6+e+VxOsE4+HsA0t+k5kdmeO8dR/e7QXIL
7Dpzw3YD7W/Sz5gy5s63cmg/l4a+WZzvupv1c+nzkhnpY8wMtJ9LR4vZPWty
TM4P7q/EIxGmjWrL94XxpWdSfW1M5fvCeG34/QPZF9JC/5nVc66yfSGt293R
trwf2xfSLqefe5t7G4SuWcB+NHn/LubDvzqIujYY9u9nR22dNZ7yusX9hXqH
8xe+DvQR509/B0LqK/2lvtJf6it+74Hzx/3ldbisi1dref4Y/+dh52Vv7+aI
68fD/no2OsmvoKt8/UDYj6stop94R7P1LFnqO89aMjGHrmfpXun4zruqsvUs
5kn2u4Tjk/0u4XzIfhe/YzG+3wzFXfi7xvebocB54vXWsF/KQT7x+n6wvzSQ
f9LfJMwb6W8S5pn0N4n2N+j/Eq4f0v8lXG+k/7P7xfW/BPYFzh/jCbCPyPqU
nBdGJK9TGej6lB5uqHjVuT9bn+J3Qehju4MfOwL7F32sFfg33O/oY23A79lA
fyC+UaGAv0t8o2IRzJPUS/pLvSSsF84T1zn2K5wnxrG/4Twxjv0Qx+kMfswF
+jmOYwv+Dfs/jmMJfs8P9IKsT+kB9HmyPqVBoAtkP0qRoHdkP0qoj8b3m6F4
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
yYbfS1Pd6dY9293NLoXpTsNqm1t1cUxlutO/8ML9yIBUpjv1c3Pm3IxLZbrT
uNh0dXa5VKY7tmd1br8OpDDdaZRo1rH/0RSmO12bXrY2XZvCdMcRfs9Pdcep
1GwbE+dUpjtfmzk/LfsohekO/t6e6k7ZOpZu9iNSme44mizK+PIghekOPu9A
dScfno+guhPUfe1S5c1kpjsrnfaNXF41ielOYsZz59qFiUx32sPzIFR37pZw
Dn5WP5npztbAreVdzZOY7jyxL2Z+/nMy0x3zgvVLfiQnM91JgPlQ3cHnU6ju
TGzvPeTylWSmO29+Lei89F4S050MiFPdwXGo7mAeqO5g3qjutIL7oroTbpQH
WXdcIW9Ud4Ihz1R3MD9Ud/B5K6o7WHeqO3dgnVDdmQHrkOqOKaxbqjt5sP6p
7iyA/UJ1B/cd1R3cp1R3cF9T3WkCfYDqDvYNqjvYZ6juYF+iutMV+hjVHeyH
VHewf1LdyYJ+S3UHnyelumMNfZvqDvZ5qjtfQBeo7swHHaG6swOeL6a6U9B8
edU7zxKZ7gR3/WfYzCMJ/LwTkTAouWoC0x38/iPVHfxeJNWd5wVfN+2ansh0
p/vdT6sGTEhguoO/D6S6g9/rpLqTD98DpbrjEnxp5pQRSqY7NU4frpywRsl1
Z9K17z49lEx3Oh81rfguJ57pTrPv8SXfOSYw3bkdu2Ro0hYl0x383SnVnafN
rDbttFXyf9/5EWPr8Cue6Q7+vpTqTqfsgb6xNZRMdxIv7b/s/jae6Q7+Xpfq
Dv4emOoOfteY6g5+B5nqzvLYJYvTXeOY7pyF3z9T3el9a8jud2UTmO5Yuuty
PD/GMx1ZBuNTHcHfV1OdmvnrYEif7UqmU5+Kikd0SUtgutMtaJhZq73xTHce
pTo2VA2NZ7oTCnGqOzgO1R3MA9UdzBvVnc9G85R1Z5bRfcm60xfyRnWnJ+SZ
6g7mk+oOrjeqO1h3qju4TqjuJMA6pLrTEdYt+/cdWP9Ud3C/UN3BfUd1B/cp
1Z0usK+Z7kAfoLqDfYPqDvYZqjv4nWKqO4Ogj1Hd6QH9kOoO9k+qO9hvqe7g
74Gp7mDfprrzBvo81Z27oAtUd1BHqO7g83RUd07Ef73RUhvLdKe9Y6O+xf1i
me44upj0bzM9lulOAXynhurONPiuDdWdRvsrX3QZGMt05+vzq3mbt8cw3XGF
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
E89rlGfi+Y7yTDwPUp6J51zKM/F8Snkmnmcpz8TzL+WZeK6nPPMFcADKM7cD
N6A8E8/vlGfWhfM+5ZlewAcoz0TuRHmmCs71lGci36A88xtwA8ozvYCTUJ5Z
HrgN5Zn4vgvKM5HDUJ6J77ugPBP5EuWZyKMoz9wA/IryTORdlGciH6M8E3ka
5ZnI3yjPRF5HeeZl4HuUZyIPpDxz19TdnsfHaxjPTFZ8qN3ijYbxzB99GoSc
VKkZz1z/aLSrzVE145m7Sq4qbHNdzXjmgC676kR30DCe6Vz6aYj/MxXjmZt6
tRqfvFrFeObyx2Ne1A1TMZ55fuWyJ1tfqhjPTLrs2u2Ev4rxzKLMqLMDf6oY
zzyX5jXw9mo145kBNYYec9CqGM+Mnlds7Y27KsYzVw6a5bf8rprxzMdFG9v5
3lAxnonPxVOeie8zoTzzbm+rlLxeGsYzT/8+Xszlt4rxTOPvdMs88yZ8V5ry
zIVVFTa5g9SMZ5b18nZwfaxhPLPkuZ3fp9zRMJ6ZazvpxYI5asYzPQe2Wfg6
Xc145m6zZXN2fFMzntkwZleJszs0jGfOa/0mx6qtmvFMT1Wx7IDuasYzO3rX
2v0kQs145hx43wvlmRV7vI745aNmPPMnvD+B8sx2aZNrD6iuYTyz7yGXMdfP
aBjPPOi/Nu9h5XTGM8eVbKNaUUvDeOY6C9fF23poGM98mv7w12ovNeOZ+P4H
yjPnLB3jM2m9hvHMsX1PeJZ20zCeuediQGenkxrGM7dYVS6nXKJhPNPx9zaf
M580jGeGtnvl4TNVw3hmdNHgNUcK1IxnVtKVLjXjo5rxzDHO3Tq4blAznlkk
Vb5yqTCN8Uzj77PLPBO/50555v2+G07OVagZz9yir3F1YbSK8cwjZmcjU7qm
M55Zpfqxk0M6pDOeeaDWPqfb5umMZw71XtfbfI6G8cyB52elmkzSMJ65sM4N
1SlHNeOZVULi5jYorWE8c4j5299bzDSMZzoV9wga2U3NeOYzw9Ur2e3UjGdu
bRIaefCKmvFM1dxtdUPTVIxnxn0/6zmkhobxzB8LP3u/qa9mPDP2g8OnpLsq
xjM3nahV8mmsmvHMjbuixjmsUjGembR2wufMpSrGMxe/VY+8tEzNeGbIznrq
/1fWnUfVnL9xAOcnJFK2sTSmxTbWGZEtkqgkS0mWsdcYlbFXlhqTlMSvDKZS
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
Jw/8L83G1AY=
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtln1MV2UUx+8l769fF1emtcpmaqa5lmUvZpll9mLN3pyW5jKXpJvZBMvM
ZWWrXFmahiaIJiK+BL6QoJIokQokKIKhBq4sBg1qvehsTV2t+nw7549n53O/
z7n3Pvc855zn9k7LGJ2eEgTBN4zzGMPjIBgXBkFuMghWwW/Dn8GF8HtwCVwZ
BQGXQRF2C6Mv+q0IRYwP4e34fIveDZ8O7Gb0hejb0DczXoEXohUzp3d/hHaM
6yb0g/Bq+B14KzwP2x2fBdgVXHeG67hvNtdd4XTsWvQ07Gvcd4K5S9AL0Mrh
BHwQm898D3guthtif7gHNkoNgla0w/hvYsyCF/CcI3AHHDO/D3sN/nnYJuaa
sXXMD4avDW39exnb4Ga0OdgL8X8Z+xPvvhzewfwufZv88VkCD4TvVtyStq6V
cIW/6zvsTvTliid6OdwL/W+e1xzZt7dgd6Ovw2cvPl/CRfqW2N6l9VbA++Ea
+CRc5mv4Av4czta+wLVwA/wb3Ijtx/MPY1MTxmd51yF8fkALick57T3cgP9x
7HX4DPA165nF6DuxfdAHYUeGljMPYs9wb0+4Hbsc/3vQxjG5BX5D+wyXaH1w
JVqxr2c7tpR7OsEV2H0e8xp86xiF+l60WrhA35i0nBkBj0HLhyfCL8BTQsul
Cdhqz5Pd2HquDzF+8bjpvYpBC9fV6F8pt+FKOIFeD28MLT6Kv2JShfYuY1po
eTgLfh7eoD1J2junos12n0/R8r12VCPt2ks44vnr4UVeUxPhx0PL56Fw/9Bq
8D74KXg1PmPhR+BP4PvhO0OLleKs+Kt2RwFD0bPRchgPwKM9JxXbHfjczPXt
6MuUp/Bg+OOkaV3wGRZa7at+t2Ibfb/+jSzHcuHFaHf4OjOTlrvKYcVtA3pm
aHWR6X1G+dzhsa1G/9HroQr+Ga7y+GvflQvH0TrzrFq4LbZaWKsc9L1Sjddh
69FvgHvhuyS0NazAbsJvfmh5ODy0PHwIbYTHJ4v7Sn0vtIY1jGfgad4fBvKc
fjyz0XvFWfQzXg/qDx/4N5YmrUddjP8x3pUVW19Tf8v2vlqsfuW5pBw+ir06
sFysSdo3nmL+nNfngaTNKV9Po/VM2Dd2TVhMroe7J2xedf2H17hiov63DO3K
wPpLjtfIBHyeYDysXoS2nvEcnI42FnsR/m+GlmuXwZOw69znddVf0vrxq/Bk
z9VVSetvquspsT1zMjw3tvv1HF1vRM/AzkH/S/EN7VsGxNY7tB71n+/hf9AW
qzbhQbHFvx2+INXWo7NgOvptWC6D8dg8P4N0HnXCry20nv+Y14j2einjJnhY
bP28BN4P3+i9S3NvAVO9lud5Xat+1Q8Vz5PYZ9FH+bcrr+5ljNdzPLaqzarI
6uhIZH1PcWiNrEept6vHF3pMJnHf+b7mr32dOjvuQt/jPb86thjOgNNi62mq
66d9LTqPnsS+6Oe7ekWG72uun306r+Zrj7BXBVbDQ/yMU/2m+Fmpc7PBz4IA
rW/CakFrU+/R+sdgy7zWFMcWr0ftX47XXYnnsPI8hWec8hiqhzzqPUf9Z5f3
dvXzJvdXfZSHdu5o7//0c1n/Dwci6+3Z/r+hM/195od4PihvFH/ty0j03z3f
VFOnI+she9BmhvYvof+VNX52zPTc0z/PLdpPzzP1Ru1F7yD4/zApiK3XqPan
h/YPMMNrWWdxq5+/WeoD8FL/59G/lvJL69cZVeB7oT25wuta58Iir1/V8Qnv
jeqZ5f4/UIZ21M/gSv8u/Uf9im2LLN/Uc1Yyf2lg68jz/vYS9/0HGeRhlw==

            "]], 
           Polygon[CompressedData["
1:eJw1lwvc1+MZxn9P+f37d79IRmwOUw4bWcXM2IaQUSPEzLDZ7JANOTVpDsuc
zxZTcsphW5tCWVRoZXpTVEpqlYp1cMwYOWS06+u6+3ze6/3f1/M8v+dwP/fp
6XzKmf0GtKmqqkepqo30+9+oqtmS39Pv+2H+ovh8YZawZaOqdtW4BcX9y4Vl
Qge1byY8JXmq8GldVZ8JTbW1E1aqbZVwU7OqWG9Xff9N8Ska0158N/G9w990
Fh9dPNcU4QHJX2Jv6ntNfGbxGMayB/bCHtnrCmG65N3Vv7HWfVf8HWEbyds2
/A17ezU814HCEI2/RDhIcmhMe+EVyf8WXs4zcraODZ/1cY39SuUzc6ZW8Z0r
n5U1viZ5bvHa04VxkndQ2ydad434c+JfFZ8hXRwuvl+xDtAF+IfwvXDfRMn6
qw7WmKPFh+mbjcV7iR8lPld4Xihat40wX/ILQlvJGzUsP6qxXSq3LRDvKr5j
5f4+4geJHyj0DvMDJG+m/qe18KG5v/2z/ym1Tc32w4Qjw3tjjxP07xDxr4u3
iD8j3kt8z+I2+hjzmNA3v/1uuJ2xM2rviX2+GN7rYmGRsInaNm1Y/rvm2qVy
24f65gNhptqfxXaFsep/GHvNtockf7ny2KXiL6XNcq9vh++KO9u+4fuZU+wD
b0n+D/rN9aY3fQecF/0fE157LXsP72Gh5M019nD1H5f7x14mCf8K3xF3wZ1w
dz8Qeqb+j8/7pG+8MEfysegZ3Qvfl/ym8EZ4b+xxWthX8IcpTdvYOqE1bW+x
5EXCnZLvCvviTho7udgn7xOuTf9aU/seuLuj1fZL9CeuT6ojxH+MbsQ3ET9b
/Erx04WTJf9EGBD+hm/7Cb8idmh8x8r7PyHcRt8xwmmSGw37xkTxJeE1WKuv
cLLkUTrTFuo/V/wKfKe2/Z+Kz6Iv8Q7ix4mfib+m/geJ/wFfqG3L7JG9Lsj9
nCZ+vvjr4l8UHyz+M/FXxDuJ3yP+i/AZOes5wtXYkvolVvti0+ln3OfCYptd
r/5tKt/fPOwn+Q3ifwr7Dr6OT+FDc3W+HuKrxNtJ8Z0yvq4Ub7bYxrG9eeIf
h2MTsYaYQ4zirrFtbJw7X1ZbXzeLP4QvaP6txC8XHyY+L/Wxj/ie+JJ4W/Fu
4vuFY48+qfYujkHY9vbio4ptfHLtPIFP49vjNXhr8RvF/0zMrL3e8eIHi+8r
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
            "]], 
           Polygon[CompressedData["
1:eJw1lmmUzmUYxv+vet/enulT9aHlVEcn9CGirBGlkhMhopSRJYVsYSgVLYqy
M2PsYx1GhsEwDDOMsRtZhhDCKMupg+pkaf9d57778Dvneq/7ef/Pdj/381Tu
1r9tv0pRFI2GOGQlo+iVWBQ9HaKoKTwDR2E13hZix9DfwXIaP4zXAL0FXQoT
0ONhImQRW0/7fehc9Cb0fvQBuA7n8crxqiaiqFrCYsvxNuNF/I6JlCg6hbcP
rzK/H4QEXhz2450ldgv6VkhCSLHvHiR2wOM34z3E/6ok7D8VeJXwbkqx2CS8
anj16L9+sPlo/CWaL8yFQtrMgpbodtAWHqVNmdYDXR0egSN4u2EXFBHLwStD
94Mu6K7wJiwithYmo2fAdPiKNh9AN/RCYh+iP4LLrOsl2OrreAM9k/gL6Oeh
ObxMrAB/LRRDQ7xWeDtgO+z0/Svhf0XobI0B5vgetcV7CdpBM40HbzN6AXoD
ukR7DJnoRnjNNEf62Q2r0bPwZsJUKKBNHt4KWKn/uHeCtsfhPIzFW0ZsKeTA
KuKj8b5Gl6LXoetAbViF9zo85+PqhE6FGVofvOV4MzUGmAOz1TfeZ8Sygq3z
JHQ2ejEsUTu8Dngj4GPP9Z8Z10+wzuf9a9zGNQqdiTcNpsNAeAuvB3RSftDm
fbz3YBj0x8vBy4ae3k7t04iN0R6jh8FgzVfzxhsFX0KaexlQH90EGsOLwbx6
6JroWvAYdFW/eEOhn/c7G9qg2ysvlG/BvNbozug3lIu+Rp/iTUJPhimQjlcX
ryO85n0p71t4jrWHDtAX+nhed/d8HaC5+9qqfryLzmMNV8Dj6Cp4uegKOAM9
fP9yk1Y7VEOa4z2FNw1vDb/z4Um8mniT/Ux09/MzHD0C7uRc3wH3JexsqzY0
9v9MoV0TfROmJu1cPKtcCpbDOr9H8X5HX4Vrvqbaw6XEuqk/nbtg+boab5xy
Dn2MsR2F03FbR+VdHvGR6DE6z55/OgPp6AzNC9Yl7cxkus5Hrwk2zxqqK1DL
x641moeeD8M91wfhdZaXtP41jpZ4LXz/6nm+NIQngtU31elG6F9oewX+hQI/
W62D1Yqpfrbb+Dx1Rueqf5gP+XjjfR7pvgY/8J2zsNLPSY6fj1T0PB/rYPgN
9uHtStpeac964/WCd3w+an8ubnVA5+wq+hochkNxyznVxgW02wNH0IfgsO+f
7q1XvcZ2+T//vA4otzM0Ryj2ulyI3gAbg9XELK/zxehNcJ0+l8YsHhhvSsLW
QPuv9VgIi6AnvB1sPqleD1RDCmC92nkN3Q0H0fvhAFwiFuebm9Br0Xeh74Yi
+t0Ie+J2ZnV+S/w7G/nGX/h/Q20/UxPw6qDrwt5g943mqLF/E+wOPYM+Dd/D
XmJ/4N8INqZyvD+D3clF6gPOxewOVT3rg+4LA/xM6C7JQ6+E/Ji9Cb7FOxxs
X3SedA+qjivHDqLL4VCwd0Sh7hzlXszuo1XKH5jo97BytgLOwFnYhbeT2GX0
TtdXlMvB7sRS2Bbs7aA3xgX0eXnorXgXXZeij6NPwEn4UfmrbyRtD84pHxhH
YdzuQ90329Db/Tv6zyk4DbcnbN20h/ejH0hYu214ZbDH+1XOKHcqfOw7VHPR
nwS7H3rhjQy2n9rXRMLGqfF/Hiy2mHa98b4IVkcbaI2gqu99Dbzqwd4EqtN6
l/yjb0Lk7yftue6XgehBMASW4V2kzwuwxu9IvUH0blkSs/dBtp8TrVEx+oTW
wfNVd1maf2csepyPVXPSXTcEhgbbK+3hbcztHrg3YXe43hkzaF9G/3thic9T
/9Fb4SR0RDfF24ou9zrwH11nmKs=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtln1MV2UUxy8Xvf3w5hukmNqMVqajGmhKWCpi+BKmKJKioRNLTFKzMEqy
tAxMzbd8G7hMm7ZctVar1tpatVprvaxWUpSpqSRmJamVL6F9vjvnj7Pzvd97
nuc+9zznfJ8no3zhpAVhEASNWDI2l4cJ+Fn4tJQgmAluiIIgFbwL7mAcBEng
ifDV8JcSQTAbfjv8cnwJ/A78Jp6fxKcQG2BzwFtiwxXgHeD/GDsNvAG8lrlK
eb0N3wY/HX4jfA/i94JbwEew3eBucPXg+eBk8EXiy8ENcO14fgC8C3wz1hn8
C+9f8fiHmP8m8KWkINgP3wV8Afwj+ACWICYLrgYrAJ+Ba8b6gEfBlWA3gn+H
ex28BLyEOYvBN4BPwLdg+fxLEXw663kZ/hjvf4W/GjwG3Ak7z3eb4JaCR8H/
DX4fvBIcM+4yrBr8Dtx2/HTmbGXMYZ73eB7eAjeAu4Ij7GHw23BvYvXgLnAf
+14sYz1V+CmBzVsVWa5e9bwtAr8GvjzFYmojW4Pm3AP/ElYJDuHeBdeClxOz
CjwBfJb138Xz7Ywtx5/meQT8o7wfjS+EH49/2utEdaNv6FvalybitsA9C272
f+zOt+rAd4D/Zb59ngv971T8uMBqpc1raR3v12BF4HNwNfjJxJwlb+t9vxKM
7cc3BsJn4m+DT9X+Rvbvq8Ffwg3j+VZi+kcW38IcqdpnH7uP+b/HTsP3hs+G
HwSfi5+BjQH/w/uOPucHxLyH1YE7aP3EFBDzBzEHsRT4bN53DO27HfDrsWLw
Uq0BPDSwWjxGfAZ+bGz1dh24FHwndiX4CNwpLA/8CNwmxpcFVgPt+fYkcA14
NjYWfJ7YGcoBuBRfGVluVduPhdbvi+U958p9pWuFNKOYuJHai8j0QT2+NbZv
qa5eVP9FpgPPg+/Fjw+sPnLgcwLL/5DQ5snWmNA0YSf+CtefA4zdht3vdXgN
+GKS5bzK1zwvsl7Qenfz/gWeZwVWS094H6knN3svPIdPJ+4E8zSSh07EbYT7
3HtI+d8aGq/1SKt+TtgeqUb0X6rtCvwh1yjpWB9wT9+Lb71P1Y9feJ13TrF5
ksGDYqsB7e/oyOpKtZQF7ulrUx2+EVtNq4ZrpUfgC8Q+7j2ovpMua7/Umxnw
veCPJkxvtbdr4fZ6DqWfG7zOPotN55Xv/a6d2ovu+D8TtidTvL7y4PPxP8Cf
YW1XxYbVC73A34GPg9Ok4dhvnlvNM4Bxw+FmYpmumeWun9LVwaH1RS7+VJLl
Wd+IvTcOEVPHv60Bfwh33Ou/EDwcfoR0Bt8Orr3qCz4vMm3PBbcSnwOeA17k
2iudL4gs/zoX2lRTgf2D/kW931X/Ab6e+Lu1Fum4ny/V4ELXqHM+tjfPi127
pANaZ1/wNLi/wLeAK/xcUC9P9PkVMw58bWgaou9leu9LAxb62aRe09mns3o+
XFZovTwwtD3XWM2RpnyDe7huaE/Vr81+HhWpdrxWj7puaGwZMScTNl8e7/Nd
Jw/DPRWbFkhj54Inex2WuFaUhXY30Lm8gPcrPEY6c9JrYKrnQfs8L7bzQno1
ElzlZ4bOxHv8zJVOLnNt11nT6jm8L7azW/o5BDzU/1d73D+2/WhyHVbNfBVb
/UgPN+MfxIp054nsviGt2KkejE0j1KfdvIal+aor9Wxfvzuo3sLQakw6Nhif
6ee77hXPeG1o/k/83JT+D/D6UT1/6ueCzv1hse2Z8vxRbPcq3aPS/S7UGFvP
SqO+8ZpXnfdTzfjd5ifG1kd2f9N5qv7WmK/VZ66ZilnpGrsuNI2T1in2f0Gq
MQs=
            "]], 
           Polygon[CompressedData["
1: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
kmNqy/J/2hUaYA==
            "]], 
           Polygon[CompressedData["
1:eJwtlmd0VUUUhW+e5vrCEFB6FRBEqkCQLk2kCNIDoSOhaKiiCEiRIhCUpvQq
TVBRsfdlb38syyVVEBCQrkhROvjtdc6Pb2Vnz3lz586cc+aWyx7VZWQiiqLZ
kAo/hiiag5GeFkU/oX+GdtAWHoSKjB1PRlEndFn0EXRndBeoHkdRNdiOdyIl
iorhDYHB8DDUJ/4fxnLQTdCNoZ57V6Abui/0gUeIOYhXEF0MisJ9eE2hEboh
1IK/ienLM/tAC8aa4Z3Fq8z/J1lDUbzG6CaQBd0hGzoS9yxj54ltiR6FfhRG
w268S/y2FH5pyIc3H+bBAuiFd5WYC9AW/QTeWBgHh/CKa63QAsrgJdnLieiL
zHkBnsM7QFw6Xh4IkIHXAdr7HCXwOqIHsNZ2CZt7NPqx2Pa+Ml4lzQ9/Ev81
3leQxrOm432DHgjZcIrx6niD0F/A5/AlzPVzvqTzRE/Fmw5Pw3fwLeRhPJex
79EPQX84SXy1hM3dy3PiBF4fdF/4TefJeybwU6Aq3iDWPRAuM5bp56t5qvp7
6H264o2EGeiZMBBuEDMCb7iPZeNdT1o+1UHXhQZwBu9dvHfgVta8Cu89dE+4
03NWa+0N78NkvEk6O4jT7D1noT9i7GP4xM9tAt6b6LfgbegBNfBqQm04zbyH
/bx01mWhHNTkXWtASfQ59mInMVno7j5HhufuDvRU9BR4RXnOM//Fb43uAO1h
MjGZzNUVeseWrxODxbVKWM4+DmPgYtJy+yn0lGBnuh9exNsI66EAzyjl69pF
fGn07bALdkJ+xpcSt1vnzfP6wX+e67nB3ukMvz0L530O1ZfqrCJjNxH3O97s
YPGqE+XwM1onMSPQK9Ez0bNgKXoJLFOfUDPi+fXQqeimjHdQvcJm/R5vjOoB
biEuA78WNIDrrKWa+gy6HrSCAt43VnnuKJ9Wo9fABlgPG1VbjN3MfK+rD7je
in5D74MejrccvSLY2m/zHPsVvQ22w6Rg53Lez0Xn9ips8Tn03q8pN5RDUEv1
ireP+PHeu86hn0RPgD/Q+bw31IZ7guXLFvVE5lvP+22IrX474/WALJjrfSrL
vd5wzft0OfTRpOWScuov7w3dgvXHHrG922r1ZfbzdIrV0VE4Asf8+cpT9dtB
6MHQ3Ne+1fcyVT2PuSbpHPBaQptgd4b6lXRreMDXpHtEdTnWz/UD9IfQyc++
ndfxsaTdQ+XRFeAu7z3DiRkGE2KrWfVY9cJp6LWwDharHmLrj9KL0IshQdww
9STI8XM+5T1OPSkz2P6or11Osfsgv/oMrPWcTWGOccw1Hp4PdkdozxfqOVA8
2H24I2n3Ugn0XtgD+5SLXpeH0YegMHqz9krzM+cQr5MheCPQ1YPl+h7mu8F8
dwfrQyV9X8r7/aH1aF3TYutv6ulzgt19F73vK182qUcEq7Gx3hPVB5agF2m/
4AfGXoaXgu2ZakK5XQUqB7s3tT/q91e8z89QncMsyAsh2N2nvE739atu79CZ
QgWoy1rrxFYnSeKaKSfRV4m7BsdhW9L2uT/j/aBnwu5kfTOo5u9lrDE0gQLK
W/9NQXQhmBdbj9M7rUCvhL2+l1rD/eqzsd0lK4lbprzwet/v51VIdULMmtjO
axPeAdUtHIRfYCFePsbmE7MAqkIVfx+tqVJsdZ6fuCJQ2PdF3zkZfr80QzeH
Ip4Tmnstv1unvud7pB7SEN0o2F/1lf26R4hp48/WGpbHtk7l2FB0Tmx9UD1v
TGzffPouyEUv0R5B4Lmz8RbA/IR9C6if5njNDPA7+QXPT/Vv1cW6YL/V94Pu
00/hs2A9X71f3yL61sybZnWhb8bCes9g3236Tqzvd/tQ9DD4H7XRUWU=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlntMl2UUx99+P3vxlTc1yTRFg0ISU9TwghRqKoqCUiASeGkxNHOIZmrp
cmVqc+Zc17W2Vi0rV5DN1JzXqU2rWS1rsVxqm90sCyyTqeTq8905f5yd7/N9
z3M7z7m8mbWLyhsSQRA0I0mkIgqCSsC7cRCMQ2+Eq0fPRtaCa9BL+FaEnoZt
NTIXvA9uHnoDNnXoG5BV4N5JW1N8lMIYeR48E+631CD4is37ge9FpmHbyDpf
wy3F5gT6ILIA3ITe5/gH9IkwCFaA72ReE3geeAc6i/HnfO/COjeBG8Gt7LOF
b3XY9IK76uv/gy5mz6fB2ej+yBPgDujHmD8EXYz9bubWw7+F3hzamudZ8xa+
HQWnxbZvAzaHQ7uT7L9Ap8N/hL6CfRE4hzWXYn8fej02M9B/M+cp8L/oidgM
gFuGze3oJ+Gz0L0Yf8s6h7DpmTT7DPSfjFeDT6KrsekIN4o18iO7RxXcYPma
uQPALQk75zmN4c+gs+AHIafAOXADI/PPl6HZ/Aifq/OAfwIPBl9GL9eZ0TMZ
R+xVwPcHwZ2Tdp6J4B7gsfDDkXZsJ8Flwj3K3HT0L6HFyUX0FGyGwa3GJtfv
Lh90IWY2gduxORuaDx/HZoz7IR89PjI/lcCP8L2KwBPA/eBLwed4g+Pw2ZHt
tYa5baw3CPwI+Fhod9R9s3Vf5CS4f2TJsRh1JWF+kX+a0bMiy48j2G5H7gfP
8HjW+17D2TvBH2JeBtwe5iyB/wz9pueR7nUAPB+chn0f7HZh385525D3wb3h
JiN58gu2Oz3GZBcx3o++ObK5irfLqXYW5e92xp3kM/D16Bewn+PnVAxrnd0e
28qRd9AxNoeZl8n3bp6T8lvgd1Gu/ZFq+/aFbwEf8DNcBG/1M19yrNyZrlqA
bIktL5SzjfD/YXPaY+9qqsWhfL7Bc7AltHd4GPtrGafEVgu0r/aUP4+gy2O7
p+JQua+a8RfrvQI/Bb4MrtZjcgy43GvOa7HFwFnsR4I/ZL/5geXaN6HF+R18
H4kk5TdsTsOvDGydCsbXJa0WDfQcuS22HFOuKcfeY1yNzXS+T/U8VfxUeF29
BJ4Dn8a4EJtWz4uf0S/DT05afdjmb1eJzcHQ1s/0uPqUfUK+l0SWE2vAr2oM
vgduE7gwabn2QGw1enRkOaXYOIN+LrZar/XvjixH6+GWq46AJ8E9Cx4Nngq+
kDA/tKFvZXwM3Vn1TXbwN6ZYjizEfgd8nuIDmz7Kcfd5DviThNXSDuC97v9t
HjPqRx8oZpBm+TYyv+nbVriuseW1+sjsyPpLOvvu9Dorn6smqFYVwzW4H3T+
Xf4uHbEfp/wBL4ytb8n/fZPGSy+Gr4qsv+1RbfHeUZs0f6wD702Y37TOotjq
nmrGhNhiXD3rV/U1xg9hU8P3hOea6oN6pHql6sAFz331rDd8P/Xc7inmW505
gZTBvx5bfGr97/BbKbgA/iX4Sq/Jd0W2t2x+T1icjIJ/MbZc0DpNym+vRTXu
T73dUbhZSDfwqdDeWn22p7+X3r2Hv6PisDt4s8et8q7E/w3Kk3Zm1fOuKfY/
ofjXe1b5v8R+5r3tOau4rYut56mPzPVc010US+rhw3VeP5tyZ7zX/BWx9UHl
bKb3AvX5lfKV91/5SLmmuvqMx5fq/PfoPMbn0UMj68vqNerVRd6jV+kfyW1U
H4aCW8FDwGMda26h913x6sXyfQHcMM+FEY6VQ33BGd7rFee53rvzY6v/6o8b
wWXec9Xr13m/VG6W+puuja336I6qn8eRZYG93XrPZf3bfOxxqP+xBV5/VBP+
Bwb6LVI=
            "]], 
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1:eJxFlndwlkUQh18IfF9eckBCGSAFEgg1IaEGDNIT0sBIlBIwUekoEntHsQ72
3sYuoA5JVJIA0kNzVBQFRwSkKGAoBoKEUAP67OzO+Mcz8/t27+67u93bfeOm
FOXNbeh53gJoDIsCnvcFhrowz/savRJSnOedxlYLZ6Gf73kNggyGD/BdE+J5
Y7FdCznoPPkNi/FdZJ3lzInBdwldD8fhGHTGth3f3+gtjN0M38BtzL0BXyxs
kM1hawANYSAcw5aMLxU9CCpsTgG2aPYUA0vZ91fQDN9Wxq9Gx6CvoC/DGejL
+K7wKzoSXxREy3mwpbHeFJgKd2KrZf5pqIcsbAuxhUETp/vcyBoO/Tn+zyAS
W6ncF2cr5vcSuGB3EY0vlLFBaI9ei81HX4+eyNrjYQIswVbDnPX4K6EE2jFm
FfaVsAamy1hsiegE6Ibex7ie6Djbl9zbev6/ErrLGOhh95jEmHFQwDqTYDIs
xdcf+jmNfZ3dVSnzS6AioHGRsw+Ao7aOxOYq+BT/4oDuvRjfQvRk/LNZuxJ/
JPGJgi4W/3BsEdACkqBacgIOQg/GtMb2LXoV63wH38NaO3s+/jas1RY2YtsA
k+y/NpmehV4nd+D0/6MsNrXs70yY5noa9pGQDpfw9WdMhuQdcz24aDbJl53o
32EPxDLmlJ1TYvMP+jTsYo+/QRz+EOYPwNcB1jFuC2y2mEtOVKCXwQp7J90t
hpfxXYF/4VyY5pLsXd7nefR85j8Kj0ms+I8s+w/Jp2r8J+AkXI2tKf7rJMdg
nNwL5Eu88PkSd/QwuUvJe/RUmGb+UGxj5F1ArtOaILWhkbxX/qujr3PbMi4W
OsAofOPt7APxTUBPdBrzHczZDbvs7ffBdkpyDP8O1v0FmhBPH1oGNX4SV6kX
PzPuR9hmeXOSsb3w3++0HkldmoO+VWoCxOAbzrwidEd0HESb7XU5H3o0+g30
m3CQ9f6Eu9Hd8R1Fj8E/BL1achDm4ntA9oMtDd+D6IfMlogtAeJhpNQ85qdb
DWnG3poH9c2vYZ0D8IfFajb+WTAYX0vG3yL3h74RXc6YMngN21+sdzigse+L
rwb9BPpxeNLOk2O1OBv9DrZ34T0Ygq0VtiiItP+Qc94F90hNwJbOmKfRT0EG
OhnbAnSm6XvR9zm971TLHcmJsZDn9E6HYRsqcbe95PpaM9/C97bTPcmdDsb2
IvoleBlehVec1qPCED2v9Jf34UPJPekt+H7izNtgZ0BzM99iHWlnaw8jfD2v
3GUhvpvgZttzE2wREG5538Zpj+gkOYxuB3tYezcMsrczHdsip3U/1+5W+puM
/4G58VJrGb8Jip32RNlrCbrU4tpC+hq6wOme9kp/CtH3WI0+EdA7T7IcSrT7
PoK9CuoCemdzLdYpUlcg1XK4N9Swl974+jh9TzmQDaMtXyUny1mnTGp4QHuf
1DCppzPxz4Bp1lOkdnVFd4NG9o6XY1vmtFflY1uBHi4xd/r/8o5HoD+Gj5z2
Usn/T6y2nsd/AeohRWIkdwO9bO+yTmhQ15b+1wrdOqj+k9YXqu2MGVarZZ1M
dJa9mULrYWVQDgc4534YavVNatOXkmdSE32tM1JvSizHGqLDISKo3wx19s3T
Ht0B4qGT1DI4ZD1KdGe5LziMLcHXHluFPgLH7ZtFavt+s1VZn95qPU16s/TS
nr7Wwe2wL6B5I7WhyOqZ5Pbt6DssrhnYMqGL1aOHrXbJW56HfgSSbV+Jvr4d
eUPPWQ2RvvE8+gWn31Ij5T9gjn2HzbPaMMrXbyD5FpLx0nOysZ3l9zl4xv1f
K6QmP+u0nx+y+5A99HL6jbIXW2PGBEK0z81w+sakV8mbmOn0260pNLc3Ju/z
PyrIQ+U=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlntMV3UYxk/+cMczf8dmJdksS0vN1Gkra5Wt1sWlmSt1abVUsAxIbhJ4
CRBCU1ARRAICQfDWNF1qaa7Mmlt3K5dp5TIrm1bqMpc1tcvn2fv+8d37nOf7
fO/v5fRJzx2X0ykIggO0BO3eOAi+AJRHQdAdvA1cBH6JtpP+4jAITiWDYAV8
Ftxc2jvgfmjfxa5FswP7PPxubH/4NHADfH/GHmLsKvhsuOvo+xa8AHwLfU1o
BmN/g3sN/AH2APp87NXwmeja4O8En4Nvgp+hPTBPt5QgqAe/SPsefjRcSWRz
DAd/ir4c/BTcBL7/AC8BT2OuTcz5JPY7NO3wOfC9+a6H74Otgquk/Uj/M/St
hL8ZvhJ8HP6G2O5hF7gvuJCWZD+z0NwK/gS+NLKxmuc08xSDNzDPeDR7E7aH
/QmbV/PrvNVo/tI9M8dR7CuBnS0Dfhn2LPNczjqptAWx3WE1/J/w0/2MS9H2
pX8XY4v4ruX7H2wB/Vnoz4Izwfm0Puia6c8FXwN+GbyYdhLNeNdvZp6p2IXw
R+AfhG8BD0DfCB5J+wr+Bbja2NbWnJm+55Ps7TBtPngo89ymtwHPo78efCX6
CvgycBdwEbguYXdSgx0Qmi9p7OzIfO1StAXgjeAQfDhh+/wBe4S1FmCfpv9j
cBl4GjiD8VvRTAzNP+fAf01/K/h6nZ15GsFvoZmPZmCKYZ3zI/f/ZxUX9O2B
XyVfS9peszxeuqOtZJ7Ofv9DscPRrwbfF9odvwG+CnvQ96y95zF2PTZm7Cxa
TP8KuN+Zv97XrfdYa8H2SrHYvAJ7zM8oP5+HbYbvwO6htQfmo53QbQOfB1e4
Jhd73N9Fd9UVzQ74X/ieEJqvlkV2Jz3pW8i+fk7aGrrP7NDmlM/vg8+DnxJZ
zOm8i7A1fF/AzmTsr/4u0yO7k8Xgo3Az/R17oLndfWkS/X/T1wge4fEo/Rm4
IZ43xM92P5mLvYexhzy3KJZzwJ+h/9LzyVTFhce49qm96T7SGDfEfVIxexN4
n+fDx9BvlD+A8/2NOtPfhu2A/9BjUzF4gnUmR7buXvCo0N7rEewdoeUxnV0a
3f3naNIj2/s34P1+h9rnWPTrdbfgdtYbnGL+lu5+exBtmsdmXmi55X3lErSt
rm9TrgOf9ry3OWF7WIut4vsEdhz9Fe5vyqUXg7fCF4IjP6fydrnnN/lkN4+L
HthS+BBbp1j3fKIcMshzoM6+zHPalNhyrfxqA7ZrbHVBufcB8AH5ZmT+sAbN
SI/3N+HPc94O8DDmX4M2h3YReLnqA3iQn1dxq71VY7f4eXVujVXMNoRWQxQX
rdgWHyv9CN+D8lhuZPfUCW4MfesC80n5gN50lOdD5ZuxaHr7valu9opt7UKv
TcqZD8Hd6HVWMXUKu4V5jiWsHuktHqd/e8L8bSd2jp/9MuVmr8vyB93n62jy
GVdDey+w/FlC2w1eHFp9UJ1YwrhFka0zMDZOsbw0thykXCRtA5pLsFWx1QvF
bDp4WGy1Srla+fZVcKreMbLcthr8HHgTfE+t5fm8KbL96xwXklZTlCuyvcap
Bk2OzQ9Va56IbQ/Kn8Xg+z0GlasfBZ/xulbifv5f0vxad6i7XOR1eSLacwnL
jap5qtfKZ5Ni+z/Rf8u14Lv9P0Rxrf8b6TND86nt4NKE+bXyYT9shu9BmjHg
wH0v1e+wAP6u2HK6fFh5SOf9KWHvorstic2v1sElY4sBxYLursVrUDP8DJ9f
cb0ysvetBf/r+VD/P28nLD/of6vd42K5v4XeqAv4Ya+nis08XzcFri62+qE3
qnKfUc39HyESXWU=
            "]], 
           Polygon[CompressedData["
1:eJxFmHnYVlUVxS/eN0+v3WOUA4oJKE5YAmqCooCAmgkqoqZ+kBgiihkooCCI
QDJ8iMzzxySDpZWp5ZCKqWSPqQmFlOAQqYlpmZk0iGmtH2v39Md63r3v2fec
8+6z9nDuIYOG9xu2R1EUHZsVRU2/J+eieKEsii1CV8mfF+6X/ICwr+QTU1Gs
lN1N0l+qiqKn9DXSV0mva/xr0r8v/UHpLaV3lb5K+n3SD5J+kfQfSd8m/XTp
/9IciyQvFj6UPKRu+5nS35F+qmy2lrbvIfllPXtG8rPCK5Kv0Xw/lv3L0ntq
vLX0FdLHSP+txo+WvkT6bdL/JH2g5l8ofYT0X1cG8khhs+RScyyTvFz4lOQ9
hTsl3yV8WvKZmu8Ovb9Q+l9l/5owVfI04Q3JvxPGlfbPdsnPCmslrxOeq7wH
9sL/e1dyoTmbSq/J2pM0/0RhkeTF2XMyd6PwB8nHamx54f3+Sno/6XdJf0f6
f6T/RZgreZ7wnuST4rxYg7UOER6R/KjQVnKDxn+goQ3SP5b9UOkPS98l/SqN
Xyz9O9I3S+8ivbv0bsIXJB+cLXPGnC3P2HdbEekwYankGzT2uN5vLn1i9n97
pLDNopiD/dxeeO4W2VyDc/tJ3kO4ozQnTk7mBL7Dh29LXqPxYzRXe2Gd5MGy
uVe2delHSZ8l/VHp7aQvl36L9CcL72+h9C7JPsI3zbJtsD1aWCH5q8IrWutV
obfkS2V7t8x3Sv+69OvZo2xL4QbJ5wmvwwXhfMnfjvX31vhY6ZfBebguDJI8
IfxR0/go6f3jPJiDuS4Q3oNrwoXZa7AW9mOy98Be/i4MlNxD76/W+0ul75J/
rpf+oPRmsh+m8Rul/6TwfJdIv0b4BO4I35L8mWyuw/m9JH9F9usKnwe54K3g
I5zfIbmvxu/U+M+lH6nxK5LPAN+3C7ylsfsKjxHzxDIxfRr7D38+L70j64W/
v6tn52jsymxf4bMrJHcSNkneKHxZ8qnJ3IFDcPv1iEni5lY9OynyGfw9UfJn
hXsk3ys0lzy67rXWS28jfZDmu0f6DunnSv+S8GTp+Ggv+YvJOYU4/rMwINv3
nEGD5GOz98Yej5N8nWzv13z7yP+Tpf8t4nOO8L7kRo0/pvFDNT5X47OFVpJb
C3Oy/QiX94KTrBX5cqne6aR3ByRzBq70y16DtfYVpsZ54Hv2g+/w6dnCGeFr
bLDdT5gmeRw+qjlex/N/hSdK+wBfDEyOAXh3aXZMEkPNIlb/WTmXs0f2Okpj
D2j9NppveDbn4B6cvkjytRr/YWEOwsWhwUeeXZ3s3/7CMMnDk2OA9+HwWOkj
kn3M/55C/cm2YWycMDJsGNu/Zo7DdfY0KubkfDjDAbG/i4UxybHSEPEFRy9P
zpEbwh8fSf638HDpmneJxj+RvkJ6k/T27I0cIX2UcG12TaG2UEOuq9tv5B5y
fy07RtkjeyN24fxgYUh2LJyuZ6cl16UkfEP4qHQNpBZ+M/4fPsSXI8P/PGMM
XJ3tE8Y4c86eHLVE+7kt+Hdwzf5qlN5Sv09ofHb4cXLwpoWeP1O5dlFfflHZ
n5zVJHJf9nzYzdTvrADcZg3GWP+Amm2Yc4ZwK+9pjpnhb3yMbxviGXthT9hS
U+AqnJ0g+ZbgMzHA+rt9kpx38RU1bVfkX/yJf8kt9CRXkW+EIcLl4ff/PRsc
tr/RXkbDb2pIcs5YH/W0dXYOhktwarb8OV36gTXX1EV1cwAukJM53xnhX2yw
pQbUop6MkNxHGF86J5GbyEnkpjeFsyWfmV2byJnE8+3Z9XC97Kcm1zhqHfV2
geSzhO2lcza5+5jIceS2DkJvPTtL6JydL7E5N7kO8m5f4QjN9VO9Pz055x+R
bdM39ncOvk7eL/3ghUKv7HxPj0Yfx5lwNsjbwv88w2ZrxBPvUj/pieiFlgjd
hW6Rhy4TTsnuWbvG824hk6OwQd4S8csz5jgy+M7c7PW1yDfsGZ/hOzg6K/7b
41GP+I/4ifinRpN3qfFvRPzNqDt3vC39ocI5hHpMjaI2HSrsnV17qEFVdo2l
1q6Vfa9k0FPXYwyO7M5T2dzh/Zx9Rr0D9GfMyRj7nyKsCi5QgzZF/YXXh2X3
Fuy/IbjO2PulOd8xeEBdoTZ3CG70j1pzfMw5JOKCM+PsiCFi7ATh6dI9GH0A
NZp6+D3uDHXzhV7hKeHw4Bi1mf/Af+kUc/AutQufPVa6p+kRPKBvpLdsihxD
rBNv5B76qZuF+dl8p1/uKLxZuV/ZEf06PTRj9Iz0jj+TvqbunpLekjtDu+T6
PC25z1wb6FBzzW4MDsKdF0tzk56R3nGDni3Q2MS6/zs+oDeg36VPbpWdLw5P
ziXklBcr3y/ouei19gk8FPWCMe5UB2bHFPGBfIBwQcTZ0oh3etwVda9BbqI/
Yu3V8X/JEfCjjd5ZQCxo/PnKPTe9Hj3fCL3/uew+qU9y38D9r7PwdOV83zz4
zPn1if1x96OHbxF7uzvOnz2uDB/hm4XJPj5K+GNl3xMzxE7S/m6Gw3WfDXtm
79MiPtk/Z8Idj7se/iM3n5fsK3oWehfuqNzFuJNtJXcnxyo9O707fQK9BPWD
3oc7FXcr7oQbK3OJ3H1QzZwiB5ALyLfkRO6A3LM4M84HeV74j2eT685l5DTu
sl2C7/Sk5K2dsv+gcl0/I/kORD9LD0UvBf5R+Z7VPWyYmzV4d2esR09Jb/lu
3I+4Lw2tu1cgt5Bj6BnoOek9uSNfWfc79MkfxFyc2f7BsZZhP720Dba9Yr5J
0n8pfZswNuaDF1vj/ruYfFp3jWwrbKl8Pk0Ru3BzpXC8xo5L7tnp3W/MvtdM
jLx/SnKvSz/JtwJ6ut29nWxuyr5T8c6kqBUvxZ46B1d/X/kezh2PPnV78IE7
Mc9erfwdgXv0+dQH4SmN7anznpedO5ZJn1A6h5BTqKXc2cg11Ah6mylRO4iJ
ppif9enhW0c9hrv0lHAcbtOvsDbfMrjDswd6bvoZ7szjk23gJhzlXe4IcyIO
yD+js++EY/L/fVeL/eHDjfF9g28erZLP7Ln4bsNZIvNtgm84PcMHxOrq0r7B
j5zt/NIxz1mRO8mhnNkLlb+b8JyzJH42VfYb+RV5eGkf8mxzxBdz8E6HZK7A
Gb6d8I2jMerhCcn6jOAfdzo4A3fmamxecr80MjtOOQ/uvHxHouZSLz6M+wgx
xbP5ybmZHL0s3v24dIwzx38B4z55Ow==
            "]], 
           Polygon[CompressedData["
1:eJwtlnmUT2UYxy+/GdflXqUQKQyNydZUlgppQ5GUpUKWWcRYZsPMNIxZUzNG
M2PGMJphzGg5rU46badSnTpRKMIosqRkT+VEturz9Dx/fM75/r7Pe9/73vd5
3uf9RcQlj05q7DhOIYTDnMBxQmGO0xguhhynzHOcGNdxpsBkYmfxZqLL8R3G
zMZLhCT43necTOJxxH5A74Gp+PGwBO9PYtPQRdCSZ1fgLUYXwzKogJV41xGr
RGfBAlgIV9n4fHSejEcHeAXoRaznaSiBHni1FvfRaeh0yIAcyJb3EGtKLBcd
CzEQB5fse8vRTYiHQzTU4a3Fq4cX4GbzUtDJ8Dw6Ai8V/ShrGAu5eNuY7z77
pvbE28G1UIg3PdC9eI7YGcYl2BrOoy/AZVgqe4HXHtLQ6/E6oGfCOXQpXirv
mgMzLDclnsZnBZqvSTDFxktshqvve0z2Fp0FT6BP4RUTT+R3EhS4mgdZaym6
DDoG+v50xr3N+E62fsnrWPn2QOd9HI7iFREbhx4Po2EUjLF3LbbcS14XMncx
LIFK/BZ4raGV5bfSci05zIT50IexveEQNVbEfNMZU41/I+NWSw6JVdj3/f+d
VnPLiXXldyTstnqNxZsGi9AH8foTGyD7gLcGby/ej7APqphnheTc3lXj6X7J
vmW4WnNSn+VWJ/XEV+BXQbXVSSmxMlgq+wdt8ao8rWGp5anoXN77Ne/bDFug
MeMaQRi8RCyZMf/iH0efgI2wEK878WbM1xyOWQ66yVoDjUleCvFyYCt6J+yA
O4g9CPvQ++EneJYxcawnFlJcPe8jGFOAv9vGyfgH8B6Cg/bMSPTDgb5jC14v
dLTsB0TCBrwFkgd0lM3XgDcQPQjugny8XXj90QMCjd0PQy3WYO+V/QhBOLyM
l0JsAmsdLz0BvQfvBqlJfm9H95azh06AoTAEXLzXiM1h/EX29H10JvoS+jLc
xJheMFDySOwfvKY88wr6VXgD5nnaOy/ZuZ2Lnhdozjuzb+n4aSHtEYGtNZXY
MOYcDl3wPsT7CD6x/RFf4qNgM95tcvZc7V2PSB9FL7Y6rbO1yJqaE/OtTmQ/
5H0trIe8hfcmrIMr8CJ4vhNs5ZuSpL+gY6S3obfjfQc7fM3vYbxf4AA8I+cF
9qJ/hkO2z7J/n6E/hffgKU/vikasOVtqNKQ1NByGWc0dtPkm8e6JrvaKk3jx
rtbLF+jP4WOYz7jBgfbVPE9zOgQ929Pc/M37z8MFWTPPj4BxrtaS1M4Em1v6
j/S9idavTuP9BkfsfGR7uuc9iPUMtIZ7yv0CJ5m7hFg/9DH0UXjS+sdxX++6
P2y+09Yb5c5x2YNI6Gr5k3ujE/p66GB9QfK2znL0op1zqc8mgdbc63hz8Zqh
PUi0HiU57yz5DLSWNtheyb6sRK+GVVa7v8JhiLc+cwQ9Rvbd1Z7yJV4Wsaul
P0OrQM+E5LK1nRVZQxv0NdCR51JDWifSk6U359n9dwvxWwM9d4vsPN6Nvgfu
hVpP7+wa9CpYLb2K56MgWs5wSPd3DeN6hmm8En85rAn0rq+1WF2gvTNPcii9
yL7tLJSiZxC7k+cGSa+2O6xloHUyEmbhVeLVQDV8xXNnoBjdl/hg6xdtLA9y
5tui2wV6J663M3VloPPKvr2D9y58YD2lT6D7K726L7of/GX1lODpWs/5upZl
UkPo0/C7r7muxdska7N7SepO9mg/+oCv99ftgfaKbOu/0ttnoivQZdKfbF7J
fw66HtbafSN9IB9dILUHkxmzCW+jr3Mss33pwj50lv+F1it2+nouTsAp22/5
nl2+xqSnSI00oL+xXiNzf4ve5utdnCE1JnUb0v+Qcp93J6/dIMru2v8Am+hh
Og==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1lmlsVkUUhm9w5OsV7hclGjXGRKLGuMQNNBrEKKCiggpEJUIkgChiSiEq
EdQguCTqHxO3aEQRLUuxQAu0xZZCsS1dsMW2dKGlLN3AWrASAxojPm/O8cfk
PPfMuTNzZ95z5o6ckzV14ZAoippo59GeTUdRZYiiwRS+OIqK4PH4Psd20v8l
thz/B9jL8f8Evw9fBr+LPUTMR9gm3u+Aq+l/j+cG+C3sfp674OP0d9GOwQ0p
G1fjf4vdQ+uF78fW09cOV/BeH1yIb4LmxQ7gH9B7tB64XfMT14ydR0xpsLmK
g88H/4G9l758fL8QW0hbCP+VRFEe9igxOZof/0nsImLb4Xr4BbgL7oVfg9uw
J4hvwV6UEUWn4Z7Y1tAPn2OuvmDcg62m9cHrsGtobfA3webTvNm+P5s0HuPv
hlfCw51XwCn4HGt9Bf4R3zU8l8Et8BD4VbgY3uXxw/CdSdk6u7EFvuad2B3E
LML+w3gZxK0Kdl5jfH8a4LvSti/aq828XycNYK9yTVThvwT+ONgZXQy/ozOE
r4Y/85gdzDEXzofPZ69ORaax73i+Df9G+q8g/lO4Ef9eWktkPAL/2/jLiF2O
bY1sX0Z6/F78nSnTXiu2nNYM12DT/l01xKziuRL/9/AXKZv3h8RY/q+wR/18
l/LeAemYNhde7OfdGdu56kxjvmNS2vSq/X8TPgF3w3mMOxrOht/A/6v7lztL
J8dog4wznHHWwlXSP2M/SP8++Hbsy8QfxP6Lf5uPqf3vc32upL8xtrwYB+8j
5ml4M75SeKL0BU+jryaY/vNoNdIhdrrewX9Q50v8qGD7I81LJ9JOK/6Z+PNi
y3flYx3+yfgm0XbTX+R51A93JKYBnddO2jL4DL7AXEvgEnwdnlPPaJ9jy9GJ
cAG8QBol/lKeP4Er8W3AHoms7lSnTAMlXhNUN9qxi5U/8Pxg+3kPtiCxXFDt
Gcp49XAufCGcQ98EeAO+C3j+2nWyHv94eD18pWtYGnsSrlXeKsb3sBC7JmVn
l4N93s9LOlnmepBOsuAj+obYNKV6NUD8I56/J+FM+DB8OLb6o9q2At9Y2tZg
+bsJ/1S4ljXe537l6VPBcnOaNB3budQnFq89KfJ63g33qzb7vmneeq85dzLe
dt//Qa8xelf7ug3/i9jf8ZfQHgr2vVWusY2x6VD3xQOMkxlMJ6ovub7mpsS0
N0U5ntg6tWbVlWa4BP/DvPucv5vpNSoL+xvxA7Q5XkNkG4n5EDvGv30sdp2f
+3Zi62jT4S2x+dVfiG9Lyu67Xdi2xGqLaoW0p7qh+iHdvq68oP+U166t6odn
BDt36f8x1UZ8+Z47ynfliu672arrid2LqoeqLboHlvCNj/tZSw8z4QrVtdg0
onvt7mD1R3fZS54j2p8n4Mlpu/OkE+2bavkUfGdZ0354hp+jzut4YmennOhN
THsad0Ha7r4DzFXGe38mlpu6O475Nyrfy/1+78JXqloGH0osfzXXfMYZlmF1
TDVqltcZ5chszxfVltOJ3U26s6QHaaAmsTXrLhiaYXVIdbUx2F2uHNF6dUeo
FuYSvzTYf4XWoRqoO3cE71b+r0l8P9PWwrf4vurO7Qp27jqvPa4LnfUs1drY
/jtuIr4utvv5Vvhav9dUfyq8JqhWFCemUelB9UNaelTa89orvRW5bv9ObD26
20fpv4XncV5bNO9q+Ia0+VTz5wXbZ2nvLLEFKctB5Vd2Ynmu2n6z/6dJM7Wx
/UdcnzbWmDem7U5UrbvDv0t7Mhq+zuuq/rv+A/8VrUc=
            "]], 
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1:eJwtlnlQllUUh9+xDz/e7Lulti9Ttu/lUmlpueSSmiVaWJqpbdCCSumIWi7t
y0zNtA2WppIooiAQi4riArIoLiCrCigi4EJppWaLPWfO+eOZ7/f9zn2Xe869
575dJk2OiGnned4nEAZ/hTwvJuB5Ob7nnUP/DTuDnlcKjehPiW0ltgYi0Tvw
SmUMPO08LxevkthIdAT0h34wAHKIlRNbzr0SoYRrRuKlofegR6DXoPNgE2xh
7Ad4+4k1wEE4jJ+B15f7nUafgXTGTcL7HL6AtYw7Ak3QAtF4vzDmTq6JRy+A
JfLueHfg3e40thhvO14S91wB2TAW7xD3uMvics3d6HsgAz8dluH1kGegB9o8
9+Id4/rjcBZ/Bl4czIaNvr5XM7TC63iZeLWwHf0M94iEMVBLfJZdcwBdB9Px
p8EMOELsoK+1WYFOgs8gHy8NxqEnwgSbh+S8GLZDBN5qxhSit8FK9BC8InQq
750idUAPx1tFLAvdG70cnY3OgTY4EdIavETsV/RvEIueClGW+yR4HD0MhkIB
Y87A6ZDmR+a4wdd6Sl2fZ2678PbhZcDL6LfgTXvG8ZBq8aZIzW2+Uq9KYlVQ
DZttLR2zdZ3NmJOW8yx0PrGCoM59MF4usQ2wEfZajlKI5TBmLSRbjiSeyf8s
qMOrwauCanjVaQ6ira7yvFOwHj0N73f0H/An1MBMm7vUeh+U276Q2sg7VMg8
0O8HdLyMkT2RYTmX9b5O7g/5sFXWArEBludMeBj9CPSx+uXC9IC+QxFzKIYE
WCq5CGouZE3UM65O6iD7UPLN3NbhvWP1jbX5NOA1oHtBT3jKac6PWq0mW0+p
hgJ0IxyGexmXivcsehSMtp5ygHfYD22wGe9mp3swAb0UfrK9eiveLbAN/Q3e
beg4aEE3Q5Ptj/vwktErYRmU4vXC6wl70OmSH7QX7nnneabPbyveu3jzYC7M
hza8I77Ot97yEQOTYQQ86TRn9ZYD6WEfor+CL+FSvP+4f62tkwt5Tgfo7fT5
Zb72tz5O+2merDVYDxWyh/CyrY9KrxkEQ2AwPGH9V8a18owWOCV9Fu9FYtXo
KrgEvRqvDv0GuhJ9wNd5y/zLLB+PEnvMaa9NsvW0gtokSa8I6b6R/VMS1LXZ
yem9L4aOkIK3i+uudHpuSE+6Cn01xMJUp3tHcvE2egrky/kCJyzPUtev0ZcR
uxyugB953g+yF3mHrsTig/pMByWMXxTQ58sZNUbmDuNl3dtaL4Ry+Bavi9O9
0h/9itTE5tgePwyCUn+8POmTvl5zDd61cB10gI/xPoK5Nu4161370VHoaHuv
hXjhaF/qDlW+ru2h6GEwHGp8rdco9GinZ0Fnp7ndbOehrKEHLb+7fa2z1DvO
zoNGvBB1dOGaU1mzzXid+N8ZuuN1gx6QaHvhAVsTUi+590MSk7MtpPsz0vIn
1xShi+U/7CRWBN8FNB/Xww1Oz8TueKlcswbSQroHE+2a+9Fdbc1mSi+WHhjQ
b4cbndal0O57k9OzcYeseyiDiU6f+31Az/N4G7ebPOySnm7rRnrDSf5vs14T
YP5h4Zr7LXj9oK/1lwrG7ZVeaLWS9bTK1lgC3mp0SkjXxHt4c2A+bPJ1Hcwz
fRE6JHs5qD1J1uwh+X6CJuJH8WbLXuE9OobrWfccjJX3t3XzAnqc034p7z4e
PcHpPq6x7wTJQZRdc5Z7t+dewXDdFwPxBkE3e3ePcedD2rvlDGrH/0VcsxB+
tlrJt8yCoH7LSL3k/JfvgAucjl9vZ0ZA5u+0Nx62+cxBL2Hs4qCeN/KdkOhr
b02zvptsPeWcnQdyZv+D/jek95F+O5P4LKf52Sd9MqjfkNLzmtH/A5m8o5s=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlnlsFVUUxue9vmnnTcsbWroAbekmbW0LBDAKBKxAQdBQwiKgCCXgghHF
PRFNlIBsWheWIAaJBFRUjNEYNfqHmhiNGjXGNSYmxqgBRFpEKHv9fTnnj5vz
zZnvnrn3rFO3fPXcO9NBEHzPymPdFwbBkFQQPIS8lTUQPAN5IgtGvpILgvPg
EP3EKAgaWGfZNwZ5Bn0jnE/gVPN8Gv1w5KQkCDahHxbDhdME/hTOFmQldp5B
Xg/vduQguK3wXgN3JfbdAM5Y3h8Hx+hfZ2+API9oQO5hVcPpywRBOTgfXI1s
Zv8jyNvY28K6CL8MeQg7PXA3Yyfjdnp5Lg2NU4zcyKrAzs3IiPMUgmdGds4B
4HnI0sjsbMHOOWw2w/0MPBj9KewcRvcouAb+KuS1nOd5OJdgbxkyi36J278a
eYq9i5A59F3IifDXh7Z3Mfhl8KVw10Tmt/WRxaIN/U/snRra2TqRtbHF8R44
63J2t//gbgKnwcd0NmQ5nH7uMAH76+RH9l2Ec51sgf+Gd5b329G18XwQ/TK4
10TmkxjdCd7NCQ1XxpY7oxKzobvoTqNCi6Py4wz8echObJTBH4R+Bfgx9GXo
T2YtRorJ4+jGYmuz589JnueCC2PLB8VLsS2NLX+O8f5f9An4gOLCmg8u0ndY
N4FLsPcS+nxwL9zdyDLOsAtZH5tv5WP5sBvdNPjPwQ9Dy+e1nm/KUflHeV7l
+aC4VyDfhT9Ze8EZ7FwJ/gNdB7aeBTegO8TzjeAEvMjjq5imeR4H/oH3W3Wf
jOXtBY/15+iecv0RdFv9/CvhfOh5UICNDp4j9CnwTvR16Pvg7/Qa36FYZMyH
55BPwznuNoey50HeN3KubxUDcD/61chifQt51HNjm2y7r8bB/47nyxTv2Diy
vQNdLbo81RHyYM5qVbHeBa4Hnwb/BV6svGHv8sjyZwGymef96Bdg/0XvG/uQ
G+CnkP9kLXbbwVPhPBxaXukOyi3hO5BVvLtLeQ/3CfUv9C2qFdYD6OsS++79
ygXw734X+XB2Yr5T7Fa6H1aE5qs1yJG8LwytR+1h3xD/VkVsdSifdyFbWUXo
X4BTEpuN4sRyeBW4FLzXe5zutc/vqJpV7Wawkw0tz9WT3+J9kfcK1W9bZPn/
Zs7Oo2+9AV7o/lQ/nJVY3xwOP+19sgqcl1gtq772e8738J0N7KmTP5F5vBuP
/kfe7/Y6Ekf30tkmILeFlpeTEzuPZkQ9MpVYPaq3lCeWT4pF2m2+h72P5Dv1
w6z1E/m2Ce5gj1EDeCgyzbdq1LPhjUB+wb6s99KPwa2h9aiRyBHee3Xf1sRq
Xn243jniDkN/t8dL+VCK/hbOfIV8qHuFNuM0v77G/sDY+ndBYj7R+w/QV7od
xTpMrF/NimxGaDa1g7/0elA9jvHeqB6pOyr3ahOblZop38D9yutXNfI+eAo4
H+7b7ivN3ymsgpT11csTm681sfWfdvBhuEt5V5Ky84z2uay6aIotvhvBv+bs
TKr3e31+rY0snorrDPb95j1BNa65oDrqhtPodboQTgi+CnxEvcrPrL7U671R
558dmW9V760+XzoT++6T4PHgDo+1emi39yjN1tGR+U09vN1nhO4r/8rP6r2T
QuuBOkdLYjNPeV7mtdaDvaPec9SHdT/1kJmJ5ZVy55eczQb1WPlAc0T/BbnE
8k3/R32eD0vBWfTFsc3wGLyEdSC0PjPH+7/qSPNW/xh7Q/Ob+tn8xHqC5tQA
8Ks+EzW738lZ3qsuiv1bEZwb3L7+Dfp9tmreXfC6+Nn7s/w53eOifPgT/f95
MAo+
            "]], 
           Polygon[CompressedData["
1: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
vKEKvde5iPy5qzXi1dpmTjO3Dcp8bg1bW4ZG7Jr3pV+oAW3Tdj2+edalP+q3
ar4q9czu1ogBz9ozNzbUzNYk41ItfS5t7ywih5nLFmbda1+H3lKTmnvez9+n
rZ1lrMU1PZ1t2l1Sv/arY01XZCxdU0ZttEYuyTzj2XrGSzO3attvjvXNdmXW
m9Vl5FBz6Y5cx+rMQz3z2+6gWx05wfh/rAptrH7aaW7M+7WGLKwjzrwPfVRf
HZLz+WYclvdnrn4EfoZnU4WeVmP3zznMNb6Xu+f82r5nfRsPTO43vdpC06ht
1Gvm8xvKqE2euWe/PfO/NdPa6Rl6lvqIvjKwDI2vrn83+EAVWk/NN7qMN4v3
7Rpdq2/wDbkf38KuuR94RxX9vjGrOnKg+cs3hu8WNYHa4EPYH6xCQ6ulfYO2
GVNl6GHtNemf5+Q3vgd9//hbfUat7ptNX1IDqRN8i+n/jufb9kLQit0R7MTu
x/dvKWMtjuWYk7KGWcvUxjsT3q0a1b5tGT9y6+42awC/vZ5vFtVx5p69mtna
qhb7dBU1y7rkHesXxqx3bw65JuuTuWVh6g81it9Yj1szH4+C317FGpzb2u/Y
n7JmZV1Uj9xTRO2xBtUZr/7PolPexUVFvCG8E+PJWDMvzsj78Dy8c+/+k+AT
Vezj2ZxrWp63c9r38dzjM3nm5h71hXfxHyf1D6U=
            "]], 
           Polygon[CompressedData["
1:eJwtlndslWUUxm8LLd+9wPcVaAtlt1QopWxkFAQsIEtmAUGmoCARRURNAA0b
WqAVlC2SgCyFxIgLRxxx772jccuSKZSCgL8n5/zxS577vON7xznnvdlTZ4+8
KzkWi5VACtSJYrE7EOkJQGdAADfhjYXJUMvbZqEz0NOCWOxWuAb9GN5g2m6E
ITAPfzNeX/Ry9AoYhS6GMbCLtuaMawKr0OtgLfSibSCsR+fQNp9xC+AGvHK8
uejFsASG4h3AK6BfGb/LoSF6Ed7VqrHYFUimz2D8QZCgbQRtVfBqokf73rTH
pMj2oj3dCSV41+FVg1Q/i0l4aYyrj86Cuug5eA3Q+eh96JvRqxm/Bmqh06C2
5qatNn2aoptANtyPVw9vFn2XoWvgLUQvgpb4e7U+vHGRzavv3Y3XEN0IGkd2
9tvxKtjreWiN1wLm4t0LC7Q++lyNx2Id0G2hHXwecqeBrV/zzEHfA818XVmM
mc7vGVDT118HL0RHEPfzUEwk0NUju8tSvI7oa6EzXOC7OXitIB8+Du2OFqLz
aG+ps9N+8Jbi7YCdfhYTYHxkZ6GznehnuQK9Em7zNf3LN9K1Fp0xPMk32tBv
vu+9LbqdYtnjLg+vhH2Vwqf0zcO7xBy9+N0bzqEz8RrprGF5aDGoWFwW2L1o
XcNhGDRLWKyPQD9N3wh9hjkOop8JLU6X4C2G/ToL+leDIvRLtL8Kr8FTUEPt
fKMQuge25j14u+Fxz5kx+KMDi6X78Kai9zF2LzwBaf79E5CMjkOg8bT1jCyu
G/tdKd8O4XdTXuC9jH4FjjL2NPFUhi6Hh+AP+B3+hF70r0r/r9FfwTc+RzJe
d+Ys9DtVXPdAf0t7Afoy836H/h7Oo+vjNVEMwuuhxdUt6Cm6b8+3g76ns/Tv
yF47QT/6leFlJ6w29Nee8BupHkEKbbsY1xW/C3Tz+qH+ut8Mj5P9cABy8bfh
bYGtXst2hzbHSfqn4u3xNWehn0U/B8+Hdv+b8DbARq956/Evcn7H6b8BvREy
6Teb9tthpufxOvy1ft5n6P8weifsgH/wkvzetAbtaSv6UdgGOewz2+9eMVeA
fgR9gXkq4ZJ/f5XGow+jV6PXhHb/qnHtWUOHyHI2x+NJNUl1IFc1BzIjW7tq
j+pec9UdrzPKsfoJy7cH0Q/APPcK8FpFdrZ6H1SbSvl2FcUOnPI1LcNbGloe
Z3i+pTLmevQL6BdDy5NPQqtdqmHNoTJuNUu1q6vHQ1PGZQR2lorZluh8iPDH
0/4X3t9wGJLwOuF9ie5Dn76BnbkexGaQCytoizH3VeUm/Uf5W1FBv6bogTAI
NnkOdEZ3gULPJ625Bfpi3GrNZ5oPv6PX4C9C+/5k1VOY4m+aaoTypDX6CmN/
QP/ouddDbxP0hhT69fBa8b7n2H9xe9+01kt4l+EKFNNnJJwI7a0fF1gd6oMe
CkNUN2gbon7oc+iJ6EnwQWj1W3W8ja/pNN4pv6siH/sWvAnv+L51R8MZPwxC
v4Pj3v42vOv1V+fzBno6egYMUN2i/xGvNdrnUfQx5areKegQWC6qbvwKv/jZ
6k5/U/6E9i3d/QS8k6HVxCS/15VQAmNVZ2FmYO+S/jNUjex/QvWEnUVKZGvp
p/yGnl7/PsL7MLR4yPb3Te/lTM/zaSn27mcxdz044nVVOa/7ei+0s23ttVFx
WKT/NlCcYnFXF50ZWO4oj9MDi0W1V6rOhHbPinPF+3Z0grbTcXt/sz0+N8MW
+Bl+Cu0/geJQ53Ye+vuZV6iGQEPmauA1RbXsWNzOQ/+hzipfQ4sRvZl6O/sF
lrOKiVNeM1Wn2uG397jTnege9B9S/zUH4g8I7O71/SBhOd/V35JDnv//AxX/
POs=
            "]]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DlOQmEYhtEfB7CSCoKAA4KYCCgkWOgyjLdQOhcgPZqo60AL2YCK4AQk
6jpwLxxiwuF5v+bmQuGifXIZCyFE1Iw9HeuEhr0bD6FM3d7REkUO3NtaYIt9
96ZuULPzmiNL1b2mGSr2n2dPKdm/+sM36+6ePpK27/SWG5Lulp5zxor7WI+Y
v//TcgjPLNgv2ueVRfdAhyzZb/rOBz7h09cXI+Lz364TEvapB0es2h294pqU
u6v3PJB3N/WQol3Rauz//5wBxbwgaw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DtOAlEABdAHhVuQAk1o/aAiihaAEaOVFkYq5CORFpeAibgCf/GDIAtE
Oi0w8bxQnNx7J5P3JpNp35x3EyGEKlOlJnvJEG5p6+OFEL640kdyyCcteyA/
eKdpv8lXGvqLfOaJuv0oH7iM5zh7mJzfeS/73HFmd+Q1J/qRrHDIgb0sl0iz
b//53hk5fcXZq2zra3KdLHl7Q26yo2/JXHyPXTsfn8dOwS7IvUhfdE+Ksl6U
pdg5thuySYtT+8d3/HKhT+R3Yv4//wE+IyUw
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DlOglEYBdDv/w3QOUURpwItdB2YqLWJGwDnArSSSiutnF2DA6Io0Emh
69BC3YknoTi59yYvLy+vWK6tVZOIWKebRpzJ0kDEErf6bC5ihht9Wk4xybVd
kBPkubLH5RiX+qgcYZgLe0gOcq5X3F3mVF+VKyxzbC/KBep6TmbJcGD/ed8v
P+zZn/KDin6XjbhnQ3+QjzTYtJ9kky39Wb7QYtt+lW+02bE7ssuu/uXub/b1
8IaElEOzKOeY58h+d67Hid6WnbT/n/+cBib4
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0ygnEYxuHHFCZOQijfDsaME3AA2dCuFllVjI+SMMz4WLDKihWizOA4
ZMFJuN6xuOZ3P5v/vJVdW18pDEXEKsVUxKMOpyNG6Nvt0YgjenZLD2ny6m7o
Afu8uPd0l669o9vUeXbXtMqTnfd2jgd7XMfIcOf+9Q0/3Nqf+sE7l+5rvUo2
p+4trdC0J7ydTb7PntQppmm5c5pPfoc9o7PM0XbP6wKLHLuXdJkT+8zb51zY
Pe3zxo37Swd803GXtMy9vaGbqf//8w8ahi66
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Esug2EYhuG3yU8b6tgVWAWd1YAFSMyRYKa7QIIV0Jb+RbsOh7YY6Ugn
JISRswW4xODK/byTb/BNrZQXNjIRsUgxiXjVMz3nxy7kIib5tid0nDG+3KM6
Qp5P97AO8WHnNMsg7+4BTXizn7z9yIvd1Q5tHtwtbdK393SXHXrudV1jlRv3
vM5xYe9nIw64tCtapUbbfahHdOy6pjTouo/1hFOu3E1tcW0veXuZW3tTt9jm
7u8dTWlw7y7pLM/2tM4k///5C6RDMjg=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DtOAlEYBeBfHRO10Qp88XJwJ2oidiT0QKGdLkHB8Fb3gHsEVIz63Vh8
OedMcefO1LoPzfuNiGixyiJKRm87ok9df9uJeCXXX+SMKWf2RI4ZUbOHckBV
f5Z9elTsJ/lIWX939pyiPpJDBhzYd/KWPf1GNrhmyz5PdyLn232z9JyFXnB2
kaV+KI84ZmWfyFM+9FK6Q7oTn3Y13T19D192Luus9bKzK2x694W85Ipduy07
dNm3f/y7Xwr6Qi6z///5B66jJFw=
          "]]}, {
         Line[{1456, 1453, 2612, 2614, 1472, 2636, 2637, 2197, 2610, 1490, 
          2672, 2673, 2207, 2627, 1506, 2221, 2714, 2716, 1524, 2703, 2233, 
          2749, 2751, 1544, 2789, 2790, 1541, 1561}], 
         Line[{1459, 2619, 2620, 1454, 1475, 2200, 2647, 2648, 2650, 1493, 
          2211, 2683, 2685, 2688, 1509, 2730, 2731, 1510, 1527, 2763, 2765, 
          2766, 1528, 1547, 2247, 2799, 2801, 1564}], 
         Line[{1461, 2194, 2622, 2624, 1479, 2606, 2607, 2204, 2646, 1495, 
          2681, 2217, 2657, 2659, 1513, 2698, 2230, 2728, 1531, 2759, 2241, 
          2776, 2778, 1550, 2810, 2811, 1554, 1567}], 
         Line[{1464, 2639, 2640, 2199, 1482, 2664, 2208, 2674, 2676, 1498, 
          2718, 2719, 2224, 2710, 1516, 1522, 2752, 2754, 1534, 2792, 2793, 
          2246, 2784, 1553, 2814, 2253, 2817, 1570}], 
         Line[{1467, 1477, 2651, 2653, 1486, 2691, 2693, 2694, 2216, 1501, 
          2733, 2734, 2228, 2725, 1519, 1529, 2767, 2769, 1538, 461, 2802, 
          2804, 1557, 2822, 2823, 2257, 1573}], 
         Line[{1469, 2660, 2205, 2656, 1488, 2696, 2219, 2699, 2701, 1503, 
          2736, 2231, 2739, 2741, 1521, 2738, 2243, 2772, 1540, 2774, 2775, 
          2252, 2807, 1559, 2825, 2258, 2808, 1575}], 
         Line[{1560, 2742, 2244, 2788, 1543, 2750, 2234, 2704, 2702, 1523, 
          2715, 2222, 2661, 1505, 2626, 2625, 2206, 2671, 1489, 2609, 2608, 
          2196, 2635, 1471, 2613, 2191, 2611, 1455}], 
         Line[{1562, 1548, 2787, 2785, 1545, 2747, 2746, 2237, 2761, 1525, 
          2712, 2711, 2225, 1507, 2686, 2213, 2670, 2668, 1491, 1476, 2634, 
          2633, 2631, 1473, 2616, 2615, 2192, 1457}], 
         Line[{1566, 2798, 2250, 2809, 1549, 2777, 2242, 2760, 2758, 1530, 
          2727, 2726, 2229, 1512, 2658, 2218, 2682, 2680, 1494, 2645, 2644, 
          2203, 2605, 1478, 2623, 2195, 2621, 1460}], 
         Line[{1568, 2254, 2815, 2812, 1551, 2782, 2780, 2779, 1542, 1532, 
          2236, 2745, 2743, 1514, 2708, 2706, 2705, 1504, 1496, 2210, 2667, 
          2665, 2662, 1480, 2629, 2628, 1470, 1462}], 
         Line[{1571, 2819, 2818, 1565, 1555, 2249, 2797, 2796, 2794, 1536, 
          2240, 2757, 2755, 1517, 2723, 2721, 2720, 1511, 1499, 2678, 2677, 
          2214, 2689, 1484, 2202, 2643, 2641, 1465}], 
         Line[{1574, 2259, 2826, 2824, 1558, 2806, 2805, 2251, 2773, 1539, 
          2771, 2770, 1535, 1520, 2740, 2232, 2737, 2735, 1502, 2700, 2220, 
          2697, 2695, 1487, 2655, 2654, 1483, 1468}], 
         Line[{1579, 1576, 2834, 2836, 1595, 2858, 2859, 2266, 2832, 1613, 
          2894, 2895, 2276, 2849, 1629, 2290, 2936, 2938, 1647, 2925, 2302, 
          2971, 2973, 1667, 3011, 3012, 1664, 1684}], 
         Line[{1582, 2841, 2842, 1577, 1598, 2269, 2869, 2870, 2872, 1616, 
          2280, 2905, 2907, 2910, 1632, 2952, 2953, 1633, 1650, 2985, 2987, 
          2988, 1651, 1670, 2316, 3021, 3023, 1687}], 
         Line[{1584, 2263, 2844, 2846, 1602, 2828, 2829, 2273, 2868, 1618, 
          2903, 2286, 2879, 2881, 1636, 2920, 2299, 2950, 1654, 2981, 2310, 
          2998, 3000, 1673, 3032, 3033, 1677, 1690}], 
         Line[{1587, 2861, 2862, 2268, 1605, 2886, 2277, 2896, 2898, 1621, 
          2940, 2941, 2293, 2932, 1639, 1645, 2974, 2976, 1657, 3014, 3015, 
          2315, 3006, 1676, 3036, 2322, 3039, 1693}], 
         Line[{1590, 1600, 2873, 2875, 1609, 2913, 2915, 2916, 2285, 1624, 
          2955, 2956, 2297, 2947, 1642, 1652, 2989, 2991, 1661, 656, 3024, 
          3026, 1680, 3044, 3045, 2326, 1696}], 
         Line[{1592, 2882, 2274, 2878, 1611, 2918, 2288, 2921, 2923, 1626, 
          2958, 2300, 2961, 2963, 1644, 2960, 2312, 2994, 1663, 2996, 2997, 
          2321, 3029, 1682, 3047, 2327, 3030, 1698}], 
         Line[{1683, 2964, 2313, 3010, 1666, 2972, 2303, 2926, 2924, 1646, 
          2937, 2291, 2883, 1628, 2848, 2847, 2275, 2893, 1612, 2831, 2830, 
          2265, 2857, 1594, 2835, 2260, 2833, 1578}], 
         Line[{1685, 1671, 3009, 3007, 1668, 2969, 2968, 2306, 2983, 1648, 
          2934, 2933, 2294, 1630, 2908, 2282, 2892, 2890, 1614, 1599, 2856, 
          2855, 2853, 1596, 2838, 2837, 2261, 1580}], 
         Line[{1689, 3020, 2319, 3031, 1672, 2999, 2311, 2982, 2980, 1653, 
          2949, 2948, 2298, 1635, 2880, 2287, 2904, 2902, 1617, 2867, 2866, 
          2272, 2827, 1601, 2845, 2264, 2843, 1583}], 
         Line[{1691, 2323, 3037, 3034, 1674, 3004, 3002, 3001, 1665, 1655, 
          2305, 2967, 2965, 1637, 2930, 2928, 2927, 1627, 1619, 2279, 2889, 
          2887, 2884, 1603, 2851, 2850, 1593, 1585}], 
         Line[{1694, 3041, 3040, 1688, 1678, 2318, 3019, 3018, 3016, 1659, 
          2309, 2979, 2977, 1640, 2945, 2943, 2942, 1634, 1622, 2900, 2899, 
          2283, 2911, 1607, 2271, 2865, 2863, 1588}], 
         Line[{1697, 2328, 3048, 3046, 1681, 3028, 3027, 2320, 2995, 1662, 
          2993, 2992, 1658, 1643, 2962, 2301, 2959, 2957, 1625, 2922, 2289, 
          2919, 2917, 1610, 2877, 2876, 1606, 1591}], 
         Line[{1702, 1699, 3056, 3058, 1718, 3080, 3081, 2335, 3054, 1736, 
          3116, 3117, 2345, 3071, 1752, 2359, 3158, 3160, 1770, 3147, 2371, 
          3193, 3195, 1790, 3233, 3234, 1787, 1807}], 
         Line[{1705, 3063, 3064, 1700, 1721, 2338, 3091, 3092, 3094, 1739, 
          2349, 3127, 3129, 3132, 1755, 3174, 3175, 1756, 1773, 3207, 3209, 
          3210, 1774, 1793, 2385, 3243, 3245, 1810}], 
         Line[{1707, 2332, 3066, 3068, 1725, 3050, 3051, 2342, 3090, 1741, 
          3125, 2355, 3101, 3103, 1759, 3142, 2368, 3172, 1777, 3203, 2379, 
          3220, 3222, 1796, 3254, 3255, 1800, 1813}], 
         Line[{1710, 3083, 3084, 2337, 1728, 3108, 2346, 3118, 3120, 1744, 
          3162, 3163, 2362, 3154, 1762, 1768, 3196, 3198, 1780, 3236, 3237, 
          2384, 3228, 1799, 3258, 2391, 3261, 1816}], 
         Line[{1713, 1723, 3095, 3097, 1732, 3135, 3137, 3138, 2354, 1747, 
          3177, 3178, 2366, 3169, 1765, 1775, 3211, 3213, 1784, 851, 3246, 
          3248, 1803, 3266, 3267, 2395, 1819}], 
         Line[{1715, 3104, 2343, 3100, 1734, 3140, 2357, 3143, 3145, 1749, 
          3180, 2369, 3183, 3185, 1767, 3182, 2381, 3216, 1786, 3218, 3219, 
          2390, 3251, 1805, 3269, 2396, 3252, 1821}], 
         Line[{1806, 3186, 2382, 3232, 1789, 3194, 2372, 3148, 3146, 1769, 
          3159, 2360, 3105, 1751, 3070, 3069, 2344, 3115, 1735, 3053, 3052, 
          2334, 3079, 1717, 3057, 2329, 3055, 1701}], 
         Line[{1808, 1794, 3231, 3229, 1791, 3191, 3190, 2375, 3205, 1771, 
          3156, 3155, 2363, 1753, 3130, 2351, 3114, 3112, 1737, 1722, 3078, 
          3077, 3075, 1719, 3060, 3059, 2330, 1703}], 
         Line[{1812, 3242, 2388, 3253, 1795, 3221, 2380, 3204, 3202, 1776, 
          3171, 3170, 2367, 1758, 3102, 2356, 3126, 3124, 1740, 3089, 3088, 
          2341, 3049, 1724, 3067, 2333, 3065, 1706}], 
         Line[{1814, 2392, 3259, 3256, 1797, 3226, 3224, 3223, 1788, 1778, 
          2374, 3189, 3187, 1760, 3152, 3150, 3149, 1750, 1742, 2348, 3111, 
          3109, 3106, 1726, 3073, 3072, 1716, 1708}], 
         Line[{1817, 3263, 3262, 1811, 1801, 2387, 3241, 3240, 3238, 1782, 
          2378, 3201, 3199, 1763, 3167, 3165, 3164, 1757, 1745, 3122, 3121, 
          2352, 3133, 1730, 2340, 3087, 3085, 1711}], 
         Line[{1820, 2397, 3270, 3268, 1804, 3250, 3249, 2389, 3217, 1785, 
          3215, 3214, 1781, 1766, 3184, 2370, 3181, 3179, 1748, 3144, 2358, 
          3141, 3139, 1733, 3099, 3098, 1729, 1714}], 
         Line[{1825, 1822, 3278, 3280, 1841, 3302, 3303, 2404, 3276, 1859, 
          3338, 3339, 2414, 3293, 1875, 2428, 3380, 3382, 1893, 3369, 2440, 
          3415, 3417, 1913, 3455, 3456, 1910, 1930}], 
         Line[{1828, 3285, 3286, 1823, 1844, 2407, 3313, 3314, 3316, 1862, 
          2418, 3349, 3351, 3354, 1878, 3396, 3397, 1879, 1896, 3429, 3431, 
          3432, 1897, 1916, 2454, 3465, 3467, 1933}], 
         Line[{1830, 2401, 3288, 3290, 1848, 3272, 3273, 2411, 3312, 1864, 
          3347, 2424, 3323, 3325, 1882, 3364, 2437, 3394, 1900, 3425, 2448, 
          3442, 3444, 1919, 3476, 3477, 1923, 1936}], 
         Line[{1833, 3305, 3306, 2406, 1851, 3330, 2415, 3340, 3342, 1867, 
          3384, 3385, 2431, 3376, 1885, 1891, 3418, 3420, 1903, 3458, 3459, 
          2453, 3450, 1922, 3480, 2460, 3483, 1939}], 
         Line[{1836, 1846, 3317, 3319, 1855, 3357, 3359, 3360, 2423, 1870, 
          3399, 3400, 2435, 3391, 1888, 1898, 3433, 3435, 1907, 1046, 3468, 
          3470, 1926, 3488, 3489, 2464, 1942}], 
         Line[{1838, 3326, 2412, 3322, 1857, 3362, 2426, 3365, 3367, 1872, 
          3402, 2438, 3405, 3407, 1890, 3404, 2450, 3438, 1909, 3440, 3441, 
          2459, 3473, 1928, 3491, 2465, 3474, 1944}], 
         Line[{1929, 3408, 2451, 3454, 1912, 3416, 2441, 3370, 3368, 1892, 
          3381, 2429, 3327, 1874, 3292, 3291, 2413, 3337, 1858, 3275, 3274, 
          2403, 3301, 1840, 3279, 2398, 3277, 1824}], 
         Line[{1931, 1917, 3453, 3451, 1914, 3413, 3412, 2444, 3427, 1894, 
          3378, 3377, 2432, 1876, 3352, 2420, 3336, 3334, 1860, 1845, 3300, 
          3299, 3297, 1842, 3282, 3281, 2399, 1826}], 
         Line[{1935, 3464, 2457, 3475, 1918, 3443, 2449, 3426, 3424, 1899, 
          3393, 3392, 2436, 1881, 3324, 2425, 3348, 3346, 1863, 3311, 3310, 
          2410, 3271, 1847, 3289, 2402, 3287, 1829}], 
         Line[{1937, 2461, 3481, 3478, 1920, 3448, 3446, 3445, 1911, 1901, 
          2443, 3411, 3409, 1883, 3374, 3372, 3371, 1873, 1865, 2417, 3333, 
          3331, 3328, 1849, 3295, 3294, 1839, 1831}], 
         Line[{1940, 3485, 3484, 1934, 1924, 2456, 3463, 3462, 3460, 1905, 
          2447, 3423, 3421, 1886, 3389, 3387, 3386, 1880, 1868, 3344, 3343, 
          2421, 3355, 1853, 2409, 3309, 3307, 1834}], 
         Line[{1943, 2466, 3492, 3490, 1927, 3472, 3471, 2458, 3439, 1908, 
          3437, 3436, 1904, 1889, 3406, 2439, 3403, 3401, 1871, 3366, 2427, 
          3363, 3361, 1856, 3321, 3320, 1852, 1837}], 
         Line[{1948, 1945, 3500, 3502, 1964, 3524, 3525, 2473, 3498, 1982, 
          3566, 3567, 2483, 3515, 1998, 2499, 3608, 3610, 2016, 3635, 2509, 
          3631, 3633, 2036, 3677, 3678, 2033, 2053}], 
         Line[{1951, 3507, 3508, 1946, 1967, 2476, 3535, 3536, 3538, 1985, 
          2487, 3577, 3579, 3582, 2001, 3622, 3623, 2002, 2019, 3642, 3644, 
          3645, 2020, 2039, 2523, 3687, 3689, 2056}], 
         Line[{1953, 2470, 3510, 3512, 1971, 3494, 3495, 2480, 3534, 1987, 
          3575, 2493, 3546, 3550, 2005, 3598, 2506, 3594, 2022, 3656, 2517, 
          3664, 3666, 2042, 3698, 3699, 2046, 2059}], 
         Line[{1956, 3527, 3528, 2475, 1974, 3558, 2484, 3568, 3570, 1990, 
          3603, 3604, 2498, 3553, 2008, 2014, 3637, 3639, 2026, 3680, 3681, 
          2522, 3672, 2045, 3702, 2529, 3705, 2062}], 
         Line[{1959, 1969, 3539, 3541, 1978, 3585, 3587, 3588, 2492, 1993, 
          3618, 3619, 2504, 3616, 2011, 2023, 3652, 3654, 2029, 1236, 3690, 
          3692, 2049, 3710, 3711, 2533, 2065}], 
         Line[{1961, 3554, 2481, 3544, 1980, 3590, 2495, 3595, 3597, 1996, 
          3625, 2507, 3627, 3629, 2013, 3620, 2519, 3660, 2032, 3662, 3663, 
          2528, 3695, 2051, 3713, 2534, 3696, 2067}], 
         Line[{2052, 3630, 2520, 3676, 2035, 3632, 2510, 3636, 3634, 2015, 
          3609, 2500, 3555, 1997, 3514, 3513, 2482, 3565, 1981, 3497, 3496, 
          2472, 3523, 1963, 3501, 2467, 3499, 1947}], 
         Line[{2054, 2040, 3675, 3673, 2037, 3647, 3646, 2513, 3640, 2017, 
          3606, 3605, 2501, 1999, 3580, 2489, 3564, 3562, 1983, 1968, 3522, 
          3521, 3519, 1965, 3504, 3503, 2468, 1949}], 
         Line[{2058, 3686, 2526, 3697, 2041, 3665, 2518, 3657, 3655, 2021, 
          3593, 3592, 2505, 2004, 3549, 2494, 3576, 3574, 1986, 3533, 3532, 
          2479, 3493, 1970, 3511, 2471, 3509, 1952}], 
         Line[{2060, 2530, 3703, 3700, 2043, 3670, 3668, 3667, 2034, 2024, 
          2512, 3601, 3599, 2006, 3551, 3547, 3545, 1994, 1988, 2486, 3561, 
          3559, 3556, 1972, 3517, 3516, 1962, 1954}], 
         Line[{2063, 3707, 3706, 2057, 2047, 2525, 3685, 3684, 3682, 2027, 
          2516, 3651, 3649, 2009, 3614, 3612, 3611, 2003, 1991, 3572, 3571, 
          2490, 3583, 1976, 2478, 3531, 3529, 1957}], 
         Line[{2066, 2535, 3714, 3712, 2050, 3694, 3693, 2527, 3661, 2031, 
          3659, 3658, 2030, 2012, 3628, 2508, 3626, 3624, 1995, 3596, 2496, 
          3591, 3589, 1979, 3543, 3542, 1975, 1960}], 
         Line[{2071, 2068, 3722, 3724, 2087, 3746, 3747, 2542, 3720, 2105, 
          3788, 3789, 2552, 3737, 2121, 2568, 3830, 3832, 2139, 3857, 2578, 
          3853, 3855, 2159, 3899, 3900, 2156, 2176}], 
         Line[{2074, 3729, 3730, 2069, 2090, 2545, 3757, 3758, 3760, 2108, 
          2556, 3799, 3801, 3804, 2124, 3844, 3845, 2125, 2142, 3864, 3866, 
          3867, 2143, 2162, 2592, 3909, 3911, 2179}], 
         Line[{2076, 2539, 3732, 3734, 2094, 3716, 3717, 2549, 3756, 2110, 
          3797, 2562, 3768, 3772, 2128, 3820, 2575, 3816, 2145, 3878, 2586, 
          3886, 3888, 2165, 3920, 3921, 2169, 2182}], 
         Line[{2079, 3749, 3750, 2544, 2097, 3780, 2553, 3790, 3792, 2113, 
          3825, 3826, 2567, 3775, 2131, 2137, 3859, 3861, 2149, 3902, 3903, 
          2591, 3894, 2168, 3924, 2598, 3927, 2185}], 
         Line[{2082, 2092, 3761, 3763, 2101, 3807, 3809, 3810, 2561, 2116, 
          3840, 3841, 2573, 3838, 2134, 2146, 3874, 3876, 2152, 1426, 3912, 
          3914, 2172, 3932, 3933, 2602, 2188}], 
         Line[{2084, 3776, 2550, 3766, 2103, 3812, 2564, 3817, 3819, 2119, 
          3847, 2576, 3849, 3851, 2136, 3842, 2588, 3882, 2155, 3884, 3885, 
          2597, 3917, 2174, 3935, 2603, 3918, 2190}], 
         Line[{2175, 3852, 2589, 3898, 2158, 3854, 2579, 3858, 3856, 2138, 
          3831, 2569, 3777, 2120, 3736, 3735, 2551, 3787, 2104, 3719, 3718, 
          2541, 3745, 2086, 3723, 2536, 3721, 2070}], 
         Line[{2177, 2163, 3897, 3895, 2160, 3869, 3868, 2582, 3862, 2140, 
          3828, 3827, 2570, 2122, 3802, 2558, 3786, 3784, 2106, 2091, 3744, 
          3743, 3741, 2088, 3726, 3725, 2537, 2072}], 
         Line[{2181, 3908, 2595, 3919, 2164, 3887, 2587, 3879, 3877, 2144, 
          3815, 3814, 2574, 2127, 3771, 2563, 3798, 3796, 2109, 3755, 3754, 
          2548, 3715, 2093, 3733, 2540, 3731, 2075}], 
         Line[{2183, 2599, 3925, 3922, 2166, 3892, 3890, 3889, 2157, 2147, 
          2581, 3823, 3821, 2129, 3773, 3769, 3767, 2117, 2111, 2555, 3783, 
          3781, 3778, 2095, 3739, 3738, 2085, 2077}], 
         Line[{2186, 3929, 3928, 2180, 2170, 2594, 3907, 3906, 3904, 2150, 
          2585, 3873, 3871, 2132, 3836, 3834, 3833, 2126, 2114, 3794, 3793, 
          2559, 3805, 2099, 2547, 3753, 3751, 2080}], 
         Line[{2189, 2604, 3936, 3934, 2173, 3916, 3915, 2596, 3883, 2154, 
          3881, 3880, 2153, 2135, 3850, 2577, 3848, 3846, 2118, 3818, 2565, 
          3813, 3811, 2102, 3765, 3764, 2098, 2083}], 
         Line[{1458, 2618, 2193, 2617, 1474, 2632, 321, 2649, 1492, 2669, 
          2212, 2684, 2687, 1508, 2729, 2226, 2713, 1526, 2762, 2764, 2238, 
          2748, 1546, 2786, 2248, 2800, 1563}], 
         Line[{1463, 2638, 2198, 2630, 1481, 2663, 2666, 2209, 2675, 1497, 
          2717, 2223, 2707, 2709, 1515, 2744, 2235, 2753, 1533, 2791, 2245, 
          2781, 2783, 1552, 2813, 2816, 2255, 1569}], 
         Line[{1466, 2642, 2201, 2652, 1485, 2690, 2692, 2215, 2679, 1500, 
          2732, 2227, 2722, 2724, 1518, 2756, 2239, 2768, 1537, 2795, 462, 
          2803, 1556, 2821, 2256, 2820, 1572}], 
         Line[{1581, 2840, 2262, 2839, 1597, 2854, 516, 2871, 1615, 2891, 
          2281, 2906, 2909, 1631, 2951, 2295, 2935, 1649, 2984, 2986, 2307, 
          2970, 1669, 3008, 2317, 3022, 1686}], 
         Line[{1586, 2860, 2267, 2852, 1604, 2885, 2888, 2278, 2897, 1620, 
          2939, 2292, 2929, 2931, 1638, 2966, 2304, 2975, 1656, 3013, 2314, 
          3003, 3005, 1675, 3035, 3038, 2324, 1692}], 
         Line[{1589, 2864, 2270, 2874, 1608, 2912, 2914, 2284, 2901, 1623, 
          2954, 2296, 2944, 2946, 1641, 2978, 2308, 2990, 1660, 3017, 657, 
          3025, 1679, 3043, 2325, 3042, 1695}], 
         Line[{1704, 3062, 2331, 3061, 1720, 3076, 711, 3093, 1738, 3113, 
          2350, 3128, 3131, 1754, 3173, 2364, 3157, 1772, 3206, 3208, 2376, 
          3192, 1792, 3230, 2386, 3244, 1809}], 
         Line[{1709, 3082, 2336, 3074, 1727, 3107, 3110, 2347, 3119, 1743, 
          3161, 2361, 3151, 3153, 1761, 3188, 2373, 3197, 1779, 3235, 2383, 
          3225, 3227, 1798, 3257, 3260, 2393, 1815}], 
         Line[{1712, 3086, 2339, 3096, 1731, 3134, 3136, 2353, 3123, 1746, 
          3176, 2365, 3166, 3168, 1764, 3200, 2377, 3212, 1783, 3239, 852, 
          3247, 1802, 3265, 2394, 3264, 1818}], 
         Line[{1827, 3284, 2400, 3283, 1843, 3298, 906, 3315, 1861, 3335, 
          2419, 3350, 3353, 1877, 3395, 2433, 3379, 1895, 3428, 3430, 2445, 
          3414, 1915, 3452, 2455, 3466, 1932}], 
         Line[{1832, 3304, 2405, 3296, 1850, 3329, 3332, 2416, 3341, 1866, 
          3383, 2430, 3373, 3375, 1884, 3410, 2442, 3419, 1902, 3457, 2452, 
          3447, 3449, 1921, 3479, 3482, 2462, 1938}], 
         Line[{1835, 3308, 2408, 3318, 1854, 3356, 3358, 2422, 3345, 1869, 
          3398, 2434, 3388, 3390, 1887, 3422, 2446, 3434, 1906, 3461, 1047, 
          3469, 1925, 3487, 2463, 3486, 1941}], 
         Line[{1950, 3506, 2469, 3505, 1966, 3520, 1101, 3537, 1984, 3563, 
          2488, 3578, 3581, 2000, 3621, 2502, 3607, 2018, 3641, 3643, 2514, 
          3648, 2038, 3674, 2524, 3688, 2055}], 
         Line[{1955, 3526, 2474, 3518, 1973, 3557, 3560, 2485, 3569, 1989, 
          3602, 2497, 3548, 3552, 2007, 3600, 2511, 3638, 2025, 3679, 2521, 
          3669, 3671, 2044, 3701, 3704, 2531, 2061}], 
         Line[{1958, 3530, 2477, 3540, 1977, 3584, 3586, 2491, 3573, 1992, 
          3617, 2503, 3613, 3615, 2010, 3650, 2515, 3653, 2028, 3683, 1237, 
          3691, 2048, 3709, 2532, 3708, 2064}], 
         Line[{2073, 3728, 2538, 3727, 2089, 3742, 1291, 3759, 2107, 3785, 
          2557, 3800, 3803, 2123, 3843, 2571, 3829, 2141, 3863, 3865, 2583, 
          3870, 2161, 3896, 2593, 3910, 2178}], 
         Line[{2078, 3748, 2543, 3740, 2096, 3779, 3782, 2554, 3791, 2112, 
          3824, 2566, 3770, 3774, 2130, 3822, 2580, 3860, 2148, 3901, 2590, 
          3891, 3893, 2167, 3923, 3926, 2600, 2184}], 
         Line[{2081, 3752, 2546, 3762, 2100, 3806, 3808, 2560, 3795, 2115, 
          3839, 2572, 3835, 3837, 2133, 3872, 2584, 3875, 2151, 3905, 1427, 
          3913, 2171, 3931, 2601, 3930, 2187}]}, {
         Line[{301, 473, 2807, 2806, 470, 2804, 2803, 463, 2797, 460, 453, 
          2784, 2783, 2782, 443, 2778, 2777, 436, 433, 2766, 426, 2748, 2747, 
          423, 2751, 2750, 416, 450}], 
         Line[{309, 440, 2772, 2771, 438, 2769, 2768, 430, 2757, 428, 2754, 
          2753, 420, 2745, 410, 402, 2728, 2727, 400, 2731, 392, 2713, 2712, 
          390, 2716, 2715, 382, 418}], 
         Line[{313, 2611, 293, 2612, 297, 2615, 295, 2618, 2619, 302, 2621, 
          304, 2622, 306, 2628, 315, 2638, 2639, 323, 2641, 2642, 325, 2651, 
          333, 2654, 335, 2660, 340}], 
         Line[{341, 336, 2656, 2655, 334, 2653, 2652, 326, 2643, 324, 2640, 
          316, 2630, 2629, 307, 2624, 2623, 305, 303, 2620, 296, 2617, 2616, 
          298, 2614, 2613, 294, 314}], 
         Line[{345, 310, 2635, 2636, 317, 2631, 2632, 320, 2647, 327, 330, 
          2605, 2606, 337, 2662, 2663, 2664, 348, 357, 360, 2689, 2690, 2691, 
          369, 2695, 2696, 372, 378}], 
         Line[{380, 2701, 2700, 374, 371, 2694, 362, 2679, 2678, 359, 2676, 
          2675, 350, 2667, 339, 332, 2646, 2645, 329, 2650, 2649, 322, 2634, 
          319, 312, 2610, 2609, 347}], 
         Line[{383, 342, 2671, 2672, 351, 2668, 2669, 354, 2683, 363, 2680, 
          2681, 366, 375, 2705, 386, 2717, 2718, 393, 2720, 396, 2732, 2733, 
          403, 2735, 2736, 406, 411}], 
         Line[{413, 2741, 2740, 408, 405, 398, 2725, 2724, 2723, 395, 388, 
          2710, 2709, 2708, 377, 2659, 2658, 368, 365, 2688, 2687, 2686, 356, 
          353, 344, 2627, 2626, 385}], 
         Line[{417, 2661, 381, 2714, 389, 2711, 391, 2729, 2730, 399, 2726, 
          401, 2698, 409, 2743, 2744, 419, 2752, 427, 2755, 2756, 429, 2767, 
          437, 2770, 439, 2738, 308}], 
         Line[{445, 2808, 487, 2826, 485, 2823, 483, 2820, 2819, 481, 2817, 
          479, 2816, 2815, 475, 2811, 467, 2798, 465, 2801, 2800, 457, 2787, 
          455, 2790, 447, 2742, 477}], 
         Line[{448, 2702, 2703, 414, 421, 424, 2761, 2762, 2763, 431, 2758, 
          2759, 434, 441, 2779, 451, 2791, 2792, 458, 2794, 2795, 461, 468, 
          471, 2773, 2774, 299}], 
         Line[{476, 446, 2788, 2789, 454, 2785, 2786, 456, 2799, 464, 466, 
          2809, 2810, 474, 2812, 2813, 2814, 478, 480, 2818, 482, 2821, 2822, 
          484, 2824, 2825, 486, 444}], 
         Line[{496, 668, 3029, 3028, 665, 3026, 3025, 658, 3019, 655, 648, 
          3006, 3005, 3004, 638, 3000, 2999, 631, 628, 2988, 621, 2970, 2969, 
          618, 2973, 2972, 611, 645}], 
         Line[{504, 635, 2994, 2993, 633, 2991, 2990, 625, 2979, 623, 2976, 
          2975, 615, 2967, 605, 597, 2950, 2949, 595, 2953, 587, 2935, 2934, 
          585, 2938, 2937, 577, 613}], 
         Line[{508, 2833, 488, 2834, 492, 2837, 490, 2840, 2841, 497, 2843, 
          499, 2844, 501, 2850, 510, 2860, 2861, 518, 2863, 2864, 520, 2873, 
          528, 2876, 530, 2882, 535}], 
         Line[{536, 531, 2878, 2877, 529, 2875, 2874, 521, 2865, 519, 2862, 
          511, 2852, 2851, 502, 2846, 2845, 500, 498, 2842, 491, 2839, 2838, 
          493, 2836, 2835, 489, 509}], 
         Line[{540, 505, 2857, 2858, 512, 2853, 2854, 515, 2869, 522, 525, 
          2827, 2828, 532, 2884, 2885, 2886, 543, 552, 555, 2911, 2912, 2913, 
          564, 2917, 2918, 567, 573}], 
         Line[{575, 2923, 2922, 569, 566, 2916, 557, 2901, 2900, 554, 2898, 
          2897, 545, 2889, 534, 527, 2868, 2867, 524, 2872, 2871, 517, 2856, 
          514, 507, 2832, 2831, 542}], 
         Line[{578, 537, 2893, 2894, 546, 2890, 2891, 549, 2905, 558, 2902, 
          2903, 561, 570, 2927, 581, 2939, 2940, 588, 2942, 591, 2954, 2955, 
          598, 2957, 2958, 601, 606}], 
         Line[{608, 2963, 2962, 603, 600, 593, 2947, 2946, 2945, 590, 583, 
          2932, 2931, 2930, 572, 2881, 2880, 563, 560, 2910, 2909, 2908, 551, 
          548, 539, 2849, 2848, 580}], 
         Line[{612, 2883, 576, 2936, 584, 2933, 586, 2951, 2952, 594, 2948, 
          596, 2920, 604, 2965, 2966, 614, 2974, 622, 2977, 2978, 624, 2989, 
          632, 2992, 634, 2960, 503}], 
         Line[{640, 3030, 682, 3048, 680, 3045, 678, 3042, 3041, 676, 3039, 
          674, 3038, 3037, 670, 3033, 662, 3020, 660, 3023, 3022, 652, 3009, 
          650, 3012, 642, 2964, 672}], 
         Line[{643, 2924, 2925, 609, 616, 619, 2983, 2984, 2985, 626, 2980, 
          2981, 629, 636, 3001, 646, 3013, 3014, 653, 3016, 3017, 656, 663, 
          666, 2995, 2996, 494}], 
         Line[{671, 641, 3010, 3011, 649, 3007, 3008, 651, 3021, 659, 661, 
          3031, 3032, 669, 3034, 3035, 3036, 673, 675, 3040, 677, 3043, 3044, 
          679, 3046, 3047, 681, 639}], 
         Line[{691, 863, 3251, 3250, 860, 3248, 3247, 853, 3241, 850, 843, 
          3228, 3227, 3226, 833, 3222, 3221, 826, 823, 3210, 816, 3192, 3191, 
          813, 3195, 3194, 806, 840}], 
         Line[{699, 830, 3216, 3215, 828, 3213, 3212, 820, 3201, 818, 3198, 
          3197, 810, 3189, 800, 792, 3172, 3171, 790, 3175, 782, 3157, 3156, 
          780, 3160, 3159, 772, 808}], 
         Line[{703, 3055, 683, 3056, 687, 3059, 685, 3062, 3063, 692, 3065, 
          694, 3066, 696, 3072, 705, 3082, 3083, 713, 3085, 3086, 715, 3095, 
          723, 3098, 725, 3104, 730}], 
         Line[{731, 726, 3100, 3099, 724, 3097, 3096, 716, 3087, 714, 3084, 
          706, 3074, 3073, 697, 3068, 3067, 695, 693, 3064, 686, 3061, 3060, 
          688, 3058, 3057, 684, 704}], 
         Line[{735, 700, 3079, 3080, 707, 3075, 3076, 710, 3091, 717, 720, 
          3049, 3050, 727, 3106, 3107, 3108, 738, 747, 750, 3133, 3134, 3135, 
          759, 3139, 3140, 762, 768}], 
         Line[{770, 3145, 3144, 764, 761, 3138, 752, 3123, 3122, 749, 3120, 
          3119, 740, 3111, 729, 722, 3090, 3089, 719, 3094, 3093, 712, 3078, 
          709, 702, 3054, 3053, 737}], 
         Line[{773, 732, 3115, 3116, 741, 3112, 3113, 744, 3127, 753, 3124, 
          3125, 756, 765, 3149, 776, 3161, 3162, 783, 3164, 786, 3176, 3177, 
          793, 3179, 3180, 796, 801}], 
         Line[{803, 3185, 3184, 798, 795, 788, 3169, 3168, 3167, 785, 778, 
          3154, 3153, 3152, 767, 3103, 3102, 758, 755, 3132, 3131, 3130, 746, 
          743, 734, 3071, 3070, 775}], 
         Line[{807, 3105, 771, 3158, 779, 3155, 781, 3173, 3174, 789, 3170, 
          791, 3142, 799, 3187, 3188, 809, 3196, 817, 3199, 3200, 819, 3211, 
          827, 3214, 829, 3182, 698}], 
         Line[{835, 3252, 877, 3270, 875, 3267, 873, 3264, 3263, 871, 3261, 
          869, 3260, 3259, 865, 3255, 857, 3242, 855, 3245, 3244, 847, 3231, 
          845, 3234, 837, 3186, 867}], 
         Line[{838, 3146, 3147, 804, 811, 814, 3205, 3206, 3207, 821, 3202, 
          3203, 824, 831, 3223, 841, 3235, 3236, 848, 3238, 3239, 851, 858, 
          861, 3217, 3218, 689}], 
         Line[{866, 836, 3232, 3233, 844, 3229, 3230, 846, 3243, 854, 856, 
          3253, 3254, 864, 3256, 3257, 3258, 868, 870, 3262, 872, 3265, 3266, 
          874, 3268, 3269, 876, 834}], 
         Line[{886, 1058, 3473, 3472, 1055, 3470, 3469, 1048, 3463, 1045, 
          1038, 3450, 3449, 3448, 1028, 3444, 3443, 1021, 1018, 3432, 1011, 
          3414, 3413, 1008, 3417, 3416, 1001, 1035}], 
         Line[{894, 1025, 3438, 3437, 1023, 3435, 3434, 1015, 3423, 1013, 
          3420, 3419, 1005, 3411, 995, 987, 3394, 3393, 985, 3397, 977, 3379, 
          3378, 975, 3382, 3381, 967, 1003}], 
         Line[{898, 3277, 878, 3278, 882, 3281, 880, 3284, 3285, 887, 3287, 
          889, 3288, 891, 3294, 900, 3304, 3305, 908, 3307, 3308, 910, 3317, 
          918, 3320, 920, 3326, 925}], 
         Line[{926, 921, 3322, 3321, 919, 3319, 3318, 911, 3309, 909, 3306, 
          901, 3296, 3295, 892, 3290, 3289, 890, 888, 3286, 881, 3283, 3282, 
          883, 3280, 3279, 879, 899}], 
         Line[{930, 895, 3301, 3302, 902, 3297, 3298, 905, 3313, 912, 915, 
          3271, 3272, 922, 3328, 3329, 3330, 933, 942, 945, 3355, 3356, 3357, 
          954, 3361, 3362, 957, 963}], 
         Line[{965, 3367, 3366, 959, 956, 3360, 947, 3345, 3344, 944, 3342, 
          3341, 935, 3333, 924, 917, 3312, 3311, 914, 3316, 3315, 907, 3300, 
          904, 897, 3276, 3275, 932}], 
         Line[{968, 927, 3337, 3338, 936, 3334, 3335, 939, 3349, 948, 3346, 
          3347, 951, 960, 3371, 971, 3383, 3384, 978, 3386, 981, 3398, 3399, 
          988, 3401, 3402, 991, 996}], 
         Line[{998, 3407, 3406, 993, 990, 983, 3391, 3390, 3389, 980, 973, 
          3376, 3375, 3374, 962, 3325, 3324, 953, 950, 3354, 3353, 3352, 941, 
          938, 929, 3293, 3292, 970}], 
         Line[{1002, 3327, 966, 3380, 974, 3377, 976, 3395, 3396, 984, 3392, 
          986, 3364, 994, 3409, 3410, 1004, 3418, 1012, 3421, 3422, 1014, 
          3433, 1022, 3436, 1024, 3404, 893}], 
         Line[{1030, 3474, 1072, 3492, 1070, 3489, 1068, 3486, 3485, 1066, 
          3483, 1064, 3482, 3481, 1060, 3477, 1052, 3464, 1050, 3467, 3466, 
          1042, 3453, 1040, 3456, 1032, 3408, 1062}], 
         Line[{1033, 3368, 3369, 999, 1006, 1009, 3427, 3428, 3429, 1016, 
          3424, 3425, 1019, 1026, 3445, 1036, 3457, 3458, 1043, 3460, 3461, 
          1046, 1053, 1056, 3439, 3440, 884}], 
         Line[{1061, 1031, 3454, 3455, 1039, 3451, 3452, 1041, 3465, 1049, 
          1051, 3475, 3476, 1059, 3478, 3479, 3480, 1063, 1065, 3484, 1067, 
          3487, 3488, 1069, 3490, 3491, 1071, 1029}], 
         Line[{1081, 1248, 3695, 3694, 1245, 3692, 3691, 1238, 3685, 1235, 
          1228, 3672, 3671, 3670, 1216, 3666, 3665, 1213, 1206, 3645, 1203, 
          3648, 3647, 1196, 3633, 3632, 1191, 1225}], 
         Line[{1089, 1218, 3660, 3659, 1210, 3654, 3653, 1208, 3651, 1200, 
          3639, 3638, 1198, 3601, 1182, 3594, 3593, 1180, 3623, 1172, 3607, 
          3606, 1170, 3610, 3609, 1162, 1193}], 
         Line[{1093, 3499, 1073, 3500, 1077, 3503, 1075, 3506, 3507, 1082, 
          3509, 1084, 3510, 1086, 3516, 1095, 3526, 3527, 1103, 3529, 3530, 
          1105, 3539, 1113, 3542, 1115, 3554, 1120}], 
         Line[{1121, 1116, 3544, 3543, 1114, 3541, 3540, 1106, 3531, 1104, 
          3528, 1096, 3518, 3517, 1087, 3512, 3511, 1085, 1083, 3508, 1076, 
          3505, 3504, 1078, 3502, 3501, 1074, 1094}], 
         Line[{1125, 1090, 3523, 3524, 1097, 3519, 3520, 1100, 3535, 1107, 
          1110, 3493, 3494, 1117, 3556, 3557, 3558, 1128, 1137, 1140, 3583, 
          3584, 3585, 1149, 3589, 3590, 1152, 1158}], 
         Line[{1160, 3597, 3596, 1154, 1151, 3588, 1142, 3573, 3572, 1139, 
          3570, 3569, 1130, 3561, 1119, 1112, 3534, 3533, 1109, 3538, 3537, 
          1102, 3522, 1099, 1092, 3498, 3497, 1127}], 
         Line[{1163, 1122, 3565, 3566, 1131, 3562, 3563, 1134, 3577, 1143, 
          3574, 3575, 1146, 3545, 1155, 3602, 3603, 1166, 3611, 1173, 3617, 
          3618, 1176, 3624, 3625, 1183, 1186}], 
         Line[{1188, 3629, 3628, 1185, 1178, 1175, 3616, 3615, 3614, 1168, 
          1157, 3553, 3552, 3551, 3550, 3549, 1148, 1145, 3582, 3581, 3580, 
          1136, 1133, 1124, 3515, 3514, 1165}], 
         Line[{1192, 3555, 1161, 3608, 1169, 3605, 1171, 3621, 3622, 1179, 
          3592, 1181, 3598, 3599, 3600, 1197, 3637, 1199, 3649, 3650, 1207, 
          3652, 1209, 3658, 1217, 3620, 1088}], 
         Line[{1220, 3696, 1262, 3714, 1260, 3711, 1258, 3708, 3707, 1256, 
          3705, 1254, 3704, 3703, 1250, 3699, 1242, 3686, 1240, 3689, 3688, 
          1232, 3675, 1230, 3678, 1222, 3630, 1252}], 
         Line[{1223, 3634, 3635, 1189, 1194, 1201, 3640, 3641, 3642, 1204, 
          3655, 3656, 1211, 1214, 3667, 1226, 3679, 3680, 1233, 3682, 3683, 
          1236, 1243, 1246, 3661, 3662, 1079}], 
         Line[{1251, 1221, 3676, 3677, 1229, 3673, 3674, 1231, 3687, 1239, 
          1241, 3697, 3698, 1249, 3700, 3701, 3702, 1253, 1255, 3706, 1257, 
          3709, 3710, 1259, 3712, 3713, 1261, 1219}], 
         Line[{1271, 1438, 3917, 3916, 1435, 3914, 3913, 1428, 3907, 1425, 
          1418, 3894, 3893, 3892, 1406, 3888, 3887, 1403, 1396, 3867, 1393, 
          3870, 3869, 1386, 3855, 3854, 1381, 1415}], 
         Line[{1279, 1408, 3882, 3881, 1400, 3876, 3875, 1398, 3873, 1390, 
          3861, 3860, 1388, 3823, 1372, 3816, 3815, 1370, 3845, 1362, 3829, 
          3828, 1360, 3832, 3831, 1352, 1383}], 
         Line[{1283, 3721, 1263, 3722, 1267, 3725, 1265, 3728, 3729, 1272, 
          3731, 1274, 3732, 1276, 3738, 1285, 3748, 3749, 1293, 3751, 3752, 
          1295, 3761, 1303, 3764, 1305, 3776, 1310}], 
         Line[{1311, 1306, 3766, 3765, 1304, 3763, 3762, 1296, 3753, 1294, 
          3750, 1286, 3740, 3739, 1277, 3734, 3733, 1275, 1273, 3730, 1266, 
          3727, 3726, 1268, 3724, 3723, 1264, 1284}], 
         Line[{1315, 1280, 3745, 3746, 1287, 3741, 3742, 1290, 3757, 1297, 
          1300, 3715, 3716, 1307, 3778, 3779, 3780, 1318, 1327, 1330, 3805, 
          3806, 3807, 1339, 3811, 3812, 1342, 1348}], 
         Line[{1350, 3819, 3818, 1344, 1341, 3810, 1332, 3795, 3794, 1329, 
          3792, 3791, 1320, 3783, 1309, 1302, 3756, 3755, 1299, 3760, 3759, 
          1292, 3744, 1289, 1282, 3720, 3719, 1317}], 
         Line[{1353, 1312, 3787, 3788, 1321, 3784, 3785, 1324, 3799, 1333, 
          3796, 3797, 1336, 3767, 1345, 3824, 3825, 1356, 3833, 1363, 3839, 
          3840, 1366, 3846, 3847, 1373, 1376}], 
         Line[{1378, 3851, 3850, 1375, 1368, 1365, 3838, 3837, 3836, 1358, 
          1347, 3775, 3774, 3773, 3772, 3771, 1338, 1335, 3804, 3803, 3802, 
          1326, 1323, 1314, 3737, 3736, 1355}], 
         Line[{1382, 3777, 1351, 3830, 1359, 3827, 1361, 3843, 3844, 1369, 
          3814, 1371, 3820, 3821, 3822, 1387, 3859, 1389, 3871, 3872, 1397, 
          3874, 1399, 3880, 1407, 3842, 1278}], 
         Line[{1410, 3918, 1452, 3936, 1450, 3933, 1448, 3930, 3929, 1446, 
          3927, 1444, 3926, 3925, 1440, 3921, 1432, 3908, 1430, 3911, 3910, 
          1422, 3897, 1420, 3900, 1412, 3852, 1442}], 
         Line[{1413, 3856, 3857, 1379, 1384, 1391, 3862, 3863, 3864, 1394, 
          3877, 3878, 1401, 1404, 3889, 1416, 3901, 3902, 1423, 3904, 3905, 
          1426, 1433, 1436, 3883, 3884, 1269}], 
         Line[{1441, 1411, 3898, 3899, 1419, 3895, 3896, 1421, 3909, 1429, 
          1431, 3919, 3920, 1439, 3922, 3923, 3924, 1443, 1445, 3928, 1447, 
          3931, 3932, 1449, 3934, 3935, 1451, 1409}], 
         Line[{300, 2775, 472, 2805, 469, 2802, 462, 2796, 459, 2793, 452, 
          2781, 2780, 442, 2776, 435, 2760, 432, 2765, 2764, 425, 2746, 422, 
          2749, 415, 2704, 449}], 
         Line[{346, 2608, 311, 2637, 318, 2633, 321, 2648, 328, 2644, 331, 
          2607, 338, 2665, 2666, 349, 2674, 358, 2677, 361, 2692, 2693, 370, 
          2697, 373, 2699, 379}], 
         Line[{384, 2625, 343, 2673, 352, 2670, 355, 2684, 2685, 364, 2682, 
          367, 2657, 376, 2706, 2707, 387, 2719, 394, 2721, 2722, 397, 2734, 
          404, 2737, 407, 2739, 412}], 
         Line[{495, 2997, 667, 3027, 664, 3024, 657, 3018, 654, 3015, 647, 
          3003, 3002, 637, 2998, 630, 2982, 627, 2987, 2986, 620, 2968, 617, 
          2971, 610, 2926, 644}], 
         Line[{541, 2830, 506, 2859, 513, 2855, 516, 2870, 523, 2866, 526, 
          2829, 533, 2887, 2888, 544, 2896, 553, 2899, 556, 2914, 2915, 565, 
          2919, 568, 2921, 574}], 
         Line[{579, 2847, 538, 2895, 547, 2892, 550, 2906, 2907, 559, 2904, 
          562, 2879, 571, 2928, 2929, 582, 2941, 589, 2943, 2944, 592, 2956, 
          599, 2959, 602, 2961, 607}], 
         Line[{690, 3219, 862, 3249, 859, 3246, 852, 3240, 849, 3237, 842, 
          3225, 3224, 832, 3220, 825, 3204, 822, 3209, 3208, 815, 3190, 812, 
          3193, 805, 3148, 839}], 
         Line[{736, 3052, 701, 3081, 708, 3077, 711, 3092, 718, 3088, 721, 
          3051, 728, 3109, 3110, 739, 3118, 748, 3121, 751, 3136, 3137, 760, 
          3141, 763, 3143, 769}], 
         Line[{774, 3069, 733, 3117, 742, 3114, 745, 3128, 3129, 754, 3126, 
          757, 3101, 766, 3150, 3151, 777, 3163, 784, 3165, 3166, 787, 3178, 
          794, 3181, 797, 3183, 802}], 
         Line[{885, 3441, 1057, 3471, 1054, 3468, 1047, 3462, 1044, 3459, 
          1037, 3447, 3446, 1027, 3442, 1020, 3426, 1017, 3431, 3430, 1010, 
          3412, 1007, 3415, 1000, 3370, 1034}], 
         Line[{931, 3274, 896, 3303, 903, 3299, 906, 3314, 913, 3310, 916, 
          3273, 923, 3331, 3332, 934, 3340, 943, 3343, 946, 3358, 3359, 955, 
          3363, 958, 3365, 964}], 
         Line[{969, 3291, 928, 3339, 937, 3336, 940, 3350, 3351, 949, 3348, 
          952, 3323, 961, 3372, 3373, 972, 3385, 979, 3387, 3388, 982, 3400, 
          989, 3403, 992, 3405, 997}], 
         Line[{1080, 3663, 1247, 3693, 1244, 3690, 1237, 3684, 1234, 3681, 
          1227, 3669, 3668, 1215, 3664, 1212, 3657, 1205, 3644, 3643, 1202, 
          3646, 1195, 3631, 1190, 3636, 1224}], 
         Line[{1126, 3496, 1091, 3525, 1098, 3521, 1101, 3536, 1108, 3532, 
          1111, 3495, 1118, 3559, 3560, 1129, 3568, 1138, 3571, 1141, 3586, 
          3587, 1150, 3591, 1153, 3595, 1159}], 
         Line[{1164, 3513, 1123, 3567, 1132, 3564, 1135, 3578, 3579, 1144, 
          3576, 1147, 3546, 3547, 3548, 1156, 3604, 1167, 3612, 3613, 1174, 
          3619, 1177, 3626, 1184, 3627, 1187}], 
         Line[{1270, 3885, 1437, 3915, 1434, 3912, 1427, 3906, 1424, 3903, 
          1417, 3891, 3890, 1405, 3886, 1402, 3879, 1395, 3866, 3865, 1392, 
          3868, 1385, 3853, 1380, 3858, 1414}], 
         Line[{1316, 3718, 1281, 3747, 1288, 3743, 1291, 3758, 1298, 3754, 
          1301, 3717, 1308, 3781, 3782, 1319, 3790, 1328, 3793, 1331, 3808, 
          3809, 1340, 3813, 1343, 3817, 1349}], 
         Line[{1354, 3735, 1313, 3789, 1322, 3786, 1325, 3800, 3801, 1334, 
          3798, 1337, 3768, 3769, 3770, 1346, 3826, 1357, 3834, 3835, 1364, 
          3841, 1367, 3848, 1374, 3849, 
          1377}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
TUEKX0qGyY5OpPNxVjHLRCwqWy4acIL0I3ZlB789Q7Sl9bjO73wdA7ctPq4L
moKN3fL9W0/W464pnyPj1hXo3LfVY5ToNB2W/Ny4kXQ0qHjqGbzTDzZyy+dM
UPPnRQuOOXQGAiuTaKdNczqYhdTCHbLuOJt5IORcAcx/YDlKI50E2Z9vjtUS
fEv+6/+Vf/zf+859jOdeEcpxfbnhyR+Ow2/PPBAmz7edqaq6JV6FHmbhSYpy
hRgys6iS/47oLoNW9dt0dcio2n9WWrsSfzBeecH9fAr4GKOX7XKrR/XEnMZx
xhIsuSDasY+8lydDvDaDLxsw2sGhsfJeHq4/L1jBS9aX/r0vjOuf+8IePt2Y
c+2hKxrUa7inD1+CnYVcfAXU/wJuS/P81qvH+doHCeo++Wj1xnpzHskfjtnO
/QraNXhJI0L+xY5iXOaPw9NEt/O3px0MTCvDL9olixpdZRhkOhfWRHit4u2s
aui1ZFz+xrs+Lz8dV8rUSe4jOLPvWlIh966LUGCzPCThixi48q6Xo+bAoOHY
uyd0vtDyZLhPzvASfDR0NKP49PTHfSe7knKhCX/fVbTPAlg9zB1J4pZ2ZeL+
150VsM3qVbN0fQ18RZ7jXMTPQwceRh7XrQd2GifumM4rYC4bRTNxnfDLkQ9x
T2rrYT6//I3f7yZISxbLv9hF+rX1Jiye6bXg1/J4O19KBTCnyK3tJXEbuMFw
LrzcAV7mf2KzK87BYy57EzOI//Hzu3VK205gddoKx5uaRXjcPlxHjOD2Z00N
21lZX/g1M1Z8lz8XbcTVD+0gz2dG77OwUS8BsdOKAkHWCfAkYZWQCok/p6p3
+IxUE7DRuBl0KdaBXJsV23pSj1xx+qKMBi1gFc647bh7AxwJkreXIfW1P2iu
mOFQG7x6xrOQQV8LMtZb0vXLpyB7XiKrRecGNH0QNRqHcojaXPTtWfYURJaE
3hjvRrg98+oU33gBGGZddLhyhcTH05Hl7uRVmBHREKldlQlPn4rPaN0lOP/j
Sc6VHBIX8RmN9L44YNCatq4l+da+/Zd9Z2I9vCmmeWSrHgAZgQ/u5RE9PzP+
qgtDauBRe3BYz3J9mOqvF3hF9FiopPEg28ZcCB+WHHDjy0Gl7Ss1Dcn7El/5
7pla1EWsCcpRcsJ61Hmxs1yf2Mn863/VP/7T7KC93KiYD0d4T/Kwvb4CGarf
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
4pwDmgGMlzWWQmC6cf08idt6G4NvH9GMhKy1B14GRVoDvXPxMs4/9w8S0u8O
h+7shwdpHM/inNvD5bxg/fFehn6fH+xIueWsdYwduU+5LecRzm0uHXINIaCr
faMiKUUbLdJdlvst7J0+u7nEPBbrf2hy3j0XCfZSdUeuEue+3v54Xo1YFhoI
+WerMSZA0s8D3LNEHlRgKZK4MpKF0lPffPrXhcL1bbtNRIl8arAvb+oAbTm2
9SvknRKIwkditwLIueqXx+py4+0LEUsePz3R4oIVDdfWkXPY7enzCosyPHCT
ibbuRW1j2ODtwpdH6CP5fMPgyXpLDC4xXN2u6YwmdaMNSMhvSp0pSd5agJ0y
Ni912GJxewufuyTBryyDG1uC9oXgpezW4Jmf/liw1u6DDYkzHcam8lsy8aLS
znPdhkK4694CsxIRF5E5uyS4v1rBy1uXazfP66JoTNYF8j1J5IBJBUWzOyQ+
ZmdR6LTFgmMRieQ5CsTt13AwCcORkwaZHx67wWqRapkaYv3HNCoMFsfigHKg
7sMcdTj8jF9gjSLnZ220ux8iHQLCuVWDl71VgdP2SfBWYp2andLlA7HesBD8
1WOiNwp+fRvY9Y78v+1A4YtghWho5Ot/Oe6fBW1Jm5gzvpP9BHbeD3eIBQy8
8bHFRQeUnzUZdZHvMZZqOuo25EAGZx9njnAQBF6sepxAfN73f9Tv9I2f6psQ
yYfhXxypEndy4e1S4AnyHddWtq/cL4OzwNQlL18N8qGIMWeHGXGvKRk4Im/T
kArDQ6P6HU0F4Nu7Z7neYf+RcW+poz6gFt/w8oeiCyZuOV5A1kdo/WKVyagJ
AZ8vn5KvHPfCqjeOz0j7sC5wMZokR8LDnCf5BdJ+OHnO6uMkob8TBGZuLMoD
vt8/5pLn0+Co849tvwn/l/PUa/02kwaD3Qz6qZgFq5Wl/Mh6EHaWa3oBcrEg
e3VLCU2XFQq7fbvfTqyzmuYdv+lMNBj8OVB/mrhPzy268JDvW/Z0pPFzqSTC
Cza7zkPOhdCVN0PE8AxUZ8id9taKhwyj/qQDTwuhsej7ohEhT73G4HGxJhUU
lq70KbKo4PeFopdMxDn2eFMcZ+fQwCQar30Omkk44nz3dB8hv0tZ79OdFAlU
NeH+LynyoD7BdMmF4Ku2Wa9P6dW4Ym+fR1vf+SSo/1HlnU2+31NL+Cj6wBWy
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
/+r6dfyj6yf3qu4bqzYZMm0yDQa8Y5Bkco6GBBHXDoEn6aga3JDkN5OZEs1a
lERjsdlsah59VFBVjih1h1J1Oh7u4ftoO5LSEno7j65ePhRvl2QL0fTFrnIC
99GNtPgRxXcErp/LEFG8WAVP2att3gi6ID7JXXpqRP9mwcRVbBmdB1tk6DMH
1czQnX0eX7SJ83iUy+jtSyH6htFvQaIf3GHpkcE3M+I8OzxiFLZ1RSLVXTcy
3hG4Qen7w02vCTuPn+9u1mx0Ra8Z1Plf/iCheVrlkM3E+mZxhZ8hTUloh4yX
8T61JGR4L1yLmnjurib1FUfSM1HPE2fmcQMS6lD5fBPPwT7LscqBzsQgqZiq
nheHY9BaSdjpRfy+tXVr74RALKJ7LvA60SAaPbXjaMT6yyYbfSffU6eiT2IT
9P2N8aj7TLca3t/5r+7hnX90D+u+L1yaYymH6LlcbqmRFBjQjiRpLMwjgb96
iF7/6CG298hqDPqUgEFrF0vsjRywnzl1+wlht+bxwdvK5fmwQXnacL0gExyn
5VZ/Ev28UMrLgw8Y0+ET9eroZGU6fPnkoFZH3Fdy+ABzAhE/gY0Fxr2ROci+
vmf8DtZTsPhKAReq0RNPtgdmYQUIHVd4azY5j6QbspkM3apRnbZDqN90OnIr
rPfGc+ZN/uoz+v+jzwirMhKXpTNRYs8ahcBAPmKMlyv7gef+pXUeHbpViCwU
v10b9stFpy/JurkSdmhui+dTCaxE33Qv6Az3FqOIYrkWyk+E/7QbtWYcz4cf
u03ucu5OhSM5f7iDibgIq9ilw78nDaa+C28fYk8GftIvbqx3E7u4aWOfdSbs
MYzwJDXHQs/bI7f5iPWndjeNFBzzoSqvWTnDIQ0kxV6HviXu1yFWoObBj0wI
5m/lEOVJAD49SrtSws5y58mfNrNmwhnyKhOfLglqlr9eaCTs9lZ64wV7YQVi
nKdjDtgfjNLS9tpi3YFHplF73puS0UxxW8XWRhK6Fv2lGL9nn+DY3ilblYn6
49fEZbldULODVLgQ4Q/mth5x56JJyNKheSldJwpWGCff3iDWN88Yq94P9EH2
zX8EHi3lIdT5+cY7Yp+v+3eyNxD963OVpOMs6wlI9s/xQlEi/9RR2Hwfnho4
d+cDFX8B3ca5P8de/MdnotVjEi997OD5UvNm/7kE2Bb5ux3P0/M6JuZJ7+8D
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
g7HAz8hnt5CK5uFE+k8Z8Lwvpxzzgf8PXbkA3w==
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {342., 342.}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.112354584518819, 1.305230722542556}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    3, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$131016, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}}, $CellContext`moSel$$ = 
    1, $CellContext`omegaIndex$$ = 
    5, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {3.1000000000000005`, 24.500000000000004`, 12.8}, 
     "numberOfMasses" -> 3, "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.5716736401673641, 0.5772803347280334}, {0.6261087866108787, 
      0.25757322175732217`}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {1.154, 1.205}, {0.552, 1.02}}, 
     "pointsDataTable" -> CompressedData["
1:eJxTTMoPSmVmYGAAYT4gZgJiE2MQ+Lx/1kwQYD2QBgbP7NPB9L/9Z8+AAIsD
RP7jfhgNkf8G5b+0h5jzeP9MiDkOM8D0Sfv/YPB+/wIwfyfUvDf2MHsgNJsD
Axj8sD8Nkd9vDHGXPUT8A5RmcICIszvA9EHse7kfIg13J9RcLgeR5gOnFrq+
2z/h0FeNmH7GA7s8eZi029/ZB+2Qa30d+G3/Itdtn/9eYXPgur64wJbr8f4H
/r3T84Re718C5F1f/GZ/2b75Uvp3P9gHgNXv2J8nBDKQ3QFi3jP7NTJRKdb3
n+9/EwhScNNeIMJyy4myT/YeD6tE1rl/tre+DzKQA2o+g0PFSzVDjjVP9kPk
f9uv+njJN0ngiz1EnsWBA2wgp0MhyPoCLgc3kPMqHu6HyHM4OHfnPP+98qs9
RJ7P4Ufw46Wzj/zYzw2WZz6wG+y/a1D7f+7P2lMyWYKFyeEb0LWHvr7YHwcO
gO9Q+z/uV9pQlDHx7R17iPsv7jfvdEx4eoHJAeL/B/ZHFEAKvu4Ha9c4Y+8C
tv8hNPw+2LOE8elumsvsIA8KHbm/9lrtYjfPff+8HyL/w74cHH5P7CHhxeRw
Uen2z7osFqh7OBwmvq2xN437BI0fNgdIeLywh8jzOAAAPmRIOQ==
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {-0.81, -0.9999999999999999}, \
$CellContext`qPlaneLoc$$ = {{-2.709857394019914, -1.7138642998702553`}, {
    2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {
    3.1000000000000005`, 24.500000000000004`, 
    12.8}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
    0.32, $CellContext`tabNumber$$ = 1, $CellContext`tauSliderValue$$ = 
    8, $CellContext`tick$$ = False, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 
    0.8}, {0.9, 0.7}, {1.154, 1.205}, {0.552, 1.02}}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       TabView[{"dynamics" -> Column[{
            Dynamic[
             Row[{
               OverVector[
                Style["q", Italic, 10]], " = ", 
               
               Module[{$CellContext`qm$}, $CellContext`qm$ = 
                 ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                Slider2D[
                  
                  Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                  ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
               Style[" 2 \[Pi] ", 10], 
               Style[
                Dynamic[
                 NumberForm[
                  MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
            Style[
             Row[{
               Text["number of time intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`dynMeshSize$$]}], 10], 
            Style[
             Row[{
               Text["time, normalized to one period, "], 
               Style["t", Italic], "/", 
               Style["T", Italic], " = ", 
               Dynamic[
                
                N[($CellContext`tauSliderValue$$ - 
                  1)/$CellContext`dynMeshSize$$]]}], 10], 
            Row[{
              Dynamic[
               Manipulator[
                
                Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {
                1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                ContinuousAction -> True, Appearance -> "Open", 
                AppearanceElements -> {
                 "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                  "FasterSlowerButtons", "DirectionButton"}]]}], 
            Style[
             Row[{
               Text["oscillation scale factor:"]}], 10], 
            Style[
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
            Style[
             Row[{
               Text["angular frequency \[Omega]("], 
               Style["q", Italic], 
               Text["), selection: "], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
         "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
         Column[{
            Style[
             Row[{
               Text["number of mesh intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`freqMeshSize$$]}], 10], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}], "parameters" -> Grid[{{
             Style[
              Row[{
                Text["mass: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                  Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                   ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {0.25, 
                  Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
             Text["\n"], ""}, {
             Text[
              Style["coupling to neighboring: ", 10]], 
             Style[
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]], 10]}, {
             Style[
              Row[{
                Text["horizontal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 1], FontColor -> RGBColor[
                   Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                OverVector[
                 Style["a", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["vertical: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 2], FontColor -> RGBColor[0, 
                   Rational[2, 3], 0]], " || ", 
                OverVector[
                 Style["b", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 3], FontColor -> 
                 RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                " || (", 
                OverVector[
                 Style["b", Italic]], " + ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 4], FontColor -> RGBColor[0, 
                   Rational[2, 3], 
                   Rational[2, 3]]], " || (", 
                OverVector[
                 Style["b", Italic]], " - ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
             Text["\n"], ""}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Text["coupling from "], 
                  Dynamic[
                   $CellContext`massLabel[$CellContext`m1Sel$$]], 
                  Text[" to: "]}], 10]]], 
             Dynamic[
              Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
               Style[
                Dynamic[
                 $CellContext`massLabel[
                  First[
                   Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
               Blank[], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  DeleteCases[
                   
                   Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  $CellContext`kLable[5], ": "}], 10]]], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Dynamic[
                   Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
        Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], ImageSize -> {250, 350}]],
       Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 12}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 3}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 1}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = {
    456., {224., 232.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        12, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10}, $CellContext`rawNumberOfMasses$$ = 
        1, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
        3, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         Switch[$CellContext`tabNumber$$, $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], $CellContext`freqTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
            Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
          Blank[], 
          LocatorPane[
           Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                 Dimensions[#]] < 3, 
               
               Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[$CellContext`rawArrayOfMasses$$]]; 
              If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                  $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                
                While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[$CellContext`kArray$$, All, 1], All, 1]]; 
              If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                
                While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 1], 
               Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                 Part[$CellContext`u$$, 2], 
                 
                 Part[$CellContext`u$$, 
                  2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 2], 
               Part[$CellContext`u$$, 2]]; {
               Part[$CellContext`u$$, 1], 
               
               Part[$CellContext`u$$, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
             If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
             If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
             If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
             If[$CellContext`omegaIndex$$ > 
               2 $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
             ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
              2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
             True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
           $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
           LocatorAutoCreate -> True, ContinuousAction -> False]]]), 
      "Specifications" :> {
        TabView[{"dynamics" -> Column[{
             Dynamic[
              Row[{
                OverVector[
                 Style["q", Italic, 10]], " = ", 
                
                Module[{$CellContext`qm$}, $CellContext`qm$ = 
                  ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                 Slider2D[
                   
                   Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False,
                    ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
                Style[" 2 \[Pi] ", 10], 
                Style[
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
             Style[
              Row[{
                Text["number of time intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`dynMeshSize$$]}], 10], 
             Style[
              Row[{
                Text["time, normalized to one period, "], 
                Style["t", Italic], "/", 
                Style["T", Italic], " = ", 
                Dynamic[
                 
                 N[($CellContext`tauSliderValue$$ - 
                   1)/$CellContext`dynMeshSize$$]]}], 10], 
             Row[{
               Dynamic[
                Manipulator[
                 
                 Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {
                 1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                 ContinuousAction -> True, Appearance -> "Open", 
                 AppearanceElements -> {
                  "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                   "FasterSlowerButtons", "DirectionButton"}]]}], 
             Style[
              Row[{
                Text["oscillation scale factor:"]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
             Style[
              Row[{
                Text["angular frequency \[Omega]("], 
                Style["q", Italic], 
                Text["), selection: "], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
          "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
          Column[{
             Style[
              Row[{
                Text["number of mesh intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`freqMeshSize$$]}], 10], 
             LocatorPane[
              Dynamic[$CellContext`qPlaneLoc$$], 
              Dynamic[
               (Graphics[{
                 Lighter[Gray], 
                 Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                 Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
              ContinuousAction -> False]}], "parameters" -> Grid[{{
              Style[
               Row[{
                 Text["mass: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                   Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                   Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
              Text["\n"], ""}, {
              Text[
               Style["coupling to neighboring: ", 10]], 
              Style[
               Dynamic[
                If[$CellContext`rawNumberOfMasses$$ > 1, 
                 SetterBar[
                  
                  Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   Range[$CellContext`rawNumberOfMasses$$]]], 
                 $CellContext`massLabel[1]]], 10]}, {
              Style[
               Row[{
                 Text["horizontal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 1], FontColor -> RGBColor[
                    Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                 OverVector[
                  Style["a", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["vertical: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 2], FontColor -> RGBColor[0, 
                    Rational[2, 3], 0]], " || ", 
                 OverVector[
                  Style["b", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 3], FontColor -> 
                  RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                 " || (", 
                 OverVector[
                  Style["b", Italic]], " + ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 4], FontColor -> RGBColor[0, 
                    Rational[2, 3], 
                    Rational[2, 3]]], " || (", 
                 OverVector[
                  Style["b", Italic]], " - ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
              Text["\n"], ""}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Text["coupling from "], 
                   Dynamic[
                    $CellContext`massLabel[$CellContext`m1Sel$$]], 
                   Text[" to: "]}], 10]]], 
              Dynamic[
               Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
                Style[
                 Dynamic[
                  $CellContext`massLabel[
                   First[
                    Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
                Blank[], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   DeleteCases[
                    
                    Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   $CellContext`kLable[5], ": "}], 10]]], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Dynamic[
                    Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
         Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
         ImageSize -> {250, 350}], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 12}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10}}, 0, ControlType -> 
         None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{856., {262., 269.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (
                   Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -(Part[$CellContext`qMax, 1]/2), Part[$CellContext`qMax, 1]/
               2, Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -(
                Part[$CellContext`qMax, 2]/2), Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}, PerformanceGoal -> 
           "Quality"]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {342., 
        342.}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, \
$CellContext`n$]/($CellContext`glConstMMax 500)]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               Part[#, 3], 
               FE`glConstSpringColorsByN$$474]]& , $CellContext`cN$]; 
         If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                Part[#, 3], 
                FE`glConstSpringColorsByN$$474]]& , $CellContext`cOrigin$]], 
           Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                  Style["a", Italic]], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                  Style["b", Italic]], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], Attributes[$CellContext`uLoc$] = {Temporary}, 
       Attributes[$CellContext`ld$] = {Temporary}, 
       Attributes[$CellContext`cd$] = {Temporary}, 
       Attributes[$CellContext`m1Ind$] = {Temporary}, 
       Attributes[$CellContext`m2Ind$] = {Temporary}, 
       Attributes[$CellContext`moInd$] = {Temporary}, 
       Attributes[$CellContext`aLoc$] = {Temporary}, 
       Attributes[$CellContext`bLoc$] = {Temporary}, 
       Attributes[$CellContext`mLoc$] = {Temporary}, 
       Attributes[$CellContext`pointsList$] = {Temporary}, 
       Attributes[$CellContext`latticeBasis$] = {Temporary}, 
       Attributes[$CellContext`reciprocalBasis$] = {Temporary}, 
       Attributes[$CellContext`pointsDataTable$] = {Temporary}, 
       Attributes[$CellContext`numberLatticeLinesToDisplay$] = {Temporary}, 
       Attributes[$CellContext`lines$] = {Temporary}, 
       Attributes[$CellContext`cOrigin$] = {Temporary}, 
       Attributes[$CellContext`cN$] = {Temporary}, 
       Attributes[$CellContext`g$] = {Temporary}, 
       Attributes[$CellContext`mScalarArray$] = {Temporary}, 
       Attributes[$CellContext`numberOfMasses$] = {Temporary}, 
       Attributes[$CellContext`scaleLoc$] = {Temporary}, 
       Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
       Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, FE`glConstSpringColorsByN$$474 = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 
       7.6000000000000005`, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]], \
$CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6055229213532424`*^9, {3.6055233758382373`*^9, 3.605523392246176*^9}, {
   3.605523656985318*^9, 3.605523754074871*^9}, {3.605524067847818*^9, 
   3.6055240751742373`*^9}, 3.605524144345194*^9, 3.6055242676772475`*^9, 
   3.6055243639877567`*^9, 3.6055245164274755`*^9, 3.605524593683894*^9, {
   3.6055246502131276`*^9, 3.605524675557577*^9}, 3.605524914592249*^9, {
   3.605524950877324*^9, 3.605525024352527*^9}, {3.6055250950575714`*^9, 
   3.6055251192499547`*^9}, {3.6055252062219296`*^9, 3.605525226185071*^9}, 
   3.6055252985342093`*^9, {3.6055253708163433`*^9, 3.605525397274857*^9}, {
   3.605525442034417*^9, 3.605525469464986*^9}, {3.6055255165876813`*^9, 
   3.6055255276503143`*^9}, {3.6055256033916464`*^9, 3.6055257473548803`*^9}, 
   3.6055258023860283`*^9, {3.605526134150004*^9, 3.6055262188618493`*^9}},
 CellID->791441710],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{}}, {{{
       1, 1, {1, 0}, 0.415, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.415, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {0, 1}, 0.5800000000000001, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.5800000000000001, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {1, 1}, 0.8250000000000001, 8.409999999999998, {0.9, 0.7}, {2.9, 
        2.8}, {{0.4756242568370988, 0.49940546967895366`}, {
        0.49940546967895366`, 0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.8250000000000001, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.6571734409952122, -1.87371703809297*^-18], {Complex[
      0.5957470205010871, -1.3224107524922207`*^-17], Complex[
      0.8031721406797409, 0.]}}, {
      Complex[0.3453682799448281, -6.4802994615956915`*^-18], {Complex[
      0.803172140679741, 0.], Complex[-0.5957470205010869, 
      1.3224107524922201`*^-17]}}}, $CellContext`dynMeshSize$$ = 
    6, $CellContext`dynPlot$$ = {CompressedData["
1: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
JvShoN25RhDpoEb+BTAsD18=
     "], {10}, 1, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 6}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 18, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyMvXdQlMvzPQzmiIoR8zWDoCgYQUeMIEHEjGIWEcyYc0AFRcSAIkaMeA0o
KqIiDyhm4rLAkmGJigEQDCj688t2z9yd+bxVr/9Ydeqp3tk50/PMdJ+z/DN/
hd2iGhoaGt0aa2jU/Pu/XQf/4Nc3a4fb+KZ9/+XyU/L/ccrXu24+QfxUy182
VXO+S3/ed7i3+nUuxYuOtL9cNalCclj+ad7jLzkUN2467GfVuDLpauvQ1PEk
i+I12j2+8Gv9Jym2zbxa6z6nUPx0dfwiabTiyu1RAXIujlLqGjFryY6SeO55
hfSk9ZjEhm1lFD9fjb+SUiqyDm/vzuJoVP+7Hfpio3/XGe0UFPdWPU9uZhxa
ckk7g+K+qvjkR0DtuKT6/PdSkhu+Ab12jczlni8iO/s8bG30n3nTUH1fslfv
XOxiUkDx/qr5Ib8TF1i8zmZ4gWo+icyz2HjiR4b7qeafxIzdPbdqNcOtVHyR
Sb1P9hzhmU8WrejQovuYmpTH57uGRtV0z6U48ui2ISLufEgOxZHHprk/uo3s
kEVx5DGxzNTV/UYqxZHHKWcdPZwfJFMceUxtWPXq5LxkLo5SGvc4fNUpbwX3
vEKaE5Bn7to1jeLI4+qV8+Y3Sc2kOPJoP2zsghh3Nn7k8dMm+aFHR9j3RR7n
mJ5p99smnx8PKfrUquWqEwXc80XkU8/ZUuHUQva5wONzy+Iu5nsZjjxuX1cv
3qo3w5HH18P397SbzuIjj5eCfEPD9Nl4kEez+7XD3BJzycaIk6t2pGtQHlOO
SnaBj3IojjwaWmVJU4OzKI48bjdNcfJyS6c48jjhxuUfG0anURx5lLJdxtnk
Mxx5HHNA9tHrTQYXRykVk3Y2O2Zmc88rpHd2PY56dFVSHHm8ttM083El+17I
o9x4YP9al/Ipjjyme9R3elBaQHHk8UGib4Hei0J+POTRvNSoLtpF3PNFZFB+
6CK/BPY88hh7zPvSqJYMRx6/d354++QnNh7k8d308YambnkURx6/LJo+oqgu
+17IY8GsO4OuBueQNj31zz4o/CUhjycc33nMmZFNceQxpH3aj0MemRRHHhfP
uFvbsRvDkce+CmWNAbOzKI48Dpp3a/mnDBYfefxzx6HRD2clF0cpba7lfLtl
+zzueYW0Zdap5knB+RRHHrMW9lzm1KCQ4sjjaJOZ9Z2+MBx5LG/2+mK7WUUU
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
/D4NNp9tqhB0HXvqWN65UZgs6DqOVxqfODU6WdB1+MhODzq3M1HQdWz32TZy
x8oEQdex5m0zr5ZNZYKu49emgWcDZ8QLuo7Pu+5GbNGMF3QdSy4/G6ydFifo
Otom+6XVSI0TdB2B5l0aFVbFCbqOeufKh3UZFy/oOsa63G/V6m68oOuoGzSl
KsFEJug6ju2+8W1MikzQdfxp/9g/bVeCoOsw9uza2LSfXNB1bG5h1sIuSy7o
Op68q3lmrjvWVZiuI3jmVMm7o4LiyOOzBp1G9ApMFnQdZo8zk4O3JlGc1skX
D4741onFRx43f444GN5CLug6DMqGKs/NShB0Hd9cXgbb/50HXtfhPtSxy/KN
DKf6nMcD+74czHDksVGXKmsTHYYjj12fhQUadWA48th06Zm2TcbI+PGQke6O
Ocu9+OeLiKtdyJOK8v98LvBo9OhzvuUa9r2Qx4KLJWGLGrJ5QB7PDmnbYHw4
w5HHQHdXye0sm0/k0fz9npR/zyQJuo6zz5b3IfrJoq6j7Ll9nUNJgq7j3MtV
MX8eJQq6jgEmI8LDSuSCrsOp7W/nucPkgq6j8GT8veDTCYKuY1hz5wHGjRME
XYft5DPJBkdkgq7DRVtztFM/maDr8D3rpe/293zC6zrWtPT5p1tCvKDriJFH
9G2SGi/oOn7Z9Zv1vKZM0HUctEw75zJBJug6bB8OdT3yTCboOrxMt49K3pAg
6DoKywa9P+cnF3QdE7abyeYaJgm6juQS16W+55IFXceYdStvTIhKFHQdZQvn
x2rbJgq6jvZbrvt735MLuo56A3o7dKknF3QdtiaDN06wSxB0HVf27DP18JMJ
uo5Z918+TX4XL+g6Xl9SxA4bHy/oOtZY7HGwex4n6Dq0L51+6jU/TtB1PP9j
1zC2e5yg67hUp6xPjyZxgq6DBPes/boj/3wRMfzpWWy4IE7QdSze3m5nq5bx
gq5jxBrD6SnHZYKu4/QfLcuCD3JB19Fi+85WOglJgq4j3GHPiKs7cJ9kug7N
ad8WGjnKKY48bjxWpn0+MYHiyOPL+S+00jsyHHns2eFaVGdLGcWRxx2ntPu/
Whgv6DrsNtzLj14fJ+g6FJMf5C/sGivoOn6dWjvSbme0oOuwdqi72LtrlKDr
eG2Wu0e3/VtB17F74G7X+8vfCLqOFXYlU7VbvOHHQ2YEB+a6GPLPF5Hi8NKk
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
GinJ78Tv5tNGaoSPq/6+P6QV+unylRVZ3Of+lIq6NRw2wyaX4spqXp4TvaDO
kbnyXBoH+bUbMVuru0sWxY+5HjtU1eqrdPCeTnRM7QwaB/Pibfs0Pb/fLP6I
yY02VaUkEa0XemOm7M6ncXA9PHzWxNbtQzrFc6rn/4vk0/qa6ZpfbD4xvzwC
f93LPcPWp3vf501/u+WQp73HTTB/UkDj4PoZ9638Z+F4Fn9m+r/rf1V9lk6d
tfi671k6zy8Z6dDE6uWLAop/NHZbWHW6kPQMbPzPhOWFNA6uNz2dog+l9hkU
vzbjbfSv0g+SV4Rksv6fTG78ReTEH90W2xwLKT556KiQX/c+ki/bxriUHWLx
6bkxwjNk8UE2/6Oq57NAmr7WovbP/tlsPcC+UVDe6WjPDSx+eifNOtsKSonF
po3XD/Qq5OZHKTUpvXXlsmUOxVXrJE2yJuv9bvgraRzcf2IO/F4aXJPF976Q
Hbi1rJw0aXe7TTvLAm78CsnaZ9TdWfXYuqpVPc4YafbgYy5Pl+TRONQ3OvKC
U2wHNv+jVfsJWVao5XKrNVs/mC/rhn7TvBqWR/Fb1XiAlLyjbMSZKrZOcD/U
utb0Y9ci9rlfr56rubXBTzKtoW2f+MdsnJhfK9f96ZkxiI0H98mBeiaNrx3+
u84XWnQz1fkpWb3sqbN1XKWkM/BsdyvLbG4+f0oe9fbPnTmfzfNy1ThJ+w9+
Wg3sCmgczLvCM5ppqaZZFH+/IM5t64avkvyZ04XzVZk0Duad0uXHOlsrxm9+
9Xwmkhd5eS2vFhfSOJh3M/cE6dkeZ/EH5ZSkbl36RbJquyFysAEbP+bdpE5l
8SdyWXxL1Toht2YXSRMesfiYdy3GHL208Fo2xXfPbtZv29wSyXx2Sptrjjn8
OiS39528YfGFxVftGwXExnnUnAWRLD7mXZeELk/OVeZQ/PyDBVpVAe+lc4tu
z3lRpuTGX0QGTzOZ32Ibi19avW+/I+evx7Qy7sLiY941ks4c3bKP8Tsk6NKj
Ku88yW919019jrP1RusSKz7Wdj3K1v/e6n2plKxSNDzkGpzPzY9SWnOk0Ehq
zfDL1ftGurR2ScGq9W1YHMy7eKtH08MnsPWfpdonyaaIpd+Si/O48SukVhk9
9+5fz9ZVio11j98RcdKU+Z1+P7dk84B5t/y6TnKzdLb+VfveNzJwQLdcWZiS
zTPknb1XesePW3negyT78i3Znk2KaBzMO3cjp9PKpYwXFV+VJOzD+8TSFYxH
zDtjPZvt/f4TB/NuQq1ug4aQHDK5+tzy9xxZzeMPKS32wJjmV9h6w7x7U6dO
XMhohv9q+398hZH5cTLJ37aIxsG8U/xr2v6bDos/snodfpU+vsz4EB3Oxol5
12z5svSP7Yso7hWvH1cVnUBW7vAKelmPxce8G3f24TjfHkqKH6x+/osUoG/U
oVcUm2fMu4SATwZBl9k8z65+f2WRgeOSNLYNL6RxaN59uDfLzS2X4qnVvJdI
ufsiBkVb5PHrkFz2N51f6z5bJ6r3ewH5uCrg3fDaBTQO5t2X+dN8nCryKG5d
Pc/FUt/Uo6m3H+dz4y8ix41f97u3gOE/N0zK/dXnA/HbN2RtzW0sDtW9NO8S
aDGSfa5qfeZLa4/GXmnwmY0T825u64GbS5JZnu5S7TMk9033aZ1H53Lzo5QM
hxR9aErYvP2uXg+ZUlCv93UTn7B5xryTf5wxYe4oxktuhNPzrX3LyYZmbWad
ssjhxq+QjpjUvWgdxeIPrY4jkyIjCnPPHmPxMe8a1Z6t0zODrc8To81XbDX5
RlI03J1smmbTOJh3bycOebQ1mcU/WY2HSKNG2+bWTGbxMe8iWrg8NAph+/zp
gsA+W91+kLXzbJRfPmfROJh33ftolVXYsziYdxbJLq+m/8okGkn/l48lkgW8
7zrEfpVnrGfrGfPulbdLgs0ZNv4TqnESrev92tRpVUjjYN7lu3zr9t0sl+LH
VfMgBZutNNORGI+YdyMf2iV3mM3Wib5qnsmuH7kZKzfl0ziYd76dPgZc8syj
OPAo6a3wUrxrlU/jYN7VTtUymPyVrU/VuSWT+NqdmFGXsDj03lp58dXxSPa5
e+F9Z3804ILhoAJ+HZJzk75azTPP5faHfJKo2eVm1UoljYN5d/Wbolf+gwKK
/1DlkRR+YdSr5PaF3PiLSN9tRP+hew7HSzHJHubtMf56No1D/byOT94cN2O8
HFHtA9JS5YTtp7ay+Jh3Sx1yzJPfZfH7DOlo2nD4jTmZ3PwopQWTZ1x4bcHi
34L3XdtLlq+2P2Lzg3nXqmVKV4VbBr9PknNnj7a/sCCdG79CGrna39T+OZuf
/ap9WCpMsjA4cYrfTyrIt3cVPWz7pVOcqPZ58vDEqWvrambQOJh3rcw6f8m7
z/j9pnqPSNtu99mWOp2tH8y7tzOds8gGFh/eU8Sp9WgXn6ds/Jh3dWde+HVb
j603qtt3NUncdyiTTKvG8+GcUynF/2twrK4DW4eYd5l6ZV/KOrP1M0T1XiY3
u/98+/R8Lo2DeTd0z5oxfkb5FIf3vjR/tGs92R72fTHvesq79Rk1isV3g/ed
U6euaRWZ2TQO5p3e2f4dB3YtoLgS7ndj9uSuKnRmfNG+bZOmnY2N2fq8oVon
JPh8H4MVX9k8YN4d7vohfs5tFh/OXVKPyo8VAzML+HVIGvqaB7sdY/NvqjrX
EW9ZeXmHwWk0Dubdg/lf1ix8wuJfgftdxu0nI1tH8eMvIpXWe1tH3Eqh+Fd4
3zk+uujdvH0KjYN5V5LSKKHJEBbfu3o+c6UBn0rNs/qz+ce8u7SgfPCeBgo2
//C+m/3CprujYzI3P0rpt82hkm4dGb+K6jzNlm6alPSX57H1g3kXrO3X2r0w
meJwLyCD3y449yYimRu/QrpbO33vIle2ruDeIc1Z8PaCW2u2n2PeJX29VhKp
k0rxYtW9hugOuSKb9yCVrXPIuzpHreeUWOWw8cP9Tp4SPOHFUbbPYN6Ne+99
90EIy19z1XuKGE8bNLFyFFufmHeKnzd2NrzAnse8O6RTPjixJJvMUtXHJLgn
SsnrW3VMuMfmE/OucHDlCMNGeRT3hftd7X9ODVy9P53GwbzzvGfY79qAAoqP
2D3db+v9CqlzVFXa7JH/WQ+Qd3HzGpk0OqBg41fdo8mpQcOPaC5PpnEw757W
/mLsN4vFh3u6NE7fpM1BpwJunAoyYmv94TNt5Pw6ITHvb7XTLZLROJh3NjW7
Drn4OZ/id6Au9yvph9ecd3n8OiSfdnwI6VceT/FDqnVOtubPmJsyNZ7Gwbxz
durerTA3j+KTVHWSv+ejjIJFb/l5LiKWo5+W/z7G4pfD/e7aCuPuk+xZfMw7
23U6vVsPyaU41HmkOhOclyxsnMvN8ycSmt7fNnIFmx+oI5HsY++3ulyUc/Oj
lEpDH9X8+p2tnz2qOpV0evaDwwses3WIeac/+kyF7nfGbzbc785PeRjYsyiF
G79C2lrSqeXyFWxdzYK64q2BBp2kl0k0Dubd87sTaxrWZ/sn1PHIspfKr8Wm
WTQO5t2Q0pv1cvskUTxPVSeUDA71/2q0O5HGwbzLe+kQs3Yhy1NV3fUHCXEv
eWNTnkPjYN55JgWdCneOpc9j3rl/ndOr0RTU/USGWnG/H4Vx6O8SQ70acTnU
My/Je13d6vGCxvnfvzcVGXqSw2m+QN4Nfn8xYKbxc4qr7jtvSasbhTkxupE0
DubdELXfWYoMLeB+zwrj0N9LXDMresWvp2yfUdWTyZhPRRH19zylcTDvHNV+
3ykytD+Hc+uQdAus1WHHk7cUfwf1zL3DN+dNzUygcej7Tu13pSJD/7RV4cGA
q4//7/3WZtDWoKIEiqvqz+9In4YPZoxZKqdxMO/81H7PCue/SPIFnK4TyLtW
Y5e0ftYmleKBqn2GXA65s+NgfCo3P0rJW+13tCJDL+D5EH53C+Ng3jnvvvt+
dxRb/15Qz+z4fKJtu8853PgVkona73dFhh4H3JiLj3ln1cViWr//07kAPly1
z5Mp7isr044oaRx6zlT7nbHI0KOANwUc42Dezb4X9yKvBdsnoV9DppU21gyc
kEfjYN6p/g8zxecx76yin5skj2Dr9n//bltk6G7Ii1rcODFf/lSo40dgnXfh
5g3X/z8cfhbwnhyO63kPx+8gwD04nP5eE7feTgHuzeG43oK49W8I62Te/847
Mp/DjVH/wOG4HgZy+0PR//x9tshQ5Pcdt1+dBvw9h/O/24Z9PezfTYf1gDju
h/Ng/SCO/Tt7m2tdh77OpTjubxNhPSOO/buijhN/TRueTXHcr9ZCfiF+E84J
1yF/Ecf9pzPkO+LT4L0/zuPdUEOfFIrjfuIA+w/iWdC/C4/ZYjNI9pYbj1Lq
Dvsh4mXQvxsC+616fIU0G/ZnxGH/l6quq/Z/xDF/28D7AvEv8N7cCu8jxDEf
HeE9aK16D9I+LJ4nER8Lfb3H8D7FOJinNpC/iOfCe/AfeF9jHOS9CN7XiGNf
bxWcBzAO5rUenAcQHw7vwdNw3sA4uE6i4byBuOqeVS7NvDDAor9OBo2D+8BK
OM8g7gF9PV84L2EcXFdGcF5C3B3ufU0981/uilTwvJMPcB5DHPt6NeC8h3Ho
79jDeQ9xVZ/3nXQZzpPq4y8iVnCeRHwK9PV84LyKcXDdjoXzKuKecO9bC+dh
uk7QNwfnYcQzoK/36JhNjN77fG5+lFIunLcRz4B7Xzic5zEO7mPWcJ6nvMN7
cCzcF9TH//d9B/cFxD/BvW/h1eSCRS6JNA7ue3gfQdwU3oN438E4mEcS3HcQ
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
XwzvA1oLPhreB/SlbfHpFm4MRx7rgE+H9wFt6m2juW9qMjl21bbL/bm1UW8v
xb59t73NyFySYx9mapNVMxzf7wNXOttFds/CvytEn3f+mfz6sVcuxfH5R1Pe
5N2fnUPahAb+OPCiVjien3s0MA2dujSdPo94i+8zGsw0y6A46kvdv+9OTbdM
JrPGzlm0fmMtils+rtMhuW8S97l5UqxHm0tLKujfUaK+htY1LCsDmshIWxgP
Pt8zY/DHd5X07yuFT4A6fys/q7bN8hJIcj8Nr/PNWZxzGgtDAx+w51Xr3zv0
5Ub/rjPaKShuCet2kNUc7+dBGcQH5hnj63qG1xtem/6dJtA5p5GChX2uaPrm
UBz05yQ9zmbX6A+53PPFxE3/hqv1xXx+Psmdlo8ej75UwPNCOpyrP7Tv+wKe
R+I1oWnauF0FxFH197/o95oxbOyCGPccsghw5P1S4XfFXNccclXdryGZwN+B
6pq/LGDIkZp0HgLPp7Y+a5ZL4+A60bi6P6S5ZibFcT10O+ppcsY7hVTcGOp3
bZ0mfb6F3upiT610kg3rE+dtdfPsjllv82gcXCetE/vp7vJM5j43T9o2Y72s
sqOCBHU50CfsmSb93KZ1vQ4d/ZxCzsZpxc/Xr0Xn/+mL5kkzNAtoHFwPOjfb
TXqyLZXiyO/K5H5ZJgsyyUrftKeypjXYul1nXG/NxRS6npHHode2vez5lsXH
+Z8J82+gpT+t0KEGHf+YJePCp+5NJWdgnMh7jcodJUkyFgfnv8NRa81Rb9j8
47xpXvuZ0tY/n7zfvaX457816Pcy7fjwzFT3dKKA9Y/rZ9jLsnZxv1h8nJ/x
l0qPDcsq4OIXk9SH3UpPLGd/PwjnB/8elo/6/kOiuy/8cXVFAb8eyMa9T5q4
WBfy64cER72Lb3qwgF+fpFfeV91+dvlko+rvEtL1OWT/73sdbLPIMe3oF9k7
qyTEb2c/evnZPJM+j+vNdXqjxh7G6RTHdfLjT+zXVzvSSNPfyz7Xb/9boveg
T4FPnZdm0OeR95oDz/l9Sk7n4udJnWvFV045m0UOvNNqYxT8W8L4C02Ob8ls
ysaDvOh55Zrtu5NDcZzP+McpxxKlXFIrMXDELNs/VJ/fL75+m7g+2fR5XFdy
44H9a13KJx7wuTie4tAUe/eeSvo8rp/prmnJYxoVUhzXT8hg3exeKQzH9VB/
Ut8rgZX888Wk5pMetVesKeTnkzh90F2q41DAzz/50MDROyEzj+eR2F2aGrZ6
UC7+3Un6vRLhe8HfFaX82nSb+vj9lkzyOPj5zhO3v1M8M6BGkwtNsunzyKPO
kD+RKaszKY681DJ3qrzWOZsMuuD4b/j4H/T5na+21Z12ncWh/oj6e5+4Xsrh
4udJBxfll/27MZcEHayb8C7vB43/u85X47gI9jzyvqVObGV3W/a9kPeE3Ip/
vv7NO4ONAT+1t1fSz038+jauQedc+jzOz2iTmfWdvhSSq6Dzx/Hg3znC55H3
oYGxmi2mF1Eced9pUr7zuDbDkffS9PFx4wwKueeLSYOpGeERz/NJqKVFhssh
xqOPddhhh1wlP8/k7T+Du5g1zuN5IZP7JOpvHqfk+SUdzlQkvI7MJkT1d4Ep
v/0NDVpaWDMc+dp+631HI7sciuP8v9/gvHtnppLMrt6fy+nz5SNMQ782yqXP
4zwXBa1LXXgqj4ufJ+XXt5pydkgBSanePyto/FL7BXN/OLLnkd+azQ4PmrKx
kOI0ryM7mz4xKKI48visce6oncMYjnwFS+UL/I6wOPRcUSsyMmJCAelm+95q
0d2fdD4nnDiS9HELmwfk0WXLndhR//leyGN24uDLvreV8P79Qse5u1G9U55/
x3/W5MBaL2vGy3qnI762y7L5eSbh4c/axaYLvJCk4G15+tmZPI/ksaz2n9KZ
GXA++UL5nTW/9/JoXSXsw58ovj2hsObyv+elp1m7Dcds+Ubnp4mb74Ip3Qtp
HOT3u3GdzV+u5VIc+XIavHFuf5JP6lXvq5/p8y97Lml4slc+fR7Xw91nNZyt
Txdw8fOkyVF9W33ayz4XeS/JW3b3qoLhOJ+DZuzpv3obw5H3PTZDzjtvKCCx
9UZmlY37SudzcM/5/474kEmfx+/781Gn7FuxeRTH9VDiYt3943MlvC8+0/Es
DNb4eWpPARlfrqzbXvmV8tIx+sHvkzPY/OM6CWsQdCf8cjYXv5jUufVpahu/
DH4+SWFmiUt8uzR+/snloMzFg/RTeX6J46s78fG70iDfP1B+v/28MNZYP4/M
rc7TPIqXzdVcv+5QPnlXfZ4po/NQ49DA0RuN8mgc5NFqUM/4FYfzKY68N5aP
unrqSgHFkd/oehntTw0s5OLkSU1ab07r05nhOJ+Wn+p37D6FxUF+ky4YjjRL
xfdaCZ23yifdx9W1TKXPI+8PfFoYp71Skq/V5+FSOp9Zem3Pu51X0Ofx++6d
8uTLIrtsiiPvm28WDOj7No2sqj6XltH5N6/ztm149xT6PPL7YO8z99E1FVyc
YpI+fUgj71pJ5APMM/LV1unMHl23NH4+SelPpzn2TZP4+Sc7I23tYgxSeH7J
I7+i7Ay7TOJUvR5yKb/dH7gNn3o3n+LI44kTr13T/t5fEEceK/tX7e36qIDo
V78f39N50Ls7JXLL+hT6PH1vbgreHGlawMXPk9r11Asz08gnFtV5UUDnp7hF
ytI6/WX0eeR91OZ60Y8a5lIced9rOdrv6MZsMqJ6fyui82mdqj9sfASLg7xb
mvXZL/uVSgZXnzfe0fncfeSL7fkdifR55P3MhlD9Wl0Zjt+3sU7wkjt14klf
mAec/10a/XzfN0ylz+P30lzaqWu37bFcnGKy6PvQ7Vc18X6dSL/XZfhdaNX7
pZjy6OD80FinMpPnhezvdelPwfVknkcyPbPlIZtvGTzv5Inrwbdbn+TA/sDm
xxzmR/V8Al0nzey+bUi2LqA4rpPZQ3obaA5mOK6TW5m1un+bk09GVvOioPMW
b/KkpjQ1kj6P6yQ9OHxhWFguFz9P+uiccPvArBzSoHpfzaLzae45OjBtVTx9
HtfJCpOAlHH+6RTH+bztsun4K49E0r46L9Lp/K902Tnx3mg5fR7noUnddfsj
+0URLfhcnOf5vppNv5mx+cF1MkNx7tjd7AiK4/fdNWb/WmnKMzIU5gF5OdQ4
NvjWoBz6PH6vxQq3YacN47g4xaRwyqTFax4kE9fqfUZJeewS02a2vL2Sn39y
aOKqTl3dMnm+yPH+QXsfNFPy/JInAcbB3r3yyAJuHrRgHjTgH66HNYdDppu+
zCcrq/fbOIL451D5uNI1eWSdCqfzE5Xxdt+s0Gc0Dq6fmnudtK9cy6M4rp8L
k8wTtj75+z6t5isK9TySslFAwPwsJXGuHuddOs8dHY/0ur85hsbBdUXM3q+t
o5XNfW6eFHNq+oBZC1OIQTUvr2g/uvjOvN8TH2eT1tWfG0p5OR9lEejcMInG
wfVW/nLhzLk+8RTH9RbVNLR9DY2nZFL1OJ8RHI+ec2hkwz64Pp9RfrsBrqH2
zzu0YYOXS6f6nzMdDuPE8R+/evTZQY8EUgPGSfex8ecWDhudQ+Pg/L+C8SCO
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
xStBr5h0vUOMs+VzQa+4cqp89R+tF4Je0aYoqMJO54WoV1zyzK/RpJeCXtFx
4boeNzu/FvSKVwva3Vk5862gV4wZrFXPSR4t6BXv3pga5WcQJ+gVt9b3jg+e
Hy/oFa8WOB/rcTJK0CtG+d7x0Y5MEvSK+Hv1vF6xdnLcl7d2UYJeMavBmCMf
uyUJesU6W90tHSvlgl5xVE/lsKVpSYJesaWVyyQrjyhBr7jlU+e2Wutlgl7R
/E2/kncXYgW94uQ1bT5vK5QLesVa1xvvmDYyWtArHq6q27SZdrSgV2wedPGM
5pooQa94xnqkxh8TmaBXnHtw8I5Zy2MEveI1mH9er2g+oUPBTeM4Qa/Y2DlS
Kt0cJ+gVm8g+FPbuFy3oFTsP0BrtYBgj6BXTizNq9TOKEfSKvfqvaG0dEyfo
FbV6LZjp7h0r6BULdr92fn0mTtAr4u/283pFF48H20OvxQt6xYppLzoVuMcL
esXQfrP0V2yQCXrF+tsvNR4wK0HQK9YdU89rfEKyoFd88krzepJ/sqBX9Cmx
2Z6ekCToFW9svnPK6LFc0Cu2Mov5fHt4kqBX3GhoXjQ+XCboFXUf9lK0PBsv
6BVvhQSV6m2TC3rFshHyDR6t4wW9Ylv/HI+srDhBr5j0bJa2t2OCoFdsm+yX
ViM1TtArvpiw+2X2QZmgV9x0dNZqrbrxgl6xjaybcaf58YJeMWZPP2uHAv75
YhLTdmel536ZoFdcf7Fi56hRCYJecfFKi7KLteWCXnH1AodJh17LBb0ifi9e
r5ig0bp5pXuyoFe83XCJc7pnEn0eeRzfY4D2uB4MR16WVRY3fvaXd16v6L2i
69thxxIFvaJ85e9Bt0MSBL2iZZj21WMNEgS9Ymym7TJyVi7oFfP2bhu35LBM
0CvuuX66cfoImaBXHL/3dA+NaPa5OD+NulRZm+jIBL0i+vt4vaKZb9sOfbuw
z0Xe29+d0GjxNIYj7y2Ma6/Jucc/X0wm1ZHHnzdOEPSKnYf80l6VJufnmYyy
8m4cKuPnrZwYyid8a3pUzvNLome/cnqyK1HQK5osM/HYsyZJ0Cu6Lczfv8I9
UdArFi0fN3fzTbmgV8y9bqt7+plc0Cv2TC081PBjgqBXfJJv2L323/XM6xUb
Wdpf0GkvF/SKDd2arvh8WyboFQP81nzdMUwm6BV9z3rpu5XEC3rFOTftd2vK
4wW9ov29jEdb8uIFvaL9Jtfpy5bLBb1i/6aH73ftLBP0istrHKi/3UMm6BVj
x7+K+vg7TtArfm0Z1a3eNmGeybQDi9ZmGPPzVk4mPvcIN7CTC3rFp9Yj7gdU
JQp6xeR91z0umCYKesXld15321aaIOgV/e6OWHDJL17QK05zPtB0rYdc0Csu
aH173JdnCYJecfqJORcMZiQIesXN2Vn2S7/KBL3ihosrbNvqywS94ienY1bd
VscLesWse7FvPyfGCXpF7Uunn3rNjxP0iucTT1YuPyoT9Ir+2S8+/+gSJ+gV
D6zenqfVPE7QK15vYnr0XctYQa84vHnwmFs6ckGvqHP74M8Vg/n4xcRq2OTg
rqFxgl5xha/7OMM6/PyUkxezpmktmCYX9Ird+zZ/Ynec6dyQ31Fay468DEsQ
9Iq7fHtvHjFLJugV8y0Cz95wixX0inOakeEf38kojry737h9RCqPF/SK7zxy
G1p+iuPi/P38zymbf8Sy+DifRg3GFie9ixb0il27r71gPiFK0Cvq7xx2uXwA
i0/vp2a5e3TbvxX0itMPPKj09GfjxO+rkVrSZN6CN4Je0bl350e92r0R9Irh
S0ynKjfI6fPIr+2morCV4XycYnK20PFNeXa0oFfUntVjXs2DSfx8kre91/Sx
rIjn559Yrw/sU8dMzvNLHCYstpZsEgW94vGlESNudpIJesVUk44bNpXECXpF
x6o5ZasHxwp6xf2bX/zpdeWVqFeco/ml9uIoQa840cbfMvTEa0GveGFkvWWl
7V4KesVNl8o+tdJ4KegVr7Sy6zEkLVLQK3Y+5ubX2Tda0CvKlt97Ezb1maBX
9EoJTtJMihf0iumNZvgUbX0q6BWPPK7pHhbxVNArunVv79L7boKgV6zl1tHC
Lv+FoFfcvmDgzKDR0YJe8Tr8fh2vV6yTZmc5ukou6BVbHnzxcbZrnKBX3Ozi
P9viTbygVzx+bIzDzPYJgl4xDuaH1ytOunPbcIIiTtAr7tI7+c+7dTGCXjHj
3891G+a8EfSKDicbOurrSYJe0e/d0QSL+i8FveKnwhjlydbPBL3iyqhlk07J
IgW94uoSA2mJX5igVzzx/Upkp/4hgl5RK3J8WPOdbwS94tZO7oaOne4JesUb
AQEN7+6LEfSK/6+uMw+refv+eCKuFDJPmWWIzEPXsJEpknmep8gUITKEkGu8
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
q5WW3U0116qYXkW9QfVq/8alyg2NkphePQt6hurVOfPzul5Ylcz0KuaVqF5t
4HemV8NTCUyvor6ierUrfDeK6tX6oNOoXj0Puo7q1WDQgVSvLgbdSPXqdNCZ
VK/egPwFvqeJ7bc6UnnQjxvp8rl8rwq+S4LPsf0Trk2z87qQIp9j+xdu+XR2
QK1XpH61YlnVWusbFuiey/m5aOmXPTvSfvudC3yO7bft19q8p0mO1KXYzhlu
WyoWVNKVx/n5rcfE0y17qWV57O+NzMHFbqdfy/Ly3pImM9YYfMiV5bG/H0c2
+9p7t648ztuLtf4XebS6ltSTL9wPfxhq5aaV9WB8uiyftuilZwaNp/Ds/Gnr
SKEl7VQrenT/PmmsIouOl6ick7li4yKNLI9xW/rohV+PY7r+YtxWufxsm95b
I67A+4Ayz3Jp8+meXTJleenLnRSpyXDQyvIYN9NF/+UFqzPlc4yPQYu95sWN
sn/Lt/E5xu3nhsJdSWm6+jE+Hpu+VWvzPIf8X913FvTrzxceJ3c4eH/S0PES
BaEe0SPScmU9ON8m5fpsaNdHQ+eDcJ7Vs/fVX/MEy2M8p3YY4dhzhZbONzGn
R6gi9biunRjnHh3st3at8VZMBP2McW76aWGcr022LI9xnlJt7Z+aBrryGOcN
i1y6zXXV1Y/xtHqrbrx0s1aWx/h/mPufwaYGuvbL9zt23dYcGKUh9eQLh/T3
nkXX1eT/qhXqgEl9TCpq6fgKG5HQfEV6jiyP8Wx5d8Mksxdsnoir8zt7rW2T
LctjPMPfXawUGqql81AELChdViEtU5bHeLaxqv6pZLpWGCSV63mMp+W9Zik3
lr2R5WX+q2rpP93aaGR5jOeYnzfCVG91/ZU8od6E4Buealke4xka4OM2rapG
lpf3UderfzzJJ4fUky+ygZthPTif48Pbde7aWkvao1b0tHlnkb2EjaOYedet
d2m7DFke46x6W+u9+TMNnSdiVEhIC9eRr2V5jPPAI+0WJb7JpfNQhF77fNjU
S1ce41xlxvnvtzuoxZRyn62Mc4y6yMJvZq4sL9+vtP24w+B7tiyPce6eH6Ru
3FcXf4xzz+ZbuwetzpTPMZ5HII+A9WD8j+1ruO/ZK1pPvvC7uHSDo3UK+b9q
hVvdc8ZHZufK5xh/a8dOYXW8NHR8xXa3yhNMPZNleYzzzKCcpXsL39D5Ixbm
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
yjJE
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
s0F3Tawn5UsrTlRM2jlzvaMbMvPB9co9RbZ9OteqHX3MnJ2TeI2agGW19rJ3
soGZeaU89xjoMtAblC+lHZJ4z8SJ47vSxDLaPzXBXanrF7/Id8q89z7jmZvz
cMYK9n9Xa5/Ldwh6T/rvG2RWM7aNqfeo9upSnWnorfC/z02PBjalPm86dzon
n8v2gXuQ+S21TIxsShsDvVn2J7yv3ltnWefxdJ2jxLHhBbLb4V3kv7XObDuW
yx/JvFeraz8zlpGR6zp67mbolvBbJtZLrRLXbEZEjsfXMaZtscezEZys+QF/
oL0h/w1cnfva78j/Svse+lvl+VPXvGRP18GbCL0e3IdnrJduTyw/WLYj9fzp
fdfGntuGXC9hHRcUvAe0F36NnWf4DbwwcazUQvop9rypnvFD6hrUl7lp6e3l
4Oex11d1qvkF16CW5+5Huus8+SuJdUt96ZXY51E+VqOw7mcmvle1qtWp63ey
R2uglzLmNuzhuWCeeX62pJ5/Jbl+5FnPxNbnqs8pT618tWqpivcVv+8CJxdc
n1Wd9pCgZ6RvJqfOG0/i+g7+ty1xDmIC/x8N9muU/O7ItRblo/7RPpWfKTtT
4pzCiCAjWdlz2XX5jl+mrisuzp3/fCFyfVP1SsmvSm1D65U4fpPe0j75KHYu
TrZVualtiXW+cis/cW14WPdZsddxdmw/Sf7SePoel9nflj8zJ/Z+UA5W4+mu
MYD/xPZHdmhNCrbRstUTC2FOZMe5Ni5ybXJu6rrubN5lSvCXPtY5yL0PVJP9
O/F6aY50LvpHrqHWRe7byOd9d+zc1y6wajhHiqPrcM+qyLVVrfXf2ne5nyu7
8zY4NXPOrznzPy92Hlvvrpq7ahBTU9e474Yel9oGqeYwJfceUP57Ru58hdZn
QmYbL1svf0L9K04cmbkWr9z1y7FzRFfD/zTzu6u++TY4PHZddVjsurzGo/z6
ooLft15m+jD63sJzawe7c07metCt8q+QL1O0PmqROX6fAX9v8N7cMWEjZMbm
ruXoG4PLwOsjx9Tjc9dvxskfpJ9miXXU6UXnjxQ7tIxdZ1FuvJg59lRuIU2c
x5NOl98lff9L7vqI6kTjwZ158Gn0Hpl1/M/wdtPOSKyTFc9+gnxlcGLuXMn4
4MMrt/0avH+CvZddG5w6l/4kWAJvXuTzvFdmXaQ45Ygs+MOZc6Qa5+HgD6WO
i9eDTVPnAO6h76tT16Y1V61S5xPapY6lFVMrB7621HG96qDbta7Qf4K9csfA
qhs2KDpfoBzpawXXHl8OcbxsnGzd0uB3rcwc10+TKZLNKnUdWXkK1ROVt+ye
eTyqeXbOPWaN89rU8yk/qkbmmrXqhjeAF8l+Bz08N7d+Ue2+UHRso/xb79i6
7qnY8vJvW8uPKNjmZMg+IH0UfDbVdFQnfSjzdynaqy+B96XOI/1Xn42di14T
O7+lc6rzenTmM7Kv1kGxXdjz/9UKpT9y1/LuES93fUS1uDehJyWOkZWvVc1R
Ncm3ctf47tK+hX4pd418pM5QwbmI2+W7pa4lvps7D3OMbFxqXSCdoD3fN3fd
SLGk6uDVw94oYayTwpjvj33WVKM8uegx9Qj7SzKyo9Ny17FkC/6KfQalg/ak
nhPtw/JF+3nKJ2gPq578au58kfJNp6XOGap2XbVof0P7a72+YUmdZ+iUOp+j
etYg6FryFyPHHa3DerWVTS86X6m475Si69zKae/UvAa9rbhS8YtiyyOLzo/I
J3w0ds1aazMod61IuYUDwjoel3k8+v6iS+5vQurBvxfcXOocmr75aJbZbv8r
nyW33y+f+S/k5iJTDrp2Yt9M8ab0geom9cBlBdt2FVEbJNaH8smkAxVb/JHb
t9wVOW5dUbC/sFfRz1U/V2T+ZqJ55PzXMYn1zJFg48S6VD6NfGDFH9vp86LM
OXDlVKUL5Rs3BXvqnEP3ip33l4/XIpxx5Wb7prb7Ok+TlbMq2A+XP/5xwc/c
Cr9N5nNWtuja0C3KGcpepfah1uT+Rkh5cuXLdR4Vlyk+ax/8BdWT1Kf8nwbS
dYnzM7ITipUUB/ypPGfo/4vM45FPmhZdp1atclRuHSFdoTjx0sTPbZu4NqR6
U03w4iTE/rLPWpMSy7QJPrl88xbB91OMPC/4XXquvpG4DP6A1GskH7ht5vVV
XkL5iQ6xa8Q6z/Nzf9eyMJxf2Ud9f/Szzmhk//bH1D6M/NttQQ9LH6s+rHry
nHAudT4X0h7PnSPWNxLKXavGrRzTqqCvpLeUy1b9XbXvJ8I3IsoBKo+t2u7A
1DlG5UhPiV2Dk2+zNfg82hfTc+sffePzEHSdonNkyuPtp7gi+C0buH5C5Fyr
vpVSvlF5R31vo9qxasplY/PLBP9K+a1JWtPU330prukTfFf5sNo/r0FvSB03
KV5fm4dvUSJ/I7AjxLOqux1fdE1OuYiaRdeEVCNW/VH29EBkaoT6mb5/qEZ/
jSPXqRUPKC5QXKFvL+Qb6DtAzeGNkb+F0BnXd2XbpaOKzm8qL6fYQfZhVe5v
R/QNifS2voPSdxT6Ruf32DZRcZpyncp56ps61SRl3xVz6NtJ+eSyGf8H6Th8
QQ==
            "]], 
           Polygon[CompressedData["
1:eJxFm3fcV+P/x899n8M5zuf2tVfZISUhZaSBUFkpK8lMsmeyJfnaCkVGSEaJ
pJCUtJBklTQ1jKJCdsr6vZ693t/H74/r/lyvc515Xe/r/X69x73T2Zd2uKQ6
SZLj0iTJ9HtQkSQL9dscUJMkjfX7h7pr1PZXv4/GG1QlyWvqN9D4jDJJlsXY
35Uk+V24kcanCzfR+BT91hXeTW2y+hvo+rE6/xc970udv5Xw28Ij1f7Nk2Rj
4Unqv8Q5wl/rvMHqP6X2lfo/6tgw9Zeqv1DXpzp/SNzvK+FM+HXh74QXCy/T
78PCA+KaFzTeRu8yR+/SVO/3t+43SmPvqK2vsd+FR6g/We1P9QfrWEudv1Dn
N9P5j8f3g5sLf8t9hA9U+0b9X/X9e6n/tvr7anyUzj9K+CvhlsLVhb+Vb95a
/WvUttT4ixqvp/FB+i2FN1B7Uv0nNN5M/Y/U30/jP+Wej2/0LYv0fe/p+GEa
Pzzm/D86fzzrpfGlGj9M+BvWVWP/Cq9lDhLPIedsFvP9r/rLYv5GC09T27Tw
ekxU/x+Nf1PxevKtfPO76v+l4zM1/qna3+o/kXmtWfOn1N8y1uN9tTrq36N2
gMbe0tje+p4HhZsIjxLeQ3g34Q907htqtQrLC32ObV94zpi79XT+8pCfKcKZ
8ArhG4Vr6X7jhffR/XYKeftQrb76e6h9rP6baruq/7WEfy/190Y+1P8utzzN
07fM0f3e0X220/22jTVto3v+od+Dhcfo+tbCvwm355uEjxD+VbiF8Ejhqeq3
Uv9Qtb/VP1Ljf+r3BOEpGm8rvFb4EOE3hQ8VXhb4OeH9hWcK1xe+W7iV8Erh
Y4T/kawdIPypcGPh1cKH1FgOWaO/hQ8WXircUHiQrj9MeJXwscJvCB8u/DOy
LDy8sIx9KHxQlWVvJ+EBwrlwD+H6wi/H+6zS/esIPyZcCF+g8evUtlG/n47d
p7azxh/S7y469t/Ce26WcOsq78UdkQHhTdg/ut+uwgOFawvfpPFenKP+MB17
gfuwB/W7mY6tKL1nhgtvVeW9tFuN5Q75W6nxusLPZdZJNxeWsRExX8gee3IJ
61LlvdpCeLHw/sJ/6vqKcGfhGuFTkEfhDsK/SUZOEv5LMtJI+AfhT3T+Nhq/
QXhznf+l8NbCV8f8XKjztxK+Bt0q/IXGawv3Ft5C+GvhLYV7xP276vy1un9D
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
flDwiSOE/w/Ritdi
            "]], 
           Polygon[CompressedData["
1:eJwt2HW4VlUaxuFPztFz5ng5ijnWKMaIPRYGZaGCheiMCUgIIxKCImONgaKI
dIqYiIiBBYiK3RioNChlS4qA2HM/1/7++MF6nvWu2Huv9a71nTptu7XoWqtU
Ki3ApmhVXSr95v//VJZKl+KzmlJpGO+wTUqlGfTH+Im3AJdUFnGJv1DMfWgg
bg3vBzxBj0F93of0dKzX7jbeZOWp2FHdNfTFVaXS/vpZaDIL0JT+J38Or0Jc
rcTSA7C/NvPpBbib7iL2CHG/arcRg40xndeP90xFqfQsXua9zruJN4mejI/p
/uX+JunraawW14X3V157ug0uoj8VO1jbD7X7CIszJn8+7y9iqrEXvZD/tvr3
MEjdDLo7tqC3wiF5t/QdYvc1xuPaTcAK437Lf6g8xnS8xusgblNxncR0xMK8
d3EHiVvqWZfgHPq7ctuV2q3CRronGvHWi1mL9nRL/bXTT4d8I3XN6R/432uz
HGN5X9OtsZ/yfO3moUlisEjMUoxIHf057lZ+n/cBXje/fvrcz5yfyhrASl5b
cQeI+1xfn+F0+mZxdcRNFPMkVolbyr9X3Fx9zcNbvHm8YRmPXoBv6Mu0rdb2
bu3G4Fr631gv7iq6V9Ym3UHswbwvjLkM59HHYY7ybNRV15K+XOzt2vRDZb49
3RPbKffm3Yhl5tKdtyWvPz0AX/OGlPfHo/T4xNJX42+8gfSd+ErcTeXn7Uv3
QbeMibq8R+hxWC7uCl5t3nB6BL7l3cLbkzeFfi7fjjecdzhvJj0LP/O+wyjl
kdhJ3fVi1vJeoqfhQN4gXifPfKhnX+0drMCAmmL/NlQ/W9yn2MgbwTuCN5ee
h1946/Ca8qs4SN1gMXfhSOXFvCXJCWLaGeNAYyzW/yI0p+8U96L6FyqL+LQb
io/oTyqLPZG98Z7229HbJgfp4xjeMu0/9f1nYyhvFn0lf+v0I240vteuD29v
3sv0K/iRd111kWuSc55H3+piH2Y/Lje3b9Ff3PMYq/+Hcbu6t8QcLnbnvM98
C14Tujf20N8zvGexJs/Lq+C1pVtjPm8DPqgscmfWSNbKsViqn7q8vfFhcqJx
zuRtbdwtcQXdB814p9NnYCT9HK7mDaaHYIq2kzGgovBSN0XMiLw/els04d3I
m4huykN5w5IT6dvRnLc9vQ2uSo7Eybxd6B0zrr668Y5MLq7IP/rgzcLx5n9c
OZecVV3OJ6XCa4SZYi7g/cprTDfASfRx+Z68A/LN8ZG4xsnFyvslH6o7lZ5q
3GuUhyfn4Ll8o6wj5YHoqu5x+nSxq5WP1rZezqmaIvcmBz8k7gFM5T2Fm5Vv
zbOqe1bMpKqiHK8Pnsn5VlXkuOS6ZViZvM7/LLkf9yen8GZXFWsxa3IOvqKn
iXtMeSLuUPcO772qohzvSbwk5hXeDZk//QTep18qe7fRt+DpfF9eL17f9IdJ
NUVeyxmwCV0r37Pc3428flm7Ofd4Tya38UbSo3Km0O9iQkUxbsbKmAd7f7PT
n3dXwnZ0R/6GWsX5kXOkV/IuDlP+kbcGA41xJa8h7wd6FdrkTODvrf+90DTv
lndtcq/yP3j7YIyYw4wzj1dlzM2wO32vuHa8+mKOyjPTQ3A+ryF9TN5/cmJV
0XfGqIO7eHfyzubtQe+G/+X5y2u3Lr0vemdd4FzeEfShuEfbo6qLXJOcUxvv
8g7h7aC8Pb5Rd2J18SwZt6l2zbIX6BOqi/rEbZO8SNerLu5Vm9M1qEvvisrK
4k6Tu82h9AdZz9m3Wd94paZYl1mTF9Mt87xZjzhN+VR0zLqmT9F+ed6p/vbE
0fTx5b11Ft0CZ9Ndxdbj/en7/IYhNcX+yj47U0zz5Pec3eJa8P5ujJ1xHd05
OZD3k3brMEjcOdquS27SrlmehXepuF/U/4zG6v5Lv1pek09lLefulP2MY8vf
aE+MTv4qf7eT6VMwjvcQTkr+woXqRiUvGff7tDXmbjlDqos76+9pS5+I0+gz
cEpl4aWuNd2s/K5OTQzm5m6rzwuSr4zRKHmC90iemdeWbo3xvC+rij2fvb8E
7/Ae4LXntacvwaO8Cbwuyp3LuTj5OvPO/DvxLsvZUlXkrK5lryMe07aR+S3J
eja3OviA14C3T2XxfTP3PMMM/oGVRe7Md873Ho2jnC9f8L7MM4t5ojxG8uQg
vJg1L+5C9a0qi3yZvNkQi5V35+2K97W9F4drc2RFcS7lfOohbquc92KGZD+I
eZDXiLeOXo/JdC9sz7uNviXzEfdF8q7yrdhCXWcxn5Tv1I/ke+OF3F2wa0Vx
9uQMulnMg7gk92bepclbYmZnbeirCdaqa5HfEPhD+XJe99xDsiZ5VcbrkfsW
Fmdd8RrzNtA/YSr9r/J6TtwVuIRugz95V9I9sbSmmHfmfzHdEufTo/I7pbL4
TZLfEvlNMTL7X3lh7i/4Vdt7eIvST/keNpCemPueZ+pRUeTp5Ou+OEt5J94O
WUe5G4hdk/yn7TG5n2n3SXKWcv1ybkoOyt0ufWeMZbi/ungHm/GG0sNwVXXx
ey2/206gj0VT+oaq4q6QO0NtDNd/x3LbrmIuw+c1xV7KnupMd8GimuKelPvS
Tcm52ev0XbiI15Xulv1RVeSs5K7L6e4597R9k9ebNy3nIubmdwbG8GbQH+MN
cW/kNwNvKv08ZtIv4HreDclVOVvFzeG9mPVUPqezd59JHkruzx7kjacfEdum
oti/2cf38ZbgHuWZvFl4U8zb5WfLnXB89lG+Zfa0ciucl/sY/RR6Kl/EOz/n
G/1Y8gGvA90OE7Qdx+vEu4A+N/mA93DuRN7zL1kruVvnLBI3OvcHMe/iVXG1
s8aVf8/zqzuwuph35t+Y1wD9q4o7ee7mX+nra4ylHyjf79fmToyn6XG5j/I2
0j9jWnXxLHmmo/VVD/eVz9WcCyfQJ2Jsfn+U81ry8/F4kDcluVd/q/S1En8k
l1QXfwOItxoTclfL+9d2vXYbUJW7c/ZgReGlbpWYNbmr5OzhbcTmieGtqCh+
6z5UKn43r8DDuYPw1qIkrgevgeJK59H3aEUvxzjeajFr8BtdP/uSt4u57Yjp
5vx/oVRjhg==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
iWNn/a3a2MhxnPxY6aPm2zu3nflXN8H/A8d+GuM=
            "]], 
           Polygon[CompressedData["
1:eJw1m3XcVFX3xZ8ZuPeZO/ehUZAQCbEDxI7XVsRAECUsQjoVEEWlBRS7sFBM
LFQERSUUUQQL21dERVHEwA4M/K3vu/bvj/OZvebcuXPmnnP2WXvtPc17Des0
tFhRUdGxWkVFdb2uSioqinqjmtprsutkFRXXFioqGsruUlVRcbVwqr73hGcJ
/1mqqJik/uFqX8i+UP0bZL+t/tvV30avDwk/rNZO9ulqT8p+Sm0f2dV0/RjZ
l6tVya6l9y6VPUWtpux1uudQ2RPUPpNdQ9dcIftCtcrM3z9RdknXnqTv+6Hk
Pq7J1f+d8PmyL1OrEC5ltnnvb/UlwtNkN9LnT9Xn6+j1buF71OrLvkT9v8l+
TvaN6p8q/I/wJ8J3Cd+ptkb2Rr13sfp2yTWGgp/drerbQ+89Iryf8FnCOwjf
J3yYcG/hbYVvEz5C+BzhnYTvFz5KuK9wU+FbhQ8V7iPcp1xR8YSe/0tqQ2Tv
n3isd8fzbKbrb5d9rOz+ur5V5n6uO1u4ifAtwgcK9xSuofE+IdxZeJDwYepf
ItxFeLBwV73OF16g1l12j8RzxxxOkD1cY3hWY2leqVajomK88MvCC9RGlP08
r9G1V6vtK3tzyXOZyj5R998iPJm5Fz5ZeLxeVwmvVLtP9j+xvsqyO6p/lO65
RPfeQd/XSt/3c8nrs6j+49V/hvofU/8Lar1k16v0WJ5U21r2b7p+vK6vrutP
0PVn6ppH1bdM7QLZg9QWym6sa7fV/c8vu49rusv+V5vkEuZara7uUci8XmvL
7qT77aXX2cJ3qe0tewd95mJ99tVU60/3ayg8hPEI/6Hrf9brrcK3qDXQd7ZR
/zTZb+r9gq7/Qa8zhW9Wm5P6ffqnqr0uu5Wuv1D2rbI36X7VhLsLXyP8tfBW
/CbhucK/CrcUvkD4JuFvhe/W60VFj/Ee2dXV30P2DbK/Yb0IjxCeLfxDlffP
dP22bfXburJe1X+J+t9Wf1Hj3Vt4hvAi4c3qz2K/tdD13YS3EZ4j3Eq4u3B1
4anCWwufIlxX+DrhJsKnCdfKvH7Yi52F99P9r9L9X9b9twjvltm/7Kn+M6vs
H2YI7yx8hnAPre/J7Bdd/w/PQ/03qH97fJHw7rrfJOZf/X8J36P+BsK/4beE
91H/FcLPqf9P4Z2Fxws/Ifx7ldfLU8Kr1MbInqr2muxn1C6Rfbjut1Tfd4nu
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
0WKpYTwzcc0n80d8e0bi/Be1eS3Kzm2QAyEXQjw1ILFPopaU+iZqg6fFPYmX
T0ucE9s7c3zcKZ4/8RP1ylfJvrLgnBnxca9YPwdlrt9nPsnfkccjZl5Y8DUj
Yr6oFyTeJu6mPppab2p2KxLXoHfQ66yCa9OJSYn12ZPsTWJ41h5jZKzUm1M7
PTveo76a+uCRaj+WnKMjV1dInCvk/wKMjTESl24s+Vo+84vsL9VGFFxj/nXJ
8XCHmP88t/5MrpGcI7lI4uPDE9fgU6tPvRJaFPEkcSWaALF0x8RaQe3cuUzm
jLljjbPWeUY7Zs53HpB4D1CLT/08te2r4jPkNw9KXONPbT4xL2urT+JYmJid
Z8eYGTt7ql08c9YD+d1dEv/fgdpnNAzmljXGWivn/q0dYi5qZr5298T5UfKz
u8V6pJaaPcZeI96nVpoxMBZquurqXp9n1mbIWZO7bpD5Wj5D/pj8crPENd/U
ipMTIhdGzp9cUVb22USNAbUG41LnhgbGe+jjDRL/J4PacPLLLRPvYWrJ0XTJ
vVJzgNZLfNownm899X+u+RxW8H9Cvoj8cNPEPoPacvR2/itC/rqYOWdDroic
Hbkc8sWNYj4K6GGZuSgxwoIYL+PnjEWHpZ6TWhE4DXUR3+s7Lyg4X87/U/h/
CzbvbSqZb5LrIv9DHoj5YO+NLfj/KugnNRL//4X/RqD5nhX3RgumBgO+QE6Z
3DL6TJ54ffNfiTNT15byGeqnsvB//MeG/7+g39RLvD/YW2jg5KKvTq2N1yo7
l00NB7Uc60v+bw/5iQ0l57TIfb2QOtfFGBnrubG/yM9XJn7+m+P/NeTaybn/
UfJ79DFH/J+H/EiS+D8h1NMw58z9qNi/X6mdV/B/LNj/35TcNy3ux54txvn0
e8n1OdyL/wx9WvIz4dmMiPFzBrQOf1Sd2sKSa3XwAeSf/g9Eo94c
            "]], 
           Polygon[CompressedData["
1:eJwt2Ge4VcUZxfGDcO713Euz0TuCBcQIiIUmCCKooICKBVG6SBMVrEnsilgQ
FBugJjZM7L3X5EOMGnsHxa4pdsVCfuvZ58P/eWat/b4z+8ydeWf27Tx53ti5
m5RKpbdQxvhKqfR8g1JpGbEcHepLpT3rSqUVgprXlkqb4UD6CHGvi7tMzKVo
L+4T3lBxfWtKpT54jf4Ag3m96B3wD3qI2AnaB2Mfz77lLUOt9ia8hthFzDW8
inZjbDTWBfQ4Y98orr336IApdAMcwpspbhqGyV0s9lc5jegyrqT35E/Rno79
xX/H+xO2oltkHN4V9KTqb3vI73oYc+iPsZeY4ThA3A90f/3tQQ+Oz/uS14P3
vJx/4St9LOJdjSaetxLXGmvoUXimOn+XYwJ9Kr7lvUu/h9/payu/bbbcC+Ut
znzxKrxztM/HBM82yjsLG+T+KO8nLKVHiFvp+W+ZPxwjdx/etbw6c1ePubyh
vMt5jekmGEuPQaW28PJsCH2hPr/S97cZw1in0zP593veWlwrzNffVdXfm3f5
Dn14+4v7czWuDQ6jl+dvlEXn3X7R3zn0cP5P0bhU/AD6xEoxl5nTl7CD/kZX
+/tR3HeYwfuPuLH5+2C8Z7/Qe2Qc7UbGLGM/upPYVfpZiTf1e5S4ffnXiWsq
phnmiWnCm8abm7nDz+L25q3KOhXTELPFHVBdkyX6V3GzeCNwrPZ8HJbxxRwm
/wpjrsAHxj2aPrP6d3uZ9yJ6yvsfb6ScMXL3xSDe8bzPxa0Vsw5n0Bejkbjv
6R/QV1y7rDdxbeiWmdv6Yn9ln52qr9OyH7zL1rwbxLUSsxWa04P4H3v+UU2x
RrJWpsv/kv6ipqgBqQW9cIb2et6H6E93l3+j/trpqzW2oNvjGl4Hui0a6Kuf
2CVy35f3AabwthR3mbhNxdRi46bF3z1//9fFvIIjxLXlzeM9Rj+Obemhcp+Q
e6S8iWgmbiZ+8HwDrhE/TNz+4p4TN13MFAygD+Lf7Hlnf7cumFVX/C1v4LWl
22ES3VZsNzlb42Z9bE9vlpqV+sJrmPn3zt+gQbkopEs9ayamC67VHscbj53p
T1OLjNHP++2Mt+jW6Ox5J9wkfjt6Ib7U/oT3Kc6nr8fmcrvI64pH6X9nr/NG
pPZhgN9/Xd6R14nujAfpe9GxpvDy7Fr6aWyXuUweby19CcraG4z5c95Zf62y
dr1LU7oJ6uj/Zj9kncjdGwPF/ZQazduPHoXP6A5YKbeLvI7YRNyuvLt5J9In
YSTdBlfxWmT9ZB2Y+49yXuivt752wkvZB5Wi3qbuDsDu+lufs0d7SLW2f5+6
jsv1V6evSsatFDU/zxM3COvoYXhK3Ewx07C5/kblXKkt6kbqx2B6JFZr1/Bq
MUfcVHyqn09qijqZWrppzgX9DMZt+u2t/93xoPYQ3iBsm3kX+wc5d8m9HQdV
53mFuJ6pc6jhdeKtzrqjt0Ej3oH4q5w7sFAfHfQ1EMu03+a9gUliduZdwHuX
fg+TeT31d4v+9tPXaDTm9eHdwRtBD8t88QbyHuaNpPdCL3o3/a2rKfZ+akBP
uh//LnFjxOyL+vx9+Rd5/pm4z3Mu8zpX90IvMT1Qri/mNfO7Vsw7OIo3SNwj
1fcblXMw4+IB3kB6d3Sj+8pdLPfN7CEcmZqds6ZcvEveaZdKQdrH807A8Pw9
5C6V+7K8FzFRXnvesby/0X/PfSU1m/+09lM407MdU+twivYzvGdxuJi9speM
MVv/R2f98rYWd5K4R7JPcQhvb3GLPF+Yei/+IPoiNBT3Ne8b9M76qc7BAvq4
1HJei5wp2vPLxd0hd4jUttS4V7M30JvumjOT90D2fe4I8nrwTuc9RN+fuxev
C+9u7fswx7MWdJ/qnN7DuzO1g+6Gk3lP0E/iULnb8H7Pu42+Nectbwfvs8Z7
HeD9xqIpb7y4m8R1tF86YQb9grgda4o7Ye6GH9Lv5/zJeuL1yPzTY3BO6h6e
1O+e9E6VYk9lbw3IeWGMybz3eOfSZ2VNV4o1lLU7l56XMy7nNO+fvFn0jOxP
ehrW5m5Jn5f3pg/Fq7wL6cU5z+S2rO7Lxlnf2Zf0wXiZd3bOY7QSN646xsX0
JWiXOxfvWd6V9FU4nO6KXbX7l4ual9qXtZA1cTXvmtRKuZvlDDYvK8zJFalt
vIniXhO3VMxFOVt5s3kf89bk/EBn3ua85bya7LXUcudTG/6ScvF+ec/MSe5x
uc+9wHsO2+f+UinWWNbaHGzJO5L3Bu8x+vGsw5xvqUPad5SLecx8zssZp30X
73Z0FTO9Os+JuzNnKe9gv+0Wv62rdbF17qL0BKzhdaO7YwE9Q+46uffIuxfd
sw94n/Huo+9OPagv7tq5J/6FviXnPD0Vt6YO4xXPDqGPwf3l4n6fe36+ZbaR
/yD9SLm4m83kzcJ67Sey/rCdmOaYpD25XNSj1KXcH3OPfIr3dPYrXZe9Xi7q
aepq30qxfrOOp/KOwmb1xR0w42XcR3Mu8PrzHuINp4emVub9KsW9IPeD9miR
O0P1PnRlzh6MkduRv0pc98w7GvJ+n3OP935+G3bK76jebZfJW47RvAXVOX1b
zDv4I70v/5KaIi7xuRPXYqL2St4qtMyZl29C3nX09WhDt0I+Li/LXR771Rfn
VM6rC+jzUJ/7JP81472Z+mf8k4x7SqVox3sLO4o5gfcFbz39Ic6uFOsga+11
+g2cRm+oFPf/fAeMzt2V/hqjeOOyh1J39Hcy75VykZs+sm638D4zxa3OHRjj
xDXLWaa9NLUvd3+6IxZpX8xbgqZ1xf10fnVersp3iNxL9VmTbzBjbEQ/3o28
ljXF92C+k/K99CsO1D6Zd0ruTuLOrRTfRfk+apD7N10yxnHaC2qKupD60Lxa
I+LNw2/illSKb+Z8OzfB6rxH9e92In1C7mw5p1GrXYdK/la5M1WKdrx67Cbm
vNQX7/9RuXiWmF+q87xQzCKMrC/mJnM0mz4aw1OHsod5V+c+jrG8r1LvtA+s
KX53fv9KNNVuw2uL27KW0YzXjm6PuyrF926+e6fmvoChOX8xp6YYN+M3NGZj
TNWexZuBH7OmKsW3UP73MB57JLd6huZ74ee8N+//aUH8bQ==
            "]]}]}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0ktLVVEYBuDPjqV5vJy0qYKTHCjlXbw1yWFNJMxr3i9NEnQkIY70N9gk
RJzpb7BBiGYoekRJx4oJzROc+GwM9rueDxZrrW+vvSvHZrs/50TEspw8irhk
cW7EPzawwGQvy7nIWq7zDXfZw08yIxf5EdM85xR/c5JnnOApx3nCMWY5yiOO
cFgO1R95wCH+4iD3OcA99idns4877OUH6ZK/eqrjT1Zwg2ku8dY79fOKTcwy
w+/ckptUxFfucIVrnOcXjrCH71jHNhayitfu7TmTe1RGdV6Eqaih7eMlH/MV
nyTr6Yl6g/ajkU9ZIM3qNFtYyFYWsY3FbGcJO5hhJ5/xNUtZJi+SvTTQmpzJ
t3zPYS5wjt9SD9/8B1f5h5u84zaP//8P93aEOfo=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0s1vC3AYwPGnzWyyIxXnXTb/wCL0b+DgKCKd415001KtNmVslZHYdTsi
iwhHrtvYaFUVVy+xTITY2kWcZZ/G4ZvPc/q95Td0IXvmYiIi5vSvL+JUMuJE
f0SG55njTc7zEZfY4hP+4So/6oPuDka85x22ucB3vM0Wa3zLOTZ5i284ywbr
um5+zSpfscJNlrnBEl+yyBcscJ1reqqjAxHL/OtsNbaZ52OO9fbmaWaYZprH
eEQpc5J7ByK6HqXJz1xhgzf4nOf4gMe5yEOscFwT+nIwYpJfOcVv7D3yFrPc
5jS/c4Y/eIk5/TTn+YuX+ZtXuMMCd3mVHRbZZYl7vMay7mnUme7zLJ+xyjof
8hMb7PTWYcKdD7t7isMc4cnk//+wD3VLUlc=
          "]]}, {
         Line[{1835, 1833, 1856, 2930, 1857, 1885, 2937, 1886, 1906, 2950, 
          1907, 1927, 2718, 2965, 1947, 2979, 1948, 1968, 2994, 1969, 1989, 
          2745, 3009, 2012, 2752, 3025, 2034, 2035, 2064, 3047, 2065, 2093, 
          3054, 2094, 2115, 2769, 3069, 2136, 3083, 2137, 2156, 2787, 3098, 
          2175, 3111, 2176, 2194, 2806, 3125, 2215, 2216, 2245}], 
         Line[{1836, 1834, 1859, 2929, 1861, 1887, 2939, 1889, 1908, 2952, 
          1910, 1928, 2967, 1930, 1950, 2981, 1952, 1971, 2736, 2996, 1990, 
          2747, 3013, 2013, 2754, 3026, 2037, 2039, 2067, 3046, 2069, 2095, 
          3057, 2097, 2116, 3071, 2118, 2138, 3085, 2140, 2157, 3100, 2159, 
          2177, 1195, 2196, 2807, 3128, 2218, 2220, 2247}], 
         Line[{1838, 1837, 1860, 2931, 1865, 1888, 2941, 1892, 1909, 2953, 
          1913, 1929, 2969, 1933, 1951, 2728, 2983, 1972, 2738, 2999, 1991, 
          2748, 3012, 2014, 2755, 3029, 2038, 2043, 2068, 3048, 2073, 2096, 
          3060, 2100, 2117, 3073, 2121, 2139, 2778, 3087, 2158, 1162, 2178, 
          2798, 3115, 2197, 2809, 3130, 2219, 2224, 2248}], 
         Line[{1839, 1840, 1863, 2932, 1869, 1890, 2944, 1895, 1911, 2956, 
          1916, 1931, 832, 1953, 2730, 2986, 1973, 2740, 3002, 1993, 2749, 
          3015, 2016, 2756, 3030, 2041, 2047, 2071, 3050, 2077, 2098, 3059, 
          2103, 2119, 3074, 2124, 2142, 2780, 3090, 2161, 2790, 3103, 2179, 
          2800, 3117, 2198, 2810, 3131, 2222, 2228, 2250}], 
         Line[{1841, 1843, 1864, 2933, 1872, 1891, 2946, 1897, 1912, 2957, 
          1918, 1932, 2723, 2972, 1954, 2732, 2987, 1974, 2741, 3001, 1994, 
          2750, 3017, 2017, 2757, 3033, 2042, 2050, 2072, 3049, 2080, 2099, 
          3062, 2105, 2120, 3078, 2126, 2143, 2782, 3092, 2162, 2791, 3104, 
          2180, 2801, 3118, 2199, 2811, 3134, 2223, 2231, 2251}], 
         Line[{1842, 1845, 1867, 2934, 1876, 1893, 766, 1914, 2714, 2960, 
          1934, 2725, 2974, 1955, 2989, 1961, 1975, 2742, 3004, 1996, 2751, 
          3019, 2019, 2758, 3032, 2045, 2054, 2075, 3051, 2084, 2101, 3065, 
          2108, 2122, 2775, 3079, 2144, 2784, 3093, 2163, 2792, 3106, 2181, 
          3120, 2188, 2201, 2812, 3135, 2226, 2235, 2253}], 
         Line[{1844, 1848, 1868, 2935, 1880, 1894, 2708, 2948, 1915, 2716, 
          2962, 1935, 2976, 1942, 1956, 2733, 2991, 1976, 2743, 3006, 1997, 
          3021, 2006, 2020, 2759, 3036, 2046, 2058, 2076, 3052, 2088, 2102, 
          3066, 2111, 2123, 2776, 3080, 2145, 2785, 3095, 2164, 2794, 3108, 
          2182, 2803, 3122, 2202, 2813, 3137, 2227, 2239, 2254}], 
         Line[{1846, 1855, 1871, 2936, 2701, 1896, 1905, 2949, 1917, 2964, 
          2717, 1936, 2978, 2726, 1957, 2993, 2735, 1978, 3008, 2744, 1999, 
          2011, 3023, 2022, 2033, 3038, 2049, 2063, 2079, 3053, 2760, 2104, 
          3068, 2768, 2125, 2135, 3082, 2146, 3097, 2786, 2165, 3110, 2795, 
          2184, 3124, 2805, 2204, 3139, 2814, 2230, 2244, 2256}], 
         Line[{1847, 1858, 1874, 2938, 2702, 1898, 2951, 2709, 1919, 2966, 
          2719, 1937, 1949, 2980, 1959, 1970, 2995, 1980, 3010, 2746, 2001, 
          3024, 2753, 2024, 2036, 3039, 2052, 2066, 2082, 3055, 2761, 2106, 
          3070, 2770, 2127, 3084, 2777, 2147, 3099, 2788, 2167, 3112, 2796, 
          2186, 2195, 3126, 2206, 2217, 3140, 2233, 2246, 2258}], 
         Line[{1849, 1862, 1875, 2940, 2703, 1899, 2954, 2710, 1920, 2968, 
          2720, 1938, 2982, 2727, 1960, 2997, 2737, 1981, 1992, 3011, 2002, 
          2015, 3027, 2025, 2040, 3040, 2053, 2070, 2083, 3056, 2762, 2107, 
          3072, 2771, 2128, 2141, 3086, 2148, 2160, 3101, 2168, 3113, 2797, 
          2187, 3127, 2808, 2207, 2221, 3141, 2234, 2249, 2259}], 
         Line[{1850, 1866, 1878, 2942, 2704, 1900, 2955, 2711, 1921, 2970, 
          2721, 1940, 2984, 2729, 1963, 2998, 2739, 1983, 1995, 3014, 2004, 
          2018, 3028, 2027, 2044, 3041, 2056, 2074, 2086, 3058, 2763, 2109, 
          3075, 2772, 2129, 3088, 2779, 2150, 3102, 2789, 2169, 3114, 2799, 
          2189, 2200, 3129, 2209, 2225, 3142, 2237, 2252, 2261}], 
         Line[{1851, 1870, 1879, 2943, 2705, 1901, 2958, 2712, 1922, 2971, 
          2722, 1941, 2985, 2731, 1964, 1977, 3000, 1984, 1998, 3016, 2005, 
          2021, 3031, 2028, 2048, 3042, 2057, 2078, 2087, 3061, 2764, 2110, 
          3076, 2773, 2130, 3089, 2781, 2151, 1168, 2170, 2183, 3116, 2190, 
          2203, 3132, 2210, 2229, 3143, 2238, 2255, 2262}], 
         Line[{1852, 1873, 1882, 2945, 2706, 1902, 2959, 2713, 1924, 2973, 
          2724, 1944, 1958, 2988, 1965, 1979, 3003, 1986, 2000, 3018, 2008, 
          2023, 3034, 2030, 2051, 3043, 2060, 2081, 2090, 3063, 2765, 2112, 
          3077, 2774, 2132, 3091, 2783, 2153, 2166, 3105, 2172, 2185, 3119, 
          2191, 2205, 3133, 2212, 2232, 3144, 2241, 2257, 2264}], 
         Line[{1853, 1877, 1883, 2947, 2707, 1903, 2961, 2715, 1925, 1939, 
          2975, 1945, 1962, 2990, 1966, 1982, 3005, 1987, 2003, 3020, 2009, 
          2026, 3035, 2031, 2055, 3044, 2061, 2085, 2091, 3064, 2766, 2113, 
          1102, 2133, 2149, 3094, 2154, 3107, 2793, 2173, 3121, 2802, 2192, 
          2208, 3136, 2213, 2236, 3145, 2242, 2260, 2265}], 
         Line[{1854, 1881, 1884, 772, 1904, 1923, 2963, 1926, 1943, 2977, 
          1946, 2992, 2734, 1967, 1985, 3007, 1988, 2007, 3022, 2010, 2029, 
          3037, 2032, 2059, 3045, 2062, 2089, 2092, 3067, 2767, 2114, 2131, 
          3081, 2134, 2152, 3096, 2155, 2171, 3109, 2174, 3123, 2804, 2193, 
          2211, 3138, 2214, 2240, 3146, 2243, 2263, 2266}], 
         Line[{2269, 2267, 2290, 3148, 2291, 2319, 3155, 2320, 2340, 3168, 
          2341, 2361, 2832, 3183, 2381, 3197, 2382, 2402, 3212, 2403, 2423, 
          2859, 3227, 2446, 2866, 3243, 2468, 2469, 2498, 3265, 2499, 2527, 
          3272, 2528, 2549, 2883, 3287, 2570, 3301, 2571, 2590, 2901, 3316, 
          2609, 3329, 2610, 2628, 2920, 3343, 2649, 2650, 2679}], 
         Line[{2270, 2268, 2293, 3147, 2295, 2321, 3157, 2323, 2342, 3170, 
          2344, 2362, 3185, 2364, 2384, 3199, 2386, 2405, 2850, 3214, 2424, 
          2861, 3231, 2447, 2868, 3244, 2471, 2473, 2501, 3264, 2503, 2529, 
          3275, 2531, 2550, 3289, 2552, 2572, 3303, 2574, 2591, 3318, 2593, 
          2611, 1750, 2630, 2921, 3346, 2652, 2654, 2681}], 
         Line[{2272, 2271, 2294, 3149, 2299, 2322, 3159, 2326, 2343, 3171, 
          2347, 2363, 3187, 2367, 2385, 2842, 3201, 2406, 2852, 3217, 2425, 
          2862, 3230, 2448, 2869, 3247, 2472, 2477, 2502, 3266, 2507, 2530, 
          3278, 2534, 2551, 3291, 2555, 2573, 2892, 3305, 2592, 1717, 2612, 
          2912, 3333, 2631, 2923, 3348, 2653, 2658, 2682}], 
         Line[{2273, 2274, 2297, 3150, 2303, 2324, 3162, 2329, 2345, 3174, 
          2350, 2365, 1387, 2387, 2844, 3204, 2407, 2854, 3220, 2427, 2863, 
          3233, 2450, 2870, 3248, 2475, 2481, 2505, 3268, 2511, 2532, 3277, 
          2537, 2553, 3292, 2558, 2576, 2894, 3308, 2595, 2904, 3321, 2613, 
          2914, 3335, 2632, 2924, 3349, 2656, 2662, 2684}], 
         Line[{2275, 2277, 2298, 3151, 2306, 2325, 3164, 2331, 2346, 3175, 
          2352, 2366, 2837, 3190, 2388, 2846, 3205, 2408, 2855, 3219, 2428, 
          2864, 3235, 2451, 2871, 3251, 2476, 2484, 2506, 3267, 2514, 2533, 
          3280, 2539, 2554, 3296, 2560, 2577, 2896, 3310, 2596, 2905, 3322, 
          2614, 2915, 3336, 2633, 2925, 3352, 2657, 2665, 2685}], 
         Line[{2276, 2279, 2301, 3152, 2310, 2327, 1321, 2348, 2828, 3178, 
          2368, 2839, 3192, 2389, 3207, 2395, 2409, 2856, 3222, 2430, 2865, 
          3237, 2453, 2872, 3250, 2479, 2488, 2509, 3269, 2518, 2535, 3283, 
          2542, 2556, 2889, 3297, 2578, 2898, 3311, 2597, 2906, 3324, 2615, 
          3338, 2622, 2635, 2926, 3353, 2660, 2669, 2687}], 
         Line[{2278, 2282, 2302, 3153, 2314, 2328, 2822, 3166, 2349, 2830, 
          3180, 2369, 3194, 2376, 2390, 2847, 3209, 2410, 2857, 3224, 2431, 
          3239, 2440, 2454, 2873, 3254, 2480, 2492, 2510, 3270, 2522, 2536, 
          3284, 2545, 2557, 2890, 3298, 2579, 2899, 3313, 2598, 2908, 3326, 
          2616, 2917, 3340, 2636, 2927, 3355, 2661, 2673, 2688}], 
         Line[{2280, 2289, 2305, 3154, 2815, 2330, 2339, 3167, 2351, 3182, 
          2831, 2370, 3196, 2840, 2391, 3211, 2849, 2412, 3226, 2858, 2433, 
          2445, 3241, 2456, 2467, 3256, 2483, 2497, 2513, 3271, 2874, 2538, 
          3286, 2882, 2559, 2569, 3300, 2580, 3315, 2900, 2599, 3328, 2909, 
          2618, 3342, 2919, 2638, 3357, 2928, 2664, 2678, 2690}], 
         Line[{2281, 2292, 2308, 3156, 2816, 2332, 3169, 2823, 2353, 3184, 
          2833, 2371, 2383, 3198, 2393, 2404, 3213, 2414, 3228, 2860, 2435, 
          3242, 2867, 2458, 2470, 3257, 2486, 2500, 2516, 3273, 2875, 2540, 
          3288, 2884, 2561, 3302, 2891, 2581, 3317, 2902, 2601, 3330, 2910, 
          2620, 2629, 3344, 2640, 2651, 3358, 2667, 2680, 2692}], 
         Line[{2283, 2296, 2309, 3158, 2817, 2333, 3172, 2824, 2354, 3186, 
          2834, 2372, 3200, 2841, 2394, 3215, 2851, 2415, 2426, 3229, 2436, 
          2449, 3245, 2459, 2474, 3258, 2487, 2504, 2517, 3274, 2876, 2541, 
          3290, 2885, 2562, 2575, 3304, 2582, 2594, 3319, 2602, 3331, 2911, 
          2621, 3345, 2922, 2641, 2655, 3359, 2668, 2683, 2693}], 
         Line[{2284, 2300, 2312, 3160, 2818, 2334, 3173, 2825, 2355, 3188, 
          2835, 2374, 3202, 2843, 2397, 3216, 2853, 2417, 2429, 3232, 2438, 
          2452, 3246, 2461, 2478, 3259, 2490, 2508, 2520, 3276, 2877, 2543, 
          3293, 2886, 2563, 3306, 2893, 2584, 3320, 2903, 2603, 3332, 2913, 
          2623, 2634, 3347, 2643, 2659, 3360, 2671, 2686, 2695}], 
         Line[{2285, 2304, 2313, 3161, 2819, 2335, 3176, 2826, 2356, 3189, 
          2836, 2375, 3203, 2845, 2398, 2411, 3218, 2418, 2432, 3234, 2439, 
          2455, 3249, 2462, 2482, 3260, 2491, 2512, 2521, 3279, 2878, 2544, 
          3294, 2887, 2564, 3307, 2895, 2585, 1723, 2604, 2617, 3334, 2624, 
          2637, 3350, 2644, 2663, 3361, 2672, 2689, 2696}], 
         Line[{2286, 2307, 2316, 3163, 2820, 2336, 3177, 2827, 2358, 3191, 
          2838, 2378, 2392, 3206, 2399, 2413, 3221, 2420, 2434, 3236, 2442, 
          2457, 3252, 2464, 2485, 3261, 2494, 2515, 2524, 3281, 2879, 2546, 
          3295, 2888, 2566, 3309, 2897, 2587, 2600, 3323, 2606, 2619, 3337, 
          2625, 2639, 3351, 2646, 2666, 3362, 2675, 2691, 2698}], 
         Line[{2287, 2311, 2317, 3165, 2821, 2337, 3179, 2829, 2359, 2373, 
          3193, 2379, 2396, 3208, 2400, 2416, 3223, 2421, 2437, 3238, 2443, 
          2460, 3253, 2465, 2489, 3262, 2495, 2519, 2525, 3282, 2880, 2547, 
          1657, 2567, 2583, 3312, 2588, 3325, 2907, 2607, 3339, 2916, 2626, 
          2642, 3354, 2647, 2670, 3363, 2676, 2694, 2699}], 
         Line[{2288, 2315, 2318, 1327, 2338, 2357, 3181, 2360, 2377, 3195, 
          2380, 3210, 2848, 2401, 2419, 3225, 2422, 2441, 3240, 2444, 2463, 
          3255, 2466, 2493, 3263, 2496, 2523, 2526, 3285, 2881, 2548, 2565, 
          3299, 2568, 2586, 3314, 2589, 2605, 3327, 2608, 3341, 2918, 2627, 
          2645, 3356, 2648, 2674, 3364, 2677, 2697, 2700}]}, {
         Line[{723, 1073, 1072, 3067, 1069, 1068, 1065, 3064, 1064, 1061, 
          3063, 1060, 1057, 3061, 1056, 1053, 3058, 1052, 1049, 3056, 1048, 
          3055, 1045, 1044, 1041, 3053, 1037, 1036, 1035, 1034, 3052, 1033, 
          1032, 3051, 1031, 1030, 3049, 1029, 3050, 1028, 1027, 1026, 3048, 
          1025, 1024, 3046, 1023, 3047, 1022, 1021, 1020, 1040}], 
         Line[{743, 724, 725, 726, 2930, 727, 2929, 728, 729, 2931, 730, 731, 
          2932, 732, 733, 2933, 734, 735, 2934, 736, 737, 2935, 738, 739, 740,
           741, 2936, 744, 747, 2938, 748, 751, 2940, 752, 755, 2942, 756, 
          759, 2943, 760, 763, 2945, 764, 767, 2947, 768, 771, 772, 775, 776, 
          778}], 
         Line[{780, 742, 745, 2937, 746, 749, 2939, 750, 753, 2941, 754, 757, 
          758, 2944, 761, 762, 2946, 765, 766, 769, 770, 2948, 773, 774, 777, 
          2949, 781, 784, 2951, 785, 788, 789, 2954, 792, 2955, 793, 796, 797,
           2958, 800, 2959, 801, 804, 805, 2961, 808, 809, 2963, 812, 813, 
          815}], 
         Line[{817, 779, 782, 2950, 783, 786, 2952, 787, 790, 2953, 791, 794, 
          2956, 795, 798, 2957, 799, 802, 803, 2960, 806, 807, 2962, 810, 811,
           814, 2964, 818, 821, 2966, 822, 825, 2968, 826, 829, 2970, 830, 
          833, 2971, 834, 837, 838, 2973, 841, 842, 2975, 845, 846, 2977, 849,
           850, 852}], 
         Line[{854, 816, 819, 2965, 820, 823, 2967, 824, 827, 2969, 828, 831, 
          832, 835, 836, 2972, 839, 840, 2974, 843, 844, 2976, 847, 848, 851, 
          2978, 855, 858, 2980, 859, 862, 2982, 863, 866, 2984, 867, 870, 
          2985, 871, 874, 875, 2988, 878, 879, 2990, 882, 883, 2992, 886, 887,
           889}], 
         Line[{891, 853, 856, 2979, 857, 860, 2981, 861, 864, 2983, 865, 868, 
          869, 2986, 872, 873, 2987, 876, 877, 2989, 880, 881, 2991, 884, 885,
           888, 2993, 892, 895, 2995, 896, 899, 2997, 900, 903, 2998, 904, 
          907, 3000, 908, 911, 912, 3003, 915, 916, 3005, 919, 920, 3007, 923,
           924, 926}], 
         Line[{928, 890, 893, 2994, 894, 897, 2996, 898, 901, 902, 2999, 905, 
          906, 3002, 909, 3001, 910, 913, 914, 3004, 917, 918, 3006, 921, 922,
           925, 3008, 929, 932, 3010, 933, 936, 3011, 937, 940, 941, 3014, 
          944, 945, 3016, 948, 949, 3018, 952, 953, 3020, 956, 957, 3022, 960,
           961, 963}], 
         Line[{965, 927, 930, 3009, 931, 934, 935, 3013, 938, 3012, 939, 942, 
          943, 3015, 946, 947, 3017, 950, 951, 3019, 954, 955, 3021, 958, 959,
           962, 3023, 966, 969, 3024, 970, 973, 974, 3027, 977, 3028, 978, 
          981, 982, 3031, 985, 986, 3034, 989, 3035, 990, 993, 994, 3037, 997,
           998, 1000}], 
         Line[{1001, 964, 967, 968, 3025, 971, 972, 3026, 975, 976, 3029, 979,
           980, 3030, 983, 984, 3033, 987, 3032, 988, 991, 992, 3036, 995, 
          996, 999, 3038, 1002, 1003, 3039, 1004, 1005, 1006, 3040, 1007, 
          1008, 3041, 1009, 1010, 3042, 1011, 3043, 1012, 1013, 1014, 3044, 
          1015, 1016, 3045, 1017, 1018, 1019}], 
         Line[{1038, 1110, 1109, 3081, 1106, 1105, 1102, 1101, 1098, 3077, 
          1097, 3076, 1094, 1093, 3075, 1090, 1089, 1086, 3072, 1085, 1082, 
          3070, 1081, 1078, 3068, 1074, 1071, 1070, 3066, 1067, 1066, 3065, 
          1063, 1062, 1059, 3062, 1058, 1055, 3059, 1054, 3060, 1051, 1050, 
          3057, 1047, 1046, 1043, 3054, 1042, 1039, 1077}], 
         Line[{1075, 1147, 1146, 3096, 1143, 1142, 3094, 1139, 1138, 1135, 
          3091, 1134, 1131, 3089, 1130, 1127, 3088, 1126, 1123, 3086, 1122, 
          1119, 3084, 1118, 1115, 3082, 1111, 1108, 1107, 3080, 1104, 1103, 
          3079, 1100, 1099, 3078, 1096, 1095, 1092, 3074, 1091, 1088, 3073, 
          1087, 1084, 3071, 1083, 1080, 3069, 1079, 1076, 1114}], 
         Line[{1112, 1184, 1183, 3109, 1180, 1179, 3107, 1176, 1175, 3105, 
          1172, 1171, 1168, 1167, 1164, 3102, 1163, 1160, 3101, 1159, 1156, 
          3099, 1155, 1152, 3097, 1148, 1145, 1144, 3095, 1141, 1140, 3093, 
          1137, 1136, 3092, 1133, 1132, 3090, 1129, 1128, 1125, 3087, 1124, 
          1121, 3085, 1120, 1117, 3083, 1116, 1113, 1151}], 
         Line[{1149, 1221, 1220, 3123, 1217, 1216, 3121, 1213, 1212, 3119, 
          1209, 1208, 1205, 3116, 1204, 1201, 3114, 1200, 1197, 3113, 1196, 
          1193, 3112, 1192, 1189, 3110, 1185, 1182, 1181, 3108, 1178, 1177, 
          3106, 1174, 1173, 3104, 1170, 1169, 3103, 1166, 1165, 1162, 1161, 
          1158, 3100, 1157, 1154, 3098, 1153, 1150, 1188}], 
         Line[{1186, 1258, 1257, 3138, 1254, 1253, 3136, 1250, 1249, 1246, 
          3133, 1245, 3132, 1242, 1241, 1238, 3129, 1237, 1234, 3127, 1233, 
          1230, 3126, 1229, 1226, 3124, 1222, 1219, 1218, 3122, 1215, 1214, 
          3120, 1211, 1210, 3118, 1207, 1206, 3117, 1203, 1202, 3115, 1199, 
          1198, 1195, 1194, 1191, 3111, 1190, 1187, 1225}], 
         Line[{1223, 1277, 1276, 3146, 1275, 1274, 3145, 1273, 1272, 3144, 
          1271, 1270, 3143, 1269, 1268, 3142, 1267, 1266, 3141, 1265, 1264, 
          3140, 1263, 1262, 1261, 3139, 1259, 1256, 1255, 3137, 1252, 1251, 
          3135, 1248, 1247, 3134, 1244, 1243, 3131, 1240, 1239, 3130, 1236, 
          1235, 3128, 1232, 1231, 1228, 3125, 1227, 1224, 1260}], 
         Line[{1278, 1628, 1627, 3285, 1624, 1623, 1620, 3282, 1619, 1616, 
          3281, 1615, 1612, 3279, 1611, 1608, 3276, 1607, 1604, 3274, 1603, 
          3273, 1600, 1599, 1596, 3271, 1592, 1591, 1590, 1589, 3270, 1588, 
          1587, 3269, 1586, 1585, 3267, 1584, 3268, 1583, 1582, 1581, 3266, 
          1580, 1579, 3264, 1578, 3265, 1577, 1576, 1575, 1595}], 
         Line[{1298, 1279, 1280, 1281, 3148, 1282, 3147, 1283, 1284, 3149, 
          1285, 1286, 3150, 1287, 1288, 3151, 1289, 1290, 3152, 1291, 1292, 
          3153, 1293, 1294, 1295, 1296, 3154, 1299, 1302, 3156, 1303, 1306, 
          3158, 1307, 1310, 3160, 1311, 1314, 3161, 1315, 1318, 3163, 1319, 
          1322, 3165, 1323, 1326, 1327, 1330, 1331, 1333}], 
         Line[{1335, 1297, 1300, 3155, 1301, 1304, 3157, 1305, 1308, 3159, 
          1309, 1312, 1313, 3162, 1316, 1317, 3164, 1320, 1321, 1324, 1325, 
          3166, 1328, 1329, 1332, 3167, 1336, 1339, 3169, 1340, 1343, 1344, 
          3172, 1347, 3173, 1348, 1351, 1352, 3176, 1355, 3177, 1356, 1359, 
          1360, 3179, 1363, 1364, 3181, 1367, 1368, 1370}], 
         Line[{1372, 1334, 1337, 3168, 1338, 1341, 3170, 1342, 1345, 3171, 
          1346, 1349, 3174, 1350, 1353, 3175, 1354, 1357, 1358, 3178, 1361, 
          1362, 3180, 1365, 1366, 1369, 3182, 1373, 1376, 3184, 1377, 1380, 
          3186, 1381, 1384, 3188, 1385, 1388, 3189, 1389, 1392, 1393, 3191, 
          1396, 1397, 3193, 1400, 1401, 3195, 1404, 1405, 1407}], 
         Line[{1409, 1371, 1374, 3183, 1375, 1378, 3185, 1379, 1382, 3187, 
          1383, 1386, 1387, 1390, 1391, 3190, 1394, 1395, 3192, 1398, 1399, 
          3194, 1402, 1403, 1406, 3196, 1410, 1413, 3198, 1414, 1417, 3200, 
          1418, 1421, 3202, 1422, 1425, 3203, 1426, 1429, 1430, 3206, 1433, 
          1434, 3208, 1437, 1438, 3210, 1441, 1442, 1444}], 
         Line[{1446, 1408, 1411, 3197, 1412, 1415, 3199, 1416, 1419, 3201, 
          1420, 1423, 1424, 3204, 1427, 1428, 3205, 1431, 1432, 3207, 1435, 
          1436, 3209, 1439, 1440, 1443, 3211, 1447, 1450, 3213, 1451, 1454, 
          3215, 1455, 1458, 3216, 1459, 1462, 3218, 1463, 1466, 1467, 3221, 
          1470, 1471, 3223, 1474, 1475, 3225, 1478, 1479, 1481}], 
         Line[{1483, 1445, 1448, 3212, 1449, 1452, 3214, 1453, 1456, 1457, 
          3217, 1460, 1461, 3220, 1464, 3219, 1465, 1468, 1469, 3222, 1472, 
          1473, 3224, 1476, 1477, 1480, 3226, 1484, 1487, 3228, 1488, 1491, 
          3229, 1492, 1495, 1496, 3232, 1499, 1500, 3234, 1503, 1504, 3236, 
          1507, 1508, 3238, 1511, 1512, 3240, 1515, 1516, 1518}], 
         Line[{1520, 1482, 1485, 3227, 1486, 1489, 1490, 3231, 1493, 3230, 
          1494, 1497, 1498, 3233, 1501, 1502, 3235, 1505, 1506, 3237, 1509, 
          1510, 3239, 1513, 1514, 1517, 3241, 1521, 1524, 3242, 1525, 1528, 
          1529, 3245, 1532, 3246, 1533, 1536, 1537, 3249, 1540, 1541, 3252, 
          1544, 3253, 1545, 1548, 1549, 3255, 1552, 1553, 1555}], 
         Line[{1556, 1519, 1522, 1523, 3243, 1526, 1527, 3244, 1530, 1531, 
          3247, 1534, 1535, 3248, 1538, 1539, 3251, 1542, 3250, 1543, 1546, 
          1547, 3254, 1550, 1551, 1554, 3256, 1557, 1558, 3257, 1559, 1560, 
          1561, 3258, 1562, 1563, 3259, 1564, 1565, 3260, 1566, 3261, 1567, 
          1568, 1569, 3262, 1570, 1571, 3263, 1572, 1573, 1574}], 
         Line[{1593, 1665, 1664, 3299, 1661, 1660, 1657, 1656, 1653, 3295, 
          1652, 3294, 1649, 1648, 3293, 1645, 1644, 1641, 3290, 1640, 1637, 
          3288, 1636, 1633, 3286, 1629, 1626, 1625, 3284, 1622, 1621, 3283, 
          1618, 1617, 1614, 3280, 1613, 1610, 3277, 1609, 3278, 1606, 1605, 
          3275, 1602, 1601, 1598, 3272, 1597, 1594, 1632}], 
         Line[{1630, 1702, 1701, 3314, 1698, 1697, 3312, 1694, 1693, 1690, 
          3309, 1689, 1686, 3307, 1685, 1682, 3306, 1681, 1678, 3304, 1677, 
          1674, 3302, 1673, 1670, 3300, 1666, 1663, 1662, 3298, 1659, 1658, 
          3297, 1655, 1654, 3296, 1651, 1650, 1647, 3292, 1646, 1643, 3291, 
          1642, 1639, 3289, 1638, 1635, 3287, 1634, 1631, 1669}], 
         Line[{1667, 1739, 1738, 3327, 1735, 1734, 3325, 1731, 1730, 3323, 
          1727, 1726, 1723, 1722, 1719, 3320, 1718, 1715, 3319, 1714, 1711, 
          3317, 1710, 1707, 3315, 1703, 1700, 1699, 3313, 1696, 1695, 3311, 
          1692, 1691, 3310, 1688, 1687, 3308, 1684, 1683, 1680, 3305, 1679, 
          1676, 3303, 1675, 1672, 3301, 1671, 1668, 1706}], 
         Line[{1704, 1776, 1775, 3341, 1772, 1771, 3339, 1768, 1767, 3337, 
          1764, 1763, 1760, 3334, 1759, 1756, 3332, 1755, 1752, 3331, 1751, 
          1748, 3330, 1747, 1744, 3328, 1740, 1737, 1736, 3326, 1733, 1732, 
          3324, 1729, 1728, 3322, 1725, 1724, 3321, 1721, 1720, 1717, 1716, 
          1713, 3318, 1712, 1709, 3316, 1708, 1705, 1743}], 
         Line[{1741, 1813, 1812, 3356, 1809, 1808, 3354, 1805, 1804, 1801, 
          3351, 1800, 3350, 1797, 1796, 1793, 3347, 1792, 1789, 3345, 1788, 
          1785, 3344, 1784, 1781, 3342, 1777, 1774, 1773, 3340, 1770, 1769, 
          3338, 1766, 1765, 3336, 1762, 1761, 3335, 1758, 1757, 3333, 1754, 
          1753, 1750, 1749, 1746, 3329, 1745, 1742, 1780}], 
         Line[{1778, 1832, 1831, 3364, 1830, 1829, 3363, 1828, 1827, 3362, 
          1826, 1825, 3361, 1824, 1823, 3360, 1822, 1821, 3359, 1820, 1819, 
          3358, 1818, 1817, 1816, 3357, 1814, 1811, 1810, 3355, 1807, 1806, 
          3353, 1803, 1802, 3352, 1799, 1798, 3349, 1795, 1794, 3348, 1791, 
          1790, 3346, 1787, 1786, 1783, 3343, 1782, 1779, 
          1815}]}, {}, {}, {}, {}, {}}}, VertexNormals -> CompressedData["
1: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
nNUsw2TXahGHlgXVw5cYcKr99UsP/49fepTq/388ZQfNOeHLhZC9KDgRtasW
1fT7SizhfSTdhvfqwtdSuPd7TtautRYZHd6yd9bEgOzFX9/17yTf9QGS7/oO
g/87/n/o+vNwqt7vDRyPUio0qCghJESESipWZSgNilKZExEyp4FQMjaIyhyZ
53mel5ljnmcalNk5kiFTvrsP/X7X93V93/+u61zP2Xs961nrvve+91r/+rH/
iiNn3nyZAxttTlMXrytHklP81DZlgo8/NHW3y8qFvJu6ps67y9BG2q6UiYjz
oYKV/u1c/+nf3vA/7EoPekJvyOSAYN0VT1qpYox0Mqqwe0aB42+FNYJZcuF5
oNoDG88ijCcZCrQSdfN27Uof+IL/9IEXtlzpA2+22gf+X592Ex2fTsE/WdDG
Wq+qL1aEtonQtdWNWD8p/qn4dAacPGOaQbUFUcZhVO0kUccVVtcx/c86Zqt2
4//YX+7t/uIZQcTlNtmHFdcLMND1cPpEOOG3xLWXnmzLgEMZTnfsdQvwrLoq
jSKxX7dW+9KHrfal517tS6+8ag/6jz0qY9MH+uBk4BkA9XfM+ZinppZ9M5MC
dTxfjv3gTIYIkTOdWXL5SOsFNzMJ+5TcSn/7xdb/d397Nw3vX3M1cbBbZve8
2FQefkqKe6L193n46rnT/M+5+7LaD1/gP/3wC1ftIv+xu1us9MnX/k+f/C+r
dv3/2If+h53WZqWv/o//9NXfYfP/3W9/jfD/d7/9fav2+f/YH6/24Tf/Tx/+
hv/Rh79m1T73H3v5qv33f+y3aVf69uf8p2//4f9hn1rt59/9n37+Q//Drsyz
0uc/dLXP/7+5DKlO7ya1vFLQ8ZbQnKhXHoSEzYdTEfEwonpaZC1NKm7uvWJm
dygPxOm/7TIn7PmpWYm3vFPRc3x263lSHvhrfFzXl0oBeSi22bwjDdmOXhXM
8imEfhsVg7vBBC698+znFd4sbFCaO56VVgjlFaVXGIh6vf6ACX80TRZW6+Zp
U7MUQROfXsPmd3/7FYt071bLxwxHn46grcWQPDbqqUvE83tqqRmtoDz0mI3a
+fpgMRQrcIXxE/n2WrujisiZPCxf2O97cksJKBf60W4h8qSTKufcJv1cnGNh
9Rs1KAY+0ZZPfH/zMIO14Xx4Jm75kLOhdrAc2Ip8o/huEXzTYub9gkMWvlGt
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
o6J+XaM4ofFGdIljicGcCl6/cZaLU/s9dM7dC7wu9hr0JQcENpWP/U8O7XPm
PRtUMu/ZwJF1zzb7sWywWuUtZJNtZ5RWF8H3RKHpTXvGIb7ovvHGHuzfRnSp
V0GZiN+tsd8+hoB6Xxq3enYU0psPnfC2qEN3kIFvrCMBg2Oa8xvuMNDDWypJ
3uWv0Qq9woojMA55C+HHynjr0bjKFaJp6Ru0WPtg/tfJb8Avqegf10tGzmt3
Uc9NUuGc1yfTnHcEtLO4grxsXEHHrR4B2TsT0fY0430QT4cPHnRZUxoB3+Tl
Dq13jkRfzQ5ybz5fA1tEbYVvPsZ1ofm0noI5GZl0SQwliVeCU9uue09TCOgJ
60gzbaWj4UiHa7TCTNg+q7GsMed/c+q2+koKeupUoaIkqZA/AgFoMFP1dGsC
AZr9JX+yDW2RblSl7UGldPBacbKr7RcBuiOvzd3pDHTFMaPtnNgLtHLs+lX3
ZAIednpKHs71BbkxDgWxyhIQTdyQn/OagKPbq6m/YypRr/SfnASzFHTrS/3T
wUwCkuwORN+YswGVK7eWmRbRYa/0FhdGMT73D9Vrw73pqL2UptImlo347yuf
FcvFet+8TCTIrBxZVER3zizORT7mzSolJVjXd0c0HJhNQAM26eWPUAloHQ23
XNVCwKLqNKuZ26VoSY8M6YwlBQWf66XmlBNgu26OP3FZPlofHO5+/HguvLBz
u+aIz2XoskHjrHshWlYia3VHkIK6QZcuh+v1t9MGQ466BSirejRM/YYP7P6b
rHEH5wElQkZrl3IeOr9DxOXBJmO05+enXzO4ntqcnHbqoqTCmWKBoQeLKLC9
t2pZ1xABedcXhKom85CJIjn2QGUY2vjRY3E+fp74iuN+sEU8aBEgHzNZCNRf
48u68X6argZHx47dByW+S1NH7uVB9uB+RSG8/jbWfMIntvmENNsQ6Q3HSYjW
z1knO5CMeE6UNLaNErCdb2bJnlI/dNi6b8SvjAQq4e5x2RMEcHMwOWn1bJy0
I9Zz7wpkMlB2Yz3/N5EMdL3eW04Lr1+xQl3mDZGMyhTS7QJislCefK6p6jfc
v10Q9ReEYPQjnPbpwqp4uLtZc+dy3HfNejuGlH9IRYpBM/ylp0joUpHMpMMI
ATpbOw65vPJCZzM5vRdZRcDteAWuJX9x3MUIPnVOSEMFVtzHIyZzUQR6ulf7
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
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {342., 342.}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.713864299870255}, {0., 
       0.7612436484274085}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.415, $CellContext`k2$$ = 
    0.5800000000000001, $CellContext`k3$$ = 
    0.8250000000000001, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.415, {1, 1, {0, -1}} -> 
     0.5800000000000001, {1, 1, {-1, -1}} -> 
     0.8250000000000001, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.415, {1, 1, {0, 1}} -> 0.5800000000000001, {1, 1, {1, 1}} -> 
     0.8250000000000001, {1, 1, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$134144, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}}, $CellContext`moSel$$ = 
    2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10}, "numberOfMasses" -> 1, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}}, 
     "mPosFirstCell" -> {{0.9, 0.7}}, 
     "pointsDataTable" -> {{{-1.2000000000000002`, -2.7}, {
      0.7, -1.9000000000000001`}, {2.6, -1.1}, {-1.1, -1.4000000000000001`}, {
      0.8, -0.6000000000000001}, {2.6999999999999997`, 
      0.19999999999999996`}, {-0.9999999999999999, -0.10000000000000009`}, {
      0.9, 0.7}, {2.8, 1.5}, {-0.8999999999999998, 1.2}, {1., 2.}, {2.9, 
      2.8}, {-0.7999999999999999, 2.5}, {1.1, 3.3}}}, "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.63, -0.87}, {
    2.5949999999999998`, 
    0.3500000000000001}}, $CellContext`rawArrayOfMasses$$ = {
    10}, $CellContext`rawNumberOfMasses$$ = 1, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 2, $CellContext`tauSliderValue$$ = 
    1, $CellContext`tick$$ = True, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 
    0.8}, {0.9, 0.7}}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       TabView[{"dynamics" -> Column[{
            Dynamic[
             Row[{
               OverVector[
                Style["q", Italic, 10]], " = ", 
               
               Module[{$CellContext`qm$}, $CellContext`qm$ = 
                 ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                Slider2D[
                  
                  Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                  ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
               Style[" 2 \[Pi] ", 10], 
               Style[
                Dynamic[
                 NumberForm[
                  MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
            Style[
             Row[{
               Text["number of time intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`dynMeshSize$$]}], 10], 
            Style[
             Row[{
               Text["time, normalized to one period, "], 
               Style["t", Italic], "/", 
               Style["T", Italic], " = ", 
               Dynamic[
                
                N[($CellContext`tauSliderValue$$ - 
                  1)/$CellContext`dynMeshSize$$]]}], 10], 
            Row[{
              Dynamic[
               Manipulator[
                
                Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {
                1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                ContinuousAction -> True, Appearance -> "Open", 
                AppearanceElements -> {
                 "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                  "FasterSlowerButtons", "DirectionButton"}]]}], 
            Style[
             Row[{
               Text["oscillation scale factor:"]}], 10], 
            Style[
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
            Style[
             Row[{
               Text["angular frequency \[Omega]("], 
               Style["q", Italic], 
               Text["), selection: "], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
         "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
         Column[{
            Style[
             Row[{
               Text["number of mesh intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`freqMeshSize$$]}], 10], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}], "parameters" -> Grid[{{
             Style[
              Row[{
                Text["mass: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                  Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                   ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {0.25, 
                  Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
             Text["\n"], ""}, {
             Text[
              Style["coupling to neighboring: ", 10]], 
             Style[
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]], 10]}, {
             Style[
              Row[{
                Text["horizontal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 1], FontColor -> RGBColor[
                   Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                OverVector[
                 Style["a", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["vertical: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 2], FontColor -> RGBColor[0, 
                   Rational[2, 3], 0]], " || ", 
                OverVector[
                 Style["b", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 3], FontColor -> 
                 RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                " || (", 
                OverVector[
                 Style["b", Italic]], " + ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 4], FontColor -> RGBColor[0, 
                   Rational[2, 3], 
                   Rational[2, 3]]], " || (", 
                OverVector[
                 Style["b", Italic]], " - ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
             Text["\n"], ""}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Text["coupling from "], 
                  Dynamic[
                   $CellContext`massLabel[$CellContext`m1Sel$$]], 
                  Text[" to: "]}], 10]]], 
             Dynamic[
              Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
               Style[
                Dynamic[
                 $CellContext`massLabel[
                  First[
                   Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
               Blank[], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  DeleteCases[
                   
                   Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  $CellContext`kLable[5], ": "}], 10]]], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Dynamic[
                   Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
        Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], ImageSize -> {250, 350}]],
       Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 12}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 3}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 1}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = {
    456., {224., 232.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        12, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10}, $CellContext`rawNumberOfMasses$$ = 
        1, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
        3, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         Switch[$CellContext`tabNumber$$, $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], $CellContext`freqTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
            Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
          Blank[], 
          LocatorPane[
           Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                 Dimensions[#]] < 3, 
               
               Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[$CellContext`rawArrayOfMasses$$]]; 
              If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                  $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                
                While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[$CellContext`kArray$$, All, 1], All, 1]]; 
              If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                
                While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 1], 
               Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                 Part[$CellContext`u$$, 2], 
                 
                 Part[$CellContext`u$$, 
                  2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 2], 
               Part[$CellContext`u$$, 2]]; {
               Part[$CellContext`u$$, 1], 
               
               Part[$CellContext`u$$, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
             If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
             If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
             If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
             If[$CellContext`omegaIndex$$ > 
               2 $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
             ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
              2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
             True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
           $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
           LocatorAutoCreate -> True, ContinuousAction -> False]]]), 
      "Specifications" :> {
        TabView[{"dynamics" -> Column[{
             Dynamic[
              Row[{
                OverVector[
                 Style["q", Italic, 10]], " = ", 
                
                Module[{$CellContext`qm$}, $CellContext`qm$ = 
                  ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                 Slider2D[
                   
                   Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False,
                    ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
                Style[" 2 \[Pi] ", 10], 
                Style[
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
             Style[
              Row[{
                Text["number of time intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`dynMeshSize$$]}], 10], 
             Style[
              Row[{
                Text["time, normalized to one period, "], 
                Style["t", Italic], "/", 
                Style["T", Italic], " = ", 
                Dynamic[
                 
                 N[($CellContext`tauSliderValue$$ - 
                   1)/$CellContext`dynMeshSize$$]]}], 10], 
             Row[{
               Dynamic[
                Manipulator[
                 
                 Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {
                 1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                 ContinuousAction -> True, Appearance -> "Open", 
                 AppearanceElements -> {
                  "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                   "FasterSlowerButtons", "DirectionButton"}]]}], 
             Style[
              Row[{
                Text["oscillation scale factor:"]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
             Style[
              Row[{
                Text["angular frequency \[Omega]("], 
                Style["q", Italic], 
                Text["), selection: "], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
          "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
          Column[{
             Style[
              Row[{
                Text["number of mesh intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`freqMeshSize$$]}], 10], 
             LocatorPane[
              Dynamic[$CellContext`qPlaneLoc$$], 
              Dynamic[
               (Graphics[{
                 Lighter[Gray], 
                 Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                 Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
              ContinuousAction -> False]}], "parameters" -> Grid[{{
              Style[
               Row[{
                 Text["mass: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                   Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                   Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
              Text["\n"], ""}, {
              Text[
               Style["coupling to neighboring: ", 10]], 
              Style[
               Dynamic[
                If[$CellContext`rawNumberOfMasses$$ > 1, 
                 SetterBar[
                  
                  Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   Range[$CellContext`rawNumberOfMasses$$]]], 
                 $CellContext`massLabel[1]]], 10]}, {
              Style[
               Row[{
                 Text["horizontal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 1], FontColor -> RGBColor[
                    Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                 OverVector[
                  Style["a", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["vertical: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 2], FontColor -> RGBColor[0, 
                    Rational[2, 3], 0]], " || ", 
                 OverVector[
                  Style["b", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 3], FontColor -> 
                  RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                 " || (", 
                 OverVector[
                  Style["b", Italic]], " + ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 4], FontColor -> RGBColor[0, 
                    Rational[2, 3], 
                    Rational[2, 3]]], " || (", 
                 OverVector[
                  Style["b", Italic]], " - ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
              Text["\n"], ""}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Text["coupling from "], 
                   Dynamic[
                    $CellContext`massLabel[$CellContext`m1Sel$$]], 
                   Text[" to: "]}], 10]]], 
              Dynamic[
               Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
                Style[
                 Dynamic[
                  $CellContext`massLabel[
                   First[
                    Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
                Blank[], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   DeleteCases[
                    
                    Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   $CellContext`kLable[5], ": "}], 10]]], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Dynamic[
                    Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
         Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
         ImageSize -> {250, 350}], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 12}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10}}, 0, ControlType -> 
         None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{856., {262., 269.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, $CellContext`res,
           $CellContext`epsilon, $CellContext`m, $CellContext`mScalarArray, \
$CellContext`numberOfMasses}, $CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -(Part[$CellContext`qMax, 1]/2), Part[$CellContext`qMax, 1]/
               2, Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -(
                Part[$CellContext`qMax, 2]/2), Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}, PerformanceGoal -> 
           "Quality"]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {342., 
        342.}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, \
$CellContext`n$]/($CellContext`glConstMMax 500)]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               Part[#, 3], 
               FE`glConstSpringColorsByN$$474]]& , $CellContext`cN$]; 
         If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                Part[#, 3], 
                FE`glConstSpringColorsByN$$474]]& , $CellContext`cOrigin$]], 
           Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                  Style["a", Italic]], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                  Style["b", Italic]], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], Attributes[$CellContext`uLoc$] = {Temporary}, 
       Attributes[$CellContext`ld$] = {Temporary}, 
       Attributes[$CellContext`cd$] = {Temporary}, 
       Attributes[$CellContext`m1Ind$] = {Temporary}, 
       Attributes[$CellContext`m2Ind$] = {Temporary}, 
       Attributes[$CellContext`moInd$] = {Temporary}, 
       Attributes[$CellContext`aLoc$] = {Temporary}, 
       Attributes[$CellContext`bLoc$] = {Temporary}, 
       Attributes[$CellContext`mLoc$] = {Temporary}, 
       Attributes[$CellContext`pointsList$] = {Temporary}, 
       Attributes[$CellContext`latticeBasis$] = {Temporary}, 
       Attributes[$CellContext`reciprocalBasis$] = {Temporary}, 
       Attributes[$CellContext`pointsDataTable$] = {Temporary}, 
       Attributes[$CellContext`numberLatticeLinesToDisplay$] = {Temporary}, 
       Attributes[$CellContext`lines$] = {Temporary}, 
       Attributes[$CellContext`cOrigin$] = {Temporary}, 
       Attributes[$CellContext`cN$] = {Temporary}, 
       Attributes[$CellContext`g$] = {Temporary}, 
       Attributes[$CellContext`mScalarArray$] = {Temporary}, 
       Attributes[$CellContext`numberOfMasses$] = {Temporary}, 
       Attributes[$CellContext`scaleLoc$] = {Temporary}, 
       Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
       Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, FE`glConstSpringColorsByN$$474 = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 
       7.6000000000000005`, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]], \
$CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6055229213532424`*^9, {3.6055233758382373`*^9, 3.605523392246176*^9}, {
   3.605523656985318*^9, 3.605523754074871*^9}, {3.605524067847818*^9, 
   3.6055240751742373`*^9}, 3.605524144345194*^9, 3.6055242676772475`*^9, 
   3.6055243639877567`*^9, 3.6055245164274755`*^9, 3.605524593683894*^9, {
   3.6055246502131276`*^9, 3.605524675557577*^9}, 3.605524914592249*^9, {
   3.605524950877324*^9, 3.605525024352527*^9}, {3.6055250950575714`*^9, 
   3.6055251192499547`*^9}, {3.6055252062219296`*^9, 3.605525226185071*^9}, 
   3.6055252985342093`*^9, {3.6055253708163433`*^9, 3.605525397274857*^9}, {
   3.605525442034417*^9, 3.605525469464986*^9}, {3.6055255165876813`*^9, 
   3.6055255276503143`*^9}, {3.6055256033916464`*^9, 3.6055257473548803`*^9}, 
   3.6055258023860283`*^9, {3.6055262533808236`*^9, 3.605526293781134*^9}},
 CellID->216361978],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    True, $CellContext`couplingData$$ = {{{{
       1, 3, {0, 0}, 0.635, 0.4995250000000002, {0.010000000000000009`, 
        0.7749999999999999}, {0.6800000000000002, 1.}, {{0.8986537210349832, 
        0.3017866973624944}, {0.3017866973624944, 0.1013462789650168}}}, {
       1, 2, {0, 0}, 0.25, 1.3865690000000002`, {0.010000000000000009`, 
        0.7749999999999999}, {0.798, 1.65}, {{0.44782769555644186`, 
        0.4972706010303129}, {0.4972706010303129, 0.5521723044435581}}}}, {{
       2, 3, {0, 0}, 0.935, 0.43642399999999987`, {0.798, 1.65}, {
        0.6800000000000002, 1.}, {{0.031904753175810624`, 
        0.17574652173116037`}, {0.17574652173116037`, 0.9680952468241893}}}, {
       2, 1, {0, 0}, 0.25, 1.3865690000000002`, {0.010000000000000009`, 
        0.7749999999999999}, {0.798, 1.65}, {{0.44782769555644186`, 
        0.4972706010303129}, {0.4972706010303129, 0.5521723044435581}}}}, {{
       3, 2, {0, 0}, 0.935, 0.43642399999999987`, {0.798, 1.65}, {
        0.6800000000000002, 1.}, {{0.031904753175810624`, 
        0.17574652173116037`}, {0.17574652173116037`, 0.9680952468241893}}}, {
       3, 1, {0, 0}, 0.635, 0.4995250000000002, {0.010000000000000009`, 
        0.7749999999999999}, {0.6800000000000002, 1.}, {{0.8986537210349832, 
        0.3017866973624944}, {0.3017866973624944, 0.1013462789650168}}}}}, {{{
       1, 2, {0, -1}, 0.25, 0.45593599999999973`, {0.010000000000000009`, 
        0.7749999999999999}, {-0.5339999999999998, 0.375}, {{
        0.6490735541830431, 0.47725996631106116`}, {0.47725996631106116`, 
        0.35092644581695676`}}}, {
       1, 3, {1, -1}, 0.25, 1.041223999999999, {0.010000000000000009`, 
        0.7749999999999999}, {-1.0079999999999996`, 0.7050000000000001}, {{
        0.9952940001382988, 0.06843868370302632}, {0.06843868370302632, 
        0.004705999861701211}}}, {
       1, 1, {1, 0}, 0.25, 1.0871359999999999`, {0.010000000000000009`, 
        0.7749999999999999}, {-0.34599999999999986`, 1.755}, {{
        0.11657787066199622`, -0.32091661024931556`}, {-0.32091661024931556`, 
        0.8834221293380038}}}, {
       1, 1, {-1, 0}, 0.25, 1.0871359999999999`, {0.010000000000000009`, 
        0.7749999999999999}, {0.3659999999999999, -0.20500000000000007`}, {{
        0.11657787066199622`, -0.32091661024931556`}, {-0.32091661024931556`, 
        0.8834221293380038}}}, {
       1, 2, {1, -1}, 0.25, 1.1463999999999994`, {0.010000000000000009`, 
        0.7749999999999999}, {-0.8899999999999997, 1.355}, {{
        0.7065596650383809, -0.4553384508025124}, {-0.4553384508025124, 
        0.2934403349616192}}}, {
       1, 2, {-1, 0}, 0.25, 1.3197609999999997`, {0.010000000000000009`, 
        0.7749999999999999}, {1.154, 0.6699999999999999}, {{
        0.9916462147313035, -0.09101647949893957}, {-0.09101647949893957, 
        0.008353785268696377}}}, {
       1, 3, {0, -1}, 0.25, 1.5407439999999992`, {0.010000000000000009`, 
        0.7749999999999999}, {-0.6519999999999997, -0.2749999999999999}, {{
        0.2844366098456329, 0.45114568026875324`}, {0.45114568026875324`, 
        0.7155633901543671}}}, {
       1, 3, {1, 0}, 0.25, 1.5506210000000002`, {0.010000000000000009`, 
        0.7749999999999999}, {0.3240000000000003, 1.98}, {{
        0.06358484761911527, 0.24401191522622245`}, {0.24401191522622245`, 
        0.9364151523808847}}}, {
       1, 3, {-1, 0}, 0.25, 1.6227009999999997`, {0.010000000000000009`, 
        0.7749999999999999}, {1.036, 0.020000000000000018`}, {{
        0.6487184022195094, -0.47737075406991186`}, {-0.47737075406991186`, 
        0.3512815977804907}}}, {
       1, 2, {-1, -1}, 0.25, 1.9397439999999997`, {0.010000000000000009`, 
        0.7749999999999999}, {-0.17799999999999994`, -0.605}, {{
        0.01822096111651846, 0.13374960819572063`}, {0.13374960819572063`, 
        0.9817790388834814}}}, {
       1, 1, {1, -1}, 0.25, 2.936368999999999, {0.010000000000000009`, 
        0.7749999999999999}, {-1.6779999999999997`, 0.48}, {{
        0.9703630572315671, 0.1695835911630997}, {0.1695835911630997, 
        0.02963694276843271}}}, {
       1, 1, {-1, 1}, 0.25, 2.936368999999999, {0.010000000000000009`, 
        0.7749999999999999}, {1.6979999999999997`, 1.0699999999999998`}, {{
        0.9703630572315671, 0.1695835911630997}, {0.1695835911630997, 
        0.02963694276843271}}}, {
       1, 1, {0, 1}, 0.25, 3.3998489999999997`, {0.010000000000000009`, 
        0.7749999999999999}, {1.3419999999999999`, 2.05}, {{
        0.5218537646819019, 0.4995221846617305}, {0.4995221846617305, 
        0.4781462353180979}}}, {
       1, 1, {0, -1}, 0.25, 3.3998489999999997`, {0.010000000000000009`, 
        0.7749999999999999}, {-1.3219999999999998`, -0.5}, {{
        0.5218537646819019, 0.4995221846617305}, {0.4995221846617305, 
        0.4781462353180979}}}, {
       1, 2, {1, 0}, 0.25, 3.627649, {0.010000000000000009`, 
        0.7749999999999999}, {0.44200000000000017`, 2.63}, {{
        0.051444888962520946`, 0.2209034005219359}, {0.2209034005219359, 
        0.948555111037479}}}, {
       1, 3, {-1, -1}, 0.25, 4.214535999999999, {0.010000000000000009`, 
        0.7749999999999999}, {-0.2959999999999998, -1.255}, {{
        0.022217392377239135`, 0.14738989060717472`}, {0.14738989060717472`, 
        0.9777826076227608}}}, {
       1, 3, {-1, 1}, 0.25, 5.830563999999999, {0.010000000000000009`, 
        0.7749999999999999}, {2.368, 1.295}, {{0.9536236974673462, 
        0.21029869494614933`}, {0.21029869494614933`, 
        0.046376302532653804`}}}, {
       1, 1, {1, 1}, 0.25, 6.0376009999999996`, {0.010000000000000009`, 
        0.7749999999999999}, {0.986, 3.03}, {{0.15777392378197896`, 
        0.3645288915249616}, {0.3645288915249616, 0.842226076218021}}}, {
       1, 1, {-1, -1}, 0.25, 6.0376009999999996`, {0.010000000000000009`, 
        0.7749999999999999}, {-0.966, -1.48}, {{0.15777392378197896`, 
        0.3645288915249616}, {0.3645288915249616, 0.842226076218021}}}, {
       1, 3, {0, 1}, 0.25, 6.258003999999999, {0.010000000000000009`, 
        0.7749999999999999}, {2.012, 2.275}, {{0.6404604407411693, 
        0.4798654650907862}, {0.4798654650907862, 0.35953955925883085`}}}, {
       1, 2, {-1, 1}, 0.25, 7.499476, {0.010000000000000009`, 
        0.7749999999999999}, {2.4859999999999998`, 1.9449999999999998`}, {{
        0.8174672470449936, 0.3862829883047829}, {0.3862829883047829, 
        0.18253275295500646`}}}, {
       1, 3, {1, 1}, 0.25, 8.859716, {0.010000000000000009`, 
        0.7749999999999999}, {1.6560000000000001`, 3.255}, {{
        0.3058016758099244, 0.46074614581325185`}, {0.46074614581325185`, 
        0.6941983241900757}}}, {
       1, 2, {0, 1}, 0.25, 9.116900000000001, {0.010000000000000009`, 
        0.7749999999999999}, {2.13, 2.925}, {{0.49297458565959923`, 
        0.4999506411170463}, {0.4999506411170463, 0.5070254143404007}}}, {
       1, 2, {1, 1}, 0.25, 12.908596, {0.010000000000000009`, 
        0.7749999999999999}, {1.774, 3.905}, {{0.2410561148555583, 
        0.42772428542964713`}, {0.42772428542964713`, 
        0.7589438851444418}}}}, {{
       2, 3, {1, 0}, 0.25, 0.3335759999999998, {0.798, 1.65}, {
        0.3240000000000003, 1.98}, {{
        0.6735376645801853, -0.46891862723936983`}, {-0.46891862723936983`, 
        0.32646233541981473`}}}, {
       2, 1, {0, 1}, 0.25, 0.45593599999999973`, {0.798, 1.65}, {
        1.3419999999999999`, 2.05}, {{0.6490735541830431, 
        0.47725996631106116`}, {0.47725996631106116`, 
        0.35092644581695676`}}}, {
       2, 2, {1, 0}, 0.415, 1.0871359999999999`, {0.798, 1.65}, {
        0.44200000000000017`, 2.63}, {{
        0.11657787066199622`, -0.32091661024931556`}, {-0.32091661024931556`, 
        0.8834221293380038}}}, {
       2, 2, {-1, 0}, 0.415, 1.0871359999999999`, {0.798, 1.65}, {1.154, 
        0.6699999999999999}, {{
        0.11657787066199622`, -0.32091661024931556`}, {-0.32091661024931556`, 
        0.8834221293380038}}}, {
       2, 1, {-1, 1}, 0.25, 1.1463999999999994`, {0.798, 1.65}, {
        1.6979999999999997`, 1.0699999999999998`}, {{
        0.7065596650383809, -0.4553384508025124}, {-0.4553384508025124, 
        0.2934403349616192}}}, {
       2, 1, {1, 0}, 0.25, 1.3197609999999997`, {0.798, 
        1.65}, {-0.34599999999999986`, 1.755}, {{
        0.9916462147313035, -0.09101647949893957}, {-0.09101647949893957, 
        0.008353785268696377}}}, {
       2, 3, {0, 1}, 0.25, 1.8644209999999999`, {0.798, 1.65}, {2.012, 
        2.275}, {{0.7904845525769125, 0.40696280507460497`}, {
        0.40696280507460497`, 0.2095154474230874}}}, {
       2, 1, {1, 1}, 0.25, 1.9397439999999997`, {0.798, 1.65}, {0.986, 
        3.03}, {{0.01822096111651846, 0.13374960819572063`}, {
        0.13374960819572063`, 0.9817790388834814}}}, {
       2, 3, {-1, 1}, 0.25, 2.5909249999999995`, {0.798, 1.65}, {2.368, 
        1.295}, {{
        0.9513590706021982, -0.2151162229705607}, {-0.2151162229705607, 
        0.04864092939780195}}}, {
       2, 3, {-1, 0}, 0.25, 2.7135439999999997`, {0.798, 1.65}, {1.036, 
        0.020000000000000018`}, {{
        0.0208745463497183, -0.14296433004218836`}, {-0.14296433004218836`, 
        0.9791254536502817}}}, {
       2, 2, {1, -1}, 0.635, 2.936368999999999, {0.798, 
        1.65}, {-0.8899999999999997, 1.355}, {{0.9703630572315671, 
        0.1695835911630997}, {0.1695835911630997, 0.02963694276843271}}}, {
       2, 2, {-1, 1}, 0.635, 2.936368999999999, {0.798, 1.65}, {
        2.4859999999999998`, 1.9449999999999998`}, {{0.9703630572315671, 
        0.1695835911630997}, {0.1695835911630997, 0.02963694276843271}}}, {
       2, 3, {1, 1}, 0.25, 3.312189, {0.798, 1.65}, {1.6560000000000001`, 
        3.255}, {{0.22225905586909447`, 0.4157643177970823}, {
        0.4157643177970823, 0.7777409441309056}}}, {
       2, 2, {0, 1}, 0.25, 3.3998489999999997`, {0.798, 1.65}, {2.13, 
        2.925}, {{0.5218537646819019, 0.4995221846617305}, {
        0.4995221846617305, 0.4781462353180979}}}, {
       2, 2, {0, -1}, 0.25, 3.3998489999999997`, {0.798, 
        1.65}, {-0.5339999999999998, 0.375}, {{0.5218537646819019, 
        0.4995221846617305}, {0.4995221846617305, 0.4781462353180979}}}, {
       2, 1, {-1, 0}, 0.25, 3.627649, {0.798, 1.65}, {
        0.3659999999999999, -0.20500000000000007`}, {{0.051444888962520946`, 
        0.2209034005219359}, {0.2209034005219359, 0.948555111037479}}}, {
       2, 3, {1, -1}, 0.25, 4.154660999999998, {0.798, 
        1.65}, {-1.0079999999999996`, 0.7050000000000001}, {{
        0.785054665109861, 0.41078441779004354`}, {0.41078441779004354`, 
        0.2149453348901391}}}, {
       2, 3, {0, -1}, 0.25, 5.808124999999999, {0.798, 
        1.65}, {-0.6519999999999997, -0.2749999999999999}, {{
        0.3619928978801248, 0.48057677822016576`}, {0.48057677822016576`, 
        0.6380071021198753}}}, {
       2, 2, {1, 1}, 0.375, 6.0376009999999996`, {0.798, 1.65}, {1.774, 
        3.905}, {{0.15777392378197896`, 0.3645288915249616}, {
        0.3645288915249616, 0.842226076218021}}}, {
       2, 2, {-1, -1}, 0.375, 6.0376009999999996`, {0.798, 
        1.65}, {-0.17799999999999994`, -0.605}, {{0.15777392378197896`, 
        0.3645288915249616}, {0.3645288915249616, 0.842226076218021}}}, {
       2, 1, {1, -1}, 0.25, 7.499476, {0.798, 1.65}, {-1.6779999999999997`, 
        0.48}, {{0.8174672470449936, 0.3862829883047829}, {0.3862829883047829,
         0.18253275295500646`}}}, {
       2, 1, {0, -1}, 0.25, 9.116900000000001, {0.798, 
        1.65}, {-1.3219999999999998`, -0.5}, {{0.49297458565959923`, 
        0.4999506411170463}, {0.4999506411170463, 0.5070254143404007}}}, {
       2, 3, {-1, -1}, 0.25, 9.635860999999998, {0.798, 
        1.65}, {-0.2959999999999998, -1.255}, {{0.12420644091897963`, 
        0.32981692035615706`}, {0.32981692035615706`, 0.8757935590810204}}}, {
       2, 1, {-1, -1}, 0.25, 12.908596, {0.798, 1.65}, {-0.966, -1.48}, {{
        0.2410561148555583, 0.42772428542964713`}, {0.42772428542964713`, 
        0.7589438851444418}}}}, {{
       3, 2, {-1, 0}, 0.54, 0.3335759999999998, {0.6800000000000002, 1.}, {
        1.154, 0.6699999999999999}, {{
        0.6735376645801853, -0.46891862723936983`}, {-0.46891862723936983`, 
        0.32646233541981473`}}}, {
       3, 1, {-1, 1}, 0.385, 1.041223999999999, {0.6800000000000002, 1.}, {
        1.6979999999999997`, 1.0699999999999998`}, {{0.9952940001382988, 
        0.06843868370302632}, {0.06843868370302632, 0.004705999861701211}}}, {
       3, 3, {1, 0}, 0.25, 1.0871359999999999`, {0.6800000000000002, 1.}, {
        0.3240000000000003, 1.98}, {{
        0.11657787066199622`, -0.32091661024931556`}, {-0.32091661024931556`, 
        0.8834221293380038}}}, {
       3, 3, {-1, 0}, 0.25, 1.0871359999999999`, {0.6800000000000002, 1.}, {
        1.036, 0.020000000000000018`}, {{
        0.11657787066199622`, -0.32091661024931556`}, {-0.32091661024931556`, 
        0.8834221293380038}}}, {
       3, 1, {0, 1}, 0.6250000000000001, 1.5407439999999992`, {
        0.6800000000000002, 1.}, {1.3419999999999999`, 2.05}, {{
        0.2844366098456329, 0.45114568026875324`}, {0.45114568026875324`, 
        0.7155633901543671}}}, {
       3, 1, {-1, 0}, 0.45, 1.5506210000000002`, {0.6800000000000002, 1.}, {
        0.3659999999999999, -0.20500000000000007`}, {{0.06358484761911527, 
        0.24401191522622245`}, {0.24401191522622245`, 0.9364151523808847}}}, {
       3, 1, {1, 0}, 0.45, 1.6227009999999997`, {0.6800000000000002, 
        1.}, {-0.34599999999999986`, 1.755}, {{
        0.6487184022195094, -0.47737075406991186`}, {-0.47737075406991186`, 
        0.3512815977804907}}}, {
       3, 2, {0, -1}, 0.55, 1.8644209999999999`, {0.6800000000000002, 
        1.}, {-0.5339999999999998, 0.375}, {{0.7904845525769125, 
        0.40696280507460497`}, {0.40696280507460497`, 0.2095154474230874}}}, {
       3, 2, {1, -1}, 0.25, 2.5909249999999995`, {0.6800000000000002, 
        1.}, {-0.8899999999999997, 1.355}, {{
        0.9513590706021982, -0.2151162229705607}, {-0.2151162229705607, 
        0.04864092939780195}}}, {
       3, 2, {1, 0}, 0.54, 2.7135439999999997`, {0.6800000000000002, 1.}, {
        0.44200000000000017`, 2.63}, {{
        0.0208745463497183, -0.14296433004218836`}, {-0.14296433004218836`, 
        0.9791254536502817}}}, {
       3, 3, {1, -1}, 0.25, 2.936368999999999, {0.6800000000000002, 
        1.}, {-1.0079999999999996`, 0.7050000000000001}, {{0.9703630572315671,
         0.1695835911630997}, {0.1695835911630997, 0.02963694276843271}}}, {
       3, 3, {-1, 1}, 0.25, 2.936368999999999, {0.6800000000000002, 1.}, {
        2.368, 1.295}, {{0.9703630572315671, 0.1695835911630997}, {
        0.1695835911630997, 0.02963694276843271}}}, {
       3, 2, {-1, -1}, 0.7050000000000001, 3.312189, {0.6800000000000002, 
        1.}, {-0.17799999999999994`, -0.605}, {{0.22225905586909447`, 
        0.4157643177970823}, {0.4157643177970823, 0.7777409441309056}}}, {
       3, 3, {0, 1}, 0.25, 3.3998489999999997`, {0.6800000000000002, 1.}, {
        2.012, 2.275}, {{0.5218537646819019, 0.4995221846617305}, {
        0.4995221846617305, 0.4781462353180979}}}, {
       3, 3, {0, -1}, 0.25, 3.3998489999999997`, {0.6800000000000002, 
        1.}, {-0.6519999999999997, -0.2749999999999999}, {{0.5218537646819019,
         0.4995221846617305}, {0.4995221846617305, 0.4781462353180979}}}, {
       3, 2, {-1, 1}, 0.25, 4.154660999999998, {0.6800000000000002, 1.}, {
        2.4859999999999998`, 1.9449999999999998`}, {{0.785054665109861, 
        0.41078441779004354`}, {0.41078441779004354`, 0.2149453348901391}}}, {
       3, 1, {1, 1}, 0.77, 4.214535999999999, {0.6800000000000002, 1.}, {
        0.986, 3.03}, {{0.022217392377239135`, 0.14738989060717472`}, {
        0.14738989060717472`, 0.9777826076227608}}}, {
       3, 2, {0, 1}, 0.55, 5.808124999999999, {0.6800000000000002, 1.}, {2.13,
         2.925}, {{0.3619928978801248, 0.48057677822016576`}, {
        0.48057677822016576`, 0.6380071021198753}}}, {
       3, 1, {1, -1}, 0.385, 5.830563999999999, {0.6800000000000002, 
        1.}, {-1.6779999999999997`, 0.48}, {{0.9536236974673462, 
        0.21029869494614933`}, {0.21029869494614933`, 
        0.046376302532653804`}}}, {
       3, 3, {1, 1}, 0.25, 6.0376009999999996`, {0.6800000000000002, 1.}, {
        1.6560000000000001`, 3.255}, {{0.15777392378197896`, 
        0.3645288915249616}, {0.3645288915249616, 0.842226076218021}}}, {
       3, 3, {-1, -1}, 0.25, 6.0376009999999996`, {0.6800000000000002, 
        1.}, {-0.2959999999999998, -1.255}, {{0.15777392378197896`, 
        0.3645288915249616}, {0.3645288915249616, 0.842226076218021}}}, {
       3, 1, {0, -1}, 0.6250000000000001, 6.258003999999999, {
        0.6800000000000002, 1.}, {-1.3219999999999998`, -0.5}, {{
        0.6404604407411693, 0.4798654650907862}, {0.4798654650907862, 
        0.35953955925883085`}}}, {
       3, 1, {-1, -1}, 0.77, 8.859716, {0.6800000000000002, 
        1.}, {-0.966, -1.48}, {{0.3058016758099244, 0.46074614581325185`}, {
        0.46074614581325185`, 0.6941983241900757}}}, {
       3, 2, {1, 1}, 0.7050000000000001, 9.635860999999998, {
        0.6800000000000002, 1.}, {1.774, 3.905}, {{0.12420644091897963`, 
        0.32981692035615706`}, {0.32981692035615706`, 
        0.8757935590810204}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.4130444789719152, 2.7569151748438447`*^-18], {Complex[
      0.5861464486009521, -2.825764865181982*^-17], Complex[
      0.8102051226649282, 0.]}}, {
      Complex[0.3140688520221368, 1.8976567723170987`*^-18], {Complex[
      0.8102051226649281, 0.], Complex[-0.5861464486009522, 
      2.8257648651819845`*^-17]}}}, $CellContext`dynMeshSize$$ = 
    14, $CellContext`dynPlot$$ = {CompressedData["
1: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
lQcK3tGRmWfk0f/KHaQZ
     "], {10}, 1, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 14}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 12, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyNvXdUFsnzPYxZURGzYs5xxZwWHVEw55zXhDmBukbMYsIMiopZV8SAAXMY
lJwfHnJUUVHECGYMv/0udXs+U737npd/OKdOn356qqp7qm7d6ao1ad5gu/wm
JiZ+RU1MCvz9f3C1Y9eCzxfy6e+W/OX7rFy1/Z7OVQfPS1Igtx5aYtmPxE9q
h0zvyfs/xQt5a/NOuT96ZKvPj9xJvGgTo+jnyVKPOMQ4RFlHsfHp6hMH+69m
nQ1MblSVHrPXZJTQ5Cb0d9N6ds77nnweo/JrZGRET4sYPr+y+PqaTePttHX2
zVuPEjMk0fpUmSS+fqWzu/Wx/oeThbxr3vMqq7x8PN3eJrPnylXWjl3W8nCn
ZGWeW/IDo3l+obfRP4xJvksShBx621elkPGdfZyQQ29P6k2pMzhfHJsnSzVu
HPv2cwM+Pl2NONDDtEE2lxvV+U0mf7dYq/0u9Lb8YfGiPXcl8fFKj8J+iRaO
KXx+ZVO1nxsOXkgVcujtSIHKB+NiU/n6FY8xpZfeeK/NA73NTimScbO3pB9l
+E6P+hdmJyqVGjQ9fP35dxV6Wxo7p83HmfFCDr11HJ1U8vkaTQ69BWz9Yt9r
WwKbJ0uNbjYsrGvzJDY+Xb1RJKpUxm8pTG5Up08K3lXFPE3IoTevWS2TTUc8
5OOVsetbRXU5x+XpysBqNxyHfNHmgd5qx0RFZtul8vUr3x3XuTUYlSzk0Fuv
eyd+PzhU0o8SW79wmd8N8OePQm+uiUM2TdinyaG3Tje6qi+uJgg59JY41KtG
yzNJbJ4sdfin9rnJV1LY+HR1nIvn6wVKGpMb1eIrpjoseabJobcDGysdO+Io
jVfcLYdWWlovlc+vVDSYF7yoJAs59NblaXxuhbGJfP3KoHHnPV980J4XenO8
n9j86G+SfpSnr+ze/PwUR/p8JfQ2qpRapl/nRCGH3hzPfZz3+lKSkENvZTvX
q/WgYAqbJ0u9dCPguqV7Chufrlaf/NxyQQ0uN6qmB4sc67pOmx96K1ra0e11
+QQ+Xqk55XK/5c6xfH7Fw7/LC6uwaCGH3sI31PtatVU0X79SaPQ5n98WaHLo
LchxRungYTFcP8rsEQ3n9CuCfZci9Ga3fc/v74smCzn0Zmboa/lrryaH3oY2
Xr/MpEwymydL/dL8wglj60Q2Pl1tctB6nZIby+RGNf/ChosPXIoScujNdcWU
mJ1OIXy8MsBl7NbIB/58fqVbzKTCEdMChBx6e9/0vnnyWj5PtuJUJNq56DCj
kENvnZuVn9rwRhzXj5Iw+sn4Cr6JCtYHve1u1j930aRkIYfePt563NPQOEnI
obfPqeEV9k2PZ/NkqYfLhrcdWCeajU9Xr5++0qZYzVAmN6rmYTVmnal1R8j/
6w964+OhNz4/9HboX9eTrfD1Q2+f2PNCb9AP6VOB3qBPyKE3pn8FemP2UqC3
D3r7KtAb8wcFemP+I9bL/A3jFeafmF9h/qxAbx/1/o/1K2y/KNAb21/Qj6Lf
j6+E3vT795XQG9vvQm/sfBB6Y+eJ0Bs7f4Te2Hkl9MbON6E3dh4KvbHzU+iN
nbdCb+x8FnpboT/Phd5w/g/Ne18IvT2j9wXk0NtKer9ADr0NpveRfp4sFe8v
/fh0tTK97/Ryo4r3I+T8fcrGK3j/svmV8fS+hhx6G0Hvd7Z+JZ7iAcihNyuK
H5h+FMQbFJ8IvSE+gRx6Y/GM0BuLf4TeaunjJaE3Fl8JvbF4TOiNxW9Cbyze
E3pj8aHQG4snhd5Y/Cn01kEfrwq9Ib6dmxcPd4HehlE8DDn0NpPiZ8iht7MU
b+vnyVKPUXyuH5+ubqZ4Xi83qj0p/occenOkfIGNVxwov2DzK2GUj0AOvcVS
/sLWrzylfAdy6G0v5UdMP8oYyqco/xJ6Q/4FOfTG8jWhN5bfCb3F6vNBoTeW
Pwq9sXxT6I3lp0JvLJ8VemP5r9Aby5eF3lh+LfTG8nGhN56/Q29j6hft7F1Z
y5eht5j0EsMaWURLef2Q8BOdsp5EsXmy1Bl9lhW6MzlCyuuTzYrZnAj1l/L6
0ZXrOXY64CPl9fX7mVuM9/bh4xX3Oult1857IOX1S7xtYktX95Py+qRRS7b3
+cF/929/W769rnfpICmvv9PY8kvJOiFSXu87qMbLNq9Cpbx+SOagW/08Y6W8
/n5a9VFfBsVIef3cpV2uptWNkvL6DGunW2M2h0l5/XzfFLsEu2Apr/8yKaVK
xeAgKa/P8T1h13eiNF7ZM2vRQZ9pIVJeX3LJZ3f3a6FSXt/3c6p1DdtwKa9/
fbdK36yvEVJe/9b9y5fXwwxSXl91aOK3IuaIf7S8voj5xf5zgmOEHHqb4FQ2
9kCBaCGH3o5fcty5shmfJ0vNMpuzKzErUsrrJ0wa8+TN+ggpr/dbmHb1vH+4
lNc3Sg38YLYunI9Xjl43fZ1xjcvTFbeJF46OH6/ND73ZDb9Qqqo9X0+2UnWK
pYPPYoOU188/d+PA9uWSfpTOlax7JxiMUl5fvtr1m5kemhx6+/n94Lk+P6J4
XqzW/6PpoJEVotg8WWprO99651sZ2Ph0tcfoQ05TQyKY3Kh+KpNWvveccCmv
H1Op6DujXZiU1/9Q/EPP+4RKeX1cG9+jU7dpcujte88H3/dV5PP8HYdkvzk9
o5q2Hujtzx3thkysyp8rV6mdUn6aZbyWz0JviaFng7sujRRy6C3XYvCs0/si
hBx629k0a0OXGuFsniz13bIVk5eMDJXy+ksuPp+WrAuW8vqDsevijkQESnn9
xKMW6/Z1C+DjlfI7zmX8Fe0n5fVOZX4/3KSFJoferBfHrVxzi8+TreR0r+Zk
aamtH3rreq/pov0ORq4fZfJ9n7N2Q7AftbxeWbLCelWtUCGH3gpl1BvknxQk
5fXjnNvNjK8ZwObJUuet9Fpj29RXyuvDauW/fm+Yj5TXdy2bf+iC4nekvH5c
3YoFXWfckPL6Y1f8RkeaXpXy+irmw8Yu8rsn5fUNO207Hz5TWr9ytWLhY44t
wqS8/u3sx+0ddkRy/SjDV41p7zQwSsrrCzwacrmfU5iU128rab9/Q2aQlNc7
VijU88BNPymvP1swdtbqIj5SXn/3wOsKrolXpby+kFv9CQvr/vX/O6/n46E3
Pj/0du5f15Ot8PVDb7vY80Jv0A/P66FPnte/0utf5AvMXiJfaKS3r8gXmD+I
fIH5j1gv8zeRLzD/FPkC82eRL8zX+7/IF9h+EfkC218iX9DvRy2v1+9fLa+3
1u93oTd2Pgi9ddOfJ0Jv7PwRemPnldAbO9+E3th5KPTGzk+htzf681bojZ3P
Qm/f9Oe50BvOf57X433B83q8X3hej/cRz+t/0vuL5/Xx9L7jeT3ejzyvx/uU
5/Vf6P3L83q8r3le34be7zyvRzzA8/pfFD/wvL4CxRs8r0d8wvP6efp4RuiN
xT9CbyxeEnpj8ZXQG4vHhN5Y/Cb0xuI9oTcWHwq9vdTHk0JvLP4UemPxqtAb
4lue11ejeJjn9YifeV7/luJtntf3ofic5/VmFM/zvN6F4n+e13+kfIHn9bmU
X/C83oHyEZ7XI3/heT3yHZ7XIz/ieT3yKZ7XI//ieT3L14TeWH4n9JaozweF
3lj+KPTG8k2hN5afCr2xfFbojeW/Qm/T9fmy0BvLr4XeWD6u4SGUv3t8DVtl
/iW/T+/ABpUde3xTBy8p3qnDyAQh77xu5AHHqx/Vs9+zo49mxAo59GlSyv6T
RXSc0u+f+Z8Jf37Uv1GDI3WSxHjoeYrNN0Oj3do8zZXNVVbWea+W6dDls32U
th7of8PajgPnvtHkPT4t6PCjdqa698HjS47nY9j86Wq0eZnCtWy1+UeneC7+
/uOh+tLf/EVc+1g23qhOdjiVGj4lTsjz9Byq5revd8twRZPDjqZfnqxtqSQo
Pf953ljxvPPbrp01uEay8jP2S88RXU1onV/VTUtuFljwJo49V65qTP9t1rRP
mp7b/7Oey0rK3TsdNuUkiHmg5xe33r7N+hon5B0vn7z1Y+cH1azLETf3+3H8
uZQPSYVHTJ2i6T/PH+KUPQ4L/Ju009YJu8SMvBDSr0e8kI/9R29v1dGeKYtD
KiVwPSsFCh7p3rdqipDnreepUiXrw4dDgSliHthxcHLCuGpNtefKW0+G6he4
99ebxolM/3/HjRWDbUyfafMP7djtxnfv10pgoxPuH3qksvWnq10HldhWeGei
kOfNk6y6VLZwMhkp+aESPqtagTR3bf72j98lOc7OUQ43d9zQ/FIKm9+oZnWv
0KNKL01vlv/IH6jvj74MuzQwhen5k9KidNt97xckC3mfvP2l1HS7EDi9ZJKY
B37lUu+IfaMPKdxPlIkFDjV6+ehv/UzpVdeqcq7al/ZpY7MnFS/fFfUC5B2i
Xq/Xf646c0bNTSnvNft2yFu/ktt+eVKZl6lifvjbLfvWy55HaPNzPgDGt83T
m/q0Qh9b+30C51e7/Md64J+D/JfHni+Xxu2lhJa+1+T6LW098E/TzlMPdSsn
6iBCnkB1B4wfkucn6tAbTY6t7C/qEWorGg/eAvMfZXa15DWLh6SxfZehLN45
vUT5aWlifvjzlZpmlRpFafNDPozqIxjfIW9fqH8UOLtl8gBRN0FeKfgSej1k
KY9nLbr69JDm52Py9qPybJ/9ydgmXD/p6uOZPTb2upzC9JOujqU6DsZ3yjsH
1GcX7nu8ryLqO2pLGg+eBjsfFOPskKLz62nrtMo7f5TW523Vd4OS2XqMapTH
u2AH2zS2Ho3vgfH18s49NWDery5/dXwoxluy8fpz45MyJjx2p+eAJH7eKsfy
FVmxbJu2X7C/PLPPlrhYU5sfctTF2H5R9o4Z4b7wcIJiEvd/8ndqL9p3u78+
/NGqaiLzh1x19fAGpuZ/xjN/0Hg1GD887/2iNPVvusFtAl+PtxXWg9/Fvpv9
Nqjbq5ZJQm5F72WXCk8P3vNK4vpXfvPKTd9u+pDrXzlE9UGM/yPv/ag8qfXH
U/d1mr06AD+n8fhd7Ds/38CaaeeThdyS3uN1m3ru29Q8hfunUqB3/yONTbk/
pCuVqI6J8T3z3u9KzT2Pq05K0fy5LRuP38W+s+h5IsjieIqQ21CccMhL8Tcp
pD0v9lfjkdFJyydL+1GxpnorxrfIey5l276R9k8Spf0uxuv1k67OtRz5x4LT
2np60r6bMKr5h/4OfL/8vb8+lkytuDqJn28K6sIY347eU6lm++/Z/s/5Rn6i
oL6sX49R7Tvkj/KGg5rerCnOsYwr/jhxjbYe7K8KyvslKSEJ/P0i5mfvI2VV
ydujXE5r/t+N8anwu9h3Xm9OWCR5SftIGVWperFX+6V9JPhXI/LiTLU7xVf2
h/yGzUtNYv6Qqz63rvtuV0wCf14l/+utk/yC4sU82F+2nY8N+LNuspB3oPiq
dJEOHo/Ck7k+lfzxo31uOcRz+yo1f/Va3vOrtk7sl9beMf0mbtXmH0nx1Tr7
epUrxfP505XuQa29Kp+JFfJOFF8N3FZ/TqvmsWIe+H/cwlu/rXmRJOQ2FF+9
a7T+0PU+mn/Cz2dXMy4dczeG719lr9XiUtNfx7D1p6sNVrmMGlUyUch7UnxV
9WDdMtZKAj8flKQDTZe779Hm70B++/TK9bEhE/n8RnVzkUrOcy00vVlTfOX1
yn2D7ZNoMQ/88Np228R7xWP5+ay8u1Suerq5Zl/42/nTI/IdPGfkfqKE3Fkc
3qFAvDI2L55Xu9XzGeX487Pq1aBfespm8Kz87vRl/Cu9/nPVNMp32PqV9oOy
kx9PixLzC/6M6eVFOb9r80MOXhPGK3TObyn7WyO7rUlifFvyqy/Ej2L6VBqO
uLj5fVsDt5dS97l9wxYTDGJ+Udfet7fWXw20+Vuz+TF+EMVX7av+6eN7P0GM
b/n/uZ50xWDpkFXHJFLIu1F89eHt8O8FpkWI+eHPJzMXFXW4GC/mh/wo8cQw
vg+d81crL611pE+cGN+O/FYlvhl+F/5fz8y3i21HTT/jKL6yXuJ0st9orp90
dfSZBsHzH0Uz/aSrd2l+jP+dzvlvoeVM2pwxiPEtaPwtth7sl4CLav0qT41C
3oniK4+u1SOnD4tm6zGqzqdrPnI3i2DrMao1iHeH8VUovvo03Cus1oxAMf43
Gl+ZxuN3sb/yD1dvf3HSzpneFF/FPjiceethnJgf+2vpuD5HXj31FfOb6P4u
W7H9otRKLJTRwk7LoxFfPcyelFgwNZH5Q66K/FrvD9p+ZM+r/MfzKnhe/C72
3ZxBQeONLvFCjviq6ehuZWyexnH9Kz7TM2MHxvly/SsVmP7JH5QGo7I/VrMI
5P6gXCV/wO9i39W9O8jy1f5oIR9J++6W4XP8vL2R3D+V6sXaGVNcA7l/ivkx
vhfFV8dDf+yv7xnC94vgZ+rxjSx1y6zP08IWhAs54qtTNA/mx/5aReP152eW
cpDt34GU15+h52LnifKBzhO9ftLV2vS8kCO+akJ6ZuebUpP0yc435SM737rk
2V2B3dl5K/io+vUY1VvkD0JvtO/ekB9ifuyvWeRvmB/yj+z870fvNewLjLdh
PFj8LnbcNNqPbB8pAaV+2r5pnMT3kbKL9hFwPMRX2O8M71IDaR72vAqeF/Ng
fxWk8wRyxFd/0fnG9KmspPON2Vf5TOcq5sF+8afzE/LxFF+d6f79QRk/I/cf
ZSid55B3o33hSe8RPZ6Zpdam9wXknSm+yqT3F+YRfGZ6f0E+nPy8Db039etP
V/3o/Qj5UIqvqtH7mp0PihW9ryHvRH67keIE/fxGtSbFA5A3oPiqJcUnmEfw
+Sk+gbxHXlykIC7CPPC3vyi+yv0nj34ncNFMisMHsjrRXsqLMZ78XEX8hvE2
jDfLcGa1Dr1H2HMpf1HciPnhh94UN2J+yFfQ/BjfhnCtdIpXMb4zG8/0rKyj
OJbZUalMcTLmh9/GUZyM+SEfSHkfxiPuOrd847Mdk7XxLWj8ABrP/EqpTXE7
5Ii7ioaEZNb2TGL2ylKnUV6gt1eWakV5LsYj7ho38tFt67aaPjuQP5ejPB2/
i31hpDwFcsRdaykP0usnXbWmPEivn3S1PM2P8R3p/K9K+RfGW9L4Cmw92Eet
KC+DHHGXOeV9+vUY1e9xeXmffj1G1Y1wEowfR/l17qu8fBPj83aL/x1Xwnnw
u9h3yEMhR9yFPBfzY995Uh6tn9/EZC/NfzIvvxb7DjgV5Ii7kL+z/asiP2L7
V/Db2fMqTQlPYM9r5cbWg31XnnAGyBF3Fa8/dd+F73y//H2OE47B9K8UJZwQ
4ycRrjWy0cbVHwwp2v6l8aY0Hr+LfWcgHAZyxF2zrm3qfrFYCvdPZQ7hPMw/
FeCoGN+b3i/uhEex/SLG6+2VpTYgnApyxF3VCR/D/NhfwMEwP+ftY/wAeh/d
fugzaH6NFH6eKMDV9fpJV/MRjgf5UKqvpRN+yM43xZ9wQna+ifkxHnHXHsIz
Mb4djY//1/UY1SaEc0Ku0L5rQvgq5sf+mkM4KuaHHHUK9j5SgPdivC37rgG/
i313hnDm73l4sqi3ov4CeS+Krw4TXs32qQocDPLBFF8BJ8c82EejCA+HHPFV
K8Lnmd4U4PPMjkrElD89QpJTxDzYF9GE/0MO/CqD6hHMT5R0qkdA3pnwqwlU
B9HrJ0tFvQNyxFdLqf6CeeDPV6n+AvkI8mfUffTrT1fnUH0H8iEUX4VTvYmd
A0pxqjdBLvArqnPp5zeqQ6ieBXljiq++U30N88DfUF9j57CCuh7mgV/to/rg
X3n1QeFXqCNDDvxq/oq6Xx16JHM/VF2priH0TPHSB6pjYh74lSXVMSFHve8o
1UmZHpQ3VCdlelb2Uh0W84jzluqwkA+m8zaY6rzMjooN1XkhpzqyYpjSP6v1
rgSmnyzVi+rIkLenelw1qlNjHvjVMKpTMz9XxlEdXL/+dLUw1cEht6I4xJXq
7GwfKXFUZ4ccdbRSVMfXz29Uv1AdH/KalFc+JJ6AXg+fFPAE2DmjgIeAeeBX
ZsRnYH6lTqC6M+Qj6f1emHgRbJ3KdOJRQD6BzpMs4l0wvSkxxNOAHHWfA8Tr
gBx22Uw8EMhbEl5djngjzK8UO+KZML9Vbg5fknNipbZO6O2nWR6PRfwu7cch
jA8DnsyV0ybHbArHSjwZO4suZRZdi5Z4MgF/WLgVLBgj8WRMa7sUmtgvXOLJ
TOs/Kv7Y0CiJJ7P65JFN1T0MEk+mh0238JxfYRJPps7HDPfXiSEST6Z33LRq
fVYFyTyZhAtn37cMlHgyO3c2855wN0DiyawbNyP5hW+AxJNRMu4ZzdsGSjyZ
5oMvp15eFirxZKYsfh59eRvn//x9Xi1RxjToHivxZFLH5CQmngyUeDK7Wlbe
F+wZLfFknv9q5G9VzijxZFz3D8x/aUaQxJMJ65SZOTQ2SOLJbCr/8PiFRlES
T8Zhde49u20GiSfTINA0a6khWOLJrL44YlTPniEST2a6x9dTBzpGSDyZOsZ3
/ettDJd4Mm93FBzWeEGoxJNxqLRlmc2XUIkn87yM+8nJH0MlnszZ9IO/8p8O
lXgyM+e0X5uqhEs8mZr7a35u5Rcu8WRSZ6VOn9QjVOLJjKl6v6TjnlCJJ1P+
2uoFHsUiJZ7M7KcNb08zN0g8mW2GNud/cwiVeDL9MqfedO5lkHgytsWbZEyp
ECPxZMBf5TyZ899Xr0/tECvxZMafrB407W+9cZ5M0ZMfTYs8MEo8GXxfw3ky
S202xLeYFCXxZH6y9cA/95fu4jekVJjEk3HNKH241OQwiSdTYNwZk0UNoySe
DHi8nCcz8Ue0Z5HOBokng/GcJ2N8ZTzsaBou8WQcmnZ/fy8qXOLJPLv39eHY
QgaJJ4PviThPZpLV1Lubf0RIPBmM5zyZhPoBHtXGREg8mUamz86vaxMp8WRG
P2oS1ndvhMSTAS+a82TqNTN7mVw4QuLJYDznyZTp1qnStQ+REk9mg4lLm/ip
BoknM2hsWriLV7jEk8H3U5wn4z6z5N1DjuESTwbjOU/G62RCr3svDBJPZm+S
e63Je6IknsynrH056u/hEk8GPHPOk/mt7bba899FSTyZy7MCP4X2NUg8mT7R
9jP6WsdIPBnwxjlPJrJUyOtjk/h6vK2wHs6Tubs7dOrkd5EST8bgW/Zm5gru
D0blxqibJ0d2kPSv/CS+PefJtKy8cFb2tXCJJ4PxnCeTb1fhbe6TIiSeTJFy
gz93fx8u8WQ89l45WtOTryddwXcBnCfTdXvOlWZLIiSeDMZznozBbFVqc/cw
iScTeNnmVU7rMIknU3xIjuntA9J+VH7Q9wucJzPTY7Gn081IiSeD8ZwnUyng
+ujWsSESTyao7Za1u7YFSzyZ+TOObXGsZpB4Mgn0nQXnyWTPtfd8cdQg8WTw
vQbnyXyYMnpq77bBEk+mX8ZT99kfgiSeTEu7hJ6+k6Mkngzm5zyZEtdWOt+a
bJR4Mnw92HeTfg4bXz8sUOLJtOv1Z+m5ZaIlngy+T+E8mcO9pg3fkxIm8WRu
tDJbdmWxQeLJzLAvkNniRoDEk1lrYjW+7c1QiSfTd/OmrPw/QiSezODb2Ude
bA+QeDJB7VvGVlgbIPFklo4t/aX40WCJJ+NRICnj9J0giScztkrq+I5FAySe
TP1HKVcDGgdIPJnL312zx3cNlHgyk/or26rE+0s8mcuzBlUPLB0k8WQWbQw4
0SszTOLJdB3zOO7gKz+JJ3Mt90F3yzJ+Ek/m1aVdZvdmhks8mZw7Lfq72EdI
PJlj87r6NH35QOLJZF7p0fRqvgcST2aHg9fs4tWMEk/m+cLDric3REs8mT6V
9+RvYXVf4smULbrXYmTrGIkns26K/YzT/sESTyY/fa/HeTJmlO9wnswp87He
7df7SDyZ517tJy9KCxLz8+8iOU+m7uXU7cuMgbxuq66k7w05T+bVCzMXs1Gq
xJPZs3VWyDuLBxJP5tkbz1pFA/0lngzm5zwZh6c2Vw7s8OV1bXXFv64nXekT
3rL+leD7Ek/Gc9XqCuPNeD03S/31sL1VuckPJJ4MvrvkPJlmg2v5Ta16X+LJ
+NL3m5wn0zqpxd7TuwMlnkyprrH7f4aFSDwZu/2dRxb4fFfiydyn+TlPps7H
O365K29JPBmVrQf7ZajXrj3DL4ZJPBnzZ/G1z9ly3o5RXTKxcPF64dclnkxp
+o6V82T6NKsw4F7Zq2I8eDJmNJ7zZMbfiujZqFqUxJN5e7vSlB0ljRJPpv+Y
0r6WAy7/B0/muMSTGV/TLPtjlFHiyTS/7zDOtbJB4skgv9b7g7YfOU/mP55X
wfNynkyZYYVKf34WLvFk+o7wtPqeGCbxZO6OqmTu6XyZ618pwfQPnsz01xHB
qztf5f4gvi/mPJkp8f4h64eESDwZx1ZNYlav5DyQdCWwZW7vu5vvcP9UfJh/
gifT8ViRZ32L+/P9ogSw9WDfFbasMe7boACJJ9OS5uE8mRI0Xn9+ZilebP+C
J7OKnoudJwrOH86T8aHn5TwZ6JnzZGaSPtn5pqxm5xvqNcPJ7uy8Vdb863qM
6jXyB86T6Up+yHkyFuRvmB/yPez8R72mNe0LjAdPxoXGc55MJ9qPnCeztsqO
Cc22Gfg+UgrRPuI8mSza75wns5rm4TwZPC/nyYyh84TzZErQ+cZ5MrPpfOM8
mep0rnKeDM5PzpNZ2ePNjl+LgiWezHg6zzlPphG9RzhPph29LzhP5i96f3Ge
zE96f3GezEJ6b3KeTE96P3KezA56X3OezFN6X3OeTG2KEzhPJo3iAc6TOULx
CefJvKD4hPNknCgu4jwZG4qvOE/mGsXhnCdTjvJizpPJpPiN82SWUB7BeTJj
6D3CeTKPKW7kPBnEjZwns5jm5zyZtxSvcp7MIrYe+O1BimM5T+YSxcmcJ4M4
mfNk4ijv4zyZenurbv59T5DEk4mm8Zwn8zvF7Zwns71Ye6uHIwIknsxFygs4
TyaX8lzOk8n4a1Bgx7eBEk8mhvJ0zpM5R3kK58mcpDyI82RGUB7EeTLRND/n
yfhS/sV5MtFsPdhHCykv4zyZXpT3cZ5MX8r7OE/mK+EknCczmfJNzpMZQTgP
58mspDyU82QOUp7LeTLjKI/mPJmRND/nyfQmnIrzZIpT/s55MsiPOE8G+Tjn
yfQiPIHzZPh6sO9aEM7AeTLn/yjaaOQjg8STeUc4BufJfCSckPNkrD9s7Pza
MUTiyQBX5DyZeYTDcJ7MGsd7iyyrRko8mXKE83CejA3hqJwn40t4FOfJ2NJ4
zpMxJZyK82S6ED7GeTKhhINxngxwZs6T8d3aaoFTyXCJJ1OXcHLOkzlNOB7n
yTQn/JDzZH7szMMJOU+mHs3PeTLhhGdynky9f13P/8VdeTgn58lEEL7KeTI3
CUflPBnUKThP5iLhvZwng/GcJ/ORcGbOk0H9hfNk9hFezXkywME4T+YQ4eSc
JwM8nPNknAif5zwZ4POcJ+Nk9t2rkBIh8WTKEf7PeTKNqR7BeTKoR3CezGSq
g3CeTCLVOzhPBvUXzpNB/YXzZCZR3YfzZGKovsN5Mvuo3sR5Mqg3cZ7MMqpz
cZ7MQapncZ7MH1Rf4zyZIlRf4zwZG6rrcZ7MTqoPcp4M6sicJ5Oofp+XvTxS
4sk0o7oG58mMpzom58lUpDom58nUpTop58k8pjop58l4UR2W82TmUh2W82QW
UJ2X82ReUp2X82SaZ57MTfAIk3gy76iOzHkya6lOzXkyM6hOzXky9lQH5zyZ
JlQH5zyZSKqzc54M6uycJ/OC6vicJ+NGdXzOk3lMPAHOk9lJPAHOkwEPgfNk
bIjPwHkyA6juzHkym4gXwXkyrsSj4DyZN8S74DyZfsTT4DyZesTr4DyZ7sQD
4TwZ8EY4TwY8E86TCdzTalyL41ESTwY8Fs6T8SY+TOU7Xl+3BhT0saH9ZT13
Rb66FcW9u0J+c0j8rkAXTQ6exk6/G9VPVYsTcvBeXFzym3xdF63M1987qkbR
/cDsHlepXwz82dgyZN+vlVpfmF50vpVOnXt3WT1NbkPvxzTbV+Myx/A+Mt5W
t1gfGdi92Z5PFXPstPtvsa+tNnmcjVbFPUU+qFPsOBzf9qK5poeBZEd2n7AP
7Fh3y7ReU37X+shgXzysl++vnABN3p3yUB8LrxIWvsmKBdkF63RfVv1Q0Rva
PbSwS1GX9i6ncrS+MLDL3aPey451iFPSR9+z6v+wgHiutLTal6zeJ4rxsNcf
nSftzTWN4/fESv1oYJdScc7dDqpxyhnidUA/FsTTw3jYq8bkYQVq3YrX1k/2
WjCyn5JRKFHZlGlWqdW1nyrm93l+ZePMc0lCD9BnhT+vH2neNIXdi+tttYL1
u4HeXL8Pq1c/vzYeenhR+rFlcvlU5THpB3ZxKZS5y2O+Nh7PZRZv02fmDa0P
DuzO++NgnX/Z7snn0zhV2UrPhec9l2+019TmqWLfwe7ep28VS+uv9c3Bekzd
nS07VNfWg/FTizX/1DY6SWnX7mUh10b5xPMePVIjaW8rre8M/MS0g7qv8Qqt
nw78xGRBpuJWROunA3/Y4r0jqMgnTQ5/4H12YK9VpbM7O17Q+tqIfdom3GBS
43/WQ3q4dbLOlPiJaUp7Wj/0FrD0vlmgmTYe9uV9efC8LTpfGZKzV5PDvnGG
RQ16D9bksGPBrZ0H396j9euBHdn98yrWs6HsiKmjU5KVNrRO6L/QvCItLGZr
eoC9ah8uO/PxcE2O8bNHWrVYl6Pdw4P1414R3HMLe+0x2Xip+1ytjw/stbXw
0nnbvLT+OLBXh7u79qY0kfrpSP19YK+Upmbvt6Xgvpp3Yh7cB4LxsGPrTUWb
/7lb6+8DO779Wabz2tA0pYr+3lrRH8eTnrclu5dDf8+wdo8K5NDPQdsNt9Yu
1/oHwb6Jq1pud2mprRP2reWa/0FwgDY/7KuwvkJYT4lfnzt7909QfpEe8Fy4
ZwPjYd9pO3zn2OzS+g3BviPCrB59riG+uxHPhe9ocB8v7Nu6kMfIQsO0fkCw
b89F24JGjEGfiGdCjnst7P85B7KFHqodeOxRfqrWPwh2vO0e7nSosdaHiNsF
cvjDuvYPBx3vnKI4/DN/upjnVXhML+eFos+I8Idyqxa/GD1Ik0Nvm788Hf/6
eaIyi+bB/FvTJ+1cfiJeGcDs0onsor8/2duqCOuLBH8YVcruUXwzra8T9PDU
5avF2HMxynDSG9aJ+y6gN9jxQUnfL1MHav2V4D+XPi599eGUdr801sn7K8F/
Pp8M2d5ocrTy8J/3SI7wh69TX68qXlf0YRG/+zzLdMbyp9o8GN+y9aiGjfPH
Kh2OT/X06Z0pnvf8aKNLs2UYnyL85+Sq8ZeXL9D6K8FPWji+iFk1VJPDjj/O
RhS8eiBJyOEPn1k/JtjrkM/YPieDtT5H0KdrkTY/Zsf9z3rI7nsyXuYU2mtQ
OtL6RfwzY//luxm8f5O3lQvr34Tn/WP74VQ1R7tfGvbt5f0wqH95TQ57zZ/5
reeuuYFCDnt9ZH2dsB6bWddCa5lr64FdnlgsXOrmpN2PDbvY3ez59MmyeMWc
rX83rV/kG2SXlPgVV28u0focwS5/hsV7XQlOEHLYZcLZ8PG2I+KEHHbh/ZVg
l709zhfwygwXctglJeDYx7lu2v3MsEvBxBHmSuWrShn9fcWiL1JxprdvJDfR
/XlbvZr+o/r9gMNWAocle5Wj+SGHvZ6w9cBeB9n6RRzFnhf2msT0A3stZvqE
vVJJ/1/q/99z3VGwTo/itne7Nbsv7luGvaaQfSGHvdLJHwYSXg05vn83/Wd8
mILnTemRv8wRa+3+ati3q97fhP5zWF8q2Hcu+XPnBnnrF/yoLLNq7ZcaxHjY
ne0LBXafRPuovP6+ZTWUzrF3pB/o+Vp2oW+nkjU9wO77WN8rEVfTfoccenCj
84HOYbHOOvRdfF3SG+xYcETJOqGrtH5YeN4j+vNHgZ98Yv2zsH6cby3yzh+h
Bw/9+Sl+l52TCvwH52pNpgd3nR5eCf9pQec25PCTDP05L/wB7wt2D7bUbwv+
wN5HQp9434n10POOoffjzLz3r9BPlv49Lp6rGOvPBftuofc45LAve+8LeyF+
gBz24n27sJ5b+vhE2KUHxT+Qwy6tKF7C/dXQ/0iKuyCH/qdTnAY59G9G8R67
T1vq2wX916F4EnLoP5niT7Ee0r87xasV9PdOi/5W1Zl+LpJ+9PeEa/Ew5LAL
4m3IYRfE55DDLojzIcfvDmd9wWCXtpRHnEJdhp6rif7+Q2GvzZSPQA577ab8
pW1e3tQF9kLe5PtwXXPbFZ/Fc31YvL9Eaj6tbxfGI2+CHPatQ3nWD8IDIcf3
s+3/OQe+Cv08vl/F2muz1l8M/uBE+V2l/7AX5PCHQpQ/Uj7YBfME6fNW4Scs
DxX6RN46R3/PtujnBf3ALsNDE3p/2qL1I4Of8H5n0OdNyq8hhx5KUT7+Ezgq
rTOMvqttTXqDffMdP1Rp/zFN//Crlfp8X/iVkfVNw/o3E57QGv5AejhOeEUg
PS/8Z+uq8JQmk7XfxXp+OejwCjG+GOEbpwnntGHf1W7Mw2GEfi4QDoP7yTHe
jnAVyOFXxQmHeZSHFwm5K+FFGA9/OEP4z9z/sC/kAk8jfKlSHi4k5qlIeBfG
w17Ar8T6SZ/Auwbl4Yrid+MIn6zC7BVF9tLfG6/haZBDbwsJr4McfgV87yHp
B+t8THgjxgs8jfBDyAWOyvrHwX8mED4J/eB5jxIuivHwE+CfkMNPgJfifnXY
Hbgr5LBvmh6nFXapo8d1hZ5Zn3Fh3+163Fjop6MeZxbP9ZselxZ24f3mYJdU
Pe4t7MJwcqF/hqsL/R9lfeig/72E50MOPe/S4/9Cz6gX8PrCwrrj57a8p+Ht
kF+70qdUidGaHPovO3JkL9NVRiGH/mfVeflmWrsoqb7wjPoU8PrCNNa3Dnb5
Ps5u4Zn3gVJ9oXK5fRPetfSV6gv9Mv446X+U97PztuL97GCXX+fPW9400frZ
wS6ms8sWDumuzQ+7RB3a1e2Rq9bnDnZJZn3uRH6UU/TXfmdt/bDLwOjxZhMt
gqX6wsrWZz+McA2R6gsXt+5+8KGJn1RfsDs261JJjxipvlDxnOXGWbeNUn2h
oPm49pldA6X6woA61quMsw1SfeEZ64sHu5SsU+T3m81CpPrCSqpv8vpC6z0p
PosrBkv1hXa/959b922QVF/oalG/smnhCKm+cGd0etb28cFSfYH33YPezubL
t71O/RCpvmCwb+verFSoVF8YsrDe8RXbw6T6QmrFFt07WYRJ9YV+rE8f1mnb
17nXDecIqb6wIyhyouu5MKm+UNV05+L+tcOk+kLG8sJHnhgjpfrCrZD5Sxeu
N0j1hS9FQlq4NEO/Hq2+EOKxbEGpRVpfP/hJPvegyyUqiz4yAo+q+Hxr9dGP
tH558Afe70/UtcMfbj+TpvXjg913Z7n37V9Pk0MPqRFuhQpfDZfqC8WnmDhe
r6jND/vy/oB43vz5vr15d0aTw77uzikBx02134Udw8bP/V7yhCaHHaeyvoFY
T/qw/fE5PQxSfcH3du9tHh80/cBe3YsudDr9VZNj/JTAA4UfG6Kk+gK+x+T1
hYL+6ZatGmp9BmGvMs2e/ozarPXdE/FMzcFO51O1foL8O19eXxhwLX7xiRaR
Un2hMH1HyesLh6916p9QResDCDsOcJned3aTcKm+8J76RvH6wiz6npHXF3gf
Q4FffYot9zlT61cI+2Z2tGlrelqTw75Hvz34nO2lyWHfH6y/IdYzMahOp48H
w6X6Ar5P5PUF+/X7ym4tr+kT9j1e2zKhXGiUVF8YRc/F6wstN77oambQ+h7C
vv4nDn9ZkBwu1Rf6EC+U1xcWp1/3dWoeJOaBHRuuHuC4/bz2u7AL758If+iy
/W3UjS/BUn0hf9AmD3Wu1j8R/lC/zfGpJc5ovwu99d105n7qrECpvlDmRs3a
cyr4SvUF9J3k9QXenxH+ML1sUMkTlv5CDj2EGxZ0nbHWT6ov4DtBXl9437J7
ha9XtH6U8J9rWRMrrPmf/o9Ypw3r8wj/KbanT8GCu0Ol+kJ28qgZtV9GifGC
V3CxmnulDQYhx/jiatTasJdGqb6QNmB9+NuzD6T6wp4tv4cvmB0s5KK+cPPC
uAhHDW+HHR9vKv/u8mR/IYc/zGV9IWGvD0vOz5hQXOCxQp+zmxSYuGSM1s8R
dt80oohPbu3bUn1hrc3XUhV/av0rYd+xrI+kOA8HVPZfna71kRT4wGPnMcef
35TqCyPaFJj7x0ltnbBXY9ZfEusp+7jByShFW4947z/IebX4UbiQwy5e02dN
ftXIINUXRtH6BZ5Pdmn84MyR64Zgqb5QsMztdzuiAqT6QtEyXw1lt/lK9QVP
1ucRdplwrWqRd1NvSPWFcQtWn3i+6KJUX/j5vmrPEQePSvWF+qQfXl+A3ET3
52317WElZ7sOm6T6gml23vyQw16T2Xpgr2ls/fjdC+x5YS9Tph/YqyjTJ+zV
jPTP6wtN1jcMqWU4J9UXLpB9eX1hIPkDry+UpO+GeH3hZ9ziNuuztT6VsG9p
vb8J/Tdg/TFh38Hkz7y+0Cen2O7BX4X/azinfl8I/CqK9hGvL6BfLa8vLLs4
r4LtcD8xD+w+nvXfFPgz7XdeX5hL5wOvL+ym74l4faHrStcwyxCtPoLn/aQ/
fwQeYs/6eGL9T+h84/WFRP35KX63pf6cFDiVC52rvL4wWacHrb5QjM5tXl9I
1Z/zwh8K0/uC1xe6sr6f8Adv/ftI6DOC3ne8voD3I68vmOjf4+K5eJ9Q2Lcf
vcd5fYG994W9rCl+4PWFt6x/KNbD4hNhF8Q/vL6AeInXF45R3MXrC/MpTuP1
hQkU7/H6Au8fCv0fo3iS1xdeUvzJ6wvlKV7l9YUplF/w+gLiZF5f4H1IYZdB
FG/z+sJRis95fWEgxfm8vsD7k8IunpRH8PpChP7eGGGvspSP8PpCIcpfeH3h
AeVNvL6wfoNbv9sOWp9QjJ9MeROvL9hSnsXrC/jugNcXzt9yX1H1qzY//AH5
Ha8v8L6o8IdQyh95faGEPm8VfsLyUKFP5K28voC+ory+0DHTbF6nCG2d8BPe
d1XgjZRf8/oC8nFeX8D9V7y+MCjeufozV03/op6oz/eFXzF8QKwfeAKvL3wj
vILXFx7kq1V+6EWtv62od+jxCjEe+AavLyTQ9wi8vrCbcBheXwCuwusLwGF4
fWE44UW8vtCd8B9eX+B9Y+FXwJd4fUElvIvXF6IIv+L1hXOEd/H6QhLhk7y+
AHvx+gLvSwu9dSC8jtcX2hG+x+sLRQlv5PUFc8IPeX0hk/Wxhf8MJHyS1xe8
CRfl9YVKhH/y+sJUwkt5fQG4K68vMJxW2GWiHtcVeub9bWFfgx43FvphOLN4
rp96XFrYhfe9Fe9rPe4t7FJVj5ML/ecbr8PVhf5nsn640P9swvN5faGcHv8X
eka9APgq9KmmPoodOCZW4Lri/tj2r9puvhEl8Grop9D7RH+nVdECZ4Z+TOje
VHq/CDzcvPfDly0uxom6A/S2lOplGA871ph+tJ9ZyXj4icC9o6nOZc/w3sNU
H/xF97ZhnXvoPl46t0We7kx1UguGZ16gunDbvPNW5O/5qZ5L7zWBV6P+60/z
Y/0jqO7sTDgz7PtkuLmtt1eacobwN+gZfTOrMPyzNtXT29F68FyTcm+qgQ3S
lAA8F+kffIDHhHsI3DKiVky+hATSf7Z4rrOrjYE7zieJ+fFcf9Yv3CfDTJsf
669SOt/1LsHJ5A85Yv0LDrV4dDwulfILDUdC38A59LtY/+WKo3qMmZiC95rI
9+8cufB0crdEoU/4bXRS3czuw+PJLpniuT7XTZ10IVDcry7wiu/Uj6A8w9nA
G8F47KPd1A+uBeYnfcZ1G1zWplU8PVes+F30B6nJ8IcDxHfKy+vDNP8hvlZ/
wsGg5+rE76qTl1cK/7lBvLKFhNdB/9XTx+abMQ3za3jRR+J3UX4t7FKT+G/1
GJ7wiXh0jWidsMsj4uMB54Rd0J+rLa0T+vEifiDwSdhry5fE0+9D45RylC9D
b29qT4p4bJ6kfKJ1cp5hWcpDoTcLJ/t7f5jHK8VonaJeVn3ThNn2QUpTmh96
q+Dc8kpYWozShdYJvRUqtvjc3S8hAn+AfgqT/BWtB/5QleYh/Yi4MT/9bh1a
D/SDdbbH8zL9NKD1QD/Qw1zKB6Ef6M2c5bngzdrTeDxvpdPPT29zNgLXFc9V
jvykOMvTP5Cf5PlhrIjT4M9P8va1WA/42IR/ijgtjfYFnSfCXuCHk5+L+BZ9
YehcEuufP63PvUV+cUpzmh/22l0hsUTolGTUL0T8H0l8v6c0D553049h1lut
EmlfyDyxubRO2LEK8f+BI8GO5vo+mMKO+aifZktaJ/T2ic4fOq+E3mLovPpO
34+L71b030cI++4n3lobivOhz4htDXPun0wQ64c+Xd7Wj1q0NhXns9BnkeWf
WjUZlEjxcI7QpwOdz8hfoDcLOs+f0Xj4f/hvVze8r5cs8g7obRG9F7Ae6M2T
3iOwL/RTgN47yLvxvOBfIZ/FOtE3AXkB1vmM3pvlWZyM76rmsDh5JcUVyGsw
f+SvkG/n78ejPiviKMQbyB+x/lIUtwxi8d5t4pMgroZdilJchHgYv1ub4qiB
LK47RrwRisdE/LZjo7Pvx1yNt4P1dKXvTHn8Vmz4xND3FtFS/OY+xmNi6eWB
Uvw26c3q96Ym/lL8toa+5+XxW5km6/bGzouR4rf3lI/w+O3d92odaycapPgt
g/IIHr/1pvyLx2+e9J04j998KA/l8VtDyrt5/DaQ8mUev+F7fx6/Ia/n8Vuh
Ht+CzCpFSPEb7nPm8RvwCh6/OT3vVN20Z4QUv60jvIXHbx0Xe1rUmhMlxW+D
r80sUKGFQYrfQg0d2jqVCpfit9wfjt+HOIVJ8ZtD7dgfL1+HS/Eb8Dcev73d
t7PZur6hUvwWvPRKunmIQYrfPN5/NV+1OUqK3/peTplQ7Va4FL9NoXtyePz2
hnA5Hr/9SfeU8vjtrp/dmsYv/KT4bT3dW8Xjt0mEJ/P4rQvh4Tx+20n4OY/f
lhJuz+O31HXDJvVtf1+K3+YQfs7jN2uqL/D4DXU0Hr/li8+rd/D4rRTVR3j8
1oHqLzx+a3XTpsvJlwYpfovZ3HXAtBGhUvzWmObh8dsV6wVdnOqGSPGbZYPE
9i0drkrxW6Oa02o9P+UvxW+exi+n97rdkeK3gyTn8Vt9mofHb/hdHr/doHXy
+K0jPReP3xJJDzx+a0F64/Eb6pI8fnOzXOZ2LzpEit8SyU94/IY6C4/fNpA/
8/jtPdW7efzmS/uCx2/vqP7O47fLVK/n8dv7aI9DXjZhUvxWfcCKyudeB0rx
G+r1PH5rVbjnyPMjQ6T47RXtdx6/LSR+BY/feuvvZ9bqL3Se8PitN50/PH7D
ecXjt956/omw72iqC/D47XWZkddr2Rqk+C16yACniUtCpfjtdmia9XCHCCl+
m0/nM4/fvtJ5zuO3O3EDe0X9bpDitxB6L/D4bRC9R3j8hvcOj9+Ab/P4Dff5
8PgN700evwHn5PHbJ4orePw2OM7n4sgioVL8hniDx29lKW7h8VtDwut4/Dad
4iIevx2lOIrHb8DlePxW+0L9QutrGKX4DTxe9PWAv9lvPHkjcmg865/yQe2s
9m64NCSW90NRN1CfINGvBHlf3xGKaxltPOxe1nPf02h3TS7qHYTX4X51/h29
vt+Nt1Vx6qOE/ggYf2N/zFLLD3FiPPZL1yi34/aZiWI8/HzfGttaJS5qzyv4
CV/WvNu6Lpn3v1AHU78qD8ZrrUL3ZkAOu5ynfliYR3yv7TwoYNm4RDEe/hM6
7MjWZ7HaeOjnzQKTLRlh2nqgTxfCFTEP7B5puPVofg9tPbB7k87jT8/9nqTp
mebHd0n6/i/eVq7UBw28RPjDmi3dzrkN1e5DELjBwMoFmwTHi3mg//qrckdM
+JUqxkP/EVN/5ORzFN8fifm30HdJP1mcHEo4J+TQf3ZcrR7dx6XxfgrqFepb
h/nxu+3pOynMA3uhLx7mgZ47uHXrOeWEJud4KeaHPFl3P4OJsO+Y/Ifjjnto
+oT+62T1dm+2T3z/Jd3bgHkED3zaXKfdbxJZPxFvK0/qhyj6TZBd6vRc3rRg
XOJ/3l+B3xX31dB3cKJ/Den/r9xOHdwupon5+b0TkMOOX79ZBi0omCzmxzxJ
9P2d6P9Cdrx+PWbB7lOpvC+Aij6bmEfks/R9H+aBHRtRH09xDz/pc0qfFxXH
JApcRdgruuDANccDtPXw+y6G/geeLPrU0PiS+u8TRVyH7xmFXcjuuKcCv4vx
b6tPPF07XLMX7N4hcfNcvxna/Pz+irH/gQ/r+1x4W12gPra4/5zfUyH6NdA8
ya8vG7NNtHngJ8CjMB7+kFLG8YrVJW087L523+vH7TfH8Xvv1VjqU4zx0PNs
6o+M8fxeCMjFPRVDnZdvapoo5oFdXAlXF89F+rdYllQ06WeM1r+G9B/7PaO5
/QFNDj3XtG3zrsYN3GftdwfzVKLv6PX9HbytzlGfboz/9/sE/p6H9Izv30U/
DtJz86FRl2dEavfPQ8/PKz0+O/piopBj/iovvy2vN1ObB/rHd9z6+/yfKuk7
nubsuRLB70tXT1BfdaxT3Pel+97f7w70f0B3P4DfHaxzMt0DgN+FfetRn3dx
DzzZ1698lW6Hb0cJOeYPi+i6K/aCZkfYd325E3atj2h9AXi9QOwLstcF51OJ
C+K1e/vxu7j3QPRzwf0/JbyMo1rFsf4C3laO4/ocefVU6zcBudVotcfFSzet
IIcdG5CfiPvqEeek5KZsG5Eg5sd4w6QmDa2LaPfhw44ZtE7MAz0/qtlmbqFh
2r3o8IdVhuwqK0JjxfyYp27mFZdx3bR7+wWf8EhEuaPuQfz+cHXTrM/TwhZo
9sV4N7K7uD+f7LuOjYf8EPMfwbcnPxH9F8guDWmdkMMf+tE68buYJ430ADn8
wZH0IPRP/hDO9Izx2KeYR3wfTfbCeH5/hbgnnH3nrr8P39tqFvkP7lWGvU6T
30KOeeaQH4r+C+Qnp8ifMR7+cD039UOFGM0fYPf7tL/EPe1kx0DaX+x+bLU2
7VOMF/d+0PmA8bBLPJ0nGA+7PKPzSvSzID1XpvNKPC/ZpRGde5DDH6rROYZ5
eP1Ifw+8t9VpOofFvdyk52g65yGHnqvROY95oOcK9L6AnNeVMI/4rvxZ715u
67R7qvG7Uyke0N/v/VTZe9Kr1r3kRH5/sjqN3oPs/mTViuIQyKH/GhQXQY71
mFJ8gt8V9Qt6/+J3oeeV9L6GHPP3+TLnStRaTT+wbxK99yHn9SyxL8i+bhRn
Qo7fjaf4UPR9IPsiDsF4yJEnCjvS/D+o/q6/n9zb6izFP7n/URfT3xPubbWP
6mLivmvyk/YUj2E85nlF+RTmh58MaRc59sUMrU837DJ662PP3gW0vuHwk8/l
D1+IctTsy++LwPziu2CKY9m9xKKvPebh90tgHvhDZdbXnt87ATm/dwK/Cz+5
RvE85hd8odrznW5GJws5/AT5wsn/uL9C3EtMfnKK8hGsB/Mgf8T88JO6lAf9
9R/3DOjvzfa24v3l+T0VkGOeFZSXiXvayR9qU34HOey4dPmHoiOHan234Q9j
KU88+R91SXY/sOjnjvGwlzflvxgPu+RQvozxsAvycfFcpP8GlL+L+3tJ/7yf
O/QPfABywccgfEB/j/Tf+4v1W4eeDYRjiHuPSZ/vCQ/BeIEnEH6C8dCb6Zjf
7hwyT+T394p+5RgPvaEvOcbjee0IF8J46G0/4UjCr0hvtoQ7YTz0AJxKf++x
t1VJ1h8cflKecDPI8VwVCGeDHOvn/bthl/ouNY+EHtB+F+uZz3A/+PPM2tPe
VR4dI+GB5mt6nmmWZZTwQFvWFxv+9rzN7uwmPYMlPDDMp9mo+8UDJTwQfa45
HgjeOMcD0f+a44Hfhq5u07lqjIQHnrdM+VC2YZCEB/7o/br5lmSDhAdm+fR6
WbxRsIQHon80xwPX0HfuHA/Evd8cD1zvELDU5l6YhAc+yPVY5WkMk/DAqjYD
bs+bEyrhgbyvNOxe7YtrzYvNIyQ88Fxp+4VXp0ZKeCC+2+V4oOgHzfDAMzc9
XyyJj5LwQPuAsWeWt4qW8MDvoy0DxuUPk/DAJbuvbx+YZJDwQHzXzPHAvVQ3
53jgcecSPavPDZfwQN4fGb+L7xo4Hoj7/zke6DxjTptzbSMkPJD3U/7376k1
PPBw/dJPqrpGSnjgzGtu1V4fDpfwQHxnzfHAE+qtq+adeX9hbyv0F+Z44LJf
zWvYlTP85/fmHA/EdyscD/RutnVluW3hEh6IfrscD2xb9NavyOqREh6I72U4
HpiyZ8H3yDfhEh6IvrocD8T3OBwPLEH9Sjge6Dx1f0jgt2AJDzytZrRZ2DtU
wgN5v13+/TjHAyfpvycSeagDfX/E8UDe91Z8z3h/T+uUxwYJD6y/+pZ3+ZtR
Eh6I7544Hgi+AccD0feW44HoM8vxQPNTg5Ke9g6T8EDexxb+YH5x0dtRzYIl
PPBkYvkCS0YFSHjgJerHxPHAq9QHiuOB+I6b44FRQ80vJ0/0l/DAP1k/Wejf
r7Ttp3eLHkh4YBO7o3u2WBokPHDkgqHLOrsaJTywFH33yvFA0e+V4YH67381
PBDfC3M8cNuDFr/+qOQj4YEzsjadflLMX8IDb1apXf5XnUAJD0TfVY4HLv9r
1OGisx9IeOBP1v8U8rO673M1PHCy7nteDQ8sRt/tcjwQ/ew4HthhTac+P/+6
LeGBV3u43u0+SZXwwMtLruz1vBcq4YGlWN9S2OveqeKLzz+9JuGBk+g7ZY4H
1r+9YPhY1ygJDxz0r/1Gva1+tis8eZSZh4QHViU/4Xjg2pvfDo/zjJDwwKyP
s5eNmXJFwgOn0jo5Hnj/6PPwhInBEh74a82VCqvyh0l4oHPBVr1fnrsu4YHn
uw+3K7DRR8IDC7F+mhg/h+zO8UAzNl7cM8n8R9RTyE84Hria1snxwJO0To4H
BpEeOB5YZG2eHjgemMH0jPGmtE85HriF7MXxwOa0fzkeiPOZ44FdyH84Hoh+
lBwPrEN+yPFAb/JnjgdOy1VLNykbKuGBrWh/cTzwMu0vjge2oX3K8UCTR3nn
A8cDF9N5wvHAmXRecTwQ5xXHAzfSucfxQGfWj5LzkTgeyPtCQs845zkeOILO
eY4HqvS+4Hgg76sI/f/6oTrvDg+V8EB8j8zxQLvLzps7HfeX8EDeDxFy9EPk
eOAhios4Hjie4hOOB56n9y/HA4/Q+5rjgU4fCsTv8AyQ8MAS9N7neGBPiis4
Hlia4kyOB2ZQfMjxwBIUh3A8sADliRwPBJ+T44HoV8jxwH/vG+gt9Q2En9Sl
eIzjgf0pn+J44HK/JZ+umYdIeOCMaxUeTUyOlPBAt5IZh6ccMUh44CHKCzge
eJLiWI4Hon8fxwP7U57C8cAw1r8PctwfxfFA3DfF8cAkiuc5Huj6dOb6l+/C
JTywJeULHA/E9+YcD7xM+QjHA0tT/sjxwCWUB3E8EH3KOB7I++jx78o5Hoi8
jOOByO84Hlgj2n1Km1IREh54hPJEjgfyvnXiO1PKWzkeiPyX44EnKF/meCDy
cY4H/qD8neOBvG8d9A98gOOBwAc4Hsj7ykHPNQnH4HhgDcJDOB7oT/gJxwNL
rqw5sPqAMAkPBD7D8cDZhPNwPPAN4UIcDwSOxPHAi4Q7cTwQOBXHA3kfNHE/
IeFmHA/MIpyN44G9WJ8ygQv91iRg8RyjhAfOItzv/wGBxm3b
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1: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
FmfWTv8DQ2HsJQ==
            "]], 
           Polygon[CompressedData["
1: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
An+zY/pRf53t++8s+Z2Ja4DvqxqD9h9cDfwO
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
dktwe3HV7VDeAj6Kzo/RruTXlMspX3s85p7K8X6WDUSfqFx0eIyVQ1PPRXb3
GPUnU+6WrSNbF2xLui8chGxO4hy9elxb5VCbqZsC3p97Tb9DfhftTuT/Xant
v1k8U82jvmz2LupfDj5T32feA+3FTO2D7lHw/sH3osnwa2Sn0W88HTzGPfD7
tL+U5fHMdqbfk1L7lqOi/D34mTp78BPAqZnzwwfgr1BWwz8BO9L2BNrMov7F
4NjeJreOzn1r+Gm54+5SdE6Nc9RaPRznojndr/1XPglOTp3vaY2aUr5FfmDq
/hfAHwenZL6X1M6dZ8rWDoXPzuyTDoGfntu+f0P2LaUDvHnuu61810DwreCc
ZAb1tVPnq3XAYfyfzzpu0X2UNsekXmedd+3/Tbn9QDXlXeCs4LN4NfJHdA+R
DcGnBucb84LXSf7tZPBv1D0FrqDP1qn3qB14czzni4JzbI1lf93RwJR+XgVf
lk2g/zz4e+b84mJ0bsztK3UGx1K2J5777GA/sEZxNXNuNj44DsqeF8L/yJy/
/D0313cu0foF77vuCzqjuksuke+Pfm9R9AM6R8vgd1K3Ff3TwE6p7wLto7+V
7U2JPkp+7xftQ+a76RW511Br9XVwfib+KLgssw8+C50zc9uKbEk5mGKEYkUh
dU6onF73XNnP1uB4pP3VPh9O23PQm0u7sng2ddfXO4TeCmZG/6Cc6EHl5+DU
xPerh+TjUr9XzIz6s6NfUu69gf73imdZZ3ptZj9/fe41Vy5xQdxz+UnlhrL/
JvJNyMdnfnOokrut/Pxc6p+Rb4K/CNalzKf/+qnvehlYLff6aJ3OgU/ILK8E
7095MtqY7mi6u9VCFsBxid9ufox+e1qwLcmmLow5keJm3aJ9sXyyzvi5sU/l
w2nu+4beKORvFWOflg0qBqF/bPC7kmKNYs4Pmd85uivnYY9+o+35wXsiWz1f
/jzze47uaENku+j8pZy6zP7tzzK/U6m/CfTTltIntT/U21Ff2vaAd6b+yEJ8
M8qcE14v/xRzGtnAacrf6G8r7RZGnynfuYi6G9HpEu/9k5DX5P8SxXL4mGB/
Irs+WHn1/++Emf2o7lCnpM7ldN6V18zP/H7TM/oonY8jcs9Zc+8PnpfaVs8F
h6IzGN432Bfpvn+6/B/fGZ44Nium6x56YfCdTu9G1WNMUcy9IjiOD5CfD86R
FNeSzO8GuuvXQL9Jbh80PbPvkg3fAbbSfTm1b5RdyQ/frtwsron842XBZ+RG
sEXU132tGM/X/cH+RX5mebBtzKTdBsZycfC9rSz3XnyKfr/gfR+knBa+qeR3
k1HxvjBU/hM8mjISfja4reQ74XCdXekmthvp6Fvr9W6g84i8N7Id0fZGZJbr
HWVdyfdq3a/7BHPd/c8KvkuOhp8XHGdlM5tLtifZlWxY73LKFUfE2KQzWjd3
/NW9oVPuvFc5+afg9ch2JbazOWXuf260PeX1x+deW9l7Au+R2z6Ue8uWlIcP
p/5Y5Jekzn/axTiiOPdN5tyhMfWtol9qCd4b/Zju7NJRnDpAOVXmGFtPd8nU
cbZx6vOgdTgj5gDyV41y5wZ6N9rOOjSL35ge8zflj02RXZT7fWFV5jcn+ZA2
4Pm5/ZreB24NfifR2bkydWy6Grw197urbOanzHeXY5BNDF439bk4cxwcFeOI
7hEzgm1CtqH9vSbm2Yq/8j86Z32QtY9+Q/cjzV1zbYDssBjrdaf7hfmNTXzP
lB1oHWRjslu9zZ4S/AarO9dLsiv0vkr8lndV7jxeMfcmxenEdyrNRfPrF/NW
zVfz1vuD/MCXwX5Gd8RTpJM7D1ZurHux/PYlwXPXO80JuX2FbGcje9Er2oPe
gf8LIEYb+A==
            "]], 
           Polygon[CompressedData["
1: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
c2XESGOla/yyMnKYbvk+5jbGwFOLiIHGRj22vvuFMry3GqVW7cv9OjdifW9T
hEdxPavZO2f/qeVeq3c35/AextzTi/D89+X4OdaO+awqYuaORXgQY6me/sQi
Ysyk1MMeRXhQc7v1Uh/N8V6owkPppdbh/ZYaO9n2yHjaJ2Oq+x7bogoPohdx
zbp2x6SfPIxj2xsfna+cvznt7RoRA42Frpk77D/uMYS2NTnnoWZ4BL2COZC5
kPF4bvoHx1cP9WwRMcnYdK4xyLkDL+Ze49XTesRgY7EapBbtBXdqhMaoNT7T
Z0+Et6pHDBlUhUapVXvDazQi5u+f68P+tg821WNk3xiTjc3GRL2yfmpDtivL
yN0GpP714LrHmuF59kx/dVOOp17KmD67Cg1erx4xTm3u4pimXt3TDE1W69Q8
tVrNa9ZDk9QmNWxxEf2ttl0ETy3C833F8y6Gp8Cd1bQyPJfea37O19uaoYVq
YlWFp1Kf5uR8ergZXkpPtQHtj6hpcF9jShWeR94y+/9+uB08yPdrhKfeK+Od
/vI+Y06u79U5/1/wD0V42qoRGr/U+NwS2m/f9ivCU9rH5kCXF+FBzI3UYP2s
ObPabL76RWvERGNj3ZhQhGaqnXqMR4vIsfQepTGqNfTyqSre1/HSc95eRk1i
cean5q7Hwf/K67+uwtNMUJ9bwuvo4T6CN2gJb6eH+Yrrn8580ZqGtY7na1Hb
aAe3cH4rW72InNTc9FHaj9BL0d6miHzWfLyDMTn1ehLPbw+vaI317Po2f/8y
89NxVeSk5qbm4CeU4bn0WnouvZj5VQ2eUIt8Wg94G7x6S3jD38N3FlFDeL2M
nM7czpxuRhk5n7mfOdn8KuaYc+0hjv2Btj+phXm+uaDr2dzEGL+oihxFNmea
mev75byfuaA508QiPLK5lDmoXlVP+WYZHvf6InJeve+Rzch11UdjoznqLUV4
VL2qnvaufJ56oqe+GV5cC69tDm5ebV5rbn5qM3Jp7/8efHYzvGyn7J+R2W5O
q/d9O/2t/v6IZuTYl2S8N/e2BvcT4/FiLeodPzHen7VG/4+top4yvTVqYM6P
H+B3cv48VkVN6sCMN9OqqKlYWxkFH1RG/eSDHG/rFxeWEfv1pHrTZbR/ks8/
pYwa2CEZ362NWZM6CF5Si1qVOdcJqRfmYt7DeXpB3nuvjEfzaB+d/nZQER7I
9WYOPTT139x6EzURnpJ+/ODUU3Oej/k9ezYj13P9PVyGp9bbup5PKyPnOD/n
o7lIW3hJa/jz88qo0Y0sIkeydmdMOizj4/1l1AD2Tr1Qrx1raynWMF5Jfz05
61nWuqwvvZX1I2ud1rSsbf1X/awiJzQXNCc0V1ye4znamFhGTvRYETUT55/x
cJ/sr3vTDx6d8c/YZ03R2qI1EWsj5phHpD8x97QG2wV+sxa1WWuMXuO51h6t
YR6Z/Wlt8/ucPw/Dj1bhx1+F79dDlZGjmKu8BE+sogZ5XPqj9+Gn4QH18Pj9
q/DAnxURj4w/XTNeGe96Zsxz32O90p+MSL94Q/qdnbK/bobXSD9ujDHWqAGu
TTVH7XmcrXc9c/gq8osd9Ib5PHOadfL9OvDbnoA3ggfD61ZRAx4O79wStWFj
pLFyjawPdKsilnXN/N0YZiwbWA9vsVkV9+oLj2vGOxi7etXj3brn+V5vbOyf
9YfN69F35ksbtURMNDa2yXy2kflWh8wvjInGRvvT2Nk285Xn8v3351iXRtQw
rGXs3hK+RL9sbrwrvJG/pYqah+f1yXfwXfY0J6tCP+9I/zIl9f729N9fVVFT
uCHjg/HRPts5+2OzevzeIZm/yUPq4bN2cC2kvxrGsX30eI3os77pt8zd9ZP9
009YuxlSxXF98jaZs3XI8V6zipyuY45ne+63C8f2Y3/bepzfN+s/ek69p55S
b2nO2jn9Suf0f7671+jDR1RxL+dcl3rkyM7FUel3BqSfWjfHw/nm3PqsjPrG
e/TRFfDXZXit6fDfmuG5jH96Lr3YAWVogZqg1htjJySrFcZ0Y7sx29htDfpZ
+Jv8fqNnUPtdw67lYTkezgnnxlqNmBvD83uHObba5Rp3rQ/K9eKYODZPVFHv
MAYYC/YpQxu8v7HGmGRs+DBr876f2qBG6EXGV1FrsSZrrVwNN3+1xqG2+/ue
yXa9xcj8fe2KyE3Naa1tWFMx1zWG6jXGFRFb55ThrR6Hz4T/WEZt3vzYWo4x
xdhiPqy3078PrcdvVBvMcfV67YvIfX0/Y83qef0PZXjLFfDtal+u/5Xwf4xt
jchdzffN/1eWkRtZE7E2Yr21V9YP9M56FHMTcxK9yypZn/gUvroZnkdv+FwR
XmhJFV7Imq613YVl5DJfwTfArakXX8PXNyOGG8uXZn9b47KWYE3B2pf1ha5F
5Ozm0+p5kV7SWH16Gd7WGoK1hN/m/NND6iWPzPmlB9YLn5LjryfVmxpT9ZbL
WyPW6jHNJfWrek9zVHNVPbHeWA0wl9oytcEap16oTfpNayytud5WaUT+Yl/a
p81G9OlPRdRk7GtrUNaarPFY69G/j8785pMyalKeY1uZ+eDA1PvVG5EvNTK/
aldFzerbIvq4yPzLWtgucM8q1vT7tHdsibXuGHxeRA3JsemY8cOcxdzFMfum
yDlSxpzyw+z6LTHXnFPLitAj55o1Lmtd1phWlFHzb8l8ym8B+gVrqWrMgio0
Z8Oc36s1Yk46N40Zxg7n2Kfpj1fCf4c/Tn89v4zNbw5+a7DNGu7dma84N62x
zStiDlp78/e/l/nXiir88r2Zb00to4Ytt0t/bgw0Fu4Gb1LFmnXt+o3D5/67
GbU7a3jfl/HN5+38ffrlj8vwznpovbY5w0M5X76t4hqv9XvRJc3Q2Jl5f7XX
byDWJKxF+G3Eb1zXFZFf++2rJet/czl2TTM8ufPR+sicKmJsm/QrXbM/ZxdR
E3Ut+812Vs7Hlkbk5J7vPdtW8c3prSLyV79FXZfjo4a0NuKdp2V+8E0ZMX7V
etYoq6gXbJ51C9eL33DezfXg/NcztK/H/He+Xpr3s0+Ww/8DSesGZw==
            "]], 
           Polygon[CompressedData["
1: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
pu9De4P2Pw7qGpo=
            "]]}]}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0ckuBEEcB+DSZuw8ACenmTjb9277NoODCweZiyXBiUTixFXwAIwZjOEl
XIi3kHgUXyeS/vX3S+pQ9a/qLZ1sHjeEEI5kSzllHIWQyKW+x1te8541vnM2
G8IbZ1hnwlhe9WnWOMUXTnJCnvVxPnGMVY5yRCr6MB85xDIH+cAPe96xzive
8IyHPEijz3GHfSwyy0w6h/5rrgF+M88qK9KjX7CLJab3kGRCiNK52JjOSV+Y
91sQRwqLbOISm7nMFWnRV9nKNbaxwKK06+vs4AY7eW7DbpaZ4ye/pF//YczI
YQrMMS/b+q61/f/3+gOXUiik
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0bsvQ2EAxuGv2tpJhEEqZlYJrbr3tHpvEbsds/C3EKv7/ZLYWCVMYtCw
skgMjB4x/PK8Jzkn53w5/UurzZVYCGFZ920hpFxcxUO41oDd4jDjiRBy7GWT
hfYQGsyzzog51ewZVjnNCqc4qbI9wRLHWeQYs5q1R1lghnmmGXHIO0eY4iCT
7OObb3tVp33DJLf54ywbXNeHvcgWs3xkD7t1Z3858yWfucMoGcIu89xjgfss
sqQDu8xDVnjEKms6tus8YYOnbHJOZ/Y8z7nAC3565y27fMsD08zo5e9evnON
39zklhLO+OS5jtj///oFu2gylw==
          "]]}, {
         Line[{1090, 1089, 1817, 1107, 1613, 1825, 1130, 1841, 1619, 1823, 
          1148, 1629, 1858, 1168, 1638, 1882, 1192, 1879, 1643, 1897, 1209, 
          1656, 1918, 1227, 1668, 1941, 1251, 1956, 1674, 1938, 1267, 1687, 
          1979, 1287, 2001, 1285, 1313, 1998, 1311, 1334}], 
         Line[{1091, 1609, 1818, 1108, 357, 1131, 1840, 1621, 1844, 1149, 
          1630, 1863, 1169, 1881, 1170, 1193, 1900, 1645, 1896, 1210, 1658, 
          1922, 1228, 1940, 1229, 1252, 1955, 1676, 1960, 1268, 1690, 1983, 
          1288, 2000, 1289, 1314, 2015, 1315, 1335}], 
         Line[{1092, 344, 1110, 1615, 1827, 1132, 1843, 1623, 1848, 1150, 
          1862, 1153, 1172, 1884, 1175, 1194, 1899, 1647, 1906, 1211, 1660, 
          1921, 1231, 1670, 1943, 1253, 1959, 1678, 1965, 1269, 1692, 1982, 
          1291, 2004, 1294, 1316, 2017, 1319, 1336}], 
         Line[{1095, 1610, 1820, 1112, 1832, 1116, 1134, 1625, 1851, 1852, 
          1152, 1633, 1870, 1174, 1889, 1178, 1196, 1909, 1650, 1905, 1213, 
          1662, 1931, 1233, 1671, 1948, 1255, 1968, 1681, 1964, 1271, 1694, 
          1991, 1293, 1701, 2008, 1318, 690, 1338}], 
         Line[{1096, 1611, 1821, 1114, 1618, 1835, 1135, 1850, 1627, 1855, 
          1154, 1635, 1869, 1176, 1888, 1183, 1197, 1908, 1652, 1913, 1214, 
          1664, 1930, 1235, 1952, 1242, 1256, 1967, 1683, 1972, 1272, 1696, 
          1995, 1295, 2011, 1302, 1320, 2021, 1327, 1339}], 
         Line[{1097, 1612, 1822, 1115, 1834, 1125, 1136, 1854, 1628, 1838, 
          1155, 1875, 1164, 1177, 1642, 1891, 1198, 1912, 1654, 1894, 1215, 
          1666, 1934, 1236, 1951, 1247, 1257, 1975, 1685, 1971, 1273, 1994, 
          1282, 1296, 2010, 1307, 1321, 2023, 1331, 1340}], 
         Line[{1099, 1106, 1826, 1119, 1129, 1842, 1139, 1147, 1859, 1860, 
          1159, 1883, 1639, 1181, 1191, 1898, 1201, 1919, 1657, 1917, 1219, 
          1226, 1942, 1240, 1957, 1675, 1260, 1977, 1688, 1980, 1277, 1286, 
          2002, 1300, 1312, 2016, 1325, 703, 1342}], 
         Line[{1100, 1109, 1828, 1120, 1845, 1622, 1140, 1861, 1631, 1864, 
          1160, 1171, 1885, 1182, 1901, 1646, 1202, 1923, 1659, 1920, 1220, 
          1230, 1944, 1241, 1958, 1677, 1261, 1981, 1691, 1984, 1278, 1290, 
          2003, 1301, 684, 1326, 2026, 1708, 1343}], 
         Line[{1101, 1113, 1830, 1122, 1846, 1624, 1141, 1865, 1632, 1867, 
          1161, 463, 1185, 1902, 1648, 1203, 1924, 1661, 1926, 1221, 1234, 
          1945, 1244, 1961, 1679, 1262, 1985, 1693, 1987, 1279, 2005, 1700, 
          1304, 2018, 1704, 1328, 2027, 1709, 1344}], 
         Line[{1103, 1117, 1833, 1124, 1137, 1853, 1143, 1157, 1871, 1873, 
          1163, 1890, 1641, 1187, 1199, 1910, 1205, 1932, 1663, 1929, 1223, 
          1238, 1949, 1246, 1258, 1969, 1264, 1992, 1695, 1990, 1281, 1298, 
          2009, 1306, 2022, 1705, 1330, 709, 1346}], 
         Line[{1104, 1121, 1836, 1127, 405, 1145, 1876, 1636, 1874, 1165, 
          1184, 1892, 1189, 1911, 1653, 1206, 1933, 1665, 1935, 1224, 1243, 
          1950, 1248, 1970, 1684, 1265, 1993, 1697, 1996, 1283, 1303, 2012, 
          1309, 696, 1332, 2029, 1711, 1347}], 
         Line[{1105, 1126, 1837, 1128, 1144, 1856, 1146, 1877, 1637, 1878, 
          1166, 1188, 1893, 1190, 1914, 1655, 1207, 1936, 1667, 1937, 1225, 
          1953, 1673, 1249, 1973, 1686, 1266, 1997, 1698, 1974, 1284, 1308, 
          2013, 1310, 2024, 1706, 1333, 2030, 1712, 1348}], 
         Line[{1337, 1322, 2019, 1317, 1297, 2006, 1292, 1274, 1986, 1270, 
          1963, 1962, 1680, 1254, 1237, 1946, 1232, 1216, 1925, 1212, 1904, 
          1903, 1649, 1195, 1886, 1640, 1173, 1156, 1866, 1151, 397, 1847, 
          1133, 1829, 1616, 1111, 1093, 1819, 1094}], 
         Line[{1341, 1707, 2025, 1324, 1703, 2014, 1299, 1699, 1999, 1276, 
          1689, 1978, 1976, 1259, 1954, 1250, 1239, 1669, 1939, 1218, 1916, 
          1915, 1208, 1200, 1644, 1895, 1180, 1880, 1167, 1158, 419, 1857, 
          1138, 1620, 1839, 1118, 1614, 1824, 1098}], 
         Line[{1345, 1710, 2028, 1329, 2020, 1323, 1305, 1702, 2007, 1280, 
          1989, 1988, 1275, 1263, 1682, 1966, 1245, 1672, 1947, 1222, 1928, 
          1927, 1217, 1204, 1651, 1907, 1186, 1887, 1179, 1162, 1872, 1634, 
          1868, 1142, 1626, 1849, 1123, 1617, 1831, 1102}], 
         Line[{1350, 1349, 2031, 1367, 1717, 2039, 1390, 2055, 1723, 2037, 
          1408, 1733, 2072, 1428, 1742, 2096, 1452, 2093, 1747, 2111, 1469, 
          1760, 2132, 1487, 1772, 2155, 1511, 2170, 1778, 2152, 1527, 1791, 
          2193, 1547, 2215, 1545, 1573, 2212, 1571, 1594}], 
         Line[{1351, 1713, 2032, 1368, 732, 1391, 2054, 1725, 2058, 1409, 
          1734, 2077, 1429, 2095, 1430, 1453, 2114, 1749, 2110, 1470, 1762, 
          2136, 1488, 2154, 1489, 1512, 2169, 1780, 2174, 1528, 1794, 2197, 
          1548, 2214, 1549, 1574, 2229, 1575, 1595}], 
         Line[{1352, 719, 1370, 1719, 2041, 1392, 2057, 1727, 2062, 1410, 
          2076, 1413, 1432, 2098, 1435, 1454, 2113, 1751, 2120, 1471, 1764, 
          2135, 1491, 1774, 2157, 1513, 2173, 1782, 2179, 1529, 1796, 2196, 
          1551, 2218, 1554, 1576, 2231, 1579, 1596}], 
         Line[{1355, 1714, 2034, 1372, 2046, 1376, 1394, 1729, 2065, 2066, 
          1412, 1737, 2084, 1434, 2103, 1438, 1456, 2123, 1754, 2119, 1473, 
          1766, 2145, 1493, 1775, 2162, 1515, 2182, 1785, 2178, 1531, 1798, 
          2205, 1553, 1805, 2222, 1578, 1065, 1598}], 
         Line[{1356, 1715, 2035, 1374, 1722, 2049, 1395, 2064, 1731, 2069, 
          1414, 1739, 2083, 1436, 2102, 1443, 1457, 2122, 1756, 2127, 1474, 
          1768, 2144, 1495, 2166, 1502, 1516, 2181, 1787, 2186, 1532, 1800, 
          2209, 1555, 2225, 1562, 1580, 2235, 1587, 1599}], 
         Line[{1357, 1716, 2036, 1375, 2048, 1385, 1396, 2068, 1732, 2052, 
          1415, 2089, 1424, 1437, 1746, 2105, 1458, 2126, 1758, 2108, 1475, 
          1770, 2148, 1496, 2165, 1507, 1517, 2189, 1789, 2185, 1533, 2208, 
          1542, 1556, 2224, 1567, 1581, 2237, 1591, 1600}], 
         Line[{1359, 1366, 2040, 1379, 1389, 2056, 1399, 1407, 2073, 2074, 
          1419, 2097, 1743, 1441, 1451, 2112, 1461, 2133, 1761, 2131, 1479, 
          1486, 2156, 1500, 2171, 1779, 1520, 2191, 1792, 2194, 1537, 1546, 
          2216, 1560, 1572, 2230, 1585, 1078, 1602}], 
         Line[{1360, 1369, 2042, 1380, 2059, 1726, 1400, 2075, 1735, 2078, 
          1420, 1431, 2099, 1442, 2115, 1750, 1462, 2137, 1763, 2134, 1480, 
          1490, 2158, 1501, 2172, 1781, 1521, 2195, 1795, 2198, 1538, 1550, 
          2217, 1561, 1059, 1586, 2240, 1812, 1603}], 
         Line[{1361, 1373, 2044, 1382, 2060, 1728, 1401, 2079, 1736, 2081, 
          1421, 838, 1445, 2116, 1752, 1463, 2138, 1765, 2140, 1481, 1494, 
          2159, 1504, 2175, 1783, 1522, 2199, 1797, 2201, 1539, 2219, 1804, 
          1564, 2232, 1808, 1588, 2241, 1813, 1604}], 
         Line[{1363, 1377, 2047, 1384, 1397, 2067, 1403, 1417, 2085, 2087, 
          1423, 2104, 1745, 1447, 1459, 2124, 1465, 2146, 1767, 2143, 1483, 
          1498, 2163, 1506, 1518, 2183, 1524, 2206, 1799, 2204, 1541, 1558, 
          2223, 1566, 2236, 1809, 1590, 1084, 1606}], 
         Line[{1364, 1381, 2050, 1387, 780, 1405, 2090, 1740, 2088, 1425, 
          1444, 2106, 1449, 2125, 1757, 1466, 2147, 1769, 2149, 1484, 1503, 
          2164, 1508, 2184, 1788, 1525, 2207, 1801, 2210, 1543, 1563, 2226, 
          1569, 1071, 1592, 2243, 1815, 1607}], 
         Line[{1365, 1386, 2051, 1388, 1404, 2070, 1406, 2091, 1741, 2092, 
          1426, 1448, 2107, 1450, 2128, 1759, 1467, 2150, 1771, 2151, 1485, 
          2167, 1777, 1509, 2187, 1790, 1526, 2211, 1802, 2188, 1544, 1568, 
          2227, 1570, 2238, 1810, 1593, 2244, 1816, 1608}], 
         Line[{1597, 1582, 2233, 1577, 1557, 2220, 1552, 1534, 2200, 1530, 
          2177, 2176, 1784, 1514, 1497, 2160, 1492, 1476, 2139, 1472, 2118, 
          2117, 1753, 1455, 2100, 1744, 1433, 1416, 2080, 1411, 772, 2061, 
          1393, 2043, 1720, 1371, 1353, 2033, 1354}], 
         Line[{1601, 1811, 2239, 1584, 1807, 2228, 1559, 1803, 2213, 1536, 
          1793, 2192, 2190, 1519, 2168, 1510, 1499, 1773, 2153, 1478, 2130, 
          2129, 1468, 1460, 1748, 2109, 1440, 2094, 1427, 1418, 794, 2071, 
          1398, 1724, 2053, 1378, 1718, 2038, 1358}], 
         Line[{1605, 1814, 2242, 1589, 2234, 1583, 1565, 1806, 2221, 1540, 
          2203, 2202, 1535, 1523, 1786, 2180, 1505, 1776, 2161, 1482, 2142, 
          2141, 1477, 1464, 1755, 2121, 1446, 2101, 1439, 1422, 2086, 1738, 
          2082, 1402, 1730, 2063, 1383, 1721, 2045, 1362}]}, {
         Line[{342, 612, 1973, 611, 606, 1970, 605, 1969, 600, 1966, 599, 594,
           1961, 593, 588, 1958, 587, 1957, 582, 1954, 576, 573, 1951, 572, 
          1952, 569, 568, 1948, 565, 1946, 564, 561, 1943, 560, 557, 1940, 
          556, 1941, 553, 581}], 
         Line[{352, 575, 1953, 574, 571, 1950, 570, 1949, 567, 1947, 566, 563,
           1945, 562, 1944, 559, 558, 1942, 555, 1939, 550, 545, 1934, 544, 
          539, 1930, 538, 1931, 533, 1925, 532, 527, 1921, 526, 1922, 521, 
          520, 1918, 515, 554}], 
         Line[{354, 339, 1817, 341, 340, 1818, 343, 344, 345, 1819, 346, 1820,
           347, 348, 1821, 349, 350, 1822, 351, 1824, 355, 1826, 358, 359, 
          1828, 362, 363, 1830, 366, 1831, 367, 1833, 370, 371, 1836, 374, 
          1837, 375, 377}], 
         Line[{380, 353, 1825, 356, 357, 360, 1827, 361, 364, 1829, 365, 1832,
           368, 369, 1835, 372, 1834, 373, 376, 1839, 381, 1842, 386, 387, 
          1845, 392, 1846, 393, 398, 1849, 399, 1853, 404, 405, 410, 1856, 
          411, 414}], 
         Line[{416, 378, 1841, 382, 1840, 384, 388, 1843, 390, 394, 1847, 396,
           1851, 400, 1850, 402, 406, 1854, 408, 412, 1857, 418, 1859, 422, 
          1861, 424, 428, 1865, 430, 434, 1868, 436, 1871, 440, 442, 1876, 
          446, 1877, 448, 451}], 
         Line[{452, 1878, 449, 447, 443, 1874, 441, 1873, 1872, 437, 435, 
          1867, 431, 429, 1864, 425, 423, 1860, 419, 413, 1838, 409, 407, 
          1855, 403, 401, 1852, 397, 395, 1848, 391, 389, 1844, 385, 383, 379,
           1823, 417}], 
         Line[{454, 415, 1858, 420, 421, 1863, 426, 1862, 427, 432, 1866, 433,
           1870, 438, 1869, 439, 444, 1875, 445, 450, 1880, 455, 1883, 458, 
          459, 1885, 462, 463, 466, 1887, 467, 1890, 470, 471, 1892, 474, 
          1893, 475, 477}], 
         Line[{480, 453, 1882, 456, 1881, 457, 460, 1884, 461, 464, 1886, 465,
           1889, 468, 1888, 469, 472, 1891, 473, 476, 1895, 481, 1898, 486, 
          487, 1901, 492, 1902, 493, 498, 1907, 499, 1910, 504, 1911, 505, 
          510, 1914, 511, 514}], 
         Line[{516, 1879, 478, 482, 484, 1900, 488, 1899, 490, 494, 1903, 496,
           1909, 500, 1908, 502, 506, 1912, 508, 512, 1915, 518, 1919, 522, 
          524, 1923, 528, 1924, 530, 534, 1927, 536, 1932, 540, 1933, 542, 
          546, 1936, 548, 551}], 
         Line[{552, 1937, 549, 547, 1935, 543, 541, 537, 1929, 1928, 535, 
          1926, 531, 529, 525, 1920, 523, 519, 1917, 1916, 513, 1894, 509, 
          507, 1913, 503, 501, 497, 1905, 1904, 495, 1906, 491, 489, 485, 
          1896, 483, 1897, 479, 517}], 
         Line[{578, 1974, 650, 648, 1996, 644, 642, 638, 1990, 1989, 636, 
          1987, 632, 630, 1984, 626, 624, 1980, 620, 1978, 614, 610, 1971, 
          608, 1972, 604, 602, 598, 1964, 1963, 596, 1965, 592, 590, 1960, 
          586, 584, 580, 1938, 618}], 
         Line[{615, 675, 2013, 674, 2012, 671, 670, 2009, 667, 2007, 666, 663,
           2005, 662, 659, 2003, 658, 2002, 655, 1999, 651, 646, 1994, 645, 
          1995, 640, 639, 1991, 634, 1986, 633, 628, 1982, 627, 1983, 622, 
          621, 1979, 616, 654}], 
         Line[{617, 579, 1956, 583, 1955, 585, 589, 1959, 591, 595, 1962, 597,
           1968, 601, 1967, 603, 607, 609, 1975, 613, 1976, 1977, 619, 623, 
          1981, 625, 629, 1985, 631, 635, 1988, 637, 1992, 641, 1993, 643, 
          647, 1997, 649, 577}], 
         Line[{652, 700, 2024, 699, 696, 695, 2022, 692, 2020, 691, 688, 2018,
           687, 684, 683, 2016, 680, 2014, 676, 673, 2010, 672, 2011, 669, 
          668, 2008, 665, 2006, 664, 661, 2004, 660, 657, 2000, 656, 2001, 
          653, 679}], 
         Line[{677, 713, 2030, 712, 2029, 711, 710, 709, 2028, 708, 707, 2027,
           706, 705, 2026, 704, 703, 2025, 701, 698, 2023, 697, 694, 2021, 
          693, 690, 2019, 689, 686, 2017, 685, 682, 2015, 681, 678, 1998, 
          702}], 
         Line[{717, 987, 2187, 986, 981, 2184, 980, 2183, 975, 2180, 974, 969,
           2175, 968, 963, 2172, 962, 2171, 957, 2168, 951, 948, 2165, 947, 
          2166, 944, 943, 2162, 940, 2160, 939, 936, 2157, 935, 932, 2154, 
          931, 2155, 928, 956}], 
         Line[{727, 950, 2167, 949, 946, 2164, 945, 2163, 942, 2161, 941, 938,
           2159, 937, 2158, 934, 933, 2156, 930, 2153, 925, 920, 2148, 919, 
          914, 2144, 913, 2145, 908, 2139, 907, 902, 2135, 901, 2136, 896, 
          895, 2132, 890, 929}], 
         Line[{729, 714, 2031, 716, 715, 2032, 718, 719, 720, 2033, 721, 2034,
           722, 723, 2035, 724, 725, 2036, 726, 2038, 730, 2040, 733, 734, 
          2042, 737, 738, 2044, 741, 2045, 742, 2047, 745, 746, 2050, 749, 
          2051, 750, 752}], 
         Line[{755, 728, 2039, 731, 732, 735, 2041, 736, 739, 2043, 740, 2046,
           743, 744, 2049, 747, 2048, 748, 751, 2053, 756, 2056, 761, 762, 
          2059, 767, 2060, 768, 773, 2063, 774, 2067, 779, 780, 785, 2070, 
          786, 789}], 
         Line[{791, 753, 2055, 757, 2054, 759, 763, 2057, 765, 769, 2061, 771,
           2065, 775, 2064, 777, 781, 2068, 783, 787, 2071, 793, 2073, 797, 
          2075, 799, 803, 2079, 805, 809, 2082, 811, 2085, 815, 817, 2090, 
          821, 2091, 823, 826}], 
         Line[{827, 2092, 824, 822, 818, 2088, 816, 2087, 2086, 812, 810, 
          2081, 806, 804, 2078, 800, 798, 2074, 794, 788, 2052, 784, 782, 
          2069, 778, 776, 2066, 772, 770, 2062, 766, 764, 2058, 760, 758, 754,
           2037, 792}], 
         Line[{829, 790, 2072, 795, 796, 2077, 801, 2076, 802, 807, 2080, 808,
           2084, 813, 2083, 814, 819, 2089, 820, 825, 2094, 830, 2097, 833, 
          834, 2099, 837, 838, 841, 2101, 842, 2104, 845, 846, 2106, 849, 
          2107, 850, 852}], 
         Line[{855, 828, 2096, 831, 2095, 832, 835, 2098, 836, 839, 2100, 840,
           2103, 843, 2102, 844, 847, 2105, 848, 851, 2109, 856, 2112, 861, 
          862, 2115, 867, 2116, 868, 873, 2121, 874, 2124, 879, 2125, 880, 
          885, 2128, 886, 889}], 
         Line[{891, 2093, 853, 857, 859, 2114, 863, 2113, 865, 869, 2117, 871,
           2123, 875, 2122, 877, 881, 2126, 883, 887, 2129, 893, 2133, 897, 
          899, 2137, 903, 2138, 905, 909, 2141, 911, 2146, 915, 2147, 917, 
          921, 2150, 923, 926}], 
         Line[{927, 2151, 924, 922, 2149, 918, 916, 912, 2143, 2142, 910, 
          2140, 906, 904, 900, 2134, 898, 894, 2131, 2130, 888, 2108, 884, 
          882, 2127, 878, 876, 872, 2119, 2118, 870, 2120, 866, 864, 860, 
          2110, 858, 2111, 854, 892}], 
         Line[{953, 2188, 1025, 1023, 2210, 1019, 1017, 1013, 2204, 2203, 
          1011, 2201, 1007, 1005, 2198, 1001, 999, 2194, 995, 2192, 989, 985, 
          2185, 983, 2186, 979, 977, 973, 2178, 2177, 971, 2179, 967, 965, 
          2174, 961, 959, 955, 2152, 993}], 
         Line[{990, 1050, 2227, 1049, 2226, 1046, 1045, 2223, 1042, 2221, 
          1041, 1038, 2219, 1037, 1034, 2217, 1033, 2216, 1030, 2213, 1026, 
          1021, 2208, 1020, 2209, 1015, 1014, 2205, 1009, 2200, 1008, 1003, 
          2196, 1002, 2197, 997, 996, 2193, 991, 1029}], 
         Line[{992, 954, 2170, 958, 2169, 960, 964, 2173, 966, 970, 2176, 972,
           2182, 976, 2181, 978, 982, 984, 2189, 988, 2190, 2191, 994, 998, 
          2195, 1000, 1004, 2199, 1006, 1010, 2202, 1012, 2206, 1016, 2207, 
          1018, 1022, 2211, 1024, 952}], 
         Line[{1027, 1075, 2238, 1074, 1071, 1070, 2236, 1067, 2234, 1066, 
          1063, 2232, 1062, 1059, 1058, 2230, 1055, 2228, 1051, 1048, 2224, 
          1047, 2225, 1044, 1043, 2222, 1040, 2220, 1039, 1036, 2218, 1035, 
          1032, 2214, 1031, 2215, 1028, 1054}], 
         Line[{1052, 1088, 2244, 1087, 2243, 1086, 1085, 1084, 2242, 1083, 
          1082, 2241, 1081, 1080, 2240, 1079, 1078, 2239, 1076, 1073, 2237, 
          1072, 1069, 2235, 1068, 1065, 2233, 1064, 1061, 2231, 1060, 1057, 
          2229, 1056, 1053, 2212, 1077}]}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
CfaGgsZK129n46ueoJi9xtmoMCmv9G06watQuxlVujmYy3dP/ihPBqrbnF9T
Tvi54gOvk+HRuVgqm+NgUBCKfCKNux3qKJA/QM/P35swP095Xl1uFxmChyqX
+kz38wEOH/VrCb8oaNhL2wdMsP9s4PToR2wezmkuSjgZn4nURemZMUSPb582
+WTw73yU/cHr+CQyE3+vbHrJEU9wYxeYQLUXun5bsbUuOAwmJ9762k38hLHm
9ndPmNvfUP4jgDfJA+c3907+rRYKp8+nfhj89U9fm57nb2PN829jzfOfquxY
va88Ba0F4iVvO8XhioKyO1oEn5H+fojd9PdDZH8/TPiVXDJ+whduHpGqj9aO
hZa9ms31wwSfWf47Jvj/2LN/H19pHOzc2pnxuSwNNquf4Dv85r/7Be8n2KvS
3zmxjP7OiezvnJX091X8QX9fRfb31S76OypsoL+jAvs7KntPoXzCnoIy/b0X
dOnvvbCc9b3X+1/s3aX+fmcGGfo7MwixvjN70v0XtKT7L8juv0zWPLH+tHY8
2kZN1Uhano5+U7dGfW4lcSL39zsYbqG/gyH7O9gcCe4NvL8iQOPSw+qp98Lg
5Akx81Jyn2I5TKmZ0Sn46/rVlWICmVjcEdo6TPiwMONoZWNPCi5evub06ups
TB8+0mZXQQGYfVoSeiMdXArefAmzZIDA+YKmf+ZzGqQXvN1onwZOC0p5IlYy
wCHvvZkN4VFfvRgqG1Wjcb/Ar64xhww8Ydv88zI5J491tlDc7RjkE3PN/7M/
DT/2LT2uSur7h8Efa+37M0C0zaSG83kauO2X3CNXRYHFzQQdI64cUHgz47Xl
1Szg233y4OpMCtL2hKwtmfsIb704zfdWMQ6dx3t1ZpH3yHT823+BVrr/guz+
i/pHDn/OJ9lQb3Pg7S3fDHAXmJvByCd4eEae76xIDoR7JZ9aMpQO/lqWyZXk
dxu6vwOX6P4OsPs7q+l+E9jQ/SaYwuo3cZn/+hR+NRV21j3nvzueDuUbNc4c
eE6BL93ngvV0nwvYfa4Uup8FB+l+FrD7WW/p/hoE0f01YPfXftP9NThD99eA
3V97QPf14And1wN2X28l3R8EAbo/CBtZ/cFTdB+Z6LS/fWRk95GvH8kQMMmL
wWA7s2ap/Rm4ToknfDZ5XxuXzBJrd0tEhRuvy6oIL+536BBSaCI6V1+Qjzew
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
KsRYTflsNT8Og6a5K70g9mxrPm+iNsSCPVfXGO8Yk4LjU62ELlawwf/G9wnX
/D1hmk5IzV7bfORuEw9aGcaGB1Ibo4qO2sB7bu5NIQdInnHRpDmK5ClPHKqk
1k6wwdnjBK2uTc1Hc5GstLwYNqhWb711gM8KLyT9+MLtiNgfs91zJYkDeUYN
uNzKjaC8eP3EMwE56Mm7eioficem6Wev2XNYG9azVWxrjmbhr6CsAgcynhI5
kx0yo+4Qki43YJ+RgJZPJ2mUkfWmH/5Fr+VONKyZ9yLJ81MejGvrbb4bSPLu
VT7cK01j4ZzU3VJhg3xgycwVE/AmcfiRLNbBx46gq13wNDYqD2JVx146RPKO
dVX7qnxcIvBp59TcrrXZEGSl07yN5JsnaX2TT7S+yVVa3+Q6rReTy9CLmZ+2
TCWGpwS5M/bssch1h/rrSp+7DNjw5WSduv6ESlx8tcnF6aQzpj+/t2d0DsnH
rXt+fdCowe7DQpM+/IjFOnzweW/O/3RkJjB0ZHj0R8qmnK/Fwce/b6Ym5qJG
4jQb16M9kO+vMvO1YzVOSwplp33KxcFQN/Mdvj3wqN93paROGQ7//jhbcW42
Pj9dwto2laxPWl9mDkNfxn5j4uKNK9LwR5fu9dQkf2z0vHGej6y3ZOMj98te
++AtnweL/PY6QVSWRdH6EZIvzL4jWFnjBa9zj7WpEP99vbOv+CeJ0+ZJ6Ju8
Ok++S89qpCw1F8v3bXvw07IHZg7A+kLJh5DYeiZo9rEUqPy17lAH8Q+zTfKD
D4iEoWKq9I39DiEgtHB1wnFyLngqmIl2NT3H90LrBRYNpOHo5Ncf9STJfD2N
Ukk5koW/59RUnio6gDLeOxKdK/43X0OM+aowSHHPUy/FW7eiR60zQrDInHvd
+d3ED9B8Mn40n4wifU8vbemLLFv+CjR84WXZ28xCjYFlT1UF2FC34GfDe/FK
dHRNONR5IA1rsywiub72wOCn+qj+D3k4uNkquo7kK33Oqb0vPdgw5QX4L7/H
wov604pyMq0xYbfXj9PkvOih9W7W0Xo372n+6gV7Q+t924oxfqGX08K5SXgi
6NsKy4NsGMe6VjZbvAA/+6+a3CoXj08ttox2kvz3abTHzTKx+9B5Kv71ZbMY
WNqbdLqCnGuuN3eoOyzIQm9vgZLWk8EIfL4pb4rZYE3r40Qw9HE6vXwHboy/
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
+d/ISYss77RpQOdynnMzRjPAefqXcUfIfky6sGGjtVQGignd3mzFH4hnaj0m
/MFvlWn9aBuGfjRHb3oJo8/dldaPXsHQj86c+a33x8RovNtz4NkiWRZYqPSE
zSDrR0E7NlQpOAXHf1HdlnAlHPkOahjfJe/fovu1a5tZIu4ePqt+3FgH0n/f
XarQ9T9daTFGnfr9dbM3akuTsSg17Qm/bThe2qZS7UL82xmzCSuHQ5JxeLGi
ve3+cHzeXfzreDPxA3TfrjWjb5ejB21P60Gfovne+e0DjdXHesPgy0uaEW5J
cCN/Uc0p8r8jQQpq/P0hUGmWP29KawpkNpy5x3pBnrdS65u4IwrFmlWCxM4+
xqOKU2cZfCX7outF7NJr1rD6lNVHngssqE2q+hL4+Q8fI9XXPI3R1/yWrpt/
YNTNtSZ/7R5ICMc18hMWpvMEYJ7oD4tPf/SjaX3kVIY+MjfdH23I6I8OpvWO
vzL0jgtuC67i2+uMdcpZ5vknnsKhj9sf1Y2w4ck/6u8V/+in3m0oNeS3MADd
2fxhnc/D0ENp0+onxM5fm9Fd3sEB+wZSzSP07OFJtPXzw7/+6ApRfdZXGX3W
o8cqavz9Qv9fYWceTuW2BvDKWJzMTepkO8pODolUkqWUEOmGkhLloMw6zjWU
BtySRIZEGSrTlilj2FibttqOuimETYZODqccQ7k4pHtXfeu7PXc9z37uvx7P
3utZ37vW976v9+cHF1SFnNrJKoR5rGRtS7Q/JtgvPED4hTn9Mwmu+8oA7wnT
S3c6A3jc8rEoQO8XXcyb9xK8uT7mrIcIzvqy5tiLfQFXgAPfx974Zjg8YueY
+vjzN9/uRYITP/eoSoXbUQr2yRq/9BbKBv3vXb3Pou8Vxbz2jPj/8trfD0mG
qrTFAzOFyzPH1BJgRMDm4BOfUB6FvbqPCK+uBua7gwi+m/bqehNeXWND34Oz
stWgeevr83VXssCzDHXlW6heK3G3OSiXXwUGzSdt52WyQOHHqukvf8exwXy6
B8Gn2+H5hL3EfMJ+zI+nEPz4fMyJZxKcOO29nSW48qhcp0iD0d1QfOWhqCM/
lkC5sZWis+j5JmS2S8Q6XIcpXJ5LtmYZPO26c64DnTtZzJubE7z5FJ436CHm
DWjvrSzhvfXBXLkFwZXb9bn1bS8tAqpuHpIsxn0QblG/p7D/m8eWnJf4VXQZ
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
q2wOLmVWwsTOPc5iqH7/D4N0dtE=
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {342., 342.}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {0., 
       0.49488850049789845`}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.415, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.375, $CellContext`k4$$ = 
    0.635, $CellContext`k5$$ = 
    0.935, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.415, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 
     0.375, {2, 2, {-1, 1}} -> 0.635, {2, 2, {1, 0}} -> 0.415, {2, 2, {0, 1}} -> 
     0.25, {2, 2, {1, 1}} -> 0.375, {2, 2, {1, -1}} -> 0.635, {1, 3, {-1, 0}} -> 
     0.25, {1, 3, {0, -1}} -> 0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 
     0.25, {1, 3, {1, 0}} -> 0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 
     0.25, {1, 3, {1, -1}} -> 0.25, {1, 3, {0, 0}} -> 0.635, {2, 3, {-1, 0}} -> 
     0.25, {2, 3, {0, -1}} -> 0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 
     0.25, {2, 3, {1, 0}} -> 0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 
     0.25, {2, 3, {1, -1}} -> 0.25, {2, 3, {0, 0}} -> 0.935, {3, 1, {-1, 0}} -> 
     0.45, {3, 1, {0, -1}} -> 0.6250000000000001, {3, 1, {-1, -1}} -> 
     0.77, {3, 1, {-1, 1}} -> 0.385, {3, 1, {1, 0}} -> 0.45, {3, 1, {0, 1}} -> 
     0.6250000000000001, {3, 1, {1, 1}} -> 0.77, {3, 1, {1, -1}} -> 
     0.385, {3, 2, {-1, 0}} -> 0.54, {3, 2, {0, -1}} -> 
     0.55, {3, 2, {-1, -1}} -> 0.7050000000000001, {3, 2, {-1, 1}} -> 
     0.25, {3, 2, {1, 0}} -> 0.54, {3, 2, {0, 1}} -> 0.55, {3, 2, {1, 1}} -> 
     0.7050000000000001, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    2, $CellContext`m2Sel$$ = 2, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$79161, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}}, $CellContext`moSel$$ = 
    3, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {7.6000000000000005`, 20, 9.000000000000002}, 
     "numberOfMasses" -> 3, 
     "latticeBasis" -> {{-0.35599999999999987`, 0.98}, {1.3319999999999999`, 
      1.275}}, "latticeNorms" -> {1.0426581414826244`, 1.843867945380037}, 
     "latticeUnitVectors" -> {{-0.3414350167484234, 0.9399053831838625}, {
      0.7223944661207629, 0.6914811894173969}}, 
     "numberLatticeLinesToDisplay" -> {9, 3}, 
     "latticeCellOriginIndexes" -> {{-3, 0}, {-3, 1}, {-2, -1}, {-2, 0}, {-2, 
      1}, {-1, -2}, {-1, -1}, {-1, 0}, {-1, 1}, {-1, 2}, {0, -2}, {0, -1}, {0,
       0}, {0, 1}, {0, 2}, {1, -1}, {1, 0}, {1, 1}, {2, -1}, {2, 0}, {
      3, -1}, {3, 0}}, 
     "reciprocalBasis" -> {{-0.7247365369530373, 0.7571365233109376}, {
      0.5570523970305699, 0.20235780953355387`}}, 
     "reciprocalNorms" -> {1.0480929171242668`, 0.5926685887717703}, 
     "qMaxVec" -> {6.585362017434185, 3.7238465689976477`}, 
     "mObliqueComponents" -> {{0.5795334401964461, 0.16239782635880992`}, {
      0.6709355069745233, 0.7784181985607586}, {0.26431567818287216`, 
      0.5811534395143414}}, 
     "mPosFirstCell" -> {{0.010000000000000009`, 0.7749999999999999}, {0.798, 
      1.65}, {0.6800000000000002, 1.}}, "pointsDataTable" -> CompressedData["
1:eJw1kwtIVEEUhq93d32s6wMREQktkViSHhARPewcEEuJCC0kwkKkIkTMQkRE
SiuzELMw0YiwsIggJCRKRDwXERGJ0JJUzHIxNdF0fayPVbM7Z8aB2WXuzPnP
P985syPrWtpli6ZpYkaYUzfn9auP/xbDHKQ1R5dNpfoYx11F4Y0nLFhs/rqK
puneVKq5M0piFd5oMZq6CtrqoyZgyZlR1e6Zp8O/TlfW5mqo9TfkJdg/wfrb
ua+nsnTDzmtf4+PCRl/h5IyKXyZraU1iRU4/IB/opgstKQ49fg1E9uboOTjK
3/2x3SMS6Oj/btv5S0dsxhUe68RyOz2k8RihEvZ5Fz7z+ANJnNAD8ryG+1jA
hk952DFQjy+PGPQSX7f5J7TWR+0djvtOLBO+DmYy80azkKB8hN0xul8maYa4
rTNjGYLPHfrQVTBOjMllQ+nbYvBfmQVj3t8wibqVfhBi5lhP7NAGvMoTiou0
ZzjOt7QmALUYsf+QMkOFYCdI/VVirM4VGBD4+r9R7NDqzexWXxzhfDOg9pXf
f1vxJONHiZcF88Dp8sYgYvDL8plRi/K5CSJ7YkWw4huw5Y8kv2lKdghALsV3
ANxvOk8efDCpeHpB1tUH5doPI63pwbubAlHGh2Kh6htZbw+UwIGLLSk/VJwN
ZX+sK74heNaMfj67oM7rWNKaXx1p/QiSrwNzuACrJPnaEXmjV903DHeVixuu
Kf1NYmwN/pjM58bI4Is3Kj0fQ9ZzCWR9Zqg2V3yxoeTaB8eEXYeXpD+rcT9n
Ys20rHgvktesRn61G2TfPYEK3tdR6i2C7LMgZHtVVkwX5WjbVHxXKL9NNNxv
quNzvdTBdRgDydsNt4R8pIb7eehYyQbtircD00ZfP+vY7qZHrD8OTu6PPpD8
NmG8R3TMVp3smM32PSTfqxcM5v9C8fbD28x1jeT7t2EdP6ABxTsE/wMrQg8r

      "], "lineTable" -> {{
        Line[{{-0.7920000000000007, -12.645}, {-7.199999999999998, 
         4.995000000000001}}], 
        Line[{{
         0.5399999999999991, -11.370000000000001`}, {-5.8679999999999986`, 
         6.2700000000000005`}}], 
        Line[{{1.871999999999999, -10.095}, {-4.535999999999999, 7.545}}], 
        Line[{{3.203999999999999, -8.82}, {-3.203999999999999, 8.82}}], 
        Line[{{4.535999999999999, -7.545}, {-1.871999999999999, 10.095}}], 
        Line[{{
         5.8679999999999986`, -6.2700000000000005`}, {-0.5399999999999991, 
         11.370000000000001`}}], 
        Line[{{7.199999999999998, -4.995000000000001}, {0.7920000000000007, 
         12.645}}]}, {
        Line[{{-0.7920000000000007, -12.645}, {
         7.199999999999998, -4.995000000000001}}], 
        Line[{{-1.1480000000000006`, -11.665}, {
         6.8439999999999985`, -4.015000000000001}}], 
        Line[{{-1.5040000000000004`, -10.684999999999999`}, {
         6.487999999999999, -3.0349999999999997`}}], 
        Line[{{-1.8600000000000003`, -9.705}, {6.131999999999999, -2.055}}], 
        Line[{{-2.216, -8.725}, {5.775999999999999, -1.0750000000000006`}}], 
        Line[{{-2.572, -7.744999999999999}, {
         5.419999999999999, -0.0950000000000002}}], 
        Line[{{-2.928, -6.765}, {5.063999999999999, 0.8849999999999998}}], 
        Line[{{-3.284, -5.785}, {4.707999999999999, 1.8649999999999998`}}], 
        Line[{{-3.6399999999999997`, -4.805}, {4.351999999999999, 
         2.8449999999999998`}}], 
        Line[{{-3.9959999999999996`, -3.8249999999999997`}, {
         3.9959999999999996`, 3.8249999999999997`}}], 
        Line[{{-4.351999999999999, -2.8449999999999998`}, {
         3.6399999999999997`, 4.805}}], 
        Line[{{-4.707999999999999, -1.8649999999999998`}, {3.284, 5.785}}], 
        Line[{{-5.063999999999999, -0.8849999999999998}, {2.928, 6.765}}], 
        Line[{{-5.419999999999999, 0.0950000000000002}, {2.572, 
         7.744999999999999}}], 
        Line[{{-5.775999999999999, 1.0750000000000006`}, {2.216, 8.725}}], 
        Line[{{-6.131999999999999, 2.055}, {1.8600000000000003`, 9.705}}], 
        Line[{{-6.487999999999999, 3.0349999999999997`}, {1.5040000000000004`,
          10.684999999999999`}}], 
        Line[{{-6.8439999999999985`, 4.015000000000001}, {1.1480000000000006`,
          11.665}}], 
        Line[{{-7.199999999999998, 4.995000000000001}, {0.7920000000000007, 
         12.645}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {3.2926810087170924`, 
    1.8619232844988238`}, $CellContext`qPlaneLoc$$ = {{-3.2926810087170924`, \
-1.8619232844988238`}, {3.2926810087170924`, 
    1.8619232844988238`}}, $CellContext`rawArrayOfMasses$$ = {
    7.6000000000000005`, 20, 
     9.000000000000002}, $CellContext`rawNumberOfMasses$$ = 
    3, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
    3, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
    True, $CellContext`u$$ = {{-0.35599999999999987`, 0.98}, {
    1.3319999999999999`, 1.275}, {0.010000000000000009`, 
    0.7749999999999999}, {0.798, 1.65}, {0.6800000000000002, 1.}}, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       TabView[{"dynamics" -> Column[{
            Dynamic[
             Row[{
               OverVector[
                Style["q", Italic, 10]], " = ", 
               
               Module[{$CellContext`qm$}, $CellContext`qm$ = 
                 ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                Slider2D[
                  
                  Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                  ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
               Style[" 2 \[Pi] ", 10], 
               Style[
                Dynamic[
                 NumberForm[
                  MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
            Style[
             Row[{
               Text["number of time intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`dynMeshSize$$]}], 10], 
            Style[
             Row[{
               Text["time, normalized to one period, "], 
               Style["t", Italic], "/", 
               Style["T", Italic], " = ", 
               Dynamic[
                
                N[($CellContext`tauSliderValue$$ - 
                  1)/$CellContext`dynMeshSize$$]]}], 10], 
            Row[{
              Dynamic[
               Manipulator[
                
                Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {
                1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                ContinuousAction -> True, Appearance -> "Open", 
                AppearanceElements -> {
                 "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                  "FasterSlowerButtons", "DirectionButton"}]]}], 
            Style[
             Row[{
               Text["oscillation scale factor:"]}], 10], 
            Style[
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
            Style[
             Row[{
               Text["angular frequency \[Omega]("], 
               Style["q", Italic], 
               Text["), selection: "], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
         "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
         Column[{
            Style[
             Row[{
               Text["number of mesh intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`freqMeshSize$$]}], 10], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}], "parameters" -> Grid[{{
             Style[
              Row[{
                Text["mass: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                  Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                   ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {0.25, 
                  Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
             Text["\n"], ""}, {
             Text[
              Style["coupling to neighboring: ", 10]], 
             Style[
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]], 10]}, {
             Style[
              Row[{
                Text["horizontal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 1], FontColor -> RGBColor[
                   Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                OverVector[
                 Style["a", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["vertical: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 2], FontColor -> RGBColor[0, 
                   Rational[2, 3], 0]], " || ", 
                OverVector[
                 Style["b", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 3], FontColor -> 
                 RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                " || (", 
                OverVector[
                 Style["b", Italic]], " + ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 4], FontColor -> RGBColor[0, 
                   Rational[2, 3], 
                   Rational[2, 3]]], " || (", 
                OverVector[
                 Style["b", Italic]], " - ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
             Text["\n"], ""}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Text["coupling from "], 
                  Dynamic[
                   $CellContext`massLabel[$CellContext`m1Sel$$]], 
                  Text[" to: "]}], 10]]], 
             Dynamic[
              Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
               Style[
                Dynamic[
                 $CellContext`massLabel[
                  First[
                   Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
               Blank[], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  DeleteCases[
                   
                   Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  $CellContext`kLable[5], ": "}], 10]]], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Dynamic[
                   Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
        Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], ImageSize -> {250, 350}]],
       Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 12}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 3}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 1}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = {
    464., {228., 236.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        12, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10}, $CellContext`rawNumberOfMasses$$ = 
        1, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
        3, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         Switch[$CellContext`tabNumber$$, $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], $CellContext`freqTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
            Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
          Blank[], 
          LocatorPane[
           Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                 Dimensions[#]] < 3, 
               
               Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[$CellContext`rawArrayOfMasses$$]]; 
              If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                  $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                
                While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[$CellContext`kArray$$, All, 1], All, 1]]; 
              If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                
                While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 1], 
               Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                 Part[$CellContext`u$$, 2], 
                 Part[$CellContext`u$$, 
                  2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 2], 
               Part[$CellContext`u$$, 2]]; {
               Part[$CellContext`u$$, 1], 
               
               Part[$CellContext`u$$, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
             If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
             If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
             If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
             If[$CellContext`omegaIndex$$ > 
               2 $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
             ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
              2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
             True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
           $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
           LocatorAutoCreate -> True, ContinuousAction -> False]]]), 
      "Specifications" :> {
        TabView[{"dynamics" -> Column[{
             Dynamic[
              Row[{
                OverVector[
                 Style["q", Italic, 10]], " = ", 
                
                Module[{$CellContext`qm$}, $CellContext`qm$ = 
                  ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                 Slider2D[
                   
                   Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False,
                    ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
                Style[" 2 \[Pi] ", 10], 
                Style[
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
             Style[
              Row[{
                Text["number of time intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`dynMeshSize$$]}], 10], 
             Style[
              Row[{
                Text["time, normalized to one period, "], 
                Style["t", Italic], "/", 
                Style["T", Italic], " = ", 
                Dynamic[
                 
                 N[($CellContext`tauSliderValue$$ - 
                   1)/$CellContext`dynMeshSize$$]]}], 10], 
             Row[{
               Dynamic[
                Manipulator[
                 
                 Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {
                 1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                 ContinuousAction -> True, Appearance -> "Open", 
                 AppearanceElements -> {
                  "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                   "FasterSlowerButtons", "DirectionButton"}]]}], 
             Style[
              Row[{
                Text["oscillation scale factor:"]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
             Style[
              Row[{
                Text["angular frequency \[Omega]("], 
                Style["q", Italic], 
                Text["), selection: "], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
          "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
          Column[{
             Style[
              Row[{
                Text["number of mesh intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`freqMeshSize$$]}], 10], 
             LocatorPane[
              Dynamic[$CellContext`qPlaneLoc$$], 
              Dynamic[
               (Graphics[{
                 Lighter[Gray], 
                 Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                 Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
              ContinuousAction -> False]}], "parameters" -> Grid[{{
              Style[
               Row[{
                 Text["mass: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                   Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                   Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
              Text["\n"], ""}, {
              Text[
               Style["coupling to neighboring: ", 10]], 
              Style[
               Dynamic[
                If[$CellContext`rawNumberOfMasses$$ > 1, 
                 SetterBar[
                  
                  Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   Range[$CellContext`rawNumberOfMasses$$]]], 
                 $CellContext`massLabel[1]]], 10]}, {
              Style[
               Row[{
                 Text["horizontal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 1], FontColor -> RGBColor[
                    Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                 OverVector[
                  Style["a", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["vertical: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 2], FontColor -> RGBColor[0, 
                    Rational[2, 3], 0]], " || ", 
                 OverVector[
                  Style["b", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 3], FontColor -> 
                  RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                 " || (", 
                 OverVector[
                  Style["b", Italic]], " + ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 4], FontColor -> RGBColor[0, 
                    Rational[2, 3], 
                    Rational[2, 3]]], " || (", 
                 OverVector[
                  Style["b", Italic]], " - ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
              Text["\n"], ""}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Text["coupling from "], 
                   Dynamic[
                    $CellContext`massLabel[$CellContext`m1Sel$$]], 
                   Text[" to: "]}], 10]]], 
              Dynamic[
               Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
                Style[
                 Dynamic[
                  $CellContext`massLabel[
                   First[
                    Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
                Blank[], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   DeleteCases[
                    
                    Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   $CellContext`kLable[5], ": "}], 10]]], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Dynamic[
                    Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
         Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
         ImageSize -> {250, 350}], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 12}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10}}, 0, ControlType -> 
         None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{864., {266., 273.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -(Part[$CellContext`qMax, 1]/2), Part[$CellContext`qMax, 1]/
               2, Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -(
                Part[$CellContext`qMax, 2]/2), Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}, PerformanceGoal -> 
           "Quality"]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {342., 
        342.}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, \
$CellContext`n$]/($CellContext`glConstMMax 500)]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               Part[#, 3], 
               FE`glConstSpringColorsByN$$474]]& , $CellContext`cN$]; 
         If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                Part[#, 3], 
                FE`glConstSpringColorsByN$$474]]& , $CellContext`cOrigin$]], 
           Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                  Style["a", Italic]], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                  Style["b", Italic]], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], Attributes[$CellContext`uLoc$] = {Temporary}, 
       Attributes[$CellContext`ld$] = {Temporary}, 
       Attributes[$CellContext`cd$] = {Temporary}, 
       Attributes[$CellContext`m1Ind$] = {Temporary}, 
       Attributes[$CellContext`m2Ind$] = {Temporary}, 
       Attributes[$CellContext`moInd$] = {Temporary}, 
       Attributes[$CellContext`aLoc$] = {Temporary}, 
       Attributes[$CellContext`bLoc$] = {Temporary}, 
       Attributes[$CellContext`mLoc$] = {Temporary}, 
       Attributes[$CellContext`pointsList$] = {Temporary}, 
       Attributes[$CellContext`latticeBasis$] = {Temporary}, 
       Attributes[$CellContext`reciprocalBasis$] = {Temporary}, 
       Attributes[$CellContext`pointsDataTable$] = {Temporary}, 
       Attributes[$CellContext`numberLatticeLinesToDisplay$] = {Temporary}, 
       Attributes[$CellContext`lines$] = {Temporary}, 
       Attributes[$CellContext`cOrigin$] = {Temporary}, 
       Attributes[$CellContext`cN$] = {Temporary}, 
       Attributes[$CellContext`g$] = {Temporary}, 
       Attributes[$CellContext`mScalarArray$] = {Temporary}, 
       Attributes[$CellContext`numberOfMasses$] = {Temporary}, 
       Attributes[$CellContext`scaleLoc$] = {Temporary}, 
       Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
       Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, FE`glConstSpringColorsByN$$474 = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 
       7.6000000000000005`, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]], \
$CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6055229213532424`*^9, {3.6055233758382373`*^9, 3.605523392246176*^9}, {
   3.605523656985318*^9, 3.605523754074871*^9}, {3.605524067847818*^9, 
   3.6055240751742373`*^9}, 3.605524144345194*^9, 3.6055242676772475`*^9, 
   3.6055243639877567`*^9, 3.6055245164274755`*^9, 3.605524593683894*^9, {
   3.6055246502131276`*^9, 3.605524675557577*^9}, 3.605524914592249*^9, {
   3.605524950877324*^9, 3.605525024352527*^9}, {3.6055250950575714`*^9, 
   3.6055251192499547`*^9}, {3.6055252062219296`*^9, 3.605525226185071*^9}, 
   3.6055252985342093`*^9, {3.6055253708163433`*^9, 3.605525397274857*^9}, {
   3.605525442034417*^9, 3.605525469464986*^9}, {3.6055255165876813`*^9, 
   3.6055255276503143`*^9}, {3.6055256033916464`*^9, 3.6055257473548803`*^9}, 
   3.6055258023860283`*^9, {3.6055263422679076`*^9, 3.605526462818803*^9}},
 CellID->28709042]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "DetailsSection"],

Cell[TextData[{
 "The positions of masses within a two-dimensional periodic array of cells \
can be described by summing the lattice vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["r", "\[RightVector]"], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], " ", "=", " ", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["n", "1"], ",", " ", 
        SubscriptBox["n", "2"]}], ")"}]}]], " ", "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["n", "1"], 
      OverscriptBox["a", "\[RightVector]"]}], " ", "+", 
     RowBox[{
      SubscriptBox["n", 
       RowBox[{"2", " "}]], 
      OverscriptBox["b", "\[RightVector]"]}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", representing the origin of each of the lattice cells, and a relative \
vector to the position of each of the masses. With ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]], 
  "InlineMath"],
 " representing the equilibrium position of the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]], "InlineMath"],
 ", the position of that mass is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["r", "\[RightVector]"], 
     OverscriptBox["n", "\[RightVector]"]], "+", 
    SubscriptBox[
     OverscriptBox["p", "\[RightVector]"], "k"]}], TraditionalForm]], 
  "InlineMath"],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.6008874666091995`*^9, 3.600887466629201*^9}, 
   3.6012090394184523`*^9, {3.601382475199787*^9, 3.601382478123955*^9}, {
   3.6034732857841654`*^9, 3.6034733217981653`*^9}, {3.6040828844611397`*^9, 
   3.604082966455151*^9}, {3.605368597034162*^9, 3.6053686027610397`*^9}},
 CellID->143536934],

Cell[TextData[{
 "Let ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["a", "\[RightVector]"], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["r", "\[RightVector]"], 
      OverscriptBox["n", "\[RightVector]"]], "+", 
     SubscriptBox[
      OverscriptBox["p", "\[RightVector]"], "k"], "-", 
     SubscriptBox[
      OverscriptBox["r", "\[RightVector]"], 
      OverscriptBox["m", "\[RightVector]"]], "-", 
     SubscriptBox[
      OverscriptBox["p", "\[RightVector]"], "j"]}]}], TraditionalForm]], 
  "InlineMath"],
 ", with direction ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["a", "^"], 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", represent the equilibrium separation of the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]], "InlineMath"],
 " from the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["j", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["m", "\[RightVector]"]], TraditionalForm]], "InlineMath"],
 ". If the harmonic coupling between these masses has magnitude ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", then the system of equations describing the vector displacement ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["u", "\[RightVector]"], 
    RowBox[{"n", ",", "k"}]], TraditionalForm]], "InlineMath"],
 " for the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in unit cell ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["n", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " from the equilibrium position is given by"
}], "DetailNotes",
 CellChangeTimes->{{3.6008874666091995`*^9, 3.600887467295239*^9}, {
  3.6012090498004904`*^9, 3.601209051237634*^9}, {3.604082974667775*^9, 
  3.6040830798566847`*^9}},
 CellID->185095190],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["m", "k"], " ", 
     SubscriptBox[
      OverscriptBox[
       OverscriptBox["u", "\[RightVector]"], ".."], 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", "k"}]]}], "=", 
    RowBox[{"-", 
     RowBox[{
      UnderscriptBox["\[Sum]", 
       RowBox[{
        OverscriptBox["n", "\[RightVector]"], ",", 
        RowBox[{"k", " ", "\[NotEqual]", 
         OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
      RowBox[{
       SubscriptBox["K", 
        RowBox[{
         OverscriptBox["n", "\[RightVector]"], ",", 
         RowBox[{"k", ";", 
          OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
       RowBox[{
        SubscriptBox["Proj", 
         SubscriptBox[
          OverscriptBox["a", "^"], 
          RowBox[{
           OverscriptBox["n", "\[RightVector]"], ",", 
           RowBox[{"k", ";", 
            OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], "(", 
        RowBox[{
         SubscriptBox[
          OverscriptBox["u", "\[RightVector]"], 
          RowBox[{
           OverscriptBox["n", "\[RightVector]"], ",", "k"}]], "-", 
         SubscriptBox[
          OverscriptBox["u", "\[RightVector]"], 
          RowBox[{
           OverscriptBox["m", "\[RightVector]"], ",", "j"}]]}], ")"}]}]}]}]}],
    TraditionalForm]], "InlineMath"],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.6040830936694613`*^9, 3.604083162653059*^9}},
 CellID->1717657707],

Cell[TextData[{
 "In general, we have one such equation for each ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}], TraditionalForm]], 
  "InlineMath"],
 " pair. A trial solution of the form: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox[
      OverscriptBox["u", "\[RightVector]"], 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", " ", "k", " "}]], "(", "t", 
     ")"}], "=", 
    RowBox[{
     FractionBox[
      RowBox[{
       SubscriptBox[
        OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
       OverscriptBox["q", "\[RightVector]"], ")"}], 
      SqrtBox[
       SubscriptBox["m", "k"]]], " ", 
     SuperscriptBox["e", 
      RowBox[{"I", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          SubscriptBox[
           OverscriptBox["r", "\[RightVector]"], 
           OverscriptBox["n", "\[RightVector]"]], ".", " ", 
          OverscriptBox["q", "\[RightVector]"]}], " ", "-", 
         RowBox[{"\[Omega]", " ", "t"}]}], ")"}]}]]}]}], TraditionalForm]], 
  "InlineMath"],
 " can be used to decouple this system, resulting in a single equation for \
each ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass of the form"
}], "DetailNotes",
 CellChangeTimes->{
  3.601209052017712*^9, {3.604083852219215*^9, 3.604083862112216*^9}, {
   3.6040839192871857`*^9, 3.604083964988751*^9}},
 CellID->160232404],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["\[Omega]", "2"], " ", 
     RowBox[{
      SubscriptBox[
       OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
      OverscriptBox["q", "\[RightVector]"], ")"}]}], " ", "=", " ", 
    RowBox[{
     UnderscriptBox["\[Sum]", 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", 
       RowBox[{"k", " ", "\[NotEqual]", " ", 
        OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
     RowBox[{
      SubscriptBox["K", 
       RowBox[{
        OverscriptBox["n", "\[RightVector]"], ",", 
        RowBox[{"k", ";", 
         OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
      SubscriptBox["Proj", 
       SubscriptBox[
        OverscriptBox["a", "^"], 
        RowBox[{
         OverscriptBox["n", "\[RightVector]"], ",", 
         RowBox[{"k", ";", 
          OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
      RowBox[{"(", 
       RowBox[{
        FractionBox[
         RowBox[{
          SubscriptBox[
           OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
          OverscriptBox["q", "\[RightVector]"], ")"}], 
         SubscriptBox["m", "k"]], "-", " ", 
        RowBox[{
         FractionBox[
          RowBox[{
           SubscriptBox[
            OverscriptBox["\[Epsilon]", "\[RightVector]"], "j"], "(", 
           OverscriptBox["q", "\[RightVector]"], ")"}], 
          SqrtBox[
           RowBox[{
            SubscriptBox["m", "k"], 
            SubscriptBox["m", "j"]}]]], 
         SuperscriptBox["e", 
          RowBox[{"I", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              SubscriptBox[
               OverscriptBox["r", "\[RightVector]"], 
               OverscriptBox["m", "\[RightVector]"]], " ", "-", " ", 
              SubscriptBox[
               OverscriptBox["r", "\[RightVector]"], 
               OverscriptBox["n", "\[RightVector]"]]}], ")"}], ".", " ", 
            OverscriptBox["q", "\[RightVector]"]}]}]]}]}], ")"}]}]}]}], 
   TraditionalForm]], "InlineMath"],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.604083980046534*^9, 3.6040839935712442`*^9}},
 CellID->779035200],

Cell[TextData[{
 "This describes all the steady-state lattice vibrations, the normal modes, \
that can be modeled by this trial solution. Here ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " is a vector in reciprocal space, effectively parameterizing the angular \
velocity ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "=", 
    RowBox[{"\[Omega]", "(", 
     OverscriptBox["q", "\[RightVector]"], ")"}]}], TraditionalForm]], 
  "InlineMath"],
 ". The vector ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    FormBox[
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{
           SubscriptBox[
            OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
           OverscriptBox["q", "\[RightVector]"], ")"}]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]],
     TraditionalForm], "k"], TraditionalForm]], "InlineMath"],
 " is an eigenvector of the equations of motion of the system for this \
assumed solution, where ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Omega]", "2"], TraditionalForm]], "InlineMath"],
 " are the eigenvalues of this system. For an ",
 Cell[BoxData[
  FormBox["N", TraditionalForm]], "InlineMath"],
 "-atom basis, there are ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", " ", "N"}], TraditionalForm]], "InlineMath"],
 " such ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Omega]", "2"], TraditionalForm]], "InlineMath"],
 " eigenvalues per ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " point, each resulting in a different characteristic motion."
}], "DetailNotes",
 CellChangeTimes->{{3.6008875562233257`*^9, 3.600887556236326*^9}, {
   3.6012090526877794`*^9, 3.6012090538738976`*^9}, {3.6013825361482735`*^9, 
   3.601382742763091*^9}, {3.6034734267521653`*^9, 3.6034734457911654`*^9}, 
   3.603473478525165*^9, {3.604084014742115*^9, 3.604084016176835*^9}},
 CellID->72937650],

Cell[TextData[{
 "The rank of the resulting eigenvalue problem depends on the number of \
masses per unit cell, but the complexity of the matrix expression depends on \
the number of neighboring interactions that are considered. For example, \
given lattice vectors ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], ",", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", diagonals ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["r", "\[RightVector]"], "=", 
     RowBox[{
      OverscriptBox["a", "\[RightVector]"], " ", "+", " ", 
      OverscriptBox["b", "\[RightVector]"]}]}], ",", " ", 
    RowBox[{
     OverscriptBox["s", "\[RightVector]"], "=", 
     RowBox[{
      OverscriptBox["a", "\[RightVector]"], " ", "-", " ", 
      OverscriptBox["b", "\[RightVector]"], " "}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", and a one-atom basis, where each unit cell contains a single mass coupled \
with harmonic oscillator forces between only nearest neighbors, the normal \
mode solutions follow from the solution of the eigenvalue problem"
}], "DetailNotes",
 CellChangeTimes->{{3.6008875562233257`*^9, 3.600887556623348*^9}, {
   3.6008880360077677`*^9, 3.600888037934878*^9}, 3.601209054354946*^9, {
   3.603473503436165*^9, 3.6034735037001653`*^9}},
 CellID->69846009],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          SuperscriptBox["\[Omega]", "2"], "0"},
         {"0", 
          SuperscriptBox["\[Omega]", "2"]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], " ", 
     OverscriptBox["\[Epsilon]", "\[RightVector]"]}], " ", "=", 
    RowBox[{
     FractionBox["4", "m"], 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{
        SubscriptBox["k", 
         RowBox[{"1", " "}]], 
        OverscriptBox["a", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["a", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           OverscriptBox["a", "\[RightVector]"], " ", ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], ")"}]}], "+", 
       RowBox[{
        SubscriptBox["k", 
         RowBox[{"2", " "}]], 
        OverscriptBox["b", "^"], " ", 
        RowBox[{
         OverscriptBox["b", "^"], "\[Transpose]"}], 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           OverscriptBox["b", "\[RightVector]"], " ", ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], ")"}]}], "+", 
       RowBox[{
        SubscriptBox["k", "3"], 
        OverscriptBox["r", "^"], " ", 
        RowBox[{
         OverscriptBox["r", "^"], "\[Transpose]"}], 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             OverscriptBox["b", "\[RightVector]"], " ", "+", 
             OverscriptBox["a", "\[RightVector]"]}], " ", ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], ")"}]}], "+", 
       RowBox[{
        SubscriptBox["k", "4"], 
        OverscriptBox["s", "^"], " ", 
        RowBox[{
         OverscriptBox["s", "^"], "\[Transpose]"}], 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", " ", 
            RowBox[{
             OverscriptBox["b", "\[RightVector]"], "-", 
             OverscriptBox["a", "\[RightVector]"]}], ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}]}],
       ")"}], 
     OverscriptBox["\[Epsilon]", "\[RightVector]"]}]}], TraditionalForm]], 
  "InlineMath"],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.598056894559779*^9}, {
   3.598056950150959*^9, 3.5980569832608523`*^9}, {3.598057031767627*^9, 
   3.598057031774627*^9}, {3.598057330464711*^9, 3.598057330604719*^9}, {
   3.5980584907700768`*^9, 3.5980584911520987`*^9}, {3.5991428674046793`*^9, 
   3.5991429352825613`*^9}, 3.5991434894172564`*^9, {3.599143745937928*^9, 
   3.599143747597023*^9}, {3.599144339776894*^9, 3.599144393338958*^9}, {
   3.5999961526324863`*^9, 3.599996166069255*^9}, {3.6000802839234686`*^9, 
   3.6000802840794687`*^9}, {3.600823510848098*^9, 3.6008235167144337`*^9}, {
   3.6012090548449945`*^9, 3.6012090598194923`*^9}, {3.601209092614772*^9, 
   3.6012090941649265`*^9}, {3.6034728607371655`*^9, 3.6034728715201654`*^9}, 
   3.603473513915165*^9, {3.604084056986595*^9, 3.604084142142973*^9}, 
   3.605368685381165*^9, {3.605368716489493*^9, 3.6053687533101063`*^9}},
 CellID->508431597],

Cell[TextData[{
 "Controls are provided to display the dynamics associated with each of the \
characteristic angular frequencies ",
 Cell[BoxData[
  FormBox["\[Omega]", TraditionalForm]]],
 ", for given reciprocal vector values ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 "."
}], "DetailNotes",
 CellID->122369289],

Cell[TextData[{
 "Three tabs are provided in this Demonstration. The primary tab displays the \
dynamics of the solution for particular pair of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     OverscriptBox["q", "\[RightVector]"], ",", 
     RowBox[{"\[Omega]", "(", 
      OverscriptBox["q", "\[RightVector]"], ")"}]}], ")"}], TraditionalForm]],
   "InlineMath"],
 " values. In that tab, selecting \"Play\" for the time control animates the \
lattice vibrations. A scaling control is provided to alter the initial \
magnitude of the eigenvectors, tantamount to picking the initial time \
boundary value constraints. Note that it is possible to select physically \
unrealistic scaling factors that allow for collisions that are not modeled by \
this system."
}], "DetailNotes",
 CellChangeTimes->{
  3.601208839708481*^9, {3.6012090601785283`*^9, 3.6012090619407043`*^9}, {
   3.601382813834156*^9, 3.601382893437709*^9}, {3.6034735604891653`*^9, 
   3.603473590847165*^9}, {3.604084190197336*^9, 3.604084234252029*^9}},
 CellID->476930990],

Cell[TextData[{
 "A second tab provides the dispersion relation, the dependence of angular \
velocity ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "(", 
    OverscriptBox["q", "\[RightVector]"], ")"}], TraditionalForm]], 
  "InlineMath"],
 " on all ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " points."
}], "DetailNotes",
 CellChangeTimes->{
  3.601209062576768*^9, {3.6013829455216885`*^9, 3.6013829491098933`*^9}, {
   3.604084252220057*^9, 3.604084267745439*^9}},
 CellID->450664638],

Cell[TextData[{
 "Finally, a parameters tab provides controls for the spring constants ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", the primitive unit cell lattice vectors ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], ",", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", and the positions of the masses ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]], 
  "InlineMath"],
 " within each unit cell of the lattice. Additional mass position locators, \
up to five total, may be added or deleted by Alt-clicking on the lattice cell \
in the desired location. For mass locator removal, it is necessary to adjust \
one of the other locators so that the removal takes effect. Note that it is \
possible to select equilibrium mass positions that are too close, leading to \
physically unrealistic dynamics, such as masses passing through each other."
}], "DetailNotes",
 CellChangeTimes->{{3.600966198344832*^9, 3.600966236435011*^9}, {
   3.6012090632078314`*^9, 3.6012090644089513`*^9}, {3.601382988189129*^9, 
   3.6013829971846433`*^9}, 3.603472787540165*^9, {3.6034736457561655`*^9, 
   3.6034736467161655`*^9}, {3.604084293130703*^9, 3.6040843368561363`*^9}},
 CellID->557416845],

Cell["\<\
The total number of interactions, even when those interactions are restricted \
to just the neighboring lattice cells, increases quickly as additional masses \
per cell are added. For example, with three masses per unit cell, considering \
only the neighboring and origin cells, there are 29 interactions possible for \
each mass. To simplify the physical constants dialog, distinct \"spring \
constant\" selection is only available for a subset of the possible \
interactions. This imposes the following respective constraints along the \
\"horizontal,\" \"vertical,\" \"NE diagonal,\" and \"NW diagonal\" directions \
connecting the masses across the cells\
\>", "DetailNotes",
 CellChangeTimes->{{3.6008880438402157`*^9, 3.600888044919277*^9}, {
   3.6012090650310135`*^9, 3.6012090662031307`*^9}, 3.6034737026411653`*^9, {
   3.603473825738165*^9, 3.603473830137165*^9}, {3.603473982609165*^9, 
   3.603474006287165*^9}, {3.604081834057509*^9, 3.604081834983363*^9}, {
   3.604084347951393*^9, 3.604084357518306*^9}},
 CellID->204245605],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"0", ",", "1"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"0", ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", "0"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], ")"}]}], ",", "j"}]]}], 
   TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", "1"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], ")"}]}], ",", "j"}]]}], 
   TraditionalForm]], "InlineMath"],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.598056894559779*^9}, {
   3.598056950150959*^9, 3.5980569832608523`*^9}, {3.598057031767627*^9, 
   3.598057031774627*^9}, {3.598057330464711*^9, 3.598057446094325*^9}, {
   3.59805756332403*^9, 3.5980575811080475`*^9}, {3.5980576945015335`*^9, 
   3.5980577077462907`*^9}, {3.5980585058849416`*^9, 3.598058539899887*^9}, {
   3.5982726803130836`*^9, 3.598272680323084*^9}, {3.598396857147249*^9, 
   3.598396862212539*^9}, 3.5983970077038608`*^9, {3.5986527341628847`*^9, 
   3.598652736497018*^9}, {3.599142949402369*^9, 3.599142973472746*^9}, {
   3.599144400390361*^9, 3.5991444194934535`*^9}, {3.599144544232588*^9, 
   3.599144772358636*^9}, {3.5991448024383564`*^9, 3.599144812883954*^9}, {
   3.599996318317963*^9, 3.599996379259449*^9}, {3.600076492258809*^9, 
   3.600076523646064*^9}, {3.6000766422374725`*^9, 3.600076689224755*^9}, {
   3.6000767765225077`*^9, 3.6000772270044994`*^9}, {3.6000776433692303`*^9, 
   3.6000781070644455`*^9}, {3.60007816099374*^9, 3.600078188605788*^9}, {
   3.60007853087039*^9, 3.6000790980561857`*^9}, {3.60007913498145*^9, 
   3.6000792378012314`*^9}, {3.6000792689076858`*^9, 3.600079283852512*^9}, {
   3.6000793585454435`*^9, 3.6000793899326982`*^9}, {3.6000794650156302`*^9, 
   3.600079471318041*^9}, {3.600887622755131*^9, 3.6008876400591207`*^9}, 
   3.6034737205351653`*^9, {3.604081916343145*^9, 3.6040819288437138`*^9}},
 CellID->325571302],

Cell[TextData[{
 "These are labeled ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "1"], TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "2"], TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "3"], TraditionalForm]], "InlineMath"],
 ", and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "4"], TraditionalForm]], "InlineMath"],
 " in the parameters tab, respectively. For example, the first identity above \
is the imposition of an equality constraint on the coupling constants in the \
\"left\" and \"right\" directions separating masses in neighboring \
\"horizontal\" cells (when the lattice is square). Those are the interactions \
directed primarily along the lattice vector directions ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[PlusMinus]", 
    OverscriptBox["a", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 " (primarily since these directions are also adjusted for the positions of \
the masses within the respective cells if different). Similarly, the same \
coupling constants are used for each of the pairs of directions that are \
directed primarily along the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[PlusMinus]", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", \[PlusMinus](",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], "+", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 "), \[PlusMinus](",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], "-", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ") directions separating the lattice cells."
}], "DetailNotes",
 CellChangeTimes->{{3.6008880598061285`*^9, 3.600888064512398*^9}, {
   3.6012090668131914`*^9, 3.6012090675292635`*^9}, {3.603474018903165*^9, 
   3.6034740292301655`*^9}, 3.604081891566828*^9, {3.604084384808313*^9, 
   3.604084421150326*^9}},
 CellID->64527093],

Cell[TextData[{
 "When there is more than mass per unit cell, distinct coupling constants for \
the intra-cell interactions between the masses within the origin unit cell \
may be selected (i.e. ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["0", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["0", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 "). These are labeled ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "5"], TraditionalForm]], "InlineMath"],
 " in the parameters tab."
}], "DetailNotes",
 CellChangeTimes->{{3.600887684261649*^9, 3.6008876842696495`*^9}, 
   3.6008880700537148`*^9, 3.6012090681853285`*^9, {3.603474143359165*^9, 
   3.603474144103165*^9}, {3.604081946086042*^9, 3.604081953111044*^9}},
 CellID->209290908],

Cell["\<\
General theory describing oscillations around lattice equilibrium points can \
be found in [1].\
\>", "DetailNotes",
 CellChangeTimes->{{3.6034741647821655`*^9, 3.6034741680621653`*^9}},
 CellID->30163790],

Cell["Reference", "DetailNotes",
 CellChangeTimes->{
  3.601209069027413*^9, {3.6034741717181654`*^9, 3.603474174842165*^9}},
 CellID->213153736],

Cell[TextData[{
 "[1] N. W. Ashcroft and N. D. Mermin, ",
 StyleBox["Solid State Physics",
  FontSlant->"Italic"],
 ", New York: Holt, Rinehart and Winston, 1976, chapters 21 and 22. "
}], "DetailNotes",
 CellChangeTimes->{
  3.601209069027413*^9, {3.6034741717181654`*^9, 3.603474239538165*^9}, {
   3.6034743012301655`*^9, 3.603474302854165*^9}, 3.6034744439421654`*^9, {
   3.605368566694273*^9, 3.605368568920265*^9}},
 CellID->825555930]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.600887285796858*^9},
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.600887286596904*^9},
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.6008872914131794`*^9},
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.6052813964221563`*^9},
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["one atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208909916481*^9}},
 CellID->476564237],

Cell["two atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208912380481*^9}},
 CellID->245358486],

Cell["n atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.6012089151324806`*^9}},
 CellID->584424833],

Cell["lattice vibration", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.6012089173234806`*^9}},
 CellID->103468090],

Cell["phonon", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208919819481*^9}},
 CellID->21953905],

Cell["reciprocal lattice vector", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208922747481*^9}},
 CellID->733906711],

Cell["angular frequency", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208922739481*^9}},
 CellID->200946478]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "RelatedLinksSection"],

Cell[TextData[ButtonBox["Analysis of Lattice Vibrations in Two Dimensions",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/\
AnalysisOfLatticeVibrationsInTwoDimensions/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/\
AnalysisOfLatticeVibrationsInTwoDimensions/"]], "RelatedLinks",
 CellChangeTimes->{{3.598398001761718*^9, 3.5983980017637177`*^9}, {
  3.5983985448847823`*^9, 3.598398544890783*^9}},
 CellID->24498121],

Cell[TextData[ButtonBox["Motion of Atoms in Crystal",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/MotionOfAtomsInCrystal/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/MotionOfAtomsInCrystal/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981123320417`*^9}, {3.5983985249356413`*^9, 
   3.5983985249386415`*^9}},
 CellID->28998832],

Cell[TextData[ButtonBox["Normal Modes in a Periodic Square Lattice",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/NormalModesInAPeriodicSquareLattice/\
"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/NormalModesInAPeriodicSquareLattice/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981127470655`*^9}, {3.5983984299812107`*^9, 
   3.598398430938265*^9}, {3.598398474839776*^9, 3.5983984748437767`*^9}},
 CellID->63968418],

Cell[TextData[ButtonBox["Simple Harmonic Motion for a Spring",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/SimpleHarmonicMotionForASpring/"], 
   None},
 ButtonNote->
  "http://demonstrations.wolfram.com/SimpleHarmonicMotionForASpring/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981127470655`*^9}, {3.5983984299812107`*^9, 
   3.5983984299832106`*^9}, {3.5983985017343144`*^9, 3.598398501741315*^9}},
 CellID->611518950]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell[TextData[{
 "Contributed by: ",
 ButtonBox["Peeter Joot",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Peeter+Joot"], 
    None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Peeter+Joot"]
}], "Author",
 CellChangeTimes->{
  3.600887159561638*^9, {3.601208952954481*^9, 3.601208952959481*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1584, 765},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ResizeImages"->{
  Cell[1987590, 35941, 312, 8, 30, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[1987905, 35951, 719, 17, 30, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "DragLocators"->{
  Cell[1988627, 35970, 381, 12, 30, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "CreateAndDeleteLocators"->{
  Cell[1989011, 35984, 680, 16, 30, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "SliderZoom"->{
  Cell[1989694, 36002, 844, 21, 30, "ControlSuggestions",
   CellTags->"SliderZoom"]},
 "GamepadControls"->{
  Cell[1990541, 36025, 369, 9, 30, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "AutomaticAnimation"->{
  Cell[1990913, 36036, 1507, 32, 30, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[1992423, 36070, 908, 21, 30, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ResizeImages", 1997671, 36222},
 {"RotateAndZoomIn3D", 1997783, 36225},
 {"DragLocators", 1997896, 36228},
 {"CreateAndDeleteLocators", 1998015, 36231},
 {"SliderZoom", 1998132, 36234},
 {"GamepadControls", 1998241, 36237},
 {"AutomaticAnimation", 1998357, 36240},
 {"BookmarkAnimation", 1998477, 36243}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 101, 1, 98, "DemoTitle"],
Cell[CellGroupData[{
Cell[705, 27, 60, 1, 365, "InitializationSection",
 InitializationCell->True],
Cell[768, 30, 117617, 2705, 14145, "Input",
 InitializationCell->True,
 CellID->454600298]
}, Open  ]],
Cell[CellGroupData[{
Cell[118422, 2740, 29, 0, 311, "ManipulateSection"],
Cell[CellGroupData[{
Cell[118476, 2744, 92254, 1914, 11432, "Input",
 CellID->106836794],
Cell[210733, 4660, 234187, 4215, 554, "Output",
 CellID->119007210]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[444969, 8881, 36, 0, 228, "ManipulateCaptionSection"],
Cell[445008, 8883, 1520, 23, 106, "ManipulateCaption",
 CellID->20961076]
}, Open  ]],
Cell[CellGroupData[{
Cell[446565, 8911, 28, 0, 229, "ThumbnailSection"],
Cell[446596, 8913, 571540, 9699, 554, "Output",
 CellID->554074245]
}, Open  ]],
Cell[CellGroupData[{
Cell[1018173, 18617, 28, 0, 189, "SnapshotsSection"],
Cell[1018204, 18619, 375395, 6538, 546, "Output",
 CellID->791441710],
Cell[1393602, 25159, 313875, 5490, 546, "Output",
 CellID->216361978],
Cell[1707480, 30651, 250831, 4468, 554, "Output",
 CellID->28709042]
}, Open  ]],
Cell[CellGroupData[{
Cell[1958348, 35124, 26, 0, 452, "DetailsSection"],
Cell[1958377, 35126, 1932, 56, 67, "DetailNotes",
 CellID->143536934],
Cell[1960312, 35184, 2596, 81, 66, "DetailNotes",
 CellID->185095190],
Cell[1962911, 35267, 1493, 45, 50, "DetailNotes",
 CellID->1717657707],
Cell[1964407, 35314, 1486, 46, 73, "DetailNotes",
 CellID->160232404],
Cell[1965896, 35362, 2200, 63, 55, "DetailNotes",
 CellID->779035200],
Cell[1968099, 35427, 2469, 66, 76, "DetailNotes",
 CellID->72937650],
Cell[1970571, 35495, 1371, 32, 72, "DetailNotes",
 CellID->69846009],
Cell[1971945, 35529, 3861, 98, 59, "DetailNotes",
 CellID->508431597],
Cell[1975809, 35629, 375, 11, 29, "DetailNotes",
 CellID->122369289],
Cell[1976187, 35642, 1055, 22, 68, "DetailNotes",
 CellID->476930990],
Cell[1977245, 35666, 555, 17, 29, "DetailNotes",
 CellID->450664638],
Cell[1977803, 35685, 1503, 33, 97, "DetailNotes",
 CellID->557416845],
Cell[1979309, 35720, 1051, 16, 86, "DetailNotes",
 CellID->204245605],
Cell[1980363, 35738, 3510, 95, 38, "DetailNotes",
 CellID->325571302],
Cell[1983876, 35835, 2001, 52, 93, "DetailNotes",
 CellID->64527093],
Cell[1985880, 35889, 822, 21, 59, "DetailNotes",
 CellID->209290908],
Cell[1986705, 35912, 215, 5, 28, "DetailNotes",
 CellID->30163790],
Cell[1986923, 35919, 145, 3, 28, "DetailNotes",
 CellID->213153736],
Cell[1987071, 35924, 442, 10, 28, "DetailNotes",
 CellID->825555930]
}, Open  ]],
Cell[CellGroupData[{
Cell[1987550, 35939, 37, 0, 168, "ControlSuggestionsSection"],
Cell[1987590, 35941, 312, 8, 30, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[1987905, 35951, 719, 17, 30, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[1988627, 35970, 381, 12, 30, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[1989011, 35984, 680, 16, 30, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[1989694, 36002, 844, 21, 30, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[1990541, 36025, 369, 9, 30, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[1990913, 36036, 1507, 32, 30, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[1992423, 36070, 908, 21, 30, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1993368, 36096, 30, 0, 208, "SearchTermsSection"],
Cell[1993401, 36098, 174, 3, 28, "SearchTerms",
 CellID->476564237],
Cell[1993578, 36103, 174, 3, 28, "SearchTerms",
 CellID->245358486],
Cell[1993755, 36108, 174, 3, 28, "SearchTerms",
 CellID->584424833],
Cell[1993932, 36113, 179, 3, 28, "SearchTerms",
 CellID->103468090],
Cell[1994114, 36118, 165, 3, 28, "SearchTerms",
 CellID->21953905],
Cell[1994282, 36123, 185, 3, 28, "SearchTerms",
 CellID->733906711],
Cell[1994470, 36128, 177, 3, 28, "SearchTerms",
 CellID->200946478]
}, Open  ]],
Cell[CellGroupData[{
Cell[1994684, 36136, 31, 0, 188, "RelatedLinksSection"],
Cell[1994718, 36138, 468, 10, 23, "RelatedLinks",
 CellID->24498121],
Cell[1995189, 36150, 486, 11, 23, "RelatedLinks",
 CellID->28998832],
Cell[1995678, 36163, 575, 12, 23, "RelatedLinks",
 CellID->63968418],
Cell[1996256, 36177, 564, 12, 23, "RelatedLinks",
 CellID->611518950]
}, Open  ]],
Cell[CellGroupData[{
Cell[1996857, 36194, 25, 0, 149, "AuthorSection"],
Cell[1996885, 36196, 384, 11, 23, "Author"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
