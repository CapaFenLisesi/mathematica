(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[   1895220,      34420]
NotebookOptionsPosition[   1889298,      34244]
NotebookOutlinePosition[   1890947,      34294]
CellTagsIndexPosition[   1890595,      34282]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Phonon Modes for 2D Lattice Vibrations", "DemoTitle",
 CellChangeTimes->{3.600887141142584*^9}],

Cell[CellGroupData[{

Cell["", "InitializationSection",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{
     "glConstMinSquaredDistanceFromOrigin", ",", 
      "glConstMinAngleBetweenLatticeVectors", ",", "glConstLocDefault", ",", 
      "glConstDefaultMass", ",", "glConstKDefaults", ",", "glConstKMin", ",", 
      "glConstKMax", ",", "glConstMMax", ",", "glConstWindowHalfWidth", ",", 
      "glConstSpringColors", ",", "glConstPrimaryDisplaySize", ",", 
      "glConstTextDisplayOffsetHack", ",", "glConstNeighboringCellIndexes", 
      ",", "glConstDynPlotRange", ",", "glConstSpringColorsByN"}], "]"}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"glConstMinSquaredDistanceFromOrigin", " ", "=", " ", "0.1"}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstMinAngleBetweenLatticeVectors", "=", 
     RowBox[{"Pi", "/", "6"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstLocDefault", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.1", ",", "1.3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1.9", ",", "0.8"}], "}"}]}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstDefaultMass", "=", "20"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKDefaults", "=", 
     RowBox[{"{", 
      RowBox[{"0.25", ",", "0.25", ",", "0.25", ",", "0.25", ",", "0.25"}], 
      "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKMin", "=", "0.05"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKMax", "=", "1"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstMMax", "=", "30"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstWindowHalfWidth", "=", "3"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstSpringColors", "=", 
     RowBox[{"Darker", "@", 
      RowBox[{"{", 
       RowBox[{
       "Orange", ",", "Green", ",", "Purple", ",", "Cyan", ",", "Yellow"}], 
       "}"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstPrimaryDisplaySize", "=", 
     RowBox[{"{", 
      RowBox[{"380", ",", "380"}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstTextDisplayOffsetHack", "=", 
     RowBox[{"{", 
      RowBox[{"0.25", ",", "0.25"}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstNeighboringCellIndexes", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"glConstDynPlotRange", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", " ", 
         "glConstWindowHalfWidth"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", " ", 
         "glConstWindowHalfWidth"}], "}"}]}], "}"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], "}"}], "\[Rule]", 
       RowBox[{"RGBColor", "[", "...", "]"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"-", "1"}]}], "}"}], "\[Rule]", 
       RowBox[{"RGBColor", "[", "...", "]"}]}], ",", " ", "..."}], "}"}], 
    "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"glConstSpringColorsByN", " ", "=", " ", 
     RowBox[{"DeleteDuplicates", "@", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"s", " ", 
            RowBox[{
             RowBox[{"Append", "[", 
              RowBox[{"glConstNeighboringCellIndexes", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
           RowBox[{"glConstSpringColors", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"s", ",", " ", 
            RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",", 
          " ", 
          RowBox[{"{", 
           RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", "1"}], 
       "]"}]}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{"Future", " ", "possible", " ", "maintainance", " ", 
     RowBox[{"TODOs", ":", "\[IndentingNewLine]", GridBox[{
        {
         RowBox[{
          RowBox[{
          "implement", " ", "a", " ", "min", " ", "separation", " ", "for", 
           " ", "the", " ", "equilibrium", " ", "mass", " ", "positions", " ",
            "too", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
             "as", " ", "done", " ", "for", " ", "the", " ", "lattice", " ", 
              "vectors"}], ")"}], ".", " ", "\[IndentingNewLine]", 
            "Trickier"}]}], ",", " ", 
          RowBox[{
          "since", " ", "that", " ", "should", " ", "be", " ", "based", " ", 
           "on", " ", "the", " ", "separations", " ", "in", " ", "the", " ", 
           "origin", " ", "cell"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{
          "and", " ", "not", " ", "the", " ", "obsolute", " ", "separations", 
           " ", "of", " ", "the", " ", 
           RowBox[{"locators", ".", "\[IndentingNewLine]", "Even"}], " ", 
           "if", " ", "that", " ", "is", " ", "done"}], ",", " ", 
          RowBox[{"that", " ", 
           RowBox[{"doesn", "'"}], "t", " ", "mean", " ", "that", " ", "the", 
           " ", "scaling", " ", 
           RowBox[{"won", "'"}], "t", " ", "allow", " ", "for", " ", 
           "overlap", " ", "in", " ", "the", " ", "dynamic", " ", 
           RowBox[{"tab", "."}]}]}]},
        {
         RowBox[{
         "would", " ", "be", " ", "cool", " ", "to", " ", "make", " ", "qLoc",
           " ", "a", " ", "pair", " ", "of", " ", "Locators", " ", 
          RowBox[{"that", ":", "\[IndentingNewLine]", " ", 
           RowBox[{
           "trace", " ", "out", " ", "constrained", " ", "positions", " ", 
            "along", " ", "the", " ", "2", " ", "Pi", " ", "scaled", " ", 
            "reciprocal", " ", "lattice", " ", 
            RowBox[{"vectors", ".", "\[IndentingNewLine]", 
             RowBox[{"(", 
              RowBox[{
              "returning", " ", "the", " ", "distance", " ", "from", " ", 
               "the", " ", "origin", " ", "of", " ", "each", " ", "of", " ", 
               "those", " ", "locators"}], ")"}]}]}]}]}]},
        {
         RowBox[{"a", " ", "message", " ", "box", " ", "on", " ", "user", " ", 
          RowBox[{"error", ":", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"-", " ", "when"}], " ", "an", " ", "angle", " ", "or", 
            " ", "distance", " ", "from", " ", "origin", " ", "change", " ", 
            "has", " ", "driven", " ", "a", " ", "reset", " ", "of", " ", 
            "the", " ", "lattice", " ", 
            RowBox[{"vectors", ".", "\[IndentingNewLine]", 
             RowBox[{"-", " ", "when"}]}], " ", "too", " ", "many", " ", "of",
             " ", "the", " ", "locators", " ", "have", " ", "been", " ", 
            "deleted", " ", "and", " ", "a", " ", "forced", " ", "reset", " ",
             "to", " ", "the", " ", "defaults", " ", 
            RowBox[{"occurs", "."}]}]}]}]},
        {
         RowBox[{
         "Can", " ", "the", " ", "frequency", " ", "qPlaneLoc", " ", 
          "LocatorPane", " ", "look", " ", "more", " ", "like", " ", 
          "Slider2D", " ", "in", " ", "the", " ", "dynamics", " ", "tab", " ",
           "for", " ", 
          RowBox[{"consistency", "?"}]}]},
        {
         RowBox[{
          RowBox[{
          "Am", " ", "using", " ", "a", " ", "calculated", " ", "value", " ", 
           "for", " ", "the", " ", "max", " ", "freq", " ", "for", " ", "the",
            " ", "freq", " ", "plot", " ", "intersection", " ", 
           RowBox[{"plane", ".", " ", "\[IndentingNewLine]", "Hardcoded"}], 
           " ", "this", " ", "to", " ", "magic", " ", "#", " ", 
           RowBox[{"that", "'"}], "s", " ", "out", " ", "of", " ", "the", " ",
            "graphic", " ", 
           RowBox[{"(", "23", ")"}]}], ",", " ", 
          RowBox[{
          "but", " ", "that", " ", "could", " ", "be", " ", "wrong", " ", 
           "for", " ", "some", " ", "params"}]}]},
        {
         RowBox[{
          RowBox[{
          "Scaling", " ", "of", " ", "the", " ", "masses", " ", "ended", " ", 
           "up", " ", "different", " ", "for", " ", "the", " ", "dynPlot", 
           " ", 
           RowBox[{"vs", ".", " ", "parameters"}], " ", 
           RowBox[{"tab", ".", " ", "\[IndentingNewLine]", "Hacked"}], " ", 
           "the", " ", "dynPlot", " ", "scaling", " ", "for", " ", "now"}], 
          ",", " ", 
          RowBox[{"to", " ", "be", " ", "a", " ", "bit", " ", 
           RowBox[{"closer", "."}]}]}]}
       },
       GridBoxDividers->{
        "Columns" -> {True, {False}, True}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{True}}, "RowsIndexed" -> {}}]}]}], "\[IndentingNewLine]",
     "*)"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "checkAgainstRange", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkAgainstRange", "::", "usage"}], " ", "=", " ", 
     "\"\<This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator.\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkAgainstRange", "[", 
      RowBox[{
      "v_", ",", "default_", ",", "lowerLimit_", ",", " ", "upperLimit_", ",",
        " ", 
       RowBox[{"typeFunc_", " ", ":", " ", "NumberQ"}]}], "]"}], " ", ":=", 
     " ", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"typeFunc", "[", "v", "]"}], ",", "v", ",", " ", 
           "default"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"result", " ", "<=", " ", "upperLimit"}], ",", " ", 
           "result", ",", "default"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"result", " ", ">=", " ", "lowerLimit"}], ",", " ", 
           "result", ",", "default"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "result"}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "springPoints", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Based", " ", "on", " ", "my", " ", "ListLinePlot", " ", "answer", " ", 
     "posted", " ", 
     RowBox[{"in", ":", " ", 
      ButtonBox[
       RowBox[{
        RowBox[{"http", ":"}], "//", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
           "a"}], "/", "37228"}], "/", "10"}]}],
       BaseStyle->"Hyperlink",
       ButtonData->{
         URL["http://mathematica.stackexchange.com/a/37228/10"], None},
       ButtonNote->"http://mathematica.stackexchange.com/a/37228/10"]}]}], 
    " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"springPoints", "::", "usage"}], " ", "=", " ", 
     "\"\<springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"springPoints", "[", " ", 
      RowBox[{"a12_List", ",", " ", 
       RowBox[{"n_Integer:", "8"}], ",", 
       RowBox[{"h_:", ".05"}], ",", " ", 
       RowBox[{"f_:", " ", "0.1"}]}], " ", "]"}], " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "a1", ",", " ", "a2", ",", " ", "n1", ",", " ", "springDiff", ",", 
         " ", "nd", ",", " ", "r", ",", " ", "r1"}], " ", "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a1", ",", " ", "a2"}], "}"}], " ", "=", " ", "a12"}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"n1", " ", "=", " ", 
         RowBox[{"Norm", "[", "a1", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"springDiff", " ", "=", " ", 
         RowBox[{"a2", " ", "-", " ", "a1"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nd", " ", "=", " ", 
         RowBox[{"Norm", "[", "springDiff", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", " ", "=", " ", 
         RowBox[{"RotationMatrix", "[", 
          RowBox[{"ArcTan", " ", "@@", "  ", "springDiff"}], " ", "]"}]}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"r1", " ", "=", " ", 
         RowBox[{"r", " ", ".", " ", 
          RowBox[{"{", 
           RowBox[{"n1", ",", " ", "0"}], "}"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", " ", 
                 RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                 RowBox[{"t", " ", 
                  RowBox[{"(", 
                   RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}]}], ",", " ", 
                RowBox[{"h", " ", 
                 RowBox[{"Sin", "[", " ", 
                  RowBox[{"2", " ", "Pi", " ", "n", " ", "t"}], "]"}]}]}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", " ", 
                 RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}], " ", "+", " ", 
                 RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", 
                 RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}]}], "\[IndentingNewLine]", "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "indexLabel", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"indexLabel", "::", "usage"}], " ", "=", " ", 
     "\"\<\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"indexLabel", " ", "=", " ", 
     RowBox[{
      RowBox[{"Subscript", "[", 
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{"#1", ",", "Italic"}], "]"}], ",", " ", "#2"}], "]"}], " ", 
      "&"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "kLable", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"kLable", "::", "usage"}], " ", "=", " ", 
     "\"\<SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"kLable", " ", "=", " ", 
     RowBox[{
      RowBox[{"Style", "[", " ", 
       RowBox[{
        RowBox[{"indexLabel", "[", 
         RowBox[{"\"\<k\>\"", ",", " ", "#"}], "]"}], ",", " ", 
        RowBox[{"FontColor", "\[Rule]", 
         RowBox[{"glConstSpringColors", "[", 
          RowBox[{"[", "#", "]"}], "]"}]}]}], " ", "]"}], " ", "&"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "massColors", " ", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"massColors", " ", ":=", " ", 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Darker", "[", 
         RowBox[{"{", " ", 
          RowBox[{
          "Blue", ",", " ", "Green", ",", " ", "Purple", ",", " ", "Red", ",",
            " ", "Orange"}], " ", "}"}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"Mod", "[", 
           RowBox[{"#", ",", " ", "5"}], "]"}], " ", "+", " ", "1"}], "]"}], 
        " ", "]"}], " ", "&"}], " ", ")"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "massLabel", " ", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"massLabel", " ", ":=", " ", 
     RowBox[{
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{"indexLabel", "[", 
         RowBox[{"\"\<m\>\"", ",", " ", "#"}], "]"}], ",", " ", 
        RowBox[{"massColors", "[", "#", "]"}]}], "]"}], " ", "&"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcLineTable", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcLineTable", "[", " ", 
      RowBox[{"n_List", ",", " ", "b_List", ",", " ", "i_List"}], " ", "]"}], 
     " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"first", ",", " ", "second"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"first", ",", " ", "second"}], "}"}], " ", "=", " ", "i"}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Line", "[", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"-", 
                RowBox[{"n", "[", 
                 RowBox[{"[", "first", "]"}], "]"}]}], 
               RowBox[{"b", "[", 
                RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
              RowBox[{"j", " ", 
               RowBox[{"b", "[", 
                RowBox[{"[", "second", "]"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"n", "[", 
                RowBox[{"[", "first", "]"}], "]"}], 
               RowBox[{"b", "[", 
                RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
              RowBox[{"j", " ", 
               RowBox[{"b", "[", 
                RowBox[{"[", "second", "]"}], "]"}]}]}]}], "}"}], " ", 
           "\[IndentingNewLine]", "]"}], " ", "\[IndentingNewLine]", ",", " ", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", 
            RowBox[{"-", 
             RowBox[{"n", "[", 
              RowBox[{"[", "second", "]"}], "]"}]}], ",", " ", 
            RowBox[{"n", "[", 
             RowBox[{"[", "second", "]"}], "]"}]}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcReciprocalBasis", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcReciprocalBasis", "::", "usage"}], " ", "=", " ", 
     "\"\<Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcReciprocalBasis", "[", "loc_List", "]"}], " ", ":=", " ", 
     RowBox[{"Inverse", "[", " ", 
      RowBox[{"Transpose", "[", " ", "loc", " ", "]"}], " ", "]"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "nMassesFromLocArray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"nMassesFromLocArray", "[", "uLoc_", "]"}], " ", ":=", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Dimensions", "[", "uLoc", "]"}], " ", "//", " ", "First"}], 
        ")"}], " ", "-", "2"}], ")"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "adjustedmoSel", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"adjustedmoSel", "[", 
      RowBox[{"rNumM_", ",", "mOrigInd_", ",", "m1Ind_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"rNumM", ">", "2"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", " ", 
        RowBox[{
         RowBox[{"mOrigInd", "\[Equal]", "m1Ind"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"First", "[", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Range", "[", "rNumM", "]"}], ",", "m1Ind"}], "]"}], 
          "]"}], ",", "\[IndentingNewLine]", "mOrigInd"}], " ", 
        "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"First", "@", 
        RowBox[{"Delete", "[", 
         RowBox[{
          RowBox[{"Range", "[", "2", "]"}], ",", "m1Ind"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "constructKArrayElements", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"constructKArrayElements", "[", " ", 
      RowBox[{"i_Integer", ",", " ", "j_Integer"}], "  ", "]"}], " ", ":=", 
     " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "a", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"a", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "j", ",", " ", 
                RowBox[{"s", " ", 
                 RowBox[{"glConstNeighboringCellIndexes", "[", 
                  RowBox[{"[", "n", "]"}], "]"}]}]}], "}"}], " ", "\[Rule]", 
              " ", 
              RowBox[{"glConstKDefaults", "[", 
               RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"s", ",", " ", 
               RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",",
              " ", 
             RowBox[{"{", 
              RowBox[{"n", ",", " ", "4"}], "}"}]}], " ", "]"}], ",", " ", 
           "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"i", " ", "<", " ", "j"}], ",", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"a", ",", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"i", ",", "j", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "}"}], " ", "\[Rule]", " ", 
             RowBox[{"glConstKDefaults", "[", 
              RowBox[{"[", "5", "]"}], "]"}]}]}], "]"}], ",", " ", "a"}], " ",
          "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "constructKArray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"constructKArray", "[", " ", "r_Integer", " ", "]"}], " ", ":=", 
     " ", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"constructKArrayElements", "[", 
          RowBox[{"i", ",", "j"}], "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "r"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"j", ",", "r"}], "}"}]}], "]"}], ",", " ", "2"}], "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnAlteredKArrayElements", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnAlteredKArrayElements", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", 
       "ni_Integer", ",", "v_"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"kA", "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"glConstNeighboringCellIndexes", "[", 
               RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "_"}], "]"}], 
          "\[RuleDelayed]", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"glConstNeighboringCellIndexes", "[", 
               RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "v"}], "]"}]}], 
         ",", 
         RowBox[{
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"-", 
               RowBox[{"glConstNeighboringCellIndexes", "[", 
                RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "_"}], "]"}],
           "\[RuleDelayed]", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"-", 
               RowBox[{"glConstNeighboringCellIndexes", "[", 
                RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "v"}], 
           "]"}]}]}], "}"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnAlteredKarrayOriginElement", "]"}], ";"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnAlteredKarrayOriginElement", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer", ",", "v_"}], 
      "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "m1oSet", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"m1oSet", "=", 
         RowBox[{"Append", "[", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"kA", "/.", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Rule", "[", 
            RowBox[{"m1oSet", ",", "_"}], "]"}], "\[RuleDelayed]", 
           RowBox[{"Rule", "[", 
            RowBox[{"m1oSet", ",", "v"}], "]"}]}], ")"}]}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "selectVFromKarray", "]"}], ";"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"To", " ", "refresh", " ", "k1"}], ",", "k2", ",", "k3", ",", 
     RowBox[{
     "k4", " ", "after", " ", "changing", " ", "m1Sel", " ", "or", " ", 
      RowBox[{"m2Sel", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"selectVFromKarray", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", 
       "ni_Integer"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m1Ind", ",", "m2Ind", ",", 
         RowBox[{"glConstNeighboringCellIndexes", "[", 
          RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], "/.", "kA"}], ")"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "selectOriginVFromKarray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "To", " ", "refresh", " ", "k5", " ", "after", " ", "changing", " ", 
     "m1Sel", " ", "and", " ", "moSel"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"selectOriginVFromKarray", "[", 
      RowBox[{"kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer"}], "]"}], 
     ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"Sort", "[", 
          RowBox[{"{", 
           RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "/.", "kA"}], ")"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnKarrayForAdditionalMassIndex", "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnKarrayForAdditionalMassIndex", "[", " ", 
      RowBox[{"kA_List", ",", "nmNew_Integer"}], " ", "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "k2", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"k2", " ", "=", " ", 
         RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"constructKArrayElements", "[", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], ")"}], "/@",
             " ", 
            RowBox[{"(", 
             RowBox[{"Select", "[", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"Table", "[", " ", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", " ", "nmNew"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"j", ",", " ", "nmNew"}], "}"}]}], "]"}], ",", 
                 " ", "1"}], "]"}], ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"Max", "[", "#", "]"}], " ", "\[Equal]", " ", 
                 "nmNew"}], " ", "&"}]}], "]"}], ")"}]}], ",", " ", "2"}], 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"kArray", ",", " ", "k2"}], "]"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"kA", ",", " ", "k2"}], "}"}], ",", " ", "1"}], "]"}]}]}], 
      " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "resetLatticeVectorsIfAngleTooSmall", "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
      RowBox[{"uLoc_List", ",", "minAngle_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "t", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"t", " ", "=", " ", 
         RowBox[{"Abs", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{
            RowBox[{"Normalize", "[", 
             RowBox[{"uLoc", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", ".", " ", 
            RowBox[{"Normalize", "[", 
             RowBox[{"uLoc", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}], "]"}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"t", " ", ">", " ", 
            RowBox[{"Pi", "/", "2"}]}], ",", " ", 
           RowBox[{"Pi", "-", "t"}], ",", " ", "t"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", " ", 
         RowBox[{
          RowBox[{"t", " ", "<", " ", "minAngle"}], ",", 
          "\[IndentingNewLine]", "glConstLocDefault", ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"uLoc", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
            RowBox[{"uLoc", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "projOpU", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"projOpU", "[", "v_List", "]"}], " ", ":=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "^", "2"}], ",", " ", 
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], 
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], 
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "^", "2"}]}], "}"}]}], "}"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"projOp", "::", "usage"}], " ", "=", " ", 
     "\"\<given an input vector \!\(\*OverscriptBox[\(v\), \
\(\[RightVector]\)]\) = {\!\(\*SubscriptBox[\(v\), \(x\)]\), \
\!\(\*SubscriptBox[\(v\), \(y\)]\)}, compute the projection matrix operator \
along the unit vector in that direction.\n\n   projOp[{1, 0}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"1\", \"0\"},
{\"0\", \"0\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{0, 1}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"0\", \"0\"},
{\"0\", \"1\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{a,b}] // MatrixForm = \!\
\(\*Cell[TextData[Cell[BoxData[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{
FractionBox[
SuperscriptBox[\"a\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]},
{
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
SuperscriptBox[\"b\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}]],
CellChangeTimes->{{3.5990911441851797`*^9, 3.599091144641206*^9}, \
3.5990913830438423`*^9, 3.5990915191646276`*^9, 3.599091555028679*^9, \
3.599091735722014*^9, {3.599091916353346*^9, 3.599091928988068*^9}}]]]\)\n\
\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "projOp", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"projOp", "[", "v_List", "]"}], " ", ":=", " ", 
     RowBox[{
      RowBox[{"projOpU", "[", "v", "]"}], "/", 
      RowBox[{"(", 
       RowBox[{"v", ".", " ", "v"}], ")"}]}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "relativeDifferences", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"relativeDifferences", "::", "usage"}], " ", "=", " ", 
     "\"\<Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"relativeDifferences", "[", " ", 
      RowBox[{"r_List", ",", "mp_List", ",", " ", 
       RowBox[{"{", 
        RowBox[{
        "mIndex1_Integer", ",", " ", "mIndex2_Integer", ",", " ", "n_List"}], 
        "}"}]}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "d", ",", " ", "pOrigin", ",", " ", "pOther", ",", " ", "dn"}], "}"}],
        ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"pOrigin", " ", "=", " ", 
         RowBox[{"mp", "[", 
          RowBox[{"[", " ", "mIndex1", " ", "]"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"pOther", " ", "=", " ", 
         RowBox[{
          RowBox[{"mp", "[", 
           RowBox[{"[", " ", "mIndex2", " ", "]"}], "]"}], "+", " ", 
          RowBox[{"n", " ", ".", " ", "r"}]}]}], "  ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"d", " ", "=", " ", 
         RowBox[{"pOther", " ", "-", " ", "pOrigin"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dn", " ", "=", " ", 
         RowBox[{"d", " ", ".", "d"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"dn", ",", " ", "pOrigin", ",", " ", "pOther", ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"projOpU", "[", "d", "]"}], "/", "dn"}], "  ", 
           RowBox[{"(*", 
            RowBox[{"//", " ", "MatrixForm"}], "*)"}], ")"}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calculateCouplings", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calculateCouplings", "::", "usage"}], " ", "=", " ", 
     "\"\<Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions.\>\""}], 
    " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calculateCouplings", "[", 
      RowBox[{"ld_List", ",", " ", "kA_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "t", ",", " ", "t1", ",", " ", "t2", ",", " ", "r", ",", " ", "mp", 
         ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"r", ",", " ", "mp", ",", " ", "numberOfMasses"}], "}"}], 
         " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", " ", "\"\<mPosFirstCell\>\"", ",", 
            " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}],
         " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Append", "[", 
            RowBox[{"#", ",", " ", 
             RowBox[{"relativeDifferences", "[", 
              RowBox[{"r", ",", " ", "mp", ",", " ", 
               RowBox[{"First", "[", "#", "]"}]}], "]"}]}], " ", "]"}], "&"}],
           "/@", " ", 
          RowBox[{"(", 
           RowBox[{"kA", "/.", " ", 
            RowBox[{"Rule", " ", "\[Rule]", " ", "List"}]}], ")"}]}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "}"}], ",", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "3", "]"}], "]"}]}], "}"}], ",", " ", "1"}], 
            "]"}], " ", "&"}], "/@", " ", "t"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"t1", " ", "=", " ", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Select", "[", " ", 
               RowBox[{"t", ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                    "i"}], ")"}], " ", "&&", " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "\[NotEqual]", " ", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0"}], "}"}]}], ")"}]}], " ", 
                 "&"}]}], "]"}], ")"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "[", 
                RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
           "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{"t", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "3", "]"}], "]"}], " ", "==", " ", 
             RowBox[{"{", 
              RowBox[{"0", ",", " ", "0"}], "}"}]}], " ", "&"}]}], "]"}]}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "rest", " ", "of", " ", "the", " ", 
          RowBox[{"permutations", ":"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"t2", ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", " ", 
                   RowBox[{"Drop", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}]}], "}"}], ",", " ", 
                 "1"}], "]"}], " ", "&"}], "/@", " ", "t2"}]}], "}"}], ",", 
           " ", "1"}], "]"}]}], "  ", ";", "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Select", "[", " ", 
               RowBox[{"t2", ",", " ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                   "i"}], ")"}], " ", "&"}]}], "]"}], ")"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "[", 
                RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
           "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"t2", ",", " ", "t1"}], "}"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "spScaled", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"spScaled", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"s1_List", ",", "s2_List"}], "}"}], ",", " ", "scaleKValue_", 
       ",", " ", "referenceSepSquared_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "ds", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ds", " ", "=", " ", 
         RowBox[{"s2", " ", "-", " ", "s1"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"springPoints", "[", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2"}], "}"}], ",", 
          RowBox[{"Ceiling", "[", 
           RowBox[{"12", " ", "scaleKValue", " ", 
            RowBox[{"Sqrt", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"ds", ".", "ds"}], ")"}], "/", "referenceSepSquared"}],
              "]"}]}], "]"}]}], " ", "]"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "oneTermOfdynamicsMatrix", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"oneTermOfdynamicsMatrix", "::", "usage"}], " ", "=", " ", 
     "\"\<\!\(TraditionalForm\`\(grab\\\ data\\\ \(from : \\\ \
rawArrayOfMasses\), \\\ parameterLocatorDependencies, \
\[IndentingNewLine]\(\(couplingData[\([_]\)]\)[\([_]\)]\)[\([_]\)]\\\  = \\\ \
{k, \\\ j, \\\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \\\ \
\*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\\  + \\\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]
ex : \\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]
to\\\ form\\\ equations\\\ of\\\ the\\\ \(form : \
\[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\\  = \\\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\\  \[NotEqual] \\\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\\ \
\((\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\
\[RightVector]\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), \
SubscriptBox[\(m\), \(k\)]] - \\\ \
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(j\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), \
SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \*SubscriptBox[\(m\), \(j\)]\)]] \
\*SuperscriptBox[\(e\), \(I\\\ \((\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\\  . \\\ \
\*OverscriptBox[\(q\), \(\[RightVector]\)]\\\ )\)\)])\)\[IndentingNewLine]
Note\\\ that\\\ qVec\\\ here\\\ is\\\ intended\\\ to\\\ be\\\ an\\\ undefined\
\\\ global . \\\ \\\ Is\\\ there\\\ a\\\ way\\\ to\\\ do\\\ that\\\ \
\(\(programatically\)\(?\)\)\)\)\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"oneTermOfdynamicsMatrix", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "k_Integer", ",", " ", "j_Integer", ",", " ", "mVec_List", ",", " ", 
         "kS_", ",", " ", "_", ",", "_", ",", "_", ",", "proj_List"}], "}"}], 
       ",", " ", "r_List", ",", " ", "mk_", ",", " ", "epsilon_List", ",", 
       " ", "mA_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"(", 
      RowBox[{"kS", " ", 
       RowBox[{"proj", "  ", ".", 
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"epsilon", "[", 
            RowBox[{"[", "k", "]"}], "]"}], "/", "mk"}], " ", "-", " ", 
          RowBox[{
           RowBox[{"epsilon", "[", 
            RowBox[{"[", "j", "]"}], "]"}], 
           RowBox[{
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{"I", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"mVec", " ", ".", " ", "r"}], ")"}], ".", " ", 
                 "qVec"}], ")"}]}], ")"}]}], "/", 
            RowBox[{"Sqrt", "[", " ", 
             RowBox[{"mk", " ", 
              RowBox[{"mA", "[", 
               RowBox[{"[", "j", "]"}], "]"}]}], " ", "]"}]}]}]}], ")"}]}]}], 
      "  ", ")"}]}], "  ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "dynamicsMatrix", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dynamicsMatrix", "[", 
      RowBox[{"ld_List", ",", " ", "cd_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "cdFlatAndSorted", ",", " ", "r", ",", " ", "res", ",", " ", 
         "epsilon", ",", " ", "m", ",", "mScalarArray", ",", " ", 
         "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"cdFlatAndSorted", " ", "=", " ", 
         RowBox[{"SplitBy", "[", " ", 
          RowBox[{
           RowBox[{"Sort", "@", 
            RowBox[{"Flatten", "[", 
             RowBox[{"cd", ",", " ", "2"}], "]"}]}], " ", ",", " ", "First"}],
           " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"r", ",", "mScalarArray", ",", " ", "numberOfMasses"}], 
          "}"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", 
            " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}],
         " ", ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"Here", " ", 
            SubscriptBox[
             OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], " ", 
            RowBox[{"(", 
             RowBox[{"=", 
              RowBox[{"epsilon", "[", 
               RowBox[{"[", "k", "]"}], "]"}]}], ")"}], " ", "is", " ", 
            "represented", " ", "as", " ", "a", " ", "2", "x", 
            RowBox[{"(", 
             RowBox[{"2", "N"}], ")"}], " ", "matrix", " ", "with", " ", 
            "the", " ", "vector", " ", "factored", " ", 
            RowBox[{"out", ".", "  ", "For"}], " ", "example", " ", "with", 
            " ", "N"}], " ", "=", " ", "3"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox[
            OverscriptBox["\[Epsilon]", "\[RightVector]"], "1"], "=", " ", 
           RowBox[{
            RowBox[{
             TagBox[
              RowBox[{"(", "\[NoBreak]", GridBox[{
                 {"1", "0", "0", "0", "0", "0"},
                 {"0", "1", "0", "0", "0", "0"}
                },
                
                GridBoxAlignment->{
                 "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                  "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                  "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
              Function[BoxForm`e$, 
               MatrixForm[BoxForm`e$]]], "\[IndentingNewLine]", 
             "\[IndentingNewLine]", "This", " ", "will", " ", "be", " ", 
             "pre"}], "-", 
            RowBox[{
            "multiplied", " ", "by", " ", "a", " ", "2", "x2", " ", 
             "projection", " ", 
             RowBox[{"matrix", ".", "\[IndentingNewLine]", "The"}], " ", 
             "whole", " ", "thing", " ", "should", " ", "be", " ", 
             "logically", " ", "treated", " ", "as", " ", "if", " ", "it", 
             " ", "is", " ", "post"}], "-", 
            RowBox[{
            "multiplied", " ", "by", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", Cell[TextData[Cell[BoxData[
              TagBox[
               RowBox[{"(", "\[NoBreak]", GridBox[{
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "2"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "2"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "2"}]]}
                 },
                 
                 GridBoxAlignment->{
                  "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                   "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                   "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
               Function[BoxForm`e$, 
                MatrixForm[BoxForm`e$]]]],
              
              CellChangeTimes->{{3.600871330362259*^9, 
               3.6008713538916054`*^9}}]]]}]}]}]}], "\[IndentingNewLine]", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"epsilon", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{
           RowBox[{"IdentityMatrix", "[", " ", 
            RowBox[{"2", " ", "numberOfMasses"}], " ", "]"}], ",", "2"}], 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"res", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Table", "[", " ", 
             RowBox[{
              RowBox[{"Total", "@", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"oneTermOfdynamicsMatrix", "[", 
                   RowBox[{"#", ",", " ", "r", ",", " ", 
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", " ", "epsilon", ",", 
                    " ", "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
                 RowBox[{"(", 
                  RowBox[{"cdFlatAndSorted", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ")"}]}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], "]"}], " ",
             "//", " ", "Flatten"}], ",", " ", 
           RowBox[{"2", " ", "numberOfMasses"}]}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"res", " ", "/.", " ", 
          RowBox[{"qVec", " ", "\[Rule]", " ", "#"}]}], " ", "&"}]}]}], " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{"cdFlatAndSorted", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{"mScalarArray", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{
         RowBox[{
          RowBox[{"oneTermOfdynamicsMatrix", "[", 
           RowBox[{"#", ",", " ", "r", ",", " ", 
            RowBox[{"mScalarArray", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", " ", 
            "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"cdFlatAndSorted", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", "res"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", "epsilon"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"oneTermOfdynamicsMatrix", "[", " ", 
            RowBox[{
            "parameterLocatorDependencies", ",", " ", "couplingData"}], " ", 
            "]"}], "[", 
           RowBox[{"#", ",", " ", "r", ",", 
            RowBox[{"mScalarArray", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", 
            "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"cd", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\n",
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcDynamics", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcDynamics", "::", "usage"}], " ", "=", " ", 
     "\"\<a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \
\(k\)]\),\!\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for \
each of the system eigenvalues, when evaluated at qLoc.\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Example", ":", "\n", "\n", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "ld", ",", " ", "cd", ",", " ", "basisAndMassPoints", ",", " ", 
         "kArray", ",", " ", "matrix", ",", " ", "dynamics", ",", " ", 
         "qPoint", ",", " ", "omegaIndex"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"basisAndMassPoints", " ", "=", " ", 
         RowBox[{"{", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.6", ",", "1"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"-", "0.4"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"0.3", ",", "3"}], "}"}]}], " ", "}"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"ld", " ", "=", " ", 
         RowBox[{"locDependent", "[", " ", 
          RowBox[{"basisAndMassPoints", ",", " ", "1", ",", 
           RowBox[{"{", "10", "}"}]}], " ", "]"}]}], "  ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"kArray", " ", "=", " ", 
         RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"cd", " ", "=", " ", 
         RowBox[{"calculateCouplings", "[", " ", 
          RowBox[{"ld", ",", " ", "kArray"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"qPoint", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"\"\<qMaxVec\>\"", " ", "/.", " ", "ld"}], ")"}], "/", 
          "2"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"matrix", " ", "=", " ", 
         RowBox[{"dynamicsMatrix", "[", " ", 
          RowBox[{"ld", ",", " ", "cd"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynamics", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"calcDynamics", "[", " ", 
            RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}], " ", "//",
            " ", "First"}], " ", "//", " ", "TableForm"}]}]}]}], 
      "\[IndentingNewLine]", "]"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcDynamics", "[", "mAtQ_List", "]"}], " ", ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Sqrt", "[", 
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Eigensystem", "[", " ", "mAtQ", " ", "]"}], " ", "//", " ", 
         "Transpose"}], ")"}]}], ")"}]}], "  ", ";"}], "\n", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "frequencyPlotCalc", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"frequencyPlotCalc", "::", "usage"}], " ", "=", " ", 
     "\"\<frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"frequencyPlotCalc", "[", 
      RowBox[{"ld_List", ",", "m_", ",", "meshSz_Integer"}], "]"}], " ", ":=",
      " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "eigTable2D", ",", " ", "eigTable1D", ",", " ", "qMax", ",", " ", 
         "omegaPointList2D", ",", " ", "omegaPointList1D", ",", " ", "range", 
         ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"qMax", ",", " ", "numberOfMasses"}], "}"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<qMaxVec\>\"", ",", "\"\<numberOfMasses\>\""}], "}"}], 
          " ", "/.", " ", "ld"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"eigTable2D", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Re", "[", 
            RowBox[{"Table", "[", "  ", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"qx", ",", " ", "qy"}], "}"}], " ", ",", 
                RowBox[{"Eigenvalues", "[", " ", 
                 RowBox[{
                  RowBox[{"m", "[", " ", 
                   RowBox[{"{", 
                    RowBox[{"qx", ",", " ", "qy"}], "}"}], "  ", "]"}], " ", "//",
                   " ", "N"}], " ", "]"}]}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"qx", ",", " ", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"qMax", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "/", " ", "meshSz"}]}], 
               "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"qy", ",", " ", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"qMax", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "/", " ", "meshSz"}]}], 
               "}"}]}], " ", "]"}], " ", "]"}], ",", "1"}], "]"}]}], " ", ";",
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"omegaPointList2D", "[", "nn_", "]"}], " ", ":=", "  ", 
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"Sqrt", "[", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
               RowBox[{"[", "nn", "]"}], "]"}]}], "}"}], "]"}], "&"}], "/@", 
          " ", "eigTable2D"}]}], "  ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"range", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"2", " ", "numberOfMasses"}], ")"}], " ", "//", " ", 
           "Range"}], ")"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"ListPlot3D", "[", " ", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"omegaPointList2D", "[", "#", "]"}], " ", "&"}], "/@", 
           " ", "range"}], ",", " ", 
          RowBox[{"PlotRange", " ", "\[Rule]", " ", "Full"}], " ", ",", " ", 
          RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], ",", 
          RowBox[{"AxesLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<\!\(\*SubscriptBox[\(q\), \(x\)]\)\>\"", ",", " ", 
             "\"\<\!\(\*SubscriptBox[\(q\), \(y\)]\)\>\""}], "}"}]}]}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\n", 
   "\[IndentingNewLine]", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "showFreqPlot", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showFreqPlot", "::", "usage"}], " ", "=", " ", 
     "\"\<showFreqPlot[ qPlaneLoc, freqPlot ]\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showFreqPlot", "[", 
      RowBox[{"qpl_List", ",", " ", "freqPlotData_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"aa", ",", " ", "bb"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"aa", ",", " ", "bb"}], "}"}], " ", "=", "  ", "qpl"}], " ",
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{"{", 
          RowBox[{"freqPlotData", ",", "\[IndentingNewLine]", 
           RowBox[{"Graphics3D", "[", " ", 
            RowBox[{"Polygon", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", 
               "  ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}]}], "}"}],
              "]"}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "pointsTable", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"pointsTable", "::", "usage"}], " ", "=", " ", 
     "\"\<Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage.\>\""}], " ", 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"pointsTable", "[", " ", 
      RowBox[{"massPosition_List", ",", " ", "latticeOrigins_List"}], " ", 
      "]"}], " ", ":=", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#", " ", "+", " ", "massPosition"}], ")"}], " ", "&"}], "/@",
        " ", "latticeOrigins"}], ")"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "findLatticeCells", " ", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"findLatticeCells", "::", "usage"}], " ", "=", " ", 
     "\"\<All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"findLatticeCells", "[", 
      RowBox[{"latticeVectors_List", ",", "limits_List"}], "]"}], " ", ":=", 
     " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", " ", "b", ",", "sol", ",", " ", "oneSolution"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", " ", "b"}], "}"}], " ", "=", " ", 
         "latticeVectors"}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Rationalize", " ", "to", " ", 
          RowBox[{"fix", ":", " ", "to", ":", " ", 
           ButtonBox[
            RowBox[{
             RowBox[{"http", ":"}], "//", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], 
                 "/", "questions"}], "/", "6055"}], "/", "how"}], "-", "to", 
              "-", "get", "-", "rid", "-", "of", "-", "warnings", "-", "when",
               "-", "using", "-", "solve", "-", "on", "-", "an", "-", 
              "equation", "-", "with", "-", "inexact", "-", "coeffici"}]}],
            BaseStyle->"Hyperlink",
            ButtonData->{
              URL[
              "http://mathematica.stackexchange.com/questions/6055/how-to-get-\
rid-of-warnings-when-using-solve-on-an-equation-with-inexact-coeffici"], None},
            
            ButtonNote->
             "http://mathematica.stackexchange.com/questions/6055/how-to-get-\
rid-of-warnings-when-using-solve-on-an-equation-with-inexact-coeffici"]}]}], 
         " ", "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"oneSolution", "[", "o_", "]"}], " ", ":=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"n", ",", "m"}], "}"}], " ", "/.", 
          RowBox[{"Solve", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Rationalize", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"limits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "<", "  ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"n", " ", "a"}], " ", "+", " ", 
                   RowBox[{"m", " ", "b"}], " ", "+", " ", "o"}], ")"}], " ", 
                 ".", " ", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "0"}], "}"}]}]}], ")"}], " ", "&&", 
              "\[IndentingNewLine]", 
              RowBox[{"(", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"n", " ", "a"}], " ", "+", " ", 
                   RowBox[{"m", " ", "b"}], " ", "+", " ", "o"}], ")"}], " ", 
                 ".", " ", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "0"}], "}"}]}], " ", "<", " ", 
                RowBox[{
                 RowBox[{"limits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ")"}], " ", "&&", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"limits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "<", "  ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"n", " ", "a"}], " ", "+", " ", 
                   RowBox[{"m", " ", "b"}], " ", "+", "o"}], ")"}], " ", ".", 
                 " ", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}]}]}], ")"}], " ", "&&", 
              "\[IndentingNewLine]", 
              RowBox[{"(", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"n", " ", "a"}], " ", "+", " ", 
                   RowBox[{"m", " ", "b"}], " ", "+", "o"}], ")"}], " ", ".", 
                 " ", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}]}], " ", "<", " ", 
                RowBox[{
                 RowBox[{"limits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], " ", "]"}], 
            "\[IndentingNewLine]", ",", " ", 
            RowBox[{"{", 
             RowBox[{"n", ",", "m"}], "}"}], ",", " ", "Integers"}], 
           "]"}]}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"sol", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"oneSolution", "[", "#", "]"}], " ", "&"}], "/@", " ", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "0"}], "}"}], ",", "a", ",", " ", "b", ",",
                 " ", 
                RowBox[{"a", "+", "b"}]}], "}"}]}], " ", ",", "1"}], "]"}], 
           " ", "//", " ", "Sort"}], " ", "//", " ", "DeleteDuplicates"}]}], 
        " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#", ",", 
            RowBox[{
             RowBox[{"a", " ", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], " ", "+", " ", 
             RowBox[{"b", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], " ", "&"}], "/@", 
         " ", "sol"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "locDependent", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"locDependent", "::", "usage"}], " ", "=", " ", 
     "\"\<Locator dependent calculations (i.e. based on the mass positions \
and the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"locDependent", "[", " ", 
      RowBox[{"uLoc_List", ",", "numMasses_Integer", ",", " ", "rma_List"}], 
      " ", "]"}], "  ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "m", ",", "latticeBasis", ",", " ", "numberLatticeLinesToDisplay", 
         ",", "reciprocalBasis", ",", "mObliqueComponents", ",", " ", 
         "mPosFirstCell", ",", " ", "reciprocalNorms", ",", " ", 
         "allLatticeCellOriginsInDynPlotRange", ",", " ", "cellOrigins"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"latticeBasis", " ", "=", 
         RowBox[{"Take", "[", 
          RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"m", " ", "=", " ", 
         RowBox[{"Drop", "[", 
          RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"numberLatticeLinesToDisplay", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Ceiling", "[", "  ", 
             RowBox[{"Abs", "[", 
              RowBox[{"glConstWindowHalfWidth", "/", " ", 
               RowBox[{
                RowBox[{"latticeBasis", "[", 
                 RowBox[{"[", "#", "]"}], "]"}], "[", 
                RowBox[{"[", "#", "]"}], "]"}]}], "]"}], "]"}], " ", "&"}], 
           " ", "/@", " ", 
           RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"reciprocalBasis", " ", "=", " ", 
         RowBox[{
         "calcReciprocalBasis", "[", " ", "latticeBasis", " ", "]"}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"reciprocalNorms", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Norm", "[", 
             RowBox[{"reciprocalBasis", "[", 
              RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
           " ", 
           RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"mObliqueComponents", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"m", "[", 
             RowBox[{"[", " ", "i", " ", "]"}], "]"}], " ", ".", " ", 
            RowBox[{"reciprocalBasis", "[", 
             RowBox[{"[", " ", "j", " ", "]"}], "]"}]}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numMasses"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"j", ",", " ", "2"}], "}"}]}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"mPosFirstCell", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"m", "[", 
              RowBox[{"[", "#", "]"}], "]"}], " ", "-", " ", 
             RowBox[{
              RowBox[{"Floor", "[", 
               RowBox[{"mObliqueComponents", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", ".", " ", 
              "latticeBasis"}]}], " ", ")"}], " ", "&"}], " ", "/@", " ", 
          RowBox[{"Range", "[", "numMasses", "]"}]}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"allLatticeCellOriginsInDynPlotRange", " ", "=", " ", 
         RowBox[{
          RowBox[{"findLatticeCells", "[", 
           RowBox[{"latticeBasis", ",", "glConstDynPlotRange"}], "]"}], " ", "//",
           " ", "Transpose"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"cellOrigins", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
          "allLatticeCellOriginsInDynPlotRange", " ", "//", " ", "Last"}], 
          ")"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<mScalarArray\>\"", " ", "\[Rule]", " ", "rma"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<numberOfMasses\>\"", " ", "\[Rule]", " ", "numMasses"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<latticeBasis\>\"", " ", "\[Rule]", " ", "latticeBasis"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<latticeNorms\>\"", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Norm", "[", 
               RowBox[{"latticeBasis", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
             " ", 
             RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<latticeUnitVectors\>\"", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Normalize", "[", 
               RowBox[{"latticeBasis", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
             " ", 
             RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<numberLatticeLinesToDisplay\>\"", "\[Rule]", " ", 
           "numberLatticeLinesToDisplay"}], ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<latticeCellOriginIndexes\>\"", " ", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{
            "allLatticeCellOriginsInDynPlotRange", " ", "//", " ", "First"}], 
            ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<reciprocalBasis\>\"", "\[Rule]", " ", "reciprocalBasis"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{
          "\"\<reciprocalNorms\>\"", "\[Rule]", " ", "reciprocalNorms"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{"\"\<qMaxVec\>\"", " ", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{"2", " ", "Pi", " ", "reciprocalNorms"}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<mObliqueComponents\>\"", "\[Rule]", " ", 
           "mObliqueComponents"}], ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<mPosFirstCell\>\"", "\[Rule]", " ", "mPosFirstCell"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<pointsDataTable\>\"", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"pointsTable", "[", 
                RowBox[{
                 RowBox[{"mPosFirstCell", "[", 
                  RowBox[{"[", "#", "]"}], "]"}], ",", " ", "cellOrigins"}], 
                "]"}], ")"}], " ", "&"}], "/@", " ", 
             RowBox[{"Range", "[", "numMasses", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<lineTable\>\"", " ", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"calcLineTable", "[", " ", 
               RowBox[{
               "numberLatticeLinesToDisplay", ",", " ", "latticeBasis", ",", 
                " ", "#"}], " ", "]"}], " ", "&"}], " ", "/@", " ", 
             RowBox[{"Permutations", "[", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ")"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "plotSprings", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"plotSprings", "::", "usage"}], " ", "=", " ", 
     "\"\<Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"plotSprings", "[", 
      RowBox[{
      "uLoc_List", ",", " ", "ld_List", ",", "cd_List", ",", "m1Ind_Integer", 
       ",", " ", "m2Ind_Integer", ",", " ", "moInd_Integer"}], "]"}], " ", ":=",
      " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "aLoc", ",", " ", "bLoc", ",", "mLoc", ",", "pointsList", ",", 
         "latticeBasis", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
         " ", "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
         "cOrigin", ",", " ", "cN", ",", " ", "g", ",", " ", "mScalarArray", 
         ",", " ", "numberOfMasses", ",", " ", "scaleLoc"}], "}"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"latticeBasis", " ", "=", " ", 
         RowBox[{"Take", "[", " ", 
          RowBox[{"uLoc", ",", " ", "2"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"aLoc", " ", "=", " ", 
         RowBox[{"uLoc", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"bLoc", " ", "=", " ", 
         RowBox[{"uLoc", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"scaleLoc", " ", "=", " ", 
         RowBox[{
          RowBox[{"aLoc", ".", "aLoc"}], "  ", "+", " ", 
          RowBox[{"bLoc", " ", ".", "bLoc"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "mLoc", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
           "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
           "mScalarArray", ",", " ", "numberOfMasses"}], "}"}], "=", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<mPosFirstCell\>\"", ",", "\"\<reciprocalBasis\>\"", ",", 
            "\"\<pointsDataTable\>\"", ",", 
            "\"\<numberLatticeLinesToDisplay\>\"", ",", " ", 
            "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", " ", 
            "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}], " ",
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pointsList", "[", "n_Integer", "]"}], " ", ":=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"massColors", "[", "n", "]"}], ",", "\[IndentingNewLine]", 
           ",", 
           RowBox[{"PointSize", "[", 
            RowBox[{"Sqrt", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"mScalarArray", "[", 
                RowBox[{"[", "n", "]"}], "]"}], "/", "glConstMMax"}], "/", 
              "500"}], "]"}], "]"}], "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Point", "[", " ", "#", " ", "]"}], " ", "&"}], " ", "/@",
             " ", 
            RowBox[{"pointsDataTable", "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{"Text", "[", 
            RowBox[{
             RowBox[{"massLabel", "[", " ", "n", "]"}], ",", 
             RowBox[{
              RowBox[{"mLoc", "[", 
               RowBox[{"[", "n", "]"}], "]"}], " ", "+", " ", 
              "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
          "\[IndentingNewLine]", "}"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"cOrigin", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"cd", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", " ", 
             RowBox[{"{", 
              RowBox[{"m1Ind", ",", " ", "moInd"}], "}"}]}], " ", "&"}]}], 
          " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"cN", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"cd", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "[", 
            RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
             RowBox[{"{", 
              RowBox[{"m1Ind", ",", " ", "m2Ind"}], "}"}]}], "&"}]}], " ", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"g", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"spScaled", "[", 
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"{", 
                  RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", " ", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "4", "]"}], "]"}], "/", "glConstKMax"}], ",", 
               " ", "scaleLoc"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", "&"}],
           "/@", " ", "cN"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"numberOfMasses", " ", ">", " ", "1"}], ",", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"g", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"spScaled", "[", 
                 RowBox[{
                  RowBox[{"Take", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", " ", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], "/", "glConstKMax"}], ",",
                   " ", "scaleLoc"}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
                "\[IndentingNewLine]", 
                RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                   "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", 
              "&"}], "/@", " ", "cOrigin"}]}], "]"}], ","}], " ", "]"}], " ", 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Graphics", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", "\[IndentingNewLine]", " ", 
                 RowBox[{"lines", "\[IndentingNewLine]", ",", "Blue", ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"reciprocalBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                   RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]", 
                  ",", "Thick", ",", 
                  RowBox[{"Arrowheads", "[", "0.05", "]"}], 
                  "\[IndentingNewLine]", ",", "Red", ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"latticeBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                   RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]", 
                  ",", 
                  RowBox[{"Text", "[", 
                   RowBox[{
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"aLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}], 
                  "\[IndentingNewLine]", ",", 
                  RowBox[{"Text", "[", 
                   RowBox[{
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"bLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{"This", " ", "polygon", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "with", " ", "doubling", " ", "of", " ", "PlotRange"}], 
                    " ", "\[Rule]", " ", 
                    RowBox[{"glConstDynPlotRange", " ", "below"}]}], ")"}], 
                   " ", "was", " ", "to", " ", "visually", " ", "test", " ", 
                   "the", " ", "Solve", " ", "logic", " ", "used", " ", "to", 
                   " ", "find", " ", "all", " ", "the", " ", "lattice", " ", 
                   "cells", " ", "contained", " ", "or", " ", "just", " ", 
                   "outside", " ", "of", " ", "the", " ", 
                   RowBox[{"region", "."}]}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{",", 
                   RowBox[{"Lighter", "@", 
                    RowBox[{"Lighter", "@", "Gray"}]}], "\[IndentingNewLine]",
                    ",", 
                   RowBox[{"Opacity", "[", "0.5", "]"}], 
                   "\[IndentingNewLine]", ",", 
                   RowBox[{"Polygon", "[", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    ")"}], "\[IndentingNewLine]", " ", "]"}]}], " ", "*)"}], 
                 "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"pointsList", "[", "#", "]"}], " ", "&"}], "/@", 
                 " ", 
                 RowBox[{"Range", "[", "numberOfMasses", "]"}]}]}], 
               "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", 
             "\[IndentingNewLine]", ",", 
             RowBox[{"PlotRange", " ", "\[Rule]", " ", 
              RowBox[{"(*", "2", "*)"}], " ", "glConstDynPlotRange"}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}]}], 
            "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "g"}], 
          "\[IndentingNewLine]", "}"}], " ", "]"}]}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "dynamicsGraphicsTable", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dynamicsGraphicsTable", "::", "usage"}], " ", "=", " ", 
     "\"\<Calculate a time indexed table of positions for each of the \
masses\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{"Example", ":", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "ld", ",", " ", "cd", ",", " ", "basisAndMassPoints", ",", " ", 
         "kArray", ",", " ", "matrix", ",", " ", "dynamics", ",", " ", "sc", 
         ",", " ", "qPoint", ",", " ", "omegaIndex", ",", "  ", "lines", ",", 
         "mScalarArray", ",", " ", "numberOfMasses", ",", " ", "pointsData", 
         ",", "dynAtOmegaIndex", ",", " ", "dynMesh", ",", "dynTable"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"basisAndMassPoints", " ", "=", " ", 
         RowBox[{"{", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.6", ",", "1"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"-", "0.4"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"0.3", ",", "3"}], "}"}]}], " ", "}"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"ld", " ", "=", " ", 
         RowBox[{"locDependent", "[", " ", 
          RowBox[{"basisAndMassPoints", ",", " ", "1", ",", 
           RowBox[{"{", "10", "}"}]}], " ", "]"}]}], "  ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"kArray", " ", "=", " ", 
         RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"cd", " ", "=", " ", 
         RowBox[{"calculateCouplings", "[", " ", 
          RowBox[{"ld", ",", " ", "kArray"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"sc", " ", "=", " ", "0.25"}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"qPoint", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"\"\<qMaxVec\>\"", " ", "/.", " ", "ld"}], ")"}], "/", 
          "2"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"matrix", " ", "=", " ", 
         RowBox[{"dynamicsMatrix", "[", " ", 
          RowBox[{"ld", ",", " ", "cd"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynamics", " ", "=", " ", 
         RowBox[{"calcDynamics", "[", " ", 
          RowBox[{"matrix", "[", " ", "qPoint", " ", "]"}], " ", "]"}]}], " ",
         ";", "\[IndentingNewLine]", 
        RowBox[{"omegaIndex", " ", "=", " ", "1"}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynAtOmegaIndex", " ", "=", " ", 
         RowBox[{"dynamics", "[", 
          RowBox[{"[", "omegaIndex", "]"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynMesh", " ", "=", " ", "30"}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynTable", " ", "=", " ", 
         RowBox[{"dynamicsGraphicsTable", "[", 
          RowBox[{
          "ld", ",", " ", "dynAtOmegaIndex", ",", " ", "sc", ",", " ", 
           "qPoint", ",", " ", "dynMesh"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"With", "[", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"n", "=", "1"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"showDynPlot", "[", " ", 
            RowBox[{"dynTable", ",", " ", "n"}], " ", "]"}]}], " ", "]"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Animate", "[", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"showDynPlot", "[", " ", 
           RowBox[{"dynTable", ",", " ", "n"}], " ", "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"n", ",", " ", "1", ",", " ", "dynMesh", ",", " ", "1"}], 
           "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dynamicsGraphicsTable", "[", 
      RowBox[{
      "ld_List", ",", " ", "dynAtOmegaIndex_List", ",", " ", "sc_", ",", " ", 
       "qPoint_List", ",", " ", "dynMesh_Integer"}], " ", "]"}], " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "pointsDataTable", ",", "e", ",", " ", "omega", ",", " ", "lines", 
         ",", " ", "nu", ",", " ", "a", ",", "b", ",", " ", "mScalarArray", 
         ",", " ", "numberOfMasses", ",", " ", "latticeCellOriginIndexes", 
         ",", " ", "mPosFirstCell", ",", "pointsData"}], "}"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a", ",", " ", "b"}], "}"}], ",", "pointsDataTable", ",", 
           "lines", ",", " ", "mScalarArray", ",", " ", "numberOfMasses", ",",
            " ", "latticeCellOriginIndexes", ",", " ", "mPosFirstCell"}], 
          "}"}], "=", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", "\"\<pointsDataTable\>\"", ",", " ", 
            "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", " ", 
            "\"\<numberOfMasses\>\"", ",", " ", 
            "\"\<latticeCellOriginIndexes\>\"", ",", " ", 
            "\"\<mPosFirstCell\>\""}], "}"}], "  ", "/.", " ", "ld"}]}], " ", 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"omega", ",", " ", "e"}], "}"}], " ", "=", " ", 
         "dynAtOmegaIndex"}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"e", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{"e", ",", "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"nu", " ", "=", " ", 
         RowBox[{"2", " ", "Pi", " ", 
          RowBox[{"If", "[", " ", 
           RowBox[{
            RowBox[{"omega", " ", "\[Equal]", " ", "0"}], ",", " ", "1", ",", 
            " ", 
            RowBox[{"1", "/", "omega"}]}], "]"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"pointsData", " ", ":=", " ", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"a", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], " ", "+", " ", 
              RowBox[{"b", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], " ", "\[IndentingNewLine]", 
              "+", " ", 
              RowBox[{"mPosFirstCell", "[", 
               RowBox[{"[", "k", "]"}], "]"}], " ", "\[IndentingNewLine]", 
              "+", " ", 
              RowBox[{"sc", " ", 
               RowBox[{"Re", "[", " ", 
                RowBox[{
                 RowBox[{"e", "[", 
                  RowBox[{"[", " ", "k", " ", "]"}], "]"}], " ", 
                 RowBox[{"E", "^", 
                  RowBox[{"(", 
                   RowBox[{"I", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    RowBox[{"qPoint", " ", ".", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"a", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "+", " ", 
                    RowBox[{"b", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], " ", ")"}]}], "  ", 
                    "-", " ", 
                    RowBox[{"nu", " ", "tau"}]}], " ", ")"}]}], ")"}]}]}], 
                " ", "]"}]}]}], " ", "\[IndentingNewLine]", "&"}], "/@", " ", 
            "latticeCellOriginIndexes"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"k", ",", " ", "numberOfMasses"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"tau", ",", "0", ",", "1", ",", 
             RowBox[{"1", "/", "dynMesh"}]}], "}"}]}], "\[IndentingNewLine]", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"{", " ", 
         RowBox[{
         "pointsData", ",", " ", "mScalarArray", ",", "numberOfMasses", ",", 
          "lines", ",", "dynMesh"}], " ", "}"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "showDynPlot", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showDynPlot", "::", "usage"}], " ", "=", " ", 
     "\"\<showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showDynPlot", "[", 
      RowBox[{
       RowBox[{"{", " ", 
        RowBox[{
        "pointsData_List", ",", " ", "mScalarArray_List", ",", 
         "numberOfMasses_Integer", ",", "lines_List", ",", " ", 
         "dynMesh_Integer"}], " ", "}"}], ",", " ", "n_"}], " ", "]"}], " ", ":=",
      " ", 
     RowBox[{"Show", "[", 
      RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Table", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListPlot", "[", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"pointsData", "[", 
                RowBox[{"[", "k", "]"}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}], "\[IndentingNewLine]", ",", 
              RowBox[{
              "PlotRange", " ", "\[Rule]", " ", "glConstDynPlotRange"}], 
              "\[IndentingNewLine]", ",", 
              RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], 
              "\[IndentingNewLine]", ",", " ", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"Directive", "[", 
                RowBox[{
                 RowBox[{"PointSize", "[", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "/", "glConstMMax"}], "/",
                     "350"}], "]"}], "]"}], ",", 
                 RowBox[{"massColors", "[", "k", "]"}]}], "]"}]}]}], 
             "\[IndentingNewLine]", "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"k", ",", "numberOfMasses"}], "}"}]}], "]"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"Graphics", "[", 
            RowBox[{
            "{", "\[IndentingNewLine]", "lines", "\[IndentingNewLine]", "}"}],
             "]"}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
         "}"}], ",", " ", "1"}], "]"}], "\[IndentingNewLine]", "]"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
   "\[IndentingNewLine]", "\[IndentingNewLine]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.601384568255503*^9, 3.6013846068957133`*^9}, {
   3.601384697696907*^9, 3.6013847654097795`*^9}, 3.601385370746403*^9, {
   3.601385703897458*^9, 3.6013858671947985`*^9}, {3.6013859369007854`*^9, 
   3.6013862565130663`*^9}, {3.601386287618845*^9, 3.601386609852276*^9}, 
   3.6013883021340685`*^9, {3.601388339834225*^9, 3.6013883634195743`*^9}, 
   3.6013895576548805`*^9, 3.6013897858849344`*^9, {3.6013899175164633`*^9, 
   3.6013899237438197`*^9}, {3.6013902884636803`*^9, 3.601390307373762*^9}, {
   3.6013903606908116`*^9, 3.6013903655340886`*^9}, {3.6013904046453257`*^9, 
   3.6013904283296804`*^9}, {3.6013906600559344`*^9, 3.601390689104596*^9}, {
   3.601390728076825*^9, 3.6013907681771183`*^9}, 3.6013908182919846`*^9, {
   3.601390891800189*^9, 3.601390932180499*^9}, {3.6013909695316353`*^9, 
   3.6013909758089943`*^9}, {3.6013910645760717`*^9, 3.601391320952736*^9}, {
   3.601391435270274*^9, 3.6013916772021117`*^9}, 3.6013917100099883`*^9, {
   3.6013917417488036`*^9, 3.601391758067737*^9}, {3.6013919250272865`*^9, 
   3.601391931312646*^9}, 3.601391980636467*^9, {3.6013920515635242`*^9, 
   3.6013920860454965`*^9}, {3.601392228344635*^9, 3.6013922300747347`*^9}, {
   3.6013922885550795`*^9, 3.6013923711148014`*^9}, {3.601392403747668*^9, 
   3.601392429697152*^9}, {3.601392460009886*^9, 3.6013924618869934`*^9}, 
   3.601392495188898*^9, {3.6013925358982267`*^9, 3.60139256568093*^9}, {
   3.60139267443215*^9, 3.60139267687029*^9}, {3.601392795672085*^9, 
   3.601392812691058*^9}, {3.601487330343955*^9, 3.6014874916991835`*^9}, {
   3.601487744991671*^9, 3.6014877935674496`*^9}, {3.60148964525436*^9, 
   3.6014896667695904`*^9}, {3.6014911727117257`*^9, 3.6014912011403513`*^9}, 
   3.6014913920092688`*^9, {3.6015049201900363`*^9, 3.601504921465109*^9}, {
   3.6015049694438534`*^9, 3.6015051088448267`*^9}, 3.601510158678661*^9, {
   3.601510341001089*^9, 3.6015103715238347`*^9}, {3.6015104088279686`*^9, 
   3.6015107342535815`*^9}, {3.6015107662544117`*^9, 
   3.6015107759769683`*^9}, {3.6015111875295076`*^9, 3.601511306315302*^9}, {
   3.601512394495542*^9, 3.6015124103054466`*^9}, {3.6015124586622124`*^9, 
   3.601512461037348*^9}, {3.6015125348575706`*^9, 3.601512551233507*^9}, {
   3.601512837974908*^9, 3.601512840824071*^9}, 3.6015519253794203`*^9, {
   3.60155212137263*^9, 3.601552138440606*^9}, {3.6015928398373117`*^9, 
   3.6015928406963606`*^9}, {3.601592972262886*^9, 3.601593035706515*^9}, {
   3.601593106344555*^9, 3.6015931439477057`*^9}, {3.601593175770526*^9, 
   3.6015931831749496`*^9}, 3.6015932402212124`*^9, 3.6015933437151318`*^9, {
   3.60159339980434*^9, 3.6015934133541145`*^9}, {3.601593445458951*^9, 
   3.601593483192109*^9}, {3.601593515955983*^9, 3.6015935487328577`*^9}, 
   3.601595231242092*^9, 3.601595401817848*^9, {3.60159658197935*^9, 
   3.6015965875836706`*^9}, 3.601596631546185*^9},
 CellID->454600298]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"tick", ";", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"This", " ", 
        RowBox[{"If", "[", "]"}], " ", "is", " ", "effectively", " ", "my", 
        " ", "Initialization"}], " ", "\[RuleDelayed]", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"{", "}"}], " ", 
         RowBox[{"block", ".", "  ", "Done"}], " ", "with", " ", "a", " ", 
         "variable", " ", "so", " ", "that", " ", "copies", " ", "of", " ", 
         "the", " ", "output", " ", "cell", " ", 
         RowBox[{"won", "'"}], "t", " ", "re"}], "-", 
        RowBox[{"execute", " ", "their", " ", "Initialization", " ", 
         RowBox[{"cells", ".", "  ", "This"}], " ", "allows", " ", 
         "\"\<interesting\>\"", " ", "settings", " ", "to", " ", "be", " ", 
         "maintained", " ", "per"}], "-", 
        RowBox[{
        "copy", " ", "of", " ", "the", " ", "output", " ", "cell"}]}]}], ",", 
      " ", 
      RowBox[{
      "but", " ", "still", " ", "provide", " ", "an", " ", "Initialization", 
       " ", "block", " ", "for", " ", "the", " ", "primary", " ", "output", 
       " ", 
       RowBox[{"cell", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", " ", 
    RowBox[{"If", " ", "[", " ", 
     RowBox[{"bInitDefaults", ",", 
      RowBox[{"(", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"u", " ", "=", " ", 
         RowBox[{"Flatten", "[", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], "}"}], 
           ",", " ", "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
         RowBox[{"locDependent", "[", " ", 
          RowBox[{
          "u", ",", " ", "rawNumberOfMasses", ",", "rawArrayOfMasses"}], " ", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"kArray", " ", "=", " ", 
         RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "n", "}"}], ",", 
          RowBox[{
           RowBox[{"n", " ", "=", " ", "2"}], " ", ";", 
           RowBox[{"While", "[", 
            RowBox[{
             RowBox[{"n", "\[LessEqual]", "rawNumberOfMasses"}], ",", 
             RowBox[{
              RowBox[{"kArray", " ", "=", " ", 
               RowBox[{"returnKarrayForAdditionalMassIndex", "[", 
                RowBox[{"kArray", ",", "n"}], "]"}]}], " ", ";", " ", 
              RowBox[{"n", "++"}]}]}], "]"}]}]}], " ", "]"}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"qLoc", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
           "\"\<qMaxVec\>\"", " ", "/.", " ", 
            "parameterLocatorDependencies"}], ")"}], "/", "2"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"qPlaneLoc", " ", "=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"couplingData", " ", "=", " ", 
         RowBox[{"calculateCouplings", "[", " ", 
          RowBox[{"parameterLocatorDependencies", ",", " ", "kArray"}], " ", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshMatrix", ":", " ", 
           RowBox[{"dependent", " ", "on"}], ":", " ", 
           "parameterLocatorDependencies"}], ",", " ", "couplingData"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"matrix", " ", "=", " ", 
         RowBox[{"dynamicsMatrix", "[", " ", 
          RowBox[{"parameterLocatorDependencies", ",", " ", "couplingData"}], 
          " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshDynamics", ":", " ", 
           RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
          "qLoc", ","}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"dynamics", " ", "=", " ", 
         RowBox[{"calcDynamics", "[", " ", 
          RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}]}], " ", 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshDynPlot", ":", " ", 
           RowBox[{"dependent", " ", "on", " ", "dynamics"}]}], ",", " ", 
          "omegaIndex", ",", " ", "scale"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"dynPlot", " ", "=", " ", 
         RowBox[{"dynamicsGraphicsTable", "[", " ", 
          RowBox[{"parameterLocatorDependencies", ",", " ", 
           RowBox[{"dynamics", "[", 
            RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale", ",", 
           " ", "qLoc", ",", " ", "dynMeshSize"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshFreqPlot", ":", " ", 
           RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
          "freqMeshSize"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"freqPlot", " ", "=", " ", 
         RowBox[{"frequencyPlotCalc", "[", " ", 
          RowBox[{
          "parameterLocatorDependencies", ",", " ", "matrix", ",", " ", 
           "freqMeshSize"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"bInitDefaults", " ", "=", " ", "False"}], " ", ";"}], 
       "\[IndentingNewLine]", ")"}], ","}], "]"}], " ", ";", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"Dynamic", "@", 
      RowBox[{"Switch", "[", 
       RowBox[{"tabNumber", ",", "dynTab", ",", 
        RowBox[{"Plot", "[", 
         RowBox[{
          RowBox[{"x", "^", "2"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], ",", "freqTab", 
        ",", 
        RowBox[{"Plot", "[", 
         RowBox[{
          RowBox[{"1", "-", 
           RowBox[{"x", "^", "2"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], ",", "_", ",", 
        RowBox[{"Plot", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Sin", "[", 
            RowBox[{"tauSliderValue", " ", "x"}], "]"}], " ", 
           RowBox[{"E", "^", 
            RowBox[{"(", 
             RowBox[{"-", "x"}], ")"}]}]}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]}], "]"}]}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"Dynamic", "@", 
     RowBox[{"Switch", "[", " ", 
      RowBox[{
      "tabNumber", ",", "\[IndentingNewLine]", "dynTab", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", " ", 
          RowBox[{"bRefreshMatrix", ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"matrix", " ", "=", " ", 
              RowBox[{"dynamicsMatrix", "[", " ", 
               RowBox[{
               "parameterLocatorDependencies", ",", " ", "couplingData"}], 
               " ", "]"}]}], " ", ";", 
             RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
             RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";", 
             " ", 
             RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
            ")"}], ","}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", " ", 
          RowBox[{"bRefreshDynamics", ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"dynamics", " ", "=", " ", 
              RowBox[{"calcDynamics", "[", " ", 
               RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}]}], 
             " ", ";", 
             RowBox[{"bRefreshDynamics", " ", "=", " ", "False"}], " ", ";", 
             RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}]}], ")"}], 
           ","}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", " ", 
          RowBox[{"bRefreshDynPlot", ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"dynPlot", " ", "=", " ", 
              RowBox[{"dynamicsGraphicsTable", "[", " ", 
               RowBox[{"parameterLocatorDependencies", ",", " ", 
                RowBox[{"dynamics", "[", 
                 RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale", 
                ",", " ", "qLoc", ",", "dynMeshSize"}], " ", "]"}]}], " ", 
             ";", 
             RowBox[{"bRefreshDynPlot", " ", "=", " ", "False"}]}], ")"}], 
           ","}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"showDynPlot", "[", " ", 
          RowBox[{"dynPlot", ",", " ", "tauSliderValue"}], " ", "]"}]}], 
        "\[IndentingNewLine]", ")"}], ",", "\[IndentingNewLine]", "freqTab", 
       ",", "\[IndentingNewLine]", 
       RowBox[{"(", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", " ", 
          RowBox[{"bRefreshMatrix", ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"matrix", " ", "=", " ", 
              RowBox[{"dynamicsMatrix", "[", " ", 
               RowBox[{
               "parameterLocatorDependencies", ",", " ", "couplingData"}], 
               " ", "]"}]}], " ", ";", 
             RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
             RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";", 
             " ", 
             RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
            ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"If", "[", " ", 
          RowBox[{"bRefreshFreqPlot", ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"freqPlot", " ", "=", " ", 
              RowBox[{"frequencyPlotCalc", "[", " ", 
               RowBox[{
               "parameterLocatorDependencies", ",", " ", "matrix", ",", " ", 
                "freqMeshSize"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
             RowBox[{"bRefreshFreqPlot", " ", "=", " ", "False"}]}], " ", 
            ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"showFreqPlot", "[", " ", 
          RowBox[{"qPlaneLoc", ",", " ", "freqPlot"}], " ", "]"}]}], 
        "\[IndentingNewLine]", ")"}], "\[IndentingNewLine]", ",", 
       "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Plot", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Sin", "[", 
            RowBox[{"tauSliderValue", " ", "x"}], "]"}], " ", 
           RowBox[{"E", "^", 
            RowBox[{"(", 
             RowBox[{"-", "x"}], ")"}]}]}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"LocatorPane", "[", " ", 
        RowBox[{
         RowBox[{"Dynamic", "[", 
          RowBox[{"u", ",", 
           RowBox[{
            RowBox[{"(", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"u", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], "<", "3"}], ",", " ", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Flatten", "[", " ", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], 
                    "}"}], ",", " ", "1"}], "]"}], ",", " ", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{
                   "cap", " ", "the", " ", "number", " ", "of", " ", 
                    "Locators", " ", "at", " ", "5"}], ",", " ", 
                   RowBox[{
                   "so", " ", "the", " ", "selection", " ", "Pane", " ", 
                    RowBox[{"doesn", "'"}], "t", " ", "start", " ", 
                    "truncating", " ", 
                    RowBox[{"the", " ", "'"}], "to", " ", 
                    RowBox[{"neighbouring", "'"}], " ", "SetterBar"}]}], " ", 
                  "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"If", "[", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], " ", ">", " ", "7"}], ",", " ", 
                   RowBox[{"Take", "[", 
                    RowBox[{"#", ",", "7"}], "]"}], ",", " ", "#"}], "]"}]}], 
                " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"Module", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"rm", ",", "km"}], "}"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"rm", " ", "=", " ", 
                  RowBox[{"First", "@", 
                   RowBox[{"Dimensions", "[", "rawArrayOfMasses", "]"}]}]}], 
                 " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"If", " ", "[", 
                  RowBox[{
                   RowBox[{"rm", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "rawArrayOfMasses"}], " ", "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{"rawArrayOfMasses", " ", "=", " ", 
                    RowBox[{"Take", "[", " ", 
                    RowBox[{"rawArrayOfMasses", ",", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "rawArrayOfMasses", " ", "if", " ", 
                    "required"}], "*)"}], "\[IndentingNewLine]", 
                   RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"rm", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{
                    "rawArrayOfMasses", ",", " ", "glConstDefaultMass"}], 
                    "]"}], " ", ";", " ", 
                    RowBox[{"rm", "++"}]}]}], " ", "]"}]}], 
                  "\[IndentingNewLine]", "]"}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"km", " ", "=", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], " ", "//", " ", 
                   "Max"}]}], " ", ";", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{"If", " ", "[", 
                  RowBox[{
                   RowBox[{"km", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "kArray"}], " ", "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"Select", "[", 
                    RowBox[{"kArray", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "\[LessEqual]", "  ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], "&"}], 
                    ")"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "kArray", " ", "if", " ", "required"}], 
                    "*)"}], "\[IndentingNewLine]", 
                   RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"km", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"km", "++"}], " ", ";", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnKarrayForAdditionalMassIndex", "[", 
                    RowBox[{"kArray", ",", "km"}], "]"}]}]}]}], " ", "]"}]}], 
                  " ", "\[IndentingNewLine]", "]"}]}]}], 
               "\[IndentingNewLine]", "]"}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                "lattice", " ", "vector", " ", "end", " ", "points", " ", 
                "to", " ", "be", " ", "too", " ", "close", " ", "to", " ", 
                "the", " ", "origin"}], " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"u", "[", 
                RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", 
               RowBox[{"If", "[", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", " ", 
                   RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "<", " ", 
                  "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                 RowBox[{"glConstLocDefault", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"u", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"u", "[", 
                RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", 
               RowBox[{"If", "[", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ".", " ", 
                   RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], " ", "<", " ", 
                  "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                 RowBox[{"glConstLocDefault", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                 RowBox[{"u", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                "angle", " ", "between", " ", "lattice", " ", "vectors", " ", 
                "get", " ", "too", " ", "small"}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"u", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"u", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "}"}], " ", "=", " ", 
               RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
                RowBox[{
                "u", ",", " ", " ", "glConstMinAngleBetweenLatticeVectors"}], 
                " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"rawNumberOfMasses", " ", "=", " ", 
               RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
               "These", " ", "are", " ", "in", " ", "case", " ", "the", " ", 
                "number", " ", "of", " ", "locators", " ", "were", " ", 
                "changed", " ", "and", " ", "we", " ", "have", " ", "a", " ", 
                "mass", " ", "selected", " ", "that", " ", "is", " ", "now", 
                " ", 
                RowBox[{"invalid", "."}]}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"m1Sel", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{"m1Sel", " ", ">", "rawNumberOfMasses"}], ",", " ", 
                 "1", ",", " ", "m1Sel"}], "]"}]}], " ", ";", 
              "\[IndentingNewLine]", 
              RowBox[{"m2Sel", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{"m2Sel", " ", ">", "rawNumberOfMasses"}], ",", " ", 
                 "1", ",", " ", "m2Sel"}], "]"}]}], " ", ";", 
              "\[IndentingNewLine]", 
              RowBox[{"moSel", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{"moSel", " ", ">", "rawNumberOfMasses"}], ",", " ", 
                 "1", ",", " ", "moSel"}], " ", "]"}]}], " ", ";", 
              "\[IndentingNewLine]", 
              RowBox[{"moSel", " ", "=", " ", 
               RowBox[{"adjustedmoSel", "[", " ", 
                RowBox[{
                "rawNumberOfMasses", ",", " ", "moSel", ",", " ", "m1Sel"}], 
                " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"omegaIndex", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{"omegaIndex", " ", ">", 
                  RowBox[{"(", 
                   RowBox[{"2", "rawNumberOfMasses"}], ")"}]}], ",", " ", "1",
                  ",", " ", "omegaIndex"}], "]"}]}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{
                "Adjust", " ", "these", " ", "for", " ", "Slider", " ", 
                 "display", " ", "in", " ", "case", " ", "m1Sel"}], ",", " ", 
                "m2Sel", ",", " ", 
                RowBox[{
                "or", " ", "moSel", " ", "were", " ", "changed", " ", "just", 
                 " ", 
                 RowBox[{"above", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"k1", " ", "=", " ", 
               RowBox[{"selectVFromKarray", "[", 
                RowBox[{
                "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                 "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
              RowBox[{"k2", " ", "=", " ", 
               RowBox[{"selectVFromKarray", "[", 
                RowBox[{
                "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "2"}], 
                "]"}]}], " ", ";", "\[IndentingNewLine]", 
              RowBox[{"k3", " ", "=", " ", 
               RowBox[{"selectVFromKarray", "[", 
                RowBox[{
                "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "3"}], 
                "]"}]}], " ", ";", "\[IndentingNewLine]", 
              RowBox[{"k4", " ", "=", " ", 
               RowBox[{"selectVFromKarray", "[", 
                RowBox[{
                "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "4"}], 
                "]"}]}], " ", ";", "\[IndentingNewLine]", 
              RowBox[{"k5", " ", "=", " ", 
               RowBox[{"selectOriginVFromKarray", "[", " ", 
                RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], " ",
                 "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
               RowBox[{"locDependent", "[", " ", 
                RowBox[{
                "u", ",", " ", "rawNumberOfMasses", ",", "rawArrayOfMasses"}],
                 " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"Reset", " ", "in", " ", "case", " ", "a"}], ",", 
                RowBox[{"or", " ", "b", " ", "changed"}], ",", " ", 
                RowBox[{
                "and", " ", "the", " ", "last", " ", "selected", " ", "value",
                  " ", "is", " ", "now", " ", "out", " ", "of", " ", 
                 RowBox[{"range", "."}]}]}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"qLoc", " ", "=", " ", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                 "\"\<qMaxVec\>\"", "/.", "parameterLocatorDependencies"}], 
                 " ", ")"}], "/", "2"}]}], "  ", ";", "\[IndentingNewLine]", 
              RowBox[{"qPlaneLoc", " ", "=", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"couplingData", " ", "=", " ", 
               RowBox[{"calculateCouplings", "[", " ", 
                RowBox[{"parameterLocatorDependencies", ",", " ", "kArray"}], 
                " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", ";", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", "XXX", "*)"}], "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"tick", "=", 
               RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"Why", " ", 
            RowBox[{"doesn", "'"}], "t", " ", "Alt"}], "-", 
           RowBox[{
           "click", " ", "to", " ", "remove", " ", "existing", " ", "Locator",
             " ", "refresh", " ", "this", " ", 
            RowBox[{"plot", "?", "  ", 
             RowBox[{"Workaround", ":", " ", 
              RowBox[{
              "move", " ", "one", " ", "of", " ", "the", " ", "other", " ", 
               "locators", " ", "to", " ", "refresh"}]}]}]}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"plotSprings", "[", 
          RowBox[{
          "u", ",", " ", "parameterLocatorDependencies", ",", "couplingData", 
           ",", "m1Sel", ",", " ", "m2Sel", ",", " ", "moSel"}], "]"}], " ", 
         ",", "\[IndentingNewLine]", 
         RowBox[{"LocatorAutoCreate", "\[Rule]", "True"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
        "\[IndentingNewLine]", "]"}]}], " ", 
      RowBox[{"(*", "LocatorPane", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", " ", "]"}]}]}], " ", 
   RowBox[{"(*", "Switch", "*)"}], "\[IndentingNewLine]", ",", 
   "\[IndentingNewLine]", 
   RowBox[{"TabView", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<dynamics\>\"", " ", "\[Rule]", "  ", 
        RowBox[{"Column", "[", " ", 
         RowBox[{"{", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Dynamic", "@", 
            RowBox[{"Row", "[", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"OverVector", "[", "\"\<q\>\"", "]"}], ",", 
               "\[IndentingNewLine]", "\"\< = \>\"", ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "qm", "}"}], ",", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"qm", " ", "=", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", "  ", "/.", 
                    "parameterLocatorDependencies"}], ")"}]}], " ", ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Slider2D", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"qLoc", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"qLoc", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", 
                    RowBox[{"(*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.01", ",", "0.01"}], "}"}], ",", " ", "qm"}], 
                    "}"}], "*)"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", " ", "qm"}], ")"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], 
                    "\[IndentingNewLine]", ",", " ", 
                    RowBox[{"ImageSize", " ", "\[Rule]", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"150", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}], " ", "&"}], ")"}], 
                    " ", "@", " ", "qm"}]}]}], "\[IndentingNewLine]", 
                   "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", " ", 
               "\[IndentingNewLine]", "\"\< 2 \[Pi] \>\"", ",", "  ", 
               RowBox[{"Dynamic", "[", 
                RowBox[{"(", 
                 RowBox[{"NumberForm", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"qLoc", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "Pi"}], ")"}]}], " ", "//", " ", 
                    "MatrixForm"}], ")"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
                "]"}]}], "\[IndentingNewLine]", "}"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"With", " ", "this", " ", "enabled"}], ",", " ", 
              RowBox[{
              "a", " ", "change", " ", "results", " ", "in", " ", "a", " ", 
               "switch", " ", "through", " ", "the", " ", "tabNumbers"}], ",",
               " ", 
              RowBox[{"first", " ", "freqTab"}], ",", " ", 
              RowBox[{"then", " ", "to", " ", 
               RowBox[{"parametersTab", "?", "  ", "Why"}]}], ",", " ", 
              RowBox[{
              "and", " ", "why", " ", "not", " ", "with", " ", "scale", " ", 
               RowBox[{
               "below", "?", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                "As"}], " ", "a", " ", "work", " ", "around", " ", 
               RowBox[{"I", "'"}], "ve", " ", "just", " ", "hardcoded", " ", 
               "the", " ", "mesh", " ", "size", " ", "to", " ", "something", 
               " ", "that", " ", "is", " ", 
               RowBox[{"smooth", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"Text", "@", "\"\<number of time intervals \>\""}], 
                ",", "\[IndentingNewLine]", 
                RowBox[{"Manipulator", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"dynMeshSize", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"dynMeshSize", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "14", ",", " ", "4", ",", " ", "30", ",", 
                    " ", "IntegerQ"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"4", ",", "30", ",", "1"}], "}"}], ",", 
                  RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                  RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                  RowBox[{"AppearanceElements", "\[Rule]", 
                   RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
                "\"\< \>\"", ",", " ", 
                RowBox[{"Dynamic", "[", "dynMeshSize", "]"}]}], " ", 
               "\[IndentingNewLine]", "}"}], "]"}], ","}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"Row", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
              "Text", "@", "\"\<time, normalized to one period, t/T = \>\""}],
               ",", " ", 
              RowBox[{"Dynamic", "[", 
               RowBox[{"N", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"tauSliderValue", "-", "1"}], ")"}], "/", 
                 "dynMeshSize"}], "]"}], "]"}]}], "}"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Row", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"Manipulator", "[", 
               RowBox[{
                RowBox[{"Dynamic", "[", 
                 RowBox[{"tauSliderValue", ",", 
                  RowBox[{
                   RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"tauSliderValue", " ", "=", " ", "#"}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                 "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", 
                  RowBox[{"dynMeshSize", "+", "1"}], ",", "1"}], "}"}], ",", 
                RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                RowBox[{"ContinuousAction", "\[Rule]", "True"}], ",", 
                RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"AppearanceElements", " ", "\[Rule]", " ", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<StepLeftButton\>\"", ",", "\"\<PlayPauseButton\>\"", 
                   ",", "\"\<StepRightButton\>\"", ",", 
                   "\"\<FasterSlowerButtons\>\"", ",", 
                   "\"\<DirectionButton\>\""}], "\[IndentingNewLine]", 
                  "}"}]}]}], "\[IndentingNewLine]", "]"}]}], " ", 
             "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{",", " ", 
              RowBox[{"ImageSize", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"200", ",", "60"}], "}"}]}]}], "*)"}], 
            "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Row", "[", 
            RowBox[{"{", 
             RowBox[{"Text", "@", "\"\<oscillation scale factor:\>\""}], 
             "}"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Row", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"Manipulator", "[", 
                RowBox[{
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"scale", ",", 
                   RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"scale", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.05", ",", " ", "0.05", ",", " ", "1"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                  "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0.05", ",", "1"}], "}"}], ",", 
                 RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                 RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                 RowBox[{"AppearanceElements", "\[Rule]", 
                  RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], 
               "\[IndentingNewLine]", "\"\< \>\""}], ",", "  ", 
              RowBox[{"Dynamic", "[", 
               RowBox[{"(", 
                RowBox[{"NumberForm", "[", 
                 RowBox[{"scale", ",", " ", 
                  RowBox[{"{", 
                   RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
               "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], 
           "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{"Row", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
              "Text", "@", 
               "\"\<Angular frequency \[Omega](q), selection:\>\""}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Dynamic", "@", 
               RowBox[{"SetterBar", "[", 
                RowBox[{
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"omegaIndex", ",", 
                   RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"omegaIndex", "=", "#"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                  "]"}], ",", " ", 
                 RowBox[{"Range", "[", 
                  RowBox[{"2", "rawNumberOfMasses"}], "]"}]}], " ", "]"}]}]}],
              "\[IndentingNewLine]", "}"}], " ", "]"}]}], 
          "\[IndentingNewLine]", "}"}], "]"}]}], " ", 
       RowBox[{"(*", " ", "Column", " ", "*)"}], "\[IndentingNewLine]", ",", 
       RowBox[{
       "\"\<\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))\>\"", 
        " ", "\[Rule]", "  ", 
        RowBox[{"Column", "[", " ", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Row", "[", 
            RowBox[{"{", " ", 
             RowBox[{
              RowBox[{"Text", "@", "\"\<number of mesh intervals \>\""}], ",",
               "\[IndentingNewLine]", 
              RowBox[{"Manipulator", "[", 
               RowBox[{
                RowBox[{"Dynamic", "[", 
                 RowBox[{"freqMeshSize", ",", 
                  RowBox[{
                   RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"freqMeshSize", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "12", ",", " ", "2", ",", " ", "30", ",", 
                    " ", "EvenQ"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                 "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "30", ",", "2"}], "}"}], ",", 
                RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                RowBox[{"AppearanceElements", "\[Rule]", 
                 RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
              "\"\< \>\"", ",", " ", 
              RowBox[{"Dynamic", "[", "freqMeshSize", "]"}]}], " ", 
             "\[IndentingNewLine]", "}"}], "]"}], ",", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"LocatorPane", "[", 
            RowBox[{
             RowBox[{"Dynamic", "[", "qPlaneLoc", 
              RowBox[{"(*", 
               RowBox[{",", " ", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"qPlaneLoc", " ", "=", " ", "#"}], ";", " ", 
                  RowBox[{"tick", "=", 
                   RowBox[{
                    RowBox[{"Not", "[", "tick", "]"}], " ", "&"}]}]}], 
                 ")"}]}], "*)"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Lighter", "@", "Gray"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Polygon", "[", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    ")"}], "\[IndentingNewLine]", " ", "]"}], ",", 
                    "\[IndentingNewLine]", "Black", ",", 
                    RowBox[{"Line", "[", "qPlaneLoc", "]"}]}], 
                   "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                  " ", 
                  RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    "/", "2"}]}], "\[IndentingNewLine]", ",", 
                  RowBox[{"ImageSize", " ", "\[Rule]", "  ", 
                   RowBox[{"200", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}]}]}], 
                 "\[IndentingNewLine]", "]"}], " ", "&"}], " ", "@", " ", 
               RowBox[{"(", 
                RowBox[{
                "\"\<qMaxVec\>\"", " ", "/.", 
                 "parameterLocatorDependencies"}], ")"}]}], 
              "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
             "\[IndentingNewLine]", 
             RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
            "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "}"}], " ",
          "]"}]}], "\[IndentingNewLine]", ",", " ", 
       RowBox[{"\"\<parameters\>\"", "\[Rule]", 
        RowBox[{"Grid", "[", " ", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Text", "[", "\"\<mass: \>\"", "]"}], ",", " ", 
                "\[IndentingNewLine]", 
                RowBox[{"Dynamic", "@", 
                 RowBox[{"If", " ", "[", " ", 
                  RowBox[{
                   RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"m1Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m1Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"moSel", " ", "=", " ", 
                    RowBox[{"adjustedmoSel", "[", " ", 
                    RowBox[{
                    "rawNumberOfMasses", ",", " ", "moSel", ",", " ", 
                    "m1Sel"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", " ", "]"}]}], "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
                  "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
               "}"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Row", "[", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"massValue", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.25", ",", " ", "0.25", ",", " ", 
                    "glConstMMax"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"rawArrayOfMasses", "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "=", "massValue"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
                    RowBox[{"(", 
                    RowBox[{"parameterLocatorDependencies", " ", "/.", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"\"\<mScalarArray\>\"", ",", " ", "_"}], "]"}], 
                    " ", "\[RuleDelayed]", " ", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", ",", " ", "rawArrayOfMasses"}], 
                    "]"}]}], ")"}]}], " ", ")"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], "\[IndentingNewLine]", ",", 
                  RowBox[{"{", 
                   RowBox[{"0.25", ",", 
                    RowBox[{"Dynamic", "@", "glConstMMax"}]}], "}"}], ",", 
                  RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                  RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                  RowBox[{"AppearanceElements", "\[Rule]", 
                   RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                 "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                "\"\< \>\"", ",", 
                RowBox[{"Dynamic", "[", 
                 RowBox[{"NumberForm", "[", 
                  RowBox[{"massValue", ",", 
                   RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}]}], "]"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
            "}"}], "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
             "Text", "[", "\"\<coupling to neighbouring: \>\"", " ", "]"}], 
             ",", " ", "\[IndentingNewLine]", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"If", " ", "[", " ", 
               RowBox[{
                RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"m2Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m2Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], ",", " ", "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                   ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
                RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
               "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "}"}],
            "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"Text", "@", "\"\<horizontal: \>\""}], ",", 
                RowBox[{"kLable", "[", "1", "]"}], ",", " ", "\"\< || \>\"", 
                ",", " ", 
                RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", 
                "\"\< \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Row", "[", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"k1", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k1", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1", ",", " ", "k1"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], "\[IndentingNewLine]", ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                  RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                  RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                  RowBox[{"AppearanceElements", "\[Rule]", 
                   RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                 "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                "\[IndentingNewLine]", "\"\< \>\"", ",", 
                RowBox[{"Dynamic", "[", 
                 RowBox[{"NumberForm", "[", 
                  RowBox[{"k1", ",", 
                   RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
            "}"}], "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"Text", "@", "\"\<vertical: \>\""}], ",", 
                RowBox[{"kLable", "[", "2", "]"}], ",", " ", "\"\< || \>\"", 
                ",", " ", 
                RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", 
                "\"\< \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"k2", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k2", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "2", ",", " ", "k2"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], "\[IndentingNewLine]", ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                  RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                  RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                  RowBox[{"AppearanceElements", "\[Rule]", 
                   RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                 "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                "\"\< \>\"", ",", 
                RowBox[{"Dynamic", "[", 
                 RowBox[{"NumberForm", "[", 
                  RowBox[{"k2", ",", 
                   RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "]"}]}], " ", 
            "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
                RowBox[{"kLable", "[", "3", "]"}], ",", " ", "\"\< || (\>\"", 
                ",", "  ", 
                RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
                "\"\< + \>\"", ",", " ", 
                RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
                "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"k3", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k3", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "3", ",", " ", "k3"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], "\[IndentingNewLine]", ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                  RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                  RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                  RowBox[{"AppearanceElements", "\[Rule]", 
                   RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                 "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                "\"\< \>\"", ",", 
                RowBox[{"Dynamic", "[", 
                 RowBox[{"NumberForm", "[", 
                  RowBox[{"k3", ",", 
                   RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
            "}"}], "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
                RowBox[{"kLable", "[", "4", "]"}], ",", " ", "\"\< || (\>\"", 
                ",", "  ", 
                RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
                "\"\< - \>\"", ",", " ", 
                RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
                "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"k4", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k4", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "4", ",", " ", "k4"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], "\[IndentingNewLine]", ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                  RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                  RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                  RowBox[{"AppearanceElements", "\[Rule]", 
                   RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                 "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                "\"\< \>\"", ",", 
                RowBox[{"Dynamic", "[", 
                 RowBox[{"NumberForm", "[", 
                  RowBox[{"k4", ",", 
                   RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
            "}"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Dynamic", "@", 
              RowBox[{"If", "[", " ", 
               RowBox[{
                RowBox[{"rawNumberOfMasses", " ", "\[Equal]", " ", "1"}], 
                "\[IndentingNewLine]", ",", "\"\<\>\"", "\[IndentingNewLine]",
                 ",", " ", 
                RowBox[{"Row", "[", 
                 RowBox[{"{", " ", 
                  RowBox[{
                   RowBox[{"Text", "@", "\"\<coupling from \>\""}], ",", " ", 
                   RowBox[{"Dynamic", "@", 
                    RowBox[{"massLabel", "[", " ", "m1Sel", "]"}]}], ",", 
                   RowBox[{"Text", "@", "\"\< to: \>\""}]}], "}"}], "]"}]}], 
               "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"Switch", "[", 
               RowBox[{
               "rawNumberOfMasses", ",", "\[IndentingNewLine]", "1", ",", 
                "\"\<\>\"", ",", "\[IndentingNewLine]", "2", ",", " ", 
                RowBox[{"Dynamic", "@", 
                 RowBox[{"massLabel", "[", " ", 
                  RowBox[{"First", "@", 
                   RowBox[{"Delete", "[", " ", 
                    RowBox[{
                    RowBox[{"Range", "[", "2", "]"}], ",", " ", "m1Sel"}], 
                    "]"}]}], " ", "]"}]}], ",", "\[IndentingNewLine]", "_", 
                ",", " ", 
                RowBox[{"Dynamic", "@", 
                 RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Dynamic", "[", 
                    RowBox[{"moSel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"moSel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                     " ", 
                    RowBox[{"(", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}], ",", 
                    "m1Sel"}], "]"}], ")"}]}], ")"}]}], "\[IndentingNewLine]",
                   "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Dynamic", "@", 
              RowBox[{"If", "[", " ", 
               RowBox[{
                RowBox[{"rawNumberOfMasses", " ", "\[Equal]", " ", "1"}], 
                ",", "\"\<\>\"", ",", 
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"kLable", "[", "5", "]"}], ",", " ", 
                   "\"\<: \>\""}], "}"}], "]"}]}], "\[IndentingNewLine]", 
               "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"If", "[", " ", 
               RowBox[{
                RowBox[{"rawNumberOfMasses", " ", "\[Equal]", " ", "1"}], 
                ",", "\"\<\>\"", ",", "\[IndentingNewLine]", 
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Dynamic", "@", 
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k5", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k5", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKarrayOriginElement", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "moSel", ",", " ", 
                    "k5"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                   ",", "\"\< \>\"", ",", 
                   RowBox[{"Dynamic", "@", 
                    RowBox[{"NumberForm", "[", " ", 
                    RowBox[{"k5", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}]}]}], 
                  "\[IndentingNewLine]", "}"}], "]"}]}], 
               "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
            "}"}]}], "\[IndentingNewLine]", "}"}], " ", "]"}]}]}], " ", 
      RowBox[{"(*", "Grid", "*)"}], "\[IndentingNewLine]", "}"}], 
     "\[IndentingNewLine]", ",", " ", 
     RowBox[{"Dynamic", "[", 
      RowBox[{"tabNumber", ",", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"tabNumber", " ", "=", " ", "#"}], " ", ";", 
          RowBox[{"tick", "=", 
           RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], "]"}], 
     "\[IndentingNewLine]", ",", " ", 
     RowBox[{"ImageSize", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"250", ",", "350"}], "}"}]}]}], " ", "\[IndentingNewLine]", 
    "]"}], " ", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tick", ",", "False"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qPlaneLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tauSliderValue", ",", "1"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"omegaIndex", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"scale", ",", " ", "0.2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqMeshSize", ",", "12"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynMeshSize", ",", "14"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"matrix", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynamics", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bInitDefaults", ",", " ", "True"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshMatrix", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynamics", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshFreqPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tabNumber", ",", "1"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynTab", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqTab", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parametersTab", ",", " ", "3"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "The", " ", "number", " ", "of", " ", "default", " ", "masses", " ", 
     "are", " ", "coupled", " ", "by", " ", "these", " ", "next", " ", "four",
      " ", 
     RowBox[{"variables", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"rawNumberOfMasses", ",", " ", "3"}], "}"}], ",", " ", 
       "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"mLocDefault", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.9", ",", "0.7"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.4", ",", " ", "1.2"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1.3", ",", " ", "1.4"}], "}"}]}], "}"}]}], "}"}], ",", 
       " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"rawArrayOfMasses", ",", " ", 
         RowBox[{"{", 
          RowBox[{"10", ",", " ", "15", ",", " ", "20"}], "}"}]}], "}"}], ",",
        " ", "None"}], "}"}]}], "*)"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawNumberOfMasses", ",", " ", "1"}], "}"}], ",", " ", "None"}],
     "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mLocDefault", ",", " ", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"0.9", ",", "0.7"}], "}"}], 
        RowBox[{"(*", 
         RowBox[{",", 
          RowBox[{"{", 
           RowBox[{"0.4", ",", " ", "1.2"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1.3", ",", " ", "1.4"}], "}"}]}], "*)"}], "}"}]}], "}"}], 
     ",", " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawArrayOfMasses", ",", " ", 
       RowBox[{"{", "10", 
        RowBox[{"(*", 
         RowBox[{",", " ", "15", ",", " ", "20"}], "*)"}], "}"}]}], "}"}], 
     ",", " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"moSel", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"pick", " ", "anything", " ", "that", " ", 
     RowBox[{"isn", "'"}], "t", " ", "m1Sel"}], " ", "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m1Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m2Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"kArray", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], " ", 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"u", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parameterLocatorDependencies", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"couplingData", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstSpringColorsByN", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k1", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k2", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k3", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k4", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k5", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
    RowBox[{"{", "tick", "}"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}], "\[IndentingNewLine]", 
   ",", 
   RowBox[{"SynchronousInitialization", "\[Rule]", "False"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "This", " ", "seems", " ", "to", " ", "cause", " ", "the", " ", 
     "tabNumber", " ", "to", " ", "switch", " ", "if", " ", 
     RowBox[{"enabled", "."}]}], " ", "*)"}], "\[IndentingNewLine]", ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{
  3.6013845596960135`*^9, {3.6013849419158754`*^9, 3.6013850018713045`*^9}, {
   3.6013850794767437`*^9, 3.601385097266761*^9}, {3.601385134804908*^9, 
   3.6013851913481417`*^9}, 3.601385299290316*^9, {3.601385437846241*^9, 
   3.6013854385522814`*^9}, 3.60138559342614*^9, {3.6013868469728384`*^9, 
   3.6013870381917753`*^9}, 3.6013877675854945`*^9, {3.601388376944348*^9, 
   3.6013883890050373`*^9}, 3.6013884249690948`*^9, {3.601388673194292*^9, 
   3.6013886824388213`*^9}, {3.6013891407130327`*^9, 3.6013891464263597`*^9}, 
   3.601389335188156*^9, {3.601389712307726*^9, 3.601389713789811*^9}, {
   3.60138980486102*^9, 3.6013899056717863`*^9}, 3.6013901293345785`*^9, {
   3.60139028932573*^9, 3.6013902895987453`*^9}, {3.601390478563554*^9, 
   3.6013904836558447`*^9}, {3.6013905478495164`*^9, 3.601390553751854*^9}, 
   3.601390946273305*^9, {3.601391042574813*^9, 3.601391043374859*^9}, {
   3.6013918894322505`*^9, 3.601391892836445*^9}, {3.601392097848171*^9, 
   3.6013921005103235`*^9}, {3.601392139997582*^9, 3.6013921427507396`*^9}, 
   3.6015052226223345`*^9, {3.6015107568728757`*^9, 3.6015107572798986`*^9}, {
   3.601515719590727*^9, 3.601515719851742*^9}, {3.601551924279357*^9, 
   3.6015520208098783`*^9}, {3.6015520737049036`*^9, 
   3.6015520787571926`*^9}, {3.6015521640750723`*^9, 3.60155218763342*^9}, {
   3.6015525875472937`*^9, 3.601552630947776*^9}, {3.6015925911300864`*^9, 
   3.601592613813384*^9}, {3.6015926462762403`*^9, 3.6015926750798883`*^9}, 
   3.6015927261078067`*^9, {3.601592756429541*^9, 3.6015927749646015`*^9}, {
   3.601592813396799*^9, 3.6015928171110115`*^9}, {3.6015936054051*^9, 
   3.601593616936759*^9}, {3.6015936522817807`*^9, 3.601593659804211*^9}, {
   3.6015936977343807`*^9, 3.601593703482709*^9}, {3.6015938032044134`*^9, 
   3.601593839254475*^9}, {3.6015939055702677`*^9, 3.6015939355059805`*^9}, {
   3.6015940687956038`*^9, 3.601594074351922*^9}, {3.601594145196974*^9, 
   3.6015941714714766`*^9}, {3.6015942162630386`*^9, 3.601594258628462*^9}, {
   3.601594310046403*^9, 3.6015943121155214`*^9}, {3.601594409881113*^9, 
   3.601594438379743*^9}, {3.6015945562274837`*^9, 3.6015945581155915`*^9}, 
   3.601594604665254*^9, {3.6015946540800805`*^9, 3.601594656909242*^9}, {
   3.601594703469905*^9, 3.601594755839901*^9}, {3.6015948057987585`*^9, 
   3.601594991432376*^9}, {3.601595046788542*^9, 3.601595049002669*^9}, {
   3.6015950818715487`*^9, 3.601595181218231*^9}, {3.6015952625988855`*^9, 
   3.6015952890633993`*^9}, 3.6015953542951307`*^9, {3.6015955048957443`*^9, 
   3.6015955051827607`*^9}, {3.60159561566708*^9, 3.601595631144965*^9}, {
   3.601595829788327*^9, 3.6015958783671055`*^9}, {3.6015963343461857`*^9, 
   3.601596523434001*^9}, {3.6015979474234486`*^9, 3.6015979721458626`*^9}, 
   3.601598243986411*^9, {3.601598621801021*^9, 3.601598627504347*^9}, {
   3.6016507978370523`*^9, 3.601650907184306*^9}, {3.601650937196023*^9, 
   3.6016509572121677`*^9}, {3.6016509919631553`*^9, 
   3.6016511666671476`*^9}, {3.6016512580043716`*^9, 3.601651307219187*^9}, {
   3.601651353112812*^9, 3.601651395776252*^9}, {3.6016514665432997`*^9, 
   3.6016514680663867`*^9}, {3.6016514986871386`*^9, 3.601651522722513*^9}, {
   3.6016515632218294`*^9, 3.6016515747754903`*^9}, {3.6016516188090086`*^9, 
   3.6016516664427333`*^9}, 3.601651704439907*^9, {3.601651747806387*^9, 
   3.6016517664024506`*^9}, {3.601651816635324*^9, 3.6016519070244937`*^9}, {
   3.601652367313821*^9, 3.601652468751623*^9}, {3.6016525085238976`*^9, 
   3.6016525239017773`*^9}, {3.601652571209483*^9, 3.601652656792378*^9}, 
   3.6016526903142953`*^9, {3.601652788091888*^9, 3.60165287082362*^9}, 
   3.601654156059131*^9, 3.6016546044967804`*^9, {3.6016551805267277`*^9, 
   3.6016552125065565`*^9}, {3.6016714442643642`*^9, 3.601671475358143*^9}, {
   3.6016715180945873`*^9, 3.6016715710796175`*^9}, {3.6016716117969465`*^9, 
   3.601671705532308*^9}, {3.6016717722811255`*^9, 3.601671913068178*^9}, {
   3.601671956118641*^9, 3.6016719704834623`*^9}, 3.601672102002985*^9, {
   3.601672313946107*^9, 3.6016723218575597`*^9}, {3.6016728085073943`*^9, 
   3.6016728355179396`*^9}, 3.6016729236639814`*^9, {3.6016860266468124`*^9, 
   3.6016861553621745`*^9}},
 CellID->106836794],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{}}, {{{
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.4130444789719152, 2.7569151748438447`*^-18], {Complex[
      0.5861464486009521, -2.825764865181982*^-17], Complex[
      0.8102051226649282, 0.]}}, {
      Complex[0.3140688520221368, 1.8976567723170987`*^-18], {Complex[
      0.8102051226649281, 0.], Complex[-0.5861464486009522, 
      2.8257648651819845`*^-17]}}}, $CellContext`dynMeshSize$$ = 
    14, $CellContext`dynPlot$$ = {CompressedData["
1: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
lQcK3tGRmWfk0f/KHaQZ
     "], {10}, 1, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 14}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 12, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyNvXdUFsnzPYxZURGzYs5xxZwWHVEw55zXhDmBukbMYsIMiopZV8SAAXMY
lJwfHnJUUVHECGYMv/0udXs+U737npd/OKdOn356qqp7qm7d6ao1ad5gu/wm
JiZ+RU1MCvz9f3C1Y9eCzxfy6e+W/OX7rFy1/Z7OVQfPS1Igtx5aYtmPxE9q
h0zvyfs/xQt5a/NOuT96ZKvPj9xJvGgTo+jnyVKPOMQ4RFlHsfHp6hMH+69m
nQ1MblSVHrPXZJTQ5Cb0d9N6ds77nnweo/JrZGRET4sYPr+y+PqaTePttHX2
zVuPEjMk0fpUmSS+fqWzu/Wx/oeThbxr3vMqq7x8PN3eJrPnylXWjl3W8nCn
ZGWeW/IDo3l+obfRP4xJvksShBx621elkPGdfZyQQ29P6k2pMzhfHJsnSzVu
HPv2cwM+Pl2NONDDtEE2lxvV+U0mf7dYq/0u9Lb8YfGiPXcl8fFKj8J+iRaO
KXx+ZVO1nxsOXkgVcujtSIHKB+NiU/n6FY8xpZfeeK/NA73NTimScbO3pB9l
+E6P+hdmJyqVGjQ9fP35dxV6Wxo7p83HmfFCDr11HJ1U8vkaTQ69BWz9Yt9r
WwKbJ0uNbjYsrGvzJDY+Xb1RJKpUxm8pTG5Up08K3lXFPE3IoTevWS2TTUc8
5OOVsetbRXU5x+XpysBqNxyHfNHmgd5qx0RFZtul8vUr3x3XuTUYlSzk0Fuv
eyd+PzhU0o8SW79wmd8N8OePQm+uiUM2TdinyaG3Tje6qi+uJgg59JY41KtG
yzNJbJ4sdfin9rnJV1LY+HR1nIvn6wVKGpMb1eIrpjoseabJobcDGysdO+Io
jVfcLYdWWlovlc+vVDSYF7yoJAs59NblaXxuhbGJfP3KoHHnPV980J4XenO8
n9j86G+SfpSnr+ze/PwUR/p8JfQ2qpRapl/nRCGH3hzPfZz3+lKSkENvZTvX
q/WgYAqbJ0u9dCPguqV7Chufrlaf/NxyQQ0uN6qmB4sc67pOmx96K1ra0e11
+QQ+Xqk55XK/5c6xfH7Fw7/LC6uwaCGH3sI31PtatVU0X79SaPQ5n98WaHLo
LchxRungYTFcP8rsEQ3n9CuCfZci9Ga3fc/v74smCzn0Zmboa/lrryaH3oY2
Xr/MpEwymydL/dL8wglj60Q2Pl1tctB6nZIby+RGNf/ChosPXIoScujNdcWU
mJ1OIXy8MsBl7NbIB/58fqVbzKTCEdMChBx6e9/0vnnyWj5PtuJUJNq56DCj
kENvnZuVn9rwRhzXj5Iw+sn4Cr6JCtYHve1u1j930aRkIYfePt563NPQOEnI
obfPqeEV9k2PZ/NkqYfLhrcdWCeajU9Xr5++0qZYzVAmN6rmYTVmnal1R8j/
6w964+OhNz4/9HboX9eTrfD1Q2+f2PNCb9AP6VOB3qBPyKE3pn8FemP2UqC3
D3r7KtAb8wcFemP+I9bL/A3jFeafmF9h/qxAbx/1/o/1K2y/KNAb21/Qj6Lf
j6+E3vT795XQG9vvQm/sfBB6Y+eJ0Bs7f4Te2Hkl9MbON6E3dh4KvbHzU+iN
nbdCb+x8FnpboT/Phd5w/g/Ne18IvT2j9wXk0NtKer9ADr0NpveRfp4sFe8v
/fh0tTK97/Ryo4r3I+T8fcrGK3j/svmV8fS+hhx6G0Hvd7Z+JZ7iAcihNyuK
H5h+FMQbFJ8IvSE+gRx6Y/GM0BuLf4TeaunjJaE3Fl8JvbF4TOiNxW9Cbyze
E3pj8aHQG4snhd5Y/Cn01kEfrwq9Ib6dmxcPd4HehlE8DDn0NpPiZ8iht7MU
b+vnyVKPUXyuH5+ubqZ4Xi83qj0p/occenOkfIGNVxwov2DzK2GUj0AOvcVS
/sLWrzylfAdy6G0v5UdMP8oYyqco/xJ6Q/4FOfTG8jWhN5bfCb3F6vNBoTeW
Pwq9sXxT6I3lp0JvLJ8VemP5r9Aby5eF3lh+LfTG8nGhN56/Q29j6hft7F1Z
y5eht5j0EsMaWURLef2Q8BOdsp5EsXmy1Bl9lhW6MzlCyuuTzYrZnAj1l/L6
0ZXrOXY64CPl9fX7mVuM9/bh4xX3Oult1857IOX1S7xtYktX95Py+qRRS7b3
+cF/929/W769rnfpICmvv9PY8kvJOiFSXu87qMbLNq9Cpbx+SOagW/08Y6W8
/n5a9VFfBsVIef3cpV2uptWNkvL6DGunW2M2h0l5/XzfFLsEu2Apr/8yKaVK
xeAgKa/P8T1h13eiNF7ZM2vRQZ9pIVJeX3LJZ3f3a6FSXt/3c6p1DdtwKa9/
fbdK36yvEVJe/9b9y5fXwwxSXl91aOK3IuaIf7S8voj5xf5zgmOEHHqb4FQ2
9kCBaCGH3o5fcty5shmfJ0vNMpuzKzErUsrrJ0wa8+TN+ggpr/dbmHb1vH+4
lNc3Sg38YLYunI9Xjl43fZ1xjcvTFbeJF46OH6/ND73ZDb9Qqqo9X0+2UnWK
pYPPYoOU188/d+PA9uWSfpTOlax7JxiMUl5fvtr1m5kemhx6+/n94Lk+P6J4
XqzW/6PpoJEVotg8WWprO99651sZ2Ph0tcfoQ05TQyKY3Kh+KpNWvveccCmv
H1Op6DujXZiU1/9Q/EPP+4RKeX1cG9+jU7dpcujte88H3/dV5PP8HYdkvzk9
o5q2Hujtzx3thkysyp8rV6mdUn6aZbyWz0JviaFng7sujRRy6C3XYvCs0/si
hBx629k0a0OXGuFsniz13bIVk5eMDJXy+ksuPp+WrAuW8vqDsevijkQESnn9
xKMW6/Z1C+DjlfI7zmX8Fe0n5fVOZX4/3KSFJoferBfHrVxzi8+TreR0r+Zk
aamtH3rreq/pov0ORq4fZfJ9n7N2Q7AftbxeWbLCelWtUCGH3gpl1BvknxQk
5fXjnNvNjK8ZwObJUuet9Fpj29RXyuvDauW/fm+Yj5TXdy2bf+iC4nekvH5c
3YoFXWfckPL6Y1f8RkeaXpXy+irmw8Yu8rsn5fUNO207Hz5TWr9ytWLhY44t
wqS8/u3sx+0ddkRy/SjDV41p7zQwSsrrCzwacrmfU5iU128rab9/Q2aQlNc7
VijU88BNPymvP1swdtbqIj5SXn/3wOsKrolXpby+kFv9CQvr/vX/O6/n46E3
Pj/0du5f15Ot8PVDb7vY80Jv0A/P66FPnte/0utf5AvMXiJfaKS3r8gXmD+I
fIH5j1gv8zeRLzD/FPkC82eRL8zX+7/IF9h+EfkC218iX9DvRy2v1+9fLa+3
1u93oTd2Pgi9ddOfJ0Jv7PwRemPnldAbO9+E3th5KPTGzk+htzf681bojZ3P
Qm/f9Oe50BvOf57X433B83q8X3hej/cRz+t/0vuL5/Xx9L7jeT3ejzyvx/uU
5/Vf6P3L83q8r3le34be7zyvRzzA8/pfFD/wvL4CxRs8r0d8wvP6efp4RuiN
xT9CbyxeEnpj8ZXQG4vHhN5Y/Cb0xuI9oTcWHwq9vdTHk0JvLP4UemPxqtAb
4lue11ejeJjn9YifeV7/luJtntf3ofic5/VmFM/zvN6F4n+e13+kfIHn9bmU
X/C83oHyEZ7XI3/heT3yHZ7XIz/ieT3yKZ7XI//ieT3L14TeWH4n9JaozweF
3lj+KPTG8k2hN5afCr2xfFbojeW/Qm/T9fmy0BvLr4XeWD6u4SGUv3t8DVtl
/iW/T+/ABpUde3xTBy8p3qnDyAQh77xu5AHHqx/Vs9+zo49mxAo59GlSyv6T
RXSc0u+f+Z8Jf37Uv1GDI3WSxHjoeYrNN0Oj3do8zZXNVVbWea+W6dDls32U
th7of8PajgPnvtHkPT4t6PCjdqa698HjS47nY9j86Wq0eZnCtWy1+UeneC7+
/uOh+tLf/EVc+1g23qhOdjiVGj4lTsjz9Byq5revd8twRZPDjqZfnqxtqSQo
Pf953ljxvPPbrp01uEay8jP2S88RXU1onV/VTUtuFljwJo49V65qTP9t1rRP
mp7b/7Oey0rK3TsdNuUkiHmg5xe33r7N+hon5B0vn7z1Y+cH1azLETf3+3H8
uZQPSYVHTJ2i6T/PH+KUPQ4L/Ju009YJu8SMvBDSr0e8kI/9R29v1dGeKYtD
KiVwPSsFCh7p3rdqipDnreepUiXrw4dDgSliHthxcHLCuGpNtefKW0+G6he4
99ebxolM/3/HjRWDbUyfafMP7djtxnfv10pgoxPuH3qksvWnq10HldhWeGei
kOfNk6y6VLZwMhkp+aESPqtagTR3bf72j98lOc7OUQ43d9zQ/FIKm9+oZnWv
0KNKL01vlv/IH6jvj74MuzQwhen5k9KidNt97xckC3mfvP2l1HS7EDi9ZJKY
B37lUu+IfaMPKdxPlIkFDjV6+ehv/UzpVdeqcq7al/ZpY7MnFS/fFfUC5B2i
Xq/Xf646c0bNTSnvNft2yFu/ktt+eVKZl6lifvjbLfvWy55HaPNzPgDGt83T
m/q0Qh9b+30C51e7/Md64J+D/JfHni+Xxu2lhJa+1+T6LW098E/TzlMPdSsn
6iBCnkB1B4wfkucn6tAbTY6t7C/qEWorGg/eAvMfZXa15DWLh6SxfZehLN45
vUT5aWlifvjzlZpmlRpFafNDPozqIxjfIW9fqH8UOLtl8gBRN0FeKfgSej1k
KY9nLbr69JDm52Py9qPybJ/9ydgmXD/p6uOZPTb2upzC9JOujqU6DsZ3yjsH
1GcX7nu8ryLqO2pLGg+eBjsfFOPskKLz62nrtMo7f5TW523Vd4OS2XqMapTH
u2AH2zS2Ho3vgfH18s49NWDery5/dXwoxluy8fpz45MyJjx2p+eAJH7eKsfy
FVmxbJu2X7C/PLPPlrhYU5sfctTF2H5R9o4Z4b7wcIJiEvd/8ndqL9p3u78+
/NGqaiLzh1x19fAGpuZ/xjN/0Hg1GD887/2iNPVvusFtAl+PtxXWg9/Fvpv9
Nqjbq5ZJQm5F72WXCk8P3vNK4vpXfvPKTd9u+pDrXzlE9UGM/yPv/ag8qfXH
U/d1mr06AD+n8fhd7Ds/38CaaeeThdyS3uN1m3ru29Q8hfunUqB3/yONTbk/
pCuVqI6J8T3z3u9KzT2Pq05K0fy5LRuP38W+s+h5IsjieIqQ21CccMhL8Tcp
pD0v9lfjkdFJyydL+1GxpnorxrfIey5l276R9k8Spf0uxuv1k67OtRz5x4LT
2np60r6bMKr5h/4OfL/8vb8+lkytuDqJn28K6sIY347eU6lm++/Z/s/5Rn6i
oL6sX49R7Tvkj/KGg5rerCnOsYwr/jhxjbYe7K8KyvslKSEJ/P0i5mfvI2VV
ydujXE5r/t+N8anwu9h3Xm9OWCR5SftIGVWperFX+6V9JPhXI/LiTLU7xVf2
h/yGzUtNYv6Qqz63rvtuV0wCf14l/+utk/yC4sU82F+2nY8N+LNuspB3oPiq
dJEOHo/Ck7k+lfzxo31uOcRz+yo1f/Va3vOrtk7sl9beMf0mbtXmH0nx1Tr7
epUrxfP505XuQa29Kp+JFfJOFF8N3FZ/TqvmsWIe+H/cwlu/rXmRJOQ2FF+9
a7T+0PU+mn/Cz2dXMy4dczeG719lr9XiUtNfx7D1p6sNVrmMGlUyUch7UnxV
9WDdMtZKAj8flKQDTZe779Hm70B++/TK9bEhE/n8RnVzkUrOcy00vVlTfOX1
yn2D7ZNoMQ/88Np228R7xWP5+ay8u1Suerq5Zl/42/nTI/IdPGfkfqKE3Fkc
3qFAvDI2L55Xu9XzGeX487Pq1aBfespm8Kz87vRl/Cu9/nPVNMp32PqV9oOy
kx9PixLzC/6M6eVFOb9r80MOXhPGK3TObyn7WyO7rUlifFvyqy/Ej2L6VBqO
uLj5fVsDt5dS97l9wxYTDGJ+Udfet7fWXw20+Vuz+TF+EMVX7av+6eN7P0GM
b/n/uZ50xWDpkFXHJFLIu1F89eHt8O8FpkWI+eHPJzMXFXW4GC/mh/wo8cQw
vg+d81crL611pE+cGN+O/FYlvhl+F/5fz8y3i21HTT/jKL6yXuJ0st9orp90
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
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1: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
FmfWTv8DQ2HsJQ==
            "]], 
           Polygon[CompressedData["
1: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
An+zY/pRf53t++8s+Z2Ja4DvqxqD9h9cDfwO
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
dktwe3HV7VDeAj6Kzo/RruTXlMspX3s85p7K8X6WDUSfqFx0eIyVQ1PPRXb3
GPUnU+6WrSNbF2xLui8chGxO4hy9elxb5VCbqZsC3p97Tb9DfhftTuT/Xant
v1k8U82jvmz2LupfDj5T32feA+3FTO2D7lHw/sH3osnwa2Sn0W88HTzGPfD7
tL+U5fHMdqbfk1L7lqOi/D34mTp78BPAqZnzwwfgr1BWwz8BO9L2BNrMov7F
4NjeJreOzn1r+Gm54+5SdE6Nc9RaPRznojndr/1XPglOTp3vaY2aUr5FfmDq
/hfAHwenZL6X1M6dZ8rWDoXPzuyTDoGfntu+f0P2LaUDvHnuu61810DwreCc
ZAb1tVPnq3XAYfyfzzpu0X2UNsekXmedd+3/Tbn9QDXlXeCs4LN4NfJHdA+R
DcGnBucb84LXSf7tZPBv1D0FrqDP1qn3qB14czzni4JzbI1lf93RwJR+XgVf
lk2g/zz4e+b84mJ0bsztK3UGx1K2J5777GA/sEZxNXNuNj44DsqeF8L/yJy/
/D0313cu0foF77vuCzqjuksuke+Pfm9R9AM6R8vgd1K3Ff3TwE6p7wLto7+V
7U2JPkp+7xftQ+a76RW511Br9XVwfib+KLgssw8+C50zc9uKbEk5mGKEYkUh
dU6onF73XNnP1uB4pP3VPh9O23PQm0u7sng2ddfXO4TeCmZG/6Cc6EHl5+DU
xPerh+TjUr9XzIz6s6NfUu69gf73imdZZ3ptZj9/fe41Vy5xQdxz+UnlhrL/
JvJNyMdnfnOokrut/Pxc6p+Rb4K/CNalzKf/+qnvehlYLff6aJ3OgU/ILK8E
7095MtqY7mi6u9VCFsBxid9ufox+e1qwLcmmLow5keJm3aJ9sXyyzvi5sU/l
w2nu+4beKORvFWOflg0qBqF/bPC7kmKNYs4Pmd85uivnYY9+o+35wXsiWz1f
/jzze47uaENku+j8pZy6zP7tzzK/U6m/CfTTltIntT/U21Ff2vaAd6b+yEJ8
M8qcE14v/xRzGtnAacrf6G8r7RZGnynfuYi6G9HpEu/9k5DX5P8SxXL4mGB/
Irs+WHn1/++Emf2o7lCnpM7ldN6V18zP/H7TM/oonY8jcs9Zc+8PnpfaVs8F
h6IzGN432Bfpvn+6/B/fGZ44Nium6x56YfCdTu9G1WNMUcy9IjiOD5CfD86R
FNeSzO8GuuvXQL9Jbh80PbPvkg3fAbbSfTm1b5RdyQ/frtwsron842XBZ+RG
sEXU132tGM/X/cH+RX5mebBtzKTdBsZycfC9rSz3XnyKfr/gfR+knBa+qeR3
k1HxvjBU/hM8mjISfja4reQ74XCdXekmthvp6Fvr9W6g84i8N7Id0fZGZJbr
HWVdyfdq3a/7BHPd/c8KvkuOhp8XHGdlM5tLtifZlWxY73LKFUfE2KQzWjd3
/NW9oVPuvFc5+afg9ch2JbazOWXuf260PeX1x+deW9l7Au+R2z6Ue8uWlIcP
p/5Y5Jekzn/axTiiOPdN5tyhMfWtol9qCd4b/Zju7NJRnDpAOVXmGFtPd8nU
cbZx6vOgdTgj5gDyV41y5wZ6N9rOOjSL35ge8zflj02RXZT7fWFV5jcn+ZA2
4Pm5/ZreB24NfifR2bkydWy6Grw197urbOanzHeXY5BNDF439bk4cxwcFeOI
7hEzgm1CtqH9vSbm2Yq/8j86Z32QtY9+Q/cjzV1zbYDssBjrdaf7hfmNTXzP
lB1oHWRjslu9zZ4S/AarO9dLsiv0vkr8lndV7jxeMfcmxenEdyrNRfPrF/NW
zVfz1vuD/MCXwX5Gd8RTpJM7D1ZurHux/PYlwXPXO80JuX2FbGcje9Er2oPe
gf8LIEYb+A==
            "]], 
           Polygon[CompressedData["
1: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
c2XESGOla/yyMnKYbvk+5jbGwFOLiIHGRj22vvuFMry3GqVW7cv9OjdifW9T
hEdxPavZO2f/qeVeq3c35/AextzTi/D89+X4OdaO+awqYuaORXgQY6me/sQi
Ysyk1MMeRXhQc7v1Uh/N8V6owkPppdbh/ZYaO9n2yHjaJ2Oq+x7bogoPohdx
zbp2x6SfPIxj2xsfna+cvznt7RoRA42Frpk77D/uMYS2NTnnoWZ4BL2COZC5
kPF4bvoHx1cP9WwRMcnYdK4xyLkDL+Ze49XTesRgY7EapBbtBXdqhMaoNT7T
Z0+Et6pHDBlUhUapVXvDazQi5u+f68P+tg821WNk3xiTjc3GRL2yfmpDtivL
yN0GpP714LrHmuF59kx/dVOOp17KmD67Cg1erx4xTm3u4pimXt3TDE1W69Q8
tVrNa9ZDk9QmNWxxEf2ttl0ETy3C833F8y6Gp8Cd1bQyPJfea37O19uaoYVq
YlWFp1Kf5uR8ergZXkpPtQHtj6hpcF9jShWeR94y+/9+uB08yPdrhKfeK+Od
/vI+Y06u79U5/1/wD0V42qoRGr/U+NwS2m/f9ivCU9rH5kCXF+FBzI3UYP2s
ObPabL76RWvERGNj3ZhQhGaqnXqMR4vIsfQepTGqNfTyqSre1/HSc95eRk1i
cean5q7Hwf/K67+uwtNMUJ9bwuvo4T6CN2gJb6eH+Yrrn8580ZqGtY7na1Hb
aAe3cH4rW72InNTc9FHaj9BL0d6miHzWfLyDMTn1ehLPbw+vaI317Po2f/8y
89NxVeSk5qbm4CeU4bn0WnouvZj5VQ2eUIt8Wg94G7x6S3jD38N3FlFDeL2M
nM7czpxuRhk5n7mfOdn8KuaYc+0hjv2Btj+phXm+uaDr2dzEGL+oihxFNmea
mev75byfuaA508QiPLK5lDmoXlVP+WYZHvf6InJeve+Rzch11UdjoznqLUV4
VL2qnvaufJ56oqe+GV5cC69tDm5ebV5rbn5qM3Jp7/8efHYzvGyn7J+R2W5O
q/d9O/2t/v6IZuTYl2S8N/e2BvcT4/FiLeodPzHen7VG/4+top4yvTVqYM6P
H+B3cv48VkVN6sCMN9OqqKlYWxkFH1RG/eSDHG/rFxeWEfv1pHrTZbR/ks8/
pYwa2CEZ362NWZM6CF5Si1qVOdcJqRfmYt7DeXpB3nuvjEfzaB+d/nZQER7I
9WYOPTT139x6EzURnpJ+/ODUU3Oej/k9ezYj13P9PVyGp9bbup5PKyPnOD/n
o7lIW3hJa/jz88qo0Y0sIkeydmdMOizj4/1l1AD2Tr1Qrx1raynWMF5Jfz05
61nWuqwvvZX1I2ud1rSsbf1X/awiJzQXNCc0V1ye4znamFhGTvRYETUT55/x
cJ/sr3vTDx6d8c/YZ03R2qI1EWsj5phHpD8x97QG2wV+sxa1WWuMXuO51h6t
YR6Z/Wlt8/ucPw/Dj1bhx1+F79dDlZGjmKu8BE+sogZ5XPqj9+Gn4QH18Pj9
q/DAnxURj4w/XTNeGe96Zsxz32O90p+MSL94Q/qdnbK/bobXSD9ujDHWqAGu
TTVH7XmcrXc9c/gq8osd9Ib5PHOadfL9OvDbnoA3ggfD61ZRAx4O79wStWFj
pLFyjawPdKsilnXN/N0YZiwbWA9vsVkV9+oLj2vGOxi7etXj3brn+V5vbOyf
9YfN69F35ksbtURMNDa2yXy2kflWh8wvjInGRvvT2Nk285Xn8v3351iXRtQw
rGXs3hK+RL9sbrwrvJG/pYqah+f1yXfwXfY0J6tCP+9I/zIl9f729N9fVVFT
uCHjg/HRPts5+2OzevzeIZm/yUPq4bN2cC2kvxrGsX30eI3os77pt8zd9ZP9
009YuxlSxXF98jaZs3XI8V6zipyuY45ne+63C8f2Y3/bepzfN+s/ek69p55S
b2nO2jn9Suf0f7671+jDR1RxL+dcl3rkyM7FUel3BqSfWjfHw/nm3PqsjPrG
e/TRFfDXZXit6fDfmuG5jH96Lr3YAWVogZqg1htjJySrFcZ0Y7sx29htDfpZ
+Jv8fqNnUPtdw67lYTkezgnnxlqNmBvD83uHObba5Rp3rQ/K9eKYODZPVFHv
MAYYC/YpQxu8v7HGmGRs+DBr876f2qBG6EXGV1FrsSZrrVwNN3+1xqG2+/ue
yXa9xcj8fe2KyE3Naa1tWFMx1zWG6jXGFRFb55ThrR6Hz4T/WEZt3vzYWo4x
xdhiPqy3078PrcdvVBvMcfV67YvIfX0/Y83qef0PZXjLFfDtal+u/5Xwf4xt
jchdzffN/1eWkRtZE7E2Yr21V9YP9M56FHMTcxK9yypZn/gUvroZnkdv+FwR
XmhJFV7Imq613YVl5DJfwTfArakXX8PXNyOGG8uXZn9b47KWYE3B2pf1ha5F
5Ozm0+p5kV7SWH16Gd7WGoK1hN/m/NND6iWPzPmlB9YLn5LjryfVmxpT9ZbL
WyPW6jHNJfWrek9zVHNVPbHeWA0wl9oytcEap16oTfpNayytud5WaUT+Yl/a
p81G9OlPRdRk7GtrUNaarPFY69G/j8785pMyalKeY1uZ+eDA1PvVG5EvNTK/
aldFzerbIvq4yPzLWtgucM8q1vT7tHdsibXuGHxeRA3JsemY8cOcxdzFMfum
yDlSxpzyw+z6LTHXnFPLitAj55o1Lmtd1phWlFHzb8l8ym8B+gVrqWrMgio0
Z8Oc36s1Yk46N40Zxg7n2Kfpj1fCf4c/Tn89v4zNbw5+a7DNGu7dma84N62x
zStiDlp78/e/l/nXiir88r2Zb00to4Ytt0t/bgw0Fu4Gb1LFmnXt+o3D5/67
GbU7a3jfl/HN5+38ffrlj8vwznpovbY5w0M5X76t4hqv9XvRJc3Q2Jl5f7XX
byDWJKxF+G3Eb1zXFZFf++2rJet/czl2TTM8ufPR+sicKmJsm/QrXbM/ZxdR
E3Ut+812Vs7Hlkbk5J7vPdtW8c3prSLyV79FXZfjo4a0NuKdp2V+8E0ZMX7V
etYoq6gXbJ51C9eL33DezfXg/NcztK/H/He+Xpr3s0+Ww/8DSesGZw==
            "]], 
           Polygon[CompressedData["
1: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
pu9De4P2Pw7qGpo=
            "]]}]}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0ckuBEEcB+DSZuw8ACenmTjb9277NoODCweZiyXBiUTixFXwAIwZjOEl
XIi3kHgUXyeS/vX3S+pQ9a/qLZ1sHjeEEI5kSzllHIWQyKW+x1te8541vnM2
G8IbZ1hnwlhe9WnWOMUXTnJCnvVxPnGMVY5yRCr6MB85xDIH+cAPe96xzive
8IyHPEijz3GHfSwyy0w6h/5rrgF+M88qK9KjX7CLJab3kGRCiNK52JjOSV+Y
91sQRwqLbOISm7nMFWnRV9nKNbaxwKK06+vs4AY7eW7DbpaZ4ye/pF//YczI
YQrMMS/b+q61/f/3+gOXUiik
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0bsvQ2EAxuGv2tpJhEEqZlYJrbr3tHpvEbsds/C3EKv7/ZLYWCVMYtCw
skgMjB4x/PK8Jzkn53w5/UurzZVYCGFZ920hpFxcxUO41oDd4jDjiRBy7GWT
hfYQGsyzzog51ewZVjnNCqc4qbI9wRLHWeQYs5q1R1lghnmmGXHIO0eY4iCT
7OObb3tVp33DJLf54ywbXNeHvcgWs3xkD7t1Z3858yWfucMoGcIu89xjgfss
sqQDu8xDVnjEKms6tus8YYOnbHJOZ/Y8z7nAC3565y27fMsD08zo5e9evnON
39zklhLO+OS5jtj///oFu2gylw==
          "]]}, {
         Line[{1090, 1089, 1817, 1107, 1613, 1825, 1130, 1841, 1619, 1823, 
          1148, 1629, 1858, 1168, 1638, 1882, 1192, 1879, 1643, 1897, 1209, 
          1656, 1918, 1227, 1668, 1941, 1251, 1956, 1674, 1938, 1267, 1687, 
          1979, 1287, 2001, 1285, 1313, 1998, 1311, 1334}], 
         Line[{1091, 1609, 1818, 1108, 357, 1131, 1840, 1621, 1844, 1149, 
          1630, 1863, 1169, 1881, 1170, 1193, 1900, 1645, 1896, 1210, 1658, 
          1922, 1228, 1940, 1229, 1252, 1955, 1676, 1960, 1268, 1690, 1983, 
          1288, 2000, 1289, 1314, 2015, 1315, 1335}], 
         Line[{1092, 344, 1110, 1615, 1827, 1132, 1843, 1623, 1848, 1150, 
          1862, 1153, 1172, 1884, 1175, 1194, 1899, 1647, 1906, 1211, 1660, 
          1921, 1231, 1670, 1943, 1253, 1959, 1678, 1965, 1269, 1692, 1982, 
          1291, 2004, 1294, 1316, 2017, 1319, 1336}], 
         Line[{1095, 1610, 1820, 1112, 1832, 1116, 1134, 1625, 1851, 1852, 
          1152, 1633, 1870, 1174, 1889, 1178, 1196, 1909, 1650, 1905, 1213, 
          1662, 1931, 1233, 1671, 1948, 1255, 1968, 1681, 1964, 1271, 1694, 
          1991, 1293, 1701, 2008, 1318, 690, 1338}], 
         Line[{1096, 1611, 1821, 1114, 1618, 1835, 1135, 1850, 1627, 1855, 
          1154, 1635, 1869, 1176, 1888, 1183, 1197, 1908, 1652, 1913, 1214, 
          1664, 1930, 1235, 1952, 1242, 1256, 1967, 1683, 1972, 1272, 1696, 
          1995, 1295, 2011, 1302, 1320, 2021, 1327, 1339}], 
         Line[{1097, 1612, 1822, 1115, 1834, 1125, 1136, 1854, 1628, 1838, 
          1155, 1875, 1164, 1177, 1642, 1891, 1198, 1912, 1654, 1894, 1215, 
          1666, 1934, 1236, 1951, 1247, 1257, 1975, 1685, 1971, 1273, 1994, 
          1282, 1296, 2010, 1307, 1321, 2023, 1331, 1340}], 
         Line[{1099, 1106, 1826, 1119, 1129, 1842, 1139, 1147, 1859, 1860, 
          1159, 1883, 1639, 1181, 1191, 1898, 1201, 1919, 1657, 1917, 1219, 
          1226, 1942, 1240, 1957, 1675, 1260, 1977, 1688, 1980, 1277, 1286, 
          2002, 1300, 1312, 2016, 1325, 703, 1342}], 
         Line[{1100, 1109, 1828, 1120, 1845, 1622, 1140, 1861, 1631, 1864, 
          1160, 1171, 1885, 1182, 1901, 1646, 1202, 1923, 1659, 1920, 1220, 
          1230, 1944, 1241, 1958, 1677, 1261, 1981, 1691, 1984, 1278, 1290, 
          2003, 1301, 684, 1326, 2026, 1708, 1343}], 
         Line[{1101, 1113, 1830, 1122, 1846, 1624, 1141, 1865, 1632, 1867, 
          1161, 463, 1185, 1902, 1648, 1203, 1924, 1661, 1926, 1221, 1234, 
          1945, 1244, 1961, 1679, 1262, 1985, 1693, 1987, 1279, 2005, 1700, 
          1304, 2018, 1704, 1328, 2027, 1709, 1344}], 
         Line[{1103, 1117, 1833, 1124, 1137, 1853, 1143, 1157, 1871, 1873, 
          1163, 1890, 1641, 1187, 1199, 1910, 1205, 1932, 1663, 1929, 1223, 
          1238, 1949, 1246, 1258, 1969, 1264, 1992, 1695, 1990, 1281, 1298, 
          2009, 1306, 2022, 1705, 1330, 709, 1346}], 
         Line[{1104, 1121, 1836, 1127, 405, 1145, 1876, 1636, 1874, 1165, 
          1184, 1892, 1189, 1911, 1653, 1206, 1933, 1665, 1935, 1224, 1243, 
          1950, 1248, 1970, 1684, 1265, 1993, 1697, 1996, 1283, 1303, 2012, 
          1309, 696, 1332, 2029, 1711, 1347}], 
         Line[{1105, 1126, 1837, 1128, 1144, 1856, 1146, 1877, 1637, 1878, 
          1166, 1188, 1893, 1190, 1914, 1655, 1207, 1936, 1667, 1937, 1225, 
          1953, 1673, 1249, 1973, 1686, 1266, 1997, 1698, 1974, 1284, 1308, 
          2013, 1310, 2024, 1706, 1333, 2030, 1712, 1348}], 
         Line[{1337, 1322, 2019, 1317, 1297, 2006, 1292, 1274, 1986, 1270, 
          1963, 1962, 1680, 1254, 1237, 1946, 1232, 1216, 1925, 1212, 1904, 
          1903, 1649, 1195, 1886, 1640, 1173, 1156, 1866, 1151, 397, 1847, 
          1133, 1829, 1616, 1111, 1093, 1819, 1094}], 
         Line[{1341, 1707, 2025, 1324, 1703, 2014, 1299, 1699, 1999, 1276, 
          1689, 1978, 1976, 1259, 1954, 1250, 1239, 1669, 1939, 1218, 1916, 
          1915, 1208, 1200, 1644, 1895, 1180, 1880, 1167, 1158, 419, 1857, 
          1138, 1620, 1839, 1118, 1614, 1824, 1098}], 
         Line[{1345, 1710, 2028, 1329, 2020, 1323, 1305, 1702, 2007, 1280, 
          1989, 1988, 1275, 1263, 1682, 1966, 1245, 1672, 1947, 1222, 1928, 
          1927, 1217, 1204, 1651, 1907, 1186, 1887, 1179, 1162, 1872, 1634, 
          1868, 1142, 1626, 1849, 1123, 1617, 1831, 1102}], 
         Line[{1350, 1349, 2031, 1367, 1717, 2039, 1390, 2055, 1723, 2037, 
          1408, 1733, 2072, 1428, 1742, 2096, 1452, 2093, 1747, 2111, 1469, 
          1760, 2132, 1487, 1772, 2155, 1511, 2170, 1778, 2152, 1527, 1791, 
          2193, 1547, 2215, 1545, 1573, 2212, 1571, 1594}], 
         Line[{1351, 1713, 2032, 1368, 732, 1391, 2054, 1725, 2058, 1409, 
          1734, 2077, 1429, 2095, 1430, 1453, 2114, 1749, 2110, 1470, 1762, 
          2136, 1488, 2154, 1489, 1512, 2169, 1780, 2174, 1528, 1794, 2197, 
          1548, 2214, 1549, 1574, 2229, 1575, 1595}], 
         Line[{1352, 719, 1370, 1719, 2041, 1392, 2057, 1727, 2062, 1410, 
          2076, 1413, 1432, 2098, 1435, 1454, 2113, 1751, 2120, 1471, 1764, 
          2135, 1491, 1774, 2157, 1513, 2173, 1782, 2179, 1529, 1796, 2196, 
          1551, 2218, 1554, 1576, 2231, 1579, 1596}], 
         Line[{1355, 1714, 2034, 1372, 2046, 1376, 1394, 1729, 2065, 2066, 
          1412, 1737, 2084, 1434, 2103, 1438, 1456, 2123, 1754, 2119, 1473, 
          1766, 2145, 1493, 1775, 2162, 1515, 2182, 1785, 2178, 1531, 1798, 
          2205, 1553, 1805, 2222, 1578, 1065, 1598}], 
         Line[{1356, 1715, 2035, 1374, 1722, 2049, 1395, 2064, 1731, 2069, 
          1414, 1739, 2083, 1436, 2102, 1443, 1457, 2122, 1756, 2127, 1474, 
          1768, 2144, 1495, 2166, 1502, 1516, 2181, 1787, 2186, 1532, 1800, 
          2209, 1555, 2225, 1562, 1580, 2235, 1587, 1599}], 
         Line[{1357, 1716, 2036, 1375, 2048, 1385, 1396, 2068, 1732, 2052, 
          1415, 2089, 1424, 1437, 1746, 2105, 1458, 2126, 1758, 2108, 1475, 
          1770, 2148, 1496, 2165, 1507, 1517, 2189, 1789, 2185, 1533, 2208, 
          1542, 1556, 2224, 1567, 1581, 2237, 1591, 1600}], 
         Line[{1359, 1366, 2040, 1379, 1389, 2056, 1399, 1407, 2073, 2074, 
          1419, 2097, 1743, 1441, 1451, 2112, 1461, 2133, 1761, 2131, 1479, 
          1486, 2156, 1500, 2171, 1779, 1520, 2191, 1792, 2194, 1537, 1546, 
          2216, 1560, 1572, 2230, 1585, 1078, 1602}], 
         Line[{1360, 1369, 2042, 1380, 2059, 1726, 1400, 2075, 1735, 2078, 
          1420, 1431, 2099, 1442, 2115, 1750, 1462, 2137, 1763, 2134, 1480, 
          1490, 2158, 1501, 2172, 1781, 1521, 2195, 1795, 2198, 1538, 1550, 
          2217, 1561, 1059, 1586, 2240, 1812, 1603}], 
         Line[{1361, 1373, 2044, 1382, 2060, 1728, 1401, 2079, 1736, 2081, 
          1421, 838, 1445, 2116, 1752, 1463, 2138, 1765, 2140, 1481, 1494, 
          2159, 1504, 2175, 1783, 1522, 2199, 1797, 2201, 1539, 2219, 1804, 
          1564, 2232, 1808, 1588, 2241, 1813, 1604}], 
         Line[{1363, 1377, 2047, 1384, 1397, 2067, 1403, 1417, 2085, 2087, 
          1423, 2104, 1745, 1447, 1459, 2124, 1465, 2146, 1767, 2143, 1483, 
          1498, 2163, 1506, 1518, 2183, 1524, 2206, 1799, 2204, 1541, 1558, 
          2223, 1566, 2236, 1809, 1590, 1084, 1606}], 
         Line[{1364, 1381, 2050, 1387, 780, 1405, 2090, 1740, 2088, 1425, 
          1444, 2106, 1449, 2125, 1757, 1466, 2147, 1769, 2149, 1484, 1503, 
          2164, 1508, 2184, 1788, 1525, 2207, 1801, 2210, 1543, 1563, 2226, 
          1569, 1071, 1592, 2243, 1815, 1607}], 
         Line[{1365, 1386, 2051, 1388, 1404, 2070, 1406, 2091, 1741, 2092, 
          1426, 1448, 2107, 1450, 2128, 1759, 1467, 2150, 1771, 2151, 1485, 
          2167, 1777, 1509, 2187, 1790, 1526, 2211, 1802, 2188, 1544, 1568, 
          2227, 1570, 2238, 1810, 1593, 2244, 1816, 1608}], 
         Line[{1597, 1582, 2233, 1577, 1557, 2220, 1552, 1534, 2200, 1530, 
          2177, 2176, 1784, 1514, 1497, 2160, 1492, 1476, 2139, 1472, 2118, 
          2117, 1753, 1455, 2100, 1744, 1433, 1416, 2080, 1411, 772, 2061, 
          1393, 2043, 1720, 1371, 1353, 2033, 1354}], 
         Line[{1601, 1811, 2239, 1584, 1807, 2228, 1559, 1803, 2213, 1536, 
          1793, 2192, 2190, 1519, 2168, 1510, 1499, 1773, 2153, 1478, 2130, 
          2129, 1468, 1460, 1748, 2109, 1440, 2094, 1427, 1418, 794, 2071, 
          1398, 1724, 2053, 1378, 1718, 2038, 1358}], 
         Line[{1605, 1814, 2242, 1589, 2234, 1583, 1565, 1806, 2221, 1540, 
          2203, 2202, 1535, 1523, 1786, 2180, 1505, 1776, 2161, 1482, 2142, 
          2141, 1477, 1464, 1755, 2121, 1446, 2101, 1439, 1422, 2086, 1738, 
          2082, 1402, 1730, 2063, 1383, 1721, 2045, 1362}]}, {
         Line[{342, 612, 1973, 611, 606, 1970, 605, 1969, 600, 1966, 599, 594,
           1961, 593, 588, 1958, 587, 1957, 582, 1954, 576, 573, 1951, 572, 
          1952, 569, 568, 1948, 565, 1946, 564, 561, 1943, 560, 557, 1940, 
          556, 1941, 553, 581}], 
         Line[{352, 575, 1953, 574, 571, 1950, 570, 1949, 567, 1947, 566, 563,
           1945, 562, 1944, 559, 558, 1942, 555, 1939, 550, 545, 1934, 544, 
          539, 1930, 538, 1931, 533, 1925, 532, 527, 1921, 526, 1922, 521, 
          520, 1918, 515, 554}], 
         Line[{354, 339, 1817, 341, 340, 1818, 343, 344, 345, 1819, 346, 1820,
           347, 348, 1821, 349, 350, 1822, 351, 1824, 355, 1826, 358, 359, 
          1828, 362, 363, 1830, 366, 1831, 367, 1833, 370, 371, 1836, 374, 
          1837, 375, 377}], 
         Line[{380, 353, 1825, 356, 357, 360, 1827, 361, 364, 1829, 365, 1832,
           368, 369, 1835, 372, 1834, 373, 376, 1839, 381, 1842, 386, 387, 
          1845, 392, 1846, 393, 398, 1849, 399, 1853, 404, 405, 410, 1856, 
          411, 414}], 
         Line[{416, 378, 1841, 382, 1840, 384, 388, 1843, 390, 394, 1847, 396,
           1851, 400, 1850, 402, 406, 1854, 408, 412, 1857, 418, 1859, 422, 
          1861, 424, 428, 1865, 430, 434, 1868, 436, 1871, 440, 442, 1876, 
          446, 1877, 448, 451}], 
         Line[{452, 1878, 449, 447, 443, 1874, 441, 1873, 1872, 437, 435, 
          1867, 431, 429, 1864, 425, 423, 1860, 419, 413, 1838, 409, 407, 
          1855, 403, 401, 1852, 397, 395, 1848, 391, 389, 1844, 385, 383, 379,
           1823, 417}], 
         Line[{454, 415, 1858, 420, 421, 1863, 426, 1862, 427, 432, 1866, 433,
           1870, 438, 1869, 439, 444, 1875, 445, 450, 1880, 455, 1883, 458, 
          459, 1885, 462, 463, 466, 1887, 467, 1890, 470, 471, 1892, 474, 
          1893, 475, 477}], 
         Line[{480, 453, 1882, 456, 1881, 457, 460, 1884, 461, 464, 1886, 465,
           1889, 468, 1888, 469, 472, 1891, 473, 476, 1895, 481, 1898, 486, 
          487, 1901, 492, 1902, 493, 498, 1907, 499, 1910, 504, 1911, 505, 
          510, 1914, 511, 514}], 
         Line[{516, 1879, 478, 482, 484, 1900, 488, 1899, 490, 494, 1903, 496,
           1909, 500, 1908, 502, 506, 1912, 508, 512, 1915, 518, 1919, 522, 
          524, 1923, 528, 1924, 530, 534, 1927, 536, 1932, 540, 1933, 542, 
          546, 1936, 548, 551}], 
         Line[{552, 1937, 549, 547, 1935, 543, 541, 537, 1929, 1928, 535, 
          1926, 531, 529, 525, 1920, 523, 519, 1917, 1916, 513, 1894, 509, 
          507, 1913, 503, 501, 497, 1905, 1904, 495, 1906, 491, 489, 485, 
          1896, 483, 1897, 479, 517}], 
         Line[{578, 1974, 650, 648, 1996, 644, 642, 638, 1990, 1989, 636, 
          1987, 632, 630, 1984, 626, 624, 1980, 620, 1978, 614, 610, 1971, 
          608, 1972, 604, 602, 598, 1964, 1963, 596, 1965, 592, 590, 1960, 
          586, 584, 580, 1938, 618}], 
         Line[{615, 675, 2013, 674, 2012, 671, 670, 2009, 667, 2007, 666, 663,
           2005, 662, 659, 2003, 658, 2002, 655, 1999, 651, 646, 1994, 645, 
          1995, 640, 639, 1991, 634, 1986, 633, 628, 1982, 627, 1983, 622, 
          621, 1979, 616, 654}], 
         Line[{617, 579, 1956, 583, 1955, 585, 589, 1959, 591, 595, 1962, 597,
           1968, 601, 1967, 603, 607, 609, 1975, 613, 1976, 1977, 619, 623, 
          1981, 625, 629, 1985, 631, 635, 1988, 637, 1992, 641, 1993, 643, 
          647, 1997, 649, 577}], 
         Line[{652, 700, 2024, 699, 696, 695, 2022, 692, 2020, 691, 688, 2018,
           687, 684, 683, 2016, 680, 2014, 676, 673, 2010, 672, 2011, 669, 
          668, 2008, 665, 2006, 664, 661, 2004, 660, 657, 2000, 656, 2001, 
          653, 679}], 
         Line[{677, 713, 2030, 712, 2029, 711, 710, 709, 2028, 708, 707, 2027,
           706, 705, 2026, 704, 703, 2025, 701, 698, 2023, 697, 694, 2021, 
          693, 690, 2019, 689, 686, 2017, 685, 682, 2015, 681, 678, 1998, 
          702}], 
         Line[{717, 987, 2187, 986, 981, 2184, 980, 2183, 975, 2180, 974, 969,
           2175, 968, 963, 2172, 962, 2171, 957, 2168, 951, 948, 2165, 947, 
          2166, 944, 943, 2162, 940, 2160, 939, 936, 2157, 935, 932, 2154, 
          931, 2155, 928, 956}], 
         Line[{727, 950, 2167, 949, 946, 2164, 945, 2163, 942, 2161, 941, 938,
           2159, 937, 2158, 934, 933, 2156, 930, 2153, 925, 920, 2148, 919, 
          914, 2144, 913, 2145, 908, 2139, 907, 902, 2135, 901, 2136, 896, 
          895, 2132, 890, 929}], 
         Line[{729, 714, 2031, 716, 715, 2032, 718, 719, 720, 2033, 721, 2034,
           722, 723, 2035, 724, 725, 2036, 726, 2038, 730, 2040, 733, 734, 
          2042, 737, 738, 2044, 741, 2045, 742, 2047, 745, 746, 2050, 749, 
          2051, 750, 752}], 
         Line[{755, 728, 2039, 731, 732, 735, 2041, 736, 739, 2043, 740, 2046,
           743, 744, 2049, 747, 2048, 748, 751, 2053, 756, 2056, 761, 762, 
          2059, 767, 2060, 768, 773, 2063, 774, 2067, 779, 780, 785, 2070, 
          786, 789}], 
         Line[{791, 753, 2055, 757, 2054, 759, 763, 2057, 765, 769, 2061, 771,
           2065, 775, 2064, 777, 781, 2068, 783, 787, 2071, 793, 2073, 797, 
          2075, 799, 803, 2079, 805, 809, 2082, 811, 2085, 815, 817, 2090, 
          821, 2091, 823, 826}], 
         Line[{827, 2092, 824, 822, 818, 2088, 816, 2087, 2086, 812, 810, 
          2081, 806, 804, 2078, 800, 798, 2074, 794, 788, 2052, 784, 782, 
          2069, 778, 776, 2066, 772, 770, 2062, 766, 764, 2058, 760, 758, 754,
           2037, 792}], 
         Line[{829, 790, 2072, 795, 796, 2077, 801, 2076, 802, 807, 2080, 808,
           2084, 813, 2083, 814, 819, 2089, 820, 825, 2094, 830, 2097, 833, 
          834, 2099, 837, 838, 841, 2101, 842, 2104, 845, 846, 2106, 849, 
          2107, 850, 852}], 
         Line[{855, 828, 2096, 831, 2095, 832, 835, 2098, 836, 839, 2100, 840,
           2103, 843, 2102, 844, 847, 2105, 848, 851, 2109, 856, 2112, 861, 
          862, 2115, 867, 2116, 868, 873, 2121, 874, 2124, 879, 2125, 880, 
          885, 2128, 886, 889}], 
         Line[{891, 2093, 853, 857, 859, 2114, 863, 2113, 865, 869, 2117, 871,
           2123, 875, 2122, 877, 881, 2126, 883, 887, 2129, 893, 2133, 897, 
          899, 2137, 903, 2138, 905, 909, 2141, 911, 2146, 915, 2147, 917, 
          921, 2150, 923, 926}], 
         Line[{927, 2151, 924, 922, 2149, 918, 916, 912, 2143, 2142, 910, 
          2140, 906, 904, 900, 2134, 898, 894, 2131, 2130, 888, 2108, 884, 
          882, 2127, 878, 876, 872, 2119, 2118, 870, 2120, 866, 864, 860, 
          2110, 858, 2111, 854, 892}], 
         Line[{953, 2188, 1025, 1023, 2210, 1019, 1017, 1013, 2204, 2203, 
          1011, 2201, 1007, 1005, 2198, 1001, 999, 2194, 995, 2192, 989, 985, 
          2185, 983, 2186, 979, 977, 973, 2178, 2177, 971, 2179, 967, 965, 
          2174, 961, 959, 955, 2152, 993}], 
         Line[{990, 1050, 2227, 1049, 2226, 1046, 1045, 2223, 1042, 2221, 
          1041, 1038, 2219, 1037, 1034, 2217, 1033, 2216, 1030, 2213, 1026, 
          1021, 2208, 1020, 2209, 1015, 1014, 2205, 1009, 2200, 1008, 1003, 
          2196, 1002, 2197, 997, 996, 2193, 991, 1029}], 
         Line[{992, 954, 2170, 958, 2169, 960, 964, 2173, 966, 970, 2176, 972,
           2182, 976, 2181, 978, 982, 984, 2189, 988, 2190, 2191, 994, 998, 
          2195, 1000, 1004, 2199, 1006, 1010, 2202, 1012, 2206, 1016, 2207, 
          1018, 1022, 2211, 1024, 952}], 
         Line[{1027, 1075, 2238, 1074, 1071, 1070, 2236, 1067, 2234, 1066, 
          1063, 2232, 1062, 1059, 1058, 2230, 1055, 2228, 1051, 1048, 2224, 
          1047, 2225, 1044, 1043, 2222, 1040, 2220, 1039, 1036, 2218, 1035, 
          1032, 2214, 1031, 2215, 1028, 1054}], 
         Line[{1052, 1088, 2244, 1087, 2243, 1086, 1085, 1084, 2242, 1083, 
          1082, 2241, 1081, 1080, 2240, 1079, 1078, 2239, 1076, 1073, 2237, 
          1072, 1069, 2235, 1068, 1065, 2233, 1064, 1061, 2231, 1060, 1057, 
          2229, 1056, 1053, 2212, 1077}]}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1:eJx0XHk0Vm331iAqzdIkpKhokKSibA0aSEkUkpQKIRVJpEEZyph5SuZ5fMzj
NmXImCRRhlQy9BzRqPC7387zfN/6rN/7/vOu9ay9tvvcZ+9rX9fZe7firKnq
+ckcHBxl3BwcU8j/qVW8715IpILV1yABRf5icPGByOfhFHBf4crXXZ0IXLnX
zji3loDl8inOW/wpaLxn9+LxVl8sfqPeJ3OtCG4aabZ35lBwve5El1ZzEZba
p+9U6UqF6ceCE8IiKLjXn9enb/QMZa76C1dtvg2LHZx5tY9QcE5iWL+mqgE5
57uvklGIxt/Hm8NOtjBBsMThAAezEafwnJcMmpaHIknKuxzPMCH4Snwlx45G
XJtxxH5zaTHGhozcR00m+P4OeFZYWYvBfFqGjbOLEGws5nu9YQKnsfBO6all
KPTHVf3GzzT8cyZTe/AuBSIOm9dtf8nAxHCVRXadj1DXu/yH8ycKustEr/Xp
ucG1SSWL1bbEQ4/HnukWwxR4LVyikTwjBZgP3y2VNQoHzTt34sZ6KZgSHObQ
8TAOml5vyrCVLIS5DzYszsqj4OrJ+KKki0fhwitZjo+FaVAydG+7bw8FSe93
vpyulYWvN0R/3X32JvB+m3U66i0FusUPBO9GPcVBp1VLTGUC0Nx/86sdDsTP
J2GRhLfVOPu9cKezbww2PKmXatpEgU3Pml3L99eh0fU3G2+ez0KxO2Jp278y
gfqaIRT8uha3fBEyChTIww+ujS1ZTCY8e3dkk/Hbp3jxRFV3KabiU9OnUT5m
FAxr7GvVsihCZ3Uh0Vf3EjG8Y4eFTBIFj5Q5BUy2xOMtIwVHLXVnCOEWjAsn
9/B0ZMncO19sQZ7Tc/GxnGQQmJQQ9Imi4Nr1amOutBgwFk9d9c4xG4w17AMy
Gih4m+Re/3gwGowKouY99EwH0aGViXffUPBwzC2RkeSInpta7PcI3od2Stl8
8jgF5q2PVO9yxuJs/hdav/S90P1sL3h/pUDZ4L1RqC0DL/kFFu/QSsekBz/E
3Ij/fZs/ZYh/zcFF+y5Wub7OwIczX2wszKKgbbkkckUW4TstCeewyVmY+Phz
w7gfBSbcj08W3stH3gVWJdov0lF0ym7XtFQK3mhmH1ivkopcSwLFpvVGYkbq
Q66cDxScT48bV6s3xEgTxsulh3yBuVChuHmUAnGbc778sr6gF2Xssu1QBPAu
SJIw+0FBmats8e2mdChOD/SIlMyCCPEj5zhLKbi0LTNoWW4mWDe/s4gryIKP
WZs7tuRTkMkzPGUlHwP0rLapZjzKBpA3tA1+SkGC/OM9738mAI/rO9VZDalw
c8qRvD/tFGTznPfxEgjBehUX6qNCMtqqi1SEDZD4nKegcP9nLNZHP6r+rJOK
02/k+ju/oyBnUiDnEKagn54F18KTOdgqpzGdt5yCA8s6eL/KxOBiK4k9G8Iy
UX3fJdv0ZgpW1XFSSV0e8OeKdmVrYgiq+w9I7h4hcZiy7vFgXzzkaD5atAo9
UUJY2fHgEAVF3PtDOn4Vg4CohElwQzKoxKtWNwZToMTxfkl2fhnUzeXhVS9O
g3b9dFNOawrSfnyI3apfCe6dRfFtL7OB+ZnTSHc3BfaSL13uiZeD4WejqcMx
qbD03acNpy9T8PJEoaaRYjEEOHBFVUolwdmvF+BeFAXlmsemObumQ8ERgbG+
o04w1q3q0PCegtTpQ41bq52guPDqlgU9DhB+tGlKyhg5f459zu6PyWgvKOEo
kcLAp8KRmhtbKRA175+1bn0cJjZuK2jPZGBWmdS74x0UePDG7Cv8Y4v35jJe
+n6KwT2cjk5D38h7LMnM3KeUDpLevf2RPAGQVLp3q1s3BWa7ejtiJpXA8RUc
ntMnJYJ5FHcLhFJwPPlxUZZ3NYypb7hp8CQPZl3t9LWbTcHd+AXX4qc3Qphv
U1GoXRHIve+1MzdmQrLspVOVOo1QdThKkW99FhR2Om5fc58JuiPiYvtVGwCF
1T59L02F5td6szMIvn1hqoe0KtXAi7u+6fYdLmjvJlhnIkWB6clEg/UXi6BT
+OxaYYEI9LpwbsHvDAq6mOuPO4S5wNhAKwR/QKz6/FrvEJJ8VIgs4LX2Qv53
QW3FZvmoZ9q/xb+aAr9lHJzcnaGYNseNZ/3raDwarcVcRt57tv6hknQMgJcX
5S+UmXjB3kb/No/fFEwVkPjkKZkJyjwntx1eEw38Zx4I5rVQsMb+1H2VWeUw
U/PmeMfNcpDPizy4YioFss7OC5yka8HSOlrVaH4ptIQNPH9VxQQ9z5h206Mv
oMjLTyuqrQ4WZDk0z7//GWRPm02fs+AlxNiKJnlNQ3jVn5Iv8uMzzNwsdcG0
oBw+LBpWVKf88IBdAbWVxJvO8pXK3BllYPfbTTTisw9++7Hky2QPCtw2FJVF
Dgfho1jta6YFFbg362Log0sUDKystx+9m4rR53YFr+l+hkf2zhAL2kLB9hkK
j1fPzMf4B+sqnAUrsPTM9Hd8+0kdGagdc0jLxKAbsYF8VUXIvWr4VhrBmYtl
05avLHoCsgHXG+Ruh8KU3VpC+wg+2O26nXK1Iw10kldq1+oXwpEXHB+WJ5Jz
lnRxdhqWQLp2E2PWl6eg8Wjvl50SFDhn3LhYObsKjpQum3NZuQH22hXORWUm
5FOte3eIPYXLpXMdnu2pgdqmE8cFSpig5JcuERvFAK7edQqlg/XAXb3ERucj
Ezj+3/8G2fbIske2fQHtH1n+ke3fjj4PqtDnQfZ5tOnzYzZ9fjzBOr8j/bx4
nn5ePMx63l30/eAa+n6QfT9r6fuEYPo+gX2fUvT9Qwx9/8C+f/H7vs7bWvzg
x3zp2M78cmDcrxnaTd57iX90QV9OBJROGuesO1ANruvfB7fuoECbjgf0oeMB
2PHAQ8cPsuIH2PEjQ8cbsuIN2fF2lo5PLKTjE9nxuR6Z43+oerwRtHCNw+Jy
DI3n8Xxlw4R+jdVfnDLL0T/1VPGxvFIs5z132WopBTPpfEF9Ol+QnS/pdH5h
HZ1fyM4vVj5CFJ2PwM7He3T+Ai+dv8DOXyad7/iNzndg5/vC3p+GquXZyKF/
BkPRHbQYa25cJX83yavQq7ymEt/d/LzoW64XpN/aKjJHjwLbugJrft7neGBK
54fCwGSUtFN7ll3OhAQar5CFV4gsvLpD4xuy8A3Z+NbhXPP6w5I61Gmsc6nQ
LcI2H1P43sSEPpexhQExxShzQMCuvS0Jr+ZceRkaRoG08pvylsFIDH3U+X37
aje4BKFR9iROmgtWm+ltdoSM7oTr+++Fgd6jaOH5pE6J03gOsTSeAxvPTWj8
h+s0/gMb/5GuF5hA1wtk14v99/sC5sukIaPx6ofd92UBXPamvyH80M6tynaX
ZzEaHfw4yW5tCpq+qjvVS3D+qYuPv7VgOaYfENyQHpiJ0751GG09R+pdJb9L
XH4lru7u2fzTOhPte1v7lBQoOEjXR6yh6yN2sOpjAV1PcTldT/Eoq5463izY
LrkwAp25pwy8snCHTo57dWE/KTiyJ9VFYfgEho2tiPtdHwkXcl1KXcjv+ftD
1NSVYuDwDOlvW+7mwA5Xro0/a0l+mb2btuB+Anx4sOmsEzMTtr5b8fpQI6l3
NH+ApzR/gP/wB5pvQAHNN4DNNwJofoLTaX6CbH4SzHeU38kkHVsvl6vJNWQg
/7xf3/9UUMBIytLxYhLelrdS5tjaPDQK/x6wLpPwhLouN1n+TPy2NTJmdnwm
7s1ZVM5XTMFGml+hJs2vkM2vItL+8jGIp/kYsvlYB83f4Nfiv/wN2PxN98Za
Y+tHhWDYI7xJZ2MW3Pm5p9qK6Bq+u1tFvh8uALnaddOMMBM6vd247sdSEHuw
MrqhNB8OlF1+fmZfOhyYpBy4nUF4Js0/4SLNP4HNP6/SfBUEaL4KbL5qSfNb
2Cr5l98im9+GD8xs/rAqCUev3dq+8GcO3vzMy3eN3I/Uzp4CaYzFqtyne19d
zMTTFt/OChE+duH3X76NxjTfRjbfvkHzc9Cl+Tmy+TlF83nwp/k8sPl8Fc3/
wYDm/8Dm/19ovQA7ab0AbL3A0hdwh9YXwNYXjNvatUvFnkFlotkT57BEsEuO
9h7fS+5fQVxG1fgpqNqVtz+ffQ+mizw05XOmYKT4xM4fJQzY92dlnEj6E5zs
9vEs90cKqjV7+VTCnTBfknruPjUe1z/d2NFMzv/z8V89hYO0nkK2nnrpvHL7
6uRIvH6zdrZdWyr+7F2xL5HwvevvwzX4f+yEfp1pC6f1huFhj6k9BgQHNtH6
DkJpfQdsfTeN1oOwitaDwNaDHrR+BD9aPwJbPz6m9SaI0HoT4lh6k6VPgZr5
V58CW5+epfUs8NF6Fth69iatf6Gb1r/I1r82tF6GNFovI1svN1CCU0S2JIGb
+p67p2dWYOvyoDXhRgT3VG4GVHM8Ri4hTpOE7gJcYVf7MraMgk5avyNLvyNb
v/ut8a4YCYvHbZnXH3Z3xMO9Vz8buokODc99U2LqHI0+j7OeFD9MAUXhqh2b
yHsRCqgJ3GJjAEGn+tsW6hRBIN9qt0yiU4DZu/vaxmDoqqq2uPGkHHasXCts
RPDKy26g5nTQE3QIs0/afKUU8nkiEseDKBA8xt9yWL4ApRft6Rs4EwdpFgN3
zpG6kzcoOJASXoKFfwZ891/wwQ8Pdu9hED6vZ2OWmP2zGMdUqYuxNhHYwr/G
Y3sMwb1b2YFnPxdhs8bH/Q2WUbiYX3k1XwoF4wf3eBltLsILk6dxv7eMxXyb
ui3v00i9Ezfpq3xbiIOZHveeL4xHCymvs0nZRJ9aLTkcUpqPt6o8nzqoxeCL
+btD60soWHReu3/R/jyMdt1O5b2Mwfm/hkXiSD6qBTLrQy75oL6/y2XFdamQ
yKGV7NlPgXp6jo5Yz33I8xk4Cc154Lu1ZXisjuAG5cEb6XIPbDlv/gyKLYZm
dd3cXURXhnqaTy85F4pF/HnmIZOKwPxxlRIzl+gX985nlS6Z2Ps6xn9xVCrc
0FDb4FVD/i6UHhy/UIDF+/gPbtExBC1z8UlFVSSPFN5dEpTPx54lW2p21nmj
Gcf+0cXEXjJLlhm0PQvvpOtNcY8Lwh1DuhfGSF3b5Od5Q9o0G/Ulrxjoikfi
5qyxHrcXFHALCKmFdaXjyoi9P52tozAv/tL2cqLHg4YVphddSMMzTwSbjfjI
/TBvdp0gddN9g/Gi0j8pKDxfKW3EIxaVDgxKM4jeEcZvv32aSb3nUsyLfRaJ
QRI5msNNFKxvWFYt/pDw/pEV5kVn06AmoOP8M+Jno7voT1/5ENj2uH6zU1s+
GMldCw0l9zw36fe6jzx3oPPKjyRJ9zS48jvt/TMSnzU9M34u0/bBK8mDIjJE
D066dPaqYx/hY0fGu1tLYtDXrnyIe3849F6K0fQfpGD2t9eNZqIR+HT2LvEp
Yw9gocnwljFSB/1vHFyudy8Az/fpZjuI7QZUzg+UJ/Xi+MfXDCllC5RP1jJx
GLiOazL3rSog+Cx0ZuW5xNV38PC9z0LVln7ofoW7Qp/Yvzt8aq4t0xamaY48
fiAdirlXedqmEj72JHnruHjGXdh7eE+WaWIiuuQW3u7/QoHLhXHXa2edsOpI
HreGfgpuFhfSv8SkoC/B9uY+9Sd41yNm6mWVDHw857t0BrmfZW1Zevt3Z8La
9J8uPKlhYO17Wv1WG9Ed77/wd6Yng0jLFtWu2ATIXNDqp0/u/8AhRltxcBSc
XDnKvFkaC0Vvun8FfaaA1/tt43zrCJA+v1PeRDwa2no61GaS84j1pS1ouhMH
0sY2oXWXIiCc6rtnTc5jeERYKZYzGh6cWcdpIh0EshuTh/xJ/Vomlrm8ZA8D
3LsUrA5d9ANdjqKPVQQ/lRv0a6vWMCD2+I3G8qXXYdmJiixZkhfzS05fH76Z
CYKTsSmr0xylhj64bO8k9XdxwuDkoVQ48MVEx+1HEiZbPJNvIPEWCDPennkY
AsD/c8ekkxk4/mFy52pyD9OFgr8Gc1nj7Lfe14X8C1Hqkov44qf/6Kzbfiuu
BGDtvilinh9KsHfy/Ys3CL41drqc+/guE3onX34Z0RwEhopzrShybzt4NG9X
7MiC8w+mzLp7LgK6nL7bRL8i9dQz0S7TKwfG17ne3GlN7u2kHaOa5NFouq7A
iWmF8FW+yNHgTwLYbAs0lCV5Wv2V4/C6FISlCy6fVnONAfU1XWG3syi42WTS
kNVYBDWhU+6dco0C0amVs/oILpm7VuyqyCqGt3e+nlaKioD6m/caDOIoyO1Z
e5NTqhjWpvYP90yzgrZxNWFbosfPvQre+0U0F1wn5dds2uSHnupdX14RPiam
dYLhfi0Sto0Kvrn+pARj3r3zcSU8c46I/riIiiMsGSnne9NWgj7jQsVTCH7e
9vQSBGUfcJ8O15euL8HL1WnvOOOJrg8MPBU/HAICq3eL2HfnoZe4f2zOM8Lr
Lu5tl3gYC+Vaao8fK8XC48LLc6vIezw79uKazuJo2Jtd+k5RKg0aHX4Ku5L3
GFTRysP5OQMyJn/o336QAcdmX5b9QO5t3FJLc499BlTIrau8jtlwWqjI+yap
F06O+9M2SxSD7rcftl+Gk0E36kBISiQFY2IrAupVS2C+9p/WoCYGBJz5eUbK
mwKj5a/KuPcQ3cvBIb7ncCjM+T4mcfUBOc8NMwe3lEIoknIbspFJwcKpJ/+o
plMQw1//rfBlGtxQc4u+N1aE7l9HUkIJT+afdY/xQT8Fspevi/rzqAynPDE3
sbhPcAncPDvup8EWl7uaTZcL0bffyuoN0aHmDEld6mQeKMR7vTo6IxvvtTWt
T0ggOLA/5uH0q3kQyhV7q9sxEyvvjfbXkPerf76jq0Y4CqP6I+5dmZMJrSen
ZTe/JjruZdxON4FU1Cw0yg8cygFDTs73uqXkva/10Fx3JA4zFdE60jMXFuSf
8m+tpGDGEvf9hU+jUHVgx3zRP0Ww+IHhC91kCpqer35oGKIAEcfv3tx5pBge
h46dRfK8LhmFcjbGXtCrt0f+nHYOOPfpe88l/PDfdL0rbY8se2TbWzT+9Y8x
tH9k+59EnwfU6PMg+zxInx/y6PMj+/wL6OcFDfp5kf28l+j7AU/6fpB9P+L0
fWIufZ/Avk/W/SPQ9w/s+3/jV5QkMSsJb/a5MrkMi0Ch1nVwNeGx69WKBTr1
GQgnigXxQBm8WWbdN/keBVF0PKAlHQ/AjgdW/CArfoAdP6x4Q1a8ITveWPGJ
rPhEdnwuLOp2ZMwsxvakSSNeoSm4qjhgpSeJZ5knZSezJbIx5M3FWTnTsjDr
0Hv10RzCu+h8wWQ6X5CdL8fp/MI9dH4hO7+S6HzEajofkZ2PPnT+ohidv8DO
32A639GZzndg5/vRy8mdXmGXMfxVfWHc8XJQGORukLalYKCp5NPXlGjsEUpp
zm/Oh4vj/D/++S49csZCduxpLu7PMHuuZxIAP66Wz1QnuiabxiucTeMVsvHK
jMY3bKfxDdn45u9/u2GrezHOjdu20HhONM5omn9XkPyeXLh1s90WxMpfUxq6
58ehcl3/t42Ej3Ut/MmlaJ2HAu3udet64/DUpAX2CgTnx/cITZPZmYvP6vWC
DSJikUOIUrEjzytL4zka0niObDyvp/Efp0/5i//Ixn9lul5AE10vgF0vzOPN
xxMiXKBzxqcNcL0I3sp5bJtP9AVcqNOLPBuJ2/qzW90XZ4KF/uc0ecKjnjjn
fjLeloZrG8+benSEgtPb0GkdpP4uturyXBOVifrBRs9H5rmA04gyHw+pX0p0
fcQHdH1Edn1cTNdTDKHrKbLrqfgSbm2Foigc3tHCa/HlMZbJLX9zgdTflNzS
NG/vOOz3sxqYWhyJQvnhTQ9Jfd967tLVO6pPMDek93JMSxQK9um85iD2RcUp
CatKY/GzR/Qm+SexGKnp5atB/u5Omj+gNM0fkM0fFtN8AxVovoFsvvGd5ifg
RPMTYPOT55o+Cdb9R0ApkHvTmhYGjNdI2j/tpWBw5tJ9ynt04eb+aznK5jHw
zNXrSth3wodNbWcO3XDFFTvKI74/CwPVm6GWHr8I36P5Feyi+RWw+dVJmo/B
FJqPAZuPRdH8DYRo/oZs/sZxK0n/NSMaRg9Qc2Y+v40zjeHbT/J3fz5cwtkz
NwIsVV8Zi9g/Qbkzh6Y3fiP80MzmvBNXCBjr6PT77mag9/zvT5YRnilB809k
8U9k808Jmq/iFpqvIpuvbqL5LQrR/BbZ/DZxxYbo2HMZYBc0OvJMIQKcy6cJ
fCQ8Z1a3dzteI3xp/tKiG5akzjb9Fr9L8t2P5ttgSvNtYPNtFj+HzTQ/BzY/
F6f5PGjQfB7YfH4zzf/hEs3/gc3/f9B6AWpovQBsvXCU1hcQSusLZOsLN7Db
F6eYAZ1vPzoIaaTgJaPksBbCQwZP+DLTQ31hepHm6U9bS3Cu3YeGcySvI3/I
cMyTv4hp8st36d0vQpH7/KHXSR61fVu/4Vi+Dd6+KUkpTinEvcppwork3hRp
PQVGtJ5Ctp5qXLDPdtGkfJBcJv1M2D4Ktmbxt7SVEz9UTsfxXQWwsWQazzZG
LJwbrK4fJPrxJ63vgCfrr74Dtr77TetBOEjrQWDrQQdaP8IzWj8CWz+epvUm
9NJ6E9h6M5fWpxBF61Ng61OWngUxWs8iW8/G0voXbtH6F9n6V57Wy9hK62Vk
6+ULIzcFc/cHYNaeR2FRonkotZIhurCegmEs8LYPD4IwRtHkDeey8EKLy/l7
rf/R78DS78jW71GdH7/5SMaD7eFa2c/Ti0BqLbSXk+eNc1BxE/tmhovH5n31
mpkFukVX9CLaCZ48OPfzfL0rUJk1qRt3ZUNso0HlVuIfkg/bHH4fA3vX/raT
Ck4CdV3G9TDi/9ZCL4vecQZyaBkOGq0Oh5R7z1fHENzoC+gekSb1fsrxrec7
pX1BwOD0xjQSh+tT19+LvF6GNacyYs2StXGOqSHDy4fovmZKSfB1OR7mWawc
n/MIzYwNn28k95DJUWYid68ax+9YT9K/EYqbP8x0CJcl9WiruHrEoVp03bS5
dPPeGEze/DFhxnIK4uPjG1X46/GLqnaRsEU6Sq8Kbj1GMaHHY6dnzqIGtPI+
ckhAJRuPzxKPdmxkgqp2e7Dp23oUt3qsqrksD88XKF1+UMeEm7z1Ol/ee8DK
ozYbNs8KBB/PK1Qh0XGr1z+YUnLfAt8cXbNRbF8UiOmq1QgQ/WiqdPl8z50E
yG1y4jovhVD2/ZDk8kyCY3mKicr363GD0A2GkWwBzpb8ePlWDRMOla+Nsb/n
h8+fqrzgUH8MRronJBVHiL6gfL++olKxK2Gp148QKzSW+2CfSuL/ubdHNLpV
4X3R3QbespkY3ffy8AVyD1+/zPl05U0Fns0qvPNHKwONKi4WHz9GAae+qJLP
cDp2R51bVuIXhnnPZu1fTHBjrRvDm5mYjQ89cODX4giM2tYic4e8F6OjNnuD
GktRoeiRwU6hNHyyK+rGmB2pF1sqZI9pFWPQnO6+aXNTcN94vRBvBOGx0o4R
r9SK8X217OMQ0wTUrn3UUB1NgfNMmcGda0ux/+yTrkCfRLRdPNOvhfAiAfda
CztIx2ld61wDc2zRZqHBn9EPFNy72hef9CIRF2kF7DseYgmDY1dMB4kOVfSQ
tpc8UI48LyxjwhJScezVTuP5piQfg9K/996qwH23eoZrSZ2X05cTvaBK6tdD
hg3edMDuqy/fF3lHwqb7ZjfXk/dCnQ2SFZttD7ecdIcM/JLg64OK++8GKYie
HfZ2lUo53uOVXDO2OhOPl0Zra+kR3D7g279gSTlmjc6rUebMxtdW2cuVdSkQ
3ZF07SvJ/xn21pPe1GXA50lHN4WROtja35vwoD8cLh++tGZZMwN2Silv8STx
L5a7PqJLrRRXejL/aC9Pww1BZWc/PqTAcl/3Xb7fsRChH1A5+CYVtBcdGjPr
ouDGz6eNNbt8sIbb/NLP2HsYJ+HSkUzqlyurX/9sQr8+49OqcFdDLzC+PS3K
Xi8FUsxPurqTut9rbLGiwb0Q43f1j/UUJuBXaXmTswT3Rs/sZEbvicWj2Q+7
Tp4IwSUZR31effnvPEDNBP8hj7YaHFyRilKmTbMYgWno8cVnqd1LCnxZ9g0T
7CvNQx4Jns7EGwfmmj3/5ovvHqlaGRA8kbujwX+Bl/DXI62flX1dcTIUZB8i
fEb6mcBFkfkMvK0ezJkQkIG7Dmr57q0juMqaQ/CdMIcw3DDz3dfoLNzcrHgb
czMxSUHwnTnRj/n/Yh+THr5RXiYePaeOBdrY2mLC/Jqy+YT/nHug/VpU2g27
Ak6vkNAPBIWRSKXlf0g880b58N3JRMvuZS8VZmUiX15acG4xBSr/Mv8Qo2y4
ynVKPuY4bmMeZWZi3KVR/QSiE9X+xd6stirMYtQZjs6Jnv3jeRwkV7ipMYdJ
fgmd2LJxazRMbRcdvOyUBupaOu3hJE8ld4Ze4m7JQoa+BpenXhq+5RkvKS4j
da2WnruYevV/5y7i7U7VL5JLx9un4sE6PxV/V9WZBJC6zMGa05gywV75pmnt
OoFY0J83O6X2eRrkOSqX3n9LwVve3UsLH6aC8O7z111XZcMx1+95IkTHnbrW
tXrScCrOm503uLMnBZfuHRrvI3pNizXv8WzCvMd4pbGz/9RwdHww9wLjcxhu
NTYVLiT3f5plXzTBfqWkpuGqy0mwTHuhQKpLNqSK39ZIrKagYIun0ePmOIgN
bRz+vS4DtldMnRLSQvjPlijR+nnu6Bkbqeow8xEKPhxd20byJZc1ZzKHNWfC
7ottzvsqT5nHwWydLTKfN6XB+uUzO76T51W6e1Hly8UkNF70bMHQSQbyF10/
dIHwqF2eOUdmHXuEF62VPF0l7mCPmM5hj7F/5nDouZqnrLmae6w+l8/vY/pr
akOg95rS7+icEHhjV50p/YPEJ+s8Syac503Kda9pQnG4SXBR1AddBtZ+Li1b
S/ieZnBSztXJCRgu8Vn3pG46cij2V6SRe17S5m+q5R0OqV81eLvjwkCltGyS
K7nPfaz5mWrW/Ay7P+h5/EVW3d1E6Lx9scNZNBaOq/BYW5G828+yr5lgP0Ww
eNbkd7443yHr5SHdZOwx9fugw6SgVGbF7tidnlhxfqFM7qQk1HmYfsGS4GdS
11Nti8AUELjv8dwwJx72mZ3clkZwIJE1t+M8YW7H0m9kqlhbHsz/nDDrXFgW
8H2fem0t0e/J/zLnYzVoJSJtFgNZqWeXvG02wGU76kofE97ev3GOvaZhCkgk
xpkPGNjDzMkaJ2LIOVeqaL75lJsLUTF9gl+aMoDrvL2XNNGhtqx5oYsT5oUE
jsVu8BPNh5RGL7/wHZkwu6e2TiyZ1COWvdEEewW+1rPbCE/eNmTuMudJKOwY
uDZrYdU/fUlVceb5p7BVNI4ZmM8AM5+apksWFBheOvz+OSMHRtPyT7j4ZIB4
74C9ItH7L1hzSk8mzCld94t4HyKZCcN7+58kxjNga+aUTUDiv4I1v/RpwvzS
l0H1cAn7cpDS1RAod0uDH4s1pjfrU9DcmDTnyeYqGHU5dFw/MxtWcfulPNlG
wYo/3MtOZjGg3HFD2SylNHgV3u6RRfDhKcv/wAT/+4TjVutPTgEXzidFBaYJ
ME/doVKJ1LUylv2bCfbJmwV5wkPqIaR8Lb9ZUz5cWRT5fRPhOdPhY/wRq2hQ
3qpqPVsmAVbIxG/r7SP1gjV/1Tlh/mqxTKXeQa4oVHuzY6NhRBKOVj28kkX0
45BqbsSCb/FosiFjmdbnVBQ+zDHnH5x8f85E5+ycBlKPa//81M+A+KffV+58
w4QfKwX54qIe4Nl9BWHhewIxUrbtpxnB+RuKoR9D9t4FAWt1Wy5DF3xTJ7np
7T95PeMoY/f5BsifN5tf6GQmXBEuBDnCA/0sdHf/ftUAL3l3ne8MygLJdzq9
Y7lMkPiYZnG9PRzEd6YtaOLVRrUSJennRLdSh/YZykIGmE4VXey5KAy+2e04
GkDq4BBjQGrQrw5q35Y21z9Mg7583Nr9iwlVpVHVJ2fWwWPtNXmbi1LhdcLe
Fa3TKMjRbQ6aKVYEQzbSF4ZbcuBq/89+aS+if81Lsv3LS2FkoW1LnWkmVDUW
L86zIfromUtrWdUzuGSZp3Oo9QZ0/cpTMVakILjRzedKZzF0RR+tfT73AQY9
XJW0iMT5yZoz6z7GVIDqs1SDId1cOCi+39ViHzln1R/7Tv0a6FVvDJ9/tQjk
neVcFjKZcHKcN10gqgh6bihNiV7nilM1+5tsSTwbdYo7OZcXgMQmwy07ywNw
d+P8K15PKfjwjIezJqgBUkr4H182LIdDzNSSxeeY4CUksGnY4jkkndSONNUt
gATRUo5GdyZMPWxw5FjBE8j+nrojQiALr3231PMguoO7seVi4UtzOLVQTafD
MR1/R1muvE14o02TUd+g2wuYXNoWX8RZBGbXr5zbIcWEAJ+PH5bVO6DDSOOB
yCfpGBhffuE5ic8NG4UO/xgPhJVf7CV55/tBvPMR8QRSBw1Y81fbJsxfKdF6
B/VovYNsvTPTx1GyKfcFuN7WLTDnz4PqR4GTvOSZYFso5h08Gg7tVtuqB7uj
wOZZr4Yr4Vd3WHNc6hPmuISuhMy76pQAQSIfd31JTwQ3l+xqU/JcGqz5rsQJ
813rz1yfb9pcCx8dz++4Nh4Cnas2SCUuIfytu2iGb1MNbOrVkJC3DYXyCOH9
XmsIPixqm7+gJweOzUoU7k9JA+p0y1z3Aoo9fwVJE/z/mj7vdveqp3D3R0en
rlY5tFumxVXPIfX6X+bN9KbxbujMewbzL8QsyxLwg7plkasnHyQ6LjlxVPNe
JVjUVc4cHvTAjwquK4cukPfFv84x8Xk5ODyBMyXcVUTP88sOtjHBiTW3pjxh
bk2nQqAn/uVT+LTv7utmqgJOrThvt/3bf+bNwJQ1z1bHmjezFrIUbP2eDfr7
FzmF9OTg7lIznfQkCsQvdBw4VxALJsHvdoVS+aiuUbFrAeF1u+Z4bjLeXg3z
8nV4r+g9hSlbFIaiSL4XsfxfmuDfMGD0XZPYczD2DdEP2VsHdUsMNh9/9xlK
WfZXJ9gvS3xtcOJTMHiF+/u7Li5CueHy/C15pD4KD1wUjQnE2ELrs33mT5HT
IWbOrAcUMH0vvlprWQ9uw5s+vD1YD69OL/Hpn8IE3X+Z0zu4a6r/8NLnYHrg
uaAcwYM/yc4RXaZMOMeynzzBfrsvd431+Rj0UV0oRnmV4pqlKxNWE93tsE2o
kQpMwQdJe4MepZfgNW/OxEDye+WsDamNY/VQ9oVjXM4lC1RmqprOaWHCpL99
g8Id9P+jdrD7CP3FQes+NMdjrEDGaT5uRCNB++Vns4jOMmyPixnLgPkJEl8+
6hWBVE1r1lTCf8JofY0XaH2N3ix9rcrKx3UT8tFoGuNc38o6aF2j9aBwVjCo
9Nqe5uQjepw1l/jzEz2XOJ31vDNEtq3SmpILC+b5+q5f/RRchC3LTp0j8Wwn
WbpdrpDwJS7JJ03lsEp+S7Da7n/yXU9lW1kBuN7UFnNrT0cdBr/gb8JPtrD8
j37637lHc0W+ZpeuLPCPP2+9YlEavrAaUdMhuJfMmoc0ZM1D1rPioT2B2e9Z
Fg8Jg0zXgkflYOBwg1PfjIIB8QvL88ZTIFr/2/4nI1UgzF9sy72HAu/A/LJt
ZekQpeys357CwGFvkRnz6v/r32CCf067tN+pM1LwZ9X23Qf7K9HwQGtQC9HF
2Sx7Vr4gOz7vjJevFtNKB5E/r0ayk2tg5tQtTlMWkvtUtr3XcoYBo36XDOZ6
VEPjVvmAWWIUdLVfeNk8hYGW8b9zhGc8wzPyeZuGgeQ1a86TNXeKCqz8Dc8u
PPzicCJ2/n729fvRCjybLdoua/gffMNc1vwnG0806efFWvp5gf282+h7xkL6
nqGJdc+KgTY5B7Uy8bJE6uCc+CpMDpu1PmY78cPynzfBvzb93rGefu/Ifu8n
WfY5E+wF6XjATDoegB0P++g4xPrVf+MQVVlxuICON1xGxxs6s+LNiTXXenHC
XCsrL3ABnRfIzosHLPsLE+zj6XzEJDofUZWVjy+M6+Y94E7Dl5ni3BwX8nA0
KCl+VS7Roay5WZkJc7OedL6DE53vwM73OtoPVNF+YIzlZyeNM2hF4wyOsXBG
h8YT8KPxBNh4krDITzN3rjl8DJv32VWrFOrcpUKzQiloofENWfiGLSx8O0vj
KhrSuIr1LFzl09C3SI4Jw5Z8o9xb37LhEMddubsvyHMdf3g7/H0Gnu534olz
y4GWawm8H7MpeG1wxXWLQi1ahcQyc2Iq0CQvwq/dmwnRN7j4xtTL8eMFbfG+
jqfYkhrz6z0XeV+LTtwRfp2GJg0fYsq3FwJ/j2rfW3LPs62fcCUWl+OcBwc2
znjpDYf6zl0IIPpo9rnST3WqFcg7tf6D6q9y9DDkT7SjmNBnYuEuGPEUB94/
6TM/WIaW20usRoUomMdt8nDF7Wq0zNtxaOYmL5SMWvVdgOSLHV2vcSpdr7GS
Va85Fv+t12hB12tk1+v9NE/AlzRPQDZPWEHzASyk+QB2sfgAi5+gJ81PkM1P
fGh+gpOs//ITZPOTVTQvQkGaFyGbF92m+RVOofkVsvnVCM3D4SzNw4HNw0tZ
85/FrPlPti72H3V1/TF6CbdpLZCJNcgAoVWJsXJER2xnzc1ydP/v3CxXyd86
Agl0HQF2HVneKJTovbARD05W1h34jJgxbcWVqyQOIfmO0+9zwfg7KVNo+VgW
yPEWyBxtoUCO7f/D//o3fzk6LV4vC0cHI0wGjj+AVlUH62VvCZ6w7V/+r312
eKt+xPbn+EzT2cIzoQK37OTyfCvHhCbFtqc7uerRv8t5O69cKS7i+n4jIZ4J
iwVrIEwvD6tOx8349MIYZygw0z83EF3JmgfWZc0DX2bNA3PMufKOa2oFjkcY
eF9P2oOZCw+kWllR8PBf7CcfTe5X7qrEXcupI0WfClBOPvaHC8FnHyUvz+vS
ZXg5VykizjoP83d9UNlL8HZGGMXhtKYSe6t92nfuu4n9M1SUPYwpKGfNIUdM
mEMWNx5enFVfiYyq15vryq3xtW5N/yXyezprPnkxaz7ZgTWf7Gxt85VLJx/r
HO36xd6notWy8H3niS5wkxi6ZumXgoWtPKl3SlxRMPNtyqvPFMR1bLq8rrEe
j47MsJx9MxW1ZMtvzetnQjbL/8oJ888aqRaFFu8aMKfFhuM3ZxaeX6iCGnlM
yP2XeelTPRwj0tLheFmuIKf18VU8zM1vKkLi2cSmdrKaig2OTj30TCbwDlzK
G9KwGyc6i9Z9WEDrPrzM0n3HWHPX9RPmrj/RehOHaL2JbL1ZyZrHFmHNY7P3
mzxoHQrLaB0KbB26kNa5IE/rXGDr3FxaR2MiraPxMktHV7D8S0zwv5/+TgVb
6e9UwP5OtdZn1rrok8nYUDaclpgYh1TWcbQkuFFE6yPwp/URsPVRAGu+ffGE
+fbvzBNRQ0urcWuOVF61Vz5uONJZXzePgrIJ52F/1zru/ePMzlXpuNB/aIGk
Rgoe7d819dVL4n9PQsLY8mwU0Fb3v2SQjsdNvCt0CQ9/IBL+1vdHBX6Osbqz
JiELY6Uut+sqkXOy5ti3TZhjXzpnUtCtGQUIzQo1HAKR6Fd3T2hpGQURLHvd
CfaGgsZK129n46ueoJi9xtmoMCmv9G06watQuxlVujmYy3dP/ihPBqrbnF9T
Tvi54gOvk+HRuVgqm+NgUBCKfCKNux3qKJA/QM/P35swP095Xl1uFxmChyqX
+kz38wEOH/VrCb8oaNhL2wdMsP9s4PToR2wezmkuSjgZn4nURemZMUSPb582
+WTw73yU/cHr+CQyE3+vbHrJEU9wYxeYQLUXun5bsbUuOAwmJ9762k38hLHm
9ndPmNvfUP4jgDfJA+c3907+rRYKp8+nfhj89U9fm57nb2PN829jzfOfquxY
va88Ba0F4iVvO8XhioKyO1oEn5H+fojd9PdDZH8/TPiVXDJ+whduHpGqj9aO
hZa9ms31wwSfWf47Jvj/2LN/H19pHOzc2pnxuSwNNquf4Dv85r/7Be8n2KvS
3zmxjP7OiezvnJX091X8QX9fRfb31S76OypsoL+jAvs7KntPoXzCnoIy/b0X
dOnvvbCc9b3X+1/s3aX+fmcGGfo7MwixvjN70v0XtKT7L8juv0zWPLH+tHY8
2kZN1Uhano5+U7dGfW4lcSL39zsYbqG/gyH7O9gcCe4NvL8iQOPSw+qp98Lg
5Akx81Jyn2I5TKmZ0Sn46/rVlWICmVjcEdo6TPiwMONoZWNPCi5evub06ups
TB8+0mZXQQGYfVoSeiMdXArefAmzZIDA+YKmf+ZzGqQXvN1onwZOC0p5IlYy
wCHvvZkN4VFfvRgqG1Wjcb/Ar64xhww8Ydv88zI5J491tlDc7RjkE3PN/7M/
DT/2LT2uSur7h8Efa+37M0C0zaSG83kauO2X3CNXRYHFzQQdI64cUHgz47Xl
1Szg233y4OpMCtL2hKwtmfsIb704zfdWMQ6dx3t1ZpH3yHT823+BVrr/guz+
i/pHDn/OJ9lQb3Pg7S3fDHAXmJvByCd4eEae76xIDoR7JZ9aMpQO/lqWyZXk
dxu6vwOX6P4OsPs7q+l+E9jQ/SaYwuo3cZn/+hR+NRV21j3nvzueDuUbNc4c
eE6BL93ngvV0nwvYfa4Uup8FB+l+FrD7WW/p/hoE0f01YPfXftP9NThD99eA
3V97QPf14And1wN2X28l3R8EAbo/CBtZ/cFTdB+Z6LS/fWRk95GvH8kQMMmL
wWA7s2ap/Rm4ToknfDZ5XxuXzBJrd0tEhRuvy6oIL+536BBSaCI6V1+Qjzew
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
KsRYTflsNT8Og6a5K70g9mxrPm+iNsSCPVfXGO8Yk4LjU62ELlawwf/G9wnX
/D1hmk5IzV7bfORuEw9aGcaGB1Ibo4qO2sB7bu5NIQdInnHRpDmK5ClPHKqk
1k6wwdnjBK2uTc1Hc5GstLwYNqhWb711gM8KLyT9+MLtiNgfs91zJYkDeUYN
uNzKjaC8eP3EMwE56Mm7eioficem6Wev2XNYG9azVWxrjmbhr6CsAgcynhI5
kx0yo+4Qki43YJ+RgJZPJ2mUkfWmH/5Fr+VONKyZ9yLJ81MejGvrbb4bSPLu
VT7cK01j4ZzU3VJhg3xgycwVE/AmcfiRLNbBx46gq13wNDYqD2JVx146RPKO
dVX7qnxcIvBp59TcrrXZEGSl07yN5JsnaX2TT7S+yVVa3+Q6rReTy9CLmZ+2
TCWGpwS5M/bssch1h/rrSp+7DNjw5WSduv6ESlx8tcnF6aQzpj+/t2d0DsnH
rXt+fdCowe7DQpM+/IjFOnzweW/O/3RkJjB0ZHj0R8qmnK/Fwce/b6Ym5qJG
4jQb16M9kO+vMvO1YzVOSwplp33KxcFQN/Mdvj3wqN93paROGQ7//jhbcW42
Pj9dwto2laxPWl9mDkNfxn5j4uKNK9LwR5fu9dQkf2z0vHGej6y3ZOMj98te
++AtnweL/PY6QVSWRdH6EZIvzL4jWFnjBa9zj7WpEP99vbOv+CeJ0+ZJ6Ju8
Ok++S89qpCw1F8v3bXvw07IHZg7A+kLJh5DYeiZo9rEUqPy17lAH8Q+zTfKD
D4iEoWKq9I39DiEgtHB1wnFyLngqmIl2NT3H90LrBRYNpOHo5Ncf9STJfD2N
Ukk5koW/59RUnio6gDLeOxKdK/43X0OM+aowSHHPUy/FW7eiR60zQrDInHvd
+d3ED9B8Mn40n4wifU8vbemLLFv+CjR84WXZ28xCjYFlT1UF2FC34GfDe/FK
dHRNONR5IA1rsywiub72wOCn+qj+D3k4uNkquo7kK33Oqb0vPdgw5QX4L7/H
wov604pyMq0xYbfXj9PkvOih9W7W0Xo372n+6gV7Q+t924oxfqGX08K5SXgi
6NsKy4NsGMe6VjZbvAA/+6+a3CoXj08ttox2kvz3abTHzTKx+9B5Kv71ZbMY
WNqbdLqCnGuuN3eoOyzIQm9vgZLWk8EIfL4pb4rZYE3r40Qw9HE6vXwHboy/
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
+d/ISYss77RpQOdynnMzRjPAefqXcUfIfky6sGGjtVQGignd3mzFH4hnaj0m
/MFvlWn9aBuGfjRHb3oJo8/dldaPXsHQj86c+a33x8RovNtz4NkiWRZYqPSE
zSDrR0E7NlQpOAXHf1HdlnAlHPkOahjfJe/fovu1a5tZIu4ePqt+3FgH0n/f
XarQ9T9daTFGnfr9dbM3akuTsSg17Qm/bThe2qZS7UL82xmzCSuHQ5JxeLGi
ve3+cHzeXfzreDPxA3TfrjWjb5ejB21P60Gfovne+e0DjdXHesPgy0uaEW5J
cCN/Uc0p8r8jQQpq/P0hUGmWP29KawpkNpy5x3pBnrdS65u4IwrFmlWCxM4+
xqOKU2cZfCX7outF7NJr1rD6lNVHngssqE2q+hL4+Q8fI9XXPI3R1/yWrpt/
YNTNtSZ/7R5ICMc18hMWpvMEYJ7oD4tPf/SjaX3kVIY+MjfdH23I6I8OpvWO
vzL0jgtuC67i2+uMdcpZ5vknnsKhj9sf1Y2w4ck/6u8V/+in3m0oNeS3MADd
2fxhnc/D0ENp0+onxM5fm9Fd3sEB+wZSzSP07OFJtPXzw7/+6ApRfdZXGX3W
o8cqavz9Qv9fYWceTuW2BvDKWJzMTepkO8pODolUkqWUEOmGkhLloMw6zjWU
BtySRIZEGSrTlilj2FibttqOuimETYZODqccQ7k4pHtXfeu7PXc9z37uvx7P
3utZ37vW976v9+cHF1SFnNrJKoR5rGRtS7Q/JtgvPED4hTn9Mwmu+8oA7wnT
S3c6A3jc8rEoQO8XXcyb9xK8uT7mrIcIzvqy5tiLfQFXgAPfx974Zjg8YueY
+vjzN9/uRYITP/eoSoXbUQr2yRq/9BbKBv3vXb3Pou8Vxbz2jPj/8trfD0mG
qrTFAzOFyzPH1BJgRMDm4BOfUB6FvbqPCK+uBua7gwi+m/bqehNeXWND34Oz
stWgeevr83VXssCzDHXlW6heK3G3OSiXXwUGzSdt52WyQOHHqukvf8exwXy6
B8Gn2+H5hL3EfMJ+zI+nEPz4fMyJZxKcOO29nSW48qhcp0iD0d1QfOWhqCM/
lkC5sZWis+j5JmS2S8Q6XIcpXJ5LtmYZPO26c64DnTtZzJubE7z5FJ436CHm
DWjvrSzhvfXBXLkFwZXb9bn1bS8tAqpuHpIsxn0QblG/p7D/m8eWnJf4VXQZ
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
q2wOLmVWwsTOPc5iqH7/D4N0dtE=
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {0., 
       0.49488850049789845`}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25}, $CellContext`m1Sel$$ = 1, $CellContext`m2Sel$$ = 
    1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$6250, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}}, $CellContext`moSel$$ = 
    2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10}, "numberOfMasses" -> 1, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}}, 
     "mPosFirstCell" -> {{0.9, 0.7}}, 
     "pointsDataTable" -> {{{-1.2000000000000002`, -2.7}, {
      0.7, -1.9000000000000001`}, {2.6, -1.1}, {-1.1, -1.4000000000000001`}, {
      0.8, -0.6000000000000001}, {2.6999999999999997`, 
      0.19999999999999996`}, {-0.9999999999999999, -0.10000000000000009`}, {
      0.9, 0.7}, {2.8, 1.5}, {-0.8999999999999998, 1.2}, {1., 2.}, {2.9, 
      2.8}, {-0.7999999999999999, 2.5}, {1.1, 3.3}}}, "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {
    10}, $CellContext`rawNumberOfMasses$$ = 1, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 3, $CellContext`tauSliderValue$$ = 
    1, $CellContext`tick$$ = True, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 
    0.8}, {0.9, 0.7}}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       TabView[{"dynamics" -> Column[{
            Dynamic[
             Row[{
               OverVector["q"], " = ", 
               
               Module[{$CellContext`qm$}, $CellContext`qm$ = 
                 ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                Slider2D[
                  
                  Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                  ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
               " 2 \[Pi] ", 
               Dynamic[
                NumberForm[
                 MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}]], 
            Row[{
              Text["time, normalized to one period, t/T = "], 
              Dynamic[
               
               N[($CellContext`tauSliderValue$$ - 
                 1)/$CellContext`dynMeshSize$$]]}], 
            Row[{
              Dynamic[
               Manipulator[
                
                Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {
                1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                ContinuousAction -> True, Appearance -> "Open", 
                AppearanceElements -> {
                 "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                  "FasterSlowerButtons", "DirectionButton"}]]}], 
            Row[{
              Text["oscillation scale factor:"]}], 
            Row[{" " Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], 
              Dynamic[
               NumberForm[$CellContext`scale$$, {3, 2}]]}], 
            Row[{
              Text["Angular frequency \[Omega](q), selection:"], 
              Dynamic[
               SetterBar[
                
                Dynamic[$CellContext`omegaIndex$$, ($CellContext`omegaIndex$$ = \
#; $CellContext`bRefreshDynPlot$$ = True; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
         "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
         Column[{
            Row[{
              Text["number of mesh intervals "], 
              Manipulator[
               
               Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                   EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {2,
                30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[$CellContext`freqMeshSize$$]}], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}], "parameters" -> Grid[{{
             Row[{
               Text["mass: "], 
               Dynamic[
                If[$CellContext`rawNumberOfMasses$$ > 1, 
                 SetterBar[
                  
                  Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   Range[$CellContext`rawNumberOfMasses$$]]], 
                 $CellContext`massLabel[1]]]}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                 Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                  ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {0.25, 
                 Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
             Text["coupling to neighbouring: "], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 1, 
               SetterBar[
                
                Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 Range[$CellContext`rawNumberOfMasses$$]]], 
               $CellContext`massLabel[1]]]}, {
             Row[{
               Text["horizontal: "], 
               Style[
                Subscript[
                 Style["k", Italic], 1], FontColor -> RGBColor[
                  Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
               OverVector["a"], " "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
             Row[{
               Text["vertical: "], 
               Style[
                Subscript[
                 Style["k", Italic], 2], FontColor -> RGBColor[0, 
                  Rational[2, 3], 0]], " || ", 
               OverVector["b"], " "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
             Row[{
               Text["diagonal: "], 
               Style[
                Subscript[
                 Style["k", Italic], 3], FontColor -> 
                RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
               " || (", 
               OverVector["b"], " + ", 
               OverVector["a"], ") "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
             Row[{
               Text["diagonal: "], 
               Style[
                Subscript[
                 Style["k", Italic], 4], FontColor -> RGBColor[0, 
                  Rational[2, 3], 
                  Rational[2, 3]]], " || (", 
               OverVector["b"], " - ", 
               OverVector["a"], ") "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k4$$, {3, 2}]]}]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Row[{
                 Text["coupling from "], 
                 Dynamic[
                  $CellContext`massLabel[$CellContext`m1Sel$$]], 
                 Text[" to: "]}]]], 
             Dynamic[
              Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]], 
               Blank[], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  DeleteCases[
                   
                   Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Row[{
                 $CellContext`kLable[5], ": "}]]], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Row[{
                 Dynamic[
                  Manipulator[
                   
                   Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}]], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k5$$, {3, 2}]]}]]]}}]}, 
        Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], ImageSize -> {250, 350}]],
       Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 12}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 1}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        12, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10}, $CellContext`rawNumberOfMasses$$ = 
        1, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
        1, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         Switch[$CellContext`tabNumber$$, $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], $CellContext`freqTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
            Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
          Blank[], 
          LocatorPane[
           Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                 Dimensions[#]] < 3, 
               
               Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[$CellContext`rawArrayOfMasses$$]]; 
              If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                  $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                
                While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[$CellContext`kArray$$, All, 1], All, 1]]; 
              If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                
                While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 1], 
               Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                 Part[$CellContext`u$$, 2], 
                 
                 Part[$CellContext`u$$, 
                  2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 2], 
               Part[$CellContext`u$$, 2]]; {
               Part[$CellContext`u$$, 1], 
               
               Part[$CellContext`u$$, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
             If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
             If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
             If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
             If[$CellContext`omegaIndex$$ > 
               2 $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
             ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
              2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
             True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
           $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
           LocatorAutoCreate -> True, ContinuousAction -> False]]]), 
      "Specifications" :> {
        TabView[{"dynamics" -> Column[{
             Dynamic[
              Row[{
                OverVector["q"], " = ", 
                
                Module[{$CellContext`qm$}, $CellContext`qm$ = 
                  ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                 Slider2D[
                   
                   Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False,
                    ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
                " 2 \[Pi] ", 
                Dynamic[
                 NumberForm[
                  MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}]], 
             Row[{
               Text["time, normalized to one period, t/T = "], 
               Dynamic[
                
                N[($CellContext`tauSliderValue$$ - 
                  1)/$CellContext`dynMeshSize$$]]}], 
             Row[{
               Dynamic[
                Manipulator[
                 
                 Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {
                 1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                 ContinuousAction -> True, Appearance -> "Open", 
                 AppearanceElements -> {
                  "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                   "FasterSlowerButtons", "DirectionButton"}]]}], 
             Row[{
               Text["oscillation scale factor:"]}], 
             Row[{" " Manipulator[
                 
                 Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], 
               Dynamic[
                NumberForm[$CellContext`scale$$, {3, 2}]]}], 
             Row[{
               Text["Angular frequency \[Omega](q), selection:"], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
          "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
          Column[{
             Row[{
               Text["number of mesh intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`freqMeshSize$$]}], 
             LocatorPane[
              Dynamic[$CellContext`qPlaneLoc$$], 
              Dynamic[
               (Graphics[{
                 Lighter[Gray], 
                 Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                 Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
              ContinuousAction -> False]}], "parameters" -> Grid[{{
              Row[{
                Text["mass: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                  Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                   ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {0.25, 
                  Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
              Text["coupling to neighbouring: "], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]]}, {
              Row[{
                Text["horizontal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 1], FontColor -> RGBColor[
                   Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                OverVector["a"], " "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
              Row[{
                Text["vertical: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 2], FontColor -> RGBColor[0, 
                   Rational[2, 3], 0]], " || ", 
                OverVector["b"], " "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 3], FontColor -> 
                 RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                " || (", 
                OverVector["b"], " + ", 
                OverVector["a"], ") "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 4], FontColor -> RGBColor[0, 
                   Rational[2, 3], 
                   Rational[2, 3]]], " || (", 
                OverVector["b"], " - ", 
                OverVector["a"], ") "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k4$$, {3, 2}]]}]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Row[{
                  Text["coupling from "], 
                  Dynamic[
                   $CellContext`massLabel[$CellContext`m1Sel$$]], 
                  Text[" to: "]}]]], 
              Dynamic[
               Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
                Dynamic[
                 $CellContext`massLabel[
                  First[
                   Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 
                Blank[], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   DeleteCases[
                    
                    Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Row[{
                  $CellContext`kLable[5], ": "}]]], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Row[{
                  Dynamic[
                   Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k5$$, {3, 2}]]}]]]}}]}, 
         Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
         ImageSize -> {250, 350}], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 12}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10}}, 0, ControlType -> 
         None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{915., {292., 299.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, $CellContext`res,
           $CellContext`epsilon, $CellContext`m, $CellContext`mScalarArray, \
$CellContext`numberOfMasses}, $CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax, 1]/2, Part[$CellContext`qMax, 1]/2,
                Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -
               Part[$CellContext`qMax, 2]/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {380, 
        380}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, $CellContext`k] \
$CellContext`glConstMMax^(-1)/350]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
$CellContext`glConstMMax^(-1)/500]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 0.25, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.605485449360225*^9},
 CellID->71748879]
}, Open  ]],

Cell[BoxData["\[AliasDelimiter]"], "Input",
 CellChangeTimes->{3.6013905751210766`*^9},
 CellID->73064412]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell["\<\
A lattice of atoms can be modelled as harmonic oscillators, with forces \
proportional to the displacements of the atoms from equilibrium positions. \
The simplest such model introduces coupling for only the nearest neighbor \
atoms. In this demonstration, a lattice cell containing 1-5 atoms is \
modelled, with nearest neighbor harmonic coupling to the mass(es) in each \
nearby cell. Normal mode solutions to these equations of motion are plotted. \
Controls are provided to alter the coupling \"spring constants\" and other \
free parameters, as well as controls to select from the reciprocal space \
vectors, and angular frequencies associated with the normal mode solutions. A \
time control is also provided to display changes of the lattice through one \
period of the lattice vibration.  A plot of the dispersion relation, showing \
the angular velocities associated with each reciprocal vector is also \
provided.\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.6008873855675645`*^9, {3.601208787872481*^9, 3.601208804510481*^9}, {
   3.601209090380548*^9, 3.601209091209631*^9}, {3.6013823516277194`*^9, 
   3.601382454828622*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 4, {0, 0}, 0.25, 0.32486899999999996`, {0.9, 0.7}, {
        0.3380000000000001, 0.7949999999999999}, {{
        0.9722195715811603, -0.1643431660146089}, {-0.1643431660146089, 
        0.02778042841883958}}}, {
       1, 3, {0, 0}, 0.25, 0.5349410000000001, {0.9, 0.7}, {0.746, 1.415}, {{
        0.044333861117394256`, -0.20583578375933048`}, {-0.20583578375933048`,
         0.9556661388826058}}}, {
       1, 2, {0, 0}, 0.25, 0.8055760000000005, {0.9, 0.7}, {
        1.4740000000000002`, 1.3900000000000001`}, {{0.40899430966165823`, 
        0.4916482119626205}, {0.4916482119626205, 0.5910056903383416}}}}, {{
       2, 3, {0, 0}, 0.9800000000000001, 0.5306090000000003, {
        1.4740000000000002`, 1.3900000000000001`}, {0.746, 1.415}, {{
        0.9988221081813539, -0.03430020975897494}, {-0.03430020975897494, 
        0.0011778918186461126`}}}, {
       2, 1, {0, 0}, 0.25, 0.8055760000000005, {0.9, 0.7}, {
        1.4740000000000002`, 1.3900000000000001`}, {{0.40899430966165823`, 
        0.4916482119626205}, {0.4916482119626205, 0.5910056903383416}}}, {
       2, 4, {0, 0}, 0.25, 1.6445210000000006`, {1.4740000000000002`, 
        1.3900000000000001`}, {0.3380000000000001, 0.7949999999999999}, {{
        0.7847245489720107, 0.41101329809713594`}, {0.41101329809713594`, 
        0.2152754510279894}}}}, {{
       3, 2, {0, 0}, 0.9800000000000001, 0.5306090000000003, {
        1.4740000000000002`, 1.3900000000000001`}, {0.746, 1.415}, {{
        0.9988221081813539, -0.03430020975897494}, {-0.03430020975897494, 
        0.0011778918186461126`}}}, {
       3, 1, {0, 0}, 0.25, 0.5349410000000001, {0.9, 0.7}, {0.746, 1.415}, {{
        0.044333861117394256`, -0.20583578375933048`}, {-0.20583578375933048`,
         0.9556661388826058}}}, {
       3, 4, {0, 0}, 0.25, 0.550864, {0.746, 1.415}, {0.3380000000000001, 
        0.7949999999999999}, {{0.3021871097040285, 0.4592059020012199}, {
        0.4592059020012199, 0.6978128902959717}}}}, {{
       4, 1, {0, 0}, 0.25, 0.32486899999999996`, {0.9, 0.7}, {
        0.3380000000000001, 0.7949999999999999}, {{
        0.9722195715811603, -0.1643431660146089}, {-0.1643431660146089, 
        0.02778042841883958}}}, {
       4, 3, {0, 0}, 0.25, 0.550864, {0.746, 1.415}, {0.3380000000000001, 
        0.7949999999999999}, {{0.3021871097040285, 0.4592059020012199}, {
        0.4592059020012199, 0.6978128902959717}}}, {
       4, 2, {0, 0}, 0.25, 1.6445210000000006`, {1.4740000000000002`, 
        1.3900000000000001`}, {0.3380000000000001, 0.7949999999999999}, {{
        0.7847245489720107, 0.41101329809713594`}, {0.41101329809713594`, 
        0.2152754510279894}}}}}, {{{
       1, 3, {-1, 0}, 0.25, 0.40674099999999996`, {0.9, 0.7}, {0.646, 
        0.11499999999999999`}, {{0.15861690854868332`, 
        0.36531847047629823`}, {0.36531847047629823`, 0.8413830914513166}}}, {
       1, 2, {-1, 0}, 0.25, 0.596776, {0.9, 0.7}, {1.374, 
        0.09000000000000008}, {{
        0.37648296848398743`, -0.4845033982599837}, {-0.4845033982599837, 
        0.6235170315160126}}}, {
       1, 4, {-1, 1}, 0.25, 1.696669, {0.9, 0.7}, {2.138, 
        0.29499999999999993`}, {{
        0.9033252802992215, -0.295514328369293}, {-0.295514328369293, 
        0.09667471970077843}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 2, {0, -1}, 0.25, 1.770375999999999, {0.9, 
        0.7}, {-0.4259999999999997, 0.5900000000000001}, {{0.9931652937003213,
         0.08238927775794512}, {0.08238927775794512, 0.0068347062996787}}}, {
       1, 4, {-1, 0}, 0.25, 1.890269, {0.9, 0.7}, {
        0.23800000000000007`, -0.5050000000000001}, {{0.23184213463798006`, 
        0.4220087193939064}, {0.4220087193939064, 0.76815786536202}}}, {
       1, 4, {1, 0}, 0.25, 2.1594689999999996`, {0.9, 0.7}, {
        0.43800000000000006`, 2.0949999999999998`}, {{
        0.09884096507057985, -0.2984483685572703}, {-0.2984483685572703, 
        0.9011590349294201}}}, {
       1, 4, {0, 1}, 0.25, 2.591269, {0.9, 0.7}, {2.238, 1.595}, {{
        0.6908753973439269, 0.462132646205392}, {0.462132646205392, 
        0.3091246026560731}}}, {
       1, 3, {-1, 1}, 0.25, 2.755541, {0.9, 0.7}, {2.546, 0.915}, {{
        0.9832247097756847, 0.12842850097313016`}, {0.12842850097313016`, 
        0.01677529022431531}}}, {
       1, 2, {1, -1}, 0.25, 2.9191759999999993`, {0.9, 
        0.7}, {-0.3259999999999996, 1.8900000000000001`}, {{
        0.5148973545959542, -0.49977801955072254`}, {-0.49977801955072254`, 
        0.48510264540404574`}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 2, {-1, -1}, 0.25, 4.021576, {0.9, 
        0.7}, {-0.5259999999999998, -0.71}, {{0.5056415693747922, 
        0.4999681716819475}, {0.4999681716819475, 0.4943584306252076}}}, {
       1, 3, {1, 0}, 0.25, 4.063140999999999, {0.9, 0.7}, {0.846, 2.715}, {{
        0.0007176713778822852, -0.026779774563570426`}, \
{-0.026779774563570426`, 0.9992823286221177}}}, {
       1, 3, {0, -1}, 0.25, 4.226140999999999, {0.9, 0.7}, {-1.154, 0.615}, {{
        0.9982904025208814, 0.041311920260114356`}, {0.041311920260114356`, 
        0.0017095974791186558`}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 2, {1, 0}, 0.25, 4.4143760000000025`, {0.9, 0.7}, {
        1.5740000000000003`, 2.6900000000000004`}, {{0.10290831592052876`, 
        0.30383909299978074`}, {0.30383909299978074`, 0.8970916840794712}}}, {
       1, 3, {1, -1}, 0.25, 5.294340999999999, {0.9, 
        0.7}, {-1.0539999999999998`, 1.915}, {{
        0.7211692635589585, -0.4484240814862511}, {-0.4484240814862511, 
        0.27883073644104156`}}}, {
       1, 3, {0, 1}, 0.25, 5.343741, {0.9, 0.7}, {2.646, 2.215}, {{
        0.5704834871300836, 0.49500714948572544`}, {0.49500714948572544`, 
        0.4295165128699164}}}, {
       1, 2, {-1, 1}, 0.25, 5.671976000000001, {0.9, 0.7}, {3.274, 
        0.8900000000000001}, {{0.9936353750439, 0.07952431392516476}, {
        0.07952431392516476, 0.006364624956099965}}}, {
       1, 4, {1, -1}, 0.25, 5.933068999999999, {0.9, 
        0.7}, {-1.4619999999999997`, 1.295}, {{
        0.9403302068457319, -0.23687403601744728`}, {-0.23687403601744728`, 
        0.059669793154268055`}}}, {
       1, 3, {-1, -1}, 0.25, 6.557941, {0.9, 0.7}, {-1.254, -0.685}, {{
        0.7074958435887119, 0.4549126013789999}, {0.4549126013789999, 
        0.2925041564112883}}}, {
       1, 4, {0, -1}, 0.25, 6.558468999999999, {0.9, 
        0.7}, {-1.5619999999999998`, -0.0050000000000001155`}, {{
        0.9242163071899859, 0.26465170453653136`}, {0.26465170453653136`, 
        0.07578369281001407}}}, {
       1, 4, {1, 1}, 0.25, 6.885869000000001, {0.9, 0.7}, {2.338, 2.895}, {{
        0.30030254714401333`, 0.4583894930327603}, {0.4583894930327603, 
        0.6996974528559867}}}, {
       1, 2, {0, 1}, 0.25, 8.340776000000002, {0.9, 0.7}, {3.374, 
        2.1900000000000004`}, {{0.7338257255679808, 0.44195647982873537`}, {
        0.44195647982873537`, 0.26617427443201935`}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 4, {-1, -1}, 0.25, 10.583869, {0.9, 
        0.7}, {-1.662, -1.3050000000000002`}, {{0.6201743426718528, 
        0.48534330876544296`}, {0.48534330876544296`, 
        0.37982565732814716`}}}, {
       1, 3, {1, 1}, 0.25, 11.331941000000002`, {0.9, 0.7}, {2.746, 3.515}, {{
        0.3007177675916244, 0.45857016022233077`}, {0.45857016022233077`, 
        0.6992822324083756}}}, {
       1, 2, {1, 1}, 0.25, 14.409576000000001`, {0.9, 0.7}, {3.474, 3.49}, {{
        0.4597967351711113, 0.49838107658407166`}, {0.49838107658407166`, 
        0.5402032648288888}}}}, {{
       2, 1, {1, 0}, 0.25, 0.5967760000000001, {1.4740000000000002`, 
        1.3900000000000001`}, {1., 2.}, {{
        0.37648296848398755`, -0.4845033982599837}, {-0.4845033982599837, 
        0.6235170315160125}}}, {
       2, 4, {0, 1}, 0.25, 0.6257209999999996, {1.4740000000000002`, 
        1.3900000000000001`}, {2.238, 1.595}, {{0.9328374786845894, 
        0.25030325017060306`}, {0.25030325017060306`, 
        0.06716252131541048}}}, {
       2, 3, {-1, 1}, 0.25, 1.374808999999999, {1.4740000000000002`, 
        1.3900000000000001`}, {2.546, 0.915}, {{
        0.8358862940233879, -0.3703787216987961}, {-0.3703787216987961, 
        0.16411370597661218`}}}, {
       2, 4, {1, 0}, 0.25, 1.5703209999999994`, {1.4740000000000002`, 
        1.3900000000000001`}, {0.43800000000000006`, 2.0949999999999998`}, {{
        0.6834882804216466, -0.4651150943023751}, {-0.4651150943023751, 
        0.31651171957835356`}}}, {
       2, 4, {-1, 1}, 0.25, 1.6399210000000002`, {1.4740000000000002`, 
        1.3900000000000001`}, {2.138, 0.29499999999999993`}, {{
        0.2688519751866093, -0.44336282052611053`}, {-0.44336282052611053`, 
        0.7311480248133906}}}, {
       2, 2, {1, 0}, 0.25, 1.7000000000000006`, {1.4740000000000002`, 
        1.3900000000000001`}, {1.5740000000000003`, 2.6900000000000004`}, {{
        0.005882352941176479, 0.07647058823529418}, {0.07647058823529418, 
        0.9941176470588236}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {1.4740000000000002`, 
        1.3900000000000001`}, {1.374, 0.09000000000000008}, {{
        0.00588235294117648, 0.07647058823529418}, {0.07647058823529418, 
        0.9941176470588234}}}, {
       2, 1, {0, 1}, 0.25, 1.770375999999999, {1.4740000000000002`, 
        1.3900000000000001`}, {2.8, 1.5}, {{0.9931652937003213, 
        0.08238927775794512}, {0.08238927775794512, 0.0068347062996787}}}, {
       2, 3, {0, 1}, 0.25, 2.054208999999999, {1.4740000000000002`, 
        1.3900000000000001`}, {2.646, 2.215}, {{0.668668085866628, 
        0.47069212529007515`}, {0.47069212529007515`, 
        0.33133191413337204`}}}, {
       2, 3, {1, 0}, 0.25, 2.150009, {1.4740000000000002`, 
        1.3900000000000001`}, {0.846, 2.715}, {{
        0.1834336507428575, -0.38702163572338544`}, {-0.38702163572338544`, 
        0.8165663492571424}}}, {
       2, 3, {-1, 0}, 0.25, 2.3112090000000007`, {1.4740000000000002`, 
        1.3900000000000001`}, {0.646, 0.11499999999999999`}, {{
        0.2966343589004716, 0.456773922219929}, {0.456773922219929, 
        0.7033656410995284}}}, {
       2, 1, {-1, 1}, 0.25, 2.9191759999999993`, {1.4740000000000002`, 
        1.3900000000000001`}, {2.6999999999999997`, 0.19999999999999996`}, {{
        0.5148973545959542, -0.49977801955072254`}, {-0.49977801955072254`, 
        0.48510264540404574`}}}, {
       2, 4, {1, 1}, 0.25, 3.0115209999999992`, {1.4740000000000002`, 
        1.3900000000000001`}, {2.338, 2.895}, {{0.24788005795078302`, 
        0.43178181390732456`}, {0.43178181390732456`, 0.7521199420492171}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {1.4740000000000002`, 
        1.3900000000000001`}, {-0.3259999999999996, 1.8900000000000001`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {1.4740000000000002`, 
        1.3900000000000001`}, {3.274, 0.8900000000000001}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {1, 1}, 0.25, 4.021575999999999, {1.4740000000000002`, 
        1.3900000000000001`}, {2.9, 2.8}, {{0.5056415693747923, 
        0.4999681716819475}, {0.4999681716819475, 0.49435843062520757`}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {1.4740000000000002`, 1.3900000000000001`}, {
        3.374, 2.1900000000000004`}, {{0.8494117647058823, 
        0.35764705882352954`}, {0.35764705882352954`, 
        0.15058823529411774`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {1.4740000000000002`, 
        1.3900000000000001`}, {-0.4259999999999997, 0.5900000000000001}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 1, {-1, 0}, 0.25, 4.414376000000002, {1.4740000000000002`, 
        1.3900000000000001`}, {0.8, -0.6000000000000001}, {{
        0.10290831592052875`, 0.3038390929997807}, {0.3038390929997807, 
        0.8970916840794712}}}, {
       2, 4, {-1, 0}, 0.25, 5.118721000000002, {1.4740000000000002`, 
        1.3900000000000001`}, {0.23800000000000007`, -0.5050000000000001}, {{
        0.29845267987843055`, 0.45757914916636394`}, {0.45757914916636394`, 
        0.7015473201215694}}}, {
       2, 1, {1, -1}, 0.25, 5.671976000000001, {1.4740000000000002`, 
        1.3900000000000001`}, {-0.8999999999999998, 1.2}, {{0.9936353750439, 
        0.07952431392516476}, {0.07952431392516476, 0.006364624956099965}}}, {
       2, 3, {1, 1}, 0.25, 6.133609, {1.4740000000000002`, 
        1.3900000000000001`}, {2.746, 3.515}, {{0.2637898829221099, 
        0.4406867147873299}, {0.4406867147873299, 0.7362101170778901}}}, {
       2, 3, {1, -1}, 0.25, 6.666409, {1.4740000000000002`, 
        1.3900000000000001`}, {-1.0539999999999998`, 1.915}, {{
        0.9586546520022999, -0.19908769473940163`}, {-0.19908769473940163`, 
        0.041345347997700094`}}}, {
       2, 3, {0, -1}, 0.25, 7.507009000000001, {1.4740000000000002`, 
        1.3900000000000001`}, {-1.154, 0.615}, {{0.9199914373354289, 
        0.2713064550741847}, {0.2713064550741847, 0.08000856266457122}}}, {
       2, 1, {0, -1}, 0.25, 8.340776000000002, {1.4740000000000002`, 
        1.3900000000000001`}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7338257255679808, 0.44195647982873537`}, {0.44195647982873537`, 
        0.2661742744320193}}}, {
       2, 2, {1, 1}, 0.25, 8.41, {1.4740000000000002`, 1.3900000000000001`}, {
        3.474, 3.49}, {{0.4756242568370987, 0.49940546967895366`}, {
        0.49940546967895366`, 0.5243757431629014}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {1.4740000000000002`, 
        1.3900000000000001`}, {-0.5259999999999998, -0.71}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 4, {1, -1}, 0.25, 8.629121, {1.4740000000000002`, 
        1.3900000000000001`}, {-1.4619999999999997`, 1.295}, {{
        0.9989541229054502, 0.032323106837880776`}, {0.032323106837880776`, 
        0.001045877094549959}}}, {
       2, 4, {0, -1}, 0.25, 11.163321000000002`, {1.4740000000000002`, 
        1.3900000000000001`}, {-1.5619999999999998`, \
-0.0050000000000001155`}, {{0.8256768751879481, 0.3793871017414979}, {
        0.3793871017414979, 0.17432312481205192`}}}, {
       2, 3, {-1, -1}, 0.25, 11.747609000000002`, {1.4740000000000002`, 
        1.3900000000000001`}, {-1.254, -0.685}, {{0.6334892487484048, 
        0.48185124309125366`}, {0.48185124309125366`, 0.3665107512515951}}}, {
       2, 1, {-1, -1}, 0.25, 14.409576000000001`, {1.4740000000000002`, 
        1.3900000000000001`}, {-1.1, -1.4000000000000001`}, {{
        0.4597967351711113, 0.49838107658407166`}, {0.49838107658407166`, 
        0.5402032648288888}}}, {
       2, 4, {-1, -1}, 0.25, 17.097521000000004`, {1.4740000000000002`, 
        1.3900000000000001`}, {-1.662, -1.3050000000000002`}, {{
        0.5752001123437719, 0.4943125965454289}, {0.4943125965454289, 
        0.42479988765622806`}}}}, {{
       3, 1, {1, 0}, 0.25, 0.40674099999999996`, {0.746, 1.415}, {1., 2.}, {{
        0.15861690854868332`, 0.36531847047629823`}, {0.36531847047629823`, 
        0.8413830914513166}}}, {
       3, 4, {1, 0}, 0.25, 0.5572639999999995, {0.746, 1.415}, {
        0.43800000000000006`, 2.0949999999999998`}, {{
        0.17023170346550295`, -0.3758362284303311}, {-0.3758362284303311, 
        0.829768296534497}}}, {
       3, 2, {1, -1}, 0.25, 1.374808999999999, {0.746, 
        1.415}, {-0.3259999999999996, 1.8900000000000001`}, {{
        0.8358862940233879, -0.3703787216987961}, {-0.3703787216987961, 
        0.16411370597661218`}}}, {
       3, 3, {1, 0}, 0.7250000000000001, 1.6999999999999995`, {0.746, 
        1.415}, {0.846, 2.715}, {{0.005882352941176469, 
        0.07647058823529411}, {0.07647058823529411, 0.9941176470588234}}}, {
       3, 3, {-1, 0}, 0.7250000000000001, 1.7000000000000002`, {0.746, 
        1.415}, {0.646, 0.11499999999999999`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       3, 2, {0, -1}, 0.25, 2.0542089999999993`, {0.746, 
        1.415}, {-0.4259999999999997, 0.5900000000000001}, {{
        0.6686680858666278, 0.4706921252900752}, {0.4706921252900752, 
        0.3313319141333721}}}, {
       3, 2, {-1, 0}, 0.25, 2.1500090000000003`, {0.746, 1.415}, {1.374, 
        0.09000000000000008}, {{
        0.1834336507428574, -0.3870216357233854}, {-0.3870216357233854, 
        0.8165663492571426}}}, {
       3, 4, {0, 1}, 0.25, 2.258464, {0.746, 1.415}, {2.238, 1.595}, {{
        0.9856539665896822, 0.11891267693441203`}, {0.11891267693441203`, 
        0.0143460334103178}}}, {
       3, 2, {1, 0}, 0.25, 2.3112090000000016`, {0.746, 1.415}, {
        1.5740000000000003`, 2.6900000000000004`}, {{0.2966343589004716, 
        0.456773922219929}, {0.456773922219929, 0.7033656410995284}}}, {
       3, 1, {1, -1}, 0.25, 2.755541, {0.746, 1.415}, {-0.8999999999999998, 
        1.2}, {{0.9832247097756847, 0.12842850097313016`}, {
        0.12842850097313016`, 0.01677529022431531}}}, {
       3, 4, {-1, 1}, 0.25, 3.1920640000000002`, {0.746, 1.415}, {2.138, 
        0.29499999999999993`}, {{
        0.6070254230491618, -0.48841125992461304`}, {-0.48841125992461304`, 
        0.39297457695083815`}}}, {
       3, 3, {1, -1}, 0.8150000000000001, 3.4899999999999993`, {0.746, 
        1.415}, {-1.0539999999999998`, 1.915}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.8150000000000001, 3.4899999999999993`, {0.746, 
        1.415}, {2.546, 0.915}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 4, {-1, 0}, 0.25, 3.944464000000001, {0.746, 1.415}, {
        0.23800000000000007`, -0.5050000000000001}, {{0.06542435169898872, 
        0.24727314027964248`}, {0.24727314027964248`, 0.9345756483010113}}}, {
       3, 1, {-1, 0}, 0.25, 4.063141000000001, {0.746, 1.415}, {
        0.8, -0.6000000000000001}, {{
        0.0007176713778822848, -0.02677977456357042}, {-0.02677977456357042, 
        0.9992823286221177}}}, {
       3, 1, {0, 1}, 0.25, 4.226140999999999, {0.746, 1.415}, {2.8, 1.5}, {{
        0.9982904025208814, 0.041311920260114356`}, {0.041311920260114356`, 
        0.0017095974791186558`}}}, {
       3, 3, {0, 1}, 0.33999999999999997`, 4.25, {0.746, 1.415}, {2.646, 
        2.215}, {{0.8494117647058823, 0.3576470588235293}, {
        0.3576470588235293, 0.15058823529411758`}}}, {
       3, 3, {0, -1}, 0.33999999999999997`, 4.25, {0.746, 1.415}, {-1.154, 
        0.615}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 4, {1, 1}, 0.25, 4.724864, {0.746, 1.415}, {2.338, 2.895}, {{
        0.5364099368786065, 0.4986725543846341}, {0.4986725543846341, 
        0.4635900631213935}}}, {
       3, 4, {1, -1}, 0.25, 4.889663999999999, {0.746, 
        1.415}, {-1.4619999999999997`, 1.295}, {{0.997055012368948, 
        0.054187772411355924`}, {0.054187772411355924`, 
        0.0029449876310519555`}}}, {
       3, 1, {-1, 1}, 0.25, 5.294340999999999, {0.746, 1.415}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.7211692635589585, -0.4484240814862511}, {-0.4484240814862511, 
        0.27883073644104156`}}}, {
       3, 1, {0, -1}, 0.25, 5.343741, {0.746, 
        1.415}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5704834871300836, 0.49500714948572555`}, {0.49500714948572555`, 
        0.4295165128699165}}}, {
       3, 2, {-1, -1}, 0.25, 6.133609, {0.746, 
        1.415}, {-0.5259999999999998, -0.71}, {{0.2637898829221099, 
        0.4406867147873299}, {0.4406867147873299, 0.7362101170778901}}}, {
       3, 1, {1, 1}, 0.25, 6.557941, {0.746, 1.415}, {2.9, 2.8}, {{
        0.7074958435887119, 0.45491260137899986`}, {0.45491260137899986`, 
        0.2925041564112882}}}, {
       3, 2, {-1, 1}, 0.25, 6.666409, {0.746, 1.415}, {3.274, 
        0.8900000000000001}, {{
        0.9586546520022999, -0.19908769473940163`}, {-0.19908769473940163`, 
        0.041345347997700094`}}}, {
       3, 4, {0, -1}, 0.25, 7.343264, {0.746, 
        1.415}, {-1.5619999999999998`, -0.0050000000000001155`}, {{
        0.7254082108446598, 0.4463083446271304}, {0.4463083446271304, 
        0.27459178915534027`}}}, {
       3, 2, {0, 1}, 0.25, 7.507009000000002, {0.746, 1.415}, {3.374, 
        2.1900000000000004`}, {{0.9199914373354287, 0.2713064550741847}, {
        0.2713064550741847, 0.08000856266457125}}}, {
       3, 3, {1, 1}, 0.515, 8.41, {0.746, 1.415}, {2.746, 3.515}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.515, 8.41, {0.746, 1.415}, {-1.254, -0.685}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 1, {-1, -1}, 0.25, 11.331941000000002`, {0.746, 
        1.415}, {-1.1, -1.4000000000000001`}, {{0.3007177675916244, 
        0.45857016022233077`}, {0.45857016022233077`, 0.6992822324083756}}}, {
       3, 2, {1, 1}, 0.25, 11.747609000000002`, {0.746, 1.415}, {3.474, 
        3.49}, {{0.6334892487484048, 0.48185124309125366`}, {
        0.48185124309125366`, 0.3665107512515951}}}, {
       3, 4, {-1, -1}, 0.25, 13.196864000000001`, {0.746, 
        1.415}, {-1.662, -1.3050000000000002`}, {{0.4393819622601247, 
        0.49631185105794823`}, {0.49631185105794823`, 
        0.5606180377398752}}}}, {{
       4, 3, {-1, 0}, 0.25, 0.5572639999999999, {0.3380000000000001, 
        0.7949999999999999}, {0.646, 0.11499999999999999`}, {{
        0.17023170346550287`, -0.37583622843033104`}, {-0.37583622843033104`, 
        0.8297682965344972}}}, {
       4, 2, {0, -1}, 0.25, 0.6257209999999996, {0.3380000000000001, 
        0.7949999999999999}, {-0.4259999999999997, 0.5900000000000001}, {{
        0.9328374786845894, 0.25030325017060306`}, {0.25030325017060306`, 
        0.06716252131541048}}}, {
       4, 2, {-1, 0}, 0.25, 1.5703209999999999`, {0.3380000000000001, 
        0.7949999999999999}, {1.374, 0.09000000000000008}, {{
        0.6834882804216463, -0.46511509430237513`}, {-0.46511509430237513`, 
        0.3165117195783536}}}, {
       4, 2, {1, -1}, 0.25, 1.6399210000000002`, {0.3380000000000001, 
        0.7949999999999999}, {-0.3259999999999996, 1.8900000000000001`}, {{
        0.2688519751866093, -0.44336282052611053`}, {-0.44336282052611053`, 
        0.7311480248133906}}}, {
       4, 1, {1, -1}, 0.25, 1.696669, {0.3380000000000001, 
        0.7949999999999999}, {-0.8999999999999998, 1.2}, {{
        0.9033252802992215, -0.295514328369293}, {-0.295514328369293, 
        0.09667471970077843}}}, {
       4, 4, {1, 0}, 0.25, 1.6999999999999995`, {0.3380000000000001, 
        0.7949999999999999}, {0.43800000000000006`, 2.0949999999999998`}, {{
        0.005882352941176469, 0.07647058823529411}, {0.07647058823529411, 
        0.9941176470588234}}}, {
       4, 4, {-1, 0}, 0.25, 1.7000000000000002`, {0.3380000000000001, 
        0.7949999999999999}, {0.23800000000000007`, -0.5050000000000001}, {{
        0.0058823529411764705`, 0.07647058823529411}, {0.07647058823529411, 
        0.9941176470588234}}}, {
       4, 1, {1, 0}, 0.25, 1.890269, {0.3380000000000001, 
        0.7949999999999999}, {1., 2.}, {{0.23184213463798006`, 
        0.4220087193939064}, {0.4220087193939064, 0.76815786536202}}}, {
       4, 1, {-1, 0}, 0.25, 2.159469, {0.3380000000000001, 
        0.7949999999999999}, {0.8, -0.6000000000000001}, {{
        0.09884096507057982, -0.2984483685572703}, {-0.2984483685572703, 
        0.9011590349294201}}}, {
       4, 3, {0, -1}, 0.25, 2.258464, {0.3380000000000001, 
        0.7949999999999999}, {-1.154, 0.615}, {{0.9856539665896822, 
        0.11891267693441203`}, {0.11891267693441203`, 0.0143460334103178}}}, {
       4, 1, {0, -1}, 0.25, 2.591269, {0.3380000000000001, 
        0.7949999999999999}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.6908753973439269, 0.462132646205392}, {0.462132646205392, 
        0.3091246026560731}}}, {
       4, 2, {-1, -1}, 0.25, 3.0115209999999992`, {0.3380000000000001, 
        0.7949999999999999}, {-0.5259999999999998, -0.71}, {{
        0.24788005795078302`, 0.43178181390732456`}, {0.43178181390732456`, 
        0.7521199420492171}}}, {
       4, 3, {1, -1}, 0.25, 3.1920640000000002`, {0.3380000000000001, 
        0.7949999999999999}, {-1.0539999999999998`, 1.915}, {{
        0.6070254230491618, -0.48841125992461304`}, {-0.48841125992461304`, 
        0.39297457695083815`}}}, {
       4, 4, {1, -1}, 0.25, 3.4899999999999993`, {0.3380000000000001, 
        0.7949999999999999}, {-1.4619999999999997`, 1.295}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       4, 4, {-1, 1}, 0.25, 3.4899999999999993`, {0.3380000000000001, 
        0.7949999999999999}, {2.138, 0.29499999999999993`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       4, 3, {1, 0}, 0.25, 3.944464, {0.3380000000000001, 
        0.7949999999999999}, {0.846, 2.715}, {{0.06542435169898873, 
        0.2472731402796425}, {0.2472731402796425, 0.9345756483010113}}}, {
       4, 4, {0, 1}, 0.25, 4.25, {0.3380000000000001, 0.7949999999999999}, {
        2.238, 1.595}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       4, 4, {0, -1}, 0.25, 4.25, {0.3380000000000001, 
        0.7949999999999999}, {-1.5619999999999998`, -0.0050000000000001155`}, \
{{0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       4, 3, {-1, -1}, 0.25, 4.724864, {0.3380000000000001, 
        0.7949999999999999}, {-1.254, -0.685}, {{0.5364099368786065, 
        0.4986725543846341}, {0.4986725543846341, 0.4635900631213935}}}, {
       4, 3, {-1, 1}, 0.25, 4.889663999999999, {0.3380000000000001, 
        0.7949999999999999}, {2.546, 0.915}, {{0.997055012368948, 
        0.054187772411355924`}, {0.054187772411355924`, 
        0.0029449876310519555`}}}, {
       4, 2, {1, 0}, 0.25, 5.1187210000000025`, {0.3380000000000001, 
        0.7949999999999999}, {1.5740000000000003`, 2.6900000000000004`}, {{
        0.29845267987843055`, 0.457579149166364}, {0.457579149166364, 
        0.7015473201215694}}}, {
       4, 1, {-1, 1}, 0.25, 5.933068999999999, {0.3380000000000001, 
        0.7949999999999999}, {2.6999999999999997`, 0.19999999999999996`}, {{
        0.9403302068457319, -0.23687403601744728`}, {-0.23687403601744728`, 
        0.059669793154268055`}}}, {
       4, 1, {0, 1}, 0.25, 6.558468999999999, {0.3380000000000001, 
        0.7949999999999999}, {2.8, 1.5}, {{0.9242163071899859, 
        0.26465170453653136`}, {0.26465170453653136`, 
        0.07578369281001407}}}, {
       4, 1, {-1, -1}, 0.25, 6.885869000000001, {0.3380000000000001, 
        0.7949999999999999}, {-1.1, -1.4000000000000001`}, {{
        0.30030254714401333`, 0.4583894930327603}, {0.4583894930327603, 
        0.6996974528559867}}}, {
       4, 3, {0, 1}, 0.25, 7.343264, {0.3380000000000001, 
        0.7949999999999999}, {2.646, 2.215}, {{0.7254082108446598, 
        0.4463083446271303}, {0.4463083446271303, 0.2745917891553402}}}, {
       4, 4, {1, 1}, 0.25, 8.41, {0.3380000000000001, 0.7949999999999999}, {
        2.338, 2.895}, {{0.4756242568370987, 0.49940546967895366`}, {
        0.49940546967895366`, 0.5243757431629014}}}, {
       4, 4, {-1, -1}, 0.25, 8.41, {0.3380000000000001, 
        0.7949999999999999}, {-1.662, -1.3050000000000002`}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       4, 2, {-1, 1}, 0.25, 8.629121, {0.3380000000000001, 
        0.7949999999999999}, {3.274, 0.8900000000000001}, {{
        0.9989541229054502, 0.032323106837880776`}, {0.032323106837880776`, 
        0.001045877094549959}}}, {
       4, 1, {1, 1}, 0.25, 10.583869, {0.3380000000000001, 
        0.7949999999999999}, {2.9, 2.8}, {{0.6201743426718528, 
        0.48534330876544296`}, {0.48534330876544296`, 
        0.37982565732814716`}}}, {
       4, 2, {0, 1}, 0.25, 11.163321000000002`, {0.3380000000000001, 
        0.7949999999999999}, {3.374, 2.1900000000000004`}, {{
        0.8256768751879481, 0.37938710174149803`}, {0.37938710174149803`, 
        0.17432312481205198`}}}, {
       4, 3, {1, 1}, 0.25, 13.196864000000001`, {0.3380000000000001, 
        0.7949999999999999}, {2.746, 3.515}, {{0.4393819622601247, 
        0.49631185105794823`}, {0.49631185105794823`, 0.5606180377398752}}}, {
       4, 2, {1, 1}, 0.25, 17.097521000000004`, {0.3380000000000001, 
        0.7949999999999999}, {3.474, 3.49}, {{0.5752001123437719, 
        0.4943125965454289}, {0.4943125965454289, 
        0.42479988765622806`}}}}}}, $CellContext`dynamics$$ = {{
      Complex[1.598963272286374, -1.290795690806783*^-16], {Complex[
      0.017967217275714695`, 0.01618065648371459], Complex[
      0.024717763856386896`, 0.0041055109431833246`], 
      Complex[-0.03399609581304087, 0.004544040238246092], Complex[
      0.012797743353602073`, 0.0026045492857660014`], Complex[
      0.8256682773692117, 0.], Complex[0.5618029832633691, 
      0.0019546941863596845`], Complex[-0.0017185452932607403`, 
      0.004351158509262329], Complex[
      0.0072604628864446534`, -0.0033876626702387656`]}}, {
      Complex[1.2931888282966488`, 3.6369540716375425`*^-17], {Complex[
      0.008591502392054104, 0.0033183007535384466`], Complex[
      0.024812579118179804`, -0.027313756059525292`], Complex[
      0.03876552810580014, 0.0037377124691503026`], Complex[
      0.03638841350899652, -0.007044717015927234], 
      Complex[-0.5610476732373257, 0.0034604535341297704`], Complex[
      0.8243518063657415, 0.], 
      Complex[-0.008737703199905286, -0.006459701589212876], Complex[
      0.03353809106027807, -0.008817169550557117]}}, {
      Complex[0.7771105074675421, -1.2007346725310177`*^-17], {Complex[
      0.7842169482076036, 0.], Complex[0.6145021147069744, 
      0.00497746645491115], 
      Complex[-0.004259626292586524, -0.02746723938339078], Complex[
      0.02383106797492248, 0.016795581000814783`], 
      Complex[-0.011017640728265901`, 0.01958418548559256], 
      Complex[-0.03719665249937831, -0.004288440396747634], Complex[
      0.004842216945157825, -0.022672035662450674`], Complex[
      0.05682202969602021, -0.008392095297153691]}}, {
      Complex[0.5981450380340094, -5.117664124560191*^-17], {
      Complex[-0.5368110299103265, -0.009965934658325229], Complex[
      0.6555731800802852, 0.], Complex[0.07562915654018883, 
      0.28149728778576705`], Complex[0.20703829034670387`, 
      0.17625205520927728`], Complex[0.008493273599274072, 
      0.02591357660391073], 
      Complex[-0.0297374508871703, -0.03447165893836035], Complex[
      0.20420115309375306`, -0.0034567088810429124`], Complex[
      0.278406572106694, 0.03212057487256741]}}, {
      Complex[0.5753063998974757, -3.5330754212714996`*^-18], {Complex[
      0.07912610580106845, -0.1560174932038211], Complex[-0.09173670519512148,
       0.16110323112339525`], Complex[0.8250863095714639, 0.], Complex[
      0.366008633107571, 0.052359898488592765`], Complex[0.04029564142109924, 
      0.0035959455337041743`], 
      Complex[-0.013474687269911087`, -0.0002888845114086538], 
      Complex[-0.13325007810118802`, 0.2614104467423793], 
      Complex[-0.08575391160763841, 0.1493096506803825]}}, {
      Complex[0.5474862052286925, 8.903546767542281*^-18], {Complex[
      0.23651006045154432`, -0.024118915774790722`], 
      Complex[-0.34631678858747117`, -0.011997805815281433`], Complex[
      0.09552044946288561, 0.15023165521117082`], Complex[
      0.010272473185697288`, 0.12984549760200415`], Complex[
      0.007395386073441743, 0.011761151958687072`], 
      Complex[-0.002260061538068522, -0.0013571991855029363`], Complex[
      0.7574196777208371, 0.], Complex[
      0.44779923761554086`, -0.018281921481081032`]}}, {
      Complex[0.42102063341189694`, 4.723509671308276*^-17], {Complex[
      0.08733921324721917, -0.0016668017181610156`], 
      Complex[-0.18440668590326292`, 0.04282495412259421], 
      Complex[-0.35389211135898535`, -0.02320894593345125], Complex[
      0.6574275404006258, 0.], 
      Complex[-0.00422757178074473, -0.00266356092853467], 
      Complex[-0.03328399739206857, -0.0034275029044126587`], 
      Complex[-0.3698754951188969, 0.06961954232753234], Complex[
      0.5049726040836144, -0.027265288416149155`]}}, {
      Complex[0.37708456392051437`, 8.225289442254319*^-18], {
      Complex[-0.02368433709519314, -0.027494055044574504`], 
      Complex[-0.0021363606317512775`, 0.01741111387817466], Complex[
      0.2708003983292784, 0.0012378912088528427`], 
      Complex[-0.573760147835221, -0.09270978309970634], Complex[
      0.018788743477671514`, -0.0054020099452767294`], 
      Complex[-0.005587377915936619, 0.0019240596487314716`], 
      Complex[-0.3929935680753085, -0.041692091601079534`], Complex[
      0.6562361804358614, 0.]}}}, $CellContext`dynMeshSize$$ = 
    14, $CellContext`dynPlot$$ = {CompressedData["
1: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
FlV7i3330iVz0lTJ8D9pa1nk
     "], {10, 20, 3.5, 20}, 4, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 14}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 12, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJx8vXVUlVv3/o3djd3d2IG1ULEDG0XFVoxjdyt2YHdgg92BddudGxUMFG4U
NmwV2CAhiK+/r2uu++xrnud9/nnGmGOOude+9op5rfXxUHrwuG7D0trZ2WUv
a2eX7s//dyu+98LD4xludN76PjFldLJWcHtJT7dNSYLizXtkn/nrbbzmfjle
a3A6UcXr5m6a/KuNVbv2fEKVs5sThG0di1ahrvuO1XvjIV/X/B5n6VY0E8ZN
WtVFra/Vef1Dxe3k/05u/5E1NifLF4XvTf009yirLxamf1Vpgacxno5/xyN6
fCyTOrYrG79Yenlq7V0vjXiLv99XTLCb1WBkaCJ8r2TxKevGuzEbEsW4re9v
mXKnVbp5O3W2tzZLUnHS7WmHb6uj1xn5pFvn8T8zW0pjHYs2o0x8xeW/EyBf
1+q12LvncSWsY9KeRd/YVWmzESfdKveplusfhyTMF1VWPVlf7ibGdWF/5Wsp
c/6fKk66OX59NqxFxp84flG3sms79zVGHdIt12b3ms9fMX1EzhPpYwcXSBSF
KlbbfTE8RSPdvowoOSNolhEn3frcq/L15GAjTrr1Pp/p+cHDWMeiFfpeY29C
wyTI1zWnjMcLfY7BuEk72CHvIHufnypOuhUW+u3jZZMxX/RpUPbT72YY10Xa
Y2Hla30z6pBu04osqlfW+SeOX/xjl/ts30nGeEi3vCMP+qw+w/QRBYMOj+5f
m+bhD6XbucM/zW0vJKg46TbiQPu5TQsa+aRbxStDew/xxzoW7fSWRgX9jyZB
vq5929Dtn5YDfkLcpJ0eX31tjitGnHSbcPbByFFHWL6I3jDZe1kTjOti2adM
05btMj6XdFu3fspSa1ocj1U45r6kBW0yxk+6eZf48XToaKaPWJy+ZflFXqTn
V6WbY+sn9pVNCSpOuq3wsV/9frCRT7o1OHYk8F0s1rFoLSY/Ot/DOQnyda3P
Q89hLR0wbtKO+2fKW+u8UYd021Z5Qt7iGfBzTaJR9G6fSe4JWF+0GRFf2iU+
XsVJtyIbXs27+Dkexy/GdbVr9KOaUYd0e9Bz3JczjxNQH1GncO9Ol4/ReD4o
3foOOT+q6QYjTrodKVrl/OhnRpx0O7ppUjWxE+tYtLeXR7ep/z0B8nXtnceY
4d++xEPcpH0cv2ZKu+c/VJx0W96+0qu4X3GYL94sDH++ez/GdVHpRD//C0+M
OOmWNvngzKdTf+D4xZJVYRHz1hrjId2abJhUd+OHBNRH+PbaKtImJQoaH+kW
1aOS29YCSSpOuo1u5x3Ua6ORT7oFrEj7euSyBKhj0XIXPuPX2CEe8nVtzbW1
SxqGx0HcpA31XVPEI6sRp/8N81uYacv1WMwXmE+6YX3SLdd/jscqcPyk2xj4
vqQb6SP1FKQb6Ulx0g30F6Qb/F6CdEtv+/sK0g3mgyDdYP6o8cJ8o3wB85Pq
C5jPgnSD+U/jF7BeBOnma7u+SB9hux6/Kt1s1+9Xpdt12/WudIP9QekG+4nS
DfYfpRvsV0o32N+UbrAfKt1g/1S6wX6rdIP9Wem20nY/V7rR/t/j73mhdFsg
zwuKk24H5PlCcdKtsTyPbOtYtPXy/LLN17XF8ryzjZu0eHk+Upx0mybPU8gX
p+T5C/X/nLN/z2uKk26n5PkO4xdlZT9AcdLNQ/YPoI84IfsN2Z8o3ag/oTjp
ls+2n1G6Qf+jdJtu2y8p3aC/UrpBP6Z0g/5N6Qb9ntIN+kOlG/STSjfoP5Vu
brb9qtKN+tuxf/thJ9Itr+yHKU665ZD9M8VJN0fZb9vWsWjUn9vm6xr187bx
Pz5L9v8UJ92qSb8A+eKJ9BdQX9SRfoTipNtM6V9g/IL8DsVJt+fSH4E+gvyU
9F9KN/JfFCfdJtr6NaUb+DulWzdbP6h0A/+odAO/qXQDf6p0Az+rdAP/q3Sr
aOuXlW7gr5Vu4MeVbujfSbeUwS/vhJ2KY77+n7ofKq/9Hct8/dU9CefqZ4qF
OhbtbDNf195vY5ivr5lzx9wRF6OZr2+7XHsa8iyK+frxRR+bwtNHYb4Y9Mju
Ttu478zXVx4ZsidkoJFPuv184Tz9dGb8XKvY/zrD5y3jjDjpNsiu8olqgdGo
j7ik15yTrn4M8/X17tvfupDlB/P1A54P7XCqVhzz9YF2qY6z8sQyX59yvVtQ
mZ8xzNdHLz4xZ0BVjJs0/zJVds79oyf6etfdz8sFrY9mvn542zPrk30xroue
Hxt1H2mOZr4+//zETS7O+LlW0aKxx8Mjp2KYr29z/VfJlyWtzNf3eja3ef0F
VubrLT2PxMWNiVNx0q1y3vr3V5yKZb4+plcWz7RBWMei7Rxdt2CBKlbI17W9
nrOzPT0cw3z9Ldc0sx66GXHS7VWnVr9mN2T5YvKD1NzDnDCui42vn3VzH2/E
SbfPy8snt7qL+VaReUr2EM8mxjhJt0WbMh/N7M/0EeXaVu1UbFYs+lZtn3Xr
l4a9jDjpVmfnzTaPE63M19fOdnzBq7lWqGPRWndauDlbOszXNZeGmX19NsRA
3KRp9it2fmxkxEm3D259Bn9Mw/JFy8WeTpboaKwvNjyvOPRoHiOfdIveNmPS
oAlYxyrqVLj27EVRY5ykm9jteW9ANqaPCHfNv7CzPc0rw9c3ezKzzpyYGBUn
3RyGVvZfc8GIk25pc+br4+oeA3UsWr50n+4FJ0QzX18wokjj9usxbtKevZi9
pVNjI066lf6Yvn7ntCxfzN++Ycavn1HM1zcOipqxsq2RT7olNFh1+WYi1rGK
mUvHNf6SyaripJv+0X9TM6dY1EeUObQgzupi+F/Szct928j0dWNUnHRbu39V
1RkPolVc+fr5e3PGukRDHYs2o/tE50I+UZCva8/ujc7W5PJ35uuXzGiVNVfy
N+brszS5tqrW/m+YL06Kn0fSxGFcFy/PPiufr4DxuaTbqA8d1x2ezsYvBvcO
2flxlfF9Sbfh129Hfl5lRX3EEsttuyWDYpmvf5dxR5dZwTHM12fPtmPvwbox
zNf79yzS9+uMaObrZ47s7pZ/XBTz9T65W2b79Psb8/VvQgaOXRn9lfn6Lrsu
ey1Y9ZX5eswn3bA+6Tb3P8djFTh+0i0LfF/SjfRBX096oq8fZqu/8gvweym/
MNz291V+AeaD8gswf9R4Yb4pvwDzU/kFmM/KL8y2nf+Gr7ddL8ovrLNdX8ov
2K5Hw9fbrl/D18N6V7rB/qB0+2G7nyjdYP9RusF+pXSD/U3pBvuh0g32T6Wb
ve1+q3SD/VnpVst2P1e60f6Pvj5Mnhfo653k+YK+vro8j9DX0/mFvn69PO/Q
17eS5yP6+nfyPEVff12ev+jru8jzGn19G3m+o6+vK/sB9PW1ZP+Avt5X9hvo
66k/QV8P/YzSDfofpRv0S0o36K+UbtCPKd2gf1O6Qb+ndIP+UOnmbdtPKt2g
/1S6VbftV5Vu1N+ir3eT/TD6ehfZP6Ovp34bfX0B2Z+jr+8u+3n09UNk/4++
nvwC+voX0l+gr/8m/Qj6evIv6OvfSb+Dvn6Y9Efo6xtLP4W+nvwX+vohtn5N
6Qb+TumWaOsHlW7gH5Vu4DeVbuBPlW7gZ5Vu4H+Vbqdt/bLSDfy10g38uNIN
/Tvplmvcx3cFPpqZr1/RxsHk3dOMvlibXtuhdfar4czX5y04uNiFluGQr2vz
/J42mpsSxnz9kwunu44wG3HS7dft260f5sY6JjGgQvcx3TxZfdG1QM4z9esb
4yTd7n09kPrlGxu/mGkXlafmkAjm609VWF280bQI1EfsfVHvrqdjBPP1c8Y/
HX/F08x8fc/w08dfZDczX28au89voV848/XdRmd/F7ktnPn6s10/dnp5HuMm
LV23yAZVCpmZr78/61fi3qv4uSaxuZjPi54TI5ivT7x//vDJmAjm61uPeVd7
eq5I5uu/1lqe7PA0gvn6V85LJ03pwvQRPQ44Ll7wwsx8feYI3WFcVyNOuq1Z
ee13fgcjTrr9tB804XIbrPPH1z+9nLbsAczXtUUz4vqLRhHM19f+kThzsW7E
SbdxNZpNyjsokvn6iE3ZWqcswbgulq7wevi4jREn3axHP6a+uYqfaxU3enit
MxUx4ur+LaVUju1bmT7CfOX24+49zOhbtaUL47x9Bhtx5etd/Qabd5nRF2sz
Hk/7lWQfAXUs2sp9hUcWOhwB+bq2o05kkxHlIpmvf/fCNV3b7kacdGvQan/n
1cVYvpi/2GG6gxerL7TYuSfCPxjjJN2aeQfa32jHxi8sF6u2z5UYruKk26Oe
bZpnjghHfYRbi+xp59mTnoavf5XpdGybc0acdAuLKDJhVMkIFSfd3rUffWjt
0gioY9GWLb97+OMFzNe1huP2Vzq0FOMmLcm/74cGScbnkm6OzrVdkhqZMV+4
937oX+bPPoC+PqGy+5SLTkacdKt/YpNDkRqYbxXhh6OGD+xlxEm3TS29S8w8
FY76CIdxlzMl1qXxGL6+RE3PJXqOCBVX/rTsQUtVJyNOuk3dnelDfNkIqGPR
ji6aXHr8UTPk69quohuj0yeEQ9ykHYp4HNC8nREn3VIvbC9R/U0Y8/VRRXJ+
v++LcV0kh+1JF37RiJNu2o4+fkt+Yr5VvHx3q1aLccbnkm51fOxumHIwfcRg
D++h3f98L/CtWp2Gr7NMyxPBfH1G7z2xGe+Yma93OlTx5f0qWMeitT9ydtyc
2eHM1xdImZ4tf3QY8/V+RddmDN0Wxnz9vd+ZdtyezfIF5pNuWJ906/Cf47EK
HD/plg2+r+JDpD7o60lP9PW1bfVXfgF+L+UXrtn+vsovwHxQfgHmjxovzDfl
F2B+Kr8A81n5hZO281/5BVgvyi9ksF1fyi/YrkfD19uuX8PXb7Bd70o32B+U
bnVt9xOlG+w/SjfYr5RusL8p3WA/VLrB/ql0W2K73yrdYH9Wun2x3c+VbrT/
o693l+cF+no6X9DXf5PnEfr6FvL8Ql9/TZ536OsXyPMRfX0zeZ6ir/8gz1/0
9dvleY2+fo0839HXz5L9APr62rJ/QF/vKfsN9PXUn6Cvh35G6Qb9j9It0bZf
UrpBf6V0g35M6Qb9m9IN+j2lG/SHSrdttv2k0g36T6XbBtt+VelG/S36elfZ
D6Ov/yD7Z/T1kbLfRl/fTvbn6OtjZT+Pvn6L7P/R1z+QfgF9fRbpL9DXn5J+
BH19L+lf0Nf7S7+Dvr639Efo6xdIP4W+nvwX+vrTtn5N6Qb+Tun2yNYPKt3A
PyrdwG8q3cCfGpyDrZ9VuoH/VbrltPXLSjfw10o38ONKN/TvpFuloHy505QL
Zb7+y+mHH9ef05mvX/fpW/ySATrUsWinlm65easl5uvasluDEmc2xbhJ8+3S
s9olYcRJt1w7h9W/3prli+gyiYvq92D1xY9C7jeWTzHiyp/OKjN1/3U2flF+
1Lt6dr+NuDoXrn/L0CxzKOojXGeMm7Xznc58ffj3arnc24YyX9+2n3MHx8yh
zNf36L1sXf+nWMeiJXjb53h/WGe+Xmtctt6WAxg3aV9P95645orOfL015fjw
8nEsX/SI0yt6NcPx6ML1QbXJK8aHMl+/Z0O/0Aoz2PjF6NtPN9i5hjJff2F7
B5/SuUKZrx/5Pp1zgWs68/VvYtIMGlg9lPn6UR0XZSlV1YiTbvX6L2hbvloo
1LFo5kw9H9UXmK9rTuNmnPMahXGTFjOiStYau4046Xbmkf/iirdYvrhdaUTv
1MesvnBp+zjI7rIRJ90KP508YIUXG79YkbfFnuu9jDjpVvVQlxK3KuP3ShZZ
L12ereUKRd+qHahf9/vs87qKk26TfXz8H3/Q0Rdr2z48P9C+KNaxaNVyV1y/
ckgo5Ota+Oab+4duwbhJa3jkXE3/w0acdCvY/vD4S9tYvii/+MXWzKNYfVEu
e+9k16pGXN1bTh8xJySVjV+Yp7bxCogz4qTb5b4F813NxPQRDx5Pm9OyCulp
+Pr2XU77rZ+tqzjpVsouaO+KJ0acdDtf/lLPFQWwjkUrUdY3bYP6oZCva6t+
mO5eKo1xk3YkR1AtLcioT7qdKHBwzNNN+LkmsaFtkZezJ2BcFz73XX1rDDLi
pNvE5vlyp7qx8Qu/VXarKgw24qTb6vfLhs1coqM+Qhz6occFUNzw9eY61eaF
XTfipNu4vikbL5iNOOm2pMHuzxNeYx2LNnGnNXrCEszXtWExD6cWboFxk9am
SWjOnNWMOOm2tO7++3XKs3wR/2NQ0RFlWH3RfuqZWU9LG3HFk08Y1+N2OTZ+
8brwso1uNYy4el+4syH1SXemj/j2Z6dfeldnvv5tuw7fp5h15uvHXJ3U8fNB
nfl688zMQb0dsY5Fq+cXXygoP+br2qT4QT+qZ8e4SSt1pEv7o5l15usD7W/Z
3c7E8gXmk25Yn3Sr+5/j+bNOYfyk22j4vqQb6YO+nvREXz/UVn/lF+D3Un4h
j+3vq/wCzAflF2D+qPHCfFN+Aean8gswn5VfmGI7/5VfgPWi/MJY2/Wl/ILt
ejR8ve36NXz9Gtv1rnSD/UHpBvuJ0g32H6Ub7FdKN9jflG6wHyrdYP9UuhW1
3W+VbrA/K91gP1e60f6Pvv6pPC/Q11+V5wv6+gh5HqGvPyfPL/T1FeV5h76+
sjwf0dcXkOcp+vo68vxFXx8pz2v09bXk+Y6+fovsB9DXU/+Avt5b9hvo66k/
QV9fw7afUbpB/6N0K2TbLyndoL9SukE/pnSD/k3pBv2e0g36Q6VbmG0/qXSD
/tNYp7b9qtKN+lv09SNkP4y+/qzsn9HXD5f9Nvr6/bI/R1/vJvt59PXU/6Ov
j5Z+AX29RfoL9PW3pB9BXx8n/Qv6+t7S76Cvbyn9Efr6COmn0NeT/0JfD35N
6Qb+TunWytYPKt3APyrdwG8q3cCfKt3AzyrdwP8q3U7a+mWlG/hrpRv4caUb
+nfSrYrPlgSzh+FzSbeZD8Z22V6U+/qTl191LXsuhPn6EZ6FvVs2C4F8XWvU
7ma/XEHBzNff8bvtV2m7ESfd/BfluGGZzvJFlfjdTn0XYFwXy01xyQl5jM8l
3bLmn+N64RSOxyquZTRfexRixNV7vcebdUuj8Xsli62mp/M9rCHM17/+vnBb
r+468/UtFm2cOb4E+murNiJX1xp10nBfv7PSiYyVg0OYr/+5s2qVozcwbtIG
zLifvbUWwny9b5YZ2W6ZWb5oNGJgZ/c87N5AVBs/9de28jrz9cGX0xWc5sDG
L7oG1Hw7/V9x0s2sr03KWIrde4hmp7TlBZJDmK9P/7uV2b2W4ffVu3P/mtvH
FjPipFuBatkPeP4rTrqVv3HSsrcS5uva8LOznq5vjHGT9iBX79cZ2htx0q38
gjmTdndh+aLP0TrzWnRn9cWsV27fG/wrTrrtsx/cb0BHNn7xvlBocvVGRpx0
y1dSrE8sg98rWWQLa2qXtoCOvlXrdD3HkpI/Q1ScdMvimFLFKyv39bNHFdvY
pBrWsWinS5m2t22B+bp2q1lC/2ZtMW7Snny4W6pOKyNOumXKXTxyVVOWLxIm
3Q4tVpPVF5fTXn70uogRJ90Ss7g1rJWF+/qdu2PWTM3Mff3sV5vdA/MwfYQ2
yLFpsOrbDV9fefGyCdNfh6g46ebnYUm/MM6Ik26hjXY2cUmHdSza4T4Dm71N
y3y3ph3oPN41FuuYtMKfar0NvmHESbevTVtHRTRj+aJBv7jS9b4GM18faHeo
o1+qESfdooZfLbC6ERu/GN64y/Qdq4y4+ndtLSceHx4UgvqIgy8itkWp9WX4
+usOeXdlScN9/el6tds2/RGi4qTbrNizA5cHh0AdixbpuunYeV/M17VKXV8u
L5QSDHGT9mH96Bwfhhhx0u1AOb9jXxqwfDHU73G1U44Y18XZSuEV5rsbcdKt
d9TgHxV9Md8qZo1uWm9EGWOcpFvdgw0Pbn2K3ytZ1LbvFjWtBvf1RS+7BN8o
xX39oAe9jlVNw3394HsTFww5FMJ8ffSq2RMS3gYzX1+5RstF/dwwbtLmNF6w
cmzpYObrC0QEtm6Rm+ULzCfdsL769zL/OR6rwPGTboPh+5JupA/6etITfX1N
W/2VX4DfS/kF+H2VX4D5oPwCzB81Xphvxvup7fxUfgHms/ILEbbz33g/tV0v
yi/A+lJ+wXY9Gr7edv0avh7Wu9IN9gelm9l2P1G6wf6jdIP9SukG+5vSDfZD
pRvsn0o3X9v9VukG+7PS7Yrtfq50o/0fff1NeV6gr58nzxf09bvkeYS+/pc8
v9DXX5XnHfp6Oh/R12eU5yn6ejp/0dfflec1+voz8nxHX0/9APr6rLJ/QF/f
UfYb6OupP0FfX9C2n1G6Qf+jdNtj2y8p3aC/UrpBP6Z0g/5N6Qb9ntIN+kOl
W0XbflLpBv2n0q2+bb+qdKP+Fn29kP0w+vpw2T+jr+8m+2309dSfo693kP08
+vqGsv9HX39Y+gX09YOkv0BfT34Eff026V/Q1w+Rfof5eumP0Ne/k34KfT35
L/T14NeUbuDvlG5ZbP2g0g38o9IN/KbSDfyp0g38rNIN/K/SDfyy0g38tdIN
/LjSDf076fYjpfOjNIsNP0u6uWUvGRWUhD7aqmV53nb4oOGfmK//Z2xql7iY
98zX795zNaDYl7fM10/+sKnHJjcjTrplzbop6GjoO+brS/hsuek98CPz9f07
JBXwamaMk3QLCvv0e84kNn7xI2Px7Q03G3HSbeHGLkt9zgSjPmLj/ddNEu8E
M18/bK7rp+JTQ5ivz9L4k8i3J5j5+u7rnq/S/uiGvn5L9Zg31U58ZL7eN7Xo
zM4lP3Ff3+TH6z2lgpmvH7/tzOUZW/FzTSJdrizF977EuC7eZCsR+iUmmPn6
Z723tBmfFe8HrGLLslIPTCVCmK+vU6Nenb4O7N5DuHR4+7F/Te7rP7cZVP1z
GiNOup1wH+1/dW2wipNu7okvukRODoY6Fu2hd8bbMfsxX9e6FD3bbMInjJu0
oOLFd6dkMD6XdAvo/nFR1yIhmC8aazVjfctgXBdP1/ZLLl7aiCsOP+uJ0iI/
5ltF0xZfRvr8NMZDunX9tXvyPn/8XskiaNu4c53uBKNv1dYsfzGgW6oRJ90C
JhZ66pIvBH2x9r7xVw/PCiFQx6K9KbUucGZlzNe1efEda98sg3GT9nDDwp8f
8htx0i12lvnN2DQsX0S8uHfuy6dgrC+uHHZYuHSfESfdmjdJ9PjihPlWMbbV
qwH7gj6pOOl2w9Fhdtefn1Afsbru8qNX1hj+l3SbFeT7MzjFiJNuTXvWHNkm
E/f1D3M0DNmZgHUsmsjfc8ajj8x3az92rKhQ9BbGTZrryZoH1+wz4qTb1LW3
V2zxYPliZpu3yyfbf2K+PufypN1nsgUxX3855mi+HgM/MF+fLf7UsNZljHz1
npXaMM2uIZ9QH9F1YGKx3j8Nn6t0qzZv16ClRlz9O8oLcyY1GM98sXYrjU/7
9R2wjkWrtb/MCSd75rs1t5ePQ8pU+QRxk7a2Suaya3zfM1+vRZXftrlaIPP1
hybfm7ivPMZ18a7CysVHnI046Wa6cSz+aDjmW0WfZP8HD/Z8UHH17yiDN1eZ
kYHpIzJMDbl3LDCY+fo12fOtqzctmPn6rS1m33YpxXyxVqXwLZfwap+Yr/e9
2PN1qVkfmK8v7dR1XYXBgczXV1k/pdCEkoHM189dlVA6xp7lC8wn3bA+6Xbo
P8djFTh+0m0bfF/SjfRBX096oq8H/ZVfgN9L+YWXtr+v8gswH5RfgPmjxgvz
TfkFmJ/KL8B8Vn6hpu38V34B1ovyC7C+lF+wXY+Gr7ddv4avL2q73pVusD8o
3W7a7idKN9h/lG6wXyndYH9TusF+qHSD/VPpBvut0g32Z6VbI9v93NBN7v/o
69fI8wJ9/U15vqCv/0eeR+jrneX5xXy9PO/Q13+X5yP6+iR5njJfL89f9PUL
5XmNvj5Qnu/o66kfQF8fKPsH9PWrZb+Bvp76E/T13W37GaUb9D/Gf8/Btl9S
ukF/pXSDfkzpBv2b0g36PaUb9IdKN+gnlW7Qfxr3b7b9qtKN+lv09d1kP4y+
vr7sn9HXU7+Nvv6R7M/R11M/j74+jez/0dePlX4Bfb279Bfo6/dJP4K+fpP0
L+jrO0u/g74+s/RH6OvJT6GvJ/+Fvh78mtIN/J3S7YOtH1S6gX9UuoHfVLqB
P1W6gZ9VuoH/VboNsfXLSjfw10o38ONKN/Tv6t153ocldlbDR5Nuc9ZcP9Df
Ff21VWuV99nPxq3eQh2Ldqlz6Wiv0ADm64dYmr+wv4hxk9Zhi0Offo+MOOn2
xjW5/LxMgczXl105LXxVZYzrImFXxkU5Oxpx0u3Oraht38djvlW8zj7/8KEN
Rpx0W/9Re3LtZCDqI7qGpzfXvhnIfH3TFz0exdR6z3z9s3Up+dvOfsd8/VW9
f8kdX7CORRurudWu/S2A+frn10KT+gRj3KT1dnAsvtISwHy9OBOR7luuQObr
U8/dbfPDGeO62HDCcf+heYHM13f/+j50gx/mW0Uv72IhH6MCma/v5tRkV3Lp
t8zXj7/34tCDrm+Zr9f2haRM9XnHfP2AivVurnhn5JNunb+vbdnuWyDUsWjd
hqVU69M1EPJ1raZXx0yf7DFu0qZ57Lbf+K846XbmXJAYWIXli0u1uieOaM3q
iwXptT1Thhtx0m3D87uXnnlhvlUMHtLxn/MPjTjplnB+dumqVZg+ovXiH1cc
rr1F36pFtZnXLvW1EVf35PH98mrz3qIv1pp8XTxncz2sY9F6nTeZ+yUGQr6u
vT3nsbeehnGTtnneWVPDxUacdKvXJ3dDvS3LFwWm/M5WJjurL1rEpU2oHBig
4qTb8EYD435cD8Dxi3exnyaUu2/ESbe0bytnuPs2EPURqyY0X1ygA80rw9db
Px8vUy77WxVXfMiZabX3pwSquPL1hXOnTA0OhDoW7XL2ftPnXsZ8XWtu3lU1
cTXGTVqvegfz/nY34qTb/cV9mkfWZvkiKHr1hM65WX0RUiJirUNKAPP15be0
XNMoIQDHL8JORNxbm8eoo/4dZXT1kKKz3qI+IrJW6EFHX9LN8PUFUkeNzr/I
8L/q3y/4B/7u5sl8sbZqzNzm0dMCoY5Fy5++5eFrQ5jv1hzmX3rftj3z6dq1
RatytHAw4qTb4tFncvY/9Zr5+jqZP14Pympivj7EKarh5ZtGXP33kdzuPv2w
DetYxeSSGQPcnweoOOkWdy5fqdjV+L2Sxe8uxYeV937LfP344gfT3HAPZL4+
qtUC/Xl79NFWbcb5Zs87Nwhkvv7spMFfLPmY79bCC2dM1S++Zr7+WpkuSdnS
PWC+vrO3z5UvdZs3g3yB+aQb1ifdzv3neKwCx0+6xcL3VeeC1Ad9PemJvj7W
Vn/lF+D3Un5hn+3vq/wCzAflF2D+qPHCfFN+Aean8gswn5VfgPmv/AKsF4Mn
t11fyi/YrkfD19uuX8PX17Nd70o32B+UbhVt9xNDN9v9R+kG+5XSDfY3pRvs
h0o32D+Vbn62+63h6233Z6VbNdv9XOlG+z/6+t3yvEBfT+cL+vr38jxCXz9C
nl/o653keYe+vqg8H9HX03mKvn6DPH/R17+X5zX6+n7yfEdf7yT7AfT1+WX/
gL4+TPYb6OupP0Ffn2TbzyjdoP9Ruq2x7ZeUbtBfKd2gHzM4fNv+TekG/Z7S
DfpDpRv0k0o36D+Vbu62/arSjfpb9PUTZD+Mvr6n7J/R1/eQ/Tb6+m6yP0df
v1H28+jrf8v+H319E+kX0Nf3k/4Cff0T6UfQ14+U/gV9/U3pd9DXv5D+CH19
a+mn0NeT/0Jf72Xr15Ru4O+Ubs9t/aDSDfyj0g38ptIN/KnSDfys0g38r9Lt
vK1fVrqBv1a6gR9XuqF/J92O9JvWoWIZw8+Sbudqdg79kpn5Yq2cyXl/QnAA
1LFocytF3Sxx8g3z9Wl97V4OKGZivv6V04i1MzY/Zb5+wKRa51Z/eor54uTL
1b1nrX/OfP1Sh56ZB298wXz94sWr7eMOvWS+vsfAAG893hgP6VZo9QTrqq6v
mK8ftWp/v7SrXzNfv2jMPM/fxQKZry9bKmh0kwzMF2tpQhZu+fw5gPl6czZr
wReeb5ivH+FWuWLW8q+Zr189JOZwdvMr5utfj3v7pv7vV8zX3y0+/VCWoljn
z3maMZNfzfavma8/nbgjS8etmG8Va4IPBMf/fs18vdvFN7VeTnrDfH2PbKfc
y4e9Yb4+qe2T3GssASquOIeeaZPdbxtx0u1Jlivp828PgDoWbdhAtzLzZmK+
rsVkvPOxZF+Mm7QQy9iIijWNOOn2LkePJHNWli/Wrgwd1CXpDdYXRxtbWhZP
NeKkW6Ydpcs52bPxi7houxUBdY24+jtQzl/TZXDH75UsRga2CE5dG4C+VXtR
xdvj6HwjTrrVrfirjqjPfLHmenJOmZeRb6CORfNPij4Ytf8N5Oua3/fhdm9H
YvzP/rbsmP2w1kacdIsc1DOsghPLF/fT7HPw78Hqi/iUsls/TTfipFsa9z6/
I89hvlX0r7u1S8fh3Nc/yuFT/e07po/oFDkisfC/fC7pdvRNWu1a0BsVJ90a
us9N7lfdiJNuvdf3THfD/TXUsWi1ho1olX3RK+brewZWvFr7gj/z9W8OeD+y
z2nESbdBh8JKz/EyYb5I875c5Re5MK6LEk4vjle48pL5et8db9t8LYSfaxWj
S5u89QnG91J/5y57r9lu4UwfkbzrWqbO2Zlv1XosvpyxusMbFSfdJpRO1QLW
vlJx0i2hcXzSxsUmqGPRVgb2qdOs+gvm61MbBy+3O/6Y+fq+t265+qR5wHz9
ojWHi589d5f5+nrjwxeMH3Cb+frx8w5FJI55xHz9EP1qcON5/jh+4VunS8DN
hsb3Vf8djM+XehU4FID6iMDItRd6ZGC+Vbuc5tLcJeUDmK+v1M+v/afc6Met
ml54ZLEyZU38v5t3cMWz56YnzNe3+Xy84YH0d5ivL713bX6XBefYu/x/x3WB
ddR/j/E/P9cqcJykTxn4XqQP6YD+nXRD/17ZVmflC+B3Ub4AfkflC+B3V74A
5okaL8wr5QtgHipfAPNW+QJP23mufAGsC+ULZtquI+ULbNed4d9t16nh35/Y
rmulG+wDSrejtvuG0g32GaUb7EtKN9jHlG6w7yndYJ80/j247b6qdIN9WOlW
z3bfVrrRPo/+3UWeC+y/jyfPEfTvA+S5g/49nTyn0L8nyHMN/ftDeQ6if4+Q
5yb69+LynEX/flGey+xdXp7j6N/7yHMf/Xs92Segf38s+wr079SHoH/3sO1b
lG7Q5yjd0tv2RUo36KOUbtB3GX8vwLZPU7pBX6d0gz5Q6eZh2zcq3aDPVLpl
tu1LlW7Ux6J/d5V9L/r3/rJPRv++TvbV6N+Pyj4c/Xsj2bejf38g+3z076+k
L0D/vkH6CPTv7tJ3oH+PkD4F/Xt66WvQv5eXPgj9+wrpm9C/k89C/57P1pcZ
9x62Pk7pNt/W9yndwCcq3cBXKt3AhyrdwLcq3cDnKt3m2fpipRv4aKUb+G6l
G/l036Qn83Inpr3R/n7FwnPa/NRyDWg4z7Nokoo38+y9fc75H9rDMTnrle6e
qOKqf/MZ53ZrW6Lo9H/1v6j5/OjVDXG2tpFPOldp2ztP8d8JKl5TLC86t2yM
5jxow3H/m0ac9P9c4YVzVl8j3iZ+kuOvMhHaw+yzzvyzIAHq69rmocmrBuwx
4m4fjkxL+fVJO7P+kc+XDZhv0g723DfM8sWI/9X5sda6aE7HvnFGnH7HFYdL
eHkNTxRt/+/7vlbf90bJ9RXszyWK1NeJbV1b2MlxJmlv+yxJF74kEb5XsvZr
c9qaq3oYOjf8v/GcEcPimnmeXm3UUfM2S/amXWYa8UZnDlz+tTZO675j/cxO
LVBnkzhUJKH8lWQj/nc+vBFOozpfulIrSdWh38U/b5oxD4YZ9fv9n25RWp0a
+XtOOI71dTFuddjgzhOM8f8dz2fxuWWjwIcHjPr0O7bNvGGo006j/t/xhGn9
NnbdcyExEfS3iBvm0JU5thn1ezRqeSnl3Dfx5FNiocJ+OP4/+1g5nw+uOYz4
3zrvtaXJ9ftmdE7CeSiW5/BO933Av/QPiX43Z0ysSFcyOP2goVjfpDnuHjlv
924jXuP/4re0Ed1KXroRmQQ6xwvfU+XPTAk0vleHv+tL+LQos+hAO0MHmlel
Oy4dmaPyT5wnosViX5979f7UGdquXJPCyVpHuU4zNhg18/xg9fdkyV+ov1Nv
q3+y1uLVhXsjgoy449/xi73DXKuOnPhT1af5FnTtTBd/F6N+c6hP+fX/6qYV
mxB4OdtiI9/pf4yH5ufNkISGeef/xN9LFNjZ50MVV2M86t4m3r1W/nNGfYpX
lH9vl/K7/50nWr/Sv7zWl1R/n1erA/kwf8TKsyP3r1rwE9ZdmCj+5N1dvxnG
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
+Vc8u7E+hnEyLz2uForMGcs4GZe1Hgsm3rYyTiayhLlxdEwM52RMBzJMPoz1
dc3ON2LOoJwxjJPZ9fpnwJB30YyTabMywGGWZzTjZFb9mh7VeFQ042RqFPnx
+lbnaMbJ7H3Qp2yZATGMkzm4PtOebi5xjJOp+P32rYWxcYyTyfGiaNyJjtGM
k7kzvtPy4jGxjJOZn2W7XbpBsYyT2fZ88b1W/aMZJzMxtLQeOCqacTJfjnp+
bJZgZZxMo/rbfB/ssjJO5kv3ZbVHb49mnEyq25x+s05FM06m46aWM4vltTJO
xmXviLiElzGMk+m8cWVOjx/RjJOZ/nrW4dK5Yhgn82DRJufNo2IYJ9Oou7//
wZpsHop3e3PlHj4whnEyK8ZsbbFyJtY3ae2vbcpWLksM42SyzzK7+MejzvHi
qdeydOanMYyTeet2+ENsASvjZPJPzZrn+JdoxsmM7T567UgHK+Nk5lQcvzwy
VxzjZOrsvNnmcaKVcTJrvQa873kljnEyxR8nt7kaHc04mWNxvcO3L4xlnAzV
R06muUeDc3GhVsbJ4Hhofv6zLLDrqbhoxsn88rphPZY9hnEyaZzPpJ1218o4
mdrZji94NdfKOJkFG0ynWwkr42QoHzmZuLfp/YdUi2GczKsjQ+J6ucUwTibT
50zTupeyMk6mdaeFm7OlszJOJmt80xPFbsQwTobykZNJSb/mwaNFMYyT2aC3
Hpx4GfXRtafjvc+0PBDDOBmXhpl9fTbEME7mS66WGdOMjGGcDOUjJ1O+d6Oe
W+JjGCfjU3jx/Cr/mp+0XtIsHXL7WTccj0nT7Ffs/NgohnEya+YVGJbfMYZx
MpSPnMyXyp5fxsywMk6mnufGC1OfWhknU6Dril6vq8QwTuaDW5/BH9PEME6m
abaebSqnWhkn02T+qktd6lgZJ1P415foVhXjGCezz7r1S8NesYyTyflPz2G3
a+J4zjWh8SAnU3Oiy6kSmayMk4nq9Ch1jxnng0n4JnzauaQa01+0XOzpZPnX
eidOZn6aJl4LusQwTobykZPpvNpx/9RDMYyT8Q8a67FoKZufwt6+/JbTvdn8
FBueVxx6NE8M42S6FB3ec8DWGMbJUD5yMnte3595tFEM42QGd6k8z1QihnEy
4asbve14iq1HEb1txqRBE2IYJ9Piuk+rK1nYelf5yMl8adJr815TNONkTh7x
Ljp0XTTjZLrvnV7MtS7b30SdCteevShqZZxMLzHqXaPxVsbJiN2e9wZki2Wc
zOPSNwJrzYpmnEy32DqPYsZEM07mrGv4hBIhVsbJUH3kZI72X1C1+oBYxsng
eGjddflVuHntFtGMk8n/ZNg7j72xjJMJd82/sLN9HONk3AcNKtF+Cs6HZC2w
Z9pSx9pbGSfjc6r6oc3Nohkn8yld33mLRAzjZB4GurTwyIe/r0k0b3wpqE8j
9vuK1532hi1vEc04Gdc27+qUD4hmnMyn5jciI/bj+tLFy7dzJvvPjGaczMiO
3RJvrI9mnIxHgVWTLwyLZpxMs0nth8+rEs04mSlr7/tGFGDrVxTMPrGdsx7D
OJl5T144eURFMU6m/rnau0ZvjWKcTKWoFqWCs1sZJ1Ntdd2Pt9taGSezfrV3
sdcNoxgn82rs+/5h2aMYJ+P37HdIxjqxjJOpXC5t5WepsYyTqTB7SEqY/3fG
yWxYHxaQpXkc42QGN3lxbsYfH2H7zpusvcu4o8us4BjGyZDfQU6m1ehKngWf
f2eczLimudstCo1W9SmePduOvQfrxjBOpnTu8Qmvz0Xju63m37NI368zcL6Z
RKFvrdfPS/jOOJnKFU+7LFsWxTiZH+e1QRPcovEdWdVHTmZRhD6w7c8oxsn8
93h0Ua5BQPZN/lGMk4l+4HfoS/NoxskkbY1cXnBbFLznWrSZI7u75R8XxTiZ
uwsrxLdrGoXv/ppv7pbZPv3+xjiZWiu+Hjx/KZpxMrG13Ie3cYphnIzztkGP
D6z8zjgZH1kfOZnOnxZlbZnyjXEyPjAeWi/fx1X6OuhRDONk9u9w2+Y13Mo4
me3dO5Yde+kbchram5CBY1dGf2WczOzyFTIsm2rkV4d85GQOPOtwY12YlXEy
rc7sixo9NpZxMn03Nlm9uL9RX+3zuy57LVj1lXEyrx7sm3k1MJZxMiPOJpk7
vbEyTob8te18MNYjcjL/4/sK+r7IyXitm1HodX0r42Schr69VyEz0184mv2L
ljvL9BeoP3Ey3yZlT5cUz+aDoPmAnMz1LeOyl2kbwziZm41utPw5PZpxMpke
Vy255AWbnwLnJ3EywzINzjmrSDSuF+EL46F1Nzuvc+CgttGMkxkk6yAnM1/m
2+6fFjEX1i9xMnfk94L9RNB+gpxMRvl9kZMhnZGT0aSesL8J3N/ovaaF/N1h
vxWv/nM8Jq2hnA/IydA8RE5mjZxvVF/9vSfY/+m9xkOuC8p3hnzkZNzkekRO
pt8Zvx4t08QyTobWEXIyLeV6R07GTdZBToa+L3Iy++V+gpzMXrm/ISdD+xty
MrSvIidD+ydyMtUeXKj6okUM42RoP0dO5p48R5CTqS7PC+RkvsvzCzmZFHl+
ISezVJ6byMmUlecjcjKV5HmNnAyd18jJUJ+AnExB2Q8gJ+Ms+xPkZKg/QU5m
qOyLkJMpL/sr5GSoD0dOxkf6YuRkqsj+DTmZ5tJHICdD5whyMibZNyInc1n2
jcjJOMn6yMlUlf0qcjICxkPzdq3sY5GTqSv7ZORkKso+GTmZ6tL3ISfjOWnr
vMXNYxgnU03mIyczR/btyMmMynLEwVI7mnEyk6UvQE6GfC5yMh+Kx5ZLSY1m
nMx66dORkxkpfQpyMuSDkJN5IX0QcjJUHzmZV9J/ISezDsZD66iX9GXIyZDv
Q06GfB9yMs7yngQ5mUPSbyIn81be8yAnEyJ9KHIyA6TPRU7GRfpo5GSoPnIy
ReQ9FXIy5N+RkyF/hJxMmPTjyMl0lfcJyMm8g/HQuqN7BuRkTvj9ONvooJVx
Mo/kPQZyMtfkPSFyMnbnpnYfdzWacTLXZT5yMl3lPQxyMvHjs50yv8P5oAu6
50FOhu5RkZMZIu+jkJPpIvORk6F7KuRkXOT9GHIydA+GnAzdMyMnU3Tx+vO7
+rD9RNSR9+TIyeST93jIydD9IXIydE+InAzVR04mRt5nIidT9z/HY9LonhM5
mRzyfhU5GbpHRU6mpnynQE6mkbzvRU6G8pGTyS/vmZGT2SDfX5CTaSTvq5GT
oXsw5GTonhw5mUh5H46czDF5P4+cDN3PIydjDtfG5fGKYZwM3f8jJ0PvEcjJ
0HsEcjLZ5DsIcjK/5HsHcjKv5fsLcjJZ5PsLcjKL5LsPcjL0voOcTIp8b0JO
Jq18b0JOht65kJMZI9+zkJMpJt/XkJM5Id/XkJOZLd/1kJMpIN8HkZOpKt+R
kZMZtbT9xf5f2DzUhHzXQE4mh3zHRE7mlXzHRE6G3kmRk2kn30mRk3GU77DI
ybyX77DIycyQ77zIydyX77zIydybPuHR5SMxjJNxke/IyMmkyHdq5GQ6y3dq
5GSayHdw5GQ+y3dw5GTGy3d25GTonR05mUXyHR85mS3yHR85mZySE0BO5qHk
BJCT8ZUcAnIyNSXPgJzMRPnujJzMCslFICfTSnIUyMnskNwFcjKpPn85DeRk
iOtATiZCciDIyXSR3AhyMv6SM0FO5vrqH1PsOsUyTsZHcizIySwDHoY4GadD
5ZfXnW5mnEyJny82eCeGM05m8O8XU9OXNDNOJqlokab5Q8yMk7k64G6x8pfD
GSej9+62PtfOcMbJtHiz90j/ReGMkwm63uTMmonhjJM5VLXI8tlLwxknk1TF
/9nUhZhv0upV7TfX8Uk442QWnNiT3PVNOONkXuUY9+RoVzPjZMqecfW5nzOC
cTIOHu2/l6xhZpxMmVNdO3TbbmaczD9hpvydx5oZJzPR72KvScXNjJOp+etk
vyex7HuJzCXXJ2yMNzNOJsN7uyydy0YwTibs5oJNu+3MjJNpsNvho8kBf0dd
eL1/PPrlwgjGyVRdF9Ps2qkIxslM2znke8aSZsbJjJ5oVyz/KDPjZIZnf3ow
3/0Ixsl0X+ddZfhnHL+u7RgW0TPzdDPjZG4Pi3pU9zCbh2LNwTLNT56JYJxM
8RpZ75y+iPVN2vb9E966/jIzTmZ2w2S/DS4RjJPpcC3z7gpuEYyTsSzqfLTG
TzPjZHa8Ll7/nVcE42RGnGyY/1akmXEyGxYFzlo91Mw5GVe/weZdZsbJ3K4W
6LJplJlxMmkPWUufi4hgnMz0ubO3Zm1v5pyMrI+czLLyF7+16m/mnAyMh+an
6NMn2+GUCMbJePkXeZo7KIJxMttvDe+RdZaZcTIzHk/7lWQfwTiZfDlG3ex9
w8w4GcpHTkZU3ud3rVgk42SGz6qburdqJONkAhd26zfwi5lxMiv3FR5Z6HAE
42Tu3b6250fPCMbJUD5yMsVWfdhaMSyCcTJR3+v8SnsX9dG1rObTPR9OjmCc
zI46kU1GlItknMwT5ymWX9YIxslQPnIyvW6vvGc3OYJxMo+erEh7oB6Ox6QV
O5a7+IVUHI9Je/fCNV3b7pGMk3m0xTnAu38k42QoHzmZbaV63FgaZ2acjPv8
g95DTWbGyYRMLlglxiWScTINWu3vvPpfvzutuxKn5vqOWm9mnMyxopNynTph
ZpyMh0vFDtd64nxI1pYujPP2GWxmnMy1BbWWDRyD4znXhMaDnIzj4oXfsvw2
M06mQ5naPZ4VY/qL5103mh60jWSczPzFDtMdvCIYJ9Nqef0pQwtHMk6G8pGT
STvaISVyVATjZO4FF9hiXcPmp3h94NGtvN/Y/BRa7NwT4R/MjJP5cu1elfeL
IhgnQ/nIyTxcs73wP2cjGCeT45zXMydTBONk7lbq75xnIFuPopl3oP2NdmbG
yQwMH2hdHcbWu8pHTqZrqfP/vDkRwTgZffS8c+mc2f4mVh4/r5U2sf1NWC5W
bZ/r//VdwMmk2zT714BnbH8Wj3q2aZ45IpxxMrX9i4RdcYlgnEy7U98a5mgR
wTgZv/VVtp8fw84XVR85mUH7ykXMdzQzTgbHQ+tuxqKcLu5n2ToSi4N6bnN3
ZutIuLXInnaevZlxMmlzPJ91qEAE42QWhN38+MnbzDiZTf7zJv5yNDNOZkbG
gQ6Pa0QwTia2fuZ2H4fg/DcJn/361WEFzIyTaaBNzWofGc44Gd/Jjjdv94xg
nMzvDWG3Rv2D9XUxqt8hz9s+4YyTaXe/ya6kheGMkymSadewirUiGCezwVTt
acwbM+Nkpo+q4Ht7SjjjZJqGj+zWcAOOX9dG392xqqdmZpzM44Rpw0tMx/lv
FR7Hr5d8MjeccTLBGxf3zzoL65u0Fx/zvWtS2sw4mdmtZs05Ex7OOJkybdv5
7LoezjiZ177FC6T8qw7Nt51zwupvWBbOOJmk0M733lYzM06mV6VaZ+fWjWCc
TJ2Gr7NMyxPBOBnyO8jJnMhUO8mnQTjjZLKlPXC8TGmjPsUzeu+JzXjHzDiZ
t7czfDH96Rvh3faPX6v48n4VM+NkfPwsA3+UCmeczPGS5y2LKoUzTmbkHpfC
R7+Y8R1Z1UdOJnenQTlarzTju/b/GI8uZiyb18QlJYxxMtvaF902PzaMcTL5
OqefcnaAGd5zLVr7I2fHzZkdzjiZJft+9N3WxIzv/lrBlOnZ8keHMU4m+UDC
pBf24YyT8d9Xbu0kpo+uXe3eKaHt+XDGyRSQ9ZGTaeFw8UB87XDkIlQ+cjL9
WvTp+HJwOONk6uSqVenjGhyPSasaP7vsqOI4HpPmV3RtxtBtYYyTqZ5769Yi
98MYJ0P5yMkM/eEyrsKncMbJ1FoZNGRYaTPjZGpmuXDNpBn1KX7vd6Ydt2eH
MU7mgaXahfLjzYyTyXZhQNv5p82MkyF/bTsfjPWInMz/+L6Cvi9yMhUPmp8M
aGxmnEz88Pbpc+c3M06mzA6HczkPhqH+AvUnTsbR36PejsthOB8EzQfkZI7n
2Lmt7O5wxsm4l+j0e3NrNj9Fi6+bF1vv4niM+sjJvJ4U0ikyIQzXCxsPrbuB
JaOHpy8azjgZf1kHOZnBMt92/7SIDrB+iZMZIL8X7CeC9hPkZOj7IidDOiMn
c0zqCfubwP2N3mvod4f99n+Mx6SVlvMBORmah8jJVJbzjepTPBvs//Rek12u
C8p3hnzkZGg9IifT68PXTh/u4L6aLGgdISdTU6535GSoDnIy9H2Rkxki9xPk
ZGrL/Q05mSpyf0NOhvZV5GRo/0ROxtO5Wk0HF6yviytyP0dOZpk8R5CTSZTn
BXIyW+T5hZxMAXl+ISeTT56byMnQ+YiczDF5XiMn4yHPa+Rk/GWfgJzMIdkP
ICdD/QlyMhllf4KcTBfZFyEns0P2V8jJzJd9OHIyntIXIydD/RtyMuQjkJOh
cwQ5mVmyb0ROprTsG5GTofrIyVC/ipwMjkf5btnHIidDfTJyMtQnIyfzTfo+
5GT21Zw1xXVQOONkKB85mVGyb0dOJjYpW/mVhSMYJzNN+gLkZJpLn4uczObf
a7xWbw9nnMxV6dORkyGfgpxMqvRByMl4SB+EnAzVR06mnvRfyMngeGgdkS9j
/z0Z6fuQkzkkfR9yMnRPgpwM+U3kZJrKex7kZKZIH4qcTBrpc5GTIR+NnAzV
R05mhLynQk5moPTvyMn8lP4IORl36ceRk2kv7xOQk8Hx0LqjewbkZFocHdJv
2nhcLyZRS95jICfzXt4TIiezd2kXb6/LEYyT+SDzkZOhexjkZH58P53nYAc2
P0UXec+DnMx2eY+KnEw2eR+FnAzlIyfzSN5TIScTIe/HkJN5IO/BkJNZI++Z
kZNJX+TM3GFeEYyTmSXvyZGTeSXv8ZCToftD5GTonhA5GaqPnAzdZyIn89/j
MWl0z4mczHV5v4qcTEN5j4qcTG35ToGcDN33IidD+cjJhMp7ZuRk7sj3F+Rk
Bsv7auRk6B4MORm6J0dOZpe8D0dO5pm8n0dOpri8n0dOxs2l09IF8yMYJ9NT
3v8jJxMj3yOQk6H3CORk7st3EORkSsn3DuRkPOT7C3IyAfL9BTmZvPLdBzmZ
pvJ9BzmZNfK9CTmZHfK9CTkZeudCTsZJvmchJ5NOvq8hJzNLvq8hJ0PvesjJ
7JTvg8jJlJPvyMjJPA23ZvJrjzonayXluwZyMnPkOyZyMl3lOyZyMsXkOyly
MrvlOylyMvflOyxyMl7yHRY5mZ7ynRc5me3ynRc5mYNrOlb6Wc3MOJlR8h0Z
OZnK8p0aOZnp8p0aOZn68h0cOZmV8h0cOZmM8p0dOZlw+c6OnEwd+Y6PnExW
+Y6PnMxYyQkgJzNVcgLIydSUHAJyMm8kz4CczEj57oyczBLJRSAn00hyFMjJ
JEjuAjmZA5LTQE4mWHIdyMk4Sw4EORniRpCTIc4EOZk0w+7+Xh4czjiZoZJj
QU6mJfAwxMkcKmnfcnTZUMbJFLnmcCH7R51xMidPlz/lEqszTqbwrbE7r+7S
GSdT9nJIZPhpnXEyVcutCoo/ojNO5kufej97rNUZJ7PDHJ7pthfW17UJQdby
L1bonJO5ETVxwErMN2k73gbs2bZTZ5zMlK99y/bdrTNOxu/zju2PH+iMkxma
FOvW/qHOOJlcFcu+eVIklHEy044Mf95ahDJOZsISpxOVn+iMk+nTY+iRY4VD
GSczoNuSp81S2PcSyaKSSEwXyjiZ2dfS5OyUPZRxMnfepf/nZorOOJkSp75X
b58xlHEyc4s5tnlUK5RxMvnqHTmX2zmUcTJR/ucsy+J0xsnsyHQ/uG7WUMbJ
LM+RM/OS9qGMk2meJaXBLjccv67N6/ksbn2mUMbJbM49Ml+ufDh+qyj8rcts
u+ahjJNpd6tntEtLrG/Svq9q3uxTtVDGyUyoPaZhlXaoc7y4VTbuukeOUMbJ
tO0xt27wc51xMqZQp6kV+rJ5Ir7c+vhy2h2dcTLNBhxt2vjPfEBOZrKPj//j
DzrjZAaML9jwU6NQxsl4Dnj/xm1+KONkqpfNkbKiYCjjZKg+cjJ3o9pbOhcK
ZZwMjofm58qc5Z1aL2a/l+haImBhm9mhjJPJ+Wuj9/eKoYyT2fbh+YH2RUMZ
J2N/LfZG4/qhjJOhfORkumdO8W21KZRxMgnfNgRv2BbKOJmk5e1SOrQNZZxM
tdwV168cEso4mVkBny1PPUIZJ0P5yMn0O+WxN9AzlHEyLdrunXF3Iuqja1Vm
dKh5Zwrqo2vhm2/uH7ollHEyJ+usHT97ZyjjZCgfOZnkyEzbP/UKZZzMnjf3
ykbXxvGYNM/EJ/kK7cXxmLSGR87V9D8cyjiZjWlXjc97NZRxMpSPnMz4Us/0
CcVCGSczsHK69eNzhTJOZmWV5TeyXQplnEzB9ofHX9qG+1Wy8Gs3IHhUmM44
mfxhDnZ7N+qMk8nq2XnRiFw4H5K1A/Xrfp99XmecTKHT0z6O0XA855rQeJCT
+XHY5fv2FzrjZJpd3LavUbDOOJkP8xaY559l+ovyi19szTwqlHEyi7esepL2
UCjjZCgfOZmx+eaOvFwwlHEy3YP9DzyqzOancJ7hcLDXZjY/RbnsvZNdq4Yy
TubDzn/uXfvXfK4P+cjJDP64tMKq5qGMk8k9//uohZ1DGSfze1pMhT2j2HoU
p6ePmBOSqjNOxn7MStf7Tmy9q3zkZEJ3db5WVoQyTuZnjV5elbKz/U3sG337
vXMztr8J89Q2XgFxOuNk3gxNSPnVgu3P4nLfgvmuZsLfy6T9OR1r3ckdyjiZ
e8XWLrj2r/Gof+/cfeEOp9LsfFH1kZOJD+6673qOUMbJ4Hho3S0ve6j6gzds
HYmklIjZAwuwdSQePJ42p2WVUMbJpN++aO2luzrjZEKymFo/XaEzTiYuc+ql
lVd0xsncPz5mx553OuNk1ju5TdnzG39fk7gUkOm290mdcTLT/Q7viPXWGSez
26Fq8dQfOuNkulXfP+lVBvy9dHE/sOA1vw0642Qiz+4ovnOZzjiZBwOezujx
UWecTIusfk0qXdUZJ9PCxcMS76kzTuZiG7e2PZfj+HVtxqTOJSJO64yTWTav
e4+va1Afq2jVZv0T0xKdcTIznO59W7kS65u0pHID94Qt0hknU7j0jdkzFuiM
k9k66+uLR4fY/ix250s9ERaqM05mR/ly2+f3Z/NE7K2xefmyrzrjZLIW7DL6
kFlnnMzbdh2+TzGj/ska+R3kZFZfd+/Yu4POOJkTdd6lTRto1Kf4mKuTOn4+
qDNOptOQ3xU+XdXx3VYzz8wc1NuR6SlalWwWH9OO/V5i3IDhFQ620xknM+DB
pX2jT+j4jqzqM07GPvFo1Uk6vmv/j/HoIqlEhvVzm+uMk/n4Xr87rJnOOJn9
+2Mvdxylw3uuRavnF18oKL/OOBnrxJzW4BE6vvtrk+IH/aieXWecTPM+zc8E
C51xMp9TG0RPbon66Nph67jNu+uiPkZ95GRMkQszFyinIxfBxkPrpU1357U3
2uqMkzk9M/OcSDccj0m7tuV6/3plcTwmrdSRLu2PZtYZJ/NtXWffPCWM/OqQ
j5xMkkvOM2X/0Rkn0+38nejgTTrjZHZ8jdwUUNyoT/FA+1t2tzOx9SIK1PEu
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
diedcTKUj5zMLzvz3Xml2X4rZg4Nn52+qM44mY9Dy+d510FnnEym3MUjVzVl
60WUe5zqvCoz52RKT/zy6ZoewjiZN98v5lpTFudDstbpeo4lJX+GME5mcfrv
hV93wvGca0LjQU7m6c5xOTP8qYOcTJXDF33Hp+WczIJdroVmtGf6i4T/j67z
jsv5ex8/2YQQsre0jJCQXkmyt0T2VmZWIWTvmc3bSvaK7HFnZUZa911U932H
FlpSmT+/7/u6znFf1+f9/vN6nMe5z+tc53Ve51zP5ztzHiTX/ut9R0/G40eI
lfdf7duT9tSTeerqt319ecbZVe4hFjvKV2HrUyl3ePbEel3Z+lRuGt18FlNT
zzyZZiYF+T8UPfNksD31ZKY+96t6pbKeeTKZlV1X25rqmSdTUGlMVEBH9j4q
BWU87FuV4Z5Mw5gizz/bsPddtKeejNPz61bb/lo/yHGKtRvf4fpf6wffr143
P9QPtWH7m3LgYPaW+aW5J/Og1NYdZi3Z/qz4Re8apanEvA7V6sRqU/N0OubJ
uJ2ZllBOq2OezHRjt1UX67Lvi+ifejInGkTvzjfVM0+Gjkeco3K+n9u+hL1H
SsFDvy2FZuw9UlRj23fSNtAzT+bW818Rj/56L8TfjYw6ZXc0kT2vYrXuV5UN
TjrmybR9tfl40hcd82R62k92dv2hY56MecMplVt00jFPRvOoSe+EdjrmybSo
frLvx2wd82S2N13fLzib9q9XBhS1mhbaVcc8mfrFArq5d9YxT+aZZuG8xzE6
5sl4xpi9812qY57MpVeN6tnN0DFPptyFgamhZ+j49aov3yr+vOajY55Mgz3L
gv1G0fHnKG122DtuP6NjnsxZnS44/Rzt/8998HrfOaMq65gnk7Qsz3n8Dy3z
ZL5NvlVjRbqOeTL7K1V9blGTezLdg3+HT76lZZ7Mx5A7963qck/m+a72zesW
4Z5MrZv9tKH1uSeTC/cd6snMCB0yufx2LfNkRnp01Nn/Oddh/xgf+2TIWaui
3JNJGLY8drVOR7mtalzY7GXjj7P5VF6WHXMi58/vUk9m3v3pxzyCtMyTaXsy
OfX3ax3lyKJ/6smsvfyiQYOTOsq1/2M8eiVsR9iNA+e1zJN5/fj1wdUvtMyT
sW7yqk7JeTrCczNUWRv9vPPjtMyTuRnuP66em45yf5VFiy4rR3homSfT+EzF
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
XxY0eFyV8twMlbGTZ+nBj7TMk4mtv02z0ELHPJngA5ZBudla5slge+rJaIOP
hqgr6pgn86hHypfSNSln16tqb9/bsWsWnR+9aunX3rb3GuqYJ1PC1OKBTXkd
82SwPfVkvN4b1bhjrGOezHX7TX2XmdLxRKqGLrK78qWMjnkyTwOWf3v713yi
JxM9vtu4NjV0zJPB9tSTca6WHvWriI55MmsnRM4Z/Nf6wfcrMWFMnJmpjnky
uYtSY2cUZe+Lsmv2sadu37TMk4m873LBz4h7Mv3Mft74XUTHPJkt6yJGD/yl
ZZ6M5/m60zxq0vGEOOB4qCdzbITl8h5luSfzvm89z2oV2fwrJ7rsalRQic2/
khYRFvI+Scs8mej619JemeiYJ4PtqSfTt0aTFUOKMc6u2jiwwmjT4mx9KmWq
VxrpW5SOR6/cOtV8+ZqjWubJHLN92X5bgZZ5MtieejJNzBpvm5+tZZ7MlvIB
5k8ytcyTcd3tf7mZlr2PSmeHginvnbTMk7lb5HSa3Qv2vov21JPZY7volEu8
lnkyDe75lD5wn+1vyoiFk94EX2P7mzKza/ToowlJzJP5cD37brdbbH9W7rVv
7jfgWxLzZOY2W/VtnErLPJklRw96d7upZZ5M2xI/SxY/qGWeTCj0Tz2Zgwvj
5q/crmWeTCgZD753bs9fjAzfrGWezLoidrYW1+g8f1c2tVl35tYWLfNk3oa6
rxj8mPkPKv8nOYM6/WTPq+xqrY6sEJHEPBldCfcZqlta5smY6z0s0y/T/EYq
lUaFde6pSmKezMKeC5vtP5zEPJmwNZk7dx/RMk9mWblfY5vvZOtHOb1o4PUy
NROZJ/PR5doZ+7QE5snYv70VsGqBlnkyX5fUyfvUXss8melVOj0InpLAPJnT
saH+5t8SmCczwPl6r11WzLtQGfUutyGiFtsflPdP20+o8zqBeTKFrv2temho
/5GqIw9D7NTzE5kn0+HEg+z462+ZJ1O6z9d6PdclMU9mbkWnrsZ/5RHX29C1
Q9T6JW+ZJzNm54EiwUla5smUMk7+9tWbct4/+7lxlW1tfRj3V+F9h3oyh/Yv
3bbq8BvmyawbtnhNpxGyf4zvcfZ70K++lnkyZTbu8g9rr6XcVmVV436/FGu6
3iKVyon9lpT75w3zZKzbXVqz5ewb5sn4rMw70rMu5ew5Kkvon3oyposax+1L
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
B6fbaZgnU77W0hj1gzjmyWD/1JNxyupy7UOlOObJ0PHg+hw+x/jw+a4a5smo
RjjPveKmYZ7MU5sK20f81jBPxuHjqsW72sYxT8b4cd1lU9ZrmCeD7akns37Y
jwYV5tD37oPi5dvnfvGtGubJDCrMrlVzkYZ5MkOuRKaOKNAwT6aw+vmld/to
mCeD7aknk5vQv2+rYxrmycxrl/1iiIrOj14Vvzvq3FyFzo9eFRcy5Ujbv9qj
J7Ple4SPw1/tbUl76smMWNbG/NlbDfNk4ge4rNLk0fFEqpTzjVzutKTjiVTt
Wno50n6VhnkyU80DJlTrrGGeDLannkzjRSNGV2kaxzyZF/o91jtnxjFPJmpk
+p0ithrmybQdZmKv7073q+/KmybjgxetiWOeTMdTexPLWsQxT6accZkIsznx
zJPJ7La0x6+YOObJ7F7kvLZkNzqeEAccD/VkrIt5W3rViWOezBWnjiW0ZeOY
J7PV2XFxbDs2/0q1eb/LNTTWME/meP0tt7T9NMyTwfbUk5m0efrbu3ka5smc
DXXymfWBrU/Fu0j/q3pntj4V5y9G+RYaNfNkVGZua5uM1TBPBttTT0Z3dYHp
16ca5snctzvkfPaWhnky3b3OrtF4sPdRmdRhzJe8u2rmyTQaVmlLiTXsfRft
qSczeb/Jum77NMyTaVd1yFVjH7a/Kf7dvJtXWsf2NyU+N8m78WM182SehXYZ
dCNcwzwZoziLEo/iaL4iVR8en1y+aYqGeTJ9f/1+4zNMwzyZm78m76tULY55
Mtg/9WTa7nPuO3hlHPNk6HjEva9DKWWKPd1X/9x3/bufP6mNY57MRu/Oq6r1
imeeTJOh2X1HhGqYJ3Op07iz+xzjmCeTu775+Dl1NcyTOe3c7M8oNMyTmTf/
y893wWw+lYwBlkO7VGT5Va62yhjY1YhxcJVVl8cHW5/VME8m0OHTiHZ7af96
pf2OmV42uWrmydx/H+ap/ahmnsyUta9M6m7RME9mrmvZ0+OXa5gnk6daP8Ui
Tc08mbAB3Sqn/1AzT8a+zZkV9adpmCdzP755fuBgtj8ojZxOBOf9UjNPZvqN
BbH/dKHzE6kqm2C29bCrhnkyMyLOmJwvpWaezKR0a8uwgWx/Vi68CVl8oE08
82ROFJQ4GZgdyzyZyHs3E7K2xjNPJuR9L6fmCzWE835XzaoTVDR0FOP+Krzv
UE/Gtnn9UDdtLPNkojOX29vOk/1jPLPrMv2rnhrmyVztdSl3wCwN5baqBVcc
X/Vtx+ZTWf+jrdmu8jHMk9HtcXQr7hnDPJnHSz6/ezyZcnbZP/VkZmTdyzky
VEO59n+MR68kt/g44cuoGObJlJhWY8LCETHMk/mZ1NP+aT8N4bkZqstzxr3P
qKJhnsz6p3N+hV1XM08mtUbJX/prMcyTSfZdeX7Dk1jmyTxY6f7sakws82T+
+dBrwoUgNfUQRP/UkymdfrrH6a1q6kWw8eD7YpOS/9InS808mehSNUd0CqLc
P1KVPnlQmSqNYqinoQpr2L+wXLEnzJP5Hd2i5wmXKObJPIT21JMJiDzsv6Z4
HPNkZs35Pq7a/jjmyYyfbh3e1SWCeTJ//nvxvk1nR+rJzOvsv+pCo3jmyXTs
O7+4Sc845sl8gvu14XqQ7yP1ZP7jeRV8XurJ2Na40N9ysYZ5MqbzEsv19GXz
r/iv7/9yzdoIOv/KPTL/6MkcMj5Zod7XSObJfID1QD2ZPBfTGI8/+zP1ZIYF
N+rbvjNbn0qD/DZeLkuj6PoU/VNPxnt9zLBRR2Lo+6KkkPHge5dy+GzAGPtY
5snMgX6oJ5MM7Q33zwyFvr/oybjBc5H9RPGF/YR6Mo3heakncwTmmXoyOJ9k
f1Po/oa8pirkney3oj31ZPxgPVBPpgDWIfVk2sB6w/4xnkv2f+Q1DvBeYHsX
0p56MoPhfaSeTG0Xxdi4Xxx9jxR8j6gnMwPed+rJ1IJ+qCeDz0s9mR2wn1BP
Bvc36snoYH+jnkwp2FepJ4P7J/Vk+rxpfLl3spp5MvthP6eezDr4jlBP5h18
L6gnYwTfL+rJ4PeLejL43aSeTBJ8H6knkwDfa+rJ4PeaejJ4TqCezGo4D1BP
piWcT6gnEwPnE+rJ4LmIejJBcL6inswFOIdTT+YD3IupJxMM5zfqyRSDewT1
ZObCd4R6MtPh3Eg9GU84N1JPBu8p1JPB8yr1ZIzIeHDdloFzLPVk8JxMPRk8
J1NP5g3c+6gnM/h8eqm2GWrmyWB76sm0g3M79WSs5s9Kj/fVME8mH+4F1JOZ
DPdc6slMn9Hac36mmnkyTnBPp57MZLinUE/mKNyDqCeD9yDqyWD/1JPB+xf1
ZOh48D2yhHsZ9WTmwr2PejKf4N5HPZlaUCdh/+4S3DepJ4N1HurJHId7KPVk
GsA9l3oyR+EeTT0Z7J/9u0tQp6KeDN7fqSejhvsR9WQOwn2cejJYT6CeDB2P
+Dv5UGegnoz3qp3zPF+z+VfeQx2DejIBUCeknky1vuPdnmzQME8G21NPBusw
1JM5OtTY/N0Itj4VrPNQT+YN1FGpJ3MP6lHUk8H21JPpCnUq6sncgvoY9WT0
UAejnswIqDNTT2b/yuMLXOI0zJNxgjo59WSwjkc9mRNQP6SezGSoE1JPBvun
nkww1DOpJ/O/xxOp2gZ1TurJYH2VejJNoY5KPZmqwCmoJ4P1XurJYHvqyWCd
mXoyy4G/UE/mJdSrqSczAupg1JPxgjo59WTMoR5OPZk3UJ+nnowj1OepJ7Ou
Z9OFeS01zJMZDvV/6sl4A4+gnswb4BHUk/kOHIR6MlnAO6gn4wn8hXoybsBf
qCdTAbgP9WSQ71BPJhR4E/VkngNvop4Mci7qyYwAnkU9GeRr1JMxBr5GPZkd
wPWoJ+MDfJB6MpbAkaknY+r1eebTMnHMk3kLXIN6Mh7AMaknkwwck3oyjYCT
Uk/GCzgp9WRcgcNSTyYEOCz1ZJDzUk/mF3Be6slsqTQrIM6Mzk+GKhs4MvVk
AoFTU09mFHBq6smUAQ5OPZnpwMGpJ9MJODv1ZNYCZ6eejAlwfOrJrAWOTz2Z
+eAJUE8GPQHqyXQHD4F6MoHgM1BP5hRwZ+rJ3AQvgnoye8CjoJ6MNXgX1JOx
BU+DejJTwOugnowDeCDUk7kL3gj1ZI6CZ0I9mazyV0PLOccxT6YjeCzUkzEl
Pgx6MlvrzKlVWF3DPJlA42vtrX6omSfTbcKNp01LsvuL8vtc4ri8VbHMk+k5
co5H2l9eCnoy2pw6DefsVjNPpsIg7/uBm2OZJ/P5UtuSX/7cH6kn89Lm0Lak
cdHMk0nJmPpq1+Yo5sk8zFkWrBkTxTyZqu2/t/3uGcU8mV7Op9Qei6KYJzPj
3Y0JxabFMk9mc8jguxML6HN9V22esnhej7oa5slUfdlm4/XgKObJ7Lo583Kf
d2rmyZTY7/y0QTTzf5R1ERkndoVFMU8mb2zm3dGFUcyTmZxX96WfSs08mcuH
P78NvsB8JGXg1njjO7WjmSdT+XjqlrFjo5kn09Su6T/mv2OZJzOtzPDvPpmx
zJP5MHyo8df90cyT2RdpeSE7M5p5MmcvfjWq6hTLPBnliofLrgZsHSr+/t4R
wZ1imCcTXM5s4ogdMcyTuWZ+sUdN41jmybyxaTzmQvVY5sk8nfazgVNGDPNk
Hk093OX3X+PEdaW+Wy21YolY5snszbA++HZLLPNk1vrvqdHxz72VejJtzH+2
VuzUzJNRxTfp2a24hnkyr6p+6FdYOZZ5MjvKdC5T/bCaeTLYP/Vkmm7bsLXe
MjXzZOh4cH2ejrYpblOW5Uu5frbVvADjWObJtLhsZewyQ808GfcLixu+To9l
nkzDNuOPBgxRM08G21NP5mv9Bb+aNo5lnkzzfQ+Ot+kVyzyZeyWdurxxUTNP
JqowKygzMJZ5Mqe7bIkYZKNmngy2p57M26eJ1VyHxDJP5nmn8ctrrafzo1cl
h1qbv6xL50evuvF5UpE4z1jmyez+aN1ix69Y5slge+rJ3Esd2HbyvljmyZhH
Z4wcHE3HE6nKGejY5lpeLPNkGq09azrRNZZ5MtOsLYs8iYtlngy2p55M8mJd
zYxUtt8qusfGZaYYqZknkzhux1x7TSzzZNLHun1o+tf7iO9doveCets7qpkn
E+7VuXZiLl0P31Uzi95rGhtB18N3VYTloSln/NXMkzEvWqRYyed0PCEOOB7q
yfiYHFy3c2Ys82T8bR1L3BzB5l+pa1GlaqsINv/K46JHm0cNjmWejO2nPXef
RcUyTwbbU09mz956vR7ei2GeTLtpPzLKXYxhnsyvqYWa8Ld0PH/eux+N9iT5
xjJPZkXrhkWnfIplngy2p56Mx7N1dUoYxzBPZkc387lLf0YzTyZsQ2a8149Y
5skUHTXsd3pILPNk2hm7T35ryt530Z56Mpn/tOtTe3w082T6+1TSlHgfxTyZ
l/eO32rTme1vysg2e/r3nsQ9GQvf9Bz3UWx/Vp6VP2ETF0+9nUjV6YSGCc3e
RjFPprbppgF746OYJ/Pgq0eFDovZ90X0Tz2Ze+/3z5kXqGaeDB0PvncubkYB
KQujmCejr937+KrT7D1S+qRPLqiRr2aeTJh37aKPbJj/oArJ8LRYUFLNPJk7
P2Zp3teKYp5MjHJ3ZM3RMcyTeR93Svc8P5p5MiGNV6abNIhinox/4LvippZR
zJNplhK0xDIninkyOyPOH4pYGcU8mSEtJqbuSI9knsyeNbb3dxdGMk9Ge3CM
Q9DQSObJ7Ltn1dXV5jXzZJw23sjL+B3FPJltWZevHVseyzwZ6+8b/IeFRTBP
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
EvezUOvzsf8fzPkVELRfyvILOQ3ymyRtlrD8wrqOv55ZXNOW47i09nDaaTQg
heUXerU7Ovz9kiSWX1iR4H0k9kICyy9MXdI9ZudnbTmOS/MHy389aZ/I8gvX
Gnh+TOyqrV8839ttxo666dpy8Z6mrTtNC899YPmF02qdyuwzySy/cGd5u9e9
z2q/l3g+mH7V8IBTqSy/cGD7t+KHZh9YfqHvrRfdbRrIWH5hb43rQcZFUpZf
aH9utvS2NJnlFx5eOrHiZJiU5RdUMF40vxC/zTfy4do0ll9oeE4VPn16Kssv
lE/ZOXdH3TSWXzg5u3Mv6Y9Ull+wDTH6May9lP//wjaPcqeTKSy/kLYwXWL/
J5XlF4Ys3p1vaprG8gu19z6xPW6XxvILKfY71M86prH8QqZrl513J6ex/MKN
0gi94YfTWH7h8Dmhk352GssvZIW9PvstUsLyCxe6BBncKk5l+YWit/30vvSR
sPyCt75Bv9m7JSy/8KaZ7ZqahzAO0uYX6iQvrTEvQSqW4zwJuJb15/5Vbbn4
f/2f24bZ7tWW43yYNc2n7YbV2nIcL8/j0ddK/LTlOO7+q5p9iXTXlmM/TO05
10ZmJWX5BRujLd313CXi8zi+Hw3Glanqa+vB79v28pPgO5Xa53F8T8zISb7z
W1uO47gppfR3VG1tPTiOuhFt2rmYasuxPauah16/0UXK8gsnngQeb/FQWz+O
1/WjxYMWDNHWI953o665Ji5AyvILHWrWqF33rUT01ThezS+0H/DRQ+vDxbzh
vH6dQ4y15WLcGuQT1zRdWw+OV0pZXtSvSG05jteGwNfRU1ZKWH6h9/yKbw3+
xtE0v7DgYWj9VhP/004YxwOxZqFpbhKWX+g+a467/pZUll/orT9hToaptv04
vrnTvbKtXLT1Y/8kpe9qcWGkthzHd+ofvxnps7Xl4u/PvTSBQrC2HMe35hTv
P7kx2nLxvLX1HhUFfXh+oYXpztFHPqaIz+P4mp5u9WTvKW37cXy/uU2YplZI
WX5BDd+L5he81k7tssxbW47j61Hqv8HwZRrLL3xNj1a8LUll+YXKeWflE9xS
WX7BUPdjo0YdRR/CxoXmF8IerrCIVqew/MKgbcnv7OqkiM/jfDgQOyPO0k9b
jv3WZ1agvOvPZJZf2Pe5+faXtRNZfgHHheYXpp/LbrNuV7JYLv5OY4TXnDW2
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
e4xooWL8tnlH3NoF77IZv5207LnjblYO47ca7TTLb+RnM37Dcspvp6Eeym/4
uZTfsJ2U3/B7UX6bDv1A+a079BvlN5xXlN8uhpd0c5iaw/jtNcwTym/XYJ5Q
fhsF85nym2WLL3Y6FTmM3x7Ce0H5LX1D83ExJ3MYv70tWTHbYqWK8duGXoNq
J7/IYfx2IEZ67vAoNeO3nlcPdDW3zWH85ntmi+fSQBXjt23wvlN+M7BqN6BO
XxX3b/b1hmTNUDN+OwTrCeW3JbD+UH4bDesV5beh1384GLiqGb/1d4/03Nki
l/Gblc+5S+M8VIzf6p+qbLzih5rxW97Sib0H+KsYvzWG9ZnyG67nlN8qHXd0
XNJPzfhNB/YFym+4j1B+w32H8hvus5Tf4mEfpPxWCvsm5bcjCQ9qWZ5VMX57
BVxB+e3SosYPZ2lyGL9tAd6g/PYvcAvlt8q4uEGvjXMYv/UHLqL8VgQcRfnN
sIlfizsDcxi/2fqq3Pfoqhi/vWoouW81XcX47XvLZm3ktwTGb19W7arcO1Fg
/NZj0KPrHRYLjN+Wffe19D0hMH67/OyW8eaGSsZv+RVXZrcvFBi/9dny8HOK
WmD8VnLS1OBTtMD47dS+SUqrVUrGbweN/RsZNVIyfjNwrCrOyxMYv918k7K1
w3Ml4zevTaa7VuooGb+NtpBuGrxWyfjtnw7dr7q3UzJ+s4ywnfomWsn4bY30
y7eEuUrGb80Slk7dvkvJ+G3+nyLJ66NKxm8TFle4q64pGb9dbNhp5+N/BcZv
kxaMj8wtEBi/Pcge8VBnr5Lx23SnqfvbuSkZvxX1WdO32QYl47cbK+esU1QJ
jN+GjEnM3eOoZPzW9u5l7362SsZv7+02/nikp2T8ZpLQ7Uib1wLjt4J6Vfd2
PBQYv1lYXqjV217J86eDfTy8QgXGb9MPeU44dk1g/Fa/yah551QC47fgnpHx
PdoLjN86z6t1X3ePwPht4dTZVlFDBMZvw2rXbntyuMD4zTT6zalm3QTGb4uP
5ecFbhMYv+W3GlQY20lg/GYUuHBcXDuB8dvkI21rWbQQGL/dWF1vXa6PwPjt
wfAo/wQjgfFbhtPlEslSgfHb8Mq5xglXBMZvWA/lt3Ot3v/YO0hg/NazeHrI
0CYC47fFDsLqHj0Fxm/mXu1HjDURGL9hOeU3rIfyG34u5bfz0E7Kb/i9KL9h
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
Tm09OI57W9SefCZS2/84XrYZvj8m1fmN+444Lv8YjpoX37mU3W8y9eC7oI9/
1038XPFejwg9k5oTtd9XPOff48jN1WnlYv3Yn2bnPVWyNmViOY7jMZv3Y/pF
ascX63nUp/+Oej+0/YDjGDTObH3thdr6xf83WWfl2XOKtp/x+aHDLX8Ly7X1
4DiuX1mjvrRA2x7sz45B9/uV99OW43jdswp9qLtRW494P/VM67kDJmg/l55n
iOX4fOKi85q2N7TfF9/H+Yckg05vLNWOC4w7ngOGn4vPW575ubxTTW05jvvy
JY5+dzdq68fyZodfRXZZWuo86f9zPiF+Ls4TY/3BcxddLXWeAHwu3scH555h
OdazrccmQ1moth6cJ3pwHho+j/Oh0ES6qnOG9nkc9w96Rg9sU0vE53F8dzWJ
WO9+RPu8+LvZ5EcDBs3XPi/mU+AcOSzHcUyN03twzEhbD47LPTjXUfxe0P83
ZIHNVQYl4vPY/x/c00NdzmrLsZ/TS7f3Ufx9j/7Xj/8+wnrOzn+XtqSkQKwf
+9nkwfCCkKBi8Xns5za5o7ynGf6nHvy/nrBnTjkx2v7Efl42L+XRiSbF4vhi
P7tO8jr+f99rLMf6iw/km09bpK1HPC8RzpnEcnyPrjRuY9Iys0isR7zXdUxl
ZO/1JWI7sbxhs5v3+3bVfi/s/0Wm3mPLHIrEcmzn7AVdPbO6a/tf/L/Lwf3W
PbfRfi8c3/q1dO1/ftS2B+sPGXN79pgL2vbj+B4dalk84rC2HMcRz6sU3wsY
r863lxU/tNa2U7wHzW73qKSVhWI9OO6To77NnqWv7WccX5fsqmktrxaK9WD5
rPubdA/FFojlOI44TzwgbsJxj7wRPP3UaG394v1Tsacjs/dp6xf5BNqJ9Wjv
9ct8ZRBSLJbjfFhuVBi6Zam2H7Ae7xYL+7+NLRTLxfsN61SoMyq19eO4B9fy
rx99Vttv+PxCGHesR/y/b/I8lhuT+SP6T5gn+Lni73mgnViO86EPtBM/F+u5
D/2A5TgflkE/iP0P88GK9DM+3xbeU6wH5wOOFz6P5SPg/YV7psTxbQ7rM34u
nT8jIH7E8WoL8xbLsR4fmIdYj/g7f5jP+DzOh1kb5lpeeqedDzjuevB+YTmO
YzC8X1gPjju+p/i8+LtNWB/weRyXy7Ce4PM4LgNgvcJy7OdCWK/E7wvjshTW
PSzH+YDn5WI99PxSfF7c72AdBl8n9nMSrPNYLnokWOexHuzna7BfYDk91xTr
Ef3baOX3VstKxPkg3q8NPID1YP8f+dH7RKfh4jnGYv+XwD6I9WA5cgiWY/97
ABdhObYnCfgEPxfHcSfsv/i52M+JsF9jOdY/dNTNXXcjtP2A41sA+z6Wi7/j
Ba4Q3wsY31TgTCwXf9cEfIj14Pgih+Dz4jnDECeK4wj11wM+wXKcD0bAP7+J
V0Eew/rx+eVwLutZvHcD5slK4DF8Xvy/ToinsH6cJ3G9Rvp2X1Im1iP+Tri+
1KzrIm25eL79vS3dDnzS1o/1YFyA9eP8QY7FesQ4CHgY68HnP0OcgvXgfGgJ
vI3Pi/mRQ45NUi5py3HcB0E8hZ+L82Qj8DzWj88XtVEs/PRH2/84TzBeEPsZ
xnEaxClYjvMkDeIRbA/W8xLiR6xfvL8Y4qBz5B4K14JLaYf+1X4ujns3iKcq
yD0m/YbdDWzcrkwsF+9nh7gM6xH/XxXiOywX/89x8bmQ1aPLxXrE/2eBOPEs
8VoYb+LzOL7eELfi82IcBPEvPo/jkgbxMj4v3pcH8bj4vaD/b0L8juXi72cg
Hsd6sP/RD2C5eC85+AGsB/vZEjwDjgv2sxN4DHxePH8PfAg+j/02AvwJPo/9
1i0rPrbFZ+24Y7+hn8Hnsd+GgOfB50XfC14In8d+Q48kzivotxzwTvg89sMK
8FT4PPbDLvBaWI7zBL0ZluP3Qs+G5eL/84KXw3Icl1t9ig89ma6tH9tznng/
nM+Hz12VW/sWMh9omrTwtM7JAuYDcy1UffM0GuYDB95J9jJx1TAfKHl05OS8
x3nMB+L5w9QHJgb2vmZlXMB8oK15UdpzzzzmA2OCLpo6tC5kPrBxe4POsRPy
mA80CtwVt/lNPvOBP+u5jYlZncd84PADA1e3MMlnPrDKZ92kNdfzmA/03L/D
cG5RHvOBDfatbzH4hIb5QKNbPQaOdNcwH9i5xZMrv//kMR+I5yRTHzgsoZ9s
3EEN84EfklXDBmRrmA8clF2580QXDfOBjZfXb3jlax7zgUaHXF9ImhYwH3is
zp3Ft28UMB/4wjp3+J38POYDu+g9znl4OJ/5wJtj735JfJjPfCCe20x94EzX
mBmTB2qYD9T9ortibOt85gPv+gqDhKn5zAdW6IS/erNFw3xg5sfpuc/WapgP
xPOfqQ/c+fhc5MZrGuYDJx1/+ilepmE+cNuWwsi+QzXMBwZbDWk7cI6G+cCd
kgbvAyPzmQ80G719fFonDfOBPd/NqPexcT7zgYb/eM2K66ZhPjC6vLRex6I8
5gMdquL7bXbTMB+Ykrlg7pZgDfOBM++5yfcma5gPnHfRa8ywmhrmAzs+cwz6
9o+G+cBTafGrLzlqmA/s5FqRc9haw3xgzk7H9OHXNcwHPusW7GZ5Po/5wJkD
B/fR/Z7HfKBr7Hn3h3r5zAfi+djUB7Yd+L2kp0bDfGAfv1NDD+/LZz5wDJwr
S33gssFq/YwD+cwH+uos8rFsUMB8YLT+3GURIwqYD8TzrqkPHFXZbIDdX06i
PhDP0aU+8KRdluccHw3zgXi+LvWBEW4jwoMf5zEfmPoht/EIrzzmA+eahS29
MyuP+cBlu+MvqM00zAfaw7nE1Ac+me8d16xhHvOBeE449YE91vd7nNn2F/OB
dSMTen48mM98YKjLpbKC5QXMB94etaI4RPqd+UCrtTMqslN+Mh+48LpPlYc0
j/nAGvV9DSKmapgPtL18d/sw5U/mA/ucijo3oW8e84FzB/daFHMwj/lAazi3
nPrAATf3mska5zEfWHY4N7TJkV/MB672H+vTeOEv5gMzrHRPXvb9yXzgLpsT
v8YOyWM+sPv271G37+UxH3hq8fuhhl1+Mh+40Cky/dPLn8wHakYNjB63VcN8
IJ5/Tn1gX7fcuOVnfjAf2L/sg1OvlT+YD1zqUiJd36mA+UDf/U47t07+wXzg
qOMPdgWFfWc+EOcJ9YGSY2WTK+flMx848rybad6JH8wHOkM7qQ98snL7a9Pa
GuYDn7yZ1qP9Kw3zgcW7n01f5/yT+UCPsCkW4wf/Yj5wrYmbbLpHHvOBWTDu
1AduJM9j+QYyf3Acw2GeUB9YBO2kPtAN2kl94DPoB+oDn0E/UB9I+xmfx/eU
+kApjBf1gVV6/3t/qQ+8COsz9YE+MH+oDzwN85b6wCUwD6kPxPlMfaDBsV8N
jmzTMB+I7xf1gYvg/aI+0AbeU+oDK2F9oD7QBdYT6gMdYb2iPhDXK+oDbWDd
oz6wA6xj1AfiefjUB7aHdZj6QFznqQ/cDus89YHdYb+gPhDPyac+cFDz+i5N
XmuYD7QHHqA+MLV36PmRjfOYD1wK+yD1gcgh1AdaAxdRH9gS+IT6QH/Yf6kP
TIH9mvrA9XlndRTn8pgPxH2f+kDkCuoDkTOpDwwAPqQ+8BRwCPWB7yFOpD4Q
7xOhPnAk8A/1gXjOP/WB6XDOP/WByGPUB7pBPEV94E+b8E7X//Yb9YEh2VVn
gs3ymQ8Mv7E86MiGfOYDt0FcQH0gciz1gcjD1AdinEJ9IPI29YGDRmw62KB2
PvOB9yCeoj6wA/A89YH7tl+ukoVpmA+cBfEC9YEGEKdQH4jxCPWBGD9SH9gD
4iDqAwOCh96d/FXDfGBjiKeoD7zcbOvGTl3zmQ/cC3EZ9YEY31EfmNfi9I5R
qzXMB2KcSH0g3rNAfWAlxK3UB+pB/Et9IMbL1AfaQDxOfeC/EL9TH1gB8Tj1
gcbgB6gPPAF+gPpAM/AM1AeOAI9BfSD6EOoDjcGfUB8Yv35z8IXtGuYDR4Kf
oT7QEzwP9YHfwQtRH9gQPBL1gabgnagPvA+eivrAbuC1qA9MBW9GfaAreDbq
A9Xg5agP9Bsw8oHBgQLmA48T7yeeP6w41OGJk4r5wMrmCWbvlDnMB7pKTl+c
vCWH+UDDm+2/b9qYw3ygQefxegYROcwH4n0W1AfWa1vPrmm4ivnAVIOF7y6N
VjEfmGQcdGaIlYr5wLQ752t2fK3iPrCb7P69JirmAzO3um1oN1DNfOCKYzN+
1m2lYj6w8x5N/8fX1cwHztZPiGoUr2Y+sPb3wnuGgSrmA60Ki3cNiFMzH9hg
wZ3Xy6zUzAfivRvUB0pv6fltPqxmPrCz17Iz1o5q5gM1VzqNP+Key3xgRFpL
+4+71MwH2gz0/JAxXsV8oCTN/Yt8jIr5wNN/og52LVAzH/i82+OV7faqmA8c
v6dpt8B0FfOBeA8I9YFjx3z7ZNsul/lA2aYxk6Z9VTEf2H/AtMM1HdXMB7YI
yzjcIVvNfKCifc+Z31+pmQ/E+0SoD5xgVBy8r04u84Ft0z8rgo6pmQ+8VN7G
19sil/nAvrXanJL2zWU+cE1She1ypYr5QMXSJp00I3OZD7yt39FzwBcV84GP
g7qHTJufy3zggttvbV7eUDMfaPHOa38361zmA1/KzQ7lh6uZDwxx3KaQ2quZ
Dzz5aHyjHb3UzAd2u2Kx2+uNmvnA1+FHm/1zS8184MkpjV+1vKdiPvBFx8lu
DaepmQ+8MWbP4JNz1MwHfj1XufPsAzXzgdNypuXvzFYxH4j3rVAf+FQjWbtG
X8V84Mdt91/syMthPnAI3FNAfWBu/+kZH66omA885pqid9ZXxXzgz90rNV8L
cpgPxPtTqA9ctcVw5JRbKuYDC+BeBuoDH4c2SXOwVDMfeADua6A+cJyOseuh
6WrmA48XfLIrS8lhPtBc9/isDt3VzAeuDLC6ELcsh/lAvOeC+sA/w75ctnyr
Yj6wH9w7Q32g1d74Syt0VMwHDlsT+Hb3nhzmA/Ua7W7z+HMO84GPTK92jtib
zXzgsXXZ9vtCcpgPjGw702/OChXzgaNf2JT5SVXMB16UG17x7JLDfGBx+sWA
0HgV84ExfhanXxSomA+8AvfgUB8Y6p+Qm1OSzXxgI0+dZbemqpgPHHrx1sJ1
a3OYDzx7PridbaMc5gMHnn/j0OtPDvOBv8+WLEkyzWE+8KmjOmDOlBzmA//8
szVuhpDDfODh/P4LzrjnMB+I9+lQHxgU3a3obI0c5gNzdujoVfybzXzg0KcH
1e41VMwHdtO78zj5STbzgS//6EbErc1mPhDnCfWBS7yMi5/4qZgPtHo+usbc
69nMB6qgndQHqh4HPSz8y13UB2YVPJDP+5HDfKDTtoRyv9hs5gOXNKuz5Kgk
m/nAaa3yZus0z2E+MBLGnfpAP/I8lg8j8wfHEecJ9YHYTuoDF0M7qQ/EfqA+
MBP6gfrA9qSf8flz8J5SH7gMxov6QC94f6kP/AXrM/WBOH+oD7SDeUt9IM5D
6gM3wnymPnBhnGvsn4k5zAfi+0V9YI0F/3u/qA8shfeU+kAzWB+oDwyB9YT6
QFyvqA+8BusV9YG47lEfiPd5UR+I9ytRHxgB6zD1gbjOUx9YD9Z56gPbw35B
fSDuR9QHrul6YU/50hzmAz8BD1AfeO1zysRF31XMB66AfZD6wAHAIdQHngAu
oj7wOfAJ9YG4/1IfGAH7NfWBK/oVdp8UmcN84FjY99nvA4ErqA9cCJxJfeAJ
4EPqAx8Ch1AfWBfiROoDkU+oD0T+oT4Q742iPrAf3BtFfWAE8Bj1gYUQT1Ef
+OFUf/2Cg2rmA73j9D6dKVcxH+hTc8O6OntUzAdiXEB94BfgWOoD3wAPUx+I
cQr1ga+At6kPDD/TzL9ptJr5QBeIp6gPRJ6nPvBKuc662OVq5gMxXqA+MBbi
FOoDMR6hPnACxI/UB8ZAHER9YEJOvu79oWrmA5UQT1Ef+P7d9lpn/85P6gM3
QlxGfeBliO+oD3RfsMtw30U184GWECdSH4j3dlEf2BriVuoDpRD/Uh84BuJl
6gPjIB6nPhDjd+oDwyEepz6wK/gB6gNl4AeoDzwGnoH6QBl4DOoDDcCHUB+I
/oT6wJPl5s5BY1TMBwaAn6E+cCV4HuoD0QtRH2gIHon6QAl4J+oDU8BTUR8o
Aa9FfSB6M+oDDcCzUR/oBl6O+sC2A1+vnVyUw3zgVeL9cD5PkLRSTKytZD6w
5aMn8V6JAvOBX717lY/bLTAfuMH+V/M2YQLzgVss+m1quUdgPhDvR6M+0OXt
UPPSZIH5wPtfIo6+fSXw3wc+HvjUyVzJfGDbWp8Mp2gE5gMDX6xK2FpTyXzg
OjvTNu+aKpkP/JUS8y2kUGA+sFGvizHGbkrmA0MNDOttG6pkPnDn1Te5ynpK
7gNP9zTePkTJfOD1z+Mf6vRVMh+I97hRH9jCoVevid2VzAf+6tE2+2upwHxg
t+QbG99FKZkPTFa6LLfyVTIfuPfSjgiDpkrmA0PCvjds/p9+w/7X7b1xR9Im
JfOBD3P0atzqomQ+sO7zvk4NKgTmA/FeOeoD2/+O/3f+ISXzgWWhQyqGeSiZ
D1wf3V7uY6NkPnDS9bmnZZuVzAduLrL03R+uZD4Q76ejPtChyGfqgu1K5gNP
HEkNTZ6pZD6wx+i7dmYXlcwH7m7dNzfilJL5QNXZuY6axkrmA3d0Cn3a4J6S
+cAasW6Fxx4JzAc2vbEia/4TJfOB0++83FW4TMl84JnwHp03XVQyHzhWnnL2
jbWS+cDIjbvDH+QLzAee9TAden2okvnAFR8P11m1Q8l8oF9WsFXYACXzgYNz
Pvk6tlYyH/hnhcbqVICS+cD86LEFVi2VzAcOVm8ePtBNyXyg6fwdE+JdlMwH
4v191Af6rDCq71MiMB842v9a0pAqgfnAl3DvFfWBsXprMmJ7K5kP1JW1KHhi
rmQ+MHbFtR+TjZXMB+J9fNQHhlqes3klEZgP3Av3fFEf+DWy9ECXJIH5QLz/
i/rAUps5HupKgfnAfs1WjZZHCMwHvpqasGpclsB8oOvIud+KNwvMB4bAvWnU
B2bGbr5S767AfCDeY0h9oJ7lbsNumwXmA7uO6/jl1H6B+UD3q4MXWf/9vtQH
vtf50TuwnsB8YET7dkc3ThaYD7zYPHb/iYUC84HxJ9UxIXcE5gPVCzzbRA0V
mA88qkiIunRUYD5w7MeccoN7AvOBeK8i9YHzKgs65zsLzAdGRhY8GB4gMB/Y
635x08zGAvOBlh0Gxx4xFJgPXFNf5/uqbgLzgQO8B9yU/+dzcXzND68VDlsL
zAfOb1keE+MuMB9oZt3/qfkggfnAG3A/I/WBCQd+vl3fRmA+cMio9JPz6wvM
B57b5D96U5DAfGDE99wD0pYC84Ey0+c14nQF5gNxnlAf6FFzlf+zLQLzgVH5
NmMutRCYDxwK7aQ+UK17ZnxPW4H5wOm6V30buQnMB3YyK/a/2UJgPrDOgRHG
li0F5gPNB+55ofeffhPvb4Vxpz6wKXkey3uS+YPjiPOE+kBsJ/WBdaGdzAdC
P1Af6Af9QH3gWdLP+Dy+p9QH4nhRH/gS3l/qA5/C+kx9IM4f6gNvwrylPjAK
5iH1gTifqQ9cVmNIYPEggfnAZvB+UR+I7xf1gfieUh8YBesD9YG4nlAfiOsV
9YFjYL2iPhDXPeoDF8A6Rn0g3tdJfeBRWIepD7SFdZ76wEGwzlMfWA/2C+oD
8R5P6gOXFB68Um+rwHzgWOAB6gOdTsic/jwXmA/EfZD6wBjgEOoDhwIXUR84
CfiE+kDcf6kPxP2a+kDHu3Un2OwVmA8shn2f+kC8P5T6wBnAmdQHXgA+pD4w
GziE+kBniBOpD8T7jqkPDAH+oT4Q7yGlPrAx3ENKfaAe8Bj1gV0gnqI+8LFq
5++ndkrmA93Nd7/tPVzJfODS22+OvuygZD5wF8QF1Acix1IfiDxMfaATxCnU
B04D3qY+sLtxh707ZiiZD1wH8RT1gcjz1AfGmzzYH9VKyXwgxgvUB2KcQn0g
xiPUB2L8SH3gn8f/i4OoD5y0d9ykGrWUzAdiPEV94EnJS8s8OyXzgRiXUR9o
B/Ed9YHWawtVg4OVzAcegziR+kC8B5b6wCkQt1IfiPEv9YEdIF6mPvA+xOPU
B2L8Tn3gGIjHqQ/cB36A+sBQ8APUB34Az0B9YDPwGNQHXgMfQn1ge/An1Ade
7Ote/qhCYD4wDPwM9YE/wPNQH7gevBD1gUvAI1EfiN6J+sBb4KmoD7wHXov6
wG3gzagP3AiejfpAJXg56gPvXBucokgTmA/0It4P53PRtZcrCjsJzAeei9mX
ubNCwXzgyD+vLl+7q2A+MP+i5kpkuIL5QPeIe4NuLFcwH4j37VIf6HP0adDi
utwHLul4YuW7MAXzgbbpOccvtRWYD9zTw361faSC+cDnmw79FhoKzAcO1dkR
tU+iYD5wWmHXVbN0uA+c0ay00fR6AvOBAQ3b5tQ1EpgPbDqscHFVHYH5QONJ
KYrhzQXmA891fJSn85966L3A1AeG919sNK25wHzgtZIrtb/V5z4wIrr5viED
BeYDZ7uvcb7eQmA+8Gjf0bVrNhWYDzz+SLXHrqXAfOCj9RkzzncXmA+81bos
cJWlwHzg89FhU2c15z4Q7ymmPrBG0TCnU/0F5gM9Jq481MBWYD5QT/b6wJPu
AvOBz3Ju9pnXT2A+cMG/Ib1K3AXmA/GeR+oD+5fY/Hg6SGA+UPdu9PPPDgLz
gdM+Pxq5YqjAfGD8zilP7v2nHjFPenNOG1cLgfnArJntG34cJjAfqFYejHbN
VzAfuFXnZ7O0EQLzgb8/en9d2UNgPtDE7lvikqEC84ETYqz3GzQSmA+MyYws
tqzLfeDEh/0nrGovMB/YeFGhi/9AgfnAeW/XNr5tIjAfGKrT9tx8M4H5wNKG
01L29RWYD/xnbie51y8F84GrHfqdDNQXmA9sm1bj7U8bgflAvA+a+sAl9xs4
RtXjPjCsj9uKDgbcB3rBParUB47W6+A4rJPAfGDn2FT54uYC84EJK5zHf2ws
MB+I9ztTH7gk//eVvesVzAfivbHUB65MePkwuUTBfCDeJ0t9oNyiWeJ7jYL5
wBq2yePXOymYD3wjW70sPk3BfODNRMtW9gsUzAe2gXt4qQ/sOnf/osNrFMwH
4r3Y1Af+07Ltp2m6CuYDX87otKHlcwXzgd2GpY+bVa5gPlBpNWG1ZUs584Ee
N/4kzHkoZz5wevyXg/EpCuYDk3S8yoz1uA88MctXd+NeOfOBo2tm/K7/r4L5
wFGvz2R4ZyiYD8R7uqkPHN51+OU9j+XMB3Zpn9iy7jIF84F5YWsDS9LlzAdG
bNvjPHC1nPnAug7L1nksUTAf2O6S0TYfjZz5wE1qx6E7guXMB058Y/EhqUrO
fODcnknbNA4K5gPxvm/qA5dP/9d0oIec+cCxvYTgr/3kzAfem7Dky/SvCuYD
nzUekFJhI2c+0EwtG+RqLGc+EOcJ9YGPQ7f1KcpXMB/4YOnSdjY95MwHYjup
D+xiOW6lpJ2C+UCjqR41/hxWMB8YvbjbAKNhcuYDy5tndlcslDMfGDvePzUi
Rs58II479YH0efG8BTJ/cBxxnlAfiO2kPrAM2kl9IPYD9YEm0A/UB9J+Fv0h
vKfUBz6B8aI+EN9f6gMTYX2mPvApzB/qA3HeUh94G+Yh9YE4n6kPHJU1PbbS
VcF8IL5f1Ad6w/tFfWBreE+pD+wE6wP1gUNgPaE+cBSsV9QH4npFfeBxWPeo
D8R1jPpAvP+d+kBch6kPxHWe+sDusM5THzgf9gvqA/FeeOoDTU+mRBkeUjAf
uAt4gPrAsxVP3T+fUTAfeAX2QeoDK4FDqA8MAy6iPnAZ8AnzgbD/Uh+I+zX1
gWlHr0+5PU7BfCDu+9QHIldQH1gOnEl9IPIh9YGrgUOoD/SFOJH6wE7AJ9QH
Lgb+oT4Q77WnPrAO3GtPfWBX4DHqAzGeoj7Qe0DUnW6/FcwHOq2qu2q4ncB8
oP9j0/nt2wrMB76CuID6QORY6gNLgIepD3SBOIX6wADgbeoDb7ZOPurhKjAf
iPEU9YGmwPPUB672/GHyj4HAfOBtiBeoD9wCcQr1gQ0hHqE+MA7iR+oDcyEO
oj4wxWKa70lTgfnATIinqA9UVN5fbW4jMB/4COIy6gMxvqM+UDbO/eyhAQLz
gfUgTqQ+EONN6gOfQtxKfeBQiH+pD6wJ8TL1gTEQj1MfiPE79YEYj1MfGAF+
gP2/MPgB6gPngGegPhA9BvWB58GHsP8XBn9CfeC0S9Pi/MoU/PeB4GeoD0TP
Q30geiHqA5+BR6I+EL0T9YHdwFNRH7gUvBb1gYPBm1EfiJ6N+sAR4OWoD1T4
+A9tYcR9YAnxfuI5Yy4799X7Lmc+cHf0mNgr1nLmA9+tW3rb4k8m84GKxfcv
rIrJZD7wtGnXymPFmcwHNmzp5ZChzmI+cOvKl4HGhgrmAy91DAw/ffwz84HW
8W3lN2LkzAc+azuzqJavnPnAqW+sVdmt5MwHek6uv/NHjJz5wP32G7rW+/2Z
+cDDmzxzhyXLmQ8cszb69q0vcuYDu/VYozf3P/2J88pp0rpj+0rkzAf6bXEo
cLshZz5Q2nlcfb2NcuYD+9y+YXJRV8F84C6j9gU/jRTMB6YYHAt8ZqxgPjBy
+auTs/5yO/WBuxeFjloZKWc+sK7FuLmXEuTMBw4aHtLFqFTOfGDTHrOWmFyR
Mx/oPaFWhLqFgvlAVaJd2NQyOfOB4ad9Q84aKZgP1HfxrzfuhZz5QPNlaW4D
OiiYD5TfOBMj/U89onfd5/lte20F84E34N5w6gMb18yKWNhOwXzgoSZFdWc0
UjAfKH2V/VPvP+OCn9vuxRyzkf/pBxzHWf2yIq0r5dwHZk5Lb2qqYD7w1vqQ
7Gu63Af6X7WY72OuYD7wUt+RlYNVcuYDF3W5fN6uoYL5wLAxhlNNdRTMB9br
1ya+cwMF84FjHq+OsH8mZz5w77Kocxv/xiPUB7Zv2m7P8v/0Mz4/yVDx22K7
nPnAQYc23uoolzMfOMTpvWr9GznzgblJNusXKeTMB8bWuKi2fydnPnCAU+nc
ry5y5gPNo236j68tZz7wsHPNn2XfPjMfuP7MicDBD+TMB17qcCpo2w0584ET
u2gkXY/KmQ98e2bJqoQ2cuYDdfWV5cWBcuYDvd6+m5ywS858YAfBp1PuLTnz
gVNnSEtDn8mZDzzYQ5psmPSZ+cCzr4t/+0XImQ/87PP8SoDFZ+YDHTIe7tu6
Ss584D+N+sXdmJvJfGCt4Q12JDWXMx8YKQ9o/dxOznzgRcnTjR3KM5kP/N7L
yTT9UCbzgVUedskn5mYxH5hqYbIi3kzOfOATY4n5hxYy5gMnhoyXCuszmA+0
GTl5Xtydz8wHmhUp7PXs5cwHyh7lBL868Yn5wJT5qY7LjeXMB8qyptkf7yZn
PrBz75vB4Zc/MR/YOn/Br/HrPjIfGOMX6mjd7zPzgRfueqW1XpPBfGDtKWPa
zpqbznzgmxodbizbmMV84GDvLnVqnP3IfOAF72E/ve9+Yj5w1PZh8x/ezWQ+
0OTiPT+Xgk/MBz5aW/erXa0s5gPjinLXDclJZz7Qyl+Z+tZFxnzgr/PXnV7a
yJkP/DXep+8VKxnzgevDStpoTGXMB+I8oT6wf5Zw97eLnPnABPM37VPay5gP
xHYyHxhTxz7UK4P5QM9Zj7p9Lc1iPtBknPmGrU4y5gMvNnrx5fVSGfOBwVXj
u4a+S2c+sBaMO/WB9HksP0fmD47ja5gn1AdiO6kPxHYyHwj9QH3gCOgH6gNp
P4u/E4b3lPpAHC/qA/H9pT7wHazP1Afi/KE+8AHMW+oDf8I8pD7wOcxn6gNP
9n5Wq8GNDOYDo+D9oj5wOLxf1Ad6wHtKfeANWB+oD2wF6wn1gcmwXlEfKIX1
ivrAVFj3qA/sCOsY9YG431EfOAbWYeoDK2Cdpz4wBdZ56gNzYb+gPhD3I+oD
k0LuJZ46lcl84EHgAeoD8xfpNvcbJmc+MBD2QeoDBwKHUB84GbiI+sBmwCfU
B/aG/Zf6wCzYr6kPTG28obHdr0zmAyNh36c+0Aq4gvrA68CZ1AeOAz6kPnAS
cAj1gRgnUh94GPiE+sDxwD/UB24AHqM+sGyNSrKgpoL5QG/gMeoDpRBPsftE
LOwedkyUMx8Yenni6wmxcuYDsyfETbM9K2c+sAPEBdQHfgOOpT7QA3iY+sAm
EKdQH4i8TX2grPUe2WprBfOBGE9RH7gPeJ76wM6+XdRtKuXMB9aFeIH6wACI
U6gPDIR4hPpAH4gfqQ+8AXEQ9YGeXseX1TJVMB/4GeIp6gPvO+z0DPpPOdYz
B+Iy6gMxvqM+0GR1UJ1rxXLmAw9DnEh94E2IN6kPxLiV+kADiH+pD8R4mfrA
ZhCPUx/oDvE79YE5EI9TH7gX/AD1gfXAD1AfiJ6B+kBH8BjUB6IPoT4Q/Qn1
gQsXFE253FHOfOBI8DPUB6LnoT5wBHgh6gMng0eiPvApeCfqA9FTUR8YDV6L
+sCT4M2oD/wMno36wNfg5agP7LK8oGsXFznzgT2I9xPPf2sdl73i1EfmAzsM
Cv2Q/iqd+UCXGe+mv86VMh94TO/I4/7pUuYDRyXt+HguU8p84L17/q1C8qXM
B+7c3l7ueSCd+cCo5gvCPhjImA9c8Hvz6rNTPjIfKLV+aJHeTcZ84KBByZ2X
P5cxH3j6x80fc7xk/PeBey9dc28lYz7wZI+cU6VrZMwH/lJM2xNwXsZ84Jzs
27uSK6XMBxaN+Nqo/1sZ84HTvx8y6agnYz7QLcvVpFcNGfOBMycYvJ38XcZ8
oP+QTfOmNkxnPrDqdv0ulstlzAeuvKU8bdVSxnzglqrLZr1HpDMf+LVPwBeT
knTmA81Nf9243F/GfOD2Bv5h02Qy5gM7BWriL/qkMx/4ZJLr0tv/GRfx9wyq
dotDg2TMB44t0zQ3XyNjPnCThXdTD6t05gMLMkd5dj8rYz6wcsvaniOdZcwH
ljW5uiF2hIz5wNKeA5dsSJAxH+ifYbLa+L2M+UDPoALPbvYy5gN7mxs69j4j
Yz6w9Gq5e+rQdOYDUybnPq5hJ2M+MCN8/eyhbdKZDzy0xjWk7mAZ84EWV2s3
GdNcxnxgYeelozMHy5gPvPzUZcWibBnzgRE+p0tSa6czH3i5Z1BNq7/vO/WB
9rdGV5QOlzEfqLizyrT4tYz5wLfuPsUZH6TMB3oEXA6W+ciYD8wfsL/izSYZ
84Fb27m08I+SMR9o6d0wvE6wjPnA2Y7TCotipcwHrquzMbnpCynzgQuytzxc
OkrGfKBn1Z9PK7xlzAcuTBv5VPJVxnzgLru6QcmO6cwHtn9iO6uZfTrzgTFf
h7l0XS1jPjDSUdd5roOM+cBlywsrv9yQMR84N0E/pvNTGfOBBdu7zlhiIWM+
MMf547rbZ2TMB/aufObT7++6x+4TCUk0tgiXMR9Y9GT7XGu1lPnA5x+7lkSO
kzEfOP7xRzPXFTLmA1+OHmySWyFlPvDheL9RHc5LmQ98+rr+8RonZNwHOvpE
GJxIZz5w29ghfzxqPWc+8HxpnQuRGgnzgTGVnycaDZAxH5jYd2ju25Ey5gOn
NO78vag4jfnA6LOf+z/0kzEf2PBmc7dV/8iYD1Qc7u+l45/GfGBhwqaZdyen
MR9Y8Xmow+uRMuYDby7x+/qtkYz5QO9umb2/ekqYD6wXFW+6vKuM+UDlyi1X
d7ySMB/4RdWr8tIhKfOBh4KvHtK/LGU+sPT2+eFNZkiZD0zVNZ/UL0rGfGCE
4tjrI5tTmQ8823jCupiMJOYDa1m+17wfmc584Ox/uiS4uyUxH2jkvCf5a88B
/akP3A/zhPrAXhs1iuXPZMwHjot0P5MT+IH5wAvQTuoDnzb6d0y5r5T5wBij
iLKzHjLmA9/6dLGRWKYwH7h3XYDRiF6pzAdmn7q8b5qDhPlAHxh36gOV5Hks
v0Xmj/j7eZgn1Ae+g3ZSH7gP2snuE4F+oD7wNvQD9YGjST+L/18D7yn1gb1h
vKgPTIb3l/pAa1ifqQ+cAPOH+kCct9QH1oR5SH3gfpjP1Af2m244QFBLmQ9U
wvtFfeABeL+oD8T3lN0nAusD9YEaWE+oD8T1ivpAXK+oD/SFdY/6wExYx6gP
xP2O+sAoWIepD3wG6zz1gRJY56kPfAT7BfWBuB9RH9jjwWPLaaVS5gMXAg9Q
H9g9zeDuusUy5gNLYB+kPnAOcAj1gW+Ai6gPXA98Qn3gHNh/qQ/E/ZrdL2xX
NyBPI2U+MBv2feoDlwJXUB/YFjiT+sCrwIfUB84EDqE+MBTiRPb/wsAn1Aee
Af6hPhB5jPrAXt7GDsLfdYP6QOQx6gMrIJ6iPtC3TXuj+htlzAfuODMyaMJq
GfOBbxeF1ht+X8Z8IMYF1Acix1If6A48TH3gb4hTqA8UgLepD5x0O1k1qVTG
fGAwxFPUB/YEnqc+0HLHxocu32XMBx6GeIH6QIxTqA8sgniE+kCMH6kPlEEc
RH2gacDPha/10pkPxHiK+sBPo922yopkzAeWQ1xGfeAIiO+oD2z+bPVjoZuM
+cDZECdSH/gb4k3qA/MgbqU+0AviX+oDyyBepj4wDOJx6gMxfqc+8CnE49QH
oh+gPvAL+AHqA1eAZ6A+cAZ4DOYDwYdQH1gI/oTdJ9Jcp/7D/zyP/aYBP0N9
4BTwPNQHngEvRH3gEPBI1Aeid6I+cBF4KuoDI8FrUR+I3oz6wCPg2agPdAIv
R31gzP3JVXfOpzMfmE68n/g7kJLT4U30ZcwHflp7yq1xoZT5QIOxgc8jd0mY
D+zq88Fgz4NU5gO7/2y5aMKGFOYDG/f53eu3fwrzgc0vtB/w0UPKfOAw12ip
z5oU5gP39hbuef+UMh9o0F6n8PSTFOYDDd5u8zp0V8p8oGmLfZut66QyH2hl
b3W8wx8J84Em51Th06enMh+Y4ztRvzgilflA/cyOG14ekjAfGDromnm8ZRrz
ga875aZ+aShhPtD5to/bwTYS7gODZpaNuZHGfOCrZz1s0nQlzAceiDULTXOT
MB8ojTVTGdWRMB9YNKOl4eIdUuYDd2+7ZWh5Ucp8oFORXqd9hhLmA9NC9u2b
MlvKfOCgef06hxhLmQ+8d7n7sn36EuYD904+kXylt4T5wGd1XQZ+cpMyH1gc
5BPXNF3CfGDG6yyzQeMlzAf69tjUZYyelPnAiwPDk8baSJkP3BD4OnrKSgnz
gYMaffIdsFfCfOCiiN4r53yXMB+44GFo/VYTJcwHCm1L9kQXSfjvA/32L3WQ
SZgP3N91w4MrERLmAzvUrFG77lsJ84FJ6btaXBgpYT6wc80m2w4lS5gP7D2/
4luD62n8PpE/PeJNrCXMB0794zcjfbaE+cC02rp7xgsS5gN93oS2rKOfxnxg
Hy9NoBAsYT7w5Y5fHwMqJMwH2m5ZMs7AKJX5QKug4Gt7D6YyH9hbf8KcDFMp
84E1p3j/yY2RMB/4cr1HRUEf7gNNT7d6sveUlPnAFqY7Rx/5mMJ8oO6IWaMj
50qZD3wesWhraaiU+cBvbhOmqRVS5gM3Hbm8sLZ9GvOBbl619uWsTmE+8Gt6
tOJtSSrzge8n/nNt4cs05gMfVyySfW2ewnxglm+n8HUPU5gPjF9rdE5tmsJ8
4OcT05yiJiYzHzgg7H7Rtz8pzAfOV8QHD12cxHzgjKxPQmJZEvOBe/Ju3T27
ScJ84Jj75XMurXnPfKDPhLmO662lzAd6dd/SYMUPKfNCb501Dtelz5kntD69
u/HIoBjmi2g59ieWU6/YccHD65K5Ccwr6vTdc6vG0RTmFcPq3G+idzCNecUi
c72G6ePeMa946OO33YLkA/OKttkHo44sTmFe8ZF56fHhgxKZVzxpc+HX1lOJ
zCu2XRDtsmdlIvOKQ6K2v09Mfse8YrBpewtbh5fMKzbq2Dr8Vs8PzCvWdR5m
ajo8hXlFF/WWDKcf8fz/jje/mu/x8w3zin3Gf3+cdy6NecU+rVOsDY2lzCv2
Tq/06lQVx7zip57L44a5xzKv+HLS9OFFiVLmo1p2M/5meOUZ80VxMK+oJ2xL
nsdxT619rfPhplLmD79Ae6gP1P8QEtpq+AvmFZWHNQGlW1KZV1z2YmhHndw0
5g9rdpq8ZGDJW+YJt8M4Uq8YWDVFeNknmfnDZVBO/WE/Mk9wvHA+sPMDSftx
XHTI98X5UGz9v/ZTf7gavi/1hPjeUU+YRvpf9BXwPlJPiOs29X50nuC428J8
o/4Q5yf1fv1g/lNP2ExvX5TphjTmA0fDe0H93hF4r6knxPeOekJTeN+pDzwI
6wz1ezdhPaGesCesP9QT5sI6Rn3gDtjvqA+0gPWT+kBfWOepD5wI6zz1gUNh
v6A+0B/2I+oD726ps/yJLI35QOQB6gPf+FtV1Jv0gflAF9gHqQ9EDqE+0AG4
iPpA5BPqA9Nh/6U+8F/Yr6kP7LUtx7OuawrzgZmw71MfqAauoD7w/5Rp/64Q
x3EcxzeLujMRZVJXqOvKoEyn1E0s3CSKoqTMN8iqiyhWg8L/gE3ddoPB977f
G8ivOsq3WOTHxPD8Ls/P3/BeXs9H72t2pj1wkX1oD8x2iD1wgE60B16wT+yB
k+wfe2A/e8we+LJU7RTKceCBV+wxe+AePWUPXP3qtMZLUeCBs2nxKfd/F3tg
ff2o1qwmgQeu0QX2wCF2rD2wwR62B27RKfbAbG/bA5Ofj7P3kzjwwG96yh4Y
seftgTO50/m+nVbggdv0gj2wQKfYA7MesQdm/WgPPKCD7IHHaX1zcCIOPPCO
nrIHDkdvC3NRHHjgM11mD9yg7+yBtYfX4lh3EnhghU60B2a9aQ9s0632wAb9
G/wH0sv2wJgetweW6Xd74CU9bg/MfMAeuI8P2APbOIM9cAXHsAc28RB7YOYn
9sCuyu1NWokDD3zEZ+yBIziPPbAXF7IH5nEke2AP7mQPPMSp7IHTuJY9sISb
2QNHcTZ7YB6XsweeT+3e/34mgQcu435/VPbipw==
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
K8X+ZYXjiWLRIPDGmC+Uk1SPqZZYje7/AfqQ+uA=
            "]], 
           Polygon[CompressedData["
1:eJwtmQf8V9Mbx6+41/zHIXK5v1RaRinjb5MtJQmhNJQmFdp7aSpEQzKiKFtl
k032/tt7780ff+P/efs8vV6n3/2c53zPvfec8zyfz/PcBj0HdxxUK9M//bee
/pxaZVnHPMsKXW9XZtlmKcs21fXJ6uuslgmvqz/tdH20Wk+NP05/t1BfXdne
VrtA16s1weY1WdZMbYWuF6nva9m6Vf4tc9Ro/sfUN07X0zWmrsbeKTxWeKLw
FsIPC08Rniy8pfDrwnOEbxC+UW0P4SbC52vOWWo7a8wt6l+svvGa/x3Z5+r6
cvVtL1vvyu/COzWQ/RHZz9H1VNnryN5d9vb5P6+ZraP/ugofKVxbeFPhOmqb
67qD+nrINlltjq4bqG9n2XbQHNdrrvnCHzE2ea72sV47yX6T7Fep71sZOqkd
rusnZLtac72Y/Nv5GrOdxn4nfInwvcKthM/TmKs1di/1tZbtNLVDdL1GfZfL
9odaZ43tovaXrmerXS7bLhpzqMYuVxuceQxj56gtlb2R+lrJNl14sXBD4T2F
LxK+Ubix8EHCG+gZztRvz1LbUNcnqq+VbGs1ZqnGviF8vvDFsjeQ/UbhIcLD
hf8l3FF4b+HrNf5CjT9fbZmuW6rvMNlWqY3S9SCNLzR+jfBE4SHCGwlP1fi5
/FbtYrU2su8m+y26XiDbtcJnCp+m8eto/FrhacL9hWsJPyU8Q3i08KbCB+gM
7CP8jH6/XL8/VfbWws8JrxC+V3gC50vjt9X4A4WbC6+UfaHsj8f8c2TfRvb3
WTPha4Sb1vh8TRXuJ7yu8HPCM4UXCTcUnqY55mmuPfAp9jJ5ry5V34zKjfc8
OGznCl8hvKPG7Kpn31Nt51jPubK11ZgWwncIX1rZ5/C9u3S/lrrfLPUt4Ryq
bx/Z7on3Yz/Xl/00zXeG8JHC32jsWWqna7y6s0Ya2zvO2+vqu0W2w2Q4TPhD
4dXCfWQ/VPht4ZuFzxM+Ubip5ntb+FPh2ZljArGhq/D+wu9r/CrZ3xO+UPgq
2RvLfrDmPyrsK2X/Ptm318i+q+yV8FbC3WXvV/kMby98Ze6z/XH4Ez6H773M
GgovE24iPB8fiud7C9/R/boJNxZ+U7h/+Ofnmu9OzqtwD+EWsn8kfI5wZ+Gt
hV8Snk7MEP5T4x8Svll4hPDesr8iPET4aGKl8MvCQ4WPFP5Z4+8X7qD7Hyu8
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
B/+SA5A7sEYPhp4+Ljm/WFw4f+Hb/f8BbNMg+A==
            "]], 
           Polygon[CompressedData["
1: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
wwDahvKtYRBKf/8Dvl0Nwg==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
ec1nVe57ompAxdzcQ/9QKcXw44JrRzojT9G3EJzT6oGPLTp+KnYo5+5Bfyn6
XiXzk/bgySl/KY/VZYzlmfnlHGyq0Hcw/TZprpm5VKbaiuoe2MzMfW/VPVNx
TzWuTdH1OdWgyvF+ee6zo7tQ1dw5S7xZc1DtQjUMcQ5xD/GGo1J+FKfU3Vj/
Pgo5KZg/KCY0D87v7RMHEz+8OfpOoXU9NdpGnPO6aK5Sh75zkOVyx0blti95
P0nxEHlXMO9V/BF30v+tja5pKNc3iN5L7elptP8VXW+Rn1TJne90l1DMV71z
dTS/0v6uAVco+lviVT8lbiZfmp3WUGtZRlvNgjnc0tw8TbW273PnpoW5a3RL
kIsZ867ompj4xsR059I+tk05TrlOPEH7fnF0zUr35/JVXbNVzBmu+2b0XVT5
8fh0Tmun+pj8fyv6qYwxKvP9cDG2JxQ8D9X0zgf/gayEfYuCa2S9Uq5RzlE9
WOeliHwid35RXUz1FdUW+iPHl5mbiaspxiom90AuT9xVPvBgdI1Rdardueve
qkuqzqM4P1P/kbi1zsWOxEPER3aXmXuIi29PNStxevm5ahuzlAuia6rieDpH
n2BTDvlIMEdSXns4mqvpzqKag/bu4+C6gfZnXnS9SDWE+dE+phrp0hQD5AMr
lWequuaoXDaBeVQquPbxf80WilI=
            "]], 
           Polygon[CompressedData["
1:eJwtmQncllP6x5/Ce4fIHOsTTyRkC5GlGLKPXTEYZowx2bcZxprBmEGWMAYj
+1izL1mStGoqhRYtSLuSkpSQKf7f7/+63s/nvM/9O9e5z33us1zX7/rdbU+/
qPuFzWv88W91fs5q1GpbVrXabK5PKrVaa8pArkc31Wp7YvstZT3sE6jrU6/V
TgNvBJ4J3p+2T4BvBK/ZrFb7F/iX4I+497/YdwQ/mfaV4AHcfyp4fXCh/I7r
31M24Hos9k60/wP4F+AZ4G7grShDuZ5Onwdie5pyC/bvqLsM2+pteE6LWu0o
nv8F/a8B3hl8AHgJ9utpfwztV9D+KvC94AvAP4GvB/8TfAZ4AfgM8N3gc7P/
fvTXjP62ob/96G8B9kspy7H1oM2dtF0N+3bYj8Q+vx73n4ftS9qcSduzKQu5
/hN1f8ZWo3072u9B+0+w/Ug5nOu21LWh/NyIa+u+xrYK3AAfBv6yRBt/V+S9
K7FvRt3u2KeC/0xZymO687x/YFsM3h/bprTZhPKD65nvM4fxHo39M9rvQvs/
NWLOnftO4EvAKygb0v5Q2/tM8Mbg3cAzwYeCZ7M2w7hnW/B94L/kfL9G/99S
dxBt23PPVpS+2G/DvhZ1d2PrCp7C/YNpvyX4VfDD2GvYbwcfDP4M+yiqdgYf
A/42228B3o0yhuvF1B2J7ZAcz+vUtcV2bLZ3f93NeB4CX03/y8AXY++Xz1uH
5z0I3qHE3nUPj6fsi30yv69StyG2V8AP0n4D2j8J7gU+Kft7nv7/B27Ne+6D
fS725qz3tuC9wNPBD2C/ivYV+A7wTXn/PO4/Ffwg+FJwE/bbwAeAp/H8t7Fv
4lyCZ4JHg7cGvwjuk/3Z/j5KS67vp+5lbC9R7sv+hjC+Kc4nuDX4Bdr+FXwQ
eAn9XQg+AbyK/ldSfs31N5Sm3F+zuX8heCXtO4BH0n4JePV83/Hgivft1CLW
3LWfp0/gugV1S2n7HWXt3P+fYevofvacrc9cURZh/4n+t8H+X+xfJXa/TQJ/
7Znjnm3Bg3P/u7fd43PpZwb4iyrsQ7AvBjfDvjN4DHhmI9poG0p5n7ILtoXc
M6sR69U+xz+vHuP/PM+hZ285vy357Yj9Q+pb5Pt2Ay+i/TLsa4G3A09w/JRF
JfzEDtTPx76cZ7XB/ir1X4C3p/4Q8IySbehnFdc/pX/rkO/nWda/7QQ+Wn9U
jzb6Pn2g986jvyVVPH+4Y3cNwVuBp9F+FHg4eFPwB55P8Drctyt4nL6D8g2l
qU2uTa53F+yjS6zRsVzv2iLsC7B/X8X9M+jvQ/A48C/A/6H9bPBX4M3AL4Pn
gpeCtwa/BR4JHghuC34dPB48HrwJ+BnXBzw2x2/7OeCvwQ3wKyXWzLVrpz+t
x3yWFjHeWdgnGY+w75j71TE4ltHUjcH2NuVZrtejbgT3jwW/l/hR2r4F7gve
GPxIjt/5dP2HgT8Gf5LnYRT4ecpzlAnUT6RMdb9h3yn3n+uxqIo992GO72Pw
FuCJPP+dEnt/GnWTGzGfH+b7TqhHn1PA9WbxrDfAT2T8HY79Yepacf0UdW86
t5Tncz4d16fgObn+L4LfA48AbwR+ukT82ZL529d4Ch4NHpnv39c9Cd4846v7
xPkanes7rh5zKnYMz8oPqJuFb9mHuisaceY9++0yHri/VuX8jMr5nJH7YTL3
DgH3T//cx1gFngtun+f/I/CE3E+TaD8N/HkV530A9g/Ao3J/9Ad/Ap6e/mUQ
eDj4nfSHY7h/hL4BvCX4jRL+vM44f2V8ly+UmGs5jdzmQs8v1x/yjp1LxPjD
wYtqEfudU+fWNXKtxukDud6eune1UQbQdgT+9l3K7o24tm6NEj5f3z+Suj30
te4x8PBs7xq71s3p715sF4N3As+lzW+NZY14J9/lTcplXO+F/SvsJ4IvB3cB
fww+Dvw6+DHwuo6P+XgN/Ch4Q/A9JTjB7sn/5Ar98/mt8rxcYwwGT8N+Gvja
xAuSD8kp5ZYvgW+i/06NeBff6QZw+xJ8r8Y9zSibgwcBJ9BmH9pu4JnM9/fe
3SiDnQfq1rd/1zzvPxHb2Y3gt5Ooeoj+Tzae5Xp1oe154K31L5RzuL6Asi3X
c7Afif1K8L7g+eDTwXvpH5qCI28K/kMJm232pvTE3jX59AnY9nbNad8ffDPP
/0sjuJUc6zHwVeD983nyb9/PtuOSfxi/75EvM7+PZ7w3nq8P7l0ixhvrf+ae
WzLe1dive+vfS8RcY6/+ZhbP6wO+rAqOKFeUr10EXgP7rSX43kZ5/2zw/eDL
s/9/gP/dCA4td/475VGur02+dgP4MfDfXTvPiL4Q/E/wauCbwU+Be1XBoeXS
xnRj+8bJT43vzfntJL9kvM+C76T997S/nLaPN+IZ9n1TCQ6tPzHmGns/yv7k
DHKJZyi35vnoZVyjvJDnzbP2COU67C2wX5fxumuOR66rfxiU50F+OMyzlP76
tRLxs2X6y09LxJPnsK+e72v8eAa8dvJd+e0DVXA0/dmAjC/yYfOnocakPG/y
S/3fm+nvRzMfgxN7v1xPviif/JF3egP78+DJnhvs/bB/D16X8e2Z/PMF8F05
nqG0HwTul/vJ/fUw+Brwt/R3Cfgd8OvJd58owd/sT/81pUR+tDX4CPCyEpzx
B+Z2RVNwyc55HrepwldeRNmR63F5/i7J86C/7J7+qXMVMeN48KXgPcBTwYeW
OD8dq8ip9K/mLB3S35jL3A4+PfnsBeDrwOeAV4GvBfcGn5rv91I9/N+e4M+T
f+u/DgR/kfngXfXIHcwhzD3MUQYnNrcwJzE3kS8fD/4VZQ1jN3UHljjf+oOv
wb8vEQONhYvB54EPK+F7u6T/uBr7Afx+St0R2O4An5b3n18i5+yR47sI/Def
Cf4G3JexHmZ8ZCzvge8Edy3h+1blerg+KzOfuqcePlJfqc/tWKKNa7dfiXv1
h9thn5Lvcxz4R+zvg+/l/pOMSVU8b5cS+dBv0l/qG28EH5/x5hzwDeAT8v3P
LZF/90h/8Ar93aXPzvcxH/kX+I9V6AfXlNAUzM+WMIajsN1GOTH3f09st4BP
Af8PfDX41kbUef1XfRbXR2D/AfuVJXLk7rn+Z4G3p7zL9Tz6P6IR+eAI8Jfg
wxvxjuZezat49y1yP0zOXNGYNCT9vb58s9wf5nAHZLwayvVzuswSc+peMeY4
17fWI76Zf6ql7E/5hOsh1PWuR74s7geuc+8+JbSZ+dR1bsT4R2T8MPaMrIfv
0GfoO+TQcqUPquDWxuxWyYflcnKSHeSGVXAVNRe1l9fos1GCQ8nF5eRyK32g
XG1AFb7x/pJcsQrfpo9rmc/Xlz1QwhfLGfqnfzAWN2W8N3+f0RT7US5gvjsL
/E7G22NLxE41KbWpfcETa6FJqU3tVUKLsD9j/TYltAA1AbWKR+pxHuQEal/t
s712n717ifO+CfY/erbyfNbBpzdiDMZ+c3DH1oUyJsd3Sz3m/P2m2EOuxeP1
2Fv6MH2Ze2RiU3Aa985+4KngkeAOJfSOmckvbq8HXxqV+X/r5B8+72Vwr3pw
Qrnhi+Ab68GR5EqvgEuJPbEOzx5fi73yG/DPTTEHB5TwWT+lnqAv6w5e1hRz
6tx6BvWlZ1ZxNuVwcjk1MrUucwL5rTmEuYKah9xBzix3VpMylpujm6tfUeJs
n0/7exqRc5pLGUONpQtLaA3mGOYachK1CzUluYoxSa1FDcdY1b8eZ98YqLby
Qj18y8ngmxvhg9RW1Fj0TfogY82xVfgmczC50ZqZ2z9VDy6mJqI20qNEbJHD
ymXPyPcXGyvkRHKfK6vgSsYcfbU+21j0bD3G6/PVeqaViJ3GUGPzwnpoB2oI
aicjSuSu5txqLZNy/n6uQgsx5zH3aZ5cyZzS3EnOtzjPt+fTHNVc1RzcXNYc
0lxyeD7/2yq0AjUIc8tlVWgTz+T5fb+KXPztErnifPD0RuTQ5rrmrOauaqxq
E2oSahPLS2gnvo/aSJc83+ZIxn7zvz3z/eUSaqpyJzmEXGJqPfyJOaC58/Rs
ryajNmPOaq42q4pcdlDOx+wqcjs1BHM3czi1BWOMsccYZOwZWI9YYv6mdi3/
P5dyeIl463Vb+6pF3Rme+Sp8gLG6B3iz5CcHlfARrauIh/oOfdLazlUtfJUa
t1q3GuXeJTiMXEYNXC3cnMPcQ450cImcYXb6J3OXUygtuF6T0qqKGLQo9XVj
kzHK2DQi/c35jchn5A9HlfBZGyZ/0pepkS5O/7MduBv4O/D3ydmMqUvTHxlr
jwZ/1RQx5pclOM/yjEdyob+V4FLX84z/NOKdHOch+a7q+fpm/cn99eDQ5vLm
3HJrOae5zUtVcNHHSnBTNYuBGZ/cv09nvJAjm38/mfFlbD248mDwu43g3OYa
ajpycTn3WhmP5OJyWLmunFduK8eW275VBfc2x1D7v72K3KNPjleNWO4+rB5a
qxqwWvBR6R/aVzH3xqCNuf4o/edd6R+8X615UD24qBp433x/x2NOZ64nZze3
eLkKLt8r3+eOKnIZ39F3dX+b16vT7cLZOKZZ6KgPlchV1PjU+tYtwRXkDHKJ
2+qhLRhzjD2u4ZC0d834ZiwzxhhrPqf9ganX+O1CTVe8W/ortU2/JfgNRI3z
jTx/ajBqMaem/5XfyrXVXdVm1ZTVluX4M2uhSVyW/k27Gq5aj3vQvTgp+ZCa
rdrml1VouWpQalHOgXOhRmr+ph6qdqoGohYiR5YrTyyhVa6X30Jmp7/1G4e5
r1qvWrbfXNR8L8x4dXDGg7VKxF7nx9jvNyXjT7cqvjXJKf324TcnuaYamvp3
2/y2Mzn9XcuMN8Zg+d9qVcTmkzN+mDP0TP/nt4NWGS/U8NTy1EjVGE8p4avU
H9QqRmU80H+qpZmjm7tfUkXuvmsJrq5P0bcYg43FfhMzr1cz7dwsNGm1VPew
e1n/IDdol/vFHMBcQP9uLlcl32qT+8ccxFxEfmvuoP8yN9KH6Au+aQrf4jej
4eA5yc/kIKOTX8mF5Ej6qq8z/zIGGYvcHzMyfnfMeKe2OrAEv1WTXpDxUS1w
ZsYTNWO1SjVptWS/gciPP63i28jZyQ/MSc01neP/n+sqtEY1NLXEYVVoa++V
0BJ/yvhsfFRrXpHx2xi4O3N5cLOIjWpU5gbmAOYCY3N8fkNZkuvXIeO/2ugx
OX9qehenf1NbuLsKbaVDng99uL78sNwPm1cRu07KeOJ+uir9of61d/qfPUrE
rjbgMxvxDakp/ZFak3zPb5mHJv/xPMtnj0s+Y8w01hhzzsvnyZ/aJb9WM5tf
i5y7d/av/5SvqV34DdfcT03Ib7tP1iO3NQc2F/Yb3VLwFVV8u5N/aTdnNHc0
rzPXU8NRy1GX8tuuGodahzmj/vasKnJJOaHc0BzRvNCcUD7wuypyRb/JqQX1
TD7pN2ljtzHcb9U983neb+5pzDP2qXmpSz2Y/veR9Pd3Zn9qqGqp3dLfGRON
jfvl+ZJT9Mj4Zry6KfmJmppamv0/mvHKePdQxp8b065mq3Yr31g3uYKxWI3M
fOuGKrSza3N+PO9qI/8HFsCkwQ==
            "]], 
           Polygon[CompressedData["
1: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
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
TaHzqPpGNfoq8K68s3vuOF7Uvi15f42Ojsu6YxsavZ/ll8qQnaPzS9UUytkU
j0bAXRt9J6D7Jd0dqUbrFm1TtkdG3z9pD2svzwy+l5gYfC7Wyd8G51q6g7k+
uu5T3VYCrw32S6qhpueubXW/9knwndur0X5ed2O3gE9Gri76XuwE+OOQ83Tu
SvYPi3nvqNx3Pu1y11m6S9H92R48L5UvQlYv+VyOicbixkaPX2d9Irimaq+i
v7EiONfSvaL2yWFw09J3dY5nRN8rar2mRJ8RrfVdyiGjz6Fqz4HJP1+au3br
At4LnQ5pDyg3WJr2oe5FNQ/vgbcg/xd9j6Z7g6HBOf/+2OwZnSsL35jmX7XY
+Sk3U04yO3peVLspV1f8rR5cz+kfa6Z4J/xI8NzqXm1WqsWUcy4FV8s9n/r/
E3OvnWL2rGAfrppRcVz3l3PRnxK8N3T3qzpbd85tcsed58Cr4ZuqnodbhX6T
zPddqp2GZT6z8hmKWcqpH0enMbgTeBl4TXTtrLxavPL0FXDDM98tKC+5LPe9
nGKeahbVHY9E25X9hsp1tdeKHkf/3GPrm/sOWWv1KPpdc+cb+rbGrDpppWJu
ybprE9Zd+LqU7+vOTXfkuqt/GbwOe/8CEytGiQ==
            "]], 
           Polygon[CompressedData["
1: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

            "]], 
           Polygon[CompressedData["
1:eJw1l2V4FUcUhhcPLjdILrAQpEihFAsEt+AECEEDBHct7sGdIsElwYI0uLu7
PECx4sWLuxf6fs9Mf7zP/c43Z2Z3Z2bP7PVv1T2kW1zHcY5DAqjhcZzqUA9W
+xC7juPjdZyF6PmwACrgdaB9L3o/jInjOCHEPr6O8xU9LrHjxEIo/eLjfcJb
QRwDdfG+kvsabyrxZHhEfAQOwzHGHop3Gf0OnpI3i3gG1KRvLZiNvkjee9o/
wDd4Q14k/jR4SnyQ9t/QVci/QnwVfmhM8hbgz4W3xD1hLt4unmM7tCa+BhG0
D4OHtD0jfgwP0IPw+sMFO6bGPsu1JuLdR5+zugbXfaXnhM/wgr7d8aMgmLYb
eLfwhhAPhKp4x/Au4A0nHgHXNTb0RQ+Ac7QdJD5h56g6fW5qHDiva8NR2gbT
Vo22h8T36dOPuDecIY4CF+2vNaJtEvFWzTs6kOevgl+Cvr9ALvTPkBciGXe7
rk1eHa0jlCEnBj8nOgd0gcp4gRCke9BzwQpy5kBB9K+QT7/kxOLVQ4doTqAU
XlEojp5H23xYAMugIl4FXROKkbNR+4V7KUFcFAprj5JXDB0AhQTeGLwU6Dzo
+fRZALMgHZ4frGaM8cR5afclTg8b8GbgbYPj6J5aTyhJTgHIg57OuOtoXw8z
XDNHmqv89tkm43n1rOjF5CyBRZAJLyPsY9xY4pWwB+3BS6X9SzwRJujXjjEP
PRMi5eNl0LUYd5z60zc1cRrdk8es2096V6CW9pFr1qOSnT/N41K8ZFCa9U5M
n4y6L0gGDRmvDH5ZeOnnOLnJ64buCh3hK142vBboT+gA+hSD3JAL8ui9o60o
Or/V38krQVwScqh24LXXuwafaQvUHtc8E3eBb3iF8ApqTPK74/2LF4RejF4C
y3TvPFdZvNnohOhy6PJaC+iF1xv6wg/6ZnfNNXXtTvY5Qhl/LNc9RLwSkjBG
VvJaoltBG3t/BfAGogdAn//Ho282yGLnIj+6HAxkvFXEIyAO430kt7kdT+P6
k+9CBHoYDALHa+ZQc1mQttGaf3R5GMR4Y4nHQVzymuA11lqhN+PVdc28an5L
2bmoZveb9t0itbPma9GB6N9pnwrTIb72BX5F9actEi8BnkvchuvWIw6FD35m
f2ifvEPXwctAvh+EoN/7mbXXHniLrolXW+vLGF48D6SB9DbfH50IQmkvTlwM
ntMvJV4KSEVeZbx06OTQiLxyxOXhFXnp8VrghRNXgtd4aWyfN35mXbQ+qaAJ
edXwq4MfcV0YhbeDeKfWWNfgmbfqnhmjHXF7XVPvmuoA/hQI0v6lfRZ6Jkyz
89cNfzZ5m4jXQxhxV9UYvHXEsdCAOKnXnKdVtV+IW4IvNCOvvnIgJ3FNGI63
hngtNCSuTJ8V6BhYavd9CtiN3geTyW+m9bZrHUDbJuLNujfX1FzV3sK2Jkbh
lUKXhrK2nj7XGae9RjwKbhPvIK8Nui20hyCvGVNj79Ma4G0nZxs0Q++1Z5DO
oi/wSucL/ni4J4+1acf9ttW7qbVXfbXn1SX0P/AEUkMY7bXIC4bMqs9aS3RT
CKctLfFu+nambydoZ+/vIv512rsRd4SjxHdgjM5LfTfQdtyeAzoPYjymns9k
rFWwElZDbXsenaC9B3oC3KXvA+I1cACdHS+r6inxJFuX56JXwx/g8O3znrxo
/IXwEa+e9gF6FXymLZGvOb91jr/0mG+by4wVD/8j7cuJl0Ed1SaPeffSuqY2
qkbG2nstTft+3ReUse9yVVsrVDP0DbfI1k7V0ErkNPeYGhKsGqvnVL1Bf8Ib
Zc8bnTvD8BJyjQQQB3IyVg74Tl484hjucwR5RaAXOgy/EeTRvock+rXnzQv2
QELNA3lBxAGqOcS1IRjCPeZdDCE/Ddc4iT6hb0/y+9I2BP+HaibXjWvvZQB+
fxgNX2kbTE4WfX+h38Fb6OWad0TvynLiaKijmglD0cN19tCWj7gKuY+IH8NB
SKnvErzx6AkwSc/tNfVWtUA1YY49g4q7pr6qzk60eZpXzW9a9J/a/zpPiKO4
3t/EN1SbaOuD1xsG613A605eIvx56CidF+RX9pgzpRnxSK2T7o+8Na75jtL3
VH291/TbQu5R9SEuD8Xxwsg7RZ/TcBY8eB3xbqFvwl+q7Xip4bjNU35TchrD
UfQROGDnpQneYXQqr7l3PcMgiNa7gn8XMuqbRP8FuIfE+h6kbaRqNN43u5Y/
7LrJ0xr2Q/eHAa6plaqZDe21OqMboO+j78Ft8NJviGogYyfXdzteJrxW5F1A
n4cz9nn7kbeQvEvE58DXfncG2pqo2hjtmnNA50Fr9GXtIXQ6u4bhquO6N9VI
uIJ3Fa7Z+VPeRetdsWvezo6T3mv2q/ZtB9fMu+b/jn2OCNe8a3rnfCAX3nrN
P7oRhNr1Hau6BiPtN+4UnR3opOgkkMj23YQXjm4OTbQX8Cp6Tf3eTNsW2Oqa
2qEass/+dzrpMe/RS53PenehB2278U8zf63IaQ2VyNnjmjqsetzV/g/QNVra
86ONPSs20PcQfYsQF9C55DW1UjWziP3219xr/x2ze017rhFeObyGtDeFUzrD
6bMLdsJGewZVIGc4cYT2oq1l2fD6or+gP8N78Mfb4Jr51LyG2XnJ7DXvXmfa
ukBXfTMx1lqul5ucZJCbnKF4S/CekvsMXO1/19Qa1ZwP9hpZ4Q36Iywjf5jH
XOOJnc/n9j1fruegvaLuV/8j9B/MNd+c+vYc7GO+E/8DarsS9A==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
Q/hn4MvB46wPzpGU87SAP5u63lH98Dvvr48xsbjE9yTPZ44vCbxa8H7R/t8D
vpk6n1d+/1bqvb0uzlOx9FfG2xhzUdU1u5TrJY7ra2Psq4v8DZ5vg/839b5W
PrMttR10z7AZXMAcdPH5LPzJ3LWf5vZZnM/n4GWKJfCqwTm2xhure4Dg2Ppt
zOlK0PmwyDmwaoHbY04h+3yY2laqO8bH+wHZsF1wDbVSZzn3fZfyoD2ltq90
dP+1InU9qFxEc1ZOPSz3P1K+Wie4LpHNZfsl0VfsjGdW4w/Nfaepu03VOFqX
Yv73ynN0PhLXA8tS6yi/eZX+aonzId1l6e5ql3Kc1HWf6py9WlPi3HRltH9p
cI2wEdms3Heeynf+KHUdsQn53bn1lZMcHJxLK8c4NLieHQ3/NPg+Rzn7Xbnz
PeVLTYLrcfnllbnzJeWTTYPrA92FvpI65uouubbiUeb77WJk60KshcE1yjsS
1w9HBufkh4C5/Hti36I7yffo31bqeyTdUz6Ru0aSb1ftpDVr7Z2jT9ba56Cz
RXsh8ZpVr2lPTc/9LeW/O0pdP8ueqlW/KfKdjO6IK8U5aC7r453qn0WOKTrj
8xnnp9Q1ne5Y68c4JbusjTln8+C1q6bZwLc+KPIZ13r+D994MZE=
            "]], 
           Polygon[CompressedData["
1:eJw1mQnYVuMWhr8+Db79l6Heio1/q1ASRaFQCAmZSpoIaT4SGiQSooFEyRCJ
ZMxYxmPI7JjiyHDMQ4TTgIiQ4Tx3zzpd1+7f91573u+71rOer8mAkd1PL5f0
T//V1J+HilKpaVWptED8ZF4q3ZtKpSFavywrlU5UrI94D/YV1xNnDUulW8Tb
65hCyx3aVkd/r9e277Xvg3G+a8R/iGdr6a31yTq+r2LbiDPx/ZVS6bNqnUs8
THyN4oMVv07cVzxDfLK4tq53kzjXObfWcpviJ4sXKT5a8Tu1VLT9Km17SPd/
jOK7aL2O4pspdoOWH7Q+WdseUPwTxS/Rei0dU1vLDHEP8ZXa5xTtO0/LL1q/
iGto/0XibbXfzeJ/im+N61+ufU4qfE+Panuthr7X27StprZdrn1Wat8HeOa4
v1/EN4t/17FXir8UL9cyVeu/attNiv0snhX3d7v4QC19FeunpbPWlyk+TvHV
4jniZ8RjxY+Lx4tfF08QzxWfJ75cywdaH6NtC3Wf14pXiieK39S+M8UfxvP+
R3yF+BPxSJ5XfKX4M/Ek8avi88VPi5/RcoHWT9NyO+9C8fmKP8QYiP0marlG
yyr2VfzfERte9jnY51/i8eL3xNPES8SjxW+Lp4rfFl8ofkN8ceFzcK6l4kvE
Q7Vcn/mcnPtCzik+S7wg9z4vx/Ny7CTxa+LTxA8zPsUlvevp4v+KP47xwfu9
rvA1l8b9cy8c8w+tv5L5XAvEx4lniweKR2q5O85/g65fX/Ey71Lj/WuN94WK
19P1Zmvbb4q107K11p9X/L+K36t4A8Vv1LYNyd+ACftR5m/DN+Jb8E34dt+J
12i5S+t1Y04+rutWGnqu/p58ncWFY4yvdVruj7G7Isbfllqvr6WZePO43690
P3drvy2qPF5/UOx6rpl5fL+X/M4u0/pWVX6XL4jPFq/QPleLL9Xybubve1mM
iRczv0PGCt+Eb8OYZKwwJs8Xf5N5rD4Wz/+o+GzxOLZpfYC23anYueKnYrze
oud+hW1af1/bpiv2bNzPk+JzxPdpaRj56RHt/1SMt/sUH1X4XfFtqqv8znjm
K8SbV/ld3CA+QTxG+x8jPlLLGVo/U8tRzLfIJ3A3xo/4SPHp4iMK58SrxU2q
nCvHiw8WD1b8MPE+4m3JFXr/dcRXxPgapfjR4k7iQlxXXF/8afK3IafMLzwW
ZoirqjwmThbvyfdVvEHhnMRY36TKueoj8cXivxS/VXysuJW4nnhL8SHiHRlv
up/fNR6GizuIuynegbkV83ed+Ebx1+JLxX+KF4jPFx8qHivuIR6td95W3FK8
Q+GcOCvyO7lypvh48UWK9xJfG/VgmPhQcQvxFuJPdD8bdD9dxDsx3sR/iRuJ
a4lfFq8R7y3ehvwhXivuLG4q/llcW+fbM+bfV+I/Fb9MfKz4FF3vIMVr8EyK
faOlrPXDFW+h+FpxLfEJep664pfEq3T8CMX3EXfX8R0Vfyfy14/iueI24obi
t7T/T9r/4dzjgfl3j+JzFT9RfK72P67wXJ0pblzlOdtSXD+eb7WOnyw+WtxT
+++v+C4R/1bxv6tdf/uIhyreVfEjxDuL1yu+rtpz6JSYX+NivLQT7ybeSTxK
97e3eAdxE3E/cZX4uchXU7T/MWXXp1bxfbYUv6D4SsX3E2+H4FC8SvHTxfuJ
9xTvIt5BnFNbtP932v9C8RHijoq3VvwS8VHiI8R7Uw/F24uTOCe/xPUvEPcR
XyTuJt5fvJt4oHgv8V7iXaldybXwAWqE+BbmJLWSMa7YGeJ7M+eDMxl/uXPV
beSswmOa/aeVPdY7aqnWem1t21yxJ8WjyE3i08XtY/z9oOerWbhG9o/zUTv3
1NKVua9lL7RG8vtdpP0/1/vYTPx3DeUK8RfiCtdnrGrJtN5D8V21fwMd37hw
PdlK/Kniv2n/48WtyWeKb1t4PvC+VypeEu8mrkNtjPGI3ttd3FT7F4q3FqeI
/6h4W3Fj8qv4F/Ee4kbid8TrxYfGfMx0/BbkRt6RuL94O/GY3POjjbiF+GDF
dxC/q+NX6PjByePtQMXbKt5UvBnjU/Ev43pcfwlzUrxT1Ktl4p/FY8UHidvq
+J11/IDc32d55IuWMT7hP6pd7zaL/PCDeFLka75H+8KaFG1Kzif3kyPJlczJ
B3XuIeI5mXMWues0LbtpvV2Mb/Qi2ghNgDZYG/maGk+t/0k8pWxNsDDyJ2OL
GkWtIp/sG+drKf48WcuiedG+q5NrcZ3Q4mNz5/s9/v/8ih8Y87m5+Czx/uLO
4t0Lv6/O4uPEnSI/kN8aibcW94znaSjeSvxrspZFE6ONh4nbi7so3o56pusf
Esz3myA+oOwxzlgfE/dzlHgf8ZniTuJO4j3Eg5hzmXMguZCcSG5Eo6CVeWep
yu9/begaavX8snUP97Rd6Cvulf6mmfhaalLyQu2nRyG2It43c/qW0B/oETQk
WnJu7n6InEBueEnxc5gP9BTiO3PP96WhT0eKm4u3iHpLTaO20cM8ljuHk8vn
ld03lKXR5oa+qBvLj7pGjYaO/RH32zD02RO5e7WmoR/QJBzLOdYnj4msymOK
sfJLfK9K9DuMqUZVrtGMNTQCWuGGsq/7SLJ2fVP3P6VwvWwi3kq8TeH5yfdu
IW5WeNkx85wlhqZAW8wRr0ruYehl0NTfoj1y5/PRoZ9m5K5f46PeNdXSPLNG
OCF5TG9aZU3DWJ+mpUvZmuvI0Cu7xP3sHJoCbcGYG5Vcs6hdLcVHU3vF9TPX
kCOTxzS5kxzKWGfMN85cI5kLTyT3EvO0rTfvjvedWSN1pxaJi8w5jlzXOPYh
Rm4mx7WJ88PUVOYic2AIuUBLT61P0Laeik0UdxWfR04RXxD5jB6QXnBW7np+
aeb+fH7kl+ni/oXrOdr46uhHyFn9xFdlzmXXi7vH/idFfu4U+X77qM/km968
w8LfgP5/p8zfplfoh23F1eJTk99FK/GOhf2DweI7xCPE94gHieeLh4mnx/WH
iLuIr0r2BwaIDxafm5w/hosPZ3yLB4pvFA8XT81d34eGHpwZ7++6zLn47rge
fkM/8cLQU/SI9IrkFHI5OZ1csyjZf3hCPIH5Kh5KbhePEd8V75Meg14DDXVq
5ntGW6HZuVfuGS2PxzEl8zcizj1Mjv2v1L0P4Btm8U1yP8PQ2B+tOyjqDfd0
B/MnWZ/RX55a+B3xrtBIF+eeM+OjPvFsaOxxmccQ2rtt6AH02tOhydBmNbVt
O8WaJ+vpZ7TtW8VuDn0ylXMW1ngcyznQFnxzvj2aCm1FTW+feQwxlpjTo+P5
GHvHBjPnL809Zhm7jBHGCmNw41gsu1b2D2aMXJNcU7rE+z1Px5+T3C8doG1t
Co/R3vG8k3Jr7h6ZxzC1s20c3z7yE/WqQ4xX8gX9A/0N/lbdwp4U3tSf0lyV
ZA12X8WeFdqMhfUl8T4nJPc36P39In8xV6ixJyVrgHZxP8wtajK1mZpL7W0e
+QDN3T85n5LLyGn9kms+x1ODhybPMe6dZxge+aR15pqPdkezNcs8Z/tEfmJu
o+nOyq2ZlsTz9MndQ7xYsSZCG6GB0EJo1l2T9V8DrX+nbd9r2T85d8KbFO6J
VlWsJ+mVGO+TMs9Z5iI91rqKawi1ZN/kfuBjbfu12hoMLYZGG6j7SYVrJzV0
RG7Ntjzuj96iQcTbxfOiCR9RvF7ZWvHxZC/gC+1zVWF/iXqNB4gXiH+C17U+
c7/8vHhE2R4FXsXS5P4YPwL/Ac8H7wfPA+/jk9BfazL7b+8n+zH033h7+A34
cfgzeGevJfcWy8WzCn+fpjFf+ka9oP5Qk6hN9DTUWt4XvU7v5G/3l55x08Ia
HC2OZt85ebzeK66U7a3yPtDKNcS90F7J+n1d9Lv0WK/G+9o+2eN5rGINjBam
R36t4h6BXqFVfP/X+f7Vro+NYrwdl3wOzvWw4ssVr07uh+lXFlfc85Uzf196
QXqWGpn7QXoZnolnowcYlrvH4VjOUS95TtaM8XxYco/C8/NM9NJ40n9X/I76
xHyld/pL87cnvXny+qK4H3qgbWI+0Rt9Fd8H/Udvh8bJM3sEjFdqAl4l/iK1
Ak/1q8zH4LXigeKF4jHdpuvNiXpLziP34TnhzTImGBt4tI9k7kHxbum56b3x
uG7OrTmfy+yBoUVfTPZ7X9W2iwp7YOxPTVic7BnjHeN5fZhcYxdEfqX24mnj
beNZz87tQeBFoKc+SPYP8bfwvPG+ZxT2GrkfvDc8Hbwd9ORi9GvUR2oYtQxP
D28PDwgvaHpsYx0vjjHcJMbf9+Gh4KXQJ3ZN7ol/rNjzolcmp5BbGHMdkj0Y
fG/6fLwZPJ4vKs7ZXeIc5IpVcW48mTUVb8OrYUwyNvm94/jc9fNE3W+vsrUH
vzHwWwMa/0bxu5Ef8MzxzvGkl2XOIeSSjZ50Zk/nuWSN/FbmHIJ2RqOgdQZF
/sN/pjegR7g9d8/weuZvSi+B54T3tCI8JnLIhsyeHLkFjwIfAl8c76J7YS+N
mkPtoUZTq/GsZiVr1BfEZ5atXfFE8EbQQDNza8xzMnuKaE802l3x/NRjNOf5
4sPK1qJ4FBu9D/Gc3J7cxMyaC+2FhhsU10fb4XHideLZTU32RPFC8URnhD6a
HO/n6mSNd1pmTY/26xp6CI03OfprtN1GTZvbUx0R+gCvFY32cOgltNvYwtqN
McpYxYNeEe/z/tweDs+DxkHrkNO/j+9Jruc3pUXxPefl9oQXxvfDK6aGrI3x
znjg2+AV4SHzjeghf8vcr9Jb8hvC6vjebyR7APfEfETv4OF/FvnhntweOl76
deJvkj1xahE16a3kmsP56KeoRXhMt2buUfCeqHlfis8ouxZS46hN1ChqHzXp
88hX5CNq0qeRP6hVeIZ4h3jMg3Nr3iVoz7K18NrQB9SL/rk1C7WYmkztpofv
HPqH3h79dmjoFbQXHh4+F7443h4exMGZ+zW8iUPEAzNrPLQe9W5p5IPWoU/e
rNjzoV7hYf5UsWdBv4bn9XnFni56FU8KrwrPCO9oo2bM3K+OTPawPgx9i1am
xlHraot3TPaUlkV+Ojm3ZkG7oJl3T9ZPeLF4zk2SPcsOOv/hZXuZeJB4meh1
vEk0IloRD+zsZA/kmNCDeCP7FvZG6A9HJ3uqvTL3yHit6MHd43j0bcc4H/ng
wtwezvGZe0b0JZ7wsZn1N14xPcTsmP/zknvE2VFP6B35NnhfeGB8IzzTveJ8
43J7YofE/MQr4zeAbjF/J+bO1XjBeLLkbPR5n8yeL/oXj2+D3lezsr0/ftMg
R5Abroh6Tr0nvw/P/RsIv4WsD88Tj3XTzOMT75XfJD4K/cBvFejJLyv2wNGz
9BPTYr7PD/3BeY5K9gPWxPdj/xNze/gvxfjhtwF+A6mEHsdr4DflTTL7CfzW
TD/1bIyHjb9NFPY+8S+6Jeub3xRvU7aW45ociwbiXtBAaCE08UHJ+vyJij1V
xiuaemXosUG5PdvVoc/RZ+g3fqvjN8beufVSrcweLPXx64gzX/rm7vHo9TYR
54r/DynzKtY=
            "]], 
           Polygon[CompressedData["
1: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
45+GHPj/AwqZNG4=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
P0EDXFk=
            "]], 
           Polygon[CompressedData["
1:eJwtmQfUFUUShR//MzIDitqo7ylvSIIIYgITBoIEwYQYUAyIGcUsIiYERRDz
ml3D7pox7BpBMAAiyQDmAIJiQBAxIUF073ducU7z9+3qmdcz3XXrVk3Tk87p
O6SupH/6bz39+a1SKv2h/tKsVNquEK6VSrep/6XGTk+l0u/C9wh/Lnyc8Ei1
n9X/VWNtNb+J2pfq/66x5brXnbLXK5dKn2qsIttaXf9v9b+SfYhs64QfFp4v
fJLwn8KPCC8QPjn5N/it4Rr7Wramusc36pd1z3GyFcJfC/+kOVcmt+XqL8ps
W1HxWljTtsI3JM/9Tri58M3Ca4UXCG8j/A/hv4R/E95B+OzktbLmB9Umag07
6e+TGntd995M9sfUb6Oxl2RbqbFVwj8Lt9H1r2tsb/Wf0lhTzX1erZHW3iYv
lXrL/oxwQ+F1mrOz8Guav6f6b2j+HrLtntxnrKPaetVSaVPNb6Hru2v+Y7Jv
JNxM+ADh/wpvItxEuKtwM+EXYn3bq72o+7fW30c1NllrfUG4hfD/hGuau2my
rXXM53nb82waayXbMLUf1H9TY5vq/pcKLxWeLbyFcCH8nHCHWO8OwhOEd1f/
Vd3rq4r3Z7Lwxpo/SvZlwnOFt+T5hataf9L6dxRerWsekO0DzTlBtpXCdwt/
JvxZxfuzKO5XX/N/lf0Z9b/T2IWy9VZ7V/0RGvtWtouSbS8Ib6T55wsvFn5X
uLHw5JrXzjO8oft/InyS8EC1j9VfpfZP9b+XfZCuvTi5P0FjG3I2dc0S4deE
M+H9ZZ8uPFR4ka49RvgT4duFfxFeoXaT+rM0doBsu+makp59Q72Dhzn7ut9C
2e7VnD80dz/ZK7n3+FnZX9HY+bLN0ZyewvvLvlXuM8XZ2kX4b9nXyH6H8J5q
U9Q/VmPvs/eyf6/+nxq7Vba2sV/9NDaXZxVer2w+aKW57flN9kL4Q9nPE/5a
eKbw5rK3VvtR/RW8c9l6qb2j/pEae0/zD4z9GMCe1nzm16jfINZ7hdqPss/X
WE22u4TryvZfuOXeZN9fGP78XPjTxnrmPYQfFN5A+Jfwv93VNpRtY439qXe5
l3AmXF94vOZeK3yLcE/hQr41Gg4Q3of5vK+Yv05r+lfyGThO9z4+89noKPv6
uX3yIdk7CTcQXl/4AeEuwtsIbyFcr+ozzlmfp7aV+nurNcy9ZtZ+U/JefSL7
1rJ1jus5D/+RbR/hTYX/5gwJj03mmzman2RrWXhP2cvbkn1ob82vlO1bOxXm
Gs7H3ck+8q2u/zCz7yxUuyTzef2yZn9+PvgA7oCP8T18kFjAmR6m/lt1Putw
Ntx9ncaW1HymZwpfn/msw+EXh/9yr65hP0Vjn9b8TDzbauF2WutPGrsh4sHR
snVXm63+WRr7ouY2OPwH2wJ8XPhtOEX7fYTGPlR/FJwgWxfhGcIj8WHhfYXf
FD6bGFTzM1+g/oWZ38VRsn8k+1jhH2tu9MeoLVV/UsSDlzVnin6vovlPq7+f
xqbWzHlw33iNNUmOkb/j+3WOncSYFZnPF7GnvfAfmc/D6orfwcrMMYl384Pu
NxpfYs9k3zH8kd+bIts1mn+j9ruHrq9VvQejI76yNwerzSWWE8OJTcLT4B72
UPgQ4XnEZt4pfF1z7CUGHwQ/qb0K12hspmxtkp+9l/Bs4QlqO6r/BByo9c0T
7h/nY45wC81/Uf22vLOaOfvV0ANweUPhSaEfRidz9ITgW7i7LPxU5pixUPfL
ibHCKzlzyfuzTO3I5L1rUHgOtjHEUtn2ycyBcCGc/UpmzobL56p10LsbqHd4
duEY91bmGEfsm63WTPbTZD8P31d7Ft+R/Rpir/DU0CPfaX2L2FPNP1nzz5Ft
A7WXMnP6BfCJ2vaynyL7uXCxcEvhC4SHCS+BwwNfIvw5Z0Z4iPDQwmees08M
+blmTj06M+fCtYfEfuND+BKcD/cPCA6Dk/uGv8DVnZP36nKNfVPz/h2T+Yxx
1vqzZvXHaWy5bO/iI/E+0SsfV3w2R4f/4yP4Cj5+GLFA+PDMMaaD8Bf4hJ7n
PD3PxfgGnCs8Vnik8NucSc1/XfM7wvWFtQca5JLkM8fZw4dn6LfnCB+WWTOh
nTjDZ2Z+B7wLYvx7PFudYz8cCw/fGNz7lFqm399Nv38YZ1N4K+Gjhc8gNqO5
Msc8Yt8LapvJvovsh3Ne5HPbCHcTPkb43djP/sKnh565L/b/zOQ9uTGzz7G+
WXG+emj+AM2fKJyEuwsfJ1yn9k5mzr+eWKHrH4rzO1T4fbXWmr+v5h9VWE8/
HO9rMFynVpP9SNlPLcyPaCs0Fvr2L81/NDPn4T/Lg+/A7D365364V/hE+CjO
5zjdb5Tu11zP34fYIjymsCaYGXpgScUa8e3wX7Rjvcbirpg/tnAMm5E5ByG2
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
            "]], 
           Polygon[CompressedData["
1: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
uwt0CDD3/ibaTE5fkuq8gX/x/wd1wjYI
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
stRxeXXZVZiP7HwjuDzrPtbG9s97waVhvoqV5c/l0+rkvYaygb9jx8zywXWR
r4Ovh9eC71B8iM6xBeayrxuRfx3Zp80AJ0S++8aFc/QrWAWdL8AfFUeBjybG
8nn7w5nwK3RPRb5TFLvMikJeAG4INvx75PVQ/nWp2mPuSeQYo0bi3GIFsl3h
/C4LPvBy5KuQL6GcHjkfXA0vC79Fd3TkM1U+sk1qvrcolkPni5xjEq2hzkVN
5D/FPkdV4SvBxVnPs2bi/Kgb/1dEPi+rwXWUhVnv629hrWQr5UO/8tFPJF6H
a0J8O0F3Mdg2cd55GvJCkfOjjO6VxHnBdOU0wf/Kr1ZOHPvPTM2Vo02F70jt
d+R/2sTOd79LnZ++SptdwrlWDDwIfmbIHxUH3qP4WT4ndnwr3/UGWDd2/nuv
4ujY+9JBsTClN/wh8JvU45ZtKwdSXlxYPkh3NzgvtR+XPx8b9rGUzlvqttTm
zciWp94n7ZfiJcV1ZWLn2kWQz+F/lcT5zcLUOad8iPpQLv8yvHPsuSh3/x6d
AubYN3KcVp7yLeMbirxC4nz3Y/gVifPyT+GLwMdo5/uc9RVDDU4dG49DPhos
TWkOL5s4TlNeXwFZ+RDTpuBc6j2adX9xGJvGeHbe+bxy9iG0OzPEALp3dMf1
ib2mWttqYR9fgz8Blgxz0RrOCu2rn+sSvzF8RXt7c97H/Tn7IeVc83OOYxUH
VqFupcR522T0D6a+/3S/6C1Deyc/o71T7j6X/6Vix/aKKzKMoW3k2OBQ6vim
qeKR/5+jxPme9M9X3Bjur9fgFyWOtd9I/Y5xt854bH29V1SCX6A7G34meFeI
f5SfTs9Zfwo4lnJP1nG2Yu+74OeARfPOkRQb7KaPhpHv0MuC/1Ke9XBiv3Ux
sr/QaRDu5RPyfldqFWIlxU6HY8eLuvcLhVy+ATwBC+edHypPVH4tm6mNvGJ4
/1F8WC1vH7E8zEu579up71/5ulWx8/FOsv/Y511vLHVi+2TFnz/Gjp2Vj+/T
mY6dp/RJ/T4jX1Ejdu6gvS4X+11FuYDyrdp5+1bd+3pjUT5yRexY92f529Cm
7Fl2XVpxG/w0+NUhF9Vblt6O6iM/PbbNKm/anLOflD9fpDkmzs96M7bhYJOs
czDtu3K384JOHfgpsXNC2YnsSzmd9vaD1GNQDvdKah3ljyVj+0+9Zc0NZ015
1YDU9i97n6J8CvlIdAaCNSP7asWvypeVy5ZjTiMi5xrKmZVjKl8vnfe7lt7r
qlO3CrI3s45x9Tai2GAh8qvgK5RL0VdF/r2e9d2zLOStt6NzUngXUI4me9O7
yqV530Xyw2Uit6N3xJGp7xKN8yXdpTnbgPo4ObxZKF5qHuIlxUXPxY7/FTPo
HU3vP1fFPpfysR3Baym9so4htoe4VO3XiRyv1o3szy9SrMD/PpFjS8XldRPH
4FtSx1GKfS5kLGlk/6DctUyYi/z4ssj54w7FMZFjQsX9isMr6W6nnSdjr5Vi
pDWM+Qn4Wr1fJc5Nx6DTN7YPlD95KHE+ekneby+Kz98Bb867P937Gud7yF+M
ra88elbsM60YW7H22ZF9qeLXreH9Sm/AP4Q4QTGe7hS9rbWMraP3sXHhXlC+
Xy22L5FdNY2cU2j99uhOTpxDj5fNR7aT0ZFzD+Ug8nuLQmysO05vk3oX3Zjz
m63eZUvlnXtojsoD9+Tc786cYwPFWlNir5XWbGCIW9soHtP5yvt9p3MSclLk
82QzkcfQONin3lqHUfeCvMcqfZ0X5Tv7w52oe2+4cklkE7N+R9Ndr33cnDqu
09vO7BAb6G1yIvJ1wQ7/97aN7rCsc5ulIX7TXabYSfb2a1g33V+30saJkfdF
d7zuJs17Ajr/Avqsjxk=
            "]], 
           Polygon[CompressedData["
1:eJxNmWfYVcUVha9eNUruIWL0kHgScz9jR9FYI9HYjbEEAQtWFI09tmDDFrEr
1thFESmKAiLYKCJqrFgQbAgiIggiiDRrxLyve/8IzzN8s2ZOm5ld1l63pftp
nU9dscY//luJP11aarWvilptRr1WW1rWas/SxtN/hbE/MXcg7Vv6Cxj7jrmv
aB/Tn8XY3sy9DH4Z/CB4A/AO4JPBjzZqtVubtdq+jH3G3LuMzWDuFRv9hxhb
n7n9aHPpv8PYR8z9FTwTPAXcq6rVDgev2rpWWwS+CrwP+FPmXwfP5PoDwN/k
9XPBh4FX5vovwVdy/aHglcDTwF8wvxd4Rq73Y/B3Raxrtba1WitaV+Z/ZOwD
5ucxvinPOJL+Y6zndtbze8YOB98Dvha8EvfMBdd5R412MPf/wP1fMPZjGc+0
75jvWs7YbPDX9JfSDuH6FbnvE8a+Ze4v4I8Yfw38Jrgd7Wj6D/C+G3nf5uDu
4GHgW8Avgl8EP8s9W3Nvh5Y4O89wPHM7g1fh+fPAC8H30YbQv4BrGswNAY8A
nw/+OXgX2uQ8r4tZ++3MD6J/NGPf874tmR9N/1XG3mDuQ9rb9F9ibPuW+Aa/
ZTJjrzK3DXg8eEKuZyvwM+BnwOPAO4HfAj8Hfg78Z/Breb6TwTuA3yjCZrSd
22gD6V/EWMHcZrTh9Ccy9h5zr5fxbU8x1p65jWlD6Y9lbBRzG7pm8OPaKHgj
8CTwG+C3wbuC3wdPB08Bbwt+Hvwf2nb072TsQeZOB9fBO9JeL8IHLmC//gAe
A34BfHYVa/Ysvd+9OBN8LbgDeDb7+ceWeO5Ext8qo/+fPH/HOoEXgT8HLwHf
wT0jOftjwFuC/w0e0gib3Jj33QYeAT4IvD7zG5Rhv/0Yu4/2J/BJ4OH0h6aP
2ndM33UP3qR/TRF7s7Y+lvZ3czNs/m76h9XDF5620X+S6zfn+jXB+4P75vum
lmELY5nfgvnezZjzmvX53v7MD6N/DPP/bUZMeDD30/M2pgwAv1SPWOMeaRsv
FrF3N3DPQJ7XhbENq/CRQeCj6uE766W/Dsn1XteMvXBP1mLuCtqd9I/leT8y
txG4G7g/11wPHgB+BHwi8zVtAzypHmfsWR9fxfr/DW4L/iPzx4Of4f6+3L81
+O/g0eC7wVuBjwW/C34Y/N8yfN+YZez6La1PET6tb1fgu4rwUX3V+DGrHjHR
2LgC8eVTcAN8ZEvEozngX4C7gVto/bl/jD7BvU1w3/S/U/n234HvSHt9gfl1
8ht890u03bjmaubW0Cf53sVl+IY2qW0eBr4YvAL4+WbEcGO5PqFvdAb3NLaz
3keZ3xN8hrkEPA58AvhKYyX4GfAiY0o9Ypax64P05w943h76Rhnfeht4bX0f
PBI8ELwe+Pct0XdstL6X+caYZmwzRhgr3gHvluf5Vj18Xt9fl9aP/mhtuox3
3Kz/1+PdvwbfDh4Ffhy8Y+a7SXz/YL5/V/Cp5kfwSPB+4HPcD/Ag8BYZvyeA
HwD/hufdXcSZu+8vZDwXezZDMz57Zp5dF/D54Nn6l/vJ2IcZb/W1nWj/0N+Y
v6cZZ6jv3FvE2bbPfDKe+X7MdwSfC/4GPBb8t8STwQ+Bv8l8b/4ytw1l7G3m
3qENo7879nE5878yBoN/1RK+oE+cyNyyMnKtHEIusTe4B/gT7h/RDJ/x+uFy
COZKfRr8JHgkeHfaaeZurn+S6x+nzaP/Oe0J+kczfxnzi8GjwGtx/03c/5Q5
m7nLq/AHc7q5/ZMyctt88P7gaRmf5ARyg0/BM+vBSeQm2rS2XaM963pbwha1
yXe1RTlAETZ8uNwJvJxvOQ+8YxU2Lb6iHra+XcaDaYx9SLsafI+ximdM5do+
zTg7z3AbbQG8CnP/BP8VfC94HPOHgP8gX6Cdmc97pBkxx/nj6hGLtIFR4FPq
YRuDy9hr99yz8gxmNuL5no17/CX49HrsvXvkXhmjLq3CxwYmvzi9ijNY2Ijz
8Wz+xvyc5E8LuL8zeAn4PfCX4DFl5GJz8ibMHUH7eeuIYbW2EcOMZUvMQTz/
MZ45n2efDd4e/FQzztoz71TGmS8AX1oPW7gL/FQjYrixfLe0n1cZG9AMm51C
//1G2PKRzF9i/DTngB9OvtMLvHpLfKPfOoy2Kf2Hyoill4HXyLxtrpazyl3P
Bd8A3lfOkvbpt60uBwIfAr4I/D3vfxp8EfhWcIscuBkcVa76ObhjS5y557ti
EbawR9qf+zlbLkHrS387xmYxfzb4enOz14DXAR8MfoL33Qk+tYx4vjnzH4Gv
A9/n3nrG4I9p2xbxvJn0r9HmmN/MMwWfAr4KvJ6cuxkxbGLyEWPbg4m1n62r
4CjH5vvlLjeA79eWuf9918M1vcHrgN/OfKCv/AY8CXwU622DPXxmjmwbZ9Ir
47uxX874LP03i+CSfcAPgXuAV2mJ/bgOvCd4Ps+7Kvd7L/AC8C3gAeADwYvl
Nnn//uAvwa814+w8w12rGNsHPLge1y70zGg3y8VoXavYr4O4Zgnjh1exv92T
39zENXeAjwR/C+4Jvsm9A38IPiu/d105uPG9itjSTPvowfy/cv69tJ9b/Dbw
PHBr1vwv+kMZO4Z7L2X+dvpdGftKe2esn7Eo+UyblrBlbfoRuVjmU/f4Fy1h
s22K8DdteWz6sH7RLtvIjPfOGVNuAT9aj1izJviq5N9jks/cCR4HPrkK/v54
5td/VrFm1+YaTy9jza7dNbrWC91n+jsw9mkz+PzDRdjAmRmfBoEfS/vQhn6b
8VnbmtwM29LGjjP3g9cugpPLzc3p5vbzGFvN2oP5NYs4o+PLqKnGJ9+Qa/yS
dkW+7+/yfa4vwRe6/2VwyuPAd9WDa+7HNTfXw8f0tb2rOJ+t0x/l5yeCX8Rf
7m8GJ5ebvwYeCO4APgH8HLh/M/xL39Pn9L1ty8gN45J/blpG7DcmGhu3rMI3
Jyb/2CLvt2awdijBnerBkeXK8ucj6sHZ5e5HpP3VPbNm5AxzhznqJfBJeT7u
sXu9SRlcXI4uV9+3jFj+PPimZuTD4/J7zW3tqnjf8KxNOuR+yN+tddrl88yR
5sr70397FlG/Wk9o+5dkfJYza4vanLYnJ5BbyDHkCiPK4PfaqLYq53gCfG0R
XER7kEvcWgT3O6UK+5Czyd3OYP6aPL8ZfM+VZZz1SeAVmT8PfCN4U/D0ZtSc
2oo2q+3eAX5AXwCv0BL1xrDML22S33r9pZmPBud6XG+rrEe9XxvUFp8vw5d6
g1dqCc4vl5XTWgt05/sfBp+b9j0y98N4+bPkl/J1OY3cxpjVPeOJe2tMM7b5
jL7gVY2x4P7gu8p4xhlF7KHPdg9OAd9dj70xJvdIfndPGTX0P4pYg2vxm0eA
n6/HWlYGn1rEGR1dxZrPSb7oXrhnxxeRs93L7/i+bkVoBGoFu2U9L8eX+6u3
rEA+WagNtw0NRC3EMx3IfL+0H9f8g/yXdlgRNnZrGTH00CJiuLFVTcR3+i61
kq+N+UVoLDeClzejtrTGvBy8NPfvpxzBelZsGzWcvKdoHTWH52UMb53x5coi
NAf3ZxH3dwbfpo2XkbO65P6by9bIeD4sz8v8uTrPXaZNVBHTe+V+DSrDxi7P
/dX2rIGmFFHjWhv5TfKwNnzjGrTWbUOLs/78Wdagq7UOTcva1GuW0m/dOu6V
37Xi72LGrq7iHnW5Ip/VLb9PDc3a9YcyamJrYa9V41HrsQY6NvW8el5/RRVn
5FmZYw8FzyqDG8mR5OrqadPlGu5pFTFWX9Vn5UIzEhuD9838bu6Xkx9QxR67
1+0Zm8bcZ7RdisjR5mrP1LPdmbG5zeAYe2a871KFj+lrxhBjifbbM+3p3jJi
Vs/Ml0PSPjoVwUHkMsuakbv9vl5l5OwT8nw9r/cyX/o9Z6f/9cj7j6qCj88r
Qt+aU0aNpe/os/qu/nhW+rPv65jXT60HF1W/tRayJvq8DM1X7VfN75IqNOIJ
mX/VjtXrrP3VACaVoZE8kf6nPakRjcr8r3akJjQm7c36VQ1RLdGatWcVGsAX
RWoOZWgKL+f71Rqsf6eZO8HTy9CD1Va1x8uq4MjagzWIequarrWJGrJashrG
4rxfbWNBzlsvqucexPz3RdQn+qn6tzWttax6rvr5Mv7OZ/7rMux3Vr7P2sea
eXnun7V0tzLq91aMvdqM/CH3kIO0LcImtU05hFzip5q6CM5wPnMnl1E/eL3c
ZVLyGXPuaWVwaLm0mozajHzqd0VwbO3VZ/6yiBrAd8nJ5ebWCBuXoVeq1eoz
+o77p+9MLaL2cM/d+9lF1Mdq+p61NqKtWN9cmN/vetxPbUmb0hbfKeMsjcnG
Zs/cs/cMPcv5Zdiq13dM/rVWERrDsWXWDEVwWGsJOceqRWgKchE58O5FcHz5
ov74lyJqIv1D/90543En7ONz8E4ZP64vowaaSetdRm1kjbNePm+vKjTbDhn/
O1ahgbtf44rQxufm893vi5mb0wyu6vlcUEaNuVoRHMraU01Nbe0C8MFlcNo/
F8F35bqvgYsiakprSznXCnm+cjFrvq0yn1gLTsh6Rc7RvQyN/SdfK0J7P7cK
/Uyf0/fMifqmHFwubk43dx1cRK63ht0gn+f7jRHGCnOYscrfLLRtc6q51Rpe
32uVsX9u2o8+qW9+kfZgDDeWf1/Gbzf6mL7WK+PtAUXEPnOuudyc/k3WWdaP
cgK5gTWUtZTz3+W5WQ+bg83F1mTmxo5F1Gr6QO+M19qCNaC1oPWodZw2oG3t
VoRtaAvWwj7TZ6svq4WriW9UhSYuVlPbpAqO3Cf1eLmzv6kZW5ZlrFA/97ej
joy1KaMm1/+skTerQvNW+zaGGksnpz9MLOK3kQllaLf+JuFvE3LiwY2oCeTK
11aR61dP/dcYY6yxZrd2l3N/xvVn1YOL+xuSvyUdCF63jBp7bt4vd7AmeKQR
mqW1ghx+QOorcns1crXyzuANqviNzN/K1ETVRs2Z7TPenFOGhqKWoiZ7VhUa
5seN4JxyT/UO64mZqY+p9yxphCapNqneo/6jptqhCk15auptas1q7GrtXd3P
MjQxtTE1t13A+5dx7ZTUL9Vo1Wpn/5+m6N+DyvBHNaNXc/3bl8GJVy4ihvu9
al5qX2pM+5ShV80B9zL/llGzvZH7sUM+U19fmO8aTVvUiLGuZeiNz8kxy4jf
/kbgbwVq5ttWodGq1RoPD2B+DPirnN+jDE3r/dT7tuH6IeAPUk9U/7PmtfZV
kxzfDI33zdxP91eN+pXU29Su1ai+bkRMN7Y/C1YLVZM6sIxv/aEROclvVgNX
C5+cGrE16Vtp39aqw8EzGqGR71zGb3JqD4OL+K3OM/G+jnlW94NfbkQNbG2s
Rroh1/aph3bqM1zb9EY8Ww1ly8yXaivqn2Pz96D2VdRgai3W89Zmalrtku+p
de1UhX0sz98jrDGfTv+29nQP3Vv32L3t1wwt3fVsUUWMNFYag43dXTMfLmvE
WXtG1t9LG3F27rl7vzht3Ryn1qLmYO6Tn25TBEeQK1gjj0l7tnY2Zhm7jInG
xr3KqKdnpr6uRqCWcGLGB21SLUtNVVv9H5J786c=
            "]], 
           Polygon[CompressedData["
1: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
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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

            "]], 
           Polygon[CompressedData["
1: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
CzZna+721eTLgfm2sXFHvM25P76tvJ7jD8r8vjGXsZdzeq2ON6tztV/NeMva
M+2ZfGL+zzce+XfjZrz9LJnvT+7v63XY2KoZPpK21ze5CxuRL/at7mP6XNKI
OTk338IuAB/XjDcxOV0ul9PN5XTK9zFzxOaKF6bcOTxdx3onpr/gXOT8pZvB
IfoCcsyKzfDJ5J7nS+ju1rRVHVE84+dS9mae11Dkq3eETV6L+iGNsNX6iHUz
fC59R3VIXVIHlsn3EHVFnTFWlSNGVmGz5A7vnHHY4LyLvqGNqYJTzA3ICZOq
sKFyhTlTc6fmaPcvkTOeUoUNNpdsDlL/23jw0jpyvHK7HDC3Dg4x/2q+Qm4x
Z2Xu6nt8mHVL5Gdne0dL5DM8A8/i8kbk8eXIdauIz+RO77h33Rz7B3X4EIOq
8CH0LczXyhVyxpElOOPsKnLccokcsGYVPonc4BvQkLw/3pUu+b6pPX033+/2
zfvn3vqmu2fah3l1vEHthnxUI96mzNnvmPbJXL45+J1Tv7XPvrH6luob3xcl
3ph6JT+bu1VH1VXfODq3R47AXIE+4L112FftqRzwSYk3Td82jU/3K5EjVr/P
zfeE9nwv1Ka/lvrse4/vD77nmtM1t2s87Fu4d3JQzs+3OHVQXfSOvFfiDePY
xL5taEMGpL1fUMdZnlSFj+CZLsr755uob6Pdc3xtwMslfJTJVbzR67t45737
M8Gfl3gjGZvn7dvJ/wEPT02b
            "]], 
           Polygon[CompressedData["
1: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
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
2a+W97bezPZR/0RmLq73W/WrN7kcNv8AVrmAOw==
            "]], 
           Polygon[CompressedData["
1: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
AwzO/d+7Cv15ZxE9FvWQHOz2fJ+9q+Ds+oDvXi4/l+MHiuAQM8vQHGOL0Ddq
kUWN4DL+P7XUC+Dzk38+W4bevw3cFjwKPM96n/4yEfwi+LyMR/OzPcELitDH
9grl4HI5c7a5e3xiOeeurHcC+NKs3/JdOclUfHt6PbiK+lStqeYcUIWutNey
Z3PoTnOgubA/9w0oo2c1OfnLfmVwpNeS38idfu3+JJ88Mu/x+OXMp+qv97Oe
tmf+34DfrMd6ZteDH/t7TBn5Xv47Hzw566/8dgb4LfCpZXBCueG07EedjH1e
PerFsWXwRWPc2Daf/JbjD+uRE8wN9oDk9nLggZn/J2a/rJn1ndkIvmk+Oolr
zwYvt//YFP2QP4JX1KO/cjL4VPCieuS/o8vgp0vrsefuvfr8iyJ6ssvzP7rW
9/K/q2nkdHI5tc6n1n+u/yHXTy6Dk4/M+D+A9X0ivyhC87xbRg9gQvrj3DI0
pdrSftH8Mji2XHs38IoyOLHc2J71wVXo8c+K6Lm1aYke9qzEh1ahWdQu9hgP
LaNf8krGk1rDHrX9ha2zH2XPcmrGf98qeooTMn/Yy7OfY+/Y/kyXKvoTb+V6
PiqjRz8l8+vHZfQD7Hfag7EXY/9mcsa/8W5/4c3MV/Yi7Dm8kfvzSRk+pC/J
t+R25zPaJr+5DNtuWb/lgHLBvulfahDfve9Qbq/m8N3Wq/Bv/Uet6H+ylzSx
iP/qnqg37Cm5V/qQvvJlPXxLn5kuF62HL6kp1BZdi9Ci1iC13YJ61KZjs559
kL7ep4xesf5vr+78nN+enr2968uonXKMy8FnlVErrZn2Qo0fa+GSemgtOcW8
vF+ucUrmCzWv2neTKrSWPT17e8agvRQ1p7Hp/hrbxrixe2bGl8+zVm9URWy4
5+597+RXcmC58MZVcBs5gFygUxXcQg5zV65PuxxELiJH1L5DEdzRHou9DzWK
WsWejXzBHoO9HHsiaqPeRfRK1CRyoT2L0Cr2IOxd9CiiN3F2GdzA/q+9ZHtG
M/P/mcuOS/vH9cgt/l/357P0B3OOucMcYi76YRXcRE4rtz2oDK7xEfbTwPuX
kUvNieZG4+3t/5cb9Udzzxv5vvunP5tzzD32AIxNY/SE9Ce1lRpL7Tow128P
W64mR5qT/EjuJKdoSf0vlzHn2IseXUQueq+MXGJOsXdojbR/Zc/W2mkOsvaN
KSI3WbPlTjcXUcutQda+i4uoTdZAa5s1ztpojVOLnFNE7RtdBje1B24vfN8q
arU1236GNdJe5NAiauc2VWiBXvl+L0x/9puAXHqzKmL9p+AbGlGz5QrDiqjl
D+Xz+qe/PVWG1lYv22tU09p7s0em1p1eRq32G8SCvF+urea2N+A3B7WQmkft
I6dRO9pDletY88199vzlAmq+R5viG5hacHPwfU3xjdFvjWtVkQ/8ZuO3G/WJ
Wnp0PbSimtdegd+w1MJqZL+l+A1G7byqNea/J/WMGlQt6vcttbAaWa36eD20
8+5VcAe/UfqtsmvO5/PV6j3zfjWt2l6NqDZUI6odL0n/27QI7SiHlvvKgeXW
aiBrrTV3QK5HLf5YPbRy98xvfhOzd9KtjG+JD6Ve2ynv9xuU36I65/9Xj9lL
sUdnr04N8beM3xkZD/Ye/B6yGltX1tSBevd1+q89anv/cnp75/bs5fpLMr/L
d+W21kh73/awrZ36m1ptg8y/fpNUy9sjsFdwZebjeubPDsnH1ayuxZpn7bSG
WgtnpX/6jcJaZ03rmOuz1qnx7K3sXIT2M57NL5sVoY+OzHo1tR7czJosf55W
RK1Wg6nN1Ghqs7VbolbbY7fX/ssy9LM9LHtZy/P56ge5jJpfrf6zInoBajzj
r7UI7acmV9ur8dXqR1Xx7cn/q1bvl/ViTD16JfqrvYxR6d/GqLHq/fYK2qXe
8JuJWuK/oU34yg==
            "]], 
           Polygon[CompressedData["
1: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
7MtR/A==
            "]]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0UsrRGEYB/DHXJhhCEuXZMUHcCk7topSsjBRViyMLNgzH4ASC7nfrW3I
t1C+iPu4DL9TFv9+/06n87zPe7rnliZKNRGxKKPZiBUO1EYMyrpe5AbXuMdd
XjNaI67w2xJxySp/5EL/5jm/eMZPVuRU/+AJ33nMN77Kkf7CQz7zgE/c542Z
m9xjmWWucpYzsqAPscgujicz7VKREf2R/bxnL3e4Le36Mps4xeQeqs0RqWQv
ppM9nSGDFNPitcjQmMiyjrWJktNzzDPPetazIYleYIGNbGTJx9q4xR7e8k76
9AcOJ/fEMXYY2CnT+qRn8///6w+57DRG
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0csuQ1EUBuDdi7aoS9s5MUVCjHiAotStj2CueBbiIdBS1zmGIkSYMZMI
c62778Tgz/fvwT5r7ZyB5dVKNRZCWJGzVAh9DrV0CHUZ0m85zhaLzGVCqDBZ
CGGJCS4yzpgsRB/jPH/zIczxh99S1r84y0/O8IPvUopmcJpNTvGNkxw0c4IF
Dkd37NLPe95JXm+wjVtsWWGda/Kql/nIMd6wi1m50J+9+ZRX3GbczB0muMsk
a0wxLXU9wz22c58d7JSGnuVBNIOH7GaPHOm9PGaOJ3wy8zy6b5drjnBUHvQS
X1hlkxvclKQ3XrqXi/3/rz9sGTdA
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0bkuRGEYBuB/rMPYZ1yAhMQtqEUjprEvw4jamCjphCBaLsA0RMEF0EgU
XAAXQCJU9nXG9pwo3jzvOc2bL3/bTL5/LhZCyElXPIRTH+01IXTIud7LS+Z5
x3WWGE+FUGQ1P1nFSvnQK/jOcr6xjDF5jYb4wt9kCM/84bc86V98ZIkPLPKe
BZtX3OAF53nGNPvkSO/kAetZ4K1bbmRLP+Ea97jIFS5LTs9ymj0ciO6wORjd
xaHoTg6zlgkZ0es4Gm1xjA1slHG9iRNsZoYtTMqknuIUW5llxuYsl7jAHe7K
qn7MTV5zO9p3V0L29W7/DmP/7/UHMeg5Ow==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Ukuw2Ecx+Ff/9rqFGNbLIjhAOwkwgFYWrAREmxNByAhVhzAVLMDWIuN
cAOJI4gjiKH1NBafPN/Fm7z/YWh5Y3Y9FRFrus9HbCYRZ4WImrbtJx7wnUds
8I6lSsQti7xhgXld2zlesZWXzDKjCzvNc7awxoQpndnB0+Yd5YgT1nnM3mLE
IVPc4Ydn2OILn7VqX3Ke+5zhEhc1ZU9wjIMc4bf3/FLVfmOej/zxIQru/GWR
dZbYYBvbFc52MMVOJuxit1rsMtOsMMMqe5Rtvgdb2cccX91Z4SeH2e/5BjRq
j3OSC5zmLvc0Zz84v5L8/68/28guQw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0bsuA2AcxuFP69xjWi0tBovOUoOwOB9KF7tI7DQM4i4sxBU4U+oCuAA2
IVwAF8BCDDyJ4Zfn3f758g2s1ZY3mkII6yrFQihEQ8jEQ8hq0B5hmSsc5zar
TOdDWGKKi0wyoYod5wJjnGcnOzRnt3OWbZxhK1s0bTdzilFOMsIJ7ro5zB2W
uMoixziqhJ1n4I83fEZCeOaT3u0GX3nAB25xU3d2lTcs85DJXAhHTPGYaZ4w
w6xO7S6eMcdz5tmtC7uHlyywziJ7dWX38Zr9bLDi5i1rvOce9/Vi1/nGR37w
i9/6tYcYj/7/1x8nEy5A
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0bkuRFEAx+EjEuvMWDNjZwqJZxHr2Ok0NIwID0BHggcg6qEREnpLTyEq
WjEYY699N4pfvn9xk3PPvenZbGaxJISwoP1YCBelIWzEQ9jUtX3Ee94yzwJ/
2ZgK4YcN/GY96/Rl1/KTNfxggnG92zEWWc03VrFSBbuCryznC8v4HJkI4YFF
Z9/wjpc84bHO7C0ecJl77GefduwerkfvwVXm3fNJ8/YVZ3jIgegeyRAGo3tx
KLonh5lkShm7iSNs5ihb2Koxu43jbOcEO9ipSbuLU0xzmufOnOMjV6Jv4v1i
WrO7uc1e7jLLJeXsnOdPS///1x8HlDgz
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0ckug1EAhuFT/VeGDqg2aOtHxXABmtiyEgvdUxGxMW1Z2JC6APNQei3C
tRBXYB6exOLN863OycmJV3dq24kQwpZyqRA2IiMdQkK79hgbnOcx19hioRDC
HfO8ZR9zatq9vGEPr9nNrK7sDC+Z5gVT7NK53ckzdvCU7TzhvjuPuM49LnCT
ExxX3Y5Y44s3zPGRD6raLU6xwRJXWFfWnmHEmK9J78iH8MY831ngB/s5oE97
kF8s8psllvVjD/GXMYNzhzmihD3KNlaYZNWdGS6xyAMeatJucpr3nOUTn7Vo
l7kc/f/XH/XpLTs=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Tsvg1EAx+EjUTYtrepFUHcDs6j7dTcSix0LiQ9hFhES97tIbCxi4QNo
EBMfgMTYxuARwy/Pf3iTc96c3PzS9GJZCGFBa9EQ4pEQlmMhrKjJ3mQ379jH
V06xPh3CJLOcYIZpjdspjrGOo0yyViN2gsOMc4g1rNagHeMAo+xnFfP8dmYP
35jjPRPc5pYq7VWWykOY4xfzf/fVh51kgT/+75EvfNatfc1LbnCHmVQIu8xy
j/XcZwMbdWA38ZA5HrGZLTq2W3nCNp6ynR06szt5zi5e8MqZNyzwgUWW9GTH
3fmdvfzkDGdVtNd9UxH5f69fHHY07g==
          "]]}, {
         Line[{4350, 4349, 7261, 4367, 6433, 7269, 4390, 7285, 6439, 7267, 
          4408, 6449, 7302, 4428, 6458, 7326, 4452, 7323, 6463, 7341, 4469, 
          6476, 7362, 4487, 6488, 7385, 4511, 7400, 6494, 7382, 4527, 6507, 
          7423, 4547, 7445, 4545, 4573, 7442, 4571, 4594}], 
         Line[{4351, 6429, 7262, 4368, 1370, 4391, 7284, 6441, 7288, 4409, 
          6450, 7307, 4429, 7325, 4430, 4453, 7344, 6465, 7340, 4470, 6478, 
          7366, 4488, 7384, 4489, 4512, 7399, 6496, 7404, 4528, 6510, 7427, 
          4548, 7444, 4549, 4574, 7459, 4575, 4595}], 
         Line[{4352, 1357, 4370, 6435, 7271, 4392, 7287, 6443, 7292, 4410, 
          7306, 4413, 4432, 7328, 4435, 4454, 7343, 6467, 7350, 4471, 6480, 
          7365, 4491, 6490, 7387, 4513, 7403, 6498, 7409, 4529, 6512, 7426, 
          4551, 7448, 4554, 4576, 7461, 4579, 4596}], 
         Line[{4355, 6430, 7264, 4372, 7276, 4376, 4394, 6445, 7295, 7296, 
          4412, 6453, 7314, 4434, 7333, 4438, 4456, 7353, 6470, 7349, 4473, 
          6482, 7375, 4493, 6491, 7392, 4515, 7412, 6501, 7408, 4531, 6514, 
          7435, 4553, 6521, 7452, 4578, 1703, 4598}], 
         Line[{4356, 6431, 7265, 4374, 6438, 7279, 4395, 7294, 6447, 7299, 
          4414, 6455, 7313, 4436, 7332, 4443, 4457, 7352, 6472, 7357, 4474, 
          6484, 7374, 4495, 7396, 4502, 4516, 7411, 6503, 7416, 4532, 6516, 
          7439, 4555, 7455, 4562, 4580, 7465, 4587, 4599}], 
         Line[{4357, 6432, 7266, 4375, 7278, 4385, 4396, 7298, 6448, 7282, 
          4415, 7319, 4424, 4437, 6462, 7335, 4458, 7356, 6474, 7338, 4475, 
          6486, 7378, 4496, 7395, 4507, 4517, 7419, 6505, 7415, 4533, 7438, 
          4542, 4556, 7454, 4567, 4581, 7467, 4591, 4600}], 
         Line[{4359, 4366, 7270, 4379, 4389, 7286, 4399, 4407, 7303, 7304, 
          4419, 7327, 6459, 4441, 4451, 7342, 4461, 7363, 6477, 7361, 4479, 
          4486, 7386, 4500, 7401, 6495, 4520, 7421, 6508, 7424, 4537, 4546, 
          7446, 4560, 4572, 7460, 4585, 1716, 4602}], 
         Line[{4360, 4369, 7272, 4380, 7289, 6442, 4400, 7305, 6451, 7308, 
          4420, 4431, 7329, 4442, 7345, 6466, 4462, 7367, 6479, 7364, 4480, 
          4490, 7388, 4501, 7402, 6497, 4521, 7425, 6511, 7428, 4538, 4550, 
          7447, 4561, 1697, 4586, 7470, 6528, 4603}], 
         Line[{4361, 4373, 7274, 4382, 7290, 6444, 4401, 7309, 6452, 7311, 
          4421, 1476, 4445, 7346, 6468, 4463, 7368, 6481, 7370, 4481, 4494, 
          7389, 4504, 7405, 6499, 4522, 7429, 6513, 7431, 4539, 7449, 6520, 
          4564, 7462, 6524, 4588, 7471, 6529, 4604}], 
         Line[{4363, 4377, 7277, 4384, 4397, 7297, 4403, 4417, 7315, 7317, 
          4423, 7334, 6461, 4447, 4459, 7354, 4465, 7376, 6483, 7373, 4483, 
          4498, 7393, 4506, 4518, 7413, 4524, 7436, 6515, 7434, 4541, 4558, 
          7453, 4566, 7466, 6525, 4590, 1722, 4606}], 
         Line[{4364, 4381, 7280, 4387, 1418, 4405, 7320, 6456, 7318, 4425, 
          4444, 7336, 4449, 7355, 6473, 4466, 7377, 6485, 7379, 4484, 4503, 
          7394, 4508, 7414, 6504, 4525, 7437, 6517, 7440, 4543, 4563, 7456, 
          4569, 1709, 4592, 7473, 6531, 4607}], 
         Line[{4365, 4386, 7281, 4388, 4404, 7300, 4406, 7321, 6457, 7322, 
          4426, 4448, 7337, 4450, 7358, 6475, 4467, 7380, 6487, 7381, 4485, 
          7397, 6493, 4509, 7417, 6506, 4526, 7441, 6518, 7418, 4544, 4568, 
          7457, 4570, 7468, 6526, 4593, 7474, 6532, 4608}], 
         Line[{4597, 4582, 7463, 4577, 4557, 7450, 4552, 4534, 7430, 4530, 
          7407, 7406, 6500, 4514, 4497, 7390, 4492, 4476, 7369, 4472, 7348, 
          7347, 6469, 4455, 7330, 6460, 4433, 4416, 7310, 4411, 1410, 7291, 
          4393, 7273, 6436, 4371, 4353, 7263, 4354}], 
         Line[{4601, 6527, 7469, 4584, 6523, 7458, 4559, 6519, 7443, 4536, 
          6509, 7422, 7420, 4519, 7398, 4510, 4499, 6489, 7383, 4478, 7360, 
          7359, 4468, 4460, 6464, 7339, 4440, 7324, 4427, 4418, 1432, 7301, 
          4398, 6440, 7283, 4378, 6434, 7268, 4358}], 
         Line[{4605, 6530, 7472, 4589, 7464, 4583, 4565, 6522, 7451, 4540, 
          7433, 7432, 4535, 4523, 6502, 7410, 4505, 6492, 7391, 4482, 7372, 
          7371, 4477, 4464, 6471, 7351, 4446, 7331, 4439, 4422, 7316, 6454, 
          7312, 4402, 6446, 7293, 4383, 6437, 7275, 4362}], 
         Line[{4610, 4609, 7475, 4627, 6537, 7483, 4650, 7499, 6543, 7481, 
          4668, 6553, 7516, 4688, 6562, 7540, 4712, 7537, 6567, 7555, 4729, 
          6580, 7576, 4747, 6592, 7599, 4771, 7614, 6598, 7596, 4787, 6611, 
          7637, 4807, 7659, 4805, 4833, 7656, 4831, 4854}], 
         Line[{4611, 6533, 7476, 4628, 1745, 4651, 7498, 6545, 7502, 4669, 
          6554, 7521, 4689, 7539, 4690, 4713, 7558, 6569, 7554, 4730, 6582, 
          7580, 4748, 7598, 4749, 4772, 7613, 6600, 7618, 4788, 6614, 7641, 
          4808, 7658, 4809, 4834, 7673, 4835, 4855}], 
         Line[{4612, 1732, 4630, 6539, 7485, 4652, 7501, 6547, 7506, 4670, 
          7520, 4673, 4692, 7542, 4695, 4714, 7557, 6571, 7564, 4731, 6584, 
          7579, 4751, 6594, 7601, 4773, 7617, 6602, 7623, 4789, 6616, 7640, 
          4811, 7662, 4814, 4836, 7675, 4839, 4856}], 
         Line[{4615, 6534, 7478, 4632, 7490, 4636, 4654, 6549, 7509, 7510, 
          4672, 6557, 7528, 4694, 7547, 4698, 4716, 7567, 6574, 7563, 4733, 
          6586, 7589, 4753, 6595, 7606, 4775, 7626, 6605, 7622, 4791, 6618, 
          7649, 4813, 6625, 7666, 4838, 2078, 4858}], 
         Line[{4616, 6535, 7479, 4634, 6542, 7493, 4655, 7508, 6551, 7513, 
          4674, 6559, 7527, 4696, 7546, 4703, 4717, 7566, 6576, 7571, 4734, 
          6588, 7588, 4755, 7610, 4762, 4776, 7625, 6607, 7630, 4792, 6620, 
          7653, 4815, 7669, 4822, 4840, 7679, 4847, 4859}], 
         Line[{4617, 6536, 7480, 4635, 7492, 4645, 4656, 7512, 6552, 7496, 
          4675, 7533, 4684, 4697, 6566, 7549, 4718, 7570, 6578, 7552, 4735, 
          6590, 7592, 4756, 7609, 4767, 4777, 7633, 6609, 7629, 4793, 7652, 
          4802, 4816, 7668, 4827, 4841, 7681, 4851, 4860}], 
         Line[{4619, 4626, 7484, 4639, 4649, 7500, 4659, 4667, 7517, 7518, 
          4679, 7541, 6563, 4701, 4711, 7556, 4721, 7577, 6581, 7575, 4739, 
          4746, 7600, 4760, 7615, 6599, 4780, 7635, 6612, 7638, 4797, 4806, 
          7660, 4820, 4832, 7674, 4845, 2091, 4862}], 
         Line[{4620, 4629, 7486, 4640, 7503, 6546, 4660, 7519, 6555, 7522, 
          4680, 4691, 7543, 4702, 7559, 6570, 4722, 7581, 6583, 7578, 4740, 
          4750, 7602, 4761, 7616, 6601, 4781, 7639, 6615, 7642, 4798, 4810, 
          7661, 4821, 2072, 4846, 7684, 6632, 4863}], 
         Line[{4621, 4633, 7488, 4642, 7504, 6548, 4661, 7523, 6556, 7525, 
          4681, 1851, 4705, 7560, 6572, 4723, 7582, 6585, 7584, 4741, 4754, 
          7603, 4764, 7619, 6603, 4782, 7643, 6617, 7645, 4799, 7663, 6624, 
          4824, 7676, 6628, 4848, 7685, 6633, 4864}], 
         Line[{4623, 4637, 7491, 4644, 4657, 7511, 4663, 4677, 7529, 7531, 
          4683, 7548, 6565, 4707, 4719, 7568, 4725, 7590, 6587, 7587, 4743, 
          4758, 7607, 4766, 4778, 7627, 4784, 7650, 6619, 7648, 4801, 4818, 
          7667, 4826, 7680, 6629, 4850, 2097, 4866}], 
         Line[{4624, 4641, 7494, 4647, 1793, 4665, 7534, 6560, 7532, 4685, 
          4704, 7550, 4709, 7569, 6577, 4726, 7591, 6589, 7593, 4744, 4763, 
          7608, 4768, 7628, 6608, 4785, 7651, 6621, 7654, 4803, 4823, 7670, 
          4829, 2084, 4852, 7687, 6635, 4867}], 
         Line[{4625, 4646, 7495, 4648, 4664, 7514, 4666, 7535, 6561, 7536, 
          4686, 4708, 7551, 4710, 7572, 6579, 4727, 7594, 6591, 7595, 4745, 
          7611, 6597, 4769, 7631, 6610, 4786, 7655, 6622, 7632, 4804, 4828, 
          7671, 4830, 7682, 6630, 4853, 7688, 6636, 4868}], 
         Line[{4857, 4842, 7677, 4837, 4817, 7664, 4812, 4794, 7644, 4790, 
          7621, 7620, 6604, 4774, 4757, 7604, 4752, 4736, 7583, 4732, 7562, 
          7561, 6573, 4715, 7544, 6564, 4693, 4676, 7524, 4671, 1785, 7505, 
          4653, 7487, 6540, 4631, 4613, 7477, 4614}], 
         Line[{4861, 6631, 7683, 4844, 6627, 7672, 4819, 6623, 7657, 4796, 
          6613, 7636, 7634, 4779, 7612, 4770, 4759, 6593, 7597, 4738, 7574, 
          7573, 4728, 4720, 6568, 7553, 4700, 7538, 4687, 4678, 1807, 7515, 
          4658, 6544, 7497, 4638, 6538, 7482, 4618}], 
         Line[{4865, 6634, 7686, 4849, 7678, 4843, 4825, 6626, 7665, 4800, 
          7647, 7646, 4795, 4783, 6606, 7624, 4765, 6596, 7605, 4742, 7586, 
          7585, 4737, 4724, 6575, 7565, 4706, 7545, 4699, 4682, 7530, 6558, 
          7526, 4662, 6550, 7507, 4643, 6541, 7489, 4622}], 
         Line[{4870, 4869, 7689, 4887, 6641, 7697, 4910, 7713, 6647, 7695, 
          4928, 6657, 7730, 4948, 6666, 7754, 4972, 7751, 6671, 7769, 4989, 
          6684, 7790, 5007, 6696, 7813, 5031, 7828, 6702, 7810, 5047, 6715, 
          7851, 5067, 7873, 5065, 5093, 7870, 5091, 5114}], 
         Line[{4871, 6637, 7690, 4888, 2120, 4911, 7712, 6649, 7716, 4929, 
          6658, 7735, 4949, 7753, 4950, 4973, 7772, 6673, 7768, 4990, 6686, 
          7794, 5008, 7812, 5009, 5032, 7827, 6704, 7832, 5048, 6718, 7855, 
          5068, 7872, 5069, 5094, 7887, 5095, 5115}], 
         Line[{4872, 2107, 4890, 6643, 7699, 4912, 7715, 6651, 7720, 4930, 
          7734, 4933, 4952, 7756, 4955, 4974, 7771, 6675, 7778, 4991, 6688, 
          7793, 5011, 6698, 7815, 5033, 7831, 6706, 7837, 5049, 6720, 7854, 
          5071, 7876, 5074, 5096, 7889, 5099, 5116}], 
         Line[{4875, 6638, 7692, 4892, 7704, 4896, 4914, 6653, 7723, 7724, 
          4932, 6661, 7742, 4954, 7761, 4958, 4976, 7781, 6678, 7777, 4993, 
          6690, 7803, 5013, 6699, 7820, 5035, 7840, 6709, 7836, 5051, 6722, 
          7863, 5073, 6729, 7880, 5098, 2453, 5118}], 
         Line[{4876, 6639, 7693, 4894, 6646, 7707, 4915, 7722, 6655, 7727, 
          4934, 6663, 7741, 4956, 7760, 4963, 4977, 7780, 6680, 7785, 4994, 
          6692, 7802, 5015, 7824, 5022, 5036, 7839, 6711, 7844, 5052, 6724, 
          7867, 5075, 7883, 5082, 5100, 7893, 5107, 5119}], 
         Line[{4877, 6640, 7694, 4895, 7706, 4905, 4916, 7726, 6656, 7710, 
          4935, 7747, 4944, 4957, 6670, 7763, 4978, 7784, 6682, 7766, 4995, 
          6694, 7806, 5016, 7823, 5027, 5037, 7847, 6713, 7843, 5053, 7866, 
          5062, 5076, 7882, 5087, 5101, 7895, 5111, 5120}], 
         Line[{4879, 4886, 7698, 4899, 4909, 7714, 4919, 4927, 7731, 7732, 
          4939, 7755, 6667, 4961, 4971, 7770, 4981, 7791, 6685, 7789, 4999, 
          5006, 7814, 5020, 7829, 6703, 5040, 7849, 6716, 7852, 5057, 5066, 
          7874, 5080, 5092, 7888, 5105, 2466, 5122}], 
         Line[{4880, 4889, 7700, 4900, 7717, 6650, 4920, 7733, 6659, 7736, 
          4940, 4951, 7757, 4962, 7773, 6674, 4982, 7795, 6687, 7792, 5000, 
          5010, 7816, 5021, 7830, 6705, 5041, 7853, 6719, 7856, 5058, 5070, 
          7875, 5081, 2447, 5106, 7898, 6736, 5123}], 
         Line[{4881, 4893, 7702, 4902, 7718, 6652, 4921, 7737, 6660, 7739, 
          4941, 2226, 4965, 7774, 6676, 4983, 7796, 6689, 7798, 5001, 5014, 
          7817, 5024, 7833, 6707, 5042, 7857, 6721, 7859, 5059, 7877, 6728, 
          5084, 7890, 6732, 5108, 7899, 6737, 5124}], 
         Line[{4883, 4897, 7705, 4904, 4917, 7725, 4923, 4937, 7743, 7745, 
          4943, 7762, 6669, 4967, 4979, 7782, 4985, 7804, 6691, 7801, 5003, 
          5018, 7821, 5026, 5038, 7841, 5044, 7864, 6723, 7862, 5061, 5078, 
          7881, 5086, 7894, 6733, 5110, 2472, 5126}], 
         Line[{4884, 4901, 7708, 4907, 2168, 4925, 7748, 6664, 7746, 4945, 
          4964, 7764, 4969, 7783, 6681, 4986, 7805, 6693, 7807, 5004, 5023, 
          7822, 5028, 7842, 6712, 5045, 7865, 6725, 7868, 5063, 5083, 7884, 
          5089, 2459, 5112, 7901, 6739, 5127}], 
         Line[{4885, 4906, 7709, 4908, 4924, 7728, 4926, 7749, 6665, 7750, 
          4946, 4968, 7765, 4970, 7786, 6683, 4987, 7808, 6695, 7809, 5005, 
          7825, 6701, 5029, 7845, 6714, 5046, 7869, 6726, 7846, 5064, 5088, 
          7885, 5090, 7896, 6734, 5113, 7902, 6740, 5128}], 
         Line[{5117, 5102, 7891, 5097, 5077, 7878, 5072, 5054, 7858, 5050, 
          7835, 7834, 6708, 5034, 5017, 7818, 5012, 4996, 7797, 4992, 7776, 
          7775, 6677, 4975, 7758, 6668, 4953, 4936, 7738, 4931, 2160, 7719, 
          4913, 7701, 6644, 4891, 4873, 7691, 4874}], 
         Line[{5121, 6735, 7897, 5104, 6731, 7886, 5079, 6727, 7871, 5056, 
          6717, 7850, 7848, 5039, 7826, 5030, 5019, 6697, 7811, 4998, 7788, 
          7787, 4988, 4980, 6672, 7767, 4960, 7752, 4947, 4938, 2182, 7729, 
          4918, 6648, 7711, 4898, 6642, 7696, 4878}], 
         Line[{5125, 6738, 7900, 5109, 7892, 5103, 5085, 6730, 7879, 5060, 
          7861, 7860, 5055, 5043, 6710, 7838, 5025, 6700, 7819, 5002, 7800, 
          7799, 4997, 4984, 6679, 7779, 4966, 7759, 4959, 4942, 7744, 6662, 
          7740, 4922, 6654, 7721, 4903, 6645, 7703, 4882}], 
         Line[{5130, 5129, 7903, 5147, 6745, 7911, 5170, 7927, 6751, 7909, 
          5188, 6761, 7944, 5208, 6770, 7968, 5232, 7965, 6775, 7983, 5249, 
          6788, 8004, 5267, 6800, 8027, 5291, 8042, 6806, 8024, 5307, 6819, 
          8065, 5327, 8087, 5325, 5353, 8084, 5351, 5374}], 
         Line[{5131, 6741, 7904, 5148, 2495, 5171, 7926, 6753, 7930, 5189, 
          6762, 7949, 5209, 7967, 5210, 5233, 7986, 6777, 7982, 5250, 6790, 
          8008, 5268, 8026, 5269, 5292, 8041, 6808, 8046, 5308, 6822, 8069, 
          5328, 8086, 5329, 5354, 8101, 5355, 5375}], 
         Line[{5132, 2482, 5150, 6747, 7913, 5172, 7929, 6755, 7934, 5190, 
          7948, 5193, 5212, 7970, 5215, 5234, 7985, 6779, 7992, 5251, 6792, 
          8007, 5271, 6802, 8029, 5293, 8045, 6810, 8051, 5309, 6824, 8068, 
          5331, 8090, 5334, 5356, 8103, 5359, 5376}], 
         Line[{5135, 6742, 7906, 5152, 7918, 5156, 5174, 6757, 7937, 7938, 
          5192, 6765, 7956, 5214, 7975, 5218, 5236, 7995, 6782, 7991, 5253, 
          6794, 8017, 5273, 6803, 8034, 5295, 8054, 6813, 8050, 5311, 6826, 
          8077, 5333, 6833, 8094, 5358, 2828, 5378}], 
         Line[{5136, 6743, 7907, 5154, 6750, 7921, 5175, 7936, 6759, 7941, 
          5194, 6767, 7955, 5216, 7974, 5223, 5237, 7994, 6784, 7999, 5254, 
          6796, 8016, 5275, 8038, 5282, 5296, 8053, 6815, 8058, 5312, 6828, 
          8081, 5335, 8097, 5342, 5360, 8107, 5367, 5379}], 
         Line[{5137, 6744, 7908, 5155, 7920, 5165, 5176, 7940, 6760, 7924, 
          5195, 7961, 5204, 5217, 6774, 7977, 5238, 7998, 6786, 7980, 5255, 
          6798, 8020, 5276, 8037, 5287, 5297, 8061, 6817, 8057, 5313, 8080, 
          5322, 5336, 8096, 5347, 5361, 8109, 5371, 5380}], 
         Line[{5139, 5146, 7912, 5159, 5169, 7928, 5179, 5187, 7945, 7946, 
          5199, 7969, 6771, 5221, 5231, 7984, 5241, 8005, 6789, 8003, 5259, 
          5266, 8028, 5280, 8043, 6807, 5300, 8063, 6820, 8066, 5317, 5326, 
          8088, 5340, 5352, 8102, 5365, 2841, 5382}], 
         Line[{5140, 5149, 7914, 5160, 7931, 6754, 5180, 7947, 6763, 7950, 
          5200, 5211, 7971, 5222, 7987, 6778, 5242, 8009, 6791, 8006, 5260, 
          5270, 8030, 5281, 8044, 6809, 5301, 8067, 6823, 8070, 5318, 5330, 
          8089, 5341, 2822, 5366, 8112, 6840, 5383}], 
         Line[{5141, 5153, 7916, 5162, 7932, 6756, 5181, 7951, 6764, 7953, 
          5201, 2601, 5225, 7988, 6780, 5243, 8010, 6793, 8012, 5261, 5274, 
          8031, 5284, 8047, 6811, 5302, 8071, 6825, 8073, 5319, 8091, 6832, 
          5344, 8104, 6836, 5368, 8113, 6841, 5384}], 
         Line[{5143, 5157, 7919, 5164, 5177, 7939, 5183, 5197, 7957, 7959, 
          5203, 7976, 6773, 5227, 5239, 7996, 5245, 8018, 6795, 8015, 5263, 
          5278, 8035, 5286, 5298, 8055, 5304, 8078, 6827, 8076, 5321, 5338, 
          8095, 5346, 8108, 6837, 5370, 2847, 5386}], 
         Line[{5144, 5161, 7922, 5167, 2543, 5185, 7962, 6768, 7960, 5205, 
          5224, 7978, 5229, 7997, 6785, 5246, 8019, 6797, 8021, 5264, 5283, 
          8036, 5288, 8056, 6816, 5305, 8079, 6829, 8082, 5323, 5343, 8098, 
          5349, 2834, 5372, 8115, 6843, 5387}], 
         Line[{5145, 5166, 7923, 5168, 5184, 7942, 5186, 7963, 6769, 7964, 
          5206, 5228, 7979, 5230, 8000, 6787, 5247, 8022, 6799, 8023, 5265, 
          8039, 6805, 5289, 8059, 6818, 5306, 8083, 6830, 8060, 5324, 5348, 
          8099, 5350, 8110, 6838, 5373, 8116, 6844, 5388}], 
         Line[{5377, 5362, 8105, 5357, 5337, 8092, 5332, 5314, 8072, 5310, 
          8049, 8048, 6812, 5294, 5277, 8032, 5272, 5256, 8011, 5252, 7990, 
          7989, 6781, 5235, 7972, 6772, 5213, 5196, 7952, 5191, 2535, 7933, 
          5173, 7915, 6748, 5151, 5133, 7905, 5134}], 
         Line[{5381, 6839, 8111, 5364, 6835, 8100, 5339, 6831, 8085, 5316, 
          6821, 8064, 8062, 5299, 8040, 5290, 5279, 6801, 8025, 5258, 8002, 
          8001, 5248, 5240, 6776, 7981, 5220, 7966, 5207, 5198, 2557, 7943, 
          5178, 6752, 7925, 5158, 6746, 7910, 5138}], 
         Line[{5385, 6842, 8114, 5369, 8106, 5363, 5345, 6834, 8093, 5320, 
          8075, 8074, 5315, 5303, 6814, 8052, 5285, 6804, 8033, 5262, 8014, 
          8013, 5257, 5244, 6783, 7993, 5226, 7973, 5219, 5202, 7958, 6766, 
          7954, 5182, 6758, 7935, 5163, 6749, 7917, 5142}], 
         Line[{5390, 5389, 8117, 5407, 6849, 8125, 5430, 8141, 6855, 8123, 
          5448, 6865, 8158, 5468, 6874, 8182, 5492, 8179, 6879, 8197, 5509, 
          6892, 8218, 5527, 6904, 8241, 5551, 8256, 6910, 8238, 5567, 6923, 
          8279, 5587, 8301, 5585, 5613, 8298, 5611, 5634}], 
         Line[{5391, 6845, 8118, 5408, 2870, 5431, 8140, 6857, 8144, 5449, 
          6866, 8163, 5469, 8181, 5470, 5493, 8200, 6881, 8196, 5510, 6894, 
          8222, 5528, 8240, 5529, 5552, 8255, 6912, 8260, 5568, 6926, 8283, 
          5588, 8300, 5589, 5614, 8315, 5615, 5635}], 
         Line[{5392, 2857, 5410, 6851, 8127, 5432, 8143, 6859, 8148, 5450, 
          8162, 5453, 5472, 8184, 5475, 5494, 8199, 6883, 8206, 5511, 6896, 
          8221, 5531, 6906, 8243, 5553, 8259, 6914, 8265, 5569, 6928, 8282, 
          5591, 8304, 5594, 5616, 8317, 5619, 5636}], 
         Line[{5395, 6846, 8120, 5412, 8132, 5416, 5434, 6861, 8151, 8152, 
          5452, 6869, 8170, 5474, 8189, 5478, 5496, 8209, 6886, 8205, 5513, 
          6898, 8231, 5533, 6907, 8248, 5555, 8268, 6917, 8264, 5571, 6930, 
          8291, 5593, 6937, 8308, 5618, 3203, 5638}], 
         Line[{5396, 6847, 8121, 5414, 6854, 8135, 5435, 8150, 6863, 8155, 
          5454, 6871, 8169, 5476, 8188, 5483, 5497, 8208, 6888, 8213, 5514, 
          6900, 8230, 5535, 8252, 5542, 5556, 8267, 6919, 8272, 5572, 6932, 
          8295, 5595, 8311, 5602, 5620, 8321, 5627, 5639}], 
         Line[{5397, 6848, 8122, 5415, 8134, 5425, 5436, 8154, 6864, 8138, 
          5455, 8175, 5464, 5477, 6878, 8191, 5498, 8212, 6890, 8194, 5515, 
          6902, 8234, 5536, 8251, 5547, 5557, 8275, 6921, 8271, 5573, 8294, 
          5582, 5596, 8310, 5607, 5621, 8323, 5631, 5640}], 
         Line[{5399, 5406, 8126, 5419, 5429, 8142, 5439, 5447, 8159, 8160, 
          5459, 8183, 6875, 5481, 5491, 8198, 5501, 8219, 6893, 8217, 5519, 
          5526, 8242, 5540, 8257, 6911, 5560, 8277, 6924, 8280, 5577, 5586, 
          8302, 5600, 5612, 8316, 5625, 3216, 5642}], 
         Line[{5400, 5409, 8128, 5420, 8145, 6858, 5440, 8161, 6867, 8164, 
          5460, 5471, 8185, 5482, 8201, 6882, 5502, 8223, 6895, 8220, 5520, 
          5530, 8244, 5541, 8258, 6913, 5561, 8281, 6927, 8284, 5578, 5590, 
          8303, 5601, 3197, 5626, 8326, 6944, 5643}], 
         Line[{5401, 5413, 8130, 5422, 8146, 6860, 5441, 8165, 6868, 8167, 
          5461, 2976, 5485, 8202, 6884, 5503, 8224, 6897, 8226, 5521, 5534, 
          8245, 5544, 8261, 6915, 5562, 8285, 6929, 8287, 5579, 8305, 6936, 
          5604, 8318, 6940, 5628, 8327, 6945, 5644}], 
         Line[{5403, 5417, 8133, 5424, 5437, 8153, 5443, 5457, 8171, 8173, 
          5463, 8190, 6877, 5487, 5499, 8210, 5505, 8232, 6899, 8229, 5523, 
          5538, 8249, 5546, 5558, 8269, 5564, 8292, 6931, 8290, 5581, 5598, 
          8309, 5606, 8322, 6941, 5630, 3222, 5646}], 
         Line[{5404, 5421, 8136, 5427, 2918, 5445, 8176, 6872, 8174, 5465, 
          5484, 8192, 5489, 8211, 6889, 5506, 8233, 6901, 8235, 5524, 5543, 
          8250, 5548, 8270, 6920, 5565, 8293, 6933, 8296, 5583, 5603, 8312, 
          5609, 3209, 5632, 8329, 6947, 5647}], 
         Line[{5405, 5426, 8137, 5428, 5444, 8156, 5446, 8177, 6873, 8178, 
          5466, 5488, 8193, 5490, 8214, 6891, 5507, 8236, 6903, 8237, 5525, 
          8253, 6909, 5549, 8273, 6922, 5566, 8297, 6934, 8274, 5584, 5608, 
          8313, 5610, 8324, 6942, 5633, 8330, 6948, 5648}], 
         Line[{5637, 5622, 8319, 5617, 5597, 8306, 5592, 5574, 8286, 5570, 
          8263, 8262, 6916, 5554, 5537, 8246, 5532, 5516, 8225, 5512, 8204, 
          8203, 6885, 5495, 8186, 6876, 5473, 5456, 8166, 5451, 2910, 8147, 
          5433, 8129, 6852, 5411, 5393, 8119, 5394}], 
         Line[{5641, 6943, 8325, 5624, 6939, 8314, 5599, 6935, 8299, 5576, 
          6925, 8278, 8276, 5559, 8254, 5550, 5539, 6905, 8239, 5518, 8216, 
          8215, 5508, 5500, 6880, 8195, 5480, 8180, 5467, 5458, 2932, 8157, 
          5438, 6856, 8139, 5418, 6850, 8124, 5398}], 
         Line[{5645, 6946, 8328, 5629, 8320, 5623, 5605, 6938, 8307, 5580, 
          8289, 8288, 5575, 5563, 6918, 8266, 5545, 6908, 8247, 5522, 8228, 
          8227, 5517, 5504, 6887, 8207, 5486, 8187, 5479, 5462, 8172, 6870, 
          8168, 5442, 6862, 8149, 5423, 6853, 8131, 5402}], 
         Line[{5650, 5649, 8331, 5667, 6953, 8339, 5690, 8355, 6959, 8337, 
          5708, 6969, 8372, 5728, 6978, 8396, 5752, 8393, 6983, 8411, 5769, 
          6996, 8432, 5787, 7008, 8455, 5811, 8470, 7014, 8452, 5827, 7027, 
          8493, 5847, 8515, 5845, 5873, 8512, 5871, 5894}], 
         Line[{5651, 6949, 8332, 5668, 3245, 5691, 8354, 6961, 8358, 5709, 
          6970, 8377, 5729, 8395, 5730, 5753, 8414, 6985, 8410, 5770, 6998, 
          8436, 5788, 8454, 5789, 5812, 8469, 7016, 8474, 5828, 7030, 8497, 
          5848, 8514, 5849, 5874, 8529, 5875, 5895}], 
         Line[{5652, 3232, 5670, 6955, 8341, 5692, 8357, 6963, 8362, 5710, 
          8376, 5713, 5732, 8398, 5735, 5754, 8413, 6987, 8420, 5771, 7000, 
          8435, 5791, 7010, 8457, 5813, 8473, 7018, 8479, 5829, 7032, 8496, 
          5851, 8518, 5854, 5876, 8531, 5879, 5896}], 
         Line[{5655, 6950, 8334, 5672, 8346, 5676, 5694, 6965, 8365, 8366, 
          5712, 6973, 8384, 5734, 8403, 5738, 5756, 8423, 6990, 8419, 5773, 
          7002, 8445, 5793, 7011, 8462, 5815, 8482, 7021, 8478, 5831, 7034, 
          8505, 5853, 7041, 8522, 5878, 3578, 5898}], 
         Line[{5656, 6951, 8335, 5674, 6958, 8349, 5695, 8364, 6967, 8369, 
          5714, 6975, 8383, 5736, 8402, 5743, 5757, 8422, 6992, 8427, 5774, 
          7004, 8444, 5795, 8466, 5802, 5816, 8481, 7023, 8486, 5832, 7036, 
          8509, 5855, 8525, 5862, 5880, 8535, 5887, 5899}], 
         Line[{5657, 6952, 8336, 5675, 8348, 5685, 5696, 8368, 6968, 8352, 
          5715, 8389, 5724, 5737, 6982, 8405, 5758, 8426, 6994, 8408, 5775, 
          7006, 8448, 5796, 8465, 5807, 5817, 8489, 7025, 8485, 5833, 8508, 
          5842, 5856, 8524, 5867, 5881, 8537, 5891, 5900}], 
         Line[{5659, 5666, 8340, 5679, 5689, 8356, 5699, 5707, 8373, 8374, 
          5719, 8397, 6979, 5741, 5751, 8412, 5761, 8433, 6997, 8431, 5779, 
          5786, 8456, 5800, 8471, 7015, 5820, 8491, 7028, 8494, 5837, 5846, 
          8516, 5860, 5872, 8530, 5885, 3591, 5902}], 
         Line[{5660, 5669, 8342, 5680, 8359, 6962, 5700, 8375, 6971, 8378, 
          5720, 5731, 8399, 5742, 8415, 6986, 5762, 8437, 6999, 8434, 5780, 
          5790, 8458, 5801, 8472, 7017, 5821, 8495, 7031, 8498, 5838, 5850, 
          8517, 5861, 3572, 5886, 8540, 7048, 5903}], 
         Line[{5661, 5673, 8344, 5682, 8360, 6964, 5701, 8379, 6972, 8381, 
          5721, 3351, 5745, 8416, 6988, 5763, 8438, 7001, 8440, 5781, 5794, 
          8459, 5804, 8475, 7019, 5822, 8499, 7033, 8501, 5839, 8519, 7040, 
          5864, 8532, 7044, 5888, 8541, 7049, 5904}], 
         Line[{5663, 5677, 8347, 5684, 5697, 8367, 5703, 5717, 8385, 8387, 
          5723, 8404, 6981, 5747, 5759, 8424, 5765, 8446, 7003, 8443, 5783, 
          5798, 8463, 5806, 5818, 8483, 5824, 8506, 7035, 8504, 5841, 5858, 
          8523, 5866, 8536, 7045, 5890, 3597, 5906}], 
         Line[{5664, 5681, 8350, 5687, 3293, 5705, 8390, 6976, 8388, 5725, 
          5744, 8406, 5749, 8425, 6993, 5766, 8447, 7005, 8449, 5784, 5803, 
          8464, 5808, 8484, 7024, 5825, 8507, 7037, 8510, 5843, 5863, 8526, 
          5869, 3584, 5892, 8543, 7051, 5907}], 
         Line[{5665, 5686, 8351, 5688, 5704, 8370, 5706, 8391, 6977, 8392, 
          5726, 5748, 8407, 5750, 8428, 6995, 5767, 8450, 7007, 8451, 5785, 
          8467, 7013, 5809, 8487, 7026, 5826, 8511, 7038, 8488, 5844, 5868, 
          8527, 5870, 8538, 7046, 5893, 8544, 7052, 5908}], 
         Line[{5897, 5882, 8533, 5877, 5857, 8520, 5852, 5834, 8500, 5830, 
          8477, 8476, 7020, 5814, 5797, 8460, 5792, 5776, 8439, 5772, 8418, 
          8417, 6989, 5755, 8400, 6980, 5733, 5716, 8380, 5711, 3285, 8361, 
          5693, 8343, 6956, 5671, 5653, 8333, 5654}], 
         Line[{5901, 7047, 8539, 5884, 7043, 8528, 5859, 7039, 8513, 5836, 
          7029, 8492, 8490, 5819, 8468, 5810, 5799, 7009, 8453, 5778, 8430, 
          8429, 5768, 5760, 6984, 8409, 5740, 8394, 5727, 5718, 3307, 8371, 
          5698, 6960, 8353, 5678, 6954, 8338, 5658}], 
         Line[{5905, 7050, 8542, 5889, 8534, 5883, 5865, 7042, 8521, 5840, 
          8503, 8502, 5835, 5823, 7022, 8480, 5805, 7012, 8461, 5782, 8442, 
          8441, 5777, 5764, 6991, 8421, 5746, 8401, 5739, 5722, 8386, 6974, 
          8382, 5702, 6966, 8363, 5683, 6957, 8345, 5662}], 
         Line[{5910, 5909, 8545, 5927, 7057, 8553, 5950, 8569, 7063, 8551, 
          5968, 7073, 8586, 5988, 7082, 8610, 6012, 8607, 7087, 8625, 6029, 
          7100, 8646, 6047, 7112, 8669, 6071, 8684, 7118, 8666, 6087, 7131, 
          8707, 6107, 8729, 6105, 6133, 8726, 6131, 6154}], 
         Line[{5911, 7053, 8546, 5928, 3620, 5951, 8568, 7065, 8572, 5969, 
          7074, 8591, 5989, 8609, 5990, 6013, 8628, 7089, 8624, 6030, 7102, 
          8650, 6048, 8668, 6049, 6072, 8683, 7120, 8688, 6088, 7134, 8711, 
          6108, 8728, 6109, 6134, 8743, 6135, 6155}], 
         Line[{5912, 3607, 5930, 7059, 8555, 5952, 8571, 7067, 8576, 5970, 
          8590, 5973, 5992, 8612, 5995, 6014, 8627, 7091, 8634, 6031, 7104, 
          8649, 6051, 7114, 8671, 6073, 8687, 7122, 8693, 6089, 7136, 8710, 
          6111, 8732, 6114, 6136, 8745, 6139, 6156}], 
         Line[{5915, 7054, 8548, 5932, 8560, 5936, 5954, 7069, 8579, 8580, 
          5972, 7077, 8598, 5994, 8617, 5998, 6016, 8637, 7094, 8633, 6033, 
          7106, 8659, 6053, 7115, 8676, 6075, 8696, 7125, 8692, 6091, 7138, 
          8719, 6113, 7145, 8736, 6138, 3953, 6158}], 
         Line[{5916, 7055, 8549, 5934, 7062, 8563, 5955, 8578, 7071, 8583, 
          5974, 7079, 8597, 5996, 8616, 6003, 6017, 8636, 7096, 8641, 6034, 
          7108, 8658, 6055, 8680, 6062, 6076, 8695, 7127, 8700, 6092, 7140, 
          8723, 6115, 8739, 6122, 6140, 8749, 6147, 6159}], 
         Line[{5917, 7056, 8550, 5935, 8562, 5945, 5956, 8582, 7072, 8566, 
          5975, 8603, 5984, 5997, 7086, 8619, 6018, 8640, 7098, 8622, 6035, 
          7110, 8662, 6056, 8679, 6067, 6077, 8703, 7129, 8699, 6093, 8722, 
          6102, 6116, 8738, 6127, 6141, 8751, 6151, 6160}], 
         Line[{5919, 5926, 8554, 5939, 5949, 8570, 5959, 5967, 8587, 8588, 
          5979, 8611, 7083, 6001, 6011, 8626, 6021, 8647, 7101, 8645, 6039, 
          6046, 8670, 6060, 8685, 7119, 6080, 8705, 7132, 8708, 6097, 6106, 
          8730, 6120, 6132, 8744, 6145, 3966, 6162}], 
         Line[{5920, 5929, 8556, 5940, 8573, 7066, 5960, 8589, 7075, 8592, 
          5980, 5991, 8613, 6002, 8629, 7090, 6022, 8651, 7103, 8648, 6040, 
          6050, 8672, 6061, 8686, 7121, 6081, 8709, 7135, 8712, 6098, 6110, 
          8731, 6121, 3947, 6146, 8754, 7152, 6163}], 
         Line[{5921, 5933, 8558, 5942, 8574, 7068, 5961, 8593, 7076, 8595, 
          5981, 3726, 6005, 8630, 7092, 6023, 8652, 7105, 8654, 6041, 6054, 
          8673, 6064, 8689, 7123, 6082, 8713, 7137, 8715, 6099, 8733, 7144, 
          6124, 8746, 7148, 6148, 8755, 7153, 6164}], 
         Line[{5923, 5937, 8561, 5944, 5957, 8581, 5963, 5977, 8599, 8601, 
          5983, 8618, 7085, 6007, 6019, 8638, 6025, 8660, 7107, 8657, 6043, 
          6058, 8677, 6066, 6078, 8697, 6084, 8720, 7139, 8718, 6101, 6118, 
          8737, 6126, 8750, 7149, 6150, 3972, 6166}], 
         Line[{5924, 5941, 8564, 5947, 3668, 5965, 8604, 7080, 8602, 5985, 
          6004, 8620, 6009, 8639, 7097, 6026, 8661, 7109, 8663, 6044, 6063, 
          8678, 6068, 8698, 7128, 6085, 8721, 7141, 8724, 6103, 6123, 8740, 
          6129, 3959, 6152, 8757, 7155, 6167}], 
         Line[{5925, 5946, 8565, 5948, 5964, 8584, 5966, 8605, 7081, 8606, 
          5986, 6008, 8621, 6010, 8642, 7099, 6027, 8664, 7111, 8665, 6045, 
          8681, 7117, 6069, 8701, 7130, 6086, 8725, 7142, 8702, 6104, 6128, 
          8741, 6130, 8752, 7150, 6153, 8758, 7156, 6168}], 
         Line[{6157, 6142, 8747, 6137, 6117, 8734, 6112, 6094, 8714, 6090, 
          8691, 8690, 7124, 6074, 6057, 8674, 6052, 6036, 8653, 6032, 8632, 
          8631, 7093, 6015, 8614, 7084, 5993, 5976, 8594, 5971, 3660, 8575, 
          5953, 8557, 7060, 5931, 5913, 8547, 5914}], 
         Line[{6161, 7151, 8753, 6144, 7147, 8742, 6119, 7143, 8727, 6096, 
          7133, 8706, 8704, 6079, 8682, 6070, 6059, 7113, 8667, 6038, 8644, 
          8643, 6028, 6020, 7088, 8623, 6000, 8608, 5987, 5978, 3682, 8585, 
          5958, 7064, 8567, 5938, 7058, 8552, 5918}], 
         Line[{6165, 7154, 8756, 6149, 8748, 6143, 6125, 7146, 8735, 6100, 
          8717, 8716, 6095, 6083, 7126, 8694, 6065, 7116, 8675, 6042, 8656, 
          8655, 6037, 6024, 7095, 8635, 6006, 8615, 5999, 5982, 8600, 7078, 
          8596, 5962, 7070, 8577, 5943, 7061, 8559, 5922}], 
         Line[{6170, 6169, 8759, 6187, 7161, 8767, 6210, 8783, 7167, 8765, 
          6228, 7177, 8800, 6248, 7186, 8824, 6272, 8821, 7191, 8842, 6289, 
          7205, 8863, 6307, 7216, 8882, 6331, 8898, 7222, 8881, 6347, 7235, 
          8921, 6367, 8943, 6365, 6393, 8940, 6391, 6414}], 
         Line[{6171, 7157, 8760, 6188, 3995, 6211, 8782, 7169, 8786, 6229, 
          7178, 8805, 6249, 8823, 6250, 6273, 8845, 7193, 8841, 6290, 7206, 
          8867, 6308, 8884, 6309, 6332, 8897, 7224, 8902, 6348, 7238, 8925, 
          6368, 8942, 6369, 6394, 8957, 6395, 6415}], 
         Line[{6172, 3982, 6190, 7163, 8769, 6212, 8785, 7171, 8790, 6230, 
          8804, 6233, 6252, 8826, 6255, 6274, 8844, 7195, 8851, 6291, 7208, 
          8866, 6310, 7218, 8886, 6333, 8901, 7226, 8907, 6349, 7240, 8924, 
          6371, 8946, 6374, 6396, 8959, 6399, 6416}], 
         Line[{6175, 7158, 8762, 6192, 8774, 6196, 6214, 7173, 8793, 8794, 
          6232, 7181, 8812, 6254, 8831, 6258, 6276, 8854, 7198, 8850, 6293, 
          7210, 8876, 6313, 7219, 8888, 6335, 8910, 7229, 8906, 6351, 7242, 
          8933, 6373, 7249, 8950, 6398, 4325, 6418}], 
         Line[{6176, 7159, 8763, 6194, 7166, 8777, 6215, 8792, 7175, 8797, 
          6234, 7183, 8811, 6256, 8830, 6263, 6277, 8853, 7200, 8858, 6294, 
          7212, 8875, 6314, 8892, 6322, 6336, 8909, 7231, 8914, 6352, 7244, 
          8937, 6375, 8953, 6382, 6400, 8963, 6407, 6419}], 
         Line[{6177, 7160, 8764, 6195, 8776, 6205, 6216, 8796, 7176, 8780, 
          6235, 8817, 6244, 6257, 7190, 8833, 6278, 8857, 7202, 8837, 6295, 
          7214, 8860, 6316, 8894, 6327, 6337, 8917, 7233, 8913, 6353, 8936, 
          6362, 6376, 8952, 6387, 6401, 8965, 6411, 6420}], 
         Line[{6179, 6186, 8768, 6199, 6209, 8784, 6219, 6227, 8801, 8802, 
          6239, 8825, 7187, 6261, 6271, 8843, 6281, 8862, 7204, 8839, 6297, 
          6306, 8883, 6319, 8899, 7223, 6340, 8919, 7236, 8922, 6357, 6366, 
          8944, 6380, 6392, 8958, 6405, 4338, 6422}], 
         Line[{6180, 6189, 8770, 6200, 8787, 7170, 6220, 8803, 7179, 8806, 
          6240, 6251, 8827, 6262, 8846, 7194, 6282, 8865, 7207, 8864, 6300, 
          6311, 8885, 6321, 8900, 7225, 6341, 8923, 7239, 8926, 6358, 6370, 
          8945, 6381, 4319, 6406, 8968, 7256, 6423}], 
         Line[{6181, 6193, 8772, 6202, 8788, 7172, 6221, 8807, 7180, 8809, 
          6241, 4101, 6265, 8847, 7196, 6283, 8868, 7209, 8869, 6301, 6315, 
          8887, 6323, 8903, 7227, 6342, 8927, 7241, 8929, 6359, 8947, 7248, 
          6384, 8960, 7252, 6408, 8969, 7257, 6424}], 
         Line[{6183, 6197, 8775, 6204, 6217, 8795, 6223, 6237, 8813, 8815, 
          6243, 8832, 7189, 6267, 6279, 8855, 6285, 8874, 7211, 8873, 6303, 
          6320, 8891, 6326, 6338, 8911, 6344, 8934, 7243, 8932, 6361, 6378, 
          8951, 6386, 8964, 7253, 6410, 4344, 6426}], 
         Line[{6184, 6201, 8778, 6207, 4043, 6225, 8818, 7184, 8816, 6245, 
          6264, 8834, 6269, 8856, 7201, 6286, 8877, 7213, 8878, 6304, 6324, 
          8893, 6328, 8912, 7232, 6345, 8935, 7245, 8938, 6363, 6383, 8954, 
          6389, 4331, 6412, 8971, 7259, 6427}], 
         Line[{6185, 6206, 8779, 6208, 6224, 8798, 6226, 8819, 7185, 8820, 
          6246, 6268, 8835, 6270, 8859, 7203, 6288, 8879, 7215, 8880, 6305, 
          8895, 7221, 6329, 8915, 7234, 6346, 8939, 7246, 8916, 6364, 6388, 
          8955, 6390, 8966, 7254, 6413, 8972, 7260, 6428}], 
         Line[{6417, 6402, 8961, 6397, 6377, 8948, 6372, 6354, 8928, 6350, 
          8905, 8904, 7228, 6334, 6317, 8889, 6312, 6298, 8870, 6292, 8849, 
          8848, 7197, 6275, 8828, 7188, 6253, 6236, 8808, 6231, 4035, 8789, 
          6213, 8771, 7164, 6191, 6173, 8761, 6174}], 
         Line[{6421, 7255, 8967, 6404, 7251, 8956, 6379, 7247, 8941, 6356, 
          7237, 8920, 8918, 6339, 8896, 6330, 6318, 7217, 8861, 6296, 8838, 
          8836, 6287, 6280, 7192, 8840, 6260, 8822, 6247, 6238, 4057, 8799, 
          6218, 7168, 8781, 6198, 7162, 8766, 6178}], 
         Line[{6425, 7258, 8970, 6409, 8962, 6403, 6385, 7250, 8949, 6360, 
          8931, 8930, 6355, 6343, 7230, 8908, 6325, 7220, 8890, 6302, 8872, 
          8871, 6299, 6284, 7199, 8852, 6266, 8829, 6259, 6242, 8814, 7182, 
          8810, 6222, 7174, 8791, 6203, 7165, 8773, 6182}]}, {
         Line[{1355, 1625, 7417, 1624, 1619, 7414, 1618, 7413, 1613, 7410, 
          1612, 1607, 7405, 1606, 1601, 7402, 1600, 7401, 1595, 7398, 1589, 
          1586, 7395, 1585, 7396, 1582, 1581, 7392, 1578, 7390, 1577, 1574, 
          7387, 1573, 1570, 7384, 1569, 7385, 1566, 1594}], 
         Line[{1365, 1588, 7397, 1587, 1584, 7394, 1583, 7393, 1580, 7391, 
          1579, 1576, 7389, 1575, 7388, 1572, 1571, 7386, 1568, 7383, 1563, 
          1558, 7378, 1557, 1552, 7374, 1551, 7375, 1546, 7369, 1545, 1540, 
          7365, 1539, 7366, 1534, 1533, 7362, 1528, 1567}], 
         Line[{1367, 1352, 7261, 1354, 1353, 7262, 1356, 1357, 1358, 7263, 
          1359, 7264, 1360, 1361, 7265, 1362, 1363, 7266, 1364, 7268, 1368, 
          7270, 1371, 1372, 7272, 1375, 1376, 7274, 1379, 7275, 1380, 7277, 
          1383, 1384, 7280, 1387, 7281, 1388, 1390}], 
         Line[{1393, 1366, 7269, 1369, 1370, 1373, 7271, 1374, 1377, 7273, 
          1378, 7276, 1381, 1382, 7279, 1385, 7278, 1386, 1389, 7283, 1394, 
          7286, 1399, 1400, 7289, 1405, 7290, 1406, 1411, 7293, 1412, 7297, 
          1417, 1418, 1423, 7300, 1424, 1427}], 
         Line[{1429, 1391, 7285, 1395, 7284, 1397, 1401, 7287, 1403, 1407, 
          7291, 1409, 7295, 1413, 7294, 1415, 1419, 7298, 1421, 1425, 7301, 
          1431, 7303, 1435, 7305, 1437, 1441, 7309, 1443, 1447, 7312, 1449, 
          7315, 1453, 1455, 7320, 1459, 7321, 1461, 1464}], 
         Line[{1465, 7322, 1462, 1460, 1456, 7318, 1454, 7317, 7316, 1450, 
          1448, 7311, 1444, 1442, 7308, 1438, 1436, 7304, 1432, 1426, 7282, 
          1422, 1420, 7299, 1416, 1414, 7296, 1410, 1408, 7292, 1404, 1402, 
          7288, 1398, 1396, 1392, 7267, 1430}], 
         Line[{1467, 1428, 7302, 1433, 1434, 7307, 1439, 7306, 1440, 1445, 
          7310, 1446, 7314, 1451, 7313, 1452, 1457, 7319, 1458, 1463, 7324, 
          1468, 7327, 1471, 1472, 7329, 1475, 1476, 1479, 7331, 1480, 7334, 
          1483, 1484, 7336, 1487, 7337, 1488, 1490}], 
         Line[{1493, 1466, 7326, 1469, 7325, 1470, 1473, 7328, 1474, 1477, 
          7330, 1478, 7333, 1481, 7332, 1482, 1485, 7335, 1486, 1489, 7339, 
          1494, 7342, 1499, 1500, 7345, 1505, 7346, 1506, 1511, 7351, 1512, 
          7354, 1517, 7355, 1518, 1523, 7358, 1524, 1527}], 
         Line[{1529, 7323, 1491, 1495, 1497, 7344, 1501, 7343, 1503, 1507, 
          7347, 1509, 7353, 1513, 7352, 1515, 1519, 7356, 1521, 1525, 7359, 
          1531, 7363, 1535, 1537, 7367, 1541, 7368, 1543, 1547, 7371, 1549, 
          7376, 1553, 7377, 1555, 1559, 7380, 1561, 1564}], 
         Line[{1565, 7381, 1562, 1560, 7379, 1556, 1554, 1550, 7373, 7372, 
          1548, 7370, 1544, 1542, 1538, 7364, 1536, 1532, 7361, 7360, 1526, 
          7338, 1522, 1520, 7357, 1516, 1514, 1510, 7349, 7348, 1508, 7350, 
          1504, 1502, 1498, 7340, 1496, 7341, 1492, 1530}], 
         Line[{1591, 7418, 1663, 1661, 7440, 1657, 1655, 1651, 7434, 7433, 
          1649, 7431, 1645, 1643, 7428, 1639, 1637, 7424, 1633, 7422, 1627, 
          1623, 7415, 1621, 7416, 1617, 1615, 1611, 7408, 7407, 1609, 7409, 
          1605, 1603, 7404, 1599, 1597, 1593, 7382, 1631}], 
         Line[{1628, 1688, 7457, 1687, 7456, 1684, 1683, 7453, 1680, 7451, 
          1679, 1676, 7449, 1675, 1672, 7447, 1671, 7446, 1668, 7443, 1664, 
          1659, 7438, 1658, 7439, 1653, 1652, 7435, 1647, 7430, 1646, 1641, 
          7426, 1640, 7427, 1635, 1634, 7423, 1629, 1667}], 
         Line[{1630, 1592, 7400, 1596, 7399, 1598, 1602, 7403, 1604, 1608, 
          7406, 1610, 7412, 1614, 7411, 1616, 1620, 1622, 7419, 1626, 7420, 
          7421, 1632, 1636, 7425, 1638, 1642, 7429, 1644, 1648, 7432, 1650, 
          7436, 1654, 7437, 1656, 1660, 7441, 1662, 1590}], 
         Line[{1665, 1713, 7468, 1712, 1709, 1708, 7466, 1705, 7464, 1704, 
          1701, 7462, 1700, 1697, 1696, 7460, 1693, 7458, 1689, 1686, 7454, 
          1685, 7455, 1682, 1681, 7452, 1678, 7450, 1677, 1674, 7448, 1673, 
          1670, 7444, 1669, 7445, 1666, 1692}], 
         Line[{1690, 1726, 7474, 1725, 7473, 1724, 1723, 1722, 7472, 1721, 
          1720, 7471, 1719, 1718, 7470, 1717, 1716, 7469, 1714, 1711, 7467, 
          1710, 1707, 7465, 1706, 1703, 7463, 1702, 1699, 7461, 1698, 1695, 
          7459, 1694, 1691, 7442, 1715}], 
         Line[{1730, 2000, 7631, 1999, 1994, 7628, 1993, 7627, 1988, 7624, 
          1987, 1982, 7619, 1981, 1976, 7616, 1975, 7615, 1970, 7612, 1964, 
          1961, 7609, 1960, 7610, 1957, 1956, 7606, 1953, 7604, 1952, 1949, 
          7601, 1948, 1945, 7598, 1944, 7599, 1941, 1969}], 
         Line[{1740, 1963, 7611, 1962, 1959, 7608, 1958, 7607, 1955, 7605, 
          1954, 1951, 7603, 1950, 7602, 1947, 1946, 7600, 1943, 7597, 1938, 
          1933, 7592, 1932, 1927, 7588, 1926, 7589, 1921, 7583, 1920, 1915, 
          7579, 1914, 7580, 1909, 1908, 7576, 1903, 1942}], 
         Line[{1742, 1727, 7475, 1729, 1728, 7476, 1731, 1732, 1733, 7477, 
          1734, 7478, 1735, 1736, 7479, 1737, 1738, 7480, 1739, 7482, 1743, 
          7484, 1746, 1747, 7486, 1750, 1751, 7488, 1754, 7489, 1755, 7491, 
          1758, 1759, 7494, 1762, 7495, 1763, 1765}], 
         Line[{1768, 1741, 7483, 1744, 1745, 1748, 7485, 1749, 1752, 7487, 
          1753, 7490, 1756, 1757, 7493, 1760, 7492, 1761, 1764, 7497, 1769, 
          7500, 1774, 1775, 7503, 1780, 7504, 1781, 1786, 7507, 1787, 7511, 
          1792, 1793, 1798, 7514, 1799, 1802}], 
         Line[{1804, 1766, 7499, 1770, 7498, 1772, 1776, 7501, 1778, 1782, 
          7505, 1784, 7509, 1788, 7508, 1790, 1794, 7512, 1796, 1800, 7515, 
          1806, 7517, 1810, 7519, 1812, 1816, 7523, 1818, 1822, 7526, 1824, 
          7529, 1828, 1830, 7534, 1834, 7535, 1836, 1839}], 
         Line[{1840, 7536, 1837, 1835, 1831, 7532, 1829, 7531, 7530, 1825, 
          1823, 7525, 1819, 1817, 7522, 1813, 1811, 7518, 1807, 1801, 7496, 
          1797, 1795, 7513, 1791, 1789, 7510, 1785, 1783, 7506, 1779, 1777, 
          7502, 1773, 1771, 1767, 7481, 1805}], 
         Line[{1842, 1803, 7516, 1808, 1809, 7521, 1814, 7520, 1815, 1820, 
          7524, 1821, 7528, 1826, 7527, 1827, 1832, 7533, 1833, 1838, 7538, 
          1843, 7541, 1846, 1847, 7543, 1850, 1851, 1854, 7545, 1855, 7548, 
          1858, 1859, 7550, 1862, 7551, 1863, 1865}], 
         Line[{1868, 1841, 7540, 1844, 7539, 1845, 1848, 7542, 1849, 1852, 
          7544, 1853, 7547, 1856, 7546, 1857, 1860, 7549, 1861, 1864, 7553, 
          1869, 7556, 1874, 1875, 7559, 1880, 7560, 1881, 1886, 7565, 1887, 
          7568, 1892, 7569, 1893, 1898, 7572, 1899, 1902}], 
         Line[{1904, 7537, 1866, 1870, 1872, 7558, 1876, 7557, 1878, 1882, 
          7561, 1884, 7567, 1888, 7566, 1890, 1894, 7570, 1896, 1900, 7573, 
          1906, 7577, 1910, 1912, 7581, 1916, 7582, 1918, 1922, 7585, 1924, 
          7590, 1928, 7591, 1930, 1934, 7594, 1936, 1939}], 
         Line[{1940, 7595, 1937, 1935, 7593, 1931, 1929, 1925, 7587, 7586, 
          1923, 7584, 1919, 1917, 1913, 7578, 1911, 1907, 7575, 7574, 1901, 
          7552, 1897, 1895, 7571, 1891, 1889, 1885, 7563, 7562, 1883, 7564, 
          1879, 1877, 1873, 7554, 1871, 7555, 1867, 1905}], 
         Line[{1966, 7632, 2038, 2036, 7654, 2032, 2030, 2026, 7648, 7647, 
          2024, 7645, 2020, 2018, 7642, 2014, 2012, 7638, 2008, 7636, 2002, 
          1998, 7629, 1996, 7630, 1992, 1990, 1986, 7622, 7621, 1984, 7623, 
          1980, 1978, 7618, 1974, 1972, 1968, 7596, 2006}], 
         Line[{2003, 2063, 7671, 2062, 7670, 2059, 2058, 7667, 2055, 7665, 
          2054, 2051, 7663, 2050, 2047, 7661, 2046, 7660, 2043, 7657, 2039, 
          2034, 7652, 2033, 7653, 2028, 2027, 7649, 2022, 7644, 2021, 2016, 
          7640, 2015, 7641, 2010, 2009, 7637, 2004, 2042}], 
         Line[{2005, 1967, 7614, 1971, 7613, 1973, 1977, 7617, 1979, 1983, 
          7620, 1985, 7626, 1989, 7625, 1991, 1995, 1997, 7633, 2001, 7634, 
          7635, 2007, 2011, 7639, 2013, 2017, 7643, 2019, 2023, 7646, 2025, 
          7650, 2029, 7651, 2031, 2035, 7655, 2037, 1965}], 
         Line[{2040, 2088, 7682, 2087, 2084, 2083, 7680, 2080, 7678, 2079, 
          2076, 7676, 2075, 2072, 2071, 7674, 2068, 7672, 2064, 2061, 7668, 
          2060, 7669, 2057, 2056, 7666, 2053, 7664, 2052, 2049, 7662, 2048, 
          2045, 7658, 2044, 7659, 2041, 2067}], 
         Line[{2065, 2101, 7688, 2100, 7687, 2099, 2098, 2097, 7686, 2096, 
          2095, 7685, 2094, 2093, 7684, 2092, 2091, 7683, 2089, 2086, 7681, 
          2085, 2082, 7679, 2081, 2078, 7677, 2077, 2074, 7675, 2073, 2070, 
          7673, 2069, 2066, 7656, 2090}], 
         Line[{2105, 2375, 7845, 2374, 2369, 7842, 2368, 7841, 2363, 7838, 
          2362, 2357, 7833, 2356, 2351, 7830, 2350, 7829, 2345, 7826, 2339, 
          2336, 7823, 2335, 7824, 2332, 2331, 7820, 2328, 7818, 2327, 2324, 
          7815, 2323, 2320, 7812, 2319, 7813, 2316, 2344}], 
         Line[{2115, 2338, 7825, 2337, 2334, 7822, 2333, 7821, 2330, 7819, 
          2329, 2326, 7817, 2325, 7816, 2322, 2321, 7814, 2318, 7811, 2313, 
          2308, 7806, 2307, 2302, 7802, 2301, 7803, 2296, 7797, 2295, 2290, 
          7793, 2289, 7794, 2284, 2283, 7790, 2278, 2317}], 
         Line[{2117, 2102, 7689, 2104, 2103, 7690, 2106, 2107, 2108, 7691, 
          2109, 7692, 2110, 2111, 7693, 2112, 2113, 7694, 2114, 7696, 2118, 
          7698, 2121, 2122, 7700, 2125, 2126, 7702, 2129, 7703, 2130, 7705, 
          2133, 2134, 7708, 2137, 7709, 2138, 2140}], 
         Line[{2143, 2116, 7697, 2119, 2120, 2123, 7699, 2124, 2127, 7701, 
          2128, 7704, 2131, 2132, 7707, 2135, 7706, 2136, 2139, 7711, 2144, 
          7714, 2149, 2150, 7717, 2155, 7718, 2156, 2161, 7721, 2162, 7725, 
          2167, 2168, 2173, 7728, 2174, 2177}], 
         Line[{2179, 2141, 7713, 2145, 7712, 2147, 2151, 7715, 2153, 2157, 
          7719, 2159, 7723, 2163, 7722, 2165, 2169, 7726, 2171, 2175, 7729, 
          2181, 7731, 2185, 7733, 2187, 2191, 7737, 2193, 2197, 7740, 2199, 
          7743, 2203, 2205, 7748, 2209, 7749, 2211, 2214}], 
         Line[{2215, 7750, 2212, 2210, 2206, 7746, 2204, 7745, 7744, 2200, 
          2198, 7739, 2194, 2192, 7736, 2188, 2186, 7732, 2182, 2176, 7710, 
          2172, 2170, 7727, 2166, 2164, 7724, 2160, 2158, 7720, 2154, 2152, 
          7716, 2148, 2146, 2142, 7695, 2180}], 
         Line[{2217, 2178, 7730, 2183, 2184, 7735, 2189, 7734, 2190, 2195, 
          7738, 2196, 7742, 2201, 7741, 2202, 2207, 7747, 2208, 2213, 7752, 
          2218, 7755, 2221, 2222, 7757, 2225, 2226, 2229, 7759, 2230, 7762, 
          2233, 2234, 7764, 2237, 7765, 2238, 2240}], 
         Line[{2243, 2216, 7754, 2219, 7753, 2220, 2223, 7756, 2224, 2227, 
          7758, 2228, 7761, 2231, 7760, 2232, 2235, 7763, 2236, 2239, 7767, 
          2244, 7770, 2249, 2250, 7773, 2255, 7774, 2256, 2261, 7779, 2262, 
          7782, 2267, 7783, 2268, 2273, 7786, 2274, 2277}], 
         Line[{2279, 7751, 2241, 2245, 2247, 7772, 2251, 7771, 2253, 2257, 
          7775, 2259, 7781, 2263, 7780, 2265, 2269, 7784, 2271, 2275, 7787, 
          2281, 7791, 2285, 2287, 7795, 2291, 7796, 2293, 2297, 7799, 2299, 
          7804, 2303, 7805, 2305, 2309, 7808, 2311, 2314}], 
         Line[{2315, 7809, 2312, 2310, 7807, 2306, 2304, 2300, 7801, 7800, 
          2298, 7798, 2294, 2292, 2288, 7792, 2286, 2282, 7789, 7788, 2276, 
          7766, 2272, 2270, 7785, 2266, 2264, 2260, 7777, 7776, 2258, 7778, 
          2254, 2252, 2248, 7768, 2246, 7769, 2242, 2280}], 
         Line[{2341, 7846, 2413, 2411, 7868, 2407, 2405, 2401, 7862, 7861, 
          2399, 7859, 2395, 2393, 7856, 2389, 2387, 7852, 2383, 7850, 2377, 
          2373, 7843, 2371, 7844, 2367, 2365, 2361, 7836, 7835, 2359, 7837, 
          2355, 2353, 7832, 2349, 2347, 2343, 7810, 2381}], 
         Line[{2378, 2438, 7885, 2437, 7884, 2434, 2433, 7881, 2430, 7879, 
          2429, 2426, 7877, 2425, 2422, 7875, 2421, 7874, 2418, 7871, 2414, 
          2409, 7866, 2408, 7867, 2403, 2402, 7863, 2397, 7858, 2396, 2391, 
          7854, 2390, 7855, 2385, 2384, 7851, 2379, 2417}], 
         Line[{2380, 2342, 7828, 2346, 7827, 2348, 2352, 7831, 2354, 2358, 
          7834, 2360, 7840, 2364, 7839, 2366, 2370, 2372, 7847, 2376, 7848, 
          7849, 2382, 2386, 7853, 2388, 2392, 7857, 2394, 2398, 7860, 2400, 
          7864, 2404, 7865, 2406, 2410, 7869, 2412, 2340}], 
         Line[{2415, 2463, 7896, 2462, 2459, 2458, 7894, 2455, 7892, 2454, 
          2451, 7890, 2450, 2447, 2446, 7888, 2443, 7886, 2439, 2436, 7882, 
          2435, 7883, 2432, 2431, 7880, 2428, 7878, 2427, 2424, 7876, 2423, 
          2420, 7872, 2419, 7873, 2416, 2442}], 
         Line[{2440, 2476, 7902, 2475, 7901, 2474, 2473, 2472, 7900, 2471, 
          2470, 7899, 2469, 2468, 7898, 2467, 2466, 7897, 2464, 2461, 7895, 
          2460, 2457, 7893, 2456, 2453, 7891, 2452, 2449, 7889, 2448, 2445, 
          7887, 2444, 2441, 7870, 2465}], 
         Line[{2480, 2750, 8059, 2749, 2744, 8056, 2743, 8055, 2738, 8052, 
          2737, 2732, 8047, 2731, 2726, 8044, 2725, 8043, 2720, 8040, 2714, 
          2711, 8037, 2710, 8038, 2707, 2706, 8034, 2703, 8032, 2702, 2699, 
          8029, 2698, 2695, 8026, 2694, 8027, 2691, 2719}], 
         Line[{2490, 2713, 8039, 2712, 2709, 8036, 2708, 8035, 2705, 8033, 
          2704, 2701, 8031, 2700, 8030, 2697, 2696, 8028, 2693, 8025, 2688, 
          2683, 8020, 2682, 2677, 8016, 2676, 8017, 2671, 8011, 2670, 2665, 
          8007, 2664, 8008, 2659, 2658, 8004, 2653, 2692}], 
         Line[{2492, 2477, 7903, 2479, 2478, 7904, 2481, 2482, 2483, 7905, 
          2484, 7906, 2485, 2486, 7907, 2487, 2488, 7908, 2489, 7910, 2493, 
          7912, 2496, 2497, 7914, 2500, 2501, 7916, 2504, 7917, 2505, 7919, 
          2508, 2509, 7922, 2512, 7923, 2513, 2515}], 
         Line[{2518, 2491, 7911, 2494, 2495, 2498, 7913, 2499, 2502, 7915, 
          2503, 7918, 2506, 2507, 7921, 2510, 7920, 2511, 2514, 7925, 2519, 
          7928, 2524, 2525, 7931, 2530, 7932, 2531, 2536, 7935, 2537, 7939, 
          2542, 2543, 2548, 7942, 2549, 2552}], 
         Line[{2554, 2516, 7927, 2520, 7926, 2522, 2526, 7929, 2528, 2532, 
          7933, 2534, 7937, 2538, 7936, 2540, 2544, 7940, 2546, 2550, 7943, 
          2556, 7945, 2560, 7947, 2562, 2566, 7951, 2568, 2572, 7954, 2574, 
          7957, 2578, 2580, 7962, 2584, 7963, 2586, 2589}], 
         Line[{2590, 7964, 2587, 2585, 2581, 7960, 2579, 7959, 7958, 2575, 
          2573, 7953, 2569, 2567, 7950, 2563, 2561, 7946, 2557, 2551, 7924, 
          2547, 2545, 7941, 2541, 2539, 7938, 2535, 2533, 7934, 2529, 2527, 
          7930, 2523, 2521, 2517, 7909, 2555}], 
         Line[{2592, 2553, 7944, 2558, 2559, 7949, 2564, 7948, 2565, 2570, 
          7952, 2571, 7956, 2576, 7955, 2577, 2582, 7961, 2583, 2588, 7966, 
          2593, 7969, 2596, 2597, 7971, 2600, 2601, 2604, 7973, 2605, 7976, 
          2608, 2609, 7978, 2612, 7979, 2613, 2615}], 
         Line[{2618, 2591, 7968, 2594, 7967, 2595, 2598, 7970, 2599, 2602, 
          7972, 2603, 7975, 2606, 7974, 2607, 2610, 7977, 2611, 2614, 7981, 
          2619, 7984, 2624, 2625, 7987, 2630, 7988, 2631, 2636, 7993, 2637, 
          7996, 2642, 7997, 2643, 2648, 8000, 2649, 2652}], 
         Line[{2654, 7965, 2616, 2620, 2622, 7986, 2626, 7985, 2628, 2632, 
          7989, 2634, 7995, 2638, 7994, 2640, 2644, 7998, 2646, 2650, 8001, 
          2656, 8005, 2660, 2662, 8009, 2666, 8010, 2668, 2672, 8013, 2674, 
          8018, 2678, 8019, 2680, 2684, 8022, 2686, 2689}], 
         Line[{2690, 8023, 2687, 2685, 8021, 2681, 2679, 2675, 8015, 8014, 
          2673, 8012, 2669, 2667, 2663, 8006, 2661, 2657, 8003, 8002, 2651, 
          7980, 2647, 2645, 7999, 2641, 2639, 2635, 7991, 7990, 2633, 7992, 
          2629, 2627, 2623, 7982, 2621, 7983, 2617, 2655}], 
         Line[{2716, 8060, 2788, 2786, 8082, 2782, 2780, 2776, 8076, 8075, 
          2774, 8073, 2770, 2768, 8070, 2764, 2762, 8066, 2758, 8064, 2752, 
          2748, 8057, 2746, 8058, 2742, 2740, 2736, 8050, 8049, 2734, 8051, 
          2730, 2728, 8046, 2724, 2722, 2718, 8024, 2756}], 
         Line[{2753, 2813, 8099, 2812, 8098, 2809, 2808, 8095, 2805, 8093, 
          2804, 2801, 8091, 2800, 2797, 8089, 2796, 8088, 2793, 8085, 2789, 
          2784, 8080, 2783, 8081, 2778, 2777, 8077, 2772, 8072, 2771, 2766, 
          8068, 2765, 8069, 2760, 2759, 8065, 2754, 2792}], 
         Line[{2755, 2717, 8042, 2721, 8041, 2723, 2727, 8045, 2729, 2733, 
          8048, 2735, 8054, 2739, 8053, 2741, 2745, 2747, 8061, 2751, 8062, 
          8063, 2757, 2761, 8067, 2763, 2767, 8071, 2769, 2773, 8074, 2775, 
          8078, 2779, 8079, 2781, 2785, 8083, 2787, 2715}], 
         Line[{2790, 2838, 8110, 2837, 2834, 2833, 8108, 2830, 8106, 2829, 
          2826, 8104, 2825, 2822, 2821, 8102, 2818, 8100, 2814, 2811, 8096, 
          2810, 8097, 2807, 2806, 8094, 2803, 8092, 2802, 2799, 8090, 2798, 
          2795, 8086, 2794, 8087, 2791, 2817}], 
         Line[{2815, 2851, 8116, 2850, 8115, 2849, 2848, 2847, 8114, 2846, 
          2845, 8113, 2844, 2843, 8112, 2842, 2841, 8111, 2839, 2836, 8109, 
          2835, 2832, 8107, 2831, 2828, 8105, 2827, 2824, 8103, 2823, 2820, 
          8101, 2819, 2816, 8084, 2840}], 
         Line[{2855, 3125, 8273, 3124, 3119, 8270, 3118, 8269, 3113, 8266, 
          3112, 3107, 8261, 3106, 3101, 8258, 3100, 8257, 3095, 8254, 3089, 
          3086, 8251, 3085, 8252, 3082, 3081, 8248, 3078, 8246, 3077, 3074, 
          8243, 3073, 3070, 8240, 3069, 8241, 3066, 3094}], 
         Line[{2865, 3088, 8253, 3087, 3084, 8250, 3083, 8249, 3080, 8247, 
          3079, 3076, 8245, 3075, 8244, 3072, 3071, 8242, 3068, 8239, 3063, 
          3058, 8234, 3057, 3052, 8230, 3051, 8231, 3046, 8225, 3045, 3040, 
          8221, 3039, 8222, 3034, 3033, 8218, 3028, 3067}], 
         Line[{2867, 2852, 8117, 2854, 2853, 8118, 2856, 2857, 2858, 8119, 
          2859, 8120, 2860, 2861, 8121, 2862, 2863, 8122, 2864, 8124, 2868, 
          8126, 2871, 2872, 8128, 2875, 2876, 8130, 2879, 8131, 2880, 8133, 
          2883, 2884, 8136, 2887, 8137, 2888, 2890}], 
         Line[{2893, 2866, 8125, 2869, 2870, 2873, 8127, 2874, 2877, 8129, 
          2878, 8132, 2881, 2882, 8135, 2885, 8134, 2886, 2889, 8139, 2894, 
          8142, 2899, 2900, 8145, 2905, 8146, 2906, 2911, 8149, 2912, 8153, 
          2917, 2918, 2923, 8156, 2924, 2927}], 
         Line[{2929, 2891, 8141, 2895, 8140, 2897, 2901, 8143, 2903, 2907, 
          8147, 2909, 8151, 2913, 8150, 2915, 2919, 8154, 2921, 2925, 8157, 
          2931, 8159, 2935, 8161, 2937, 2941, 8165, 2943, 2947, 8168, 2949, 
          8171, 2953, 2955, 8176, 2959, 8177, 2961, 2964}], 
         Line[{2965, 8178, 2962, 2960, 2956, 8174, 2954, 8173, 8172, 2950, 
          2948, 8167, 2944, 2942, 8164, 2938, 2936, 8160, 2932, 2926, 8138, 
          2922, 2920, 8155, 2916, 2914, 8152, 2910, 2908, 8148, 2904, 2902, 
          8144, 2898, 2896, 2892, 8123, 2930}], 
         Line[{2967, 2928, 8158, 2933, 2934, 8163, 2939, 8162, 2940, 2945, 
          8166, 2946, 8170, 2951, 8169, 2952, 2957, 8175, 2958, 2963, 8180, 
          2968, 8183, 2971, 2972, 8185, 2975, 2976, 2979, 8187, 2980, 8190, 
          2983, 2984, 8192, 2987, 8193, 2988, 2990}], 
         Line[{2993, 2966, 8182, 2969, 8181, 2970, 2973, 8184, 2974, 2977, 
          8186, 2978, 8189, 2981, 8188, 2982, 2985, 8191, 2986, 2989, 8195, 
          2994, 8198, 2999, 3000, 8201, 3005, 8202, 3006, 3011, 8207, 3012, 
          8210, 3017, 8211, 3018, 3023, 8214, 3024, 3027}], 
         Line[{3029, 8179, 2991, 2995, 2997, 8200, 3001, 8199, 3003, 3007, 
          8203, 3009, 8209, 3013, 8208, 3015, 3019, 8212, 3021, 3025, 8215, 
          3031, 8219, 3035, 3037, 8223, 3041, 8224, 3043, 3047, 8227, 3049, 
          8232, 3053, 8233, 3055, 3059, 8236, 3061, 3064}], 
         Line[{3065, 8237, 3062, 3060, 8235, 3056, 3054, 3050, 8229, 8228, 
          3048, 8226, 3044, 3042, 3038, 8220, 3036, 3032, 8217, 8216, 3026, 
          8194, 3022, 3020, 8213, 3016, 3014, 3010, 8205, 8204, 3008, 8206, 
          3004, 3002, 2998, 8196, 2996, 8197, 2992, 3030}], 
         Line[{3091, 8274, 3163, 3161, 8296, 3157, 3155, 3151, 8290, 8289, 
          3149, 8287, 3145, 3143, 8284, 3139, 3137, 8280, 3133, 8278, 3127, 
          3123, 8271, 3121, 8272, 3117, 3115, 3111, 8264, 8263, 3109, 8265, 
          3105, 3103, 8260, 3099, 3097, 3093, 8238, 3131}], 
         Line[{3128, 3188, 8313, 3187, 8312, 3184, 3183, 8309, 3180, 8307, 
          3179, 3176, 8305, 3175, 3172, 8303, 3171, 8302, 3168, 8299, 3164, 
          3159, 8294, 3158, 8295, 3153, 3152, 8291, 3147, 8286, 3146, 3141, 
          8282, 3140, 8283, 3135, 3134, 8279, 3129, 3167}], 
         Line[{3130, 3092, 8256, 3096, 8255, 3098, 3102, 8259, 3104, 3108, 
          8262, 3110, 8268, 3114, 8267, 3116, 3120, 3122, 8275, 3126, 8276, 
          8277, 3132, 3136, 8281, 3138, 3142, 8285, 3144, 3148, 8288, 3150, 
          8292, 3154, 8293, 3156, 3160, 8297, 3162, 3090}], 
         Line[{3165, 3213, 8324, 3212, 3209, 3208, 8322, 3205, 8320, 3204, 
          3201, 8318, 3200, 3197, 3196, 8316, 3193, 8314, 3189, 3186, 8310, 
          3185, 8311, 3182, 3181, 8308, 3178, 8306, 3177, 3174, 8304, 3173, 
          3170, 8300, 3169, 8301, 3166, 3192}], 
         Line[{3190, 3226, 8330, 3225, 8329, 3224, 3223, 3222, 8328, 3221, 
          3220, 8327, 3219, 3218, 8326, 3217, 3216, 8325, 3214, 3211, 8323, 
          3210, 3207, 8321, 3206, 3203, 8319, 3202, 3199, 8317, 3198, 3195, 
          8315, 3194, 3191, 8298, 3215}], 
         Line[{3230, 3500, 8487, 3499, 3494, 8484, 3493, 8483, 3488, 8480, 
          3487, 3482, 8475, 3481, 3476, 8472, 3475, 8471, 3470, 8468, 3464, 
          3461, 8465, 3460, 8466, 3457, 3456, 8462, 3453, 8460, 3452, 3449, 
          8457, 3448, 3445, 8454, 3444, 8455, 3441, 3469}], 
         Line[{3240, 3463, 8467, 3462, 3459, 8464, 3458, 8463, 3455, 8461, 
          3454, 3451, 8459, 3450, 8458, 3447, 3446, 8456, 3443, 8453, 3438, 
          3433, 8448, 3432, 3427, 8444, 3426, 8445, 3421, 8439, 3420, 3415, 
          8435, 3414, 8436, 3409, 3408, 8432, 3403, 3442}], 
         Line[{3242, 3227, 8331, 3229, 3228, 8332, 3231, 3232, 3233, 8333, 
          3234, 8334, 3235, 3236, 8335, 3237, 3238, 8336, 3239, 8338, 3243, 
          8340, 3246, 3247, 8342, 3250, 3251, 8344, 3254, 8345, 3255, 8347, 
          3258, 3259, 8350, 3262, 8351, 3263, 3265}], 
         Line[{3268, 3241, 8339, 3244, 3245, 3248, 8341, 3249, 3252, 8343, 
          3253, 8346, 3256, 3257, 8349, 3260, 8348, 3261, 3264, 8353, 3269, 
          8356, 3274, 3275, 8359, 3280, 8360, 3281, 3286, 8363, 3287, 8367, 
          3292, 3293, 3298, 8370, 3299, 3302}], 
         Line[{3304, 3266, 8355, 3270, 8354, 3272, 3276, 8357, 3278, 3282, 
          8361, 3284, 8365, 3288, 8364, 3290, 3294, 8368, 3296, 3300, 8371, 
          3306, 8373, 3310, 8375, 3312, 3316, 8379, 3318, 3322, 8382, 3324, 
          8385, 3328, 3330, 8390, 3334, 8391, 3336, 3339}], 
         Line[{3340, 8392, 3337, 3335, 3331, 8388, 3329, 8387, 8386, 3325, 
          3323, 8381, 3319, 3317, 8378, 3313, 3311, 8374, 3307, 3301, 8352, 
          3297, 3295, 8369, 3291, 3289, 8366, 3285, 3283, 8362, 3279, 3277, 
          8358, 3273, 3271, 3267, 8337, 3305}], 
         Line[{3342, 3303, 8372, 3308, 3309, 8377, 3314, 8376, 3315, 3320, 
          8380, 3321, 8384, 3326, 8383, 3327, 3332, 8389, 3333, 3338, 8394, 
          3343, 8397, 3346, 3347, 8399, 3350, 3351, 3354, 8401, 3355, 8404, 
          3358, 3359, 8406, 3362, 8407, 3363, 3365}], 
         Line[{3368, 3341, 8396, 3344, 8395, 3345, 3348, 8398, 3349, 3352, 
          8400, 3353, 8403, 3356, 8402, 3357, 3360, 8405, 3361, 3364, 8409, 
          3369, 8412, 3374, 3375, 8415, 3380, 8416, 3381, 3386, 8421, 3387, 
          8424, 3392, 8425, 3393, 3398, 8428, 3399, 3402}], 
         Line[{3404, 8393, 3366, 3370, 3372, 8414, 3376, 8413, 3378, 3382, 
          8417, 3384, 8423, 3388, 8422, 3390, 3394, 8426, 3396, 3400, 8429, 
          3406, 8433, 3410, 3412, 8437, 3416, 8438, 3418, 3422, 8441, 3424, 
          8446, 3428, 8447, 3430, 3434, 8450, 3436, 3439}], 
         Line[{3440, 8451, 3437, 3435, 8449, 3431, 3429, 3425, 8443, 8442, 
          3423, 8440, 3419, 3417, 3413, 8434, 3411, 3407, 8431, 8430, 3401, 
          8408, 3397, 3395, 8427, 3391, 3389, 3385, 8419, 8418, 3383, 8420, 
          3379, 3377, 3373, 8410, 3371, 8411, 3367, 3405}], 
         Line[{3466, 8488, 3538, 3536, 8510, 3532, 3530, 3526, 8504, 8503, 
          3524, 8501, 3520, 3518, 8498, 3514, 3512, 8494, 3508, 8492, 3502, 
          3498, 8485, 3496, 8486, 3492, 3490, 3486, 8478, 8477, 3484, 8479, 
          3480, 3478, 8474, 3474, 3472, 3468, 8452, 3506}], 
         Line[{3503, 3563, 8527, 3562, 8526, 3559, 3558, 8523, 3555, 8521, 
          3554, 3551, 8519, 3550, 3547, 8517, 3546, 8516, 3543, 8513, 3539, 
          3534, 8508, 3533, 8509, 3528, 3527, 8505, 3522, 8500, 3521, 3516, 
          8496, 3515, 8497, 3510, 3509, 8493, 3504, 3542}], 
         Line[{3505, 3467, 8470, 3471, 8469, 3473, 3477, 8473, 3479, 3483, 
          8476, 3485, 8482, 3489, 8481, 3491, 3495, 3497, 8489, 3501, 8490, 
          8491, 3507, 3511, 8495, 3513, 3517, 8499, 3519, 3523, 8502, 3525, 
          8506, 3529, 8507, 3531, 3535, 8511, 3537, 3465}], 
         Line[{3540, 3588, 8538, 3587, 3584, 3583, 8536, 3580, 8534, 3579, 
          3576, 8532, 3575, 3572, 3571, 8530, 3568, 8528, 3564, 3561, 8524, 
          3560, 8525, 3557, 3556, 8522, 3553, 8520, 3552, 3549, 8518, 3548, 
          3545, 8514, 3544, 8515, 3541, 3567}], 
         Line[{3565, 3601, 8544, 3600, 8543, 3599, 3598, 3597, 8542, 3596, 
          3595, 8541, 3594, 3593, 8540, 3592, 3591, 8539, 3589, 3586, 8537, 
          3585, 3582, 8535, 3581, 3578, 8533, 3577, 3574, 8531, 3573, 3570, 
          8529, 3569, 3566, 8512, 3590}], 
         Line[{3605, 3875, 8701, 3874, 3869, 8698, 3868, 8697, 3863, 8694, 
          3862, 3857, 8689, 3856, 3851, 8686, 3850, 8685, 3845, 8682, 3839, 
          3836, 8679, 3835, 8680, 3832, 3831, 8676, 3828, 8674, 3827, 3824, 
          8671, 3823, 3820, 8668, 3819, 8669, 3816, 3844}], 
         Line[{3615, 3838, 8681, 3837, 3834, 8678, 3833, 8677, 3830, 8675, 
          3829, 3826, 8673, 3825, 8672, 3822, 3821, 8670, 3818, 8667, 3813, 
          3808, 8662, 3807, 3802, 8658, 3801, 8659, 3796, 8653, 3795, 3790, 
          8649, 3789, 8650, 3784, 3783, 8646, 3778, 3817}], 
         Line[{3617, 3602, 8545, 3604, 3603, 8546, 3606, 3607, 3608, 8547, 
          3609, 8548, 3610, 3611, 8549, 3612, 3613, 8550, 3614, 8552, 3618, 
          8554, 3621, 3622, 8556, 3625, 3626, 8558, 3629, 8559, 3630, 8561, 
          3633, 3634, 8564, 3637, 8565, 3638, 3640}], 
         Line[{3643, 3616, 8553, 3619, 3620, 3623, 8555, 3624, 3627, 8557, 
          3628, 8560, 3631, 3632, 8563, 3635, 8562, 3636, 3639, 8567, 3644, 
          8570, 3649, 3650, 8573, 3655, 8574, 3656, 3661, 8577, 3662, 8581, 
          3667, 3668, 3673, 8584, 3674, 3677}], 
         Line[{3679, 3641, 8569, 3645, 8568, 3647, 3651, 8571, 3653, 3657, 
          8575, 3659, 8579, 3663, 8578, 3665, 3669, 8582, 3671, 3675, 8585, 
          3681, 8587, 3685, 8589, 3687, 3691, 8593, 3693, 3697, 8596, 3699, 
          8599, 3703, 3705, 8604, 3709, 8605, 3711, 3714}], 
         Line[{3715, 8606, 3712, 3710, 3706, 8602, 3704, 8601, 8600, 3700, 
          3698, 8595, 3694, 3692, 8592, 3688, 3686, 8588, 3682, 3676, 8566, 
          3672, 3670, 8583, 3666, 3664, 8580, 3660, 3658, 8576, 3654, 3652, 
          8572, 3648, 3646, 3642, 8551, 3680}], 
         Line[{3717, 3678, 8586, 3683, 3684, 8591, 3689, 8590, 3690, 3695, 
          8594, 3696, 8598, 3701, 8597, 3702, 3707, 8603, 3708, 3713, 8608, 
          3718, 8611, 3721, 3722, 8613, 3725, 3726, 3729, 8615, 3730, 8618, 
          3733, 3734, 8620, 3737, 8621, 3738, 3740}], 
         Line[{3743, 3716, 8610, 3719, 8609, 3720, 3723, 8612, 3724, 3727, 
          8614, 3728, 8617, 3731, 8616, 3732, 3735, 8619, 3736, 3739, 8623, 
          3744, 8626, 3749, 3750, 8629, 3755, 8630, 3756, 3761, 8635, 3762, 
          8638, 3767, 8639, 3768, 3773, 8642, 3774, 3777}], 
         Line[{3779, 8607, 3741, 3745, 3747, 8628, 3751, 8627, 3753, 3757, 
          8631, 3759, 8637, 3763, 8636, 3765, 3769, 8640, 3771, 3775, 8643, 
          3781, 8647, 3785, 3787, 8651, 3791, 8652, 3793, 3797, 8655, 3799, 
          8660, 3803, 8661, 3805, 3809, 8664, 3811, 3814}], 
         Line[{3815, 8665, 3812, 3810, 8663, 3806, 3804, 3800, 8657, 8656, 
          3798, 8654, 3794, 3792, 3788, 8648, 3786, 3782, 8645, 8644, 3776, 
          8622, 3772, 3770, 8641, 3766, 3764, 3760, 8633, 8632, 3758, 8634, 
          3754, 3752, 3748, 8624, 3746, 8625, 3742, 3780}], 
         Line[{3841, 8702, 3913, 3911, 8724, 3907, 3905, 3901, 8718, 8717, 
          3899, 8715, 3895, 3893, 8712, 3889, 3887, 8708, 3883, 8706, 3877, 
          3873, 8699, 3871, 8700, 3867, 3865, 3861, 8692, 8691, 3859, 8693, 
          3855, 3853, 8688, 3849, 3847, 3843, 8666, 3881}], 
         Line[{3878, 3938, 8741, 3937, 8740, 3934, 3933, 8737, 3930, 8735, 
          3929, 3926, 8733, 3925, 3922, 8731, 3921, 8730, 3918, 8727, 3914, 
          3909, 8722, 3908, 8723, 3903, 3902, 8719, 3897, 8714, 3896, 3891, 
          8710, 3890, 8711, 3885, 3884, 8707, 3879, 3917}], 
         Line[{3880, 3842, 8684, 3846, 8683, 3848, 3852, 8687, 3854, 3858, 
          8690, 3860, 8696, 3864, 8695, 3866, 3870, 3872, 8703, 3876, 8704, 
          8705, 3882, 3886, 8709, 3888, 3892, 8713, 3894, 3898, 8716, 3900, 
          8720, 3904, 8721, 3906, 3910, 8725, 3912, 3840}], 
         Line[{3915, 3963, 8752, 3962, 3959, 3958, 8750, 3955, 8748, 3954, 
          3951, 8746, 3950, 3947, 3946, 8744, 3943, 8742, 3939, 3936, 8738, 
          3935, 8739, 3932, 3931, 8736, 3928, 8734, 3927, 3924, 8732, 3923, 
          3920, 8728, 3919, 8729, 3916, 3942}], 
         Line[{3940, 3976, 8758, 3975, 8757, 3974, 3973, 3972, 8756, 3971, 
          3970, 8755, 3969, 3968, 8754, 3967, 3966, 8753, 3964, 3961, 8751, 
          3960, 3957, 8749, 3956, 3953, 8747, 3952, 3949, 8745, 3948, 3945, 
          8743, 3944, 3941, 8726, 3965}], 
         Line[{3980, 4247, 8915, 4246, 4241, 8912, 4240, 8911, 4235, 8908, 
          4234, 4229, 8903, 4228, 4223, 8900, 4222, 8899, 4217, 8896, 4210, 
          4209, 8894, 4206, 8892, 4205, 4202, 8888, 4201, 8889, 4198, 4197, 
          8886, 4194, 4193, 8884, 4190, 8882, 4188, 4216}], 
         Line[{3990, 4211, 8895, 4208, 4207, 8893, 4204, 8891, 4203, 8890, 
          4200, 4199, 8887, 4196, 8885, 4195, 4192, 8883, 4191, 8861, 4183, 
          8860, 4182, 4177, 8875, 4176, 8876, 4171, 8870, 4170, 4165, 8866, 
          4164, 8867, 4159, 4158, 8863, 4153, 4189}], 
         Line[{3992, 3977, 8759, 3979, 3978, 8760, 3981, 3982, 3983, 8761, 
          3984, 8762, 3985, 3986, 8763, 3987, 3988, 8764, 3989, 8766, 3993, 
          8768, 3996, 3997, 8770, 4000, 4001, 8772, 4004, 8773, 4005, 8775, 
          4008, 4009, 8778, 4012, 8779, 4013, 4015}], 
         Line[{4018, 3991, 8767, 3994, 3995, 3998, 8769, 3999, 4002, 8771, 
          4003, 8774, 4006, 4007, 8777, 4010, 8776, 4011, 4014, 8781, 4019, 
          8784, 4024, 4025, 8787, 4030, 8788, 4031, 4036, 8791, 4037, 8795, 
          4042, 4043, 4048, 8798, 4049, 4052}], 
         Line[{4054, 4016, 8783, 4020, 8782, 4022, 4026, 8785, 4028, 4032, 
          8789, 4034, 8793, 4038, 8792, 4040, 4044, 8796, 4046, 4050, 8799, 
          4056, 8801, 4060, 8803, 4062, 4066, 8807, 4068, 4072, 8810, 4074, 
          8813, 4078, 4080, 8818, 4084, 8819, 4086, 4089}], 
         Line[{4090, 8820, 4087, 4085, 4081, 8816, 4079, 8815, 8814, 4075, 
          4073, 8809, 4069, 4067, 8806, 4063, 4061, 8802, 4057, 4051, 8780, 
          4047, 4045, 8797, 4041, 4039, 8794, 4035, 4033, 8790, 4029, 4027, 
          8786, 4023, 4021, 4017, 8765, 4055}], 
         Line[{4092, 4053, 8800, 4058, 4059, 8805, 4064, 8804, 4065, 4070, 
          8808, 4071, 8812, 4076, 8811, 4077, 4082, 8817, 4083, 4088, 8822, 
          4093, 8825, 4096, 4097, 8827, 4100, 4101, 4104, 8829, 4105, 8832, 
          4108, 4109, 8834, 4112, 8835, 4113, 4115}], 
         Line[{4118, 4091, 8824, 4094, 8823, 4095, 4098, 8826, 4099, 4102, 
          8828, 4103, 8831, 4106, 8830, 4107, 4110, 8833, 4111, 4114, 8840, 
          4119, 8843, 4124, 4125, 8846, 4130, 8847, 4131, 4136, 8852, 4137, 
          8855, 4142, 8856, 4143, 4148, 8859, 4149, 4152}], 
         Line[{4154, 8821, 4116, 4120, 4122, 8845, 4126, 8844, 4128, 4132, 
          8848, 4134, 8854, 4138, 8853, 4140, 4144, 8857, 4146, 8836, 4150, 
          8862, 4156, 4160, 8865, 4162, 8868, 4166, 4168, 8871, 4172, 8874, 
          4174, 8877, 4178, 4180, 8879, 4184, 4186}], 
         Line[{4187, 8880, 4185, 4181, 8878, 4179, 4175, 4173, 8873, 8872, 
          4169, 8869, 4167, 4163, 4161, 8864, 4157, 4151, 8839, 8838, 8837, 
          4147, 4145, 8858, 4141, 4139, 4135, 8850, 8849, 4133, 8851, 4129, 
          4127, 4123, 8841, 4121, 8842, 4117, 4155}], 
         Line[{4213, 8916, 4285, 4283, 8938, 4279, 4277, 4273, 8932, 8931, 
          4271, 8929, 4267, 4265, 8926, 4261, 4259, 8922, 4255, 8920, 4249, 
          4245, 8913, 4243, 8914, 4239, 4237, 4233, 8906, 8905, 4231, 8907, 
          4227, 4225, 8902, 4221, 4219, 4215, 8881, 4253}], 
         Line[{4250, 4310, 8955, 4309, 8954, 4306, 4305, 8951, 4302, 8949, 
          4301, 4298, 8947, 4297, 4294, 8945, 4293, 8944, 4290, 8941, 4286, 
          4281, 8936, 4280, 8937, 4275, 4274, 8933, 4269, 8928, 4268, 4263, 
          8924, 4262, 8925, 4257, 4256, 8921, 4251, 4289}], 
         Line[{4252, 4214, 8898, 4218, 8897, 4220, 4224, 8901, 4226, 4230, 
          8904, 4232, 8910, 4236, 8909, 4238, 4242, 4244, 8917, 4248, 8918, 
          8919, 4254, 4258, 8923, 4260, 4264, 8927, 4266, 4270, 8930, 4272, 
          8934, 4276, 8935, 4278, 4282, 8939, 4284, 4212}], 
         Line[{4287, 4335, 8966, 4334, 4331, 4330, 8964, 4327, 8962, 4326, 
          4323, 8960, 4322, 4319, 4318, 8958, 4315, 8956, 4311, 4308, 8952, 
          4307, 8953, 4304, 4303, 8950, 4300, 8948, 4299, 4296, 8946, 4295, 
          4292, 8942, 4291, 8943, 4288, 4314}], 
         Line[{4312, 4348, 8972, 4347, 8971, 4346, 4345, 4344, 8970, 4343, 
          4342, 8969, 4341, 4340, 8968, 4339, 4338, 8967, 4336, 4333, 8965, 
          4332, 4329, 8963, 4328, 4325, 8961, 4324, 4321, 8959, 4320, 4317, 
          8957, 4316, 4313, 8940, 
          4337}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, VertexNormals -> CompressedData["
1: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
IHLz00//soMh1G6O4ez3SCY3lYQ45j+Eszd8z2+tcwYLx32NI7PfS1TNGTjT
ZA0Of1sd65fchqHBqB155PxQg0tdGx1Ogvq3v8JZPIrwubTr7N9//9vXh1DP
owb1PDKf10T6+XiSOh+Z5ydY0/NBJSofZOazvJeeP/pS+SMzfzPqvqhI3ReZ
991L1QeHqfogsz57qHrCRaqewKznMQ56/YGDqj8w69/Hc/eN6U5HLM462Sm/
1AXan7ieVyLnXHDVWG+RbIv7bjlek+S1Ap1lv64VkHjZano/YKkKvR+Q2Q8G
VP8go3+Q2T9xVL9hDdVvyOy3WKo/UY7qT2T258K0naL6BxJww8+JmNiqQMwx
ZwurJP0snejVyfMtHv95COyWvBuEasKx5a0k/h81LyhiQJ8XZM7LCnP6fOFu
ar6QOV+MeYTz1DwCcx4f3qHPL1ZS8wvM+W2h5h3PUfMOzHnv0L7FosMSiTOF
Ey8bXZ0ghC2RdoW8r8TRn1fcV0Qj7R1f3VwuLdw6VFa/k8RbUqPFnp2PQ7nl
L9q6Mizw/NOldfGz9af0CtUovUKmXulQ+oaPKX1Dpr6xh299ZtedhnpnMNj2
aAB+5BPcL/xt9vuHPokh6xR0Xb7eJNXZB+t5L7T6Ef08fYMj6dnrEPR+t161
570pvK+1HHMi99V7orlQI9cGE1haJU2e+MDRDY1GSN7LnTa6ngMvpefwi6Hn
m1Tp+o8vKP0Hpv5376TvC9QUpe8LYO4LO0FOk7cjAbig2af+bOc9eD+3rztn
ts4C874/MorBHQc5U1h+maNO/nB8PqlnXJjaZbdDiZhTcyIzs8sdHX6ryWiR
vv02ldcWGpyCC9YnLFa544ucFzZOqZN7hVD7EU9R+xGZ+3EHtU/x3j36PkXm
PqVNTBzLzvBHoX0L4bixOhTq1z68TfL0Yfu2hn+9K/ZrrxuRnOsKE7f0hoRI
n8iKbjzXXa8GuWdddy1yCoVLD+vZLUj+H7LhumGSHtbff/JoVXwI+F6oDAkl
cb92Oj/ga4ofgMkP9hRvoLkPnTeAyRuL5tH5BGR96XyCTD6ZcKztav1qg79E
xa6ffuiKMSYi3HokfjDtzPPyRieMPBL5y3Y0GG86WBldI+c31NhrW232xwuF
iav0J3yRd9uluYozs76JzleYQfEVMvnqhCydx8C6h85jyOSxOIrf4PJSOr8B
k988fsifdngRBykX2U/LHgmAep61Nt3kvbgmin92mBcF1bt4U/RyfWF5SZLS
QfIe7bq4+b/5hYKEkdfE/fvO8LnwkeEycs5fYzp/wmsxOn8Ckz+zvOi8Clfu
0HkVvzF4dR3Ft3gklM63yOTbzapfM7fp2IOa3/VtWV9i0eqZw45aMkcTekfd
QibNYcvfGJFVbmFo7/T+/excKy+h8zacptF5G5m8bUXxOWSE0/kcmXx+geJ5
YJek8zx0MHj+MMX/kELxPzD5P5ryCyBF+QVg+gVDyl+A2WO6vwCmv2h1TtsX
I5EA6+Ilzy8JtYZcoSBRR8IhTa6sLyXrYmDuv/vL7pY5oJkQR+UVUs+eJP5P
b76GQbiZlNyCRi90lmVnkSX907ZmuvfuAXfYr5dye3tJICLnXLZYkn98L91P
Qe5Hup/CGoafSr1w8B8sNELecys2mIyGo9ISVZVP5By9Jfv63zU6Eb6U9y30
98bi/fc9s0h9VlH+DrhO0/0dMP3dXX66H4TVlB8Eph/0ofwjvKX8I3xj+MdE
ym8Cqz/dbwLTb6pT/hS+DdL9KTD9aT3lZ+FRCd3PAtPPBlD+F4yb6P4Xmf7X
jfLLEPaC7peR6ZeL+ufGxVyJgoAIz1cuqSG4OuDB9bmkDoaRRwbrMwLh2dhG
jxGrWByQ82XXJ/Wf+kf378Dw7+jH8O+XzW627hy0hidHc5u7R2Jg+vuDl7ok
nwJJu6BqSzUwnJOcJ8EeC8m/52+1muXAa9Da8MUDg9aJLBM5FAePHuj4/iTn
iw883BFoTfxp1Cmr48vioHHScMCb9ING3f0jq40y0HqneKHY7QiITze6u/ML
2e8Sn9giivOw85Le1UUentAury+39yMN2kcVfd9GF+OFW84CXKd0cPik47p5
L8ncLXu2r6OxDP+x3L/xiysCJ74+XvnrKdmnriOTt54V4nc+ae0p62SUaX3w
x6WfxPma7jYcTMGiXdcK7t6NxsUsOy5+nqBB8nPHVpHKUHxzQrrlSbgT/jC8
/mR2fpU7PEPuTt7DbDWl1CXXTaDY83nPOTKPB6p+9L/ao4N3m9gXFyjKo9vL
cM9fJL58zdYDb00twGNYd9WC/DAoLmPVW0vOeb3dbbjB6Qp2PhjdPrUoEMyT
95cdIP2mxzmPx9HEF1mSBTtc6jygPiheZg6JBwwHnuF7FYef9+fxP9jpBUYu
o+sfkHpuVy+U6bqZjmW8DRPlW90h+PxLgSyyBxX2X19Xtykbyz/vefxryAwj
mzjaKkg9Lf9N7fy9IBeznp18o8jzAMUNeqy2jtHgTNnp0ZVlaeg332isrsIH
hzq4d1SQc77qqcqt35OId7ayiQeO+qHgNm49H7JHJI3yvWL/+uOnF5G7T9iZ
YfSdTUsvkTzXvmoyu2TujiqnDc0TX2rDbzXBf6akDqsrTnGxVN7CbJl5gYOH
XeD7ve2jN0i82qPj4bZUBzS+ZzDuzuIKP3ilp1RJ/O3t/QKbtjtAwNKye83r
HeFZaHCA/Sxv++rY8Cw5BqE0BfmMHhtY8eXPjz4S97A9WtC6wwQ97gkqi52z
RAFu84+9JP6Y74+o/zI3vFpNPEH3dfx2kUfehsRV//CtWcQTgPJs+tJPaDqo
2O0boU/yj+Rw164v8cX9bQVDvbbWmHrnvFk8iUeF6vuFH3XFncnN+QIsJvhZ
69TTu+ScIxlFejceaaNxZeDqpcuPQ1Lx8Z+z753/qDntEqqjiPOoxbyuPXAl
k9dmZjb++5KP8V8rWNdr/ZpWbQEWV3uuNM9+LxGRVi07bANfL2TRVERvgnVv
d0QZiav/J+muoa8Ju9dFOWxJuQM9apLOlbPPPy12zJG5gNNz9WovO1jC3TVH
nr8hcYt+1o3JJvdBaUh1R06tHX41MA0Wn+1Prz0q1Rk2wJI3dlUx3BbZv/w4
nUbiY5sX+R8/qgXst7Z5s251Qa3kb/aBJN6a0yx+X9QCthQqaDiXW+GqbejR
MutrHtVtizr2EHrMdxzy6NGHa0s398uSuFC08kdxacJPXArblQpUIPr9v4Ef
pG4z/S8TNOwT4HjFPoFLlt4QtKj7pg3Rt8Wu+tKeWonE1wdzycjbwPrG37mF
JD4x/+rV7vQUGObVlxOWt4Dd/f+idYn+tGm3m7b2xYPVjhDps7lW+GlRiVYZ
6f+hNe/McllDIPtIvzbKXcaXvvO7y8l8dfa+ONMq4grawk2vK7UdsXP+loAj
JM8n+e1/6zIV0TEuvOTSEju89LtwsG22bgXPtW+oqcLiPnW9N+/d0HX+zOfb
JP5849gJCZdL4Lly8fcLPnex3gjmzPKDa0LMf7LVzjAW2RvU6KKFXNw6maEk
vuC6vX1wTBjEv/0xtL/aG+ZnbKuY9S9phrlNXBNJ8OfR3qDP3R6wfY3ai0ly
r+rBEv+/B7KB5VGSTe3XKFgVler7i+wLAcGt4tV9uRCyk9NqwdZkKNXKvpE4
TPb1TzfVn1M5wGGpwa0nbAv3w10H2sj8Oi7fqNlyIAtW+y7h8lK8hxN3uZ4J
zn4/+ThhHtuXZHgReq83RToa92odHZUic+3f0759hvhrN+VPGYFOEbi+E6wO
kvpbPfW94N//AJZ4GQuc4E/AX6s8Nv0m8b+/Oi16wATOzlmTGasRhrvvzTso
TepsfDzieBynHV4Z6xGNvaCEIdLySbP1vJSvq7M9XxWOPePYEOjrCjtbHmTd
J/HxdQtdrB96garSDAi8fAArbG1PapM+SbSanLlSFAcerIkdPNkZQHu7YHEy
uZdZVJlA6vsMuDnKuuoGWxqUZ6joqH2gge6i6jV2mumwU8BDrissHnxOCfof
GSdcndRoZbE6EU455bOL7PSBaD+fJXNI/jMi28YbU4LAaPuA2vZb7jgjGFRg
SfLX3J7AfnFtFHwe8l66rj0Qfzw9phlC9uPdu8odbqS+/B2Td/1FUpGG/BLj
ZE9deRS8MueSJq7z3RyxRTwTVbn6ObPJvnj55HLftJkLKsj4cfbuSsUtiYJB
yeR5G1qFx9lrlqgTHxjs5huDxatcAsPJfiwxf8YtfN8K50uc4pYedAWpyBuW
10h9nC/lzw/1NoaLRhIOnlOREGfNwmFG+ufu0TCeSbVgCFBIWF7wXxp8US9S
mvU7pdtW+uzPiQWRsgrnl/x5EHXy9IKQ9zQYfksbDN0aCFuinASO/EiE77lz
HQpIv5nl6ut5r7oBPimxy6+e8ABFU91nm/4/vp7xPHpTzyPz+W7qfBSnzkfm
+alUPriRygeZ+Zyn8sdqKn9k5p+lQb8vclD3ReZ9GfUBM3F6fZBZn5ov9HrC
wgR6PaGIUc8hqv5wkKo/MOu/XUDcba6FJdYLFA06K6SD397bCUB4NUOtXz5B
yBC36R4om3s+DcQ4oo0EyfOcVD+gIdUPMMXoB0b/IKN/gNk/D6h+Q0Wq35DZ
b4z+REZ/IrM/9zTbi5/hzcHdz6V8lVyy8MKNEHWp10QHEtnU8j4mYCzfZLLZ
0lR0Wc1vcI5G3iM1L9hJzQsy50W1gD5f+ICaL2TOl/Ax+jwC+wR9HoE5j2V/
6fOLsdT8AnN+W9rp844vPOnzDsx5v/DgjYq2RgRKHp5ZuuNUJCide807y+dl
b6+eedCbjFh6fSZqRyjEf3Y9GUvqOSG5ZN3qzCyMSJ9jaSvoC3diU+TWE96w
pvQK9SzoeoVMveKm9A2DKX1Dpr79mHiyImJuLsq7th3GwFiUOWDHwUF473qD
k57W1QRM0qja+/xyEJbd8j/kPvt7ApOPVW/Y+2HrwBO5a4PX8ZiAr0gEqQ/s
Or3rQ+ZdrA05az6ofgwa7iz5UUrqECBG13M0pPQcmHquTek/Pu6n6z+4MPQ/
uZy+L6A5hr4vgLkv8r8Ou3fJuuBa8cSLtg1u8LtGZXQliT8sb1TS3R2Kqq07
nQ5PkDmeDlpvPTP7+zzr/9s0FodHmrKumnKb4twpPXdV0lcpqzu7S6VSUXBh
0mXHUSnksmz5w0nm6J8LfT/i52n6fsQNjP04Re1TVKL2KTL3ad9I21vrdx44
+Xqs5D8dI7yw4Z/4RpLPl4t7aTRWd/S24c/lX6GAARNF72bvZbaWZXt53zU0
WRl8WEv2NhiwZfY3kfi/O4JSQyZmeKIiLWjNfkeg+fJkxs3qA8UP+JviB2Dy
wy2KN/DxGzpvwBcGbyzopvMJLGan8wky+cR8+bkyixNmuJ494Lr1wpvYND/h
+xMSl2/t7Lq+2RTD47bU+81zxKw31TuTZ/8d+rRp+oei2xgvul7lwGozFH9W
v6KGxPceo/MV7KL4Cpl81ZNJ5zHAMjqPIZPHEih+g2cJdH4DJr81+52YE+AT
AEoqhT78YA+bhlP815P+8fUWUx2Y5wthRy5xPFxuBrwmZ3+1kPgVvw0ux+I8
QOTg6hcrEpXBRmPEcfvs/+90h86fcNudzp/A5M8uLzqvou5XOq8ik1f17eh8
i6VL6HyLTL49syJY93O+BegbnFidKOaDNkv17d6Qzz0v+Trx0g1rqG1xNi0X
dsRg0+zDAeT59iE6b8MlireRyds8FJ8DD8XnwOTzNfp0nociiueByfOHKP6H
OIr/gcn/6pRfAJMuul8Apl+Qo/wFbByl+wtg+ovr3qwXtb1TYJXyAj4hwksu
Asaip0g/97ndLfoChN8MzYUWNflj3seWhEzSt4U5bGa5eV4Qr89Vd1DWD6uy
W1MezfLbdqcl+uEX8dqqtiGxXT74+gAn/yxPWq2m+ymseEv3U8j0U92mXGkK
fHeAvZRjyUCWA27en156j9SBS+291u90b/ja8GnF/QM7wVv6s+A8Ej89QPd3
YCFP93fA9HcGlB8ES8oPAtMP8lP+EUT56f4RmP7xJOU34R7lN4HpN4cofwpX
bOj+FJj+1IDys3CF8rPI9LOqlP+FxZT/Rab/rXxO98uQQ/llZPplH6eq+OqT
gfBZXbkye0sKnsruUOQl8fwA5a+aH0xBuHvdi6UYgWW6hyJmv590uE7379hD
+Xdk+vfE9ErRQEtTcLC0uzmpkwVuDstt7Ak3OrWW9/g/8wV3t6s9WxJL4JR/
bkV+H9lf27mDF2rcBdr9ykX262qhzG6tn2QmDT5+y7HesSwHlZ8NsU5XVgCr
RJLx13LCRb/fGh3bW4dDqz1b6t7GA88IFL+MoME+59U0Vb0WxEt/PrzfG4/O
2Td2H5Shwaravxd20FpQ9nTQ95x3Zfg8RfwVNycNFIVWLpzjXos8J3b3nXcv
x+c+24RKbtGgaXhh7J7HuWioMdVSn5+K3IstMnvJPt18aVNapGQSvkucaDml
4YNKpWllR0if813lMU/xiMfAe34SYefvob1lh7I52WvmYt9PhM7EIOfxYeBd
Y4fnFK66KPye/ffF9etHCiPR6qxLfOO8uyjbozN8ktQzbOgdt4FCALhF6f4e
CC+AJzyf17aS/dWfmbRw3xdPeN3PphirXAINWfc6OZ/TgDWoNLO7JwEHLfhf
bmrIAVPJ5tbQERos7Dw+XrCxHNtFNFikXvuDxd3fvgfbiR/ZUcc5XlCH354a
SJ18FoHhVaztC8NpIHpd4NSfRXXYpb1K08UiHcOm5/q+DqGBmhsv6w/PCpTS
DQiQk8/EY4+dzmghDcJ5Nsg9iUrDwZU73zsqRKCER2F6M3m/J5pHSoUKYjDs
91khNmFPvNyw8vxTso8m/yo4GOkE4/T6+Jg2k7tY0TelPfu97jNjToero15Y
uT5sJtDOCuvHppZMknmsC9Jfbj1iDMn/tbmvv038U+OPn19m/T5bdHtYnhtK
nnKy01l6FbfrZQZakriP6taGybodIBm50mrPcBKErf589+kU/fuWrfw3gzFO
85QkZ2IS8JzU6nhG+nkVq/GmrUIpWFyd5bV9vSV68ltdaSV6skUnMOk6Sxa2
g7XCzcVOaJf0vT+M3Kvp6MWM36GZ2C60uD76QgjqLbiX/Ytw1COp8j2LM6Lx
IN8FZbmLPsja8aeLnbzfpYfjFKLlPTDXIF2N3cQWL957MsBO8ow9xyOytVUM
l77aPV/v0wVwf6n06Q+JW52YenZhjRX8PK2t36GuCRJ8uidekbhe9offF7jD
4LRClkiSpRt8auc98Jz0yYOBhWGNu5OgXCI/ahHhivB3eWyN5L68v1r03Vcm
wo8yJ3/WOnfYG6Jt70D08Py3zp88gjEgvPm2SFHNfbz50nfPSZLn9skLlut2
HIN1l6cHiy47oe26XaLps98DrIzKerPFB/9bvOXcYzYj4DoacXr25+w6Bw0v
zv783vX98kl17psocX3OtjQSZ+OX+9BleQsTMlbXiiRqovDfRUFd5Bz3q5cV
BQ2cwLatMcLipgmM7BXtnv1eeuH8hEUutfdAMP+PR9AuU7j1XOr07Pczue6H
aNLqsbA51087JisYNr+2WCo4+3tiIetDNy1MA+7HlcMTRT5wY/SglCLhw8MC
I1uORBbCln/jSuZqiZCkzBIUNkDm7nP5XanPpZAdZx2ZrBIM0lzsbvVdhMdi
3li+lyuEDzIZGze5eYJzyxbepjdk71xcPdRWFQ99+R9D1/Km4Bz5P/O6iU7u
d+DeuLbXHvUk5Ya+sOTg3v+j68ujqf6+96VQGlWUoVRKo6FIJbU1iIpSRKNI
MkZUIkPGzPNMZB4zz8I2Zw6hhHqL5rimNOt33Ne9v+9arfX5y1rHXuees197
P/t5zj73vpLYz1aR565ab6t6dJMrGFUK7XmrZYGKCz6MzpyfV0sdmzoYFQyZ
q7Qe7XujDBFrPfb9JXFuS9t5YHlIFPBqbs7xKLCDgAaTrUtnzofl3Ea/iiXC
Ov5ZqRXW/rBGt6HzG4lDyX3qoxK30mD1iM/UmlPu8FGo3duN1M3z/dc8ZvOW
wo+3LyS+eadDa3k9S3UF4Ru9bA9e89XCQQ+F2oFNGRDSKWN1y54GXrvlPeUe
1MChG2XKktKPwFlKkdfKlQbmqXvPvlOthtlKz7aazcmGc3Pgc64PDb48WrTs
wP1KWHUpPcNpmwO+H6t955pD9OaK/I37rXJA0F4kf1IuBxf1yuo96qKBoETl
ttNOOnD08+WI+BVV+P7judRigtv29qXDR2+ao9XovvaXvo/R4HJ7736CP+ZT
C2/PORAO4jtr1iz9egveVf63UWLmnlucsOQ5w2hYFvNbkcM6GN7nVlg8Jc9d
ttQfY1anwFn8DXb7/UH9V69UF3nuPGfGWueKPwYpoSnVD6sKYEeLwNt+ss6f
y1Jvc2pWwaC11Xl2+3zYZGJpNORFgzl2EvUf/Gph26mz12pUqmHixgLw2EoD
tiw3mjJ3FRhqXntxxzYTdp5xSd0SRfhSj7ZB25dCOAqGW8IEb+F8/cmv8/to
YFUh/nmwoBTko07s6nN3BpPHJRI9TTSYb3dgf5PWfXzz451M0/wKlK9VZHtT
ToM8N8sjnAbRqGk2VHMP63C/8GYvZVJfOlL7J/OUQvDixeLk4mZENs8j2w2I
fcx9OwM1aUcovFk39dAxB+3+GFaIfaIBX8K3EY0Va5CdLzYkpuABiLk8vfiE
xM8RZZ79p2ItQUZt9brlvY9gc0NTSPv4zL2g1xx89tkg4R+9oySwBFJifuWb
kjjpnXToaVZH4LFZ+jF96xPgCjPg/rOH6OJV61bKBJfAFv1uY7c3haD4o7+r
NpOsp2lAfhORthaLX1UYRMbCgzXdN9gn/7euZ9gjwx6Z9nnU/LiBmh+Z81dS
68EV1HpwKWM966j1oyy1fmSuX4XaL8pR+0XmfmuL6f6BEl66f5Dpn2jKn1hB
+RPuMfzZTfkftCj/A9P/Qducx+o0bMCmfXzt0f5qEGjku+tGeIWu5d6WRbq+
wGu3NvJ3WyVcLigc2k7W707FA7JS8YDMeGDEDzLiB5jxM4eKN9Sl4g2Z8cZG
xSdupeITJxnx6dKcMKsjpgZVaoMd7m8qxvxU8/U5RjS4zKYluPNICbpva37x
QicXx8v6ti8po8FhKl/wHpUvyMwXZSq/cCianl/IzK+fX+n5iN+k6PmIzHyM
tKPnL8RT+Qv6jPyNkqTnO8pT+Q4fGPnuFucM7WPJOPeoUNtz/mxQPNyoSyO8
hVU4kLZfsBwHxw5577QIgh+HKmvla4n+qprPlh1XjTe5Te7si8nBXuEXRnPc
yPOi8Ap1KLxCJwZevabwDfdR+IbBDHz7Nq9ph9AmxNLG6et/s7KwV2PLfvds
GozHF3Jci0rB0mZBh8YJf+T4sl33DPHDjwUhuwXEYtCnIMmHG51wbtHV7inC
T8Q2S4jfPxqNVat32p4LcEK7scDyGzP3uCg8x6HVdDxHJp4nUPiPSUjHf2Di
//p79HoBAVS9gF2MerFDiFsyRi4GfwqzNnuXPYLw8sXP9Gd+p2Ltba+D3vm4
IbCLJ3DIErf2R5wrJ/XobXPg0nNmxfhp8pW0A+GVcp2fxozaSX3UKf/vSl4h
NmilHiObxFvPUhs+ERxOpuojjlH1EZn1sY6qp/g+i15PkVlP83t3O8vMcsJL
Dlaf9RK1sS7o5qeZ83mrnCcH+Z1tkINT7p5e3R105YqTTCTj102LR2LuOEGP
6fNkCTEzYLX/E+ZAxs+dSzLLV3eFNR3B8tP6+iD262uV1kzd56HzByhdSOcP
yOQPll/ofANrNOl8A5h8w4jiJxi5jc5PgMlPDqxOspwtl4ymCyufa9+zw808
NLv7pD5u09ptq3QiDr0kYgYL9zih4N2ig3VkX223rT+p3YrG7FXmqk9tvNAp
d9mWz+T5ysrT+RWuV6bzK2Tyq6kpOh8D6wE6H0MmHys8TOdv8FCPzt+Ayd8+
HvukOigUA1n9nx/wVwfCltv222busZ/6GHQ992ISmG0pcvzMEQi/Ur1nvyM8
M+VvTtHcLVmwTPd3UZrzfZh3LfjAJhIPUhT/hA3ldP4JTP65qJfOV6Gc4qvI
5Ks3KH6LtQ/o/BaZ/DaufsRUKnAF3vcxe75xoyIMns3Y9Zesc/p50uDIldNg
vuq6YZj2InSRm5c+c28q4jqdb8OcjXS+DUy+bfiXzs8haD2dnwOTn++i+DyU
/aTzeWDy+RiK/8PqlXT+D0z+r0zpBdhC6QVg6oXNlL6AKUpfAFNf8KTwpixS
q4K1T2si955/AMuvJSurJROeYDaW+2zsMZSrS3ccXhiJ20K8e0sIrt4XuLl+
RVY0nIoscvkhkIsvP+++XTtEeOku1wqBaT9cbWoReZK/AJ9dMuJf+x+Jf0pP
YQylp5Cpp0L91J4+n3oIH38s43d4YgputKdyIyTe/lNfur0oNwYmd+0WNd7k
APm5s3OfkP326tP1HSx3p+s7YOq7nxfpehDkKD0ITD1YRelH0KT0IzD1415K
b8JsSm9CL0NvclD6FEQofQq9DH26hdKz8JfSs+DE0LPPKP0L8ZT+RW6G/uWY
pOtl2EvpZWTqZSkN4bKEgnmwZGj806GyGlwoSlOoDCA8eULxwNw6dzSc1j0k
PlyEB2KsJzVe/H/9jnaUfkemfheR79XqzrRHmfdr9lz4EA33M55P7SF+m8u5
dsWCa5ZYp752t5dMIswPO9srQHTHq2a+CuvL1uC94W7HeGsOPPSsbU75SAPn
vntvG3mMYK38oq9ObknwwyXQZub7pyvc9mr/nWWKu2RvcuzYcQ2m3y/Y847E
Lex1qv/bexMtjKw2Hiu+i0LV7QUzfcytb08ILrhzBTX8MjdPiTtiQuyq0KiZ
fpxiLa+Jmi4qrZ3bf77UHp+xHO+ZuT/5rEDRUXGlBXoIbi76+d0B6/fFFtnP
3Cec+G7ksdkBA0bEuXcNOeDTujYl1b8zv+MnarKk0AXV5ha/Mlhujz+rj9+e
OYdcuecVTXylL+o1c0d7XbmHDeWLtGbud4n9UHvEPSsQTS9afT7pZYwmIXqS
WjPfb9p80r636AIIZn18vPm/WOBac/y8IYkrmo7MuNWh+0BbNveMqGAGSLTK
X1chfu43fS89MWIKGY0OyQbzsqChpPlr54zeXDLE5/XOGrPW3bTQ6QuGFMvS
lZUz96J9nqjY37BAsT1LA001jqDVHynRmXtHvA8cNVhO3cSxdYbVvRXmuOCB
9umZ81ilnLL6hHv6OPaxNixolT2GtbiGPyLjko9CJTdYa+HmwfuSYQOOuCfK
Vzd0pi58mf9ess4QH/Mu+RYa54I292/u0yPjH/wE7VK0dTGx3Eu45bkzus6+
vHXm/FMpyce5zfcGDn4puBjn74wx9eb3Zs6Hffz3Wq/+YY2CXPMLFeb4Yo/I
2I9G4p833t4Gnwd9sXifudNeGzsMkukriCLjf/Mu9AxUBkLKQy6vpc6xcK9D
0mhy5vsdYb8lw+56EF0iOhSy/RHUtCv/6CQ80DL61V6BZA2ix8L6pNpiwcCq
d/kt4mf+L7Y611U80eCoFS13UQTo71bivUD4ofXPqg+uLV54VuHrf8Ie5mDc
tXkrK1mnfKj3vnBZF1zWPKUQ9FsBV9o07Jrp7/twFvNmz72Nbc8idu4YM8Cq
556zesj46q+echp6VyBow5ikS8tV3PI9aGyCjAf99l63XNQeuPPXLxcRv4sJ
L46e9SDjfS1u089NfOBq0WH70VA7LFGsnFdD9su+peaH5gE/uNXtmP6SNxBP
P/LnPkie7x4Oz3cOP2/Cor3w8kJ0OO6LKPo6c5/zXVvj5mu3LBDmBk17Gsbh
vcglNl8JLikL2arWmj6Ag8nlP1T7/OEGrbPfjOQpdMfEi496wzcJ1pazp0JB
NEVUvJL44fjrzIDdQqK4zUYoKS3IFy5zSv/3Zea5TJ/n9pG1QknaU01OM1fo
CvETkSHrb+IWNVISuoVdsddOb1vnBGZhwSdn8uiG3F7dnS9vonBn8VRaiwPc
Kpn+7k3GTbZXJ4U0q8OXa/Km8iccQKQjkXXmnH/PJ55AvRIrkHKYXu/7xQ62
/XdBbeZ89bamL+/77Y7Q/G6pqZzvTXBtHJua8Rvn8+eXlbvsQQTsB31Wq2Ol
v5VuBhk/s+yoecktN/BQEvn2420UlmnKTseS/TrsaWexVLqO7xaZjzwfTUf9
8EuZwyS/fHZzC77a6Yt9SrHVC4Xy8PcFCe3gt2Qe2bRLg9FBsKGv8UL9SnuI
+mOxZOae4anYW00Lyn0hLHgg/FbqHRDJ4UmdeV5G14tO3hxzg4hA9UGXNzYg
6rz1gyBZz9tlGiEp9k6ge+T3f7fK7ODpmGar8t+Z76vmuLwWsQP3r1xcxXOc
YHvtXI3zZBxTLr2h2frCLudxmdmK4VApt15IZuY88Gw3THxJBOmv5z8ISdiD
H8vrQFuCk5o5ojJ+1/PhcdhT9er+MJD1j5odQ+qdyHGLkTd62cCzqNJE65wB
XB/uo/35QuZZ1RkZnJcFreuV5kXmROMfm4rN24gOivg8IJCwzwZ8LkV81j2Z
glH+j+3rCN/YANbFO3ktQNTzdhunZxZ+a765tYTwVfGB8zkyAvagksmyvvZX
Fmo9T3BPHSbPq0HY66yYB6xkOVMR0KcCNs/m5ciRfVW9aRC+tuc+GCyP/jL1
8xqoxU8csp65R5311/DjfRdYIlbalJFrChsFHTiukHE/8SXjLSQudQe/71hu
Fw5fSl4Mzdyvs778fMnowVjQ2z4F80atQfKBtnwQGV8efyk2hKMO+gvOHCir
rIL5d4fyfhDdpHbp06V1O9shJwmWlWgXwNmSC4srskfgpAveqxWvgj+n67tY
7aPR+dfbEi/CN3YfH34c918O7BMeNohXzMLj6juaOHpIPPz1OhWd74v69UKX
uaSLkcckQ2HucxoosqxnjXhrCkUnEnea6OXhhxgJzx4SPzuOj2duLPaDBbPq
m6yLEzHN/srHHMLrHHZqmgdzRYHEbc/Wyqh49N/2xaad+LnPwFlu5D8n7M6S
/HQrTxfeyqOMO/FDx2yVUbW3DvjRTFHuYb03FN8waykm8XY6TF1l7KsfqHLr
nle9GQo1Xluu6M58X3Kzmcr7gGTIKrGcf/xSNsh9l+9IJTwnU/zQ4wD+fAjz
UXMtV6sDZVV77gkdGvgKl/6a/JUFT+3kRpOPd0HXYOGzRXwj/1PXM+yxlbJH
pn0uNT+GUvMjc/5P1Howj1oPMtdzlVo/BlLrR+b6P1H7hQ5qv8jc71lDun9g
yyO6f5DpnyDKn2hA+RP8GP60o/yPn1jo/gem/5dvPGz+LsAPD/G8Tejflw2d
W97aiJO8CPqz+c8bgSD49oJl9v6tZbBjUj/0bT0NdlLxgIpUPAAzHhjxg9NU
/AAzfs5Q8YbZVLyhOiPeeKj4xFdUfCIzPhe7yD5pKIjHv4NL9pQN38Vdr9qS
VhHcfjqtHXlVNBgNN9l8C+QLRdVexeJWgmPLqXzBPVS+IDNfRgbo+YVZS+n5
hcz8+lFPz0dUnUvPR2TmY8Ybev6iDZW/oMnIX10q33Ejle/AzPdy55wXWxNu
wnWPqq4eWiJsaQzXzpi5p9fryW13Mx57r1rb2g7EgOXULjZzojd/Jqa+HJEt
QJEN86ot+3WwXs964CvBJUMKr7CFwitk4lUEhW8oQ+EbMvHNfULmkfGAHzbv
Kq86vv8Bshi3Ks7guVtSqeF3TzucNp7WO2/siItDp1ZfIvsKPqF6k2eHM/56
uOPxkx8OKCItmryTjNtvVrURyPdAc6tJJ50NlnhK1cZ9JRk/QeE5ZgfR8RyZ
eL6Zwn8U66fjPzLx35+qF/D6BL1ewA9GvXAUr3V5HOAAja8yHt8+nwXf95TL
jhC/rT2+8snjYhdc9S1+6PeZEHjFqxV2mszzou5vY983J5wdnR/K3nQJ+Uq+
PZipj7dvtIbk3bLGSyHH8y5om6KH0iXbGX77nKqP6EPVR2TWx+Pi9HqKwzr0
eorMevphd0rc14o7sOd0y3j+FTtsO3/ywcz9MT4p5e8XJm/CnQecRgkLXPFq
ka7jzHn7vfiIEwJLnOHcTS/TelZ3DPV+MDzzfZm8zx/C/NWVUdYvdctoizf+
ufargIvY36X4A16l+AMy+YMaxTewLpHON5DJNwSf0fkJBFD8BGwZ/GS9iV4s
17H7uEi9XOFeYjR01ErbihJ7Z7Sydhf3Rd70fUO6/j7QcF0pjoWsR1ey9svf
QH+c0P228pqlDew+9PryDTLeQvErnMih8ytg8qu2cTofw9Mb6XwMmHzsEMXf
oLeLzt+Ayd+KRCVS+i0dwG2Y9e+3RkMwZLsQPKMjCDnn6jvuDbyHPix6JGaN
z0NO930gn/u5Znm28gV3eJqzIHFlaAja1Os4byDPd2EUnX8CL8U/kck/iym+
inoUX0UmX83Np/NbLKb4Ldoy+G04T0mnvbEf7Pu1bOG3j06gw3cfZ+7nXHk2
emHROgd46XZ91w1PT9i64wfbTB8/iOLbcG+YzreBybcXedL5Oawuo/NzYPLz
rI90Pg8afHQ+D0w+f4fi/5BO8X9g8v+0bLpeAEdKLwBTL/BT+gK+UfoCmPri
8391iz+E24DawLtA26lz+OPWmeA6Mk47+Hv3n35rYOFfWubdEIp8bdev6RC/
bapatgRPGaDzZX+24NZM9Dwu6rBulAYbI9oiLc2c0V7Lyj5/UwaOfGi7PKOP
vgjT9RSmUnoKmXqK49i9jrr3fpBnOlm6z8sath/nN/Cc+b5Mz7mNEkFe4LtF
g137vRVkv7F1nTn30Cqm6zv4y0bXd8DUdz5jdD0ISpQeBKYerCmk60fYspau
H4GpH42V6HoTBim9CUy9aT9E16dwzpeuT4GpT19Tehacjel6Fph6drUrXf+C
+j66/kWm/u3tpetlvEXpZWTqZTutNvsKXXf0u9TJL7E2GyN3t0h+JXVN2+A5
G+8pdeBL5+Jzq07DxheqR0cnaMB9jK7fQZbS78jU7xuVxXfIdR4B8dIPzW58
5sD513Zy5nzMWmrhynDDg3DptPn6iXFLiDphEtQ1cw9njvbbF9mb0M8vfEzb
PQJyE83U55HneC6Pjzd6pTGIXq3T/nutAn7Y7l6tV0ri6t7+j0XS2egfIzNQ
KloLhlL7V0lZ02D7uoyX3UJ1yMGyYUpaJRMs5S+eHrtFA+k9hy/AmUaMZt1V
fLM2AOVy9Q13nqTB7BEdYxvxeuzWn29SMTcar/6833NcjwYhLZOsQ8a12JUS
c6D6RSxer47/lnef1LuuKbt3l6uwfG74j4aWZFTYG3HQJIYGPW0hRfuVy3Du
oRYTH4NH2MvOckqvjOjorp06kktzMVZwzo+QY8l41Pfkld+vadAVfNeGtSUJ
yzEuvmxHNibLH/gUOUSDS583nzh7TwfmVM0Oub33NrDfNAzvI/7hviwv1cJu
CndTDFwaF1qDlf1YVikZf8iVKrxzLS9EKj991zASA9+vyh/8QeK2R/nKwiSh
eOx/LmsdZlMIllxSTkufz/zOWOj6BK4yHJrV820dTw6UcOYa6hcQHsUufcxQ
ugonab/1f3/UBe2nh8YtHtGg88tCrfdqlWgY8dIfdzhhraXEe+48Em8N0Qt2
PijF0P9Y+iZZnTGC23klNBP+ufThWLlxGc5S+hHCUx2MgiYDrXFPyPNqavbJ
+68ABzoeXn+6Lhw3T7KwePQR3fdS1DCyKRu5nBdvsM6PRCe2XwIlH4juTnYQ
/WmThBe2lvCbrw5EcSM+7kbCx1zcaxVvmyZjzVNbFGyOw6SAnXH3SV7Hywy9
sV/nBqGHYsJFXR3Bvq80bUZ3qxRInruw0AOcFP682brCHjin2VlZZu7XvTmi
7lTuB700UZ175x3h0oYSc12Sv7liKBe62xQ0O3kV57EFgsKStNiLZDx4llEx
Py0UA5ZdkG05GgAHmo3YVs/8bticW8WLwoNR9dzta993WEL/W7VrPSRue/pf
rmC5Gohe7zbzieXrA8u4wsszZB5ZO79QFxMXHA9WPthhtBXigi/Em8+ck4hc
XnkjPgyH3z5ZWDR4F3+3Bm0+QOZZfFW73WaTH+43+m9vwCdHpHVL65jP/P6A
pJznfY0AfH30T0+Lvh+ut/h67xyxDx9qdpnbFYp33Z7H8m5ywm13FqVtJ+MZ
UuHiG3qD8HVXtez3MncU27H+ugkZ5zE+8+J5ij88dozNsZT3BZ5Dnf7hZDwt
5Fe/W3copIhgR52BHwRcyXWc4dVne1c5emfGQuXuJ73nzwQAR11v93JSf9U9
3a35m5Nhz/su6TfW/iBmvTRvAXlen/y9pxWXZ8NE15tN/O3+oFemk3KR4Il3
9Swz1e+ZsPBh5+m65bcBPg88f0+jgdkrP775DvmQFrrSZ4WoLUgVC8m1vaHB
R9MMvnfbc4BmeDm9IPoWroBbFSKfiW56yzH+VawANm7U2qo3YYauARJbeQZI
XIXsK3bqywKPOxyVh21T8eQj/wApohdaLeou9024g4Dm1/a7XNEo4WkjP/M9
OAlN8xVHVxvhmaZfdmfigjD8Ar+2IPHzrufeinOW2KP88zmsn4otUNX9EYsf
eV6ZZ5Ljk1ojwEKhSf3UmodwbVui+HbihzOZQtIqWxLBaH7MX7X2RDAwO6Sw
jcTnKYHpLd66OcB/ycF7145UWD/01GI+4aslXSq7e0zLgdVC0kJXNgte7nuV
vzufBo2qf5YkFlRBcPB1JfXd8ZCd+y3bieBMveTQ9qYftTBR87Dna0YsFF3t
l3lmR/jS5a/qC+Lr4X4kj67V0QhIHIjTeqpN9KPJ/qQ7bfUgFrl5OqHOHEV2
RjnevkoD+apqDpFL1eB0JX1OtUsYLnd7OCX0kAYHpPpir+zJhQmnCyq7btTi
YfG7Ke0EP81i/dSj/SKgVO18rFpuCdZf66g800bqbG1rcOpPU8h5/kE9ZSgF
Bxe67r5BnrvJa5qFm8oZSJXmMpkd6owN+6MTZu79FkvoqXKd9YEciTtHsqRz
oKh3jHf/Jxo8iZi3Z01IMGz7vDH+D18JuFi/9jj2jAbfLA/wj4zkwPFdOvIX
S0tA5o8qxhP835V9eeWP9kIQ9JC1jJlfAyuLbwXRzGkg+lWO3ftQHbQdu3kq
7XYBLHH96beA+OHCutriWtEmWAiZHLsOl8EZg9WHty2iwfWWEwqHLFvAOuO8
vPerBJilO3VKTIAGccp8H0LnNIDK9KDxrF/FGLg/MemVFKlrej39Cf0VoH95
V5/x9ieosBL1qsRI3RznORT9KA++Nv/GaNtmfFSwUP03D9Ede1GnkzUTnh0O
T+pd+RjfRAs3vayiwWTT0KX85EdgN2lyYvlgBrLd1/KQIvgftT/qaa99PBys
nqf56VAqpk1NxMQQ/l9qEC541CoCeaI0O8qaS2B25mJhNuL/xnf6D/6UJePN
QamYuV2lwG38cw6Q+f9EAteV3+ko8tP927qeKhiKXJ1pFUr0UYdZ0GeFRyiQ
eXX0b3ET9LOUu2WK04DV4D/WzLFzIBvoIB+S1gTXvP52HN1Pg/8WpbDn8IYD
n8hR41trC0C1cNnalFc0GKDGkZcaR+b4L136PLiVmgd1GfP0U58LjM9F5ufO
i6KvEw5S60TmOjOofcFtal/I3Nccyg8gRPkBmX4wp/yGOyi/AdNvI5Sf0Z7y
MzD9PGSh5HAxPRk9t75YnHe8HMqPBl59QeJq1r2Jw7ZNhTgr02/v2JUW0GD9
6lfOQgNh6rmjHvXcgfncGXGCjDgBZpww4grvUXGFzLhixCEuoOIQmXFYcUOB
L+d9HQ7yjtoZZBbhz7tH+L+r0mBN8n/cfSWPMeKseMXtn5XYsG0PG78tDdjv
0vMCY6i8wL2MvGin8giFqTxCZh6F7qDnHRpReYfMvNN4Q89T3E3lKTDztJzK
a4yj8hqYeW2fXXDISNoXC1c9+br902P4LKfybVUrqe8v9+2xDMzB8B+6wwlh
FXAtaw4LRwIN/L4vu7lHpgbXWufPOej3APYduImVQQRvKVxCPQqXgIlLKhSO
oQ+FY8jEMWv7G5Hquk9wzZyjgjaN8Wjv7pHDYUL01OFXq3h/V+KSOy9cJRuT
Mc88OmHmc3d+tGKbWleMGwfMLbYbJ6O2Skr4vKeEb/uXjD1SzcE3f/tmLR9K
R4nNkelThIesp3Ab91C4jUzcTqVwHm9QOI9MnN9H1QVY3EOvC8CsC83RSVsW
n9QD0eY/9jKmIfBGWkm4fUanc23j8tgVhurL75xRc0+CWV/1fXsmic6ay7Gx
0yUbzQSWSla8C4NLrgGO68lzyRFuKHXzKEQbJZ31IYVe8H1slYM+Wedbqg5i
rRG9DsJKRh00pOom5gXT6yYy62bAqxdxlrOzcMTdXft2qhPOPicy353UWdkN
UQU6D7PQokOs+qGQH7Z2Ro/6DBMdl+nf+ONoMh74rO4Zc9QNN12xaxGeokHY
oWsyNzQTMGyzy7sNV0NQq0sjsZCMl1I8ARUpnoBMnrCH4hWo7UDnFcjkFU4U
D4Fv3XQeAkweonDqUeDvvUEQ3GrumXvaHXpYhut9yPiK6JMl2Yrh4F6dtIiF
0wVOdKtYzNzDef24du7pyz5w6LrfnWWbPGGt9c+cQzO/V0PxKPg+SOdRwORR
4hTvAn9nOu9CJu8qongabBii8zRk8jSWOj+OoXfRwHLezyCR3QJPPBIfmrmH
XIVj0g8/esMjWw6VoAkHZFEKOlpI7M/lPFLp6bOBQpn6Bdv5H6DfCul1OWSd
6RTPxPkUz0Qmz/SmeCnqU7wUmbzUfR+dx2IIxWORyWOvKC2QX9kVA6ZXuG22
T4eC288NTsFE13+erdi+yi0JGqvCLIErAoTDxgItSVw9pXg1pFG8Gpi82pni
4ZDyjM7DYRODh7dRvB1WKdJ5O6xh8PaXFM+H5td0ng9Mnt9G6QLID6frAmDq
Al1KRwD/Z7qOQKaO8Py2Nk0qpRjO8vh7zinLQI3TV+MGyfwP1Od7/DwTDRqj
RXuWvHiMc7Zc0pFsooGMUUeRPL8QPn/d8zxRJhoLo602DxD/nyqbE/e0/xa2
LJRR7310F+OPcCnPfC+G9xNdN+GFGrpuQjaGbpq3onDBorIMeLmMY5miURLk
yX+1iSF+WPrx3s1S03zQaqosWrnzEcQufM9R3E3yl9JxoE7pOGDquFBK90EL
pfvgKEP32VM6ES5QOhGMGTqRjdKV8JbSlcDUlfspHQorKR0KTB26ldKtoP13
/YxuRaZuPUjpXEihdC4aMHTu3Fy6LsYdlC5Gpi7eubMmSuzyAdDs0Vk1+CYW
72ksv2VE9KDTShvha6M7cKz/3ddnbndx4MaboZn7tO9203U6ilI6HZk6/cqD
AHHr9GRIP5kusiKwFi5xv5m30p4Gg86GK3C1AUSUbTEzDawEheqYBpUckqd+
8lt0jwbBxmhnqZXfK6FaftyTJ53gwNzj+0vTskB6YNNFDrtCKKpW/DhOnm+U
MZc6J1se1gz/qr04mQPWYZ6uF0gdD/H7MqicVYL2Lt/ZJx0y4G1mUEpRDeEV
wQqLT1vVI78Xl9cy23BQUjhb8V2H1JFSwVc7CZ8Qf1Xk3CFhDVlxJ/TP7iO6
NUr6aJFVO2478bT3zEAA7glOe9ZSNwLHt3IVS9d2YHzy/Yx7WXF4g+XNMX2/
EZDnPr+4+FYnFrMW4JPkfOQaN5KWlxiBFM1PvNtku/CNXibHcGsxKvnFvJ5i
HYFmM7bHZR+6MFWq5b1fbCnqey3XUXw5DAdHc6/urM4A5cB+7375BCjiMcnl
J3ju6hxbFBCeCPOS81sPyeaCQ3CHQRPh/485eKbLt6SBxdwFdZrBtTAZ6+w+
Tup7zq3s1SyLupEmpXHFUwjxkqn2q6sNw7BBREHjUhTBPXMVX26FLFA5zPvU
hPAcDYvwZar9cViYN5g5qyEIsr8v/vvjGw0uweJPN88+w0+Sn5ZzahegWE5h
TO/lEVjzPjjld24HcgfZ7757pACLpHoWvrUcgdeHy9m3JGbghZ/xH5f1RWOJ
5kBbL9Fr+3byz9M4UohZCR++eByNx8GUu7kPnhOeebujtMijDU0sXnNuPpaL
Fq/aNa62j4BvbM36FTKtuE7queXN3VkYYprqv5+D1KP0q/fGllRjgntC24qu
TMyf7DwUFEjqzqZR3Ye7n2D+3YI2z2XZWFtptMmRPN+0xNdmlRY12Cw60L5J
wxW08t2XTBH+UL2+5OWp4Ars3TcKymLRoPDrS09TAeEhx5vMVZY240LLPRmm
wfmY/ulUdzIfwY3TPSl6Z1rxHmvruq+2ZVinFdJl+Yrs163Bylg3EwWX2s3u
PpcPL8teLv9F+FJvjqladFM4DpWmDsbnPIaitoRGnhai099v0tdtbcG5zm0W
y+1L0X5eaIH+pxGIaPAv/ZxP5le5sijHoBzfrqeZjXSOQL6ZicCh4dvQVylY
c9ehEo7qTCq+JvliO39NtomvJ7Avzut1GSyHV7mjyWerSR3p/rM8t7oJDed9
jV4/UYAa1xKvbeWnAaev71cd3WiwXbzqtJJcGbBksNVy1tEInqkdbnuXBvNG
R46/eaeHzkksvxomCN4y3lMv+M976h8csOFfxJIFddv7HCJXFsFQ/oF37iQf
H6Ru8985qx6rajIXS01nYamp96WDF8k6L6/J+O+iCzjn3Cq5Px6Ib8PuPKog
9VSfMf/af+YvOyyjcso2EA+Y8SzezlKC07IBa/8Qf55m2G/+x/75Dt8sbYMq
rFi37LZVth/+d9o30C2F8KW7rW+ytCux1yzAtkZDADI3rniygNSXbTkrdYrK
onDEbW91/I8yjKB1G48Qv0Wc3pye3hWFh1iETeqwGg98UT+7IZzoxDlvW+8G
5uJx7swdL+UqMNuW9esZwg8zGPaH/7Evd1z0am1rKf5sH9Iv1LaDlIUHjhUQ
/7DWXilXmMrA8G9p+veb0mHVxl9avIOknoYtvqkalIPvJy8f+7CyAk3aOz9s
I+vnzpe//DTLCxO8X89VmleNd+V1WDjiST06eWBn+FpE5ZeyPodYCJ9/vodt
2V2Ck//D/kUd79dlQqFY9p/HtIpaEYh2xV148IIGKRJeVjolwaCx6v16NecK
EFZXCDUtJnWE81PJRfNivDHXxOjvijLUPzz+YF4s4bc/lz/hlcuFq/vmttGW
5eATHqte6CT8dmD7Pr3uQtwXaTunJOAxrji3I9iF1Gshhr32P/bSj4rFG+cH
gOG7I2HHuSrg0rFtS+pIfTTwcJ//6Ug87DJuteu2qQLn4rv/+cXRoOn+IGff
5nycc+DujRe8JcinbDtXkKxTJdul7CNvOZgnKyhMjibhgSQ9EeFyGhhbjI11
z0vGN+6L8evNdBy/3lFw5SMN1Bn21/+xb7B4wtP+wR90+rXOeJL6/HHJl4uV
xP/K+encR28ZAp+Fhx+LXzlYSNoHnaulwTC/3V+/wAAM+7PS++CmKJTnXFkx
Tuoj433QUEK9DxqSGO+D9tK4YS4Q5gA9dfe0/7Q+hkAdlf1iREcMB7BZHFsU
hxqyRt4//yvBiPPCZ2cTfJhepxfotCcLstda8CwpOYRjk6luLoRvx1Lvd4Zo
dfr7nXGS8X7nXoXdPr7+yeDpVJe/cCARRg7Zr9CY6fcx1lP5z3r8Thlzjs2L
w64mruofp0rR8eJmvzn1NLAZWGa5Y1MyZoQ4J/iur8DqWsuvV/NJPg7nZ4v0
pkDtJa3APR5pEGQao51G/FlHvRcbppTo78WGn4z3Yuury+x+siILmjcWizy5
lgftshVPs7r+z/77P/YN94VOnDTcjgJCMls8E0pQGacP2ZF8XzNUKB7Zdh16
a+8Ubz5agqkbZZITSPzcKPt7TrswGyzF+NbyPckHzjaIDiH6UULD33jW6zY4
VH3yZe8tBHYZq97+yBEYeteX3DWA0B3a4D/WVwkSdTrrjYju28mwl//H/udI
8vuiiyVwce9CR2f2cPwuZ9zX0E7qgipvBDtrBawvHH2qn3AHyyOHRzyQBkle
Jyq3y5TBMifdi0F25P+GryeCnInen/jcsOt+M5jVDHIuKsuDPuUoSS0egidc
3xa39T6GqFdaF7uSEezFY25w+/6fvek/9uy3LybqN9bDaKu6M/pGQA2nj0mf
Fg1M1bVhWrgNasZ51c5HpsNO6eXFsR9GINjESeSXRSGcfq4h0ehYDoJpee7d
JH8/9nGz8ndXg0mjh+KeM1mw9ovKQSFPGnBsHhT1dcwGfTWJ0q1rS2AAJz9+
riTreeY4/CU6E8S3Sw9vlLmF64S6Fh0gevapu++bjU1t4NP+mtP6RBYYCnx0
yns6AgJblM5F23ZA3tWE06KmhRA93ZbqajsCPq4+QdJPYiE28dT2O83FwBJi
aFlJeNqa/zH/byw+HTRT1562+QjfzYK9W/3X7CLxLMCw1/zH/uiRADZp7i4o
HLdMXiJdDkc57vHN/TkMsx6/lLo2zwn1Ybh7UUU6vJct2VwzRoPr1Hvk0VyN
/h55/MR4j/xY5NHXnqlZKP5rbJ2SeRGObak+saiBBvG8epzHZkdi8X8P61Tk
StDnAdt7UxIP9m76YRWWnTB6d9OtO8l50K33Rm3vTsJb6j2W/JoKwisSFk6r
yhPR0zCXm4Po3PYpCznpo07wIXFJdZFqFDatPviehei7z/M2fI6M7gTxTlOp
4qkCOKM1endi4wgc+5A0R2NOF7CrTPfqHC8CNy2XRa5LR2D2EJcoX1sm/Hmt
e9HltDsu4PFVsCX4wD55QvjkxQqI0KrZ6fMyDo7p/lEJJXwmubZ6cprtGYy7
u+2wE8uDw+suaLHfHAHP1Wcclmp2wIb89RryDtmQuGO27uIAki8VWye/idTB
r0MP2Kt5ymB15+k8iRM0GF9rMHh9VhMknil61nukEPIHqrwG1pP6PqW5eN14
K9yw5y/XZvNGDuFXtcsW0KBeyXzzF5s6YJkvfSLkTzSqvf0uOWlF5jmz+xLX
xTbgiL3etaK6FPJl8/pESkbAo1LAX6CpA6p5p1JcflTA8u7SQMHjI1B8tliZ
RbEGbvq8DS8TjUNjscqdLv4EBwQXutkpVYLArt9yJ36n4bP0ZZ1mySQezlvQ
Pso+A5f2eNWcR1Xw5fNvB89NIxDmFbJA16UDfE/yXzo9XgRynCebjCxG4NdN
Gy/NVakwylfC7TpQibnPN5W8J3UzLB3P9nsHQOyY6NyXOoi+92N8EiqInnoi
8sfhQCckxWmbPLQog7/HJm+ZrB2BfVOTCtw8N7FcKXCC26YCN3udO5r8mAb3
xUf2cX0wh9+v/oxcFYwF8c+VC8tm3ts1KSh8VMoO43xWnZ4vlw7P89Wczo7T
YCGld5CT0jtYzNA73+75+s96+Qy6PY7HZq4kOig6frpZYQS2H39ikpsaBPPF
vn2PYM0GpRrexkVfZn5n/n30/eI0yOfusipc9wT+87eIeWlE/GZ8rnd4Vjws
aR17Fc+fC1vnROa8fkODTK/Zahc4K2A+JJ6S3dcEGVvVDGVZaeDieJ7L4kUb
WI72hEp6R4NoNuplvxyBD/8p6LGLtsOV5DWq80eCoMDbiE+b8PbIdJONb3+X
AV/XKicHp2JYYXCu3imKBrmM+Rf8M/+FFQJvk12fgJhX90kWEl+Nw6ue5hSN
QAHDfinDPp1hb3n8hm/7w6cQVtIgrPzMGdoHBnb5zKLBnPd1Z7/FN8FxsTn2
r98mYvDHbwflpAjffjE98Tq9HjL2flve/qUZ2u35lfZ4j4DsSK1+6sMaqEgL
jTpr3g4jNx/e7z03Ao1tcTvzkp8Am1TT6w1KjRCwcb3phwpSF0IOLch3rwCh
hgPcbsb1UEKzr70qRAO33fnsArKV4MEu1KljiOj2bVVNpTkNRnWOxbZPF8BH
rrnHO6UqcWOqfs4molPOdH1f1PGxFXL0atny/xK95qDo3+kzAtOM+df+M7+Q
8qVJ+fVtMPaEh7XHsx749gapDp37P/t1/9hbKWvuZZnIBtYSdT5b/Wp87az/
/QXB+Yp15QdeZnrA3Wy7dVudG/HS/cuvLJVoINP/BCQ/tUCV6aybRfm1EJEc
tnF23AiIvPJTVrFNBb7/ArIXOBdDIq+70pZmGtzOLJ4wLm6CX6LXPN/nFMGh
4fm1M3VqE8Oe6x/78djpuCZlO/x8JumY35ImVFrBO+F4hAbua2p4Nw5Fot+p
uWtWhTdg0Mh63ndqZPy2tWjUhkZYLGLo43UuB8Yum1qU7mN+v69IhvobK8O8
B1gvZPN31CsEkz88XX+yoQ45vTXDxwkf3n7fSlLaJBX4J7ISt5vVg9Zbmw3L
NUj8U/oaOyh9jUx9nc7IR59/8jEormZTf2Q9XHL4USH5Iwn2tH8a/nyJBjX9
9P0iC7VfZO5XWORKAadIJtjfOxC8JKEZ+PZVi8atoQHaP5HS2JAH2l6NKVaP
WmBOa5RQPjsNjKp0Uy/uLYe/bdevq/6Nx0KL26alhFe8YMzP+c/8885udla4
Vgyv8zIP7r+ThXJpgrKuRMeNUfGAXFQ84GNGPPgXRtZnXgsE+2PfJa3lGuHF
Ik0D2kkaLLizX3M3LQxGelcbXuxugov+Q6p799Cg1T769mOdx7BhZOGbkYw8
fLz3ZtPsgv+bf9k/80s8+SlwUcwf50DAu7x5Dfhoop/dWJMG3xn2vP/YH9gb
/o41KAbc04IfGLW0QHdmgPwQLw0Ea4aTbMbC4ZDdyx/3hZogM8xv+8uDNFDj
3PogUi8ct+/39d1S0IS993MXf5EmOpfKX0Qqf3GYkb/J3e+ba0X8cNGd3ftl
yhpwUcKiemt1GmRTeIJ8FJ4gE098qP2iBrVfYO63S53uZ5yVT/czMP28xfdI
TG97EkZ+GQ5Q/tyMBWW3NZcJ/X98Q4F/5teinjseo547cjCee/7/sD9CxQOu
aqfHAxQx4uEOFYe4nIpDlGbEod02eryhPhVvKMCIN00K/7Gawn98zcB/ZSov
cAWVF8jMi0sM+8p/7M2ofMS/2+j5iOOMfHy4tDVexyUWj4RGN7x2rcGN7PcV
bhMeO0rlEVRQeYTdjDxqWUvPd2ih8h38GPl+m5oHZKl5gDnPFQpn8DeFM3iY
gTOa8XQ8ARY1Op6AIgNPRPm5wgZ+P8SDyZv57xXXw/mboJdAePImCt+whMI3
jGTgmwCFqzhM4SryM3C1riKDVUM9BwdEF324610JJWN6DqcjSR0xCvO0IM9L
dpDv4zzJctgiMFhfTnh+09SB752n2pBVJPry+tR67Dg1cU35NOEb9kYcC0g+
aDQX+yvEPsEbDvJP+DpGgP1O6PdRMcQYlD29WKQCEhfbGbbakbpW3bBeP68R
5V33BA1zxoFiz/ANmhzJF5q6TtSSRozNKtOzOtyIjqLn+8VjR0D0HL/n04/1
OJK1TmpSjfxNshB+2zgC8xY/Xu7O2YbzawSGXIQMCG6U9Zv/JLyOqte4h6rX
yKzXCVS9xmVUvUZmvQ6leALupXgCMnmCM8UH0JPiA8jkA98pfoLjFD/BQgY/
UaD4CYpQ/AQVGfzkpRidF+Gy13RehExeJE/xK3xI8SucZvArAX46D4fIAToP
B08GD3endDHuOEfXxTDK0MWdDq8EjQ38UBGdmk7fJrpsv3xPSwkN/vzeK2Kl
lYZX/avswzMiYbvaHK9OoiO+UXUEOqg6AnMZdaT8pNnjqc3PsO/Hu83vlpZi
kMezk6dVRyDqVKJjMUcKtuz5KmgcVwXJR5rUG4jf5v2h5r/xz/xrBDkbn31+
jGcKncUn2DPBcbdx6S+S12sY9qL/2L9K08GB18+wmeOwy1LpGqxbNPosdnoY
VGwuDDX8eYa4iFPltyLBv8nyvv7vw3AoAx69ulCJ9d8dF1ZEx8DVP1uMDDJp
MLXh3KC6ag127dJt/6qXi4JhP0TXkXgrmr8l8Y1NE1ptep11l/cmrKiwiSuR
Jf5h2Pf+Y39adqNcWn8b3swx6OU/XYGCS4/o84SNgPWN3SaRqc3oshIcDBUR
bdX4Q16MjsCVoM441egWdK7/uGPW7+soNKV713YtweF9W1zZnzWjcidfzjLi
j54qTl3jXyPQJJwbt22iFW1e6C7QPmGI2snJmq+JjjCpq9sbu6Ade0MVTpoH
PcZk7vVedxNH4MKs2bIrpWrQP2tt93nRHPQUr5VScCL1/U1nm8CbEpy4MEsz
Pc0JN7TtFT3aQQMHnbnF3AbP8J7aWvh2IQsNbx6o1zcaAVPG/O8Y8ycx5r93
ru7YqsVd+IbnTEvw6UJcbzZeX7JsBMwY9p//sef1S7supp+O2TrcLFwvDOB6
AVf/dYJ7eLTzwVWb2/jozPRhM/dASN/yevO+aRr8oHQfulK6D08xdN8r6pwE
S07Qz0lwinFO4kXpTZxlRdeb2MnQm8LUOQ+qUOc8mMw459GjdCi820HXoeDF
0KGfKJ0LX37SdS4wde4FSkdjIqWj8QhDR29izH/+n/n3CtHPqXCZP/2ciuA+
dU7F9TGxaudpV3zJc3781Jt0bDUTCL5FdPd3Sh9BJaWPgKmPGHoclp+k63H4
wtDjZ5+eU0azZ5jy5kfw63Wl6Jf/J/UewZMNjPWc/Wc9/Eu+PP4Sm4xS0Vql
8YZ5WD7tY6jZR3ia+NWu+sW5eHLF1YSngo/x/tOlNnPI5764tM7n+d12TPcb
Gnt0NR/9z+3mLE8dgYDDEmPnzxbjHW3avGv7E6CKl7UhpY0GvhFFE/xHGrD5
ywTXpuuxONve3/3EORo4Mexd/7F/N3Rr1r4l+ShyxC1nsVkVOurp3zPyJnr5
fO94x94STAobYNORRNR907XfPITolz/3sqpePkFL/YfPHV+GYutdkQF2Yxr0
WJcKlPOl4SKh//wsEwsgjW3HPPVOGhh/bL8UWZ2PFm1pK6Xk00CIfXhZajfJ
L4b9qn/sje7ofqpxKkcVf+Xb1zMr8ErsKw6RezRQUHWc2hFegVKiSU4nUivw
tHLlTotbNOhXcfQrdchGieunHszyzoFDgdzBu57TwNRfZHKizxP6N+m/v7C0
Fjz+yHnr+dBg/nVF/jjZbGw0krtP48uGO2x9PewEh+UiVCfumPrDuHztrIDt
VeA1j5ZqlUYDvtXHDp17m405lhmsoS15WNqhk97cNtPPpZ8fosgm+vkhtjHO
D/uFK4UWHzaFBRzZU6qSBcCz7mnHwgEaWDDmn2DM78mY/9ZwbrVXRCJYnVl6
asQegf/Ik4zUYhoEM+yn/rE/S51z4mEN+jknMs85tajzVbxKna8ijXG+GkGd
o0I+dY4KToxz1AUZ9D4Fnqb6FDDN6FN4B9LPe+Eddd4LYYzzXqa98j/27dQ5
Mxyepp8zA/OcuYLqv6AS1X/Bt4z+S7dYXm5Zgy1OOl/42DKvDHXCPNa8bSS4
V0I/B4NEWfo5GL5jnIN9bA3Y5aSXCvctnq3bW/kICvWPbBX+QIOqtut1jduj
8VJ25xEZtQpkG82seFVEg6GoaO3Bnlj8cPNT+J+garxwu6H1QxgN/rr/0HHt
KYatZ598yDr/GGRL+Wp+JxL/nLEt4Y/JBTteRxUhg1LI2m6/bVU+DTjrNv3x
7nVB1+yLd2qHK7H58zyBjAwabPa4H6xYH4ZXWVkkChdUYEhh/6OSUhqURLqo
yboXQHY1q/3niwh9Hbwhe2MJztt7fYbGEtDwbsh9z1MFLDpX9NRJnQK27dxj
S4Ng61XXA6XahdgkfMV8msQhN9V/AT2q/4LM/stGe6+u38kFIOmiOk/6YznI
7DaVTosj/OT8387k9wXQ3ObVcdq8DBxSDZ7bJJN9Uf0dWNxJ7+9gKqO/U0H1
m0DJPXCm34TZjH5T16re9t64CBDW+pjWvb0MuB5KfvN8QnCS6nPBPKrPBX8Z
fa5Bqp8F/FQ/C14z+lnhVH8Nyqn+GjD7a2s16f01DKP6a8Dsr4kp0Pt6qDyL
NtPXAydGX4/RH4RQqj8IzP5gAtVHxstUHxm/MvrIc6M+KAamBWPJvEr7xZyV
aF3vkb+EPMd5+/fnWXm7om32HnfxakJD5ic281cQ3hJnsb7q+VNYG+zjcMUM
4QXXkjzt8hHoemmvHVNvjr3aXwvljiJuv1wofKeKBm9Lbluk20TD/aCdo3P3
l2A2q9o9f4IDNiuPNM0dawWbrETFCrcyWGiampjUSep1H7/S+eFm+BLrXVZ5
shx2xfRPDxG+welO78OCGNWHRWYfdozq88IfGXqfF+UZfd6rpRsKDho2wGHe
iLfj1UUQuEt/OHYnDQJY9vVzLKyHIcWv6t0H86F1s/J7uVMkL6g+MkRuo/eR
UZPRR/aj+tTwcye9Tw3MPvWdaxnbtb5XwzG9oYF9axJAO+B7VVQgDWKr74w9
P1EEqZc04WB6ELC7vbVc30ODX1QfHCSoPjgw++ACVJ8dugPpfXYoYfTZJ7r8
JV/JpEG8D7dWG3sQsF60c04jfCPiYlxUi0k0wHXJwgSZGAwTqU1ZO1NPqT4+
5FB9fNjO6ONnU/cEYP4u+j0BYN4TeCV5dYmNcRjyv9GIXVyTin/ileIPk/m/
PWt91nUtDQN/3VO9cy4LfU+uYnMkecS4zwCfqfsMoMe4zyBzsChQ1S0Sryo4
C6xfVo0hbwseLo+hMe9FwB59+r0IOM64FyFH3aMAltn0exTAvEcxlRekKf2q
HQzWGVW8eJUKE0pdxvcyRiBCt1jrTGAbGIR1abILxsAGJ0WeiEHCi/4+KvOc
2wTPJGefCG2IRO7RfNa0Q6ROBe7p5HvyBM4sCj5lFpmMCnZe72t1abBe0XeN
96oiqEnS7z/Emocu9ue2XCPxaa/Rk7JGJRdirvX0KKmV4PuiFvu5ZQSfE6QO
X+FIB1Ylzljp7wWon7hcpITokYRH8QlG2pF4vHvz926ecnR2DfjaXk3wakV0
rLZjAv58sa10WUcNDnzW4/DzIPj5q/m4joAlHiuZNbprax1slHVQmE94rGlh
vs6cW36gvfypuE9tI5zVVRUOO0qDVqPVtqJ8rpB8u3B30IoGaJNka7fUJOMx
Q0vVIovxiaWtxQPfbPRrY02xJp/baKPMfVHcDCLmCtmEKjfDQfts3++SNBBy
a9zw+JQpNKh8ma0b0gxOx1jPjYnT4KeYy3GO3ih0XPXt4+5TjUDbWTIlokTi
n30un31RHDoVCwzEDdZD5taM7aaXaLDo1GBHr0Q2steaGd5eWQOZ83/npbjQ
4LfBmq0r5PJQXcFb+Xl0JZzpWxD+nfCccT61XveUYlwSe3efTFsePLt6Ivou
4WOTUqLaNLFS9OwcPSgYlgk9axU77pbToNJ+1WDjQ8TI9E+nfqr5g7zLee4R
optc5X0K2VbewtYrkkPtywrx/I8ACc9XRC/EH1twVTILMu0u7f+8oQ6Us+fn
VdykAU/PFO1smiMWOPJvC5WqBangbjhD+Bjfl1GjP44VqP19q7XeDl1wPCZ0
2oasZ9Mn49SYoynwYuN0wF/verC7IrEjiux31/DAkbXT8WB2+1CgTlgDjJt3
pN1RoYGXR/5EsmgFzlZYy75j8UOsznG4bEH0ps32dS8Pm1Ugt8lVn9C78bj8
h2SrNcHPGx+x5r3kQ1DNH+eSyngCp6ZfyxUSvjcQtt//3ab7MGb6u0B/5ROQ
TUq9utiS5HXPCYHA9EqsTP1ivTwxC01u39r9+yENTm2c8+FNVSV+etkUzsOe
gxyPpFfteUCDnH2KnAvrXDFX3Eyr2r8WZI/tzJVwn3mfb/YrxehoXMJVfKRq
VjW0CM3++zSaBoejQk3duytQjr3kxqc/hD/zn53+SeYxylklzvepAr2qC2rq
/PNRo9vse1U4yZeeog8bdVNR7+jqEedghJGSb6sNCK5Kl3UZzW3JwkTFhuWc
U/mwetBZeBnBcxlR2czFIpW49vzV1eH+hWjbefhDgz8NtN1cjduUKlFeQsAm
QKsQubvf+u8j495lbLfePs5G6yDp8lTNDJjk4sx62U8DkU9du9zn5eHz9Vqd
WS+jYLzx4Bohgj/+8ycuqjpVYuf3g8/nqRSjuFN21kWyXwv/naNbZ9WiQrRj
ag7ZF21hdN0vwm/nb/r79PzxXBzzkCmt3OkCVi/P824j/Ie391PqmuW16PNy
fstFvzwckrYVPnmbBrRQjytK4Y/B8/Hl9pfylSB2LNu0meRpJMv1nwvHK0B5
5apn09qPoUTekO+mKw0SA3yqyhVTYYGolV2QZA0cv1E3qEbi7S9t1peHL3Ow
+XCXn4LAfRJ3PEJHCM98/65pvsvxAlhYcnqVGa0GlDYJ/l5rRvgwY36Vf+a/
teHn8H+QA2mzFt5evbAKOLe7OS0jfCyCYX/qH/tZ9ZLrOjZmYcCu5wfDqsOw
UeVg8NJhGmz4cyV5ZWE2fr/5MT3/XSKKqXXh+iHyHMV+OM0XyYLE1WrcMZxV
YPbzTnhGJA2sjMTPLIwphq5tKjXZGo/hb3JgbGISDUQlzodzycWAi7qW7LFt
lXBqoih7bzYNLP+H/a8PLi37NHLR7+tX0cg7mWh+cq/Vnxc0YA+vFnNZm4NB
Dc/D2Qqyca1jHU8F0R16nhkin4cj4bL/vorhTxWgfn3n8nDCr+SN3FnNOPIh
6pH/X6sLxTDbS5xjiORv0a/H1d7+Z/DhB1a2h4IlkFLcFSRNdMRhhn3EP/bX
TIXNtw9lYb2yeMIeoqtWK6+qvU7itnjOAvsV+7NxuZ2/8w3eQryyWVj/PeF7
d3t+JZ0cOoh3Tc4Z47ciaDhZFDxG1p/soFt2sCEfPq07VJ5SkgeG50svKxC+
d/PepOWSVxaoVeGwcn90OpiKsXsLzrx/h2H//h/7Jx+RVq2Qi1tOWKWUXC3F
Y98mtObNnMMHiF3R9cvFgaWPfFyzypCTzdIkJIsGhnVqZ0yNnXFqKNDKUz0V
jsR9CMidpIGZfr/K9NFsMBUoLJrUfgRd4RqzU/+jQe/uifveXJa4/N1ogU1b
CIDfboeZ90kx7Y3+sffUzH+tM6cI4zleF5yzKcfLGgfrFEkdt85POGHYU4L5
6xs272GrwKD6d6vnk/w9FLvN9fDBL+WrDoRc+1LrAw/uTYfN/jvzPjiHcUG3
QtBcIfvr4/IwiKm6bd/9kvDwa6eXubsijn/MsesRKUOjXfpFbaQ++v6Q4/kw
txp4xJrGePflQKP+UpM+ojdpk+cPfBgrA/bR9A1JmhUgznFr4ZQjDaZP4SPj
kFrYuz/q1XvuPMhqNln95wapX0cexg1J+ELxC2u21ekW6OlRePXZzD1qxnrO
/rOebYOJXOf+q4S1q/UUwn7lwRaPd3X/BdBg/+zj8REvKuC+MecJATKea3W2
Y5TgpK+N9umLK92BT/tarmO3D5qz9ivNvP/0uojsB3/tPEho9MlpafLAvj5j
hd1vafCM83TYd9XrIBHX/5DtbyJKfYsRmfkdAyOGfdk/9vs1M1eWcVbCi+O1
7EsKCuHUQ6fDbmQ9vA6XvbZZVID+xv9H13fH5Ri+7dsjpEgio0SUTUZUpyQN
iVSSiiiVBm1Z7aG9d9p7752zqR2KjNCgQXiQQtbvep77ed7v+/b7fP+9Pofz
ue7rPsdxnOel295uy94S6Lqzc3k/yQPTzre8nKNlBj7avleqOjPR9FXNBRrx
N0/ezcsEOIrgR7kNl7pENt6O3rOpl8TFiyfrn6UFuQF/YIBf/41CzFMf6d01
+B/8nyl4lWDRyrPvqsE2+sFw25cSmCjeyP+N7OeqgkTMtek1RA+tMTzeXAz2
7TnaASE0SOxO+rHmqglkb25tqt1Shoet110SJ/Fypu6mTvtoGmyYsb3Ha7wa
/3ULfdyaRYNd7o81dm1zwB2mcwp0fKuxYI7jqZfl9L8fTuE3TsFzL1cW0dhb
A5bDV9kqrxZC4KKRn3si6fktZ5KX5Ot29Pu1pCUX1l02mHeA6LvQcGWHM9/9
8UTuhFzCkxpcztaJj4gOjTifq/g9xwv+CqmsmuS8j1XrRp/dJnneej678rGJ
SPxk6OD/pqgW0yY/7xhNpMGOu7BqR1Q4Dl+IYfvl24yGmzznaJ0h+ovLz5K9
tBre88ku5FHKhsJvkv+UMmggoujesc6uBnSE79yJOpMOL9I22Qmm0v8fwa1P
XVoZ6BjMUWWgXIdP7dM0JMi5Hfgv9h9u9W/Q/5yHIqN/aURx4ufPOwXfOdBA
8r/gn98q9ZE9WQPTPmt/qlGKAJuNOjd/kfy88n6F5NYPJJ9I37s6W6gBt54r
pS23psHoyUKf4bRMTP+Tu0NbtA1hmdmGXUI0eOfqHC/AUQqi8w02n9AtgFkt
bve464mf9zoly+6sh3/W+w9GGeRC29AiKS1Sd+ptpid0sSFwfAy4Unk9GDn7
9klU1pB60W977sKJIlBJT37Ed6sEFjZePzRM9KOgqtE644AieBy93LhTsQzE
DF8dCyXvfeJSpHEP3AOLoDB9/v0xeOBXrfJ9ws9p3en2jwzvwcfm72tFryah
5/HqM5WEN257bHxNJrcSTqj6L57kLYVPisOJNaTuDPP3xl2RqYLjN7YcVAwv
hQ1PVm3iJu9xU5vJmWcPSkBB6CLNfHcJjvW9WRdLfvfUVefiOpKfN+Vy3NYd
rkDxBXXhcuTc7mjV5WymlQO/0PykmxoVsKDrxWMN4lfTp2uvyfGtAbPEhx+W
PCsG+cHkox7+NLAfUNDZty8P2i+9uCdifB/N/Nx1bhO+9yZ9j2GybiJ8VS1+
fkG/GctlzmoanKaBu4+E/0R+DZTaawfukimC7eJfrXKIflza6ON1/l4NnPzx
Ufbg83xYs+fhPCvCx6rMjMvCdGLA7Dhfw7mMFkwtluw6KkvqbFHM/Tt6wZDD
J9Lb6tmKhbVx3/dLEP/vWrcj3akaUp/H5FpW5kLKc5mDL9NowKtWcS13dQ20
qTRxnleJA9mtFcV55HkHZ16Y8Xg0FN5K3V34lLsdjTZUlJ7dSM7TeeG/Iecw
0Fy6/MCiZy2YL73poLEMDVaLJjhZ/KkGs60rLpUu8Ydh3j3mWqR+/ZL44csT
5gelgbcS811aMbfw3y85IOc/zSimYI8biqyWkTu4tQo4d16wXN5C//+5o+E3
eO6hRw9PcOf2avDRyymeIPE4SOkdeEPpHfBj6p3rG9z9uwkfzQq+ubbZ3xvz
9MOM7hC/0quTGko76YcrLJ/t6GdHSF3x/K0p8R+/a9qazro1GDpn7232oTpY
qTmRfvMEDarFFQ8v6NHFOQMemw7oIsi0pYYLEvxzXs6cR6uLsNX5oRBfUj1w
XJHzsbQh9Vqg/0mtehVouqjuyRXJwRheQflk4j/fb159cCunEnZJJ/mff1uM
orWl8RdIHsiysNg/fVsiGPw7cGUipwqe6sYdOkXsdzHtt0yx79I5YaEkHAFF
6mtqtw5WQ7xEnGgs0RHd/2U/GVprOq5IlIJ0H61l0XbEzS7zHIcIf1uztbbX
dVcRHErvP2Iq3oBeu66ZD5nRYInCepm9s+MhRE+leexhNXTUsB/pK6BB5mXL
qFlWybhSdTztsG497ByW2qRL6m/B5RztBbeS4NeY6UX3+whfetTua5fRIP6a
qWwYvz8eW83No0DyX8JJadOUUsJXTznSBrMLgSs2Kqr4bRPK3qySkiX+uaxC
yop7Ri7ECZd0zhxowa+Ggopv9xP9eOqCxSbeEsgUUODK5yJ5IHl+1h/iP15M
+3JT7L+u3WR8Qa8AHFcN3vUaLIJt1116VIn/BDHxslPwFmIvRY8V5kG+C9cQ
d34bFgQtfqvBS+Jo1qFgm7X5MPtt4uorpe0Y8qL52i82GvyMNHrvZ1cI2zdL
bpubmgc7N/HL8HWSeL+eEsh19whsHGxb8MsnF5Znxs179om83wVpg4HHi+Hi
odpS8U0hEDdRvenj6//g103Byw3Lspn6FQOnuIrxZxIXZm7Fy8vXkvxw1i5n
NLUYGtzwl/fsFpQ53hPATfT73LvJOyMli0E5kmvwp6w1pPqHq73sY92TSWTe
j9H9n3sy09HZYcGbctDqPSD7UqoJezKijRTFaZAmUrArLqIe1VMKLyc/qwfn
V+EVqoI0iKb0NXyj9DWoM/W1PDMe3afEo0nTy5PLDxSDQH/Q9OlzXbHm6u6i
ELKf6VcZz4t81PMi63nvhf0Z/mtVgwEHZ14679IIQeND+cHkdw01f/MucEKs
+rt7Z3xxI4zUca9v3kUj/FS3Qu1pPuyWO+YdG0102bVVS3ke0MCBaV9oiv22
d2WXJMcKgE1YImj101J8/zy17QTJA38pfwBjyh8wnukPKZoGvb4NJTgyJ7J8
zYxWUGkcX60uQIOnVT8fxPCW4EBh3zjX+0ao/9l2tPg48beD68KrB/NBeebK
R2qvatB6+/WvQHjXb6b9q1PscwSa92iszwfzvhm70rQaMW9wdLv+BRpMMvFm
U/C0kdfaXxMK0bXhuJVsTyP8DKmMPaFKgxrOpRJb3udjuLDu56qx+/BEQt3L
Wpfw29btkmKvC2B03k/lNdJNWPp55/4Dp2gw05ARv7Cail9kxe9I1rn7q04X
g3uL0N/FKk34MmrR5DN5Gnyj8gnEUvkElzDzSTf1vLiBel6wYT5vBXXOOI06
Z2Cd8w75l8UyA6Wg2nxQxmthK07friSuuPb/t8/JtO9HvXfIoN47st77DyY+
Zsp+tlH+gNspfwCWP6hTfohulB8Cyw9bKX8DL8rfkOVv4VT+h0gq/yMr/xdS
cQEXqbhAVlxEMvHhU/BfoxjxiGJUPCIrHt/G+XyeN6ceOtYsuuT1oQ6XS8w2
mLeXBrupOIJKKo7QmxlHH6h4R2a8AyveX1N2sJiyAzxMO+FUnkF3Ks8gK88o
UfkEOah8Aqx8Mj4hX3n+Qh4+7fMe+5zbDo8vF/fxLSJ1nMpvuI3Kb8jKb/ep
vIrRVF7Frcy8amKpsOz1h2w0dbtyV8m1HVprRX6WLqXB+/adw294inD98OOX
7C3N8HMT7ZP3QRKnsT2TP78WocpgZ8hNvjLcd8apgp/O60bCz50RzkCf9VFR
R1vv4Z9DCc1vif+f5bmQvy6lELMKnD+rlzXC3iyhS28ILzpkwZE+klSI6x2i
95qr1UPIhVUve27RwFe8YKyxMAULdSVtK5Wr0VlL+65oIcnnjYUBG+/H4/LL
60xOGlRjwEpHk1ekjvzervnki0QZ9kzeKVvfgVA77rtULux/6jWuoOo1sOp1
BlWv8QhVr/EZs16fEGXwBGDyBGTxhFqKD6A5xQeAxQeY/AQ9KX4CLH7yrZbB
T2AnxU+QxU8e/jWk8yLQongRcjB5ESfFr9CI4lfI4lfqFA9Hh2sMHo4sHv6G
0sX4Dhi6GLOYurg/t+zQ6O8QbFLe+mTGllbQDtU22yZFg0WZc/kHKmPg4IGq
M9Nft0DPuh0fbkgTnUXVEVSk6giw6ki+c096okQNbk8rvzC9LRY1loQovsol
9f3+5mUuOiE40lzkeNOwHbZurEkrX0eDxUz74lPsZw17/y0pdsHvgSvZTQTb
IWLjvhNHNtGA57/g3zULmzYkVqPSboE9V2xyUXXeBR9VwmP3y3Nes7xN8vKF
pdK/7uZjpvDFS0cI/9nAHZS5vy4U94Z5mw5ktMLfdsXPs8VoUJLdeiz7RSBq
rNccsf5cD9Etvb+4/AhfGrJMC2/OREcB2jO5JffBZmyliADJP4+YeLUpeOHg
2dyP9tTgrCV1bMeTilD/fvXmGcSvtB02HV05UImn+r3LeazK0OSOkVhXPA2O
z1xmcDY9Fzf6Vm1RM68HoxWRV0RcSP7kUvPVW5qJq/qP8Rf3VELAP6lJbSR6
RDDv6a8j+dj0+t/eZME6eDaopZDuQ/yQY75Bnn4h2osMcyjp5YPwD3ud7Ic0
iDlvfNowuhKLLC4LNjeUY7VXqI5ZDOE/rsqS5VxVmFat/K8juxTHWiv2+hAd
JPYtuD9XsAyLn4RN7PxWCu0fQq4LE/6vyrRvPcX+EcveZ8aS9/B0L/f6a0tT
QMK4fGw30V/qTLzxFPy38P5q4apKPPTyV8+evBKUnVxz8gnRv8nV5XVaMUX4
xnkuz7S3pSi+5cX8+xU0mK3H0H2YSuk+YOk+J6pPgidaGX0SYPVJWii9ibaU
3gQOpt5k9nnQk5vR58F4Zp9nK6VDUYHSocjSoY8onYtj8xg6F2czde5DSkdj
L42ho5Glo/2Z9rOn2N82zuhT4X6qT4XbmH2qkPCQ9fdO5UOEXG+Bfmc9hHrM
2xB6m7xHYOgjTKT0EeQx9dEyJYYeB1tKj4MkU4/fUi3wScutwd8TE3U7vNLw
lPzphGUp/9lPzZT9SBWX7pSgJYGFyLdb0R/r4cdA1moBDxrkfGDvifweDbdc
p4vLmtfBG+22h6vp/V6s70mYrMbSj8crZy3Jxo3zVGXUSHzJ1/Qtq+7MwyF/
W2Pb8GyUUT990uwVDW4X77D/4luN2ZuVPO2CCzB5sYDaB+Lnckz8xyn4hsCM
DU2mkWC31XpnWS5CbBN30BziP26CkZOT+krQN9bYPFpVCefd8zR3txHdZ3xK
lW9TDRrn+hRN7i5C6b+eSZmEh5i/d+Hov1uMpUHZ09jbitAmy23JSuInjiu+
dY+OV+MdsSTVzq0lqGRdJPgomAZmTHzZFPzxVTf0v4/boW2G+PXLN8vg9rKn
oRxPSZ5RH9k2rcIL1xzUN/nRWwxRERd6jEidjb/0/mCiYjXm7LDVzBQrxRpJ
yYsbSLxvahb5yKWRh7Tz0Yn608rRdu0s7Vxi/2zHhtUabjU4GrfCM/VCKXIm
6lkd8CZ1f+XV6Q+3VeDQKjMO9phyjDp4bd7sJBq8bM3g/GJpgk3m2Y89rbNh
h8cL/qtfSD6fx+gfohjVPwRW//Bk1SbzZ9I1yLlRYmn8YDFOnn5Q+CnwP/YH
p9i3L/4qv4StBoXYaZU9LYUo9HLL5qZIGowy8W+n4HdQfU48osvocwKrz+lM
9VdxZQ+jvwqs/upaqo+K06g+KrL6qDHUnAKNqDkFljHnFG5Uvxe3Uf1ebGX2
e2OZ+MtT8MMjm+h9Zokiqs+MrD7zc2r+goup+QvKM+cvZ82O3TNpqYCqY7W8
28MQHG8esQkmebu/gdEHA6T6YLCd2Qe7WeKz9uIna1h2Xddy4Ycw9Oa+/sHs
D+F118J+GQ8Xw9oH0sPBdQgaHKFzQkhe9c8VVko+UQwq13ZW7Bsrh662ubvW
ER3teK/LSSzWH9Ku/3zF+SEV0/1nzlg6ToNZl+1VByxXoqD+14SDg4XoVX1Y
P/0tDYp/9i2NXVYE+03fC+utKIcEO9NLp4m+5nnS1WVamAsvK0NrgjeWggp7
lPL7ZhokLWiexRtlgbvO8rKxuxXjopQ+MT7CP0O1ZX81K++D+cGJ27cHlGD8
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
yR0PeNXrtP4M+V9GM5PnQhFg8lzA4rkW/WHyWSCYyuSzgMVnLaX5Nah/xOTX
wG+CX8s/weTXcHCIya8Bi197SPN6mJHD5PWAxeu9pPlBOFDB5AeBxQ+y0Twy
nHNg8sjI4pHXG0rwqoheAxWlGSWVA5EoVXhtXJDMZ2FDRvefRmto6Km8f1Q9
DHenjSpT/k3EUuLiHIs0uGMiwLnVPAQCnhmYh5Dz63f0g30/I81ISvF8hL87
DF8+nV+ZTO1j9ULVC22OsAvyohp5A1HY1tdSlTpHRCXTbzSnALKxV/1YEAjH
r7IdOkX8861sI7e83iSo8M6ISmvyhzolu1/VZP56gkweFnrbmDwssnjYvxeZ
PC/EtjB5XmTxvHZNDyLkwhKgvaaroSuM6MXK65FUXWjXFMehTMt4UDqzrUJG
wQ4W7Lwz33n8/3hkGOxg8sjA4pEP0zw1nLNn8tTA4ql/zemTH/eOgfXZO6PP
F5yGKYzF1iHkf1O/y+z6eCASFvP4L9exuIbSJ/ecpd5/caF5cJAKZfLgwOLB
B2meHTwsmTw7sHh2roL599bu9QPb31xqn6O0caqxcuMUsr+ycXtlb6l7gZ2/
8O/9dc640Uig/Qnlh2keH7j1mDw+sHh8Bt0nAGfoPgFg9QlYpyt/EFplDusK
7mXv4/XC8oDromuJ/PzR5UcSI6WRR+GfTOuIOzKc5v/VION/lZn9DOBN9zMA
q5/hd4lg4eb3hvCicn7kqi/x6OhpkqNL1i2Z7ouA9ZLMvghg9UX00H0U8D6f
2UcBrD4Knd2f2h5sSILz07wamq6aggnvh7FVZL8q5ttiWm4iHBG0S7Y8rw/5
hkcqLcn4hU2N6w4IxINcWslfWU1z1Fpz+FQb+d+n3YUz5myNh8Kvy8Znhduj
y4a6rYlUv+WloA/VhlHweuH+KYnrvPHv8pUHpal+gK8lMol3oyChac2y3OIA
nP28d1sd1Y+0ftfrJ/ER8EUocq3m4WDszuBge0zGZ2eGlX864g2MNvej+9kj
MP6C9nvqPpPfQRXrThS5weYq2DrPPAE3/5SxyCXzLKy7rP1njj7s1w3ffM0z
Grp/5IjWEfw5xdDa6AxjrDn04/nhoXD4suCZEeX3bp19+mTuW3l09l8ksv5E
OHhKn/meR8YvT0srem16DVa8ldG34LaAj+EGjx5Q79cPHlMQKfDHc0nZ3HFD
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
wy3S/845/tfsWi8yujQXJIM1y77Jt6DlcPfN8Q1E/JLxBTxkfCEjviY0prz9
CRzt/NSZo/d3C1QUPMz/ykYBD9vcSyFV2bikbVfj/ZkWaKwMPjK9hgKQm9P7
53guHLBYpC67rgmL7SWnhQ5TgC2Klh9AhswPOELPD9014TH2VRlQIBlx0Kyi
DJe+1REOJfqlJXR7qTn23wJp44mbyPEExniqkPOCT8l5Aca8JJPzCKnkPCJj
Hhn+Jef4p68HWEyuB2Ssh2wyP4MxmZ+RkZ+ryfWG4uR6A8Z66yfjArnJuEAf
elzcJtc5yJPrHBnrPOM//Bd3rjMW7oyFj1nF5gPeWRhw3ULr7Bjx/OT6h43k
+kfG+v9CxilGkHEKjDjNIP0g3Q8w/IiR8Y4CZLwDI97VybyBt8m8gaX0vHGb
zD/4gMw/aEvPP7bGdSZXv4fjUd+wBN+4fGh62dXdQ9T9ruJsviGtGNx420Z6
Pk8ZlG15diqO6MODyTyJcWSeREaerA9bFd8mX4nq5R47AyUrUJVny8xXIp+7
aEi1vfmUgZ02/44Sl6HZKe1JejaBE3szlC9I5ONm0fPiRxfVQ4rL5vgS4nlU
LkuPlIzn4bFvh6KF79YgCuXFbLMm+vN4b4/I89lYkH77ke69Gvwrn85xz5EY
n8/WyySES/DjGR29sLFqSGjMTW82JPrwpF9o+qgKWcrGZt37S2BW5xzbRcJP
z+GvicvXZqMV70lZFckq3KD2DEceEnFH1lOMJuspptPraRJZf7GRrL/AqL/H
yXqNM2S9hgF6vV5zjlb3cRdZ95FR9zt6af0D+pL9AzL6hzNkv4HbyX4DGf3G
cbL/wTVk/4OM/seB7HOQ3ucgo8/5Q/bPeJbsn5HRP0uSeBb1HWh4Fhl49mco
nzZPsQhKCOdtLP/oCZ/5166l/q+5KOaJ4PJzOiDQ8tf+sFEoDB2U5+8g7C+R
+R8/kPkfGPlfbmz0+RnjJhxWsLTepJyATJmPJX7JUmB2sa1rwogmKg4X3uC6
mghaL6817iD6vRS6f8k5/jOGAip/97rgJ7VmuS96BbD8ZFk18xuiDtLtr8+x
51XqqZY934jnQyc3d/XnYun3j5ls0hTYuv7Sguc76tF3m8/WtV7ZWL2rc0xA
i8CV0nunHawDUH2TXqbMcCFYF31++/EFsc5XCK3wlHiIuqstlJQ9nsC8SV2/
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
Z5ii6rI2vN+m377pCPHzxcWKv/fGwvTNF0025vfROe3F0i59si+VpqMrdwbB
ywy3eX9Es4C7l/XZ2BeSf1s+Dqx1C4Z5kxP1j5qyQOPs55i1ZLwu3NJaYsgT
PgfY7vV+mwECU9EebCSOPTl8ZO3PqxdBmsX6wvLAFKjmsHp74hfRf9fj3A6d
LDTx2btBJN0InY7/6lYldf6v02JcW8/7YLX05OtFsrEg1/NZ6cMEOXejc50X
18ThhfinK1eu9oZg3p0bN5PxjyrfB1vqM3GLRtyrNT/1cKeraPVfMs9D64G0
m4qFKN1jEXLQKhRd117Jbyf5XW1unYiFTzkKb/u8UGtFCs7zemyr0UaDuGJR
1b8fq1Gul012wjoH9y5Wf3erkNRvU7Dt/Q9E3nuWs1p18nBFxr20B5mkjppf
ouLiUoWdW55mhB/KxW0FGrrppTTgUNSQYLlbgsr1TgUbx1Jw4QrM9+mmgc/8
OxP987JQcqPDi6TiADx7pPjcMfq9ciIf/MeMAnG9qGNf9WsnWOB8s/rdFKn3
BsPFEo2cwfzd/sYfr6Lh4Jy7Es309yQ7XJxa9BRRI0T+3dUleSh5xEtyNvEr
wemw1dxf7OF7ueycPewpULk6Kl+F6GywJttw/3ZH3Nl/7uLtl5HAZ+G97NIf
st+LvT8GZleiTlbXcvuULPT30nn5s4YG6mr717LtiEPBZ973GzY4wIEuT8XZ
9HslZuzl94+9Wib8O3Sz8/Hp5SSrz2a+6PVD0VCAxGedkV2Dj+4XoK9OaM8C
SEbL5rqn+JIGB1c2jrhrlWD/5mXvryrF4+qtGQbaJI8YZ4dZnEuvQHGHdekX
lDPx4FbprddIn1I39qtMf1UhrvLYbLj4TBLuLUkfdCDzXMd+S7P2RDzD5fFl
9aQJnl2QlcZP8rV4UtV2l6PVWDPAel1sIBcNHUcuhBE7mmwoP6kyWobVF4/8
p6+Wjs/iDdl+tNJAW4MtecShCFdM1b35/TAZz5ybLOwn9cPx41e3ZTvbwTHR
Y3Y5QXGwdO79D8+Jv3Eq7/9y60IObrGaGqpvjcZubvupT6Ok/lHqr706FIH+
utwNV8st4L3kcbVGovPQ7MiLT2LUwNyEe+OQSjSstNPlUiPjw0dyt+9iLUG/
ZNFAi13Z6NIru8me1IHpIoX+t+QcQehYtqxWXxycc4tSjqa/V/B6sb7o+RAQ
3H9O/cTlZNi4b7fpQtK/N67jt0yaioFt18xTXP6mQtHW1ilpYpejjnIrm62K
MC742oQ4fzK2fru9/HY/DXTjXthKDQZg99GFzgYRjtCvu0mXm9QzX79s7WsU
icM/u/peucx1RhP2cP4v5LnxD/xXKNxPRTVpN0vhZXH4QkV77mPit8V/djbE
COfi6855BRzPk/BIZnGBLKlPsjkkF1uZFWLwkGGuoGg6LuYUr+Imz+XckH72
z8Ei3GM7Z8V6hUxUMVuoK/aUBnPUl5566Z+Ph7qsnuiMpmHiy7Ncr4h97bl1
OQfawwCDAlYGlSbBaO6RDXPIfp/1mYu840nDX097yuM8Y5HzWXLba7KebQHR
GDnHFe38VDW5zQzgvNH2ZJW/pK7gfbDiY4IrnHZx+K2UHASTOqbaAeR8LUvS
bXGUj4OIzwkFoWfiIKkp6Fs8/X52U5kzRdG5MPG25/XKyCzQO/b51sQrGlyr
5a9Zb0H68xznvBd70kE9PaFfmtRdCSIvPnQlxIHY+zSz93uT4eB4w10tEvfu
PZCU2NebCR8zBD40q6fA5WLxJbeHSV7++YaX8xL5f+XE44eHE0BiUcH7DPp7
qtvkItmWB4PDjvT0nqQQsEs48Zx+HyVfn+uuCNLvOex0Ds6tisCO1ULvthG7
KBiLzJkdnYAV6KswRz0R3USlVSzJc098WDc2h5aM+fmBHRKZ6cjDoZKQSPyz
QyC5czQpER9rsEgv/5SOvs1PTaZIPTyqeb7zeqct/j518FKvdiRqdmaz+BP/
rJF4Yrh61A3DZUUM8uXj8VC+aLYwea5nWfqe2dy+wLHgwXRkjBd6yC86KUr8
Z0tsxkXOgSQYe+wt7lp6G450nvlpNk6Dpyov1/d9TwYTvZc/L7E7Q8u644eP
k7hUYCqRfyojDw4dk+4oN0uBw2ksLN0kPtewr9983bsIxsP332qfSIJ7zjKd
Z4n/HCpwru/wKwUWC9d9jdcyQU1D9LzrQ7J+JUnjg4nlUOs875vXshzQ9fy9
9iSpf04ObDrQvqocOmoWzXXWzYSuKR0lp2YauHD87bK8UgS//6gFewfHwyox
46Sp56SOvbz/9YoFebDGq2t/okgYVE28zzo7QvJRG5veSu1S4Dd8p7OJLw20
t3E8ekDOaRfrWtDoSIGVHtGvbDNtQc/jvt1z4j+SiU67j6WGwcWtth3VUrYI
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
YqCRBmdm/Kbzj998+S8dx5CgyvqpYv49x+/+7/2CG3V/7Kbuj6Iz999JjQfz
qfHg8pnxzKXGj6PU+JE5/vfU82I+9bzIfF5Byj/oRfkHg2b8U0v5E50pfyLT
nzco/8PHWob/ken/4YQt8PVUNY6qHZ0d4fwMnbwk1yp7f4bHVHxxJxVfYMZ3
n3BT2PO0QNQ/zsO+MjobHk7Gb/lD8ldELurbiSh3LDhi3TdvIB+svpwOjiD1
Qej2BsEKxftI+zaxaCywDlc8HMt/fYrU545v1/wTb2PiT7ELP6WKYc/yKVzz
geipGf+P/eP/WX++c1wuzsRnL6xFMjyLYJzr9FZ8Q4OHm5d+WnigAAXrbjoL
edeguF7L+/54Guym8gKrqbwAZl78pPIIR1sYeQTMPNre5cPtYJqCPfq29vZ9
iWA1vnuuOal79mZmezhZg/Hqn4IlG7QicMnr8JBDf/6Xp1hKzXNk5ukTKt+x
nsp3ZOZ77r7qcIkzFdhkyaLUn1+EEnFKIvfv0WARi2Oc3JZiXGY5fsw0Lxi6
R8Vps4ne/6JcM710mS/GQMtidmVvtHFK/m1M4jjdennhFsUkTP3vakmjsBs6
9Wp+kCd16fG0Xqy+aBjqitj9DOGLQJWu42VPSF0KsNr4rrjSB8UnwzT6853w
51zfbZ3kPgpU/UQ2U0b9xP9m6udZqk7iFqpOIrNONrsz6ipqUnUVmXX11Iwf
cv7xg5Ydo25jPFW3gVm3f4TvrjNuPYBvkhqdr7FmQ/H3NPMy+nm3csXhm1us
cTbrxoSzOakwLnSk2JbM5x0zcen4Jy61S3+JtcoU4VwZe1QNsoGjrKv+xAzR
IDlBQCq2owT9XqaFjET6oNpeNjPlPhrkUesj7qDWR2Suj2dsB6TvfXXDbSPu
K7NqzfGT27dp+vdOw6l1FuWpdRaZ62yi79/vEm8jsCt5IXeVKuljcyc16N8r
6HYUp8mKeOGskmbeqYkgPFHGmUD/PljlNhV7mVJHfHv2rKbEKWf0f5UpR+9P
ok6qmPKIueLveLGKh7+dUFRKNGMXvf+XM9t0frkXSoj3WHxXt8W158LL6edY
PybuWhob4YcH7f/kfDawxMMgWPaFvi+L6pdwL9UvIbNfGhbbn9a7wA0eTvH9
uHu8AORdizWaR0jf1ZppeylSBUu+L/3PfEcaKL0uOUj/XtN309Vzoha4Y69t
rHDggkB4bkObpUE/N93w93H3TxdcnFASMa9JC1eV/4zxo6+nkjr8Vs9vI5y4
aWz0xAive4c+pespFndJxaAVthgsbql/IM4KaXN2ZqQSO4cpo1/FTqpfRWa/
qr+zfuRvSBAOG/xcecnKDvbI9mrT34/4z/hndsL/9c/m7Yy+EUcuMvpGZPaN
9ruvCvxQvgmf5Z50x79xwJVxX/bQzwssfnDAIqvzFmwYzlqfv9sFT25XH7Mh
docnVm/UbltB1uTLCjEvD1SUaX8iQ+zmKdEn+Tld4Zypr3HjHC+M9IsZpX+P
7ua5nfOTe7Rg8dd2XeloX1Tbv+s8/btqVsjQKaj0lKFTkKlTJgr5EkvtHNBw
u9pW1e5gZM1xc95B38dO6RfkpvQLPp/RLzmvYpsVMxwgYO3xgEbDEBA/4n6X
l1wvO1khP85lAbfsZx8c23ULPZ60RtHfO0yKHXHaddoGt7I0875XS4Qkz7in
9O9su0f5yXeqeqOCucUfde8I0JKRjP9I7v/ilVB1tP01zPjhdmUOpx/wiGqf
W0rukz3Es20vjytEOtrxJVjbo4Ty87ozdJ0YOXYh71EAnm9yGpun5Q01ETdG
N5HxXJyJ17d/4vVDzVOQf6sbjh92lfaeYwN/k2xM1ch9hExWdIcmqaNps76k
zhtncDvm+juKHndKh6KaIEOHAlOHZr5k6FYU/8jQrcDUrRPeDJ4A/FUMngBM
npDc3X3xrpQ+3F8r0a1lGoixKyo5HpHxyFO6GLraGboYmLo4VGDRRztbB8jJ
VeH3DLkKL/7r2Ujn6gPF1dG/dD1gr3h6kkPIOewT8xWkfx9y31p+iW1xV3Bi
gl1piPydbvDcxgK6/rrgusJklQ0mpnu7aP2Ow1NOaTe56N+1SwwZHVL0hZui
kbD0vBvGsSavzKafD6pbXqCk6QUvCxelrYwIR/vGi670/VGsnDF+p0ZNYOHq
kcjjSxLRZe8PIS0SRx2KV0AOxSuAySuSZT7oxD0OwPpe+67s29GodbU/+iu5
fr0kg1dgHMUrkMkrSl4y+Aa+pvgGMvnGmmcL9t32dQOuNQvrOSY94MDpjtb3
ZJyNr0fZmz7YQxZN6A9twgR2qgu20M/RHNIJrXqp5AYCwb6re5O9AJwPc7SR
6+XmyK61N7QGU/G+TwFLPEFBvFtrN7n+TXbUrzefnUAydOn6/bWOYDnx5zZ9
PkhtZ/Af4KP4DzD5zxIfKr7//RNf4wYGX4JUii+B6gxf4tJg8C5gbWLwLmDy
Ln0RBr+CtxS/Aia/uk3xLtiQwOBdwORdvl8ZfBJOUnwSmHzyzUy8+mbiZTcT
r7wCBk8DR4qnAZOn/TZl8Dr4m8vgdcDkdbsDseDvLUuoPzKMsrIXIHBTuOVL
YmcXYPBGuOvG4I3A5I1Zjwb6Flyzg5GQtqq1GXb44sCFEfq5kp6Df/ZMvbEF
rlVcVX6PInBVq9Gli2Q8S1d6KS+SOowHVBy01ozdQaf3w0VJJL6eFBeFKxQX
BSYX1Sn1efNzni0ayyk0lEzm4hdxQ5MmojtSDq171v3dAR0zJE98PZOFJ1dr
rKTz0mey7L5Na/1hHZqe6OK0heZFd5TpPO3FyLWV69K8oD16bMlqttvw+Jrc
QS5y/zs+DK4Lts0MrgtMrus34+cT//h5HsWN4XsbgxsDkxubPGVwZpieZnBm
YHLmPVcYXBrMKS4NTC7t/p7BsUEtgMGxgcmxhVYxuDe8HGBwb2By74UUJweH
HwxODkxOvrCPwdXBguLqyOTqU10MDk90GoPDI5PDX9u1ZJ+zvyuuqXmXFxKS
hyFXwOob0UfO8zm+vLOzwPKtE09UWPJwcsw+t434ufqdsWbgdUMwrfo+tnBx
JkY+eKS1nv57SaqGlfMyTsH7DLfg5fWWcHzFjRv0/dLmFTsn6lxlIYZj9Our
P5aA7yyj6PabMLsoxl4EFHINdZpYAmF7ys2bPfTv+2VyNEbaHQW2E+O+7jV3
YF5Y29sWEsduJd3F6WtTsK9DxjbS7i5YLZVw4SL6pbOIjzdh5XXYpt+g9/fS
ffhtv+e/y5Vknc3LWpuhl4kiW2/lffpbC5ZOwcaigTTg92wo//OyGpNO96ny
rqyCexVjC3v9iK7PyJl/ZedD1OC4OhqwIBUU5BY8lTSmgaTkIU1QfYzJc3aX
mdYH4+GiK1d3KZI+/4Z5J62sEavbtww9no5BIzvJLxq6pJ/ZHBK+pLUBDd9N
XFhonIgsbYNyLJY02LVDsuB2Vh06FGq5nz+Tgtcnjvp89iXrV/u4wwftB3if
Ler3o5YMPLI3+uCNRFL3WIczn25BXHtp34qfzlmkvzUz4rtL/m/GYwV3sXsY
GjN88K/mHVSyo6290kqDX0uWnayTL0APZT81rrY7ePPcnZcLif4VlC0Q6bBp
wBDF21/UQ6Pw3lt1led2NDgntKRn4cfrcFojYbWEhjWst9yQQz939kpzC9Zf
1YF2S9mEpcahcPkRm/k2+u87nH+zKPptDZ77qBnLxR+BY/0bqq7kkPpWfUHj
4CwX5NM8EP54ZyZUx4gP078n2TcTr+5/4uU/J/PGVtV7mPvsHN9jkyKwF7Ec
E6wl8+HQ6ugNhxAjeTQVj1nHokumlrIM0oA76IC0hf59FJU4vfPeqyTgPNNz
4FspDT68yGpNnP0Ac75nVGzkE0Oxvy2enrk0KOq9skH9UQzurbr/q2MqCXRp
z3RXk3kuHVHOqVFSgYO1SdE8oRlY82t513mip56PLNYZPFODV6M7g1DMBeut
xAe5i+nfFXy5fq5QNTqcq3bd/tQFBRc1SqeQ60+9rw2Nm1uF0uXBNlpJAVhr
7eHO+5jUt//c01ffKMSNQg8F+4OSceXasSfl72mguOGhfF5TBd7NljC8FB2O
b1uG+XRaaHCrqdm/+G0pvmuLN3q6Jgo3/pg1y7ub6CnRNZzLlhbherYtx3mf
xaBpRt+laaKnBsrCwr92kfVvYVCIRoQOrHCVvONG399iW6Oz/lwBpqufKjXY
nI77V/luqyD/99RvVofd3jn4dszHze5jBN6OufbkE8nrZxN7D3FUpOM3L5Ew
wakIDNpXOauG5NfvzU3Gp7AUL7ganag/ZYuw7/iuS700uB+QoZka5AXWp3ta
rxU5gkwzt+Bs+j4KZY4cicP+IOiuo/lqjxMEzt7pSP/eyzm2PfMW1vtAp/M9
V183Dzi14npWFP17ntvwcMQeY7jwgvf4grkhcIQzK+kcsV940pW0NiEQvzTR
+qYsg2Fg/WZ2+vcq33C+CiypC8dt3+235IZ5gmGJkPQGYhdS/jjqsygMC7g0
Ofr5zaH1vdTuSWJ/rpfwQ+VVNvovduVe+jACwyaFJcJIvep407liln4Iun3Y
yLet5ArM+nakU5X8X6U/mqZF9aQ+vrO/n/r6JHReTNlHP9d2245Dfn9uEDYY
X77nxGaI1eMTVyLI9QMLHd/bu4ajgbnw7jWC9hgaLfA5lv5dUH29Z3YigXj4
2tu9wR+dkfZS6iL9+3uLV7WwsT8LwuXi8dH6vP44PLdzSTa53u3IoqciZ1Nw
G01cq/t6EP74S7smRvSLRLPGZDtvGKovi0gasfNGz6Nr7M6S6zUvt1oF8USg
MEvMk+AWV5Qx7G2m73O4q6vpucjcExLDDOc90LsAoqNR5XSu2yTWUK2rEA69
/FoOP4UCwXvlVFYF6etu+k75TvDFw0Bu69cNF4JA+Guh7geiu19c/hhQK5EC
EltrfE6sDoZUQdHfomQ8Gj5etquaM0BysF2q3zYIttlyFS8i883S6uJYxbM8
yDlS5SNeGQQHzfQdHhNdLPOZq+n1YD5cj9izYP14KlzFc+3+H2jgxBv6VNUj
H/a0PPhowuMB/l483Srk+meqLwdfaBVAlJ2Bw3lNC/AebL07TfTd3XblPa+N
q+GvxU5LA5l86NzfU7KnhNSfbNb5dfm6kNIi2dKsHIXsFu0Kh4kfjHsC+did
SiA2YqX/ClF7kChbe7iV1L3d3kYLuOcVgYzqr8MKxdoosSA5XHWY6Er3MQ+e
HcXwKD5McPdjU7wf3zamQ8Y5Vyz+rlF3MWjU6L/uaAnANsGjQmnvaNAQvr/M
pTsf3C3m1xyyJ/U2OyhYgthlL0xPLpiIgtFnLyr4c5NwTv1l/SJSZ3rmly6J
3FYLopfd3/jRYiFwldv24XgabLO5sNtjxBTKFG5csnoXhebxqUvo3wOvK960
3GaZKZ4Tljko1RCIzv6XT9DfC1v/P57rQJuwdTNvClz22McjPzsVnI0VDjV+
o0G+w74eD7sciBz4tuiWUwYsr7zz3/QQGb9CUNT+pRkgpzG0ZW9sETiwOV9+
2UODQYsNZ+Mma0Cb33DJ4gEz/Co7qySF1E8hXfUkzaslcKiz1fvWwywQrK2N
2ETqduVMXGZb/t+4CL25OdXYUQPHdwr1iymkQzX3ahPTdBqsmggtqntWAnwH
P73TXH0P/txTuBZdRYMyrx1LMtXroG+LMBeXWTLE+ZZe6STrcsb6fNb0lAYI
fuTwJfFaIpTdnZabtCJ9u1fH5ninOqJ3fA4KfiyGkrkivgbWpM+fiUvEP3E5
oz2mtiilEexieQxsjkZDWl+yzlM90p+0s86ZrG8E2dI4YYcr+nCkaZfx8os0
GLLyazJY2QAywkvSMvf64+504yVLXGhQzPX9h7dgA5x93avf8TQPfEKvqkaa
0SD+iPOfN9wecCbpqOETrnyUtHP8cIjU1VMBlu/u/rwPe0dvLbjDk4c7AjvC
zDJosF+iO0lXsgi+uGgq775Zj4e3W2c+I/c5q3f1pN54MuxcfqRTq7Yae/ge
V52rpsGDiIWuitd0cb6vRonfaBAG7nh4MYT+exzPFxz4sCAA1qZ0+sxqL8K7
kxNe9N+XvOE42h+WbAQW0S7rW+pTcHNDtqf4b7L+8vDncU49gvAQkeuWOdYQ
v7H76Q5VGkSIr3bv7A4B021F8fZr74FnY8P6ptdknMIXfDrCyDzJ493006gc
MlIcHt0j69rolpVr9mwshiOtks1a3NXw9qzIwTiy7u8r0F75+9ldEPCWsUpk
r4OVZWahNHMaiG9p+iBTWAuCa0Kkzw2UwwrNLvS+SebJpl0rJsobQXta6fHL
njJQaepO/iBF6oNCq/78+ibQPdulLVF4Dypcn5yv5qa/pxCf5XI3BZbXzr0q
vLkGz2dqZezMI/1qy8kjslYtcDn3rLxfTyrMNhg/tY2f6ILPnNKx2x7DFWf7
Q0qP8vHvrjOp5TJkHZ8ye8f/qw5+cRRVOgo8wP/iWJLL9xN9rXdhS5N1NUTL
LDKSd2/EHJuQvJYtpP5/45FNyC4GWvMfTLBvxpzSxWp/eIg/I68ZLG3Lh96I
ZUV/T9bg9wOSi94nEV0f/rGusSMHeEuWFSbJlWDF7J4/ue00uDgzzqsz45wz
M87NWd5sEvF3QPxOv6J7RQ7eHf51bNkg6RtV/JJEp1Nx8X8mVaeUK2FztY/X
CtJvSPNuZD17PgtXvZB/65F0H9RWHnSn74c/39izkCM4B8OXnEjoXVYPC1uP
2JxwokFom0nopyPZyJ+n/+VvWRO8mVXtmbedBu+q/dsOdXvilV/fbdQKmmAq
fU+VIvGD2y117sRGbwjcmoG7r9TCsXky/PYJNBCObBIRjwmGsL/rVTMT8uGL
d/8xsVEa2Fd5HlK1/CH91GfgnJLmUtDzuzdN36encTlE8XloMAZ+0Mo5EJ2P
HflfXKXJ9VP23w/ZN93FOXmBe7/qtoD2nLHA6ln/v5+//eNnBWo86E+NB5nj
iUHG+OEsNX6cnhl/D/W8sJJ6XmQ+ryXlH0ii/IMLZvyzk/InrKP8iUx/qlL+
B07K/8j0/6GKWb5fsAhTZb4syDEowr0C+RLfntJgNRVHFKPiCMw4tsUeYZ3M
uYN1bGceru8rhckccS72F0QHmTSYnv0Whfv9I1L9k0vgcdfzF+2kv6p8+TTq
jkkuSqcW272oeADrAwuMhCJpJA8O6G2Lr8CEE5sf3Tpaj480vL4ZatGA9Tbl
z9n/+POVbf+zAwcRe73ECwXuN8Lf9sKzQ8I04KXmP36j5j8w5/+HszvLi+fG
osIaHR6eo4/wzu13cRKaNNCn8giVqTwCZh5Zd+6XtAopxOjfBqOpkffhUj7r
rPmp/8tH9KTmOTLz0ZHKa7xG5TUy8/oApwas2xMIeXttHIdzHuC2BSnqQmS9
YCv+ucFk0SNcvGPl1/8my3F96NWY5eI0yNl2xFrncx3mplx8oT/nHtjYcN4S
NKLBnC8/KoMz6nB+rnyMrmsF9mgvXWWvT/rqOyXZgkVBIH2zZPt8GqLsk3Td
ZFJXBTLecneXV2CU+vb7tyZq8PEWybmr7El/9er7AvG1JfidXfnpoUVVaNrs
IvCFzIcBqn5iN1U/kVk/D1N1Eo2oOonMOmlF1VXUpOoqMuvq1Rn/3P7HP6VO
jLpNdAejbgOzbo+7fOi/VeGCYbH55ZE3i+FCtf3wNdL/W2mzCc6qjcP/jp0d
Z4cqmM7MbabrEduZuIT/Exc93k6rze41OCD8ybhSMwuivm0OYiF+ftDXFJDu
3oAfSzK8zdYEwvIFVj9p9v9bH9GfWh+RuT7qbtJZNmRXjCsujvbS+O/i0Ied
0+vraKBMrbMYTK2zyFxnNXdMcuWVPsRjn5cJb5udjBuGl6cYXyN9+G2B+ROF
dej5MY6roikNdWefGPzqTfpVi2i1zSQPPXrk0uSLM3COa9XCj/lkHRm2mTu+
pgw39Zlb7riegfrKmVELSN5dP2sUmMJWjGVnY4s2u2fjTW92P/5OMk8KdZY+
NCT1tLbhrw/RxTmf/yiHkXzkpfolBKpfQma/9HzXwvpHqcbAY01rzBcMhqhr
Ton2ZJ0Nd10cGSLqhgp6Fia7khLhotC72gzSJ+tMahXUSyahZu2rNw0DKZD/
ec+uie/kerb5G164F6AxP9fO+x8i4bxHsPO6j/TvIXtL/VxYir5DdTrP4gLh
zhzTAs23NGAx3ePI1VuMj6fCBJRYXeC1rQb7GaLXdlL9KsppMPpVYPareRX1
bKe1/UHWKNBimYgPCNlOFMqScW6f8c+af/xzheob8W4Yo29EZt+o/cX5kJJe
AR44KVfYdtgZj/fW9t0l/Xa3xTN181P5uGJrZd6ApTduvK3FHkX6c0ufgR3t
s/PwyRdvoUWsAfhBJadwjPQ5eXlBj38fzcBjn9R8Eo96ooiuQ4vwOA02lIxO
DPClodmII+oWhyB3ztS1PGLn12PoFBwPYegUZOqUkzzPKxd8SMC/Yk7H8wxC
0MvI/ckQ/fc3Kf2CspR+QaZ+kb6yTitYNwWKpW3fcKeGw6jwLq9TpN+e4lvY
xWOTimzf5s6OEHDEo7pDog5EvzzcavWoQS8UbiTFPHYx8oLsY6kN7vTfuTuZ
d/VcXTi0/I46rJ3rAaeVdt8VI3bcsHtilXoSdCZXXXRVCIY/Vi7jR8h4BgX9
f55SjEAfrRv9T9qc8eSv39l0fdrQVb/UgYzDTJv9Q+gpD3hf9q2X/jtc72bi
JfNPvKpvdQkobwiHNUNSslarHSGnrMs1jlyfuvClj0RmNnD47gt6/yQSlBXm
XfIhujWP0qEgdZOhQ4GpQ/dTuhXUexi6FZm61ZHiCZD6nMETQGSGJ/grPdMT
3BmHcv57RnWDI3D90d+Sy8h8rqR0MWx+z9DFyNTF9hwYamEaBwOWh7nK997C
kgL7M/T3xa3Nx3/6JUYA668/I/t+2mPIpwVydH57JOlA96BbAQhefLc/TNoR
QhM+h9mSeWV9uSMv4lgoxu3QEudf6Y0fLC5yOJPraQpXDJd98gKL8MsRPod8
0PDp8CJn8n+3FmYrv+62g7x9jYt2rIrBwBVSawr/0L8LXbc6t98NbYYjzqwK
8sEbsP4n/TzCB4pXwHkXBq8AJq/QiDv6TLE+FKuTPtarz/HHLt5jrrvI/71I
8QrMdGPwCmTyCuFABt/ASxTfQCbfmPAwX2F6JhOi0odEa2cngMas6wt/fCX1
s7FRVoQjF7LVNZxcsrSx00gku4vYObT3923lT4NPv0tGA3yiIH/FZ7Yoope5
PFhLiwNyYPPzJ/Vv9WJAoLZBZCvJI71fBXp74osAxqw+23ikguxLqdBEUh+4
Kf4Djyj+A0z+4zYT34x/4nuC4kuwj+JLwORLOyneBTvrGLwLmLxLnuJXEFjG
4FfA5FfLKN4FZZoM3gVM3hVO8Ul4TPFJODrDJ4/PxKvsn3i1UjwNcqMYPA2Y
PG2I4nVweEEmndcBk9ddn3gmung5wvFsvVojwQT0wDxvJaRBFMUbIW6YwRuB
yRvPSgZ6HjxRAg80mvPmORTi2izz2pVPSN+rxu49oZoAql/uSXK+qkDWTVoX
dzaRPB1jP3l+tQMYJy17OiRwB9OvLm9eTuKyiuKi4EFxUWByUeWC2gEBi4to
ra20mEhKrNdYcceKnhc7f6TJnzHB3YPGgs5KVvj2TMpn+ntM6xUGp2C0CNYa
tCmeZsmCy4eCDYq6aNB8RpinTqcMRG4tci1Qyoblm3coLSDjSaG4LlyguC4w
uW7kjJ+b//GzEMWNYT3FjeHGDDe2ozgziFOcGZic2ZXi0pBFcWm4NsOl91Mc
G2ZTHBuYHDuc4t4wn+LeeHyGe494MDg5xFOcHMtmOPnjXAZXh90UV0eL/4+u
7w6n+n//p0RIJQ2VtGS0aUrcaWpTiJadXckWsrP3zt5773XbIZSS8k6kpYiT
lGT+nsdxru/1c12ff1/XuZ7jft7Px+O+zzmvx2Pue/XxnNnv4XE37Xt4HJ/7
Hp5XHVwzVkpipOWOOLmgDOwQYuW+Re5LomHbz96wjaBzayVL/f5AXP9O7sUK
6v8hRb7o3osQxYG4vdGMd80xM1RAj/p/culxo19qhS7IGfUrfpFiDTi9te46
TOITf27m3NaEVryvq8XRnBoFCtLXLx3moMAHmQ/Pdwa/wsprj3dQVGOQuy/9
6zKDIUhR7l+789hr/KiVyTLYWowXfaJ7RhcMQemSmeubBKJgrxKTSMz9YnC+
rcJ7/RUFfjGVq+Yuf41Jsd48Igsq8GDPrcN5E4PwgUfGx4u7EB8JnQzRDtuP
gm9rcoK6Cc5nhG+MgiZcn9Utlahshq4Ot1WqZAj/Ou9S7ulCVDh8MHJPZQII
HWIR2FZEAdkrnclacq1ovaB1yx/rcqxXCXpt3j0E0mc57xaqhcBOhR33Upmy
8KPwxxg90k8d/XWDIWKS1EUBf/JreDIxvKjwuim1T1TRWczk44DGxQwpLAeK
USw31Kf+DamvLFo/ZqlVIUOqn3XtbR7IEljzdAm5j1LuuReb5RNxnaN6RXJw
NRot+txpTvqslTEnEn+yhWP4Z+Z3qTFZcEltH5fqAAU4LkseCN2MKP3fMa8T
DFXY+EZ0EZcFwWdvuxG2nlyw7XSScrGuhhOqgTeWkXwYPe4R3j8Tg6/P++V/
tirCfz/Mz1SRPujL1zK2TTxZEOr77J/cu2RcbdS24RzBN6XS3tymp6aIE9IJ
y/OLUNX+3v0IUj+7qgR0r4B47Kr8WfRGoQrTT/6JukBw4O3Ql/E1hxB4e9o1
q1QKAGTPS5yMpUDkkMCSFT3P4KzDt2kei0owNZZ6HPRnCJof50iIuRTCHUnU
ClyfjJkRa4W1yPluGRloPOTUDEa1n9iWludBl3TEfhXShxY/rD7K+bEBDjIy
DJUNeQLbzm0NNeQeGTBIveMeywIfG1Y7nkXZkJbuY9RG7vs/vbw1KywT4eaW
6urgMF94upyDsojUP4oDBjy392Vg7xaZ49Y7SvGK4g1mtRqC5y7aIZXm7TBi
IWhkmpQHr7U+yosdGILQte211eurodSd4wuzmDc87H2+zyeNAjUXTYR+WJH7
zn7kUtBUFMp/Gdv/+yHVl1ziRjXfK1gscNfo4ZliSGaRe/739hCY7h0S5/xm
Agw9U0PqG2NAeKCKo5zw/jnjr5Ji59sg6M1GdebTRWD0dI3b96QhqCo4K6Kj
kw3/jA5VLJyugMr9225EkTr84wcpLebdbcCVtEmWfSgACj311qm1DYGoT2J9
nFs1NEDly94dz8AmJbjg5Y8hSNoefdcjrBFE1VdafddPwIBag4eXr5C+uO5Y
v/rCJnjT8/2OU18T9BgciSWFJgTZl1t8GagGEbnjGs7LG2FPxdYlYYtIPRDA
KSvX7wcijoP50TsaMUzwxn2z22Scivu/NVc9g5OdUzLlHg0Q72g73pQyBDFb
KiT/y3SDh9k2W3Y4NuEtJ6Vu84sEt8cMdRjulML3zJvHx64Uw5qTK/Kdk8g9
XWzJzR2biLEPuNiM2JsxqFo8h4H6PUmU1Bf786lwhlvJPsL3Kdx5e2KMRYsC
qYbd6j3BEXCxdrH231MpKKbJoOlG1c8Jso7x3FwEY+nMci+7m6F759peYxYK
iBY+rbBuCYILFVaL08xLMSxh3UsjwlNqJ/W/CvkVwllGHWZBs2egZHgerTZQ
YInhcFtkaCFeFVu9nC21AZlMe+LeHyc8soJrQbFsEWT93Wdjf6sRjoF9Ve4h
si+1g38MOgvwngWvvHZ9E1LMfeNkhUh9WzQ7L4rR5gX6vOa0dWI/bZ3YM7dO
baPZfeFK2r6Avq9hWhzwLC0OSI+DFets3KCdFjfwn4vbaVpeYQgtr9B4Lq/G
Zh46eLHmYNJ4h3Ohay34Xas6JmxL6tt1ZolDWxsxXsw0er1NHNxffjOwTJHg
z4qOlJtvnmFpw85sboWnaH4nPmZJ5hAM7JnNZ+Sk5TPS8zkk7+OG7t3xWJGU
3/fhQya8GBAZ5SJ905tdQXLCa9rxQqdTiuhoOTKcOdHtzz9E6gAl3LO3EBnt
XspXxCXDxn7RswwEl65a3fjcOPUKK5ayXZ28UIv4u6Lr/dgg7NMpXdFQXo+e
o2m7THiScctM185EQwqMcT4OWcLWgnffRqre8yTn5qOWnsdM6snfbiMjbS24
d8P2NHHeKJDhrXyvvY4CUUPTu5+6vUAJWT3VlJwcNK889uHNyyGw09KZ8iD4
+Dog0fKpZDy8/bS7V5bg0qDlgRvWpa/wzL++/XeqinB4we5lblJDUHC2PUzd
yhir5aZPPnD1h/TtPULihDedaXiC0zQ8QTqeyNDwB6Jo+ANX5/DHsHEHwMU4
/Mi217ZCcjOOqnpkeZJ+59pzRWl88AoTP/4L7NlShj75UymPyLybT5+3vnGp
BWXj7rXpdWdhss6fu+tXUqDNR3TtM6kSFJA8y7nLrwgPGoaMplLfZwzmnLzB
U4eLIwLHrnY64P6zcuGqXuQe9fMP+1KqUGqy6f3o9UJcVBdxIM2dAp8ZeKJ3
nM/CApZk2caEXLAs2HdlB+GvitxvbWKyzTi8zvy4s3c5nu3qj4ueHIInfMc2
KTxwxCZ11oG3DBXwpMfsyJqnFFhMmeUFjKbxAorP8UIzTvi/3BYDF59SGpJ9
KuHw+q6Gj/mk76PxDiyanOUdUJnjHVkaz4I1jWchbI5njWw9BqCpBJQ8G3P7
VlcDo4aq1jUbCryOnuVNyKLxJtJ58/Dmyqf8/8pgS++rWyEbSqEmTdRuIoyc
L62ugG5aXQEH5uoKfzW5rq9Pm8Hyc+unI1I5sMlDiKuGm8zb+czxQV8+JBx2
4QxpC8BqDjatNaRfEJ7aeXz9zUR8wyQttWRtPl7aFhfnS/ioREFozEL7LSic
yLnGblEE221+/VykNwiXqiRCN8y8BOYh9dHvuxLh4IvEtUxOQ3Dfn8nIRacV
Vo4++VdiHIffjr5bHLGUnOOr5x/fMtTAxRWLsnsWIg4X2r/ZS3CA8cRGVf21
sZAW55QXGlqObVbZTBdJXvnJr9+q/sETB98ZqO7cX4etP4VSe0i9ekdiqH8w
wArYmBYLva1+BnX7Ju80HSX124ULg5+9EvAAu4gY27JG4Bg4VXqL4IBEuEXF
qSf5GHnv6r5fnZVga73uzYEnpK44uFuNsqcMXdp/Ht8Ykgmdmy+8tKigwO2m
6RdyqxPBLfzjnsNjT6FFIMo15A7p1/p66o7lVuBu3TvGd5scIKtvi7VRLQU4
K2f8fqo6wsr3a9zXmjdCfyB/SeYNCjwZ119aeSEGY8WbMrtaGsB5xiNWRYkC
HfeOfA+LrcD1Qlu4jQ/nY5dGcF8h9fed8td6i1uyMP5C40q20Xzg/eTIz/WC
Ar1pTkdrmhHgDsWZq7EcbhVOXLFwpsD3TYd+7LsTiVf+edluD3CB5IEIATuq
/+DGazc+mxcCx8pzccVPKmHp5aSjlCAK8EypJnEXZuOk4ff0/K8JuEf+NfJ9
Jn1BE2dw679ckMafnAoF5fBWRY/LKpPk4aaFUm8LEnGMpczb4EMmiogb2Vzo
o8CjydIaT185jPy2YFHkxhJILn4dcOQ14fcwKVujKmfMfy4lUCdegOGX2LT1
SF4tP736ffRgMFz5FbHrYEsW1JTo+PSRfNb29WuYWJQAPkuvyzz5ngCrI0qW
7P9J8LN9PWyIrwLmYIO2tQpFIFsR7HOJ3GuXrpXKgQsQFm5acuz2hkK48olt
+19StzMu2DTwOSEcRmWafTiTo5HyZsHGrL8UkBGGZDHODIj3YVZePJCFDY+v
ivwgfX36Kd3co93FYLVi2VSSbj58HnVOFy4m/W/NQ7WWgWQQWLDnnfufSpzp
EBrcRerDtY8lYoYuVUDKQX7+zPU58FHF+3hRNgVYF/652LvnCdZvtbe/zlCH
570mzy4lfY0vj9yGDbZxuNJ0zcrx3qe4qsTQzVCb4EaQXrOeaAWkx/bpB2zM
Bb0PDqWJJM5NZoyxr9gQDg363i0zD0DOD4ckyqoosFDF/3P94hrobH3xoMa4
EPrCEiuX2lGgO+WAToJ6HPyTK+hU0WzEkjPXb2rJk/5iOH2K83g1OJvbO0hs
SQIe6/SLiwleaTHoRuYeeIwHNpw5K7arHDiFVYzWkD5dYuR9657YcrhgtFWU
Id0KxjM1NuY2UMAsef1Jk4FwfPiOeVr1ZhX8E6xaW0fqt+GH955bZpbB8VPx
PkqfC1C0uihGJZUCky75md9eJaKhouzMWr0a8Dmrtn57MAWOqf/+77ZFARw6
h/XDZTU4ot/6eYr0xWrGXCrLLTOB4ZzA+kMiCInLatqu5lLgYP8fdtYjmlAw
WnR74EEl/H58UIid9H2C8SYTq8sL4IlzjLOARyNWpG0+x3WE3Iuq+O3vWBOB
SfWmknx9MRTb5lgtJvVJFdOxALONOcD8OW7D3aIWDPqv0XSCjfARLh0tFYmA
N/HVU/uak4FzTc1P5l+k/l8KrjltZZCg0VN2V6UR/SXyH+8XJP2j5TalQZNq
HIwuk5A9VAuSdhu6NEgdtUOilBIjHg7aELly9XAi7l1l25A9QgHPPDO2Fo4y
vMS9If1MTj2Mhxj6c1ygwIl1O7OyzdJhzXPLe41FpfgkO2ZaqJoCWUO7jA82
5OMy2U/+PmV1oCsjb9ytQ4F1WcufLGyLhi/XOhXtf1WjKMgalFH7KR+bln+y
MZgpKu6153k1jJ8e0agm+b+pRXnIyCkfGB2zfSZ76vCqmak2GxlHhjYvDrbO
zgthc/Om0NYJwrR14sTcOo1o+0JZ2r6Avq9xWhzgJy0OSI9DEy1umEaLG9Dj
dpCWV1hMyyuk51Xni5Dc2z0FWNrfzCZr9AyO2L6zbt5IgUrVNW8+7ivAreW6
wU1na0Ci0n2lmD0FuMO1mP5zzMW9jbEXGz+U49i/cadpcl98p3Wo+Qw3afmM
y+fyOethUz03gxvIb47csn+8CdJ+tuUeP0MBBYcdug6G1fjW4MmJGrlEfHX9
XmYHidukUJtCWpkOuccDuVIazbCa9eDj1/sIz57jNDWyqkITFa5TE+E5mLZd
VeNkOAXiLHGb/qEoDPr5Pu+XTB1s49l9TsOF1BV/3x3/W1eJXlM4vVmsEC29
FlScIHjbe05m7KpzNpZxC5iuMqiH5blNcr76FHCo8Ho+kJeLtQs7Li7hKAad
pf8xHa+kQMxtxuDLHdVoufC9L3d0IXZGLDF9QOIQ5TW02nW8BP84GulKJqVC
QmtU63VSP6RVltTciszHjw4s3Ayfi1B853+s9aUUqKXhCcrR8AToeJJNwx98
QMMf1J/Dn+VOp8MZWhNgJWfiuv6uBlATV5ai8tdDuVzP5KwqHB8drdnrnoxX
zsnHrkqkgMc6u18bXQqxcPWxie8rQzCm2ti24z8KzHzSSKxd5g6hh6e2CIzU
gNWpCU0ewrNBtu+en2UtQ6cVzk5DQjm4+MQjlt8Ebx/ksBs6VLkg14mL9RFV
1XCJs2GsP4EC6593BbKpl6Ct/fpiOFGAf/u3dPKT+upc8vipsvB0POzc49j2
NRdM+FJ4DEl9pSereyrxeTlaZJm4ZXwoxkaBTSeYIgheMc7yAjJdmeUFoPPC
d+voC68aEB92hXMsLy/A62+5j01EUkCaxjvIT+MdpPOOLo1noXh8lmeRzrMM
alITjVcPAWtA3J49voUY8+flg33vKcC0eZY3Ye3iWd4EOm/+frtaUkB5L4YI
HMmt/FiNoesHr10j+22h1RWgS6srkF5XdMDWF1EyySDdxP67bbwK657cZk+K
o8ANZS7JrbsNkD/lVtp360Y8uuAmQz05rz0V+4Tj/JOxZ4fCmz1vn+L25ce5
hUndcvwS3B/YWwWXCmNSuFfFYy2nWU8tqauXjFjeCQrMg/Pc3WYVDysxl/Gu
4GJyL468/HJYGeNhWmX654WQRqTkh3L/IX13b6mghNNuN8iJyDm/u70Vn8ke
vbqO1HXbr02sHjZ2BKNCgft6F5vQ69U2oyJpcr+mkMXc0w/C45RKfAQb0M1A
/hboUmDK8ezuRw8twNhqwP3Bi0Q4efevzugoBa4rHlf9y5eITRD+b4GvCeyy
269iQ87r+F/S0PPm4v4Sn9ab5b548FzLISTxvH9NzvlaWQleqXe5HZ2XjN9G
Pjq/IDjzZx2s1RlQBwXr5TNrp6OBUeTyq++kv9seX77/8ekKrOpaoMHflYWG
DgPyIXkU+KcDJfwD0fj33EXUaFmCl6c+XJwgn+899CrruXY6ZnmJ7dqcYoSO
5/623yJ8cVrxXZXS1ycorsdWq1TyEPq2n1Opm6SA2C2FBfo3izB99+LqsOWp
2Ds25StD/X1fjXF/q0QIfrwheVoy1wdx44jgWfL5b50Wm79wJSPD246SaPco
XPxfwrNe0i8LPP8dztIfg2LnJFq3ZYWj8cSDG9T4SI6sL9V3jsEc/Q8Llpk7
4qSI/5Xd1PfdVCe1fduTsfK3DqO8VjKOP9isaULqq5/OwcsPDTtCpMjL+lqf
ACjLEpEuoPo0SVxYbsiSi2cVOCtXaKWixuaUs14kbx+bSV7Jj8iCv587ejeG
pcM9qSHdcVK/FRgM/pz4G4vfeCQOr3KKRbb7PP9aCC887A0uZBexh+mygMvW
m7xQ70t4TDbVj7vf+S+LWASeUThpvE00ErczVt2OGCP4v/f0Rvaf0bjF78ga
fq4kTBLPNesj+2VOcDb55JcJ3IeuVbzrjQdna6HSvm8UsKvcaLhhuAhcRfV2
G+3OhAa2h/LYSOrPVccVxJtdoXC96Ic+JWcU3l3ynaqD4cwy89Lydj4wTKkE
egbGwCZ+4/gpsq8Dy04tdOdIAX5hl/82HfCG7/1nd9/8TQHbTS7G52OTYOz8
SguFL4EwJqAQYkyen++L3beOKRpmlhd7e0dpQMClgT0PyH3PtfPcsWdHAGrW
fzTe8zsWFzvknGQm+9JIE+YT+lAIldPFxSEER8U9znlsaif5c7NnR+dIAoTf
6xlVYHaCRsFzJ6n/kx/vjQ/75R4HeWvP7ny97y6yDfzAa6RfXpOr8N20uQBu
Pu169mNnElQV37Q83UH2u2swjqXeH9Y5ntKQj7SGlh9Hn62i6nic0vDSE80A
sZAl3+9ciYFdJ/jFjH+Qetj+2dWAjbGw8tVDo8apSPheEX1CiuRPjefNgLPf
02H7ar6XjxkDIDxAl1+K1NsNPLdqH8hngESJq3yCcgYIl96W5v9E7mNeHnNg
Zyi0t1wQ2XrABH96nty4nOSPfFLDn6S/ORDLf8yQNToL1kk0emx5S+6dj/B7
Fe1kaLgntWvIJgUW8wqd+tZP6pDERiHTHG+ckmXhHbBKwFxLXU0GEocXU8F5
TCMZ4FZ9MXmZfwrw8S6T/f2FAl6hfv7MzD742zLHIXB3KrYMnZaQJvk2WH90
2GF/KITuFg0b9AsB1UUOMdUk/381233RuBOFyx4oN53UyMSLM9raSiQOpzyt
7wfciwWP/WnJJ+6kQvWmfmHFIQpwdTWU+greh4er7h5fM22JksyrtlF9cO5E
/utWqkqEz9kdY94amdD95YV9BcEZ3m+f9MVu2OKPq4PXuNVC8JNawrK9VJ9c
eKmevS0RBq7osGmdTIPsvdnvN5B7d0olDncsjMF1N9jTrz5PRL4wCddlBDfW
ml9J9TsUA/2VApFWakkQW1vEbkfy/3xswwfF4QQczr6lJJ2Vil178o3ryDit
fbPzQjBtXqDPq0VbJ36hrRPp66yh7QtHV87uC+j7+uYxGwfUocUB6XFoo8UN
1tDiBvS4idPyCkVpeYX0vIriy3mzyNgAovQWDIR4x8DWc6o9LiT+78pFaj5r
PEGJhT4dPKzasOdNlQ7LFPU9EZ4jjcJ5eL5Yl0njbzrGn0w0UyV58mHnbD6j
s8NsPiM9nzP0HQy+i3sjF4QXLo8OhDOJveN/CU4uNH+SlnatCB051siILUnD
UcPWrU6kzq9Mn8zg4A1E2Wrj0s7jPqBt2F/8g+rLNrC2JKixGAWfsgHb8mw8
qPOsYhHh0yfRbuJDDzPx04krcTnv/NHj5RPpZyQOLyXe/BEczMVVvtcjbO7G
48L+L9nDpE8czqsKndBIxH0XGI1KWFbgOrWb/fdJ3qYEc+dnvy1AC5B/o/ky
Dj9M3+OwI/tSnVA68zcyBO+Im3trDtnBYFRIzCoSB0lG79szwcXokdqvukE7
GZnsxrSamymwKwucFNVtMT1gZV5xnx2oVXovor5vq0vDExyh4QnS8WQLDX+A
kYY/wDqHP9I9Oorcw2H4ae+pH3f77sLOfTOnU0kclrJFHmcbKUYNi4USq/6k
YWWWL0cU4ccG5h17NTzzkfmJuG7reDwaO0m2XX1Hgf+ebnrfxZyJX/acM9jx
IRL18+yi/5JzF5C1yl94Kwn1h5f1BIa741f7FdoDf8g5njO1Be5sDM06uXun
ZjSe79gZMEZw+zzvsYqMP5JQl+0mcTI4AFxXX7qwi/p+7td0q7K9RegT6zfB
0ZSKOz0tlhwi/PjJcVHxNstgGNEtGfXXiIX9giaW9STOy2m8gFdpvIB0XnBa
lpB7TjUKWEXgcXw/wVfN8F1BBB/caLwDnTTeATrv7PtvlmdhG41ngc6zzMPm
bnpMOXD476mEn+lpELtoV21TNwVSabyJf4RneRPL53jTXIylliEmG0b0NzCd
DIkF9jzmGqev5F7T6goIoNUVYDRXV6hnGrUv2Z8LJ99zptWERUCmW5guEHx7
5HfQ9qBtFHQ7Pfn1i90Mi2uDh0ImqPnJ1DmloYt7bTcUrtsfhfmPUxo6yXN7
9urND71KoFFkaJkmbyIs8Xhlo/aM8Ev/vrYX4zkQyptrs8w6EOI0T8+YERxw
4EyedPgZD5/iRU4UXrJFFnbJRur/8Juv8rOKyHkRPp3oXX4iCs90DClSdXEH
Z1hNrUeVwKP4XDIWxqBoghKvHfX3nan7ffanfbBu/zd+xvEUDI79JGBE4pwZ
atpecSMAa6qtlmxIDoZWdXPNN2SdG6JOiX0IjMAB/TMVa47fAnf72DJZkofL
D2gbFW+MwQuc7vuqRu/hxYV78lvI+HUn1HKySf98QVQ+oeaOB0asllsnTHjq
mp1R2djqR/j59L++EWY/MNbxsae+fx1gIHd07ao0ZNmSbZeVGohheUnySeQc
994u4mNoDsE/ipr2u1jNQWGD+hEg58Vl3j+o+TgGIz6lDJf+0oZnJ3rKgsi8
bVyRtyuehKKo7w3p7hQVuLt0Zvog+XzSi7SZhoPxpI68ZsfJ6o2dWjxFf6h8
XTbN9/eMB6w6+nv0V5czOnesWEn1+SpsMLUrvRSIPsuu7h9764gVTtt/B1J9
o45s5dHNNAa30wOPC6NdMfGP21mq39PbOMb+0q4gLCrQ0Xp99QFasp51yCaf
f1mLAnX2BpjWbr7dry4QBfxl9n8lz5vC3SWK+gxwAWekLtsiCziv2RVP9Udr
v/StOuG/UFzF9Lk3jMMXp9bGpX8j8eculelJfecDnr+Kih7s9welxKJiQTLO
o+fvD0ncskOBfb9XKJY4Y+qmllbq+4mpb/Q9DTY6wyTzwt2cIca4UUj2pgx5
vuvPh87JhY+h/2NmLzzyx+DIY7ffkHFsMITiOCqP5z+e7xGXCMOfLhM8Hyap
37998F7hHgwLBNizx1rdYWOvcvNr8twiyU1dZSAOVnxV/8DK7A/G538bBZF4
Clzvluaq8APW8udDS1v1sYCrRFqPxLPuC0d1zVgc5B/kU7YzcYDs3BSxQpK3
Ytkq7eHk3p5ZUGS/ydYIRNdofAsn+92p3vYkMM8Hxr+dDP57+j6wjTQN5VN9
pqJ3brJh8IDwR9vDKiL1sPHX7W+byL6a9BkC+G6a4cuMCe46mzB81+kmk0HW
Gd7rxvftbgIEvxJSXDrtDNeHFhU7knWm++/KTK+OgpD3db49Rx7AWHTGicdk
XlbxZQ46ElHQfNzR5dp9NXRve6LyH3mO06aiseXxYC3DmukSRPrgkndDz6k4
JmnRH89oB+tWZR772mIKycbMTm5kPUmr7vYVvvCHmh1nXlA+PwSDTmNWXrJ+
xaGiyEAhTxBj0y86vMcNNFsMatXI80F5lm9s8uFw+aLpixUOFiCexi9pStbP
8FbfyoUzGHzXndnT8jsIWna/tbQm63kZwCuwXtMHPDgKFz7IPA+/+yOUXlDj
HLZJad2mGLDeEPorojoYajI1f5iSOLtv9Dh1dokblB95eX2xoBMEdt683ko+
32Y8Letd9gji1qvsUewyxKaNk+pUPYETEdOqp455g+9eC12ualO4cc0ztJ18
/m4kQ/RmNk/wuap+pSXUB2uF3bS/kfypyrR++83SFC7U76mICFQDkzVCTtT/
Y8TULLn/qlkT2AN6SnUTo1HWtIqXm6xfdAdru+4Kb2Da97RZ3CcOjnzwKVIm
6+TQdlA5t+0B8NYtfxQXLg0jNXHX+sk4DI8FrILtnEA7yX84pCAcdvDc3beU
+r7/78N9RTq6IGcEty5+18JyxSFP6ucnaiLD+Txd4ajkFb+CVX4Qtj9a8xNZ
pwv/6lCRVjVUWG1vx2Rvhiz64TLtVN2JXR2Xa99qQFzK8+EDbWbgE3h3CdUf
sKF38IQduytmMz7q3L3AD99v5WIeJOPwjc7Oi1q0eYE+rzhtnWhIWyfS1ylB
2xdq0/aF9H2tocUBx0Vm44D0OETVzcYNGWlxA3rcwml5hSW0vEJ6Xm3iW8y2
xdAdzzJy56z/+xBQw6CaiYy/t1ZQv/uEL25ONiyzXKmAhXrTa6j/izsc7/ly
5UgsMnqsO7jTJhAVtkSXNlN9OWn5jL60fEZ6PrM3bjBf5+yPR07fdrvwwgde
pTtM85A4kA5i8mlJAvJSEs6+/eWNP5YY9zYTnH+1Vodl3+9gZDshs2VtmiPw
DayuXE8+7yW3t53TLREP8buZ7lgQgJetf7Q9IfXG3byJFwIiUbj9nPKQys37
2BPlXvua7FeH9/K2MvlEfHpvgeibBb448nHRpUNk/OQfY8qPV0ci21fuGiYO
FdzTU1K7n8RZWu3D5kbZBGyCOzVrpN0ww2RvrDnZl+w91oT23mC892WrfMfX
+9BXbTRI9TXWU6ravMg0EfEp647txh4YHbdA0o2M7zrJFPnrqg123Lpy70Gk
BWxgVF7iQ+JQTMMTLHo5iydIxxNFGv6ALw1/gI4/wBm+7v4bN7w5ZH3GVtEC
ps9MtFDxudC1IeZSazKWfkmmdJT4Ym6IKRwi/em+9U/G7IsS0M15wTejA+7I
PPr3Gz8Z35zDo0TJ2Q+3uVO8AhY/Qp6xX2KnyTkOGD3pbhKIxjCjlLsiE1aY
+cH/8G4St8j9PrHHdcLxYviX0IrVNmgR4/T6FlmP/2JOB73z7mhzRJ2T64Mt
DFYt/U3V/QicMhuqfhOHQ/djFpiE+aDRjZMCM9T3vm/+4w63scG1PzO6uF38
wDrdQkximvr92ywv4A3+WV5AOi+MLNOxyMo9Afa/GjOvKzwBPVmhUi7q+4k0
3kGlT7O8A3TeCaLxLCgun+VZoPNsgavhz8RPgVDzder1SLwfyNspthuQ8eto
vAmbV8zyJtJ50+AV59oR3xAQ1fb85eJiDz/yn2pR9bHDaHUFHKbVFUCvK9bd
9R7YdTUGmGb+cy82fQiMu/V3+pD6QZR9GYdLKOlDbxuYnBGxQ8WYMpnvZN6q
u44XZgqMoVFAcNHAGlI3HcmWoeqnKT4Z0hfMiofR7uNFVcZOkPrVWl+A3F/u
44L7JnfEQNukG7+ZiDGkhaRGloxT36dueY954cAf+U0/2lYTbVuOlDiQ8R2r
T0Uf/BMGkV0OCrekHHBz6TnVK+T5660W9bGXgyFhSGFxjkAIimVs7DhEzldp
pVS9wR1fuCxZYpZiEo2uwst/U/8XvatSj/LZ2QYbLxsfMmoIA2ETjhlrMs6l
F1kDQiwpWNgi7m6+JQQaOPmqKaRvrbwuWJInmoUjdxstD9x2hU/Rujc7Sd9U
tuLGpoygbDylyPx+IvYe/jvS5uhL+gUfJu7U7LwDIBMiHuUy6APcTZ6G1DiY
0vwusaB91u8S6X6X6tP+kgkpXrgzZqembr49rCp5uCOOfN73U4A094cY/CSR
s9Z1vydoO/zY6krWv4fm74kjNH9PpPt7lr35meoQGocjtZ7Rdzp1kcuVQ0CG
fL6A5nMKB3HW5xTpPqf5NF9XlE6c9XVFuq9rgOisHyto0/xYke7HmkTzb0Ud
mn8r0v1bW/hsNluLX0GLkQqNFAZbbNS7pE/VVRh9MJ7bFmNGYFbU9T3rOfyt
ZqFJ1V2x6FTVcCx2Q1Mv80MTbdr4dHOYFlXPZ2L8lrfetDGsf2PaS6k0BEOd
DuVGqk6FgwyH8jVlPDCqWP1wiwI+23PT4x957r+iK8CRxR6YF1/R7+5mAEO/
fFOqvpDnrQxT9j5DSLlaZjnOZYM3Pj0Op+pChB7/uyhzoTLkT6wozVSyw/YQ
r6BE8nyVzqO7VmH+oHFtRW58gzZ0jI2WXyDxNDkUHGsnHAtyUdtuZmsZQqVV
vxI/yU/eG/vH6j96w4N9Hfmv75vBkPAZu3KqP7Lqi/vNb2NBWSRY7Eq2Mfaz
F6mUkPjvi/8UZcYeC/Ev19ef+uYNzUsiQg+S59zm2U+lm20gtkJ4hdRRRXxN
8fhLjZvmzX9CfszWkH9iQXzYbyPk0a/dT9UV2cy4S1Ml4RCGjLzZIjtkjheE
znW8Js/PjEjtfOeXAZzjzVJX2Oyg9j+Ofcuo/6PWt7IKigqF3M+jPRKVXsCc
trdMgpyXzXWRfN2GaNA1yTSWLg/E5cpyYqxkPRL2/8U9KkqDNju5iYLjTyAF
WAyEf5I+12Tvgn9sIriyyMy6Ns4RxjQlWl3JvN40v3I4T/MrB7pfuTfNbx38
aX7rQPdb16L5s4Og96w/O9L92fkdx5suvg8FqWMT3zNfpsBdj93Sg9T/g93O
rKaciQY1FomLsCMYs9jl/ZaQdcYa/55SLogBtwXxbSsz04DymWVpIrlHn5f0
9u2EEAhQMf9TFJcIPL3c/rW/qe/zXm1z2vIQVrb9tvHjT0YKrt0xRPi0y3ns
i8pkDKhkGuKJxjgYPL/a8gnp71IPOdUcHzKB47CmVTAmCS+wRJuqknVaXzZr
2/bbFTSTLv3ddsUDXgs91jKk9mXfFklf/GSBIUdqVYb3JeDW1ZN/N5A4qN+2
t74dfQ8MuJZm36uOAE3HihlxKk7WbBg187eGGy7WB9SPWKDoinBPqg6Se3te
sEeDN/Ce5n/6LS8ZHosuGvYm6+fU28j+LO4MvBRpW1vY8QSrh1qlx8g4u0T4
T/JUeUNch8CBXPEUsDqaVLKFfP6hzZEvBmruWJf45UxDdQL2ny1ZtoHwlOiy
6YaYU54QnVac5r0sEXrScpSayL5K9+rFLI/ywoqV+5P//EzGvZSetTZknM13
Z+fFGtq8QJ/XhLZOPExbJ9LXubt2dl/IRdsX0Pf16fpsHLB3xWwcUGsuDktp
cYNIWtyAHjcnWl7hJVpeIT2vuqW/M5o7euG/9l8Dx6MSQTtzt/JFqs7k6+Xi
DZLR6Lmb885AUiAEffWPkid5Uh6/8FrO9ziM4f6daLA8GR03rNWUo1BAwWg2
n2ELLZ+Rns+RTTP7DVfYolHxf9+3SnrCnwJWKaqu0cHvYht/t2Yga8tmoYt3
I/CnydDMY5JvRkoHf/od9UOJFu4jugr+UOz4sZtC9nX2+T3vSx5ZuCVh4ZAz
RxJujXsS8ewLBV7sGJORex2BB3dvaTrPYge/Uyye/SX3QoNtyYyvaxwWBr/d
PHo5HL3l+43Yyb5KPutIu75JxOJi/akIkRCIHXC8EE3ivG3FK/ToTUL+Uyym
gpOmUPMt8iRVz/bQnM/70Dyfd9ZQfUbBgHQ8KZ4/7Falhx73G0Kofs3CO642
aTsY4pVkZp+tO43wj+LJ6lYSh+M0PMHuf7N4gnQ8OTu8k4o/kEDDH6Djj//5
TWZ8yZb4XNT1e/NiK7B0vTdG1eeR1hn+tTgxAy3suQp/Xo7AIG7euHwSt/E5
3/kb83znOwsap7e6eOALI5URjdOXUJORmXEbGeejeuWvyrgn6JZxWUbc3QVZ
Rz2NlKn36Gujqpq/P+bvOqkjfOk6nH2gXkp976bazeDUHxtXdO8oPOa6RhGr
JGsGLpJx3rh9WFlcFYvKuQY2zBNyeEP+yqHPJE/Yn3KoDng/wsY1nYJWm02g
YI8OD9V3fiWNF/Cu3CwvIJ0XOl483D7wXAu9xYFXos8GPpzq+kXV471O4x00
l53lHaDzTuCcf3rdPP908Vd3Es2ePQYmf5eve28bwiFpXgbq959faLwJcvdm
eRPovCk956N9fZ7vudycj7buPB/twBzO6yIH42C9bOlW9QhTrBye0bEg+y3M
1RXq3O0JV8VPs/VVuOLJb4VK2lRdEZkr53681MazzGu2Y7A7Xk8y2CRE1b+a
84NWn+cHrVJfWkyZyYAvpz43uC99jGGJPCqGhC++9Tp4c2xMge2Pn2/qvhiK
Sxe7M0aRfCue831On+f7zGCtGBLiZw8meft6ZayDcL3I+21UHemTr68LgZQS
fG/OD+U5GoY7nHrausm5Ox8Ik9HlfwyXeXVslC5UQNr2XoMvdRTYEt2g++F5
FRpr1WVEaEWD0NNFnPapVJ3wbR/7vJ7inuriBvtXUZg+9kPA7h7BH3UZ4yqp
OlygLOTdT+qytavUKG4PKYCZpX3doU4Q5dnrqMyTDwbLrEeDP5E6ds6f99g8
f9513eckcvgSUUZ5a74MaxLIXl//PIDUhyxzvsP183yHJ+b8dqfm+e2W8TZH
KVqUYKG+qJpXRyweSPA61ttC6n/pWR8ZrKD5yADdR2bbnJ9swzw/2Rma3w3a
LOKl+t0g3e9GkeaPg1+jZv1xkO6Ps6z1cLeTeBgu2tI0pBFgjrXiZlrFJM5b
Y5Q/t++/jUL9sUedC4/jhjPTayapul6Fnc96GBJxx9cqlsJaXzw5XZOsSPDn
6pz/7LF5/rMeLCaqfhZO2HdId8eeDeYonfwNrlP1/ZibmLynTeCWYBUEiMiB
unaRyHvyfD/fz2v3jtqh7sCtbxvOnAO1IOM91Pon/CjHa+8+NfjFybPrZqcK
Hmbuaaf6E338/GVtTGYYBD9lEQ9NtwOWn2HZ1D7o4643HKlvs+Hq1pQMQ51o
aOjnuiHTR/Lzi6/l/RkfYJX974R1vxUIPv+23oHEU3fOxzN5no9nN7Ovi55x
BnRKSL5zdoqE8pN9P0LI/TJ8f/3dhqk46FWafNly0xeD3txLekb1X0sOs9fp
iIHmpi+uD9JicXBj4+k7BLf9k4Mz/joFwQl/UVH158oQ/nrBRBuJv/SDF+Yx
PpVwK/rWVt8dSdBYlMXSnU2B+3M+p8LzfE5fF644MXkjD/jETK04HZLw+7uY
i1FdpN5wjFQX5q0A44vDJYHsGVC1qyT9cxE5d7uVSmEhwSDXI298gT0Yrmpv
V1Um+cAy5/+oO8//MZXmZweaND87oPvZSdD878Ca5n8HdP+7FP7OitLBXFh2
Z3kph1kx3G/PDlWqoEB0zaIK9osVsBN2Hjl1xBTcnZz+O1NPgdX/w69zr+B7
zqKyErif2VGhZVAImds4xQOzSP/1iObn2DPPz1GD5lcIZTS/QqD7Fcr9DrnF
xO+Jd0SvtIJ+LdbF997bEEhwgOafCFtp/olA9088o+LYnNfri04BiWo7KyrQ
/UD978s1pB5zfNvFI6oGvHsXX7P7mgGCZc2q7IQHj4usNLdUM4Ff2t2jd6Wd
0bHeofsC9XdGDuEfgvKJMH5lQRDPvnLQS7/u97eKAvY1tUZdL43wbgnv50HJ
ZNwS1OJC/f0o0nZ/8EvpNGCJTM0d+a8MomHj3l0ET25QThs+ScxDIdfcQ9tG
i3HlqkfeAyUUaDw7UbF7Ig/SU+W2CHeWwP47cJSnkOTVp//gZXIq2izrsOIY
K8VFi7xNf1RT4HvV7LxwnTYv0OftpK0TGa7OrhPp6xzfN7svtKftC+j78qTF
AbfQ4oD0OAAtbhBAixvQ48Y45zOoMc9n8NSLc1IN1cHIZzNTznkYoZW5EA0q
CY90bS/J4SzHSsW00thMDbRyC7WdbCJxmPNJ9Jjnk7iMls+4mZbPSM9nnx79
FWz2wSjclnz7Uno2BCS1LePuJ7z2/ZOt6/5KDH6v+6rAKAv1aqUCGdIpMM3L
9nx0fTwGfT4zNmaRCeqtlxMdv1NAf93lIUeeajxj27g4cCgPn7LERnb7UMDS
p8Q1NrcQzXqLMpL0j8Eqxw9LXpB7pyp8KD1+TxbKn4/kc2yLQoCzP3cNkDjM
+SG+nueHeO1Ls9OgTDGa6Rg9Gl8aitgbGbn9NQUm53z0Auf56D2qOM02LV6J
edz87mdDk/DTBTdj8TwKXNRXLLS7HoVVDYyrBlW98f1X9Yt15PPXaHiCGjQ8
wYY5PAmk4Q/GBcziD9Lxp+fyirTqiShM2dq+c/uORGC6/8yOm/RBLU9cP854
FmOby72JqkVpuPTGiqoSci4v53z9Rub5+m2ZrOPj7MzC7EdW6QyGVuiYUsjD
QnjQKlR6z/uoCCw4tTdss44jXtVdNP2RnJf5gYc5l47koJk8TlqvtkVzxzDW
H+S8JI+6P0uWdEfrdv3G3v2WeNbgZwIzVXf0om5g/JtcLDseu1rQKxoXDH8L
dfxI4r9Q79RlXklgshv7d5dtB1YlSadSdVSyaLyArg2zvIB0XrhPEfsLX41w
gdGftcL/pOH4lbN+n6i/+2yd5R1QGpzlHaTzTsqcP13APH+6X6c+Tqa3xEAr
LGszE/KGrrr2N4YkDq7Js7wJHgOzvAl03oyd8ylbMs9X7vycT9m2eT5lYecz
snZ4Izh5nTHpWBMMm/+t33eQPNcacfqUEx4HDezWS7jOpGJ792edAsJH4fzT
nuVb3fBL+iu5SoNc/J2/5lg44btFc35bQvP8tqIq5ChKvfWwYMHd3SX5UZD2
qOxZpCnBt1X9/Lu/V8F5+SMyjJ4xeGyh/oaxZDLOnK/W4Xm+WomReze1ztiD
yI4nR98xF2Cukp7CkV4KZLTrcVoe8UQH41832DoL8e4DRrGH7yjQpyXtUCVq
B7CKk1edkgUTNa/+lpD17z5Q8unahCFu91rwK3bPI1D5znycqucsr/Fx6xl+
E5xgPrVzo6M+djK6FFH931k43QZin93HHSG8UluTLXCdffow9XvOa+/+sU1z
uQGDZQXrItFUaNy1ZFHOCPU9a5r/0fA8/yP/iMwHiR/4UZRXseLH/VT4seZU
hSjh69b/4cPF4kvzM4qb52eEgj6/BUrt0d6rRTf6v/GK1Q+XplJ1R2/TdHqB
/8OsTi/cnNPpdZ/z6+me59eziqYnDFuSZvWEQXpOT3gdTX8YxCdm9YeRrj/8
82TtYp1yfdxx2XUB134/OJTWomRL1bUI/Puo4K0JvLlVzMfvbY23Cu9Nx5HP
U7ospqSqXdDgSeaA0WYr4JLgXkHts5rn/H005/n7hBfVOh5KtkFZsWeuhr4P
QNOanZ36Pduaj031fduMcN99vdO6HWbgEiqwopKqR2rQrqS9wAcM6wcNRZX9
gT/FWZX6e3SXKbMri50N6I2+W//Yxgmen2Y4I0793Woibb8t+yOwHUo3C469
BJXuZm+p74MP7GjUs5V0glSJx1c/WSvCoUqJKKp+L19CjInpnat4n71Im/us
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
CdEpSlknOQXy7KEu2yRM81whmn4/9vwQmY9UMlcZ1uj4Y7aypfcigyLcGlpV
eZLMC6k9Ais/JxvCkrfvth1VTofkCUe5dwQ/5ue/Jyd/sYMOZ+fVMxI5kK10
Z6M4fZ2DFreY6k4jVIxI8nX+HAV/4tS4Ukk8f0++9szKM8dCr6svhCUswNb9
4e5HBG/ca2Jvucw3Q3b5hORBtzu4x9Cj/yVpZ1vq+SWx1QAFw9efFEi3wtWO
Wd+q6evJX6jJhRcFwGDnf7bCEyHwnCcK6eew7fOQjrOt0MJ3Uzljegn2+H2g
zCidPC+6WsKn4oYXrLG9ZBxS8QA8wHYLG/0cgN/LhMO+a+Bq+bvcp1IdcO+d
vK30+lm1a4V0l8kVXLlvcB3wp4FmmvPp96QOfxL8/Lap7A4e4GmK+h7qhJyX
7k+4k+eD9Jb/1LjpjE/mqbiGT4YBd8Ua9/UEb4EWa1vW2ZJ8TOZSqzd2wYXD
YmI65HlPrm0WO3oM8c1K89CR1c5Ybn3uEd3POZtuwzPo74ybrZ0LKovtIDX9
0JPjpN1BZdl1fW5zjO5j1bnt5ISxAgoOpvQ6sHk70ydpW4w5mSOQG62Pvav3
Hs8n7dXb/Se2lTniaa/Hd+J7Zir5rDkzYkj7hVu/fzPF2uKp45xdr4tdcNqs
1/wIfT3bw7C2u+Wu+L1zXigrtxtqLa9Ve0fy66eiQm7tYx3kPjiu0ZnlAMsk
fDyj6fE5+2vdiQ8GeFS+amqo2xw9n1hH0f/vuGycI7PxhiXEFF6b3mmbCNL5
uzMGSV3ye6F/+m+PLxg4lCQ11iVDoJxhQfhPMl5i1SZFClcxbjp/oV23JZ7M
PfKWvt5Jft0RXvH/jJBtiRNbQUk0dIlb3KXv+zBqOP9oxNwGHgpmi+QbB8Ff
2fgk+rl5k5vWiu2J0YajvzgUPt2zQ/XAhU255D3Nkabz2vxvwePoXbG/Pttj
zmEZc/r/QcuPtni0prjhevuldXoqoVDUklp3goyXRk7i1aHl1zBL2Vida9YH
XoH0jcX0dXTnlaxEQy0hVCxlcdABR9xSIFxAX1fZoJWSvCfMGV+8bH538qQu
iDZ3frYh7aN9VrMna9zRODL7i8nG+7BccuUy+v9oA0MKnTGfTXGBS/CTzWLO
kP91qQ19HSa/2nSITK4FrMmeSXn72w2DXbc3S9DHMcW4u6zcDjWr2CQz3ytC
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
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       8.012461684547127*^-9, 1.7028807369528833`}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 
    0.7250000000000001, $CellContext`k2$$ = 
    0.33999999999999997`, $CellContext`k3$$ = 0.515, $CellContext`k4$$ = 
    0.8150000000000001, $CellContext`k5$$ = 
    0.9800000000000001, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 
     0.25, {1, 1, {0, -1}} -> 0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 
     0.25, {1, 1, {1, 0}} -> 0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 
     0.25, {1, 1, {1, -1}} -> 0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 
     0.25, {1, 2, {-1, -1}} -> 0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 
     0.25, {1, 2, {0, 1}} -> 0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 
     0.25, {1, 2, {0, 0}} -> 0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 
     0.25, {2, 1, {-1, -1}} -> 0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 
     0.25, {2, 1, {0, 1}} -> 0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 
     0.25, {2, 2, {-1, 0}} -> 0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 
     0.25, {2, 2, {-1, 1}} -> 0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 
     0.25, {2, 2, {1, 1}} -> 0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 
     0.25, {1, 3, {0, -1}} -> 0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 
     0.25, {1, 3, {1, 0}} -> 0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 
     0.25, {1, 3, {1, -1}} -> 0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 
     0.25, {2, 3, {0, -1}} -> 0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 
     0.25, {2, 3, {1, 0}} -> 0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 
     0.25, {2, 3, {1, -1}} -> 0.25, {2, 3, {0, 0}} -> 
     0.9800000000000001, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.7250000000000001, {3, 3, {0, -1}} -> 
     0.33999999999999997`, {3, 3, {-1, -1}} -> 0.515, {3, 3, {-1, 1}} -> 
     0.8150000000000001, {3, 3, {1, 0}} -> 0.7250000000000001, {3, 3, {0, 1}} -> 
     0.33999999999999997`, {3, 3, {1, 1}} -> 0.515, {3, 3, {1, -1}} -> 
     0.8150000000000001, {1, 4, {-1, 0}} -> 0.25, {1, 4, {0, -1}} -> 
     0.25, {1, 4, {-1, -1}} -> 0.25, {1, 4, {-1, 1}} -> 0.25, {1, 4, {1, 0}} -> 
     0.25, {1, 4, {0, 1}} -> 0.25, {1, 4, {1, 1}} -> 0.25, {1, 4, {1, -1}} -> 
     0.25, {1, 4, {0, 0}} -> 0.25, {2, 4, {-1, 0}} -> 0.25, {2, 4, {0, -1}} -> 
     0.25, {2, 4, {-1, -1}} -> 0.25, {2, 4, {-1, 1}} -> 0.25, {2, 4, {1, 0}} -> 
     0.25, {2, 4, {0, 1}} -> 0.25, {2, 4, {1, 1}} -> 0.25, {2, 4, {1, -1}} -> 
     0.25, {2, 4, {0, 0}} -> 0.25, {3, 4, {-1, 0}} -> 0.25, {3, 4, {0, -1}} -> 
     0.25, {3, 4, {-1, -1}} -> 0.25, {3, 4, {-1, 1}} -> 0.25, {3, 4, {1, 0}} -> 
     0.25, {3, 4, {0, 1}} -> 0.25, {3, 4, {1, 1}} -> 0.25, {3, 4, {1, -1}} -> 
     0.25, {3, 4, {0, 0}} -> 0.25, {4, 1, {-1, 0}} -> 0.25, {4, 1, {0, -1}} -> 
     0.25, {4, 1, {-1, -1}} -> 0.25, {4, 1, {-1, 1}} -> 0.25, {4, 1, {1, 0}} -> 
     0.25, {4, 1, {0, 1}} -> 0.25, {4, 1, {1, 1}} -> 0.25, {4, 1, {1, -1}} -> 
     0.25, {4, 2, {-1, 0}} -> 0.25, {4, 2, {0, -1}} -> 0.25, {4, 2, {-1, -1}} -> 
     0.25, {4, 2, {-1, 1}} -> 0.25, {4, 2, {1, 0}} -> 0.25, {4, 2, {0, 1}} -> 
     0.25, {4, 2, {1, 1}} -> 0.25, {4, 2, {1, -1}} -> 0.25, {4, 3, {-1, 0}} -> 
     0.25, {4, 3, {0, -1}} -> 0.25, {4, 3, {-1, -1}} -> 0.25, {4, 3, {-1, 1}} -> 
     0.25, {4, 3, {1, 0}} -> 0.25, {4, 3, {0, 1}} -> 0.25, {4, 3, {1, 1}} -> 
     0.25, {4, 3, {1, -1}} -> 0.25, {4, 4, {-1, 0}} -> 0.25, {4, 4, {0, -1}} -> 
     0.25, {4, 4, {-1, -1}} -> 0.25, {4, 4, {-1, 1}} -> 0.25, {4, 4, {1, 0}} -> 
     0.25, {4, 4, {0, 1}} -> 0.25, {4, 4, {1, 1}} -> 0.25, {4, 4, {1, -1}} -> 
     0.25}, $CellContext`m1Sel$$ = 3, $CellContext`m2Sel$$ = 
    3, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$18687, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}}, $CellContext`moSel$$ = 
    2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10, 20, 3.5, 20}, "numberOfMasses" -> 4, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.6116317991631799, 0.7435983263598327}, {0.8751882845188284, 
      0.3465690376569037}, {0.5188702928870291, 0.15058577405857743`}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {1.4740000000000002`, 
      1.3900000000000001`}, {0.746, 1.415}, {0.3380000000000001, 
      0.7949999999999999}}, "pointsDataTable" -> CompressedData["
1:eJw9UltIlFEQ/ld3vaySi1lEhBVEVD5kWUR0mQHTiqiopwjxYbs+hC0RYuJL
xOZDhPlQZg+lGIQh0kOUBTWbSOQlH2RLu4i7atriet2b17VzZn4bOBxmPs43
33xzNjuvn72UaBiGVZ1V6iSosydPR4ie1OqweS5zjMAVvuP0tUuHFQWfppVb
8KiZB0B4hqhWePAx3+2wzDFJdZy/M/mCsNJH7iQ0OGahU3DKE10g9SnzNlDq
ybjyTvoFSOD/Ok1eO3rLAlt3pQzTmuaj/vIsw7PUON1z0hmGoqrWyLaiEO1O
adpw/mIqHrT3NrgO/aS6gjehJa+PWrLdY2daRuhR/r1rowsRcGjY/hbiTGjH
iixNGIS+LUm3H+b/osFyXRiE3H5diMFh5otCZ70mtONdxZbttqDr47P1O/u9
JHgcOkp1YQ4EV76VZN7xdKRhUKdjabju1Y2r1eNdJHgqXnCc2//6yzwInoFH
tLzGCLWpaapal6lQyy/zQ1SnkRlq26QJEvG5Ut/b0Ecv9fiOMMn7P3RL29M0
DAy7PkD1eAXsLbbiMb8eaBy4XekMsX3NQ6DdOjAwCsIXheL3x9MTcmwoflmQ
x+mfIsHjMHD6fk1J5hgIbsOcyrU/umM23KjT7HTk55UTpt+pqKevL5iAB3o9
GQ4UvxepT9vfa/UU8ryfQPxepL8LeqEGyn6nSIlTHefNfYRpNevvhh28cB+p
RCm0oI/xHujg/cySwQQ3ycUCvpl+BEAtV3W0IMt1z0Eu/5eYqTcM3/l//YZW
9t/AU07tWAJu537JWMP7jJDgVnw6+eLziX1+EDwN/wH4yb+q
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {
    10, 20, 3.5, 20}, $CellContext`rawNumberOfMasses$$ = 
    4, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
    3, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
    True, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 0.8}, {0.9, 0.7}, {
    1.4740000000000002`, 1.3900000000000001`}, {0.746, 1.415}, {
    0.3380000000000001, 0.7949999999999999}}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       TabView[{"dynamics" -> Column[{
            Dynamic[
             Row[{
               OverVector["q"], " = ", 
               
               Module[{$CellContext`qm$}, $CellContext`qm$ = 
                 ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                Slider2D[
                  
                  Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                  ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
               " 2 \[Pi] ", 
               Dynamic[
                NumberForm[
                 MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}]], 
            Row[{
              Text["time, normalized to one period, t/T = "], 
              Dynamic[
               
               N[($CellContext`tauSliderValue$$ - 
                 1)/$CellContext`dynMeshSize$$]]}], 
            Row[{
              Dynamic[
               Manipulator[
                
                Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {
                1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                ContinuousAction -> True, Appearance -> "Open", 
                AppearanceElements -> {
                 "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                  "FasterSlowerButtons", "DirectionButton"}]]}], 
            Row[{
              Text["oscillation scale factor:"]}], 
            Row[{" " Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], 
              Dynamic[
               NumberForm[$CellContext`scale$$, {3, 2}]]}], 
            Row[{
              Text["Angular frequency \[Omega](q), selection:"], 
              Dynamic[
               SetterBar[
                
                Dynamic[$CellContext`omegaIndex$$, ($CellContext`omegaIndex$$ = \
#; $CellContext`bRefreshDynPlot$$ = True; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
         "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
         Column[{
            Row[{
              Text["number of mesh intervals "], 
              Manipulator[
               
               Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                   EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {2,
                30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[$CellContext`freqMeshSize$$]}], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}], "parameters" -> Grid[{{
             Row[{
               Text["mass: "], 
               Dynamic[
                If[$CellContext`rawNumberOfMasses$$ > 1, 
                 SetterBar[
                  
                  Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   Range[$CellContext`rawNumberOfMasses$$]]], 
                 $CellContext`massLabel[1]]]}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                 Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                  ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {0.25, 
                 Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
             Text["coupling to neighbouring: "], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 1, 
               SetterBar[
                
                Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 Range[$CellContext`rawNumberOfMasses$$]]], 
               $CellContext`massLabel[1]]]}, {
             Row[{
               Text["horizontal: "], 
               Style[
                Subscript[
                 Style["k", Italic], 1], FontColor -> RGBColor[
                  Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
               OverVector["a"], " "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
             Row[{
               Text["vertical: "], 
               Style[
                Subscript[
                 Style["k", Italic], 2], FontColor -> RGBColor[0, 
                  Rational[2, 3], 0]], " || ", 
               OverVector["b"], " "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
             Row[{
               Text["diagonal: "], 
               Style[
                Subscript[
                 Style["k", Italic], 3], FontColor -> 
                RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
               " || (", 
               OverVector["b"], " + ", 
               OverVector["a"], ") "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
             Row[{
               Text["diagonal: "], 
               Style[
                Subscript[
                 Style["k", Italic], 4], FontColor -> RGBColor[0, 
                  Rational[2, 3], 
                  Rational[2, 3]]], " || (", 
               OverVector["b"], " - ", 
               OverVector["a"], ") "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k4$$, {3, 2}]]}]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Row[{
                 Text["coupling from "], 
                 Dynamic[
                  $CellContext`massLabel[$CellContext`m1Sel$$]], 
                 Text[" to: "]}]]], 
             Dynamic[
              Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]], 
               Blank[], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  DeleteCases[
                   
                   Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Row[{
                 $CellContext`kLable[5], ": "}]]], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Row[{
                 Dynamic[
                  Manipulator[
                   
                   Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}]], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k5$$, {3, 2}]]}]]]}}]}, 
        Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], ImageSize -> {250, 350}]],
       Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 12}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 1}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        12, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10}, $CellContext`rawNumberOfMasses$$ = 
        1, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
        1, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         Switch[$CellContext`tabNumber$$, $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], $CellContext`freqTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
            Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
          Blank[], 
          LocatorPane[
           Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                 Dimensions[#]] < 3, 
               
               Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[$CellContext`rawArrayOfMasses$$]]; 
              If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                  $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                
                While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[$CellContext`kArray$$, All, 1], All, 1]]; 
              If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                
                While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 1], 
               Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                 Part[$CellContext`u$$, 2], 
                 Part[$CellContext`u$$, 
                  2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 2], 
               Part[$CellContext`u$$, 2]]; {
               Part[$CellContext`u$$, 1], 
               
               Part[$CellContext`u$$, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
             If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
             If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
             If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
             If[$CellContext`omegaIndex$$ > 
               2 $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
             ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
              2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
             True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
           $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
           LocatorAutoCreate -> True, ContinuousAction -> False]]]), 
      "Specifications" :> {
        TabView[{"dynamics" -> Column[{
             Dynamic[
              Row[{
                OverVector["q"], " = ", 
                
                Module[{$CellContext`qm$}, $CellContext`qm$ = 
                  ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                 Slider2D[
                   
                   Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False,
                    ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
                " 2 \[Pi] ", 
                Dynamic[
                 NumberForm[
                  MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}]], 
             Row[{
               Text["time, normalized to one period, t/T = "], 
               Dynamic[
                
                N[($CellContext`tauSliderValue$$ - 
                  1)/$CellContext`dynMeshSize$$]]}], 
             Row[{
               Dynamic[
                Manipulator[
                 
                 Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {
                 1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                 ContinuousAction -> True, Appearance -> "Open", 
                 AppearanceElements -> {
                  "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                   "FasterSlowerButtons", "DirectionButton"}]]}], 
             Row[{
               Text["oscillation scale factor:"]}], 
             Row[{" " Manipulator[
                 
                 Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], 
               Dynamic[
                NumberForm[$CellContext`scale$$, {3, 2}]]}], 
             Row[{
               Text["Angular frequency \[Omega](q), selection:"], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
          "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
          Column[{
             Row[{
               Text["number of mesh intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`freqMeshSize$$]}], 
             LocatorPane[
              Dynamic[$CellContext`qPlaneLoc$$], 
              Dynamic[
               (Graphics[{
                 Lighter[Gray], 
                 Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                 Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
              ContinuousAction -> False]}], "parameters" -> Grid[{{
              Row[{
                Text["mass: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                  Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                   ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {0.25, 
                  Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
              Text["coupling to neighbouring: "], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]]}, {
              Row[{
                Text["horizontal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 1], FontColor -> RGBColor[
                   Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                OverVector["a"], " "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
              Row[{
                Text["vertical: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 2], FontColor -> RGBColor[0, 
                   Rational[2, 3], 0]], " || ", 
                OverVector["b"], " "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 3], FontColor -> 
                 RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                " || (", 
                OverVector["b"], " + ", 
                OverVector["a"], ") "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 4], FontColor -> RGBColor[0, 
                   Rational[2, 3], 
                   Rational[2, 3]]], " || (", 
                OverVector["b"], " - ", 
                OverVector["a"], ") "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k4$$, {3, 2}]]}]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Row[{
                  Text["coupling from "], 
                  Dynamic[
                   $CellContext`massLabel[$CellContext`m1Sel$$]], 
                  Text[" to: "]}]]], 
              Dynamic[
               Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
                Dynamic[
                 $CellContext`massLabel[
                  First[
                   Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 
                Blank[], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   DeleteCases[
                    
                    Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Row[{
                  $CellContext`kLable[5], ": "}]]], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Row[{
                  Dynamic[
                   Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k5$$, {3, 2}]]}]]]}}]}, 
         Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
         ImageSize -> {250, 350}], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 12}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10}}, 0, ControlType -> 
         None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{915., {292., 299.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax, 1]/2, Part[$CellContext`qMax, 1]/2,
                Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -
               Part[$CellContext`qMax, 2]/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {380, 
        380}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, $CellContext`k] \
$CellContext`glConstMMax^(-1)/350]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
$CellContext`glConstMMax^(-1)/500]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 0.25, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.605485449360225*^9, {3.605485577172536*^9, 3.6054856292555146`*^9}},
 CellID->154425715]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    True, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 3, {0, 0}, 0.25, 0.23069599999999985`, {1.5020000000000002`, 
        0.935}, {1.288, 0.5050000000000003}, {{0.1985123279120579, 
        0.3988799112251624}, {0.3988799112251624, 0.801487672087942}}}, {
       1, 2, {0, 0}, 0.25, 1.0588210000000005`, {1.5020000000000002`, 
        0.935}, {0.488, 0.7600000000000002}, {{0.9710763197934308, 
        0.16759206702549326`}, {0.16759206702549326`, 
        0.02892368020656931}}}}, {{
       2, 3, {0, 0}, 0.25, 0.705025, {0.488, 0.7600000000000002}, {1.288, 
        0.5050000000000003}, {{
        0.9077692280415589, -0.28935144143824676`}, {-0.28935144143824676`, 
        0.09223077195844111}}}, {
       2, 1, {0, 0}, 0.25, 1.0588210000000005`, {1.5020000000000002`, 
        0.935}, {0.488, 0.7600000000000002}, {{0.9710763197934308, 
        0.16759206702549326`}, {0.16759206702549326`, 
        0.02892368020656931}}}}, {{
       3, 1, {0, 0}, 0.25, 0.23069599999999985`, {1.5020000000000002`, 
        0.935}, {1.288, 0.5050000000000003}, {{0.1985123279120579, 
        0.3988799112251624}, {0.3988799112251624, 0.801487672087942}}}, {
       3, 2, {0, 0}, 0.25, 0.705025, {0.488, 0.7600000000000002}, {1.288, 
        0.5050000000000003}, {{
        0.9077692280415589, -0.28935144143824676`}, {-0.28935144143824676`, 
        0.09223077195844111}}}}}, {{{
       1, 3, {1, 0}, 0.25, 0.31182500000000024`, {1.5020000000000002`, 
        0.935}, {1.342, 1.4700000000000002`}, {{
        0.08209733023330403, -0.2745129479676101}, {-0.2745129479676101, 
        0.917902669766696}}}, {
       1, 2, {0, 1}, 0.25, 0.8656159999999999, {1.5020000000000002`, 0.935}, {
        2.406, 1.1550000000000002`}, {{0.9440860612557993, 
        0.22975545738526112`}, {0.22975545738526112`, 
        0.055913938744200774`}}}, {
       1, 1, {1, 0}, 0.25, 0.9341409999999998, {1.5020000000000002`, 0.935}, {
        1.5560000000000003`, 1.9}, {{0.003121584428903138, 
        0.05578386988688009}, {0.05578386988688009, 0.9968784155710969}}}, {
       1, 1, {-1, 0}, 0.25, 0.9341409999999998, {1.5020000000000002`, 
        0.935}, {1.4480000000000002`, -0.029999999999999805`}, {{
        0.003121584428903138, 0.05578386988688009}, {0.05578386988688009, 
        0.9968784155710969}}}, {
       1, 2, {-1, 1}, 0.25, 1.2775249999999998`, {1.5020000000000002`, 
        0.935}, {2.3520000000000003`, 0.1900000000000004}, {{
        0.5655466624919279, -0.4956850159488071}, {-0.4956850159488071, 
        0.4344533375080719}}}, {
       1, 2, {1, 0}, 0.25, 1.5457000000000005`, {1.5020000000000002`, 
        0.935}, {0.542, 1.725}, {{
        0.5962347156628065, -0.49065148476418446`}, {-0.49065148476418446`, 
        0.40376528433719344`}}}, {
       1, 3, {-1, 0}, 0.25, 2.017848999999999, {1.5020000000000002`, 0.935}, {
        1.234, -0.4599999999999995}, {{0.03559433832759545, 
        0.18527649987684922`}, {0.18527649987684922`, 0.9644056616724044}}}, {
       1, 2, {1, 1}, 0.25, 2.3219889999999994`, {1.5020000000000002`, 
        0.935}, {2.46, 2.12}, {{0.3952490731006907, 0.48890412486880863`}, {
        0.48890412486880863`, 0.6047509268993093}}}, {
       1, 2, {-1, 0}, 0.25, 2.4402239999999997`, {1.5020000000000002`, 
        0.935}, {0.43399999999999994`, -0.20499999999999963`}, {{
        0.4674259412250681, 0.49893780243125224`}, {0.49893780243125224`, 
        0.5325740587749318}}}, {
       1, 3, {0, 1}, 0.25, 2.9048410000000002`, {1.5020000000000002`, 
        0.935}, {3.2060000000000004`, 0.9000000000000004}, {{
        0.9995782901714758, -0.02053124422300549}, {-0.02053124422300549, 
        0.0004217098285241701}}}, {
       1, 3, {-1, 1}, 0.25, 3.722499999999999, {1.5020000000000002`, 0.935}, {
        3.152, -0.0649999999999995}, {{
        0.7313633310946946, -0.4432505036937542}, {-0.4432505036937542, 
        0.26863666890530546`}}}, {
       1, 1, {1, -1}, 0.25, 3.799396, {1.5020000000000002`, 
        0.935}, {-0.3619999999999999, 1.505}, {{
        0.9144864078395619, -0.27964444874922223`}, {-0.27964444874922223`, 
        0.08551359216043808}}}, {
       1, 1, {-1, 1}, 0.25, 3.799396000000001, {1.5020000000000002`, 0.935}, {
        3.3660000000000005`, 0.3650000000000002}, {{
        0.9144864078395618, -0.2796444487492221}, {-0.2796444487492221, 
        0.08551359216043805}}}, {
       1, 1, {0, 1}, 0.25, 3.834749000000001, {1.5020000000000002`, 0.935}, {
        3.4200000000000004`, 1.33}, {{0.9593128520276033, 
        0.19756442990140943`}, {0.19756442990140943`, 
        0.04068714797239663}}}, {
       1, 1, {0, -1}, 0.25, 3.834749000000001, {1.5020000000000002`, 
        0.935}, {-0.4159999999999999, 0.54}, {{0.9593128520276033, 
        0.19756442990140943`}, {0.19756442990140943`, 
        0.04068714797239663}}}, {
       1, 3, {1, 1}, 0.25, 3.9554640000000005`, {1.5020000000000002`, 
        0.935}, {3.2600000000000002`, 1.8650000000000002`}, {{
        0.7813404445091648, 0.413337095218159}, {0.413337095218159, 
        0.218659555490835}}}, {
       1, 3, {1, -1}, 0.25, 4.337684000000001, {1.5020000000000002`, 
        0.935}, {-0.5760000000000001, 1.0750000000000002`}, {{
        0.995481459691393, -0.06706804829489658}, {-0.06706804829489658, 
        0.004518540308607088}}}, {
       1, 3, {0, -1}, 0.25, 5.2260490000000015`, {1.5020000000000002`, 
        0.935}, {-0.6300000000000001, 0.11000000000000032`}, {{
        0.869762989210396, 0.3365640084890133}, {0.3365640084890133, 
        0.13023701078960404`}}}, {
       1, 1, {1, 1}, 0.25, 5.738384, {1.5020000000000002`, 0.935}, {3.474, 
        2.295}, {{0.6776792908944399, 0.46736502820306197`}, {
        0.46736502820306197`, 0.32232070910556}}}, {
       1, 1, {-1, -1}, 0.25, 5.738384, {1.5020000000000002`, 
        0.935}, {-0.47, -0.4249999999999998}, {{0.67767929089444, 
        0.46736502820306197`}, {0.46736502820306197`, 0.32232070910556}}}, {
       1, 3, {-1, -1}, 0.25, 7.982696000000001, {1.5020000000000002`, 
        0.935}, {-0.6840000000000002, -0.8549999999999995}, {{
        0.5986193135752635, 0.4901777544829466}, {0.4901777544829466, 
        0.4013806864247365}}}, {
       1, 2, {1, -1}, 0.25, 8.438909, {1.5020000000000002`, 
        0.935}, {-1.3760000000000001`, 1.33}, {{
        0.9815112356348434, -0.13471054137448338`}, {-0.13471054137448338`, 
        0.018488764365156684`}}}, {
       1, 2, {0, -1}, 0.25, 8.921524000000002, {1.5020000000000002`, 
        0.935}, {-1.4300000000000002`, 0.3650000000000002}, {{
        0.9635824551948748, 0.18732673924320548`}, {0.18732673924320548`, 
        0.03641754480512519}}}, {
       1, 2, {-1, -1}, 0.25, 11.272421000000003`, {1.5020000000000002`, 
        0.935}, {-1.4840000000000002`, -0.5999999999999996}, {{
        0.7909743612308308, 0.40661274095422795`}, {0.40661274095422795`, 
        0.20902563876916933`}}}}, {{
       2, 1, {0, -1}, 0.25, 0.8656159999999999, {0.488, 
        0.7600000000000002}, {-0.4159999999999999, 0.54}, {{
        0.9440860612557993, 0.22975545738526112`}, {0.22975545738526112`, 
        0.055913938744200774`}}}, {
       2, 2, {1, 0}, 0.25, 0.9341409999999998, {0.488, 0.7600000000000002}, {
        0.542, 1.725}, {{0.003121584428903138, 0.05578386988688009}, {
        0.05578386988688009, 0.9968784155710969}}}, {
       2, 2, {-1, 0}, 0.25, 0.9341409999999998, {0.488, 0.7600000000000002}, {
        0.43399999999999994`, -0.20499999999999963`}, {{0.003121584428903138, 
        0.05578386988688009}, {0.05578386988688009, 0.9968784155710969}}}, {
       2, 3, {1, -1}, 0.25, 1.231321, {0.488, 
        0.7600000000000002}, {-0.5760000000000001, 1.0750000000000002`}, {{
        0.9194158143977078, -0.27219547136774236`}, {-0.27219547136774236`, 
        0.08058418560229214}}}, {
       2, 3, {1, 0}, 0.25, 1.233416, {0.488, 0.7600000000000002}, {1.342, 
        1.4700000000000002`}, {{0.5912976643727665, 0.49159407693754575`}, {
        0.49159407693754575`, 0.4087023356272336}}}, {
       2, 1, {1, -1}, 0.25, 1.2775249999999994`, {0.488, 
        0.7600000000000002}, {-0.3619999999999999, 1.505}, {{
        0.5655466624919279, -0.49568501594880726`}, {-0.49568501594880726`, 
        0.43445333750807213`}}}, {
       2, 1, {-1, 0}, 0.25, 1.5457000000000005`, {0.488, 
        0.7600000000000002}, {1.4480000000000002`, -0.029999999999999805`}, {{
        0.5962347156628065, -0.49065148476418446`}, {-0.49065148476418446`, 
        0.40376528433719344`}}}, {
       2, 3, {0, -1}, 0.25, 1.6724240000000001`, {0.488, 
        0.7600000000000002}, {-0.6300000000000001, 0.11000000000000032`}, {{
        0.7473726758286177, 0.43451899757477763`}, {0.43451899757477763`, 
        0.2526273241713823}}}, {
       2, 3, {-1, 0}, 0.25, 2.0449159999999997`, {0.488, 
        0.7600000000000002}, {1.234, -0.4599999999999995}, {{
        0.2721461419442168, -0.4450647361554215}, {-0.4450647361554215, 
        0.7278538580557831}}}, {
       2, 1, {-1, -1}, 0.25, 2.321989, {0.488, 
        0.7600000000000002}, {-0.47, -0.4249999999999998}, {{
        0.3952490731006908, 0.4889041248688086}, {0.4889041248688086, 
        0.6047509268993092}}}, {
       2, 1, {1, 0}, 0.25, 2.4402239999999997`, {0.488, 0.7600000000000002}, {
        1.5560000000000003`, 1.9}, {{0.4674259412250681, 
        0.49893780243125224`}, {0.49893780243125224`, 0.5325740587749318}}}, {
       2, 2, {1, -1}, 0.25, 3.799396, {0.488, 
        0.7600000000000002}, {-1.3760000000000001`, 1.33}, {{
        0.9144864078395619, -0.27964444874922223`}, {-0.27964444874922223`, 
        0.08551359216043808}}}, {
       2, 2, {-1, 1}, 0.25, 3.799396000000001, {0.488, 0.7600000000000002}, {
        2.3520000000000003`, 0.1900000000000004}, {{
        0.9144864078395618, -0.2796444487492221}, {-0.2796444487492221, 
        0.08551359216043805}}}, {
       2, 2, {0, 1}, 0.25, 3.834749000000001, {0.488, 0.7600000000000002}, {
        2.406, 1.1550000000000002`}, {{0.9593128520276033, 
        0.19756442990140943`}, {0.19756442990140943`, 
        0.04068714797239663}}}, {
       2, 2, {0, -1}, 0.25, 3.834749000000001, {0.488, 
        0.7600000000000002}, {-1.4300000000000002`, 0.3650000000000002}, {{
        0.9593128520276033, 0.19756442990140943`}, {0.19756442990140943`, 
        0.04068714797239663}}}, {
       2, 3, {-1, -1}, 0.25, 3.9818089999999993`, {0.488, 
        0.7600000000000002}, {-0.6840000000000002, -0.8549999999999995}, {{
        0.3449648137316483, 0.4753568039049588}, {0.4753568039049588, 
        0.6550351862683518}}}, {
       2, 2, {1, 1}, 0.25, 5.738384, {0.488, 0.7600000000000002}, {2.46, 
        2.12}, {{0.6776792908944399, 0.46736502820306197`}, {
        0.46736502820306197`, 0.32232070910556}}}, {
       2, 2, {-1, -1}, 0.25, 5.738384, {0.488, 
        0.7600000000000002}, {-1.4840000000000002`, -0.5999999999999996}, {{
        0.67767929089444, 0.46736502820306197`}, {0.46736502820306197`, 
        0.32232070910556}}}, {
       2, 3, {0, 1}, 0.25, 7.407124000000002, {0.488, 0.7600000000000002}, {
        3.2060000000000004`, 0.9000000000000004}, {{0.9973538987601666, 
        0.05137216549905203}, {0.05137216549905203, 
        0.0026461012398334397`}}}, {
       2, 3, {-1, 1}, 0.25, 7.777521, {0.488, 0.7600000000000002}, {
        3.152, -0.0649999999999995}, {{
        0.9124881822884183, -0.2825836150104898}, {-0.2825836150104898, 
        0.08751181771158183}}}, {
       2, 1, {-1, 1}, 0.25, 8.438909000000002, {0.488, 0.7600000000000002}, {
        3.3660000000000005`, 0.3650000000000002}, {{
        0.9815112356348434, -0.13471054137448335`}, {-0.13471054137448335`, 
        0.01848876436515668}}}, {
       2, 3, {1, 1}, 0.25, 8.905009000000002, {0.488, 0.7600000000000002}, {
        3.2600000000000002`, 1.8650000000000002`}, {{0.8628833502582648, 
        0.3439704552797195}, {0.3439704552797195, 0.13711664974173524`}}}, {
       2, 1, {0, 1}, 0.25, 8.921524000000002, {0.488, 0.7600000000000002}, {
        3.4200000000000004`, 1.33}, {{0.9635824551948748, 
        0.18732673924320548`}, {0.18732673924320548`, 
        0.03641754480512519}}}, {
       2, 1, {1, 1}, 0.25, 11.272421, {0.488, 0.7600000000000002}, {3.474, 
        2.295}, {{0.7909743612308306, 0.406612740954228}, {0.406612740954228, 
        0.20902563876916938`}}}}, {{
       3, 1, {-1, 0}, 0.25, 0.31182500000000024`, {1.288, 
        0.5050000000000003}, {1.4480000000000002`, -0.029999999999999805`}, {{
        0.08209733023330403, -0.2745129479676101}, {-0.2745129479676101, 
        0.917902669766696}}}, {
       3, 3, {1, 0}, 0.25, 0.9341409999999998, {1.288, 0.5050000000000003}, {
        1.342, 1.4700000000000002`}, {{0.003121584428903138, 
        0.05578386988688009}, {0.05578386988688009, 0.9968784155710969}}}, {
       3, 3, {-1, 0}, 0.25, 0.9341409999999998, {1.288, 0.5050000000000003}, {
        1.234, -0.4599999999999995}, {{0.003121584428903138, 
        0.05578386988688009}, {0.05578386988688009, 0.9968784155710969}}}, {
       3, 2, {-1, 1}, 0.25, 1.2313210000000006`, {1.288, 
        0.5050000000000003}, {2.3520000000000003`, 0.1900000000000004}, {{
        0.9194158143977079, -0.27219547136774236`}, {-0.27219547136774236`, 
        0.08058418560229211}}}, {
       3, 2, {-1, 0}, 0.25, 1.233416, {1.288, 0.5050000000000003}, {
        0.43399999999999994`, -0.20499999999999963`}, {{0.5912976643727665, 
        0.49159407693754575`}, {0.49159407693754575`, 0.4087023356272336}}}, {
       3, 2, {0, 1}, 0.25, 1.6724240000000001`, {1.288, 0.5050000000000003}, {
        2.406, 1.1550000000000002`}, {{0.7473726758286177, 
        0.43451899757477763`}, {0.43451899757477763`, 0.2526273241713823}}}, {
       3, 1, {1, 0}, 0.25, 2.017848999999999, {1.288, 0.5050000000000003}, {
        1.5560000000000003`, 1.9}, {{0.03559433832759545, 
        0.18527649987684922`}, {0.18527649987684922`, 0.9644056616724044}}}, {
       3, 2, {1, 0}, 0.25, 2.0449159999999997`, {1.288, 0.5050000000000003}, {
        0.542, 1.725}, {{
        0.2721461419442168, -0.4450647361554215}, {-0.4450647361554215, 
        0.7278538580557831}}}, {
       3, 1, {0, -1}, 0.25, 2.904841, {1.288, 
        0.5050000000000003}, {-0.4159999999999999, 0.54}, {{
        0.9995782901714758, -0.02053124422300549}, {-0.02053124422300549, 
        0.00042170982852417015`}}}, {
       3, 1, {1, -1}, 0.25, 3.722499999999999, {1.288, 
        0.5050000000000003}, {-0.3619999999999999, 1.505}, {{
        0.7313633310946946, -0.4432505036937542}, {-0.4432505036937542, 
        0.26863666890530546`}}}, {
       3, 3, {1, -1}, 0.25, 3.799396, {1.288, 
        0.5050000000000003}, {-0.5760000000000001, 1.0750000000000002`}, {{
        0.9144864078395619, -0.27964444874922223`}, {-0.27964444874922223`, 
        0.08551359216043808}}}, {
       3, 3, {-1, 1}, 0.25, 3.799396, {1.288, 0.5050000000000003}, {
        3.152, -0.0649999999999995}, {{
        0.9144864078395619, -0.27964444874922223`}, {-0.27964444874922223`, 
        0.08551359216043808}}}, {
       3, 3, {0, 1}, 0.25, 3.8347490000000013`, {1.288, 0.5050000000000003}, {
        3.2060000000000004`, 0.9000000000000004}, {{0.9593128520276033, 
        0.19756442990140943`}, {0.19756442990140943`, 
        0.040687147972396615`}}}, {
       3, 3, {0, -1}, 0.25, 3.834749000000001, {1.288, 
        0.5050000000000003}, {-0.6300000000000001, 0.11000000000000032`}, {{
        0.9593128520276033, 0.19756442990140943`}, {0.19756442990140943`, 
        0.04068714797239663}}}, {
       3, 1, {-1, -1}, 0.25, 3.9554640000000005`, {1.288, 
        0.5050000000000003}, {-0.47, -0.4249999999999998}, {{
        0.7813404445091648, 0.413337095218159}, {0.413337095218159, 
        0.218659555490835}}}, {
       3, 2, {1, 1}, 0.25, 3.9818089999999993`, {1.288, 0.5050000000000003}, {
        2.46, 2.12}, {{0.34496481373164817`, 0.47535680390495877`}, {
        0.47535680390495877`, 0.6550351862683518}}}, {
       3, 1, {-1, 1}, 0.25, 4.337684000000001, {1.288, 0.5050000000000003}, {
        3.3660000000000005`, 0.3650000000000002}, {{
        0.995481459691393, -0.06706804829489658}, {-0.06706804829489658, 
        0.004518540308607088}}}, {
       3, 1, {0, 1}, 0.25, 5.2260490000000015`, {1.288, 0.5050000000000003}, {
        3.4200000000000004`, 1.33}, {{0.869762989210396, 
        0.3365640084890133}, {0.3365640084890133, 0.13023701078960404`}}}, {
       3, 3, {1, 1}, 0.25, 5.738384, {1.288, 0.5050000000000003}, {
        3.2600000000000002`, 1.8650000000000002`}, {{0.67767929089444, 
        0.46736502820306197`}, {0.46736502820306197`, 0.32232070910556}}}, {
       3, 3, {-1, -1}, 0.25, 5.738384, {1.288, 
        0.5050000000000003}, {-0.6840000000000002, -0.8549999999999995}, {{
        0.67767929089444, 0.46736502820306197`}, {0.46736502820306197`, 
        0.32232070910556}}}, {
       3, 2, {0, -1}, 0.25, 7.407124, {1.288, 
        0.5050000000000003}, {-1.4300000000000002`, 0.3650000000000002}, {{
        0.9973538987601667, 0.05137216549905205}, {0.05137216549905205, 
        0.002646101239833441}}}, {
       3, 2, {1, -1}, 0.25, 7.777521, {1.288, 
        0.5050000000000003}, {-1.3760000000000001`, 1.33}, {{
        0.9124881822884183, -0.2825836150104898}, {-0.2825836150104898, 
        0.08751181771158183}}}, {
       3, 1, {1, 1}, 0.25, 7.982695999999998, {1.288, 0.5050000000000003}, {
        3.474, 2.295}, {{0.5986193135752633, 0.4901777544829466}, {
        0.4901777544829466, 0.4013806864247366}}}, {
       3, 2, {-1, -1}, 0.25, 8.905009000000002, {1.288, 
        0.5050000000000003}, {-1.4840000000000002`, -0.5999999999999996}, {{
        0.8628833502582648, 0.3439704552797195}, {0.3439704552797195, 
        0.13711664974173524`}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.8770519693261208, 2.4660985609513004`*^-18], {
      Complex[-0.24314420937476114`, -0.0018483918515534291`], 
      Complex[-0.045011856445757455`, -0.006740650781905314], Complex[
      0.9394971210679796, 0.], Complex[
      0.15571578624099935`, -0.0026956462605025365`], 
      Complex[-0.17682440060419272`, -0.012567558857254232`], 
      Complex[-0.02092241695264106, -0.0058224133475536025`]}}, {
      Complex[0.5148125827804166, -8.88127841282937*^-18], {
      Complex[-0.01842670502979541, -0.035769901613158975`], 
      Complex[-0.23670733827236334`, -0.0038161507724682603`], 
      Complex[-0.15828641413915845`, -0.009816376926756562], Complex[
      0.9379921509337055, 0.], Complex[
      0.0894108872450948, -0.0011238593870780689`], 
      Complex[-0.1658325749064719, 0.04312546339920414]}}, {
      Complex[0.4476419062012076, 1.7692272004941075`*^-18], {Complex[
      0.7154457065967919, 0.], Complex[0.21977770561843532`, 
      0.01826970500452522], Complex[0.058414196652630215`, 
      0.006064933732983405], Complex[
      0.0994500521546613, -0.026629094375975684`], 
      Complex[-0.6149726519909416, -0.031082200006409117`], 
      Complex[-0.21462384749601646`, 0.015235937901905913`]}}, {
      Complex[0.31468646393203714`, 2.8454529564287723`*^-18], {
      Complex[-0.23660726364603232`, 0.024384745062879333`], Complex[
      0.7230711257545551, 0.], Complex[-0.009056534255771779, 
      0.008529497899572256], Complex[
      0.04741277327361846, -0.012336550913641574`], Complex[
      0.2043486504426458, 0.014903455335514817`], Complex[-0.6109611291005156,
       0.05274101063371196]}}, {
      Complex[0.11662903848308213`, 7.48894023873229*^-18], {Complex[
      0.4938322040829568, -0.026315619967964457`], Complex[
      0.35345638453424666`, 0.0043615820990906065`], Complex[
      0.24006401103358974`, -0.01976581191078898], Complex[
      0.15984463870261748`, -0.01658763007794003], Complex[0.5985826572339984,
       0.], Complex[0.430192345273328, -0.05721255988994454]}}, {
      Complex[0.07572953773843977, 4.6675988071509785`*^-17], {
      Complex[-0.3550099597698821, -0.014948120492074043`], Complex[
      0.494999538670422, 0.020993142915302288`], 
      Complex[-0.17364589674426414`, -0.020399025440617374`], Complex[
      0.23424802795179292`, 0.047104909528407075`], 
      Complex[-0.42339649778792743`, -0.04331138816047023], Complex[
      0.5995654487585564, 0.]}}}, $CellContext`dynMeshSize$$ = 
    14, $CellContext`dynPlot$$ = {CompressedData["
1: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
     "], {19.3, 4.9, 26.900000000000002`}, 3, {{
       Line[{{-18.368000000000002`, -57.19999999999999}, \
{-12.319999999999999`, 50.879999999999995`}}], 
       Line[{{-16.450000000000003`, -56.80499999999999}, {-10.402, 
        51.27499999999999}}], 
       Line[{{-14.532000000000004`, -56.40999999999999}, {-8.483999999999998, 
        51.669999999999995`}}], 
       Line[{{-12.614000000000003`, -56.01499999999999}, {-6.565999999999997, 
        52.06499999999999}}], 
       Line[{{-10.696000000000003`, -55.61999999999999}, {-4.647999999999998, 
        52.459999999999994`}}], 
       Line[{{-8.778000000000002, -55.224999999999994`}, \
{-2.7299999999999978`, 52.85499999999999}}], 
       Line[{{-6.860000000000003, -54.82999999999999}, {-0.8119999999999976, 
        53.24999999999999}}], 
       Line[{{-4.942000000000003, -54.434999999999995`}, {1.1060000000000025`,
         53.64499999999999}}], 
       Line[{{-3.0240000000000027`, -54.03999999999999}, {3.0240000000000027`,
         54.03999999999999}}], 
       Line[{{-1.1060000000000025`, -53.64499999999999}, {4.942000000000003, 
        54.434999999999995`}}], 
       Line[{{0.8119999999999976, -53.24999999999999}, {6.860000000000003, 
        54.82999999999999}}], 
       Line[{{2.7299999999999978`, -52.85499999999999}, {8.778000000000002, 
        55.224999999999994`}}], 
       Line[{{4.647999999999998, -52.459999999999994`}, {10.696000000000003`, 
        55.61999999999999}}], 
       Line[{{6.565999999999997, -52.06499999999999}, {12.614000000000003`, 
        56.01499999999999}}], 
       Line[{{8.483999999999998, -51.669999999999995`}, {14.532000000000004`, 
        56.40999999999999}}], 
       Line[{{10.402, -51.27499999999999}, {16.450000000000003`, 
        56.80499999999999}}], 
       Line[{{12.319999999999999`, -50.879999999999995`}, {
        18.368000000000002`, 57.19999999999999}}]}, {
       Line[{{-18.368000000000002`, -57.19999999999999}, {
        12.319999999999999`, -50.879999999999995`}}], 
       Line[{{-18.314000000000004`, -56.234999999999985`}, {
        12.373999999999999`, -49.91499999999999}}], 
       Line[{{-18.260000000000005`, -55.269999999999996`}, {
        12.427999999999999`, -48.94999999999999}}], 
       Line[{{-18.206000000000003`, -54.30499999999999}, {12.482, -47.985}}], 
       Line[{{-18.152000000000005`, -53.33999999999999}, {
        12.535999999999998`, -47.019999999999996`}}], 
       Line[{{-18.098000000000003`, -52.374999999999986`}, {
        12.59, -46.05499999999999}}], 
       Line[{{-18.044000000000004`, -51.41}, {
        12.643999999999998`, -45.08999999999999}}], 
       Line[{{-17.990000000000002`, -50.44499999999999}, {
        12.697999999999999`, -44.125}}], 
       Line[{{-17.936000000000003`, -49.47999999999999}, {
        12.751999999999999`, -43.16}}], 
       Line[{{-17.882000000000005`, -48.514999999999986`}, {
        12.806, -42.19499999999999}}], 
       Line[{{-17.828000000000003`, -47.55}, {12.86, -41.22999999999999}}], 
       Line[{{-17.774000000000004`, -46.584999999999994`}, {
        12.913999999999998`, -40.265}}], 
       Line[{{-17.720000000000002`, -45.61999999999999}, {12.968, -39.3}}], 
       Line[{{-17.666000000000004`, -44.65499999999999}, {
        13.021999999999998`, -38.334999999999994`}}], 
       Line[{{-17.612000000000002`, -43.69}, {
        13.075999999999999`, -37.36999999999999}}], 
       Line[{{-17.558000000000003`, -42.724999999999994`}, {
        13.129999999999999`, -36.405}}], 
       Line[{{-17.504000000000005`, -41.75999999999999}, {13.184, -35.44}}], 
       Line[{{-17.450000000000003`, -40.79499999999999}, {
        13.238, -34.474999999999994`}}], 
       Line[{{-17.396000000000004`, -39.83}, {13.292, -33.50999999999999}}], 
       Line[{{-17.342000000000002`, -38.864999999999995`}, {
        13.346, -32.545}}], 
       Line[{{-17.288000000000004`, -37.89999999999999}, {
        13.399999999999999`, -31.579999999999995`}}], 
       Line[{{-17.234, -36.93499999999999}, {
        13.453999999999999`, -30.61499999999999}}], 
       Line[{{-17.180000000000003`, -35.97}, {13.508, -29.649999999999995`}}], 
       Line[{{-17.126, -35.004999999999995`}, {
        13.562, -28.684999999999995`}}], 
       Line[{{-17.072000000000003`, -34.03999999999999}, {
        13.616, -27.719999999999995`}}], 
       Line[{{-17.018000000000004`, -33.074999999999996`}, {
        13.67, -26.754999999999995`}}], 
       Line[{{-16.964000000000002`, -32.11}, {13.724, -25.789999999999996`}}], 
       Line[{{-16.910000000000004`, -31.144999999999996`}, {
        13.778, -24.824999999999996`}}], 
       Line[{{-16.856, -30.179999999999996`}, {
        13.832, -23.859999999999996`}}], 
       Line[{{-16.802000000000003`, -29.214999999999996`}, {
        13.886, -22.894999999999996`}}], 
       Line[{{-16.748, -28.249999999999996`}, {13.94, -21.929999999999996`}}], 
       Line[{{-16.694000000000003`, -27.284999999999997`}, {
        13.994, -20.964999999999996`}}], 
       Line[{{-16.64, -26.319999999999997`}, {14.048, -19.999999999999996`}}], 
       Line[{{-16.586000000000002`, -25.354999999999997`}, {
        14.102, -19.034999999999997`}}], 
       Line[{{-16.532000000000004`, -24.389999999999997`}, {
        14.156, -18.069999999999997`}}], 
       Line[{{-16.478, -23.424999999999997`}, {14.21, -17.104999999999997`}}], 
       Line[{{-16.424000000000003`, -22.459999999999997`}, {
        14.264, -16.139999999999997`}}], 
       Line[{{-16.37, -21.494999999999997`}, {14.318, -15.174999999999997`}}], 
       Line[{{-16.316000000000003`, -20.529999999999998`}, {
        14.372, -14.209999999999997`}}], 
       Line[{{-16.262, -19.564999999999998`}, {
        14.426, -13.244999999999997`}}], 
       Line[{{-16.208000000000002`, -18.599999999999998`}, {
        14.48, -12.279999999999998`}}], 
       Line[{{-16.154000000000003`, -17.634999999999998`}, {
        14.534, -11.314999999999998`}}], 
       Line[{{-16.1, -16.669999999999998`}, {
        14.588000000000001`, -10.349999999999998`}}], 
       Line[{{-16.046000000000003`, -15.704999999999998`}, {
        14.642000000000001`, -9.384999999999998}}], 
       Line[{{-15.992, -14.739999999999998`}, {
        14.696000000000002`, -8.419999999999998}}], 
       Line[{{-15.938000000000002`, -13.774999999999999`}, {
        14.75, -7.454999999999998}}], 
       Line[{{-15.884000000000002`, -12.809999999999999`}, {
        14.804, -6.489999999999998}}], 
       Line[{{-15.830000000000002`, -11.844999999999999`}, {
        14.858, -5.524999999999999}}], 
       Line[{{-15.776000000000002`, -10.879999999999999`}, {
        14.912, -4.559999999999999}}], 
       Line[{{-15.722000000000001`, -9.915}, {
        14.966000000000001`, -3.594999999999999}}], 
       Line[{{-15.668000000000001`, -8.95}, {
        15.020000000000001`, -2.629999999999999}}], 
       Line[{{-15.614, -7.984999999999999}, {
        15.074000000000002`, -1.6649999999999991`}}], 
       Line[{{-15.560000000000002`, -7.02}, {15.128, -0.6999999999999993}}], 
       Line[{{-15.506000000000002`, -6.055}, {15.182, 0.26500000000000057`}}], 
       Line[{{-15.452000000000002`, -5.09}, {15.236, 1.2300000000000004`}}], 
       Line[{{-15.398000000000001`, -4.125}, {15.290000000000001`, 
        2.1950000000000003`}}], 
       Line[{{-15.344000000000001`, -3.16}, {15.344000000000001`, 3.16}}], 
       Line[{{-15.290000000000001`, -2.1950000000000003`}, {
        15.398000000000001`, 4.125}}], 
       Line[{{-15.236, -1.2300000000000004`}, {15.452000000000002`, 5.09}}], 
       Line[{{-15.182, -0.26500000000000057`}, {15.506000000000002`, 6.055}}], 
       Line[{{-15.128, 0.6999999999999993}, {15.560000000000002`, 7.02}}], 
       Line[{{-15.074000000000002`, 1.6649999999999991`}, {15.614, 
        7.984999999999999}}], 
       Line[{{-15.020000000000001`, 2.629999999999999}, {15.668000000000001`, 
        8.95}}], 
       Line[{{-14.966000000000001`, 3.594999999999999}, {15.722000000000001`, 
        9.915}}], 
       Line[{{-14.912, 4.559999999999999}, {15.776000000000002`, 
        10.879999999999999`}}], 
       Line[{{-14.858, 5.524999999999999}, {15.830000000000002`, 
        11.844999999999999`}}], 
       Line[{{-14.804, 6.489999999999998}, {15.884000000000002`, 
        12.809999999999999`}}], 
       Line[{{-14.75, 7.454999999999998}, {15.938000000000002`, 
        13.774999999999999`}}], 
       Line[{{-14.696000000000002`, 8.419999999999998}, {15.992, 
        14.739999999999998`}}], 
       Line[{{-14.642000000000001`, 9.384999999999998}, {16.046000000000003`, 
        15.704999999999998`}}], 
       Line[{{-14.588000000000001`, 10.349999999999998`}, {16.1, 
        16.669999999999998`}}], 
       Line[{{-14.534, 11.314999999999998`}, {16.154000000000003`, 
        17.634999999999998`}}], 
       Line[{{-14.48, 12.279999999999998`}, {16.208000000000002`, 
        18.599999999999998`}}], 
       Line[{{-14.426, 13.244999999999997`}, {16.262, 19.564999999999998`}}], 
       Line[{{-14.372, 14.209999999999997`}, {16.316000000000003`, 
        20.529999999999998`}}], 
       Line[{{-14.318, 15.174999999999997`}, {16.37, 21.494999999999997`}}], 
       Line[{{-14.264, 16.139999999999997`}, {16.424000000000003`, 
        22.459999999999997`}}], 
       Line[{{-14.21, 17.104999999999997`}, {16.478, 23.424999999999997`}}], 
       Line[{{-14.156, 18.069999999999997`}, {16.532000000000004`, 
        24.389999999999997`}}], 
       Line[{{-14.102, 19.034999999999997`}, {16.586000000000002`, 
        25.354999999999997`}}], 
       Line[{{-14.048, 19.999999999999996`}, {16.64, 26.319999999999997`}}], 
       Line[{{-13.994, 20.964999999999996`}, {16.694000000000003`, 
        27.284999999999997`}}], 
       Line[{{-13.94, 21.929999999999996`}, {16.748, 28.249999999999996`}}], 
       Line[{{-13.886, 22.894999999999996`}, {16.802000000000003`, 
        29.214999999999996`}}], 
       Line[{{-13.832, 23.859999999999996`}, {16.856, 30.179999999999996`}}], 
       Line[{{-13.778, 24.824999999999996`}, {16.910000000000004`, 
        31.144999999999996`}}], 
       Line[{{-13.724, 25.789999999999996`}, {16.964000000000002`, 32.11}}], 
       Line[{{-13.67, 26.754999999999995`}, {17.018000000000004`, 
        33.074999999999996`}}], 
       Line[{{-13.616, 27.719999999999995`}, {17.072000000000003`, 
        34.03999999999999}}], 
       Line[{{-13.562, 28.684999999999995`}, {17.126, 35.004999999999995`}}], 
       Line[{{-13.508, 29.649999999999995`}, {17.180000000000003`, 35.97}}], 
       Line[{{-13.453999999999999`, 30.61499999999999}, {17.234, 
        36.93499999999999}}], 
       Line[{{-13.399999999999999`, 31.579999999999995`}, {
        17.288000000000004`, 37.89999999999999}}], 
       Line[{{-13.346, 32.545}, {17.342000000000002`, 38.864999999999995`}}], 
       Line[{{-13.292, 33.50999999999999}, {17.396000000000004`, 39.83}}], 
       Line[{{-13.238, 34.474999999999994`}, {17.450000000000003`, 
        40.79499999999999}}], 
       Line[{{-13.184, 35.44}, {17.504000000000005`, 41.75999999999999}}], 
       Line[{{-13.129999999999999`, 36.405}, {17.558000000000003`, 
        42.724999999999994`}}], 
       Line[{{-13.075999999999999`, 37.36999999999999}, {17.612000000000002`, 
        43.69}}], 
       Line[{{-13.021999999999998`, 38.334999999999994`}, {
        17.666000000000004`, 44.65499999999999}}], 
       Line[{{-12.968, 39.3}, {17.720000000000002`, 45.61999999999999}}], 
       Line[{{-12.913999999999998`, 40.265}, {17.774000000000004`, 
        46.584999999999994`}}], 
       Line[{{-12.86, 41.22999999999999}, {17.828000000000003`, 47.55}}], 
       Line[{{-12.806, 42.19499999999999}, {17.882000000000005`, 
        48.514999999999986`}}], 
       Line[{{-12.751999999999999`, 43.16}, {17.936000000000003`, 
        49.47999999999999}}], 
       Line[{{-12.697999999999999`, 44.125}, {17.990000000000002`, 
        50.44499999999999}}], 
       Line[{{-12.643999999999998`, 45.08999999999999}, {18.044000000000004`, 
        51.41}}], 
       Line[{{-12.59, 46.05499999999999}, {18.098000000000003`, 
        52.374999999999986`}}], 
       Line[{{-12.535999999999998`, 47.019999999999996`}, {
        18.152000000000005`, 53.33999999999999}}], 
       Line[{{-12.482, 47.985}, {18.206000000000003`, 54.30499999999999}}], 
       Line[{{-12.427999999999999`, 48.94999999999999}, {18.260000000000005`, 
        55.269999999999996`}}], 
       Line[{{-12.373999999999999`, 49.91499999999999}, {18.314000000000004`, 
        56.234999999999985`}}], 
       Line[{{-12.319999999999999`, 50.879999999999995`}, {
        18.368000000000002`, 57.19999999999999}}]}}, 
     14}, $CellContext`dynTab$$ = 1, $CellContext`freqMeshSize$$ = 
    12, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyNvXdUFsnzPYxZURGzYs5xxZwWHVEw55zXhDmBukbMYsIMiopZV8SAAXMY
lJwfHnJUUVHECGYMv/0udXs+U737npd/OKdOn356qqp7qm7d6ao1ad5gu/wm
JiZ+RU1MCvz9f3C1Y9eCzxfy6e+W/OX7rFy1/Z7OVQfPS1Igtx5aYtmPxE9q
h0zvyfs/xQt5a/NOuT96ZKvPj9xJvGgTo+jnyVKPOMQ4RFlHsfHp6hMH+69m
nQ1MblSVHrPXZJTQ5Cb0d9N6ds77nnweo/JrZGRET4sYPr+y+PqaTePttHX2
zVuPEjMk0fpUmSS+fqWzu/Wx/oeThbxr3vMqq7x8PN3eJrPnylXWjl3W8nCn
ZGWeW/IDo3l+obfRP4xJvksShBx621elkPGdfZyQQ29P6k2pMzhfHJsnSzVu
HPv2cwM+Pl2NONDDtEE2lxvV+U0mf7dYq/0u9Lb8YfGiPXcl8fFKj8J+iRaO
KXx+ZVO1nxsOXkgVcujtSIHKB+NiU/n6FY8xpZfeeK/NA73NTimScbO3pB9l
+E6P+hdmJyqVGjQ9fP35dxV6Wxo7p83HmfFCDr11HJ1U8vkaTQ69BWz9Yt9r
WwKbJ0uNbjYsrGvzJDY+Xb1RJKpUxm8pTG5Up08K3lXFPE3IoTevWS2TTUc8
5OOVsetbRXU5x+XpysBqNxyHfNHmgd5qx0RFZtul8vUr3x3XuTUYlSzk0Fuv
eyd+PzhU0o8SW79wmd8N8OePQm+uiUM2TdinyaG3Tje6qi+uJgg59JY41KtG
yzNJbJ4sdfin9rnJV1LY+HR1nIvn6wVKGpMb1eIrpjoseabJobcDGysdO+Io
jVfcLYdWWlovlc+vVDSYF7yoJAs59NblaXxuhbGJfP3KoHHnPV980J4XenO8
n9j86G+SfpSnr+ze/PwUR/p8JfQ2qpRapl/nRCGH3hzPfZz3+lKSkENvZTvX
q/WgYAqbJ0u9dCPguqV7Chufrlaf/NxyQQ0uN6qmB4sc67pOmx96K1ra0e11
+QQ+Xqk55XK/5c6xfH7Fw7/LC6uwaCGH3sI31PtatVU0X79SaPQ5n98WaHLo
LchxRungYTFcP8rsEQ3n9CuCfZci9Ga3fc/v74smCzn0Zmboa/lrryaH3oY2
Xr/MpEwymydL/dL8wglj60Q2Pl1tctB6nZIby+RGNf/ChosPXIoScujNdcWU
mJ1OIXy8MsBl7NbIB/58fqVbzKTCEdMChBx6e9/0vnnyWj5PtuJUJNq56DCj
kENvnZuVn9rwRhzXj5Iw+sn4Cr6JCtYHve1u1j930aRkIYfePt563NPQOEnI
obfPqeEV9k2PZ/NkqYfLhrcdWCeajU9Xr5++0qZYzVAmN6rmYTVmnal1R8j/
6w964+OhNz4/9HboX9eTrfD1Q2+f2PNCb9AP6VOB3qBPyKE3pn8FemP2UqC3
D3r7KtAb8wcFemP+I9bL/A3jFeafmF9h/qxAbx/1/o/1K2y/KNAb21/Qj6Lf
j6+E3vT795XQG9vvQm/sfBB6Y+eJ0Bs7f4Te2Hkl9MbON6E3dh4KvbHzU+iN
nbdCb+x8FnpboT/Phd5w/g/Ne18IvT2j9wXk0NtKer9ADr0NpveRfp4sFe8v
/fh0tTK97/Ryo4r3I+T8fcrGK3j/svmV8fS+hhx6G0Hvd7Z+JZ7iAcihNyuK
H5h+FMQbFJ8IvSE+gRx6Y/GM0BuLf4TeaunjJaE3Fl8JvbF4TOiNxW9Cbyze
E3pj8aHQG4snhd5Y/Cn01kEfrwq9Ib6dmxcPd4HehlE8DDn0NpPiZ8iht7MU
b+vnyVKPUXyuH5+ubqZ4Xi83qj0p/occenOkfIGNVxwov2DzK2GUj0AOvcVS
/sLWrzylfAdy6G0v5UdMP8oYyqco/xJ6Q/4FOfTG8jWhN5bfCb3F6vNBoTeW
Pwq9sXxT6I3lp0JvLJ8VemP5r9Aby5eF3lh+LfTG8nGhN56/Q29j6hft7F1Z
y5eht5j0EsMaWURLef2Q8BOdsp5EsXmy1Bl9lhW6MzlCyuuTzYrZnAj1l/L6
0ZXrOXY64CPl9fX7mVuM9/bh4xX3Oult1857IOX1S7xtYktX95Py+qRRS7b3
+cF/929/W769rnfpICmvv9PY8kvJOiFSXu87qMbLNq9Cpbx+SOagW/08Y6W8
/n5a9VFfBsVIef3cpV2uptWNkvL6DGunW2M2h0l5/XzfFLsEu2Apr/8yKaVK
xeAgKa/P8T1h13eiNF7ZM2vRQZ9pIVJeX3LJZ3f3a6FSXt/3c6p1DdtwKa9/
fbdK36yvEVJe/9b9y5fXwwxSXl91aOK3IuaIf7S8voj5xf5zgmOEHHqb4FQ2
9kCBaCGH3o5fcty5shmfJ0vNMpuzKzErUsrrJ0wa8+TN+ggpr/dbmHb1vH+4
lNc3Sg38YLYunI9Xjl43fZ1xjcvTFbeJF46OH6/ND73ZDb9Qqqo9X0+2UnWK
pYPPYoOU188/d+PA9uWSfpTOlax7JxiMUl5fvtr1m5kemhx6+/n94Lk+P6J4
XqzW/6PpoJEVotg8WWprO99651sZ2Ph0tcfoQ05TQyKY3Kh+KpNWvveccCmv
H1Op6DujXZiU1/9Q/EPP+4RKeX1cG9+jU7dpcujte88H3/dV5PP8HYdkvzk9
o5q2Hujtzx3thkysyp8rV6mdUn6aZbyWz0JviaFng7sujRRy6C3XYvCs0/si
hBx629k0a0OXGuFsniz13bIVk5eMDJXy+ksuPp+WrAuW8vqDsevijkQESnn9
xKMW6/Z1C+DjlfI7zmX8Fe0n5fVOZX4/3KSFJoferBfHrVxzi8+TreR0r+Zk
aamtH3rreq/pov0ORq4fZfJ9n7N2Q7AftbxeWbLCelWtUCGH3gpl1BvknxQk
5fXjnNvNjK8ZwObJUuet9Fpj29RXyuvDauW/fm+Yj5TXdy2bf+iC4nekvH5c
3YoFXWfckPL6Y1f8RkeaXpXy+irmw8Yu8rsn5fUNO207Hz5TWr9ytWLhY44t
wqS8/u3sx+0ddkRy/SjDV41p7zQwSsrrCzwacrmfU5iU128rab9/Q2aQlNc7
VijU88BNPymvP1swdtbqIj5SXn/3wOsKrolXpby+kFv9CQvr/vX/O6/n46E3
Pj/0du5f15Ot8PVDb7vY80Jv0A/P66FPnte/0utf5AvMXiJfaKS3r8gXmD+I
fIH5j1gv8zeRLzD/FPkC82eRL8zX+7/IF9h+EfkC218iX9DvRy2v1+9fLa+3
1u93oTd2Pgi9ddOfJ0Jv7PwRemPnldAbO9+E3th5KPTGzk+htzf681bojZ3P
Qm/f9Oe50BvOf57X433B83q8X3hej/cRz+t/0vuL5/Xx9L7jeT3ejzyvx/uU
5/Vf6P3L83q8r3le34be7zyvRzzA8/pfFD/wvL4CxRs8r0d8wvP6efp4RuiN
xT9CbyxeEnpj8ZXQG4vHhN5Y/Cb0xuI9oTcWHwq9vdTHk0JvLP4UemPxqtAb
4lue11ejeJjn9YifeV7/luJtntf3ofic5/VmFM/zvN6F4n+e13+kfIHn9bmU
X/C83oHyEZ7XI3/heT3yHZ7XIz/ieT3yKZ7XI//ieT3L14TeWH4n9JaozweF
3lj+KPTG8k2hN5afCr2xfFbojeW/Qm/T9fmy0BvLr4XeWD6u4SGUv3t8DVtl
/iW/T+/ABpUde3xTBy8p3qnDyAQh77xu5AHHqx/Vs9+zo49mxAo59GlSyv6T
RXSc0u+f+Z8Jf37Uv1GDI3WSxHjoeYrNN0Oj3do8zZXNVVbWea+W6dDls32U
th7of8PajgPnvtHkPT4t6PCjdqa698HjS47nY9j86Wq0eZnCtWy1+UeneC7+
/uOh+tLf/EVc+1g23qhOdjiVGj4lTsjz9Byq5revd8twRZPDjqZfnqxtqSQo
Pf953ljxvPPbrp01uEay8jP2S88RXU1onV/VTUtuFljwJo49V65qTP9t1rRP
mp7b/7Oey0rK3TsdNuUkiHmg5xe33r7N+hon5B0vn7z1Y+cH1azLETf3+3H8
uZQPSYVHTJ2i6T/PH+KUPQ4L/Ju009YJu8SMvBDSr0e8kI/9R29v1dGeKYtD
KiVwPSsFCh7p3rdqipDnreepUiXrw4dDgSliHthxcHLCuGpNtefKW0+G6he4
99ebxolM/3/HjRWDbUyfafMP7djtxnfv10pgoxPuH3qksvWnq10HldhWeGei
kOfNk6y6VLZwMhkp+aESPqtagTR3bf72j98lOc7OUQ43d9zQ/FIKm9+oZnWv
0KNKL01vlv/IH6jvj74MuzQwhen5k9KidNt97xckC3mfvP2l1HS7EDi9ZJKY
B37lUu+IfaMPKdxPlIkFDjV6+ehv/UzpVdeqcq7al/ZpY7MnFS/fFfUC5B2i
Xq/Xf646c0bNTSnvNft2yFu/ktt+eVKZl6lifvjbLfvWy55HaPNzPgDGt83T
m/q0Qh9b+30C51e7/Md64J+D/JfHni+Xxu2lhJa+1+T6LW098E/TzlMPdSsn
6iBCnkB1B4wfkucn6tAbTY6t7C/qEWorGg/eAvMfZXa15DWLh6SxfZehLN45
vUT5aWlifvjzlZpmlRpFafNDPozqIxjfIW9fqH8UOLtl8gBRN0FeKfgSej1k
KY9nLbr69JDm52Py9qPybJ/9ydgmXD/p6uOZPTb2upzC9JOujqU6DsZ3yjsH
1GcX7nu8ryLqO2pLGg+eBjsfFOPskKLz62nrtMo7f5TW523Vd4OS2XqMapTH
u2AH2zS2Ho3vgfH18s49NWDery5/dXwoxluy8fpz45MyJjx2p+eAJH7eKsfy
FVmxbJu2X7C/PLPPlrhYU5sfctTF2H5R9o4Z4b7wcIJiEvd/8ndqL9p3u78+
/NGqaiLzh1x19fAGpuZ/xjN/0Hg1GD887/2iNPVvusFtAl+PtxXWg9/Fvpv9
Nqjbq5ZJQm5F72WXCk8P3vNK4vpXfvPKTd9u+pDrXzlE9UGM/yPv/ag8qfXH
U/d1mr06AD+n8fhd7Ds/38CaaeeThdyS3uN1m3ru29Q8hfunUqB3/yONTbk/
pCuVqI6J8T3z3u9KzT2Pq05K0fy5LRuP38W+s+h5IsjieIqQ21CccMhL8Tcp
pD0v9lfjkdFJyydL+1GxpnorxrfIey5l276R9k8Spf0uxuv1k67OtRz5x4LT
2np60r6bMKr5h/4OfL/8vb8+lkytuDqJn28K6sIY347eU6lm++/Z/s/5Rn6i
oL6sX49R7Tvkj/KGg5rerCnOsYwr/jhxjbYe7K8KyvslKSEJ/P0i5mfvI2VV
ydujXE5r/t+N8anwu9h3Xm9OWCR5SftIGVWperFX+6V9JPhXI/LiTLU7xVf2
h/yGzUtNYv6Qqz63rvtuV0wCf14l/+utk/yC4sU82F+2nY8N+LNuspB3oPiq
dJEOHo/Ck7k+lfzxo31uOcRz+yo1f/Va3vOrtk7sl9beMf0mbtXmH0nx1Tr7
epUrxfP505XuQa29Kp+JFfJOFF8N3FZ/TqvmsWIe+H/cwlu/rXmRJOQ2FF+9
a7T+0PU+mn/Cz2dXMy4dczeG719lr9XiUtNfx7D1p6sNVrmMGlUyUch7UnxV
9WDdMtZKAj8flKQDTZe779Hm70B++/TK9bEhE/n8RnVzkUrOcy00vVlTfOX1
yn2D7ZNoMQ/88Np228R7xWP5+ay8u1Suerq5Zl/42/nTI/IdPGfkfqKE3Fkc
3qFAvDI2L55Xu9XzGeX487Pq1aBfespm8Kz87vRl/Cu9/nPVNMp32PqV9oOy
kx9PixLzC/6M6eVFOb9r80MOXhPGK3TObyn7WyO7rUlifFvyqy/Ej2L6VBqO
uLj5fVsDt5dS97l9wxYTDGJ+Udfet7fWXw20+Vuz+TF+EMVX7av+6eN7P0GM
b/n/uZ50xWDpkFXHJFLIu1F89eHt8O8FpkWI+eHPJzMXFXW4GC/mh/wo8cQw
vg+d81crL611pE+cGN+O/FYlvhl+F/5fz8y3i21HTT/jKL6yXuJ0st9orp90
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
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1: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
FmfWTv8DQ2HsJQ==
            "]], 
           Polygon[CompressedData["
1:eJwtl3d8z0cYx3+JX35fu1bt1h6p2rNVm9qbiNhBEELsLbESIyRWCIkRM4i9
YhN71OjLqlJUzaIoWqPt+9O7P948z+ee5+5+37t77lIocFCbgd4ul+sU+IAv
/8Ty/yrEFZAPvwosRUvCXwMF8A87LtcI7OEwGJZ4XK7mbpcrHXHBXi5Xf+iI
P4e4krSXgKIwmbgYtMLYRaCY1ZoS2wQK0taT3DbYo7DfY3+ATzCCuM7oIdjF
aAvBHggHYD9MRfuc/iYQF4GdCzsnZIPxaIVt3y2wuxLfDUY7pn+N8xaG0VYX
HdMVyD9toQ5+KBRCG4U/HHrjjyP2M/rOAW1o24c2gv5e0z6Uth34O+E6Whwx
WfluxaA47EVvRU5a9HQwhvgh8JLcN/CnxiGvGXFpiQvC7wPt8RvC95CP9gC0
JuSFwH3se/Ar9KVtEloh+i4O7enjkH4vmoOfAdJDGHFt0TPTPo68HtCcmJVo
iTDU/p7N2P0c07fGuK01Ji4FbQ/shQH0twjtiGP2hfbHKEhA8/IxG+wabUu0
Jti1YDXyUfwjsJG4A7QPwg6FIXZfvWPst3CUtjFoS9FSscdhj4WRdozdxLSg
P2/8f5nfSLRlMB7/GPHH4QRsRjuJdgLWEl+PecSjDcMfLdDe0JcP+izFQAxa
Ifz99nfGEf+RmE9QHz2J9tXop2GLx3xnj+anecJ42E5sU+JeMbdnEKo1R3+B
/RyewCC7D/6QTVsoDIacjJFAf/Ewnz5K4rclbgxxy2EFFCDuIWM8gBja2msu
aNWJTSQnBX8XlNV8tT+x79NeHr8CvCRvGHE90btqHGJmQD3sfhAMc4n/jtiV
xB3A3wsV8fujP2IOj+Gp/R1jIaPdZ9pv4cTEQ2XsK3aemm9u8qPobzH6QlhF
Xia0jHDVnp3VaLXx1xB3DD8VktEekz8IrTZ+DfgF/zw5kdjTYAYkam0dc6Z0
tt7Zc36X2L7kdsevRdx0j1lPresF4qPRPIx52dorac+OnwOeETOY3NbozWAW
bUXR56Etwl8AmfELw1y0+fhzdNbx0ysOO1a1irZ/6GsHY3TH7wadYB797UKr
i11Hc7O/Q/tPZ0NnpL89b3+RP4Z+wvSNYTnaAgjEDoLesJu8vIybB0r5mLV/
4Ji68ZtdN63fALQwtDy0fwH5IQrtOmNcg3uqPVoPx5ytCdiTYCKcsrm5sSOx
p8F0fXdyRjK/EHRdNouJqYg+hfGmQiR00J4n7gV8cJszq/5Sde5hHnYptDPY
s6AC/V0l75r2P36y6iLadfwrsEx9gK/uMvzV0JUxZto74jBtF+GSrdGq1Ufc
Zu76veHE5sMuCO3o46CNVc5iu4cjiYl2zD2m++xLfQe0IDQvXarw0d5bKeS1
RPoKLY3qIlpN4mJpXwhx0BltlmO+ub59AdtfBJTHrqT9QR8XVJdhCNQhPpHc
sdjVsGdiz4AI+01bou3ADsRuhd3aMXem7s6q2FG6p2mbr3z63oK/ASbih0OY
7mXitupuIC4Bu6rOFvYt2m5DOfZTHLnbVW9gHW3T0MuinSHvLMzDT4B46EMf
d9HWal/ozoRmdp5TsSMhAqLhJFon2pqqfmJvg03QnTH6eEy7v2P6Vf837P2y
xmP2uvZ8GghnLkvRl0Eu1TvVZHLbecx31Pcsg5aAFg+L7Hqoxo7FDoMJUJ6Y
XcQ217nF/1v3NDHlHNOuuIm6p9EqOWZ/a5+HW81X9xt2a+ye9NMLNsIG1RNb
93Xvt9RdBiVsfBfsAMjGuKH4g/VG0pqiZUAbojeH1si+a/S+KWt/Yz/sWHt+
pnrMOdZ5Vh1TPbtN2zrtdexj6H70V0b3BPyAvxW2wB63udP0ZriP3Z+4cvil
4Tx+ku5CtHOMeRrmalxYoDrLuJc0P3LX4zcg7iL+ee1//FqOOQc6D3O15sSP
Qy9J3AmdZ30DtMbEbcRO1pvE7gPdM5mYQ1bIApOJiSG3Mrl3iDkOQcT0gx+x
uznmbaM3TgdsNzk+ujvsm2aOvTvX07ZB40EytENrCy1hNjGnHVP3VP+mwArV
F4+pj4m0PaX/393mDq2P1gga6n7TGdcdit1H+czTrTNEbHW9h5jHAYhymzre
w94Luh+2k3vOMXeb7rjJdtxXxA4n14+8XrpbPOZM6bzo3Oy0NeCmxqC9JgTo
3a+1IG6NziMk6fsQNwp9CfZSyEtcX/wszHE69kxyI8Abfyu5/noXeEztVg2f
4ph10Hpk9zZv75P27fbebe513e/13P+XSFd7nUNoTFwjt/k7pJPOHzRFy2/f
uQ20XuAPjbUXieuiug7NcFrYOjXF7rlYG6ucVh7zd0NJYlbh38S+BZXoY7b2
gmPWRmvURHcA8cG2Tg3wmP2vc1BZb0VyoojZrz2iOTtmP2pfrrPf77Xqmvom
pq/eNfoGaCf0XW0NvWrPv+rAN3pj6FzL11sWez+Upo9JikPbh38IDup76Y2N
XlRj4E9XHVS91z7XnCGr9gMxl6Ei41UBf7Tj+M91f2B3QGsD0eTVsHMI8Jia
rNq82G3ObVfH1CjVKj/sY2ipcBh667w4Zl6a3xGrBcMN7J+9zL6Os79jL/4e
SFENc8wdortkk91LT7AHEveQ9gfaF+RuQ5ups6Tv5zbnOFDfkfVYRnuy1gKK
4K9Fb47dAlrZsxqk30POaMikdxv+OsfEKLaxXfOftBbY1SCEuEf4d2x9XEv7
1/Rf2sfUCD+dIejobd7ZfmiT6X8SFCZ3GLnfqhbhz9EdaOtaNfKX076VvE1Q
An+zY/pRf53t++8s+Z2Ja4DvqxqD9h9cDfwO
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
dktwe3HV7VDeAj6Kzo/RruTXlMspX3s85p7K8X6WDUSfqFx0eIyVQ1PPRXb3
GPUnU+6WrSNbF2xLui8chGxO4hy9elxb5VCbqZsC3p97Tb9DfhftTuT/Xant
v1k8U82jvmz2LupfDj5T32feA+3FTO2D7lHw/sH3osnwa2Sn0W88HTzGPfD7
tL+U5fHMdqbfk1L7lqOi/D34mTp78BPAqZnzwwfgr1BWwz8BO9L2BNrMov7F
4NjeJreOzn1r+Gm54+5SdE6Nc9RaPRznojndr/1XPglOTp3vaY2aUr5FfmDq
/hfAHwenZL6X1M6dZ8rWDoXPzuyTDoGfntu+f0P2LaUDvHnuu61810DwreCc
ZAb1tVPnq3XAYfyfzzpu0X2UNsekXmedd+3/Tbn9QDXlXeCs4LN4NfJHdA+R
DcGnBucb84LXSf7tZPBv1D0FrqDP1qn3qB14czzni4JzbI1lf93RwJR+XgVf
lk2g/zz4e+b84mJ0bsztK3UGx1K2J5777GA/sEZxNXNuNj44DsqeF8L/yJy/
/D0313cu0foF77vuCzqjuksuke+Pfm9R9AM6R8vgd1K3Ff3TwE6p7wLto7+V
7U2JPkp+7xftQ+a76RW511Br9XVwfib+KLgssw8+C50zc9uKbEk5mGKEYkUh
dU6onF73XNnP1uB4pP3VPh9O23PQm0u7sng2ddfXO4TeCmZG/6Cc6EHl5+DU
xPerh+TjUr9XzIz6s6NfUu69gf73imdZZ3ptZj9/fe41Vy5xQdxz+UnlhrL/
JvJNyMdnfnOokrut/Pxc6p+Rb4K/CNalzKf/+qnvehlYLff6aJ3OgU/ILK8E
7095MtqY7mi6u9VCFsBxid9ufox+e1qwLcmmLow5keJm3aJ9sXyyzvi5sU/l
w2nu+4beKORvFWOflg0qBqF/bPC7kmKNYs4Pmd85uivnYY9+o+35wXsiWz1f
/jzze47uaENku+j8pZy6zP7tzzK/U6m/CfTTltIntT/U21Ff2vaAd6b+yEJ8
M8qcE14v/xRzGtnAacrf6G8r7RZGnynfuYi6G9HpEu/9k5DX5P8SxXL4mGB/
Irs+WHn1/++Emf2o7lCnpM7ldN6V18zP/H7TM/oonY8jcs9Zc+8PnpfaVs8F
h6IzGN432Bfpvn+6/B/fGZ44Nium6x56YfCdTu9G1WNMUcy9IjiOD5CfD86R
FNeSzO8GuuvXQL9Jbh80PbPvkg3fAbbSfTm1b5RdyQ/frtwsron842XBZ+RG
sEXU132tGM/X/cH+RX5mebBtzKTdBsZycfC9rSz3XnyKfr/gfR+knBa+qeR3
k1HxvjBU/hM8mjISfja4reQ74XCdXekmthvp6Fvr9W6g84i8N7Id0fZGZJbr
HWVdyfdq3a/7BHPd/c8KvkuOhp8XHGdlM5tLtifZlWxY73LKFUfE2KQzWjd3
/NW9oVPuvFc5+afg9ch2JbazOWXuf260PeX1x+deW9l7Au+R2z6Ue8uWlIcP
p/5Y5Jekzn/axTiiOPdN5tyhMfWtol9qCd4b/Zju7NJRnDpAOVXmGFtPd8nU
cbZx6vOgdTgj5gDyV41y5wZ6N9rOOjSL35ge8zflj02RXZT7fWFV5jcn+ZA2
4Pm5/ZreB24NfifR2bkydWy6Grw197urbOanzHeXY5BNDF439bk4cxwcFeOI
7hEzgm1CtqH9vSbm2Yq/8j86Z32QtY9+Q/cjzV1zbYDssBjrdaf7hfmNTXzP
lB1oHWRjslu9zZ4S/AarO9dLsiv0vkr8lndV7jxeMfcmxenEdyrNRfPrF/NW
zVfz1vuD/MCXwX5Gd8RTpJM7D1ZurHux/PYlwXPXO80JuX2FbGcje9Er2oPe
gf8LIEYb+A==
            "]], 
           Polygon[CompressedData["
1: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
c2XESGOla/yyMnKYbvk+5jbGwFOLiIHGRj22vvuFMry3GqVW7cv9OjdifW9T
hEdxPavZO2f/qeVeq3c35/AextzTi/D89+X4OdaO+awqYuaORXgQY6me/sQi
Ysyk1MMeRXhQc7v1Uh/N8V6owkPppdbh/ZYaO9n2yHjaJ2Oq+x7bogoPohdx
zbp2x6SfPIxj2xsfna+cvznt7RoRA42Frpk77D/uMYS2NTnnoWZ4BL2COZC5
kPF4bvoHx1cP9WwRMcnYdK4xyLkDL+Ze49XTesRgY7EapBbtBXdqhMaoNT7T
Z0+Et6pHDBlUhUapVXvDazQi5u+f68P+tg821WNk3xiTjc3GRL2yfmpDtivL
yN0GpP714LrHmuF59kx/dVOOp17KmD67Cg1erx4xTm3u4pimXt3TDE1W69Q8
tVrNa9ZDk9QmNWxxEf2ttl0ETy3C833F8y6Gp8Cd1bQyPJfea37O19uaoYVq
YlWFp1Kf5uR8ergZXkpPtQHtj6hpcF9jShWeR94y+/9+uB08yPdrhKfeK+Od
/vI+Y06u79U5/1/wD0V42qoRGr/U+NwS2m/f9ivCU9rH5kCXF+FBzI3UYP2s
ObPabL76RWvERGNj3ZhQhGaqnXqMR4vIsfQepTGqNfTyqSre1/HSc95eRk1i
cean5q7Hwf/K67+uwtNMUJ9bwuvo4T6CN2gJb6eH+Yrrn8580ZqGtY7na1Hb
aAe3cH4rW72InNTc9FHaj9BL0d6miHzWfLyDMTn1ehLPbw+vaI317Po2f/8y
89NxVeSk5qbm4CeU4bn0WnouvZj5VQ2eUIt8Wg94G7x6S3jD38N3FlFDeL2M
nM7czpxuRhk5n7mfOdn8KuaYc+0hjv2Btj+phXm+uaDr2dzEGL+oihxFNmea
mev75byfuaA508QiPLK5lDmoXlVP+WYZHvf6InJeve+Rzch11UdjoznqLUV4
VL2qnvaufJ56oqe+GV5cC69tDm5ebV5rbn5qM3Jp7/8efHYzvGyn7J+R2W5O
q/d9O/2t/v6IZuTYl2S8N/e2BvcT4/FiLeodPzHen7VG/4+top4yvTVqYM6P
H+B3cv48VkVN6sCMN9OqqKlYWxkFH1RG/eSDHG/rFxeWEfv1pHrTZbR/ks8/
pYwa2CEZ362NWZM6CF5Si1qVOdcJqRfmYt7DeXpB3nuvjEfzaB+d/nZQER7I
9WYOPTT139x6EzURnpJ+/ODUU3Oej/k9ezYj13P9PVyGp9bbup5PKyPnOD/n
o7lIW3hJa/jz88qo0Y0sIkeydmdMOizj4/1l1AD2Tr1Qrx1raynWMF5Jfz05
61nWuqwvvZX1I2ud1rSsbf1X/awiJzQXNCc0V1ye4znamFhGTvRYETUT55/x
cJ/sr3vTDx6d8c/YZ03R2qI1EWsj5phHpD8x97QG2wV+sxa1WWuMXuO51h6t
YR6Z/Wlt8/ucPw/Dj1bhx1+F79dDlZGjmKu8BE+sogZ5XPqj9+Gn4QH18Pj9
q/DAnxURj4w/XTNeGe96Zsxz32O90p+MSL94Q/qdnbK/bobXSD9ujDHWqAGu
TTVH7XmcrXc9c/gq8osd9Ib5PHOadfL9OvDbnoA3ggfD61ZRAx4O79wStWFj
pLFyjawPdKsilnXN/N0YZiwbWA9vsVkV9+oLj2vGOxi7etXj3brn+V5vbOyf
9YfN69F35ksbtURMNDa2yXy2kflWh8wvjInGRvvT2Nk285Xn8v3351iXRtQw
rGXs3hK+RL9sbrwrvJG/pYqah+f1yXfwXfY0J6tCP+9I/zIl9f729N9fVVFT
uCHjg/HRPts5+2OzevzeIZm/yUPq4bN2cC2kvxrGsX30eI3os77pt8zd9ZP9
009YuxlSxXF98jaZs3XI8V6zipyuY45ne+63C8f2Y3/bepzfN+s/ek69p55S
b2nO2jn9Suf0f7671+jDR1RxL+dcl3rkyM7FUel3BqSfWjfHw/nm3PqsjPrG
e/TRFfDXZXit6fDfmuG5jH96Lr3YAWVogZqg1htjJySrFcZ0Y7sx29htDfpZ
+Jv8fqNnUPtdw67lYTkezgnnxlqNmBvD83uHObba5Rp3rQ/K9eKYODZPVFHv
MAYYC/YpQxu8v7HGmGRs+DBr876f2qBG6EXGV1FrsSZrrVwNN3+1xqG2+/ue
yXa9xcj8fe2KyE3Naa1tWFMx1zWG6jXGFRFb55ThrR6Hz4T/WEZt3vzYWo4x
xdhiPqy3078PrcdvVBvMcfV67YvIfX0/Y83qef0PZXjLFfDtal+u/5Xwf4xt
jchdzffN/1eWkRtZE7E2Yr21V9YP9M56FHMTcxK9yypZn/gUvroZnkdv+FwR
XmhJFV7Imq613YVl5DJfwTfArakXX8PXNyOGG8uXZn9b47KWYE3B2pf1ha5F
5Ozm0+p5kV7SWH16Gd7WGoK1hN/m/NND6iWPzPmlB9YLn5LjryfVmxpT9ZbL
WyPW6jHNJfWrek9zVHNVPbHeWA0wl9oytcEap16oTfpNayytud5WaUT+Yl/a
p81G9OlPRdRk7GtrUNaarPFY69G/j8785pMyalKeY1uZ+eDA1PvVG5EvNTK/
aldFzerbIvq4yPzLWtgucM8q1vT7tHdsibXuGHxeRA3JsemY8cOcxdzFMfum
yDlSxpzyw+z6LTHXnFPLitAj55o1Lmtd1phWlFHzb8l8ym8B+gVrqWrMgio0
Z8Oc36s1Yk46N40Zxg7n2Kfpj1fCf4c/Tn89v4zNbw5+a7DNGu7dma84N62x
zStiDlp78/e/l/nXiir88r2Zb00to4Ytt0t/bgw0Fu4Gb1LFmnXt+o3D5/67
GbU7a3jfl/HN5+38ffrlj8vwznpovbY5w0M5X76t4hqv9XvRJc3Q2Jl5f7XX
byDWJKxF+G3Eb1zXFZFf++2rJet/czl2TTM8ufPR+sicKmJsm/QrXbM/ZxdR
E3Ut+812Vs7Hlkbk5J7vPdtW8c3prSLyV79FXZfjo4a0NuKdp2V+8E0ZMX7V
etYoq6gXbJ51C9eL33DezfXg/NcztK/H/He+Xpr3s0+Ww/8DSesGZw==
            "]], 
           Polygon[CompressedData["
1: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
pu9De4P2Pw7qGpo=
            "]]}]}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0ckuBEEcB+DSZuw8ACenmTjb9277NoODCweZiyXBiUTixFXwAIwZjOEl
XIi3kHgUXyeS/vX3S+pQ9a/qLZ1sHjeEEI5kSzllHIWQyKW+x1te8541vnM2
G8IbZ1hnwlhe9WnWOMUXTnJCnvVxPnGMVY5yRCr6MB85xDIH+cAPe96xzive
8IyHPEijz3GHfSwyy0w6h/5rrgF+M88qK9KjX7CLJab3kGRCiNK52JjOSV+Y
91sQRwqLbOISm7nMFWnRV9nKNbaxwKK06+vs4AY7eW7DbpaZ4ye/pF//YczI
YQrMMS/b+q61/f/3+gOXUiik
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0bsvQ2EAxuGv2tpJhEEqZlYJrbr3tHpvEbsds/C3EKv7/ZLYWCVMYtCw
skgMjB4x/PK8Jzkn53w5/UurzZVYCGFZ920hpFxcxUO41oDd4jDjiRBy7GWT
hfYQGsyzzog51ewZVjnNCqc4qbI9wRLHWeQYs5q1R1lghnmmGXHIO0eY4iCT
7OObb3tVp33DJLf54ywbXNeHvcgWs3xkD7t1Z3858yWfucMoGcIu89xjgfss
sqQDu8xDVnjEKms6tus8YYOnbHJOZ/Y8z7nAC3565y27fMsD08zo5e9evnON
39zklhLO+OS5jtj///oFu2gylw==
          "]]}, {
         Line[{1090, 1089, 1817, 1107, 1613, 1825, 1130, 1841, 1619, 1823, 
          1148, 1629, 1858, 1168, 1638, 1882, 1192, 1879, 1643, 1897, 1209, 
          1656, 1918, 1227, 1668, 1941, 1251, 1956, 1674, 1938, 1267, 1687, 
          1979, 1287, 2001, 1285, 1313, 1998, 1311, 1334}], 
         Line[{1091, 1609, 1818, 1108, 357, 1131, 1840, 1621, 1844, 1149, 
          1630, 1863, 1169, 1881, 1170, 1193, 1900, 1645, 1896, 1210, 1658, 
          1922, 1228, 1940, 1229, 1252, 1955, 1676, 1960, 1268, 1690, 1983, 
          1288, 2000, 1289, 1314, 2015, 1315, 1335}], 
         Line[{1092, 344, 1110, 1615, 1827, 1132, 1843, 1623, 1848, 1150, 
          1862, 1153, 1172, 1884, 1175, 1194, 1899, 1647, 1906, 1211, 1660, 
          1921, 1231, 1670, 1943, 1253, 1959, 1678, 1965, 1269, 1692, 1982, 
          1291, 2004, 1294, 1316, 2017, 1319, 1336}], 
         Line[{1095, 1610, 1820, 1112, 1832, 1116, 1134, 1625, 1851, 1852, 
          1152, 1633, 1870, 1174, 1889, 1178, 1196, 1909, 1650, 1905, 1213, 
          1662, 1931, 1233, 1671, 1948, 1255, 1968, 1681, 1964, 1271, 1694, 
          1991, 1293, 1701, 2008, 1318, 690, 1338}], 
         Line[{1096, 1611, 1821, 1114, 1618, 1835, 1135, 1850, 1627, 1855, 
          1154, 1635, 1869, 1176, 1888, 1183, 1197, 1908, 1652, 1913, 1214, 
          1664, 1930, 1235, 1952, 1242, 1256, 1967, 1683, 1972, 1272, 1696, 
          1995, 1295, 2011, 1302, 1320, 2021, 1327, 1339}], 
         Line[{1097, 1612, 1822, 1115, 1834, 1125, 1136, 1854, 1628, 1838, 
          1155, 1875, 1164, 1177, 1642, 1891, 1198, 1912, 1654, 1894, 1215, 
          1666, 1934, 1236, 1951, 1247, 1257, 1975, 1685, 1971, 1273, 1994, 
          1282, 1296, 2010, 1307, 1321, 2023, 1331, 1340}], 
         Line[{1099, 1106, 1826, 1119, 1129, 1842, 1139, 1147, 1859, 1860, 
          1159, 1883, 1639, 1181, 1191, 1898, 1201, 1919, 1657, 1917, 1219, 
          1226, 1942, 1240, 1957, 1675, 1260, 1977, 1688, 1980, 1277, 1286, 
          2002, 1300, 1312, 2016, 1325, 703, 1342}], 
         Line[{1100, 1109, 1828, 1120, 1845, 1622, 1140, 1861, 1631, 1864, 
          1160, 1171, 1885, 1182, 1901, 1646, 1202, 1923, 1659, 1920, 1220, 
          1230, 1944, 1241, 1958, 1677, 1261, 1981, 1691, 1984, 1278, 1290, 
          2003, 1301, 684, 1326, 2026, 1708, 1343}], 
         Line[{1101, 1113, 1830, 1122, 1846, 1624, 1141, 1865, 1632, 1867, 
          1161, 463, 1185, 1902, 1648, 1203, 1924, 1661, 1926, 1221, 1234, 
          1945, 1244, 1961, 1679, 1262, 1985, 1693, 1987, 1279, 2005, 1700, 
          1304, 2018, 1704, 1328, 2027, 1709, 1344}], 
         Line[{1103, 1117, 1833, 1124, 1137, 1853, 1143, 1157, 1871, 1873, 
          1163, 1890, 1641, 1187, 1199, 1910, 1205, 1932, 1663, 1929, 1223, 
          1238, 1949, 1246, 1258, 1969, 1264, 1992, 1695, 1990, 1281, 1298, 
          2009, 1306, 2022, 1705, 1330, 709, 1346}], 
         Line[{1104, 1121, 1836, 1127, 405, 1145, 1876, 1636, 1874, 1165, 
          1184, 1892, 1189, 1911, 1653, 1206, 1933, 1665, 1935, 1224, 1243, 
          1950, 1248, 1970, 1684, 1265, 1993, 1697, 1996, 1283, 1303, 2012, 
          1309, 696, 1332, 2029, 1711, 1347}], 
         Line[{1105, 1126, 1837, 1128, 1144, 1856, 1146, 1877, 1637, 1878, 
          1166, 1188, 1893, 1190, 1914, 1655, 1207, 1936, 1667, 1937, 1225, 
          1953, 1673, 1249, 1973, 1686, 1266, 1997, 1698, 1974, 1284, 1308, 
          2013, 1310, 2024, 1706, 1333, 2030, 1712, 1348}], 
         Line[{1337, 1322, 2019, 1317, 1297, 2006, 1292, 1274, 1986, 1270, 
          1963, 1962, 1680, 1254, 1237, 1946, 1232, 1216, 1925, 1212, 1904, 
          1903, 1649, 1195, 1886, 1640, 1173, 1156, 1866, 1151, 397, 1847, 
          1133, 1829, 1616, 1111, 1093, 1819, 1094}], 
         Line[{1341, 1707, 2025, 1324, 1703, 2014, 1299, 1699, 1999, 1276, 
          1689, 1978, 1976, 1259, 1954, 1250, 1239, 1669, 1939, 1218, 1916, 
          1915, 1208, 1200, 1644, 1895, 1180, 1880, 1167, 1158, 419, 1857, 
          1138, 1620, 1839, 1118, 1614, 1824, 1098}], 
         Line[{1345, 1710, 2028, 1329, 2020, 1323, 1305, 1702, 2007, 1280, 
          1989, 1988, 1275, 1263, 1682, 1966, 1245, 1672, 1947, 1222, 1928, 
          1927, 1217, 1204, 1651, 1907, 1186, 1887, 1179, 1162, 1872, 1634, 
          1868, 1142, 1626, 1849, 1123, 1617, 1831, 1102}], 
         Line[{1350, 1349, 2031, 1367, 1717, 2039, 1390, 2055, 1723, 2037, 
          1408, 1733, 2072, 1428, 1742, 2096, 1452, 2093, 1747, 2111, 1469, 
          1760, 2132, 1487, 1772, 2155, 1511, 2170, 1778, 2152, 1527, 1791, 
          2193, 1547, 2215, 1545, 1573, 2212, 1571, 1594}], 
         Line[{1351, 1713, 2032, 1368, 732, 1391, 2054, 1725, 2058, 1409, 
          1734, 2077, 1429, 2095, 1430, 1453, 2114, 1749, 2110, 1470, 1762, 
          2136, 1488, 2154, 1489, 1512, 2169, 1780, 2174, 1528, 1794, 2197, 
          1548, 2214, 1549, 1574, 2229, 1575, 1595}], 
         Line[{1352, 719, 1370, 1719, 2041, 1392, 2057, 1727, 2062, 1410, 
          2076, 1413, 1432, 2098, 1435, 1454, 2113, 1751, 2120, 1471, 1764, 
          2135, 1491, 1774, 2157, 1513, 2173, 1782, 2179, 1529, 1796, 2196, 
          1551, 2218, 1554, 1576, 2231, 1579, 1596}], 
         Line[{1355, 1714, 2034, 1372, 2046, 1376, 1394, 1729, 2065, 2066, 
          1412, 1737, 2084, 1434, 2103, 1438, 1456, 2123, 1754, 2119, 1473, 
          1766, 2145, 1493, 1775, 2162, 1515, 2182, 1785, 2178, 1531, 1798, 
          2205, 1553, 1805, 2222, 1578, 1065, 1598}], 
         Line[{1356, 1715, 2035, 1374, 1722, 2049, 1395, 2064, 1731, 2069, 
          1414, 1739, 2083, 1436, 2102, 1443, 1457, 2122, 1756, 2127, 1474, 
          1768, 2144, 1495, 2166, 1502, 1516, 2181, 1787, 2186, 1532, 1800, 
          2209, 1555, 2225, 1562, 1580, 2235, 1587, 1599}], 
         Line[{1357, 1716, 2036, 1375, 2048, 1385, 1396, 2068, 1732, 2052, 
          1415, 2089, 1424, 1437, 1746, 2105, 1458, 2126, 1758, 2108, 1475, 
          1770, 2148, 1496, 2165, 1507, 1517, 2189, 1789, 2185, 1533, 2208, 
          1542, 1556, 2224, 1567, 1581, 2237, 1591, 1600}], 
         Line[{1359, 1366, 2040, 1379, 1389, 2056, 1399, 1407, 2073, 2074, 
          1419, 2097, 1743, 1441, 1451, 2112, 1461, 2133, 1761, 2131, 1479, 
          1486, 2156, 1500, 2171, 1779, 1520, 2191, 1792, 2194, 1537, 1546, 
          2216, 1560, 1572, 2230, 1585, 1078, 1602}], 
         Line[{1360, 1369, 2042, 1380, 2059, 1726, 1400, 2075, 1735, 2078, 
          1420, 1431, 2099, 1442, 2115, 1750, 1462, 2137, 1763, 2134, 1480, 
          1490, 2158, 1501, 2172, 1781, 1521, 2195, 1795, 2198, 1538, 1550, 
          2217, 1561, 1059, 1586, 2240, 1812, 1603}], 
         Line[{1361, 1373, 2044, 1382, 2060, 1728, 1401, 2079, 1736, 2081, 
          1421, 838, 1445, 2116, 1752, 1463, 2138, 1765, 2140, 1481, 1494, 
          2159, 1504, 2175, 1783, 1522, 2199, 1797, 2201, 1539, 2219, 1804, 
          1564, 2232, 1808, 1588, 2241, 1813, 1604}], 
         Line[{1363, 1377, 2047, 1384, 1397, 2067, 1403, 1417, 2085, 2087, 
          1423, 2104, 1745, 1447, 1459, 2124, 1465, 2146, 1767, 2143, 1483, 
          1498, 2163, 1506, 1518, 2183, 1524, 2206, 1799, 2204, 1541, 1558, 
          2223, 1566, 2236, 1809, 1590, 1084, 1606}], 
         Line[{1364, 1381, 2050, 1387, 780, 1405, 2090, 1740, 2088, 1425, 
          1444, 2106, 1449, 2125, 1757, 1466, 2147, 1769, 2149, 1484, 1503, 
          2164, 1508, 2184, 1788, 1525, 2207, 1801, 2210, 1543, 1563, 2226, 
          1569, 1071, 1592, 2243, 1815, 1607}], 
         Line[{1365, 1386, 2051, 1388, 1404, 2070, 1406, 2091, 1741, 2092, 
          1426, 1448, 2107, 1450, 2128, 1759, 1467, 2150, 1771, 2151, 1485, 
          2167, 1777, 1509, 2187, 1790, 1526, 2211, 1802, 2188, 1544, 1568, 
          2227, 1570, 2238, 1810, 1593, 2244, 1816, 1608}], 
         Line[{1597, 1582, 2233, 1577, 1557, 2220, 1552, 1534, 2200, 1530, 
          2177, 2176, 1784, 1514, 1497, 2160, 1492, 1476, 2139, 1472, 2118, 
          2117, 1753, 1455, 2100, 1744, 1433, 1416, 2080, 1411, 772, 2061, 
          1393, 2043, 1720, 1371, 1353, 2033, 1354}], 
         Line[{1601, 1811, 2239, 1584, 1807, 2228, 1559, 1803, 2213, 1536, 
          1793, 2192, 2190, 1519, 2168, 1510, 1499, 1773, 2153, 1478, 2130, 
          2129, 1468, 1460, 1748, 2109, 1440, 2094, 1427, 1418, 794, 2071, 
          1398, 1724, 2053, 1378, 1718, 2038, 1358}], 
         Line[{1605, 1814, 2242, 1589, 2234, 1583, 1565, 1806, 2221, 1540, 
          2203, 2202, 1535, 1523, 1786, 2180, 1505, 1776, 2161, 1482, 2142, 
          2141, 1477, 1464, 1755, 2121, 1446, 2101, 1439, 1422, 2086, 1738, 
          2082, 1402, 1730, 2063, 1383, 1721, 2045, 1362}]}, {
         Line[{342, 612, 1973, 611, 606, 1970, 605, 1969, 600, 1966, 599, 594,
           1961, 593, 588, 1958, 587, 1957, 582, 1954, 576, 573, 1951, 572, 
          1952, 569, 568, 1948, 565, 1946, 564, 561, 1943, 560, 557, 1940, 
          556, 1941, 553, 581}], 
         Line[{352, 575, 1953, 574, 571, 1950, 570, 1949, 567, 1947, 566, 563,
           1945, 562, 1944, 559, 558, 1942, 555, 1939, 550, 545, 1934, 544, 
          539, 1930, 538, 1931, 533, 1925, 532, 527, 1921, 526, 1922, 521, 
          520, 1918, 515, 554}], 
         Line[{354, 339, 1817, 341, 340, 1818, 343, 344, 345, 1819, 346, 1820,
           347, 348, 1821, 349, 350, 1822, 351, 1824, 355, 1826, 358, 359, 
          1828, 362, 363, 1830, 366, 1831, 367, 1833, 370, 371, 1836, 374, 
          1837, 375, 377}], 
         Line[{380, 353, 1825, 356, 357, 360, 1827, 361, 364, 1829, 365, 1832,
           368, 369, 1835, 372, 1834, 373, 376, 1839, 381, 1842, 386, 387, 
          1845, 392, 1846, 393, 398, 1849, 399, 1853, 404, 405, 410, 1856, 
          411, 414}], 
         Line[{416, 378, 1841, 382, 1840, 384, 388, 1843, 390, 394, 1847, 396,
           1851, 400, 1850, 402, 406, 1854, 408, 412, 1857, 418, 1859, 422, 
          1861, 424, 428, 1865, 430, 434, 1868, 436, 1871, 440, 442, 1876, 
          446, 1877, 448, 451}], 
         Line[{452, 1878, 449, 447, 443, 1874, 441, 1873, 1872, 437, 435, 
          1867, 431, 429, 1864, 425, 423, 1860, 419, 413, 1838, 409, 407, 
          1855, 403, 401, 1852, 397, 395, 1848, 391, 389, 1844, 385, 383, 379,
           1823, 417}], 
         Line[{454, 415, 1858, 420, 421, 1863, 426, 1862, 427, 432, 1866, 433,
           1870, 438, 1869, 439, 444, 1875, 445, 450, 1880, 455, 1883, 458, 
          459, 1885, 462, 463, 466, 1887, 467, 1890, 470, 471, 1892, 474, 
          1893, 475, 477}], 
         Line[{480, 453, 1882, 456, 1881, 457, 460, 1884, 461, 464, 1886, 465,
           1889, 468, 1888, 469, 472, 1891, 473, 476, 1895, 481, 1898, 486, 
          487, 1901, 492, 1902, 493, 498, 1907, 499, 1910, 504, 1911, 505, 
          510, 1914, 511, 514}], 
         Line[{516, 1879, 478, 482, 484, 1900, 488, 1899, 490, 494, 1903, 496,
           1909, 500, 1908, 502, 506, 1912, 508, 512, 1915, 518, 1919, 522, 
          524, 1923, 528, 1924, 530, 534, 1927, 536, 1932, 540, 1933, 542, 
          546, 1936, 548, 551}], 
         Line[{552, 1937, 549, 547, 1935, 543, 541, 537, 1929, 1928, 535, 
          1926, 531, 529, 525, 1920, 523, 519, 1917, 1916, 513, 1894, 509, 
          507, 1913, 503, 501, 497, 1905, 1904, 495, 1906, 491, 489, 485, 
          1896, 483, 1897, 479, 517}], 
         Line[{578, 1974, 650, 648, 1996, 644, 642, 638, 1990, 1989, 636, 
          1987, 632, 630, 1984, 626, 624, 1980, 620, 1978, 614, 610, 1971, 
          608, 1972, 604, 602, 598, 1964, 1963, 596, 1965, 592, 590, 1960, 
          586, 584, 580, 1938, 618}], 
         Line[{615, 675, 2013, 674, 2012, 671, 670, 2009, 667, 2007, 666, 663,
           2005, 662, 659, 2003, 658, 2002, 655, 1999, 651, 646, 1994, 645, 
          1995, 640, 639, 1991, 634, 1986, 633, 628, 1982, 627, 1983, 622, 
          621, 1979, 616, 654}], 
         Line[{617, 579, 1956, 583, 1955, 585, 589, 1959, 591, 595, 1962, 597,
           1968, 601, 1967, 603, 607, 609, 1975, 613, 1976, 1977, 619, 623, 
          1981, 625, 629, 1985, 631, 635, 1988, 637, 1992, 641, 1993, 643, 
          647, 1997, 649, 577}], 
         Line[{652, 700, 2024, 699, 696, 695, 2022, 692, 2020, 691, 688, 2018,
           687, 684, 683, 2016, 680, 2014, 676, 673, 2010, 672, 2011, 669, 
          668, 2008, 665, 2006, 664, 661, 2004, 660, 657, 2000, 656, 2001, 
          653, 679}], 
         Line[{677, 713, 2030, 712, 2029, 711, 710, 709, 2028, 708, 707, 2027,
           706, 705, 2026, 704, 703, 2025, 701, 698, 2023, 697, 694, 2021, 
          693, 690, 2019, 689, 686, 2017, 685, 682, 2015, 681, 678, 1998, 
          702}], 
         Line[{717, 987, 2187, 986, 981, 2184, 980, 2183, 975, 2180, 974, 969,
           2175, 968, 963, 2172, 962, 2171, 957, 2168, 951, 948, 2165, 947, 
          2166, 944, 943, 2162, 940, 2160, 939, 936, 2157, 935, 932, 2154, 
          931, 2155, 928, 956}], 
         Line[{727, 950, 2167, 949, 946, 2164, 945, 2163, 942, 2161, 941, 938,
           2159, 937, 2158, 934, 933, 2156, 930, 2153, 925, 920, 2148, 919, 
          914, 2144, 913, 2145, 908, 2139, 907, 902, 2135, 901, 2136, 896, 
          895, 2132, 890, 929}], 
         Line[{729, 714, 2031, 716, 715, 2032, 718, 719, 720, 2033, 721, 2034,
           722, 723, 2035, 724, 725, 2036, 726, 2038, 730, 2040, 733, 734, 
          2042, 737, 738, 2044, 741, 2045, 742, 2047, 745, 746, 2050, 749, 
          2051, 750, 752}], 
         Line[{755, 728, 2039, 731, 732, 735, 2041, 736, 739, 2043, 740, 2046,
           743, 744, 2049, 747, 2048, 748, 751, 2053, 756, 2056, 761, 762, 
          2059, 767, 2060, 768, 773, 2063, 774, 2067, 779, 780, 785, 2070, 
          786, 789}], 
         Line[{791, 753, 2055, 757, 2054, 759, 763, 2057, 765, 769, 2061, 771,
           2065, 775, 2064, 777, 781, 2068, 783, 787, 2071, 793, 2073, 797, 
          2075, 799, 803, 2079, 805, 809, 2082, 811, 2085, 815, 817, 2090, 
          821, 2091, 823, 826}], 
         Line[{827, 2092, 824, 822, 818, 2088, 816, 2087, 2086, 812, 810, 
          2081, 806, 804, 2078, 800, 798, 2074, 794, 788, 2052, 784, 782, 
          2069, 778, 776, 2066, 772, 770, 2062, 766, 764, 2058, 760, 758, 754,
           2037, 792}], 
         Line[{829, 790, 2072, 795, 796, 2077, 801, 2076, 802, 807, 2080, 808,
           2084, 813, 2083, 814, 819, 2089, 820, 825, 2094, 830, 2097, 833, 
          834, 2099, 837, 838, 841, 2101, 842, 2104, 845, 846, 2106, 849, 
          2107, 850, 852}], 
         Line[{855, 828, 2096, 831, 2095, 832, 835, 2098, 836, 839, 2100, 840,
           2103, 843, 2102, 844, 847, 2105, 848, 851, 2109, 856, 2112, 861, 
          862, 2115, 867, 2116, 868, 873, 2121, 874, 2124, 879, 2125, 880, 
          885, 2128, 886, 889}], 
         Line[{891, 2093, 853, 857, 859, 2114, 863, 2113, 865, 869, 2117, 871,
           2123, 875, 2122, 877, 881, 2126, 883, 887, 2129, 893, 2133, 897, 
          899, 2137, 903, 2138, 905, 909, 2141, 911, 2146, 915, 2147, 917, 
          921, 2150, 923, 926}], 
         Line[{927, 2151, 924, 922, 2149, 918, 916, 912, 2143, 2142, 910, 
          2140, 906, 904, 900, 2134, 898, 894, 2131, 2130, 888, 2108, 884, 
          882, 2127, 878, 876, 872, 2119, 2118, 870, 2120, 866, 864, 860, 
          2110, 858, 2111, 854, 892}], 
         Line[{953, 2188, 1025, 1023, 2210, 1019, 1017, 1013, 2204, 2203, 
          1011, 2201, 1007, 1005, 2198, 1001, 999, 2194, 995, 2192, 989, 985, 
          2185, 983, 2186, 979, 977, 973, 2178, 2177, 971, 2179, 967, 965, 
          2174, 961, 959, 955, 2152, 993}], 
         Line[{990, 1050, 2227, 1049, 2226, 1046, 1045, 2223, 1042, 2221, 
          1041, 1038, 2219, 1037, 1034, 2217, 1033, 2216, 1030, 2213, 1026, 
          1021, 2208, 1020, 2209, 1015, 1014, 2205, 1009, 2200, 1008, 1003, 
          2196, 1002, 2197, 997, 996, 2193, 991, 1029}], 
         Line[{992, 954, 2170, 958, 2169, 960, 964, 2173, 966, 970, 2176, 972,
           2182, 976, 2181, 978, 982, 984, 2189, 988, 2190, 2191, 994, 998, 
          2195, 1000, 1004, 2199, 1006, 1010, 2202, 1012, 2206, 1016, 2207, 
          1018, 1022, 2211, 1024, 952}], 
         Line[{1027, 1075, 2238, 1074, 1071, 1070, 2236, 1067, 2234, 1066, 
          1063, 2232, 1062, 1059, 1058, 2230, 1055, 2228, 1051, 1048, 2224, 
          1047, 2225, 1044, 1043, 2222, 1040, 2220, 1039, 1036, 2218, 1035, 
          1032, 2214, 1031, 2215, 1028, 1054}], 
         Line[{1052, 1088, 2244, 1087, 2243, 1086, 1085, 1084, 2242, 1083, 
          1082, 2241, 1081, 1080, 2240, 1079, 1078, 2239, 1076, 1073, 2237, 
          1072, 1069, 2235, 1068, 1065, 2233, 1064, 1061, 2231, 1060, 1057, 
          2229, 1056, 1053, 2212, 1077}]}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1:eJx0XHk0Vm331iAqzdIkpKhokKSibA0aSEkUkpQKIRVJpEEZyph5SuZ5fMzj
NmXImCRRhlQy9BzRqPC7387zfN/6rN/7/vOu9ay9tvvcZ+9rX9fZe7firKnq
+ckcHBxl3BwcU8j/qVW8715IpILV1yABRf5icPGByOfhFHBf4crXXZ0IXLnX
zji3loDl8inOW/wpaLxn9+LxVl8sfqPeJ3OtCG4aabZ35lBwve5El1ZzEZba
p+9U6UqF6ceCE8IiKLjXn9enb/QMZa76C1dtvg2LHZx5tY9QcE5iWL+mqgE5
57uvklGIxt/Hm8NOtjBBsMThAAezEafwnJcMmpaHIknKuxzPMCH4Snwlx45G
XJtxxH5zaTHGhozcR00m+P4OeFZYWYvBfFqGjbOLEGws5nu9YQKnsfBO6all
KPTHVf3GzzT8cyZTe/AuBSIOm9dtf8nAxHCVRXadj1DXu/yH8ycKustEr/Xp
ucG1SSWL1bbEQ4/HnukWwxR4LVyikTwjBZgP3y2VNQoHzTt34sZ6KZgSHObQ
8TAOml5vyrCVLIS5DzYszsqj4OrJ+KKki0fhwitZjo+FaVAydG+7bw8FSe93
vpyulYWvN0R/3X32JvB+m3U66i0FusUPBO9GPcVBp1VLTGUC0Nx/86sdDsTP
J2GRhLfVOPu9cKezbww2PKmXatpEgU3Pml3L99eh0fU3G2+ez0KxO2Jp278y
gfqaIRT8uha3fBEyChTIww+ujS1ZTCY8e3dkk/Hbp3jxRFV3KabiU9OnUT5m
FAxr7GvVsihCZ3Uh0Vf3EjG8Y4eFTBIFj5Q5BUy2xOMtIwVHLXVnCOEWjAsn
9/B0ZMncO19sQZ7Tc/GxnGQQmJQQ9Imi4Nr1amOutBgwFk9d9c4xG4w17AMy
Gih4m+Re/3gwGowKouY99EwH0aGViXffUPBwzC2RkeSInpta7PcI3od2Stl8
8jgF5q2PVO9yxuJs/hdav/S90P1sL3h/pUDZ4L1RqC0DL/kFFu/QSsekBz/E
3Ij/fZs/ZYh/zcFF+y5Wub7OwIczX2wszKKgbbkkckUW4TstCeewyVmY+Phz
w7gfBSbcj08W3stH3gVWJdov0lF0ym7XtFQK3mhmH1ivkopcSwLFpvVGYkbq
Q66cDxScT48bV6s3xEgTxsulh3yBuVChuHmUAnGbc778sr6gF2Xssu1QBPAu
SJIw+0FBmats8e2mdChOD/SIlMyCCPEj5zhLKbi0LTNoWW4mWDe/s4gryIKP
WZs7tuRTkMkzPGUlHwP0rLapZjzKBpA3tA1+SkGC/OM9738mAI/rO9VZDalw
c8qRvD/tFGTznPfxEgjBehUX6qNCMtqqi1SEDZD4nKegcP9nLNZHP6r+rJOK
02/k+ju/oyBnUiDnEKagn54F18KTOdgqpzGdt5yCA8s6eL/KxOBiK4k9G8Iy
UX3fJdv0ZgpW1XFSSV0e8OeKdmVrYgiq+w9I7h4hcZiy7vFgXzzkaD5atAo9
UUJY2fHgEAVF3PtDOn4Vg4CohElwQzKoxKtWNwZToMTxfkl2fhnUzeXhVS9O
g3b9dFNOawrSfnyI3apfCe6dRfFtL7OB+ZnTSHc3BfaSL13uiZeD4WejqcMx
qbD03acNpy9T8PJEoaaRYjEEOHBFVUolwdmvF+BeFAXlmsemObumQ8ERgbG+
o04w1q3q0PCegtTpQ41bq52guPDqlgU9DhB+tGlKyhg5f459zu6PyWgvKOEo
kcLAp8KRmhtbKRA175+1bn0cJjZuK2jPZGBWmdS74x0UePDG7Cv8Y4v35jJe
+n6KwT2cjk5D38h7LMnM3KeUDpLevf2RPAGQVLp3q1s3BWa7ejtiJpXA8RUc
ntMnJYJ5FHcLhFJwPPlxUZZ3NYypb7hp8CQPZl3t9LWbTcHd+AXX4qc3Qphv
U1GoXRHIve+1MzdmQrLspVOVOo1QdThKkW99FhR2Om5fc58JuiPiYvtVGwCF
1T59L02F5td6szMIvn1hqoe0KtXAi7u+6fYdLmjvJlhnIkWB6clEg/UXi6BT
+OxaYYEI9LpwbsHvDAq6mOuPO4S5wNhAKwR/QKz6/FrvEJJ8VIgs4LX2Qv53
QW3FZvmoZ9q/xb+aAr9lHJzcnaGYNseNZ/3raDwarcVcRt57tv6hknQMgJcX
5S+UmXjB3kb/No/fFEwVkPjkKZkJyjwntx1eEw38Zx4I5rVQsMb+1H2VWeUw
U/PmeMfNcpDPizy4YioFss7OC5yka8HSOlrVaH4ptIQNPH9VxQQ9z5h206Mv
oMjLTyuqrQ4WZDk0z7//GWRPm02fs+AlxNiKJnlNQ3jVn5Iv8uMzzNwsdcG0
oBw+LBpWVKf88IBdAbWVxJvO8pXK3BllYPfbTTTisw9++7Hky2QPCtw2FJVF
Dgfho1jta6YFFbg362Log0sUDKystx+9m4rR53YFr+l+hkf2zhAL2kLB9hkK
j1fPzMf4B+sqnAUrsPTM9Hd8+0kdGagdc0jLxKAbsYF8VUXIvWr4VhrBmYtl
05avLHoCsgHXG+Ruh8KU3VpC+wg+2O26nXK1Iw10kldq1+oXwpEXHB+WJ5Jz
lnRxdhqWQLp2E2PWl6eg8Wjvl50SFDhn3LhYObsKjpQum3NZuQH22hXORWUm
5FOte3eIPYXLpXMdnu2pgdqmE8cFSpig5JcuERvFAK7edQqlg/XAXb3ERucj
Ezj+3/8G2fbIske2fQHtH1n+ke3fjj4PqtDnQfZ5tOnzYzZ9fjzBOr8j/bx4
nn5ePMx63l30/eAa+n6QfT9r6fuEYPo+gX2fUvT9Qwx9/8C+f/H7vs7bWvzg
x3zp2M78cmDcrxnaTd57iX90QV9OBJROGuesO1ANruvfB7fuoECbjgf0oeMB
2PHAQ8cPsuIH2PEjQ8cbsuIN2fF2lo5PLKTjE9nxuR6Z43+oerwRtHCNw+Jy
DI3n8Xxlw4R+jdVfnDLL0T/1VPGxvFIs5z132WopBTPpfEF9Ol+QnS/pdH5h
HZ1fyM4vVj5CFJ2PwM7He3T+Ai+dv8DOXyad7/iNzndg5/vC3p+GquXZyKF/
BkPRHbQYa25cJX83yavQq7ymEt/d/LzoW64XpN/aKjJHjwLbugJrft7neGBK
54fCwGSUtFN7ll3OhAQar5CFV4gsvLpD4xuy8A3Z+NbhXPP6w5I61Gmsc6nQ
LcI2H1P43sSEPpexhQExxShzQMCuvS0Jr+ZceRkaRoG08pvylsFIDH3U+X37
aje4BKFR9iROmgtWm+ltdoSM7oTr+++Fgd6jaOH5pE6J03gOsTSeAxvPTWj8
h+s0/gMb/5GuF5hA1wtk14v99/sC5sukIaPx6ofd92UBXPamvyH80M6tynaX
ZzEaHfw4yW5tCpq+qjvVS3D+qYuPv7VgOaYfENyQHpiJ0751GG09R+pdJb9L
XH4lru7u2fzTOhPte1v7lBQoOEjXR6yh6yN2sOpjAV1PcTldT/Eoq5463izY
LrkwAp25pwy8snCHTo57dWE/KTiyJ9VFYfgEho2tiPtdHwkXcl1KXcjv+ftD
1NSVYuDwDOlvW+7mwA5Xro0/a0l+mb2btuB+Anx4sOmsEzMTtr5b8fpQI6l3
NH+ApzR/gP/wB5pvQAHNN4DNNwJofoLTaX6CbH4SzHeU38kkHVsvl6vJNWQg
/7xf3/9UUMBIytLxYhLelrdS5tjaPDQK/x6wLpPwhLouN1n+TPy2NTJmdnwm
7s1ZVM5XTMFGml+hJs2vkM2vItL+8jGIp/kYsvlYB83f4Nfiv/wN2PxN98Za
Y+tHhWDYI7xJZ2MW3Pm5p9qK6Bq+u1tFvh8uALnaddOMMBM6vd247sdSEHuw
MrqhNB8OlF1+fmZfOhyYpBy4nUF4Js0/4SLNP4HNP6/SfBUEaL4KbL5qSfNb
2Cr5l98im9+GD8xs/rAqCUev3dq+8GcO3vzMy3eN3I/Uzp4CaYzFqtyne19d
zMTTFt/OChE+duH3X76NxjTfRjbfvkHzc9Cl+Tmy+TlF83nwp/k8sPl8Fc3/
wYDm/8Dm/19ovQA7ab0AbL3A0hdwh9YXwNYXjNvatUvFnkFlotkT57BEsEuO
9h7fS+5fQVxG1fgpqNqVtz+ffQ+mizw05XOmYKT4xM4fJQzY92dlnEj6E5zs
9vEs90cKqjV7+VTCnTBfknruPjUe1z/d2NFMzv/z8V89hYO0nkK2nnrpvHL7
6uRIvH6zdrZdWyr+7F2xL5HwvevvwzX4f+yEfp1pC6f1huFhj6k9BgQHNtH6
DkJpfQdsfTeN1oOwitaDwNaDHrR+BD9aPwJbPz6m9SaI0HoT4lh6k6VPgZr5
V58CW5+epfUs8NF6Fth69iatf6Gb1r/I1r82tF6GNFovI1svN1CCU0S2JIGb
+p67p2dWYOvyoDXhRgT3VG4GVHM8Ri4hTpOE7gJcYVf7MraMgk5avyNLvyNb
v/ut8a4YCYvHbZnXH3Z3xMO9Vz8buokODc99U2LqHI0+j7OeFD9MAUXhqh2b
yHsRCqgJ3GJjAEGn+tsW6hRBIN9qt0yiU4DZu/vaxmDoqqq2uPGkHHasXCts
RPDKy26g5nTQE3QIs0/afKUU8nkiEseDKBA8xt9yWL4ApRft6Rs4EwdpFgN3
zpG6kzcoOJASXoKFfwZ891/wwQ8Pdu9hED6vZ2OWmP2zGMdUqYuxNhHYwr/G
Y3sMwb1b2YFnPxdhs8bH/Q2WUbiYX3k1XwoF4wf3eBltLsILk6dxv7eMxXyb
ui3v00i9Ezfpq3xbiIOZHveeL4xHCymvs0nZRJ9aLTkcUpqPt6o8nzqoxeCL
+btD60soWHReu3/R/jyMdt1O5b2Mwfm/hkXiSD6qBTLrQy75oL6/y2XFdamQ
yKGV7NlPgXp6jo5Yz33I8xk4Cc154Lu1ZXisjuAG5cEb6XIPbDlv/gyKLYZm
dd3cXURXhnqaTy85F4pF/HnmIZOKwPxxlRIzl+gX985nlS6Z2Ps6xn9xVCrc
0FDb4FVD/i6UHhy/UIDF+/gPbtExBC1z8UlFVSSPFN5dEpTPx54lW2p21nmj
Gcf+0cXEXjJLlhm0PQvvpOtNcY8Lwh1DuhfGSF3b5Od5Q9o0G/Ulrxjoikfi
5qyxHrcXFHALCKmFdaXjyoi9P52tozAv/tL2cqLHg4YVphddSMMzTwSbjfjI
/TBvdp0gddN9g/Gi0j8pKDxfKW3EIxaVDgxKM4jeEcZvv32aSb3nUsyLfRaJ
QRI5msNNFKxvWFYt/pDw/pEV5kVn06AmoOP8M+Jno7voT1/5ENj2uH6zU1s+
GMldCw0l9zw36fe6jzx3oPPKjyRJ9zS48jvt/TMSnzU9M34u0/bBK8mDIjJE
D066dPaqYx/hY0fGu1tLYtDXrnyIe3849F6K0fQfpGD2t9eNZqIR+HT2LvEp
Yw9gocnwljFSB/1vHFyudy8Az/fpZjuI7QZUzg+UJ/Xi+MfXDCllC5RP1jJx
GLiOazL3rSog+Cx0ZuW5xNV38PC9z0LVln7ofoW7Qp/Yvzt8aq4t0xamaY48
fiAdirlXedqmEj72JHnruHjGXdh7eE+WaWIiuuQW3u7/QoHLhXHXa2edsOpI
HreGfgpuFhfSv8SkoC/B9uY+9Sd41yNm6mWVDHw857t0BrmfZW1Zevt3Z8La
9J8uPKlhYO17Wv1WG9Ed77/wd6Yng0jLFtWu2ATIXNDqp0/u/8AhRltxcBSc
XDnKvFkaC0Vvun8FfaaA1/tt43zrCJA+v1PeRDwa2no61GaS84j1pS1ouhMH
0sY2oXWXIiCc6rtnTc5jeERYKZYzGh6cWcdpIh0EshuTh/xJ/Vomlrm8ZA8D
3LsUrA5d9ANdjqKPVQQ/lRv0a6vWMCD2+I3G8qXXYdmJiixZkhfzS05fH76Z
CYKTsSmr0xylhj64bO8k9XdxwuDkoVQ48MVEx+1HEiZbPJNvIPEWCDPennkY
AsD/c8ekkxk4/mFy52pyD9OFgr8Gc1nj7Lfe14X8C1Hqkov44qf/6Kzbfiuu
BGDtvilinh9KsHfy/Ys3CL41drqc+/guE3onX34Z0RwEhopzrShybzt4NG9X
7MiC8w+mzLp7LgK6nL7bRL8i9dQz0S7TKwfG17ne3GlN7u2kHaOa5NFouq7A
iWmF8FW+yNHgTwLYbAs0lCV5Wv2V4/C6FISlCy6fVnONAfU1XWG3syi42WTS
kNVYBDWhU+6dco0C0amVs/oILpm7VuyqyCqGt3e+nlaKioD6m/caDOIoyO1Z
e5NTqhjWpvYP90yzgrZxNWFbosfPvQre+0U0F1wn5dds2uSHnupdX14RPiam
dYLhfi0Sto0Kvrn+pARj3r3zcSU8c46I/riIiiMsGSnne9NWgj7jQsVTCH7e
9vQSBGUfcJ8O15euL8HL1WnvOOOJrg8MPBU/HAICq3eL2HfnoZe4f2zOM8Lr
Lu5tl3gYC+Vaao8fK8XC48LLc6vIezw79uKazuJo2Jtd+k5RKg0aHX4Ku5L3
GFTRysP5OQMyJn/o336QAcdmX5b9QO5t3FJLc499BlTIrau8jtlwWqjI+yap
F06O+9M2SxSD7rcftl+Gk0E36kBISiQFY2IrAupVS2C+9p/WoCYGBJz5eUbK
mwKj5a/KuPcQ3cvBIb7ncCjM+T4mcfUBOc8NMwe3lEIoknIbspFJwcKpJ/+o
plMQw1//rfBlGtxQc4u+N1aE7l9HUkIJT+afdY/xQT8Fspevi/rzqAynPDE3
sbhPcAncPDvup8EWl7uaTZcL0bffyuoN0aHmDEld6mQeKMR7vTo6IxvvtTWt
T0ggOLA/5uH0q3kQyhV7q9sxEyvvjfbXkPerf76jq0Y4CqP6I+5dmZMJrSen
ZTe/JjruZdxON4FU1Cw0yg8cygFDTs73uqXkva/10Fx3JA4zFdE60jMXFuSf
8m+tpGDGEvf9hU+jUHVgx3zRP0Ww+IHhC91kCpqer35oGKIAEcfv3tx5pBge
h46dRfK8LhmFcjbGXtCrt0f+nHYOOPfpe88l/PDfdL0rbY8se2TbWzT+9Y8x
tH9k+59EnwfU6PMg+zxInx/y6PMj+/wL6OcFDfp5kf28l+j7AU/6fpB9P+L0
fWIufZ/Avk/W/SPQ9w/s+3/jV5QkMSsJb/a5MrkMi0Ch1nVwNeGx69WKBTr1
GQgnigXxQBm8WWbdN/keBVF0PKAlHQ/AjgdW/CArfoAdP6x4Q1a8ITveWPGJ
rPhEdnwuLOp2ZMwsxvakSSNeoSm4qjhgpSeJZ5knZSezJbIx5M3FWTnTsjDr
0Hv10RzCu+h8wWQ6X5CdL8fp/MI9dH4hO7+S6HzEajofkZ2PPnT+ohidv8DO
32A639GZzndg5/vRy8mdXmGXMfxVfWHc8XJQGORukLalYKCp5NPXlGjsEUpp
zm/Oh4vj/D/++S49csZCduxpLu7PMHuuZxIAP66Wz1QnuiabxiucTeMVsvHK
jMY3bKfxDdn45u9/u2GrezHOjdu20HhONM5omn9XkPyeXLh1s90WxMpfUxq6
58ehcl3/t42Ej3Ut/MmlaJ2HAu3udet64/DUpAX2CgTnx/cITZPZmYvP6vWC
DSJikUOIUrEjzytL4zka0niObDyvp/Efp0/5i//Ixn9lul5AE10vgF0vzOPN
xxMiXKBzxqcNcL0I3sp5bJtP9AVcqNOLPBuJ2/qzW90XZ4KF/uc0ecKjnjjn
fjLeloZrG8+benSEgtPb0GkdpP4uturyXBOVifrBRs9H5rmA04gyHw+pX0p0
fcQHdH1Edn1cTNdTDKHrKbLrqfgSbm2Foigc3tHCa/HlMZbJLX9zgdTflNzS
NG/vOOz3sxqYWhyJQvnhTQ9Jfd967tLVO6pPMDek93JMSxQK9um85iD2RcUp
CatKY/GzR/Qm+SexGKnp5atB/u5Omj+gNM0fkM0fFtN8AxVovoFsvvGd5ifg
RPMTYPOT55o+Cdb9R0ApkHvTmhYGjNdI2j/tpWBw5tJ9ynt04eb+aznK5jHw
zNXrSth3wodNbWcO3XDFFTvKI74/CwPVm6GWHr8I36P5Feyi+RWw+dVJmo/B
FJqPAZuPRdH8DYRo/oZs/sZxK0n/NSMaRg9Qc2Y+v40zjeHbT/J3fz5cwtkz
NwIsVV8Zi9g/Qbkzh6Y3fiP80MzmvBNXCBjr6PT77mag9/zvT5YRnilB809k
8U9k808Jmq/iFpqvIpuvbqL5LQrR/BbZ/DZxxYbo2HMZYBc0OvJMIQKcy6cJ
fCQ8Z1a3dzteI3xp/tKiG5akzjb9Fr9L8t2P5ttgSvNtYPNtFj+HzTQ/BzY/
F6f5PGjQfB7YfH4zzf/hEs3/gc3/f9B6AWpovQBsvXCU1hcQSusLZOsLN7Db
F6eYAZ1vPzoIaaTgJaPksBbCQwZP+DLTQ31hepHm6U9bS3Cu3YeGcySvI3/I
cMyTv4hp8st36d0vQpH7/KHXSR61fVu/4Vi+Dd6+KUkpTinEvcppwork3hRp
PQVGtJ5Ctp5qXLDPdtGkfJBcJv1M2D4Ktmbxt7SVEz9UTsfxXQWwsWQazzZG
LJwbrK4fJPrxJ63vgCfrr74Dtr77TetBOEjrQWDrQQdaP8IzWj8CWz+epvUm
9NJ6E9h6M5fWpxBF61Ng61OWngUxWs8iW8/G0voXbtH6F9n6V57Wy9hK62Vk
6+ULIzcFc/cHYNaeR2FRonkotZIhurCegmEs8LYPD4IwRtHkDeey8EKLy/l7
rf/R78DS78jW71GdH7/5SMaD7eFa2c/Ti0BqLbSXk+eNc1BxE/tmhovH5n31
mpkFukVX9CLaCZ48OPfzfL0rUJk1qRt3ZUNso0HlVuIfkg/bHH4fA3vX/raT
Ck4CdV3G9TDi/9ZCL4vecQZyaBkOGq0Oh5R7z1fHENzoC+gekSb1fsrxrec7
pX1BwOD0xjQSh+tT19+LvF6GNacyYs2StXGOqSHDy4fovmZKSfB1OR7mWawc
n/MIzYwNn28k95DJUWYid68ax+9YT9K/EYqbP8x0CJcl9WiruHrEoVp03bS5
dPPeGEze/DFhxnIK4uPjG1X46/GLqnaRsEU6Sq8Kbj1GMaHHY6dnzqIGtPI+
ckhAJRuPzxKPdmxkgqp2e7Dp23oUt3qsqrksD88XKF1+UMeEm7z1Ol/ee8DK
ozYbNs8KBB/PK1Qh0XGr1z+YUnLfAt8cXbNRbF8UiOmq1QgQ/WiqdPl8z50E
yG1y4jovhVD2/ZDk8kyCY3mKicr363GD0A2GkWwBzpb8ePlWDRMOla+Nsb/n
h8+fqrzgUH8MRronJBVHiL6gfL++olKxK2Gp148QKzSW+2CfSuL/ubdHNLpV
4X3R3QbespkY3ffy8AVyD1+/zPl05U0Fns0qvPNHKwONKi4WHz9GAae+qJLP
cDp2R51bVuIXhnnPZu1fTHBjrRvDm5mYjQ89cODX4giM2tYic4e8F6OjNnuD
GktRoeiRwU6hNHyyK+rGmB2pF1sqZI9pFWPQnO6+aXNTcN94vRBvBOGx0o4R
r9SK8X217OMQ0wTUrn3UUB1NgfNMmcGda0ux/+yTrkCfRLRdPNOvhfAiAfda
CztIx2ld61wDc2zRZqHBn9EPFNy72hef9CIRF2kF7DseYgmDY1dMB4kOVfSQ
tpc8UI48LyxjwhJScezVTuP5piQfg9K/996qwH23eoZrSZ2X05cTvaBK6tdD
hg3edMDuqy/fF3lHwqb7ZjfXk/dCnQ2SFZttD7ecdIcM/JLg64OK++8GKYie
HfZ2lUo53uOVXDO2OhOPl0Zra+kR3D7g279gSTlmjc6rUebMxtdW2cuVdSkQ
3ZF07SvJ/xn21pPe1GXA50lHN4WROtja35vwoD8cLh++tGZZMwN2Silv8STx
L5a7PqJLrRRXejL/aC9Pww1BZWc/PqTAcl/3Xb7fsRChH1A5+CYVtBcdGjPr
ouDGz6eNNbt8sIbb/NLP2HsYJ+HSkUzqlyurX/9sQr8+49OqcFdDLzC+PS3K
Xi8FUsxPurqTut9rbLGiwb0Q43f1j/UUJuBXaXmTswT3Rs/sZEbvicWj2Q+7
Tp4IwSUZR31effnvPEDNBP8hj7YaHFyRilKmTbMYgWno8cVnqd1LCnxZ9g0T
7CvNQx4Jns7EGwfmmj3/5ovvHqlaGRA8kbujwX+Bl/DXI62flX1dcTIUZB8i
fEb6mcBFkfkMvK0ezJkQkIG7Dmr57q0juMqaQ/CdMIcw3DDz3dfoLNzcrHgb
czMxSUHwnTnRj/n/Yh+THr5RXiYePaeOBdrY2mLC/Jqy+YT/nHug/VpU2g27
Ak6vkNAPBIWRSKXlf0g880b58N3JRMvuZS8VZmUiX15acG4xBSr/Mv8Qo2y4
ynVKPuY4bmMeZWZi3KVR/QSiE9X+xd6stirMYtQZjs6Jnv3jeRwkV7ipMYdJ
fgmd2LJxazRMbRcdvOyUBupaOu3hJE8ld4Ze4m7JQoa+BpenXhq+5RkvKS4j
da2WnruYevV/5y7i7U7VL5JLx9un4sE6PxV/V9WZBJC6zMGa05gywV75pmnt
OoFY0J83O6X2eRrkOSqX3n9LwVve3UsLH6aC8O7z111XZcMx1+95IkTHnbrW
tXrScCrOm503uLMnBZfuHRrvI3pNizXv8WzCvMd4pbGz/9RwdHww9wLjcxhu
NTYVLiT3f5plXzTBfqWkpuGqy0mwTHuhQKpLNqSK39ZIrKagYIun0ePmOIgN
bRz+vS4DtldMnRLSQvjPlijR+nnu6Bkbqeow8xEKPhxd20byJZc1ZzKHNWfC
7ottzvsqT5nHwWydLTKfN6XB+uUzO76T51W6e1Hly8UkNF70bMHQSQbyF10/
dIHwqF2eOUdmHXuEF62VPF0l7mCPmM5hj7F/5nDouZqnrLmae6w+l8/vY/pr
akOg95rS7+icEHhjV50p/YPEJ+s8Syac503Kda9pQnG4SXBR1AddBtZ+Li1b
S/ieZnBSztXJCRgu8Vn3pG46cij2V6SRe17S5m+q5R0OqV81eLvjwkCltGyS
K7nPfaz5mWrW/Ay7P+h5/EVW3d1E6Lx9scNZNBaOq/BYW5G828+yr5lgP0Ww
eNbkd7443yHr5SHdZOwx9fugw6SgVGbF7tidnlhxfqFM7qQk1HmYfsGS4GdS
11Nti8AUELjv8dwwJx72mZ3clkZwIJE1t+M8YW7H0m9kqlhbHsz/nDDrXFgW
8H2fem0t0e/J/zLnYzVoJSJtFgNZqWeXvG02wGU76kofE97ev3GOvaZhCkgk
xpkPGNjDzMkaJ2LIOVeqaL75lJsLUTF9gl+aMoDrvL2XNNGhtqx5oYsT5oUE
jsVu8BPNh5RGL7/wHZkwu6e2TiyZ1COWvdEEewW+1rPbCE/eNmTuMudJKOwY
uDZrYdU/fUlVceb5p7BVNI4ZmM8AM5+apksWFBheOvz+OSMHRtPyT7j4ZIB4
74C9ItH7L1hzSk8mzCld94t4HyKZCcN7+58kxjNga+aUTUDiv4I1v/RpwvzS
l0H1cAn7cpDS1RAod0uDH4s1pjfrU9DcmDTnyeYqGHU5dFw/MxtWcfulPNlG
wYo/3MtOZjGg3HFD2SylNHgV3u6RRfDhKcv/wAT/+4TjVutPTgEXzidFBaYJ
ME/doVKJ1LUylv2bCfbJmwV5wkPqIaR8Lb9ZUz5cWRT5fRPhOdPhY/wRq2hQ
3qpqPVsmAVbIxG/r7SP1gjV/1Tlh/mqxTKXeQa4oVHuzY6NhRBKOVj28kkX0
45BqbsSCb/FosiFjmdbnVBQ+zDHnH5x8f85E5+ycBlKPa//81M+A+KffV+58
w4QfKwX54qIe4Nl9BWHhewIxUrbtpxnB+RuKoR9D9t4FAWt1Wy5DF3xTJ7np
7T95PeMoY/f5BsifN5tf6GQmXBEuBDnCA/0sdHf/ftUAL3l3ne8MygLJdzq9
Y7lMkPiYZnG9PRzEd6YtaOLVRrUSJennRLdSh/YZykIGmE4VXey5KAy+2e04
GkDq4BBjQGrQrw5q35Y21z9Mg7583Nr9iwlVpVHVJ2fWwWPtNXmbi1LhdcLe
Fa3TKMjRbQ6aKVYEQzbSF4ZbcuBq/89+aS+if81Lsv3LS2FkoW1LnWkmVDUW
L86zIfromUtrWdUzuGSZp3Oo9QZ0/cpTMVakILjRzedKZzF0RR+tfT73AQY9
XJW0iMT5yZoz6z7GVIDqs1SDId1cOCi+39ViHzln1R/7Tv0a6FVvDJ9/tQjk
neVcFjKZcHKcN10gqgh6bihNiV7nilM1+5tsSTwbdYo7OZcXgMQmwy07ywNw
d+P8K15PKfjwjIezJqgBUkr4H182LIdDzNSSxeeY4CUksGnY4jkkndSONNUt
gATRUo5GdyZMPWxw5FjBE8j+nrojQiALr3231PMguoO7seVi4UtzOLVQTafD
MR1/R1muvE14o02TUd+g2wuYXNoWX8RZBGbXr5zbIcWEAJ+PH5bVO6DDSOOB
yCfpGBhffuE5ic8NG4UO/xgPhJVf7CV55/tBvPMR8QRSBw1Y81fbJsxfKdF6
B/VovYNsvTPTx1GyKfcFuN7WLTDnz4PqR4GTvOSZYFso5h08Gg7tVtuqB7uj
wOZZr4Yr4Vd3WHNc6hPmuISuhMy76pQAQSIfd31JTwQ3l+xqU/JcGqz5rsQJ
813rz1yfb9pcCx8dz++4Nh4Cnas2SCUuIfytu2iGb1MNbOrVkJC3DYXyCOH9
XmsIPixqm7+gJweOzUoU7k9JA+p0y1z3Aoo9fwVJE/z/mj7vdveqp3D3R0en
rlY5tFumxVXPIfX6X+bN9KbxbujMewbzL8QsyxLwg7plkasnHyQ6LjlxVPNe
JVjUVc4cHvTAjwquK4cukPfFv84x8Xk5ODyBMyXcVUTP88sOtjHBiTW3pjxh
bk2nQqAn/uVT+LTv7utmqgJOrThvt/3bf+bNwJQ1z1bHmjezFrIUbP2eDfr7
FzmF9OTg7lIznfQkCsQvdBw4VxALJsHvdoVS+aiuUbFrAeF1u+Z4bjLeXg3z
8nV4r+g9hSlbFIaiSL4XsfxfmuDfMGD0XZPYczD2DdEP2VsHdUsMNh9/9xlK
WfZXJ9gvS3xtcOJTMHiF+/u7Li5CueHy/C15pD4KD1wUjQnE2ELrs33mT5HT
IWbOrAcUMH0vvlprWQ9uw5s+vD1YD69OL/Hpn8IE3X+Z0zu4a6r/8NLnYHrg
uaAcwYM/yc4RXaZMOMeynzzBfrsvd431+Rj0UV0oRnmV4pqlKxNWE93tsE2o
kQpMwQdJe4MepZfgNW/OxEDye+WsDamNY/VQ9oVjXM4lC1RmqprOaWHCpL99
g8Id9P+jdrD7CP3FQes+NMdjrEDGaT5uRCNB++Vns4jOMmyPixnLgPkJEl8+
6hWBVE1r1lTCf8JofY0XaH2N3ix9rcrKx3UT8tFoGuNc38o6aF2j9aBwVjCo
9Nqe5uQjepw1l/jzEz2XOJ31vDNEtq3SmpILC+b5+q5f/RRchC3LTp0j8Wwn
WbpdrpDwJS7JJ03lsEp+S7Da7n/yXU9lW1kBuN7UFnNrT0cdBr/gb8JPtrD8
j37637lHc0W+ZpeuLPCPP2+9YlEavrAaUdMhuJfMmoc0ZM1D1rPioT2B2e9Z
Fg8Jg0zXgkflYOBwg1PfjIIB8QvL88ZTIFr/2/4nI1UgzF9sy72HAu/A/LJt
ZekQpeys357CwGFvkRnz6v/r32CCf067tN+pM1LwZ9X23Qf7K9HwQGtQC9HF
2Sx7Vr4gOz7vjJevFtNKB5E/r0ayk2tg5tQtTlMWkvtUtr3XcoYBo36XDOZ6
VEPjVvmAWWIUdLVfeNk8hYGW8b9zhGc8wzPyeZuGgeQ1a86TNXeKCqz8Dc8u
PPzicCJ2/n729fvRCjybLdoua/gffMNc1vwnG0806efFWvp5gf282+h7xkL6
nqGJdc+KgTY5B7Uy8bJE6uCc+CpMDpu1PmY78cPynzfBvzb93rGefu/Ifu8n
WfY5E+wF6XjATDoegB0P++g4xPrVf+MQVVlxuICON1xGxxs6s+LNiTXXenHC
XCsrL3ABnRfIzosHLPsLE+zj6XzEJDofUZWVjy+M6+Y94E7Dl5ni3BwX8nA0
KCl+VS7Roay5WZkJc7OedL6DE53vwM73OtoPVNF+YIzlZyeNM2hF4wyOsXBG
h8YT8KPxBNh4krDITzN3rjl8DJv32VWrFOrcpUKzQiloofENWfiGLSx8O0vj
KhrSuIr1LFzl09C3SI4Jw5Z8o9xb37LhEMddubsvyHMdf3g7/H0Gnu534olz
y4GWawm8H7MpeG1wxXWLQi1ahcQyc2Iq0CQvwq/dmwnRN7j4xtTL8eMFbfG+
jqfYkhrz6z0XeV+LTtwRfp2GJg0fYsq3FwJ/j2rfW3LPs62fcCUWl+OcBwc2
znjpDYf6zl0IIPpo9rnST3WqFcg7tf6D6q9y9DDkT7SjmNBnYuEuGPEUB94/
6TM/WIaW20usRoUomMdt8nDF7Wq0zNtxaOYmL5SMWvVdgOSLHV2vcSpdr7GS
Va85Fv+t12hB12tk1+v9NE/AlzRPQDZPWEHzASyk+QB2sfgAi5+gJ81PkM1P
fGh+gpOs//ITZPOTVTQvQkGaFyGbF92m+RVOofkVsvnVCM3D4SzNw4HNw0tZ
85/FrPlPti72H3V1/TF6CbdpLZCJNcgAoVWJsXJER2xnzc1ydP/v3CxXyd86
Agl0HQF2HVneKJTovbARD05W1h34jJgxbcWVqyQOIfmO0+9zwfg7KVNo+VgW
yPEWyBxtoUCO7f/D//o3fzk6LV4vC0cHI0wGjj+AVlUH62VvCZ6w7V/+r312
eKt+xPbn+EzT2cIzoQK37OTyfCvHhCbFtqc7uerRv8t5O69cKS7i+n4jIZ4J
iwVrIEwvD6tOx8349MIYZygw0z83EF3JmgfWZc0DX2bNA3PMufKOa2oFjkcY
eF9P2oOZCw+kWllR8PBf7CcfTe5X7qrEXcupI0WfClBOPvaHC8FnHyUvz+vS
ZXg5VykizjoP83d9UNlL8HZGGMXhtKYSe6t92nfuu4n9M1SUPYwpKGfNIUdM
mEMWNx5enFVfiYyq15vryq3xtW5N/yXyezprPnkxaz7ZgTWf7Gxt85VLJx/r
HO36xd6notWy8H3niS5wkxi6ZumXgoWtPKl3SlxRMPNtyqvPFMR1bLq8rrEe
j47MsJx9MxW1ZMtvzetnQjbL/8oJ888aqRaFFu8aMKfFhuM3ZxaeX6iCGnlM
yP2XeelTPRwj0tLheFmuIKf18VU8zM1vKkLi2cSmdrKaig2OTj30TCbwDlzK
G9KwGyc6i9Z9WEDrPrzM0n3HWHPX9RPmrj/RehOHaL2JbL1ZyZrHFmHNY7P3
mzxoHQrLaB0KbB26kNa5IE/rXGDr3FxaR2MiraPxMktHV7D8S0zwv5/+TgVb
6e9UwP5OtdZn1rrok8nYUDaclpgYh1TWcbQkuFFE6yPwp/URsPVRAGu+ffGE
+fbvzBNRQ0urcWuOVF61Vz5uONJZXzePgrIJ52F/1zru/ePMzlXpuNB/aIGk
Rgoe7d819dVL4n9PQsLY8mwU0Fb3v2SQjsdNvCt0CQ9/IBL+1vdHBX6Osbqz
JiELY6Uut+sqkXOy5ti3TZhjXzpnUtCtGQUIzQo1HAKR6Fd3T2hpGQURLHvd
CfaGgsZK129n46ueoJi9xtmoMCmv9G06watQuxlVujmYy3dP/ihPBqrbnF9T
Tvi54gOvk+HRuVgqm+NgUBCKfCKNux3qKJA/QM/P35swP095Xl1uFxmChyqX
+kz38wEOH/VrCb8oaNhL2wdMsP9s4PToR2wezmkuSjgZn4nURemZMUSPb582
+WTw73yU/cHr+CQyE3+vbHrJEU9wYxeYQLUXun5bsbUuOAwmJ9762k38hLHm
9ndPmNvfUP4jgDfJA+c3907+rRYKp8+nfhj89U9fm57nb2PN829jzfOfquxY
va88Ba0F4iVvO8XhioKyO1oEn5H+fojd9PdDZH8/TPiVXDJ+whduHpGqj9aO
hZa9ms31wwSfWf47Jvj/2LN/H19pHOzc2pnxuSwNNquf4Dv85r/7Be8n2KvS
3zmxjP7OiezvnJX091X8QX9fRfb31S76OypsoL+jAvs7KntPoXzCnoIy/b0X
dOnvvbCc9b3X+1/s3aX+fmcGGfo7MwixvjN70v0XtKT7L8juv0zWPLH+tHY8
2kZN1Uhano5+U7dGfW4lcSL39zsYbqG/gyH7O9gcCe4NvL8iQOPSw+qp98Lg
5Akx81Jyn2I5TKmZ0Sn46/rVlWICmVjcEdo6TPiwMONoZWNPCi5evub06ups
TB8+0mZXQQGYfVoSeiMdXArefAmzZIDA+YKmf+ZzGqQXvN1onwZOC0p5IlYy
wCHvvZkN4VFfvRgqG1Wjcb/Ar64xhww8Ydv88zI5J491tlDc7RjkE3PN/7M/
DT/2LT2uSur7h8Efa+37M0C0zaSG83kauO2X3CNXRYHFzQQdI64cUHgz47Xl
1Szg233y4OpMCtL2hKwtmfsIb704zfdWMQ6dx3t1ZpH3yHT823+BVrr/guz+
i/pHDn/OJ9lQb3Pg7S3fDHAXmJvByCd4eEae76xIDoR7JZ9aMpQO/lqWyZXk
dxu6vwOX6P4OsPs7q+l+E9jQ/SaYwuo3cZn/+hR+NRV21j3nvzueDuUbNc4c
eE6BL93ngvV0nwvYfa4Uup8FB+l+FrD7WW/p/hoE0f01YPfXftP9NThD99eA
3V97QPf14And1wN2X28l3R8EAbo/CBtZ/cFTdB+Z6LS/fWRk95GvH8kQMMmL
wWA7s2ap/Rm4ToknfDZ5XxuXzBJrd0tEhRuvy6oIL+536BBSaCI6V1+Qjzew
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
KsRYTflsNT8Og6a5K70g9mxrPm+iNsSCPVfXGO8Yk4LjU62ELlawwf/G9wnX
/D1hmk5IzV7bfORuEw9aGcaGB1Ibo4qO2sB7bu5NIQdInnHRpDmK5ClPHKqk
1k6wwdnjBK2uTc1Hc5GstLwYNqhWb711gM8KLyT9+MLtiNgfs91zJYkDeUYN
uNzKjaC8eP3EMwE56Mm7eioficem6Wev2XNYG9azVWxrjmbhr6CsAgcynhI5
kx0yo+4Qki43YJ+RgJZPJ2mUkfWmH/5Fr+VONKyZ9yLJ81MejGvrbb4bSPLu
VT7cK01j4ZzU3VJhg3xgycwVE/AmcfiRLNbBx46gq13wNDYqD2JVx146RPKO
dVX7qnxcIvBp59TcrrXZEGSl07yN5JsnaX2TT7S+yVVa3+Q6rReTy9CLmZ+2
TCWGpwS5M/bssch1h/rrSp+7DNjw5WSduv6ESlx8tcnF6aQzpj+/t2d0DsnH
rXt+fdCowe7DQpM+/IjFOnzweW/O/3RkJjB0ZHj0R8qmnK/Fwce/b6Ym5qJG
4jQb16M9kO+vMvO1YzVOSwplp33KxcFQN/Mdvj3wqN93paROGQ7//jhbcW42
Pj9dwto2laxPWl9mDkNfxn5j4uKNK9LwR5fu9dQkf2z0vHGej6y3ZOMj98te
++AtnweL/PY6QVSWRdH6EZIvzL4jWFnjBa9zj7WpEP99vbOv+CeJ0+ZJ6Ju8
Ok++S89qpCw1F8v3bXvw07IHZg7A+kLJh5DYeiZo9rEUqPy17lAH8Q+zTfKD
D4iEoWKq9I39DiEgtHB1wnFyLngqmIl2NT3H90LrBRYNpOHo5Ncf9STJfD2N
Ukk5koW/59RUnio6gDLeOxKdK/43X0OM+aowSHHPUy/FW7eiR60zQrDInHvd
+d3ED9B8Mn40n4wifU8vbemLLFv+CjR84WXZ28xCjYFlT1UF2FC34GfDe/FK
dHRNONR5IA1rsywiub72wOCn+qj+D3k4uNkquo7kK33Oqb0vPdgw5QX4L7/H
wov604pyMq0xYbfXj9PkvOih9W7W0Xo372n+6gV7Q+t924oxfqGX08K5SXgi
6NsKy4NsGMe6VjZbvAA/+6+a3CoXj08ttox2kvz3abTHzTKx+9B5Kv71ZbMY
WNqbdLqCnGuuN3eoOyzIQm9vgZLWk8EIfL4pb4rZYE3r40Qw9HE6vXwHboy/
gS8cXk1d6hIBk+as7HlKzs1aO6egSsl8fHeGVbvhcgpekAiXnPqI5H0egf4/
c9zBtrkrfmliLJjN0c2cxiZ+rCnPu8fQB2ZFNPVYrifn3oyufh5yrn29eCjK
0Yqcf83BGnH2qeDL+rWhicRRJ3kEPga45ONDVvum2TPi8VDXpvNdxG63pqdN
W6oWjLIdIdF3Xe8jz0npOR+/kd8vTVO6PjkOq+XVddzMInCd6HznInJ+LX5v
J2t8PAn5WkdMrTKSsGzZgYeTiP9X+ofOzsJB7b4tVxEdRI7ObEgj+fFBz2RN
4sc0apMyD3zIwXsuA3V7u5PxrGC78PMQNpjHJM/4kZaO0hN3JorpkHy5Xc1c
g/gxZY/PHz4OeEFX8+GariQW1C54OqRO4pAXtC7Pr9n/1eUR3JBy2R+dsbNN
TMVR6Aa4urqf3Ufi8/sFOXKVY23A6IGbA3z1A6u2+Gpfsr+kxWXGSi8JgujY
OcbnGiNBWHvtrbHEzs/+odfzu0vudZZsCrydwTfY9zQVnDsarw2SvG/CXK7Q
H4UR8FEnM33mqxSob5p5u4Wcd9F7RmUOnUuCdNWf8HV5GkSnuGTtIN91VqlC
TlCKBcOHh86VvkmBIc0TsaHlf/jGKV6RLgavyPqOD1E7rcJQSCY+em5vPLoa
F46eIt/b4b6p7lB2DJqUz4ut00lGrRQJz/vkvC77zaf6c3Ucpus6lovEpGFK
id4M51Jy3tF8NQJMfpv0gosbdU9A/yI5n9wXYZiv3xs2m/xvJs0HUkDzgRyn
+UBkbJwdi2IDwdVhd2Osw1N8u1DsxnPyvEz9uehg80Qw3smavtFVHVRP3XDd
SvJfA1ofR5ShjzOH5uVgMXg58mgelYUM/aADtrzm2lMLQabqVtCZsgQIXpSh
YWXDhubcV3JvnIqA7bmh69beFOhQuq48fJwNn0Q6vvU0FUNF9QNVWZ5UcA/w
eZmqygYbmvfjHIP3o3cyP5eedT6ITUns3GkRB6cK2NuknpL1RvNs/GLwbLSk
3BTd6pYJY7pdsmLvBUKN//q+TmLnkRGVtrF74qE4Dn14bjyANNNFcUk9ZF3R
37WY8V2lWfUjtl5RuDPmhIdccgLe2THOXpTkXzf6fWayenyx7qB7k82qOFTc
X3Z4Gonz7Whei183/strETHOo/+RdyUc8NHmGjs5DRwsEldzfekBi8JZmoa6
D2DyhnM3fN/5olNWupM7Wf+G9LxsYszLgZ9hry2n5sI59evXYUIEqEpVs28m
syHEfp7fSFoy9Ele9ObyD4YZIyq/i0m8vUy9k4tdUwSznNcWZwokw8Hu9jfX
TrAh3s0tqiWtAmRv7389/lcWrFj7rLbjYw84JSk1SdiWgNyDxQXpB3LgUa7y
D+NV/+Nj0WHMC0cXKYChi6SSnCEooVwLomF2+xxD0kF5/YXDh273gMxcx/vn
tWvgW8wQj+P1JGg9+U3wF6sHvtJ8F59ovgs5mu+Cu3z5Ar6UDNDeGMn70vMB
qh234XevZYOLyYdH8S5VsHLligM95eEQaG4kV/etBz7T+kofGfpKO1l7e8fp
FUD6NR/PS9/88RvvmO3PSVx0xcNyntv+aDAt7Tyjo+KE4fl12qLkHFf/6Gu0
Ti0BvI6tnvqNOxlZNtgFVWxYIM6/7853M5grh1kSUxCTxl9VNCD+R5v9Snrn
tDrYeXe1hK5oOogKisvMPdUD86Q1y9/K28KpnsMrN60zAPgle+dPvnzo5SVu
q/fR8Gk0S6mL5Q9TV3y+5EzW4fsOB2v57ExQ3av5yeF7IrwvkrkTnMIGMVqP
aQpDj4lbTiii/FIZ8Ol9VuvsKYAHiyar7X3VAwnhgT3Fv6rhtoJu3WWu5xCe
sYGrd0MPXDCzj1jwvA7q3ial2/CWwWwu3lf5UV/Ae5WFxDDxd2YDKa0PbRPx
/q7T9UDOzU20fpMfrd/UROvp5D9cvOphShmMK4z2rcizA/W+A6v4t5F163Gh
XD/9GYw2zDeM73FHjVAdpze2bFj+k+2ceyEbGo1sPzXIx6PzdN8LPOlsCKB1
nZwYuk6i4y2v8r2LQe1ZkzeKzivFzSPjNz9QYMOH9aXjDUtSsPFC64ge13Pc
qSX76qMsG3Y47R1YmZqBJxsfetywf4abfeL9snXYsIEe/2N6/M30+PlXDK/W
/xAPdftLx57nSgfxFdd0G4tInnu6g1/tRBaInmpZ0O6WD9Xh+bcXmLIBLSd7
iMwuBJMjm6rCA0ogI3duxJHf/+PNYOo9nbvjMdl1aRH0V/Q/EjtSAWrGFvKJ
oSSOTWA15dqSfeUTOHRoSSXcCj9lbfe6BzqOKr71WhFN8t/VGy2ES+DUmSK1
dLJPq/+hi1RA2+0Jw26/BScWO+q5ZL3qeylfeI2Vxal3f6fej7HU+/Ek/f65
1HjQnhoPcsZDjx8HqPHjPnr8VjTPgCpDTyqdsg/S9sFM2j67KHvicsqeyLEn
H2V/rKXsjxz7l/iqrPdNycNLmcNz1k4qRzdJt/0Hu3pAjppfoOcXOPMrnL8u
028pC9StRyQ8vhbBDIdVn+6fI36Y7n/vYPS/ey7Sac8cqcC5YrP8jYIq8J37
sXHvpHtgYndQ7aYxPpB8+O7GwvZiaNrVZ/7yAokTaPsjbf/HtP21vvCblcRk
4er7TU7hMxPAet/Pca9JfHXvwgTD4sfPkGfhyjHXlpai05t9zxLJfjSm9gVy
N/7dF8DZF5XUPsIIah+hGr2PYv6h6zS9o/JnlkUBrj0Hpw6dfoaP4/fcbhP/
n+5VPEP3Sp/a7/iS2u/I2e+pR3M8rkTUoFXNmthVlqXIJ8T97uekHnhM98Uv
p/vii+m+eJ9j7zzvvUjGZ/KaPGZuaVi6Cb7NzyLngvWR4rqQChzsO2q9y+YZ
umOa0KGIHvhA62e50PpZxbR+lsTcWwIivFmYMfu7wC/XBDwhWD69M434Q8p/
ohLlP5HjPw9QfhL7KD+JHD/Zt+GvX8WyL3/9KnL8Ku2vMIK2A8df6VJ+G2dR
fhs4fntWqsUZB/tobLH3WGEukAB+bWN+5ZPz3f9+4b094xDjHW5tccx3hKIx
365dySfnJj0v1Yx50TqlpdX6sgrl3nU9wyUhOGq6//DUYXIO3tzlJZlRg1tX
KL1XvpWIEgcivFPJPlKmzkcUo85H3EOfj+lGNWdPn01EKx+x8n0vfbH9lnxm
Sgcbbv9Ln6s49Pekp1Xou3rnhU/6uWg8uWv7k6we+Ng8VGv+uRgfmm6K4V+S
hh7Pi+9YKLNh1d3GbCOFbGzg3r9nwuYQXGA0dowksYM4rduVTOt2XaZ1u2Tv
Xj3Vq3EMp3Wmu1yM9oOBQb2vfKNsWN3KI2Mj4g8OhRpzFo5EgVNkZ2k8ic+r
qHgJtlHxEnDipY4jPP2JbrGo3J1xmKVxBjMSolsOknzNUsbOHmQyMV/1pJzw
TH+8tCasw5rksx3G4YFSqfl4Rf7KkvdFLFxbYPli2Pl//fJM3a7X3ElRvgIl
OGOBYedimxRsbgx6rq1CzqMW/Ys22UVofignXX9BMjbOvjKyR5cNqlS8iuuo
eBU58ar6P/StFtH26WTYJ53uv57J6L9+L9Z24rJ9PJad8jmVZHMBD5l95qsj
6zY7WKdfptEFX/rWDhlP8wXZC++2F/0g8aGYW+I9Xls4P/XSR4eFMRCtdbJK
jsQhOXR/sQqjv/jKobaVY0yjwHvWN3tV51QoL5EoOlRDnqf7cwcY/bmme+fp
ZG6PApT4tpF3eRJkJWZpsV+yQYrKX2Aalb8AJ39Z9D6+qPVRJArP0I7ZvzMZ
S49Elfg2sUHEfuwdPu/7qBX0+HSxpjtwfZI6veUnOXe2T/jk35eAt0q7ZNyr
k3B/eZSxViXJF46vWHIkNglzJjZNX2yRhpEfbO/ZIclD6f5ZIUb/rLHbB40H
x4NI/L/g+uMfkbBnGobmELvtXb5Ja+XmZHzirsAzPDkDjUbbIpeT+EGJnq+v
9Hwp0PPl28Vnp1MchLuyuxoanCJRdvOxHw3kPZce3i19us0HZ8aIDcg7s5Bf
ak/qfpK32lJ5KJ6k8lDk5KGrqLwV7lB5K7rQeashred1gaHn9Uz6u9m8Dhak
WTkcld2VAkvmx8nWkfzxHa13NmbOf/XORme73DPamQkdInrJAkuSoH6/4INW
co7cVnVzgt5sSK5uqD4/nAKrlrPcbENJnEP31Q4z+mq39D18aXs7DsLbE6oG
WhJAQ3f7ZAkyv/sPVlhul8iGcbvbJKQXpcDD6vUxhVFsCKV103bTumm7ad20
q1LWtTmzkuH3+LHAd5Csk5yvnRtI3nSYwivAhsIrgINX9HKXethMCoGxajY2
mVXhoL7Kg2VM/IARhVfAMwqvAA5eYUrhGzCfwjeAg2+Y0n21Poy+2oFAecnR
r/ngMstm/qF1aTA/8Gaa5x02DO+eOVTZFIm/rx3UUlFNxTsbirdHkrwgZdLq
wjcWvnjf8+SIlGgi5kzwttcndj6+dsfifeOM8IphUWuZegRGiRbWdg4S/0bh
P/CRwn+Qg/9Y0vMry5hfDwpfgmwKXwIOvjSdwrtAnsK7gIN3cVH4FfRS+BVw
8KslFN4FKRTeBRy8i9a/hiUMvTPOfG1jzFc/Qw+Og6fVU3gd+FN4HXDwuit6
mrNDNpfD8mvlk/KFE6GtNIr/lQgbHCm8EV5QeCP8pPHGRUL1m/tGS2AoZILX
jwthEG8klBSozYZXtH6cJK0fN4XWj/Oek/SRVZkGmTt+eibpu6LR5VVHQ16w
YTaFi8J7CheFChoXlVCQWTcU7Au9kgana01CsClypcsiYv/5F6/2fA1xR55N
ecPP41kYfiOFZ/MnMo+7FuXUj9pgcZ21iahIGF6dqP/1j39r33lr8tZvgdAo
NfdR45A18gUonB39Ts5xCteFSR//4rrAwXUn0XZezrDzEwo3hiEKNwYOblxA
4cwwmcKZYYjGmWlcGj5TuDRwcGkRWm+um6E3d5zCveEVhXsDB/d+R+HkMJbC
ySGDxsn5KVwdgMLVsYHG1WkcHpChQ7e5YE/vmeJE8H68KPfdQxInTp5gPfce
G55Oe8ivcfUxSGtYteRPKMCrAYOZ08jz97uH3zhcD8KRTTc6t//IwfK7ihX1
2WwYP6ilrG8WjPazXpw7kRgPGfke7aN/eBelbxWJO4XjLDHDX1tK4mDQyCgm
h+zrCb8mvFk62Q076rfK3Q9Pg/bdeu/GkPMi1Ix/W0K8NeRoih8sZedBR+WF
0Oex/9NZy2PorK2hdevaGbp1P6e815sl/gQvpb5c0ry9EM5WlWKTO/GrojOD
X/skoPwUsZ09Qhng+utUy70/PP9zzKa27kI0LNu2Xf63P1w+ZxvOn8OGLFrP
rpDWs3tP6wUE5Qve8F2Sj5bm2dWS4oHoZmc8e344G1SedF2cY5yHdTW9R/aY
h6Bxy3W5bdFscJigntadk4vJXWY5rRvD0KOxOVKQ9T+dOz2Gzp3Xw+DDArKI
y/2WpfvERmJ12diXNsTPl/TE25ZXZ+On+PvycskRKHS+3qyJ2J8rY+F+m9NZ
mH+veNZLk3AUV5gyZ1ohG7oNfl6fzpWHUw6+qrk3OxDNy99YriR+oE1kNlxq
1gVh4d5xV1alg57GzFfyf/qehNWfD2+2gZLX5k98XBFulq4wHUfOxzCDnF9s
+yxcp2wTu/JcILpWbDByIX7MVPjVg10NmujqtNbymmwefFtZkL89mTxPz1cO
Y75mLpPrSJuTiB4m85ZZyCZDs0+4ZdUfnSm6D3cp3YfbRdc3+e4YT/D4lY4R
Y5KFJpoEwtRh/n7VarJ+jnCfTp6fje0Nis5Sbucw12jS5Upy7mwe9/2GITsU
hyc5dAjdioWRsgr3jeS8xlStc8+PE/v0nZXc0huBpT6i0/pIfP6d1t37yNDd
Uw2senbLPA2l2kCu4OtTlJ5i0OpJ/ECx19qJjvWpODY28rZhbgAKVXqzzMnv
SzPBb5Xgn3u3wzvuSofjFZmMV8bkfFHva7nSY5+Ks24s4ra9HYIzD5cljG9k
Azet07eUodNXUj+h3eJZIraE+13MiAvD7eF6A5kkHjb1vqK8ekcMHj0/rNi+
yhBSRyaaPyDxXrfUdlc/u0zk11t9YXdCGE4vtggOJfNSOStlfvWaBIy6372w
uD4c72gN2Pu+YUND//ffTxITUPeWj9uRgHDc0eEv9LSdDYKtk/pOCyTiTRnz
i646rnjQrFfUgOzfTEUpo+hZgdAvYZSvfSsDXvAbRLWTOO302rft0xRcQEZH
6cMhmTRobdx3PKyZDWXCAj5GJltA9XO9RqBgIjQeHalcQ+xfS+v9XWbo/c3z
vttrcywER/I2DWgoh0HUiiXNf+pZKxfJCK28GorjNlwKEyn2hD3Pms/aED9/
W9HR4tzFQExonWKqUWwNKpPkL+wj8fDU31ZaH3qiMKw678jWk6GoN93h/kA3
G5xpfUAJhj7gxfm3VN763sWj6wS0dpwwRJmahfJ/8sFbBsGTnVTN0d7TuAlM
HFBdK8T6I4nffN4H2JXbXcTUyhDD+UNPcTCkcv+8/083cCqtG5hJ6wbeVXu/
u4DLCrSnH1gl9CQSYxoCrEMHiH/ulNqkpheDfIMTKw40xWDMmbMT75F8rWTH
QF/n4VM4e/oXN9ftcYgBG/yTiR1ejvSOsZvrhCsf1Z9+H8DC7uqZc//wJKyi
+zHr6X7MbfR9odvXdOtrTFiwOn9wWEWCxMMTlS+tfUvWjwfXYxGxKJhyZkrT
qHQUcM8YOfeaxIEzNmR/fyUQChe9P7Fuz48AJbzLa0niXoF/9Pm+Gv2ob/E7
HMa9FxjkEQmB6DL2NlkSv2X9o4/ypoLhMr2CcDDzNCkVUQgAAx7VnhzyHkPu
bAvns5HwoDd/YYu8FzSM+xi6hqzn77ROXz9Dp2/fP/oZhen+04eM/lO510o9
0ZIJwDZpVj/SZgMLRuJ2t5P1Nm2fe/aiA0lgMOU9JlSvgTuG4weXkPNo3VQD
1a9HkuHWwZ0WFnrOmOH3s3fwzf/6JVUY/ZL7j62JKNMNAb+3XVmLOhIxcFxZ
CR/ZR0vp/sRRuj9xDt2fOFXu1sg2zQcQNh+q9EfTkTc96ezYBjKemuOyAkfv
oepKQb5d5By4tdfygyvx5wv/8V1ldhvenVyWCql9/kYK7wPhnHP/g3piZ1a7
Stu7c2kwJf1C19jeULjA7RZ6nvifS3Q/oDqjH/DS8z0v002ywC9NWaLYZydY
620y2kLyxCOX030OsTJg3sdos7wjkdD7usP3Qsn/9BO/MuYl5ESQbYUCQqDS
uY7uiAj4tdvWQCHtj/7CqgWzB1JBauw8jaGDLKhueDld7Dkb1mrp917RzIUJ
Q5/26jmEQUeqgbhSEhsUXofuGzc1D063xjvp8oeCWu9K/oNx5JxNmfRkZkgu
9NeWaKhIx0HNA2/NWSQf0abn5QhjXjj6jE0MfUbdlfvLjTTzwCeh3Cj7vAPk
uyeu8ifnbGFqs/LJ3TmwS3Spl1O8Jcb9Svq5oujffYJHJb4/X/L0DLwoytjZ
xJ+He39WL0tMYcNJ6el7GzVTQD9NzFkuJwpPZZUKxtaT9UDrPG6idR4jaJ1H
dqr7PIVmZ8iZJJAiXpGPdTu3RbiFkHW7LfzLw10GoADS9d2fs3GH1jqzUuLP
n118MpKx2RFuDI574GCTjx5fl+WGkHhD4fipOzbrPSFQpTC6SCQP5X9cj3xH
vuun8JMO1435oH/jkZH+THvoM+bKbibjn2Y0cYN0chgcPpx3YPAJCzZabdzy
9h2Jh58nz7mVHQ9RCSvT8jABCnMmaBk0/dE/OtobWZcMyW1mQrM/JIKWUUOh
EpnHcdcpXchnDF3IWD9/zyAJhNWbDo4dkkgAcVkfrfUkfgu07Mj3y8sDzTtX
1M/pseCVYfP8cB8S59iNjtbzFkAal8KaGcrxIBTKK/7ameTp4Z5Gx+w84cjE
rwUFygU4y0b+3Qs/NpyndSSVGTqS17fmi0a+IPHtxuuH8ycHo42iiLghiXP6
slRvWCmlw3x3BSuBRel41hX6peLZYKb2oDj9RwK8j5hrX/6OxEdXZ26qI/mp
CK0vmUrrS46n9SXNxB8p3spJgIOi+9Y7Pc5F4XfaR76ReDjz4ZdYZ8NU6FrZ
+5O9PRMlNl3neUm+N85DttxcNxMkpS4fHIlIxdB2YfHMGDacocevwBj/+Z+1
nxbLxGHAhITre36kQcTwzxFPYufYojnWJ3fF4mGN2d6a8hnQN3Vrqw5Zn5/u
3Jtz9GIEsgMWNOtfzAL8sniBWAEbJtK6kwcY/YbdJQcSlAvuonRDAL/aljx4
uPrp+KE/fYW7LZtC5t4FhyDz23y/s8H4jX7AIrLeNs6ISVWIdIBlwtuOfZ+c
CEYr3lmcJv5nJa3PuJ2hz8jR5Uxh2C1485JBvkOmWVmV4kHlOV7/V19Qo96P
66n3I+f9adR40IMaD3LGM+P53/HDJmr8yBn/eLo/6wCjP+sLZR+g7YMc+2RS
9oQjlD2RY09jyv7gRdkfOfa/pvnk5MkJMch9QcLKfHMyZthG9TuS+C2Bml9c
Q80vcOZ305DQlaB1yTicc7DvuGEWxOhP3TZE1lvEP/qGtLZPioEbCehSl7Io
uzwDV2mpPLlD/H/wp93BsTlxmHfm+4KLunnQ2jWbZ2Pw//QxmfZfknrinNeN
RDyhnHPneE0etF+XurODrOfLES7187I90Do9VVY9F5HXYvexgySvGaL2Bc6k
9gVw9sVNah9hELWPgLOP2LS+ZBdDX9KD917bPCsHKL/DO3Q2Ox2PdvjYO5Fz
TZ/W3zzG0N/0pPY75lD7HTn7PaJMoPhwXB5GD+5mrc1k4blRVpoj8Q836H6i
KYx+Iq2URStDfM9DX1fGXJHuFDSc/jWdr438zp8wVssP8UVL19ryLQno5Nlo
uofkX5toHU9fho6nk5pMlcStFLRoCUwrv5aIaUu/3btV8n/+E29T/hM5/rOR
8pMYTvlJ5PjJcZRfxUOUX0WOX+XY4TDDDscpv40BlN8Gjt8+3u3GN8vsAYa/
3H60dEchLC64kcVN5rGuZKrzmP5H+Mj6VLLPsUJ4+HpleqobGwboeXlHz4sB
PS/aD74IxPClomxCm17p4XA4K3Ln9zEyL8U5wVc/euRg33Fr587P1vAkSnP8
O5InnqDOR8yizkfknI8D9276zlBPxV/XKutP8bNQd2DvRL+y/+mEtjF0QsNm
9G8WeZqHVeXXxZaT+H1YMfKiNPlduqJ6UaBrLnrNZoUccwzHQKWSPZdI/nuB
62mNiGIOcu8TWeqpFInf1x1I8ssk5xGtHzqfoR8aapHMzn+YgefqPM18ByNQ
/asCbCH7tGm9r/Ha7DQcXBI9I2h8GD5XWqd2sIYNz6l4CbOpeAk58ZLtwesW
kOEIa3UazkyalQdp5sd//+nvE7lWOltv2B7ds6axuu5lgl6tWXNaFYnDpRL3
WIVH4Fa7Ly/5qhNg48rLF++R9eZP9xktZ/QZvUvdspqnLBm9MqRv1jQ6w85K
X740Eh+uP6+e26OXhJG7Eg+O2hjCFLubUa862bCdildx7NW/8Spy4tVSWmdT
hKGz+eof9qH5WDCI0bfSX9ga7rA2Et98+7hN6ok3zhbgfTOLxNtrH241FY4K
xz6tsd3jdAJRR3OfzwYSnxuc/l5e8DIMi+3ZcyW4Q9F2ama4FYm3Zem+jExG
X8Y1GX2LD1vD8Gypu/3LL+EYuvT67/ov5Fym+xoaeKi+Bk6eIuRYESqWFY23
4mc9T1kahVIv+0sfknzTkspfUJbKX5CTvwSyfX3W+cTBl/2OkyoLY8CIZ3mb
Ofk9aEPwomRLL9x9taz1jZcbltpLNPKQ/GtkrqHTLDFLyJvKrx9rmggKfoJT
xhA7CJ767M7afgh8Sju5f8yMg/MXp2S+I3mW5j/6DuYdSg1/cuEMbpvWV5CV
74vaV5af3jXKBnmvI89DFE+i4qHOh2umhEFdg4ZO7DAb/Oj5WsiYL5fIDFfd
n7rQkKI90y7XC8xrd/l9I+9xaxPYrEfysev9QSv7ikPhsdTBr3s+E/tTeSgc
ofJQ4OShDlTeCoupvBU4eet4Wld0DUNX9NuDGunyIF98VTT1cYdONBrV3z2R
Q+YxmtZd1WXorqbv+rK8XDAEEq4eaTt56RquE9n+6f03NuyRktqk9DYEvsXK
dztmO6OUS4nBzyE2dNL9CLWMfoS4/cJX3F8H4NxfMUImA/EYv6juHtdHEt96
2Cge4g2CtS0mvKYDwejuFfzDmDw/kdZvvUTrt7rR+q26/hO7lvceh0+T+TbY
bEtEL9mt7tVkHqdTeAUco/AK4OAVRsXlc4IiYzBe883JPWvisOBnl92vP/kv
hVfgRgqvQA5egRS+gT0UvoEcfOMlox+hmu5HuKKqfiTyUxxkcunJqZ+SRa4d
H2fNIOukMzbou+uaRPjtJ9nRKx4OIXHGWn/u8x/eryQp35MAIXozJpoVh0NM
Z/lw3x8d2LK71is00yBz4s4Yq85wONV5aNkq4q+KKPwHPlH4D3Dwn8n/0I1V
pfAl4KHwJeDgS/kU3gXNFN4FHLyrgMKvoC/mL34FHPxKjcK7YDaFdwEH7/pB
664qMXRXuen5MmbMF0eX9hlDl5aLwuvgAIXXAQevy7wv4R58NB2mlIaxQ0QD
kGvs4hL+OuJXKbwRRCm8ETh4447inAvSpixYcSdRi/9UMoakRm2WqWZDB61j
O4mhY2sxLr2u19kAWoXHKvv15WLHnaHqllQyXxQuCv2af3FR4OCiNrXGD3df
uooPl5feWGOLOHdxSu99Em+0TJbmdUoYA3Xjq0LTqjLQ5/Gs8H6SX0cu0dqy
vy8LTDYaHNv6IRwSCp6+SiXPv/51P8yLNwfG1qXO5T0dCXXdx7mOkvwokMJ1
YQOF6wIH1x35h50fUrgxBFG4MXBw4z0Uzgx5FM4MHJw5gMKlQZ/CpYGDS3N0
b51o3VsOjh1M4d5gSeHeeIXGvV9SODnsonBy5ODkXRSuDucoXB05uPp2Wg+3
kaGHe5y7ZPY4BS+8viOkySce8dhJj8t85P0p67U27mjfDy0Pu2S6FdPxuGzJ
/a9kvWnzn8nvCQ0A21Xbvi+blIwiPg4+BmS/NGy7fcJnsS2KKwpkb9PKgF67
o92TSX5ttTvuQdSW55jWHfNkXcQuXBGceHj7cTaILxtiR2ZUYr6FhNGE3jBc
HzEmcS03GT+tJ2vO0JN9yx0f/EzsJFZvExITfRcL3w8OyPH2/V+9DDcy7p+X
fGW5hExIQ17F3rjGR0/wzT6xY8UvSRxF36v/zbhX70bfJz/JuE+u+w9d1GGq
ToqiVJ0UOXVSui6MPHP+e196F1XPxTiqnosH6HquBK3jSfMqI6f++1Tzt0DW
tES8P4Wl9Mg8DVsuj//tR+LGDzt25iRbXgKX6SnNxWMCYLWfSeoFcp5G0bqZ
GbRuZhStm5lF36/OYdyvllmzQmZrWxjO79kZqbY9Bu0Ck7iTiP8/8v3iXh9H
D6i/at4xWOmJqvVvPk4m73/8YnQBn0kUnvnxRkEtkYXFczXZLiRe8v/gs+vw
ixgsiLHlcpmcgvsWt7zyJv5hoW/OCX5WKnyv07Ke8iMGdNpmdGYQv33rqYD9
lS+FEOY1LLzSJA0SZF87lRmw4b5gfxT/9gAYs9BtoYC1Eyo9OnaP6weJN+h7
qhcY91Qluk+E+srkwJuB1lcvbgXBleGg15jLhq2PHcRqw5NBabefpM3qKPih
uldpElm3w/YdVoE8iaDTvW3m0pne4LRm5rcN79nwO/NpvP7ccBy5FGgXNZ6F
qSFPA4s6SD5O69/1M/TvTOl7vKqMe7xetB6ccTilB+dD68EZWC/lOqVQBezV
1zdIWmfBwdZTMWvrekCK1k1bTuumRdP6IPS9Lwil7zdy7n2FUfe1oIK6rwWc
+1oPaZ0yXlqnjKN7Iiuw5c3SAwVQuZVVZMpfBAvuKqi8FCV2Xpb0qsW7CETm
bHL7xHZBYV+TiPMWbFhB30edyriPqvmosHP+6WfgYpfpdqauFHLMdPql63tA
mb6v+IC+r6hA31cMpu7jgTB1Hw/e0vfxkNbniqH1uSbS+lyvqPuBoEfdDwTO
/cC4JYcFOzRTUCmhyF3ucyF+dzhrt8yIDW0PGk56uySBdfTOxd5rEd5eqhj6
oxsedGumkMV2P1im2rpO8EohRiZkLptM8taADqffRzfmwvhlGns33S8Cry+T
vdlb2aAYveaDgbwF1DrdWnzwHWJ/2/muUeI/A7N41Aq35cD6fNNGGdVi8H5X
vTyDPF94i71rYWUuTn7C9U1GsgyL4sgJMtoD9Werchql8uC77dzz8bzlkLzt
QnPA5x5IzxX35TPNxkjlcV9cDIrwmeRIKp8yGy7F/f1fTKH+Fzj/60+NEydR
40TOOL1v//0unER9F3C+6w1lB7xP2QE5doin7Aa7KLsBx27S9D06FuMe3aQX
b3xNLvvhAFdxW3I5mQf73B7LP/k419YX9zOf4YaFc3Lv6bpBvT7Om0X85Ef6
HuBT+h5gEX0PkKN3M5/Wu+GsZ9O+CeLT1CNxxpOpiWWt3nB+mfiyj31/eIC/
RNg7VaPCh6PnRFbl4tlA1xDH4B4oVZ1ckT4mBU9M77+7ZrUlrLvH63LmDfuf
ujByXzbVx54twDELt0pdjwzBeT/Mir94smFv4TnVZX356Bn7xTTANBlFV8Wf
C7JjQyx936+Ucd9P/b6HYXhxCeoIpYvjijhsu+jta69J4mH6ntgFxj2xuzwy
as+LKnHF6byJeq9S8N1iJ2LOHlCi9VAEJ/xXD+UtrW9C62liNO1Pxmb99T8w
QPkf4Piflp2tnY1TE/DqxTguaUtHtNB7dPw8yTcHaN2Q9QzdkFz63toyxr21
AnX1d2srMvGO5Ofq3b8TcPn31pS6NDacNnq09mNGCvoVHBjMj3fDoFnyov6v
2bDxtHON/HvEhHRLQd0yFsrtO5yxmqyHpgWXLLrX2OFpwY7VJ/cFwvfkZAEp
Mr/Lhm8r6hx8hnOrS1h8DinYeUq3n+8iiR8iXDKl6vxgqce87OA1CXBr7+XD
6iT+XEOdCzhKnQvIORdece96234oCt6M4xV4X5sEH702VIiQ+P8Rde6ANnXu
AOfcaaLvXw3O/u/9q2v/0E2o3vn33ERn6txEzrkZTN/DUWbcw+n5xz2cUf7e
5clbi+GOPKtTeW08rM/NXyOlx4YNPzoaspSTYZFHtL3JawOMPScY70jOhYKy
+7P3i1hg6FN1QWPbEHSRfVPxkORrnPskPYz7JJdbdOrk31bAl3zW2rlmkXDp
mslU7ZlsCPd7di1d4jnceDh+7Aw0QK4Kt8R+EkfdoO+NxDHujSxrrZfkmusO
Ab4xJx/0JWC1wxYpY2J/w9tf3uyyDkC7RbW3SoazMZk33LmZ5B22AfEKbyea
Q5P7h3Peu3Ngv/dFtlIRG2qEUyIXrPfHaXfTVwS45gOX87xRnhA2LCmQWv3i
Qzr63N2oNrMpFhqdlVf/Is/b0TznGTTPeRDdzztWMrp7q48zvGp3O5afkQ67
s/h3jmtgwyhd3//MqO/H8OQ/OdF8BFq+f/9x7HMOTMv1YI0pJH7+H/cWptL1
elFGvb6I5uteweDrNqTyUPCn8lDg5KFRdD36zMf/1qP9qHwZZlP5MnDy5Rqa
X7qdwS8dKHHt9WRtbzjIDrknJBYNlSX+ccYkD9V2aRjDN/QUFWteeY/18cGa
DhO7zO8kfvgHn7M7Xb+ewqhfKwUufa916jq8/DWcPW/wKQzGdrWOIeMMCzqu
U//RCyL2fJC9us8V5JY0HlpNnq+uuSez3YcF3ElxsrPmRcD7a00yyeR7J3rY
zzRRZMF0lu3SIIEwWH64+dMw8T89IUGXtJf5Q+rC+ES+NCu8UGxX70LeUxqu
uPaBGQtMdc6mhpM4x63b9MgfPGTN14rzS0xYcLPKF1+7hEIZ+2XxHx4n7X/w
2SYf2/lB4VoqyBSr9PJah0CQrODxrSQvPqaz6Fp0mRr4Rp4670P8E19MWVMw
yS++bR6Qmlp1H7fKSRZLKGVhzfI9CusqyHzJlk6M8EuCoALHdVv9QuCyYc7j
KSQfb6F5WccweFl/0XXSQUad1JzmKRVk8JT6L1hYfJqdB4VyKnd/bg+Bdk2l
wunknH1L83m2M/g8aTwZNBj1ozAKD8d+Cg8HDh5+lebPnMfgz+x4Nf762h5H
/P32XvsUsQzQWKE62Eji6mun5/169JgFT6KmJh3Ry0OjJoFdRv5s+HGNqvc9
Z9T7frnITDrF6waqkXWtVwVz4ar3ReUF2WwQoutBaYx6kD5V74B7VL0DOPWO
BJo3kpvBG+lH1V/gl8Hf+gtw6i+uNoHtM0JTYOylylqR8el4YuPhZmty7qzO
NJ53NCkRx/C5W2yfkw5bZuW+FSZx+9ila9H+thfUS7f4JHyMx3uyAvuXdrPh
yVWvsHE7k1DXIPWNnXo6PPpWrDOG5Kdiqx3DLHxiYTPf14vC5um4OsrgilsJ
G+T9u3re9EWj9tMSkRqBHIg2e3NiCpnf88dPWLnVPob7j1p/Cy/Ox6xDlQa6
5FyrTCiN1/nkiEE+LZob+fLBdoGydS75nVugKCWnLwpa7pUcMtqcg8u26OPp
P/ccqP9Fcep/gfO/rtQ44Qw1TnxIj/Ma9V2YR30XcL5rPWUH+Mb71w7IsYMX
ZTf8ffGv3YBjt7N0nUKXUaewWLvH/oxpNCrtuyZjV4fQ2bL/c0wi2V8V/jEj
jSzUHrotJn84F15rLflVStatOF1nCaLrLGl0nSWV5mF7yeBh+60+GPdI+Ays
6vwckBqDcFX+ps2f+2YsC8nCYxb5WKig+NnHLwSd1r4eZQWSuFTfMkdD4yrc
dL823vFcAeDQup9if/T1GHxlhTRfWVVChoH3UAiKjT488qAkFZ5Ix6z+Xc+G
uL6B06+vZqNmsID8uVlxWK3N++wYsX//P+opF2H3pdzhRDwrl/nz4fsgsPLo
V24gcUIbjcMvZuDwGpsn3Xa4n4X6M9+/+jH9CkSELxlpJ+cOP4On6xTN01VN
827N9P4v71YY5X8wnPI/yPE/y+9kPlQecIIFO3WTHSblQOxDgdnjyfl4kOaz
UmbwWYnQdYEwRl0gpaRc4Os7F1S5+2Bi8PUk0Cg4G8lD5sXniY1Z+b5kXDqq
cOD0g2BU010g3E/8auSEyPbK/gCcZCLUIfAlAWQHa03syPP7ME7ydFM8qgXe
LuuYGoYjHYFv/vAJN+/6yv2gn4WeaagUuc8FdHc7K/+5l6s/vyrv1v14NM1Z
11f6NQI7uyoPHSTvmRD691xAR+pcAM654NtT0SPHl4Cubyc6L+QKwyMvEzYq
kfinljp3UIA6d5Bz7jjR+Pai7v/i20I0n082g89nKXVuggx1bgLn3PxpROGc
Bgyc8yuNcxYycM4FZYJpI99Z8HOxhE57XTweWvVTYfwffaIRnp0ztprCx5MH
28UOZ+O1tk9GL5+zYc9SVJU77Ihvd47aLtXJRIdl+7a9rfofXufPwOsadEdE
j+5Kh7SejwqrH8Rgz+xaPflSNuRsqRitIuN+dMm9pX9xASZEHppmRvz2ehqX
e8HA5Trybg+9PHofVq5XFsrZmIV7VzY2Xybnne+NevEEQS9oj3UovtuYjK7r
P86RJ+fIQ0WvuIpz3jBY+I3l0poBMg97S13IOCdKLPT6EuuNm39vS9njlAA6
anU71hD7SLFWWYeYFWL0seQI47ijyHf5fIKLGxsc9r0fc2XoOa7xDFQ0l/ZB
kQtbr+7bzwZLk3PT93ZVYIpX3byw2hhsWbfpSt90Nnz4B15H96HgTEYf/QFK
RwlXUzpKeJbWUfq57FCCnKgD5oXrSkZeC4TMXYWGxWR+442Vtxx1KEPN5Z3N
E53T8FDLSiPxOWyQPLVh+ufqFKzMUFEdqx2E9fzvD9mSfSo4vGGPvU0Rzrk/
XueUTxLWaxz5KX2GxIfSdsEvNPKws2yLj//laDxa4VhdFkbmhebNcGfwZghS
elhYQ+lhIUcP6+4PNRPp9EK0vb5D6shWsn50eI02WLPBbGPKZtN0L5w3YfKz
OU2+8NrWdrciGf+Jp7UuoeuLMLF+mlO8YCp6NMoveatLfqdxRUUaVwQaV2xe
IZy6Y7wrJE4qjra8xgIhlzvvxcl5cXzuOsPNKsHg3fFT9EhNElTNsQzWI35m
Bc0D4LTjvzwAKykdNFxE6aAhRwdtNE+p+NfOOBy6esLW1DMOP+XvreIl+TWX
790TSx2CsXJL7cTkGZ54/Zrt6l4Sfz6Ve6tdcD0Du2aZv959LBjNO+zPPyLr
cKndwM1J7ERUk//xcNxIMp55ZnmhhJyDnTRPgjGDJ2ELjXOWMnDObd8aWQZ3
A7CzTXuN7XIraFO6v/kNySun8Ye6Cd5JwWvv5jUoTEtBwcxE3wxy7tTRfAtp
DL6FqIrngaY/H8JR3rDpwzWREFf8WKOHxOFnBn3aHhkmY9jy4qtBuxPw/ZeQ
CRtIvhlG46VpDLxUKY3iZ/jB4GdQlXnxI14sHNZxyWUFxCbC4nk/t3oQ+7+Y
lKQirRiLAtznzc1fRuPggtBFfsRPLqR5G0IZvA1F3x/0uQZFg1XTlrY7r1Pg
irKlp24tG4YoPUS0pPQQcQGth1gSI/T9pEMUyXfqHJSOJ+CAS9H3b+R/3Wn+
io8M/goVmrdhPYO3Yauz8bdT6yLh64pVJ2J/hsIEm+G5v0jcXkLzTjxn8E40
3LmQujw8FPXHr7b+XZ2AUodd7pSRdVJH8z98ZvA/jOvYM6qtkwRWGvNn7lrI
gh/N0zv9Sbxq2XtDVNo4HA6wTs553XgO522tLPAh6+o9zRdRyeCLEFXTbunK
yICw8E8L+uqTYdIZWxfpZJJXfi9fyx7JB9G4PI3zbbGg1WoUcID4q7mr+IUq
96WBa/JF1zHbvEBUb4skXxMbhGm+izgG34UVjSfrM/DkHpqPQpLBR9FM806M
Z/BONNA8FSMMnoqFISd/h05OhrEhRyd2tSeA5LeLUz+S/fJZxX1JQDULuGpS
dOApC0aFevf/0TX7SfNXfGDwVyyi8WEBBj4cT+nYgi+lYwtGtI6tHs1TsdL8
vzwVi0VvbKgy8sbQliSjx0tDUTfrcaD4INmnNL7NZuDbXSY32WUkH15xvFah
YKMjrNAZV+/LJvGGURc81qiGRHlDO8EdKbCuxeh8TnUPZJ5o9OYRy4U+C+mz
X5vSwaj7W7e0C4mrSx+9LHxeCvLXMo/tfXkd3n7PVLugzP4nL0ThXFVBt7Rn
4KijqKx+Pg1ixFx3qp5igzeNq7PD/our31ihM+c7Tw087vp6ev7jfOCv93kh
fasHDt+WCBSxTYGiNrU7+sfC0cq/Y8pHko+UrH397XWnG1gFrfz4YEcKppRb
Wn0i+2ipDtWnH0z36XP66C0onW4YS+l0A0enW4nmE1jE4BPgpfkHShn8A7nP
lilbaNeAc+zg5Ox6FuTfed3mnNYDc7Ve5n48j3BRwtO7bGYWLOwW41F9woZs
k6lel5cnwMlK15RL1+Lhq/mHQ0dJfOJE4/ziNM7P6eMWnuN7ZX/AcxAsqqo1
TDsNxa61i2ccZsNNYQm7mJoisPUD3fxJz6F2lvCW3lc98IDmN1Bh8BucpfkN
2Ax+g2yaJ+EKgyfBcOG1BS+H0sBAUcje/0M6yhcYH0uKJfsibqH3619VsOvg
mIfxmmXw1XvVgM/GHlgRdOmo0OXnYJq16tCe7UXwrGiJwOXXPaBhfNV8uWcw
1O/z+/z5SQ6a3z8RnkryJhe6XhDOqBcMVXR08W6oBv4dC+JFb5SB6yX5Z2cl
e2DhP3gYLCP1mn9VRmPY20UqQ0sLcE3z+sAM4jeKpq1m1ZJxJvSN+b39USqo
8ey/zNvUA3I3tjvMe5+21ajYgHfGO8//uw+ZQ/MtRDH4FkKnDO8PjEkD8doB
qXjHAtg+0uIseJ3kFz2F1Ue4C+Gz+Bhz37ehOEHm7LwKJxI/0/wMVjQ/w216
nEaS72KHmmJA9MkRB5XkYhA2d3kw6zTxh2fFp62oSINNogknfucWwc9f8xR1
DpL15ls7s/1FCsTYjAgsHExAdf+NU7PJ+bvQQ76khTcAYn+mxF2Xysa41Rfi
f5E85fbvouVih5NAdPTFj7S4cpg6foM9lwCJe2leCJrXAjnz/qr1bEMjVwIa
R42kL55SirqymWu+Atl3NF8EvX5QgV4/LJov4gqDL+KFz99xYh01TuCMU8Hq
zaZ5E/zwXuW4OVt+5YD0yuX3BpDkO/wq06eWJuKj0t8qnu9KUERH714o8Rt3
Zxm/4fHNxMcyAx45xcU4+8zMsjRZNihTdkYBib92Bo6dlWmeCjEGT0UMNV+4
hpov5MyXIM1f0cLgr2il+9x/df23zz2GWj+YS60f3E+vnzGzKZ6K9wyeCn9q
HQK9DkGKXoefqPWM86n1jO70ep79ajhSb0scmq9p13qwMx2EFWfyRRG7HRD7
PdqnUY0T8g0fXuAvR5OoZ8YbF/dA8q/QuRO+leJF1RlCQTOL8cPAkrqSnB4Q
EdK6s7g5EU9Wd4YXbcoB4Q/7P70mcQ7P6YKuyv3FyDu+qnP/9yJ0Oi8cc5fd
AxMLptZ+WPwcW5NvH7HfoQys95bbbpJ1Xlt1rDEwC1FPsLoF4zJQ1X1TUa0z
Gwopf4U3KX+FHH+FlN9DJ8rvIcfv2dJ8FFw0HwWnXilJ14/WMepHtyg/jFyU
H0aOH844rpPoLJqA7bNkgt5vC4bWzL3PvpG4q22k6MMJB1d8fsLZZ8niVHg2
/+bJCJIX87s+h+cRNTjrtsSWDfUFOE1Tr/3d4Z7/qys9ZdSVGto2F1VX5eIi
DYcs7rbT2NJokDM2nax/mt8gnMFvsDF5cvXXh0W4JNZogmNiFsY/qhc4vYfY
OZA9xn5FCX4sc2vdtusmdk9RU3G6wIZimvcgmMF70EbzHoxj8B500vwJJxj8
CdbmFgPcx7KwwO5ut1gHC83nBe06Q8bJjhObHve4GqdcPzdSvCoZV4/aPegs
I+vzzFb395YVmBiaunybRTj+9su5k0byKbYc/8S96yPRtYirSH6yDQp9OsbT
NsCGYLqe1T/+v/WsQzTfwgaabyGIjjNv0PwMFjQ/QwPNz/B76d84BGypOAQ4
ccgmmq+Al8FX0EXXy77T9TJOfJJOxT8YS8U/aEjHP8N0XUyGURcroutiUnRd
jMMDdteNpz8qLAHHyWyTbI+LxbcNQltNXrFhvDjF83Dz7H95HuwtV8fYxeXh
QN6M+SvexeCKTfrh+4PYEG7za1VSaRqOuXrF7NzeVLxqa7njYCobnu08Zhi+
PQ2Na8YNrsVk3PD01LjL2SQPDaH4InwYfBGv+ec4b3+ShLflPCfwLHmC7Zql
c6z+4PD/0LWXpfkl1Bj8ErdpXfuHDF37YJp3Qo7BO3GQ5p14wuCd2DbkYrr5
ZRJ2KUXd1NeLxwPZ376+JfG8l26R3bdoK7j4YybExIfC9IA4TW+Sd7ybc1nl
XFYIZHwQWd5+jgWRa6eXBJB5LKX5K74x+Cv0qXwEv1P5CHLyETOa1yKPwWtR
TuVBkEblQcDJg67RPAN+DJ6BaFpfXo2hL7/4HzwVCjzHeww0Y9GsKMFoukgy
HrdzVA8meeuL+mqT0GUsULw3zDeuKhb4jmpapZL/1V7K36r1IhHq3W4JjUAC
nO4ZeP2nn7SF5+jgaFcY/thVE8lzLgn3uaQqDxP/c5WuS8oz6pIhtJ77NYae
uxZDt92R1m1fTuXLkE7ly8jJl0+9dWbNHJ8EF9es0HQZSQK5pM3fFcrY4EDl
79BO5e/Ayd/Fad6JJwzeiV4KH4ABCh8ADj4w4vMXH4ByCh8ADj4gSuutL2Lo
rY8blLA9dMcRG1fCK6OqOFxQUObyneyjGrNLL9JTiuCJ1IO4J/Jp8EZPd7f1
ITbsp/ATUKLwE+TgJ/oRMW26OoWw1sRN8ZJkAox+i+RhWbFhJq1XzvPmv3rl
fLQuuSCtS/6Z1iWfSeFCMJPChaCBxoX2rmON3b41GWp+PMtfWeMBUg+K9Q+T
742lcCfQoHAn0KZxp62rmpTnnrEEf9mQg9FGHhipqGR/jKyr/Qx9cA6u5fKu
L38BbwXY17btuidB8oMb35T3kPdMySxQDSNxuICOROtvAV+4finiVYcOGx7R
+t1zeP+r3y3xk9uR/+1TMI83NomKjsEvtxrjz5K8bPkyuYZLRl64eG7Rl+ml
ycgzWfWpehsb5BSi/Fbut0Mts4YfY4+mwIGJE5bNb2fD08/v3aXa7oCoubBA
MDsHrA191OMK/vTFULrY0QxdbIPGmOLyd7FYWHFIcIxzBkx6vOl4diH539Jz
Ablf03FSurFVSmg49C1qkYRyNtjS9d90Rv33Jt33uo7R9zqD1r/mpfWvn9J8
0X2TZrfiQk84nbtw+dLRdBh4caR4A/E/2hf2qddEZuI2brGM25N9Ud+xMPQa
+d/ISYss77RpQOdynnMzRjPAefqXcUfIfky6sGGjtVQGignd3mzFH4hnaj0m
/MFvlWn9aBuGfjRHb3oJo8/dldaPXsHQj86c+a33x8RovNtz4NkiWRZYqPSE
zSDrR0E7NlQpOAXHf1HdlnAlHPkOahjfJe/fovu1a5tZIu4ePqt+3FgH0n/f
XarQ9T9daTFGnfr9dbM3akuTsSg17Qm/bThe2qZS7UL82xmzCSuHQ5JxeLGi
ve3+cHzeXfzreDPxA3TfrjWjb5ejB21P60Gfovne+e0DjdXHesPgy0uaEW5J
cCN/Uc0p8r8jQQpq/P0hUGmWP29KawpkNpy5x3pBnrdS65u4IwrFmlWCxM4+
xqOKU2cZfCX7outF7NJr1rD6lNVHngssqE2q+hL4+Q8fI9XXPI3R1/yWrpt/
YNTNtSZ/7R5ICMc18hMWpvMEYJ7oD4tPf/SjaX3kVIY+MjfdH23I6I8OpvWO
vzL0jgtuC67i2+uMdcpZ5vknnsKhj9sf1Y2w4ck/6u8V/+in3m0oNeS3MADd
2fxhnc/D0ENp0+onxM5fm9Fd3sEB+wZSzSP07OFJtPXzw7/+6ApRfdZXGX3W
o8cqavz9Qv9fYWceTuW2BvDKWJzMTepkO8pODolUkqWUEOmGkhLloMw6zjWU
BtySRIZEGSrTlilj2FibttqOuimETYZODqccQ7k4pHtXfeu7PXc9z37uvx7P
3utZ37vW976v9+cHF1SFnNrJKoR5rGRtS7Q/JtgvPED4hTn9Mwmu+8oA7wnT
S3c6A3jc8rEoQO8XXcyb9xK8uT7mrIcIzvqy5tiLfQFXgAPfx974Zjg8YueY
+vjzN9/uRYITP/eoSoXbUQr2yRq/9BbKBv3vXb3Pou8Vxbz2jPj/8trfD0mG
qrTFAzOFyzPH1BJgRMDm4BOfUB6FvbqPCK+uBua7gwi+m/bqehNeXWND34Oz
stWgeevr83VXssCzDHXlW6heK3G3OSiXXwUGzSdt52WyQOHHqukvf8exwXy6
B8Gn2+H5hL3EfMJ+zI+nEPz4fMyJZxKcOO29nSW48qhcp0iD0d1QfOWhqCM/
lkC5sZWis+j5JmS2S8Q6XIcpXJ5LtmYZPO26c64DnTtZzJubE7z5FJ436CHm
DWjvrSzhvfXBXLkFwZXb9bn1bS8tAqpuHpIsxn0QblG/p7D/m8eWnJf4VXQZ
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
q2wOLmVWwsTOPc5iqH7/D4N0dtE=
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {0., 
       0.49488850049789845`}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    3, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$29958, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}}, $CellContext`moSel$$ = 
    1, $CellContext`omegaIndex$$ = 
    3, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {19.3, 4.9, 26.900000000000002`}, "numberOfMasses" -> 3,
      "latticeBasis" -> {{0.05400000000000005, 0.9649999999999999}, {
      1.9180000000000001`, 0.395}}, 
     "latticeNorms" -> {0.9665096998995922, 1.9582515160213716`}, 
     "latticeUnitVectors" -> {{0.055871141288711276`, 0.9984379878445616}, {
      0.9794451756109698, 0.20171055493552298`}}, 
     "numberLatticeLinesToDisplay" -> {56, 8}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}, {2, 1}, {3, -1}, {3, 0}}, 
     "reciprocalBasis" -> {{-0.2159012647988019, 1.0483509516053218`}, {
      0.5274549886856805, -0.029515615947178008`}}, 
     "reciprocalNorms" -> {1.0703518458308492`, 0.5282801687307149}, 
     "qMaxVec" -> {6.725218991236941, 3.3192821942431805`}, 
     "mObliqueComponents" -> {{0.6559244400231754, 0.7646402920952808}, {
      0.6913869059982295, 0.2349661663587568}, {1.251336401499831, 
      0.6644566393738317}}, 
     "mPosFirstCell" -> {{1.5020000000000002`, 0.935}, {0.488, 
      0.7600000000000002}, {1.288, 0.5050000000000003}}, 
     "pointsDataTable" -> CompressedData["
1:eJw1km9Ik1EUxsdm4/WdSYmBHyTIDxFlYFioqJzTh/6IrJyFrLAaUiEEFhUh
ZjEQgz6ERB/6h0aYRCAiIkPEOiIiY4QNG80c5nRaqynm3N7NbNG953UXLpfL
vec5z/O7d0/D9dorJoPBIOdOMY1iJs+Eel6OB6lC9XffqNQovPlubcqqgU/s
VP8qffcWBDbuq1hULEeIcvtOzLfkfiN9H6BLw1VZxgMJcO5uj9iGuqig/2bj
4xUVHR1j8X31figddN/58GqGTooqUQpfmn/uPaQkYdk2JCpW4ALfs6B+Hod6
1vNv9UmCteThUcdSEq7y+AfPmnLaRj0WrOc6IzpHPa+PuT6T3HWMmXCc1w2I
sL4ZfdaGHfayLNT1VHwzUS0UvcRuWixYzv7+AMftzkZvQgJJkiJxqBtUI2Vs
0+DifFH6K/E0GNH9UY4wnSuTAglK8ykc6Fx9OxGAIubpoVJp32tEB+u4YYEb
a5Tmo/Tmn79cPgdn+TwMtwS9VjBhK/uLwrWR20/yMjRK84lOyUDz8OK5HJvA
sfpMqMnYcQPGUj5BOE5pPsHTj5425YSgnYFsw1+Cfm9+Bup1Ct6DIxeHq2KU
5jPJuRahkv1vR3Nd9sGBzh+UzwIp0p8xCh6+p5GkO+hWsJkFflPe10lBcIns
3D9CduazDo0sOEtdgk51SSY6mXc/7Weji6Q/6Ah8Yv4xKOR9EGakXE8mernf
MlTMyUALdJh5r8Fx17pIHIcHnC8Bu7ZyTPODpuAUGwxSLfM14HuJs06Du+zX
hDUST5v4F+zHjPyd1meJ46sK6n0SwEuxBf8D5kebjQ==
      "], "lineTable" -> {{
        Line[{{-18.368000000000002`, -57.19999999999999}, \
{-12.319999999999999`, 50.879999999999995`}}], 
        Line[{{-16.450000000000003`, -56.80499999999999}, {-10.402, 
         51.27499999999999}}], 
        Line[{{-14.532000000000004`, -56.40999999999999}, {-8.483999999999998,
          51.669999999999995`}}], 
        Line[{{-12.614000000000003`, -56.01499999999999}, {-6.565999999999997,
          52.06499999999999}}], 
        Line[{{-10.696000000000003`, -55.61999999999999}, {-4.647999999999998,
          52.459999999999994`}}], 
        Line[{{-8.778000000000002, -55.224999999999994`}, \
{-2.7299999999999978`, 52.85499999999999}}], 
        Line[{{-6.860000000000003, -54.82999999999999}, {-0.8119999999999976, 
         53.24999999999999}}], 
        Line[{{-4.942000000000003, -54.434999999999995`}, {
         1.1060000000000025`, 53.64499999999999}}], 
        Line[{{-3.0240000000000027`, -54.03999999999999}, {
         3.0240000000000027`, 54.03999999999999}}], 
        Line[{{-1.1060000000000025`, -53.64499999999999}, {4.942000000000003, 
         54.434999999999995`}}], 
        Line[{{0.8119999999999976, -53.24999999999999}, {6.860000000000003, 
         54.82999999999999}}], 
        Line[{{2.7299999999999978`, -52.85499999999999}, {8.778000000000002, 
         55.224999999999994`}}], 
        Line[{{4.647999999999998, -52.459999999999994`}, {10.696000000000003`,
          55.61999999999999}}], 
        Line[{{6.565999999999997, -52.06499999999999}, {12.614000000000003`, 
         56.01499999999999}}], 
        Line[{{8.483999999999998, -51.669999999999995`}, {14.532000000000004`,
          56.40999999999999}}], 
        Line[{{10.402, -51.27499999999999}, {16.450000000000003`, 
         56.80499999999999}}], 
        Line[{{12.319999999999999`, -50.879999999999995`}, {
         18.368000000000002`, 57.19999999999999}}]}, {
        Line[{{-18.368000000000002`, -57.19999999999999}, {
         12.319999999999999`, -50.879999999999995`}}], 
        Line[{{-18.314000000000004`, -56.234999999999985`}, {
         12.373999999999999`, -49.91499999999999}}], 
        Line[{{-18.260000000000005`, -55.269999999999996`}, {
         12.427999999999999`, -48.94999999999999}}], 
        Line[{{-18.206000000000003`, -54.30499999999999}, {12.482, -47.985}}], 
        Line[{{-18.152000000000005`, -53.33999999999999}, {
         12.535999999999998`, -47.019999999999996`}}], 
        Line[{{-18.098000000000003`, -52.374999999999986`}, {
         12.59, -46.05499999999999}}], 
        Line[{{-18.044000000000004`, -51.41}, {
         12.643999999999998`, -45.08999999999999}}], 
        Line[{{-17.990000000000002`, -50.44499999999999}, {
         12.697999999999999`, -44.125}}], 
        Line[{{-17.936000000000003`, -49.47999999999999}, {
         12.751999999999999`, -43.16}}], 
        Line[{{-17.882000000000005`, -48.514999999999986`}, {
         12.806, -42.19499999999999}}], 
        Line[{{-17.828000000000003`, -47.55}, {12.86, -41.22999999999999}}], 
        Line[{{-17.774000000000004`, -46.584999999999994`}, {
         12.913999999999998`, -40.265}}], 
        Line[{{-17.720000000000002`, -45.61999999999999}, {12.968, -39.3}}], 
        Line[{{-17.666000000000004`, -44.65499999999999}, {
         13.021999999999998`, -38.334999999999994`}}], 
        Line[{{-17.612000000000002`, -43.69}, {
         13.075999999999999`, -37.36999999999999}}], 
        Line[{{-17.558000000000003`, -42.724999999999994`}, {
         13.129999999999999`, -36.405}}], 
        Line[{{-17.504000000000005`, -41.75999999999999}, {13.184, -35.44}}], 
        Line[{{-17.450000000000003`, -40.79499999999999}, {
         13.238, -34.474999999999994`}}], 
        Line[{{-17.396000000000004`, -39.83}, {13.292, -33.50999999999999}}], 
        Line[{{-17.342000000000002`, -38.864999999999995`}, {
         13.346, -32.545}}], 
        Line[{{-17.288000000000004`, -37.89999999999999}, {
         13.399999999999999`, -31.579999999999995`}}], 
        Line[{{-17.234, -36.93499999999999}, {
         13.453999999999999`, -30.61499999999999}}], 
        Line[{{-17.180000000000003`, -35.97}, {
         13.508, -29.649999999999995`}}], 
        Line[{{-17.126, -35.004999999999995`}, {
         13.562, -28.684999999999995`}}], 
        Line[{{-17.072000000000003`, -34.03999999999999}, {
         13.616, -27.719999999999995`}}], 
        Line[{{-17.018000000000004`, -33.074999999999996`}, {
         13.67, -26.754999999999995`}}], 
        Line[{{-16.964000000000002`, -32.11}, {
         13.724, -25.789999999999996`}}], 
        Line[{{-16.910000000000004`, -31.144999999999996`}, {
         13.778, -24.824999999999996`}}], 
        Line[{{-16.856, -30.179999999999996`}, {
         13.832, -23.859999999999996`}}], 
        Line[{{-16.802000000000003`, -29.214999999999996`}, {
         13.886, -22.894999999999996`}}], 
        Line[{{-16.748, -28.249999999999996`}, {
         13.94, -21.929999999999996`}}], 
        Line[{{-16.694000000000003`, -27.284999999999997`}, {
         13.994, -20.964999999999996`}}], 
        Line[{{-16.64, -26.319999999999997`}, {
         14.048, -19.999999999999996`}}], 
        Line[{{-16.586000000000002`, -25.354999999999997`}, {
         14.102, -19.034999999999997`}}], 
        Line[{{-16.532000000000004`, -24.389999999999997`}, {
         14.156, -18.069999999999997`}}], 
        Line[{{-16.478, -23.424999999999997`}, {
         14.21, -17.104999999999997`}}], 
        Line[{{-16.424000000000003`, -22.459999999999997`}, {
         14.264, -16.139999999999997`}}], 
        Line[{{-16.37, -21.494999999999997`}, {
         14.318, -15.174999999999997`}}], 
        Line[{{-16.316000000000003`, -20.529999999999998`}, {
         14.372, -14.209999999999997`}}], 
        Line[{{-16.262, -19.564999999999998`}, {
         14.426, -13.244999999999997`}}], 
        Line[{{-16.208000000000002`, -18.599999999999998`}, {
         14.48, -12.279999999999998`}}], 
        Line[{{-16.154000000000003`, -17.634999999999998`}, {
         14.534, -11.314999999999998`}}], 
        Line[{{-16.1, -16.669999999999998`}, {
         14.588000000000001`, -10.349999999999998`}}], 
        Line[{{-16.046000000000003`, -15.704999999999998`}, {
         14.642000000000001`, -9.384999999999998}}], 
        Line[{{-15.992, -14.739999999999998`}, {
         14.696000000000002`, -8.419999999999998}}], 
        Line[{{-15.938000000000002`, -13.774999999999999`}, {
         14.75, -7.454999999999998}}], 
        Line[{{-15.884000000000002`, -12.809999999999999`}, {
         14.804, -6.489999999999998}}], 
        Line[{{-15.830000000000002`, -11.844999999999999`}, {
         14.858, -5.524999999999999}}], 
        Line[{{-15.776000000000002`, -10.879999999999999`}, {
         14.912, -4.559999999999999}}], 
        Line[{{-15.722000000000001`, -9.915}, {
         14.966000000000001`, -3.594999999999999}}], 
        Line[{{-15.668000000000001`, -8.95}, {
         15.020000000000001`, -2.629999999999999}}], 
        Line[{{-15.614, -7.984999999999999}, {
         15.074000000000002`, -1.6649999999999991`}}], 
        Line[{{-15.560000000000002`, -7.02}, {15.128, -0.6999999999999993}}], 
        Line[{{-15.506000000000002`, -6.055}, {15.182, 
         0.26500000000000057`}}], 
        Line[{{-15.452000000000002`, -5.09}, {15.236, 1.2300000000000004`}}], 
        Line[{{-15.398000000000001`, -4.125}, {15.290000000000001`, 
         2.1950000000000003`}}], 
        Line[{{-15.344000000000001`, -3.16}, {15.344000000000001`, 3.16}}], 
        Line[{{-15.290000000000001`, -2.1950000000000003`}, {
         15.398000000000001`, 4.125}}], 
        Line[{{-15.236, -1.2300000000000004`}, {15.452000000000002`, 5.09}}], 
        Line[{{-15.182, -0.26500000000000057`}, {15.506000000000002`, 
         6.055}}], 
        Line[{{-15.128, 0.6999999999999993}, {15.560000000000002`, 7.02}}], 
        Line[{{-15.074000000000002`, 1.6649999999999991`}, {15.614, 
         7.984999999999999}}], 
        Line[{{-15.020000000000001`, 2.629999999999999}, {15.668000000000001`,
          8.95}}], 
        Line[{{-14.966000000000001`, 3.594999999999999}, {15.722000000000001`,
          9.915}}], 
        Line[{{-14.912, 4.559999999999999}, {15.776000000000002`, 
         10.879999999999999`}}], 
        Line[{{-14.858, 5.524999999999999}, {15.830000000000002`, 
         11.844999999999999`}}], 
        Line[{{-14.804, 6.489999999999998}, {15.884000000000002`, 
         12.809999999999999`}}], 
        Line[{{-14.75, 7.454999999999998}, {15.938000000000002`, 
         13.774999999999999`}}], 
        Line[{{-14.696000000000002`, 8.419999999999998}, {15.992, 
         14.739999999999998`}}], 
        Line[{{-14.642000000000001`, 9.384999999999998}, {16.046000000000003`,
          15.704999999999998`}}], 
        Line[{{-14.588000000000001`, 10.349999999999998`}, {16.1, 
         16.669999999999998`}}], 
        Line[{{-14.534, 11.314999999999998`}, {16.154000000000003`, 
         17.634999999999998`}}], 
        Line[{{-14.48, 12.279999999999998`}, {16.208000000000002`, 
         18.599999999999998`}}], 
        Line[{{-14.426, 13.244999999999997`}, {16.262, 19.564999999999998`}}], 
        Line[{{-14.372, 14.209999999999997`}, {16.316000000000003`, 
         20.529999999999998`}}], 
        Line[{{-14.318, 15.174999999999997`}, {16.37, 21.494999999999997`}}], 
        Line[{{-14.264, 16.139999999999997`}, {16.424000000000003`, 
         22.459999999999997`}}], 
        Line[{{-14.21, 17.104999999999997`}, {16.478, 23.424999999999997`}}], 
        Line[{{-14.156, 18.069999999999997`}, {16.532000000000004`, 
         24.389999999999997`}}], 
        Line[{{-14.102, 19.034999999999997`}, {16.586000000000002`, 
         25.354999999999997`}}], 
        Line[{{-14.048, 19.999999999999996`}, {16.64, 26.319999999999997`}}], 
        Line[{{-13.994, 20.964999999999996`}, {16.694000000000003`, 
         27.284999999999997`}}], 
        Line[{{-13.94, 21.929999999999996`}, {16.748, 28.249999999999996`}}], 
        Line[{{-13.886, 22.894999999999996`}, {16.802000000000003`, 
         29.214999999999996`}}], 
        Line[{{-13.832, 23.859999999999996`}, {16.856, 30.179999999999996`}}], 
        Line[{{-13.778, 24.824999999999996`}, {16.910000000000004`, 
         31.144999999999996`}}], 
        Line[{{-13.724, 25.789999999999996`}, {16.964000000000002`, 32.11}}], 
        Line[{{-13.67, 26.754999999999995`}, {17.018000000000004`, 
         33.074999999999996`}}], 
        Line[{{-13.616, 27.719999999999995`}, {17.072000000000003`, 
         34.03999999999999}}], 
        Line[{{-13.562, 28.684999999999995`}, {17.126, 35.004999999999995`}}], 
        Line[{{-13.508, 29.649999999999995`}, {17.180000000000003`, 35.97}}], 
        Line[{{-13.453999999999999`, 30.61499999999999}, {17.234, 
         36.93499999999999}}], 
        Line[{{-13.399999999999999`, 31.579999999999995`}, {
         17.288000000000004`, 37.89999999999999}}], 
        Line[{{-13.346, 32.545}, {17.342000000000002`, 38.864999999999995`}}], 
        Line[{{-13.292, 33.50999999999999}, {17.396000000000004`, 39.83}}], 
        Line[{{-13.238, 34.474999999999994`}, {17.450000000000003`, 
         40.79499999999999}}], 
        Line[{{-13.184, 35.44}, {17.504000000000005`, 41.75999999999999}}], 
        Line[{{-13.129999999999999`, 36.405}, {17.558000000000003`, 
         42.724999999999994`}}], 
        Line[{{-13.075999999999999`, 37.36999999999999}, {17.612000000000002`,
          43.69}}], 
        Line[{{-13.021999999999998`, 38.334999999999994`}, {
         17.666000000000004`, 44.65499999999999}}], 
        Line[{{-12.968, 39.3}, {17.720000000000002`, 45.61999999999999}}], 
        Line[{{-12.913999999999998`, 40.265}, {17.774000000000004`, 
         46.584999999999994`}}], 
        Line[{{-12.86, 41.22999999999999}, {17.828000000000003`, 47.55}}], 
        Line[{{-12.806, 42.19499999999999}, {17.882000000000005`, 
         48.514999999999986`}}], 
        Line[{{-12.751999999999999`, 43.16}, {17.936000000000003`, 
         49.47999999999999}}], 
        Line[{{-12.697999999999999`, 44.125}, {17.990000000000002`, 
         50.44499999999999}}], 
        Line[{{-12.643999999999998`, 45.08999999999999}, {18.044000000000004`,
          51.41}}], 
        Line[{{-12.59, 46.05499999999999}, {18.098000000000003`, 
         52.374999999999986`}}], 
        Line[{{-12.535999999999998`, 47.019999999999996`}, {
         18.152000000000005`, 53.33999999999999}}], 
        Line[{{-12.482, 47.985}, {18.206000000000003`, 54.30499999999999}}], 
        Line[{{-12.427999999999999`, 48.94999999999999}, {18.260000000000005`,
          55.269999999999996`}}], 
        Line[{{-12.373999999999999`, 49.91499999999999}, {18.314000000000004`,
          56.234999999999985`}}], 
        Line[{{-12.319999999999999`, 50.879999999999995`}, {
         18.368000000000002`, 
         57.19999999999999}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {
    0.03000000000000025, -0.40000000000000013`}, $CellContext`qPlaneLoc$$ = \
{{-3.3626094956184707`, -1.6596410971215902`}, {3.3626094956184707`, 
    1.6596410971215902`}}, $CellContext`rawArrayOfMasses$$ = {19.3, 4.9, 
    26.900000000000002`}, $CellContext`rawNumberOfMasses$$ = 
    3, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
    1, $CellContext`tauSliderValue$$ = 8, $CellContext`tick$$ = 
    True, $CellContext`u$$ = {{0.05400000000000005, 0.9649999999999999}, {
    1.9180000000000001`, 0.395}, {1.5020000000000002`, 0.935}, {0.488, 
    0.7600000000000002}, {1.342, 1.4700000000000002`}}, Typeset`show$$ = True,
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       TabView[{"dynamics" -> Column[{
            Dynamic[
             Row[{
               OverVector["q"], " = ", 
               
               Module[{$CellContext`qm$}, $CellContext`qm$ = 
                 ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                Slider2D[
                  
                  Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                  ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
               " 2 \[Pi] ", 
               Dynamic[
                NumberForm[
                 MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}]], 
            Row[{
              Text["time, normalized to one period, t/T = "], 
              Dynamic[
               
               N[($CellContext`tauSliderValue$$ - 
                 1)/$CellContext`dynMeshSize$$]]}], 
            Row[{
              Dynamic[
               Manipulator[
                
                Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {
                1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                ContinuousAction -> True, Appearance -> "Open", 
                AppearanceElements -> {
                 "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                  "FasterSlowerButtons", "DirectionButton"}]]}], 
            Row[{
              Text["oscillation scale factor:"]}], 
            Row[{" " Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], 
              Dynamic[
               NumberForm[$CellContext`scale$$, {3, 2}]]}], 
            Row[{
              Text["Angular frequency \[Omega](q), selection:"], 
              Dynamic[
               SetterBar[
                
                Dynamic[$CellContext`omegaIndex$$, ($CellContext`omegaIndex$$ = \
#; $CellContext`bRefreshDynPlot$$ = True; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
         "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
         Column[{
            Row[{
              Text["number of mesh intervals "], 
              Manipulator[
               
               Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                   EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {2,
                30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[$CellContext`freqMeshSize$$]}], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}], "parameters" -> Grid[{{
             Row[{
               Text["mass: "], 
               Dynamic[
                If[$CellContext`rawNumberOfMasses$$ > 1, 
                 SetterBar[
                  
                  Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   Range[$CellContext`rawNumberOfMasses$$]]], 
                 $CellContext`massLabel[1]]]}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                 Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                  ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {0.25, 
                 Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
             Text["coupling to neighbouring: "], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 1, 
               SetterBar[
                
                Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 Range[$CellContext`rawNumberOfMasses$$]]], 
               $CellContext`massLabel[1]]]}, {
             Row[{
               Text["horizontal: "], 
               Style[
                Subscript[
                 Style["k", Italic], 1], FontColor -> RGBColor[
                  Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
               OverVector["a"], " "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
             Row[{
               Text["vertical: "], 
               Style[
                Subscript[
                 Style["k", Italic], 2], FontColor -> RGBColor[0, 
                  Rational[2, 3], 0]], " || ", 
               OverVector["b"], " "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
             Row[{
               Text["diagonal: "], 
               Style[
                Subscript[
                 Style["k", Italic], 3], FontColor -> 
                RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
               " || (", 
               OverVector["b"], " + ", 
               OverVector["a"], ") "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
             Row[{
               Text["diagonal: "], 
               Style[
                Subscript[
                 Style["k", Italic], 4], FontColor -> RGBColor[0, 
                  Rational[2, 3], 
                  Rational[2, 3]]], " || (", 
               OverVector["b"], " - ", 
               OverVector["a"], ") "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k4$$, {3, 2}]]}]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Row[{
                 Text["coupling from "], 
                 Dynamic[
                  $CellContext`massLabel[$CellContext`m1Sel$$]], 
                 Text[" to: "]}]]], 
             Dynamic[
              Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]], 
               Blank[], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  DeleteCases[
                   
                   Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Row[{
                 $CellContext`kLable[5], ": "}]]], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Row[{
                 Dynamic[
                  Manipulator[
                   
                   Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}]], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k5$$, {3, 2}]]}]]]}}]}, 
        Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], ImageSize -> {250, 350}]],
       Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 12}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 1}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        12, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10}, $CellContext`rawNumberOfMasses$$ = 
        1, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
        1, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         Switch[$CellContext`tabNumber$$, $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], $CellContext`freqTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
            Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
          Blank[], 
          LocatorPane[
           Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                 Dimensions[#]] < 3, 
               
               Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[$CellContext`rawArrayOfMasses$$]]; 
              If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                  $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                
                While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[$CellContext`kArray$$, All, 1], All, 1]]; 
              If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                
                While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 1], 
               Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                 Part[$CellContext`u$$, 2], 
                 
                 Part[$CellContext`u$$, 
                  2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 2], 
               Part[$CellContext`u$$, 2]]; {
               Part[$CellContext`u$$, 1], 
               
               Part[$CellContext`u$$, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
             If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
             If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
             If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
             If[$CellContext`omegaIndex$$ > 
               2 $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
             ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
              2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
             True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
           $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
           LocatorAutoCreate -> True, ContinuousAction -> False]]]), 
      "Specifications" :> {
        TabView[{"dynamics" -> Column[{
             Dynamic[
              Row[{
                OverVector["q"], " = ", 
                
                Module[{$CellContext`qm$}, $CellContext`qm$ = 
                  ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                 Slider2D[
                   
                   Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False,
                    ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
                " 2 \[Pi] ", 
                Dynamic[
                 NumberForm[
                  MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}]], 
             Row[{
               Text["time, normalized to one period, t/T = "], 
               Dynamic[
                
                N[($CellContext`tauSliderValue$$ - 
                  1)/$CellContext`dynMeshSize$$]]}], 
             Row[{
               Dynamic[
                Manipulator[
                 
                 Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {
                 1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                 ContinuousAction -> True, Appearance -> "Open", 
                 AppearanceElements -> {
                  "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                   "FasterSlowerButtons", "DirectionButton"}]]}], 
             Row[{
               Text["oscillation scale factor:"]}], 
             Row[{" " Manipulator[
                 
                 Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], 
               Dynamic[
                NumberForm[$CellContext`scale$$, {3, 2}]]}], 
             Row[{
               Text["Angular frequency \[Omega](q), selection:"], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
          "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
          Column[{
             Row[{
               Text["number of mesh intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`freqMeshSize$$]}], 
             LocatorPane[
              Dynamic[$CellContext`qPlaneLoc$$], 
              Dynamic[
               (Graphics[{
                 Lighter[Gray], 
                 Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                 Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
              ContinuousAction -> False]}], "parameters" -> Grid[{{
              Row[{
                Text["mass: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                  Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                   ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {0.25, 
                  Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
              Text["coupling to neighbouring: "], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]]}, {
              Row[{
                Text["horizontal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 1], FontColor -> RGBColor[
                   Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                OverVector["a"], " "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
              Row[{
                Text["vertical: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 2], FontColor -> RGBColor[0, 
                   Rational[2, 3], 0]], " || ", 
                OverVector["b"], " "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 3], FontColor -> 
                 RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                " || (", 
                OverVector["b"], " + ", 
                OverVector["a"], ") "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 4], FontColor -> RGBColor[0, 
                   Rational[2, 3], 
                   Rational[2, 3]]], " || (", 
                OverVector["b"], " - ", 
                OverVector["a"], ") "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k4$$, {3, 2}]]}]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Row[{
                  Text["coupling from "], 
                  Dynamic[
                   $CellContext`massLabel[$CellContext`m1Sel$$]], 
                  Text[" to: "]}]]], 
              Dynamic[
               Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
                Dynamic[
                 $CellContext`massLabel[
                  First[
                   Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 
                Blank[], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   DeleteCases[
                    
                    Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Row[{
                  $CellContext`kLable[5], ": "}]]], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Row[{
                  Dynamic[
                   Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k5$$, {3, 2}]]}]]]}}]}, 
         Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
         ImageSize -> {250, 350}], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 12}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10}}, 0, ControlType -> 
         None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{907., {288., 295.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax, 1]/2, Part[$CellContext`qMax, 1]/2,
                Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -
               Part[$CellContext`qMax, 2]/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {380, 
        380}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, $CellContext`k] \
$CellContext`glConstMMax^(-1)/350]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
$CellContext`glConstMMax^(-1)/500]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 0.25, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.605485449360225*^9, {3.6054857351865735`*^9, 3.605485836298357*^9}, {
   3.6054858766426644`*^9, 3.6054858775367155`*^9}},
 CellID->268709778],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{}}, {{{
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.4130444789719152, 2.7569151748438447`*^-18], {Complex[
      0.5861464486009521, -2.825764865181982*^-17], Complex[
      0.8102051226649282, 0.]}}, {
      Complex[0.3140688520221368, 1.8976567723170987`*^-18], {Complex[
      0.8102051226649281, 0.], Complex[-0.5861464486009522, 
      2.8257648651819845`*^-17]}}}, $CellContext`dynMeshSize$$ = 
    14, $CellContext`dynPlot$$ = {CompressedData["
1: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
lQcK3tGRmWfk0f/KHaQZ
     "], {10}, 1, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 14}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 16, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyVfQd0VlUWdURAVBgRUVEHHcCOIiidwA1VinRBmkoRQem9g4BSRFQcFXAE
G4QAAgqxAJEXINRQQkkooSgGW+gDtlB+17D3eevuR37/nzVrudZZb3bed867
79179j7nlOjcp0XXPDExMQeujYm5+q//tij+0ZebFuVLbjIj8/fzPXKCyv+u
8c8WffY72uvck9x21MXfgoKnzm0/8OVes1ddOmfFhTfPBgm9N2QUrZZh9nJu
8h2jS50Onp7U7jtXZ5fz8bODD/rv7r+j5g7ByQpGDFnS7o9eaWZv9r/rM4MH
X+qyIetqtacGczIWlX7z0dAeg3/La/b87+n6O/R6d7r+HSn/fmKX4rsHi/4x
fM26dLPHXr4ft7BUj5ij94a/94nL9+92t9xXc26R0D9lL/9e13nf4T6d2maq
f9y8kcu2jT+Wqf503Ut9/e7iPZninxw3rsPwR2dXz3QJf2wZU/j3PBaX/eu/
f77tub1mZ1yafl596+kTGWZnXH5q0viNi2+mm51xeWNIytS1/0wX/OxgV0rL
U1X/3C04WcFPJ4vdetPD4fWMy+i91U/WTFd7ajCz4+sxLa/eY3bGpW/vZYVr
zNyr17vucUlXn3liv+K7jmNHXrMgNfQD4+IGZ333z4wDZmdcOoy76dBP9Q+a
nXF5Y8/mLw/dcVD9467K/le37549oP50Sx6v8Ub7qP/d6LMzXthwZp+7mP57
/adqxVhcOiw+fmfDNXvMzrhU7JJaakah0M64LCn7drEvSoV2xiVf1xN7C0zb
I/jZwbEj++9f0Xyv4GQFy26tvfSnHuH9MC51fk3vdHzrfrGnBifv6/T2uPoH
zM64PNrO3fXerIN6vXu+w/gyZd4+pPju/K1/xk/Le9jsjMv2g1N6nDwQXs+4
dN2Rkm97idDOuNT9oG6D/x47oP5x3xz5rcHvL2aqP93d10+fVW1PxP/uzifn
fdlsyF4X/1yDu2NvywkYl5L1bm3/eOs9ZmdcFjVY9sWrY0M74zL0wz96TGkR
4jAulUu/NenEhH2Cnx2UW3XHoQ4X9wtOVlBvQPMeH712wOyMS75hL9zV7s+D
Yk8NZt3cLKVKkcNmZ1z+seznymcXHtbrXeelj8w697naM13T66v9+Wqp0M64
9Pl65Dvnix4yO+OyZeVnN324KLxPxqXOjknnOpbMVP+4dqOvafntgn3qTzfu
xj+3tBsQ8b+7u8Tb17aasQfvt3MWl3f2tZzUcXpoZ1yqPdhk4bnme81ucVk+
5eENH+0zO+PS7p1en5Yvmyn42UHrXyvnZC47IDhZwaNT39lT8ORBszMuc1sM
b15z2SGxpwbfzZnwwndZoZ1xeW9isY8+GBW53jUoXqvayqkRfHfNdcXXba4W
3g/jkl1myuw1yfvNzrjEZe3JuaVD+HsZl1f/6LR9mIv4x80f3vPVrqMj/nQz
pvWbfV+RiP9d1rGuJy7+moF1dMricnrR6jEHv9lrdsYl7bly7fpt22d2xqXp
n4MXvHVDptntPXbk+YOu7AHBzw4mP9an8NCTBwQnK/it+ulq15c8aHbGZct3
X7Vtk3hA7KnBcz/2aH5gYfh3GZeer9d4dfID+/V612HfpOrde+xVfPdt6Sl5
i64P/cC4ZB3K06D15HSzMy6vn6leaOPe3WZnXE4NPFn10Jzd6h+3ouEdXW5M
3a3+dKOffeq+yXHp6n8348Kys4fezHDN/hevoxaX5svrTmxcfb/ZGZf1zR6s
0PbuTLMzLh+Pfe3o2dWhnXH52TV5sOvBTMHPDn5IHNrg1eaKkxUEywqUWntD
+HcZl8YFHzuzpeResacG/epdne9fX6SbnXEZ1+lcSpc7d+n1rse5x3fdfSJN
8V3+PFPPFu+83eyMS/ln7u8+/8g2szMuAz44uGnQsvB6xqX0lOQ+4z9PU/+4
Mu817/dz0k71p9vd4pvyg7alq/9dozElH5zdjb833eKyslmxnOlPZJqdcXlq
9Kit5SaGdsZlR/EmU7+6LbQzLke++rhy3h/2CX528PKfJ6oG3+4RnKzgX/nP
JRcqkm52xiXu+W+6jJuxQ+ypQecGB5tm9Eo1O+My6OZb8rxeOkWvdwuujs3e
NSVZ8V2Vk63GHblntdkZl4NPf7zntqYhDuPS8sZGn5z5aIvZGZfNJS5Uv6H9
TvWP+0eVaZk1t6erP92gw3d88/hLEf+77stSNvdrtd/x9zAub5VpkjOoc6bZ
GZeVRXp1/un98HrG5abrp3X8Imev2RmXE38OvL788AzBzw5m37S1YrNSuwQn
K+jT/qmdb9y1zeyMy6e3b5waszFF7KnB5mojRp2o8IXZc/vHuOj1jIviMy79
5H4Yl1ly/4zLcfm9jIv6h3FRfzIu9D/i5RgXxot2xkXi6xgXeR4c45LqPz/O
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
O003Zf0SeT3jlerPhbd4dfH6Z5q+K2C/BX8OWmJsD9T75/F0nmF/RV7POHKu
PfF5/8noO8HrGd9v0VeB+PT/GfSj4PWMbxb6Rfjz17Ld67ifPJ5e9K/3JPpm
8HrinwJ+K9wn/TMAfTn8OW5n3QrgNP2b+NLO/ooyR8z6ZDbLxf8XxD+H4J9m
4k/28bj8HJpeKGC/F17P54H9QJrJ72UfEuKYTgN9aXg9n4ex6NOSI/5/Df7n
9XweeqDfC/F5/yXQV4fX8/fmRx8b2hn38uh70w44tu9C/x9ez/sZiD48tDPu
7C9EO+PLfoC0M44Zfr8j+13sYyPzyILvPP+H/hzv+TP0A/sUwb/UtwQn0M+q
mfzeGt7vTbc4Pos+S7QzXgPR36mh+Gew5590+10L0Ldqwf/+rUjiffZDfzBe
z3ixH1dD8XMZz8/pFkf2B6Od99MG/cRoJw77oXW5b3Dn+wavSeLv3Yl+a7ye
cSyMvmq0M45+XzibUxb4fcNsrlng9yuLiaEfenp90mJiGJd5Xn+2mBje52qv
L5xlFWOL1Tr2y4xTs2N3vfvlP25puTmJftC/y7ikCQ79v1j+Lv3cX+6T+B8I
Pv18QvxAfxb1+p7FxGi/MpkvFmxGvGQeWfCkH1/Tpez3nwdHf1bBc2XzyJiP
wvPpz1NLjB2K57wW7Py94/x1ZzqK5/z14ujPmlhfxKF//PdquqOf/fdY+Hf5
/iQO/cl+Wc0E/3vB1+uJQ/+zL1azXOxtxD+j4B+ZO2Z91WROWSDvT4vXY3gP
n/d5ZOtDxesZx2vwPm8pfivpv/8tvj3xXiU+7+d1//tiv2s8vkd4/5j/+T3l
9Yx7f3zvaGfcG+P7SBzG5Rf/e233H0gfLf7eg/73OnI/T/9fn4fo36Uf6J92
2F/58+bCvlW8fz4Pfp+o0M5+4y3FP7L/sfie8vdjFhfZB9pzcgT7tJY+rxpw
X31R/PYd/HZRfi/7k/vz4MK+6LTbusb+Fvtwu5+TOBfwesadfexb5+J/Xs+4
/4F9uD9vLtvJvt1w8mCfz/vh76qL844/n+6s4/wC2hkvmZtg/pS++haXOJx3
LuXye58U/5zy5wtYXK7z5xrY/T+O+4/3+ccg1Z/TYfHiefCqDN9vk/x5BxZH
niuJz/vs5c8Zsd81B+dT2hmvcjjPzvV0AmF/Hn8+XbaTeSIWxzY4R/tz6866
wf78FIsX++20zuV3ydy0QOaGRPyZkIsfEuR3NcfvapWLH2z+GuLYFXmSCz5f
Zn1m/Llykfk19rvYz4c4vE/2k+H1jFc+f16P3afM/bG4lPfnB1lcKiBPxb/L
38U+MP48u7CfzFMSL5nXY3bOUVogfmC+ReasBbX9fF3Enxdz8c88nz+yviu8
nvGVPKr9XubxiMO/2wb5Z38OXZgXpZ1xPIk8KnF4n+yjwusZxzp+njaOcVyE
vC5xeP+dkG/359xlO+aNF0q8BiNevJ5xZ/6Z+PTDC8j/+/Pyzrol6LtCO+PL
PicJufg/IRd/Joh/asI/zS/n+Q2nC/igBPGD8C/hc4v7Jw7/bgb4Jn9uXWJs
H/AjtDOOM8GzEIf3uQB8Fq9nHEf7PI7F8WfwQcTh/T8EHs2fi5ftyDfRbrwG
+Cni8Pf+FzydP0cv7JdCO+PFvijEoR9Wgh+knX6I9/lEi4vwdObn3fAzcYw3
BI/ZQvyZ4POD5p8H4B/a6c+RPk9qfjjl85X2u5bjdy0QPwsPa79X+FO7f/Kw
4KEsLh19/tfuU/hc+7sfghcmDuOV0HtDRtFqGXY98TsJvuVRcf0CiW9zxJfX
017o1LntB77cG+G1yacrry3z+4yf6oZ5f8prcz6j8tpj/LmBxk91xJxB5bXT
oR9QXlvmFSYzvpxvqLz2MOgWlNeWOYnGv3CuovLaE6CXUF5b5jMaP5Xpz3M0
HkrmPxoP9aw/L9L4phsxX1J57dnQeyivPc+fy2lxlPmYkXgpr93fn/tpcdmD
uCivPQ96G+W1Zb6n+e2CP2/U/Mw5ocprV4ZeSHltzhtVXvtnf86p+YdzS5XX
bgy9k/LanH+qvHZLf76q/S7OUVVeOxZ6LeW1qZtSXrszngfltanjUl57B/Rm
ymtTV6a89g5/nqzZqXNTXnsp9HvKaw/25/Pa8yBzci2OVRFH5bWL+/N/LS4y
n9f8KfN8zf9F/PnC5h+ZC2y/i3OEldf+yJ9fbL9X5hHb/XN+sfLaf/rzkXO9
T/5d6leV157pz182fJm/bNdTr6u89kR/vrPZqR9WXpu/V3lt9iVTXpt6WuW1
6R/ltanjVV6bumLltTl3W3lt6pyV12a/KeW12e9LeW326VJem32llNdmvyzl
tafj7yqvzfoC5bUVn9dzHrry2qyDiPDasCuvTV268trU1SuvzboA5bXZj0t5
bfbjUl6b/a+U1+a8e+W1WdegvPYs1KEorx2gjkZ57aaoG1Je+z7U4yivzT5O
ymsXQX2T8tpNBF+vV16b9VzKa9OuvPYQ1BMpr90f9UfKaz/n9ZUKedI01Nkp
r/0H6rCU117q9XcKedUJqAeM8NqoR1NeexXqDZXXTkSdnfLaX6IuUnntq9C/
SHntW1Evqbx2OuoZlddmHyHltdmfR3lt4iuvfRp1o8prrweO8tqTJb60d0K9
qvLa2xAv5bVfgf+V146Bf5TXToQ/lddmPbLy2qxXVV77OH6v8to/oW5aee3W
qCNWXvsb+F957c9Qj6y8dn/UfSuvnQf9f5TXboK6bOW1x6M+XXntT1Enrrx2
YdSnK6/NfjXKaxfz6/Htd7GOW3ntoZ7/Q3/+4Pkz9APr6OFf47XZv0V57RHe
7w157VXoA6C89rPoP6C89nzPPyGvfQJ9FZTXZh8V5bX/hT4PymsX9Pwc8tp3
oH+F8tqvoN+F8tr3oM+G8tpF0Q9Eee0e6PuhvPYbXt+SkNf2+9uEvPYCr59G
yGuv9vp4hLx2Hq9/SMhr5/X6lvDfX3F5p2rJ/nUnRXjtz+XvMi6FBYf+LyB/
l37W+yT+YsGnn38WP9CfF73+QiGvzb4cymuXQLyU157ox9fy87f6z4Pl52/D
c6W89jE8n8prd8Jzrrz2j/66szx8sr9eLN8+GutLee0R/rq2PHw/7z0W/bvK
a7MfmvLawwWf17P/g/La7NumvDb7OSiv3Q3+UV67kP8+tHgl+O9Pi1cjvIeV
174J31Pltfk+V15b3v8W38/xXlVee4X/fbHfxe+R8trsk6C89gl875TXro7v
o/Laqf732u4/Ufo88Peyj4Hy2txfKa/d13sewr/LfYLy2kuxv1JeexD6Kiiv
7fcxCO3DYFde+5S//4nEV3ntlf4+0J4T7tOU126MfbXy2twHKq/N/aTy2tyX
Kq/N/a3y2vfiXKC89p/YJyuvvcPfV1vcuQ9XXnuAv283HO7zldd+H+cd5bXZ
X1d57cF+X1/zp/R9tbhcxHlHeW3pH2v+kf63FpfA77tr989+v8prv+P3kbZ4
8TyovPYgvx+vxZF9myO8tt8H237XazifKq9dBedZ5bWlX7fdTwW/37XF8Vec
o5XXHu7397Z4sa+48tp7/L7TFkfpa23+lH7a5ofefh9v+11p+F3Ka1fx+3Vb
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
bxiv13ptXm95SOx/eL3mtebI/pn14Lxe813WRxr+6YJ9Gq/XfNccORewXph2
+o1103PkvMD+eNJnOKiF+mK/33WWY5896XscdEPd8Rw5XzBvxuvpN/YtnCPn
DubT/L7iYT3ynFzyadZnGH5jXbb1Y2dfStRZ+/23E2PLo075vJxfTiMvd17O
L/WQl5N+vFbPe17ONUuQr5N+v0Fb1PnmlseLF56U9dHn5RzE/F688KSdUf/r
98E+6z5DnXK88Kcvoi74vJynmCeMl/PUQOQJ4+U8NQt5wng5T41DnjBezlPH
/iZPGJ9LnjA+lzxhfC55Qj1PXefrKCL1I3qe4lwAPU+xXkbPUzrXXutK9Dyl
8+W1TkfPUzoXXutN9Dylc95Vh/93+UzGnfPZc8tz6nlK549rnlPPUxdlbjif
f50PrvUsep7Sed9ah/L/my/V85TOoWZ8dd40f6/OleZ7YJLMj9a6AD1P6Txo
rcvQ81SczHfWugw9T+m8Zq3L0POUzju284XMKba8qMwppt90HrHlhWTuMP2m
84Xpt0UyR5h+Gyxzfukfnc9LP2xAHlXPUzrHlr83ZvjlfKyep0rJXEitU9Dz
1B0yp5K/d6HMjVX9v56nUmQOLJ+T+2WOp/XRkjme9MOV56gmxv7vONX5g8h5
6ha53vKTgs/fu+GKc2ZDPb+ep4rCP3qeulXmZqreW89TOgeT958kcyFN5yPz
HDV/ruepH2V+ourh9TwVM9Cfk6i6dz1PDdU5bvhdV55jmBjLOYZ6noqVuX58
PovK/D7+Xp3Tx+dzuczjsz51MnePcdT5etaPUeboqT5cz1MDZS6e6eGvOLcu
MTInjnHnnDg9T+l8N/qnkcxxo390Xhv9w7lsep7SeWr0w0CZm0Y/cD6anqeu
PI8sMbaNzP+y/LzM7eLv1bld/L06n8t0KTKHi79X521ZnyWZq2V9L2V+lvIp
ep7SeVjKs+h5SudbKc+i5ymdY0W/cR+o5ymd66S6Vj1P6Zwm1bvqeaq6zF1S
Hayep3SOEv2m85KUx9HzlM4/ot+WyZwj+o3zjPQ8pXN/LN8oc3/oN53vQ7/p
HB/6Tef10G+xMpeHftP5O8or6XlqkMzTUX2snqd0Po7yU3qe0jk19JvOo6Hf
dO4M/aNzZ1RfqucpnRfD39VJ5sIoP/V/AICheCM=
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1: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

            "]], 
           Polygon[CompressedData["
1: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
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxNmXn8lmMWxn/vr+ftfp6SpchWSPumRptUJCQmyxSRMBRCZFeJlPZV+04i
2UIkTNqQZGzDhDEMYzAYW9aImO/1uc7nM/PHec/1nvs8576fezn3Oeep1//y
XoMrKyoqNvFTBd6kXFHxUamiojH856yi4lXwDviP0N/AP8FbQteDW8NXp4qK
SnSXFhUVTfl/EfIm8AzZ2+AyfDfoXfAu8Ea0XS778CV5RUUNZMt49sHkfm4F
74rs9ZLbfop+f4H/Cn0A/k0y6DHwm/DXoFfAr8Mfhh4ArxROtrMOvgp6HnwH
vA1t54EPjfHL5tPw+6B/gtfDR+Zu/yPjWZnc/23gh+B3ovMgvAXj+xJcDd6Q
/0Pj3d+A/gJ+C/4u9BT4H5lJeF7y+J8Dvw1flMxnYf9f8L8i/wj+WeZ5+xL+
JDo5/cxD50P+/xn5xxoT8ifAM+F/gqqicyc6LWKNtFbN9R7gZvBE+9aS9T7h
/zvgpmWvk9ZLfWgeftC4sHMr8/AG8keQ/R3Zxnivf2aezw/g78eYNfYRufs5
m2eXJrfPBc/MPWcTwMcgH4B+e/i9yNaCV8D/A70I3gJvBw0Ct4Wvh+4Gj0b/
1VhrrfkCbD4LvjV57SW/G/ws+BnwC1oH6FHwK5mfXQd+GX4YdCO4I3x+7vbp
jG1trNE6+O+g4TGGtsl75ij4nmXvk1rws2gbC/6j+oTu0V6SDehp8Cb447FX
12S2K/sb4Rsyr93T8eyfwJvjfR+PNX0RvCre5eUY/0taf+ilwPdDd4Dvg8/I
zcfzLovhK5Ev0ZmAVsQ8z8o9J7ckn5f14Eczk/Cc5DHfBX4MPjs3n1R4vjRv
nXVWY11uy0zCSzUWaF7ghbnP6EyeXa13Rv4EfGryfExGPkbjQD4Z/nXmNd0W
djSfd2luoIfi2eege2Ou9Oyd8HHYeV7nRHsA3gm6BnwE/NvYG99k9lk6Fz15
7ovM/kF9tWQtvwI3h9+PrXrwLegsKex3bst9vj5E55lk3yU/uSnZv20D7w7f
A/oYXLPsM/uCxp/cti32zO08uxd8ObY3QP3A/0anNvzNktvqQp+C/6wzgs7+
/L+D55ZCnyB/Pln2LbiO2gr73MeTn31LawdeXNh3rwBvhg7U+Ub2RLLOlpDL
zmvwfWh/H7x32T5RvvFOvTvP9NCzuf34u+H3VmF7mfyD/B86Q+GX8NyV4AHy
O8nr/uD/7THh8cl7YDn45uR11d6Ym7zfVoOnh1zrPiF5D68L3649rD4n0s/E
ZJ05yJYl+8Vphc+X9qTO09zcZ25qYaz9Nin57GmPjU32g5/LP4CfjDOoZ+ep
r9ifm2PvjUuW63zfUthX6zx+mtmmzvUsdPol+4bLw5d+pzMB/h6+ueT/vdA5
TfOGfBw6vcEXg1+DJjCmKshORTYa/dPhpybzQbSfGeexL3wL/69A/zvaT4b+
gOwiZGdrjOick9nOVSX3cUbyGekB78P/G0oeRxdoBLgr/PM4Izori3PfS/Ox
+ZX8UdxNxyWfs/ORV6f/f8Q83IT+FeCjaf89dG3J+0F3k+IExQsb0GlF7LEP
/MjMOt0yv/eByCeW/S6TkZ8Hv1Bt4GPgOzPv4Qp07ip89nTXVyn7PlJcsiR5
nrX/FybfC8uTz7z8zGL5j4gNdHa2Z767df9ti3d/OOIH9XN7xCo6Ixt0NpNj
JPkHxQlbwLfDT+DZYeDj4T0yxzzHwY/SvATurv0bOprP98JHjcXWKK01dsaA
f4/sQvq9lP4PYk4W675GPknvibxn5nmW3knh306E95ce+ufBV+rcgr/C5rmK
7bQW8BOS5/tM7LST7wD31Z7RfSe74Drwy9A/EL5f5rtbevuHXO17Q/3kP+VD
AkvWiv97wftgp2bmO1T/D0XeC1xfvlF7X74RXpf/J4IbK5bJjMvw4Yx/D/hp
2Nkt9PWcbJ5SclsN6FzwrprvzHtmMDyDBoITfBfte3D1zO+oczFQd7rmIMaQ
Q6eHfkl6MYbx0ALwBTorme/9s3j2MKiexsHYfiGIPkHvrv0Sz8rGRMZ/Kfxq
dA6Od28gf6xzGvMgeTfwbiE/ClwDvjNsyvZlmfeGbNXWudM4Fa/R1h38Pfwn
qC94B3xf+QLwQfCf+X98yCcwnovkCxjPATq7Jb/DxdDIktu2V/Fc/VjF9oUl
U78ngQ9IbpO8SXJfR4IL+CWxtwdmHpPG9h38m6oVFYdrTtCpCXUGV9GZ1dpq
/6Oze8zDHqHTE7w/vDLWUeu5q3wKeD+9OzZbg3eRjwk/eU3meewW8gt0F4Kv
hV+h+wN8Jbxa8tzuo/WCDgF/i7082eb34F+gluCv4VWRdwTvBB/L80O0dvBK
7QPwz8gn5e7/usL9XiW/pjiCtuPQ2TP6OiLmSn11jbXWe3WK+VG/XWJ9NX/t
oXZQW+jYwD9Wtb7m8CtwU/Bn8OH0OQ18fWbd7v+n31x+G35m8lzpvpbNNvKr
JdvRO/4G/xxqAv4PvD784Oi/beA2gY+JMf0bvUbwj6saa8w74N+yrn1iDwxh
TFPB1+keSOZDCs9N+9L/3rWhzkhQ/einQfB2Qe1D9il9dIj5vxFbU7F5TZwd
+aJfqzgeXgJepDsT31cdf3gDfHVu/qJiJZ65HvwC+Eb05qI/Un4Ancbo75Ib
j0PnVXRugu+FfAR8VOa4dwz8cXTqIs/gV9NWE3wVfDRUG3xz2Xf1vuAr4ZdD
B4fOct2xJce9E6D7wZPlX2jbDj4Z/ih290P/t+TnDoXaVHr8DeA57au0D9F9
nnFeCy8q/X8IVAt8XYx5XLzjz8nv8RL6j/HsSPDL4FFl3x36/1Due+Mp5J+g
fzZ4I/gceFbp//dg6z5sjtP68n+n/IDiX/Qvhm/WuYDvjf6F8Edytz+LfAp4
ovwr+G/J7/s+fBKyGSW3naQ4m2f/AO8DVYJPg/eCSiG/BEqV7m8qVA98Gfxm
nl+KndHwQck2tU/60rYnOmeWHY9rb5yldUneM8PgU3hmUazFA7nn83P5IdU4
wFO0popf0bkB/mJyHeUB+Xz4Z9rTyh2T5+Qb+NDkeoXi4aMUu4G7lh1ra/zH
w6dn9l23aC/Q7wnI1mDzXnB38BOF7cxSbKFzFHGs2pQ/KI94E35P7nv/XfDU
3HWMm8DtVWcBd4B3irzjcHiXyC86w8fq/ou9/XqybBV93aU6ifZF4Ttxjvyq
fKHiVsbfMeZwhOISdO7ObfsRxRvwr3We4e8kxyofJeNjlMug0ybyKfVxIvRb
yTnaKclx73js1ef/9/ID8GX8PwT+IM+2Ul5V8v+esWe0dxrF/Cjen4b+HN15
6Bf8/6Lk+a0X66V1u46+btX8o/tUcm50d2Gs8b8CPyByLuVeK3Kf0SfRaV12
Xqn8cr+Y27oxhrdjPxxUdp6l3GxDxJbK9ZQn6t2fS8779tXZKmxHNTH9n5t5
v+kdVCNQrWAK+isLr+urms/Mcel78LbMQf1K+wz5i7aB12B/OvpvFJY1CL0Z
ZfsZtd0S/mpa2fd+j7jL2oW+nptM2z6Vjk3HFK4RjAwfVS/81DWF7+ABirvo
9zBkBym+Cx9bLXdesFBzhO56rSny2vDqufurE/odwAcqP809rtfRfxLcHHlN
+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
            "]], 
           Polygon[CompressedData["
1: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
1DzQ+dGYj02uKVBbQIPpkVxTobaChnJ14fN5o/BTrK/C+SHaCfnr+sKaUSk3
h4fLzynMnVcH1+X+G+TWvNC+qEFRi0JDu6XwGmTtboi1yRqH68BBWftjk/V8
ODhcHE0KbYrxVsl3v9pbnFUa87YqrplRO0PzXR3rAZ0ejWWD8PvJ3AnOAndh
z8CdngruTM0jBR+8ufCYdXLX0Pgu6jXwqX80lsz85rTcNbOPk/cQ3AoOxt6i
BlA9+Cd8lByRvckeJReB88DVNgYXgt/1jfz8nsL1J2qDaPbUc6gXUltBg6N+
cFNhfv5nZj2Re4DLwbm4N3JicuPzc9c3P0nWN3uFHgt/RdulBrgs+NvJufvA
p+GHvUMf+CxZI8A+JfRZ8kG0IDSB1YX5Nto5GvIS4V+TuR8aCFoI+VuXmK93
kzVdtN0i+OV84Z8iH7gxme93C368vDD/7B78+a7CGghayJm565VopGil7P8V
yZol2iU12TuTNdItEX/vFV4kXJZbQ304+R7grj1Db6a+UR71ih6RLzSO/PPF
5BootVA0efJR5oxcBA7MXJLPUrtAE38zec2dHvPNWrwr+Vl/zqyXosdQ56Km
8FtyPn5Z8PGvkvUbalVoxKtCD0IrRB8qRb6OdowGtTb0lnmhn1BbYX7+yLxm
yO2eT47V9SP+oOGST1ADRNuF/w+NfH9lYU5CbORM5GxkTVE7rx76C/rMVcLV
hL9NzvfRntGjHgl9YGbcP1om+gTaKHpRHnrZuNwaKGsHfWJU6A8PFtYv0JLR
N/5MfucDoz9rgXzqjPj++yPfOiv0su+S9Ta0XvS1Rwu/c2IXMYy1wPr4K3NM
JjZTz6TWQ82H2iT1H2pB1AuoZRHPds7dH+2beLF95J+L4rx8JfIxatXkrOSu
n2XOL4kJ9K2ZO1YQvypzzz+15YeSc2fuj1hbI7f2zv6nPgqn4PcCHwbXuC3i
Ge+Qd8keInZ/n3lvET/Lc1+zPPbHL5lzLnIv1iBrcVM8D79/QP+nXojevzD5
7P9a9neZOQz3R84Pt7kv4vH34V8U5wN9VibHKGLVf+M84J7oyzU3Fo6/1XLX
FFh/aOJtYg/+NznmUBuqFXol+XbbiFe3F9Zb5smewHmRmcNx1tfLzO34fQHc
AQ7RLTOfODL4LrVx+AhaNTXdCYU5Fly3SmbuBUeGK3eJ6+EPXYI/jy9cf0Nb
R8+mHtUiObcipyC3gJPC7esG94dPnJZZQ4d/wGnhtlfG/fN7AOoR6I1j1Rpn
rgVT30LPRx8ocmsWaBfoH3tFfr6UWmp8P/lXrWT9aJns2zLrUeh35wSfYm6o
MVBrQB9DP4NTw/+3y8y18+Tc8OgYD32e2gIaPnp8neA75Kzk4+TX5NrkkOSD
8BVqKdTgT0rO78mFyYmrBh85MfIFchf00DmZ9ddBwW9OzlxD4rcU1ISoDaFh
oWX9VOncnfwUvf/XSuci5CTkv02TuRc5cRPZn1U69ydfRR+AHx2fmaPCVb+u
tPZAjkN+Dz/smLlm3D34Us/gt/w2hflhrsl5f680P+wb/XsFn+yf+Z3ybrfE
86NpoFd8V2ltoX1cT/2CZyHf3CVZD56VWd/mt0/on9fHemF9NEzOpTpH/31y
/16B+EW9nT3H3oNTws0WFz4r4fBwefTz4fF+qM29EOcDGhZaFr83alju30jx
e4/XkrkpGi1a7Z2Fz8auoZ2hrw8LfslvG+Dz1NrZA4cKP5t89nL+kDugZ/0v
c3z657dQyeM1yn3WcqagNVED4KypKBzrqRFQK+A3Afw2gJoY+thPyVwBTQ1t
jd9o8FsNaobo0cMjllAf5vde/L4DrkCMrRHP1DnOd551UO7fWlFTPirm5ODc
NXLm6qvgD2jonN2vRnxHo0SrpL5wcaxfapXENLjBAbljHb/34Lc1/AaD+jX1
AX6rcpPwBcm/d4DL8k55t9Q3Rkc+Qn6D3k4t9J8aW2H9h7XfM9Y79Y9rM+fX
1IIvL5y7bw2thHoKtUvqMQ8XzscviHjIb6XIafpGf3IdahrcG5o52jlzDr/u
mPtd/B+f5RY4
            "]], 
           Polygon[CompressedData["
1:eJwt1nnwTlUcx/EHz6/nxyA0ZC+llESlshXZKsuUkF2ylEhF2ZdsZe+X5WcX
ilYtdlqsiWqaaadtIkv7ahQRen3nPn+8Z87nfb7nLufec+6t0uuhtg8WTKVS
echBk0wqNbBAKnVFOpWqjkdzU6me3AyurXwHbpero5h28cj6Kssj1Z4rl0Bn
7jKuLFpqny6USp3BcDWfcMe4C53wAuyWG+N64+qgl75rI2eSdrj6aCbXx6Xa
1XCXvppybfTULsWVxCjnqMq15crLlXCdPIJPaRdA6+jjRnMV5IroxtXgbsUj
2p24rugkj1dXV7seBui7kWuOh7Vrc9dgnJqiuMyETnZfk1BArqKuTfb6SqOW
3BETuDYxf3hc3aVcu5hLuQrqyj3QW7sPhuprJTfFIO1aXE2MNfY97qe4J+cs
h6e5KzPJPcW9XYAxXBqVXd/jah7DJnmJunfUfaTmQyzgSqGGujlqZuNN+Vi8
G9qDkKvvJ3kYlhk7yriRMTfyaZTXP0TdYKwz9mS8C1x/uR/+lO/HbGMfiHGY
qm4N7tF/L85Rf0TN9+gqd8NJ9V/Lv6Oo/ru5HnjNuONcGa6X3BO/yP+gNHeX
3B0/yq+q7azdBYX0HeQy3IXarbgZ2Cz/xRfn7pP7Yi3Xj5vlGvq53vswhXuQ
y+eGyIMxjRvKLeWGxXOLWvm5eIccpx6O6vuQO4Az2oW5llil5rO47lg/cjV8
IO/F8Xjmck2sVPdxrBHtOnFf+vZkkmcSz6YNdzteVjeKe0b/tJhjzOBewq36
W+Qk54pz9o7nq39QOnk34x39AifiHVd3DZ417jnuVzW/YZe+RfJ0foI8ETO5
vtxc7i15C1ZzU7mF2Kl9kDuCJWryude5w/IPWCnPwWbugHwIT8uT1XaPdR/7
UqwdbjH3XTo5Xhx3QbyP2KP9BbcPi9RM59ZwO+KaMZ8bzz3LzZPnIo+7Obum
28sd0V7ugzyuS+xr6BD7Ep7gOsh3oq3cAoO5bnKP2DviXcHG7LV8jcVyZ0zM
nqMdJjnvDG4dt0p+CbO4O2Pf4VrLrfBYzHH2mjfJb+CJTDKvMb9L4vgxN/I4
PKW9FPP0DZLrxb1oN+KaoKXcCA/EfibfFM/POaZljxfPbXuM5/K49dxr8quY
zY3Irv0477J47lzDTLI/xj55Q7xHXJ14t7gGckPcIu+PfYK7xTt1M15U9y33
H9dUboIXuH1cQ+1G+Fnf+/Ku2BO0i3PFsEzdkLhf7hHHfxj3ZJLrW86NjTnB
Q/LbOMJlYn/B63J/DNc/IuY4nrO8CWn9OXifWyE/6TzzY39MJ2s71vgf8R20
3vqo643VaibHHqM/X90cDI9nlkmOE8fLjf00vj2xHuL9jPdP38C4B+yO9ch9
ioWO93KsQe1/08l7He/3NhzUPsWdjGeSSdZcrL1eck90l99FFee7CF/p2yxf
jDu0y6gpF9+u2DOc5xL3MUrdSJzgzqICN0IejvXZdbTW2JXGrYj5innBBm6d
vDbuWd1SnNE+i0/0vRhrI9ZMrLN0su/H/l9GXS3nWOj4C7BVXp5dv3G//8Xe
Ed+JeCbcN/L+mH95LFZys2O9xFowdgUudpyqOKxvp5otKCmXwl5ujfwd2snt
c5L9Lfa5Z2K+4l8lnfwMrcsk4+M4heSC2CAfjW+XdvWcZO+OPfxXFHEfnbiO
eMV1lMVV3GJ5EbbF/wcqcmPk0XG83OR7Ft+1BnJ9PM+VRk118+V52CIfVpfD
NZZvwpeZ5PsY38nmcjN8Ix+Kd5e7Ub4Bn8vVUNh9FcFtzlUpniP2af/NHcNT
zlEIU4yZmpN8++IbWIy7XHs6Ny3WhFwCV3Cz5Jl4I/79UJ17Us6LtSWfF/8h
3Fw5H2/lJt+p+F6VkUtjeW7yLYxvYln5fOyQy/FXGztAXoLtchFU4ybKE2L+
1W2N52nscffwT+yf8Szjv05/xZxkncR6KRz/WMaO5R7FKa4gV4kbL4/DRnlm
ds+OPXYj8rn/AYcda4M=
            "]]}]}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0bkuBEAcB+Bx3+yue61jeQQ6UVkvIKEShYKOSmhEywsIClcI2UUrQiJ6
KuLYuEK01KLg25DMb76ZYmb+M5McmxqczAshTEt/fggn7C0I4YIjfOQcP7jG
H54xYlFS3otD6OAb2/nKNr6wlc9M8JEtfGCcWTbznk28ZSNv2MBr1vOKdayV
mERzxeb2V8On4TmfuMFLzvOUo8ywj6tMcJHf7jjLLCd4zGEuc4Az7OEwuxj7
Oy6YBluEwtw7FIWghXWd8sImS7jFUm6zjDss5y4ruMdKplnFDKu5zxoeMMJD
Rtkp3bm/cXiKSxziEcd5xxl+cYFxBa4wZZ7+/89fYnk2PQ==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0UkuRFEUgOFbCiEGLIBoSlOdpkrf9yMxETYgGEkZYQXCxJwNCJbAAkRY
AmNCqlKim+F7Mfjz5eYNzrnvtq7vrBRiIYRdleMhPDg8V4ZQZG1VCD9Ms74i
hCW2cJs5zqmnJoRZZjnDDKeZ4hSTnGQnJ9jBcSY4xjaOsoUjbOYwmzjERg5y
QP3Kq1XHdmhggb92XGaJWT6yjvd8cZdr3vKS5zzlIY+4xX0ucovtXGOcC+xX
mxLRN3Xoqdp9ov/ErmgGk3xlikWmWWKGZWb5xm6+s4cf7OUn+/jFHL+Z57xW
o/l22YzO3OMGD3nAE57xgje8iuZ4x7vY/3v+AVqaNL8=
          "]]}, {
         Line[{2, 19, 36, 582, 53, 599, 70, 632, 87, 665, 104, 698, 121, 731, 
          138, 764, 155, 797, 172, 830, 189, 863, 206, 896, 223, 929, 240, 
          962, 257, 274}], 
         Line[{3, 20, 37, 584, 54, 603, 71, 636, 88, 669, 105, 702, 122, 735, 
          139, 768, 156, 801, 173, 834, 190, 867, 207, 900, 224, 933, 241, 
          966, 258, 275}], 
         Line[{1438, 1437, 1457, 1461, 1483, 587, 1503, 2097, 2246, 1522, 643,
           1539, 2266, 1542, 1560, 2279, 1564, 1580, 2289, 1583, 1598, 775, 
          1612, 808, 1630, 2317, 1633, 1653, 2329, 1656, 1670, 2141, 2339, 
          1689, 2149, 2352, 1708, 2365, 1711, 1727, 1730, 1747}], 
         Line[{1439, 1440, 1458, 1465, 1484, 589, 1504, 614, 1523, 647, 1540, 
          2268, 1545, 1561, 2281, 1567, 1581, 2118, 2291, 1599, 779, 1613, 
          812, 1631, 2319, 1637, 1654, 2137, 2331, 1671, 2341, 1676, 1690, 
          2354, 1695, 1709, 2367, 1714, 1728, 1733, 1748}], 
         Line[{1441, 1443, 1460, 1469, 1486, 591, 1506, 618, 1524, 2104, 2259,
           1541, 2270, 1549, 1563, 2283, 1571, 1582, 2293, 1589, 1600, 2124, 
          2302, 1614, 816, 1632, 2133, 2321, 1655, 2332, 1661, 1673, 2343, 
          1680, 1691, 2356, 1698, 1710, 2369, 1717, 1729, 1736, 1750}], 
         Line[{1442, 1446, 1462, 1473, 1487, 2095, 2241, 1507, 2099, 2250, 
          1525, 2105, 2261, 1543, 2110, 2272, 1565, 2284, 1574, 1584, 2119, 
          2295, 1601, 2125, 2303, 1615, 2130, 2311, 1634, 2323, 1644, 1657, 
          2138, 2334, 1674, 2345, 1683, 1692, 2152, 2358, 1712, 2371, 1720, 
          1731, 1739, 1751}], 
         Line[{1444, 1449, 1464, 1477, 1489, 2096, 2243, 1508, 2100, 2253, 
          1526, 2106, 2263, 1544, 2274, 1556, 1566, 2114, 2285, 1585, 2296, 
          1595, 1602, 2126, 2305, 1616, 2131, 2314, 1636, 2325, 1648, 1658, 
          2335, 1667, 1675, 2145, 2347, 1694, 2360, 1703, 1713, 2373, 1724, 
          1732, 1742, 1753}], 
         Line[{1445, 1455, 1466, 1481, 1490, 600, 1509, 1521, 2254, 1527, 666,
           1546, 2276, 2111, 1568, 2286, 2115, 1586, 2297, 2120, 1603, 798, 
          1617, 1629, 2315, 1638, 2326, 2134, 1659, 2336, 2139, 1677, 2349, 
          2147, 1696, 1707, 2362, 1715, 2375, 2160, 1734, 1745, 1754}], 
         Line[{1447, 1456, 1468, 1482, 1492, 1502, 2244, 1511, 2255, 2101, 
          1529, 2264, 2107, 1548, 2277, 2112, 1570, 1579, 2287, 1588, 2298, 
          2121, 1605, 2306, 2127, 1619, 835, 1640, 1652, 2327, 1660, 2337, 
          2140, 1679, 1688, 2350, 1697, 2363, 2154, 1716, 2376, 2161, 1735, 
          1746, 1756}], 
         Line[{1448, 1459, 1470, 1485, 1493, 1505, 2245, 1512, 2256, 2102, 
          1530, 2265, 2108, 1550, 1562, 2278, 1572, 2288, 2116, 1590, 2299, 
          2122, 1606, 2307, 2128, 1620, 2316, 2132, 1641, 2328, 2135, 1662, 
          1672, 2338, 1681, 2351, 2148, 1699, 2364, 2155, 1718, 2377, 2162, 
          1737, 1749, 1757}], 
         Line[{1450, 1463, 1472, 1488, 1495, 2247, 2098, 1514, 2257, 2103, 
          1532, 2267, 2109, 1552, 2280, 2113, 1573, 2290, 2117, 1592, 2300, 
          2123, 1607, 2308, 2129, 1622, 1635, 2318, 1643, 2330, 2136, 1664, 
          2340, 2142, 1682, 1693, 2353, 1700, 2366, 2156, 1719, 2378, 2163, 
          1738, 1752, 1759}], 
         Line[{1451, 1467, 1474, 1491, 1496, 1510, 2248, 1515, 1528, 2258, 
          1533, 1547, 2269, 1553, 1569, 2282, 1575, 1587, 2292, 1593, 1604, 
          2301, 1608, 1618, 2309, 1623, 1639, 2320, 1645, 880, 1665, 1678, 
          2342, 1684, 2355, 2150, 1701, 2368, 2157, 1721, 2379, 2164, 1740, 
          1755, 1760}], 
         Line[{1452, 1471, 1476, 1494, 1498, 1513, 2249, 1517, 1531, 2260, 
          1535, 1551, 2271, 1555, 719, 1576, 1591, 2294, 1594, 785, 1609, 
          1621, 2310, 1625, 1642, 2322, 1647, 1663, 2333, 1666, 2344, 2143, 
          1685, 2357, 2151, 1702, 2370, 2158, 1723, 2380, 2165, 1741, 1758, 
          1762}], 
         Line[{1453, 1475, 1478, 1497, 1499, 1516, 2251, 1518, 1534, 2262, 
          1536, 1554, 2273, 1557, 723, 1577, 756, 1596, 789, 1610, 1624, 2312,
           1626, 1646, 2324, 1649, 888, 1668, 2346, 2144, 1686, 2359, 2153, 
          1704, 1722, 2372, 1725, 2381, 2166, 1743, 1761, 1763}], 
         Line[{1454, 1479, 1480, 1500, 1501, 1519, 2242, 1520, 1537, 2252, 
          1538, 1558, 2275, 1559, 727, 1578, 760, 1597, 793, 1611, 1627, 2304,
           1628, 1650, 2313, 1651, 892, 1669, 2348, 2146, 1687, 1705, 2361, 
          1706, 2374, 2159, 1726, 2382, 2167, 1744, 1764, 1765}], 
         Line[{291, 308, 325, 1011, 342, 1028, 359, 1061, 376, 1094, 393, 
          1127, 410, 1160, 427, 1193, 444, 1226, 461, 1259, 478, 1292, 495, 
          1325, 512, 1358, 529, 1391, 546, 563}], 
         Line[{292, 309, 326, 1013, 343, 1032, 360, 1065, 377, 1098, 394, 
          1131, 411, 1164, 428, 1197, 445, 1230, 462, 1263, 479, 1296, 496, 
          1329, 513, 1362, 530, 1395, 547, 564}], 
         Line[{1767, 1766, 1786, 1790, 1812, 1016, 1832, 2170, 2388, 1851, 
          1072, 1868, 2408, 1871, 1889, 2421, 1893, 1909, 2431, 1912, 1927, 
          1204, 1941, 1237, 1959, 2459, 1962, 1982, 2471, 1985, 1999, 2214, 
          2481, 2018, 2222, 2494, 2037, 2507, 2040, 2056, 2059, 2076}], 
         Line[{1768, 1769, 1787, 1794, 1813, 1018, 1833, 1043, 1852, 1076, 
          1869, 2410, 1874, 1890, 2423, 1896, 1910, 2191, 2433, 1928, 1208, 
          1942, 1241, 1960, 2461, 1966, 1983, 2210, 2473, 2000, 2483, 2005, 
          2019, 2496, 2024, 2038, 2509, 2043, 2057, 2062, 2077}], 
         Line[{1770, 1772, 1789, 1798, 1815, 1020, 1835, 1047, 1853, 2177, 
          2401, 1870, 2412, 1878, 1892, 2425, 1900, 1911, 2435, 1918, 1929, 
          2197, 2444, 1943, 1245, 1961, 2206, 2463, 1984, 2474, 1990, 2002, 
          2485, 2009, 2020, 2498, 2027, 2039, 2511, 2046, 2058, 2065, 2079}], 
         Line[{1771, 1775, 1791, 1802, 1816, 2168, 2383, 1836, 2172, 2392, 
          1854, 2178, 2403, 1872, 2183, 2414, 1894, 2426, 1903, 1913, 2192, 
          2437, 1930, 2198, 2445, 1944, 2203, 2453, 1963, 2465, 1973, 1986, 
          2211, 2476, 2003, 2487, 2012, 2021, 2225, 2500, 2041, 2513, 2049, 
          2060, 2068, 2080}], 
         Line[{1773, 1778, 1793, 1806, 1818, 2169, 2385, 1837, 2173, 2395, 
          1855, 2179, 2405, 1873, 2416, 1885, 1895, 2187, 2427, 1914, 2438, 
          1924, 1931, 2199, 2447, 1945, 2204, 2456, 1965, 2467, 1977, 1987, 
          2477, 1996, 2004, 2218, 2489, 2023, 2502, 2032, 2042, 2515, 2053, 
          2061, 2071, 2082}], 
         Line[{1774, 1784, 1795, 1810, 1819, 1029, 1838, 1850, 2396, 1856, 
          1095, 1875, 2418, 2184, 1897, 2428, 2188, 1915, 2439, 2193, 1932, 
          1227, 1946, 1958, 2457, 1967, 2468, 2207, 1988, 2478, 2212, 2006, 
          2491, 2220, 2025, 2036, 2504, 2044, 2517, 2233, 2063, 2074, 2083}], 
         Line[{1776, 1785, 1797, 1811, 1821, 1831, 2386, 1840, 2397, 2174, 
          1858, 2406, 2180, 1877, 2419, 2185, 1899, 1908, 2429, 1917, 2440, 
          2194, 1934, 2448, 2200, 1948, 1264, 1969, 1981, 2469, 1989, 2479, 
          2213, 2008, 2017, 2492, 2026, 2505, 2227, 2045, 2518, 2234, 2064, 
          2075, 2085}], 
         Line[{1777, 1788, 1799, 1814, 1822, 1834, 2387, 1841, 2398, 2175, 
          1859, 2407, 2181, 1879, 1891, 2420, 1901, 2430, 2189, 1919, 2441, 
          2195, 1935, 2449, 2201, 1949, 2458, 2205, 1970, 2470, 2208, 1991, 
          2001, 2480, 2010, 2493, 2221, 2028, 2506, 2228, 2047, 2519, 2235, 
          2066, 2078, 2086}], 
         Line[{1779, 1792, 1801, 1817, 1824, 2389, 2171, 1843, 2399, 2176, 
          1861, 2409, 2182, 1881, 2422, 2186, 1902, 2432, 2190, 1921, 2442, 
          2196, 1936, 2450, 2202, 1951, 1964, 2460, 1972, 2472, 2209, 1993, 
          2482, 2215, 2011, 2022, 2495, 2029, 2508, 2229, 2048, 2520, 2236, 
          2067, 2081, 2088}], 
         Line[{1780, 1796, 1803, 1820, 1825, 1839, 2390, 1844, 1857, 2400, 
          1862, 1876, 2411, 1882, 1898, 2424, 1904, 1916, 2434, 1922, 1933, 
          2443, 1937, 1947, 2451, 1952, 1968, 2462, 1974, 1309, 1994, 2007, 
          2484, 2013, 2497, 2223, 2030, 2510, 2230, 2050, 2521, 2237, 2069, 
          2084, 2089}], 
         Line[{1781, 1800, 1805, 1823, 1827, 1842, 2391, 1846, 1860, 2402, 
          1864, 1880, 2413, 1884, 1148, 1905, 1920, 2436, 1923, 1214, 1938, 
          1950, 2452, 1954, 1971, 2464, 1976, 1992, 2475, 1995, 2486, 2216, 
          2014, 2499, 2224, 2031, 2512, 2231, 2052, 2522, 2238, 2070, 2087, 
          2091}], 
         Line[{1782, 1804, 1807, 1826, 1828, 1845, 2393, 1847, 1863, 2404, 
          1865, 1883, 2415, 1886, 1152, 1906, 1185, 1925, 1218, 1939, 1953, 
          2454, 1955, 1975, 2466, 1978, 1317, 1997, 2488, 2217, 2015, 2501, 
          2226, 2033, 2051, 2514, 2054, 2523, 2239, 2072, 2090, 2092}], 
         Line[{1783, 1808, 1809, 1829, 1830, 1848, 2384, 1849, 1866, 2394, 
          1867, 1887, 2417, 1888, 1156, 1907, 1189, 1926, 1222, 1940, 1956, 
          2446, 1957, 1979, 2455, 1980, 1321, 1998, 2490, 2219, 2016, 2034, 
          2503, 2035, 2516, 2232, 2055, 2524, 2240, 2073, 2093, 2094}]}, {
         Line[{579, 2313, 859, 856, 855, 2324, 852, 2322, 851, 848, 2320, 847,
           844, 843, 2318, 840, 839, 2316, 836, 835, 832, 831, 2315, 825, 
          2314, 824, 821, 820, 2311, 817, 816, 813, 812, 809, 808, 805, 804, 
          801, 800, 797, 795, 829}], 
         Line[{580, 2304, 826, 823, 2312, 822, 819, 2310, 818, 815, 2309, 814,
           811, 810, 2308, 807, 806, 2307, 803, 802, 2306, 799, 798, 792, 
          2305, 791, 788, 2303, 787, 784, 783, 2302, 780, 779, 776, 775, 772, 
          771, 768, 767, 764, 762, 796}], 
         Line[{18, 19, 20, 21, 1457, 22, 1458, 23, 1460, 24, 1462, 25, 1464, 
          26, 1466, 27, 1468, 28, 1470, 29, 1472, 30, 1474, 31, 1476, 32, 
          1478, 33, 1480, 34}], 
         Line[{35, 36, 37, 38, 1483, 39, 1484, 40, 1486, 41, 1487, 42, 1489, 
          43, 1490, 44, 1492, 45, 1493, 46, 1495, 47, 1496, 48, 1498, 49, 
          1499, 50, 1501, 51}], 
         Line[{598, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 
          592, 593, 2241, 594, 2243, 595, 596, 600, 601, 2244, 604, 605, 2245,
           608, 609, 2247, 612, 613, 616, 2248, 617, 620, 2249, 621, 624, 
          2251, 625, 628, 2242, 629}], 
         Line[{631, 597, 599, 602, 603, 606, 607, 2246, 610, 611, 614, 615, 
          618, 619, 2250, 622, 623, 626, 2253, 627, 2254, 633, 634, 2255, 637,
           638, 2256, 641, 642, 2257, 645, 646, 2258, 649, 650, 653, 2260, 
          654, 657, 2262, 658, 661, 2252, 662}], 
         Line[{664, 630, 632, 635, 636, 639, 640, 643, 644, 647, 648, 2259, 
          651, 652, 655, 2261, 656, 659, 2263, 660, 666, 667, 2264, 670, 671, 
          2265, 674, 675, 2267, 678, 679, 682, 2269, 683, 686, 2271, 687, 690,
           2273, 691, 2275, 694, 695}], 
         Line[{697, 663, 665, 668, 669, 672, 673, 2266, 676, 677, 2268, 680, 
          681, 2270, 684, 685, 2272, 688, 689, 2274, 692, 693, 2276, 699, 700,
           2277, 703, 704, 2278, 707, 708, 2280, 711, 712, 2282, 715, 716, 
          719, 720, 723, 724, 727, 728}], 
         Line[{730, 696, 698, 701, 702, 705, 706, 2279, 709, 710, 2281, 713, 
          714, 2283, 717, 718, 2284, 721, 722, 2285, 725, 726, 2286, 732, 733,
           2287, 736, 737, 2288, 740, 741, 2290, 744, 745, 2292, 748, 749, 
          2294, 752, 753, 756, 757, 760, 761}], 
         Line[{763, 729, 731, 734, 735, 738, 739, 2289, 742, 743, 2291, 746, 
          747, 2293, 750, 751, 754, 2295, 755, 2296, 758, 759, 2297, 765, 766,
           2298, 769, 770, 2299, 773, 774, 2300, 777, 778, 781, 2301, 782, 
          785, 786, 789, 790, 793, 794}], 
         Line[{827, 892, 889, 888, 885, 884, 2333, 881, 880, 877, 876, 2330, 
          873, 872, 2328, 869, 868, 2327, 865, 864, 2326, 858, 857, 2325, 854,
           853, 2323, 850, 849, 2321, 846, 845, 2319, 842, 841, 2317, 838, 
          837, 834, 833, 830, 828, 862}], 
         Line[{860, 925, 2348, 922, 921, 2346, 918, 917, 2344, 914, 913, 2342,
           910, 909, 2340, 906, 905, 2338, 902, 901, 2337, 898, 897, 2336, 
          891, 890, 2335, 887, 886, 2334, 883, 882, 2332, 879, 878, 2331, 875,
           874, 2329, 871, 870, 867, 866, 863, 861, 895}], 
         Line[{893, 958, 2361, 955, 954, 2359, 951, 950, 2357, 947, 946, 2355,
           943, 942, 2353, 939, 938, 2351, 935, 934, 2350, 931, 930, 2349, 
          924, 923, 2347, 920, 919, 2345, 916, 915, 2343, 912, 911, 2341, 908,
           907, 2339, 904, 903, 900, 899, 896, 894, 928}], 
         Line[{926, 991, 2374, 988, 987, 2372, 984, 983, 2370, 980, 979, 2368,
           976, 975, 2366, 972, 971, 2364, 968, 967, 2363, 964, 963, 2362, 
          957, 956, 2360, 953, 952, 2358, 949, 948, 2356, 945, 944, 2354, 941,
           940, 2352, 937, 936, 933, 932, 929, 927, 961}], 
         Line[{959, 1007, 2382, 1006, 1005, 2381, 1004, 1003, 2380, 1002, 
          1001, 2379, 1000, 999, 2378, 998, 997, 2377, 996, 995, 2376, 994, 
          993, 2375, 990, 989, 2373, 986, 985, 2371, 982, 981, 2369, 978, 977,
           2367, 974, 973, 2365, 970, 969, 966, 965, 962, 960, 992}], 
         Line[{1008, 2455, 1288, 1285, 1284, 2466, 1281, 2464, 1280, 1277, 
          2462, 1276, 1273, 1272, 2460, 1269, 1268, 2458, 1265, 1264, 1261, 
          1260, 2457, 1254, 2456, 1253, 1250, 1249, 2453, 1246, 1245, 1242, 
          1241, 1238, 1237, 1234, 1233, 1230, 1229, 1226, 1224, 1258}], 
         Line[{1009, 2446, 1255, 1252, 2454, 1251, 1248, 2452, 1247, 1244, 
          2451, 1243, 1240, 1239, 2450, 1236, 1235, 2449, 1232, 1231, 2448, 
          1228, 1227, 1221, 2447, 1220, 1217, 2445, 1216, 1213, 1212, 2444, 
          1209, 1208, 1205, 1204, 1201, 1200, 1197, 1196, 1193, 1191, 1225}], 
         Line[{307, 308, 309, 310, 1786, 311, 1787, 312, 1789, 313, 1791, 314,
           1793, 315, 1795, 316, 1797, 317, 1799, 318, 1801, 319, 1803, 320, 
          1805, 321, 1807, 322, 1809, 323}], 
         Line[{324, 325, 326, 327, 1812, 328, 1813, 329, 1815, 330, 1816, 331,
           1818, 332, 1819, 333, 1821, 334, 1822, 335, 1824, 336, 1825, 337, 
          1827, 338, 1828, 339, 1830, 340}], 
         Line[{1027, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 
          1019, 1020, 1021, 1022, 2383, 1023, 2385, 1024, 1025, 1029, 1030, 
          2386, 1033, 1034, 2387, 1037, 1038, 2389, 1041, 1042, 1045, 2390, 
          1046, 1049, 2391, 1050, 1053, 2393, 1054, 1057, 2384, 1058}], 
         Line[{1060, 1026, 1028, 1031, 1032, 1035, 1036, 2388, 1039, 1040, 
          1043, 1044, 1047, 1048, 2392, 1051, 1052, 1055, 2395, 1056, 2396, 
          1062, 1063, 2397, 1066, 1067, 2398, 1070, 1071, 2399, 1074, 1075, 
          2400, 1078, 1079, 1082, 2402, 1083, 1086, 2404, 1087, 1090, 2394, 
          1091}], 
         Line[{1093, 1059, 1061, 1064, 1065, 1068, 1069, 1072, 1073, 1076, 
          1077, 2401, 1080, 1081, 1084, 2403, 1085, 1088, 2405, 1089, 1095, 
          1096, 2406, 1099, 1100, 2407, 1103, 1104, 2409, 1107, 1108, 1111, 
          2411, 1112, 1115, 2413, 1116, 1119, 2415, 1120, 2417, 1123, 1124}], 
         Line[{1126, 1092, 1094, 1097, 1098, 1101, 1102, 2408, 1105, 1106, 
          2410, 1109, 1110, 2412, 1113, 1114, 2414, 1117, 1118, 2416, 1121, 
          1122, 2418, 1128, 1129, 2419, 1132, 1133, 2420, 1136, 1137, 2422, 
          1140, 1141, 2424, 1144, 1145, 1148, 1149, 1152, 1153, 1156, 1157}], 
         Line[{1159, 1125, 1127, 1130, 1131, 1134, 1135, 2421, 1138, 1139, 
          2423, 1142, 1143, 2425, 1146, 1147, 2426, 1150, 1151, 2427, 1154, 
          1155, 2428, 1161, 1162, 2429, 1165, 1166, 2430, 1169, 1170, 2432, 
          1173, 1174, 2434, 1177, 1178, 2436, 1181, 1182, 1185, 1186, 1189, 
          1190}], 
         Line[{1192, 1158, 1160, 1163, 1164, 1167, 1168, 2431, 1171, 1172, 
          2433, 1175, 1176, 2435, 1179, 1180, 1183, 2437, 1184, 2438, 1187, 
          1188, 2439, 1194, 1195, 2440, 1198, 1199, 2441, 1202, 1203, 2442, 
          1206, 1207, 1210, 2443, 1211, 1214, 1215, 1218, 1219, 1222, 1223}], 
         Line[{1256, 1321, 1318, 1317, 1314, 1313, 2475, 1310, 1309, 1306, 
          1305, 2472, 1302, 1301, 2470, 1298, 1297, 2469, 1294, 1293, 2468, 
          1287, 1286, 2467, 1283, 1282, 2465, 1279, 1278, 2463, 1275, 1274, 
          2461, 1271, 1270, 2459, 1267, 1266, 1263, 1262, 1259, 1257, 1291}], 
         Line[{1289, 1354, 2490, 1351, 1350, 2488, 1347, 1346, 2486, 1343, 
          1342, 2484, 1339, 1338, 2482, 1335, 1334, 2480, 1331, 1330, 2479, 
          1327, 1326, 2478, 1320, 1319, 2477, 1316, 1315, 2476, 1312, 1311, 
          2474, 1308, 1307, 2473, 1304, 1303, 2471, 1300, 1299, 1296, 1295, 
          1292, 1290, 1324}], 
         Line[{1322, 1387, 2503, 1384, 1383, 2501, 1380, 1379, 2499, 1376, 
          1375, 2497, 1372, 1371, 2495, 1368, 1367, 2493, 1364, 1363, 2492, 
          1360, 1359, 2491, 1353, 1352, 2489, 1349, 1348, 2487, 1345, 1344, 
          2485, 1341, 1340, 2483, 1337, 1336, 2481, 1333, 1332, 1329, 1328, 
          1325, 1323, 1357}], 
         Line[{1355, 1420, 2516, 1417, 1416, 2514, 1413, 1412, 2512, 1409, 
          1408, 2510, 1405, 1404, 2508, 1401, 1400, 2506, 1397, 1396, 2505, 
          1393, 1392, 2504, 1386, 1385, 2502, 1382, 1381, 2500, 1378, 1377, 
          2498, 1374, 1373, 2496, 1370, 1369, 2494, 1366, 1365, 1362, 1361, 
          1358, 1356, 1390}], 
         Line[{1388, 1436, 2524, 1435, 1434, 2523, 1433, 1432, 2522, 1431, 
          1430, 2521, 1429, 1428, 2520, 1427, 1426, 2519, 1425, 1424, 2518, 
          1423, 1422, 2517, 1419, 1418, 2515, 1415, 1414, 2513, 1411, 1410, 
          2511, 1407, 1406, 2509, 1403, 1402, 2507, 1399, 1398, 1395, 1394, 
          1391, 1389, 1421}]}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1:eJx8vXVUVs33/o+imNiBYGBhIDa2bAwMVBQsbMFCEQMTsR/FQFFAkRYkJKVL
gU1IKQYqdouBwY1igsrvvJ/Z5/ku9vrcP/9xrb3udXHOzJnaM9drOluuN1tR
W0VF5XEDFRVV6f+JWp+DJtaKg1MT9cobTMiEtA0jj4CvAg69M44zSo4HdY/F
0emm2RBnv7neDwcFXAtOO/dkkBP8dL3U4mtKBjzIq2X3KFkBge+yDMcuScAN
2sFl31JzoXVM64NBSxVQUHd81ZxGWRiuOSg1anws6Glohml4KOBb0FT3C9sK
UP9KfXO7Qx6wptn5aJ95CtjX0s03H26gk054veMDDmBGvY6DEuspoP38KfOn
Tb2FK8Zu76yvHolPHDf3MPIug0cdtz2L/HAb9/buMkl9/yXs/DrjXpehZXAv
6Z3B9ku30X74vvL57bOwapLVs5GaZVCeZVlQnV+Ezdq+V3ilZOGiji11j1mU
QesZL8zmD7mGtgZ9zGqpZODY9ZP9Cl+XgcN2gylT1+fgykc3v2sPSMQeI9t0
amijgPCRR95nGF/Eph+DzIJ9A/Fs33Vl1dcUkBmoU6Q22h2nmL5wGX/BAzZp
9fPXrlLAhRfFf202e4PjL6dzA3d6wJXGhWZTKxWwtHZD6Dk5GKIK7x3f4RED
l7du/VpcogCnnjEn5g+KgnOd2rgUhmWB7Yo9F9WkcjO/vmTS6MHBYKl58IPq
i3SosyZ0xdpUBbwbeiDv7CQXHLjudV3NXWFw/uvQjOQKBfQc9+SJefdE3OIV
Oyi2/QXYVXltQ5PbChhk0nHO0ujLmP/7awQmjcfpXjO7TjqlAHXP2NhorSvY
otzJ+2lfH+yT2CHFYoYCfH7M+ueN+g00naTqFOoYha82DdTVryqDuPdTs3R1
i3CD4nlnw57J+MJu2ar8yDJwtPmrfWlmEU55vu/KG7s0XOVmv8b2dBl4RF/f
bpBwAwc8h38MZqah8aNb76vzy8BHyyy+csQVPONxbk2bgiRsfaDP6nI9BfRr
8u7buOHZWDs8cI31xwjsanzR9uFpBTTU+fRr94QkNOm7Kvsfj6PY45Hn7qVP
FPDi9JMmjXb74yM90wCTfb7QO+zoylM/FGDbI9dl5HoH8P9kOWfTwTg4e8DT
9/xbBVzRqvfjo30AxMQucJn5MhYWO1iOufRKAV07rlQLMo2GIb1nDZ26LRmg
sUlmdoEC7rtvfea5/gxUFRb07WmYAKcH4DOXFwqIvG7z8G4zFzybXzH3+zhf
ePT13NjuUr1b/3XcnbEpBseoNDeb6+yFeRmO/X+UKmCYv4si8HAqFpdcO9Bx
lx/e/jvhYWS+AuIvJrR8lZSJ0fNVtPofjMbEl/Xfl5yV3stz9tdyrxxs+aZJ
o9lfEtDj/c8ZRdYK6JGkO3hPQh66v7dz2Tg/Bc/oVg8YO1kBXSI7TdiZloMf
f8db64xNwilqCkv3lQq4ZzOsr9qkHPyuGnDoRkOpnC0iD45dqwB7leiy4MqL
mH/o40r/wgA0sw9rO6xQAZ/sLi66/vsCHq3snnvrzg58Pbh41/Vy6b2sClPz
153FpHeb2zXPd4WDJfOGeUvf87jRs2d4qTrD0Jaltxt9iAYt1SUTvn1UwOqM
iOm9HoZAp8mdQt4UJ0H6LvWpSbekfqbBeKvEq9HwI9CpslWrSwBjtvWYkqGA
bR7Diov0Y2BcZPTV/ZUp4FY7IqdVtgKyV62xLZ8SCTd3ji7+MC0Rfk+e9WWJ
9D2/qZ8eOazyCGa6Ntt45OcO7Ba/tahXtQLuhnQtHHPYH3falVRdCfPFR5Up
Lw5I30Ow6ajeaePCcWlxst6H13H40qbXQ6dHCmgye9+341HxOGXxk4HrhiZi
e+OJQwbnKuBw/7ZbhmZdwslLSwJCLS+in+Yv+xsB0nNa7tILrncJ8+rPWm67
+iLqFy57YRCsgLg6oBZ7IQ5b7+4fYH0tDs2XNejV5YYC0l6eKx7uegGvj7A5
vn9PFHqYqX0olr6fG6NTY68fckWzeVXNcespDDEYHfDstwK+fL/7+nIzd3BJ
62lt8sIVHFJaWg2Q4rNLcld2SQmFK/WP/NNlbSi0KVA9cuSDArZcqhy09Wo8
eHZUeTBgYhz4NvbRPyP1S2sWGzh4j0gDre0VRpNnpcAOv+BVP/wVkN7uh/Pd
Dykwt8Bo9MNrl2DwsBbb+gUpwOLpxheLgpLg/be8Fb3Sk6CRldGlAykK6Hyy
Q0fH69HwuM2qW7uWx8JK2wtT2j9QwPplj1PH+AVDq02v/lxyCoY0g+Vv6kvf
ie3nhlPHHvPDqNo7v6n0DsdnnVz09aR4rxHuP4xPh6CFIn9V8uRo/OS/cbLi
tQKiOoRUHNWOxpaPB/19FpuMUXcs49ZL7S7snefn572j8Fb3GPcN61PRwlIx
pm66AowOt7n02CkM1R06mE85moxoG/pugFTOvae5WhrGTMZuufUn/vEJR7NR
WiYtvirg6bF7qus++cDxwmX3B7/1x+MVOZ12Sd/DSdOdk5bWiYI6nWpldv2w
AlcMioj7KD3ngntw94VzBhgsfdo79+kF6Ko6oUvDCAUUPbQbNax2NozYeqGn
cW4MtL3RTq2PswI8B5qPuq2TDyrL8uOMh6fA5HAH9bHjFeD8vPXN7oX5EH51
3Eo1+xSo9h5ff/ZIBeTca1F5XTMfUu123Xa/HQ/jVxlb5Zkq4PI4nzeHNLOh
T2f1nPSxsXB31/Pqbiek943s4d07KxX+qvirHtMOgq7Dl/t1ylHAhOulQy7W
jYFUvbZf4JY53NP/ZfT4kwK699L81WeqOzQZOitGcWEPBGrsL7D9I/XnIVVz
RgyKxh0nw6YOSIjBljcc//kgff+7DmUVP86JxjbTQhv8GpSAH/v8vdtfaqcG
dacF/BkbhnUbOlns/huHhyHpT8/HCtij9u1R1Rt33NFKJzJkZSxen17gafFO
AUkzKnwKvXxhT8uDHqNr+WHrpvNcZ/9UwC3dFgeXf0uAmT+MtXeu8IAmO63X
T3ymgKpH23Uqv2ZBov7AmxdjI0B18ZWZAe4KiJ3fOK6oxRVY/2O00c7yOBgc
UjT61ggFLLZRsar//gaY4rxq65dpUBDwvGR9tjQfGPtV+294EayNibKsa58O
HiYRMU8OlEGjrR7dIboIzu6+9jXIJBGym9VJsPMrg55b2jxO+3UdXgzv1OHP
51goXNtk4oJvZXDmZZ9nmW+ugOYEaL5UxxleNOkz8vFEqR84HpzeLf0yDFHd
XqIx+wgM1R+xvbWrAuo3mdqk+nYazFxWL0J1hz92HxK2doXUX5UUdug3MDQI
OgU4/Mhfl4wfjic5jZL6K4WZTeC6iQuxh+nb9kfCklD7r43BO6k8t3tOvdn/
wAXEZnfvlubHoJGO4UUvaVx7mznSq46LL97O/ehTfTkI71hWvFJI3/MS8x6K
GeGWcDj8ZL1P/QLQGQrWD5f64V9z0sedfR0GXZKCHizZehJumuTf8JPmAx4/
TOq92pUG98xervY8Hw1B83xjfydJ/fYGk+sHu+XBORz0D6qlQZvwj5FG4xSw
s8h3Zo/A6+C7OK7f54gceOS8ZtS7M2Ww9N4G9951bkPV1PCVI5/kwEGPQvv7
TctgyDFH9YUxxRAQteX1ihPZcHvFkfPJ8Z/Ac0mi8aYnxdDV8OL1MR+TYUBI
bpuI0k/gltQj6WjJbXj5KO3O2FlhoJHXof/txWWw9UTXvecaFIHR1a0J1bp1
QOutuY/l/TIonhPh07FdBgzLmOd5ekQG3nidYjN9p1RuKy5ltAuPgENOqsuD
hiVjXF09mHtdAUMUY0yvm53B43XvqQzzz8Yqo47pn72l+ec0N4937xMwuVHE
htaz89DKpmG/nubSeDT7p0F0eTJOuPajuf3GHAxJDbwZu1xqX37LP9dt5o5b
zbRK8974YZjlhUCjXwrQ7/xx2abZ+8EMB/TvvMEZkndoPLD/q4DhrcY3tawO
g4gW90cfbR4MRbozrlRK4+CFie2+1fNFeDzc2MG2Xhr4emosr39MAQ4lj5de
Kc+H2QNiDOfY5EFe60k/HxWXwcd2C4fEl9wAHJfXONulAI7uubj6p1kZ6Nw1
v/P47i0YN7C0CxjdgD9Pl/p8PPkJPo3o1SprYTF8696zOuDrTeiu9T7qw5eP
4PKhbhfzLvfBfVatXke0C+B39e9nxd8/Qq5G6Nr3Z2+BzdPZt+/H+OGrj+rz
X7uXQe3gyqlvHHOheDn0dtCNwyvak9HRSppv6I6udmhsB80CAsZ6/s3HLW56
b7pZKmBSjHPBl30puDfpq3XHEbdw1d0/14fsL4MbD77tv66dir7t9NZvSCrE
7Stznxr9LoMrtb3KzulkYod6xlZHUgtwWWZPnQnq0rgWufPxRYtUrNtg9b22
oy9jC5dtDtdWSP3hn0fXdO/F4ZkR/nebz7qEk8J/dLCS1h31Fy0Y1sjJB7LO
DuziONMPWr3SXWMt9TMrb2zoMLZWLLSeWC9g3dUEWOZmWPxaGgfVwzr9aNUG
IXF4/0WnjmaBXXddz5nS/Gejle+i1tdyINrw06mOiQUwalbZi2tPpfntvmmP
w94VwNPOSxrNPXsTvs/pZ9tVWl8cDizXf9qwEOotQAO1PjdhoX3WBeOeZVDV
f7XmE7tCWPzR0QF07sBzk6Yjbzh8AoMXjewN6l4GlfAlmcM/FsF00w19ukwv
A5X/8185gPg90u9R/r19S7Oou4sKUbtxcWhwVRHu33Bymv2LT9C5VWrt1i+u
48Kb1zrGd76FmX4Ve9PiPoHTnHDvwj5XsWDslkdL7tzA3lqjtqaMLpPfFxPF
+6L8vk1F+WCCKB/cTuVjJcoT24jyRLk8qfyRyh/l8qf6AqovkOuL6hfURP2C
XL/0PUB78T2A/D10tUw/+HZjFtRVK5ozYt5NKLK4X4VS//NreqlLybxkWPHP
j4Ubs2/AysoTyasflMEbvVf1Nd+5Yf9hTp8uJeRA50kBn0YckuZRH4o92phn
4NxbTl1G7rwEe+xmpQ08rpC/f1wrvn+Qv39n0V7QTbQXlNvLe9G+8KtoXyi3
L2qPOEa0R5TbY+Ze14p6G69hwtpJU/u0KMCpsc4RQ/eVwdDZDTodcsrFrwZv
1i21zsPfX3t8MKoog0zRP+A70T+g3D8YiP4Eg0R/gnJ/MkT0P0j9D8r9D/VX
QP0VyP0V9W9A/RvI/dtX0R8C9Ycg94d9Rf8JzqL/hErqP4NyzV50tvXH8NIv
l3XcMqHexpPl+yIV8NttY6bqiRyceXXs8OjjcdAZ5n+LtpXmyaI/xz5n/+3P
Ue7Pqf/HMtH/Yzvq/z3EeIHdxHiB8nhB4wsGivEF5fGFxiP8LcYjlMcjezF+
obcYv1Aevzr3TNjy6F4eHtYaOrN1cjIu2GLWLkRaNyX7qRx5n5iBhhbb9Rcc
SsDSMPOC09L7mm/+dvNmYiAunO/jXPfuUvy2zvPkBKk8y69POr7o3TT4M6Hz
iTm/POH7/WOrekjzq3divAYar0Eer2l8BxrfQR7fk05dGed91xdGur/Qntg6
A4r3m5+fdUkBc4sNjh5ShOIb0/ruU5pGw7SG5R4zpXlyj5DV7jl7EO8vz6k/
qG0IvOuy5o6X1L62eFUVnWudi4t3/nTcdqYPPjB6Fd79oNQep+zVnfDyKjZJ
m2b5sHcgOq4zfpM+WBrfA0ftPtL+Jp7ID9s4Y2EMnvEyGxRVUgaxjYsqQ2cU
4a5lv0Yu35+IzwaNGnnof+v6inN/dNvewnqjrdwKbyJ6BZm0iF5fBrPFfAzn
ifkYyvOxSDF/ww1i/oby/O2rmO9hhpjvoTzfyxbzQ5wi5ocozw8Htn2p/22/
K1rGPHmkL5Xn06yxFZrSvD3CQmN6rQcnwBmcnE02x8C5Gc1iPkvrILcdrdsv
bRAEdWonaU6Ji4X6kQGeetK6foeY30IzMb8FeX7rIebDcFDMh0GeDzu3HjRk
17JgPOC9ukGrmV7Q1HHOCYNvCqjUDGveplEsjjhb1fTRygDUrXPc4aJUL6C5
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
7eSMdT7OdgiY5AnRXrZ5PaR5i/PRiMw7o45j3YqUfo6zTkJqzCenTn+l8my3
7eiUeTY4LOr65KhzdlBx0mlbgTTPXF9vfl7U9V1Qd4vqgZKrq3CQ0V9flOK3
pnyZ8y3pOFjUVltxYs1BPD8/aX+0pHM69EztX2dPw51P/RtkVrjhk9iDMztI
f1dz59Mex7cEgKmPXeDmZf7YRctQZ77Un+yZODGv7x1PaKv3olmG0Xn0q7C5
miSt3ye3H5d40fA0/Jj8vdnxwGgsA5+3bz5K37lTzNq4B7ZYd/26na0SE9Ak
raDRypcK2GTe+Be880Df/QaK0gWp+CVjQvPPUnt8v252rauuifClWHfl7b7+
MGLUmnm20rzCsI35iNPSOvaM6yiDBttDweKxqeKypFMccSVkfaMI+LU8+rWV
bihELZljkC/NAzfve7MqLzoI1DVjR6VVh4DOwYTYJ9K6YwPunVV7+jnIqqf1
+x/VEPg51XFhmlQvxz+PjNmvEgpX980/0O5AEJQ5VZtWSb8PeHvt09s1IXDP
aLfW8OpzMMfcvHV96fcWt/1O1h4VCsPPGtcKuuQNZxbGut+Uvv/xK23Lr+2J
gfdRK3J2h3tC6zPDfNWl78GiclSvIwtjYEn4ku1el45A0Pojebuk8gn/9nXn
lJQEuORe0sFs4hZQicrqM1d6r9XHvgyZ6JQEfedENLjd8ABaVi2a9PCxAq4t
HvHcZXYS+H88HDY37RyGror9ZSn1M0bw+9fTU1Ew3nR8stX3GIyZfe6TrvT7
Va29bqsvdoXFtfa2+BWQhkf+6aawkdbd15tZzIrV9MRfAyZahSsyceY5lWk7
pfVdtzjvVXpGAZgYs1E7TScbnz85WvzeRyqHMW936K1Mho4tevTbsMAdMrbq
drSQ/u6GcbWMJ69JhpA1a93StfxgttGd0NPSemSdQ52zrSJSYPKb67fb2QTC
gTWas3SkfvK75yf7HnHJ8LjDak1noxBwNd1b55AUn1zeYGL3hRdhwZ4ei3e2
CIV2aS1WuErfQ0Rmu7Nv7qfCX787wx+MC4WRzWeczstUQOZ3100Gt1NB77RG
rwG+wVBxtvGXh1L/+etPHdeJr1LhSY8n2TdNA2Du48ha16V19OrPmmt+pSL8
Ltqt9b7aH9LXte0Ze0laD+7rqnX6TwZYq60JLFp8Fj5MvjndP05aT5X2tX4N
mXBhQPDmP42sYf7xDlojpHHq6JROWi2+pUKfLW+OPDrqholbJpWsldYLtZZ4
LbRpHw4Ln44Jna2Wjtr79ZNe/U/fK/OQqttwqLPDKejCy0z8rBVT7h+lgKil
Y3Ljp/mhw8/c4yNsc7F7d7XkuzulfsYGrN7dPIZb9Jbm9CzOwtlBhzvWk+YV
mX3q7Rjuagdb8cZTrSfp2OdJkKK1NN7hSJNW1l0TIHfrteo8q7Ngt3jt7J7P
FdDyueqEHdJ69nmdcru2ncPAufeR58PuSeudfTtmVy66BJkF9zulzg+FH8PM
rL/kSuPFgMVzYw+nwZ3qnP1e+lHQbUZW7x/SuHNg+QDNpLAM6BU0pX27VtHg
tzLoxmdpPpOQ3+z7ebss6DzqVcpelSjYUzbogZo0X1pRqp563+QyqG7Q7XF9
WST8+hTx2umoND/ftOF5cLccGNbUus4ImxCwTBsaUVuaZ647ZVr5ZJ20Hnwe
YLcCg2HO9MFzuxxQgOl40z6vUy7DMu/Rf3obHYO80KH6mq4KqG6Y2NylAKE4
eeS4Q79Ooe2h87lPpXlRUI8BP48Oi4abI9aPVfFJQ0t7v2/rkqVx079FE3V/
D3B4/C65fVIuttF9abzIXgH2thPbv3zrB8v++q94YpWLjedN6lwulb/L+l/D
+hiGwLC/HU1drmbikLhYu17npfGisdqDL7uSYLvdnpLxfxNQRbHreh1pHmJw
yjdD4XsJ0sYe9ugbEIsbl4x9Mf2i1L/1jXq3bagHTD7cMiNKMwqcjy9eYiH1
J/37xunFrzkACUcNzi8pjYeSrjF/h0jzgQcNM6+ddzgPYcWqqh13xcOJD3VW
NpTmz6scPHtMfhwFW3IOtiiS+oPOIwJfTfnfeaoDW9q67IyH4Mvji25Js5/f
C8cObiytp0K/Oapn90So1a7BeT3VBJh82W+wgfT8U77a7Gn6KAP0k+PKfEri
YWjkvN1tpXZtrvWnTk/XbKi1+edBC8M4OOytcOl9WJq3N59xrLRdPuChoqD6
j6Kg9sDxKdOlefjxbXYrX+7MhomTSy1d5kejpW15gvMJaf3uZL9ijkYCPA4L
t+nomol1TFYmTnaTnsehx7ULt8Jh/5kOps0u5OLb7NqHW9kqYND4/gU/HyRC
yPfFJV+c0/Dhr6cWBiEKSMkwMx7cPAXiuoZvsk3JwIFB83o2c1HAgvoRHnmz
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
3yKfyB3mE6lvIHwia5lPRFm8C/ksFjKfRSHVS39WLzr0+8Xs9+XkT5nH9HPI
n7KL/CmH6HxLb9KxZDoXyN/RnPk7RpKf5RL5WdqSn8WQ4hksHkM6LZjOBfKJ
3GQ+ESvyxbhwXwzFT7H4FOYrySBfiSnFm7L4etLxYDqW5LtpR74be/LdzFCi
o2ImfCt6zLeygvl3ZJ2LzL+jT/6dvTOETk+mk0D+FzfyvzjR+a5LpGPOdBaT
D+gD8wFtJb/Mc+aX2UbxaBZXpiP7iZ4xP9Fe0hnGdGaRH6cf8+Nok85TpmNL
vqT2zJfE/S+t6LzfOvIrBTO/kj35YloxX8wV8gENIB+QBvmACik+hMVlf01b
pjOG/DX1yV9zhPw110lnONNxJZ/Rb8uaPiMn8uPsZH4cOb6bxU+Tzl+mc4z8
SqHMr3RUib4b+X2OMr/PcSW+p2zyPSH5nozI9xROOgeYzhXyDQ1mvqEs8kn1
Yz4pOd6fxencKfgxn9E3igexeCbp9GU648iHVb9WTR/WD9IJZzoR5GOyIh+T
Pp2DNSSdOrX+bz/X3n41/VwXSMeG+aHmkR9qGvmhrtD52/Gkk9G3pk5f8oVN
Jl9YEPnC7Ml/lEX+I3l896L2Ysfai0qW8CW9YL6k+Uqe5z75s1Yxf9Y38jc9
YzqGc4W/yY35mx6Qzhqm04B8Xn7M53WTdE4xnafkkypJrOmTUqbTg/xir8kv
do38Yl9IpzbzWx0jv1Ue+a2CyW8l67xiOm7kO+vPfGenSOcm822NJN+WK/Nt
nSKdvkznEPnXljP/miHpuDOdLeT/Ok3+ryd0ft6BdKYynQbkgzMiH5wO+eAW
kF+sgvxih+h8/kIWd6B4HdKZxnRKyU/Xlvx0H8lPt4R0fjCdgeRH8yM/2h3y
C4wxFf67TuS/60z+O1Py5XVkcWPyf9kx/9cOai8ZrL00JF9Yf+YLG6TkedzJ
H9eT/HEDye/QmXxkbuQju0W+D12Kn2ZxWacL0zlNPjsF+exkn8UI0gliOsHk
U7tJPjU/8qHIvjwVw201fHlb5HjPmnHZ73aXdM6Szl7yu00lv1s++d02yzov
a/r+npDvT498fzfJ9yf75kyZzlvyzaWQb86RfHOR5BPcQj7BePIJ+lB8K4vL
/rt0ptON/HcG5L/7S36f46Szm+ncLxM+xH+YD7EH6QDT+Ug+vi/k49Mhn1Fj
8jMeZjovyM8YQ37G1eTfOUG+P/IxwR/yMZG/CU4zP+A7JTrbyRc5hnyRoeQb
+rtQ+O/Smf9uPrWXfay9LCVfnjr58paTj0x+Hmf2nPnkTzRm/sQVpNOc6dQh
f1808/c1JT9jOvMzqlP8Mo+TTjzTWUc+wXDmE6xPOleYzj494ZdUJb/kVvJL
2pJOFNOJJ7/hE/Ib/iC/Yf8+QqcR8132JN/lDvJdWpHv0oH8iXWZP/Gokngk
+TTdyadpRz7NFIqfZvFjSvyPKgOE/3Eh8z+mkd+zLfk9l5O/L5viWixeW4nO
ZOajNCFfZC7ptGd+UlPyk9ZjftKppFMdVtOPWevffebcUeL/5FHyvvNM0lFj
OvnkS/UnX+pk8jnK/kc38j/K8TJqL7GsvZiRL1KVfJEtSV88RxY9z8n/9sF7
kD+0Ujw/mtLzzyGdusxfWUD+ynbMX6lLOlVMZzn5TLXIZ3qQfKaFSnya3ZlP
8xb5NNeRTifSOUA6LcivOo/8qlnkV9VR4vdUnSH8niuZ37OdEt/rYfK9FpLv
VZd8r3Vn/N++0SPkG9Un32gX8o0eYf5ZWceG/LNJzD/7inymq5jP9CXFbVh8
vRIfbjPy4SYzH24J6VgxnVTysfqQj/U19ZNNSCeR6awjP682+Xnl/hNJZyXp
lJDOUfLDniA/bDX1z2tIpx3T0SZf8B3mCz5C/tOJ5D+Vx5FMai/OrL18J19q
EvOlHqfn8aLnkceLN8yfK4+bP0knhenMIH+rK/O3viOdb0ynO/l8x5PPVx6v
j5Ef9gLzw8rxKBbXUaKTTX7hi+QXnkZ+YRclOl/Ib7uY+W1l33EK0xlOvuMf
zHf8g3TmMx1b8u2qGNb07cr+5W9MJ4/8y5/JvyzP9zbLOktr6riQ//cu8/9m
kc5HpjOVfNDJzAftRn5hDfILy/Ne2UesxeJjSSeS6ViRn3ot81MTvwJ1mR95
KPmRg5kfeQLpmDMd2WfqQD5TeR19n/y/wPy/sl/biLWXAeQL/km+YBPyBVuS
D/oP80FbUFxlWs34WNL5ynRakr/4B/mLS8lfLPus/zL93eSzPks+68e0TtQi
nQqms5Z8yrVmCZ/yQ/IpE28EfZlOV/JrnyS/9kLya8t+Z5WVNf3OGeR3/pha
0++cRv7uyeTvfk/+7ksUn8Ti+aSjynzTu8k37UC+aXfyTaeQzjims5z840sX
1PSPyz7rDcxnHU/x7Sw+n3QymA9d5Zrwob9nPnRZZzfTOU4+blXm475JvvU8
5lt/QvErLC7rNGI6i8gPvoT5wd+Qzi2mM4p8vreZz/cU+a/9mP/6ObUXA9Ze
fpAvuzX5svuQL9ucnseCPU8C+dN3M3/6YPJx72Q+bkOKH2ZxlcfCz/6K+dmJ
a4QvWNyYdCKYTjr5xNuTT/we5Rspr4iFTKeI/PKbmV+e8p/YlfnNn5LffCvz
m1N+FdcxnQ3kux/FfPfDyZ+ezPzpoyiexuIGpDOb6awl//4h5t83IJ1MpuOv
xP++h/z+lbWE378B+f0dKV7N4i7kl/+H/PJq5Jc/RfGjPE46tWrX1NlCPIGG
jCdwknSOMJ2F5MffTn78LrR/YUc6TZjOX/JZZzCfdSL538uY/30LtZciai/N
qL1cJV/8e+aLN6fnWc34AC+ID1CrY00+gC/56CczH30wxSew+BXS2cB0xhwX
nAF74gzI+1ARpDOD6XQhn34r5tOPOSW4BF2JS/CXuATNiVfQj8Ubkq/fh/n6
m1Lcn8XXk44x02lE3AMbxj1oqUTnFHEDjjJuQAPiJDgxToIGxV1Z3Jl0HJlO
tzjBH5jD+ANdSOcU02lMHIYkzmEgHROmk0EcAyvGMZB5DilMh/adYS7jORgS
96DcvCb3wJziv1lc1pnFdLaTz/0T87m7EWdAk3EGIqi93GXtReYSdGS/P0bP
04fxGTyJzxDB+Ay+pKPNdIhviW+Ib2BIfANP4jl0ZTyHsxTvxeJHSOc901lG
nIRE4iSYEichmHT6Mh0N4kUUES9iGvEiDhJXoTtxFZoTV8Gd4t0Yb6EW8SUe
M75EfSXciSOk05np6xG3YTJxG8qJ29CQdF4xnVTiVyxm/IqZpNOL6fgR/0Gb
8R/SlehcJw7GKMbB2EK8iHDiRcwkXsROiieweD7p9GU67Yin0YfxNPaRTjbj
UVwlHsUn4lG0IR6FRgMxLjxn48Je4gx4M86AMv6DFfE6vhCvI4Z4HXeICxHP
uBCdiIPxhjgYU4mD0ZXiZSx+l3QSmU4h8SUCGF+iG+l8ZjqdibORR5wNmXMb
QTp+TKeQOBU/iFOhS5yKbqRTyHQeEq+jBeN13CGdUqbzvbvgXbjr1eRdPCCd
5kwnjrgfcYz7UU06D5lOd+Jm5DJuRizpxDCdQOKHlDJ+SG/Suc90XIi/4Uj8
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
5Xyiiv8xJw2M8OekATcnzWecg/tcUfK5HsBTR8g5t+TzviCf9y3e/2l5/zOW
jvztyNQFgewmM6tenr4rkLxgUqWlS/677+PR7/P3a3TZHnnWBNrMunD16TkZ
gY77mh672umKFxtxrsSdjFVe18HDT7XNTglMja4+qv7RK94gnv/f8vwzeHwn
efxivt+r8v1eOdAmT+NXNnmjkooWiq+3PjAsokOtSb//OzkAH1dG+LiycI7n
hHMsavB6I+HXFgm/tpznLyLPPx6eq2WFYJ7rIHxWY/isp+Gz5sNnPRgQzGfN
gsNKEA7r4yifLyspfNlNeKVVwiuth1caKrzSUYMzKgwvs0x4mRpwQ2eEG/qT
v2/U+15eNwLOZTmcy3f0iukne5XhPlw/eTR8yo1vg/kU9gh7ucLXzIHLiBMu
I/9Kn6c4JDxFdC2fmygm3MRUuJJewpXkC/N5hL7CI5RumlSiadK2yOzpSzKn
L5n2MJ8Jhy+4x/56xynEwBdUFL6gvMEXjIOPyC98xEn6/MOkz6970t2+dWtv
uOvnt9J+Pn3yL6RPHnLJf91IXncCr+v2UNeVnrm1N3kMvfcNh4N7771kP6/r
IfP/c2C39Gz30B/uJv3hXfSoS0uPOpFe9DjpRXejTztY+rQp9Es7Vgjul26j
J1xbesIf0QvtJL3QKvRd46Xv6vZUbpW+6wT6wKOlD1zR2DuZQH8yXPqTG+iF
1pNeaAn6sc9IP7ao0QsNGHsJv6IfW1v6sRnGnsEa9CGvSR+yhrH/zvUeixl7
6zZKv3E5PcYs6TE+Ty8xXXqJ0+n7tZK+XxJ9v+HS95tHr2+Q0es7KL0+1987
Jv29SPp7laW/l4+9ZiNkr1lXelz9pMc1mfn4LZmPn6LnMPjT4J5DUWNeP4P5
dabMr//C8xeQPV89mOfWk3luf+aznWU+u4r57HKZz77KHLahzGHnM1/eL/Pl
Lcwra8q88oaxR+ZJY87o5onzZZ44nblhXZkbZvC6deV1hxj7ONw8q5/MfVYa
+yDw3HpNZb7m9hqkylwmlXlKtsxTVhle/S3MldbIXKkO84hNMo/IPBU39ey0
hMgukZm/NvhlwcO/a7MMv3pr5gufGF50nS9kGvOR84YPXD3eA8nzuxp+7Dbk
8+Hiow4jT54meXJIXv91m8vrOk/yXMmZnR84n+TALvfOkNx7iPhjXQ7J/D1Q
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
86ljRr+0sTGf6sl86rbMp/4DSnCzMA==
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {0., 
       0.49523678159929424`}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25}, $CellContext`m1Sel$$ = 1, $CellContext`m2Sel$$ = 
    1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$6250, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}}, $CellContext`moSel$$ = 
    2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10}, "numberOfMasses" -> 1, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}}, 
     "mPosFirstCell" -> {{0.9, 0.7}}, 
     "pointsDataTable" -> {{{-1.2000000000000002`, -2.7}, {
      0.7, -1.9000000000000001`}, {2.6, -1.1}, {-1.1, -1.4000000000000001`}, {
      0.8, -0.6000000000000001}, {2.6999999999999997`, 
      0.19999999999999996`}, {-0.9999999999999999, -0.10000000000000009`}, {
      0.9, 0.7}, {2.8, 1.5}, {-0.8999999999999998, 1.2}, {1., 2.}, {2.9, 
      2.8}, {-0.7999999999999999, 2.5}, {1.1, 3.3}}}, "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {
    10}, $CellContext`rawNumberOfMasses$$ = 1, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 2, $CellContext`tauSliderValue$$ = 
    1, $CellContext`tick$$ = True, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 
    0.8}, {0.9, 0.7}}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       TabView[{"dynamics" -> Column[{
            Dynamic[
             Row[{
               OverVector["q"], " = ", 
               
               Module[{$CellContext`qm$}, $CellContext`qm$ = 
                 ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                Slider2D[
                  
                  Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                  ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
               " 2 \[Pi] ", 
               Dynamic[
                NumberForm[
                 MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}]], 
            Row[{
              Text["time, normalized to one period, t/T = "], 
              Dynamic[
               
               N[($CellContext`tauSliderValue$$ - 
                 1)/$CellContext`dynMeshSize$$]]}], 
            Row[{
              Dynamic[
               Manipulator[
                
                Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {
                1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                ContinuousAction -> True, Appearance -> "Open", 
                AppearanceElements -> {
                 "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                  "FasterSlowerButtons", "DirectionButton"}]]}], 
            Row[{
              Text["oscillation scale factor:"]}], 
            Row[{" " Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], 
              Dynamic[
               NumberForm[$CellContext`scale$$, {3, 2}]]}], 
            Row[{
              Text["Angular frequency \[Omega](q), selection:"], 
              Dynamic[
               SetterBar[
                
                Dynamic[$CellContext`omegaIndex$$, ($CellContext`omegaIndex$$ = \
#; $CellContext`bRefreshDynPlot$$ = True; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
         "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
         Column[{
            Row[{
              Text["number of mesh intervals "], 
              Manipulator[
               
               Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                   EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {2,
                30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[$CellContext`freqMeshSize$$]}], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}], "parameters" -> Grid[{{
             Row[{
               Text["mass: "], 
               Dynamic[
                If[$CellContext`rawNumberOfMasses$$ > 1, 
                 SetterBar[
                  
                  Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   Range[$CellContext`rawNumberOfMasses$$]]], 
                 $CellContext`massLabel[1]]]}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                 Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                  ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {0.25, 
                 Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
             Text["coupling to neighbouring: "], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 1, 
               SetterBar[
                
                Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 Range[$CellContext`rawNumberOfMasses$$]]], 
               $CellContext`massLabel[1]]]}, {
             Row[{
               Text["horizontal: "], 
               Style[
                Subscript[
                 Style["k", Italic], 1], FontColor -> RGBColor[
                  Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
               OverVector["a"], " "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
             Row[{
               Text["vertical: "], 
               Style[
                Subscript[
                 Style["k", Italic], 2], FontColor -> RGBColor[0, 
                  Rational[2, 3], 0]], " || ", 
               OverVector["b"], " "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
             Row[{
               Text["diagonal: "], 
               Style[
                Subscript[
                 Style["k", Italic], 3], FontColor -> 
                RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
               " || (", 
               OverVector["b"], " + ", 
               OverVector["a"], ") "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
             Row[{
               Text["diagonal: "], 
               Style[
                Subscript[
                 Style["k", Italic], 4], FontColor -> RGBColor[0, 
                  Rational[2, 3], 
                  Rational[2, 3]]], " || (", 
               OverVector["b"], " - ", 
               OverVector["a"], ") "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k4$$, {3, 2}]]}]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Row[{
                 Text["coupling from "], 
                 Dynamic[
                  $CellContext`massLabel[$CellContext`m1Sel$$]], 
                 Text[" to: "]}]]], 
             Dynamic[
              Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]], 
               Blank[], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  DeleteCases[
                   
                   Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Row[{
                 $CellContext`kLable[5], ": "}]]], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Row[{
                 Dynamic[
                  Manipulator[
                   
                   Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}]], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k5$$, {3, 2}]]}]]]}}]}, 
        Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], ImageSize -> {250, 350}]],
       Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 12}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 1}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        12, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10}, $CellContext`rawNumberOfMasses$$ = 
        1, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
        1, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         Switch[$CellContext`tabNumber$$, $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], $CellContext`freqTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
            Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
          Blank[], 
          LocatorPane[
           Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                 Dimensions[#]] < 3, 
               
               Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[$CellContext`rawArrayOfMasses$$]]; 
              If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                  $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                
                While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[$CellContext`kArray$$, All, 1], All, 1]]; 
              If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                
                While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 1], 
               Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                 Part[$CellContext`u$$, 2], 
                 
                 Part[$CellContext`u$$, 
                  2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 2], 
               Part[$CellContext`u$$, 2]]; {
               Part[$CellContext`u$$, 1], 
               
               Part[$CellContext`u$$, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
             If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
             If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
             If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
             If[$CellContext`omegaIndex$$ > 
               2 $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
             ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
              2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
             True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
           $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
           LocatorAutoCreate -> True, ContinuousAction -> False]]]), 
      "Specifications" :> {
        TabView[{"dynamics" -> Column[{
             Dynamic[
              Row[{
                OverVector["q"], " = ", 
                
                Module[{$CellContext`qm$}, $CellContext`qm$ = 
                  ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                 Slider2D[
                   
                   Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False,
                    ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
                " 2 \[Pi] ", 
                Dynamic[
                 NumberForm[
                  MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}]], 
             Row[{
               Text["time, normalized to one period, t/T = "], 
               Dynamic[
                
                N[($CellContext`tauSliderValue$$ - 
                  1)/$CellContext`dynMeshSize$$]]}], 
             Row[{
               Dynamic[
                Manipulator[
                 
                 Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {
                 1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                 ContinuousAction -> True, Appearance -> "Open", 
                 AppearanceElements -> {
                  "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                   "FasterSlowerButtons", "DirectionButton"}]]}], 
             Row[{
               Text["oscillation scale factor:"]}], 
             Row[{" " Manipulator[
                 
                 Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], 
               Dynamic[
                NumberForm[$CellContext`scale$$, {3, 2}]]}], 
             Row[{
               Text["Angular frequency \[Omega](q), selection:"], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
          "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
          Column[{
             Row[{
               Text["number of mesh intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`freqMeshSize$$]}], 
             LocatorPane[
              Dynamic[$CellContext`qPlaneLoc$$], 
              Dynamic[
               (Graphics[{
                 Lighter[Gray], 
                 Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                 Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
              ContinuousAction -> False]}], "parameters" -> Grid[{{
              Row[{
                Text["mass: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                  Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                   ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {0.25, 
                  Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
              Text["coupling to neighbouring: "], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]]}, {
              Row[{
                Text["horizontal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 1], FontColor -> RGBColor[
                   Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                OverVector["a"], " "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
              Row[{
                Text["vertical: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 2], FontColor -> RGBColor[0, 
                   Rational[2, 3], 0]], " || ", 
                OverVector["b"], " "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 3], FontColor -> 
                 RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                " || (", 
                OverVector["b"], " + ", 
                OverVector["a"], ") "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 4], FontColor -> RGBColor[0, 
                   Rational[2, 3], 
                   Rational[2, 3]]], " || (", 
                OverVector["b"], " - ", 
                OverVector["a"], ") "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k4$$, {3, 2}]]}]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Row[{
                  Text["coupling from "], 
                  Dynamic[
                   $CellContext`massLabel[$CellContext`m1Sel$$]], 
                  Text[" to: "]}]]], 
              Dynamic[
               Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
                Dynamic[
                 $CellContext`massLabel[
                  First[
                   Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 
                Blank[], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   DeleteCases[
                    
                    Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Row[{
                  $CellContext`kLable[5], ": "}]]], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Row[{
                  Dynamic[
                   Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k5$$, {3, 2}]]}]]]}}]}, 
         Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
         ImageSize -> {250, 350}], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 12}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10}}, 0, ControlType -> 
         None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{907., {288., 295.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, $CellContext`res,
           $CellContext`epsilon, $CellContext`m, $CellContext`mScalarArray, \
$CellContext`numberOfMasses}, $CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax, 1]/2, Part[$CellContext`qMax, 1]/2,
                Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -
               Part[$CellContext`qMax, 2]/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {380, 
        380}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, $CellContext`k] \
$CellContext`glConstMMax^(-1)/350]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
$CellContext`glConstMMax^(-1)/500]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 0.25, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.605485449360225*^9, {3.605485932115837*^9, 3.6054859322438445`*^9}},
 CellID->511669211],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    True, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.25, 0.321764, {0.9, 0.7}, {0.5420000000000003, 
        1.1400000000000001`}, {{
        0.398316778757101, -0.4895513481930855}, {-0.4895513481930855, 
        0.601683221242899}}}, {
       1, 4, {0, 0}, 0.25, 0.48318099999999997`, {0.9, 0.7}, {
        1.0659999999999998`, 1.375}, {{0.05703038819821131, 
        0.23190067490236554`}, {0.23190067490236554`, 0.9429696118017887}}}, {
       1, 3, {0, 0}, 0.25, 0.5745010000000002, {0.9, 0.7}, {
        1.4740000000000002`, 1.1949999999999998`}, {{0.5734994369026339, 
        0.4945683297331074}, {0.4945683297331074, 0.4265005630973659}}}}, {{
       2, 1, {0, 0}, 0.25, 0.321764, {0.9, 0.7}, {0.5420000000000003, 
        1.1400000000000001`}, {{
        0.398316778757101, -0.4895513481930855}, {-0.4895513481930855, 
        0.601683221242899}}}, {
       2, 4, {0, 0}, 0.25, 0.32980099999999946`, {0.5420000000000003, 
        1.1400000000000001`}, {1.0659999999999998`, 1.375}, {{
        0.8325505380517342, 0.3733766725995374}, {0.3733766725995374, 
        0.16744946194826588`}}}, {
       2, 3, {0, 0}, 0.25, 0.8716489999999998, {0.5420000000000003, 
        1.1400000000000001`}, {1.4740000000000002`, 1.1949999999999998`}, {{
        0.9965295663736206, 0.05880807526882924}, {0.05880807526882924, 
        0.0034704336263793904`}}}}, {{
       3, 4, {0, 0}, 0.25, 0.19886400000000037`, {1.4740000000000002`, 
        1.1949999999999998`}, {1.0659999999999998`, 1.375}, {{
        0.837074583635047, -0.3692976104272266}, {-0.3692976104272266, 
        0.16292541636495292`}}}, {
       3, 1, {0, 0}, 0.25, 0.5745010000000002, {0.9, 0.7}, {
        1.4740000000000002`, 1.1949999999999998`}, {{0.5734994369026339, 
        0.4945683297331074}, {0.4945683297331074, 0.4265005630973659}}}, {
       3, 2, {0, 0}, 0.25, 0.8716489999999998, {0.5420000000000003, 
        1.1400000000000001`}, {1.4740000000000002`, 1.1949999999999998`}, {{
        0.9965295663736206, 0.05880807526882924}, {0.05880807526882924, 
        0.0034704336263793904`}}}}, {{
       4, 3, {0, 0}, 0.25, 0.19886400000000037`, {1.4740000000000002`, 
        1.1949999999999998`}, {1.0659999999999998`, 1.375}, {{
        0.837074583635047, -0.3692976104272266}, {-0.3692976104272266, 
        0.16292541636495292`}}}, {
       4, 2, {0, 0}, 0.25, 0.32980099999999946`, {0.5420000000000003, 
        1.1400000000000001`}, {1.0659999999999998`, 1.375}, {{
        0.8325505380517342, 0.3733766725995374}, {0.3733766725995374, 
        0.16744946194826588`}}}, {
       4, 1, {0, 0}, 0.25, 0.48318099999999997`, {0.9, 0.7}, {
        1.0659999999999998`, 1.375}, {{0.05703038819821131, 
        0.23190067490236554`}, {0.23190067490236554`, 
        0.9429696118017887}}}}}, {{{
       1, 4, {-1, 0}, 0.25, 0.5598439999999996, {0.9, 0.7}, {
        1.4379999999999997`, 0.18000000000000016`}, {{
        0.5170083094576344, -0.4997106336765241}, {-0.4997106336765241, 
        0.4829916905423654}}}, {
       1, 2, {-1, 0}, 0.25, 0.5702209999999994, {0.9, 0.7}, {
        0.9140000000000001, -0.054999999999999716`}, {{
        0.0003437263797720597, -0.01853667262342162}, {-0.01853667262342162, 
        0.999656273620228}}}, {
       1, 3, {-1, 0}, 0.25, 1.384916, {0.9, 0.7}, {1.846, 0.}, {{
        0.646187927643265, -0.47815174349924466`}, {-0.47815174349924466`, 
        0.3538120723567349}}}, {
       1, 1, {1, 0}, 0.25, 1.5664089999999995`, {0.9, 0.7}, {
        0.5280000000000001, 1.8949999999999998`}, {{
        0.08834474265661138, -0.28379561149099625`}, {-0.28379561149099625`, 
        0.9116552573433887}}}, {
       1, 1, {-1, 0}, 0.25, 1.5664089999999995`, {0.9, 0.7}, {
        1.2719999999999998`, -0.4949999999999999}, {{
        0.08834474265661132, -0.28379561149099614`}, {-0.28379561149099614`, 
        0.9116552573433887}}}, {
       1, 3, {0, -1}, 0.25, 1.8604999999999992`, {0.9, 
        0.7}, {-0.4099999999999997, 0.31999999999999984`}, {{
        0.9223864552539639, 0.26756248320344006`}, {0.26756248320344006`, 
        0.07761354474603609}}}, {
       1, 3, {1, 0}, 0.25, 2.8969039999999993`, {0.9, 0.7}, {
        1.1020000000000003`, 2.3899999999999997`}, {{0.01408538218732831, 
        0.1178430489929941}, {0.1178430489929941, 0.9859146178126718}}}, {
       1, 4, {0, -1}, 0.25, 2.991524, {0.9, 0.7}, {-0.8180000000000001, 
        0.5}, {{0.9866288888205477, 0.11485784503149563`}, {
        0.11485784503149563`, 0.01337111117945234}}}, {
       1, 2, {1, 0}, 0.25, 3.2061249999999992`, {0.9, 0.7}, {
        0.17000000000000037`, 2.335}, {{
        0.16621310772349787`, -0.37227182346290294`}, {-0.37227182346290294`, 
        0.8337868922765022}}}, {
       1, 3, {-1, -1}, 0.25, 3.3604689999999997`, {0.9, 
        0.7}, {-0.03799999999999981, -0.875}, {{0.2618217873755121, 
        0.43962613551858376`}, {0.43962613551858376`, 0.7381782126244878}}}, {
       1, 3, {1, -1}, 0.25, 3.493348999999998, {0.9, 
        0.7}, {-0.7819999999999996, 1.5149999999999997`}, {{
        0.8098601084518038, -0.3924114080786088}, {-0.3924114080786088, 
        0.19013989154819627`}}}, {
       1, 4, {1, 0}, 0.25, 3.5393359999999996`, {0.9, 0.7}, {0.694, 2.57}, {{
        0.01198981955937499, -0.10883962415549137`}, {-0.10883962415549137`, 
        0.9880101804406252}}}, {
       1, 2, {-1, 1}, 0.25, 3.6168040000000006`, {0.9, 0.7}, {2.798, 
        0.8200000000000003}, {{0.9960185843634325, 0.06297272398504332}, {
        0.06297272398504332, 0.003981415636567554}}}, {
       1, 4, {-1, -1}, 0.25, 3.7577409999999998`, {0.9, 
        0.7}, {-0.4460000000000002, -0.6949999999999998}, {{
        0.4821290237938166, 0.49968052614589453`}, {0.49968052614589453`, 
        0.5178709762061833}}}, {
       1, 2, {0, 1}, 0.25, 4.057901000000001, {0.9, 0.7}, {2.426, 2.015}, {{
        0.5738622011724781, 0.4945142821374894}, {0.4945142821374894, 
        0.4261377988275219}}}, {
       1, 1, {0, 1}, 0.25, 4.315080999999999, {0.9, 0.7}, {2.784, 1.575}, {{
        0.8225699587099293, 0.38203222604627823`}, {0.38203222604627823`, 
        0.17743004129007084`}}}, {
       1, 1, {0, -1}, 0.25, 4.315080999999999, {0.9, 
        0.7}, {-0.9839999999999999, -0.17500000000000004`}, {{
        0.8225699587099293, 0.38203222604627823`}, {0.38203222604627823`, 
        0.17743004129007084`}}}, {
       1, 1, {1, -1}, 0.25, 5.191935999999999, {0.9, 
        0.7}, {-1.3559999999999999`, 1.0199999999999998`}, {{
        0.9802771066515458, -0.1390463981066022}, {-0.1390463981066022, 
        0.0197228933484542}}}, {
       1, 1, {-1, 1}, 0.25, 5.191935999999999, {0.9, 0.7}, {
        3.1559999999999997`, 0.3800000000000001}, {{
        0.9802771066515458, -0.1390463981066022}, {-0.1390463981066022, 
        0.0197228933484542}}}, {
       1, 2, {0, -1}, 0.25, 5.215788999999997, {0.9, 
        0.7}, {-1.3419999999999996`, 0.2650000000000001}, {{0.96372073333488, 
        0.1869841743981591}, {0.1869841743981591, 0.036279266665120075`}}}, {
       1, 4, {1, -1}, 0.25, 5.358124999999999, {0.9, 0.7}, {-1.19, 
        1.6949999999999998`}, {{
        0.8152292079785373, -0.3881115128893036}, {-0.3881115128893036, 
        0.1847707920214627}}}, {
       1, 4, {-1, 1}, 0.25, 5.992108999999999, {0.9, 0.7}, {
        3.3219999999999996`, 1.0550000000000002`}, {{0.9789681729754915, 
        0.14349038043199824`}, {0.14349038043199824`, 
        0.021031827024508426`}}}, {
       1, 2, {-1, -1}, 0.25, 6.153799999999998, {0.9, 
        0.7}, {-0.9699999999999998, -0.9299999999999997}, {{
        0.5682505118788391, 0.49531996489973673`}, {0.49531996489973673`, 
        0.4317494881211609}}}, {
       1, 1, {1, 1}, 0.25, 6.571043999999998, {0.9, 0.7}, {2.412, 
        2.7699999999999996`}, {{0.34791183866673253`, 0.47630787436516936`}, {
        0.47630787436516936`, 0.6520881613332674}}}, {
       1, 1, {-1, -1}, 0.25, 6.571044, {0.9, 
        0.7}, {-0.612, -1.3699999999999999`}, {{0.3479118386667325, 
        0.47630787436516936`}, {0.47630787436516936`, 0.6520881613332675}}}, {
       1, 4, {0, 1}, 0.25, 6.605, {0.9, 0.7}, {2.9499999999999997`, 2.25}, {{
        0.6362604087812262, 0.4810749432248296}, {0.4810749432248296, 
        0.36373959121877364`}}}, {
       1, 2, {1, -1}, 0.25, 7.410595999999997, {0.9, 
        0.7}, {-1.7139999999999995`, 1.46}, {{
        0.9220575511065506, -0.26808100185194284`}, {-0.26808100185194284`, 
        0.07794244889344935}}}, {
       1, 2, {1, 1}, 0.25, 7.631816, {0.9, 0.7}, {2.0540000000000003`, 
        3.21}, {{0.1744952970564281, 0.3795348315525428}, {0.3795348315525428,
         0.8255047029435718}}}, {
       1, 3, {0, 1}, 0.25, 7.918664000000001, {0.9, 0.7}, {3.358, 2.07}, {{
        0.7629776942171054, 0.42525607855062414`}, {0.42525607855062414`, 
        0.23702230578289465`}}}, {
       1, 3, {-1, 1}, 0.25, 8.039525000000001, {0.9, 0.7}, {3.73, 0.875}, {{
        0.9961906953458071, 0.061601898122090555`}, {0.061601898122090555`, 
        0.00380930465419288}}}, {
       1, 4, {1, 1}, 0.25, 10.350709, {0.9, 0.7}, {2.578, 3.445}, {{
        0.2720281287011353, 0.4450042987393424}, {0.4450042987393424, 
        0.7279718712988646}}}, {
       1, 3, {1, 1}, 0.25, 10.930620999999999`, {0.9, 0.7}, {2.986, 
        3.2649999999999997`}, {{0.39809229503063015`, 0.4895046676670978}, {
        0.4895046676670978, 0.6019077049693699}}}}, {{
       2, 1, {1, 0}, 0.25, 0.5702209999999994, {0.5420000000000003, 
        1.1400000000000001`}, {0.5280000000000001, 1.8949999999999998`}, {{
        0.0003437263797720597, -0.01853667262342162}, {-0.01853667262342162, 
        0.999656273620228}}}, {
       2, 2, {1, 0}, 0.25, 1.5664089999999995`, {0.5420000000000003, 
        1.1400000000000001`}, {0.17000000000000037`, 2.335}, {{
        0.08834474265661138, -0.28379561149099625`}, {-0.28379561149099625`, 
        0.9116552573433887}}}, {
       2, 2, {-1, 0}, 0.25, 1.5664089999999995`, {0.5420000000000003, 
        1.1400000000000001`}, {0.9140000000000001, -0.054999999999999716`}, {{
        0.08834474265661138, -0.28379561149099625`}, {-0.28379561149099625`, 
        0.9116552573433887}}}, {
       2, 3, {0, -1}, 0.25, 1.5787040000000003`, {0.5420000000000003, 
        1.1400000000000001`}, {-0.4099999999999997, 0.31999999999999984`}, {{
        0.5740810183542955, 0.49448154942281775`}, {0.49448154942281775`, 
        0.4259189816457045}}}, {
       2, 4, {-1, 0}, 0.25, 1.724415999999999, {0.5420000000000003, 
        1.1400000000000001`}, {1.4379999999999997`, 0.18000000000000016`}, {{
        0.4655581947743465, -0.49881235154394293`}, {-0.49881235154394293`, 
        0.5344418052256534}}}, {
       2, 3, {1, 0}, 0.25, 1.876099999999999, {0.5420000000000003, 
        1.1400000000000001`}, {1.1020000000000003`, 2.3899999999999997`}, {{
        0.1671552689089069, 0.3731144395288099}, {0.3731144395288099, 
        0.8328447310910931}}}, {
       2, 3, {1, -1}, 0.25, 1.8936009999999994`, {0.5420000000000003, 
        1.1400000000000001`}, {-0.7819999999999996, 1.5149999999999997`}, {{
        0.9257367312332431, -0.2621988475924968}, {-0.2621988475924968, 
        0.07426326876675694}}}, {
       2, 4, {1, 0}, 0.25, 2.0680039999999993`, {0.5420000000000003, 
        1.1400000000000001`}, {0.694, 2.57}, {{0.011172125392407323`, 
        0.1051061796785691}, {0.1051061796785691, 0.9888278746075927}}}, {
       2, 4, {0, -1}, 0.25, 2.2592000000000008`, {0.5420000000000003, 
        1.1400000000000001`}, {-0.8180000000000001, 0.5}, {{
        0.8186968838526912, 0.3852691218130312}, {0.3852691218130312, 
        0.1813031161473088}}}, {
       2, 3, {-1, 0}, 0.25, 3.0000159999999996`, {0.5420000000000003, 
        1.1400000000000001`}, {1.846, 0.}, {{
        0.5668023103876778, -0.4955173572407614}, {-0.4955173572407614, 
        0.4331976896123222}}}, {
       2, 1, {-1, 0}, 0.25, 3.2061249999999992`, {0.5420000000000003, 
        1.1400000000000001`}, {1.2719999999999998`, -0.4949999999999999}, {{
        0.16621310772349782`, -0.3722718234629029}, {-0.3722718234629029, 
        0.8337868922765022}}}, {
       2, 4, {1, -1}, 0.25, 3.3078490000000005`, {0.5420000000000003, 
        1.1400000000000001`}, {-1.19, 1.6949999999999998`}, {{
        0.9068805740528061, -0.29059972205502715`}, {-0.29059972205502715`, 
        0.09311942594719397}}}, {
       2, 1, {1, -1}, 0.25, 3.6168040000000006`, {0.5420000000000003, 
        1.1400000000000001`}, {-1.3559999999999999`, 1.0199999999999998`}, {{
        0.9960185843634325, 0.06297272398504332}, {0.06297272398504332, 
        0.003981415636567554}}}, {
       2, 1, {0, -1}, 0.25, 4.057901000000001, {0.5420000000000003, 
        1.1400000000000001`}, {-0.9839999999999999, -0.17500000000000004`}, {{
        0.5738622011724781, 0.4945142821374894}, {0.4945142821374894, 
        0.4261377988275219}}}, {
       2, 2, {0, 1}, 0.25, 4.315080999999999, {0.5420000000000003, 
        1.1400000000000001`}, {2.426, 2.015}, {{0.8225699587099293, 
        0.38203222604627823`}, {0.38203222604627823`, 
        0.17743004129007084`}}}, {
       2, 2, {0, -1}, 0.25, 4.315080999999999, {0.5420000000000003, 
        1.1400000000000001`}, {-1.3419999999999996`, 0.2650000000000001}, {{
        0.8225699587099293, 0.38203222604627823`}, {0.38203222604627823`, 
        0.17743004129007084`}}}, {
       2, 4, {-1, -1}, 0.25, 4.343369000000001, {0.5420000000000003, 
        1.1400000000000001`}, {-0.4460000000000002, -0.6949999999999998}, {{
        0.2247435113157553, 0.41741330289920114`}, {0.41741330289920114`, 
        0.7752564886842447}}}, {
       2, 3, {-1, -1}, 0.25, 4.396625000000001, {0.5420000000000003, 
        1.1400000000000001`}, {-0.03799999999999981, -0.875}, {{
        0.07651323458334518, 0.26581753049213885`}, {0.26581753049213885`, 
        0.9234867654166548}}}, {
       2, 2, {1, -1}, 0.25, 5.191935999999999, {0.5420000000000003, 
        1.1400000000000001`}, {-1.7139999999999995`, 1.46}, {{
        0.9802771066515458, -0.1390463981066022}, {-0.1390463981066022, 
        0.0197228933484542}}}, {
       2, 2, {-1, 1}, 0.25, 5.191935999999999, {0.5420000000000003, 
        1.1400000000000001`}, {2.798, 0.8200000000000003}, {{
        0.9802771066515458, -0.1390463981066022}, {-0.1390463981066022, 
        0.0197228933484542}}}, {
       2, 1, {0, 1}, 0.25, 5.215788999999997, {0.5420000000000003, 
        1.1400000000000001`}, {2.784, 1.575}, {{0.96372073333488, 
        0.1869841743981591}, {0.1869841743981591, 0.036279266665120075`}}}, {
       2, 1, {1, 1}, 0.25, 6.153799999999997, {0.5420000000000003, 
        1.1400000000000001`}, {2.412, 2.7699999999999996`}, {{
        0.5682505118788392, 0.4953199648997368}, {0.4953199648997368, 
        0.4317494881211608}}}, {
       2, 2, {1, 1}, 0.25, 6.571044, {0.5420000000000003, 
        1.1400000000000001`}, {2.0540000000000003`, 3.21}, {{
        0.3479118386667325, 0.47630787436516936`}, {0.47630787436516936`, 
        0.6520881613332675}}}, {
       2, 2, {-1, -1}, 0.25, 6.571044, {0.5420000000000003, 
        1.1400000000000001`}, {-0.9699999999999998, -0.9299999999999997}, {{
        0.3479118386667325, 0.47630787436516936`}, {0.47630787436516936`, 
        0.6520881613332675}}}, {
       2, 4, {0, 1}, 0.25, 7.030563999999997, {0.5420000000000003, 
        1.1400000000000001`}, {2.9499999999999997`, 2.25}, {{
        0.8247509019191063, 0.380180025386299}, {0.380180025386299, 
        0.17524909808089367`}}}, {
       2, 1, {-1, 1}, 0.25, 7.410595999999997, {0.5420000000000003, 
        1.1400000000000001`}, {3.1559999999999997`, 0.3800000000000001}, {{
        0.9220575511065506, -0.26808100185194284`}, {-0.26808100185194284`, 
        0.07794244889344935}}}, {
       2, 1, {-1, -1}, 0.25, 7.631816, {0.5420000000000003, 
        1.1400000000000001`}, {-0.612, -1.3699999999999999`}, {{
        0.1744952970564281, 0.3795348315525428}, {0.3795348315525428, 
        0.8255047029435718}}}, {
       2, 4, {-1, 1}, 0.25, 7.735624999999996, {0.5420000000000003, 
        1.1400000000000001`}, {3.3219999999999996`, 1.0550000000000002`}, {{
        0.9990660095338126, -0.03054698230588995}, {-0.03054698230588995, 
        0.0009339904661872825}}}, {
       2, 3, {0, 1}, 0.25, 8.794755999999998, {0.5420000000000003, 
        1.1400000000000001`}, {3.358, 2.07}, {{0.9016573057854023, 
        0.2977774482885028}, {0.2977774482885028, 0.09834269421459783}}}, {
       2, 4, {1, 1}, 0.25, 9.458320999999998, {0.5420000000000003, 
        1.1400000000000001`}, {2.578, 3.445}, {{0.43826975210505115`, 
        0.4961747439106793}, {0.4961747439106793, 0.5617302478949489}}}, {
       2, 3, {-1, 1}, 0.25, 10.233569, {0.5420000000000003, 
        1.1400000000000001`}, {3.73, 0.875}, {{
        0.9931377801820654, -0.08255379916820813}, {-0.08255379916820813, 
        0.006862219817934493}}}, {
       2, 3, {1, 1}, 0.25, 10.488760999999997`, {0.5420000000000003, 
        1.1400000000000001`}, {2.986, 3.2649999999999997`}, {{
        0.569479655414019, 0.4951490457261825}, {0.4951490457261825, 
        0.4305203445859811}}}}, {{
       3, 4, {-1, 0}, 0.25, 1.0315209999999992`, {1.4740000000000002`, 
        1.1949999999999998`}, {1.4379999999999997`, 0.18000000000000016`}, {{
        0.0012563971067966965`, 0.03542341842773972}, {0.03542341842773972, 
        0.9987436028932034}}}, {
       3, 1, {1, 0}, 0.25, 1.384916, {1.4740000000000002`, 
        1.1949999999999998`}, {0.5280000000000001, 1.8949999999999998`}, {{
        0.646187927643265, -0.47815174349924466`}, {-0.47815174349924466`, 
        0.3538120723567349}}}, {
       3, 3, {1, 0}, 0.25, 1.5664089999999995`, {1.4740000000000002`, 
        1.1949999999999998`}, {1.1020000000000003`, 2.3899999999999997`}, {{
        0.08834474265661138, -0.28379561149099625`}, {-0.28379561149099625`, 
        0.9116552573433887}}}, {
       3, 3, {-1, 0}, 0.25, 1.5664089999999995`, {1.4740000000000002`, 
        1.1949999999999998`}, {1.846, 0.}, {{
        0.08834474265661138, -0.28379561149099625`}, {-0.28379561149099625`, 
        0.9116552573433887}}}, {
       3, 2, {0, 1}, 0.25, 1.5787040000000003`, {1.4740000000000002`, 
        1.1949999999999998`}, {2.426, 2.015}, {{0.5740810183542955, 
        0.49448154942281775`}, {0.49448154942281775`, 0.4259189816457045}}}, {
       3, 1, {0, 1}, 0.25, 1.8604999999999992`, {1.4740000000000002`, 
        1.1949999999999998`}, {2.784, 1.575}, {{0.9223864552539639, 
        0.26756248320344006`}, {0.26756248320344006`, 
        0.07761354474603609}}}, {
       3, 2, {-1, 0}, 0.25, 1.876099999999999, {1.4740000000000002`, 
        1.1949999999999998`}, {0.9140000000000001, -0.054999999999999716`}, {{
        0.1671552689089069, 0.3731144395288099}, {0.3731144395288099, 
        0.8328447310910931}}}, {
       3, 2, {-1, 1}, 0.25, 1.8936009999999994`, {1.4740000000000002`, 
        1.1949999999999998`}, {2.798, 0.8200000000000003}, {{
        0.9257367312332431, -0.2621988475924968}, {-0.2621988475924968, 
        0.07426326876675694}}}, {
       3, 4, {1, 0}, 0.25, 2.4990250000000005`, {1.4740000000000002`, 
        1.1949999999999998`}, {0.694, 2.57}, {{
        0.2434549474294976, -0.4291673752763578}, {-0.4291673752763578, 
        0.7565450525705023}}}, {
       3, 1, {-1, 0}, 0.25, 2.8969039999999993`, {1.4740000000000002`, 
        1.1949999999999998`}, {1.2719999999999998`, -0.4949999999999999}, {{
        0.014085382187328323`, 0.11784304899299415`}, {0.11784304899299415`, 
        0.9859146178126718}}}, {
       3, 2, {1, 0}, 0.25, 3.0000159999999996`, {1.4740000000000002`, 
        1.1949999999999998`}, {0.17000000000000037`, 2.335}, {{
        0.5668023103876778, -0.4955173572407614}, {-0.4955173572407614, 
        0.4331976896123222}}}, {
       3, 4, {0, 1}, 0.25, 3.291600999999999, {1.4740000000000002`, 
        1.1949999999999998`}, {2.9499999999999997`, 2.25}, {{
        0.6618590770874111, 0.4730767793544844}, {0.4730767793544844, 
        0.33814092291258896`}}}, {
       3, 1, {1, 1}, 0.25, 3.3604689999999984`, {1.4740000000000002`, 
        1.1949999999999998`}, {2.412, 2.7699999999999996`}, {{
        0.26182178737551215`, 0.43962613551858387`}, {0.43962613551858387`, 
        0.7381782126244879}}}, {
       3, 4, {-1, 1}, 0.25, 3.4347039999999978`, {1.4740000000000002`, 
        1.1949999999999998`}, {3.3219999999999996`, 1.0550000000000002`}, {{
        0.9942935402876054, -0.07532526820360633}, {-0.07532526820360633, 
        0.005706459712394407}}}, {
       3, 1, {-1, 1}, 0.25, 3.493348999999998, {1.4740000000000002`, 
        1.1949999999999998`}, {3.1559999999999997`, 0.3800000000000001}, {{
        0.8098601084518038, -0.3924114080786088}, {-0.3924114080786088, 
        0.19013989154819627`}}}, {
       3, 3, {0, 1}, 0.25, 4.315080999999999, {1.4740000000000002`, 
        1.1949999999999998`}, {3.358, 2.07}, {{0.8225699587099293, 
        0.38203222604627823`}, {0.38203222604627823`, 
        0.17743004129007084`}}}, {
       3, 3, {0, -1}, 0.25, 4.315080999999999, {1.4740000000000002`, 
        1.1949999999999998`}, {-0.4099999999999997, 0.31999999999999984`}, {{
        0.8225699587099293, 0.38203222604627823`}, {0.38203222604627823`, 
        0.17743004129007084`}}}, {
       3, 2, {1, 1}, 0.25, 4.396625000000001, {1.4740000000000002`, 
        1.1949999999999998`}, {2.0540000000000003`, 3.21}, {{
        0.07651323458334518, 0.26581753049213885`}, {0.26581753049213885`, 
        0.9234867654166548}}}, {
       3, 3, {1, -1}, 0.25, 5.191935999999999, {1.4740000000000002`, 
        1.1949999999999998`}, {-0.7819999999999996, 1.5149999999999997`}, {{
        0.9802771066515458, -0.1390463981066022}, {-0.1390463981066022, 
        0.0197228933484542}}}, {
       3, 3, {-1, 1}, 0.25, 5.191935999999999, {1.4740000000000002`, 
        1.1949999999999998`}, {3.73, 0.875}, {{
        0.9802771066515458, -0.1390463981066022}, {-0.1390463981066022, 
        0.0197228933484542}}}, {
       3, 4, {0, -1}, 0.25, 5.736289000000001, {1.4740000000000002`, 
        1.1949999999999998`}, {-0.8180000000000001, 0.5}, {{
        0.9157948631946544, 0.27769521375230566`}, {0.27769521375230566`, 
        0.0842051368053457}}}, {
       3, 4, {1, 1}, 0.25, 6.2813159999999995`, {1.4740000000000002`, 
        1.1949999999999998`}, {2.578, 3.445}, {{0.19403831935855467`, 
        0.3954585313014023}, {0.3954585313014023, 0.8059616806414452}}}, {
       3, 3, {1, 1}, 0.25, 6.571044, {1.4740000000000002`, 
        1.1949999999999998`}, {2.986, 3.2649999999999997`}, {{
        0.3479118386667325, 0.47630787436516936`}, {0.47630787436516936`, 
        0.6520881613332675}}}, {
       3, 3, {-1, -1}, 0.25, 6.571044, {1.4740000000000002`, 
        1.1949999999999998`}, {-0.03799999999999981, -0.875}, {{
        0.3479118386667325, 0.47630787436516936`}, {0.47630787436516936`, 
        0.6520881613332675}}}, {
       3, 4, {-1, -1}, 0.25, 7.2585, {1.4740000000000002`, 
        1.1949999999999998`}, {-0.4460000000000002, -0.6949999999999998}, {{
        0.5078735275883449, 0.49993800371977687`}, {0.49993800371977687`, 
        0.4921264724116552}}}, {
       3, 4, {1, -1}, 0.25, 7.346896000000001, {1.4740000000000002`, 
        1.1949999999999998`}, {-1.19, 1.6949999999999998`}, {{
        0.9659720241037848, -0.18130105557503468`}, {-0.18130105557503468`, 
        0.034027975896215215`}}}, {
       3, 1, {0, -1}, 0.25, 7.918664000000001, {1.4740000000000002`, 
        1.1949999999999998`}, {-0.9839999999999999, -0.17500000000000004`}, {{
        0.7629776942171054, 0.42525607855062414`}, {0.42525607855062414`, 
        0.23702230578289465`}}}, {
       3, 1, {1, -1}, 0.25, 8.039525000000001, {1.4740000000000002`, 
        1.1949999999999998`}, {-1.3559999999999999`, 1.0199999999999998`}, {{
        0.9961906953458071, 0.061601898122090555`}, {0.061601898122090555`, 
        0.00380930465419288}}}, {
       3, 2, {0, -1}, 0.25, 8.794755999999998, {1.4740000000000002`, 
        1.1949999999999998`}, {-1.3419999999999996`, 0.2650000000000001}, {{
        0.9016573057854023, 0.2977774482885028}, {0.2977774482885028, 
        0.09834269421459783}}}, {
       3, 2, {1, -1}, 0.25, 10.233569, {1.4740000000000002`, 
        1.1949999999999998`}, {-1.7139999999999995`, 1.46}, {{
        0.9931377801820654, -0.08255379916820813}, {-0.08255379916820813, 
        0.006862219817934493}}}, {
       3, 2, {-1, -1}, 0.25, 10.488760999999997`, {1.4740000000000002`, 
        1.1949999999999998`}, {-0.9699999999999998, -0.9299999999999997}, {{
        0.569479655414019, 0.4951490457261825}, {0.4951490457261825, 
        0.4305203445859811}}}, {
       3, 1, {-1, -1}, 0.25, 10.930620999999999`, {1.4740000000000002`, 
        1.1949999999999998`}, {-0.612, -1.3699999999999999`}, {{
        0.39809229503063015`, 0.4895046676670978}, {0.4895046676670978, 
        0.6019077049693699}}}}, {{
       4, 1, {1, 0}, 0.25, 0.5598439999999996, {1.0659999999999998`, 1.375}, {
        0.5280000000000001, 1.8949999999999998`}, {{
        0.5170083094576344, -0.4997106336765241}, {-0.4997106336765241, 
        0.4829916905423654}}}, {
       4, 3, {1, 0}, 0.25, 1.0315209999999992`, {1.0659999999999998`, 
        1.375}, {1.1020000000000003`, 2.3899999999999997`}, {{
        0.0012563971067966965`, 0.03542341842773972}, {0.03542341842773972, 
        0.9987436028932034}}}, {
       4, 4, {1, 0}, 0.25, 1.5664089999999995`, {1.0659999999999998`, 
        1.375}, {0.694, 2.57}, {{
        0.08834474265661138, -0.28379561149099625`}, {-0.28379561149099625`, 
        0.9116552573433887}}}, {
       4, 4, {-1, 0}, 0.25, 1.5664089999999995`, {1.0659999999999998`, 
        1.375}, {1.4379999999999997`, 0.18000000000000016`}, {{
        0.08834474265661138, -0.28379561149099625`}, {-0.28379561149099625`, 
        0.9116552573433887}}}, {
       4, 2, {1, 0}, 0.25, 1.724415999999999, {1.0659999999999998`, 1.375}, {
        0.17000000000000037`, 2.335}, {{
        0.4655581947743465, -0.49881235154394293`}, {-0.49881235154394293`, 
        0.5344418052256534}}}, {
       4, 2, {-1, 0}, 0.25, 2.0680039999999993`, {1.0659999999999998`, 
        1.375}, {0.9140000000000001, -0.054999999999999716`}, {{
        0.011172125392407323`, 0.1051061796785691}, {0.1051061796785691, 
        0.9888278746075927}}}, {
       4, 2, {0, 1}, 0.25, 2.2592000000000008`, {1.0659999999999998`, 
        1.375}, {2.426, 2.015}, {{0.8186968838526912, 0.3852691218130312}, {
        0.3852691218130312, 0.1813031161473088}}}, {
       4, 3, {-1, 0}, 0.25, 2.4990250000000005`, {1.0659999999999998`, 
        1.375}, {1.846, 0.}, {{
        0.2434549474294976, -0.4291673752763578}, {-0.4291673752763578, 
        0.7565450525705023}}}, {
       4, 1, {0, 1}, 0.25, 2.991524, {1.0659999999999998`, 1.375}, {2.784, 
        1.575}, {{0.9866288888205477, 0.11485784503149563`}, {
        0.11485784503149563`, 0.01337111117945234}}}, {
       4, 3, {0, -1}, 0.25, 3.291600999999999, {1.0659999999999998`, 
        1.375}, {-0.4099999999999997, 0.31999999999999984`}, {{
        0.6618590770874111, 0.4730767793544844}, {0.4730767793544844, 
        0.33814092291258896`}}}, {
       4, 2, {-1, 1}, 0.25, 3.3078490000000005`, {1.0659999999999998`, 
        1.375}, {2.798, 0.8200000000000003}, {{
        0.9068805740528061, -0.29059972205502715`}, {-0.29059972205502715`, 
        0.09311942594719397}}}, {
       4, 3, {1, -1}, 0.25, 3.4347039999999978`, {1.0659999999999998`, 
        1.375}, {-0.7819999999999996, 1.5149999999999997`}, {{
        0.9942935402876054, -0.07532526820360633}, {-0.07532526820360633, 
        0.005706459712394407}}}, {
       4, 1, {-1, 0}, 0.25, 3.5393359999999996`, {1.0659999999999998`, 
        1.375}, {1.2719999999999998`, -0.4949999999999999}, {{
        0.011989819559374976`, -0.10883962415549131`}, {-0.10883962415549131`,
         0.9880101804406252}}}, {
       4, 1, {1, 1}, 0.25, 3.7577409999999993`, {1.0659999999999998`, 
        1.375}, {2.412, 2.7699999999999996`}, {{0.4821290237938167, 
        0.49968052614589453`}, {0.49968052614589453`, 0.5178709762061832}}}, {
       4, 4, {0, 1}, 0.25, 4.315080999999999, {1.0659999999999998`, 1.375}, {
        2.9499999999999997`, 2.25}, {{0.8225699587099293, 
        0.38203222604627823`}, {0.38203222604627823`, 
        0.17743004129007084`}}}, {
       4, 4, {0, -1}, 0.25, 4.315080999999999, {1.0659999999999998`, 
        1.375}, {-0.8180000000000001, 0.5}, {{0.8225699587099293, 
        0.38203222604627823`}, {0.38203222604627823`, 
        0.17743004129007084`}}}, {
       4, 2, {1, 1}, 0.25, 4.343369000000001, {1.0659999999999998`, 1.375}, {
        2.0540000000000003`, 3.21}, {{0.2247435113157553, 
        0.41741330289920114`}, {0.41741330289920114`, 0.7752564886842447}}}, {
       4, 4, {1, -1}, 0.25, 5.191935999999999, {1.0659999999999998`, 
        1.375}, {-1.19, 1.6949999999999998`}, {{
        0.9802771066515458, -0.1390463981066022}, {-0.1390463981066022, 
        0.0197228933484542}}}, {
       4, 4, {-1, 1}, 0.25, 5.191935999999999, {1.0659999999999998`, 1.375}, {
        3.3219999999999996`, 1.0550000000000002`}, {{
        0.9802771066515458, -0.1390463981066022}, {-0.1390463981066022, 
        0.0197228933484542}}}, {
       4, 1, {-1, 1}, 0.25, 5.358124999999999, {1.0659999999999998`, 1.375}, {
        3.1559999999999997`, 0.3800000000000001}, {{
        0.8152292079785373, -0.3881115128893036}, {-0.3881115128893036, 
        0.1847707920214627}}}, {
       4, 3, {0, 1}, 0.25, 5.736289000000001, {1.0659999999999998`, 1.375}, {
        3.358, 2.07}, {{0.9157948631946544, 0.27769521375230566`}, {
        0.27769521375230566`, 0.0842051368053457}}}, {
       4, 1, {1, -1}, 0.25, 5.992108999999999, {1.0659999999999998`, 
        1.375}, {-1.3559999999999999`, 1.0199999999999998`}, {{
        0.9789681729754915, 0.14349038043199824`}, {0.14349038043199824`, 
        0.021031827024508426`}}}, {
       4, 3, {-1, -1}, 0.25, 6.2813159999999995`, {1.0659999999999998`, 
        1.375}, {-0.03799999999999981, -0.875}, {{0.19403831935855467`, 
        0.3954585313014023}, {0.3954585313014023, 0.8059616806414452}}}, {
       4, 4, {1, 1}, 0.25, 6.571044, {1.0659999999999998`, 1.375}, {2.578, 
        3.445}, {{0.3479118386667325, 0.47630787436516936`}, {
        0.47630787436516936`, 0.6520881613332675}}}, {
       4, 4, {-1, -1}, 0.25, 6.571044, {1.0659999999999998`, 
        1.375}, {-0.4460000000000002, -0.6949999999999998}, {{
        0.3479118386667325, 0.47630787436516936`}, {0.47630787436516936`, 
        0.6520881613332675}}}, {
       4, 1, {0, -1}, 0.25, 6.605, {1.0659999999999998`, 
        1.375}, {-0.9839999999999999, -0.17500000000000004`}, {{
        0.6362604087812262, 0.4810749432248296}, {0.4810749432248296, 
        0.36373959121877364`}}}, {
       4, 2, {0, -1}, 0.25, 7.030563999999997, {1.0659999999999998`, 
        1.375}, {-1.3419999999999996`, 0.2650000000000001}, {{
        0.8247509019191063, 0.380180025386299}, {0.380180025386299, 
        0.17524909808089367`}}}, {
       4, 3, {1, 1}, 0.25, 7.2585, {1.0659999999999998`, 1.375}, {2.986, 
        3.2649999999999997`}, {{0.5078735275883449, 0.49993800371977687`}, {
        0.49993800371977687`, 0.4921264724116552}}}, {
       4, 3, {-1, 1}, 0.25, 7.346896000000001, {1.0659999999999998`, 1.375}, {
        3.73, 0.875}, {{
        0.9659720241037848, -0.18130105557503468`}, {-0.18130105557503468`, 
        0.034027975896215215`}}}, {
       4, 2, {1, -1}, 0.25, 7.735624999999996, {1.0659999999999998`, 
        1.375}, {-1.7139999999999995`, 1.46}, {{
        0.9990660095338126, -0.03054698230588995}, {-0.03054698230588995, 
        0.0009339904661872825}}}, {
       4, 2, {-1, -1}, 0.25, 9.458320999999998, {1.0659999999999998`, 
        1.375}, {-0.9699999999999998, -0.9299999999999997}, {{
        0.43826975210505115`, 0.4961747439106793}, {0.4961747439106793, 
        0.5617302478949489}}}, {
       4, 1, {-1, -1}, 0.25, 10.350709, {1.0659999999999998`, 
        1.375}, {-0.612, -1.3699999999999999`}, {{0.2720281287011353, 
        0.4450042987393424}, {0.4450042987393424, 
        0.7279718712988646}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.4130444789719152, 2.7569151748438447`*^-18], {Complex[
      0.5861464486009521, -2.825764865181982*^-17], Complex[
      0.8102051226649282, 0.]}}, {
      Complex[0.3140688520221368, 1.8976567723170987`*^-18], {Complex[
      0.8102051226649281, 0.], Complex[-0.5861464486009522, 
      2.8257648651819845`*^-17]}}}, $CellContext`dynMeshSize$$ = 
    14, $CellContext`dynPlot$$ = {CompressedData["
1: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
lQcK3tGRmWfk0f/KHaQZ
     "], {10}, 1, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 14}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 12, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyNvXdUFsnzPYxZURGzYs5xxZwWHVEw55zXhDmBukbMYsIMiopZV8SAAXMY
lJwfHnJUUVHECGYMv/0udXs+U737npd/OKdOn356qqp7qm7d6ao1ad5gu/wm
JiZ+RU1MCvz9f3C1Y9eCzxfy6e+W/OX7rFy1/Z7OVQfPS1Igtx5aYtmPxE9q
h0zvyfs/xQt5a/NOuT96ZKvPj9xJvGgTo+jnyVKPOMQ4RFlHsfHp6hMH+69m
nQ1MblSVHrPXZJTQ5Cb0d9N6ds77nnweo/JrZGRET4sYPr+y+PqaTePttHX2
zVuPEjMk0fpUmSS+fqWzu/Wx/oeThbxr3vMqq7x8PN3eJrPnylXWjl3W8nCn
ZGWeW/IDo3l+obfRP4xJvksShBx621elkPGdfZyQQ29P6k2pMzhfHJsnSzVu
HPv2cwM+Pl2NONDDtEE2lxvV+U0mf7dYq/0u9Lb8YfGiPXcl8fFKj8J+iRaO
KXx+ZVO1nxsOXkgVcujtSIHKB+NiU/n6FY8xpZfeeK/NA73NTimScbO3pB9l
+E6P+hdmJyqVGjQ9fP35dxV6Wxo7p83HmfFCDr11HJ1U8vkaTQ69BWz9Yt9r
WwKbJ0uNbjYsrGvzJDY+Xb1RJKpUxm8pTG5Up08K3lXFPE3IoTevWS2TTUc8
5OOVsetbRXU5x+XpysBqNxyHfNHmgd5qx0RFZtul8vUr3x3XuTUYlSzk0Fuv
eyd+PzhU0o8SW79wmd8N8OePQm+uiUM2TdinyaG3Tje6qi+uJgg59JY41KtG
yzNJbJ4sdfin9rnJV1LY+HR1nIvn6wVKGpMb1eIrpjoseabJobcDGysdO+Io
jVfcLYdWWlovlc+vVDSYF7yoJAs59NblaXxuhbGJfP3KoHHnPV980J4XenO8
n9j86G+SfpSnr+ze/PwUR/p8JfQ2qpRapl/nRCGH3hzPfZz3+lKSkENvZTvX
q/WgYAqbJ0u9dCPguqV7Chufrlaf/NxyQQ0uN6qmB4sc67pOmx96K1ra0e11
+QQ+Xqk55XK/5c6xfH7Fw7/LC6uwaCGH3sI31PtatVU0X79SaPQ5n98WaHLo
LchxRungYTFcP8rsEQ3n9CuCfZci9Ga3fc/v74smCzn0Zmboa/lrryaH3oY2
Xr/MpEwymydL/dL8wglj60Q2Pl1tctB6nZIby+RGNf/ChosPXIoScujNdcWU
mJ1OIXy8MsBl7NbIB/58fqVbzKTCEdMChBx6e9/0vnnyWj5PtuJUJNq56DCj
kENvnZuVn9rwRhzXj5Iw+sn4Cr6JCtYHve1u1j930aRkIYfePt563NPQOEnI
obfPqeEV9k2PZ/NkqYfLhrcdWCeajU9Xr5++0qZYzVAmN6rmYTVmnal1R8j/
6w964+OhNz4/9HboX9eTrfD1Q2+f2PNCb9AP6VOB3qBPyKE3pn8FemP2UqC3
D3r7KtAb8wcFemP+I9bL/A3jFeafmF9h/qxAbx/1/o/1K2y/KNAb21/Qj6Lf
j6+E3vT795XQG9vvQm/sfBB6Y+eJ0Bs7f4Te2Hkl9MbON6E3dh4KvbHzU+iN
nbdCb+x8FnpboT/Phd5w/g/Ne18IvT2j9wXk0NtKer9ADr0NpveRfp4sFe8v
/fh0tTK97/Ryo4r3I+T8fcrGK3j/svmV8fS+hhx6G0Hvd7Z+JZ7iAcihNyuK
H5h+FMQbFJ8IvSE+gRx6Y/GM0BuLf4TeaunjJaE3Fl8JvbF4TOiNxW9Cbyze
E3pj8aHQG4snhd5Y/Cn01kEfrwq9Ib6dmxcPd4HehlE8DDn0NpPiZ8iht7MU
b+vnyVKPUXyuH5+ubqZ4Xi83qj0p/occenOkfIGNVxwov2DzK2GUj0AOvcVS
/sLWrzylfAdy6G0v5UdMP8oYyqco/xJ6Q/4FOfTG8jWhN5bfCb3F6vNBoTeW
Pwq9sXxT6I3lp0JvLJ8VemP5r9Aby5eF3lh+LfTG8nGhN56/Q29j6hft7F1Z
y5eht5j0EsMaWURLef2Q8BOdsp5EsXmy1Bl9lhW6MzlCyuuTzYrZnAj1l/L6
0ZXrOXY64CPl9fX7mVuM9/bh4xX3Oult1857IOX1S7xtYktX95Py+qRRS7b3
+cF/929/W769rnfpICmvv9PY8kvJOiFSXu87qMbLNq9Cpbx+SOagW/08Y6W8
/n5a9VFfBsVIef3cpV2uptWNkvL6DGunW2M2h0l5/XzfFLsEu2Apr/8yKaVK
xeAgKa/P8T1h13eiNF7ZM2vRQZ9pIVJeX3LJZ3f3a6FSXt/3c6p1DdtwKa9/
fbdK36yvEVJe/9b9y5fXwwxSXl91aOK3IuaIf7S8voj5xf5zgmOEHHqb4FQ2
9kCBaCGH3o5fcty5shmfJ0vNMpuzKzErUsrrJ0wa8+TN+ggpr/dbmHb1vH+4
lNc3Sg38YLYunI9Xjl43fZ1xjcvTFbeJF46OH6/ND73ZDb9Qqqo9X0+2UnWK
pYPPYoOU188/d+PA9uWSfpTOlax7JxiMUl5fvtr1m5kemhx6+/n94Lk+P6J4
XqzW/6PpoJEVotg8WWprO99651sZ2Ph0tcfoQ05TQyKY3Kh+KpNWvveccCmv
H1Op6DujXZiU1/9Q/EPP+4RKeX1cG9+jU7dpcujte88H3/dV5PP8HYdkvzk9
o5q2Hujtzx3thkysyp8rV6mdUn6aZbyWz0JviaFng7sujRRy6C3XYvCs0/si
hBx629k0a0OXGuFsniz13bIVk5eMDJXy+ksuPp+WrAuW8vqDsevijkQESnn9
xKMW6/Z1C+DjlfI7zmX8Fe0n5fVOZX4/3KSFJoferBfHrVxzi8+TreR0r+Zk
aamtH3rreq/pov0ORq4fZfJ9n7N2Q7AftbxeWbLCelWtUCGH3gpl1BvknxQk
5fXjnNvNjK8ZwObJUuet9Fpj29RXyuvDauW/fm+Yj5TXdy2bf+iC4nekvH5c
3YoFXWfckPL6Y1f8RkeaXpXy+irmw8Yu8rsn5fUNO207Hz5TWr9ytWLhY44t
wqS8/u3sx+0ddkRy/SjDV41p7zQwSsrrCzwacrmfU5iU128rab9/Q2aQlNc7
VijU88BNPymvP1swdtbqIj5SXn/3wOsKrolXpby+kFv9CQvr/vX/O6/n46E3
Pj/0du5f15Ot8PVDb7vY80Jv0A/P66FPnte/0utf5AvMXiJfaKS3r8gXmD+I
fIH5j1gv8zeRLzD/FPkC82eRL8zX+7/IF9h+EfkC218iX9DvRy2v1+9fLa+3
1u93oTd2Pgi9ddOfJ0Jv7PwRemPnldAbO9+E3th5KPTGzk+htzf681bojZ3P
Qm/f9Oe50BvOf57X433B83q8X3hej/cRz+t/0vuL5/Xx9L7jeT3ejzyvx/uU
5/Vf6P3L83q8r3le34be7zyvRzzA8/pfFD/wvL4CxRs8r0d8wvP6efp4RuiN
xT9CbyxeEnpj8ZXQG4vHhN5Y/Cb0xuI9oTcWHwq9vdTHk0JvLP4UemPxqtAb
4lue11ejeJjn9YifeV7/luJtntf3ofic5/VmFM/zvN6F4n+e13+kfIHn9bmU
X/C83oHyEZ7XI3/heT3yHZ7XIz/ieT3yKZ7XI//ieT3L14TeWH4n9JaozweF
3lj+KPTG8k2hN5afCr2xfFbojeW/Qm/T9fmy0BvLr4XeWD6u4SGUv3t8DVtl
/iW/T+/ABpUde3xTBy8p3qnDyAQh77xu5AHHqx/Vs9+zo49mxAo59GlSyv6T
RXSc0u+f+Z8Jf37Uv1GDI3WSxHjoeYrNN0Oj3do8zZXNVVbWea+W6dDls32U
th7of8PajgPnvtHkPT4t6PCjdqa698HjS47nY9j86Wq0eZnCtWy1+UeneC7+
/uOh+tLf/EVc+1g23qhOdjiVGj4lTsjz9Byq5revd8twRZPDjqZfnqxtqSQo
Pf953ljxvPPbrp01uEay8jP2S88RXU1onV/VTUtuFljwJo49V65qTP9t1rRP
mp7b/7Oey0rK3TsdNuUkiHmg5xe33r7N+hon5B0vn7z1Y+cH1azLETf3+3H8
uZQPSYVHTJ2i6T/PH+KUPQ4L/Ju009YJu8SMvBDSr0e8kI/9R29v1dGeKYtD
KiVwPSsFCh7p3rdqipDnreepUiXrw4dDgSliHthxcHLCuGpNtefKW0+G6he4
99ebxolM/3/HjRWDbUyfafMP7djtxnfv10pgoxPuH3qksvWnq10HldhWeGei
kOfNk6y6VLZwMhkp+aESPqtagTR3bf72j98lOc7OUQ43d9zQ/FIKm9+oZnWv
0KNKL01vlv/IH6jvj74MuzQwhen5k9KidNt97xckC3mfvP2l1HS7EDi9ZJKY
B37lUu+IfaMPKdxPlIkFDjV6+ehv/UzpVdeqcq7al/ZpY7MnFS/fFfUC5B2i
Xq/Xf646c0bNTSnvNft2yFu/ktt+eVKZl6lifvjbLfvWy55HaPNzPgDGt83T
m/q0Qh9b+30C51e7/Md64J+D/JfHni+Xxu2lhJa+1+T6LW098E/TzlMPdSsn
6iBCnkB1B4wfkucn6tAbTY6t7C/qEWorGg/eAvMfZXa15DWLh6SxfZehLN45
vUT5aWlifvjzlZpmlRpFafNDPozqIxjfIW9fqH8UOLtl8gBRN0FeKfgSej1k
KY9nLbr69JDm52Py9qPybJ/9ydgmXD/p6uOZPTb2upzC9JOujqU6DsZ3yjsH
1GcX7nu8ryLqO2pLGg+eBjsfFOPskKLz62nrtMo7f5TW523Vd4OS2XqMapTH
u2AH2zS2Ho3vgfH18s49NWDery5/dXwoxluy8fpz45MyJjx2p+eAJH7eKsfy
FVmxbJu2X7C/PLPPlrhYU5sfctTF2H5R9o4Z4b7wcIJiEvd/8ndqL9p3u78+
/NGqaiLzh1x19fAGpuZ/xjN/0Hg1GD887/2iNPVvusFtAl+PtxXWg9/Fvpv9
Nqjbq5ZJQm5F72WXCk8P3vNK4vpXfvPKTd9u+pDrXzlE9UGM/yPv/ag8qfXH
U/d1mr06AD+n8fhd7Ds/38CaaeeThdyS3uN1m3ru29Q8hfunUqB3/yONTbk/
pCuVqI6J8T3z3u9KzT2Pq05K0fy5LRuP38W+s+h5IsjieIqQ21CccMhL8Tcp
pD0v9lfjkdFJyydL+1GxpnorxrfIey5l276R9k8Spf0uxuv1k67OtRz5x4LT
2np60r6bMKr5h/4OfL/8vb8+lkytuDqJn28K6sIY347eU6lm++/Z/s/5Rn6i
oL6sX49R7Tvkj/KGg5rerCnOsYwr/jhxjbYe7K8KyvslKSEJ/P0i5mfvI2VV
ydujXE5r/t+N8anwu9h3Xm9OWCR5SftIGVWperFX+6V9JPhXI/LiTLU7xVf2
h/yGzUtNYv6Qqz63rvtuV0wCf14l/+utk/yC4sU82F+2nY8N+LNuspB3oPiq
dJEOHo/Ck7k+lfzxo31uOcRz+yo1f/Va3vOrtk7sl9beMf0mbtXmH0nx1Tr7
epUrxfP505XuQa29Kp+JFfJOFF8N3FZ/TqvmsWIe+H/cwlu/rXmRJOQ2FF+9
a7T+0PU+mn/Cz2dXMy4dczeG719lr9XiUtNfx7D1p6sNVrmMGlUyUch7UnxV
9WDdMtZKAj8flKQDTZe779Hm70B++/TK9bEhE/n8RnVzkUrOcy00vVlTfOX1
yn2D7ZNoMQ/88Np228R7xWP5+ay8u1Suerq5Zl/42/nTI/IdPGfkfqKE3Fkc
3qFAvDI2L55Xu9XzGeX487Pq1aBfespm8Kz87vRl/Cu9/nPVNMp32PqV9oOy
kx9PixLzC/6M6eVFOb9r80MOXhPGK3TObyn7WyO7rUlifFvyqy/Ej2L6VBqO
uLj5fVsDt5dS97l9wxYTDGJ+Udfet7fWXw20+Vuz+TF+EMVX7av+6eN7P0GM
b/n/uZ50xWDpkFXHJFLIu1F89eHt8O8FpkWI+eHPJzMXFXW4GC/mh/wo8cQw
vg+d81crL611pE+cGN+O/FYlvhl+F/5fz8y3i21HTT/jKL6yXuJ0st9orp90
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
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1: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
FmfWTv8DQ2HsJQ==
            "]], 
           Polygon[CompressedData["
1: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
An+zY/pRf53t++8s+Z2Ja4DvqxqD9h9cDfwO
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
dktwe3HV7VDeAj6Kzo/RruTXlMspX3s85p7K8X6WDUSfqFx0eIyVQ1PPRXb3
GPUnU+6WrSNbF2xLui8chGxO4hy9elxb5VCbqZsC3p97Tb9DfhftTuT/Xant
v1k8U82jvmz2LupfDj5T32feA+3FTO2D7lHw/sH3osnwa2Sn0W88HTzGPfD7
tL+U5fHMdqbfk1L7lqOi/D34mTp78BPAqZnzwwfgr1BWwz8BO9L2BNrMov7F
4NjeJreOzn1r+Gm54+5SdE6Nc9RaPRznojndr/1XPglOTp3vaY2aUr5FfmDq
/hfAHwenZL6X1M6dZ8rWDoXPzuyTDoGfntu+f0P2LaUDvHnuu61810DwreCc
ZAb1tVPnq3XAYfyfzzpu0X2UNsekXmedd+3/Tbn9QDXlXeCs4LN4NfJHdA+R
DcGnBucb84LXSf7tZPBv1D0FrqDP1qn3qB14czzni4JzbI1lf93RwJR+XgVf
lk2g/zz4e+b84mJ0bsztK3UGx1K2J5777GA/sEZxNXNuNj44DsqeF8L/yJy/
/D0313cu0foF77vuCzqjuksuke+Pfm9R9AM6R8vgd1K3Ff3TwE6p7wLto7+V
7U2JPkp+7xftQ+a76RW511Br9XVwfib+KLgssw8+C50zc9uKbEk5mGKEYkUh
dU6onF73XNnP1uB4pP3VPh9O23PQm0u7sng2ddfXO4TeCmZG/6Cc6EHl5+DU
xPerh+TjUr9XzIz6s6NfUu69gf73imdZZ3ptZj9/fe41Vy5xQdxz+UnlhrL/
JvJNyMdnfnOokrut/Pxc6p+Rb4K/CNalzKf/+qnvehlYLff6aJ3OgU/ILK8E
7095MtqY7mi6u9VCFsBxid9ufox+e1qwLcmmLow5keJm3aJ9sXyyzvi5sU/l
w2nu+4beKORvFWOflg0qBqF/bPC7kmKNYs4Pmd85uivnYY9+o+35wXsiWz1f
/jzze47uaENku+j8pZy6zP7tzzK/U6m/CfTTltIntT/U21Ff2vaAd6b+yEJ8
M8qcE14v/xRzGtnAacrf6G8r7RZGnynfuYi6G9HpEu/9k5DX5P8SxXL4mGB/
Irs+WHn1/++Emf2o7lCnpM7ldN6V18zP/H7TM/oonY8jcs9Zc+8PnpfaVs8F
h6IzGN432Bfpvn+6/B/fGZ44Nium6x56YfCdTu9G1WNMUcy9IjiOD5CfD86R
FNeSzO8GuuvXQL9Jbh80PbPvkg3fAbbSfTm1b5RdyQ/frtwsron842XBZ+RG
sEXU132tGM/X/cH+RX5mebBtzKTdBsZycfC9rSz3XnyKfr/gfR+knBa+qeR3
k1HxvjBU/hM8mjISfja4reQ74XCdXekmthvp6Fvr9W6g84i8N7Id0fZGZJbr
HWVdyfdq3a/7BHPd/c8KvkuOhp8XHGdlM5tLtifZlWxY73LKFUfE2KQzWjd3
/NW9oVPuvFc5+afg9ch2JbazOWXuf260PeX1x+deW9l7Au+R2z6Ue8uWlIcP
p/5Y5Jekzn/axTiiOPdN5tyhMfWtol9qCd4b/Zju7NJRnDpAOVXmGFtPd8nU
cbZx6vOgdTgj5gDyV41y5wZ6N9rOOjSL35ge8zflj02RXZT7fWFV5jcn+ZA2
4Pm5/ZreB24NfifR2bkydWy6Grw197urbOanzHeXY5BNDF439bk4cxwcFeOI
7hEzgm1CtqH9vSbm2Yq/8j86Z32QtY9+Q/cjzV1zbYDssBjrdaf7hfmNTXzP
lB1oHWRjslu9zZ4S/AarO9dLsiv0vkr8lndV7jxeMfcmxenEdyrNRfPrF/NW
zVfz1vuD/MCXwX5Gd8RTpJM7D1ZurHux/PYlwXPXO80JuX2FbGcje9Er2oPe
gf8LIEYb+A==
            "]], 
           Polygon[CompressedData["
1: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
c2XESGOla/yyMnKYbvk+5jbGwFOLiIHGRj22vvuFMry3GqVW7cv9OjdifW9T
hEdxPavZO2f/qeVeq3c35/AextzTi/D89+X4OdaO+awqYuaORXgQY6me/sQi
Ysyk1MMeRXhQc7v1Uh/N8V6owkPppdbh/ZYaO9n2yHjaJ2Oq+x7bogoPohdx
zbp2x6SfPIxj2xsfna+cvznt7RoRA42Frpk77D/uMYS2NTnnoWZ4BL2COZC5
kPF4bvoHx1cP9WwRMcnYdK4xyLkDL+Ze49XTesRgY7EapBbtBXdqhMaoNT7T
Z0+Et6pHDBlUhUapVXvDazQi5u+f68P+tg821WNk3xiTjc3GRL2yfmpDtivL
yN0GpP714LrHmuF59kx/dVOOp17KmD67Cg1erx4xTm3u4pimXt3TDE1W69Q8
tVrNa9ZDk9QmNWxxEf2ttl0ETy3C833F8y6Gp8Cd1bQyPJfea37O19uaoYVq
YlWFp1Kf5uR8ergZXkpPtQHtj6hpcF9jShWeR94y+/9+uB08yPdrhKfeK+Od
/vI+Y06u79U5/1/wD0V42qoRGr/U+NwS2m/f9ivCU9rH5kCXF+FBzI3UYP2s
ObPabL76RWvERGNj3ZhQhGaqnXqMR4vIsfQepTGqNfTyqSre1/HSc95eRk1i
cean5q7Hwf/K67+uwtNMUJ9bwuvo4T6CN2gJb6eH+Yrrn8580ZqGtY7na1Hb
aAe3cH4rW72InNTc9FHaj9BL0d6miHzWfLyDMTn1ehLPbw+vaI317Po2f/8y
89NxVeSk5qbm4CeU4bn0WnouvZj5VQ2eUIt8Wg94G7x6S3jD38N3FlFDeL2M
nM7czpxuRhk5n7mfOdn8KuaYc+0hjv2Btj+phXm+uaDr2dzEGL+oihxFNmea
mev75byfuaA508QiPLK5lDmoXlVP+WYZHvf6InJeve+Rzch11UdjoznqLUV4
VL2qnvaufJ56oqe+GV5cC69tDm5ebV5rbn5qM3Jp7/8efHYzvGyn7J+R2W5O
q/d9O/2t/v6IZuTYl2S8N/e2BvcT4/FiLeodPzHen7VG/4+top4yvTVqYM6P
H+B3cv48VkVN6sCMN9OqqKlYWxkFH1RG/eSDHG/rFxeWEfv1pHrTZbR/ks8/
pYwa2CEZ362NWZM6CF5Si1qVOdcJqRfmYt7DeXpB3nuvjEfzaB+d/nZQER7I
9WYOPTT139x6EzURnpJ+/ODUU3Oej/k9ezYj13P9PVyGp9bbup5PKyPnOD/n
o7lIW3hJa/jz88qo0Y0sIkeydmdMOizj4/1l1AD2Tr1Qrx1raynWMF5Jfz05
61nWuqwvvZX1I2ud1rSsbf1X/awiJzQXNCc0V1ye4znamFhGTvRYETUT55/x
cJ/sr3vTDx6d8c/YZ03R2qI1EWsj5phHpD8x97QG2wV+sxa1WWuMXuO51h6t
YR6Z/Wlt8/ucPw/Dj1bhx1+F79dDlZGjmKu8BE+sogZ5XPqj9+Gn4QH18Pj9
q/DAnxURj4w/XTNeGe96Zsxz32O90p+MSL94Q/qdnbK/bobXSD9ujDHWqAGu
TTVH7XmcrXc9c/gq8osd9Ib5PHOadfL9OvDbnoA3ggfD61ZRAx4O79wStWFj
pLFyjawPdKsilnXN/N0YZiwbWA9vsVkV9+oLj2vGOxi7etXj3brn+V5vbOyf
9YfN69F35ksbtURMNDa2yXy2kflWh8wvjInGRvvT2Nk285Xn8v3351iXRtQw
rGXs3hK+RL9sbrwrvJG/pYqah+f1yXfwXfY0J6tCP+9I/zIl9f729N9fVVFT
uCHjg/HRPts5+2OzevzeIZm/yUPq4bN2cC2kvxrGsX30eI3os77pt8zd9ZP9
009YuxlSxXF98jaZs3XI8V6zipyuY45ne+63C8f2Y3/bepzfN+s/ek69p55S
b2nO2jn9Suf0f7671+jDR1RxL+dcl3rkyM7FUel3BqSfWjfHw/nm3PqsjPrG
e/TRFfDXZXit6fDfmuG5jH96Lr3YAWVogZqg1htjJySrFcZ0Y7sx29htDfpZ
+Jv8fqNnUPtdw67lYTkezgnnxlqNmBvD83uHObba5Rp3rQ/K9eKYODZPVFHv
MAYYC/YpQxu8v7HGmGRs+DBr876f2qBG6EXGV1FrsSZrrVwNN3+1xqG2+/ue
yXa9xcj8fe2KyE3Naa1tWFMx1zWG6jXGFRFb55ThrR6Hz4T/WEZt3vzYWo4x
xdhiPqy3078PrcdvVBvMcfV67YvIfX0/Y83qef0PZXjLFfDtal+u/5Xwf4xt
jchdzffN/1eWkRtZE7E2Yr21V9YP9M56FHMTcxK9yypZn/gUvroZnkdv+FwR
XmhJFV7Imq613YVl5DJfwTfArakXX8PXNyOGG8uXZn9b47KWYE3B2pf1ha5F
5Ozm0+p5kV7SWH16Gd7WGoK1hN/m/NND6iWPzPmlB9YLn5LjryfVmxpT9ZbL
WyPW6jHNJfWrek9zVHNVPbHeWA0wl9oytcEap16oTfpNayytud5WaUT+Yl/a
p81G9OlPRdRk7GtrUNaarPFY69G/j8785pMyalKeY1uZ+eDA1PvVG5EvNTK/
aldFzerbIvq4yPzLWtgucM8q1vT7tHdsibXuGHxeRA3JsemY8cOcxdzFMfum
yDlSxpzyw+z6LTHXnFPLitAj55o1Lmtd1phWlFHzb8l8ym8B+gVrqWrMgio0
Z8Oc36s1Yk46N40Zxg7n2Kfpj1fCf4c/Tn89v4zNbw5+a7DNGu7dma84N62x
zStiDlp78/e/l/nXiir88r2Zb00to4Ytt0t/bgw0Fu4Gb1LFmnXt+o3D5/67
GbU7a3jfl/HN5+38ffrlj8vwznpovbY5w0M5X76t4hqv9XvRJc3Q2Jl5f7XX
byDWJKxF+G3Eb1zXFZFf++2rJet/czl2TTM8ufPR+sicKmJsm/QrXbM/ZxdR
E3Ut+812Vs7Hlkbk5J7vPdtW8c3prSLyV79FXZfjo4a0NuKdp2V+8E0ZMX7V
etYoq6gXbJ51C9eL33DezfXg/NcztK/H/He+Xpr3s0+Ww/8DSesGZw==
            "]], 
           Polygon[CompressedData["
1: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
pu9De4P2Pw7qGpo=
            "]]}]}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0ckuBEEcB+DSZuw8ACenmTjb9277NoODCweZiyXBiUTixFXwAIwZjOEl
XIi3kHgUXyeS/vX3S+pQ9a/qLZ1sHjeEEI5kSzllHIWQyKW+x1te8541vnM2
G8IbZ1hnwlhe9WnWOMUXTnJCnvVxPnGMVY5yRCr6MB85xDIH+cAPe96xzive
8IyHPEijz3GHfSwyy0w6h/5rrgF+M88qK9KjX7CLJab3kGRCiNK52JjOSV+Y
91sQRwqLbOISm7nMFWnRV9nKNbaxwKK06+vs4AY7eW7DbpaZ4ye/pF//YczI
YQrMMS/b+q61/f/3+gOXUiik
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0bsvQ2EAxuGv2tpJhEEqZlYJrbr3tHpvEbsds/C3EKv7/ZLYWCVMYtCw
skgMjB4x/PK8Jzkn53w5/UurzZVYCGFZ920hpFxcxUO41oDd4jDjiRBy7GWT
hfYQGsyzzog51ewZVjnNCqc4qbI9wRLHWeQYs5q1R1lghnmmGXHIO0eY4iCT
7OObb3tVp33DJLf54ywbXNeHvcgWs3xkD7t1Z3858yWfucMoGcIu89xjgfss
sqQDu8xDVnjEKms6tus8YYOnbHJOZ/Y8z7nAC3565y27fMsD08zo5e9evnON
39zklhLO+OS5jtj///oFu2gylw==
          "]]}, {
         Line[{1090, 1089, 1817, 1107, 1613, 1825, 1130, 1841, 1619, 1823, 
          1148, 1629, 1858, 1168, 1638, 1882, 1192, 1879, 1643, 1897, 1209, 
          1656, 1918, 1227, 1668, 1941, 1251, 1956, 1674, 1938, 1267, 1687, 
          1979, 1287, 2001, 1285, 1313, 1998, 1311, 1334}], 
         Line[{1091, 1609, 1818, 1108, 357, 1131, 1840, 1621, 1844, 1149, 
          1630, 1863, 1169, 1881, 1170, 1193, 1900, 1645, 1896, 1210, 1658, 
          1922, 1228, 1940, 1229, 1252, 1955, 1676, 1960, 1268, 1690, 1983, 
          1288, 2000, 1289, 1314, 2015, 1315, 1335}], 
         Line[{1092, 344, 1110, 1615, 1827, 1132, 1843, 1623, 1848, 1150, 
          1862, 1153, 1172, 1884, 1175, 1194, 1899, 1647, 1906, 1211, 1660, 
          1921, 1231, 1670, 1943, 1253, 1959, 1678, 1965, 1269, 1692, 1982, 
          1291, 2004, 1294, 1316, 2017, 1319, 1336}], 
         Line[{1095, 1610, 1820, 1112, 1832, 1116, 1134, 1625, 1851, 1852, 
          1152, 1633, 1870, 1174, 1889, 1178, 1196, 1909, 1650, 1905, 1213, 
          1662, 1931, 1233, 1671, 1948, 1255, 1968, 1681, 1964, 1271, 1694, 
          1991, 1293, 1701, 2008, 1318, 690, 1338}], 
         Line[{1096, 1611, 1821, 1114, 1618, 1835, 1135, 1850, 1627, 1855, 
          1154, 1635, 1869, 1176, 1888, 1183, 1197, 1908, 1652, 1913, 1214, 
          1664, 1930, 1235, 1952, 1242, 1256, 1967, 1683, 1972, 1272, 1696, 
          1995, 1295, 2011, 1302, 1320, 2021, 1327, 1339}], 
         Line[{1097, 1612, 1822, 1115, 1834, 1125, 1136, 1854, 1628, 1838, 
          1155, 1875, 1164, 1177, 1642, 1891, 1198, 1912, 1654, 1894, 1215, 
          1666, 1934, 1236, 1951, 1247, 1257, 1975, 1685, 1971, 1273, 1994, 
          1282, 1296, 2010, 1307, 1321, 2023, 1331, 1340}], 
         Line[{1099, 1106, 1826, 1119, 1129, 1842, 1139, 1147, 1859, 1860, 
          1159, 1883, 1639, 1181, 1191, 1898, 1201, 1919, 1657, 1917, 1219, 
          1226, 1942, 1240, 1957, 1675, 1260, 1977, 1688, 1980, 1277, 1286, 
          2002, 1300, 1312, 2016, 1325, 703, 1342}], 
         Line[{1100, 1109, 1828, 1120, 1845, 1622, 1140, 1861, 1631, 1864, 
          1160, 1171, 1885, 1182, 1901, 1646, 1202, 1923, 1659, 1920, 1220, 
          1230, 1944, 1241, 1958, 1677, 1261, 1981, 1691, 1984, 1278, 1290, 
          2003, 1301, 684, 1326, 2026, 1708, 1343}], 
         Line[{1101, 1113, 1830, 1122, 1846, 1624, 1141, 1865, 1632, 1867, 
          1161, 463, 1185, 1902, 1648, 1203, 1924, 1661, 1926, 1221, 1234, 
          1945, 1244, 1961, 1679, 1262, 1985, 1693, 1987, 1279, 2005, 1700, 
          1304, 2018, 1704, 1328, 2027, 1709, 1344}], 
         Line[{1103, 1117, 1833, 1124, 1137, 1853, 1143, 1157, 1871, 1873, 
          1163, 1890, 1641, 1187, 1199, 1910, 1205, 1932, 1663, 1929, 1223, 
          1238, 1949, 1246, 1258, 1969, 1264, 1992, 1695, 1990, 1281, 1298, 
          2009, 1306, 2022, 1705, 1330, 709, 1346}], 
         Line[{1104, 1121, 1836, 1127, 405, 1145, 1876, 1636, 1874, 1165, 
          1184, 1892, 1189, 1911, 1653, 1206, 1933, 1665, 1935, 1224, 1243, 
          1950, 1248, 1970, 1684, 1265, 1993, 1697, 1996, 1283, 1303, 2012, 
          1309, 696, 1332, 2029, 1711, 1347}], 
         Line[{1105, 1126, 1837, 1128, 1144, 1856, 1146, 1877, 1637, 1878, 
          1166, 1188, 1893, 1190, 1914, 1655, 1207, 1936, 1667, 1937, 1225, 
          1953, 1673, 1249, 1973, 1686, 1266, 1997, 1698, 1974, 1284, 1308, 
          2013, 1310, 2024, 1706, 1333, 2030, 1712, 1348}], 
         Line[{1337, 1322, 2019, 1317, 1297, 2006, 1292, 1274, 1986, 1270, 
          1963, 1962, 1680, 1254, 1237, 1946, 1232, 1216, 1925, 1212, 1904, 
          1903, 1649, 1195, 1886, 1640, 1173, 1156, 1866, 1151, 397, 1847, 
          1133, 1829, 1616, 1111, 1093, 1819, 1094}], 
         Line[{1341, 1707, 2025, 1324, 1703, 2014, 1299, 1699, 1999, 1276, 
          1689, 1978, 1976, 1259, 1954, 1250, 1239, 1669, 1939, 1218, 1916, 
          1915, 1208, 1200, 1644, 1895, 1180, 1880, 1167, 1158, 419, 1857, 
          1138, 1620, 1839, 1118, 1614, 1824, 1098}], 
         Line[{1345, 1710, 2028, 1329, 2020, 1323, 1305, 1702, 2007, 1280, 
          1989, 1988, 1275, 1263, 1682, 1966, 1245, 1672, 1947, 1222, 1928, 
          1927, 1217, 1204, 1651, 1907, 1186, 1887, 1179, 1162, 1872, 1634, 
          1868, 1142, 1626, 1849, 1123, 1617, 1831, 1102}], 
         Line[{1350, 1349, 2031, 1367, 1717, 2039, 1390, 2055, 1723, 2037, 
          1408, 1733, 2072, 1428, 1742, 2096, 1452, 2093, 1747, 2111, 1469, 
          1760, 2132, 1487, 1772, 2155, 1511, 2170, 1778, 2152, 1527, 1791, 
          2193, 1547, 2215, 1545, 1573, 2212, 1571, 1594}], 
         Line[{1351, 1713, 2032, 1368, 732, 1391, 2054, 1725, 2058, 1409, 
          1734, 2077, 1429, 2095, 1430, 1453, 2114, 1749, 2110, 1470, 1762, 
          2136, 1488, 2154, 1489, 1512, 2169, 1780, 2174, 1528, 1794, 2197, 
          1548, 2214, 1549, 1574, 2229, 1575, 1595}], 
         Line[{1352, 719, 1370, 1719, 2041, 1392, 2057, 1727, 2062, 1410, 
          2076, 1413, 1432, 2098, 1435, 1454, 2113, 1751, 2120, 1471, 1764, 
          2135, 1491, 1774, 2157, 1513, 2173, 1782, 2179, 1529, 1796, 2196, 
          1551, 2218, 1554, 1576, 2231, 1579, 1596}], 
         Line[{1355, 1714, 2034, 1372, 2046, 1376, 1394, 1729, 2065, 2066, 
          1412, 1737, 2084, 1434, 2103, 1438, 1456, 2123, 1754, 2119, 1473, 
          1766, 2145, 1493, 1775, 2162, 1515, 2182, 1785, 2178, 1531, 1798, 
          2205, 1553, 1805, 2222, 1578, 1065, 1598}], 
         Line[{1356, 1715, 2035, 1374, 1722, 2049, 1395, 2064, 1731, 2069, 
          1414, 1739, 2083, 1436, 2102, 1443, 1457, 2122, 1756, 2127, 1474, 
          1768, 2144, 1495, 2166, 1502, 1516, 2181, 1787, 2186, 1532, 1800, 
          2209, 1555, 2225, 1562, 1580, 2235, 1587, 1599}], 
         Line[{1357, 1716, 2036, 1375, 2048, 1385, 1396, 2068, 1732, 2052, 
          1415, 2089, 1424, 1437, 1746, 2105, 1458, 2126, 1758, 2108, 1475, 
          1770, 2148, 1496, 2165, 1507, 1517, 2189, 1789, 2185, 1533, 2208, 
          1542, 1556, 2224, 1567, 1581, 2237, 1591, 1600}], 
         Line[{1359, 1366, 2040, 1379, 1389, 2056, 1399, 1407, 2073, 2074, 
          1419, 2097, 1743, 1441, 1451, 2112, 1461, 2133, 1761, 2131, 1479, 
          1486, 2156, 1500, 2171, 1779, 1520, 2191, 1792, 2194, 1537, 1546, 
          2216, 1560, 1572, 2230, 1585, 1078, 1602}], 
         Line[{1360, 1369, 2042, 1380, 2059, 1726, 1400, 2075, 1735, 2078, 
          1420, 1431, 2099, 1442, 2115, 1750, 1462, 2137, 1763, 2134, 1480, 
          1490, 2158, 1501, 2172, 1781, 1521, 2195, 1795, 2198, 1538, 1550, 
          2217, 1561, 1059, 1586, 2240, 1812, 1603}], 
         Line[{1361, 1373, 2044, 1382, 2060, 1728, 1401, 2079, 1736, 2081, 
          1421, 838, 1445, 2116, 1752, 1463, 2138, 1765, 2140, 1481, 1494, 
          2159, 1504, 2175, 1783, 1522, 2199, 1797, 2201, 1539, 2219, 1804, 
          1564, 2232, 1808, 1588, 2241, 1813, 1604}], 
         Line[{1363, 1377, 2047, 1384, 1397, 2067, 1403, 1417, 2085, 2087, 
          1423, 2104, 1745, 1447, 1459, 2124, 1465, 2146, 1767, 2143, 1483, 
          1498, 2163, 1506, 1518, 2183, 1524, 2206, 1799, 2204, 1541, 1558, 
          2223, 1566, 2236, 1809, 1590, 1084, 1606}], 
         Line[{1364, 1381, 2050, 1387, 780, 1405, 2090, 1740, 2088, 1425, 
          1444, 2106, 1449, 2125, 1757, 1466, 2147, 1769, 2149, 1484, 1503, 
          2164, 1508, 2184, 1788, 1525, 2207, 1801, 2210, 1543, 1563, 2226, 
          1569, 1071, 1592, 2243, 1815, 1607}], 
         Line[{1365, 1386, 2051, 1388, 1404, 2070, 1406, 2091, 1741, 2092, 
          1426, 1448, 2107, 1450, 2128, 1759, 1467, 2150, 1771, 2151, 1485, 
          2167, 1777, 1509, 2187, 1790, 1526, 2211, 1802, 2188, 1544, 1568, 
          2227, 1570, 2238, 1810, 1593, 2244, 1816, 1608}], 
         Line[{1597, 1582, 2233, 1577, 1557, 2220, 1552, 1534, 2200, 1530, 
          2177, 2176, 1784, 1514, 1497, 2160, 1492, 1476, 2139, 1472, 2118, 
          2117, 1753, 1455, 2100, 1744, 1433, 1416, 2080, 1411, 772, 2061, 
          1393, 2043, 1720, 1371, 1353, 2033, 1354}], 
         Line[{1601, 1811, 2239, 1584, 1807, 2228, 1559, 1803, 2213, 1536, 
          1793, 2192, 2190, 1519, 2168, 1510, 1499, 1773, 2153, 1478, 2130, 
          2129, 1468, 1460, 1748, 2109, 1440, 2094, 1427, 1418, 794, 2071, 
          1398, 1724, 2053, 1378, 1718, 2038, 1358}], 
         Line[{1605, 1814, 2242, 1589, 2234, 1583, 1565, 1806, 2221, 1540, 
          2203, 2202, 1535, 1523, 1786, 2180, 1505, 1776, 2161, 1482, 2142, 
          2141, 1477, 1464, 1755, 2121, 1446, 2101, 1439, 1422, 2086, 1738, 
          2082, 1402, 1730, 2063, 1383, 1721, 2045, 1362}]}, {
         Line[{342, 612, 1973, 611, 606, 1970, 605, 1969, 600, 1966, 599, 594,
           1961, 593, 588, 1958, 587, 1957, 582, 1954, 576, 573, 1951, 572, 
          1952, 569, 568, 1948, 565, 1946, 564, 561, 1943, 560, 557, 1940, 
          556, 1941, 553, 581}], 
         Line[{352, 575, 1953, 574, 571, 1950, 570, 1949, 567, 1947, 566, 563,
           1945, 562, 1944, 559, 558, 1942, 555, 1939, 550, 545, 1934, 544, 
          539, 1930, 538, 1931, 533, 1925, 532, 527, 1921, 526, 1922, 521, 
          520, 1918, 515, 554}], 
         Line[{354, 339, 1817, 341, 340, 1818, 343, 344, 345, 1819, 346, 1820,
           347, 348, 1821, 349, 350, 1822, 351, 1824, 355, 1826, 358, 359, 
          1828, 362, 363, 1830, 366, 1831, 367, 1833, 370, 371, 1836, 374, 
          1837, 375, 377}], 
         Line[{380, 353, 1825, 356, 357, 360, 1827, 361, 364, 1829, 365, 1832,
           368, 369, 1835, 372, 1834, 373, 376, 1839, 381, 1842, 386, 387, 
          1845, 392, 1846, 393, 398, 1849, 399, 1853, 404, 405, 410, 1856, 
          411, 414}], 
         Line[{416, 378, 1841, 382, 1840, 384, 388, 1843, 390, 394, 1847, 396,
           1851, 400, 1850, 402, 406, 1854, 408, 412, 1857, 418, 1859, 422, 
          1861, 424, 428, 1865, 430, 434, 1868, 436, 1871, 440, 442, 1876, 
          446, 1877, 448, 451}], 
         Line[{452, 1878, 449, 447, 443, 1874, 441, 1873, 1872, 437, 435, 
          1867, 431, 429, 1864, 425, 423, 1860, 419, 413, 1838, 409, 407, 
          1855, 403, 401, 1852, 397, 395, 1848, 391, 389, 1844, 385, 383, 379,
           1823, 417}], 
         Line[{454, 415, 1858, 420, 421, 1863, 426, 1862, 427, 432, 1866, 433,
           1870, 438, 1869, 439, 444, 1875, 445, 450, 1880, 455, 1883, 458, 
          459, 1885, 462, 463, 466, 1887, 467, 1890, 470, 471, 1892, 474, 
          1893, 475, 477}], 
         Line[{480, 453, 1882, 456, 1881, 457, 460, 1884, 461, 464, 1886, 465,
           1889, 468, 1888, 469, 472, 1891, 473, 476, 1895, 481, 1898, 486, 
          487, 1901, 492, 1902, 493, 498, 1907, 499, 1910, 504, 1911, 505, 
          510, 1914, 511, 514}], 
         Line[{516, 1879, 478, 482, 484, 1900, 488, 1899, 490, 494, 1903, 496,
           1909, 500, 1908, 502, 506, 1912, 508, 512, 1915, 518, 1919, 522, 
          524, 1923, 528, 1924, 530, 534, 1927, 536, 1932, 540, 1933, 542, 
          546, 1936, 548, 551}], 
         Line[{552, 1937, 549, 547, 1935, 543, 541, 537, 1929, 1928, 535, 
          1926, 531, 529, 525, 1920, 523, 519, 1917, 1916, 513, 1894, 509, 
          507, 1913, 503, 501, 497, 1905, 1904, 495, 1906, 491, 489, 485, 
          1896, 483, 1897, 479, 517}], 
         Line[{578, 1974, 650, 648, 1996, 644, 642, 638, 1990, 1989, 636, 
          1987, 632, 630, 1984, 626, 624, 1980, 620, 1978, 614, 610, 1971, 
          608, 1972, 604, 602, 598, 1964, 1963, 596, 1965, 592, 590, 1960, 
          586, 584, 580, 1938, 618}], 
         Line[{615, 675, 2013, 674, 2012, 671, 670, 2009, 667, 2007, 666, 663,
           2005, 662, 659, 2003, 658, 2002, 655, 1999, 651, 646, 1994, 645, 
          1995, 640, 639, 1991, 634, 1986, 633, 628, 1982, 627, 1983, 622, 
          621, 1979, 616, 654}], 
         Line[{617, 579, 1956, 583, 1955, 585, 589, 1959, 591, 595, 1962, 597,
           1968, 601, 1967, 603, 607, 609, 1975, 613, 1976, 1977, 619, 623, 
          1981, 625, 629, 1985, 631, 635, 1988, 637, 1992, 641, 1993, 643, 
          647, 1997, 649, 577}], 
         Line[{652, 700, 2024, 699, 696, 695, 2022, 692, 2020, 691, 688, 2018,
           687, 684, 683, 2016, 680, 2014, 676, 673, 2010, 672, 2011, 669, 
          668, 2008, 665, 2006, 664, 661, 2004, 660, 657, 2000, 656, 2001, 
          653, 679}], 
         Line[{677, 713, 2030, 712, 2029, 711, 710, 709, 2028, 708, 707, 2027,
           706, 705, 2026, 704, 703, 2025, 701, 698, 2023, 697, 694, 2021, 
          693, 690, 2019, 689, 686, 2017, 685, 682, 2015, 681, 678, 1998, 
          702}], 
         Line[{717, 987, 2187, 986, 981, 2184, 980, 2183, 975, 2180, 974, 969,
           2175, 968, 963, 2172, 962, 2171, 957, 2168, 951, 948, 2165, 947, 
          2166, 944, 943, 2162, 940, 2160, 939, 936, 2157, 935, 932, 2154, 
          931, 2155, 928, 956}], 
         Line[{727, 950, 2167, 949, 946, 2164, 945, 2163, 942, 2161, 941, 938,
           2159, 937, 2158, 934, 933, 2156, 930, 2153, 925, 920, 2148, 919, 
          914, 2144, 913, 2145, 908, 2139, 907, 902, 2135, 901, 2136, 896, 
          895, 2132, 890, 929}], 
         Line[{729, 714, 2031, 716, 715, 2032, 718, 719, 720, 2033, 721, 2034,
           722, 723, 2035, 724, 725, 2036, 726, 2038, 730, 2040, 733, 734, 
          2042, 737, 738, 2044, 741, 2045, 742, 2047, 745, 746, 2050, 749, 
          2051, 750, 752}], 
         Line[{755, 728, 2039, 731, 732, 735, 2041, 736, 739, 2043, 740, 2046,
           743, 744, 2049, 747, 2048, 748, 751, 2053, 756, 2056, 761, 762, 
          2059, 767, 2060, 768, 773, 2063, 774, 2067, 779, 780, 785, 2070, 
          786, 789}], 
         Line[{791, 753, 2055, 757, 2054, 759, 763, 2057, 765, 769, 2061, 771,
           2065, 775, 2064, 777, 781, 2068, 783, 787, 2071, 793, 2073, 797, 
          2075, 799, 803, 2079, 805, 809, 2082, 811, 2085, 815, 817, 2090, 
          821, 2091, 823, 826}], 
         Line[{827, 2092, 824, 822, 818, 2088, 816, 2087, 2086, 812, 810, 
          2081, 806, 804, 2078, 800, 798, 2074, 794, 788, 2052, 784, 782, 
          2069, 778, 776, 2066, 772, 770, 2062, 766, 764, 2058, 760, 758, 754,
           2037, 792}], 
         Line[{829, 790, 2072, 795, 796, 2077, 801, 2076, 802, 807, 2080, 808,
           2084, 813, 2083, 814, 819, 2089, 820, 825, 2094, 830, 2097, 833, 
          834, 2099, 837, 838, 841, 2101, 842, 2104, 845, 846, 2106, 849, 
          2107, 850, 852}], 
         Line[{855, 828, 2096, 831, 2095, 832, 835, 2098, 836, 839, 2100, 840,
           2103, 843, 2102, 844, 847, 2105, 848, 851, 2109, 856, 2112, 861, 
          862, 2115, 867, 2116, 868, 873, 2121, 874, 2124, 879, 2125, 880, 
          885, 2128, 886, 889}], 
         Line[{891, 2093, 853, 857, 859, 2114, 863, 2113, 865, 869, 2117, 871,
           2123, 875, 2122, 877, 881, 2126, 883, 887, 2129, 893, 2133, 897, 
          899, 2137, 903, 2138, 905, 909, 2141, 911, 2146, 915, 2147, 917, 
          921, 2150, 923, 926}], 
         Line[{927, 2151, 924, 922, 2149, 918, 916, 912, 2143, 2142, 910, 
          2140, 906, 904, 900, 2134, 898, 894, 2131, 2130, 888, 2108, 884, 
          882, 2127, 878, 876, 872, 2119, 2118, 870, 2120, 866, 864, 860, 
          2110, 858, 2111, 854, 892}], 
         Line[{953, 2188, 1025, 1023, 2210, 1019, 1017, 1013, 2204, 2203, 
          1011, 2201, 1007, 1005, 2198, 1001, 999, 2194, 995, 2192, 989, 985, 
          2185, 983, 2186, 979, 977, 973, 2178, 2177, 971, 2179, 967, 965, 
          2174, 961, 959, 955, 2152, 993}], 
         Line[{990, 1050, 2227, 1049, 2226, 1046, 1045, 2223, 1042, 2221, 
          1041, 1038, 2219, 1037, 1034, 2217, 1033, 2216, 1030, 2213, 1026, 
          1021, 2208, 1020, 2209, 1015, 1014, 2205, 1009, 2200, 1008, 1003, 
          2196, 1002, 2197, 997, 996, 2193, 991, 1029}], 
         Line[{992, 954, 2170, 958, 2169, 960, 964, 2173, 966, 970, 2176, 972,
           2182, 976, 2181, 978, 982, 984, 2189, 988, 2190, 2191, 994, 998, 
          2195, 1000, 1004, 2199, 1006, 1010, 2202, 1012, 2206, 1016, 2207, 
          1018, 1022, 2211, 1024, 952}], 
         Line[{1027, 1075, 2238, 1074, 1071, 1070, 2236, 1067, 2234, 1066, 
          1063, 2232, 1062, 1059, 1058, 2230, 1055, 2228, 1051, 1048, 2224, 
          1047, 2225, 1044, 1043, 2222, 1040, 2220, 1039, 1036, 2218, 1035, 
          1032, 2214, 1031, 2215, 1028, 1054}], 
         Line[{1052, 1088, 2244, 1087, 2243, 1086, 1085, 1084, 2242, 1083, 
          1082, 2241, 1081, 1080, 2240, 1079, 1078, 2239, 1076, 1073, 2237, 
          1072, 1069, 2235, 1068, 1065, 2233, 1064, 1061, 2231, 1060, 1057, 
          2229, 1056, 1053, 2212, 1077}]}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
CfaGgsZK129n46ueoJi9xtmoMCmv9G06watQuxlVujmYy3dP/ihPBqrbnF9T
Tvi54gOvk+HRuVgqm+NgUBCKfCKNux3qKJA/QM/P35swP095Xl1uFxmChyqX
+kz38wEOH/VrCb8oaNhL2wdMsP9s4PToR2wezmkuSjgZn4nURemZMUSPb582
+WTw73yU/cHr+CQyE3+vbHrJEU9wYxeYQLUXun5bsbUuOAwmJ9762k38hLHm
9ndPmNvfUP4jgDfJA+c3907+rRYKp8+nfhj89U9fm57nb2PN829jzfOfquxY
va88Ba0F4iVvO8XhioKyO1oEn5H+fojd9PdDZH8/TPiVXDJ+whduHpGqj9aO
hZa9ms31wwSfWf47Jvj/2LN/H19pHOzc2pnxuSwNNquf4Dv85r/7Be8n2KvS
3zmxjP7OiezvnJX091X8QX9fRfb31S76OypsoL+jAvs7KntPoXzCnoIy/b0X
dOnvvbCc9b3X+1/s3aX+fmcGGfo7MwixvjN70v0XtKT7L8juv0zWPLH+tHY8
2kZN1Uhano5+U7dGfW4lcSL39zsYbqG/gyH7O9gcCe4NvL8iQOPSw+qp98Lg
5Akx81Jyn2I5TKmZ0Sn46/rVlWICmVjcEdo6TPiwMONoZWNPCi5evub06ups
TB8+0mZXQQGYfVoSeiMdXArefAmzZIDA+YKmf+ZzGqQXvN1onwZOC0p5IlYy
wCHvvZkN4VFfvRgqG1Wjcb/Ar64xhww8Ydv88zI5J491tlDc7RjkE3PN/7M/
DT/2LT2uSur7h8Efa+37M0C0zaSG83kauO2X3CNXRYHFzQQdI64cUHgz47Xl
1Szg233y4OpMCtL2hKwtmfsIb704zfdWMQ6dx3t1ZpH3yHT823+BVrr/guz+
i/pHDn/OJ9lQb3Pg7S3fDHAXmJvByCd4eEae76xIDoR7JZ9aMpQO/lqWyZXk
dxu6vwOX6P4OsPs7q+l+E9jQ/SaYwuo3cZn/+hR+NRV21j3nvzueDuUbNc4c
eE6BL93ngvV0nwvYfa4Uup8FB+l+FrD7WW/p/hoE0f01YPfXftP9NThD99eA
3V97QPf14And1wN2X28l3R8EAbo/CBtZ/cFTdB+Z6LS/fWRk95GvH8kQMMmL
wWA7s2ap/Rm4ToknfDZ5XxuXzBJrd0tEhRuvy6oIL+536BBSaCI6V1+Qjzew
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
KsRYTflsNT8Og6a5K70g9mxrPm+iNsSCPVfXGO8Yk4LjU62ELlawwf/G9wnX
/D1hmk5IzV7bfORuEw9aGcaGB1Ibo4qO2sB7bu5NIQdInnHRpDmK5ClPHKqk
1k6wwdnjBK2uTc1Hc5GstLwYNqhWb711gM8KLyT9+MLtiNgfs91zJYkDeUYN
uNzKjaC8eP3EMwE56Mm7eioficem6Wev2XNYG9azVWxrjmbhr6CsAgcynhI5
kx0yo+4Qki43YJ+RgJZPJ2mUkfWmH/5Fr+VONKyZ9yLJ81MejGvrbb4bSPLu
VT7cK01j4ZzU3VJhg3xgycwVE/AmcfiRLNbBx46gq13wNDYqD2JVx146RPKO
dVX7qnxcIvBp59TcrrXZEGSl07yN5JsnaX2TT7S+yVVa3+Q6rReTy9CLmZ+2
TCWGpwS5M/bssch1h/rrSp+7DNjw5WSduv6ESlx8tcnF6aQzpj+/t2d0DsnH
rXt+fdCowe7DQpM+/IjFOnzweW/O/3RkJjB0ZHj0R8qmnK/Fwce/b6Ym5qJG
4jQb16M9kO+vMvO1YzVOSwplp33KxcFQN/Mdvj3wqN93paROGQ7//jhbcW42
Pj9dwto2laxPWl9mDkNfxn5j4uKNK9LwR5fu9dQkf2z0vHGej6y3ZOMj98te
++AtnweL/PY6QVSWRdH6EZIvzL4jWFnjBa9zj7WpEP99vbOv+CeJ0+ZJ6Ju8
Ok++S89qpCw1F8v3bXvw07IHZg7A+kLJh5DYeiZo9rEUqPy17lAH8Q+zTfKD
D4iEoWKq9I39DiEgtHB1wnFyLngqmIl2NT3H90LrBRYNpOHo5Ncf9STJfD2N
Ukk5koW/59RUnio6gDLeOxKdK/43X0OM+aowSHHPUy/FW7eiR60zQrDInHvd
+d3ED9B8Mn40n4wifU8vbemLLFv+CjR84WXZ28xCjYFlT1UF2FC34GfDe/FK
dHRNONR5IA1rsywiub72wOCn+qj+D3k4uNkquo7kK33Oqb0vPdgw5QX4L7/H
wov604pyMq0xYbfXj9PkvOih9W7W0Xo372n+6gV7Q+t924oxfqGX08K5SXgi
6NsKy4NsGMe6VjZbvAA/+6+a3CoXj08ttox2kvz3abTHzTKx+9B5Kv71ZbMY
WNqbdLqCnGuuN3eoOyzIQm9vgZLWk8EIfL4pb4rZYE3r40Qw9HE6vXwHboy/
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
+d/ISYss77RpQOdynnMzRjPAefqXcUfIfky6sGGjtVQGignd3mzFH4hnaj0m
/MFvlWn9aBuGfjRHb3oJo8/dldaPXsHQj86c+a33x8RovNtz4NkiWRZYqPSE
zSDrR0E7NlQpOAXHf1HdlnAlHPkOahjfJe/fovu1a5tZIu4ePqt+3FgH0n/f
XarQ9T9daTFGnfr9dbM3akuTsSg17Qm/bThe2qZS7UL82xmzCSuHQ5JxeLGi
ve3+cHzeXfzreDPxA3TfrjWjb5ejB21P60Gfovne+e0DjdXHesPgy0uaEW5J
cCN/Uc0p8r8jQQpq/P0hUGmWP29KawpkNpy5x3pBnrdS65u4IwrFmlWCxM4+
xqOKU2cZfCX7outF7NJr1rD6lNVHngssqE2q+hL4+Q8fI9XXPI3R1/yWrpt/
YNTNtSZ/7R5ICMc18hMWpvMEYJ7oD4tPf/SjaX3kVIY+MjfdH23I6I8OpvWO
vzL0jgtuC67i2+uMdcpZ5vknnsKhj9sf1Y2w4ck/6u8V/+in3m0oNeS3MADd
2fxhnc/D0ENp0+onxM5fm9Fd3sEB+wZSzSP07OFJtPXzw7/+6ApRfdZXGX3W
o8cqavz9Qv9fYWceTuW2BvDKWJzMTepkO8pODolUkqWUEOmGkhLloMw6zjWU
BtySRIZEGSrTlilj2FibttqOuimETYZODqccQ7k4pHtXfeu7PXc9z37uvx7P
3utZ37vW976v9+cHF1SFnNrJKoR5rGRtS7Q/JtgvPED4hTn9Mwmu+8oA7wnT
S3c6A3jc8rEoQO8XXcyb9xK8uT7mrIcIzvqy5tiLfQFXgAPfx974Zjg8YueY
+vjzN9/uRYITP/eoSoXbUQr2yRq/9BbKBv3vXb3Pou8Vxbz2jPj/8trfD0mG
qrTFAzOFyzPH1BJgRMDm4BOfUB6FvbqPCK+uBua7gwi+m/bqehNeXWND34Oz
stWgeevr83VXssCzDHXlW6heK3G3OSiXXwUGzSdt52WyQOHHqukvf8exwXy6
B8Gn2+H5hL3EfMJ+zI+nEPz4fMyJZxKcOO29nSW48qhcp0iD0d1QfOWhqCM/
lkC5sZWis+j5JmS2S8Q6XIcpXJ5LtmYZPO26c64DnTtZzJubE7z5FJ436CHm
DWjvrSzhvfXBXLkFwZXb9bn1bS8tAqpuHpIsxn0QblG/p7D/m8eWnJf4VXQZ
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
q2wOLmVWwsTOPc5iqH7/D4N0dtE=
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {0., 
       0.49488850049789845`}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25, {1, 4, {-1, 0}} -> 0.25, {1, 4, {0, -1}} -> 
     0.25, {1, 4, {-1, -1}} -> 0.25, {1, 4, {-1, 1}} -> 0.25, {1, 4, {1, 0}} -> 
     0.25, {1, 4, {0, 1}} -> 0.25, {1, 4, {1, 1}} -> 0.25, {1, 4, {1, -1}} -> 
     0.25, {1, 4, {0, 0}} -> 0.25, {2, 4, {-1, 0}} -> 0.25, {2, 4, {0, -1}} -> 
     0.25, {2, 4, {-1, -1}} -> 0.25, {2, 4, {-1, 1}} -> 0.25, {2, 4, {1, 0}} -> 
     0.25, {2, 4, {0, 1}} -> 0.25, {2, 4, {1, 1}} -> 0.25, {2, 4, {1, -1}} -> 
     0.25, {2, 4, {0, 0}} -> 0.25, {3, 4, {-1, 0}} -> 0.25, {3, 4, {0, -1}} -> 
     0.25, {3, 4, {-1, -1}} -> 0.25, {3, 4, {-1, 1}} -> 0.25, {3, 4, {1, 0}} -> 
     0.25, {3, 4, {0, 1}} -> 0.25, {3, 4, {1, 1}} -> 0.25, {3, 4, {1, -1}} -> 
     0.25, {3, 4, {0, 0}} -> 0.25, {4, 1, {-1, 0}} -> 0.25, {4, 1, {0, -1}} -> 
     0.25, {4, 1, {-1, -1}} -> 0.25, {4, 1, {-1, 1}} -> 0.25, {4, 1, {1, 0}} -> 
     0.25, {4, 1, {0, 1}} -> 0.25, {4, 1, {1, 1}} -> 0.25, {4, 1, {1, -1}} -> 
     0.25, {4, 2, {-1, 0}} -> 0.25, {4, 2, {0, -1}} -> 0.25, {4, 2, {-1, -1}} -> 
     0.25, {4, 2, {-1, 1}} -> 0.25, {4, 2, {1, 0}} -> 0.25, {4, 2, {0, 1}} -> 
     0.25, {4, 2, {1, 1}} -> 0.25, {4, 2, {1, -1}} -> 0.25, {4, 3, {-1, 0}} -> 
     0.25, {4, 3, {0, -1}} -> 0.25, {4, 3, {-1, -1}} -> 0.25, {4, 3, {-1, 1}} -> 
     0.25, {4, 3, {1, 0}} -> 0.25, {4, 3, {0, 1}} -> 0.25, {4, 3, {1, 1}} -> 
     0.25, {4, 3, {1, -1}} -> 0.25, {4, 4, {-1, 0}} -> 0.25, {4, 4, {0, -1}} -> 
     0.25, {4, 4, {-1, -1}} -> 0.25, {4, 4, {-1, 1}} -> 0.25, {4, 4, {1, 0}} -> 
     0.25, {4, 4, {0, 1}} -> 0.25, {4, 4, {1, 1}} -> 0.25, {4, 4, {1, -1}} -> 
     0.25}, $CellContext`m1Sel$$ = 1, $CellContext`m2Sel$$ = 
    1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$6250, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}}, $CellContext`moSel$$ = 
    2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {3.5, 20, 20, 20}, "numberOfMasses" -> 4, 
     "latticeBasis" -> {{-0.3719999999999999, 1.1949999999999998`}, {1.884, 
      0.875}}, "latticeNorms" -> {1.2515626232833896`, 2.077277304550358}, 
     "latticeUnitVectors" -> {{-0.29722843514140995`, 0.9548063978332929}, {
      0.9069564260260408, 0.4212244547626251}}, 
     "numberLatticeLinesToDisplay" -> {9, 4}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.33955791499798216`, 0.7311166992642266}, {
      0.46373909534010127`, 0.1443606221477135}}, 
     "reciprocalNorms" -> {0.8061210861779975, 0.48568913697315746`}, 
     "qMaxVec" -> {5.065008164481243, 3.0516748492864765`}, 
     "mObliqueComponents" -> {{0.20617956598677467`, 0.5184176213094907}, {
      0.649432647232312, 0.4159176989227284}, {0.3731760889137249, 
      0.856062369997827}, {0.6433167241004627, 0.692841731085654}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.5420000000000003, 
      1.1400000000000001`}, {1.4740000000000002`, 1.1949999999999998`}, {
      1.0659999999999998`, 1.375}}, "pointsDataTable" -> CompressedData["
1:eJwtUn9IU1EUfm5zbmuOIVIhsX4Q4T+hkWGSdk5URIiEFWEhIVIiISUySiQC
KSmJkFgSoWEhEoFZSISEeF5ZZlFjiKFW4o/RpKk43damU+vd8+6B++B759zv
nO+7Z3v5lZMXjYqimLTj0I5BO72uhtniHi/d0r6uBpMaSDxfHCpaAetIe3WB
LUFDReXOkjw7pnUdm6pLD1LW+E5zfbOfuHw2Srv2WDq3nItAp0h3TVBN5f35
62DF0yJdPAov+ccCVVaIGKBvX0XMAcOKAKTdVL88PWrGvRzLsNl0xrG7O0pM
XxyCotzGQ2W/J0HH69D9eOHZQKERM0ub3kczzTjqjZ3ydySI0z1JmHN745g3
1g86tuAd7bZvh5/+cSjqyo1LvW5PBNYZh4lpSq0YZzxCFta9QGpUdJgnN+uZ
B4ULO2lV2FNuRrSJwiAceRNeG66NUpwH8kGEDZuCg5xfgtYP217VVBpxqxjH
paCpvvnw3aqE7BsDH/f5CGxvlwHzJ07ce3hZQR1bcbqjRWNQ1ALmS8ZsIefn
Z9KxHQcLhUHfgemaFLUk7/Xg1b4kZPmuMOn9nVibLhiHSV0WBrSTwjFHIc3N
3MY1UGSw/JFUlHnYz31+kLwP2fz+MZD8cK2vLSNr3IayP7ZmiA35Q/l8Lw7V
/MCLst6Im8bEg6XI+Wzo4IGX6AXrTcYyJpoBHdvxSdWMtpHdkm+dIuzzKug4
RGcvHNAcS8VJXpB3lGkWBv+S9QHKOf/2uN0QAycL+wQs32PD6TohKAQPeOGC
0o9JcHvEj0Xpx194xJEi/TDoz24Lkz5/Ang99gWk/yZk+9tM0o8NqC23tiFx
WZ+CPrGuLcPSDwf+B647tkU=
      "], "lineTable" -> {{
        Line[{{-4.188000000000001, -14.254999999999999`}, \
{-10.883999999999999`, 7.254999999999999}}], 
        Line[{{-2.3040000000000003`, -13.379999999999999`}, \
{-8.999999999999998, 8.129999999999999}}], 
        Line[{{-0.4200000000000008, -12.504999999999999`}, \
{-7.115999999999999, 9.004999999999999}}], 
        Line[{{1.463999999999999, -11.629999999999999`}, {-5.231999999999999, 
         9.879999999999999}}], 
        Line[{{3.347999999999999, -10.754999999999999`}, {-3.347999999999999, 
         10.754999999999999`}}], 
        Line[{{5.231999999999999, -9.879999999999999}, {-1.463999999999999, 
         11.629999999999999`}}], 
        Line[{{7.115999999999999, -9.004999999999999}, {0.4200000000000008, 
         12.504999999999999`}}], 
        Line[{{8.999999999999998, -8.129999999999999}, {2.3040000000000003`, 
         13.379999999999999`}}], 
        Line[{{10.883999999999999`, -7.254999999999999}, {4.188000000000001, 
         14.254999999999999`}}]}, {
        Line[{{-4.188000000000001, -14.254999999999999`}, {
         10.883999999999999`, -7.254999999999999}}], 
        Line[{{-4.5600000000000005`, -13.059999999999999`}, {
         10.511999999999999`, -6.059999999999999}}], 
        Line[{{-4.932, -11.864999999999998`}, {
         10.139999999999999`, -4.864999999999998}}], 
        Line[{{-5.304, -10.669999999999998`}, {
         9.767999999999999, -3.669999999999999}}], 
        Line[{{-5.676, -9.475}, {9.395999999999999, -2.4749999999999996`}}], 
        Line[{{-6.048, -8.28}, {9.024, -1.2799999999999994`}}], 
        Line[{{-6.42, -7.084999999999999}, {8.652, -0.08499999999999952}}], 
        Line[{{-6.792, -5.89}, {8.28, 1.1100000000000003`}}], 
        Line[{{-7.164, -4.695}, {7.9079999999999995`, 2.305}}], 
        Line[{{-7.536, -3.5}, {7.536, 3.5}}], 
        Line[{{-7.9079999999999995`, -2.305}, {7.164, 4.695}}], 
        Line[{{-8.28, -1.1100000000000003`}, {6.792, 5.89}}], 
        Line[{{-8.652, 0.08499999999999952}, {6.42, 7.084999999999999}}], 
        Line[{{-9.024, 1.2799999999999994`}, {6.048, 8.28}}], 
        Line[{{-9.395999999999999, 2.4749999999999996`}, {5.676, 9.475}}], 
        Line[{{-9.767999999999999, 3.669999999999999}, {5.304, 
         10.669999999999998`}}], 
        Line[{{-10.139999999999999`, 4.864999999999998}, {4.932, 
         11.864999999999998`}}], 
        Line[{{-10.511999999999999`, 6.059999999999999}, {4.5600000000000005`,
          13.059999999999999`}}], 
        Line[{{-10.883999999999999`, 7.254999999999999}, {4.188000000000001, 
         14.254999999999999`}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.5325040822406213`, 
    1.5258374246432382`}, $CellContext`qPlaneLoc$$ = {{-2.5325040822406213`, \
-1.5258374246432382`}, {2.5325040822406213`, 
    1.5258374246432382`}}, $CellContext`rawArrayOfMasses$$ = {
    3.5, 20, 20, 20}, $CellContext`rawNumberOfMasses$$ = 
    4, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
    3, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
    False, $CellContext`u$$ = {{-0.3719999999999999, 1.1949999999999998`}, {
    1.884, 0.875}, {0.9, 0.7}, {0.5420000000000003, 1.1400000000000001`}, {
    1.4740000000000002`, 1.1949999999999998`}, {1.0659999999999998`, 1.375}}, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       TabView[{"dynamics" -> Column[{
            Dynamic[
             Row[{
               OverVector["q"], " = ", 
               
               Module[{$CellContext`qm$}, $CellContext`qm$ = 
                 ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                Slider2D[
                  
                  Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                  ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
               " 2 \[Pi] ", 
               Dynamic[
                NumberForm[
                 MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}]], 
            Row[{
              Text["time, normalized to one period, t/T = "], 
              Dynamic[
               
               N[($CellContext`tauSliderValue$$ - 
                 1)/$CellContext`dynMeshSize$$]]}], 
            Row[{
              Dynamic[
               Manipulator[
                
                Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {
                1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                ContinuousAction -> True, Appearance -> "Open", 
                AppearanceElements -> {
                 "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                  "FasterSlowerButtons", "DirectionButton"}]]}], 
            Row[{
              Text["oscillation scale factor:"]}], 
            Row[{" " Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], 
              Dynamic[
               NumberForm[$CellContext`scale$$, {3, 2}]]}], 
            Row[{
              Text["Angular frequency \[Omega](q), selection:"], 
              Dynamic[
               SetterBar[
                
                Dynamic[$CellContext`omegaIndex$$, ($CellContext`omegaIndex$$ = \
#; $CellContext`bRefreshDynPlot$$ = True; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
         "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
         Column[{
            Row[{
              Text["number of mesh intervals "], 
              Manipulator[
               
               Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                   EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {2,
                30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[$CellContext`freqMeshSize$$]}], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}], "parameters" -> Grid[{{
             Row[{
               Text["mass: "], 
               Dynamic[
                If[$CellContext`rawNumberOfMasses$$ > 1, 
                 SetterBar[
                  
                  Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   Range[$CellContext`rawNumberOfMasses$$]]], 
                 $CellContext`massLabel[1]]]}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                 Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                  ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {0.25, 
                 Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
             Text["coupling to neighbouring: "], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 1, 
               SetterBar[
                
                Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 Range[$CellContext`rawNumberOfMasses$$]]], 
               $CellContext`massLabel[1]]]}, {
             Row[{
               Text["horizontal: "], 
               Style[
                Subscript[
                 Style["k", Italic], 1], FontColor -> RGBColor[
                  Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
               OverVector["a"], " "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
             Row[{
               Text["vertical: "], 
               Style[
                Subscript[
                 Style["k", Italic], 2], FontColor -> RGBColor[0, 
                  Rational[2, 3], 0]], " || ", 
               OverVector["b"], " "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
             Row[{
               Text["diagonal: "], 
               Style[
                Subscript[
                 Style["k", Italic], 3], FontColor -> 
                RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
               " || (", 
               OverVector["b"], " + ", 
               OverVector["a"], ") "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
             Row[{
               Text["diagonal: "], 
               Style[
                Subscript[
                 Style["k", Italic], 4], FontColor -> RGBColor[0, 
                  Rational[2, 3], 
                  Rational[2, 3]]], " || (", 
               OverVector["b"], " - ", 
               OverVector["a"], ") "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`k4$$, {3, 2}]]}]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Row[{
                 Text["coupling from "], 
                 Dynamic[
                  $CellContext`massLabel[$CellContext`m1Sel$$]], 
                 Text[" to: "]}]]], 
             Dynamic[
              Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]], 
               Blank[], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  DeleteCases[
                   
                   Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Row[{
                 $CellContext`kLable[5], ": "}]]], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Row[{
                 Dynamic[
                  Manipulator[
                   
                   Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}]], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k5$$, {3, 2}]]}]]]}}]}, 
        Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], ImageSize -> {250, 350}]],
       Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 12}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 1}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        12, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10}, $CellContext`rawNumberOfMasses$$ = 
        1, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
        1, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         Switch[$CellContext`tabNumber$$, $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], $CellContext`freqTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
            Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
          Blank[], 
          LocatorPane[
           Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                 Dimensions[#]] < 3, 
               
               Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[$CellContext`rawArrayOfMasses$$]]; 
              
              If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                  $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                
                While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[$CellContext`kArray$$, All, 1], All, 1]]; 
              If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                
                While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 1], 
               Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                 Part[$CellContext`u$$, 2], 
                 
                 Part[$CellContext`u$$, 
                  2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 2], 
               Part[$CellContext`u$$, 2]]; {
               Part[$CellContext`u$$, 1], 
               
               Part[$CellContext`u$$, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
             If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
             If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
             If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
             If[$CellContext`omegaIndex$$ > 
               2 $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
             ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
              2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
             True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
           $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
           LocatorAutoCreate -> True, ContinuousAction -> False]]]), 
      "Specifications" :> {
        TabView[{"dynamics" -> Column[{
             Dynamic[
              Row[{
                OverVector["q"], " = ", 
                
                Module[{$CellContext`qm$}, $CellContext`qm$ = 
                  ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                 Slider2D[
                   
                   Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False,
                    ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
                " 2 \[Pi] ", 
                Dynamic[
                 NumberForm[
                  MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}]], 
             Row[{
               Text["time, normalized to one period, t/T = "], 
               Dynamic[
                
                N[($CellContext`tauSliderValue$$ - 
                  1)/$CellContext`dynMeshSize$$]]}], 
             Row[{
               Dynamic[
                Manipulator[
                 
                 Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {
                 1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                 ContinuousAction -> True, Appearance -> "Open", 
                 AppearanceElements -> {
                  "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                   "FasterSlowerButtons", "DirectionButton"}]]}], 
             Row[{
               Text["oscillation scale factor:"]}], 
             Row[{" " Manipulator[
                 
                 Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], 
               Dynamic[
                NumberForm[$CellContext`scale$$, {3, 2}]]}], 
             Row[{
               Text["Angular frequency \[Omega](q), selection:"], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
          "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
          Column[{
             Row[{
               Text["number of mesh intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`freqMeshSize$$]}], 
             LocatorPane[
              Dynamic[$CellContext`qPlaneLoc$$], 
              Dynamic[
               (Graphics[{
                 Lighter[Gray], 
                 Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                 Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
              ContinuousAction -> False]}], "parameters" -> Grid[{{
              Row[{
                Text["mass: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                  Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                   ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {0.25, 
                  Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
              Text["coupling to neighbouring: "], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]]}, {
              Row[{
                Text["horizontal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 1], FontColor -> RGBColor[
                   Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                OverVector["a"], " "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
              Row[{
                Text["vertical: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 2], FontColor -> RGBColor[0, 
                   Rational[2, 3], 0]], " || ", 
                OverVector["b"], " "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 3], FontColor -> 
                 RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                " || (", 
                OverVector["b"], " + ", 
                OverVector["a"], ") "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 4], FontColor -> RGBColor[0, 
                   Rational[2, 3], 
                   Rational[2, 3]]], " || (", 
                OverVector["b"], " - ", 
                OverVector["a"], ") "}], 
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k4$$, {3, 2}]]}]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Row[{
                  Text["coupling from "], 
                  Dynamic[
                   $CellContext`massLabel[$CellContext`m1Sel$$]], 
                  Text[" to: "]}]]], 
              Dynamic[
               Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
                Dynamic[
                 $CellContext`massLabel[
                  First[
                   Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 
                Blank[], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   DeleteCases[
                    
                    Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Row[{
                  $CellContext`kLable[5], ": "}]]], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Row[{
                  Dynamic[
                   Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k5$$, {3, 2}]]}]]]}}]}, 
         Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
         ImageSize -> {250, 350}], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 12}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10}}, 0, ControlType -> 
         None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{915., {292., 299.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (
                   Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax, 1]/2, Part[$CellContext`qMax, 1]/2,
                Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -
               Part[$CellContext`qMax, 2]/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {380, 
        380}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, $CellContext`k] \
$CellContext`glConstMMax^(-1)/350]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
$CellContext`glConstMMax^(-1)/500]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 0.25, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.605485449360225*^9, {3.6054859613055067`*^9, 3.6054860471484165`*^9}},
 CellID->287208036]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "DetailsSection"],

Cell[TextData[{
 "The positions of masses within a two dimensional periodic array of cells, \
can be described by summing the lattice vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["r", "\[RightVector]"], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], " ", "=", " ", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["n", "1"], ",", " ", 
        SubscriptBox["n", "2"]}], ")"}]}]], " ", "=", " ", 
    RowBox[{
     RowBox[{
      SubscriptBox["n", "1"], 
      OverscriptBox["a", "\[RightVector]"]}], " ", "+", " ", 
     RowBox[{
      SubscriptBox["n", 
       RowBox[{"2", " "}]], 
      OverscriptBox["b", "\[RightVector]"]}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", representing the origin of each of the lattice cell, and a relative \
vector to the position of each of the masses.",
 " ",
 "With ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 " representing the equilibrium position of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 ", the position of that mass is ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 "+ ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.6008874666091995`*^9, 3.600887466629201*^9}, 
   3.6012090394184523`*^9, {3.601382475199787*^9, 3.601382478123955*^9}},
 CellID->143536934],

Cell[TextData[{
 "Let ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["a", "\[RightVector]"], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], "=", " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["r", "\[RightVector]"], 
      OverscriptBox["n", "\[RightVector]"]], "+", 
     SubscriptBox[
      OverscriptBox["p", "\[RightVector]"], "k"], " ", "-", " ", 
     SubscriptBox[
      OverscriptBox["r", "\[RightVector]"], 
      OverscriptBox["m", "\[RightVector]"]], "-", 
     SubscriptBox[
      OverscriptBox["p", "\[RightVector]"], "j"]}]}], TraditionalForm]], 
  "InlineMath"],
 ", with direction ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["a", "^"], 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", represent the equilibrium separation of the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 " from the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["j", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["m", "\[RightVector]"]], TraditionalForm]]],
 ".",
 " ",
 "If the harmonic coupling between these masses has magnitude ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]]],
 ", then the system of equations describing the vector displacement ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["u", "\[RightVector]"], 
    RowBox[{"n", ",", " ", "k", " "}]], TraditionalForm]]],
 " for the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in unit cell ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["n", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " from the equilibrium position is given by"
}], "DetailNotes",
 CellChangeTimes->{{3.6008874666091995`*^9, 3.600887467295239*^9}, {
  3.6012090498004904`*^9, 3.601209051237634*^9}},
 CellID->185095190],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubscriptBox["m", "k"], " ", 
    SubscriptBox[
     OverscriptBox[
      OverscriptBox["u", "\[RightVector]"], ".."], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}]]}], "=", " ", 
   RowBox[{"-", 
    RowBox[{
     UnderscriptBox["\[Sum]", 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", 
       RowBox[{"k", " ", "\[NotEqual]", " ", 
        OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
     RowBox[{
      SubscriptBox["K", 
       RowBox[{
        OverscriptBox["n", "\[RightVector]"], ",", 
        RowBox[{"k", ";", 
         OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
      SubscriptBox["Proj", 
       SubscriptBox[
        OverscriptBox["a", "^"], 
        RowBox[{
         OverscriptBox["n", "\[RightVector]"], ",", 
         RowBox[{"k", ";", 
          OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox[
         OverscriptBox["u", "\[RightVector]"], 
         RowBox[{
          OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}]], "-", " ", 
        SubscriptBox[
         OverscriptBox["u", "\[RightVector]"], 
         RowBox[{
          OverscriptBox["m", "\[RightVector]"], ",", " ", "j"}]]}], ")"}], 
      " "}]}]}]}], TraditionalForm]]]], "DetailNotes",
 CellChangeTimes->{{3.6008875035133104`*^9, 3.6008875050703993`*^9}},
 CellID->413013362],

Cell[TextData[{
 "In general, we have one such equation for each ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}], TraditionalForm]]],
 " pair.",
 " ",
 "A trial solution of the form: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox[
      OverscriptBox["u", "\[RightVector]"], 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", " ", "k", " "}]], "(", "t", 
     ")"}], "=", " ", 
    RowBox[{
     FractionBox[
      RowBox[{
       SubscriptBox[
        OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
       OverscriptBox["q", "\[RightVector]"], ")"}], 
      SqrtBox[
       SubscriptBox["m", "k"]]], " ", 
     SuperscriptBox["e", 
      RowBox[{"I", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          SubscriptBox[
           OverscriptBox["r", "\[RightVector]"], 
           OverscriptBox["n", "\[RightVector]"]], ".", " ", 
          OverscriptBox["q", "\[RightVector]"]}], " ", "-", " ", 
         RowBox[{"\[Omega]", " ", "t"}]}], ")"}]}]]}]}], TraditionalForm]]],
 " can be used to decouple this system, resulting in a single equation for \
each ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass of the form"
}], "DetailNotes",
 CellChangeTimes->{3.601209052017712*^9},
 CellID->160232404],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SuperscriptBox["\[Omega]", "2"], " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
     OverscriptBox["q", "\[RightVector]"], ")"}]}], " ", "=", " ", 
   RowBox[{
    UnderscriptBox["\[Sum]", 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", 
      RowBox[{"k", " ", "\[NotEqual]", " ", 
       OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
    RowBox[{
     SubscriptBox["K", 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", 
       RowBox[{"k", ";", 
        OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
     SubscriptBox["Proj", 
      SubscriptBox[
       OverscriptBox["a", "^"], 
       RowBox[{
        OverscriptBox["n", "\[RightVector]"], ",", 
        RowBox[{"k", ";", 
         OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        RowBox[{
         SubscriptBox[
          OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
         OverscriptBox["q", "\[RightVector]"], ")"}], 
        SubscriptBox["m", "k"]], "-", " ", 
       RowBox[{
        FractionBox[
         RowBox[{
          SubscriptBox[
           OverscriptBox["\[Epsilon]", "\[RightVector]"], "j"], "(", 
          OverscriptBox["q", "\[RightVector]"], ")"}], 
         SqrtBox[
          RowBox[{
           SubscriptBox["m", "k"], 
           SubscriptBox["m", "j"]}]]], 
        SuperscriptBox["e", 
         RowBox[{"I", " ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SubscriptBox[
              OverscriptBox["r", "\[RightVector]"], 
              OverscriptBox["m", "\[RightVector]"]], " ", "-", " ", 
             SubscriptBox[
              OverscriptBox["r", "\[RightVector]"], 
              OverscriptBox["n", "\[RightVector]"]]}], ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}]}]]}]}], ")"}]}]}]}], 
  TraditionalForm]]]], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.5980567961741514`*^9}, {
  3.5991430414266324`*^9, 3.5991431578722925`*^9}, {3.5991432045039597`*^9, 
  3.5991434204693127`*^9}, {3.599995184437109*^9, 3.599995299044664*^9}, {
  3.5999955623567247`*^9, 3.59999570266675*^9}, {3.599995845419915*^9, 
  3.599996134802467*^9}, {3.5999964591490183`*^9, 3.599996636408157*^9}, {
  3.6000782740315385`*^9, 3.6000782764963427`*^9}, {3.6000800168821993`*^9, 
  3.600080195362113*^9}, {3.6000802877454753`*^9, 3.6000802964814906`*^9}, {
  3.600819379450795*^9, 3.6008194857548757`*^9}, {3.6008195456733027`*^9, 
  3.6008197257836046`*^9}, {3.600819776466503*^9, 3.6008198064982214`*^9}, {
  3.600819885519741*^9, 3.6008199013896484`*^9}, {3.6008233445915885`*^9, 
  3.6008233557062244`*^9}, {3.600823461634283*^9, 3.6008234639174137`*^9}},
 CellID->323301769],

Cell[TextData[{
 "This describes all the steady state lattice vibrations, the normal modes, \
that can be modelled by this trial solution. Here ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " is a vector in reciprocal space, effectively parameterizing the angular \
velocity ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", " ", "=", " ", 
    RowBox[{"\[Omega]", "(", 
     OverscriptBox["q", "\[RightVector]"], ")"}]}], TraditionalForm]], 
  "InlineMath"],
 ". The vector ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    FormBox[
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{
           SubscriptBox[
            OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
           OverscriptBox["q", "\[RightVector]"], ")"}]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]],
     TraditionalForm], "k"], TraditionalForm]], "InlineMath",
  FormatType->"TraditionalForm"],
 ", is an eigenvector of the equations of motion of the system for this \
assumed solution, where ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Omega]", "2"], TraditionalForm]], "InlineMath"],
 " are the eigenvalues of this system. For an N-atom basis, there are ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", " ", "N"}], TraditionalForm]], "InlineMath",
  FormatType->"TraditionalForm"],
 " such ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Omega]", "2"], TraditionalForm]], "InlineMath"],
 " eigenvalues per ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " point, each resulting in a different characteristic motion."
}], "DetailNotes",
 CellChangeTimes->{{3.6008875562233257`*^9, 3.600887556236326*^9}, {
  3.6012090526877794`*^9, 3.6012090538738976`*^9}, {3.6013825361482735`*^9, 
  3.601382742763091*^9}},
 CellID->72937650],

Cell[TextData[{
 "The rank of the resulting eigenvalue problem depends on the number of \
masses per unit cell, but the complexity of the matrix expression depends on \
the number of neighboring interactions that are considered.",
 " ",
 "For example, given lattice vectors ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], ",", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", diagonals ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["r", "\[RightVector]"], "=", 
     RowBox[{
      OverscriptBox["a", "\[RightVector]"], " ", "+", " ", 
      OverscriptBox["b", "\[RightVector]"]}]}], ",", " ", 
    RowBox[{
     OverscriptBox["s", "\[RightVector]"], "=", 
     RowBox[{
      OverscriptBox["a", "\[RightVector]"], " ", "-", " ", 
      OverscriptBox["b", "\[RightVector]"], " "}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", and a one atom basis, where each unit cell contains a single mass coupled \
with harmonic oscillator forces between only nearest neighbors, the normal \
mode solutions follow from the solution of the eigenvalue problem"
}], "DetailNotes",
 CellChangeTimes->{{3.6008875562233257`*^9, 3.600887556623348*^9}, {
   3.6008880360077677`*^9, 3.600888037934878*^9}, 3.601209054354946*^9},
 CellID->69846009],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          SuperscriptBox["\[Omega]", "2"], "0"},
         {"0", 
          SuperscriptBox["\[Omega]", "2"]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], " ", 
     OverscriptBox["\[Epsilon]", "\[RightVector]"]}], " ", "=", " ", 
    RowBox[{
     FractionBox["4", "m"], 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{
        SubscriptBox["k", 
         RowBox[{"1", " "}]], 
        OverscriptBox["a", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["a", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           OverscriptBox["a", "\[RightVector]"], " ", ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", " ", 
       RowBox[{
        SubscriptBox["k", 
         RowBox[{"2", " "}]], 
        OverscriptBox["b", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["b", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           OverscriptBox["b", "\[RightVector]"], " ", ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", " ", 
       RowBox[{
        SubscriptBox["k", "3"], 
        OverscriptBox["r", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["r", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", " ", 
            RowBox[{
             OverscriptBox["b", "\[RightVector]"], " ", "+", " ", 
             OverscriptBox["a", "\[RightVector]"]}], " ", ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", " ", 
       RowBox[{
        SubscriptBox["k", "4"], 
        OverscriptBox["s", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["s", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", " ", 
            RowBox[{
             OverscriptBox["b", "\[RightVector]"], " ", "-", " ", 
             OverscriptBox["a", "\[RightVector]"]}], " ", ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}]}],
       ")"}], 
     OverscriptBox["\[Epsilon]", "\[RightVector]"]}]}], TraditionalForm]], 
  "InlineMath"],
 "   ",
 " "
}], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.598056894559779*^9}, {
   3.598056950150959*^9, 3.5980569832608523`*^9}, {3.598057031767627*^9, 
   3.598057031774627*^9}, {3.598057330464711*^9, 3.598057330604719*^9}, {
   3.5980584907700768`*^9, 3.5980584911520987`*^9}, {3.5991428674046793`*^9, 
   3.5991429352825613`*^9}, 3.5991434894172564`*^9, {3.599143745937928*^9, 
   3.599143747597023*^9}, {3.599144339776894*^9, 3.599144393338958*^9}, {
   3.5999961526324863`*^9, 3.599996166069255*^9}, {3.6000802839234686`*^9, 
   3.6000802840794687`*^9}, {3.600823510848098*^9, 3.6008235167144337`*^9}, {
   3.6012090548449945`*^9, 3.6012090598194923`*^9}, {3.601209092614772*^9, 
   3.6012090941649265`*^9}},
 CellID->508431597],

Cell[TextData[{
 "Controls are provided to display the dynamics associated with each of the \
characteristic angular frequencies ",
 Cell[BoxData[
  FormBox["\[Omega]", TraditionalForm]]],
 ", for given reciprocal vector values ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 "."
}], "DetailNotes",
 CellID->122369289],

Cell[TextData[{
 "Three tabs are provided in this Demonstration. The primary tab displays the \
dynamics of the solution for particular pair of (",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "(", 
    OverscriptBox["q", "\[RightVector]"], ")"}], TraditionalForm]]],
 ") values. In that tab, selecting run for the time control will animate the \
lattice vibrations. A scaling control is provided to alter the initial \
magnitude of the eigenvectors, tantamount to picking the initial time \
boundary value constraints. Note that it is possible to select physically \
unrealistic scaling factors that allow for collisions that are not modelled \
by this system."
}], "DetailNotes",
 CellChangeTimes->{
  3.601208839708481*^9, {3.6012090601785283`*^9, 3.6012090619407043`*^9}, {
   3.601382813834156*^9, 3.601382893437709*^9}},
 CellID->476930990],

Cell[TextData[{
 "A second tab provides the dispersion relation, the dependence of angular \
velocity ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "(", 
    OverscriptBox["q", "\[RightVector]"], ")"}], TraditionalForm]]],
 " on all ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " points."
}], "DetailNotes",
 CellChangeTimes->{
  3.601209062576768*^9, {3.6013829455216885`*^9, 3.6013829491098933`*^9}},
 CellID->450664638],

Cell[TextData[{
 "Finally, a parameters tab provides controls for the spring constants ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", the primitive unit cell lattice vectors ",
 Cell[BoxData[
  RowBox[{
   OverscriptBox["a", "\[RightVector]"], ",", 
   OverscriptBox["b", "\[RightVector]"]}]], "InlineMath"],
 ", and the positions of the masses ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 " within each unit cell of the lattice. Additional mass position locators, \
up to five total, may be added or deleted by Alt-clicking on the lattice cell \
in the desired location. For mass locator removal, it is neccessary to adjust \
one of the other locators so that the remove takes effect. Note that it is \
possible to select equilibrium mass positions that are too proximate, leading \
to physically unrealistic dynamics, such as masses passing through each other."
}], "DetailNotes",
 CellChangeTimes->{{3.600966198344832*^9, 3.600966236435011*^9}, {
  3.6012090632078314`*^9, 3.6012090644089513`*^9}, {3.601382988189129*^9, 
  3.6013829971846433`*^9}},
 CellID->557416845],

Cell["\<\
Note that the total number of interactions, even when those interactions are \
restricted to just the neighboring lattice cells, increases fast as \
additional masses per cell are added. For example, with three masses per unit \
cell, considering only the neighboring and origin cells, there are 29 \
interactions possible for each mass. To simplify the physical constants \
dialog, which would get unwieldy if methods to choose from all possible \
couplings, distinct \"spring constant\" selection is only available for a \
subset of the possible interactions. This imposes the following respective \
constraints along the \"horizontal\", \"vertical\", \"NE diagonal\", and \"NW \
diagonal\" directions connecting the masses across the cells\
\>", "DetailNotes",
 CellChangeTimes->{{3.6008880438402157`*^9, 3.600888044919277*^9}, {
  3.6012090650310135`*^9, 3.6012090662031307`*^9}},
 CellID->204245605],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"0", ",", "1"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"0", ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", "0"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], ")"}]}], ",", "j"}]]}], 
   TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", "1"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], ")"}]}], ",", "j"}]]}], 
   TraditionalForm]]],
 " ."
}], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.598056894559779*^9}, {
   3.598056950150959*^9, 3.5980569832608523`*^9}, {3.598057031767627*^9, 
   3.598057031774627*^9}, {3.598057330464711*^9, 3.598057446094325*^9}, {
   3.59805756332403*^9, 3.5980575811080475`*^9}, {3.5980576945015335`*^9, 
   3.5980577077462907`*^9}, {3.5980585058849416`*^9, 3.598058539899887*^9}, {
   3.5982726803130836`*^9, 3.598272680323084*^9}, {3.598396857147249*^9, 
   3.598396862212539*^9}, 3.5983970077038608`*^9, {3.5986527341628847`*^9, 
   3.598652736497018*^9}, {3.599142949402369*^9, 3.599142973472746*^9}, {
   3.599144400390361*^9, 3.5991444194934535`*^9}, {3.599144544232588*^9, 
   3.599144772358636*^9}, {3.5991448024383564`*^9, 3.599144812883954*^9}, {
   3.599996318317963*^9, 3.599996379259449*^9}, {3.600076492258809*^9, 
   3.600076523646064*^9}, {3.6000766422374725`*^9, 3.600076689224755*^9}, {
   3.6000767765225077`*^9, 3.6000772270044994`*^9}, {3.6000776433692303`*^9, 
   3.6000781070644455`*^9}, {3.60007816099374*^9, 3.600078188605788*^9}, {
   3.60007853087039*^9, 3.6000790980561857`*^9}, {3.60007913498145*^9, 
   3.6000792378012314`*^9}, {3.6000792689076858`*^9, 3.600079283852512*^9}, {
   3.6000793585454435`*^9, 3.6000793899326982`*^9}, {3.6000794650156302`*^9, 
   3.600079471318041*^9}, {3.600887622755131*^9, 3.6008876400591207`*^9}},
 CellID->325571302],

Cell[TextData[{
 "These are labeled ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "1"], TraditionalForm]], "InlineMath"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "2"], TraditionalForm]], "InlineMath"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "3"], TraditionalForm]], "InlineMath"],
 ", and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "4"], TraditionalForm]], "InlineMath"],
 " in the parameters tab respectively. For example, the first identity above \
is the imposition of an equality constraint on the coupling constants in the \
\"left\" and \"right\" directions separating masses in neighboring \
\"horizontal\" cells (when the lattice is square). Those are the interactions \
directed primarily along the lattice vector directions ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[PlusMinus]", 
    OverscriptBox["a", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 " (primarily since these directions are also adjusted for the positions of \
the masses within the respective cells if different).",
 " ",
 "Similarly, the same coupling constants are used for each of the pairs of \
directions in the that are directed primarily along the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[PlusMinus]", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", \[PlusMinus](",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], " ", "+", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 "), \[PlusMinus](",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], " ", "-", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ") directions separating the lattice cells."
}], "DetailNotes",
 CellChangeTimes->{{3.6008880598061285`*^9, 3.600888064512398*^9}, {
  3.6012090668131914`*^9, 3.6012090675292635`*^9}},
 CellID->64527093],

Cell[TextData[{
 "When there is when there is more than mass per unit cell, distinct coupling \
constants for the intra-cell interactions between the masses within the \
origin unit cell may be selected (i.e. ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["0", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["0", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]]],
 ").",
 " ",
 "These are labeled ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "5"], TraditionalForm]], "InlineMath"],
 " in the parameters tab."
}], "DetailNotes",
 CellChangeTimes->{{3.600887684261649*^9, 3.6008876842696495`*^9}, 
   3.6008880700537148`*^9, 3.6012090681853285`*^9},
 CellID->209290908],

Cell["\<\
General theory describing oscillations around lattice equilibrium points can \
be found in:\
\>", "DetailNotes",
 CellID->30163790],

Cell["\<\
Neil W Ashcroft and N David Mermin. Solid State Physics. Holt, Rinehart and \
Winston, New York, 1976. Chapters 21, 22.\
\>", "DetailNotes",
 CellChangeTimes->{3.601209069027413*^9},
 CellID->213153736]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.600887285796858*^9},
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.600887286596904*^9},
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.6008872914131794`*^9},
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["one atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208909916481*^9}},
 CellID->476564237],

Cell["two atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208912380481*^9}},
 CellID->245358486],

Cell["n atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.6012089151324806`*^9}},
 CellID->584424833],

Cell["lattice vibration", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.6012089173234806`*^9}},
 CellID->103468090],

Cell["phonon", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208919819481*^9}},
 CellID->21953905],

Cell["reciprocal lattice vector", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208922747481*^9}},
 CellID->733906711],

Cell["angular frequency", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208922739481*^9}},
 CellID->200946478]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "RelatedLinksSection"],

Cell[TextData[ButtonBox["Analysis of Lattice Vibrations in Two Dimensions",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/\
AnalysisOfLatticeVibrationsInTwoDimensions/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/\
AnalysisOfLatticeVibrationsInTwoDimensions/"]], "RelatedLinks",
 CellChangeTimes->{{3.598398001761718*^9, 3.5983980017637177`*^9}, {
  3.5983985448847823`*^9, 3.598398544890783*^9}},
 CellID->24498121],

Cell[TextData[ButtonBox["Motion of Atoms in Crystal",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/MotionOfAtomsInCrystal/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/MotionOfAtomsInCrystal/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981123320417`*^9}, {3.5983985249356413`*^9, 
   3.5983985249386415`*^9}},
 CellID->28998832],

Cell[TextData[ButtonBox["Normal Modes in a Periodic Square Lattice",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/NormalModesInAPeriodicSquareLattice/\
"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/NormalModesInAPeriodicSquareLattice/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981127470655`*^9}, {3.5983984299812107`*^9, 
   3.598398430938265*^9}, {3.598398474839776*^9, 3.5983984748437767`*^9}},
 CellID->63968418],

Cell[TextData[ButtonBox["Simple Harmonic Motion for a Spring",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/SimpleHarmonicMotionForASpring/"], 
   None},
 ButtonNote->
  "http://demonstrations.wolfram.com/SimpleHarmonicMotionForASpring/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981127470655`*^9}, {3.5983984299812107`*^9, 
   3.5983984299832106`*^9}, {3.5983985017343144`*^9, 3.598398501741315*^9}},
 CellID->611518950]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell[TextData[{
 "Contributed by: ",
 ButtonBox["Peeter Joot",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Peeter+Joot"], 
    None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Peeter+Joot"]
}], "Author",
 CellChangeTimes->{
  3.600887159561638*^9, {3.601208952954481*^9, 3.601208952959481*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1584, 765},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ResizeImages"->{
  Cell[1879634, 33975, 312, 8, 30, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[1879949, 33985, 719, 17, 30, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "DragLocators"->{
  Cell[1880671, 34004, 381, 12, 30, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "CreateAndDeleteLocators"->{
  Cell[1881055, 34018, 680, 16, 30, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "SliderZoom"->{
  Cell[1881738, 34036, 844, 21, 30, "ControlSuggestions",
   CellTags->"SliderZoom"]},
 "GamepadControls"->{
  Cell[1882585, 34059, 369, 9, 30, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "AutomaticAnimation"->{
  Cell[1882957, 34070, 1464, 31, 30, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[1884424, 34103, 908, 21, 30, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ResizeImages", 1889672, 34255},
 {"RotateAndZoomIn3D", 1889784, 34258},
 {"DragLocators", 1889897, 34261},
 {"CreateAndDeleteLocators", 1890016, 34264},
 {"SliderZoom", 1890133, 34267},
 {"GamepadControls", 1890242, 34270},
 {"AutomaticAnimation", 1890358, 34273},
 {"BookmarkAnimation", 1890478, 34276}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 101, 1, 98, "DemoTitle"],
Cell[CellGroupData[{
Cell[705, 27, 60, 1, 365, "InitializationSection",
 InitializationCell->True],
Cell[768, 30, 116987, 2691, 14082, "Input",
 InitializationCell->True,
 CellID->454600298]
}, Open  ]],
Cell[CellGroupData[{
Cell[117792, 2726, 29, 0, 311, "ManipulateSection"],
Cell[CellGroupData[{
Cell[117846, 2730, 87686, 1839, 9730, "Input",
 CellID->106836794],
Cell[205535, 4571, 228004, 4077, 606, "Output",
 CellID->71748879]
}, Open  ]],
Cell[433554, 8651, 106, 2, 32, "Input",
 CellID->73064412]
}, Open  ]],
Cell[CellGroupData[{
Cell[433697, 8658, 36, 0, 228, "ManipulateCaptionSection"],
Cell[433736, 8660, 1155, 18, 106, "ManipulateCaption"]
}, Open  ]],
Cell[CellGroupData[{
Cell[434928, 8683, 28, 0, 229, "ThumbnailSection"],
Cell[434959, 8685, 666563, 11164, 606, "Output",
 CellID->154425715]
}, Open  ]],
Cell[CellGroupData[{
Cell[1101559, 19854, 28, 0, 189, "SnapshotsSection"],
Cell[1101590, 19856, 277177, 4908, 598, "Output",
 CellID->268709778],
Cell[1378770, 24766, 211676, 3802, 598, "Output",
 CellID->511669211],
Cell[1590449, 28570, 261039, 4602, 606, "Output",
 CellID->287208036]
}, Open  ]],
Cell[CellGroupData[{
Cell[1851525, 33177, 26, 0, 452, "DetailsSection"],
Cell[1851554, 33179, 1774, 56, 68, "DetailNotes",
 CellID->143536934],
Cell[1853331, 33237, 2521, 81, 66, "DetailNotes",
 CellID->185095190],
Cell[1855855, 33320, 1466, 42, 50, "DetailNotes",
 CellID->413013362],
Cell[1857324, 33364, 1371, 44, 74, "DetailNotes",
 CellID->160232404],
Cell[1858698, 33410, 2874, 70, 55, "DetailNotes",
 CellID->323301769],
Cell[1861575, 33482, 2355, 64, 76, "DetailNotes",
 CellID->72937650],
Cell[1863933, 33548, 1327, 32, 72, "DetailNotes",
 CellID->69846009],
Cell[1865263, 33582, 3782, 100, 59, "DetailNotes",
 CellID->508431597],
Cell[1869048, 33684, 375, 11, 29, "DetailNotes",
 CellID->122369289],
Cell[1869426, 33697, 958, 21, 68, "DetailNotes",
 CellID->476930990],
Cell[1870387, 33720, 488, 15, 29, "DetailNotes",
 CellID->450664638],
Cell[1870878, 33737, 1332, 30, 96, "DetailNotes",
 CellID->557416845],
Cell[1872213, 33769, 914, 14, 86, "DetailNotes",
 CellID->204245605],
Cell[1873130, 33785, 3421, 94, 38, "DetailNotes",
 CellID->325571302],
Cell[1876554, 33881, 1908, 51, 93, "DetailNotes",
 CellID->64527093],
Cell[1878465, 33934, 733, 21, 58, "DetailNotes",
 CellID->209290908],
Cell[1879201, 33957, 141, 4, 28, "DetailNotes",
 CellID->30163790],
Cell[1879345, 33963, 212, 5, 28, "DetailNotes",
 CellID->213153736]
}, Open  ]],
Cell[CellGroupData[{
Cell[1879594, 33973, 37, 0, 168, "ControlSuggestionsSection"],
Cell[1879634, 33975, 312, 8, 30, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[1879949, 33985, 719, 17, 30, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[1880671, 34004, 381, 12, 30, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[1881055, 34018, 680, 16, 30, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[1881738, 34036, 844, 21, 30, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[1882585, 34059, 369, 9, 30, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[1882957, 34070, 1464, 31, 30, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[1884424, 34103, 908, 21, 30, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1885369, 34129, 30, 0, 208, "SearchTermsSection"],
Cell[1885402, 34131, 174, 3, 28, "SearchTerms",
 CellID->476564237],
Cell[1885579, 34136, 174, 3, 28, "SearchTerms",
 CellID->245358486],
Cell[1885756, 34141, 174, 3, 28, "SearchTerms",
 CellID->584424833],
Cell[1885933, 34146, 179, 3, 28, "SearchTerms",
 CellID->103468090],
Cell[1886115, 34151, 165, 3, 28, "SearchTerms",
 CellID->21953905],
Cell[1886283, 34156, 185, 3, 28, "SearchTerms",
 CellID->733906711],
Cell[1886471, 34161, 177, 3, 28, "SearchTerms",
 CellID->200946478]
}, Open  ]],
Cell[CellGroupData[{
Cell[1886685, 34169, 31, 0, 188, "RelatedLinksSection"],
Cell[1886719, 34171, 468, 10, 28, "RelatedLinks",
 CellID->24498121],
Cell[1887190, 34183, 486, 11, 28, "RelatedLinks",
 CellID->28998832],
Cell[1887679, 34196, 575, 12, 28, "RelatedLinks",
 CellID->63968418],
Cell[1888257, 34210, 564, 12, 28, "RelatedLinks",
 CellID->611518950]
}, Open  ]],
Cell[CellGroupData[{
Cell[1888858, 34227, 25, 0, 188, "AuthorSection"],
Cell[1888886, 34229, 384, 11, 28, "Author"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
