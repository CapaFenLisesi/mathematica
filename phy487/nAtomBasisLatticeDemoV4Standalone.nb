(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    660710,      13049]
NotebookOptionsPosition[    660206,      13029]
NotebookOutlinePosition[    660549,      13044]
CellTagsIndexPosition[    660506,      13041]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{
     "glConstMinSquaredDistanceFromOrigin", ",", 
      "glConstMinAngleBetweenLatticeVectors", ",", "glConstLocDefault", ",", 
      "glConstDefaultMass", ",", "glConstKDefaults", ",", "glConstKMin", ",", 
      "glConstKMax", ",", "glConstMMax", ",", "glConstWindowHalfWidth", ",", 
      "glConstSpringColors", ",", "glConstPrimaryDisplaySize", ",", 
      "glConstTextDisplayOffsetHack", ",", "glConstNeighboringCellIndexes", 
      ",", "glConstSpringColorsByN"}], "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"glConstMinSquaredDistanceFromOrigin", " ", "=", " ", "0.1"}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstMinAngleBetweenLatticeVectors", "=", 
     RowBox[{"Pi", "/", "6"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstLocDefault", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.1", ",", "1.3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1.9", ",", "0.8"}], "}"}]}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstDefaultMass", "=", "20"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKDefaults", "=", 
     RowBox[{"{", 
      RowBox[{"0.25", ",", "0.25", ",", "0.25", ",", "0.25", ",", "0.25"}], 
      "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKMin", "=", "0.05"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKMax", "=", "1"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstMMax", "=", "30"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstWindowHalfWidth", "=", "3"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstSpringColors", "=", 
     RowBox[{"Darker", "@", 
      RowBox[{"{", 
       RowBox[{
       "Orange", ",", "Green", ",", "Purple", ",", "Cyan", ",", "Yellow"}], 
       "}"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstPrimaryDisplaySize", "=", 
     RowBox[{"{", 
      RowBox[{"380", ",", "380"}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstTextDisplayOffsetHack", "=", 
     RowBox[{"{", 
      RowBox[{"0.25", ",", "0.25"}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstNeighboringCellIndexes", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], "}"}], "\[Rule]", 
       RowBox[{"RGBColor", "[", "...", "]"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"-", "1"}]}], "}"}], "\[Rule]", 
       RowBox[{"RGBColor", "[", "...", "]"}]}], ",", " ", "..."}], "}"}], 
    "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"glConstSpringColorsByN", " ", "=", " ", 
     RowBox[{"DeleteDuplicates", "@", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"s", " ", 
            RowBox[{
             RowBox[{"Append", "[", 
              RowBox[{"glConstNeighboringCellIndexes", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
           RowBox[{"glConstSpringColors", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"s", ",", " ", 
            RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",", 
          " ", 
          RowBox[{"{", 
           RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", "1"}], 
       "]"}]}]}], " ", ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{"Future", " ", "possible", " ", "maintainance", " ", 
     RowBox[{"TODOs", ":", "\[IndentingNewLine]", GridBox[{
        {
         RowBox[{
          RowBox[{
          "implement", " ", "a", " ", "min", " ", "separation", " ", "for", 
           " ", "the", " ", "equilibrium", " ", "mass", " ", "positions", " ",
            "too", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
             "as", " ", "done", " ", "for", " ", "the", " ", "lattice", " ", 
              "vectors"}], ")"}], ".", " ", "\[IndentingNewLine]", 
            "Trickier"}]}], ",", " ", 
          RowBox[{
          "since", " ", "that", " ", "should", " ", "be", " ", "based", " ", 
           "on", " ", "the", " ", "separations", " ", "in", " ", "the", " ", 
           "origin", " ", "cell"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{
          "and", " ", "not", " ", "the", " ", "obsolute", " ", "separations", 
           " ", "of", " ", "the", " ", 
           RowBox[{"locators", ".", "\[IndentingNewLine]", "Even"}], " ", 
           "if", " ", "that", " ", "is", " ", "done"}], ",", " ", 
          RowBox[{"that", " ", 
           RowBox[{"doesn", "'"}], "t", " ", "mean", " ", "that", " ", "the", 
           " ", "scaling", " ", 
           RowBox[{"won", "'"}], "t", " ", "allow", " ", "for", " ", 
           "overlap", " ", "in", " ", "the", " ", "dynamic", " ", 
           RowBox[{"tab", "."}]}]}]},
        {
         RowBox[{
         "would", " ", "be", " ", "cool", " ", "to", " ", "make", " ", "qLoc",
           " ", "a", " ", "pair", " ", "of", " ", "Locators", " ", 
          RowBox[{"that", ":", "\[IndentingNewLine]", " ", 
           RowBox[{
           "trace", " ", "out", " ", "constrained", " ", "positions", " ", 
            "along", " ", "the", " ", "2", " ", "Pi", " ", "scaled", " ", 
            "reciprocal", " ", "lattice", " ", 
            RowBox[{"vectors", ".", "\[IndentingNewLine]", 
             RowBox[{"(", 
              RowBox[{
              "returning", " ", "the", " ", "distance", " ", "from", " ", 
               "the", " ", "origin", " ", "of", " ", "each", " ", "of", " ", 
               "those", " ", "locators"}], ")"}]}]}]}]}]},
        {
         RowBox[{"a", " ", "message", " ", "box", " ", "on", " ", "user", " ", 
          RowBox[{"error", ":", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"-", " ", "when"}], " ", "an", " ", "angle", " ", "or", 
            " ", "distance", " ", "from", " ", "origin", " ", "change", " ", 
            "has", " ", "driven", " ", "a", " ", "reset", " ", "of", " ", 
            "the", " ", "lattice", " ", 
            RowBox[{"vectors", ".", "\[IndentingNewLine]", 
             RowBox[{"-", " ", "when"}]}], " ", "too", " ", "many", " ", "of",
             " ", "the", " ", "locators", " ", "have", " ", "been", " ", 
            "deleted", " ", "and", " ", "a", " ", "forced", " ", "reset", " ",
             "to", " ", "the", " ", "defaults", " ", 
            RowBox[{"occurs", "."}]}]}]}]},
        {
         RowBox[{
          RowBox[{"some", " ", "of", " ", 
           RowBox[{"the", " ", "::", "usage"}]}], " ", "=", " ", 
          RowBox[{
          "\"\<\>\"", " ", "strings", " ", "are", " ", "now", " ", "out", " ",
            "of", " ", "date"}]}]},
        {
         RowBox[{
          RowBox[{
          "usage", " ", "strings", " ", "could", " ", "probably", " ", "now", 
           " ", "be", " ", "un"}], "-", " ", "commented", "-", 
          RowBox[{
           RowBox[{"out", ".", "  ", "\[IndentingNewLine]", "Will"}], " ", 
           "that", " ", "re"}], "-", 
          RowBox[{
          "introduce", " ", "the", " ", "problems", " ", "on", " ", 
           "submission", " ", "that", " ", "were", " ", "seen", " ", "when", 
           " ", "the", " ", "usage", " ", "strings", " ", "were", " ", "in", 
           " ", "the", " ", "Initiialzation", " ", 
           RowBox[{"block", "?"}]}]}]},
        {
         RowBox[{
         "Can", " ", "the", " ", "frequency", " ", "qPlaneLoc", " ", 
          "LocatorPane", " ", "look", " ", "more", " ", "like", " ", 
          "Slider2D", " ", "in", " ", "the", " ", "dynamics", " ", "tab", " ",
           "for", " ", 
          RowBox[{"consistency", "?"}]}]},
        {
         RowBox[{
          RowBox[{
          "Am", " ", "using", " ", "a", " ", "calculated", " ", "value", " ", 
           "for", " ", "the", " ", "max", " ", "freq", " ", "for", " ", "the",
            " ", "freq", " ", "plot", " ", "intersection", " ", 
           RowBox[{"plane", ".", " ", "\[IndentingNewLine]", "Hardcoded"}], 
           " ", "this", " ", "to", " ", "magic", " ", "#", " ", 
           RowBox[{"that", "'"}], "s", " ", "out", " ", "of", " ", "the", " ",
            "graphic", " ", 
           RowBox[{"(", "23", ")"}]}], ",", " ", 
          RowBox[{
          "but", " ", "that", " ", "could", " ", "be", " ", "wrong", " ", 
           "for", " ", "some", " ", "params"}]}]},
        {
         RowBox[{
          RowBox[{
          "Scaling", " ", "of", " ", "the", " ", "masses", " ", "ended", " ", 
           "up", " ", "different", " ", "for", " ", "the", " ", "dynPlot", 
           " ", 
           RowBox[{"vs", ".", " ", "parameters"}], " ", 
           RowBox[{"tab", ".", " ", "\[IndentingNewLine]", "Hacked"}], " ", 
           "the", " ", "dynPlot", " ", "scaling", " ", "for", " ", "now"}], 
          ",", " ", 
          RowBox[{"to", " ", "be", " ", "a", " ", "bit", " ", 
           RowBox[{"closer", "."}]}]}]}
       },
       GridBoxDividers->{
        "Columns" -> {True, {False}, True}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{True}}, "RowsIndexed" -> {}}]}]}], "\[IndentingNewLine]",
     "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "checkAgainstRange", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"checkAgainstRange", "::", "usage"}], " ", "=", " ", 
      "\"\<This is to deal with InputForm Manipulators, that allow \
non-numeric values to be passed, or values that exceed the range specified in \
the Manipulator.\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkAgainstRange", "[", 
      RowBox[{
      "v_", ",", "default_", ",", "lowerLimit_", ",", " ", "upperLimit_"}], 
      "]"}], " ", ":=", " ", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"NumberQ", "[", "v", "]"}], ",", "v", ",", " ", 
           "default"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"result", " ", "<=", " ", "upperLimit"}], ",", " ", 
           "result", ",", "default"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"result", " ", ">=", " ", "lowerLimit"}], ",", " ", 
           "result", ",", "default"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "result"}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "springPoints", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Based", " ", "on", " ", "my", " ", "ListLinePlot", " ", "answer", " ", 
     "posted", " ", 
     RowBox[{"in", ":", " ", 
      ButtonBox[
       RowBox[{
        RowBox[{"http", ":"}], "//", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
           "a"}], "/", "37228"}], "/", "10"}]}],
       BaseStyle->"Hyperlink",
       ButtonData->{
         URL["http://mathematica.stackexchange.com/a/37228/10"], None},
       ButtonNote->"http://mathematica.stackexchange.com/a/37228/10"]}]}], 
    " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"springPoints", "::", "usage"}], " ", "=", " ", 
      "\"\<springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]\>\""}], " ", ";"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"springPoints", "[", " ", 
      RowBox[{"a12_List", ",", " ", 
       RowBox[{"n_Integer:", "8"}], ",", 
       RowBox[{"h_:", ".05"}], ",", " ", 
       RowBox[{"f_:", " ", "0.1"}]}], " ", "]"}], " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "a1", ",", " ", "a2", ",", " ", "n1", ",", " ", "springDiff", ",", 
         " ", "nd", ",", " ", "r", ",", " ", "r1"}], " ", "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a1", ",", " ", "a2"}], "}"}], " ", "=", " ", "a12"}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"n1", " ", "=", " ", 
         RowBox[{"Norm", "[", "a1", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"springDiff", " ", "=", " ", 
         RowBox[{"a2", " ", "-", " ", "a1"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nd", " ", "=", " ", 
         RowBox[{"Norm", "[", "springDiff", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", " ", "=", " ", 
         RowBox[{"RotationMatrix", "[", 
          RowBox[{"ArcTan", " ", "@@", "  ", "springDiff"}], " ", "]"}]}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"r1", " ", "=", " ", 
         RowBox[{"r", " ", ".", " ", 
          RowBox[{"{", 
           RowBox[{"n1", ",", " ", "0"}], "}"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", " ", 
                 RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                 RowBox[{"t", " ", 
                  RowBox[{"(", 
                   RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}]}], ",", " ", 
                RowBox[{"h", " ", 
                 RowBox[{"Sin", "[", " ", 
                  RowBox[{"2", " ", "Pi", " ", "n", " ", "t"}], "]"}]}]}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", " ", 
                 RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}], " ", "+", " ", 
                 RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", 
                 RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}]}], "\[IndentingNewLine]", "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "indexLabel", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"indexLabel", "::", "usage"}], " ", "=", " ", 
      "\"\<\!\(\*SubscriptBox[\(k\), \(\(i\)\(\\\ \)\)]\)(or other character) \
in italic. indexLabel['k', 1]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"indexLabel", " ", "=", " ", 
     RowBox[{
      RowBox[{"Subscript", "[", 
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{"#1", ",", "Italic"}], "]"}], ",", " ", "#2"}], "]"}], " ", 
      "&"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "kLable", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"kLable", "::", "usage"}], " ", "=", " ", 
      "\"\<\!\(\*SubscriptBox[\(k\), \(\(i\)\(\\\ \)\)]\)(or other character) \
in italic and colored by spring index. kLable[k]\>\""}], " ", ";"}], 
    "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"kLable", " ", "=", " ", 
     RowBox[{
      RowBox[{"Style", "[", " ", 
       RowBox[{
        RowBox[{"indexLabel", "[", 
         RowBox[{"\"\<k\>\"", ",", " ", "#"}], "]"}], ",", " ", 
        RowBox[{"FontColor", "\[Rule]", 
         RowBox[{"glConstSpringColors", "[", 
          RowBox[{"[", "#", "]"}], "]"}]}]}], " ", "]"}], " ", "&"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "massColors", " ", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"massColors", " ", ":=", " ", 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Darker", "[", 
         RowBox[{"{", " ", 
          RowBox[{
          "Blue", ",", " ", "Green", ",", " ", "Purple", ",", " ", "Red", ",",
            " ", "Orange"}], " ", "}"}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"Mod", "[", 
           RowBox[{"#", ",", " ", "5"}], "]"}], " ", "+", " ", "1"}], "]"}], 
        " ", "]"}], " ", "&"}], " ", ")"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "massLabel", " ", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"massLabel", " ", ":=", " ", 
     RowBox[{
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{"indexLabel", "[", 
         RowBox[{"\"\<m\>\"", ",", " ", "#"}], "]"}], ",", " ", 
        RowBox[{"massColors", "[", "#", "]"}]}], "]"}], " ", "&"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcLineTable", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcLineTable", "[", " ", 
      RowBox[{"n_List", ",", " ", "b_List", ",", " ", "i_List"}], " ", "]"}], 
     " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"first", ",", " ", "second"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"first", ",", " ", "second"}], "}"}], " ", "=", " ", "i"}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Line", "[", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"-", 
                RowBox[{"n", "[", 
                 RowBox[{"[", "first", "]"}], "]"}]}], 
               RowBox[{"b", "[", 
                RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
              RowBox[{"j", " ", 
               RowBox[{"b", "[", 
                RowBox[{"[", "second", "]"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"n", "[", 
                RowBox[{"[", "first", "]"}], "]"}], 
               RowBox[{"b", "[", 
                RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
              RowBox[{"j", " ", 
               RowBox[{"b", "[", 
                RowBox[{"[", "second", "]"}], "]"}]}]}]}], "}"}], " ", 
           "\[IndentingNewLine]", "]"}], " ", "\[IndentingNewLine]", ",", " ", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", 
            RowBox[{"-", 
             RowBox[{"n", "[", 
              RowBox[{"[", "second", "]"}], "]"}]}], ",", " ", 
            RowBox[{"n", "[", 
             RowBox[{"[", "second", "]"}], "]"}]}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcReciprocalBasis", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"calcReciprocalBasis", "::", "usage"}], " ", "=", " ", 
      "\"\<Return a reciprocal frame basis for a set of vectors.  This \
doesn't include the 2 \[Pi] scaling that is common in solid state physics.  \
Example, displaying the desired Kronicker delta behaviour:\n\nb = \
{{2,1},{-1/4, 2}} ;\ng = calcReciprocalBasis[ b ] ;\n\n{g[[1]].loc[[1]],\
\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].loc[[1]],\
\[IndentingNewLine]g[[2]].loc[[2]]}\n\>\""}], " ", ";"}], 
    "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcReciprocalBasis", "[", "loc_List", "]"}], " ", ":=", " ", 
     RowBox[{"Inverse", "[", " ", 
      RowBox[{"Transpose", "[", " ", "loc", " ", "]"}], " ", "]"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "pointsTable", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"pointsTable", "[", " ", 
      RowBox[{
      "mPosFirstCell_List", ",", " ", "latticeBasis_List", ",", " ", 
       "numberLatticeLinesToDisplay_List"}], " ", "]"}], " ", ":=", " ", 
     RowBox[{"Table", "[", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"mPosFirstCell", " ", "+", " ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", "j"}], "}"}], ".", " ", "latticeBasis"}]}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", 
         RowBox[{"-", 
          RowBox[{"numberLatticeLinesToDisplay", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ",", 
         RowBox[{"numberLatticeLinesToDisplay", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", " ", 
         RowBox[{"-", 
          RowBox[{"numberLatticeLinesToDisplay", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
         RowBox[{"numberLatticeLinesToDisplay", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "nMassesFromLocArray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"nMassesFromLocArray", "[", "uLoc_", "]"}], " ", ":=", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Dimensions", "[", "uLoc", "]"}], " ", "//", " ", "First"}], 
        ")"}], " ", "-", "2"}], ")"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "adjustedmoSel", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"adjustedmoSel", "[", 
      RowBox[{"rNumM_", ",", "mOrigInd_", ",", "m1Ind_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"rNumM", ">", "2"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", " ", 
        RowBox[{
         RowBox[{"mOrigInd", "\[Equal]", "m1Ind"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"First", "[", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Range", "[", "rNumM", "]"}], ",", "m1Ind"}], "]"}], 
          "]"}], ",", "\[IndentingNewLine]", "mOrigInd"}], " ", 
        "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"First", "@", 
        RowBox[{"Delete", "[", 
         RowBox[{
          RowBox[{"Range", "[", "2", "]"}], ",", "m1Ind"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "constructKArrayElements", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"constructKArrayElements", "[", " ", 
      RowBox[{"i_Integer", ",", " ", "j_Integer"}], "  ", "]"}], " ", ":=", 
     " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "a", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"a", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "j", ",", " ", 
                RowBox[{"s", " ", 
                 RowBox[{"glConstNeighboringCellIndexes", "[", 
                  RowBox[{"[", "n", "]"}], "]"}]}]}], "}"}], " ", "\[Rule]", 
              " ", 
              RowBox[{"glConstKDefaults", "[", 
               RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"s", ",", " ", 
               RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",",
              " ", 
             RowBox[{"{", 
              RowBox[{"n", ",", " ", "4"}], "}"}]}], " ", "]"}], ",", " ", 
           "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"i", " ", "<", " ", "j"}], ",", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"a", ",", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"i", ",", "j", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "}"}], " ", "\[Rule]", " ", 
             RowBox[{"glConstKDefaults", "[", 
              RowBox[{"[", "5", "]"}], "]"}]}]}], "]"}], ",", " ", "a"}], " ",
          "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "constructKArray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"constructKArray", "[", " ", "r_Integer", " ", "]"}], " ", ":=", 
     " ", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"constructKArrayElements", "[", 
          RowBox[{"i", ",", "j"}], "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "r"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"j", ",", "r"}], "}"}]}], "]"}], ",", " ", "2"}], "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnAlteredKArrayElements", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnAlteredKArrayElements", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", 
       "ni_Integer", ",", "v_"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"kA", "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"glConstNeighboringCellIndexes", "[", 
               RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "_"}], "]"}], 
          "\[RuleDelayed]", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"glConstNeighboringCellIndexes", "[", 
               RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "v"}], "]"}]}], 
         ",", 
         RowBox[{
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"-", 
               RowBox[{"glConstNeighboringCellIndexes", "[", 
                RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "_"}], "]"}],
           "\[RuleDelayed]", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"-", 
               RowBox[{"glConstNeighboringCellIndexes", "[", 
                RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "v"}], 
           "]"}]}]}], "}"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnAlteredKarrayOriginElement", "]"}], ";"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnAlteredKarrayOriginElement", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer", ",", "v_"}], 
      "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "m1oSet", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"m1oSet", "=", 
         RowBox[{"Append", "[", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"kA", "/.", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Rule", "[", 
            RowBox[{"m1oSet", ",", "_"}], "]"}], "\[RuleDelayed]", 
           RowBox[{"Rule", "[", 
            RowBox[{"m1oSet", ",", "v"}], "]"}]}], ")"}]}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "selectVFromKarray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"To", " ", "refresh", " ", "k1"}], ",", "k2", ",", "k3", ",", 
     RowBox[{
     "k4", " ", "after", " ", "changing", " ", "m1Sel", " ", "or", " ", 
      RowBox[{"m2Sel", "."}]}]}], "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"selectVFromKarray", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", 
       "ni_Integer"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m1Ind", ",", "m2Ind", ",", 
         RowBox[{"glConstNeighboringCellIndexes", "[", 
          RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], "/.", "kA"}], ")"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "selectOriginVFromKarray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "To", " ", "refresh", " ", "k5", " ", "after", " ", "changing", " ", 
     "m1Sel", " ", "and", " ", "moSel"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"selectOriginVFromKarray", "[", 
      RowBox[{"kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer"}], "]"}], 
     ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"Sort", "[", 
          RowBox[{"{", 
           RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "/.", "kA"}], ")"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnKarrayForAdditionalMassIndex", "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnKarrayForAdditionalMassIndex", "[", " ", 
      RowBox[{"kA_List", ",", "nmNew_Integer"}], " ", "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "k2", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"k2", " ", "=", " ", 
         RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"constructKArrayElements", "[", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], ")"}], "/@",
             " ", 
            RowBox[{"(", 
             RowBox[{"Select", "[", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"Table", "[", " ", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", " ", "nmNew"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"j", ",", " ", "nmNew"}], "}"}]}], "]"}], ",", 
                 " ", "1"}], "]"}], ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"Max", "[", "#", "]"}], " ", "\[Equal]", " ", 
                 "nmNew"}], " ", "&"}]}], "]"}], ")"}]}], ",", " ", "2"}], 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"kArray", ",", " ", "k2"}], "]"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"kA", ",", " ", "k2"}], "}"}], ",", " ", "1"}], "]"}]}]}], 
      " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "resetLatticeVectorsIfAngleTooSmall", "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
      RowBox[{"uLoc_List", ",", "minAngle_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "t", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"t", " ", "=", " ", 
         RowBox[{"Abs", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{
            RowBox[{"Normalize", "[", 
             RowBox[{"uLoc", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", ".", " ", 
            RowBox[{"Normalize", "[", 
             RowBox[{"uLoc", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}], "]"}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"t", " ", ">", " ", 
            RowBox[{"Pi", "/", "2"}]}], ",", " ", 
           RowBox[{"Pi", "-", "t"}], ",", " ", "t"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", " ", 
         RowBox[{
          RowBox[{"t", " ", "<", " ", "minAngle"}], ",", 
          "\[IndentingNewLine]", "glConstLocDefault", ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"uLoc", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
            RowBox[{"uLoc", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "locDependent", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"locDependent", "::", "usage"}], " ", "=", " ", 
      "\"\<Locator dependent calculations (i.e. based on the mass positions \
and the unit cell basis vectors)\n\nExample:\n\nlocDependent[{1/2,1}, \
{1,1/2}, {{0.1,0.2} + {1/2,1} + {1,1/2}, {0.3, 0.5} - {1/2,1} - {1,1/2}}]\n\n\
Will see: {0.1,0.2}, {0.3, 0.5} ; as the mPosFirstCell values.\n\>\""}], " ", 
     ";"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"locDependent", "[", " ", 
      RowBox[{"uLoc_List", ",", "numMasses_Integer", ",", " ", "rma_List"}], 
      " ", "]"}], "  ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "m", ",", "latticeBasis", ",", " ", "numberLatticeLinesToDisplay", 
         ",", "reciprocalBasis", ",", "mObliqueComponents", ",", " ", 
         "mPosFirstCell", ",", " ", "reciprocalNorms"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"latticeBasis", " ", "=", 
         RowBox[{"Take", "[", 
          RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"m", " ", "=", " ", 
         RowBox[{"Drop", "[", 
          RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"numberLatticeLinesToDisplay", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Ceiling", "[", "  ", 
             RowBox[{"Abs", "[", 
              RowBox[{"glConstWindowHalfWidth", "/", " ", 
               RowBox[{
                RowBox[{"latticeBasis", "[", 
                 RowBox[{"[", "#", "]"}], "]"}], "[", 
                RowBox[{"[", "#", "]"}], "]"}]}], "]"}], "]"}], " ", "&"}], 
           " ", "/@", " ", 
           RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"reciprocalBasis", " ", "=", " ", 
         RowBox[{
         "calcReciprocalBasis", "[", " ", "latticeBasis", " ", "]"}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"reciprocalNorms", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Norm", "[", 
             RowBox[{"reciprocalBasis", "[", 
              RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
           " ", 
           RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"mObliqueComponents", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"m", "[", 
             RowBox[{"[", " ", "i", " ", "]"}], "]"}], " ", ".", " ", 
            RowBox[{"reciprocalBasis", "[", 
             RowBox[{"[", " ", "j", " ", "]"}], "]"}]}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numMasses"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"j", ",", " ", "2"}], "}"}]}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"mPosFirstCell", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"m", "[", 
              RowBox[{"[", "#", "]"}], "]"}], " ", "-", " ", 
             RowBox[{
              RowBox[{"Floor", "[", 
               RowBox[{"mObliqueComponents", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", ".", " ", 
              "latticeBasis"}]}], " ", ")"}], " ", "&"}], " ", "/@", " ", 
          RowBox[{"Range", "[", "numMasses", "]"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<mScalarArray\>\"", " ", "\[Rule]", " ", "rma"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<numberOfMasses\>\"", " ", "\[Rule]", " ", "numMasses"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<latticeBasis\>\"", " ", "\[Rule]", " ", "latticeBasis"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<latticeNorms\>\"", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Norm", "[", 
               RowBox[{"latticeBasis", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
             " ", 
             RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<latticeUnitVectors\>\"", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Normalize", "[", 
               RowBox[{"latticeBasis", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
             " ", 
             RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<numberLatticeLinesToDisplay\>\"", "\[Rule]", " ", 
           "numberLatticeLinesToDisplay"}], ",", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<reciprocalBasis\>\"", "\[Rule]", " ", "reciprocalBasis"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{
          "\"\<reciprocalNorms\>\"", "\[Rule]", " ", "reciprocalNorms"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{"\"\<qMaxVec\>\"", " ", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{"2", " ", "Pi", " ", "reciprocalNorms"}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<mObliqueComponents\>\"", "\[Rule]", " ", 
           "mObliqueComponents"}], ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<mPosFirstCell\>\"", "\[Rule]", " ", "mPosFirstCell"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<pointsDataTable\>\"", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"pointsTable", "[", 
                RowBox[{
                 RowBox[{"mPosFirstCell", "[", 
                  RowBox[{"[", "#", "]"}], "]"}], ",", "latticeBasis", ",", 
                 "numberLatticeLinesToDisplay"}], "]"}], ")"}], " ", "&"}], "/@",
              " ", 
             RowBox[{"Range", "[", "numMasses", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<lineTable\>\"", " ", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"calcLineTable", "[", " ", 
               RowBox[{
               "numberLatticeLinesToDisplay", ",", " ", "latticeBasis", ",", 
                " ", "#"}], " ", "]"}], " ", "&"}], " ", "/@", " ", 
             RowBox[{"Permutations", "[", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ")"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\n", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "projOpU", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"projOpU", "[", "v_List", "]"}], " ", ":=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "^", "2"}], ",", " ", 
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], 
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], 
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "^", "2"}]}], "}"}]}], "}"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"projOp", "::", "usage"}], " ", "=", " ", 
      "\"\<given an input vector \!\(\*OverscriptBox[\(v\), \
\(\[RightVector]\)]\) = {\!\(\*SubscriptBox[\(v\), \(x\)]\), \
\!\(\*SubscriptBox[\(v\), \(y\)]\)}, compute the projection matrix operator \
along the unit vector in that direction.\n\n   projOp[{1, 0}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"1\", \"0\"},
{\"0\", \"0\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{0, 1}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"0\", \"0\"},
{\"0\", \"1\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{a,b}] // MatrixForm = \!\
\(\*Cell[TextData[Cell[BoxData[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{
FractionBox[
SuperscriptBox[\"a\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]},
{
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
SuperscriptBox[\"b\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}]],
CellChangeTimes->{{3.5990911441851797`*^9, 3.599091144641206*^9}, \
3.5990913830438423`*^9, 3.5990915191646276`*^9, 3.599091555028679*^9, \
3.599091735722014*^9, {3.599091916353346*^9, 3.599091928988068*^9}}]]]\)\n\
\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "projOp", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"projOp", "[", "v_List", "]"}], " ", ":=", " ", 
     RowBox[{
      RowBox[{"projOpU", "[", "v", "]"}], "/", 
      RowBox[{"(", 
       RowBox[{"v", ".", " ", "v"}], ")"}]}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "relativeDifferences", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"relativeDifferences", "::", "usage"}], " ", "=", " ", 
      "\"\<Example: relativeDifferences[ {aLoc,bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}}\>\""}], ",", " ", 
     RowBox[{
      RowBox[{
      "is", " ", "a", " ", "tuple", " ", "for", " ", "the", " ", "spring", 
       " ", "constant", " ", "between", " ", "m1", " ", "in", " ", "the", " ",
        "origin", " ", "cell", " ", "to", " ", "m2", " ", "in", " ", "the", 
       " ", "lattice", " ", "cell", " ", 
       RowBox[{"{", 
        RowBox[{"n1", ",", "n2"}], "}"}]}], " ", ";"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"relativeDifferences", "[", " ", 
      RowBox[{"r_List", ",", "mp_List", ",", " ", 
       RowBox[{"{", 
        RowBox[{
        "mIndex1_Integer", ",", " ", "mIndex2_Integer", ",", " ", "n_List"}], 
        "}"}]}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "d", ",", " ", "pOrigin", ",", " ", "pOther", ",", " ", "dn"}], "}"}],
        ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"pOrigin", " ", "=", " ", 
         RowBox[{"mp", "[", 
          RowBox[{"[", " ", "mIndex1", " ", "]"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"pOther", " ", "=", " ", 
         RowBox[{
          RowBox[{"mp", "[", 
           RowBox[{"[", " ", "mIndex2", " ", "]"}], "]"}], "+", " ", 
          RowBox[{"n", " ", ".", " ", "r"}]}]}], "  ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"d", " ", "=", " ", 
         RowBox[{"pOther", " ", "-", " ", "pOrigin"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dn", " ", "=", " ", 
         RowBox[{"d", " ", ".", "d"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"dn", ",", " ", "pOrigin", ",", " ", "pOther", ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"projOpU", "[", "d", "]"}], "/", "dn"}], "  ", 
           RowBox[{"(*", 
            RowBox[{"//", " ", "MatrixForm"}], "*)"}], ")"}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calculateCouplings", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"calculateCouplings", "::", "usage"}], " ", "=", " ", 
      "\"\<Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions.\>\""}], 
     " ", ";"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calculateCouplings", "[", 
      RowBox[{"ld_List", ",", " ", "kA_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "t", ",", " ", "t1", ",", " ", "t2", ",", " ", "r", ",", " ", "mp", 
         ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"r", ",", " ", "mp", ",", " ", "numberOfMasses"}], "}"}], 
         " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", " ", "\"\<mPosFirstCell\>\"", ",", 
            " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}],
         " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Append", "[", 
            RowBox[{"#", ",", " ", 
             RowBox[{"relativeDifferences", "[", 
              RowBox[{"r", ",", " ", "mp", ",", " ", 
               RowBox[{"First", "[", "#", "]"}]}], "]"}]}], " ", "]"}], "&"}],
           "/@", " ", 
          RowBox[{"(", 
           RowBox[{"kA", "/.", " ", 
            RowBox[{"Rule", " ", "\[Rule]", " ", "List"}]}], ")"}]}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "}"}], ",", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "3", "]"}], "]"}]}], "}"}], ",", " ", "1"}], 
            "]"}], " ", "&"}], "/@", " ", "t"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"t1", " ", "=", " ", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Select", "[", " ", 
               RowBox[{"t", ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                    "i"}], ")"}], " ", "&&", " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "\[NotEqual]", " ", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0"}], "}"}]}], ")"}]}], " ", 
                 "&"}]}], "]"}], ")"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "[", 
                RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
           "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{"t", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "3", "]"}], "]"}], " ", "==", " ", 
             RowBox[{"{", 
              RowBox[{"0", ",", " ", "0"}], "}"}]}], " ", "&"}]}], "]"}]}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "rest", " ", "of", " ", "the", " ", 
          RowBox[{"permutations", ":"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"t2", ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", " ", 
                   RowBox[{"Drop", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}]}], "}"}], ",", " ", 
                 "1"}], "]"}], " ", "&"}], "/@", " ", "t2"}]}], "}"}], ",", 
           " ", "1"}], "]"}]}], "  ", ";", "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Select", "[", " ", 
               RowBox[{"t2", ",", " ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                   "i"}], ")"}], " ", "&"}]}], "]"}], ")"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "[", 
                RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
           "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"t2", ",", " ", "t1"}], "}"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "spScaled", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"spScaled", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"s1_List", ",", "s2_List"}], "}"}], ",", " ", "scaleKValue_", 
       ",", " ", "referenceSepSquared_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "ds", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ds", " ", "=", " ", 
         RowBox[{"s2", " ", "-", " ", "s1"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"springPoints", "[", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2"}], "}"}], ",", 
          RowBox[{"Ceiling", "[", 
           RowBox[{"12", " ", "scaleKValue", " ", 
            RowBox[{"Sqrt", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"ds", ".", "ds"}], ")"}], "/", "referenceSepSquared"}],
              "]"}]}], "]"}]}], " ", "]"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "plotSprings", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"plotSprings", "::", "usage"}], " ", "=", " ", 
      "\"\<Example:\n\nModule[{parameterLocatorDependencies},\
\[IndentingNewLine]parameterLocatorDependencies = locDependent[{1/2,1}, \
{1,1/2}, {{0.1,1.2} + {1/2,1} + {1,1/2}, {1.3, 0.5} - {1/2,1} - {1,1/2}}] ;\
\[IndentingNewLine]plotSprings[{10,20}, parameterLocatorDependencies ] \
\[IndentingNewLine]]\n\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"plotSprings", "[", 
      RowBox[{
      "uLoc_List", ",", " ", "ld_List", ",", "cd_List", ",", "m1Ind_Integer", 
       ",", " ", "m2Ind_Integer", ",", " ", "moInd_Integer"}], "]"}], " ", ":=",
      " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "aLoc", ",", " ", "bLoc", ",", "mLoc", ",", "pointsList", ",", 
         "latticeBasis", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
         " ", "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
         "cOrigin", ",", " ", "cN", ",", " ", "g", ",", " ", "mScalarArray", 
         ",", " ", "numberOfMasses", ",", " ", "scaleLoc"}], "}"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"latticeBasis", " ", "=", " ", 
         RowBox[{"Take", "[", " ", 
          RowBox[{"uLoc", ",", " ", "2"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"aLoc", " ", "=", " ", 
         RowBox[{"uLoc", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"bLoc", " ", "=", " ", 
         RowBox[{"uLoc", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"scaleLoc", " ", "=", " ", 
         RowBox[{
          RowBox[{"aLoc", ".", "aLoc"}], "  ", "+", " ", 
          RowBox[{"bLoc", " ", ".", "bLoc"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "mLoc", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
           "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
           "mScalarArray", ",", " ", "numberOfMasses"}], "}"}], "=", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<mPosFirstCell\>\"", ",", "\"\<reciprocalBasis\>\"", ",", 
            "\"\<pointsDataTable\>\"", ",", 
            "\"\<numberLatticeLinesToDisplay\>\"", ",", " ", 
            "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", " ", 
            "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}], " ",
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pointsList", "[", "n_Integer", "]"}], " ", ":=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"massColors", "[", "n", "]"}], ",", "\[IndentingNewLine]", 
           ",", 
           RowBox[{"PointSize", "[", 
            RowBox[{"Sqrt", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"mScalarArray", "[", 
                RowBox[{"[", "n", "]"}], "]"}], "/", "glConstMMax"}], "/", 
              "500"}], "]"}], "]"}], "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Point", "[", " ", "#", " ", "]"}], " ", "&"}], " ", "/@",
             " ", 
            RowBox[{"pointsDataTable", "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{"Text", "[", 
            RowBox[{
             RowBox[{"massLabel", "[", " ", "n", "]"}], ",", 
             RowBox[{
              RowBox[{"mLoc", "[", 
               RowBox[{"[", "n", "]"}], "]"}], " ", "+", " ", 
              "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
          "\[IndentingNewLine]", "}"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"cOrigin", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"cd", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", " ", 
             RowBox[{"{", 
              RowBox[{"m1Ind", ",", " ", "moInd"}], "}"}]}], " ", "&"}]}], 
          " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"cN", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"cd", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "[", 
            RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
             RowBox[{"{", 
              RowBox[{"m1Ind", ",", " ", "m2Ind"}], "}"}]}], "&"}]}], " ", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"g", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"spScaled", "[", 
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"{", 
                  RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", " ", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "4", "]"}], "]"}], "/", "glConstKMax"}], ",", 
               " ", "scaleLoc"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", "&"}],
           "/@", " ", "cN"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"numberOfMasses", " ", ">", " ", "1"}], ",", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"g", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"spScaled", "[", 
                 RowBox[{
                  RowBox[{"Take", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", " ", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], "/", "glConstKMax"}], ",",
                   " ", "scaleLoc"}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
                "\[IndentingNewLine]", 
                RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                   "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", 
              "&"}], "/@", " ", "cOrigin"}]}], "]"}], ","}], " ", "]"}], " ", 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Graphics", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{"lines", "\[IndentingNewLine]", ",", "Blue", ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"reciprocalBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                   RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]", 
                  ",", "Thick", ",", 
                  RowBox[{"Arrowheads", "[", "0.05", "]"}], 
                  "\[IndentingNewLine]", ",", "Red", ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"latticeBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                   RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]", 
                  ",", 
                  RowBox[{"Text", "[", 
                   RowBox[{
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"aLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}], 
                  "\[IndentingNewLine]", ",", 
                  RowBox[{"Text", "[", 
                   RowBox[{
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"bLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
                 "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"pointsList", "[", "#", "]"}], " ", "&"}], "/@", 
                 " ", 
                 RowBox[{"Range", "[", "numberOfMasses", "]"}]}]}], 
               "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", 
             ",", 
             RowBox[{"PlotRange", " ", "\[Rule]", " ", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", 
                  " ", "glConstWindowHalfWidth"}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", 
                  " ", "glConstWindowHalfWidth"}], "}"}]}], "}"}]}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}]}], 
            "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "g"}], 
          "\[IndentingNewLine]", "}"}], " ", "]"}]}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "oneTermOfdynamicsMatrix", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     FormBox[
      RowBox[{" ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"grab", " ", "data", " ", 
          RowBox[{"from", ":", " ", "rawArrayOfMasses"}]}], ",", " ", 
         "parameterLocatorDependencies", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"couplingData", "[", 
             RowBox[{"[", "_", "]"}], "]"}], "[", 
            RowBox[{"[", "_", "]"}], "]"}], "[", 
           RowBox[{"[", "_", "]"}], "]"}], " ", "=", " ", 
          RowBox[{"{", 
           RowBox[{"k", ",", " ", "j", ",", " ", 
            OverscriptBox["m", "\[RightVector]"], ",", " ", 
            SubscriptBox["K", 
             RowBox[{
              OverscriptBox["n", "\[RightVector]"], ",", 
              RowBox[{"k", ";", 
               OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], ",", " ", 
            SuperscriptBox[
             SubscriptBox[
              OverscriptBox["a", "\[RightVector]"], 
              RowBox[{
               OverscriptBox["m", "\[RightVector]"], ",", 
               RowBox[{"j", ";", 
                OverscriptBox["0", "\[RightVector]"]}], ",", "k"}]], "2"], 
            ",", " ", 
            SubscriptBox[
             OverscriptBox["p", "\[RightVector]"], "k"], ",", " ", 
            RowBox[{
             SubscriptBox[
              OverscriptBox["r", "\[RightVector]"], 
              OverscriptBox["m", "\[RightVector]"]], " ", "+", " ", 
             SubscriptBox[
              OverscriptBox["p", "\[RightVector]"], "j"]}], ",", " ", 
            SubscriptBox["Proj", 
             SubscriptBox[
              OverscriptBox["a", "\[RightVector]"], 
              RowBox[{
               OverscriptBox["m", "\[RightVector]"], ",", 
               RowBox[{"j", ";", 
                OverscriptBox["0", "\[RightVector]"]}], ",", "k"}]]]}], 
           "}"}]}]}], "\[IndentingNewLine]", 
        RowBox[{"ex", ":", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", "0.5`", ",", "1.`", 
           ",", 
           RowBox[{"{", 
            RowBox[{"0.9`", ",", "0.7`"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.30000000000000004`", ",", 
             RowBox[{"-", "0.10000000000000009`"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.36`", ",", "0.48`"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.48`", ",", "0.6400000000000001`"}], "}"}]}], "}"}]}],
           "}"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "to", " ", "form", " ", "equations", " ", "of", " ", "the", " ", 
          RowBox[{"form", ":", "\[IndentingNewLine]", 
           RowBox[{
            SuperscriptBox["\[Omega]", "2"], " ", 
            RowBox[{
             SubscriptBox[
              OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
             OverscriptBox["q", "\[RightVector]"], ")"}]}]}]}], " ", "=", " ", 
         RowBox[{
          UnderscriptBox["\[Sum]", 
           RowBox[{
            OverscriptBox["0", "\[RightVector]"], ",", 
            RowBox[{"k", " ", "\[NotEqual]", " ", 
             OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
          RowBox[{
           SubscriptBox["K", 
            RowBox[{
             OverscriptBox["0", "\[RightVector]"], ",", 
             RowBox[{"k", ";", 
              OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
           SubscriptBox["Proj", 
            SubscriptBox[
             OverscriptBox["a", "^"], 
             RowBox[{
              OverscriptBox["n", "\[RightVector]"], ",", 
              RowBox[{"k", ";", 
               OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
           RowBox[{"(", 
            RowBox[{
             FractionBox[
              RowBox[{
               SubscriptBox[
                OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
               OverscriptBox["q", "\[RightVector]"], ")"}], 
              SubscriptBox["m", "k"]], "-", " ", 
             RowBox[{
              FractionBox[
               RowBox[{
                SubscriptBox[
                 OverscriptBox["\[Epsilon]", "\[RightVector]"], "j"], "(", 
                OverscriptBox["q", "\[RightVector]"], ")"}], 
               SqrtBox[
                RowBox[{
                 SubscriptBox["m", "k"], 
                 SubscriptBox["m", "j"]}]]], 
              SuperscriptBox["e", 
               RowBox[{"I", " ", 
                RowBox[{"(", 
                 RowBox[{
                  SubscriptBox[
                   OverscriptBox["r", "\[RightVector]"], 
                   OverscriptBox["m", "\[RightVector]"]], " ", ".", " ", 
                  OverscriptBox["q", "\[RightVector]"]}], " ", ")"}]}]]}]}], 
            ")"}]}]}]}]}]}],
      TraditionalForm], "\[IndentingNewLine]", "Note", " ", "that", " ", 
     "qVec", " ", "here", " ", "is", " ", "intended", " ", "to", " ", "be", 
     " ", "an", " ", "undefined", " ", 
     RowBox[{"global", ".", "  ", "Is"}], " ", "there", " ", "a", " ", "way", 
     " ", "to", " ", "do", " ", "that", " ", 
     RowBox[{"programatically", "?"}]}], "\[IndentingNewLine]", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"oneTermOfdynamicsMatrix", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "k_Integer", ",", " ", "j_Integer", ",", " ", "mVec_List", ",", " ", 
         "kS_", ",", " ", "_", ",", "_", ",", "_", ",", "proj_List"}], "}"}], 
       ",", " ", "r_List", ",", " ", "mk_", ",", " ", "epsilon_List", ",", 
       " ", "mA_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"(", 
      RowBox[{"kS", " ", 
       RowBox[{"proj", "  ", ".", 
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"epsilon", "[", 
            RowBox[{"[", "k", "]"}], "]"}], "/", "mk"}], " ", "-", " ", 
          RowBox[{
           RowBox[{"epsilon", "[", 
            RowBox[{"[", "j", "]"}], "]"}], 
           RowBox[{
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{"I", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"mVec", " ", ".", " ", "r"}], ")"}], ".", " ", 
                 "qVec"}], ")"}]}], ")"}]}], "/", 
            RowBox[{"Sqrt", "[", " ", 
             RowBox[{"mk", " ", 
              RowBox[{"mA", "[", 
               RowBox[{"[", "j", "]"}], "]"}]}], " ", "]"}]}]}]}], ")"}]}]}], 
      "  ", ")"}]}], "  ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "dynamicsMatrix", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dynamicsMatrix", "[", 
      RowBox[{"ld_List", ",", " ", "cd_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "cdFlatAndSorted", ",", " ", "r", ",", " ", "res", ",", " ", 
         "epsilon", ",", " ", "m", ",", "mScalarArray", ",", " ", 
         "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"cdFlatAndSorted", " ", "=", " ", 
         RowBox[{"SplitBy", "[", " ", 
          RowBox[{
           RowBox[{"Sort", "@", 
            RowBox[{"Flatten", "[", 
             RowBox[{"cd", ",", " ", "2"}], "]"}]}], " ", ",", " ", "First"}],
           " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"r", ",", "mScalarArray", ",", " ", "numberOfMasses"}], 
          "}"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", 
            " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}],
         " ", ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"Here", " ", 
            SubscriptBox[
             OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], " ", 
            RowBox[{"(", 
             RowBox[{"=", 
              RowBox[{"epsilon", "[", 
               RowBox[{"[", "k", "]"}], "]"}]}], ")"}], " ", "is", " ", 
            "represented", " ", "as", " ", "a", " ", "2", "x", 
            RowBox[{"(", 
             RowBox[{"2", "N"}], ")"}], " ", "matrix", " ", "with", " ", 
            "the", " ", "vector", " ", "factored", " ", 
            RowBox[{"out", ".", "  ", "For"}], " ", "example", " ", "with", 
            " ", "N"}], " ", "=", " ", "3"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox[
            OverscriptBox["\[Epsilon]", "\[RightVector]"], "1"], "=", " ", 
           RowBox[{
            RowBox[{
             TagBox[
              RowBox[{"(", "\[NoBreak]", GridBox[{
                 {"1", "0", "0", "0", "0", "0"},
                 {"0", "1", "0", "0", "0", "0"}
                },
                
                GridBoxAlignment->{
                 "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                  "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                  "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
              Function[BoxForm`e$, 
               MatrixForm[BoxForm`e$]]], "\[IndentingNewLine]", 
             "\[IndentingNewLine]", "This", " ", "will", " ", "be", " ", 
             "pre"}], "-", 
            RowBox[{
            "multiplied", " ", "by", " ", "a", " ", "2", "x2", " ", 
             "projection", " ", 
             RowBox[{"matrix", ".", "\[IndentingNewLine]", "The"}], " ", 
             "whole", " ", "thing", " ", "should", " ", "be", " ", 
             "logically", " ", "treated", " ", "as", " ", "if", " ", "it", 
             " ", "is", " ", "post"}], "-", 
            RowBox[{
            "multiplied", " ", "by", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", Cell[TextData[Cell[BoxData[
              TagBox[
               RowBox[{"(", "\[NoBreak]", GridBox[{
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "2"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "2"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "2"}]]}
                 },
                 
                 GridBoxAlignment->{
                  "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                   "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                   "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
               Function[BoxForm`e$, 
                MatrixForm[BoxForm`e$]]]],
              
              CellChangeTimes->{{3.600871330362259*^9, 
               3.6008713538916054`*^9}}]]]}]}]}]}], "\[IndentingNewLine]", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"epsilon", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{
           RowBox[{"IdentityMatrix", "[", " ", 
            RowBox[{"2", " ", "numberOfMasses"}], " ", "]"}], ",", "2"}], 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"res", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Table", "[", " ", 
             RowBox[{
              RowBox[{"Total", "@", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"oneTermOfdynamicsMatrix", "[", 
                   RowBox[{"#", ",", " ", "r", ",", " ", 
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", " ", "epsilon", ",", 
                    " ", "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
                 RowBox[{"(", 
                  RowBox[{"cdFlatAndSorted", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ")"}]}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], "]"}], " ",
             "//", " ", "Flatten"}], ",", " ", 
           RowBox[{"2", " ", "numberOfMasses"}]}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"res", " ", "/.", " ", 
          RowBox[{"qVec", " ", "\[Rule]", " ", "#"}]}], " ", "&"}]}]}], " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{"cdFlatAndSorted", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{"mScalarArray", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{
         RowBox[{
          RowBox[{"oneTermOfdynamicsMatrix", "[", 
           RowBox[{"#", ",", " ", "r", ",", " ", 
            RowBox[{"mScalarArray", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", " ", 
            "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"cdFlatAndSorted", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", "res"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", "epsilon"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"oneTermOfdynamicsMatrix", "[", " ", 
            RowBox[{
            "parameterLocatorDependencies", ",", " ", "couplingData"}], " ", 
            "]"}], "[", 
           RowBox[{"#", ",", " ", "r", ",", 
            RowBox[{"mScalarArray", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", 
            "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"cd", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcDynamics", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"calcDynamics", "::", "usage"}], " ", "=", " ", 
      "\"\<a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\
\!\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of \
the system eigenvalues, when evaluated at qLoc\>\""}], " ", ";"}], 
    "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcDynamics", "[", "mAtQ_List", "]"}], " ", ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Sqrt", "[", 
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Eigensystem", "[", " ", "mAtQ", " ", "]"}], " ", "//", " ", 
         "Transpose"}], ")"}]}], ")"}]}], "  ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "showDynamics", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showDynamics", "[", 
      RowBox[{
      "ld_List", ",", " ", "dynAtOmegaIndex_List", ",", " ", "sc_", ",", " ", 
       "ql_"}], "]"}], " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "pointsDataTable", ",", "numberLatticeLinesToDisplay", ",", " ", "e", 
         ",", " ", "omega", ",", " ", "points", ",", " ", "lines", ",", " ", 
         "nu", ",", " ", "a", ",", "b", ",", " ", "mScalarArray", ",", " ", 
         "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a", ",", " ", "b"}], "}"}], ",", "pointsDataTable", ",", 
           "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
           "mScalarArray", ",", " ", "numberOfMasses"}], "}"}], "=", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", "\"\<pointsDataTable\>\"", ",", 
            "\"\<numberLatticeLinesToDisplay\>\"", ",", " ", 
            "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", " ", 
            "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}], " ",
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"omega", ",", " ", "e"}], "}"}], " ", "=", " ", 
         "dynAtOmegaIndex"}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"e", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{"e", ",", "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"points", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"pointsDataTable", "[", 
              RowBox[{"[", "k", "]"}], "]"}], " ", "+", " ", 
             RowBox[{"Table", "[", " ", "\[IndentingNewLine]", " ", 
              RowBox[{
               RowBox[{"sc", " ", 
                RowBox[{"Re", "[", 
                 RowBox[{
                  RowBox[{"e", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], " ", 
                  RowBox[{"E", "^", 
                   RowBox[{"(", 
                    RowBox[{"I", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    RowBox[{"ql", " ", ".", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"a", " ", "i"}], " ", "+", " ", 
                    RowBox[{"b", " ", "j"}]}], ")"}]}], " ", "-", " ", 
                    RowBox[{"omega", " ", "#"}]}], ")"}]}], ")"}]}]}], " ", 
                 "]"}]}], "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", " ", 
                 RowBox[{"-", 
                  RowBox[{"numberLatticeLinesToDisplay", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                 RowBox[{"numberLatticeLinesToDisplay", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], "}"}], 
               "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{"j", ",", " ", 
                 RowBox[{"-", 
                  RowBox[{"numberLatticeLinesToDisplay", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                 RowBox[{"numberLatticeLinesToDisplay", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], 
              "\[IndentingNewLine]", "]"}]}], " ", "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"k", ",", "numberOfMasses"}], "}"}]}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"nu", " ", "=", " ", 
         RowBox[{"2", " ", "Pi", " ", 
          RowBox[{"If", "[", " ", 
           RowBox[{
            RowBox[{"omega", " ", "\[Equal]", " ", "0"}], ",", " ", "1", ",", 
            " ", 
            RowBox[{"1", "/", "omega"}]}], "]"}]}]}], " ", ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Show", "[", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"ListPlot", "[", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"points", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], "[", 
                  RowBox[{"nu", " ", "#"}], "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", 
                    " ", "glConstWindowHalfWidth"}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", 
                    " ", "glConstWindowHalfWidth"}], "}"}]}], "}"}]}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{
                 "ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], 
                 "\[IndentingNewLine]", ",", " ", 
                 RowBox[{"PlotStyle", "\[Rule]", 
                  RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"PointSize", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "/", "glConstMMax"}], "/",
                     "350"}], "]"}], "]"}], ",", 
                    RowBox[{"massColors", "[", "k", "]"}]}], "]"}]}]}], 
                "\[IndentingNewLine]", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"k", ",", "numberOfMasses"}], "}"}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Graphics", "[", 
              RowBox[{
              "{", "\[IndentingNewLine]", "lines", "\[IndentingNewLine]", 
               "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], " ", 
          "&"}], ")"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "frequencyPlotCalc", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"frequencyPlotCalc", "::", "usage"}], " ", "=", " ", 
      "\"\<frequencyPlotCalc[ parameterLocatorDependencies, matrix, meshSize]\
\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"frequencyPlotCalc", "[", 
      RowBox[{"ld_List", ",", "m_", ",", "meshSz_Integer"}], "]"}], " ", ":=",
      " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "eigTable2D", ",", " ", "eigTable1D", ",", " ", "qMax", ",", " ", 
         "omegaPointList2D", ",", " ", "omegaPointList1D", ",", " ", "range", 
         ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"qMax", ",", " ", "numberOfMasses"}], "}"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<qMaxVec\>\"", ",", "\"\<numberOfMasses\>\""}], "}"}], 
          " ", "/.", " ", "ld"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"eigTable2D", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Re", "[", 
            RowBox[{"Table", "[", "  ", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"qx", ",", " ", "qy"}], "}"}], " ", ",", 
                RowBox[{"Eigenvalues", "[", " ", 
                 RowBox[{
                  RowBox[{"m", "[", " ", 
                   RowBox[{"{", 
                    RowBox[{"qx", ",", " ", "qy"}], "}"}], "  ", "]"}], " ", "//",
                   " ", "N"}], " ", "]"}]}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"qx", ",", " ", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"qMax", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "/", " ", "meshSz"}]}], 
               "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"qy", ",", " ", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"qMax", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "/", " ", "meshSz"}]}], 
               "}"}]}], " ", "]"}], " ", "]"}], ",", "1"}], "]"}]}], " ", ";",
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"omegaPointList2D", "[", "nn_", "]"}], " ", ":=", "  ", 
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"Sqrt", "[", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
               RowBox[{"[", "nn", "]"}], "]"}]}], "}"}], "]"}], "&"}], "/@", 
          " ", "eigTable2D"}]}], "  ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"range", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"2", " ", "numberOfMasses"}], ")"}], " ", "//", " ", 
           "Range"}], ")"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"ListPlot3D", "[", " ", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"omegaPointList2D", "[", "#", "]"}], " ", "&"}], "/@", 
           " ", "range"}], ",", " ", 
          RowBox[{"PlotRange", " ", "\[Rule]", " ", "Full"}], " ", ",", " ", 
          RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], ",", 
          RowBox[{"AxesLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<\!\(\*SubscriptBox[\(q\), \(x\)]\)\>\"", ",", " ", 
             "\"\<\!\(\*SubscriptBox[\(q\), \(y\)]\)\>\""}], "}"}]}]}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", " ", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "showFreqPlot", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"showFreqPlot", "[", " ", 
     RowBox[{"qPlaneLoc", ",", " ", "freqPlot"}], " ", "]"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showFreqPlot", "[", 
      RowBox[{"qpl_List", ",", " ", "freqPlotData_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"aa", ",", " ", "bb"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"aa", ",", " ", "bb"}], "}"}], " ", "=", "  ", "qpl"}], " ",
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{"{", 
          RowBox[{"freqPlotData", ",", "\[IndentingNewLine]", 
           RowBox[{"Graphics3D", "[", " ", 
            RowBox[{"Polygon", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", 
               "  ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}]}], "}"}],
              "]"}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.601384568255503*^9, 3.6013846068957133`*^9}, {
   3.601384697696907*^9, 3.6013847654097795`*^9}, 3.601385370746403*^9, {
   3.601385703897458*^9, 3.6013858671947985`*^9}, {3.6013859369007854`*^9, 
   3.6013862565130663`*^9}, {3.601386287618845*^9, 3.601386609852276*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"tick", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"Dynamic", "@", 
     RowBox[{"(", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", " ", "[", " ", 
        RowBox[{"bInitDefaults", ",", 
         RowBox[{"(", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"u", " ", "=", " ", 
            RowBox[{"Flatten", "[", " ", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], "}"}], 
              ",", " ", "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
            RowBox[{"locDependent", "[", " ", 
             RowBox[{
             "u", ",", " ", "rawNumberOfMasses", ",", "rawArrayOfMasses"}], 
             " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
           RowBox[{"kArray", " ", "=", " ", 
            RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", "n", "}"}], ",", 
             RowBox[{
              RowBox[{"n", " ", "=", " ", "2"}], " ", ";", 
              RowBox[{"While", "[", 
               RowBox[{
                RowBox[{"n", "\[LessEqual]", "rawNumberOfMasses"}], ",", 
                RowBox[{
                 RowBox[{"kArray", " ", "=", " ", 
                  RowBox[{"returnKarrayForAdditionalMassIndex", "[", 
                   RowBox[{"kArray", ",", "n"}], "]"}]}], " ", ";", " ", 
                 RowBox[{"n", "++"}]}]}], "]"}]}]}], " ", "]"}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"qLoc", " ", "=", " ", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
              "\"\<qMaxVec\>\"", " ", "/.", " ", 
               "parameterLocatorDependencies"}], ")"}], "/", "2"}]}], " ", 
           ";", "\[IndentingNewLine]", 
           RowBox[{"qPlaneLoc", " ", "=", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"couplingData", " ", "=", " ", 
            RowBox[{"calculateCouplings", "[", " ", 
             RowBox[{"parameterLocatorDependencies", ",", " ", "kArray"}], 
             " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"bRefreshMatrix", ":", " ", 
              RowBox[{"dependent", " ", "on"}], ":", " ", 
              "parameterLocatorDependencies"}], ",", " ", "couplingData"}], 
            " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"matrix", " ", "=", " ", 
            RowBox[{"dynamicsMatrix", "[", " ", 
             RowBox[{
             "parameterLocatorDependencies", ",", " ", "couplingData"}], " ", 
             "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"bRefreshDynamics", ":", " ", 
              RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
             "qLoc", ","}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"dynamics", " ", "=", " ", 
            RowBox[{"calcDynamics", "[", " ", 
             RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}]}], 
           " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"bRefreshDynPlot", ":", " ", 
              RowBox[{"dependent", " ", "on", " ", "dynamics"}]}], ",", " ", 
             "omegaIndex", ",", " ", "scale"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"dynPlot", " ", "=", " ", 
            RowBox[{"showDynamics", "[", " ", 
             RowBox[{"parameterLocatorDependencies", ",", " ", 
              RowBox[{"dynamics", "[", 
               RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale", 
              ",", " ", "qLoc"}], " ", "]"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"bRefreshFreqPlot", ":", " ", 
              RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
             "meshSize"}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"freqPlot", " ", "=", " ", 
            RowBox[{"frequencyPlotCalc", "[", " ", 
             RowBox[{
             "parameterLocatorDependencies", ",", " ", "matrix", ",", " ", 
              "meshSize"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"bInitDefaults", " ", "=", " ", "False"}], " ", ";"}], 
          "\[IndentingNewLine]", ")"}], ","}], "]"}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", " ", 
        RowBox[{
         RowBox[{"tabNumber", " ", "\[Equal]", " ", "dynTab"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", " ", 
            RowBox[{"bRefreshMatrix", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"matrix", " ", "=", " ", 
                RowBox[{"dynamicsMatrix", "[", " ", 
                 RowBox[{
                 "parameterLocatorDependencies", ",", " ", "couplingData"}], 
                 " ", "]"}]}], " ", ";", 
               RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
               RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";", 
               " ", 
               RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
              ")"}], ","}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", " ", 
            RowBox[{"bRefreshDynamics", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"dynamics", " ", "=", " ", 
                RowBox[{"calcDynamics", "[", " ", 
                 RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}]}],
                " ", ";", 
               RowBox[{"bRefreshDynamics", " ", "=", " ", "False"}], " ", ";", 
               RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}]}], ")"}], 
             ","}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", " ", 
            RowBox[{"bRefreshDynPlot", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"dynPlot", " ", "=", " ", 
                RowBox[{"showDynamics", "[", " ", 
                 RowBox[{"parameterLocatorDependencies", ",", " ", 
                  RowBox[{"dynamics", "[", 
                   RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale",
                   ",", " ", "qLoc"}], " ", "]"}]}], " ", ";", 
               RowBox[{"bRefreshDynPlot", " ", "=", " ", "False"}]}], ")"}], 
             ","}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"dynPlot", "[", "tau", "]"}]}], " ", "\[IndentingNewLine]",
           ")"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"Plot", "[", 
           RowBox[{"x", ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "*)"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"tabNumber", " ", "\[Equal]", " ", "freqTab"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", " ", 
              RowBox[{"bRefreshMatrix", ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"matrix", " ", "=", " ", 
                  RowBox[{"dynamicsMatrix", "[", " ", 
                   RowBox[{
                   "parameterLocatorDependencies", ",", " ", "couplingData"}],
                    " ", "]"}]}], " ", ";", 
                 RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
                 RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", 
                 ";", " ", 
                 RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
                ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
             RowBox[{"If", "[", " ", 
              RowBox[{"bRefreshFreqPlot", ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"freqPlot", " ", "=", " ", 
                  RowBox[{"frequencyPlotCalc", "[", " ", 
                   RowBox[{
                   "parameterLocatorDependencies", ",", " ", "matrix", ",", 
                    " ", "meshSize"}], "]"}]}], " ", ";", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{"Beep", "[", "]"}], " ", ";"}], "*)"}], 
                 RowBox[{"bRefreshFreqPlot", " ", "=", " ", "False"}]}], " ", 
                ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
             RowBox[{"showFreqPlot", "[", " ", 
              RowBox[{"qPlaneLoc", ",", " ", "freqPlot"}], " ", "]"}]}], 
            "\[IndentingNewLine]", 
            RowBox[{"(*", "freqPlot", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", "matrix", "*)"}], "\[IndentingNewLine]", ")"}], 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"Plot", "[", 
             RowBox[{
              RowBox[{"-", "x"}], ",", 
              RowBox[{"{", 
               RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "*)"}], 
           "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{"(*", "couplingLocator", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"LocatorPane", "[", " ", 
            RowBox[{
             RowBox[{"Dynamic", "[", 
              RowBox[{"u", ",", 
               RowBox[{
                RowBox[{"(", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"u", " ", "=", " ", 
                   RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], "<", "3"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Flatten", "[", " ", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], 
                    "}"}], ",", " ", "1"}], "]"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    "cap", " ", "the", " ", "number", " ", "of", " ", 
                    "Locators", " ", "at", " ", "5"}], ",", " ", 
                    RowBox[{
                    "so", " ", "the", " ", "selection", " ", "Pane", " ", 
                    RowBox[{"doesn", "'"}], "t", " ", "start", " ", 
                    "truncating", " ", 
                    RowBox[{"the", " ", "'"}], "to", " ", 
                    RowBox[{"neighbouring", "'"}], " ", "SetterBar"}]}], " ", 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"If", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], " ", ">", " ", "7"}], ",", " ", 
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", "7"}], "]"}], ",", " ", "#"}], "]"}]}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Module", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"rm", ",", "km"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"rm", " ", "=", " ", 
                    RowBox[{"First", "@", 
                    RowBox[{"Dimensions", "[", "rawArrayOfMasses", "]"}]}]}], 
                    " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"If", " ", "[", 
                    RowBox[{
                    RowBox[{"rm", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "rawArrayOfMasses"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"rawArrayOfMasses", " ", "=", " ", 
                    RowBox[{"Take", "[", " ", 
                    RowBox[{"rawArrayOfMasses", ",", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "rawArrayOfMasses", " ", "if", " ", 
                    "required"}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"rm", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{
                    "rawArrayOfMasses", ",", " ", "glConstDefaultMass"}], 
                    "]"}], " ", ";", " ", 
                    RowBox[{"rm", "++"}]}]}], " ", "]"}]}], 
                    "\[IndentingNewLine]", "]"}], " ", ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"km", " ", "=", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], " ", "//", " ", 
                    "Max"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", " ", "[", 
                    RowBox[{
                    RowBox[{"km", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "kArray"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"Select", "[", 
                    RowBox[{"kArray", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "\[LessEqual]", "  ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], "&"}], 
                    ")"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "kArray", " ", "if", " ", "required"}], 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"km", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"km", "++"}], " ", ";", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnKarrayForAdditionalMassIndex", "[", 
                    RowBox[{"kArray", ",", "km"}], "]"}]}]}]}], " ", "]"}]}], 
                    " ", "\[IndentingNewLine]", "]"}]}]}], 
                   "\[IndentingNewLine]", "]"}], " ", ";", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                    "lattice", " ", "vector", " ", "end", " ", "points", " ", 
                    "to", " ", "be", " ", "too", " ", "close", " ", "to", " ",
                     "the", " ", "origin"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", 
                   RowBox[{"If", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "<", " ", 
                    "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                    RowBox[{"glConstLocDefault", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", 
                   RowBox[{"If", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ".", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], " ", "<", " ", 
                    "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                    RowBox[{"glConstLocDefault", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                    "angle", " ", "between", " ", "lattice", " ", "vectors", 
                    " ", "get", " ", "too", " ", "small"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], " ", "=", " ", 
                   RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
                    RowBox[{
                    "u", ",", " ", " ", 
                    "glConstMinAngleBetweenLatticeVectors"}], " ", "]"}]}], 
                  " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"rawNumberOfMasses", " ", "=", " ", 
                   RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", ";",
                   "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                   "These", " ", "are", " ", "in", " ", "case", " ", "the", 
                    " ", "number", " ", "of", " ", "locators", " ", "were", 
                    " ", "changed", " ", "and", " ", "we", " ", "have", " ", 
                    "a", " ", "mass", " ", "selected", " ", "that", " ", "is",
                     " ", "now", " ", 
                    RowBox[{"invalid", "."}]}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"m1Sel", " ", "=", " ", 
                   RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"m1Sel", " ", ">", "rawNumberOfMasses"}], ",", 
                    " ", "1", ",", " ", "m1Sel"}], "]"}]}], " ", ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"m2Sel", " ", "=", " ", 
                   RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"m2Sel", " ", ">", "rawNumberOfMasses"}], ",", 
                    " ", "1", ",", " ", "m2Sel"}], "]"}]}], " ", ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"moSel", " ", "=", " ", 
                   RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"moSel", " ", ">", "rawNumberOfMasses"}], ",", 
                    " ", "1", ",", " ", "moSel"}], " ", "]"}]}], " ", ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"moSel", " ", "=", " ", 
                   RowBox[{"adjustedmoSel", "[", " ", 
                    RowBox[{
                    "rawNumberOfMasses", ",", " ", "moSel", ",", " ", 
                    "m1Sel"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{
                    "Adjust", " ", "these", " ", "for", " ", "Slider", " ", 
                    "display", " ", "in", " ", "case", " ", "m1Sel"}], ",", 
                    " ", "m2Sel", ",", " ", 
                    RowBox[{
                    "or", " ", "moSel", " ", "were", " ", "changed", " ", 
                    "just", " ", 
                    RowBox[{"above", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"k1", " ", "=", " ", 
                   RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                  RowBox[{"k2", " ", "=", " ", 
                   RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                  RowBox[{"k3", " ", "=", " ", 
                   RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                  RowBox[{"k4", " ", "=", " ", 
                   RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                  RowBox[{"k5", " ", "=", " ", 
                   RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                  "\[IndentingNewLine]", 
                  RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
                   RowBox[{"locDependent", "[", " ", 
                    RowBox[{
                    "u", ",", " ", "rawNumberOfMasses", ",", 
                    "rawArrayOfMasses"}], " ", "]"}]}], " ", ";", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"Reset", " ", "in", " ", "case", " ", "a"}], ",", 
                    RowBox[{"or", " ", "b", " ", "changed"}], ",", " ", 
                    RowBox[{
                    "and", " ", "the", " ", "last", " ", "selected", " ", 
                    "value", " ", "is", " ", "now", " ", "out", " ", "of", 
                    " ", 
                    RowBox[{"range", "."}]}]}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"qLoc", " ", "=", " ", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", "/.", "parameterLocatorDependencies"}],
                     " ", ")"}], "/", "2"}]}], "  ", ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"qPlaneLoc", " ", "=", " ", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"couplingData", " ", "=", " ", 
                   RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                  "\[IndentingNewLine]", 
                  RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", ";",
                   "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"tick", "=", 
                   RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
              "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"Why", " ", 
                RowBox[{"doesn", "'"}], "t", " ", "Alt"}], "-", 
               RowBox[{
               "click", " ", "to", " ", "remove", " ", "existing", " ", 
                "Locator", " ", "refresh", " ", "this", " ", 
                RowBox[{"plot", "?", "  ", 
                 RowBox[{"Workaround", ":", " ", 
                  RowBox[{
                  "move", " ", "one", " ", "of", " ", "the", " ", "other", 
                   " ", "locators", " ", "to", " ", "refresh"}]}]}]}]}], " ", 
              "*)"}], "\[IndentingNewLine]", 
             RowBox[{"plotSprings", "[", 
              RowBox[{
              "u", ",", " ", "parameterLocatorDependencies", ",", 
               "couplingData", ",", "m1Sel", ",", " ", "m2Sel", ",", " ", 
               "moSel"}], "]"}], " ", ",", "\[IndentingNewLine]", 
             RowBox[{"LocatorAutoCreate", "\[Rule]", "True"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
            "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", " ", 
          "]"}]}], "]"}]}], " ", 
      RowBox[{"(*", 
       RowBox[{"If", ",", "If"}], "*)"}], "\[IndentingNewLine]", ")"}]}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "0", "*)"}], "\[IndentingNewLine]", ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Dynamic", "@", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"k5manip", ",", 
        RowBox[{"TabView", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<dynamics\>\"", " ", "\[Rule]", "  ", 
             RowBox[{"Column", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "dynTab"}], " ", ";", 
               RowBox[{"(*", "dynamicsControls", "*)"}], 
               RowBox[{"{", " ", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Row", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"OverVector", "[", "\"\<q\>\"", "]"}], ",", 
                    "\[IndentingNewLine]", "\"\< = \>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "qm", "}"}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"qm", " ", "=", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", "  ", "/.", 
                    "parameterLocatorDependencies"}], ")"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Slider2D", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"qLoc", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"qLoc", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", 
                    RowBox[{"(*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.01", ",", "0.01"}], "}"}], ",", " ", "qm"}], 
                    "}"}], "*)"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", " ", "qm"}], ")"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], 
                    "\[IndentingNewLine]", ",", " ", 
                    RowBox[{"ImageSize", " ", "\[Rule]", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"150", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}], " ", "&"}], ")"}], 
                    " ", "@", " ", "qm"}]}]}], "\[IndentingNewLine]", 
                    "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", " ", 
                    "\[IndentingNewLine]", "\"\< 2 \[Pi] \>\"", ",", "  ", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"(", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"qLoc", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "Pi"}], ")"}]}], " ", "//", " ", 
                    "MatrixForm"}], ")"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "Text", "@", "\"\<time, normalized to one period:\>\""}], 
                   "}"}], "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"Manipulator", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"tau", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"tau", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0", ",", " ", "0", ",", " ", "1"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "True"}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}]}], 
                    "]"}], "}"}], "\[IndentingNewLine]", ",", " ", 
                   RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"200", ",", "60"}], "}"}]}]}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{"Text", "@", "\"\<oscillation scale factor:\>\""}],
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Manipulator", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"scale", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"scale", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.05", ",", " ", "0.05", ",", " ", "1"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.05", ",", "1"}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], 
                    "\[IndentingNewLine]", "\"\< \>\""}], ",", "  ", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"(", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"scale", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], 
                  "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Text", "[", 
                  RowBox[{
                  "Text", "@", 
                   "\"\<Angular frequency \[Omega](q), selection:\>\""}], 
                  "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Dynamic", "@", 
                  RowBox[{"SetterBar", "[", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"omegaIndex", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"omegaIndex", "=", "#"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", 
                    RowBox[{"Range", "[", 
                    RowBox[{"2", "rawNumberOfMasses"}], "]"}]}], " ", 
                   "]"}]}]}], "\[IndentingNewLine]", "}"}]}], " ", "]"}]}], 
            "\[IndentingNewLine]", ",", 
            RowBox[{
            "\"\<\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))\>\
\"", " ", "\[Rule]", "  ", 
             RowBox[{"Column", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "freqTab"}], " ", ";", 
               RowBox[{"(*", "freqControls", "*)"}], 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Row", "[", 
                  RowBox[{"{", " ", 
                   RowBox[{
                    RowBox[{"Text", "@", "\"\<mesh size \>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Manipulator", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"meshSize", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"meshSize", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "8", ",", " ", "2", ",", " ", "30"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "30", ",", "2"}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
                    "\"\< \>\"", ",", " ", 
                    RowBox[{"Dynamic", "[", "meshSize", "]"}]}], " ", 
                   "\[IndentingNewLine]", "}"}], "]"}], ",", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"LocatorPane", "[", 
                  RowBox[{
                   RowBox[{"Dynamic", "[", "qPlaneLoc", 
                    RowBox[{"(*", 
                    RowBox[{",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"qPlaneLoc", " ", "=", " ", "#"}], ";", " ", 
                    RowBox[{"tick", "=", 
                    RowBox[{
                    RowBox[{"Not", "[", "tick", "]"}], " ", "&"}]}]}], 
                    ")"}]}], "*)"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Graphics", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Lighter", "@", "Gray"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Polygon", "[", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    ")"}], "\[IndentingNewLine]", " ", "]"}], ",", 
                    "\[IndentingNewLine]", "Black", ",", 
                    RowBox[{"Line", "[", "qPlaneLoc", "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                    " ", 
                    RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    "/", "2"}]}], "\[IndentingNewLine]", ",", 
                    RowBox[{"ImageSize", " ", "\[Rule]", "  ", 
                    RowBox[{"200", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}]}]}], 
                    "\[IndentingNewLine]", "]"}], " ", "&"}], " ", "@", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", " ", "/.", 
                    "parameterLocatorDependencies"}], ")"}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
                  "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                "}"}]}], " ", "]"}]}], "\[IndentingNewLine]", ",", " ", 
            RowBox[{"\"\<parameters\>\"", "\[Rule]", 
             RowBox[{"Grid", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "parametersTab"}], " ", 
               ";", "\[IndentingNewLine]", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<mp: \>\"", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mPosFirstCell\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<tn: \>\"", ",", " ", "tabNumber"}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<qLoc = \>\"", ",", " ", "qLoc"}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<qPlaneLoc = \>\"", ",", " ", "qPlaneLoc"}], 
                   "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<u = \>\"", ",", " ", "u"}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", " ", 
                   RowBox[{"\"\<qr:\>\"", " ", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], ")"}]}], "}"}],
                   ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<cd:\>\"", ",", " ", 
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<cd:\>\"", ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}]}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", " ", 
                   RowBox[{"\"\<m1Sel, m2Sel, moSel = \>\"", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"m1Sel", ",", " ", "m2Sel", ",", " ", "moSel"}], 
                    "}"}]}], "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<cN: \>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Select", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
                    RowBox[{"{", 
                    RowBox[{"m1Sel", ",", " ", "m2Sel"}], "}"}]}], "&"}]}], 
                    " ", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", "7", ",", "4"}], "}"}], "]"}], "]"}]}], 
                   "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<cN: \>\"", ",", 
                    RowBox[{
                    RowBox[{"Select", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
                    RowBox[{"{", 
                    RowBox[{"m1Sel", ",", " ", "m2Sel"}], "}"}]}], "&"}]}], 
                    " ", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", " ", 
                   RowBox[{
                   "\"\<rawArrayOfMasses = \>\"", ",", " ", 
                    "rawArrayOfMasses"}], " ", "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<range \[Omega]: \>\"", ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"2", "rawNumberOfMasses"}], "]"}]}], "}"}], ","}],
                  "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<kArray = \>\"", ",", " ", "kArray"}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<km: \>\"", ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], " ", "//", " ", 
                    "Max"}]}], "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<km: \>\"", ",", " ", 
                    RowBox[{"DeleteDuplicates", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ")"}]}]}], " ", 
                   "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                   "\"\<couplingData = \>\"", ",", " ", "couplingData"}], 
                   "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<k1, k2, k3, k4, k5 = \>\"", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    "k1", ",", " ", "k2", ",", " ", "k3", ",", " ", "k4", ",",
                     " ", "k5"}], "}"}]}], "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<ms: \>\"", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<nm: \>\"", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<numberOfMasses\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<nm: \>\"", ",", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<re: \>\"", ",", " ", 
                    RowBox[{"2", " ", "Pi", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<reciprocalNorms\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}]}], "}"}], ","}],
                  "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<sc: \>\"", ",", " ", 
                    RowBox[{"DeleteDuplicates", "@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", " ", 
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{"glConstNeighboringCellIndexes", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
                    RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
                    RowBox[{"foo", "[", "n", "]"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"s", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}],
                     ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", 
                    "1"}], "]"}]}]}], " ", "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<mm: \>\"", ",", 
                    RowBox[{
                    RowBox[{"matrix", "[", "qLoc", "]"}], " ", "//", " ", 
                    "MatrixForm"}]}], "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<mm: \>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SplitBy", "[", " ", 
                    RowBox[{
                    RowBox[{"Sort", "@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"couplingData", ",", " ", "2"}], "]"}]}], " ", 
                    ",", " ", "First"}], " ", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"(*", "massSetter", "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Text", "[", "\"\<mass: \>\"", "]"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "@", 
                    RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"m1Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m1Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"moSel", " ", "=", " ", 
                    RowBox[{"adjustedmoSel", "[", " ", 
                    RowBox[{
                    "rawNumberOfMasses", ",", " ", "moSel", ",", " ", 
                    "m1Sel"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", " ", "]"}]}], "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"massValue", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.25", ",", " ", "0.25", ",", " ", 
                    "glConstMMax"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"rawArrayOfMasses", "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "=", "massValue"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
                    RowBox[{"(", 
                    RowBox[{"parameterLocatorDependencies", " ", "/.", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"\"\<mScalarArray\>\"", ",", " ", "_"}], "]"}], 
                    " ", "\[RuleDelayed]", " ", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", ",", " ", "rawArrayOfMasses"}], 
                    "]"}]}], ")"}]}], " ", ")"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{"0.25", ",", 
                    RowBox[{"Dynamic", "@", "glConstMMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"massValue", ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "m2Setter", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                   "Text", "[", "\"\<coupling to neighbouring: \>\"", " ", 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                   RowBox[{"Dynamic", "@", 
                    RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"m2Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m2Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
                    RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
                  "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "km1", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<horizontal: \>\""}], ",", 
                    RowBox[{"kLable", "[", "1", "]"}], ",", " ", 
                    "\"\< || \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", 
                    "\"\< \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k1", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k1", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", 
                    ",", " ", "1", ",", " ", "k1"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k1", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "km2", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<vertical: \>\""}], ",", 
                    RowBox[{"kLable", "[", "2", "]"}], ",", " ", 
                    "\"\< || \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", 
                    "\"\< \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k2", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k2", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "2", ",", " ", "k2"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k2", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], " ", 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "km3", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
                    RowBox[{"kLable", "[", "3", "]"}], ",", " ", 
                    "\"\< || (\>\"", ",", "  ", 
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
                    "\"\< + \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
                    "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k3", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k3", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{"#", ",", " ", "glConstKMin", ",", " ", 
                    "glConstKMin", ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "3", ",", " ", "k3"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k3", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "km4", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
                    RowBox[{"kLable", "[", "4", "]"}], ",", " ", 
                    "\"\< || (\>\"", ",", "  ", 
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
                    "\"\< - \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
                    "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k4", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k4", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "4", ",", " ", "k4"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k4", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"k5manip", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"k5manip", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "\[IndentingNewLine]", 
                "}"}]}], " ", "\[IndentingNewLine]", "]"}]}]}], 
           "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Dynamic", " ", "@", "tabNumber"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ImageSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"250", ",", "350"}], "}"}]}]}], " ", 
         "\[IndentingNewLine]", "]"}]}], " ", "\[IndentingNewLine]", "]"}], 
      " ", "@", "\[IndentingNewLine]", 
      RowBox[{"If", "[", " ", 
       RowBox[{
        RowBox[{"rawNumberOfMasses", " ", "\[Equal]", " ", "1"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Row", "[", 
             RowBox[{"{", " ", 
              RowBox[{
               RowBox[{"Text", "@", "\"\<coupling from \>\""}], ",", " ", 
               RowBox[{"Dynamic", "@", 
                RowBox[{"massLabel", "[", " ", "m1Sel", "]"}]}], ",", 
               RowBox[{"Text", "@", "\"\< to: \>\""}]}], "}"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Dynamic", "@", 
             RowBox[{"If", " ", "[", " ", 
              RowBox[{
               RowBox[{"rawNumberOfMasses", " ", ">", " ", "2"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"moSel", ",", 
                   RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"moSel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                  "]"}], ",", " ", "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                    " ", 
                   RowBox[{"(", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}], ",", 
                    "m1Sel"}], "]"}], ")"}]}], ")"}]}], "\[IndentingNewLine]",
                 "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Dynamic", "@", 
                RowBox[{"massLabel", "[", " ", 
                 RowBox[{"First", "@", 
                  RowBox[{"Delete", "[", " ", 
                   RowBox[{
                    RowBox[{"Range", "[", "2", "]"}], ",", " ", "m1Sel"}], 
                   "]"}]}], " ", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
           "\[IndentingNewLine]", "}"}], " ", ",", 
          RowBox[{"{", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Row", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"kLable", "[", "5", "]"}], ",", " ", "\"\<: \>\""}], 
              "}"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Row", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"k5", ",", 
                   RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k5", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKarrayOriginElement", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "moSel", ",", " ", 
                    "k5"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                  "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                   RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                 RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                 RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                 RowBox[{"AppearanceElements", "\[Rule]", 
                  RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               "\"\< \>\"", ",", 
               RowBox[{"Dynamic", "@", 
                RowBox[{"NumberForm", "[", " ", 
                 RowBox[{"k5", ",", 
                  RowBox[{"{", 
                   RowBox[{"3", ",", "2"}], "}"}]}], "]"}]}]}], 
              "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
           "}"}]}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
       "]"}]}], " ", 
     RowBox[{"(*", "If", "*)"}], "\[IndentingNewLine]", ")"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tick", ",", "False"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qPlaneLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tau", ",", "0"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"omegaIndex", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"scale", ",", " ", "0.2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"meshSize", ",", "8"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"matrix", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynamics", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bInitDefaults", ",", " ", "True"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshMatrix", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynamics", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshFreqPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tabNumber", ",", "1"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynTab", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqTab", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parametersTab", ",", " ", "3"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstMinSquaredDistanceFromOrigin", ",", " ", "0.1"}], 
        "}"}], ",", " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstMinAngleBetweenLatticeVectors", ",", " ", 
         RowBox[{"Pi", "/", "6"}]}], "}"}], ",", " ", "None"}], "}"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstLocDefault", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.1", ",", " ", "1.3"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1.9", ",", " ", "0.8"}], "}"}]}], "}"}]}], "}"}], ",", 
       " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstDefaultMass", ",", " ", "20"}], "}"}], ",", " ", 
       "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstKDefaults", ",", " ", 
         RowBox[{"{", 
          RowBox[{
          "0.25", ",", " ", "0.25", ",", " ", "0.25", ",", " ", "0.25", ",", 
           " ", "0.25"}], "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstKMin", ",", " ", "0.05"}], "}"}], ",", " ", "None"}], 
      "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstKMax", ",", " ", "1"}], "}"}], ",", " ", "None"}], 
      "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstMMax", ",", " ", "30"}], "}"}], ",", " ", "None"}], 
      "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstWindowHalfWidth", ",", " ", "3"}], "}"}], ",", " ", 
       "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstSpringColors", ",", 
         RowBox[{"Darker", "@", 
          RowBox[{"{", " ", 
           RowBox[{
           "Orange", ",", "Green", ",", "Purple", ",", "Cyan", ",", 
            "Yellow"}], " ", "}"}]}]}], " ", "}"}], " ", ",", " ", "None"}], 
      "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstPrimaryDisplaySize", ",", " ", 
         RowBox[{"{", 
          RowBox[{"380", ",", "380"}], "}"}]}], "}"}], ",", " ", "None"}], 
      "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstTextDisplayOffsetHack", ",", " ", 
         RowBox[{"{", 
          RowBox[{"0.25", ",", " ", "0.25"}], "}"}]}], "}"}], ",", " ", 
       "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstNeighboringCellIndexes", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], " ", "}"}], ",", " ", 
       "None"}], "}"}]}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "The", " ", "number", " ", "of", " ", "default", " ", "masses", " ", 
     "are", " ", "coupled", " ", "by", " ", "these", " ", "next", " ", "four",
      " ", 
     RowBox[{"variables", "."}]}], " ", "*)"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawNumberOfMasses", ",", " ", "3"}], "}"}], ",", " ", "None"}],
     "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mLocDefault", ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0.9", ",", "0.7"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0.4", ",", " ", "1.2"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1.3", ",", " ", "1.4"}], "}"}]}], "}"}]}], "}"}], ",", " ",
      "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawArrayOfMasses", ",", " ", 
       RowBox[{"{", 
        RowBox[{"10", ",", " ", "15", ",", " ", "20"}], "}"}]}], "}"}], ",", 
     " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"moSel", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"pick", " ", "anything", " ", "that", " ", 
     RowBox[{"isn", "'"}], "t", " ", "m1Sel"}], " ", "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m1Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m2Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"kArray", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], " ", 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"u", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parameterLocatorDependencies", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"couplingData", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstSpringColorsByN", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k1", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k2", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k3", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k4", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k5", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
    RowBox[{"{", "tick", "}"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}], "\[IndentingNewLine]", 
   ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}], "\[IndentingNewLine]", ",", 
   RowBox[{"SynchronousInitialization", "\[Rule]", "False"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{
  3.6013845596960135`*^9, {3.6013849419158754`*^9, 3.6013850018713045`*^9}, {
   3.6013850794767437`*^9, 3.601385097266761*^9}, {3.601385134804908*^9, 
   3.6013851913481417`*^9}, 3.601385299290316*^9, {3.601385437846241*^9, 
   3.6013854385522814`*^9}, 3.60138559342614*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    True, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}}, {{
       2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}, {{
       3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}, {
       3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}}, {{{
       1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
        0.09999999999999987}, {{
        0.19999999999999987`, -0.3999999999999999}, {-0.3999999999999999, 
        0.8}}}, {
       1, 2, {-1, 0}, 0.25, 1., {0.9, 0.7}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       1, 2, {-1, 1}, 0.25, 1.6899999999999995`, {0.9, 0.7}, {
        2.1999999999999997`, 0.7}, {{0.9999999999999999, 0.}, {0., 0.}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 3, {0, -1}, 0.25, 2.2600000000000002`, {0.9, 
        0.7}, {-0.5999999999999999, 0.5999999999999999}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       1, 3, {1, -1}, 0.25, 3.3999999999999995`, {0.9, 
        0.7}, {-0.4999999999999998, 1.9}, {{
        0.5764705882352942, -0.4941176470588236}, {-0.4941176470588236, 
        0.423529411764706}}}, {
       1, 2, {1, 0}, 0.25, 3.4000000000000004`, {0.9, 0.7}, {0.5, 2.5}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 2, {0, 1}, 0.25, 3.65, {0.9, 0.7}, {2.3, 2.}, {{0.5369863013698629, 
        0.4986301369863013}, {0.4986301369863013, 0.463013698630137}}}, {
       1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 2.7}, {{
        0.05882352941176473, 0.23529411764705888`}, {0.23529411764705888`, 
        0.9411764705882353}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 3, {-1, -1}, 0.25, 4.520000000000001, {0.9, 
        0.7}, {-0.7, -0.7000000000000002}, {{0.5663716814159291, 
        0.49557522123893794`}, {0.49557522123893794`, 
        0.43362831858407075`}}}, {
       1, 3, {-1, 1}, 0.25, 4.879999999999999, {0.9, 0.7}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       1, 2, {0, -1}, 0.25, 5.85, {0.9, 0.7}, {-1.5, 0.3999999999999999}, {{
        0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
        0.015384615384615389`}}}, {
       1, 2, {1, -1}, 0.25, 6.289999999999999, {0.9, 0.7}, {-1.4, 1.7}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       1, 3, {0, 1}, 0.25, 7.540000000000002, {0.9, 0.7}, {3.2, 2.2}, {{
        0.7015915119363394, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 2, {-1, -1}, 0.25, 8.81, {0.9, 0.7}, {-1.6, -0.9000000000000001}, {{
        0.7094211123723042, 0.4540295119182747}, {0.4540295119182747, 
        0.29057888762769585`}}}, {
       1, 2, {1, 1}, 0.25, 9.009999999999998, {0.9, 0.7}, {2.4, 3.3}, {{
        0.24972253052164267`, 0.4328523862375139}, {0.4328523862375139, 
        0.7502774694783573}}}, {
       1, 3, {1, 1}, 0.25, 13.599999999999998`, {0.9, 0.7}, {3.3, 3.5}, {{
        0.423529411764706, 0.4941176470588236}, {0.4941176470588236, 
        0.5764705882352942}}}}, {{
       2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       2, 3, {1, -1}, 0.25, 1.2999999999999996`, {0.4, 
        1.2}, {-0.4999999999999998, 1.9}, {{
        0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
        0.376923076923077}}}, {
       2, 3, {0, -1}, 0.25, 1.3599999999999999`, {0.4, 
        1.2}, {-0.5999999999999999, 0.5999999999999999}, {{0.7352941176470588,
         0.44117647058823534`}, {0.44117647058823534`, 
        0.2647058823529413}}}, {
       2, 1, {1, -1}, 0.25, 1.6899999999999995`, {0.4, 
        1.2}, {-0.8999999999999998, 1.2}, {{0.9999999999999999, 0.}, {0., 
        0.}}}, {2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
        2.5}, {{0.005882352941176467, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 0.09999999999999987}, {{
        0.34594594594594585`, -0.4756756756756756}, {-0.4756756756756756, 
        0.654054054054054}}}, {
       2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
        1.4000000000000001`, 2.7}, {{0.3076923076923076, 
        0.46153846153846145`}, {0.46153846153846145`, 0.6923076923076924}}}, {
       2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
        0.8, -0.6000000000000001}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {-1.4, 1.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {
        2.1999999999999997`, 0.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {0, -1}, 0.25, 3.65, {0.4, 
        1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
        0.463013698630137}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 0.3999999999999999}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 3, {-1, -1}, 0.25, 4.82, {0.4, 1.2}, {-0.7, -0.7000000000000002}, {{
        0.25103734439834025`, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{0.9846153846153846,
         0.1230769230769231}, {0.1230769230769231, 0.015384615384615389`}}}, {
       2, 1, {-1, 1}, 0.25, 6.289999999999999, {0.4, 1.2}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       2, 3, {-1, 1}, 0.25, 7.379999999999998, {0.4, 1.2}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9878048780487806, -0.10975609756097565`}, {-0.10975609756097565`, 
        0.01219512195121952}}}, {
       2, 2, {1, 1}, 0.25, 8.409999999999998, {0.4, 1.2}, {2.4, 3.3}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {0.4, 1.2}, {-1.6, -0.9000000000000001}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 1, {1, 1}, 0.25, 8.809999999999999, {0.4, 1.2}, {2.9, 2.8}, {{
        0.7094211123723043, 0.4540295119182747}, {0.4540295119182747, 
        0.2905788876276958}}}, {
       2, 3, {0, 1}, 0.25, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
        0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570139`}}}, {
       2, 1, {-1, -1}, 0.25, 9.010000000000002, {0.4, 
        1.2}, {-1.1, -1.4000000000000001`}, {{0.24972253052164256`, 
        0.4328523862375138}, {0.4328523862375138, 0.7502774694783573}}}, {
       2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{0.6138686131386862,
         0.48686131386861314`}, {0.48686131386861314`, 
        0.3861313868613139}}}}, {{
       3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
        0.19999999999999998`, -0.39999999999999997`}, {-0.39999999999999997`, 
        0.7999999999999999}}}, {
       3, 2, {-1, 1}, 0.25, 1.2999999999999994`, {1.3, 1.4}, {
        2.1999999999999997`, 0.7}, {{
        0.6230769230769229, -0.48461538461538467`}, {-0.48461538461538467`, 
        0.3769230769230771}}}, {
       3, 2, {0, 1}, 0.25, 1.3599999999999997`, {1.3, 1.4}, {2.3, 2.}, {{
        0.7352941176470587, 0.4411764705882354}, {0.4411764705882354, 
        0.2647058823529413}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
        1.4000000000000001`, 2.7}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
        0.09999999999999987}, {{0.00588235294117648, 0.07647058823529418}, {
        0.07647058823529418, 0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 2.5}, {{
        0.34594594594594597`, -0.47567567567567565`}, {-0.47567567567567565`, 
        0.654054054054054}}}, {
       3, 1, {0, 1}, 0.25, 2.26, {1.3, 1.4}, {2.8, 1.5}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.3076923076923077, 
        0.46153846153846156`}, {0.46153846153846156`, 0.6923076923076923}}}, {
       3, 1, {-1, 1}, 0.25, 3.399999999999999, {1.3, 1.4}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.576470588235294, -0.4941176470588235}, {-0.4941176470588235, 
        0.423529411764706}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.3, 
        1.4}, {-0.4999999999999998, 1.9}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999984`, {1.3, 1.4}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9283667621776505, -0.25787965616045855`}, {-0.25787965616045855`, 
        0.07163323782234961}}}, {
       3, 3, {0, 1}, 0.25, 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
        0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.3, 1.4}, {-0.5999999999999999, 
        0.5999999999999999}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {0.8, -0.6000000000000001}, {{
        0.058823529411764705`, 0.23529411764705882`}, {0.23529411764705882`, 
        0.9411764705882353}}}, {
       3, 1, {1, 1}, 0.25, 4.52, {1.3, 1.4}, {2.9, 2.8}, {{0.5663716814159292,
         0.49557522123893805`}, {0.49557522123893805`, 
        0.43362831858407075`}}}, {
       3, 2, {1, 1}, 0.25, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
        0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       3, 1, {1, -1}, 0.25, 4.879999999999999, {1.3, 
        1.4}, {-0.8999999999999998, 1.2}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       3, 2, {1, -1}, 0.25, 7.380000000000001, {1.3, 1.4}, {-1.4, 1.7}, {{
        0.9878048780487805, -0.10975609756097562`}, {-0.10975609756097562`, 
        0.012195121951219514`}}}, {
       3, 1, {0, -1}, 0.25, 7.539999999999999, {1.3, 
        1.4}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7015915119363395, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{0.4756242568370986,
         0.49940546967895355`}, {0.49940546967895355`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.3, 1.4}, {-0.7, -0.7000000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 2, {0, -1}, 0.25, 8.84, {1.3, 1.4}, {-1.5, 0.3999999999999999}, {{
        0.8868778280542985, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570136`}}}, {
       3, 1, {-1, -1}, 0.25, 13.600000000000001`, {1.3, 
        1.4}, {-1.1, -1.4000000000000001`}, {{0.42352941176470593`, 
        0.4941176470588235}, {0.4941176470588235, 0.576470588235294}}}, {
       3, 2, {-1, -1}, 0.25, 13.700000000000001`, {1.3, 
        1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
        0.4868613138686131}, {0.4868613138686131, 
        0.38613138686131376`}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.6790602328891914, 9.230900003615161*^-19], {
       Complex[0.7248589832535917, 0.], 
       Complex[0.650064949116095, -0.020858686170711016`], 
       Complex[0.11988513411713456`, -0.0981715969681187], 
       Complex[0.15160623794564831`, -0.028647866526790612`], 
       Complex[-0.002472802788942547, -0.01713913715451654], 
       Complex[0.05556524411678816, 0.01890267003822048]}}, {
      Complex[0.5524636587025472, -7.594543271602355*^-18], {
       Complex[-0.38354558530686395`, 0.09744499810272776], 
       Complex[0.1619813466218059, -0.23832737428749207`], 
       Complex[0.6766558452199941, 0.], 
       Complex[0.5279467930943094, 0.011722985858567875`], 
       Complex[-0.0019794387381373065`, 0.0612963317654061], 
       Complex[0.14074635807044672`, 0.0077645969691057665`]}}, {
      Complex[0.5222542056555272, 7.39373223091693*^-18], {
       Complex[-0.5047764091042254, 0.08027140607893792], 
       Complex[0.6076266586520926, 0.], 
       Complex[-0.41722429897453955`, -0.26584428115246467`], 
       Complex[-0.11870218623554862`, 0.011771602360776734`], 
       Complex[0.10106066627579662`, 0.15510216234064736`], 
       Complex[0.24672133224192438`, 0.12420825231706026`]}}, {
      Complex[0.47798270089481093`, 1.705186367657685*^-17], {
       Complex[0.11776747404882068`, -0.17021352942962187`], 
       Complex[-0.19349636076477256`, 0.18545691772731276`], 
       Complex[-0.005098087736675982, 0.0481703582836023], 
       Complex[0.12443545522518613`, -0.04846883240430583], 
       Complex[0.7520021001235273, 0.], 
       Complex[0.5450959458974042, 0.050065292585647264`]}}, {
      Complex[0.4208599945029234, 1.7181192359807767`*^-17], {
       Complex[0.046412084869462106`, -0.0633132278362492], 
       Complex[-0.15001494768060744`, 0.1368626263531111], 
       Complex[-0.49457449633790096`, -0.020339968952328036`], 
       Complex[0.7465187765334863, 0.], 
       Complex[-0.3425167147633056, -0.05320301419822421], 
       Complex[0.17190685158210708`, -0.02435844462026826]}}, {
      Complex[0.3371723422003491, 1.2680207595331082`*^-17], {
       Complex[0.08250671501222374, 0.03036710231625256], 
       Complex[-0.10759757386702096`, -0.00917692568070801], 
       Complex[0.15992951319705684`, 0.020880420200147097`], 
       Complex[-0.32856173648033754`, 0.004931060374980048], 
       Complex[-0.5245849484304596, 0.028709761501831688`], 
       Complex[0.7553839007471159, 0.]}}}, $CellContext`dynPlot$$ = Show[{
      Table[
       ListPlot[
        Part[$CellContext`points$1700, $CellContext`k][$CellContext`nu$1700 \
#], PlotRange -> {{(-$CellContext`glConstWindowHalfWidth)/
           2, $CellContext`glConstWindowHalfWidth}, \
{(-$CellContext`glConstWindowHalfWidth)/
           2, $CellContext`glConstWindowHalfWidth}}, 
        ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
        Directive[
          PointSize[
           Sqrt[
           Part[$CellContext`mScalarArray$1700, $CellContext`k] \
($CellContext`glConstMMax^(-1)/350)]], 
          $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$1700}], 
      Graphics[{$CellContext`lines$1700}]}]& , $CellContext`dynTab$$ = 
    1, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJxl2nlUzfkbB/CyjGwNypayln1NosQNFaM0KlMYkyw/JVsS0kKT7PxG5UeL
QtJUlhhJRlQyiUS61b0t9/a9t27JTtaIn3N6nnvnPM8/M+e8z5x7vft8Ps/z
Oo1Byzc4/6eNlpbWwu//aPv9385GpzLunm+f4xhV9fHLms/ZFjf37q7+WyXa
lhu9MaRaS50Ls03PTOyoElkXGi9a3+tjNuavH3vmPn9aJ+o3bHT81YZn6tz9
yIxxxctVorUbjPRNbMXqvMuyx3NcK1Qi99ZchHnqD4sDxTEqkX7r56jz8AGF
sjHP6kRWrd+rzkPXVrS/cqNOtLX1z2mNeXyG7G3XmSoR9FLn9+YWGid0r8c8
pyHC8EyLy7tsuZFHUcrVOnVfzJMcdWMHH69T98XctOOfh/stUan7Yq6z9mza
tU+avpg7+ox3K43T9MV8RNqGSGNxnbov5llNdn9kLtP0xfyMUbeAxlJNX8x/
XPz6ysAB6l7qvLx8+ZsxyzV9tfpdT/iy9UW2Yw/7uF/1NH0xH5zZo+3h25q+
mEcsd85o0a9X98U8aPoAlXGfenVfzFdMeD7ytZ2mL+b+W7dmXZ6s6Yv5nPuu
DZZGmr7q73WvDck9rFL3xbxPjtNAb1GDui/mooufm3pK1eeeY9pt2ueW2cps
95Ih41zEteq+mIcOs4xytNDcZ8zXr+0+SdmuQd0Xc7PVx8KOL9T0xbygc/f1
m/zq1H0xt5wR32ZNVq26L+ajavyebjyr6Yu51P/Ww8Ld9eq+mPtP+pp4IUbT
F/M2BwINGp7UqftG9Pzi2LK0IDtjU5SOXK7pi7nl223rrEfVq/ti3mBh6N0p
VtMX8zMrDux8HqC5z5iHe4zaN6yuVt0X828fgiP7X9D0xfxGwbztbiNV6r6Y
T7d3rv3s06Dui3nmbkfPkQM0fTHfPjXp4vlJmr6JrbkoCHLsi3kGfA72xdwS
vhf7Yp68cF3aRaFO3Rdz7IV9MT8MPwfsi/nbcUlK12uavpjXpepfz5+p6av+
88C5YF/MM+Ecsa9567mLtODcsS/mW+CeYF/Mw3/0Hzpikeb9Yj4a7iH2xRzv
LfZVf37SwRdRZzXvF3NTeBfYF/ON8I6wL+Zh8O6wL+bL4J1i33at71o0Fd41
9sW8J8wB7Iv5XkO5yREvzXzGHOcM9sV8G8wl7Iv5Mphj2BfzQJh72BdznJPY
F/NBMFexL+YuMIexb2Pr3BaJYW5jX8xxzmNfzBNhL2BfzG/AHsG+mOPewb6Y
457Cvph3gL2GfTEfD3sQ+2J+BvYm9sVcCXuWeEOEe5l4Q3Qa9jjxhmgv7H3i
DdFRcALxhigNXEG8IeoBDiHeEK0EtxBviN6Cc4g3RCpwEfGGCB1FfdW4wt6m
4LyC+SrRa1nPwA0K5qsjKVe83H5VMF85mi28vuO4gvnqVnLo0IJyBfPVzCnm
ZkbnFMxXnTpH3ny6XMF8lS4L+rurr4L5KiJshInxUQXz1cua6adTmxTMV2EW
HacFGCuYr56tW73EbK2C+epTuOsvFecVzFeRj21PuTxVMF/FSV8feZCrYL6q
PHg0KMFBwXy1v89rszgjBfPVt7IfOulEK5iv5l8N+rz+m4L5KnO5Ub/cvkrm
K+m86pctRQLzlWnt/pV9ohXMV4+ubD9y/quC+epe/oRRa7WVzFfT41JEGw4p
mK9qqtKrxr4UmK/shlbv//GrwHx1MS6i7lu9gvkqrM7v3EQnJfPVzm2bMu69
UjBf6f78Nur2ZYH56ncDUWHzXQXzlXav67+8m6NkvjJY8LzfkA5K5qsF+272
nmioYL7qkZmbeiNaYL4KmHciceokBfPV8ANvh+yZqmS+6hv3LWHSKiXzlfag
n06v2qxgvkr2kWcY5wnMVxU9h4q9eyiZr07aaDuWblAyXw15X3tLe4+C+eqg
cz8jn0yB+Sqzf4lqcaTAfLXcfFNj7iIF89X2jz/VPPJWMl+NTo22CbFXMl89
iP92wLCNgvkKc+or/Bzqq2D4XuqrJ2aFKyf+pmC+wl7UV/hzoL4acuLFrsgs
BfPVFmPtMbPclcxXUjgX6qtUOEfqqzZw7tRXBnBPqK9c53gaWo1SMl/5wz2k
vuoO95b6au4Q6ZLBIxTMV4bwLqiv2sA7or7aAe+O+qo7vFPqq73wrqmv9sAc
oL4KqtK6FaBSMF/hnKG+wrlEfWUNc4z6qgjmHvVVCcxJ6iucq9RXVTCHqa8y
YG5TX+Gcp77SKm/dC9RXB2CPUF/h3qG+Og57ivoK9xr1VTPsQeqr57A3qa/2
wJ6lvsK9TH11FPY49dV12PvUV93ACdRXduAK6qs74BDqK2dwC/VVFDiH+ioZ
XER9hY6ivtp8Jm2TY4bAfJXeQyvFT4/7KjHefn3qMoH5KqGyrjH45xrmq6wj
kRsnWtUwX62SvSrvoyswXwWsCE2fHSYwX6VuyD7/OkVgvmr+VT5AZ6TAfDVq
i4/voRE1zFcXxzabbbcTmK9C8ypnPYgVmK/6OuT0Gu4mMF+tCauwMI6pYb6S
jx+etk+/hvmq3aM3Z9t61TBfWZ/rdCGhq8B8Fe+3b6m/i8B89THYLWz6v/pi
PjLF9rPxLzXMVwkz0k7YhNUwXyUt/vaqYo7AfHVaO+zRU3OB+WpK8ImYmf/q
i3nzXHHS/Jty5qvRKnmLXrCc+WrxKVfPWNsa/vsraYeB0aYC89XvnVf1qhkl
MF/lJftZLWlXw3xlLr274sFFOfPV3J1NSdbdBOarH51DZ8RMEJivEhfsuyZ1
rWG++pTp5OSmI2e+uvvJeGu7pzLmKwfLF9dnv5czX+2e/mxaR2OB+SplszLr
5BCB+Wqg7sYxhs5y5qv68pYSn+Fy5qsO4854NLQVmK88Xk+XVf6rL+YJ+U1F
J3PlzFd3h9/23XFcxny199oGO9NEGfOVQeUwyzF5cuar3M7HDdqPEfjvr5a3
j3XVFZiv+jskm4z5ImO+MoCc+go/h/oqG76X+qrfroQ25WfkzFfYi/oKfw7U
V+2aHE7Jn8iZr3ybB3f0/VdfzHXgXKivnsE5Ul8ZwLlTXyXDPaG++mv836kX
hwjMV3PhHlJfFcC9pb7yOHjmZ7mJnPkK3wX1Fb4j6it8d9RXk+GdUl/dhHdN
fRUCc4D6ynXsg//cNxaYrxbCnKG+GgFzifrqC8wx6itLmHvUV4kwJ6mvcK5S
XyXBHKa+Gg5zm/oK5zz11QnYC9RXM2GPUF+1hb1DfSWDPUV9hXuN+qoP7EHq
K9yb1FeXYc9SX+Fepr7SWtK6x6mvLsDep74KBidQX60BV1Bf3QaHUF+lgFuo
r5LBOdRX18BF1FfoKOoriWffXJtjcuaro2+ubfkzQcZ8ZZcxplBlKWO+ko88
p3PzHxn31X7DBt+XMuardNNE3eCLMv77qwvTnPSmyJivAuNzAkpyq5mvKtev
9Nq3UsZ8pRO8+knjSxnz1Xr3S/Kz66qZr7pkpYu+BlQzX/n11nE5tlnGfLXo
dEBEco6M+SrQJGfZUycZ81WEQ5fuxflVzFcn74Ylx+ZVMl8dmjTc02dPNfNV
+367aoVMGfNVYqW4t+0pGfPVlRUPOz2eUMF8NfNDyOGcpdXMVzFrR5m+2SFj
vuqzRd97/w4Z89Vv4b52MbeqmK9Ch6/u7qNbwXxV5bHZdNBXKfNV3paBAd0L
q5mv3u/dUS2UyJiv/OOdfgieKmO+MrHakZ39PwnzVbOs80ETo2rmqxeij5M8
EmTMV5LDPQ4ssZExX/leSvMO61zJfGURGjhJ710589WaF3mPRgypYL6qN9B5
uMNaxnzV63HkivNJMuYrq0/PhOvSKuarb7ucbA/YSZivprilFV4OqWa+sgnb
10s/TsZ8dWFcwqVGVSXzVWLO/MNXUiTMV03N71zNHpYzXwVZfJxac6iC+arD
hpjkQwEy5qud54O3bNScozq37OIZXtW1gvlqCuTUV6HwOdRXP8D3Ul9Zy18G
rNWtZL7CXtRXp+HnQH01/mbC60561cxXVdsfOln4yfj/H4Rzob7S3t16jtRX
U+Dcqa/04Z5QXx0oNtQZ2lPGfIX3kPoK7y31VRfT8/eC4yqYr6TwLqiv8B1R
X7XAu6O+Gg7vlPpqC7xr6qtmmAPUV7MKnZ0yq6qZr6phzlBfhcBcor5yhzlG
fYVzj/oqHuYk9ZUI5ir1VSbMYeqrBJjb1FftYM5TXx2GvUB9lQB7hPoK9w71
VQDsKeqrxbDXqK8CYA9SX3WFvUl95Qt7lvoK9zL1VS3sceqrENj77PdX4ATq
q7/BFdRXt8Ah1Ff14BbqKxdwDvVVPLiI+godRX1lv87klvvLSuYr86/jQgbZ
VzFfmff+oq89vpL56kXC64Edw6TMV0H/PX86IFLCfBV1zGvynO//PfXVEQNb
T/O3FcxXLwpU34TiCuYrs6Xz18ybVMF8VRCXs7hvmYT5KmFgsU3Gngrmq6ye
xWP3PJYyX41eX7BytVUF89Wy8ve2TcOkzFcdN7/Km2wnYb76Z8nEvYWbJMxX
Nt0eL+j9h4T5apX7G12D+RLmq7eXtHwtoqTMV37uz84WxEmYr0YM7P1f1e5y
5qtXH7ovmtRPwnyVZ/5p/7fBUuYrq6/HotNrJcxXRXl3bL/qS5ivjMLtcw88
LGO+uh1QHWk0u4z5qtjRfnJEQznz1Usr17mN3aTMV70nX79d9ouE+cp9YnkP
H+0y5qu6dpFB1l7lzFddtsT9dOeWhPnK5eP1k+JNEuarnPbb/vL+WMp8VZbl
3mD7opj5av+s9Cl6M8uYr36PdRhxRlfCfBX5acD21fES5qvmuy/qle0lzFe2
l/fYa7uVMV/tavb2fXajnPlq7CbTusVBEuarryvWpd3vL2G+Eq33zchUPWK+
soKc+krbSWe3tlDGfHUh8Mgfb0QS5qvpNUF9e06QMF/dbE6uCnIrZ77Kgpz6
Cj+H+ioNvpf66tIx74tageXMV7Qv5rQv5k/L3MJv6kmYr6KL/O5fni1hvgqD
c6G+mg3nSH31Hs6d+grvCfXV2r5ts6bKypmvDsE9pL6SwL2lvtK//UdX+3El
zFfO8C6or/AdUV/hu2N//wreKfWVPrxr6qtXMAeor6JSHdyUTeXMV/kwZ6iv
DGEuUV/hHKO+mgZzj/oqH+Yk9RXOVeqrsTCHqa82wtymvsI5T33lBXuB+moW
7BHqq3zYO9RXuKeorzxgr7G/fwV7kPrqJuxN6qtE2LPUV7iXqa8sYI9TX72D
vU99FQNOoL46Ca6gvvodHEJ91QRuob6yAudQX1mBi6iv0FHUV0N9rs6beqSM
+Wp7tn/7f/zLmK8qpz6ZPK5DGfPV0GypOLZtKfNVQHPA9MZSMfPVlbK5d1Rp
pcxXqRnjk/T8ypivrs2fYl1vXsZ81bDwdrs/N5YyX5mYv723+UYJ81X9q1eF
oWvKmK+Ml6et2TCrjPmqc9HMVy4nS5mv7o3b+cO25yXMV2+mL/Z2W/SI+WpB
Y++f9CJLmK9K0j+Ef2woZb5q6yrMqY0tZb4an7LiSkidmPmq22nLPu/7PGK+
MqjetajQqJT5ylb/87zZPqXMVynb7F9tHlzKfPUx7sZhj3mPmK92Z1at+DS8
iPnq5KqrDmaX7jNfRTR5po5+V8x8lfwhIN/ley/qK7teJu+to8XMVxbXVy+Z
cfUB81W7kqOBHT0fMF85rjSa9bSvmPnqrnff1V2KxMxXO7uUlAz1K2a+yjca
2ffQ2XzmK/+lznYts/OYr2IKDwzy/f7npL6Suy8rNokVM18FuIQ6RViJma9K
R131uvOwkPlqkEnSmLktBcxXW1PDwnOkJcxX+YscbPqniJmv1i802tmg94D5
amvpmjrPc7nMV5sgp74KiT6Z3hh3n/nqlvLPO+lRYuarmpZnhxq0xMxXyXnW
iWe97jJfpUBOfVUNn0N9hd9LffXXtH9+6+NRxHxF+2JO+2LeKcz74eK6B8xX
xUVRGb1OiZmvAuFcqK/6wzlSX0nh3Kmv/OGeUF+pIt5HPP+fmPkqHu4h9VUg
3Fvqq9DeHu7rJt5mvgqBd0F9lQ/viPrKAd4d9ZUuvFPqK3N419RXM2AOUF/N
Too/q3VNzHyFc4b6KgHmEvXVTphj1FfvYe5RX6XCnKS+mglzlfpqEMxh6itd
mNvUVzjnqa/aw16gvhLDHqG+coW9Q32Fe4r6qhD2GvWVLuxB6ivcm9RXjbBn
qa9wL1NfPYM9Tn2VB3uf+uovcAL1VRa4gvkKHEJ9NQrcQn0lgHOor3aCi6iv
0FH/BwptPYE=
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwNw2e7qQAAAGDHdo2SnVApoZTdsCtUysh2bOf7/U/3l97zPs+Lvf/ab6fD
4fj32/U79OX8OV/CTlfE5QbcHtDjjXp9kM+fj8Vj/kAyGOrSTCYCxAN/YABE
olAOimXBaCoURhPJRokiMjAJZ0tZhEJy5Vy+WkBpFMOSKTyVZosER5B1ssRg
eJMqtyvVTpWu4cV0OMIztWI6Y07kfqMpstyky4/aHYmrD1vtw8Ls1RvjTtcY
jbXBUOaFxXiiD0eqKCmCaMnKzd5eN/Z6Ottq+kqdHk1rbyxeh+NON+y5drKW
5+Vqqaj37e6x2z/3B6HGfk7ny2r9Pp5qAv8VCg51zQMCrkg4mEy4gUggHvNB
UW8U9MegUCqZQAuRTJrhu+F0CszCUA6J5XNRJJvE0BSOpYs4TBLZEolQpVyZ
KlQrKF3FGDpDFPEaQ3As1WyQda7UqFfarSJbA+AM3e1UO+2p1HOGQ/We1B4N
G/2eqCqt4UBQ5O5k3BmPeHkiTVVlaQ20OSeJvdl0ZOgTcyFb5nhhqKvldL2a
2xt9tzX2u8Vhbx4P1um4PJ9Wl7O2tTfX7+39dng9d4/7/vk4vl/27cqKwvnn
c/q8Z73+fz/cYi0=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwNw4m2oQAAAFBn5kvml+YT3jnP7iElogWRXVkjhZRCizW7sXufNe+ec/98
+P9+/LLZbOLP3z8TxcL36Ry0OwCHM+R0gS435PaEPd4kHIG9PsQfaJcrKBCK
+L6wEEhA4UQYxkEoFgiSUaSey1NxNItiOQzP40SBSBQTyXKKTCOxTCzOZKgq
la1lcxUy3cgXmoUiWyrT6Uw8CHQqdODTzldrQq3eqzf6jabYYucjRWp3ZvJI
7nBKl1d5YdLrD9m2KcnGUBpxXV0cvg7HhaLeNltrqm11YzWeHGbzvTnrMtWd
YW40famOj/PFZW1drc19uzstlo/d/n08nZer5/7A0cxnwD/Qpn4k6gJDgRhC
cx03BPoisDMEeMJQMB6Dk4kQhgJoPEqmYpk0RODhBAHimBcOI2nSAQTxfC5N
VzIMjeWyqXKJrJSJQr7SaWdrVTRLxalModnI1Wv5Rr3EtpguV26zVJXRBuLp
+z0/HlrioN4Tusqo0e9xI7ktDdmh2JElXlVG81lvMlaXC2GsirommYY8M4eG
rizm49WyyneN3VbbWMvzSd9uFqfj7LA397v15Z91vdiDge39trldp9Z697jv
n4+awB/fr8PrORZ6/wFLkCAU
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxNk/taElEUxedAogJppIYJCVOGaT5Nj9AD1Dv1Nt4tb5gXEkUTULyA5r29
vvnNx/yxvj1nn73X2ufMWf7X71++xTzP+2GIG/4argyXhg3DvGHBsGaYNcwZ
tg0rhp+GdXKq+21YZq9sWDQsGTbh0HqLnOp24PhlqNEv7gp64n5kFs20Z1hl
b5/5xH2AnrgPieKqsq+9P/Cp5wgd6Z/AK81TesTXoEc6dfa1bpKrMtcxd9ZC
W+c4g+OQvV00rlhL88FwAcc/tNV3jbZ0OmhrfUNOdW04tHeH9rnhFg6tn9BT
7YzzPN/w3uC5gFc6I/adNKQMMRdoaJa4C6L4XrggSidh3/fM3uuCqP/T7wK9
Z8OwC9ZJoJw00waHzkuidF67gKsPPDL7K/vucYFmirnVnyGnniF6pFdwgbbO
9IYeaZYMOUPeMIr2gGHMMOgCnRwxQ12Gud4RpTNOlEYxouMTs9xvFp0Jw1t0
PhJz7KeZYxI96XwiSmeKqDOd86aOuN8272Kafc3ymeiDGXKzeGUVn+3w7hfw
xQZ7e7zRNhq6/0V8o7oV+uSpefrkpSW8VkanAtc289bor3pdv+7jo128cExf
nTcdevgAvRrrMjlxLbO3hd4JXOtwV8i18UANf7RYP/Fuq/ipiUYL/2gm+fIC
zTPqGvimwzma5C7he0C/wXlO8VPo3Rv663C04b6lroNXntEW3z1z3VEnD1zD
leQdhu++yJvweP9J/JrAS463l3Jdn8dc188JtJN4KvR/HF/24bvQw2nqhvFG
Dz4apGeAujn+zRrnd8zYi78y+HiIdYKcuPSv+tlP4bURtLOsQ6/mI34O/T2G
D0Nv5yK+LTJ7IeLvcbhCP/sRD09E/DbN2UapDT08iUaJnjy5UsTbqtP/i/FP
CvBNMat0PnB/ukf9g//JUwbQ
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxNlftWklEUxPnqSXqA7pYaZSUaKiEJKRKJiqEkiZdQMbxEkuUl7Rl60mbW
+p318cesvc639545+5wzcKe6mW/eSiQS/4TbQiZKJOaEWWFIuCvcE4aJ94Vn
xAdCkvhQeE58JLwgPhZGiAPClPBSeEX0tyfCqDCIZlUoCvPCOHpJelz7VHjD
N2tOoGedSaK50+SdS8HtOd4Kr9FcEPJCQXiHnrlniGnyaXQKROu8J05xZhm4
i8QsGEU/J4yh8YG1NctEa34k5pnf/dNCBW1rLnE/1lwmWrNEbdAZ5uxW4Ar5
FPk19HwG68Ii3KvsybkN7sMcB0JT2BS+oO1cgz6vr4VToSfU4a7QZ45PwjYa
1t8h1uF1via0hM/sa4tv7tlDz/q75L3+Rr9rz4Vj4UT4LRyxNr7C/Z1+8x2y
px323mbWH8I+6xp35nPp0rePRguuHn3ey09iB2yhcUGP9S+J5rsiWvMP0Xu5
gdd8Z3Adck4l9vS3L2+/+p0Pcn4tZvba79DvPng1SW2K3Dx35DsNHnadPRf8
GjzvdxW87Tq/tTG4XGdPTFJrHwUfj1PnfdgjGXr8LrNw2V/pKPbzBPtIwzWA
xgj7zsIVfpuG+eZ5ilHs2zxrz7ccxV6di2Kfz0SxtwtR/Ftgf+Y47xJzhG/B
h0vMlmOe4Ofg7zL903DMo7lAXYl79R3MwrfIPirU+c357duXfu9+Y/1vrkfP
OvdvXvtrFW73NOGqk1vh2wZzmD94ugFXlbxz9sJWH5f121Hs523gd9pBe5se
c9krLbg8zx7cbdYNvu3S02E+v2N7+IhzrDGTe+yXLj321Al19v8v+LrkzHfG
eR1wZsH3p3BZ55x+c12wDv+FQ1Hs2+DjS+pa9BxHsZ+v4L5mXeZcauzDHg5e
v6Guzbn4jP8DDBK3pw==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxNlf1WUlEQxe+tJ+mVeoQeoJ6lrLTUVEoRTFEQTOUjMlPUFNMQQ0IlSCxN
ywdo9lq/Wdc/9prFmXP2njNn9uXeg0f3H94JgiBmuGtIhUGwZFg0DBkeG54Y
hol9hlfEp4YR4jPDKPG5YYzYb4gRBwwzhteGN0StvTBMGAbRXKWGZUMCvRHO
aO9LQ5I1ab5FTzrTRHFPkVcuDrfuMWsYR/O9IWvIGTKGSTTniUnySfhyRGku
EKX5jjhD7Sl05tCR/o2hZzg3FAxpNItEaZaIWe7vHGW0pfmBKM2PvJU08+xN
c49hevcJrjy5OPkvhjXDumELDXF/N+wZ9g3bhhV0qryN+HaJOr9DXrkmvDq/
SX/Fu8Hd9LtGTpqHaOxwRrVU0K5wroG2NI+I0vjGOeXO0FbtLc5/NVwZOoau
oW2oo9nhvLhPDQfkerc4fqLXpJYid+hyTrkf8InrGM0ab9xi7RJt7f1DlP41
XNL5bTihlr+s6U7/iKrrgnybvus9C/SsQH3yq+Z8kB7XqMn9Kc+4hzUfmgXN
hObG/aycfOYedQ+7p8fgGiAfQ09zPg40tyn2yiNTcMtHCbQn0R8ln6T2OFzi
lp/c09NwTVDvLLUm4BIy3Mf9mQsjD89zTn1bDiM/Z8PIwwvwKu+eUq/dQ4qr
YeTbQhh9LzJwacbdxyX2pdmbR7PMPvdzmTe+4c2X0HF/K67wlhu8rc+H5kWz
qJnpwrXFnhL7K9xDvtlFe5Oc+7mKjjzlvlf8TC1Vcpq3vVtc0m7Apfr2yctH
7h1fE5d8dgCXfHMId4Pf26zV0WiiIY4WvD73a+yVp9rwyiMn7OvRpzr5U/jO
6FeDnvn3oAOXdM45Ly7581cY/RcOwSdvuy8v2KceHMPhnr+E+4rfRfqyTh16
Q/8eXLOvTr/Uj/9SgnWO
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxFledWFEEQhWcHAUVZgsoKiOyKZMlIFNklhwWVpL99AH0n3xEJYqjvzDeH
H/f0dFfVvTXdfWcq336cfE+TJPkZaAh0xORloDdQCPwqJMlVoB7PXwIXgabA
71i7CyTxfFnI8hrj+baQxRri+TrGm0CaZhzMH6TZGnnNacbxJ9CeZvVwtwT+
yT0S6Au8CjxMs9y/gSf2B3cxzfTgbnOEq9U4scdpxkdNhzroPws8UvOFNfB1
WYPOc+PMS661uk9wdQZ61OY9uuVoM9Zs77zDUzWH3GM4BtSmrqI2OmW1mb92
jbx+OYgNqg3XGzl6PCvO7CgwqjZ14/KiM2UNHBNq0Mu7wJi5k66RNy8XsdnA
sOczLQfvNOcaeQtyvA2sWw/3knqTcvXb06K5xFbsD+419eD+4AjX+8CMsarc
aNYc4dtwRHMrsCz3TmBVjl1HdPYc0dl3pPcDR3QOHdHZlHvZ/a6peWwMzRM1
4P4U2Fb/syOxU+P7ntmG9Zwrd4p7dm4f6J+Zy/zCtbr7V/Esv8pFL9xf7gv3
5kYf4gt8RgwPXOlVPHKrn8nDc9xf7vG13iYPn+OjRmvwBR5pst92z3bM+5D7
syhXp3lwtVrfaB15iXwt9lo0785vR5N98074im9QwTry8ErJGPe/z9x+52jg
lW61ye1Sv9dY0XjuT3wwYB77XJaL9xux3y73mvpBa0qeSUWuAefoDJl36Fme
2yt8w3KV7Zt7hm+m5OK88Vh+X/fcb7wwr/aUNeQtGEN7wnq0p80btW7OHifN
ow98NmPNoly5J9fMpb/c30vmwbduXu7Pqlz4blXuNef0sSLXiBqz9l2VK/d2
TdTdv9zPO8aPjMGFFzfTe5/vpvd+PrAP6rbNO7b+0n8RXjnwfM48k3H3O/dz
7m/Gj+7Bpr2gd2Je/k3ZF/Dl34BT89DGw3zL/wMLlm0f
            "]]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[{2, 1, 11, 21, 31, 41, 51, 61, 71, 81, 91, 92, 93, 94, 95, 96, 
          97, 98, 99, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 
          4, 3, 2}]}, {
         GrayLevel[0], 
         Line[{102, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 192, 
          193, 194, 195, 196, 197, 198, 199, 200, 190, 180, 170, 160, 150, 
          140, 130, 120, 110, 109, 108, 107, 106, 105, 104, 103, 102}]}, {
         GrayLevel[0], 
         Line[{202, 201, 211, 221, 231, 241, 251, 261, 271, 281, 291, 292, 
          293, 294, 295, 296, 297, 298, 299, 300, 290, 280, 270, 260, 250, 
          240, 230, 220, 210, 209, 208, 207, 206, 205, 204, 203, 202}]}, {
         GrayLevel[0], 
         Line[{302, 301, 311, 321, 331, 341, 351, 361, 371, 381, 391, 392, 
          393, 394, 395, 396, 397, 398, 399, 400, 390, 380, 370, 360, 350, 
          340, 330, 320, 310, 309, 308, 307, 306, 305, 304, 303, 302}]}, {
         GrayLevel[0], 
         Line[{402, 401, 411, 421, 431, 441, 451, 461, 471, 481, 491, 492, 
          493, 494, 495, 496, 497, 498, 499, 500, 490, 480, 470, 460, 450, 
          440, 430, 420, 410, 409, 408, 407, 406, 405, 404, 403, 402}]}, {
         GrayLevel[0], 
         Line[{502, 501, 511, 521, 531, 541, 551, 561, 571, 581, 591, 592, 
          593, 594, 595, 596, 597, 598, 599, 600, 590, 580, 570, 560, 550, 
          540, 530, 520, 510, 509, 508, 507, 506, 505, 504, 503, 502}]}}}, 
      VertexNormals -> CompressedData["
1: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
KV+ETF/kKkf5KJynTPkoZPqo/wF/+MBt
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.13807390836123865`, 0.7376758644548403}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$1699, $CellContext`qVec -> #]& , \
$CellContext`meshSize$$ = 8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 
    1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {0.25, 15, 20}, "numberOfMasses" -> 3, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.8200836820083681, 0.1673640167364017}, {0.6778242677824267, 
      0.6485355648535565}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
     "pointsDataTable" -> CompressedData["
1:eJxdnUtsXEd2htsSJdESLVMUJbGpF0mR1Fsi2Xy/urop77jKTtvJDCdZJYA3
2Q2XWXgRBHkMM0kwi8DIcgBuJsAA7EU2zigveKXVGDBAwICBsSHDI8WOHLnP
953JvQSE6+6+99TrVNVfdb5bnvzBn/zBjwYajcbJN/+23vx7+82/E2/+7fX/
bvUa3//1nvQWWt//3ewdfP/39ElcD670+l+/2In7GsO9Z9//fbDT+/f+fzR6
fTOzO72/79//0VHY62Lvm3bY6/Z+3b9/qIS9DvYul7DXiXRat3p/9/39zSeR
zrMb8f3hDr9fiXR3d3pL/c/vRvrH3d5bYTDs7nd7v+wn/C9HYa/b+7e+vW/b
Ya/T+9v+7++UsNcJO3uXS9gr5O9WpPv+Dr/fiHwN7ZC/y/H9h93ej/v/cb73
3fd/7W7vj/qfXx/1k3lueX/5q7DX6f0wfm+HPT+fj/Q/LNovYa9Q31Ncu73X
/R+uk6+u+SedLu33DtdO7z+i/EdRj53en0f9tMNewd537bBTevNRvyXsFeu/
LPavbexORblnu72f9j9fx5+yfaM9n3bI9xD+VHph55uj/vcflN5fhf+0w57l
b5R+u+63yd+7pd/uh9th9+BK6dfz8Rbln6L9O/jf9chns0N+L+FPBX8ZinR2
C/ZeRX6etXn+43aUw/K+Ff7b2ia94RLtvkV5x0rY2aS+psLuc8tzDX+yPi9F
vQwV/Pkc/t3unejbe3kU5d/u/WU4Urtfb4dbvR/10z0R6R9vYn+4/Kxf3k3y
N1b67b67Qf6mSLfw+7Ve//6DNs+P4ifb+PNZ6mkbf/76KNptq/c//fb4TbTX
3ib1dZLyb/D5QvSvZ+vYH4v2bKzjD5P093b0m++uUn7rdzTS39+i/t8Ovznc
JJ9fHUX5N/DXT9thbwN7J+nf6zx/AX9aox6a4c+Hq/w+Sb628OerlN/2HcVv
N7lvkHra4PsXMd4crNM+x/SvNco/QH9aI38X8KdV/K+JP61Q/kn82fq9iv9u
kN+Lkf7xOvkbpD7Xsfdl+PPuGvd/Fv68b3lPRfqHpjeCPy1jbzzas7lMfU1y
3aA845R/ne8vkq71e4Z6WsXeFzE/NFaZDz6P8bhl+qdj/Ntbxv5IiXwu8fs4
/rSIvUnKv0Z9j4c/N63vkfCT3VXyeRp/WiFfn4c/Hy7THr8Nfz5eMv+U388X
8adFnh/Hn1p8nqD8q9hr8n3WL/60wn2n8Jtl+uFn4c97S/jfl+HPB4vYO0P5
W7Y//alF/q4yPi/w+wT9aQV7Tcpv+47Qn5bI5wD1uUh9HTN/LuJ/L8Kfd1vU
72D48/6C/QN/mqd8V/GnOco/wX3L2GuS7yX7J+navgPYsXyfMj4vkP5XjM+W
923607zjB/1pDnvXqJ/H2JugPy06PlF+07tAf/LzSepzgXb8JPx53/S+Rl/M
4Y9nQ988e+z4Sv4eOf4yXj4gfxOUv8XzY/iF5R1m3JvnvhPkw/p+zvhseV+2
4/5H5P9czJ+th84/MV8c3Kf9r5WYd+5h7yblX8D/1F+Wdxh/muP+t5gnHveW
+/Y/Por0H+J/r2L+aj3A3jnSv+f8jD/fJX/XY37fu536NPI5h70rlN/yDlMv
j1KfRvoPUp9G+vdTn0a+71K/Q6R/B3uX8Z9Zync95tNn06lP477H2LtC+tbv
u+TjPvc16O/3yD/69OAO9r7Fn2+r30h/JvVp2EO3N27gz1OpT6O+HqQ+jfze
S30a99/l/tdHUf+3zV8jyj/r78zv03w+T/mnUp+GvUnTx79vmj/Sv4s/Xyb9
O6lPo/yzqU8j/Rnrh/Qtb6OoG6hf0p9IfYrfUO83YnxqjKc+jftv43+XSH8m
9WncP536NNKf4vmP2o7zUf5G+RH1/h36NNK/6vqp2G+oF8aD0dSnkf409i/h
z7dSn0b6k6lPf0a/VJ/G79dSn0a+m6lPw47rgjHqb8T+zf3vpj6N+6awf4n0
rd9zpHPd8eUo0hl3/GE+v0L6J6j/Uep3mPSHU58uYJfxj/oZSH1KO6Y+ZV5J
ffpjxknGX9Y3l7D3Cf1pxPGb8fYdx3fKfyb1Ke3q/EB+vzpSn6LT8OdR0r+c
+jSeu5j61HEpvkefvrkvvh8g/ZPYvcB4+IpyNMnvZ9TzBPX5i18dVOphFP+7
mPOW+rSBH1X16Snq6xj/ec28OlDUjdQb+fs41rFv9OkJ6jU+Z/201aeME/jz
RdIfzKvzhOn8mHajnMwPn5LeqWK/C7sjlP8L2nWc8ehb+2WxHNGO49Yz/nyR
ddY31O8Z2ulz2ve3Rz9nXEYftq2nuJ4m/ZekN1L0c/oB+UEXNSbtX/6e7fCM
fhjpPad9T1Nvz9voY/L5ol0td4Nx5kwxX/gd6Q9Z/qJfxe+T1M9oUZ/+BeNs
+PMI+ySf076n8Cf2cd74oX5L+1EvZynvIPPVML9fzCvjIumzz7I3yfg0js5v
4s9ft1kf6S+2q37EuHt8FPPdeer5Bf48wv2DpH/JcYjvx0jvKulf47PtdbOo
T/+u4ocX7E9Fv3IcoX/jz6PZL9ynYHworhu8L9J3nlIP6seT2J2iPcdIf5j8
Xch1CeOb41GJ/ZLfHLmuZHxsq/Oq7TaRfmE9MP5i9xb3mY9pfh/Dny/xvfpr
zH6Bfr1a/gY/D/+0vC/b9pNI5xzlnyraje+nsX+NfM5kvUQ6t3OetR+Gfww7
X1Gut1yHlEeMa/HcJOm+ws8tL/uVrZn0o8jHrDqD9O9wneK5e6R3JedZ9IHr
+qI+jftvFfa/GPemKf83zKez3D/E9Tbp2I/uFssZ39/PemR9UdSn5pP9PdKf
5rmGeqgwLjD+3CZdx9k7pKc+vVf0uzDzgOsN0n/I87brY+pRXTJDe52nvWYp
12vSv4O9n2/Gc3f9nfHnPp/Pc9/DHGfC3iN+Jz/NuWK9xzAyx+/sVx7ctnz0
r7vk91vmhXvln6N+SN/yNrg+wj/epfyPKfcVPs9h7wb1Np/9LK4LRX3KeqGw
f+56gvZUnz4s/xT+Q396rH+xX2F5GZeb88VxKda7pn+T9fsC+aIf7Leoj0uu
p8jfOddb9h/0+1xh/Ye/zBXH8bjO5zwR1wXyN0Y9md5NxsdFnrvl/k9Rn0b9
P8af0ZH7c4x/v4t5dne+/GOMP9G/m5aPeft4QV1K+VvFcSzsLZI/xsndJddh
kc/mcur6uG8efz5Le807/tK/FyjXJ/hPy/Gb6yLXC6S7lPNWXJf4fYJ6Wi72
47C3wnXU/QrnH/bDW+T3q9Adxy32BT5l/8Lysl+5v5Q6Iuwtu87An0xvAn9a
yXE77K0W9Sn7Ofiz+6e25wv6+1L548gY/rycui6ulneEfK2U6v7pKuWdIB9r
fO84t87v7p8ukr8z7ActMd+jg/eX0eWfsf9leqco/2pRd4S9VdIZZ395jfqe
YL9wneenqc+Noj6N/C7jz2fQ9cvlf9GnYWel/Gf/qk4zffdP11znUf51fh8n
XxtcnYc2uE5TL5vkd4T+tII/n8afVov6NKp9DXtfhD8fr6U+jfpcT30a9jZS
B4W9zdSnYW8LezP0zy3KNeJ+Mu1zivlirUQ8z3WS9fsl86flVZdvpi4Ne5v4
81W+30p9GvW2nTogru1S0afNderD/dP18oeR8fDnw43Up1H+zdSnUX7LO4o/
bZfq/ul26rKw13ZfKJ4rJfUp8QjGv5P402Z5HP0b/b7FOuErxuct0nub63bq
07i2yR/6tFlSn4Y/l6JuiPyW1KfEa/Dnk8ZzytfoU+I97PN9TfzG8p3FXpv8
Uj9PC79fi/R7hfxNxfezndSJ/ec+6KQ+jfu28ecT+NN26tOoZ8v7Ev8pNX1a
Up/GfaZ3jXx1Up/G9x3um+W5Lv7Ffu5um/Z7Kz4PldSn/fvft35ftfvj0HPL
y35l6aQ+7af/YYd02K8c6qY+DXtd8jcb49rzburTaI+CP7NfeVjKB337HxEP
6KQ+jfa0/EO0l+Vlv3K3W9w/DXtd/Bl92txxnxV/2kl9Gt2mlG8jg0fEk8uf
9Z//F3iDTu4DEI92nyfS/6Cb+jTsdckfevDpTurTsLfD87P405PUp/F9p/yg
//k1ekd7/7oZ6XTx59fsv5u+69Qd8nuZdCz/DXTBE+zd4vsn5G+W556kPo3+
3y3wDaEHP+ymPo348g72GrT/TlWfPt9JfRp3mR769MMnqU/D3nvYu4299/Cv
6cjPvvzIBHrDz83kOeL5EeLv8iQDyXMYfwp73Yw/hRl5kkHGQ3mD0ejnu/Ik
08Tf5TcmkueI34nPDe24/5Y8R7TDgPXbW2H8DHsd9km+ivHhfXkS1vdD8iSj
yXNE/qZJ1/TdR+5m/Cme6+Y+Xrh9p+c+YdRjp3eyb++T5Dl+yPgZdgqfz9Iu
8gfu+7R7xhHoH/AVN+F55EnYb+h1Mv50EP0v40/0zx76OnkO9Hebbk18/lzy
HC3GzxgPtinXLebPDvtgxBH2bd8x5lvrdzh5DvcVGb8y/hQ6qZ3xp2hXeRLj
YfIkl+i38iTEHUqnykc9L1U+6n3bFz5qSF6nkTxHhY/a3874U+R/K/koeQ7H
zyivPAl81IHteSN5jrheSZ5DPor5LfkoeQ75KHkO+Sh5DvmosLeR8acYf+QN
bK92xp8i/t6uxp925UnOJ88hHyXPEfZ++St5DvkoeQ75KHkO7CfPIR+FfqHf
GAeyPS8nz+H4Kc9h/EmeQz5KnkM+Sp5DPirsyTvIR8lXwGvtbmX8KfKb7cv8
upHxJ3kO40/yHPJR8hxRfvYb9leTjwp/ki9wfb9c5aMamxl/inzLkxjvsX2H
kueo8lGrNT7K8spHyTu4vpc3kI+Sp4BHOlzP+JM8B+MD/d3P8lHyJC/pTys9
9Bv9yfK6vl9KPirmD3mSseQ5wh482548iXzUao2PWqnxUZZXPmqZ9pCPsrzG
nxZz31iew/W9PEeVj1qt8VGmJx+13DOuJM9R5aMWa3zUYo2PkieRj1qo8VHz
NT5qucZH2b7yUfIkub6vxZ9aNT5KvkE+Sp7E9at8g+t7eRL5qKUaH7VY46Na
2JOPatX4KPkR+SjLKx9leiOMf4+xx/q+JV9hXFqeRD5KfsT9D+tXPmoee/JR
8zU+Sp7kNOuYR8lHxe8Pc9877MsbyEct1Pgo61s+Sp5EPmou+Sh5DuJjbXkO
8s/8+SDjEPIcru8jXni3xkfN1/iorN/kOYxTRvqPko+S55CPkudg/4b079b4
qDvJR4W92RofNZd8VOTX9h1JnkN9GunfT30qz6E+rfIcg6QvX+F6eib5qLB3
q8ZHPUo+Ku5/kHwU+8/cN5A8R5QPfXpwu8ZHWd633QdLfeq8GffJR02mPo36
up/6VJ6D8St5DsY32mkWe58kz8H4mDxHfD5L+SdTn8pzxO/Gn+QNJkj/TvJR
8hzx/HDyHFU+ajr5KHmOsPcyeY5I55zrsNSn+E3yUfHcWOrTSH82+Sh5jsi/
+w23Up/Kc1Tj6jdTnzrvsL9O+s3ko4wLUC+5T6c+ZZ+8xkdZXuNzE6lPo72u
pz5lnzD1KevCGh/lPrc8kvXO+v7NPB33y0dNJh8lzxH5f5dyXeW+Rq475KNo
hxofNZJ8lDxHPHeZfacz2LuRPMce7Uo7pj6V51CfynPE/caf5Bj8k195nTxH
fHZ9fzL1aeTzFfuSxsM+O1KfotOSj5LnoHzZz9Snkf5Q8lGOk2SMfXPz/S7j
4Zd8Vp9+fOT6/lt0ygF+wD528lGUq8ZHDVb1afIc8PtvdJDxJ3kO9peS54j0
ruBPXzDP3cw4o/qUcSL5KMc962Gpko9XR/IclLMtzxHpvcV6WJ5juDgO0K8z
LmTc1n3aZ/iNfmr8KdI3bnGOfvScdnp5JM9R5aNekP6JYrsZf4rv3ccfS56D
8S/jMIyPjM/HxAVGe/v4hfUW38uxyEd9Q3nlowYy/sRzGX8yTsf4X+M55AZ4
T+WNPo16+bQtHxXXr2nvt5PnYH6ingb1k7b9yHwZV7HcrtMZFzMuFs9N1HgO
+ajX7Wr86ZTtqh9l/GmxUm75KOdJuRf2yRpyJsmvJM8Rn22viaI+dZ+9ykfp
h4Opo6p8lPuEn7XVwQeVclzLetJP4qoeNM5jPOxWjY8aqcWfrN8zyXOg/47U
LfJRjiP6bdgzPfl9OY3xjAt6X+RjpsZHXcl5zbgV9p2vMv7EfIY9+aipjD8Z
N16kXuP7meSj3FeN7+Ve7iQfRT8r8lEHjAvUf/Icxp/iObmLL/F7yzuY++72
o8jH7eSjwp58wyTP3U8+ynY0/hT3GWdwXJxOPiqem8n4U6RzO8c1eY54jv3K
PfmVq3z/IP1InkN9GvffqvFRM/Zf+V7u/zR5DvmouMqvqE/vZ/wp7DzkKh/1
KONP8hyMT6Q/m/GnsGv9Gg+7m3xUPHcv+ai4PqjxUaYnH/U4+Sh5Dv0uvjfe
z37lwZ2MP0X6pmf86X7Gn+J7y/syeQ7ml+Q5jD/Jczz7/+NA8hxTyXOoT1kv
JR8V6T9IPkqew/hTpC+/8Sp5jvh+KHmOSvxpbyH5qLjKU0zx3GLyUawnM/4U
9yW/4no0+ago/3zGn6L88hvun8qTwKcfypNcZ39DnmQqeQ71aWR3rsZHzeMv
3+Ev84X9weQ5jD9F+5neO8lzVPmoJa43kucw/hTPyZPAR+3PZ/xJniPS4f3S
Zgt7P9+Mbt9KPiraf7HKR+0v5bwtzxG/M281V7AnHyXfcRl/kSfx/VJ5km/x
38WMP0X5La981HLGn+Q5qnzUSo2PWq3xUWu5DmI/K/koeQ75qCj/UpWP2pcn
kY+yvPJRqzU+yvTlo+RJ5KPkSdw/XUo+Kp5bZnx8RX9aqfFR8iTyUaupu9iP
JH/yUaYnH7VR46M2ko+K/C4nH9XP1k9WanzUao2PWksdHO0vTyIfJU8iHyVf
IR8l3yAftVXjo1ZrfNRqjY9aq/FR66lP47pR46NMTz5KnkQ+Sr5CPmq7xket
0T7yUes1Pmq9xkdZXvmozdSn8hxVPmo79ak8R+RPPqpd46PWa3zURo2P2qzx
UVs1PsryqpvlSdw/bVf1aVOeAp2yX1KfEo/BX+SjNmt81Fb5h/5n+SjTk49q
pz6V54j8jSfPoa6R55CPkudQnxKvSj6KeFb5Bn0qz/Hf/evn6GXTP027FMZr
68fy8z5nQ35B/ke+YZrnOqlPo/zbNT6qnfo04sHyGqxz3y9Vffq8pD6NUdL0
xpPniPvR1UNd7M0kzxH+xX7us3byUbG/W1KfynOoT2M/2PKyX7kvT3IxeQ75
qLDXTX0qzxH5m+H9853Up8SDk4/q3/+iJB8lz6E+jfa3/LxPMGt5R5PncB0S
9uRJJpPnkI8KezupTyOfneSj5DmqfFQ3+Sh5Dtdtka9u6tOwJ1+hHpQnUb8/
qfJRe09Sn8ITVPmo0k0+Sp5DPip4Hst3NnmOCh/13N/ho4o8yVTyHBU+aui9
Kh+1300+Ktq/m/o0/NvyvuQ8gp3Up9Hfn1T5qH3TU58+SX0a9uRJ4KMO33Pd
yPgnP+I+8BOu7t/t4PdDNb6C8yWedfP9PdqzGj9tdDN+ij/k+3v4S8ZP8Sf3
X3v4m/wA/t0ljjCUfIXvdeHPvQf95z/W38kf8//TDvsmw/h3cX+5yFdQf+gf
+RnOlziUH+F8id1uz33Z6HYdxk3jpx3iy+xTJV9xgvlJ3oD393aL++/4TZv2
mOoxHmX8lPGK/PG+3IfaP9tjvPO9H/ia0nNfEv4tz5dgPM3zJeDnqudL7G/z
eRK/6GT8lPE891kZ7zN+Kl/B+pT9oJL7WrG/Z3kHiudlhL9cIN61nfHT0A3y
BsTjZvUv9r178iO83/i0kO9B2ktehvhpU97i2Pm2Gj/d38rzJeQrIj3m/2N5
jknWV/oT+1NNeZqL7C96Honv72333FeOfG4Rf/+sLV/B/FPkK9g/YRzzfI4m
+9OeH0Fc5FA+aTzSP7Y+LxK/3O753ma0/xbt+MWRfIXvsclXRHlPF/mKqC/m
/6bndfD+3u4a7UF77Xkeie+5bpE/51vPWyF+2pAncR96g/GF8yX21vEn96fW
fD8Rf5I3UI/4mfhpcyvjp5Hfzdy3j/JvZPw0yu95IJwvcex5IJwv0bS88sjy
HPLaKxk/9byM+N04kvxIEzueN8P5Ei3reyD5CvyX/cRV/dv1UPV8icaK77cW
+Qr6T5GvCHvET/f1pybll1+Bjz6WHxlIvsI4hXxFpP+V68Xq+RKHS77/y/pI
ngJ+vCnfMYFdeZ0x+pPlvUA/Wkm+L9pfnsL4qTzL1235CsbPIl8R9pn/D1q5
bxn25Ck4X+JYfkSezvNQ5JGTn8GfljKuEfVpeX/Xlq/gPe4iX8H6k/4kb4Ae
Sb7CeOVyxk8jv0v4CedLNJYyfhrllyf5+Ei+Iuy9astXRHl9X8705LXnM37q
eRnxmfMldj2P5Ar+JB80jD95/kkj+Qr0BeOzfMc3jM/zGT8Ne3PG12i/x/me
YuRX3sD4qf7k/l2r53v77LdhDz76YL5XfY95LuOncdtj8vsOOu+R8Ufmc8/n
cP9O3uEG5bc9LzM+ex7IecZneZLXMT/sej6H50s8zvipfAXPF/kK7Bf5ivj9
BvPFHfziBumYvnpQfuQd+tdj6tPzJR7le8/yFdRfW74i/NfzJe4avy5VvkJe
ezb1KfvRGT+N9B+lPo1aeJj6lP3u2vkSd1Ofxn2eR+J71bOpT+P7Gf3XfanU
p3Hfw+T74n7Pmxmi3jx/Rb7vjv3LeEHG7eI+eQ7jVtOpT+P7qYyTyFeoT6O+
7qc+jfzeTX0a93k+x++O5CuMn1b5ihOkf8vxq8hXqE+J42LvZsZNf1y5yut4
TsVs6tPI50xVnx54HonxU89VM34qT2K88nrq0/h93PnBfc8q3/fM+h2tcuzu
T8mVZvxUXudT+G/HjYEipxfPGTceky+qvUdpHG0k9WnYvZXnSxAHSn3qvBL3
vUAPXkt9Kl8R+RpA//ner+dLXEx96jhr3PRnlDvsX03dEVfjp5Z3MLm7+P3L
I/kK46fWq/tTxHuT7/PcFfVp2DmVcTfGrSP1aaR7LfVplH8s9anrQvQf++O+
x/Z5W+4kvj9N+oPqS/eFU5/u4Ye0e/IV+hXvlSTfp47HfnJJ6lM51rD3Rdv3
HqI8Z9in9ryMi+W/eI56Ls4z8ftk+SHtHvbGU3dVyz2U+lTuUH0qp+7+lNwo
7VvUIbR/ka8gvp77SJGe+y+NWvx00PVRcmL4Z567iP8eyVfg323njbhfLuRz
yut+kOdlGD+VGzC+LF/RTK6H/kn6cqADzOMfHRk/dR1q/BR/kEPKOAJ+Xqw3
9Sn+lvtT+j3756TveyUXcp+C9XeuG1ifU0/O4+bjVC1+qg6T77uA7rhWy6dx
8ys5Tv2Ufhv1PJyc3B7t5riLHxxZD2HP+OmwXFqNA7hkXCvjp+6Tx+9T6JHf
c3/GjexH9hP7KbqjzEW95Tk6xk+r7w0OJecT9Xop9zXhn4rnZcR9U8V+f8C4
1qJc7F/lPk1cPV9iVO7qyDib8VPGDe43nus5Ep5/ZhzF720nr8blruS6Gv3U
04761LiI50vs4QdyX8zXcn25z2w7hb1bRX1qnMD4aeTD8zJ+f+5VPO/5Z1fx
v9f0b88j+cWm47zckHFrnmd8Nj25HM+v8Dy225lP+Qry73sXtMc7qQN+zThg
v/wF40w853kk7lfKc7hfKb/ifqW8gfHluxk/la+gXdx3sf171XpUn04zznu+
hPXbUA+Xaj+T52C/8tk9/EF9+iDjp+jxjJ8aN+T9rJ77+PG750vczvipfIXj
nudl0D9dT9h/SfdhLX76uBo/3Z1zfCB9eRLPKZMP+h3jzV3nJfSy55GcKPIV
VX36KPt92Jsr6lP5ikr89GDe8RP9LB90lvHmHv7n+ycP8pwu1pNyqa43q/HT
fdPzfRj5EeOD8hTET4/lD0ZZ39zP+Gmk8xB//go9+Ij2+tT3GbDn+x7yI74P
Y/qef2Z66q8W5ZlOvoJxDh7zEf48yPxqeeH7DufQoce+71GNn+5aXvcH5Tnc
P/Uz+v1QvsP46VKeLxH5navGT1vzxOO+PIp2n8d/nOcWMn4adlo5T8fV8srT
yXOo35dzXAx78hbwfYfzVU56f6GoT/u377boN5wv0ZQfOe1+V/J9YW8p+b6w
5/kcjCu7Kxk/DXurPk9/snynmT9avM/M+RIHi8kJx31LnttHubJ8pGt68n2e
RyK/5vkccodrGT+N9l/M+Gm0/xLxL86XOF6Sq/Z9M+x5Hq48h+cFy4+4P7hW
ndeO1yjPTPIV+B/9e6l2LuKyOhudtlI9X6Jh/cr3WV73B9eS72M/OuOn7Fdn
/DSe2+R3dPzxcsZP+350uILegfP+yWrGT6P91zJ+Gu2/nrov7Fle3vc49HwQ
9HvyFXCbu1uOX/Sn1aI+DTtrcu2sU+RZ5JBN3/ejTU/9vpl8X9iTp/D8M3kL
56Vtx3f60xrtw7pidx1+jXVLcwN/fsl5KRupT6P88ivGT00PnbQrP+L5CfIU
nJt13E59Gs+t5/kSUY8bBV2P/tr03EnGZ8srd76d+lS+Iu5Tf5meukGeQc61
pD6N/G7Sv3kv43gTnu4jeK0t4mZw6vvbycHLV0S+LhsPTH1KvLCqT5/Ld8zG
c6WT+jS+34IfUZ9ulz/tP8/5Eo025+14/lk79Snx0OT7Iv/yHp43Js8wRXt2
UrfJV0T9nWd83oaPeE181vL+YpNipD6Vr+D5SP+FPA3vnzzVPjq3J+8B3zfb
TQ66yle8g94o5aMoP3qwpD6N5yyv73t0avpUfsX9StOT7+umPpWviPtu53kZ
0e/g+z4s8BrE94c68IYfeR4D/oI+fW552a8s3dSn/eQ/NH3019AO9cW65v2d
1PXyFerT6N+d8tfRf/DfTtmM/uV5FalPoz3lR3jf49jyEk/f3Ul9GvZ2Up+G
vSc8j+7ef5L6NNq/gz+jT5924R+fR3/qyZPw/4+YlVchvv+B/MgY/iTvgR58
Ks/BuqQn33Ibe54Hcpb9gi7+7L7VTurTuG8n9WnYlSfxXE3Tc50sP6LekR+R
73uP++Xc3yv/B3CLMXs=
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {
    0.25, 15, 20}, $CellContext`rawNumberOfMasses$$ = 
    3, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
    3, $CellContext`tau$$ = 0, $CellContext`tick$$ = 
    True, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 0.8}, {0.9, 0.7}, {0.4, 
    1.2}, {1.3, 1.4}}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period:"]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open"]}, 
                ImageSize -> {200, 60}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Text[
                Text["Angular frequency \[Omega](q), selection:"]], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["mesh size "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`meshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin], 
                Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tau$$], 0}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`meshSize$$], 8}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`meshSize$$ = 
        8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
         1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tau$$ = 
        0, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       Dynamic[If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
            Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
              1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
           Module[{$CellContext`n$}, $CellContext`n$ = 2; 
             While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
            ReplaceAll[
              "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
             2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
              $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
              
              Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; $CellContext`bInitDefaults$$ = 
            False; Null, Null]; 
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
                $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
              True, Null]; 
           If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
                
                Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`bRefreshDynPlot$$ = 
              False, Null]; $CellContext`dynPlot$$[$CellContext`tau$$], 
           If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
            If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
               False; $CellContext`bRefreshDynamics$$ = 
               True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
            If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
              Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
            LocatorPane[
             Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                   Dimensions[#]] < 3, 
                 
                 Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
                 If[First[
                    Dimensions[#]] > 7, 
                  Take[#, 7], #]]; 
              Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                 First[
                   Dimensions[$CellContext`rawArrayOfMasses$$]]; 
                If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                    $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                  
                  While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                   AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                   Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                   Part[
                    Part[$CellContext`kArray$$, All, 1], All, 1]]; 
                If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                  Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                  
                  While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                   Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                   Part[$CellContext`u$$, 1], 
                   
                   Part[$CellContext`u$$, 
                    1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                 Part[$CellContext`glConstLocDefault, 1], 
                 Part[$CellContext`u$$, 1]]; 
              Part[$CellContext`u$$, 2] = If[Dot[
                   Part[$CellContext`u$$, 2], 
                   
                   Part[$CellContext`u$$, 
                    2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                 Part[$CellContext`glConstLocDefault, 2], 
                 Part[$CellContext`u$$, 2]]; {
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
               If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
               If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
               If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
               ReplaceAll[
                 "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
                2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
               True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
             $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
             LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period:"]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open"]}, 
                 ImageSize -> {200, 60}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Text[
                 Text["Angular frequency \[Omega](q), selection:"]], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["mesh size "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`meshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tau$$, 0}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`meshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, "DefaultOptions" :> {}],
     ImageSizeCache->{916., {293., 300.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms}, $CellContext`latticeBasis = 
          Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            Range[$CellContext`numMasses]]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, 
           "qMaxVec" -> (2 Pi) $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay]& , 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], $CellContext`pointsTable[
         Pattern[$CellContext`mPosFirstCell, 
          Blank[List]], 
         Pattern[$CellContext`latticeBasis, 
          Blank[List]], 
         Pattern[$CellContext`numberLatticeLinesToDisplay, 
          Blank[List]]] := 
       Table[$CellContext`mPosFirstCell + 
         Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
          
          Part[$CellContext`numberLatticeLinesToDisplay, 
           1]}, {$CellContext`j, -
          Part[$CellContext`numberLatticeLinesToDisplay, 2], 
          
          Part[$CellContext`numberLatticeLinesToDisplay, 
           2]}], $CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], $CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk 
            Part[$CellContext`mA, $CellContext`j]])], \
$CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], $CellContext`showDynamics[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`ql, 
          Blank[]]] := 
       Module[{$CellContext`pointsDataTable, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`e, $CellContext`omega, \
$CellContext`points, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses}, \
{{$CellContext`a, $CellContext`b}, $CellContext`pointsDataTable, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`lines, \
$CellContext`mScalarArray, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "numberLatticeLinesToDisplay", 
             "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`points = 
          Table[Part[$CellContext`pointsDataTable, $CellContext`k] + 
            Table[$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`ql, $CellContext`a $CellContext`i + \
$CellContext`b $CellContext`j] - $CellContext`omega #))], {$CellContext`i, -
               Part[$CellContext`numberLatticeLinesToDisplay, 1], 
               
               Part[$CellContext`numberLatticeLinesToDisplay, 
                1]}, {$CellContext`j, -
               Part[$CellContext`numberLatticeLinesToDisplay, 2], 
               
               Part[$CellContext`numberLatticeLinesToDisplay, 
                2]}]& , {$CellContext`k, $CellContext`numberOfMasses}]; \
$CellContext`nu = (2 Pi) If[$CellContext`omega == 0, 1, 1/$CellContext`omega]; 
         Show[{
            Table[
             ListPlot[
              Part[$CellContext`points, $CellContext`k][$CellContext`nu #], 
              PlotRange -> {{(-$CellContext`glConstWindowHalfWidth)/
                 2, $CellContext`glConstWindowHalfWidth}, \
{(-$CellContext`glConstWindowHalfWidth)/
                 2, $CellContext`glConstWindowHalfWidth}}, 
              ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
              Directive[
                PointSize[
                 Sqrt[
                 Part[$CellContext`mScalarArray, $CellContext`k] \
($CellContext`glConstMMax^(-1)/350)]], 
                $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], 
            
            Graphics[{$CellContext`lines}]}]& ], \
$CellContext`glConstPrimaryDisplaySize = {380, 380}, $CellContext`glConstMMax = 
       30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, (-Part[$CellContext`qMax, 1])/2, Part[$CellContext`qMax, 1]/
               2, Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, (-
                Part[$CellContext`qMax, 2])/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], \
$CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 
                23}}]]}]], $CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
($CellContext`glConstMMax^(-1)/500)]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> {{(-$CellContext`glConstWindowHalfWidth)/
                2, $CellContext`glConstWindowHalfWidth}, \
{(-$CellContext`glConstWindowHalfWidth)/
                2, $CellContext`glConstWindowHalfWidth}}, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           
           Ceiling[(12 $CellContext`scaleKValue) 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + ($CellContext`t (1 - 
                  2 $CellContext`f)) $CellContext`nd, $CellContext`h 
               Sin[((2 Pi) $CellContext`n) $CellContext`t]}], {$CellContext`t,
              0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 
             0.01}]}], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]]] := Module[{$CellContext`result}, $CellContext`result = If[
            
            NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], \
$CellContext`massValue = $CellContext`checkAgainstRange[
        0., 0.25, 0.25, $CellContext`glConstMMax], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , \
$CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], \
$CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.6013852883586907`*^9, 3.6013853115950203`*^9}, {
   3.601385418750149*^9, 3.6013854396273427`*^9}, 3.6013856049467983`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    True, $CellContext`couplingData$$ = {{{}}, {{{
       1, 1, {1, 0}, 0.25, 1.7740840000000009`, {0.9, 0.7}, {
        0.9720000000000001, 2.0300000000000002`}, {{0.002922071333713627, 
        0.05397715102554336}, {0.05397715102554336, 0.9970779286662863}}}, {
       1, 1, {-1, 0}, 0.25, 1.7740840000000002`, {0.9, 0.7}, {
        0.828, -0.6300000000000001}, {{0.0029220713337136284`, 
        0.053977151025543374`}, {0.053977151025543374`, 
        0.9970779286662864}}}, {
       1, 1, {1, -1}, 0.25, 3.622483999999999, {0.9, 
        0.7}, {-0.9279999999999998, 1.23}, {{
        0.9224565243076298, -0.26745183691632596`}, {-0.26745183691632596`, 
        0.07754347569237023}}}, {
       1, 1, {-1, 1}, 0.25, 3.622483999999999, {0.9, 0.7}, {
        2.7279999999999998`, 0.16999999999999993`}, {{
        0.9224565243076298, -0.26745183691632596`}, {-0.26745183691632596`, 
        0.07754347569237023}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {1, 1}, 0.25, 8.425683999999999, {0.9, 0.7}, {2.872, 2.83}, {{
        0.46153926494276315`, 0.49851857724547943`}, {0.49851857724547943`, 
        0.5384607350572369}}}, {
       1, 1, {-1, -1}, 0.25, 8.425683999999999, {0.9, 
        0.7}, {-1.072, -1.43}, {{0.46153926494276315`, 
        0.49851857724547943`}, {0.49851857724547943`, 
        0.5384607350572369}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.6790602328891914, 9.230900003615161*^-19], {
       Complex[0.7248589832535917, 0.], 
       Complex[0.650064949116095, -0.020858686170711016`], 
       Complex[0.11988513411713456`, -0.0981715969681187], 
       Complex[0.15160623794564831`, -0.028647866526790612`], 
       Complex[-0.002472802788942547, -0.01713913715451654], 
       Complex[0.05556524411678816, 0.01890267003822048]}}, {
      Complex[0.5524636587025472, -7.594543271602355*^-18], {
       Complex[-0.38354558530686395`, 0.09744499810272776], 
       Complex[0.1619813466218059, -0.23832737428749207`], 
       Complex[0.6766558452199941, 0.], 
       Complex[0.5279467930943094, 0.011722985858567875`], 
       Complex[-0.0019794387381373065`, 0.0612963317654061], 
       Complex[0.14074635807044672`, 0.0077645969691057665`]}}, {
      Complex[0.5222542056555272, 7.39373223091693*^-18], {
       Complex[-0.5047764091042254, 0.08027140607893792], 
       Complex[0.6076266586520926, 0.], 
       Complex[-0.41722429897453955`, -0.26584428115246467`], 
       Complex[-0.11870218623554862`, 0.011771602360776734`], 
       Complex[0.10106066627579662`, 0.15510216234064736`], 
       Complex[0.24672133224192438`, 0.12420825231706026`]}}, {
      Complex[0.47798270089481093`, 1.705186367657685*^-17], {
       Complex[0.11776747404882068`, -0.17021352942962187`], 
       Complex[-0.19349636076477256`, 0.18545691772731276`], 
       Complex[-0.005098087736675982, 0.0481703582836023], 
       Complex[0.12443545522518613`, -0.04846883240430583], 
       Complex[0.7520021001235273, 0.], 
       Complex[0.5450959458974042, 0.050065292585647264`]}}, {
      Complex[0.4208599945029234, 1.7181192359807767`*^-17], {
       Complex[0.046412084869462106`, -0.0633132278362492], 
       Complex[-0.15001494768060744`, 0.1368626263531111], 
       Complex[-0.49457449633790096`, -0.020339968952328036`], 
       Complex[0.7465187765334863, 0.], 
       Complex[-0.3425167147633056, -0.05320301419822421], 
       Complex[0.17190685158210708`, -0.02435844462026826]}}, {
      Complex[0.3371723422003491, 1.2680207595331082`*^-17], {
       Complex[0.08250671501222374, 0.03036710231625256], 
       Complex[-0.10759757386702096`, -0.00917692568070801], 
       Complex[0.15992951319705684`, 0.020880420200147097`], 
       Complex[-0.32856173648033754`, 0.004931060374980048], 
       Complex[-0.5245849484304596, 0.028709761501831688`], 
       Complex[0.7553839007471159, 0.]}}}, $CellContext`dynPlot$$ = Show[{
      Table[
       ListPlot[
        Part[$CellContext`points$1700, $CellContext`k][$CellContext`nu$1700 \
#], PlotRange -> {{(-$CellContext`glConstWindowHalfWidth)/
           2, $CellContext`glConstWindowHalfWidth}, \
{(-$CellContext`glConstWindowHalfWidth)/
           2, $CellContext`glConstWindowHalfWidth}}, 
        ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
        Directive[
          PointSize[
           Sqrt[
           Part[$CellContext`mScalarArray$1700, $CellContext`k] \
($CellContext`glConstMMax^(-1)/350)]], 
          $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$1700}], 
      Graphics[{$CellContext`lines$1700}]}]& , $CellContext`dynTab$$ = 
    1, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJxl2nlUzfkbB/CyjGwNypayln1NosQNFaM0KlMYkyw/JVsS0kKT7PxG5UeL
QtJUlhhJRlQyiUS61b0t9/a9t27JTtaIn3N6nnvnPM8/M+e8z5x7vft8Ps/z
Oo1Byzc4/6eNlpbWwu//aPv9385GpzLunm+f4xhV9fHLms/ZFjf37q7+WyXa
lhu9MaRaS50Ls03PTOyoElkXGi9a3+tjNuavH3vmPn9aJ+o3bHT81YZn6tz9
yIxxxctVorUbjPRNbMXqvMuyx3NcK1Qi99ZchHnqD4sDxTEqkX7r56jz8AGF
sjHP6kRWrd+rzkPXVrS/cqNOtLX1z2mNeXyG7G3XmSoR9FLn9+YWGid0r8c8
pyHC8EyLy7tsuZFHUcrVOnVfzJMcdWMHH69T98XctOOfh/stUan7Yq6z9mza
tU+avpg7+ox3K43T9MV8RNqGSGNxnbov5llNdn9kLtP0xfyMUbeAxlJNX8x/
XPz6ysAB6l7qvLx8+ZsxyzV9tfpdT/iy9UW2Yw/7uF/1NH0xH5zZo+3h25q+
mEcsd85o0a9X98U8aPoAlXGfenVfzFdMeD7ytZ2mL+b+W7dmXZ6s6Yv5nPuu
DZZGmr7q73WvDck9rFL3xbxPjtNAb1GDui/mooufm3pK1eeeY9pt2ueW2cps
95Ih41zEteq+mIcOs4xytNDcZ8zXr+0+SdmuQd0Xc7PVx8KOL9T0xbygc/f1
m/zq1H0xt5wR32ZNVq26L+ajavyebjyr6Yu51P/Ww8Ld9eq+mPtP+pp4IUbT
F/M2BwINGp7UqftG9Pzi2LK0IDtjU5SOXK7pi7nl223rrEfVq/ti3mBh6N0p
VtMX8zMrDux8HqC5z5iHe4zaN6yuVt0X828fgiP7X9D0xfxGwbztbiNV6r6Y
T7d3rv3s06Dui3nmbkfPkQM0fTHfPjXp4vlJmr6JrbkoCHLsi3kGfA72xdwS
vhf7Yp68cF3aRaFO3Rdz7IV9MT8MPwfsi/nbcUlK12uavpjXpepfz5+p6av+
88C5YF/MM+Ecsa9567mLtODcsS/mW+CeYF/Mw3/0Hzpikeb9Yj4a7iH2xRzv
LfZVf37SwRdRZzXvF3NTeBfYF/ON8I6wL+Zh8O6wL+bL4J1i33at71o0Fd41
9sW8J8wB7Iv5XkO5yREvzXzGHOcM9sV8G8wl7Iv5Mphj2BfzQJh72BdznJPY
F/NBMFexL+YuMIexb2Pr3BaJYW5jX8xxzmNfzBNhL2BfzG/AHsG+mOPewb6Y
457Cvph3gL2GfTEfD3sQ+2J+BvYm9sVcCXuWeEOEe5l4Q3Qa9jjxhmgv7H3i
DdFRcALxhigNXEG8IeoBDiHeEK0EtxBviN6Cc4g3RCpwEfGGCB1FfdW4wt6m
4LyC+SrRa1nPwA0K5qsjKVe83H5VMF85mi28vuO4gvnqVnLo0IJyBfPVzCnm
ZkbnFMxXnTpH3ny6XMF8lS4L+rurr4L5KiJshInxUQXz1cua6adTmxTMV2EW
HacFGCuYr56tW73EbK2C+epTuOsvFecVzFeRj21PuTxVMF/FSV8feZCrYL6q
PHg0KMFBwXy1v89rszgjBfPVt7IfOulEK5iv5l8N+rz+m4L5KnO5Ub/cvkrm
K+m86pctRQLzlWnt/pV9ohXMV4+ubD9y/quC+epe/oRRa7WVzFfT41JEGw4p
mK9qqtKrxr4UmK/shlbv//GrwHx1MS6i7lu9gvkqrM7v3EQnJfPVzm2bMu69
UjBf6f78Nur2ZYH56ncDUWHzXQXzlXav67+8m6NkvjJY8LzfkA5K5qsF+272
nmioYL7qkZmbeiNaYL4KmHciceokBfPV8ANvh+yZqmS+6hv3LWHSKiXzlfag
n06v2qxgvkr2kWcY5wnMVxU9h4q9eyiZr07aaDuWblAyXw15X3tLe4+C+eqg
cz8jn0yB+Sqzf4lqcaTAfLXcfFNj7iIF89X2jz/VPPJWMl+NTo22CbFXMl89
iP92wLCNgvkKc+or/Bzqq2D4XuqrJ2aFKyf+pmC+wl7UV/hzoL4acuLFrsgs
BfPVFmPtMbPclcxXUjgX6qtUOEfqqzZw7tRXBnBPqK9c53gaWo1SMl/5wz2k
vuoO95b6au4Q6ZLBIxTMV4bwLqiv2sA7or7aAe+O+qo7vFPqq73wrqmv9sAc
oL4KqtK6FaBSMF/hnKG+wrlEfWUNc4z6qgjmHvVVCcxJ6iucq9RXVTCHqa8y
YG5TX+Gcp77SKm/dC9RXB2CPUF/h3qG+Og57ivoK9xr1VTPsQeqr57A3qa/2
wJ6lvsK9TH11FPY49dV12PvUV93ACdRXduAK6qs74BDqK2dwC/VVFDiH+ioZ
XER9hY6ivtp8Jm2TY4bAfJXeQyvFT4/7KjHefn3qMoH5KqGyrjH45xrmq6wj
kRsnWtUwX62SvSrvoyswXwWsCE2fHSYwX6VuyD7/OkVgvmr+VT5AZ6TAfDVq
i4/voRE1zFcXxzabbbcTmK9C8ypnPYgVmK/6OuT0Gu4mMF+tCauwMI6pYb6S
jx+etk+/hvmq3aM3Z9t61TBfWZ/rdCGhq8B8Fe+3b6m/i8B89THYLWz6v/pi
PjLF9rPxLzXMVwkz0k7YhNUwXyUt/vaqYo7AfHVaO+zRU3OB+WpK8ImYmf/q
i3nzXHHS/Jty5qvRKnmLXrCc+WrxKVfPWNsa/vsraYeB0aYC89XvnVf1qhkl
MF/lJftZLWlXw3xlLr274sFFOfPV3J1NSdbdBOarH51DZ8RMEJivEhfsuyZ1
rWG++pTp5OSmI2e+uvvJeGu7pzLmKwfLF9dnv5czX+2e/mxaR2OB+SplszLr
5BCB+Wqg7sYxhs5y5qv68pYSn+Fy5qsO4854NLQVmK88Xk+XVf6rL+YJ+U1F
J3PlzFd3h9/23XFcxny199oGO9NEGfOVQeUwyzF5cuar3M7HDdqPEfjvr5a3
j3XVFZiv+jskm4z5ImO+MoCc+go/h/oqG76X+qrfroQ25WfkzFfYi/oKfw7U
V+2aHE7Jn8iZr3ybB3f0/VdfzHXgXKivnsE5Ul8ZwLlTXyXDPaG++mv836kX
hwjMV3PhHlJfFcC9pb7yOHjmZ7mJnPkK3wX1Fb4j6it8d9RXk+GdUl/dhHdN
fRUCc4D6ynXsg//cNxaYrxbCnKG+GgFzifrqC8wx6itLmHvUV4kwJ6mvcK5S
XyXBHKa+Gg5zm/oK5zz11QnYC9RXM2GPUF+1hb1DfSWDPUV9hXuN+qoP7EHq
K9yb1FeXYc9SX+Fepr7SWtK6x6mvLsDep74KBidQX60BV1Bf3QaHUF+lgFuo
r5LBOdRX18BF1FfoKOoriWffXJtjcuaro2+ubfkzQcZ8ZZcxplBlKWO+ko88
p3PzHxn31X7DBt+XMuardNNE3eCLMv77qwvTnPSmyJivAuNzAkpyq5mvKtev
9Nq3UsZ8pRO8+knjSxnz1Xr3S/Kz66qZr7pkpYu+BlQzX/n11nE5tlnGfLXo
dEBEco6M+SrQJGfZUycZ81WEQ5fuxflVzFcn74Ylx+ZVMl8dmjTc02dPNfNV
+367aoVMGfNVYqW4t+0pGfPVlRUPOz2eUMF8NfNDyOGcpdXMVzFrR5m+2SFj
vuqzRd97/w4Z89Vv4b52MbeqmK9Ch6/u7qNbwXxV5bHZdNBXKfNV3paBAd0L
q5mv3u/dUS2UyJiv/OOdfgieKmO+MrHakZ39PwnzVbOs80ETo2rmqxeij5M8
EmTMV5LDPQ4ssZExX/leSvMO61zJfGURGjhJ710589WaF3mPRgypYL6qN9B5
uMNaxnzV63HkivNJMuYrq0/PhOvSKuarb7ucbA/YSZivprilFV4OqWa+sgnb
10s/TsZ8dWFcwqVGVSXzVWLO/MNXUiTMV03N71zNHpYzXwVZfJxac6iC+arD
hpjkQwEy5qud54O3bNScozq37OIZXtW1gvlqCuTUV6HwOdRXP8D3Ul9Zy18G
rNWtZL7CXtRXp+HnQH01/mbC60561cxXVdsfOln4yfj/H4Rzob7S3t16jtRX
U+Dcqa/04Z5QXx0oNtQZ2lPGfIX3kPoK7y31VRfT8/eC4yqYr6TwLqiv8B1R
X7XAu6O+Gg7vlPpqC7xr6qtmmAPUV7MKnZ0yq6qZr6phzlBfhcBcor5yhzlG
fYVzj/oqHuYk9ZUI5ir1VSbMYeqrBJjb1FftYM5TXx2GvUB9lQB7hPoK9w71
VQDsKeqrxbDXqK8CYA9SX3WFvUl95Qt7lvoK9zL1VS3sceqrENj77PdX4ATq
q7/BFdRXt8Ah1Ff14BbqKxdwDvVVPLiI+godRX1lv87klvvLSuYr86/jQgbZ
VzFfmff+oq89vpL56kXC64Edw6TMV0H/PX86IFLCfBV1zGvynO//PfXVEQNb
T/O3FcxXLwpU34TiCuYrs6Xz18ybVMF8VRCXs7hvmYT5KmFgsU3Gngrmq6ye
xWP3PJYyX41eX7BytVUF89Wy8ve2TcOkzFcdN7/Km2wnYb76Z8nEvYWbJMxX
Nt0eL+j9h4T5apX7G12D+RLmq7eXtHwtoqTMV37uz84WxEmYr0YM7P1f1e5y
5qtXH7ovmtRPwnyVZ/5p/7fBUuYrq6/HotNrJcxXRXl3bL/qS5ivjMLtcw88
LGO+uh1QHWk0u4z5qtjRfnJEQznz1Usr17mN3aTMV70nX79d9ouE+cp9YnkP
H+0y5qu6dpFB1l7lzFddtsT9dOeWhPnK5eP1k+JNEuarnPbb/vL+WMp8VZbl
3mD7opj5av+s9Cl6M8uYr36PdRhxRlfCfBX5acD21fES5qvmuy/qle0lzFe2
l/fYa7uVMV/tavb2fXajnPlq7CbTusVBEuarryvWpd3vL2G+Eq33zchUPWK+
soKc+krbSWe3tlDGfHUh8Mgfb0QS5qvpNUF9e06QMF/dbE6uCnIrZ77Kgpz6
Cj+H+ioNvpf66tIx74tageXMV7Qv5rQv5k/L3MJv6kmYr6KL/O5fni1hvgqD
c6G+mg3nSH31Hs6d+grvCfXV2r5ts6bKypmvDsE9pL6SwL2lvtK//UdX+3El
zFfO8C6or/AdUV/hu2N//wreKfWVPrxr6qtXMAeor6JSHdyUTeXMV/kwZ6iv
DGEuUV/hHKO+mgZzj/oqH+Yk9RXOVeqrsTCHqa82wtymvsI5T33lBXuB+moW
7BHqq3zYO9RXuKeorzxgr7G/fwV7kPrqJuxN6qtE2LPUV7iXqa8sYI9TX72D
vU99FQNOoL46Ca6gvvodHEJ91QRuob6yAudQX1mBi6iv0FHUV0N9rs6beqSM
+Wp7tn/7f/zLmK8qpz6ZPK5DGfPV0GypOLZtKfNVQHPA9MZSMfPVlbK5d1Rp
pcxXqRnjk/T8ypivrs2fYl1vXsZ81bDwdrs/N5YyX5mYv723+UYJ81X9q1eF
oWvKmK+Ml6et2TCrjPmqc9HMVy4nS5mv7o3b+cO25yXMV2+mL/Z2W/SI+WpB
Y++f9CJLmK9K0j+Ef2woZb5q6yrMqY0tZb4an7LiSkidmPmq22nLPu/7PGK+
MqjetajQqJT5ylb/87zZPqXMVynb7F9tHlzKfPUx7sZhj3mPmK92Z1at+DS8
iPnq5KqrDmaX7jNfRTR5po5+V8x8lfwhIN/ley/qK7teJu+to8XMVxbXVy+Z
cfUB81W7kqOBHT0fMF85rjSa9bSvmPnqrnff1V2KxMxXO7uUlAz1K2a+yjca
2ffQ2XzmK/+lznYts/OYr2IKDwzy/f7npL6Suy8rNokVM18FuIQ6RViJma9K
R131uvOwkPlqkEnSmLktBcxXW1PDwnOkJcxX+YscbPqniJmv1i802tmg94D5
amvpmjrPc7nMV5sgp74KiT6Z3hh3n/nqlvLPO+lRYuarmpZnhxq0xMxXyXnW
iWe97jJfpUBOfVUNn0N9hd9LffXXtH9+6+NRxHxF+2JO+2LeKcz74eK6B8xX
xUVRGb1OiZmvAuFcqK/6wzlSX0nh3Kmv/OGeUF+pIt5HPP+fmPkqHu4h9VUg
3Fvqq9DeHu7rJt5mvgqBd0F9lQ/viPrKAd4d9ZUuvFPqK3N419RXM2AOUF/N
Too/q3VNzHyFc4b6KgHmEvXVTphj1FfvYe5RX6XCnKS+mglzlfpqEMxh6itd
mNvUVzjnqa/aw16gvhLDHqG+coW9Q32Fe4r6qhD2GvWVLuxB6ivcm9RXjbBn
qa9wL1NfPYM9Tn2VB3uf+uovcAL1VRa4gvkKHEJ9NQrcQn0lgHOor3aCi6iv
0FH/BwptPYE=
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwNw2e7qQAAAGDHdo2SnVApoZTdsCtUysh2bOf7/U/3l97zPs+Lvf/ab6fD
4fj32/U79OX8OV/CTlfE5QbcHtDjjXp9kM+fj8Vj/kAyGOrSTCYCxAN/YABE
olAOimXBaCoURhPJRokiMjAJZ0tZhEJy5Vy+WkBpFMOSKTyVZosER5B1ssRg
eJMqtyvVTpWu4cV0OMIztWI6Y07kfqMpstyky4/aHYmrD1vtw8Ls1RvjTtcY
jbXBUOaFxXiiD0eqKCmCaMnKzd5eN/Z6Ottq+kqdHk1rbyxeh+NON+y5drKW
5+Vqqaj37e6x2z/3B6HGfk7ny2r9Pp5qAv8VCg51zQMCrkg4mEy4gUggHvNB
UW8U9MegUCqZQAuRTJrhu+F0CszCUA6J5XNRJJvE0BSOpYs4TBLZEolQpVyZ
KlQrKF3FGDpDFPEaQ3As1WyQda7UqFfarSJbA+AM3e1UO+2p1HOGQ/We1B4N
G/2eqCqt4UBQ5O5k3BmPeHkiTVVlaQ20OSeJvdl0ZOgTcyFb5nhhqKvldL2a
2xt9tzX2u8Vhbx4P1um4PJ9Wl7O2tTfX7+39dng9d4/7/vk4vl/27cqKwvnn
c/q8Z73+fz/cYi0=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwNw4m2oQAAAFBn5kvml+YT3jnP7iElogWRXVkjhZRCizW7sXufNe+ec/98
+P9+/LLZbOLP3z8TxcL36Ry0OwCHM+R0gS435PaEPd4kHIG9PsQfaJcrKBCK
+L6wEEhA4UQYxkEoFgiSUaSey1NxNItiOQzP40SBSBQTyXKKTCOxTCzOZKgq
la1lcxUy3cgXmoUiWyrT6Uw8CHQqdODTzldrQq3eqzf6jabYYucjRWp3ZvJI
7nBKl1d5YdLrD9m2KcnGUBpxXV0cvg7HhaLeNltrqm11YzWeHGbzvTnrMtWd
YW40famOj/PFZW1drc19uzstlo/d/n08nZer5/7A0cxnwD/Qpn4k6gJDgRhC
cx03BPoisDMEeMJQMB6Dk4kQhgJoPEqmYpk0RODhBAHimBcOI2nSAQTxfC5N
VzIMjeWyqXKJrJSJQr7SaWdrVTRLxalModnI1Wv5Rr3EtpguV26zVJXRBuLp
+z0/HlrioN4Tusqo0e9xI7ktDdmh2JElXlVG81lvMlaXC2GsirommYY8M4eG
rizm49WyyneN3VbbWMvzSd9uFqfj7LA397v15Z91vdiDge39trldp9Z697jv
n4+awB/fr8PrORZ6/wFLkCAU
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxNk/taElEUxedAogJppIYJCVOGaT5Nj9AD1Dv1Nt4tb5gXEkUTULyA5r29
vvnNx/yxvj1nn73X2ufMWf7X71++xTzP+2GIG/4argyXhg3DvGHBsGaYNcwZ
tg0rhp+GdXKq+21YZq9sWDQsGTbh0HqLnOp24PhlqNEv7gp64n5kFs20Z1hl
b5/5xH2AnrgPieKqsq+9P/Cp5wgd6Z/AK81TesTXoEc6dfa1bpKrMtcxd9ZC
W+c4g+OQvV00rlhL88FwAcc/tNV3jbZ0OmhrfUNOdW04tHeH9rnhFg6tn9BT
7YzzPN/w3uC5gFc6I/adNKQMMRdoaJa4C6L4XrggSidh3/fM3uuCqP/T7wK9
Z8OwC9ZJoJw00waHzkuidF67gKsPPDL7K/vucYFmirnVnyGnniF6pFdwgbbO
9IYeaZYMOUPeMIr2gGHMMOgCnRwxQ12Gud4RpTNOlEYxouMTs9xvFp0Jw1t0
PhJz7KeZYxI96XwiSmeKqDOd86aOuN8272Kafc3ymeiDGXKzeGUVn+3w7hfw
xQZ7e7zRNhq6/0V8o7oV+uSpefrkpSW8VkanAtc289bor3pdv+7jo128cExf
nTcdevgAvRrrMjlxLbO3hd4JXOtwV8i18UANf7RYP/Fuq/ipiUYL/2gm+fIC
zTPqGvimwzma5C7he0C/wXlO8VPo3Rv663C04b6lroNXntEW3z1z3VEnD1zD
leQdhu++yJvweP9J/JrAS463l3Jdn8dc188JtJN4KvR/HF/24bvQw2nqhvFG
Dz4apGeAujn+zRrnd8zYi78y+HiIdYKcuPSv+tlP4bURtLOsQ6/mI34O/T2G
D0Nv5yK+LTJ7IeLvcbhCP/sRD09E/DbN2UapDT08iUaJnjy5UsTbqtP/i/FP
CvBNMat0PnB/ukf9g//JUwbQ
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxNlftWklEUxPnqSXqA7pYaZSUaKiEJKRKJiqEkiZdQMbxEkuUl7Rl60mbW
+p318cesvc639545+5wzcKe6mW/eSiQS/4TbQiZKJOaEWWFIuCvcE4aJ94Vn
xAdCkvhQeE58JLwgPhZGiAPClPBSeEX0tyfCqDCIZlUoCvPCOHpJelz7VHjD
N2tOoGedSaK50+SdS8HtOd4Kr9FcEPJCQXiHnrlniGnyaXQKROu8J05xZhm4
i8QsGEU/J4yh8YG1NctEa34k5pnf/dNCBW1rLnE/1lwmWrNEbdAZ5uxW4Ar5
FPk19HwG68Ii3KvsybkN7sMcB0JT2BS+oO1cgz6vr4VToSfU4a7QZ45PwjYa
1t8h1uF1via0hM/sa4tv7tlDz/q75L3+Rr9rz4Vj4UT4LRyxNr7C/Z1+8x2y
px323mbWH8I+6xp35nPp0rePRguuHn3ey09iB2yhcUGP9S+J5rsiWvMP0Xu5
gdd8Z3Adck4l9vS3L2+/+p0Pcn4tZvba79DvPng1SW2K3Dx35DsNHnadPRf8
GjzvdxW87Tq/tTG4XGdPTFJrHwUfj1PnfdgjGXr8LrNw2V/pKPbzBPtIwzWA
xgj7zsIVfpuG+eZ5ilHs2zxrz7ccxV6di2Kfz0SxtwtR/Ftgf+Y47xJzhG/B
h0vMlmOe4Ofg7zL903DMo7lAXYl79R3MwrfIPirU+c357duXfu9+Y/1vrkfP
OvdvXvtrFW73NOGqk1vh2wZzmD94ugFXlbxz9sJWH5f121Hs523gd9pBe5se
c9krLbg8zx7cbdYNvu3S02E+v2N7+IhzrDGTe+yXLj321Al19v8v+LrkzHfG
eR1wZsH3p3BZ55x+c12wDv+FQ1Hs2+DjS+pa9BxHsZ+v4L5mXeZcauzDHg5e
v6Guzbn4jP8DDBK3pw==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxNlf1WUlEQxe+tJ+mVeoQeoJ6lrLTUVEoRTFEQTOUjMlPUFNMQQ0IlSCxN
ywdo9lq/Wdc/9prFmXP2njNn9uXeg0f3H94JgiBmuGtIhUGwZFg0DBkeG54Y
hol9hlfEp4YR4jPDKPG5YYzYb4gRBwwzhteGN0StvTBMGAbRXKWGZUMCvRHO
aO9LQ5I1ab5FTzrTRHFPkVcuDrfuMWsYR/O9IWvIGTKGSTTniUnySfhyRGku
EKX5jjhD7Sl05tCR/o2hZzg3FAxpNItEaZaIWe7vHGW0pfmBKM2PvJU08+xN
c49hevcJrjy5OPkvhjXDumELDXF/N+wZ9g3bhhV0qryN+HaJOr9DXrkmvDq/
SX/Fu8Hd9LtGTpqHaOxwRrVU0K5wroG2NI+I0vjGOeXO0FbtLc5/NVwZOoau
oW2oo9nhvLhPDQfkerc4fqLXpJYid+hyTrkf8InrGM0ab9xi7RJt7f1DlP41
XNL5bTihlr+s6U7/iKrrgnybvus9C/SsQH3yq+Z8kB7XqMn9Kc+4hzUfmgXN
hObG/aycfOYedQ+7p8fgGiAfQ09zPg40tyn2yiNTcMtHCbQn0R8ln6T2OFzi
lp/c09NwTVDvLLUm4BIy3Mf9mQsjD89zTn1bDiM/Z8PIwwvwKu+eUq/dQ4qr
YeTbQhh9LzJwacbdxyX2pdmbR7PMPvdzmTe+4c2X0HF/K67wlhu8rc+H5kWz
qJnpwrXFnhL7K9xDvtlFe5Oc+7mKjjzlvlf8TC1Vcpq3vVtc0m7Apfr2yctH
7h1fE5d8dgCXfHMId4Pf26zV0WiiIY4WvD73a+yVp9rwyiMn7OvRpzr5U/jO
6FeDnvn3oAOXdM45Ly7581cY/RcOwSdvuy8v2KceHMPhnr+E+4rfRfqyTh16
Q/8eXLOvTr/Uj/9SgnWO
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxFledWFEEQhWcHAUVZgsoKiOyKZMlIFNklhwWVpL99AH0n3xEJYqjvzDeH
H/f0dFfVvTXdfWcq336cfE+TJPkZaAh0xORloDdQCPwqJMlVoB7PXwIXgabA
71i7CyTxfFnI8hrj+baQxRri+TrGm0CaZhzMH6TZGnnNacbxJ9CeZvVwtwT+
yT0S6Au8CjxMs9y/gSf2B3cxzfTgbnOEq9U4scdpxkdNhzroPws8UvOFNfB1
WYPOc+PMS661uk9wdQZ61OY9uuVoM9Zs77zDUzWH3GM4BtSmrqI2OmW1mb92
jbx+OYgNqg3XGzl6PCvO7CgwqjZ14/KiM2UNHBNq0Mu7wJi5k66RNy8XsdnA
sOczLQfvNOcaeQtyvA2sWw/3knqTcvXb06K5xFbsD+419eD+4AjX+8CMsarc
aNYc4dtwRHMrsCz3TmBVjl1HdPYc0dl3pPcDR3QOHdHZlHvZ/a6peWwMzRM1
4P4U2Fb/syOxU+P7ntmG9Zwrd4p7dm4f6J+Zy/zCtbr7V/Esv8pFL9xf7gv3
5kYf4gt8RgwPXOlVPHKrn8nDc9xf7vG13iYPn+OjRmvwBR5pst92z3bM+5D7
syhXp3lwtVrfaB15iXwt9lo0785vR5N98074im9QwTry8ErJGPe/z9x+52jg
lW61ye1Sv9dY0XjuT3wwYB77XJaL9xux3y73mvpBa0qeSUWuAefoDJl36Fme
2yt8w3KV7Zt7hm+m5OK88Vh+X/fcb7wwr/aUNeQtGEN7wnq0p80btW7OHifN
ow98NmPNoly5J9fMpb/c30vmwbduXu7Pqlz4blXuNef0sSLXiBqz9l2VK/d2
TdTdv9zPO8aPjMGFFzfTe5/vpvd+PrAP6rbNO7b+0n8RXjnwfM48k3H3O/dz
7m/Gj+7Bpr2gd2Je/k3ZF/Dl34BT89DGw3zL/wMLlm0f
            "]]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[{2, 1, 11, 21, 31, 41, 51, 61, 71, 81, 91, 92, 93, 94, 95, 96, 
          97, 98, 99, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 
          4, 3, 2}]}, {
         GrayLevel[0], 
         Line[{102, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 192, 
          193, 194, 195, 196, 197, 198, 199, 200, 190, 180, 170, 160, 150, 
          140, 130, 120, 110, 109, 108, 107, 106, 105, 104, 103, 102}]}, {
         GrayLevel[0], 
         Line[{202, 201, 211, 221, 231, 241, 251, 261, 271, 281, 291, 292, 
          293, 294, 295, 296, 297, 298, 299, 300, 290, 280, 270, 260, 250, 
          240, 230, 220, 210, 209, 208, 207, 206, 205, 204, 203, 202}]}, {
         GrayLevel[0], 
         Line[{302, 301, 311, 321, 331, 341, 351, 361, 371, 381, 391, 392, 
          393, 394, 395, 396, 397, 398, 399, 400, 390, 380, 370, 360, 350, 
          340, 330, 320, 310, 309, 308, 307, 306, 305, 304, 303, 302}]}, {
         GrayLevel[0], 
         Line[{402, 401, 411, 421, 431, 441, 451, 461, 471, 481, 491, 492, 
          493, 494, 495, 496, 497, 498, 499, 500, 490, 480, 470, 460, 450, 
          440, 430, 420, 410, 409, 408, 407, 406, 405, 404, 403, 402}]}, {
         GrayLevel[0], 
         Line[{502, 501, 511, 521, 531, 541, 551, 561, 571, 581, 591, 592, 
          593, 594, 595, 596, 597, 598, 599, 600, 590, 580, 570, 560, 550, 
          540, 530, 520, 510, 509, 508, 507, 506, 505, 504, 503, 502}]}}}, 
      VertexNormals -> CompressedData["
1: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
KV+ETF/kKkf5KJynTPkoZPqo/wF/+MBt
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.13807390836123865`, 0.7376758644548403}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = {
    1, 2, {0, 0}}, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 
     0.25, {1, 1, {0, -1}} -> 0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 
     0.25, {1, 1, {1, 0}} -> 0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 
     0.25, {1, 1, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$1699, $CellContext`qVec -> #]& , \
$CellContext`meshSize$$ = 8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 
    1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10}, "numberOfMasses" -> 1, 
     "latticeBasis" -> {{0.07200000000000006, 1.33}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.331947446410706, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.054056186821802625`, 0.9985378954582977}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {42, 4}, 
     "reciprocalBasis" -> {{-0.32396533570907915`, 0.7694176723090629}, {
      0.5385923706163441, -0.02915688021381715}}, 
     "reciprocalNorms" -> {0.8348395613545112, 0.5393810020291189}, 
     "qMaxVec" -> {5.245451665754915, 3.3890307869211624`}, 
     "mObliqueComponents" -> {{0.24702356847817275`, 0.4643233174050377}}, 
     "mPosFirstCell" -> {{0.9, 0.7}}, "pointsDataTable" -> CompressedData["
1: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
7SuGq94vU39sOLnEsBuk8YbT/wOHtvxf
      "], "lineTable" -> {{
        Line[{{-10.624000000000002`, -59.06}, {-4.575999999999997, 52.66}}], 
        Line[{{-8.724000000000002, -58.26}, {-2.6759999999999966`, 53.46}}], 
        Line[{{-6.8240000000000025`, -57.46}, {-0.7759999999999971, 54.26}}], 
        Line[{{-4.924000000000003, -56.66}, {1.1240000000000028`, 55.06}}], 
        Line[{{-3.0240000000000027`, -55.86}, {3.0240000000000027`, 55.86}}], 
        Line[{{-1.1240000000000028`, -55.06}, {4.924000000000003, 56.66}}], 
        Line[{{0.7759999999999971, -54.26}, {6.8240000000000025`, 57.46}}], 
        Line[{{2.6759999999999966`, -53.46}, {8.724000000000002, 58.26}}], 
        Line[{{4.575999999999997, -52.66}, {10.624000000000002`, 59.06}}]}, {
        Line[{{-10.624000000000002`, -59.06}, {4.575999999999997, -52.66}}], 
        Line[{{-10.552000000000003`, -57.730000000000004`}, {
         4.647999999999997, -51.33}}], 
        Line[{{-10.480000000000002`, -56.400000000000006`}, {
         4.719999999999997, -50.}}], 
        Line[{{-10.408000000000001`, -55.07000000000001}, {
         4.791999999999997, -48.67}}], 
        Line[{{-10.336000000000002`, -53.74000000000001}, {
         4.863999999999997, -47.34}}], 
        Line[{{-10.264000000000003`, -52.410000000000004`}, {
         4.935999999999997, -46.01}}], 
        Line[{{-10.192000000000002`, -51.080000000000005`}, {
         5.007999999999997, -44.68}}], 
        Line[{{-10.120000000000001`, -49.75000000000001}, {
         5.079999999999997, -43.35}}], 
        Line[{{-10.048000000000002`, -48.42}, {
         5.1519999999999975`, -42.019999999999996`}}], 
        Line[{{-9.976000000000003, -47.09}, {5.2239999999999975`, -40.69}}], 
        Line[{{-9.904000000000002, -45.760000000000005`}, {
         5.295999999999998, -39.36}}], 
        Line[{{-9.832, -44.43000000000001}, {5.367999999999998, -38.03}}], 
        Line[{{-9.760000000000002, -43.10000000000001}, {
         5.439999999999998, -36.7}}], 
        Line[{{-9.688000000000002, -41.77}, {5.511999999999998, -35.37}}], 
        Line[{{-9.616000000000001, -40.440000000000005`}, {
         5.583999999999998, -34.04}}], 
        Line[{{-9.544, -39.11000000000001}, {5.655999999999998, -32.71}}], 
        Line[{{-9.472000000000001, -37.78}, {5.727999999999998, -31.38}}], 
        Line[{{-9.400000000000002, -36.45}, {5.799999999999998, -30.05}}], 
        Line[{{-9.328000000000001, -35.120000000000005`}, {
         5.871999999999998, -28.720000000000002`}}], 
        Line[{{-9.256, -33.790000000000006`}, {
         5.943999999999998, -27.390000000000004`}}], 
        Line[{{-9.184000000000001, -32.46}, {
         6.015999999999998, -26.060000000000002`}}], 
        Line[{{-9.112000000000002, -31.13}, {6.087999999999998, -24.73}}], 
        Line[{{-9.040000000000001, -29.8}, {
         6.159999999999998, -23.400000000000002`}}], 
        Line[{{-8.968, -28.470000000000002`}, {
         6.231999999999998, -22.070000000000004`}}], 
        Line[{{-8.896, -27.14}, {6.3039999999999985`, -20.740000000000002`}}], 
        Line[{{-8.824000000000002, -25.81}, {6.375999999999999, -19.41}}], 
        Line[{{-8.752, -24.48}, {6.447999999999999, -18.080000000000002`}}], 
        Line[{{-8.68, -23.150000000000002`}, {
         6.519999999999999, -16.750000000000004`}}], 
        Line[{{-8.608, -21.82}, {6.591999999999999, -15.420000000000002`}}], 
        Line[{{-8.536000000000001, -20.49}, {6.663999999999999, -14.09}}], 
        Line[{{-8.464, -19.16}, {6.735999999999999, -12.760000000000002`}}], 
        Line[{{-8.392, -17.830000000000002`}, {6.807999999999999, -11.43}}], 
        Line[{{-8.32, -16.5}, {6.879999999999999, -10.100000000000001`}}], 
        Line[{{-8.248000000000001, -15.170000000000002`}, {
         6.951999999999999, -8.77}}], 
        Line[{{-8.176, -13.84}, {7.023999999999999, -7.44}}], 
        Line[{{-8.104, -12.510000000000002`}, {7.095999999999999, -6.11}}], 
        Line[{{-8.032, -11.18}, {7.167999999999999, -4.78}}], 
        Line[{{-7.96, -9.850000000000001}, {7.239999999999999, -3.45}}], 
        Line[{{-7.888, -8.52}, {7.311999999999999, -2.12}}], 
        Line[{{-7.816, -7.19}, {7.3839999999999995`, -0.79}}], 
        Line[{{-7.744, -5.86}, {7.4559999999999995`, 0.54}}], 
        Line[{{-7.672, -4.53}, {7.528, 1.87}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.528, -1.87}, {7.672, 4.53}}], 
        Line[{{-7.4559999999999995`, -0.54}, {7.744, 5.86}}], 
        Line[{{-7.3839999999999995`, 0.79}, {7.816, 7.19}}], 
        Line[{{-7.311999999999999, 2.12}, {7.888, 8.52}}], 
        Line[{{-7.239999999999999, 3.45}, {7.96, 9.850000000000001}}], 
        Line[{{-7.167999999999999, 4.78}, {8.032, 11.18}}], 
        Line[{{-7.095999999999999, 6.11}, {8.104, 12.510000000000002`}}], 
        Line[{{-7.023999999999999, 7.44}, {8.176, 13.84}}], 
        Line[{{-6.951999999999999, 8.77}, {8.248000000000001, 
         15.170000000000002`}}], 
        Line[{{-6.879999999999999, 10.100000000000001`}, {8.32, 16.5}}], 
        Line[{{-6.807999999999999, 11.43}, {8.392, 17.830000000000002`}}], 
        Line[{{-6.735999999999999, 12.760000000000002`}, {8.464, 19.16}}], 
        Line[{{-6.663999999999999, 14.09}, {8.536000000000001, 20.49}}], 
        Line[{{-6.591999999999999, 15.420000000000002`}, {8.608, 21.82}}], 
        Line[{{-6.519999999999999, 16.750000000000004`}, {8.68, 
         23.150000000000002`}}], 
        Line[{{-6.447999999999999, 18.080000000000002`}, {8.752, 24.48}}], 
        Line[{{-6.375999999999999, 19.41}, {8.824000000000002, 25.81}}], 
        Line[{{-6.3039999999999985`, 20.740000000000002`}, {8.896, 27.14}}], 
        Line[{{-6.231999999999998, 22.070000000000004`}, {8.968, 
         28.470000000000002`}}], 
        Line[{{-6.159999999999998, 23.400000000000002`}, {9.040000000000001, 
         29.8}}], 
        Line[{{-6.087999999999998, 24.73}, {9.112000000000002, 31.13}}], 
        Line[{{-6.015999999999998, 26.060000000000002`}, {9.184000000000001, 
         32.46}}], 
        Line[{{-5.943999999999998, 27.390000000000004`}, {9.256, 
         33.790000000000006`}}], 
        Line[{{-5.871999999999998, 28.720000000000002`}, {9.328000000000001, 
         35.120000000000005`}}], 
        Line[{{-5.799999999999998, 30.05}, {9.400000000000002, 36.45}}], 
        Line[{{-5.727999999999998, 31.38}, {9.472000000000001, 37.78}}], 
        Line[{{-5.655999999999998, 32.71}, {9.544, 39.11000000000001}}], 
        Line[{{-5.583999999999998, 34.04}, {9.616000000000001, 
         40.440000000000005`}}], 
        Line[{{-5.511999999999998, 35.37}, {9.688000000000002, 41.77}}], 
        Line[{{-5.439999999999998, 36.7}, {9.760000000000002, 
         43.10000000000001}}], 
        Line[{{-5.367999999999998, 38.03}, {9.832, 44.43000000000001}}], 
        Line[{{-5.295999999999998, 39.36}, {9.904000000000002, 
         45.760000000000005`}}], 
        Line[{{-5.2239999999999975`, 40.69}, {9.976000000000003, 47.09}}], 
        Line[{{-5.1519999999999975`, 42.019999999999996`}, {
         10.048000000000002`, 48.42}}], 
        Line[{{-5.079999999999997, 43.35}, {10.120000000000001`, 
         49.75000000000001}}], 
        Line[{{-5.007999999999997, 44.68}, {10.192000000000002`, 
         51.080000000000005`}}], 
        Line[{{-4.935999999999997, 46.01}, {10.264000000000003`, 
         52.410000000000004`}}], 
        Line[{{-4.863999999999997, 47.34}, {10.336000000000002`, 
         53.74000000000001}}], 
        Line[{{-4.791999999999997, 48.67}, {10.408000000000001`, 
         55.07000000000001}}], 
        Line[{{-4.719999999999997, 50.}, {10.480000000000002`, 
         56.400000000000006`}}], 
        Line[{{-4.647999999999997, 51.33}, {10.552000000000003`, 
         57.730000000000004`}}], 
        Line[{{-4.575999999999997, 52.66}, {10.624000000000002`, 
         59.06}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.6227258328774576`, 
    1.6945153934605812`}, $CellContext`qPlaneLoc$$ = {{-2.6227258328774576`, \
-1.6945153934605812`}, {2.6227258328774576`, 
    1.6945153934605812`}}, $CellContext`rawArrayOfMasses$$ = {
    10}, $CellContext`rawNumberOfMasses$$ = 1, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 3, $CellContext`tau$$ = 
    0, $CellContext`tick$$ = True, $CellContext`u$$ = {{0.07200000000000006, 
    1.33}, {1.9, 0.8}, {0.9, 0.7}}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period:"]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open"]}, 
                ImageSize -> {200, 60}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Text[
                Text["Angular frequency \[Omega](q), selection:"]], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["mesh size "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`meshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin], 
                Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tau$$], 0}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`meshSize$$], 8}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`meshSize$$ = 
        8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
         1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tau$$ = 
        0, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       Dynamic[If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
            Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
              1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
           Module[{$CellContext`n$}, $CellContext`n$ = 2; 
             While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
            ReplaceAll[
              "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
             2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
              $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
              
              Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; $CellContext`bInitDefaults$$ = 
            False; Null, Null]; 
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
                $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
              True, Null]; 
           If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
                
                Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`bRefreshDynPlot$$ = 
              False, Null]; $CellContext`dynPlot$$[$CellContext`tau$$], 
           
           If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
            If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
               False; $CellContext`bRefreshDynamics$$ = 
               True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
            If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
              Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
            LocatorPane[
             Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                   Dimensions[#]] < 3, 
                 
                 Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
                 If[First[
                    Dimensions[#]] > 7, 
                  Take[#, 7], #]]; 
              Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                 First[
                   Dimensions[$CellContext`rawArrayOfMasses$$]]; 
                If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                    $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                  
                  While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                   AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                   Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                   Part[
                    Part[$CellContext`kArray$$, All, 1], All, 1]]; 
                If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                  Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                  
                  While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                   Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                   Part[$CellContext`u$$, 1], 
                   
                   Part[$CellContext`u$$, 
                    1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                 Part[$CellContext`glConstLocDefault, 1], 
                 Part[$CellContext`u$$, 1]]; 
              Part[$CellContext`u$$, 2] = If[Dot[
                   Part[$CellContext`u$$, 2], 
                   
                   Part[$CellContext`u$$, 
                    2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                 Part[$CellContext`glConstLocDefault, 2], 
                 Part[$CellContext`u$$, 2]]; {
                 Part[$CellContext`u$$, 1], 
                 Part[$CellContext`u$$, 
                  2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
               If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
               If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
               If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
               ReplaceAll[
                 "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
                2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
               True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
             $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
             LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period:"]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open"]}, 
                 ImageSize -> {200, 60}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Text[
                 Text["Angular frequency \[Omega](q), selection:"]], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["mesh size "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`meshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tau$$, 0}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`meshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, "DefaultOptions" :> {}],
     ImageSizeCache->{916., {293., 300.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms}, $CellContext`latticeBasis = 
          Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            Range[$CellContext`numMasses]]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, 
           "qMaxVec" -> (2 Pi) $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay]& , 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], $CellContext`pointsTable[
         Pattern[$CellContext`mPosFirstCell, 
          Blank[List]], 
         Pattern[$CellContext`latticeBasis, 
          Blank[List]], 
         Pattern[$CellContext`numberLatticeLinesToDisplay, 
          Blank[List]]] := 
       Table[$CellContext`mPosFirstCell + 
         Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
          
          Part[$CellContext`numberLatticeLinesToDisplay, 
           1]}, {$CellContext`j, -
          Part[$CellContext`numberLatticeLinesToDisplay, 2], 
          
          Part[$CellContext`numberLatticeLinesToDisplay, 
           2]}], $CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], $CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk 
            Part[$CellContext`mA, $CellContext`j]])], \
$CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], $CellContext`showDynamics[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`ql, 
          Blank[]]] := 
       Module[{$CellContext`pointsDataTable, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`e, $CellContext`omega, \
$CellContext`points, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses}, \
{{$CellContext`a, $CellContext`b}, $CellContext`pointsDataTable, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`lines, \
$CellContext`mScalarArray, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "numberLatticeLinesToDisplay", 
             "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`points = 
          Table[Part[$CellContext`pointsDataTable, $CellContext`k] + 
            Table[$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`ql, $CellContext`a $CellContext`i + \
$CellContext`b $CellContext`j] - $CellContext`omega #))], {$CellContext`i, -
               Part[$CellContext`numberLatticeLinesToDisplay, 1], 
               
               Part[$CellContext`numberLatticeLinesToDisplay, 
                1]}, {$CellContext`j, -
               Part[$CellContext`numberLatticeLinesToDisplay, 2], 
               Part[$CellContext`numberLatticeLinesToDisplay, 
                2]}]& , {$CellContext`k, $CellContext`numberOfMasses}]; \
$CellContext`nu = (2 Pi) If[$CellContext`omega == 0, 1, 1/$CellContext`omega]; 
         Show[{
            Table[
             ListPlot[
              Part[$CellContext`points, $CellContext`k][$CellContext`nu #], 
              PlotRange -> {{(-$CellContext`glConstWindowHalfWidth)/
                 2, $CellContext`glConstWindowHalfWidth}, \
{(-$CellContext`glConstWindowHalfWidth)/
                 2, $CellContext`glConstWindowHalfWidth}}, 
              ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
              Directive[
                PointSize[
                 Sqrt[
                 Part[$CellContext`mScalarArray, $CellContext`k] \
($CellContext`glConstMMax^(-1)/350)]], 
                $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], 
            
            Graphics[{$CellContext`lines}]}]& ], \
$CellContext`glConstPrimaryDisplaySize = {380, 380}, $CellContext`glConstMMax = 
       30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, (-Part[$CellContext`qMax, 1])/2, Part[$CellContext`qMax, 1]/
               2, 
               Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, (-
                Part[$CellContext`qMax, 2])/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], \
$CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 
                23}}]]}]], $CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
($CellContext`glConstMMax^(-1)/500)]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> {{(-$CellContext`glConstWindowHalfWidth)/
                2, $CellContext`glConstWindowHalfWidth}, \
{(-$CellContext`glConstWindowHalfWidth)/
                2, $CellContext`glConstWindowHalfWidth}}, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           
           Ceiling[(12 $CellContext`scaleKValue) 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + ($CellContext`t (1 - 
                  2 $CellContext`f)) $CellContext`nd, $CellContext`h 
               Sin[((2 Pi) $CellContext`n) $CellContext`t]}], {$CellContext`t,
              0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 
             0.01}]}], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]]] := Module[{$CellContext`result}, $CellContext`result = If[
            
            NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], \
$CellContext`massValue = $CellContext`checkAgainstRange[
        0., 0.25, 0.25, $CellContext`glConstMMax], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , \
$CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], \
$CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.6013852883586907`*^9, 3.6013853115950203`*^9}, {
  3.601385418750149*^9, 3.6013854396273427`*^9}, {3.6013856049467983`*^9, 
  3.6013856353865395`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    True, $CellContext`couplingData$$ = {{{{
       1, 4, {0, 0}, 0.25, 0.31674399999999997`, {0.9, 0.7}, {
        0.3380000000000001, 0.6699999999999999}, {{0.9971585886394059, 
        0.05322910615512848}, {0.05322910615512848, 
        0.0028414113605940497`}}}, {
       1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       1, 5, {0, 0}, 0.25, 0.6301210000000004, {0.9, 0.7}, {1.536, 
        1.1750000000000003`}, {{0.641933850800084, 0.479431728191887}, {
        0.479431728191887, 0.3580661491999158}}}, {
       1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}}, {{
       2, 4, {0, 0}, 0.25, 0.28474400000000005`, {0.4, 1.2}, {
        0.3380000000000001, 0.6699999999999999}, {{0.013499845475233868`, 
        0.11540190486893478`}, {0.11540190486893478`, 0.986500154524766}}}, {
       2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}, {
       2, 5, {0, 0}, 0.25, 1.2911210000000002`, {0.4, 1.2}, {1.536, 
        1.1750000000000003`}, {{
        0.9995159245337967, -0.021996389184282223`}, {-0.021996389184282223`, 
        0.0004840754662033879}}}}, {{
       3, 5, {0, 0}, 0.25, 0.10632099999999983`, {1.3, 1.4}, {1.536, 
        1.1750000000000003`}, {{
        0.5238475936080368, -0.49943096848223767`}, {-0.49943096848223767`, 
        0.47615240639196316`}}}, {
       3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}, {
       3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}, {
       3, 4, {0, 0}, 0.25, 1.4583439999999999`, {1.3, 1.4}, {
        0.3380000000000001, 0.6699999999999999}, {{0.6345855298886958, 
        0.48154619211928057`}, {0.48154619211928057`, 
        0.36541447011130435`}}}}, {{
       4, 2, {0, 0}, 0.25, 0.28474400000000005`, {0.4, 1.2}, {
        0.3380000000000001, 0.6699999999999999}, {{0.013499845475233868`, 
        0.11540190486893478`}, {0.11540190486893478`, 0.986500154524766}}}, {
       4, 1, {0, 0}, 0.25, 0.31674399999999997`, {0.9, 0.7}, {
        0.3380000000000001, 0.6699999999999999}, {{0.9971585886394059, 
        0.05322910615512848}, {0.05322910615512848, 
        0.0028414113605940497`}}}, {
       4, 3, {0, 0}, 0.25, 1.4583439999999999`, {1.3, 1.4}, {
        0.3380000000000001, 0.6699999999999999}, {{0.6345855298886958, 
        0.48154619211928057`}, {0.48154619211928057`, 
        0.36541447011130435`}}}, {
       4, 5, {0, 0}, 0.25, 1.6902290000000002`, {0.3380000000000001, 
        0.6699999999999999}, {1.536, 1.1750000000000003`}, {{
        0.8491180780829105, 0.3579337474389567}, {0.3579337474389567, 
        0.15088192191708952`}}}}, {{
       5, 3, {0, 0}, 0.25, 0.10632099999999983`, {1.3, 1.4}, {1.536, 
        1.1750000000000003`}, {{
        0.5238475936080368, -0.49943096848223767`}, {-0.49943096848223767`, 
        0.47615240639196316`}}}, {
       5, 1, {0, 0}, 0.25, 0.6301210000000004, {0.9, 0.7}, {1.536, 
        1.1750000000000003`}, {{0.641933850800084, 0.479431728191887}, {
        0.479431728191887, 0.3580661491999158}}}, {
       5, 2, {0, 0}, 0.25, 1.2911210000000002`, {0.4, 1.2}, {1.536, 
        1.1750000000000003`}, {{
        0.9995159245337967, -0.021996389184282223`}, {-0.021996389184282223`, 
        0.0004840754662033879}}}, {
       5, 4, {0, 0}, 0.25, 1.6902290000000002`, {0.3380000000000001, 
        0.6699999999999999}, {1.536, 1.1750000000000003`}, {{
        0.8491180780829105, 0.3579337474389567}, {0.3579337474389567, 
        0.15088192191708952`}}}}}, {{{
       1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
        0.09999999999999987}, {{
        0.19999999999999987`, -0.3999999999999999}, {-0.3999999999999999, 
        0.8}}}, {
       1, 5, {-1, 0}, 0.25, 0.9679209999999996, {0.9, 0.7}, {
        1.436, -0.12499999999999978`}, {{
        0.29681761218115943`, -0.45685546651018}, {-0.45685546651018, 
        0.7031823878188403}}}, {
       1, 2, {-1, 0}, 0.25, 1., {0.9, 0.7}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       1, 2, {-1, 1}, 0.25, 1.6899999999999995`, {0.9, 0.7}, {
        2.1999999999999997`, 0.7}, {{0.9999999999999999, 0.}, {0., 0.}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 5, {0, -1}, 0.25, 1.7033209999999994`, {0.9, 
        0.7}, {-0.3639999999999999, 0.3750000000000002}, {{0.9379887877857432,
         0.24117591458098606`}, {0.24117591458098606`, 
        0.06201121221425666}}}, {
       1, 4, {-1, 1}, 0.25, 1.8135439999999998`, {0.9, 0.7}, {2.138, 
        0.16999999999999993`}, {{
        0.8451099063491153, -0.36179987913168915`}, {-0.36179987913168915`, 
        0.1548900936508847}}}, {
       1, 4, {1, 0}, 0.25, 1.826344, {0.9, 0.7}, {0.43800000000000006`, 
        1.97}, {{
        0.11686954921964317`, -0.32126477815789356`}, {-0.32126477815789356`, 
        0.8831304507803569}}}, {
       1, 4, {-1, 0}, 0.25, 2.207144, {0.9, 0.7}, {
        0.23800000000000007`, -0.6300000000000001}, {{0.19855704929084822`, 
        0.39891370930034464`}, {0.39891370930034464`, 0.8014429507091517}}}, {
       1, 3, {0, -1}, 0.25, 2.2600000000000002`, {0.9, 
        0.7}, {-0.5999999999999999, 0.5999999999999999}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       1, 5, {1, -1}, 0.25, 2.3055209999999997`, {0.9, 
        0.7}, {-0.2639999999999998, 1.6750000000000003`}, {{
        0.5876745429774872, -0.4922531609991842}, {-0.4922531609991842, 
        0.41232545702251283`}}}, {
       1, 4, {0, 1}, 0.25, 2.383144, {0.9, 0.7}, {2.238, 1.47}, {{
        0.7512110052938471, 0.4323112661257566}, {0.4323112661257566, 
        0.24878899470615287`}}}, {
       1, 3, {1, -1}, 0.25, 3.3999999999999995`, {0.9, 
        0.7}, {-0.4999999999999998, 1.9}, {{
        0.5764705882352942, -0.4941176470588236}, {-0.4941176470588236, 
        0.423529411764706}}}, {
       1, 2, {1, 0}, 0.25, 3.4000000000000004`, {0.9, 0.7}, {0.5, 2.5}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 2, {0, 1}, 0.25, 3.65, {0.9, 0.7}, {2.3, 2.}, {{0.5369863013698629, 
        0.4986301369863013}, {0.4986301369863013, 0.463013698630137}}}, {
       1, 5, {1, 0}, 0.25, 3.6923210000000024`, {0.9, 0.7}, {
        1.6360000000000001`, 2.4750000000000005`}, {{0.14670880457035015`, 
        0.35381539145702656`}, {0.35381539145702656`, 0.8532911954296498}}}, {
       1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 2.7}, {{
        0.05882352941176473, 0.23529411764705888`}, {0.23529411764705888`, 
        0.9411764705882353}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 5, {-1, -1}, 0.25, 4.501120999999999, {0.9, 
        0.7}, {-0.46399999999999997`, -0.9249999999999998}, {{
        0.41334058782245586`, 0.49243288505241256`}, {0.49243288505241256`, 
        0.5866594121775442}}}, {
       1, 3, {-1, -1}, 0.25, 4.520000000000001, {0.9, 
        0.7}, {-0.7, -0.7000000000000002}, {{0.5663716814159291, 
        0.49557522123893794`}, {0.49557522123893794`, 
        0.43362831858407075`}}}, {
       1, 3, {-1, 1}, 0.25, 4.879999999999999, {0.9, 0.7}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       1, 4, {1, -1}, 0.25, 5.799943999999999, {0.9, 
        0.7}, {-1.4619999999999997`, 1.17}, {{
        0.9619134253710035, -0.191405296326999}, {-0.191405296326999, 
        0.03808657462899642}}}, {
       1, 2, {0, -1}, 0.25, 5.85, {0.9, 0.7}, {-1.5, 0.3999999999999999}, {{
        0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
        0.015384615384615389`}}}, {
       1, 5, {-1, 1}, 0.25, 5.934721, {0.9, 0.7}, {3.336, 
        0.6750000000000003}, {{
        0.9998946875514451, -0.010261644987186297`}, {-0.010261644987186297`, 
        0.00010531244855486628`}}}, {
       1, 2, {1, -1}, 0.25, 6.289999999999999, {0.9, 0.7}, {-1.4, 1.7}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       1, 4, {1, 1}, 0.25, 6.352744000000001, {0.9, 0.7}, {2.338, 2.77}, {{
        0.3255040656447041, 0.4685628761366742}, {0.4685628761366742, 
        0.674495934355296}}}, {
       1, 4, {0, -1}, 0.25, 6.750343999999999, {0.9, 
        0.7}, {-1.5619999999999998`, -0.13000000000000012`}, {{
        0.8979459417179332, 0.3027193873378898}, {0.3027193873378898, 
        0.10205405828206683`}}}, {
       1, 3, {0, 1}, 0.25, 7.540000000000002, {0.9, 0.7}, {3.2, 2.2}, {{
        0.7015915119363394, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       1, 5, {0, 1}, 0.25, 8.056921, {0.9, 0.7}, {3.436, 
        1.9750000000000003`}, {{0.798232476153111, 0.40131956115741985`}, {
        0.40131956115741985`, 0.201767523846889}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 2, {-1, -1}, 0.25, 8.81, {0.9, 0.7}, {-1.6, -0.9000000000000001}, {{
        0.7094211123723042, 0.4540295119182747}, {0.4540295119182747, 
        0.29057888762769585`}}}, {
       1, 2, {1, 1}, 0.25, 9.009999999999998, {0.9, 0.7}, {2.4, 3.3}, {{
        0.24972253052164267`, 0.4328523862375139}, {0.4328523862375139, 
        0.7502774694783573}}}, {
       1, 4, {-1, -1}, 0.25, 11.100743999999999`, {0.9, 
        0.7}, {-1.662, -1.4300000000000002`}, {{0.5912976643727664, 
        0.4915940769375458}, {0.4915940769375458, 0.4087023356272336}}}, {
       1, 5, {1, 1}, 0.25, 13.579121, {0.9, 0.7}, {3.536, 
        3.2750000000000004`}, {{0.5117044026634714, 0.4998629881860542}, {
        0.4998629881860542, 0.48829559733652866`}}}, {
       1, 3, {1, 1}, 0.25, 13.599999999999998`, {0.9, 0.7}, {3.3, 3.5}, {{
        0.423529411764706, 0.4941176470588236}, {0.4941176470588236, 
        0.5764705882352942}}}}, {{
       2, 4, {1, 0}, 0.25, 0.594344, {0.4, 1.2}, {0.43800000000000006`, 
        1.97}, {{0.0024295694076157956`, 0.049230748522741084`}, {
        0.049230748522741084`, 0.9975704305923841}}}, {
       2, 5, {1, -1}, 0.25, 0.666521, {0.4, 1.2}, {-0.2639999999999998, 
        1.6750000000000003`}, {{
        0.6614885352449505, -0.473203394941795}, {-0.473203394941795, 
        0.3385114647550494}}}, {
       2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       2, 5, {0, -1}, 0.25, 1.2643209999999994`, {0.4, 
        1.2}, {-0.3639999999999999, 0.3750000000000002}, {{
        0.46166756701818623`, 0.4985284591492193}, {0.4985284591492193, 
        0.538332432981814}}}, {
       2, 3, {1, -1}, 0.25, 1.2999999999999996`, {0.4, 
        1.2}, {-0.4999999999999998, 1.9}, {{
        0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
        0.376923076923077}}}, {
       2, 3, {0, -1}, 0.25, 1.3599999999999999`, {0.4, 
        1.2}, {-0.5999999999999999, 0.5999999999999999}, {{0.7352941176470588,
         0.44117647058823534`}, {0.44117647058823534`, 
        0.2647058823529413}}}, {
       2, 1, {1, -1}, 0.25, 1.6899999999999995`, {0.4, 
        1.2}, {-0.8999999999999998, 1.2}, {{0.9999999999999999, 0.}, {0., 
        0.}}}, {2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
        2.5}, {{0.005882352941176467, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 0.09999999999999987}, {{
        0.34594594594594585`, -0.4756756756756756}, {-0.4756756756756756, 
        0.654054054054054}}}, {
       2, 5, {-1, 0}, 0.25, 2.8289209999999994`, {0.4, 1.2}, {
        1.436, -0.12499999999999978`}, {{
        0.37940119218599605`, -0.485238011241742}, {-0.485238011241742, 
        0.6205988078140039}}}, {
       2, 5, {1, 0}, 0.25, 3.153321000000002, {0.4, 1.2}, {
        1.6360000000000001`, 2.4750000000000005`}, {{0.48447208514451895`, 
        0.49975882569519564`}, {0.49975882569519564`, 0.5155279148554811}}}, {
       2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
        1.4000000000000001`, 2.7}, {{0.3076923076923076, 
        0.46153846153846145`}, {0.46153846153846145`, 0.6923076923076924}}}, {
       2, 4, {-1, 0}, 0.25, 3.3751440000000006`, {0.4, 1.2}, {
        0.23800000000000007`, -0.6300000000000001}, {{0.007775668238155165, 
        0.08783625231990098}, {0.08783625231990098, 0.9922243317618448}}}, {
       2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
        0.8, -0.6000000000000001}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       2, 4, {0, 1}, 0.25, 3.4511440000000007`, {0.4, 1.2}, {2.238, 1.47}, {{
        0.9788765696244491, 0.14379579640837933`}, {0.14379579640837933`, 
        0.02112343037555083}}}, {
       2, 4, {1, -1}, 0.25, 3.467943999999999, {0.4, 
        1.2}, {-1.4619999999999997`, 1.17}, {{0.9997404802384351, 
        0.01610752653445386}, {0.01610752653445386, 
        0.0002595197615647778}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {-1.4, 1.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {
        2.1999999999999997`, 0.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {0, -1}, 0.25, 3.65, {0.4, 
        1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
        0.463013698630137}}}, {
       2, 4, {-1, 1}, 0.25, 4.081544, {0.4, 1.2}, {2.138, 
        0.16999999999999993`}, {{
        0.7400738544041177, -0.4385938262579063}, {-0.4385938262579063, 
        0.25992614559588234`}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 0.3999999999999999}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 3, {-1, -1}, 0.25, 4.82, {0.4, 1.2}, {-0.7, -0.7000000000000002}, {{
        0.25103734439834025`, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       2, 5, {-1, -1}, 0.25, 5.262121, {0.4, 
        1.2}, {-0.46399999999999997`, -0.9249999999999998}, {{
        0.14186218826971103`, 0.348908738510574}, {0.348908738510574, 
        0.858137811730289}}}, {
       2, 4, {0, -1}, 0.25, 5.618344, {0.4, 
        1.2}, {-1.5619999999999998`, -0.13000000000000012`}, {{
        0.6851563378817672, 0.4644535827638892}, {0.4644535827638892, 
        0.3148436621182328}}}, {
       2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{0.9846153846153846,
         0.1230769230769231}, {0.1230769230769231, 0.015384615384615389`}}}, {
       2, 4, {1, 1}, 0.25, 6.220744000000001, {0.4, 1.2}, {2.338, 2.77}, {{
        0.6037612221303432, 0.48911512835120685`}, {0.48911512835120685`, 
        0.39623877786965667`}}}, {
       2, 1, {-1, 1}, 0.25, 6.289999999999999, {0.4, 1.2}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       2, 3, {-1, 1}, 0.25, 7.379999999999998, {0.4, 1.2}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9878048780487806, -0.10975609756097565`}, {-0.10975609756097565`, 
        0.01219512195121952}}}, {
       2, 2, {1, 1}, 0.25, 8.409999999999998, {0.4, 1.2}, {2.4, 3.3}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {0.4, 1.2}, {-1.6, -0.9000000000000001}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 1, {1, 1}, 0.25, 8.809999999999999, {0.4, 1.2}, {2.9, 2.8}, {{
        0.7094211123723043, 0.4540295119182747}, {0.4540295119182747, 
        0.2905788876276958}}}, {
       2, 3, {0, 1}, 0.25, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
        0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570139`}}}, {
       2, 5, {-1, 1}, 0.25, 8.895721, {0.4, 1.2}, {3.336, 
        0.6750000000000003}, {{
        0.9690160021880183, -0.17327431919233968`}, {-0.17327431919233968`, 
        0.030983997811981703`}}}, {
       2, 1, {-1, -1}, 0.25, 9.010000000000002, {0.4, 
        1.2}, {-1.1, -1.4000000000000001`}, {{0.24972253052164256`, 
        0.4328523862375138}, {0.4328523862375138, 0.7502774694783573}}}, {
       2, 5, {0, 1}, 0.25, 9.817921000000002, {0.4, 1.2}, {3.436, 
        1.9750000000000003`}, {{0.9388236063419129, 0.23965358857542252`}, {
        0.23965358857542252`, 0.06117639365808712}}}, {
       2, 4, {-1, -1}, 0.25, 11.168743999999998`, {0.4, 
        1.2}, {-1.662, -1.4300000000000002`}, {{0.3806913293025608, 
        0.4855568361133535}, {0.4855568361133535, 0.6193086706974392}}}, {
       2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{0.6138686131386862,
         0.48686131386861314`}, {0.48686131386861314`, 
        0.3861313868613139}}}, {
       2, 5, {1, 1}, 0.25, 14.140121000000002`, {0.4, 1.2}, {3.536, 
        3.2750000000000004`}, {{0.6955029592745352, 0.4601940817903892}, {
        0.4601940817903892, 0.3044970407254648}}}}, {{
       3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
        0.19999999999999998`, -0.39999999999999997`}, {-0.39999999999999997`, 
        0.7999999999999999}}}, {
       3, 4, {0, 1}, 0.25, 0.8847439999999999, {1.3, 1.4}, {2.238, 1.47}, {{
        0.9944616747895436, 0.07421355782011527}, {0.07421355782011527, 
        0.005538325210456369}}}, {
       3, 4, {1, 0}, 0.25, 1.067944, {1.3, 1.4}, {0.43800000000000006`, 
        1.97}, {{
        0.6957705647487133, -0.4600803038361562}, {-0.4600803038361562, 
        0.30422943525128665`}}}, {
       3, 5, {1, 0}, 0.25, 1.2685210000000013`, {1.3, 1.4}, {
        1.6360000000000001`, 2.4750000000000005`}, {{0.0889981324708065, 
        0.28474104882772927`}, {0.28474104882772927`, 0.9110018675291935}}}, {
       3, 2, {-1, 1}, 0.25, 1.2999999999999994`, {1.3, 1.4}, {
        2.1999999999999997`, 0.7}, {{
        0.6230769230769229, -0.48461538461538467`}, {-0.48461538461538467`, 
        0.3769230769230771}}}, {
       3, 2, {0, 1}, 0.25, 1.3599999999999997`, {1.3, 1.4}, {2.3, 2.}, {{
        0.7352941176470587, 0.4411764705882354}, {0.4411764705882354, 
        0.2647058823529413}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
        1.4000000000000001`, 2.7}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
        0.09999999999999987}, {{0.00588235294117648, 0.07647058823529418}, {
        0.07647058823529418, 0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 2.5}, {{
        0.34594594594594597`, -0.47567567567567565`}, {-0.47567567567567565`, 
        0.654054054054054}}}, {
       3, 4, {-1, 1}, 0.25, 2.2151439999999996`, {1.3, 1.4}, {2.138, 
        0.16999999999999993`}, {{
        0.31701957073671055`, -0.46531512172572076`}, {-0.46531512172572076`, 
        0.6829804292632895}}}, {
       3, 1, {0, 1}, 0.25, 2.26, {1.3, 1.4}, {2.8, 1.5}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       3, 5, {-1, 0}, 0.25, 2.344120999999999, {1.3, 1.4}, {
        1.436, -0.12499999999999978`}, {{
        0.007890377672483621, -0.08847666140101125}, {-0.08847666140101125, 
        0.9921096223275164}}}, {
       3, 5, {1, -1}, 0.25, 2.5217209999999994`, {1.3, 
        1.4}, {-0.2639999999999998, 1.6750000000000003`}, {{
        0.9700105602483383, -0.17055812280581423`}, {-0.17055812280581423`, 
        0.029989439751661746`}}}, {
       3, 4, {1, 1}, 0.25, 2.9543440000000003`, {1.3, 1.4}, {2.338, 2.77}, {{
        0.36469822065406055`, 0.4813454357380183}, {0.4813454357380183, 
        0.6353017793459393}}}, {
       3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.3076923076923077, 
        0.46153846153846156`}, {0.46153846153846156`, 0.6923076923076923}}}, {
       3, 1, {-1, 1}, 0.25, 3.399999999999999, {1.3, 1.4}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.576470588235294, -0.4941176470588235}, {-0.4941176470588235, 
        0.423529411764706}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.3, 
        1.4}, {-0.4999999999999998, 1.9}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999984`, {1.3, 1.4}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9283667621776505, -0.25787965616045855`}, {-0.25787965616045855`, 
        0.07163323782234961}}}, {
       3, 5, {0, -1}, 0.25, 3.819520999999999, {1.3, 
        1.4}, {-0.3639999999999999, 0.3750000000000002}, {{0.7249327860744843,
         0.4465481404605446}, {0.4465481404605446, 0.27506721392551564`}}}, {
       3, 3, {0, 1}, 0.25, 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
        0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.3, 1.4}, {-0.5999999999999999, 
        0.5999999999999999}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {0.8, -0.6000000000000001}, {{
        0.058823529411764705`, 0.23529411764705882`}, {0.23529411764705882`, 
        0.9411764705882353}}}, {
       3, 1, {1, 1}, 0.25, 4.52, {1.3, 1.4}, {2.9, 2.8}, {{0.5663716814159292,
         0.49557522123893805`}, {0.49557522123893805`, 
        0.43362831858407075`}}}, {
       3, 5, {-1, 1}, 0.25, 4.670920999999998, {1.3, 1.4}, {3.336, 
        0.6750000000000003}, {{
        0.8874686598210503, -0.31601904635081596`}, {-0.31601904635081596`, 
        0.11253134017894965`}}}, {
       3, 2, {1, 1}, 0.25, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
        0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       3, 1, {1, -1}, 0.25, 4.879999999999999, {1.3, 
        1.4}, {-0.8999999999999998, 1.2}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       3, 5, {0, 1}, 0.25, 4.893121000000001, {1.3, 1.4}, {3.436, 
        1.9750000000000003`}, {{0.9324306511120407, 0.25100544212988}, {
        0.25100544212988, 0.06756934888795932}}}, {
       3, 4, {-1, 0}, 0.25, 5.248744, {1.3, 1.4}, {
        0.23800000000000007`, -0.6300000000000001}, {{0.21487883577480632`, 
        0.4107382642399782}, {0.4107382642399782, 0.7851211642251937}}}, {
       3, 2, {1, -1}, 0.25, 7.380000000000001, {1.3, 1.4}, {-1.4, 1.7}, {{
        0.9878048780487805, -0.10975609756097562`}, {-0.10975609756097562`, 
        0.012195121951219514`}}}, {
       3, 1, {0, -1}, 0.25, 7.539999999999999, {1.3, 
        1.4}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7015915119363395, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       3, 4, {1, -1}, 0.25, 7.681543999999998, {1.3, 
        1.4}, {-1.4619999999999997`, 1.17}, {{0.9931133636675127, 
        0.08269951978404343}, {0.08269951978404343, 0.006886636332487324}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{0.4756242568370986,
         0.49940546967895355`}, {0.49940546967895355`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.3, 1.4}, {-0.7, -0.7000000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 5, {1, 1}, 0.25, 8.515321, {1.3, 1.4}, {3.536, 
        3.2750000000000004`}, {{0.5871412246232408, 0.4923478515959646}, {
        0.4923478515959646, 0.41285877537675936`}}}, {
       3, 5, {-1, -1}, 0.25, 8.517320999999999, {1.3, 
        1.4}, {-0.46399999999999997`, -0.9249999999999998}, {{
        0.3653374106717359, 0.48152464841937975`}, {0.48152464841937975`, 
        0.634662589328264}}}, {
       3, 2, {0, -1}, 0.25, 8.84, {1.3, 1.4}, {-1.5, 0.3999999999999999}, {{
        0.8868778280542985, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570136`}}}, {
       3, 4, {0, -1}, 0.25, 10.531944, {1.3, 
        1.4}, {-1.5619999999999998`, -0.13000000000000012`}, {{
        0.777733341536947, 0.41576939641912264`}, {0.41576939641912264`, 
        0.22226665846305296`}}}, {
       3, 1, {-1, -1}, 0.25, 13.600000000000001`, {1.3, 
        1.4}, {-1.1, -1.4000000000000001`}, {{0.42352941176470593`, 
        0.4941176470588235}, {0.4941176470588235, 0.576470588235294}}}, {
       3, 2, {-1, -1}, 0.25, 13.700000000000001`, {1.3, 
        1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
        0.4868613138686131}, {0.4868613138686131, 0.38613138686131376`}}}, {
       3, 4, {-1, -1}, 0.25, 16.782344, {1.3, 
        1.4}, {-1.662, -1.4300000000000002`}, {{0.5227782245436036, 
        0.49948088300418586`}, {0.49948088300418586`, 
        0.4772217754563964}}}}, {{
       4, 5, {0, -1}, 0.25, 0.5798289999999998, {0.3380000000000001, 
        0.6699999999999999}, {-0.3639999999999999, 0.3750000000000002}, {{
        0.8499126466596189, 0.3571570238811785}, {0.3571570238811785, 
        0.15008735334038115`}}}, {
       4, 2, {-1, 0}, 0.25, 0.594344, {0.3380000000000001, 
        0.6699999999999999}, {0.30000000000000004`, -0.10000000000000009`}, {{
        0.0024295694076157956`, 0.049230748522741084`}, {
        0.049230748522741084`, 0.9975704305923841}}}, {
       4, 3, {0, -1}, 0.25, 0.8847439999999999, {0.3380000000000001, 
        0.6699999999999999}, {-0.5999999999999999, 0.5999999999999999}, {{
        0.9944616747895436, 0.07421355782011527}, {0.07421355782011527, 
        0.005538325210456369}}}, {
       4, 3, {-1, 0}, 0.25, 1.0679439999999998`, {0.3380000000000001, 
        0.6699999999999999}, {1.2, 0.09999999999999987}, {{
        0.6957705647487133, -0.4600803038361563}, {-0.4600803038361563, 
        0.3042294352512867}}}, {
       4, 5, {1, -1}, 0.25, 1.3724290000000003`, {0.3380000000000001, 
        0.6699999999999999}, {-0.2639999999999998, 1.6750000000000003`}, {{
        0.26406029018623167`, -0.4408315475700382}, {-0.4408315475700382, 
        0.7359397098137684}}}, {
       4, 4, {1, 0}, 0.25, 1.7000000000000002`, {0.3380000000000001, 
        0.6699999999999999}, {0.43800000000000006`, 1.97}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       4, 4, {-1, 0}, 0.25, 1.7000000000000002`, {0.3380000000000001, 
        0.6699999999999999}, {0.23800000000000007`, -0.6300000000000001}, {{
        0.0058823529411764705`, 0.07647058823529411}, {0.07647058823529411, 
        0.9941176470588234}}}, {
       4, 1, {1, -1}, 0.25, 1.8135439999999998`, {0.3380000000000001, 
        0.6699999999999999}, {-0.8999999999999998, 1.2}, {{
        0.8451099063491153, -0.36179987913168915`}, {-0.36179987913168915`, 
        0.1548900936508847}}}, {
       4, 1, {-1, 0}, 0.25, 1.826344, {0.3380000000000001, 
        0.6699999999999999}, {0.8, -0.6000000000000001}, {{
        0.11686954921964317`, -0.32126477815789356`}, {-0.32126477815789356`, 
        0.8831304507803569}}}, {
       4, 5, {-1, 0}, 0.25, 1.8376289999999993`, {0.3380000000000001, 
        0.6699999999999999}, {1.436, -0.12499999999999978`}, {{
        0.656064961970017, -0.47501971290178807`}, {-0.47501971290178807`, 
        0.3439350380299831}}}, {
       4, 1, {1, 0}, 0.25, 2.207144, {0.3380000000000001, 
        0.6699999999999999}, {1., 2.}, {{0.19855704929084822`, 
        0.39891370930034464`}, {0.39891370930034464`, 0.8014429507091517}}}, {
       4, 3, {1, -1}, 0.25, 2.2151439999999996`, {0.3380000000000001, 
        0.6699999999999999}, {-0.4999999999999998, 1.9}, {{
        0.31701957073671055`, -0.46531512172572076`}, {-0.46531512172572076`, 
        0.6829804292632895}}}, {
       4, 1, {0, -1}, 0.25, 2.383144, {0.3380000000000001, 
        0.6699999999999999}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7512110052938471, 0.4323112661257566}, {0.4323112661257566, 
        0.24878899470615287`}}}, {
       4, 3, {-1, -1}, 0.25, 2.9543440000000003`, {0.3380000000000001, 
        0.6699999999999999}, {-0.7, -0.7000000000000002}, {{
        0.36469822065406055`, 0.4813454357380183}, {0.4813454357380183, 
        0.6353017793459393}}}, {
       4, 5, {-1, -1}, 0.25, 3.1872289999999994`, {0.3380000000000001, 
        0.6699999999999999}, {-0.46399999999999997`, -0.9249999999999998}, {{
        0.20180664771812765`, 0.40134863230724876`}, {0.40134863230724876`, 
        0.7981933522818724}}}, {
       4, 2, {1, 0}, 0.25, 3.3751440000000006`, {0.3380000000000001, 
        0.6699999999999999}, {0.5, 2.5}, {{0.007775668238155163, 
        0.08783625231990097}, {0.08783625231990097, 0.9922243317618448}}}, {
       4, 2, {0, -1}, 0.25, 3.4511440000000007`, {0.3380000000000001, 
        0.6699999999999999}, {-1.5, 0.3999999999999999}, {{0.9788765696244491,
         0.14379579640837933`}, {0.14379579640837933`, 
        0.02112343037555083}}}, {
       4, 2, {-1, 1}, 0.25, 3.467943999999999, {0.3380000000000001, 
        0.6699999999999999}, {2.1999999999999997`, 0.7}, {{0.9997404802384351,
         0.01610752653445386}, {0.01610752653445386, 
        0.0002595197615647778}}}, {
       4, 4, {1, -1}, 0.25, 3.4899999999999993`, {0.3380000000000001, 
        0.6699999999999999}, {-1.4619999999999997`, 1.17}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       4, 4, {-1, 1}, 0.25, 3.4899999999999993`, {0.3380000000000001, 
        0.6699999999999999}, {2.138, 0.16999999999999993`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       4, 2, {1, -1}, 0.25, 4.081544, {0.3380000000000001, 
        0.6699999999999999}, {-1.4, 1.7}, {{
        0.7400738544041177, -0.4385938262579063}, {-0.4385938262579063, 
        0.25992614559588234`}}}, {
       4, 4, {0, 1}, 0.25, 4.25, {0.3380000000000001, 0.6699999999999999}, {
        2.238, 1.47}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       4, 4, {0, -1}, 0.25, 4.25, {0.3380000000000001, 
        0.6699999999999999}, {-1.5619999999999998`, -0.13000000000000012`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       4, 5, {1, 0}, 0.25, 4.942829000000002, {0.3380000000000001, 
        0.6699999999999999}, {1.6360000000000001`, 2.4750000000000005`}, {{
        0.34085824130270326`, 0.4739977854787208}, {0.4739977854787208, 
        0.6591417586972967}}}, {
       4, 3, {1, 0}, 0.25, 5.248744, {0.3380000000000001, 
        0.6699999999999999}, {1.4000000000000001`, 2.7}, {{
        0.21487883577480632`, 0.4107382642399782}, {0.4107382642399782, 
        0.7851211642251937}}}, {
       4, 2, {0, 1}, 0.25, 5.618344, {0.3380000000000001, 
        0.6699999999999999}, {2.3, 2.}, {{0.6851563378817672, 
        0.4644535827638892}, {0.4644535827638892, 0.3148436621182328}}}, {
       4, 1, {-1, 1}, 0.25, 5.799943999999999, {0.3380000000000001, 
        0.6699999999999999}, {2.6999999999999997`, 0.19999999999999996`}, {{
        0.9619134253710035, -0.191405296326999}, {-0.191405296326999, 
        0.03808657462899642}}}, {
       4, 2, {-1, -1}, 0.25, 6.220744000000001, {0.3380000000000001, 
        0.6699999999999999}, {-1.6, -0.9000000000000001}, {{
        0.6037612221303432, 0.48911512835120685`}, {0.48911512835120685`, 
        0.39623877786965667`}}}, {
       4, 1, {-1, -1}, 0.25, 6.352744000000001, {0.3380000000000001, 
        0.6699999999999999}, {-1.1, -1.4000000000000001`}, {{
        0.3255040656447041, 0.4685628761366742}, {0.4685628761366742, 
        0.674495934355296}}}, {
       4, 1, {0, 1}, 0.25, 6.750343999999999, {0.3380000000000001, 
        0.6699999999999999}, {2.8, 1.5}, {{0.8979459417179332, 
        0.3027193873378898}, {0.3027193873378898, 0.10205405828206683`}}}, {
       4, 3, {-1, 1}, 0.25, 7.681543999999998, {0.3380000000000001, 
        0.6699999999999999}, {3.0999999999999996`, 0.8999999999999999}, {{
        0.9931133636675127, 0.08269951978404343}, {0.08269951978404343, 
        0.006886636332487324}}}, {
       4, 4, {1, 1}, 0.25, 8.41, {0.3380000000000001, 0.6699999999999999}, {
        2.338, 2.77}, {{0.4756242568370987, 0.49940546967895366`}, {
        0.49940546967895366`, 0.5243757431629014}}}, {
       4, 4, {-1, -1}, 0.25, 8.41, {0.3380000000000001, 
        0.6699999999999999}, {-1.662, -1.4300000000000002`}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       4, 5, {-1, 1}, 0.25, 8.988029, {0.3380000000000001, 
        0.6699999999999999}, {3.336, 0.6750000000000003}, {{
        0.9999972185225481, 0.0016677738801244425`}, {0.0016677738801244425`, 
        2.781477451842153*^-6}}}, {
       4, 3, {0, 1}, 0.25, 10.531944000000001`, {0.3380000000000001, 
        0.6699999999999999}, {3.2, 2.2}, {{0.7777333415369468, 
        0.4157693964191227}, {0.4157693964191227, 0.22226665846305302`}}}, {
       4, 1, {1, 1}, 0.25, 11.100743999999999`, {0.3380000000000001, 
        0.6699999999999999}, {2.9, 2.8}, {{0.5912976643727664, 
        0.4915940769375458}, {0.4915940769375458, 0.4087023356272336}}}, {
       4, 2, {1, 1}, 0.25, 11.168743999999998`, {0.3380000000000001, 
        0.6699999999999999}, {2.4, 3.3}, {{0.3806913293025608, 
        0.4855568361133535}, {0.4855568361133535, 0.6193086706974392}}}, {
       4, 5, {0, 1}, 0.25, 11.300628999999999`, {0.3380000000000001, 
        0.6699999999999999}, {3.436, 1.9750000000000003`}, {{
        0.8492982116305207, 0.3577579619683118}, {0.3577579619683118, 
        0.15070178836947934`}}}, {
       4, 3, {1, 1}, 0.25, 16.782344, {0.3380000000000001, 
        0.6699999999999999}, {3.3, 3.5}, {{0.5227782245436036, 
        0.49948088300418586`}, {0.49948088300418586`, 0.4772217754563964}}}, {
       4, 5, {1, 1}, 0.25, 17.013229000000003`, {0.3380000000000001, 
        0.6699999999999999}, {3.536, 3.2750000000000004`}, {{
        0.6011324481672468, 0.48966542447644706`}, {0.48966542447644706`, 
        0.3988675518327533}}}}, {{
       5, 4, {0, 1}, 0.25, 0.5798289999999998, {1.536, 1.1750000000000003`}, {
        2.238, 1.47}, {{0.8499126466596189, 0.3571570238811785}, {
        0.3571570238811785, 0.15008735334038115`}}}, {
       5, 2, {-1, 1}, 0.25, 0.6665209999999999, {1.536, 
        1.1750000000000003`}, {2.1999999999999997`, 0.7}, {{
        0.6614885352449505, -0.4732033949417949}, {-0.4732033949417949, 
        0.33851146475504945`}}}, {
       5, 1, {1, 0}, 0.25, 0.9679209999999996, {1.536, 1.1750000000000003`}, {
        1., 2.}, {{
        0.29681761218115954`, -0.4568554665101801}, {-0.4568554665101801, 
        0.7031823878188403}}}, {
       5, 2, {0, 1}, 0.25, 1.2643209999999994`, {1.536, 
        1.1750000000000003`}, {2.3, 2.}, {{0.46166756701818606`, 
        0.4985284591492192}, {0.4985284591492192, 0.538332432981814}}}, {
       5, 3, {-1, 0}, 0.25, 1.268521000000001, {1.536, 1.1750000000000003`}, {
        1.2, 0.09999999999999987}, {{0.08899813247080653, 
        0.28474104882772927`}, {0.28474104882772927`, 0.9110018675291934}}}, {
       5, 4, {-1, 1}, 0.25, 1.3724290000000003`, {1.536, 
        1.1750000000000003`}, {2.138, 0.16999999999999993`}, {{
        0.26406029018623167`, -0.4408315475700382}, {-0.4408315475700382, 
        0.7359397098137684}}}, {
       5, 5, {1, 0}, 0.25, 1.7000000000000006`, {1.536, 
        1.1750000000000003`}, {1.6360000000000001`, 2.4750000000000005`}, {{
        0.005882352941176479, 0.07647058823529418}, {0.07647058823529418, 
        0.9941176470588236}}}, {
       5, 5, {-1, 0}, 0.25, 1.7000000000000002`, {1.536, 
        1.1750000000000003`}, {1.436, -0.12499999999999978`}, {{
        0.00588235294117648, 0.07647058823529418}, {0.07647058823529418, 
        0.9941176470588234}}}, {
       5, 1, {0, 1}, 0.25, 1.7033209999999994`, {1.536, 
        1.1750000000000003`}, {2.8, 1.5}, {{0.9379887877857432, 
        0.24117591458098606`}, {0.24117591458098606`, 
        0.06201121221425666}}}, {
       5, 4, {1, 0}, 0.25, 1.8376289999999993`, {1.536, 
        1.1750000000000003`}, {0.43800000000000006`, 1.97}, {{
        0.656064961970017, -0.47501971290178807`}, {-0.47501971290178807`, 
        0.3439350380299831}}}, {
       5, 1, {-1, 1}, 0.25, 2.3055209999999997`, {1.536, 
        1.1750000000000003`}, {2.6999999999999997`, 0.19999999999999996`}, {{
        0.5876745429774872, -0.4922531609991842}, {-0.4922531609991842, 
        0.41232545702251283`}}}, {
       5, 3, {1, 0}, 0.25, 2.3441209999999995`, {1.536, 
        1.1750000000000003`}, {1.4000000000000001`, 2.7}, {{
        0.00789037767248362, -0.08847666140101124}, {-0.08847666140101124, 
        0.9921096223275164}}}, {
       5, 3, {-1, 1}, 0.25, 2.521720999999999, {1.536, 1.1750000000000003`}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9700105602483383, -0.1705581228058142}, {-0.1705581228058142, 
        0.02998943975166175}}}, {
       5, 2, {1, 0}, 0.25, 2.8289209999999994`, {1.536, 
        1.1750000000000003`}, {0.5, 2.5}, {{
        0.37940119218599605`, -0.485238011241742}, {-0.485238011241742, 
        0.6205988078140039}}}, {
       5, 2, {-1, 0}, 0.25, 3.153321000000001, {1.536, 1.1750000000000003`}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.4844720851445189, 
        0.4997588256951957}, {0.4997588256951957, 0.5155279148554811}}}, {
       5, 4, {1, 1}, 0.25, 3.1872289999999994`, {1.536, 
        1.1750000000000003`}, {2.338, 2.77}, {{0.20180664771812765`, 
        0.40134863230724876`}, {0.40134863230724876`, 0.7981933522818724}}}, {
       5, 5, {1, -1}, 0.25, 3.4899999999999993`, {1.536, 
        1.1750000000000003`}, {-0.2639999999999998, 1.6750000000000003`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       5, 5, {-1, 1}, 0.25, 3.4899999999999993`, {1.536, 
        1.1750000000000003`}, {3.336, 0.6750000000000003}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       5, 1, {-1, 0}, 0.25, 3.692321000000001, {1.536, 1.1750000000000003`}, {
        0.8, -0.6000000000000001}, {{0.14670880457035015`, 
        0.3538153914570266}, {0.3538153914570266, 0.8532911954296499}}}, {
       5, 3, {0, 1}, 0.25, 3.819521000000001, {1.536, 1.1750000000000003`}, {
        3.2, 2.2}, {{0.7249327860744843, 0.4465481404605446}, {
        0.4465481404605446, 0.2750672139255157}}}, {
       5, 5, {0, 1}, 0.25, 4.25, {1.536, 1.1750000000000003`}, {3.436, 
        1.9750000000000003`}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       5, 5, {0, -1}, 0.25, 4.25, {1.536, 
        1.1750000000000003`}, {-0.3639999999999999, 0.3750000000000002}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       5, 1, {1, 1}, 0.25, 4.501120999999999, {1.536, 1.1750000000000003`}, {
        2.9, 2.8}, {{0.41334058782245586`, 0.49243288505241245`}, {
        0.49243288505241245`, 0.5866594121775441}}}, {
       5, 3, {1, -1}, 0.25, 4.670920999999998, {1.536, 
        1.1750000000000003`}, {-0.4999999999999998, 1.9}, {{
        0.8874686598210503, -0.31601904635081596`}, {-0.31601904635081596`, 
        0.11253134017894965`}}}, {
       5, 3, {0, -1}, 0.25, 4.893121000000001, {1.536, 
        1.1750000000000003`}, {-0.5999999999999999, 0.5999999999999999}, {{
        0.9324306511120407, 0.25100544212988}, {0.25100544212988, 
        0.06756934888795932}}}, {
       5, 4, {-1, 0}, 0.25, 4.9428290000000015`, {1.536, 
        1.1750000000000003`}, {0.23800000000000007`, -0.6300000000000001}, {{
        0.3408582413027033, 0.47399778547872073`}, {0.47399778547872073`, 
        0.6591417586972966}}}, {
       5, 2, {1, 1}, 0.25, 5.262120999999998, {1.536, 1.1750000000000003`}, {
        2.4, 3.3}, {{0.14186218826971103`, 0.348908738510574}, {
        0.348908738510574, 0.858137811730289}}}, {
       5, 1, {1, -1}, 0.25, 5.934721, {1.536, 
        1.1750000000000003`}, {-0.8999999999999998, 1.2}, {{
        0.9998946875514451, -0.010261644987186297`}, {-0.010261644987186297`, 
        0.00010531244855486628`}}}, {
       5, 1, {0, -1}, 0.25, 8.056921, {1.536, 
        1.1750000000000003`}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.798232476153111, 0.40131956115741985`}, {0.40131956115741985`, 
        0.201767523846889}}}, {
       5, 5, {1, 1}, 0.25, 8.41, {1.536, 1.1750000000000003`}, {3.536, 
        3.2750000000000004`}, {{0.4756242568370987, 0.49940546967895366`}, {
        0.49940546967895366`, 0.5243757431629014}}}, {
       5, 5, {-1, -1}, 0.25, 8.41, {1.536, 
        1.1750000000000003`}, {-0.46399999999999997`, -0.9249999999999998}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       5, 3, {-1, -1}, 0.25, 8.515321, {1.536, 
        1.1750000000000003`}, {-0.7, -0.7000000000000002}, {{
        0.5871412246232408, 0.4923478515959646}, {0.4923478515959646, 
        0.41285877537675936`}}}, {
       5, 3, {1, 1}, 0.25, 8.517320999999999, {1.536, 1.1750000000000003`}, {
        3.3, 3.5}, {{0.36533741067173586`, 0.48152464841937975`}, {
        0.48152464841937975`, 0.634662589328264}}}, {
       5, 2, {1, -1}, 0.25, 8.895721, {1.536, 1.1750000000000003`}, {-1.4, 
        1.7}, {{0.9690160021880183, -0.17327431919233968`}, \
{-0.17327431919233968`, 0.030983997811981703`}}}, {
       5, 4, {1, -1}, 0.25, 8.988029, {1.536, 
        1.1750000000000003`}, {-1.4619999999999997`, 1.17}, {{
        0.9999972185225481, 0.0016677738801244425`}, {0.0016677738801244425`, 
        2.781477451842153*^-6}}}, {
       5, 2, {0, -1}, 0.25, 9.817921000000002, {1.536, 
        1.1750000000000003`}, {-1.5, 0.3999999999999999}, {{
        0.9388236063419129, 0.23965358857542252`}, {0.23965358857542252`, 
        0.06117639365808712}}}, {
       5, 4, {0, -1}, 0.25, 11.300628999999999`, {1.536, 
        1.1750000000000003`}, {-1.5619999999999998`, -0.13000000000000012`}, \
{{0.8492982116305207, 0.3577579619683118}, {0.3577579619683118, 
        0.15070178836947934`}}}, {
       5, 1, {-1, -1}, 0.25, 13.579121, {1.536, 
        1.1750000000000003`}, {-1.1, -1.4000000000000001`}, {{
        0.5117044026634714, 0.4998629881860542}, {0.4998629881860542, 
        0.48829559733652866`}}}, {
       5, 2, {-1, -1}, 0.25, 14.140121000000002`, {1.536, 
        1.1750000000000003`}, {-1.6, -0.9000000000000001}, {{
        0.6955029592745352, 0.4601940817903892}, {0.4601940817903892, 
        0.3044970407254648}}}, {
       5, 4, {-1, -1}, 0.25, 17.013229000000003`, {1.536, 
        1.1750000000000003`}, {-1.662, -1.4300000000000002`}, {{
        0.6011324481672468, 0.48966542447644706`}, {0.48966542447644706`, 
        0.3988675518327533}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.6790602328891914, 9.230900003615161*^-19], {
       Complex[0.7248589832535917, 0.], 
       Complex[0.650064949116095, -0.020858686170711016`], 
       Complex[0.11988513411713456`, -0.0981715969681187], 
       Complex[0.15160623794564831`, -0.028647866526790612`], 
       Complex[-0.002472802788942547, -0.01713913715451654], 
       Complex[0.05556524411678816, 0.01890267003822048]}}, {
      Complex[0.5524636587025472, -7.594543271602355*^-18], {
       Complex[-0.38354558530686395`, 0.09744499810272776], 
       Complex[0.1619813466218059, -0.23832737428749207`], 
       Complex[0.6766558452199941, 0.], 
       Complex[0.5279467930943094, 0.011722985858567875`], 
       Complex[-0.0019794387381373065`, 0.0612963317654061], 
       Complex[0.14074635807044672`, 0.0077645969691057665`]}}, {
      Complex[0.5222542056555272, 7.39373223091693*^-18], {
       Complex[-0.5047764091042254, 0.08027140607893792], 
       Complex[0.6076266586520926, 0.], 
       Complex[-0.41722429897453955`, -0.26584428115246467`], 
       Complex[-0.11870218623554862`, 0.011771602360776734`], 
       Complex[0.10106066627579662`, 0.15510216234064736`], 
       Complex[0.24672133224192438`, 0.12420825231706026`]}}, {
      Complex[0.47798270089481093`, 1.705186367657685*^-17], {
       Complex[0.11776747404882068`, -0.17021352942962187`], 
       Complex[-0.19349636076477256`, 0.18545691772731276`], 
       Complex[-0.005098087736675982, 0.0481703582836023], 
       Complex[0.12443545522518613`, -0.04846883240430583], 
       Complex[0.7520021001235273, 0.], 
       Complex[0.5450959458974042, 0.050065292585647264`]}}, {
      Complex[0.4208599945029234, 1.7181192359807767`*^-17], {
       Complex[0.046412084869462106`, -0.0633132278362492], 
       Complex[-0.15001494768060744`, 0.1368626263531111], 
       Complex[-0.49457449633790096`, -0.020339968952328036`], 
       Complex[0.7465187765334863, 0.], 
       Complex[-0.3425167147633056, -0.05320301419822421], 
       Complex[0.17190685158210708`, -0.02435844462026826]}}, {
      Complex[0.3371723422003491, 1.2680207595331082`*^-17], {
       Complex[0.08250671501222374, 0.03036710231625256], 
       Complex[-0.10759757386702096`, -0.00917692568070801], 
       Complex[0.15992951319705684`, 0.020880420200147097`], 
       Complex[-0.32856173648033754`, 0.004931060374980048], 
       Complex[-0.5245849484304596, 0.028709761501831688`], 
       Complex[0.7553839007471159, 0.]}}}, $CellContext`dynPlot$$ = Show[{
      Table[
       ListPlot[
        Part[$CellContext`points$1700, $CellContext`k][$CellContext`nu$1700 \
#], PlotRange -> {{(-$CellContext`glConstWindowHalfWidth)/
           2, $CellContext`glConstWindowHalfWidth}, \
{(-$CellContext`glConstWindowHalfWidth)/
           2, $CellContext`glConstWindowHalfWidth}}, 
        ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
        Directive[
          PointSize[
           Sqrt[
           Part[$CellContext`mScalarArray$1700, $CellContext`k] \
($CellContext`glConstMMax^(-1)/350)]], 
          $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$1700}], 
      Graphics[{$CellContext`lines$1700}]}]& , $CellContext`dynTab$$ = 
    1, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJxl2nlUzfkbB/CyjGwNypayln1NosQNFaM0KlMYkyw/JVsS0kKT7PxG5UeL
QtJUlhhJRlQyiUS61b0t9/a9t27JTtaIn3N6nnvnPM8/M+e8z5x7vft8Ps/z
Oo1Byzc4/6eNlpbWwu//aPv9385GpzLunm+f4xhV9fHLms/ZFjf37q7+WyXa
lhu9MaRaS50Ls03PTOyoElkXGi9a3+tjNuavH3vmPn9aJ+o3bHT81YZn6tz9
yIxxxctVorUbjPRNbMXqvMuyx3NcK1Qi99ZchHnqD4sDxTEqkX7r56jz8AGF
sjHP6kRWrd+rzkPXVrS/cqNOtLX1z2mNeXyG7G3XmSoR9FLn9+YWGid0r8c8
pyHC8EyLy7tsuZFHUcrVOnVfzJMcdWMHH69T98XctOOfh/stUan7Yq6z9mza
tU+avpg7+ox3K43T9MV8RNqGSGNxnbov5llNdn9kLtP0xfyMUbeAxlJNX8x/
XPz6ysAB6l7qvLx8+ZsxyzV9tfpdT/iy9UW2Yw/7uF/1NH0xH5zZo+3h25q+
mEcsd85o0a9X98U8aPoAlXGfenVfzFdMeD7ytZ2mL+b+W7dmXZ6s6Yv5nPuu
DZZGmr7q73WvDck9rFL3xbxPjtNAb1GDui/mooufm3pK1eeeY9pt2ueW2cps
95Ih41zEteq+mIcOs4xytNDcZ8zXr+0+SdmuQd0Xc7PVx8KOL9T0xbygc/f1
m/zq1H0xt5wR32ZNVq26L+ajavyebjyr6Yu51P/Ww8Ld9eq+mPtP+pp4IUbT
F/M2BwINGp7UqftG9Pzi2LK0IDtjU5SOXK7pi7nl223rrEfVq/ti3mBh6N0p
VtMX8zMrDux8HqC5z5iHe4zaN6yuVt0X828fgiP7X9D0xfxGwbztbiNV6r6Y
T7d3rv3s06Dui3nmbkfPkQM0fTHfPjXp4vlJmr6JrbkoCHLsi3kGfA72xdwS
vhf7Yp68cF3aRaFO3Rdz7IV9MT8MPwfsi/nbcUlK12uavpjXpepfz5+p6av+
88C5YF/MM+Ecsa9567mLtODcsS/mW+CeYF/Mw3/0Hzpikeb9Yj4a7iH2xRzv
LfZVf37SwRdRZzXvF3NTeBfYF/ON8I6wL+Zh8O6wL+bL4J1i33at71o0Fd41
9sW8J8wB7Iv5XkO5yREvzXzGHOcM9sV8G8wl7Iv5Mphj2BfzQJh72BdznJPY
F/NBMFexL+YuMIexb2Pr3BaJYW5jX8xxzmNfzBNhL2BfzG/AHsG+mOPewb6Y
457Cvph3gL2GfTEfD3sQ+2J+BvYm9sVcCXuWeEOEe5l4Q3Qa9jjxhmgv7H3i
DdFRcALxhigNXEG8IeoBDiHeEK0EtxBviN6Cc4g3RCpwEfGGCB1FfdW4wt6m
4LyC+SrRa1nPwA0K5qsjKVe83H5VMF85mi28vuO4gvnqVnLo0IJyBfPVzCnm
ZkbnFMxXnTpH3ny6XMF8lS4L+rurr4L5KiJshInxUQXz1cua6adTmxTMV2EW
HacFGCuYr56tW73EbK2C+epTuOsvFecVzFeRj21PuTxVMF/FSV8feZCrYL6q
PHg0KMFBwXy1v89rszgjBfPVt7IfOulEK5iv5l8N+rz+m4L5KnO5Ub/cvkrm
K+m86pctRQLzlWnt/pV9ohXMV4+ubD9y/quC+epe/oRRa7WVzFfT41JEGw4p
mK9qqtKrxr4UmK/shlbv//GrwHx1MS6i7lu9gvkqrM7v3EQnJfPVzm2bMu69
UjBf6f78Nur2ZYH56ncDUWHzXQXzlXav67+8m6NkvjJY8LzfkA5K5qsF+272
nmioYL7qkZmbeiNaYL4KmHciceokBfPV8ANvh+yZqmS+6hv3LWHSKiXzlfag
n06v2qxgvkr2kWcY5wnMVxU9h4q9eyiZr07aaDuWblAyXw15X3tLe4+C+eqg
cz8jn0yB+Sqzf4lqcaTAfLXcfFNj7iIF89X2jz/VPPJWMl+NTo22CbFXMl89
iP92wLCNgvkKc+or/Bzqq2D4XuqrJ2aFKyf+pmC+wl7UV/hzoL4acuLFrsgs
BfPVFmPtMbPclcxXUjgX6qtUOEfqqzZw7tRXBnBPqK9c53gaWo1SMl/5wz2k
vuoO95b6au4Q6ZLBIxTMV4bwLqiv2sA7or7aAe+O+qo7vFPqq73wrqmv9sAc
oL4KqtK6FaBSMF/hnKG+wrlEfWUNc4z6qgjmHvVVCcxJ6iucq9RXVTCHqa8y
YG5TX+Gcp77SKm/dC9RXB2CPUF/h3qG+Og57ivoK9xr1VTPsQeqr57A3qa/2
wJ6lvsK9TH11FPY49dV12PvUV93ACdRXduAK6qs74BDqK2dwC/VVFDiH+ioZ
XER9hY6ivtp8Jm2TY4bAfJXeQyvFT4/7KjHefn3qMoH5KqGyrjH45xrmq6wj
kRsnWtUwX62SvSrvoyswXwWsCE2fHSYwX6VuyD7/OkVgvmr+VT5AZ6TAfDVq
i4/voRE1zFcXxzabbbcTmK9C8ypnPYgVmK/6OuT0Gu4mMF+tCauwMI6pYb6S
jx+etk+/hvmq3aM3Z9t61TBfWZ/rdCGhq8B8Fe+3b6m/i8B89THYLWz6v/pi
PjLF9rPxLzXMVwkz0k7YhNUwXyUt/vaqYo7AfHVaO+zRU3OB+WpK8ImYmf/q
i3nzXHHS/Jty5qvRKnmLXrCc+WrxKVfPWNsa/vsraYeB0aYC89XvnVf1qhkl
MF/lJftZLWlXw3xlLr274sFFOfPV3J1NSdbdBOarH51DZ8RMEJivEhfsuyZ1
rWG++pTp5OSmI2e+uvvJeGu7pzLmKwfLF9dnv5czX+2e/mxaR2OB+SplszLr
5BCB+Wqg7sYxhs5y5qv68pYSn+Fy5qsO4854NLQVmK88Xk+XVf6rL+YJ+U1F
J3PlzFd3h9/23XFcxny199oGO9NEGfOVQeUwyzF5cuar3M7HDdqPEfjvr5a3
j3XVFZiv+jskm4z5ImO+MoCc+go/h/oqG76X+qrfroQ25WfkzFfYi/oKfw7U
V+2aHE7Jn8iZr3ybB3f0/VdfzHXgXKivnsE5Ul8ZwLlTXyXDPaG++mv836kX
hwjMV3PhHlJfFcC9pb7yOHjmZ7mJnPkK3wX1Fb4j6it8d9RXk+GdUl/dhHdN
fRUCc4D6ynXsg//cNxaYrxbCnKG+GgFzifrqC8wx6itLmHvUV4kwJ6mvcK5S
XyXBHKa+Gg5zm/oK5zz11QnYC9RXM2GPUF+1hb1DfSWDPUV9hXuN+qoP7EHq
K9yb1FeXYc9SX+Fepr7SWtK6x6mvLsDep74KBidQX60BV1Bf3QaHUF+lgFuo
r5LBOdRX18BF1FfoKOoriWffXJtjcuaro2+ubfkzQcZ8ZZcxplBlKWO+ko88
p3PzHxn31X7DBt+XMuardNNE3eCLMv77qwvTnPSmyJivAuNzAkpyq5mvKtev
9Nq3UsZ8pRO8+knjSxnz1Xr3S/Kz66qZr7pkpYu+BlQzX/n11nE5tlnGfLXo
dEBEco6M+SrQJGfZUycZ81WEQ5fuxflVzFcn74Ylx+ZVMl8dmjTc02dPNfNV
+367aoVMGfNVYqW4t+0pGfPVlRUPOz2eUMF8NfNDyOGcpdXMVzFrR5m+2SFj
vuqzRd97/w4Z89Vv4b52MbeqmK9Ch6/u7qNbwXxV5bHZdNBXKfNV3paBAd0L
q5mv3u/dUS2UyJiv/OOdfgieKmO+MrHakZ39PwnzVbOs80ETo2rmqxeij5M8
EmTMV5LDPQ4ssZExX/leSvMO61zJfGURGjhJ710589WaF3mPRgypYL6qN9B5
uMNaxnzV63HkivNJMuYrq0/PhOvSKuarb7ucbA/YSZivprilFV4OqWa+sgnb
10s/TsZ8dWFcwqVGVSXzVWLO/MNXUiTMV03N71zNHpYzXwVZfJxac6iC+arD
hpjkQwEy5qud54O3bNScozq37OIZXtW1gvlqCuTUV6HwOdRXP8D3Ul9Zy18G
rNWtZL7CXtRXp+HnQH01/mbC60561cxXVdsfOln4yfj/H4Rzob7S3t16jtRX
U+Dcqa/04Z5QXx0oNtQZ2lPGfIX3kPoK7y31VRfT8/eC4yqYr6TwLqiv8B1R
X7XAu6O+Gg7vlPpqC7xr6qtmmAPUV7MKnZ0yq6qZr6phzlBfhcBcor5yhzlG
fYVzj/oqHuYk9ZUI5ir1VSbMYeqrBJjb1FftYM5TXx2GvUB9lQB7hPoK9w71
VQDsKeqrxbDXqK8CYA9SX3WFvUl95Qt7lvoK9zL1VS3sceqrENj77PdX4ATq
q7/BFdRXt8Ah1Ff14BbqKxdwDvVVPLiI+godRX1lv87klvvLSuYr86/jQgbZ
VzFfmff+oq89vpL56kXC64Edw6TMV0H/PX86IFLCfBV1zGvynO//PfXVEQNb
T/O3FcxXLwpU34TiCuYrs6Xz18ybVMF8VRCXs7hvmYT5KmFgsU3Gngrmq6ye
xWP3PJYyX41eX7BytVUF89Wy8ve2TcOkzFcdN7/Km2wnYb76Z8nEvYWbJMxX
Nt0eL+j9h4T5apX7G12D+RLmq7eXtHwtoqTMV37uz84WxEmYr0YM7P1f1e5y
5qtXH7ovmtRPwnyVZ/5p/7fBUuYrq6/HotNrJcxXRXl3bL/qS5ivjMLtcw88
LGO+uh1QHWk0u4z5qtjRfnJEQznz1Usr17mN3aTMV70nX79d9ouE+cp9YnkP
H+0y5qu6dpFB1l7lzFddtsT9dOeWhPnK5eP1k+JNEuarnPbb/vL+WMp8VZbl
3mD7opj5av+s9Cl6M8uYr36PdRhxRlfCfBX5acD21fES5qvmuy/qle0lzFe2
l/fYa7uVMV/tavb2fXajnPlq7CbTusVBEuarryvWpd3vL2G+Eq33zchUPWK+
soKc+krbSWe3tlDGfHUh8Mgfb0QS5qvpNUF9e06QMF/dbE6uCnIrZ77Kgpz6
Cj+H+ioNvpf66tIx74tageXMV7Qv5rQv5k/L3MJv6kmYr6KL/O5fni1hvgqD
c6G+mg3nSH31Hs6d+grvCfXV2r5ts6bKypmvDsE9pL6SwL2lvtK//UdX+3El
zFfO8C6or/AdUV/hu2N//wreKfWVPrxr6qtXMAeor6JSHdyUTeXMV/kwZ6iv
DGEuUV/hHKO+mgZzj/oqH+Yk9RXOVeqrsTCHqa82wtymvsI5T33lBXuB+moW
7BHqq3zYO9RXuKeorzxgr7G/fwV7kPrqJuxN6qtE2LPUV7iXqa8sYI9TX72D
vU99FQNOoL46Ca6gvvodHEJ91QRuob6yAudQX1mBi6iv0FHUV0N9rs6beqSM
+Wp7tn/7f/zLmK8qpz6ZPK5DGfPV0GypOLZtKfNVQHPA9MZSMfPVlbK5d1Rp
pcxXqRnjk/T8ypivrs2fYl1vXsZ81bDwdrs/N5YyX5mYv723+UYJ81X9q1eF
oWvKmK+Ml6et2TCrjPmqc9HMVy4nS5mv7o3b+cO25yXMV2+mL/Z2W/SI+WpB
Y++f9CJLmK9K0j+Ef2woZb5q6yrMqY0tZb4an7LiSkidmPmq22nLPu/7PGK+
MqjetajQqJT5ylb/87zZPqXMVynb7F9tHlzKfPUx7sZhj3mPmK92Z1at+DS8
iPnq5KqrDmaX7jNfRTR5po5+V8x8lfwhIN/ley/qK7teJu+to8XMVxbXVy+Z
cfUB81W7kqOBHT0fMF85rjSa9bSvmPnqrnff1V2KxMxXO7uUlAz1K2a+yjca
2ffQ2XzmK/+lznYts/OYr2IKDwzy/f7npL6Suy8rNokVM18FuIQ6RViJma9K
R131uvOwkPlqkEnSmLktBcxXW1PDwnOkJcxX+YscbPqniJmv1i802tmg94D5
amvpmjrPc7nMV5sgp74KiT6Z3hh3n/nqlvLPO+lRYuarmpZnhxq0xMxXyXnW
iWe97jJfpUBOfVUNn0N9hd9LffXXtH9+6+NRxHxF+2JO+2LeKcz74eK6B8xX
xUVRGb1OiZmvAuFcqK/6wzlSX0nh3Kmv/OGeUF+pIt5HPP+fmPkqHu4h9VUg
3Fvqq9DeHu7rJt5mvgqBd0F9lQ/viPrKAd4d9ZUuvFPqK3N419RXM2AOUF/N
Too/q3VNzHyFc4b6KgHmEvXVTphj1FfvYe5RX6XCnKS+mglzlfpqEMxh6itd
mNvUVzjnqa/aw16gvhLDHqG+coW9Q32Fe4r6qhD2GvWVLuxB6ivcm9RXjbBn
qa9wL1NfPYM9Tn2VB3uf+uovcAL1VRa4gvkKHEJ9NQrcQn0lgHOor3aCi6iv
0FH/BwptPYE=
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwNw2e7qQAAAGDHdo2SnVApoZTdsCtUysh2bOf7/U/3l97zPs+Lvf/ab6fD
4fj32/U79OX8OV/CTlfE5QbcHtDjjXp9kM+fj8Vj/kAyGOrSTCYCxAN/YABE
olAOimXBaCoURhPJRokiMjAJZ0tZhEJy5Vy+WkBpFMOSKTyVZosER5B1ssRg
eJMqtyvVTpWu4cV0OMIztWI6Y07kfqMpstyky4/aHYmrD1vtw8Ls1RvjTtcY
jbXBUOaFxXiiD0eqKCmCaMnKzd5eN/Z6Ottq+kqdHk1rbyxeh+NON+y5drKW
5+Vqqaj37e6x2z/3B6HGfk7ny2r9Pp5qAv8VCg51zQMCrkg4mEy4gUggHvNB
UW8U9MegUCqZQAuRTJrhu+F0CszCUA6J5XNRJJvE0BSOpYs4TBLZEolQpVyZ
KlQrKF3FGDpDFPEaQ3As1WyQda7UqFfarSJbA+AM3e1UO+2p1HOGQ/We1B4N
G/2eqCqt4UBQ5O5k3BmPeHkiTVVlaQ20OSeJvdl0ZOgTcyFb5nhhqKvldL2a
2xt9tzX2u8Vhbx4P1um4PJ9Wl7O2tTfX7+39dng9d4/7/vk4vl/27cqKwvnn
c/q8Z73+fz/cYi0=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwNw4m2oQAAAFBn5kvml+YT3jnP7iElogWRXVkjhZRCizW7sXufNe+ec/98
+P9+/LLZbOLP3z8TxcL36Ry0OwCHM+R0gS435PaEPd4kHIG9PsQfaJcrKBCK
+L6wEEhA4UQYxkEoFgiSUaSey1NxNItiOQzP40SBSBQTyXKKTCOxTCzOZKgq
la1lcxUy3cgXmoUiWyrT6Uw8CHQqdODTzldrQq3eqzf6jabYYucjRWp3ZvJI
7nBKl1d5YdLrD9m2KcnGUBpxXV0cvg7HhaLeNltrqm11YzWeHGbzvTnrMtWd
YW40famOj/PFZW1drc19uzstlo/d/n08nZer5/7A0cxnwD/Qpn4k6gJDgRhC
cx03BPoisDMEeMJQMB6Dk4kQhgJoPEqmYpk0RODhBAHimBcOI2nSAQTxfC5N
VzIMjeWyqXKJrJSJQr7SaWdrVTRLxalModnI1Wv5Rr3EtpguV26zVJXRBuLp
+z0/HlrioN4Tusqo0e9xI7ktDdmh2JElXlVG81lvMlaXC2GsirommYY8M4eG
rizm49WyyneN3VbbWMvzSd9uFqfj7LA397v15Z91vdiDge39trldp9Z697jv
n4+awB/fr8PrORZ6/wFLkCAU
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxNk/taElEUxedAogJppIYJCVOGaT5Nj9AD1Dv1Nt4tb5gXEkUTULyA5r29
vvnNx/yxvj1nn73X2ufMWf7X71++xTzP+2GIG/4argyXhg3DvGHBsGaYNcwZ
tg0rhp+GdXKq+21YZq9sWDQsGTbh0HqLnOp24PhlqNEv7gp64n5kFs20Z1hl
b5/5xH2AnrgPieKqsq+9P/Cp5wgd6Z/AK81TesTXoEc6dfa1bpKrMtcxd9ZC
W+c4g+OQvV00rlhL88FwAcc/tNV3jbZ0OmhrfUNOdW04tHeH9rnhFg6tn9BT
7YzzPN/w3uC5gFc6I/adNKQMMRdoaJa4C6L4XrggSidh3/fM3uuCqP/T7wK9
Z8OwC9ZJoJw00waHzkuidF67gKsPPDL7K/vucYFmirnVnyGnniF6pFdwgbbO
9IYeaZYMOUPeMIr2gGHMMOgCnRwxQ12Gud4RpTNOlEYxouMTs9xvFp0Jw1t0
PhJz7KeZYxI96XwiSmeKqDOd86aOuN8272Kafc3ymeiDGXKzeGUVn+3w7hfw
xQZ7e7zRNhq6/0V8o7oV+uSpefrkpSW8VkanAtc289bor3pdv+7jo128cExf
nTcdevgAvRrrMjlxLbO3hd4JXOtwV8i18UANf7RYP/Fuq/ipiUYL/2gm+fIC
zTPqGvimwzma5C7he0C/wXlO8VPo3Rv663C04b6lroNXntEW3z1z3VEnD1zD
leQdhu++yJvweP9J/JrAS463l3Jdn8dc188JtJN4KvR/HF/24bvQw2nqhvFG
Dz4apGeAujn+zRrnd8zYi78y+HiIdYKcuPSv+tlP4bURtLOsQ6/mI34O/T2G
D0Nv5yK+LTJ7IeLvcbhCP/sRD09E/DbN2UapDT08iUaJnjy5UsTbqtP/i/FP
CvBNMat0PnB/ukf9g//JUwbQ
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxNlftWklEUxPnqSXqA7pYaZSUaKiEJKRKJiqEkiZdQMbxEkuUl7Rl60mbW
+p318cesvc639545+5wzcKe6mW/eSiQS/4TbQiZKJOaEWWFIuCvcE4aJ94Vn
xAdCkvhQeE58JLwgPhZGiAPClPBSeEX0tyfCqDCIZlUoCvPCOHpJelz7VHjD
N2tOoGedSaK50+SdS8HtOd4Kr9FcEPJCQXiHnrlniGnyaXQKROu8J05xZhm4
i8QsGEU/J4yh8YG1NctEa34k5pnf/dNCBW1rLnE/1lwmWrNEbdAZ5uxW4Ar5
FPk19HwG68Ii3KvsybkN7sMcB0JT2BS+oO1cgz6vr4VToSfU4a7QZ45PwjYa
1t8h1uF1via0hM/sa4tv7tlDz/q75L3+Rr9rz4Vj4UT4LRyxNr7C/Z1+8x2y
px323mbWH8I+6xp35nPp0rePRguuHn3ey09iB2yhcUGP9S+J5rsiWvMP0Xu5
gdd8Z3Adck4l9vS3L2+/+p0Pcn4tZvba79DvPng1SW2K3Dx35DsNHnadPRf8
GjzvdxW87Tq/tTG4XGdPTFJrHwUfj1PnfdgjGXr8LrNw2V/pKPbzBPtIwzWA
xgj7zsIVfpuG+eZ5ilHs2zxrz7ccxV6di2Kfz0SxtwtR/Ftgf+Y47xJzhG/B
h0vMlmOe4Ofg7zL903DMo7lAXYl79R3MwrfIPirU+c357duXfu9+Y/1vrkfP
OvdvXvtrFW73NOGqk1vh2wZzmD94ugFXlbxz9sJWH5f121Hs523gd9pBe5se
c9krLbg8zx7cbdYNvu3S02E+v2N7+IhzrDGTe+yXLj321Al19v8v+LrkzHfG
eR1wZsH3p3BZ55x+c12wDv+FQ1Hs2+DjS+pa9BxHsZ+v4L5mXeZcauzDHg5e
v6Guzbn4jP8DDBK3pw==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxNlf1WUlEQxe+tJ+mVeoQeoJ6lrLTUVEoRTFEQTOUjMlPUFNMQQ0IlSCxN
ywdo9lq/Wdc/9prFmXP2njNn9uXeg0f3H94JgiBmuGtIhUGwZFg0DBkeG54Y
hol9hlfEp4YR4jPDKPG5YYzYb4gRBwwzhteGN0StvTBMGAbRXKWGZUMCvRHO
aO9LQ5I1ab5FTzrTRHFPkVcuDrfuMWsYR/O9IWvIGTKGSTTniUnySfhyRGku
EKX5jjhD7Sl05tCR/o2hZzg3FAxpNItEaZaIWe7vHGW0pfmBKM2PvJU08+xN
c49hevcJrjy5OPkvhjXDumELDXF/N+wZ9g3bhhV0qryN+HaJOr9DXrkmvDq/
SX/Fu8Hd9LtGTpqHaOxwRrVU0K5wroG2NI+I0vjGOeXO0FbtLc5/NVwZOoau
oW2oo9nhvLhPDQfkerc4fqLXpJYid+hyTrkf8InrGM0ab9xi7RJt7f1DlP41
XNL5bTihlr+s6U7/iKrrgnybvus9C/SsQH3yq+Z8kB7XqMn9Kc+4hzUfmgXN
hObG/aycfOYedQ+7p8fgGiAfQ09zPg40tyn2yiNTcMtHCbQn0R8ln6T2OFzi
lp/c09NwTVDvLLUm4BIy3Mf9mQsjD89zTn1bDiM/Z8PIwwvwKu+eUq/dQ4qr
YeTbQhh9LzJwacbdxyX2pdmbR7PMPvdzmTe+4c2X0HF/K67wlhu8rc+H5kWz
qJnpwrXFnhL7K9xDvtlFe5Oc+7mKjjzlvlf8TC1Vcpq3vVtc0m7Apfr2yctH
7h1fE5d8dgCXfHMId4Pf26zV0WiiIY4WvD73a+yVp9rwyiMn7OvRpzr5U/jO
6FeDnvn3oAOXdM45Ly7581cY/RcOwSdvuy8v2KceHMPhnr+E+4rfRfqyTh16
Q/8eXLOvTr/Uj/9SgnWO
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxFledWFEEQhWcHAUVZgsoKiOyKZMlIFNklhwWVpL99AH0n3xEJYqjvzDeH
H/f0dFfVvTXdfWcq336cfE+TJPkZaAh0xORloDdQCPwqJMlVoB7PXwIXgabA
71i7CyTxfFnI8hrj+baQxRri+TrGm0CaZhzMH6TZGnnNacbxJ9CeZvVwtwT+
yT0S6Au8CjxMs9y/gSf2B3cxzfTgbnOEq9U4scdpxkdNhzroPws8UvOFNfB1
WYPOc+PMS661uk9wdQZ61OY9uuVoM9Zs77zDUzWH3GM4BtSmrqI2OmW1mb92
jbx+OYgNqg3XGzl6PCvO7CgwqjZ14/KiM2UNHBNq0Mu7wJi5k66RNy8XsdnA
sOczLQfvNOcaeQtyvA2sWw/3knqTcvXb06K5xFbsD+419eD+4AjX+8CMsarc
aNYc4dtwRHMrsCz3TmBVjl1HdPYc0dl3pPcDR3QOHdHZlHvZ/a6peWwMzRM1
4P4U2Fb/syOxU+P7ntmG9Zwrd4p7dm4f6J+Zy/zCtbr7V/Esv8pFL9xf7gv3
5kYf4gt8RgwPXOlVPHKrn8nDc9xf7vG13iYPn+OjRmvwBR5pst92z3bM+5D7
syhXp3lwtVrfaB15iXwt9lo0785vR5N98074im9QwTry8ErJGPe/z9x+52jg
lW61ye1Sv9dY0XjuT3wwYB77XJaL9xux3y73mvpBa0qeSUWuAefoDJl36Fme
2yt8w3KV7Zt7hm+m5OK88Vh+X/fcb7wwr/aUNeQtGEN7wnq0p80btW7OHifN
ow98NmPNoly5J9fMpb/c30vmwbduXu7Pqlz4blXuNef0sSLXiBqz9l2VK/d2
TdTdv9zPO8aPjMGFFzfTe5/vpvd+PrAP6rbNO7b+0n8RXjnwfM48k3H3O/dz
7m/Gj+7Bpr2gd2Je/k3ZF/Dl34BT89DGw3zL/wMLlm0f
            "]]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[{2, 1, 11, 21, 31, 41, 51, 61, 71, 81, 91, 92, 93, 94, 95, 96, 
          97, 98, 99, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 
          4, 3, 2}]}, {
         GrayLevel[0], 
         Line[{102, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 192, 
          193, 194, 195, 196, 197, 198, 199, 200, 190, 180, 170, 160, 150, 
          140, 130, 120, 110, 109, 108, 107, 106, 105, 104, 103, 102}]}, {
         GrayLevel[0], 
         Line[{202, 201, 211, 221, 231, 241, 251, 261, 271, 281, 291, 292, 
          293, 294, 295, 296, 297, 298, 299, 300, 290, 280, 270, 260, 250, 
          240, 230, 220, 210, 209, 208, 207, 206, 205, 204, 203, 202}]}, {
         GrayLevel[0], 
         Line[{302, 301, 311, 321, 331, 341, 351, 361, 371, 381, 391, 392, 
          393, 394, 395, 396, 397, 398, 399, 400, 390, 380, 370, 360, 350, 
          340, 330, 320, 310, 309, 308, 307, 306, 305, 304, 303, 302}]}, {
         GrayLevel[0], 
         Line[{402, 401, 411, 421, 431, 441, 451, 461, 471, 481, 491, 492, 
          493, 494, 495, 496, 497, 498, 499, 500, 490, 480, 470, 460, 450, 
          440, 430, 420, 410, 409, 408, 407, 406, 405, 404, 403, 402}]}, {
         GrayLevel[0], 
         Line[{502, 501, 511, 521, 531, 541, 551, 561, 571, 581, 591, 592, 
          593, 594, 595, 596, 597, 598, 599, 600, 590, 580, 570, 560, 550, 
          540, 530, 520, 510, 509, 508, 507, 506, 505, 504, 503, 502}]}}}, 
      VertexNormals -> CompressedData["
1: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
KV+ETF/kKkf5KJynTPkoZPqo/wF/+MBt
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.13807390836123865`, 0.7376758644548403}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25, {1, 4, {-1, 0}} -> 0.25, {1, 4, {0, -1}} -> 
     0.25, {1, 4, {-1, -1}} -> 0.25, {1, 4, {-1, 1}} -> 0.25, {1, 4, {1, 0}} -> 
     0.25, {1, 4, {0, 1}} -> 0.25, {1, 4, {1, 1}} -> 0.25, {1, 4, {1, -1}} -> 
     0.25, {1, 4, {0, 0}} -> 0.25, {2, 4, {-1, 0}} -> 0.25, {2, 4, {0, -1}} -> 
     0.25, {2, 4, {-1, -1}} -> 0.25, {2, 4, {-1, 1}} -> 0.25, {2, 4, {1, 0}} -> 
     0.25, {2, 4, {0, 1}} -> 0.25, {2, 4, {1, 1}} -> 0.25, {2, 4, {1, -1}} -> 
     0.25, {2, 4, {0, 0}} -> 0.25, {3, 4, {-1, 0}} -> 0.25, {3, 4, {0, -1}} -> 
     0.25, {3, 4, {-1, -1}} -> 0.25, {3, 4, {-1, 1}} -> 0.25, {3, 4, {1, 0}} -> 
     0.25, {3, 4, {0, 1}} -> 0.25, {3, 4, {1, 1}} -> 0.25, {3, 4, {1, -1}} -> 
     0.25, {3, 4, {0, 0}} -> 0.25, {4, 1, {-1, 0}} -> 0.25, {4, 1, {0, -1}} -> 
     0.25, {4, 1, {-1, -1}} -> 0.25, {4, 1, {-1, 1}} -> 0.25, {4, 1, {1, 0}} -> 
     0.25, {4, 1, {0, 1}} -> 0.25, {4, 1, {1, 1}} -> 0.25, {4, 1, {1, -1}} -> 
     0.25, {4, 2, {-1, 0}} -> 0.25, {4, 2, {0, -1}} -> 0.25, {4, 2, {-1, -1}} -> 
     0.25, {4, 2, {-1, 1}} -> 0.25, {4, 2, {1, 0}} -> 0.25, {4, 2, {0, 1}} -> 
     0.25, {4, 2, {1, 1}} -> 0.25, {4, 2, {1, -1}} -> 0.25, {4, 3, {-1, 0}} -> 
     0.25, {4, 3, {0, -1}} -> 0.25, {4, 3, {-1, -1}} -> 0.25, {4, 3, {-1, 1}} -> 
     0.25, {4, 3, {1, 0}} -> 0.25, {4, 3, {0, 1}} -> 0.25, {4, 3, {1, 1}} -> 
     0.25, {4, 3, {1, -1}} -> 0.25, {4, 4, {-1, 0}} -> 0.25, {4, 4, {0, -1}} -> 
     0.25, {4, 4, {-1, -1}} -> 0.25, {4, 4, {-1, 1}} -> 0.25, {4, 4, {1, 0}} -> 
     0.25, {4, 4, {0, 1}} -> 0.25, {4, 4, {1, 1}} -> 0.25, {4, 4, {1, -1}} -> 
     0.25, {1, 5, {-1, 0}} -> 0.25, {1, 5, {0, -1}} -> 0.25, {1, 5, {-1, -1}} -> 
     0.25, {1, 5, {-1, 1}} -> 0.25, {1, 5, {1, 0}} -> 0.25, {1, 5, {0, 1}} -> 
     0.25, {1, 5, {1, 1}} -> 0.25, {1, 5, {1, -1}} -> 0.25, {1, 5, {0, 0}} -> 
     0.25, {2, 5, {-1, 0}} -> 0.25, {2, 5, {0, -1}} -> 0.25, {2, 5, {-1, -1}} -> 
     0.25, {2, 5, {-1, 1}} -> 0.25, {2, 5, {1, 0}} -> 0.25, {2, 5, {0, 1}} -> 
     0.25, {2, 5, {1, 1}} -> 0.25, {2, 5, {1, -1}} -> 0.25, {2, 5, {0, 0}} -> 
     0.25, {3, 5, {-1, 0}} -> 0.25, {3, 5, {0, -1}} -> 0.25, {3, 5, {-1, -1}} -> 
     0.25, {3, 5, {-1, 1}} -> 0.25, {3, 5, {1, 0}} -> 0.25, {3, 5, {0, 1}} -> 
     0.25, {3, 5, {1, 1}} -> 0.25, {3, 5, {1, -1}} -> 0.25, {3, 5, {0, 0}} -> 
     0.25, {4, 5, {-1, 0}} -> 0.25, {4, 5, {0, -1}} -> 0.25, {4, 5, {-1, -1}} -> 
     0.25, {4, 5, {-1, 1}} -> 0.25, {4, 5, {1, 0}} -> 0.25, {4, 5, {0, 1}} -> 
     0.25, {4, 5, {1, 1}} -> 0.25, {4, 5, {1, -1}} -> 0.25, {4, 5, {0, 0}} -> 
     0.25, {5, 1, {-1, 0}} -> 0.25, {5, 1, {0, -1}} -> 0.25, {5, 1, {-1, -1}} -> 
     0.25, {5, 1, {-1, 1}} -> 0.25, {5, 1, {1, 0}} -> 0.25, {5, 1, {0, 1}} -> 
     0.25, {5, 1, {1, 1}} -> 0.25, {5, 1, {1, -1}} -> 0.25, {5, 2, {-1, 0}} -> 
     0.25, {5, 2, {0, -1}} -> 0.25, {5, 2, {-1, -1}} -> 0.25, {5, 2, {-1, 1}} -> 
     0.25, {5, 2, {1, 0}} -> 0.25, {5, 2, {0, 1}} -> 0.25, {5, 2, {1, 1}} -> 
     0.25, {5, 2, {1, -1}} -> 0.25, {5, 3, {-1, 0}} -> 0.25, {5, 3, {0, -1}} -> 
     0.25, {5, 3, {-1, -1}} -> 0.25, {5, 3, {-1, 1}} -> 0.25, {5, 3, {1, 0}} -> 
     0.25, {5, 3, {0, 1}} -> 0.25, {5, 3, {1, 1}} -> 0.25, {5, 3, {1, -1}} -> 
     0.25, {5, 4, {-1, 0}} -> 0.25, {5, 4, {0, -1}} -> 0.25, {5, 4, {-1, -1}} -> 
     0.25, {5, 4, {-1, 1}} -> 0.25, {5, 4, {1, 0}} -> 0.25, {5, 4, {0, 1}} -> 
     0.25, {5, 4, {1, 1}} -> 0.25, {5, 4, {1, -1}} -> 0.25, {5, 5, {-1, 0}} -> 
     0.25, {5, 5, {0, -1}} -> 0.25, {5, 5, {-1, -1}} -> 0.25, {5, 5, {-1, 1}} -> 
     0.25, {5, 5, {1, 0}} -> 0.25, {5, 5, {0, 1}} -> 0.25, {5, 5, {1, 1}} -> 
     0.25, {5, 5, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$1699, $CellContext`qVec -> #]& , \
$CellContext`meshSize$$ = 8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 
    1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10, 15, 20, 20, 20}, "numberOfMasses" -> 5, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.8200836820083681, 0.1673640167364017}, {0.6778242677824267, 
      0.6485355648535565}, {0.41949790794979075`, 0.15581589958158998`}, {
      0.419958158995816, 0.7863179916317992}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}, {
      0.3380000000000001, 0.6699999999999999}, {1.536, 1.1750000000000003`}}, 
     "pointsDataTable" -> CompressedData["
1:eJxdfQmUnFd5ZWtrtaSW1Puu3ld1q7fqqu7qru7/q6qWCYkm8cQEYkI4HiBi
OT7EgxkGGAeaITGEOAcTsyksUULigeABJyIEMyb14hjHJhrGE5lAD5uMocEg
jGzJtmTL8qjfvfeLq3SOT7m6/vqW9+57//3fd9+rvlf97q//zvaqqqodV/5b
vvLfriv/bb3y39H4byBUbf4Lq2E2tfmvJxzb/HftKl6PtYb453NFXFdVF05u
/rulGP53/J+qEM0MF8PH4/UPlGCvQHvPJrBXCP8Sr6812MvTXovBXh5+UgPh
Tzevb1+Fn5Pd+PuJIj9vhd8jxZCO7/fD/0YhbIFB2F0rhC9Fx3eVYK8Qvhbt
XUpgLx8+Ej/fa7CXh52jLQZ7xvgG4PfGIj/vRly1RcbXgr/fXgivjf+zLzy/
+S8phNfF95dL0c268v3S3bCXD6/B5wns6f0++L/dZN9gz9je/XwthMvxgwOM
q6D46afA/tvL13z4OvIvoR3z4b1onwT2jPaeT2DHwgza12DP1P42F18T2u1H
3sOF8NH4/gDx5P2L/rw2z7hriScLsPNsKf79FgsfBH4S2FP+VRb7dS1hfPst
9vuJFdg91mqxnTeWmX8/+z9P/B1AnO15xttMPBnxUgs/R4z2LiKekwm/fypB
Hsp3C/CbWqG/OkO/LzPfNoOdHNurH3bXlU8X8aT2bEa71BrxvIf4TsLWaO9C
CfmvhD8BkJLYbieWw+9Ev1vhfyNH+3X2sZhvjvG1Wez3I0uMr59+jZ93hXj9
sYTfbyJOVojn3WynFeL5qRL6bTk8E/vj++ivozm21zbmv8T39RhfJxdpvw39
WbVIPPRxvCcYN893Mn+1bxP8ry2z/XcBNydyjPN8CfkvEa+PJLC3RHvbOL4X
+f164inLdmgHnk8s8PM+xrVMPHcyf/VvE3Gb43U1bKcl/v0c5ptji+yfDY6v
LPPfzvGUZXz1xNMC8ddOPM0z/z7iWe3bSfwuMd5G+N9YZHw1bM9F2nsceD6S
5fWPAs9ryncH/J+QvwbiKUN7HejP9gzbq4+vS8yng/kv8u+N9Kv23cl2WqC9
s7g/VC3wfnAG83FK/qsx/x3N0H6DIc40P+8gnuZor4/5Z9neHcBzu9q7ATg5
ssA4q4mnecZ1Bng+kWF//AJ43kgrfuav943E0xy/30E8pfi+l/kv0F47/+7t
SzzN87odxE2G4/BR4Plomvh7HHg+Nkd7O5l/Sv3P8ZRifJ2cn2f5eS/H0zzt
tTN/9W8Dx1OacW5ne86xvTZ4/5wj/s4Bz0dSbN8a4HltVuODeJphfp3E0zTz
7+V1GdprZ9xpjU/6Vf9upx3l9wjn51n6P8/5Wfnu4nia0fzB8TRNe11snyna
6+V4mtP8xPzlr57jSe+3sT1n2Y+ngec1+XuK/GKaeNwNfnNySvMr45vU/Mv5
coLx9TL/FL/fRlwo3zrOezO8bivjUHuvc35WvhcSXD/J+Pfg/pk6pPsP7hfH
xtn/XYb7zkHa62H+s8Sf+JfyrSOepnn9Ft4npkIm2j9Vgv9DxN9F3L9SE7S3
h/4P6v5MPI8xvgO4vx8dcX6KOKdpr5X5K986tsuk81P4n3B+Cv/jzk8R9xjb
t5b+R2mvhfgZZn4HcD89Oej8FNdN0V4r/at99zOOcV5XxfF+kPGTnx4bpb1L
xPOI+Bv9Dzk/hT3y9qpu4rnf+Snaa8L5KeI96PwU14/x+ssltP+I4qtC/sP6
nPf3Qb7fx/z7nZ/CXp/8E989io/+x4jnFvofdX6K/Iedn8L/kNqH/pVvlYk3
sH3pv9f5KXHDdu/G/FTV4fwU148Qf830P+T8FNcPOj+F/35+/4FE8zzyr7Lf
Ybs/T34K/516fjKNG7YL54Mm56fwP0j7zcTzgPNT+O9zfvoxjkvxU3ze5fwU
cbc7P4UdPRe0sf0aNL55/X7np7iun/ab6V/tu4d+Dmh+KcFPh+Yf3s9b6X8r
27+J7VtH/3XOT2dpl/Mf22e781P2o/NT3lecn76W8yTnXz7fNNPeaY6nBs3f
nG/3an5n/judn7JfdX9gvOdL4qfkacRzE/23OD/F9xqdn2pewt/JT69ch79v
p/9ttFvP+fAi82hnvI+ynXvZnnfefaysHZqIv0a/b4mfVhFH5fx0B9trg/i5
zPvqdhNvZLsxvlN4jr3CT7eyXfHe2ycRP+U8QTw30n+Nv+o+IT+vZb8xT94f
HqG/HaZxB7sNzP8s+7WD89EljUtTHujHDrUz8dzI56xn2b472U9n2L+/KB3n
vEx+mKid8FpN/xfor8GEc44DxkNeVNWn8aXPvR9OchzC3zr7t5rttp6QHzPO
c0l53lWcZ3aa4iLu6L9W+Ztwhc/72D5NJn56K+dZ4LmB6yRn2L87iCeu41zB
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
kZ5D+ijpOcRPWa9yfRTrWfYs+an0HP83vp4hX5b/avaLcb5W+yh/7ueskn5B
+h/pGwb5vbzzU+S/UqGPSpyfoh4svQafc2+0cn66bs5PMUvKX4frOXA9eXVt
gfaGXM8BfHE992Ti+iis75rzU+k5xE+xHqx8uV65Jj1Jo+s5pI+CvYLzU+k5
EN8Q958XnZ+yHuz6qHj9OXN9lPQc4qfof+XP/QTDyrfJ9Rx6DoE96Un6XM8h
fRTsFZ2fIs6866Ok5yjXRxVcHyU9h57bEFfB+SnsSV8hPig9ifj7ark+6uiq
81PqCcr1UVZwfZT0HNJHQc+j/Ha7nqNMH7Wuz6mPMulJ+l3PUaaPqj1cro9a
K7g+Cv1fcH4KfCvfCzyPoOj8FON9tVwftSZ/4qerzk9hT3oS6qNOHNZzI+c/
6Ue0DrzKV63fFYn72gp9Bc+XOFnw/Xvsz/L6aVXB66fEg+/fI168fko8af01
EG/SDxDfBdYRal1foX1dxHOYiN8/JbwzPt7/r81z3aSO+DatL5v0FWw/8h/p
Z3i+xAnpR3i+xJFC0Loshl2e86bqp3nWl7lO5fqKrbw/SW/A/XtHTOvvxE3C
/ugPnI+8fsr5ivFxv9ztsr87cL7Tvh/qayxoXZL6Nz9fgvOpny9B/Vz5+RJr
K3zfR1zkvX7K+dzXWTnfe/1U+go+n3I9yHxdC+t7yne76bwM4KWe9a4Vr5+C
N0hvwHrcsPDFde8g/Qj3N15rjLuG/SW9DOun7dJbbOh+W14/XVv28yWkr4A/
3v83pOfo4/OV8MT1qXbpaRq5vqjzSLR/byVoXRlxLrP+/mgifQXvPyZ9BddP
OI/pfI52rk/r/AjWRU5In9QB/xtqz0bWL1eC9m2i/5fZj2dL0ldoH5v0Fci3
2qSvQHvx/t+u8zq4f+9Ilv3B/jqq80i0z3WZ8el+q/NWWD+tkp5E69BLnF94
vsTRReJJ61NZ7U8knqQ3EB/Re9ZP25e9fop4c75uj/yXvH6K/HUeCM+X2NB5
IDxfol35So8sPYf02vNeP9V5GfhcdSTpR9ppR+fN8HyJlNp7u+sriF+uJy4I
33oeKj9fompe+1tN+gqOH5O+AvZYP10TntqZv/Qr1EdvSD+y3fUVqlNIXwH/
5/W8WH6+xIm09v/y+Uh6CurH26Xv6KVd6XXaOJ6Ubz3H0bzr+9D/0lOofio9
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
T3H9BPFM/fj6QeL5SeDZxsJ58lP4H+H8tw3zX+0w+4P68RsHnZ/CXn+Iy0mH
qR+3PuenaK/xcn66Pub8FNePEs/8fa3bpZf5IX9vcyj8Hvkp/A+wP8hP1/uc
n8Jebzgcb0C91P8fIJ7JT9dHiWeed2Ejzk+R/5DzU/gfpB7kx9wP0U88cz/h
eq/z02hvrdv5Kfx3hrfFDtD+zzbnp/A/TDxzf+Ptg85P0f4Dzk/hv496h5/i
HIETPc5P4z6Kd3Y5P4X/duencfy3t4TN1bel73P/50aD81P4H3B+ivz7nZ/C
f6/zU+zXPOD8FPl3OD/FeUWtxLP2fzY5P4X/OuJZ58PucX6K/Pucn+L6buK5
mvvlOqmn+Bn397SFZ8hPkX8z8cxzBdobiGf9XvVe56fY97uTeO7jPuIq56fw
31XOT0+0Oz+F/5bwl+Sn8N8YPkh+Cv91xLP2E+4iXhq532Kb81Psi7lYAp51
HshPS+Kn8N9KPPP3AtaanJ/Cf73z09h/qdpwiPwU/ncQz7u4z+dySfw02qt6
oiR+en/8/KES8NzHfS/fS8RP4b+BeNbvBexzfgr/Nc5P4X9L+Gfy0/j25FMl
8VPk/0hJ/PSG6O++RPx0Idr7RQI8K55LSRk/Pbbb+Sn8b3d+in020nN8l78v
8/OS+OlZbGMriZ9iX/GPkj8iP8U+v6cT8VPsu9kKetCg8xxqTPwU/qucn+Lz
cyXxU+z7/HbpTvLT7bFBv5U8Q36K/nkiET+F/+eTJ8hP4b/axE/xea0Bz/2c
n+qtQH6KfU4/Lomfwv+JpIv8FPuKziS/RH4K/88kHyQ/xftt9nvkp/C/28RP
Mf7r7Cz5Kfw3GvDM388+0WLip+i/HyTvIj8F/p5Kfo38FPPDFq7/3st4dkIP
cp9+X2uf/TL5Kfw3mPgp/Deb+Cn8txnw3A/8bHSa+Cnyv5z8Hfkp/O8w8VP4
32NnPwN+ivFdb/9Mfgr/TdZKfgr/rSZ+Cv8dJn4K/wcMeOZ5vrf0mvgp/O+y
H7+Qn57cb+Kn8N9o4qfw32Lip/DfbuKn8N9lt5Cfwn+PiZ/Cfx/xzPMuhgdM
/BTzYb11kp/Cf7OJn8J/mx0nP4X/TuKF+xtPdNud5Kex+8712hPkp/Dfb+Kn
8D9IPGu/3BDxrN8vaDXxU/jvsAXy09ifawfsBvJT7L/rNfFTnA/cZ+Kn+L37
ASvjp8NDxDPPuwjDxPMA9/ONmvgp5t8uexf5KfLvsU+Sn+L6PuslP0X+/cTL
FuY/aEMv5KfDwyZ+ivxHTPwU9sYsltPu4O/0nDto4qe4vtf+jvwU1/eb+Cmu
H7DfJz+F/yH7Ifkp/I8QL+TvYdTET2HvoImfwt448TzA9jxk4qe4foB43s3z
ngdN/BTXD9uT5KfwP2rip/A/ZuKncb67dpzx8fcdzk2Y+CnsTTK+QXzeOG3i
p7h+iHjexfOmR6yMnw6P2Sj5KdrzoImfIp8JEz+FvUOMj7+vdcuUiZ/G/r5t
mvHxvIvrZkzrp4h31MRP4f8g8fwE1ivDuL2C/BT+D5n4KfxPWtn66VXTJn4a
/TfOEC/8vYDTM4yP5/LcMWvip3F+GB4nnvl7AWGCeH68hPaftFvJT+F/injm
+ul908Qzz6u7bcbET6O962ZN/DT6n0hxfh5E+15MmfhpHM/hEPHM37O6dsrE
T+P1b5u2e8hPkf8M8czfL2icJV54Xt3pWRM/je1/R8rET6P9t80xPv6ewlVp
Ez9FvNPEczX4x8Vpe4j8FPRlxp4lP0X/z5r4Kfo/ZWX8dGKO8fH3HS7Omfgp
2jPN+HjexW0ZEz9F/jPEM9dPr5o18VP0f8rET6P/0ykr46d3zJn4KeylGR/X
T6/KmPgp7M0zPp53cXreytZP75s18VPEm7IbyE+R/xzqeeKnE2kTP0X+aStb
P70vY+KnwNM88dxHPC0wviG2Z9bET9H/c8Qzfy/g9JzlXshP70jb/eSnyD9D
PPP3ta6aJ555Hlvjgomfwt6CiZ/CXpZ4HmJ7Lpr4KeJNE8/8PauJjDWRnyL/
jP0n8lPkP0888/cLblsgXpqYf9bETyOeJxadn0Y8X1xkfPw9hfuWTPwU8WaI
563A89vm7Y4Xrp9etUA8XwCeG7Mmfor+z5r4KewtMj6eD/e2JeenaM8c4+M5
XI3LJn6K/OeJZ66f3rdg4qfAU9bET4GnReenaM8l56ewt2Rl66f35Zyfwt4y
4+N5F9etWNn66VVZ+1XyU8S7aIH8FPkvEs88v/iOJeenyD9nZeunVy2X89PG
FeK5n3haYXw8X+KOxMRP0f+LtpX8FP2/ZKfJT5F/jnh+Dni+mHN+ivyXy/np
bSvOT2EvcX4a+7/FiGfGc5M5P0W8S/Y68lPEm7M18lPkv2yvIj9F/ivEM/lp
Y+L8FPYS56fx+pea89No/25jfMTPQN75KfC/bF8nPwX+l+1O8lPkv2LveCE/
vS2xvyE/jf05bc5PY/4fNsZHvnzJnJ9G/6/OMz6ed/FA3vkp8l+xzAvXT69K
nJ/G8bbLnJ9G/zeY89Po/9/M+Wnkm7m8af00+v9U3vkp7BUYH8+7uKFgWj99
HR6v7eMv5KcvNuen8fo7zflpjLcl7/wU/Z93fhr9P5Iv56cvLjg/hb0C4+N5
Fy3Fcn76h0Y8P43xdNbsveSnMf+X5p2fov/zzk/R/wXnpzH/Pyw4P4W9gn2W
/BT2isQzz7u4u+j8NC4HTOWJ5ycx/304bxfIT2P7X8oTL/x9rVcXnJ9G/w8U
nJ/CXtH5KewVnZ/CXpF45u8uvnrV+Sn6P088s76fK9gE+Sn6v0A8k5/uKjo/
Rf8XnZ/CXtGuIj+FvVXnp7C3yvh4TuCuw85PY7w3FYjnJzAfP1Jwfhrzf3HR
+Sn6v+j8FPPJqpWtn960alo/hb1V56ewd5jx8Xc37zxs/x/5uj5O
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {10, 15, 20, 20, 
    20}, $CellContext`rawNumberOfMasses$$ = 5, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 3, $CellContext`tau$$ = 
    0, $CellContext`tick$$ = False, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 
    0.8}, {0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}, {0.3380000000000001, 
    0.6699999999999999}, {1.536, 1.1750000000000003`}}, Typeset`show$$ = True,
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period:"]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open"]}, 
                ImageSize -> {200, 60}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Text[
                Text["Angular frequency \[Omega](q), selection:"]], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["mesh size "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`meshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin], 
                Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tau$$], 0}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`meshSize$$], 8}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`meshSize$$ = 
        8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
         1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tau$$ = 
        0, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       Dynamic[If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
            Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
              1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
           Module[{$CellContext`n$}, $CellContext`n$ = 2; 
             While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
            ReplaceAll[
              "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
             2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
              $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
              
              Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; $CellContext`bInitDefaults$$ = 
            False; Null, Null]; 
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
                $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
              True, Null]; 
           If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
                
                Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`bRefreshDynPlot$$ = 
              False, Null]; $CellContext`dynPlot$$[$CellContext`tau$$], 
           
           If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
            If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
               False; $CellContext`bRefreshDynamics$$ = 
               True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
            If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
              Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
            LocatorPane[
             Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                   Dimensions[#]] < 3, 
                 
                 Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
                 If[First[
                    Dimensions[#]] > 7, 
                  Take[#, 7], #]]; 
              Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                 First[
                   Dimensions[$CellContext`rawArrayOfMasses$$]]; 
                If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                    $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                  
                  While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                   AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                   Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                   Part[
                    Part[$CellContext`kArray$$, All, 1], All, 1]]; 
                If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                  Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                  
                  While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                   Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                   Part[$CellContext`u$$, 1], 
                   
                   Part[$CellContext`u$$, 
                    1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                 Part[$CellContext`glConstLocDefault, 1], 
                 Part[$CellContext`u$$, 1]]; 
              Part[$CellContext`u$$, 2] = If[Dot[
                   Part[$CellContext`u$$, 2], 
                   
                   Part[$CellContext`u$$, 
                    2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                 Part[$CellContext`glConstLocDefault, 2], 
                 Part[$CellContext`u$$, 2]]; {
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
               If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
               If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
               If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
               ReplaceAll[
                 "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
                
                2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
               True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
             $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
             LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period:"]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open"]}, 
                 ImageSize -> {200, 60}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Text[
                 Text["Angular frequency \[Omega](q), selection:"]], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["mesh size "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`meshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tau$$, 0}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`meshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, "DefaultOptions" :> {}],
     ImageSizeCache->{916., {293., 300.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms}, $CellContext`latticeBasis = 
          Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            Range[$CellContext`numMasses]]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, 
           "qMaxVec" -> (2 Pi) $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay]& , 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], $CellContext`pointsTable[
         Pattern[$CellContext`mPosFirstCell, 
          Blank[List]], 
         Pattern[$CellContext`latticeBasis, 
          Blank[List]], 
         Pattern[$CellContext`numberLatticeLinesToDisplay, 
          Blank[List]]] := 
       Table[$CellContext`mPosFirstCell + 
         Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
          
          Part[$CellContext`numberLatticeLinesToDisplay, 
           1]}, {$CellContext`j, -
          Part[$CellContext`numberLatticeLinesToDisplay, 2], 
          
          Part[$CellContext`numberLatticeLinesToDisplay, 
           2]}], $CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], $CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk 
            Part[$CellContext`mA, $CellContext`j]])], \
$CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], $CellContext`showDynamics[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`ql, 
          Blank[]]] := 
       Module[{$CellContext`pointsDataTable, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`e, $CellContext`omega, \
$CellContext`points, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses}, \
{{$CellContext`a, $CellContext`b}, $CellContext`pointsDataTable, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`lines, \
$CellContext`mScalarArray, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "numberLatticeLinesToDisplay", 
             "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`points = 
          Table[
           Part[$CellContext`pointsDataTable, $CellContext`k] + 
            Table[$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`ql, $CellContext`a $CellContext`i + \
$CellContext`b $CellContext`j] - $CellContext`omega #))], {$CellContext`i, -
               Part[$CellContext`numberLatticeLinesToDisplay, 1], 
               
               Part[$CellContext`numberLatticeLinesToDisplay, 
                1]}, {$CellContext`j, -
               Part[$CellContext`numberLatticeLinesToDisplay, 2], 
               
               Part[$CellContext`numberLatticeLinesToDisplay, 
                2]}]& , {$CellContext`k, $CellContext`numberOfMasses}]; \
$CellContext`nu = (2 Pi) If[$CellContext`omega == 0, 1, 1/$CellContext`omega]; 
         Show[{
            Table[
             ListPlot[
              Part[$CellContext`points, $CellContext`k][$CellContext`nu #], 
              PlotRange -> {{(-$CellContext`glConstWindowHalfWidth)/
                 2, $CellContext`glConstWindowHalfWidth}, \
{(-$CellContext`glConstWindowHalfWidth)/
                 2, $CellContext`glConstWindowHalfWidth}}, 
              ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
              Directive[
                PointSize[
                 Sqrt[
                 Part[$CellContext`mScalarArray, $CellContext`k] \
($CellContext`glConstMMax^(-1)/350)]], 
                $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], 
            
            Graphics[{$CellContext`lines}]}]& ], \
$CellContext`glConstPrimaryDisplaySize = {380, 380}, $CellContext`glConstMMax = 
       30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, (-Part[$CellContext`qMax, 1])/2, Part[$CellContext`qMax, 1]/
               2, Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, (-
                Part[$CellContext`qMax, 2])/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], \
$CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 
                23}}]]}]], $CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
($CellContext`glConstMMax^(-1)/500)]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> {{(-$CellContext`glConstWindowHalfWidth)/
                2, $CellContext`glConstWindowHalfWidth}, \
{(-$CellContext`glConstWindowHalfWidth)/
                2, $CellContext`glConstWindowHalfWidth}}, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           
           Ceiling[(12 $CellContext`scaleKValue) 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + ($CellContext`t (1 - 
                  2 $CellContext`f)) $CellContext`nd, $CellContext`h 
               Sin[((2 Pi) $CellContext`n) $CellContext`t]}], {$CellContext`t,
              0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 
             0.01}]}], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]]] := Module[{$CellContext`result}, $CellContext`result = If[
            
            NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], \
$CellContext`massValue = $CellContext`checkAgainstRange[
        0., 0.25, 0.25, $CellContext`glConstMMax], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , \
$CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], \
$CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.6013852883586907`*^9, 3.6013853115950203`*^9}, {
   3.601385418750149*^9, 3.6013854396273427`*^9}, 3.6013856049467983`*^9, {
   3.6013856402948203`*^9, 3.6013856425209475`*^9}}]
}, Open  ]]
},
WindowSize->{1571, 665},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 100699, 2387, 12783, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[101281, 2411, 94721, 1999, 11072, "Input"],
Cell[196005, 4412, 144336, 2700, 615, "Output"],
Cell[340344, 7114, 130374, 2474, 615, "Output"],
Cell[470721, 9590, 189469, 3436, 615, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
