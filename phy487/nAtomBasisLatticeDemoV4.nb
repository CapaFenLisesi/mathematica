(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[   1994833,      35813]
NotebookOptionsPosition[   1988910,      35637]
NotebookOutlinePosition[   1990559,      35687]
CellTagsIndexPosition[   1990207,      35675]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Phonon Modes for 2D Lattice Vibrations", "DemoTitle",
 CellChangeTimes->{3.600887141142584*^9}],

Cell[CellGroupData[{

Cell["", "InitializationSection",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{
     "glConstMinSquaredDistanceFromOrigin", ",", 
      "glConstMinAngleBetweenLatticeVectors", ",", "glConstLocDefault", ",", 
      "glConstDefaultMass", ",", "glConstKDefaults", ",", "glConstKMin", ",", 
      "glConstKMax", ",", "glConstMMax", ",", "glConstWindowHalfWidth", ",", 
      "glConstSpringColors", ",", "glConstPrimaryDisplaySize", ",", 
      "glConstTextDisplayOffsetHack", ",", "glConstNeighboringCellIndexes", 
      ",", "glConstDynPlotRange", ",", "glConstSpringColorsByN"}], "]"}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"glConstMinSquaredDistanceFromOrigin", " ", "=", " ", "0.1"}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstMinAngleBetweenLatticeVectors", "=", 
     RowBox[{"Pi", "/", "6"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstLocDefault", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.1", ",", "1.3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1.9", ",", "0.8"}], "}"}]}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstDefaultMass", "=", "20"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKDefaults", "=", 
     RowBox[{"{", 
      RowBox[{"0.25", ",", "0.25", ",", "0.25", ",", "0.25", ",", "0.25"}], 
      "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKMin", "=", "0.05"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKMax", "=", "1"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstMMax", "=", "30"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstWindowHalfWidth", "=", "3"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstSpringColors", "=", 
     RowBox[{"Darker", "@", 
      RowBox[{"{", 
       RowBox[{
       "Orange", ",", "Green", ",", "Purple", ",", "Cyan", ",", "Yellow"}], 
       "}"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstPrimaryDisplaySize", "=", 
     RowBox[{"{", 
      RowBox[{"380", ",", "380"}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstTextDisplayOffsetHack", "=", 
     RowBox[{"{", 
      RowBox[{"0.25", ",", "0.25"}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstNeighboringCellIndexes", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"glConstDynPlotRange", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", " ", 
         "glConstWindowHalfWidth"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", " ", 
         "glConstWindowHalfWidth"}], "}"}]}], "}"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], "}"}], "\[Rule]", 
       RowBox[{"RGBColor", "[", "...", "]"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"-", "1"}]}], "}"}], "\[Rule]", 
       RowBox[{"RGBColor", "[", "...", "]"}]}], ",", " ", "..."}], "}"}], 
    "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"glConstSpringColorsByN", " ", "=", " ", 
     RowBox[{"DeleteDuplicates", "@", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"s", " ", 
            RowBox[{
             RowBox[{"Append", "[", 
              RowBox[{"glConstNeighboringCellIndexes", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
           RowBox[{"glConstSpringColors", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"s", ",", " ", 
            RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",", 
          " ", 
          RowBox[{"{", 
           RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", "1"}], 
       "]"}]}]}], " ", ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{"Future", " ", "possible", " ", "maintainance", " ", 
     RowBox[{"TODOs", ":", "\[IndentingNewLine]", GridBox[{
        {
         RowBox[{
          RowBox[{
          "implement", " ", "a", " ", "min", " ", "separation", " ", "for", 
           " ", "the", " ", "equilibrium", " ", "mass", " ", "positions", " ",
            "too", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
             "as", " ", "done", " ", "for", " ", "the", " ", "lattice", " ", 
              "vectors"}], ")"}], ".", " ", "\[IndentingNewLine]", 
            "Trickier"}]}], ",", " ", 
          RowBox[{
          "since", " ", "that", " ", "should", " ", "be", " ", "based", " ", 
           "on", " ", "the", " ", "separations", " ", "in", " ", "the", " ", 
           "origin", " ", "cell"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{
          "and", " ", "not", " ", "the", " ", "obsolute", " ", "separations", 
           " ", "of", " ", "the", " ", 
           RowBox[{"locators", ".", "\[IndentingNewLine]", "Even"}], " ", 
           "if", " ", "that", " ", "is", " ", "done"}], ",", " ", 
          RowBox[{"that", " ", 
           RowBox[{"doesn", "'"}], "t", " ", "mean", " ", "that", " ", "the", 
           " ", "scaling", " ", 
           RowBox[{"won", "'"}], "t", " ", "allow", " ", "for", " ", 
           "overlap", " ", "in", " ", "the", " ", "dynamic", " ", 
           RowBox[{"tab", "."}]}]}]},
        {
         RowBox[{
         "would", " ", "be", " ", "cool", " ", "to", " ", "make", " ", "qLoc",
           " ", "a", " ", "pair", " ", "of", " ", "Locators", " ", 
          RowBox[{"that", ":", "\[IndentingNewLine]", " ", 
           RowBox[{
           "trace", " ", "out", " ", "constrained", " ", "positions", " ", 
            "along", " ", "the", " ", "2", " ", "Pi", " ", "scaled", " ", 
            "reciprocal", " ", "lattice", " ", 
            RowBox[{"vectors", ".", "\[IndentingNewLine]", 
             RowBox[{"(", 
              RowBox[{
              "returning", " ", "the", " ", "distance", " ", "from", " ", 
               "the", " ", "origin", " ", "of", " ", "each", " ", "of", " ", 
               "those", " ", "locators"}], ")"}]}]}]}]}]},
        {
         RowBox[{"a", " ", "message", " ", "box", " ", "on", " ", "user", " ", 
          RowBox[{"error", ":", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"-", " ", "when"}], " ", "an", " ", "angle", " ", "or", 
            " ", "distance", " ", "from", " ", "origin", " ", "change", " ", 
            "has", " ", "driven", " ", "a", " ", "reset", " ", "of", " ", 
            "the", " ", "lattice", " ", 
            RowBox[{"vectors", ".", "\[IndentingNewLine]", 
             RowBox[{"-", " ", "when"}]}], " ", "too", " ", "many", " ", "of",
             " ", "the", " ", "locators", " ", "have", " ", "been", " ", 
            "deleted", " ", "and", " ", "a", " ", "forced", " ", "reset", " ",
             "to", " ", "the", " ", "defaults", " ", 
            RowBox[{"occurs", "."}]}]}]}]},
        {
         RowBox[{
         "Can", " ", "the", " ", "frequency", " ", "qPlaneLoc", " ", 
          "LocatorPane", " ", "look", " ", "more", " ", "like", " ", 
          "Slider2D", " ", "in", " ", "the", " ", "dynamics", " ", "tab", " ",
           "for", " ", 
          RowBox[{"consistency", "?"}]}]},
        {
         RowBox[{
          RowBox[{
          "Am", " ", "using", " ", "a", " ", "calculated", " ", "value", " ", 
           "for", " ", "the", " ", "max", " ", "freq", " ", "for", " ", "the",
            " ", "freq", " ", "plot", " ", "intersection", " ", 
           RowBox[{"plane", ".", " ", "\[IndentingNewLine]", "Hardcoded"}], 
           " ", "this", " ", "to", " ", "magic", " ", "#", " ", 
           RowBox[{"that", "'"}], "s", " ", "out", " ", "of", " ", "the", " ",
            "graphic", " ", 
           RowBox[{"(", "23", ")"}]}], ",", " ", 
          RowBox[{
          "but", " ", "that", " ", "could", " ", "be", " ", "wrong", " ", 
           "for", " ", "some", " ", "params"}]}]},
        {
         RowBox[{
          RowBox[{
          "Scaling", " ", "of", " ", "the", " ", "masses", " ", "ended", " ", 
           "up", " ", "different", " ", "for", " ", "the", " ", "dynPlot", 
           " ", 
           RowBox[{"vs", ".", " ", "parameters"}], " ", 
           RowBox[{"tab", ".", " ", "\[IndentingNewLine]", "Hacked"}], " ", 
           "the", " ", "dynPlot", " ", "scaling", " ", "for", " ", "now"}], 
          ",", " ", 
          RowBox[{"to", " ", "be", " ", "a", " ", "bit", " ", 
           RowBox[{"closer", "."}]}]}]}
       },
       GridBoxDividers->{
        "Columns" -> {True, {False}, True}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{True}}, "RowsIndexed" -> {}}]}]}], "\[IndentingNewLine]",
     "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "checkAgainstRange", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkAgainstRange", "::", "usage"}], " ", "=", " ", 
     "\"\<This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator.\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkAgainstRange", "[", 
      RowBox[{
      "v_", ",", "default_", ",", "lowerLimit_", ",", " ", "upperLimit_", ",",
        " ", 
       RowBox[{"typeFunc_", " ", ":", " ", "NumberQ"}]}], "]"}], " ", ":=", 
     " ", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"typeFunc", "[", "v", "]"}], ",", "v", ",", " ", 
           "default"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"result", " ", "<=", " ", "upperLimit"}], ",", " ", 
           "result", ",", "default"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"result", " ", ">=", " ", "lowerLimit"}], ",", " ", 
           "result", ",", "default"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "result"}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "springPoints", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Based", " ", "on", " ", "my", " ", "ListLinePlot", " ", "answer", " ", 
     "posted", " ", 
     RowBox[{"in", ":", " ", 
      ButtonBox[
       RowBox[{
        RowBox[{"http", ":"}], "//", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
           "a"}], "/", "37228"}], "/", "10"}]}],
       BaseStyle->"Hyperlink",
       ButtonData->{
         URL["http://mathematica.stackexchange.com/a/37228/10"], None},
       ButtonNote->"http://mathematica.stackexchange.com/a/37228/10"]}]}], 
    " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"springPoints", "::", "usage"}], " ", "=", " ", 
     "\"\<springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"springPoints", "[", " ", 
      RowBox[{"a12_List", ",", " ", 
       RowBox[{"n_Integer:", "8"}], ",", 
       RowBox[{"h_:", ".05"}], ",", " ", 
       RowBox[{"f_:", " ", "0.1"}]}], " ", "]"}], " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "a1", ",", " ", "a2", ",", " ", "n1", ",", " ", "springDiff", ",", 
         " ", "nd", ",", " ", "r", ",", " ", "r1"}], " ", "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a1", ",", " ", "a2"}], "}"}], " ", "=", " ", "a12"}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"n1", " ", "=", " ", 
         RowBox[{"Norm", "[", "a1", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"springDiff", " ", "=", " ", 
         RowBox[{"a2", " ", "-", " ", "a1"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nd", " ", "=", " ", 
         RowBox[{"Norm", "[", "springDiff", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", " ", "=", " ", 
         RowBox[{"RotationMatrix", "[", 
          RowBox[{"ArcTan", " ", "@@", "  ", "springDiff"}], " ", "]"}]}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"r1", " ", "=", " ", 
         RowBox[{"r", " ", ".", " ", 
          RowBox[{"{", 
           RowBox[{"n1", ",", " ", "0"}], "}"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", " ", 
                 RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                 RowBox[{"t", " ", 
                  RowBox[{"(", 
                   RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}]}], ",", " ", 
                RowBox[{"h", " ", 
                 RowBox[{"Sin", "[", " ", 
                  RowBox[{"2", " ", "Pi", " ", "n", " ", "t"}], "]"}]}]}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", " ", 
                 RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}], " ", "+", " ", 
                 RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", 
                 RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}]}], "\[IndentingNewLine]", "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "indexLabel", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"indexLabel", "::", "usage"}], " ", "=", " ", 
     "\"\<\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"indexLabel", " ", "=", " ", 
     RowBox[{
      RowBox[{"Subscript", "[", 
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{"#1", ",", "Italic"}], "]"}], ",", " ", "#2"}], "]"}], " ", 
      "&"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "kLable", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"kLable", "::", "usage"}], " ", "=", " ", 
     "\"\<SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"kLable", " ", "=", " ", 
     RowBox[{
      RowBox[{"Style", "[", " ", 
       RowBox[{
        RowBox[{"indexLabel", "[", 
         RowBox[{"\"\<k\>\"", ",", " ", "#"}], "]"}], ",", " ", 
        RowBox[{"FontColor", "\[Rule]", 
         RowBox[{"glConstSpringColors", "[", 
          RowBox[{"[", "#", "]"}], "]"}]}]}], " ", "]"}], " ", "&"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "massColors", " ", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"massColors", " ", ":=", " ", 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Darker", "[", 
         RowBox[{"{", " ", 
          RowBox[{
          "Blue", ",", " ", "Green", ",", " ", "Purple", ",", " ", "Red", ",",
            " ", "Orange"}], " ", "}"}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"Mod", "[", 
           RowBox[{"#", ",", " ", "5"}], "]"}], " ", "+", " ", "1"}], "]"}], 
        " ", "]"}], " ", "&"}], " ", ")"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "massLabel", " ", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"massLabel", " ", ":=", " ", 
     RowBox[{
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{"indexLabel", "[", 
         RowBox[{"\"\<m\>\"", ",", " ", "#"}], "]"}], ",", " ", 
        RowBox[{"massColors", "[", "#", "]"}]}], "]"}], " ", "&"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcLineTable", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcLineTable", "[", " ", 
      RowBox[{"n_List", ",", " ", "b_List", ",", " ", "i_List"}], " ", "]"}], 
     " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"first", ",", " ", "second"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"first", ",", " ", "second"}], "}"}], " ", "=", " ", "i"}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Line", "[", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"-", 
                RowBox[{"n", "[", 
                 RowBox[{"[", "first", "]"}], "]"}]}], 
               RowBox[{"b", "[", 
                RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
              RowBox[{"j", " ", 
               RowBox[{"b", "[", 
                RowBox[{"[", "second", "]"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"n", "[", 
                RowBox[{"[", "first", "]"}], "]"}], 
               RowBox[{"b", "[", 
                RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
              RowBox[{"j", " ", 
               RowBox[{"b", "[", 
                RowBox[{"[", "second", "]"}], "]"}]}]}]}], "}"}], " ", 
           "\[IndentingNewLine]", "]"}], " ", "\[IndentingNewLine]", ",", " ", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", 
            RowBox[{"-", 
             RowBox[{"n", "[", 
              RowBox[{"[", "second", "]"}], "]"}]}], ",", " ", 
            RowBox[{"n", "[", 
             RowBox[{"[", "second", "]"}], "]"}]}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcReciprocalBasis", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcReciprocalBasis", "::", "usage"}], " ", "=", " ", 
     "\"\<Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcReciprocalBasis", "[", "loc_List", "]"}], " ", ":=", " ", 
     RowBox[{"Inverse", "[", " ", 
      RowBox[{"Transpose", "[", " ", "loc", " ", "]"}], " ", "]"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "nMassesFromLocArray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"nMassesFromLocArray", "[", "uLoc_", "]"}], " ", ":=", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Dimensions", "[", "uLoc", "]"}], " ", "//", " ", "First"}], 
        ")"}], " ", "-", "2"}], ")"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "adjustedmoSel", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"adjustedmoSel", "[", 
      RowBox[{"rNumM_", ",", "mOrigInd_", ",", "m1Ind_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"rNumM", ">", "2"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", " ", 
        RowBox[{
         RowBox[{"mOrigInd", "\[Equal]", "m1Ind"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"First", "[", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Range", "[", "rNumM", "]"}], ",", "m1Ind"}], "]"}], 
          "]"}], ",", "\[IndentingNewLine]", "mOrigInd"}], " ", 
        "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"First", "@", 
        RowBox[{"Delete", "[", 
         RowBox[{
          RowBox[{"Range", "[", "2", "]"}], ",", "m1Ind"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "constructKArrayElements", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"constructKArrayElements", "[", " ", 
      RowBox[{"i_Integer", ",", " ", "j_Integer"}], "  ", "]"}], " ", ":=", 
     " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "a", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"a", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "j", ",", " ", 
                RowBox[{"s", " ", 
                 RowBox[{"glConstNeighboringCellIndexes", "[", 
                  RowBox[{"[", "n", "]"}], "]"}]}]}], "}"}], " ", "\[Rule]", 
              " ", 
              RowBox[{"glConstKDefaults", "[", 
               RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"s", ",", " ", 
               RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",",
              " ", 
             RowBox[{"{", 
              RowBox[{"n", ",", " ", "4"}], "}"}]}], " ", "]"}], ",", " ", 
           "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"i", " ", "<", " ", "j"}], ",", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"a", ",", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"i", ",", "j", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "}"}], " ", "\[Rule]", " ", 
             RowBox[{"glConstKDefaults", "[", 
              RowBox[{"[", "5", "]"}], "]"}]}]}], "]"}], ",", " ", "a"}], " ",
          "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "constructKArray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"constructKArray", "[", " ", "r_Integer", " ", "]"}], " ", ":=", 
     " ", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"constructKArrayElements", "[", 
          RowBox[{"i", ",", "j"}], "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "r"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"j", ",", "r"}], "}"}]}], "]"}], ",", " ", "2"}], "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnAlteredKArrayElements", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnAlteredKArrayElements", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", 
       "ni_Integer", ",", "v_"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"kA", "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"glConstNeighboringCellIndexes", "[", 
               RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "_"}], "]"}], 
          "\[RuleDelayed]", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"glConstNeighboringCellIndexes", "[", 
               RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "v"}], "]"}]}], 
         ",", 
         RowBox[{
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"-", 
               RowBox[{"glConstNeighboringCellIndexes", "[", 
                RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "_"}], "]"}],
           "\[RuleDelayed]", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"-", 
               RowBox[{"glConstNeighboringCellIndexes", "[", 
                RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "v"}], 
           "]"}]}]}], "}"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnAlteredKarrayOriginElement", "]"}], ";"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnAlteredKarrayOriginElement", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer", ",", "v_"}], 
      "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "m1oSet", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"m1oSet", "=", 
         RowBox[{"Append", "[", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"kA", "/.", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Rule", "[", 
            RowBox[{"m1oSet", ",", "_"}], "]"}], "\[RuleDelayed]", 
           RowBox[{"Rule", "[", 
            RowBox[{"m1oSet", ",", "v"}], "]"}]}], ")"}]}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "selectVFromKarray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"To", " ", "refresh", " ", "k1"}], ",", "k2", ",", "k3", ",", 
     RowBox[{
     "k4", " ", "after", " ", "changing", " ", "m1Sel", " ", "or", " ", 
      RowBox[{"m2Sel", "."}]}]}], "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"selectVFromKarray", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", 
       "ni_Integer"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m1Ind", ",", "m2Ind", ",", 
         RowBox[{"glConstNeighboringCellIndexes", "[", 
          RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], "/.", "kA"}], ")"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "selectOriginVFromKarray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "To", " ", "refresh", " ", "k5", " ", "after", " ", "changing", " ", 
     "m1Sel", " ", "and", " ", "moSel"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"selectOriginVFromKarray", "[", 
      RowBox[{"kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer"}], "]"}], 
     ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"Sort", "[", 
          RowBox[{"{", 
           RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "/.", "kA"}], ")"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnKarrayForAdditionalMassIndex", "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnKarrayForAdditionalMassIndex", "[", " ", 
      RowBox[{"kA_List", ",", "nmNew_Integer"}], " ", "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "k2", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"k2", " ", "=", " ", 
         RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"constructKArrayElements", "[", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], ")"}], "/@",
             " ", 
            RowBox[{"(", 
             RowBox[{"Select", "[", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"Table", "[", " ", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", " ", "nmNew"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"j", ",", " ", "nmNew"}], "}"}]}], "]"}], ",", 
                 " ", "1"}], "]"}], ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"Max", "[", "#", "]"}], " ", "\[Equal]", " ", 
                 "nmNew"}], " ", "&"}]}], "]"}], ")"}]}], ",", " ", "2"}], 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"kArray", ",", " ", "k2"}], "]"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"kA", ",", " ", "k2"}], "}"}], ",", " ", "1"}], "]"}]}]}], 
      " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "resetLatticeVectorsIfAngleTooSmall", "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
      RowBox[{"uLoc_List", ",", "minAngle_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "t", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"t", " ", "=", " ", 
         RowBox[{"Abs", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{
            RowBox[{"Normalize", "[", 
             RowBox[{"uLoc", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", ".", " ", 
            RowBox[{"Normalize", "[", 
             RowBox[{"uLoc", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}], "]"}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"t", " ", ">", " ", 
            RowBox[{"Pi", "/", "2"}]}], ",", " ", 
           RowBox[{"Pi", "-", "t"}], ",", " ", "t"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", " ", 
         RowBox[{
          RowBox[{"t", " ", "<", " ", "minAngle"}], ",", 
          "\[IndentingNewLine]", "glConstLocDefault", ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"uLoc", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
            RowBox[{"uLoc", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\n",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "projOpU", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"projOpU", "[", "v_List", "]"}], " ", ":=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "^", "2"}], ",", " ", 
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], 
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], 
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "^", "2"}]}], "}"}]}], "}"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"projOp", "::", "usage"}], " ", "=", " ", 
     "\"\<given an input vector \!\(\*OverscriptBox[\(v\), \
\(\[RightVector]\)]\) = {\!\(\*SubscriptBox[\(v\), \(x\)]\), \
\!\(\*SubscriptBox[\(v\), \(y\)]\)}, compute the projection matrix operator \
along the unit vector in that direction.\n\n   projOp[{1, 0}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"1\", \"0\"},
{\"0\", \"0\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{0, 1}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"0\", \"0\"},
{\"0\", \"1\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{a,b}] // MatrixForm = \!\
\(\*Cell[TextData[Cell[BoxData[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{
FractionBox[
SuperscriptBox[\"a\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]},
{
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
SuperscriptBox[\"b\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}]],
CellChangeTimes->{{3.5990911441851797`*^9, 3.599091144641206*^9}, \
3.5990913830438423`*^9, 3.5990915191646276`*^9, 3.599091555028679*^9, \
3.599091735722014*^9, {3.599091916353346*^9, 3.599091928988068*^9}}]]]\)\n\
\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "projOp", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"projOp", "[", "v_List", "]"}], " ", ":=", " ", 
     RowBox[{
      RowBox[{"projOpU", "[", "v", "]"}], "/", 
      RowBox[{"(", 
       RowBox[{"v", ".", " ", "v"}], ")"}]}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "relativeDifferences", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"relativeDifferences", "::", "usage"}], " ", "=", " ", 
     "\"\<Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"relativeDifferences", "[", " ", 
      RowBox[{"r_List", ",", "mp_List", ",", " ", 
       RowBox[{"{", 
        RowBox[{
        "mIndex1_Integer", ",", " ", "mIndex2_Integer", ",", " ", "n_List"}], 
        "}"}]}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "d", ",", " ", "pOrigin", ",", " ", "pOther", ",", " ", "dn"}], "}"}],
        ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"pOrigin", " ", "=", " ", 
         RowBox[{"mp", "[", 
          RowBox[{"[", " ", "mIndex1", " ", "]"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"pOther", " ", "=", " ", 
         RowBox[{
          RowBox[{"mp", "[", 
           RowBox[{"[", " ", "mIndex2", " ", "]"}], "]"}], "+", " ", 
          RowBox[{"n", " ", ".", " ", "r"}]}]}], "  ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"d", " ", "=", " ", 
         RowBox[{"pOther", " ", "-", " ", "pOrigin"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dn", " ", "=", " ", 
         RowBox[{"d", " ", ".", "d"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"dn", ",", " ", "pOrigin", ",", " ", "pOther", ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"projOpU", "[", "d", "]"}], "/", "dn"}], "  ", 
           RowBox[{"(*", 
            RowBox[{"//", " ", "MatrixForm"}], "*)"}], ")"}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calculateCouplings", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calculateCouplings", "::", "usage"}], " ", "=", " ", 
     "\"\<Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions.\>\""}], 
    " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calculateCouplings", "[", 
      RowBox[{"ld_List", ",", " ", "kA_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "t", ",", " ", "t1", ",", " ", "t2", ",", " ", "r", ",", " ", "mp", 
         ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"r", ",", " ", "mp", ",", " ", "numberOfMasses"}], "}"}], 
         " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", " ", "\"\<mPosFirstCell\>\"", ",", 
            " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}],
         " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Append", "[", 
            RowBox[{"#", ",", " ", 
             RowBox[{"relativeDifferences", "[", 
              RowBox[{"r", ",", " ", "mp", ",", " ", 
               RowBox[{"First", "[", "#", "]"}]}], "]"}]}], " ", "]"}], "&"}],
           "/@", " ", 
          RowBox[{"(", 
           RowBox[{"kA", "/.", " ", 
            RowBox[{"Rule", " ", "\[Rule]", " ", "List"}]}], ")"}]}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "}"}], ",", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "3", "]"}], "]"}]}], "}"}], ",", " ", "1"}], 
            "]"}], " ", "&"}], "/@", " ", "t"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"t1", " ", "=", " ", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Select", "[", " ", 
               RowBox[{"t", ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                    "i"}], ")"}], " ", "&&", " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "\[NotEqual]", " ", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0"}], "}"}]}], ")"}]}], " ", 
                 "&"}]}], "]"}], ")"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "[", 
                RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
           "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{"t", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "3", "]"}], "]"}], " ", "==", " ", 
             RowBox[{"{", 
              RowBox[{"0", ",", " ", "0"}], "}"}]}], " ", "&"}]}], "]"}]}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "rest", " ", "of", " ", "the", " ", 
          RowBox[{"permutations", ":"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"t2", ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", " ", 
                   RowBox[{"Drop", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}]}], "}"}], ",", " ", 
                 "1"}], "]"}], " ", "&"}], "/@", " ", "t2"}]}], "}"}], ",", 
           " ", "1"}], "]"}]}], "  ", ";", "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Select", "[", " ", 
               RowBox[{"t2", ",", " ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                   "i"}], ")"}], " ", "&"}]}], "]"}], ")"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "[", 
                RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
           "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"t2", ",", " ", "t1"}], "}"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "spScaled", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"spScaled", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"s1_List", ",", "s2_List"}], "}"}], ",", " ", "scaleKValue_", 
       ",", " ", "referenceSepSquared_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "ds", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ds", " ", "=", " ", 
         RowBox[{"s2", " ", "-", " ", "s1"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"springPoints", "[", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2"}], "}"}], ",", 
          RowBox[{"Ceiling", "[", 
           RowBox[{"12", " ", "scaleKValue", " ", 
            RowBox[{"Sqrt", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"ds", ".", "ds"}], ")"}], "/", "referenceSepSquared"}],
              "]"}]}], "]"}]}], " ", "]"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "oneTermOfdynamicsMatrix", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"oneTermOfdynamicsMatrix", "::", "usage"}], " ", "=", " ", 
     "\"\<\!\(TraditionalForm\`\(grab\\\ data\\\ \(from : \\\ \
rawArrayOfMasses\), \\\ parameterLocatorDependencies, \
\[IndentingNewLine]\(\(couplingData[\([_]\)]\)[\([_]\)]\)[\([_]\)]\\\  = \\\ \
{k, \\\ j, \\\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \\\ \
\*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\\  + \\\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]
ex : \\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]
to\\\ form\\\ equations\\\ of\\\ the\\\ \(form : \
\[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\\  = \\\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\\  \[NotEqual] \\\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\\ \
\((\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\
\[RightVector]\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), \
SubscriptBox[\(m\), \(k\)]] - \\\ \
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(j\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), \
SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \*SubscriptBox[\(m\), \(j\)]\)]] \
\*SuperscriptBox[\(e\), \(I\\\ \((\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\\  . \\\ \
\*OverscriptBox[\(q\), \(\[RightVector]\)]\\\ )\)\)])\)\[IndentingNewLine]
Note\\\ that\\\ qVec\\\ here\\\ is\\\ intended\\\ to\\\ be\\\ an\\\ undefined\
\\\ global . \\\ \\\ Is\\\ there\\\ a\\\ way\\\ to\\\ do\\\ that\\\ \
\(\(programatically\)\(?\)\)\)\)\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"oneTermOfdynamicsMatrix", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "k_Integer", ",", " ", "j_Integer", ",", " ", "mVec_List", ",", " ", 
         "kS_", ",", " ", "_", ",", "_", ",", "_", ",", "proj_List"}], "}"}], 
       ",", " ", "r_List", ",", " ", "mk_", ",", " ", "epsilon_List", ",", 
       " ", "mA_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"(", 
      RowBox[{"kS", " ", 
       RowBox[{"proj", "  ", ".", 
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"epsilon", "[", 
            RowBox[{"[", "k", "]"}], "]"}], "/", "mk"}], " ", "-", " ", 
          RowBox[{
           RowBox[{"epsilon", "[", 
            RowBox[{"[", "j", "]"}], "]"}], 
           RowBox[{
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{"I", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"mVec", " ", ".", " ", "r"}], ")"}], ".", " ", 
                 "qVec"}], ")"}]}], ")"}]}], "/", 
            RowBox[{"Sqrt", "[", " ", 
             RowBox[{"mk", " ", 
              RowBox[{"mA", "[", 
               RowBox[{"[", "j", "]"}], "]"}]}], " ", "]"}]}]}]}], ")"}]}]}], 
      "  ", ")"}]}], "  ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "dynamicsMatrix", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dynamicsMatrix", "[", 
      RowBox[{"ld_List", ",", " ", "cd_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "cdFlatAndSorted", ",", " ", "r", ",", " ", "res", ",", " ", 
         "epsilon", ",", " ", "m", ",", "mScalarArray", ",", " ", 
         "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"cdFlatAndSorted", " ", "=", " ", 
         RowBox[{"SplitBy", "[", " ", 
          RowBox[{
           RowBox[{"Sort", "@", 
            RowBox[{"Flatten", "[", 
             RowBox[{"cd", ",", " ", "2"}], "]"}]}], " ", ",", " ", "First"}],
           " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"r", ",", "mScalarArray", ",", " ", "numberOfMasses"}], 
          "}"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", 
            " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}],
         " ", ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"Here", " ", 
            SubscriptBox[
             OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], " ", 
            RowBox[{"(", 
             RowBox[{"=", 
              RowBox[{"epsilon", "[", 
               RowBox[{"[", "k", "]"}], "]"}]}], ")"}], " ", "is", " ", 
            "represented", " ", "as", " ", "a", " ", "2", "x", 
            RowBox[{"(", 
             RowBox[{"2", "N"}], ")"}], " ", "matrix", " ", "with", " ", 
            "the", " ", "vector", " ", "factored", " ", 
            RowBox[{"out", ".", "  ", "For"}], " ", "example", " ", "with", 
            " ", "N"}], " ", "=", " ", "3"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox[
            OverscriptBox["\[Epsilon]", "\[RightVector]"], "1"], "=", " ", 
           RowBox[{
            RowBox[{
             TagBox[
              RowBox[{"(", "\[NoBreak]", GridBox[{
                 {"1", "0", "0", "0", "0", "0"},
                 {"0", "1", "0", "0", "0", "0"}
                },
                
                GridBoxAlignment->{
                 "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                  "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                  "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
              Function[BoxForm`e$, 
               MatrixForm[BoxForm`e$]]], "\[IndentingNewLine]", 
             "\[IndentingNewLine]", "This", " ", "will", " ", "be", " ", 
             "pre"}], "-", 
            RowBox[{
            "multiplied", " ", "by", " ", "a", " ", "2", "x2", " ", 
             "projection", " ", 
             RowBox[{"matrix", ".", "\[IndentingNewLine]", "The"}], " ", 
             "whole", " ", "thing", " ", "should", " ", "be", " ", 
             "logically", " ", "treated", " ", "as", " ", "if", " ", "it", 
             " ", "is", " ", "post"}], "-", 
            RowBox[{
            "multiplied", " ", "by", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", Cell[TextData[Cell[BoxData[
              TagBox[
               RowBox[{"(", "\[NoBreak]", GridBox[{
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "2"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "2"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "2"}]]}
                 },
                 
                 GridBoxAlignment->{
                  "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                   "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                   "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
               Function[BoxForm`e$, 
                MatrixForm[BoxForm`e$]]]],
              
              CellChangeTimes->{{3.600871330362259*^9, 
               3.6008713538916054`*^9}}]]]}]}]}]}], "\[IndentingNewLine]", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"epsilon", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{
           RowBox[{"IdentityMatrix", "[", " ", 
            RowBox[{"2", " ", "numberOfMasses"}], " ", "]"}], ",", "2"}], 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"res", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Table", "[", " ", 
             RowBox[{
              RowBox[{"Total", "@", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"oneTermOfdynamicsMatrix", "[", 
                   RowBox[{"#", ",", " ", "r", ",", " ", 
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", " ", "epsilon", ",", 
                    " ", "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
                 RowBox[{"(", 
                  RowBox[{"cdFlatAndSorted", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ")"}]}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], "]"}], " ",
             "//", " ", "Flatten"}], ",", " ", 
           RowBox[{"2", " ", "numberOfMasses"}]}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"res", " ", "/.", " ", 
          RowBox[{"qVec", " ", "\[Rule]", " ", "#"}]}], " ", "&"}]}]}], " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{"cdFlatAndSorted", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{"mScalarArray", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{
         RowBox[{
          RowBox[{"oneTermOfdynamicsMatrix", "[", 
           RowBox[{"#", ",", " ", "r", ",", " ", 
            RowBox[{"mScalarArray", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", " ", 
            "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"cdFlatAndSorted", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", "res"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", "epsilon"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"oneTermOfdynamicsMatrix", "[", " ", 
            RowBox[{
            "parameterLocatorDependencies", ",", " ", "couplingData"}], " ", 
            "]"}], "[", 
           RowBox[{"#", ",", " ", "r", ",", 
            RowBox[{"mScalarArray", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", 
            "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"cd", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\n", "\[IndentingNewLine]",
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcDynamics", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcDynamics", "::", "usage"}], " ", "=", " ", 
     "\"\<a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \
\(k\)]\),\!\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for \
each of the system eigenvalues, when evaluated at qLoc.\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Example", ":", "\n", "\n", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "ld", ",", " ", "cd", ",", " ", "basisAndMassPoints", ",", " ", 
         "kArray", ",", " ", "matrix", ",", " ", "dynamics", ",", " ", 
         "qPoint", ",", " ", "omegaIndex"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"basisAndMassPoints", " ", "=", " ", 
         RowBox[{"{", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.6", ",", "1"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"-", "0.4"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"0.3", ",", "3"}], "}"}]}], " ", "}"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"ld", " ", "=", " ", 
         RowBox[{"locDependent", "[", " ", 
          RowBox[{"basisAndMassPoints", ",", " ", "1", ",", 
           RowBox[{"{", "10", "}"}]}], " ", "]"}]}], "  ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"kArray", " ", "=", " ", 
         RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"cd", " ", "=", " ", 
         RowBox[{"calculateCouplings", "[", " ", 
          RowBox[{"ld", ",", " ", "kArray"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"qPoint", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"\"\<qMaxVec\>\"", " ", "/.", " ", "ld"}], ")"}], "/", 
          "2"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"matrix", " ", "=", " ", 
         RowBox[{"dynamicsMatrix", "[", " ", 
          RowBox[{"ld", ",", " ", "cd"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynamics", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"calcDynamics", "[", " ", 
            RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}], " ", "//",
            " ", "First"}], " ", "//", " ", "TableForm"}]}]}]}], 
      "\[IndentingNewLine]", "]"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcDynamics", "[", "mAtQ_List", "]"}], " ", ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Sqrt", "[", 
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Eigensystem", "[", " ", "mAtQ", " ", "]"}], " ", "//", " ", 
         "Transpose"}], ")"}]}], ")"}]}], "  ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "frequencyPlotCalc", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"frequencyPlotCalc", "::", "usage"}], " ", "=", " ", 
     "\"\<frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"frequencyPlotCalc", "[", 
      RowBox[{"ld_List", ",", "m_", ",", "meshSz_Integer"}], "]"}], " ", ":=",
      " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "eigTable2D", ",", " ", "eigTable1D", ",", " ", "qMax", ",", " ", 
         "omegaPointList2D", ",", " ", "omegaPointList1D", ",", " ", "range", 
         ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"qMax", ",", " ", "numberOfMasses"}], "}"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<qMaxVec\>\"", ",", "\"\<numberOfMasses\>\""}], "}"}], 
          " ", "/.", " ", "ld"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"eigTable2D", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Re", "[", 
            RowBox[{"Table", "[", "  ", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"qx", ",", " ", "qy"}], "}"}], " ", ",", 
                RowBox[{"Eigenvalues", "[", " ", 
                 RowBox[{
                  RowBox[{"m", "[", " ", 
                   RowBox[{"{", 
                    RowBox[{"qx", ",", " ", "qy"}], "}"}], "  ", "]"}], " ", "//",
                   " ", "N"}], " ", "]"}]}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"qx", ",", " ", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"qMax", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "/", " ", "meshSz"}]}], 
               "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"qy", ",", " ", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"qMax", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "/", " ", "meshSz"}]}], 
               "}"}]}], " ", "]"}], " ", "]"}], ",", "1"}], "]"}]}], " ", ";",
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"omegaPointList2D", "[", "nn_", "]"}], " ", ":=", "  ", 
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"Sqrt", "[", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
               RowBox[{"[", "nn", "]"}], "]"}]}], "}"}], "]"}], "&"}], "/@", 
          " ", "eigTable2D"}]}], "  ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"range", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"2", " ", "numberOfMasses"}], ")"}], " ", "//", " ", 
           "Range"}], ")"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"ListPlot3D", "[", " ", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"omegaPointList2D", "[", "#", "]"}], " ", "&"}], "/@", 
           " ", "range"}], ",", " ", 
          RowBox[{"PlotRange", " ", "\[Rule]", " ", "Full"}], " ", ",", " ", 
          RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], ",", 
          RowBox[{"AxesLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<\!\(\*SubscriptBox[\(q\), \(x\)]\)\>\"", ",", " ", 
             "\"\<\!\(\*SubscriptBox[\(q\), \(y\)]\)\>\""}], "}"}]}]}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", " ", "\[IndentingNewLine]", 
   "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "showFreqPlot", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showFreqPlot", "::", "usage"}], " ", "=", " ", 
     "\"\<showFreqPlot[ qPlaneLoc, freqPlot ]\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showFreqPlot", "[", 
      RowBox[{"qpl_List", ",", " ", "freqPlotData_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"aa", ",", " ", "bb"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"aa", ",", " ", "bb"}], "}"}], " ", "=", "  ", "qpl"}], " ",
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{"{", 
          RowBox[{"freqPlotData", ",", "\[IndentingNewLine]", 
           RowBox[{"Graphics3D", "[", " ", 
            RowBox[{"Polygon", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", 
               "  ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}]}], "}"}],
              "]"}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "pointsTable", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"pointsTable", "::", "usage"}], " ", "=", " ", 
     "\"\<Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage.\>\""}], " ", 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"pointsTable", "[", " ", 
      RowBox[{"massPosition_List", ",", " ", "latticeOrigins_List"}], " ", 
      "]"}], " ", ":=", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#", " ", "+", " ", "massPosition"}], ")"}], " ", "&"}], "/@",
        " ", "latticeOrigins"}], ")"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "findLatticeCells", " ", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"findLatticeCells", "::", "usage"}], " ", "=", " ", 
     "\"\<All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"findLatticeCells", "[", 
      RowBox[{"latticeVectors_List", ",", "limits_List"}], "]"}], " ", ":=", 
     " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", " ", "b", ",", "sol", ",", " ", "oneSolution"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", " ", "b"}], "}"}], " ", "=", " ", 
         "latticeVectors"}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Rationalize", " ", "to", " ", 
          RowBox[{"fix", ":", " ", "to", ":", " ", 
           ButtonBox[
            RowBox[{
             RowBox[{"http", ":"}], "//", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], 
                 "/", "questions"}], "/", "6055"}], "/", "how"}], "-", "to", 
              "-", "get", "-", "rid", "-", "of", "-", "warnings", "-", "when",
               "-", "using", "-", "solve", "-", "on", "-", "an", "-", 
              "equation", "-", "with", "-", "inexact", "-", "coeffici"}]}],
            BaseStyle->"Hyperlink",
            ButtonData->{
              URL[
              "http://mathematica.stackexchange.com/questions/6055/how-to-get-\
rid-of-warnings-when-using-solve-on-an-equation-with-inexact-coeffici"], None},
            
            ButtonNote->
             "http://mathematica.stackexchange.com/questions/6055/how-to-get-\
rid-of-warnings-when-using-solve-on-an-equation-with-inexact-coeffici"]}]}], 
         " ", "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"oneSolution", "[", "o_", "]"}], " ", ":=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"n", ",", "m"}], "}"}], " ", "/.", 
          RowBox[{"Solve", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Rationalize", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"limits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "<", "  ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"n", " ", "a"}], " ", "+", " ", 
                   RowBox[{"m", " ", "b"}], " ", "+", " ", "o"}], ")"}], " ", 
                 ".", " ", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "0"}], "}"}]}]}], ")"}], " ", "&&", 
              "\[IndentingNewLine]", 
              RowBox[{"(", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"n", " ", "a"}], " ", "+", " ", 
                   RowBox[{"m", " ", "b"}], " ", "+", " ", "o"}], ")"}], " ", 
                 ".", " ", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "0"}], "}"}]}], " ", "<", " ", 
                RowBox[{
                 RowBox[{"limits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ")"}], " ", "&&", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"limits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "<", "  ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"n", " ", "a"}], " ", "+", " ", 
                   RowBox[{"m", " ", "b"}], " ", "+", "o"}], ")"}], " ", ".", 
                 " ", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}]}]}], ")"}], " ", "&&", 
              "\[IndentingNewLine]", 
              RowBox[{"(", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"n", " ", "a"}], " ", "+", " ", 
                   RowBox[{"m", " ", "b"}], " ", "+", "o"}], ")"}], " ", ".", 
                 " ", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}]}], " ", "<", " ", 
                RowBox[{
                 RowBox[{"limits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], " ", "]"}], 
            "\[IndentingNewLine]", ",", " ", 
            RowBox[{"{", 
             RowBox[{"n", ",", "m"}], "}"}], ",", " ", "Integers"}], 
           "]"}]}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"sol", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"oneSolution", "[", "#", "]"}], " ", "&"}], "/@", " ", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "0"}], "}"}], ",", "a", ",", " ", "b", ",",
                 " ", 
                RowBox[{"a", "+", "b"}]}], "}"}]}], " ", ",", "1"}], "]"}], 
           " ", "//", " ", "Sort"}], " ", "//", " ", "DeleteDuplicates"}]}], 
        " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#", ",", 
            RowBox[{
             RowBox[{"a", " ", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], " ", "+", " ", 
             RowBox[{"b", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], " ", "&"}], "/@", 
         " ", "sol"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "locDependent", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"locDependent", "::", "usage"}], " ", "=", " ", 
     "\"\<Locator dependent calculations (i.e. based on the mass positions \
and the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"locDependent", "[", " ", 
      RowBox[{"uLoc_List", ",", "numMasses_Integer", ",", " ", "rma_List"}], 
      " ", "]"}], "  ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "m", ",", "latticeBasis", ",", " ", "numberLatticeLinesToDisplay", 
         ",", "reciprocalBasis", ",", "mObliqueComponents", ",", " ", 
         "mPosFirstCell", ",", " ", "reciprocalNorms", ",", " ", 
         "allLatticeCellOriginsInDynPlotRange", ",", " ", "cellOrigins"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"latticeBasis", " ", "=", 
         RowBox[{"Take", "[", 
          RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"m", " ", "=", " ", 
         RowBox[{"Drop", "[", 
          RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"numberLatticeLinesToDisplay", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Ceiling", "[", "  ", 
             RowBox[{"Abs", "[", 
              RowBox[{"glConstWindowHalfWidth", "/", " ", 
               RowBox[{
                RowBox[{"latticeBasis", "[", 
                 RowBox[{"[", "#", "]"}], "]"}], "[", 
                RowBox[{"[", "#", "]"}], "]"}]}], "]"}], "]"}], " ", "&"}], 
           " ", "/@", " ", 
           RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"reciprocalBasis", " ", "=", " ", 
         RowBox[{
         "calcReciprocalBasis", "[", " ", "latticeBasis", " ", "]"}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"reciprocalNorms", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Norm", "[", 
             RowBox[{"reciprocalBasis", "[", 
              RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
           " ", 
           RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"mObliqueComponents", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"m", "[", 
             RowBox[{"[", " ", "i", " ", "]"}], "]"}], " ", ".", " ", 
            RowBox[{"reciprocalBasis", "[", 
             RowBox[{"[", " ", "j", " ", "]"}], "]"}]}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numMasses"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"j", ",", " ", "2"}], "}"}]}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"mPosFirstCell", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"m", "[", 
              RowBox[{"[", "#", "]"}], "]"}], " ", "-", " ", 
             RowBox[{
              RowBox[{"Floor", "[", 
               RowBox[{"mObliqueComponents", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", ".", " ", 
              "latticeBasis"}]}], " ", ")"}], " ", "&"}], " ", "/@", " ", 
          RowBox[{"Range", "[", "numMasses", "]"}]}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"allLatticeCellOriginsInDynPlotRange", " ", "=", " ", 
         RowBox[{
          RowBox[{"findLatticeCells", "[", 
           RowBox[{"latticeBasis", ",", "glConstDynPlotRange"}], "]"}], " ", "//",
           " ", "Transpose"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"cellOrigins", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
          "allLatticeCellOriginsInDynPlotRange", " ", "//", " ", "Last"}], 
          ")"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<mScalarArray\>\"", " ", "\[Rule]", " ", "rma"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<numberOfMasses\>\"", " ", "\[Rule]", " ", "numMasses"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<latticeBasis\>\"", " ", "\[Rule]", " ", "latticeBasis"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<latticeNorms\>\"", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Norm", "[", 
               RowBox[{"latticeBasis", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
             " ", 
             RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<latticeUnitVectors\>\"", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Normalize", "[", 
               RowBox[{"latticeBasis", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
             " ", 
             RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<numberLatticeLinesToDisplay\>\"", "\[Rule]", " ", 
           "numberLatticeLinesToDisplay"}], ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<latticeCellOriginIndexes\>\"", " ", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{
            "allLatticeCellOriginsInDynPlotRange", " ", "//", " ", "First"}], 
            ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<reciprocalBasis\>\"", "\[Rule]", " ", "reciprocalBasis"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{
          "\"\<reciprocalNorms\>\"", "\[Rule]", " ", "reciprocalNorms"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{"\"\<qMaxVec\>\"", " ", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{"2", " ", "Pi", " ", "reciprocalNorms"}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<mObliqueComponents\>\"", "\[Rule]", " ", 
           "mObliqueComponents"}], ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<mPosFirstCell\>\"", "\[Rule]", " ", "mPosFirstCell"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<pointsDataTable\>\"", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"pointsTable", "[", 
                RowBox[{
                 RowBox[{"mPosFirstCell", "[", 
                  RowBox[{"[", "#", "]"}], "]"}], ",", " ", "cellOrigins"}], 
                "]"}], ")"}], " ", "&"}], "/@", " ", 
             RowBox[{"Range", "[", "numMasses", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<lineTable\>\"", " ", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"calcLineTable", "[", " ", 
               RowBox[{
               "numberLatticeLinesToDisplay", ",", " ", "latticeBasis", ",", 
                " ", "#"}], " ", "]"}], " ", "&"}], " ", "/@", " ", 
             RowBox[{"Permutations", "[", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ")"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "plotSprings", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"plotSprings", "::", "usage"}], " ", "=", " ", 
     "\"\<Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"plotSprings", "[", 
      RowBox[{
      "uLoc_List", ",", " ", "ld_List", ",", "cd_List", ",", "m1Ind_Integer", 
       ",", " ", "m2Ind_Integer", ",", " ", "moInd_Integer"}], "]"}], " ", ":=",
      " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "aLoc", ",", " ", "bLoc", ",", "mLoc", ",", "pointsList", ",", 
         "latticeBasis", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
         " ", "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
         "cOrigin", ",", " ", "cN", ",", " ", "g", ",", " ", "mScalarArray", 
         ",", " ", "numberOfMasses", ",", " ", "scaleLoc"}], "}"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"latticeBasis", " ", "=", " ", 
         RowBox[{"Take", "[", " ", 
          RowBox[{"uLoc", ",", " ", "2"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"aLoc", " ", "=", " ", 
         RowBox[{"uLoc", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"bLoc", " ", "=", " ", 
         RowBox[{"uLoc", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"scaleLoc", " ", "=", " ", 
         RowBox[{
          RowBox[{"aLoc", ".", "aLoc"}], "  ", "+", " ", 
          RowBox[{"bLoc", " ", ".", "bLoc"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "mLoc", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
           "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
           "mScalarArray", ",", " ", "numberOfMasses"}], "}"}], "=", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<mPosFirstCell\>\"", ",", "\"\<reciprocalBasis\>\"", ",", 
            "\"\<pointsDataTable\>\"", ",", 
            "\"\<numberLatticeLinesToDisplay\>\"", ",", " ", 
            "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", " ", 
            "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}], " ",
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pointsList", "[", "n_Integer", "]"}], " ", ":=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"massColors", "[", "n", "]"}], ",", "\[IndentingNewLine]", 
           ",", 
           RowBox[{"PointSize", "[", 
            RowBox[{"Sqrt", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"mScalarArray", "[", 
                RowBox[{"[", "n", "]"}], "]"}], "/", "glConstMMax"}], "/", 
              "500"}], "]"}], "]"}], "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Point", "[", " ", "#", " ", "]"}], " ", "&"}], " ", "/@",
             " ", 
            RowBox[{"pointsDataTable", "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{"Text", "[", 
            RowBox[{
             RowBox[{"massLabel", "[", " ", "n", "]"}], ",", 
             RowBox[{
              RowBox[{"mLoc", "[", 
               RowBox[{"[", "n", "]"}], "]"}], " ", "+", " ", 
              "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
          "\[IndentingNewLine]", "}"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"cOrigin", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"cd", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", " ", 
             RowBox[{"{", 
              RowBox[{"m1Ind", ",", " ", "moInd"}], "}"}]}], " ", "&"}]}], 
          " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"cN", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"cd", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "[", 
            RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
             RowBox[{"{", 
              RowBox[{"m1Ind", ",", " ", "m2Ind"}], "}"}]}], "&"}]}], " ", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"g", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"spScaled", "[", 
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"{", 
                  RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", " ", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "4", "]"}], "]"}], "/", "glConstKMax"}], ",", 
               " ", "scaleLoc"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", "&"}],
           "/@", " ", "cN"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"numberOfMasses", " ", ">", " ", "1"}], ",", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"g", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"spScaled", "[", 
                 RowBox[{
                  RowBox[{"Take", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", " ", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], "/", "glConstKMax"}], ",",
                   " ", "scaleLoc"}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
                "\[IndentingNewLine]", 
                RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                   "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", 
              "&"}], "/@", " ", "cOrigin"}]}], "]"}], ","}], " ", "]"}], " ", 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Graphics", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", "\[IndentingNewLine]", " ", 
                 RowBox[{"lines", "\[IndentingNewLine]", ",", "Blue", ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"reciprocalBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                   RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]", 
                  ",", "Thick", ",", 
                  RowBox[{"Arrowheads", "[", "0.05", "]"}], 
                  "\[IndentingNewLine]", ",", "Red", ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"latticeBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                   RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]", 
                  ",", 
                  RowBox[{"Text", "[", 
                   RowBox[{
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"aLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}], 
                  "\[IndentingNewLine]", ",", 
                  RowBox[{"Text", "[", 
                   RowBox[{
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"bLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{"This", " ", "polygon", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "with", " ", "doubling", " ", "of", " ", "PlotRange"}], 
                    " ", "\[Rule]", " ", 
                    RowBox[{"glConstDynPlotRange", " ", "below"}]}], ")"}], 
                   " ", "was", " ", "to", " ", "visually", " ", "test", " ", 
                   "the", " ", "Solve", " ", "logic", " ", "used", " ", "to", 
                   " ", "find", " ", "all", " ", "the", " ", "lattice", " ", 
                   "cells", " ", "contained", " ", "or", " ", "just", " ", 
                   "outside", " ", "of", " ", "the", " ", 
                   RowBox[{"region", "."}]}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{",", 
                   RowBox[{"Lighter", "@", 
                    RowBox[{"Lighter", "@", "Gray"}]}], "\[IndentingNewLine]",
                    ",", 
                   RowBox[{"Opacity", "[", "0.5", "]"}], 
                   "\[IndentingNewLine]", ",", 
                   RowBox[{"Polygon", "[", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    ")"}], "\[IndentingNewLine]", " ", "]"}]}], " ", "*)"}], 
                 "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"pointsList", "[", "#", "]"}], " ", "&"}], "/@", 
                 " ", 
                 RowBox[{"Range", "[", "numberOfMasses", "]"}]}]}], 
               "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", 
             "\[IndentingNewLine]", ",", 
             RowBox[{"PlotRange", " ", "\[Rule]", " ", 
              RowBox[{"(*", "2", "*)"}], " ", "glConstDynPlotRange"}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}]}], 
            "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "g"}], 
          "\[IndentingNewLine]", "}"}], " ", "]"}]}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "dynamicsGraphicsTable", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dynamicsGraphicsTable", "::", "usage"}], " ", "=", " ", 
     "\"\<Calculate a time indexed table of positions for each of the \
masses\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{"Example", ":", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "ld", ",", " ", "cd", ",", " ", "basisAndMassPoints", ",", " ", 
         "kArray", ",", " ", "matrix", ",", " ", "dynamics", ",", " ", "sc", 
         ",", " ", "qPoint", ",", " ", "omegaIndex", ",", "  ", "lines", ",", 
         "mScalarArray", ",", " ", "numberOfMasses", ",", " ", "pointsData", 
         ",", "dynAtOmegaIndex", ",", " ", "dynMesh", ",", "dynTable"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"basisAndMassPoints", " ", "=", " ", 
         RowBox[{"{", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.6", ",", "1"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"-", "0.4"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"0.3", ",", "3"}], "}"}]}], " ", "}"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"ld", " ", "=", " ", 
         RowBox[{"locDependent", "[", " ", 
          RowBox[{"basisAndMassPoints", ",", " ", "1", ",", 
           RowBox[{"{", "10", "}"}]}], " ", "]"}]}], "  ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"kArray", " ", "=", " ", 
         RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"cd", " ", "=", " ", 
         RowBox[{"calculateCouplings", "[", " ", 
          RowBox[{"ld", ",", " ", "kArray"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"sc", " ", "=", " ", "0.25"}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"qPoint", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"\"\<qMaxVec\>\"", " ", "/.", " ", "ld"}], ")"}], "/", 
          "2"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"matrix", " ", "=", " ", 
         RowBox[{"dynamicsMatrix", "[", " ", 
          RowBox[{"ld", ",", " ", "cd"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynamics", " ", "=", " ", 
         RowBox[{"calcDynamics", "[", " ", 
          RowBox[{"matrix", "[", " ", "qPoint", " ", "]"}], " ", "]"}]}], " ",
         ";", "\[IndentingNewLine]", 
        RowBox[{"omegaIndex", " ", "=", " ", "1"}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynAtOmegaIndex", " ", "=", " ", 
         RowBox[{"dynamics", "[", 
          RowBox[{"[", "omegaIndex", "]"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynMesh", " ", "=", " ", "30"}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynTable", " ", "=", " ", 
         RowBox[{"dynamicsGraphicsTable", "[", 
          RowBox[{
          "ld", ",", " ", "dynAtOmegaIndex", ",", " ", "sc", ",", " ", 
           "qPoint", ",", " ", "dynMesh"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"With", "[", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"n", "=", "1"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"showDynPlot", "[", " ", 
            RowBox[{"dynTable", ",", " ", "n"}], " ", "]"}]}], " ", "]"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Animate", "[", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"showDynPlot", "[", " ", 
           RowBox[{"dynTable", ",", " ", "n"}], " ", "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"n", ",", " ", "1", ",", " ", "dynMesh", ",", " ", "1"}], 
           "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dynamicsGraphicsTable", "[", 
      RowBox[{
      "ld_List", ",", " ", "dynAtOmegaIndex_List", ",", " ", "sc_", ",", " ", 
       "qPoint_List", ",", " ", "dynMesh_Integer"}], " ", "]"}], " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "pointsDataTable", ",", "e", ",", " ", "omega", ",", " ", "lines", 
         ",", " ", "nu", ",", " ", "a", ",", "b", ",", " ", "mScalarArray", 
         ",", " ", "numberOfMasses", ",", " ", "latticeCellOriginIndexes", 
         ",", " ", "mPosFirstCell", ",", "pointsData"}], "}"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a", ",", " ", "b"}], "}"}], ",", "pointsDataTable", ",", 
           "lines", ",", " ", "mScalarArray", ",", " ", "numberOfMasses", ",",
            " ", "latticeCellOriginIndexes", ",", " ", "mPosFirstCell"}], 
          "}"}], "=", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", "\"\<pointsDataTable\>\"", ",", " ", 
            "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", " ", 
            "\"\<numberOfMasses\>\"", ",", " ", 
            "\"\<latticeCellOriginIndexes\>\"", ",", " ", 
            "\"\<mPosFirstCell\>\""}], "}"}], "  ", "/.", " ", "ld"}]}], " ", 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"omega", ",", " ", "e"}], "}"}], " ", "=", " ", 
         "dynAtOmegaIndex"}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"e", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{"e", ",", "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"nu", " ", "=", " ", 
         RowBox[{"2", " ", "Pi", " ", 
          RowBox[{"If", "[", " ", 
           RowBox[{
            RowBox[{"omega", " ", "\[Equal]", " ", "0"}], ",", " ", "1", ",", 
            " ", 
            RowBox[{"1", "/", "omega"}]}], "]"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"pointsData", " ", ":=", " ", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"a", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], " ", "+", " ", 
              RowBox[{"b", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], " ", "\[IndentingNewLine]", 
              "+", " ", 
              RowBox[{"mPosFirstCell", "[", 
               RowBox[{"[", "k", "]"}], "]"}], " ", "\[IndentingNewLine]", 
              "+", " ", 
              RowBox[{"sc", " ", 
               RowBox[{"Re", "[", " ", 
                RowBox[{
                 RowBox[{"e", "[", 
                  RowBox[{"[", " ", "k", " ", "]"}], "]"}], " ", 
                 RowBox[{"E", "^", 
                  RowBox[{"(", 
                   RowBox[{"I", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    RowBox[{"qPoint", " ", ".", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"a", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "+", " ", 
                    RowBox[{"b", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], " ", ")"}]}], "  ", 
                    "-", " ", 
                    RowBox[{"nu", " ", "tau"}]}], " ", ")"}]}], ")"}]}]}], 
                " ", "]"}]}]}], " ", "\[IndentingNewLine]", "&"}], "/@", " ", 
            "latticeCellOriginIndexes"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"k", ",", " ", "numberOfMasses"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"tau", ",", "0", ",", "1", ",", 
             RowBox[{"1", "/", "dynMesh"}]}], "}"}]}], "\[IndentingNewLine]", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"{", " ", 
         RowBox[{
         "pointsData", ",", " ", "mScalarArray", ",", "numberOfMasses", ",", 
          "lines", ",", "dynMesh"}], " ", "}"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "showDynPlot", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showDynPlot", "::", "usage"}], " ", "=", " ", 
     "\"\<showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showDynPlot", "[", 
      RowBox[{
       RowBox[{"{", " ", 
        RowBox[{
        "pointsData_List", ",", " ", "mScalarArray_List", ",", 
         "numberOfMasses_Integer", ",", "lines_List", ",", " ", 
         "dynMesh_Integer"}], " ", "}"}], ",", " ", "n_"}], " ", "]"}], " ", ":=",
      " ", 
     RowBox[{"Show", "[", 
      RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Table", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListPlot", "[", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"pointsData", "[", 
                RowBox[{"[", "k", "]"}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}], "\[IndentingNewLine]", ",", 
              RowBox[{
              "PlotRange", " ", "\[Rule]", " ", "glConstDynPlotRange"}], 
              "\[IndentingNewLine]", ",", 
              RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], 
              "\[IndentingNewLine]", ",", " ", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"Directive", "[", 
                RowBox[{
                 RowBox[{"PointSize", "[", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "/", "glConstMMax"}], "/",
                     "350"}], "]"}], "]"}], ",", 
                 RowBox[{"massColors", "[", "k", "]"}]}], "]"}]}]}], 
             "\[IndentingNewLine]", "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"k", ",", "numberOfMasses"}], "}"}]}], "]"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"Graphics", "[", 
            RowBox[{
            "{", "\[IndentingNewLine]", "lines", "\[IndentingNewLine]", "}"}],
             "]"}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
         "}"}], ",", " ", "1"}], "]"}], "\[IndentingNewLine]", "]"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
   "\[IndentingNewLine]", "\[IndentingNewLine]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.601384568255503*^9, 3.6013846068957133`*^9}, {
   3.601384697696907*^9, 3.6013847654097795`*^9}, 3.601385370746403*^9, {
   3.601385703897458*^9, 3.6013858671947985`*^9}, {3.6013859369007854`*^9, 
   3.6013862565130663`*^9}, {3.601386287618845*^9, 3.601386609852276*^9}, 
   3.6013883021340685`*^9, {3.601388339834225*^9, 3.6013883634195743`*^9}, 
   3.6013895576548805`*^9, 3.6013897858849344`*^9, {3.6013899175164633`*^9, 
   3.6013899237438197`*^9}, {3.6013902884636803`*^9, 3.601390307373762*^9}, {
   3.6013903606908116`*^9, 3.6013903655340886`*^9}, {3.6013904046453257`*^9, 
   3.6013904283296804`*^9}, {3.6013906600559344`*^9, 3.601390689104596*^9}, {
   3.601390728076825*^9, 3.6013907681771183`*^9}, 3.6013908182919846`*^9, {
   3.601390891800189*^9, 3.601390932180499*^9}, {3.6013909695316353`*^9, 
   3.6013909758089943`*^9}, {3.6013910645760717`*^9, 3.601391320952736*^9}, {
   3.601391435270274*^9, 3.6013916772021117`*^9}, 3.6013917100099883`*^9, {
   3.6013917417488036`*^9, 3.601391758067737*^9}, {3.6013919250272865`*^9, 
   3.601391931312646*^9}, 3.601391980636467*^9, {3.6013920515635242`*^9, 
   3.6013920860454965`*^9}, {3.601392228344635*^9, 3.6013922300747347`*^9}, {
   3.6013922885550795`*^9, 3.6013923711148014`*^9}, {3.601392403747668*^9, 
   3.601392429697152*^9}, {3.601392460009886*^9, 3.6013924618869934`*^9}, 
   3.601392495188898*^9, {3.6013925358982267`*^9, 3.60139256568093*^9}, {
   3.60139267443215*^9, 3.60139267687029*^9}, {3.601392795672085*^9, 
   3.601392812691058*^9}, {3.601487330343955*^9, 3.6014874916991835`*^9}, {
   3.601487744991671*^9, 3.6014877935674496`*^9}, {3.60148964525436*^9, 
   3.6014896667695904`*^9}, {3.6014911727117257`*^9, 3.6014912011403513`*^9}, 
   3.6014913920092688`*^9, {3.6015049201900363`*^9, 3.601504921465109*^9}, {
   3.6015049694438534`*^9, 3.6015051088448267`*^9}, 3.601510158678661*^9, {
   3.601510341001089*^9, 3.6015103715238347`*^9}, {3.6015104088279686`*^9, 
   3.6015107342535815`*^9}, {3.6015107662544117`*^9, 
   3.6015107759769683`*^9}, {3.6015111875295076`*^9, 3.601511306315302*^9}, {
   3.601512394495542*^9, 3.6015124103054466`*^9}, {3.6015124586622124`*^9, 
   3.601512461037348*^9}, {3.6015125348575706`*^9, 3.601512551233507*^9}, {
   3.601512837974908*^9, 3.601512840824071*^9}, 3.6015519253794203`*^9, {
   3.60155212137263*^9, 3.601552138440606*^9}, {3.6015928398373117`*^9, 
   3.6015928406963606`*^9}, {3.601592972262886*^9, 3.601593035706515*^9}, {
   3.601593106344555*^9, 3.6015931439477057`*^9}, {3.601593175770526*^9, 
   3.6015931831749496`*^9}, 3.6015932402212124`*^9, 3.6015933437151318`*^9, {
   3.60159339980434*^9, 3.6015934133541145`*^9}, {3.601593445458951*^9, 
   3.601593483192109*^9}, {3.601593515955983*^9, 3.6015935487328577`*^9}, 
   3.601595231242092*^9, 3.601595401817848*^9, {3.60159658197935*^9, 
   3.6015965875836706`*^9}, 3.601596631546185*^9},
 CellID->454600298]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"tick", ";", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"This", " ", 
        RowBox[{"If", "[", "]"}], " ", "is", " ", "effectively", " ", "my", 
        " ", "Initialization"}], " ", "\[RuleDelayed]", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"{", "}"}], " ", 
         RowBox[{"block", ".", "  ", "Done"}], " ", "with", " ", "a", " ", 
         "variable", " ", "so", " ", "that", " ", "copies", " ", "of", " ", 
         "the", " ", "output", " ", "cell", " ", 
         RowBox[{"won", "'"}], "t", " ", "re"}], "-", 
        RowBox[{"execute", " ", "their", " ", "Initialization", " ", 
         RowBox[{"cells", ".", "  ", "This"}], " ", "allows", " ", 
         "\"\<interesting\>\"", " ", "settings", " ", "to", " ", "be", " ", 
         "maintained", " ", "per"}], "-", 
        RowBox[{
        "copy", " ", "of", " ", "the", " ", "output", " ", "cell"}]}]}], ",", 
      " ", 
      RowBox[{
      "but", " ", "still", " ", "provide", " ", "an", " ", "Initialization", 
       " ", "block", " ", "for", " ", "the", " ", "primary", " ", "output", 
       " ", 
       RowBox[{"cell", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", " ", 
    RowBox[{"If", " ", "[", " ", 
     RowBox[{"bInitDefaults", ",", 
      RowBox[{"(", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"u", " ", "=", " ", 
         RowBox[{"Flatten", "[", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], "}"}], 
           ",", " ", "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
         RowBox[{"locDependent", "[", " ", 
          RowBox[{
          "u", ",", " ", "rawNumberOfMasses", ",", "rawArrayOfMasses"}], " ", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"kArray", " ", "=", " ", 
         RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "n", "}"}], ",", 
          RowBox[{
           RowBox[{"n", " ", "=", " ", "2"}], " ", ";", 
           RowBox[{"While", "[", 
            RowBox[{
             RowBox[{"n", "\[LessEqual]", "rawNumberOfMasses"}], ",", 
             RowBox[{
              RowBox[{"kArray", " ", "=", " ", 
               RowBox[{"returnKarrayForAdditionalMassIndex", "[", 
                RowBox[{"kArray", ",", "n"}], "]"}]}], " ", ";", " ", 
              RowBox[{"n", "++"}]}]}], "]"}]}]}], " ", "]"}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"qLoc", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
           "\"\<qMaxVec\>\"", " ", "/.", " ", 
            "parameterLocatorDependencies"}], ")"}], "/", "2"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"qPlaneLoc", " ", "=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"couplingData", " ", "=", " ", 
         RowBox[{"calculateCouplings", "[", " ", 
          RowBox[{"parameterLocatorDependencies", ",", " ", "kArray"}], " ", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshMatrix", ":", " ", 
           RowBox[{"dependent", " ", "on"}], ":", " ", 
           "parameterLocatorDependencies"}], ",", " ", "couplingData"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"matrix", " ", "=", " ", 
         RowBox[{"dynamicsMatrix", "[", " ", 
          RowBox[{"parameterLocatorDependencies", ",", " ", "couplingData"}], 
          " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshDynamics", ":", " ", 
           RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
          "qLoc", ","}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"dynamics", " ", "=", " ", 
         RowBox[{"calcDynamics", "[", " ", 
          RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}]}], " ", 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshDynPlot", ":", " ", 
           RowBox[{"dependent", " ", "on", " ", "dynamics"}]}], ",", " ", 
          "omegaIndex", ",", " ", "scale"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"dynPlot", " ", "=", " ", 
         RowBox[{"dynamicsGraphicsTable", "[", " ", 
          RowBox[{"parameterLocatorDependencies", ",", " ", 
           RowBox[{"dynamics", "[", 
            RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale", ",", 
           " ", "qLoc", ",", " ", "dynMeshSize"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshFreqPlot", ":", " ", 
           RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
          "freqMeshSize"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"freqPlot", " ", "=", " ", 
         RowBox[{"frequencyPlotCalc", "[", " ", 
          RowBox[{
          "parameterLocatorDependencies", ",", " ", "matrix", ",", " ", 
           "freqMeshSize"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"bInitDefaults", " ", "=", " ", "False"}], " ", ";"}], 
       "\[IndentingNewLine]", ")"}], ","}], "]"}], " ", ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Dynamic", "@", 
     RowBox[{"(", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", " ", 
       RowBox[{
        RowBox[{"tabNumber", " ", "\[Equal]", " ", "dynTab"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", " ", 
           RowBox[{"bRefreshMatrix", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"matrix", " ", "=", " ", 
               RowBox[{"dynamicsMatrix", "[", " ", 
                RowBox[{
                "parameterLocatorDependencies", ",", " ", "couplingData"}], 
                " ", "]"}]}], " ", ";", 
              RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
              RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";", 
              " ", 
              RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
             ")"}], ","}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", " ", 
           RowBox[{"bRefreshDynamics", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"dynamics", " ", "=", " ", 
               RowBox[{"calcDynamics", "[", " ", 
                RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}]}], 
              " ", ";", 
              RowBox[{"bRefreshDynamics", " ", "=", " ", "False"}], " ", ";", 
              RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}]}], ")"}], 
            ","}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", " ", 
           RowBox[{"bRefreshDynPlot", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"dynPlot", " ", "=", " ", 
               RowBox[{"dynamicsGraphicsTable", "[", " ", 
                RowBox[{"parameterLocatorDependencies", ",", " ", 
                 RowBox[{"dynamics", "[", 
                  RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale", 
                 ",", " ", "qLoc", ",", "dynMeshSize"}], " ", "]"}]}], " ", 
              ";", 
              RowBox[{"bRefreshDynPlot", " ", "=", " ", "False"}]}], ")"}], 
            ","}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"showDynPlot", "[", " ", 
           RowBox[{"dynPlot", ",", " ", "tauSliderValue"}], " ", "]"}]}], 
         "\[IndentingNewLine]", ")"}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"tabNumber", " ", "\[Equal]", " ", "freqTab"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", " ", 
             RowBox[{"bRefreshMatrix", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"matrix", " ", "=", " ", 
                 RowBox[{"dynamicsMatrix", "[", " ", 
                  RowBox[{
                  "parameterLocatorDependencies", ",", " ", "couplingData"}], 
                  " ", "]"}]}], " ", ";", 
                RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
                RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";",
                 " ", 
                RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
               ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"If", "[", " ", 
             RowBox[{"bRefreshFreqPlot", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"freqPlot", " ", "=", " ", 
                 RowBox[{"frequencyPlotCalc", "[", " ", 
                  RowBox[{
                  "parameterLocatorDependencies", ",", " ", "matrix", ",", 
                   " ", "freqMeshSize"}], "]"}]}], " ", ";", 
                "\[IndentingNewLine]", 
                RowBox[{"bRefreshFreqPlot", " ", "=", " ", "False"}]}], " ", 
               ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"showFreqPlot", "[", " ", 
             RowBox[{"qPlaneLoc", ",", " ", "freqPlot"}], " ", "]"}]}], 
           "\[IndentingNewLine]", ")"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"LocatorPane", "[", " ", 
           RowBox[{
            RowBox[{"Dynamic", "[", 
             RowBox[{"u", ",", 
              RowBox[{
               RowBox[{"(", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"u", " ", "=", " ", 
                  RowBox[{"If", " ", "[", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], "<", "3"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Flatten", "[", " ", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], 
                    "}"}], ",", " ", "1"}], "]"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    "cap", " ", "the", " ", "number", " ", "of", " ", 
                    "Locators", " ", "at", " ", "5"}], ",", " ", 
                    RowBox[{
                    "so", " ", "the", " ", "selection", " ", "Pane", " ", 
                    RowBox[{"doesn", "'"}], "t", " ", "start", " ", 
                    "truncating", " ", 
                    RowBox[{"the", " ", "'"}], "to", " ", 
                    RowBox[{"neighbouring", "'"}], " ", "SetterBar"}]}], " ", 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"If", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], " ", ">", " ", "7"}], ",", " ", 
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", "7"}], "]"}], ",", " ", "#"}], "]"}]}], 
                   " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Module", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"rm", ",", "km"}], "}"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"rm", " ", "=", " ", 
                    RowBox[{"First", "@", 
                    RowBox[{"Dimensions", "[", "rawArrayOfMasses", "]"}]}]}], 
                    " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"If", " ", "[", 
                    RowBox[{
                    RowBox[{"rm", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "rawArrayOfMasses"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"rawArrayOfMasses", " ", "=", " ", 
                    RowBox[{"Take", "[", " ", 
                    RowBox[{"rawArrayOfMasses", ",", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "rawArrayOfMasses", " ", "if", " ", 
                    "required"}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"rm", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{
                    "rawArrayOfMasses", ",", " ", "glConstDefaultMass"}], 
                    "]"}], " ", ";", " ", 
                    RowBox[{"rm", "++"}]}]}], " ", "]"}]}], 
                    "\[IndentingNewLine]", "]"}], " ", ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"km", " ", "=", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], " ", "//", " ", 
                    "Max"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", " ", "[", 
                    RowBox[{
                    RowBox[{"km", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "kArray"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"Select", "[", 
                    RowBox[{"kArray", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "\[LessEqual]", "  ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], "&"}], 
                    ")"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "kArray", " ", "if", " ", "required"}], 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"km", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"km", "++"}], " ", ";", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnKarrayForAdditionalMassIndex", "[", 
                    RowBox[{"kArray", ",", "km"}], "]"}]}]}]}], " ", "]"}]}], 
                    " ", "\[IndentingNewLine]", "]"}]}]}], 
                  "\[IndentingNewLine]", "]"}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                   "lattice", " ", "vector", " ", "end", " ", "points", " ", 
                   "to", " ", "be", " ", "too", " ", "close", " ", "to", " ", 
                   "the", " ", "origin"}], " ", "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"u", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", 
                  RowBox[{"If", "[", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "<", " ", 
                    "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                    RowBox[{"glConstLocDefault", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"u", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", 
                  RowBox[{"If", "[", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ".", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], " ", "<", " ", 
                    "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                    RowBox[{"glConstLocDefault", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                   "angle", " ", "between", " ", "lattice", " ", "vectors", 
                   " ", "get", " ", "too", " ", "small"}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], " ", "=", " ", 
                  RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
                   RowBox[{
                   "u", ",", " ", " ", 
                    "glConstMinAngleBetweenLatticeVectors"}], " ", "]"}]}], 
                 " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"rawNumberOfMasses", " ", "=", " ", 
                  RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                  "These", " ", "are", " ", "in", " ", "case", " ", "the", 
                   " ", "number", " ", "of", " ", "locators", " ", "were", 
                   " ", "changed", " ", "and", " ", "we", " ", "have", " ", 
                   "a", " ", "mass", " ", "selected", " ", "that", " ", "is", 
                   " ", "now", " ", 
                   RowBox[{"invalid", "."}]}], "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"m1Sel", " ", "=", " ", 
                  RowBox[{"If", " ", "[", " ", 
                   RowBox[{
                    RowBox[{"m1Sel", " ", ">", "rawNumberOfMasses"}], ",", 
                    " ", "1", ",", " ", "m1Sel"}], "]"}]}], " ", ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"m2Sel", " ", "=", " ", 
                  RowBox[{"If", " ", "[", " ", 
                   RowBox[{
                    RowBox[{"m2Sel", " ", ">", "rawNumberOfMasses"}], ",", 
                    " ", "1", ",", " ", "m2Sel"}], "]"}]}], " ", ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"moSel", " ", "=", " ", 
                  RowBox[{"If", " ", "[", " ", 
                   RowBox[{
                    RowBox[{"moSel", " ", ">", "rawNumberOfMasses"}], ",", 
                    " ", "1", ",", " ", "moSel"}], " ", "]"}]}], " ", ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"moSel", " ", "=", " ", 
                  RowBox[{"adjustedmoSel", "[", " ", 
                   RowBox[{
                   "rawNumberOfMasses", ",", " ", "moSel", ",", " ", 
                    "m1Sel"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{"omegaIndex", " ", "=", " ", 
                  RowBox[{"If", " ", "[", " ", 
                   RowBox[{
                    RowBox[{"omegaIndex", " ", ">", 
                    RowBox[{"(", 
                    RowBox[{"2", "rawNumberOfMasses"}], ")"}]}], ",", " ", 
                    "1", ",", " ", "omegaIndex"}], "]"}]}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{
                   "Adjust", " ", "these", " ", "for", " ", "Slider", " ", 
                    "display", " ", "in", " ", "case", " ", "m1Sel"}], ",", 
                   " ", "m2Sel", ",", " ", 
                   RowBox[{
                   "or", " ", "moSel", " ", "were", " ", "changed", " ", 
                    "just", " ", 
                    RowBox[{"above", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"k1", " ", "=", " ", 
                  RowBox[{"selectVFromKarray", "[", 
                   RowBox[{
                   "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                 RowBox[{"k2", " ", "=", " ", 
                  RowBox[{"selectVFromKarray", "[", 
                   RowBox[{
                   "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "2"}],
                    "]"}]}], " ", ";", "\[IndentingNewLine]", 
                 RowBox[{"k3", " ", "=", " ", 
                  RowBox[{"selectVFromKarray", "[", 
                   RowBox[{
                   "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "3"}],
                    "]"}]}], " ", ";", "\[IndentingNewLine]", 
                 RowBox[{"k4", " ", "=", " ", 
                  RowBox[{"selectVFromKarray", "[", 
                   RowBox[{
                   "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "4"}],
                    "]"}]}], " ", ";", "\[IndentingNewLine]", 
                 RowBox[{"k5", " ", "=", " ", 
                  RowBox[{"selectOriginVFromKarray", "[", " ", 
                   RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                   " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
                  RowBox[{"locDependent", "[", " ", 
                   RowBox[{
                   "u", ",", " ", "rawNumberOfMasses", ",", 
                    "rawArrayOfMasses"}], " ", "]"}]}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"Reset", " ", "in", " ", "case", " ", "a"}], ",", 
                   RowBox[{"or", " ", "b", " ", "changed"}], ",", " ", 
                   RowBox[{
                   "and", " ", "the", " ", "last", " ", "selected", " ", 
                    "value", " ", "is", " ", "now", " ", "out", " ", "of", 
                    " ", 
                    RowBox[{"range", "."}]}]}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"qLoc", " ", "=", " ", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", "/.", "parameterLocatorDependencies"}],
                     " ", ")"}], "/", "2"}]}], "  ", ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"qPlaneLoc", " ", "=", " ", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"couplingData", " ", "=", " ", 
                  RowBox[{"calculateCouplings", "[", " ", 
                   RowBox[{
                   "parameterLocatorDependencies", ",", " ", "kArray"}], " ", 
                   "]"}]}], " ", ";", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"tick", "=", 
                  RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
             "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"Why", " ", 
               RowBox[{"doesn", "'"}], "t", " ", "Alt"}], "-", 
              RowBox[{
              "click", " ", "to", " ", "remove", " ", "existing", " ", 
               "Locator", " ", "refresh", " ", "this", " ", 
               RowBox[{"plot", "?", "  ", 
                RowBox[{"Workaround", ":", " ", 
                 RowBox[{
                 "move", " ", "one", " ", "of", " ", "the", " ", "other", " ",
                   "locators", " ", "to", " ", "refresh"}]}]}]}]}], " ", 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{"plotSprings", "[", 
             RowBox[{
             "u", ",", " ", "parameterLocatorDependencies", ",", 
              "couplingData", ",", "m1Sel", ",", " ", "m2Sel", ",", " ", 
              "moSel"}], "]"}], " ", ",", "\[IndentingNewLine]", 
            RowBox[{"LocatorAutoCreate", "\[Rule]", "True"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
           "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", " ", 
         "]"}]}], "]"}], " ", 
      RowBox[{"(*", 
       RowBox[{"If", ",", "If"}], "*)"}], "\[IndentingNewLine]", ")"}]}]}], 
   "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
   RowBox[{"Dynamic", "@", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"k5manip", ",", 
        RowBox[{"TabView", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<dynamics\>\"", " ", "\[Rule]", "  ", 
             RowBox[{"Column", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "dynTab"}], " ", ";", 
               RowBox[{"{", " ", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Row", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"OverVector", "[", "\"\<q\>\"", "]"}], ",", 
                    "\[IndentingNewLine]", "\"\< = \>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "qm", "}"}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"qm", " ", "=", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", "  ", "/.", 
                    "parameterLocatorDependencies"}], ")"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Slider2D", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"qLoc", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"qLoc", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", 
                    RowBox[{"(*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.01", ",", "0.01"}], "}"}], ",", " ", "qm"}], 
                    "}"}], "*)"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", " ", "qm"}], ")"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], 
                    "\[IndentingNewLine]", ",", " ", 
                    RowBox[{"ImageSize", " ", "\[Rule]", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"150", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}], " ", "&"}], ")"}], 
                    " ", "@", " ", "qm"}]}]}], "\[IndentingNewLine]", 
                    "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", " ", 
                    "\[IndentingNewLine]", "\"\< 2 \[Pi] \>\"", ",", "  ", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"(", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"qLoc", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "Pi"}], ")"}]}], " ", "//", " ", 
                    "MatrixForm"}], ")"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"With", " ", "this", " ", "enabled"}], ",", " ", 
                    RowBox[{
                    "a", " ", "change", " ", "results", " ", "in", " ", "a", 
                    " ", "switch", " ", "through", " ", "the", " ", 
                    "tabNumbers"}], ",", " ", 
                    RowBox[{"first", " ", "freqTab"}], ",", " ", 
                    RowBox[{"then", " ", "to", " ", 
                    RowBox[{"parametersTab", "?", "  ", "Why"}]}], ",", " ", 
                    RowBox[{
                    "and", " ", "why", " ", "not", " ", "with", " ", "scale", 
                    " ", 
                    RowBox[{
                    "below", "?", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "As"}], " ", "a", " ", "work", " ",
                     "around", " ", 
                    RowBox[{"I", "'"}], "ve", " ", "just", " ", "hardcoded", 
                    " ", "the", " ", "mesh", " ", "size", " ", "to", " ", 
                    "something", " ", "that", " ", "is", " ", 
                    RowBox[{"smooth", "."}]}]}], "*)"}], 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{
                    "Text", "@", "\"\<number of time intervals \>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Manipulator", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"dynMeshSize", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"dynMeshSize", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "14", ",", " ", "4", ",", " ", "30", ",", 
                    " ", "IntegerQ"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "30", ",", "1"}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
                    "\"\< \>\"", ",", " ", 
                    RowBox[{"Dynamic", "[", "dynMeshSize", "]"}]}], " ", 
                    "\[IndentingNewLine]", "}"}], "]"}], ","}], "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    "Text", "@", 
                    "\"\<time, normalized to one period, t/T = \>\""}], ",", 
                    " ", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"N", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"tauSliderValue", "-", "1"}], ")"}], "/", 
                    "dynMeshSize"}], "]"}], "]"}]}], "}"}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"Manipulator", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"tauSliderValue", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"tauSliderValue", " ", "=", " ", "#"}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"dynMeshSize", "+", "1"}], ",", "1"}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "True"}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"AppearanceElements", " ", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<StepLeftButton\>\"", ",", "\"\<PlayPauseButton\>\"", 
                    ",", "\"\<StepRightButton\>\"", ",", 
                    "\"\<FasterSlowerButtons\>\"", ",", 
                    "\"\<DirectionButton\>\""}], "\[IndentingNewLine]", 
                    "}"}]}]}], "\[IndentingNewLine]", "]"}], " ", 
                   "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{",", " ", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"200", ",", "60"}], "}"}]}]}], "*)"}], 
                  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{"Text", "@", "\"\<oscillation scale factor:\>\""}],
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Manipulator", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"scale", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"scale", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.05", ",", " ", "0.05", ",", " ", "1"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.05", ",", "1"}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], 
                    "\[IndentingNewLine]", "\"\< \>\""}], ",", "  ", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"(", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"scale", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], 
                 "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    "Text", "@", 
                    "\"\<Angular frequency \[Omega](q), selection:\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "@", 
                    RowBox[{"SetterBar", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"omegaIndex", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"omegaIndex", "=", "#"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", 
                    RowBox[{"Range", "[", 
                    RowBox[{"2", "rawNumberOfMasses"}], "]"}]}], " ", 
                    "]"}]}]}], "\[IndentingNewLine]", "}"}], " ", "]"}]}], 
                "\[IndentingNewLine]", "}"}]}], "]"}]}], " ", 
            RowBox[{"(*", " ", "Column", " ", "*)"}], "\[IndentingNewLine]", 
            ",", 
            RowBox[{
            "\"\<\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))\>\
\"", " ", "\[Rule]", "  ", 
             RowBox[{"Column", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "freqTab"}], " ", ";", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Row", "[", 
                  RowBox[{"{", " ", 
                   RowBox[{
                    RowBox[{
                    "Text", "@", "\"\<number of mesh intervals \>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Manipulator", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"freqMeshSize", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"freqMeshSize", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{"#", ",", " ", "8", ",", " ", "2", ",", " ", "30",
                     ",", " ", "EvenQ"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "30", ",", "2"}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
                    "\"\< \>\"", ",", " ", 
                    RowBox[{"Dynamic", "[", "freqMeshSize", "]"}]}], " ", 
                   "\[IndentingNewLine]", "}"}], "]"}], ",", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"LocatorPane", "[", 
                  RowBox[{
                   RowBox[{"Dynamic", "[", "qPlaneLoc", 
                    RowBox[{"(*", 
                    RowBox[{",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"qPlaneLoc", " ", "=", " ", "#"}], ";", " ", 
                    RowBox[{"tick", "=", 
                    RowBox[{
                    RowBox[{"Not", "[", "tick", "]"}], " ", "&"}]}]}], 
                    ")"}]}], "*)"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Graphics", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Lighter", "@", "Gray"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Polygon", "[", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    ")"}], "\[IndentingNewLine]", " ", "]"}], ",", 
                    "\[IndentingNewLine]", "Black", ",", 
                    RowBox[{"Line", "[", "qPlaneLoc", "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                    " ", 
                    RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    "/", "2"}]}], "\[IndentingNewLine]", ",", 
                    RowBox[{"ImageSize", " ", "\[Rule]", "  ", 
                    RowBox[{"200", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}]}]}], 
                    "\[IndentingNewLine]", "]"}], " ", "&"}], " ", "@", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", " ", "/.", 
                    "parameterLocatorDependencies"}], ")"}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
                  "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                "}"}]}], " ", "]"}]}], "\[IndentingNewLine]", ",", " ", 
            RowBox[{"\"\<parameters\>\"", "\[Rule]", 
             RowBox[{"Grid", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "parametersTab"}], " ", 
               ";", "\[IndentingNewLine]", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Text", "[", "\"\<mass: \>\"", "]"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "@", 
                    RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"m1Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m1Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"moSel", " ", "=", " ", 
                    RowBox[{"adjustedmoSel", "[", " ", 
                    RowBox[{
                    "rawNumberOfMasses", ",", " ", "moSel", ",", " ", 
                    "m1Sel"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", " ", "]"}]}], "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"massValue", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{"#", ",", " ", "0.25", ",", " ", "0.25", ",", " ",
                     "glConstMMax"}], "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"rawArrayOfMasses", "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "=", "massValue"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
                    RowBox[{"(", 
                    RowBox[{"parameterLocatorDependencies", " ", "/.", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"\"\<mScalarArray\>\"", ",", " ", "_"}], "]"}], 
                    " ", "\[RuleDelayed]", " ", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", ",", " ", "rawArrayOfMasses"}], 
                    "]"}]}], ")"}]}], " ", ")"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{"0.25", ",", 
                    RowBox[{"Dynamic", "@", "glConstMMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"massValue", ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                   "Text", "[", "\"\<coupling to neighbouring: \>\"", " ", 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                   RowBox[{"Dynamic", "@", 
                    RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"m2Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m2Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", 
                    ",", "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
                    RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
                  "}"}], "\[IndentingNewLine]", ",", " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<horizontal: \>\""}], ",", 
                    RowBox[{"kLable", "[", "1", "]"}], ",", " ", 
                    "\"\< || \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", 
                    "\"\< \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k1", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k1", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1", ",", " ", "k1"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k1", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<vertical: \>\""}], ",", 
                    RowBox[{"kLable", "[", "2", "]"}], ",", " ", 
                    "\"\< || \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", 
                    "\"\< \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k2", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k2", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "2", ",", " ", "k2"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k2", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], " ", 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
                    RowBox[{"kLable", "[", "3", "]"}], ",", " ", 
                    "\"\< || (\>\"", ",", "  ", 
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
                    "\"\< + \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
                    "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k3", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k3", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "3", ",", " ", "k3"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k3", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
                    RowBox[{"kLable", "[", "4", "]"}], ",", " ", 
                    "\"\< || (\>\"", ",", "  ", 
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
                    "\"\< - \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
                    "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k4", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k4", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "4", ",", " ", "k4"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{"parameterLocatorDependencies", ",", " ", 
                    "kArray"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k4", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"k5manip", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"k5manip", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "\[IndentingNewLine]", 
                "}"}]}], " ", "\[IndentingNewLine]", "]"}]}]}], 
           "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Dynamic", " ", "@", "tabNumber"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ImageSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"250", ",", "350"}], "}"}]}]}], " ", 
         "\[IndentingNewLine]", "]"}]}], " ", "\[IndentingNewLine]", "]"}], 
      " ", "@", "\[IndentingNewLine]", 
      RowBox[{"If", "[", " ", 
       RowBox[{
        RowBox[{"rawNumberOfMasses", " ", "\[Equal]", " ", "1"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Row", "[", 
             RowBox[{"{", " ", 
              RowBox[{
               RowBox[{"Text", "@", "\"\<coupling from \>\""}], ",", " ", 
               RowBox[{"Dynamic", "@", 
                RowBox[{"massLabel", "[", " ", "m1Sel", "]"}]}], ",", 
               RowBox[{"Text", "@", "\"\< to: \>\""}]}], "}"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Dynamic", "@", 
             RowBox[{"If", " ", "[", " ", 
              RowBox[{
               RowBox[{"rawNumberOfMasses", " ", ">", " ", "2"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"moSel", ",", 
                   RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"moSel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                  "]"}], ",", " ", "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                    " ", 
                   RowBox[{"(", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}], ",", 
                    "m1Sel"}], "]"}], ")"}]}], ")"}]}], "\[IndentingNewLine]",
                 "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Dynamic", "@", 
                RowBox[{"massLabel", "[", " ", 
                 RowBox[{"First", "@", 
                  RowBox[{"Delete", "[", " ", 
                   RowBox[{
                    RowBox[{"Range", "[", "2", "]"}], ",", " ", "m1Sel"}], 
                   "]"}]}], " ", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
           "\[IndentingNewLine]", "}"}], " ", ",", 
          RowBox[{"{", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Row", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"kLable", "[", "5", "]"}], ",", " ", "\"\<: \>\""}], 
              "}"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Row", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"k5", ",", 
                   RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k5", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKarrayOriginElement", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "moSel", ",", " ", 
                    "k5"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                  "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                   RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                 RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                 RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                 RowBox[{"AppearanceElements", "\[Rule]", 
                  RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               "\"\< \>\"", ",", 
               RowBox[{"Dynamic", "@", 
                RowBox[{"NumberForm", "[", " ", 
                 RowBox[{"k5", ",", 
                  RowBox[{"{", 
                   RowBox[{"3", ",", "2"}], "}"}]}], "]"}]}]}], 
              "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
           "}"}]}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
       "]"}]}], " ", 
     RowBox[{"(*", "If", "*)"}], "\[IndentingNewLine]", ")"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tick", ",", "False"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qPlaneLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tauSliderValue", ",", "1"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"omegaIndex", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"scale", ",", " ", "0.2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqMeshSize", ",", "8"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynMeshSize", ",", "14"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"matrix", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynamics", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bInitDefaults", ",", " ", "True"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshMatrix", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynamics", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshFreqPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tabNumber", ",", "1"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynTab", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqTab", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parametersTab", ",", " ", "3"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "The", " ", "number", " ", "of", " ", "default", " ", "masses", " ", 
     "are", " ", "coupled", " ", "by", " ", "these", " ", "next", " ", "four",
      " ", 
     RowBox[{"variables", "."}]}], " ", "*)"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawNumberOfMasses", ",", " ", "3"}], "}"}], ",", " ", "None"}],
     "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mLocDefault", ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0.9", ",", "0.7"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0.4", ",", " ", "1.2"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1.3", ",", " ", "1.4"}], "}"}]}], "}"}]}], "}"}], ",", " ",
      "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawArrayOfMasses", ",", " ", 
       RowBox[{"{", 
        RowBox[{"10", ",", " ", "15", ",", " ", "20"}], "}"}]}], "}"}], ",", 
     " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"moSel", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"pick", " ", "anything", " ", "that", " ", 
     RowBox[{"isn", "'"}], "t", " ", "m1Sel"}], " ", "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m1Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m2Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"kArray", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], " ", 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"u", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parameterLocatorDependencies", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"couplingData", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstSpringColorsByN", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k1", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k2", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k3", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k4", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k5", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
    RowBox[{"{", "tick", "}"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}], "\[IndentingNewLine]", 
   ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}], "\[IndentingNewLine]", ",", 
   RowBox[{"SynchronousInitialization", "\[Rule]", "False"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{
  3.6013845596960135`*^9, {3.6013849419158754`*^9, 3.6013850018713045`*^9}, {
   3.6013850794767437`*^9, 3.601385097266761*^9}, {3.601385134804908*^9, 
   3.6013851913481417`*^9}, 3.601385299290316*^9, {3.601385437846241*^9, 
   3.6013854385522814`*^9}, 3.60138559342614*^9, {3.6013868469728384`*^9, 
   3.6013870381917753`*^9}, 3.6013877675854945`*^9, {3.601388376944348*^9, 
   3.6013883890050373`*^9}, 3.6013884249690948`*^9, {3.601388673194292*^9, 
   3.6013886824388213`*^9}, {3.6013891407130327`*^9, 3.6013891464263597`*^9}, 
   3.601389335188156*^9, {3.601389712307726*^9, 3.601389713789811*^9}, {
   3.60138980486102*^9, 3.6013899056717863`*^9}, 3.6013901293345785`*^9, {
   3.60139028932573*^9, 3.6013902895987453`*^9}, {3.601390478563554*^9, 
   3.6013904836558447`*^9}, {3.6013905478495164`*^9, 3.601390553751854*^9}, 
   3.601390946273305*^9, {3.601391042574813*^9, 3.601391043374859*^9}, {
   3.6013918894322505`*^9, 3.601391892836445*^9}, {3.601392097848171*^9, 
   3.6013921005103235`*^9}, {3.601392139997582*^9, 3.6013921427507396`*^9}, 
   3.6015052226223345`*^9, {3.6015107568728757`*^9, 3.6015107572798986`*^9}, {
   3.601515719590727*^9, 3.601515719851742*^9}, {3.601551924279357*^9, 
   3.6015520208098783`*^9}, {3.6015520737049036`*^9, 
   3.6015520787571926`*^9}, {3.6015521640750723`*^9, 3.60155218763342*^9}, {
   3.6015525875472937`*^9, 3.601552630947776*^9}, {3.6015925911300864`*^9, 
   3.601592613813384*^9}, {3.6015926462762403`*^9, 3.6015926750798883`*^9}, 
   3.6015927261078067`*^9, {3.601592756429541*^9, 3.6015927749646015`*^9}, {
   3.601592813396799*^9, 3.6015928171110115`*^9}, {3.6015936054051*^9, 
   3.601593616936759*^9}, {3.6015936522817807`*^9, 3.601593659804211*^9}, {
   3.6015936977343807`*^9, 3.601593703482709*^9}, {3.6015938032044134`*^9, 
   3.601593839254475*^9}, {3.6015939055702677`*^9, 3.6015939355059805`*^9}, {
   3.6015940687956038`*^9, 3.601594074351922*^9}, {3.601594145196974*^9, 
   3.6015941714714766`*^9}, {3.6015942162630386`*^9, 3.601594258628462*^9}, {
   3.601594310046403*^9, 3.6015943121155214`*^9}, {3.601594409881113*^9, 
   3.601594438379743*^9}, {3.6015945562274837`*^9, 3.6015945581155915`*^9}, 
   3.601594604665254*^9, {3.6015946540800805`*^9, 3.601594656909242*^9}, {
   3.601594703469905*^9, 3.601594755839901*^9}, {3.6015948057987585`*^9, 
   3.601594991432376*^9}, {3.601595046788542*^9, 3.601595049002669*^9}, {
   3.6015950818715487`*^9, 3.601595181218231*^9}, {3.6015952625988855`*^9, 
   3.6015952890633993`*^9}, 3.6015953542951307`*^9, {3.6015955048957443`*^9, 
   3.6015955051827607`*^9}, {3.60159561566708*^9, 3.601595631144965*^9}, {
   3.601595829788327*^9, 3.6015958783671055`*^9}, {3.6015963343461857`*^9, 
   3.601596523434001*^9}},
 CellID->106836794],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}}, {{
       2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}, {{
       3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}, {
       3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}}, {{{
       1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
        0.09999999999999987}, {{
        0.19999999999999987`, -0.3999999999999999}, {-0.3999999999999999, 
        0.8}}}, {
       1, 2, {-1, 0}, 0.25, 1., {0.9, 0.7}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       1, 2, {-1, 1}, 0.25, 1.6899999999999995`, {0.9, 0.7}, {
        2.1999999999999997`, 0.7}, {{0.9999999999999999, 0.}, {0., 0.}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 3, {0, -1}, 0.25, 2.2600000000000002`, {0.9, 
        0.7}, {-0.5999999999999999, 0.5999999999999999}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       1, 3, {1, -1}, 0.25, 3.3999999999999995`, {0.9, 
        0.7}, {-0.4999999999999998, 1.9}, {{
        0.5764705882352942, -0.4941176470588236}, {-0.4941176470588236, 
        0.423529411764706}}}, {
       1, 2, {1, 0}, 0.25, 3.4000000000000004`, {0.9, 0.7}, {0.5, 2.5}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 2, {0, 1}, 0.25, 3.65, {0.9, 0.7}, {2.3, 2.}, {{0.5369863013698629, 
        0.4986301369863013}, {0.4986301369863013, 0.463013698630137}}}, {
       1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 2.7}, {{
        0.05882352941176473, 0.23529411764705888`}, {0.23529411764705888`, 
        0.9411764705882353}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 3, {-1, -1}, 0.25, 4.520000000000001, {0.9, 
        0.7}, {-0.7, -0.7000000000000002}, {{0.5663716814159291, 
        0.49557522123893794`}, {0.49557522123893794`, 
        0.43362831858407075`}}}, {
       1, 3, {-1, 1}, 0.25, 4.879999999999999, {0.9, 0.7}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       1, 2, {0, -1}, 0.25, 5.85, {0.9, 0.7}, {-1.5, 0.3999999999999999}, {{
        0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
        0.015384615384615389`}}}, {
       1, 2, {1, -1}, 0.25, 6.289999999999999, {0.9, 0.7}, {-1.4, 1.7}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       1, 3, {0, 1}, 0.25, 7.540000000000002, {0.9, 0.7}, {3.2, 2.2}, {{
        0.7015915119363394, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 2, {-1, -1}, 0.25, 8.81, {0.9, 0.7}, {-1.6, -0.9000000000000001}, {{
        0.7094211123723042, 0.4540295119182747}, {0.4540295119182747, 
        0.29057888762769585`}}}, {
       1, 2, {1, 1}, 0.25, 9.009999999999998, {0.9, 0.7}, {2.4, 3.3}, {{
        0.24972253052164267`, 0.4328523862375139}, {0.4328523862375139, 
        0.7502774694783573}}}, {
       1, 3, {1, 1}, 0.25, 13.599999999999998`, {0.9, 0.7}, {3.3, 3.5}, {{
        0.423529411764706, 0.4941176470588236}, {0.4941176470588236, 
        0.5764705882352942}}}}, {{
       2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       2, 3, {1, -1}, 0.25, 1.2999999999999996`, {0.4, 
        1.2}, {-0.4999999999999998, 1.9}, {{
        0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
        0.376923076923077}}}, {
       2, 3, {0, -1}, 0.25, 1.3599999999999999`, {0.4, 
        1.2}, {-0.5999999999999999, 0.5999999999999999}, {{0.7352941176470588,
         0.44117647058823534`}, {0.44117647058823534`, 
        0.2647058823529413}}}, {
       2, 1, {1, -1}, 0.25, 1.6899999999999995`, {0.4, 
        1.2}, {-0.8999999999999998, 1.2}, {{0.9999999999999999, 0.}, {0., 
        0.}}}, {2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
        2.5}, {{0.005882352941176467, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 0.09999999999999987}, {{
        0.34594594594594585`, -0.4756756756756756}, {-0.4756756756756756, 
        0.654054054054054}}}, {
       2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
        1.4000000000000001`, 2.7}, {{0.3076923076923076, 
        0.46153846153846145`}, {0.46153846153846145`, 0.6923076923076924}}}, {
       2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
        0.8, -0.6000000000000001}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {-1.4, 1.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {
        2.1999999999999997`, 0.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {0, -1}, 0.25, 3.65, {0.4, 
        1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
        0.463013698630137}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 0.3999999999999999}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 3, {-1, -1}, 0.25, 4.82, {0.4, 1.2}, {-0.7, -0.7000000000000002}, {{
        0.25103734439834025`, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{0.9846153846153846,
         0.1230769230769231}, {0.1230769230769231, 0.015384615384615389`}}}, {
       2, 1, {-1, 1}, 0.25, 6.289999999999999, {0.4, 1.2}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       2, 3, {-1, 1}, 0.25, 7.379999999999998, {0.4, 1.2}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9878048780487806, -0.10975609756097565`}, {-0.10975609756097565`, 
        0.01219512195121952}}}, {
       2, 2, {1, 1}, 0.25, 8.409999999999998, {0.4, 1.2}, {2.4, 3.3}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {0.4, 1.2}, {-1.6, -0.9000000000000001}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 1, {1, 1}, 0.25, 8.809999999999999, {0.4, 1.2}, {2.9, 2.8}, {{
        0.7094211123723043, 0.4540295119182747}, {0.4540295119182747, 
        0.2905788876276958}}}, {
       2, 3, {0, 1}, 0.25, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
        0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570139`}}}, {
       2, 1, {-1, -1}, 0.25, 9.010000000000002, {0.4, 
        1.2}, {-1.1, -1.4000000000000001`}, {{0.24972253052164256`, 
        0.4328523862375138}, {0.4328523862375138, 0.7502774694783573}}}, {
       2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{0.6138686131386862,
         0.48686131386861314`}, {0.48686131386861314`, 
        0.3861313868613139}}}}, {{
       3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
        0.19999999999999998`, -0.39999999999999997`}, {-0.39999999999999997`, 
        0.7999999999999999}}}, {
       3, 2, {-1, 1}, 0.25, 1.2999999999999994`, {1.3, 1.4}, {
        2.1999999999999997`, 0.7}, {{
        0.6230769230769229, -0.48461538461538467`}, {-0.48461538461538467`, 
        0.3769230769230771}}}, {
       3, 2, {0, 1}, 0.25, 1.3599999999999997`, {1.3, 1.4}, {2.3, 2.}, {{
        0.7352941176470587, 0.4411764705882354}, {0.4411764705882354, 
        0.2647058823529413}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
        1.4000000000000001`, 2.7}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
        0.09999999999999987}, {{0.00588235294117648, 0.07647058823529418}, {
        0.07647058823529418, 0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 2.5}, {{
        0.34594594594594597`, -0.47567567567567565`}, {-0.47567567567567565`, 
        0.654054054054054}}}, {
       3, 1, {0, 1}, 0.25, 2.26, {1.3, 1.4}, {2.8, 1.5}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.3076923076923077, 
        0.46153846153846156`}, {0.46153846153846156`, 0.6923076923076923}}}, {
       3, 1, {-1, 1}, 0.25, 3.399999999999999, {1.3, 1.4}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.576470588235294, -0.4941176470588235}, {-0.4941176470588235, 
        0.423529411764706}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.3, 
        1.4}, {-0.4999999999999998, 1.9}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999984`, {1.3, 1.4}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9283667621776505, -0.25787965616045855`}, {-0.25787965616045855`, 
        0.07163323782234961}}}, {
       3, 3, {0, 1}, 0.25, 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
        0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.3, 1.4}, {-0.5999999999999999, 
        0.5999999999999999}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {0.8, -0.6000000000000001}, {{
        0.058823529411764705`, 0.23529411764705882`}, {0.23529411764705882`, 
        0.9411764705882353}}}, {
       3, 1, {1, 1}, 0.25, 4.52, {1.3, 1.4}, {2.9, 2.8}, {{0.5663716814159292,
         0.49557522123893805`}, {0.49557522123893805`, 
        0.43362831858407075`}}}, {
       3, 2, {1, 1}, 0.25, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
        0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       3, 1, {1, -1}, 0.25, 4.879999999999999, {1.3, 
        1.4}, {-0.8999999999999998, 1.2}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       3, 2, {1, -1}, 0.25, 7.380000000000001, {1.3, 1.4}, {-1.4, 1.7}, {{
        0.9878048780487805, -0.10975609756097562`}, {-0.10975609756097562`, 
        0.012195121951219514`}}}, {
       3, 1, {0, -1}, 0.25, 7.539999999999999, {1.3, 
        1.4}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7015915119363395, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{0.4756242568370986,
         0.49940546967895355`}, {0.49940546967895355`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.3, 1.4}, {-0.7, -0.7000000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 2, {0, -1}, 0.25, 8.84, {1.3, 1.4}, {-1.5, 0.3999999999999999}, {{
        0.8868778280542985, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570136`}}}, {
       3, 1, {-1, -1}, 0.25, 13.600000000000001`, {1.3, 
        1.4}, {-1.1, -1.4000000000000001`}, {{0.42352941176470593`, 
        0.4941176470588235}, {0.4941176470588235, 0.576470588235294}}}, {
       3, 2, {-1, -1}, 0.25, 13.700000000000001`, {1.3, 
        1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
        0.4868613138686131}, {0.4868613138686131, 
        0.38613138686131376`}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.6790602328891914, 9.230900003615161*^-19], {Complex[
      0.7248589832535917, 0.], Complex[
      0.650064949116095, -0.020858686170711016`], Complex[
      0.11988513411713456`, -0.0981715969681187], Complex[
      0.15160623794564831`, -0.028647866526790612`], 
      Complex[-0.002472802788942547, -0.01713913715451654], Complex[
      0.05556524411678816, 0.01890267003822048]}}, {
      Complex[0.5524636587025472, -7.594543271602355*^-18], {
      Complex[-0.38354558530686395`, 0.09744499810272776], Complex[
      0.1619813466218059, -0.23832737428749207`], Complex[0.6766558452199941, 
      0.], Complex[0.5279467930943094, 0.011722985858567875`], 
      Complex[-0.0019794387381373065`, 0.0612963317654061], Complex[
      0.14074635807044672`, 0.0077645969691057665`]}}, {
      Complex[0.5222542056555272, 7.39373223091693*^-18], {
      Complex[-0.5047764091042254, 0.08027140607893792], Complex[
      0.6076266586520926, 0.], 
      Complex[-0.41722429897453955`, -0.26584428115246467`], 
      Complex[-0.11870218623554862`, 0.011771602360776734`], Complex[
      0.10106066627579662`, 0.15510216234064736`], Complex[
      0.24672133224192438`, 0.12420825231706026`]}}, {
      Complex[0.47798270089481093`, 1.705186367657685*^-17], {Complex[
      0.11776747404882068`, -0.17021352942962187`], 
      Complex[-0.19349636076477256`, 0.18545691772731276`], 
      Complex[-0.005098087736675982, 0.0481703582836023], Complex[
      0.12443545522518613`, -0.04846883240430583], Complex[0.7520021001235273,
       0.], Complex[0.5450959458974042, 0.050065292585647264`]}}, {
      Complex[0.4208599945029234, 1.7181192359807767`*^-17], {Complex[
      0.046412084869462106`, -0.0633132278362492], 
      Complex[-0.15001494768060744`, 0.1368626263531111], 
      Complex[-0.49457449633790096`, -0.020339968952328036`], Complex[
      0.7465187765334863, 0.], 
      Complex[-0.3425167147633056, -0.05320301419822421], Complex[
      0.17190685158210708`, -0.02435844462026826]}}, {
      Complex[0.3371723422003491, 1.2680207595331082`*^-17], {Complex[
      0.08250671501222374, 0.03036710231625256], 
      Complex[-0.10759757386702096`, -0.00917692568070801], Complex[
      0.15992951319705684`, 0.020880420200147097`], 
      Complex[-0.32856173648033754`, 0.004931060374980048], 
      Complex[-0.5245849484304596, 0.028709761501831688`], Complex[
      0.7553839007471159, 0.]}}}, $CellContext`dynMeshSize$$ = 
    14, $CellContext`dynPlot$$ = {CompressedData["
1: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
     "], {10, 15, 20}, 3, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 14}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 8, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyEvXd01MX7/h1QkBKk9yJdqdIhENjQQpVOqEqo0hNakCZFBKkB6VU6SJMq
iIEldAk1nZDN7oYkSO8lJODj8+G+Ztnr/np++Ydz5syZnX7N9eI9c5fqF9Bp
YEYPDw/P3B4eH/37b6fiG3//a0+mk+1W3nydPizN6nXip1nxx5ItSK9/YMux
t4ueW6OzNghquiLJ4p7/nvUrr7E7dj24ZdI7/C/9pvXO+klPy59zpXvI36Ij
iQc3P1X5LYM3rK48cY6r/Lbvy7fU8m/48uQeVR9L9wv5h1uGp1B90iwXW4eV
3ZQ7xfIu6nXLbk08TLuKTvhkzrunSSYd7UoLqlJ7+KIkyn/PeueddcqkcFc6
2hX2POfyBqHJJh3tCj/VaszwMrc5v+VN4YYhG5+70tGu+U831mn7w22uj2WZ
X+96g+qq+ltKfOwYWfQL9MMLK9p1zpr/5d93kkw62nVlUt/T9X7i/Pescw92
7vvVlRSTjnY9GO1fZuvV2yYd7fJt+Hr41i23Ob+lzy8ta1Qd7ioH7aq/PuHA
5CrJXB/LqF3VrvRbnsT1t+R7fWB9u1+SLB3+l55s2nXw+5iwpr8km3S0a3Ol
jMPutU+h/Pes9mEe1U9VcKWjXVd6D/QamctVDtrV8NTugTUqJnF+y5Kx61f8
duWWSUe7fp4z/vX487e4Ppb0XXe9TpRQ9bf41ew2ZV2eZAt+D+0689upCWGf
pJh0tGvj8lc199Xg/Pesi1uPP5+pfJJJR7vmZ2/fsfSBWyYdf4+qrHiZa+kt
zm/h/GhXMJWPdv3f9UmzoP7SXgvahfYiHe2i/rGYdrn3pwXtov43v0/jhfwW
Gl8L2mVznw+oj4XmD+pvwXzr8n5+mnbllfmJdLRrtMxn9/z3rJj/SEe7/GW9
IB3t+krWF+W3PJL1iHS0a6GsX6qPJUzWO9Xfclb2B9lPfNAu7CdIR7to//FB
u4Ld9ysftIv2N5//2A+R30L7pw/a9bf7fov6WGh/Rv0t2M9l/zftwv6PdLSL
9MK0q667vph2kR6ZdpF+mXaR3pl2dXTXR9Mu0lPTLtZftOtO/zbNLuxxKl1u
8Lzk5A55nUqXO5XY8v2XxxxKlwO+LVY+eJ9D6XL273zPZAxX+S1Ncm4/693I
qXR5VrMF3xy7pepjyVOz8N0fSiQqXX5kb7R55zOn0mWfCjMD9n/rVLpcfM7S
avMncP571vN1ju//fZ9T6fI8/zd9h+dOVLq84kDWlj/0T1S6fOHql0O8pyQq
Xe5RfcfTb/olKl2uP3nID4eyJypdrnxjUNcxc51Kl6OfeqZe7eZUupyzx6Iz
3ayc/541JMfZHTXqJipdfvyy8/XsoxOVLnsdTdyUf5zKb4lpPOj+8UaJSpcP
vkyMWBin6mOZWanWtD91/S2dR+Vvnn+YU+ly7qgpa2NOOJUup+3YXn7dp4lK
l2tnu7pg8gfpaFeFtC3PHUudSpfHhOadUvuVQ+nyuPbBXeb87lC6XKLb37uH
7XQoXc5XpH3ewlcdSpcfxnRMi/7GqXS5XKfOaQ/vOJUuJ79YE9VhKee/Z/1x
UqUS5+MdSpd71m/XJXWOQ+nysVcjTtYer/JbOD/axeWjXf93fdIsqD/rMtrL
ukz9Y/SrlHt/Gv2i/je/T+Nl9IvG1+iXl/t8MPpF88foF+Yb63J7mZ+syz/I
fGZdPiTzn3U5VtYL67K3rC/WZaxH1mWrrF/W5Vyy3lmXsT+wLmM/YV2m/cfo
V1f3/croF+1vRr9oPzT6Rfun0a9z7vut0S/an41+YT9nXcb+z7pMemHaNdVd
X0y7SI9Mu0i/TLtI70y7Orvro2kX6alpF+sv2jVu629j2v3uULp8c2qZKjPr
OZQu55ywI329j13pctjsngVTBicoXd4wedpV+3Ob0uVJOXte/ypTgtLlAdl/
ST56L0Hp8vz2/vdX9LQrXa4UFDh6QQW70uV+JXcGFP5M6/KpoJIRDVY4lC5X
yVLkQrrFoXQ5cMzd73/+zKF0+VL5VSVXV1T5LY3rx7waV8+hdDn2lxzVP/J2
KF2OcmSePM6L65NmKV7yYNt93g6ly87snkfmVnIoXe6/bPj0wOqc/561Y8US
pybXdihdrtKnR5NDdR1Kl3s1mFshqarKb/EalGNlSjGH0uVfFiTWTy6h6mPZ
2dYeFthT1d9ysJDnwy/+UrpmLeYd9vmBsASly7su5Hyd3tqudLnUxbVpq2rZ
lS6PHNd292z/BKXLW3ds8qgaYVO67P+23sx6nyQoXc6SHDT1+kZVH8vPnrUb
D1/H9UmzJP50vGBMX4fS5cRPv51Qa7ld6XLnDZPXB2S0K12um3fXoi+f2ZQu
H6nn531gvE3p8s47GfK/6aLyWzg/2lWTyke7/u/6/NsuqT/rMtrLukz9Y/TL
070/Xb7Svf/N79N4Gf2i8TX6VdZ9Phj9ovlj9AvzjXX5kMxP1uUdMp9ZlzH/
WZcbyHphXe4t64t1ubKsR9blzrJ+WZcHyHpnXU6U/YF1GfsJ6zLtP0a/brjv
V0a/aH8z+kX7odEv2j+NflV232+NftH+bPQL+znrMvZ/1mXSC9Ouge76YtpF
emTaRfrl4gDuemfalctdH027SE9Nu1h/0a6YbwuHNluhdNDa/OsBp777Il7p
crOILYMr94hVurwy8P7QrLVilC7f779pQY+uMUqXVyUUK/B9rZtKl6dVXRBU
t5RN6XL38tOnBK6wKV3OMmXI3TuPbEqXX3008nLemTaly1WC8u664x+vdLlZ
sz+uTPo2Xuny7WI7h766F690udeVuiG+/jaly/6D8lzOusumdPntX2uKd45X
9bHMLnt0TPVLqv6WEpfLdC/e2aZ0uckdS7235WxKl/9ZPzCX5xrO/+95I+O4
b1sn25Quh1qnvxwQZlO6fKv7xfCbs1V+i8dvO4tc+cKmdNmzWe7hH62IV7rc
vXRY6tMG8UqXk9/l9m+/Ml7p8u9tEgPX59e6nFjc81CDczaly6O2nbANGah0
1tqp7atLvmvjlS6neDW60+N6rNLl4xvrjt3yOFrp8vcTh6Rk6xCjdLlGVOuy
pbvcULq87ceIVi9m25QuD3pccPeda0oHrf1LPz33Nile6XITa7/JK8NjlS6/
SFkyr681WulypyYLLWMPRStd5vxoF5ePdv3f9UmzoP6sy2gv6zL1j9Gvae79
afSL+t/8Po2X0S8aX6Nfo93ng9Evmj9GvzDfWJf/lvnJuuwn85l1OYfMf9bl
j2W9sC5jfbEuW2U9si7XlPXLuvzRL+/XO+tyC9kfFMeW/YR1mfYfo1+v3fcr
o1+0vxn9ov3Q6Bftn0a/mrjvt0a/aH82+oX9nHUZ+7/i2O56Ydo13V1fTLtI
j0y7SL9Mu0jvTLtIH027SE9Nu1h/0a42I8qd+uZRnNLlnOPL1Q7teUPpcq5x
D2fkOxqldHlOnotxxbdFKl3O8+1nnjOTVH6L37N89pq3o5UuW8ZveunTNEbp
8pzo3MsTlscoXb6w7mTPwlExSpd7d3gSs8rvptLl1S2z7Og2NVbp8usW348v
tjxa6fLv284PP70tWulytZobFwdkj1G63OZVv5xjf4pRurwsNP+nCTlilS5f
yfjNliYbuD5plm+79XvQue8Npcsbxi4OiLp5Q+lygWwJS+Zk4/z3rL1vXvmi
zMBYpcshHTd3+DgmRuly0XHb555sF6N0eeaiAsVGhkcrXe63+N3eKROilS5v
PuxzeEJktNLleTVOVTj5WOmatfixjamlY5UOWms+bvXsxW8xSpcDotpWvTks
Runy5dCm/dcUilG63C/4p1fT90crXbZGX8taY0Ck0uW+/WvPXBUcqXR5kb9v
7oIzuT5plk0LM8968uKG0uX1w4r/vKB3jNLloz9cXLv8TrTS5Z6VrVHFTiid
tY7b/rxueolLSn853fy/CZWD+v/fv5tmQT1Zf9Eu1l/qB6NT1G9Gp6ifze/T
uBidonE0OjXSfdyNTtE8MTqFecX6O1fmIevvJpm3rL/9ZZ6z/k6XdcH6W0TW
Eevvn7LuWH+xTll/C8m6Zv3dKPsA6y/2DdZf2meMTtG+ZHSK9jGjU7TvGZ2i
fdLo1Cv3fdXoFO3DRqewb7P+Yp9n/SVdMO1q7K4jpl2kO6ZdpFOmXaRrpl25
3XXQtIt007SLdRbtKh945KsGS6OU/mYodfTPYYOilP4e6Vl1V4o1Qumvn6Pm
wu1xfyn9XXiq1p4abS8o/c10NueNJpcuKv0dn5rpp2vRl5X+7gm8VWpQ0jWl
v+XqPL847ni40t+AO4HefuOilP6W6N4qtV3dKKW/p7KUOLq3WqTS39EHik8+
vzdC6e/5WtvG9f8tQulvmEdcgV4hEUp/E17Wz3I5OULp7+wVl9u0qBOp9LfZ
1+8qVdkRqfT3n/HVe/1+O1Lp74JFlzt2Gc7571kTrvWe4PVPhNLfgccG5F3w
e4TS36e+zXN+skTlt/i0Hn7W54cIpb/f7xy+qfayCKW/3f5ISNiq62/J/vHP
Q/f0iVL6G9qv8qKFiyOU/vodrVX2Scp1pb9LEhbtqLThqtLfI68Wl9q8K0zp
79MFw2o1fHZB6W+GHW22ll1wTulvu/JTa+37+YrS37wR13vcfhSp9DdzLo8z
vt9HKf0tsn1W/7BskUp/T/zp+yzk52tKf4My/9Ure93zSn+PFY5t2eLQEaW/
nI76B1I5qP///btpFtST9RftYv2lfjA61dW934xOUT+b36dxMTpF42h0Kth9
3I1O0TwxOoV5xfqbWeYh628Xmbesv9NlnrP+NpF1wfqLdcT621vWHeuvXdYp
6+9iWdesvxm+e78PsP5i31D+132fMTqV6L4vGZ2ifczoFO17RqdonzQ6ddx9
XzU6Rfuw0Sns26y/2OdZf0kXTLuC3HXEtIt0x7SLdMq0i3TNtCvEXQdNu0g3
TbugsztSL03N9TrjyWblTvaY8u6V9bvGG/8peTbJpFezzCn6fZknVv+ZbyfY
D7nS0d7BPoeiYpYkWdL+12+PzXzw/uWl//Jm+O5Rf++HctA/RYsVWZLX35Xe
4H/lJ1nvXCler2NbVzr6Le6v5s32n+b0MGtVv9Qtj2640tGf1Rsuz5tlXrKl
5f/qE+WqZ8HLm2ZHJFu+onWK7y13DGhV1rtwmrW59M/YibW2rWlovmO0NqDv
md3blWbdWfTC7Ad+rnLQbwMmtJjcydNVDn8XTe2yrKv+tP2YaE6/aaluG/Y8
hyXFlI/x6nV8Ucmeru88rV5cvuRH/3vdmBMw4JorP9LxPbb7uCdZCjZs2KP6
dVc65qH/rwHLZ61MofYmWStG7p90poX5LhS65ipf8mN842se7R14wZWfvwOn
+WkZbet1/ewrrudzS1BOr/Dwjq7y28g8sRfpGvbTBPP9qqR/UL7kx/zx9Cj1
OMsAV36k4/tzWkeWBikTR1S5qOaDZez2qL8S1v6rN9H/Wy/WJjKvfKasbXFi
SbKlm5vuu74zdx+vNOuotQutYx4m0Xi5vrdH+cZfR1QvmOe+q3z+Xh3ld5X5
tmHX6qWbL3F7D3mb9rqPl2VPfJNX31a7zeNlvsNHfWrI/Ix+Vm3i21hXfTrJ
fMB38siPeXg4Z8W/PpmcYvK3o/yoj5fMzyLxC+rmXOyaP61lfuL7Z+THvO3f
8uTYAd3V/DT5UZ+6Mp8HBVTbeTDdVR8p3+qg+mPeJtzutzdroCs/0q/K9+Go
T3WZz4Mnrhs36oBaj6r+hktP9/0haZDaT8y9BtSnj8z/5atnnbmX7ur/9+N7
KqSRfMeO/Jjnp6Z2ujPsNuf38EB+2ictF7r9VMJiT+J90tSH5rOl8Pd/ZT58
S81nc/+i9/t92+or62Xn3Nv/pA7Gue1MiDffU3CbP2lW6JH7/HGtL5SPdVHa
OfnqV6Gu8tU9CPf+tFzd96ZNtTaqP725P829mznPkkYWT+b5YFkq9wtQny9l
vfhkmFzDa6+rPvWoPshv9vObDdJvfe7Kj/SfcZ9C6lNH1suEfP75Iwq76tNS
5tsSuQeB/FgXKXl3dZ04MYn2K9c9FNQH62Vf55Ee9dckmfq0kfrg/gjym++X
avVs3rKvK7+6V+K+n1hmFOnS/0HVJOpPV31oP7Qc2ZVj5qKeSbwfmvsyqE9j
WS/JKVN6VXx4y9SnNdUH+bEuCrwutbeU3ZUf6eb+i/v+b+n/6HS5aZHcnx/c
03Gfz5bD+TN9+jI2ieezyY9zTlNZL+kDtsduK+0653wl8x/53edPmrWBnIvc
54/rfhDKx7poX+pJnSM7kkz5fL8G5WO9NL5epIX/fu6fY97oH5oPllwng54P
PnmL54O5N4T6QF8KL6pbIN8UV306YL7JfHA/B96z5h76yn7i5S06B7ryoz6N
ZL0Et75V9nKIqz5+VB/kN9+NSPnIz/ebUJ96sl4WSvmoT9v/qD/WRU7pH/f2
uu4roT5VZb2gf2g/sfB+gnXRTsaX9kOTH/XxlfWC8XWvv6s+yM/rBfmRjntV
tP9b0mQ+0/6v6o91seDJ/Em1Fqj5bO6Lwb9AXwbIeoR/aUj3qshHWFE++Qiz
vlA+1gX2H5TP97ZQfk9ZL0my/7j3zz5v9A/NBwv2T5oP5j4a6gN9mS77J+pT
l+rj7u/uWZNl/3f3d//qjpxPaD5bDv35eeOnD1z1wXkM9+CQH+uijugXzX+T
H/WxyHr5TvQL9ekp8w3nT+THukgV/UX+DpQf9cF5zCL6S/uDqj/WBc4PtB+a
+32oD85jj7q3mbHzD1d93o/v2ZC2ct5GfqyLM3Iec8/v4YH8tP9bcF6i/d/4
3C3vz2PG/waKv0j/j3ttyN9Y1gvOe8jfRuY/7vERH7BCv4gPmPuMKB/rAufb
dOJIS+U+IPWnJcflqhFzeqZwf3pzf2Jd4HxO88HyUPwg6lNT1ss/7YbMiPFM
MfXpLPN/odxDdO/Pe9YB4i/SiXchP+oDfYG/oPls6oP8WBfwR8jP9zFRHznv
WV+1HFfr+CtXfVpJfYKp/lgXu8XfpROXS5X7lagP9CVS/B3tJ+YeKO2HliPi
T2k/NPlRnwayXjaLP0V9fKU+uO+J/FgXucS/pxM/xD1Q2v8tFvHjtP+b+mx7
7+vNugDnQXoLWRfgALS+rIXE79D6MusF5WCeg2NQP1hyFJ45/fGBFO4HyyW5
x0rjaEkQrkLjaPLjd2UcrWOFq7i399/5LJwH5cs+bKkinAflY96GUX0wP72F
OyE/0vG+AX4X87awcCekYx7WEA5G69TSUzgYyu8o5eM+L+0zlv7C5WifMfd8
8buYh+uFyyEd86qG8EbaJy1jhB/SPmn2VZpXVvAipA+UcQfnpH6w3BQuinSM
Czgq0tHPxYW7Ir2K9Fsf4b00Dy3gvTTPLROIG4Mnn1gY/mJaQ6fiydPzP1r+
UT+n4sm7T/T0G+nrVDz5ef+zFzvPcyqejHtqzJPn76xWaExtp+LJRa/ev7ep
mlPx5Lf9s59568/pYdY2w0suOTLKqXhyx/xfZD692ql48polf7fpH+lUPBn3
BJknf9442+qZS5yKJ+MeLvPkpedu3wiZ61Q8ucCon9+MWutUPJnLAU++7x+b
2XFN9YPlx4BhK0JsTsWT750v3+CTo07Fk035xJMbl2685/kzp+LJuEfMPPnz
uQn9J1VLVDz58bHVOzzLJCqeXOZInx/bl01UPNmUTzz5eKXthUMaJyqejPuS
zJPrHPAfOcqH6/ncsq1baJ1i+RMVTz4duXf++aGJiieb8oknD64dNK7t8ETF
k3FvmnnyZ5lP/jIpUs0Hy8L4Tumf/tv/zJNzFZy9r+C/6cyTeR5iXmVf2PLQ
yT48Xq574syTM2VYO+5NilPxZNyTZZ6coVnWzBUmcHsPeZv2Ek++liWs4tuv
1XiZ++PMkzft/7LC3Q/qA56M+93Mk1Ozt14TUzpR8WTkZ57cqP+c9cmVEhVP
xr115smZlza/FVRCzU+Tn3nykmmLv2zmk6h4Mtcf8zbHhPR+QR8lKp6Me83M
k8d7bdtVSq9HVX/Mc3vElQz1wtR+Yu7jM0+uEV9z+4ZDTsWTx8r9a+bJ0d5p
weV+5/weHsjPPLn7jMtDV8xV+6SpD/Nkn3KNvjozUc1n824A8+RJyZ5eS391
Mk9w3a8nnvxM9Ih5MtYX8+TAq6XeBV13Mj9R5cO/bM1w/FDqatWf3mOoP7Eu
tl2YuGHzRKfiyUFyL555co5ph/cP+qA+9ag+zJNtTd5GbRznJH7ywTsDxJMn
td1+aelYp+LJn8n9febJd7YN9JnShPcr1/sJzJO7NRicNbKeqz5tqD7Mk0+t
nlB2RE4n80PXewjEkzs2Xrh8SRHuT1d9mCdf2hTa6m5ltR+adx6YJ99+u2/w
ipMOU5/WVB/mySviT66vfcRBvPSDdxuIJ/+R4XTDv8aq/d/1vgTx5I1bapZ8
OUDNZ5OfefLdlKC/l0xwKp6M/MyTcS5ynz+udy2YJ7+dPe75oepOxZO5P7Fe
Vm7+fq59OffPMW/0D/Pkv8+M7NJ4g4Png3nvgnnyD+WbNP7mM6fiyXiPgnly
5ztzBq467VA8uRTNZ/j9kJZrptVY7aqPH9WHeXJHKR/5+V0O5snHpXzmyVx/
c/9O+od58jjaT+D3p0v/0H5i4f3E/D+LjC/thyY/8+QVMr7Mk1Ef5snLZb0w
T8b+yTz5jsxn2v9V/bEusi7rlNZvi5rP5p0T5slHZT0yT8Z7IMyTs0n5zJOx
vpgnh8n+wzyZywdPTpH9h3ky+od5cqjsn8yTcd5gntxJ9k/myagP8+S7sv8z
T8a7KMyTW2369En9tk7Fk/F+C/Nku+gX82TkZ548WfSLeTLOn8yTob/Mk5Gf
eXJO0V/myVx/rAucH5gn47zNPDn2oz8mXV3mVDy5gZy3mSfHyHmMeTLyM0/G
eYl5Ms4/zJPhL5gn4z0W5sk47zFPxvszzJPXi34xT8Y7PMyTE+R8yzwZ79gw
Tz5w43SbtI8TFU/2pv7EuvCU8znzZPhB5snDq470WvDSqXgy3s9hnvyx+Avm
ycjPPHmp+AvmyagP8+R08UfMk/GOEPPk5V6zAxZ2SFQ8meuPdQF/xzwZ7wIx
T94q/o55Mt4vYp6cWfwp82TkZ56cUfwp82TUh3nyUPHvzJPxfhHzZPhx5smo
D/NkcB7myeAAzJMbit9hnoz1wjwZHIN58oD5IzM2bqr6wby/xDz5hHAV5snI
zzy5lnAV5sl3hfMwTy4nnId5MtcH87OpcCfmyXgninlyWeFOzJPBwZgng4Mx
T0b5zJMLCpdjnoz3qZgnPxAuxzy5k/BG5slfCD9knox9lXnyAuFFzJPBOZkn
vxMuyjwZHJV58gLhrsyTwXuZJ4P3Mk9mbgyeXOLaoCtXdjkUT/74zPqJPt4O
xZPbpZXycHzrUDz58a9PLvZfbFc8Ge+rME8+1Gykb1uHXfHkPG3PRwSMtSue
7HdkxdxMXTg9zHpy/85BGYvYFU8uNrBHlmzl7IonTy23qsOzanbFk/G+DfPk
Wz3nvW62w6F4Mt6PYp58P3H3k4N3HYon553lW9FvgEPxZC4HPHluVd+sjauo
frC8azzTUayBXfHkC+1Ob/m9nkPxZFM+8WRL4WJnQ+o7FE/G+1fMk59Ztw3t
tNeuePLccrbN9v12xZMd7WZumF3RoXiyKZ94crs7G/03V3Ionox3t5gnrz/f
8PP2d+yKJ6/JUnd0aIpd8eT0JhOqf+56/8fwZFM+8eS8+3OXs1Z2KJ6M976Y
J99qcatJ+gf1wbyq0etepvHX7Yonj6rZaVmrFXbFk4vTPMS8Kl2gV95OW3m8
XO+bMU/+Y8LYtw+j7Yon430n5slXju3Ltacmt/eQt2kv8eSGHZ622FtRjZd5
94x58tg39aceD7Mrnox3yZgn9wu+b/3rql3xZORnnvz4Vu9Vez6YP/AveG+K
eXJIgde1x1ZR89PkZ57c6MznPhnC7Yonc/0xb5NXTS30+lu74skB8h4X8+T6
R8b2qlJZrUdVf8xza4FnZZ61UvuJeUeOefK0gzubtCllVzx5m7wbxjx5b/DN
CpMKcX4PD+Rnnty/Tqv5i9qofdLUh3ny4LV91t2foeazee+OeXLdh2Vu5bqd
oHiyeYeNePIj0SPmydjnmSdPreXb5vfyduYnqnz4l/nHvlk5JbPqT2/uT6yL
u0kV4maUVPPB0lfec2OeXP+w5+WZRe3Mf0x9mCfvfljmXNKSBOInH7yPRzz5
eOyFbldH2BVPzirvzjFPLuOx/s3lAN6vXPmZJ3c+M2n9zQqu+rSh+jBPztut
4/Ni923MD13v+BFP/tK6el6PXdyfuv5YFxPveActyedQPBnv7zFP3hs4uUTg
Vld9WlN9mCd/0So8W76lNuKlH7w3SDz53NArT8p841A82byLSDw57FpSxmnL
HIonIz/z5Ow30lI+vWVXPBn5mSfjXOQ+f1zvMTJPHh0d++hBe7viydyfWC8/
jlnXtvBe7p9j3ugf5smea1r4j7Oq+WDeaWSevO9U6sKS4QmKJ+MdRebJpdJz
/TStdYLiyZ40n+H3HQtTbKGervnsR/VhnlxCykd+fk+SebJTymeezPXHusgu
/cM82Z/2E/j9PdI/tJ9YeD/Buhgj40v7ocnPPBnjyzwZ9WGe/LmsF+bJeMeS
ebKnzGfa/1X9sS4q/lRv53cFHDyfzfuczJPPynpknox3LJknV5DymSdjfTFP
/k72H+bJXD54MvYf5snoH+bJeWT/ZJ6M9z+ZJ1eR/ZN5MurDPLmc7P/Mk3E+
YZ48Ynpq0fJ+CYon491R5sm7RL+YJyM/8+RQ0S/myXhHlHky9Jd5MvIzT24g
+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
8on3DqsT2mLngQjFexFXl3nvuZo5lxUeGK54b5GZsb/7LQhXvHf5+B+bvf6g
/DZcPvFe2/FxTWpvjFC8F3FIFe9Nebyt1blwxXsPtZow6fq/v8u8d3tqeuCT
dxGK9/I8xLw6Uu16m1lVoxTvRfxi5r2jy2b4c1OFCMV7u0lcV+a99s058+7f
zu095G3aS7x3VrkyDy//osbLxDVm3nv/n2x5a5cIV7x3ucSfZd6bf0P4tu23
ryvei/zMe7d23dz7wo4IxXsRT5l5795rnbtOP67mp8nPvDd2afSYjqevK97L
9ce8LX2zQKcvz11TvPdPicPLvPejUsXHn0iOULyX6495HvCF37KgALWfmDjR
zHv3+1yOzl/omuK9ryReMPPe17OOR3bKzPk9PJCfee9X80b+OGSH2idNfZj3
bq/Wss2Dj9R8NvGsmff6BP8RWi5PuOK9VsRfJt7rL3rEvBfri3lvtmPHs8d4
X1e89wSVD//SMPemPvb0q4r3vqT+xLpoXiJPoYi/rijem1niODPvnbnsfP8h
1a8p3ov6MO+d/bTyjDX/1sudn9yzfoe41cR7Dz+MCmg76LrivR0l3jTz3sgS
fgm+AdcV70V+5r2Fpu5p1G3UX4r3jpf6MO9tl/GffrdOnVa89xTicRPv9Skf
nP7u9XXFeztR/bEuavt2X+t7KVLxXsTdZt477PKw4fsGnVK896TUh3nvf+S3
nKT6g/fuHRDQMSgv8/MP4p4T782SrVXBNyOjFO9Ffua9zoGbb07PEqF4bybJ
z7z3gZyLiL+ZeOvMewe3mF++U2i44r15qD8xz0fH3Sy7pWao4r1W6k/46zWr
xt0fUues4r2nJT/z3jvtZuXIH39V8V7ET2feO6BA2Qu2pIuK93ah+Yx53lfy
oz5IH03zGf46SepD69fEi2feu1zay7y3E9Uf62KE9CfzXg/aTzDPh8p40f5m
sdJ+An99S+YP7bcmP/PegTL/mfc+lv2Qee+iXqfzzjkTqXgv5hvz3j2yXpj3
Ir48816Uz7wX64V5by3ZH5j3cvngvf/RXm+0l3lvC9nfmPcelvMA895Gsr8x
7+0k9WHei/2Zee9UOT+o73vHfb/t8+NnFe+dL+cZ5r3fi74w710o+Zn3Ql+Y
9+J8yLy3kegj816L5Gfe+4PoI/PeYKo/5jn0nXmvn5yHmfc+LHKv76obVxTv
fSTnYea9z+W8xLwX+Zn3WuQ8w7wX5xPmvUfl/M+8N+BOoLffuCjFe9vKeYx5
b7Ov31WqoubPv+tC9IV5b2Y5j6nve+X8ybx39orLbVrUiVS8d2CpTzoMP8T9
c9b7MfUn1kUROT8z7+0pfo15b9HY+WO8WkQq3pv4sn6Wy8ncn/es++X8z7wX
+Zn3XpfzP/PeXlIf5r15xL8w77WJ/2Xe+/OGiJRZhyIU7+X6Y13AfzHvDfOI
K9ArJELx3nviv5j3BgsfUN/3in9k3rtI8jPvTRD/yLwX9WHeGy/+mnnv+Vrb
xvX/LULx3l/FLzPvXSz1Yd4LDsO89434dOa9W8WPMO/FemHeW1Q4A/PeA5P3
N7+9QfWDZfSB4pPP71XjaPlWuAfzXuRn3vuXcA/mvdeEwzDv/VU4DPNerg/m
5xXhQsx7j2cpcXRvtUjFe88KF2Le+6twKua94FTMe1E+895uws2Y95bo3iq1
Xd0oxXu3Czdj3ptPeCDzXo+G7/ke817sq8x7DwvPYd5rFQ7JvLejcEvmveOF
czLvPS5clHmvXXgs895g4bHMe8F1O/1vvWQyvDdLUt93OSskW/55315wPCvi
FSI/uOLijd2CxzdxpSP/V15jd+x6cMuk4xxb9P74r+7cuGXKb4V9QOInIj/S
76yf9LT8OVc5zWQcG1b6svPAeFf6+1E85L3oSOLBzU9d6d2l/9N3NXr8aSNX
PTtL/w/esLryxDmu9IbS/+08hi9eV9RVH/jHWv4NX57c40qH3/RdWqG6R44U
k47zcPcL+YdbhrvSsV8tnhN44XGjlH/3rfc8EPVcJ/EW30n/YFyyf1ekz+HQ
JJOO/n96LOjGmP2udB4vpKP/41Jvz7nZKtn8LtpbUOJOvvuPcTH1kf6/enP3
x11Gu/Kj/xFvFOlo16CRpwt+Mv+2Zaf8LvpttMTfRH6MC+KcIh31bDorIPXl
n650jMt8ieuKdJS/qOzUuj1siBurxwX5kb5M4u0iHePVo8r6iJO//dtvwqnQ
rg0Sp7WTcCqM18V1f8bn8ko26Riv3St65mlaKcWkY7zmShxbpGO8vPP2bJLa
7rbl7X/0D/JjvB5I/FxTHxmvwt0rtyx37LbwNMNnrA6J74z8GEdfiSOMdLS3
08gNV4dk+XccpR/Qz4Mnrhs36oCrvagn4k0jHeN4af2S0VGXXPkxjvUlvjbS
UX7UltknHzmTzO9iXBCXGfkxjqMkrjfSkf/09VG/x65GXOZkM16VooavWfEq
2aRjvELbZLgS7Z1i0tFvduk3pGO8/JJq1C60LtnS8T/6AfkxXohXbuoj4/Vj
zjntO6z7t73/+zsGnmBd3Hr8+UzlXfXHeCFOOtIxXoPXbH0XmH7LpKM+iFOP
dIxLnn+yXcgb5krHuPw8Z/zr8edd6RiX80WqFy767Jal/X/0P/IjPX3XXa8T
JVzp5vz2aMPNPSuTzPkP41KjjC264TrX/WGMy6rAI2977nbl5/5BOsbl00r9
PfPdv2XS0f/zs7fvWPqAKx39f7zYs82FN7vS0c+Pqqx4mWupKx39fELyt/6P
fkN+9D//Lvqf64lygqld6P+V1A/o543LX9XcV8PVb+jnmtKf0v8W9DP6H+no
53Myvkg3/ew+Hwynwvz5/kyZyk1SD3hze5Ef/U/z0IL+p3lr+Y95bkH/z5L1
0sSd+5m49siP+tC6s6D/sX6Rjv63ua93U/5J2R/a9Iqr373tX97c/8iP9M2V
Mg67195VDsYF+4/8f4cZl1OyXyEd4xIt+yHSMS7YP5GOcbks+y3S0f/+si+Z
35X+7yb7/Fv3c76Jn478GJevRC+QjnEpIbrj9x/9ifwYl0eiX0jHuDRy10Ef
1B86iPwoH3HhkY7xgv4iHeOCuOdIN/oiOi7/b+uDcfGWuOd+/9EPcn4w+XvK
+QHpGMef5XyC8pE+1v1cpPof6Rjf5u7nItU/pj4yvjiPvdepTKb8unK+3S71
QfmF3c+HPv9x3vPBuF9xPx/6YHzpPOmD8b0h51LUB/UfIudz1Af1X+9+TvbB
uP/tfu71wbg/kXNyt/8Yd+RHOuKhIx3zAedwOc+b8cV5HukYxxbuvkD1M9LR
z+3dfYfpB/Ipph/I15hxIR9kxsVbfNP7/z/S/Yb8GC/yX2a8iouPQzrK6eju
+0z/L3X3iaafo7M2CGq6wpWOfoYPZX+ap3Id//n+TuVPz0t8IvanvnP6vbWm
OJQ/7VRiy/dfHnOlo/8dTfw79TnsUP4U8ZjYnwZ8W6x88D5XOeb8EFD9RctQ
VzrGJft3vmcyhrvSMS7bT78881kWV/3R/01ybj/r3ciVjv5PqlDk57RFrnT0
/6xmC745dsuVjv6/1KBz2c8yuOqP/s9Ts/DdH0q40tH/07Lu9i2YNVH5U8RV
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
f9ps5cxl4T5xyp82i9gyuHKPWOVPH268cGf1uRjlT1PkvWj2pysD7w/NWitG
+dMmQ1tM3t/MlY5xedB/04IeXV3pGJemG+3X7zW7ofzpqoRiBb6vdVP50wWZ
u56Lq+iqj4kvU3VBUN1SLp9r4tFU/ORN596udPMdafnpUwJXuNLR//s6vqi5
57RN+VPEfWN/mue4T8j3T+OVP/X6OiWkxoB45U+byXixP12+b//aP36NV/4U
8d3Yn+Idb/anG18E5v2svE35U7yvzv70myJbm+340ab8KeK4sT/Fu+7sT78s
1G3c3tM25U/fyjv27E+bvPq1ZZNIm/KnGBf2p7MlvgD70/DXDwZuD7Ypf4q4
aexPS57ptGWmvysd47W8w4MGlU660jkuHvvTV/5pe7vF2pQ/Rf+wP0U8O/an
nTy3Ddjwq035U8TXYH+KuAnsT5/8cOxll+425U8Rv4z9KeLBsT+dlfr16b/t
8SYd44h4Z+xPa9R8WGPSkHjlTxF3jP0p4o6xP/1l0cPKpYbGK396qdb4PA8+
8HEYrwr9ki+EL7Mpf4p+Y3/aN7Vn11gPm/Kn/+x93w/sTxGfhf1p0dNFel37
PU75U8TPYn+KuDDsT68/OFb1H0eM8qeIy8P+tMTCDnu6lYxR/nSqxCFif3rj
854/FugUq/wp+p/9KeJtsT8dUSXnkewjbyp/OiDrj38862lT/jQ8cGepsJtx
yp8ivhLSzb2SzmkfvTXxvFz+FPGbzO9K/2/Otzj57h/Ryp+aeF7yh37eIvnZ
n5p4ZPKH/uffRf8Xo3qinKbULvR/JPUD+tnErZM/9PNA6U/2p8Ol/9mfYnzZ
n05znw/GB2H+sD9F3DT2pzQPjT8Kd5+35vx/232eGx9UXNYL+1PE8WF/2sl9
3Rkf1E/WL/vT0e7r3ZRfUfYH9qfof/aniAfE/hT7D/tT7FfsT7Efsj/NIfsn
+9M5st+yP/1Y9mf2p89ln2d/ingx7E+hF+xPO4rusD9Ff7I/Rbwb9qep7jpo
zu3QQfaniIPD/nSN6C/7U8R5YX9aTnSc/SnivLA/RT+wP8X5gf2pj5xP2J9+
4X4uUv3P/rSy+7lI9Q/706/lPMb+dLqcb9mfjnI/HxofROc944PofGj8Dp0n
jd9ZKudS9qer5XzO/nSS+znZ+KMm7ude44/qyjmZ/SnGnf0p4r+wP8U5nP0p
zvPsT8kXqH5mf0q+w/TDSnefYvqhibuvMeNy390HmXGBb2J/2sTd35nxIv9l
xgs+jv1pc3ffZ/rf190nmn72/XrAqe++cP0u+jlYfCj70yqjt6blLBen/Cne
e2R/mvNl1vihc1x+EPlzjXs4I99R1/1W9P+lpvFVC38Zpfwp3s9kfzonz8W4
4tsilT+9EjL2WYfmrvIxLnm+/cxzZpIrHeNSq8rqFzcHuspH//s9y2eveduV
jv5vc/jm0Pr5Xe1C/1vGb3rp09SVjv5PKt/zXM4RrnT0/5zo3MsTlrvS0f8V
6g95nXY4RvlTvIfJ/nTSpXTr67s3lD9t1fJ0zmNzY5Q/xXixP+32qvTTgPXR
yp8iXgz7U4wL+9Nnw2tNLXwjWvlTvAfL/rRR/hnXnrSKUf4U76OyP8U7tOxP
A3uHfFohLEb5U7y7y/60RqJXj1zdYpU/nSvjwv70iryHzP60aBVHyzCPG8qf
Ig4L+9Ne1iPTvxxzw6RjvP4Y7fdN9JFYk85xdtifzi/wR0jeErHKn6J/2J8i
Pg7702H9t45I/DlG+VPEQ2F/ijgy7E+vZuzTeUWuGOVPEQ+F/Sniy7A/fbZo
bvKLra50Ew9C3j9nf/rD5s8OpP07D9mfIo4J+1PEMWF/Wmjs9Edr+8Uqf/pF
1LggzzMxyp9e7xe26O8FMcqfot/Yn65vc6FlgyYxyp+iH9ifIr4M+9MVXwza
82lytPKniMfB/hRxTNif5jq42yNubpTyp1aJO8D+NFfxj84nT4hU/hRxOtif
pjqPt47NGq38Kfqf/eliiTfB/nT1+G1tPj4eq/zprldjCuYpE6P8adbYZn/c
iIhW/rQH4qfIH8Yly8n47y4PClf+0cQfkT/z3SnigKA+Mi6cjv7ndPQ/p6P/
x1M6+t9T6ol0c3+B2oX+Rz8k5Zxa83Lpc96o/wQqH/1v4uPIH/of/cy+dZWM
C/vW1zLu7Fv7us8T448wr9i3oh/Yt550n5/GN+V2n8/GF9D8N/5opawj9q2I
R8C+ldaj8UdY1+xbR7rvA6Z87BvsW9H/7FsR14B9K/Yl9q0FZB9j3zpD9kn2
rf1lX2Xf+lT2Yfat02W/Yt96RfZ/9q3QX/atiBfAvhV6xL4V/cm+Fe/2s28l
fTTneegj+1boLPvWY6LL7FvxXj371q9F39m3Iq4c+1b0A/vWInKuYN9aXc4t
7FvpvKT6n30rnZdU/7BvbSjnNPatjeXcy77V1/3caPwRnQONP6Jzo/FBdM40
PshPzqvsW3FuZ99K52fjm+g8bHwTzs/sWwvLuLNvXSPv2LNvnSznc/atX8g5
n31rsrtfUP3MvpX8iOoH9q3kd8y4kD8y43JZ/BT7VvJ9ZrzIl5nxuiz+jn1r
Hnc/aPo/t7t/NP2cc3y52qE9Xf2JfoY/Zd+69MKRmZ2nRCnfGirvVrFvjW84
pmaFJa505P+9Z9VdKdYI5VsDypX1Wud3TX/3K+90sW/1c9RcuD3uL+VbR3c8
VHxEXlc6xmXhqVp7arS9oHzrxaalT9ef78qP/s90NueNJpcuKt/ayD5335yO
l5Rv/S4100/Xoi8r3zp0RMrAK1evKt+6N/BWqUFJ15RvHRox7OWDa9eVb90i
73qxbz1X0ra6k1+U8q2B+w7GvjsYqXzrKRkv9q2rbcWL/PkoQvnWU/K+GftW
vJ/GvnXdM+d3+X+LUL4V79qxb/2riI+v/XCE8q1n5Z039q14T499a9SkuTnz
XY9QvjVB3g9k31qzxccVs30aqXwrxkX9v6q868i+ddCb5Ab1AyKVb8V78uxb
fWdO9cu0M9Kkm/t01ZYln6vtSud4AexbN571970VF6F8K/qHfSve+Wffusuj
a+6LWyKUb10q74iyb8V7+OxbV13ofrfMvAjlW/GuO/tWvIPKvrXPxPs1G8x3
pWMc8Q48+9Z7+7eefFAiUvlWvMfOvhXvsbNv3f/N0S0VPo5SvnX+gmpxlpBw
5VuvLWk0+Yeb15Rv/Vn6jX1r2WG5B97eeln5VvQD+9bf5V1c9q2Rp95VDGx/
UflWvCvOvvWpvMfLvjV19c371U6eV741o7yfzL61wrfJw+8GX1S+Fe+fs2/9
7GCWY78UC1e+Ff3PvhXvkLNvXfDk708L1o1SvnX4/kGVzrQLV771daNKG5tU
vaR861i8Ay9/GJftc4pMW/FTqPKt7fGOuvxhXI7hPXPUR8aF09H/nI7+53T0
fwilo/9/lXoiHfUcQ+0y3ED6gX1rKJWP/jdxBOTP/L+29DP71vkyLuxbS8i4
s2/t4j5PjD/CvGLfekLqyb6V5qfxTW/c57PxBTT/jT+KknXEvhXvKrNvPeK+
Ho0/wrpm37rIfR8w5V+VfYN9K/qffSveZ2bfin2Jfese2cfYt96VfZJ963TZ
V9m39pV9mH1rE9mv2Leulv2ffSve72XfCh1h37pd9Ih9K/ZV9q29RdfYt653
10dznoc+sm+1i86ybz0qusy+Fe/usm9tJfqufKu8u8u+Ff3AvhXnCvatteTc
wr71gvt5SfU/+9Zo9/OS6h/2rTinsW8dL+de9q1n3M+Nxh/ROdD4o7Xu50bj
g+icaXzQSjmvsm/NIud29q3b3M/Pxjcddz8PG980Us7P7Fsx7uxb8R4v+9bz
cj5n3zpEzvnsWwe7+wXTz0Hu/sL0c0N3P2L64WN3/+IaR3e/Y8aF/JEZF/gp
9q3H3X2fGa9u7r7MjNc48XfsW0Pc/aDpf7u7fzT9nKHU0T+HDXL1J/oZ/hT+
Bf1z50rxeh3bJpl09ENVv9Qtj24kWbbJuRHjMnZirW1rGrreB0b/4B2wf+i8
jffHcP7E71aM3D/pTIsU9Jt6xxV+AfWxF+ka9tOE25audG7He6fyvrHxHQ3k
fbb3+9tjU3+fKWtbnFjiSjfv6T2rNvFtbLJlq/wuxqVw/IK6ORenSLsem/oP
Cqi282B6CvYr9X5pe6rnfalnGuoj7Vq6etaZe+nmHTn1fub7cqJM/XfOvf1P
6uBkUx/z/2L73rSp1ibZ+BSMSyN5L9FPyjHfpci7iG+kHLT3u3z++SMKJ1t6
SH60d1/nkR711yRZhrbp9cm8CudD+P1M5Ee7klOm9Kr48JYp39zTeXS63LTI
JEs7OVegXekDtsduK50s+0mUaVfj60Va+O+/ZWl//0y7+2dOhKBdeIezq5SD
dhVeVLdAvilJpj5oV3DrW2Uvh+BdzUMh/C5lU8mP9VVEyvFFPaVdqE8bOnfh
Hcv3+9tj064B0t62dO7CO5atpHy0N0n6LV3KQbumF+nS/0HVJEt3yY92Hf7z
88ZPHyRZOtN5Eu9zZngfJ8icWybI+Lam8wPeY/Sjdi2Vdkm8IdMPT7q3mbHz
j2RLL6kPxhfzU9av6Qe804t2ob05LleNmNPTvA+s3lFEOegHj/ZDZsR4pphy
0A9Yj53p/IP3JGUfM/3wquW4WsdfpZj+Md9byj6A/OZ7UXnnuSPpHd4PlP3N
tMuz8Mzpjw+kmHJQzyqy770lHce7iMiP+vQ8vqhkz3/3k3TSZbzXt1vyo//H
yP4M3Ud/4j1A6D7qiX0e+fndP+RH/aEXwqOMHvWZ+XaC/RDeZdXv+6Eccx+8
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
K9BPeP4O+sn69KUh6gi98BOev/M/1mB5lA==
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlgmwTmUYx889lqN7vmMbQpbuzXZxLdnDtW+5lpuQfc1gSJbIlGEQiqJo
DKUUarSZokWyL9mXkZr2lEJikOxFv/88z8z3zPM///O8z3m/9322zKGPdx8b
BkFQIS0I8qGnR0FQCP0iumEcBN14WTgJgj7oOvD90I3ge6KLwhdDeoMfiM2+
K7gIXFlkOLgZXGOkGms343MwXBZ4I7gMNo/yvBVcD5sO4HS4gej7sOmPHuLf
3YtNXWxa8Hw7FQT/IU3A98Ot4F1pbN5FfxCZTVpiuCr85+g62h/8Da0DDwDf
jU1TxyXBo9F1sX9SfnmeiW7L+zbo1kgIl41MA+/H5250c+x3ovOwW43uyvuu
4DfAD4I7IK+Bu8B1B78Dfkjnh2zW/4OriowHt4DLRZaCK8Hl+Llt4ltjxIE/
BX8Ibgj+Btwdm/d57ol9HrIGfAL+kdj2NQJuALIefAb+LnAuuAHvx4OPggty
4RMcD4QfC94P7qO7A88DdwDngBfqf4Fbgj8D/4nPm34XOv8x8PvAt8D1sWsv
/4mdoe50HXxF+AI8f8262uB64O9SxucHHwPfC/6XmNwLztY5wB8Fz4mM3wfO
hC+KzwVwd+BuIwdThkvCL4G/DoYKZnkMNMLPdYiJPCvuT/E+ApQCFwvN/gay
B5sK2BeGfw7bych5+O3wl9Hp8H+kmQjP5P2EyL71TGR+5f90mq3lCIK56Fu+
N+1Rd/oYkp+XzfnWKHCmx0JjbCYp7uCfQteAr+2x1yY2/mlwdbht+K0eWEwq
X5RjpRPTei6VWN4qj4b4N7PBuyKLa91NvsRyTDaK+fbIHPj6ieG5ijnf50hw
hcT86D/cC66CjPMY1h3rrpXX5TzHVQfKgxd4/NTx/GqnWIot57IS25P2dhzd
GX4ZfOXE7qYoslOxxvN8cEedA3gDuAe4DLoMa8uiZ7D+Kmf8JfZX0CUCu1fF
VRHw87yvoBoALodu6vGZg26p/wRurvxH7gnsnHLcRud10+NK8XLJYyAFXyK0
bxUOTYTTtc5j+ziLVvHtLPAR8OLI/tePygV0Oexj9HzFJ/owfLnYYm8HOCO2
ON/v8S+bQ+BWXldVQ9P8fynHOiIZgeVhL+zbga9EFreKz/HgsvB/8bwtZfEa
emzP8nhWLCu2ZbMV4jp4D0ajOfv+qvnYRNSQdfoe+Bh6r84uMLvBsXFPqFeA
d4FHgnco9rDZjn4dnxmqJ/ivH1o9r6s6jFQJLG/L+v1moldHdi8foxsrHgOr
7xX9vlQvsv088xRDfg5V0WO9lip2m3pMKt4WIcXhK7HHiXC1Aut/05UH4Bno
KaHl2mT0VM8p5eckz1nl5CykCXh2aGu0VvlzJLKcauC1XXmU4Xmjb72MHur3
qNxVreMXTI0sThS389QrE/uGcueI58tOdK3E9qr6cIJzLA1eqroFrqR9x1bT
lBdbPK4KsHZKZHGlGjU7stwpqP8VWX/U/1WN6e53oR7f27G44V5PRqBfQeoF
1sOW+JksQn+ivAIvDq0Hqm++hz6TZr1MPa0b32oG/pVvve1nqJ7aC8kE90Av
d5/yfVL9Xu/Z+MOs/Uj7Am9Ct8bmi9D6lfxf5DvDFE+B1dkRvmfVsAOR8epx
axUTgfXUU5HtU73sXGT+BuH/58hs1PvW+/86EFqeKF/OonelrC6Ux+eh0PLu
IPqnyPZ23uub/Mhfv9je98f/hZTFaw24TrGdX1ufI7R2RWgzjOajEomd25vg
TqrViZ2R5o1aseXQt/j7BSmpO4st14rhZyH6t5TVzaqqKzx3CmxOOALXHnwY
PSA2PQ7fJz2uZP8qduXBp+GyYsO/p4xXPq5B34jMj2aMzbwrFFp+pfOcF9i8
UdznS82QG/ysNoZ2pzp/3YPOQbHTRnftc47mKM1db4E7wx2LLNc0/+icxXdL
rPaqjz+r2SFltV5z41VwTXDN2GZL1XslwVe+T83AKz1/Nc8pRhVjzbVfn3M0
IykOVccueD9V/VkZ2Zmot5xKWb/SXb+A3s3z3x4bLXy+Ui/TXK0Yv5yy+Uu1
9KXQ5kndb25ifUHz+TSf/RT/fRPrZ6oPyvdc75vtEpu9Nav/o29GVmuHJ/Z9
9Sb1RtVk3ZHuSvOY6uRa8LLI+kh1n1e3sHYYa7eicwKbXzWbqZddxH+12Grz
WXCEXafQ6vNAnxXVo895jN3xGVW9YFRi96B6onqf6/W5C/qS/g9Yf/pKymq6
7quX72eo8jFlfVexXTm2/vk93KDYYixm7SWvgcopzRKa95Yrr1O2T83Dq7z+
qw+0iq3GJ/jvC+4Cn7+Q9cr8ms0iyyfFeanQvqs+/wP+rim34cNCloOab6/5
+ajHnQH/D8aYdX4=
            "]], 
           Polygon[CompressedData["
1:eJwtmHm4llUVxd97GM6F73tlhgQEQZB5CBBQBnEAHFBUCFGQydS0gUEezcon
S03NTMtMyzE1SiWRcgRRBhlFVHAKJUcEFdMEBEW09XvW/mPfe9aZvnP22Xvt
vd8OM2ae9qNUFMX4mqKoq/8vVoviBcm9uSj+Krld8i31N9OkLeofWxbFnWof
rb4tGjte+C7hAayN+bdJXtXc12KvbhpvXXhP+vol78ncV4RflvxJ7T9LXlK7
vsYP0HjHSlG8KdxI+CDhv2XPrSfcsvCaTcJ1hJsI/074v8LthdsLPyC8Q3iM
cJvC91ki3EC4gfBlwvslX0ku1D3mSv6n8UM13qrweWZLpJpip/5slbwv2SbR
0YrLNfac5u8XbizcoeI9Nmr9cYX3flrjH2pc/4o5ws+r0V3jTYXvEX5fuG3c
52bhbcKthNsJ3yr8H+GWwi2EbxL+pOo7crf5ko/YX/IXte+WvKP225I71b4r
u90s9E3ffdm6QUfvxdoOah9YeA/O8EfJ1qrP9oGkY+j3DvVP1v0mSc7UXSdJ
+qh9mcZ7aHxZto00SbYB3neqxheHvXwkPE74fuHDhDcJHyv8e+HBwq8K1xWe
KYxR/kBylH5jhKSr+rtJ6khGqv9Y9pTMEX5R/0dr/Zda/4bkdcl49X8nZL7G
hxQeO0v4UfYV/lD4U3QquUD935ecI/kudqC+zySl2tXSZ+As56m9QuuHa/3W
7LlPCp9YeA1970nOLT2XPegvamVHtf6N1Zy/8G8P0J79JQ3VX5GcLLlX40do
fLPGd0qf44U7CC8Qbqvxc4UPEf6XcF/hK4S/Lbw2e82/JSfFXtO091RJRb9d
lWzWfhXNb6v585gr3EX4YOE+Fb/tGuGTCr/xCcK3Cg8VHiv8huY3FW4kfKPW
d0Rvwhewh9qDJNeofTVvrPY7mjMMW0dHpe/wILqt+m6Pqv0INln6vQ/S/0/k
L720ZiX+LDkG39fYGI31kPxE7b7qW62x4cIfaP52yUPJPoAdp9L20Qg96P+h
mv9Yts1yr7rSRb1a6wBugWPQzWzNf17tseprUGtuwLawMTjip8L1hffo99Zo
/i+zuWBb8MMt2bpBR29p/O/ZvjxY+JuY3xBb0dxnquYT+KGO+i7U2FP4d435
r502vjibl3eob1nVNjuCt0+25Wuy58KZK2Ic275Z+BiN7xIeKfw4/lLaNg7H
l5Nt5P7g9wHCX1btg4OEH072TXwW370dHyvt13AjHAnHX5HNbV/qfOur5qjm
ws2TuesF4f5wKZxY+g7cRc3iIo1dHefnzsur9h3s5elkH6qvNxhV+E14m33Z
vrcSfhDeHfd7TnhmaV/GXpYn+/QlwvVif3TLnuy9VPK90hwNV6+Dc4SnSOen
xHvDLR/H/fFxfJ3f5LdXSX5YmivhZjgazrwy+27ccWnYdyfhE4k5Glgi3K2w
v8Ar3Svm/nbCH1dtj/hmT+HdwtM05wm1F0lmxHvwvnAY3Iov4bvHJfsUOkAX
J6tvsvZ+LZtbb1PfKHwlmwsfFB4h3KniWERMJDbu1fge/Ed6ryP5Qn0DIx4R
f/cLD414QXxZJ+mu9o/V17O0Te+K+IitH1uxr/4MjtL4r8M/8J9VVQttfOoX
GlspXGpuM+E/ZNsEb8cbtq1YpzsiV2kjvCHiv45aXKv5s0rrgLufJRlSmovg
pKFqr8NYk9/o4IrjHfqvUd+zGrsuO5YT09cKr5Z8UWObxraZ802N35216BBd
LiCmqL1Kfb01dxacU9rH8DVyJnKnt7O5lDflbYlT85L5bYLap0d8fEAyUe2X
s2MlfYy9lZ1r3S18ivB24RPCHuCDFZE/5eQ4jM/he3A4XL4zO/bA8XA9sZJY
wxk4yyvCA4WvFx5WOp7hb/cJnyb8UHYsmsAblT4DZ4HfT8X2NN5P478hRgmP
rjg2EaMGl74jd8VH39XcJyRdiDXkKBp7PJurJ3J+fJUYIzwFm4MPJKMiXpH/
cF50hG7g/690/31Vn3Nhdn6JLtAJuSUxkvOcLdyqdPzqIHlW/esli+JMnGVa
zJmu/2uy13YSviWZ0zZkC3fmroz1l/QLniUWkxORG03VmpalYyL22BNO01hn
4esiPxlT8dpLkzmaPXoL9yrNo+TXrUvvxZ7Ls89+fsR/7rA28lFSjl+FvWLb
2Dy2vyb8DR9sX7G99lF7nMYPKJ3T4rv48N4a2/++GvM7mBjaWeNzIrYS8+Ey
OG2YFrYpfUbOtiLiOvnKefBlvDFvPSlZr8QM9uY38CtsCts6XdKitA/NTT4j
Z0UXl4T+0clerR8U8R3bWRD2eZj69oQt0KYPmxio9Vcl+9DG7HzyGOF/ZudT
5J+c85ns/AOdjE326VXRR25Cjsrcz7X/qck6QTdNS+uyT+QnT2VzPlxPLtkk
7t8lzttF+KbkmEvshfP7Juck8+JM5HrkvJyVHLhr+Bm2152cJJnj4XrGLk72
QeagQ3QJRw+p2CfQA3puHjI52ccWhv13Vfso9X1ddb1ADkPuAmnCAfg5cRpu
IM8iHgxL1iNzhifXGKytET487vuPbB1cFOdBN+iI+HBGsu6oZw5JrjmoPS7N
tmVsmloLG/46bAXbpqajtuuRXLuS/1Frsgd7wTlwz5X4VOkYhm7RMbFtYfDL
kOCOR0Lf2Cy2+1jwUa/kt14f/EbOC3fg93AdPtw59idWtkiuXcmXGwcXb4lY
gh/hX7trXGOST8FRcBUxj9jXW/j1yKfIL/aFLzJOLPqsxrGSmpfaDH19WnUO
QS5BfUedOD/yg87JtePc7FyTnJPa9KrIV+CHjVXndOR21ATUBjdkx1ZiLLU2
OQa5xvGSXdWw4cJvjC8+GfkN49QzcDbcDWfBC+QM5A4HJteqW6I+JV9GV/At
3DwjmX/JKcgt8Hl8/13NaZ0co4nV6Khhsk7QzcPx/tSHuXSdjC2OEK5Xujbg
97FZbPfFiKc/T+ZacmByYTgD7mAP9sL/akv7Abk898W28Vl8b3ayL68OPoWz
qFWoOeH2a4WPKO2zcBf3wZcXh79x33alawZ0gU6o3TdHfL48ObaQQ5FLESOI
Fb+NfAWdbK+ad4kN1OQDSnMCsYT5cMVL2bGHGERutCLwOcncvSnyDfIlarmt
8f2BbxJ8m6BOHZ185sXBb/gyHNO4dA5ELkSOQa5BPrYhOYf/PNseeZN6EcvJ
wZfG+MSKa5Ybk2scapmjY0/2opYh5yXXIefZIfxmdj5FfjOydI57R8RP7k49
vyw536CWhCPgCr7B8C1musaXJNcc1KqckbNwprNL1+jchTudWTonW5ica5Bz
sCc1ArUBv8X3kfXJNQnnnVI61+OMnJUag7qBupLagza1xOjCfdQs1C5jCufh
fNNgjDnnx++TG5KTjZO+zhC+QfhI4W3Z3xfYg7V7Q2foblKcjZyY3DjLqWtr
fWdyUnLR6eEPxFXyRr7t4eP4Mj49WOuuD76BD8i9yamxFWyGPIwzcBZqcmrz
I4Mf4Uy4kxqS2pQahlqGHJM9WEsuR42En8HD1E7U3NRi1GR8x2AMX4SjmQOn
w+34CLksNdKi0P+Eit+TGpGaYFbYHLbHNxe+veCT7MFafJXYdk/YAzGO73mc
gd/mWwo+QQ5B7oCvwHENw4/hvv8DGDOebA==
            "]], 
           Polygon[CompressedData["
1:eJw1lnmYT2UUx+9MTXdyfxcVCmOZMWPfxzpmIzL7ljEo0ijSokz2JaMYZafN
UlGoKDyhp+zMDNkJ7U/WNtUYJiZR6nOec/rj8zzf+z3nvfddzvu+Nzz/6ZwR
wY7jFEEINPYcpybG3VALTgUcJyjUcdKIFfO8Gypcx/kFNqIPQjKxmzzPg7kS
o01D/LfQP6F/hJ+hHl5T3t8V+qFz4H6403ecPnifoBPR3aEH/ECbBnj1Icza
RuI3gihYjJeKVwN9F9SEgXgxeOnwBvo1eB16E7vXVy3eQkghZw59nA2L4B68
89JX6TfcgP14/Wn3LX41dFWoAlG0vWDjbIb+Ff0bNPH0PWfQZ+Gc5ND+Mbx4
YuHoCPiXd6cyb9vwt8Lvrs7Bp+gtsBkGkfcwDIZ82IGXS04IOhHdXcYF0Xi9
8Jail8Aim5cWEIVuAo3hMn2JJ+8jmXdPxyhjPQHH4Qy8LzFyesIm9Mfwss3V
IeIHoTd6Jl4COa3QLdFZkA2VfCMV/210JrGz5J+DNLxVeN+jy+Ai5Mq6Q19Y
K/VAfj24HOQ4AZ592GPvW4F+B5ZDBjnJMBfdjVgsxIEHyXhJcB90sHmROklD
n+Kbp2E4XileP7y/eL7uat3XsPWVdT7NdzPIS4dM63sWOQPQ69Hr4EPrcwI8
g34FXpX5Jqe/p7XzJPopGOHrd/fKmKAE8myNItFlfO8ilEMyeUmQYvMo4y3G
L2NextDXGfCiq98dSXw0jJI19rXu30Qvk/0n84A3mtxRsFNqlHfU9bR/B4gv
gPlW47ssXkDuNJhu6/Ye8Xdhpc1Btqd1kkUsG3KgGYzHGwdjpDbJCeXcyKTG
j/J8BAbineQbt6Ibob9Afwnt0N3w4iAW/sHbD3/Tlwae7k/Zp+NgLOy2uQgj
NsT2RV/0VWKVMAh9DG8ksdvpQxVYiL8ALtG2KbEVNj4Z5yG8m7yvIe1uohOI
r8XfDFvgO7zWeG3As70/E/8lKCFWXfYI+hq6K7oLdIK2nq6TrNdxG3cE3p/o
jlKf0B5ae1qXUp8XXD0HZe9PQk+EfTYXRehbGEs6c7qPnM/gmtWv1PFtoTru
Al/nZRd6J2z//9wgnkHbwzwfggc8PWPlXF4qex9WQ3Xa5so4iG/neQf8QV4F
XAlorLOnZ11tdF2oY2fnKnJXwiZIkXMtoHMeIWsuZyW09PSOqGNtw+0MDdC/
bPq3gefjMBjvqK2XtDmG/hwipbbwTgR0TRfa/Dp4QRBi9TUBf7z0n1gl8zcV
XY2xFRB/Vs4nWSc5A4i3RbeTcdm6FZI7Bea7+q3tsmaejsnlHaFSW76uZbTU
BrF15K6HFr7uR9mXE6GHnAWyjtAT/bx8g5xeptuh20M0VPX1TpS7McP6t412
W6G+3SNxnup89BAYHqx3yx5ySuGkq2djPV/XMk/2B/SxdXuO+GQ4TN+D8Wah
Y/EfRQ+DoRAm96XkytzLOQ+tfT135+FdYj7Lg/QbS2i/GJrbWSb3THP8yehJ
MMHmIID3OPoJGAuJnn73EXRtYnWgrq/znIqXLue21dBeW8P6nu472X8bYYOc
a66+Q/os/xb9pbZhANyB9zVtv4JvbK1kv9Wyf4Vu6F1ypkCS3Wtd5D0Q4+vZ
FIN3nbY3ZB9CCbnF0IF4EbGj1l7ec8DVOWvj610h99p5vHI5e1w9X+Telvs7
Xva/p3doK6s/qcOr5CwndxmscfX7ciYO431DpQbs/sqzcTwk5wU8GKz/PtKv
QvRUmCF3AF5H66voTujOcMTWP9zT/zb5f5P7t4J5vgpXoDSg8zKLvDkwO1jv
fandF9DTYZrVs9TLFPtuoc2BI/868g/p67na3u6P1egPYE2w/m/8B6ucSUE=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtl3nQj1UUxx/vU3rydH8iSzGyJluUoZS2KaOhRmJskX3flyyvfffy2vfl
te8hVISkZaZ1WkfEVFSMpSjDJEn0+Trnjzvf7z333Pu7z7ln+5Xt2K9J36wo
iu7NF0UxWDETRXsgK9Mo6sa4wOKkEEWlkihqwXoxsCSjFbwaeH9iOpPRacq+
UcibCRlT4MdYm8A5zZkfCb6GvDX4EmM8vAV4EL2m8MB5h5xLlmF+FBzK3u/A
V5AfybK11ro368edX82ye54ER6PfOTU+BN6Y38hGpxHYFfk55OORd0jt/GHw
0omdr9+pAW8ve4AddX94Eec/sD4c/bacNQb5eHAc8hHwNujUZz4U/jS4ljEH
Pg7MYUyETwaro9cJ3pN9E5lPhY8F/+TsbvBL4ADmufBBYD/GJPhgsBd7XwXP
c4fDWWbnFcy7JWbPGZzZx/W174zb7RT4FDrF9Dbsvca8C/Ir4MPIBsBrgW0Y
g+EvgzXcbrVj+x591+Ngd37jIvumc0495gORPyPbxmaHzuA0/y59XyfnPcCe
she8O9jBbfgE2CU1m1fijif8bqfBX/x99ea70VsA3wWuYiyBvw++w1gI3wfm
MabDl4JrOHMlfG1ib90MXgg+hrGM9Qz+vgichXyJ/DExvghcor3I7kRnMN95
OcveawFjBjqj0Jmf2F3Ko/Omn7NTPo7+z+h3QrcvowCyFcgWMWJ4b2R5qd15
DmdsSO07qnHODnA+8u3ga4x58M3g8MS+axK42v1qr/wqsfXi7F3BOW/Ay8Br
ylfQeVDnuS/NBS9yh2xwZmpvrLduwhnDmFdjvifYHu19MrH4HQ5vCX+Ltcry
A2RzUvPlH5F9znhOb4msEL/9tueQ6an56jnWD3qOGI9sLKMh/AtkrzNKwgch
m5Ka73yE7DijnfwY2algPj0VfhW+Ab4Ufgk+Et4/sbhQbmkHvoe8DvLG8N+D
xxL68xkz4fm4YwF/+0V6h9Rskx/ZDfRzZffU4krxNZBzyjFawu8G16NTWL8r
e8MrwesjvyO2+NV73yZfh98OZsXmz4q5gonlN+WZhcHW5A8Zzz9lwL9Y6w6/
kWX7dU5BsDBrbeHlE+PKRdnB9K4zRsAfQ55BdzW8gcfai7HZ/HnwK9kstTj+
BD7a37cV+z4Llr/0jtJRXH4cbL/O6ZxYrtM5XyonM5r4m76gN4zsXZVntedr
36v5N/BGiem0TsxfdKbuWNpzy32x2UX2UR1QzlIOGMPe82BX5DXZO5jfK6sY
8DzfTnuRn3Ud6Sqf/AaODXaObKsc3wv5P8znBntT6YxzG8rmdRKL0X7wW8GK
zivEdq5qx0T0e6SWp2fAS7DWR/EClmP00DvGFiv63qrKn4nFlHxStbUDvAq8
kMda8dhyhvxE+a+H59hpnD8wtfUcvV2wmqfccpfn7aKKh2A+1wf5KMaz8E+R
HfIYmeXxrtq7H9nw1PL9gWCx/wB8d7B1xVF7t7POb5hYTnhIuTYY6rv0nv1S
87dVyLe5LRTLDRI7c6/ra/8++CPIU+WHYDrD1DOopvmbbg/mL6o7zZF/6z4m
n1kMzw+vlVgdVyyUhQ9JzXd2sP4B41H4CGTVFaOR5TXp6A13sr7LY1Z5rG5i
76X4rerfpfu293yi3KIcrjvnBatPqlO6w0TvbQ673WTf74PJ1dcchZ9m9Pbc
NVc5Dv5T8FjinGmp9Q2qm13Bycy7yBfQyUmtTp5wrvr5K/wMo7/nNNlT/lkP
POZ9iXJmK3BCZGet83wom+i9lEvWIFvm9pTPjHaf2ep5V/Vadbukx6ZitHZi
+U15Lzu1vuBDt7fqSN3YfFU9xibkmz1PDkgtL3VULHgMqu+YF6zfVB0fA15h
vj62GndBfhlbP7NU9Vq9BLhKeRm+SnkyWK8p3z7pdpYNE/L4QvhI+DzGcvVI
idUN1dxN4Fm3oeyf4+cvS6wub0VeImN9jnJLBeQVvK6pN1ieWp0vjSzXe4Nq
7sOK+9n6Dvhq9m5EXjRjNVv3X4t8P7wSshn6PXTyEqtNs5DHyJf5HUrCs/UN
qifwvon1dfqu1L9R9WsbOBP5FrCU5yLluJt74VPBmYn1FKXY9672RXaPDYnd
cx3nLE6tbwroLEhMZ01ifYW4ZLqbfucedGbHdh/V1OXee5RFXixj77jUa6vu
f0vG/i/ov0MJ/WZq/VqRjPWlnSLri6swPxDbfdSDqadSX6ZarH7ssvcv6oVG
gH+7n6ifqex7defrwXpQ1fGb9Vy9cWw9ifroP4L1geq1csHZqfXg14LlT/Wz
W4L1e3qXLM7eGDznev+jWP4vWFzrPurR9N9BtXh+sDPV+/8bzLbqOQtzzv+2
obBD
            "]], 
           Polygon[CompressedData["
1:eJw1mHf81lUVx788F/Obj/cBRVKcTIlRDkzTLJPEVY4IVEBA9o+9Ym9B9gaF
nzIEWWquHJm7vacz0xQUxVyVopZZfd58Tn+c13PPOfd7xxmfc+7Tov/orqMq
RVF0a1AUDfX79bIoLhbdlovidtETok6pKL4t3Tcl/0HIGHcVPaRxe+k7iE4R
bRXfSL/DNP/L0t8n/l7RNzS+RPSIxr2kv0bjfqKHs7+7VOPLQjZT3/ZOnvsd
0RkaT5VsZtVzOAtn4ts7RedoPFGyb0n3Q/FfED9F/JXie4p6iH4s+U9EvxSd
K/1s6QdI/l3xLcW3Sj7nLdl34OxfEW3T+CzpRmj+ueJ3it8hukDjC+NO46Vr
l3zXmaK9MuiVkh1X2oadpRsXtv1R9hk521Wi80SjpTtRc76Xfd5p4ruI/7n4
X4suTt7jktgPW/4qdJM0XiLdWs05tFYUv5DsQo0n49PSdx6YvCZr/5S7iZ8l
vr/4WeJf13kHiT9F/Grx/xQ/Unxn8b1F09lb3/xWusdEj4qmyBdTRZ2kP1W0
UbJNojtEx2vuqPi+i2iMxlmyDdLdKKoXfUnys0V3a9xGuklxXtY4RPyQwmtz
J+52vaim8TrpP6l4/a9Jf4P4htINjvOfKRqqcQO+kW6tqCDe9HOSdJvFH5Rs
8zPErxLfVPxY8ROq/v6LohWSr4yzshZrcmZkzYNn7lLx7+s8fcXX6fvl4pcR
g9KdXnr8XsX3QbZFfGN931/8WaXP+N+K92S9B8V3TLZZl7AfMUJsoLtO9Kbm
95N+iPabK/7tin3QKYi93q1Yd63oHY37SDa46hhvFfFIHF1ROldOkuwB6eZj
E/FbxDeVvX+THYvEzxx9v0D8UeIHiD9Hc8eK5mu8XrJGmt+u9Nk44xzNXSg6
Urrhkn1Vuj9mxxIx1ae0D/ElMXOPdN8XtY34vYi1xf9da/UQ37Z0DnF27nCX
dIPEXws2if9d9n26i36v8aWSLYozsDf5y5zLJB9Y+tsns8/EWfqKDtMdZkq/
UmvOFX+Q+KXil4kO1ri96HGN10t/A/4n/0QtJW8laqxxN+me05knZfuF2CRG
yZG2mvOwxpsl2yp7Hiv+NnJD/DLNPa5mGePlojmi2aLjJTsh9rif2C689/kR
72AYWMY3fLuBnBR9tuY92esW0Wmlc4GcWK/5WyS7GSI2wwYzwNJk28zkHOJX
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
            "]], 
           Polygon[CompressedData["
1:eJwtlnlUV0UYhm8gefXnJcU13HAPl/zHpdJSS620xSw1W9wVt8ByQxFUVhEV
wQAFQUBAc8Mtl8qyU6e9zmk9WamltptatrhlPe+Z74/nnPe+883cuTPzfXPb
TUoYGR/meV4mRMCqwPP+wJgR8rzV6DWwyfe8MtoOhHvei/A8z8W0V6Mv0X4Z
rkB4pOfl4hXQlkxMCmxCH8TrSFsn6Awd8TvASnvXdGJ+Q88jbhX6HPo8LEUP
xRsIg+A9e0ceei2s0VyIeQZuRK+nfQMUa954iXgX0L/rPTAXryVeW2gDO/Fu
ZR49YCu6Gd4AdC26A7o9xMC8kBtvEToJFsM/xLRjLnvRZbQV0K9Q40Ala1WO
fxRqaJsNYehrfOu/UETf7bANdsA9tCUTUwWvomMZt5pxanz3jv14+2APlBLT
CL8hLKTvMcabiJcEt9PeD+6AKtqqiClnLkd4fgU2E/MsRKGraa+BLRBN3M2Q
gb7AeF3Qk4k7ib4CVyE5cN8RTt8IqAOFePmB+yZ92yWYRcybeI/TPhamQmbI
rY3WqNJ339iV76rQ+WB+L/P8ElSE3Hu/ZZzTcAqWMFaifWck8TFaE9iIF9Cn
AdSHePpl2vzj0F2J6QZr8XIhT/tle5lle/0cegU6O3Cx6lOOjtQaak2YYwuI
hh14JcS3RbeBGNt77cdi+nzNe6PsXOt8V9g4CbRXojdDLP4t0Mt357UErxRd
yhrs5rlWZ9ry4hzjnYeLlotlilUuQsi+VzlYg94KW6AZc4qCEvRSxsmBVXCV
Phl46bBMuRNya6i1TKftLO+YhteC5+awDO8XvPboXPwl9LmI9yf8BU3wG8Mi
++5JxHyEHk7ccvRTtD0NnaETJNF2nbie6OU29tSQWwutifo+SN8HYJjmaOf5
NvRrtB2F1+GI8hWvJ/SGRcRMpP8EmOO7eX5OzMPoh+BJGIn3Gd4H8D58aPPU
O95GT0BPhDthCd47lo8p6LH0fwL+1rrjbcBL5TkNTuNNwpsMM2AFbV/gjUA/
AmO03njNiG0KC2g7w3e3RreCltBdY+PND9w6J9PnBM/Hw9x37AlcnVK96gQL
iFkIsehuyiHVY2IGMc5AGOG7NVPu90H31rpYvr8QuNxvjG4KTcyrtbyYT9sw
4ofDOvRKOy86N/8Frj42RDeC5pY7Wqsh6MFwt9WwA3g90PczzigYDTND7jtz
AldrVXNT8R4lbhQ8ZnuUrVqunNH5hh8DV9vrouuBbzmTozqGnqt5wE+BqwfK
i76MPRiG6DvwWuG1hstWm84Gbmy9Y77dN8p5395xk+VsHfJonc4Y42QrJ+Eb
nXc4Dlm05RH3JXq07fUx9FfKNfQ4vFRIg5OqkdYnX/VCOeG7XC3F2wjFsJ62
dNUO9GF51IVii1WfDN/ducrzG8CDMLtzdQ/qHdk6i6q5Nr9reJWq/cpNy33d
yYdUI3TOtaeRbs9z0Ku1JnCdfuN53zjfrZnu5lm+W/s56J+Vx/Cr7dtsvDPo
7+GHwO2vcu9j9CfwaeBqgmrDNN/Fa38T0PHKXd2feCHmcgp/FnomTLfcmkr7
FO2DvV97rj0q0LdrXaFQ/wF4EVDX9k9eUciN7ePVg/rQn7H6wVDVZMsj5bXy
u8h3/yxaF51n1RvVne6QyFjf4cWhp8EUyMKbTp84WG3/Hfo/UK5q7L3ofbBf
9yIxY3xXK3Ru0kLuP+de5QzcB+/aGRpv9UV15oT9v0Sj74IBsAvvEByEw5Z3
ml+J7keOxzbluNZP9cbusI205/Gcb94uvJ2wPdzdb28wTl90H+gFi/EC4hpA
pN0tOqe7ieuC7gwdrTZpnYtUJxVje/lW4P7d9A/XP9zV2BSrhVNC7n7QPfE/
OO1WcQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
TVPczsZexO8auBbf+R8lpBHw
            "]], 
           Polygon[CompressedData["
1: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
P0v+uyTXcBbORM75DHrLO4M=
            "]], 
           Polygon[CompressedData["
1:eJwtlndYV2UUx6/w8+mH127TXC0rRwMUULRMRMRsOtDcKy1zBVqZmuZIpdQ0
zVHmSNNEtoggCLIEFExjFJiCiTlSrEQMzbT8nN7zx+d5vvd7zvve95533VZj
w0PDPCzLioCG8KNtWW+7LGsiTIAEx7Ie8bKsh8EfvsMrxFsEC2ExPItXQLs9
bstKgi54xzwtKxN9GP814v2hH6wjVgRL0C3pry20g5V4IXhF5K9CfwEVUC59
wRZivxKLRy9H/2KbMcnYgqCWscfgR8MFYmXkfY0+jfYm7gP5eHlQoO8/SSwH
2qBn4M2EWfI95P5Bf5vxN8FTPK/BXw1rYTpeBe2a4j8ArWA13lFiP+tYzxD3
xfeD6XgP4j0Ej0MWsVO2abOLWCLslvdq3WKI5VG7fAihfR1jWUFuPFyyzTu+
RW+Fb7QuhyAIvYTYUlgGf9P+OnjQxzDJxdsOI9AjYRyU0i6XnBzwJ3aJ9x9G
N6CNBcXER5G3hVgVejH6E4iAA3hzoT3aR+oEubIO8FaiV0E4lOO56MsTytDj
dV0lay2P2aaOUs+f0JPwYojFQhzMB1+8PGJ/MbZ6mIfXB68vPK3vnY3XGv0E
PAbZug42ojfAeqi2zZp8FT0VpsGX5Jy1zdqulO+Ek1Ci375V6g3bHLM/ZPw7
0VEQDTWM5yJcc5s5+EzWHgxFD4FBsjZod4v4TWjsZb5xOTlXea6DFbr+C8n7
wTbztRFvE2zWsYzGewPG6HxI3nCdyxE6v//Q1w23meexeHfInlUtc70DHQkb
HLMfZV8O1vHlQyd0ZwiABVp7f7QfdJA5JyeV/vfCITjDevEmpyvv+ZMls52c
bZLLczr+PPRcmAPHaRtHm1hoT+wgbSPlvEHfRTwdfY7Yeeig8Wh0BuwXZJ2Q
N4nYZJgCA+WbybsB12EPOYPwXofBsgfUi4Ij6N/gAnQi9go0oj8bzuMlkjME
rx59DW5BMp4fXiE6njFkQTZMwGtCu/vhXsggLw280HdCY3jLMTXtqPtD9snH
eONkPuBNXddS01L6LIEUtCXzLGcBzxVw2m2++x3H1Ooe9N3gwD7bnBNyXhTD
VcY5QGqHLnCb77mJV44eqlq+aRh6OIyBf/H+g4b0l0osGK+S5yqohgTb1F/m
4Xlix/Fi8ZJkP2qt6vW9Uuej6BIoho5ytuFdRl+EGuir8yZzU0afp6AaJjqm
blK/+7SmAXilsg5sc0b9f1ah2xJ/EtrJ2idnl23WYk+ZK3KKFNHyjS7yTsi6
1fqOxBsFoyEMWuKdJV4LV3StNcVrDs209tK2AdoTPHSOqsithEtuc4/IWELg
lNatF/oFx9RK5qYfuj+EQgptkqGbnDfEDrjNGnLTzzPgDeMdczYEortDL70j
5bzvge4JwXrmSJ1r6acOrkAfvAxYKOsO5sv5Rk4m3n7IggXqdWa//k5pvpLz
UM5QntOIp8I++Ej3bzf8y+RFyRko+wbvZcfMq8zvOd1HJXjFMneOuYfl3E3X
fk6gm9NPC7iIjpU4sR48B+udKXdnoJeJnSb2IvSGl/SskHUvd8Vk9PdyZ3ma
8zRDv6kJbVtDG9hFXRPAV/fxTtvsYdnLwTpX8XKvwizazoYPIYVYhGP+bw7a
5i6VO1W8rnjPQReX+feR+2OHrBOY4jL/SHNk7tG9YYCMk5ypeOEwTddcpm3W
n/wbyD9CC/UCdU3E2WYfy37urutY9miQ1Msx/1LL8JbCpy7zT/Mo3/w5OhJq
mKsAnpPIe4/ndyHMZe5k+d6Z6klsr2P+S9ag18Fal/mnkXt6BvoDeN9l/n3k
X2AROptYDuSCzXsaQTMvE5P/g92MOxF8dB+nodfL+Ux8IITCEfq6DRqcino=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1l2eMVVUQx+/bfY/dy7vsoUrvva5AAAFpSlUEBKRIkQCyShcUCGCB0JEm
SAvRDyaG+AUhEBKEiCJEgkpEJQQTiRqKIL0sHX//zPjhZP5n7sw5c86ZdmuP
nTZwak4URTVSUZQLXRCiaH0mipomUVSHMRU8C14+uDK4LXguYya4LrxmjK7o
noqjaA78GfB3g+dCG8P/IjbdSszb8b0eeBb4XXBD8FLwcnAFxpV0FD3MRtF8
eB3R3QbdxHgGvBG6wW07zpql0K0OfwO4pfTh58lmcBr8Hvw60MrIVIOWZJQF
50MzjArgPOiDtMmkwFfB5cDXofcYAfwbtGzG+KWhp5jngX+FTmCPDPgONheB
T8NLs/8t5j/pLAXYjk5FZNpmzA7tpbvoxKidsjvNc3tKQR+jlwU/hOYwLwOO
oHfcnirgAkYpcAJtwZm7gX9n/1rMy4NrQLOMquAy0FaJ3eU2bPtI7wB/HfQg
OouhS+EHZFqBe4NbQmsi0w76GTIDoKPgN4fWg98aWugykj2GbTH4OHS4v/s+
8Gvo/gC9wz0MBT/hKF+mzXdaIvMOtCf8PfDOIzNH50mZf+yLTUZvXR/b5sH7
ABv2Mp+t9wU/lzEf6JqxdbX+buh05s1T5rt/+Hvp3V5k3hD8MrSPY/F2xbbv
Aegat20VdAt7bIWehj8Y3Bv8CbhRYj55VOeL7S7X8/1DxQf8ldCtrvs0so0T
W28NvBv4RoTMcPQ6uA+M1j0onsDdoV0Uf+Ae0Gb+jk0UM4zW4I+hL/kZ+0M3
su4Gj9kl0DYpe9c5sfnJsthsWA1vHbKX08a/CW0fLE6yfK/rNtTP2H5NZQvf
Y77VVByCE3BDcGdwI/fbBi4r3W2x6Qs3db7W6op8afexnv6OuqtDsdmueB8B
7c63FvJxnSW29ddDN8fmb9s99mVDp2A+qtjqBe7BGKb7SizPyE8W+r7y2T7B
7JNtT8Ern9gdD4RfVnEEHhCMr3cYBC4JrqZ4QW84874Z0x0DHqx4BjdhtEfm
R2ReDxYDsqEGY5zeCl5Hf1O9bTc/o85VKbH4GhkMyzdHB7szvftqZIa671Xg
+zC3oSK4XzAfKpNYHlQsyD938q63cbMd0OaJ5c5FweJIvq3YqgWeBH8m/J3M
p4Fngyd7XEzMWP4X/234UxkTFPPwjiHfBZmTsenK376BbsnYPWyWX/v6M4Ld
i/infV+t/ZZqBfOL2FgGXJiY3mbwWXgJ8pegfzsWr8h9+03FNbrPpyy+Lnj+
OQd9A/0FGYtl3b/iWvH9iueWodDDzDsrh0OXuHwDZI/EFrur4C3MWIwvgi4O
Fnv7+T7Pa5xq3wnmnVLGVy1bBn8l35cr7lNW2w66zC9eE5XHJijHJmb/GfjV
wCPhTw6GR4Engau7/0wBF7m/VUks/2ivFfA+j+29VHN154XgPbH5pOJ9bTA/
kD/0gF8vWP3L5fs1ctFBvp0rsPwvP1+LzH3453XvyL7K/Aj4OjIPsvZepYPF
nOraitj4equy8Mcwz4E/GfozvJKqTdDyiquM1WjVLeWfWci8EFs+HOF4L7L/
sFeHYPlIeSmdWN1uBG9abLaFYDlf55K/9/cYUywUZ61u5/gdjoXfF5xKrI4v
1J7gR8jUDCavep4LPgB95LEzJTa/Uk/ymHEDXqVgNUu1Zph8MFgtVL7qFZs9
smuHrzME3lFwvmIKvEBrqkbKtmB1/UnW+hfdZ8WM5Vjl1Gf5/oC7OIHMePRm
xtYbqLe5gs5d1u+rfOs9T+7/d6tcE2yvKqplseVJ5U/l0SJ/o9Gx3a3saRBM
T/pNHCv3Kgdnmf+lnog9cxLrlWp5n5NCZmRsfPUptYPdrfqXyP3nPnAA9F/O
8hX8q+id9XOpd5J/qHe6VGDvq55nvmKWcQ/dftDLfNvvut96rVdPIT/U2Zqx
16609R6Ks8vIFSPTJzY/l52jlKv4Vj9luT6TeH8UbM1DWp99SiTW67WAfz1r
/n8NfrH3iuoZ93tf8bX3OQ/YayD0sL+13vy294H30b2ZtV7odoHpSFf7jQ2W
mxTXKffJVLAYVD4rAM+OzfeK0T2Ttvv5M211Wb1eVWTGee3b7vemuL5SYH6r
On8X/J3fm85aMlhu1ZuOCNZPqKbI7u8Zt/yt5MMn02Z/LvuOje29FNfTYzuj
+r5HyOcFs+9u1u5NPqZ8oJ5Ha95AZqLnVuVb5f80MuOUq4Pdr2Lhfe9zlAcH
+d3K/yv7P8KjrNVl9STVvC6pto6BjtfaKYv5con1hm2C9bHy/02qdcFqiWrZ
kGC9oGrrp7H1t6rpJYL1jjqLYk156SL2F3oeU08lH1PveqHA3kj/AvonqBjs
X0J2jnHblN/zPY6UG/8DOfp7eA==
            "]], 
           Polygon[CompressedData["
1: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
vgWLdSt6DvAYPoifzIgzn58c09zF/wCJZn0G
            "]], 
           Polygon[CompressedData["
1:eJwtlnlQllUUh19QxNfvk09wBRcEDbUyUVsVcUlNQTBxSdxQQHFBUHDBRBu1
cMsFE1zGlplmqn9bzEmtbBmnzHDGMtMps819w1wRtec39/zxzHfu75577n3v
PefeLyG3OKso3PO8CoiA+ijPq2noeTcDnncf+wE8GQI6n4KBEBP0vCRYgT2T
vlkwG170PW8kXGPMQWJMwB4B6XAebQ/aFeLOxXc6Y/MhF9oTawo+k+Eififx
K8COQx9L/0swDgoY1xYtG3svPp/BELRnIR6tCX2VjNviOy0BrSN0AJ++SWhp
2OkwCtqgDUV7HLs79IZmaFWM3wpvwTDNj88Y7NGQD0eZ91/W2RrfEfRn0z8B
JsJoSEXrD0OgBT4tYbjNm2bx3iTOLmhlMcajzYFp2FNhErQLujkysEdCpvlp
X8bIT/6QC5O1//ZNU7Bz4B3ivw2x5q/9i8Lugd0TkmEwWhY+o+Am33SYb8vB
DuCXqDXofKCPjX1COYA9CJ638xiPloedr3OFYdDL9nK49hxWE7MC3vBdDM07
SjGwB8EAaI7/BcuTNPwmwiTYDJt8d1aKG8IvGvraPmu/M+m7Sm7tZ+yX8AVc
inJ+feifAjnaR/x2EGs7fOC7tSuHsuAF7KFam51bKloX7KZBlw9Vth6tq87q
5AZz3oFT2L/CCYhk3Dn6d2MP1RyQrVpAT4cMyLO8T8HuC/1sriDaFcYeYOy1
gKsJ1cYM+pfS/wj9e2nvg1t2Xv/hl0s7z3d7sA/tFzgOl/EZrjyGs7amywGX
k8rtMcQdC+PgNv3X6X+gb8K+G+X2oBt+XSHJ1rcIbSEshmK0xKBbj9Z1RGeM
toK+8JDbD+3Lz3CbuMn47qR/B32/43sKkrB9jcHeABuhBn6Ek77z34nPSliC
XQaLoDOxFtgaPsTvK/gaHtN5oU2ECbaWBmgR2JHQSPuIVgmbsTfBBuiGzzK0
cliu77M51mOv0R5gf0/8Q9AA7Q7fdBeO2bcVahx+r8Bkq99OUIq9EBbAUnxK
YS52IczWHYXPb8QcFMa+0N4OPdDuEvNv3TXwDwRs7Bz6E+jfzZhPfXefKp86
oH1E+2PojtYELQDREGF39krsV2EVVODTLORia46LcI85jzN+AGvZgk8lHKYd
j999+sMUg/YqCKKdRSvGLodlsATKYA20UB3h8z72e/AJlNge/ISdyhwVtF+D
A7T3KwZ2FaTQd9R35zuf9jwoslxLQKvTWrUetHC0Y/j2Z8zrtNfDQdprdW6w
zs6vC34n0Afit412te59tMigW2sP/JKhJ5zGbzB+5ei7oBc+bdAvqX5Uc1Yn
9+Eqdq3qFWLxyWRsBpyxOh6r+wt9o/JNv5ZrtwLuLbmH33TVuO/yRXtUplyH
l6E3NEeL0Z2q/MWno3Ja3x7hHm7tgc7oodYF9eChTSPmVCiEvyyHdG7nsc/B
GahjHQ/htu2p9ra97ntoCiE7Z/k9HXLvgd6FNtA46N6KTqop1Qs8h09X3We6
O6y2GwZdnSsflZeNTdO8t4gdR7utchifBay1FJZDQ6tV5bRy+3Pf/e9Q7sYz
vgB7FsxUflida0widifoHHL3ge6krdhVUB1ytaX9aKz1qVZC7h7/A+1POA2N
bI4Z9ibrbS5GewZSsPtBrO3BfLR5UGL1qZqutf9BtQF3BtPsHdB7cIO+7+i7
HnD3kHLi0aC782rsfTlE/w9wxP6PrbQ7aQ/938C3vrub1qGthdWW49FoF6yW
Y5Q74Ck3iBlmdazcKNLdAfX4XbHcVS20JE5raGX12xbioF3I/c/SfynlqnJW
NaE3Y7HvakFxWqK1gtYh9ybpbWpmayrB3gbVvvs/pv8s72L/D7P1QAI=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxFl3mwj1UYx98f/V7u6837iiRFyDKWweDad127i+vKvu9LrhZLYy2lmqZt
+tsSLVQk2kgxGKnRUJZUyhJRibJvqc93nmemP955vr/vec45zznn2X5VRxcV
TCsWBMG9mSAojhwWBcEL4OnImmkQ9AmDYGwcBEuyQdAZ/lhOEOQzNgi+AePL
nNf4ePT6w9eBn498Hj4P+SDfLHAh8gLz+4CXoj/O9eui/w6/832dt/kGgtcg
I8Yng0NkLb6HwSWQu11nJ7Ivv58G90MWx7ZdcJuTIDjHXj3hA7jG7DGU8Yns
2Skye/pGZofsWYGcENu56qV2Rq05XHPhVzK+nDULwA/BN4TvE5td5+C3MD4E
/susfbJhJfx9jFfmuwm+wJeC+zGvDPJR9Msib8CXRxbCV0IWZWzeEr+T85wj
xaamcEPRacq3lrGlzGsBPw9+OtxY5DjtB3e3r98isj2ExVUITV5jbjXGxsPX
jf4fuw7fl7US8CXwMHArcHnWnAx+Av0B6F/I2txLyMr8HgvuxfiP/B4uP0F+
wzcMvA/ZPrJzNUb+lrU3PZe1Mel8jzzINxi8H1kavUO6S2yoyN7tsGFEbLaV
Bv8N3xn8BzoHwF1is0G2XOX3XX6fr4NXo5MLPoEciU5JxpaDH8/YnZ0BDwX/
jvwpa+scQZaL7CzVtSa/x4AvZ+3MOvsNZFXmz9AdhuYburfzendsbus2j+Gb
j05v1hkF7gxfnfFq8seM+YfOJ50OyNHo9ELWQOcae0yF/xd50+/2etbW6YLO
/eiU5WvmvpF6vChuKoY2V++qd2yJLJfa3egt5GvlQjuL7jTX3ygP2QT9buDT
+N4hznOePSvC70vsHvNiix3FvnLAr+i9gXwtsbhVbL6PnMu6z4DnICcxZxSy
JTZMQi7K2Bn+ZE515QnGx3veWBxafCnWzzI+hr1ngPOYWwT/HDqT4dZ7/K7T
e4bmn7Pk7+i8Ap4d2fsrjnZkLZa7gk9i70z0Fmds3b9zLKbeZK9Jkdnbw/ea
De4KnhWbXYXgac53A49G/0XWeRhZL7T8UEe5Cp2XtT78Y+AndSb0cz0fKq4U
F3qXO+EbO6/xmei/Cp7LeGvNVy6K7Z3nKa6R3fnmZMyfFoV2J9rjIfQeQXZM
7Y7Ez0JOdb4TfEPPCfWRzeD7gW9yB0We/wch26I3hfEpjE9FPgs/TfP4Fuq8
2j8yO2fE5gN9wVeQS7jHrdxn69h8Sb6xAu6Ux+D2rMWF/Ly4fJh1jsK9576g
PN9VuZG1NsGvhT+eY3l4GTjLnCqM92eNAbHFX0m4epH5fBPkP+h1hB8ZWx7U
eYco/4cW+6uytqb85yKytt9nA+Sg2O6mFGv+kmN+Ln9P+N0IfnBsOtKNUqsH
evdWyMLI/Gok8hF0FqLTWn7iMT4ytFq5AFyAzmB/04GhzVWMNEW/RWxnX8M5
moM/Um1MrOYpvrZl7a31LuOZly+/AfcMrW7rLPKRYR4XI0LL4aoRzVl/gsfg
AmQx5j+Ysffa6Hn4M+QT/u46g/KX7B8cWZ9QpLyVWj3Q+lPly8zfzLwPsHO6
12XpdY0t3x+E/ws5Gv4sslpqviUfk46479CplVpdV+/R02uc1lfPoD6idmr5
RHeZC24Tm09tSgzrbj4FN/S6r1pfwfNhHfBJxoqFltu/dnv2ID9PrLdoG1sd
V02P0Wnj96W4uCc1v1KebJTa/aqvKMXvA8z5IrF8JL9SvyOsXPhWYrW7AP4a
/Mdwg9TbMG+DY3GXGfsAuVq1mPWfCi1+FafiV3m9U+3bCG4f2747ErNBZ6mA
3M7vvfDtYottxXhJnRf+MHxH1fbY3vnDxLDebj34DF+GffPh8r2fU4/R0u2/
qnyfWK+m2rrB4129VmWvazXBVTyHyGfKuo/J1/ajf9LriPKSckkHdCulFp+K
WfUA/VX72GtPYrW5U2znVY+wE66C11nlRvUDquGfwG9LrP/Q2bck9sZ601uJ
5Q3lB+Vw1YouqdVcxU0x8A+J9Tfd4LrHVvN/Tqzuqv7ewdwgtdqv/FPgb6Qc
WMb7NOWZ2HOFcsLFxHo+9X6Xvd9T33UbOjW89o31vNQlsryn3vUscmBs9aRE
av6hPPAua0xE7yV0HkWe5ncQeg/m9Vr250QWy3pr9cbygeusWdzfKIusBD8F
XDuynkb9gHpD8Vf4fcTzj3L7pRy7B+kd0x27L+ldksj6KPUJNTz/KKfKn3uA
zyC/dTvlVw/ElvP3wvWIrcf5zXtm9SG57kv6fTyxGt1dfVqO7S87jib2RrLz
MLhDbL3kV4nlz0L0b+WYLys/347c7bHfOzYfVL+knvRUYvfS221TD7susf8F
ys31uf+tHlOKo9Jes1ULtK/61V2M95SfgU+A/wNtL5jE
            "]], 
           Polygon[CompressedData["
1:eJwtmHm8V2Mex89PnZPf09E5qZAirdKK0r1tupW03ZZ7b+kq3fZFWqSNZB9m
htes/pYYUxONKCXDaDDGEs0whilLKpIlFCXVLZ+37/eP7+s8n+f7PN/zLN/1
aTl1QeX806IoqihEUV19D2ZR1CCJopnCLUMU9cmjqLdoYRpFN4ieFf/FOIqq
GS/+VaKxois1ZnBucy4QfZuZrHPUnqqx32rOh8I/FqOoUvh54T8JD5DM8cLv
Cr8p3Fcy5uj/v1DfBM19T31fxybjbOHTRVVqv66+fyBP1EzjzxWdk9haV+j7
+4KtmfWwl+80fqfGHtL/RwqvFX5EuJ7Gd9D4eerrqrHH1HemcCNRU+Sq7xrx
vtL4/4t3XNRc/bPU11q8SFSu9rPibxTv76Jtsa3vuczOiLN6VPjPwm+JPlJ7
gvqCeM1F09X+UH3/Fq+f1rNA8u9W3zXiXSF8vfBvhacKXyiao/anGv9OZmvu
Ikpy20t7ta8T/6D474pfKnyDcHvJqC/+Ke1/rK/38czulHNaonFLRV+KP0z8
9eL/RfxBua2Bf09zor0QuaLNGrM1tvt8Su0S/199/e9r4UKw/+0U/z/Cg9EV
UYlkTteYl9T3tnhjNKZW/35SeK/wHtF6tc/S2MnifSL8X+F5wvcK3625Vbnp
DLrznmi72r2D3WUn8VPXyWVq31EwXR0ufLPwL4WnCI8Rvkf4PuH5wg9JxiOx
2cM+redl4e3cjegVtU8Wba2s+dXMdJC75s5fUDuXjInivyX8Ymb3wX3l+sd3
mekwuvym+FtdP8bxr9hsCx1D1w6IdmRmM9gO97lL7cNFWxtrXCXcXfPnFkz/
T/p5TRF+Rfy/ZaaDr6r9Wmy62dDX973wx+i6cI3w++xBuI904SrhF4QfEG4i
/qSC3Ql3g86iu9z5Zr/vhcJt9P8DwrHw1cIbxV8j/LnWO1R4tfBK4RGp6ftJ
4f3CB8QfLrxJ+K/CT7t97BI9o3Y7yZstfh3J/0z4SfU/IVrHeNGj6tus79Oi
x9RuG8w2sdETwhe5PWDT2PYn+t9g4Yc1/sHM7hydQpfQhTZ+HifE/9TPhzPj
rI6p7wc//y1qb1Bf4vtFR9CVZtiI8FHhvcKVuekqOnudeKmfH3tkr+9ndhfc
CbozWuNHiRbpnBaLvuEfiekQtn/C/c95ohai77We0eJt4EzE2y2qjW39x3wP
tOnbx/4zO3vuoLn7H9a813lH3T9zXw9nZiOTRcNys50hat8sflv9u65whegu
tf+ovuXi7dGc1sKtROeLyrWH4aLP1f+F+yvssyDeV8Kf6X9DXJ+xPfZ+h3h/
KNgZdNP4Bfh+9R11/cKfvoHPcXtC3/fHFiuG+vpGa3w7yarhHIVLiQ/CpaJJ
7g/miNcT/yZ8p3B1MP6MxHwTPor4QhzoKV6vYGv4QXRpsLVtYV+xxYgzghF3
zN3C20RMiC3GFYP5d+Lbb4QnBrPRl2LzcdguOr/L72dwajaGDOZie93Yk+bf
KP4Vwj2EJwjfIzzG4/Xtwr8SniHcVbjK48lI4f7EcuHbhauEB9Anaq/+i0SX
iMY5n7g+nLsXdVZ/F9GlPmasx376qjX+loKNvVx4nvBt3EEw/cHXTlNfr9zW
ND1YnGatk4KtnT10ym1N/Js1dBQeKRqRm41iq/igJ0SNg/kmYg6xB53tlVp8
uUntgdiI5q3EzkWjyAGKZvPYPjazp2g+Dl83ghxFeLdokNqP4f9El0nGZMm6
VX0jguUM61weuQT+Z4vHi9LUbAbbwed1F64X7O6fcf9EDvBybD4f308fvgs/
wlhyCGIzMZPYucrjETbSLbWYDZ+c47j+39T9DfHvn5npH7q4zf09Z7U7Np/G
mf1L+B3XR/73nMcvcqo6wWIWcSwL5o+QQexIXbeJycRmYkSjYD57k8fvnqnN
3eb2gIznPX7iI7FdYh6xaYrnc7UeT5GxNjP/d6fO+9fqmxVMHypFZbnpLjaK
rT6k8efn5vPwfRs9BrRQX5nmL9GYvhp7JvoqvKJgesx5cxdbPHacyix/xEf0
ET/KrY8284k/bd3v4s9a5qbL6DR6vNb3Tww7or2cJn65+EuF+wWjy0WF3HgX
4kc9vyW/a5WbTGRhG41yW/Mwtz18WKWvH9/WVLin21u58Lm59dFGP89W+yzR
wGD+4VjR7pZ8bjWxQ7y+7j/IwxjbW3hZweYQsznLDR5nW5NDiX9XwfJxbBrb
HqW+tuI1wY4T89FlwWyOfyAbW8R2l3v8w4Y7BIvJxGLy9Vp91+g/14vfA3+k
8fPdf81LzT/UBMtByUWJochC5tDcdARdWSw80McscX84yePWUuHfCc8OFsPo
o32tqA1rTSxmENuG5CYLmQtSkz8zWFxCN6s8nt8v/tLUcgb6aC9LLWde7/ZU
klqNg3/a6jkYMZ24diN+CpvS3M6uL/hhYupQ4eW+njrovfufaZrXILc5/d13
k9N3EX9RwXL9INzV94O+FIVPz00H0UV8/Bi/b+Z3yO0uudOZqdUQ1BLj1K5O
zWfi69a5PiCro9sXMlf7fqkZDhbNJrHNVbHF0DWes1W7/XcMVo81Fu9IZrXi
DOE0sZqRPnhNEouznV3/iWHEsoaiixOzaeyEuDUysT2wF2Qg6wzRoczOhLNp
SK6UWU1AbcCZc47UTp1Fse+bM+FsuiV21tggtlaSmG3iE9h7y8R8BWeMbbIe
zh4bxBa75xY7Sjxek3OQW/ycgyRmw9htM7cfbLK5z+eu+yVm2+gAujA7MV3F
prFdxmPrxGBymYmJxeZBwWwRmcjGxxD7KxLzPRczJ7H4ShwnBhB7yF2JDVe6
/BrPf8p9/+MT2xNEm3j9c+4RzJfh0/AV6Bi6zPmiewX3x+hwHc8biO+LEnsz
gGhjc9jeeN//VOELsOXUbA2bq3Q95vyRiWxyAmq3WxPLFeb6edxE7pkb0cZf
4IsmpKYP6BC6NNnzD3zEMD8v9kOORq5W5vkMPmmA7xdfOCuxtwpqLmovYghx
Y5n7I3LiCs8/yDeoOfbKPq4OlvvN8fmV7k/5R5nHAWILbxjkSPgUfMsK7iFY
DXCt+O0Sqw3wYfiyRaLFwWo4ajnq7dfUrnB95s65+0Nuzw96ftPf7wsbwpZW
ev5CPtUjtTiEfmOD2GKN6xNvEvhk7oi7muaxkbx4PrmPcOPcfDq+nZqA2uBj
r3cOi47HVq/wbRXsPYUcm1jMeZJ7v+32jI9oId6XXkdgs1083mEL6DuxiBqU
tw7eIKhNeVPZ7nUZtQ5vCPs9/yDf3uf1EjUjcf514R1ej1H34UPwJdQslant
gbrrsmB7w0fhq9gze8dn4jvxk+g/byD1EquRWQ81FrUWNRG1UZbbWTH/kmBE
G5mHNS53f8GZcDa8IVDLUtPytoBPq+/7LfUcgtg5N7HcAn1gT+yFWpYaep/X
yeQ2nA25IzkkZ/SGcN3Ean7ya97Mdrif5i2NNxDeQnjDqB/sjemb2OrT9n6H
nGWt3y1vFrxdsN7zPJayPmo8YiqyeevgfvkH+Sxvhrx7fJRZvsD7xo8a84H3
HfH1MhYd3+n5coNgOoIsZP4vszeyYmI2g+1Qh56KTWanYLpEXyePA9Sk6Bi6
Ra36E4JOfZ0=
            "]], 
           Polygon[CompressedData["
1:eJwtlmlUVlUUhi8YJh9XLormkDiFmuSUDAqooQyKIijOOCCaaIpihppZ2eDq
V6tp9bfRLGtpow3aZKZm5YCkpuXQIIKIM2JmSs+7zv7xLN77nn3Od/a5Z+9L
tznlhUvCPc9bCxGwNOR5z4Xxt7nnlcNMnqfBfPQaeJaxcp7fDjzvfSak+J53
PdLz/oVl+M8zvoK45TCX51CM592LHgD9YBrxRTAQ7TPWEqIVQ+wASA+5sQCv
Av0C6z3K82p4gOe+0AeSoCteBHHFrDcM3R7dATpCFNyN1xv62+8Ox8uAEbAM
rwxvkUB3xesG3WEp3uN42ZAFqXgz8FLQrdCtIRZy4RG8VbASlhCTxr5SYbrF
xxCziOeFsBLW4hXirUC/SG5P8vwELCP+fhiPnqAY6ElcDyhA50MezCEmi7mZ
MB5m4CXaGdyHHg4Z0AXvLhiDHg05UELMed7TOdjE+9vK+7uBXu67fY1XPqy5
Gh6Dl9lfKf4zyo+YSMb7ovtAAky18ytT7rAYhhGTBnO1V5it90ZMb70PSIBJ
ePPw+mk96A/T8ObjtdV83Tv0Heh2kKg7AW1sLAO9wHe5D9DdgYHQB6bjFWlv
tl4T+d2C3eR7hHyjmTsbfwTjdxLfCeJgF+M74Qc4RFwGMReZdwE85mzDe4Wx
Op7PwKt2/y+ha6EG3sBbj5ekdwEH0L9AFXzP2A5bO4r12kOHkKsb1c86xnYz
1gzvY/QX6C3wNaSz1pd4p9E1WguG4l1lXgNsZOwzvMF476I3oweh/2PsJtTD
WdhgY43KC92TM+gFt8M44i/hXYTLEOg+4GXCceachBNwgLEhvjuPT9Bh7Dcc
rtqcQt/Vseq5AB2OV629Qw1M1HvFa0Rfg38C926q7KyOwnBi/tYY+jo0wRi8
qaw5Bcp0P60udddK0BP1XqEEkvGSIMXGdP9Uv4M0BwZbXaYoFrJD7j7ctP21
Q8dBJ7gRuH6ViE6GJOtNQ5kzBGZZ71G9xcMC/R6MtHpT/Y5VL0QXED/O7nGS
rZdud70z3jz0Qt/lqFy7QGcYi+cxVsVeRhKXA6PgYes5mdbPFqNL1avhHquz
UrxCnieEXH2ozvK1byi2OpqJVwyzrJfk2trlvutbi2y9KXiTddZWv+qTeg95
yhHyY1x+yrMo5Pqq+oH2V4F+CB60vruK8ZfoL0/z/BRU4P1oNar3/xP6Z6iE
3/B+hz8hi7FDeGfRI313PjqnYei9ePthH3wTuBqsRG9DfwfbVbPW91J91xfU
HzbjfWV19qlqSfUHn8MW+60c+91z6HqoM2+regZ6F2y3upwArcgpFlrDlcDV
R1t0G4i22jqPF4UOQXOrwQ/w/rA8P0R/BIfhEt5FOA+jfFfXqu8WIZej+otq
9Rh6L3of7A9cDTbTdxJugz2qK+Zdi3R9RnmnEZMPYYy31HfZ7lqItSNVG7au
aj8bXY0+A7WqWetrv6IPw0HrneoJ6g2Vlk8suq3uPsSHXF/QXib57jt+C90E
nr5bjHfXnQu5XqEanExcPHoU5CoX4qrJ4RS8xvg6fiORmDetB5+2HJVrsvoi
3g7YCesD945i7Oz1DhqUQ+ByUm4X7Jz1TR5n31B9S3vxu8fUuxiPY3+9IQFy
ibuCdxUadF+JCSc2DJpZD9C3W+d3ivEWPEfCQeJimB9AR7hsc/Ub6n3qgY0w
2ndn0MP+p9H/NucC9y3LRG8g5p0I18NOwHE4afvUXJ3Be+hNsBHeCtye9XtH
0EdVZ/C6neVf9m3RN6YW7xZeHvF1qofA3Rf1pFp7rg9cDe6xWlBNfIv3P95I
TZ8=
            "]], 
           Polygon[{{4102, 4101, 3157, 1569, 1579, 3159}}]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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

            "]], 
           Polygon[CompressedData["
1:eJxFmHlwltUVxt8X4X3hfl/1YtVWnXbGOm2nddppp2Onm522U6e1U9vRaV3r
giK1bthdq4JUWxEV2XdCSAgkBAiBBAIECIEIgbAHAoQdZJGiIAIVivT5eU6n
f5z57nPP/e57l3Oec8697qG+tz/VJUmS29Ik6arfHSFJWtQu5EnSEJNksXC9
8JksSSqFP5CckswrJsl8yWm1f6Wx7Rrzb43dIlmu9nmNnyFdVkiSbpIo6Vmw
OZjrrGS62rM0fqbG7xYeI/yO8FHJv9Q+Lsl7Jsnjmn+fxjToe8fU91PhVcL7
NO6s8N3CW4Q/FB4pvENzdUpGq71MfbOkOyQ8MdqaWfvlWssnC/aNn+n/61L7
9gDJaLVf1/g7pTsofEDyntq/0LiRapdJP0T6e9Q3VHMNkUxWu0wyRLJVug7J
ULWXaPw8jd8lPEy4q/bzsObpLemmdg+tYWNqfeguaPxW4QeFuwiXCVcJT9T/
H9D/Dwm3CV8rfbPwAsmX1b5Bsoh74RvMLZmv9jOSOv23XvKs2u/r/xv0//uk
/0j4iPBa4euE1wjvFH5L+FPCy6KNYez9kkTrmSx9pfQjNN990s30+1sk/Dfh
gZmdHWf4onSt6rsmt/WuVnuY+iZLN1hj7oq2J/Y2QTJOcnc0HWNe0tjx3j+K
OSX3Sl+p3yrJXMkejVmpsZ/R/G9Jt0JyVW7rb1F7tPTl0o/V2PvddvtItzc1
Oxgi/aTU5uc7D0Yby3+el3699EvU/qz+0yZd72hrZc2TJXXS10q/Se03pXtY
Uq52meQhxkpfIX2FcB/h30nWqt0m+a3avSST1B6vMcM1tntPs3lsfYGkQX1z
pdvPGI1tF24WPi08VXhQsP8yxyPCc4RrUvsG38InNwvflpuvlvh6Vkg/UHiE
3wfrfYzxkjs19i7JOfdHfONLwpuEV0k+p/YK9XVw9tHOhjNah+0Kv6a5BmXm
L23qWyzdMeEp0q2XfFH9X5CsVbsvc0rXKvl9NB+GS+AUfLtFeFFq/jxYeJpw
dWr3/xS2IzzBz/dx7l94ofB67FB4r+Rbmuvbkv1qvyBpkG6BpL9/D+74rvR7
hAvyxyAp6A6KkvHST5G+UeNflP5t4dXCt2v8TuEa55cW6V/y82b9N0rfKbw5
2l7Zc7vaXTT3NunvEN4hvE3yc7VvlWxXe67bU63m+4PwBj/v6yUb1f6HpEm6
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
1cC1Hk9Z338Byld6Tg==
            "]], 
           Polygon[CompressedData["
1:eJw1lnlQV1UYhq+lmD9u9SMdNSvLlpn2fd+zfZvKxl1LzX2vZirLXQQVAcUF
hRSDFEQQoRQBTU1l0VwQ9xXJyg0XUlRQ7HnnfP3xzLz3/b5z7rnnfOec26rH
kDaDr/E8LxwaQGbQ8y6FeF6873mbAp63GZai+zb0vEfgYThLThV8iP4A3oPF
5AzHW0XbNLWBZTAd7zBeProQiuArvGy8JZABY2kbjbcDPRldQM4KiMXbhlcG
eyCaWBL+XJhAbIP6QA9EL0CPJj4IPRiGwhD40vqNIpaIrkD/CcdgCl4MHEAf
goMwjZwE+pwN8yEf7we8JeS14zs7QHuoxrs+lDb1PK8Tzx2hhvxw37X5jvgw
+B6m453Em4OeC0lwBN6kzRvQGjJ8l1dJ3mk4BeHkVNPnJ8T7wX7e5fPOw/jl
+hZ4BT+ddtPgOG3m4aXAzxBF20nQS8/EZqETybuBNo/DE7CC2CS8LTbPmu8o
vAl4RegSKIaJQfeOE+gLUA2T8GbjeVp/dJbmCWZo3aG/rcso363XOvR62Kj+
8GYqF+KtRmLxMmmXAbmw39ajDL0NKuBB3rUUr7d900itK/6PVmtaW61xufXX
x+pE7+uL7mdjrkc/DSEEfgm6elPdxdk86ts0l0fRU/GSbV5noWvwzsF51S9e
J4hFj7Pv1vePVp94K2EtRNBuLP4YaE8sWjWCl4oOMoYw7Su8GXg55GTDmoCr
G9XBQkiDdNufM612NUdT8KZCHIzDy8XLg+XwDV4M7EPvhd22j7S+hejxxCIg
UrWqGtTeV//QBS+VMSyASMtXHXymedC+0BoSiw+4/bsLbydst/3Wwb5zFPGp
mlt9P97v/8+Hxgv56MF8f6Mwz2tGfTcPdeuZaPOo/EXoneiPyMsi/xzP5+EA
3jN4adpjPFcG3Bl2lTZ1cNHm6mu8rehSyLQzZz9eG9p+Co/BAt/NwTTiiyEL
upKzlz73QAqxe8nbZXVQS/wKXNb48MbgpaMHBN0ZpbNqA5RAKQRou1I1Cq+h
X4WXbf+uwWuGbgpNYI7v8rS/F6FP0/5MwJ0br+OdQNfCZdvTN+I1hptgvvZd
0NWn6vSM1VUS3Eb8dmgJRdpD9k1b0aU6b827D+8BuN++V2fEZvqpgn91Tmu9
tSYwj9gd5BXjTdTZDN00B9q/Vh+qk854OTqj0N0tPtx3Z22C3TW6c3bDrTY+
jVl6HXo9FKoe4Ba8FtAc5pKzNui+XXNws3n78J5CPwmP2vrqHG+L3k1sj9YW
NsHdeMn6RvSWoDu7khlfCqTa3fKTfWeJzhTYCON15kNHOwOGkbOV5y3wh/V7
AP03+i/4x9Yvw/prhb4L7rT5S/BdnSxD58JyqISTcAret7u2se4B7oMBPPeH
XN/dPQV25qywe2sh3vM2B5qLQ3i12sPortAZslU/9HeI/rrx/Dl4PF8HDaFJ
qNufAfZnJrlvo9+Fd1SHQbcPtR8bkdfH/g+0D7UfLwTcfOu+rLLxn8W7AnVw
GMrhFLxl/ek/Yg3jXw2/6Yzy3XsVP0rsGByHkTACRgXdf4fy8tF5UGDnQqrv
/l80rvqMvwGEQFPGWsH3DsIfCHm+W6+Wtj/usXrQ+fIc+ll42vqbDw+h43Q3
hLj7aDXjXwXFAXcf6k5Rnu6rMvR22GHr8QLeS/AiHMQLYyzljKU3z710J4W6
c3yZ/SPpX+lb8uox7p7Ev4Duegc5Lcg9QtuPeR6q+9x369sFnYO+lnh9uIR3
EWospjWPZKwR0M7O8xj0VXQdeLyrh70jGn8yzAm4862tjUXxX31XI6qVODvn
e+ruJG8Esf8AmvSeJg==
            "]], 
           
           Polygon[{{4286, 4285, 3226, 1803, 1813, 
            3228}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0uA1EYgOFvpq2ZqdqwrI2kNgQ7liyVlrY7WxfQxl/8/1wCCTciXIUb
YVWJPZ4hmXfeNzlzvpwzc/ujwTCJiD18iHW+TyMesKmfuc+NPGISPV3nArs6
5ww7usZVdHWFU3R0kpcfRmzTTxaxxd/c5jfzN/iVX7Cmn/gRy/qIDzGv+9zD
rF4p1zGjp7iBuv5yh/I+B+an5X6u8DGfoKpP+Qw1fc4XmNCXfAVPXHvdZH/H
jlu+Q6ELQ6d5gRfR1B3uoqWHPMKSHjvIJ1b1e/L/f38B1Wsfog==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MkuA1AUgOGjNt00iKmlFl6DhHdoqZoS09KwYlkJC5a61OqkplfwIqw0
8RQSNr6bLv78f25uzj25iwdnpdORiNjEZybijmujEZe4111+5LdsxCt6+oWf
0dVP3EdH99IZ2rqTjJZu8UNCN7nJDW7wu/l17qd3cKuv+SrtoPd5Dxd6lVdw
ohe4iCP9Z+9fbOtvLnHO/DKP8RqP8wTW9SRPoaKneQYbepbzqOoCz2WH/zLP
RWzpH/MPOe/tAo71Ei/jXO/wLmr6y90BbvRHZvi//9jcK/I=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Mkug1EcxuG/VIxXYUfCVo0x1IqExK5ba+ONCNfQUtWKoS02rFoWJLVk
SSIx1dQb8CQWvzzv4ss5J1/P0triaktEpFVLRDxyuTViRW/2Jpuc6YxI6dee
5pR+7ElO6Nse55i+7FGO6NMe5pAadpIfHOQ7c85/4ja39GBvcF139gLndW0P
sF+Xdje7VLFfvftFRbvODPMdEVkWuMMiD7RrH/JIOfuYJ9qzSywrb1d4qn37
jOcq2M/OL7PN3e26sHvZpyt7lnOq2ze+vdW9XU38/98/eTE3Qw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0EsuA1AYQOFf0kpMmCE60SFDJkSLqgbxLhOaVGIBbEBYRTfCiKSbUIq0
HototfVIfI3ByTk3N/nvI316XjwbiIgj3CQiZiyOkxElLOgLXuWPoYh35PUb
v2JFN7mBnH7hZyzrJ65jST/yAxZ1jbN8zxmumD/LV3yJaX3CZaR1ljMY1yme
wIjuuWsXg/2zuI5fb6hyiwvmt3mNP3mdN9DRm7yFrt7mHfT0Lu/hS+9zEd/6
gA/xo2vmJ53Z4jaG9ag7jfXRczyPSX1r/w5T+jrx/79/g6cwpg==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Esuw1EUgPHTxF/ULpCwEaWtx8CAGBGDRid9oKJFJAy9HwtgRGIVklpI
1aP1XoJfY/Dl+25u7snJHVopz5VSEbGImyRi32G8PyKDQ13gK94djNjBpd7m
Bi50nbdwrje5hjO9wes41WtcxYmu8DGX+Yj3zD/gIq+ioXOcRVWP8SiKOs0D
WNZvdn3Fgn7kJmb1PWe4lY6Y4DZP8jO/INt7yx3kdJffkdcf/Ikp/cXfmNY/
/IsZ/WD+PD9xG0u6z05Jb389zCOo6Fv3d6jr6+T/f/8AU3sxzw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DsvQ3Ecx+GfpU3QKuJSmzdAwhuRmqw2S72DBlG3MlRSd0YGiRrZGDWV
uIzul5mEN+A5MXzyfM8Z/vmfMzg5XSi2RMSEKqmIOw9D6YhhPdhj/ORAW0Re
H3Y/+/Ru97JHb3Y3u/RqdzKnF7uDWT3bGT6xnY+ccv49x1lQwx7liC6Tc5jT
uf3rfj86tW95oyO7zhMd2DXWWGqN2OAMNznLOW3Z8yxr217gonbsJS5r115h
RXv2Kte0bx87/5BNXqtuf/FbZ8l3uWtGF3bVu3VdJeel/v/vH3+LMrI=
          "]]}, {
         Line[{2, 487, 11, 500, 501, 20, 526, 527, 29, 560, 561, 38, 594, 595,
           47, 628, 629, 56, 662, 663, 65, 694, 74}], 
         Line[{1905, 485, 1922, 3268, 2845, 3269, 1940, 3291, 2853, 3290, 
          1958, 3317, 2861, 3318, 1975, 3343, 2870, 3342, 1990, 3366, 2879, 
          3367, 2007, 3396, 2890, 3395, 2026, 3421, 2024, 2046}], 
         Line[{1907, 486, 1923, 504, 3271, 1941, 3294, 2854, 3295, 1959, 3321,
           2864, 3320, 1976, 3345, 2873, 3346, 1991, 3371, 2882, 3370, 2008, 
          3398, 2893, 3399, 2027, 3423, 2028, 2047}], 
         Line[{1909, 2843, 3264, 1925, 2848, 3274, 3275, 1943, 3302, 2856, 
          3300, 1961, 3328, 2866, 3326, 1978, 608, 3351, 1993, 3376, 2885, 
          3379, 2010, 3406, 2896, 3404, 2030, 3429, 2034, 2049}], 
         Line[{1912, 2844, 3266, 1928, 2850, 3284, 3286, 1946, 3313, 2859, 
          3311, 1964, 3334, 2868, 3339, 1980, 2877, 3360, 3362, 1996, 3391, 
          2888, 3386, 2012, 3413, 2898, 3418, 2032, 3435, 2040, 2051}], 
         Line[{1914, 1921, 3270, 1930, 1939, 3292, 3293, 1949, 3288, 2862, 
          3319, 1967, 3315, 2871, 3344, 1982, 3341, 2881, 3369, 1998, 3364, 
          2891, 3397, 2015, 3422, 2900, 3394, 2036, 3420, 2907, 2053}], 
         Line[{1916, 1926, 3273, 1933, 3299, 2855, 3298, 1952, 3325, 2865, 
          3324, 1969, 3348, 2874, 3350, 1985, 3375, 2883, 3374, 2001, 3401, 
          2894, 3403, 2018, 3425, 2901, 3427, 2038, 3440, 2909, 2056}], 
         Line[{1918, 1931, 3278, 1935, 1950, 3305, 3307, 1954, 578, 3331, 
          1971, 3356, 2876, 3355, 1987, 1999, 3381, 3383, 2003, 3411, 2897, 
          3410, 2021, 3431, 2903, 3433, 2042, 3442, 2910, 2058}], 
         Line[{1920, 3261, 2852, 1938, 1955, 3279, 3281, 1957, 3308, 2869, 
          3337, 1974, 620, 3332, 1989, 3357, 2889, 3389, 2006, 688, 3390, 
          2023, 3417, 2905, 3438, 2045, 3444, 2912, 2060}], 
         Line[{2048, 2033, 3428, 2029, 2013, 3407, 3405, 2009, 3378, 3377, 
          2884, 1992, 609, 3352, 1977, 1965, 3329, 3327, 1960, 1947, 3303, 
          3301, 1942, 511, 3276, 1924, 1906, 3263, 1908}], 
         Line[{2050, 2039, 3434, 2031, 2019, 3414, 3412, 2011, 3385, 3384, 
          2887, 1995, 3361, 2878, 3358, 1979, 3338, 2867, 3333, 1963, 3310, 
          3309, 2858, 1945, 3285, 2851, 3282, 1927, 1910, 3265, 1911}], 
         Line[{2052, 2906, 3419, 2035, 3393, 3392, 2025, 2014, 2892, 3365, 
          3363, 1997, 3368, 2880, 3340, 1981, 2872, 3316, 3314, 1966, 2863, 
          3289, 3287, 1948, 529, 3267, 1929, 2846, 3262, 1913}], 
         Line[{2055, 2908, 3439, 2037, 2902, 3426, 3424, 2017, 2895, 3402, 
          3400, 2000, 3373, 3372, 1994, 1984, 2875, 3349, 3347, 1968, 3323, 
          3322, 1962, 1951, 3297, 3296, 1944, 1932, 2847, 3272, 1915}], 
         Line[{2057, 3441, 2054, 2041, 2904, 3432, 3430, 2020, 3409, 3408, 
          2016, 2002, 3382, 2886, 3380, 1986, 3354, 3353, 1983, 1970, 579, 
          3330, 1953, 3306, 2857, 3304, 1934, 2849, 3277, 1917}], 
         Line[{2059, 2911, 3443, 2044, 3437, 3436, 2043, 2022, 2899, 3416, 
          3415, 2005, 3388, 3387, 2004, 1988, 621, 3359, 1973, 3336, 3335, 
          1972, 1956, 3280, 2860, 3312, 1937, 3283, 1936, 1919}], 
         Line[{83, 725, 92, 738, 739, 101, 764, 765, 110, 798, 799, 119, 832, 
          833, 128, 866, 867, 137, 900, 901, 146, 932, 155}], 
         Line[{2061, 723, 2078, 3452, 2915, 3453, 2096, 3475, 2923, 3474, 
          2114, 3501, 2931, 3502, 2131, 3527, 2940, 3526, 2146, 3550, 2949, 
          3551, 2163, 3580, 2960, 3579, 2182, 3605, 2180, 2202}], 
         Line[{2063, 724, 2079, 742, 3455, 2097, 3478, 2924, 3479, 2115, 3505,
           2934, 3504, 2132, 3529, 2943, 3530, 2147, 3555, 2952, 3554, 2164, 
          3582, 2963, 3583, 2183, 3607, 2184, 2203}], 
         Line[{2065, 2913, 3448, 2081, 2918, 3458, 3459, 2099, 3486, 2926, 
          3484, 2117, 3512, 2936, 3510, 2134, 846, 3535, 2149, 3560, 2955, 
          3563, 2166, 3590, 2966, 3588, 2186, 3613, 2190, 2205}], 
         Line[{2068, 2914, 3450, 2084, 2920, 3468, 3470, 2102, 3497, 2929, 
          3495, 2120, 3518, 2938, 3523, 2136, 2947, 3544, 3546, 2152, 3575, 
          2958, 3570, 2168, 3597, 2968, 3602, 2188, 3619, 2196, 2207}], 
         Line[{2070, 2077, 3454, 2086, 2095, 3476, 3477, 2105, 3472, 2932, 
          3503, 2123, 3499, 2941, 3528, 2138, 3525, 2951, 3553, 2154, 3548, 
          2961, 3581, 2171, 3606, 2970, 3578, 2192, 3604, 2977, 2209}], 
         Line[{2072, 2082, 3457, 2089, 3483, 2925, 3482, 2108, 3509, 2935, 
          3508, 2125, 3532, 2944, 3534, 2141, 3559, 2953, 3558, 2157, 3585, 
          2964, 3587, 2174, 3609, 2971, 3611, 2194, 3624, 2979, 2212}], 
         Line[{2074, 2087, 3462, 2091, 2106, 3489, 3491, 2110, 816, 3515, 
          2127, 3540, 2946, 3539, 2143, 2155, 3565, 3567, 2159, 3595, 2967, 
          3594, 2177, 3615, 2973, 3617, 2198, 3626, 2980, 2214}], 
         Line[{2076, 3445, 2922, 2094, 2111, 3463, 3465, 2113, 3492, 2939, 
          3521, 2130, 858, 3516, 2145, 3541, 2959, 3573, 2162, 926, 3574, 
          2179, 3601, 2975, 3622, 2201, 3628, 2982, 2216}], 
         Line[{2204, 2189, 3612, 2185, 2169, 3591, 3589, 2165, 3562, 3561, 
          2954, 2148, 847, 3536, 2133, 2121, 3513, 3511, 2116, 2103, 3487, 
          3485, 2098, 749, 3460, 2080, 2062, 3447, 2064}], 
         Line[{2206, 2195, 3618, 2187, 2175, 3598, 3596, 2167, 3569, 3568, 
          2957, 2151, 3545, 2948, 3542, 2135, 3522, 2937, 3517, 2119, 3494, 
          3493, 2928, 2101, 3469, 2921, 3466, 2083, 2066, 3449, 2067}], 
         Line[{2208, 2976, 3603, 2191, 3577, 3576, 2181, 2170, 2962, 3549, 
          3547, 2153, 3552, 2950, 3524, 2137, 2942, 3500, 3498, 2122, 2933, 
          3473, 3471, 2104, 767, 3451, 2085, 2916, 3446, 2069}], 
         Line[{2211, 2978, 3623, 2193, 2972, 3610, 3608, 2173, 2965, 3586, 
          3584, 2156, 3557, 3556, 2150, 2140, 2945, 3533, 3531, 2124, 3507, 
          3506, 2118, 2107, 3481, 3480, 2100, 2088, 2917, 3456, 2071}], 
         Line[{2213, 3625, 2210, 2197, 2974, 3616, 3614, 2176, 3593, 3592, 
          2172, 2158, 3566, 2956, 3564, 2142, 3538, 3537, 2139, 2126, 817, 
          3514, 2109, 3490, 2927, 3488, 2090, 2919, 3461, 2073}], 
         Line[{2215, 2981, 3627, 2200, 3621, 3620, 2199, 2178, 2969, 3600, 
          3599, 2161, 3572, 3571, 2160, 2144, 859, 3543, 2129, 3520, 3519, 
          2128, 2112, 3464, 2930, 3496, 2093, 3467, 2092, 2075}], 
         Line[{164, 963, 173, 976, 977, 182, 1002, 1003, 191, 1036, 1037, 200,
           1070, 1071, 209, 1104, 1105, 218, 1138, 1139, 227, 1170, 236}], 
         Line[{2217, 961, 2234, 3636, 2985, 3637, 2252, 3659, 2993, 3658, 
          2270, 3685, 3001, 3686, 2287, 3711, 3010, 3710, 2302, 3734, 3019, 
          3735, 2319, 3764, 3030, 3763, 2338, 3789, 2336, 2358}], 
         Line[{2219, 962, 2235, 980, 3639, 2253, 3662, 2994, 3663, 2271, 3689,
           3004, 3688, 2288, 3713, 3013, 3714, 2303, 3739, 3022, 3738, 2320, 
          3766, 3033, 3767, 2339, 3791, 2340, 2359}], 
         Line[{2221, 2983, 3632, 2237, 2988, 3642, 3643, 2255, 3670, 2996, 
          3668, 2273, 3696, 3006, 3694, 2290, 1084, 3719, 2305, 3744, 3025, 
          3747, 2322, 3774, 3036, 3772, 2342, 3797, 2346, 2361}], 
         Line[{2224, 2984, 3634, 2240, 2990, 3652, 3654, 2258, 3681, 2999, 
          3679, 2276, 3702, 3008, 3707, 2292, 3017, 3728, 3730, 2308, 3759, 
          3028, 3754, 2324, 3781, 3038, 3786, 2344, 3803, 2352, 2363}], 
         Line[{2226, 2233, 3638, 2242, 2251, 3660, 3661, 2261, 3656, 3002, 
          3687, 2279, 3683, 3011, 3712, 2294, 3709, 3021, 3737, 2310, 3732, 
          3031, 3765, 2327, 3790, 3040, 3762, 2348, 3788, 3047, 2365}], 
         Line[{2228, 2238, 3641, 2245, 3667, 2995, 3666, 2264, 3693, 3005, 
          3692, 2281, 3716, 3014, 3718, 2297, 3743, 3023, 3742, 2313, 3769, 
          3034, 3771, 2330, 3793, 3041, 3795, 2350, 3808, 3049, 2368}], 
         Line[{2230, 2243, 3646, 2247, 2262, 3673, 3675, 2266, 1054, 3699, 
          2283, 3724, 3016, 3723, 2299, 2311, 3749, 3751, 2315, 3779, 3037, 
          3778, 2333, 3799, 3043, 3801, 2354, 3810, 3050, 2370}], 
         Line[{2232, 3629, 2992, 2250, 2267, 3647, 3649, 2269, 3676, 3009, 
          3705, 2286, 1096, 3700, 2301, 3725, 3029, 3757, 2318, 1164, 3758, 
          2335, 3785, 3045, 3806, 2357, 3812, 3052, 2372}], 
         Line[{2360, 2345, 3796, 2341, 2325, 3775, 3773, 2321, 3746, 3745, 
          3024, 2304, 1085, 3720, 2289, 2277, 3697, 3695, 2272, 2259, 3671, 
          3669, 2254, 987, 3644, 2236, 2218, 3631, 2220}], 
         Line[{2362, 2351, 3802, 2343, 2331, 3782, 3780, 2323, 3753, 3752, 
          3027, 2307, 3729, 3018, 3726, 2291, 3706, 3007, 3701, 2275, 3678, 
          3677, 2998, 2257, 3653, 2991, 3650, 2239, 2222, 3633, 2223}], 
         Line[{2364, 3046, 3787, 2347, 3761, 3760, 2337, 2326, 3032, 3733, 
          3731, 2309, 3736, 3020, 3708, 2293, 3012, 3684, 3682, 2278, 3003, 
          3657, 3655, 2260, 1005, 3635, 2241, 2986, 3630, 2225}], 
         Line[{2367, 3048, 3807, 2349, 3042, 3794, 3792, 2329, 3035, 3770, 
          3768, 2312, 3741, 3740, 2306, 2296, 3015, 3717, 3715, 2280, 3691, 
          3690, 2274, 2263, 3665, 3664, 2256, 2244, 2987, 3640, 2227}], 
         Line[{2369, 3809, 2366, 2353, 3044, 3800, 3798, 2332, 3777, 3776, 
          2328, 2314, 3750, 3026, 3748, 2298, 3722, 3721, 2295, 2282, 1055, 
          3698, 2265, 3674, 2997, 3672, 2246, 2989, 3645, 2229}], 
         Line[{2371, 3051, 3811, 2356, 3805, 3804, 2355, 2334, 3039, 3784, 
          3783, 2317, 3756, 3755, 2316, 2300, 1097, 3727, 2285, 3704, 3703, 
          2284, 2268, 3648, 3000, 3680, 2249, 3651, 2248, 2231}], 
         Line[{245, 1201, 254, 1214, 1215, 263, 1240, 1241, 272, 1274, 1275, 
          281, 1308, 1309, 290, 1342, 1343, 299, 1376, 1377, 308, 1408, 317}], 
         Line[{2373, 1199, 2390, 3820, 3055, 3821, 2408, 3843, 3063, 3842, 
          2426, 3869, 3071, 3870, 2443, 3895, 3080, 3894, 2458, 3918, 3089, 
          3919, 2475, 3948, 3100, 3947, 2494, 3973, 2492, 2514}], 
         Line[{2375, 1200, 2391, 1218, 3823, 2409, 3846, 3064, 3847, 2427, 
          3873, 3074, 3872, 2444, 3897, 3083, 3898, 2459, 3923, 3092, 3922, 
          2476, 3950, 3103, 3951, 2495, 3975, 2496, 2515}], 
         Line[{2377, 3053, 3816, 2393, 3058, 3826, 3827, 2411, 3854, 3066, 
          3852, 2429, 3880, 3076, 3878, 2446, 1322, 3903, 2461, 3928, 3095, 
          3931, 2478, 3958, 3106, 3956, 2498, 3981, 2502, 2517}], 
         Line[{2380, 3054, 3818, 2396, 3060, 3836, 3838, 2414, 3865, 3069, 
          3863, 2432, 3886, 3078, 3891, 2448, 3087, 3912, 3914, 2464, 3943, 
          3098, 3938, 2480, 3965, 3108, 3970, 2500, 3987, 2508, 2519}], 
         Line[{2382, 2389, 3822, 2398, 2407, 3844, 3845, 2417, 3840, 3072, 
          3871, 2435, 3867, 3081, 3896, 2450, 3893, 3091, 3921, 2466, 3916, 
          3101, 3949, 2483, 3974, 3110, 3946, 2504, 3972, 3117, 2521}], 
         Line[{2384, 2394, 3825, 2401, 3851, 3065, 3850, 2420, 3877, 3075, 
          3876, 2437, 3900, 3084, 3902, 2453, 3927, 3093, 3926, 2469, 3953, 
          3104, 3955, 2486, 3977, 3111, 3979, 2506, 3992, 3119, 2524}], 
         Line[{2386, 2399, 3830, 2403, 2418, 3857, 3859, 2422, 1292, 3883, 
          2439, 3908, 3086, 3907, 2455, 2467, 3933, 3935, 2471, 3963, 3107, 
          3962, 2489, 3983, 3113, 3985, 2510, 3994, 3120, 2526}], 
         Line[{2388, 3813, 3062, 2406, 2423, 3831, 3833, 2425, 3860, 3079, 
          3889, 2442, 1334, 3884, 2457, 3909, 3099, 3941, 2474, 1402, 3942, 
          2491, 3969, 3115, 3990, 2513, 3996, 3122, 2528}], 
         Line[{2516, 2501, 3980, 2497, 2481, 3959, 3957, 2477, 3930, 3929, 
          3094, 2460, 1323, 3904, 2445, 2433, 3881, 3879, 2428, 2415, 3855, 
          3853, 2410, 1225, 3828, 2392, 2374, 3815, 2376}], 
         Line[{2518, 2507, 3986, 2499, 2487, 3966, 3964, 2479, 3937, 3936, 
          3097, 2463, 3913, 3088, 3910, 2447, 3890, 3077, 3885, 2431, 3862, 
          3861, 3068, 2413, 3837, 3061, 3834, 2395, 2378, 3817, 2379}], 
         Line[{2520, 3116, 3971, 2503, 3945, 3944, 2493, 2482, 3102, 3917, 
          3915, 2465, 3920, 3090, 3892, 2449, 3082, 3868, 3866, 2434, 3073, 
          3841, 3839, 2416, 1243, 3819, 2397, 3056, 3814, 2381}], 
         Line[{2523, 3118, 3991, 2505, 3112, 3978, 3976, 2485, 3105, 3954, 
          3952, 2468, 3925, 3924, 2462, 2452, 3085, 3901, 3899, 2436, 3875, 
          3874, 2430, 2419, 3849, 3848, 2412, 2400, 3057, 3824, 2383}], 
         Line[{2525, 3993, 2522, 2509, 3114, 3984, 3982, 2488, 3961, 3960, 
          2484, 2470, 3934, 3096, 3932, 2454, 3906, 3905, 2451, 2438, 1293, 
          3882, 2421, 3858, 3067, 3856, 2402, 3059, 3829, 2385}], 
         Line[{2527, 3121, 3995, 2512, 3989, 3988, 2511, 2490, 3109, 3968, 
          3967, 2473, 3940, 3939, 2472, 2456, 1335, 3911, 2441, 3888, 3887, 
          2440, 2424, 3832, 3070, 3864, 2405, 3835, 2404, 2387}], 
         Line[{326, 1439, 335, 1452, 1453, 344, 1478, 1479, 353, 1512, 1513, 
          362, 1546, 1547, 370, 1576, 1577, 379, 1610, 1611, 388, 1642, 397}], 
         Line[{2529, 1437, 2546, 4004, 3125, 4005, 2564, 4027, 3133, 4026, 
          2582, 4051, 3141, 4052, 2599, 4079, 3152, 4078, 2615, 4077, 3158, 
          4100, 2632, 4132, 3169, 4131, 2651, 4157, 2649, 2671}], 
         Line[{2531, 1438, 2547, 1456, 4007, 2565, 4030, 3134, 4031, 2583, 
          4055, 3144, 4054, 2600, 4083, 3155, 4084, 2616, 4107, 3161, 4106, 
          2633, 4134, 3172, 4135, 2652, 4159, 2653, 2672}], 
         Line[{2533, 3123, 4000, 2549, 3128, 4010, 4011, 2567, 4038, 3136, 
          4036, 2585, 4062, 3146, 4060, 2602, 1560, 4089, 2618, 4112, 3164, 
          4115, 2635, 4142, 3175, 4140, 2655, 4165, 2659, 2674}], 
         Line[{2536, 3124, 4002, 2552, 3130, 4020, 4022, 2570, 4049, 3139, 
          4047, 2588, 4068, 3148, 4074, 2605, 4101, 3157, 4096, 2621, 4127, 
          3167, 4122, 2637, 4149, 3177, 4154, 2657, 4171, 2665, 2676}], 
         Line[{2538, 2545, 4006, 2554, 2563, 4028, 4029, 2573, 4024, 3142, 
          4053, 2591, 4050, 3150, 4076, 2607, 4103, 3160, 4105, 2623, 4098, 
          3170, 4133, 2640, 4158, 3179, 4130, 2661, 4156, 3186, 2678}], 
         Line[{2540, 2550, 4009, 2557, 4035, 3135, 4034, 2576, 4059, 3145, 
          4058, 2593, 4081, 3153, 4085, 2609, 4111, 3162, 4110, 2626, 4137, 
          3173, 4139, 2643, 4161, 3180, 4163, 2663, 4176, 3188, 2681}], 
         Line[{2542, 2555, 4014, 2559, 2574, 4041, 4043, 2578, 1530, 4065, 
          2595, 4091, 3156, 4088, 2611, 2624, 4117, 4119, 2628, 4147, 3176, 
          4146, 2646, 4167, 3182, 4169, 2667, 4178, 3189, 2683}], 
         Line[{2544, 3997, 3132, 2562, 2579, 4015, 4017, 2581, 4044, 3151, 
          4071, 2598, 1566, 4066, 2614, 4093, 3168, 4125, 2631, 1636, 4126, 
          2648, 4153, 3184, 4174, 2670, 4180, 3191, 2685}], 
         Line[{2673, 2658, 4164, 2654, 2638, 4143, 4141, 2634, 4114, 4113, 
          3163, 2617, 1561, 4090, 2601, 2589, 4063, 4061, 2584, 2571, 4039, 
          4037, 2566, 1463, 4012, 2548, 2530, 3999, 2532}], 
         Line[{2675, 2664, 4170, 2656, 2644, 4150, 4148, 2636, 4121, 4120, 
          3166, 2620, 4095, 4094, 2612, 2604, 4073, 3147, 4067, 2587, 4046, 
          4045, 3138, 2569, 4021, 3131, 4018, 2551, 2534, 4001, 2535}], 
         Line[{2677, 3185, 4155, 2660, 4129, 4128, 2650, 2639, 3171, 4099, 
          4097, 2622, 4104, 3159, 4102, 2606, 4075, 4072, 3149, 2590, 3143, 
          4025, 4023, 2572, 1481, 4003, 2553, 3126, 3998, 2537}], 
         Line[{2680, 3187, 4175, 2662, 3181, 4162, 4160, 2642, 3174, 4138, 
          4136, 2625, 4109, 4108, 2619, 2608, 3154, 4082, 4080, 2592, 4057, 
          4056, 2586, 2575, 4033, 4032, 2568, 2556, 3127, 4008, 2539}], 
         Line[{2682, 4177, 2679, 2666, 3183, 4168, 4166, 2645, 4145, 4144, 
          2641, 2627, 4118, 3165, 4116, 2610, 4087, 4086, 2603, 2594, 1531, 
          4064, 2577, 4042, 3137, 4040, 2558, 3129, 4013, 2541}], 
         Line[{2684, 3190, 4179, 2669, 4173, 4172, 2668, 2647, 3178, 4152, 
          4151, 2630, 4124, 4123, 2629, 2613, 1567, 4092, 2597, 4070, 4069, 
          2596, 2580, 4016, 3140, 4048, 2561, 4019, 2560, 2543}], 
         Line[{406, 1673, 415, 1686, 1687, 424, 1712, 1713, 433, 1746, 1747, 
          442, 1780, 1781, 450, 1810, 1811, 459, 1844, 1845, 468, 1876, 477}], 
         Line[{2686, 1671, 2703, 4188, 3194, 4189, 2721, 4211, 3202, 4210, 
          2739, 4235, 3210, 4236, 2756, 4263, 3221, 4262, 2772, 4261, 3227, 
          4284, 2789, 4316, 3238, 4315, 2808, 4341, 2806, 2828}], 
         Line[{2688, 1672, 2704, 1690, 4191, 2722, 4214, 3203, 4215, 2740, 
          4239, 3213, 4238, 2757, 4267, 3224, 4268, 2773, 4291, 3230, 4290, 
          2790, 4318, 3241, 4319, 2809, 4343, 2810, 2829}], 
         Line[{2690, 3192, 4184, 2706, 3197, 4194, 4195, 2724, 4222, 3205, 
          4220, 2742, 4246, 3215, 4244, 2759, 1794, 4273, 2775, 4296, 3233, 
          4299, 2792, 4326, 3244, 4324, 2812, 4349, 2816, 2831}], 
         Line[{2693, 3193, 4186, 2709, 3199, 4204, 4206, 2727, 4233, 3208, 
          4231, 2745, 4252, 3217, 4258, 2762, 4285, 3226, 4280, 2778, 4311, 
          3236, 4306, 2794, 4333, 3246, 4338, 2814, 4355, 2822, 2833}], 
         Line[{2695, 2702, 4190, 2711, 2720, 4212, 4213, 2730, 4208, 3211, 
          4237, 2748, 4234, 3219, 4260, 2764, 4287, 3229, 4289, 2780, 4282, 
          3239, 4317, 2797, 4342, 3248, 4314, 2818, 4340, 3255, 2835}], 
         Line[{2697, 2707, 4193, 2714, 4219, 3204, 4218, 2733, 4243, 3214, 
          4242, 2750, 4265, 3222, 4269, 2766, 4295, 3231, 4294, 2783, 4321, 
          3242, 4323, 2800, 4345, 3249, 4347, 2820, 4360, 3257, 2838}], 
         Line[{2699, 2712, 4198, 2716, 2731, 4225, 4227, 2735, 1764, 4249, 
          2752, 4275, 3225, 4272, 2768, 2781, 4301, 4303, 2785, 4331, 3245, 
          4330, 2803, 4351, 3251, 4353, 2824, 4362, 3258, 2840}], 
         Line[{2701, 4181, 3201, 2719, 2736, 4199, 4201, 2738, 4228, 3220, 
          4255, 2755, 1800, 4250, 2771, 4277, 3237, 4309, 2788, 1870, 4310, 
          2805, 4337, 3253, 4358, 2827, 4364, 3260, 2842}], 
         Line[{2830, 2815, 4348, 2811, 2795, 4327, 4325, 2791, 4298, 4297, 
          3232, 2774, 1795, 4274, 2758, 2746, 4247, 4245, 2741, 2728, 4223, 
          4221, 2723, 1697, 4196, 2705, 2687, 4183, 2689}], 
         Line[{2832, 2821, 4354, 2813, 2801, 4334, 4332, 2793, 4305, 4304, 
          3235, 2777, 4279, 4278, 2769, 2761, 4257, 3216, 4251, 2744, 4230, 
          4229, 3207, 2726, 4205, 3200, 4202, 2708, 2691, 4185, 2692}], 
         Line[{2834, 3254, 4339, 2817, 4313, 4312, 2807, 2796, 3240, 4283, 
          4281, 2779, 4288, 3228, 4286, 2763, 4259, 4256, 3218, 2747, 3212, 
          4209, 4207, 2729, 1715, 4187, 2710, 3195, 4182, 2694}], 
         Line[{2837, 3256, 4359, 2819, 3250, 4346, 4344, 2799, 3243, 4322, 
          4320, 2782, 4293, 4292, 2776, 2765, 3223, 4266, 4264, 2749, 4241, 
          4240, 2743, 2732, 4217, 4216, 2725, 2713, 3196, 4192, 2696}], 
         Line[{2839, 4361, 2836, 2823, 3252, 4352, 4350, 2802, 4329, 4328, 
          2798, 2784, 4302, 3234, 4300, 2767, 4271, 4270, 2760, 2751, 1765, 
          4248, 2734, 4226, 3206, 4224, 2715, 3198, 4197, 2698}], 
         Line[{2841, 3259, 4363, 2826, 4357, 4356, 2825, 2804, 3247, 4336, 
          4335, 2787, 4308, 4307, 2786, 2770, 1801, 4276, 2754, 4254, 4253, 
          2753, 2737, 4200, 3209, 4232, 2718, 4203, 2717, 2700}]}, {
         Line[{489, 3390, 689, 3416, 683, 681, 3410, 3409, 675, 3403, 673, 
          3402, 667, 3397, 665, 3365, 653, 651, 3386, 3385, 645, 643, 3379, 
          3378, 637, 3370, 635, 629, 625, 3367, 661}], 
         Line[{496, 655, 3389, 3388, 649, 3383, 3382, 647, 641, 639, 3374, 
          3373, 633, 3369, 3368, 631, 619, 3362, 3361, 617, 611, 3351, 609, 
          603, 601, 3346, 595, 3342, 591, 627}], 
         Line[{499, 485, 487, 486, 490, 3263, 491, 3264, 492, 3265, 493, 3266,
           494, 3262, 502, 3270, 503, 3272, 508, 3273, 509, 3277, 514, 3278, 
          515, 3283, 520, 3261, 521}], 
         Line[{18, 1938, 1937, 17, 1935, 1934, 16, 1933, 1932, 15, 1930, 1929,
           14, 1928, 1927, 13, 1925, 1924, 12, 1923, 11, 1922, 10}], 
         Line[{524, 497, 3268, 500, 504, 506, 3276, 510, 3274, 512, 3282, 516,
           3284, 518, 3267, 528, 3292, 530, 3296, 536, 3299, 538, 3304, 544, 
          3305, 546, 3312, 552, 3279, 554}], 
         Line[{555, 3281, 3280, 553, 547, 3307, 3306, 545, 539, 537, 3298, 
          3297, 531, 3293, 529, 519, 3286, 3285, 517, 513, 3275, 511, 507, 
          3271, 505, 501, 498, 3269, 525}], 
         Line[{558, 3291, 522, 526, 532, 3294, 534, 3301, 3302, 540, 542, 
          3309, 548, 3313, 550, 3287, 3288, 562, 564, 3322, 570, 3325, 572, 
          3330, 578, 580, 3335, 586, 3308, 588}], 
         Line[{589, 587, 3337, 3336, 581, 3331, 579, 573, 571, 3324, 3323, 
          565, 3319, 563, 3289, 551, 549, 3311, 3310, 543, 3300, 541, 3303, 
          535, 533, 3295, 527, 3290, 523, 559}], 
         Line[{592, 556, 3317, 560, 3321, 566, 568, 3327, 3328, 574, 576, 
          3333, 3334, 582, 584, 3314, 3315, 596, 598, 3347, 3348, 604, 606, 
          3353, 612, 3356, 614, 3359, 620, 622}], 
         Line[{623, 3332, 621, 615, 613, 3355, 3354, 607, 3350, 605, 3349, 
          599, 3344, 597, 3316, 585, 3339, 3338, 583, 577, 3326, 575, 3329, 
          569, 3320, 567, 561, 557, 3318, 593}], 
         Line[{626, 3343, 590, 594, 600, 3345, 602, 3352, 608, 610, 3358, 616,
           3360, 618, 3340, 3341, 630, 632, 3372, 638, 3375, 640, 3380, 646, 
          3381, 648, 3387, 654, 3357, 495}], 
         Line[{657, 714, 3438, 3437, 710, 3433, 708, 3432, 704, 3427, 702, 
          3426, 698, 696, 3394, 3393, 687, 3418, 685, 3414, 679, 3404, 677, 
          3407, 671, 669, 3399, 663, 3395, 659, 693}], 
         Line[{660, 624, 3366, 628, 3371, 634, 636, 3377, 642, 3376, 644, 
          3384, 650, 3391, 652, 3363, 3364, 664, 666, 3400, 3401, 672, 674, 
          3408, 680, 3411, 682, 3415, 688, 488}], 
         Line[{690, 722, 3444, 3443, 721, 3442, 720, 3441, 719, 718, 3440, 
          3439, 717, 716, 3420, 3419, 712, 711, 3435, 3434, 706, 705, 3429, 
          3428, 700, 699, 3423, 694, 3421, 691, 715}], 
         Line[{692, 3396, 658, 662, 668, 3398, 670, 3405, 3406, 676, 678, 
          3412, 3413, 684, 686, 3392, 695, 3422, 697, 3424, 3425, 701, 703, 
          3430, 3431, 707, 709, 3436, 713, 3417, 656}], 
         Line[{727, 3574, 927, 3600, 921, 919, 3594, 3593, 913, 3587, 911, 
          3586, 905, 3581, 903, 3549, 891, 889, 3570, 3569, 883, 881, 3563, 
          3562, 875, 3554, 873, 867, 863, 3551, 899}], 
         Line[{734, 893, 3573, 3572, 887, 3567, 3566, 885, 879, 877, 3558, 
          3557, 871, 3553, 3552, 869, 857, 3546, 3545, 855, 849, 3535, 847, 
          841, 839, 3530, 833, 3526, 829, 865}], 
         Line[{737, 723, 725, 724, 728, 3447, 729, 3448, 730, 3449, 731, 3450,
           732, 3446, 740, 3454, 741, 3456, 746, 3457, 747, 3461, 752, 3462, 
          753, 3467, 758, 3445, 759}], 
         Line[{99, 2094, 2093, 98, 2091, 2090, 97, 2089, 2088, 96, 2086, 2085,
           95, 2084, 2083, 94, 2081, 2080, 93, 2079, 92, 2078, 91}], 
         Line[{762, 735, 3452, 738, 742, 744, 3460, 748, 3458, 750, 3466, 754,
           3468, 756, 3451, 766, 3476, 768, 3480, 774, 3483, 776, 3488, 782, 
          3489, 784, 3496, 790, 3463, 792}], 
         Line[{793, 3465, 3464, 791, 785, 3491, 3490, 783, 777, 775, 3482, 
          3481, 769, 3477, 767, 757, 3470, 3469, 755, 751, 3459, 749, 745, 
          3455, 743, 739, 736, 3453, 763}], 
         Line[{796, 3475, 760, 764, 770, 3478, 772, 3485, 3486, 778, 780, 
          3493, 786, 3497, 788, 3471, 3472, 800, 802, 3506, 808, 3509, 810, 
          3514, 816, 818, 3519, 824, 3492, 826}], 
         Line[{827, 825, 3521, 3520, 819, 3515, 817, 811, 809, 3508, 3507, 
          803, 3503, 801, 3473, 789, 787, 3495, 3494, 781, 3484, 779, 3487, 
          773, 771, 3479, 765, 3474, 761, 797}], 
         Line[{830, 794, 3501, 798, 3505, 804, 806, 3511, 3512, 812, 814, 
          3517, 3518, 820, 822, 3498, 3499, 834, 836, 3531, 3532, 842, 844, 
          3537, 850, 3540, 852, 3543, 858, 860}], 
         Line[{861, 3516, 859, 853, 851, 3539, 3538, 845, 3534, 843, 3533, 
          837, 3528, 835, 3500, 823, 3523, 3522, 821, 815, 3510, 813, 3513, 
          807, 3504, 805, 799, 795, 3502, 831}], 
         Line[{864, 3527, 828, 832, 838, 3529, 840, 3536, 846, 848, 3542, 854,
           3544, 856, 3524, 3525, 868, 870, 3556, 876, 3559, 878, 3564, 884, 
          3565, 886, 3571, 892, 3541, 733}], 
         Line[{895, 952, 3622, 3621, 948, 3617, 946, 3616, 942, 3611, 940, 
          3610, 936, 934, 3578, 3577, 925, 3602, 923, 3598, 917, 3588, 915, 
          3591, 909, 907, 3583, 901, 3579, 897, 931}], 
         Line[{898, 862, 3550, 866, 3555, 872, 874, 3561, 880, 3560, 882, 
          3568, 888, 3575, 890, 3547, 3548, 902, 904, 3584, 3585, 910, 912, 
          3592, 918, 3595, 920, 3599, 926, 726}], 
         Line[{928, 960, 3628, 3627, 959, 3626, 958, 3625, 957, 956, 3624, 
          3623, 955, 954, 3604, 3603, 950, 949, 3619, 3618, 944, 943, 3613, 
          3612, 938, 937, 3607, 932, 3605, 929, 953}], 
         Line[{930, 3580, 896, 900, 906, 3582, 908, 3589, 3590, 914, 916, 
          3596, 3597, 922, 924, 3576, 933, 3606, 935, 3608, 3609, 939, 941, 
          3614, 3615, 945, 947, 3620, 951, 3601, 894}], 
         Line[{965, 3758, 1165, 3784, 1159, 1157, 3778, 3777, 1151, 3771, 
          1149, 3770, 1143, 3765, 1141, 3733, 1129, 1127, 3754, 3753, 1121, 
          1119, 3747, 3746, 1113, 3738, 1111, 1105, 1101, 3735, 1137}], 
         Line[{972, 1131, 3757, 3756, 1125, 3751, 3750, 1123, 1117, 1115, 
          3742, 3741, 1109, 3737, 3736, 1107, 1095, 3730, 3729, 1093, 1087, 
          3719, 1085, 1079, 1077, 3714, 1071, 3710, 1067, 1103}], 
         Line[{975, 961, 963, 962, 966, 3631, 967, 3632, 968, 3633, 969, 3634,
           970, 3630, 978, 3638, 979, 3640, 984, 3641, 985, 3645, 990, 3646, 
          991, 3651, 996, 3629, 997}], 
         Line[{180, 2250, 2249, 179, 2247, 2246, 178, 2245, 2244, 177, 2242, 
          2241, 176, 2240, 2239, 175, 2237, 2236, 174, 2235, 173, 2234, 172}], 
         Line[{1000, 973, 3636, 976, 980, 982, 3644, 986, 3642, 988, 3650, 
          992, 3652, 994, 3635, 1004, 3660, 1006, 3664, 1012, 3667, 1014, 
          3672, 1020, 3673, 1022, 3680, 1028, 3647, 1030}], 
         Line[{1031, 3649, 3648, 1029, 1023, 3675, 3674, 1021, 1015, 1013, 
          3666, 3665, 1007, 3661, 1005, 995, 3654, 3653, 993, 989, 3643, 987, 
          983, 3639, 981, 977, 974, 3637, 1001}], 
         Line[{1034, 3659, 998, 1002, 1008, 3662, 1010, 3669, 3670, 1016, 
          1018, 3677, 1024, 3681, 1026, 3655, 3656, 1038, 1040, 3690, 1046, 
          3693, 1048, 3698, 1054, 1056, 3703, 1062, 3676, 1064}], 
         Line[{1065, 1063, 3705, 3704, 1057, 3699, 1055, 1049, 1047, 3692, 
          3691, 1041, 3687, 1039, 3657, 1027, 1025, 3679, 3678, 1019, 3668, 
          1017, 3671, 1011, 1009, 3663, 1003, 3658, 999, 1035}], 
         Line[{1068, 1032, 3685, 1036, 3689, 1042, 1044, 3695, 3696, 1050, 
          1052, 3701, 3702, 1058, 1060, 3682, 3683, 1072, 1074, 3715, 3716, 
          1080, 1082, 3721, 1088, 3724, 1090, 3727, 1096, 1098}], 
         Line[{1099, 3700, 1097, 1091, 1089, 3723, 3722, 1083, 3718, 1081, 
          3717, 1075, 3712, 1073, 3684, 1061, 3707, 3706, 1059, 1053, 3694, 
          1051, 3697, 1045, 3688, 1043, 1037, 1033, 3686, 1069}], 
         Line[{1102, 3711, 1066, 1070, 1076, 3713, 1078, 3720, 1084, 1086, 
          3726, 1092, 3728, 1094, 3708, 3709, 1106, 1108, 3740, 1114, 3743, 
          1116, 3748, 1122, 3749, 1124, 3755, 1130, 3725, 971}], 
         Line[{1133, 1190, 3806, 3805, 1186, 3801, 1184, 3800, 1180, 3795, 
          1178, 3794, 1174, 1172, 3762, 3761, 1163, 3786, 1161, 3782, 1155, 
          3772, 1153, 3775, 1147, 1145, 3767, 1139, 3763, 1135, 1169}], 
         Line[{1136, 1100, 3734, 1104, 3739, 1110, 1112, 3745, 1118, 3744, 
          1120, 3752, 1126, 3759, 1128, 3731, 3732, 1140, 1142, 3768, 3769, 
          1148, 1150, 3776, 1156, 3779, 1158, 3783, 1164, 964}], 
         Line[{1166, 1198, 3812, 3811, 1197, 3810, 1196, 3809, 1195, 1194, 
          3808, 3807, 1193, 1192, 3788, 3787, 1188, 1187, 3803, 3802, 1182, 
          1181, 3797, 3796, 1176, 1175, 3791, 1170, 3789, 1167, 1191}], 
         Line[{1168, 3764, 1134, 1138, 1144, 3766, 1146, 3773, 3774, 1152, 
          1154, 3780, 3781, 1160, 1162, 3760, 1171, 3790, 1173, 3792, 3793, 
          1177, 1179, 3798, 3799, 1183, 1185, 3804, 1189, 3785, 1132}], 
         Line[{1203, 3942, 1403, 3968, 1397, 1395, 3962, 3961, 1389, 3955, 
          1387, 3954, 1381, 3949, 1379, 3917, 1367, 1365, 3938, 3937, 1359, 
          1357, 3931, 3930, 1351, 3922, 1349, 1343, 1339, 3919, 1375}], 
         Line[{1210, 1369, 3941, 3940, 1363, 3935, 3934, 1361, 1355, 1353, 
          3926, 3925, 1347, 3921, 3920, 1345, 1333, 3914, 3913, 1331, 1325, 
          3903, 1323, 1317, 1315, 3898, 1309, 3894, 1305, 1341}], 
         Line[{1213, 1199, 1201, 1200, 1204, 3815, 1205, 3816, 1206, 3817, 
          1207, 3818, 1208, 3814, 1216, 3822, 1217, 3824, 1222, 3825, 1223, 
          3829, 1228, 3830, 1229, 3835, 1234, 3813, 1235}], 
         Line[{261, 2406, 2405, 260, 2403, 2402, 259, 2401, 2400, 258, 2398, 
          2397, 257, 2396, 2395, 256, 2393, 2392, 255, 2391, 254, 2390, 253}], 
         Line[{1238, 1211, 3820, 1214, 1218, 1220, 3828, 1224, 3826, 1226, 
          3834, 1230, 3836, 1232, 3819, 1242, 3844, 1244, 3848, 1250, 3851, 
          1252, 3856, 1258, 3857, 1260, 3864, 1266, 3831, 1268}], 
         Line[{1269, 3833, 3832, 1267, 1261, 3859, 3858, 1259, 1253, 1251, 
          3850, 3849, 1245, 3845, 1243, 1233, 3838, 3837, 1231, 1227, 3827, 
          1225, 1221, 3823, 1219, 1215, 1212, 3821, 1239}], 
         Line[{1272, 3843, 1236, 1240, 1246, 3846, 1248, 3853, 3854, 1254, 
          1256, 3861, 1262, 3865, 1264, 3839, 3840, 1276, 1278, 3874, 1284, 
          3877, 1286, 3882, 1292, 1294, 3887, 1300, 3860, 1302}], 
         Line[{1303, 1301, 3889, 3888, 1295, 3883, 1293, 1287, 1285, 3876, 
          3875, 1279, 3871, 1277, 3841, 1265, 1263, 3863, 3862, 1257, 3852, 
          1255, 3855, 1249, 1247, 3847, 1241, 3842, 1237, 1273}], 
         Line[{1306, 1270, 3869, 1274, 3873, 1280, 1282, 3879, 3880, 1288, 
          1290, 3885, 3886, 1296, 1298, 3866, 3867, 1310, 1312, 3899, 3900, 
          1318, 1320, 3905, 1326, 3908, 1328, 3911, 1334, 1336}], 
         Line[{1337, 3884, 1335, 1329, 1327, 3907, 3906, 1321, 3902, 1319, 
          3901, 1313, 3896, 1311, 3868, 1299, 3891, 3890, 1297, 1291, 3878, 
          1289, 3881, 1283, 3872, 1281, 1275, 1271, 3870, 1307}], 
         Line[{1340, 3895, 1304, 1308, 1314, 3897, 1316, 3904, 1322, 1324, 
          3910, 1330, 3912, 1332, 3892, 3893, 1344, 1346, 3924, 1352, 3927, 
          1354, 3932, 1360, 3933, 1362, 3939, 1368, 3909, 1209}], 
         Line[{1371, 1428, 3990, 3989, 1424, 3985, 1422, 3984, 1418, 3979, 
          1416, 3978, 1412, 1410, 3946, 3945, 1401, 3970, 1399, 3966, 1393, 
          3956, 1391, 3959, 1385, 1383, 3951, 1377, 3947, 1373, 1407}], 
         Line[{1374, 1338, 3918, 1342, 3923, 1348, 1350, 3929, 1356, 3928, 
          1358, 3936, 1364, 3943, 1366, 3915, 3916, 1378, 1380, 3952, 3953, 
          1386, 1388, 3960, 1394, 3963, 1396, 3967, 1402, 1202}], 
         Line[{1404, 1436, 3996, 3995, 1435, 3994, 1434, 3993, 1433, 1432, 
          3992, 3991, 1431, 1430, 3972, 3971, 1426, 1425, 3987, 3986, 1420, 
          1419, 3981, 3980, 1414, 1413, 3975, 1408, 3973, 1405, 1429}], 
         Line[{1406, 3948, 1372, 1376, 1382, 3950, 1384, 3957, 3958, 1390, 
          1392, 3964, 3965, 1398, 1400, 3944, 1409, 3974, 1411, 3976, 3977, 
          1415, 1417, 3982, 3983, 1421, 1423, 3988, 1427, 3969, 1370}], 
         Line[{1441, 4126, 1637, 4152, 1631, 1629, 4146, 4145, 1623, 4139, 
          1621, 4138, 1615, 4133, 1613, 4099, 1601, 1599, 4122, 4121, 1593, 
          1591, 4115, 4114, 1585, 4106, 1583, 1577, 1573, 4100, 1609}], 
         Line[{1448, 1603, 4125, 4124, 1597, 4119, 4118, 1595, 1589, 1587, 
          4110, 4109, 1581, 4105, 4104, 1579, 1569, 4096, 4095, 1563, 4089, 
          1561, 1555, 1553, 4084, 1547, 4078, 1543, 1575}], 
         Line[{1451, 1437, 1439, 1438, 1442, 3999, 1443, 4000, 1444, 4001, 
          1445, 4002, 1446, 3998, 1454, 4006, 1455, 4008, 1460, 4009, 1461, 
          4013, 1466, 4014, 1467, 4019, 1472, 3997, 1473}], 
         Line[{342, 2562, 2561, 341, 2559, 2558, 340, 2557, 2556, 339, 2554, 
          2553, 338, 2552, 2551, 337, 2549, 2548, 336, 2547, 335, 2546, 334}], 
         Line[{1476, 1449, 4004, 1452, 1456, 1458, 4012, 1462, 4010, 1464, 
          4018, 1468, 4020, 1470, 4003, 1480, 4028, 1482, 4032, 1488, 4035, 
          1490, 4040, 1496, 4041, 1498, 4048, 1504, 4015, 1506}], 
         Line[{1507, 4017, 4016, 1505, 1499, 4043, 4042, 1497, 1491, 1489, 
          4034, 4033, 1483, 4029, 1481, 1471, 4022, 4021, 1469, 1465, 4011, 
          1463, 1459, 4007, 1457, 1453, 1450, 4005, 1477}], 
         Line[{1510, 4027, 1474, 1478, 1484, 4030, 1486, 4037, 4038, 1492, 
          1494, 4045, 1500, 4049, 1502, 4023, 4024, 1514, 1516, 4056, 1522, 
          4059, 1524, 4064, 1530, 1532, 4069, 1538, 4044, 1540}], 
         Line[{1541, 1539, 4071, 4070, 1533, 4065, 1531, 1525, 1523, 4058, 
          4057, 1517, 4053, 1515, 4025, 1503, 1501, 4047, 4046, 1495, 4036, 
          1493, 4039, 1487, 1485, 4031, 1479, 4026, 1475, 1511}], 
         Line[{1544, 1508, 4051, 1512, 4055, 1518, 1520, 4061, 4062, 1526, 
          1528, 4067, 4068, 1534, 4072, 1536, 4050, 1548, 4080, 4081, 1550, 
          1556, 4086, 1558, 4091, 1564, 4092, 1566, 1570}], 
         Line[{1571, 4066, 1567, 1565, 1559, 4088, 4087, 1557, 4085, 1551, 
          4082, 1549, 1537, 4076, 4075, 4074, 4073, 1535, 1529, 4060, 1527, 
          4063, 1521, 4054, 1519, 1513, 1509, 4052, 1545}], 
         Line[{1574, 4079, 1542, 1546, 1552, 4083, 1554, 4090, 1560, 1562, 
          4094, 1568, 4101, 4102, 4103, 1578, 1580, 4108, 1586, 4111, 1588, 
          4116, 1594, 4117, 1596, 4123, 1602, 4093, 1447}], 
         Line[{1605, 1662, 4174, 4173, 1658, 4169, 1656, 4168, 1652, 4163, 
          1650, 4162, 1646, 1644, 4130, 4129, 1635, 4154, 1633, 4150, 1627, 
          4140, 1625, 4143, 1619, 1617, 4135, 1611, 4131, 1607, 1641}], 
         Line[{1608, 1572, 4077, 1576, 4107, 1582, 1584, 4113, 1590, 4112, 
          1592, 4120, 1598, 4127, 1600, 4097, 4098, 1612, 1614, 4136, 4137, 
          1620, 1622, 4144, 1628, 4147, 1630, 4151, 1636, 1440}], 
         Line[{1638, 1670, 4180, 4179, 1669, 4178, 1668, 4177, 1667, 1666, 
          4176, 4175, 1665, 1664, 4156, 4155, 1660, 1659, 4171, 4170, 1654, 
          1653, 4165, 4164, 1648, 1647, 4159, 1642, 4157, 1639, 1663}], 
         Line[{1640, 4132, 1606, 1610, 1616, 4134, 1618, 4141, 4142, 1624, 
          1626, 4148, 4149, 1632, 1634, 4128, 1643, 4158, 1645, 4160, 4161, 
          1649, 1651, 4166, 4167, 1655, 1657, 4172, 1661, 4153, 1604}], 
         Line[{1675, 4310, 1871, 4336, 1865, 1863, 4330, 4329, 1857, 4323, 
          1855, 4322, 1849, 4317, 1847, 4283, 1835, 1833, 4306, 4305, 1827, 
          1825, 4299, 4298, 1819, 4290, 1817, 1811, 1807, 4284, 1843}], 
         Line[{1682, 1837, 4309, 4308, 1831, 4303, 4302, 1829, 1823, 1821, 
          4294, 4293, 1815, 4289, 4288, 1813, 1803, 4280, 4279, 1797, 4273, 
          1795, 1789, 1787, 4268, 1781, 4262, 1777, 1809}], 
         Line[{1685, 1671, 1673, 1672, 1676, 4183, 1677, 4184, 1678, 4185, 
          1679, 4186, 1680, 4182, 1688, 4190, 1689, 4192, 1694, 4193, 1695, 
          4197, 1700, 4198, 1701, 4203, 1706, 4181, 1707}], 
         Line[{422, 2719, 2718, 421, 2716, 2715, 420, 2714, 2713, 419, 2711, 
          2710, 418, 2709, 2708, 417, 2706, 2705, 416, 2704, 415, 2703, 414}], 
         Line[{1710, 1683, 4188, 1686, 1690, 1692, 4196, 1696, 4194, 1698, 
          4202, 1702, 4204, 1704, 4187, 1714, 4212, 1716, 4216, 1722, 4219, 
          1724, 4224, 1730, 4225, 1732, 4232, 1738, 4199, 1740}], 
         Line[{1741, 4201, 4200, 1739, 1733, 4227, 4226, 1731, 1725, 1723, 
          4218, 4217, 1717, 4213, 1715, 1705, 4206, 4205, 1703, 1699, 4195, 
          1697, 1693, 4191, 1691, 1687, 1684, 4189, 1711}], 
         Line[{1744, 4211, 1708, 1712, 1718, 4214, 1720, 4221, 4222, 1726, 
          1728, 4229, 1734, 4233, 1736, 4207, 4208, 1748, 1750, 4240, 1756, 
          4243, 1758, 4248, 1764, 1766, 4253, 1772, 4228, 1774}], 
         Line[{1775, 1773, 4255, 4254, 1767, 4249, 1765, 1759, 1757, 4242, 
          4241, 1751, 4237, 1749, 4209, 1737, 1735, 4231, 4230, 1729, 4220, 
          1727, 4223, 1721, 1719, 4215, 1713, 4210, 1709, 1745}], 
         Line[{1778, 1742, 4235, 1746, 4239, 1752, 1754, 4245, 4246, 1760, 
          1762, 4251, 4252, 1768, 4256, 1770, 4234, 1782, 4264, 4265, 1784, 
          1790, 4270, 1792, 4275, 1798, 4276, 1800, 1804}], 
         Line[{1805, 4250, 1801, 1799, 1793, 4272, 4271, 1791, 4269, 1785, 
          4266, 1783, 1771, 4260, 4259, 4258, 4257, 1769, 1763, 4244, 1761, 
          4247, 1755, 4238, 1753, 1747, 1743, 4236, 1779}], 
         Line[{1808, 4263, 1776, 1780, 1786, 4267, 1788, 4274, 1794, 1796, 
          4278, 1802, 4285, 4286, 4287, 1812, 1814, 4292, 1820, 4295, 1822, 
          4300, 1828, 4301, 1830, 4307, 1836, 4277, 1681}], 
         Line[{1839, 1896, 4358, 4357, 1892, 4353, 1890, 4352, 1886, 4347, 
          1884, 4346, 1880, 1878, 4314, 4313, 1869, 4338, 1867, 4334, 1861, 
          4324, 1859, 4327, 1853, 1851, 4319, 1845, 4315, 1841, 1875}], 
         Line[{1842, 1806, 4261, 1810, 4291, 1816, 1818, 4297, 1824, 4296, 
          1826, 4304, 1832, 4311, 1834, 4281, 4282, 1846, 1848, 4320, 4321, 
          1854, 1856, 4328, 1862, 4331, 1864, 4335, 1870, 1674}], 
         Line[{1872, 1904, 4364, 4363, 1903, 4362, 1902, 4361, 1901, 1900, 
          4360, 4359, 1899, 1898, 4340, 4339, 1894, 1893, 4355, 4354, 1888, 
          1887, 4349, 4348, 1882, 1881, 4343, 1876, 4341, 1873, 1897}], 
         Line[{1874, 4316, 1840, 1844, 1850, 4318, 1852, 4325, 4326, 1858, 
          1860, 4332, 4333, 1866, 1868, 4312, 1877, 4342, 1879, 4344, 4345, 
          1883, 1885, 4350, 4351, 1889, 1891, 4356, 1895, 4337, 
          1838}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
v2RKlzZZr5zp+XXRnJdwv2HPYi2JZLzdYn1JjOBMQsSI++x18ei5dmH1wpne
uKtbOvsQmW8SFT9o4jYWP8DET1ncWLxBPBVvwMSbUfVYfKLF3bH4RCY+Dcff
K9Ori8EsG65fXx+5or5FiIcgmde7YvH9++TTUUMw+7jdlli07Cq71Ufw4c5t
t0tN5enoPCXnjMzbYLTdMuGDBJmXkgTX2/o5iVju08QhG+6EEuMsPkkROw91
fph6U8sDzzi+zcHNC4Bn2dTHAeS7IqZj+xfmU/sXmP3rT+130Kb2O7TR+92b
wgf4ROEDMPjgqTGGJ3iawhNk8EQoPoHjHfih6qqqHWvtk3B2V5qUEVl3S6sB
l+8itvhoRmbJgYkB6MSqmzmJ2GP90+jrd3K+4W6Y8+qliBUUxEZ+Gj0/fN7Y
b/7lQAaM/z3jk+/TUNj14UWqK+EFnXk3L3+cmwarFq3mdeoOhW9DInqvh//B
Wyih8BYYvN1O4TP0XR3DZ2Dw+ShrDM/BsngMz5HBcxr/cQeF/8jg/wmBMb5A
iZ4xvkCGL2opfoHpFL8Awy/PKD4CLoqPwInmI5q/IJniL2D4ayrFd3Cd4jtg
+G4yxY/AS/EjMvx4juJTKKD4FBk+pfkXaf5Fhn+XLIyc+0AlDKefX+hueyQV
/Ksmeu4ldhqvtTBd9j4cExJXCrF2pEKZfcFBYTI+7dhBY/4zCTgskTR++0Aq
pBcuaOYgetR6LJVi1NNwIM3m7FT5MPi51Ke4iPg/vDZRUePNJbyUUfNOZtEZ
mHBIcYolwYFOTbybr5mH94J98xUzfdH5jLhwNZlX9QneLYqFGTj+5IZL08h5
spjXXNKL6G9rj70WejMBXz180mdurIdnbNX3uZJ4ezVbt9zteyJGPc7Rqoi5
AAsVrxRMJuPLdgYqXnlpDz17Zi6WD4iHM7x4Oo2MhzaddubqlQfZ30K77Xcm
w8Inmvt6SBwujAVZn2o/nLDx2PXZqeGwrjV1KIKsr/SanlCDr9G4z8Lq9c7l
54H76tdN9mS8YvuBvA0bE5Ansqzs8zx9LJIWH59B9C84t7fiuGkYZjcK1x07
aI3Lpd5EGhH/z/tmpVCUFoLWC8IC/94wxmWTRuLqyPi5vZeuGxh5oQsH/0Nv
U1Nsme1gbkzih3dcj9f2DZG40995914uBzQVttj/inzXQ+TKdOOj6RB6LMv9
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
QSszTglNck8XoOWr2OS/bdv7sPNyPk40fyzqy5WMZzy4hzcQ+X10XVs4W10b
73vHhyYCZVijOc7/8YVM9ND71KBE7k0HaPlINvlV30zKz5L76aBdk9uZkXgM
r5bPeTDwvzq+UjZ7rlPnB+TaPXZ+QOb8oEPX981mq+9b3rRrg+L6IgzfqX7k
1KRwlMoujHhH1reErr+bwlZ/pxjK+/rVhBIsv7VVQvpPHG63zN2x5zULyml5
YTb5aOq8hAf8x85LyJyXOul77h+2e+5D6n4B1X5j9wtg7hdFdF3ba6pOGZk6
5YOv7k0LPJ+B5xqbj7vpJ6PiJM1vsWR95ek6vjS2Or67FH/BJYq/gOEvXbqe
8awHVc/InPeuFzlKPCG4E6TsbT9tMAcDNvg255DzSR1dD9hK1wNOp+sBV9y2
8PiZUIZ/W0709uam4e+24a5csr7VtH/msflH0B2lDs8qxFMS811u+sei+nLZ
7InkvHSQrnN8dYGqc3xL1zlKOfC6bxFLw+16Gqpz16egeeuCO1lkX3TTdYjR
dB3iVboO8dI+R91LO/Jx2ZbCXzKS+Xj6rqqi/CtyPqTlU9jkJwuzqlmz0pAj
7VryykemaNlexQtkP8rQ9kx0/Lc9nqvnXNs1bIdVxoK+LXbJUKhqfDWK8MtK
uh6zm67HZOqp368UeHfi6WWc/t0vz60nDxV3udjzkXPX+/+wZ1jtyMvv8lFo
Y6SzsNQwAfuPiqe6EHv46PrKbnWqvvInXV85oCWuuP+vN7q+fZWVKeEFFovF
nXtG442uA73PVge6lLqfwlHqfgrM/bSXln/CJv/H/8/NbSudsO/HcY7jwWfx
w/GrfwtInAjQ9vxls6evqaSm8HcoKEw56qucFQ9tbk4L9Ij+j3QdKBdbHagb
dR8H+j4OzH385X/YE0rleVCAyvMgk+fRoPIA2ELlAZDJAxRS9x1Mou47yNx3
ttL7JYltv3TEOzy1jQzFQ0Zcge9mFODa53ITvUnczuGbZbB6agAkaFrqrneN
gF9yUvwnyH5sputYP7PVsQb9+uN1k9yHo4dsNIyWpsBuufIV4sQ/N2j5r2zy
QieCK4uNvLDp1PO9CkczsKvwj+BxYn/IsoOzQ06mg4FlYL3pMXus4bvScYjc
4y4Kb7KwnVEErSfvTussKILLmb8vziX7sYPWz2n8b/13qLwT3KDyTsDknb7S
9bZJbPW2oRtzG0pvlkCVdklf74MImOS/yCyC7KMf6kndJrZVcNj1j0BeaQrU
WSytNCP3LBsqDwY2VB4MmDzYAK0/iE1/JZWXgw4qLwdMXk6crvPlZ6vzJfCe
OTL5Kiy6vCc3V6gI2s3/wIc8wke1Zb/S3teCX31DzKKiAmhIUTuJNYQfqfwh
cMmM5Q+ByR9O7aRwtZ8NV2dS+SIUofJFyOSLtOo/6Hp11ICgoOpeSfE8OGS6
oZ2vkQUua3aHLOMvA2/HD2FGnenQaTQUZdlDzvNUHhW4zMfyqKBK51EDqbwr
yPKM5V2RybtaUfleeLR9LN+LTL7X5/hYvhcKqHwvMvlezbqxvDEoUXljZPLG
b7u2B2zx9cDYdM1eSUEHONqYKH2C7NPgnMg7XdUxOP9Twynj9B1o3Lk7ePR9
u9b6GTYFFcH4wWuPurG1EmS2fCl/Q/xTUb7OeCTcDmyTb767FkzW/XDOtwmj
uEfXqb1lq1O75RSqbPsgDevlL67MMN8KnMLSxY9JfM5uSVH5OCMLb5Y0Tl60
xQeP7T+0kO87CyZt3Px3XcolXJKY9PN1czDm7Z4nmkL8bGAaMa2kLg/71n06
/7AlAh/x7l+9hZwn+VW6eDKP5+LloK2mua2hqBuouOkD2aeNA/WKJ/R1ULbz
Z6q9oC1eXDc3/iGZbx5dJxjKVid4fCgq34X3Irauc+usRXfsWJQ1pDFaj0bX
4fKy1eFWa3Wrf3p5Fh4+cD//STAKYiWXPn1Ixl8MB0f19/viIs+o7inbg3He
5co2OeKfY7QefjY9t4W8tGNCLuGb4u6LkVaRmNEtK3WL7IsNP48qdOumYXGr
dOZywwDcG7PKew/x23fdnGXjbCNxjcm54LlFIThxnO7ITeJn7f/QP+v57+66
NZHYLzot4wRnOAayONa7EfnDdB3xarY64sUTZXe+M49Gpx1c6poubnjRKzF6
9D2GuRCnkfQrMh/dKbMXF57DzkX9Re1kXrHS916LKcShTPwcw8KV0RinJ1F6
m+DzMVr/Wjb9FRERESu6fHH7cw6PEx2u2G4lvXWQ6LGk65f3sNUvy/8Zd+4v
SxmCz8+wsjb0hs9uX7hH67bme4Q6H8t2Bq55C09PIXjg+efI5pvEzv6tGUe9
dnvgJfElzcsv2eEW597Uk6Pvq2n9qmz6dz+J2ClWfA7P3eYvOt5mjVILf+W3
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
U9XO8+oigTArv9OwQisZZ8bqPBgdn0P3JzxO9yespfvvnQ1tzTzACoOFPX1T
jc+5Q1G98sTR98MqtD2SbPZ0dY44b2aFwttpiYH9MoYgHrG5OuT/lS89/E++
9MMXo/4HN4IgZpsHZ8++RLT+461uRvyTTvdFXMLWFzF5nVxVqJIr8MxPH/+0
LRmXq3233knkk/+jj+KlBYI7J13xwwIrnlaN2QnQHdN4/DORz6D7EMqz9SHk
ps5FuJY6FwFzLppA92N8yNaPUXycwjI/Xl/c/OHh9gHfJPj48KPk+V+jdRb/
7mfI+LOvyW/uEi1/+NzhnWotZo8ThSav4//L+Mee9supf/7/gir7CzpKxp6Q
OCuy54NsIHotMawYvX89Y+vTGET3abzjZxxrqhaM89a/89/TEgUGl7KDkNhp
9x99FNMWBAhmDjljltRtl7SqWLAyVyn/SOStafmFbPKmR3atPVHhDr0/Ez83
lYXjTP5ZtW9G+/nQ9hiy2fOgXP6GxWs3mKM4Qa/YNRaPjrvC85Ton033k+Rk
6yf57uKaCT8veSPXszrZU8FhIBiQO6uf6Lel7RFjs0ddfGHUzeQg3MV1fr7R
a284nx33zJh89wDdH1KZrT9kJ+Uf2En5Bxn/pP9HH8ud1PqCPbW+yKxvPC3v
yiavaNFQ+f/Q9d5xPf7f43+kkC0ZkWwhM1TWQdlSUiGVpKLSVCqkvffee2vv
ojqEpBQysislhAohGf0ez67H8+3zur4//16303mex3msc07Xde72d/1QY9ee
N8b85jB5nOCK2//Hnr0se2J9Tr6daemH55VyMoe0nkTsGL2ak6econ0so1h9
LGOY9QwZzHpG7nqOofbYs+wRvH9dreJsCIy4YTrSRioKs7v3vnjX/7c/Zwur
P6eK5usPYauJS9I7F/MkRUGsXtNAE9H/ifaxjKF9LBNpH8uJjH6cyegHrv7U
f+yvXad2fZ5j740PTizoDZ8UC9elygU0OfuF6o9l6f+2KTPcyiQQMxcK3ozV
cUXvmbjyN6cOQ/2TwvLPlH1rVDf+IPYEpsS2zQ/Ercrempy+E2dp/8/9rP6f
MXu9hmRODMBQU+vRHfKh8Gz/l8vhRP4rtSeCZY+qLkL1kjDcZ3vSWzXSDzoq
g29z+knepf08k1j9PE9OyxTfetEPl29+NO4c2ZcLVk5b2Eyea9G+o9dZfUdz
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
0s4pSPjFwVq/gaCDCoHQ+3TJlC1E/+XhpusTsuLB9UrkPjUlUxB20bsmQOR3
MXVOuMDUOZFb53zM1EXhFlMXRW5d9DxTj4V4ph6L3HqsIFOPxb1MPRa59Vhh
pq6LaUxdF7l1XZ97hoJVE8xhQmqgfFNtIGTqbhh9lMzLpFftMU6pTqhx7Hy2
fl8KHBGyjlUm6/xrecmRpUmWcKLR0XLHjgjQWvxOazGnH+++yUk4LhwX7/it
M8E4GY0kO++rkfN5O+UqCnT+l6s4yvekyektvlh/NOvagh2X4c/ETwO6nH7d
daMzj+3JxalWci94ZQvhw7dfcXEPu8FbT2LM/OYSfOwyat6WnxlgdfOS5VAi
b7p3aeVrXcQclUyPndtPQZGFltzkqm54aPNxeYUHouuk8ooO97PY5clnfvIq
udc2/H4+foIOGsvpv1zjWYoLx5wz2PCUnD+Ua+lNuZbZlGvZsppntcfzULCQ
VTb9vCMYZCvVbYdweIKUD5tA+bBIOZIbhd/NHr3SGsr7PhoM1bSHs97w3Ivz
/tuNNuOnV8KgMzFp95HrkTAs90sDJ792ZHFmuXqUlm9uzPxdgZpHSpTyJgWj
tDlYNt0g+8tITMQ67xLerBszVM41BCdOvP7r8D1yzneKdSsK2ENK9PvF1aWp
YH/s2Lr3RI8t1Z/J0q94pO7+oXlOcHlns1KCaiKsOrw8Bck5qU/5tv0svq2I
z+br6R+L8U2p+LH3pZE4zTv44zgSl65yv7Rpr3IJrj5xke9CURzG37af5vyk
GxpmTNeU3xqE9bm+6523e8Il80ZbznciOlT/G5Z+3Kv9aeVnTbyncnMVr5c/
yO1VD7vJ6XdKubqzWVzdtuV2x28czcN3D2Z0wcQ47P288dV4sh+TT/en39HN
xL3rr5t5fotB+epLtgkkbnT87XJ4hL0Ojjr5QkLWyAbCjmsnVg381S/C0v9o
jfKa11rn8fCIVncx7+MYbb/l4k0iP4/yfAspz1eN8nwVDVT6ditm4Ra5Wj7R
nASUeiczagp5Pu6PT8Xp4iTc3hxw3W9TOt5+n2alSOy5bR2TvMwsDu6nNyYo
dKTBG+WB6YIcfjTl9tJ1CNx1OCVcckQ4vx+4VH9bNTfHCz6PuWbI+T/UZsov
3sDiF6/JS1vp3JgEsj8sRm8i+e/42rk8U8nvLqD831wW/9ehNmnzt1wrOBb0
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
P8+m83KbNS/dH7/Ku97zBXcJUQWlR9GQenbsATeynvd4VuzbxecNIiLHmxTH
RgIP1K3dz+EdUy65CYtLHtLRm46TiB9fiQdI80Wg/qrk6gEOl1zyhGmiizOa
GcX9eLM4DDftGfguw+k/T7nzS1nc+Q8PBAKSevRhwZ09yidNXXF4wuOtBkT/
auqfvLb/+seB8uJNWLz4H0ai2iVLQ6H50E7tpOlG4Np6xOkx+d1llA9+hsUH
j6dc9WgWV134eVplsGsiDKxqff5YyhX2+3t0OJD5XUn54DtZfPAwyluvY/HW
BVvk94VYJUGutdjukOYgKJwe9LOSrB9DyhNPZfHEm2LkRSQ1o+G3lPOMs4t9
oD61cQfnOxdryvVeyeJ636Zc7wgW1/visPH8gi+8Ie3TtJuB2nZwhndc0wtO
X8RSm2nnV0qj4OqGEjEfN1w7eu80DgczeXYPmJP14fD8s9OBy7IYdNXoLWed
rKJ+s2f5LcLAS3nj9AR4KLM8dF9TKGgMa9JOJfsr9B/c+VrKW29k8dabhPaP
+iKXBksn8W3wOh4N15a+/aFFzoEb/+BTy1Cutz2L66268+eKU2XJ0KDdum7O
Dm9wXm4y2H/yCOV6F7G43gYLb7UmSkaD6IBB09VdB6Fao2xMGpn34ZRbbcji
VhcUep4ekeoEYhm38gw3+2K/sqR4PHl+i/r/NMv/HYcYnvVYFs86bO8Y+478
Uxgx7NDjj6HhOBJSB45z3ot+lFuxbMAPREQTpB6LhkG9YH9PGLGnfl0+tkfE
wFR3n+fTCmKAzzqEL63vL0/8Pcs/7+wNdMIjIqG2Y4nlI9dI0Cx/7j6OjNeK
8rJPsHjZZy7MKN431xFuRua+29FjB7teCReokXk37vDWFV9sVv5bovqKebvB
//LT8Q1P+J1Ou6EGT19kWZAjJq+Iucjpr8JD/abH8tteymW+wOIyv4xouDox
Ngrfp0w4uGVFNPI5+C6zIuufn3KZ17C4zPoPxDRjv0fhQLDPz6iRsdg++WZt
L/GD9j+4w2KMP3Eq40/k+nPBvkH/w3bG/8D1fzYzvxh4cXB+gTu/0yn3+efM
/3Kf5/smXzLkicOCw+G1Ub2aOMXHW+An5/yk4z3HGq805S9rs/jLAY9X14pa
pmBWYO0Z8ckBmOfaX/eA3DsmlC88lsUXNgu1q5FQTcOAS43Njy+S+D17u/iu
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
baK/yxHc+qdqytiPhXD2db6vA8nnBzm9RzzD6T2CQO9xUs726e8vOeLVW2Nz
efal8EXp6TWhxyR/ek98knEwGA3P/Wxcd6cEbqhtneVKxg2LpDavN4jBl/oL
v98ZmwJ157aHppL3Iq7EM9tKNxHlbETv7/vsjDZNreXbST3geS9nTev0JJz6
dOpO3ZiD6P5nWRPfb0iu8VSSv0QiVqXqmnW9D8ApA0RyU8m9ECFxT17lfTw2
2Dt3pJnH4/UnRyVVSV2tovGt2/1IJD4NuDlhct9ofPqk1Hs+mWf4ki+6Qp2B
OPrELRWjcWH4fu++hY7kvLnefjRcWT4QZ43V6dYfHIR+16XEVcm5GhKjYXPc
MADrNc50uEv44pkTa56+J+N71H+VHC8LwR19Jsjq7PJHr6JIhTFk/JLvAmUt
sUgccGW90L78AMyG+bUyZP49b2ryp6jG4fzhIpaXajwxe0Vnqw153+Opj8wf
6iPzgPrISC6xbRWvtYLRY8tFvpsUw82h/fYWkzrBuI9dk7aUC2aqHtm7XKoA
1u1o8TR49+/9Mpn7bvrRlbF4deex6nkDgsD91btRvcn3WlG/mL7UL+Yc9YuJ
ofsygdmXeRnRz967ROGry3kjDrxxw1Gv2i1OkOdqf7tx/Pb1gegx3n/g0yde
uLd03G9+fNqEzgQM/OyAzknT5MbMPY2rB44at6bH9+r/9oW507Vcbo67PsSk
HLhYancKq8aK5pSSz7c9eXIh79g+eKcvdsq0txeeaWyv5eNaw02qqgds3w8Z
wxbUdNUEotAKBacIvr7c7YLC6TNIPnEx+BkTFYyJ80wiJPn4Crovo5h98Vh4
4fmz5T7Q5CLcIGoeio//GL7g/248U3/xQOUcQ+iULtUd8S4e5yrEhdj++uvD
0kF9WMyoD8uI9K3L/d9FwrNap6KTUgkgYTemLobkn/LvCuOGTFmC9yZIrpKL
jCJ1revVfny9XOqzk8347DQkqly8JmaNsXD4qmGLL+zK3z/gPd83nMYniomP
JfXHCWb8cQqL79vZbTCBZTceXNn50R3crfLua3T/9XNh/VCCqI9MH+//+sjY
SS62TU0LhoroTxtbAwJgXR8dH5k//HqV80M5wvihRFF/mXrGX+b+L73J/l0J
MMtGpio+7xToVHdWZ3b+9XNxYvxTRnksXxNYEA4f3QfGSo9LQtRYtOYlea+/
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
coWaN2aXRpPn7aZ8ohSGTyTb88OJ89KYVg/yZ/C/30/0Kd9qIMO3Gtmcf352
tz8MH5+4qHV8ODQO6fwQTtaze92vuUfPpcDt/e2LJ671Adc5Jj0+L/WLC/FZ
ZCwM8vC9P6ooFvrZhPZLJ/vbSXlYlxke1g6bYXjbKgWsDe3HnA/3hBjDlZnS
5PN7/C7NGmKWCLUpZwzLjjrAhWjdVSYkniayde1JC2NgV/eRlmpVLbikc04y
nczzk/K5Whk+F8/xiEFEZBRcfyFn1ewWBXoV9z2kyLjWi1XL1yTGwpT0/Ku3
F4XDfZ+tm8X4Om+U/3WL4X9drBs6yKV/IrxN0tsBUkkA99o0lpLzv8X0bK2P
UhREjir/9UvKCWyszwyrI+u5UOxl1j/NBYZk1RUYrfDDzu0LZyaQ+E/j4okj
uHiiIJ4XNlR3HQ+Lh6KA+J9WU6NARjn8fROJw1HKLzvA8MtuTB6ze/w3d/Bp
t9n4cIozzgu28+1P9qtWSyU7BjZin+1dsi6bIvGc9Qtlfp5X2yjp+KLwKPr3
3dH6LiwCRSGtm+/350x5bUcYXpvPyTGlmyc5Q1NU/uu1H06B6hPpot1k/v33
rh9/VRSGZ0mHtbPbE39Hlt4ewcc5Uz6XOcPnWrG553tBhfteEHzvv3hwXxvb
hF3M3HFrrx9R54KdMWVubCYfX9cuxPHd0hm+WwYXZwzI7IkzCOLsnNv/yYwO
a7C7vDRlioUV5vomXufju7Kvc/y4qww/bjnlx1kz/LgbkdeqB8dF47PUQVor
58ZgPye/2dYk/jJ+KWVGveIxTDuiPvqLHo7w9RH7Rd7H1L6HVskOswfT8tDR
sl4h4Grb/KmTPO+SX5VNM90ssfP3jia39hC86//OpDdZZ7dJlvxGg3icZ3lK
t8EgCSNnCg/k19t7bk/Ti/sejd9DfH9Fi8bhs+GX67+QePr14fh6eQxfL5fy
0UYa/ZePlqzgc1NthxtuXOIadV7EGIZr3i3i62HOfrB/bIiwJ2rPu1tdWR+O
IWddH/P4OpOU97eV4f0toPy4PQw/zrd1fv14q1TMCKq3nDk8EAvcOhtuk7ru
2mW/+AV6Sbgu0C1ou2kA7nxavY6PbyynPLhuhgenQXlwzQwP7msuxysMZHiF
0rtazlbU+mCkuLz6nnQn/KwXZ9XQ9W++oUnYqSsKO9PRv+zmo9bMGIzIVZmp
St5rpRLJhsqAeAw5N+4G3gpAuUFxXlYkDzRSHuJMhoe4eZ13sEVsIjre1fow
9HsE+g6wm/CJ5L20YTnnw4UycMOBB1P2zIzH65csM2RInXlr+8dfO32TMPnY
tnm9FEIx1H+RxUjyvDzKZwxg+IwDKW9RkeEt6l40HVhLzkGOw8IcLVVXLB69
YmgDGX9ZOHnTeuVkVBuYrm2zOBIt7pZce0ri/yjirmuIfTL2VirMOhwQgtod
cmtiyTpHZ6uPEXWIxYe3VewPHI3AUyXjRVvIebbxTG5alBWJRq31qskZAdi1
6pJPL7KeCMqXdGL4kv+vrvOO5/L7/39LQ0lLe4iiqaWi0lNGi6SyskISSVbZ
W2bZe++RLVvpKSRRSCINlRIqs9D2O1evy/dz67r93rebv87tup3rvM451znP
53Ee98fcC8Hpjly+2G+e0zs9cSPeqB0W+U363ydvvqvh90TcdHhAUXmRJ84v
s9lD+WU0NjjfqCpMROvZaZf2dfuixR62z5tI+YRdSouNOuJQOiJO+vIjd+Sp
XCelQ/o/2eTbNq0VXji/9h7fETlz7GlV4qDWgUT2A5ISdwzxrLP+Vva9bvC4
t1ieipe88v/GUZDPiqNgPI7KZMXVUMeKq0GPjqtlaV0nMHSdZv7Tvzybbglv
PsUf/TNyBTgzH2SUUr4tO3sMB2WS4MfPhX2e7f5w8HNHvBPFBRppixjamQgz
dcKap73yh4qMhfLC5HclCK2+a3PbE+Fh3nfxNxF4S19rggR57wNaHyrL0Ie+
XcOTEn4uEJUEbwp2sBvi0c1Rr2Sp+UzrQFUYOlDr5qMj/Mkkjg9839vzJxi3
VCYGepN6NKwvc5qpRuOluSlqF5f7YmvlhGPU+Y8wrRvlZ+hG9WndaLDFv7rR
JSvdv0/7tgSHKqOf68R4gkSkXq0MKU/jPHyjQ9YGvm9c/HHUygTTl8d4FpNy
iUvDM/aSdT+7Xmow4Uwghu8rSRCjdM20/tSeoT9NvTLkOLrIAtsXJufJTPVC
+/6yxTNIPREW80bvFDvinc/zbbw6bEBcoEmeWse+66/yGxi+CpyNx3GaTTjw
V2YFNJN6Yll5EDiw8iAYz4M8aX3rR+1/9a0cSWFlp8Vc0KBOzNb/kDnJk7J4
DCg9FK17bWToXrV+nP86ujkQ+u8u63y/6Apkhwf3UedLjq3z31QdvwgSZ/Ly
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
6WDTRdrvSPMq9Ri8ylCaD2nH4ENesXn+ZWRnOHxTOWhun+AKV04cL6B4Jgdp
nmc0g+f5mV+yUf+XMUzN1j/2x14ZTG9VzaD2NTOOPVbJKYFQEDkk/czPDw5P
VvfiJuOoSPM/pRj8T7fY5RrHfgbDwtb0s5ucXUD5ZsAsG/J81PNLWjusyHfX
X9X0PdMOipa+KjYk/RZaLKTtJhsHVSfX52oGhkB814RFa8g8f/ZTY43vnzjg
seQuj812APW7P+6mUf4FNF/0CoMvGtc37ViDeQa8bij7ImGdBAFs0w8vJf1T
OW/mueMaBpBewv7h7Hwf+H5Qcv5E8rvu0jxSVwaP9KtGldqDp4EwYmCrtnHf
NVg7E9UDqXn7vOlIwWAAQFJr4+EbHvj1jKsbpduSYS9pef8zDCzOnU4ZOu2F
ebZvJVx+/Y9reoHBNV3qsV/SPzcU+t3nRC9dmYB4Skiyi7qvS3M7NzG4nWyW
LsLecSlg+eHkqqBLSfBii9NkLpLXrOxV2/xkTxHIuY8occ6+CTY/9WWLSdye
ajf2o9OkCMQcM7q/haRBsvR6vitNJM4pFkrWSPaEe0uvyOZPSMHDWu+yppP3
7qZ5qpYMnuolmi+6k8EX5aR5qj4MnurrSrc7bUUuaP82wGjG41BQ/Sy8iIf0
j4enf2rQjWJoW3r68ka9eGjEab3+zf2gMhQcWpYaB5P2d5l9Ec+HUskDv3RI
/P+D5qyaMDirZby/Vao35gK8KTyQ6xMDhYoCIcmkf/Y1vZuyJq0EJF8lzqwu
TwDrpHjdsEYSV1+Vvt5bnw3Lgz04PUy8cPY9hbpTZL+Lo3mthxi81hy9xybK
95JBzN82u2tTKXQvPnX7I4krdKY+OXxhXjJ0w+qRPS9zISj4V/D59//ju+5i
8F2tj1XzWzTlgKSsl/z3VeWgrz3k+i6D7MsiMpE8LdFQ/aBdP/ZrPNo6TbRP
I/uOppuhVbqCG0yzmJM/eV0Bmidpphq/64dZVX/7E3xY/Ynj/VklWb+AfUsm
bHva1qA4Pw/k2wbr28n+20zzYycz+LHsmTZX2peagVj+7uQD+wrQ4M7R1iRS
/6vJIusmTzqOf04oruhdUIKb2F0OB5F1o3FP5k4vF2tYw11b4a1WiGymk0tt
SX5qZbllX0JeCswqUxFtmRMALbvnPqgj8Rg3zbN1ZfBsOc3WlOiUucHdTFNh
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
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.09259458092137765, 0.7486122776543305}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$5912, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
    1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10, 15, 20}, "numberOfMasses" -> 3, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.8200836820083681, 0.1673640167364017}, {0.6778242677824267, 
      0.6485355648535565}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
     "pointsDataTable" -> CompressedData["
1:eJw9kkFKA0EQRXsSo1EkeAWvYLKvOoNHEIzuvIpLM2ThNVzVbIPRjausFARh
IKBiCEokmun/fwqaT3d113/V3cdnV6fn7ZRSM3qb0dqMQb+JryhHTXSqYY43
u8i6jodpEzuO/GdIkV9yXhvqvMYIdfwm68T+crzHbZ7fsd7c5APd9ZTj2+6R
jz64DOsf1ORY33Odg18dSG85WffAwbUiZ1GV5BI/eJKLH/mfeCQH1p9M/PAr
XPzkDvQ7s5IqfuxrufiH9EV+xfMvJn6st138GWO6YH9dcbJuj/3WUWBDpf71
rjo3BleQOy6p4rxGfwa/Ln3ndsJ7oRrua0H/JfvdJ0fhv/m9n+mz1j1zX2fb
F7gO+U9moTr6B9Aj/westChU
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {10, 15, 
    20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 3, $CellContext`tauSliderValue$$ = 
    1, $CellContext`tick$$ = False, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 
    0.8}, {0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period, t/T = "], 
                 Dynamic[
                  
                  N[($CellContext`tauSliderValue$$ - 
                    1)/$CellContext`dynMeshSize$$]]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {
                  1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open", 
                  AppearanceElements -> {
                   "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                    "FasterSlowerButtons", "DirectionButton"}]}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Row[{
                 Text["Angular frequency \[Omega](q), selection:"], 
                 Dynamic[
                  SetterBar[
                   
                   Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["number of mesh intervals "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 8, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`freqMeshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin], 
                Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 8}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        8, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}, {0.4, 1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 
        2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tauSliderValue$$ = 
        1, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], 
          
          If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
             Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
           LocatorPane[
            Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                  Dimensions[#]] < 3, 
                
                Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
                If[First[
                   Dimensions[#]] > 7, 
                 Take[#, 7], #]]; 
             Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                First[
                  Dimensions[$CellContext`rawArrayOfMasses$$]]; 
               If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                   $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                 
                 While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                  Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                  Part[
                   Part[$CellContext`kArray$$, All, 1], All, 1]]; 
               If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                 Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                 
                 While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                  Part[$CellContext`u$$, 1], 
                  
                  Part[$CellContext`u$$, 
                   1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                Part[$CellContext`glConstLocDefault, 1], 
                Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                  Part[$CellContext`u$$, 2], 
                  
                  Part[$CellContext`u$$, 
                   2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                Part[$CellContext`glConstLocDefault, 2], 
                Part[$CellContext`u$$, 2]]; {
                Part[$CellContext`u$$, 1], 
                
                Part[$CellContext`u$$, 
                 2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
              If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
              If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
              If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
              If[$CellContext`omegaIndex$$ > 
                2 $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
              ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
               2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
              True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
            $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
            LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period, t/T = "], 
                  Dynamic[
                   
                   N[($CellContext`tauSliderValue$$ - 
                    1)/$CellContext`dynMeshSize$$]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {
                   1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open", 
                   AppearanceElements -> {
                    "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                    "FasterSlowerButtons", "DirectionButton"}]}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Row[{
                  Text["Angular frequency \[Omega](q), selection:"], 
                  Dynamic[
                   SetterBar[
                    
                    Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["number of mesh intervals "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 8, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`freqMeshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{915., {292., 299.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax, 1]/2, Part[$CellContext`qMax, 1]/2,
                Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -
               Part[$CellContext`qMax, 2]/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {380, 
        380}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, $CellContext`k] \
$CellContext`glConstMMax^(-1)/350]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
$CellContext`glConstMMax^(-1)/500]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 0.25, $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], \
$CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6013889001492734`*^9, {3.6013891792952394`*^9, 3.601389191095915*^9}, 
   3.601389343635639*^9, 3.6013896010413623`*^9, 3.6013897227443233`*^9, 
   3.601389955778652*^9, 3.6013900783846645`*^9, 3.6013901373530374`*^9, 
   3.601390518838857*^9, 3.6013905597761984`*^9, 3.6013909951881027`*^9, 
   3.6013910467940545`*^9, 3.601391822685433*^9, 3.601392104940577*^9, 
   3.6013921467239666`*^9, 3.601392239999302*^9, 3.60139238315449*^9, 
   3.601392440920794*^9, 3.601392470945511*^9, 3.601392610517494*^9, 
   3.601392688817973*^9, 3.6015965463323107`*^9, 3.601596652471382*^9},
 CellID->138791400]
}, Open  ]],

Cell[BoxData["\[AliasDelimiter]"], "Input",
 CellChangeTimes->{3.6013905751210766`*^9},
 CellID->73064412]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell["\<\
A lattice of atoms can be modelled as harmonic oscillators, with forces \
proportional to the displacements of the atoms from equilibrium positions. \
The simplest such model introduces coupling for only the nearest neighbor \
atoms. In this demonstration, a lattice cell containing 1-5 atoms is \
modelled, with nearest neighbor harmonic coupling to the mass(es) in each \
nearby cell. Normal mode solutions to these equations of motion are plotted. \
Controls are provided to alter the coupling \"spring constants\" and other \
free parameters, as well as controls to select from the reciprocal space \
vectors, and angular frequencies associated with the normal mode solutions. A \
time control is also provided to display changes of the lattice through one \
period of the lattice vibration.  A plot of the dispersion relation, showing \
the angular velocities associated with each reciprocal vector is also \
provided.\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.6008873855675645`*^9, {3.601208787872481*^9, 3.601208804510481*^9}, {
   3.601209090380548*^9, 3.601209091209631*^9}, {3.6013823516277194`*^9, 
   3.601382454828622*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}}, {{
       2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}, {{
       3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}, {
       3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}}, {{{
       1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
        0.09999999999999987}, {{
        0.19999999999999987`, -0.3999999999999999}, {-0.3999999999999999, 
        0.8}}}, {
       1, 2, {-1, 0}, 0.25, 1., {0.9, 0.7}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       1, 2, {-1, 1}, 0.25, 1.6899999999999995`, {0.9, 0.7}, {
        2.1999999999999997`, 0.7}, {{0.9999999999999999, 0.}, {0., 0.}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 3, {0, -1}, 0.25, 2.2600000000000002`, {0.9, 
        0.7}, {-0.5999999999999999, 0.5999999999999999}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       1, 3, {1, -1}, 0.25, 3.3999999999999995`, {0.9, 
        0.7}, {-0.4999999999999998, 1.9}, {{
        0.5764705882352942, -0.4941176470588236}, {-0.4941176470588236, 
        0.423529411764706}}}, {
       1, 2, {1, 0}, 0.25, 3.4000000000000004`, {0.9, 0.7}, {0.5, 2.5}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 2, {0, 1}, 0.25, 3.65, {0.9, 0.7}, {2.3, 2.}, {{0.5369863013698629, 
        0.4986301369863013}, {0.4986301369863013, 0.463013698630137}}}, {
       1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 2.7}, {{
        0.05882352941176473, 0.23529411764705888`}, {0.23529411764705888`, 
        0.9411764705882353}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 3, {-1, -1}, 0.25, 4.520000000000001, {0.9, 
        0.7}, {-0.7, -0.7000000000000002}, {{0.5663716814159291, 
        0.49557522123893794`}, {0.49557522123893794`, 
        0.43362831858407075`}}}, {
       1, 3, {-1, 1}, 0.25, 4.879999999999999, {0.9, 0.7}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       1, 2, {0, -1}, 0.25, 5.85, {0.9, 0.7}, {-1.5, 0.3999999999999999}, {{
        0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
        0.015384615384615389`}}}, {
       1, 2, {1, -1}, 0.25, 6.289999999999999, {0.9, 0.7}, {-1.4, 1.7}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       1, 3, {0, 1}, 0.25, 7.540000000000002, {0.9, 0.7}, {3.2, 2.2}, {{
        0.7015915119363394, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 2, {-1, -1}, 0.25, 8.81, {0.9, 0.7}, {-1.6, -0.9000000000000001}, {{
        0.7094211123723042, 0.4540295119182747}, {0.4540295119182747, 
        0.29057888762769585`}}}, {
       1, 2, {1, 1}, 0.25, 9.009999999999998, {0.9, 0.7}, {2.4, 3.3}, {{
        0.24972253052164267`, 0.4328523862375139}, {0.4328523862375139, 
        0.7502774694783573}}}, {
       1, 3, {1, 1}, 0.25, 13.599999999999998`, {0.9, 0.7}, {3.3, 3.5}, {{
        0.423529411764706, 0.4941176470588236}, {0.4941176470588236, 
        0.5764705882352942}}}}, {{
       2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       2, 3, {1, -1}, 0.25, 1.2999999999999996`, {0.4, 
        1.2}, {-0.4999999999999998, 1.9}, {{
        0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
        0.376923076923077}}}, {
       2, 3, {0, -1}, 0.25, 1.3599999999999999`, {0.4, 
        1.2}, {-0.5999999999999999, 0.5999999999999999}, {{0.7352941176470588,
         0.44117647058823534`}, {0.44117647058823534`, 
        0.2647058823529413}}}, {
       2, 1, {1, -1}, 0.25, 1.6899999999999995`, {0.4, 
        1.2}, {-0.8999999999999998, 1.2}, {{0.9999999999999999, 0.}, {0., 
        0.}}}, {2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
        2.5}, {{0.005882352941176467, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 0.09999999999999987}, {{
        0.34594594594594585`, -0.4756756756756756}, {-0.4756756756756756, 
        0.654054054054054}}}, {
       2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
        1.4000000000000001`, 2.7}, {{0.3076923076923076, 
        0.46153846153846145`}, {0.46153846153846145`, 0.6923076923076924}}}, {
       2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
        0.8, -0.6000000000000001}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {-1.4, 1.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {
        2.1999999999999997`, 0.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {0, -1}, 0.25, 3.65, {0.4, 
        1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
        0.463013698630137}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 0.3999999999999999}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 3, {-1, -1}, 0.25, 4.82, {0.4, 1.2}, {-0.7, -0.7000000000000002}, {{
        0.25103734439834025`, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{0.9846153846153846,
         0.1230769230769231}, {0.1230769230769231, 0.015384615384615389`}}}, {
       2, 1, {-1, 1}, 0.25, 6.289999999999999, {0.4, 1.2}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       2, 3, {-1, 1}, 0.25, 7.379999999999998, {0.4, 1.2}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9878048780487806, -0.10975609756097565`}, {-0.10975609756097565`, 
        0.01219512195121952}}}, {
       2, 2, {1, 1}, 0.25, 8.409999999999998, {0.4, 1.2}, {2.4, 3.3}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {0.4, 1.2}, {-1.6, -0.9000000000000001}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 1, {1, 1}, 0.25, 8.809999999999999, {0.4, 1.2}, {2.9, 2.8}, {{
        0.7094211123723043, 0.4540295119182747}, {0.4540295119182747, 
        0.2905788876276958}}}, {
       2, 3, {0, 1}, 0.25, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
        0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570139`}}}, {
       2, 1, {-1, -1}, 0.25, 9.010000000000002, {0.4, 
        1.2}, {-1.1, -1.4000000000000001`}, {{0.24972253052164256`, 
        0.4328523862375138}, {0.4328523862375138, 0.7502774694783573}}}, {
       2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{0.6138686131386862,
         0.48686131386861314`}, {0.48686131386861314`, 
        0.3861313868613139}}}}, {{
       3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
        0.19999999999999998`, -0.39999999999999997`}, {-0.39999999999999997`, 
        0.7999999999999999}}}, {
       3, 2, {-1, 1}, 0.25, 1.2999999999999994`, {1.3, 1.4}, {
        2.1999999999999997`, 0.7}, {{
        0.6230769230769229, -0.48461538461538467`}, {-0.48461538461538467`, 
        0.3769230769230771}}}, {
       3, 2, {0, 1}, 0.25, 1.3599999999999997`, {1.3, 1.4}, {2.3, 2.}, {{
        0.7352941176470587, 0.4411764705882354}, {0.4411764705882354, 
        0.2647058823529413}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
        1.4000000000000001`, 2.7}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
        0.09999999999999987}, {{0.00588235294117648, 0.07647058823529418}, {
        0.07647058823529418, 0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 2.5}, {{
        0.34594594594594597`, -0.47567567567567565`}, {-0.47567567567567565`, 
        0.654054054054054}}}, {
       3, 1, {0, 1}, 0.25, 2.26, {1.3, 1.4}, {2.8, 1.5}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.3076923076923077, 
        0.46153846153846156`}, {0.46153846153846156`, 0.6923076923076923}}}, {
       3, 1, {-1, 1}, 0.25, 3.399999999999999, {1.3, 1.4}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.576470588235294, -0.4941176470588235}, {-0.4941176470588235, 
        0.423529411764706}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.3, 
        1.4}, {-0.4999999999999998, 1.9}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999984`, {1.3, 1.4}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9283667621776505, -0.25787965616045855`}, {-0.25787965616045855`, 
        0.07163323782234961}}}, {
       3, 3, {0, 1}, 0.25, 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
        0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.3, 1.4}, {-0.5999999999999999, 
        0.5999999999999999}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {0.8, -0.6000000000000001}, {{
        0.058823529411764705`, 0.23529411764705882`}, {0.23529411764705882`, 
        0.9411764705882353}}}, {
       3, 1, {1, 1}, 0.25, 4.52, {1.3, 1.4}, {2.9, 2.8}, {{0.5663716814159292,
         0.49557522123893805`}, {0.49557522123893805`, 
        0.43362831858407075`}}}, {
       3, 2, {1, 1}, 0.25, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
        0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       3, 1, {1, -1}, 0.25, 4.879999999999999, {1.3, 
        1.4}, {-0.8999999999999998, 1.2}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       3, 2, {1, -1}, 0.25, 7.380000000000001, {1.3, 1.4}, {-1.4, 1.7}, {{
        0.9878048780487805, -0.10975609756097562`}, {-0.10975609756097562`, 
        0.012195121951219514`}}}, {
       3, 1, {0, -1}, 0.25, 7.539999999999999, {1.3, 
        1.4}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7015915119363395, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{0.4756242568370986,
         0.49940546967895355`}, {0.49940546967895355`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.3, 1.4}, {-0.7, -0.7000000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 2, {0, -1}, 0.25, 8.84, {1.3, 1.4}, {-1.5, 0.3999999999999999}, {{
        0.8868778280542985, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570136`}}}, {
       3, 1, {-1, -1}, 0.25, 13.600000000000001`, {1.3, 
        1.4}, {-1.1, -1.4000000000000001`}, {{0.42352941176470593`, 
        0.4941176470588235}, {0.4941176470588235, 0.576470588235294}}}, {
       3, 2, {-1, -1}, 0.25, 13.700000000000001`, {1.3, 
        1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
        0.4868613138686131}, {0.4868613138686131, 
        0.38613138686131376`}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.6790602328891914, 9.230900003615161*^-19], {Complex[
      0.7248589832535917, 0.], Complex[
      0.650064949116095, -0.020858686170711016`], Complex[
      0.11988513411713456`, -0.0981715969681187], Complex[
      0.15160623794564831`, -0.028647866526790612`], 
      Complex[-0.002472802788942547, -0.01713913715451654], Complex[
      0.05556524411678816, 0.01890267003822048]}}, {
      Complex[0.5524636587025472, -7.594543271602355*^-18], {
      Complex[-0.38354558530686395`, 0.09744499810272776], Complex[
      0.1619813466218059, -0.23832737428749207`], Complex[0.6766558452199941, 
      0.], Complex[0.5279467930943094, 0.011722985858567875`], 
      Complex[-0.0019794387381373065`, 0.0612963317654061], Complex[
      0.14074635807044672`, 0.0077645969691057665`]}}, {
      Complex[0.5222542056555272, 7.39373223091693*^-18], {
      Complex[-0.5047764091042254, 0.08027140607893792], Complex[
      0.6076266586520926, 0.], 
      Complex[-0.41722429897453955`, -0.26584428115246467`], 
      Complex[-0.11870218623554862`, 0.011771602360776734`], Complex[
      0.10106066627579662`, 0.15510216234064736`], Complex[
      0.24672133224192438`, 0.12420825231706026`]}}, {
      Complex[0.47798270089481093`, 1.705186367657685*^-17], {Complex[
      0.11776747404882068`, -0.17021352942962187`], 
      Complex[-0.19349636076477256`, 0.18545691772731276`], 
      Complex[-0.005098087736675982, 0.0481703582836023], Complex[
      0.12443545522518613`, -0.04846883240430583], Complex[0.7520021001235273,
       0.], Complex[0.5450959458974042, 0.050065292585647264`]}}, {
      Complex[0.4208599945029234, 1.7181192359807767`*^-17], {Complex[
      0.046412084869462106`, -0.0633132278362492], 
      Complex[-0.15001494768060744`, 0.1368626263531111], 
      Complex[-0.49457449633790096`, -0.020339968952328036`], Complex[
      0.7465187765334863, 0.], 
      Complex[-0.3425167147633056, -0.05320301419822421], Complex[
      0.17190685158210708`, -0.02435844462026826]}}, {
      Complex[0.3371723422003491, 1.2680207595331082`*^-17], {Complex[
      0.08250671501222374, 0.03036710231625256], 
      Complex[-0.10759757386702096`, -0.00917692568070801], Complex[
      0.15992951319705684`, 0.020880420200147097`], 
      Complex[-0.32856173648033754`, 0.004931060374980048], 
      Complex[-0.5245849484304596, 0.028709761501831688`], Complex[
      0.7553839007471159, 0.]}}}, $CellContext`dynMeshSize$$ = 
    14, $CellContext`dynPlot$$ = {CompressedData["
1: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
     "], {10, 15, 20}, 3, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 14}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 8, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyEvXd01MX7/h1QkBKk9yJdqdIhENjQQpVOqEqo0hNakCZFBKkB6VU6SJMq
iIEldAk1nZDN7oYkSO8lJODj8+G+Ztnr/np++Ydz5syZnX7N9eI9c5fqF9Bp
YEYPDw/P3B4eH/37b6fiG3//a0+mk+1W3nydPizN6nXip1nxx5ItSK9/YMux
t4ueW6OzNghquiLJ4p7/nvUrr7E7dj24ZdI7/C/9pvXO+klPy59zpXvI36Ij
iQc3P1X5LYM3rK48cY6r/Lbvy7fU8m/48uQeVR9L9wv5h1uGp1B90iwXW4eV
3ZQ7xfIu6nXLbk08TLuKTvhkzrunSSYd7UoLqlJ7+KIkyn/PeueddcqkcFc6
2hX2POfyBqHJJh3tCj/VaszwMrc5v+VN4YYhG5+70tGu+U831mn7w22uj2WZ
X+96g+qq+ltKfOwYWfQL9MMLK9p1zpr/5d93kkw62nVlUt/T9X7i/Pescw92
7vvVlRSTjnY9GO1fZuvV2yYd7fJt+Hr41i23Ob+lzy8ta1Qd7ioH7aq/PuHA
5CrJXB/LqF3VrvRbnsT1t+R7fWB9u1+SLB3+l55s2nXw+5iwpr8km3S0a3Ol
jMPutU+h/Pes9mEe1U9VcKWjXVd6D/QamctVDtrV8NTugTUqJnF+y5Kx61f8
duWWSUe7fp4z/vX487e4Ppb0XXe9TpRQ9bf41ew2ZV2eZAt+D+0689upCWGf
pJh0tGvj8lc199Xg/Pesi1uPP5+pfJJJR7vmZ2/fsfSBWyYdf4+qrHiZa+kt
zm/h/GhXMJWPdv3f9UmzoP7SXgvahfYiHe2i/rGYdrn3pwXtov43v0/jhfwW
Gl8L2mVznw+oj4XmD+pvwXzr8n5+mnbllfmJdLRrtMxn9/z3rJj/SEe7/GW9
IB3t+krWF+W3PJL1iHS0a6GsX6qPJUzWO9Xfclb2B9lPfNAu7CdIR7to//FB
u4Ld9ysftIv2N5//2A+R30L7pw/a9bf7fov6WGh/Rv0t2M9l/zftwv6PdLSL
9MK0q667vph2kR6ZdpF+mXaR3pl2dXTXR9Mu0lPTLtZftOtO/zbNLuxxKl1u
8Lzk5A55nUqXO5XY8v2XxxxKlwO+LVY+eJ9D6XL273zPZAxX+S1Ncm4/693I
qXR5VrMF3xy7pepjyVOz8N0fSiQqXX5kb7R55zOn0mWfCjMD9n/rVLpcfM7S
avMncP571vN1ju//fZ9T6fI8/zd9h+dOVLq84kDWlj/0T1S6fOHql0O8pyQq
Xe5RfcfTb/olKl2uP3nID4eyJypdrnxjUNcxc51Kl6OfeqZe7eZUupyzx6Iz
3ayc/541JMfZHTXqJipdfvyy8/XsoxOVLnsdTdyUf5zKb4lpPOj+8UaJSpcP
vkyMWBin6mOZWanWtD91/S2dR+Vvnn+YU+ly7qgpa2NOOJUup+3YXn7dp4lK
l2tnu7pg8gfpaFeFtC3PHUudSpfHhOadUvuVQ+nyuPbBXeb87lC6XKLb37uH
7XQoXc5XpH3ewlcdSpcfxnRMi/7GqXS5XKfOaQ/vOJUuJ79YE9VhKee/Z/1x
UqUS5+MdSpd71m/XJXWOQ+nysVcjTtYer/JbOD/axeWjXf93fdIsqD/rMtrL
ukz9Y/SrlHt/Gv2i/je/T+Nl9IvG1+iXl/t8MPpF88foF+Yb63J7mZ+syz/I
fGZdPiTzn3U5VtYL67K3rC/WZaxH1mWrrF/W5Vyy3lmXsT+wLmM/YV2m/cfo
V1f3/croF+1vRr9oPzT6Rfun0a9z7vut0S/an41+YT9nXcb+z7pMemHaNdVd
X0y7SI9Mu0i/TLtI70y7Orvro2kX6alpF+sv2jVu629j2v3uULp8c2qZKjPr
OZQu55ywI329j13pctjsngVTBicoXd4wedpV+3Ob0uVJOXte/ypTgtLlAdl/
ST56L0Hp8vz2/vdX9LQrXa4UFDh6QQW70uV+JXcGFP5M6/KpoJIRDVY4lC5X
yVLkQrrFoXQ5cMzd73/+zKF0+VL5VSVXV1T5LY3rx7waV8+hdDn2lxzVP/J2
KF2OcmSePM6L65NmKV7yYNt93g6ly87snkfmVnIoXe6/bPj0wOqc/561Y8US
pybXdihdrtKnR5NDdR1Kl3s1mFshqarKb/EalGNlSjGH0uVfFiTWTy6h6mPZ
2dYeFthT1d9ysJDnwy/+UrpmLeYd9vmBsASly7su5Hyd3tqudLnUxbVpq2rZ
lS6PHNd292z/BKXLW3ds8qgaYVO67P+23sx6nyQoXc6SHDT1+kZVH8vPnrUb
D1/H9UmzJP50vGBMX4fS5cRPv51Qa7ld6XLnDZPXB2S0K12um3fXoi+f2ZQu
H6nn531gvE3p8s47GfK/6aLyWzg/2lWTyke7/u/6/NsuqT/rMtrLukz9Y/TL
070/Xb7Svf/N79N4Gf2i8TX6VdZ9Phj9ovlj9AvzjXX5kMxP1uUdMp9ZlzH/
WZcbyHphXe4t64t1ubKsR9blzrJ+WZcHyHpnXU6U/YF1GfsJ6zLtP0a/brjv
V0a/aH8z+kX7odEv2j+NflV232+NftH+bPQL+znrMvZ/1mXSC9Ouge76YtpF
emTaRfrl4gDuemfalctdH027SE9Nu1h/0a6YbwuHNluhdNDa/OsBp777Il7p
crOILYMr94hVurwy8P7QrLVilC7f779pQY+uMUqXVyUUK/B9rZtKl6dVXRBU
t5RN6XL38tOnBK6wKV3OMmXI3TuPbEqXX3008nLemTaly1WC8u664x+vdLlZ
sz+uTPo2Xuny7WI7h766F690udeVuiG+/jaly/6D8lzOusumdPntX2uKd45X
9bHMLnt0TPVLqv6WEpfLdC/e2aZ0uckdS7235WxKl/9ZPzCX5xrO/+95I+O4
b1sn25Quh1qnvxwQZlO6fKv7xfCbs1V+i8dvO4tc+cKmdNmzWe7hH62IV7rc
vXRY6tMG8UqXk9/l9m+/Ml7p8u9tEgPX59e6nFjc81CDczaly6O2nbANGah0
1tqp7atLvmvjlS6neDW60+N6rNLl4xvrjt3yOFrp8vcTh6Rk6xCjdLlGVOuy
pbvcULq87ceIVi9m25QuD3pccPeda0oHrf1LPz33Nile6XITa7/JK8NjlS6/
SFkyr681WulypyYLLWMPRStd5vxoF5ePdv3f9UmzoP6sy2gv6zL1j9Gvae79
afSL+t/8Po2X0S8aX6Nfo93ng9Evmj9GvzDfWJf/lvnJuuwn85l1OYfMf9bl
j2W9sC5jfbEuW2U9si7XlPXLuvzRL+/XO+tyC9kfFMeW/YR1mfYfo1+v3fcr
o1+0vxn9ov3Q6Bftn0a/mrjvt0a/aH82+oX9nHUZ+7/i2O56Ydo13V1fTLtI
j0y7SL9Mu0jvTLtIH027SE9Nu1h/0a42I8qd+uZRnNLlnOPL1Q7teUPpcq5x
D2fkOxqldHlOnotxxbdFKl3O8+1nnjOTVH6L37N89pq3o5UuW8ZveunTNEbp
8pzo3MsTlscoXb6w7mTPwlExSpd7d3gSs8rvptLl1S2z7Og2NVbp8usW348v
tjxa6fLv284PP70tWulytZobFwdkj1G63OZVv5xjf4pRurwsNP+nCTlilS5f
yfjNliYbuD5plm+79XvQue8Npcsbxi4OiLp5Q+lygWwJS+Zk4/z3rL1vXvmi
zMBYpcshHTd3+DgmRuly0XHb555sF6N0eeaiAsVGhkcrXe63+N3eKROilS5v
PuxzeEJktNLleTVOVTj5WOmatfixjamlY5UOWms+bvXsxW8xSpcDotpWvTks
Runy5dCm/dcUilG63C/4p1fT90crXbZGX8taY0Ck0uW+/WvPXBUcqXR5kb9v
7oIzuT5plk0LM8968uKG0uX1w4r/vKB3jNLloz9cXLv8TrTS5Z6VrVHFTiid
tY7b/rxueolLSn853fy/CZWD+v/fv5tmQT1Zf9Eu1l/qB6NT1G9Gp6ifze/T
uBidonE0OjXSfdyNTtE8MTqFecX6O1fmIevvJpm3rL/9ZZ6z/k6XdcH6W0TW
Eevvn7LuWH+xTll/C8m6Zv3dKPsA6y/2DdZf2meMTtG+ZHSK9jGjU7TvGZ2i
fdLo1Cv3fdXoFO3DRqewb7P+Yp9n/SVdMO1q7K4jpl2kO6ZdpFOmXaRrpl25
3XXQtIt007SLdRbtKh945KsGS6OU/mYodfTPYYOilP4e6Vl1V4o1Qumvn6Pm
wu1xfyn9XXiq1p4abS8o/c10NueNJpcuKv0dn5rpp2vRl5X+7gm8VWpQ0jWl
v+XqPL847ni40t+AO4HefuOilP6W6N4qtV3dKKW/p7KUOLq3WqTS39EHik8+
vzdC6e/5WtvG9f8tQulvmEdcgV4hEUp/E17Wz3I5OULp7+wVl9u0qBOp9LfZ
1+8qVdkRqfT3n/HVe/1+O1Lp74JFlzt2Gc7571kTrvWe4PVPhNLfgccG5F3w
e4TS36e+zXN+skTlt/i0Hn7W54cIpb/f7xy+qfayCKW/3f5ISNiq62/J/vHP
Q/f0iVL6G9qv8qKFiyOU/vodrVX2Scp1pb9LEhbtqLThqtLfI68Wl9q8K0zp
79MFw2o1fHZB6W+GHW22ll1wTulvu/JTa+37+YrS37wR13vcfhSp9DdzLo8z
vt9HKf0tsn1W/7BskUp/T/zp+yzk52tKf4My/9Ure93zSn+PFY5t2eLQEaW/
nI76B1I5qP///btpFtST9RftYv2lfjA61dW934xOUT+b36dxMTpF42h0Kth9
3I1O0TwxOoV5xfqbWeYh628Xmbesv9NlnrP+NpF1wfqLdcT621vWHeuvXdYp
6+9iWdesvxm+e78PsP5i31D+132fMTqV6L4vGZ2ifczoFO17RqdonzQ6ddx9
XzU6Rfuw0Sns26y/2OdZf0kXTLuC3HXEtIt0x7SLdMq0i3TNtCvEXQdNu0g3
TbugsztSL03N9TrjyWblTvaY8u6V9bvGG/8peTbJpFezzCn6fZknVv+ZbyfY
D7nS0d7BPoeiYpYkWdL+12+PzXzw/uWl//Jm+O5Rf++HctA/RYsVWZLX35Xe
4H/lJ1nvXCler2NbVzr6Le6v5s32n+b0MGtVv9Qtj2640tGf1Rsuz5tlXrKl
5f/qE+WqZ8HLm2ZHJFu+onWK7y13DGhV1rtwmrW59M/YibW2rWlovmO0NqDv
md3blWbdWfTC7Ad+rnLQbwMmtJjcydNVDn8XTe2yrKv+tP2YaE6/aaluG/Y8
hyXFlI/x6nV8Ucmeru88rV5cvuRH/3vdmBMw4JorP9LxPbb7uCdZCjZs2KP6
dVc65qH/rwHLZ61MofYmWStG7p90poX5LhS65ipf8mN842se7R14wZWfvwOn
+WkZbet1/ewrrudzS1BOr/Dwjq7y28g8sRfpGvbTBPP9qqR/UL7kx/zx9Cj1
OMsAV36k4/tzWkeWBikTR1S5qOaDZez2qL8S1v6rN9H/Wy/WJjKvfKasbXFi
SbKlm5vuu74zdx+vNOuotQutYx4m0Xi5vrdH+cZfR1QvmOe+q3z+Xh3ld5X5
tmHX6qWbL3F7D3mb9rqPl2VPfJNX31a7zeNlvsNHfWrI/Ix+Vm3i21hXfTrJ
fMB38siPeXg4Z8W/PpmcYvK3o/yoj5fMzyLxC+rmXOyaP61lfuL7Z+THvO3f
8uTYAd3V/DT5UZ+6Mp8HBVTbeTDdVR8p3+qg+mPeJtzutzdroCs/0q/K9+Go
T3WZz4Mnrhs36oBaj6r+hktP9/0haZDaT8y9BtSnj8z/5atnnbmX7ur/9+N7
KqSRfMeO/Jjnp6Z2ujPsNuf38EB+2ictF7r9VMJiT+J90tSH5rOl8Pd/ZT58
S81nc/+i9/t92+or62Xn3Nv/pA7Gue1MiDffU3CbP2lW6JH7/HGtL5SPdVHa
OfnqV6Gu8tU9CPf+tFzd96ZNtTaqP725P829mznPkkYWT+b5YFkq9wtQny9l
vfhkmFzDa6+rPvWoPshv9vObDdJvfe7Kj/SfcZ9C6lNH1suEfP75Iwq76tNS
5tsSuQeB/FgXKXl3dZ04MYn2K9c9FNQH62Vf55Ee9dckmfq0kfrg/gjym++X
avVs3rKvK7+6V+K+n1hmFOnS/0HVJOpPV31oP7Qc2ZVj5qKeSbwfmvsyqE9j
WS/JKVN6VXx4y9SnNdUH+bEuCrwutbeU3ZUf6eb+i/v+b+n/6HS5aZHcnx/c
03Gfz5bD+TN9+jI2ieezyY9zTlNZL+kDtsduK+0653wl8x/53edPmrWBnIvc
54/rfhDKx7poX+pJnSM7kkz5fL8G5WO9NL5epIX/fu6fY97oH5oPllwng54P
PnmL54O5N4T6QF8KL6pbIN8UV306YL7JfHA/B96z5h76yn7i5S06B7ryoz6N
ZL0Et75V9nKIqz5+VB/kN9+NSPnIz/ebUJ96sl4WSvmoT9v/qD/WRU7pH/f2
uu4roT5VZb2gf2g/sfB+gnXRTsaX9kOTH/XxlfWC8XWvv6s+yM/rBfmRjntV
tP9b0mQ+0/6v6o91seDJ/Em1Fqj5bO6Lwb9AXwbIeoR/aUj3qshHWFE++Qiz
vlA+1gX2H5TP97ZQfk9ZL0my/7j3zz5v9A/NBwv2T5oP5j4a6gN9mS77J+pT
l+rj7u/uWZNl/3f3d//qjpxPaD5bDv35eeOnD1z1wXkM9+CQH+uijugXzX+T
H/WxyHr5TvQL9ekp8w3nT+THukgV/UX+DpQf9cF5zCL6S/uDqj/WBc4PtB+a
+32oD85jj7q3mbHzD1d93o/v2ZC2ct5GfqyLM3Iec8/v4YH8tP9bcF6i/d/4
3C3vz2PG/waKv0j/j3ttyN9Y1gvOe8jfRuY/7vERH7BCv4gPmPuMKB/rAufb
dOJIS+U+IPWnJcflqhFzeqZwf3pzf2Jd4HxO88HyUPwg6lNT1ss/7YbMiPFM
MfXpLPN/odxDdO/Pe9YB4i/SiXchP+oDfYG/oPls6oP8WBfwR8jP9zFRHznv
WV+1HFfr+CtXfVpJfYKp/lgXu8XfpROXS5X7lagP9CVS/B3tJ+YeKO2HliPi
T2k/NPlRnwayXjaLP0V9fKU+uO+J/FgXucS/pxM/xD1Q2v8tFvHjtP+b+mx7
7+vNugDnQXoLWRfgALS+rIXE79D6MusF5WCeg2NQP1hyFJ45/fGBFO4HyyW5
x0rjaEkQrkLjaPLjd2UcrWOFq7i399/5LJwH5cs+bKkinAflY96GUX0wP72F
OyE/0vG+AX4X87awcCekYx7WEA5G69TSUzgYyu8o5eM+L+0zlv7C5WifMfd8
8buYh+uFyyEd86qG8EbaJy1jhB/SPmn2VZpXVvAipA+UcQfnpH6w3BQuinSM
Czgq0tHPxYW7Ir2K9Fsf4b00Dy3gvTTPLROIG4Mnn1gY/mJaQ6fiydPzP1r+
UT+n4sm7T/T0G+nrVDz5ef+zFzvPcyqejHtqzJPn76xWaExtp+LJRa/ev7ep
mlPx5Lf9s59568/pYdY2w0suOTLKqXhyx/xfZD692ql48polf7fpH+lUPBn3
BJknf9442+qZS5yKJ+MeLvPkpedu3wiZ61Q8ucCon9+MWutUPJnLAU++7x+b
2XFN9YPlx4BhK0JsTsWT750v3+CTo07Fk035xJMbl2685/kzp+LJuEfMPPnz
uQn9J1VLVDz58bHVOzzLJCqeXOZInx/bl01UPNmUTzz5eKXthUMaJyqejPuS
zJPrHPAfOcqH6/ncsq1baJ1i+RMVTz4duXf++aGJiieb8oknD64dNK7t8ETF
k3FvmnnyZ5lP/jIpUs0Hy8L4Tumf/tv/zJNzFZy9r+C/6cyTeR5iXmVf2PLQ
yT48Xq574syTM2VYO+5NilPxZNyTZZ6coVnWzBUmcHsPeZv2Ek++liWs4tuv
1XiZ++PMkzft/7LC3Q/qA56M+93Mk1Ozt14TUzpR8WTkZ57cqP+c9cmVEhVP
xr115smZlza/FVRCzU+Tn3nykmmLv2zmk6h4Mtcf8zbHhPR+QR8lKp6Me83M
k8d7bdtVSq9HVX/Mc3vElQz1wtR+Yu7jM0+uEV9z+4ZDTsWTx8r9a+bJ0d5p
weV+5/weHsjPPLn7jMtDV8xV+6SpD/Nkn3KNvjozUc1n824A8+RJyZ5eS391
Mk9w3a8nnvxM9Ih5MtYX8+TAq6XeBV13Mj9R5cO/bM1w/FDqatWf3mOoP7Eu
tl2YuGHzRKfiyUFyL555co5ph/cP+qA+9ag+zJNtTd5GbRznJH7ywTsDxJMn
td1+aelYp+LJn8n9febJd7YN9JnShPcr1/sJzJO7NRicNbKeqz5tqD7Mk0+t
nlB2RE4n80PXewjEkzs2Xrh8SRHuT1d9mCdf2hTa6m5ltR+adx6YJ99+u2/w
ipMOU5/WVB/mySviT66vfcRBvPSDdxuIJ/+R4XTDv8aq/d/1vgTx5I1bapZ8
OUDNZ5OfefLdlKC/l0xwKp6M/MyTcS5ynz+udy2YJ7+dPe75oepOxZO5P7Fe
Vm7+fq59OffPMW/0D/Pkv8+M7NJ4g4Png3nvgnnyD+WbNP7mM6fiyXiPgnly
5ztzBq467VA8uRTNZ/j9kJZrptVY7aqPH9WHeXJHKR/5+V0O5snHpXzmyVx/
c/9O+od58jjaT+D3p0v/0H5i4f3E/D+LjC/thyY/8+QVMr7Mk1Ef5snLZb0w
T8b+yTz5jsxn2v9V/bEusi7rlNZvi5rP5p0T5slHZT0yT8Z7IMyTs0n5zJOx
vpgnh8n+wzyZywdPTpH9h3ky+od5cqjsn8yTcd5gntxJ9k/myagP8+S7sv8z
T8a7KMyTW2369En9tk7Fk/F+C/Nku+gX82TkZ548WfSLeTLOn8yTob/Mk5Gf
eXJO0V/myVx/rAucH5gn47zNPDn2oz8mXV3mVDy5gZy3mSfHyHmMeTLyM0/G
eYl5Ms4/zJPhL5gn4z0W5sk47zFPxvszzJPXi34xT8Y7PMyTE+R8yzwZ79gw
Tz5w43SbtI8TFU/2pv7EuvCU8znzZPhB5snDq470WvDSqXgy3s9hnvyx+Avm
ycjPPHmp+AvmyagP8+R08UfMk/GOEPPk5V6zAxZ2SFQ8meuPdQF/xzwZ7wIx
T94q/o55Mt4vYp6cWfwp82TkZ56cUfwp82TUh3nyUPHvzJPxfhHzZPhx5smo
D/NkcB7myeAAzJMbit9hnoz1wjwZHIN58oD5IzM2bqr6wby/xDz5hHAV5snI
zzy5lnAV5sl3hfMwTy4nnId5MtcH87OpcCfmyXgninlyWeFOzJPBwZgng4Mx
T0b5zJMLCpdjnoz3qZgnPxAuxzy5k/BG5slfCD9knox9lXnyAuFFzJPBOZkn
vxMuyjwZHJV58gLhrsyTwXuZJ4P3Mk9mbgyeXOLaoCtXdjkUT/74zPqJPt4O
xZPbpZXycHzrUDz58a9PLvZfbFc8Ge+rME8+1Gykb1uHXfHkPG3PRwSMtSue
7HdkxdxMXTg9zHpy/85BGYvYFU8uNrBHlmzl7IonTy23qsOzanbFk/G+DfPk
Wz3nvW62w6F4Mt6PYp58P3H3k4N3HYon553lW9FvgEPxZC4HPHluVd+sjauo
frC8azzTUayBXfHkC+1Ob/m9nkPxZFM+8WRL4WJnQ+o7FE/G+1fMk59Ztw3t
tNeuePLccrbN9v12xZMd7WZumF3RoXiyKZ94crs7G/03V3Ionox3t5gnrz/f
8PP2d+yKJ6/JUnd0aIpd8eT0JhOqf+56/8fwZFM+8eS8+3OXs1Z2KJ6M976Y
J99qcatJ+gf1wbyq0etepvHX7Yonj6rZaVmrFXbFk4vTPMS8Kl2gV95OW3m8
XO+bMU/+Y8LYtw+j7Yon430n5slXju3Ltacmt/eQt2kv8eSGHZ622FtRjZd5
94x58tg39aceD7Mrnox3yZgn9wu+b/3rql3xZORnnvz4Vu9Vez6YP/AveG+K
eXJIgde1x1ZR89PkZ57c6MznPhnC7Yonc/0xb5NXTS30+lu74skB8h4X8+T6
R8b2qlJZrUdVf8xza4FnZZ61UvuJeUeOefK0gzubtCllVzx5m7wbxjx5b/DN
CpMKcX4PD+Rnnty/Tqv5i9qofdLUh3ny4LV91t2foeazee+OeXLdh2Vu5bqd
oHiyeYeNePIj0SPmydjnmSdPreXb5vfyduYnqnz4l/nHvlk5JbPqT2/uT6yL
u0kV4maUVPPB0lfec2OeXP+w5+WZRe3Mf0x9mCfvfljmXNKSBOInH7yPRzz5
eOyFbldH2BVPzirvzjFPLuOx/s3lAN6vXPmZJ3c+M2n9zQqu+rSh+jBPztut
4/Ni923MD13v+BFP/tK6el6PXdyfuv5YFxPveActyedQPBnv7zFP3hs4uUTg
Vld9WlN9mCd/0So8W76lNuKlH7w3SDz53NArT8p841A82byLSDw57FpSxmnL
HIonIz/z5Ow30lI+vWVXPBn5mSfjXOQ+f1zvMTJPHh0d++hBe7viydyfWC8/
jlnXtvBe7p9j3ugf5smea1r4j7Oq+WDeaWSevO9U6sKS4QmKJ+MdRebJpdJz
/TStdYLiyZ40n+H3HQtTbKGervnsR/VhnlxCykd+fk+SebJTymeezPXHusgu
/cM82Z/2E/j9PdI/tJ9YeD/Buhgj40v7ocnPPBnjyzwZ9WGe/LmsF+bJeMeS
ebKnzGfa/1X9sS4q/lRv53cFHDyfzfuczJPPynpknox3LJknV5DymSdjfTFP
/k72H+bJXD54MvYf5snoH+bJeWT/ZJ6M9z+ZJ1eR/ZN5MurDPLmc7P/Mk3E+
YZ48Ynpq0fJ+CYon491R5sm7RL+YJyM/8+RQ0S/myXhHlHky9Jd5MvIzT24g
+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
8on3DqsT2mLngQjFexFXl3nvuZo5lxUeGK54b5GZsb/7LQhXvHf5+B+bvf6g
/DZcPvFe2/FxTWpvjFC8F3FIFe9Nebyt1blwxXsPtZow6fq/v8u8d3tqeuCT
dxGK9/I8xLw6Uu16m1lVoxTvRfxi5r2jy2b4c1OFCMV7u0lcV+a99s058+7f
zu095G3aS7x3VrkyDy//osbLxDVm3nv/n2x5a5cIV7x3ucSfZd6bf0P4tu23
ryvei/zMe7d23dz7wo4IxXsRT5l5795rnbtOP67mp8nPvDd2afSYjqevK97L
9ce8LX2zQKcvz11TvPdPicPLvPejUsXHn0iOULyX6495HvCF37KgALWfmDjR
zHv3+1yOzl/omuK9ryReMPPe17OOR3bKzPk9PJCfee9X80b+OGSH2idNfZj3
bq/Wss2Dj9R8NvGsmff6BP8RWi5PuOK9VsRfJt7rL3rEvBfri3lvtmPHs8d4
X1e89wSVD//SMPemPvb0q4r3vqT+xLpoXiJPoYi/rijem1niODPvnbnsfP8h
1a8p3ov6MO+d/bTyjDX/1sudn9yzfoe41cR7Dz+MCmg76LrivR0l3jTz3sgS
fgm+AdcV70V+5r2Fpu5p1G3UX4r3jpf6MO9tl/GffrdOnVa89xTicRPv9Skf
nP7u9XXFeztR/bEuavt2X+t7KVLxXsTdZt477PKw4fsGnVK896TUh3nvf+S3
nKT6g/fuHRDQMSgv8/MP4p4T782SrVXBNyOjFO9Ffua9zoGbb07PEqF4bybJ
z7z3gZyLiL+ZeOvMewe3mF++U2i44r15qD8xz0fH3Sy7pWao4r1W6k/46zWr
xt0fUues4r2nJT/z3jvtZuXIH39V8V7ET2feO6BA2Qu2pIuK93ah+Yx53lfy
oz5IH03zGf46SepD69fEi2feu1zay7y3E9Uf62KE9CfzXg/aTzDPh8p40f5m
sdJ+An99S+YP7bcmP/PegTL/mfc+lv2Qee+iXqfzzjkTqXgv5hvz3j2yXpj3
Ir48816Uz7wX64V5by3ZH5j3cvngvf/RXm+0l3lvC9nfmPcelvMA895Gsr8x
7+0k9WHei/2Zee9UOT+o73vHfb/t8+NnFe+dL+cZ5r3fi74w710o+Zn3Ql+Y
9+J8yLy3kegj816L5Gfe+4PoI/PeYKo/5jn0nXmvn5yHmfc+LHKv76obVxTv
fSTnYea9z+W8xLwX+Zn3WuQ8w7wX5xPmvUfl/M+8N+BOoLffuCjFe9vKeYx5
b7Ov31WqoubPv+tC9IV5b2Y5j6nve+X8ybx39orLbVrUiVS8d2CpTzoMP8T9
c9b7MfUn1kUROT8z7+0pfo15b9HY+WO8WkQq3pv4sn6Wy8ncn/es++X8z7wX
+Zn3XpfzP/PeXlIf5r15xL8w77WJ/2Xe+/OGiJRZhyIU7+X6Y13AfzHvDfOI
K9ArJELx3nviv5j3BgsfUN/3in9k3rtI8jPvTRD/yLwX9WHeGy/+mnnv+Vrb
xvX/LULx3l/FLzPvXSz1Yd4LDsO89434dOa9W8WPMO/FemHeW1Q4A/PeA5P3
N7+9QfWDZfSB4pPP71XjaPlWuAfzXuRn3vuXcA/mvdeEwzDv/VU4DPNerg/m
5xXhQsx7j2cpcXRvtUjFe88KF2Le+6twKua94FTMe1E+895uws2Y95bo3iq1
Xd0oxXu3Czdj3ptPeCDzXo+G7/ke817sq8x7DwvPYd5rFQ7JvLejcEvmveOF
czLvPS5clHmvXXgs895g4bHMe8F1O/1vvWQyvDdLUt93OSskW/55315wPCvi
FSI/uOLijd2CxzdxpSP/V15jd+x6cMuk4xxb9P74r+7cuGXKb4V9QOInIj/S
76yf9LT8OVc5zWQcG1b6svPAeFf6+1E85L3oSOLBzU9d6d2l/9N3NXr8aSNX
PTtL/w/esLryxDmu9IbS/+08hi9eV9RVH/jHWv4NX57c40qH3/RdWqG6R44U
k47zcPcL+YdbhrvSsV8tnhN44XGjlH/3rfc8EPVcJ/EW30n/YFyyf1ekz+HQ
JJOO/n96LOjGmP2udB4vpKP/41Jvz7nZKtn8LtpbUOJOvvuPcTH1kf6/enP3
x11Gu/Kj/xFvFOlo16CRpwt+Mv+2Zaf8LvpttMTfRH6MC+KcIh31bDorIPXl
n650jMt8ieuKdJS/qOzUuj1siBurxwX5kb5M4u0iHePVo8r6iJO//dtvwqnQ
rg0Sp7WTcCqM18V1f8bn8ko26Riv3St65mlaKcWkY7zmShxbpGO8vPP2bJLa
7rbl7X/0D/JjvB5I/FxTHxmvwt0rtyx37LbwNMNnrA6J74z8GEdfiSOMdLS3
08gNV4dk+XccpR/Qz4Mnrhs36oCrvagn4k0jHeN4af2S0VGXXPkxjvUlvjbS
UX7UltknHzmTzO9iXBCXGfkxjqMkrjfSkf/09VG/x65GXOZkM16VooavWfEq
2aRjvELbZLgS7Z1i0tFvduk3pGO8/JJq1C60LtnS8T/6AfkxXohXbuoj4/Vj
zjntO6z7t73/+zsGnmBd3Hr8+UzlXfXHeCFOOtIxXoPXbH0XmH7LpKM+iFOP
dIxLnn+yXcgb5krHuPw8Z/zr8edd6RiX80WqFy767Jal/X/0P/IjPX3XXa8T
JVzp5vz2aMPNPSuTzPkP41KjjC264TrX/WGMy6rAI2977nbl5/5BOsbl00r9
PfPdv2XS0f/zs7fvWPqAKx39f7zYs82FN7vS0c+Pqqx4mWupKx39fELyt/6P
fkN+9D//Lvqf64lygqld6P+V1A/o543LX9XcV8PVb+jnmtKf0v8W9DP6H+no
53Myvkg3/ew+Hwynwvz5/kyZyk1SD3hze5Ef/U/z0IL+p3lr+Y95bkH/z5L1
0sSd+5m49siP+tC6s6D/sX6Rjv63ua93U/5J2R/a9Iqr373tX97c/8iP9M2V
Mg67195VDsYF+4/8f4cZl1OyXyEd4xIt+yHSMS7YP5GOcbks+y3S0f/+si+Z
35X+7yb7/Fv3c76Jn478GJevRC+QjnEpIbrj9x/9ifwYl0eiX0jHuDRy10Ef
1B86iPwoH3HhkY7xgv4iHeOCuOdIN/oiOi7/b+uDcfGWuOd+/9EPcn4w+XvK
+QHpGMef5XyC8pE+1v1cpPof6Rjf5u7nItU/pj4yvjiPvdepTKb8unK+3S71
QfmF3c+HPv9x3vPBuF9xPx/6YHzpPOmD8b0h51LUB/UfIudz1Af1X+9+TvbB
uP/tfu71wbg/kXNyt/8Yd+RHOuKhIx3zAedwOc+b8cV5HukYxxbuvkD1M9LR
z+3dfYfpB/Ipph/I15hxIR9kxsVbfNP7/z/S/Yb8GC/yX2a8iouPQzrK6eju
+0z/L3X3iaafo7M2CGq6wpWOfoYPZX+ap3Id//n+TuVPz0t8IvanvnP6vbWm
OJQ/7VRiy/dfHnOlo/8dTfw79TnsUP4U8ZjYnwZ8W6x88D5XOeb8EFD9RctQ
VzrGJft3vmcyhrvSMS7bT78881kWV/3R/01ybj/r3ciVjv5PqlDk57RFrnT0
/6xmC745dsuVjv6/1KBz2c8yuOqP/s9Ts/DdH0q40tH/07Lu9i2YNVH5U8RV
Z39atYfntfWBTu1P7V+MKrXMqfwpxov96a9hN+fkdjqVP0X8dPanGBf2p4uz
ZowaXz9R+VPEL2N/Wi10bWyfwETlTxEnnf0p4qaxP13kcX/P5YBE5U97SJw4
9qd/RWf5M2vdROVPMS7sTxG/j/3pwYqD7+cNcyp/irjk7E+fbr2SsGSe06Rj
vAYd3FmneZornePOsz/1m+HZ8Jcuicqfon/YnyIeH/vTZd2KHls0JlH5U8QH
Z3+KuOrsT7NM2XL+To9E5U8RH5z9KeJXsj9tvras/zZPVzrGEfHE2Z8WXZy9
4tYDTuVPEeeR/SnierM/HXZlS7+/TZxNlz/NbP2577EUp/KnK3s0iJv/aaLy
p+g39qe/Zawfuve6U/lT9AP7U8Q/ZX/a7pv4etl9ncqfIj4v+1PEXWV/Ovan
64Pt0Q7lTxH3lv1pq4g/p03c51D+FHGr2Z+uOlrU/1SIQ/lT9D/7U8RfZn+a
YUKHT14XcCp/mmnL+L8/szqVPz189FbqvHpO5U9NPHH5w7g8ivP28j/oUP7U
xO/G70r/Zyv8zdwV0xzKn5p42fKHfkZ+9qcm3rf8of/5d9H/j6meKIfbhf7n
fkA/m7jw8mfeAZP+ZH+K/md/ulrGl/1pKff5YHxQG5k/7E/RXvanNA+NP6J5
a87/NM+ND8J6YX+KOLnsT2ndGR+0X9Yv+1Mv9/Vuyl8t+wP7U/Q/+1PE22V/
iv2H/ekQ2a/YnxaT/ZD9KeIdsz/1lf2W/Wms7EvsT7PJPs/+FPFY2Z8iji37
0+WiO+xP0Z/sT6Ff7E+7ueugObdDB9mfIs4s+9NvRX/ZnyKOKvvTZ6Lj7E8/
kziq7E/RD+xPcX5gf3pBzifsT2u5n4tU/7M/DXY/F6n+YX/6pZzH2J9OlfMt
+9Oy7udD44PovGd8EJ0Pjd+h86TxOzvkXMr+FOdz9qcP3M/Jxh+dcz/3uvyp
nJPZn2Lc2Z8ivir7U5zD2Z/iPM/+9IK7L1D9zP7U4e47VD+wP93m7mvMuJAP
MuMC38T+9Jy7vzPjRf7LjJdTfBz7087uvs/0fwt3n2j6ucHzkpM75HX9LvoZ
PpT96Y6fh3QYMt6h/GkViXfA/rRfyPhdEbF25U9zTtiRvt7HlY7+HzEtw9xT
kQnKnyK+A/vTsNk9C6YMTlD+tPaMEc8Sq7rSMS4bJk+7an9uU/70U98R1wq8
daWj/yfl7Hn9q0yuctD/gQsm9/rhO1c6+n9A9l+Sj95zpaP/v9vzz+Avyrja
i/6f397//oqernT0/81+g3/L08Su/CniQbA//bnNwI0VbzqUPx1vWffV2mEO
5U8xXuxPrzScsfn8lw7lTxGPlf0pxoX9aYnLoe0LlHMof4p4KOxPZ1er5/lT
dYfyp4i7yv4UcVjYn+YYMXqpd32H8qexEneG/amfz1y//z8+CPtTjAv7U8QD
Yn86wePrpDwNHMqfIo4M+9NNHbzXTqnqSsd4xfU5uzHog/wcx5b9qfVMgxkr
6ziUP0X/sD9F/Fn2p80uP6nd1sRjdfksxBtlf4o4rexPL14L80/+d9zZnyLe
KPtTxG9lf3o/dfyd5OKudIwj4n+xPy33wP+jXd4O5U8RN4r9KeKEsj/97cCL
+EuLHcqfDpjxILhbdrvyp4NaRU8Is9iVP0W/sT89/8vziEUXE5Q/RT+wP0U8
NfanWYPHR8cVTlD+FPEu2Z8ijhv7048iRjSp+cCm/Cni6LE/rfUkJsOPXRKU
P80icQPZn15+3dWx/jO78qfof/aniOfI/nT5J5XX+hZyKH+6OuZJ9k5t7cqf
nr2xZMXViQnKn5r4pPKHcXm1dVpK4GGb8qcmHih+V/q/Wu7dX/gNsil/auJv
yh/6ubrkZ3+KfkN+9D//Lvr/BdUT5dSkdqH/T1M/oJ9NnFn5Qz+vkf5kf4r+
Z396VcaX/amn+3wwPqiOzB/2p2gv+1Oah8YfZXSft+b8T/Pc+KBssl7YnyLu
HvtTWnfGB/0l65f9aVn39W7KHyz7A/tT9D/7U8TvY3/aX/Yf9qd7Zb9if1pG
9kP2p9g/2Z8+kP2W/SniFbI/vST7PPtTxHdjf4q4eOxPoTvsT9Gf7E8Rn479
KemgObdDB9mfIm4d+9Obor/sTxGXjf3pZtFx9qeIy8b+FP3A/hTnB/an3eR8
wv70F/dzkep/9qd0LlL9w/50lpzH2J8OlPMt+9Pn7udD44PovGd8EJ0Pjd+h
86TxOziXsj+dLOdz9qd0Tjb+qLL7udf4I5yT2Z9i3NmfIl4b+1Ocw9mfxst5
nv0p+QLVz+xPyXeYfiCfYvohh7uvMeNCPsiMSx3xTexPK7v7O9f/d7v7LzNe
I8XHsT/N5e77TP/3d/eJpp9vTi1TZWY91++in+FD2Z8uTDwRmtDHpvwp3mdm
f9ps5cxl4T5xyp82i9gyuHKPWOVPH268cGf1uRjlT1PkvWj2pysD7w/NWitG
+dMmQ1tM3t/MlY5xedB/04IeXV3pGJemG+3X7zW7ofzpqoRiBb6vdVP50wWZ
u56Lq+iqj4kvU3VBUN1SLp9r4tFU/ORN596udPMdafnpUwJXuNLR//s6vqi5
57RN+VPEfWN/mue4T8j3T+OVP/X6OiWkxoB45U+byXixP12+b//aP36NV/4U
8d3Yn+Idb/anG18E5v2svE35U7yvzv70myJbm+340ab8KeK4sT/Fu+7sT78s
1G3c3tM25U/fyjv27E+bvPq1ZZNIm/KnGBf2p7MlvgD70/DXDwZuD7Ypf4q4
aexPS57ptGWmvysd47W8w4MGlU660jkuHvvTV/5pe7vF2pQ/Rf+wP0U8O/an
nTy3Ddjwq035U8TXYH+KuAnsT5/8cOxll+425U8Rv4z9KeLBsT+dlfr16b/t
8SYd44h4Z+xPa9R8WGPSkHjlTxF3jP0p4o6xP/1l0cPKpYbGK396qdb4PA8+
8HEYrwr9ki+EL7Mpf4p+Y3/aN7Vn11gPm/Kn/+x93w/sTxGfhf1p0dNFel37
PU75U8TPYn+KuDDsT68/OFb1H0eM8qeIy8P+tMTCDnu6lYxR/nSqxCFif3rj
854/FugUq/wp+p/9KeJtsT8dUSXnkewjbyp/OiDrj38862lT/jQ8cGepsJtx
yp8ivhLSzb2SzmkfvTXxvFz+FPGbzO9K/2/Otzj57h/Ryp+aeF7yh37eIvnZ
n5p4ZPKH/uffRf8Xo3qinKbULvR/JPUD+tnErZM/9PNA6U/2p8Ol/9mfYnzZ
n05znw/GB2H+sD9F3DT2pzQPjT8Kd5+35vx/232eGx9UXNYL+1PE8WF/2sl9
3Rkf1E/WL/vT0e7r3ZRfUfYH9qfof/aniAfE/hT7D/tT7FfsT7Efsj/NIfsn
+9M5st+yP/1Y9mf2p89ln2d/ingx7E+hF+xPO4rusD9Ff7I/Rbwb9qep7jpo
zu3QQfaniIPD/nSN6C/7U8R5YX9aTnSc/SnivLA/RT+wP8X5gf2pj5xP2J9+
4X4uUv3P/rSy+7lI9Q/706/lPMb+dLqcb9mfjnI/HxofROc944PofGj8Dp0n
jd9ZKudS9qer5XzO/nSS+znZ+KMm7ude44/qyjmZ/SnGnf0p4r+wP8U5nP0p
zvPsT8kXqH5mf0q+w/TDSnefYvqhibuvMeNy390HmXGBb2J/2sTd35nxIv9l
xgs+jv1pc3ffZ/rf190nmn72/XrAqe++cP0u+jlYfCj70yqjt6blLBen/Cne
e2R/mvNl1vihc1x+EPlzjXs4I99R1/1W9P+lpvFVC38Zpfwp3s9kfzonz8W4
4tsilT+9EjL2WYfmrvIxLnm+/cxzZpIrHeNSq8rqFzcHuspH//s9y2eveduV
jv5vc/jm0Pr5Xe1C/1vGb3rp09SVjv5PKt/zXM4RrnT0/5zo3MsTlrvS0f8V
6g95nXY4RvlTvIfJ/nTSpXTr67s3lD9t1fJ0zmNzY5Q/xXixP+32qvTTgPXR
yp8iXgz7U4wL+9Nnw2tNLXwjWvlTvAfL/rRR/hnXnrSKUf4U76OyP8U7tOxP
A3uHfFohLEb5U7y7y/60RqJXj1zdYpU/nSvjwv70iryHzP60aBVHyzCPG8qf
Ig4L+9Ne1iPTvxxzw6RjvP4Y7fdN9JFYk85xdtifzi/wR0jeErHKn6J/2J8i
Pg7702H9t45I/DlG+VPEQ2F/ijgy7E+vZuzTeUWuGOVPEQ+F/Sniy7A/fbZo
bvKLra50Ew9C3j9nf/rD5s8OpP07D9mfIo4J+1PEMWF/Wmjs9Edr+8Uqf/pF
1LggzzMxyp9e7xe26O8FMcqfot/Yn65vc6FlgyYxyp+iH9ifIr4M+9MVXwza
82lytPKniMfB/hRxTNif5jq42yNubpTyp1aJO8D+NFfxj84nT4hU/hRxOtif
pjqPt47NGq38Kfqf/eliiTfB/nT1+G1tPj4eq/zprldjCuYpE6P8adbYZn/c
iIhW/rQH4qfIH8Yly8n47y4PClf+0cQfkT/z3SnigKA+Mi6cjv7ndPQ/p6P/
x1M6+t9T6ol0c3+B2oX+Rz8k5Zxa83Lpc96o/wQqH/1v4uPIH/of/cy+dZWM
C/vW1zLu7Fv7us8T448wr9i3oh/Yt550n5/GN+V2n8/GF9D8N/5opawj9q2I
R8C+ldaj8UdY1+xbR7rvA6Z87BvsW9H/7FsR14B9K/Yl9q0FZB9j3zpD9kn2
rf1lX2Xf+lT2Yfat02W/Yt96RfZ/9q3QX/atiBfAvhV6xL4V/cm+Fe/2s28l
fTTneegj+1boLPvWY6LL7FvxXj371q9F39m3Iq4c+1b0A/vWInKuYN9aXc4t
7FvpvKT6n30rnZdU/7BvbSjnNPatjeXcy77V1/3caPwRnQONP6Jzo/FBdM40
PshPzqvsW3FuZ99K52fjm+g8bHwTzs/sWwvLuLNvXSPv2LNvnSznc/atX8g5
n31rsrtfUP3MvpX8iOoH9q3kd8y4kD8y43JZ/BT7VvJ9ZrzIl5nxuiz+jn1r
Hnc/aPo/t7t/NP2cc3y52qE9Xf2JfoY/Zd+69MKRmZ2nRCnfGirvVrFvjW84
pmaFJa505P+9Z9VdKdYI5VsDypX1Wud3TX/3K+90sW/1c9RcuD3uL+VbR3c8
VHxEXlc6xmXhqVp7arS9oHzrxaalT9ef78qP/s90NueNJpcuKt/ayD5335yO
l5Rv/S4100/Xoi8r3zp0RMrAK1evKt+6N/BWqUFJ15RvHRox7OWDa9eVb90i
73qxbz1X0ra6k1+U8q2B+w7GvjsYqXzrKRkv9q2rbcWL/PkoQvnWU/K+GftW
vJ/GvnXdM+d3+X+LUL4V79qxb/2riI+v/XCE8q1n5Z039q14T499a9SkuTnz
XY9QvjVB3g9k31qzxccVs30aqXwrxkX9v6q868i+ddCb5Ab1AyKVb8V78uxb
fWdO9cu0M9Kkm/t01ZYln6vtSud4AexbN571970VF6F8K/qHfSve+Wffusuj
a+6LWyKUb10q74iyb8V7+OxbV13ofrfMvAjlW/GuO/tWvIPKvrXPxPs1G8x3
pWMc8Q48+9Z7+7eefFAiUvlWvMfOvhXvsbNv3f/N0S0VPo5SvnX+gmpxlpBw
5VuvLWk0+Yeb15Rv/Vn6jX1r2WG5B97eeln5VvQD+9bf5V1c9q2Rp95VDGx/
UflWvCvOvvWpvMfLvjV19c371U6eV741o7yfzL61wrfJw+8GX1S+Fe+fs2/9
7GCWY78UC1e+Ff3PvhXvkLNvXfDk708L1o1SvnX4/kGVzrQLV771daNKG5tU
vaR861i8Ay9/GJftc4pMW/FTqPKt7fGOuvxhXI7hPXPUR8aF09H/nI7+53T0
fwilo/9/lXoiHfUcQ+0y3ED6gX1rKJWP/jdxBOTP/L+29DP71vkyLuxbS8i4
s2/t4j5PjD/CvGLfekLqyb6V5qfxTW/c57PxBTT/jT+KknXEvhXvKrNvPeK+
Ho0/wrpm37rIfR8w5V+VfYN9K/qffSveZ2bfin2Jfese2cfYt96VfZJ963TZ
V9m39pV9mH1rE9mv2Leulv2ffSve72XfCh1h37pd9Ih9K/ZV9q29RdfYt653
10dznoc+sm+1i86ybz0qusy+Fe/usm9tJfqufKu8u8u+Ff3AvhXnCvatteTc
wr71gvt5SfU/+9Zo9/OS6h/2rTinsW8dL+de9q1n3M+Nxh/ROdD4o7Xu50bj
g+icaXzQSjmvsm/NIud29q3b3M/Pxjcddz8PG980Us7P7Fsx7uxb8R4v+9bz
cj5n3zpEzvnsWwe7+wXTz0Hu/sL0c0N3P2L64WN3/+IaR3e/Y8aF/JEZF/gp
9q3H3X2fGa9u7r7MjNc48XfsW0Pc/aDpf7u7fzT9nKHU0T+HDXL1J/oZ/hT+
Bf1z50rxeh3bJpl09ENVv9Qtj24kWbbJuRHjMnZirW1rGrreB0b/4B2wf+i8
jffHcP7E71aM3D/pTIsU9Jt6xxV+AfWxF+ka9tOE25audG7He6fyvrHxHQ3k
fbb3+9tjU3+fKWtbnFjiSjfv6T2rNvFtbLJlq/wuxqVw/IK6ORenSLsem/oP
Cqi282B6CvYr9X5pe6rnfalnGuoj7Vq6etaZe+nmHTn1fub7cqJM/XfOvf1P
6uBkUx/z/2L73rSp1ibZ+BSMSyN5L9FPyjHfpci7iG+kHLT3u3z++SMKJ1t6
SH60d1/nkR711yRZhrbp9cm8CudD+P1M5Ee7klOm9Kr48JYp39zTeXS63LTI
JEs7OVegXekDtsduK50s+0mUaVfj60Va+O+/ZWl//0y7+2dOhKBdeIezq5SD
dhVeVLdAvilJpj5oV3DrW2Uvh+BdzUMh/C5lU8mP9VVEyvFFPaVdqE8bOnfh
Hcv3+9tj064B0t62dO7CO5atpHy0N0n6LV3KQbumF+nS/0HVJEt3yY92Hf7z
88ZPHyRZOtN5Eu9zZngfJ8icWybI+Lam8wPeY/Sjdi2Vdkm8IdMPT7q3mbHz
j2RLL6kPxhfzU9av6Qe804t2ob05LleNmNPTvA+s3lFEOegHj/ZDZsR4pphy
0A9Yj53p/IP3JGUfM/3wquW4WsdfpZj+Md9byj6A/OZ7UXnnuSPpHd4PlP3N
tMuz8Mzpjw+kmHJQzyqy770lHce7iMiP+vQ8vqhkz3/3k3TSZbzXt1vyo//H
yP4M3Ud/4j1A6D7qiX0e+fndP+RH/aEXwqOMHvWZ+XaC/RDeZdXv+6Eccx+8
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
K9BPeP4O+sn69KUh6gi98BOev/M/1mB5lA==
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlgmwTmUYx889lqN7vmMbQpbuzXZxLdnDtW+5lpuQfc1gSJbIlGEQiqJo
DKUUarSZokWyL9mXkZr2lEJikOxFv/88z8z3zPM///O8z3m/9322zKGPdx8b
BkFQIS0I8qGnR0FQCP0iumEcBN14WTgJgj7oOvD90I3ge6KLwhdDeoMfiM2+
K7gIXFlkOLgZXGOkGms343MwXBZ4I7gMNo/yvBVcD5sO4HS4gej7sOmPHuLf
3YtNXWxa8Hw7FQT/IU3A98Ot4F1pbN5FfxCZTVpiuCr85+g62h/8Da0DDwDf
jU1TxyXBo9F1sX9SfnmeiW7L+zbo1kgIl41MA+/H5250c+x3ovOwW43uyvuu
4DfAD4I7IK+Bu8B1B78Dfkjnh2zW/4OriowHt4DLRZaCK8Hl+Llt4ltjxIE/
BX8Ibgj+Btwdm/d57ol9HrIGfAL+kdj2NQJuALIefAb+LnAuuAHvx4OPggty
4RMcD4QfC94P7qO7A88DdwDngBfqf4Fbgj8D/4nPm34XOv8x8PvAt8D1sWsv
/4mdoe50HXxF+AI8f8262uB64O9SxucHHwPfC/6XmNwLztY5wB8Fz4mM3wfO
hC+KzwVwd+BuIwdThkvCL4G/DoYKZnkMNMLPdYiJPCvuT/E+ApQCFwvN/gay
B5sK2BeGfw7bych5+O3wl9Hp8H+kmQjP5P2EyL71TGR+5f90mq3lCIK56Fu+
N+1Rd/oYkp+XzfnWKHCmx0JjbCYp7uCfQteAr+2x1yY2/mlwdbht+K0eWEwq
X5RjpRPTei6VWN4qj4b4N7PBuyKLa91NvsRyTDaK+fbIHPj6ieG5ijnf50hw
hcT86D/cC66CjPMY1h3rrpXX5TzHVQfKgxd4/NTx/GqnWIot57IS25P2dhzd
GX4ZfOXE7qYoslOxxvN8cEedA3gDuAe4DLoMa8uiZ7D+Kmf8JfZX0CUCu1fF
VRHw87yvoBoALodu6vGZg26p/wRurvxH7gnsnHLcRud10+NK8XLJYyAFXyK0
bxUOTYTTtc5j+ziLVvHtLPAR8OLI/tePygV0Oexj9HzFJ/owfLnYYm8HOCO2
ON/v8S+bQ+BWXldVQ9P8fynHOiIZgeVhL+zbga9EFreKz/HgsvB/8bwtZfEa
emzP8nhWLCu2ZbMV4jp4D0ajOfv+qvnYRNSQdfoe+Bh6r84uMLvBsXFPqFeA
d4FHgnco9rDZjn4dnxmqJ/ivH1o9r6s6jFQJLG/L+v1moldHdi8foxsrHgOr
7xX9vlQvsv088xRDfg5V0WO9lip2m3pMKt4WIcXhK7HHiXC1Aut/05UH4Bno
KaHl2mT0VM8p5eckz1nl5CykCXh2aGu0VvlzJLKcauC1XXmU4Xmjb72MHur3
qNxVreMXTI0sThS389QrE/uGcueI58tOdK3E9qr6cIJzLA1eqroFrqR9x1bT
lBdbPK4KsHZKZHGlGjU7stwpqP8VWX/U/1WN6e53oR7f27G44V5PRqBfQeoF
1sOW+JksQn+ivAIvDq0Hqm++hz6TZr1MPa0b32oG/pVvve1nqJ7aC8kE90Av
d5/yfVL9Xu/Z+MOs/Uj7Am9Ct8bmi9D6lfxf5DvDFE+B1dkRvmfVsAOR8epx
axUTgfXUU5HtU73sXGT+BuH/58hs1PvW+/86EFqeKF/OonelrC6Ux+eh0PLu
IPqnyPZ23uub/Mhfv9je98f/hZTFaw24TrGdX1ufI7R2RWgzjOajEomd25vg
TqrViZ2R5o1aseXQt/j7BSmpO4st14rhZyH6t5TVzaqqKzx3CmxOOALXHnwY
PSA2PQ7fJz2uZP8qduXBp+GyYsO/p4xXPq5B34jMj2aMzbwrFFp+pfOcF9i8
UdznS82QG/ysNoZ2pzp/3YPOQbHTRnftc47mKM1db4E7wx2LLNc0/+icxXdL
rPaqjz+r2SFltV5z41VwTXDN2GZL1XslwVe+T83AKz1/Nc8pRhVjzbVfn3M0
IykOVccueD9V/VkZ2Zmot5xKWb/SXb+A3s3z3x4bLXy+Ui/TXK0Yv5yy+Uu1
9KXQ5kndb25ifUHz+TSf/RT/fRPrZ6oPyvdc75vtEpu9Nav/o29GVmuHJ/Z9
9Sb1RtVk3ZHuSvOY6uRa8LLI+kh1n1e3sHYYa7eicwKbXzWbqZddxH+12Grz
WXCEXafQ6vNAnxXVo895jN3xGVW9YFRi96B6onqf6/W5C/qS/g9Yf/pKymq6
7quX72eo8jFlfVexXTm2/vk93KDYYixm7SWvgcopzRKa95Yrr1O2T83Dq7z+
qw+0iq3GJ/jvC+4Cn7+Q9cr8ms0iyyfFeanQvqs+/wP+rim34cNCloOab6/5
+ajHnQH/D8aYdX4=
            "]], 
           Polygon[CompressedData["
1:eJwtmHm4llUVxd97GM6F73tlhgQEQZB5CBBQBnEAHFBUCFGQydS0gUEezcon
S03NTMtMyzE1SiWRcgRRBhlFVHAKJUcEFdMEBEW09XvW/mPfe9aZvnP22Xvt
vd8OM2ae9qNUFMX4mqKoq/8vVoviBcm9uSj+Krld8i31N9OkLeofWxbFnWof
rb4tGjte+C7hAayN+bdJXtXc12KvbhpvXXhP+vol78ncV4RflvxJ7T9LXlK7
vsYP0HjHSlG8KdxI+CDhv2XPrSfcsvCaTcJ1hJsI/074v8LthdsLPyC8Q3iM
cJvC91ki3EC4gfBlwvslX0ku1D3mSv6n8UM13qrweWZLpJpip/5slbwv2SbR
0YrLNfac5u8XbizcoeI9Nmr9cYX3flrjH2pc/4o5ws+r0V3jTYXvEX5fuG3c
52bhbcKthNsJ3yr8H+GWwi2EbxL+pOo7crf5ko/YX/IXte+WvKP225I71b4r
u90s9E3ffdm6QUfvxdoOah9YeA/O8EfJ1qrP9oGkY+j3DvVP1v0mSc7UXSdJ
+qh9mcZ7aHxZto00SbYB3neqxheHvXwkPE74fuHDhDcJHyv8e+HBwq8K1xWe
KYxR/kBylH5jhKSr+rtJ6khGqv9Y9pTMEX5R/0dr/Zda/4bkdcl49X8nZL7G
hxQeO0v4UfYV/lD4U3QquUD935ecI/kudqC+zySl2tXSZ+As56m9QuuHa/3W
7LlPCp9YeA1970nOLT2XPegvamVHtf6N1Zy/8G8P0J79JQ3VX5GcLLlX40do
fLPGd0qf44U7CC8Qbqvxc4UPEf6XcF/hK4S/Lbw2e82/JSfFXtO091RJRb9d
lWzWfhXNb6v585gr3EX4YOE+Fb/tGuGTCr/xCcK3Cg8VHiv8huY3FW4kfKPW
d0Rvwhewh9qDJNeofTVvrPY7mjMMW0dHpe/wILqt+m6Pqv0INln6vQ/S/0/k
L720ZiX+LDkG39fYGI31kPxE7b7qW62x4cIfaP52yUPJPoAdp9L20Qg96P+h
mv9Yts1yr7rSRb1a6wBugWPQzWzNf17tseprUGtuwLawMTjip8L1hffo99Zo
/i+zuWBb8MMt2bpBR29p/O/ZvjxY+JuY3xBb0dxnquYT+KGO+i7U2FP4d435
r502vjibl3eob1nVNjuCt0+25Wuy58KZK2Ic275Z+BiN7xIeKfw4/lLaNg7H
l5Nt5P7g9wHCX1btg4OEH072TXwW370dHyvt13AjHAnHX5HNbV/qfOur5qjm
ws2TuesF4f5wKZxY+g7cRc3iIo1dHefnzsur9h3s5elkH6qvNxhV+E14m33Z
vrcSfhDeHfd7TnhmaV/GXpYn+/QlwvVif3TLnuy9VPK90hwNV6+Dc4SnSOen
xHvDLR/H/fFxfJ3f5LdXSX5YmivhZjgazrwy+27ccWnYdyfhE4k5Glgi3K2w
v8Ar3Svm/nbCH1dtj/hmT+HdwtM05wm1F0lmxHvwvnAY3Iov4bvHJfsUOkAX
J6tvsvZ+LZtbb1PfKHwlmwsfFB4h3KniWERMJDbu1fge/Ed6ryP5Qn0DIx4R
f/cLD414QXxZJ+mu9o/V17O0Te+K+IitH1uxr/4MjtL4r8M/8J9VVQttfOoX
GlspXGpuM+E/ZNsEb8cbtq1YpzsiV2kjvCHiv45aXKv5s0rrgLufJRlSmovg
pKFqr8NYk9/o4IrjHfqvUd+zGrsuO5YT09cKr5Z8UWObxraZ802N35216BBd
LiCmqL1Kfb01dxacU9rH8DVyJnKnt7O5lDflbYlT85L5bYLap0d8fEAyUe2X
s2MlfYy9lZ1r3S18ivB24RPCHuCDFZE/5eQ4jM/he3A4XL4zO/bA8XA9sZJY
wxk4yyvCA4WvFx5WOp7hb/cJnyb8UHYsmsAblT4DZ4HfT8X2NN5P478hRgmP
rjg2EaMGl74jd8VH39XcJyRdiDXkKBp7PJurJ3J+fJUYIzwFm4MPJKMiXpH/
cF50hG7g/690/31Vn3Nhdn6JLtAJuSUxkvOcLdyqdPzqIHlW/esli+JMnGVa
zJmu/2uy13YSviWZ0zZkC3fmroz1l/QLniUWkxORG03VmpalYyL22BNO01hn
4esiPxlT8dpLkzmaPXoL9yrNo+TXrUvvxZ7Ls89+fsR/7rA28lFSjl+FvWLb
2Dy2vyb8DR9sX7G99lF7nMYPKJ3T4rv48N4a2/++GvM7mBjaWeNzIrYS8+Ey
OG2YFrYpfUbOtiLiOvnKefBlvDFvPSlZr8QM9uY38CtsCts6XdKitA/NTT4j
Z0UXl4T+0clerR8U8R3bWRD2eZj69oQt0KYPmxio9Vcl+9DG7HzyGOF/ZudT
5J+c85ns/AOdjE326VXRR25Cjsrcz7X/qck6QTdNS+uyT+QnT2VzPlxPLtkk
7t8lzttF+KbkmEvshfP7Juck8+JM5HrkvJyVHLhr+Bm2152cJJnj4XrGLk72
QeagQ3QJRw+p2CfQA3puHjI52ccWhv13Vfso9X1ddb1ADkPuAmnCAfg5cRpu
IM8iHgxL1iNzhifXGKytET487vuPbB1cFOdBN+iI+HBGsu6oZw5JrjmoPS7N
tmVsmloLG/46bAXbpqajtuuRXLuS/1Frsgd7wTlwz5X4VOkYhm7RMbFtYfDL
kOCOR0Lf2Cy2+1jwUa/kt14f/EbOC3fg93AdPtw59idWtkiuXcmXGwcXb4lY
gh/hX7trXGOST8FRcBUxj9jXW/j1yKfIL/aFLzJOLPqsxrGSmpfaDH19WnUO
QS5BfUedOD/yg87JtePc7FyTnJPa9KrIV+CHjVXndOR21ATUBjdkx1ZiLLU2
OQa5xvGSXdWw4cJvjC8+GfkN49QzcDbcDWfBC+QM5A4HJteqW6I+JV9GV/At
3DwjmX/JKcgt8Hl8/13NaZ0co4nV6Khhsk7QzcPx/tSHuXSdjC2OEK5Xujbg
97FZbPfFiKc/T+ZacmByYTgD7mAP9sL/akv7Abk898W28Vl8b3ayL68OPoWz
qFWoOeH2a4WPKO2zcBf3wZcXh79x33alawZ0gU6o3TdHfL48ObaQQ5FLESOI
Fb+NfAWdbK+ad4kN1OQDSnMCsYT5cMVL2bGHGERutCLwOcncvSnyDfIlarmt
8f2BbxJ8m6BOHZ185sXBb/gyHNO4dA5ELkSOQa5BPrYhOYf/PNseeZN6EcvJ
wZfG+MSKa5Ybk2scapmjY0/2opYh5yXXIefZIfxmdj5FfjOydI57R8RP7k49
vyw536CWhCPgCr7B8C1musaXJNcc1KqckbNwprNL1+jchTudWTonW5ica5Bz
sCc1ArUBv8X3kfXJNQnnnVI61+OMnJUag7qBupLagza1xOjCfdQs1C5jCufh
fNNgjDnnx++TG5KTjZO+zhC+QfhI4W3Z3xfYg7V7Q2foblKcjZyY3DjLqWtr
fWdyUnLR6eEPxFXyRr7t4eP4Mj49WOuuD76BD8i9yamxFWyGPIwzcBZqcmrz
I4Mf4Uy4kxqS2pQahlqGHJM9WEsuR42En8HD1E7U3NRi1GR8x2AMX4SjmQOn
w+34CLksNdKi0P+Eit+TGpGaYFbYHLbHNxe+veCT7MFafJXYdk/YAzGO73mc
gd/mWwo+QQ5B7oCvwHENw4/hvv8DGDOebA==
            "]], 
           Polygon[CompressedData["
1:eJw1lnmYT2UUx+9MTXdyfxcVCmOZMWPfxzpmIzL7ljEo0ijSokz2JaMYZafN
UlGoKDyhp+zMDNkJ7U/WNtUYJiZR6nOec/rj8zzf+z3nvfddzvu+Nzz/6ZwR
wY7jFEEINPYcpybG3VALTgUcJyjUcdKIFfO8Gypcx/kFNqIPQjKxmzzPg7kS
o01D/LfQP6F/hJ+hHl5T3t8V+qFz4H6403ecPnifoBPR3aEH/ECbBnj1Icza
RuI3gihYjJeKVwN9F9SEgXgxeOnwBvo1eB16E7vXVy3eQkghZw59nA2L4B68
89JX6TfcgP14/Wn3LX41dFWoAlG0vWDjbIb+Ff0bNPH0PWfQZ+Gc5ND+Mbx4
YuHoCPiXd6cyb9vwt8Lvrs7Bp+gtsBkGkfcwDIZ82IGXS04IOhHdXcYF0Xi9
8Jail8Aim5cWEIVuAo3hMn2JJ+8jmXdPxyhjPQHH4Qy8LzFyesIm9Mfwss3V
IeIHoTd6Jl4COa3QLdFZkA2VfCMV/210JrGz5J+DNLxVeN+jy+Ai5Mq6Q19Y
K/VAfj24HOQ4AZ592GPvW4F+B5ZDBjnJMBfdjVgsxIEHyXhJcB90sHmROklD
n+Kbp2E4XileP7y/eL7uat3XsPWVdT7NdzPIS4dM63sWOQPQ69Hr4EPrcwI8
g34FXpX5Jqe/p7XzJPopGOHrd/fKmKAE8myNItFlfO8ilEMyeUmQYvMo4y3G
L2NextDXGfCiq98dSXw0jJI19rXu30Qvk/0n84A3mtxRsFNqlHfU9bR/B4gv
gPlW47ssXkDuNJhu6/Ye8Xdhpc1Btqd1kkUsG3KgGYzHGwdjpDbJCeXcyKTG
j/J8BAbineQbt6Ibob9Afwnt0N3w4iAW/sHbD3/Tlwae7k/Zp+NgLOy2uQgj
NsT2RV/0VWKVMAh9DG8ksdvpQxVYiL8ALtG2KbEVNj4Z5yG8m7yvIe1uohOI
r8XfDFvgO7zWeG3As70/E/8lKCFWXfYI+hq6K7oLdIK2nq6TrNdxG3cE3p/o
jlKf0B5ae1qXUp8XXD0HZe9PQk+EfTYXRehbGEs6c7qPnM/gmtWv1PFtoTru
Al/nZRd6J2z//9wgnkHbwzwfggc8PWPlXF4qex9WQ3Xa5so4iG/neQf8QV4F
XAlorLOnZ11tdF2oY2fnKnJXwiZIkXMtoHMeIWsuZyW09PSOqGNtw+0MDdC/
bPq3gefjMBjvqK2XtDmG/hwipbbwTgR0TRfa/Dp4QRBi9TUBf7z0n1gl8zcV
XY2xFRB/Vs4nWSc5A4i3RbeTcdm6FZI7Bea7+q3tsmaejsnlHaFSW76uZbTU
BrF15K6HFr7uR9mXE6GHnAWyjtAT/bx8g5xeptuh20M0VPX1TpS7McP6t412
W6G+3SNxnup89BAYHqx3yx5ySuGkq2djPV/XMk/2B/SxdXuO+GQ4TN+D8Wah
Y/EfRQ+DoRAm96XkytzLOQ+tfT135+FdYj7Lg/QbS2i/GJrbWSb3THP8yehJ
MMHmIID3OPoJGAuJnn73EXRtYnWgrq/znIqXLue21dBeW8P6nu472X8bYYOc
a66+Q/os/xb9pbZhANyB9zVtv4JvbK1kv9Wyf4Vu6F1ypkCS3Wtd5D0Q4+vZ
FIN3nbY3ZB9CCbnF0IF4EbGj1l7ec8DVOWvj610h99p5vHI5e1w9X+Telvs7
Xva/p3doK6s/qcOr5CwndxmscfX7ciYO431DpQbs/sqzcTwk5wU8GKz/PtKv
QvRUmCF3AF5H66voTujOcMTWP9zT/zb5f5P7t4J5vgpXoDSg8zKLvDkwO1jv
fandF9DTYZrVs9TLFPtuoc2BI/868g/p67na3u6P1egPYE2w/m/8B6ucSUE=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtl3nQj1UUxx/vU3rydH8iSzGyJluUoZS2KaOhRmJskX3flyyvfffy2vfl
te8hVISkZaZ1WkfEVFSMpSjDJEn0+Trnjzvf7z333Pu7z7ln+5Xt2K9J36wo
iu7NF0UxWDETRXsgK9Mo6sa4wOKkEEWlkihqwXoxsCSjFbwaeH9iOpPRacq+
UcibCRlT4MdYm8A5zZkfCb6GvDX4EmM8vAV4EL2m8MB5h5xLlmF+FBzK3u/A
V5AfybK11ro368edX82ye54ER6PfOTU+BN6Y38hGpxHYFfk55OORd0jt/GHw
0omdr9+pAW8ve4AddX94Eec/sD4c/bacNQb5eHAc8hHwNujUZz4U/jS4ljEH
Pg7MYUyETwaro9cJ3pN9E5lPhY8F/+TsbvBL4ADmufBBYD/GJPhgsBd7XwXP
c4fDWWbnFcy7JWbPGZzZx/W174zb7RT4FDrF9Dbsvca8C/Ir4MPIBsBrgW0Y
g+EvgzXcbrVj+x591+Ngd37jIvumc0495gORPyPbxmaHzuA0/y59XyfnPcCe
she8O9jBbfgE2CU1m1fijif8bqfBX/x99ea70VsA3wWuYiyBvw++w1gI3wfm
MabDl4JrOHMlfG1ib90MXgg+hrGM9Qz+vgichXyJ/DExvghcor3I7kRnMN95
OcveawFjBjqj0Jmf2F3Ko/Omn7NTPo7+z+h3QrcvowCyFcgWMWJ4b2R5qd15
DmdsSO07qnHODnA+8u3ga4x58M3g8MS+axK42v1qr/wqsfXi7F3BOW/Ay8Br
ylfQeVDnuS/NBS9yh2xwZmpvrLduwhnDmFdjvifYHu19MrH4HQ5vCX+Ltcry
A2RzUvPlH5F9znhOb4msEL/9tueQ6an56jnWD3qOGI9sLKMh/AtkrzNKwgch
m5Ka73yE7DijnfwY2algPj0VfhW+Ab4Ufgk+Et4/sbhQbmkHvoe8DvLG8N+D
xxL68xkz4fm4YwF/+0V6h9Rskx/ZDfRzZffU4krxNZBzyjFawu8G16NTWL8r
e8MrwesjvyO2+NV73yZfh98OZsXmz4q5gonlN+WZhcHW5A8Zzz9lwL9Y6w6/
kWX7dU5BsDBrbeHlE+PKRdnB9K4zRsAfQ55BdzW8gcfai7HZ/HnwK9kstTj+
BD7a37cV+z4Llr/0jtJRXH4cbL/O6ZxYrtM5XyonM5r4m76gN4zsXZVntedr
36v5N/BGiem0TsxfdKbuWNpzy32x2UX2UR1QzlIOGMPe82BX5DXZO5jfK6sY
8DzfTnuRn3Ud6Sqf/AaODXaObKsc3wv5P8znBntT6YxzG8rmdRKL0X7wW8GK
zivEdq5qx0T0e6SWp2fAS7DWR/EClmP00DvGFiv63qrKn4nFlHxStbUDvAq8
kMda8dhyhvxE+a+H59hpnD8wtfUcvV2wmqfccpfn7aKKh2A+1wf5KMaz8E+R
HfIYmeXxrtq7H9nw1PL9gWCx/wB8d7B1xVF7t7POb5hYTnhIuTYY6rv0nv1S
87dVyLe5LRTLDRI7c6/ra/8++CPIU+WHYDrD1DOopvmbbg/mL6o7zZF/6z4m
n1kMzw+vlVgdVyyUhQ9JzXd2sP4B41H4CGTVFaOR5TXp6A13sr7LY1Z5rG5i
76X4rerfpfu293yi3KIcrjvnBatPqlO6w0TvbQ673WTf74PJ1dcchZ9m9Pbc
NVc5Dv5T8FjinGmp9Q2qm13Bycy7yBfQyUmtTp5wrvr5K/wMo7/nNNlT/lkP
POZ9iXJmK3BCZGet83wom+i9lEvWIFvm9pTPjHaf2ep5V/Vadbukx6ZitHZi
+U15Lzu1vuBDt7fqSN3YfFU9xibkmz1PDkgtL3VULHgMqu+YF6zfVB0fA15h
vj62GndBfhlbP7NU9Vq9BLhKeRm+SnkyWK8p3z7pdpYNE/L4QvhI+DzGcvVI
idUN1dxN4Fm3oeyf4+cvS6wub0VeImN9jnJLBeQVvK6pN1ieWp0vjSzXe4Nq
7sOK+9n6Dvhq9m5EXjRjNVv3X4t8P7wSshn6PXTyEqtNs5DHyJf5HUrCs/UN
qifwvon1dfqu1L9R9WsbOBP5FrCU5yLluJt74VPBmYn1FKXY9672RXaPDYnd
cx3nLE6tbwroLEhMZ01ifYW4ZLqbfucedGbHdh/V1OXee5RFXixj77jUa6vu
f0vG/i/ov0MJ/WZq/VqRjPWlnSLri6swPxDbfdSDqadSX6ZarH7ssvcv6oVG
gH+7n6ifqex7defrwXpQ1fGb9Vy9cWw9ifroP4L1geq1csHZqfXg14LlT/Wz
W4L1e3qXLM7eGDznev+jWP4vWFzrPurR9N9BtXh+sDPV+/8bzLbqOQtzzv+2
obBD
            "]], 
           Polygon[CompressedData["
1:eJw1mHf81lUVx788F/Obj/cBRVKcTIlRDkzTLJPEVY4IVEBA9o+9Ym9B9gaF
nzIEWWquHJm7vacz0xQUxVyVopZZfd58Tn+c13PPOfd7xxmfc+7Tov/orqMq
RVF0a1AUDfX79bIoLhbdlovidtETok6pKL4t3Tcl/0HIGHcVPaRxe+k7iE4R
bRXfSL/DNP/L0t8n/l7RNzS+RPSIxr2kv0bjfqKHs7+7VOPLQjZT3/ZOnvsd
0RkaT5VsZtVzOAtn4ts7RedoPFGyb0n3Q/FfED9F/JXie4p6iH4s+U9EvxSd
K/1s6QdI/l3xLcW3Sj7nLdl34OxfEW3T+CzpRmj+ueJ3it8hukDjC+NO46Vr
l3zXmaK9MuiVkh1X2oadpRsXtv1R9hk521Wi80SjpTtRc76Xfd5p4ruI/7n4
X4suTt7jktgPW/4qdJM0XiLdWs05tFYUv5DsQo0n49PSdx6YvCZr/5S7iZ8l
vr/4WeJf13kHiT9F/Grx/xQ/Unxn8b1F09lb3/xWusdEj4qmyBdTRZ2kP1W0
UbJNojtEx2vuqPi+i2iMxlmyDdLdKKoXfUnys0V3a9xGuklxXtY4RPyQwmtz
J+52vaim8TrpP6l4/a9Jf4P4htINjvOfKRqqcQO+kW6tqCDe9HOSdJvFH5Rs
8zPErxLfVPxY8ROq/v6LohWSr4yzshZrcmZkzYNn7lLx7+s8fcXX6fvl4pcR
g9KdXnr8XsX3QbZFfGN931/8WaXP+N+K92S9B8V3TLZZl7AfMUJsoLtO9Kbm
95N+iPabK/7tin3QKYi93q1Yd63oHY37SDa46hhvFfFIHF1ROldOkuwB6eZj
E/FbxDeVvX+THYvEzxx9v0D8UeIHiD9Hc8eK5mu8XrJGmt+u9Nk44xzNXSg6
Urrhkn1Vuj9mxxIx1ae0D/ElMXOPdN8XtY34vYi1xf9da/UQ37Z0DnF27nCX
dIPEXws2if9d9n26i36v8aWSLYozsDf5y5zLJB9Y+tsns8/EWfqKDtMdZkq/
UmvOFX+Q+KXil4kO1ri96HGN10t/A/4n/0QtJW8laqxxN+me05knZfuF2CRG
yZG2mvOwxpsl2yp7Hiv+NnJD/DLNPa5mGePlojmi2aLjJTsh9rif2C689/kR
72AYWMY3fLuBnBR9tuY92esW0Wmlc4GcWK/5WyS7GSI2wwYzwNJk28zkHOJX
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
            "]], 
           Polygon[CompressedData["
1:eJwtlnlUV0UYhm8gefXnJcU13HAPl/zHpdJSS620xSw1W9wVt8ByQxFUVhEV
wQAFQUBAc8Mtl8qyU6e9zmk9WamltptatrhlPe+Z74/nnPe+883cuTPzfXPb
TUoYGR/meV4mRMCqwPP+wJgR8rzV6DWwyfe8MtoOhHvei/A8z8W0V6Mv0X4Z
rkB4pOfl4hXQlkxMCmxCH8TrSFsn6Awd8TvASnvXdGJ+Q88jbhX6HPo8LEUP
xRsIg+A9e0ceei2s0VyIeQZuRK+nfQMUa954iXgX0L/rPTAXryVeW2gDO/Fu
ZR49YCu6Gd4AdC26A7o9xMC8kBtvEToJFsM/xLRjLnvRZbQV0K9Q40Ala1WO
fxRqaJsNYehrfOu/UETf7bANdsA9tCUTUwWvomMZt5pxanz3jv14+2APlBLT
CL8hLKTvMcabiJcEt9PeD+6AKtqqiClnLkd4fgU2E/MsRKGraa+BLRBN3M2Q
gb7AeF3Qk4k7ib4CVyE5cN8RTt8IqAOFePmB+yZ92yWYRcybeI/TPhamQmbI
rY3WqNJ339iV76rQ+WB+L/P8ElSE3Hu/ZZzTcAqWMFaifWck8TFaE9iIF9Cn
AdSHePpl2vzj0F2J6QZr8XIhT/tle5lle/0cegU6O3Cx6lOOjtQaak2YYwuI
hh14JcS3RbeBGNt77cdi+nzNe6PsXOt8V9g4CbRXojdDLP4t0Mt357UErxRd
yhrs5rlWZ9ry4hzjnYeLlotlilUuQsi+VzlYg94KW6AZc4qCEvRSxsmBVXCV
Phl46bBMuRNya6i1TKftLO+YhteC5+awDO8XvPboXPwl9LmI9yf8BU3wG8Mi
++5JxHyEHk7ccvRTtD0NnaETJNF2nbie6OU29tSQWwutifo+SN8HYJjmaOf5
NvRrtB2F1+GI8hWvJ/SGRcRMpP8EmOO7eX5OzMPoh+BJGIn3Gd4H8D58aPPU
O95GT0BPhDthCd47lo8p6LH0fwL+1rrjbcBL5TkNTuNNwpsMM2AFbV/gjUA/
AmO03njNiG0KC2g7w3e3RreCltBdY+PND9w6J9PnBM/Hw9x37AlcnVK96gQL
iFkIsehuyiHVY2IGMc5AGOG7NVPu90H31rpYvr8QuNxvjG4KTcyrtbyYT9sw
4ofDOvRKOy86N/8Frj42RDeC5pY7Wqsh6MFwt9WwA3g90PczzigYDTND7jtz
AldrVXNT8R4lbhQ8ZnuUrVqunNH5hh8DV9vrouuBbzmTozqGnqt5wE+BqwfK
i76MPRiG6DvwWuG1hstWm84Gbmy9Y77dN8p5395xk+VsHfJonc4Y42QrJ+Eb
nXc4Dlm05RH3JXq07fUx9FfKNfQ4vFRIg5OqkdYnX/VCOeG7XC3F2wjFsJ62
dNUO9GF51IVii1WfDN/ducrzG8CDMLtzdQ/qHdk6i6q5Nr9reJWq/cpNy33d
yYdUI3TOtaeRbs9z0Ku1JnCdfuN53zjfrZnu5lm+W/s56J+Vx/Cr7dtsvDPo
7+GHwO2vcu9j9CfwaeBqgmrDNN/Fa38T0PHKXd2feCHmcgp/FnomTLfcmkr7
FO2DvV97rj0q0LdrXaFQ/wF4EVDX9k9eUciN7ePVg/rQn7H6wVDVZMsj5bXy
u8h3/yxaF51n1RvVne6QyFjf4cWhp8EUyMKbTp84WG3/Hfo/UK5q7L3ofbBf
9yIxY3xXK3Ru0kLuP+de5QzcB+/aGRpv9UV15oT9v0Sj74IBsAvvEByEw5Z3
ml+J7keOxzbluNZP9cbusI205/Gcb94uvJ2wPdzdb28wTl90H+gFi/EC4hpA
pN0tOqe7ieuC7gwdrTZpnYtUJxVje/lW4P7d9A/XP9zV2BSrhVNC7n7QPfE/
OO1WcQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
TVPczsZexO8auBbf+R8lpBHw
            "]], 
           Polygon[CompressedData["
1:eJxFmHfYlmUZxh94n+p9eu1OCA7UJMVcqYxYshFxrwxxpeVoCFGQqalpaplG
jjRS1DRNUfZUQZAVG4QPPvb2Y3xMmRoNTPH8Hefl0R/X8V7nvZ57XOO83ia3
9uvRt26WZT3rZFmu3xtTlp0uZar0jeUsu1b4o1KW/UN4ufA1wv8Rnii8RPh6
4U+F3xJeJVxT9tiDavuO+q6QfCj9HbVVqa+H8Hclq6WvYaz0B/S9ByUzpN8k
+YFkq/pqJZdJ36P5eyWXx9z90t/NvAZ7WCy5OnlvrDlZfYdK/tYi4fHCX9b6
lwrPFx4uXKP+7sLThccIbxA+V/hKyb6Sv8G3OMMH0qdnPtt4yTDpa9XWWX3L
hCcJbxW+QPh7kk9K3sNa9b1f9lzWuCT5TrnbL2k/3YQvlNSVXpJcLP2GWIO5
6yR5kWUrNP5C9Q9Qex3h5cJdhf8g/EvJMdKPlZwg+bXwN/X7nsZ8pPnVws8K
D5Qsk35f8hj6/im5V/o9kr3S90k+4U4191KNvzNZLpb+v+g7Sd/fov6n1FbF
t4S3Cg8QXiL8K8ld3GtFbyv5rfS26lugMQc0/6sav1b602p7W33/Utsi4VbC
DyWvz3p3CL+V/Oa8/QqNWxnC2+8Pe+AcnLWLxv8pef11wpcLPyd8vHCN8IvC
q4T/IuklvbfkWem/kfTIvQf28oDwmcLVwp+WfS9zpJ+rtqfU93tJO+mz1bar
7DmHJPfHWo31vU3qe0RjZsbdNsm9BmsxZ6fk4VhrnuRR3lIyH19R30FJf+md
1NZBv+t01vWSjslv3hlHLWwLX5GszrwGa82W/E76w5K50qfy3tLvk0yXfkey
nezWNz6QfE3zN2Sew9z/qq1KuKPwo8KPJeu0HVbf49GG/nHZ71+rvns15h21
b5C8Kv01ycbkb3B27oBv8wa8xUuSNdJP0/xt6n9ZeB17lzSXvlRtRzS3Vdwn
a7I2b8BbdM9tl38WPj+3T5Q0diI2KHy35F3pT0sukL5Q/Qtkj48k2xrvPU94
s74xQ/rHut+e6vux5KjcPovvjpS8IX2u+purr5G+8X7m9ccLT4j7Xa+2o9V3
nOTYwn63VDKQmBLnwZ4WCP9MeLPwCYVt9PbcPoHtviH8I+HFxAjhvwpfm9um
Wf8F4eclX5D+xcL6VbljBG2DhF+T1JNeX/Ky9L9JytKLwjaGrXGnNRXbCLbC
G3y98B6x/cty7x0bnhF+1DjOhz8RryerfXHEF+6kUaz/pPATYY/EBGLDHvWf
rP6zJGdKFhKbJadL366+x4lZ0TZU+o7MY7EpYgExAVvjTl/IvQf2wtmuFl6Z
+YyDhX+IrxPzhYckt6FXsCXpw9W/U/3NeMtkO20tvU1hHdvdlbmtVngrdqy7
2lOxzb4U82sr7hsl/GHmMbskOyVdNfecwm9xfdgHb1K3sO31xAeS99CUO03e
W7XmLlP/dep/Vbhl4b2wp7XJPoKv7FNbc/Wtjzb0FpI3pY9LvmPuD5275Y5p
GyZ8S26fx/eJsf1yx3Ri75iIj9gTuQcbxVbnyP5Hc3fJazC3QeH9cxfcyfJk
n7s77GF9xTlnYLznFuGR+FjumEXsGpXchp4K5358EZ+EA2Cz5fDrSZJTI15g
s1OEd2jMLO5W+Dbhn0iaYnvkiOAF8A84DFxma/j78bnzFPO3S27FbpL3sEb9
fXLvrZ+kgfSGktuTcyax5JTcuXSP8BThE4k5ybGd/bTMHePXBh8hR5Orie3k
QnJi//hmi9xz2AscCa60Wvs9W31jdWdvC28TbkrskPSJ75BL2FPDyK/byu6r
F+sxBv4zQfpizW+TnF/Il401pm9y/NtU9jl/QexJPhtnnK1v9+KtyU2Rv1eS
iyXVkqUlzzku952y1r/Lzo0d1PbH5Dvhboj/5ELehLe5As6XHOOx9za5Y/+h
uF9iNjkVTjJX+LTcXIX57KXI/dYH4j65g17hx/gLPolvEgPxO/LgtIhlD0b8
IKaRE8mN5LCGhcc8FP5RP+IH9kpMJjbvivM1yv0WNcHvyBm9k+3o5Nx3yF3+
VHJ07jfpE3Eb38LH4CLEW3IDOQ/u8X3J4ZJ9AF9YUDa3hmPfHOfl/K1zcys4
8kzhOrm586bg39hsv/CZ+yMe4kvrwl6PlMw1twSfYo/sda7wm3Ah9V+XzL/h
w+PUtpD3J59Evjg1chBn4izPJPMVuDSceqTsZ4zmDJY+X23fJj6QU4WrhFsn
zyd2E8PJbfB5aouNwXfGCQ8Rfk+4WTLHPl+ytGzuzRi40eKoBVokf4tvDqk4
Z5O7RwsPD1/nvngj3oo89Lr0/WrbXnH+oQ19R8Ucd0DkH+Ij394c9Q97mCPc
H66TOR4ixEa4FH0tk/fOGYZqvZnSZ0lGCU8uO94Q+8iV5MxmMX4s+4VDl63T
xlqteLOS6w148YSK94LNYDtdkmsbapxZZdc4NVGfLYhaifhCTCQ2UsNQy/Dm
o7TWOdhobhvZoLFdeaPcMWg9tigZKn255rRLrmGYw1hqm1nJXJT4Tr6tivhz
oORasLpsW8KmqLW4D94HjjWibPvgbrijGWEz88OeRqvvvDg/dzJa+72ImJ3b
hj+vD6gVqKvomxr1HWtgG9RgO6RPC35HzUXthU1M1npTyraVVRrTKblG6Rv8
C362vGKuebPahibXOyfF/Nqo2Yj5xPpvBOcl9hEDwdRT1FaXSC7KPYecdFes
RQ1B3FuE7UmexB5Lrsmov4iZZ0Q8JhYS03eVXOMS66m5qL2o8chPbZPfijeb
FDUedQg8mu+/qN9rcsdgYjE1JrUm8Rfu/EQy34bDw+XZE3uDd+Kvf0++C+6E
euQV4Rtz1wvUEtwxd13Oza3xKXyrk8Z2LpzjyCnYSFXUPeTGs3PXOXAOuMfs
kv0DjgRX2hlca0tyrCfmtwwORw4g9teGjFb/7sx9nI+agVoBfrNZ+gj1H1R/
t+Bhw4QPZP4G/PW5yA/wT2JWdfgvtjpMMkj6krBXOBhcrIOkI7WZxr8SfLtx
8LVBwcfgvnMi3uKD7ZPrO2p76lnqPzgnvLK7xp5XeA41E5yPtYjHKyTfUtsZ
wdHJa9RZq6Pvea2zN/v/GH7bSdoX5hRwixHqnwg3iniDjxFr5kX+IYYQWypR
b5ITyY34CL6yOmrU9hFPhmnMtLLfl75VwRsmh39XByZ+8F8IMYZY0y7slRgx
omJuDHfkTXibLsE3eTPe7qjCtRL5eURyDq6fOweSm5sUjs2PqW2s+q5Kzm3c
OXe/u2Lujg1hS2fF957JzaUbxPzbcnPfw1EfY+OvJ9dkcHs4PrVavcDUhHCO
EwvXPuQQcgn/OfSOfLGGfBDxkDO3jfxGbOf+iXX8Z7U9/GNR5DtyIzmWXAtH
gavclLv24z8R/hshvpK7qTGoNciv1EpHgm9cGb4PJ4Ab3JC7VsRH8JXBuWsj
zkfsuyd3rUtNQm3Cealthob/U1NQF8AB7syd08ntcAy4BvyF/wpvSf6/i//M
yN+8CW9DjfJ53YJvkJPJw/zHwPt2y/3fA5wabk0NTy0PBzmlsJ3jC+XgE/wH
QM0AB4WL8h8G/1swFl/GJ5hDrU6tQg1Lzf7zZK4OZ+e/RGwK28LeqVOOifvi
P0v+uyTXcBbORM75DHrLO4M=
            "]], 
           Polygon[CompressedData["
1:eJwtlndYV2UUx6/w8+mH127TXC0rRwMUULRMRMRsOtDcKy1zBVqZmuZIpdQ0
zVHmSNNEtoggCLIEFExjFJiCiTlSrEQMzbT8nN7zx+d5vvd7zvve95533VZj
w0PDPCzLioCG8KNtWW+7LGsiTIAEx7Ie8bKsh8EfvsMrxFsEC2ExPItXQLs9
bstKgi54xzwtKxN9GP814v2hH6wjVgRL0C3pry20g5V4IXhF5K9CfwEVUC59
wRZivxKLRy9H/2KbMcnYgqCWscfgR8MFYmXkfY0+jfYm7gP5eHlQoO8/SSwH
2qBn4M2EWfI95P5Bf5vxN8FTPK/BXw1rYTpeBe2a4j8ArWA13lFiP+tYzxD3
xfeD6XgP4j0Ej0MWsVO2abOLWCLslvdq3WKI5VG7fAihfR1jWUFuPFyyzTu+
RW+Fb7QuhyAIvYTYUlgGf9P+OnjQxzDJxdsOI9AjYRyU0i6XnBzwJ3aJ9x9G
N6CNBcXER5G3hVgVejH6E4iAA3hzoT3aR+oEubIO8FaiV0E4lOO56MsTytDj
dV0lay2P2aaOUs+f0JPwYojFQhzMB1+8PGJ/MbZ6mIfXB68vPK3vnY3XGv0E
PAbZug42ojfAeqi2zZp8FT0VpsGX5Jy1zdqulO+Ek1Ci375V6g3bHLM/ZPw7
0VEQDTWM5yJcc5s5+EzWHgxFD4FBsjZod4v4TWjsZb5xOTlXea6DFbr+C8n7
wTbztRFvE2zWsYzGewPG6HxI3nCdyxE6v//Q1w23meexeHfInlUtc70DHQkb
HLMfZV8O1vHlQyd0ZwiABVp7f7QfdJA5JyeV/vfCITjDevEmpyvv+ZMls52c
bZLLczr+PPRcmAPHaRtHm1hoT+wgbSPlvEHfRTwdfY7Yeeig8Wh0BuwXZJ2Q
N4nYZJgCA+WbybsB12EPOYPwXofBsgfUi4Ij6N/gAnQi9go0oj8bzuMlkjME
rx59DW5BMp4fXiE6njFkQTZMwGtCu/vhXsggLw280HdCY3jLMTXtqPtD9snH
eONkPuBNXddS01L6LIEUtCXzLGcBzxVw2m2++x3H1Ooe9N3gwD7bnBNyXhTD
VcY5QGqHLnCb77mJV44eqlq+aRh6OIyBf/H+g4b0l0osGK+S5yqohgTb1F/m
4Xlix/Fi8ZJkP2qt6vW9Uuej6BIoho5ytuFdRl+EGuir8yZzU0afp6AaJjqm
blK/+7SmAXilsg5sc0b9f1ah2xJ/EtrJ2idnl23WYk+ZK3KKFNHyjS7yTsi6
1fqOxBsFoyEMWuKdJV4LV3StNcVrDs209tK2AdoTPHSOqsithEtuc4/IWELg
lNatF/oFx9RK5qYfuj+EQgptkqGbnDfEDrjNGnLTzzPgDeMdczYEortDL70j
5bzvge4JwXrmSJ1r6acOrkAfvAxYKOsO5sv5Rk4m3n7IggXqdWa//k5pvpLz
UM5QntOIp8I++Ej3bzf8y+RFyRko+wbvZcfMq8zvOd1HJXjFMneOuYfl3E3X
fk6gm9NPC7iIjpU4sR48B+udKXdnoJeJnSb2IvSGl/SskHUvd8Vk9PdyZ3ma
8zRDv6kJbVtDG9hFXRPAV/fxTtvsYdnLwTpX8XKvwizazoYPIYVYhGP+bw7a
5i6VO1W8rnjPQReX+feR+2OHrBOY4jL/SHNk7tG9YYCMk5ypeOEwTddcpm3W
n/wbyD9CC/UCdU3E2WYfy37urutY9miQ1Msx/1LL8JbCpy7zT/Mo3/w5OhJq
mKsAnpPIe4/ndyHMZe5k+d6Z6klsr2P+S9ag18Fal/mnkXt6BvoDeN9l/n3k
X2AROptYDuSCzXsaQTMvE5P/g92MOxF8dB+nodfL+Ux8IITCEfq6DRqcino=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1l2eMVVUQx+/bfY/dy7vsoUrvva5AAAFpSlUEBKRIkQCyShcUCGCB0JEm
SAvRDyaG+AUhEBKEiCJEgkpEJQQTiRqKIL0sHX//zPjhZP5n7sw5c86ZdmuP
nTZwak4URTVSUZQLXRCiaH0mipomUVSHMRU8C14+uDK4LXguYya4LrxmjK7o
noqjaA78GfB3g+dCG8P/IjbdSszb8b0eeBb4XXBD8FLwcnAFxpV0FD3MRtF8
eB3R3QbdxHgGvBG6wW07zpql0K0OfwO4pfTh58lmcBr8Hvw60MrIVIOWZJQF
50MzjArgPOiDtMmkwFfB5cDXofcYAfwbtGzG+KWhp5jngX+FTmCPDPgONheB
T8NLs/8t5j/pLAXYjk5FZNpmzA7tpbvoxKidsjvNc3tKQR+jlwU/hOYwLwOO
oHfcnirgAkYpcAJtwZm7gX9n/1rMy4NrQLOMquAy0FaJ3eU2bPtI7wB/HfQg
OouhS+EHZFqBe4NbQmsi0w76GTIDoKPgN4fWg98aWugykj2GbTH4OHS4v/s+
8Gvo/gC9wz0MBT/hKF+mzXdaIvMOtCf8PfDOIzNH50mZf+yLTUZvXR/b5sH7
ABv2Mp+t9wU/lzEf6JqxdbX+buh05s1T5rt/+Hvp3V5k3hD8MrSPY/F2xbbv
Aegat20VdAt7bIWehj8Y3Bv8CbhRYj55VOeL7S7X8/1DxQf8ldCtrvs0so0T
W28NvBv4RoTMcPQ6uA+M1j0onsDdoV0Uf+Ae0Gb+jk0UM4zW4I+hL/kZ+0M3
su4Gj9kl0DYpe9c5sfnJsthsWA1vHbKX08a/CW0fLE6yfK/rNtTP2H5NZQvf
Y77VVByCE3BDcGdwI/fbBi4r3W2x6Qs3db7W6op8afexnv6OuqtDsdmueB8B
7c63FvJxnSW29ddDN8fmb9s99mVDp2A+qtjqBe7BGKb7SizPyE8W+r7y2T7B
7JNtT8Ern9gdD4RfVnEEHhCMr3cYBC4JrqZ4QW84874Z0x0DHqx4BjdhtEfm
R2ReDxYDsqEGY5zeCl5Hf1O9bTc/o85VKbH4GhkMyzdHB7szvftqZIa671Xg
+zC3oSK4XzAfKpNYHlQsyD938q63cbMd0OaJ5c5FweJIvq3YqgWeBH8m/J3M
p4Fngyd7XEzMWP4X/234UxkTFPPwjiHfBZmTsenK376BbsnYPWyWX/v6M4Ld
i/infV+t/ZZqBfOL2FgGXJiY3mbwWXgJ8pegfzsWr8h9+03FNbrPpyy+Lnj+
OQd9A/0FGYtl3b/iWvH9iueWodDDzDsrh0OXuHwDZI/EFrur4C3MWIwvgi4O
Fnv7+T7Pa5xq3wnmnVLGVy1bBn8l35cr7lNW2w66zC9eE5XHJijHJmb/GfjV
wCPhTw6GR4Engau7/0wBF7m/VUks/2ivFfA+j+29VHN154XgPbH5pOJ9bTA/
kD/0gF8vWP3L5fs1ctFBvp0rsPwvP1+LzH3453XvyL7K/Aj4OjIPsvZepYPF
nOraitj4equy8Mcwz4E/GfozvJKqTdDyiquM1WjVLeWfWci8EFs+HOF4L7L/
sFeHYPlIeSmdWN1uBG9abLaFYDlf55K/9/cYUywUZ61u5/gdjoXfF5xKrI4v
1J7gR8jUDCavep4LPgB95LEzJTa/Uk/ymHEDXqVgNUu1Zph8MFgtVL7qFZs9
smuHrzME3lFwvmIKvEBrqkbKtmB1/UnW+hfdZ8WM5Vjl1Gf5/oC7OIHMePRm
xtYbqLe5gs5d1u+rfOs9T+7/d6tcE2yvKqplseVJ5U/l0SJ/o9Gx3a3saRBM
T/pNHCv3Kgdnmf+lnog9cxLrlWp5n5NCZmRsfPUptYPdrfqXyP3nPnAA9F/O
8hX8q+id9XOpd5J/qHe6VGDvq55nvmKWcQ/dftDLfNvvut96rVdPIT/U2Zqx
16609R6Ks8vIFSPTJzY/l52jlKv4Vj9luT6TeH8UbM1DWp99SiTW67WAfz1r
/n8NfrH3iuoZ93tf8bX3OQ/YayD0sL+13vy294H30b2ZtV7odoHpSFf7jQ2W
mxTXKffJVLAYVD4rAM+OzfeK0T2Ttvv5M211Wb1eVWTGee3b7vemuL5SYH6r
On8X/J3fm85aMlhu1ZuOCNZPqKbI7u8Zt/yt5MMn02Z/LvuOje29FNfTYzuj
+r5HyOcFs+9u1u5NPqZ8oJ5Ha95AZqLnVuVb5f80MuOUq4Pdr2Lhfe9zlAcH
+d3K/yv7P8KjrNVl9STVvC6pto6BjtfaKYv5con1hm2C9bHy/02qdcFqiWrZ
kGC9oGrrp7H1t6rpJYL1jjqLYk156SL2F3oeU08lH1PveqHA3kj/AvonqBjs
X0J2jnHblN/zPY6UG/8DOfp7eA==
            "]], 
           Polygon[CompressedData["
1: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
vgWLdSt6DvAYPoifzIgzn58c09zF/wCJZn0G
            "]], 
           Polygon[CompressedData["
1:eJwtlnlQllUUh19QxNfvk09wBRcEDbUyUVsVcUlNQTBxSdxQQHFBUHDBRBu1
cMsFE1zGlplmqn9bzEmtbBmnzHDGMtMps819w1wRtec39/zxzHfu75577n3v
PefeLyG3OKso3PO8CoiA+ijPq2noeTcDnncf+wE8GQI6n4KBEBP0vCRYgT2T
vlkwG170PW8kXGPMQWJMwB4B6XAebQ/aFeLOxXc6Y/MhF9oTawo+k+Eififx
K8COQx9L/0swDgoY1xYtG3svPp/BELRnIR6tCX2VjNviOy0BrSN0AJ++SWhp
2OkwCtqgDUV7HLs79IZmaFWM3wpvwTDNj88Y7NGQD0eZ91/W2RrfEfRn0z8B
JsJoSEXrD0OgBT4tYbjNm2bx3iTOLmhlMcajzYFp2FNhErQLujkysEdCpvlp
X8bIT/6QC5O1//ZNU7Bz4B3ivw2x5q/9i8Lugd0TkmEwWhY+o+Am33SYb8vB
DuCXqDXofKCPjX1COYA9CJ638xiPloedr3OFYdDL9nK49hxWE7MC3vBdDM07
SjGwB8EAaI7/BcuTNPwmwiTYDJt8d1aKG8IvGvraPmu/M+m7Sm7tZ+yX8AVc
inJ+feifAjnaR/x2EGs7fOC7tSuHsuAF7KFam51bKloX7KZBlw9Vth6tq87q
5AZz3oFT2L/CCYhk3Dn6d2MP1RyQrVpAT4cMyLO8T8HuC/1sriDaFcYeYOy1
gKsJ1cYM+pfS/wj9e2nvg1t2Xv/hl0s7z3d7sA/tFzgOl/EZrjyGs7amywGX
k8rtMcQdC+PgNv3X6X+gb8K+G+X2oBt+XSHJ1rcIbSEshmK0xKBbj9Z1RGeM
toK+8JDbD+3Lz3CbuMn47qR/B32/43sKkrB9jcHeABuhBn6Ek77z34nPSliC
XQaLoDOxFtgaPsTvK/gaHtN5oU2ECbaWBmgR2JHQSPuIVgmbsTfBBuiGzzK0
cliu77M51mOv0R5gf0/8Q9AA7Q7fdBeO2bcVahx+r8Bkq99OUIq9EBbAUnxK
YS52IczWHYXPb8QcFMa+0N4OPdDuEvNv3TXwDwRs7Bz6E+jfzZhPfXefKp86
oH1E+2PojtYELQDREGF39krsV2EVVODTLORia46LcI85jzN+AGvZgk8lHKYd
j999+sMUg/YqCKKdRSvGLodlsATKYA20UB3h8z72e/AJlNge/ISdyhwVtF+D
A7T3KwZ2FaTQd9R35zuf9jwoslxLQKvTWrUetHC0Y/j2Z8zrtNfDQdprdW6w
zs6vC34n0Afit412te59tMigW2sP/JKhJ5zGbzB+5ei7oBc+bdAvqX5Uc1Yn
9+Eqdq3qFWLxyWRsBpyxOh6r+wt9o/JNv5ZrtwLuLbmH33TVuO/yRXtUplyH
l6E3NEeL0Z2q/MWno3Ja3x7hHm7tgc7oodYF9eChTSPmVCiEvyyHdG7nsc/B
GahjHQ/htu2p9ra97ntoCiE7Z/k9HXLvgd6FNtA46N6KTqop1Qs8h09X3We6
O6y2GwZdnSsflZeNTdO8t4gdR7utchifBay1FJZDQ6tV5bRy+3Pf/e9Q7sYz
vgB7FsxUflida0widifoHHL3ge6krdhVUB1ytaX9aKz1qVZC7h7/A+1POA2N
bI4Z9ibrbS5GewZSsPtBrO3BfLR5UGL1qZqutf9BtQF3BtPsHdB7cIO+7+i7
HnD3kHLi0aC782rsfTlE/w9wxP6PrbQ7aQ/938C3vrub1qGthdWW49FoF6yW
Y5Q74Ck3iBlmdazcKNLdAfX4XbHcVS20JE5raGX12xbioF3I/c/SfynlqnJW
NaE3Y7HvakFxWqK1gtYh9ybpbWpmayrB3gbVvvs/pv8s72L/D7P1QAI=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxFl3mwj1UYx98f/V7u6837iiRFyDKWweDad127i+vKvu9LrhZLYy2lmqZt
+tsSLVQk2kgxGKnRUJZUyhJRibJvqc93nmemP955vr/vec45zznn2X5VRxcV
TCsWBMG9mSAojhwWBcEL4OnImmkQ9AmDYGwcBEuyQdAZ/lhOEOQzNgi+AePL
nNf4ePT6w9eBn498Hj4P+SDfLHAh8gLz+4CXoj/O9eui/w6/832dt/kGgtcg
I8Yng0NkLb6HwSWQu11nJ7Ivv58G90MWx7ZdcJuTIDjHXj3hA7jG7DGU8Yns
2Skye/pGZofsWYGcENu56qV2Rq05XHPhVzK+nDULwA/BN4TvE5td5+C3MD4E
/susfbJhJfx9jFfmuwm+wJeC+zGvDPJR9Msib8CXRxbCV0IWZWzeEr+T85wj
xaamcEPRacq3lrGlzGsBPw9+OtxY5DjtB3e3r98isj2ExVUITV5jbjXGxsPX
jf4fuw7fl7US8CXwMHArcHnWnAx+Av0B6F/I2txLyMr8HgvuxfiP/B4uP0F+
wzcMvA/ZPrJzNUb+lrU3PZe1Mel8jzzINxi8H1kavUO6S2yoyN7tsGFEbLaV
Bv8N3xn8BzoHwF1is0G2XOX3XX6fr4NXo5MLPoEciU5JxpaDH8/YnZ0BDwX/
jvwpa+scQZaL7CzVtSa/x4AvZ+3MOvsNZFXmz9AdhuYburfzendsbus2j+Gb
j05v1hkF7gxfnfFq8seM+YfOJ50OyNHo9ELWQOcae0yF/xd50+/2etbW6YLO
/eiU5WvmvpF6vChuKoY2V++qd2yJLJfa3egt5GvlQjuL7jTX3ygP2QT9buDT
+N4hznOePSvC70vsHvNiix3FvnLAr+i9gXwtsbhVbL6PnMu6z4DnICcxZxSy
JTZMQi7K2Bn+ZE515QnGx3veWBxafCnWzzI+hr1ngPOYWwT/HDqT4dZ7/K7T
e4bmn7Pk7+i8Ap4d2fsrjnZkLZa7gk9i70z0Fmds3b9zLKbeZK9Jkdnbw/ea
De4KnhWbXYXgac53A49G/0XWeRhZL7T8UEe5Cp2XtT78Y+AndSb0cz0fKq4U
F3qXO+EbO6/xmei/Cp7LeGvNVy6K7Z3nKa6R3fnmZMyfFoV2J9rjIfQeQXZM
7Y7Ez0JOdb4TfEPPCfWRzeD7gW9yB0We/wch26I3hfEpjE9FPgs/TfP4Fuq8
2j8yO2fE5gN9wVeQS7jHrdxn69h8Sb6xAu6Ux+D2rMWF/Ly4fJh1jsK9576g
PN9VuZG1NsGvhT+eY3l4GTjLnCqM92eNAbHFX0m4epH5fBPkP+h1hB8ZWx7U
eYco/4cW+6uytqb85yKytt9nA+Sg2O6mFGv+kmN+Ln9P+N0IfnBsOtKNUqsH
evdWyMLI/Gok8hF0FqLTWn7iMT4ytFq5AFyAzmB/04GhzVWMNEW/RWxnX8M5
moM/Um1MrOYpvrZl7a31LuOZly+/AfcMrW7rLPKRYR4XI0LL4aoRzVl/gsfg
AmQx5j+Ysffa6Hn4M+QT/u46g/KX7B8cWZ9QpLyVWj3Q+lPly8zfzLwPsHO6
12XpdY0t3x+E/ws5Gv4sslpqviUfk46479CplVpdV+/R02uc1lfPoD6idmr5
RHeZC24Tm09tSgzrbj4FN/S6r1pfwfNhHfBJxoqFltu/dnv2ID9PrLdoG1sd
V02P0Wnj96W4uCc1v1KebJTa/aqvKMXvA8z5IrF8JL9SvyOsXPhWYrW7AP4a
/Mdwg9TbMG+DY3GXGfsAuVq1mPWfCi1+FafiV3m9U+3bCG4f2747ErNBZ6mA
3M7vvfDtYottxXhJnRf+MHxH1fbY3vnDxLDebj34DF+GffPh8r2fU4/R0u2/
qnyfWK+m2rrB4129VmWvazXBVTyHyGfKuo/J1/ajf9LriPKSckkHdCulFp+K
WfUA/VX72GtPYrW5U2znVY+wE66C11nlRvUDquGfwG9LrP/Q2bck9sZ601uJ
5Q3lB+Vw1YouqdVcxU0x8A+J9Tfd4LrHVvN/Tqzuqv7ewdwgtdqv/FPgb6Qc
WMb7NOWZ2HOFcsLFxHo+9X6Xvd9T33UbOjW89o31vNQlsryn3vUscmBs9aRE
av6hPPAua0xE7yV0HkWe5ncQeg/m9Vr250QWy3pr9cbygeusWdzfKIusBD8F
XDuynkb9gHpD8Vf4fcTzj3L7pRy7B+kd0x27L+ldksj6KPUJNTz/KKfKn3uA
zyC/dTvlVw/ElvP3wvWIrcf5zXtm9SG57kv6fTyxGt1dfVqO7S87jib2RrLz
MLhDbL3kV4nlz0L0b+WYLys/347c7bHfOzYfVL+knvRUYvfS221TD7susf8F
ys31uf+tHlOKo9Jes1ULtK/61V2M95SfgU+A/wNtL5jE
            "]], 
           Polygon[CompressedData["
1:eJwtmHm8V2Mex89PnZPf09E5qZAirdKK0r1tupW03ZZ7b+kq3fZFWqSNZB9m
htes/pYYUxONKCXDaDDGEs0whilLKpIlFCXVLZ+37/eP7+s8n+f7PN/zLN/1
aTl1QeX806IoqihEUV19D2ZR1CCJopnCLUMU9cmjqLdoYRpFN4ieFf/FOIqq
GS/+VaKxois1ZnBucy4QfZuZrHPUnqqx32rOh8I/FqOoUvh54T8JD5DM8cLv
Cr8p3Fcy5uj/v1DfBM19T31fxybjbOHTRVVqv66+fyBP1EzjzxWdk9haV+j7
+4KtmfWwl+80fqfGHtL/RwqvFX5EuJ7Gd9D4eerrqrHH1HemcCNRU+Sq7xrx
vtL4/4t3XNRc/bPU11q8SFSu9rPibxTv76Jtsa3vuczOiLN6VPjPwm+JPlJ7
gvqCeM1F09X+UH3/Fq+f1rNA8u9W3zXiXSF8vfBvhacKXyiao/anGv9OZmvu
Ikpy20t7ta8T/6D474pfKnyDcHvJqC/+Ke1/rK/38czulHNaonFLRV+KP0z8
9eL/RfxBua2Bf09zor0QuaLNGrM1tvt8Su0S/199/e9r4UKw/+0U/z/Cg9EV
UYlkTteYl9T3tnhjNKZW/35SeK/wHtF6tc/S2MnifSL8X+F5wvcK3625Vbnp
DLrznmi72r2D3WUn8VPXyWVq31EwXR0ufLPwL4WnCI8Rvkf4PuH5wg9JxiOx
2cM+redl4e3cjegVtU8Wba2s+dXMdJC75s5fUDuXjInivyX8Ymb3wX3l+sd3
mekwuvym+FtdP8bxr9hsCx1D1w6IdmRmM9gO97lL7cNFWxtrXCXcXfPnFkz/
T/p5TRF+Rfy/ZaaDr6r9Wmy62dDX973wx+i6cI3w++xBuI904SrhF4QfEG4i
/qSC3Ql3g86iu9z5Zr/vhcJt9P8DwrHw1cIbxV8j/LnWO1R4tfBK4RGp6ftJ
4f3CB8QfLrxJ+K/CT7t97BI9o3Y7yZstfh3J/0z4SfU/IVrHeNGj6tus79Oi
x9RuG8w2sdETwhe5PWDT2PYn+t9g4Yc1/sHM7hydQpfQhTZ+HifE/9TPhzPj
rI6p7wc//y1qb1Bf4vtFR9CVZtiI8FHhvcKVuekqOnudeKmfH3tkr+9ndhfc
CbozWuNHiRbpnBaLvuEfiekQtn/C/c95ohai77We0eJt4EzE2y2qjW39x3wP
tOnbx/4zO3vuoLn7H9a813lH3T9zXw9nZiOTRcNys50hat8sflv9u65whegu
tf+ovuXi7dGc1sKtROeLyrWH4aLP1f+F+yvssyDeV8Kf6X9DXJ+xPfZ+h3h/
KNgZdNP4Bfh+9R11/cKfvoHPcXtC3/fHFiuG+vpGa3w7yarhHIVLiQ/CpaJJ
7g/miNcT/yZ8p3B1MP6MxHwTPor4QhzoKV6vYGv4QXRpsLVtYV+xxYgzghF3
zN3C20RMiC3GFYP5d+Lbb4QnBrPRl2LzcdguOr/L72dwajaGDOZie93Yk+bf
KP4Vwj2EJwjfIzzG4/Xtwr8SniHcVbjK48lI4f7EcuHbhauEB9Anaq/+i0SX
iMY5n7g+nLsXdVZ/F9GlPmasx376qjX+loKNvVx4nvBt3EEw/cHXTlNfr9zW
ND1YnGatk4KtnT10ym1N/Js1dBQeKRqRm41iq/igJ0SNg/kmYg6xB53tlVp8
uUntgdiI5q3EzkWjyAGKZvPYPjazp2g+Dl83ghxFeLdokNqP4f9El0nGZMm6
VX0jguUM61weuQT+Z4vHi9LUbAbbwed1F64X7O6fcf9EDvBybD4f308fvgs/
wlhyCGIzMZPYucrjETbSLbWYDZ+c47j+39T9DfHvn5npH7q4zf09Z7U7Np/G
mf1L+B3XR/73nMcvcqo6wWIWcSwL5o+QQexIXbeJycRmYkSjYD57k8fvnqnN
3eb2gIznPX7iI7FdYh6xaYrnc7UeT5GxNjP/d6fO+9fqmxVMHypFZbnpLjaK
rT6k8efn5vPwfRs9BrRQX5nmL9GYvhp7JvoqvKJgesx5cxdbPHacyix/xEf0
ET/KrY8284k/bd3v4s9a5qbL6DR6vNb3Tww7or2cJn65+EuF+wWjy0WF3HgX
4kc9vyW/a5WbTGRhG41yW/Mwtz18WKWvH9/WVLin21u58Lm59dFGP89W+yzR
wGD+4VjR7pZ8bjWxQ7y+7j/IwxjbW3hZweYQsznLDR5nW5NDiX9XwfJxbBrb
HqW+tuI1wY4T89FlwWyOfyAbW8R2l3v8w4Y7BIvJxGLy9Vp91+g/14vfA3+k
8fPdf81LzT/UBMtByUWJochC5tDcdARdWSw80McscX84yePWUuHfCc8OFsPo
o32tqA1rTSxmENuG5CYLmQtSkz8zWFxCN6s8nt8v/tLUcgb6aC9LLWde7/ZU
klqNg3/a6jkYMZ24diN+CpvS3M6uL/hhYupQ4eW+njrovfufaZrXILc5/d13
k9N3EX9RwXL9INzV94O+FIVPz00H0UV8/Bi/b+Z3yO0uudOZqdUQ1BLj1K5O
zWfi69a5PiCro9sXMlf7fqkZDhbNJrHNVbHF0DWes1W7/XcMVo81Fu9IZrXi
DOE0sZqRPnhNEouznV3/iWHEsoaiixOzaeyEuDUysT2wF2Qg6wzRoczOhLNp
SK6UWU1AbcCZc47UTp1Fse+bM+FsuiV21tggtlaSmG3iE9h7y8R8BWeMbbIe
zh4bxBa75xY7Sjxek3OQW/ycgyRmw9htM7cfbLK5z+eu+yVm2+gAujA7MV3F
prFdxmPrxGBymYmJxeZBwWwRmcjGxxD7KxLzPRczJ7H4ShwnBhB7yF2JDVe6
/BrPf8p9/+MT2xNEm3j9c+4RzJfh0/AV6Bi6zPmiewX3x+hwHc8biO+LEnsz
gGhjc9jeeN//VOELsOXUbA2bq3Q95vyRiWxyAmq3WxPLFeb6edxE7pkb0cZf
4IsmpKYP6BC6NNnzD3zEMD8v9kOORq5W5vkMPmmA7xdfOCuxtwpqLmovYghx
Y5n7I3LiCs8/yDeoOfbKPq4OlvvN8fmV7k/5R5nHAWILbxjkSPgUfMsK7iFY
DXCt+O0Sqw3wYfiyRaLFwWo4ajnq7dfUrnB95s65+0Nuzw96ftPf7wsbwpZW
ev5CPtUjtTiEfmOD2GKN6xNvEvhk7oi7muaxkbx4PrmPcOPcfDq+nZqA2uBj
r3cOi47HVq/wbRXsPYUcm1jMeZJ7v+32jI9oId6XXkdgs1083mEL6DuxiBqU
tw7eIKhNeVPZ7nUZtQ5vCPs9/yDf3uf1EjUjcf514R1ej1H34UPwJdQslant
gbrrsmB7w0fhq9gze8dn4jvxk+g/byD1EquRWQ81FrUWNRG1UZbbWTH/kmBE
G5mHNS53f8GZcDa8IVDLUtPytoBPq+/7LfUcgtg5N7HcAn1gT+yFWpYaep/X
yeQ2nA25IzkkZ/SGcN3Ean7ya97Mdrif5i2NNxDeQnjDqB/sjemb2OrT9n6H
nGWt3y1vFrxdsN7zPJayPmo8YiqyeevgfvkH+Sxvhrx7fJRZvsD7xo8a84H3
HfH1MhYd3+n5coNgOoIsZP4vszeyYmI2g+1Qh56KTWanYLpEXyePA9Sk6Bi6
Ra36E4JOfZ0=
            "]], 
           Polygon[CompressedData["
1:eJwtlmlUVlUUhi8YJh9XLormkDiFmuSUDAqooQyKIijOOCCaaIpihppZ2eDq
V6tp9bfRLGtpow3aZKZm5YCkpuXQIIKIM2JmSs+7zv7xLN77nn3Od/a5Z+9L
tznlhUvCPc9bCxGwNOR5z4Xxt7nnlcNMnqfBfPQaeJaxcp7fDjzvfSak+J53
PdLz/oVl+M8zvoK45TCX51CM592LHgD9YBrxRTAQ7TPWEqIVQ+wASA+5sQCv
Av0C6z3K82p4gOe+0AeSoCteBHHFrDcM3R7dATpCFNyN1xv62+8Ox8uAEbAM
rwxvkUB3xesG3WEp3uN42ZAFqXgz8FLQrdCtIRZy4RG8VbASlhCTxr5SYbrF
xxCziOeFsBLW4hXirUC/SG5P8vwELCP+fhiPnqAY6ElcDyhA50MezCEmi7mZ
MB5m4CXaGdyHHg4Z0AXvLhiDHg05UELMed7TOdjE+9vK+7uBXu67fY1XPqy5
Gh6Dl9lfKf4zyo+YSMb7ovtAAky18ytT7rAYhhGTBnO1V5it90ZMb70PSIBJ
ePPw+mk96A/T8ObjtdV83Tv0Heh2kKg7AW1sLAO9wHe5D9DdgYHQB6bjFWlv
tl4T+d2C3eR7hHyjmTsbfwTjdxLfCeJgF+M74Qc4RFwGMReZdwE85mzDe4Wx
Op7PwKt2/y+ha6EG3sBbj5ekdwEH0L9AFXzP2A5bO4r12kOHkKsb1c86xnYz
1gzvY/QX6C3wNaSz1pd4p9E1WguG4l1lXgNsZOwzvMF476I3oweh/2PsJtTD
WdhgY43KC92TM+gFt8M44i/hXYTLEOg+4GXCceachBNwgLEhvjuPT9Bh7Dcc
rtqcQt/Vseq5AB2OV629Qw1M1HvFa0Rfg38C926q7KyOwnBi/tYY+jo0wRi8
qaw5Bcp0P60udddK0BP1XqEEkvGSIMXGdP9Uv4M0BwZbXaYoFrJD7j7ctP21
Q8dBJ7gRuH6ViE6GJOtNQ5kzBGZZ71G9xcMC/R6MtHpT/Y5VL0QXED/O7nGS
rZdud70z3jz0Qt/lqFy7QGcYi+cxVsVeRhKXA6PgYes5mdbPFqNL1avhHquz
UrxCnieEXH2ozvK1byi2OpqJVwyzrJfk2trlvutbi2y9KXiTddZWv+qTeg95
yhHyY1x+yrMo5Pqq+oH2V4F+CB60vruK8ZfoL0/z/BRU4P1oNar3/xP6Z6iE
3/B+hz8hi7FDeGfRI313PjqnYei9ePthH3wTuBqsRG9DfwfbVbPW91J91xfU
HzbjfWV19qlqSfUHn8MW+60c+91z6HqoM2+regZ6F2y3upwArcgpFlrDlcDV
R1t0G4i22jqPF4UOQXOrwQ/w/rA8P0R/BIfhEt5FOA+jfFfXqu8WIZej+otq
9Rh6L3of7A9cDTbTdxJugz2qK+Zdi3R9RnmnEZMPYYy31HfZ7lqItSNVG7au
aj8bXY0+A7WqWetrv6IPw0HrneoJ6g2Vlk8suq3uPsSHXF/QXib57jt+C90E
nr5bjHfXnQu5XqEanExcPHoU5CoX4qrJ4RS8xvg6fiORmDetB5+2HJVrsvoi
3g7YCesD945i7Oz1DhqUQ+ByUm4X7Jz1TR5n31B9S3vxu8fUuxiPY3+9IQFy
ibuCdxUadF+JCSc2DJpZD9C3W+d3ivEWPEfCQeJimB9AR7hsc/Ub6n3qgY0w
2ndn0MP+p9H/NucC9y3LRG8g5p0I18NOwHE4afvUXJ3Be+hNsBHeCtye9XtH
0EdVZ/C6neVf9m3RN6YW7xZeHvF1qofA3Rf1pFp7rg9cDe6xWlBNfIv3P95I
TZ8=
            "]], 
           Polygon[{{4102, 4101, 3157, 1569, 1579, 3159}}]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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

            "]], 
           Polygon[CompressedData["
1:eJxFmHlwltUVxt8X4X3hfl/1YtVWnXbGOm2nddppp2Onm522U6e1U9vRaV3r
giK1bthdq4JUWxEV2XdCSAgkBAiBBAIECIEIgbAHAoQdZJGiIAIVivT5eU6n
f5z57nPP/e57l3Oec8697qG+tz/VJUmS29Ik6arfHSFJWtQu5EnSEJNksXC9
8JksSSqFP5CckswrJsl8yWm1f6Wx7Rrzb43dIlmu9nmNnyFdVkiSbpIo6Vmw
OZjrrGS62rM0fqbG7xYeI/yO8FHJv9Q+Lsl7Jsnjmn+fxjToe8fU91PhVcL7
NO6s8N3CW4Q/FB4pvENzdUpGq71MfbOkOyQ8MdqaWfvlWssnC/aNn+n/61L7
9gDJaLVf1/g7pTsofEDyntq/0LiRapdJP0T6e9Q3VHMNkUxWu0wyRLJVug7J
ULWXaPw8jd8lPEy4q/bzsObpLemmdg+tYWNqfeguaPxW4QeFuwiXCVcJT9T/
H9D/Dwm3CV8rfbPwAsmX1b5Bsoh74RvMLZmv9jOSOv23XvKs2u/r/xv0//uk
/0j4iPBa4euE1wjvFH5L+FPCy6KNYez9kkTrmSx9pfQjNN990s30+1sk/Dfh
gZmdHWf4onSt6rsmt/WuVnuY+iZLN1hj7oq2J/Y2QTJOcnc0HWNe0tjx3j+K
OSX3Sl+p3yrJXMkejVmpsZ/R/G9Jt0JyVW7rb1F7tPTl0o/V2PvddvtItzc1
Oxgi/aTU5uc7D0Yby3+el3699EvU/qz+0yZd72hrZc2TJXXS10q/Se03pXtY
Uq52meQhxkpfIX2FcB/h30nWqt0m+a3avSST1B6vMcM1tntPs3lsfYGkQX1z
pdvPGI1tF24WPi08VXhQsP8yxyPCc4RrUvsG38InNwvflpuvlvh6Vkg/UHiE
3wfrfYzxkjs19i7JOfdHfONLwpuEV0k+p/YK9XVw9tHOhjNah+0Kv6a5BmXm
L23qWyzdMeEp0q2XfFH9X5CsVbsvc0rXKvl9NB+GS+AUfLtFeFFq/jxYeJpw
dWr3/xS2IzzBz/dx7l94ofB67FB4r+Rbmuvbkv1qvyBpkG6BpL9/D+74rvR7
hAvyxyAp6A6KkvHST5G+UeNflP5t4dXCt2v8TuEa55cW6V/y82b9N0rfKbw5
2l7Zc7vaXTT3NunvEN4hvE3yc7VvlWxXe67bU63m+4PwBj/v6yUb1f6HpEm6
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
1cC1Hk9Z338Byld6Tg==
            "]], 
           Polygon[CompressedData["
1:eJw1lnlQV1UYhq+lmD9u9SMdNSvLlpn2fd+zfZvKxl1LzX2vZirLXQQVAcUF
hRSDFEQQoRQBTU1l0VwQ9xXJyg0XUlRQ7HnnfP3xzLz3/b5z7rnnfOec26rH
kDaDr/E8LxwaQGbQ8y6FeF6873mbAp63GZai+zb0vEfgYThLThV8iP4A3oPF
5AzHW0XbNLWBZTAd7zBeProQiuArvGy8JZABY2kbjbcDPRldQM4KiMXbhlcG
eyCaWBL+XJhAbIP6QA9EL0CPJj4IPRiGwhD40vqNIpaIrkD/CcdgCl4MHEAf
goMwjZwE+pwN8yEf7we8JeS14zs7QHuoxrs+lDb1PK8Tzx2hhvxw37X5jvgw
+B6m453Em4OeC0lwBN6kzRvQGjJ8l1dJ3mk4BeHkVNPnJ8T7wX7e5fPOw/jl
+hZ4BT+ddtPgOG3m4aXAzxBF20nQS8/EZqETybuBNo/DE7CC2CS8LTbPmu8o
vAl4RegSKIaJQfeOE+gLUA2T8GbjeVp/dJbmCWZo3aG/rcso363XOvR62Kj+
8GYqF+KtRmLxMmmXAbmw39ajDL0NKuBB3rUUr7d900itK/6PVmtaW61xufXX
x+pE7+uL7mdjrkc/DSEEfgm6elPdxdk86ts0l0fRU/GSbV5noWvwzsF51S9e
J4hFj7Pv1vePVp94K2EtRNBuLP4YaE8sWjWCl4oOMoYw7Su8GXg55GTDmoCr
G9XBQkiDdNufM612NUdT8KZCHIzDy8XLg+XwDV4M7EPvhd22j7S+hejxxCIg
UrWqGtTeV//QBS+VMSyASMtXHXymedC+0BoSiw+4/bsLbydst/3Wwb5zFPGp
mlt9P97v/8+Hxgv56MF8f6Mwz2tGfTcPdeuZaPOo/EXoneiPyMsi/xzP5+EA
3jN4adpjPFcG3Bl2lTZ1cNHm6mu8rehSyLQzZz9eG9p+Co/BAt/NwTTiiyEL
upKzlz73QAqxe8nbZXVQS/wKXNb48MbgpaMHBN0ZpbNqA5RAKQRou1I1Cq+h
X4WXbf+uwWuGbgpNYI7v8rS/F6FP0/5MwJ0br+OdQNfCZdvTN+I1hptgvvZd
0NWn6vSM1VUS3Eb8dmgJRdpD9k1b0aU6b827D+8BuN++V2fEZvqpgn91Tmu9
tSYwj9gd5BXjTdTZDN00B9q/Vh+qk854OTqj0N0tPtx3Z22C3TW6c3bDrTY+
jVl6HXo9FKoe4Ba8FtAc5pKzNui+XXNws3n78J5CPwmP2vrqHG+L3k1sj9YW
NsHdeMn6RvSWoDu7khlfCqTa3fKTfWeJzhTYCON15kNHOwOGkbOV5y3wh/V7
AP03+i/4x9Yvw/prhb4L7rT5S/BdnSxD58JyqISTcAret7u2se4B7oMBPPeH
XN/dPQV25qywe2sh3vM2B5qLQ3i12sPortAZslU/9HeI/rrx/Dl4PF8HDaFJ
qNufAfZnJrlvo9+Fd1SHQbcPtR8bkdfH/g+0D7UfLwTcfOu+rLLxn8W7AnVw
GMrhFLxl/ek/Yg3jXw2/6Yzy3XsVP0rsGByHkTACRgXdf4fy8tF5UGDnQqrv
/l80rvqMvwGEQFPGWsH3DsIfCHm+W6+Wtj/usXrQ+fIc+ll42vqbDw+h43Q3
hLj7aDXjXwXFAXcf6k5Rnu6rMvR22GHr8QLeS/AiHMQLYyzljKU3z710J4W6
c3yZ/SPpX+lb8uox7p7Ev4Duegc5Lcg9QtuPeR6q+9x369sFnYO+lnh9uIR3
EWospjWPZKwR0M7O8xj0VXQdeLyrh70jGn8yzAm4862tjUXxX31XI6qVODvn
e+ruJG8Esf8AmvSeJg==
            "]], 
           
           Polygon[{{4286, 4285, 3226, 1803, 1813, 
            3228}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0uA1EYgOFvpq2ZqdqwrI2kNgQ7liyVlrY7WxfQxl/8/1wCCTciXIUb
YVWJPZ4hmXfeNzlzvpwzc/ujwTCJiD18iHW+TyMesKmfuc+NPGISPV3nArs6
5ww7usZVdHWFU3R0kpcfRmzTTxaxxd/c5jfzN/iVX7Cmn/gRy/qIDzGv+9zD
rF4p1zGjp7iBuv5yh/I+B+an5X6u8DGfoKpP+Qw1fc4XmNCXfAVPXHvdZH/H
jlu+Q6ELQ6d5gRfR1B3uoqWHPMKSHjvIJ1b1e/L/f38B1Wsfog==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MkuA1AUgOGjNt00iKmlFl6DhHdoqZoS09KwYlkJC5a61OqkplfwIqw0
8RQSNr6bLv78f25uzj25iwdnpdORiNjEZybijmujEZe4111+5LdsxCt6+oWf
0dVP3EdH99IZ2rqTjJZu8UNCN7nJDW7wu/l17qd3cKuv+SrtoPd5Dxd6lVdw
ohe4iCP9Z+9fbOtvLnHO/DKP8RqP8wTW9SRPoaKneQYbepbzqOoCz2WH/zLP
RWzpH/MPOe/tAo71Ei/jXO/wLmr6y90BbvRHZvi//9jcK/I=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Mkug1EcxuG/VIxXYUfCVo0x1IqExK5ba+ONCNfQUtWKoS02rFoWJLVk
SSIx1dQb8CQWvzzv4ss5J1/P0triaktEpFVLRDxyuTViRW/2Jpuc6YxI6dee
5pR+7ElO6Nse55i+7FGO6NMe5pAadpIfHOQ7c85/4ja39GBvcF139gLndW0P
sF+Xdje7VLFfvftFRbvODPMdEVkWuMMiD7RrH/JIOfuYJ9qzSywrb1d4qn37
jOcq2M/OL7PN3e26sHvZpyt7lnOq2ze+vdW9XU38/98/eTE3Qw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0EsuA1AYQOFf0kpMmCE60SFDJkSLqgbxLhOaVGIBbEBYRTfCiKSbUIq0
HototfVIfI3ByTk3N/nvI316XjwbiIgj3CQiZiyOkxElLOgLXuWPoYh35PUb
v2JFN7mBnH7hZyzrJ65jST/yAxZ1jbN8zxmumD/LV3yJaX3CZaR1ljMY1yme
wIjuuWsXg/2zuI5fb6hyiwvmt3mNP3mdN9DRm7yFrt7mHfT0Lu/hS+9zEd/6
gA/xo2vmJ53Z4jaG9ag7jfXRczyPSX1r/w5T+jrx/79/g6cwpg==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Esuw1EUgPHTxF/ULpCwEaWtx8CAGBGDRid9oKJFJAy9HwtgRGIVklpI
1aP1XoJfY/Dl+25u7snJHVopz5VSEbGImyRi32G8PyKDQ13gK94djNjBpd7m
Bi50nbdwrje5hjO9wes41WtcxYmu8DGX+Yj3zD/gIq+ioXOcRVWP8SiKOs0D
WNZvdn3Fgn7kJmb1PWe4lY6Y4DZP8jO/INt7yx3kdJffkdcf/Ikp/cXfmNY/
/IsZ/WD+PD9xG0u6z05Jb389zCOo6Fv3d6jr6+T/f/8AU3sxzw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DsvQ3Ecx+GfpU3QKuJSmzdAwhuRmqw2S72DBlG3MlRSd0YGiRrZGDWV
uIzul5mEN+A5MXzyfM8Z/vmfMzg5XSi2RMSEKqmIOw9D6YhhPdhj/ORAW0Re
H3Y/+/Ru97JHb3Y3u/RqdzKnF7uDWT3bGT6xnY+ccv49x1lQwx7liC6Tc5jT
uf3rfj86tW95oyO7zhMd2DXWWGqN2OAMNznLOW3Z8yxr217gonbsJS5r115h
RXv2Kte0bx87/5BNXqtuf/FbZ8l3uWtGF3bVu3VdJeel/v/vH3+LMrI=
          "]]}, {
         Line[{2, 487, 11, 500, 501, 20, 526, 527, 29, 560, 561, 38, 594, 595,
           47, 628, 629, 56, 662, 663, 65, 694, 74}], 
         Line[{1905, 485, 1922, 3268, 2845, 3269, 1940, 3291, 2853, 3290, 
          1958, 3317, 2861, 3318, 1975, 3343, 2870, 3342, 1990, 3366, 2879, 
          3367, 2007, 3396, 2890, 3395, 2026, 3421, 2024, 2046}], 
         Line[{1907, 486, 1923, 504, 3271, 1941, 3294, 2854, 3295, 1959, 3321,
           2864, 3320, 1976, 3345, 2873, 3346, 1991, 3371, 2882, 3370, 2008, 
          3398, 2893, 3399, 2027, 3423, 2028, 2047}], 
         Line[{1909, 2843, 3264, 1925, 2848, 3274, 3275, 1943, 3302, 2856, 
          3300, 1961, 3328, 2866, 3326, 1978, 608, 3351, 1993, 3376, 2885, 
          3379, 2010, 3406, 2896, 3404, 2030, 3429, 2034, 2049}], 
         Line[{1912, 2844, 3266, 1928, 2850, 3284, 3286, 1946, 3313, 2859, 
          3311, 1964, 3334, 2868, 3339, 1980, 2877, 3360, 3362, 1996, 3391, 
          2888, 3386, 2012, 3413, 2898, 3418, 2032, 3435, 2040, 2051}], 
         Line[{1914, 1921, 3270, 1930, 1939, 3292, 3293, 1949, 3288, 2862, 
          3319, 1967, 3315, 2871, 3344, 1982, 3341, 2881, 3369, 1998, 3364, 
          2891, 3397, 2015, 3422, 2900, 3394, 2036, 3420, 2907, 2053}], 
         Line[{1916, 1926, 3273, 1933, 3299, 2855, 3298, 1952, 3325, 2865, 
          3324, 1969, 3348, 2874, 3350, 1985, 3375, 2883, 3374, 2001, 3401, 
          2894, 3403, 2018, 3425, 2901, 3427, 2038, 3440, 2909, 2056}], 
         Line[{1918, 1931, 3278, 1935, 1950, 3305, 3307, 1954, 578, 3331, 
          1971, 3356, 2876, 3355, 1987, 1999, 3381, 3383, 2003, 3411, 2897, 
          3410, 2021, 3431, 2903, 3433, 2042, 3442, 2910, 2058}], 
         Line[{1920, 3261, 2852, 1938, 1955, 3279, 3281, 1957, 3308, 2869, 
          3337, 1974, 620, 3332, 1989, 3357, 2889, 3389, 2006, 688, 3390, 
          2023, 3417, 2905, 3438, 2045, 3444, 2912, 2060}], 
         Line[{2048, 2033, 3428, 2029, 2013, 3407, 3405, 2009, 3378, 3377, 
          2884, 1992, 609, 3352, 1977, 1965, 3329, 3327, 1960, 1947, 3303, 
          3301, 1942, 511, 3276, 1924, 1906, 3263, 1908}], 
         Line[{2050, 2039, 3434, 2031, 2019, 3414, 3412, 2011, 3385, 3384, 
          2887, 1995, 3361, 2878, 3358, 1979, 3338, 2867, 3333, 1963, 3310, 
          3309, 2858, 1945, 3285, 2851, 3282, 1927, 1910, 3265, 1911}], 
         Line[{2052, 2906, 3419, 2035, 3393, 3392, 2025, 2014, 2892, 3365, 
          3363, 1997, 3368, 2880, 3340, 1981, 2872, 3316, 3314, 1966, 2863, 
          3289, 3287, 1948, 529, 3267, 1929, 2846, 3262, 1913}], 
         Line[{2055, 2908, 3439, 2037, 2902, 3426, 3424, 2017, 2895, 3402, 
          3400, 2000, 3373, 3372, 1994, 1984, 2875, 3349, 3347, 1968, 3323, 
          3322, 1962, 1951, 3297, 3296, 1944, 1932, 2847, 3272, 1915}], 
         Line[{2057, 3441, 2054, 2041, 2904, 3432, 3430, 2020, 3409, 3408, 
          2016, 2002, 3382, 2886, 3380, 1986, 3354, 3353, 1983, 1970, 579, 
          3330, 1953, 3306, 2857, 3304, 1934, 2849, 3277, 1917}], 
         Line[{2059, 2911, 3443, 2044, 3437, 3436, 2043, 2022, 2899, 3416, 
          3415, 2005, 3388, 3387, 2004, 1988, 621, 3359, 1973, 3336, 3335, 
          1972, 1956, 3280, 2860, 3312, 1937, 3283, 1936, 1919}], 
         Line[{83, 725, 92, 738, 739, 101, 764, 765, 110, 798, 799, 119, 832, 
          833, 128, 866, 867, 137, 900, 901, 146, 932, 155}], 
         Line[{2061, 723, 2078, 3452, 2915, 3453, 2096, 3475, 2923, 3474, 
          2114, 3501, 2931, 3502, 2131, 3527, 2940, 3526, 2146, 3550, 2949, 
          3551, 2163, 3580, 2960, 3579, 2182, 3605, 2180, 2202}], 
         Line[{2063, 724, 2079, 742, 3455, 2097, 3478, 2924, 3479, 2115, 3505,
           2934, 3504, 2132, 3529, 2943, 3530, 2147, 3555, 2952, 3554, 2164, 
          3582, 2963, 3583, 2183, 3607, 2184, 2203}], 
         Line[{2065, 2913, 3448, 2081, 2918, 3458, 3459, 2099, 3486, 2926, 
          3484, 2117, 3512, 2936, 3510, 2134, 846, 3535, 2149, 3560, 2955, 
          3563, 2166, 3590, 2966, 3588, 2186, 3613, 2190, 2205}], 
         Line[{2068, 2914, 3450, 2084, 2920, 3468, 3470, 2102, 3497, 2929, 
          3495, 2120, 3518, 2938, 3523, 2136, 2947, 3544, 3546, 2152, 3575, 
          2958, 3570, 2168, 3597, 2968, 3602, 2188, 3619, 2196, 2207}], 
         Line[{2070, 2077, 3454, 2086, 2095, 3476, 3477, 2105, 3472, 2932, 
          3503, 2123, 3499, 2941, 3528, 2138, 3525, 2951, 3553, 2154, 3548, 
          2961, 3581, 2171, 3606, 2970, 3578, 2192, 3604, 2977, 2209}], 
         Line[{2072, 2082, 3457, 2089, 3483, 2925, 3482, 2108, 3509, 2935, 
          3508, 2125, 3532, 2944, 3534, 2141, 3559, 2953, 3558, 2157, 3585, 
          2964, 3587, 2174, 3609, 2971, 3611, 2194, 3624, 2979, 2212}], 
         Line[{2074, 2087, 3462, 2091, 2106, 3489, 3491, 2110, 816, 3515, 
          2127, 3540, 2946, 3539, 2143, 2155, 3565, 3567, 2159, 3595, 2967, 
          3594, 2177, 3615, 2973, 3617, 2198, 3626, 2980, 2214}], 
         Line[{2076, 3445, 2922, 2094, 2111, 3463, 3465, 2113, 3492, 2939, 
          3521, 2130, 858, 3516, 2145, 3541, 2959, 3573, 2162, 926, 3574, 
          2179, 3601, 2975, 3622, 2201, 3628, 2982, 2216}], 
         Line[{2204, 2189, 3612, 2185, 2169, 3591, 3589, 2165, 3562, 3561, 
          2954, 2148, 847, 3536, 2133, 2121, 3513, 3511, 2116, 2103, 3487, 
          3485, 2098, 749, 3460, 2080, 2062, 3447, 2064}], 
         Line[{2206, 2195, 3618, 2187, 2175, 3598, 3596, 2167, 3569, 3568, 
          2957, 2151, 3545, 2948, 3542, 2135, 3522, 2937, 3517, 2119, 3494, 
          3493, 2928, 2101, 3469, 2921, 3466, 2083, 2066, 3449, 2067}], 
         Line[{2208, 2976, 3603, 2191, 3577, 3576, 2181, 2170, 2962, 3549, 
          3547, 2153, 3552, 2950, 3524, 2137, 2942, 3500, 3498, 2122, 2933, 
          3473, 3471, 2104, 767, 3451, 2085, 2916, 3446, 2069}], 
         Line[{2211, 2978, 3623, 2193, 2972, 3610, 3608, 2173, 2965, 3586, 
          3584, 2156, 3557, 3556, 2150, 2140, 2945, 3533, 3531, 2124, 3507, 
          3506, 2118, 2107, 3481, 3480, 2100, 2088, 2917, 3456, 2071}], 
         Line[{2213, 3625, 2210, 2197, 2974, 3616, 3614, 2176, 3593, 3592, 
          2172, 2158, 3566, 2956, 3564, 2142, 3538, 3537, 2139, 2126, 817, 
          3514, 2109, 3490, 2927, 3488, 2090, 2919, 3461, 2073}], 
         Line[{2215, 2981, 3627, 2200, 3621, 3620, 2199, 2178, 2969, 3600, 
          3599, 2161, 3572, 3571, 2160, 2144, 859, 3543, 2129, 3520, 3519, 
          2128, 2112, 3464, 2930, 3496, 2093, 3467, 2092, 2075}], 
         Line[{164, 963, 173, 976, 977, 182, 1002, 1003, 191, 1036, 1037, 200,
           1070, 1071, 209, 1104, 1105, 218, 1138, 1139, 227, 1170, 236}], 
         Line[{2217, 961, 2234, 3636, 2985, 3637, 2252, 3659, 2993, 3658, 
          2270, 3685, 3001, 3686, 2287, 3711, 3010, 3710, 2302, 3734, 3019, 
          3735, 2319, 3764, 3030, 3763, 2338, 3789, 2336, 2358}], 
         Line[{2219, 962, 2235, 980, 3639, 2253, 3662, 2994, 3663, 2271, 3689,
           3004, 3688, 2288, 3713, 3013, 3714, 2303, 3739, 3022, 3738, 2320, 
          3766, 3033, 3767, 2339, 3791, 2340, 2359}], 
         Line[{2221, 2983, 3632, 2237, 2988, 3642, 3643, 2255, 3670, 2996, 
          3668, 2273, 3696, 3006, 3694, 2290, 1084, 3719, 2305, 3744, 3025, 
          3747, 2322, 3774, 3036, 3772, 2342, 3797, 2346, 2361}], 
         Line[{2224, 2984, 3634, 2240, 2990, 3652, 3654, 2258, 3681, 2999, 
          3679, 2276, 3702, 3008, 3707, 2292, 3017, 3728, 3730, 2308, 3759, 
          3028, 3754, 2324, 3781, 3038, 3786, 2344, 3803, 2352, 2363}], 
         Line[{2226, 2233, 3638, 2242, 2251, 3660, 3661, 2261, 3656, 3002, 
          3687, 2279, 3683, 3011, 3712, 2294, 3709, 3021, 3737, 2310, 3732, 
          3031, 3765, 2327, 3790, 3040, 3762, 2348, 3788, 3047, 2365}], 
         Line[{2228, 2238, 3641, 2245, 3667, 2995, 3666, 2264, 3693, 3005, 
          3692, 2281, 3716, 3014, 3718, 2297, 3743, 3023, 3742, 2313, 3769, 
          3034, 3771, 2330, 3793, 3041, 3795, 2350, 3808, 3049, 2368}], 
         Line[{2230, 2243, 3646, 2247, 2262, 3673, 3675, 2266, 1054, 3699, 
          2283, 3724, 3016, 3723, 2299, 2311, 3749, 3751, 2315, 3779, 3037, 
          3778, 2333, 3799, 3043, 3801, 2354, 3810, 3050, 2370}], 
         Line[{2232, 3629, 2992, 2250, 2267, 3647, 3649, 2269, 3676, 3009, 
          3705, 2286, 1096, 3700, 2301, 3725, 3029, 3757, 2318, 1164, 3758, 
          2335, 3785, 3045, 3806, 2357, 3812, 3052, 2372}], 
         Line[{2360, 2345, 3796, 2341, 2325, 3775, 3773, 2321, 3746, 3745, 
          3024, 2304, 1085, 3720, 2289, 2277, 3697, 3695, 2272, 2259, 3671, 
          3669, 2254, 987, 3644, 2236, 2218, 3631, 2220}], 
         Line[{2362, 2351, 3802, 2343, 2331, 3782, 3780, 2323, 3753, 3752, 
          3027, 2307, 3729, 3018, 3726, 2291, 3706, 3007, 3701, 2275, 3678, 
          3677, 2998, 2257, 3653, 2991, 3650, 2239, 2222, 3633, 2223}], 
         Line[{2364, 3046, 3787, 2347, 3761, 3760, 2337, 2326, 3032, 3733, 
          3731, 2309, 3736, 3020, 3708, 2293, 3012, 3684, 3682, 2278, 3003, 
          3657, 3655, 2260, 1005, 3635, 2241, 2986, 3630, 2225}], 
         Line[{2367, 3048, 3807, 2349, 3042, 3794, 3792, 2329, 3035, 3770, 
          3768, 2312, 3741, 3740, 2306, 2296, 3015, 3717, 3715, 2280, 3691, 
          3690, 2274, 2263, 3665, 3664, 2256, 2244, 2987, 3640, 2227}], 
         Line[{2369, 3809, 2366, 2353, 3044, 3800, 3798, 2332, 3777, 3776, 
          2328, 2314, 3750, 3026, 3748, 2298, 3722, 3721, 2295, 2282, 1055, 
          3698, 2265, 3674, 2997, 3672, 2246, 2989, 3645, 2229}], 
         Line[{2371, 3051, 3811, 2356, 3805, 3804, 2355, 2334, 3039, 3784, 
          3783, 2317, 3756, 3755, 2316, 2300, 1097, 3727, 2285, 3704, 3703, 
          2284, 2268, 3648, 3000, 3680, 2249, 3651, 2248, 2231}], 
         Line[{245, 1201, 254, 1214, 1215, 263, 1240, 1241, 272, 1274, 1275, 
          281, 1308, 1309, 290, 1342, 1343, 299, 1376, 1377, 308, 1408, 317}], 
         Line[{2373, 1199, 2390, 3820, 3055, 3821, 2408, 3843, 3063, 3842, 
          2426, 3869, 3071, 3870, 2443, 3895, 3080, 3894, 2458, 3918, 3089, 
          3919, 2475, 3948, 3100, 3947, 2494, 3973, 2492, 2514}], 
         Line[{2375, 1200, 2391, 1218, 3823, 2409, 3846, 3064, 3847, 2427, 
          3873, 3074, 3872, 2444, 3897, 3083, 3898, 2459, 3923, 3092, 3922, 
          2476, 3950, 3103, 3951, 2495, 3975, 2496, 2515}], 
         Line[{2377, 3053, 3816, 2393, 3058, 3826, 3827, 2411, 3854, 3066, 
          3852, 2429, 3880, 3076, 3878, 2446, 1322, 3903, 2461, 3928, 3095, 
          3931, 2478, 3958, 3106, 3956, 2498, 3981, 2502, 2517}], 
         Line[{2380, 3054, 3818, 2396, 3060, 3836, 3838, 2414, 3865, 3069, 
          3863, 2432, 3886, 3078, 3891, 2448, 3087, 3912, 3914, 2464, 3943, 
          3098, 3938, 2480, 3965, 3108, 3970, 2500, 3987, 2508, 2519}], 
         Line[{2382, 2389, 3822, 2398, 2407, 3844, 3845, 2417, 3840, 3072, 
          3871, 2435, 3867, 3081, 3896, 2450, 3893, 3091, 3921, 2466, 3916, 
          3101, 3949, 2483, 3974, 3110, 3946, 2504, 3972, 3117, 2521}], 
         Line[{2384, 2394, 3825, 2401, 3851, 3065, 3850, 2420, 3877, 3075, 
          3876, 2437, 3900, 3084, 3902, 2453, 3927, 3093, 3926, 2469, 3953, 
          3104, 3955, 2486, 3977, 3111, 3979, 2506, 3992, 3119, 2524}], 
         Line[{2386, 2399, 3830, 2403, 2418, 3857, 3859, 2422, 1292, 3883, 
          2439, 3908, 3086, 3907, 2455, 2467, 3933, 3935, 2471, 3963, 3107, 
          3962, 2489, 3983, 3113, 3985, 2510, 3994, 3120, 2526}], 
         Line[{2388, 3813, 3062, 2406, 2423, 3831, 3833, 2425, 3860, 3079, 
          3889, 2442, 1334, 3884, 2457, 3909, 3099, 3941, 2474, 1402, 3942, 
          2491, 3969, 3115, 3990, 2513, 3996, 3122, 2528}], 
         Line[{2516, 2501, 3980, 2497, 2481, 3959, 3957, 2477, 3930, 3929, 
          3094, 2460, 1323, 3904, 2445, 2433, 3881, 3879, 2428, 2415, 3855, 
          3853, 2410, 1225, 3828, 2392, 2374, 3815, 2376}], 
         Line[{2518, 2507, 3986, 2499, 2487, 3966, 3964, 2479, 3937, 3936, 
          3097, 2463, 3913, 3088, 3910, 2447, 3890, 3077, 3885, 2431, 3862, 
          3861, 3068, 2413, 3837, 3061, 3834, 2395, 2378, 3817, 2379}], 
         Line[{2520, 3116, 3971, 2503, 3945, 3944, 2493, 2482, 3102, 3917, 
          3915, 2465, 3920, 3090, 3892, 2449, 3082, 3868, 3866, 2434, 3073, 
          3841, 3839, 2416, 1243, 3819, 2397, 3056, 3814, 2381}], 
         Line[{2523, 3118, 3991, 2505, 3112, 3978, 3976, 2485, 3105, 3954, 
          3952, 2468, 3925, 3924, 2462, 2452, 3085, 3901, 3899, 2436, 3875, 
          3874, 2430, 2419, 3849, 3848, 2412, 2400, 3057, 3824, 2383}], 
         Line[{2525, 3993, 2522, 2509, 3114, 3984, 3982, 2488, 3961, 3960, 
          2484, 2470, 3934, 3096, 3932, 2454, 3906, 3905, 2451, 2438, 1293, 
          3882, 2421, 3858, 3067, 3856, 2402, 3059, 3829, 2385}], 
         Line[{2527, 3121, 3995, 2512, 3989, 3988, 2511, 2490, 3109, 3968, 
          3967, 2473, 3940, 3939, 2472, 2456, 1335, 3911, 2441, 3888, 3887, 
          2440, 2424, 3832, 3070, 3864, 2405, 3835, 2404, 2387}], 
         Line[{326, 1439, 335, 1452, 1453, 344, 1478, 1479, 353, 1512, 1513, 
          362, 1546, 1547, 370, 1576, 1577, 379, 1610, 1611, 388, 1642, 397}], 
         Line[{2529, 1437, 2546, 4004, 3125, 4005, 2564, 4027, 3133, 4026, 
          2582, 4051, 3141, 4052, 2599, 4079, 3152, 4078, 2615, 4077, 3158, 
          4100, 2632, 4132, 3169, 4131, 2651, 4157, 2649, 2671}], 
         Line[{2531, 1438, 2547, 1456, 4007, 2565, 4030, 3134, 4031, 2583, 
          4055, 3144, 4054, 2600, 4083, 3155, 4084, 2616, 4107, 3161, 4106, 
          2633, 4134, 3172, 4135, 2652, 4159, 2653, 2672}], 
         Line[{2533, 3123, 4000, 2549, 3128, 4010, 4011, 2567, 4038, 3136, 
          4036, 2585, 4062, 3146, 4060, 2602, 1560, 4089, 2618, 4112, 3164, 
          4115, 2635, 4142, 3175, 4140, 2655, 4165, 2659, 2674}], 
         Line[{2536, 3124, 4002, 2552, 3130, 4020, 4022, 2570, 4049, 3139, 
          4047, 2588, 4068, 3148, 4074, 2605, 4101, 3157, 4096, 2621, 4127, 
          3167, 4122, 2637, 4149, 3177, 4154, 2657, 4171, 2665, 2676}], 
         Line[{2538, 2545, 4006, 2554, 2563, 4028, 4029, 2573, 4024, 3142, 
          4053, 2591, 4050, 3150, 4076, 2607, 4103, 3160, 4105, 2623, 4098, 
          3170, 4133, 2640, 4158, 3179, 4130, 2661, 4156, 3186, 2678}], 
         Line[{2540, 2550, 4009, 2557, 4035, 3135, 4034, 2576, 4059, 3145, 
          4058, 2593, 4081, 3153, 4085, 2609, 4111, 3162, 4110, 2626, 4137, 
          3173, 4139, 2643, 4161, 3180, 4163, 2663, 4176, 3188, 2681}], 
         Line[{2542, 2555, 4014, 2559, 2574, 4041, 4043, 2578, 1530, 4065, 
          2595, 4091, 3156, 4088, 2611, 2624, 4117, 4119, 2628, 4147, 3176, 
          4146, 2646, 4167, 3182, 4169, 2667, 4178, 3189, 2683}], 
         Line[{2544, 3997, 3132, 2562, 2579, 4015, 4017, 2581, 4044, 3151, 
          4071, 2598, 1566, 4066, 2614, 4093, 3168, 4125, 2631, 1636, 4126, 
          2648, 4153, 3184, 4174, 2670, 4180, 3191, 2685}], 
         Line[{2673, 2658, 4164, 2654, 2638, 4143, 4141, 2634, 4114, 4113, 
          3163, 2617, 1561, 4090, 2601, 2589, 4063, 4061, 2584, 2571, 4039, 
          4037, 2566, 1463, 4012, 2548, 2530, 3999, 2532}], 
         Line[{2675, 2664, 4170, 2656, 2644, 4150, 4148, 2636, 4121, 4120, 
          3166, 2620, 4095, 4094, 2612, 2604, 4073, 3147, 4067, 2587, 4046, 
          4045, 3138, 2569, 4021, 3131, 4018, 2551, 2534, 4001, 2535}], 
         Line[{2677, 3185, 4155, 2660, 4129, 4128, 2650, 2639, 3171, 4099, 
          4097, 2622, 4104, 3159, 4102, 2606, 4075, 4072, 3149, 2590, 3143, 
          4025, 4023, 2572, 1481, 4003, 2553, 3126, 3998, 2537}], 
         Line[{2680, 3187, 4175, 2662, 3181, 4162, 4160, 2642, 3174, 4138, 
          4136, 2625, 4109, 4108, 2619, 2608, 3154, 4082, 4080, 2592, 4057, 
          4056, 2586, 2575, 4033, 4032, 2568, 2556, 3127, 4008, 2539}], 
         Line[{2682, 4177, 2679, 2666, 3183, 4168, 4166, 2645, 4145, 4144, 
          2641, 2627, 4118, 3165, 4116, 2610, 4087, 4086, 2603, 2594, 1531, 
          4064, 2577, 4042, 3137, 4040, 2558, 3129, 4013, 2541}], 
         Line[{2684, 3190, 4179, 2669, 4173, 4172, 2668, 2647, 3178, 4152, 
          4151, 2630, 4124, 4123, 2629, 2613, 1567, 4092, 2597, 4070, 4069, 
          2596, 2580, 4016, 3140, 4048, 2561, 4019, 2560, 2543}], 
         Line[{406, 1673, 415, 1686, 1687, 424, 1712, 1713, 433, 1746, 1747, 
          442, 1780, 1781, 450, 1810, 1811, 459, 1844, 1845, 468, 1876, 477}], 
         Line[{2686, 1671, 2703, 4188, 3194, 4189, 2721, 4211, 3202, 4210, 
          2739, 4235, 3210, 4236, 2756, 4263, 3221, 4262, 2772, 4261, 3227, 
          4284, 2789, 4316, 3238, 4315, 2808, 4341, 2806, 2828}], 
         Line[{2688, 1672, 2704, 1690, 4191, 2722, 4214, 3203, 4215, 2740, 
          4239, 3213, 4238, 2757, 4267, 3224, 4268, 2773, 4291, 3230, 4290, 
          2790, 4318, 3241, 4319, 2809, 4343, 2810, 2829}], 
         Line[{2690, 3192, 4184, 2706, 3197, 4194, 4195, 2724, 4222, 3205, 
          4220, 2742, 4246, 3215, 4244, 2759, 1794, 4273, 2775, 4296, 3233, 
          4299, 2792, 4326, 3244, 4324, 2812, 4349, 2816, 2831}], 
         Line[{2693, 3193, 4186, 2709, 3199, 4204, 4206, 2727, 4233, 3208, 
          4231, 2745, 4252, 3217, 4258, 2762, 4285, 3226, 4280, 2778, 4311, 
          3236, 4306, 2794, 4333, 3246, 4338, 2814, 4355, 2822, 2833}], 
         Line[{2695, 2702, 4190, 2711, 2720, 4212, 4213, 2730, 4208, 3211, 
          4237, 2748, 4234, 3219, 4260, 2764, 4287, 3229, 4289, 2780, 4282, 
          3239, 4317, 2797, 4342, 3248, 4314, 2818, 4340, 3255, 2835}], 
         Line[{2697, 2707, 4193, 2714, 4219, 3204, 4218, 2733, 4243, 3214, 
          4242, 2750, 4265, 3222, 4269, 2766, 4295, 3231, 4294, 2783, 4321, 
          3242, 4323, 2800, 4345, 3249, 4347, 2820, 4360, 3257, 2838}], 
         Line[{2699, 2712, 4198, 2716, 2731, 4225, 4227, 2735, 1764, 4249, 
          2752, 4275, 3225, 4272, 2768, 2781, 4301, 4303, 2785, 4331, 3245, 
          4330, 2803, 4351, 3251, 4353, 2824, 4362, 3258, 2840}], 
         Line[{2701, 4181, 3201, 2719, 2736, 4199, 4201, 2738, 4228, 3220, 
          4255, 2755, 1800, 4250, 2771, 4277, 3237, 4309, 2788, 1870, 4310, 
          2805, 4337, 3253, 4358, 2827, 4364, 3260, 2842}], 
         Line[{2830, 2815, 4348, 2811, 2795, 4327, 4325, 2791, 4298, 4297, 
          3232, 2774, 1795, 4274, 2758, 2746, 4247, 4245, 2741, 2728, 4223, 
          4221, 2723, 1697, 4196, 2705, 2687, 4183, 2689}], 
         Line[{2832, 2821, 4354, 2813, 2801, 4334, 4332, 2793, 4305, 4304, 
          3235, 2777, 4279, 4278, 2769, 2761, 4257, 3216, 4251, 2744, 4230, 
          4229, 3207, 2726, 4205, 3200, 4202, 2708, 2691, 4185, 2692}], 
         Line[{2834, 3254, 4339, 2817, 4313, 4312, 2807, 2796, 3240, 4283, 
          4281, 2779, 4288, 3228, 4286, 2763, 4259, 4256, 3218, 2747, 3212, 
          4209, 4207, 2729, 1715, 4187, 2710, 3195, 4182, 2694}], 
         Line[{2837, 3256, 4359, 2819, 3250, 4346, 4344, 2799, 3243, 4322, 
          4320, 2782, 4293, 4292, 2776, 2765, 3223, 4266, 4264, 2749, 4241, 
          4240, 2743, 2732, 4217, 4216, 2725, 2713, 3196, 4192, 2696}], 
         Line[{2839, 4361, 2836, 2823, 3252, 4352, 4350, 2802, 4329, 4328, 
          2798, 2784, 4302, 3234, 4300, 2767, 4271, 4270, 2760, 2751, 1765, 
          4248, 2734, 4226, 3206, 4224, 2715, 3198, 4197, 2698}], 
         Line[{2841, 3259, 4363, 2826, 4357, 4356, 2825, 2804, 3247, 4336, 
          4335, 2787, 4308, 4307, 2786, 2770, 1801, 4276, 2754, 4254, 4253, 
          2753, 2737, 4200, 3209, 4232, 2718, 4203, 2717, 2700}]}, {
         Line[{489, 3390, 689, 3416, 683, 681, 3410, 3409, 675, 3403, 673, 
          3402, 667, 3397, 665, 3365, 653, 651, 3386, 3385, 645, 643, 3379, 
          3378, 637, 3370, 635, 629, 625, 3367, 661}], 
         Line[{496, 655, 3389, 3388, 649, 3383, 3382, 647, 641, 639, 3374, 
          3373, 633, 3369, 3368, 631, 619, 3362, 3361, 617, 611, 3351, 609, 
          603, 601, 3346, 595, 3342, 591, 627}], 
         Line[{499, 485, 487, 486, 490, 3263, 491, 3264, 492, 3265, 493, 3266,
           494, 3262, 502, 3270, 503, 3272, 508, 3273, 509, 3277, 514, 3278, 
          515, 3283, 520, 3261, 521}], 
         Line[{18, 1938, 1937, 17, 1935, 1934, 16, 1933, 1932, 15, 1930, 1929,
           14, 1928, 1927, 13, 1925, 1924, 12, 1923, 11, 1922, 10}], 
         Line[{524, 497, 3268, 500, 504, 506, 3276, 510, 3274, 512, 3282, 516,
           3284, 518, 3267, 528, 3292, 530, 3296, 536, 3299, 538, 3304, 544, 
          3305, 546, 3312, 552, 3279, 554}], 
         Line[{555, 3281, 3280, 553, 547, 3307, 3306, 545, 539, 537, 3298, 
          3297, 531, 3293, 529, 519, 3286, 3285, 517, 513, 3275, 511, 507, 
          3271, 505, 501, 498, 3269, 525}], 
         Line[{558, 3291, 522, 526, 532, 3294, 534, 3301, 3302, 540, 542, 
          3309, 548, 3313, 550, 3287, 3288, 562, 564, 3322, 570, 3325, 572, 
          3330, 578, 580, 3335, 586, 3308, 588}], 
         Line[{589, 587, 3337, 3336, 581, 3331, 579, 573, 571, 3324, 3323, 
          565, 3319, 563, 3289, 551, 549, 3311, 3310, 543, 3300, 541, 3303, 
          535, 533, 3295, 527, 3290, 523, 559}], 
         Line[{592, 556, 3317, 560, 3321, 566, 568, 3327, 3328, 574, 576, 
          3333, 3334, 582, 584, 3314, 3315, 596, 598, 3347, 3348, 604, 606, 
          3353, 612, 3356, 614, 3359, 620, 622}], 
         Line[{623, 3332, 621, 615, 613, 3355, 3354, 607, 3350, 605, 3349, 
          599, 3344, 597, 3316, 585, 3339, 3338, 583, 577, 3326, 575, 3329, 
          569, 3320, 567, 561, 557, 3318, 593}], 
         Line[{626, 3343, 590, 594, 600, 3345, 602, 3352, 608, 610, 3358, 616,
           3360, 618, 3340, 3341, 630, 632, 3372, 638, 3375, 640, 3380, 646, 
          3381, 648, 3387, 654, 3357, 495}], 
         Line[{657, 714, 3438, 3437, 710, 3433, 708, 3432, 704, 3427, 702, 
          3426, 698, 696, 3394, 3393, 687, 3418, 685, 3414, 679, 3404, 677, 
          3407, 671, 669, 3399, 663, 3395, 659, 693}], 
         Line[{660, 624, 3366, 628, 3371, 634, 636, 3377, 642, 3376, 644, 
          3384, 650, 3391, 652, 3363, 3364, 664, 666, 3400, 3401, 672, 674, 
          3408, 680, 3411, 682, 3415, 688, 488}], 
         Line[{690, 722, 3444, 3443, 721, 3442, 720, 3441, 719, 718, 3440, 
          3439, 717, 716, 3420, 3419, 712, 711, 3435, 3434, 706, 705, 3429, 
          3428, 700, 699, 3423, 694, 3421, 691, 715}], 
         Line[{692, 3396, 658, 662, 668, 3398, 670, 3405, 3406, 676, 678, 
          3412, 3413, 684, 686, 3392, 695, 3422, 697, 3424, 3425, 701, 703, 
          3430, 3431, 707, 709, 3436, 713, 3417, 656}], 
         Line[{727, 3574, 927, 3600, 921, 919, 3594, 3593, 913, 3587, 911, 
          3586, 905, 3581, 903, 3549, 891, 889, 3570, 3569, 883, 881, 3563, 
          3562, 875, 3554, 873, 867, 863, 3551, 899}], 
         Line[{734, 893, 3573, 3572, 887, 3567, 3566, 885, 879, 877, 3558, 
          3557, 871, 3553, 3552, 869, 857, 3546, 3545, 855, 849, 3535, 847, 
          841, 839, 3530, 833, 3526, 829, 865}], 
         Line[{737, 723, 725, 724, 728, 3447, 729, 3448, 730, 3449, 731, 3450,
           732, 3446, 740, 3454, 741, 3456, 746, 3457, 747, 3461, 752, 3462, 
          753, 3467, 758, 3445, 759}], 
         Line[{99, 2094, 2093, 98, 2091, 2090, 97, 2089, 2088, 96, 2086, 2085,
           95, 2084, 2083, 94, 2081, 2080, 93, 2079, 92, 2078, 91}], 
         Line[{762, 735, 3452, 738, 742, 744, 3460, 748, 3458, 750, 3466, 754,
           3468, 756, 3451, 766, 3476, 768, 3480, 774, 3483, 776, 3488, 782, 
          3489, 784, 3496, 790, 3463, 792}], 
         Line[{793, 3465, 3464, 791, 785, 3491, 3490, 783, 777, 775, 3482, 
          3481, 769, 3477, 767, 757, 3470, 3469, 755, 751, 3459, 749, 745, 
          3455, 743, 739, 736, 3453, 763}], 
         Line[{796, 3475, 760, 764, 770, 3478, 772, 3485, 3486, 778, 780, 
          3493, 786, 3497, 788, 3471, 3472, 800, 802, 3506, 808, 3509, 810, 
          3514, 816, 818, 3519, 824, 3492, 826}], 
         Line[{827, 825, 3521, 3520, 819, 3515, 817, 811, 809, 3508, 3507, 
          803, 3503, 801, 3473, 789, 787, 3495, 3494, 781, 3484, 779, 3487, 
          773, 771, 3479, 765, 3474, 761, 797}], 
         Line[{830, 794, 3501, 798, 3505, 804, 806, 3511, 3512, 812, 814, 
          3517, 3518, 820, 822, 3498, 3499, 834, 836, 3531, 3532, 842, 844, 
          3537, 850, 3540, 852, 3543, 858, 860}], 
         Line[{861, 3516, 859, 853, 851, 3539, 3538, 845, 3534, 843, 3533, 
          837, 3528, 835, 3500, 823, 3523, 3522, 821, 815, 3510, 813, 3513, 
          807, 3504, 805, 799, 795, 3502, 831}], 
         Line[{864, 3527, 828, 832, 838, 3529, 840, 3536, 846, 848, 3542, 854,
           3544, 856, 3524, 3525, 868, 870, 3556, 876, 3559, 878, 3564, 884, 
          3565, 886, 3571, 892, 3541, 733}], 
         Line[{895, 952, 3622, 3621, 948, 3617, 946, 3616, 942, 3611, 940, 
          3610, 936, 934, 3578, 3577, 925, 3602, 923, 3598, 917, 3588, 915, 
          3591, 909, 907, 3583, 901, 3579, 897, 931}], 
         Line[{898, 862, 3550, 866, 3555, 872, 874, 3561, 880, 3560, 882, 
          3568, 888, 3575, 890, 3547, 3548, 902, 904, 3584, 3585, 910, 912, 
          3592, 918, 3595, 920, 3599, 926, 726}], 
         Line[{928, 960, 3628, 3627, 959, 3626, 958, 3625, 957, 956, 3624, 
          3623, 955, 954, 3604, 3603, 950, 949, 3619, 3618, 944, 943, 3613, 
          3612, 938, 937, 3607, 932, 3605, 929, 953}], 
         Line[{930, 3580, 896, 900, 906, 3582, 908, 3589, 3590, 914, 916, 
          3596, 3597, 922, 924, 3576, 933, 3606, 935, 3608, 3609, 939, 941, 
          3614, 3615, 945, 947, 3620, 951, 3601, 894}], 
         Line[{965, 3758, 1165, 3784, 1159, 1157, 3778, 3777, 1151, 3771, 
          1149, 3770, 1143, 3765, 1141, 3733, 1129, 1127, 3754, 3753, 1121, 
          1119, 3747, 3746, 1113, 3738, 1111, 1105, 1101, 3735, 1137}], 
         Line[{972, 1131, 3757, 3756, 1125, 3751, 3750, 1123, 1117, 1115, 
          3742, 3741, 1109, 3737, 3736, 1107, 1095, 3730, 3729, 1093, 1087, 
          3719, 1085, 1079, 1077, 3714, 1071, 3710, 1067, 1103}], 
         Line[{975, 961, 963, 962, 966, 3631, 967, 3632, 968, 3633, 969, 3634,
           970, 3630, 978, 3638, 979, 3640, 984, 3641, 985, 3645, 990, 3646, 
          991, 3651, 996, 3629, 997}], 
         Line[{180, 2250, 2249, 179, 2247, 2246, 178, 2245, 2244, 177, 2242, 
          2241, 176, 2240, 2239, 175, 2237, 2236, 174, 2235, 173, 2234, 172}], 
         Line[{1000, 973, 3636, 976, 980, 982, 3644, 986, 3642, 988, 3650, 
          992, 3652, 994, 3635, 1004, 3660, 1006, 3664, 1012, 3667, 1014, 
          3672, 1020, 3673, 1022, 3680, 1028, 3647, 1030}], 
         Line[{1031, 3649, 3648, 1029, 1023, 3675, 3674, 1021, 1015, 1013, 
          3666, 3665, 1007, 3661, 1005, 995, 3654, 3653, 993, 989, 3643, 987, 
          983, 3639, 981, 977, 974, 3637, 1001}], 
         Line[{1034, 3659, 998, 1002, 1008, 3662, 1010, 3669, 3670, 1016, 
          1018, 3677, 1024, 3681, 1026, 3655, 3656, 1038, 1040, 3690, 1046, 
          3693, 1048, 3698, 1054, 1056, 3703, 1062, 3676, 1064}], 
         Line[{1065, 1063, 3705, 3704, 1057, 3699, 1055, 1049, 1047, 3692, 
          3691, 1041, 3687, 1039, 3657, 1027, 1025, 3679, 3678, 1019, 3668, 
          1017, 3671, 1011, 1009, 3663, 1003, 3658, 999, 1035}], 
         Line[{1068, 1032, 3685, 1036, 3689, 1042, 1044, 3695, 3696, 1050, 
          1052, 3701, 3702, 1058, 1060, 3682, 3683, 1072, 1074, 3715, 3716, 
          1080, 1082, 3721, 1088, 3724, 1090, 3727, 1096, 1098}], 
         Line[{1099, 3700, 1097, 1091, 1089, 3723, 3722, 1083, 3718, 1081, 
          3717, 1075, 3712, 1073, 3684, 1061, 3707, 3706, 1059, 1053, 3694, 
          1051, 3697, 1045, 3688, 1043, 1037, 1033, 3686, 1069}], 
         Line[{1102, 3711, 1066, 1070, 1076, 3713, 1078, 3720, 1084, 1086, 
          3726, 1092, 3728, 1094, 3708, 3709, 1106, 1108, 3740, 1114, 3743, 
          1116, 3748, 1122, 3749, 1124, 3755, 1130, 3725, 971}], 
         Line[{1133, 1190, 3806, 3805, 1186, 3801, 1184, 3800, 1180, 3795, 
          1178, 3794, 1174, 1172, 3762, 3761, 1163, 3786, 1161, 3782, 1155, 
          3772, 1153, 3775, 1147, 1145, 3767, 1139, 3763, 1135, 1169}], 
         Line[{1136, 1100, 3734, 1104, 3739, 1110, 1112, 3745, 1118, 3744, 
          1120, 3752, 1126, 3759, 1128, 3731, 3732, 1140, 1142, 3768, 3769, 
          1148, 1150, 3776, 1156, 3779, 1158, 3783, 1164, 964}], 
         Line[{1166, 1198, 3812, 3811, 1197, 3810, 1196, 3809, 1195, 1194, 
          3808, 3807, 1193, 1192, 3788, 3787, 1188, 1187, 3803, 3802, 1182, 
          1181, 3797, 3796, 1176, 1175, 3791, 1170, 3789, 1167, 1191}], 
         Line[{1168, 3764, 1134, 1138, 1144, 3766, 1146, 3773, 3774, 1152, 
          1154, 3780, 3781, 1160, 1162, 3760, 1171, 3790, 1173, 3792, 3793, 
          1177, 1179, 3798, 3799, 1183, 1185, 3804, 1189, 3785, 1132}], 
         Line[{1203, 3942, 1403, 3968, 1397, 1395, 3962, 3961, 1389, 3955, 
          1387, 3954, 1381, 3949, 1379, 3917, 1367, 1365, 3938, 3937, 1359, 
          1357, 3931, 3930, 1351, 3922, 1349, 1343, 1339, 3919, 1375}], 
         Line[{1210, 1369, 3941, 3940, 1363, 3935, 3934, 1361, 1355, 1353, 
          3926, 3925, 1347, 3921, 3920, 1345, 1333, 3914, 3913, 1331, 1325, 
          3903, 1323, 1317, 1315, 3898, 1309, 3894, 1305, 1341}], 
         Line[{1213, 1199, 1201, 1200, 1204, 3815, 1205, 3816, 1206, 3817, 
          1207, 3818, 1208, 3814, 1216, 3822, 1217, 3824, 1222, 3825, 1223, 
          3829, 1228, 3830, 1229, 3835, 1234, 3813, 1235}], 
         Line[{261, 2406, 2405, 260, 2403, 2402, 259, 2401, 2400, 258, 2398, 
          2397, 257, 2396, 2395, 256, 2393, 2392, 255, 2391, 254, 2390, 253}], 
         Line[{1238, 1211, 3820, 1214, 1218, 1220, 3828, 1224, 3826, 1226, 
          3834, 1230, 3836, 1232, 3819, 1242, 3844, 1244, 3848, 1250, 3851, 
          1252, 3856, 1258, 3857, 1260, 3864, 1266, 3831, 1268}], 
         Line[{1269, 3833, 3832, 1267, 1261, 3859, 3858, 1259, 1253, 1251, 
          3850, 3849, 1245, 3845, 1243, 1233, 3838, 3837, 1231, 1227, 3827, 
          1225, 1221, 3823, 1219, 1215, 1212, 3821, 1239}], 
         Line[{1272, 3843, 1236, 1240, 1246, 3846, 1248, 3853, 3854, 1254, 
          1256, 3861, 1262, 3865, 1264, 3839, 3840, 1276, 1278, 3874, 1284, 
          3877, 1286, 3882, 1292, 1294, 3887, 1300, 3860, 1302}], 
         Line[{1303, 1301, 3889, 3888, 1295, 3883, 1293, 1287, 1285, 3876, 
          3875, 1279, 3871, 1277, 3841, 1265, 1263, 3863, 3862, 1257, 3852, 
          1255, 3855, 1249, 1247, 3847, 1241, 3842, 1237, 1273}], 
         Line[{1306, 1270, 3869, 1274, 3873, 1280, 1282, 3879, 3880, 1288, 
          1290, 3885, 3886, 1296, 1298, 3866, 3867, 1310, 1312, 3899, 3900, 
          1318, 1320, 3905, 1326, 3908, 1328, 3911, 1334, 1336}], 
         Line[{1337, 3884, 1335, 1329, 1327, 3907, 3906, 1321, 3902, 1319, 
          3901, 1313, 3896, 1311, 3868, 1299, 3891, 3890, 1297, 1291, 3878, 
          1289, 3881, 1283, 3872, 1281, 1275, 1271, 3870, 1307}], 
         Line[{1340, 3895, 1304, 1308, 1314, 3897, 1316, 3904, 1322, 1324, 
          3910, 1330, 3912, 1332, 3892, 3893, 1344, 1346, 3924, 1352, 3927, 
          1354, 3932, 1360, 3933, 1362, 3939, 1368, 3909, 1209}], 
         Line[{1371, 1428, 3990, 3989, 1424, 3985, 1422, 3984, 1418, 3979, 
          1416, 3978, 1412, 1410, 3946, 3945, 1401, 3970, 1399, 3966, 1393, 
          3956, 1391, 3959, 1385, 1383, 3951, 1377, 3947, 1373, 1407}], 
         Line[{1374, 1338, 3918, 1342, 3923, 1348, 1350, 3929, 1356, 3928, 
          1358, 3936, 1364, 3943, 1366, 3915, 3916, 1378, 1380, 3952, 3953, 
          1386, 1388, 3960, 1394, 3963, 1396, 3967, 1402, 1202}], 
         Line[{1404, 1436, 3996, 3995, 1435, 3994, 1434, 3993, 1433, 1432, 
          3992, 3991, 1431, 1430, 3972, 3971, 1426, 1425, 3987, 3986, 1420, 
          1419, 3981, 3980, 1414, 1413, 3975, 1408, 3973, 1405, 1429}], 
         Line[{1406, 3948, 1372, 1376, 1382, 3950, 1384, 3957, 3958, 1390, 
          1392, 3964, 3965, 1398, 1400, 3944, 1409, 3974, 1411, 3976, 3977, 
          1415, 1417, 3982, 3983, 1421, 1423, 3988, 1427, 3969, 1370}], 
         Line[{1441, 4126, 1637, 4152, 1631, 1629, 4146, 4145, 1623, 4139, 
          1621, 4138, 1615, 4133, 1613, 4099, 1601, 1599, 4122, 4121, 1593, 
          1591, 4115, 4114, 1585, 4106, 1583, 1577, 1573, 4100, 1609}], 
         Line[{1448, 1603, 4125, 4124, 1597, 4119, 4118, 1595, 1589, 1587, 
          4110, 4109, 1581, 4105, 4104, 1579, 1569, 4096, 4095, 1563, 4089, 
          1561, 1555, 1553, 4084, 1547, 4078, 1543, 1575}], 
         Line[{1451, 1437, 1439, 1438, 1442, 3999, 1443, 4000, 1444, 4001, 
          1445, 4002, 1446, 3998, 1454, 4006, 1455, 4008, 1460, 4009, 1461, 
          4013, 1466, 4014, 1467, 4019, 1472, 3997, 1473}], 
         Line[{342, 2562, 2561, 341, 2559, 2558, 340, 2557, 2556, 339, 2554, 
          2553, 338, 2552, 2551, 337, 2549, 2548, 336, 2547, 335, 2546, 334}], 
         Line[{1476, 1449, 4004, 1452, 1456, 1458, 4012, 1462, 4010, 1464, 
          4018, 1468, 4020, 1470, 4003, 1480, 4028, 1482, 4032, 1488, 4035, 
          1490, 4040, 1496, 4041, 1498, 4048, 1504, 4015, 1506}], 
         Line[{1507, 4017, 4016, 1505, 1499, 4043, 4042, 1497, 1491, 1489, 
          4034, 4033, 1483, 4029, 1481, 1471, 4022, 4021, 1469, 1465, 4011, 
          1463, 1459, 4007, 1457, 1453, 1450, 4005, 1477}], 
         Line[{1510, 4027, 1474, 1478, 1484, 4030, 1486, 4037, 4038, 1492, 
          1494, 4045, 1500, 4049, 1502, 4023, 4024, 1514, 1516, 4056, 1522, 
          4059, 1524, 4064, 1530, 1532, 4069, 1538, 4044, 1540}], 
         Line[{1541, 1539, 4071, 4070, 1533, 4065, 1531, 1525, 1523, 4058, 
          4057, 1517, 4053, 1515, 4025, 1503, 1501, 4047, 4046, 1495, 4036, 
          1493, 4039, 1487, 1485, 4031, 1479, 4026, 1475, 1511}], 
         Line[{1544, 1508, 4051, 1512, 4055, 1518, 1520, 4061, 4062, 1526, 
          1528, 4067, 4068, 1534, 4072, 1536, 4050, 1548, 4080, 4081, 1550, 
          1556, 4086, 1558, 4091, 1564, 4092, 1566, 1570}], 
         Line[{1571, 4066, 1567, 1565, 1559, 4088, 4087, 1557, 4085, 1551, 
          4082, 1549, 1537, 4076, 4075, 4074, 4073, 1535, 1529, 4060, 1527, 
          4063, 1521, 4054, 1519, 1513, 1509, 4052, 1545}], 
         Line[{1574, 4079, 1542, 1546, 1552, 4083, 1554, 4090, 1560, 1562, 
          4094, 1568, 4101, 4102, 4103, 1578, 1580, 4108, 1586, 4111, 1588, 
          4116, 1594, 4117, 1596, 4123, 1602, 4093, 1447}], 
         Line[{1605, 1662, 4174, 4173, 1658, 4169, 1656, 4168, 1652, 4163, 
          1650, 4162, 1646, 1644, 4130, 4129, 1635, 4154, 1633, 4150, 1627, 
          4140, 1625, 4143, 1619, 1617, 4135, 1611, 4131, 1607, 1641}], 
         Line[{1608, 1572, 4077, 1576, 4107, 1582, 1584, 4113, 1590, 4112, 
          1592, 4120, 1598, 4127, 1600, 4097, 4098, 1612, 1614, 4136, 4137, 
          1620, 1622, 4144, 1628, 4147, 1630, 4151, 1636, 1440}], 
         Line[{1638, 1670, 4180, 4179, 1669, 4178, 1668, 4177, 1667, 1666, 
          4176, 4175, 1665, 1664, 4156, 4155, 1660, 1659, 4171, 4170, 1654, 
          1653, 4165, 4164, 1648, 1647, 4159, 1642, 4157, 1639, 1663}], 
         Line[{1640, 4132, 1606, 1610, 1616, 4134, 1618, 4141, 4142, 1624, 
          1626, 4148, 4149, 1632, 1634, 4128, 1643, 4158, 1645, 4160, 4161, 
          1649, 1651, 4166, 4167, 1655, 1657, 4172, 1661, 4153, 1604}], 
         Line[{1675, 4310, 1871, 4336, 1865, 1863, 4330, 4329, 1857, 4323, 
          1855, 4322, 1849, 4317, 1847, 4283, 1835, 1833, 4306, 4305, 1827, 
          1825, 4299, 4298, 1819, 4290, 1817, 1811, 1807, 4284, 1843}], 
         Line[{1682, 1837, 4309, 4308, 1831, 4303, 4302, 1829, 1823, 1821, 
          4294, 4293, 1815, 4289, 4288, 1813, 1803, 4280, 4279, 1797, 4273, 
          1795, 1789, 1787, 4268, 1781, 4262, 1777, 1809}], 
         Line[{1685, 1671, 1673, 1672, 1676, 4183, 1677, 4184, 1678, 4185, 
          1679, 4186, 1680, 4182, 1688, 4190, 1689, 4192, 1694, 4193, 1695, 
          4197, 1700, 4198, 1701, 4203, 1706, 4181, 1707}], 
         Line[{422, 2719, 2718, 421, 2716, 2715, 420, 2714, 2713, 419, 2711, 
          2710, 418, 2709, 2708, 417, 2706, 2705, 416, 2704, 415, 2703, 414}], 
         Line[{1710, 1683, 4188, 1686, 1690, 1692, 4196, 1696, 4194, 1698, 
          4202, 1702, 4204, 1704, 4187, 1714, 4212, 1716, 4216, 1722, 4219, 
          1724, 4224, 1730, 4225, 1732, 4232, 1738, 4199, 1740}], 
         Line[{1741, 4201, 4200, 1739, 1733, 4227, 4226, 1731, 1725, 1723, 
          4218, 4217, 1717, 4213, 1715, 1705, 4206, 4205, 1703, 1699, 4195, 
          1697, 1693, 4191, 1691, 1687, 1684, 4189, 1711}], 
         Line[{1744, 4211, 1708, 1712, 1718, 4214, 1720, 4221, 4222, 1726, 
          1728, 4229, 1734, 4233, 1736, 4207, 4208, 1748, 1750, 4240, 1756, 
          4243, 1758, 4248, 1764, 1766, 4253, 1772, 4228, 1774}], 
         Line[{1775, 1773, 4255, 4254, 1767, 4249, 1765, 1759, 1757, 4242, 
          4241, 1751, 4237, 1749, 4209, 1737, 1735, 4231, 4230, 1729, 4220, 
          1727, 4223, 1721, 1719, 4215, 1713, 4210, 1709, 1745}], 
         Line[{1778, 1742, 4235, 1746, 4239, 1752, 1754, 4245, 4246, 1760, 
          1762, 4251, 4252, 1768, 4256, 1770, 4234, 1782, 4264, 4265, 1784, 
          1790, 4270, 1792, 4275, 1798, 4276, 1800, 1804}], 
         Line[{1805, 4250, 1801, 1799, 1793, 4272, 4271, 1791, 4269, 1785, 
          4266, 1783, 1771, 4260, 4259, 4258, 4257, 1769, 1763, 4244, 1761, 
          4247, 1755, 4238, 1753, 1747, 1743, 4236, 1779}], 
         Line[{1808, 4263, 1776, 1780, 1786, 4267, 1788, 4274, 1794, 1796, 
          4278, 1802, 4285, 4286, 4287, 1812, 1814, 4292, 1820, 4295, 1822, 
          4300, 1828, 4301, 1830, 4307, 1836, 4277, 1681}], 
         Line[{1839, 1896, 4358, 4357, 1892, 4353, 1890, 4352, 1886, 4347, 
          1884, 4346, 1880, 1878, 4314, 4313, 1869, 4338, 1867, 4334, 1861, 
          4324, 1859, 4327, 1853, 1851, 4319, 1845, 4315, 1841, 1875}], 
         Line[{1842, 1806, 4261, 1810, 4291, 1816, 1818, 4297, 1824, 4296, 
          1826, 4304, 1832, 4311, 1834, 4281, 4282, 1846, 1848, 4320, 4321, 
          1854, 1856, 4328, 1862, 4331, 1864, 4335, 1870, 1674}], 
         Line[{1872, 1904, 4364, 4363, 1903, 4362, 1902, 4361, 1901, 1900, 
          4360, 4359, 1899, 1898, 4340, 4339, 1894, 1893, 4355, 4354, 1888, 
          1887, 4349, 4348, 1882, 1881, 4343, 1876, 4341, 1873, 1897}], 
         Line[{1874, 4316, 1840, 1844, 1850, 4318, 1852, 4325, 4326, 1858, 
          1860, 4332, 4333, 1866, 1868, 4312, 1877, 4342, 1879, 4344, 4345, 
          1883, 1885, 4350, 4351, 1889, 1891, 4356, 1895, 4337, 
          1838}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
v2RKlzZZr5zp+XXRnJdwv2HPYi2JZLzdYn1JjOBMQsSI++x18ei5dmH1wpne
uKtbOvsQmW8SFT9o4jYWP8DET1ncWLxBPBVvwMSbUfVYfKLF3bH4RCY+Dcff
K9Ori8EsG65fXx+5or5FiIcgmde7YvH9++TTUUMw+7jdlli07Cq71Ufw4c5t
t0tN5enoPCXnjMzbYLTdMuGDBJmXkgTX2/o5iVju08QhG+6EEuMsPkkROw91
fph6U8sDzzi+zcHNC4Bn2dTHAeS7IqZj+xfmU/sXmP3rT+130Kb2O7TR+92b
wgf4ROEDMPjgqTGGJ3iawhNk8EQoPoHjHfih6qqqHWvtk3B2V5qUEVl3S6sB
l+8itvhoRmbJgYkB6MSqmzmJ2GP90+jrd3K+4W6Y8+qliBUUxEZ+Gj0/fN7Y
b/7lQAaM/z3jk+/TUNj14UWqK+EFnXk3L3+cmwarFq3mdeoOhW9DInqvh//B
Wyih8BYYvN1O4TP0XR3DZ2Dw+ShrDM/BsngMz5HBcxr/cQeF/8jg/wmBMb5A
iZ4xvkCGL2opfoHpFL8Awy/PKD4CLoqPwInmI5q/IJniL2D4ayrFd3Cd4jtg
+G4yxY/AS/EjMvx4juJTKKD4FBk+pfkXaf5Fhn+XLIyc+0AlDKefX+hueyQV
/Ksmeu4ldhqvtTBd9j4cExJXCrF2pEKZfcFBYTI+7dhBY/4zCTgskTR++0Aq
pBcuaOYgetR6LJVi1NNwIM3m7FT5MPi51Ke4iPg/vDZRUePNJbyUUfNOZtEZ
mHBIcYolwYFOTbybr5mH94J98xUzfdH5jLhwNZlX9QneLYqFGTj+5IZL08h5
spjXXNKL6G9rj70WejMBXz180mdurIdnbNX3uZJ4ezVbt9zteyJGPc7Rqoi5
AAsVrxRMJuPLdgYqXnlpDz17Zi6WD4iHM7x4Oo2MhzaddubqlQfZ30K77Xcm
w8Inmvt6SBwujAVZn2o/nLDx2PXZqeGwrjV1KIKsr/SanlCDr9G4z8Lq9c7l
54H76tdN9mS8YvuBvA0bE5Ansqzs8zx9LJIWH59B9C84t7fiuGkYZjcK1x07
aI3Lpd5EGhH/z/tmpVCUFoLWC8IC/94wxmWTRuLqyPi5vZeuGxh5oQsH/0Nv
U1Nsme1gbkzih3dcj9f2DZG40995914uBzQVttj/inzXQ+TKdOOj6RB6LMv9
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
QSszTglNck8XoOWr2OS/bdv7sPNyPk40fyzqy5WMZzy4hzcQ+X10XVs4W10b
73vHhyYCZVijOc7/8YVM9ND71KBE7k0HaPlINvlV30zKz5L76aBdk9uZkXgM
r5bPeTDwvzq+UjZ7rlPnB+TaPXZ+QOb8oEPX981mq+9b3rRrg+L6IgzfqX7k
1KRwlMoujHhH1reErr+bwlZ/pxjK+/rVhBIsv7VVQvpPHG63zN2x5zULyml5
YTb5aOq8hAf8x85LyJyXOul77h+2e+5D6n4B1X5j9wtg7hdFdF3ba6pOGZk6
5YOv7k0LPJ+B5xqbj7vpJ6PiJM1vsWR95ek6vjS2Or67FH/BJYq/gOEvXbqe
8awHVc/InPeuFzlKPCG4E6TsbT9tMAcDNvg255DzSR1dD9hK1wNOp+sBV9y2
8PiZUIZ/W0709uam4e+24a5csr7VtH/msflH0B2lDs8qxFMS811u+sei+nLZ
7InkvHSQrnN8dYGqc3xL1zlKOfC6bxFLw+16Gqpz16egeeuCO1lkX3TTdYjR
dB3iVboO8dI+R91LO/Jx2ZbCXzKS+Xj6rqqi/CtyPqTlU9jkJwuzqlmz0pAj
7VryykemaNlexQtkP8rQ9kx0/Lc9nqvnXNs1bIdVxoK+LXbJUKhqfDWK8MtK
uh6zm67HZOqp368UeHfi6WWc/t0vz60nDxV3udjzkXPX+/+wZ1jtyMvv8lFo
Y6SzsNQwAfuPiqe6EHv46PrKbnWqvvInXV85oCWuuP+vN7q+fZWVKeEFFovF
nXtG442uA73PVge6lLqfwlHqfgrM/bSXln/CJv/H/8/NbSudsO/HcY7jwWfx
w/GrfwtInAjQ9vxls6evqaSm8HcoKEw56qucFQ9tbk4L9Ij+j3QdKBdbHagb
dR8H+j4OzH385X/YE0rleVCAyvMgk+fRoPIA2ELlAZDJAxRS9x1Mou47yNx3
ttL7JYltv3TEOzy1jQzFQ0Zcge9mFODa53ITvUnczuGbZbB6agAkaFrqrneN
gF9yUvwnyH5sputYP7PVsQb9+uN1k9yHo4dsNIyWpsBuufIV4sQ/N2j5r2zy
QieCK4uNvLDp1PO9CkczsKvwj+BxYn/IsoOzQ06mg4FlYL3pMXus4bvScYjc
4y4Kb7KwnVEErSfvTussKILLmb8vziX7sYPWz2n8b/13qLwT3KDyTsDknb7S
9bZJbPW2oRtzG0pvlkCVdklf74MImOS/yCyC7KMf6kndJrZVcNj1j0BeaQrU
WSytNCP3LBsqDwY2VB4MmDzYAK0/iE1/JZWXgw4qLwdMXk6crvPlZ6vzJfCe
OTL5Kiy6vCc3V6gI2s3/wIc8wke1Zb/S3teCX31DzKKiAmhIUTuJNYQfqfwh
cMmM5Q+ByR9O7aRwtZ8NV2dS+SIUofJFyOSLtOo/6Hp11ICgoOpeSfE8OGS6
oZ2vkQUua3aHLOMvA2/HD2FGnenQaTQUZdlDzvNUHhW4zMfyqKBK51EDqbwr
yPKM5V2RybtaUfleeLR9LN+LTL7X5/hYvhcKqHwvMvlezbqxvDEoUXljZPLG
b7u2B2zx9cDYdM1eSUEHONqYKH2C7NPgnMg7XdUxOP9Twynj9B1o3Lk7ePR9
u9b6GTYFFcH4wWuPurG1EmS2fCl/Q/xTUb7OeCTcDmyTb767FkzW/XDOtwmj
uEfXqb1lq1O75RSqbPsgDevlL67MMN8KnMLSxY9JfM5uSVH5OCMLb5Y0Tl60
xQeP7T+0kO87CyZt3Px3XcolXJKY9PN1czDm7Z4nmkL8bGAaMa2kLg/71n06
/7AlAh/x7l+9hZwn+VW6eDKP5+LloK2mua2hqBuouOkD2aeNA/WKJ/R1ULbz
Z6q9oC1eXDc3/iGZbx5dJxjKVid4fCgq34X3Irauc+usRXfsWJQ1pDFaj0bX
4fKy1eFWa3Wrf3p5Fh4+cD//STAKYiWXPn1Ixl8MB0f19/viIs+o7inbg3He
5co2OeKfY7QefjY9t4W8tGNCLuGb4u6LkVaRmNEtK3WL7IsNP48qdOumYXGr
dOZywwDcG7PKew/x23fdnGXjbCNxjcm54LlFIThxnO7ITeJn7f/QP+v57+66
NZHYLzot4wRnOAayONa7EfnDdB3xarY64sUTZXe+M49Gpx1c6poubnjRKzF6
9D2GuRCnkfQrMh/dKbMXF57DzkX9Re1kXrHS916LKcShTPwcw8KV0RinJ1F6
m+DzMVr/Wjb9FRERESu6fHH7cw6PEx2u2G4lvXWQ6LGk65f3sNUvy/8Zd+4v
SxmCz8+wsjb0hs9uX7hH67bme4Q6H8t2Bq55C09PIXjg+efI5pvEzv6tGUe9
dnvgJfElzcsv2eEW597Uk6Pvq2n9qmz6dz+J2ClWfA7P3eYvOt5mjVILf+W3
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
U9XO8+oigTArv9OwQisZZ8bqPBgdn0P3JzxO9yespfvvnQ1tzTzACoOFPX1T
jc+5Q1G98sTR98MqtD2SbPZ0dY44b2aFwttpiYH9MoYgHrG5OuT/lS89/E++
9MMXo/4HN4IgZpsHZ8++RLT+461uRvyTTvdFXMLWFzF5nVxVqJIr8MxPH/+0
LRmXq3233knkk/+jj+KlBYI7J13xwwIrnlaN2QnQHdN4/DORz6D7EMqz9SHk
ps5FuJY6FwFzLppA92N8yNaPUXycwjI/Xl/c/OHh9gHfJPj48KPk+V+jdRb/
7mfI+LOvyW/uEi1/+NzhnWotZo8ThSav4//L+Mee9supf/7/gir7CzpKxp6Q
OCuy54NsIHotMawYvX89Y+vTGET3abzjZxxrqhaM89a/89/TEgUGl7KDkNhp
9x99FNMWBAhmDjljltRtl7SqWLAyVyn/SOStafmFbPKmR3atPVHhDr0/Ez83
lYXjTP5ZtW9G+/nQ9hiy2fOgXP6GxWs3mKM4Qa/YNRaPjrvC85Ton033k+Rk
6yf57uKaCT8veSPXszrZU8FhIBiQO6uf6Lel7RFjs0ddfGHUzeQg3MV1fr7R
a284nx33zJh89wDdH1KZrT9kJ+Uf2En5Bxn/pP9HH8ud1PqCPbW+yKxvPC3v
yiavaNFQ+f/Q9d5xPf7f43+kkC0ZkWwhM1TWQdlSUiGVpKLSVCqkvffee2vv
ojqEpBQysislhAohGf0ez67H8+3zur4//16303mex3msc07Xde72d/1QY9ee
N8b85jB5nOCK2//Hnr0se2J9Tr6daemH55VyMoe0nkTsGL2ak6econ0so1h9
LGOY9QwZzHpG7nqOofbYs+wRvH9dreJsCIy4YTrSRioKs7v3vnjX/7c/Zwur
P6eK5usPYauJS9I7F/MkRUGsXtNAE9H/ifaxjKF9LBNpH8uJjH6cyegHrv7U
f+yvXad2fZ5j740PTizoDZ8UC9elygU0OfuF6o9l6f+2KTPcyiQQMxcK3ozV
cUXvmbjyN6cOQ/2TwvLPlH1rVDf+IPYEpsS2zQ/Ercrempy+E2dp/8/9rP6f
MXu9hmRODMBQU+vRHfKh8Gz/l8vhRP4rtSeCZY+qLkL1kjDcZ3vSWzXSDzoq
g29z+knepf08k1j9PE9OyxTfetEPl29+NO4c2ZcLVk5b2Eyea9G+o9dZfUdz
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
0s4pSPjFwVq/gaCDCoHQ+3TJlC1E/+XhpusTsuLB9UrkPjUlUxB20bsmQOR3
MXVOuMDUOZFb53zM1EXhFlMXRW5d9DxTj4V4ph6L3HqsIFOPxb1MPRa59Vhh
pq6LaUxdF7l1XZ97hoJVE8xhQmqgfFNtIGTqbhh9lMzLpFftMU6pTqhx7Hy2
fl8KHBGyjlUm6/xrecmRpUmWcKLR0XLHjgjQWvxOazGnH+++yUk4LhwX7/it
M8E4GY0kO++rkfN5O+UqCnT+l6s4yvekyektvlh/NOvagh2X4c/ETwO6nH7d
daMzj+3JxalWci94ZQvhw7dfcXEPu8FbT2LM/OYSfOwyat6WnxlgdfOS5VAi
b7p3aeVrXcQclUyPndtPQZGFltzkqm54aPNxeYUHouuk8ooO97PY5clnfvIq
udc2/H4+foIOGsvpv1zjWYoLx5wz2PCUnD+Ua+lNuZbZlGvZsppntcfzULCQ
VTb9vCMYZCvVbYdweIKUD5tA+bBIOZIbhd/NHr3SGsr7PhoM1bSHs97w3Ivz
/tuNNuOnV8KgMzFp95HrkTAs90sDJ792ZHFmuXqUlm9uzPxdgZpHSpTyJgWj
tDlYNt0g+8tITMQ67xLerBszVM41BCdOvP7r8D1yzneKdSsK2ENK9PvF1aWp
YH/s2Lr3RI8t1Z/J0q94pO7+oXlOcHlns1KCaiKsOrw8Bck5qU/5tv0svq2I
z+br6R+L8U2p+LH3pZE4zTv44zgSl65yv7Rpr3IJrj5xke9CURzG37af5vyk
GxpmTNeU3xqE9bm+6523e8Il80ZbznciOlT/G5Z+3Kv9aeVnTbyncnMVr5c/
yO1VD7vJ6XdKubqzWVzdtuV2x28czcN3D2Z0wcQ47P288dV4sh+TT/en39HN
xL3rr5t5fotB+epLtgkkbnT87XJ4hL0Ojjr5QkLWyAbCjmsnVg381S/C0v9o
jfKa11rn8fCIVncx7+MYbb/l4k0iP4/yfAspz1eN8nwVDVT6ditm4Ra5Wj7R
nASUeiczagp5Pu6PT8Xp4iTc3hxw3W9TOt5+n2alSOy5bR2TvMwsDu6nNyYo
dKTBG+WB6YIcfjTl9tJ1CNx1OCVcckQ4vx+4VH9bNTfHCz6PuWbI+T/UZsov
3sDiF6/JS1vp3JgEsj8sRm8i+e/42rk8U8nvLqD831wW/9ehNmnzt1wrOBb0
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
P8+m83KbNS/dH7/Ku97zBXcJUQWlR9GQenbsATeynvd4VuzbxecNIiLHmxTH
RgIP1K3dz+EdUy65CYtLHtLRm46TiB9fiQdI80Wg/qrk6gEOl1zyhGmiizOa
GcX9eLM4DDftGfguw+k/T7nzS1nc+Q8PBAKSevRhwZ09yidNXXF4wuOtBkT/
auqfvLb/+seB8uJNWLz4H0ai2iVLQ6H50E7tpOlG4Np6xOkx+d1llA9+hsUH
j6dc9WgWV134eVplsGsiDKxqff5YyhX2+3t0OJD5XUn54DtZfPAwyluvY/HW
BVvk94VYJUGutdjukOYgKJwe9LOSrB9DyhNPZfHEm2LkRSQ1o+G3lPOMs4t9
oD61cQfnOxdryvVeyeJ636Zc7wgW1/visPH8gi+8Ie3TtJuB2nZwhndc0wtO
X8RSm2nnV0qj4OqGEjEfN1w7eu80DgczeXYPmJP14fD8s9OBy7IYdNXoLWed
rKJ+s2f5LcLAS3nj9AR4KLM8dF9TKGgMa9JOJfsr9B/c+VrKW29k8dabhPaP
+iKXBksn8W3wOh4N15a+/aFFzoEb/+BTy1Cutz2L66268+eKU2XJ0KDdum7O
Dm9wXm4y2H/yCOV6F7G43gYLb7UmSkaD6IBB09VdB6Fao2xMGpn34ZRbbcji
VhcUep4ekeoEYhm38gw3+2K/sqR4PHl+i/r/NMv/HYcYnvVYFs86bO8Y+478
Uxgx7NDjj6HhOBJSB45z3ot+lFuxbMAPREQTpB6LhkG9YH9PGLGnfl0+tkfE
wFR3n+fTCmKAzzqEL63vL0/8Pcs/7+wNdMIjIqG2Y4nlI9dI0Cx/7j6OjNeK
8rJPsHjZZy7MKN431xFuRua+29FjB7teCReokXk37vDWFV9sVv5bovqKebvB
//LT8Q1P+J1Ou6EGT19kWZAjJq+Iucjpr8JD/abH8tteymW+wOIyv4xouDox
Ngrfp0w4uGVFNPI5+C6zIuufn3KZ17C4zPoPxDRjv0fhQLDPz6iRsdg++WZt
L/GD9j+4w2KMP3Eq40/k+nPBvkH/w3bG/8D1fzYzvxh4cXB+gTu/0yn3+efM
/3Kf5/smXzLkicOCw+G1Ub2aOMXHW+An5/yk4z3HGq805S9rs/jLAY9X14pa
pmBWYO0Z8ckBmOfaX/eA3DsmlC88lsUXNgu1q5FQTcOAS43Njy+S+D17u/iu
L385uWYsTm76P7jDD5U//VT1ScQUI6WVPBIhGOInZTGV2BNCubpWLK7uWP2Q
DHshPzS2yP04ImkJptd+3cjpP6NJ/S/H8r8n5e2eYvF21xQNnj9QwZw/wD1/
Zh1pKi2/5o0Fo1btV09zwC+asZZ1RP/GojF1lf5xGF828x7e98clE2I9Lcl6
fk95x0dYvOO28KfOwTZJOFo6P0PPPxgPdy7ZFkPOgbuUL3yBxRceWHNoqsmr
eFSMjN9rXu+Gc66J7eH8P86d8lifsHisOynHNpfFsW2cNyc1QicIv0nkr34l
YIy7l0a/4Hx3EED9acby5z7Kk22+8F+e7NRxbj+G903DMddjnurGeoBslF7t
PvJcj/JVf7D4qlNOMZxZERZnFpn7F3yZ+xe4968n5ahqsTiq2cw9DveYexz0
6D1+l3JUw1kc1c3UDwksP4RLzb56vtwDd94u+CHTEomXDbR4ZMlzswe7vy1M
cUSXoPaP7/6E4PJrSUE+5HeN/sE51aH+b2T5n2/8zvRXCufh4ZKpnd/PmmHG
jFiPUs7/c6l/hKr+6x//3u+mIbqxMMr3gyj/fDfwb4n8HMjhFDPxLQgy8S18
ofGtD+Wc7mdxTnsor3bYr//yaiW+PYn8vCYJhHTDHwx/EQBVmZOVpcm6Oka5
q0tZ3NVuPnUFzeHk/guYrp670g8KepYO4+Qvz5n4HHiY+By48bkt5Zy+ZnFO
N1COah6Lo/qbiZNhCxMnAzdOdqfzfpg179KUr/qcxVdtY+JwaN05GIcDNw7X
ZuJ5PD91MJ5HbjxfyeQFMP7ZYF4A3Lygkvp5MsvPzUzeAckTBvMO4OYdLdQP
Q1h+sGHyGtjD5DWwgOY1yUweBDFMHgTcPEiTyZvAnMmbgJs3baR+S2L5bTyT
f0EVk38BN/96OGEwj4MSJo/DBprHCTB5HwjMG8z7cDvN+1YxeSI0MXkicvNE
/eUbNuT6+cM18z6NZc/cUMo3qXcFJ36YP5iHwnsmD0VuHmqz97C47cwgfMAb
tKhwD4mDnJp9lxO/LWJ4B8i3ZpB3AFzeQf+fvDHp4uG4zCn1yJyIBGhweiUq
QtbbpEPy+qONovG7eOywzZ8TICl39g0eYufiDH3tkSPjcbGzqml6UBSYm+ic
2NbHec//RYB2bxjuMrHokFl0GoZf6ZXk9M85/MJ8b7hqInYlWppOkA2E/oXu
+Xkc/tdY/Tky8Snoqaew6toIV+isG3LdmugPLo/Zc+RNOvonX+7cMNcI+A/s
GWtO/OboJJ24Y04GDpkQUZghchqXKi4Yr0vm/aEaNmapZeIDP4+sPSkeaGc0
b9Il4n9xibOf4vnTUbrnZrHuRh98+fuggQLRU6ohsG5PbjLy6KxOF+z0w3wB
45Wu5He7pgpJX9uTgOMi3AyjJR1x/09eqZNkfutuR9wMqI/GO03P24z1tdDI
SnW3A4fPpdRWHacVg6cuhC7y1j4Op/l3pWqQ59spp3U4i9P69fL55lo7Q3h5
PL9TzCMG6jRMHOU4+UtKc8W9U2fR5ML3e3eDIoBHQyxtAofvQ+eLlzVfqyfe
lB+jF4jLXxWNKj7lDgmytX4cPkgE5bHqsHis6+i8yLDmpWjVHLVnkyLRa3KM
R/zqA6C0dzX/bM7zzfsyV6+JxjEhRUU9IscxT3resGRiZ56BguIzhTA8e/ij
lcFLY9zicqiG870nP+WuqrC4q7PNdpUcPhWIqdcmVRySP4OL1r4JOUHW7dxk
vUx+twCMSl2iY/jUFE22v08I4sRL3yy25SX645nZgT4DtfooNvJPJIeL5NVt
etXgoDcq1c+4WxdpgEtsnjyeQc6TW3ReulnzYrUrvUb7hCu68Yxucjt1CquF
zxlz8mXVcQeNRvb6YY6XlOzTKHPkOTliKOf70643DOe0i3JOl1DOae/ZG3VA
8qxQj1uvN6/WAMj1X32V+NPDOIq/YkMABMw7++BLjD7kyEyXSyN6XlOOrRuL
Y2tn/eUt38YAkldv9mlYawqvs17f4fSZF6H+SWP5p4XyZ0VZ/Nm2u7xWTW/D
QLdBPHqs62lIbN4afI48/0B5owUs3uhtymkdzuK0LnSXzuj9FQ1HykOK9ihv
xdJf4ivPE7+9fcfwRtNZvFFnym/NZPFblSYpHhpaFwaC7dKPj/42Q+NfvJkO
nP+PUz7paKv/8kn1P6RdOXLEDVQfaIwwKfVFzcaaaSYcng7lhGZSTmg75YRy
uaWLWJzQBwfqLu8L1gdhpwVleb+i0OT2dTcO1/KQ/OuDHfe9YK7eiiszvlji
8AZvTQ5P8O7J8w52G0Mg4PPqGxEDhuBTVwS8RP9H6rdSlt/Mt4SWfheMha/2
J6I/ZQaC4povocXkHHChfihn+aGQ8luLWPzWYTpDP/J+iYfx1+YcE7nmDX1q
znLTONzJf/AuCykn9AuLE1q2W/bjOZ84qPqaH/uU1wgPLm+fn05+151yQptY
nNCSzc8f8ThGQnjVw7v+KQEYf1DjezaR96IczD0sDubPuz/L/A6GwvmFeq9/
kLxkSlvyxJfE/mTq/8Us/8+kfExVFh9zu5nBVv7mINgUGC/QcjEBN1kOzX9C
ng/b/u5L6hZvvPHQUl/BMASkLrW/X0X0iGq2dIy1UQe3wHuZIVsi4OuT4mmc
PHcZ9Y8Syz+q07f5puhZgta5x7pGo0Lgq5Fz0XcO14zyN5ey+JtTTFv8M4Yo
wMV5kjvVbthAXktqBOf7uFnLV/Pz5yqWa0ZLJdiW/uVLyrVYnnOrO4GHvrrI
LFxqj+k+fdpZA//mh/JUMpxHHRbnMWesqMg6Q2sc0iwz+9aPENSNqIy/Sexc
TDmPQ1icx2zPkKR7TyRR/Fp00hWBCMxQu+F3mPOeGOUY2rA4hl+2DfoTnjD+
RK4/lzP+x3WM/4Hr/xfM/OIRZn6BO782lCMpyuJIxt+bZfhkXgzGfPqaPWuW
Pyw9OrdEjqyfkXS82qzxKlCe4w4Wz7Fn2Tf7w4lxuMBVvCdTRQNmomtDGnlu
QnmFGSxeYSuUW3WtS0CzjP64XGVPnGuzeo8gsWcb5e4VsLh75/7BMawfI9H1
pikOp+7LXB8kH4BtRpN1Od81c7mBRSxOn5Nc4y27e8H4eZK3ULehMb6+Z2w5
idM/gfr/DMv/wym/T5bF73Njzh8MY84f4J4/x1LGHBq74SSGNub13FKOBLO7
FmdHcfrofnXb6bzIFwNn5Nx4cMQXNud6K3HqA3coPzGUxU90tP5R0dUTivs3
rvndmXsGxsrf8U74/ZdvKMLiFX70+tCddicC399ZcMBn41w8mdnBy+Edp1C+
myGL7zaJcvEcWFy8inNKKyq1w9Gjp9Kzf+NpvKzz4D2n7qFN/VnB8ud8yqeL
ZfHpWuU/fx6t6o+m+1YvHiJlgudyM09XkfE++v/o+uqoqprvb0UFKbEDCxMV
ExTF2gaimCAKYgCiGCgC0ggiJd3d3Z0qIJuwAFEswsYW49qBCu9cztyv65n3
51r8NeuuuXP2zNmz9+UT1K+tkPFrK6W+dQaMb50Vd//iN+7+RcH9+4j6sg1k
fNl+cfc43vPoucdRcI/voL5s5owvmwSNgwMTh6PK11N2DA+CttVjhmgfOgKR
sd4v3cj3vqrdds2s1BsUtRRypJT2g5iS50k5ss551DfNl/FNK6HxN2Hir3Gl
+rTm1EBokDSdNLzCErqjFq8I5eOCaHzOMvHJSM6ekXAvGoTEc2wjQ8zgRa+y
wWkk/ne4+hZGcfUtCOpbGeqbdpPxTdtD/e9KGP870c7h327cjgJ571ApW8uV
mO7/9OcPMv9W6uO2gfFxW7C7jTclLwCcd/YrcR3tgd8O3Yvl61ve5epzeMjV
5yCoz/2pb5oK45t2mPqy/WZ82Xam9dTJ4MTVySiokwV+fArMvgdVc35taoxf
2zquDsePXB2Ogjr8B1fPQwlXz6Ognu83qqcvgFFcXwCCvqCFxlmaifNKru+A
bVzfAYK+4z6Nw10mDq5cXwMfB/b0NSDoa4K5PghauD4IBX3Qfa5vAm+ub0JB
32RB49bFxG0z13/BS67/QkH/NZbr42A618ehoI/7otXT98E3ru9DQd/3mOsT
gfaJKOgTd841OTrtTTDEx8oN5q1MxBLbvC1D+TpyXB8KN7k+FAV96JDHMyYI
7zCA5oTxtkYtRfAmM//Atpc8MOP0k/EBp58MAv3kkbo5ga7V2bj7hXjWpV9F
YHN7mmH/uzyAGx/17PAMbr549dqT9lJ425YyrLKc3PurhTva+pfjsxyZQAnz
dBCvfhRXf4X03Y7Tc1NXFeMdZ+mQmxbuWKag9ebMc5KXZlxWH7SmEi8dVNS2
rLUGl2f+CXsvkXpv49quhmVVOOHJ29G+88PR0swoyZbMf/t+X9Gh26txkFHm
zn7rszCu8um0q+k8+Cm0z2tF/wrkRew55jovH2VW/H68pJIHB14rzb+oV4Lu
+jp618sKcdu0Uxd3NvIgzvnIQXvpHHTfPu/i5KpM9HoktMybxCFUQyQn+k4s
3v1Wd6BcKB4vJ6R8UOHrjfhbfgv47Y8tKyUu3FsbgIa7p1cV8/FOxfNfJw04
jCrjPU8rKO/HrRFxF3kknzi42BwsyrCEby6d+t8fnUTh1HT1ZDIeTX3ffjC+
b6KfIvxWTnTEyg22dzPlYkHn+qix08j5f748ckJ0ZBJeKOxUD7oaBBZTpdos
yHpM6H7dZfbryoyhPNGrBZgnn+rpaWsI2kGbJk56ywNd6u9WRf3d7Km/mzDd
l3q6L+V0X37oOk/ffq0AeSPrF72pC8HDO76KbergweszWtn7C3MxW0tR5J1W
HF6fHNH7yDuSz992xBioJ+LoxqF+nx4Go8rBuZaS5LzdsuZ83HQYH7c36mpq
ScVuaFx1wsTnggv6LbiSJcL/f8SrXouTOo5h9uVjd/t6OCAv/+Irvo766kzJ
US9PmoDtauNz+90tMG6yX5+bZFx3Qs3Hhx9OQ+YWWYPP0gZg8+2eJd/XQInu
yyRmX37N3qPd1BQIz4W/ibmqu4J0n+CN/P+3Kocd/d1LLwCuNHr6bamzgZEt
2a78ey2W+qbtpr5prdQ37arykqMPfJwxZFLzwehNDug0s2MaX7d/+YykR7Lb
PHGdW3zwAAkDXF4qe3EDGU/4h+9e52Jfuy3bD4DhJ4npcQOc4cp6+cP8/ws/
pPE5wsTnM/Wz82T87E79sKq6Nywe8q+3X7Fy9ge/5greU5Int1H/sk+Mf9kf
6vv2g/F9Gxb9rXrZuAKoUJ2wlXQtYOl5Z/0Tcn48qX/ZEupfto36l+2lfnCK
jB+c2saBdt5PCyE3xWVjWqIfzNh3IC//FVk/9TubyfidaflIissmZoLk2jc3
62qdcbeK47vTfJ9K6js2jPEd+0p9x54zvmM+12xO3FIPha17n4fLfAvBrpvX
N8qRcz7KTMat72ZTqJufvW/Cz9Pw59QGTf7/L64qHZmtpR8O8fg7qaw5FJ4p
RDomkfm1ady+MXHDDQdJk5gH/qfkCp7/zoaClS/WP3zyNw5zmTgYUj84WcYP
TvdcWUXy3FIwWR4u/mRrIZh0Be4ecvXf/lnTqO+YLOM7Nt928bUdIsWgt6jP
gvX7U+BL3PaXpSSfhFPfsdeM71jV5Il37m3IgureouptHu7odynzQg2JmzL1
1VrB+Gp12i29MHW/HzxZNX/K9SXFmLg5V+EQyQ9faPx/MfF/QP22zBi/rV4T
pbfvu+SEXm6tqw5HnsMk0YbS4GYexGc7Vxr1joQiu8ZnSVOzQU79gMq3DzxQ
fb4s4vrSfFhxV1Eh+2EJGLpqD3S4QfIzjc9IJj67uhy7r7QVwNABm/x8ggrh
sROuP0zmD6R+Xl8YP68xml81n8yLgb2jo97KvY0A01uxMuLkfTlV/fvHgPDT
FVtzQ6On5zr+rz/tnvWuTWV3PKYEGl/eox6OSgN3ajiS8w80bkuYuM2nvlHR
jG+U0Of0598GF+B1HSu/YeuLUfGV7Nn3t8j9SH2jYhnfqGWfzI2jZHOwWDtC
/HfnGfyU0fIt/hqp26kvki7jixTJxROzuHiiIJ4TufiDHxd/EMT/Pbe/eJvb
XxDs7xbqSzWJ8aVKOTd+78PubPwmITxS8rEHLHlytGbep7/PG8Y87yPqDyXa
y6XHH+om9YeSOLFWPU+4BMemm2qNmZ+Jert/3vFuI+/jP/yPDoStmCJ7qBQv
6o+SvKlQhL5KX6P21/318VlOfXzSqI/Pv3yR+ledHVrvV4CjNbXbr3Rm4pRx
twZuaOeBIvX9iWN8f570EY+TNotFYdV7r/MiIzDx/fSUpp//8+nDPUz8Y6kf
0D7GD+gml3+wkss/KMg/Q22P9N+xIgQTfTtfyb0KgvSVh97mkXxVcmjb7Eib
XBTqlXYlZ9Fx8Ft0U8iAxP8k9WPqc+a/fkwaSWPFhxoUYf1A+9mTDnrgiK87
f98k41X/8D+6plXcPG9/Hobm/HbbfzgQTVUSvqzi66BSvxg/xi/mwT98i4Z+
9U3ZpxaJ8f7idma/gnClf1R3Ocmf8jSesUw8j1G/mwmM383MbSPSdPeawOZB
x1+cd9fHVPO2+3w9+ZXU/yWV8X95RH1wLjM+ODrc/QuTTvfcvyC4f+2oz8tK
xuelkbvHwYa7x0Fwjz/h/F5xx4//+rw00zg8YOIwETpC5nzxQ2Hz6Wr6ttaY
WdWmfI/UCVrjH+hu/eKBlVLZj37NsUSxgMqmRWSecurDIpnN+bDIUB+WHTT+
Wkz89UovF4k0mELjy65Nx6fYg6Pa8HF8/xpdGp96Jj6Gp55ZxUinAmxWLTZJ
ioKWPV1CenzfUq6+hbNcfQuC+nYp9WHRY3xY5lA/nQrqp/OH+ulY+885Ov54
ARxZMelFmWY49D07ujGR3C+jqS+MHuMLcwo71moZ5kPd50HWyt5mWLdu7hwJ
3v/qc3Dh6nMQ1Of+1IelhPFhcaU+L3WMzwuPq5OhnquTUVAn29B9V2X8ieKp
/8tWxv9lHVeHw22uDkdBHR7H1fM4z7WnngdBPb+Y6wvgBtcXgKAv2EnjXMHE
OYLrO8Ce6ztA0HcY0ji4MnHo4voaeMv1NSDoa+5wfRD04/ogEPRBLlzfBFJc
3wSCvkkQt2Ymbm1c/wU3uf4LBf2XJNfHwXuuj0NBHzeP6/tgA9f3oaDv68P1
iaDJ9Yko6BPPmw/23/YpCM75aMsPH1CAT9L6Sy4n5yGY60PxDteHoqAPHbal
baK/yxHc+qdqytiPhXD2db6vA8nnBzm9RzzD6T2CQO9xUs726e8vOeLVW2Nz
efal8EXp6TWhxyR/ek98knEwGA3P/Wxcd6cEbqhtneVKxg2LpDavN4jBl/oL
v98ZmwJ157aHppL3Iq7EM9tKNxHlbETv7/vsjDZNreXbST3geS9nTev0JJz6
dOpO3ZiD6P5nWRPfb0iu8VSSv0QiVqXqmnW9D8ApA0RyU8m9ECFxT17lfTw2
2Dt3pJnH4/UnRyVVSV2tovGt2/1IJD4NuDlhct9ofPqk1Hs+mWf4ki+6Qp2B
OPrELRWjcWH4fu++hY7kvLnefjRcWT4QZ43V6dYfHIR+16XEVcm5GhKjYXPc
MADrNc50uEv44pkTa56+J+N71H+VHC8LwR19Jsjq7PJHr6JIhTFk/JLvAmUt
sUgccGW90L78AMyG+bUyZP49b2ryp6jG4fzhIpaXajwxe0Vnqw153+Opj8wf
6iPzgPrISC6xbRWvtYLRY8tFvpsUw82h/fYWkzrBuI9dk7aUC2aqHtm7XKoA
1u1o8TR49+/9Mpn7bvrRlbF4deex6nkDgsD91btRvcn3WlG/mL7UL+Yc9YuJ
ofsygdmXeRnRz967ROGry3kjDrxxw1Gv2i1OkOdqf7tx/Pb1gegx3n/g0yde
uLd03G9+fNqEzgQM/OyAzknT5MbMPY2rB44at6bH9+r/9oW507Vcbo67PsSk
HLhYancKq8aK5pSSz7c9eXIh79g+eKcvdsq0txeeaWyv5eNaw02qqgds3w8Z
wxbUdNUEotAKBacIvr7c7YLC6TNIPnEx+BkTFYyJ80wiJPn4Crovo5h98Vh4
4fmz5T7Q5CLcIGoeio//GL7g/248U3/xQOUcQ+iULtUd8S4e5yrEhdj++uvD
0kF9WMyoD8uI9K3L/d9FwrNap6KTUgkgYTemLobkn/LvCuOGTFmC9yZIrpKL
jCJ1revVfny9XOqzk8347DQkqly8JmaNsXD4qmGLL+zK3z/gPd83nMYniomP
JfXHCWb8cQqL79vZbTCBZTceXNn50R3crfLua3T/9XNh/VCCqI9MH+//+sjY
SS62TU0LhoroTxtbAwJgXR8dH5k//HqV80M5wvihRFF/mXrGX+b+L73J/l0J
MMtGpio+7xToVHdWZ3b+9XNxYvxTRnksXxNYEA4f3QfGSo9LQtRYtOYlea+/
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
coWaN2aXRpPn7aZ8ohSGTyTb88OJ89KYVg/yZ/C/30/0Kd9qIMO3Gtmcf352
tz8MH5+4qHV8ODQO6fwQTtaze92vuUfPpcDt/e2LJ671Adc5Jj0+L/WLC/FZ
ZCwM8vC9P6ooFvrZhPZLJ/vbSXlYlxke1g6bYXjbKgWsDe3HnA/3hBjDlZnS
5PN7/C7NGmKWCLUpZwzLjjrAhWjdVSYkniayde1JC2NgV/eRlmpVLbikc04y
nczzk/K5Whk+F8/xiEFEZBRcfyFn1ewWBXoV9z2kyLjWi1XL1yTGwpT0/Ku3
F4XDfZ+tm8X4Om+U/3WL4X9drBs6yKV/IrxN0tsBUkkA99o0lpLzv8X0bK2P
UhREjir/9UvKCWyszwyrI+u5UOxl1j/NBYZk1RUYrfDDzu0LZyaQ+E/j4okj
uHiiIJ4XNlR3HQ+Lh6KA+J9WU6NARjn8fROJw1HKLzvA8MtuTB6ze/w3d/Bp
t9n4cIozzgu28+1P9qtWSyU7BjZin+1dsi6bIvGc9Qtlfp5X2yjp+KLwKPr3
3dH6LiwCRSGtm+/350x5bUcYXpvPyTGlmyc5Q1NU/uu1H06B6hPpot1k/v33
rh9/VRSGZ0mHtbPbE39Hlt4ewcc5Uz6XOcPnWrG553tBhfteEHzvv3hwXxvb
hF3M3HFrrx9R54KdMWVubCYfX9cuxPHd0hm+WwYXZwzI7IkzCOLsnNv/yYwO
a7C7vDRlioUV5vomXufju7Kvc/y4qww/bjnlx1kz/LgbkdeqB8dF47PUQVor
58ZgPye/2dYk/jJ+KWVGveIxTDuiPvqLHo7w9RH7Rd7H1L6HVskOswfT8tDR
sl4h4Grb/KmTPO+SX5VNM90ssfP3jia39hC86//OpDdZZ7dJlvxGg3icZ3lK
t8EgCSNnCg/k19t7bk/Ti/sejd9DfH9Fi8bhs+GX67+QePr14fh6eQxfL5fy
0UYa/ZePlqzgc1NthxtuXOIadV7EGIZr3i3i62HOfrB/bIiwJ2rPu1tdWR+O
IWddH/P4OpOU97eV4f0toPy4PQw/zrd1fv14q1TMCKq3nDk8EAvcOhtuk7ru
2mW/+AV6Sbgu0C1ou2kA7nxavY6PbyynPLhuhgenQXlwzQwP7msuxysMZHiF
0rtazlbU+mCkuLz6nnQn/KwXZ9XQ9W++oUnYqSsKO9PRv+zmo9bMGIzIVZmp
St5rpRLJhsqAeAw5N+4G3gpAuUFxXlYkDzRSHuJMhoe4eZ13sEVsIjre1fow
9HsE+g6wm/CJ5L20YTnnw4UycMOBB1P2zIzH65csM2RInXlr+8dfO32TMPnY
tnm9FEIx1H+RxUjyvDzKZwxg+IwDKW9RkeEt6l40HVhLzkGOw8IcLVVXLB69
YmgDGX9ZOHnTeuVkVBuYrm2zOBIt7pZce0ri/yjirmuIfTL2VirMOhwQgtod
cmtiyTpHZ6uPEXWIxYe3VewPHI3AUyXjRVvIebbxTG5alBWJRq31qskZAdi1
6pJPL7KeCMqXdGL4kv+vrvOO5/L7/39LQ0lLe4iiqaWi0lNGi6SyskISSVbZ
W2bZe++RLVvpKSRRSCINlRIqs9D2O1evy/dz67r93rebv87tup3rvM451znP
53Ee98fcC8Hpjly+2G+e0zs9cSPeqB0W+U363ydvvqvh90TcdHhAUXmRJ84v
s9lD+WU0NjjfqCpMROvZaZf2dfuixR62z5tI+YRdSouNOuJQOiJO+vIjd+Sp
XCelQ/o/2eTbNq0VXji/9h7fETlz7GlV4qDWgUT2A5ISdwzxrLP+Vva9bvC4
t1ieipe88v/GUZDPiqNgPI7KZMXVUMeKq0GPjqtlaV0nMHSdZv7Tvzybbglv
PsUf/TNyBTgzH2SUUr4tO3sMB2WS4MfPhX2e7f5w8HNHvBPFBRppixjamQgz
dcKap73yh4qMhfLC5HclCK2+a3PbE+Fh3nfxNxF4S19rggR57wNaHyrL0Ie+
XcOTEn4uEJUEbwp2sBvi0c1Rr2Sp+UzrQFUYOlDr5qMj/Mkkjg9839vzJxi3
VCYGepN6NKwvc5qpRuOluSlqF5f7YmvlhGPU+Y8wrRvlZ+hG9WndaLDFv7rR
JSvdv0/7tgSHKqOf68R4gkSkXq0MKU/jPHyjQ9YGvm9c/HHUygTTl8d4FpNy
iUvDM/aSdT+7Xmow4Uwghu8rSRCjdM20/tSeoT9NvTLkOLrIAtsXJufJTPVC
+/6yxTNIPREW80bvFDvinc/zbbw6bEBcoEmeWse+66/yGxi+CpyNx3GaTTjw
V2YFNJN6Yll5EDiw8iAYz4M8aX3rR+1/9a0cSWFlp8Vc0KBOzNb/kDnJk7J4
DCg9FK17bWToXrV+nP86ujkQ+u8u63y/6Apkhwf3UedLjq3z31QdvwgSZ/Ly
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
6WDTRdrvSPMq9Ri8ylCaD2nH4ENesXn+ZWRnOHxTOWhun+AKV04cL6B4Jgdp
nmc0g+f5mV+yUf+XMUzN1j/2x14ZTG9VzaD2NTOOPVbJKYFQEDkk/czPDw5P
VvfiJuOoSPM/pRj8T7fY5RrHfgbDwtb0s5ucXUD5ZsAsG/J81PNLWjusyHfX
X9X0PdMOipa+KjYk/RZaLKTtJhsHVSfX52oGhkB814RFa8g8f/ZTY43vnzjg
seQuj812APW7P+6mUf4FNF/0CoMvGtc37ViDeQa8bij7ImGdBAFs0w8vJf1T
OW/mueMaBpBewv7h7Hwf+H5Qcv5E8rvu0jxSVwaP9KtGldqDp4EwYmCrtnHf
NVg7E9UDqXn7vOlIwWAAQFJr4+EbHvj1jKsbpduSYS9pef8zDCzOnU4ZOu2F
ebZvJVx+/Y9reoHBNV3qsV/SPzcU+t3nRC9dmYB4Skiyi7qvS3M7NzG4nWyW
LsLecSlg+eHkqqBLSfBii9NkLpLXrOxV2/xkTxHIuY8occ6+CTY/9WWLSdye
ajf2o9OkCMQcM7q/haRBsvR6vitNJM4pFkrWSPaEe0uvyOZPSMHDWu+yppP3
7qZ5qpYMnuolmi+6k8EX5aR5qj4MnurrSrc7bUUuaP82wGjG41BQ/Sy8iIf0
j4enf2rQjWJoW3r68ka9eGjEab3+zf2gMhQcWpYaB5P2d5l9Ec+HUskDv3RI
/P+D5qyaMDirZby/Vao35gK8KTyQ6xMDhYoCIcmkf/Y1vZuyJq0EJF8lzqwu
TwDrpHjdsEYSV1+Vvt5bnw3Lgz04PUy8cPY9hbpTZL+Lo3mthxi81hy9xybK
95JBzN82u2tTKXQvPnX7I4krdKY+OXxhXjJ0w+qRPS9zISj4V/D59//ju+5i
8F2tj1XzWzTlgKSsl/z3VeWgrz3k+i6D7MsiMpE8LdFQ/aBdP/ZrPNo6TbRP
I/uOppuhVbqCG0yzmJM/eV0Bmidpphq/64dZVX/7E3xY/Ynj/VklWb+AfUsm
bHva1qA4Pw/k2wbr28n+20zzYycz+LHsmTZX2peagVj+7uQD+wrQ4M7R1iRS
/6vJIusmTzqOf04oruhdUIKb2F0OB5F1o3FP5k4vF2tYw11b4a1WiGymk0tt
SX5qZbllX0JeCswqUxFtmRMALbvnPqgj8Rg3zbN1ZfBsOc3WlOiUucHdTFNh
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
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.09259458092137765, 0.7486122776543305}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$5912, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
    1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10, 15, 20}, "numberOfMasses" -> 3, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.8200836820083681, 0.1673640167364017}, {0.6778242677824267, 
      0.6485355648535565}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
     "pointsDataTable" -> CompressedData["
1:eJw9kkFKA0EQRXsSo1EkeAWvYLKvOoNHEIzuvIpLM2ThNVzVbIPRjausFARh
IKBiCEokmun/fwqaT3d113/V3cdnV6fn7ZRSM3qb0dqMQb+JryhHTXSqYY43
u8i6jodpEzuO/GdIkV9yXhvqvMYIdfwm68T+crzHbZ7fsd7c5APd9ZTj2+6R
jz64DOsf1ORY33Odg18dSG85WffAwbUiZ1GV5BI/eJKLH/mfeCQH1p9M/PAr
XPzkDvQ7s5IqfuxrufiH9EV+xfMvJn6st138GWO6YH9dcbJuj/3WUWBDpf71
rjo3BleQOy6p4rxGfwa/Ln3ndsJ7oRrua0H/JfvdJ0fhv/m9n+mz1j1zX2fb
F7gO+U9moTr6B9Aj/westChU
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {10, 15, 
    20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 3, $CellContext`tauSliderValue$$ = 
    1, $CellContext`tick$$ = False, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 
    0.8}, {0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period, t/T = "], 
                 Dynamic[
                  
                  N[($CellContext`tauSliderValue$$ - 
                    1)/$CellContext`dynMeshSize$$]]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {
                  1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open", 
                  AppearanceElements -> {
                   "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                    "FasterSlowerButtons", "DirectionButton"}]}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Row[{
                 Text["Angular frequency \[Omega](q), selection:"], 
                 Dynamic[
                  SetterBar[
                   
                   Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["number of mesh intervals "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 8, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`freqMeshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin], 
                Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 8}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        8, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}, {0.4, 1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 
        2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tauSliderValue$$ = 
        1, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], 
          
          If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
             Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
           LocatorPane[
            Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                  Dimensions[#]] < 3, 
                
                Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
                If[First[
                   Dimensions[#]] > 7, 
                 Take[#, 7], #]]; 
             Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                First[
                  Dimensions[$CellContext`rawArrayOfMasses$$]]; 
               If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                   $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                 
                 While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                  Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                  Part[
                   Part[$CellContext`kArray$$, All, 1], All, 1]]; 
               If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                 Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                 
                 While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                  Part[$CellContext`u$$, 1], 
                  
                  Part[$CellContext`u$$, 
                   1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                Part[$CellContext`glConstLocDefault, 1], 
                Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                  Part[$CellContext`u$$, 2], 
                  
                  Part[$CellContext`u$$, 
                   2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                Part[$CellContext`glConstLocDefault, 2], 
                Part[$CellContext`u$$, 2]]; {
                Part[$CellContext`u$$, 1], 
                
                Part[$CellContext`u$$, 
                 2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
              If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
              If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
              If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
              If[$CellContext`omegaIndex$$ > 
                2 $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
              ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
               2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
              True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
            $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
            LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period, t/T = "], 
                  Dynamic[
                   
                   N[($CellContext`tauSliderValue$$ - 
                    1)/$CellContext`dynMeshSize$$]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {
                   1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open", 
                   AppearanceElements -> {
                    "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                    "FasterSlowerButtons", "DirectionButton"}]}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Row[{
                  Text["Angular frequency \[Omega](q), selection:"], 
                  Dynamic[
                   SetterBar[
                    
                    Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["number of mesh intervals "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 8, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`freqMeshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{915., {292., 299.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax, 1]/2, Part[$CellContext`qMax, 1]/2,
                Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -
               Part[$CellContext`qMax, 2]/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {380, 
        380}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, $CellContext`k] \
$CellContext`glConstMMax^(-1)/350]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
$CellContext`glConstMMax^(-1)/500]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 0.25, $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], \
$CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6013889001492734`*^9, {3.6013891792952394`*^9, 3.601389191095915*^9}, 
   3.601389343635639*^9, 3.6013896010413623`*^9, 3.6013897227443233`*^9, 
   3.601389955778652*^9, 3.6013900783846645`*^9, 3.6013901373530374`*^9, 
   3.601390518838857*^9, 3.6013905597761984`*^9, 3.6013909951881027`*^9, 
   3.6013910467940545`*^9, 3.601391822685433*^9, 3.601392104940577*^9, 
   3.6013921467239666`*^9, 3.601392239999302*^9, 3.60139238315449*^9, 
   3.601392440920794*^9, 3.601392470945511*^9, 3.601392610517494*^9, 
   3.601392688817973*^9, 3.6015965463323107`*^9, 3.601596652471382*^9},
 CellID->456491677]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 3, {0, 0}, 0.25, 0.16280899999999993`, {0.9, 0.7}, {
        0.7280000000000002, 0.33499999999999996`}, {{0.18170985633472322`, 
        0.38560521838473283`}, {0.38560521838473283`, 0.8182901436652767}}}, {
       1, 2, {0, 0}, 0.25, 0.44782400000000006`, {0.9, 0.7}, {
        0.23199999999999998`, 0.6600000000000001}, {{0.9964271678159278, 
        0.05966629747400737}, {0.05966629747400737, 
        0.0035728321840722806`}}}}, {{
       2, 3, {0, 0}, 0.25, 0.3516410000000003, {0.23199999999999998`, 
        0.6600000000000001}, {0.7280000000000002, 0.33499999999999996`}, {{
        0.699622626485535, -0.45842208388669126`}, {-0.45842208388669126`, 
        0.30037737351446514`}}}, {
       2, 1, {0, 0}, 0.25, 0.44782400000000006`, {0.9, 0.7}, {
        0.23199999999999998`, 0.6600000000000001}, {{0.9964271678159278, 
        0.05966629747400737}, {0.05966629747400737, 
        0.0035728321840722806`}}}}, {{
       3, 1, {0, 0}, 0.25, 0.16280899999999993`, {0.9, 0.7}, {
        0.7280000000000002, 0.33499999999999996`}, {{0.18170985633472322`, 
        0.38560521838473283`}, {0.38560521838473283`, 0.8182901436652767}}}, {
       3, 2, {0, 0}, 0.25, 0.3516410000000003, {0.23199999999999998`, 
        0.6600000000000001}, {0.7280000000000002, 0.33499999999999996`}, {{
        0.699622626485535, -0.45842208388669126`}, {-0.45842208388669126`, 
        0.30037737351446514`}}}}}, {{{
       1, 2, {-1, 0}, 0.25, 0.8566609999999999, {0.9, 0.7}, {
        1.0939999999999999`, -0.20500000000000007`}, {{
        0.04393336453976537, -0.20494688097158603`}, {-0.20494688097158603`, 
        0.9560666354602346}}}, {
       1, 3, {1, 0}, 0.25, 1.3191559999999998`, {0.9, 
        0.7}, {-0.13399999999999979`, 1.2000000000000002`}, {{
        0.8104848857906114, -0.39191725618501544`}, {-0.39191725618501544`, 
        0.18951511420938863`}}}, {
       1, 1, {1, 0}, 0.25, 1.4912690000000004`, {0.9, 0.7}, {
        0.038000000000000034`, 1.5650000000000002`}, {{
        0.49826288885506215`, -0.4999969824357644}, {-0.4999969824357644, 
        0.5017371111449377}}}, {
       1, 1, {-1, 0}, 0.25, 1.4912690000000004`, {0.9, 0.7}, {
        1.762, -0.16500000000000026`}, {{
        0.49826288885506215`, -0.4999969824357644}, {-0.4999969824357644, 
        0.5017371111449377}}}, {
       1, 2, {1, 1}, 0.25, 1.8008640000000007`, {0.9, 0.7}, {
        1.6079999999999999`, 1.8400000000000003`}, {{0.2783463937310089, 
        0.4481848712617942}, {0.4481848712617942, 0.721653606268991}}}, {
       1, 3, {-1, 0}, 0.25, 1.989000000000001, {0.9, 0.7}, {
        1.5900000000000003`, -0.5300000000000002}, {{
        0.23936651583710417`, -0.42669683257918556`}, {-0.42669683257918556`, 
        0.7606334841628959}}}, {
       1, 3, {1, 1}, 0.25, 2.1138410000000007`, {0.9, 0.7}, {2.104, 
        1.5150000000000001`}, {{0.6857734332903941, 0.46420709977713553`}, {
        0.46420709977713553`, 0.3142265667096059}}}, {
       1, 2, {0, 1}, 0.25, 2.5405249999999997`, {0.9, 0.7}, {
        2.4699999999999998`, 0.9750000000000001}, {{0.9702325306777142, 
        0.16994518849450418`}, {0.16994518849450418`, 
        0.029767469322285776`}}}, {
       1, 2, {1, 0}, 0.25, 3.0215250000000005`, {0.9, 0.7}, {-0.63, 
        1.5250000000000004`}, {{
        0.7747412316628192, -0.4177526249162262}, {-0.4177526249162262, 
        0.22525876833718095`}}}, {
       1, 1, {1, 1}, 0.25, 3.2857760000000003`, {0.9, 0.7}, {2.276, 
        1.8800000000000001`}, {{0.5762340463866068, 0.4941541967559565}, {
        0.4941541967559565, 0.42376595361339303`}}}, {
       1, 1, {-1, -1}, 0.25, 3.2857760000000003`, {0.9, 
        0.7}, {-0.47599999999999987`, -0.4800000000000002}, {{
        0.5762340463866068, 0.4941541967559565}, {0.4941541967559565, 
        0.42376595361339303`}}}, {
       1, 3, {0, 1}, 0.25, 4.270856000000002, {0.9, 0.7}, {2.966, 
        0.6499999999999999}, {{
        0.999414637253047, -0.024187188704091183`}, {-0.024187188704091183`, 
        0.0005853627469528364}}}, {
       1, 3, {-1, -1}, 0.25, 4.783328999999999, {0.9, 
        0.7}, {-0.6479999999999997, -0.8450000000000002}, {{0.500969931192272,
         0.49999905923259713`}, {0.49999905923259713`, 0.499030068807728}}}, {
       1, 1, {0, 1}, 0.25, 5.107869, {0.9, 0.7}, {3.138, 1.015}, {{
        0.9805740906824353, 0.13801646048479313`}, {0.13801646048479313`, 
        0.019425909317564716`}}}, {
       1, 1, {0, -1}, 0.25, 5.107869, {0.9, 0.7}, {-1.338, 0.385}, {{
        0.9805740906824353, 0.13801646048479313`}, {0.13801646048479313`, 
        0.019425909317564716`}}}, {
       1, 2, {-1, -1}, 0.25, 5.666335999999999, {0.9, 
        0.7}, {-1.144, -0.52}, {{0.7373258486612867, 0.4400868568330576}, {
        0.4400868568330576, 0.2626741513387134}}}, {
       1, 2, {-1, 1}, 0.25, 6.262724, {0.9, 0.7}, {3.332, 
        0.10999999999999988`}, {{
        0.9444171577735182, -0.22911435982170059`}, {-0.22911435982170059`, 
        0.055582842226481646`}}}, {
       1, 3, {0, -1}, 0.25, 6.270499999999998, {0.9, 
        0.7}, {-1.5099999999999998`, 0.020000000000000018`}, {{
        0.9262578741727135, 0.26135076947611835`}, {0.26135076947611835`, 
        0.07374212582728651}}}, {
       1, 2, {0, -1}, 0.25, 8.570861, {0.9, 0.7}, {-2.0060000000000002`, 
        0.3450000000000002}, {{0.98529610969073, 0.12036480348940432`}, {
        0.12036480348940432`, 0.01470389030926996}}}, {
       1, 3, {-1, 1}, 0.25, 9.410409000000003, {0.9, 0.7}, {
        3.8280000000000003`, -0.2150000000000003}, {{
        0.9110320284697508, -0.2846975088967972}, {-0.2846975088967972, 
        0.08896797153024913}}}, {
       1, 1, {1, -1}, 0.25, 9.912500000000001, {0.9, 0.7}, {-2.2, 
        1.2500000000000002`}, {{
        0.969482976040353, -0.17200504413619175`}, {-0.17200504413619175`, 
        0.030517023959646932`}}}, {
       1, 1, {-1, 1}, 0.25, 9.912500000000001, {0.9, 0.7}, {4., 
        0.1499999999999997}, {{
        0.969482976040353, -0.17200504413619175`}, {-0.17200504413619175`, 
        0.030517023959646932`}}}, {
       1, 3, {1, -1}, 0.25, 10.740208999999998`, {0.9, 0.7}, {-2.372, 
        0.8850000000000002}, {{
        0.9968133767229298, -0.056360169527427346`}, {-0.056360169527427346`, 
        0.0031866232770703167`}}}, {
       1, 2, {1, -1}, 0.25, 14.457924000000002`, {0.9, 
        0.7}, {-2.8680000000000003`, 1.2100000000000004`}, {{
        0.9820098653167634, -0.13291534801261937`}, {-0.13291534801261937`, 
        0.017990134683236708`}}}}, {{
       2, 3, {1, 0}, 0.25, 0.4255559999999998, {0.23199999999999998`, 
        0.6600000000000001}, {-0.13399999999999979`, 1.2000000000000002`}, {{
        0.3147787835208524, -0.46442771339142197`}, {-0.46442771339142197`, 
        0.6852212164791476}}}, {
       2, 1, {1, 0}, 0.25, 0.856661, {0.23199999999999998`, 
        0.6600000000000001}, {0.038000000000000034`, 1.5650000000000002`}, {{
        0.043933364539765415`, -0.20494688097158614`}, {-0.20494688097158614`,
         0.9560666354602346}}}, {
       2, 2, {1, 0}, 0.25, 1.4912690000000004`, {0.23199999999999998`, 
        0.6600000000000001}, {-0.63, 1.5250000000000004`}, {{
        0.49826288885506215`, -0.4999969824357644}, {-0.4999969824357644, 
        0.5017371111449377}}}, {
       2, 2, {-1, 0}, 0.25, 1.4912690000000002`, {0.23199999999999998`, 
        0.6600000000000001}, {1.0939999999999999`, -0.20500000000000007`}, {{
        0.4982628888550622, -0.49999698243576446`}, {-0.49999698243576446`, 
        0.5017371111449378}}}, {
       2, 1, {-1, -1}, 0.25, 1.8008640000000007`, {0.23199999999999998`, 
        0.6600000000000001}, {-0.47599999999999987`, -0.4800000000000002}, {{
        0.2783463937310089, 0.4481848712617942}, {0.4481848712617942, 
        0.721653606268991}}}, {
       2, 1, {0, -1}, 0.25, 2.540525, {0.23199999999999998`, 
        0.6600000000000001}, {-1.338, 0.385}, {{0.9702325306777142, 
        0.16994518849450416`}, {0.16994518849450416`, 
        0.029767469322285772`}}}, {
       2, 1, {-1, 0}, 0.25, 3.0215250000000005`, {0.23199999999999998`, 
        0.6600000000000001}, {1.762, -0.16500000000000026`}, {{
        0.7747412316628192, -0.4177526249162262}, {-0.4177526249162262, 
        0.22525876833718095`}}}, {
       2, 3, {-1, -1}, 0.25, 3.0394250000000005`, {0.23199999999999998`, 
        0.6600000000000001}, {-0.6479999999999997, -0.8450000000000002}, {{
        0.25478503335334785`, 0.43574031272362357`}, {0.43574031272362357`, 
        0.7452149666466521}}}, {
       2, 3, {-1, 0}, 0.25, 3.260264000000002, {0.23199999999999998`, 
        0.6600000000000001}, {1.5900000000000003`, -0.5300000000000002}, {{
        0.565648671395936, -0.4956715161716965}, {-0.4956715161716965, 
        0.43435132860406406`}}}, {
       2, 2, {1, 1}, 0.25, 3.2857760000000003`, {0.23199999999999998`, 
        0.6600000000000001}, {1.6079999999999999`, 1.8400000000000003`}, {{
        0.5762340463866068, 0.4941541967559565}, {0.4941541967559565, 
        0.42376595361339303`}}}, {
       2, 2, {-1, -1}, 0.25, 3.2857760000000003`, {0.23199999999999998`, 
        0.6600000000000001}, {-1.144, -0.52}, {{0.5762340463866068, 
        0.4941541967559565}, {0.4941541967559565, 0.42376595361339303`}}}, {
       2, 3, {0, -1}, 0.25, 3.4441639999999993`, {0.23199999999999998`, 
        0.6600000000000001}, {-1.5099999999999998`, 0.020000000000000018`}, {{
        0.8810741881048637, 0.32370119425207405`}, {0.32370119425207405`, 
        0.11892581189513632`}}}, {
       2, 3, {1, 1}, 0.25, 4.235409000000001, {0.23199999999999998`, 
        0.6600000000000001}, {2.104, 1.5150000000000001`}, {{
        0.8274015567327736, 0.3778997494692956}, {0.3778997494692956, 
        0.17259844326722634`}}}, {
       2, 2, {0, 1}, 0.25, 5.107868999999997, {0.23199999999999998`, 
        0.6600000000000001}, {2.4699999999999998`, 0.9750000000000001}, {{
        0.9805740906824353, 0.13801646048479319`}, {0.13801646048479319`, 
        0.019425909317564726`}}}, {
       2, 2, {0, -1}, 0.25, 5.107869000000002, {0.23199999999999998`, 
        0.6600000000000001}, {-2.0060000000000002`, 0.3450000000000002}, {{
        0.9805740906824354, 0.13801646048479313`}, {0.13801646048479313`, 
        0.01942590931756471}}}, {
       2, 1, {1, 1}, 0.25, 5.666335999999998, {0.23199999999999998`, 
        0.6600000000000001}, {2.276, 1.8800000000000001`}, {{
        0.7373258486612866, 0.44008685683305765`}, {0.44008685683305765`, 
        0.2626741513387135}}}, {
       2, 1, {1, -1}, 0.25, 6.262724000000002, {0.23199999999999998`, 
        0.6600000000000001}, {-2.2, 1.2500000000000002`}, {{
        0.9444171577735183, -0.22911435982170059`}, {-0.22911435982170059`, 
        0.05558284222648163}}}, {
       2, 3, {1, -1}, 0.25, 6.831441000000001, {0.23199999999999998`, 
        0.6600000000000001}, {-2.372, 0.8850000000000002}, {{
        0.9925894112237814, -0.08576521410343735}, {-0.08576521410343735, 
        0.007410588776218668}}}, {
       2, 3, {0, 1}, 0.25, 7.474856, {0.23199999999999998`, 
        0.6600000000000001}, {2.966, 0.6499999999999999}, {{
        0.9999866218158584, -0.003657595544315587}, {-0.003657595544315587, 
        0.00001337818414160816}}}, {
       2, 1, {0, 1}, 0.25, 8.570860999999999, {0.23199999999999998`, 
        0.6600000000000001}, {3.138, 1.015}, {{0.98529610969073, 
        0.1203648034894043}, {0.1203648034894043, 0.014703890309269961`}}}, {
       2, 2, {1, -1}, 0.25, 9.912500000000003, {0.23199999999999998`, 
        0.6600000000000001}, {-2.8680000000000003`, 1.2100000000000004`}, {{
        0.9694829760403532, -0.17200504413619175`}, {-0.17200504413619175`, 
        0.03051702395964693}}}, {
       2, 2, {-1, 1}, 0.25, 9.912499999999998, {0.23199999999999998`, 
        0.6600000000000001}, {3.332, 0.10999999999999988`}, {{
        0.9694829760403532, -0.1720050441361918}, {-0.1720050441361918, 
        0.030517023959646946`}}}, {
       2, 3, {-1, 1}, 0.25, 13.696841000000001`, {0.23199999999999998`, 
        0.6600000000000001}, {3.8280000000000003`, -0.2150000000000003}, {{
        0.9441020743396232, -0.22972450362824548`}, {-0.22972450362824548`, 
        0.055897925660376775`}}}, {
       2, 1, {-1, 1}, 0.25, 14.457923999999998`, {0.23199999999999998`, 
        0.6600000000000001}, {4., 0.1499999999999997}, {{
        0.9820098653167634, -0.13291534801261937`}, {-0.13291534801261937`, 
        0.017990134683236715`}}}}, {{
       3, 2, {-1, 0}, 0.25, 0.42555599999999977`, {0.7280000000000002, 
        0.33499999999999996`}, {
        1.0939999999999999`, -0.20500000000000007`}, {{
        0.31477878352085226`, -0.46442771339142186`}, {-0.46442771339142186`, 
        0.6852212164791477}}}, {
       3, 1, {-1, 0}, 0.25, 1.3191559999999998`, {0.7280000000000002, 
        0.33499999999999996`}, {1.762, -0.16500000000000026`}, {{
        0.8104848857906114, -0.39191725618501544`}, {-0.39191725618501544`, 
        0.18951511420938863`}}}, {
       3, 3, {1, 0}, 0.25, 1.4912690000000004`, {0.7280000000000002, 
        0.33499999999999996`}, {-0.13399999999999979`, 
        1.2000000000000002`}, {{
        0.49826288885506215`, -0.4999969824357644}, {-0.4999969824357644, 
        0.5017371111449377}}}, {
       3, 3, {-1, 0}, 0.25, 1.4912690000000004`, {0.7280000000000002, 
        0.33499999999999996`}, {1.5900000000000003`, -0.5300000000000002}, {{
        0.4982628888550623, -0.49999698243576446`}, {-0.49999698243576446`, 
        0.5017371111449377}}}, {
       3, 1, {1, 0}, 0.25, 1.9890000000000008`, {0.7280000000000002, 
        0.33499999999999996`}, {0.038000000000000034`, 
        1.5650000000000002`}, {{
        0.23936651583710408`, -0.4266968325791855}, {-0.4266968325791855, 
        0.7606334841628959}}}, {
       3, 1, {-1, -1}, 0.25, 2.1138410000000007`, {0.7280000000000002, 
        0.33499999999999996`}, {-0.47599999999999987`, -0.4800000000000002}, \
{{0.6857734332903941, 0.46420709977713553`}, {0.46420709977713553`, 
        0.3142265667096059}}}, {
       3, 2, {1, 1}, 0.25, 3.0394250000000005`, {0.7280000000000002, 
        0.33499999999999996`}, {1.6079999999999999`, 1.8400000000000003`}, {{
        0.25478503335334785`, 0.43574031272362357`}, {0.43574031272362357`, 
        0.7452149666466521}}}, {
       3, 2, {1, 0}, 0.25, 3.260264000000001, {0.7280000000000002, 
        0.33499999999999996`}, {-0.63, 1.5250000000000004`}, {{
        0.5656486713959359, -0.4956715161716965}, {-0.4956715161716965, 
        0.4343513286040641}}}, {
       3, 3, {1, 1}, 0.25, 3.2857760000000003`, {0.7280000000000002, 
        0.33499999999999996`}, {2.104, 1.5150000000000001`}, {{
        0.5762340463866068, 0.4941541967559565}, {0.4941541967559565, 
        0.42376595361339303`}}}, {
       3, 3, {-1, -1}, 0.25, 3.2857760000000003`, {0.7280000000000002, 
        0.33499999999999996`}, {-0.6479999999999997, -0.8450000000000002}, {{
        0.5762340463866068, 0.4941541967559565}, {0.4941541967559565, 
        0.42376595361339303`}}}, {
       3, 2, {0, 1}, 0.25, 3.4441639999999984`, {0.7280000000000002, 
        0.33499999999999996`}, {2.4699999999999998`, 0.9750000000000001}, {{
        0.8810741881048636, 0.323701194252074}, {0.323701194252074, 
        0.11892581189513633`}}}, {
       3, 2, {-1, -1}, 0.25, 4.235409000000001, {0.7280000000000002, 
        0.33499999999999996`}, {-1.144, -0.52}, {{0.8274015567327736, 
        0.3778997494692956}, {0.3778997494692956, 0.17259844326722634`}}}, {
       3, 1, {0, -1}, 0.25, 4.270856000000002, {0.7280000000000002, 
        0.33499999999999996`}, {-1.338, 0.385}, {{
        0.999414637253047, -0.024187188704091183`}, {-0.024187188704091183`, 
        0.0005853627469528364}}}, {
       3, 1, {1, 1}, 0.25, 4.783328999999999, {0.7280000000000002, 
        0.33499999999999996`}, {2.276, 1.8800000000000001`}, {{
        0.500969931192272, 0.49999905923259713`}, {0.49999905923259713`, 
        0.499030068807728}}}, {
       3, 3, {0, 1}, 0.25, 5.107869, {0.7280000000000002, 
        0.33499999999999996`}, {2.966, 0.6499999999999999}, {{
        0.9805740906824353, 0.13801646048479313`}, {0.13801646048479313`, 
        0.019425909317564716`}}}, {
       3, 3, {0, -1}, 0.25, 5.107869, {0.7280000000000002, 
        0.33499999999999996`}, {-1.5099999999999998`, 
        0.020000000000000018`}, {{0.9805740906824353, 0.13801646048479313`}, {
        0.13801646048479313`, 0.019425909317564716`}}}, {
       3, 1, {0, 1}, 0.25, 6.270499999999998, {0.7280000000000002, 
        0.33499999999999996`}, {3.138, 1.015}, {{0.9262578741727135, 
        0.26135076947611835`}, {0.26135076947611835`, 
        0.07374212582728651}}}, {
       3, 2, {-1, 1}, 0.25, 6.831440999999998, {0.7280000000000002, 
        0.33499999999999996`}, {3.332, 0.10999999999999988`}, {{
        0.9925894112237814, -0.08576521410343739}, {-0.08576521410343739, 
        0.007410588776218671}}}, {
       3, 2, {0, -1}, 0.25, 7.474856000000002, {0.7280000000000002, 
        0.33499999999999996`}, {-2.0060000000000002`, 0.3450000000000002}, {{
        0.9999866218158584, -0.0036575955443155866`}, \
{-0.0036575955443155866`, 0.000013378184141608159`}}}, {
       3, 1, {1, -1}, 0.25, 9.410409000000003, {0.7280000000000002, 
        0.33499999999999996`}, {-2.2, 1.2500000000000002`}, {{
        0.9110320284697508, -0.2846975088967972}, {-0.2846975088967972, 
        0.08896797153024913}}}, {
       3, 3, {1, -1}, 0.25, 9.912500000000001, {0.7280000000000002, 
        0.33499999999999996`}, {-2.372, 0.8850000000000002}, {{
        0.969482976040353, -0.17200504413619175`}, {-0.17200504413619175`, 
        0.030517023959646932`}}}, {
       3, 3, {-1, 1}, 0.25, 9.912500000000001, {0.7280000000000002, 
        0.33499999999999996`}, {3.8280000000000003`, -0.2150000000000003}, {{
        0.969482976040353, -0.17200504413619175`}, {-0.17200504413619175`, 
        0.030517023959646932`}}}, {
       3, 1, {-1, 1}, 0.25, 10.740208999999998`, {0.7280000000000002, 
        0.33499999999999996`}, {4., 0.1499999999999997}, {{
        0.9968133767229298, -0.056360169527427346`}, {-0.056360169527427346`, 
        0.0031866232770703167`}}}, {
       3, 2, {1, -1}, 0.25, 13.696841000000004`, {0.7280000000000002, 
        0.33499999999999996`}, {-2.8680000000000003`, 1.2100000000000004`}, {{
        0.9441020743396232, -0.22972450362824542`}, {-0.22972450362824542`, 
        0.05589792566037676}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.7202673048170658, -1.918175610852695*^-20], {Complex[
      0.9705590770250392, 0.], Complex[
      0.18691316933003096`, -0.01150841292322895], Complex[
      0.05607696413398495, -0.04112707841868266], Complex[0.08420737720843288,
       0.008832463658466603], Complex[
      0.08346216043752355, -0.019302324782917504`], Complex[
      0.05722809588151096, 0.01809909848048411]}}, {
      Complex[0.5907910527606723, 8.09829847559355*^-18], {
      Complex[-0.10940152401860274`, -0.034483608257474305`], Complex[
      0.14368377181214617`, -0.0511145045811986], Complex[0.9624974082871007, 
      0.], Complex[0.1054522334577692, -0.0024287071558308053`], Complex[
      0.1130965908859005, 0.017297112162912937`], Complex[
      0.11154115594566015`, 0.02292764478214479]}}, {
      Complex[0.5058613056151516, -3.2196384100994112`*^-18], {
      Complex[-0.11359504251361346`, 0.007908178896823229], Complex[
      0.12783901741398407`, -0.0938443175039236], 
      Complex[-0.17345757940804396`, 0.032605442266057764`], Complex[
      0.16401481055644115`, -0.02971821579579519], Complex[0.9482216566946303,
       0.], Complex[0.06132763820247597, 0.007999383607446736]}}, {
      Complex[0.40667228056760873`, 1.8549476304320805`*^-18], {
      Complex[-0.14075314115717408`, -0.004351133324676081], Complex[
      0.9246503643004957, 0.], 
      Complex[-0.09415711219711866, -0.04756476157571737], 
      Complex[-0.1416406937687697, 0.0576504633571128], 
      Complex[-0.11456576853042606`, -0.11413716096087148`], 
      Complex[-0.25319269259912514`, 0.020458443189217333`]}}, {
      Complex[0.3294464897610627, -5.51148730525515*^-18], {
      Complex[-0.038988637539137325`, 0.007675627643767659], Complex[
      0.0009513647205040346, 0.03324184203058236], 
      Complex[-0.03559759201150271, -0.0006447609590172123], Complex[
      0.897873159905608, 0.], 
      Complex[-0.13672111302437948`, -0.029670713140933683`], 
      Complex[-0.39760074947771973`, -0.11050728584099856`]}}, {
      Complex[0.2736598792341535, -2.661947336193276*^-17], {
      Complex[-0.09947647479649939, 0.024205682586528846`], Complex[
      0.23839187072345774`, 0.06007353008279482], Complex[-0.1582114236129257,
       0.013623607415599634`], Complex[
      0.3400281511026545, -0.09348789087367909], 
      Complex[-0.18528474774207643`, -0.019776003318182897`], Complex[
      0.8630074671014824, 0.]}}}, $CellContext`dynMeshSize$$ = 
    14, $CellContext`dynPlot$$ = {CompressedData["
1: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
0mjwf/awdWg=
     "], {10, 15, 20}, 3, {{
       Line[{{-18.932, -6.61}, {-25.828, 0.3100000000000014}}], 
       Line[{{-16.694, -6.295}, {-23.59, 0.6250000000000013}}], 
       Line[{{-14.456, -5.98}, {-21.352, 0.9400000000000013}}], 
       Line[{{-12.218, -5.665000000000001}, {-19.114, 1.2550000000000012`}}], 
       Line[{{-9.98, -5.3500000000000005`}, {-16.876, 1.5700000000000012`}}], 
       Line[{{-7.741999999999999, -5.035}, {-14.638, 1.8850000000000011`}}], 
       Line[{{-5.504, -4.720000000000001}, {-12.4, 2.200000000000001}}], 
       Line[{{-3.2660000000000005`, -4.405000000000001}, {-10.162, 
        2.515000000000001}}], 
       Line[{{-1.028, -4.090000000000001}, {-7.9239999999999995`, 
        2.830000000000001}}], 
       Line[{{1.21, -3.775000000000001}, {-5.686, 3.145000000000001}}], 
       Line[{{3.448, -3.460000000000001}, {-3.448, 3.460000000000001}}], 
       Line[{{5.686, -3.145000000000001}, {-1.21, 3.775000000000001}}], 
       Line[{{7.9239999999999995`, -2.830000000000001}, {1.028, 
        4.090000000000001}}], 
       Line[{{10.162, -2.515000000000001}, {3.2660000000000005`, 
        4.405000000000001}}], 
       Line[{{12.4, -2.200000000000001}, {5.504, 4.720000000000001}}], 
       Line[{{14.638, -1.8850000000000011`}, {7.741999999999999, 5.035}}], 
       Line[{{16.876, -1.5700000000000012`}, {9.98, 5.3500000000000005`}}], 
       Line[{{19.114, -1.2550000000000012`}, {12.218, 5.665000000000001}}], 
       Line[{{21.352, -0.9400000000000013}, {14.456, 5.98}}], 
       Line[{{23.59, -0.6250000000000013}, {16.694, 6.295}}], 
       Line[{{25.828, -0.3100000000000014}, {18.932, 6.61}}]}, {
       Line[{{-18.932, -6.61}, {25.828, -0.3100000000000014}}], 
       Line[{{-19.794, -5.745}, {24.965999999999998`, 0.5549999999999988}}], 
       Line[{{-20.656, -4.88}, {24.104, 1.419999999999999}}], 
       Line[{{-21.518, -4.015}, {23.241999999999997`, 2.2849999999999993`}}], 
       Line[{{-22.38, -3.1499999999999995`}, {22.38, 3.1499999999999995`}}], 
       Line[{{-23.241999999999997`, -2.2849999999999993`}, {21.518, 4.015}}], 
       Line[{{-24.104, -1.419999999999999}, {20.656, 4.88}}], 
       Line[{{-24.965999999999998`, -0.5549999999999988}, {19.794, 5.745}}], 
       Line[{{-25.828, 0.3100000000000014}, {18.932, 6.61}}]}}, 
     14}, $CellContext`dynTab$$ = 1, $CellContext`freqMeshSize$$ = 
    4, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJx9nXV4VFf3tgO0uBWCuwX3Ai0EBpeEYIXi7sVdgrtTSimupRDcIehQKE4g
TIhMdDIhQYI7BPn6e1nPOZ1nkY8/3l7XvvLuObP3Xnvf555z1irSa1ibvind
3Ny+z+Dmlurf/0b0m9R1/Ml0Z5sUGHD6+o0k651lx1ZvbJpgcW1PtA5fdv15
4Cmz3U3+zYxyP3m32l2jvfGXv7f0qxOxqMl77ifJ0raudfOklGh/Z8XnlsvZ
YkL7vnepPdE6bXO3SoPjzHZ8bueNa6ud6mG243MfjF544PNS1b8lPmjcgZQV
Eyz4/+Nzr39sHntlcjy1J1oXXbAN7pvRbMe/F7cL/XUo8Y7Rjs/lv8fnov/w
L9djwefielzbE6335frRzt8X7fhcjA/1bynvMp7p6uJzXccf7YnW/q7zVTeZ
+a2Lz6X1gP4tX18/SdZ0c1+kiGrsVOtqz8OoIcuuO9W6atS7Y6+QgnFqXSW9
8UgXZed+kiwBy8e2+DMiVq2rvaV2t/0rTZxaVyeLj36b0SdOrauJmQd4Oj87
1bo6WefNsc9DnWpdhVzN/TBzfadaV2VLz9p2uVmsWle3DjTMNPS1Q62rMXP8
9q++41DrKpD+Hp+L/nldhcr18Lo6JdfP68pXvi+vqxMyPryudrmMp7muXMff
XFfvXefLWFc0v8a62uW6Hox19fX1k2Rt+nSQ+5NFMWpdeXVsG165gkOtq1Jd
N04o386h1tXIKQPDK1R3qHX15MKPnSNbRat11bzQq6ib5R1qXZUc/3RqYCuH
WlcXe+f4J7qkQ62rgEunG77bH6PWVah/s1P+thi1rt6NKLJy9bMIvV/Z+rxd
aLerddU4w8gya9ba9X5Ff4/PRf+8roLlenhdBcr187rC9+V1hfHhddXUZTzN
deU6/ua6GuE6X8a6ovk11hWtB2NdfX39JFkPJS54OO8fu1pXF4fU6zPfPVyt
q+I/dasTsS9SratRYTG/13ofrdaV32+DRlprRql1NWtyfLajb+xqXY2s6XjY
pWC4WldbHO2zNa0VodbVpn1VffwnRqh11XDDoGEHG4ardbVweL1h+4/xeki0
lph7udjflYPVuqrvfDmpdv5gta486O/xueif11UTuR5eV+vl+nldrZfvy+tq
jIwPr6sZLuNprivX8f/PunKdL2Nd0fwa6+qa63ow1tXX10+SdaffzhJ9Uwer
dbWzyLIM092D1boqV3Ri3yt/hah1dexqrkwvioeqdVWt5clKSdND1Lqq0ary
7MQCwWpdhSZV+Jw9b7BaVxFBZ5alPBOs1lXhlSlHOG3cT5IlU8C4Q6F63q37
N5ZMWLKK2xOt2WdOC4utdkOtq2+3HSjQJWulOryustDf43PRP6+rjHI9vK5w
/byuIuX78roKk/HhdVXdZTzNdeU6/ua6Ouo6X8a6ovk1z0HX9WCsq6+vn3/n
9+K7Bdt7XVLrasSMnQ+aPQlU68orwx+OnPeC1Lrqeq7hukX5bqt1tb1W+rPL
3gSpdeXokyvg0Ywbal3Nfp6tbtSSW2pdTXkzqkTXWTa1rnZ6bM11cY5NravZ
1Yr9U7y8Ta2rg+18OuWK5/ZEa+KOs2/WNb+o9iVuR//oh9fPHPlcXj+75Tp5
/UyS78XrZ46MA68f13Ez14/rOJvrp6PrvBjrh+bRWD+jXOfdWD9YJ27h11un
m5X67IY8J0u8aPvWeq1dT2ubfQmWEj4FGq9pnurs6xyZl+SJeGk9mCdD/Lc5
71q8zg6pWTaH29kW2Xq+tvR8Zl0ddTj98Ul3LVEyX83ofg39N/xf+zXrjBb9
w5r2vGv0/6U9wjrdevzVjkVm/y/+97l3rNMqZcyewd/sv1Ey/WN8RueofG5c
arN/tI9fvWJZwVZm/2ifVOB9jwurzf75frPpl783xi3fmAHTSxe8ayn2pX+T
S2/PmJ8UkmD5ZP/f9Rjtb6qsXxbw730crhPz9W7xUfu6uuZ1on1YnQ5vW3ub
14n2+Mfvcqb52bxOtON+MPh/7XZjXd1p4NNkz5t4S9j/2u8b7R/m++z5dUSC
XP8Lo9090Cf76MQEi8eXdqu3zO/yH9asS+V11xL9pR/rS1kP224Gp127P8ES
++Vzretl/Rzv992YKrlwf+1/qjHfX7vMV5L1tYyP63wlWdPKeLrOV5I1r4x/
FO0/8Aa4fszjzJ2+U3eWN68f7XMOrbpxb5x5/Wiff+pIgZLn4o3rVx5Arv/V
l/Vp+fPnDMfuZDfn8cv6j7A4htaKnV7enMeWX9a/pcDcQRkKNeF5POiJeUT/
iN80zdP8cSTGHB+0+3WsurHYBXN80N6sf3e/ZTsTjP7Zh2B83kh8dX28JNOU
Eub4eEk81qxlfbC0vzk+PhK/ueY9ubR5hzk+X/7rdwo+BP1jff69e9J3E88n
GP2jveSJro9qeJj9o33xpTpXXs3j/v/jW1z3K8sEn4N9o0qo/cqysdNfpes0
M8fH58t6tvzTf9WjDYPN8WlK40Pr0/JD3z0lNmRS69OSf8HaHdbcan1a3PbN
Lx9bLIHXp+GdEKcbJV6Wr+3Srv05M06x33b6cfCVO6nNOJXrtxYN9a090juB
1nmSFfHrus6TrIh313WeZMX+4LrOzTh13U8Srb2fuX3yHsL7SaK1ZoGKS6vc
iKf9JNGarVnXwnkqmtf5WuLl4aLhex96mNeJeHm8td0u++l44zqbS7w8O1XT
72Jbtd48eb1hnWeXz0X/aK8l14n+0d5HvpfrfmV6PIxDfVn/T+V6MA6NJF5w
/RgH2R+s+L7oh9c5+uG4QD8cR7Q/W4rJeqD92dJZ1g/tz5bfZb3R/mz4SVpX
lu4Fh0w+nFKtK4t9QK9m/ULieV1ZfjrUPkfunWpdGf3jPG0u6xnxiPMU5wvi
F+fpOomXiRLvdN5Z28jn0nlnDZPrpPPO2k2+l+v5nmhtKvun6/meaMV+63q+
J1qxP+N6sM7dPnxTyHezeT1NZZ2PrlLj1q/VzfltKuv83oCBM7ddM/vBOsR5
hH4MnpTzC/2gHecdvlcDWbcF5dzB96ov6zZWzil8r+eybrfKuYZ+mEPQD3ML
+kE7OIf2PQs4gfY9C7gC30vWiQUcQjxmTSH7LfGYtYDsz8Rj1h9lP0c/mK/p
wpnox1vma4ZwKfppK/M1UzgW/WD8wZPoB+3gT/SDdvAqxYUFXE1xYQGHU1xY
wO3M82P2Lv88YJ5T8bwzuOrHl1eciudbfAx6Py1DnOJ5eHLm+S3ZHWn6lIlT
PO/2T789z6rFKZ7vOvpRm6n14hTPc/+Ir/0TZ7ba/9CpeP5w2tJVb2aMUzx/
7I8bOR6Xi1M8j/6Z5xu4fbKMCnUqng8PbVm23nan4vmR+zbnzDLOqXg+W+ao
DnlyxSmej/Hv0bJLljjF83t632m0MU2c4nn87sA8n6F0ZpvleKzi+cRSqz4e
LeVUPH+tVNHSFVY5Fc+HlngbV+u6U/H8C49JN3/xdiqez1LK7eTqq7GK543f
NYjnMT7M8xEynszzDWX8mefxew3zfIqmfrX7HnMqnm88KHLG6SJOxfOLlmS9
nGNRrOJ54/cX4vm1td+06xbnVDxfa+alLTEPnYrnwy+vfNLjtVPxPOaReX5X
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
FaZ4vtOSB9/7rA9VPN/C/0mHC11CFM/juWvm+fRFPg+efciueH5kz22XzpUN
UzwfvtmnqNtW7v8/z3UTzyesLrDj9NVIxfPFN9+MOfnvODDP9/KbnvPEgwjF
8xgf5edX7KrsOTlS8fzYVYlP/a0Riue7ri27v1rKCMXzeL6deb6l25l+I0uF
K553/7Vmt+9XhyueDyt0rN3rdIq7rI0lfpnn00q8M89flf2BuMuIU+b5Bq2L
Pf50PkTxfM98U/w9fw7TPB8fNmPiPbvi+WYfiq3OE2dXPP+sqXv8RO8wxfNr
VnxTOfKQWm+evN6wzmfI5zLP95brZJ5vJN/Ldb8y3xdgnl8l18M8/0Sun3m+
sXxf5vkwWefM88MkLpjnU0scMc9HyHpgns8p64d5vrWsN9qfjfcgmOdDsvV8
MqJIuOb5uT8Pq/xJrSvL+yTvJ0/D1boy+mee7yHxyDxfTOKXeT5e4p15Hp/L
PD9QrpN5Pky+F/O8TfZP5vk0st8yz3vK/sw8P7Pr4Jiih0MUz8dWzbp2VvUw
xfOW9Id/TvC3K55/L+cR8/wNOb+Y57fIecc8/5ucO8zzc+WcYp6fJOca87xF
OIR5Pla4hXl+hnAO8zw4gXl+mnAF8/x74RDm+e6y3zLPj5P9mXke+znz/Gbh
TOb5AOFS5nlwLPO8t/Ak83xh4U/m+dfCq8zzF4SrmefdhcOZ5/sIt6vnbU5n
iGyVIVjxfF3b4N88swYrns9wN6BpqRzBiufxPg7z/MoOdzNE1g9RPJ9yaduD
j2OCFc8PufB3hxSTgxXPc/+Ir2qrxl+OzxGseP5s5h6zvXIFK573nt2k/r7c
wYrn0T/z/E/bWj5K9+/fM88P/zCkXalswYrnF7dZdLpxxmDF86taLNwfOihE
8fw3vuuS4iuHKJ4fvn1P45dvghXP4/0m5nlbhgeZEiYEK55/MW53tdqdgxXP
u98Z2vV3z2DF8wHFH/kf/DFY8fx5n10jW3cM1s/Pjx1Y7un4YMXzxvtTxPMY
H+XnZTyZ5zH+zPN4L4x5vqHPqJrea4IUzx/YcGzMjLw2xfMFnibtP74mUPG8
O97bIp53W1zvcfVrIYrnm7UcdHPiiBDF8799t2L/mVwhiucxj8zztyZnSxga
GKJ4PrFSJusD3xDF86nvpFnVr2SI4nm8L8Y832z2ZbeC228qno/NVjWVe94L
iudf1K2VwT3vEcXz//5Psf9734153q94q8fTWwQqnk94cG5FyjMXFM+/zX1t
fcoz3P///v2vf+b5SkUC3Kr9HKJ4vuyL6MChZUIUz3tceLrJ71Ow4nmMD/P8
rqG/tH5ePkTxfJEleUbet6v1aVm55/JvjtlqfRrvFTLPL+oafbnY9mDF8wPy
rdjlfyRY8XxDu/cSn394nSdZc0j8Ms8j3pnnb8n+QNxlxCnz/JOQ4T6PLgcq
nm83ePPe+2NtiudPpLBlSSh+W/F8vjfngkt3C1Q8X2Zv6jFO2wXF856RmSc7
bWq9efJ6M973l89lnm8r18k8/1i+l+t+lWjJKvHOPF9Vrod53kOun3k+r3xf
5vknss6Z550SF8zz2ySOmOexHpjnsX6Y57HeaH823j9lnj/6d7Fps73VurJ0
P3qzedW+al1Z0uzyzRM7Ra0ro3/m+RISj8zzZSR+mecrSrwzz+Nzmee7yXUy
zx+R78U8/63sn8zz2G+Z5wNlf2aez5+wsd2R84GK5w8s+HxmwmCb4vnGFbuX
qpPjtuL5fHIeMc/vk/OLeR7nneJ5OXeY53FOMc9/XvTlXGOeB4cwz4NbmOfB
OczzJ4QTmOf/Ea5gnr8hHMI8/4fst8zzhWV/Zp7fKfs58zw4k3keXMo8D45l
nvcRnmSePyf8yTxfQ3iVeT6TcDXzfD3hcPW8jXA783xiQMOmg1tfVTy/KXjp
t5XrBiie3zl0SOzEXIGK5/EeNPN8nkZjxl9uHaR4/t6UtlknnrQpnj/mX9Wv
bAmb4nnuH/E1dsM3ZyvkuqV43vdEtxXZLbcUz08L8f/lbb9biufRP/N89Y9L
PSNPXFc8v2hF2t1Xn19VPO8sPz3f8TJXFM+3nxMwotTSIMXzfVJ8m6pm9SDF
8yMmef7uHWVTPI/3ypnnnQ+71K744Zbi+e9mDS7cJPstxfN1801K1b2MOi+s
rRZuvjjozi3F8/mKV/J5/6NN8XzCqTNB85baFM8b760Tz8fK+DDPL5TxZJ6v
JuPPPB8j75Uzzzf4I2PBUfdvKp73bfLiZNkj1xXPH3pr73hn2hXF8w/xHj3x
/F9Lfz1z9kiQ4vlHXSIdL1sGKZ6vXqZUqtIPeB4PemIemeeHr82f1OlokOL5
maNfdizdOkjx/Eqf6/5vEm2K55FnAONjkXiMzJzF177b5CvE4+jmbTfv2hlg
jM9LicdKvguab026wvxjjA/6ryPfl/uXc8TC/Uu8W7j/hnL9PP7g+QFHnwZ3
WxukeL505dDEspYgxfMPdp1O8c5pUzyP8WGeLzQx6/TXs4IUz//hn7N+52xB
iuczv8mf6uxGm+J55HNgnn+W7s90MwNsiucrnnnr//iITfH80JEtBnTaYFM8
j/hlnke8M8/Hyv7API84ZZ6/+NuWC2Efriie3+w7a7n7ngDF83WqHKrktzdQ
+fPa0s68vUn6Yd7G5zJv83oD3w6W8WG+rSDjyXz7VMaf+ZbHQc59awVZn8Rp
1hGynonTrOGy/pmTfz29Z2CRzjbFyWsb/ZCl4Hz2DEmWbQHnDuc9ZlOcjOtk
Tk6Uda44WeJCPcciccScvF0+lzl5nVwnc/Iy+V7Mt8mMmyWZcbNg3Ji3sb8x
b8+Q/ZB5e4jsn8y3VWUfZr59IPs28+1m2eeZt3FeMG/jfFG8LecR8+1dOTeZ
b/PLOct821rOZebtYcIJzNu9hSuYt38WDmFOxj7GnIx9jzm5oOyTzMngN+Zk
8B5zMviQOXm6cBpz8iThOubk8cKBzMm7hVeZk/8UvmVOfiw8HOl6nlJ+znQG
P1+69eHJrr5mHshXEnc7v6vf2H+G2Y44Xdx67rp/NiZwPiKVdxTn75it0Vtz
RpjtOK8nHnv6c5d3Zns9WedTr6ZMtyXXXcqD5OfJ+UvF11lOjZmz77OH2S5+
z/Iq09s/c+U228UHWspvG7iqYjqzXfhf5UHF+eus425r+5/vhXXe1eKTq9cU
sx1xEWaZ02VYXTOvKcY5xY/ZtkfOMvOgYpxDOofc7rnVbMc475qyJuXd83ct
KeR8x/Ujn0nE/3d+3xn888axp/LZc2Y7xn9o4Y9V3LeY7Rj/O92bfz9gOudx
9fPkPK4Yf+vvK90XlzPbMf7FFix/0fWtOQ64/jlTl9oq/JNgfC+MG/KE4O8x
L5wnFvOyY9GcEWfHme2YlwFbp1ee3t1sR/8epyY9q9cEeUKMfcnI14H9BfN1
aliFf4b3NPPEYr52x2bZnquR2Y5+1v30bP6ZUvGWkq7+2cingb/HfHEeWsxX
v3QJ73/4xmzHfNX1eTcv4wczny3mK8+yjLkcL+5Y7F++L/ZtIz+tm8s/My8H
WjCP6AftmEcLfS6+F64zLJn5wt+jnb8v5hHjhnbMI48z5tGYly/rpy7mC3kn
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
41evWFawldluPKe6e3uDPkPvct5C66QC73tcWJ28t6d8hoYnT87/43ON+6NP
ad98HGT2b7w3N6yze/eVZjv+fui+nTkOjTU/l/P/oJ3z/6Cd8/8E034I3452
zOPMTHV++PSX2Y75GjW1UL6/5scb+cHYz6Mdf++1y2f3wgfxnDfMyM+D8wLX
c//5d/Xepb9rtKP/MzlChk4pY7bz7yaIa/Rza/d3ETmWJRjt/HsK4pp/T3HN
j+rn+W7xUfu6uub8Yl+q4lHqxuHKZjv2t1/OrD53vehdyqfq5zmsToe3rb3N
dvSzPeTKw4GedynPqp9n/ON3OdP8nPzvOFF0nsL/u9FzEcgrldzvRGjH3zfs
U+Nsm3fm/oO/nz6p/4Mn2czrwd/Hj+h95Wy0kc9E5Y9CO+ePQjvnj/Kg87cY
rRPDCz0e+7FKVbMd+/ym1CNPv8hrzjv/LoN2472Y1v3n//XY3Of59xrKG2md
udN36s7ydzlvpHXOoVU37o1LoHyPd6w93uzqcmpYAueTtM4/daRAyXPxKq9p
b7cru94fN9sR17UbRv5444B5jnw935T/qa/nm0L+Us435X+K801h/eAcT9M8
zR9HYsy4wLzMaF434txmsx3j/LH5hMKBvc1zAf34day6sdgFsx39FO80+E6l
ueZ6w98369/db9lOc37590e043vdLh+d2fbNXcWfXkPKZ/W4k6DyyuL3SrTj
7/dPzPwwrrE5X/w7phs9n4P8ZvheaO86ctP9T5XM74XxmTl1+Z7ubc12/H29
lUuGFPZM4PzVxu+kRnxRnjS0c540tHOeNPAY9s9iMv7IN4h98pPMI9rx9zNl
3rHPY//MI3GEfR7tGyUeXesLvLTGUvxiH/t796TvJp7/zz4g+0mJLeOfei01
27GfzFs5+ma+zglUp8PPs+SJro9qeJjtRl6afR2vp30eT/U7/DwXX6pz5dW8
eK4zYuR5ozojxu/OaMff5+hZv0Dqi/Fcf8T4PRrt6CfXhJJ5X3Qx29FPnWru
iwr1NeP36/nc/E99PZ+b/6mv53O7bzx/gvOR8voav/+iHesK5y/a0Q/Oa8pH
au39zO2T9xCTHxC/teV7oR3xmFPGgfKXWmsWqLi0yg2zHf24yzhTXlNrtmZd
C+epaK4TxFF2aXet35FoqSX9G+sEz2UJt2Be8Pd95HsZ8yt/P1q4CO0Yt1nC
UZiXr+fN+3d+v5o3z//U1/Pm+Z/ivHkYT37OAePGzzmgHX+/UOIC48nPP6Ad
/SDu0I5+EKe4r8Q+UF/2N7QbnCn7IfYl/H032T/Rzs9LYF/iPIGu9UrMuEY7
4ujQzLK1ii4z243nxi2597RYbY4P7ydoRz8txnp171PBHAfex9A/5xtEP/y8
B9rx9x+f373p2f4/cSqfi+dA0I5+RpTOO6PNQ7PdyMt0/+q0Txnvcj5ba1M5
Z9GOeQfXoR3zPkM4kPLfWnG+u+azvWMFT6Kdnz+hfLlW8ManZPIiYjwRR+Ao
Y37xPIncp7vmf35pwX09xtnwFcJvxvxKP/ADGE/8PTiwKXkJ3M+65h9+acF9
OtoRv7ivx/jwcy9ox9/DD2B8+HmY5J7/QT9o95P7DvSDeRkk9y9oN7y03O+4
5nk271OMcZD1iftWtBt5jeQ+1zUvtHl/hHbjdxO5X07uuSPXPNLm/dqnZJ47
Si6fJPpH+2TxA+gHnwvPgHb8PbwE+sc6gU9A/2iHlzC+r6wfeBL0j7+HDzG+
l/w9PAzasX7gbdh3FWhWrvTv1Z3Kd/3otd/9/JFY5bt6De4x9OGmWOW72rnk
wTN9l2t+NtN3IZ8b+66YkHrua/2dync1+fykVMA9p/Jd3p9ivyv53ql8F/Io
su9CHkX2XcijyL4rusmSvCE7nMp3NYmdV63BNafyXXjuhX2X97AKuXslOpXv
4ufQsO/tnziz1f6HTuW7fu6wZXG9FHHKd32o9vdVW4445bsOpy1d9WbGOOW7
OiU0Gd6jSJzyXcf+uJHjcbnkn39j34XnzZJ7jo5917AzvT9tKxqnfFfA0Ad/
fl8hTvmu2gPvvryfN075LuSdY9+FPHXsu5Cvkn0Xnu9i33U867J/LFNile9y
VqlXcODAWOW78PwY+64CIY/mLb4Uq3wX8kmy7wos6Z5t3g6n8l1BHqmTYk84
le/C84fsu56UXJCQtaZT+S48l8i+C88lsu/KljmqQ55cccp31R31a8qIb+OU
7xoS1mD3updO5bti/Hu07JIlTvmuTAXd3xX45FS+a0/vO402polL9nlI9l14
HpJ9F/IfJve8Jfsu75a7Umy/7FS+68Hvvi1K2ZzKd73v0X3Pkz1O5buQ75R9
F/Kdsu9CvlP2Xe1pnWA/7xa55eyYvE7lu/pYdi3+MYtT+S6sT/Zd73I2/lDy
VqzyXYgL9l0pmvrV7nvMqXxX40GRM04XcSrfNazHkUFNCziV71q0JOvlHIti
le86MvP+/k1zY5Xvih5/bnXZmbHKd7nmRzV9l2t+VNN3ueYpNX2XkdeUfNeu
dBGHS1idyndtfFqh8cqpTuW7lofOCE1b16l8V+d8S3sM3epUvqtVyrhnMX2c
yndlKN8g4//lXWTfhed42XetqTFl3F8bncp3pavie7nTIqfyXXjul31X2lYL
/5r3rVP5LjwPzL4L+XjZd3k1t7TKkdepfFfqcRt/eVjHqXxXxvDtNfZXdSrf
heeN2Xchry/7LuRrZd+FvL7su1rK+LPv+l3mkX0X5p1913uJI/ZdfSUe2Xd1
p/jFPjah3Pg8WSc4le+a/7bz+NC2TuW7Vv9jCd1Qyal813ivea9rP49Vvmte
zsHtvr0Rq3zXuAGrggYNilW+C89Rs+/C89vsu4Y9Gnut3t5Y5bvw/Db7rm6W
P5v5eccq31XN62qPAq1ile9yzT9s+i6O66/nHzZ9F85H9l14jpp9l03OX/Zd
N+S8Zt+Vsd2zcb+1jVW+C9+LfRfGgX1Xk7frnUcPxirfNVzGmX3XjLVePhFZ
ncp3TZN29l2NpH/2XfmFW9h3ZZDvxb4LXMS+CxzFviuQ9u2v53k2fRffR3Ce
Z/ZdWG/su/C+APuu+RIX7Luw/tl3rZG4Y9+1QOKUfVdm2d/Yd6WR/ZB9l7fs
n+y78N4B+y7ktWbfNVbimn2XzyjrA8ewWOW7ik9JSPHz6Fjlu7CfsO9q2W5f
pkOvY5Xvmij7GPsu5Mdm34X3Jth3He1rDxqZ2al8F96nYN/l8NwSc/NXp/Jd
w+v/tSTvVqfyXThn2XclCdex70oUDmTfhfOdfRd4kn0X+JN9107hDfZd4Fj2
XQuEo9h39ZT7dPZdP8h9PfuuRsJv7Lvyix9g3+UmHMi+C/ez7Lu85D6dfVdj
ua9n34X7aPZd0eIH2HfhvZLk3qNh35VZ7jvYd+H+hX0X7nfYd+E+hX0X7lvZ
d+E+l32XQ+6P2HcNl/vl5N7fYd+F+zX2XXh/J7n85+y7OoofYN8Fz8C+q514
CfZdR8UnsO86KF6CfZeXeBL2XfvEh7Dvgodh3wVvw76rWTpb3OrzUcp3HS69
Jd2qlZHKd4WleLH59+8ile9yzdts+i7XvM2m70L+YfZdT3r+HhmX0qF81/Gy
s54dz+9QvutpilR5J5ZwKN+FvN/su5D3m30X8n6z7xpaaXfnDykdynf5Xz70
5EF+h/JdeH+EfdewwLyrfyvhUL6L3+cy7it7npxpr+5QvutdkSWDVtV1KN/1
zNnjp/ZeDuW7/AcULT/d4lC+a3/pV+51mzmU7xo2fH5IqabJv0fGvgvv6ST3
Phr7rqUlbi0+95/+cf2tBvdtuauJQ/muGtuHOobWdijfhTzJ7LuQX519F/Iw
s+/C+1/su37vbs87tHOk8l3+Ncoc+iU4QvkuvC/GvivdmLqpG3tHKd+F/Ofs
u6KPHZm5oU2M8l3efQ7dLtgnRvkuvMfHvuvorJnv8/8QrXwX3u9j34X3+9h3
BUZ7Xrc3cyjfVbT/sOJ56zuU7xr9ZPOkTjUdyneN6xFecE4dh/JdV+5lHHex
ukP5rkLOcSOqVE3+vUL2XXgfjX0X8vYn994i+67it241rpDPoXzXhKue9dbk
cijfNb3MTf+/UzmU70J+fvZdyM/Pvgv5+dl3daB1gv187d4fayy7Eq18V/TO
/DlS2KKV74qT9cm+y2O1zfu4PUr5rqESF+y7ou+lOLP2SbTyXUNii076o3aU
8l1rK25Lm7dClPJdH+0Nai5bGKF8V9lSly66T4pQvqvjWK+fVg2OUL7LNb+9
6btc8/mbvss1r77pu5DPn33XzdB+zc8VdCjfFduzf/2tR2OU7yrmnuLh+Yox
yneVq9znTLs0DuW71rr38rg2N0b5ruw5zvewxcQo35VR3odl3xW5e+Xgbdei
le/aVXTnkvLHopXvuirvz7LvWv2i1rHi6aOU75on79Wy70L9CPZdRc5H7+mU
Lkb5rlXnLfd69oxRvivCWvTirYExynfhvV32XahDwb4LdSjYd6EOBfuudTL+
7LuKyzyy73LIvLPvQhyx74qSeGTfxfGLfcx31an9h7dEK9+1sEPsxlS+0cp3
rc2demmbn6KV7xo4sIV916tI5bsmlB51+X1ApPJdHWo6UvzZNEL5LtTRYN+F
96DZd3VZ61724pFI5bvwHjT7rpq7p/cZWilC+a6M3T6FPrBEKN/lWi/D9F0c
11+vl2H6rsNyPrLvwvvI7LuayfnLvssu5zX7rqgsvt79W0Yo35VBvhf7rh9l
HNh3VfBZtqH+hUjluzDO7LumLtj+rECtaOW7Jks7+67y0j/7rrTCLey78L3Y
d4GL2HctF45i38X79tfrkpi+qz7dR3BdEvZdWG/su/DePfuuiRIX7LvwPj77
rvUSd+y7Fkmcsu/C/sa+a43sh+y7sH+y78L7++y7UIeFfVd7iWv2XaUfdhlT
qEOE8l1J6+331vaPUL4L+wn7rlr5rjUv9W2U9l2yj7HvQj0X9l3IP8C+q3b7
ahsKlI5Svgt5Cdh3Tb7tkXLnxWjlu/Z2c3cUjYhWvstdzln2XTOE69h3TRQO
ZN+F8519F3iSfRf4k33XDeEN9l2oO8O+64NwFPuuULlPZ991UO7r2XeB39h3
NRU/wL4LHMi+C/ez7Lsey306+66jcl/Pvgv30ey7HokfYN+F/AzJ5aNg33VV
7jvYd+H+hX0X7nfYdxWU+xT2XdXlvpV9V0u5z2Xfhfsj9l24X04uDwb7rpty
v8a+C3kwkqvXw74LfoB911PxDOy74CXYdw0Xn8C+67h4CfZd8CTsu1KKD2Hf
BQ/Dvgvehn1XibVVIhZcCVO+a/e9qydj9oUp39Vm78N7vZeEKt9VxaXOiOm7
XOtfmL4LdUbYd4XGVa9+5a5d+S7veQFTf39pV75rbo3m1et8sivfhTo17LtQ
x4F9F+rUsO+6F7M4/afHduW7hkzzLfUpZbjyXch/wr5rVdU/04/6Nlz5Ls6L
gn3vWeGBjT/lDFe+q1mnp6dsp8OV79q8fFzV7X0ilO/Kf/vXUqPyhCvfNTpT
7o1NzoYr39Vkrn/6e/nCle9CPhb2Xch/klxeF/Zd7St9jP55b4TyXWV3rvd6
ky5C+a5jy5OyV2kdoXwX6gGx70I9IPZdqAfEvgt5VNh3vb4Qs/x1arvyXesW
pvh7Ynyo8l3Iu8K+60S7Lgv9x9mV70K9HvZd00v79uj27/ph33Uq7F3OtEl2
5buQD4d9VwOP3950ibUr34U8Oey7kCeHfdeso11GHW0TqXxXWK6P81rERyrf
VW7C+g0J46KU74rL09lv2asI5btq+CadLj0vUvmuBpM7Rg1eFaF8F/LzsO9C
fh72XagzlVz+H/ZdXoFtnOvLRCnf9bNtf4rYmpHKd+W82D/raa9I5btQT4p9
F+pJse9CPSn2XRG0Toz3RPI1ih59Klz5rvK5gvq9GBqufBfy7bDvsi68nHDQ
O1z5LuThYd+10WfN+2pxYcp3Xe/RNm0Wv1Dlu5aP21hw75ZQ5bvejcqc897g
EOW7zi7oWG5u/xDlu+Zu3lrfo1eI8l2u9adM3+Vaf8r0Xa71p0zfhfpT7Lvq
3Hh5rlPeaOW7rp1qf8J3Z5TyXR12nTiwrmaU8l3p/kn3bMJ/2tHPyoOD7625
Gql8V/DxgoVWd4pUvquf5JVi3/Xcp0F4lhJ25bum1Nj8p9dgu/JdnSQPFfuu
hHFNP829E6p8VwvJT8W+C/XO2HcFrOs6oGamSOW7MmzNsvGH9RHKdx3euL7k
sZYRynch/xX7LtRNY9+Feljsu1A3jX3XChl/9l3tZR7Zd12VeWffhThi34V4
ZN81k+IX+1j6Ip8Hzz5kV77rqvtR357n7cp3LUg7ZEHtILvyXSN7brt0rmyY
8l1V2nUN2VArTPmu8M0+Rd22hijfhbpv7LuQT4x9V5kqV25EtApTvgt5xth3
BU05nrf28RDtuwYM/WbDmRDlu1zru5m+6zDF9dfru5m+C+cj+y7k9WLfdVrO
X/Zd0+S8Zt/VoHWxx5/OhyjflV6+F/uuWzIO7Lt65pvi7/lzmPJdpWScle+K
D5sx8Z5d+a4Z0s6+q7f0z77rtHAL+65G8r3Yd20QLmLf9VY4in2XB+3bX6+j
Z/ouvo/gOnrsu5C/jn0X8tex76ooccG+C3nt2HfNkbhj33VR4pR91xHZ39h3
pZf9kH0X9k/2XciDx74LdQPZd4VJXLPv+m5hyow9d4Qo3+U1+tirv/eGKN81
TPYT9l1+Xp0PFKscpnxXatnH2Heh/iD7LuTxY9/V3uvgrWZPQpXvQn4/9l1H
Cv+8eNcIu/JdZWu8PT+8jF35Lpucs+y7sgnXse9qIxzIviuNnO/su5oIT7Lv
Ql5B9l2ewhvsu1AnkX3Xe+Eo9l0/yX06+y7c17PvuiH8xr6rpPgB9l1bhAPZ
dyE/IfuueXKfzr4L9/Xsu5DPkH0X/AD7LuQ5TC6vI/uu7+W+g31Xabl/Yd8V
LPc77Lsscp/CvuuI3Ley78J9LvuuWLk/Yt+F++Xk8kmy75oh92vsu3A/nlx9
SfZdY8UPsO/aIp6BfVdz8RLsu7zFJ7DvKixegn3XGvEk7Lteiw9h3zVcPAz7
rgfibdh31Rxb+eX940HKd1Xa+GTPPHuQ8l3bLo2pWKSmTfmuki518Uzftd6l
Xpvpu1AXj31Xh/6PRlX5Llj5rlrf3czgnitY+a5ik1qUKZgzWPku1BFj34W6
Y+y7UKeMfdeRzrODQzMHK9/16t2nG92yBSvfhTyi7LumDU9YeD57sPJdnF8U
+161VeMvx/+n3XifMex5dI2Jwcp3jcs95NX86GDlu85m7jHbK1ew8l2xLcLX
rvMNVr7Le3aT+vtyByvfhbym7LtQXzK5/Kjsu1LNfvvzg7QhyncNPdn344e/
gpXvGnYg3Za3N4KV70L9SvZdqF/Jvgv1K9l3IW8n+66Uc/p4nUpzW/mu8Xsf
XGs7wKZ8F/KCsu+KbpCvfOuct5XvQn5R9l0fWzz23VArWPmu+OND1vjVDFa+
C3ll2XdFOMu2bdIpWPku5JtV+bsk3yz7rlUtFu4PHRSifNdJ/5F5tywMUb4r
uminWYN3hSjf9Y3vuqT4yiHKd5WMn9l3f+sQ5buGb9/T+OWbYOW7kO+UfRfy
3LLvQl3U5PLosu/KW9fz0sGxIcp39U7Zz+91/hDlu6q9qL6pQtEQ5btQ/5R9
F+qfsu9CXUj2XbxOjDq/Hvej068LVr6r5ug5FS+PCla+C+uTfVfcgCofxiwO
Vr4LccG+q4HPqJrea4KU79q/4diYGXltyncVKtV63KLt15Xvyv80af/xNYHK
d729an/0fvsV5buOHTk5YUbec8p3ZXepH2r6LptLvVTTdxV1qVtq+i4L6pyS
77o1OVvC0MAQ5buedUt6vH97iPJdWeveefN8SojyXYmVMlkf+IYo35Uh2+tL
5X4KUb4r9Z00q/qVDFG+q5nkZ2bf5T0iq1eOdzeV79peYXezOSUCle+KlXzO
7LvufJrYPMPgC8p3vZA8z+y7UJ+Xfde2upOKlEsZonzX5mxLnvUNCVa+K3+P
svWL7Q1Wvgt5pNl3oR4r+y7Ub2XfhXqv7LvSy/iz78oi88i+66nMO/suxBH7
LsQj+y6OX+xjfsVbPZ7eIlD5rgk5iiQc/ylQ+S6v1M+jnnUIVL4r4cG5FSnP
XFC+a971PrNHXr6gfNfb3NfWpzxzRPku1Clm34W83Oy7Bp0vfr9TjwDlu5Cv
m31X95l/Hbw/9pzyXRtXnffo9c1V5buautQjNn1XcYrrr9cjNn1XpJyP7LuQ
H5t9F85f9l04r9l3PQ4Z7vPocqDyXevke7Hv6iTjwL6r7eDNe++PtSnf1U/G
mX3X8RS2LAnFbyvfdVLa2Xe1k/7Zd8UIt7DveiLfi33XBOEi9l2phKPYd31H
+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
apz4DfZXDcSrsL9aKR7m/wE4CiLu
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlNtKllEQhj9b/t9XmIaaVmcVRAVRdBZFRNAVdAldQF1AGwgjqMADK7Xc
pLlJS383mZoabiLbmFFGBmoR2cbsIC2QssCel5mDYZ5//lnzrbXmXbPl2Imj
x1dFUXQaC1gXlmAt2HdsHfYDq0hFUT8+HUdROZyGG+EebA5uInbdc7qIXYPv
w+1wSKzWbWINWLbqB6u5WrXhq3AVXE5+Bb4SK4X7sG9wM/9XwC/h2pT5LOwX
NkF8BH9DcXgYrobvYD/hGWK34Fn4N7yAX8Sm4RriY/BbuBp7Bd8kNgDP+56f
4p9hb3Re9lqg38HWKv6c+D/fZ5PHtGaMWBu/8+BB8tvhKCOKNnMfHXAMb08s
94nWkJ/KsDvvJr+FnD9wLjmHsFz+mwy2/1ysD172++8MVk/rtyV2dp0xG+7n
vxy4A99KfBnOJ/7ez6v7rMem4c/EmshbozvEf+D3hN/Jit+JenEWLlOPsHvq
Kd/dT83DWB7cTewInA/3wLude+Fx6uaz7hF+nDpDcBXxsmDaq4SLnBUbwgrh
F/hdXl81H0empXeRnVvnX4jtLDPE5uFm17D+V57iX2JjrU1Ts87PPkd8p9+z
9q8eJfAi8VbyPpHzB04T/wuvT6ynGeTshe/6PRyEu+AN0ibrhoPlbCX+0L+r
vaum+jgQTJ+qnyTWd/WoMLF+6VsbE/uutDRCfqPrOUV8MLJ+ScelxFvxJ9Uf
f6en9B79Xdcqh/W9+Dbp33st/ZSaPKN2vaVgmnxNzpLrTbqT/vWmchLTyRT8
lZzOlPV0NJgulV8f7L1/hDMT27N4ifxJf79t2BXNDvnY1quOdC6dZLGhA6yd
gjdFph+9qRV4T2I60dy47HNJ9c7AF1yfJSnTv95RQWL7VE93wOeCnVfnvqT1
qpOy2aX7aY6tp2tJ2kf+aGz905zRPWtG1hF74BqWbnUWzdGLwe45Ey4ONhv7
1HPNKp9XmlGDPq+kf+lQ9zlL7Lz3TPup8TdY73NSs7HE56TurRgu8v3rvGWu
gYbY+qixU4L/D4s23Vs=
            "]], 
           Polygon[CompressedData["
1:eJxFl4d2l0UQxTd8ZD8IChEERGyIKGKXYu8+gY/gA+gD2KUrCAiohB5IQomQ
QOihiQGUaglFUUCFWFBRATt6f8z1eE7uyex+s7uzszN35j/gyaefeKpTSqlL
RUqd9X95Tqk1hfxGkdIcoavkzcJqfZug8atCg+RFOeZWCbOty3yddOuFJZKX
ocf+wszKlFZqvEnyRqFZ8lSt0b/0kTBfwkKNL5F8WJin8cQizuSsxcJGoUXf
Vgmbcqxh7cfCQslbsEnyGmFbDh10mePbpCLuxh13aNyo8cXoCts1fkfYKrwr
tAnv57AVm3fnWNNq+/nGmZzdzp29lnO2eY+PhJ369h42Sp4m1OALYbrkt4X1
ktcJSyUvkD1VkvcJn+TwIb5sEBrt6xZhVhE+Xyf5VIo1rF3qNY3eG3+v8Dre
irfT34U3avDcZt8P3aJMqZOwSkqrhfOa+5sH0lyF0Fk4kcJndZWhy3xLEWuQ
0V1ZxNxSYYlwVnuc8z7H9a97Ch2+LRbO5ND5J8eZFbZjchFvht935vAhvmzX
/wPGXo332L/Nfq9WxzI+xJfooHtKOCb5qPCN5L+EP31Hzu0QPk8R84t0blOO
t+GN8OP3wmeSl+nbcuEHzyE3EcvKo2b55SfN/SyczjGH/Au2S+dS3jrF+JBw
UJin+flFvBtvTc4s832a/IYrHVfE9kUp/NZchC/x6Y8+k7N3aH5nEWdw1pIU
tnD/73LY/aPBWnxyyjayB2uxFR997TWnrM/aJp/Nnuy9WKisCL1v7RP0PhfO
6NtZfJ4j5usdf+TCJGEuuS5MkdzD8XVS6Cn5IqGr9q0Supcxx7cO4VLJDbKh
XpiltbONg/ZPg+OK8SHhV8m12Twj1OVYWyfMzLHHWr1dP7hEuFX7v+n3qHe+
HievJbcJX/k+5PIbOXRX+j3+EgZq/fXC35LPC4PLmOMbc3yD4w7bvrmSq8rg
Yu7M3ddqv2rzc5Xt4awZ8IjwsOZ66Fu18Kjkh4TuFTHHtxrrztA+NcIBoVcK
HXTvE7pxlnC/5KHkneRCGFHG2rdAEXtMxX+Rxmmkxv0lnMO3wlU+b5H5Clvx
+SHz+e/EsesJOfZHDpu6ON5Z+4fzj/z8Ly+POb459DbhH2TZd3sZZ3L2b8KA
MjiXHFlsbiEWj6TIWWKSN+PtthNjOfIYLiPmiD1ioZvk/SliYqTwsjBKGJ0j
RolVfIAvXiduzOeTkSvDN9QoahWcXCuszcHVtc7zNTnmWskTbBM2EEv2BzFG
rFGDuNMSc+lEyROcN5z3PrlTGRwCl8DZPTT3XQou35yjBlKTttov5AY5ccZ3
WwEXp7jjaznOmOy4Hku88ZbCePsAPer2tCJk1ubkuRy5TY2ZJrvGeA260+kd
7D9y/pUcQJ4jjMvx5kfNR7w9c9gw3roNth8OfFHjdzTumSJmid3J9s0Uv81L
QnOKO3LXVvcXxCyxiy/n2J5JvmtTijWsxWbec0aKu4zVuJPtZW273wDfH84R
48Q6Z7xdRP3fDTdyhsbXlf/zwg3CtWXE7RZ921qETCz3STFHzpF7e7TPXqGv
vvcR+gmXC1c7BwZ4r0FlnMHe1B1qIrURG7ClzfkPH7GemkptpZfZJbyXY+6C
bJ3z5ivO3qT1G4UrJF9pOy4Ttmnu3SL0mUNus26reYI1fc2HcGDvMvKfO3K3
fcLFmvtJ304L3STfJNSmqJnUo1VyZIvwIb4VHtT3B4SPJbcbl6XgQ76BavMh
/DbY98EHKyrjTHKNnKtxDaeWV0vvEuHTHPxyzjZ10VxZxr3wRdcy5pA3F2Fz
lesWd6FmUbt6E7NF3Jm7UyM2FNGTtDt26FU4G06Ci6rNz3A19u4pokeFE+CC
Rr9Df8cAsTDMHA5331XGnbk7e7DX3WVwPZw/3P4dItws3FIGp8L95BNcO9x7
3uW145wv5MAY9wdHzecdznN4gBpLraVvp8+kJ6U3Zc3oInKavThzQYo3xpa5
rhfwE7V8gdDoekMuMkednpNDd7p5qNa615RRG6gRxCdnjSoirznzBeH5HDxP
7V9PD+13433HFZHjE8yDvEEP9x29hPFF6Ew0V17puMb3nE0PC69S934Tchn9
CvWF3pmzqOnECGfSI9MzDHTePpfjtwq/WZ6xrctT1CRsftF3wPYGj+FC1jxn
/qcPhwfox5BbzDuDvP+z3oO192runjJyityip+pIwanLNL5T4zuE/drjgyLu
U+mY72qgzx35ts51bX2OevZFjjpG3T2RI0fYmzWsRYfax28Y1sIjcPpQxx09
GL0YMUKsfCadI/CTdHbbpr74tiJshXfYY5hjF06FR/cK+7ymj/sF9gLI5Di5
To9Kr0rPxTt9mKNXoGf4wBwFV+3PMQZtrtf7nMfUgvmu+7vMrbtdJ+ir6c1v
dN5Rt3el6In4DXDS5+1I0bMcs01rHaef+Az2prfgdyA9w3H7erbnkL+kDhbx
G2qnuR0OxYYhzv0Rznf8d49jARmfEhOPldFXHtSaQ0XwwAjrETuPlNFnovOf
LnwLB7PmTu9XuF973HrsdbgIjoFriInlOu9fcftidQ==
            "]], 
           Polygon[CompressedData["
1:eJwtlFlLVVEUx7fe7jlBGaWND9Hw0ERFBVFEI/XaSx+hD1AfoImSAo0ENfU6
aw5pep3SNMfU1MostRJSG9AmFYrm1Mh+i7Uefpf//a+199ln7XXWupOnT5yK
dM4dhyDU8xMd4dwR37mjcAwOQBReHbFnAeeewxnPuTD5aXhn0eegB78bhmAJ
+ZtZl4POhnHiw+SXBDS/Ah1i7Xn0BchG38NrQbdCGxSSO4j3Fn0X3Qi56By4
EdRYHrpA/kORnSmV2DyePYYuRgfRHrwn/g4+wCixQmK3YBI9hxdJTgDKeU4Z
/PJ0jyJykiANfRHvEsTCFl/f8Y7VbKuva37CHxi35z+Wd0K3Qa+cGS8k74yO
5TlpEIIG/JgIrflL/g9DmLxyqRc0kZ9BTi50onugGwaJZUEm5BMbcFqjAeiX
euF1WJ7E+9Hf4Qe8xiuGF+ghqLR7+YQ3YjWaRE/ZO/2GaakjsZt2Ftm7A68L
uqFE1uPNoGfhL5TiTTjV/zyt9xPos7tvd3pWqaX0ziFqcNjXPkyV9yOeYnVL
h4/WTwV21gmIInchLIJvxMqIxVPDOEggnoF3HW/U03g9/iPotX6uw6uFcuuh
5ewzgw6jV6JXQa3dQyZeJuuyYC3+GlgPEZy9ilgypJOXL/cNVz29Y7nrLOt1
eXf5LsY87c0Rex/p13Grr4+eD12suw+70Qt4Rl9AY3IPYXQztAS0n6fwvsBn
aGbfbb72Zr3113Z0ErmJ8JD4A/Jy0TvwnZ1/J3oX5OPnQU1A77TevrNC65sK
mwEbyd0Am8Bnj2qr2SzxCukR1ndCJWsa8NLxqtDV8q3jt8Jq8uekB4k1ePqs
EuubRnQM8WhYavvKvSxDT8ud2X2t8HU2DFhvv/F0flSzf5XMJctvQo/gf7U+
kZ54Zd+K9KLMn3ZP+zqB3GtQamdPtX0W+3qmGXu+3HnI6Wy4DFdkf0/rURPU
2SgzMgkvEZJtBqRYvaV32ok/hX6IJx7n6ewJWQ/VQKPNAenFOulHT+tTarNM
7nwv++2BfTa7bwf1/CVQJvPU7mC/fDMWlzl/EP4DisTyxg==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxNlElIllEUhu/f//99WmDQpFlaSmWYWbhoWDQtNCMqaQAbMaGywCEK1EAj
mrCCjKggimhRRBANtCkbtMGyUpu1tAEXLSSSEsyoRc/LPYsWh/t87z13OMP9
UgpLl5UMcM5VYWHsXtS5KSHncgPnnsKr4OvwM3g1fANewzgR34ER5/bAe7Fb
gedJ6HHosTHOHeE7E37L2kr4Ez4bsSXwE7QP2CE4wLcZ3gC3Mh9lTTr7DGds
QS9Ef4k+ijERK4DT7CydKX/5PEBvx38fXAfXw9Ph7VqLzy74G/zG7tMF9wb+
nh+jPt58+LLFqHivwn1Yre7P/G1sNFyIlsCeU7nDRMa2qN//T+DjnYyeiP4a
rkD/gl4Hj0HvItGdFnuE2BcxNwIejnWgT8MnnbXN6FsUO1otPB9uhA/D8+BH
8Hf2SsL/a9jXSPW6wvxibCR8E21wjL+/YsxDj1e94Lu6J1yKFofPUYtRsVTD
3egN8Ey4HO4PvM9ntK1wHvw37OuvOvSgnba76Z53sHS4GO2d5SSeuLKtf5Rj
5VM1XWv1TcDy4QPYHNWU+VdYKdyGtoAxBztmdVRuP8LD2DeNPWMZm/guQn/B
/AS+M9CTGBvRN6vH0C/CS//rw4PwAHLwPOrvFrHeU0/eDyQ4l8rQR7yXLPYm
5nND/k7H0WqwufDDqO9D5eUHWkfY98w6y0MV/DvwtVN/Vlptda5ys9Jqpxr1
h/25gzj/fdTHkhzxb2g8vI3xFz7JcDfjQ9ZuCnn/LJnz9VJcBegtzD+GF8Ln
Ap+fGr2hGH/Pcfj3MM4O+XPl18l3ovP9qbOU/zOBv4/e2k/4PjwLrrBalKtP
4KH2ltUnWq99MhmXW8+rP5U/5fGs9abuMDbk41S8+ofo7ag31lst9E6vwSss
D/pnDUHPhFMj/j+WgVaGz37rB70jvUfdrSPw/an+zw78/0f5qQ/8u9DanMDv
WQa32/9kBrwT3mu9pB5rsNir7b3qv1TMuNtq0Wo9rH0uoJ203laf7Aj5/JQw
nrL+0btWPlPQe8lbkfWq+q3E/JXXLMuV3ph0vZHzVl/l80TgaykfvaN/BCS3
1Q==
            "]], 
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1:eJwtlHtMj1EYx99fv/d1fmWYW1FkmDHFJpvL5ropzKVGNrlsZFKmInPJJWNy
y1Zmw/Cv69wvf7iTQpS7pAvFsJoRQmjj8+w5f3z2ft/vc97zPuec5zw9kzOn
ZQQ5jjMFPDhrHGemz3Hu83IOfR42wUZ4hLeI2Gb0STgBpyHJjq9CV0INrMZ7
hpeCXgj30PF4qehYGIyOgf5wjVij33G+wG30KLy9jLkJN6AQ5uOVEXvLmDqY
idcF74qnc09FL4MsOErsIcyz3zxCP4YiO/dW9DbYDm9glc21Fl0HDcxfD7vR
ccR+oXPQw9GFjPvOexNk4w3Bu4m3Br1W1o7OxwsOOE4ItIbLeKF4U4jHQwIY
/Dy8amJRruNEQyu8HXiVnsYDAd2rKLzreHHo8ZIzehdeW+KD+C7G1Vg03g1i
E9AToTt+N/gnayXWB32JeGf0JLzJRnOaA7NhLkQQu8qY11Dg0/zbBPRff4lv
wOvKPH2hH/zBy8F76Wm8BZbCdLxEGGBzysTLsLFou5556HD7v2T0AqNPyaHK
1oPUxS+8n0ZzknU3o9OM1lIJXgLeYnQP8omEga6ewXejex+G7gGRMAMvHZYY
zSnK1l+trdnnUmPodxDGPKHwEb2eWLmNZaNfoMOJRUADXj18svsje7EKvVLm
tHVzC+8Da3kPy23dfEYHsa8+cG09yNlfIZ6LfuXpemRdd9Bj8WJhHBxkTDB+
wNV7JzXcEf1E9hDtoTtBZ3iJVw4Vsv/Ennp6l1PQRXjFcAe+QiN8s/+vYMw6
9DCbv9yBDUZzGYO3E50PBUbvmNzRh57m8BSajJ5Bja0lOcNi9Gif3r08o3M8
wUvFK0GXQpncV9trJK97RmOJUldGazjUnqXsZRasgKH2Lsp8aeh0WAJbiP1m
r5shxNV1Sz9z0X5X+4z0ilJP6yne9pBjcNz2n1tw2+6trHGf0R5VZNezH33A
6LPY7o+cUa7RfvnYrlFykf5YLfVsa0lqTvroKTgDs/Ae4O1Bj0CPhIlwF6/F
r/UuebUn9w6u9ukk+80F9EU4JPVtz/ow+ojRp5x/O77pBb3hJ/P98Gs/l77v
4P0HoiTXDQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlElIVlEUx9/7fJ+9FmUEEQQRtaiIIMhKMmxQS0MwG4iIrJQwykiLBrJ0
EdVCKqJRiRYFkZqLFmaENpANGzMqmjalDdrgUJZaDtXvzz2Lw/l9/3fu/c49
95w7MbdgxfaI53nFWAw2FPW8VHxB4HmtcJXveYmh532Bb8DJcAb2Ee5Fy4Jb
4d9wDlwPf4NLWZ/BPrGxnpcGz4W/oj/g+30sm9g2/CL0b77TH2Jb0H8StwB9
Heva4OvoqeifLYd0OBP7BPdFXW6JxGcQ3wk/Qs/n+ybsFtyOlgffhjvg99hZ
eCraM3wSa6/it7I+BV6FX4O9RNtPzBnf5X8BvwS9Bp+Cfs53+0yCs9DnEZOL
9zlzSFEbQ5ePzrUR/hF1e+6Ff8Fv4VK4zndrlfeywNVnM3q37/Jpx+9BXwwf
Cdx+qtcGYv6xTwz/dVj5WE11F+Ms7xZ4LHwabobf4F9jRaFj1Xk9e67l9x2r
T4Pp+r4T/TG+C70bewXvQ/sDd8AX4QG4F74CF7PXMPJ5An9AL0OfDO/CmuDv
UVdbnTcTn401ox+z+mj/A/By6yX1jGr1Di5H89k7gh2Ce6Ju7fnQafp203TF
H4VPWJ+oV1dbD6gfsu2utwXuXKpJSehqrXMVwJv5lkZMUeDO24leiH7Kel69
12j904W/bP2sPLxYdy/1VlfVU3WVrnvUfWrWBtAaQtdXc9Dn42OIGc7aJvSZ
Vn/Vrd36QX36Gj2OmCixEWwp+kH0QiwdLsHfJWakxVyzHq7AP0cfEXG95Nt/
PVWd+I9KxRlr9kdp1k2PC92boFkZbXeh8+axzywsHj7Jt3ibd839PctT78B4
1c76cIL1ZIvN42ziE7WP9YlmUP1TDk+3WVMvTYP70XtUb/iFnTFg/xmhuw/1
quZCPVGH9hceRK+Bx1gOynPQ3rqdgYsZ0lzZeVWnhNCdRTlMCe1sxFfb2j58
hb1XmuUy+Li9jbn2dumtSLJeUv9cshlRD+zG5wfuLJWhm/0E9GT8Snu79Jbq
3atVb4UufiExOfgdgcu5VrF2p6pDv81jlc2m8qyG/wPklNoH
            "]], 
           Polygon[CompressedData["
1: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
k8u8h72cJdb+B4j2EoU=
            "]], 
           Polygon[CompressedData["
1:eJwtlHlMj3Ecx59fPU8ef5BjGBvGhs0YkzmaMyQrSo652tIccxWKiGRzbHJO
jnJsmKODTRM2KiTMVHPXX+6USuVIUeH12ffzx2u9en++v+/zvftExYRHe1mW
NR0ciHctayNshlKPZX0jTMXf4D/xNPwEVOO5ZDPxcJgFIRAMv6iVU5uBD4Uh
UEdWTDYM7wCZ+GeyTnhnyIAGsj9kmXgWjIUxMB6uU6ugFmBb1kSIICskC8V9
8Wz8KqTDJ8dkGXi5Y77XEZJhD+yDtzqfC/h5uCTj1u9PwnP0e5PxKZAPeWD7
WFZ7FuwuPptvl9AuDl+Br4QgmApVuj6LqT2AVnwdeRJsh6dkLv146O8Z/hx8
cF+yMhknbZKlP/wmv/1Cf8H8HwKBZDfIKh1TnwYbyOPgMd6GPhJlnfAJEKB9
VOrayjyb8cv4FRhH27G2WW+ZdyD+nvpR/DScgt7UiuAJlEBbHXsvvCe8o/0R
befnmn2ud8z6DMdHwggYrfsieyQ+Cvz1PMhe5eDXZH66Zn/J4hnPRtgN7bzM
PsTg0ZCNN9OuVefTiLfg66nFwj3X7JWja1uALyJfaJvzIOf6B+0L8Rb9nuzX
Q91r+d4L/CW80rE+o91zyNIzfJvsFuSCN+3/kfnT/2joS3aMdh/Ituqd+o5v
w5Ncs/eylt58awftd8IWstd69+Q3iXpm98J+WWtqDY65Z5/wA2QH4RDUkOV5
zH2cA3N1b1LIuuBdoRt8JbtDdh8KYJlm+R7zm/mwQO9tEVkd1MN6siayCrwa
qiCMLNQ1972R2mfNImVd8NvwCGqpndTxRzDP1bAGZkIYRNlmPvKGRLnm7lTr
fJbgS13zt0bHKWNO07vcoH2f0nNXrGONdc39bNJxpch+wHHoD/1ggPRD7aNj
xi9vl6zlYde0HwipWh+ED4ZduteWjzmbckYHaT9++gYE6T2SeyFr3h16yNmV
tSb7TW0tvk7mSttI27xH8g6uwmfAdNu8yXIe5uFn8TNwDmq1D3mrN0EClOn5
Wqv15fwmQc6Ubd64i5Cu90TeAEffMznbpa55e/4DMODhLg==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxNlEtIVVEUhk/Xw/XufORb0yw1065WVOZAs8DMCBMVMzVRyasOSstKCyoq
IzRIJWggPSihoBo0cFBBDQoq6AE1CAySKIogggYVEQQRfYu1Bg026zv//vdr
7bVPbmSgcU/A87yjtChajvO8CoTkoOctpY3Ck2j58CF4Av7oe14P3uVop/ge
Qy+GT8Pj8DL4KZ4uPK+JYb4j8CxcJGPwnMO7BD4Cn4Fn6BuBz8Mv4U7874hX
+J6wOadsfllrxjwviJdpq9Hj6F9BbEQvICbQauGigJ5F1r2IJ9k8WUSHnkL8
EfK8QvgEPIrnEXMOwoNwA7EZf5g4hp5O/I5/Af5OuBfPYvgAvN+4A/9zvLvQ
2uGHcCt9Eb7vwceJbej34dygrjVAfxbcDjfBlyy3kodPId13KKh7rmPsWfS5
cBr6N/o/0JLgaLTUgJ7rK9oNfE2erpvNnGvRk/DEBzVv0U73MAQPwXl2loPw
M1/vaBguQB+GR+Dr6A3MeYE4bnck9ZBvZ3+CPh/ehl7ldJyc+aTd+2H4GNxG
64az0coCus9qYqblIUL/A+bqh/vhFrkL2kan8wtvlpxbPmWNDFt3k9SDnVfq
WfpkH3Vot329uxZ4pdV8SlDnb2WeO5ZbuetfIT271EY93ipZn1YCT/laS4n0
J9BK0WPRU4PqKYIz7IwL0TLhHngRPM/8SU7HbmWeq8zXa2fZSfzD2luI6fTH
yZuEffzFtPL/7rEEjkf7jb8GTkN7DyfaO5D9SF5LndZkH63M8iD1+ZgYg6cQ
/Q3jYm2tWXiv1bCMkz3IO3gb0poW/SZxWmoMvdpquAPudvqm5J3Km15nua0M
aP1sIK6y+92B/srX9yX5lLx+tv1LPVfaWLmfGnuPu4k5Qa2Ncqc1L2/hJ+O+
2FuQ9yIeOW8fni6n+ZX8j/v6f5D85Fn976O/w+5I7kv+A9vx3PW1ruSMlbKW
vWWpW/n/1OOZJFY4vS/Jf6zlM8ppLUjdhJ3WtpzlFv6/7LM2oDmUelgDx1iN
SX4K4fVOPVIDckfyb5vj9P8jeW6WnFs9SB3mO8211PO0vf1rxH9x/oyp
            "]], 
           Polygon[CompressedData["
1:eJxNl3fYkGMUxl+v1+d9zFIZZX1FKVJECRWKCsVXNOmr7JDPKi2SlUqkQkr2
zC5b9h4XXWZaMjKzR7b717ld+eO+3vM8z3nWOee5z3krB5/SY2ieZVm5VpYV
+nZKWbaPOvYVegsbqN1Q354aq1WRZQeq3U/tvkJnyQ9qUh+NVat9stqvqf2q
cLnkqSnkV4QpKfruk9xb+lXS76F2ba3ZQ+2d1W6gdnNhJ2FnoYWwh9BVY12E
3STvL/SRfJjm3Ku1nhD6ST5GfYM0tqHQWvIh6putsdqsoXYbYWPJdYU6ws0a
u0U4TfIgjR0p/UYV0cfabfPQPV0Yxn3V96zGzlL7LLWHC2emWL+W10SfvjOE
4Sl0byzCdu2l30Ht19UekMUajN9je+yi9tIyy7qpr38eNsbWnHkj78Felwln
a2yMMFly3xS+QL+/9xxuP7AX8jD7gT72u1v4XXv9IXTVWBfhIOHgFHt2tdzN
drpJ2EfyvsLLkl8S3hXeK+I8lwrvS14oXCX5SqGpbNlMmCF5fB53fkfjzdV3
tOSt1TdJY9OFaZ7D3MeKsDU2P1ftS4QRkkf6vqOFUyWfJpyTQmeY/XF+ijgb
bftM89rI2Iw92gmnYCvt8VQRc5iLPy6U/Lb6BmWx/l5qzxImSL5YuDpFLBMr
7MFevIEDbDNs97ds2pPYFv6S/Jz0j5B+jdoj8KO+zYQdhWUav0vjvTR+oNq/
lbHfTGGx+pcYR2VxBsYesX2IEfxzrTBbuE64PsWZ9xTeKuIu+I4YJPbw4VTJ
3TV/G81fJ4WP8NUH6l8k3OB1PpS8vIh12ZszLCtijD5kdFbqzFtovL7wreRL
1ddNupur/aXaSbqlsJ6wvmOtl7mFmGsq7MA5hE7qe9TvjzfeR32VKd4GbwTu
YK1t1a7MY004okMe76u592GsobmridDY+3Q051TZP4dL3s/z4Ty4bzuhkTBX
e80rQgddfNo7xZn6mP/6WrehcH8Rcxr6zJyVPvbe3nfkDNgc23OH1Xeh7TVY
68oiuAsOY97WQss8bMC6Wwlbup95cCbc2SKP/nnm43Z53IV94T44sJnP0tp8
yFh94XjJxwlbpOCaVnBtHpyTC93hU6GQPEfr3yFsKnkz41hsma0Zu12ol0Ln
HzgtjzVYa6bGqrLoY2wb36XSNoBD2/q88N0u+CgP3+2aIo5Xc2kevhsoVAuP
a935ReQA+uY7NwxI8VZ4M3DLkWof4TkDLcObA9xXbRld1nxYeEgYCm8IP+jM
dbVePeFHyZ+W8aZrC5+VEfPEPm+Ct9HenAPXPC0MTpEr8VH9ingT2Bqb81au
KSIf1lH7E83/UNiJ2BY+KoMz4A76GOPN8fYaCN9L7pciLvv7bselyG8DhaMl
32k+Ip7hqr3VRwEAJ3LOaUVwBHFakSKvbZKCR8gF+Bhfk5PJzdOLmIPuusSC
cIzwvPpeKGJ/+pBfNOBPzsQYZzrKOrRPEs7nvNJ5soh7rM5tefglc0wRS2sL
JxC/whDhxP8g3SF5jOE7ahRqk6HWHaex8/KYQ04gNwzOggfxE7kBHXTPTpF7
yEGjeAtwhORG5J88fMqc430W7oOt8TG+ruLN5TGnu8/AWWqEU1PUC+Qfctjp
9v+sIu65ltE4j5hg7OMy4mCm9cjh5PI/y8g3zzjOOMsQxxBz0GX+5+ZrYnRF
GWcaK/lQn3WFY5pYRvcLxxdzaKPbWHY6JMWcuea5npIPS/GFY+HNXuYHeGDz
FPwCx9fT/N3hIffBPXAIuhubr+Aoarkn/K7PS2Hv+X6X41L0IfNWqQPomyhs
BReSsyVfIVwo+YI86lFqUPI2dQG1x8gUeZm6YkxaozPdc0dZZ4xjgZghdohR
YpWahPqCeoBahRqVWrWz+WqBzladRQxg369lw6+Eb8o1HML3J31/LuMNN7C/
J7pWo0b4zX7G1uSWHrY188kl5JQfvEal8wtj9DFGzk+y+6oyciM6P1ufvX8t
Y6zKfn2ziLNT81D7UMNRyxFj5ENy6B+e94twHbUB9YPrXfZY5RoTXfI3tecq
z/lP9zvJm5pPsckUasoibIStVphPqSkmF1EjkwvJiYvKwAfCkjLGlpszPyrX
vBW4k5wz0+vC0SvtA+a3dP5cKHmx0DSPmgy7L3HfXfYFtiH23yjCRpcIk4rI
Abybye771GdvmaK2IF9Rq3A3aqQv/xcHK83j3/kO7Mle2It6jlqUmretORlu
pnYgXxDj44UJjv0xjmVq47Ee5y0QgwvsI3y1Y4r/LGoacgE54YEiOL1Nijw+
xxwOl4/0W+DO3P0i73uD12St5o7/Vl6DteAd7A5nw2n8I8C1cC7/DuT3A+Af
9d1axLm5LzX4S37nvG3q9AtS1Dgt7H/qBt4YtUEr793GvHK7a5FW5pzWHltg
v423bfgH4V8Ezphom3EG9uZfh38C/g34f2lSEXek/iDGuftsvw9qZOpifISv
apyD+I+izn3ItQTnhRu4M3fHtvwjjDDPkBfIH+RH/k3JFdXO3zXmvHG2BVx8
VRE1I3VdY+9Fbf2g65ZrUrxdzjjbXFfjeCJO+H+hlqWm5d96aRF3ZQ5z+Weg
5qLW6pjin4M7cRf+ReAEuBWOhSvgQLiQHL9dRdgdrr/NdeGMIs7MWZt4bP88
an50/gVzkPB4
            "]], 
           Polygon[CompressedData["
1:eJwtlHlMznEcx38ej8fzrXQ8pUOFlEqlzLHpYJX7GkOuxegwRI6K0RibZMq9
GqLcx+YPGzb8Y+65N2aOcoQNmw2bMYZ5ffb9/PHa837en+/38/sen+8nrmjp
5HKX4zgToBPcdzvOPdhtHKeGwBN0Z4/jhKBfex3nDbTDc0jCCyD2At0Kpxh7
Ei5BEbGu5JgIG9BJjHuA/xC24a3B6423Hb0DsmAx3mXij+Cx2+ZNxuvCuDb0
S/1uBl46JII/sTDIQfckRzwkQBREQndiJcS6oU+Tczx6KPoK+ir8IF8EXh26
BQ5CKHOy8WIZ18PYvBF44/By0EOMzfGdueF4fh6b56fX7k/2+QrqiNVKDuKl
6IWwQNfym7G/ZL7m/YP+Cl/gm65J8jYytgH2QC1eMl4degukobfi1aNTYDA6
E0bI2ROrwdsIm/QOEvF2sa6d8JlvhOEZvYNq9G38p/AMjsMxyCM2ldgZtJex
oeho2QN88lrP57I18Q7ewzTmFMB0mEMshjEjNE8keiR6FGw29nxS8epddk/L
YRmsgCq8XsQy0OnG3ovccz9j70nuKwQvCy8Vr5H/DVKv6P54zegOaAc6Gluv
Ui+Z6DKpF4+tu2xZG0wxdu2zZY/EKtGVuoaV6FVwjpxn3XZ8oZwDsX383wtJ
ePl4J9BddA2BxAPRQRAMA/GC5MxkP8b+DsILxjvCvKPgj+cHARoL0u/LecSj
7zDmrt5NLgyT89az9el5ROPFGFvD4ca+xVhixS77LmROPgyXPeNFyT6kVrTG
mtD7jb2rAo2PRo/RPPK+Z6Bnwixjz9wDBgbovj9SCx+8tn/4tF5KtSbOs/7r
cAOK9cylTiQ+X9+trFVyF0rc2LcyFm8JlOtb7Ktv4DC6nVxvwS19B28S9NH+
IffvMjaWrH0rTeuuBe+QsTma9J2lEGslVxuU4S2S/qQ9SuqmAl2BjtM6qTK2
Dw3By4NcrdMe2n9k/XNhHqyDtbBe3530wb9e2wOkz0iP+odeSrxc30SlfusW
67kJ1Xir8RI89v1IrzmA12zsfi4y5oLb5pB1XpOerDUrtS1nXiI9xNi349Oe
J+/sP9oLnpw=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlO1Pj1EYx+/d/X73uu8UeuF5VPOwoRD9KEkIifSgMe8sa2miYRjmX8jz
Cy9NwphJGykj2ixMm4cw2jyURba2CkVTPteu68XZ9T3f8z3nXOd6OImlVcV7
XcdxjjOiGGme49yEeOE7znpwDzgUOE4rtor1H9hC+GPg1LDjPGT+iPEP/Qb4
AXA2+m/Y74wocKanmp9o/jIawcs95VvAo3ATOesIZ87FFsGHcaaUvUUMH1wM
VwIOwFvACeiOok/BDoYcZzd4mac+y71paDeB/4C3B+pbv9wLLrDzy8BT2b+f
veOxbfbGy9hf+NSATUcby9pB+GnYTrtL7lzE2lk0jWizwa/AsZwZzXgKzoKL
Zs8e9CPoPfgn8CvgfzPfBd+LnQP/BX4tfDL6w/CzsPnMR+Enm88hfN4BXg3+
AJ8MTgzrG/MC9bMDnAgewqe74Ay0W5nHsLcEnMc4xPlJaHMtJlmsr/F074JA
NZLHTLBj/sdjF8Kfhr/H2SOSc0Y+mtnmcwS7Ec0g/LZA3xLFvTvBm+0theAu
X9+7Dm4V4z14vsQA/rPFQfLSJ7GCX8q8kvOHiVUdmhPwKXD14JPis6fniw/i
Syr4EvxF1heDa8E1VmNSzxE7sx78Br6Lc8vYW818ienb4B/7mi/JY4uvPSC5
+wj+BM4BZ4S1dyS2nXAHwN2u1t4QNpe7zrhaJ/d9rYeX4LHwd1yNrfSA1IP0
3Vtf8y7xLQjUJ/Htiqu1dw7bhOaUq3V43tXcST0koJ9itRqyXEiuZ4ArrHek
jyqtHqSPIhaHDs7sdXWv9K78A3XYd/DX7a4aV2tefGiGH8WfZvAwuAm7D80D
V2Mu8X/uazyln2p9PVfOFx+lX14zjw/Uh1vgdjQ37G2S06RA4yy1t9L6axxc
u90VF9YalFhNgp8XaA6krkQj58cF6pPohZNcSA3f9rX+pcbSA/3H5C198DMD
rcMc+7dkbQD+qtVetdW+5HqC+SY5jWHfBeNlXfqlHNwT0p6VOp+O5prVrdRw
uf1vEatbifEz1rutf+X/kThXcE4/ttXXv0Xy22N/aYb1kbxxDPxX+7vkP+y1
3Mh/+x/ECcPG
            "]], 
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1:eJwtlPtPjmEYxx/1vi/PU1H5wULSQW2lAx10PiAlKr1i2Iw1xzH+FIex8bMO
c8ioLaotWUaihnIKkyIraivU65jPtev+4fO+332v677v67me634ia056T/hZ
llUObojgZwUUO5Y1S2CLx7I2wQj6M4zCR9uyFhF/hi4gFowOgWmXZU0JxDuJ
zaFziLehx/EmYBKy8VplP/SYrbFqvAB/yzrOPlmcnw1ZeLfJ+0R81NZ8f+Jj
eCXEXGg3vMVvxluH95sz/8BBibFfFV4qe6XBPfK6IA/vIfn30UPwHjbifcAb
Rs9zazNCYchP44PQhM7w6Hnv4DkMwAtzvsR8nD0Lmab2H8Rewg10Ot4r9Gu4
BI1416AW1hI7QM0uaq70aP2H4Cd5PtMz6eMvtBdtk3eY+BE4Ck/xn0A/3DRn
jVPHGLTgncVLwdsOjr+uOeZov0uhBMrkPPK2klOI/oYuQ0fRh2iZCdOjGGKx
EAf/2P8vBJh5WECeC3pE44Whl7q15914X+AreIj1Utdj6IN6vFRyAskNkBkk
PohX5NF4L7oPGiANbyXxCIiU94+3Aa8SXQHbYA6vHC/fvGs5b76jNT2w9d1L
TOrsRnfAOfQavE70XQgiNxAWwgCxQmL70fugxsyXvKsd6GpHeyszvBO9C3ym
l7vRexz9l/5G8nzJkAKrIAb2EvNnbaJbZ1HmLgov2tF+yx3rNzWEohc7Ov/j
eEtYEw8JEAexkOHWGaly9HnOkzdiZtNn7mU73h3oMHP1CHpsfS91ZibTWZ8G
GeYsuXeTrJ9w6czJXM+g8+X+ozeb2SlydCYcR/vYb74VbaxphXZTk/R7xtZ7
kmW+CzLv36EFfQu6IJeY19Hn8ZoZlp7nwRTxUo/WUODo92rYT+czHhIgGe8M
3kW4AM3sH0KPguU7Y/ZYZuYu3NH5eoO3nnVNcqcgCX3arA0zM1bh0X5L3yV+
Cu8y8StwFXLIy4Zcc5+kP7Vm3mWO69ENkGjOkzlORqfAanMHpAaJJ5nnkBpk
70a4bmu+3IEgalgO4W79vtSZOyXn1dn6nJmO1jRtejZi6zev2PRMvu3/ATe1
xKE=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlFtoz2EYx3/8+/3l97cZ0ihZc0rTjMIw54uRRJltjjuxk53Nzpu2tS2j
YbQoFw4XSsmFKDnEBVckd4gSKRcoKW4oPl/Pc/H+nu/7/T3v+z7P836fN72s
YWf9+CAIuhkxxhQ+KYzeKAia40FwBJyaCIL12A2MF/ArsasYT8Gz+dcP7sT3
EGMj+CV8LvY4+5Vh3zFfjS3l/1rsCfg87Hv4HGwZfGkYBMPw1dg/8Hvga+CX
+f4dioVRB06HW8roA7fDtbHmLGsHsa3Mz4GHwb/YZzc+h+GasCfh6+BbmHcz
z2SP9tD2nAhuBZ/CpzZuuTfDf/N8sxm3wfX4lIJfa2/wEP4lOp/5Fvj94D2s
nQMeg1seMx/VJYszerEj+DTG7awO8Ef8dsVsn0LGOvDzyGoufDey+HUXX8FH
WXuatT347gdnwV+FL45bnA/BaZ7v/3X4jQQWm86thBtHLHnMBxU/XFXMfIqx
dXHLMZGweQkjAmfG7I50900ev2p23eOvhLsBzgdXgW+CC8DV4AOMpeBrkWls
qvShGsJPkyYiq9tcnR/ZGar7HXDA2Xtjdi9nmG8GV4CL4ha/8tgHngd/gf+z
XBvSzIhrsRz82eNRbIVenyJsA/MK7F+/31H4vtD0Vgs/gf3qweXg3x6b6iDN
ZnucjyPbR7VNSdgdST8zfK32TwZ34ZcEzodrCG3PpIRpsgu8ULl6LvX4rsHn
GGdNYv7d9Vzt+c4HN6pPfU/5FML34r8Jny+R5an65zAfgN8RWp+ql+/z/2dk
tVWv9YCTwQXgUfzGAuvrD4oD/qDXXPd42e9O9zgAfuP3ojpLw/2s3RqaZqXB
6eTV5n2XkTDdLgZfjCwWaf0e+JPrR1qSDqW9V5HlpXdpCPzWe00aGAitF7pD
y1FaGuR/RszyVR9OdpwaMz1L5+oJ1Uu1XYB94G+UemGm96nelieeu96oZ5G9
X6rDXtfqebjtoeVyBbzN3z3djWLrxC5KmP6XgC9F1js14LSEaUDvYRX2kb+H
eie1Zx98LrY9shx0Ly1+R9KP+n0F+BbcD38z9db1eE30zvwD2wygrg==
            "]], 
           Polygon[CompressedData["
1:eJxNl3fcj2UUxh+enre6HxIqLYmIipK0Pi2lrZCWUlqUzPfFS5EtIzu0NbUH
pT1pT23tnXbSTqW6vp3L5+OP6/M7z7nXuc99nfFrfPqALv1rZllWo0aWraPf
WnmWbSs0FwalLLtO2EVyG+EayfsWWbaPcK7kYcKRksdrXR2Nn2PdRpJHZTH3
CKGDMFv6OcI4YRONNxDOl9xOY/sJIyWPEi4TLhWuEOYJg4UWmrudMCTFPPbf
WBiTAsjsyd4ThA0l1xUm2j5s4Oy5wu3CSRrrJtwqeYYwXZgpzEpxZ+7OmZyN
bdyFMzk7lVl2tuRewinCCN8HG86TfIjmj8nCX/fq+0PhA+Ej4eMUOsbw6QMp
gNxWeEhyT63vIfwheZVwZhE65D+Fa4WdNLe1MD/F3DOE31OsQT5d+C2F7jth
a81tJFTl8RbjZN9hebzJQH1XCW+muA86xg4XLkrx1nsXwQve/KwibMKWv/C9
/LGR0EAYqDm5fmsKhVAhrCv0lb6PsE4ZyNca4+xK4Y0UNuCjozS3cx6+WyTs
ILmlcA82au5k2d9K3wP1XVt79Jd8gXQDNNZQ35vpe1NhizJsxvbawvAUttYX
NrHNJ2nNNK3tpPELNb5A2D6PMzl7/yI4CjdHC4cW8ca8430pOHSLcJu5tVzo
orVHC1+l4Czcxef4vp8wRfLx0n2bgjNwB34RO8TQ0BSchbtDvUcH8/hHyR3z
sPdnyS8Sk5L3E16S/Jn9hw3YMkDoL1Sl8NdKYiKPPdirUmgmeZJsOrkIIB8s
3TSNfZriLdjzM8cIa9mD2Blk/xEPvHtLYSRxgQ8lD9f4MKGp5GZCe8mjNX+L
POL81ArlAX3vpu+H9d3J+YQ3WGCbsb17EW9/qjAhC5uwjRjfMo/9iP1q54wh
9mOV78i92ONs8wf7VzonNMnjTPzdTZgo+SDpXtfYO8SU5B7Cu+Q32TtX45vr
eyvd5y7p7hR2Jx9obKcy7o4PWpcxtlC423MWmmOLrCucT3oL6zl28CW6wlyF
3wPy4GyjMmKJmNq6jDdvL/mAPLhwWBEchZv3p1jD2kpiooxYmyr7h+YRc8TI
5sKWZcTOuRqfrvHBGt9G322FXYQZ0s8UlsFRcoHwdoo92AvdMr9XK8cr3OPt
2ZO94MC2QjW5nJxeBkeGEZt5cKe1+TOKmlPGHZmPPdydfZDRsRdntHS89pM8
TWfNyOINeIveReQGfIgviTFywnDHHhyEO3CImkMO6OT4gOszHC9wBv7hb2Jt
qX5fFqYKU4g5jXUpIh9QW+BQN3MW3k33Xt0dY8QWujvgZh41ifxBziX3dhAu
MUfgCrlvD+dA7ouP98zjjBOLyEG3+s15+wdtJ/wktogx7HtC348LzwrPeS65
7AGv6VxEDC4wb9n7BOFm57mbhBuFY6U7Tugr9Ckir1IL6ggbCHWFemXEDLED
5+De8z6XGkItYU6l+c3aJmVwo9r8htNweyw5swgO8P5wtKoiYpBYJOc3NFfh
zfQiOPtCijM5q5cBH/bJYwz+UytmSjeaPE8vImzmuFijQ/5/ru2FY4Mr4t3x
2ULnAXyMDhnfPyo8Iiyx318TXk3hU3z7unUnOvfwTe45MA9+vUWOzKM2Ux+f
TPGGz/lezFnqPVj7irB/HjmyaxFnoevqdyRmid1ZxEQR73iM8H6KPuW9FG9W
6b5gsXn3lH6fFj5JUVuoBx/77HZ5nPOa5R4VcSa643wGe1PP33TOWOa74ZfF
3vsZcxAuPuS9HrMPH/e94d+uefRL16fAfHOSMXpU+it6sI5F+J68u9hn0c9e
6zVr1rMXPRhj5zl/8MZwk31vSOEj7nG15K0cT911z4OkO7CIvvVy4aoUvRk9
2jzfn7fAZuxjLjWQvMMa5pB3rvRa+tTZzgMX+95L7Js1MctvT/dhvD9cae/6
TyyS8+q7L6MHoReB8+jH67teHv3xWMk/CI3z6BHpFX8VfhEGa251ET16A9fH
vfT9dYo9ezvuv5T8RQr9N5aXew46cuMFKWKEuGBv+hb6Bs6gZxwkP34v3Qph
stDQ+Zja/q337eveiRpPvqaHOF7rPk/Rlyz32eSdDcuoO/Qe3IkzVviuFe5N
qbXr+5faeyE1sYgz8c0k2/KPsFrINK9GGT0gveBYz+PtsBWbr/Q7IsORq73H
JPuBWkHfvMr7/puiZ6dP/9vnrLJuteessRHbzhHGFWErNtcqwxb+l4yxTbV8
H/oH/qvgY3xd0303+QnuYh/2VPsdcvfmP6XoC382D4jZzs4ncBk99ZGeb5Bt
wrbzeRthxzJq90jXc/IGdeq0Iv6XtCij1lPz6Qe3L6MPGKK3HFoR61sJU+hT
irgTd+O/HdydJN3sLGoEtYK4IHfwv4f/QsicyVnodnZP0Wat2oB9c7KoEZzJ
2ZOpC0Vw7WvHEZzjjMbCxCLOxr+lMNZvMdX5gDefbA7D5ZGuG/VcC+EiuYV6
Qq0h5n4wJ1kzymNN3ePQ2zR3PaU20r/wXwefYDt3wFf9bCe1l/93zzpX4Aty
RHPvtZ193cx9GPoW7r9GuJ6NL/wWuX0sv/wHSsL26Q==
            "]], 
           Polygon[CompressedData["
1:eJw1lFlsTVEUhg91jjhXjUmLIFoaUnSI8qBIKlGUIJ1bRXtLR72ddRatGqJp
04opxCyE4FlieuCJd7MYQ0IkiCExfytrefiS//xr73XWXnuIClanhwY7jpMG
Luz2HWdMmOPkeo6zB90DFehcvI/oT/DZ19hYvGQmrYY1UADL8B4Tq0XXwVP0
EygiRzKxZ+gy/FL4id6EV42eEHCc8dDMuE68iehi9AL0bcbdgbvQDdthh/1f
6ryAPg+l6Cy8i+gjcBiOQjxeAbGg1XAT75avea/BPLwNxK6jb1ieTLyX6Ffw
Gk5CnOU5hT5ta5ofpjlknuRNYy3L4Qp6EbEcdB+6V9bK+KV4/ehLvtZZhpeN
dxn93Nf+BG3dL9AB+lCEDpGnE7rgA349XgPjOvjeCpXovDDdmy/wFWYwdzrE
QjuxRk//Jz2SNb2BtxBFvAqvmTw7YRe02D4kEpsDSTAFNuPVeTonGmZb7iY5
L8zrcXUPt+HFE0sIaI5Z0GY1yJw4CA/o/ofwRqBHQrn1Q+p6B++hCmbixUI0
5DHmL94fGMScUjlDeO18t0GW5MPrkF5STxGUu3qGv+H9hl++9iwfz5F1mZa+
NTJ2i53PH77+q8TqlP/9H9+HrPF0rMwZgl/JuFq8oWgPhllvpWc+uhBd5em+
DofvvtZUYfsndWWSKwMK7XzJ/Rll65T/tRBrdbVnJbZ2iY+GQ4xdgbcSYmAt
sf14++AgTLX+SY/C0fV4DbJmSCXnElfvjpz1Va7OOeBr3ml4+cy7ik5Cz4UU
2Ih3H+8ePPD1vMoaq+x/MieErpY+2h14iH7k61sRstxSa428HZBteyh1NUGz
3Z9UvCAUW46zkIhe72nPpHft0AYx9KOVWLfdEbkrva6eTXlrJgX0nZGz3oU3
GR0JETAuoHes3tNaRqIjIcLO1RlIQK/ztIZzkCdnTPbN1fdD3qTF6BT5p+yh
vAeMP44+Biesdskx4Ou7IP2RN3Svr3chR9YmY+yNkDdxIToD0u2NaLX65Y72
868B+AcD/a74
            "]]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[{164, 25, 986, 985, 984, 983, 24, 981, 980, 979, 978, 23, 977, 
          976, 975, 974, 22, 972, 971, 970, 21, 266, 265, 264, 16, 245, 244, 
          243, 11, 214, 213, 212, 211, 6, 179, 178, 177, 176, 1, 900, 901, 
          902, 2, 903, 904, 905, 906, 3, 907, 908, 909, 910, 4, 911, 912, 913,
           914, 5, 204, 205, 206, 207, 10, 236, 237, 238, 239, 15, 169, 170, 
          171, 20, 162, 163, 164}]}, {
         GrayLevel[0], 
         Line[{290, 50, 1074, 1073, 1072, 1071, 49, 1069, 1068, 1067, 1066, 
          48, 1065, 1064, 1063, 1062, 47, 1060, 1059, 1058, 46, 392, 391, 390,
           41, 371, 370, 369, 36, 340, 339, 338, 337, 31, 305, 304, 303, 302, 
          26, 988, 989, 990, 27, 991, 992, 993, 994, 28, 995, 996, 997, 998, 
          29, 999, 1000, 1001, 1002, 30, 330, 331, 332, 333, 35, 362, 363, 
          364, 365, 40, 295, 296, 297, 45, 288, 289, 290}]}, {
         GrayLevel[0], 
         Line[{416, 75, 1162, 1161, 1160, 1159, 74, 1157, 1156, 1155, 1154, 
          73, 1153, 1152, 1151, 1150, 72, 1148, 1147, 1146, 71, 518, 517, 516,
           66, 497, 496, 495, 61, 466, 465, 464, 463, 56, 431, 430, 429, 428, 
          51, 1076, 1077, 1078, 52, 1079, 1080, 1081, 1082, 53, 1083, 1084, 
          1085, 1086, 54, 1087, 1088, 1089, 1090, 55, 456, 457, 458, 459, 60, 
          488, 489, 490, 491, 65, 421, 422, 423, 70, 414, 415, 416}]}, {
         GrayLevel[0], 
         Line[{542, 100, 1250, 1249, 1248, 1247, 99, 1245, 1244, 1243, 1242, 
          98, 1241, 1240, 1239, 1238, 97, 1236, 1235, 1234, 96, 644, 643, 642,
           91, 623, 622, 621, 86, 592, 591, 590, 589, 81, 557, 556, 555, 554, 
          76, 1164, 1165, 1166, 77, 1167, 1168, 1169, 1170, 78, 1171, 1172, 
          1173, 1174, 79, 1175, 1176, 1177, 1178, 80, 582, 583, 584, 585, 85, 
          614, 615, 616, 617, 90, 547, 548, 549, 95, 540, 541, 542}]}, {
         GrayLevel[0], 
         Line[{668, 125, 1338, 1337, 1336, 1335, 124, 1333, 1332, 1331, 1330, 
          123, 1329, 1328, 1327, 1326, 122, 1324, 1323, 1322, 121, 770, 769, 
          768, 116, 749, 748, 747, 111, 718, 717, 716, 715, 106, 683, 682, 
          681, 680, 101, 1252, 1253, 1254, 102, 1255, 1256, 1257, 1258, 103, 
          1259, 1260, 1261, 1262, 104, 1263, 1264, 1265, 1266, 105, 708, 709, 
          710, 711, 110, 740, 741, 742, 743, 115, 673, 674, 675, 120, 666, 
          667, 668}]}, {
         GrayLevel[0], 
         Line[{794, 149, 1425, 1424, 1423, 1422, 148, 1420, 1419, 1418, 1417, 
          147, 1416, 1415, 1414, 1413, 146, 1411, 1410, 1409, 145, 889, 888, 
          887, 140, 868, 867, 866, 136, 844, 843, 842, 841, 131, 809, 808, 
          807, 806, 126, 1340, 1341, 1342, 127, 1343, 1344, 1345, 1346, 128, 
          1347, 1348, 1349, 1350, 129, 1351, 1352, 1353, 1354, 130, 834, 835, 
          836, 837, 135, 859, 860, 861, 862, 139, 799, 800, 801, 144, 792, 
          793, 794}]}, {
         Line[{902, 1672, 1674, 1675, 1427, 1670, 917, 1699, 1430, 1659, 1661,
           1664, 935, 1693, 1695, 1696, 932, 954, 240, 1755, 1757, 972}], 
         Line[{906, 1428, 1684, 1685, 1687, 1690, 922, 1743, 1745, 1746, 1439,
           1734, 940, 1445, 1796, 1798, 1801, 959, 1455, 1839, 1840, 1842, 
          977}], 
         Line[{910, 918, 1711, 1713, 1715, 1718, 926, 936, 1767, 1769, 1772, 
          1775, 945, 955, 1813, 1815, 1818, 965, 973, 1851, 1852, 1854, 981}], 
         Line[{914, 927, 1747, 1748, 1750, 1754, 931, 1721, 1723, 1724, 1450, 
          1795, 950, 261, 1776, 1779, 969, 1835, 1837, 1838, 1464, 986}], 
         Line[{970, 951, 1806, 1804, 1802, 952, 1759, 1758, 1441, 1691, 933, 
          1662, 1432, 1702, 1700, 1697, 915, 1668, 1666, 1665, 150, 900}], 
         Line[{974, 960, 1825, 1822, 1819, 956, 941, 1785, 1783, 1780, 937, 
          1731, 1728, 1726, 1725, 1436, 919, 899, 1683, 1681, 1679, 1676, 
          903}], 
         Line[{978, 1460, 1849, 1846, 1843, 962, 1454, 1812, 1810, 1807, 942, 
          221, 1766, 1764, 1761, 923, 1435, 1710, 1708, 1706, 1703, 907}], 
         Line[{983, 1858, 1856, 1855, 982, 966, 1458, 1832, 1830, 1827, 947, 
          1792, 1789, 1787, 1786, 946, 928, 1751, 1440, 1740, 1738, 1735, 
          911}], 
         Line[{990, 1874, 1876, 1877, 1466, 1872, 1005, 1901, 1469, 1861, 
          1863, 1866, 1023, 1895, 1897, 1898, 1020, 1042, 366, 1957, 1959, 
          1060}], 
         Line[{994, 1467, 1886, 1887, 1889, 1892, 1010, 1945, 1947, 1948, 
          1478, 1936, 1028, 1484, 1998, 2000, 2003, 1047, 1494, 2041, 2042, 
          2044, 1065}], 
         Line[{998, 1006, 1913, 1915, 1917, 1920, 1014, 1024, 1969, 1971, 
          1974, 1977, 1033, 1043, 2015, 2017, 2020, 1053, 1061, 2053, 2054, 
          2056, 1069}], 
         Line[{1002, 1015, 1949, 1950, 1952, 1956, 1019, 1923, 1925, 1926, 
          1489, 1997, 1038, 387, 1978, 1981, 1057, 2037, 2039, 2040, 1503, 
          1074}], 
         Line[{1058, 1039, 2008, 2006, 2004, 1040, 1961, 1960, 1480, 1893, 
          1021, 1864, 1471, 1904, 1902, 1899, 1003, 1870, 1868, 1867, 276, 
          988}], 
         Line[{1062, 1048, 2027, 2024, 2021, 1044, 1029, 1987, 1985, 1982, 
          1025, 1933, 1930, 1928, 1927, 1475, 1007, 987, 1885, 1883, 1881, 
          1878, 991}], 
         Line[{1066, 1499, 2051, 2048, 2045, 1050, 1493, 2014, 2012, 2009, 
          1030, 347, 1968, 1966, 1963, 1011, 1474, 1912, 1910, 1908, 1905, 
          995}], 
         Line[{1071, 2060, 2058, 2057, 1070, 1054, 1497, 2034, 2032, 2029, 
          1035, 1994, 1991, 1989, 1988, 1034, 1016, 1953, 1479, 1942, 1940, 
          1937, 999}], 
         Line[{1078, 2076, 2078, 2079, 1505, 2074, 1093, 2103, 1508, 2063, 
          2065, 2068, 1111, 2097, 2099, 2100, 1108, 1130, 492, 2159, 2161, 
          1148}], 
         Line[{1082, 1506, 2088, 2089, 2091, 2094, 1098, 2147, 2149, 2150, 
          1517, 2138, 1116, 1523, 2200, 2202, 2205, 1135, 1533, 2243, 2244, 
          2246, 1153}], 
         Line[{1086, 1094, 2115, 2117, 2119, 2122, 1102, 1112, 2171, 2173, 
          2176, 2179, 1121, 1131, 2217, 2219, 2222, 1141, 1149, 2255, 2256, 
          2258, 1157}], 
         Line[{1090, 1103, 2151, 2152, 2154, 2158, 1107, 2125, 2127, 2128, 
          1528, 2199, 1126, 513, 2180, 2183, 1145, 2239, 2241, 2242, 1542, 
          1162}], 
         Line[{1146, 1127, 2210, 2208, 2206, 1128, 2163, 2162, 1519, 2095, 
          1109, 2066, 1510, 2106, 2104, 2101, 1091, 2072, 2070, 2069, 402, 
          1076}], 
         Line[{1150, 1136, 2229, 2226, 2223, 1132, 1117, 2189, 2187, 2184, 
          1113, 2135, 2132, 2130, 2129, 1514, 1095, 1075, 2087, 2085, 2083, 
          2080, 1079}], 
         Line[{1154, 1538, 2253, 2250, 2247, 1138, 1532, 2216, 2214, 2211, 
          1118, 473, 2170, 2168, 2165, 1099, 1513, 2114, 2112, 2110, 2107, 
          1083}], 
         Line[{1159, 2262, 2260, 2259, 1158, 1142, 1536, 2236, 2234, 2231, 
          1123, 2196, 2193, 2191, 2190, 1122, 1104, 2155, 1518, 2144, 2142, 
          2139, 1087}], 
         Line[{1166, 2278, 2280, 2281, 1544, 2276, 1181, 2305, 1547, 2265, 
          2267, 2270, 1199, 2299, 2301, 2302, 1196, 1218, 618, 2361, 2363, 
          1236}], 
         Line[{1170, 1545, 2290, 2291, 2293, 2296, 1186, 2349, 2351, 2352, 
          1556, 2340, 1204, 1562, 2402, 2404, 2407, 1223, 1572, 2445, 2446, 
          2448, 1241}], 
         Line[{1174, 1182, 2317, 2319, 2321, 2324, 1190, 1200, 2373, 2375, 
          2378, 2381, 1209, 1219, 2419, 2421, 2424, 1229, 1237, 2457, 2458, 
          2460, 1245}], 
         Line[{1178, 1191, 2353, 2354, 2356, 2360, 1195, 2327, 2329, 2330, 
          1567, 2401, 1214, 639, 2382, 2385, 1233, 2441, 2443, 2444, 1581, 
          1250}], 
         Line[{1234, 1215, 2412, 2410, 2408, 1216, 2365, 2364, 1558, 2297, 
          1197, 2268, 1549, 2308, 2306, 2303, 1179, 2274, 2272, 2271, 528, 
          1164}], 
         Line[{1238, 1224, 2431, 2428, 2425, 1220, 1205, 2391, 2389, 2386, 
          1201, 2337, 2334, 2332, 2331, 1553, 1183, 1163, 2289, 2287, 2285, 
          2282, 1167}], 
         Line[{1242, 1577, 2455, 2452, 2449, 1226, 1571, 2418, 2416, 2413, 
          1206, 599, 2372, 2370, 2367, 1187, 1552, 2316, 2314, 2312, 2309, 
          1171}], 
         Line[{1247, 2464, 2462, 2461, 1246, 1230, 1575, 2438, 2436, 2433, 
          1211, 2398, 2395, 2393, 2392, 1210, 1192, 2357, 1557, 2346, 2344, 
          2341, 1175}], 
         Line[{1254, 2480, 2482, 2483, 1583, 2478, 1269, 2507, 1586, 2467, 
          2469, 2472, 1287, 2501, 2503, 2504, 1284, 1306, 744, 2563, 2565, 
          1324}], 
         Line[{1258, 1584, 2492, 2493, 2495, 2498, 1274, 2551, 2553, 2554, 
          1595, 2542, 1292, 1601, 2604, 2606, 2609, 1311, 1611, 2647, 2648, 
          2650, 1329}], 
         Line[{1262, 1270, 2519, 2521, 2523, 2526, 1278, 1288, 2575, 2577, 
          2580, 2583, 1297, 1307, 2621, 2623, 2626, 1317, 1325, 2659, 2660, 
          2662, 1333}], 
         Line[{1266, 1279, 2555, 2556, 2558, 2562, 1283, 2529, 2531, 2532, 
          1606, 2603, 1302, 765, 2584, 2587, 1321, 2643, 2645, 2646, 1620, 
          1338}], 
         Line[{1322, 1303, 2614, 2612, 2610, 1304, 2567, 2566, 1597, 2499, 
          1285, 2470, 1588, 2510, 2508, 2505, 1267, 2476, 2474, 2473, 654, 
          1252}], 
         Line[{1326, 1312, 2633, 2630, 2627, 1308, 1293, 2593, 2591, 2588, 
          1289, 2539, 2536, 2534, 2533, 1592, 1271, 1251, 2491, 2489, 2487, 
          2484, 1255}], 
         Line[{1330, 1616, 2657, 2654, 2651, 1314, 1610, 2620, 2618, 2615, 
          1294, 725, 2574, 2572, 2569, 1275, 1591, 2518, 2516, 2514, 2511, 
          1259}], 
         Line[{1335, 2666, 2664, 2663, 1334, 1318, 1614, 2640, 2638, 2635, 
          1299, 2600, 2597, 2595, 2594, 1298, 1280, 2559, 1596, 2548, 2546, 
          2543, 1263}], 
         Line[{1342, 2682, 2684, 2685, 1622, 2680, 1357, 2709, 1625, 2669, 
          2671, 2674, 1375, 2703, 2705, 2706, 1372, 1394, 863, 2826, 2828, 
          1411}], 
         Line[{1346, 1623, 2694, 2695, 2697, 2700, 1362, 2738, 1631, 2749, 
          2753, 2759, 1380, 2808, 2813, 2816, 1644, 1398, 1649, 2847, 2848, 
          2850, 1416}], 
         Line[{1350, 1358, 2721, 2723, 2725, 2728, 1366, 2782, 2784, 2785, 
          1635, 2763, 1384, 1391, 2829, 2831, 2834, 1404, 1412, 2859, 2860, 
          2862, 1420}], 
         Line[{1354, 1367, 2764, 2765, 2767, 2771, 1371, 2731, 2733, 2734, 
          1641, 2795, 1389, 881, 2796, 2799, 1408, 2843, 2845, 2846, 1658, 
          1425}], 
         Line[{1409, 1390, 2776, 2774, 2772, 1392, 2778, 2777, 1637, 2701, 
          1373, 2672, 1627, 2712, 2710, 2707, 1355, 2678, 2676, 2675, 780, 
          1340}], 
         Line[{1413, 1399, 2824, 2821, 2818, 1395, 2803, 2801, 2800, 1385, 
          1377, 825, 2741, 2739, 2735, 1359, 1339, 2693, 2691, 2689, 2686, 
          1343}], 
         Line[{1417, 1654, 2857, 2854, 2851, 1401, 1648, 2817, 2814, 2809, 
          1381, 2760, 2754, 2750, 2748, 1632, 1363, 1630, 2720, 2718, 2716, 
          2713, 1347}], 
         Line[{1422, 2866, 2864, 2863, 1421, 1405, 1652, 2840, 2838, 2835, 
          1386, 2792, 2789, 2787, 2786, 1376, 1368, 2768, 1636, 2747, 2745, 
          2742, 1351}], 
         Line[{901, 1671, 1673, 1426, 1667, 1669, 916, 1698, 1701, 1431, 1660,
           1663, 934, 1692, 1694, 1442, 1760, 953, 1803, 1805, 1451, 1756, 
          971}], 
         Line[{904, 1677, 1680, 1682, 1429, 1688, 920, 1741, 1437, 1727, 1729,
           1732, 938, 1781, 1784, 1447, 1799, 957, 1820, 1823, 1826, 961, 
          975}], 
         Line[{905, 1678, 155, 1686, 1689, 921, 1742, 1744, 1438, 1730, 1733, 
          939, 1782, 1446, 1797, 1800, 958, 1821, 1824, 1456, 1841, 976}], 
         Line[{908, 1704, 1707, 1709, 1434, 1716, 924, 1762, 1765, 1444, 1770,
           1773, 943, 1808, 1811, 1453, 1816, 963, 1844, 1847, 1850, 1461, 
          979}], 
         Line[{909, 1705, 1433, 1712, 1714, 1717, 925, 1763, 1443, 1768, 1771,
           1774, 944, 1809, 1452, 1814, 1817, 964, 1845, 1848, 1459, 1853, 
          980}], 
         Line[{912, 1736, 1739, 202, 1752, 929, 1719, 1448, 1788, 1790, 1793, 
          948, 1828, 1831, 1457, 1777, 967, 1833, 1462, 1857, 1859, 984}], 
         Line[{913, 1737, 201, 1749, 1753, 930, 1720, 1722, 1449, 1791, 1794, 
          949, 1829, 262, 1778, 968, 1834, 1836, 1463, 1860, 985}], 
         Line[{989, 1873, 1875, 1465, 1869, 1871, 1004, 1900, 1903, 1470, 
          1862, 1865, 1022, 1894, 1896, 1481, 1962, 1041, 2005, 2007, 1490, 
          1958, 1059}], 
         Line[{992, 1879, 1882, 1884, 1468, 1890, 1008, 1943, 1476, 1929, 
          1931, 1934, 1026, 1983, 1986, 1486, 2001, 1045, 2022, 2025, 2028, 
          1049, 1063}], 
         Line[{993, 1880, 281, 1888, 1891, 1009, 1944, 1946, 1477, 1932, 1935,
           1027, 1984, 1485, 1999, 2002, 1046, 2023, 2026, 1495, 2043, 1064}], 
         Line[{996, 1906, 1909, 1911, 1473, 1918, 1012, 1964, 1967, 1483, 
          1972, 1975, 1031, 2010, 2013, 1492, 2018, 1051, 2046, 2049, 2052, 
          1500, 1067}], 
         Line[{997, 1907, 1472, 1914, 1916, 1919, 1013, 1965, 1482, 1970, 
          1973, 1976, 1032, 2011, 1491, 2016, 2019, 1052, 2047, 2050, 1498, 
          2055, 1068}], 
         Line[{1000, 1938, 1941, 328, 1954, 1017, 1921, 1487, 1990, 1992, 
          1995, 1036, 2030, 2033, 1496, 1979, 1055, 2035, 1501, 2059, 2061, 
          1072}], 
         Line[{1001, 1939, 327, 1951, 1955, 1018, 1922, 1924, 1488, 1993, 
          1996, 1037, 2031, 388, 1980, 1056, 2036, 2038, 1502, 2062, 1073}], 
         Line[{1077, 2075, 2077, 1504, 2071, 2073, 1092, 2102, 2105, 1509, 
          2064, 2067, 1110, 2096, 2098, 1520, 2164, 1129, 2207, 2209, 1529, 
          2160, 1147}], 
         Line[{1080, 2081, 2084, 2086, 1507, 2092, 1096, 2145, 1515, 2131, 
          2133, 2136, 1114, 2185, 2188, 1525, 2203, 1133, 2224, 2227, 2230, 
          1137, 1151}], 
         Line[{1081, 2082, 407, 2090, 2093, 1097, 2146, 2148, 1516, 2134, 
          2137, 1115, 2186, 1524, 2201, 2204, 1134, 2225, 2228, 1534, 2245, 
          1152}], 
         Line[{1084, 2108, 2111, 2113, 1512, 2120, 1100, 2166, 2169, 1522, 
          2174, 2177, 1119, 2212, 2215, 1531, 2220, 1139, 2248, 2251, 2254, 
          1539, 1155}], 
         Line[{1085, 2109, 1511, 2116, 2118, 2121, 1101, 2167, 1521, 2172, 
          2175, 2178, 1120, 2213, 1530, 2218, 2221, 1140, 2249, 2252, 1537, 
          2257, 1156}], 
         Line[{1088, 2140, 2143, 454, 2156, 1105, 2123, 1526, 2192, 2194, 
          2197, 1124, 2232, 2235, 1535, 2181, 1143, 2237, 1540, 2261, 2263, 
          1160}], 
         Line[{1089, 2141, 453, 2153, 2157, 1106, 2124, 2126, 1527, 2195, 
          2198, 1125, 2233, 514, 2182, 1144, 2238, 2240, 1541, 2264, 1161}], 
         Line[{1165, 2277, 2279, 1543, 2273, 2275, 1180, 2304, 2307, 1548, 
          2266, 2269, 1198, 2298, 2300, 1559, 2366, 1217, 2409, 2411, 1568, 
          2362, 1235}], 
         Line[{1168, 2283, 2286, 2288, 1546, 2294, 1184, 2347, 1554, 2333, 
          2335, 2338, 1202, 2387, 2390, 1564, 2405, 1221, 2426, 2429, 2432, 
          1225, 1239}], 
         Line[{1169, 2284, 533, 2292, 2295, 1185, 2348, 2350, 1555, 2336, 
          2339, 1203, 2388, 1563, 2403, 2406, 1222, 2427, 2430, 1573, 2447, 
          1240}], 
         Line[{1172, 2310, 2313, 2315, 1551, 2322, 1188, 2368, 2371, 1561, 
          2376, 2379, 1207, 2414, 2417, 1570, 2422, 1227, 2450, 2453, 2456, 
          1578, 1243}], 
         Line[{1173, 2311, 1550, 2318, 2320, 2323, 1189, 2369, 1560, 2374, 
          2377, 2380, 1208, 2415, 1569, 2420, 2423, 1228, 2451, 2454, 1576, 
          2459, 1244}], 
         Line[{1176, 2342, 2345, 580, 2358, 1193, 2325, 1565, 2394, 2396, 
          2399, 1212, 2434, 2437, 1574, 2383, 1231, 2439, 1579, 2463, 2465, 
          1248}], 
         Line[{1177, 2343, 579, 2355, 2359, 1194, 2326, 2328, 1566, 2397, 
          2400, 1213, 2435, 640, 2384, 1232, 2440, 2442, 1580, 2466, 1249}], 
         Line[{1253, 2479, 2481, 1582, 2475, 2477, 1268, 2506, 2509, 1587, 
          2468, 2471, 1286, 2500, 2502, 1598, 2568, 1305, 2611, 2613, 1607, 
          2564, 1323}], 
         Line[{1256, 2485, 2488, 2490, 1585, 2496, 1272, 2549, 1593, 2535, 
          2537, 2540, 1290, 2589, 2592, 1603, 2607, 1309, 2628, 2631, 2634, 
          1313, 1327}], 
         Line[{1257, 2486, 659, 2494, 2497, 1273, 2550, 2552, 1594, 2538, 
          2541, 1291, 2590, 1602, 2605, 2608, 1310, 2629, 2632, 1612, 2649, 
          1328}], 
         Line[{1260, 2512, 2515, 2517, 1590, 2524, 1276, 2570, 2573, 1600, 
          2578, 2581, 1295, 2616, 2619, 1609, 2624, 1315, 2652, 2655, 2658, 
          1617, 1331}], 
         Line[{1261, 2513, 1589, 2520, 2522, 2525, 1277, 2571, 1599, 2576, 
          2579, 2582, 1296, 2617, 1608, 2622, 2625, 1316, 2653, 2656, 1615, 
          2661, 1332}], 
         Line[{1264, 2544, 2547, 706, 2560, 1281, 2527, 1604, 2596, 2598, 
          2601, 1300, 2636, 2639, 1613, 2585, 1319, 2641, 1618, 2665, 2667, 
          1336}], 
         Line[{1265, 2545, 705, 2557, 2561, 1282, 2528, 2530, 1605, 2599, 
          2602, 1301, 2637, 766, 2586, 1320, 2642, 2644, 1619, 2668, 1337}], 
         Line[{1341, 2681, 2683, 1621, 2677, 2679, 1356, 2708, 2711, 1626, 
          2670, 2673, 1374, 2702, 2704, 1638, 2779, 1393, 2773, 2775, 1645, 
          2827, 1410}], 
         Line[{1344, 2687, 2690, 2692, 1624, 2698, 1360, 2736, 2740, 824, 
          2757, 1378, 2806, 1642, 2802, 2804, 1396, 2819, 2822, 2825, 1400, 
          1414}], 
         Line[{1345, 2688, 785, 2696, 2699, 1361, 2737, 823, 2752, 2758, 1379,
           2807, 2812, 1643, 2805, 1397, 2820, 2823, 1650, 2849, 1415}], 
         Line[{1348, 2714, 2717, 2719, 1629, 2726, 1364, 2780, 1633, 2751, 
          2755, 2761, 1382, 2810, 2815, 1647, 2832, 1402, 2852, 2855, 2858, 
          1655, 1418}], 
         Line[{1349, 2715, 1628, 2722, 2724, 2727, 1365, 2781, 2783, 1634, 
          2756, 2762, 1383, 2811, 1646, 2830, 2833, 1403, 2853, 2856, 1653, 
          2861, 1419}], 
         Line[{1352, 2743, 2746, 832, 2769, 1369, 2729, 1639, 2788, 2790, 
          2793, 1387, 2836, 2839, 1651, 2797, 1406, 2841, 1656, 2865, 2867, 
          1423}], 
         Line[{1353, 2744, 831, 2766, 2770, 1370, 2730, 2732, 1640, 2791, 
          2794, 1388, 2837, 882, 2798, 1407, 2842, 2844, 1657, 2868, 1424}]}, {
         Line[{164, 1838, 275, 1860, 1859, 1858, 272, 1854, 1853, 269, 1850, 
          1849, 260, 1842, 1841, 257, 1826, 1825, 248, 1757, 1756, 242, 1806, 
          266}], 
         Line[{20, 969, 968, 967, 966, 19, 965, 964, 963, 962, 18, 959, 958, 
          957, 956, 17, 954, 953, 952, 16}], 
         Line[{171, 1779, 1778, 1777, 263, 1832, 254, 1818, 1817, 1816, 251, 
          1812, 231, 1801, 1800, 1799, 228, 1785, 217, 1696, 210, 1760, 1759, 
          245}], 
         Line[{176, 150, 1671, 1672, 158, 1676, 1677, 1678, 154, 1684, 165, 
          1703, 1704, 1705, 184, 1711, 188, 1735, 1736, 1737, 200, 1747, 
          204}], 
         Line[{207, 1754, 1753, 1752, 1751, 203, 191, 1718, 1717, 1716, 187, 
          1710, 168, 1690, 1689, 1688, 157, 1683, 161, 153, 1670, 1669, 1668, 
          179}], 
         Line[{211, 1697, 1698, 1699, 172, 180, 1725, 192, 1741, 1742, 1743, 
          196, 1761, 1762, 1763, 218, 1767, 222, 1786, 232, 1719, 1720, 1721, 
          236}], 
         Line[{239, 235, 1795, 1794, 1793, 1792, 225, 1775, 1774, 1773, 221, 
          199, 195, 1734, 1733, 1732, 1731, 183, 1664, 1663, 1662, 175, 214}], 
         Line[{243, 208, 1691, 1692, 1693, 215, 1780, 1781, 1782, 226, 1796, 
          229, 1807, 1808, 1809, 249, 1813, 252, 1827, 1828, 1829, 261, 169}], 
         Line[{264, 1802, 1803, 240, 246, 1819, 1820, 1821, 255, 1839, 258, 
          1843, 1844, 1845, 267, 1851, 270, 1855, 273, 1833, 1834, 1835, 
          162}], 
         Line[{290, 2040, 401, 2062, 2061, 2060, 398, 2056, 2055, 395, 2052, 
          2051, 386, 2044, 2043, 383, 2028, 2027, 374, 1959, 1958, 368, 2008, 
          392}], 
         Line[{45, 1057, 1056, 1055, 1054, 44, 1053, 1052, 1051, 1050, 43, 
          1047, 1046, 1045, 1044, 42, 1042, 1041, 1040, 41}], 
         Line[{297, 1981, 1980, 1979, 389, 2034, 380, 2020, 2019, 2018, 377, 
          2014, 357, 2003, 2002, 2001, 354, 1987, 343, 1898, 336, 1962, 1961, 
          371}], 
         Line[{302, 276, 1873, 1874, 284, 1878, 1879, 1880, 280, 1886, 291, 
          1905, 1906, 1907, 310, 1913, 314, 1937, 1938, 1939, 326, 1949, 
          330}], 
         Line[{333, 1956, 1955, 1954, 1953, 329, 317, 1920, 1919, 1918, 313, 
          1912, 294, 1892, 1891, 1890, 283, 1885, 287, 279, 1872, 1871, 1870, 
          305}], 
         Line[{337, 1899, 1900, 1901, 298, 306, 1927, 318, 1943, 1944, 1945, 
          322, 1963, 1964, 1965, 344, 1969, 348, 1988, 358, 1921, 1922, 1923, 
          362}], 
         Line[{365, 361, 1997, 1996, 1995, 1994, 351, 1977, 1976, 1975, 347, 
          325, 321, 1936, 1935, 1934, 1933, 309, 1866, 1865, 1864, 301, 340}], 
         Line[{369, 334, 1893, 1894, 1895, 341, 1982, 1983, 1984, 352, 1998, 
          355, 2009, 2010, 2011, 375, 2015, 378, 2029, 2030, 2031, 387, 295}], 
         Line[{390, 2004, 2005, 366, 372, 2021, 2022, 2023, 381, 2041, 384, 
          2045, 2046, 2047, 393, 2053, 396, 2057, 399, 2035, 2036, 2037, 
          288}], 
         Line[{416, 2242, 527, 2264, 2263, 2262, 524, 2258, 2257, 521, 2254, 
          2253, 512, 2246, 2245, 509, 2230, 2229, 500, 2161, 2160, 494, 2210, 
          518}], 
         Line[{70, 1145, 1144, 1143, 1142, 69, 1141, 1140, 1139, 1138, 68, 
          1135, 1134, 1133, 1132, 67, 1130, 1129, 1128, 66}], 
         Line[{423, 2183, 2182, 2181, 515, 2236, 506, 2222, 2221, 2220, 503, 
          2216, 483, 2205, 2204, 2203, 480, 2189, 469, 2100, 462, 2164, 2163, 
          497}], 
         Line[{428, 402, 2075, 2076, 410, 2080, 2081, 2082, 406, 2088, 417, 
          2107, 2108, 2109, 436, 2115, 440, 2139, 2140, 2141, 452, 2151, 
          456}], 
         Line[{459, 2158, 2157, 2156, 2155, 455, 443, 2122, 2121, 2120, 439, 
          2114, 420, 2094, 2093, 2092, 409, 2087, 413, 405, 2074, 2073, 2072, 
          431}], 
         Line[{463, 2101, 2102, 2103, 424, 432, 2129, 444, 2145, 2146, 2147, 
          448, 2165, 2166, 2167, 470, 2171, 474, 2190, 484, 2123, 2124, 2125, 
          488}], 
         Line[{491, 487, 2199, 2198, 2197, 2196, 477, 2179, 2178, 2177, 473, 
          451, 447, 2138, 2137, 2136, 2135, 435, 2068, 2067, 2066, 427, 466}], 
         Line[{495, 460, 2095, 2096, 2097, 467, 2184, 2185, 2186, 478, 2200, 
          481, 2211, 2212, 2213, 501, 2217, 504, 2231, 2232, 2233, 513, 421}], 
         Line[{516, 2206, 2207, 492, 498, 2223, 2224, 2225, 507, 2243, 510, 
          2247, 2248, 2249, 519, 2255, 522, 2259, 525, 2237, 2238, 2239, 
          414}], 
         Line[{542, 2444, 653, 2466, 2465, 2464, 650, 2460, 2459, 647, 2456, 
          2455, 638, 2448, 2447, 635, 2432, 2431, 626, 2363, 2362, 620, 2412, 
          644}], 
         Line[{95, 1233, 1232, 1231, 1230, 94, 1229, 1228, 1227, 1226, 93, 
          1223, 1222, 1221, 1220, 92, 1218, 1217, 1216, 91}], 
         Line[{549, 2385, 2384, 2383, 641, 2438, 632, 2424, 2423, 2422, 629, 
          2418, 609, 2407, 2406, 2405, 606, 2391, 595, 2302, 588, 2366, 2365, 
          623}], 
         Line[{554, 528, 2277, 2278, 536, 2282, 2283, 2284, 532, 2290, 543, 
          2309, 2310, 2311, 562, 2317, 566, 2341, 2342, 2343, 578, 2353, 
          582}], 
         Line[{585, 2360, 2359, 2358, 2357, 581, 569, 2324, 2323, 2322, 565, 
          2316, 546, 2296, 2295, 2294, 535, 2289, 539, 531, 2276, 2275, 2274, 
          557}], 
         Line[{589, 2303, 2304, 2305, 550, 558, 2331, 570, 2347, 2348, 2349, 
          574, 2367, 2368, 2369, 596, 2373, 600, 2392, 610, 2325, 2326, 2327, 
          614}], 
         Line[{617, 613, 2401, 2400, 2399, 2398, 603, 2381, 2380, 2379, 599, 
          577, 573, 2340, 2339, 2338, 2337, 561, 2270, 2269, 2268, 553, 592}], 
         Line[{621, 586, 2297, 2298, 2299, 593, 2386, 2387, 2388, 604, 2402, 
          607, 2413, 2414, 2415, 627, 2419, 630, 2433, 2434, 2435, 639, 547}], 
         Line[{642, 2408, 2409, 618, 624, 2425, 2426, 2427, 633, 2445, 636, 
          2449, 2450, 2451, 645, 2457, 648, 2461, 651, 2439, 2440, 2441, 
          540}], 
         Line[{668, 2646, 779, 2668, 2667, 2666, 776, 2662, 2661, 773, 2658, 
          2657, 764, 2650, 2649, 761, 2634, 2633, 752, 2565, 2564, 746, 2614, 
          770}], 
         Line[{120, 1321, 1320, 1319, 1318, 119, 1317, 1316, 1315, 1314, 118, 
          1311, 1310, 1309, 1308, 117, 1306, 1305, 1304, 116}], 
         Line[{675, 2587, 2586, 2585, 767, 2640, 758, 2626, 2625, 2624, 755, 
          2620, 735, 2609, 2608, 2607, 732, 2593, 721, 2504, 714, 2568, 2567, 
          749}], 
         Line[{680, 654, 2479, 2480, 662, 2484, 2485, 2486, 658, 2492, 669, 
          2511, 2512, 2513, 688, 2519, 692, 2543, 2544, 2545, 704, 2555, 
          708}], 
         Line[{711, 2562, 2561, 2560, 2559, 707, 695, 2526, 2525, 2524, 691, 
          2518, 672, 2498, 2497, 2496, 661, 2491, 665, 657, 2478, 2477, 2476, 
          683}], 
         Line[{715, 2505, 2506, 2507, 676, 684, 2533, 696, 2549, 2550, 2551, 
          700, 2569, 2570, 2571, 722, 2575, 726, 2594, 736, 2527, 2528, 2529, 
          740}], 
         Line[{743, 739, 2603, 2602, 2601, 2600, 729, 2583, 2582, 2581, 725, 
          703, 699, 2542, 2541, 2540, 2539, 687, 2472, 2471, 2470, 679, 718}], 
         Line[{747, 712, 2499, 2500, 2501, 719, 2588, 2589, 2590, 730, 2604, 
          733, 2615, 2616, 2617, 753, 2621, 756, 2635, 2636, 2637, 765, 673}], 
         Line[{768, 2610, 2611, 744, 750, 2627, 2628, 2629, 759, 2647, 762, 
          2651, 2652, 2653, 771, 2659, 774, 2663, 777, 2641, 2642, 2643, 
          666}], 
         Line[{794, 2846, 898, 2868, 2867, 2866, 895, 2862, 2861, 892, 2858, 
          2857, 886, 2850, 2849, 877, 2825, 2824, 874, 2828, 2827, 865, 2776, 
          889}], 
         Line[{144, 1408, 1407, 1406, 1405, 143, 1404, 1403, 1402, 1401, 142, 
          1398, 1397, 1396, 1395, 141, 1394, 1393, 1392, 140}], 
         Line[{801, 2799, 2798, 2797, 883, 2840, 880, 2834, 2833, 2832, 871, 
          2817, 2816, 858, 2805, 2804, 2803, 847, 2706, 840, 2779, 2778, 
          868}], 
         Line[{806, 780, 2681, 2682, 788, 2686, 2687, 2688, 784, 2694, 795, 
          2713, 2714, 2715, 814, 2721, 818, 2742, 2743, 2744, 830, 2764, 
          834}], 
         Line[{837, 2771, 2770, 2769, 2768, 833, 821, 2728, 2727, 2726, 817, 
          2720, 798, 2700, 2699, 2698, 787, 2693, 791, 783, 2680, 2679, 2678, 
          809}], 
         Line[{841, 2707, 2708, 2709, 802, 810, 2735, 2736, 2737, 2738, 822, 
          2748, 826, 2780, 2781, 2782, 848, 2786, 852, 2729, 2730, 2731, 
          859}], 
         Line[{862, 855, 2795, 2794, 2793, 2792, 851, 829, 2763, 2762, 2761, 
          2760, 2759, 2758, 2757, 825, 813, 2674, 2673, 2672, 805, 844}], 
         Line[{866, 838, 2701, 2702, 2703, 845, 2800, 856, 2806, 2807, 2808, 
          2809, 2810, 2811, 869, 2829, 878, 2835, 2836, 2837, 881, 799}], 
         Line[{887, 2772, 2773, 863, 872, 2818, 2819, 2820, 875, 2847, 884, 
          2851, 2852, 2853, 890, 2859, 893, 2863, 896, 2841, 2842, 2843, 
          792}], 
         Line[{163, 1837, 1836, 274, 1857, 1856, 271, 1852, 268, 1848, 1847, 
          1846, 259, 1840, 256, 1824, 1823, 1822, 247, 1755, 241, 1805, 1804, 
          265}], 
         Line[{170, 1776, 262, 1831, 1830, 253, 1815, 1814, 250, 1811, 1810, 
          230, 1798, 1797, 227, 1784, 1783, 216, 1695, 1694, 209, 1758, 244}], 
         Line[{177, 1665, 151, 1673, 1674, 159, 1679, 1680, 155, 1685, 166, 
          1706, 1707, 185, 1712, 1713, 189, 1738, 1739, 201, 1748, 205}], 
         Line[{178, 1666, 1667, 152, 1675, 160, 1681, 1682, 156, 1686, 1687, 
          167, 1708, 1709, 186, 1714, 1715, 190, 1740, 202, 1749, 1750, 206}], 
         Line[{212, 1700, 1701, 173, 1659, 181, 1726, 1727, 193, 1744, 1745, 
          197, 1764, 1765, 219, 1768, 1769, 223, 1787, 1788, 233, 1722, 1723, 
          237}], 
         Line[{213, 1702, 174, 1660, 1661, 182, 1728, 1729, 1730, 194, 1746, 
          198, 1766, 220, 1770, 1771, 1772, 224, 1789, 1790, 1791, 234, 1724, 
          238}], 
         Line[{289, 2039, 2038, 400, 2059, 2058, 397, 2054, 394, 2050, 2049, 
          2048, 385, 2042, 382, 2026, 2025, 2024, 373, 1957, 367, 2007, 2006, 
          391}], 
         Line[{296, 1978, 388, 2033, 2032, 379, 2017, 2016, 376, 2013, 2012, 
          356, 2000, 1999, 353, 1986, 1985, 342, 1897, 1896, 335, 1960, 370}], 
         Line[{303, 1867, 277, 1875, 1876, 285, 1881, 1882, 281, 1887, 292, 
          1908, 1909, 311, 1914, 1915, 315, 1940, 1941, 327, 1950, 331}], 
         Line[{304, 1868, 1869, 278, 1877, 286, 1883, 1884, 282, 1888, 1889, 
          293, 1910, 1911, 312, 1916, 1917, 316, 1942, 328, 1951, 1952, 332}], 
         Line[{338, 1902, 1903, 299, 1861, 307, 1928, 1929, 319, 1946, 1947, 
          323, 1966, 1967, 345, 1970, 1971, 349, 1989, 1990, 359, 1924, 1925, 
          363}], 
         Line[{339, 1904, 300, 1862, 1863, 308, 1930, 1931, 1932, 320, 1948, 
          324, 1968, 346, 1972, 1973, 1974, 350, 1991, 1992, 1993, 360, 1926, 
          364}], 
         Line[{415, 2241, 2240, 526, 2261, 2260, 523, 2256, 520, 2252, 2251, 
          2250, 511, 2244, 508, 2228, 2227, 2226, 499, 2159, 493, 2209, 2208, 
          517}], 
         Line[{422, 2180, 514, 2235, 2234, 505, 2219, 2218, 502, 2215, 2214, 
          482, 2202, 2201, 479, 2188, 2187, 468, 2099, 2098, 461, 2162, 496}], 
         Line[{429, 2069, 403, 2077, 2078, 411, 2083, 2084, 407, 2089, 418, 
          2110, 2111, 437, 2116, 2117, 441, 2142, 2143, 453, 2152, 457}], 
         Line[{430, 2070, 2071, 404, 2079, 412, 2085, 2086, 408, 2090, 2091, 
          419, 2112, 2113, 438, 2118, 2119, 442, 2144, 454, 2153, 2154, 458}], 
         Line[{464, 2104, 2105, 425, 2063, 433, 2130, 2131, 445, 2148, 2149, 
          449, 2168, 2169, 471, 2172, 2173, 475, 2191, 2192, 485, 2126, 2127, 
          489}], 
         Line[{465, 2106, 426, 2064, 2065, 434, 2132, 2133, 2134, 446, 2150, 
          450, 2170, 472, 2174, 2175, 2176, 476, 2193, 2194, 2195, 486, 2128, 
          490}], 
         Line[{541, 2443, 2442, 652, 2463, 2462, 649, 2458, 646, 2454, 2453, 
          2452, 637, 2446, 634, 2430, 2429, 2428, 625, 2361, 619, 2411, 2410, 
          643}], 
         Line[{548, 2382, 640, 2437, 2436, 631, 2421, 2420, 628, 2417, 2416, 
          608, 2404, 2403, 605, 2390, 2389, 594, 2301, 2300, 587, 2364, 622}], 
         Line[{555, 2271, 529, 2279, 2280, 537, 2285, 2286, 533, 2291, 544, 
          2312, 2313, 563, 2318, 2319, 567, 2344, 2345, 579, 2354, 583}], 
         Line[{556, 2272, 2273, 530, 2281, 538, 2287, 2288, 534, 2292, 2293, 
          545, 2314, 2315, 564, 2320, 2321, 568, 2346, 580, 2355, 2356, 584}], 
         Line[{590, 2306, 2307, 551, 2265, 559, 2332, 2333, 571, 2350, 2351, 
          575, 2370, 2371, 597, 2374, 2375, 601, 2393, 2394, 611, 2328, 2329, 
          615}], 
         Line[{591, 2308, 552, 2266, 2267, 560, 2334, 2335, 2336, 572, 2352, 
          576, 2372, 598, 2376, 2377, 2378, 602, 2395, 2396, 2397, 612, 2330, 
          616}], 
         Line[{667, 2645, 2644, 778, 2665, 2664, 775, 2660, 772, 2656, 2655, 
          2654, 763, 2648, 760, 2632, 2631, 2630, 751, 2563, 745, 2613, 2612, 
          769}], 
         Line[{674, 2584, 766, 2639, 2638, 757, 2623, 2622, 754, 2619, 2618, 
          734, 2606, 2605, 731, 2592, 2591, 720, 2503, 2502, 713, 2566, 748}], 
         Line[{681, 2473, 655, 2481, 2482, 663, 2487, 2488, 659, 2493, 670, 
          2514, 2515, 689, 2520, 2521, 693, 2546, 2547, 705, 2556, 709}], 
         Line[{682, 2474, 2475, 656, 2483, 664, 2489, 2490, 660, 2494, 2495, 
          671, 2516, 2517, 690, 2522, 2523, 694, 2548, 706, 2557, 2558, 710}], 
         Line[{716, 2508, 2509, 677, 2467, 685, 2534, 2535, 697, 2552, 2553, 
          701, 2572, 2573, 723, 2576, 2577, 727, 2595, 2596, 737, 2530, 2531, 
          741}], 
         Line[{717, 2510, 678, 2468, 2469, 686, 2536, 2537, 2538, 698, 2554, 
          702, 2574, 724, 2578, 2579, 2580, 728, 2597, 2598, 2599, 738, 2532, 
          742}], 
         Line[{793, 2845, 2844, 897, 2865, 2864, 894, 2860, 891, 2856, 2855, 
          2854, 885, 2848, 876, 2823, 2822, 2821, 873, 2826, 864, 2775, 2774, 
          888}], 
         Line[{800, 2796, 882, 2839, 2838, 879, 2831, 2830, 870, 2815, 2814, 
          2813, 2812, 857, 2802, 2801, 846, 2705, 2704, 839, 2777, 867}], 
         Line[{807, 2675, 781, 2683, 2684, 789, 2689, 2690, 785, 2695, 796, 
          2716, 2717, 815, 2722, 2723, 819, 2745, 2746, 831, 2765, 835}], 
         Line[{808, 2676, 2677, 782, 2685, 790, 2691, 2692, 786, 2696, 2697, 
          797, 2718, 2719, 816, 2724, 2725, 820, 2747, 832, 2766, 2767, 836}], 
         Line[{842, 2710, 2711, 803, 2669, 811, 2739, 2740, 823, 2749, 2750, 
          2751, 827, 2783, 2784, 849, 2787, 2788, 853, 2732, 2733, 860}], 
         Line[{843, 2712, 804, 2670, 2671, 812, 2741, 824, 2752, 2753, 2754, 
          2755, 2756, 828, 2785, 850, 2789, 2790, 2791, 854, 2734, 
          861}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
yycuxmK95h+7HmKXW9sb4vsfX8HVJ6q+Vw6mob7B+4MfB4fgo7CG7rX0HFDU
SBJ/u7cI95mrWFL+cKvlcc0m7jRY3uR4kvVjEXYufRVF+c/zkWf8lZwRYNgt
UrE7qRjj7kwlUP4WTXt/upb2/nTW7vuabsV/4bGCJS9S3799ZY8HdhXRU/3A
gmbOrcXMppBvbwF5Xgko8eb32ASxSw8rz2P9L/pkPTjWY/YgG7m8HSbaiR3P
0+SvniNfq8rdUYY+D22PybHolpBz+Wb2yCCCH5+88sC9MwP5Yyx9lpfGgpl3
TzQjiV9/E2OldeaJWNXaJvWX1RoWcNjwUPHemtd8581nfXJ+aJNWeZgN1z9y
mFHj9jm4anxnMsXY+5aSK30TwDDRN4zSc1JaY1iLxwplFjOIbO6whz9sGj+o
8+9NCQe6l29z8eKjNBPj1dkw4GFb+Zr4p+3A3ogNQRn4c43O5lWqyZDkU64l
TOTvWr6qjds0AY/356w6NxEEe7/e8qLys4r5Tis6+ULc8+59eB4r4i9Lf0P1
G0PgreIRfmztVQx9tfz9y4HrOEK3dP2vRrIPr/jU62VVjtf6e6WjsRRHt6bq
cr4dgr3ntpoaPs1A4+9Fi6Plb+OVF4344MEQeBVsjrshnobBhTfPSKpeQ/bz
l9Kmuome0Sy/s14mYOu+WIunZXl4mvUn3WeSV6sM9gsuqynFZpnOwOCHadj5
c12JJFl33lVNSF+XLUCNq2MjUcqxeP8Ky00V8v3KbzdlErguYWzKiS9cJb7I
cXGJ0wqSN7hWOJlfOUfkrDJLkw5Jwur3I9HdJJ87X8kYS27Jw09rYlftKPbH
In/v3wZkHem8PyHw6Ekyuo5/kKZnMYKnXk93alHvI3bsfTjy0xCluHpsU/Xz
MDtEZ/4W4uf1xbXXV73zwO+djgITHhm4bnz1DV8SRx6P7bfs2hiMY3FZR3cI
xGOV8gc+qh9J/sw63tXXXFAnQWCS5FvsuO06nW9VkvO5dmd54/ECnf0kPyNf
XNd0ft6zwOXo0S/+mHKi/xHJ5/iy3XM6n98wWX0jdVk4DvLJqqZsM8JslY1u
1L3w4dY2DVeVQLzL8pr19gtzaGHgGDYl+EmrZdaLk73R+qBC93xBP/jKejOa
Gpf+g8XbkMlg9Cpevy/S0RRPHBoRpnABLuMiRT5vpH+acWhotyFwi4Af1Y9x
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
dmgGZB0+RYPNp8oyfIn6mNeKdbQuvoV+vHh35ZNbAFT0Gn/B+y7E40vtjj5J
Q099mbZqqPpAZBev1n/845NaP9SNUpGFc9LB+RvBYCu1yQT7yuecDJbrMacg
1wFV7ZP6dOB8F52K/eZOpC9GguKLqXx0PtT3aiQ6fIw57Lp/DNAPLbLC6+Nv
+323vGoNRBYvlzR8zAkHabX9THgdJIz0y+hT/DIP4krd45aGoP2tuldodskQ
fGJjyR/idy+T3plnFO/MMjbnb61cdsj+6Pl3CyaNYCHT+c94n+2PJO1e/7Rg
dKnK28u0cAc6SNv0B5+bnmPwSnNpRaPOlat/GwqYovI9OyXxOeh/PD4eFI9P
mkclNyNHH+0OKjqz6l4gGqq26cT8qBM/XHkz532J+3XizVBpGIqZlowIJsr5
eP40c821I+CbmdmlG56IxjjpDa+Jcq4NrTyhvTsSWd6b4d0tbw/rv9g8tiGu
F+k+t7MiKhJNnG4y2KpmA4vg9SN8jrLzF5rctCAKrTK7vXL7KxMwbL+pZkTE
P8c0+ReJxSCf9I5YuqUvNPuO0PC+hVev6+Y3Z8Yg+etH3gdNeIHC3P4GeyL+
Jn5Z09szCei2/8qPV0rDQOL3XqnNRH3u5n8pFi5IQoWuOx5tunMNSpf2muL9
ogeuKHyaVo1CYuWN4wL7PZCYz+NUXuJ3I63YOaW5GSjH22xz0FEzcJpUpeP9
t/YbF98aHGSg3SYHmt2KQuBCTQUr3tc6X32b1XCMhtgWKfUpeUUhHtvaWmbi
+u3jLSxRwd6o/GNJ7thXLySxduIK5saIDxpPS/D4ovnzd8TduTXhid35aLxv
fPqKmeqFCj+UvIWrbKdZICiKd8hgzknX8YCMqgsBiKlCJerpixj4+uOHOf5u
s7M6NtKPXx/8Ptm++p2QjN4FyXjm4HXqlL7szTc0YLJaxmCKPxot7PHyWIv3
sV8edf0SIQ+3nXdsm9rrh1KSfpn5EL/bOn1Q8artvarv68/3d88NSzT/GP6D
zx9l1DdERdHk0e7jUla/tvqBnFXnGl8iXiPCqSnkp4EYl5vO/doRDZ0H/YPY
ifJlwsyue/HqIz5RGhKLTwa7shbTXKI+WhX3M+zMo1Do2HbdhXU6UMj32VcL
70NgrT8bFEZH+yoahi05LsKeN48KsberfGVwfb4IA7kmfx4MYvKAyunFHQuJ
eG9IlwG/8Q30I9yB5dEDBdh0M4sVc07+5ofaEMu9PLItFvGfHmZMyYSA9/mG
FQ3E8/ClftPEa40ItKFQj+3MFjfQe3YEOc9j3suB3bvy/ZHvVsPf9gliID4m
F43Xs6YbzymyGt+At6e5snLuK6D6izIr8e8+ezi0N1uEAUeie5ojmTxQYNz0
f+o5Zbl3OyOMDivqxJyerLuIOFYxF+D/xUH6nvZTfE/ms4VcAeZRwMPOJbms
QQct7rXxwu1zjvV2uuXSEAj2q83dY5+MLirrXMb54ZVofUNKayDsjdGon8wN
R17dG76dJK5/ceyVo8rVSFg2xiu6LyAGmSV4XsB5CZEertcUD5dy9ob+49U3
kVOey0hMXCQwUjamMxH3S2/BoYZ+5gT0xuhnXK1IDFyWTYzD8RDS26VE8XY9
f+jYokK8v+2q++4tWXETTtxcX82D8zDp8yqm+LyybDp22yvHopTxjqSOt/Fw
asvVclwfBQHviRRZOtr5R553XCkZggwUo3KJuJ5wX6TYtwjku+5HXAVnKtit
vrYG9+Nic3ttnjj6oDb73B+3xdKAlcUl5jURXxq5JqC8xB8FcHMuNVmcAekh
xlp4nLDUd/ZK3FgQCs878pyjLhOuhnro43FFrBpTtrq/KVr+O/PyL+5MWN24
+TkeN6qPhmmwiV9DmZxd4lkDt8Ekuq0Rj5ONIzg5r5Q6oW1CKe9PFmeDlE0x
Lx5Xl+heTH6zwRPVPzaLeOaaCyKibo/wOPz8Qp0QLX9/tL5ESe4VdwisL1PP
ySfuVwrp29o+8r++LXuBC6EDUm7oi4xJrE//daRSEMSVT8QlfJvN9p+JQM2l
dzdHqfoh3vp5Bt7nb/xhq6CKow9wnjyQXyWWhgaDDoXidgh58cZOXZYOZVyf
aWuUkxGTBITi9rQ025MDfyLhuLrZ7bAVN1GpxNcH+H75fNVeiZRjwXVMRXBV
YzzK/6N1H9+XoXVNO0KYE6AkdVcs9+EYdLCj+eZ/nocFKyzLn9yEkkfr166P
j0ReMzH5OL6N9KO5UPxoQo7DgS7KAUA31t1WWRODdMs9tuI8tr3Jffeyh36g
edQZmV8NROwbbqzFeY9+m+3Ua25f2Hli1b0nCppo/8OmRJwnu5pSDvcFekPT
oZW35j95QSj7jVicV7tLOc2MRmjQxqf84g4tCpaq7vqF8zDLX7xs5/rjV/X+
YIBf+eumT8UhqLGahQ/n8waHz8VrdjBA6vpPUTYxM/Qjp+AJzv/mP2VsolWi
QEz0k1jFAQ/w22HwFvcXQ6TfbZjidyvLEG2Tyk+CbUUwlJNzDXGbMrJwv3OM
+YpY55kEiGCXOR9C9Kdl6ZvFcT8VfmWj+tDiW6AivFZ2oXsAMmxf24LHMy6M
zOF+nWRw192ro3yKhvq1Im7h8c93g+eGNWIxUF+3qfulpS/quXPbBfeP0zsv
DtSOxcEys/S2PWauaJNY5AY8jvIjvW/LKd631/16WRa7I+FTA8tGV3l7tOnP
uircX0fxDP0y7GBAS1ns82pdXeQTKaWOx297rCslDhLzCodnQiFvJ7zQRi/p
F7j/7WzPfyqwgMi/d9q2Lao1QVyavCq4H1/Q43+iPioSRLKFPT3UbNDWQO1K
3O+vK7LQ1LjoCSzGycLHo5LgtuOVp3i/7hrSfxdD8d+F9Tfr5s/6grQ8c3nh
gzCw/bDfAo9D/vHiPaB48Zz93+sqaUZDh/XPiGeHTYEer6yFxz/Z3rkqwanB
YP/6zvWzFtzw3UuZFfvg3N4/G831OYJcTkff+kBPhNLzrs54PFObqKkt+EoX
pSjGnli+NhkOJDBVjxH1zGZKeR3eYoFehIps5mhLgdqX1XJ4nh4oPp7/9LY+
uLQ3xf8uCYTD21sL8ThqEl3Oy6s5DYooe0+uZTg4Zz7Wx/P9ogC5prrtdtD8
K7PmRJ8RqtH3/o7Hdd25//XiDVG8eF875FoFBH3QwoEBxoG4VLRf+eJSYeJ3
+7ZYBAqtZqB12gtOfwvPQJv8zhTheXoM6dFroXj0ytZ2IkMlOvpas+ii7lAW
svn0fRbP9x+Rfr1gil/vH5+gIcUnqPt6ZPVAXjyEmrYVn7bxRp+SDqvjecQy
yQQ1755IiG58UdJw2ROd+sy8BM9HUm6NDZr00aEg49uHwKYQ1Kq7TRLPXwSy
74j/epgMtnTGCm+aH7ro/7kNzzv+HHffWzgcC9kmuUxiviGoc4NMDp6Hvvty
2fiTUThsW2x67Ig0HXXv/PUMz1uregXoHfdiwUfeJWfNtzAkmnvBFM931Ero
sgv2hENL1C7vxIkIpKrZqITnv/l/8Rg+jHuqI94aBsoVj2dn0qPQlEUrK55/
SZAewzaKx3Cet6SKmKeDtKT9WmKejpLSH/9nnt5s77iqb58NvN14WzlTPAVd
r+EVxfP9IT0vlu1i1lAfcqvw2bpUJNPI04K/G+ircMX82SoL072fb31Wy0Kz
bexP8XeGxx7d8ou5bWHo/cZTlwyT0ZX43a34+4DmB6VgQzgHam8HlhV43EZZ
+sw8OkS/pnuvoj8pyBDxqa15IvQwE1W8PNOFv3t4fHs059xjgKzehXVOxuah
rU3Zs/j7xinfE9y5q5xQqbru67D3d9Ejme6TQ0TcijaaK9XsjRYsNGFnXX0X
SYTG7zMhnof/A+lwPYA=
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-3.2165381721105013`, 
       3.2165381721105013`}, {-1.7379882239054767`, 1.7379882239054767`}, {
       3.740169475434922*^-9, 0.7465115494460832}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$63868, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
    1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
    5, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10, 15, 20}, "numberOfMasses" -> 3, 
     "latticeBasis" -> {{-0.862, 0.8650000000000002}, {2.238, 
      0.31499999999999995`}}, 
     "latticeNorms" -> {1.221175253597943, 2.2600595124907663`}, 
     "latticeUnitVectors" -> {{-0.7058773893921396, 0.7083340392392122}, {
      0.9902394107903579, 0.13937686076807984`}}, 
     "numberLatticeLinesToDisplay" -> {4, 10}, 
     "latticeCellOriginIndexes" -> {{-2, -2}, {-2, -1}, {-2, 
      0}, {-1, -2}, {-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {
      1, -1}, {1, 0}, {1, 1}, {1, 2}, {2, 0}, {2, 1}, {2, 2}, {3, 0}, {3, 1}},
      "reciprocalBasis" -> {{-0.14270182114705077`, 1.0138624626257133`}, {
      0.391863731086346, 0.39050466612304063`}}, 
     "reciprocalNorms" -> {1.0238558994703117`, 0.5532188337401208}, 
     "qMaxVec" -> {6.433076344221003, 3.4759764478109534`}, 
     "mObliqueComponents" -> {{0.5812720848056536, 0.6260306242638398}, {
      0.6360424028268552, 0.34864546525323914`}, {0.23575699918456094`, 
      0.41609585938207855`}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.23199999999999998`, 
      0.6600000000000001}, {0.7280000000000002, 0.33499999999999996`}}, 
     "pointsDataTable" -> CompressedData["
1:eJwtUn1IU1EUf9ucm3MNMwuRkBURq5CIkr6wc/4ZJVHQByERI6RiRJSIRYhF
EeYfBWr1Tx8SZhJFRYiIyOq8zCL8gBDLgWRbzURdzbk2N9esd899By6P++69
v/P7OKsqzx08aVIURaxl2jJq62z+NbW/NUPNvXHXscYF2l+ZV7G90w8NMwe6
i+vjNNDq7oplsvBSwcvdwdpZErfdXWa1usw22lY1RQ7t9scL4+QrrtdejNPi
yMWptZv+gktsi9+TwpWHrs2i3sGDPueram+cHlcJAD8MDYoKwymun6CBvXlY
lIMMXzYL9+6KMqgGxvkDgdTl076aNsgVx7YUeJt/1UGpEZcLegWLcP52YdYR
Rz42sR4D8rFnmiRfE+7gBglIaKe9cTO2RJ582Lt1CdaxPisen/i0eiy1QJ5G
AWBD940zk+mnQfheKy7YkZ+5stQtrCdNWOrpKbcP03r+n6AOBvwHTtYfpRrm
k6t2sz/TpIFFh/fN6foDVLTx65rsq1FA1ttPjhKBYEMn4/lA4itqIev7AgKt
pGNIx58AltlrQsknAjcF3Wi2KvnHYB3jhMjL/iaB7ehJgfQjA8lDP9rv9zlw
F/c34POVR0/s/DZPEt+k7yehnfma9b0FpV4rPhLjMWJU7ZyHDfOY32t9nuyY
4XlQdL8UdZtVIAyA5Jcmvt5iwsNsUILK7cYNDSssqsxvjpxjIvAQSfwZPccU
JDmIAMk8HdjE8zpAMp8kXeE870An5zEJTL/qM/xm/RbksRsMgczbqMr+YQgz
4bck+cZA6lN0f5Jwiw1cinuCYiAy8Iz9iNB17q/gC97H9Pk0IX9Gc/V5NGOY
+2d0HRas4L5+mGfiOfgfRRa7NQ==
      "], "lineTable" -> {{
        Line[{{-18.932, -6.61}, {-25.828, 0.3100000000000014}}], 
        Line[{{-16.694, -6.295}, {-23.59, 0.6250000000000013}}], 
        Line[{{-14.456, -5.98}, {-21.352, 0.9400000000000013}}], 
        Line[{{-12.218, -5.665000000000001}, {-19.114, 1.2550000000000012`}}], 
        Line[{{-9.98, -5.3500000000000005`}, {-16.876, 1.5700000000000012`}}], 
        Line[{{-7.741999999999999, -5.035}, {-14.638, 1.8850000000000011`}}], 
        Line[{{-5.504, -4.720000000000001}, {-12.4, 2.200000000000001}}], 
        Line[{{-3.2660000000000005`, -4.405000000000001}, {-10.162, 
         2.515000000000001}}], 
        Line[{{-1.028, -4.090000000000001}, {-7.9239999999999995`, 
         2.830000000000001}}], 
        Line[{{1.21, -3.775000000000001}, {-5.686, 3.145000000000001}}], 
        Line[{{3.448, -3.460000000000001}, {-3.448, 3.460000000000001}}], 
        Line[{{5.686, -3.145000000000001}, {-1.21, 3.775000000000001}}], 
        Line[{{7.9239999999999995`, -2.830000000000001}, {1.028, 
         4.090000000000001}}], 
        Line[{{10.162, -2.515000000000001}, {3.2660000000000005`, 
         4.405000000000001}}], 
        Line[{{12.4, -2.200000000000001}, {5.504, 4.720000000000001}}], 
        Line[{{14.638, -1.8850000000000011`}, {7.741999999999999, 5.035}}], 
        Line[{{16.876, -1.5700000000000012`}, {9.98, 5.3500000000000005`}}], 
        Line[{{19.114, -1.2550000000000012`}, {12.218, 5.665000000000001}}], 
        Line[{{21.352, -0.9400000000000013}, {14.456, 5.98}}], 
        Line[{{23.59, -0.6250000000000013}, {16.694, 6.295}}], 
        Line[{{25.828, -0.3100000000000014}, {18.932, 6.61}}]}, {
        Line[{{-18.932, -6.61}, {25.828, -0.3100000000000014}}], 
        Line[{{-19.794, -5.745}, {24.965999999999998`, 0.5549999999999988}}], 
        Line[{{-20.656, -4.88}, {24.104, 1.419999999999999}}], 
        Line[{{-21.518, -4.015}, {23.241999999999997`, 2.2849999999999993`}}], 
        Line[{{-22.38, -3.1499999999999995`}, {22.38, 3.1499999999999995`}}], 
        Line[{{-23.241999999999997`, -2.2849999999999993`}, {21.518, 4.015}}], 
        Line[{{-24.104, -1.419999999999999}, {20.656, 4.88}}], 
        Line[{{-24.965999999999998`, -0.5549999999999988}, {19.794, 5.745}}], 
        Line[{{-25.828, 0.3100000000000014}, {18.932, 
         6.61}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {-0.7199999999999998, -1.68}, \
$CellContext`qPlaneLoc$$ = {{-3.2165381721105013`, -1.7379882239054767`}, {
    3.2165381721105013`, 
    1.7379882239054767`}}, $CellContext`rawArrayOfMasses$$ = {10, 15, 
    20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 1, $CellContext`tauSliderValue$$ = 
    15, $CellContext`tick$$ = True, $CellContext`u$$ = {{-0.862, 
    0.8650000000000002}, {2.238, 0.31499999999999995`}, {0.9, 0.7}, {
    0.23199999999999998`, 0.6600000000000001}, {0.7280000000000002, 
    0.33499999999999996`}}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period, t/T = "], 
                 Dynamic[
                  
                  N[($CellContext`tauSliderValue$$ - 
                    1)/$CellContext`dynMeshSize$$]]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {
                  1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open", 
                  AppearanceElements -> {
                   "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                    "FasterSlowerButtons", "DirectionButton"}]}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Row[{
                 Text["Angular frequency \[Omega](q), selection:"], 
                 Dynamic[
                  SetterBar[
                   
                   Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["number of mesh intervals "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 8, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`freqMeshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin], 
                Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 8}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        8, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}, {0.4, 1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 
        2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tauSliderValue$$ = 
        1, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], 
          
          If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
             Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
           LocatorPane[
            Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                  Dimensions[#]] < 3, 
                
                Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
                If[First[
                   Dimensions[#]] > 7, 
                 Take[#, 7], #]]; 
             Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                First[
                  Dimensions[$CellContext`rawArrayOfMasses$$]]; 
               If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                   $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                 
                 While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                  Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                  Part[
                   Part[$CellContext`kArray$$, All, 1], All, 1]]; 
               If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                 Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                 
                 While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                  Part[$CellContext`u$$, 1], 
                  
                  Part[$CellContext`u$$, 
                   1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                Part[$CellContext`glConstLocDefault, 1], 
                Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                  Part[$CellContext`u$$, 2], 
                  
                  Part[$CellContext`u$$, 
                   2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                Part[$CellContext`glConstLocDefault, 2], 
                Part[$CellContext`u$$, 2]]; {
                Part[$CellContext`u$$, 1], 
                
                Part[$CellContext`u$$, 
                 2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
              If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
              If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
              If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
              If[$CellContext`omegaIndex$$ > 
                2 $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
              ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
               2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
              True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
            $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
            LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period, t/T = "], 
                  Dynamic[
                   
                   N[($CellContext`tauSliderValue$$ - 
                    1)/$CellContext`dynMeshSize$$]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {
                   1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open", 
                   AppearanceElements -> {
                    "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                    "FasterSlowerButtons", "DirectionButton"}]}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Row[{
                  Text["Angular frequency \[Omega](q), selection:"], 
                  Dynamic[
                   SetterBar[
                    
                    Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["number of mesh intervals "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 8, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`freqMeshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{907., {288., 295.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax, 1]/2, Part[$CellContext`qMax, 1]/2,
                Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -
               Part[$CellContext`qMax, 2]/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {380, 
        380}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, $CellContext`k] \
$CellContext`glConstMMax^(-1)/350]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
$CellContext`glConstMMax^(-1)/500]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 0.25, $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], \
$CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6013889001492734`*^9, {3.6013891792952394`*^9, 3.601389191095915*^9}, 
   3.601389343635639*^9, 3.6013896010413623`*^9, 3.6013897227443233`*^9, 
   3.601389955778652*^9, 3.6013900783846645`*^9, 3.6013901373530374`*^9, 
   3.601390518838857*^9, 3.6013905597761984`*^9, 3.6013909951881027`*^9, 
   3.6013910467940545`*^9, 3.601391822685433*^9, 3.601392104940577*^9, 
   3.6013921467239666`*^9, 3.601392239999302*^9, 3.60139238315449*^9, 
   3.601392440920794*^9, 3.601392470945511*^9, 3.601392610517494*^9, 
   3.601392688817973*^9, 3.6015965463323107`*^9, 3.601596652471382*^9, {
   3.601596968315447*^9, 3.6015970142340736`*^9}},
 CellID->439718930],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    True, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{}}, {{{
       1, 1, {1, 0}, 0.515, 1.9132359999999995`, {0.9, 0.7}, {
        1.3439999999999999`, 2.01}, {{0.10303799426730416`, 
        0.30400849659947854`}, {0.30400849659947854`, 0.8969620057326959}}}, {
       1, 1, {-1, 0}, 0.515, 1.9132360000000002`, {0.9, 0.7}, {
        0.45600000000000007`, -0.6100000000000001}, {{0.10303799426730416`, 
        0.30400849659947854`}, {0.30400849659947854`, 0.8969620057326958}}}, {
       1, 1, {1, -1}, 0.8700000000000001, 2.380036, {0.9, 
        0.7}, {-0.5559999999999999, 1.21}, {{
        0.8907159387505063, -0.3119952807436526}, {-0.3119952807436526, 
        0.1092840612494937}}}, {
       1, 1, {-1, 1}, 0.8700000000000001, 2.380036, {0.9, 0.7}, {2.356, 
        0.18999999999999995`}, {{
        0.8907159387505063, -0.3119952807436526}, {-0.3119952807436526, 
        0.1092840612494937}}}, {
       1, 1, {0, 1}, 0.76, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.76, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {1, 1}, 0.485, 9.946436000000002, {0.9, 0.7}, {
        3.2439999999999998`, 2.8100000000000005`}, {{0.552392434837966, 
        0.4972474562747902}, {0.4972474562747902, 0.447607565162034}}}, {
       1, 1, {-1, -1}, 0.485, 9.946436000000002, {0.9, 
        0.7}, {-1.444, -1.4100000000000004`}, {{0.552392434837966, 
        0.4972474562747902}, {0.4972474562747902, 
        0.447607565162034}}}}}}, $CellContext`dynamics$$ = {{
     0.3805696678883836, {0.9143270301660429, 0.40497664365706876`}}, {
     0.3058320777534204, {-0.4049766436570684, 
      0.914327030166043}}}, $CellContext`dynMeshSize$$ = 
    14, $CellContext`dynPlot$$ = {CompressedData["
1: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
CybC4w9SB22HucBfocHNTI0G/w9vNHLw
     "], {10}, 1, {{
       Line[{{-10.707999999999998`, -12.370000000000001`}, {-4.492, 5.97}}], 
       Line[{{-8.808, -11.57}, {-2.5919999999999996`, 6.77}}], 
       Line[{{-6.9079999999999995`, -10.77}, {-0.6920000000000002, 7.57}}], 
       Line[{{-5.007999999999999, -9.97}, {1.2079999999999997`, 8.37}}], 
       Line[{{-3.1079999999999997`, -9.17}, {3.1079999999999997`, 9.17}}], 
       Line[{{-1.2079999999999997`, -8.37}, {5.007999999999999, 9.97}}], 
       Line[{{0.6920000000000002, -7.57}, {6.9079999999999995`, 10.77}}], 
       Line[{{2.5919999999999996`, -6.77}, {8.808, 11.57}}], 
       Line[{{4.492, -5.97}, {10.707999999999998`, 12.370000000000001`}}]}, {
       Line[{{-10.707999999999998`, -12.370000000000001`}, {4.492, -5.97}}], 
       Line[{{-10.264, -11.06}, {4.936, -4.66}}], 
       Line[{{-9.82, -9.75}, {5.38, -3.3500000000000005`}}], 
       Line[{{-9.376, -8.440000000000001}, {5.824, -2.04}}], 
       Line[{{-8.931999999999999, -7.130000000000001}, {6.268, -0.73}}], 
       Line[{{-8.488, -5.82}, {6.712, 0.5800000000000001}}], 
       Line[{{-8.044, -4.51}, {7.156, 1.8900000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.156, -1.8900000000000001`}, {8.044, 4.51}}], 
       Line[{{-6.712, -0.5800000000000001}, {8.488, 5.82}}], 
       Line[{{-6.268, 0.73}, {8.931999999999999, 7.130000000000001}}], 
       Line[{{-5.824, 2.04}, {9.376, 8.440000000000001}}], 
       Line[{{-5.38, 3.3500000000000005`}, {9.82, 9.75}}], 
       Line[{{-4.936, 4.66}, {10.264, 11.06}}], 
       Line[{{-4.492, 5.97}, {10.707999999999998`, 12.370000000000001`}}]}}, 
     14}, $CellContext`dynTab$$ = 1, $CellContext`freqMeshSize$$ = 
    18, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyMvXdYVMsSr42ggKKIOWHAnEVFxUSDOYs5Z8w5KybEuEExYwQTRgyYIy5E
DCgYEJAwxJkhCzMEFRnl8zJVqw/V332eu//Zz/6ddWp6urp6dVe9NVjNXj56
rqGBgUFURQMDo3//nhRYuXqTQaYBuU3jnzwcYhCwv87XmgY/NAz1tfd07U79
0ElbDeuVd62qlXWT+r3T3kwolN60O8sCB3P9xO4tF/IeF0hRm1JzXBZxvbXG
f2qjurlS2zfbLs+05/q6EvtZ0oF9n81m+WmIHbXkVMHopp9LjqxvKHleIXns
nbsytPd3oodItece8atrmynrBvBP25r/FS0NTJf1Ffrn2WfDyLjVH9KIrmDH
/laQBoxLo+Nht36uM2l4iOtr9ONng4PDO915ye231H9fZvJyjZ2DMpPOD+s4
+ap37sZsWTfWzydTOMywMl+nIfZ1bIVzZqcHC/i8gb/sqzboZ1eo07LfPc7s
WHOsnOzHj283nvT/N5+oox9bXhmb9a49fx79eG9twFzLLVxHP06wO/H73Xqu
ox+LsoY3dGrAdfSjzbvZJ/Yc1RA7amml588Xwyy4jn58P6VphXlOOUQPkV5f
6hRWqMuWdfSjb53lP69kcR392F67ydCgbw7RFexkUmjK0fLCeJjSo6hlmVtc
Rz+qqlh5Z2/g3wv9qApqOXZ3n1w6P8zbYszCOUlcRz8eqpB4bbdtHrGvY4sD
NCPX9cqj/rL3irvZtFZeLjt9r2Xe62RD2Y+Nopr1fPBGI+vox8Wb7tTdMkwr
6+jH+fdf1n6zjOvox/DDuoG6gVxHP547HJfy3Yzr6EevGUkDR2ZoiB21lP6s
Q/cpeVxHP5pMHTH+bjMt0UOkvtOLLlq7cB396NG/W5lphvz7oh/nXZtZ9PES
1RVsRKXnLHZiHh0PO/l8aaJfMdfRj+PHzfBQbsqXdfTjWfsBGS0e5NP5YYEH
Pj7/5c119GPMxfnvvXrkE/s6ZuIzso2fZx71l73juvouhSG5rFfbB7NrWRvI
fvwx/7pn3yZaWUc/WgdW/rB+ANfRj21em6T1bs519GOzXsYtsos1so5+7Hbg
vGX5Cvx59OPjp0uX3x9D7ailhw9X2P0J4zr6sbnW17zXplyih0gtB7udsbHL
k3X0o8svwyGvTfJlHf2406ZKrtkLqitYxwUNWzsMKKDjYb1Un8ekunEd/ah2
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
aXA/olzHHbhPUa5jG9y/KNfRDe5rlOvYAvc7ynW0gfsg5Tq0cH+kXMdtuG9S
rqMC3E8p1/EX7rOU63CE+y/lOr7DfZlyHVfhfk25jq9wH6dcR0O4v1OuYw/c
9ynXYQr5Acp1NIB8AuU6FkH+gXIdmK+gXAfmNyjXMQXyIZTruAj5E8p1YL6F
ch2Yn6FcB+ZzKNeB+R/KdbSCfBHlOswhv0S5DsxHUa6jIeSvKNcRB/kuynVU
gPwY5TrsIZ9GuQ7Mv1GuYwbk6yjX0Qjye5TruAD5QMp1jIL8IeU6MN9IuQ7M
T1KuYy7kMynXgflPynVkQr6Uch2/IL9KuY4QyMdSrgPzt5TrwHwv5TqeQX6Y
ch1HIJ9MuY6GkH+mXMdSyFdTrqMs5Lcp17EJ8uGU65gK+XPKdayBfDvlOjA/
T7mOypDPp1xHEeT/KdfRD+oFlOuYDfUFynU0gXoE5TreQP2Cch0/od5BuY7x
UB+hXAfWUyjXkQX1F8p1nIF6DeU6RkB9h3IdwVAPolwH1o8o1zEE6k2U6zgI
9SnKdcyDehblOmpC/YtyHUVQL6NcR2Oor1GuYxPU4yjXgfU7ynVgvY9yHXlQ
H6Rcx1uoJ1KuA+uPlOvAeiXlOhZBfZNyHVgPpVwH1k8p14H1Vsp1jIf6LOU6
BkM9l3Idm6D+S7kOrBdTriMa6suU6wiFejTlOhZC/ZpyHSuh3k25jvVQH6dc
R2+op1OuYwLU3ynX8QLq9ZTryIH6PuU6jIAHoFzHV+AHKNeRCbwB5TqaA59A
uY6TwDNQrqPMND3/QLmOPOAlKNcxA/gKynVMAx6Dch3dgd9wLNGj5PfmuEM7
RvnaaZn5+/13GrByAX0v3/dcs+iPNDC0/bo3VlxH//o5NFq1rRPXIyoXOJ7/
8O/84zl9s+l6rqPf//NqdGbUJq7P29jF7GPbH1KdpdO8r67jOq6H1Hf9nD6t
5Pr7I6+71+lfICWmNToxfBHXcZ34JbGJNSy5XvXkkuIR8d8lV6tOs9dc1Mg6
rh+r06M97M9y3WbJ99VXz6VIxz9Vt9jfRkPGo5YanbbzuNWW635bFZ+N3sRL
Q6U2tfzu58g6rrcx81fH93/J9fySef4smadta/d2Hn0+RPJqmRkwbwvXd5To
ZyQTcxerhsu5jusz2uST7fUDOezVF7ORdbsaBlQp+b5/JI+Ht5+078PnAeM0
avDt/Zvv8fGXKfFLMFvSz7lPt1huB/1rWSn4TdEQraxfNLz5ZBP7LUV3G7fr
rhO3L/cFj3BNLG/I7dumWbpbt4hlR3rMbGU5TSPbwfVwwvZIRZ+p3L5+/n9I
i2YU397HqH0Fs7iSeWfLam5fd67SF7svKubn/XXxVCNuB9dPyz8vpF9duP4m
ol37iDJ5Uhn/1B/fTel6U7NT4ekNu9XW0vXA7ppcXevfgtvB9fbm0Ij7a8y4
fqtkPWRLOxdX8e+dy8eJ8T46pmWv4dHc/uQ/5fL7X9ayXM/lRXf+y5Xt4Pp0
Whd06GpZbv/zqGn9p+1Nlbx6SrtXmnE7uG9MWZO1O+ZgLo0X5r1uZWFsvTwy
P2rpzO9tT/u24fb16zNRupc73qLcKCEe2Q6XwGo16+TR+GXGF9c+cKvI7eP6
H/lyblD1Tdx+25Jxhkk61ytb815w+7iPPf2j2R88kdu/HNDvteSqY9FnGOs5
ldoPkXS1G164k8Pt6+PlhrTWuGLa6FG5ZP51LOHMVHf/gdy+exvXXcEWBvaL
arr2dzPh9jG+hnZaVO3RjlwaR/b3PtdbMSY7l2nuVotuM/mvlODedEGr0X+l
8cfa7vbuz8eDcVdTZxwWFcfX/6GS+XzN2vUuf2DYX25H5gQy02yy/u2rqK8o
cGo8/t5vqcF3I5N3Dbh9uW4bUrF7fBs+fn1cRzPLCaOWtLibJ9vBuDMasSjS
wozbN5xxSeFa/ac0Y2LwnwZ5GmJfwUxUY5/ahHP7M555Ff+XrmTbWsTkjh2V
L9vBuGtx+si5DvkaWT/6Tu15e22eVPV2dWeX3xq6Dpnr7gFbts7Ol/VeJftG
JrN48mybj8TtY9ytC+nTPqouH39ALc/Gh15opKtPfc/uGM/nR87vHZ3d1tif
27+hj1O2L3fkwMDL3D7GXdS4xfc8dnL7S7qF1qy6Ik2a0DnUxjKc28e4M2zS
e9+DL9x+kH6fYdOmzOiQcZ3Oj1pq9cF8SGQj7vcDFUa4L+6UJN3+1Hnfn//Z
BzDuHnn2Dx1wittfVDKeXyx47objhiO5fYy7tmUWZ/VScPtOJf76KrX7VaN/
7fHcjxh3oxU3LW3qc/sX9Ps8a3+3y8EeqXnEfojk/8MutukFrrcqmYdAyd30
XftOcXlk/nXM8a5y4qAlXLfQv6fYOM22xhW6czsYd43XdT7ddko+jSN7sxF1
G788n8sml5xbfkl6P/6VcpOs3tarw/2FcafttVTt1YHrTfXjZD5TegXVDs2X
7chch23jzG9FGlm3K1mHRdJVc4NxHkl8PWPcbU+uuU2Rzef/fcn+/I2FBjYM
/NO3QLaDced9MuXAxzhuX7+f/5Su5XpX65FA7f973623qW8xqEDW9+nXCWvy
x/TKnfbcPsZdDyeftD9ltLI+q8TvedK32D3BLoO0dB2y6xm1tp+cxO0v1q9z
Nn/1f7GPWnD7GHcmRiuczq3m9vXzrJG87Udd7vCK25fzeMdbm7W14vZf6OOU
1TfaPMI1nc8/xt3wwmFRwxvkknlLl56+Khx8eidfz/Lv9lxX3wq9wue//a1x
C5ym5bPK3Z4N+DIgn8yPWmp66GGXx4m55HslS++3jDObPSKP7mNM1W9Gff/i
PLpPstyWP5t+eZ4n28G4i3S/Y9HgJNdPldiJkLL+691+519uB+Nu4Beddpg9
1yvEhudVOF3EcuZ/rjrtSS6xHyL9OrjyRVSrfKI/lyr8DWt3bEM+mX8dM6vn
MLj5dj5vziuPdo/vXsxqPhz4skIZbh/jzrV2nUOXN+fTOLL3O3Umt9I3LQsq
icdctCP10vXr2T9XQ9aDQcCc5V/2lu/E14l+PT9n9foP3hM3MV+2g3H33MIl
qvE/O6jj+25Xs7ce62pTOyHM8+ISl+RdfB6O6ueZ9UvvNNLRndvHuHtRKf/p
5Rp8/F79atzqpvspZTZ+fOpJB2pfwd4G+L9/+D/rR7/eklniux2uyqbcPsbd
SKPhAxSruX1Yh1I5r5/LXlzV0nXIXl2clGUdyteJfj2ks+qTBzy95ZYn28G4
c4sYeyL4B7c/xGnYhcc3c6TFS369Cu7K/Yhx16Da10jTjty+Vh+nLF47Y8LS
6FzZDsbd965rFzbaxHV833U7/G33reO5ZB5y2bmvu/Zk7+P6TP0+wxb0NCtq
2T6XzI9aGtD2UrcgBddfl7wfldKnrtd7fqmeR/cxZtyjxu2OP/m8fdLvk6z2
Ijfzn158HjDuIs7NYQuKuX39vvpNanDZzTe1IZ3nQpZfMLn7zy3cfm/9Ps/q
9tBuN+pM7YdIxYkNJx/+yu3j+y56zVGns5F0/nWsvuuH6Y1bcvvwnmJhPYq6
tOrI7cuIwVfXR8WTcmkc2ecHvFzfrlDDppboadKgEr8XS63uTPRPMOZ2MO5O
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
vIGDpf0IvsmD/F+ZZgr9CC7A2dJ+hAXA8dJ+BDvgeGk/AnLCtB/hAnDCtB/h
FnDItB/BFjhk2o8QCZwz7UdoD1w07UdoDtwm7UfoAXw17UfIBx6b9iN0B36b
9iMMA96b9iPEAh9O+xGOAk9O+xGQP6f9CGuBV6f9CMi3036EZcDD034E73Jm
7pZLM2ncMeTtaT9CL+DzaT+CI/D8tB8hHfh/2o9QA/oFaD/CNOgvWDaqTJ9Q
rUnAVdiv1H63x0Y01LIvlk9aNOpjHLAE3u+9ug3Zu3aDlk0qOf+Yys+n7sms
vKgO1/H5IQ53MrWjtMx//9vCtSeMA6zh/DywSuXYMnP486g/Pj4z/P5krufD
PXR6q5bRM39p2NW/ER8+ZBvL+uteB47NTtXIzy+HfE5Bi22nptTl+g/If5ZN
H2a/++N3JsF48Hn/3HdTxg7jz/+GPP/eazdNv2zIlHWgJJ+3q/lf0dLAdOaS
mLt8/WkT2b6Pds8alx/f5eczYN0OvqDrfut5GlsC84z2NTte1/Px5/azYX+O
1TX70sspTdbnw3lmUPOn38YZpbOJZDwdYDz4vAbuBS1e+9huDMuQ9bZwrggw
OFZ3xXY+zgWwL13frMh614LPgw/kaaflPXGcOUTLfuv/Tors98JGrlOO2GrZ
7qbdXtfrbiTr9ydXK3totFZeVzgPMU8/nl50P122g+tEMf+H29tN3D6uh4gZ
U1v2Ha9lq471P77ygJH8vHJ8ty/GK/n6xHkbc7Cq5ZVO2bIdXCcnJkfFro3W
yDr6vW7wts/JDhrWLW1FpdWHy8qfm9u709fxI7XsOawTnP96dkNSmrhy++h3
C4taqauO5Mg6+ne3wnpSavkcNnj97J71e5WVx7Oo3Tmpx2cNuw7rGf21u9WR
79ObcDvoX986y39eycpmXWCcOP5kh5F3K83WsKPLVV5W/U1k/xqnNOloPoN/
X5z/ZZkJPctN4/Zx3jKHTfp5u5OGWU3alvAuraz8veYdqlN1i6GGbYN1juvE
o8vU1UoL7i+cH6Nz6TZ1f/PPxe/llNl049M4LasEPD/OT2XoL0vzvT7ufWY5
eb0dP9hgyDVlrmwHv5etzZztny9xHcdTPeR5tH/jPFlHO37X2k/51TOPndb/
nSZ5fbq5ru7xxlHLWni9slm620DW1xu8Obp9qFZ+Hteb4ZKDPtXmch3Xycvc
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
e+HzaP+qrSE72krD8Dlcn/kOaeNi/u0P+u8bxlCvNrFTYsfpGvanh34943xW
ZQFW9duFynZwfa6vNSZsw2ZuH9dVm14sPm5ANntTYucBw+d9B1w293+fwwbB
/KNfNsdcd1yzJka2g+vnq8bjzA+WIevy+adT/+9Pf6nYA/06Yfi5W9az+ZPH
ZLIusM7RX09GZFwNX54s20G/L1qQbni/f5yso7/SXm27u6f+R7jvv2Y4nokN
I4+Md8B947Xs97Ggl/YH/vtFLwf9eBiOX4Lx3IJ1jn53hvHj/x/n3xfGgzrO
20gYfyv9fDL8Xq4wn51hnnH96B441fTYni3b4ecu/Xyijt/rHc6/fn9jOD8O
sB6OwjrH9VYV1g/awe/VGNYD6jieNbB+VCXzGSH/7xdgH8D/Rvt5sG418Dyu
2+uwzvXnB5WsZ0B8QTwynE9ziEe0g+vzGcQX6riu5kI8HtfvD/LzHWF/sIX5
R79kwH6CdnD9nIX9AXVcD/NhP0kvuRckyZ/7a0+XAxlXUlkNWD/or7ZRficW
bUiV7aDf7WB/Qx391Rn2wx76fVgez1XYh/NhnaPfy8G+rSF+uQx+SYRxyvnw
b0lm5+crWR8Yp5xXgfcL2sH5j4D3Beo4b3/G6N8vj/TvO/l74ftO/559wHD9
NIT3I9rB+UmF9x3q+L2mwPtxEnC8OD8d4ff/G8E6x/W2H97jaAe/V294X6OO
48H3e7b+/CDPWyCci/B5tN8Tzg/58Dyu261w3hgI48R5+wW/z4/P4zo8B+cW
1OVzBZxzaurPUfLzB+Echc/jeigH5yXU0b8v4Hw1X3+uk+3XhHMdPo/+mg/n
N9Rxnl/AeU//fs+QP9cNzpP5ZN7ewbyVL7k/psvjaem+qvezk6ny8zg/T+G8
ijquqyIn/fl2InCkOM728Pv5+DyunxpwfkYd1487nLdRx/XwFs7nqON6wPM8
6uj34XAv0MejRva7G9wj4J4i63hPwefRj0PhPoI6+uUS3F8G6e9T8vPH4D41
CuYB52c+/D482kG/XID7FOo4/wfg/oU6zuc4uMehjn5fDvc+uFfK9g/AvRKf
R78PgXvlK+Qb4XMbwO+64/Py+QTurajj98J7LuroX7wvo47+XQv3a0uYfxz/
nMDKg1xZHuTlUmQ/roM8ANqR9we476OO6wHzA6ijHWvIM+jPzwWy380hL5Gg
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
LvrAUxc99HCxyHN6Yp8DV9NKRTvlud2q2+uT+ij9U54Xf/L8+k600g//XgPF
U567uOR9vS9JJ+IpzwGOExxTMpR4yvOqXwKtvzVT4sV3lDa4+Q/4pMRTnptY
TK117u4b0U75bAo+TP1Q/n+uqL+qcaJy/ZTnfPPEvVf+0ol+KM8pUwb0q9iv
9EN5/vRgyfXR/1F+V6wvPL2jWvqVqYKwbqI8tz5TsTT2Y65opzyn9O7buVeY
cj2UZ9MPpz1PlRSLdvHdH9QvqB/Kv5nDUeuP/3NfKJ9ro2q7zK+jxFP++2+I
1dfsocSLOq//9odxyUq8OO807s9Vhb460U75DHEZcbtjxGvRj/geSqhN80/X
i0U85a0u6iDUTvn/0j7ugJd/ieiH8v+mXVZVl/rK80l5XpbmufNq4zeiH8pb
b9RHqJ3y9sXw84lFU7NFO+VnY8KWqnbb8kQ75WHM8qrBFoXKdYrzulMOO/a3
LxHtdJ0DXR6mHza+Eu10nSNdTk67XEOnGop1KN33Mayd7mMA+qF2ul8OVe47
V9wqFu1iPx2uk9opnx0xXmoX50odbWVqHPJctNN9cUbeqJ2eW3M8t8OxDhXn
MCP/FE/5r8I5zBQv9lXhPlI83Zd2uO8UT+N9j+eH4ul+/YjnjdrpfiXg+aR+
aLyfucwtbXmsSLRT3nzxnFM/dH/74X9B8ZTPTvjfUTzdd+8rTcydV+tFO69z
UT+U53EVc9L7a4pFO+U5BfPwZayXKc/nMJ9QPOV5Yb/kVz3L34h4cd4p5iuK
pzzPwDnGFE95boh5kuIpz+GYJyme8maL+Zbixfl1mJ8pXnznEecSUzzlmeZ/
auf1NeqH8h9w/6Cv1XHl+imfp6KXB2f8T54p/23x/qJ4yvPHh9W6gr4jL87v
wvuR4inPNfE+pXjxfbrxCVHRh5V4ynMC3tcUT3nu1nn+E5+/1xEUz88NpnjK
cw70A8VTnvtAb1A7r+tRP5T/FdAt1E75fAD9Q/2I/UrQSxRPef4M+orihf8Q
eoziKc+roZPpu+GUZ4duK2zaxinjpTwv2GLtEVZfiRffd/Pq2/flbOX6Kc8P
oD9f/cs5vRQvzi2HjqV2Xjekfij/Ruhkaqd8znCzrXV0RLnoR/iFwh/GjWij
9EN5tstMOOA1RomnPE8PnLm0W5lOxFOeXwffMHjolOunPKdhfUHxlOd2WPfR
d6Ipz5OvOzr6RCr5oTx7Yb1D8fy8XIoX6z6smyhe7N/B+uvVv9QxqZ3yTOs7
6ofynFdn5NiD2Uo//Fxcihf+cKwrqZ3y/AzrU+qH8kzrWYqnPB/D+pfiKc/q
oKB7Yzrr2XftL6cMBseox3zU5O+ieMrzJ6zTqZ3XQ6kf4ZPv1Xn1vLFKP5TP
GjGfeT/voMSLfcTgDNQu9mmCY/zz+926S4/BMf75PXqdingItYv9BeAn1M7P
oaX+xfdqwWHE99mR5wzwHOqH8twT/Oef3zG/nJIL3lWP8TFb8CVqp3zOAY8S
3+9G3izAr6idxjsYHIzaabxTX1pu9R2qXI84jwU8jdrp+lcx/kbX3wXfYee8
zsYvOazrxlKJ12294FGZpC+VeN3WykGh+ckvJV7n9oUqevXeUonXtQ51bbzx
WrHE696dcj24xFQo8To6d47zuh7j6i+NOKKWeN3uXoe2TXnyUuJ1NXWpPSYU
5Um8bvO65N4VdUslXpdk7bsz1vO5xOtsJz7rGLHypcTr1rY6mtnGqkTidR0H
19h+e1C+xOtWlvraT7ItkHhdzK0tpkm6IonXnVA71bBJLJB43WZwY87rJvaO
XzqzrlridUNQZ+e8rn1uUVjXsRqJ113WZTVY0lsr8bqD96saLAgtlnjd9pPz
j21KVEu8btSdutHX0oslXvfDI79d/fVqiddlZJo9NhtSLPG6xV598vKGaSRe
NwV1Ac7r1r13ru8d8kLidQ2bbAwtj9dIvO5dyXa9X7lG4nVU3+e8bl3QjQGF
1oUSr4tf+Mu75j9rJV43aLXN0lUHtRKv6+z1e8+PZzQSr7MK+X7xfftCide1
NF8XYd1eK/E6p9jlNu23FUq8bve0ogijpVbidR+f2rrGnS6UeB2dY8Z5HdWP
OK9LNDxwvtxIK/E62gfHeV1/w63ohMtaideNtrtnEzlJK/E6r+hztZOnayVe
999La7JKrLQSrzvw5FLaN++1Eq9zmF9yan3NAonXfTXYcWbjyAKJ13mc13Vo
Pkkj8brjHQc6Na4qkHhd1rU2h29XqSVetwL1RM7r7MyDnEZuVku8rv4M92X/
aa6WeF0C/Ayc172An4Hzunl1/pwysbta4nVzJq1ak3SiQOJ1nT4M+ay9hUbi
dWd83h8Im14g8bqgXbGh01K1Eq+bd+LchPtlTyReV7W/1WiHmnkSr7uxftad
xcH5Eq8rQh2Z87rclyOGv/d6LvG6hyEZdlN+fybxujVHe29P1edKvM6v7tkh
KZU5Eq9bH/221u0NuRKvi0U9nfM6zR3XQRda5Ui8zn1Bn3M9pzyVeF3ZV5Z2
hx6pJV5nM0ZT2+FCtsTrsr0blb2qKpR4nVndo6Wvgm5KvG629q56VO9cide5
XFoWOrpflsTrPOD34LzO/bckdfbVpxKvO/tdWpdP8ZkSr6tTNPph05wsideZ
9f20vVVFjsTrFi+ysrXPyZB43U59vYXDqx5IvG6VZdmRG64FEq9bDt8I53XO
13pF13a7J/G6kI631zskayVe19fPMeWQ1QuJ1yXAT8J53Wu7wtOX0m5JvO7V
svpvkoIzJV4Xmt99XvL9ZxKv+2naqVrvt+VLvE57IL3twDdqidc1fRAR8uqq
VuJ1TVi7OB8P/XBet71yyagvH+VLvI6uk/M6s4bV4+W8rt74hrfiD2RKvG4z
8sZ53es61c8t53U+yD/nddNxfzmvW477yHmdHe4753WReH44r9uG543zumA8
n5zX2cRXqJaOeCzxurp4zjmvM8f/gvO6rvjfcV7X+2GrSy/WPpV4HfmCOK/b
MGPyjnajsyReNx3zMOd1uZhPOK/L6P0utcHFbInXGTBfcV7XH+ddcF5HviPO
655hnuS8bh3mW87r+mF+5rxuA86v4LzuL8z/nNep8R7hvG56ln7BwInPJV7X
J2DM5RMz8yVe9x7vL87r7KErOK+bivcj53Wn8T7lvK6n2rnQc7BG4nWz8L7m
vC7yxef1rGaoJV5XCD3AeV089APnddbQG5zXLYVu4bzOFrqF87rH0D+c1x2D
XuK8rgf0Fed1vaHHOK/rBJ3Med29K7P/WPR5ocTrCp+eMll9rpV4nZ2xQ1DB
WK3E60ZBf3JeRzqW8zof6FjO6+j8Xs7rSCdzXlcQON//96Zaidctc/y1qnVU
ocTrwrwy50S00Eq8bm9nhy9KDhZKvO5+Qdm0T821Eq+rg/UF53WpWPdxXqd7
/GTy6r1aidclYL3DeR2tmzivo3UT53UVWH9xXke+L87r1mJ9x3mdd0a417Y/
NBKvu4jzEzivC8G6kvO6WVifcl43HOtZzutisf7lvM794TYnw8piidd5gGNw
XjcU63TO6zpgnc55HfnHOK/TXBk06pSVWuJ1P3fovtrQ9oXE606DM3Be5wyO
wXndT+AYnNetAQ/hvM4G/ITzuiM4r4DzupPgMJzXWYDncF6XAP7DeR3xLs7r
yM/GeZ0JPIrzOkfwK87rtoCDcV63O9lolnGiVOJ1v4KncV5H/O3/AN4qzZ4=

      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
L4DXhXIGdAutI/zeyHwqPQMeUOTnPpTjizy2KsgdBL1Ye5Dn8ppbcCz8TWDJ
Qabrw+8Fni4bLfKaTQrysvOep/550JdrXYKdcy/4DqUW9NuJ94/8jx25+dqf
74JjNB7o18DrEs/DEPCpzOd+K/KLE+vnR9R/vtFe3wXbUBbB24VMs4K/Wwuc
l3jO7wdr8nwk9CXgwsT6TfbJato/GboJ/AcSnxHZls/BPwm6ccFnRvxVmduf
zftfcsvMhd4JPQe8oMjP6nMV6KYFt6/v/5bbj5I/pX3ZqMg2UjvKQzzXCOO6
mPKv7BzwTko1+DPAupRDoRuA8zPbPxUKPlc6X+3BEyklak/2TMFtvJ17vfbI
rtB8UH6NrB/mIVcDfA2ZQ5HfJd0Vzv65RZ7TmpS9kfWL5LWfj0NmFKUp9OCC
z84A3n+Rew8Pgv4S+jroTsjcqnOfuP2LwGsT+7mDE/uGlTWugveu9vDFBZ8x
nbWneV8rnIU64CD4TaD7ac+iL2uEO6JFsHtbam9ylt6XHav7J7YePk86ODV2
zr1Xpdv+gD4T3hW6F2SnwG+n84Xsi/IrkfkTmSap/druwR6XHVUHXMbzXnAP
788HG4Z23sy9Zg9mbrMavC7wlmmNi9yu7sRi+E3hd8l8V54sn0PfCveC7jvZ
5BWhOzHmFdT7J8jLRrg0932qe0RtvZD5rF2p+aROE/jdM99JupuOjH1etP96
gzWCzVZbNo7uOq01uDzxvno8sb0lu6s37fTSeVEdvrsqtx9+t+ym2P0/MXYc
Q3t2O+9PC/bPqaB8vUrAQeBfJfbJquW+3yqGO05+U23wNNmlmW3nRsFGqwzs
5/mMYF+dLhtDNmvkPh0fe950f2uu5JtfpntH9m5kv0AybaArgzMT68l7ZC/E
tucrgU/yvUTnj+/3zDymdrnlJD873Ik6m1fQ/pOJ76xndL8kPvuyy9VX9Vn2
/T/FtjnlR8lur4lMV+q+KLtNdpps2sQ+oO6LcykZ9A26O3j3HDIrwId5rgr/
RnAJz0/LDwCfSnwudE8/lzq+JJtN7a+IHId5NbEOl45drTrwX0mtT5rAe48x
ruf5ZfjPgI9kPk/r4S/KbFdUKvgOkn7WnSe74iXwP2SWU2ed7MPUc6E50X6V
/yJ/ZRn4pMYQOQ7zSub7cz91X+V5Dfy3wS/l84Q52RZ8Hvk+7Qqe83XUKxXb
7z4YvDLzuTsfmZdy2yKlpbNT21ytctPa23XB8rH3mGzWLLYvL1v932LHyuQH
au/pvJyQ+kzpHPye+2zKbm2SWz8ovtS24D7I5r0M/hHguZFtx0U8/wbuoN6B
YIPQZ9mlh4LNc9squjs60M5ziW2bVYltRZ3X1shcId9JOgEsE9tHVv0XaGcR
9OLU/rrsTNmbq8KeeU2+o+YaegPYP7Ov0SL4UNJ7bWKfa53TqqntGd0X5XRn
UvZF1mP1g/3QCHw4sz31vuwosFWRbbUzCrZZNubW1R3hTyr4LrgEegDYObG9
ITttb2p/vAB/WMH340Cwf8F2QRG2xwN8K4Z/PLzGieOu6oP2pwJZFXVvFHxP
3Q+vS+I4Qzf1N7FdWpLYtnwfLKbNBZltqHdz2xKNgz7U/VuqyOdBd6ju3DML
li8JtpnGvl92OfSSzHbZptx9rh1073T59czrY8FPuT2yvzY2czzvJu35zDZR
dJD5ihkOkl+m95Fjhm8l1hVvJo4TXgu/B3hNwfdI34J9mbXITqbNq3k3EJnr
Uut42Reyk3R+L6eNj5AZlTrOOkl2S+y+zY3dZgf5TfIJgs3QCmxDKVvk+m0T
27fyHXbTzo9Szci/x3PLIs/v65Tmoc/61mBkeoL7+Ma78mvA2+jPV9D/wC+h
/s+R79ARie2ukYnv1U2S0T0f7GrZ1/J/5EdI78iuXiubibGUAbfpXIA5ZYum
Fjwi8bcOC/z12m+Jz6X4v8feY7JN3qCd2noX2TaaCT8Dn4E/H2wQ7Pbt9PVj
ZKZJL9Knf6DLyyfK3PZTuet+IZ2fegway5+ab/hfQ+9LHaPQ/dUYOpEvR92V
1P1LekY+MfSB8H6J3I/SwX4rF+Zf7T2aW5fKhuxMGy2D/d8NHBl8QPl0/RPb
WrLV5H/pzI4G+2gfaU1VRz6HdHuRY5Jah28Vt5eOgze9YJtYa3QhOF7nJNxH
oyhHhztrWWb77iuNhT6+Q5//COuo2Ofm3HukW/iWbErZlqcWbLvLhn8isw+r
/txZcJuy8apCD0xsz8vWFK2zKb8uTmz7Kfgt30dxg+oF+zs6yz2DjpJ+qFvw
PS951RvOc134PQr2+0qFs7+Hfm9EZnfs8y5/pxr8/Ty/F/mcy7fdIH3DWZ6Y
OSei/MJdjHNN7BjFNvAN+Ftjxyd1r2kvVqLeN9InWufY++rn2LqxGN5y2tgQ
+w7dGNvvvpw+jC/Y1+4NPQcsQvbTyPvmk9hxlO26I2LnVp5X28X+ts5FRp1j
wTW0/2PsvboD/IjvfqEzAf/9sM+137WPJfOTdJT0PjLzZffSxt/h3P2aep4W
5z7jWvMl0N8oBhX5HtwJ7wfoXeBWnj/T3gh3/Qcau+yW2Pkj6bWjEusZnY0H
Usef5tLmoyEmo9hM+cRtlg0yyuncDi6k3A19B3hkEnwc8PjEOkfjvyfz3K/O
HRO7C/5tskFi2yqKnYnWmirmtSb0TX2cHr6leVDMcAH067FjSprz0alzhcfR
/vO0Pylz/G9m7pyT6ipuOCvzuT6YNRlBnXGR82t9wrlUvEDj/RjZeYr/5V5X
xaPWxZ4HxdDUvmJiNyP7Q9hv20L70n/PUu8O+cy0Nw7srtgT70fk1kvSzUtz
x4V6IDOrYPmespOD39cFelrBeTHdGyMVc9YZiBwHX6B4q3Rr6ntQe/t/qb+l
WH0rcHjsvNhI2dY894Qerr7zPDVybmxh7Piq8oU3Zc6p3p473yeZCalths70
Z0rBMlPgj9edQ5mG/Pjc51F516m5z7hiSIlsgNC+vvNx4jnRGZ4fO3/6AHh9
6nyrckNXpo5FKyY9Qj4v74fS5sjM8e2Oqfe/9mEx33kqdsxWcd7HY++r5eD3
sWM+W8Deqb+lnO3Xse20r8DPU98Xv6U+jxugf5FMap3zQ2o/V3kB2cy7Up99
zfnE2LH9cWA/nieAo3OfNemeh3PPj+yEq2Tn594rOte/xuGcgmM0/si5A+UJ
1OY1qXMcI6D7p465K/aunOzC3Gdbd6Lik4qPDQG/DX37HZwce29PDX2bHDln
fUdmnf1EuGt0Nwwt2H6TfpAe1J7R/hkmuzW1Dz40cwxNPpT8IK3FYN4Pz52X
6Qu/U2o99pnWI7dulE77NHasTLb2Xumr3OukPPuQ2LaWzobWfRA4TLHl3PtG
uXX5LEuQeQx8NXZeWHtmROx88eiwvjeCo6g3EBwUua0XE8dPZLt01txqrmVD
xiE3pO/m9s/ry+6LbR9qbJLvHNmG7xvkVe/m2Guh9f4wtw2nOOSE3Plj2YSf
gy9FnottuX+joBjLhdCfFzt/+kHQ1dLZslF1PyuG/HHwKeSPrqMshl6qtU29
n+VLbkq9fx+kvS9j+5K6S1T3bejNqff2N9KhyIzNvScGps5ZK1f7D7glta34
iXRebpte8Um1r7t4Z+jjs5H929dC3yQ/BvmbYu/VzeCrkb/3baDFeye3L6FY
2Y+5c/mKO8mfWhU59nsV/Iti51tvja1blNuTD9UY7MH7eqnjJV1z5+IrI1M6
dazpqsg5RrWhnFQ9sBTf2Rru90ax4zP6XUWTsJ+1r/U7CunDhuAlqX20mmBT
7SfoZmCV2PEWxV2UR1A8oz19uCZzvZ654yTK5Z2ldmLnKdTviym9IufG5A/L
L1Z+WbpFPvhb2m+Z83WdcsdAVLdG6jy8aLWn34RoXM3hnxs7zyL/VHtjdWin
Ye78tHK7wzLnuIYoNph770rn7ynxbxj0+5OxsfN6OjtrU6/XRp2P3HlK5Wq1
tvo9zKTYvwfRumh9lO9U3lN7aWrQM7oDbsisC2+gjfGxc5c6k4M1ttg6RDLS
89L3WtPu0G1S53iU69EZvDAOeZ/Y86N10fooVvFW2If6LcRp4BFg89j3hXKc
GvuAoG+1RopBKZetvKfWs0/uvKR+C1BDseXc9soBihFBnwg9R3dp7hy/bO+y
BecCxJcPLF9YcQ/JbubxhMS6V/fM/Nz2nn4zc5RipwXnwF/IfZdpX3VIbQvJ
RlI8WH6d7C7F937SvQVdNXFdxagVfz4hfEv2jWI7Oo/Kp3ydO44vG168BZT5
lLmZ/XH5+81CfFB7W+ugO6VP7PyLzv73qX8Hopj/xMR5Ut1Z0pVqR/n/dbnz
R5oHxSvKFOz37dddVuw8mn73kIT4gOIE8jnl92luZ2SODTxNOxsT29XKeeg+
0rj+Te2LyVZMg/znke3V/1LnQRQnVB7qLOq9Qjtng3+GuZI/+F3oT0f5n7R/
Hlg9sc8o+szEa6f6P+eOSypP8WvuPIryDsrxKWZSJYxRsfyXc/uesnlX5PYN
ZZ8fnDgfrLyw4niKBSlvuyh1nlexfeVoZL9Lh68H2+bOXypW/HBqu1fxRsWO
noz8WzXZ0h8ic1/uGKN0+4caV259pPjw+tCm5DbkzifJp1sRdLX2wJ7cMVPl
LJaHfuq3cx/Fvk9l4+r3b4pPKk75V+7foinut7HYv1XSb5nWBpmVugtyx6eU
v7gidzxXOVnFSGWrzwO/LfFvnPQbpH2586nykTchOzuyb7WvxL8Jqp47Rn0K
/LKp+frdy2G663LnJBRreijMj/qg39TptyHn585ly/9aF/le1W+N9Juj/wNQ
ow/Z
            "]], 
           Polygon[CompressedData["
1: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
t46esTmlcwhbxH4bBL9y9ktDXv8HsIud4w==
            "]], 
           Polygon[CompressedData["
1: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
HCXmO1ipPd9j/if0X3FKeyT6f6F67Ys=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1:eJw1m3n8VdP3xu/n+pzTPefelKSigVAaJJQ5ITJmyjyTzEKmZCqSIhkiUVIy
RESaDJWUBqmUFAlFMstcZn7P+/us3x/7dddz1z7nnmHvvZ71rH2bdru862XF
QqHQaZNCoVqfnbNC4c+qQuHZpFA4vVIoHJQXCnPVYaLaTrJPk78s+035T5X/
Vn1+rv5fqPWXvaf6TJP//bRQWCH/ocJvCk9R20v2an3/nOxn1T6WfY/Ot6Ps
dTr2qjjfuzrXMrWbZa8pFQojZW8newf5i+r/mvDOwq2F18s/TXh74ebC3+km
Hhd+Qu0H2WvlHy27rfw7yr+rPicLT1FrJ7uGzveG7INkt5N/qfoPEf5Fx9YR
Pk3fvyW8QO0W7k9tpuzX1faR/aP6jw+7rfp/oHt8RfgA4V2F31f7UPc5Tve4
u3zfq/9z8teSv5Z8nwqPEm4l3FL4E+FHhXcQbiH8r/Crwp2F2wuPFr6Ma1F7
TPYvahNkHyL/bvLX0f0sET5SeA/hLYTfET5BeG/hZrqGF3UtL+ua3hSuJf8i
+c+X/wDhOTrfQOENuv/NK34+s4UvlL+T8GT5+wr3UBvBtak9IPtT9S/L31T9
Vwufpf77Cp+S+F3yTs+Q3VftY9kfqT0lO8n8LM+W3VH9T9bnfOE31U5NfD76
95PdpeLnz/PmGbZnTMj/qexLZB8o/436XCX8odpNPEP518q+XHZn+ZsIrxS+
Wvhg4a2FPxC+TvhQ4dbC64SvFz5MuCD8gvCBMT6e1GdRz28Ttadl7yz/V/Lf
Kfvo8P/I2FN7S3aDzPfO3DiS8Sf8tfDdwscyXvU+1ggPEj5G+Kfcx3Pu04RL
MT4vFT5IeJGe92CuT22e7L0zz71xMV/H6vN34T/iu33l/1X2/bK7yt9ReIPw
MOEThN/SOe4WvkFtguz28v8me5T8J8u/h/B3wiOFTxLeXfhb4QeFjxf+Xce8
JLyX8E7CM4UH8TzVxss+Wv0TPasJ8p8p/5HC1cLPxP1xvVw/a8jjsseorZf9
PXOYd6L+f8ueJPss9Z+vc94p3EttmuxX1G6V/ZnGX0X+HfX8Jun889R2k715
4rHCmKnHO9J3i+V7Ve1g2R00Dy6WfYnafrJb5F7rpst+S+d7R7/fTXhf4Qcr
7n+y8Elqe8p+Sf5DZTeXfbf8o4R3E64SvpnxpfM9IzxbeJHwNrnXgjeEF1e8
Hr4mPJPxJLuqXCgcIbum7H7yn6XPa4SvVusv+wudv5fsTrIf4v3kvpcVwsuF
39bnE8KPqy1KjafKfkltCXM+8/Vzr8PU/3R9Xil8lVpd2fvofNNlfyD7Pe5X
eEbRaxhr2RodT8A4VHiEcG1db3fhzsLDGf/y7xnXfxvrifCJwrWE+wu3yR0L
3hReIjxN/qOFGwgPEN489bPlGuvL3jv18z9H7WzZk9S/s+ytZA+M6+khfClr
rHAr4c/0rq/Vuz5E+Mt4XhfL/wzru/CZnF/4ceFbuC7h24lPsj/PPBa6y35K
/qnChwhvK3yX8G38rvAAtXGyz1G7SfbNcczz6n+A7Bqyb1X/CcLHsV4I9+V9
6fMs7kXtB13jLPm7yt5e3w+Wf4HwqcJbC99Z8fm5HsboGbL/kP8O2efKflL+
VM//WOFthAcJb5n7/fOulwm/rP6HCbcWvpf1Q/gi4fbC9wu3J14Jvyv8LvEi
9fs4Sm0f2WPVf1fZG3StveUfJryz8HrhXsLPqs99wveqjZX9c+L+u6h9nxgf
VPQ74xy872Nk/yr7OmKjPjdn7Kl9xNqp1oHfVqun8z2q/u1l/6Pvb1L/mrre
EcLPyfeG8DPydxT+S/4bhe8VbiP8pfA1wgOFWwqvFr5C+AHhtsLfCF9b8ff4
W8BHZN8v/06yv5J9tfx3CbcWXit8Zdwvc4tn/LzsJPf9Y88h/uqzi/CRzCGt
SSfr+Fz2LB1/HuNb/e8Xnqp+84WPkP8/jdfZ8l9AfIv19g3hC5n/wpuq/1Lh
iyvmZ6zti4QvEu4mXEv+ZcKX8P50/jHMf53/deGy8DDhx4RnCq9Q//OEDxN+
BD4l/y3CQ4VfFW4Z6+cM4QXCr6j/4XA/3rPw+cKbsd7o93pwv+o/WniE/DOE
NxMeJTxMeJrw4er/r673NfXvzvqtzwLro9oC2dur/wTZk9V/nvzHqX8N+Il8
3YQXpuaKcMZ+so+Xv8T6LP+58uc6/kHh4fJNr5iXwk8raguJhep/m+wx8s+S
v5H6j2U9jOe/UP7ThLsIjxT+Rvh64WOFR7F+qP/buv7Lgj9cLH/9omPYUcRe
xZ+n5G8k/3byHxPxroHaCbI/lH94xJ5t5L9Q3zUp+hrh0t/J/6z8ZfkbV/xe
eb/EcK7/PfkflL2J7K24v4h//2hs1a+YT3L8LvI3Ed5Un48Jj1GrLXv3xPF5
qtrpia8v5XnLPpv1oWQuCX/L4/0Qe4nB82RPl78f8Vn+mvJPCf73SfC9d4P/
/SW8RcXxlvt9ODjuZyVz8bqyt+b6c/N5rr+e8OLgM5n8jYRX6fub4W5cg+yF
ufk7/obwl4hHS3lHstvljm1vqe2fm7+x/j8S/GUn4feFhwZfaSf8TeDjKuYb
cEU442OJ8xfiKRzhMNn7Bb+bGPwDvvel8PPCZzBec18L13SU7APVXmbssQbk
5iOTZc8hFqt/wxivsyP+N4vx/4ZaK9n76/wb4dY6/4n8Xu74TSx/R3g/4dnC
L6htl3t+PCz7IZ6B7Mb67mnZr8leCB/PPX/wLY31ZX3c6ymcv+z5Oj3m+2q9
j0fkb8LcjOcNPyFXW1lxfnWf/Peq1VGfGep/m+wv9f2m8tfV+ZcKH8uzFP4x
c2y8Q8dPYb1OvX4P5xkTI1PHDtbQ22Vv0Pkm6vhjdPxe6v+zju+LX75XhH+V
/0X5j2BsE//knyXcXXh/4Urm/OEk4X0qjpf/i9c6frLw5/A/+S+OfIF8BK7+
Y+QY20X+MkD2UfC1zGODvOJw4fXCN+p8p+h8Y4SbCy+X/47g/x2EfxG+K/j8
WuGe6n+S+j8m/EnwpytY14T7JM515ke+cmDmuQ8XPkL+7fR+7lT/e9T/ZeEX
S54fH+p5l5jv6r9QuJv671dx/kRuOzmewWaJ5x858R7MbR03QPbtat/Kfrvk
90muXFvHd4r8ZKr6nlNxf+Yyc/on2W+UfDz2Zjzf3Ov5vIhXh+n4f+R/KY5/
R/3vF/5N/evCh8tej2/U/Uzgfar/PfAn4ReFNwr3E74OLiX8ae78+8zE+WSb
zLkC2kCHivNzcsmPo09L+VfIHhz51VOp5wZz5EzZv+eeX69HPP5P/QfLd618
44VPEs6K9p8v/K/wXcJXoltUnKeSr6IBkM9eIH8d+VfKvqzimEXsIufaoN/6
oOTnx7OuId89ai10rvN1zPzMHOiXxJwLbgSngjfBn+Ba8Om9ZDcnhjOX1BoW
zVHgKlwT19ZbuGHZOcgOqTkfuQmcsllqDgrXhMNulzpngduSQxwgfG3RuQU5
wf7CpxSdKxDva7PWqN2QOQfqKP+5RedGcNQm0R/uCseEK8AZ4J4PCO8enGix
8C2Zz8U5r8vM17gX7ul6YrXa9kVzDH4PzrZGz6NV0VwOTgc34xiOHZD52cAh
+2XmbF8n5ng8nzFqexR9zocz52e7x/08GL+HvXv4h1ac15GDVPQ8Lw/+Rzzv
wVxW27JozaqX7GvVGhX9e7dmHg+bxe/1yczP4G9N1a6WfaXaVkVzVO73isw+
+sD14Jucm9+4irVGbRvZNdUuld0/ng/3NDIzJ2ubOmeEq5FzFlPfD/faQLiQ
mEMs11jcEr/wXfCLkjkF3OIZ5lDJnILYTIxekDtGg+Ec5N5oVpXEnAPuwZj+
Rv6HqjzW4XwPwNuL5oJwsoeFhxbN1eAYcA04w2sl5+zrqs0xyOXhEHCJscIr
S+YccA+uf27JMYZYM4zrK3kN/DBi0kThjBhWbY6CVsWaxtrGGrik5DWLtYv1
bF5uzgG3gGMshgsLJzF/Cnr/fSrO3Zg/E8m94JAx/mcK38AaqOMPFv4ndw7y
N2tx0bkJOcu/iTUBcpnrhX9LnAONEx5CDNb5TuD5lJ0zb5p6zjP3yYm3TN2f
9QFN8tdqr6lolWh0G4XvqLJ2d3vFOTQ5V3XZay5rLxx1Rck5eCV+j9ycHLph
6usntyZnLQl3KjqXbRjPB46G9kTO9G3iHJBcarhau6LH6J2yn4bj6vg+jGH9
/ljh81PnrF/JP1r4BOELheuWnYMcHushuQmawiGpc3pye3L2S4SvKzqXJ4Ye
L3xF0bGVHLhb5OTEemLyicI3FB2rXxDulXqNL+TWYOBecLAGwo8KHy18OWtI
2ZxpWuocAS71RMV5N/l3/bI1g9Mih0dLIEZdF9fzQ+ac4ahYj8klRsb5Ty86
10Cj6JGaA6yJ46+BBxUd+4hBxCJykMZl46tSx6D/4n6uj/trwvokvCpyqvMy
j+c8saYHtyZfqVd0jntJZk0Lrgfna1s2B+kZ9w83mQgnSq0JbRB+SXiw8BDh
bdV/qvAgckfGe8Sfy9Eeio6VcLw74/3D/eBcA+P9834mVcz50Ey2KZvTDUmd
g8L1esKRiPXCgzNr1FNSc2S4MjkiueJI1uCyc1pyWzhFDbix8BOpc+D6uXNg
cmE4RouyNQO0g+dZc3PnvOS+DwhncF3hR1LntHVzr2fD4vk3KzvHHRHjqbnw
w8IHCl8qXEv4plivmRN3Z9YMPku8prO2w+HuieuvrfMPybw2bKvWl/GfWe9o
GscPifjQPtYPaiSfJ44f1E7gTHCnG2O8w6ngVj1jfvA+b4rnQy6M5vZmPJ9d
y9YMV8R4b507R5ifWqMkd0ADRAtEw9xVeLjGVB+NrUvJsUrOaWal1gzIdaj5
vJc6hyKXmis8KbXmkebOYRak1gDJbdBM0E7QU1rHeLgv+m9f9njpE+9vk9ya
FtoWOV/7sscbuQX5Q9MYn3el5sx/xfgbEDnHnzGe706dU/yUOecu6XmOq3Iu
joaNlg3n/KPkms4+wflW5l6P0SrRJKcHH0IbRqNdFvMf7eAC4Tplr3ddYz5/
l3m9OUb4DOG3g4+hLaL51Shbw0PLQ1NdnpnPoS2jUZTKjj+NU2t+M7LQ8FJr
rHOCb7VLrXEujfXypMCrg9/slloD/DD4IdojmtDciAdoq+ivSdl8taXw8cKz
M+dkx+l5TKpyrgZfREtGo6wZ8+GguB/4IJwYbozGdY7wpcLvJtaszo3xvC7i
5dDMmhYaCPrNX7k1LbQtagAnZo4/aHfEp9GZNTG0sb/k7xrxtE08/5XBB+GL
aLKPZF4vP0jM2S/KrFmjXfeK+EI8OizizaqYv2h/aIz3ZY6vteN5zwt+ujo0
yzti/fo0MWcclDneon0fKFwsm1+kqfnbmOBvO8V4KJetSQxJnIOhVVCTojY1
T3irzJr2VYlrWmjd1OSozZHzrMtdw6OWR01p88w58XmJa3jkytS8qH3NFa6f
uaZEbek94S9yaxovJNY80DrQUKgFURNDWyGnmxrvg1yPHGlGYk2O3Imc+/i4
XnJxND+0P2pGB2XW7NDuqEFtzK15on2ieR6SWZN6MbGGhlZFzZLaJTXfNblz
vhviesgFqRmSk1FjW5u7xkSt6Wfhn3PXvKh9USNcn7vmNSye3/e5c/yB8bzI
/akxogOgB2ybOYcfFOcjt6eGRy2PmtW3ufnc7zE+ns5cgxsXGh5aLRrLo3F/
aC/k6OcmrrmSu1NjpNZIjfbr3DX1uYk1Y/RBNIfeiWuUaBHU4EYG3iWzRvRQ
PE+0IzSD0YlreGgJOwt3TFyT/rNkflcj5vOUzDUmajXUbB7PvH5Tu0dDaqvr
6Zy7lsb6vkvuGtCq1DUiakPUDJal1ryoJRyiNr9ozYv6W4uoN88pev9Ap9w2
36F3EX+Wp65BUMtqGfW3ufF7xxMzitag0Ps6RH1qSdF6G/FpZeo9B9Suuub2
0eeI3JoV2hUa2N65Y87/6k9q+8o+Bn236OPR+9qEXsc9sF+BGjq19OloLrn5
5Smxfm5Rdk2e2jya0iaZa/DU4qnZrlL/VqyfcXxV5j0BB8T7rxXxB+2X/GkR
vy98YoyHepn3OOwc+dZ7ue+Ra3077o89A+wdQDNbIdxUeMvEfP9zve9mws0i
v/u65D0S7JV4Wvgr4W2FGybW/D4qWfND+6Pm/U5uzRbtFg15XckaNlo29dQl
uTXvRjG+vik5f6kZ+egmej6Hq8+CojXMfUMfXVT0+2a8oIHODn6xTfDzmTH+
qJ3CL9BOH2M8BD9/LfLJesFX0DbReJrk1gS7xPNAK4SvPRR8l1oFmuRRifdI
1I38jNoSNb5/c9foyPf2F342c/5XnTp+PJe5XoH2igbbPHe+Ta0XPeW/3Png
n4n5GlyOfJDaFPF6fOYaGnUw6mHkW/CZpTr+yaJrd9vm5qazitZ34Utov9Sc
2pXNpyZG/zZl8+OXI9/eqWw+9ULwdWpT1DioNT1VdO3jgNxa84S4fuYc74J3
cnDw6xdT3yP32iW3ls38Rl+HP48P/k8tDv79aORT1Jrgl3NTzyHmEvnGK6nn
e4vg16OE7xbeoWzNmXyEOc/cp0bzZOqaLHwV/j463v8Wwe+pM6IZtyq75sE+
kOdCj2A9ejfud4fc43sr+Z8nX879TuDm5Oy8K9Zscg1yctZy3gm58MbE7wq9
Cm4OR0cvQm9qVvR6iR7HmonNd+gxD2UeK3AOtCrqqdSu4Yvwxicy5+ZofGh9
1DuptaL/oQOy3qM1owc3zhyf0KJ/Em4m/HdurkFftEPi0e2JNegGEb9uS6xh
s3eGmE/s3x9NseL4gLaMhvpjbg6D1oVmALeB+zE2uUbq73BQuGHT1Nz0ssxa
GPwGfQr9Cm2KnIfcB40OrY4aGfkm+hl2q+BD6GWNi45v3WWfkVkvXp64nkg9
mNog+Sx57ZmZueDWRetft2fWRqmh9Zb9U+JaMc+E+u3r8f7QJNEm4choJ2g2
cGfqs3sXra9slpqDoZWh+cDNmPNw0ULqtYD43CtxTal1vG+4W546drImsFaw
ZrBWwNeuSbzHaOvga+xFoCbyVe4aAbWCL4Nf9YjnCd85NvjsksTP9Kzgw4sT
78nrHPF+RFzPD7nrpdTz0AtPyfx+sPmO+iP8+Z3E+iJaJPtxquP98HvUU6m3
okmeHvycd8E7OTWzpo+2vz74C/t32PuEpkD9Ez0T7bYUx/eI49F30Y6pf6On
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
0NPZe4+eOj5xzkDu8H+ejs0T
            "]], 
           Polygon[CompressedData["
1:eJwtl3d0FUUUxjeQfby3L3SQDgkgghSpekRBelfpVvAovYMK0uyN3kuEAKJI
U+nSW5SqlCQkJEBoCTUUMSQBkkD8fWfmj98583177919s7N35kV8MKLr8HyO
48SBCzkBx5mCMdjnOAPgBvoq9GM8EIZyLRldCI6FOE5zkppCrt9xdsKlUMe5
CHO5FovOgnpcrwt78ULJy8TbzLgOXk1I8BynIP4/eE3QjeERMY+hGeOWsJ5r
/6E7EveE8Wm8RHgffQTe4rkq8nzlwA06znm8YXht0a2gMF4RaMO4PfTjWjwx
Z2Ag4x54PaEkMavwsvQM0IBri9CHoCfjhsQ0gjDiTuL1wuuG7g4X0HugC14O
uQ9hLXo/VOJ6ZWjLtS3o/+ALxkPxBkEZ6p3DG4T3FvptKIV3GW8E3sfo0fAv
+in8Nxm/AaO4loq3Bl5hfIV7psJs9G3may1zVQtdG04zz7fw1uBVR9eAeLzT
xA4gtxb1asBhtI97RDCuCl25thevHLF/oQ/BQrwgujd+QcYnqHUccvDyuMdu
e4+n4V90KfyfiDtC7lFoQP3ieNsY74R5XPOjT1GvL+NwvAqwD30K/xnqVION
1M3QWsPvRFxRYgpB/qBZl1qfLdHNoCBeUejEuCNooV/SOoN3GT+L9wz4iQnX
WqD2Eu6xFBoFzLz0J+5VYl6DYsR5PMt8zYeeDUqj7/A8EeSEw05qPEEnktvO
3vcd4v9Gp+Nv4Hpl4ipBLLmd8PPwktBnoB/6Joyz9+0AZwNmHYy0a60zFOdZ
euEluOZb0DfRAe3BAcYj8UZBKXQGTCBnPMygRgj3LY+XaOOGwTW8StQcR8xY
+Jq4B8RUhUvEDSZmABRHJ/M7ovAe8Z1nwWFyj+HXI6+uz3xP+q5u2rWW3zXN
5Sz6Nv54ro8h7hOoyD2PkJ8dauqp7gXirsJKxg/wMiDOb3qHekgPavWES55Z
Bx2pV19rCo4HzPeg72Ii+lPI1LcBm8nZCjepUR/9PKQx3om3C1qhm2q+8Laj
d0AW9/gHfIxdWMa1y3o+vCHo4XACryh5D/G3My6NVxKuoBvj/8p4HVzn2nOa
T7+po3r54G9qPdK3xfhP16wHrYs2kMN4k/of3CcmkdyFeAXQfjimPOK62++3
Nni2N/W28/IcBPFK48WT21d9E1I801PVWyuiy0GMZ9bfWHKHkzdCPZXcdLwv
8Uaih0FZvA14DuM81/SIaHQ29XZQrzxeGf1mdJLtL13US6AEuVv1fWgtop9o
/Wr9wWq8RLwkqI+uQdwM9TOtc+qWQ1fX98B4Lt48uOuZedX8TkZ/B7e0p0AU
9aZSaxJkE/OSei9xvxHzO6RrDmCNazxde1E9FmIZj8ebAGlaAzCXerP1Hamf
qz/jvcf1D1yzf2kfewJTiZurvgZPE1cFZvmMp2u5xNyHr2xvHwXliamNd4U6
y6j3I9zzzH6hfeMxOhse4z2EaMYH4IH2YWJuMNerGefxveRCEjoWvw+55bXH
wG50YXKX4M1ET4PHdq1lh5g+flLvM2DWVQ/1efVI+AO9Dlrgpek7gih0uOZP
37x6FTyProJ/kXr9iekDRdDroSVxt/V+9PvU23nG+cSl8rwpsBf9LH4K3kJi
IrV/UC8fLKD2Dz4zZ5q7ON3HNf1UffU+uTl+04PViyvovflNH1M/W0LuUijg
mXesd/09Md+oRsD0RK0xrbU5UAsdQexacs+RlwyN0SXxY4gbQ8wnmgetXbwk
vB/Qi6Ceatlv9Tq/6xocRO+Hb/FuotPkkbuS2Cbam8i7CJPRkVrP6svQjGu/
qY8EzFjeVZiPDsJB6n2MHg1l0WE6r+CNRY/TPKArcJ9V5CbwG06rJ6BX4N9x
zfvQe9lov490cqfiTdL+rXMEsdMYz3TNXqA9oRpMQU+HBLwydu/Rs7yO1wmS
yXPxovFeQb8MSXqXOifhddE602/2zHetuR+KHqTe6Zmeqt7aHt0G8qNDAuZs
8Sr6NTjvmXvrGQZq/4RUvDPMcyReEB2mHo0XCot8Zh1oPWSR57f7ZUdi2mmP
sueXXfa+HeAc3gN7Zu2G7g4B9T5oxbitXX/a32P85uyrM/AF2IpOgeXqDcR5
cJx69/DW4ZXVHq1vTmccu9dqnmfBHdvvI+16uQFH0Q7+dJ5/Mb8jSmcY+kYJ
ck8S9yF5H8ENz5yndK6aT8wcneWIS1SvdM3ZW79Hv+sCXmfXvDe9P62p63gj
XFNPdYtpju15qLp6GhxUL4BtrtlDtZc2QK/WPkpcCt5lrRG9R+4zh+vn+Q3J
sAntco85xE2n1hSI4PlCdMZiHNDZh2s7yC1J3HLGB3RP7Qs6K5O/mHqZ1EqH
Q8S0s/tlDPeMhZ7o9pCLF4c+BW+jSxD7I/X2Uysa6lGvLuzxGU/XihGzPWCe
Qc/iAydozsHa67Tn5WoPUU8LmB6sXnxQPZrcP+2eXIC8UNikedLz4LnofNo3
iSsLv+DFouP0LtGp/LZf1M/4XffgpN98m/pGCxNTRDV5ljDPnMN1Hj+ssxS6
gZ7b1ouBhkHTd1vYPh6mewfNHqC9cQN6I9TCy8XL0H7imn6kvlTGPt8mYtZD
zaA5y+pMWw1dRf0ULwA1feZMrbP1CWJK4/VB94cx+m+C9wLc4rft5R779O2g
i9j9aIv2GKhD3kV+81LiQnQ20LonphmxmXi78fboOe38rSR3K3mbdf4JmvOt
zrnL9C6hOl489RaQe5VaVyAa3UR7MN4Wav0BmZ55Rj1rc/Ka6p1oX7D3OIWO
1xyoN8FSvO3oHeqn3KMQtGDc2mf+w+i/TGXi1tt5/h0K2f9ga+0ZLlQ9DP2y
7bsb0BshQ2cf6v1EznKfec9632egBddbu2af034XsN+5/kftgqfQd6k3Ee8z
9OcQTq1rxK5SDr//ISSg0wLmv8aHxHwEFYirg7fANXuZ9rSK6IYQhV4MWfa8
kQfTyF1IXiRUIzc/956J9zN6hdZD0Jx1ptrz5BC4hf4f/0tH/A==
            "]]}]}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0r8vXWEYwPGn1VLXr9vWqomFEWkMtTLqIqLXpS5axUJSU9M0Br9CiBDi
3kVEbPwNDCSdq0l3cgWVhrSkHX1u0uF7Pu/JOcl53jendnC8Y+xBREzp+8OI
PC+LIv6y8lFEwsOXrGGKjfzCVm6zi6MaUe5JxDCz/MANDnGd77nGd1zlIFc4
wH4tW2e4xD4u8i0X2Mt59nCOac6ym9NM8Y3a9NVMTdzhC06yjGn+s6dmnjHJ
Y17Z6wH3lNOR+1lucYKf2c8uvmYTW1jOep47s2oWztAyToojPIpT+kTk+Zhn
LC6871LCCxo9frK0MAcTLNMv63Jes4I3rORvVvEPk7zlU97xGZ+rTgkDvGID
29nJDD/xIzc5w0Nm+YO73Ne3///BPRhhPuc=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0ssrJVAcwPFzb0hWmi57K/4BCQsRkTwmrKSJWTJc77ckmVmOLRFhJMaw
YWu87/U2u4l/AfkPfGTx7XPO6pzz6+R8jTd0RUII0/qfEkJtNISX1BBaGUsL
oY+F/M4vnOM0f3ODB/ynezVlhHDHRt6ygTf8zGvW84q1vGQNL5hUtXWCVTxn
Jc9YwVOW84RlPGYpj1jCQ/7Vtq7daZ6b/MEZ9rOVbSxmHbNZzFdvzWOWorqw
fzGQdT5yikm2cJ8FXOUnzvLJzCbYrg4tpIfwjYvs5BLfB7zMOFfYzVX28Bd7
389jH/u1YT3ATQ5yi0Pc5jD/cIQ7HOUuxziun8p0txXmc4/NTHCSD1zjM5OM
ePMjY8xVUfTjH7wBQ7NJ0Q==
          "]]}, {
         Line[{1761, 1759, 1782, 2870, 1783, 1811, 2878, 1812, 1832, 2893, 
          1833, 1853, 2908, 1854, 1874, 2673, 2923, 1894, 2938, 1895, 1918, 
          2689, 2953, 1938, 1939, 1967, 1968, 1997, 2974, 1998, 2027, 2700, 
          2982, 2048, 2997, 2049, 2070, 3012, 2071, 2089, 2728, 3027, 2110, 
          3042, 2111, 2130, 3057, 2131, 2151, 2152, 2180}], 
         Line[{1762, 1760, 1785, 2871, 1787, 1813, 2880, 1815, 1834, 2895, 
          1836, 1855, 2910, 1857, 1875, 2925, 1877, 1896, 2940, 1898, 1920, 
          2690, 2956, 1940, 1942, 1970, 1972, 2000, 2975, 2002, 2029, 2984, 
          2031, 2050, 2999, 2052, 2072, 2718, 3014, 2091, 3029, 2093, 2112, 
          3044, 2114, 2132, 2748, 3060, 2153, 2155, 2182}], 
         Line[{1764, 1763, 1786, 2873, 1791, 1814, 2882, 1818, 1835, 2897, 
          1839, 1856, 2665, 2912, 1876, 2927, 1880, 1897, 2684, 2942, 1921, 
          2692, 2958, 1941, 1946, 1971, 1976, 2001, 2976, 2006, 2030, 2986, 
          2034, 2051, 2710, 3001, 2073, 2720, 3016, 2092, 3031, 2096, 2113, 
          2739, 3046, 2133, 2750, 3062, 2154, 2159, 2183}], 
         Line[{1765, 1766, 1789, 2872, 1795, 1816, 2883, 1821, 1837, 2900, 
          1842, 1859, 2914, 1864, 1878, 2677, 2929, 1900, 2685, 2944, 1922, 
          2693, 2960, 1944, 1950, 1974, 1980, 2004, 2977, 2010, 2032, 2990, 
          2037, 2054, 3003, 2058, 2074, 3018, 2079, 2094, 2731, 3034, 2115, 
          2741, 3049, 2134, 2751, 3064, 2157, 2163, 2185}], 
         Line[{1767, 1769, 1790, 2874, 1798, 1817, 2886, 1823, 1838, 2899, 
          1844, 1860, 2667, 2917, 1879, 2679, 2931, 1901, 2686, 2947, 1923, 
          2694, 2961, 1945, 1953, 1975, 1983, 2005, 2979, 2013, 2033, 2989, 
          2039, 2055, 3005, 2060, 2075, 2722, 3021, 2095, 2733, 3035, 2116, 
          2742, 3051, 2135, 2752, 3063, 2158, 2166, 2186}], 
         Line[{1768, 1772, 1793, 2875, 1802, 1819, 2888, 1826, 1840, 2660, 
          2904, 1862, 2669, 2918, 1881, 2680, 2933, 1903, 2687, 2948, 1925, 
          2695, 2964, 1948, 1957, 1978, 1987, 2008, 2978, 2017, 2035, 2992, 
          2042, 2056, 2714, 3008, 2077, 2724, 3022, 2097, 2734, 3037, 2117, 
          2743, 3052, 2137, 2753, 3068, 2161, 2170, 2188}], 
         Line[{1770, 1774, 1794, 2876, 1806, 1820, 2652, 2891, 1841, 2662, 
          2905, 1863, 2671, 2920, 1882, 2681, 2935, 1904, 2950, 1913, 1926, 
          2696, 2963, 1949, 1961, 1979, 1991, 2009, 2980, 2021, 2036, 2706, 
          2995, 2057, 3009, 2065, 2078, 2725, 3024, 2098, 3039, 2105, 2118, 
          2744, 3054, 2138, 2754, 3069, 2162, 2174, 2189}], 
         Line[{1771, 1777, 1797, 2645, 2869, 1822, 2654, 2877, 1843, 2892, 
          1851, 1865, 2672, 2907, 1883, 2682, 2922, 1906, 2688, 2937, 1928, 
          2698, 2952, 1952, 1965, 1982, 1995, 2012, 2981, 2025, 2038, 2708, 
          2996, 2059, 2716, 3011, 2080, 2727, 3026, 2099, 2736, 3041, 2120, 
          2746, 3056, 2140, 2755, 3071, 2165, 2178, 2191}], 
         Line[{1773, 1784, 1800, 2879, 2646, 1824, 2894, 2655, 1845, 2909, 
          2664, 1866, 2924, 2674, 1885, 2939, 2683, 1908, 1919, 2954, 1930, 
          2967, 2699, 1955, 1969, 1985, 1999, 2015, 2028, 2983, 2040, 2998, 
          2709, 2061, 3013, 2717, 2081, 2090, 3028, 2101, 3043, 2737, 2122, 
          3058, 2747, 2142, 3072, 2756, 2168, 2181, 2193}], 
         Line[{1775, 1788, 1801, 2881, 2647, 1825, 2896, 2656, 1846, 1858, 
          2911, 1867, 2926, 2675, 1886, 1899, 2941, 1909, 2955, 2691, 1931, 
          1943, 2968, 1956, 1973, 1986, 2003, 2016, 2985, 2701, 2041, 2053, 
          3000, 2062, 3015, 2719, 2082, 3030, 2729, 2102, 3045, 2738, 2123, 
          3059, 2749, 2143, 2156, 3073, 2169, 2184, 2194}], 
         Line[{1776, 1792, 1804, 2884, 2648, 1827, 2898, 2657, 1847, 1861, 
          2913, 1868, 2928, 2676, 1888, 1902, 2943, 1911, 1924, 2957, 1933, 
          1947, 2969, 1959, 1977, 1989, 2007, 2019, 2987, 2702, 2043, 3002, 
          2711, 2063, 2076, 3017, 2084, 3032, 2730, 2103, 3047, 2740, 2125, 
          2136, 3061, 2145, 2160, 3074, 2172, 2187, 2196}], 
         Line[{1778, 1796, 1805, 2885, 2649, 1828, 2901, 2658, 1848, 2915, 
          2666, 1869, 2930, 2678, 1889, 1905, 2945, 1912, 1927, 2959, 1934, 
          1951, 2970, 1960, 1981, 1990, 2011, 2020, 2988, 2703, 2044, 3004, 
          2712, 2064, 3019, 2721, 2085, 3033, 2732, 2104, 2119, 3048, 2126, 
          2139, 3065, 2146, 2164, 3075, 2173, 2190, 2197}], 
         Line[{1779, 1799, 1808, 2887, 2650, 1829, 2902, 2659, 1849, 2916, 
          2668, 1871, 1884, 2932, 1891, 1907, 2946, 1915, 1929, 2962, 1935, 
          1954, 2971, 1963, 1984, 1993, 2014, 2023, 2991, 2704, 2045, 3006, 
          2713, 2067, 3020, 2723, 2086, 2100, 3036, 2107, 2121, 3050, 2127, 
          2141, 3066, 2148, 2167, 3076, 2176, 2192, 2199}], 
         Line[{1780, 1803, 1809, 2889, 2651, 1830, 2903, 2661, 1850, 2919, 
          2670, 1872, 1887, 2934, 1892, 1910, 2949, 1916, 1932, 2965, 1936, 
          1958, 2972, 1964, 1988, 1994, 2018, 2024, 2993, 2705, 2046, 3007, 
          2715, 2068, 2083, 3023, 2087, 3038, 2735, 2108, 2124, 3053, 2128, 
          2144, 3067, 2149, 2171, 3077, 2177, 2195, 2200}], 
         Line[{1781, 1807, 1810, 2890, 2653, 1831, 2906, 2663, 1852, 1870, 
          2921, 1873, 1890, 2936, 1893, 1914, 2951, 1917, 2966, 2697, 1937, 
          1962, 2973, 1966, 1992, 1996, 2022, 2026, 2994, 2707, 2047, 2066, 
          3010, 2069, 3025, 2726, 2088, 2106, 3040, 2109, 3055, 2745, 2129, 
          2147, 3070, 2150, 2175, 3078, 2179, 2198, 2201}], 
         Line[{2204, 2202, 2225, 3080, 2226, 2254, 3088, 2255, 2275, 3103, 
          2276, 2296, 3118, 2297, 2317, 2785, 3133, 2337, 3148, 2338, 2361, 
          2801, 3163, 2381, 2382, 2410, 2411, 2440, 3184, 2441, 2470, 2812, 
          3192, 2491, 3207, 2492, 2513, 3222, 2514, 2532, 2840, 3237, 2553, 
          3252, 2554, 2573, 3267, 2574, 2594, 2595, 2623}], 
         Line[{2205, 2203, 2228, 3081, 2230, 2256, 3090, 2258, 2277, 3105, 
          2279, 2298, 3120, 2300, 2318, 3135, 2320, 2339, 3150, 2341, 2363, 
          2802, 3166, 2383, 2385, 2413, 2415, 2443, 3185, 2445, 2472, 3194, 
          2474, 2493, 3209, 2495, 2515, 2830, 3224, 2534, 3239, 2536, 2555, 
          3254, 2557, 2575, 2860, 3270, 2596, 2598, 2625}], 
         Line[{2207, 2206, 2229, 3083, 2234, 2257, 3092, 2261, 2278, 3107, 
          2282, 2299, 2777, 3122, 2319, 3137, 2323, 2340, 2796, 3152, 2364, 
          2804, 3168, 2384, 2389, 2414, 2419, 2444, 3186, 2449, 2473, 3196, 
          2477, 2494, 2822, 3211, 2516, 2832, 3226, 2535, 3241, 2539, 2556, 
          2851, 3256, 2576, 2862, 3272, 2597, 2602, 2626}], 
         Line[{2208, 2209, 2232, 3082, 2238, 2259, 3093, 2264, 2280, 3110, 
          2285, 2302, 3124, 2307, 2321, 2789, 3139, 2343, 2797, 3154, 2365, 
          2805, 3170, 2387, 2393, 2417, 2423, 2447, 3187, 2453, 2475, 3200, 
          2480, 2497, 3213, 2501, 2517, 3228, 2522, 2537, 2843, 3244, 2558, 
          2853, 3259, 2577, 2863, 3274, 2600, 2606, 2628}], 
         Line[{2210, 2212, 2233, 3084, 2241, 2260, 3096, 2266, 2281, 3109, 
          2287, 2303, 2779, 3127, 2322, 2791, 3141, 2344, 2798, 3157, 2366, 
          2806, 3171, 2388, 2396, 2418, 2426, 2448, 3189, 2456, 2476, 3199, 
          2482, 2498, 3215, 2503, 2518, 2834, 3231, 2538, 2845, 3245, 2559, 
          2854, 3261, 2578, 2864, 3273, 2601, 2609, 2629}], 
         Line[{2211, 2215, 2236, 3085, 2245, 2262, 3098, 2269, 2283, 2772, 
          3114, 2305, 2781, 3128, 2324, 2792, 3143, 2346, 2799, 3158, 2368, 
          2807, 3174, 2391, 2400, 2421, 2430, 2451, 3188, 2460, 2478, 3202, 
          2485, 2499, 2826, 3218, 2520, 2836, 3232, 2540, 2846, 3247, 2560, 
          2855, 3262, 2580, 2865, 3278, 2604, 2613, 2631}], 
         Line[{2213, 2217, 2237, 3086, 2249, 2263, 2764, 3101, 2284, 2774, 
          3115, 2306, 2783, 3130, 2325, 2793, 3145, 2347, 3160, 2356, 2369, 
          2808, 3173, 2392, 2404, 2422, 2434, 2452, 3190, 2464, 2479, 2818, 
          3205, 2500, 3219, 2508, 2521, 2837, 3234, 2541, 3249, 2548, 2561, 
          2856, 3264, 2581, 2866, 3279, 2605, 2617, 2632}], 
         Line[{2214, 2220, 2240, 2757, 3079, 2265, 2766, 3087, 2286, 3102, 
          2294, 2308, 2784, 3117, 2326, 2794, 3132, 2349, 2800, 3147, 2371, 
          2810, 3162, 2395, 2408, 2425, 2438, 2455, 3191, 2468, 2481, 2820, 
          3206, 2502, 2828, 3221, 2523, 2839, 3236, 2542, 2848, 3251, 2563, 
          2858, 3266, 2583, 2867, 3281, 2608, 2621, 2634}], 
         Line[{2216, 2227, 2243, 3089, 2758, 2267, 3104, 2767, 2288, 3119, 
          2776, 2309, 3134, 2786, 2328, 3149, 2795, 2351, 2362, 3164, 2373, 
          3177, 2811, 2398, 2412, 2428, 2442, 2458, 2471, 3193, 2483, 3208, 
          2821, 2504, 3223, 2829, 2524, 2533, 3238, 2544, 3253, 2849, 2565, 
          3268, 2859, 2585, 3282, 2868, 2611, 2624, 2636}], 
         Line[{2218, 2231, 2244, 3091, 2759, 2268, 3106, 2768, 2289, 2301, 
          3121, 2310, 3136, 2787, 2329, 2342, 3151, 2352, 3165, 2803, 2374, 
          2386, 3178, 2399, 2416, 2429, 2446, 2459, 3195, 2813, 2484, 2496, 
          3210, 2505, 3225, 2831, 2525, 3240, 2841, 2545, 3255, 2850, 2566, 
          3269, 2861, 2586, 2599, 3283, 2612, 2627, 2637}], 
         Line[{2219, 2235, 2247, 3094, 2760, 2270, 3108, 2769, 2290, 2304, 
          3123, 2311, 3138, 2788, 2331, 2345, 3153, 2354, 2367, 3167, 2376, 
          2390, 3179, 2402, 2420, 2432, 2450, 2462, 3197, 2814, 2486, 3212, 
          2823, 2506, 2519, 3227, 2527, 3242, 2842, 2546, 3257, 2852, 2568, 
          2579, 3271, 2588, 2603, 3284, 2615, 2630, 2639}], 
         Line[{2221, 2239, 2248, 3095, 2761, 2271, 3111, 2770, 2291, 3125, 
          2778, 2312, 3140, 2790, 2332, 2348, 3155, 2355, 2370, 3169, 2377, 
          2394, 3180, 2403, 2424, 2433, 2454, 2463, 3198, 2815, 2487, 3214, 
          2824, 2507, 3229, 2833, 2528, 3243, 2844, 2547, 2562, 3258, 2569, 
          2582, 3275, 2589, 2607, 3285, 2616, 2633, 2640}], 
         Line[{2222, 2242, 2251, 3097, 2762, 2272, 3112, 2771, 2292, 3126, 
          2780, 2314, 2327, 3142, 2334, 2350, 3156, 2358, 2372, 3172, 2378, 
          2397, 3181, 2406, 2427, 2436, 2457, 2466, 3201, 2816, 2488, 3216, 
          2825, 2510, 3230, 2835, 2529, 2543, 3246, 2550, 2564, 3260, 2570, 
          2584, 3276, 2591, 2610, 3286, 2619, 2635, 2642}], 
         Line[{2223, 2246, 2252, 3099, 2763, 2273, 3113, 2773, 2293, 3129, 
          2782, 2315, 2330, 3144, 2335, 2353, 3159, 2359, 2375, 3175, 2379, 
          2401, 3182, 2407, 2431, 2437, 2461, 2467, 3203, 2817, 2489, 3217, 
          2827, 2511, 2526, 3233, 2530, 3248, 2847, 2551, 2567, 3263, 2571, 
          2587, 3277, 2592, 2614, 3287, 2620, 2638, 2643}], 
         Line[{2224, 2250, 2253, 3100, 2765, 2274, 3116, 2775, 2295, 2313, 
          3131, 2316, 2333, 3146, 2336, 2357, 3161, 2360, 3176, 2809, 2380, 
          2405, 3183, 2409, 2435, 2439, 2465, 2469, 3204, 2819, 2490, 2509, 
          3220, 2512, 3235, 2838, 2531, 2549, 3250, 2552, 3265, 2857, 2572, 
          2590, 3280, 2593, 2618, 3288, 2622, 2641, 2644}]}, {
         Line[{723, 1036, 1035, 1032, 2994, 1031, 2993, 1028, 1027, 1024, 
          2991, 1023, 1020, 2988, 1019, 1016, 2987, 1015, 1012, 2985, 1011, 
          1008, 2983, 1007, 1004, 1000, 2981, 999, 998, 997, 2980, 996, 995, 
          2978, 994, 2979, 993, 992, 991, 2977, 990, 989, 2976, 988, 987, 
          2975, 986, 985, 2974, 984, 983, 1003}], 
         Line[{190, 189, 1996, 188, 1994, 187, 1993, 186, 1990, 185, 1989, 
          184, 1986, 183, 1985, 182, 181, 1982, 180, 1979, 179, 1978, 178, 
          1975, 177, 1974, 176, 1971, 175, 1970, 174, 1967, 173, 172}], 
         Line[{743, 724, 725, 2870, 726, 727, 2871, 728, 729, 730, 2873, 731, 
          2872, 732, 733, 2874, 734, 735, 2875, 736, 737, 2876, 738, 739, 740,
           2869, 741, 744, 747, 2879, 748, 751, 2881, 752, 755, 756, 2884, 
          759, 2885, 760, 763, 2887, 764, 767, 768, 2889, 771, 2890, 772, 775,
           776, 778}], 
         Line[{780, 742, 745, 2878, 746, 749, 2880, 750, 753, 2882, 754, 757, 
          2883, 758, 761, 2886, 762, 765, 2888, 766, 769, 770, 2891, 773, 774,
           2877, 777, 781, 784, 2894, 785, 788, 2896, 789, 792, 2898, 793, 
          796, 797, 2901, 800, 801, 2902, 804, 2903, 805, 808, 809, 2906, 812,
           813, 815}], 
         Line[{817, 779, 782, 2893, 783, 786, 2895, 787, 790, 2897, 791, 794, 
          795, 2900, 798, 2899, 799, 802, 803, 2904, 806, 807, 2905, 810, 811,
           2892, 814, 818, 821, 2909, 822, 825, 2911, 826, 829, 2913, 830, 
          833, 2915, 834, 837, 2916, 838, 841, 842, 2919, 845, 846, 2921, 849,
           850, 852}], 
         Line[{854, 816, 819, 2908, 820, 823, 2910, 824, 827, 2912, 828, 831, 
          2914, 832, 835, 836, 2917, 839, 840, 2918, 843, 844, 2920, 847, 848,
           2907, 851, 855, 858, 2924, 859, 862, 2926, 863, 866, 2928, 867, 
          870, 2930, 871, 874, 875, 2932, 878, 879, 2934, 882, 883, 2936, 886,
           887, 889}], 
         Line[{891, 853, 856, 2923, 857, 860, 2925, 861, 864, 2927, 865, 868, 
          2929, 869, 872, 2931, 873, 876, 877, 2933, 880, 881, 2935, 884, 885,
           2922, 888, 892, 895, 2939, 896, 899, 2941, 900, 903, 2943, 904, 
          907, 908, 2945, 911, 2946, 912, 915, 916, 2949, 919, 920, 2951, 923,
           924, 926}], 
         Line[{928, 890, 893, 2938, 894, 897, 2940, 898, 901, 2942, 902, 905, 
          906, 2944, 909, 910, 2947, 913, 914, 2948, 917, 918, 2950, 921, 922,
           2937, 925, 929, 932, 2954, 933, 936, 2955, 937, 940, 2957, 941, 
          944, 2959, 945, 948, 949, 2962, 952, 953, 2965, 956, 957, 2966, 960,
           961, 963}], 
         Line[{964, 927, 930, 2953, 931, 934, 935, 2956, 938, 939, 2958, 942, 
          943, 2960, 946, 947, 2961, 950, 951, 2964, 954, 2963, 955, 958, 959,
           2952, 962, 965, 966, 2967, 967, 968, 969, 2968, 970, 971, 2969, 
          972, 973, 2970, 974, 2971, 975, 976, 977, 2972, 978, 979, 2973, 980,
           981, 982}], 
         Line[{1001, 1073, 1072, 3010, 1069, 1068, 1065, 3007, 1064, 3006, 
          1061, 1060, 1057, 3004, 1056, 1053, 3002, 1052, 1049, 3000, 1048, 
          1045, 2998, 1044, 1041, 1037, 2996, 1034, 1033, 2995, 1030, 1029, 
          1026, 2992, 1025, 1022, 2989, 1021, 2990, 1018, 1017, 1014, 2986, 
          1013, 1010, 2984, 1009, 1006, 2982, 1005, 1002, 1040}], 
         Line[{1038, 1110, 1109, 3025, 1106, 1105, 3023, 1102, 1101, 1098, 
          3020, 1097, 3019, 1094, 1093, 1090, 3017, 1089, 1086, 3015, 1085, 
          1082, 3013, 1081, 1078, 1074, 3011, 1071, 1070, 3009, 1067, 1066, 
          3008, 1063, 1062, 1059, 3005, 1058, 1055, 3003, 1054, 1051, 3001, 
          1050, 1047, 2999, 1046, 1043, 2997, 1042, 1039, 1077}], 
         Line[{1075, 1147, 1146, 3040, 1143, 1142, 3038, 1139, 1138, 3036, 
          1135, 1134, 1131, 3033, 1130, 1127, 3032, 1126, 1123, 3030, 1122, 
          1119, 3028, 1118, 1115, 1111, 3026, 1108, 1107, 3024, 1104, 1103, 
          3022, 1100, 1099, 3021, 1096, 1095, 1092, 3018, 1091, 1088, 3016, 
          1087, 1084, 3014, 1083, 1080, 3012, 1079, 1076, 1114}], 
         Line[{1112, 1184, 1183, 3055, 1180, 1179, 3053, 1176, 1175, 1172, 
          3050, 1171, 1168, 3048, 1167, 1164, 3047, 1163, 1160, 3045, 1159, 
          1156, 3043, 1155, 1152, 1148, 3041, 1145, 1144, 3039, 1141, 1140, 
          3037, 1137, 1136, 3035, 1133, 1132, 3034, 1129, 1128, 1125, 3031, 
          1124, 1121, 3029, 1120, 1117, 3027, 1116, 1113, 1151}], 
         Line[{1149, 1221, 1220, 3070, 1217, 1216, 1213, 3067, 1212, 3066, 
          1209, 1208, 3065, 1205, 1204, 1201, 3061, 1200, 1197, 3059, 1196, 
          1193, 3058, 1192, 1189, 1185, 3056, 1182, 1181, 3054, 1178, 1177, 
          3052, 1174, 1173, 3051, 1170, 1169, 3049, 1166, 1165, 1162, 3046, 
          1161, 1158, 3044, 1157, 1154, 3042, 1153, 1150, 1188}], 
         Line[{1186, 1240, 1239, 3078, 1238, 1237, 3077, 1236, 1235, 3076, 
          1234, 1233, 3075, 1232, 1231, 3074, 1230, 1229, 3073, 1228, 1227, 
          1226, 3072, 1225, 1224, 1222, 3071, 1219, 1218, 3069, 1215, 1214, 
          3068, 1211, 1210, 1207, 3063, 1206, 3064, 1203, 1202, 3062, 1199, 
          1198, 3060, 1195, 1194, 1191, 3057, 1190, 1187, 1223}], 
         Line[{1241, 1554, 1553, 1550, 3204, 1549, 3203, 1546, 1545, 1542, 
          3201, 1541, 1538, 3198, 1537, 1534, 3197, 1533, 1530, 3195, 1529, 
          1526, 3193, 1525, 1522, 1518, 3191, 1517, 1516, 1515, 3190, 1514, 
          1513, 3188, 1512, 3189, 1511, 1510, 1509, 3187, 1508, 1507, 3186, 
          1506, 1505, 3185, 1504, 1503, 3184, 1502, 1501, 1521}], 
         Line[{551, 550, 2439, 549, 2437, 548, 2436, 547, 2433, 546, 2432, 
          545, 2429, 544, 2428, 543, 542, 2425, 541, 2422, 540, 2421, 539, 
          2418, 538, 2417, 537, 2414, 536, 2413, 535, 2410, 534, 533}], 
         Line[{1261, 1242, 1243, 3080, 1244, 1245, 3081, 1246, 1247, 1248, 
          3083, 1249, 3082, 1250, 1251, 3084, 1252, 1253, 3085, 1254, 1255, 
          3086, 1256, 1257, 1258, 3079, 1259, 1262, 1265, 3089, 1266, 1269, 
          3091, 1270, 1273, 1274, 3094, 1277, 3095, 1278, 1281, 3097, 1282, 
          1285, 1286, 3099, 1289, 3100, 1290, 1293, 1294, 1296}], 
         Line[{1298, 1260, 1263, 3088, 1264, 1267, 3090, 1268, 1271, 3092, 
          1272, 1275, 3093, 1276, 1279, 3096, 1280, 1283, 3098, 1284, 1287, 
          1288, 3101, 1291, 1292, 3087, 1295, 1299, 1302, 3104, 1303, 1306, 
          3106, 1307, 1310, 3108, 1311, 1314, 1315, 3111, 1318, 1319, 3112, 
          1322, 3113, 1323, 1326, 1327, 3116, 1330, 1331, 1333}], 
         Line[{1335, 1297, 1300, 3103, 1301, 1304, 3105, 1305, 1308, 3107, 
          1309, 1312, 1313, 3110, 1316, 3109, 1317, 1320, 1321, 3114, 1324, 
          1325, 3115, 1328, 1329, 3102, 1332, 1336, 1339, 3119, 1340, 1343, 
          3121, 1344, 1347, 3123, 1348, 1351, 3125, 1352, 1355, 3126, 1356, 
          1359, 1360, 3129, 1363, 1364, 3131, 1367, 1368, 1370}], 
         Line[{1372, 1334, 1337, 3118, 1338, 1341, 3120, 1342, 1345, 3122, 
          1346, 1349, 3124, 1350, 1353, 1354, 3127, 1357, 1358, 3128, 1361, 
          1362, 3130, 1365, 1366, 3117, 1369, 1373, 1376, 3134, 1377, 1380, 
          3136, 1381, 1384, 3138, 1385, 1388, 3140, 1389, 1392, 1393, 3142, 
          1396, 1397, 3144, 1400, 1401, 3146, 1404, 1405, 1407}], 
         Line[{1409, 1371, 1374, 3133, 1375, 1378, 3135, 1379, 1382, 3137, 
          1383, 1386, 3139, 1387, 1390, 3141, 1391, 1394, 1395, 3143, 1398, 
          1399, 3145, 1402, 1403, 3132, 1406, 1410, 1413, 3149, 1414, 1417, 
          3151, 1418, 1421, 3153, 1422, 1425, 1426, 3155, 1429, 3156, 1430, 
          1433, 1434, 3159, 1437, 1438, 3161, 1441, 1442, 1444}], 
         Line[{1446, 1408, 1411, 3148, 1412, 1415, 3150, 1416, 1419, 3152, 
          1420, 1423, 1424, 3154, 1427, 1428, 3157, 1431, 1432, 3158, 1435, 
          1436, 3160, 1439, 1440, 3147, 1443, 1447, 1450, 3164, 1451, 1454, 
          3165, 1455, 1458, 3167, 1459, 1462, 3169, 1463, 1466, 1467, 3172, 
          1470, 1471, 3175, 1474, 1475, 3176, 1478, 1479, 1481}], 
         Line[{1482, 1445, 1448, 3163, 1449, 1452, 1453, 3166, 1456, 1457, 
          3168, 1460, 1461, 3170, 1464, 1465, 3171, 1468, 1469, 3174, 1472, 
          3173, 1473, 1476, 1477, 3162, 1480, 1483, 1484, 3177, 1485, 1486, 
          1487, 3178, 1488, 1489, 3179, 1490, 1491, 3180, 1492, 3181, 1493, 
          1494, 1495, 3182, 1496, 1497, 3183, 1498, 1499, 1500}], 
         Line[{1519, 1591, 1590, 3220, 1587, 1586, 1583, 3217, 1582, 3216, 
          1579, 1578, 1575, 3214, 1574, 1571, 3212, 1570, 1567, 3210, 1566, 
          1563, 3208, 1562, 1559, 1555, 3206, 1552, 1551, 3205, 1548, 1547, 
          1544, 3202, 1543, 1540, 3199, 1539, 3200, 1536, 1535, 1532, 3196, 
          1531, 1528, 3194, 1527, 1524, 3192, 1523, 1520, 1558}], 
         Line[{1556, 1628, 1627, 3235, 1624, 1623, 3233, 1620, 1619, 1616, 
          3230, 1615, 3229, 1612, 1611, 1608, 3227, 1607, 1604, 3225, 1603, 
          1600, 3223, 1599, 1596, 1592, 3221, 1589, 1588, 3219, 1585, 1584, 
          3218, 1581, 1580, 1577, 3215, 1576, 1573, 3213, 1572, 1569, 3211, 
          1568, 1565, 3209, 1564, 1561, 3207, 1560, 1557, 1595}], 
         Line[{1593, 1665, 1664, 3250, 1661, 1660, 3248, 1657, 1656, 3246, 
          1653, 1652, 1649, 3243, 1648, 1645, 3242, 1644, 1641, 3240, 1640, 
          1637, 3238, 1636, 1633, 1629, 3236, 1626, 1625, 3234, 1622, 1621, 
          3232, 1618, 1617, 3231, 1614, 1613, 1610, 3228, 1609, 1606, 3226, 
          1605, 1602, 3224, 1601, 1598, 3222, 1597, 1594, 1632}], 
         Line[{1630, 1702, 1701, 3265, 1698, 1697, 3263, 1694, 1693, 1690, 
          3260, 1689, 1686, 3258, 1685, 1682, 3257, 1681, 1678, 3255, 1677, 
          1674, 3253, 1673, 1670, 1666, 3251, 1663, 1662, 3249, 1659, 1658, 
          3247, 1655, 1654, 3245, 1651, 1650, 3244, 1647, 1646, 1643, 3241, 
          1642, 1639, 3239, 1638, 1635, 3237, 1634, 1631, 1669}], 
         Line[{1667, 1739, 1738, 3280, 1735, 1734, 1731, 3277, 1730, 3276, 
          1727, 1726, 3275, 1723, 1722, 1719, 3271, 1718, 1715, 3269, 1714, 
          1711, 3268, 1710, 1707, 1703, 3266, 1700, 1699, 3264, 1696, 1695, 
          3262, 1692, 1691, 3261, 1688, 1687, 3259, 1684, 1683, 1680, 3256, 
          1679, 1676, 3254, 1675, 1672, 3252, 1671, 1668, 1706}], 
         Line[{1704, 1758, 1757, 3288, 1756, 1755, 3287, 1754, 1753, 3286, 
          1752, 1751, 3285, 1750, 1749, 3284, 1748, 1747, 3283, 1746, 1745, 
          1744, 3282, 1743, 1742, 1740, 3281, 1737, 1736, 3279, 1733, 1732, 
          3278, 1729, 1728, 1725, 3273, 1724, 3274, 1721, 1720, 3272, 1717, 
          1716, 3270, 1713, 1712, 1709, 3267, 1708, 1705, 
          1741}]}, {}, {}, {}, {}, {}}}, VertexNormals -> CompressedData["
1:eJw8mnc4V//7x0nRkJCIkAbREElZdUt9QsNomJFIKWkSLRkZ2RUySvbeZHPb
e28Z2fv9PilRSn7n21s//7iuc72uc53zfp37+Xo87+e9zfDOOeMVdHR0ncx0
dAzk/xNx56XuBMdA7GPZYxL3PiDXYTnd3hkC7vJrdkxdf4rHiuBpQX0adkXe
cDk6RoDBGtnGkqVQXJWisZleIRrr1y1NC5HrBT8FNHscfYM/E+lmauMtoFqs
T/7uHwKsCza5a1a4gES54/4XYtmwP9h0zqWDgKnna7I8KQYgsNXLfEa0HIxO
ODStfEGA6r6FgbEH8bir03NAyaUJCEeOq3uzqfDjS7iBZX0xylwM4GjVq4U9
QhvFt3SR14eStmmzNuPUTQd9+FAGa3cNP9ouRYUUA0/uLr0utPAuVH4+nQN/
NsjVuO2ngIqbmayoQT+OqF3KFhG0g8OWljvSnk3B9PZCk8TIQVS7nRS8b6cL
cG/TrexamoChp8wc2wKHUH5Vidnx5CyMD8t/O889AeKONl/XbBvGnZ+fUwsy
y9DSskux8OQ45NVL5q+5PIR2+31W9bg3oKLzlluDh8dhh8cJlkD+QczbWvq1
dn0dMieH9vHrToB98lrnmHs9GB+/28nxXAkO75WMczo2DU31Qw8st7Wionwd
b+vKKsznW8nqlU2BKT/Z7ouVDThi2HlrY2goTn/ZwtT1kwqFQv4+jXseAF1F
lkVSdDZydTfKRrcTUMrOoruk4o1C24e+YX4+Oqyt/jNWTgCxXTpaOMMDndml
TaQFIrCEuYKB5wcBvUfibTlS3eB10o5uF/pY8KjY1Bs0S8CA41D5Ffs34Dah
9zDsSiEkf2rJ3J5LXteWjT9c64YbJB/Xdt9E+LCC+6xCEQH9L9PGr6dloYtZ
z86WsmIIsCq6XG5DQI/NDpkDQ3W46Hhjd6J4BtCxDr5tXaTC5jvtbLa9bWi4
IBD6PScUNHXH2GA9FTLii4Leu3fjOvFeq5FOZ7yy4hCH0sA07ByXjGBd9Rk7
2BlMp6c/onO+4OtV3VOQYdN9pfvlAH4qlvjWHJyBTvbfH4a/nwTbs3sc3egG
MWwj5bjaQDHGPNeq51w9CQ4ezTXrFgZQg8mNs+9NOcoYb72g0TsBfdquUb6s
AyiRVR7QQl+OKqdsPdVtJ0FVccXYgEcXnu1/8U76UwaeO109l3+AAn4+vA+F
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
//2mlNTPiualgbGOJKxct0qK+nETsqRv2bCTrNMBs4c2adsH8NF/5/9TEiDP
cRttHR7bSbj4u4Hxhno/zu8sdMoJKMV15Ybn9NdOwXjCttctV9Px/tCVpG8x
1nhsIHMsl9xHk065TIXhYrx+re7Ogm0E5ipqaf8MIvclY63GiZ7PqHQt/fIz
7xJkDMuyvqI+BbGh6FIm3ImvdFawlF9Ox67GDawdDhTgOpbGoJtfikIVPudV
FROQO7rOa7cj6S82uJ9w3F2HmqdXnV7IykCm24fYT5FcwXletPtVXAdWFldf
qaZLRWsvoT2nIyhQ1GPKdHllB+4N50nJsEnG9/FuP96Revv5seUxNroGVDq/
VisvIQvLjSW5qobJc7nmo/xW2RY8k7K0W7EG0dRLzXBUgQpuCfQSEoHNKJti
uiOZPxA9blpGiARSgSPVyuHI62qUmo32lax4CHdXmh83PUvAHMe01ZBfC472
loVcPFiIbpztN2XFqWBeEKxk4tyOWwXjsr7sLkHXIqtHH70oEPbt1FbFjVWY
xPrbn+OHK/Cyhbs+I/kzLM52rlQ6AdV6nXc4ZRaCP8MZJj2SDx3ufBSq2NiB
/8fTdYdj+f3/UgpJGiiVUpJCJKmst0jKioyEsiJEIqOMsskom2Tvvfc69haP
vffmeW5ahPK7Px+f7+8v13Vfz3Wc+9zv8xrv83qem1WWlf89Vw2qptjy/WxB
BL5l0+L7oqkophTJH71bBQeep5IpJ+P+l+BzSvayL3Qu9Hif2HICD8ozbyxw
nZ8yIrduNxGFytbgkKM/Qmqt0Xt+4n7tPuuCdW1PP+o5cfeK+/E6RJ9ziFFj
LxGEHIIz91KHQlFcW6jRm0Cg6yi944XX1QddO3nXXwnwVbl9ms09ER72Pn7E
gPsRlhMvOwME+lHAZ6lH5RS1qKfS/N4oNxG4Avau7HLsRwfyPl0NF61F9xSz
niSeIQJrzvbbpCPxYOTz/V61agycNHYZaPqOwVSbP6/DXCTsc5IZN6MJhogF
WF3FdULuS/s0oeN9aKHqcc5WXxX6S+4tet2RCIFxoReTprvRU/6/WW7+5ejK
0I05JnL8Oao5B8ulucPm5VZTm3FnJO+2v2fjn++5iNF+5HsdhnrWvNrXZTPQ
HZEmDSsSjv/nnfIvN3ahLOMkF4qlYsStSBAKxOth9U+nIisjAYk43iD9Ss5C
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
Zj2+
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-3.0352231566724126`, 
       3.0352231566724117`}, {-2.036481334773833, 2.036481334773833}, {0., 
       1.3464120172559568`}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.515, $CellContext`k2$$ = 
    0.76, $CellContext`k3$$ = 0.485, $CellContext`k4$$ = 
    0.8700000000000001, $CellContext`k5$$ = {
    1, 2, {0, 0}}, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 
     0.515, {1, 1, {0, -1}} -> 0.76, {1, 1, {-1, -1}} -> 
     0.485, {1, 1, {-1, 1}} -> 0.8700000000000001, {1, 1, {1, 0}} -> 
     0.515, {1, 1, {0, 1}} -> 0.76, {1, 1, {1, 1}} -> 0.485, {1, 1, {1, -1}} -> 
     0.8700000000000001}, $CellContext`m1Sel$$ = 1, $CellContext`m2Sel$$ = 
    1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$17965, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
    1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {3.8}, "numberOfMasses" -> 1, 
     "latticeBasis" -> {{0.44399999999999995`, 1.31}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.383197744359063, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.32099531813922794`, 0.9470807809963709}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {7, 4}, 
     "latticeCellOriginIndexes" -> {{-3, 1}, {-3, 2}, {-2, -1}, {-2, 0}, {-2, 
      1}, {-2, 2}, {-1, -1}, {-1, 0}, {-1, 1}, {0, -2}, {0, -1}, {0, 0}, {0, 
      1}, {1, -2}, {1, -1}, {1, 0}, {1, 1}, {2, -2}, {2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.3749179866904115, 0.8904302183897271}, {
      0.6139282032055488, -0.2080794826131783}}, 
     "reciprocalNorms" -> {0.9661415375428015, 0.6482321418872729}, 
     "qMaxVec" -> {6.070446313344825, 4.072962669547666}, 
     "mObliqueComponents" -> {{0.2858749648514386, 0.4068797450557691}}, 
     "mPosFirstCell" -> {{0.9, 0.7}}, "pointsDataTable" -> CompressedData["
1:eJxTTMoPSmVmYGBgBGIRIGYC4g1FGRPf1ny3L7Dlur64gPlAd87z3ys/cjmI
rnN/WCXyaz9I1t703/5DXzVi+g+xHnCoz9pTMrnDfqdc6+vAHf/2p1jf9++d
/s/+TeAOoMjH/U8vKN3+WcfnUCMCMuDK/i0nyvbNl/q+fyLYgG/7T4G4+nft
216DNDzez8Ok3S52k8khAKQ98IS9MRiwHzh3BgTe7P8PBu/3L5gJAjv3n4WI
26eBwTMozebAAAY/7G+e+x78eCnzARuQd2xv2U/PE2o+cOrhfqDjgQ74bA+0
W4Wt8as92HkiDA4HTi103faZE+peNoj3JBgOtILd99u+4qWaIceaPfs1wQaw
OICNn/3HfgLYP1wOAJ+gqU0=
      "], "lineTable" -> {{
        Line[{{-10.707999999999998`, -12.370000000000001`}, {-4.492, 5.97}}], 
        Line[{{-8.808, -11.57}, {-2.5919999999999996`, 6.77}}], 
        Line[{{-6.9079999999999995`, -10.77}, {-0.6920000000000002, 7.57}}], 
        Line[{{-5.007999999999999, -9.97}, {1.2079999999999997`, 8.37}}], 
        Line[{{-3.1079999999999997`, -9.17}, {3.1079999999999997`, 9.17}}], 
        Line[{{-1.2079999999999997`, -8.37}, {5.007999999999999, 9.97}}], 
        Line[{{0.6920000000000002, -7.57}, {6.9079999999999995`, 10.77}}], 
        Line[{{2.5919999999999996`, -6.77}, {8.808, 11.57}}], 
        Line[{{4.492, -5.97}, {10.707999999999998`, 12.370000000000001`}}]}, {
        Line[{{-10.707999999999998`, -12.370000000000001`}, {4.492, -5.97}}], 
        Line[{{-10.264, -11.06}, {4.936, -4.66}}], 
        Line[{{-9.82, -9.75}, {5.38, -3.3500000000000005`}}], 
        Line[{{-9.376, -8.440000000000001}, {5.824, -2.04}}], 
        Line[{{-8.931999999999999, -7.130000000000001}, {6.268, -0.73}}], 
        Line[{{-8.488, -5.82}, {6.712, 0.5800000000000001}}], 
        Line[{{-8.044, -4.51}, {7.156, 1.8900000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.156, -1.8900000000000001`}, {8.044, 4.51}}], 
        Line[{{-6.712, -0.5800000000000001}, {8.488, 5.82}}], 
        Line[{{-6.268, 0.73}, {8.931999999999999, 7.130000000000001}}], 
        Line[{{-5.824, 2.04}, {9.376, 8.440000000000001}}], 
        Line[{{-5.38, 3.3500000000000005`}, {9.82, 9.75}}], 
        Line[{{-4.936, 4.66}, {10.264, 11.06}}], 
        Line[{{-4.492, 5.97}, {10.707999999999998`, 
         12.370000000000001`}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {3.0352231566724126`, 
    2.036481334773833}, $CellContext`qPlaneLoc$$ = {{-3.0352231566724126`, \
-2.036481334773833}, {3.0352231566724126`, 
    2.036481334773833}}, $CellContext`rawArrayOfMasses$$ = {
    3.8}, $CellContext`rawNumberOfMasses$$ = 1, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 2, $CellContext`tauSliderValue$$ = 
    1, $CellContext`tick$$ = False, $CellContext`u$$ = {{0.44399999999999995`,
     1.31}, {1.9, 0.8}, {0.9, 0.7}}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period, t/T = "], 
                 Dynamic[
                  
                  N[($CellContext`tauSliderValue$$ - 
                    1)/$CellContext`dynMeshSize$$]]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {
                  1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open", 
                  AppearanceElements -> {
                   "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                    "FasterSlowerButtons", "DirectionButton"}]}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Row[{
                 Text["Angular frequency \[Omega](q), selection:"], 
                 Dynamic[
                  SetterBar[
                   
                   Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["number of mesh intervals "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 8, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`freqMeshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin], 
                Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 8}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        8, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}, {0.4, 1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 
        2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tauSliderValue$$ = 
        1, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], 
          
          If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
             Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
           LocatorPane[
            Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                  Dimensions[#]] < 3, 
                
                Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
                If[First[
                   Dimensions[#]] > 7, 
                 Take[#, 7], #]]; 
             Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                First[
                  Dimensions[$CellContext`rawArrayOfMasses$$]]; 
               If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                   $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                 
                 While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                  Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                  Part[
                   Part[$CellContext`kArray$$, All, 1], All, 1]]; 
               If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                 Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                 
                 While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                  Part[$CellContext`u$$, 1], 
                  
                  Part[$CellContext`u$$, 
                   1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                Part[$CellContext`glConstLocDefault, 1], 
                Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                  Part[$CellContext`u$$, 2], 
                  
                  Part[$CellContext`u$$, 
                   2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                Part[$CellContext`glConstLocDefault, 2], 
                Part[$CellContext`u$$, 2]]; {
                Part[$CellContext`u$$, 1], 
                
                Part[$CellContext`u$$, 
                 2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
              If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
              If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
              If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
              If[$CellContext`omegaIndex$$ > 
                2 $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
              ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
               2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
              True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
            $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
            LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period, t/T = "], 
                  Dynamic[
                   
                   N[($CellContext`tauSliderValue$$ - 
                    1)/$CellContext`dynMeshSize$$]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {
                   1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open", 
                   AppearanceElements -> {
                    "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                    "FasterSlowerButtons", "DirectionButton"}]}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Row[{
                  Text["Angular frequency \[Omega](q), selection:"], 
                  Dynamic[
                   SetterBar[
                    
                    Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["number of mesh intervals "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 8, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`freqMeshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{907., {288., 295.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax, 1]/2, Part[$CellContext`qMax, 1]/2,
                Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -
               Part[$CellContext`qMax, 2]/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {380, 
        380}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, $CellContext`k] \
$CellContext`glConstMMax^(-1)/350]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
$CellContext`glConstMMax^(-1)/500]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 0.25, $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], \
$CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6013889001492734`*^9, {3.6013891792952394`*^9, 3.601389191095915*^9}, 
   3.601389343635639*^9, 3.6013896010413623`*^9, 3.6013897227443233`*^9, 
   3.601389955778652*^9, 3.6013900783846645`*^9, 3.6013901373530374`*^9, 
   3.601390518838857*^9, 3.6013905597761984`*^9, 3.6013909951881027`*^9, 
   3.6013910467940545`*^9, 3.601391822685433*^9, 3.601392104940577*^9, 
   3.6013921467239666`*^9, 3.601392239999302*^9, 3.60139238315449*^9, 
   3.601392440920794*^9, 3.601392470945511*^9, 3.601392610517494*^9, 
   3.601392688817973*^9, 3.6015965463323107`*^9, 3.601596652471382*^9, {
   3.6015967463317504`*^9, 3.60159677307428*^9}},
 CellID->1462848],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    True, $CellContext`bRefreshMatrix$$ = 
    True, $CellContext`couplingData$$ = {{{{
       1, 3, {0, 0}, 0.25, 0.1899409999999999, {0.9239999999999999, 
        0.5750000000000002}, {1.27, 0.8399999999999999}, {{0.6302799290305944,
         0.48272884737892274`}, {0.48272884737892274`, 
        0.3697200709694056}}}, {
       1, 2, {0, 0}, 0.6900000000000001, 0.20256399999999977`, {
        0.9239999999999999, 0.5750000000000002}, {0.9319999999999999, 
        1.025}, {{0.0003159495270630526, 0.017772160897296684`}, {
        0.017772160897296684`, 0.9996840504729368}}}, {
       1, 4, {0, 0}, 0.8800000000000001, 0.233, {0.9239999999999999, 
        0.5750000000000002}, {0.45399999999999996`, 0.4650000000000001}, {{
        0.9480686695278968, 0.22188841201716755`}, {0.22188841201716755`, 
        0.0519313304721031}}}, {
       1, 5, {0, 0}, 0.25, 0.7092640000000002, {0.9239999999999999, 
        0.5750000000000002}, {1.616, 1.0550000000000002`}, {{
        0.6751562182769746, 0.4683164519840285}, {0.4683164519840285, 
        0.32484378172302547`}}}}, {{
       2, 3, {0, 0}, 0.25, 0.14846900000000007`, {0.9319999999999999, 
        1.025}, {1.27, 0.8399999999999999}, {{
        0.7694804976122962, -0.4211653611191562}, {-0.4211653611191562, 
        0.23051950238770386`}}}, {
       2, 1, {0, 0}, 0.6900000000000001, 0.20256399999999977`, {
        0.9239999999999999, 0.5750000000000002}, {0.9319999999999999, 
        1.025}, {{0.0003159495270630526, 0.017772160897296684`}, {
        0.017772160897296684`, 0.9996840504729368}}}, {
       2, 5, {0, 0}, 0.25, 0.46875600000000023`, {0.9319999999999999, 
        1.025}, {1.616, 1.0550000000000002`}, {{0.9980800245756853, 
        0.043775439674372515`}, {0.043775439674372515`, 
        0.0019199754243145995`}}}, {
       2, 4, {0, 0}, 0.25, 0.5420839999999998, {0.9319999999999999, 1.025}, {
        0.45399999999999996`, 0.4650000000000001}, {{0.42149187210838185`, 
        0.49379800916463135`}, {0.49379800916463135`, 
        0.5785081278916181}}}}, {{
       3, 2, {0, 0}, 0.25, 0.14846900000000007`, {0.9319999999999999, 
        1.025}, {1.27, 0.8399999999999999}, {{
        0.7694804976122962, -0.4211653611191562}, {-0.4211653611191562, 
        0.23051950238770386`}}}, {
       3, 5, {0, 0}, 0.25, 0.16594100000000017`, {1.27, 0.8399999999999999}, {
        1.616, 1.0550000000000002`}, {{0.7214371372957854, 
        0.44829186277050304`}, {0.44829186277050304`, 0.2785628627042146}}}, {
       3, 1, {0, 0}, 0.25, 0.1899409999999999, {0.9239999999999999, 
        0.5750000000000002}, {1.27, 0.8399999999999999}, {{0.6302799290305944,
         0.48272884737892274`}, {0.48272884737892274`, 
        0.3697200709694056}}}, {
       3, 4, {0, 0}, 0.25, 0.806481, {1.27, 0.8399999999999999}, {
        0.45399999999999996`, 0.4650000000000001}, {{0.8256313539934607, 
        0.3794261737102298}, {0.3794261737102298, 0.1743686460065393}}}}, {{
       4, 1, {0, 0}, 0.8800000000000001, 0.233, {0.9239999999999999, 
        0.5750000000000002}, {0.45399999999999996`, 0.4650000000000001}, {{
        0.9480686695278968, 0.22188841201716755`}, {0.22188841201716755`, 
        0.0519313304721031}}}, {
       4, 2, {0, 0}, 0.25, 0.5420839999999998, {0.9319999999999999, 1.025}, {
        0.45399999999999996`, 0.4650000000000001}, {{0.42149187210838185`, 
        0.49379800916463135`}, {0.49379800916463135`, 0.5785081278916181}}}, {
       4, 3, {0, 0}, 0.25, 0.806481, {1.27, 0.8399999999999999}, {
        0.45399999999999996`, 0.4650000000000001}, {{0.8256313539934607, 
        0.3794261737102298}, {0.3794261737102298, 0.1743686460065393}}}, {
       4, 5, {0, 0}, 0.25, 1.6983440000000005`, {0.45399999999999996`, 
        0.4650000000000001}, {1.616, 1.0550000000000002`}, {{
        0.7950356347124022, 0.4036755804477774}, {0.4036755804477774, 
        0.2049643652875978}}}}, {{
       5, 3, {0, 0}, 0.25, 0.16594100000000017`, {1.27, 0.8399999999999999}, {
        1.616, 1.0550000000000002`}, {{0.7214371372957854, 
        0.44829186277050304`}, {0.44829186277050304`, 0.2785628627042146}}}, {
       5, 2, {0, 0}, 0.25, 0.46875600000000023`, {0.9319999999999999, 
        1.025}, {1.616, 1.0550000000000002`}, {{0.9980800245756853, 
        0.043775439674372515`}, {0.043775439674372515`, 
        0.0019199754243145995`}}}, {
       5, 1, {0, 0}, 0.25, 0.7092640000000002, {0.9239999999999999, 
        0.5750000000000002}, {1.616, 1.0550000000000002`}, {{
        0.6751562182769746, 0.4683164519840285}, {0.4683164519840285, 
        0.32484378172302547`}}}, {
       5, 4, {0, 0}, 0.25, 1.6983440000000005`, {0.45399999999999996`, 
        0.4650000000000001}, {1.616, 1.0550000000000002`}, {{
        0.7950356347124022, 0.4036755804477774}, {0.4036755804477774, 
        0.2049643652875978}}}}}, {{{
       1, 5, {-1, 0}, 0.25, 0.5012890000000001, {0.9239999999999999, 
        0.5750000000000002}, {1.216, -0.06999999999999984}, {{
        0.17008950924516597`, -0.37571141596963026`}, {-0.37571141596963026`, 
        0.8299104907548339}}}, {
       1, 2, {-1, 0}, 0.79, 0.6092890000000004, {0.9239999999999999, 
        0.5750000000000002}, {0.5319999999999998, -0.10000000000000009`}, {{
        0.25220215694030257`, 0.4342766733028169}, {0.4342766733028169, 
        0.7477978430596975}}}, {
       1, 3, {-1, 0}, 0.78, 0.7425160000000006, {0.9239999999999999, 
        0.5750000000000002}, {0.8699999999999999, -0.28500000000000014`}, {{
        0.003927188100997154, 0.06254410679365835}, {0.06254410679365835, 
        0.9960728118990029}}}, {
       1, 4, {1, 0}, 0.5800000000000001, 1.0351249999999996`, {
        0.9239999999999999, 0.5750000000000002}, {0.8540000000000001, 
        1.59}, {{
        0.004733727810650868, -0.06863905325443774}, {-0.06863905325443774, 
        0.9952662721893493}}}, {
       1, 5, {0, -1}, 0.25, 1.2739840000000002`, {0.9239999999999999, 
        0.5750000000000002}, {-0.20400000000000018`, 0.6150000000000002}, {{
        0.9987440972571083, -0.03541645734954288}, {-0.03541645734954288, 
        0.0012559027428915926`}}}, {
       1, 1, {1, 0}, 0.13, 1.4256250000000001`, {0.9239999999999999, 
        0.5750000000000002}, {1.324, 1.7000000000000002`}, {{
        0.11223147742218333`, 0.3156510302498905}, {0.3156510302498905, 
        0.8877685225778167}}}, {
       1, 1, {-1, 0}, 0.13, 1.4256250000000001`, {0.9239999999999999, 
        0.5750000000000002}, {0.5239999999999998, -0.5499999999999998}, {{
        0.11223147742218333`, 0.3156510302498905}, {0.3156510302498905, 
        0.8877685225778167}}}, {
       1, 4, {-1, 1}, 0.7250000000000001, 1.5345250000000006`, {
        0.9239999999999999, 0.5750000000000002}, {
        1.874, -0.21999999999999997`}, {{
        0.5881298773236018, -0.49217184470764574`}, {-0.49217184470764574`, 
        0.4118701226763983}}}, {
       1, 5, {1, -1}, 0.25, 1.8872090000000001`, {0.9239999999999999, 
        0.5750000000000002}, {0.19599999999999995`, 1.7400000000000002`}, {{
        0.28082952126658994`, -0.4494043849939248}, {-0.4494043849939248, 
        0.71917047873341}}}, {
       1, 4, {0, 1}, 0.8, 1.9314000000000002`, {0.9239999999999999, 
        0.5750000000000002}, {2.274, 0.905}, {{0.9436160298229262, 
        0.23066169617893742`}, {0.23066169617893742`, 
        0.05638397017707356}}}, {
       1, 3, {1, -1}, 0.6900000000000001, 2.055976, {0.9239999999999999, 
        0.5750000000000002}, {-0.15000000000000013`, 1.525}, {{
        0.5610357319346142, -0.4962606567391837}, {-0.4962606567391837, 
        0.4389642680653858}}}, {
       1, 2, {-1, 1}, 0.25, 2.094409000000001, {0.9239999999999999, 
        0.5750000000000002}, {2.3520000000000003`, 0.33999999999999986`}, {{
        0.9736321797700449, -0.16022658420585492`}, {-0.16022658420585492`, 
        0.026367820229955142`}}}, {
       1, 3, {0, -1}, 0.25, 2.2033010000000006`, {0.9239999999999999, 
        0.5750000000000002}, {-0.5500000000000003, 0.3999999999999999}, {{
        0.9861004011707887, 0.117074335281471}, {0.117074335281471, 
        0.0138995988292113}}}, {
       1, 4, {-1, 0}, 0.5800000000000001, 2.2821250000000006`, {
        0.9239999999999999, 0.5750000000000002}, {
        0.053999999999999826`, -0.6599999999999999}, {{0.3316645670153914, 
        0.47081119570575664`}, {0.47081119570575664`, 0.6683354329846085}}}, {
       1, 1, {1, -1}, 0.7150000000000001, 2.4856250000000006`, {
        0.9239999999999999, 0.5750000000000002}, {-0.4960000000000002, 
        1.2600000000000002`}, {{
        0.8112245411113904, -0.39133014835302987`}, {-0.39133014835302987`, 
        0.18877545888860947`}}}, {
       1, 1, {-1, 1}, 0.7150000000000001, 2.485625000000001, {
        0.9239999999999999, 0.5750000000000002}, {
        2.3440000000000003`, -0.10999999999999988`}, {{
        0.8112245411113904, -0.39133014835302987`}, {-0.39133014835302987`, 
        0.18877545888860944`}}}, {
       1, 3, {1, 0}, 0.78, 2.4886159999999995`, {0.9239999999999999, 
        0.5750000000000002}, {1.6700000000000002`, 1.9649999999999999`}, {{
        0.22362469742218183`, 0.41667336382953424`}, {0.41667336382953424`, 
        0.7763753025778181}}}, {
       1, 2, {1, 0}, 0.79, 2.647088999999999, {0.9239999999999999, 
        0.5750000000000002}, {1.332, 2.15}, {{0.06288568310321269, 
        0.24275723256754886`}, {0.24275723256754886`, 0.9371143168967874}}}, {
       1, 2, {1, -1}, 0.25, 3.281969, {0.9239999999999999, 
        0.5750000000000002}, {-0.4880000000000002, 1.71}, {{
        0.6074841048163466, -0.4883105233474173}, {-0.4883105233474173, 
        0.3925158951836533}}}, {
       1, 2, {0, -1}, 0.25, 3.283444000000001, {0.9239999999999999, 
        0.5750000000000002}, {-0.8880000000000003, 0.585}, {{
        0.9999695441737395, -0.005518595718398002}, {-0.005518595718398002, 
        0.000030455826260473973`}}}, {
       1, 3, {-1, 1}, 0.6900000000000001, 3.2951560000000018`, {
        0.9239999999999999, 0.5750000000000002}, {2.6900000000000004`, 
        0.1549999999999998}, {{
        0.9464668744059461, -0.22509404714071213`}, {-0.22509404714071213`, 
        0.053533125594053876`}}}, {
       1, 1, {0, 1}, 0.375, 3.506000000000001, {0.9239999999999999, 
        0.5750000000000002}, {2.744, 1.0150000000000001`}, {{
        0.9447803764974331, 0.22840844266970903`}, {0.22840844266970903`, 
        0.055219623502567004`}}}, {
       1, 1, {0, -1}, 0.375, 3.506000000000001, {0.9239999999999999, 
        0.5750000000000002}, {-0.8960000000000004, 0.13500000000000023`}, {{
        0.9447803764974331, 0.22840844266970903`}, {0.22840844266970903`, 
        0.055219623502567004`}}}, {
       1, 5, {-1, -1}, 0.25, 3.5120090000000013`, {0.9239999999999999, 
        0.5750000000000002}, {-0.6040000000000005, -0.5099999999999998}, {{
        0.6648001186785115, 0.4720602936951471}, {0.4720602936951471, 
        0.33519988132148854`}}}, {
       1, 5, {1, 0}, 0.25, 3.768489, {0.9239999999999999, 
        0.5750000000000002}, {2.016, 2.18}, {{0.3164302721860141, 
        0.46508295499867447`}, {0.46508295499867447`, 0.6835697278139858}}}, {
       1, 4, {1, -1}, 0.7250000000000001, 3.902725, {0.9239999999999999, 
        0.5750000000000002}, {-0.9660000000000002, 1.1500000000000001`}, {{
        0.9152835518772139, -0.2784592816557661}, {-0.2784592816557661, 
        0.08471644812278598}}}, {
       1, 2, {0, 1}, 0.25, 4.133684000000001, {0.9239999999999999, 
        0.5750000000000002}, {2.7520000000000002`, 1.4649999999999999`}, {{
        0.8083791600906118, 0.39357628691501323`}, {0.39357628691501323`, 
        0.1916208399093882}}}, {
       1, 5, {-1, 1}, 0.25, 4.502569000000002, {0.9239999999999999, 
        0.5750000000000002}, {3.0360000000000005`, 0.3700000000000001}, {{
        0.9906664395370732, -0.09615843754976328}, {-0.09615843754976328, 
        0.009333560462926833}}}, {
       1, 4, {1, 1}, 0.385, 5.179525000000002, {0.9239999999999999, 
        0.5750000000000002}, {2.6740000000000004`, 2.0300000000000002`}, {{
        0.5912704350302393, 0.49159913312514175`}, {0.49159913312514175`, 
        0.40872956496976065`}}}, {
       1, 3, {0, 1}, 0.25, 5.188581000000001, {0.9239999999999999, 
        0.5750000000000002}, {3.0900000000000003`, 1.2799999999999998`}, {{
        0.9042079134931111, 0.2943058998211648}, {0.2943058998211648, 
        0.09579208650688877}}}, {
       1, 3, {-1, -1}, 0.485, 5.201876000000003, {0.9239999999999999, 
        0.5750000000000002}, {-0.9500000000000006, -0.7250000000000001}, {{
        0.6751172077150629, 0.4683310405707479}, {0.4683310405707479, 
        0.32488279228493716`}}}, {
       1, 4, {0, -1}, 0.8, 5.546600000000001, {0.9239999999999999, 
        0.5750000000000002}, {-1.3660000000000003`, 0.025000000000000133`}, {{
        0.9454620848808278, 0.22707604658709837`}, {0.22707604658709837`, 
        0.05453791511917211}}}, {
       1, 2, {-1, -1}, 0.54, 6.136169000000003, {0.9239999999999999, 
        0.5750000000000002}, {-1.2880000000000007`, -0.54}, {{
        0.7973939440064314, 0.40194134157647876`}, {0.40194134157647876`, 
        0.2026060559935686}}}, {
       1, 5, {0, 1}, 0.25, 7.156544000000002, {0.9239999999999999, 
        0.5750000000000002}, {3.4360000000000004`, 1.495}, {{
        0.8817306230493379, 0.32292682054354727`}, {0.32292682054354727`, 
        0.11826937695066217`}}}, {
       1, 1, {1, 1}, 0.55, 7.377625000000002, {0.9239999999999999, 
        0.5750000000000002}, {3.1440000000000006`, 2.14}, {{
        0.6680198573389136, 0.4709239084393691}, {0.4709239084393691, 
        0.33198014266108666`}}}, {
       1, 1, {-1, -1}, 0.55, 7.377625000000002, {0.9239999999999999, 
        0.5750000000000002}, {-1.2960000000000007`, -0.9899999999999998}, {{
        0.6680198573389136, 0.4709239084393691}, {0.4709239084393691, 
        0.33198014266108666`}}}, {
       1, 2, {1, 1}, 0.54, 9.024209000000003, {0.9239999999999999, 
        0.5750000000000002}, {3.1520000000000006`, 2.59}, {{0.550074139461974,
         0.49748626167678517`}, {0.49748626167678517`, 
        0.44992586053802586`}}}, {
       1, 3, {1, 1}, 0.485, 9.933256000000004, {0.9239999999999999, 
        0.5750000000000002}, {3.4900000000000007`, 2.405}, {{
        0.6628597913916647, 0.4727332105404309}, {0.4727332105404309, 
        0.3371402086083352}}}, {
       1, 4, {-1, -1}, 0.385, 10.041725000000003`, {0.9239999999999999, 
        0.5750000000000002}, {-1.7660000000000007`, -1.0999999999999999`}, {{
        0.7206032828025065, 0.4487027876186611}, {0.4487027876186611, 
        0.27939671719749337`}}}, {
       1, 5, {1, 1}, 0.25, 12.661769000000005`, {0.9239999999999999, 
        0.5750000000000002}, {3.8360000000000007`, 2.62}, {{
        0.6697124232798751, 0.4703165884640605}, {0.4703165884640605, 
        0.33028757672012476`}}}}, {{
       2, 4, {1, 0}, 0.25, 0.3253090000000002, {0.9319999999999999, 1.025}, {
        0.8540000000000001, 1.59}, {{
        0.0187022185060972, -0.13547119815314027`}, {-0.13547119815314027`, 
        0.9812977814939028}}}, {
       2, 1, {1, 0}, 0.25, 0.6092890000000004, {0.9319999999999999, 1.025}, {
        1.324, 1.7000000000000002`}, {{0.25220215694030257`, 
        0.4342766733028169}, {0.4342766733028169, 0.7477978430596975}}}, {
       2, 5, {1, -1}, 0.25, 1.0529210000000004`, {0.9319999999999999, 
        1.025}, {0.19599999999999995`, 1.7400000000000002`}, {{
        0.5144697465431877, -0.4997905825793199}, {-0.4997905825793199, 
        0.48553025345681233`}}}, {
       2, 5, {-1, 0}, 0.25, 1.2796809999999996`, {0.9319999999999999, 
        1.025}, {1.216, -0.06999999999999984}, {{
        0.06302820781116547, -0.2430136885676978}, {-0.2430136885676978, 
        0.9369717921888345}}}, {
       2, 3, {1, -1}, 0.25, 1.420724, {0.9319999999999999, 
        1.025}, {-0.15000000000000013`, 1.525}, {{
        0.8240333801639164, -0.38079176532528486`}, {-0.38079176532528486`, 
        0.17596661983608355`}}}, {
       2, 2, {1, 0}, 0.25, 1.4256250000000001`, {0.9319999999999999, 1.025}, {
        1.332, 2.15}, {{0.11223147742218333`, 0.3156510302498905}, {
        0.3156510302498905, 0.8877685225778167}}}, {
       2, 2, {-1, 0}, 0.25, 1.4256250000000001`, {0.9319999999999999, 
        1.025}, {0.5319999999999998, -0.10000000000000009`}, {{
        0.11223147742218333`, 0.3156510302498905}, {0.3156510302498905, 
        0.8877685225778167}}}, {
       2, 3, {1, 0}, 0.25, 1.4282440000000003`, {0.9319999999999999, 1.025}, {
        1.6700000000000002`, 1.9649999999999999`}, {{0.38133820271606267`, 
        0.48571532595270833`}, {0.48571532595270833`, 0.6186617972839373}}}, {
       2, 5, {0, -1}, 0.25, 1.458596, {0.9319999999999999, 
        1.025}, {-0.20400000000000018`, 0.6150000000000002}, {{
        0.8847521863490647, 0.3193207714816164}, {0.3193207714816164, 
        0.1152478136509354}}}, {
       2, 3, {-1, 0}, 0.25, 1.7199440000000001`, {0.9319999999999999, 
        1.025}, {0.8699999999999999, -0.28500000000000014`}, {{
        0.002234956486955393, 0.047222467708251004`}, {0.047222467708251004`, 
        0.9977650435130446}}}, {
       2, 4, {0, 1}, 0.25, 1.8153640000000002`, {0.9319999999999999, 1.025}, {
        2.274, 0.905}, {{
        0.9920677065315826, -0.08870948195513398}, {-0.08870948195513398, 
        0.007932293468417336}}}, {
       2, 1, {1, -1}, 0.485, 2.0944090000000006`, {0.9319999999999999, 
        1.025}, {-0.4960000000000002, 1.2600000000000002`}, {{
        0.9736321797700449, -0.16022658420585492`}, {-0.16022658420585492`, 
        0.02636782022995515}}}, {
       2, 4, {-1, 1}, 0.25, 2.437389, {0.9319999999999999, 1.025}, {
        1.874, -0.21999999999999997`}, {{
        0.3640633481155451, -0.4811665269679973}, {-0.4811665269679973, 
        0.6359366518844549}}}, {
       2, 2, {1, -1}, 0.25, 2.4856250000000006`, {0.9319999999999999, 
        1.025}, {-0.4880000000000002, 1.71}, {{
        0.8112245411113904, -0.39133014835302987`}, {-0.39133014835302987`, 
        0.18877545888860947`}}}, {
       2, 2, {-1, 1}, 0.25, 2.485625000000001, {0.9319999999999999, 1.025}, {
        2.3520000000000003`, 0.33999999999999986`}, {{
        0.8112245411113904, -0.39133014835302987`}, {-0.39133014835302987`, 
        0.18877545888860944`}}}, {
       2, 5, {1, 0}, 0.25, 2.509081000000001, {0.9319999999999999, 1.025}, {
        2.016, 2.18}, {{0.46832126981950745`, 0.4989954489313018}, {
        0.4989954489313018, 0.5316787301804924}}}, {
       2, 3, {0, -1}, 0.25, 2.5869490000000006`, {0.9319999999999999, 
        1.025}, {-0.5500000000000003, 0.3999999999999999}, {{
        0.8490016618031512, 0.35804725953236805`}, {0.35804725953236805`, 
        0.15099833819684885`}}}, {
       2, 1, {-1, 0}, 0.25, 2.647088999999999, {0.9319999999999999, 1.025}, {
        0.5239999999999998, -0.5499999999999998}, {{0.06288568310321269, 
        0.24275723256754886`}, {0.24275723256754886`, 0.9371143168967874}}}, {
       2, 1, {-1, 1}, 0.485, 3.2819690000000006`, {0.9319999999999999, 
        1.025}, {2.3440000000000003`, -0.10999999999999988`}, {{
        0.6074841048163467, -0.4883105233474173}, {-0.4883105233474173, 
        0.39251589518365326`}}}, {
       2, 1, {0, 1}, 0.7250000000000001, 3.283444000000001, {
        0.9319999999999999, 1.025}, {2.744, 1.0150000000000001`}, {{
        0.9999695441737395, -0.005518595718398002}, {-0.005518595718398002, 
        0.000030455826260473973`}}}, {
       2, 2, {0, 1}, 0.25, 3.506000000000001, {0.9319999999999999, 1.025}, {
        2.7520000000000002`, 1.4649999999999999`}, {{0.9447803764974331, 
        0.22840844266970903`}, {0.22840844266970903`, 
        0.055219623502567004`}}}, {
       2, 2, {0, -1}, 0.25, 3.506000000000001, {0.9319999999999999, 
        1.025}, {-0.8880000000000003, 0.585}, {{0.9447803764974331, 
        0.22840844266970903`}, {0.22840844266970903`, 
        0.055219623502567004`}}}, {
       2, 4, {-1, 0}, 0.25, 3.6101089999999996`, {0.9319999999999999, 
        1.025}, {0.053999999999999826`, -0.6599999999999999}, {{
        0.21353482678777852`, 0.40980203090820805`}, {0.40980203090820805`, 
        0.7864651732122214}}}, {
       2, 4, {1, -1}, 0.25, 3.6180290000000004`, {0.9319999999999999, 
        1.025}, {-0.9660000000000002, 1.1500000000000001`}, {{
        0.9956813502600448, -0.0655743776514783}, {-0.0655743776514783, 
        0.004318649739955112}}}, {
       2, 3, {-1, 1}, 0.25, 3.8474640000000018`, {0.9319999999999999, 
        1.025}, {2.6900000000000004`, 0.1549999999999998}, {{
        0.8032730130808241, -0.3975241873608173}, {-0.3975241873608173, 
        0.1967269869191758}}}, {
       2, 4, {1, 1}, 0.25, 4.044589000000002, {0.9319999999999999, 1.025}, {
        2.6740000000000004`, 2.0300000000000002`}, {{0.7502774694783573, 
        0.43285238623751393`}, {0.43285238623751393`, 
        0.24972253052164264`}}}, {
       2, 1, {0, -1}, 0.7250000000000001, 4.133684000000001, {
        0.9319999999999999, 1.025}, {-0.8960000000000004, 
        0.13500000000000023`}, {{0.8083791600906118, 0.39357628691501323`}, {
        0.39357628691501323`, 0.1916208399093882}}}, {
       2, 5, {-1, -1}, 0.25, 4.715521000000001, {0.9319999999999999, 
        1.025}, {-0.6040000000000005, -0.5099999999999998}, {{
        0.500325626797124, 0.4999998939671777}, {0.4999998939671777, 
        0.4996743732028759}}}, {
       2, 3, {0, 1}, 0.25, 4.7219890000000015`, {0.9319999999999999, 1.025}, {
        3.0900000000000003`, 1.2799999999999998`}, {{0.9862293198904105, 
        0.11653775559409385`}, {0.11653775559409385`, 
        0.013770680109589395`}}}, {
       2, 5, {-1, 1}, 0.25, 4.855841000000002, {0.9319999999999999, 1.025}, {
        3.0360000000000005`, 0.3700000000000001}, {{
        0.911647642499003, -0.2838066567665621}, {-0.2838066567665621, 
        0.08835235750099718}}}, {
       2, 1, {1, 1}, 0.25, 6.136169000000003, {0.9319999999999999, 1.025}, {
        3.1440000000000006`, 2.14}, {{0.7973939440064314, 
        0.40194134157647876`}, {0.40194134157647876`, 0.2026060559935686}}}, {
       2, 4, {0, -1}, 0.25, 6.280804, {0.9319999999999999, 
        1.025}, {-1.3660000000000003`, 0.025000000000000133`}, {{
        0.8407847148231341, 0.3658767253364378}, {0.3658767253364378, 
        0.1592152851768658}}}, {
       2, 5, {0, 1}, 0.25, 6.490916000000002, {0.9319999999999999, 1.025}, {
        3.4360000000000004`, 1.495}, {{0.9659678233395719, 
        0.18131185182491968`}, {0.18131185182491968`, 
        0.03403217666042822}}}, {
       2, 3, {-1, -1}, 0.25, 6.604424000000002, {0.9319999999999999, 
        1.025}, {-0.9500000000000006, -0.7250000000000001}, {{
        0.5362956709018079, 0.4986808842073132}, {0.4986808842073132, 
        0.46370432909819226`}}}, {
       2, 2, {1, 1}, 0.25, 7.377625000000002, {0.9319999999999999, 1.025}, {
        3.1520000000000006`, 2.59}, {{0.6680198573389136, 
        0.4709239084393691}, {0.4709239084393691, 0.33198014266108666`}}}, {
       2, 2, {-1, -1}, 0.25, 7.377625000000002, {0.9319999999999999, 
        1.025}, {-1.2880000000000007`, -0.54}, {{0.6680198573389136, 
        0.4709239084393691}, {0.4709239084393691, 0.33198014266108666`}}}, {
       2, 3, {1, 1}, 0.25, 8.447764000000003, {0.9319999999999999, 1.025}, {
        3.4900000000000007`, 2.405}, {{0.7745675660446956, 
        0.4178667869983109}, {0.4178667869983109, 0.2254324339553045}}}, {
       2, 1, {-1, -1}, 0.25, 9.024209000000003, {0.9319999999999999, 
        1.025}, {-1.2960000000000007`, -0.9899999999999998}, {{
        0.550074139461974, 0.49748626167678517`}, {0.49748626167678517`, 
        0.44992586053802586`}}}, {
       2, 5, {1, 1}, 0.25, 10.977241000000006`, {0.9319999999999999, 1.025}, {
        3.8360000000000007`, 2.62}, {{0.7682454999393745, 
        0.42195302080003516`}, {0.42195302080003516`, 
        0.23175450006062534`}}}, {
       2, 4, {-1, -1}, 0.25, 11.794829000000002`, {0.9319999999999999, 
        1.025}, {-1.7660000000000007`, -1.0999999999999999`}, {{
        0.6171521435367991, 0.48608165493539585`}, {0.48608165493539585`, 
        0.3828478564632009}}}}, {{
       3, 4, {1, 0}, 0.25, 0.7355560000000003, {1.27, 0.8399999999999999}, {
        0.8540000000000001, 1.59}, {{
        0.23527236539434096`, -0.4241689279946053}, {-0.4241689279946053, 
        0.764727634605659}}}, {
       3, 1, {1, 0}, 0.25, 0.7425160000000006, {1.27, 0.8399999999999999}, {
        1.324, 1.7000000000000002`}, {{0.003927188100997154, 
        0.06254410679365835}, {0.06254410679365835, 0.9960728118990029}}}, {
       3, 5, {-1, 0}, 0.25, 0.8310159999999995, {1.27, 0.8399999999999999}, {
        1.216, -0.06999999999999984}, {{0.003508957709598861, 
        0.05913243547657332}, {0.05913243547657332, 0.9964910422904011}}}, {
       3, 4, {0, 1}, 0.25, 1.012241, {1.27, 0.8399999999999999}, {2.274, 
        0.905}, {{0.995826092798059, 0.064470812780751}, {0.064470812780751, 
        0.004173907201941061}}}, {
       3, 2, {-1, 1}, 0.25, 1.4207240000000005`, {1.27, 0.8399999999999999}, {
        2.3520000000000003`, 0.33999999999999986`}, {{
        0.8240333801639165, -0.3807917653252848}, {-0.3807917653252848, 
        0.1759666198360835}}}, {
       3, 3, {1, 0}, 0.25, 1.4256250000000001`, {1.27, 0.8399999999999999}, {
        1.6700000000000002`, 1.9649999999999999`}, {{0.11223147742218333`, 
        0.3156510302498905}, {0.3156510302498905, 0.8877685225778167}}}, {
       3, 3, {-1, 0}, 0.25, 1.4256250000000001`, {1.27, 0.8399999999999999}, {
        0.8699999999999999, -0.28500000000000014`}, {{0.11223147742218333`, 
        0.3156510302498905}, {0.3156510302498905, 0.8877685225778167}}}, {
       3, 2, {-1, 0}, 0.25, 1.4282440000000003`, {1.27, 0.8399999999999999}, {
        0.5319999999999998, -0.10000000000000009`}, {{0.38133820271606267`, 
        0.48571532595270833`}, {0.48571532595270833`, 0.6186617972839373}}}, {
       3, 4, {-1, 1}, 0.25, 1.4884159999999997`, {1.27, 0.8399999999999999}, {
        1.874, -0.21999999999999997`}, {{
        0.24510351944617642`, -0.4301485606174619}, {-0.4301485606174619, 
        0.7548964805538235}}}, {
       3, 2, {1, 0}, 0.25, 1.7199440000000001`, {1.27, 0.8399999999999999}, {
        1.332, 2.15}, {{0.002234956486955393, 0.047222467708251004`}, {
        0.047222467708251004`, 0.9977650435130446}}}, {
       3, 5, {1, -1}, 0.25, 1.9634760000000009`, {1.27, 0.8399999999999999}, {
        0.19599999999999995`, 1.7400000000000002`}, {{
        0.5874663097486292, -0.4922902036999688}, {-0.4922902036999688, 
        0.4125336902513706}}}, {
       3, 1, {-1, 1}, 0.25, 2.0559760000000002`, {1.27, 0.8399999999999999}, {
        2.3440000000000003`, -0.10999999999999988`}, {{
        0.5610357319346142, -0.4962606567391836}, {-0.4962606567391836, 
        0.4389642680653857}}}, {
       3, 1, {0, 1}, 0.25, 2.2033010000000006`, {1.27, 0.8399999999999999}, {
        2.744, 1.0150000000000001`}, {{0.9861004011707887, 
        0.117074335281471}, {0.117074335281471, 0.0138995988292113}}}, {
       3, 5, {0, -1}, 0.25, 2.223301, {1.27, 
        0.8399999999999999}, {-0.20400000000000018`, 0.6150000000000002}, {{
        0.9772298037917494, 0.14917008538205104`}, {0.14917008538205104`, 
        0.022770196208250628`}}}, {
       3, 5, {1, 0}, 0.25, 2.3521160000000005`, {1.27, 0.8399999999999999}, {
        2.016, 2.18}, {{0.23660227641833986`, 0.42499604611337194`}, {
        0.42499604611337194`, 0.7633977235816602}}}, {
       3, 3, {1, -1}, 0.25, 2.4856250000000006`, {1.27, 
        0.8399999999999999}, {-0.15000000000000013`, 1.525}, {{
        0.8112245411113904, -0.39133014835302987`}, {-0.39133014835302987`, 
        0.18877545888860947`}}}, {
       3, 3, {-1, 1}, 0.25, 2.485625000000001, {1.27, 0.8399999999999999}, {
        2.6900000000000004`, 0.1549999999999998}, {{
        0.8112245411113904, -0.39133014835302987`}, {-0.39133014835302987`, 
        0.18877545888860944`}}}, {
       3, 1, {-1, 0}, 0.25, 2.4886159999999995`, {1.27, 0.8399999999999999}, {
        0.5239999999999998, -0.5499999999999998}, {{0.22362469742218183`, 
        0.41667336382953424`}, {0.41667336382953424`, 0.7763753025778181}}}, {
       3, 2, {0, 1}, 0.25, 2.5869490000000006`, {1.27, 0.8399999999999999}, {
        2.7520000000000002`, 1.4649999999999999`}, {{0.8490016618031512, 
        0.35804725953236805`}, {0.35804725953236805`, 
        0.15099833819684885`}}}, {
       3, 1, {1, -1}, 0.25, 3.295156000000001, {1.27, 
        0.8399999999999999}, {-0.4960000000000002, 1.2600000000000002`}, {{
        0.9464668744059462, -0.22509404714071216`}, {-0.22509404714071216`, 
        0.0535331255940539}}}, {
       3, 5, {-1, 1}, 0.25, 3.3396560000000015`, {1.27, 0.8399999999999999}, {
        3.0360000000000005`, 0.3700000000000001}, {{
        0.9338554629578616, -0.2485345796093967}, {-0.2485345796093967, 
        0.06614453704213837}}}, {
       3, 4, {1, 1}, 0.25, 3.387316000000002, {1.27, 0.8399999999999999}, {
        2.6740000000000004`, 2.0300000000000002`}, {{0.5819403917437876, 
        0.49324007562329586`}, {0.49324007562329586`, 
        0.41805960825621236`}}}, {
       3, 3, {0, 1}, 0.25, 3.506000000000001, {1.27, 0.8399999999999999}, {
        3.0900000000000003`, 1.2799999999999998`}, {{0.9447803764974331, 
        0.22840844266970903`}, {0.22840844266970903`, 
        0.055219623502567004`}}}, {
       3, 3, {0, -1}, 0.25, 3.506000000000001, {1.27, 
        0.8399999999999999}, {-0.5500000000000003, 0.3999999999999999}, {{
        0.9447803764974331, 0.22840844266970903`}, {0.22840844266970903`, 
        0.055219623502567004`}}}, {
       3, 4, {-1, 0}, 0.25, 3.728656, {1.27, 0.8399999999999999}, {
        0.053999999999999826`, -0.6599999999999999}, {{0.39656541123664946`, 
        0.4891843066241563}, {0.4891843066241563, 0.6034345887633505}}}, {
       3, 2, {1, -1}, 0.25, 3.8474640000000013`, {1.27, 
        0.8399999999999999}, {-0.4880000000000002, 1.71}, {{
        0.8032730130808241, -0.3975241873608174}, {-0.3975241873608174, 
        0.19672698691917584`}}}, {
       3, 2, {0, -1}, 0.25, 4.7219890000000015`, {1.27, 
        0.8399999999999999}, {-0.8880000000000003, 0.585}, {{
        0.9862293198904105, 0.11653775559409385`}, {0.11653775559409385`, 
        0.013770680109589395`}}}, {
       3, 4, {1, -1}, 0.25, 5.095796000000001, {1.27, 
        0.8399999999999999}, {-0.9660000000000002, 1.1500000000000001`}, {{
        0.9811413172740824, -0.13602585346823157`}, {-0.13602585346823157`, 
        0.01885868272591763}}}, {
       3, 5, {0, 1}, 0.25, 5.120581000000001, {1.27, 0.8399999999999999}, {
        3.4360000000000004`, 1.495}, {{0.9162155622574859, 
        0.2770642628248631}, {0.2770642628248631, 0.08378443774251403}}}, {
       3, 1, {0, -1}, 0.25, 5.188581000000001, {1.27, 
        0.8399999999999999}, {-0.8960000000000004, 0.13500000000000023`}, {{
        0.9042079134931111, 0.2943058998211648}, {0.2943058998211648, 
        0.09579208650688877}}}, {
       3, 1, {1, 1}, 0.25, 5.201876000000003, {1.27, 0.8399999999999999}, {
        3.1440000000000006`, 2.14}, {{0.6751172077150629, 
        0.4683310405707479}, {0.4683310405707479, 0.32488279228493716`}}}, {
       3, 5, {-1, -1}, 0.25, 5.334376000000002, {1.27, 
        0.8399999999999999}, {-0.6040000000000005, -0.5099999999999998}, {{
        0.658348042957602, 0.4742635314795956}, {0.4742635314795956, 
        0.3416519570423979}}}, {
       3, 2, {1, 1}, 0.25, 6.604424000000002, {1.27, 0.8399999999999999}, {
        3.1520000000000006`, 2.59}, {{0.5362956709018079, 
        0.4986808842073132}, {0.4986808842073132, 0.46370432909819226`}}}, {
       3, 3, {1, 1}, 0.25, 7.377625000000002, {1.27, 0.8399999999999999}, {
        3.4900000000000007`, 2.405}, {{0.6680198573389136, 
        0.4709239084393691}, {0.4709239084393691, 0.33198014266108666`}}}, {
       3, 3, {-1, -1}, 0.25, 7.377625000000002, {1.27, 
        0.8399999999999999}, {-0.9500000000000006, -0.7250000000000001}, {{
        0.6680198573389136, 0.4709239084393691}, {0.4709239084393691, 
        0.33198014266108666`}}}, {
       3, 4, {0, -1}, 0.25, 7.612721, {1.27, 
        0.8399999999999999}, {-1.3660000000000003`, 0.025000000000000133`}, {{
        0.9127480174302987, 0.2822039583481385}, {0.2822039583481385, 
        0.08725198256970136}}}, {
       3, 2, {-1, -1}, 0.25, 8.447764000000003, {1.27, 
        0.8399999999999999}, {-1.2880000000000007`, -0.54}, {{
        0.7745675660446956, 0.4178667869983109}, {0.4178667869983109, 
        0.2254324339553045}}}, {
       3, 5, {1, 1}, 0.25, 9.752756000000005, {1.27, 0.8399999999999999}, {
        3.8360000000000007`, 2.62}, {{0.6751277279981167, 
        0.46832710671732164`}, {0.46832710671732164`, 0.3248722720018833}}}, {
       3, 1, {-1, -1}, 0.25, 9.933256000000004, {1.27, 
        0.8399999999999999}, {-1.2960000000000007`, -0.9899999999999998}, {{
        0.6628597913916647, 0.4727332105404309}, {0.4727332105404309, 
        0.3371402086083352}}}, {
       3, 4, {-1, -1}, 0.25, 12.980896000000001`, {1.27, 
        0.8399999999999999}, {-1.7660000000000007`, -1.0999999999999999`}, {{
        0.7100662388790421, 0.4537313911150663}, {0.4537313911150663, 
        0.2899337611209579}}}}, {{
       4, 2, {-1, 0}, 0.25, 0.3253090000000002, {0.45399999999999996`, 
        0.4650000000000001}, {0.5319999999999998, -0.10000000000000009`}, {{
        0.0187022185060972, -0.13547119815314027`}, {-0.13547119815314027`, 
        0.9812977814939028}}}, {
       4, 5, {0, -1}, 0.25, 0.4554640000000002, {0.45399999999999996`, 
        0.4650000000000001}, {-0.20400000000000018`, 0.6150000000000002}, {{
        0.9505998278678446, -0.21670208841972155`}, {-0.21670208841972155`, 
        0.04940017213215541}}}, {
       4, 3, {-1, 0}, 0.25, 0.7355560000000003, {0.45399999999999996`, 
        0.4650000000000001}, {0.8699999999999999, -0.28500000000000014`}, {{
        0.23527236539434096`, -0.4241689279946053}, {-0.4241689279946053, 
        0.764727634605659}}}, {
       4, 5, {-1, 0}, 0.25, 0.8668689999999999, {0.45399999999999996`, 
        0.4650000000000001}, {1.216, -0.06999999999999984}, {{
        0.6698174695369198, -0.4702786695567611}, {-0.4702786695567611, 
        0.33018253046308027`}}}, {
       4, 3, {0, -1}, 0.25, 1.0122410000000004`, {0.45399999999999996`, 
        0.4650000000000001}, {-0.5500000000000003, 0.3999999999999999}, {{
        0.995826092798059, 0.06447081278075098}, {0.06447081278075098, 
        0.0041739072019410595`}}}, {
       4, 1, {-1, 0}, 0.25, 1.0351249999999996`, {0.45399999999999996`, 
        0.4650000000000001}, {0.5239999999999998, -0.5499999999999998}, {{
        0.004733727810650868, -0.06863905325443774}, {-0.06863905325443774, 
        0.9952662721893493}}}, {
       4, 4, {1, 0}, 0.25, 1.4256250000000001`, {0.45399999999999996`, 
        0.4650000000000001}, {0.8540000000000001, 1.59}, {{
        0.11223147742218333`, 0.3156510302498905}, {0.3156510302498905, 
        0.8877685225778167}}}, {
       4, 4, {-1, 0}, 0.25, 1.4256250000000001`, {0.45399999999999996`, 
        0.4650000000000001}, {0.053999999999999826`, -0.6599999999999999}, {{
        0.11223147742218333`, 0.3156510302498905}, {0.3156510302498905, 
        0.8877685225778167}}}, {
       4, 3, {1, -1}, 0.25, 1.4884159999999997`, {0.45399999999999996`, 
        0.4650000000000001}, {-0.15000000000000013`, 1.525}, {{
        0.24510351944617642`, -0.4301485606174619}, {-0.4301485606174619, 
        0.7548964805538235}}}, {
       4, 1, {1, -1}, 0.25, 1.5345250000000006`, {0.45399999999999996`, 
        0.4650000000000001}, {-0.4960000000000002, 1.2600000000000002`}, {{
        0.5881298773236018, -0.49217184470764574`}, {-0.49217184470764574`, 
        0.4118701226763983}}}, {
       4, 5, {1, -1}, 0.25, 1.6921890000000004`, {0.45399999999999996`, 
        0.4650000000000001}, {0.19599999999999995`, 1.7400000000000002`}, {{
        0.039336031613489975`, -0.19439317948527024`}, {-0.19439317948527024`,
         0.96066396838651}}}, {
       4, 2, {0, -1}, 0.25, 1.8153640000000009`, {0.45399999999999996`, 
        0.4650000000000001}, {-0.8880000000000003, 0.585}, {{
        0.9920677065315826, -0.08870948195513395}, {-0.08870948195513395, 
        0.007932293468417333}}}, {
       4, 1, {0, -1}, 0.25, 1.931400000000001, {0.45399999999999996`, 
        0.4650000000000001}, {-0.8960000000000004, 0.13500000000000023`}, {{
        0.9436160298229265, 0.2306616961789374}, {0.2306616961789374, 
        0.05638397017707355}}}, {
       4, 5, {-1, -1}, 0.25, 2.069989000000001, {0.45399999999999996`, 
        0.4650000000000001}, {-0.6040000000000005, -0.5099999999999998}, {{
        0.5407584291510731, 0.4983359814955538}, {0.4983359814955538, 
        0.45924157084892686`}}}, {
       4, 1, {1, 0}, 0.25, 2.2821250000000006`, {0.45399999999999996`, 
        0.4650000000000001}, {1.324, 1.7000000000000002`}, {{
        0.3316645670153914, 0.47081119570575664`}, {0.47081119570575664`, 
        0.6683354329846085}}}, {
       4, 2, {1, -1}, 0.25, 2.437389, {0.45399999999999996`, 
        0.4650000000000001}, {-0.4880000000000002, 1.71}, {{
        0.3640633481155451, -0.4811665269679973}, {-0.4811665269679973, 
        0.6359366518844549}}}, {
       4, 4, {1, -1}, 0.25, 2.4856250000000006`, {0.45399999999999996`, 
        0.4650000000000001}, {-0.9660000000000002, 1.1500000000000001`}, {{
        0.8112245411113904, -0.39133014835302987`}, {-0.39133014835302987`, 
        0.18877545888860947`}}}, {
       4, 4, {-1, 1}, 0.25, 2.4856250000000006`, {0.45399999999999996`, 
        0.4650000000000001}, {1.874, -0.21999999999999997`}, {{
        0.8112245411113904, -0.39133014835302987`}, {-0.39133014835302987`, 
        0.18877545888860947`}}}, {
       4, 3, {-1, -1}, 0.25, 3.387316000000002, {0.45399999999999996`, 
        0.4650000000000001}, {-0.9500000000000006, -0.7250000000000001}, {{
        0.5819403917437879, 0.49324007562329586`}, {0.49324007562329586`, 
        0.41805960825621213`}}}, {
       4, 4, {0, 1}, 0.25, 3.5060000000000002`, {0.45399999999999996`, 
        0.4650000000000001}, {2.274, 0.905}, {{0.944780376497433, 
        0.22840844266970906`}, {0.22840844266970906`, 
        0.05521962350256702}}}, {
       4, 4, {0, -1}, 0.25, 3.506000000000001, {0.45399999999999996`, 
        0.4650000000000001}, {-1.3660000000000003`, 0.025000000000000133`}, {{
        0.9447803764974331, 0.22840844266970903`}, {0.22840844266970903`, 
        0.055219623502567004`}}}, {
       4, 2, {1, 0}, 0.25, 3.6101089999999996`, {0.45399999999999996`, 
        0.4650000000000001}, {1.332, 2.15}, {{0.21353482678777852`, 
        0.40980203090820805`}, {0.40980203090820805`, 0.7864651732122214}}}, {
       4, 2, {-1, 1}, 0.25, 3.6180290000000013`, {0.45399999999999996`, 
        0.4650000000000001}, {2.3520000000000003`, 0.33999999999999986`}, {{
        0.9956813502600449, -0.06557437765147829}, {-0.06557437765147829, 
        0.004318649739955111}}}, {
       4, 3, {1, 0}, 0.25, 3.728656, {0.45399999999999996`, 
        0.4650000000000001}, {1.6700000000000002`, 1.9649999999999999`}, {{
        0.39656541123664946`, 0.4891843066241563}, {0.4891843066241563, 
        0.6034345887633505}}}, {
       4, 1, {-1, 1}, 0.25, 3.902725000000001, {0.45399999999999996`, 
        0.4650000000000001}, {2.3440000000000003`, -0.10999999999999988`}, {{
        0.915283551877214, -0.2784592816557661}, {-0.2784592816557661, 
        0.08471644812278596}}}, {
       4, 2, {-1, -1}, 0.25, 4.044589000000002, {0.45399999999999996`, 
        0.4650000000000001}, {-1.2880000000000007`, -0.54}, {{
        0.7502774694783575, 0.4328523862375139}, {0.4328523862375139, 
        0.24972253052164253`}}}, {
       4, 3, {-1, 1}, 0.25, 5.095796000000003, {0.45399999999999996`, 
        0.4650000000000001}, {2.6900000000000004`, 0.1549999999999998}, {{
        0.9811413172740825, -0.13602585346823154`}, {-0.13602585346823154`, 
        0.018858682725917623`}}}, {
       4, 1, {-1, -1}, 0.25, 5.179525000000002, {0.45399999999999996`, 
        0.4650000000000001}, {-1.2960000000000007`, -0.9899999999999998}, {{
        0.5912704350302395, 0.49159913312514175`}, {0.49159913312514175`, 
        0.4087295649697605}}}, {
       4, 5, {1, 0}, 0.25, 5.381069, {0.45399999999999996`, 
        0.4650000000000001}, {2.016, 2.18}, {{0.45341250967047636`, 
        0.4978248745741785}, {0.4978248745741785, 0.5465874903295238}}}, {
       4, 1, {0, 1}, 0.25, 5.546600000000001, {0.45399999999999996`, 
        0.4650000000000001}, {2.744, 1.0150000000000001`}, {{
        0.9454620848808278, 0.22707604658709837`}, {0.22707604658709837`, 
        0.05453791511917211}}}, {
       4, 2, {0, 1}, 0.25, 6.280804, {0.45399999999999996`, 
        0.4650000000000001}, {2.7520000000000002`, 1.4649999999999999`}, {{
        0.8407847148231341, 0.3658767253364378}, {0.3658767253364378, 
        0.1592152851768658}}}, {
       4, 5, {-1, 1}, 0.25, 6.675749000000004, {0.45399999999999996`, 
        0.4650000000000001}, {3.0360000000000005`, 0.3700000000000001}, {{
        0.9986480917721741, -0.036743442571013356`}, {-0.036743442571013356`, 
        0.0013519082278258198`}}}, {
       4, 4, {1, 1}, 0.25, 7.377625000000004, {0.45399999999999996`, 
        0.4650000000000001}, {2.6740000000000004`, 2.0300000000000002`}, {{
        0.6680198573389132, 0.47092390843936893`}, {0.47092390843936893`, 
        0.3319801426610866}}}, {
       4, 4, {-1, -1}, 0.25, 7.377625000000002, {0.45399999999999996`, 
        0.4650000000000001}, {-1.7660000000000007`, -1.0999999999999999`}, {{
        0.6680198573389136, 0.4709239084393691}, {0.4709239084393691, 
        0.33198014266108666`}}}, {
       4, 3, {0, 1}, 0.25, 7.612721, {0.45399999999999996`, 
        0.4650000000000001}, {3.0900000000000003`, 1.2799999999999998`}, {{
        0.9127480174302987, 0.2822039583481385}, {0.2822039583481385, 
        0.08725198256970136}}}, {
       4, 5, {0, 1}, 0.25, 9.953224000000002, {0.45399999999999996`, 
        0.4650000000000001}, {3.4360000000000004`, 1.495}, {{
        0.893411421264105, 0.3085894580489698}, {0.3085894580489698, 
        0.106588578735895}}}, {
       4, 1, {1, 1}, 0.25, 10.041725000000003`, {0.45399999999999996`, 
        0.4650000000000001}, {3.1440000000000006`, 2.14}, {{
        0.7206032828025065, 0.4487027876186611}, {0.4487027876186611, 
        0.27939671719749337`}}}, {
       4, 2, {1, 1}, 0.25, 11.794829000000002`, {0.45399999999999996`, 
        0.4650000000000001}, {3.1520000000000006`, 2.59}, {{
        0.6171521435367991, 0.48608165493539585`}, {0.48608165493539585`, 
        0.3828478564632009}}}, {
       4, 3, {1, 1}, 0.25, 12.980896000000001`, {0.45399999999999996`, 
        0.4650000000000001}, {3.4900000000000007`, 2.405}, {{
        0.7100662388790421, 0.4537313911150663}, {0.4537313911150663, 
        0.2899337611209579}}}, {
       4, 5, {1, 1}, 0.25, 16.081949000000005`, {0.45399999999999996`, 
        0.4650000000000001}, {3.8360000000000007`, 2.62}, {{0.711227476221943,
         0.4531919607505284}, {0.4531919607505284, 
        0.28877252377805696`}}}}, {{
       5, 4, {0, 1}, 0.25, 0.4554639999999999, {1.616, 1.0550000000000002`}, {
        2.274, 0.905}, {{
        0.9505998278678446, -0.21670208841972163`}, {-0.21670208841972163`, 
        0.04940017213215544}}}, {
       5, 1, {1, 0}, 0.25, 0.5012890000000001, {1.616, 1.0550000000000002`}, {
        1.324, 1.7000000000000002`}, {{
        0.17008950924516597`, -0.37571141596963026`}, {-0.37571141596963026`, 
        0.8299104907548339}}}, {
       5, 3, {1, 0}, 0.25, 0.8310159999999995, {1.616, 1.0550000000000002`}, {
        1.6700000000000002`, 1.9649999999999999`}, {{0.003508957709598861, 
        0.05913243547657332}, {0.05913243547657332, 0.9964910422904011}}}, {
       5, 4, {1, 0}, 0.25, 0.8668689999999999, {1.616, 1.0550000000000002`}, {
        0.8540000000000001, 1.59}, {{
        0.6698174695369198, -0.4702786695567611}, {-0.4702786695567611, 
        0.33018253046308027`}}}, {
       5, 2, {-1, 1}, 0.25, 1.0529210000000009`, {1.616, 
        1.0550000000000002`}, {2.3520000000000003`, 0.33999999999999986`}, {{
        0.5144697465431878, -0.49979058257931974`}, {-0.49979058257931974`, 
        0.4855302534568121}}}, {
       5, 1, {0, 1}, 0.25, 1.2739840000000002`, {1.616, 
        1.0550000000000002`}, {2.744, 1.0150000000000001`}, {{
        0.9987440972571083, -0.03541645734954288}, {-0.03541645734954288, 
        0.0012559027428915926`}}}, {
       5, 2, {1, 0}, 0.25, 1.2796809999999996`, {1.616, 
        1.0550000000000002`}, {1.332, 2.15}, {{
        0.06302820781116547, -0.2430136885676978}, {-0.2430136885676978, 
        0.9369717921888345}}}, {
       5, 5, {1, 0}, 0.25, 1.425625, {1.616, 1.0550000000000002`}, {2.016, 
        2.18}, {{0.11223147742218322`, 0.3156510302498904}, {
        0.3156510302498904, 0.8877685225778169}}}, {
       5, 5, {-1, 0}, 0.25, 1.4256250000000001`, {1.616, 
        1.0550000000000002`}, {1.216, -0.06999999999999984}, {{
        0.11223147742218333`, 0.3156510302498905}, {0.3156510302498905, 
        0.8877685225778167}}}, {
       5, 2, {0, 1}, 0.25, 1.458596, {1.616, 1.0550000000000002`}, {
        2.7520000000000002`, 1.4649999999999999`}, {{0.8847521863490647, 
        0.3193207714816164}, {0.3193207714816164, 0.1152478136509354}}}, {
       5, 4, {-1, 1}, 0.25, 1.6921890000000004`, {1.616, 
        1.0550000000000002`}, {1.874, -0.21999999999999997`}, {{
        0.039336031613489975`, -0.19439317948527024`}, {-0.19439317948527024`,
         0.96066396838651}}}, {
       5, 1, {-1, 1}, 0.25, 1.8872090000000004`, {1.616, 
        1.0550000000000002`}, {2.3440000000000003`, -0.10999999999999988`}, {{
        0.2808295212665901, -0.44940438499392493`}, {-0.44940438499392493`, 
        0.71917047873341}}}, {
       5, 3, {-1, 1}, 0.25, 1.9634760000000013`, {1.616, 
        1.0550000000000002`}, {2.6900000000000004`, 0.1549999999999998}, {{
        0.5874663097486293, -0.4922902036999688}, {-0.4922902036999688, 
        0.41253369025137054`}}}, {
       5, 4, {1, 1}, 0.25, 2.0699890000000005`, {1.616, 
        1.0550000000000002`}, {2.6740000000000004`, 2.0300000000000002`}, {{
        0.5407584291510729, 0.4983359814955539}, {0.4983359814955539, 
        0.45924157084892714`}}}, {
       5, 3, {0, 1}, 0.25, 2.223301, {1.616, 1.0550000000000002`}, {
        3.0900000000000003`, 1.2799999999999998`}, {{0.9772298037917494, 
        0.14917008538205104`}, {0.14917008538205104`, 
        0.022770196208250628`}}}, {
       5, 3, {-1, 0}, 0.25, 2.352116000000001, {1.616, 1.0550000000000002`}, {
        0.8699999999999999, -0.28500000000000014`}, {{0.23660227641833997`, 
        0.424996046113372}, {0.424996046113372, 0.7633977235816601}}}, {
       5, 5, {1, -1}, 0.25, 2.4856250000000006`, {1.616, 
        1.0550000000000002`}, {0.19599999999999995`, 1.7400000000000002`}, {{
        0.8112245411113904, -0.39133014835302987`}, {-0.39133014835302987`, 
        0.18877545888860947`}}}, {
       5, 5, {-1, 1}, 0.25, 2.485625000000001, {1.616, 1.0550000000000002`}, {
        3.0360000000000005`, 0.3700000000000001}, {{
        0.8112245411113904, -0.39133014835302987`}, {-0.39133014835302987`, 
        0.18877545888860944`}}}, {
       5, 2, {-1, 0}, 0.25, 2.509081000000001, {1.616, 1.0550000000000002`}, {
        0.5319999999999998, -0.10000000000000009`}, {{0.4683212698195076, 
        0.49899544893130193`}, {0.49899544893130193`, 0.5316787301804924}}}, {
       5, 3, {1, -1}, 0.25, 3.3396560000000006`, {1.616, 
        1.0550000000000002`}, {-0.15000000000000013`, 1.525}, {{
        0.9338554629578616, -0.24853457960939676`}, {-0.24853457960939676`, 
        0.0661445370421384}}}, {
       5, 5, {0, 1}, 0.25, 3.506000000000001, {1.616, 1.0550000000000002`}, {
        3.4360000000000004`, 1.495}, {{0.9447803764974331, 
        0.22840844266970903`}, {0.22840844266970903`, 
        0.055219623502567004`}}}, {
       5, 5, {0, -1}, 0.25, 3.506000000000001, {1.616, 
        1.0550000000000002`}, {-0.20400000000000018`, 0.6150000000000002}, {{
        0.9447803764974331, 0.22840844266970903`}, {0.22840844266970903`, 
        0.055219623502567004`}}}, {
       5, 1, {1, 1}, 0.25, 3.5120090000000013`, {1.616, 
        1.0550000000000002`}, {3.1440000000000006`, 2.14}, {{
        0.6648001186785115, 0.4720602936951471}, {0.4720602936951471, 
        0.33519988132148854`}}}, {
       5, 1, {-1, 0}, 0.25, 3.7684890000000006`, {1.616, 
        1.0550000000000002`}, {0.5239999999999998, -0.5499999999999998}, {{
        0.3164302721860142, 0.46508295499867464`}, {0.46508295499867464`, 
        0.6835697278139858}}}, {
       5, 1, {1, -1}, 0.25, 4.502569, {1.616, 
        1.0550000000000002`}, {-0.4960000000000002, 1.2600000000000002`}, {{
        0.9906664395370732, -0.09615843754976329}, {-0.09615843754976329, 
        0.009333560462926837}}}, {
       5, 2, {1, 1}, 0.25, 4.715521000000001, {1.616, 1.0550000000000002`}, {
        3.1520000000000006`, 2.59}, {{0.500325626797124, 
        0.4999998939671777}, {0.4999998939671777, 0.4996743732028759}}}, {
       5, 2, {1, -1}, 0.25, 4.855841, {1.616, 
        1.0550000000000002`}, {-0.4880000000000002, 1.71}, {{
        0.911647642499003, -0.2838066567665621}, {-0.2838066567665621, 
        0.08835235750099721}}}, {
       5, 3, {0, -1}, 0.25, 5.120581000000001, {1.616, 
        1.0550000000000002`}, {-0.5500000000000003, 0.3999999999999999}, {{
        0.9162155622574859, 0.2770642628248631}, {0.2770642628248631, 
        0.08378443774251403}}}, {
       5, 3, {1, 1}, 0.25, 5.334376000000002, {1.616, 1.0550000000000002`}, {
        3.4900000000000007`, 2.405}, {{0.658348042957602, 
        0.4742635314795956}, {0.4742635314795956, 0.3416519570423979}}}, {
       5, 4, {-1, 0}, 0.25, 5.381069000000001, {1.616, 1.0550000000000002`}, {
        0.053999999999999826`, -0.6599999999999999}, {{0.45341250967047636`, 
        0.4978248745741785}, {0.4978248745741785, 0.5465874903295237}}}, {
       5, 2, {0, -1}, 0.25, 6.490916000000002, {1.616, 
        1.0550000000000002`}, {-0.8880000000000003, 0.585}, {{
        0.9659678233395719, 0.18131185182491968`}, {0.18131185182491968`, 
        0.03403217666042822}}}, {
       5, 4, {1, -1}, 0.25, 6.6757490000000015`, {1.616, 
        1.0550000000000002`}, {-0.9660000000000002, 1.1500000000000001`}, {{
        0.9986480917721742, -0.03674344257101337}, {-0.03674344257101337, 
        0.0013519082278258205`}}}, {
       5, 1, {0, -1}, 0.25, 7.156544000000002, {1.616, 
        1.0550000000000002`}, {-0.8960000000000004, 0.13500000000000023`}, {{
        0.8817306230493379, 0.32292682054354727`}, {0.32292682054354727`, 
        0.11826937695066217`}}}, {
       5, 5, {1, 1}, 0.25, 7.377625000000002, {1.616, 1.0550000000000002`}, {
        3.8360000000000007`, 2.62}, {{0.6680198573389136, 
        0.4709239084393691}, {0.4709239084393691, 0.33198014266108666`}}}, {
       5, 5, {-1, -1}, 0.25, 7.377625000000002, {1.616, 
        1.0550000000000002`}, {-0.6040000000000005, -0.5099999999999998}, {{
        0.6680198573389136, 0.4709239084393691}, {0.4709239084393691, 
        0.33198014266108666`}}}, {
       5, 3, {-1, -1}, 0.25, 9.752756000000005, {1.616, 
        1.0550000000000002`}, {-0.9500000000000006, -0.7250000000000001}, {{
        0.6751277279981167, 0.46832710671732164`}, {0.46832710671732164`, 
        0.3248722720018833}}}, {
       5, 4, {0, -1}, 0.25, 9.953224000000002, {1.616, 
        1.0550000000000002`}, {-1.3660000000000003`, 
        0.025000000000000133`}, {{0.893411421264105, 0.3085894580489698}, {
        0.3085894580489698, 0.106588578735895}}}, {
       5, 2, {-1, -1}, 0.25, 10.977241000000006`, {1.616, 
        1.0550000000000002`}, {-1.2880000000000007`, -0.54}, {{
        0.7682454999393745, 0.42195302080003516`}, {0.42195302080003516`, 
        0.23175450006062534`}}}, {
       5, 1, {-1, -1}, 0.25, 12.661769000000005`, {1.616, 
        1.0550000000000002`}, {-1.2960000000000007`, -0.9899999999999998}, {{
        0.6697124232798751, 0.4703165884640605}, {0.4703165884640605, 
        0.33028757672012476`}}}, {
       5, 4, {-1, -1}, 0.25, 16.081949000000005`, {1.616, 
        1.0550000000000002`}, {-1.7660000000000007`, -1.0999999999999999`}, {{
        0.711227476221943, 0.4531919607505284}, {0.4531919607505284, 
        0.28877252377805696`}}}}}}, $CellContext`dynamics$$ = {{
      Complex[2.3916781079486205`, -0.0002978686310062208], {Complex[
      0.8503413551737847, 0.], Complex[0.5256086783498344, 
      0.0005632583674236541], Complex[0.001244304060102374, 
      0.008224924944887522], Complex[
      0.008958141582195475, -0.011437264539424062`], Complex[
      0.001047179409073609, 0.0005218484474217796], Complex[
      0.013796628760697252`, -0.0027870675026091156`], 
      Complex[-0.00009621276384000852, 0.00015619450622227212`], Complex[
      0.010818280796542677`, 0.0016218397980095698`], Complex[
      0.0006556054922554496, 0.0006374631014418561], Complex[
      0.005479705265139539, -0.004947370516163175]}}, {
      Complex[1.6342258143020483`, -0.0026463006731772916`], {
      Complex[-0.5226288342816275, 0.007465542133005806], Complex[
      0.8443984948797083, 0.], Complex[
      0.07498973966761487, -0.043459361502200845`], 
      Complex[-0.06134763804427704, -0.02760342543901714], Complex[
      0.027638346955569566`, -0.008395972781054473], Complex[
      0.013116956050479413`, -0.0045079068486302025`], Complex[
      0.02074362120418052, 0.002966364208064216], Complex[
      0.00831056104826009, -0.000211696081978005], Complex[
      0.007820615188500336, -0.011158525239008604`], Complex[
      0.00520348746854629, -0.0030307503223475315`]}}, {
      Complex[1.140505892623621, 0.0021741672646662068`], {
      Complex[-0.015241730534920166`, 0.011662790084988052`], 
      Complex[-0.10643634411759616`, -0.005129686420563932], Complex[
      0.8782178815296683, 0.], Complex[0.4563884842288131, 
      0.010478316979216834`], Complex[
      0.033307876046212714`, -0.012896981822482572`], Complex[
      0.07903029779266058, -0.000891117737372292], Complex[
      0.0003490546369739715, -0.0024142659142277704`], Complex[
      0.014097026550708429`, 0.011718073691040788`], Complex[
      0.000299113620664415, 0.0016253530498405672`], Complex[
      0.027087267191687317`, -0.0029998040072738274`]}}, {
      Complex[0.9063714697428146, 0.0010151600628517234`], {Complex[
      0.013258828934780054`, 0.008800877885660106], 
      Complex[-0.08469679221462637, -0.017621040112914873`], 
      Complex[-0.20426812121339308`, -0.028031502539118222`], Complex[
      0.2757162782694334, 0.0019387775697937426`], Complex[0.8363808185052231,
       0.], Complex[0.41449372412574026`, 0.0022310534969886414`], Complex[
      0.006888061418671288, 0.000873487734301777], Complex[
      0.023354961800651497`, 0.021083755134807158`], Complex[
      0.014704239646692733`, 0.0016071849190813963`], Complex[
      0.033241214719390864`, -0.004835596111503071]}}, {
      Complex[0.7735652840128255, 0.002162922514250138], {
      Complex[-0.0354006454262778, 0.0060135586982990215`], Complex[
      0.031051677013669548`, -0.015279415044168129`], 
      Complex[-0.4022623848851448, 0.007562123858795289], Complex[
      0.8601529083445268, 0.], 
      Complex[-0.21320767939451685`, -0.025488555734215927`], 
      Complex[-0.1882378745672325, 0.01914119422680004], Complex[
      0.060331426087600344`, 0.040236697353083245`], Complex[
      0.020845193921911833`, 0.008154154067217496], Complex[
      0.08440505951202172, -0.019434296637381186`], Complex[
      0.02449492200567166, -0.0029783301180824825`]}}, {
      Complex[0.6084915525496012, -0.0001296063089795378], {Complex[
      0.0056364969353286795`, 0.004462417856276397], 
      Complex[-0.04807322408099686, 0.010584774198168808`], Complex[
      0.0011491232447311058`, 0.008154243225378905], 
      Complex[-0.07152119543446729, 0.037319163994120025`], 
      Complex[-0.16723668322210383`, 0.15819556497583598`], Complex[
      0.3130316180501372, -0.2986165797090643], Complex[0.7451846426626776, 
      0.], Complex[0.39364297855452024`, 0.006243586960312922], Complex[
      0.12201605860831478`, -0.09930617896463355], Complex[
      0.07130117787687051, -0.10328314464528483`]}}, {
      Complex[0.5739454427060637, 0.00009042840592726012], {
      Complex[-0.02093185470997115, -0.012964866955821278`], Complex[
      0.004393355052169789, 0.0073302058682273765`], 
      Complex[-0.04174378433321878, -0.017933928164489615`], 
      Complex[-0.0006946132993635211, 0.025355674564571433`], 
      Complex[-0.25703206235123505`, -0.07289758039224395], Complex[
      0.4782026763974175, 0.13351854520191286`], 
      Complex[-0.250486339613026, -0.3668303352053626], 
      Complex[-0.1222074434585392, -0.1459327954358027], Complex[
      0.6153432125154356, 0.], Complex[0.2572118145323165, 
      0.019608833023174593`]}}, {
      Complex[0.5403186902916118, 0.000043676429497443605`], {Complex[
      0.02602999731547052, 0.01164253479346582], 
      Complex[-0.004674557829676697, -0.010709627325961136`], Complex[
      0.07841114335022895, 0.019248631390219963`], 
      Complex[-0.10077341455823075`, -0.040864689336425356`], Complex[
      0.29547642192081275`, 0.05824032232011122], 
      Complex[-0.5732269221275614, -0.10568179275936472`], Complex[
      0.05004621264353031, 0.10541551844691939`], Complex[0.05191745517482084,
       0.1640766299236825], Complex[0.6214020359544956, 0.], Complex[
      0.3474955401037185, -0.011093557154931516`]}}, {
      Complex[0.37891217753995976`, -0.00004490865812148953], {
      Complex[-0.023732527134598703`, 0.00491657465707703], Complex[
      0.0024768300684274605`, -0.002848659733408522], 
      Complex[-0.013912323159775902`, 0.013548397713656797`], Complex[
      0.004970676583695098, -0.012836937784506692`], 
      Complex[-0.02096178471243389, 0.02786255751569307], Complex[
      0.0008412071170598671, -0.020227987219011596`], 
      Complex[-0.4380670304530975, 0.0016759096806630291`], Complex[
      0.8613403714944075, 0.], Complex[
      0.014374791526048326`, -0.013276072538224937`], 
      Complex[-0.07388282820668998, 0.23989958818981832`]}}, {
      Complex[0.3489352412872518, -0.000044378116641128655`], {
      Complex[-0.007518151955197689, -0.01254497227394009], Complex[
      0.0028913764058387907`, 0.004363086527155316], 
      Complex[-0.033037581734012375`, -0.010018816135403464`], Complex[
      0.005399452976663163, 0.008343315408862462], 
      Complex[-0.04310159068163666, -0.013635645478950683`], Complex[
      0.006547644844728343, 0.005864878896725538], 
      Complex[-0.03967321895991335, -0.15072032496655677`], Complex[
      0.04442251551986697, 0.14119693401895508`], Complex[-0.4569471871225257,
       0.0015125597994551654`], Complex[0.8610131242956447, 
      0.]}}}, $CellContext`dynMeshSize$$ = 
    14, $CellContext`dynPlot$$ = {CompressedData["
1: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
50G5uUXo2oXjTdHY33JR57JPYn9nzO6YfYj9be6uo3YZ+7uy2mG9IN6XQWEN
w83Y39ZpuYq/sb+v5dMl3B+3A/nZF1H9uL+vv1i+twfPt07sxqQEnLdn8gWO
WuwTGakDl59ifyu53jrBg/1tXPFffB/2YMzaj5tTCQi8NNI+ZIn75PbS73W3
sb/ttj1LMsAeNFc6ne6N+1u3HzBp5ybQXOdAsTf2d8JeiVMcH2ZRze5PRpRP
A6C8rbV4A/b3sV989TrY36GllWF3D5ainbWoZwznPZMVmn8d+9sub0Nq+5tp
1CXwtWr4YAXg45YUXMP+BqYX3TiODgH2OypnJPb39yW/0mXcJxfUNWVZ2INB
D5t2VmJ/M8LelJkk9KMDGQM9utjfxW9z30vILQBZdmRQCfa33uXBCZoC9rfI
kMxv7G9K0n+yX/G+nHtcStTA/j4hKbwZVRehp/FnT89iD/YW7jd69hzfSSb3
Mlyxvz+fczUiepChZMRHq+PYgxUhkYIPsL+FVXp2/cPzLVLJeCFT3g7IPvt6
92N//6c/ziuI+ztVq3T1N+6TIeuaExexv8XniS4HsL9Ld0yLnMf+TgJLRxNx
3iKUF33HKssB7Uad7Sz2t3RudDMn9ve1llYlAs5b8nzYn4T/+7sh9HgE9vfb
Py3kDS10tD5I/lcM9nfA/uuFDxsGgJH/Qp0E9vd60yPxkdjfhPMFn0gxpchV
VftAL/b3pqA5wxivdnRts9Wmw/enkaRqqsBfzQqwhWODiFkaFYyFC0iIYn8/
Qc35Xdjf1gerW/dhf5c1h70qxXnLN0S9jMb+vrbe9s+ezn5kyZCmvMf+9kdP
NC5jf8NMrRQ69qC7lMbZU9jfQofuX/2F/U1o/FwZgZ3Q0kSLNcE+0SUUp/gr
F6H82V0K/+G8zbsiPX6mMoG3X9WHMuzvXV4gph372+fD69PvcN4255Ie6W9n
oFj/ef8I3N8K3uCKIaUdEBSq8ojYgxPtuU+jshiA7Ppmz9gdFsrQiXnptsoP
k/fr2HD7LaE9yq8zLFSYqPhdkLNHygpSUN3apONKAS41LMZk2DzqCr+ot82Z
DUQzvm9tk5hAwQWfuRu3CUERvl8PrE93IeLo3+h3kXTkdCpCP2ITvm/mVDfr
7RsEhELB2Y9XitHb4KZ93d+JMOXD8K2o0E7AZeM+xp1AorRsvLrp/Y1KUNw9
+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
94Mfx0ZWsL+zo9dNeWF/Q133mzNdeah8uwKxFPv7rTM1Mhn7+5YWhcMG+/ui
qlxntDsZdmYnb8rE/vbeuC7nkiEDzSnT+Ddgf5fONNvlB7SDqmuXT23F/o7R
J7btwf5OQzyEy9jfk9NZ5z9gf4cvjBYMJSyhfWmLRjELK2jf2ZwoiP2d2x/i
WcFZCYwsmIJa2N98cyVy0/psoCDxWeiCxQTSYZ488Bb7W7ek4u/EVCfKr9hZ
N/L/e/5w8qAm9vcvbW0btWrsk7EmVkFxEeIdeS1riP1N7uEjuWF/C8rykRO/
kiiFX+mREsqVYGDfeY6kz9Po+peS702dQ6DjxAalnikqEJ6JorCxvx0s27PZ
2N+E/PJuUY8l8Gz1pFkh9vdth/Cph9jfnvs6qVpf+hC5js/hsDO+50Xjb3zA
9zzbqtS+A/tbbjlo+gf2953dvk3W2N8PAjp23jrLQutPemu8x/6mRcnJnnxe
gGa2Wz60w/6OvXeZoI/9nSB2ZDgG+8RixfxTng8ZkqZieBQogjC4wHpeD/u7
qnXSvmkTGSaPjd81aGkH/emlkx7Y30P8nzo/YH+nOjzbuAH7++fQoXFpBj/U
1rIHCdjfqbNj2uHY3+bP6B+93q6gi4fYnFrXKgCNKpKnhv39Wfn1IR8ZNpCp
+b55r/oE8uFXj8xXxPcO89+FTOzvm8k7H27D+zLF6rwPE/v7iXbKtW3Y37r6
du8d6wpRVXPtLj3sb4/5sVM3ubvAgbmgF1+xv02P913a9qISeBrSGnvu4rw7
I+Vbsb8PF31XWRKbAX0Sx2Xbsb8Zj7y/2gpyw+JGrUMSLkugzPr9hY/Y38fS
ak/Ssb/rPh+miOf1oWuB9jsY2N83OzQ6HC0XwGUNsRNJ2N8rXQ07o7G/8wz+
uv8u54KjU6xnF26yUKp5g0kW9rdC6FhLT1khun1+nrPlMzesO3h3JTqNCY66
UwhPsL8lzsh+NMcezD5xwJe/SBAKBiqt/MD+PmHy41UA9rfGHaWlTNgBwG71
58+xvx3WO74tnMT3pflJRiD2t+P1Ku6n2N8yI5o5sdjfdl3+5xf7VlDgs0j9
S9jf13SJis7PKECKMUbVTZ9H/ls2F9DE2eDi0HayHu8EYhkOEE5if8esM57+
8b0T8Vqe7UrFHrQ9uq5Nf/cgsrNTLw8aHgAtNh8eR+0vRAy2pdgX7G+Fq4qc
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
3B1/3mULBfpanzb185wGhUmip8vS+eD/ADwyIXw=
     "], {2.4000000000000004`, 6.9, 10.000000000000002`, 22.400000000000002`, 
     25.900000000000002`}, 5, {{
       Line[{{-15.940000000000003`, -12.08}, {-9.540000000000001, 5.92}}], 
       Line[{{-14.120000000000003`, -11.64}, {-7.720000000000001, 6.36}}], 
       Line[{{-12.300000000000002`, -11.2}, {-5.9, 6.800000000000001}}], 
       Line[{{-10.480000000000002`, -10.76}, {-4.08, 7.24}}], 
       Line[{{-8.660000000000002, -10.32}, {-2.26, 7.68}}], 
       Line[{{-6.840000000000002, -9.879999999999999}, {-0.4399999999999995, 
        8.120000000000001}}], 
       Line[{{-5.020000000000001, -9.44}, {1.3800000000000008`, 8.56}}], 
       Line[{{-3.200000000000001, -9.}, {3.200000000000001, 9.}}], 
       Line[{{-1.3800000000000008`, -8.56}, {5.020000000000001, 9.44}}], 
       Line[{{0.4399999999999995, -8.120000000000001}, {6.840000000000002, 
        9.879999999999999}}], 
       Line[{{2.26, -7.68}, {8.660000000000002, 10.32}}], 
       Line[{{4.08, -7.24}, {10.480000000000002`, 10.76}}], 
       Line[{{5.9, -6.800000000000001}, {12.300000000000002`, 11.2}}], 
       Line[{{7.720000000000001, -6.36}, {14.120000000000003`, 11.64}}], 
       Line[{{9.540000000000001, -5.92}, {15.940000000000003`, 12.08}}]}, {
       Line[{{-15.940000000000003`, -12.08}, {9.540000000000001, -5.92}}], 
       Line[{{-15.540000000000003`, -10.955}, {9.940000000000001, -4.795}}], 
       Line[{{-15.140000000000002`, -9.83}, {
        10.340000000000002`, -3.6700000000000004`}}], 
       Line[{{-14.740000000000002`, -8.705}, {
        10.740000000000002`, -2.5450000000000004`}}], 
       Line[{{-14.340000000000003`, -7.58}, {11.14, -1.4200000000000004`}}], 
       Line[{{-13.940000000000003`, -6.455}, {
        11.540000000000001`, -0.2950000000000004}}], 
       Line[{{-13.540000000000003`, -5.33}, {11.940000000000001`, 
        0.8299999999999996}}], 
       Line[{{-13.140000000000002`, -4.205}, {12.340000000000002`, 
        1.9549999999999996`}}], 
       Line[{{-12.740000000000002`, -3.0799999999999996`}, {
        12.740000000000002`, 3.0799999999999996`}}], 
       Line[{{-12.340000000000002`, -1.9549999999999996`}, {
        13.140000000000002`, 4.205}}], 
       Line[{{-11.940000000000001`, -0.8299999999999996}, {
        13.540000000000003`, 5.33}}], 
       Line[{{-11.540000000000001`, 0.2950000000000004}, {13.940000000000003`,
         6.455}}], 
       Line[{{-11.14, 1.4200000000000004`}, {14.340000000000003`, 7.58}}], 
       Line[{{-10.740000000000002`, 2.5450000000000004`}, {
        14.740000000000002`, 8.705}}], 
       Line[{{-10.340000000000002`, 3.6700000000000004`}, {
        15.140000000000002`, 9.83}}], 
       Line[{{-9.940000000000001, 4.795}, {15.540000000000003`, 10.955}}], 
       Line[{{-9.540000000000001, 5.92}, {15.940000000000003`, 12.08}}]}}, 
     14}, $CellContext`dynTab$$ = 1, $CellContext`freqMeshSize$$ = 
    8, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyEvXd01MX7/h1QkBKk9yJdqdIhENjQQpVOqEqo0hNakCZFBKkB6VU6SJMq
iIEldAk1nZDN7oYkSO8lJODj8+G+Ztnr/np++Ydz5syZnX7N9eI9c5fqF9Bp
YEYPDw/P3B4eH/37b6fiG3//a0+mk+1W3nydPizN6nXip1nxx5ItSK9/YMux
t4ueW6OzNghquiLJ4p7/nvUrr7E7dj24ZdI7/C/9pvXO+klPy59zpXvI36Ij
iQc3P1X5LYM3rK48cY6r/Lbvy7fU8m/48uQeVR9L9wv5h1uGp1B90iwXW4eV
3ZQ7xfIu6nXLbk08TLuKTvhkzrunSSYd7UoLqlJ7+KIkyn/PeueddcqkcFc6
2hX2POfyBqHJJh3tCj/VaszwMrc5v+VN4YYhG5+70tGu+U831mn7w22uj2WZ
X+96g+qq+ltKfOwYWfQL9MMLK9p1zpr/5d93kkw62nVlUt/T9X7i/Pescw92
7vvVlRSTjnY9GO1fZuvV2yYd7fJt+Hr41i23Ob+lzy8ta1Qd7ioH7aq/PuHA
5CrJXB/LqF3VrvRbnsT1t+R7fWB9u1+SLB3+l55s2nXw+5iwpr8km3S0a3Ol
jMPutU+h/Pes9mEe1U9VcKWjXVd6D/QamctVDtrV8NTugTUqJnF+y5Kx61f8
duWWSUe7fp4z/vX487e4Ppb0XXe9TpRQ9bf41ew2ZV2eZAt+D+0689upCWGf
pJh0tGvj8lc199Xg/Pesi1uPP5+pfJJJR7vmZ2/fsfSBWyYdf4+qrHiZa+kt
zm/h/GhXMJWPdv3f9UmzoP7SXgvahfYiHe2i/rGYdrn3pwXtov43v0/jhfwW
Gl8L2mVznw+oj4XmD+pvwXzr8n5+mnbllfmJdLRrtMxn9/z3rJj/SEe7/GW9
IB3t+krWF+W3PJL1iHS0a6GsX6qPJUzWO9Xfclb2B9lPfNAu7CdIR7to//FB
u4Ld9ysftIv2N5//2A+R30L7pw/a9bf7fov6WGh/Rv0t2M9l/zftwv6PdLSL
9MK0q667vph2kR6ZdpF+mXaR3pl2dXTXR9Mu0lPTLtZftOtO/zbNLuxxKl1u
8Lzk5A55nUqXO5XY8v2XxxxKlwO+LVY+eJ9D6XL273zPZAxX+S1Ncm4/693I
qXR5VrMF3xy7pepjyVOz8N0fSiQqXX5kb7R55zOn0mWfCjMD9n/rVLpcfM7S
avMncP571vN1ju//fZ9T6fI8/zd9h+dOVLq84kDWlj/0T1S6fOHql0O8pyQq
Xe5RfcfTb/olKl2uP3nID4eyJypdrnxjUNcxc51Kl6OfeqZe7eZUupyzx6Iz
3ayc/541JMfZHTXqJipdfvyy8/XsoxOVLnsdTdyUf5zKb4lpPOj+8UaJSpcP
vkyMWBin6mOZWanWtD91/S2dR+Vvnn+YU+ly7qgpa2NOOJUup+3YXn7dp4lK
l2tnu7pg8gfpaFeFtC3PHUudSpfHhOadUvuVQ+nyuPbBXeb87lC6XKLb37uH
7XQoXc5XpH3ewlcdSpcfxnRMi/7GqXS5XKfOaQ/vOJUuJ79YE9VhKee/Z/1x
UqUS5+MdSpd71m/XJXWOQ+nysVcjTtYer/JbOD/axeWjXf93fdIsqD/rMtrL
ukz9Y/SrlHt/Gv2i/je/T+Nl9IvG1+iXl/t8MPpF88foF+Yb63J7mZ+syz/I
fGZdPiTzn3U5VtYL67K3rC/WZaxH1mWrrF/W5Vyy3lmXsT+wLmM/YV2m/cfo
V1f3/croF+1vRr9oPzT6Rfun0a9z7vut0S/an41+YT9nXcb+z7pMemHaNdVd
X0y7SI9Mu0i/TLtI70y7Orvro2kX6alpF+sv2jVu629j2v3uULp8c2qZKjPr
OZQu55ywI329j13pctjsngVTBicoXd4wedpV+3Ob0uVJOXte/ypTgtLlAdl/
ST56L0Hp8vz2/vdX9LQrXa4UFDh6QQW70uV+JXcGFP5M6/KpoJIRDVY4lC5X
yVLkQrrFoXQ5cMzd73/+zKF0+VL5VSVXV1T5LY3rx7waV8+hdDn2lxzVP/J2
KF2OcmSePM6L65NmKV7yYNt93g6ly87snkfmVnIoXe6/bPj0wOqc/561Y8US
pybXdihdrtKnR5NDdR1Kl3s1mFshqarKb/EalGNlSjGH0uVfFiTWTy6h6mPZ
2dYeFthT1d9ysJDnwy/+UrpmLeYd9vmBsASly7su5Hyd3tqudLnUxbVpq2rZ
lS6PHNd292z/BKXLW3ds8qgaYVO67P+23sx6nyQoXc6SHDT1+kZVH8vPnrUb
D1/H9UmzJP50vGBMX4fS5cRPv51Qa7ld6XLnDZPXB2S0K12um3fXoi+f2ZQu
H6nn531gvE3p8s47GfK/6aLyWzg/2lWTyke7/u/6/NsuqT/rMtrLukz9Y/TL
070/Xb7Svf/N79N4Gf2i8TX6VdZ9Phj9ovlj9AvzjXX5kMxP1uUdMp9ZlzH/
WZcbyHphXe4t64t1ubKsR9blzrJ+WZcHyHpnXU6U/YF1GfsJ6zLtP0a/brjv
V0a/aH8z+kX7odEv2j+NflV232+NftH+bPQL+znrMvZ/1mXSC9Ouge76YtpF
emTaRfrl4gDuemfalctdH027SE9Nu1h/0a6YbwuHNluhdNDa/OsBp777Il7p
crOILYMr94hVurwy8P7QrLVilC7f779pQY+uMUqXVyUUK/B9rZtKl6dVXRBU
t5RN6XL38tOnBK6wKV3OMmXI3TuPbEqXX3008nLemTaly1WC8u664x+vdLlZ
sz+uTPo2Xuny7WI7h766F690udeVuiG+/jaly/6D8lzOusumdPntX2uKd45X
9bHMLnt0TPVLqv6WEpfLdC/e2aZ0uckdS7235WxKl/9ZPzCX5xrO/+95I+O4
b1sn25Quh1qnvxwQZlO6fKv7xfCbs1V+i8dvO4tc+cKmdNmzWe7hH62IV7rc
vXRY6tMG8UqXk9/l9m+/Ml7p8u9tEgPX59e6nFjc81CDczaly6O2nbANGah0
1tqp7atLvmvjlS6neDW60+N6rNLl4xvrjt3yOFrp8vcTh6Rk6xCjdLlGVOuy
pbvcULq87ceIVi9m25QuD3pccPeda0oHrf1LPz33Nile6XITa7/JK8NjlS6/
SFkyr681WulypyYLLWMPRStd5vxoF5ePdv3f9UmzoP6sy2gv6zL1j9Gvae79
afSL+t/8Po2X0S8aX6Nfo93ng9Evmj9GvzDfWJf/lvnJuuwn85l1OYfMf9bl
j2W9sC5jfbEuW2U9si7XlPXLuvzRL+/XO+tyC9kfFMeW/YR1mfYfo1+v3fcr
o1+0vxn9ov3Q6Bftn0a/mrjvt0a/aH82+oX9nHUZ+7/i2O56Ydo13V1fTLtI
j0y7SL9Mu0jvTLtIH027SE9Nu1h/0a42I8qd+uZRnNLlnOPL1Q7teUPpcq5x
D2fkOxqldHlOnotxxbdFKl3O8+1nnjOTVH6L37N89pq3o5UuW8ZveunTNEbp
8pzo3MsTlscoXb6w7mTPwlExSpd7d3gSs8rvptLl1S2z7Og2NVbp8usW348v
tjxa6fLv284PP70tWulytZobFwdkj1G63OZVv5xjf4pRurwsNP+nCTlilS5f
yfjNliYbuD5plm+79XvQue8Npcsbxi4OiLp5Q+lygWwJS+Zk4/z3rL1vXvmi
zMBYpcshHTd3+DgmRuly0XHb555sF6N0eeaiAsVGhkcrXe63+N3eKROilS5v
PuxzeEJktNLleTVOVTj5WOmatfixjamlY5UOWms+bvXsxW8xSpcDotpWvTks
Runy5dCm/dcUilG63C/4p1fT90crXbZGX8taY0Ck0uW+/WvPXBUcqXR5kb9v
7oIzuT5plk0LM8968uKG0uX1w4r/vKB3jNLloz9cXLv8TrTS5Z6VrVHFTiid
tY7b/rxueolLSn853fy/CZWD+v/fv5tmQT1Zf9Eu1l/qB6NT1G9Gp6ifze/T
uBidonE0OjXSfdyNTtE8MTqFecX6O1fmIevvJpm3rL/9ZZ6z/k6XdcH6W0TW
Eevvn7LuWH+xTll/C8m6Zv3dKPsA6y/2DdZf2meMTtG+ZHSK9jGjU7TvGZ2i
fdLo1Cv3fdXoFO3DRqewb7P+Yp9n/SVdMO1q7K4jpl2kO6ZdpFOmXaRrpl25
3XXQtIt007SLdRbtKh945KsGS6OU/mYodfTPYYOilP4e6Vl1V4o1Qumvn6Pm
wu1xfyn9XXiq1p4abS8o/c10NueNJpcuKv0dn5rpp2vRl5X+7gm8VWpQ0jWl
v+XqPL847ni40t+AO4HefuOilP6W6N4qtV3dKKW/p7KUOLq3WqTS39EHik8+
vzdC6e/5WtvG9f8tQulvmEdcgV4hEUp/E17Wz3I5OULp7+wVl9u0qBOp9LfZ
1+8qVdkRqfT3n/HVe/1+O1Lp74JFlzt2Gc7571kTrvWe4PVPhNLfgccG5F3w
e4TS36e+zXN+skTlt/i0Hn7W54cIpb/f7xy+qfayCKW/3f5ISNiq62/J/vHP
Q/f0iVL6G9qv8qKFiyOU/vodrVX2Scp1pb9LEhbtqLThqtLfI68Wl9q8K0zp
79MFw2o1fHZB6W+GHW22ll1wTulvu/JTa+37+YrS37wR13vcfhSp9DdzLo8z
vt9HKf0tsn1W/7BskUp/T/zp+yzk52tKf4My/9Ure93zSn+PFY5t2eLQEaW/
nI76B1I5qP///btpFtST9RftYv2lfjA61dW934xOUT+b36dxMTpF42h0Kth9
3I1O0TwxOoV5xfqbWeYh628Xmbesv9NlnrP+NpF1wfqLdcT621vWHeuvXdYp
6+9iWdesvxm+e78PsP5i31D+132fMTqV6L4vGZ2ifczoFO17RqdonzQ6ddx9
XzU6Rfuw0Sns26y/2OdZf0kXTLuC3HXEtIt0x7SLdMq0i3TNtCvEXQdNu0g3
TbugsztSL03N9TrjyWblTvaY8u6V9bvGG/8peTbJpFezzCn6fZknVv+ZbyfY
D7nS0d7BPoeiYpYkWdL+12+PzXzw/uWl//Jm+O5Rf++HctA/RYsVWZLX35Xe
4H/lJ1nvXCler2NbVzr6Le6v5s32n+b0MGtVv9Qtj2640tGf1Rsuz5tlXrKl
5f/qE+WqZ8HLm2ZHJFu+onWK7y13DGhV1rtwmrW59M/YibW2rWlovmO0NqDv
md3blWbdWfTC7Ad+rnLQbwMmtJjcydNVDn8XTe2yrKv+tP2YaE6/aaluG/Y8
hyXFlI/x6nV8Ucmeru88rV5cvuRH/3vdmBMw4JorP9LxPbb7uCdZCjZs2KP6
dVc65qH/rwHLZ61MofYmWStG7p90poX5LhS65ipf8mN842se7R14wZWfvwOn
+WkZbet1/ewrrudzS1BOr/Dwjq7y28g8sRfpGvbTBPP9qqR/UL7kx/zx9Cj1
OMsAV36k4/tzWkeWBikTR1S5qOaDZez2qL8S1v6rN9H/Wy/WJjKvfKasbXFi
SbKlm5vuu74zdx+vNOuotQutYx4m0Xi5vrdH+cZfR1QvmOe+q3z+Xh3ld5X5
tmHX6qWbL3F7D3mb9rqPl2VPfJNX31a7zeNlvsNHfWrI/Ix+Vm3i21hXfTrJ
fMB38siPeXg4Z8W/PpmcYvK3o/yoj5fMzyLxC+rmXOyaP61lfuL7Z+THvO3f
8uTYAd3V/DT5UZ+6Mp8HBVTbeTDdVR8p3+qg+mPeJtzutzdroCs/0q/K9+Go
T3WZz4Mnrhs36oBaj6r+hktP9/0haZDaT8y9BtSnj8z/5atnnbmX7ur/9+N7
KqSRfMeO/Jjnp6Z2ujPsNuf38EB+2ictF7r9VMJiT+J90tSH5rOl8Pd/ZT58
S81nc/+i9/t92+or62Xn3Nv/pA7Gue1MiDffU3CbP2lW6JH7/HGtL5SPdVHa
OfnqV6Gu8tU9CPf+tFzd96ZNtTaqP725P829mznPkkYWT+b5YFkq9wtQny9l
vfhkmFzDa6+rPvWoPshv9vObDdJvfe7Kj/SfcZ9C6lNH1suEfP75Iwq76tNS
5tsSuQeB/FgXKXl3dZ04MYn2K9c9FNQH62Vf55Ee9dckmfq0kfrg/gjym++X
avVs3rKvK7+6V+K+n1hmFOnS/0HVJOpPV31oP7Qc2ZVj5qKeSbwfmvsyqE9j
WS/JKVN6VXx4y9SnNdUH+bEuCrwutbeU3ZUf6eb+i/v+b+n/6HS5aZHcnx/c
03Gfz5bD+TN9+jI2ieezyY9zTlNZL+kDtsduK+0653wl8x/53edPmrWBnIvc
54/rfhDKx7poX+pJnSM7kkz5fL8G5WO9NL5epIX/fu6fY97oH5oPllwng54P
PnmL54O5N4T6QF8KL6pbIN8UV306YL7JfHA/B96z5h76yn7i5S06B7ryoz6N
ZL0Et75V9nKIqz5+VB/kN9+NSPnIz/ebUJ96sl4WSvmoT9v/qD/WRU7pH/f2
uu4roT5VZb2gf2g/sfB+gnXRTsaX9kOTH/XxlfWC8XWvv6s+yM/rBfmRjntV
tP9b0mQ+0/6v6o91seDJ/Em1Fqj5bO6Lwb9AXwbIeoR/aUj3qshHWFE++Qiz
vlA+1gX2H5TP97ZQfk9ZL0my/7j3zz5v9A/NBwv2T5oP5j4a6gN9mS77J+pT
l+rj7u/uWZNl/3f3d//qjpxPaD5bDv35eeOnD1z1wXkM9+CQH+uijugXzX+T
H/WxyHr5TvQL9ekp8w3nT+THukgV/UX+DpQf9cF5zCL6S/uDqj/WBc4PtB+a
+32oD85jj7q3mbHzD1d93o/v2ZC2ct5GfqyLM3Iec8/v4YH8tP9bcF6i/d/4
3C3vz2PG/waKv0j/j3ttyN9Y1gvOe8jfRuY/7vERH7BCv4gPmPuMKB/rAufb
dOJIS+U+IPWnJcflqhFzeqZwf3pzf2Jd4HxO88HyUPwg6lNT1ss/7YbMiPFM
MfXpLPN/odxDdO/Pe9YB4i/SiXchP+oDfYG/oPls6oP8WBfwR8jP9zFRHznv
WV+1HFfr+CtXfVpJfYKp/lgXu8XfpROXS5X7lagP9CVS/B3tJ+YeKO2HliPi
T2k/NPlRnwayXjaLP0V9fKU+uO+J/FgXucS/pxM/xD1Q2v8tFvHjtP+b+mx7
7+vNugDnQXoLWRfgALS+rIXE79D6MusF5WCeg2NQP1hyFJ45/fGBFO4HyyW5
x0rjaEkQrkLjaPLjd2UcrWOFq7i399/5LJwH5cs+bKkinAflY96GUX0wP72F
OyE/0vG+AX4X87awcCekYx7WEA5G69TSUzgYyu8o5eM+L+0zlv7C5WifMfd8
8buYh+uFyyEd86qG8EbaJy1jhB/SPmn2VZpXVvAipA+UcQfnpH6w3BQuinSM
Czgq0tHPxYW7Ir2K9Fsf4b00Dy3gvTTPLROIG4Mnn1gY/mJaQ6fiydPzP1r+
UT+n4sm7T/T0G+nrVDz5ef+zFzvPcyqejHtqzJPn76xWaExtp+LJRa/ev7ep
mlPx5Lf9s59568/pYdY2w0suOTLKqXhyx/xfZD692ql48polf7fpH+lUPBn3
BJknf9442+qZS5yKJ+MeLvPkpedu3wiZ61Q8ucCon9+MWutUPJnLAU++7x+b
2XFN9YPlx4BhK0JsTsWT750v3+CTo07Fk035xJMbl2685/kzp+LJuEfMPPnz
uQn9J1VLVDz58bHVOzzLJCqeXOZInx/bl01UPNmUTzz5eKXthUMaJyqejPuS
zJPrHPAfOcqH6/ncsq1baJ1i+RMVTz4duXf++aGJiieb8oknD64dNK7t8ETF
k3FvmnnyZ5lP/jIpUs0Hy8L4Tumf/tv/zJNzFZy9r+C/6cyTeR5iXmVf2PLQ
yT48Xq574syTM2VYO+5NilPxZNyTZZ6coVnWzBUmcHsPeZv2Ek++liWs4tuv
1XiZ++PMkzft/7LC3Q/qA56M+93Mk1Ozt14TUzpR8WTkZ57cqP+c9cmVEhVP
xr115smZlza/FVRCzU+Tn3nykmmLv2zmk6h4Mtcf8zbHhPR+QR8lKp6Me83M
k8d7bdtVSq9HVX/Mc3vElQz1wtR+Yu7jM0+uEV9z+4ZDTsWTx8r9a+bJ0d5p
weV+5/weHsjPPLn7jMtDV8xV+6SpD/Nkn3KNvjozUc1n824A8+RJyZ5eS391
Mk9w3a8nnvxM9Ih5MtYX8+TAq6XeBV13Mj9R5cO/bM1w/FDqatWf3mOoP7Eu
tl2YuGHzRKfiyUFyL555co5ph/cP+qA+9ag+zJNtTd5GbRznJH7ywTsDxJMn
td1+aelYp+LJn8n9febJd7YN9JnShPcr1/sJzJO7NRicNbKeqz5tqD7Mk0+t
nlB2RE4n80PXewjEkzs2Xrh8SRHuT1d9mCdf2hTa6m5ltR+adx6YJ99+u2/w
ipMOU5/WVB/mySviT66vfcRBvPSDdxuIJ/+R4XTDv8aq/d/1vgTx5I1bapZ8
OUDNZ5OfefLdlKC/l0xwKp6M/MyTcS5ynz+udy2YJ7+dPe75oepOxZO5P7Fe
Vm7+fq59OffPMW/0D/Pkv8+M7NJ4g4Png3nvgnnyD+WbNP7mM6fiyXiPgnly
5ztzBq467VA8uRTNZ/j9kJZrptVY7aqPH9WHeXJHKR/5+V0O5snHpXzmyVx/
c/9O+od58jjaT+D3p0v/0H5i4f3E/D+LjC/thyY/8+QVMr7Mk1Ef5snLZb0w
T8b+yTz5jsxn2v9V/bEusi7rlNZvi5rP5p0T5slHZT0yT8Z7IMyTs0n5zJOx
vpgnh8n+wzyZywdPTpH9h3ky+od5cqjsn8yTcd5gntxJ9k/myagP8+S7sv8z
T8a7KMyTW2369En9tk7Fk/F+C/Nku+gX82TkZ548WfSLeTLOn8yTob/Mk5Gf
eXJO0V/myVx/rAucH5gn47zNPDn2oz8mXV3mVDy5gZy3mSfHyHmMeTLyM0/G
eYl5Ms4/zJPhL5gn4z0W5sk47zFPxvszzJPXi34xT8Y7PMyTE+R8yzwZ79gw
Tz5w43SbtI8TFU/2pv7EuvCU8znzZPhB5snDq470WvDSqXgy3s9hnvyx+Avm
ycjPPHmp+AvmyagP8+R08UfMk/GOEPPk5V6zAxZ2SFQ8meuPdQF/xzwZ7wIx
T94q/o55Mt4vYp6cWfwp82TkZ56cUfwp82TUh3nyUPHvzJPxfhHzZPhx5smo
D/NkcB7myeAAzJMbit9hnoz1wjwZHIN58oD5IzM2bqr6wby/xDz5hHAV5snI
zzy5lnAV5sl3hfMwTy4nnId5MtcH87OpcCfmyXgninlyWeFOzJPBwZgng4Mx
T0b5zJMLCpdjnoz3qZgnPxAuxzy5k/BG5slfCD9knox9lXnyAuFFzJPBOZkn
vxMuyjwZHJV58gLhrsyTwXuZJ4P3Mk9mbgyeXOLaoCtXdjkUT/74zPqJPt4O
xZPbpZXycHzrUDz58a9PLvZfbFc8Ge+rME8+1Gykb1uHXfHkPG3PRwSMtSue
7HdkxdxMXTg9zHpy/85BGYvYFU8uNrBHlmzl7IonTy23qsOzanbFk/G+DfPk
Wz3nvW62w6F4Mt6PYp58P3H3k4N3HYon553lW9FvgEPxZC4HPHluVd+sjauo
frC8azzTUayBXfHkC+1Ob/m9nkPxZFM+8WRL4WJnQ+o7FE/G+1fMk59Ztw3t
tNeuePLccrbN9v12xZMd7WZumF3RoXiyKZ94crs7G/03V3Ionox3t5gnrz/f
8PP2d+yKJ6/JUnd0aIpd8eT0JhOqf+56/8fwZFM+8eS8+3OXs1Z2KJ6M976Y
J99qcatJ+gf1wbyq0etepvHX7Yonj6rZaVmrFXbFk4vTPMS8Kl2gV95OW3m8
XO+bMU/+Y8LYtw+j7Yon430n5slXju3Ltacmt/eQt2kv8eSGHZ622FtRjZd5
94x58tg39aceD7Mrnox3yZgn9wu+b/3rql3xZORnnvz4Vu9Vez6YP/AveG+K
eXJIgde1x1ZR89PkZ57c6MznPhnC7Yonc/0xb5NXTS30+lu74skB8h4X8+T6
R8b2qlJZrUdVf8xza4FnZZ61UvuJeUeOefK0gzubtCllVzx5m7wbxjx5b/DN
CpMKcX4PD+Rnnty/Tqv5i9qofdLUh3ny4LV91t2foeazee+OeXLdh2Vu5bqd
oHiyeYeNePIj0SPmydjnmSdPreXb5vfyduYnqnz4l/nHvlk5JbPqT2/uT6yL
u0kV4maUVPPB0lfec2OeXP+w5+WZRe3Mf0x9mCfvfljmXNKSBOInH7yPRzz5
eOyFbldH2BVPzirvzjFPLuOx/s3lAN6vXPmZJ3c+M2n9zQqu+rSh+jBPztut
4/Ni923MD13v+BFP/tK6el6PXdyfuv5YFxPveActyedQPBnv7zFP3hs4uUTg
Vld9WlN9mCd/0So8W76lNuKlH7w3SDz53NArT8p841A82byLSDw57FpSxmnL
HIonIz/z5Ow30lI+vWVXPBn5mSfjXOQ+f1zvMTJPHh0d++hBe7viydyfWC8/
jlnXtvBe7p9j3ugf5smea1r4j7Oq+WDeaWSevO9U6sKS4QmKJ+MdRebJpdJz
/TStdYLiyZ40n+H3HQtTbKGervnsR/VhnlxCykd+fk+SebJTymeezPXHusgu
/cM82Z/2E/j9PdI/tJ9YeD/Buhgj40v7ocnPPBnjyzwZ9WGe/LmsF+bJeMeS
ebKnzGfa/1X9sS4q/lRv53cFHDyfzfuczJPPynpknox3LJknV5DymSdjfTFP
/k72H+bJXD54MvYf5snoH+bJeWT/ZJ6M9z+ZJ1eR/ZN5MurDPLmc7P/Mk3E+
YZ48Ynpq0fJ+CYon491R5sm7RL+YJyM/8+RQ0S/myXhHlHky9Jd5MvIzT24g
+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
8on3DqsT2mLngQjFexFXl3nvuZo5lxUeGK54b5GZsb/7LQhXvHf5+B+bvf6g
/DZcPvFe2/FxTWpvjFC8F3FIFe9Nebyt1blwxXsPtZow6fq/v8u8d3tqeuCT
dxGK9/I8xLw6Uu16m1lVoxTvRfxi5r2jy2b4c1OFCMV7u0lcV+a99s058+7f
zu095G3aS7x3VrkyDy//osbLxDVm3nv/n2x5a5cIV7x3ucSfZd6bf0P4tu23
ryvei/zMe7d23dz7wo4IxXsRT5l5795rnbtOP67mp8nPvDd2afSYjqevK97L
9ce8LX2zQKcvz11TvPdPicPLvPejUsXHn0iOULyX6495HvCF37KgALWfmDjR
zHv3+1yOzl/omuK9ryReMPPe17OOR3bKzPk9PJCfee9X80b+OGSH2idNfZj3
bq/Wss2Dj9R8NvGsmff6BP8RWi5PuOK9VsRfJt7rL3rEvBfri3lvtmPHs8d4
X1e89wSVD//SMPemPvb0q4r3vqT+xLpoXiJPoYi/rijem1niODPvnbnsfP8h
1a8p3ov6MO+d/bTyjDX/1sudn9yzfoe41cR7Dz+MCmg76LrivR0l3jTz3sgS
fgm+AdcV70V+5r2Fpu5p1G3UX4r3jpf6MO9tl/GffrdOnVa89xTicRPv9Skf
nP7u9XXFeztR/bEuavt2X+t7KVLxXsTdZt477PKw4fsGnVK896TUh3nvf+S3
nKT6g/fuHRDQMSgv8/MP4p4T782SrVXBNyOjFO9Ffua9zoGbb07PEqF4bybJ
z7z3gZyLiL+ZeOvMewe3mF++U2i44r15qD8xz0fH3Sy7pWao4r1W6k/46zWr
xt0fUues4r2nJT/z3jvtZuXIH39V8V7ET2feO6BA2Qu2pIuK93ah+Yx53lfy
oz5IH03zGf46SepD69fEi2feu1zay7y3E9Uf62KE9CfzXg/aTzDPh8p40f5m
sdJ+An99S+YP7bcmP/PegTL/mfc+lv2Qee+iXqfzzjkTqXgv5hvz3j2yXpj3
Ir48816Uz7wX64V5by3ZH5j3cvngvf/RXm+0l3lvC9nfmPcelvMA895Gsr8x
7+0k9WHei/2Zee9UOT+o73vHfb/t8+NnFe+dL+cZ5r3fi74w710o+Zn3Ql+Y
9+J8yLy3kegj816L5Gfe+4PoI/PeYKo/5jn0nXmvn5yHmfc+LHKv76obVxTv
fSTnYea9z+W8xLwX+Zn3WuQ8w7wX5xPmvUfl/M+8N+BOoLffuCjFe9vKeYx5
b7Ov31WqoubPv+tC9IV5b2Y5j6nve+X8ybx39orLbVrUiVS8d2CpTzoMP8T9
c9b7MfUn1kUROT8z7+0pfo15b9HY+WO8WkQq3pv4sn6Wy8ncn/es++X8z7wX
+Zn3XpfzP/PeXlIf5r15xL8w77WJ/2Xe+/OGiJRZhyIU7+X6Y13AfzHvDfOI
K9ArJELx3nviv5j3BgsfUN/3in9k3rtI8jPvTRD/yLwX9WHeGy/+mnnv+Vrb
xvX/LULx3l/FLzPvXSz1Yd4LDsO89434dOa9W8WPMO/FemHeW1Q4A/PeA5P3
N7+9QfWDZfSB4pPP71XjaPlWuAfzXuRn3vuXcA/mvdeEwzDv/VU4DPNerg/m
5xXhQsx7j2cpcXRvtUjFe88KF2Le+6twKua94FTMe1E+895uws2Y95bo3iq1
Xd0oxXu3Czdj3ptPeCDzXo+G7/ke817sq8x7DwvPYd5rFQ7JvLejcEvmveOF
czLvPS5clHmvXXgs895g4bHMe8F1O/1vvWQyvDdLUt93OSskW/55315wPCvi
FSI/uOLijd2CxzdxpSP/V15jd+x6cMuk4xxb9P74r+7cuGXKb4V9QOInIj/S
76yf9LT8OVc5zWQcG1b6svPAeFf6+1E85L3oSOLBzU9d6d2l/9N3NXr8aSNX
PTtL/w/esLryxDmu9IbS/+08hi9eV9RVH/jHWv4NX57c40qH3/RdWqG6R44U
k47zcPcL+YdbhrvSsV8tnhN44XGjlH/3rfc8EPVcJ/EW30n/YFyyf1ekz+HQ
JJOO/n96LOjGmP2udB4vpKP/41Jvz7nZKtn8LtpbUOJOvvuPcTH1kf6/enP3
x11Gu/Kj/xFvFOlo16CRpwt+Mv+2Zaf8LvpttMTfRH6MC+KcIh31bDorIPXl
n650jMt8ieuKdJS/qOzUuj1siBurxwX5kb5M4u0iHePVo8r6iJO//dtvwqnQ
rg0Sp7WTcCqM18V1f8bn8ko26Riv3St65mlaKcWkY7zmShxbpGO8vPP2bJLa
7rbl7X/0D/JjvB5I/FxTHxmvwt0rtyx37LbwNMNnrA6J74z8GEdfiSOMdLS3
08gNV4dk+XccpR/Qz4Mnrhs36oCrvagn4k0jHeN4af2S0VGXXPkxjvUlvjbS
UX7UltknHzmTzO9iXBCXGfkxjqMkrjfSkf/09VG/x65GXOZkM16VooavWfEq
2aRjvELbZLgS7Z1i0tFvduk3pGO8/JJq1C60LtnS8T/6AfkxXohXbuoj4/Vj
zjntO6z7t73/+zsGnmBd3Hr8+UzlXfXHeCFOOtIxXoPXbH0XmH7LpKM+iFOP
dIxLnn+yXcgb5krHuPw8Z/zr8edd6RiX80WqFy767Jal/X/0P/IjPX3XXa8T
JVzp5vz2aMPNPSuTzPkP41KjjC264TrX/WGMy6rAI2977nbl5/5BOsbl00r9
PfPdv2XS0f/zs7fvWPqAKx39f7zYs82FN7vS0c+Pqqx4mWupKx39fELyt/6P
fkN+9D//Lvqf64lygqld6P+V1A/o543LX9XcV8PVb+jnmtKf0v8W9DP6H+no
53Myvkg3/ew+Hwynwvz5/kyZyk1SD3hze5Ef/U/z0IL+p3lr+Y95bkH/z5L1
0sSd+5m49siP+tC6s6D/sX6Rjv63ua93U/5J2R/a9Iqr373tX97c/8iP9M2V
Mg67195VDsYF+4/8f4cZl1OyXyEd4xIt+yHSMS7YP5GOcbks+y3S0f/+si+Z
35X+7yb7/Fv3c76Jn478GJevRC+QjnEpIbrj9x/9ifwYl0eiX0jHuDRy10Ef
1B86iPwoH3HhkY7xgv4iHeOCuOdIN/oiOi7/b+uDcfGWuOd+/9EPcn4w+XvK
+QHpGMef5XyC8pE+1v1cpPof6Rjf5u7nItU/pj4yvjiPvdepTKb8unK+3S71
QfmF3c+HPv9x3vPBuF9xPx/6YHzpPOmD8b0h51LUB/UfIudz1Af1X+9+TvbB
uP/tfu71wbg/kXNyt/8Yd+RHOuKhIx3zAedwOc+b8cV5HukYxxbuvkD1M9LR
z+3dfYfpB/Ipph/I15hxIR9kxsVbfNP7/z/S/Yb8GC/yX2a8iouPQzrK6eju
+0z/L3X3iaafo7M2CGq6wpWOfoYPZX+ap3Id//n+TuVPz0t8IvanvnP6vbWm
OJQ/7VRiy/dfHnOlo/8dTfw79TnsUP4U8ZjYnwZ8W6x88D5XOeb8EFD9RctQ
VzrGJft3vmcyhrvSMS7bT78881kWV/3R/01ybj/r3ciVjv5PqlDk57RFrnT0
/6xmC745dsuVjv6/1KBz2c8yuOqP/s9Ts/DdH0q40tH/07Lu9i2YNVH5U8RV
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
f9ps5cxl4T5xyp82i9gyuHKPWOVPH268cGf1uRjlT1PkvWj2pysD7w/NWitG
+dMmQ1tM3t/MlY5xedB/04IeXV3pGJemG+3X7zW7ofzpqoRiBb6vdVP50wWZ
u56Lq+iqj4kvU3VBUN1SLp9r4tFU/ORN596udPMdafnpUwJXuNLR//s6vqi5
57RN+VPEfWN/mue4T8j3T+OVP/X6OiWkxoB45U+byXixP12+b//aP36NV/4U
8d3Yn+Idb/anG18E5v2svE35U7yvzv70myJbm+340ab8KeK4sT/Fu+7sT78s
1G3c3tM25U/fyjv27E+bvPq1ZZNIm/KnGBf2p7MlvgD70/DXDwZuD7Ypf4q4
aexPS57ptGWmvysd47W8w4MGlU660jkuHvvTV/5pe7vF2pQ/Rf+wP0U8O/an
nTy3Ddjwq035U8TXYH+KuAnsT5/8cOxll+425U8Rv4z9KeLBsT+dlfr16b/t
8SYd44h4Z+xPa9R8WGPSkHjlTxF3jP0p4o6xP/1l0cPKpYbGK396qdb4PA8+
8HEYrwr9ki+EL7Mpf4p+Y3/aN7Vn11gPm/Kn/+x93w/sTxGfhf1p0dNFel37
PU75U8TPYn+KuDDsT68/OFb1H0eM8qeIy8P+tMTCDnu6lYxR/nSqxCFif3rj
854/FugUq/wp+p/9KeJtsT8dUSXnkewjbyp/OiDrj38862lT/jQ8cGepsJtx
yp8ivhLSzb2SzmkfvTXxvFz+FPGbzO9K/2/Otzj57h/Ryp+aeF7yh37eIvnZ
n5p4ZPKH/uffRf8Xo3qinKbULvR/JPUD+tnErZM/9PNA6U/2p8Ol/9mfYnzZ
n05znw/GB2H+sD9F3DT2pzQPjT8Kd5+35vx/232eGx9UXNYL+1PE8WF/2sl9
3Rkf1E/WL/vT0e7r3ZRfUfYH9qfof/aniAfE/hT7D/tT7FfsT7Efsj/NIfsn
+9M5st+yP/1Y9mf2p89ln2d/ingx7E+hF+xPO4rusD9Ff7I/Rbwb9qep7jpo
zu3QQfaniIPD/nSN6C/7U8R5YX9aTnSc/SnivLA/RT+wP8X5gf2pj5xP2J9+
4X4uUv3P/rSy+7lI9Q/706/lPMb+dLqcb9mfjnI/HxofROc944PofGj8Dp0n
jd9ZKudS9qer5XzO/nSS+znZ+KMm7ude44/qyjmZ/SnGnf0p4r+wP8U5nP0p
zvPsT8kXqH5mf0q+w/TDSnefYvqhibuvMeNy390HmXGBb2J/2sTd35nxIv9l
xgs+jv1pc3ffZ/rf190nmn72/XrAqe++cP0u+jlYfCj70yqjt6blLBen/Cne
e2R/mvNl1vihc1x+EPlzjXs4I99R1/1W9P+lpvFVC38Zpfwp3s9kfzonz8W4
4tsilT+9EjL2WYfmrvIxLnm+/cxzZpIrHeNSq8rqFzcHuspH//s9y2eveduV
jv5vc/jm0Pr5Xe1C/1vGb3rp09SVjv5PKt/zXM4RrnT0/5zo3MsTlrvS0f8V
6g95nXY4RvlTvIfJ/nTSpXTr67s3lD9t1fJ0zmNzY5Q/xXixP+32qvTTgPXR
yp8iXgz7U4wL+9Nnw2tNLXwjWvlTvAfL/rRR/hnXnrSKUf4U76OyP8U7tOxP
A3uHfFohLEb5U7y7y/60RqJXj1zdYpU/nSvjwv70iryHzP60aBVHyzCPG8qf
Ig4L+9Ne1iPTvxxzw6RjvP4Y7fdN9JFYk85xdtifzi/wR0jeErHKn6J/2J8i
Pg7702H9t45I/DlG+VPEQ2F/ijgy7E+vZuzTeUWuGOVPEQ+F/Sniy7A/fbZo
bvKLra50Ew9C3j9nf/rD5s8OpP07D9mfIo4J+1PEMWF/Wmjs9Edr+8Uqf/pF
1LggzzMxyp9e7xe26O8FMcqfot/Yn65vc6FlgyYxyp+iH9ifIr4M+9MVXwza
82lytPKniMfB/hRxTNif5jq42yNubpTyp1aJO8D+NFfxj84nT4hU/hRxOtif
pjqPt47NGq38Kfqf/eliiTfB/nT1+G1tPj4eq/zprldjCuYpE6P8adbYZn/c
iIhW/rQH4qfIH8Yly8n47y4PClf+0cQfkT/z3SnigKA+Mi6cjv7ndPQ/p6P/
x1M6+t9T6ol0c3+B2oX+Rz8k5Zxa83Lpc96o/wQqH/1v4uPIH/of/cy+dZWM
C/vW1zLu7Fv7us8T448wr9i3oh/Yt550n5/GN+V2n8/GF9D8N/5opawj9q2I
R8C+ldaj8UdY1+xbR7rvA6Z87BvsW9H/7FsR14B9K/Yl9q0FZB9j3zpD9kn2
rf1lX2Xf+lT2Yfat02W/Yt96RfZ/9q3QX/atiBfAvhV6xL4V/cm+Fe/2s28l
fTTneegj+1boLPvWY6LL7FvxXj371q9F39m3Iq4c+1b0A/vWInKuYN9aXc4t
7FvpvKT6n30rnZdU/7BvbSjnNPatjeXcy77V1/3caPwRnQONP6Jzo/FBdM40
PshPzqvsW3FuZ99K52fjm+g8bHwTzs/sWwvLuLNvXSPv2LNvnSznc/atX8g5
n31rsrtfUP3MvpX8iOoH9q3kd8y4kD8y43JZ/BT7VvJ9ZrzIl5nxuiz+jn1r
Hnc/aPo/t7t/NP2cc3y52qE9Xf2JfoY/Zd+69MKRmZ2nRCnfGirvVrFvjW84
pmaFJa505P+9Z9VdKdYI5VsDypX1Wud3TX/3K+90sW/1c9RcuD3uL+VbR3c8
VHxEXlc6xmXhqVp7arS9oHzrxaalT9ef78qP/s90NueNJpcuKt/ayD5335yO
l5Rv/S4100/Xoi8r3zp0RMrAK1evKt+6N/BWqUFJ15RvHRox7OWDa9eVb90i
73qxbz1X0ra6k1+U8q2B+w7GvjsYqXzrKRkv9q2rbcWL/PkoQvnWU/K+GftW
vJ/GvnXdM+d3+X+LUL4V79qxb/2riI+v/XCE8q1n5Z039q14T499a9SkuTnz
XY9QvjVB3g9k31qzxccVs30aqXwrxkX9v6q868i+ddCb5Ab1AyKVb8V78uxb
fWdO9cu0M9Kkm/t01ZYln6vtSud4AexbN571970VF6F8K/qHfSve+Wffusuj
a+6LWyKUb10q74iyb8V7+OxbV13ofrfMvAjlW/GuO/tWvIPKvrXPxPs1G8x3
pWMc8Q48+9Z7+7eefFAiUvlWvMfOvhXvsbNv3f/N0S0VPo5SvnX+gmpxlpBw
5VuvLWk0+Yeb15Rv/Vn6jX1r2WG5B97eeln5VvQD+9bf5V1c9q2Rp95VDGx/
UflWvCvOvvWpvMfLvjV19c371U6eV741o7yfzL61wrfJw+8GX1S+Fe+fs2/9
7GCWY78UC1e+Ff3PvhXvkLNvXfDk708L1o1SvnX4/kGVzrQLV771daNKG5tU
vaR861i8Ay9/GJftc4pMW/FTqPKt7fGOuvxhXI7hPXPUR8aF09H/nI7+53T0
fwilo/9/lXoiHfUcQ+0y3ED6gX1rKJWP/jdxBOTP/L+29DP71vkyLuxbS8i4
s2/t4j5PjD/CvGLfekLqyb6V5qfxTW/c57PxBTT/jT+KknXEvhXvKrNvPeK+
Ho0/wrpm37rIfR8w5V+VfYN9K/qffSveZ2bfin2Jfese2cfYt96VfZJ963TZ
V9m39pV9mH1rE9mv2Leulv2ffSve72XfCh1h37pd9Ih9K/ZV9q29RdfYt653
10dznoc+sm+1i86ybz0qusy+Fe/usm9tJfqufKu8u8u+Ff3AvhXnCvatteTc
wr71gvt5SfU/+9Zo9/OS6h/2rTinsW8dL+de9q1n3M+Nxh/ROdD4o7Xu50bj
g+icaXzQSjmvsm/NIud29q3b3M/Pxjcddz8PG980Us7P7Fsx7uxb8R4v+9bz
cj5n3zpEzvnsWwe7+wXTz0Hu/sL0c0N3P2L64WN3/+IaR3e/Y8aF/JEZF/gp
9q3H3X2fGa9u7r7MjNc48XfsW0Pc/aDpf7u7fzT9nKHU0T+HDXL1J/oZ/hT+
Bf1z50rxeh3bJpl09ENVv9Qtj24kWbbJuRHjMnZirW1rGrreB0b/4B2wf+i8
jffHcP7E71aM3D/pTIsU9Jt6xxV+AfWxF+ka9tOE25audG7He6fyvrHxHQ3k
fbb3+9tjU3+fKWtbnFjiSjfv6T2rNvFtbLJlq/wuxqVw/IK6ORenSLsem/oP
Cqi282B6CvYr9X5pe6rnfalnGuoj7Vq6etaZe+nmHTn1fub7cqJM/XfOvf1P
6uBkUx/z/2L73rSp1ibZ+BSMSyN5L9FPyjHfpci7iG+kHLT3u3z++SMKJ1t6
SH60d1/nkR711yRZhrbp9cm8CudD+P1M5Ee7klOm9Kr48JYp39zTeXS63LTI
JEs7OVegXekDtsduK50s+0mUaVfj60Va+O+/ZWl//0y7+2dOhKBdeIezq5SD
dhVeVLdAvilJpj5oV3DrW2Uvh+BdzUMh/C5lU8mP9VVEyvFFPaVdqE8bOnfh
Hcv3+9tj064B0t62dO7CO5atpHy0N0n6LV3KQbumF+nS/0HVJEt3yY92Hf7z
88ZPHyRZOtN5Eu9zZngfJ8icWybI+Lam8wPeY/Sjdi2Vdkm8IdMPT7q3mbHz
j2RLL6kPxhfzU9av6Qe804t2ob05LleNmNPTvA+s3lFEOegHj/ZDZsR4pphy
0A9Yj53p/IP3JGUfM/3wquW4WsdfpZj+Md9byj6A/OZ7UXnnuSPpHd4PlP3N
tMuz8Mzpjw+kmHJQzyqy770lHce7iMiP+vQ8vqhkz3/3k3TSZbzXt1vyo//H
yP4M3Ud/4j1A6D7qiX0e+fndP+RH/aEXwqOMHvWZ+XaC/RDeZdXv+6Eccx+8
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
K9BPeP4O+sn69KUh6gi98BOev/M/1mB5lA==
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlgmwTmUYx889lqN7vmMbQpbuzXZxLdnDtW+5lpuQfc1gSJbIlGEQiqJo
DKUUarSZokWyL9mXkZr2lEJikOxFv/88z8z3zPM///O8z3m/9322zKGPdx8b
BkFQIS0I8qGnR0FQCP0iumEcBN14WTgJgj7oOvD90I3ge6KLwhdDeoMfiM2+
K7gIXFlkOLgZXGOkGms343MwXBZ4I7gMNo/yvBVcD5sO4HS4gej7sOmPHuLf
3YtNXWxa8Hw7FQT/IU3A98Ot4F1pbN5FfxCZTVpiuCr85+g62h/8Da0DDwDf
jU1TxyXBo9F1sX9SfnmeiW7L+zbo1kgIl41MA+/H5250c+x3ovOwW43uyvuu
4DfAD4I7IK+Bu8B1B78Dfkjnh2zW/4OriowHt4DLRZaCK8Hl+Llt4ltjxIE/
BX8Ibgj+Btwdm/d57ol9HrIGfAL+kdj2NQJuALIefAb+LnAuuAHvx4OPggty
4RMcD4QfC94P7qO7A88DdwDngBfqf4Fbgj8D/4nPm34XOv8x8PvAt8D1sWsv
/4mdoe50HXxF+AI8f8262uB64O9SxucHHwPfC/6XmNwLztY5wB8Fz4mM3wfO
hC+KzwVwd+BuIwdThkvCL4G/DoYKZnkMNMLPdYiJPCvuT/E+ApQCFwvN/gay
B5sK2BeGfw7bych5+O3wl9Hp8H+kmQjP5P2EyL71TGR+5f90mq3lCIK56Fu+
N+1Rd/oYkp+XzfnWKHCmx0JjbCYp7uCfQteAr+2x1yY2/mlwdbht+K0eWEwq
X5RjpRPTei6VWN4qj4b4N7PBuyKLa91NvsRyTDaK+fbIHPj6ieG5ijnf50hw
hcT86D/cC66CjPMY1h3rrpXX5TzHVQfKgxd4/NTx/GqnWIot57IS25P2dhzd
GX4ZfOXE7qYoslOxxvN8cEedA3gDuAe4DLoMa8uiZ7D+Kmf8JfZX0CUCu1fF
VRHw87yvoBoALodu6vGZg26p/wRurvxH7gnsnHLcRud10+NK8XLJYyAFXyK0
bxUOTYTTtc5j+ziLVvHtLPAR8OLI/tePygV0Oexj9HzFJ/owfLnYYm8HOCO2
ON/v8S+bQ+BWXldVQ9P8fynHOiIZgeVhL+zbga9EFreKz/HgsvB/8bwtZfEa
emzP8nhWLCu2ZbMV4jp4D0ajOfv+qvnYRNSQdfoe+Bh6r84uMLvBsXFPqFeA
d4FHgnco9rDZjn4dnxmqJ/ivH1o9r6s6jFQJLG/L+v1moldHdi8foxsrHgOr
7xX9vlQvsv088xRDfg5V0WO9lip2m3pMKt4WIcXhK7HHiXC1Aut/05UH4Bno
KaHl2mT0VM8p5eckz1nl5CykCXh2aGu0VvlzJLKcauC1XXmU4Xmjb72MHur3
qNxVreMXTI0sThS389QrE/uGcueI58tOdK3E9qr6cIJzLA1eqroFrqR9x1bT
lBdbPK4KsHZKZHGlGjU7stwpqP8VWX/U/1WN6e53oR7f27G44V5PRqBfQeoF
1sOW+JksQn+ivAIvDq0Hqm++hz6TZr1MPa0b32oG/pVvve1nqJ7aC8kE90Av
d5/yfVL9Xu/Z+MOs/Uj7Am9Ct8bmi9D6lfxf5DvDFE+B1dkRvmfVsAOR8epx
axUTgfXUU5HtU73sXGT+BuH/58hs1PvW+/86EFqeKF/OonelrC6Ux+eh0PLu
IPqnyPZ23uub/Mhfv9je98f/hZTFaw24TrGdX1ufI7R2RWgzjOajEomd25vg
TqrViZ2R5o1aseXQt/j7BSmpO4st14rhZyH6t5TVzaqqKzx3CmxOOALXHnwY
PSA2PQ7fJz2uZP8qduXBp+GyYsO/p4xXPq5B34jMj2aMzbwrFFp+pfOcF9i8
UdznS82QG/ysNoZ2pzp/3YPOQbHTRnftc47mKM1db4E7wx2LLNc0/+icxXdL
rPaqjz+r2SFltV5z41VwTXDN2GZL1XslwVe+T83AKz1/Nc8pRhVjzbVfn3M0
IykOVccueD9V/VkZ2Zmot5xKWb/SXb+A3s3z3x4bLXy+Ui/TXK0Yv5yy+Uu1
9KXQ5kndb25ifUHz+TSf/RT/fRPrZ6oPyvdc75vtEpu9Nav/o29GVmuHJ/Z9
9Sb1RtVk3ZHuSvOY6uRa8LLI+kh1n1e3sHYYa7eicwKbXzWbqZddxH+12Grz
WXCEXafQ6vNAnxXVo895jN3xGVW9YFRi96B6onqf6/W5C/qS/g9Yf/pKymq6
7quX72eo8jFlfVexXTm2/vk93KDYYixm7SWvgcopzRKa95Yrr1O2T83Dq7z+
qw+0iq3GJ/jvC+4Cn7+Q9cr8ms0iyyfFeanQvqs+/wP+rim34cNCloOab6/5
+ajHnQH/D8aYdX4=
            "]], 
           Polygon[CompressedData["
1:eJwtmHm4llUVxd97GM6F73tlhgQEQZB5CBBQBnEAHFBUCFGQydS0gUEezcon
S03NTMtMyzE1SiWRcgRRBhlFVHAKJUcEFdMEBEW09XvW/mPfe9aZvnP22Xvt
vd8OM2ae9qNUFMX4mqKoq/8vVoviBcm9uSj+Krld8i31N9OkLeofWxbFnWof
rb4tGjte+C7hAayN+bdJXtXc12KvbhpvXXhP+vol78ncV4RflvxJ7T9LXlK7
vsYP0HjHSlG8KdxI+CDhv2XPrSfcsvCaTcJ1hJsI/074v8LthdsLPyC8Q3iM
cJvC91ki3EC4gfBlwvslX0ku1D3mSv6n8UM13qrweWZLpJpip/5slbwv2SbR
0YrLNfac5u8XbizcoeI9Nmr9cYX3flrjH2pc/4o5ws+r0V3jTYXvEX5fuG3c
52bhbcKthNsJ3yr8H+GWwi2EbxL+pOo7crf5ko/YX/IXte+WvKP225I71b4r
u90s9E3ffdm6QUfvxdoOah9YeA/O8EfJ1qrP9oGkY+j3DvVP1v0mSc7UXSdJ
+qh9mcZ7aHxZto00SbYB3neqxheHvXwkPE74fuHDhDcJHyv8e+HBwq8K1xWe
KYxR/kBylH5jhKSr+rtJ6khGqv9Y9pTMEX5R/0dr/Zda/4bkdcl49X8nZL7G
hxQeO0v4UfYV/lD4U3QquUD935ecI/kudqC+zySl2tXSZ+As56m9QuuHa/3W
7LlPCp9YeA1970nOLT2XPegvamVHtf6N1Zy/8G8P0J79JQ3VX5GcLLlX40do
fLPGd0qf44U7CC8Qbqvxc4UPEf6XcF/hK4S/Lbw2e82/JSfFXtO091RJRb9d
lWzWfhXNb6v585gr3EX4YOE+Fb/tGuGTCr/xCcK3Cg8VHiv8huY3FW4kfKPW
d0Rvwhewh9qDJNeofTVvrPY7mjMMW0dHpe/wILqt+m6Pqv0INln6vQ/S/0/k
L720ZiX+LDkG39fYGI31kPxE7b7qW62x4cIfaP52yUPJPoAdp9L20Qg96P+h
mv9Yts1yr7rSRb1a6wBugWPQzWzNf17tseprUGtuwLawMTjip8L1hffo99Zo
/i+zuWBb8MMt2bpBR29p/O/ZvjxY+JuY3xBb0dxnquYT+KGO+i7U2FP4d435
r502vjibl3eob1nVNjuCt0+25Wuy58KZK2Ic275Z+BiN7xIeKfw4/lLaNg7H
l5Nt5P7g9wHCX1btg4OEH072TXwW370dHyvt13AjHAnHX5HNbV/qfOur5qjm
ws2TuesF4f5wKZxY+g7cRc3iIo1dHefnzsur9h3s5elkH6qvNxhV+E14m33Z
vrcSfhDeHfd7TnhmaV/GXpYn+/QlwvVif3TLnuy9VPK90hwNV6+Dc4SnSOen
xHvDLR/H/fFxfJ3f5LdXSX5YmivhZjgazrwy+27ccWnYdyfhE4k5Glgi3K2w
v8Ar3Svm/nbCH1dtj/hmT+HdwtM05wm1F0lmxHvwvnAY3Iov4bvHJfsUOkAX
J6tvsvZ+LZtbb1PfKHwlmwsfFB4h3KniWERMJDbu1fge/Ed6ryP5Qn0DIx4R
f/cLD414QXxZJ+mu9o/V17O0Te+K+IitH1uxr/4MjtL4r8M/8J9VVQttfOoX
GlspXGpuM+E/ZNsEb8cbtq1YpzsiV2kjvCHiv45aXKv5s0rrgLufJRlSmovg
pKFqr8NYk9/o4IrjHfqvUd+zGrsuO5YT09cKr5Z8UWObxraZ802N35216BBd
LiCmqL1Kfb01dxacU9rH8DVyJnKnt7O5lDflbYlT85L5bYLap0d8fEAyUe2X
s2MlfYy9lZ1r3S18ivB24RPCHuCDFZE/5eQ4jM/he3A4XL4zO/bA8XA9sZJY
wxk4yyvCA4WvFx5WOp7hb/cJnyb8UHYsmsAblT4DZ4HfT8X2NN5P478hRgmP
rjg2EaMGl74jd8VH39XcJyRdiDXkKBp7PJurJ3J+fJUYIzwFm4MPJKMiXpH/
cF50hG7g/690/31Vn3Nhdn6JLtAJuSUxkvOcLdyqdPzqIHlW/esli+JMnGVa
zJmu/2uy13YSviWZ0zZkC3fmroz1l/QLniUWkxORG03VmpalYyL22BNO01hn
4esiPxlT8dpLkzmaPXoL9yrNo+TXrUvvxZ7Ls89+fsR/7rA28lFSjl+FvWLb
2Dy2vyb8DR9sX7G99lF7nMYPKJ3T4rv48N4a2/++GvM7mBjaWeNzIrYS8+Ey
OG2YFrYpfUbOtiLiOvnKefBlvDFvPSlZr8QM9uY38CtsCts6XdKitA/NTT4j
Z0UXl4T+0clerR8U8R3bWRD2eZj69oQt0KYPmxio9Vcl+9DG7HzyGOF/ZudT
5J+c85ns/AOdjE326VXRR25Cjsrcz7X/qck6QTdNS+uyT+QnT2VzPlxPLtkk
7t8lzttF+KbkmEvshfP7Juck8+JM5HrkvJyVHLhr+Bm2152cJJnj4XrGLk72
QeagQ3QJRw+p2CfQA3puHjI52ccWhv13Vfso9X1ddb1ADkPuAmnCAfg5cRpu
IM8iHgxL1iNzhifXGKytET487vuPbB1cFOdBN+iI+HBGsu6oZw5JrjmoPS7N
tmVsmloLG/46bAXbpqajtuuRXLuS/1Frsgd7wTlwz5X4VOkYhm7RMbFtYfDL
kOCOR0Lf2Cy2+1jwUa/kt14f/EbOC3fg93AdPtw59idWtkiuXcmXGwcXb4lY
gh/hX7trXGOST8FRcBUxj9jXW/j1yKfIL/aFLzJOLPqsxrGSmpfaDH19WnUO
QS5BfUedOD/yg87JtePc7FyTnJPa9KrIV+CHjVXndOR21ATUBjdkx1ZiLLU2
OQa5xvGSXdWw4cJvjC8+GfkN49QzcDbcDWfBC+QM5A4HJteqW6I+JV9GV/At
3DwjmX/JKcgt8Hl8/13NaZ0co4nV6Khhsk7QzcPx/tSHuXSdjC2OEK5Xujbg
97FZbPfFiKc/T+ZacmByYTgD7mAP9sL/akv7Abk898W28Vl8b3ayL68OPoWz
qFWoOeH2a4WPKO2zcBf3wZcXh79x33alawZ0gU6o3TdHfL48ObaQQ5FLESOI
Fb+NfAWdbK+ad4kN1OQDSnMCsYT5cMVL2bGHGERutCLwOcncvSnyDfIlarmt
8f2BbxJ8m6BOHZ185sXBb/gyHNO4dA5ELkSOQa5BPrYhOYf/PNseeZN6EcvJ
wZfG+MSKa5Ybk2scapmjY0/2opYh5yXXIefZIfxmdj5FfjOydI57R8RP7k49
vyw536CWhCPgCr7B8C1musaXJNcc1KqckbNwprNL1+jchTudWTonW5ica5Bz
sCc1ArUBv8X3kfXJNQnnnVI61+OMnJUag7qBupLagza1xOjCfdQs1C5jCufh
fNNgjDnnx++TG5KTjZO+zhC+QfhI4W3Z3xfYg7V7Q2foblKcjZyY3DjLqWtr
fWdyUnLR6eEPxFXyRr7t4eP4Mj49WOuuD76BD8i9yamxFWyGPIwzcBZqcmrz
I4Mf4Uy4kxqS2pQahlqGHJM9WEsuR42En8HD1E7U3NRi1GR8x2AMX4SjmQOn
w+34CLksNdKi0P+Eit+TGpGaYFbYHLbHNxe+veCT7MFafJXYdk/YAzGO73mc
gd/mWwo+QQ5B7oCvwHENw4/hvv8DGDOebA==
            "]], 
           Polygon[CompressedData["
1:eJw1lnmYT2UUx+9MTXdyfxcVCmOZMWPfxzpmIzL7ljEo0ijSokz2JaMYZafN
UlGoKDyhp+zMDNkJ7U/WNtUYJiZR6nOec/rj8zzf+z3nvfddzvu+Nzz/6ZwR
wY7jFEEINPYcpybG3VALTgUcJyjUcdKIFfO8Gypcx/kFNqIPQjKxmzzPg7kS
o01D/LfQP6F/hJ+hHl5T3t8V+qFz4H6403ecPnifoBPR3aEH/ECbBnj1Icza
RuI3gihYjJeKVwN9F9SEgXgxeOnwBvo1eB16E7vXVy3eQkghZw59nA2L4B68
89JX6TfcgP14/Wn3LX41dFWoAlG0vWDjbIb+Ff0bNPH0PWfQZ+Gc5ND+Mbx4
YuHoCPiXd6cyb9vwt8Lvrs7Bp+gtsBkGkfcwDIZ82IGXS04IOhHdXcYF0Xi9
8Jail8Aim5cWEIVuAo3hMn2JJ+8jmXdPxyhjPQHH4Qy8LzFyesIm9Mfwss3V
IeIHoTd6Jl4COa3QLdFZkA2VfCMV/210JrGz5J+DNLxVeN+jy+Ai5Mq6Q19Y
K/VAfj24HOQ4AZ592GPvW4F+B5ZDBjnJMBfdjVgsxIEHyXhJcB90sHmROklD
n+Kbp2E4XileP7y/eL7uat3XsPWVdT7NdzPIS4dM63sWOQPQ69Hr4EPrcwI8
g34FXpX5Jqe/p7XzJPopGOHrd/fKmKAE8myNItFlfO8ilEMyeUmQYvMo4y3G
L2NextDXGfCiq98dSXw0jJI19rXu30Qvk/0n84A3mtxRsFNqlHfU9bR/B4gv
gPlW47ssXkDuNJhu6/Ye8Xdhpc1Btqd1kkUsG3KgGYzHGwdjpDbJCeXcyKTG
j/J8BAbineQbt6Ibob9Afwnt0N3w4iAW/sHbD3/Tlwae7k/Zp+NgLOy2uQgj
NsT2RV/0VWKVMAh9DG8ksdvpQxVYiL8ALtG2KbEVNj4Z5yG8m7yvIe1uohOI
r8XfDFvgO7zWeG3As70/E/8lKCFWXfYI+hq6K7oLdIK2nq6TrNdxG3cE3p/o
jlKf0B5ae1qXUp8XXD0HZe9PQk+EfTYXRehbGEs6c7qPnM/gmtWv1PFtoTru
Al/nZRd6J2z//9wgnkHbwzwfggc8PWPlXF4qex9WQ3Xa5so4iG/neQf8QV4F
XAlorLOnZ11tdF2oY2fnKnJXwiZIkXMtoHMeIWsuZyW09PSOqGNtw+0MDdC/
bPq3gefjMBjvqK2XtDmG/hwipbbwTgR0TRfa/Dp4QRBi9TUBf7z0n1gl8zcV
XY2xFRB/Vs4nWSc5A4i3RbeTcdm6FZI7Bea7+q3tsmaejsnlHaFSW76uZbTU
BrF15K6HFr7uR9mXE6GHnAWyjtAT/bx8g5xeptuh20M0VPX1TpS7McP6t412
W6G+3SNxnup89BAYHqx3yx5ySuGkq2djPV/XMk/2B/SxdXuO+GQ4TN+D8Wah
Y/EfRQ+DoRAm96XkytzLOQ+tfT135+FdYj7Lg/QbS2i/GJrbWSb3THP8yehJ
MMHmIID3OPoJGAuJnn73EXRtYnWgrq/znIqXLue21dBeW8P6nu472X8bYYOc
a66+Q/os/xb9pbZhANyB9zVtv4JvbK1kv9Wyf4Vu6F1ypkCS3Wtd5D0Q4+vZ
FIN3nbY3ZB9CCbnF0IF4EbGj1l7ec8DVOWvj610h99p5vHI5e1w9X+Telvs7
Xva/p3doK6s/qcOr5CwndxmscfX7ciYO431DpQbs/sqzcTwk5wU8GKz/PtKv
QvRUmCF3AF5H66voTujOcMTWP9zT/zb5f5P7t4J5vgpXoDSg8zKLvDkwO1jv
fandF9DTYZrVs9TLFPtuoc2BI/868g/p67na3u6P1egPYE2w/m/8B6ucSUE=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtl3nQj1UUxx/vU3rydH8iSzGyJluUoZS2KaOhRmJskX3flyyvfffy2vfl
te8hVISkZaZ1WkfEVFSMpSjDJEn0+Trnjzvf7z333Pu7z7ln+5Xt2K9J36wo
iu7NF0UxWDETRXsgK9Mo6sa4wOKkEEWlkihqwXoxsCSjFbwaeH9iOpPRacq+
UcibCRlT4MdYm8A5zZkfCb6GvDX4EmM8vAV4EL2m8MB5h5xLlmF+FBzK3u/A
V5AfybK11ro368edX82ye54ER6PfOTU+BN6Y38hGpxHYFfk55OORd0jt/GHw
0omdr9+pAW8ve4AddX94Eec/sD4c/bacNQb5eHAc8hHwNujUZz4U/jS4ljEH
Pg7MYUyETwaro9cJ3pN9E5lPhY8F/+TsbvBL4ADmufBBYD/GJPhgsBd7XwXP
c4fDWWbnFcy7JWbPGZzZx/W174zb7RT4FDrF9Dbsvca8C/Ir4MPIBsBrgW0Y
g+EvgzXcbrVj+x591+Ngd37jIvumc0495gORPyPbxmaHzuA0/y59XyfnPcCe
she8O9jBbfgE2CU1m1fijif8bqfBX/x99ea70VsA3wWuYiyBvw++w1gI3wfm
MabDl4JrOHMlfG1ib90MXgg+hrGM9Qz+vgichXyJ/DExvghcor3I7kRnMN95
OcveawFjBjqj0Jmf2F3Ko/Omn7NTPo7+z+h3QrcvowCyFcgWMWJ4b2R5qd15
DmdsSO07qnHODnA+8u3ga4x58M3g8MS+axK42v1qr/wqsfXi7F3BOW/Ay8Br
ylfQeVDnuS/NBS9yh2xwZmpvrLduwhnDmFdjvifYHu19MrH4HQ5vCX+Ltcry
A2RzUvPlH5F9znhOb4msEL/9tueQ6an56jnWD3qOGI9sLKMh/AtkrzNKwgch
m5Ka73yE7DijnfwY2algPj0VfhW+Ab4Ufgk+Et4/sbhQbmkHvoe8DvLG8N+D
xxL68xkz4fm4YwF/+0V6h9Rskx/ZDfRzZffU4krxNZBzyjFawu8G16NTWL8r
e8MrwesjvyO2+NV73yZfh98OZsXmz4q5gonlN+WZhcHW5A8Zzz9lwL9Y6w6/
kWX7dU5BsDBrbeHlE+PKRdnB9K4zRsAfQ55BdzW8gcfai7HZ/HnwK9kstTj+
BD7a37cV+z4Llr/0jtJRXH4cbL/O6ZxYrtM5XyonM5r4m76gN4zsXZVntedr
36v5N/BGiem0TsxfdKbuWNpzy32x2UX2UR1QzlIOGMPe82BX5DXZO5jfK6sY
8DzfTnuRn3Ud6Sqf/AaODXaObKsc3wv5P8znBntT6YxzG8rmdRKL0X7wW8GK
zivEdq5qx0T0e6SWp2fAS7DWR/EClmP00DvGFiv63qrKn4nFlHxStbUDvAq8
kMda8dhyhvxE+a+H59hpnD8wtfUcvV2wmqfccpfn7aKKh2A+1wf5KMaz8E+R
HfIYmeXxrtq7H9nw1PL9gWCx/wB8d7B1xVF7t7POb5hYTnhIuTYY6rv0nv1S
87dVyLe5LRTLDRI7c6/ra/8++CPIU+WHYDrD1DOopvmbbg/mL6o7zZF/6z4m
n1kMzw+vlVgdVyyUhQ9JzXd2sP4B41H4CGTVFaOR5TXp6A13sr7LY1Z5rG5i
76X4rerfpfu293yi3KIcrjvnBatPqlO6w0TvbQ673WTf74PJ1dcchZ9m9Pbc
NVc5Dv5T8FjinGmp9Q2qm13Bycy7yBfQyUmtTp5wrvr5K/wMo7/nNNlT/lkP
POZ9iXJmK3BCZGet83wom+i9lEvWIFvm9pTPjHaf2ep5V/Vadbukx6ZitHZi
+U15Lzu1vuBDt7fqSN3YfFU9xibkmz1PDkgtL3VULHgMqu+YF6zfVB0fA15h
vj62GndBfhlbP7NU9Vq9BLhKeRm+SnkyWK8p3z7pdpYNE/L4QvhI+DzGcvVI
idUN1dxN4Fm3oeyf4+cvS6wub0VeImN9jnJLBeQVvK6pN1ieWp0vjSzXe4Nq
7sOK+9n6Dvhq9m5EXjRjNVv3X4t8P7wSshn6PXTyEqtNs5DHyJf5HUrCs/UN
qifwvon1dfqu1L9R9WsbOBP5FrCU5yLluJt74VPBmYn1FKXY9672RXaPDYnd
cx3nLE6tbwroLEhMZ01ifYW4ZLqbfucedGbHdh/V1OXee5RFXixj77jUa6vu
f0vG/i/ov0MJ/WZq/VqRjPWlnSLri6swPxDbfdSDqadSX6ZarH7ssvcv6oVG
gH+7n6ifqex7defrwXpQ1fGb9Vy9cWw9ifroP4L1geq1csHZqfXg14LlT/Wz
W4L1e3qXLM7eGDznev+jWP4vWFzrPurR9N9BtXh+sDPV+/8bzLbqOQtzzv+2
obBD
            "]], 
           Polygon[CompressedData["
1:eJw1mHf81lUVx788F/Obj/cBRVKcTIlRDkzTLJPEVY4IVEBA9o+9Ym9B9gaF
nzIEWWquHJm7vacz0xQUxVyVopZZfd58Tn+c13PPOfd7xxmfc+7Tov/orqMq
RVF0a1AUDfX79bIoLhbdlovidtETok6pKL4t3Tcl/0HIGHcVPaRxe+k7iE4R
bRXfSL/DNP/L0t8n/l7RNzS+RPSIxr2kv0bjfqKHs7+7VOPLQjZT3/ZOnvsd
0RkaT5VsZtVzOAtn4ts7RedoPFGyb0n3Q/FfED9F/JXie4p6iH4s+U9EvxSd
K/1s6QdI/l3xLcW3Sj7nLdl34OxfEW3T+CzpRmj+ueJ3it8hukDjC+NO46Vr
l3zXmaK9MuiVkh1X2oadpRsXtv1R9hk521Wi80SjpTtRc76Xfd5p4ruI/7n4
X4suTt7jktgPW/4qdJM0XiLdWs05tFYUv5DsQo0n49PSdx6YvCZr/5S7iZ8l
vr/4WeJf13kHiT9F/Grx/xQ/Unxn8b1F09lb3/xWusdEj4qmyBdTRZ2kP1W0
UbJNojtEx2vuqPi+i2iMxlmyDdLdKKoXfUnys0V3a9xGuklxXtY4RPyQwmtz
J+52vaim8TrpP6l4/a9Jf4P4htINjvOfKRqqcQO+kW6tqCDe9HOSdJvFH5Rs
8zPErxLfVPxY8ROq/v6LohWSr4yzshZrcmZkzYNn7lLx7+s8fcXX6fvl4pcR
g9KdXnr8XsX3QbZFfGN931/8WaXP+N+K92S9B8V3TLZZl7AfMUJsoLtO9Kbm
95N+iPabK/7tin3QKYi93q1Yd63oHY37SDa46hhvFfFIHF1ROldOkuwB6eZj
E/FbxDeVvX+THYvEzxx9v0D8UeIHiD9Hc8eK5mu8XrJGmt+u9Nk44xzNXSg6
Urrhkn1Vuj9mxxIx1ae0D/ElMXOPdN8XtY34vYi1xf9da/UQ37Z0DnF27nCX
dIPEXws2if9d9n26i36v8aWSLYozsDf5y5zLJB9Y+tsns8/EWfqKDtMdZkq/
UmvOFX+Q+KXil4kO1ri96HGN10t/A/4n/0QtJW8laqxxN+me05knZfuF2CRG
yZG2mvOwxpsl2yp7Hiv+NnJD/DLNPa5mGePlojmi2aLjJTsh9rif2C689/kR
72AYWMY3fLuBnBR9tuY92esW0Wmlc4GcWK/5WyS7GSI2wwYzwNJk28zkHOJX
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
            "]], 
           Polygon[CompressedData["
1:eJwtlnlUV0UYhm8gefXnJcU13HAPl/zHpdJSS620xSw1W9wVt8ByQxFUVhEV
wQAFQUBAc8Mtl8qyU6e9zmk9WamltptatrhlPe+Z74/nnPe+883cuTPzfXPb
TUoYGR/meV4mRMCqwPP+wJgR8rzV6DWwyfe8MtoOhHvei/A8z8W0V6Mv0X4Z
rkB4pOfl4hXQlkxMCmxCH8TrSFsn6Awd8TvASnvXdGJ+Q88jbhX6HPo8LEUP
xRsIg+A9e0ceei2s0VyIeQZuRK+nfQMUa954iXgX0L/rPTAXryVeW2gDO/Fu
ZR49YCu6Gd4AdC26A7o9xMC8kBtvEToJFsM/xLRjLnvRZbQV0K9Q40Ala1WO
fxRqaJsNYehrfOu/UETf7bANdsA9tCUTUwWvomMZt5pxanz3jv14+2APlBLT
CL8hLKTvMcabiJcEt9PeD+6AKtqqiClnLkd4fgU2E/MsRKGraa+BLRBN3M2Q
gb7AeF3Qk4k7ib4CVyE5cN8RTt8IqAOFePmB+yZ92yWYRcybeI/TPhamQmbI
rY3WqNJ339iV76rQ+WB+L/P8ElSE3Hu/ZZzTcAqWMFaifWck8TFaE9iIF9Cn
AdSHePpl2vzj0F2J6QZr8XIhT/tle5lle/0cegU6O3Cx6lOOjtQaak2YYwuI
hh14JcS3RbeBGNt77cdi+nzNe6PsXOt8V9g4CbRXojdDLP4t0Mt357UErxRd
yhrs5rlWZ9ry4hzjnYeLlotlilUuQsi+VzlYg94KW6AZc4qCEvRSxsmBVXCV
Phl46bBMuRNya6i1TKftLO+YhteC5+awDO8XvPboXPwl9LmI9yf8BU3wG8Mi
++5JxHyEHk7ccvRTtD0NnaETJNF2nbie6OU29tSQWwutifo+SN8HYJjmaOf5
NvRrtB2F1+GI8hWvJ/SGRcRMpP8EmOO7eX5OzMPoh+BJGIn3Gd4H8D58aPPU
O95GT0BPhDthCd47lo8p6LH0fwL+1rrjbcBL5TkNTuNNwpsMM2AFbV/gjUA/
AmO03njNiG0KC2g7w3e3RreCltBdY+PND9w6J9PnBM/Hw9x37AlcnVK96gQL
iFkIsehuyiHVY2IGMc5AGOG7NVPu90H31rpYvr8QuNxvjG4KTcyrtbyYT9sw
4ofDOvRKOy86N/8Frj42RDeC5pY7Wqsh6MFwt9WwA3g90PczzigYDTND7jtz
AldrVXNT8R4lbhQ8ZnuUrVqunNH5hh8DV9vrouuBbzmTozqGnqt5wE+BqwfK
i76MPRiG6DvwWuG1hstWm84Gbmy9Y77dN8p5395xk+VsHfJonc4Y42QrJ+Eb
nXc4Dlm05RH3JXq07fUx9FfKNfQ4vFRIg5OqkdYnX/VCOeG7XC3F2wjFsJ62
dNUO9GF51IVii1WfDN/ducrzG8CDMLtzdQ/qHdk6i6q5Nr9reJWq/cpNy33d
yYdUI3TOtaeRbs9z0Ku1JnCdfuN53zjfrZnu5lm+W/s56J+Vx/Cr7dtsvDPo
7+GHwO2vcu9j9CfwaeBqgmrDNN/Fa38T0PHKXd2feCHmcgp/FnomTLfcmkr7
FO2DvV97rj0q0LdrXaFQ/wF4EVDX9k9eUciN7ePVg/rQn7H6wVDVZMsj5bXy
u8h3/yxaF51n1RvVne6QyFjf4cWhp8EUyMKbTp84WG3/Hfo/UK5q7L3ofbBf
9yIxY3xXK3Ru0kLuP+de5QzcB+/aGRpv9UV15oT9v0Sj74IBsAvvEByEw5Z3
ml+J7keOxzbluNZP9cbusI205/Gcb94uvJ2wPdzdb28wTl90H+gFi/EC4hpA
pN0tOqe7ieuC7gwdrTZpnYtUJxVje/lW4P7d9A/XP9zV2BSrhVNC7n7QPfE/
OO1WcQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtl3mwj2UUx19+b9N7++WtaSEppZSh7LuxL1OkZBmkJBRRliSlIgyhLJmE
KMvYr/3ady7Z7nUt1xYX1y4hxFBp6vOdc/545nyf7+88z/ss53yf8yvSoUez
7nmDICicJwgS2KZhEBzFtsLeiYIgE5w3JQimxEHQBm5PMgimgt8G7wNnJc13
Ymy4JXgSuDP2OGO7YPfDd8DOgB+BHUlbCF5E6wQ+wO8B39iP2Qv+yb+l766h
H4NfhqtHO8sid7CuQ7Sl+G/HLsPnDnxLfj+mPvwu7Bb4MoztCH8SnKt9MueH
9AvAr4fbgl8q/ApsM/hbzLMUvgn4OjgNvJC2GJ9N+HSCT2Hsarh24DzglUnb
Y0fwLLhL+G3F/zb2FPxE+Gz4SdiT8D9iD8H3wC6FL86arsBXwZag/Qx/EP60
j90PHou9gM84bCV8LoOfxhZ1XBm7C/8G/D4G/4Y6M9ro2Pj64FHgI+BPwD+A
K4d25jWwI+jXxu5IWr86bVhsWD66n0x+a05/Avw2cFXw1+C77DMLl/vxGUm/
q9bP7+PAjcEZ4Fc9rpr63Jp3qGKG9j04F5+K6nPmc8HHsavwP4U9Sv9LnTm/
p9OGKLbgcmgDwBvgVtL6gn+FS/Pz0pyKtyPME7O2zcw1AzxXseFY3Fr6C8Hp
Cbsv3c8+5sihzQSXZ2xh7Dp8jka29yr0B/P7dFo7z4V5vnedQ6rngGL73hQ7
n38i+4a+tS1h97MNfBV+N37N6Pdj3CBaRfAvcN+C6/i9fAp+HnwZ/530Mxh7
E7wB/Dh8T35Ppb+duUuDZycNl1FMYlfgfx6b1JmBL4Az8L+MbYzPfPyPgquB
54GX4LOV3xeAT8DXiC0XcsH1PddC5qoVWx7Jpyb4ts6Usf9icyI7N635v4Th
e0LL37v038C/pOf1YuZe6fmoHN8NNx98MWF7mQVeAD8HvBOuHONW098PrgTe
53s8iP3b40e6cM15ncEtX5vWeMjv4gD2LHNeBJflrn4Dpyp+dA6h8epLT8pi
B8Bv9fO/xffP6T7A1yO7N+WLcisdnxLYr/DfCH4W/Dm4Gy2/6498XgD3h3tJ
8RJYjj0VWsz1im3+QuCPYrtr4e6x+UhnpDeprlGbI9uP9qW4zvK962zE62wq
M/Ywv62BP+36+Rd8C9cNxapyehP8M/T7xLYWfe/j2OJWfr3B2ZGNbaV4wK5k
bBbcqqTFxjvwb3ncbtYaPd+LcM5zXP+z4XeDR4emaQvAH7iGnADPAp8DT/N3
R2/EGdoU8GG4U4pdcE3GnnZ8SWNpw5RHcJtog8GP4VPNz005/B585HpezPOx
OHZ50uKzdWxYsdwG3J4WuObviyzGViQtHhQb7/L7OvDD4Pf9rdiBTz7sWt23
cjCyd+0BuM7u/xC4i+6X347wraqeg8JVwBViywdp46Ps4SzzPIddAf+Z695h
1/blsWnjQGlWbP7CG/0sLzG2G3a7a/gQ5a+fj3R1p+uezlzvhd7x/Cn2ZnWH
X+ZaqzV8EZo+99P+4EvjdxW+GvY8/B/g6uC6tBuB3YvubqrWjP99mjewe/k9
aT71UuzuhuOzC5/+ofnoDTjm31oDXwi/c/DFsBfg58BnxpbDylnFw0CdnWvp
oqS9Jw3gzmBX43NFucKZLwJvjAxLW8rq/CN7I6TZqf5GrIvszZAurQHvcSxO
c0lLyyu/PBeUE+n+1ujNUZ5Kr0rFdl+9WdtYzx1pb3WvOzbh/2fC8kh6WTs2
HU7T2xFZLCl+Gsa2L2lyXc9Hjc3FLkmaxjeKTcel53sjW6f2fgD8Wmz6qDqn
Ofim1z8aq7fiFbjxsb3fesd3eX0lre4bW84or1VXqb7SW1nBY74U9sHQdEY1
XD3XFmlHL68HFE/S89maM7L7PQEuyDwJWnZg+jAGv9OB1Uw1FReB1RFFQ8sp
6ZRyZy54GbaP9COw872sGk7xynq/CS2eh3n8q75VndtEuhKYFpeT1gdWO0b+
Vr6IbeT6IP0r6BoiTXxCZxDYG1zd13YjsrzUHrXXfH4m0oUCPlZzPBLafSn/
M/yO0iM7O/nr/ZAWqobJ5D6Ge51222sA1XXfwT0d2tsqnd6aMH/VPk/6evT2
jPLc11nU8bvQndQK7ZxVO86gnQdPD61205n0DK1+Vt2+g29Npr0Z2n+Brv6W
6R1RHZSDf3vstNDiQRo9yHnVamc9948wrnVob6X+M7T1HFcNLa3RHemNUA2s
urdkir31c8BpkX1f/hr3usetYnuC69L40Gpj2T38XibF9nQstppdMZMITUOk
M9tiq9P0P2UmuEVosaGabG5oa5C+qEaSVqznW239LZD+Tw5Ni1S7D/G9Dw3t
TVPczsZexO8auBbf+R8lpBHw
            "]], 
           Polygon[CompressedData["
1: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
P0v+uyTXcBbORM75DHrLO4M=
            "]], 
           Polygon[CompressedData["
1:eJwtlndYV2UUx6/w8+mH127TXC0rRwMUULRMRMRsOtDcKy1zBVqZmuZIpdQ0
zVHmSNNEtoggCLIEFExjFJiCiTlSrEQMzbT8nN7zx+d5vvd7zvve95533VZj
w0PDPCzLioCG8KNtWW+7LGsiTIAEx7Ie8bKsh8EfvsMrxFsEC2ExPItXQLs9
bstKgi54xzwtKxN9GP814v2hH6wjVgRL0C3pry20g5V4IXhF5K9CfwEVUC59
wRZivxKLRy9H/2KbMcnYgqCWscfgR8MFYmXkfY0+jfYm7gP5eHlQoO8/SSwH
2qBn4M2EWfI95P5Bf5vxN8FTPK/BXw1rYTpeBe2a4j8ArWA13lFiP+tYzxD3
xfeD6XgP4j0Ej0MWsVO2abOLWCLslvdq3WKI5VG7fAihfR1jWUFuPFyyzTu+
RW+Fb7QuhyAIvYTYUlgGf9P+OnjQxzDJxdsOI9AjYRyU0i6XnBzwJ3aJ9x9G
N6CNBcXER5G3hVgVejH6E4iAA3hzoT3aR+oEubIO8FaiV0E4lOO56MsTytDj
dV0lay2P2aaOUs+f0JPwYojFQhzMB1+8PGJ/MbZ6mIfXB68vPK3vnY3XGv0E
PAbZug42ojfAeqi2zZp8FT0VpsGX5Jy1zdqulO+Ek1Ci375V6g3bHLM/ZPw7
0VEQDTWM5yJcc5s5+EzWHgxFD4FBsjZod4v4TWjsZb5xOTlXea6DFbr+C8n7
wTbztRFvE2zWsYzGewPG6HxI3nCdyxE6v//Q1w23meexeHfInlUtc70DHQkb
HLMfZV8O1vHlQyd0ZwiABVp7f7QfdJA5JyeV/vfCITjDevEmpyvv+ZMls52c
bZLLczr+PPRcmAPHaRtHm1hoT+wgbSPlvEHfRTwdfY7Yeeig8Wh0BuwXZJ2Q
N4nYZJgCA+WbybsB12EPOYPwXofBsgfUi4Ij6N/gAnQi9go0oj8bzuMlkjME
rx59DW5BMp4fXiE6njFkQTZMwGtCu/vhXsggLw280HdCY3jLMTXtqPtD9snH
eONkPuBNXddS01L6LIEUtCXzLGcBzxVw2m2++x3H1Ooe9N3gwD7bnBNyXhTD
VcY5QGqHLnCb77mJV44eqlq+aRh6OIyBf/H+g4b0l0osGK+S5yqohgTb1F/m
4Xlix/Fi8ZJkP2qt6vW9Uuej6BIoho5ytuFdRl+EGuir8yZzU0afp6AaJjqm
blK/+7SmAXilsg5sc0b9f1ah2xJ/EtrJ2idnl23WYk+ZK3KKFNHyjS7yTsi6
1fqOxBsFoyEMWuKdJV4LV3StNcVrDs209tK2AdoTPHSOqsithEtuc4/IWELg
lNatF/oFx9RK5qYfuj+EQgptkqGbnDfEDrjNGnLTzzPgDeMdczYEortDL70j
5bzvge4JwXrmSJ1r6acOrkAfvAxYKOsO5sv5Rk4m3n7IggXqdWa//k5pvpLz
UM5QntOIp8I++Ej3bzf8y+RFyRko+wbvZcfMq8zvOd1HJXjFMneOuYfl3E3X
fk6gm9NPC7iIjpU4sR48B+udKXdnoJeJnSb2IvSGl/SskHUvd8Vk9PdyZ3ma
8zRDv6kJbVtDG9hFXRPAV/fxTtvsYdnLwTpX8XKvwizazoYPIYVYhGP+bw7a
5i6VO1W8rnjPQReX+feR+2OHrBOY4jL/SHNk7tG9YYCMk5ypeOEwTddcpm3W
n/wbyD9CC/UCdU3E2WYfy37urutY9miQ1Msx/1LL8JbCpy7zT/Mo3/w5OhJq
mKsAnpPIe4/ndyHMZe5k+d6Z6klsr2P+S9ag18Fal/mnkXt6BvoDeN9l/n3k
X2AROptYDuSCzXsaQTMvE5P/g92MOxF8dB+nodfL+Ux8IITCEfq6DRqcino=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1l2eMVVUQx+/bfY/dy7vsoUrvva5AAAFpSlUEBKRIkQCyShcUCGCB0JEm
SAvRDyaG+AUhEBKEiCJEgkpEJQQTiRqKIL0sHX//zPjhZP5n7sw5c86ZdmuP
nTZwak4URTVSUZQLXRCiaH0mipomUVSHMRU8C14+uDK4LXguYya4LrxmjK7o
noqjaA78GfB3g+dCG8P/IjbdSszb8b0eeBb4XXBD8FLwcnAFxpV0FD3MRtF8
eB3R3QbdxHgGvBG6wW07zpql0K0OfwO4pfTh58lmcBr8Hvw60MrIVIOWZJQF
50MzjArgPOiDtMmkwFfB5cDXofcYAfwbtGzG+KWhp5jngX+FTmCPDPgONheB
T8NLs/8t5j/pLAXYjk5FZNpmzA7tpbvoxKidsjvNc3tKQR+jlwU/hOYwLwOO
oHfcnirgAkYpcAJtwZm7gX9n/1rMy4NrQLOMquAy0FaJ3eU2bPtI7wB/HfQg
OouhS+EHZFqBe4NbQmsi0w76GTIDoKPgN4fWg98aWugykj2GbTH4OHS4v/s+
8Gvo/gC9wz0MBT/hKF+mzXdaIvMOtCf8PfDOIzNH50mZf+yLTUZvXR/b5sH7
ABv2Mp+t9wU/lzEf6JqxdbX+buh05s1T5rt/+Hvp3V5k3hD8MrSPY/F2xbbv
Aegat20VdAt7bIWehj8Y3Bv8CbhRYj55VOeL7S7X8/1DxQf8ldCtrvs0so0T
W28NvBv4RoTMcPQ6uA+M1j0onsDdoV0Uf+Ae0Gb+jk0UM4zW4I+hL/kZ+0M3
su4Gj9kl0DYpe9c5sfnJsthsWA1vHbKX08a/CW0fLE6yfK/rNtTP2H5NZQvf
Y77VVByCE3BDcGdwI/fbBi4r3W2x6Qs3db7W6op8afexnv6OuqtDsdmueB8B
7c63FvJxnSW29ddDN8fmb9s99mVDp2A+qtjqBe7BGKb7SizPyE8W+r7y2T7B
7JNtT8Ern9gdD4RfVnEEHhCMr3cYBC4JrqZ4QW84874Z0x0DHqx4BjdhtEfm
R2ReDxYDsqEGY5zeCl5Hf1O9bTc/o85VKbH4GhkMyzdHB7szvftqZIa671Xg
+zC3oSK4XzAfKpNYHlQsyD938q63cbMd0OaJ5c5FweJIvq3YqgWeBH8m/J3M
p4Fngyd7XEzMWP4X/234UxkTFPPwjiHfBZmTsenK376BbsnYPWyWX/v6M4Ld
i/infV+t/ZZqBfOL2FgGXJiY3mbwWXgJ8pegfzsWr8h9+03FNbrPpyy+Lnj+
OQd9A/0FGYtl3b/iWvH9iueWodDDzDsrh0OXuHwDZI/EFrur4C3MWIwvgi4O
Fnv7+T7Pa5xq3wnmnVLGVy1bBn8l35cr7lNW2w66zC9eE5XHJijHJmb/GfjV
wCPhTw6GR4Engau7/0wBF7m/VUks/2ivFfA+j+29VHN154XgPbH5pOJ9bTA/
kD/0gF8vWP3L5fs1ctFBvp0rsPwvP1+LzH3453XvyL7K/Aj4OjIPsvZepYPF
nOraitj4equy8Mcwz4E/GfozvJKqTdDyiquM1WjVLeWfWci8EFs+HOF4L7L/
sFeHYPlIeSmdWN1uBG9abLaFYDlf55K/9/cYUywUZ61u5/gdjoXfF5xKrI4v
1J7gR8jUDCavep4LPgB95LEzJTa/Uk/ymHEDXqVgNUu1Zph8MFgtVL7qFZs9
smuHrzME3lFwvmIKvEBrqkbKtmB1/UnW+hfdZ8WM5Vjl1Gf5/oC7OIHMePRm
xtYbqLe5gs5d1u+rfOs9T+7/d6tcE2yvKqplseVJ5U/l0SJ/o9Gx3a3saRBM
T/pNHCv3Kgdnmf+lnog9cxLrlWp5n5NCZmRsfPUptYPdrfqXyP3nPnAA9F/O
8hX8q+id9XOpd5J/qHe6VGDvq55nvmKWcQ/dftDLfNvvut96rVdPIT/U2Zqx
16609R6Ks8vIFSPTJzY/l52jlKv4Vj9luT6TeH8UbM1DWp99SiTW67WAfz1r
/n8NfrH3iuoZ93tf8bX3OQ/YayD0sL+13vy294H30b2ZtV7odoHpSFf7jQ2W
mxTXKffJVLAYVD4rAM+OzfeK0T2Ttvv5M211Wb1eVWTGee3b7vemuL5SYH6r
On8X/J3fm85aMlhu1ZuOCNZPqKbI7u8Zt/yt5MMn02Z/LvuOje29FNfTYzuj
+r5HyOcFs+9u1u5NPqZ8oJ5Ha95AZqLnVuVb5f80MuOUq4Pdr2Lhfe9zlAcH
+d3K/yv7P8KjrNVl9STVvC6pto6BjtfaKYv5con1hm2C9bHy/02qdcFqiWrZ
kGC9oGrrp7H1t6rpJYL1jjqLYk156SL2F3oeU08lH1PveqHA3kj/AvonqBjs
X0J2jnHblN/zPY6UG/8DOfp7eA==
            "]], 
           Polygon[CompressedData["
1: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
vgWLdSt6DvAYPoifzIgzn58c09zF/wCJZn0G
            "]], 
           Polygon[CompressedData["
1:eJwtlnlQllUUh19QxNfvk09wBRcEDbUyUVsVcUlNQTBxSdxQQHFBUHDBRBu1
cMsFE1zGlplmqn9bzEmtbBmnzHDGMtMps819w1wRtec39/zxzHfu75577n3v
PefeLyG3OKso3PO8CoiA+ijPq2noeTcDnncf+wE8GQI6n4KBEBP0vCRYgT2T
vlkwG170PW8kXGPMQWJMwB4B6XAebQ/aFeLOxXc6Y/MhF9oTawo+k+Eififx
K8COQx9L/0swDgoY1xYtG3svPp/BELRnIR6tCX2VjNviOy0BrSN0AJ++SWhp
2OkwCtqgDUV7HLs79IZmaFWM3wpvwTDNj88Y7NGQD0eZ91/W2RrfEfRn0z8B
JsJoSEXrD0OgBT4tYbjNm2bx3iTOLmhlMcajzYFp2FNhErQLujkysEdCpvlp
X8bIT/6QC5O1//ZNU7Bz4B3ivw2x5q/9i8Lugd0TkmEwWhY+o+Am33SYb8vB
DuCXqDXofKCPjX1COYA9CJ638xiPloedr3OFYdDL9nK49hxWE7MC3vBdDM07
SjGwB8EAaI7/BcuTNPwmwiTYDJt8d1aKG8IvGvraPmu/M+m7Sm7tZ+yX8AVc
inJ+feifAjnaR/x2EGs7fOC7tSuHsuAF7KFam51bKloX7KZBlw9Vth6tq87q
5AZz3oFT2L/CCYhk3Dn6d2MP1RyQrVpAT4cMyLO8T8HuC/1sriDaFcYeYOy1
gKsJ1cYM+pfS/wj9e2nvg1t2Xv/hl0s7z3d7sA/tFzgOl/EZrjyGs7amywGX
k8rtMcQdC+PgNv3X6X+gb8K+G+X2oBt+XSHJ1rcIbSEshmK0xKBbj9Z1RGeM
toK+8JDbD+3Lz3CbuMn47qR/B32/43sKkrB9jcHeABuhBn6Ek77z34nPSliC
XQaLoDOxFtgaPsTvK/gaHtN5oU2ECbaWBmgR2JHQSPuIVgmbsTfBBuiGzzK0
cliu77M51mOv0R5gf0/8Q9AA7Q7fdBeO2bcVahx+r8Bkq99OUIq9EBbAUnxK
YS52IczWHYXPb8QcFMa+0N4OPdDuEvNv3TXwDwRs7Bz6E+jfzZhPfXefKp86
oH1E+2PojtYELQDREGF39krsV2EVVODTLORia46LcI85jzN+AGvZgk8lHKYd
j999+sMUg/YqCKKdRSvGLodlsATKYA20UB3h8z72e/AJlNge/ISdyhwVtF+D
A7T3KwZ2FaTQd9R35zuf9jwoslxLQKvTWrUetHC0Y/j2Z8zrtNfDQdprdW6w
zs6vC34n0Afit412te59tMigW2sP/JKhJ5zGbzB+5ei7oBc+bdAvqX5Uc1Yn
9+Eqdq3qFWLxyWRsBpyxOh6r+wt9o/JNv5ZrtwLuLbmH33TVuO/yRXtUplyH
l6E3NEeL0Z2q/MWno3Ja3x7hHm7tgc7oodYF9eChTSPmVCiEvyyHdG7nsc/B
GahjHQ/htu2p9ra97ntoCiE7Z/k9HXLvgd6FNtA46N6KTqop1Qs8h09X3We6
O6y2GwZdnSsflZeNTdO8t4gdR7utchifBay1FJZDQ6tV5bRy+3Pf/e9Q7sYz
vgB7FsxUflida0widifoHHL3ge6krdhVUB1ytaX9aKz1qVZC7h7/A+1POA2N
bI4Z9ibrbS5GewZSsPtBrO3BfLR5UGL1qZqutf9BtQF3BtPsHdB7cIO+7+i7
HnD3kHLi0aC782rsfTlE/w9wxP6PrbQ7aQ/938C3vrub1qGthdWW49FoF6yW
Y5Q74Ck3iBlmdazcKNLdAfX4XbHcVS20JE5raGX12xbioF3I/c/SfynlqnJW
NaE3Y7HvakFxWqK1gtYh9ybpbWpmayrB3gbVvvs/pv8s72L/D7P1QAI=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxFl3mwj1UYx98f/V7u6837iiRFyDKWweDad127i+vKvu9LrhZLYy2lmqZt
+tsSLVQk2kgxGKnRUJZUyhJRibJvqc93nmemP955vr/vec45zznn2X5VRxcV
TCsWBMG9mSAojhwWBcEL4OnImmkQ9AmDYGwcBEuyQdAZ/lhOEOQzNgi+AePL
nNf4ePT6w9eBn498Hj4P+SDfLHAh8gLz+4CXoj/O9eui/w6/832dt/kGgtcg
I8Yng0NkLb6HwSWQu11nJ7Ivv58G90MWx7ZdcJuTIDjHXj3hA7jG7DGU8Yns
2Skye/pGZofsWYGcENu56qV2Rq05XHPhVzK+nDULwA/BN4TvE5td5+C3MD4E
/susfbJhJfx9jFfmuwm+wJeC+zGvDPJR9Msib8CXRxbCV0IWZWzeEr+T85wj
xaamcEPRacq3lrGlzGsBPw9+OtxY5DjtB3e3r98isj2ExVUITV5jbjXGxsPX
jf4fuw7fl7US8CXwMHArcHnWnAx+Av0B6F/I2txLyMr8HgvuxfiP/B4uP0F+
wzcMvA/ZPrJzNUb+lrU3PZe1Mel8jzzINxi8H1kavUO6S2yoyN7tsGFEbLaV
Bv8N3xn8BzoHwF1is0G2XOX3XX6fr4NXo5MLPoEciU5JxpaDH8/YnZ0BDwX/
jvwpa+scQZaL7CzVtSa/x4AvZ+3MOvsNZFXmz9AdhuYburfzendsbus2j+Gb
j05v1hkF7gxfnfFq8seM+YfOJ50OyNHo9ELWQOcae0yF/xd50+/2etbW6YLO
/eiU5WvmvpF6vChuKoY2V++qd2yJLJfa3egt5GvlQjuL7jTX3ygP2QT9buDT
+N4hznOePSvC70vsHvNiix3FvnLAr+i9gXwtsbhVbL6PnMu6z4DnICcxZxSy
JTZMQi7K2Bn+ZE515QnGx3veWBxafCnWzzI+hr1ngPOYWwT/HDqT4dZ7/K7T
e4bmn7Pk7+i8Ap4d2fsrjnZkLZa7gk9i70z0Fmds3b9zLKbeZK9Jkdnbw/ea
De4KnhWbXYXgac53A49G/0XWeRhZL7T8UEe5Cp2XtT78Y+AndSb0cz0fKq4U
F3qXO+EbO6/xmei/Cp7LeGvNVy6K7Z3nKa6R3fnmZMyfFoV2J9rjIfQeQXZM
7Y7Ez0JOdb4TfEPPCfWRzeD7gW9yB0We/wch26I3hfEpjE9FPgs/TfP4Fuq8
2j8yO2fE5gN9wVeQS7jHrdxn69h8Sb6xAu6Ux+D2rMWF/Ly4fJh1jsK9576g
PN9VuZG1NsGvhT+eY3l4GTjLnCqM92eNAbHFX0m4epH5fBPkP+h1hB8ZWx7U
eYco/4cW+6uytqb85yKytt9nA+Sg2O6mFGv+kmN+Ln9P+N0IfnBsOtKNUqsH
evdWyMLI/Gok8hF0FqLTWn7iMT4ytFq5AFyAzmB/04GhzVWMNEW/RWxnX8M5
moM/Um1MrOYpvrZl7a31LuOZly+/AfcMrW7rLPKRYR4XI0LL4aoRzVl/gsfg
AmQx5j+Ysffa6Hn4M+QT/u46g/KX7B8cWZ9QpLyVWj3Q+lPly8zfzLwPsHO6
12XpdY0t3x+E/ws5Gv4sslpqviUfk46479CplVpdV+/R02uc1lfPoD6idmr5
RHeZC24Tm09tSgzrbj4FN/S6r1pfwfNhHfBJxoqFltu/dnv2ID9PrLdoG1sd
V02P0Wnj96W4uCc1v1KebJTa/aqvKMXvA8z5IrF8JL9SvyOsXPhWYrW7AP4a
/Mdwg9TbMG+DY3GXGfsAuVq1mPWfCi1+FafiV3m9U+3bCG4f2747ErNBZ6mA
3M7vvfDtYottxXhJnRf+MHxH1fbY3vnDxLDebj34DF+GffPh8r2fU4/R0u2/
qnyfWK+m2rrB4129VmWvazXBVTyHyGfKuo/J1/ajf9LriPKSckkHdCulFp+K
WfUA/VX72GtPYrW5U2znVY+wE66C11nlRvUDquGfwG9LrP/Q2bck9sZ601uJ
5Q3lB+Vw1YouqdVcxU0x8A+J9Tfd4LrHVvN/Tqzuqv7ewdwgtdqv/FPgb6Qc
WMb7NOWZ2HOFcsLFxHo+9X6Xvd9T33UbOjW89o31vNQlsryn3vUscmBs9aRE
av6hPPAua0xE7yV0HkWe5ncQeg/m9Vr250QWy3pr9cbygeusWdzfKIusBD8F
XDuynkb9gHpD8Vf4fcTzj3L7pRy7B+kd0x27L+ldksj6KPUJNTz/KKfKn3uA
zyC/dTvlVw/ElvP3wvWIrcf5zXtm9SG57kv6fTyxGt1dfVqO7S87jib2RrLz
MLhDbL3kV4nlz0L0b+WYLys/347c7bHfOzYfVL+knvRUYvfS221TD7susf8F
ys31uf+tHlOKo9Jes1ULtK/61V2M95SfgU+A/wNtL5jE
            "]], 
           Polygon[CompressedData["
1:eJwtmHm8V2Mex89PnZPf09E5qZAirdKK0r1tupW03ZZ7b+kq3fZFWqSNZB9m
htes/pYYUxONKCXDaDDGEs0whilLKpIlFCXVLZ+37/eP7+s8n+f7PN/zLN/1
aTl1QeX806IoqihEUV19D2ZR1CCJopnCLUMU9cmjqLdoYRpFN4ieFf/FOIqq
GS/+VaKxois1ZnBucy4QfZuZrHPUnqqx32rOh8I/FqOoUvh54T8JD5DM8cLv
Cr8p3Fcy5uj/v1DfBM19T31fxybjbOHTRVVqv66+fyBP1EzjzxWdk9haV+j7
+4KtmfWwl+80fqfGHtL/RwqvFX5EuJ7Gd9D4eerrqrHH1HemcCNRU+Sq7xrx
vtL4/4t3XNRc/bPU11q8SFSu9rPibxTv76Jtsa3vuczOiLN6VPjPwm+JPlJ7
gvqCeM1F09X+UH3/Fq+f1rNA8u9W3zXiXSF8vfBvhacKXyiao/anGv9OZmvu
Ikpy20t7ta8T/6D474pfKnyDcHvJqC/+Ke1/rK/38czulHNaonFLRV+KP0z8
9eL/RfxBua2Bf09zor0QuaLNGrM1tvt8Su0S/199/e9r4UKw/+0U/z/Cg9EV
UYlkTteYl9T3tnhjNKZW/35SeK/wHtF6tc/S2MnifSL8X+F5wvcK3625Vbnp
DLrznmi72r2D3WUn8VPXyWVq31EwXR0ufLPwL4WnCI8Rvkf4PuH5wg9JxiOx
2cM+redl4e3cjegVtU8Wba2s+dXMdJC75s5fUDuXjInivyX8Ymb3wX3l+sd3
mekwuvym+FtdP8bxr9hsCx1D1w6IdmRmM9gO97lL7cNFWxtrXCXcXfPnFkz/
T/p5TRF+Rfy/ZaaDr6r9Wmy62dDX973wx+i6cI3w++xBuI904SrhF4QfEG4i
/qSC3Ql3g86iu9z5Zr/vhcJt9P8DwrHw1cIbxV8j/LnWO1R4tfBK4RGp6ftJ
4f3CB8QfLrxJ+K/CT7t97BI9o3Y7yZstfh3J/0z4SfU/IVrHeNGj6tus79Oi
x9RuG8w2sdETwhe5PWDT2PYn+t9g4Yc1/sHM7hydQpfQhTZ+HifE/9TPhzPj
rI6p7wc//y1qb1Bf4vtFR9CVZtiI8FHhvcKVuekqOnudeKmfH3tkr+9ndhfc
CbozWuNHiRbpnBaLvuEfiekQtn/C/c95ohai77We0eJt4EzE2y2qjW39x3wP
tOnbx/4zO3vuoLn7H9a813lH3T9zXw9nZiOTRcNys50hat8sflv9u65whegu
tf+ovuXi7dGc1sKtROeLyrWH4aLP1f+F+yvssyDeV8Kf6X9DXJ+xPfZ+h3h/
KNgZdNP4Bfh+9R11/cKfvoHPcXtC3/fHFiuG+vpGa3w7yarhHIVLiQ/CpaJJ
7g/miNcT/yZ8p3B1MP6MxHwTPor4QhzoKV6vYGv4QXRpsLVtYV+xxYgzghF3
zN3C20RMiC3GFYP5d+Lbb4QnBrPRl2LzcdguOr/L72dwajaGDOZie93Yk+bf
KP4Vwj2EJwjfIzzG4/Xtwr8SniHcVbjK48lI4f7EcuHbhauEB9Anaq/+i0SX
iMY5n7g+nLsXdVZ/F9GlPmasx376qjX+loKNvVx4nvBt3EEw/cHXTlNfr9zW
ND1YnGatk4KtnT10ym1N/Js1dBQeKRqRm41iq/igJ0SNg/kmYg6xB53tlVp8
uUntgdiI5q3EzkWjyAGKZvPYPjazp2g+Dl83ghxFeLdokNqP4f9El0nGZMm6
VX0jguUM61weuQT+Z4vHi9LUbAbbwed1F64X7O6fcf9EDvBybD4f308fvgs/
wlhyCGIzMZPYucrjETbSLbWYDZ+c47j+39T9DfHvn5npH7q4zf09Z7U7Np/G
mf1L+B3XR/73nMcvcqo6wWIWcSwL5o+QQexIXbeJycRmYkSjYD57k8fvnqnN
3eb2gIznPX7iI7FdYh6xaYrnc7UeT5GxNjP/d6fO+9fqmxVMHypFZbnpLjaK
rT6k8efn5vPwfRs9BrRQX5nmL9GYvhp7JvoqvKJgesx5cxdbPHacyix/xEf0
ET/KrY8284k/bd3v4s9a5qbL6DR6vNb3Tww7or2cJn65+EuF+wWjy0WF3HgX
4kc9vyW/a5WbTGRhG41yW/Mwtz18WKWvH9/WVLin21u58Lm59dFGP89W+yzR
wGD+4VjR7pZ8bjWxQ7y+7j/IwxjbW3hZweYQsznLDR5nW5NDiX9XwfJxbBrb
HqW+tuI1wY4T89FlwWyOfyAbW8R2l3v8w4Y7BIvJxGLy9Vp91+g/14vfA3+k
8fPdf81LzT/UBMtByUWJochC5tDcdARdWSw80McscX84yePWUuHfCc8OFsPo
o32tqA1rTSxmENuG5CYLmQtSkz8zWFxCN6s8nt8v/tLUcgb6aC9LLWde7/ZU
klqNg3/a6jkYMZ24diN+CpvS3M6uL/hhYupQ4eW+njrovfufaZrXILc5/d13
k9N3EX9RwXL9INzV94O+FIVPz00H0UV8/Bi/b+Z3yO0uudOZqdUQ1BLj1K5O
zWfi69a5PiCro9sXMlf7fqkZDhbNJrHNVbHF0DWes1W7/XcMVo81Fu9IZrXi
DOE0sZqRPnhNEouznV3/iWHEsoaiixOzaeyEuDUysT2wF2Qg6wzRoczOhLNp
SK6UWU1AbcCZc47UTp1Fse+bM+FsuiV21tggtlaSmG3iE9h7y8R8BWeMbbIe
zh4bxBa75xY7Sjxek3OQW/ycgyRmw9htM7cfbLK5z+eu+yVm2+gAujA7MV3F
prFdxmPrxGBymYmJxeZBwWwRmcjGxxD7KxLzPRczJ7H4ShwnBhB7yF2JDVe6
/BrPf8p9/+MT2xNEm3j9c+4RzJfh0/AV6Bi6zPmiewX3x+hwHc8biO+LEnsz
gGhjc9jeeN//VOELsOXUbA2bq3Q95vyRiWxyAmq3WxPLFeb6edxE7pkb0cZf
4IsmpKYP6BC6NNnzD3zEMD8v9kOORq5W5vkMPmmA7xdfOCuxtwpqLmovYghx
Y5n7I3LiCs8/yDeoOfbKPq4OlvvN8fmV7k/5R5nHAWILbxjkSPgUfMsK7iFY
DXCt+O0Sqw3wYfiyRaLFwWo4ajnq7dfUrnB95s65+0Nuzw96ftPf7wsbwpZW
ev5CPtUjtTiEfmOD2GKN6xNvEvhk7oi7muaxkbx4PrmPcOPcfDq+nZqA2uBj
r3cOi47HVq/wbRXsPYUcm1jMeZJ7v+32jI9oId6XXkdgs1083mEL6DuxiBqU
tw7eIKhNeVPZ7nUZtQ5vCPs9/yDf3uf1EjUjcf514R1ej1H34UPwJdQslant
gbrrsmB7w0fhq9gze8dn4jvxk+g/byD1EquRWQ81FrUWNRG1UZbbWTH/kmBE
G5mHNS53f8GZcDa8IVDLUtPytoBPq+/7LfUcgtg5N7HcAn1gT+yFWpYaep/X
yeQ2nA25IzkkZ/SGcN3Ean7ya97Mdrif5i2NNxDeQnjDqB/sjemb2OrT9n6H
nGWt3y1vFrxdsN7zPJayPmo8YiqyeevgfvkH+Sxvhrx7fJRZvsD7xo8a84H3
HfH1MhYd3+n5coNgOoIsZP4vszeyYmI2g+1Qh56KTWanYLpEXyePA9Sk6Bi6
Ra36E4JOfZ0=
            "]], 
           Polygon[CompressedData["
1:eJwtlmlUVlUUhi8YJh9XLormkDiFmuSUDAqooQyKIijOOCCaaIpihppZ2eDq
V6tp9bfRLGtpow3aZKZm5YCkpuXQIIKIM2JmSs+7zv7xLN77nn3Od/a5Z+9L
tznlhUvCPc9bCxGwNOR5z4Xxt7nnlcNMnqfBfPQaeJaxcp7fDjzvfSak+J53
PdLz/oVl+M8zvoK45TCX51CM592LHgD9YBrxRTAQ7TPWEqIVQ+wASA+5sQCv
Av0C6z3K82p4gOe+0AeSoCteBHHFrDcM3R7dATpCFNyN1xv62+8Ox8uAEbAM
rwxvkUB3xesG3WEp3uN42ZAFqXgz8FLQrdCtIRZy4RG8VbASlhCTxr5SYbrF
xxCziOeFsBLW4hXirUC/SG5P8vwELCP+fhiPnqAY6ElcDyhA50MezCEmi7mZ
MB5m4CXaGdyHHg4Z0AXvLhiDHg05UELMed7TOdjE+9vK+7uBXu67fY1XPqy5
Gh6Dl9lfKf4zyo+YSMb7ovtAAky18ytT7rAYhhGTBnO1V5it90ZMb70PSIBJ
ePPw+mk96A/T8ObjtdV83Tv0Heh2kKg7AW1sLAO9wHe5D9DdgYHQB6bjFWlv
tl4T+d2C3eR7hHyjmTsbfwTjdxLfCeJgF+M74Qc4RFwGMReZdwE85mzDe4Wx
Op7PwKt2/y+ha6EG3sBbj5ekdwEH0L9AFXzP2A5bO4r12kOHkKsb1c86xnYz
1gzvY/QX6C3wNaSz1pd4p9E1WguG4l1lXgNsZOwzvMF476I3oweh/2PsJtTD
WdhgY43KC92TM+gFt8M44i/hXYTLEOg+4GXCceachBNwgLEhvjuPT9Bh7Dcc
rtqcQt/Vseq5AB2OV629Qw1M1HvFa0Rfg38C926q7KyOwnBi/tYY+jo0wRi8
qaw5Bcp0P60udddK0BP1XqEEkvGSIMXGdP9Uv4M0BwZbXaYoFrJD7j7ctP21
Q8dBJ7gRuH6ViE6GJOtNQ5kzBGZZ71G9xcMC/R6MtHpT/Y5VL0QXED/O7nGS
rZdud70z3jz0Qt/lqFy7QGcYi+cxVsVeRhKXA6PgYes5mdbPFqNL1avhHquz
UrxCnieEXH2ozvK1byi2OpqJVwyzrJfk2trlvutbi2y9KXiTddZWv+qTeg95
yhHyY1x+yrMo5Pqq+oH2V4F+CB60vruK8ZfoL0/z/BRU4P1oNar3/xP6Z6iE
3/B+hz8hi7FDeGfRI313PjqnYei9ePthH3wTuBqsRG9DfwfbVbPW91J91xfU
HzbjfWV19qlqSfUHn8MW+60c+91z6HqoM2+regZ6F2y3upwArcgpFlrDlcDV
R1t0G4i22jqPF4UOQXOrwQ/w/rA8P0R/BIfhEt5FOA+jfFfXqu8WIZej+otq
9Rh6L3of7A9cDTbTdxJugz2qK+Zdi3R9RnmnEZMPYYy31HfZ7lqItSNVG7au
aj8bXY0+A7WqWetrv6IPw0HrneoJ6g2Vlk8suq3uPsSHXF/QXib57jt+C90E
nr5bjHfXnQu5XqEanExcPHoU5CoX4qrJ4RS8xvg6fiORmDetB5+2HJVrsvoi
3g7YCesD945i7Oz1DhqUQ+ByUm4X7Jz1TR5n31B9S3vxu8fUuxiPY3+9IQFy
ibuCdxUadF+JCSc2DJpZD9C3W+d3ivEWPEfCQeJimB9AR7hsc/Ub6n3qgY0w
2ndn0MP+p9H/NucC9y3LRG8g5p0I18NOwHE4afvUXJ3Be+hNsBHeCtye9XtH
0EdVZ/C6neVf9m3RN6YW7xZeHvF1qofA3Rf1pFp7rg9cDe6xWlBNfIv3P95I
TZ8=
            "]], 
           Polygon[{{4102, 4101, 3157, 1569, 1579, 3159}}]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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

            "]], 
           Polygon[CompressedData["
1:eJxFmHlwltUVxt8X4X3hfl/1YtVWnXbGOm2nddppp2Onm522U6e1U9vRaV3r
giK1bthdq4JUWxEV2XdCSAgkBAiBBAIECIEIgbAHAoQdZJGiIAIVivT5eU6n
f5z57nPP/e57l3Oec8697qG+tz/VJUmS29Ik6arfHSFJWtQu5EnSEJNksXC9
8JksSSqFP5CckswrJsl8yWm1f6Wx7Rrzb43dIlmu9nmNnyFdVkiSbpIo6Vmw
OZjrrGS62rM0fqbG7xYeI/yO8FHJv9Q+Lsl7Jsnjmn+fxjToe8fU91PhVcL7
NO6s8N3CW4Q/FB4pvENzdUpGq71MfbOkOyQ8MdqaWfvlWssnC/aNn+n/61L7
9gDJaLVf1/g7pTsofEDyntq/0LiRapdJP0T6e9Q3VHMNkUxWu0wyRLJVug7J
ULWXaPw8jd8lPEy4q/bzsObpLemmdg+tYWNqfeguaPxW4QeFuwiXCVcJT9T/
H9D/Dwm3CV8rfbPwAsmX1b5Bsoh74RvMLZmv9jOSOv23XvKs2u/r/xv0//uk
/0j4iPBa4euE1wjvFH5L+FPCy6KNYez9kkTrmSx9pfQjNN990s30+1sk/Dfh
gZmdHWf4onSt6rsmt/WuVnuY+iZLN1hj7oq2J/Y2QTJOcnc0HWNe0tjx3j+K
OSX3Sl+p3yrJXMkejVmpsZ/R/G9Jt0JyVW7rb1F7tPTl0o/V2PvddvtItzc1
Oxgi/aTU5uc7D0Yby3+el3699EvU/qz+0yZd72hrZc2TJXXS10q/Se03pXtY
Uq52meQhxkpfIX2FcB/h30nWqt0m+a3avSST1B6vMcM1tntPs3lsfYGkQX1z
pdvPGI1tF24WPi08VXhQsP8yxyPCc4RrUvsG38InNwvflpuvlvh6Vkg/UHiE
3wfrfYzxkjs19i7JOfdHfONLwpuEV0k+p/YK9XVw9tHOhjNah+0Kv6a5BmXm
L23qWyzdMeEp0q2XfFH9X5CsVbsvc0rXKvl9NB+GS+AUfLtFeFFq/jxYeJpw
dWr3/xS2IzzBz/dx7l94ofB67FB4r+Rbmuvbkv1qvyBpkG6BpL9/D+74rvR7
hAvyxyAp6A6KkvHST5G+UeNflP5t4dXCt2v8TuEa55cW6V/y82b9N0rfKbw5
2l7Zc7vaXTT3NunvEN4hvE3yc7VvlWxXe67bU63m+4PwBj/v6yUb1f6HpEm6
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
1cC1Hk9Z338Byld6Tg==
            "]], 
           Polygon[CompressedData["
1:eJw1lnlQV1UYhq+lmD9u9SMdNSvLlpn2fd+zfZvKxl1LzX2vZirLXQQVAcUF
hRSDFEQQoRQBTU1l0VwQ9xXJyg0XUlRQ7HnnfP3xzLz3/b5z7rnnfOec26rH
kDaDr/E8LxwaQGbQ8y6FeF6873mbAp63GZai+zb0vEfgYThLThV8iP4A3oPF
5AzHW0XbNLWBZTAd7zBeProQiuArvGy8JZABY2kbjbcDPRldQM4KiMXbhlcG
eyCaWBL+XJhAbIP6QA9EL0CPJj4IPRiGwhD40vqNIpaIrkD/CcdgCl4MHEAf
goMwjZwE+pwN8yEf7we8JeS14zs7QHuoxrs+lDb1PK8Tzx2hhvxw37X5jvgw
+B6m453Em4OeC0lwBN6kzRvQGjJ8l1dJ3mk4BeHkVNPnJ8T7wX7e5fPOw/jl
+hZ4BT+ddtPgOG3m4aXAzxBF20nQS8/EZqETybuBNo/DE7CC2CS8LTbPmu8o
vAl4RegSKIaJQfeOE+gLUA2T8GbjeVp/dJbmCWZo3aG/rcso363XOvR62Kj+
8GYqF+KtRmLxMmmXAbmw39ajDL0NKuBB3rUUr7d900itK/6PVmtaW61xufXX
x+pE7+uL7mdjrkc/DSEEfgm6elPdxdk86ts0l0fRU/GSbV5noWvwzsF51S9e
J4hFj7Pv1vePVp94K2EtRNBuLP4YaE8sWjWCl4oOMoYw7Su8GXg55GTDmoCr
G9XBQkiDdNufM612NUdT8KZCHIzDy8XLg+XwDV4M7EPvhd22j7S+hejxxCIg
UrWqGtTeV//QBS+VMSyASMtXHXymedC+0BoSiw+4/bsLbydst/3Wwb5zFPGp
mlt9P97v/8+Hxgv56MF8f6Mwz2tGfTcPdeuZaPOo/EXoneiPyMsi/xzP5+EA
3jN4adpjPFcG3Bl2lTZ1cNHm6mu8rehSyLQzZz9eG9p+Co/BAt/NwTTiiyEL
upKzlz73QAqxe8nbZXVQS/wKXNb48MbgpaMHBN0ZpbNqA5RAKQRou1I1Cq+h
X4WXbf+uwWuGbgpNYI7v8rS/F6FP0/5MwJ0br+OdQNfCZdvTN+I1hptgvvZd
0NWn6vSM1VUS3Eb8dmgJRdpD9k1b0aU6b827D+8BuN++V2fEZvqpgn91Tmu9
tSYwj9gd5BXjTdTZDN00B9q/Vh+qk854OTqj0N0tPtx3Z22C3TW6c3bDrTY+
jVl6HXo9FKoe4Ba8FtAc5pKzNui+XXNws3n78J5CPwmP2vrqHG+L3k1sj9YW
NsHdeMn6RvSWoDu7khlfCqTa3fKTfWeJzhTYCON15kNHOwOGkbOV5y3wh/V7
AP03+i/4x9Yvw/prhb4L7rT5S/BdnSxD58JyqISTcAret7u2se4B7oMBPPeH
XN/dPQV25qywe2sh3vM2B5qLQ3i12sPortAZslU/9HeI/rrx/Dl4PF8HDaFJ
qNufAfZnJrlvo9+Fd1SHQbcPtR8bkdfH/g+0D7UfLwTcfOu+rLLxn8W7AnVw
GMrhFLxl/ek/Yg3jXw2/6Yzy3XsVP0rsGByHkTACRgXdf4fy8tF5UGDnQqrv
/l80rvqMvwGEQFPGWsH3DsIfCHm+W6+Wtj/usXrQ+fIc+ll42vqbDw+h43Q3
hLj7aDXjXwXFAXcf6k5Rnu6rMvR22GHr8QLeS/AiHMQLYyzljKU3z710J4W6
c3yZ/SPpX+lb8uox7p7Ev4Duegc5Lcg9QtuPeR6q+9x369sFnYO+lnh9uIR3
EWospjWPZKwR0M7O8xj0VXQdeLyrh70jGn8yzAm4862tjUXxX31XI6qVODvn
e+ruJG8Esf8AmvSeJg==
            "]], 
           
           Polygon[{{4286, 4285, 3226, 1803, 1813, 
            3228}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0uA1EYgOFvpq2ZqdqwrI2kNgQ7liyVlrY7WxfQxl/8/1wCCTciXIUb
YVWJPZ4hmXfeNzlzvpwzc/ujwTCJiD18iHW+TyMesKmfuc+NPGISPV3nArs6
5ww7usZVdHWFU3R0kpcfRmzTTxaxxd/c5jfzN/iVX7Cmn/gRy/qIDzGv+9zD
rF4p1zGjp7iBuv5yh/I+B+an5X6u8DGfoKpP+Qw1fc4XmNCXfAVPXHvdZH/H
jlu+Q6ELQ6d5gRfR1B3uoqWHPMKSHjvIJ1b1e/L/f38B1Wsfog==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MkuA1AUgOGjNt00iKmlFl6DhHdoqZoS09KwYlkJC5a61OqkplfwIqw0
8RQSNr6bLv78f25uzj25iwdnpdORiNjEZybijmujEZe4111+5LdsxCt6+oWf
0dVP3EdH99IZ2rqTjJZu8UNCN7nJDW7wu/l17qd3cKuv+SrtoPd5Dxd6lVdw
ohe4iCP9Z+9fbOtvLnHO/DKP8RqP8wTW9SRPoaKneQYbepbzqOoCz2WH/zLP
RWzpH/MPOe/tAo71Ei/jXO/wLmr6y90BbvRHZvi//9jcK/I=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Mkug1EcxuG/VIxXYUfCVo0x1IqExK5ba+ONCNfQUtWKoS02rFoWJLVk
SSIx1dQb8CQWvzzv4ss5J1/P0triaktEpFVLRDxyuTViRW/2Jpuc6YxI6dee
5pR+7ElO6Nse55i+7FGO6NMe5pAadpIfHOQ7c85/4ja39GBvcF139gLndW0P
sF+Xdje7VLFfvftFRbvODPMdEVkWuMMiD7RrH/JIOfuYJ9qzSywrb1d4qn37
jOcq2M/OL7PN3e26sHvZpyt7lnOq2ze+vdW9XU38/98/eTE3Qw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0EsuA1AYQOFf0kpMmCE60SFDJkSLqgbxLhOaVGIBbEBYRTfCiKSbUIq0
HototfVIfI3ByTk3N/nvI316XjwbiIgj3CQiZiyOkxElLOgLXuWPoYh35PUb
v2JFN7mBnH7hZyzrJ65jST/yAxZ1jbN8zxmumD/LV3yJaX3CZaR1ljMY1yme
wIjuuWsXg/2zuI5fb6hyiwvmt3mNP3mdN9DRm7yFrt7mHfT0Lu/hS+9zEd/6
gA/xo2vmJ53Z4jaG9ag7jfXRczyPSX1r/w5T+jrx/79/g6cwpg==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Esuw1EUgPHTxF/ULpCwEaWtx8CAGBGDRid9oKJFJAy9HwtgRGIVklpI
1aP1XoJfY/Dl+25u7snJHVopz5VSEbGImyRi32G8PyKDQ13gK94djNjBpd7m
Bi50nbdwrje5hjO9wes41WtcxYmu8DGX+Yj3zD/gIq+ioXOcRVWP8SiKOs0D
WNZvdn3Fgn7kJmb1PWe4lY6Y4DZP8jO/INt7yx3kdJffkdcf/Ikp/cXfmNY/
/IsZ/WD+PD9xG0u6z05Jb389zCOo6Fv3d6jr6+T/f/8AU3sxzw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DsvQ3Ecx+GfpU3QKuJSmzdAwhuRmqw2S72DBlG3MlRSd0YGiRrZGDWV
uIzul5mEN+A5MXzyfM8Z/vmfMzg5XSi2RMSEKqmIOw9D6YhhPdhj/ORAW0Re
H3Y/+/Ru97JHb3Y3u/RqdzKnF7uDWT3bGT6xnY+ccv49x1lQwx7liC6Tc5jT
uf3rfj86tW95oyO7zhMd2DXWWGqN2OAMNznLOW3Z8yxr217gonbsJS5r115h
RXv2Kte0bx87/5BNXqtuf/FbZ8l3uWtGF3bVu3VdJeel/v/vH3+LMrI=
          "]]}, {
         Line[{2, 487, 11, 500, 501, 20, 526, 527, 29, 560, 561, 38, 594, 595,
           47, 628, 629, 56, 662, 663, 65, 694, 74}], 
         Line[{1905, 485, 1922, 3268, 2845, 3269, 1940, 3291, 2853, 3290, 
          1958, 3317, 2861, 3318, 1975, 3343, 2870, 3342, 1990, 3366, 2879, 
          3367, 2007, 3396, 2890, 3395, 2026, 3421, 2024, 2046}], 
         Line[{1907, 486, 1923, 504, 3271, 1941, 3294, 2854, 3295, 1959, 3321,
           2864, 3320, 1976, 3345, 2873, 3346, 1991, 3371, 2882, 3370, 2008, 
          3398, 2893, 3399, 2027, 3423, 2028, 2047}], 
         Line[{1909, 2843, 3264, 1925, 2848, 3274, 3275, 1943, 3302, 2856, 
          3300, 1961, 3328, 2866, 3326, 1978, 608, 3351, 1993, 3376, 2885, 
          3379, 2010, 3406, 2896, 3404, 2030, 3429, 2034, 2049}], 
         Line[{1912, 2844, 3266, 1928, 2850, 3284, 3286, 1946, 3313, 2859, 
          3311, 1964, 3334, 2868, 3339, 1980, 2877, 3360, 3362, 1996, 3391, 
          2888, 3386, 2012, 3413, 2898, 3418, 2032, 3435, 2040, 2051}], 
         Line[{1914, 1921, 3270, 1930, 1939, 3292, 3293, 1949, 3288, 2862, 
          3319, 1967, 3315, 2871, 3344, 1982, 3341, 2881, 3369, 1998, 3364, 
          2891, 3397, 2015, 3422, 2900, 3394, 2036, 3420, 2907, 2053}], 
         Line[{1916, 1926, 3273, 1933, 3299, 2855, 3298, 1952, 3325, 2865, 
          3324, 1969, 3348, 2874, 3350, 1985, 3375, 2883, 3374, 2001, 3401, 
          2894, 3403, 2018, 3425, 2901, 3427, 2038, 3440, 2909, 2056}], 
         Line[{1918, 1931, 3278, 1935, 1950, 3305, 3307, 1954, 578, 3331, 
          1971, 3356, 2876, 3355, 1987, 1999, 3381, 3383, 2003, 3411, 2897, 
          3410, 2021, 3431, 2903, 3433, 2042, 3442, 2910, 2058}], 
         Line[{1920, 3261, 2852, 1938, 1955, 3279, 3281, 1957, 3308, 2869, 
          3337, 1974, 620, 3332, 1989, 3357, 2889, 3389, 2006, 688, 3390, 
          2023, 3417, 2905, 3438, 2045, 3444, 2912, 2060}], 
         Line[{2048, 2033, 3428, 2029, 2013, 3407, 3405, 2009, 3378, 3377, 
          2884, 1992, 609, 3352, 1977, 1965, 3329, 3327, 1960, 1947, 3303, 
          3301, 1942, 511, 3276, 1924, 1906, 3263, 1908}], 
         Line[{2050, 2039, 3434, 2031, 2019, 3414, 3412, 2011, 3385, 3384, 
          2887, 1995, 3361, 2878, 3358, 1979, 3338, 2867, 3333, 1963, 3310, 
          3309, 2858, 1945, 3285, 2851, 3282, 1927, 1910, 3265, 1911}], 
         Line[{2052, 2906, 3419, 2035, 3393, 3392, 2025, 2014, 2892, 3365, 
          3363, 1997, 3368, 2880, 3340, 1981, 2872, 3316, 3314, 1966, 2863, 
          3289, 3287, 1948, 529, 3267, 1929, 2846, 3262, 1913}], 
         Line[{2055, 2908, 3439, 2037, 2902, 3426, 3424, 2017, 2895, 3402, 
          3400, 2000, 3373, 3372, 1994, 1984, 2875, 3349, 3347, 1968, 3323, 
          3322, 1962, 1951, 3297, 3296, 1944, 1932, 2847, 3272, 1915}], 
         Line[{2057, 3441, 2054, 2041, 2904, 3432, 3430, 2020, 3409, 3408, 
          2016, 2002, 3382, 2886, 3380, 1986, 3354, 3353, 1983, 1970, 579, 
          3330, 1953, 3306, 2857, 3304, 1934, 2849, 3277, 1917}], 
         Line[{2059, 2911, 3443, 2044, 3437, 3436, 2043, 2022, 2899, 3416, 
          3415, 2005, 3388, 3387, 2004, 1988, 621, 3359, 1973, 3336, 3335, 
          1972, 1956, 3280, 2860, 3312, 1937, 3283, 1936, 1919}], 
         Line[{83, 725, 92, 738, 739, 101, 764, 765, 110, 798, 799, 119, 832, 
          833, 128, 866, 867, 137, 900, 901, 146, 932, 155}], 
         Line[{2061, 723, 2078, 3452, 2915, 3453, 2096, 3475, 2923, 3474, 
          2114, 3501, 2931, 3502, 2131, 3527, 2940, 3526, 2146, 3550, 2949, 
          3551, 2163, 3580, 2960, 3579, 2182, 3605, 2180, 2202}], 
         Line[{2063, 724, 2079, 742, 3455, 2097, 3478, 2924, 3479, 2115, 3505,
           2934, 3504, 2132, 3529, 2943, 3530, 2147, 3555, 2952, 3554, 2164, 
          3582, 2963, 3583, 2183, 3607, 2184, 2203}], 
         Line[{2065, 2913, 3448, 2081, 2918, 3458, 3459, 2099, 3486, 2926, 
          3484, 2117, 3512, 2936, 3510, 2134, 846, 3535, 2149, 3560, 2955, 
          3563, 2166, 3590, 2966, 3588, 2186, 3613, 2190, 2205}], 
         Line[{2068, 2914, 3450, 2084, 2920, 3468, 3470, 2102, 3497, 2929, 
          3495, 2120, 3518, 2938, 3523, 2136, 2947, 3544, 3546, 2152, 3575, 
          2958, 3570, 2168, 3597, 2968, 3602, 2188, 3619, 2196, 2207}], 
         Line[{2070, 2077, 3454, 2086, 2095, 3476, 3477, 2105, 3472, 2932, 
          3503, 2123, 3499, 2941, 3528, 2138, 3525, 2951, 3553, 2154, 3548, 
          2961, 3581, 2171, 3606, 2970, 3578, 2192, 3604, 2977, 2209}], 
         Line[{2072, 2082, 3457, 2089, 3483, 2925, 3482, 2108, 3509, 2935, 
          3508, 2125, 3532, 2944, 3534, 2141, 3559, 2953, 3558, 2157, 3585, 
          2964, 3587, 2174, 3609, 2971, 3611, 2194, 3624, 2979, 2212}], 
         Line[{2074, 2087, 3462, 2091, 2106, 3489, 3491, 2110, 816, 3515, 
          2127, 3540, 2946, 3539, 2143, 2155, 3565, 3567, 2159, 3595, 2967, 
          3594, 2177, 3615, 2973, 3617, 2198, 3626, 2980, 2214}], 
         Line[{2076, 3445, 2922, 2094, 2111, 3463, 3465, 2113, 3492, 2939, 
          3521, 2130, 858, 3516, 2145, 3541, 2959, 3573, 2162, 926, 3574, 
          2179, 3601, 2975, 3622, 2201, 3628, 2982, 2216}], 
         Line[{2204, 2189, 3612, 2185, 2169, 3591, 3589, 2165, 3562, 3561, 
          2954, 2148, 847, 3536, 2133, 2121, 3513, 3511, 2116, 2103, 3487, 
          3485, 2098, 749, 3460, 2080, 2062, 3447, 2064}], 
         Line[{2206, 2195, 3618, 2187, 2175, 3598, 3596, 2167, 3569, 3568, 
          2957, 2151, 3545, 2948, 3542, 2135, 3522, 2937, 3517, 2119, 3494, 
          3493, 2928, 2101, 3469, 2921, 3466, 2083, 2066, 3449, 2067}], 
         Line[{2208, 2976, 3603, 2191, 3577, 3576, 2181, 2170, 2962, 3549, 
          3547, 2153, 3552, 2950, 3524, 2137, 2942, 3500, 3498, 2122, 2933, 
          3473, 3471, 2104, 767, 3451, 2085, 2916, 3446, 2069}], 
         Line[{2211, 2978, 3623, 2193, 2972, 3610, 3608, 2173, 2965, 3586, 
          3584, 2156, 3557, 3556, 2150, 2140, 2945, 3533, 3531, 2124, 3507, 
          3506, 2118, 2107, 3481, 3480, 2100, 2088, 2917, 3456, 2071}], 
         Line[{2213, 3625, 2210, 2197, 2974, 3616, 3614, 2176, 3593, 3592, 
          2172, 2158, 3566, 2956, 3564, 2142, 3538, 3537, 2139, 2126, 817, 
          3514, 2109, 3490, 2927, 3488, 2090, 2919, 3461, 2073}], 
         Line[{2215, 2981, 3627, 2200, 3621, 3620, 2199, 2178, 2969, 3600, 
          3599, 2161, 3572, 3571, 2160, 2144, 859, 3543, 2129, 3520, 3519, 
          2128, 2112, 3464, 2930, 3496, 2093, 3467, 2092, 2075}], 
         Line[{164, 963, 173, 976, 977, 182, 1002, 1003, 191, 1036, 1037, 200,
           1070, 1071, 209, 1104, 1105, 218, 1138, 1139, 227, 1170, 236}], 
         Line[{2217, 961, 2234, 3636, 2985, 3637, 2252, 3659, 2993, 3658, 
          2270, 3685, 3001, 3686, 2287, 3711, 3010, 3710, 2302, 3734, 3019, 
          3735, 2319, 3764, 3030, 3763, 2338, 3789, 2336, 2358}], 
         Line[{2219, 962, 2235, 980, 3639, 2253, 3662, 2994, 3663, 2271, 3689,
           3004, 3688, 2288, 3713, 3013, 3714, 2303, 3739, 3022, 3738, 2320, 
          3766, 3033, 3767, 2339, 3791, 2340, 2359}], 
         Line[{2221, 2983, 3632, 2237, 2988, 3642, 3643, 2255, 3670, 2996, 
          3668, 2273, 3696, 3006, 3694, 2290, 1084, 3719, 2305, 3744, 3025, 
          3747, 2322, 3774, 3036, 3772, 2342, 3797, 2346, 2361}], 
         Line[{2224, 2984, 3634, 2240, 2990, 3652, 3654, 2258, 3681, 2999, 
          3679, 2276, 3702, 3008, 3707, 2292, 3017, 3728, 3730, 2308, 3759, 
          3028, 3754, 2324, 3781, 3038, 3786, 2344, 3803, 2352, 2363}], 
         Line[{2226, 2233, 3638, 2242, 2251, 3660, 3661, 2261, 3656, 3002, 
          3687, 2279, 3683, 3011, 3712, 2294, 3709, 3021, 3737, 2310, 3732, 
          3031, 3765, 2327, 3790, 3040, 3762, 2348, 3788, 3047, 2365}], 
         Line[{2228, 2238, 3641, 2245, 3667, 2995, 3666, 2264, 3693, 3005, 
          3692, 2281, 3716, 3014, 3718, 2297, 3743, 3023, 3742, 2313, 3769, 
          3034, 3771, 2330, 3793, 3041, 3795, 2350, 3808, 3049, 2368}], 
         Line[{2230, 2243, 3646, 2247, 2262, 3673, 3675, 2266, 1054, 3699, 
          2283, 3724, 3016, 3723, 2299, 2311, 3749, 3751, 2315, 3779, 3037, 
          3778, 2333, 3799, 3043, 3801, 2354, 3810, 3050, 2370}], 
         Line[{2232, 3629, 2992, 2250, 2267, 3647, 3649, 2269, 3676, 3009, 
          3705, 2286, 1096, 3700, 2301, 3725, 3029, 3757, 2318, 1164, 3758, 
          2335, 3785, 3045, 3806, 2357, 3812, 3052, 2372}], 
         Line[{2360, 2345, 3796, 2341, 2325, 3775, 3773, 2321, 3746, 3745, 
          3024, 2304, 1085, 3720, 2289, 2277, 3697, 3695, 2272, 2259, 3671, 
          3669, 2254, 987, 3644, 2236, 2218, 3631, 2220}], 
         Line[{2362, 2351, 3802, 2343, 2331, 3782, 3780, 2323, 3753, 3752, 
          3027, 2307, 3729, 3018, 3726, 2291, 3706, 3007, 3701, 2275, 3678, 
          3677, 2998, 2257, 3653, 2991, 3650, 2239, 2222, 3633, 2223}], 
         Line[{2364, 3046, 3787, 2347, 3761, 3760, 2337, 2326, 3032, 3733, 
          3731, 2309, 3736, 3020, 3708, 2293, 3012, 3684, 3682, 2278, 3003, 
          3657, 3655, 2260, 1005, 3635, 2241, 2986, 3630, 2225}], 
         Line[{2367, 3048, 3807, 2349, 3042, 3794, 3792, 2329, 3035, 3770, 
          3768, 2312, 3741, 3740, 2306, 2296, 3015, 3717, 3715, 2280, 3691, 
          3690, 2274, 2263, 3665, 3664, 2256, 2244, 2987, 3640, 2227}], 
         Line[{2369, 3809, 2366, 2353, 3044, 3800, 3798, 2332, 3777, 3776, 
          2328, 2314, 3750, 3026, 3748, 2298, 3722, 3721, 2295, 2282, 1055, 
          3698, 2265, 3674, 2997, 3672, 2246, 2989, 3645, 2229}], 
         Line[{2371, 3051, 3811, 2356, 3805, 3804, 2355, 2334, 3039, 3784, 
          3783, 2317, 3756, 3755, 2316, 2300, 1097, 3727, 2285, 3704, 3703, 
          2284, 2268, 3648, 3000, 3680, 2249, 3651, 2248, 2231}], 
         Line[{245, 1201, 254, 1214, 1215, 263, 1240, 1241, 272, 1274, 1275, 
          281, 1308, 1309, 290, 1342, 1343, 299, 1376, 1377, 308, 1408, 317}], 
         Line[{2373, 1199, 2390, 3820, 3055, 3821, 2408, 3843, 3063, 3842, 
          2426, 3869, 3071, 3870, 2443, 3895, 3080, 3894, 2458, 3918, 3089, 
          3919, 2475, 3948, 3100, 3947, 2494, 3973, 2492, 2514}], 
         Line[{2375, 1200, 2391, 1218, 3823, 2409, 3846, 3064, 3847, 2427, 
          3873, 3074, 3872, 2444, 3897, 3083, 3898, 2459, 3923, 3092, 3922, 
          2476, 3950, 3103, 3951, 2495, 3975, 2496, 2515}], 
         Line[{2377, 3053, 3816, 2393, 3058, 3826, 3827, 2411, 3854, 3066, 
          3852, 2429, 3880, 3076, 3878, 2446, 1322, 3903, 2461, 3928, 3095, 
          3931, 2478, 3958, 3106, 3956, 2498, 3981, 2502, 2517}], 
         Line[{2380, 3054, 3818, 2396, 3060, 3836, 3838, 2414, 3865, 3069, 
          3863, 2432, 3886, 3078, 3891, 2448, 3087, 3912, 3914, 2464, 3943, 
          3098, 3938, 2480, 3965, 3108, 3970, 2500, 3987, 2508, 2519}], 
         Line[{2382, 2389, 3822, 2398, 2407, 3844, 3845, 2417, 3840, 3072, 
          3871, 2435, 3867, 3081, 3896, 2450, 3893, 3091, 3921, 2466, 3916, 
          3101, 3949, 2483, 3974, 3110, 3946, 2504, 3972, 3117, 2521}], 
         Line[{2384, 2394, 3825, 2401, 3851, 3065, 3850, 2420, 3877, 3075, 
          3876, 2437, 3900, 3084, 3902, 2453, 3927, 3093, 3926, 2469, 3953, 
          3104, 3955, 2486, 3977, 3111, 3979, 2506, 3992, 3119, 2524}], 
         Line[{2386, 2399, 3830, 2403, 2418, 3857, 3859, 2422, 1292, 3883, 
          2439, 3908, 3086, 3907, 2455, 2467, 3933, 3935, 2471, 3963, 3107, 
          3962, 2489, 3983, 3113, 3985, 2510, 3994, 3120, 2526}], 
         Line[{2388, 3813, 3062, 2406, 2423, 3831, 3833, 2425, 3860, 3079, 
          3889, 2442, 1334, 3884, 2457, 3909, 3099, 3941, 2474, 1402, 3942, 
          2491, 3969, 3115, 3990, 2513, 3996, 3122, 2528}], 
         Line[{2516, 2501, 3980, 2497, 2481, 3959, 3957, 2477, 3930, 3929, 
          3094, 2460, 1323, 3904, 2445, 2433, 3881, 3879, 2428, 2415, 3855, 
          3853, 2410, 1225, 3828, 2392, 2374, 3815, 2376}], 
         Line[{2518, 2507, 3986, 2499, 2487, 3966, 3964, 2479, 3937, 3936, 
          3097, 2463, 3913, 3088, 3910, 2447, 3890, 3077, 3885, 2431, 3862, 
          3861, 3068, 2413, 3837, 3061, 3834, 2395, 2378, 3817, 2379}], 
         Line[{2520, 3116, 3971, 2503, 3945, 3944, 2493, 2482, 3102, 3917, 
          3915, 2465, 3920, 3090, 3892, 2449, 3082, 3868, 3866, 2434, 3073, 
          3841, 3839, 2416, 1243, 3819, 2397, 3056, 3814, 2381}], 
         Line[{2523, 3118, 3991, 2505, 3112, 3978, 3976, 2485, 3105, 3954, 
          3952, 2468, 3925, 3924, 2462, 2452, 3085, 3901, 3899, 2436, 3875, 
          3874, 2430, 2419, 3849, 3848, 2412, 2400, 3057, 3824, 2383}], 
         Line[{2525, 3993, 2522, 2509, 3114, 3984, 3982, 2488, 3961, 3960, 
          2484, 2470, 3934, 3096, 3932, 2454, 3906, 3905, 2451, 2438, 1293, 
          3882, 2421, 3858, 3067, 3856, 2402, 3059, 3829, 2385}], 
         Line[{2527, 3121, 3995, 2512, 3989, 3988, 2511, 2490, 3109, 3968, 
          3967, 2473, 3940, 3939, 2472, 2456, 1335, 3911, 2441, 3888, 3887, 
          2440, 2424, 3832, 3070, 3864, 2405, 3835, 2404, 2387}], 
         Line[{326, 1439, 335, 1452, 1453, 344, 1478, 1479, 353, 1512, 1513, 
          362, 1546, 1547, 370, 1576, 1577, 379, 1610, 1611, 388, 1642, 397}], 
         Line[{2529, 1437, 2546, 4004, 3125, 4005, 2564, 4027, 3133, 4026, 
          2582, 4051, 3141, 4052, 2599, 4079, 3152, 4078, 2615, 4077, 3158, 
          4100, 2632, 4132, 3169, 4131, 2651, 4157, 2649, 2671}], 
         Line[{2531, 1438, 2547, 1456, 4007, 2565, 4030, 3134, 4031, 2583, 
          4055, 3144, 4054, 2600, 4083, 3155, 4084, 2616, 4107, 3161, 4106, 
          2633, 4134, 3172, 4135, 2652, 4159, 2653, 2672}], 
         Line[{2533, 3123, 4000, 2549, 3128, 4010, 4011, 2567, 4038, 3136, 
          4036, 2585, 4062, 3146, 4060, 2602, 1560, 4089, 2618, 4112, 3164, 
          4115, 2635, 4142, 3175, 4140, 2655, 4165, 2659, 2674}], 
         Line[{2536, 3124, 4002, 2552, 3130, 4020, 4022, 2570, 4049, 3139, 
          4047, 2588, 4068, 3148, 4074, 2605, 4101, 3157, 4096, 2621, 4127, 
          3167, 4122, 2637, 4149, 3177, 4154, 2657, 4171, 2665, 2676}], 
         Line[{2538, 2545, 4006, 2554, 2563, 4028, 4029, 2573, 4024, 3142, 
          4053, 2591, 4050, 3150, 4076, 2607, 4103, 3160, 4105, 2623, 4098, 
          3170, 4133, 2640, 4158, 3179, 4130, 2661, 4156, 3186, 2678}], 
         Line[{2540, 2550, 4009, 2557, 4035, 3135, 4034, 2576, 4059, 3145, 
          4058, 2593, 4081, 3153, 4085, 2609, 4111, 3162, 4110, 2626, 4137, 
          3173, 4139, 2643, 4161, 3180, 4163, 2663, 4176, 3188, 2681}], 
         Line[{2542, 2555, 4014, 2559, 2574, 4041, 4043, 2578, 1530, 4065, 
          2595, 4091, 3156, 4088, 2611, 2624, 4117, 4119, 2628, 4147, 3176, 
          4146, 2646, 4167, 3182, 4169, 2667, 4178, 3189, 2683}], 
         Line[{2544, 3997, 3132, 2562, 2579, 4015, 4017, 2581, 4044, 3151, 
          4071, 2598, 1566, 4066, 2614, 4093, 3168, 4125, 2631, 1636, 4126, 
          2648, 4153, 3184, 4174, 2670, 4180, 3191, 2685}], 
         Line[{2673, 2658, 4164, 2654, 2638, 4143, 4141, 2634, 4114, 4113, 
          3163, 2617, 1561, 4090, 2601, 2589, 4063, 4061, 2584, 2571, 4039, 
          4037, 2566, 1463, 4012, 2548, 2530, 3999, 2532}], 
         Line[{2675, 2664, 4170, 2656, 2644, 4150, 4148, 2636, 4121, 4120, 
          3166, 2620, 4095, 4094, 2612, 2604, 4073, 3147, 4067, 2587, 4046, 
          4045, 3138, 2569, 4021, 3131, 4018, 2551, 2534, 4001, 2535}], 
         Line[{2677, 3185, 4155, 2660, 4129, 4128, 2650, 2639, 3171, 4099, 
          4097, 2622, 4104, 3159, 4102, 2606, 4075, 4072, 3149, 2590, 3143, 
          4025, 4023, 2572, 1481, 4003, 2553, 3126, 3998, 2537}], 
         Line[{2680, 3187, 4175, 2662, 3181, 4162, 4160, 2642, 3174, 4138, 
          4136, 2625, 4109, 4108, 2619, 2608, 3154, 4082, 4080, 2592, 4057, 
          4056, 2586, 2575, 4033, 4032, 2568, 2556, 3127, 4008, 2539}], 
         Line[{2682, 4177, 2679, 2666, 3183, 4168, 4166, 2645, 4145, 4144, 
          2641, 2627, 4118, 3165, 4116, 2610, 4087, 4086, 2603, 2594, 1531, 
          4064, 2577, 4042, 3137, 4040, 2558, 3129, 4013, 2541}], 
         Line[{2684, 3190, 4179, 2669, 4173, 4172, 2668, 2647, 3178, 4152, 
          4151, 2630, 4124, 4123, 2629, 2613, 1567, 4092, 2597, 4070, 4069, 
          2596, 2580, 4016, 3140, 4048, 2561, 4019, 2560, 2543}], 
         Line[{406, 1673, 415, 1686, 1687, 424, 1712, 1713, 433, 1746, 1747, 
          442, 1780, 1781, 450, 1810, 1811, 459, 1844, 1845, 468, 1876, 477}], 
         Line[{2686, 1671, 2703, 4188, 3194, 4189, 2721, 4211, 3202, 4210, 
          2739, 4235, 3210, 4236, 2756, 4263, 3221, 4262, 2772, 4261, 3227, 
          4284, 2789, 4316, 3238, 4315, 2808, 4341, 2806, 2828}], 
         Line[{2688, 1672, 2704, 1690, 4191, 2722, 4214, 3203, 4215, 2740, 
          4239, 3213, 4238, 2757, 4267, 3224, 4268, 2773, 4291, 3230, 4290, 
          2790, 4318, 3241, 4319, 2809, 4343, 2810, 2829}], 
         Line[{2690, 3192, 4184, 2706, 3197, 4194, 4195, 2724, 4222, 3205, 
          4220, 2742, 4246, 3215, 4244, 2759, 1794, 4273, 2775, 4296, 3233, 
          4299, 2792, 4326, 3244, 4324, 2812, 4349, 2816, 2831}], 
         Line[{2693, 3193, 4186, 2709, 3199, 4204, 4206, 2727, 4233, 3208, 
          4231, 2745, 4252, 3217, 4258, 2762, 4285, 3226, 4280, 2778, 4311, 
          3236, 4306, 2794, 4333, 3246, 4338, 2814, 4355, 2822, 2833}], 
         Line[{2695, 2702, 4190, 2711, 2720, 4212, 4213, 2730, 4208, 3211, 
          4237, 2748, 4234, 3219, 4260, 2764, 4287, 3229, 4289, 2780, 4282, 
          3239, 4317, 2797, 4342, 3248, 4314, 2818, 4340, 3255, 2835}], 
         Line[{2697, 2707, 4193, 2714, 4219, 3204, 4218, 2733, 4243, 3214, 
          4242, 2750, 4265, 3222, 4269, 2766, 4295, 3231, 4294, 2783, 4321, 
          3242, 4323, 2800, 4345, 3249, 4347, 2820, 4360, 3257, 2838}], 
         Line[{2699, 2712, 4198, 2716, 2731, 4225, 4227, 2735, 1764, 4249, 
          2752, 4275, 3225, 4272, 2768, 2781, 4301, 4303, 2785, 4331, 3245, 
          4330, 2803, 4351, 3251, 4353, 2824, 4362, 3258, 2840}], 
         Line[{2701, 4181, 3201, 2719, 2736, 4199, 4201, 2738, 4228, 3220, 
          4255, 2755, 1800, 4250, 2771, 4277, 3237, 4309, 2788, 1870, 4310, 
          2805, 4337, 3253, 4358, 2827, 4364, 3260, 2842}], 
         Line[{2830, 2815, 4348, 2811, 2795, 4327, 4325, 2791, 4298, 4297, 
          3232, 2774, 1795, 4274, 2758, 2746, 4247, 4245, 2741, 2728, 4223, 
          4221, 2723, 1697, 4196, 2705, 2687, 4183, 2689}], 
         Line[{2832, 2821, 4354, 2813, 2801, 4334, 4332, 2793, 4305, 4304, 
          3235, 2777, 4279, 4278, 2769, 2761, 4257, 3216, 4251, 2744, 4230, 
          4229, 3207, 2726, 4205, 3200, 4202, 2708, 2691, 4185, 2692}], 
         Line[{2834, 3254, 4339, 2817, 4313, 4312, 2807, 2796, 3240, 4283, 
          4281, 2779, 4288, 3228, 4286, 2763, 4259, 4256, 3218, 2747, 3212, 
          4209, 4207, 2729, 1715, 4187, 2710, 3195, 4182, 2694}], 
         Line[{2837, 3256, 4359, 2819, 3250, 4346, 4344, 2799, 3243, 4322, 
          4320, 2782, 4293, 4292, 2776, 2765, 3223, 4266, 4264, 2749, 4241, 
          4240, 2743, 2732, 4217, 4216, 2725, 2713, 3196, 4192, 2696}], 
         Line[{2839, 4361, 2836, 2823, 3252, 4352, 4350, 2802, 4329, 4328, 
          2798, 2784, 4302, 3234, 4300, 2767, 4271, 4270, 2760, 2751, 1765, 
          4248, 2734, 4226, 3206, 4224, 2715, 3198, 4197, 2698}], 
         Line[{2841, 3259, 4363, 2826, 4357, 4356, 2825, 2804, 3247, 4336, 
          4335, 2787, 4308, 4307, 2786, 2770, 1801, 4276, 2754, 4254, 4253, 
          2753, 2737, 4200, 3209, 4232, 2718, 4203, 2717, 2700}]}, {
         Line[{489, 3390, 689, 3416, 683, 681, 3410, 3409, 675, 3403, 673, 
          3402, 667, 3397, 665, 3365, 653, 651, 3386, 3385, 645, 643, 3379, 
          3378, 637, 3370, 635, 629, 625, 3367, 661}], 
         Line[{496, 655, 3389, 3388, 649, 3383, 3382, 647, 641, 639, 3374, 
          3373, 633, 3369, 3368, 631, 619, 3362, 3361, 617, 611, 3351, 609, 
          603, 601, 3346, 595, 3342, 591, 627}], 
         Line[{499, 485, 487, 486, 490, 3263, 491, 3264, 492, 3265, 493, 3266,
           494, 3262, 502, 3270, 503, 3272, 508, 3273, 509, 3277, 514, 3278, 
          515, 3283, 520, 3261, 521}], 
         Line[{18, 1938, 1937, 17, 1935, 1934, 16, 1933, 1932, 15, 1930, 1929,
           14, 1928, 1927, 13, 1925, 1924, 12, 1923, 11, 1922, 10}], 
         Line[{524, 497, 3268, 500, 504, 506, 3276, 510, 3274, 512, 3282, 516,
           3284, 518, 3267, 528, 3292, 530, 3296, 536, 3299, 538, 3304, 544, 
          3305, 546, 3312, 552, 3279, 554}], 
         Line[{555, 3281, 3280, 553, 547, 3307, 3306, 545, 539, 537, 3298, 
          3297, 531, 3293, 529, 519, 3286, 3285, 517, 513, 3275, 511, 507, 
          3271, 505, 501, 498, 3269, 525}], 
         Line[{558, 3291, 522, 526, 532, 3294, 534, 3301, 3302, 540, 542, 
          3309, 548, 3313, 550, 3287, 3288, 562, 564, 3322, 570, 3325, 572, 
          3330, 578, 580, 3335, 586, 3308, 588}], 
         Line[{589, 587, 3337, 3336, 581, 3331, 579, 573, 571, 3324, 3323, 
          565, 3319, 563, 3289, 551, 549, 3311, 3310, 543, 3300, 541, 3303, 
          535, 533, 3295, 527, 3290, 523, 559}], 
         Line[{592, 556, 3317, 560, 3321, 566, 568, 3327, 3328, 574, 576, 
          3333, 3334, 582, 584, 3314, 3315, 596, 598, 3347, 3348, 604, 606, 
          3353, 612, 3356, 614, 3359, 620, 622}], 
         Line[{623, 3332, 621, 615, 613, 3355, 3354, 607, 3350, 605, 3349, 
          599, 3344, 597, 3316, 585, 3339, 3338, 583, 577, 3326, 575, 3329, 
          569, 3320, 567, 561, 557, 3318, 593}], 
         Line[{626, 3343, 590, 594, 600, 3345, 602, 3352, 608, 610, 3358, 616,
           3360, 618, 3340, 3341, 630, 632, 3372, 638, 3375, 640, 3380, 646, 
          3381, 648, 3387, 654, 3357, 495}], 
         Line[{657, 714, 3438, 3437, 710, 3433, 708, 3432, 704, 3427, 702, 
          3426, 698, 696, 3394, 3393, 687, 3418, 685, 3414, 679, 3404, 677, 
          3407, 671, 669, 3399, 663, 3395, 659, 693}], 
         Line[{660, 624, 3366, 628, 3371, 634, 636, 3377, 642, 3376, 644, 
          3384, 650, 3391, 652, 3363, 3364, 664, 666, 3400, 3401, 672, 674, 
          3408, 680, 3411, 682, 3415, 688, 488}], 
         Line[{690, 722, 3444, 3443, 721, 3442, 720, 3441, 719, 718, 3440, 
          3439, 717, 716, 3420, 3419, 712, 711, 3435, 3434, 706, 705, 3429, 
          3428, 700, 699, 3423, 694, 3421, 691, 715}], 
         Line[{692, 3396, 658, 662, 668, 3398, 670, 3405, 3406, 676, 678, 
          3412, 3413, 684, 686, 3392, 695, 3422, 697, 3424, 3425, 701, 703, 
          3430, 3431, 707, 709, 3436, 713, 3417, 656}], 
         Line[{727, 3574, 927, 3600, 921, 919, 3594, 3593, 913, 3587, 911, 
          3586, 905, 3581, 903, 3549, 891, 889, 3570, 3569, 883, 881, 3563, 
          3562, 875, 3554, 873, 867, 863, 3551, 899}], 
         Line[{734, 893, 3573, 3572, 887, 3567, 3566, 885, 879, 877, 3558, 
          3557, 871, 3553, 3552, 869, 857, 3546, 3545, 855, 849, 3535, 847, 
          841, 839, 3530, 833, 3526, 829, 865}], 
         Line[{737, 723, 725, 724, 728, 3447, 729, 3448, 730, 3449, 731, 3450,
           732, 3446, 740, 3454, 741, 3456, 746, 3457, 747, 3461, 752, 3462, 
          753, 3467, 758, 3445, 759}], 
         Line[{99, 2094, 2093, 98, 2091, 2090, 97, 2089, 2088, 96, 2086, 2085,
           95, 2084, 2083, 94, 2081, 2080, 93, 2079, 92, 2078, 91}], 
         Line[{762, 735, 3452, 738, 742, 744, 3460, 748, 3458, 750, 3466, 754,
           3468, 756, 3451, 766, 3476, 768, 3480, 774, 3483, 776, 3488, 782, 
          3489, 784, 3496, 790, 3463, 792}], 
         Line[{793, 3465, 3464, 791, 785, 3491, 3490, 783, 777, 775, 3482, 
          3481, 769, 3477, 767, 757, 3470, 3469, 755, 751, 3459, 749, 745, 
          3455, 743, 739, 736, 3453, 763}], 
         Line[{796, 3475, 760, 764, 770, 3478, 772, 3485, 3486, 778, 780, 
          3493, 786, 3497, 788, 3471, 3472, 800, 802, 3506, 808, 3509, 810, 
          3514, 816, 818, 3519, 824, 3492, 826}], 
         Line[{827, 825, 3521, 3520, 819, 3515, 817, 811, 809, 3508, 3507, 
          803, 3503, 801, 3473, 789, 787, 3495, 3494, 781, 3484, 779, 3487, 
          773, 771, 3479, 765, 3474, 761, 797}], 
         Line[{830, 794, 3501, 798, 3505, 804, 806, 3511, 3512, 812, 814, 
          3517, 3518, 820, 822, 3498, 3499, 834, 836, 3531, 3532, 842, 844, 
          3537, 850, 3540, 852, 3543, 858, 860}], 
         Line[{861, 3516, 859, 853, 851, 3539, 3538, 845, 3534, 843, 3533, 
          837, 3528, 835, 3500, 823, 3523, 3522, 821, 815, 3510, 813, 3513, 
          807, 3504, 805, 799, 795, 3502, 831}], 
         Line[{864, 3527, 828, 832, 838, 3529, 840, 3536, 846, 848, 3542, 854,
           3544, 856, 3524, 3525, 868, 870, 3556, 876, 3559, 878, 3564, 884, 
          3565, 886, 3571, 892, 3541, 733}], 
         Line[{895, 952, 3622, 3621, 948, 3617, 946, 3616, 942, 3611, 940, 
          3610, 936, 934, 3578, 3577, 925, 3602, 923, 3598, 917, 3588, 915, 
          3591, 909, 907, 3583, 901, 3579, 897, 931}], 
         Line[{898, 862, 3550, 866, 3555, 872, 874, 3561, 880, 3560, 882, 
          3568, 888, 3575, 890, 3547, 3548, 902, 904, 3584, 3585, 910, 912, 
          3592, 918, 3595, 920, 3599, 926, 726}], 
         Line[{928, 960, 3628, 3627, 959, 3626, 958, 3625, 957, 956, 3624, 
          3623, 955, 954, 3604, 3603, 950, 949, 3619, 3618, 944, 943, 3613, 
          3612, 938, 937, 3607, 932, 3605, 929, 953}], 
         Line[{930, 3580, 896, 900, 906, 3582, 908, 3589, 3590, 914, 916, 
          3596, 3597, 922, 924, 3576, 933, 3606, 935, 3608, 3609, 939, 941, 
          3614, 3615, 945, 947, 3620, 951, 3601, 894}], 
         Line[{965, 3758, 1165, 3784, 1159, 1157, 3778, 3777, 1151, 3771, 
          1149, 3770, 1143, 3765, 1141, 3733, 1129, 1127, 3754, 3753, 1121, 
          1119, 3747, 3746, 1113, 3738, 1111, 1105, 1101, 3735, 1137}], 
         Line[{972, 1131, 3757, 3756, 1125, 3751, 3750, 1123, 1117, 1115, 
          3742, 3741, 1109, 3737, 3736, 1107, 1095, 3730, 3729, 1093, 1087, 
          3719, 1085, 1079, 1077, 3714, 1071, 3710, 1067, 1103}], 
         Line[{975, 961, 963, 962, 966, 3631, 967, 3632, 968, 3633, 969, 3634,
           970, 3630, 978, 3638, 979, 3640, 984, 3641, 985, 3645, 990, 3646, 
          991, 3651, 996, 3629, 997}], 
         Line[{180, 2250, 2249, 179, 2247, 2246, 178, 2245, 2244, 177, 2242, 
          2241, 176, 2240, 2239, 175, 2237, 2236, 174, 2235, 173, 2234, 172}], 
         Line[{1000, 973, 3636, 976, 980, 982, 3644, 986, 3642, 988, 3650, 
          992, 3652, 994, 3635, 1004, 3660, 1006, 3664, 1012, 3667, 1014, 
          3672, 1020, 3673, 1022, 3680, 1028, 3647, 1030}], 
         Line[{1031, 3649, 3648, 1029, 1023, 3675, 3674, 1021, 1015, 1013, 
          3666, 3665, 1007, 3661, 1005, 995, 3654, 3653, 993, 989, 3643, 987, 
          983, 3639, 981, 977, 974, 3637, 1001}], 
         Line[{1034, 3659, 998, 1002, 1008, 3662, 1010, 3669, 3670, 1016, 
          1018, 3677, 1024, 3681, 1026, 3655, 3656, 1038, 1040, 3690, 1046, 
          3693, 1048, 3698, 1054, 1056, 3703, 1062, 3676, 1064}], 
         Line[{1065, 1063, 3705, 3704, 1057, 3699, 1055, 1049, 1047, 3692, 
          3691, 1041, 3687, 1039, 3657, 1027, 1025, 3679, 3678, 1019, 3668, 
          1017, 3671, 1011, 1009, 3663, 1003, 3658, 999, 1035}], 
         Line[{1068, 1032, 3685, 1036, 3689, 1042, 1044, 3695, 3696, 1050, 
          1052, 3701, 3702, 1058, 1060, 3682, 3683, 1072, 1074, 3715, 3716, 
          1080, 1082, 3721, 1088, 3724, 1090, 3727, 1096, 1098}], 
         Line[{1099, 3700, 1097, 1091, 1089, 3723, 3722, 1083, 3718, 1081, 
          3717, 1075, 3712, 1073, 3684, 1061, 3707, 3706, 1059, 1053, 3694, 
          1051, 3697, 1045, 3688, 1043, 1037, 1033, 3686, 1069}], 
         Line[{1102, 3711, 1066, 1070, 1076, 3713, 1078, 3720, 1084, 1086, 
          3726, 1092, 3728, 1094, 3708, 3709, 1106, 1108, 3740, 1114, 3743, 
          1116, 3748, 1122, 3749, 1124, 3755, 1130, 3725, 971}], 
         Line[{1133, 1190, 3806, 3805, 1186, 3801, 1184, 3800, 1180, 3795, 
          1178, 3794, 1174, 1172, 3762, 3761, 1163, 3786, 1161, 3782, 1155, 
          3772, 1153, 3775, 1147, 1145, 3767, 1139, 3763, 1135, 1169}], 
         Line[{1136, 1100, 3734, 1104, 3739, 1110, 1112, 3745, 1118, 3744, 
          1120, 3752, 1126, 3759, 1128, 3731, 3732, 1140, 1142, 3768, 3769, 
          1148, 1150, 3776, 1156, 3779, 1158, 3783, 1164, 964}], 
         Line[{1166, 1198, 3812, 3811, 1197, 3810, 1196, 3809, 1195, 1194, 
          3808, 3807, 1193, 1192, 3788, 3787, 1188, 1187, 3803, 3802, 1182, 
          1181, 3797, 3796, 1176, 1175, 3791, 1170, 3789, 1167, 1191}], 
         Line[{1168, 3764, 1134, 1138, 1144, 3766, 1146, 3773, 3774, 1152, 
          1154, 3780, 3781, 1160, 1162, 3760, 1171, 3790, 1173, 3792, 3793, 
          1177, 1179, 3798, 3799, 1183, 1185, 3804, 1189, 3785, 1132}], 
         Line[{1203, 3942, 1403, 3968, 1397, 1395, 3962, 3961, 1389, 3955, 
          1387, 3954, 1381, 3949, 1379, 3917, 1367, 1365, 3938, 3937, 1359, 
          1357, 3931, 3930, 1351, 3922, 1349, 1343, 1339, 3919, 1375}], 
         Line[{1210, 1369, 3941, 3940, 1363, 3935, 3934, 1361, 1355, 1353, 
          3926, 3925, 1347, 3921, 3920, 1345, 1333, 3914, 3913, 1331, 1325, 
          3903, 1323, 1317, 1315, 3898, 1309, 3894, 1305, 1341}], 
         Line[{1213, 1199, 1201, 1200, 1204, 3815, 1205, 3816, 1206, 3817, 
          1207, 3818, 1208, 3814, 1216, 3822, 1217, 3824, 1222, 3825, 1223, 
          3829, 1228, 3830, 1229, 3835, 1234, 3813, 1235}], 
         Line[{261, 2406, 2405, 260, 2403, 2402, 259, 2401, 2400, 258, 2398, 
          2397, 257, 2396, 2395, 256, 2393, 2392, 255, 2391, 254, 2390, 253}], 
         Line[{1238, 1211, 3820, 1214, 1218, 1220, 3828, 1224, 3826, 1226, 
          3834, 1230, 3836, 1232, 3819, 1242, 3844, 1244, 3848, 1250, 3851, 
          1252, 3856, 1258, 3857, 1260, 3864, 1266, 3831, 1268}], 
         Line[{1269, 3833, 3832, 1267, 1261, 3859, 3858, 1259, 1253, 1251, 
          3850, 3849, 1245, 3845, 1243, 1233, 3838, 3837, 1231, 1227, 3827, 
          1225, 1221, 3823, 1219, 1215, 1212, 3821, 1239}], 
         Line[{1272, 3843, 1236, 1240, 1246, 3846, 1248, 3853, 3854, 1254, 
          1256, 3861, 1262, 3865, 1264, 3839, 3840, 1276, 1278, 3874, 1284, 
          3877, 1286, 3882, 1292, 1294, 3887, 1300, 3860, 1302}], 
         Line[{1303, 1301, 3889, 3888, 1295, 3883, 1293, 1287, 1285, 3876, 
          3875, 1279, 3871, 1277, 3841, 1265, 1263, 3863, 3862, 1257, 3852, 
          1255, 3855, 1249, 1247, 3847, 1241, 3842, 1237, 1273}], 
         Line[{1306, 1270, 3869, 1274, 3873, 1280, 1282, 3879, 3880, 1288, 
          1290, 3885, 3886, 1296, 1298, 3866, 3867, 1310, 1312, 3899, 3900, 
          1318, 1320, 3905, 1326, 3908, 1328, 3911, 1334, 1336}], 
         Line[{1337, 3884, 1335, 1329, 1327, 3907, 3906, 1321, 3902, 1319, 
          3901, 1313, 3896, 1311, 3868, 1299, 3891, 3890, 1297, 1291, 3878, 
          1289, 3881, 1283, 3872, 1281, 1275, 1271, 3870, 1307}], 
         Line[{1340, 3895, 1304, 1308, 1314, 3897, 1316, 3904, 1322, 1324, 
          3910, 1330, 3912, 1332, 3892, 3893, 1344, 1346, 3924, 1352, 3927, 
          1354, 3932, 1360, 3933, 1362, 3939, 1368, 3909, 1209}], 
         Line[{1371, 1428, 3990, 3989, 1424, 3985, 1422, 3984, 1418, 3979, 
          1416, 3978, 1412, 1410, 3946, 3945, 1401, 3970, 1399, 3966, 1393, 
          3956, 1391, 3959, 1385, 1383, 3951, 1377, 3947, 1373, 1407}], 
         Line[{1374, 1338, 3918, 1342, 3923, 1348, 1350, 3929, 1356, 3928, 
          1358, 3936, 1364, 3943, 1366, 3915, 3916, 1378, 1380, 3952, 3953, 
          1386, 1388, 3960, 1394, 3963, 1396, 3967, 1402, 1202}], 
         Line[{1404, 1436, 3996, 3995, 1435, 3994, 1434, 3993, 1433, 1432, 
          3992, 3991, 1431, 1430, 3972, 3971, 1426, 1425, 3987, 3986, 1420, 
          1419, 3981, 3980, 1414, 1413, 3975, 1408, 3973, 1405, 1429}], 
         Line[{1406, 3948, 1372, 1376, 1382, 3950, 1384, 3957, 3958, 1390, 
          1392, 3964, 3965, 1398, 1400, 3944, 1409, 3974, 1411, 3976, 3977, 
          1415, 1417, 3982, 3983, 1421, 1423, 3988, 1427, 3969, 1370}], 
         Line[{1441, 4126, 1637, 4152, 1631, 1629, 4146, 4145, 1623, 4139, 
          1621, 4138, 1615, 4133, 1613, 4099, 1601, 1599, 4122, 4121, 1593, 
          1591, 4115, 4114, 1585, 4106, 1583, 1577, 1573, 4100, 1609}], 
         Line[{1448, 1603, 4125, 4124, 1597, 4119, 4118, 1595, 1589, 1587, 
          4110, 4109, 1581, 4105, 4104, 1579, 1569, 4096, 4095, 1563, 4089, 
          1561, 1555, 1553, 4084, 1547, 4078, 1543, 1575}], 
         Line[{1451, 1437, 1439, 1438, 1442, 3999, 1443, 4000, 1444, 4001, 
          1445, 4002, 1446, 3998, 1454, 4006, 1455, 4008, 1460, 4009, 1461, 
          4013, 1466, 4014, 1467, 4019, 1472, 3997, 1473}], 
         Line[{342, 2562, 2561, 341, 2559, 2558, 340, 2557, 2556, 339, 2554, 
          2553, 338, 2552, 2551, 337, 2549, 2548, 336, 2547, 335, 2546, 334}], 
         Line[{1476, 1449, 4004, 1452, 1456, 1458, 4012, 1462, 4010, 1464, 
          4018, 1468, 4020, 1470, 4003, 1480, 4028, 1482, 4032, 1488, 4035, 
          1490, 4040, 1496, 4041, 1498, 4048, 1504, 4015, 1506}], 
         Line[{1507, 4017, 4016, 1505, 1499, 4043, 4042, 1497, 1491, 1489, 
          4034, 4033, 1483, 4029, 1481, 1471, 4022, 4021, 1469, 1465, 4011, 
          1463, 1459, 4007, 1457, 1453, 1450, 4005, 1477}], 
         Line[{1510, 4027, 1474, 1478, 1484, 4030, 1486, 4037, 4038, 1492, 
          1494, 4045, 1500, 4049, 1502, 4023, 4024, 1514, 1516, 4056, 1522, 
          4059, 1524, 4064, 1530, 1532, 4069, 1538, 4044, 1540}], 
         Line[{1541, 1539, 4071, 4070, 1533, 4065, 1531, 1525, 1523, 4058, 
          4057, 1517, 4053, 1515, 4025, 1503, 1501, 4047, 4046, 1495, 4036, 
          1493, 4039, 1487, 1485, 4031, 1479, 4026, 1475, 1511}], 
         Line[{1544, 1508, 4051, 1512, 4055, 1518, 1520, 4061, 4062, 1526, 
          1528, 4067, 4068, 1534, 4072, 1536, 4050, 1548, 4080, 4081, 1550, 
          1556, 4086, 1558, 4091, 1564, 4092, 1566, 1570}], 
         Line[{1571, 4066, 1567, 1565, 1559, 4088, 4087, 1557, 4085, 1551, 
          4082, 1549, 1537, 4076, 4075, 4074, 4073, 1535, 1529, 4060, 1527, 
          4063, 1521, 4054, 1519, 1513, 1509, 4052, 1545}], 
         Line[{1574, 4079, 1542, 1546, 1552, 4083, 1554, 4090, 1560, 1562, 
          4094, 1568, 4101, 4102, 4103, 1578, 1580, 4108, 1586, 4111, 1588, 
          4116, 1594, 4117, 1596, 4123, 1602, 4093, 1447}], 
         Line[{1605, 1662, 4174, 4173, 1658, 4169, 1656, 4168, 1652, 4163, 
          1650, 4162, 1646, 1644, 4130, 4129, 1635, 4154, 1633, 4150, 1627, 
          4140, 1625, 4143, 1619, 1617, 4135, 1611, 4131, 1607, 1641}], 
         Line[{1608, 1572, 4077, 1576, 4107, 1582, 1584, 4113, 1590, 4112, 
          1592, 4120, 1598, 4127, 1600, 4097, 4098, 1612, 1614, 4136, 4137, 
          1620, 1622, 4144, 1628, 4147, 1630, 4151, 1636, 1440}], 
         Line[{1638, 1670, 4180, 4179, 1669, 4178, 1668, 4177, 1667, 1666, 
          4176, 4175, 1665, 1664, 4156, 4155, 1660, 1659, 4171, 4170, 1654, 
          1653, 4165, 4164, 1648, 1647, 4159, 1642, 4157, 1639, 1663}], 
         Line[{1640, 4132, 1606, 1610, 1616, 4134, 1618, 4141, 4142, 1624, 
          1626, 4148, 4149, 1632, 1634, 4128, 1643, 4158, 1645, 4160, 4161, 
          1649, 1651, 4166, 4167, 1655, 1657, 4172, 1661, 4153, 1604}], 
         Line[{1675, 4310, 1871, 4336, 1865, 1863, 4330, 4329, 1857, 4323, 
          1855, 4322, 1849, 4317, 1847, 4283, 1835, 1833, 4306, 4305, 1827, 
          1825, 4299, 4298, 1819, 4290, 1817, 1811, 1807, 4284, 1843}], 
         Line[{1682, 1837, 4309, 4308, 1831, 4303, 4302, 1829, 1823, 1821, 
          4294, 4293, 1815, 4289, 4288, 1813, 1803, 4280, 4279, 1797, 4273, 
          1795, 1789, 1787, 4268, 1781, 4262, 1777, 1809}], 
         Line[{1685, 1671, 1673, 1672, 1676, 4183, 1677, 4184, 1678, 4185, 
          1679, 4186, 1680, 4182, 1688, 4190, 1689, 4192, 1694, 4193, 1695, 
          4197, 1700, 4198, 1701, 4203, 1706, 4181, 1707}], 
         Line[{422, 2719, 2718, 421, 2716, 2715, 420, 2714, 2713, 419, 2711, 
          2710, 418, 2709, 2708, 417, 2706, 2705, 416, 2704, 415, 2703, 414}], 
         Line[{1710, 1683, 4188, 1686, 1690, 1692, 4196, 1696, 4194, 1698, 
          4202, 1702, 4204, 1704, 4187, 1714, 4212, 1716, 4216, 1722, 4219, 
          1724, 4224, 1730, 4225, 1732, 4232, 1738, 4199, 1740}], 
         Line[{1741, 4201, 4200, 1739, 1733, 4227, 4226, 1731, 1725, 1723, 
          4218, 4217, 1717, 4213, 1715, 1705, 4206, 4205, 1703, 1699, 4195, 
          1697, 1693, 4191, 1691, 1687, 1684, 4189, 1711}], 
         Line[{1744, 4211, 1708, 1712, 1718, 4214, 1720, 4221, 4222, 1726, 
          1728, 4229, 1734, 4233, 1736, 4207, 4208, 1748, 1750, 4240, 1756, 
          4243, 1758, 4248, 1764, 1766, 4253, 1772, 4228, 1774}], 
         Line[{1775, 1773, 4255, 4254, 1767, 4249, 1765, 1759, 1757, 4242, 
          4241, 1751, 4237, 1749, 4209, 1737, 1735, 4231, 4230, 1729, 4220, 
          1727, 4223, 1721, 1719, 4215, 1713, 4210, 1709, 1745}], 
         Line[{1778, 1742, 4235, 1746, 4239, 1752, 1754, 4245, 4246, 1760, 
          1762, 4251, 4252, 1768, 4256, 1770, 4234, 1782, 4264, 4265, 1784, 
          1790, 4270, 1792, 4275, 1798, 4276, 1800, 1804}], 
         Line[{1805, 4250, 1801, 1799, 1793, 4272, 4271, 1791, 4269, 1785, 
          4266, 1783, 1771, 4260, 4259, 4258, 4257, 1769, 1763, 4244, 1761, 
          4247, 1755, 4238, 1753, 1747, 1743, 4236, 1779}], 
         Line[{1808, 4263, 1776, 1780, 1786, 4267, 1788, 4274, 1794, 1796, 
          4278, 1802, 4285, 4286, 4287, 1812, 1814, 4292, 1820, 4295, 1822, 
          4300, 1828, 4301, 1830, 4307, 1836, 4277, 1681}], 
         Line[{1839, 1896, 4358, 4357, 1892, 4353, 1890, 4352, 1886, 4347, 
          1884, 4346, 1880, 1878, 4314, 4313, 1869, 4338, 1867, 4334, 1861, 
          4324, 1859, 4327, 1853, 1851, 4319, 1845, 4315, 1841, 1875}], 
         Line[{1842, 1806, 4261, 1810, 4291, 1816, 1818, 4297, 1824, 4296, 
          1826, 4304, 1832, 4311, 1834, 4281, 4282, 1846, 1848, 4320, 4321, 
          1854, 1856, 4328, 1862, 4331, 1864, 4335, 1870, 1674}], 
         Line[{1872, 1904, 4364, 4363, 1903, 4362, 1902, 4361, 1901, 1900, 
          4360, 4359, 1899, 1898, 4340, 4339, 1894, 1893, 4355, 4354, 1888, 
          1887, 4349, 4348, 1882, 1881, 4343, 1876, 4341, 1873, 1897}], 
         Line[{1874, 4316, 1840, 1844, 1850, 4318, 1852, 4325, 4326, 1858, 
          1860, 4332, 4333, 1866, 1868, 4312, 1877, 4342, 1879, 4344, 4345, 
          1883, 1885, 4350, 4351, 1889, 1891, 4356, 1895, 4337, 
          1838}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
v2RKlzZZr5zp+XXRnJdwv2HPYi2JZLzdYn1JjOBMQsSI++x18ei5dmH1wpne
uKtbOvsQmW8SFT9o4jYWP8DET1ncWLxBPBVvwMSbUfVYfKLF3bH4RCY+Dcff
K9Ori8EsG65fXx+5or5FiIcgmde7YvH9++TTUUMw+7jdlli07Cq71Ufw4c5t
t0tN5enoPCXnjMzbYLTdMuGDBJmXkgTX2/o5iVju08QhG+6EEuMsPkkROw91
fph6U8sDzzi+zcHNC4Bn2dTHAeS7IqZj+xfmU/sXmP3rT+130Kb2O7TR+92b
wgf4ROEDMPjgqTGGJ3iawhNk8EQoPoHjHfih6qqqHWvtk3B2V5qUEVl3S6sB
l+8itvhoRmbJgYkB6MSqmzmJ2GP90+jrd3K+4W6Y8+qliBUUxEZ+Gj0/fN7Y
b/7lQAaM/z3jk+/TUNj14UWqK+EFnXk3L3+cmwarFq3mdeoOhW9DInqvh//B
Wyih8BYYvN1O4TP0XR3DZ2Dw+ShrDM/BsngMz5HBcxr/cQeF/8jg/wmBMb5A
iZ4xvkCGL2opfoHpFL8Awy/PKD4CLoqPwInmI5q/IJniL2D4ayrFd3Cd4jtg
+G4yxY/AS/EjMvx4juJTKKD4FBk+pfkXaf5Fhn+XLIyc+0AlDKefX+hueyQV
/Ksmeu4ldhqvtTBd9j4cExJXCrF2pEKZfcFBYTI+7dhBY/4zCTgskTR++0Aq
pBcuaOYgetR6LJVi1NNwIM3m7FT5MPi51Ke4iPg/vDZRUePNJbyUUfNOZtEZ
mHBIcYolwYFOTbybr5mH94J98xUzfdH5jLhwNZlX9QneLYqFGTj+5IZL08h5
spjXXNKL6G9rj70WejMBXz180mdurIdnbNX3uZJ4ezVbt9zteyJGPc7Rqoi5
AAsVrxRMJuPLdgYqXnlpDz17Zi6WD4iHM7x4Oo2MhzaddubqlQfZ30K77Xcm
w8Inmvt6SBwujAVZn2o/nLDx2PXZqeGwrjV1KIKsr/SanlCDr9G4z8Lq9c7l
54H76tdN9mS8YvuBvA0bE5Ansqzs8zx9LJIWH59B9C84t7fiuGkYZjcK1x07
aI3Lpd5EGhH/z/tmpVCUFoLWC8IC/94wxmWTRuLqyPi5vZeuGxh5oQsH/0Nv
U1Nsme1gbkzih3dcj9f2DZG40995914uBzQVttj/inzXQ+TKdOOj6RB6LMv9
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
QSszTglNck8XoOWr2OS/bdv7sPNyPk40fyzqy5WMZzy4hzcQ+X10XVs4W10b
73vHhyYCZVijOc7/8YVM9ND71KBE7k0HaPlINvlV30zKz5L76aBdk9uZkXgM
r5bPeTDwvzq+UjZ7rlPnB+TaPXZ+QOb8oEPX981mq+9b3rRrg+L6IgzfqX7k
1KRwlMoujHhH1reErr+bwlZ/pxjK+/rVhBIsv7VVQvpPHG63zN2x5zULyml5
YTb5aOq8hAf8x85LyJyXOul77h+2e+5D6n4B1X5j9wtg7hdFdF3ba6pOGZk6
5YOv7k0LPJ+B5xqbj7vpJ6PiJM1vsWR95ek6vjS2Or67FH/BJYq/gOEvXbqe
8awHVc/InPeuFzlKPCG4E6TsbT9tMAcDNvg255DzSR1dD9hK1wNOp+sBV9y2
8PiZUIZ/W0709uam4e+24a5csr7VtH/msflH0B2lDs8qxFMS811u+sei+nLZ
7InkvHSQrnN8dYGqc3xL1zlKOfC6bxFLw+16Gqpz16egeeuCO1lkX3TTdYjR
dB3iVboO8dI+R91LO/Jx2ZbCXzKS+Xj6rqqi/CtyPqTlU9jkJwuzqlmz0pAj
7VryykemaNlexQtkP8rQ9kx0/Lc9nqvnXNs1bIdVxoK+LXbJUKhqfDWK8MtK
uh6zm67HZOqp368UeHfi6WWc/t0vz60nDxV3udjzkXPX+/+wZ1jtyMvv8lFo
Y6SzsNQwAfuPiqe6EHv46PrKbnWqvvInXV85oCWuuP+vN7q+fZWVKeEFFovF
nXtG442uA73PVge6lLqfwlHqfgrM/bSXln/CJv/H/8/NbSudsO/HcY7jwWfx
w/GrfwtInAjQ9vxls6evqaSm8HcoKEw56qucFQ9tbk4L9Ij+j3QdKBdbHagb
dR8H+j4OzH385X/YE0rleVCAyvMgk+fRoPIA2ELlAZDJAxRS9x1Mou47yNx3
ttL7JYltv3TEOzy1jQzFQ0Zcge9mFODa53ITvUnczuGbZbB6agAkaFrqrneN
gF9yUvwnyH5sputYP7PVsQb9+uN1k9yHo4dsNIyWpsBuufIV4sQ/N2j5r2zy
QieCK4uNvLDp1PO9CkczsKvwj+BxYn/IsoOzQ06mg4FlYL3pMXus4bvScYjc
4y4Kb7KwnVEErSfvTussKILLmb8vziX7sYPWz2n8b/13qLwT3KDyTsDknb7S
9bZJbPW2oRtzG0pvlkCVdklf74MImOS/yCyC7KMf6kndJrZVcNj1j0BeaQrU
WSytNCP3LBsqDwY2VB4MmDzYAK0/iE1/JZWXgw4qLwdMXk6crvPlZ6vzJfCe
OTL5Kiy6vCc3V6gI2s3/wIc8wke1Zb/S3teCX31DzKKiAmhIUTuJNYQfqfwh
cMmM5Q+ByR9O7aRwtZ8NV2dS+SIUofJFyOSLtOo/6Hp11ICgoOpeSfE8OGS6
oZ2vkQUua3aHLOMvA2/HD2FGnenQaTQUZdlDzvNUHhW4zMfyqKBK51EDqbwr
yPKM5V2RybtaUfleeLR9LN+LTL7X5/hYvhcKqHwvMvlezbqxvDEoUXljZPLG
b7u2B2zx9cDYdM1eSUEHONqYKH2C7NPgnMg7XdUxOP9Twynj9B1o3Lk7ePR9
u9b6GTYFFcH4wWuPurG1EmS2fCl/Q/xTUb7OeCTcDmyTb767FkzW/XDOtwmj
uEfXqb1lq1O75RSqbPsgDevlL67MMN8KnMLSxY9JfM5uSVH5OCMLb5Y0Tl60
xQeP7T+0kO87CyZt3Px3XcolXJKY9PN1czDm7Z4nmkL8bGAaMa2kLg/71n06
/7AlAh/x7l+9hZwn+VW6eDKP5+LloK2mua2hqBuouOkD2aeNA/WKJ/R1ULbz
Z6q9oC1eXDc3/iGZbx5dJxjKVid4fCgq34X3Irauc+usRXfsWJQ1pDFaj0bX
4fKy1eFWa3Wrf3p5Fh4+cD//STAKYiWXPn1Ixl8MB0f19/viIs+o7inbg3He
5co2OeKfY7QefjY9t4W8tGNCLuGb4u6LkVaRmNEtK3WL7IsNP48qdOumYXGr
dOZywwDcG7PKew/x23fdnGXjbCNxjcm54LlFIThxnO7ITeJn7f/QP+v57+66
NZHYLzot4wRnOAayONa7EfnDdB3xarY64sUTZXe+M49Gpx1c6poubnjRKzF6
9D2GuRCnkfQrMh/dKbMXF57DzkX9Re1kXrHS916LKcShTPwcw8KV0RinJ1F6
m+DzMVr/Wjb9FRERESu6fHH7cw6PEx2u2G4lvXWQ6LGk65f3sNUvy/8Zd+4v
SxmCz8+wsjb0hs9uX7hH67bme4Q6H8t2Bq55C09PIXjg+efI5pvEzv6tGUe9
dnvgJfElzcsv2eEW597Uk6Pvq2n9qmz6dz+J2ClWfA7P3eYvOt5mjVILf+W3
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
U9XO8+oigTArv9OwQisZZ8bqPBgdn0P3JzxO9yespfvvnQ1tzTzACoOFPX1T
jc+5Q1G98sTR98MqtD2SbPZ0dY44b2aFwttpiYH9MoYgHrG5OuT/lS89/E++
9MMXo/4HN4IgZpsHZ8++RLT+461uRvyTTvdFXMLWFzF5nVxVqJIr8MxPH/+0
LRmXq3233knkk/+jj+KlBYI7J13xwwIrnlaN2QnQHdN4/DORz6D7EMqz9SHk
ps5FuJY6FwFzLppA92N8yNaPUXycwjI/Xl/c/OHh9gHfJPj48KPk+V+jdRb/
7mfI+LOvyW/uEi1/+NzhnWotZo8ThSav4//L+Mee9supf/7/gir7CzpKxp6Q
OCuy54NsIHotMawYvX89Y+vTGET3abzjZxxrqhaM89a/89/TEgUGl7KDkNhp
9x99FNMWBAhmDjljltRtl7SqWLAyVyn/SOStafmFbPKmR3atPVHhDr0/Ez83
lYXjTP5ZtW9G+/nQ9hiy2fOgXP6GxWs3mKM4Qa/YNRaPjrvC85Ton033k+Rk
6yf57uKaCT8veSPXszrZU8FhIBiQO6uf6Lel7RFjs0ddfGHUzeQg3MV1fr7R
a284nx33zJh89wDdH1KZrT9kJ+Uf2En5Bxn/pP9HH8ud1PqCPbW+yKxvPC3v
yiavaNFQ+f/Q9d5xPf7f43+kkC0ZkWwhM1TWQdlSUiGVpKLSVCqkvffee2vv
ojqEpBQysislhAohGf0ez67H8+3zur4//16303mex3msc07Xde72d/1QY9ee
N8b85jB5nOCK2//Hnr0se2J9Tr6daemH55VyMoe0nkTsGL2ak6econ0so1h9
LGOY9QwZzHpG7nqOofbYs+wRvH9dreJsCIy4YTrSRioKs7v3vnjX/7c/Zwur
P6eK5usPYauJS9I7F/MkRUGsXtNAE9H/ifaxjKF9LBNpH8uJjH6cyegHrv7U
f+yvXad2fZ5j740PTizoDZ8UC9elygU0OfuF6o9l6f+2KTPcyiQQMxcK3ozV
cUXvmbjyN6cOQ/2TwvLPlH1rVDf+IPYEpsS2zQ/Ercrempy+E2dp/8/9rP6f
MXu9hmRODMBQU+vRHfKh8Gz/l8vhRP4rtSeCZY+qLkL1kjDcZ3vSWzXSDzoq
g29z+knepf08k1j9PE9OyxTfetEPl29+NO4c2ZcLVk5b2Eyea9G+o9dZfUdz
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
0s4pSPjFwVq/gaCDCoHQ+3TJlC1E/+XhpusTsuLB9UrkPjUlUxB20bsmQOR3
MXVOuMDUOZFb53zM1EXhFlMXRW5d9DxTj4V4ph6L3HqsIFOPxb1MPRa59Vhh
pq6LaUxdF7l1XZ97hoJVE8xhQmqgfFNtIGTqbhh9lMzLpFftMU6pTqhx7Hy2
fl8KHBGyjlUm6/xrecmRpUmWcKLR0XLHjgjQWvxOazGnH+++yUk4LhwX7/it
M8E4GY0kO++rkfN5O+UqCnT+l6s4yvekyektvlh/NOvagh2X4c/ETwO6nH7d
daMzj+3JxalWci94ZQvhw7dfcXEPu8FbT2LM/OYSfOwyat6WnxlgdfOS5VAi
b7p3aeVrXcQclUyPndtPQZGFltzkqm54aPNxeYUHouuk8ooO97PY5clnfvIq
udc2/H4+foIOGsvpv1zjWYoLx5wz2PCUnD+Ua+lNuZbZlGvZsppntcfzULCQ
VTb9vCMYZCvVbYdweIKUD5tA+bBIOZIbhd/NHr3SGsr7PhoM1bSHs97w3Ivz
/tuNNuOnV8KgMzFp95HrkTAs90sDJ792ZHFmuXqUlm9uzPxdgZpHSpTyJgWj
tDlYNt0g+8tITMQ67xLerBszVM41BCdOvP7r8D1yzneKdSsK2ENK9PvF1aWp
YH/s2Lr3RI8t1Z/J0q94pO7+oXlOcHlns1KCaiKsOrw8Bck5qU/5tv0svq2I
z+br6R+L8U2p+LH3pZE4zTv44zgSl65yv7Rpr3IJrj5xke9CURzG37af5vyk
GxpmTNeU3xqE9bm+6523e8Il80ZbznciOlT/G5Z+3Kv9aeVnTbyncnMVr5c/
yO1VD7vJ6XdKubqzWVzdtuV2x28czcN3D2Z0wcQ47P288dV4sh+TT/en39HN
xL3rr5t5fotB+epLtgkkbnT87XJ4hL0Ojjr5QkLWyAbCjmsnVg381S/C0v9o
jfKa11rn8fCIVncx7+MYbb/l4k0iP4/yfAspz1eN8nwVDVT6ditm4Ra5Wj7R
nASUeiczagp5Pu6PT8Xp4iTc3hxw3W9TOt5+n2alSOy5bR2TvMwsDu6nNyYo
dKTBG+WB6YIcfjTl9tJ1CNx1OCVcckQ4vx+4VH9bNTfHCz6PuWbI+T/UZsov
3sDiF6/JS1vp3JgEsj8sRm8i+e/42rk8U8nvLqD831wW/9ehNmnzt1wrOBb0
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
P8+m83KbNS/dH7/Ku97zBXcJUQWlR9GQenbsATeynvd4VuzbxecNIiLHmxTH
RgIP1K3dz+EdUy65CYtLHtLRm46TiB9fiQdI80Wg/qrk6gEOl1zyhGmiizOa
GcX9eLM4DDftGfguw+k/T7nzS1nc+Q8PBAKSevRhwZ09yidNXXF4wuOtBkT/
auqfvLb/+seB8uJNWLz4H0ai2iVLQ6H50E7tpOlG4Np6xOkx+d1llA9+hsUH
j6dc9WgWV134eVplsGsiDKxqff5YyhX2+3t0OJD5XUn54DtZfPAwyluvY/HW
BVvk94VYJUGutdjukOYgKJwe9LOSrB9DyhNPZfHEm2LkRSQ1o+G3lPOMs4t9
oD61cQfnOxdryvVeyeJ636Zc7wgW1/visPH8gi+8Ie3TtJuB2nZwhndc0wtO
X8RSm2nnV0qj4OqGEjEfN1w7eu80DgczeXYPmJP14fD8s9OBy7IYdNXoLWed
rKJ+s2f5LcLAS3nj9AR4KLM8dF9TKGgMa9JOJfsr9B/c+VrKW29k8dabhPaP
+iKXBksn8W3wOh4N15a+/aFFzoEb/+BTy1Cutz2L66268+eKU2XJ0KDdum7O
Dm9wXm4y2H/yCOV6F7G43gYLb7UmSkaD6IBB09VdB6Fao2xMGpn34ZRbbcji
VhcUep4ekeoEYhm38gw3+2K/sqR4PHl+i/r/NMv/HYcYnvVYFs86bO8Y+478
Uxgx7NDjj6HhOBJSB45z3ot+lFuxbMAPREQTpB6LhkG9YH9PGLGnfl0+tkfE
wFR3n+fTCmKAzzqEL63vL0/8Pcs/7+wNdMIjIqG2Y4nlI9dI0Cx/7j6OjNeK
8rJPsHjZZy7MKN431xFuRua+29FjB7teCReokXk37vDWFV9sVv5bovqKebvB
//LT8Q1P+J1Ou6EGT19kWZAjJq+Iucjpr8JD/abH8tteymW+wOIyv4xouDox
Ngrfp0w4uGVFNPI5+C6zIuufn3KZ17C4zPoPxDRjv0fhQLDPz6iRsdg++WZt
L/GD9j+4w2KMP3Eq40/k+nPBvkH/w3bG/8D1fzYzvxh4cXB+gTu/0yn3+efM
/3Kf5/smXzLkicOCw+G1Ub2aOMXHW+An5/yk4z3HGq805S9rs/jLAY9X14pa
pmBWYO0Z8ckBmOfaX/eA3DsmlC88lsUXNgu1q5FQTcOAS43Njy+S+D17u/iu
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
baK/yxHc+qdqytiPhXD2db6vA8nnBzm9RzzD6T2CQO9xUs726e8vOeLVW2Nz
efal8EXp6TWhxyR/ek98knEwGA3P/Wxcd6cEbqhtneVKxg2LpDavN4jBl/oL
v98ZmwJ157aHppL3Iq7EM9tKNxHlbETv7/vsjDZNreXbST3geS9nTev0JJz6
dOpO3ZiD6P5nWRPfb0iu8VSSv0QiVqXqmnW9D8ApA0RyU8m9ECFxT17lfTw2
2Dt3pJnH4/UnRyVVSV2tovGt2/1IJD4NuDlhct9ofPqk1Hs+mWf4ki+6Qp2B
OPrELRWjcWH4fu++hY7kvLnefjRcWT4QZ43V6dYfHIR+16XEVcm5GhKjYXPc
MADrNc50uEv44pkTa56+J+N71H+VHC8LwR19Jsjq7PJHr6JIhTFk/JLvAmUt
sUgccGW90L78AMyG+bUyZP49b2ryp6jG4fzhIpaXajwxe0Vnqw153+Opj8wf
6iPzgPrISC6xbRWvtYLRY8tFvpsUw82h/fYWkzrBuI9dk7aUC2aqHtm7XKoA
1u1o8TR49+/9Mpn7bvrRlbF4deex6nkDgsD91btRvcn3WlG/mL7UL+Yc9YuJ
ofsygdmXeRnRz967ROGry3kjDrxxw1Gv2i1OkOdqf7tx/Pb1gegx3n/g0yde
uLd03G9+fNqEzgQM/OyAzknT5MbMPY2rB44at6bH9+r/9oW507Vcbo67PsSk
HLhYancKq8aK5pSSz7c9eXIh79g+eKcvdsq0txeeaWyv5eNaw02qqgds3w8Z
wxbUdNUEotAKBacIvr7c7YLC6TNIPnEx+BkTFYyJ80wiJPn4Crovo5h98Vh4
4fmz5T7Q5CLcIGoeio//GL7g/248U3/xQOUcQ+iULtUd8S4e5yrEhdj++uvD
0kF9WMyoD8uI9K3L/d9FwrNap6KTUgkgYTemLobkn/LvCuOGTFmC9yZIrpKL
jCJ1revVfny9XOqzk8347DQkqly8JmaNsXD4qmGLL+zK3z/gPd83nMYniomP
JfXHCWb8cQqL79vZbTCBZTceXNn50R3crfLua3T/9XNh/VCCqI9MH+//+sjY
SS62TU0LhoroTxtbAwJgXR8dH5k//HqV80M5wvihRFF/mXrGX+b+L73J/l0J
MMtGpio+7xToVHdWZ3b+9XNxYvxTRnksXxNYEA4f3QfGSo9LQtRYtOYlea+/
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
coWaN2aXRpPn7aZ8ohSGTyTb88OJ89KYVg/yZ/C/30/0Kd9qIMO3Gtmcf352
tz8MH5+4qHV8ODQO6fwQTtaze92vuUfPpcDt/e2LJ671Adc5Jj0+L/WLC/FZ
ZCwM8vC9P6ooFvrZhPZLJ/vbSXlYlxke1g6bYXjbKgWsDe3HnA/3hBjDlZnS
5PN7/C7NGmKWCLUpZwzLjjrAhWjdVSYkniayde1JC2NgV/eRlmpVLbikc04y
nczzk/K5Whk+F8/xiEFEZBRcfyFn1ewWBXoV9z2kyLjWi1XL1yTGwpT0/Ku3
F4XDfZ+tm8X4Om+U/3WL4X9drBs6yKV/IrxN0tsBUkkA99o0lpLzv8X0bK2P
UhREjir/9UvKCWyszwyrI+u5UOxl1j/NBYZk1RUYrfDDzu0LZyaQ+E/j4okj
uHiiIJ4XNlR3HQ+Lh6KA+J9WU6NARjn8fROJw1HKLzvA8MtuTB6ze/w3d/Bp
t9n4cIozzgu28+1P9qtWSyU7BjZin+1dsi6bIvGc9Qtlfp5X2yjp+KLwKPr3
3dH6LiwCRSGtm+/350x5bUcYXpvPyTGlmyc5Q1NU/uu1H06B6hPpot1k/v33
rh9/VRSGZ0mHtbPbE39Hlt4ewcc5Uz6XOcPnWrG553tBhfteEHzvv3hwXxvb
hF3M3HFrrx9R54KdMWVubCYfX9cuxPHd0hm+WwYXZwzI7IkzCOLsnNv/yYwO
a7C7vDRlioUV5vomXufju7Kvc/y4qww/bjnlx1kz/LgbkdeqB8dF47PUQVor
58ZgPye/2dYk/jJ+KWVGveIxTDuiPvqLHo7w9RH7Rd7H1L6HVskOswfT8tDR
sl4h4Grb/KmTPO+SX5VNM90ssfP3jia39hC86//OpDdZZ7dJlvxGg3icZ3lK
t8EgCSNnCg/k19t7bk/Ti/sejd9DfH9Fi8bhs+GX67+QePr14fh6eQxfL5fy
0UYa/ZePlqzgc1NthxtuXOIadV7EGIZr3i3i62HOfrB/bIiwJ2rPu1tdWR+O
IWddH/P4OpOU97eV4f0toPy4PQw/zrd1fv14q1TMCKq3nDk8EAvcOhtuk7ru
2mW/+AV6Sbgu0C1ou2kA7nxavY6PbyynPLhuhgenQXlwzQwP7msuxysMZHiF
0rtazlbU+mCkuLz6nnQn/KwXZ9XQ9W++oUnYqSsKO9PRv+zmo9bMGIzIVZmp
St5rpRLJhsqAeAw5N+4G3gpAuUFxXlYkDzRSHuJMhoe4eZ13sEVsIjre1fow
9HsE+g6wm/CJ5L20YTnnw4UycMOBB1P2zIzH65csM2RInXlr+8dfO32TMPnY
tnm9FEIx1H+RxUjyvDzKZwxg+IwDKW9RkeEt6l40HVhLzkGOw8IcLVVXLB69
YmgDGX9ZOHnTeuVkVBuYrm2zOBIt7pZce0ri/yjirmuIfTL2VirMOhwQgtod
cmtiyTpHZ6uPEXWIxYe3VewPHI3AUyXjRVvIebbxTG5alBWJRq31qskZAdi1
6pJPL7KeCMqXdGL4kv+vrvOO5/L7/39LQ0lLe4iiqaWi0lNGi6SyskISSVbZ
W2bZe++RLVvpKSRRSCINlRIqs9D2O1evy/dz67r93rebv87tup3rvM451znP
53Ee98fcC8Hpjly+2G+e0zs9cSPeqB0W+U363ydvvqvh90TcdHhAUXmRJ84v
s9lD+WU0NjjfqCpMROvZaZf2dfuixR62z5tI+YRdSouNOuJQOiJO+vIjd+Sp
XCelQ/o/2eTbNq0VXji/9h7fETlz7GlV4qDWgUT2A5ISdwzxrLP+Vva9bvC4
t1ieipe88v/GUZDPiqNgPI7KZMXVUMeKq0GPjqtlaV0nMHSdZv7Tvzybbglv
PsUf/TNyBTgzH2SUUr4tO3sMB2WS4MfPhX2e7f5w8HNHvBPFBRppixjamQgz
dcKap73yh4qMhfLC5HclCK2+a3PbE+Fh3nfxNxF4S19rggR57wNaHyrL0Ie+
XcOTEn4uEJUEbwp2sBvi0c1Rr2Sp+UzrQFUYOlDr5qMj/Mkkjg9839vzJxi3
VCYGepN6NKwvc5qpRuOluSlqF5f7YmvlhGPU+Y8wrRvlZ+hG9WndaLDFv7rR
JSvdv0/7tgSHKqOf68R4gkSkXq0MKU/jPHyjQ9YGvm9c/HHUygTTl8d4FpNy
iUvDM/aSdT+7Xmow4Uwghu8rSRCjdM20/tSeoT9NvTLkOLrIAtsXJufJTPVC
+/6yxTNIPREW80bvFDvinc/zbbw6bEBcoEmeWse+66/yGxi+CpyNx3GaTTjw
V2YFNJN6Yll5EDiw8iAYz4M8aX3rR+1/9a0cSWFlp8Vc0KBOzNb/kDnJk7J4
DCg9FK17bWToXrV+nP86ujkQ+u8u63y/6Apkhwf3UedLjq3z31QdvwgSZ/Ly
Ht3yheUKS40pXx5XWierxtDJPqT1qicYetUrX0eNg3ViYNT786qpa93B703E
UAAZr5ZNOrs7NTMA5fxfyBwJhM0Ns+bWkbhxH61j/crQsXax8l+MZeW/OJ7/
LqD1uW/a/9XneoUsfn2GSx8PlMT4yy/2wpNnLTu5SfmOgvsG4l7X4MX90vtu
Y07Al7H6exd1b5zW8y5n6HlP03reDQw970c2NVmNafHA7r9MLWebL+QNbJ7S
SdaZODGn5Vq8XnBBWihlOEQLqucNnuIj73X/tYWjKi0CDva4vp5q6A4jVYe5
DMj4irHyTRhk5Zswnm/+pPXC5xl64b20XriUoRf+1f+4edHbUDhqopUpLeAO
pv2b8yeRcWnfVvpzylgi1BytdX+43g8eif3kGKZ0vj6ccq/C0uBtWEbAtuEQ
uPt8qC6H9POk774hPT2eAK4hL2aL+sKKrOI6MWp/XOCeLHnbBzrL24cNpV1g
pmZpNZWvtSuLNCS0OkP/Yd7TzxaZQnGRYo0r+b0fuFbevbApFdY1H4uu8PIG
DuftEV/Ivj+F1h1/ZuiOw1jnFSACf88rcPy8worWI6cP/KtHPrljoXl2kS+w
exxWvmAmjcnVg4XUOL6m9cgnGXrkw7RudxVDt7tgjkLViQOJGPBtLvso+0GY
t2zdwyDy3rMtp/9MTg5C/w6zuQ/EoyCqfNCuifTzE1rX3M/QNc9+u65Z4GkM
/thwQz9zNlmf139Io3jRh2i981SG3tm+x3aBOrcW9prC8B7bSfjrqfarH2OU
jomlgwaGDnqQ5QcNQ55//aBh3A9a3MfdcbdNEk72a3WPuWSPo7u1PnuS+enC
8puGTJbfNIz7TY/8LPCTZE9AB0vFkqYuJ5zy5dz3n+T3BqXXBaw5H4NnNuXp
nLNzRcdp0+ZR///6zM3SU59l6KktLL90s4n4QzK/qHf9LmPozOxsiCX1d6W1
25qIyKHx/U2uL+tcoDDoVKwbdd8eZ7T0OkWjlb/G3e/iV7FzzYNVI6T+CQty
b5QVh6BSnRhnU7gOHvjSKHSP/N5aG963zyUtMOdV5LY1wr743shi5Am1/9L6
5TUM/XLxqbpbMkEXgOsqX0nur0g0eljlnkG+F0h9sdTq9SLQuDj6brq1BdzX
fOdOcTINOA/+ai0PxLOP2mKL9c9j2cF52YdJ/V+es/TgfQw9eAuts17O0Fm3
NU62aO0OBa36TVGz3Uwh4bVYkDW1PgvW7D0uGQNPHk2z5HE0hOnTM86tJO2R
ovXUQww9dT6tp/7O0FOrs/zZYT7Lnx3H/dm/0Xrzywy9+dTuzNfDbOfgc9BP
t10LlXFjqo/hCHWP2kM4/euvKNC/HVwgJS+Gxb82bbMh7RGk9em/X/yrT3+i
a+PkIBIMuUOC98LHDMC7rgAmk/o1TQTeXa6wB/a4e0scFprgSP88J+q8xcE7
csqc5DjIljS/nJ2vj+8/uJRwUXr/BSeVJtWFAtd74Wdnfpug4a/JGU6/qXuh
LP07P0P/bnIgpHh0fgzJa89HDWYEwMmdX0IKST+8+zCLv+R+ALxaErFI4rgD
NLgmbqO4+otpvfxqhl6+J0BTbIdwJGQ92OLxTsobHLMriygdYsnxLZ43mpXx
1rk5Tw5VmmCehNaWLurc76P2Hf8MOShwTULLjaboPfpElSp/Tevu/zB091qf
U8tVVNxBrll9ulGxD2o01SwxIu15RevQoxk6dB9n55eJHlFwdm5KgF6yDyQt
EKyjdNl5FbwgNhoL2b1nBOt3hEKIH8+GXeR7nHJuUu/kL3EwpZJHc0WlF3xT
dTm2hPQDSHJKGaw8iuBbZeew3wvjv1y/up605wCt99/P0Ps/a/njINTvD4/m
R3v37NOBNUFCpX7Ud0rr37sY+vfPVTLkz2af+d/7Jxr/p3+/SvMBXjP4AEOS
PV9SDnghPjW/IGsQDEKl7z9tp3ggRyV6rb1jIXn4ZszzyZdQccv7tTdIe5Q1
3nyYbasGVwMeZwQfCIfhtsIlVP5+nOYGuDG4ASpSMV2nm2PgISY127s6oLrG
JHnq3v416eRJMqqR0Bj9KiB7lSduOFnUspWMe4noy5YJzhEQXPG00S/ZH+MU
1UezyPNzaf7AJQZ/wHyZpE+ynjloWz/TuTQzGIYvuRSMUj507L1SAqP+4JYi
cvHY5mAY27vnBLWe6NG8AksGr2DPTm/FeXrOIHfyUl3vjih4ztv+QJo8r/Fq
5sUUy0Cwnm85xV/SG80uc/mbk/pHG3+W+CqGgCW/Xud3kmcvepc0r52M+xdW
f8JLVn/ieH++XT4aMTLqR+JHo6XPr5F9p+/Ll/3U/Xmah7CGwUMQKhE3VV7k
DYszW3SK1GJxcbjGU0qnv0zySNA+tkBQuia1cMm7BLz9xvGAKNkvxE30xaa+
DoS9AXHsb9Licb/5pJttFL/lPzgMCcZv/NInykL2mt2HVe/ZQu6blPD7pDzW
W7d7pbkvBsllZ0x8q4v4YZYgtS+P0PyBdAZ/QID1XhRivRfG3zvObchhcBs4
3phbu9edR8VhV3H+zY54w/ubdibFpaH5DNwMPsNLVj+jMqufYbyfS6xsNKQv
uELskuBXn0W80Y1PpyiKtPMizXN4zeA5vKF5DtoMnoPv7FUr9hhY4sTX4qsf
fA9GnfA7cfcprsJjboO2NdEYMzicxc3tB5vP8BYdo85PVnvNSR52wORdDY4J
JeFgZniisJdqZ6FErdEHZ1gixaZ10ykcFSbemd5Oymf6hl78MtsaJ8RsvqdT
HYkigrGzg0l5tEdw4uO23bixMiqxnD0c01Xv+Z4m731C8yWOMfgSTazvF1cy
+Akqa3hCHpH8fP9k05XnP5C4MTXi9QWKZzVRct01dk+w+twqOuQZg32tvdtM
SfulaE6FKoNTIUPzHA4zeA59AiOOpxNicZfbpoEMBXVYiW71qaScL2yC+NZN
0ehuUX9FpsYY+57XJKqRdm6muQ0H/4PbEMXgNijQHIw/DA5GTjKH0ux9uhja
lDvwQD4CTBqvWM38/d98jNdw26JvTzwap/+IzZG/hry2glLzqX152P2wy3of
jF2efa9ZxQdEc7zkKP5SFM3NCGNwMxbK7FQWIfNgRUByzLu1ASgm76VB+XpY
Tng8beJYAsr2T795cUUQWgv710wk87yWY0dfVyv5PmUy9gYe98d3lxbqUPog
PZq/Icjgb6ylORtpDM6Gqg5C9cZQlLHX9VKO8IWuO0EPE6jzvZYjSlmZQRi/
dIA3ZMgR3s4JMG4j9bhYfi/rGwjB8yI7f3/MMYPZxxu84qn7WsguVDfPDw/v
GPmitiYYlz0aWzBE3etYmL9uNsmjsxU8ep7rBuBcDtnlXKQf1Gm+xx0G38Px
WNMDh8dBOJfLi6vfwBA7HxuaLyDPnwwwXDT1YxR2ZhWUclRZQNiM0TBl8vwM
2bmbFgmGo6BT9Mjq71pQn+qUQO0LA9c/96c2hKN+Pd8pbxFe1M34MJny9Ysd
5dZ9ZnEZL75UuBdy0h5judfYpJL5PIX9mmyXqC/ueP+06H6oHSRfSD5CcX6c
WHEUurHiKBiPo4ZZcTU2ePyNq3E8rhalOSTRDA5J4dXtbaXfLpB4JO7IxuJd
wFn40vErqefEw1bBowviIGHrt7WCs/Vhia66wTlSz+D3hSOPmyPA8nowp5XZ
AUz1fff9G6nnrERDktLCAFgpsXz+aV19CI++3uVG2mlL80y2MXgmldZyW+9o
h2HswJ1rP0RMSfzS/Ik6Z55rzeKWSDG4JU8r5epNC6+DteKOTE5hbWAX9rTb
SMp3q8GT4KwYvJdcfaNgznVcFbLujwxp5yyac7KLwTnZSHNOChick67jQ0Oz
lP3QTUZww0QhI7TOyTCtIO0XrbnrqsDnD/c4jHkX3jaDsYg9osGkPN1ywq8X
r43RSd6vKv6VNdxLrbS/Ra0/NC+lisFLCVbuuLjOxgOMZ0rIzmo2Bb8DMIvy
nbRucXhbpBKAzWPB11vSHPBtZ0iFOKm/4pNxoVy6K94W3qwp63cSb5h2b7Ij
z9ux8iDkXfs3D8LxPKiI5rEYMngsZ26sUI0SkEefoNNmYX7G8Kio6CvFV1H9
wuK0TGFwWhoTPswx9w6BnHyJ1OEES2iZmPeR0rXdGrI7o3MzEEc0pb/X7DsB
23ceNTz5539cl2kMrgs/K+9DXgZfxS8xY0Pci0j4zp5pFR5kCh8mlM5LIe1U
H7hYymmXBGnnq5ddT12HV57ImN4n68kFmrtyg8FdOcnKf8GIlf/CeP4bv5nF
k2lm8GQ2t82ew3YwCNwXzPnoNsMAFNl4dgn8oXQ0RyyfPz+GSq8MAx3bzHDd
ej17ijOzmebPqDD4MxI0f0aSwZ/ZpNrWvzbbD64osxW4LPPAEd0X0ZR/aG7K
8RticyJhf0N3ScNrF5g0sC3mMsW3LFoDbLdjoeFNbcfFU25gv9bk0iKKf5L+
N98EV1a+ieP5pjfNtxFm8G3kab7NFwbfRjDlddnji1ZgYTf6uDEwHCeor0ud
S/1fw3rXWOq8RNj+8KJP821n0Fj7SPgkpccXOruxuzgZJL7Zd+wtcAD5oMKe
lNF+uN81JBZb54HpPxuNvCcHoNDpHxwDpJ6SCj2HyW8kUOrXvENW4rG4+qXq
0VfU/flbNq9rHQzww9mbH9d5RmOdupHzMfJ7Ndf/+K23LBqEn0gfjCpzQ603
Pue6yfPNNCfnPYOTo8E6rwA31nkFjp9XPKD5OTIMfs5YQpjbZYmrIDB9efCw
WByeEZkwh/p/cSbNz7Fi8HNe0JwZ3/f/cmaE4tle5k8twS/rFNlk7ZMwaKNE
ocNjEuf8kBYO8MrDwAFpreSodOjyDxJc/pLEmTSH5zaDwyP354qXumQJnsmS
uBC7XhcvcIu/+tJK9lmaz+PO4POcbfPYzsfvgB1HVJ3rF7njnT9nEjeT9iyi
uT1sDG5PDcuvHI1YfuU47lceJu2+WEv9Jn5Jcp382D8NnZYbZTS+pnhTf/3Q
kdftrx86jvuhFxme6HBWT8VzAR5cqaeTUFBNf1pQfz8oTXhs6qgUhKWikjy6
gkFoOyDjakadh9P8n6sM/s+lPd42x+V14MzQrPUxs52h5uh2PYqPKpDcHYn5
8fjzsbp1p4IFvO5b+1iLjMurn7NOmhV5YlRDwZWOfH8Mmn3Rq5/Mq4tWq3cW
3wYQFYxw8UozxLuXpy8cIPWEaJg2KTjGwNJTUpdrd15HM/upq5XIOA7TvJ0O
Bm/Hp97S+smJYJDV7AzlHgnCP00N0hup88aJY92Xp8Xgm8hBg4OzrEHP/L0w
JynvfS5gEqpuD+/mZBrWiRpBaLzkr1zqfgXNL6pn8IvaaS6QM4MLZPbNvPwF
VyykNrytMXf2BZ+W2/3vflA+XDmNn/tzYIn2qeenCuNgU0D5DN6efrCi+T8Z
DP4PP83/4WXwf/6YcLtNkTGGCsGMs6u/u8JvBykF6v8mHTQf6SKDj5TY/cYg
tdAXDszIYttRo4TPqmNEPpD2z40cuSuyMheyj6w+2Q/Xwczz6dGOz2Q/onlK
dQyeUpWwvoCiVihE4q+E0pZgeL8j3DGB/F5jy3Sv0O8JMHRk9dfUjVfAZXer
SgpZT1Qv3d80vacQtt5dNe/k10AYDseVuq9I3CU9x+b6u5uQkHRVOiXeBzac
1cnO6e6HOJrXxMf+L6+pQOp8PHzJBleHjbmdvzIg98CHo+0dJP43M7lk8d4T
AhKO1l/l8wSekPU7qfM6e5rvNMLgO8nGfw+LF0iEvlkhvf26sbCppqRZn7on
2fpw1O9hDMRJXYtKFjgHPVyrfNgoPfiTijt9fgmwxb8vhFPRBeQG7Lz9SD0D
NCdKiMGJkvfimMkfnwZjBz81Pah0RtWDjr2uX0mcQHOTehjcJFk/ox5e8nzo
5CyufuF0cEzd43KMzIdzXLozD7cWAM9arYc7q/Jh1zO3wen3++F0SentxK2F
oL8/dGbHyZtg9MdfdT5ZN06Vx3xUs4wF06/ZYYk1zjg1uH+vBhmXNTSfqpnB
p0pNP9H31i8Z0m7WnuSqj4FNvrWxCyhfJ5rX9ITBa2LdP/Hb91fGs9f2/+6f
ZNM8q+cMnlVshvMdg4nhcNPm0fsEvgzYeELn4Aj5vbut9tQrTcsHDaHJO49q
J8HXGPmuwtfU/WSRsIZ9ObDv+a4dGe0FcMHl9Bx7st6G0JyrDgbn6pNBXe+y
XfmgVJyXwGYXBJ7+hzSj3/dDePLFuRFOudBjWbZp2bRg4DmxYvXHj2TeruF5
+kIqHe5NnHGizcMdfarTqirI+nCO5mU1PP+Xl6X2x3Gspi0XFs4+5uMVcBPe
OOFRvRayztwS47benQ0P6qxW6O3MgVsiYS1H35B9n+Zr8TH4WsH6z9k1lhbA
YgV2e8WtxWBgZJupiGT9V5jOw5GYCmrql9mqBv3w9O1XTkDm4XLbfVV82j7w
UkxwbcPefIyXydqh20meZ/Un5rH6E8f7c+vP5M3Vu2/C7Eu2fzpe5sAVx8vV
2m3/ze/iK5l5PyUvALJULe5ECt/EbseE2Fwy34Jaawstm+zwolVIyLu62+j1
bilU15H9cfVS+bPVTnjV7ZmYXngJJsyoKwwk/RBJc8N+Mrhh2xSGFTq2RYHh
sojPGz+HgfGTaO6ZZP6kXR59m/QyGedb8/XIzk7CvLcDKu8H/sfLOsLgZQnw
/H0veLHeC+PvVaY5Y0sZnLH+zb1tB1VjMdDf8L7aiVAUnqN8ypF8pzYsDhh4
MXhinTZ/+xmbWP0M4/3McbTmXG6KFjzr2CFWnuiJbV8TuY6Q9bOW5o9JMvhj
m2n+WCCDP/ZrKLVzZF4uiXvMfbiO5uOubv7ividkHEtWabaPkWyUY+pijjce
sLfjYsW2IbJv2kzNZC8OBpuEkjzXL7kw6xj71kYyLk/tqrpXzPHFx678irxz
8rF7yoHWWtLOKR4rBexrcjE8MUMrXvc27uA75m1bQvp/6LJhBH8m5pwOm/nr
RxEO3Wgdia0n6xuLq4YRDB5aM837esfgfdW0DB8ouO6ET9dPk723wwey74V7
F1Ln8E5Le06HhOOx48euiG0uxrdzn2lFkn3qJM1Va2Jw1cb5Y38Y/LEZ1odO
ZE8twEWpxorLBdNQQ/X70+tk3l4TfXWrRj4XTyXvyfXeloE9KcKry8j3ZU1z
xowYnLEemjM2wuCMedLctgMMbtt8K/3pSqJBiN4/ujd2B0DqAd3P2b/+m+d2
LkR0Lb9uIVZpLeFo2pGH3sLDEdoP+iFLV04g3DILz01IqckUMgEfoaZJ5yj+
PM15a2Rw3pbUauot35SHs5PfTOHyzEQdLh2D4y/IONouFF37pwBTNkgPTzib
i2ew8WwpGa9p5cULan1ycYnC6bc1P9Jw7conc6TIPI+meXEfGby4cS6cDYML
5zV3St3olEw86+Gna6jkBaN7n/P+JuXWhYqiPnvz8GOhdK+gsB8eaS2oyybj
IpuwYuaCc3kYPsdWgPe8By4aVv7VRMof9L3uFenNwtP24qUPJ+WhnNMLLc3n
pN8m58rE2aaiMF+80NvVmZiSWzZZgcxbYZpHl8jg0XVNnhmz1DQa5xx50ZMd
HobxfeuTGqm8w81MVkMrD1sW2POov76OwbKP5dPIe8sXR3nYe+ch17meM7dU
HND27iafh6S8XjG/ZZt2NkZm/nLT1vNH44NxX8VI/SbTkp/OGQpHAY3G7U+q
kvHT5OVas4cpP9ztFsG1Dmi2xD1nR54Hrmk31qB0eV2mf+MobGTFUTgeR91n
xdVwjBVXw3hcrUdz884wuHlCTwM4rQ+7wkt515zukSuwsn9ZAXXfaW2PpbHm
2VzI2Ttvt+LDBPgjbFs0QNYHA98tF1eZ5MIJUd4PpQqhMKV42aN4sk8Jw8eg
LV99sMF0vayWlQWmlbdJUPcT2Gn+HheDv7dz2DvprGw4FvjOtDH9GYAHfCPG
blF6EJqzF8vg7BmsenXm5FcPdOPMeP1zixmy+91pFCLtnP6mK8tEKQU5Xk2V
DBNJxNAn12/PJfOkhebyRTO4fB9oLt8RBpfv4alFKWc0jaBprsmHMnctTL7c
9rKHKi+4nzetzhhudP05ZrLWFhxlF66k4lL908eKrpYm4UsZqXfOJ53QOk45
+ijJ95Hm+/Ex+H5Bg4tTL7Y7Y61SW7jKhRPIq4ErI0k9V89tPBblHIAFR4sN
v2X5oEJg5hp3EjfmDEp1fP7mCc4ySefSb1mB9OFHxivI81tYeRCEufzNg2A8
D9pK8wMFGPxAJ89dzS9uReFKGc2xrcMGEK20K9uW+n8izRW8yuAK7toyusGg
2R/icowu3z3hA08aMrip+yQmKnP35T3QBMdbNaIe12xwmGPmaur/zpdpDuFj
BofQl+YBvj/+Lw9Q3uG9edTSZFgrcyTfKCECWtX+TNIg81xSJz2ulr0U2mvU
Pj72TgGuzHWTa0h8uILmBHIxOIGTv//NfzF8+G/+C+P5ryPNPyxk8A8/Xusz
ytqpj0HpX5M3rTwE3JE93V9IuWJE/onOLbEgKpZeLjJwAv1rzLU/kHlYTPMS
pzJ4iVw0L1GFwUu0xo+HFC/kQMKXuRYS103xweGtW2aR7/ri6vOL13dfBZ6x
2YIXB72BLWiBHMXj2tVm3C33NBSUr2V5W7SGwKkHTtfUyXt3sfJNONb0N9/E
8XzTmOYxTmXwGJ1oHuNdBo+xb3/46sjwBKi8+eNEwMMAvMLH2Ubdi5P0vDxf
dHkaTD0Y+dknLRlK5KfZS/eSdSwzweibVh7kSNiePRafASa6nRBN1vmaMtUV
fb1e8GLTDqPs9a5Y68q/N4m0P/rZq5o+Lj+QOh5W6VgWiAI7Jz/cTOaJ+FCY
zwEeR3gkZfU8bWM0qjcsWbGOujdVdW+bz/siMBPc9Hb/QkWI3VAwd9/LfhCl
uY7RDK5jDOu8AuxZ5xU4fl4RSfMeB83/5T3G6d+/o+fiD8n2T3ImQDJ6vLVd
9XmEOsdm8R43M3iPiTQXMY/BRbwQEh/+aX44yqRcmNVgEIJH5WdlbCflQ5/Y
M/zmB2Ptvt9eub05UL65V3r95/9xI1UZ3MixH/H+2VXxODspbUP1c0vcvvxN
sRwpl6N5kiMMnqTf7118+nvNUVzDeFr1klO4++e51pcUX4vmTDYxOJNzU0/u
9+0Nh+5Kpzw7zjiYZbP8QRQZ3yghzgVC8f74c1ts2k83f3zVHSBxjIyL9bcd
K+ev3YtvV3OIbQyPgLHNLg/ZSHnd8/KTcjcccEBVatolNR9MCo2IryLjq1Nl
2wE77HDqvK1jfRJuWBLsEQOkPew0r7KTwav8EH/wXj27BQaD3sMLrd6gkqM9
u4/UI5c3O1Yi2h/P88yMnq0VC0lsFeKmpB9K7NsWTCy3xfOdDWzP3vviHI9T
ounkeanV7UlSDm4IIsHn1u7xRykOn0TqHHLU3elruLgGSOvnGl+/mYGBl14v
Wkb6gY/mQz5i8CFLJ0U0KrVqwwWz/bU9q4owYPq+G9ZkXu0w7cvdneiH55Xu
LgNpFeh6NufZPVJ/Ak9OxdcWMxRZ9umEyPxAzDD+oUDdu6ujeZt62v/yNgVo
3uY1BscyNv+ljY2UEQg+flWjPOgO7ubZL0+R8j+ntT97K9+AH2VhTtrtwZBl
6WDTRdrvSPMq9Ri8ylCaD2nH4ENesXn+ZWRnOHxTOWhun+AKV04cL6B4Jgdp
nmc0g+f5mV+yUf+XMUzN1j/2x14ZTG9VzaD2NTOOPVbJKYFQEDkk/czPDw5P
VvfiJuOoSPM/pRj8T7fY5RrHfgbDwtb0s5ucXUD5ZsAsG/J81PNLWjusyHfX
X9X0PdMOipa+KjYk/RZaLKTtJhsHVSfX52oGhkB814RFa8g8f/ZTY43vnzjg
seQuj812APW7P+6mUf4FNF/0CoMvGtc37ViDeQa8bij7ImGdBAFs0w8vJf1T
OW/mueMaBpBewv7h7Hwf+H5Qcv5E8rvu0jxSVwaP9KtGldqDp4EwYmCrtnHf
NVg7E9UDqXn7vOlIwWAAQFJr4+EbHvj1jKsbpduSYS9pef8zDCzOnU4ZOu2F
ebZvJVx+/Y9reoHBNV3qsV/SPzcU+t3nRC9dmYB4Skiyi7qvS3M7NzG4nWyW
LsLecSlg+eHkqqBLSfBii9NkLpLXrOxV2/xkTxHIuY8occ6+CTY/9WWLSdye
ajf2o9OkCMQcM7q/haRBsvR6vitNJM4pFkrWSPaEe0uvyOZPSMHDWu+yppP3
7qZ5qpYMnuolmi+6k8EX5aR5qj4MnurrSrc7bUUuaP82wGjG41BQ/Sy8iIf0
j4enf2rQjWJoW3r68ka9eGjEab3+zf2gMhQcWpYaB5P2d5l9Ec+HUskDv3RI
/P+D5qyaMDirZby/Vao35gK8KTyQ6xMDhYoCIcmkf/Y1vZuyJq0EJF8lzqwu
TwDrpHjdsEYSV1+Vvt5bnw3Lgz04PUy8cPY9hbpTZL+Lo3mthxi81hy9xybK
95JBzN82u2tTKXQvPnX7I4krdKY+OXxhXjJ0w+qRPS9zISj4V/D59//ju+5i
8F2tj1XzWzTlgKSsl/z3VeWgrz3k+i6D7MsiMpE8LdFQ/aBdP/ZrPNo6TbRP
I/uOppuhVbqCG0yzmJM/eV0Bmidpphq/64dZVX/7E3xY/Ynj/VklWb+AfUsm
bHva1qA4Pw/k2wbr28n+20zzYycz+LHsmTZX2peagVj+7uQD+wrQ4M7R1iRS
/6vJIusmTzqOf04oruhdUIKb2F0OB5F1o3FP5k4vF2tYw11b4a1WiGymk0tt
SX5qZbllX0JeCswqUxFtmRMALbvnPqgj8Rg3zbN1ZfBsOc3WlOiUucHdTFNh
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
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.09259458092137765, 0.7486122776543305}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 
    0.5800000000000001, $CellContext`k2$$ = 0.8, $CellContext`k3$$ = 
    0.385, $CellContext`k4$$ = 0.7250000000000001, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.13, {1, 1, {0, -1}} -> 
     0.375, {1, 1, {-1, -1}} -> 0.55, {1, 1, {-1, 1}} -> 
     0.7150000000000001, {1, 1, {1, 0}} -> 0.13, {1, 1, {0, 1}} -> 
     0.375, {1, 1, {1, 1}} -> 0.55, {1, 1, {1, -1}} -> 
     0.7150000000000001, {1, 2, {-1, 0}} -> 0.79, {1, 2, {0, -1}} -> 
     0.25, {1, 2, {-1, -1}} -> 0.54, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 
     0.79, {1, 2, {0, 1}} -> 0.25, {1, 2, {1, 1}} -> 0.54, {1, 2, {1, -1}} -> 
     0.25, {1, 2, {0, 0}} -> 0.6900000000000001, {2, 1, {-1, 0}} -> 
     0.25, {2, 1, {0, -1}} -> 0.7250000000000001, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.485, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.7250000000000001, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 
     0.485, {2, 2, {-1, 0}} -> 0.25, {2, 2, {0, -1}} -> 
     0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 0.25, {2, 2, {1, 0}} -> 
     0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 0.25, {2, 2, {1, -1}} -> 
     0.25, {1, 3, {-1, 0}} -> 0.78, {1, 3, {0, -1}} -> 0.25, {1, 3, {-1, -1}} -> 
     0.485, {1, 3, {-1, 1}} -> 0.6900000000000001, {1, 3, {1, 0}} -> 
     0.78, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.485, {1, 3, {1, -1}} -> 
     0.6900000000000001, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 
     0.25, {2, 3, {0, -1}} -> 0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 
     0.25, {2, 3, {1, 0}} -> 0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 
     0.25, {2, 3, {1, -1}} -> 0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 
     0.25, {3, 1, {0, -1}} -> 0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 
     0.25, {3, 1, {1, 0}} -> 0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 
     0.25, {3, 1, {1, -1}} -> 0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 
     0.25, {3, 2, {-1, -1}} -> 0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 
     0.25, {3, 2, {0, 1}} -> 0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 
     0.25, {3, 3, {-1, 0}} -> 0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 
     0.25, {3, 3, {-1, 1}} -> 0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 
     0.25, {3, 3, {1, 1}} -> 0.25, {3, 3, {1, -1}} -> 0.25, {1, 4, {-1, 0}} -> 
     0.5800000000000001, {1, 4, {0, -1}} -> 0.8, {1, 4, {-1, -1}} -> 
     0.385, {1, 4, {-1, 1}} -> 0.7250000000000001, {1, 4, {1, 0}} -> 
     0.5800000000000001, {1, 4, {0, 1}} -> 0.8, {1, 4, {1, 1}} -> 
     0.385, {1, 4, {1, -1}} -> 0.7250000000000001, {1, 4, {0, 0}} -> 
     0.8800000000000001, {2, 4, {-1, 0}} -> 0.25, {2, 4, {0, -1}} -> 
     0.25, {2, 4, {-1, -1}} -> 0.25, {2, 4, {-1, 1}} -> 0.25, {2, 4, {1, 0}} -> 
     0.25, {2, 4, {0, 1}} -> 0.25, {2, 4, {1, 1}} -> 0.25, {2, 4, {1, -1}} -> 
     0.25, {2, 4, {0, 0}} -> 0.25, {3, 4, {-1, 0}} -> 0.25, {3, 4, {0, -1}} -> 
     0.25, {3, 4, {-1, -1}} -> 0.25, {3, 4, {-1, 1}} -> 0.25, {3, 4, {1, 0}} -> 
     0.25, {3, 4, {0, 1}} -> 0.25, {3, 4, {1, 1}} -> 0.25, {3, 4, {1, -1}} -> 
     0.25, {3, 4, {0, 0}} -> 0.25, {4, 1, {-1, 0}} -> 0.25, {4, 1, {0, -1}} -> 
     0.25, {4, 1, {-1, -1}} -> 0.25, {4, 1, {-1, 1}} -> 0.25, {4, 1, {1, 0}} -> 
     0.25, {4, 1, {0, 1}} -> 0.25, {4, 1, {1, 1}} -> 0.25, {4, 1, {1, -1}} -> 
     0.25, {4, 2, {-1, 0}} -> 0.25, {4, 2, {0, -1}} -> 0.25, {4, 2, {-1, -1}} -> 
     0.25, {4, 2, {-1, 1}} -> 0.25, {4, 2, {1, 0}} -> 0.25, {4, 2, {0, 1}} -> 
     0.25, {4, 2, {1, 1}} -> 0.25, {4, 2, {1, -1}} -> 0.25, {4, 3, {-1, 0}} -> 
     0.25, {4, 3, {0, -1}} -> 0.25, {4, 3, {-1, -1}} -> 0.25, {4, 3, {-1, 1}} -> 
     0.25, {4, 3, {1, 0}} -> 0.25, {4, 3, {0, 1}} -> 0.25, {4, 3, {1, 1}} -> 
     0.25, {4, 3, {1, -1}} -> 0.25, {4, 4, {-1, 0}} -> 0.25, {4, 4, {0, -1}} -> 
     0.25, {4, 4, {-1, -1}} -> 0.25, {4, 4, {-1, 1}} -> 0.25, {4, 4, {1, 0}} -> 
     0.25, {4, 4, {0, 1}} -> 0.25, {4, 4, {1, 1}} -> 0.25, {4, 4, {1, -1}} -> 
     0.25, {1, 5, {-1, 0}} -> 0.25, {1, 5, {0, -1}} -> 0.25, {1, 5, {-1, -1}} -> 
     0.25, {1, 5, {-1, 1}} -> 0.25, {1, 5, {1, 0}} -> 0.25, {1, 5, {0, 1}} -> 
     0.25, {1, 5, {1, 1}} -> 0.25, {1, 5, {1, -1}} -> 0.25, {1, 5, {0, 0}} -> 
     0.25, {2, 5, {-1, 0}} -> 0.25, {2, 5, {0, -1}} -> 0.25, {2, 5, {-1, -1}} -> 
     0.25, {2, 5, {-1, 1}} -> 0.25, {2, 5, {1, 0}} -> 0.25, {2, 5, {0, 1}} -> 
     0.25, {2, 5, {1, 1}} -> 0.25, {2, 5, {1, -1}} -> 0.25, {2, 5, {0, 0}} -> 
     0.25, {3, 5, {-1, 0}} -> 0.25, {3, 5, {0, -1}} -> 0.25, {3, 5, {-1, -1}} -> 
     0.25, {3, 5, {-1, 1}} -> 0.25, {3, 5, {1, 0}} -> 0.25, {3, 5, {0, 1}} -> 
     0.25, {3, 5, {1, 1}} -> 0.25, {3, 5, {1, -1}} -> 0.25, {3, 5, {0, 0}} -> 
     0.25, {4, 5, {-1, 0}} -> 0.25, {4, 5, {0, -1}} -> 0.25, {4, 5, {-1, -1}} -> 
     0.25, {4, 5, {-1, 1}} -> 0.25, {4, 5, {1, 0}} -> 0.25, {4, 5, {0, 1}} -> 
     0.25, {4, 5, {1, 1}} -> 0.25, {4, 5, {1, -1}} -> 0.25, {4, 5, {0, 0}} -> 
     0.25, {5, 1, {-1, 0}} -> 0.25, {5, 1, {0, -1}} -> 0.25, {5, 1, {-1, -1}} -> 
     0.25, {5, 1, {-1, 1}} -> 0.25, {5, 1, {1, 0}} -> 0.25, {5, 1, {0, 1}} -> 
     0.25, {5, 1, {1, 1}} -> 0.25, {5, 1, {1, -1}} -> 0.25, {5, 2, {-1, 0}} -> 
     0.25, {5, 2, {0, -1}} -> 0.25, {5, 2, {-1, -1}} -> 0.25, {5, 2, {-1, 1}} -> 
     0.25, {5, 2, {1, 0}} -> 0.25, {5, 2, {0, 1}} -> 0.25, {5, 2, {1, 1}} -> 
     0.25, {5, 2, {1, -1}} -> 0.25, {5, 3, {-1, 0}} -> 0.25, {5, 3, {0, -1}} -> 
     0.25, {5, 3, {-1, -1}} -> 0.25, {5, 3, {-1, 1}} -> 0.25, {5, 3, {1, 0}} -> 
     0.25, {5, 3, {0, 1}} -> 0.25, {5, 3, {1, 1}} -> 0.25, {5, 3, {1, -1}} -> 
     0.25, {5, 4, {-1, 0}} -> 0.25, {5, 4, {0, -1}} -> 0.25, {5, 4, {-1, -1}} -> 
     0.25, {5, 4, {-1, 1}} -> 0.25, {5, 4, {1, 0}} -> 0.25, {5, 4, {0, 1}} -> 
     0.25, {5, 4, {1, 1}} -> 0.25, {5, 4, {1, -1}} -> 0.25, {5, 5, {-1, 0}} -> 
     0.25, {5, 5, {0, -1}} -> 0.25, {5, 5, {-1, -1}} -> 0.25, {5, 5, {-1, 1}} -> 
     0.25, {5, 5, {1, 0}} -> 0.25, {5, 5, {0, 1}} -> 0.25, {5, 5, {1, 1}} -> 
     0.25, {5, 5, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 4, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$50963, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
    1.4}}, $CellContext`moSel$$ = 3, $CellContext`omegaIndex$$ = 
    7, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {2.4000000000000004`, 6.9, 10.000000000000002`, 
      22.400000000000002`, 25.900000000000002`}, "numberOfMasses" -> 5, 
     "latticeBasis" -> {{0.40000000000000013`, 1.125}, {1.8200000000000003`, 
      0.43999999999999995`}}, 
     "latticeNorms" -> {1.193995393625955, 1.8724315741836874`}, 
     "latticeUnitVectors" -> {{0.3350096676548057, 0.9422146902791407}, {
      0.971998136056563, 0.23498856036532287`}}, 
     "numberLatticeLinesToDisplay" -> {8, 7}, 
     "latticeCellOriginIndexes" -> {{-3, 1}, {-3, 2}, {-2, -1}, {-2, 0}, {-2, 
      1}, {-2, 2}, {-1, -1}, {-1, 0}, {-1, 1}, {0, -2}, {0, -1}, {0, 0}, {0, 
      1}, {1, -2}, {1, -1}, {1, 0}, {1, 1}, {2, -2}, {2, -1}, {2, 0}, {2, 
      1}, {3, -2}, {3, -1}}, 
     "reciprocalBasis" -> {{-0.23510553032327, 0.9724819663371627}, {
      0.6011220945765428, -0.21373230029388193`}}, 
     "reciprocalNorms" -> {1.0004977687329344`, 0.6379884550499358}, 
     "qMaxVec" -> {6.286312880368733, 4.008599686919961}, 
     "mObliqueComponents" -> {{0.3419396206251673, 0.4325407427197433}, {
      0.7776756612343041, 0.34117018434410884`}, {0.5183008282126635, 
      0.5838899278653485}, {0.3454662035800161, 0.1735239113010953}, {
      0.6460379374833023, 0.7459257280256476}}, 
     "mPosFirstCell" -> {{0.9239999999999999, 0.5750000000000002}, {
      0.9319999999999999, 1.025}, {1.27, 0.8399999999999999}, {
      0.45399999999999996`, 0.4650000000000001}, {1.616, 
      1.0550000000000002`}}, "pointsDataTable" -> CompressedData["
1:eJw1VX9sU1UUfn1dS9d1pRDEheicxCzzB5mIxhEzz0FCAI0BwSzETIJEJ0HE
aRZjlgUximicohFFVJxGCNEtcxCCYy6eyzYXIWRZurmJc9JtTtgvutJ2/UVb
3z337ib94773vnO+833nnN6585UtL9gNw3BYv1utn2n9ntzp27b6TBxGapc0
rx8xxc/hdP8bE25sLTww9VRrhurX7BjvXZ4i62I9MQSuPvP7678SXOKTJHlr
WJaFjmhJ5aGOME0Wr3Q13ebF6nL34PfVE1Q8lNi3uz1CTetlhiDNbR078VVX
AL44Ks8IfXRk7+K3hYlFFjpa0k7BOnhoe5tD7OeEfVQ3IQNO02YmeB66ilpe
2/XJDOyqkmcUzl/8bt3ZsAMflenKZ+GXjR7z3oOmQL5PQiXzvUL3cPwIXJB0
S6Pw4Cp5UhCV5Rbn4h2y3EIb+lacPhY8maEivmfBeHN3e82nrXRLsyzAjvcP
3+V867MUfMn8nVgiy33Go/Fu/LH7iYffXxOnj1kQF/4ty6/pA4X3oGSb7o+D
ep+h5yx1hxJufJfrjVHZ9jarghQdZwGThFa0HeNC5wuTzPb8I1lQ/CbocEFO
hXeFFws4/gD5Y1LgCG1QhtI3y0otxiPwLePPUZkM12uiYL/+gHUf7Lma+sEh
FJ8O6F8uDZsm5f8oyLch/wyw3FWz8JKlRkGOU/sbg0XbpMCm2MKACHiY3xVi
uStTcLu8bYoCy73Khg3Bk5ZCubq/crCd/crQ3Qywo+D7WeJymp34jpAGpzTe
jX7m59H4fKyQ7VQU13gP3ndw6eWeWB8o/EJkmuUZ6OTyDPETP8/HOqlObZK+
Zl2ipPRNk4+B/2h/5kjVZaJHhnEH6VUO6MO4DBcN0B7W5TqpfrpKA/KzwSlQ
/ecn5asDe/l5J8QYZ4r9nP+4zj9Cah4uw7yOAbZvEs5xnS7ka20EVLys1jcE
ZZy3k5Q/cf19EpQ/WZjhuc3TOthR9U1C62tDg0+v1teBqm5D6+vS38/r6ME2
fn5D493Yw3vgX433Iq+D0pDeB3YR4flaoOfTEO9Je7bahNofNtHVIBt0gLic
QzeplOcrBpz2QJTUfLlxjnWbpkaer5vEch0NkeiRDd8ITKtwnD5fKxs6Dfx5
ySU6LbdFXa6o5/h/0Vq5zoaiJFQAkN1c4R2GLuY7DBlJd6U5nw/2yXW00SlU
3f9BK+/H6/Qi630DVD1ToPoiAQ/wgM7vIwMfl+281C6e5QLToPbjqO4XExtD
fmsFR0Dp7cAqa1o+POLS+FwsleuoO6v1XoDVshz4TePzkNOP2ZDbY0mG+nmh
+1T7uWPUxPFnSemRpGucf1LrFSbFz4Hq/TV6med9kb73U71KQJuZYIB4ndeE
IcB9dYqUPi5sYX6DkGX9DFHN+nTDLOe7SOr9GDzG+idglBt6Fk6xP3k4zfFi
oPxLkOqrCGxgfhfgT56fFDzN826g0tuG4/La4tV+5ej9HNb+2DFgqbl38Rio
+E5Uftk13o31vOB8Gp+Ph2fkH9CkxnuwmddZUOMX4v/8FpWf
      "], "lineTable" -> {{
        Line[{{-15.940000000000003`, -12.08}, {-9.540000000000001, 5.92}}], 
        Line[{{-14.120000000000003`, -11.64}, {-7.720000000000001, 6.36}}], 
        Line[{{-12.300000000000002`, -11.2}, {-5.9, 6.800000000000001}}], 
        Line[{{-10.480000000000002`, -10.76}, {-4.08, 7.24}}], 
        Line[{{-8.660000000000002, -10.32}, {-2.26, 7.68}}], 
        Line[{{-6.840000000000002, -9.879999999999999}, {-0.4399999999999995, 
         8.120000000000001}}], 
        Line[{{-5.020000000000001, -9.44}, {1.3800000000000008`, 8.56}}], 
        Line[{{-3.200000000000001, -9.}, {3.200000000000001, 9.}}], 
        Line[{{-1.3800000000000008`, -8.56}, {5.020000000000001, 9.44}}], 
        Line[{{0.4399999999999995, -8.120000000000001}, {6.840000000000002, 
         9.879999999999999}}], 
        Line[{{2.26, -7.68}, {8.660000000000002, 10.32}}], 
        Line[{{4.08, -7.24}, {10.480000000000002`, 10.76}}], 
        Line[{{5.9, -6.800000000000001}, {12.300000000000002`, 11.2}}], 
        Line[{{7.720000000000001, -6.36}, {14.120000000000003`, 11.64}}], 
        Line[{{9.540000000000001, -5.92}, {15.940000000000003`, 12.08}}]}, {
        Line[{{-15.940000000000003`, -12.08}, {9.540000000000001, -5.92}}], 
        Line[{{-15.540000000000003`, -10.955}, {9.940000000000001, -4.795}}], 
        Line[{{-15.140000000000002`, -9.83}, {
         10.340000000000002`, -3.6700000000000004`}}], 
        Line[{{-14.740000000000002`, -8.705}, {
         10.740000000000002`, -2.5450000000000004`}}], 
        Line[{{-14.340000000000003`, -7.58}, {11.14, -1.4200000000000004`}}], 
        Line[{{-13.940000000000003`, -6.455}, {
         11.540000000000001`, -0.2950000000000004}}], 
        Line[{{-13.540000000000003`, -5.33}, {11.940000000000001`, 
         0.8299999999999996}}], 
        Line[{{-13.140000000000002`, -4.205}, {12.340000000000002`, 
         1.9549999999999996`}}], 
        Line[{{-12.740000000000002`, -3.0799999999999996`}, {
         12.740000000000002`, 3.0799999999999996`}}], 
        Line[{{-12.340000000000002`, -1.9549999999999996`}, {
         13.140000000000002`, 4.205}}], 
        Line[{{-11.940000000000001`, -0.8299999999999996}, {
         13.540000000000003`, 5.33}}], 
        Line[{{-11.540000000000001`, 0.2950000000000004}, {
         13.940000000000003`, 6.455}}], 
        Line[{{-11.14, 1.4200000000000004`}, {14.340000000000003`, 7.58}}], 
        Line[{{-10.740000000000002`, 2.5450000000000004`}, {
         14.740000000000002`, 8.705}}], 
        Line[{{-10.340000000000002`, 3.6700000000000004`}, {
         15.140000000000002`, 9.83}}], 
        Line[{{-9.940000000000001, 4.795}, {15.540000000000003`, 10.955}}], 
        Line[{{-9.540000000000001, 5.92}, {15.940000000000003`, 
         12.08}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {-0.33999999999999986`, -2.0042998434599806`}, \
$CellContext`qPlaneLoc$$ = {{-3.1431564401843666`, -2.0042998434599806`}, {
    3.1431564401843666`, 
    2.0042998434599806`}}, $CellContext`rawArrayOfMasses$$ = {
    2.4000000000000004`, 6.9, 10.000000000000002`, 22.400000000000002`, 
    25.900000000000002`}, $CellContext`rawNumberOfMasses$$ = 
    5, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
    3, $CellContext`tauSliderValue$$ = 6, $CellContext`tick$$ = 
    False, $CellContext`u$$ = {{0.40000000000000013`, 1.125}, {
    1.8200000000000003`, 0.43999999999999995`}, {0.9239999999999999, 
    0.5750000000000002}, {0.9319999999999999, 1.025}, {1.27, 
    0.8399999999999999}, {0.45399999999999996`, 0.4650000000000001}, {1.616, 
    1.0550000000000002`}}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {},
     Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period, t/T = "], 
                 Dynamic[
                  
                  N[($CellContext`tauSliderValue$$ - 
                    1)/$CellContext`dynMeshSize$$]]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {
                  1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open", 
                  AppearanceElements -> {
                   "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                    "FasterSlowerButtons", "DirectionButton"}]}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Row[{
                 Text["Angular frequency \[Omega](q), selection:"], 
                 Dynamic[
                  SetterBar[
                   
                   Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["number of mesh intervals "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 8, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`freqMeshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin], 
                Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 8}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        8, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}, {0.4, 1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 
        2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tauSliderValue$$ = 
        1, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], 
          
          If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
             Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
           LocatorPane[
            Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                  Dimensions[#]] < 3, 
                
                Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
                If[First[
                   Dimensions[#]] > 7, 
                 Take[#, 7], #]]; 
             Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                First[
                  Dimensions[$CellContext`rawArrayOfMasses$$]]; 
               If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                   $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                 
                 While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                  Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                  Part[
                   Part[$CellContext`kArray$$, All, 1], All, 1]]; 
               If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                 Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                 
                 While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                  Part[$CellContext`u$$, 1], 
                  
                  Part[$CellContext`u$$, 
                   1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                Part[$CellContext`glConstLocDefault, 1], 
                Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                  Part[$CellContext`u$$, 2], 
                  
                  Part[$CellContext`u$$, 
                   2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                Part[$CellContext`glConstLocDefault, 2], 
                Part[$CellContext`u$$, 2]]; {
                Part[$CellContext`u$$, 1], 
                
                Part[$CellContext`u$$, 
                 2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
              If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
              If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
              If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
              If[$CellContext`omegaIndex$$ > 
                2 $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
              ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
               2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
              True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
            $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
            LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period, t/T = "], 
                  Dynamic[
                   N[($CellContext`tauSliderValue$$ - 
                    1)/$CellContext`dynMeshSize$$]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {
                   1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open", 
                   AppearanceElements -> {
                    "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                    "FasterSlowerButtons", "DirectionButton"}]}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Row[{
                  Text["Angular frequency \[Omega](q), selection:"], 
                  Dynamic[
                   SetterBar[
                    
                    Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["number of mesh intervals "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 8, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`freqMeshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{915., {292., 299.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax, 1]/2, Part[$CellContext`qMax, 1]/2,
                Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -
               Part[$CellContext`qMax, 2]/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {380, 
        380}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, $CellContext`k] \
$CellContext`glConstMMax^(-1)/350]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
$CellContext`glConstMMax^(-1)/500]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 0.25, $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], \
$CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6013889001492734`*^9, {3.6013891792952394`*^9, 3.601389191095915*^9}, 
   3.601389343635639*^9, 3.6013896010413623`*^9, 3.6013897227443233`*^9, 
   3.601389955778652*^9, 3.6013900783846645`*^9, 3.6013901373530374`*^9, 
   3.601390518838857*^9, 3.6013905597761984`*^9, 3.6013909951881027`*^9, 
   3.6013910467940545`*^9, 3.601391822685433*^9, 3.601392104940577*^9, 
   3.6013921467239666`*^9, 3.601392239999302*^9, 3.60139238315449*^9, 
   3.601392440920794*^9, 3.601392470945511*^9, 3.601392610517494*^9, 
   3.601392688817973*^9, 3.6015965463323107`*^9, 3.601596652471382*^9, {
   3.601596791839353*^9, 3.6015969500844045`*^9}},
 CellID->914277459]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "DetailsSection"],

Cell[TextData[{
 "The positions of masses within a two dimensional periodic array of cells, \
can be described by summing the lattice vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["r", "\[RightVector]"], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], " ", "=", " ", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["n", "1"], ",", " ", 
        SubscriptBox["n", "2"]}], ")"}]}]], " ", "=", " ", 
    RowBox[{
     RowBox[{
      SubscriptBox["n", "1"], 
      OverscriptBox["a", "\[RightVector]"]}], " ", "+", " ", 
     RowBox[{
      SubscriptBox["n", 
       RowBox[{"2", " "}]], 
      OverscriptBox["b", "\[RightVector]"]}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", representing the origin of each of the lattice cell, and a relative \
vector to the position of each of the masses.",
 " ",
 "With ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 " representing the equilibrium position of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 ", the position of that mass is ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 "+ ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.6008874666091995`*^9, 3.600887466629201*^9}, 
   3.6012090394184523`*^9, {3.601382475199787*^9, 3.601382478123955*^9}},
 CellID->143536934],

Cell[TextData[{
 "Let ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["a", "\[RightVector]"], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], "=", " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["r", "\[RightVector]"], 
      OverscriptBox["n", "\[RightVector]"]], "+", 
     SubscriptBox[
      OverscriptBox["p", "\[RightVector]"], "k"], " ", "-", " ", 
     SubscriptBox[
      OverscriptBox["r", "\[RightVector]"], 
      OverscriptBox["m", "\[RightVector]"]], "-", 
     SubscriptBox[
      OverscriptBox["p", "\[RightVector]"], "j"]}]}], TraditionalForm]], 
  "InlineMath"],
 ", with direction ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["a", "^"], 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", represent the equilibrium separation of the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 " from the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["j", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["m", "\[RightVector]"]], TraditionalForm]]],
 ".",
 " ",
 "If the harmonic coupling between these masses has magnitude ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]]],
 ", then the system of equations describing the vector displacement ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["u", "\[RightVector]"], 
    RowBox[{"n", ",", " ", "k", " "}]], TraditionalForm]]],
 " for the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in unit cell ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["n", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " from the equilibrium position is given by"
}], "DetailNotes",
 CellChangeTimes->{{3.6008874666091995`*^9, 3.600887467295239*^9}, {
  3.6012090498004904`*^9, 3.601209051237634*^9}},
 CellID->185095190],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubscriptBox["m", "k"], " ", 
    SubscriptBox[
     OverscriptBox[
      OverscriptBox["u", "\[RightVector]"], ".."], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}]]}], "=", " ", 
   RowBox[{"-", 
    RowBox[{
     UnderscriptBox["\[Sum]", 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", 
       RowBox[{"k", " ", "\[NotEqual]", " ", 
        OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
     RowBox[{
      SubscriptBox["K", 
       RowBox[{
        OverscriptBox["n", "\[RightVector]"], ",", 
        RowBox[{"k", ";", 
         OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
      SubscriptBox["Proj", 
       SubscriptBox[
        OverscriptBox["a", "^"], 
        RowBox[{
         OverscriptBox["n", "\[RightVector]"], ",", 
         RowBox[{"k", ";", 
          OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox[
         OverscriptBox["u", "\[RightVector]"], 
         RowBox[{
          OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}]], "-", " ", 
        SubscriptBox[
         OverscriptBox["u", "\[RightVector]"], 
         RowBox[{
          OverscriptBox["m", "\[RightVector]"], ",", " ", "j"}]]}], ")"}], 
      " "}]}]}]}], TraditionalForm]]]], "DetailNotes",
 CellChangeTimes->{{3.6008875035133104`*^9, 3.6008875050703993`*^9}},
 CellID->413013362],

Cell[TextData[{
 "In general, we have one such equation for each ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}], TraditionalForm]]],
 " pair.",
 " ",
 "A trial solution of the form: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox[
      OverscriptBox["u", "\[RightVector]"], 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", " ", "k", " "}]], "(", "t", 
     ")"}], "=", " ", 
    RowBox[{
     FractionBox[
      RowBox[{
       SubscriptBox[
        OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
       OverscriptBox["q", "\[RightVector]"], ")"}], 
      SqrtBox[
       SubscriptBox["m", "k"]]], " ", 
     SuperscriptBox["e", 
      RowBox[{"I", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          SubscriptBox[
           OverscriptBox["r", "\[RightVector]"], 
           OverscriptBox["n", "\[RightVector]"]], ".", " ", 
          OverscriptBox["q", "\[RightVector]"]}], " ", "-", " ", 
         RowBox[{"\[Omega]", " ", "t"}]}], ")"}]}]]}]}], TraditionalForm]]],
 " can be used to decouple this system, resulting in a single equation for \
each ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass of the form"
}], "DetailNotes",
 CellChangeTimes->{3.601209052017712*^9},
 CellID->160232404],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SuperscriptBox["\[Omega]", "2"], " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
     OverscriptBox["q", "\[RightVector]"], ")"}]}], " ", "=", " ", 
   RowBox[{
    UnderscriptBox["\[Sum]", 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", 
      RowBox[{"k", " ", "\[NotEqual]", " ", 
       OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
    RowBox[{
     SubscriptBox["K", 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", 
       RowBox[{"k", ";", 
        OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
     SubscriptBox["Proj", 
      SubscriptBox[
       OverscriptBox["a", "^"], 
       RowBox[{
        OverscriptBox["n", "\[RightVector]"], ",", 
        RowBox[{"k", ";", 
         OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        RowBox[{
         SubscriptBox[
          OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
         OverscriptBox["q", "\[RightVector]"], ")"}], 
        SubscriptBox["m", "k"]], "-", " ", 
       RowBox[{
        FractionBox[
         RowBox[{
          SubscriptBox[
           OverscriptBox["\[Epsilon]", "\[RightVector]"], "j"], "(", 
          OverscriptBox["q", "\[RightVector]"], ")"}], 
         SqrtBox[
          RowBox[{
           SubscriptBox["m", "k"], 
           SubscriptBox["m", "j"]}]]], 
        SuperscriptBox["e", 
         RowBox[{"I", " ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SubscriptBox[
              OverscriptBox["r", "\[RightVector]"], 
              OverscriptBox["m", "\[RightVector]"]], " ", "-", " ", 
             SubscriptBox[
              OverscriptBox["r", "\[RightVector]"], 
              OverscriptBox["n", "\[RightVector]"]]}], ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}]}]]}]}], ")"}]}]}]}], 
  TraditionalForm]]]], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.5980567961741514`*^9}, {
  3.5991430414266324`*^9, 3.5991431578722925`*^9}, {3.5991432045039597`*^9, 
  3.5991434204693127`*^9}, {3.599995184437109*^9, 3.599995299044664*^9}, {
  3.5999955623567247`*^9, 3.59999570266675*^9}, {3.599995845419915*^9, 
  3.599996134802467*^9}, {3.5999964591490183`*^9, 3.599996636408157*^9}, {
  3.6000782740315385`*^9, 3.6000782764963427`*^9}, {3.6000800168821993`*^9, 
  3.600080195362113*^9}, {3.6000802877454753`*^9, 3.6000802964814906`*^9}, {
  3.600819379450795*^9, 3.6008194857548757`*^9}, {3.6008195456733027`*^9, 
  3.6008197257836046`*^9}, {3.600819776466503*^9, 3.6008198064982214`*^9}, {
  3.600819885519741*^9, 3.6008199013896484`*^9}, {3.6008233445915885`*^9, 
  3.6008233557062244`*^9}, {3.600823461634283*^9, 3.6008234639174137`*^9}},
 CellID->323301769],

Cell[TextData[{
 "This describes all the steady state lattice vibrations, the normal modes, \
that can be modelled by this trial solution. Here ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " is a vector in reciprocal space, effectively parameterizing the angular \
velocity ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", " ", "=", " ", 
    RowBox[{"\[Omega]", "(", 
     OverscriptBox["q", "\[RightVector]"], ")"}]}], TraditionalForm]], 
  "InlineMath"],
 ". The vector ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    FormBox[
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{
           SubscriptBox[
            OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
           OverscriptBox["q", "\[RightVector]"], ")"}]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]],
     TraditionalForm], "k"], TraditionalForm]], "InlineMath",
  FormatType->"TraditionalForm"],
 ", is an eigenvector of the equations of motion of the system for this \
assumed solution, where ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Omega]", "2"], TraditionalForm]], "InlineMath"],
 " are the eigenvalues of this system. For an N-atom basis, there are ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", " ", "N"}], TraditionalForm]], "InlineMath",
  FormatType->"TraditionalForm"],
 " such ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Omega]", "2"], TraditionalForm]], "InlineMath"],
 " eigenvalues per ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " point, each resulting in a different characteristic motion."
}], "DetailNotes",
 CellChangeTimes->{{3.6008875562233257`*^9, 3.600887556236326*^9}, {
  3.6012090526877794`*^9, 3.6012090538738976`*^9}, {3.6013825361482735`*^9, 
  3.601382742763091*^9}},
 CellID->72937650],

Cell[TextData[{
 "The rank of the resulting eigenvalue problem depends on the number of \
masses per unit cell, but the complexity of the matrix expression depends on \
the number of neighboring interactions that are considered.",
 " ",
 "For example, given lattice vectors ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], ",", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", diagonals ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["r", "\[RightVector]"], "=", 
     RowBox[{
      OverscriptBox["a", "\[RightVector]"], " ", "+", " ", 
      OverscriptBox["b", "\[RightVector]"]}]}], ",", " ", 
    RowBox[{
     OverscriptBox["s", "\[RightVector]"], "=", 
     RowBox[{
      OverscriptBox["a", "\[RightVector]"], " ", "-", " ", 
      OverscriptBox["b", "\[RightVector]"], " "}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", and a one atom basis, where each unit cell contains a single mass coupled \
with harmonic oscillator forces between only nearest neighbors, the normal \
mode solutions follow from the solution of the eigenvalue problem"
}], "DetailNotes",
 CellChangeTimes->{{3.6008875562233257`*^9, 3.600887556623348*^9}, {
   3.6008880360077677`*^9, 3.600888037934878*^9}, 3.601209054354946*^9},
 CellID->69846009],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          SuperscriptBox["\[Omega]", "2"], "0"},
         {"0", 
          SuperscriptBox["\[Omega]", "2"]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], " ", 
     OverscriptBox["\[Epsilon]", "\[RightVector]"]}], " ", "=", " ", 
    RowBox[{
     FractionBox["4", "m"], 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{
        SubscriptBox["k", 
         RowBox[{"1", " "}]], 
        OverscriptBox["a", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["a", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           OverscriptBox["a", "\[RightVector]"], " ", ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", " ", 
       RowBox[{
        SubscriptBox["k", 
         RowBox[{"2", " "}]], 
        OverscriptBox["b", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["b", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           OverscriptBox["b", "\[RightVector]"], " ", ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", " ", 
       RowBox[{
        SubscriptBox["k", "3"], 
        OverscriptBox["r", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["r", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", " ", 
            RowBox[{
             OverscriptBox["b", "\[RightVector]"], " ", "+", " ", 
             OverscriptBox["a", "\[RightVector]"]}], " ", ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", " ", 
       RowBox[{
        SubscriptBox["k", "4"], 
        OverscriptBox["s", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["s", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", " ", 
            RowBox[{
             OverscriptBox["b", "\[RightVector]"], " ", "-", " ", 
             OverscriptBox["a", "\[RightVector]"]}], " ", ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}]}],
       ")"}], 
     OverscriptBox["\[Epsilon]", "\[RightVector]"]}]}], TraditionalForm]], 
  "InlineMath"],
 "   ",
 " "
}], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.598056894559779*^9}, {
   3.598056950150959*^9, 3.5980569832608523`*^9}, {3.598057031767627*^9, 
   3.598057031774627*^9}, {3.598057330464711*^9, 3.598057330604719*^9}, {
   3.5980584907700768`*^9, 3.5980584911520987`*^9}, {3.5991428674046793`*^9, 
   3.5991429352825613`*^9}, 3.5991434894172564`*^9, {3.599143745937928*^9, 
   3.599143747597023*^9}, {3.599144339776894*^9, 3.599144393338958*^9}, {
   3.5999961526324863`*^9, 3.599996166069255*^9}, {3.6000802839234686`*^9, 
   3.6000802840794687`*^9}, {3.600823510848098*^9, 3.6008235167144337`*^9}, {
   3.6012090548449945`*^9, 3.6012090598194923`*^9}, {3.601209092614772*^9, 
   3.6012090941649265`*^9}},
 CellID->508431597],

Cell[TextData[{
 "Controls are provided to display the dynamics associated with each of the \
characteristic angular frequencies ",
 Cell[BoxData[
  FormBox["\[Omega]", TraditionalForm]]],
 ", for given reciprocal vector values ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 "."
}], "DetailNotes",
 CellID->122369289],

Cell[TextData[{
 "Three tabs are provided in this Demonstration. The primary tab displays the \
dynamics of the solution for particular pair of (",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "(", 
    OverscriptBox["q", "\[RightVector]"], ")"}], TraditionalForm]]],
 ") values. In that tab, selecting run for the time control will animate the \
lattice vibrations. A scaling control is provided to alter the initial \
magnitude of the eigenvectors, tantamount to picking the initial time \
boundary value constraints. Note that it is possible to select physically \
unrealistic scaling factors that allow for collisions that are not modelled \
by this system."
}], "DetailNotes",
 CellChangeTimes->{
  3.601208839708481*^9, {3.6012090601785283`*^9, 3.6012090619407043`*^9}, {
   3.601382813834156*^9, 3.601382893437709*^9}},
 CellID->476930990],

Cell[TextData[{
 "A second tab provides the dispersion relation, the dependence of angular \
velocity ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "(", 
    OverscriptBox["q", "\[RightVector]"], ")"}], TraditionalForm]]],
 " on all ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " points."
}], "DetailNotes",
 CellChangeTimes->{
  3.601209062576768*^9, {3.6013829455216885`*^9, 3.6013829491098933`*^9}},
 CellID->450664638],

Cell[TextData[{
 "Finally, a parameters tab provides controls for the spring constants ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", the primitive unit cell lattice vectors ",
 Cell[BoxData[
  RowBox[{
   OverscriptBox["a", "\[RightVector]"], ",", 
   OverscriptBox["b", "\[RightVector]"]}]], "InlineMath"],
 ", and the positions of the masses ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 " within each unit cell of the lattice. Additional mass position locators, \
up to five total, may be added or deleted by Alt-clicking on the lattice cell \
in the desired location. For mass locator removal, it is neccessary to adjust \
one of the other locators so that the remove takes effect. Note that it is \
possible to select equilibrium mass positions that are too proximate, leading \
to physically unrealistic dynamics, such as masses passing through each other."
}], "DetailNotes",
 CellChangeTimes->{{3.600966198344832*^9, 3.600966236435011*^9}, {
  3.6012090632078314`*^9, 3.6012090644089513`*^9}, {3.601382988189129*^9, 
  3.6013829971846433`*^9}},
 CellID->557416845],

Cell["\<\
Note that the total number of interactions, even when those interactions are \
restricted to just the neighboring lattice cells, increases fast as \
additional masses per cell are added. For example, with three masses per unit \
cell, considering only the neighboring and origin cells, there are 29 \
interactions possible for each mass. To simplify the physical constants \
dialog, which would get unwieldy if methods to choose from all possible \
couplings, distinct \"spring constant\" selection is only available for a \
subset of the possible interactions. This imposes the following respective \
constraints along the \"horizontal\", \"vertical\", \"NE diagonal\", and \"NW \
diagonal\" directions connecting the masses across the cells\
\>", "DetailNotes",
 CellChangeTimes->{{3.6008880438402157`*^9, 3.600888044919277*^9}, {
  3.6012090650310135`*^9, 3.6012090662031307`*^9}},
 CellID->204245605],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"0", ",", "1"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"0", ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", "0"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], ")"}]}], ",", "j"}]]}], 
   TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", "1"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], ")"}]}], ",", "j"}]]}], 
   TraditionalForm]]],
 " ."
}], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.598056894559779*^9}, {
   3.598056950150959*^9, 3.5980569832608523`*^9}, {3.598057031767627*^9, 
   3.598057031774627*^9}, {3.598057330464711*^9, 3.598057446094325*^9}, {
   3.59805756332403*^9, 3.5980575811080475`*^9}, {3.5980576945015335`*^9, 
   3.5980577077462907`*^9}, {3.5980585058849416`*^9, 3.598058539899887*^9}, {
   3.5982726803130836`*^9, 3.598272680323084*^9}, {3.598396857147249*^9, 
   3.598396862212539*^9}, 3.5983970077038608`*^9, {3.5986527341628847`*^9, 
   3.598652736497018*^9}, {3.599142949402369*^9, 3.599142973472746*^9}, {
   3.599144400390361*^9, 3.5991444194934535`*^9}, {3.599144544232588*^9, 
   3.599144772358636*^9}, {3.5991448024383564`*^9, 3.599144812883954*^9}, {
   3.599996318317963*^9, 3.599996379259449*^9}, {3.600076492258809*^9, 
   3.600076523646064*^9}, {3.6000766422374725`*^9, 3.600076689224755*^9}, {
   3.6000767765225077`*^9, 3.6000772270044994`*^9}, {3.6000776433692303`*^9, 
   3.6000781070644455`*^9}, {3.60007816099374*^9, 3.600078188605788*^9}, {
   3.60007853087039*^9, 3.6000790980561857`*^9}, {3.60007913498145*^9, 
   3.6000792378012314`*^9}, {3.6000792689076858`*^9, 3.600079283852512*^9}, {
   3.6000793585454435`*^9, 3.6000793899326982`*^9}, {3.6000794650156302`*^9, 
   3.600079471318041*^9}, {3.600887622755131*^9, 3.6008876400591207`*^9}},
 CellID->325571302],

Cell[TextData[{
 "These are labeled ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "1"], TraditionalForm]], "InlineMath"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "2"], TraditionalForm]], "InlineMath"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "3"], TraditionalForm]], "InlineMath"],
 ", and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "4"], TraditionalForm]], "InlineMath"],
 " in the parameters tab respectively. For example, the first identity above \
is the imposition of an equality constraint on the coupling constants in the \
\"left\" and \"right\" directions separating masses in neighboring \
\"horizontal\" cells (when the lattice is square). Those are the interactions \
directed primarily along the lattice vector directions ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[PlusMinus]", 
    OverscriptBox["a", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 " (primarily since these directions are also adjusted for the positions of \
the masses within the respective cells if different).",
 " ",
 "Similarly, the same coupling constants are used for each of the pairs of \
directions in the that are directed primarily along the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[PlusMinus]", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", \[PlusMinus](",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], " ", "+", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 "), \[PlusMinus](",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], " ", "-", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ") directions separating the lattice cells."
}], "DetailNotes",
 CellChangeTimes->{{3.6008880598061285`*^9, 3.600888064512398*^9}, {
  3.6012090668131914`*^9, 3.6012090675292635`*^9}},
 CellID->64527093],

Cell[TextData[{
 "When there is when there is more than mass per unit cell, distinct coupling \
constants for the intra-cell interactions between the masses within the \
origin unit cell may be selected (i.e. ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["0", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["0", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]]],
 ").",
 " ",
 "These are labeled ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "5"], TraditionalForm]], "InlineMath"],
 " in the parameters tab."
}], "DetailNotes",
 CellChangeTimes->{{3.600887684261649*^9, 3.6008876842696495`*^9}, 
   3.6008880700537148`*^9, 3.6012090681853285`*^9},
 CellID->209290908],

Cell["\<\
General theory describing oscillations around lattice equilibrium points can \
be found in:\
\>", "DetailNotes",
 CellID->30163790],

Cell["\<\
Neil W Ashcroft and N David Mermin. Solid State Physics. Holt, Rinehart and \
Winston, New York, 1976. Chapters 21, 22.\
\>", "DetailNotes",
 CellChangeTimes->{3.601209069027413*^9},
 CellID->213153736]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.600887285796858*^9},
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.600887286596904*^9},
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.6008872914131794`*^9},
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["one atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208909916481*^9}},
 CellID->476564237],

Cell["two atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208912380481*^9}},
 CellID->245358486],

Cell["n atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.6012089151324806`*^9}},
 CellID->584424833],

Cell["lattice vibration", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.6012089173234806`*^9}},
 CellID->103468090],

Cell["phonon", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208919819481*^9}},
 CellID->21953905],

Cell["reciprocal lattice vector", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208922747481*^9}},
 CellID->733906711],

Cell["angular frequency", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208922739481*^9}},
 CellID->200946478]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "RelatedLinksSection"],

Cell[TextData[ButtonBox["Analysis of Lattice Vibrations in Two Dimensions",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/\
AnalysisOfLatticeVibrationsInTwoDimensions/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/\
AnalysisOfLatticeVibrationsInTwoDimensions/"]], "RelatedLinks",
 CellChangeTimes->{{3.598398001761718*^9, 3.5983980017637177`*^9}, {
  3.5983985448847823`*^9, 3.598398544890783*^9}},
 CellID->24498121],

Cell[TextData[ButtonBox["Motion of Atoms in Crystal",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/MotionOfAtomsInCrystal/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/MotionOfAtomsInCrystal/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981123320417`*^9}, {3.5983985249356413`*^9, 
   3.5983985249386415`*^9}},
 CellID->28998832],

Cell[TextData[ButtonBox["Normal Modes in a Periodic Square Lattice",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/NormalModesInAPeriodicSquareLattice/\
"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/NormalModesInAPeriodicSquareLattice/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981127470655`*^9}, {3.5983984299812107`*^9, 
   3.598398430938265*^9}, {3.598398474839776*^9, 3.5983984748437767`*^9}},
 CellID->63968418],

Cell[TextData[ButtonBox["Simple Harmonic Motion for a Spring",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/SimpleHarmonicMotionForASpring/"], 
   None},
 ButtonNote->
  "http://demonstrations.wolfram.com/SimpleHarmonicMotionForASpring/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981127470655`*^9}, {3.5983984299812107`*^9, 
   3.5983984299832106`*^9}, {3.5983985017343144`*^9, 3.598398501741315*^9}},
 CellID->611518950]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell[TextData[{
 "Contributed by: ",
 ButtonBox["Peeter Joot",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Peeter+Joot"], 
    None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Peeter+Joot"]
}], "Author",
 CellChangeTimes->{
  3.600887159561638*^9, {3.601208952954481*^9, 3.601208952959481*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1584, 765},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ResizeImages"->{
  Cell[1979246, 35368, 312, 8, 30, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[1979561, 35378, 719, 17, 30, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "DragLocators"->{
  Cell[1980283, 35397, 381, 12, 30, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "CreateAndDeleteLocators"->{
  Cell[1980667, 35411, 680, 16, 30, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "SliderZoom"->{
  Cell[1981350, 35429, 844, 21, 30, "ControlSuggestions",
   CellTags->"SliderZoom"]},
 "GamepadControls"->{
  Cell[1982197, 35452, 369, 9, 30, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "AutomaticAnimation"->{
  Cell[1982569, 35463, 1464, 31, 30, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[1984036, 35496, 908, 21, 30, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ResizeImages", 1989284, 35648},
 {"RotateAndZoomIn3D", 1989396, 35651},
 {"DragLocators", 1989509, 35654},
 {"CreateAndDeleteLocators", 1989628, 35657},
 {"SliderZoom", 1989745, 35660},
 {"GamepadControls", 1989854, 35663},
 {"AutomaticAnimation", 1989970, 35666},
 {"BookmarkAnimation", 1990090, 35669}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 101, 1, 98, "DemoTitle"],
Cell[CellGroupData[{
Cell[705, 27, 60, 1, 365, "InitializationSection",
 InitializationCell->True],
Cell[768, 30, 116995, 2693, 14099, "Input",
 InitializationCell->True,
 CellID->454600298]
}, Open  ]],
Cell[CellGroupData[{
Cell[117800, 2728, 29, 0, 311, "ManipulateSection"],
Cell[CellGroupData[{
Cell[117854, 2732, 86340, 1765, 9714, "Input",
 CellID->106836794],
Cell[204197, 4499, 359892, 6183, 606, "Output",
 CellID->138791400]
}, Open  ]],
Cell[564104, 10685, 106, 2, 32, "Input",
 CellID->73064412]
}, Open  ]],
Cell[CellGroupData[{
Cell[564247, 10692, 36, 0, 228, "ManipulateCaptionSection"],
Cell[564286, 10694, 1155, 18, 106, "ManipulateCaption"]
}, Open  ]],
Cell[CellGroupData[{
Cell[565478, 10717, 28, 0, 229, "ThumbnailSection"],
Cell[565509, 10719, 359892, 6183, 606, "Output",
 CellID->456491677]
}, Open  ]],
Cell[CellGroupData[{
Cell[925438, 16907, 28, 0, 189, "SnapshotsSection"],
Cell[925469, 16909, 296839, 5197, 598, "Output",
 CellID->439718930],
Cell[1222311, 22108, 302080, 5227, 598, "Output",
 CellID->1462848],
Cell[1524394, 27337, 426706, 7228, 606, "Output",
 CellID->914277459]
}, Open  ]],
Cell[CellGroupData[{
Cell[1951137, 34570, 26, 0, 452, "DetailsSection"],
Cell[1951166, 34572, 1774, 56, 68, "DetailNotes",
 CellID->143536934],
Cell[1952943, 34630, 2521, 81, 66, "DetailNotes",
 CellID->185095190],
Cell[1955467, 34713, 1466, 42, 50, "DetailNotes",
 CellID->413013362],
Cell[1956936, 34757, 1371, 44, 74, "DetailNotes",
 CellID->160232404],
Cell[1958310, 34803, 2874, 70, 55, "DetailNotes",
 CellID->323301769],
Cell[1961187, 34875, 2355, 64, 76, "DetailNotes",
 CellID->72937650],
Cell[1963545, 34941, 1327, 32, 72, "DetailNotes",
 CellID->69846009],
Cell[1964875, 34975, 3782, 100, 59, "DetailNotes",
 CellID->508431597],
Cell[1968660, 35077, 375, 11, 29, "DetailNotes",
 CellID->122369289],
Cell[1969038, 35090, 958, 21, 68, "DetailNotes",
 CellID->476930990],
Cell[1969999, 35113, 488, 15, 29, "DetailNotes",
 CellID->450664638],
Cell[1970490, 35130, 1332, 30, 96, "DetailNotes",
 CellID->557416845],
Cell[1971825, 35162, 914, 14, 86, "DetailNotes",
 CellID->204245605],
Cell[1972742, 35178, 3421, 94, 38, "DetailNotes",
 CellID->325571302],
Cell[1976166, 35274, 1908, 51, 93, "DetailNotes",
 CellID->64527093],
Cell[1978077, 35327, 733, 21, 58, "DetailNotes",
 CellID->209290908],
Cell[1978813, 35350, 141, 4, 28, "DetailNotes",
 CellID->30163790],
Cell[1978957, 35356, 212, 5, 28, "DetailNotes",
 CellID->213153736]
}, Open  ]],
Cell[CellGroupData[{
Cell[1979206, 35366, 37, 0, 168, "ControlSuggestionsSection"],
Cell[1979246, 35368, 312, 8, 30, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[1979561, 35378, 719, 17, 30, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[1980283, 35397, 381, 12, 30, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[1980667, 35411, 680, 16, 30, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[1981350, 35429, 844, 21, 30, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[1982197, 35452, 369, 9, 30, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[1982569, 35463, 1464, 31, 30, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[1984036, 35496, 908, 21, 30, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1984981, 35522, 30, 0, 208, "SearchTermsSection"],
Cell[1985014, 35524, 174, 3, 28, "SearchTerms",
 CellID->476564237],
Cell[1985191, 35529, 174, 3, 28, "SearchTerms",
 CellID->245358486],
Cell[1985368, 35534, 174, 3, 28, "SearchTerms",
 CellID->584424833],
Cell[1985545, 35539, 179, 3, 28, "SearchTerms",
 CellID->103468090],
Cell[1985727, 35544, 165, 3, 28, "SearchTerms",
 CellID->21953905],
Cell[1985895, 35549, 185, 3, 28, "SearchTerms",
 CellID->733906711],
Cell[1986083, 35554, 177, 3, 28, "SearchTerms",
 CellID->200946478]
}, Open  ]],
Cell[CellGroupData[{
Cell[1986297, 35562, 31, 0, 188, "RelatedLinksSection"],
Cell[1986331, 35564, 468, 10, 28, "RelatedLinks",
 CellID->24498121],
Cell[1986802, 35576, 486, 11, 28, "RelatedLinks",
 CellID->28998832],
Cell[1987291, 35589, 575, 12, 28, "RelatedLinks",
 CellID->63968418],
Cell[1987869, 35603, 564, 12, 28, "RelatedLinks",
 CellID->611518950]
}, Open  ]],
Cell[CellGroupData[{
Cell[1988470, 35620, 25, 0, 188, "AuthorSection"],
Cell[1988498, 35622, 384, 11, 28, "Author"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
