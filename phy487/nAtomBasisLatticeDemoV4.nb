(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[   1969632,      35609]
NotebookOptionsPosition[   1963733,      35434]
NotebookOutlinePosition[   1965382,      35484]
CellTagsIndexPosition[   1965030,      35472]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Phonon Modes for 2D Lattice Vibrations", "DemoTitle",
 CellChangeTimes->{3.600887141142584*^9}],

Cell[CellGroupData[{

Cell["", "InitializationSection"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{
     "glConstMinSquaredDistanceFromOrigin", ",", 
      "glConstMinAngleBetweenLatticeVectors", ",", "glConstLocDefault", ",", 
      "glConstDefaultMass", ",", "glConstKDefaults", ",", "glConstKMin", ",", 
      "glConstKMax", ",", "glConstMMax", ",", "glConstWindowHalfWidth", ",", 
      "glConstSpringColors", ",", "glConstPrimaryDisplaySize", ",", 
      "glConstTextDisplayOffsetHack", ",", "glConstNeighboringCellIndexes", 
      ",", "glConstSpringColorsByN"}], "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"glConstMinSquaredDistanceFromOrigin", " ", "=", " ", "0.1"}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstMinAngleBetweenLatticeVectors", "=", 
     RowBox[{"Pi", "/", "6"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstLocDefault", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.1", ",", "1.3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1.9", ",", "0.8"}], "}"}]}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstDefaultMass", "=", "20"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKDefaults", "=", 
     RowBox[{"{", 
      RowBox[{"0.25", ",", "0.25", ",", "0.25", ",", "0.25", ",", "0.25"}], 
      "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKMin", "=", "0.05"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKMax", "=", "1"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstMMax", "=", "30"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstWindowHalfWidth", "=", "3"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstSpringColors", "=", 
     RowBox[{"Darker", "@", 
      RowBox[{"{", 
       RowBox[{
       "Orange", ",", "Green", ",", "Purple", ",", "Cyan", ",", "Yellow"}], 
       "}"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstPrimaryDisplaySize", "=", 
     RowBox[{"{", 
      RowBox[{"380", ",", "380"}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstTextDisplayOffsetHack", "=", 
     RowBox[{"{", 
      RowBox[{"0.25", ",", "0.25"}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstNeighboringCellIndexes", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], "}"}], "\[Rule]", 
       RowBox[{"RGBColor", "[", "...", "]"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"-", "1"}]}], "}"}], "\[Rule]", 
       RowBox[{"RGBColor", "[", "...", "]"}]}], ",", " ", "..."}], "}"}], 
    "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"glConstSpringColorsByN", " ", "=", " ", 
     RowBox[{"DeleteDuplicates", "@", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"s", " ", 
            RowBox[{
             RowBox[{"Append", "[", 
              RowBox[{"glConstNeighboringCellIndexes", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
           RowBox[{"glConstSpringColors", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"s", ",", " ", 
            RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",", 
          " ", 
          RowBox[{"{", 
           RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", "1"}], 
       "]"}]}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{"Future", " ", "possible", " ", "maintainance", " ", 
     RowBox[{"TODOs", ":", "\[IndentingNewLine]", GridBox[{
        {
         RowBox[{
          RowBox[{
          "implement", " ", "a", " ", "min", " ", "separation", " ", "for", 
           " ", "the", " ", "equilibrium", " ", "mass", " ", "positions", " ",
            "too", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
             "as", " ", "done", " ", "for", " ", "the", " ", "lattice", " ", 
              "vectors"}], ")"}], ".", " ", "\[IndentingNewLine]", 
            "Trickier"}]}], ",", " ", 
          RowBox[{
          "since", " ", "that", " ", "should", " ", "be", " ", "based", " ", 
           "on", " ", "the", " ", "separations", " ", "in", " ", "the", " ", 
           "origin", " ", "cell"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{
          "and", " ", "not", " ", "the", " ", "obsolute", " ", "separations", 
           " ", "of", " ", "the", " ", 
           RowBox[{"locators", ".", "\[IndentingNewLine]", "Even"}], " ", 
           "if", " ", "that", " ", "is", " ", "done"}], ",", " ", 
          RowBox[{"that", " ", 
           RowBox[{"doesn", "'"}], "t", " ", "mean", " ", "that", " ", "the", 
           " ", "scaling", " ", 
           RowBox[{"won", "'"}], "t", " ", "allow", " ", "for", " ", 
           "overlap", " ", "in", " ", "the", " ", "dynamic", " ", 
           RowBox[{"tab", "."}]}]}]},
        {
         RowBox[{
         "would", " ", "be", " ", "cool", " ", "to", " ", "make", " ", "qLoc",
           " ", "a", " ", "pair", " ", "of", " ", "Locators", " ", 
          RowBox[{"that", ":", "\[IndentingNewLine]", " ", 
           RowBox[{
           "trace", " ", "out", " ", "constrained", " ", "positions", " ", 
            "along", " ", "the", " ", "2", " ", "Pi", " ", "scaled", " ", 
            "reciprocal", " ", "lattice", " ", 
            RowBox[{"vectors", ".", "\[IndentingNewLine]", 
             RowBox[{"(", 
              RowBox[{
              "returning", " ", "the", " ", "distance", " ", "from", " ", 
               "the", " ", "origin", " ", "of", " ", "each", " ", "of", " ", 
               "those", " ", "locators"}], ")"}]}]}]}]}]},
        {
         RowBox[{"a", " ", "message", " ", "box", " ", "on", " ", "user", " ", 
          RowBox[{"error", ":", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"-", " ", "when"}], " ", "an", " ", "angle", " ", "or", 
            " ", "distance", " ", "from", " ", "origin", " ", "change", " ", 
            "has", " ", "driven", " ", "a", " ", "reset", " ", "of", " ", 
            "the", " ", "lattice", " ", 
            RowBox[{"vectors", ".", "\[IndentingNewLine]", 
             RowBox[{"-", " ", "when"}]}], " ", "too", " ", "many", " ", "of",
             " ", "the", " ", "locators", " ", "have", " ", "been", " ", 
            "deleted", " ", "and", " ", "a", " ", "forced", " ", "reset", " ",
             "to", " ", "the", " ", "defaults", " ", 
            RowBox[{"occurs", "."}]}]}]}]},
        {
         RowBox[{
          RowBox[{"some", " ", "of", " ", 
           RowBox[{"the", " ", "::", "usage"}]}], " ", "=", " ", 
          RowBox[{
          "\"\<\>\"", " ", "strings", " ", "are", " ", "now", " ", "out", " ",
            "of", " ", "date"}]}]},
        {
         RowBox[{
          RowBox[{
          "usage", " ", "strings", " ", "could", " ", "probably", " ", "now", 
           " ", "be", " ", "un"}], "-", " ", "commented", "-", 
          RowBox[{
           RowBox[{"out", ".", "  ", "\[IndentingNewLine]", "Will"}], " ", 
           "that", " ", "re"}], "-", 
          RowBox[{
          "introduce", " ", "the", " ", "problems", " ", "on", " ", 
           "submission", " ", "that", " ", "were", " ", "seen", " ", "when", 
           " ", "the", " ", "usage", " ", "strings", " ", "were", " ", "in", 
           " ", "the", " ", "Initiialzation", " ", 
           RowBox[{"block", "?"}]}]}]},
        {
         RowBox[{
         "Can", " ", "the", " ", "frequency", " ", "qPlaneLoc", " ", 
          "LocatorPane", " ", "look", " ", "more", " ", "like", " ", 
          "Slider2D", " ", "in", " ", "the", " ", "dynamics", " ", "tab", " ",
           "for", " ", 
          RowBox[{"consistency", "?"}]}]},
        {
         RowBox[{
          RowBox[{
          "Am", " ", "using", " ", "a", " ", "calculated", " ", "value", " ", 
           "for", " ", "the", " ", "max", " ", "freq", " ", "for", " ", "the",
            " ", "freq", " ", "plot", " ", "intersection", " ", 
           RowBox[{"plane", ".", " ", "\[IndentingNewLine]", "Hardcoded"}], 
           " ", "this", " ", "to", " ", "magic", " ", "#", " ", 
           RowBox[{"that", "'"}], "s", " ", "out", " ", "of", " ", "the", " ",
            "graphic", " ", 
           RowBox[{"(", "23", ")"}]}], ",", " ", 
          RowBox[{
          "but", " ", "that", " ", "could", " ", "be", " ", "wrong", " ", 
           "for", " ", "some", " ", "params"}]}]},
        {
         RowBox[{
          RowBox[{
          "Scaling", " ", "of", " ", "the", " ", "masses", " ", "ended", " ", 
           "up", " ", "different", " ", "for", " ", "the", " ", "dynPlot", 
           " ", 
           RowBox[{"vs", ".", " ", "parameters"}], " ", 
           RowBox[{"tab", ".", " ", "\[IndentingNewLine]", "Hacked"}], " ", 
           "the", " ", "dynPlot", " ", "scaling", " ", "for", " ", "now"}], 
          ",", " ", 
          RowBox[{"to", " ", "be", " ", "a", " ", "bit", " ", 
           RowBox[{"closer", "."}]}]}]}
       },
       GridBoxDividers->{
        "Columns" -> {True, {False}, True}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{True}}, "RowsIndexed" -> {}}]}]}], "\[IndentingNewLine]",
     "*)"}], "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "checkAgainstRange", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"checkAgainstRange", "::", "usage"}], " ", "=", " ", 
      "\"\<This is to deal with InputForm Manipulators, that allow \
non-numeric values to be passed, or values that exceed the range specified in \
the Manipulator.\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkAgainstRange", "[", 
      RowBox[{
      "v_", ",", "default_", ",", "lowerLimit_", ",", " ", "upperLimit_"}], 
      "]"}], " ", ":=", " ", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"NumberQ", "[", "v", "]"}], ",", "v", ",", " ", 
           "default"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"result", " ", "<=", " ", "upperLimit"}], ",", " ", 
           "result", ",", "default"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"result", " ", ">=", " ", "lowerLimit"}], ",", " ", 
           "result", ",", "default"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "result"}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "springPoints", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Based", " ", "on", " ", "my", " ", "ListLinePlot", " ", "answer", " ", 
     "posted", " ", 
     RowBox[{"in", ":", " ", 
      ButtonBox[
       RowBox[{
        RowBox[{"http", ":"}], "//", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
           "a"}], "/", "37228"}], "/", "10"}]}],
       BaseStyle->"Hyperlink",
       ButtonData->{
         URL["http://mathematica.stackexchange.com/a/37228/10"], None},
       ButtonNote->"http://mathematica.stackexchange.com/a/37228/10"]}]}], 
    " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"springPoints", "::", "usage"}], " ", "=", " ", 
      "\"\<springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]\>\""}], " ", ";"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"springPoints", "[", " ", 
      RowBox[{"a12_List", ",", " ", 
       RowBox[{"n_Integer:", "8"}], ",", 
       RowBox[{"h_:", ".05"}], ",", " ", 
       RowBox[{"f_:", " ", "0.1"}]}], " ", "]"}], " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "a1", ",", " ", "a2", ",", " ", "n1", ",", " ", "springDiff", ",", 
         " ", "nd", ",", " ", "r", ",", " ", "r1"}], " ", "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a1", ",", " ", "a2"}], "}"}], " ", "=", " ", "a12"}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"n1", " ", "=", " ", 
         RowBox[{"Norm", "[", "a1", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"springDiff", " ", "=", " ", 
         RowBox[{"a2", " ", "-", " ", "a1"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nd", " ", "=", " ", 
         RowBox[{"Norm", "[", "springDiff", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", " ", "=", " ", 
         RowBox[{"RotationMatrix", "[", 
          RowBox[{"ArcTan", " ", "@@", "  ", "springDiff"}], " ", "]"}]}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"r1", " ", "=", " ", 
         RowBox[{"r", " ", ".", " ", 
          RowBox[{"{", 
           RowBox[{"n1", ",", " ", "0"}], "}"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", " ", 
                 RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                 RowBox[{"t", " ", 
                  RowBox[{"(", 
                   RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}]}], ",", " ", 
                RowBox[{"h", " ", 
                 RowBox[{"Sin", "[", " ", 
                  RowBox[{"2", " ", "Pi", " ", "n", " ", "t"}], "]"}]}]}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", " ", 
                 RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}], " ", "+", " ", 
                 RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", 
                 RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}]}], "\[IndentingNewLine]", "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "indexLabel", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"indexLabel", "::", "usage"}], " ", "=", " ", 
      "\"\<\!\(\*SubscriptBox[\(k\), \(\(i\)\(\\\ \)\)]\)(or other character) \
in italic. indexLabel['k', 1]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"indexLabel", " ", "=", " ", 
     RowBox[{
      RowBox[{"Subscript", "[", 
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{"#1", ",", "Italic"}], "]"}], ",", " ", "#2"}], "]"}], " ", 
      "&"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "kLable", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"kLable", "::", "usage"}], " ", "=", " ", 
      "\"\<\!\(\*SubscriptBox[\(k\), \(\(i\)\(\\\ \)\)]\)(or other character) \
in italic and colored by spring index. kLable[k]\>\""}], " ", ";"}], 
    "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"kLable", " ", "=", " ", 
     RowBox[{
      RowBox[{"Style", "[", " ", 
       RowBox[{
        RowBox[{"indexLabel", "[", 
         RowBox[{"\"\<k\>\"", ",", " ", "#"}], "]"}], ",", " ", 
        RowBox[{"FontColor", "\[Rule]", 
         RowBox[{"glConstSpringColors", "[", 
          RowBox[{"[", "#", "]"}], "]"}]}]}], " ", "]"}], " ", "&"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "massColors", " ", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"massColors", " ", ":=", " ", 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Darker", "[", 
         RowBox[{"{", " ", 
          RowBox[{
          "Blue", ",", " ", "Green", ",", " ", "Purple", ",", " ", "Red", ",",
            " ", "Orange"}], " ", "}"}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"Mod", "[", 
           RowBox[{"#", ",", " ", "5"}], "]"}], " ", "+", " ", "1"}], "]"}], 
        " ", "]"}], " ", "&"}], " ", ")"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "massLabel", " ", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"massLabel", " ", ":=", " ", 
     RowBox[{
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{"indexLabel", "[", 
         RowBox[{"\"\<m\>\"", ",", " ", "#"}], "]"}], ",", " ", 
        RowBox[{"massColors", "[", "#", "]"}]}], "]"}], " ", "&"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcLineTable", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcLineTable", "[", " ", 
      RowBox[{"n_List", ",", " ", "b_List", ",", " ", "i_List"}], " ", "]"}], 
     " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"first", ",", " ", "second"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"first", ",", " ", "second"}], "}"}], " ", "=", " ", "i"}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Line", "[", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"-", 
                RowBox[{"n", "[", 
                 RowBox[{"[", "first", "]"}], "]"}]}], 
               RowBox[{"b", "[", 
                RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
              RowBox[{"j", " ", 
               RowBox[{"b", "[", 
                RowBox[{"[", "second", "]"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"n", "[", 
                RowBox[{"[", "first", "]"}], "]"}], 
               RowBox[{"b", "[", 
                RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
              RowBox[{"j", " ", 
               RowBox[{"b", "[", 
                RowBox[{"[", "second", "]"}], "]"}]}]}]}], "}"}], " ", 
           "\[IndentingNewLine]", "]"}], " ", "\[IndentingNewLine]", ",", " ", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", 
            RowBox[{"-", 
             RowBox[{"n", "[", 
              RowBox[{"[", "second", "]"}], "]"}]}], ",", " ", 
            RowBox[{"n", "[", 
             RowBox[{"[", "second", "]"}], "]"}]}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcReciprocalBasis", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"calcReciprocalBasis", "::", "usage"}], " ", "=", " ", 
      "\"\<Return a reciprocal frame basis for a set of vectors.  This \
doesn't include the 2 \[Pi] scaling that is common in solid state physics.  \
Example, displaying the desired Kronicker delta behaviour:\n\nb = \
{{2,1},{-1/4, 2}} ;\ng = calcReciprocalBasis[ b ] ;\n\n{g[[1]].loc[[1]],\
\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].loc[[1]],\
\[IndentingNewLine]g[[2]].loc[[2]]}\n\>\""}], " ", ";"}], 
    "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcReciprocalBasis", "[", "loc_List", "]"}], " ", ":=", " ", 
     RowBox[{"Inverse", "[", " ", 
      RowBox[{"Transpose", "[", " ", "loc", " ", "]"}], " ", "]"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "pointsTable", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"pointsTable", "[", " ", 
      RowBox[{
      "mPosFirstCell_List", ",", " ", "latticeBasis_List", ",", " ", 
       "numberLatticeLinesToDisplay_List"}], " ", "]"}], " ", ":=", " ", 
     RowBox[{"Table", "[", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"mPosFirstCell", " ", "+", " ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", "j"}], "}"}], ".", " ", "latticeBasis"}]}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", 
         RowBox[{"-", 
          RowBox[{"numberLatticeLinesToDisplay", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ",", 
         RowBox[{"numberLatticeLinesToDisplay", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", " ", 
         RowBox[{"-", 
          RowBox[{"numberLatticeLinesToDisplay", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
         RowBox[{"numberLatticeLinesToDisplay", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "nMassesFromLocArray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"nMassesFromLocArray", "[", "uLoc_", "]"}], " ", ":=", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Dimensions", "[", "uLoc", "]"}], " ", "//", " ", "First"}], 
        ")"}], " ", "-", "2"}], ")"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "adjustedmoSel", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"adjustedmoSel", "[", 
      RowBox[{"rNumM_", ",", "mOrigInd_", ",", "m1Ind_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"rNumM", ">", "2"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", " ", 
        RowBox[{
         RowBox[{"mOrigInd", "\[Equal]", "m1Ind"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"First", "[", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Range", "[", "rNumM", "]"}], ",", "m1Ind"}], "]"}], 
          "]"}], ",", "\[IndentingNewLine]", "mOrigInd"}], " ", 
        "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"First", "@", 
        RowBox[{"Delete", "[", 
         RowBox[{
          RowBox[{"Range", "[", "2", "]"}], ",", "m1Ind"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "constructKArrayElements", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"constructKArrayElements", "[", " ", 
      RowBox[{"i_Integer", ",", " ", "j_Integer"}], "  ", "]"}], " ", ":=", 
     " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "a", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"a", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "j", ",", " ", 
                RowBox[{"s", " ", 
                 RowBox[{"glConstNeighboringCellIndexes", "[", 
                  RowBox[{"[", "n", "]"}], "]"}]}]}], "}"}], " ", "\[Rule]", 
              " ", 
              RowBox[{"glConstKDefaults", "[", 
               RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"s", ",", " ", 
               RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",",
              " ", 
             RowBox[{"{", 
              RowBox[{"n", ",", " ", "4"}], "}"}]}], " ", "]"}], ",", " ", 
           "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"i", " ", "<", " ", "j"}], ",", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"a", ",", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"i", ",", "j", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "}"}], " ", "\[Rule]", " ", 
             RowBox[{"glConstKDefaults", "[", 
              RowBox[{"[", "5", "]"}], "]"}]}]}], "]"}], ",", " ", "a"}], " ",
          "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "constructKArray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"constructKArray", "[", " ", "r_Integer", " ", "]"}], " ", ":=", 
     " ", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"constructKArrayElements", "[", 
          RowBox[{"i", ",", "j"}], "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "r"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"j", ",", "r"}], "}"}]}], "]"}], ",", " ", "2"}], "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnAlteredKArrayElements", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnAlteredKArrayElements", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", 
       "ni_Integer", ",", "v_"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"kA", "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"glConstNeighboringCellIndexes", "[", 
               RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "_"}], "]"}], 
          "\[RuleDelayed]", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"glConstNeighboringCellIndexes", "[", 
               RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "v"}], "]"}]}], 
         ",", 
         RowBox[{
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"-", 
               RowBox[{"glConstNeighboringCellIndexes", "[", 
                RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "_"}], "]"}],
           "\[RuleDelayed]", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"-", 
               RowBox[{"glConstNeighboringCellIndexes", "[", 
                RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "v"}], 
           "]"}]}]}], "}"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnAlteredKarrayOriginElement", "]"}], ";"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnAlteredKarrayOriginElement", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer", ",", "v_"}], 
      "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "m1oSet", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"m1oSet", "=", 
         RowBox[{"Append", "[", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"kA", "/.", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Rule", "[", 
            RowBox[{"m1oSet", ",", "_"}], "]"}], "\[RuleDelayed]", 
           RowBox[{"Rule", "[", 
            RowBox[{"m1oSet", ",", "v"}], "]"}]}], ")"}]}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "selectVFromKarray", "]"}], ";"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"To", " ", "refresh", " ", "k1"}], ",", "k2", ",", "k3", ",", 
     RowBox[{
     "k4", " ", "after", " ", "changing", " ", "m1Sel", " ", "or", " ", 
      RowBox[{"m2Sel", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"selectVFromKarray", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", 
       "ni_Integer"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m1Ind", ",", "m2Ind", ",", 
         RowBox[{"glConstNeighboringCellIndexes", "[", 
          RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], "/.", "kA"}], ")"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "selectOriginVFromKarray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "To", " ", "refresh", " ", "k5", " ", "after", " ", "changing", " ", 
     "m1Sel", " ", "and", " ", "moSel"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"selectOriginVFromKarray", "[", 
      RowBox[{"kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer"}], "]"}], 
     ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"Sort", "[", 
          RowBox[{"{", 
           RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "/.", "kA"}], ")"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnKarrayForAdditionalMassIndex", "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnKarrayForAdditionalMassIndex", "[", " ", 
      RowBox[{"kA_List", ",", "nmNew_Integer"}], " ", "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "k2", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"k2", " ", "=", " ", 
         RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"constructKArrayElements", "[", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], ")"}], "/@",
             " ", 
            RowBox[{"(", 
             RowBox[{"Select", "[", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"Table", "[", " ", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", " ", "nmNew"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"j", ",", " ", "nmNew"}], "}"}]}], "]"}], ",", 
                 " ", "1"}], "]"}], ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"Max", "[", "#", "]"}], " ", "\[Equal]", " ", 
                 "nmNew"}], " ", "&"}]}], "]"}], ")"}]}], ",", " ", "2"}], 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"kArray", ",", " ", "k2"}], "]"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"kA", ",", " ", "k2"}], "}"}], ",", " ", "1"}], "]"}]}]}], 
      " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "resetLatticeVectorsIfAngleTooSmall", "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
      RowBox[{"uLoc_List", ",", "minAngle_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "t", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"t", " ", "=", " ", 
         RowBox[{"Abs", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{
            RowBox[{"Normalize", "[", 
             RowBox[{"uLoc", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", ".", " ", 
            RowBox[{"Normalize", "[", 
             RowBox[{"uLoc", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}], "]"}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"t", " ", ">", " ", 
            RowBox[{"Pi", "/", "2"}]}], ",", " ", 
           RowBox[{"Pi", "-", "t"}], ",", " ", "t"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", " ", 
         RowBox[{
          RowBox[{"t", " ", "<", " ", "minAngle"}], ",", 
          "\[IndentingNewLine]", "glConstLocDefault", ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"uLoc", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
            RowBox[{"uLoc", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "locDependent", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"locDependent", "::", "usage"}], " ", "=", " ", 
      "\"\<Locator dependent calculations (i.e. based on the mass positions \
and the unit cell basis vectors)\n\nExample:\n\nlocDependent[{1/2,1}, \
{1,1/2}, {{0.1,0.2} + {1/2,1} + {1,1/2}, {0.3, 0.5} - {1/2,1} - {1,1/2}}]\n\n\
Will see: {0.1,0.2}, {0.3, 0.5} ; as the mPosFirstCell values.\n\>\""}], " ", 
     ";"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"locDependent", "[", " ", 
      RowBox[{"uLoc_List", ",", "numMasses_Integer", ",", " ", "rma_List"}], 
      " ", "]"}], "  ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "m", ",", "latticeBasis", ",", " ", "numberLatticeLinesToDisplay", 
         ",", "reciprocalBasis", ",", "mObliqueComponents", ",", " ", 
         "mPosFirstCell", ",", " ", "reciprocalNorms"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"latticeBasis", " ", "=", 
         RowBox[{"Take", "[", 
          RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"m", " ", "=", " ", 
         RowBox[{"Drop", "[", 
          RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"numberLatticeLinesToDisplay", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Ceiling", "[", "  ", 
             RowBox[{"Abs", "[", 
              RowBox[{"glConstWindowHalfWidth", "/", " ", 
               RowBox[{
                RowBox[{"latticeBasis", "[", 
                 RowBox[{"[", "#", "]"}], "]"}], "[", 
                RowBox[{"[", "#", "]"}], "]"}]}], "]"}], "]"}], " ", "&"}], 
           " ", "/@", " ", 
           RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"reciprocalBasis", " ", "=", " ", 
         RowBox[{
         "calcReciprocalBasis", "[", " ", "latticeBasis", " ", "]"}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"reciprocalNorms", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Norm", "[", 
             RowBox[{"reciprocalBasis", "[", 
              RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
           " ", 
           RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"mObliqueComponents", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"m", "[", 
             RowBox[{"[", " ", "i", " ", "]"}], "]"}], " ", ".", " ", 
            RowBox[{"reciprocalBasis", "[", 
             RowBox[{"[", " ", "j", " ", "]"}], "]"}]}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numMasses"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"j", ",", " ", "2"}], "}"}]}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"mPosFirstCell", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"m", "[", 
              RowBox[{"[", "#", "]"}], "]"}], " ", "-", " ", 
             RowBox[{
              RowBox[{"Floor", "[", 
               RowBox[{"mObliqueComponents", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", ".", " ", 
              "latticeBasis"}]}], " ", ")"}], " ", "&"}], " ", "/@", " ", 
          RowBox[{"Range", "[", "numMasses", "]"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<mScalarArray\>\"", " ", "\[Rule]", " ", "rma"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<numberOfMasses\>\"", " ", "\[Rule]", " ", "numMasses"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<latticeBasis\>\"", " ", "\[Rule]", " ", "latticeBasis"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<latticeNorms\>\"", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Norm", "[", 
               RowBox[{"latticeBasis", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
             " ", 
             RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<latticeUnitVectors\>\"", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Normalize", "[", 
               RowBox[{"latticeBasis", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
             " ", 
             RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<numberLatticeLinesToDisplay\>\"", "\[Rule]", " ", 
           "numberLatticeLinesToDisplay"}], ",", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<reciprocalBasis\>\"", "\[Rule]", " ", "reciprocalBasis"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{
          "\"\<reciprocalNorms\>\"", "\[Rule]", " ", "reciprocalNorms"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{"\"\<qMaxVec\>\"", " ", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{"2", " ", "Pi", " ", "reciprocalNorms"}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<mObliqueComponents\>\"", "\[Rule]", " ", 
           "mObliqueComponents"}], ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<mPosFirstCell\>\"", "\[Rule]", " ", "mPosFirstCell"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<pointsDataTable\>\"", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"pointsTable", "[", 
                RowBox[{
                 RowBox[{"mPosFirstCell", "[", 
                  RowBox[{"[", "#", "]"}], "]"}], ",", "latticeBasis", ",", 
                 "numberLatticeLinesToDisplay"}], "]"}], ")"}], " ", "&"}], "/@",
              " ", 
             RowBox[{"Range", "[", "numMasses", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<lineTable\>\"", " ", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"calcLineTable", "[", " ", 
               RowBox[{
               "numberLatticeLinesToDisplay", ",", " ", "latticeBasis", ",", 
                " ", "#"}], " ", "]"}], " ", "&"}], " ", "/@", " ", 
             RowBox[{"Permutations", "[", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ")"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "projOpU", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"projOpU", "[", "v_List", "]"}], " ", ":=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "^", "2"}], ",", " ", 
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], 
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], 
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "^", "2"}]}], "}"}]}], "}"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"projOp", "::", "usage"}], " ", "=", " ", 
      "\"\<given an input vector \!\(\*OverscriptBox[\(v\), \
\(\[RightVector]\)]\) = {\!\(\*SubscriptBox[\(v\), \(x\)]\), \
\!\(\*SubscriptBox[\(v\), \(y\)]\)}, compute the projection matrix operator \
along the unit vector in that direction.\n\n   projOp[{1, 0}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"1\", \"0\"},
{\"0\", \"0\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{0, 1}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"0\", \"0\"},
{\"0\", \"1\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{a,b}] // MatrixForm = \!\
\(\*Cell[TextData[Cell[BoxData[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{
FractionBox[
SuperscriptBox[\"a\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]},
{
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
SuperscriptBox[\"b\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}]],
CellChangeTimes->{{3.5990911441851797`*^9, 3.599091144641206*^9}, \
3.5990913830438423`*^9, 3.5990915191646276`*^9, 3.599091555028679*^9, \
3.599091735722014*^9, {3.599091916353346*^9, 3.599091928988068*^9}}]]]\)\n\
\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "projOp", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"projOp", "[", "v_List", "]"}], " ", ":=", " ", 
     RowBox[{
      RowBox[{"projOpU", "[", "v", "]"}], "/", 
      RowBox[{"(", 
       RowBox[{"v", ".", " ", "v"}], ")"}]}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "relativeDifferences", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"relativeDifferences", "::", "usage"}], " ", "=", " ", 
      "\"\<Example: relativeDifferences[ {aLoc,bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}}\>\""}], ",", " ", 
     RowBox[{
      RowBox[{
      "is", " ", "a", " ", "tuple", " ", "for", " ", "the", " ", "spring", 
       " ", "constant", " ", "between", " ", "m1", " ", "in", " ", "the", " ",
        "origin", " ", "cell", " ", "to", " ", "m2", " ", "in", " ", "the", 
       " ", "lattice", " ", "cell", " ", 
       RowBox[{"{", 
        RowBox[{"n1", ",", "n2"}], "}"}]}], " ", ";"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"relativeDifferences", "[", " ", 
      RowBox[{"r_List", ",", "mp_List", ",", " ", 
       RowBox[{"{", 
        RowBox[{
        "mIndex1_Integer", ",", " ", "mIndex2_Integer", ",", " ", "n_List"}], 
        "}"}]}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "d", ",", " ", "pOrigin", ",", " ", "pOther", ",", " ", "dn"}], "}"}],
        ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"pOrigin", " ", "=", " ", 
         RowBox[{"mp", "[", 
          RowBox[{"[", " ", "mIndex1", " ", "]"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"pOther", " ", "=", " ", 
         RowBox[{
          RowBox[{"mp", "[", 
           RowBox[{"[", " ", "mIndex2", " ", "]"}], "]"}], "+", " ", 
          RowBox[{"n", " ", ".", " ", "r"}]}]}], "  ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"d", " ", "=", " ", 
         RowBox[{"pOther", " ", "-", " ", "pOrigin"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dn", " ", "=", " ", 
         RowBox[{"d", " ", ".", "d"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"dn", ",", " ", "pOrigin", ",", " ", "pOther", ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"projOpU", "[", "d", "]"}], "/", "dn"}], "  ", 
           RowBox[{"(*", 
            RowBox[{"//", " ", "MatrixForm"}], "*)"}], ")"}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calculateCouplings", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"calculateCouplings", "::", "usage"}], " ", "=", " ", 
      "\"\<Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions.\>\""}], 
     " ", ";"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calculateCouplings", "[", 
      RowBox[{"ld_List", ",", " ", "kA_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "t", ",", " ", "t1", ",", " ", "t2", ",", " ", "r", ",", " ", "mp", 
         ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"r", ",", " ", "mp", ",", " ", "numberOfMasses"}], "}"}], 
         " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", " ", "\"\<mPosFirstCell\>\"", ",", 
            " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}],
         " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Append", "[", 
            RowBox[{"#", ",", " ", 
             RowBox[{"relativeDifferences", "[", 
              RowBox[{"r", ",", " ", "mp", ",", " ", 
               RowBox[{"First", "[", "#", "]"}]}], "]"}]}], " ", "]"}], "&"}],
           "/@", " ", 
          RowBox[{"(", 
           RowBox[{"kA", "/.", " ", 
            RowBox[{"Rule", " ", "\[Rule]", " ", "List"}]}], ")"}]}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "}"}], ",", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "3", "]"}], "]"}]}], "}"}], ",", " ", "1"}], 
            "]"}], " ", "&"}], "/@", " ", "t"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"t1", " ", "=", " ", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Select", "[", " ", 
               RowBox[{"t", ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                    "i"}], ")"}], " ", "&&", " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "\[NotEqual]", " ", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0"}], "}"}]}], ")"}]}], " ", 
                 "&"}]}], "]"}], ")"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "[", 
                RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
           "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{"t", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "3", "]"}], "]"}], " ", "==", " ", 
             RowBox[{"{", 
              RowBox[{"0", ",", " ", "0"}], "}"}]}], " ", "&"}]}], "]"}]}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "rest", " ", "of", " ", "the", " ", 
          RowBox[{"permutations", ":"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"t2", ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", " ", 
                   RowBox[{"Drop", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}]}], "}"}], ",", " ", 
                 "1"}], "]"}], " ", "&"}], "/@", " ", "t2"}]}], "}"}], ",", 
           " ", "1"}], "]"}]}], "  ", ";", "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Select", "[", " ", 
               RowBox[{"t2", ",", " ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                   "i"}], ")"}], " ", "&"}]}], "]"}], ")"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "[", 
                RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
           "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"t2", ",", " ", "t1"}], "}"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "spScaled", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"spScaled", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"s1_List", ",", "s2_List"}], "}"}], ",", " ", "scaleKValue_", 
       ",", " ", "referenceSepSquared_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "ds", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ds", " ", "=", " ", 
         RowBox[{"s2", " ", "-", " ", "s1"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"springPoints", "[", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2"}], "}"}], ",", 
          RowBox[{"Ceiling", "[", 
           RowBox[{"12", " ", "scaleKValue", " ", 
            RowBox[{"Sqrt", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"ds", ".", "ds"}], ")"}], "/", "referenceSepSquared"}],
              "]"}]}], "]"}]}], " ", "]"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "plotSprings", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"plotSprings", "::", "usage"}], " ", "=", " ", 
      "\"\<Example:\n\nModule[{parameterLocatorDependencies},\
\[IndentingNewLine]parameterLocatorDependencies = locDependent[{1/2,1}, \
{1,1/2}, {{0.1,1.2} + {1/2,1} + {1,1/2}, {1.3, 0.5} - {1/2,1} - {1,1/2}}] ;\
\[IndentingNewLine]plotSprings[{10,20}, parameterLocatorDependencies ] \
\[IndentingNewLine]]\n\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"plotSprings", "[", 
      RowBox[{
      "uLoc_List", ",", " ", "ld_List", ",", "cd_List", ",", "m1Ind_Integer", 
       ",", " ", "m2Ind_Integer", ",", " ", "moInd_Integer"}], "]"}], " ", ":=",
      " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "aLoc", ",", " ", "bLoc", ",", "mLoc", ",", "pointsList", ",", 
         "latticeBasis", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
         " ", "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
         "cOrigin", ",", " ", "cN", ",", " ", "g", ",", " ", "mScalarArray", 
         ",", " ", "numberOfMasses", ",", " ", "scaleLoc"}], "}"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"latticeBasis", " ", "=", " ", 
         RowBox[{"Take", "[", " ", 
          RowBox[{"uLoc", ",", " ", "2"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"aLoc", " ", "=", " ", 
         RowBox[{"uLoc", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"bLoc", " ", "=", " ", 
         RowBox[{"uLoc", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"scaleLoc", " ", "=", " ", 
         RowBox[{
          RowBox[{"aLoc", ".", "aLoc"}], "  ", "+", " ", 
          RowBox[{"bLoc", " ", ".", "bLoc"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "mLoc", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
           "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
           "mScalarArray", ",", " ", "numberOfMasses"}], "}"}], "=", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<mPosFirstCell\>\"", ",", "\"\<reciprocalBasis\>\"", ",", 
            "\"\<pointsDataTable\>\"", ",", 
            "\"\<numberLatticeLinesToDisplay\>\"", ",", " ", 
            "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", " ", 
            "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}], " ",
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pointsList", "[", "n_Integer", "]"}], " ", ":=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"massColors", "[", "n", "]"}], ",", "\[IndentingNewLine]", 
           ",", 
           RowBox[{"PointSize", "[", 
            RowBox[{"Sqrt", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"mScalarArray", "[", 
                RowBox[{"[", "n", "]"}], "]"}], "/", "glConstMMax"}], "/", 
              "500"}], "]"}], "]"}], "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Point", "[", " ", "#", " ", "]"}], " ", "&"}], " ", "/@",
             " ", 
            RowBox[{"pointsDataTable", "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{"Text", "[", 
            RowBox[{
             RowBox[{"massLabel", "[", " ", "n", "]"}], ",", 
             RowBox[{
              RowBox[{"mLoc", "[", 
               RowBox[{"[", "n", "]"}], "]"}], " ", "+", " ", 
              "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
          "\[IndentingNewLine]", "}"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"cOrigin", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"cd", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", " ", 
             RowBox[{"{", 
              RowBox[{"m1Ind", ",", " ", "moInd"}], "}"}]}], " ", "&"}]}], 
          " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"cN", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"cd", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "[", 
            RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
             RowBox[{"{", 
              RowBox[{"m1Ind", ",", " ", "m2Ind"}], "}"}]}], "&"}]}], " ", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"g", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"spScaled", "[", 
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"{", 
                  RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", " ", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "4", "]"}], "]"}], "/", "glConstKMax"}], ",", 
               " ", "scaleLoc"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", "&"}],
           "/@", " ", "cN"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"numberOfMasses", " ", ">", " ", "1"}], ",", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"g", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"spScaled", "[", 
                 RowBox[{
                  RowBox[{"Take", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", " ", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], "/", "glConstKMax"}], ",",
                   " ", "scaleLoc"}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
                "\[IndentingNewLine]", 
                RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                   "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", 
              "&"}], "/@", " ", "cOrigin"}]}], "]"}], ","}], " ", "]"}], " ", 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Graphics", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{"lines", "\[IndentingNewLine]", ",", "Blue", ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"reciprocalBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                   RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]", 
                  ",", "Thick", ",", 
                  RowBox[{"Arrowheads", "[", "0.05", "]"}], 
                  "\[IndentingNewLine]", ",", "Red", ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"latticeBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                   RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]", 
                  ",", 
                  RowBox[{"Text", "[", 
                   RowBox[{
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"aLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}], 
                  "\[IndentingNewLine]", ",", 
                  RowBox[{"Text", "[", 
                   RowBox[{
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"bLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
                 "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"pointsList", "[", "#", "]"}], " ", "&"}], "/@", 
                 " ", 
                 RowBox[{"Range", "[", "numberOfMasses", "]"}]}]}], 
               "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", 
             ",", 
             RowBox[{"PlotRange", " ", "\[Rule]", " ", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", 
                  " ", "glConstWindowHalfWidth"}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", 
                  " ", "glConstWindowHalfWidth"}], "}"}]}], "}"}]}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}]}], 
            "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "g"}], 
          "\[IndentingNewLine]", "}"}], " ", "]"}]}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "oneTermOfdynamicsMatrix", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     FormBox[
      RowBox[{" ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"grab", " ", "data", " ", 
          RowBox[{"from", ":", " ", "rawArrayOfMasses"}]}], ",", " ", 
         "parameterLocatorDependencies", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"couplingData", "[", 
             RowBox[{"[", "_", "]"}], "]"}], "[", 
            RowBox[{"[", "_", "]"}], "]"}], "[", 
           RowBox[{"[", "_", "]"}], "]"}], " ", "=", " ", 
          RowBox[{"{", 
           RowBox[{"k", ",", " ", "j", ",", " ", 
            OverscriptBox["m", "\[RightVector]"], ",", " ", 
            SubscriptBox["K", 
             RowBox[{
              OverscriptBox["n", "\[RightVector]"], ",", 
              RowBox[{"k", ";", 
               OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], ",", " ", 
            SuperscriptBox[
             SubscriptBox[
              OverscriptBox["a", "\[RightVector]"], 
              RowBox[{
               OverscriptBox["m", "\[RightVector]"], ",", 
               RowBox[{"j", ";", 
                OverscriptBox["0", "\[RightVector]"]}], ",", "k"}]], "2"], 
            ",", " ", 
            SubscriptBox[
             OverscriptBox["p", "\[RightVector]"], "k"], ",", " ", 
            RowBox[{
             SubscriptBox[
              OverscriptBox["r", "\[RightVector]"], 
              OverscriptBox["m", "\[RightVector]"]], " ", "+", " ", 
             SubscriptBox[
              OverscriptBox["p", "\[RightVector]"], "j"]}], ",", " ", 
            SubscriptBox["Proj", 
             SubscriptBox[
              OverscriptBox["a", "\[RightVector]"], 
              RowBox[{
               OverscriptBox["m", "\[RightVector]"], ",", 
               RowBox[{"j", ";", 
                OverscriptBox["0", "\[RightVector]"]}], ",", "k"}]]]}], 
           "}"}]}]}], "\[IndentingNewLine]", 
        RowBox[{"ex", ":", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", "0.5`", ",", "1.`", 
           ",", 
           RowBox[{"{", 
            RowBox[{"0.9`", ",", "0.7`"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.30000000000000004`", ",", 
             RowBox[{"-", "0.10000000000000009`"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.36`", ",", "0.48`"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.48`", ",", "0.6400000000000001`"}], "}"}]}], "}"}]}],
           "}"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "to", " ", "form", " ", "equations", " ", "of", " ", "the", " ", 
          RowBox[{"form", ":", "\[IndentingNewLine]", 
           RowBox[{
            SuperscriptBox["\[Omega]", "2"], " ", 
            RowBox[{
             SubscriptBox[
              OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
             OverscriptBox["q", "\[RightVector]"], ")"}]}]}]}], " ", "=", " ", 
         RowBox[{
          UnderscriptBox["\[Sum]", 
           RowBox[{
            OverscriptBox["0", "\[RightVector]"], ",", 
            RowBox[{"k", " ", "\[NotEqual]", " ", 
             OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
          RowBox[{
           SubscriptBox["K", 
            RowBox[{
             OverscriptBox["0", "\[RightVector]"], ",", 
             RowBox[{"k", ";", 
              OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
           SubscriptBox["Proj", 
            SubscriptBox[
             OverscriptBox["a", "^"], 
             RowBox[{
              OverscriptBox["n", "\[RightVector]"], ",", 
              RowBox[{"k", ";", 
               OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
           RowBox[{"(", 
            RowBox[{
             FractionBox[
              RowBox[{
               SubscriptBox[
                OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
               OverscriptBox["q", "\[RightVector]"], ")"}], 
              SubscriptBox["m", "k"]], "-", " ", 
             RowBox[{
              FractionBox[
               RowBox[{
                SubscriptBox[
                 OverscriptBox["\[Epsilon]", "\[RightVector]"], "j"], "(", 
                OverscriptBox["q", "\[RightVector]"], ")"}], 
               SqrtBox[
                RowBox[{
                 SubscriptBox["m", "k"], 
                 SubscriptBox["m", "j"]}]]], 
              SuperscriptBox["e", 
               RowBox[{"I", " ", 
                RowBox[{"(", 
                 RowBox[{
                  SubscriptBox[
                   OverscriptBox["r", "\[RightVector]"], 
                   OverscriptBox["m", "\[RightVector]"]], " ", ".", " ", 
                  OverscriptBox["q", "\[RightVector]"]}], " ", ")"}]}]]}]}], 
            ")"}]}]}]}]}]}],
      TraditionalForm], "\[IndentingNewLine]", "Note", " ", "that", " ", 
     "qVec", " ", "here", " ", "is", " ", "intended", " ", "to", " ", "be", 
     " ", "an", " ", "undefined", " ", 
     RowBox[{"global", ".", "  ", "Is"}], " ", "there", " ", "a", " ", "way", 
     " ", "to", " ", "do", " ", "that", " ", 
     RowBox[{"programatically", "?"}]}], "\[IndentingNewLine]", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"oneTermOfdynamicsMatrix", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "k_Integer", ",", " ", "j_Integer", ",", " ", "mVec_List", ",", " ", 
         "kS_", ",", " ", "_", ",", "_", ",", "_", ",", "proj_List"}], "}"}], 
       ",", " ", "r_List", ",", " ", "mk_", ",", " ", "epsilon_List", ",", 
       " ", "mA_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"(", 
      RowBox[{"kS", " ", 
       RowBox[{"proj", "  ", ".", 
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"epsilon", "[", 
            RowBox[{"[", "k", "]"}], "]"}], "/", "mk"}], " ", "-", " ", 
          RowBox[{
           RowBox[{"epsilon", "[", 
            RowBox[{"[", "j", "]"}], "]"}], 
           RowBox[{
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{"I", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"mVec", " ", ".", " ", "r"}], ")"}], ".", " ", 
                 "qVec"}], ")"}]}], ")"}]}], "/", 
            RowBox[{"Sqrt", "[", " ", 
             RowBox[{"mk", " ", 
              RowBox[{"mA", "[", 
               RowBox[{"[", "j", "]"}], "]"}]}], " ", "]"}]}]}]}], ")"}]}]}], 
      "  ", ")"}]}], "  ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "dynamicsMatrix", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dynamicsMatrix", "[", 
      RowBox[{"ld_List", ",", " ", "cd_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "cdFlatAndSorted", ",", " ", "r", ",", " ", "res", ",", " ", 
         "epsilon", ",", " ", "m", ",", "mScalarArray", ",", " ", 
         "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"cdFlatAndSorted", " ", "=", " ", 
         RowBox[{"SplitBy", "[", " ", 
          RowBox[{
           RowBox[{"Sort", "@", 
            RowBox[{"Flatten", "[", 
             RowBox[{"cd", ",", " ", "2"}], "]"}]}], " ", ",", " ", "First"}],
           " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"r", ",", "mScalarArray", ",", " ", "numberOfMasses"}], 
          "}"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", 
            " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}],
         " ", ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"Here", " ", 
            SubscriptBox[
             OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], " ", 
            RowBox[{"(", 
             RowBox[{"=", 
              RowBox[{"epsilon", "[", 
               RowBox[{"[", "k", "]"}], "]"}]}], ")"}], " ", "is", " ", 
            "represented", " ", "as", " ", "a", " ", "2", "x", 
            RowBox[{"(", 
             RowBox[{"2", "N"}], ")"}], " ", "matrix", " ", "with", " ", 
            "the", " ", "vector", " ", "factored", " ", 
            RowBox[{"out", ".", "  ", "For"}], " ", "example", " ", "with", 
            " ", "N"}], " ", "=", " ", "3"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox[
            OverscriptBox["\[Epsilon]", "\[RightVector]"], "1"], "=", " ", 
           RowBox[{
            RowBox[{
             TagBox[
              RowBox[{"(", "\[NoBreak]", GridBox[{
                 {"1", "0", "0", "0", "0", "0"},
                 {"0", "1", "0", "0", "0", "0"}
                },
                
                GridBoxAlignment->{
                 "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                  "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                  "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
              Function[BoxForm`e$, 
               MatrixForm[BoxForm`e$]]], "\[IndentingNewLine]", 
             "\[IndentingNewLine]", "This", " ", "will", " ", "be", " ", 
             "pre"}], "-", 
            RowBox[{
            "multiplied", " ", "by", " ", "a", " ", "2", "x2", " ", 
             "projection", " ", 
             RowBox[{"matrix", ".", "\[IndentingNewLine]", "The"}], " ", 
             "whole", " ", "thing", " ", "should", " ", "be", " ", 
             "logically", " ", "treated", " ", "as", " ", "if", " ", "it", 
             " ", "is", " ", "post"}], "-", 
            RowBox[{
            "multiplied", " ", "by", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", Cell[TextData[Cell[BoxData[
              TagBox[
               RowBox[{"(", "\[NoBreak]", GridBox[{
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "2"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "2"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "2"}]]}
                 },
                 
                 GridBoxAlignment->{
                  "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                   "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                   "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
               Function[BoxForm`e$, 
                MatrixForm[BoxForm`e$]]]],
              
              CellChangeTimes->{{3.600871330362259*^9, 
               3.6008713538916054`*^9}}]]]}]}]}]}], "\[IndentingNewLine]", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"epsilon", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{
           RowBox[{"IdentityMatrix", "[", " ", 
            RowBox[{"2", " ", "numberOfMasses"}], " ", "]"}], ",", "2"}], 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"res", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Table", "[", " ", 
             RowBox[{
              RowBox[{"Total", "@", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"oneTermOfdynamicsMatrix", "[", 
                   RowBox[{"#", ",", " ", "r", ",", " ", 
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", " ", "epsilon", ",", 
                    " ", "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
                 RowBox[{"(", 
                  RowBox[{"cdFlatAndSorted", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ")"}]}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], "]"}], " ",
             "//", " ", "Flatten"}], ",", " ", 
           RowBox[{"2", " ", "numberOfMasses"}]}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"res", " ", "/.", " ", 
          RowBox[{"qVec", " ", "\[Rule]", " ", "#"}]}], " ", "&"}]}]}], " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{"cdFlatAndSorted", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{"mScalarArray", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{
         RowBox[{
          RowBox[{"oneTermOfdynamicsMatrix", "[", 
           RowBox[{"#", ",", " ", "r", ",", " ", 
            RowBox[{"mScalarArray", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", " ", 
            "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"cdFlatAndSorted", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", "res"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", "epsilon"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"oneTermOfdynamicsMatrix", "[", " ", 
            RowBox[{
            "parameterLocatorDependencies", ",", " ", "couplingData"}], " ", 
            "]"}], "[", 
           RowBox[{"#", ",", " ", "r", ",", 
            RowBox[{"mScalarArray", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", 
            "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"cd", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcDynamics", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"calcDynamics", "::", "usage"}], " ", "=", " ", 
      "\"\<a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\
\!\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of \
the system eigenvalues, when evaluated at qLoc\>\""}], " ", ";"}], 
    "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcDynamics", "[", "mAtQ_List", "]"}], " ", ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Sqrt", "[", 
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Eigensystem", "[", " ", "mAtQ", " ", "]"}], " ", "//", " ", 
         "Transpose"}], ")"}]}], ")"}]}], "  ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "showDynamics", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showDynamics", "[", 
      RowBox[{
      "ld_List", ",", " ", "dynAtOmegaIndex_List", ",", " ", "sc_", ",", " ", 
       "ql_"}], "]"}], " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "pointsDataTable", ",", "numberLatticeLinesToDisplay", ",", " ", "e", 
         ",", " ", "omega", ",", " ", "points", ",", " ", "lines", ",", " ", 
         "nu", ",", " ", "a", ",", "b", ",", " ", "mScalarArray", ",", " ", 
         "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a", ",", " ", "b"}], "}"}], ",", "pointsDataTable", ",", 
           "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
           "mScalarArray", ",", " ", "numberOfMasses"}], "}"}], "=", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", "\"\<pointsDataTable\>\"", ",", 
            "\"\<numberLatticeLinesToDisplay\>\"", ",", " ", 
            "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", " ", 
            "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}], " ",
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"omega", ",", " ", "e"}], "}"}], " ", "=", " ", 
         "dynAtOmegaIndex"}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"e", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{"e", ",", "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"points", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"pointsDataTable", "[", 
              RowBox[{"[", "k", "]"}], "]"}], " ", "+", " ", 
             RowBox[{"Table", "[", " ", "\[IndentingNewLine]", " ", 
              RowBox[{
               RowBox[{"sc", " ", 
                RowBox[{"Re", "[", 
                 RowBox[{
                  RowBox[{"e", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], " ", 
                  RowBox[{"E", "^", 
                   RowBox[{"(", 
                    RowBox[{"I", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    RowBox[{"ql", " ", ".", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"a", " ", "i"}], " ", "+", " ", 
                    RowBox[{"b", " ", "j"}]}], ")"}]}], " ", "-", " ", 
                    RowBox[{"omega", " ", "#"}]}], ")"}]}], ")"}]}]}], " ", 
                 "]"}]}], "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", " ", 
                 RowBox[{"-", 
                  RowBox[{"numberLatticeLinesToDisplay", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                 RowBox[{"numberLatticeLinesToDisplay", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], "}"}], 
               "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{"j", ",", " ", 
                 RowBox[{"-", 
                  RowBox[{"numberLatticeLinesToDisplay", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                 RowBox[{"numberLatticeLinesToDisplay", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], 
              "\[IndentingNewLine]", "]"}]}], " ", "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"k", ",", "numberOfMasses"}], "}"}]}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"nu", " ", "=", " ", 
         RowBox[{"2", " ", "Pi", " ", 
          RowBox[{"If", "[", " ", 
           RowBox[{
            RowBox[{"omega", " ", "\[Equal]", " ", "0"}], ",", " ", "1", ",", 
            " ", 
            RowBox[{"1", "/", "omega"}]}], "]"}]}]}], " ", ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Show", "[", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"ListPlot", "[", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"points", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], "[", 
                  RowBox[{"nu", " ", "#"}], "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", 
                    " ", "glConstWindowHalfWidth"}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", 
                    " ", "glConstWindowHalfWidth"}], "}"}]}], "}"}]}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{
                 "ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], 
                 "\[IndentingNewLine]", ",", " ", 
                 RowBox[{"PlotStyle", "\[Rule]", 
                  RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"PointSize", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "/", "glConstMMax"}], "/",
                     "350"}], "]"}], "]"}], ",", 
                    RowBox[{"massColors", "[", "k", "]"}]}], "]"}]}]}], 
                "\[IndentingNewLine]", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"k", ",", "numberOfMasses"}], "}"}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Graphics", "[", 
              RowBox[{
              "{", "\[IndentingNewLine]", "lines", "\[IndentingNewLine]", 
               "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], " ", 
          "&"}], ")"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "frequencyPlotCalc", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"frequencyPlotCalc", "::", "usage"}], " ", "=", " ", 
      "\"\<frequencyPlotCalc[ parameterLocatorDependencies, matrix, meshSize]\
\>\""}], " ", ";"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"frequencyPlotCalc", "[", 
      RowBox[{"ld_List", ",", "m_", ",", "meshSz_Integer"}], "]"}], " ", ":=",
      " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "eigTable2D", ",", " ", "eigTable1D", ",", " ", "qMax", ",", " ", 
         "omegaPointList2D", ",", " ", "omegaPointList1D", ",", " ", "range", 
         ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"qMax", ",", " ", "numberOfMasses"}], "}"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<qMaxVec\>\"", ",", "\"\<numberOfMasses\>\""}], "}"}], 
          " ", "/.", " ", "ld"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"eigTable2D", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Re", "[", 
            RowBox[{"Table", "[", "  ", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"qx", ",", " ", "qy"}], "}"}], " ", ",", 
                RowBox[{"Eigenvalues", "[", " ", 
                 RowBox[{
                  RowBox[{"m", "[", " ", 
                   RowBox[{"{", 
                    RowBox[{"qx", ",", " ", "qy"}], "}"}], "  ", "]"}], " ", "//",
                   " ", "N"}], " ", "]"}]}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"qx", ",", " ", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"qMax", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "/", " ", "meshSz"}]}], 
               "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"qy", ",", " ", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"qMax", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "/", " ", "meshSz"}]}], 
               "}"}]}], " ", "]"}], " ", "]"}], ",", "1"}], "]"}]}], " ", ";",
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"omegaPointList2D", "[", "nn_", "]"}], " ", ":=", "  ", 
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"Sqrt", "[", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
               RowBox[{"[", "nn", "]"}], "]"}]}], "}"}], "]"}], "&"}], "/@", 
          " ", "eigTable2D"}]}], "  ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"range", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"2", " ", "numberOfMasses"}], ")"}], " ", "//", " ", 
           "Range"}], ")"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"ListPlot3D", "[", " ", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"omegaPointList2D", "[", "#", "]"}], " ", "&"}], "/@", 
           " ", "range"}], ",", " ", 
          RowBox[{"PlotRange", " ", "\[Rule]", " ", "Full"}], " ", ",", " ", 
          RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], ",", 
          RowBox[{"AxesLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<\!\(\*SubscriptBox[\(q\), \(x\)]\)\>\"", ",", " ", 
             "\"\<\!\(\*SubscriptBox[\(q\), \(y\)]\)\>\""}], "}"}]}]}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\n", " ", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "showFreqPlot", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"showFreqPlot", "[", " ", 
     RowBox[{"qPlaneLoc", ",", " ", "freqPlot"}], " ", "]"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showFreqPlot", "[", 
      RowBox[{"qpl_List", ",", " ", "freqPlotData_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"aa", ",", " ", "bb"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"aa", ",", " ", "bb"}], "}"}], " ", "=", "  ", "qpl"}], " ",
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{"{", 
          RowBox[{"freqPlotData", ",", "\[IndentingNewLine]", 
           RowBox[{"Graphics3D", "[", " ", 
            RowBox[{"Polygon", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", 
               "  ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}]}], "}"}],
              "]"}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.601384568255503*^9, 3.6013846068957133`*^9}, {
   3.601384697696907*^9, 3.6013847654097795`*^9}, 3.601385370746403*^9, {
   3.601385703897458*^9, 3.6013858671947985`*^9}, {3.6013859369007854`*^9, 
   3.6013862565130663`*^9}, {3.601386287618845*^9, 3.601386609852276*^9}},
 CellID->454600298]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"tick", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"Dynamic", "@", 
     RowBox[{"(", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"This", " ", 
          RowBox[{"If", "[", "]"}], " ", "is", " ", "effectively", " ", "my", 
          " ", "Initialization"}], " ", "\[RuleDelayed]", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"{", "}"}], " ", 
           RowBox[{"block", ".", "  ", "Done"}], " ", "with", " ", "a", " ", 
           "variable", " ", "so", " ", "that", " ", "copies", " ", "of", " ", 
           "the", " ", "output", " ", "cell", " ", 
           RowBox[{"won", "'"}], "t", " ", "re"}], "-", 
          RowBox[{"execute", " ", "their", " ", "Initialization", " ", 
           RowBox[{"cells", ".", "  ", "This"}], " ", "allows", " ", 
           "\"\<interesting\>\"", " ", "settings", " ", "to", " ", "be", " ", 
           "maintained", " ", "per"}], "-", 
          RowBox[{
          "copy", " ", "of", " ", "the", " ", "output", " ", "cell"}]}]}], 
        ",", " ", 
        RowBox[{
        "but", " ", "still", " ", "provide", " ", "an", " ", "Initialization",
          " ", "block", " ", "for", " ", "the", " ", "primary", " ", "output",
          " ", 
         RowBox[{"cell", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", " ", 
      RowBox[{
       RowBox[{"If", " ", "[", " ", 
        RowBox[{"bInitDefaults", ",", 
         RowBox[{"(", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"u", " ", "=", " ", 
            RowBox[{"Flatten", "[", " ", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], "}"}], 
              ",", " ", "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
            RowBox[{"locDependent", "[", " ", 
             RowBox[{
             "u", ",", " ", "rawNumberOfMasses", ",", "rawArrayOfMasses"}], 
             " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
           RowBox[{"kArray", " ", "=", " ", 
            RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", "n", "}"}], ",", 
             RowBox[{
              RowBox[{"n", " ", "=", " ", "2"}], " ", ";", 
              RowBox[{"While", "[", 
               RowBox[{
                RowBox[{"n", "\[LessEqual]", "rawNumberOfMasses"}], ",", 
                RowBox[{
                 RowBox[{"kArray", " ", "=", " ", 
                  RowBox[{"returnKarrayForAdditionalMassIndex", "[", 
                   RowBox[{"kArray", ",", "n"}], "]"}]}], " ", ";", " ", 
                 RowBox[{"n", "++"}]}]}], "]"}]}]}], " ", "]"}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"qLoc", " ", "=", " ", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
              "\"\<qMaxVec\>\"", " ", "/.", " ", 
               "parameterLocatorDependencies"}], ")"}], "/", "2"}]}], " ", 
           ";", "\[IndentingNewLine]", 
           RowBox[{"qPlaneLoc", " ", "=", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
           "\[IndentingNewLine]", 
           RowBox[{"couplingData", " ", "=", " ", 
            RowBox[{"calculateCouplings", "[", " ", 
             RowBox[{"parameterLocatorDependencies", ",", " ", "kArray"}], 
             " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"bRefreshMatrix", ":", " ", 
              RowBox[{"dependent", " ", "on"}], ":", " ", 
              "parameterLocatorDependencies"}], ",", " ", "couplingData"}], 
            " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"matrix", " ", "=", " ", 
            RowBox[{"dynamicsMatrix", "[", " ", 
             RowBox[{
             "parameterLocatorDependencies", ",", " ", "couplingData"}], " ", 
             "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"bRefreshDynamics", ":", " ", 
              RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
             "qLoc", ","}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"dynamics", " ", "=", " ", 
            RowBox[{"calcDynamics", "[", " ", 
             RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}]}], 
           " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"bRefreshDynPlot", ":", " ", 
              RowBox[{"dependent", " ", "on", " ", "dynamics"}]}], ",", " ", 
             "omegaIndex", ",", " ", "scale"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"dynPlot", " ", "=", " ", 
            RowBox[{"showDynamics", "[", " ", 
             RowBox[{"parameterLocatorDependencies", ",", " ", 
              RowBox[{"dynamics", "[", 
               RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale", 
              ",", " ", "qLoc"}], " ", "]"}]}], " ", ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"bRefreshFreqPlot", ":", " ", 
              RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
             "meshSize"}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"freqPlot", " ", "=", " ", 
            RowBox[{"frequencyPlotCalc", "[", " ", 
             RowBox[{
             "parameterLocatorDependencies", ",", " ", "matrix", ",", " ", 
              "meshSize"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"bInitDefaults", " ", "=", " ", "False"}], " ", ";"}], 
          "\[IndentingNewLine]", ")"}], ","}], "]"}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", " ", 
        RowBox[{
         RowBox[{"tabNumber", " ", "\[Equal]", " ", "dynTab"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", " ", 
            RowBox[{"bRefreshMatrix", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"matrix", " ", "=", " ", 
                RowBox[{"dynamicsMatrix", "[", " ", 
                 RowBox[{
                 "parameterLocatorDependencies", ",", " ", "couplingData"}], 
                 " ", "]"}]}], " ", ";", 
               RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
               RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";", 
               " ", 
               RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
              ")"}], ","}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", " ", 
            RowBox[{"bRefreshDynamics", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"dynamics", " ", "=", " ", 
                RowBox[{"calcDynamics", "[", " ", 
                 RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}]}],
                " ", ";", 
               RowBox[{"bRefreshDynamics", " ", "=", " ", "False"}], " ", ";", 
               RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}]}], ")"}], 
             ","}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", " ", 
            RowBox[{"bRefreshDynPlot", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"dynPlot", " ", "=", " ", 
                RowBox[{"showDynamics", "[", " ", 
                 RowBox[{"parameterLocatorDependencies", ",", " ", 
                  RowBox[{"dynamics", "[", 
                   RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale",
                   ",", " ", "qLoc"}], " ", "]"}]}], " ", ";", 
               RowBox[{"bRefreshDynPlot", " ", "=", " ", "False"}]}], ")"}], 
             ","}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"dynPlot", "[", "tau", "]"}]}], " ", "\[IndentingNewLine]",
           ")"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"Plot", "[", 
           RowBox[{"x", ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "*)"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"tabNumber", " ", "\[Equal]", " ", "freqTab"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", " ", 
              RowBox[{"bRefreshMatrix", ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"matrix", " ", "=", " ", 
                  RowBox[{"dynamicsMatrix", "[", " ", 
                   RowBox[{
                   "parameterLocatorDependencies", ",", " ", "couplingData"}],
                    " ", "]"}]}], " ", ";", 
                 RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
                 RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", 
                 ";", " ", 
                 RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
                ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
             RowBox[{"If", "[", " ", 
              RowBox[{"bRefreshFreqPlot", ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"freqPlot", " ", "=", " ", 
                  RowBox[{"frequencyPlotCalc", "[", " ", 
                   RowBox[{
                   "parameterLocatorDependencies", ",", " ", "matrix", ",", 
                    " ", "meshSize"}], "]"}]}], " ", ";", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{"Beep", "[", "]"}], " ", ";"}], "*)"}], 
                 RowBox[{"bRefreshFreqPlot", " ", "=", " ", "False"}]}], " ", 
                ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
             RowBox[{"showFreqPlot", "[", " ", 
              RowBox[{"qPlaneLoc", ",", " ", "freqPlot"}], " ", "]"}]}], 
            "\[IndentingNewLine]", 
            RowBox[{"(*", "freqPlot", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", "matrix", "*)"}], "\[IndentingNewLine]", ")"}], 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"Plot", "[", 
             RowBox[{
              RowBox[{"-", "x"}], ",", 
              RowBox[{"{", 
               RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "*)"}], 
           "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{"(*", "couplingLocator", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"LocatorPane", "[", " ", 
            RowBox[{
             RowBox[{"Dynamic", "[", 
              RowBox[{"u", ",", 
               RowBox[{
                RowBox[{"(", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"u", " ", "=", " ", 
                   RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], "<", "3"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Flatten", "[", " ", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], 
                    "}"}], ",", " ", "1"}], "]"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    "cap", " ", "the", " ", "number", " ", "of", " ", 
                    "Locators", " ", "at", " ", "5"}], ",", " ", 
                    RowBox[{
                    "so", " ", "the", " ", "selection", " ", "Pane", " ", 
                    RowBox[{"doesn", "'"}], "t", " ", "start", " ", 
                    "truncating", " ", 
                    RowBox[{"the", " ", "'"}], "to", " ", 
                    RowBox[{"neighbouring", "'"}], " ", "SetterBar"}]}], " ", 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"If", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], " ", ">", " ", "7"}], ",", " ", 
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", "7"}], "]"}], ",", " ", "#"}], "]"}]}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Module", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"rm", ",", "km"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"rm", " ", "=", " ", 
                    RowBox[{"First", "@", 
                    RowBox[{"Dimensions", "[", "rawArrayOfMasses", "]"}]}]}], 
                    " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"If", " ", "[", 
                    RowBox[{
                    RowBox[{"rm", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "rawArrayOfMasses"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"rawArrayOfMasses", " ", "=", " ", 
                    RowBox[{"Take", "[", " ", 
                    RowBox[{"rawArrayOfMasses", ",", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "rawArrayOfMasses", " ", "if", " ", 
                    "required"}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"rm", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{
                    "rawArrayOfMasses", ",", " ", "glConstDefaultMass"}], 
                    "]"}], " ", ";", " ", 
                    RowBox[{"rm", "++"}]}]}], " ", "]"}]}], 
                    "\[IndentingNewLine]", "]"}], " ", ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"km", " ", "=", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], " ", "//", " ", 
                    "Max"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", " ", "[", 
                    RowBox[{
                    RowBox[{"km", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "kArray"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"Select", "[", 
                    RowBox[{"kArray", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "\[LessEqual]", "  ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], "&"}], 
                    ")"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "kArray", " ", "if", " ", "required"}], 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"km", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"km", "++"}], " ", ";", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnKarrayForAdditionalMassIndex", "[", 
                    RowBox[{"kArray", ",", "km"}], "]"}]}]}]}], " ", "]"}]}], 
                    " ", "\[IndentingNewLine]", "]"}]}]}], 
                   "\[IndentingNewLine]", "]"}], " ", ";", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                    "lattice", " ", "vector", " ", "end", " ", "points", " ", 
                    "to", " ", "be", " ", "too", " ", "close", " ", "to", " ",
                     "the", " ", "origin"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", 
                   RowBox[{"If", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "<", " ", 
                    "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                    RowBox[{"glConstLocDefault", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", 
                   RowBox[{"If", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ".", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], " ", "<", " ", 
                    "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                    RowBox[{"glConstLocDefault", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                    "angle", " ", "between", " ", "lattice", " ", "vectors", 
                    " ", "get", " ", "too", " ", "small"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], " ", "=", " ", 
                   RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
                    RowBox[{
                    "u", ",", " ", " ", 
                    "glConstMinAngleBetweenLatticeVectors"}], " ", "]"}]}], 
                  " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"rawNumberOfMasses", " ", "=", " ", 
                   RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", ";",
                   "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                   "These", " ", "are", " ", "in", " ", "case", " ", "the", 
                    " ", "number", " ", "of", " ", "locators", " ", "were", 
                    " ", "changed", " ", "and", " ", "we", " ", "have", " ", 
                    "a", " ", "mass", " ", "selected", " ", "that", " ", "is",
                     " ", "now", " ", 
                    RowBox[{"invalid", "."}]}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"m1Sel", " ", "=", " ", 
                   RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"m1Sel", " ", ">", "rawNumberOfMasses"}], ",", 
                    " ", "1", ",", " ", "m1Sel"}], "]"}]}], " ", ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"m2Sel", " ", "=", " ", 
                   RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"m2Sel", " ", ">", "rawNumberOfMasses"}], ",", 
                    " ", "1", ",", " ", "m2Sel"}], "]"}]}], " ", ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"moSel", " ", "=", " ", 
                   RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"moSel", " ", ">", "rawNumberOfMasses"}], ",", 
                    " ", "1", ",", " ", "moSel"}], " ", "]"}]}], " ", ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"moSel", " ", "=", " ", 
                   RowBox[{"adjustedmoSel", "[", " ", 
                    RowBox[{
                    "rawNumberOfMasses", ",", " ", "moSel", ",", " ", 
                    "m1Sel"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{
                    "Adjust", " ", "these", " ", "for", " ", "Slider", " ", 
                    "display", " ", "in", " ", "case", " ", "m1Sel"}], ",", 
                    " ", "m2Sel", ",", " ", 
                    RowBox[{
                    "or", " ", "moSel", " ", "were", " ", "changed", " ", 
                    "just", " ", 
                    RowBox[{"above", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"k1", " ", "=", " ", 
                   RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                  RowBox[{"k2", " ", "=", " ", 
                   RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                  RowBox[{"k3", " ", "=", " ", 
                   RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                  RowBox[{"k4", " ", "=", " ", 
                   RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                  RowBox[{"k5", " ", "=", " ", 
                   RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                  "\[IndentingNewLine]", 
                  RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
                   RowBox[{"locDependent", "[", " ", 
                    RowBox[{
                    "u", ",", " ", "rawNumberOfMasses", ",", 
                    "rawArrayOfMasses"}], " ", "]"}]}], " ", ";", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"Reset", " ", "in", " ", "case", " ", "a"}], ",", 
                    RowBox[{"or", " ", "b", " ", "changed"}], ",", " ", 
                    RowBox[{
                    "and", " ", "the", " ", "last", " ", "selected", " ", 
                    "value", " ", "is", " ", "now", " ", "out", " ", "of", 
                    " ", 
                    RowBox[{"range", "."}]}]}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"qLoc", " ", "=", " ", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", "/.", "parameterLocatorDependencies"}],
                     " ", ")"}], "/", "2"}]}], "  ", ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"qPlaneLoc", " ", "=", " ", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"couplingData", " ", "=", " ", 
                   RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                  "\[IndentingNewLine]", 
                  RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", ";",
                   "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"tick", "=", 
                   RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
              "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"Why", " ", 
                RowBox[{"doesn", "'"}], "t", " ", "Alt"}], "-", 
               RowBox[{
               "click", " ", "to", " ", "remove", " ", "existing", " ", 
                "Locator", " ", "refresh", " ", "this", " ", 
                RowBox[{"plot", "?", "  ", 
                 RowBox[{"Workaround", ":", " ", 
                  RowBox[{
                  "move", " ", "one", " ", "of", " ", "the", " ", "other", 
                   " ", "locators", " ", "to", " ", "refresh"}]}]}]}]}], " ", 
              "*)"}], "\[IndentingNewLine]", 
             RowBox[{"plotSprings", "[", 
              RowBox[{
              "u", ",", " ", "parameterLocatorDependencies", ",", 
               "couplingData", ",", "m1Sel", ",", " ", "m2Sel", ",", " ", 
               "moSel"}], "]"}], " ", ",", "\[IndentingNewLine]", 
             RowBox[{"LocatorAutoCreate", "\[Rule]", "True"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
            "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", " ", 
          "]"}]}], "]"}]}], " ", 
      RowBox[{"(*", 
       RowBox[{"If", ",", "If"}], "*)"}], "\[IndentingNewLine]", ")"}]}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "0", "*)"}], "\[IndentingNewLine]", ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Dynamic", "@", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"k5manip", ",", 
        RowBox[{"TabView", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<dynamics\>\"", " ", "\[Rule]", "  ", 
             RowBox[{"Column", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "dynTab"}], " ", ";", 
               RowBox[{"(*", "dynamicsControls", "*)"}], 
               RowBox[{"{", " ", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Row", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"OverVector", "[", "\"\<q\>\"", "]"}], ",", 
                    "\[IndentingNewLine]", "\"\< = \>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "qm", "}"}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"qm", " ", "=", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", "  ", "/.", 
                    "parameterLocatorDependencies"}], ")"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Slider2D", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"qLoc", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"qLoc", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", 
                    RowBox[{"(*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.01", ",", "0.01"}], "}"}], ",", " ", "qm"}], 
                    "}"}], "*)"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", " ", "qm"}], ")"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], 
                    "\[IndentingNewLine]", ",", " ", 
                    RowBox[{"ImageSize", " ", "\[Rule]", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"150", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}], " ", "&"}], ")"}], 
                    " ", "@", " ", "qm"}]}]}], "\[IndentingNewLine]", 
                    "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", " ", 
                    "\[IndentingNewLine]", "\"\< 2 \[Pi] \>\"", ",", "  ", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"(", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"qLoc", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "Pi"}], ")"}]}], " ", "//", " ", 
                    "MatrixForm"}], ")"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "Text", "@", "\"\<time, normalized to one period:\>\""}], 
                   "}"}], "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"Manipulator", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"tau", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"tau", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0", ",", " ", "0", ",", " ", "1"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "True"}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}]}], 
                    "]"}], "}"}], "\[IndentingNewLine]", ",", " ", 
                   RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"200", ",", "60"}], "}"}]}]}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{"Text", "@", "\"\<oscillation scale factor:\>\""}],
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Manipulator", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"scale", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"scale", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.05", ",", " ", "0.05", ",", " ", "1"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.05", ",", "1"}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], 
                    "\[IndentingNewLine]", "\"\< \>\""}], ",", "  ", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"(", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"scale", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], 
                  "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Text", "[", 
                  RowBox[{
                  "Text", "@", 
                   "\"\<Angular frequency \[Omega](q), selection:\>\""}], 
                  "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Dynamic", "@", 
                  RowBox[{"SetterBar", "[", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"omegaIndex", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"omegaIndex", "=", "#"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", 
                    RowBox[{"Range", "[", 
                    RowBox[{"2", "rawNumberOfMasses"}], "]"}]}], " ", 
                   "]"}]}]}], "\[IndentingNewLine]", "}"}]}], " ", "]"}]}], 
            "\[IndentingNewLine]", ",", 
            RowBox[{
            "\"\<\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))\>\
\"", " ", "\[Rule]", "  ", 
             RowBox[{"Column", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "freqTab"}], " ", ";", 
               RowBox[{"(*", "freqControls", "*)"}], 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Row", "[", 
                  RowBox[{"{", " ", 
                   RowBox[{
                    RowBox[{"Text", "@", "\"\<mesh size \>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Manipulator", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"meshSize", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"meshSize", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "8", ",", " ", "2", ",", " ", "30"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "30", ",", "2"}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
                    "\"\< \>\"", ",", " ", 
                    RowBox[{"Dynamic", "[", "meshSize", "]"}]}], " ", 
                   "\[IndentingNewLine]", "}"}], "]"}], ",", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"LocatorPane", "[", 
                  RowBox[{
                   RowBox[{"Dynamic", "[", "qPlaneLoc", 
                    RowBox[{"(*", 
                    RowBox[{",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"qPlaneLoc", " ", "=", " ", "#"}], ";", " ", 
                    RowBox[{"tick", "=", 
                    RowBox[{
                    RowBox[{"Not", "[", "tick", "]"}], " ", "&"}]}]}], 
                    ")"}]}], "*)"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Graphics", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Lighter", "@", "Gray"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Polygon", "[", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    ")"}], "\[IndentingNewLine]", " ", "]"}], ",", 
                    "\[IndentingNewLine]", "Black", ",", 
                    RowBox[{"Line", "[", "qPlaneLoc", "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                    " ", 
                    RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    "/", "2"}]}], "\[IndentingNewLine]", ",", 
                    RowBox[{"ImageSize", " ", "\[Rule]", "  ", 
                    RowBox[{"200", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}]}]}], 
                    "\[IndentingNewLine]", "]"}], " ", "&"}], " ", "@", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", " ", "/.", 
                    "parameterLocatorDependencies"}], ")"}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
                  "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                "}"}]}], " ", "]"}]}], "\[IndentingNewLine]", ",", " ", 
            RowBox[{"\"\<parameters\>\"", "\[Rule]", 
             RowBox[{"Grid", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "parametersTab"}], " ", 
               ";", "\[IndentingNewLine]", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<mp: \>\"", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mPosFirstCell\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<tn: \>\"", ",", " ", "tabNumber"}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<qLoc = \>\"", ",", " ", "qLoc"}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<qPlaneLoc = \>\"", ",", " ", "qPlaneLoc"}], 
                   "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<u = \>\"", ",", " ", "u"}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", " ", 
                   RowBox[{"\"\<qr:\>\"", " ", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], ")"}]}], "}"}],
                   ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<cd:\>\"", ",", " ", 
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<cd:\>\"", ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}]}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", " ", 
                   RowBox[{"\"\<m1Sel, m2Sel, moSel = \>\"", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"m1Sel", ",", " ", "m2Sel", ",", " ", "moSel"}], 
                    "}"}]}], "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<cN: \>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Select", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
                    RowBox[{"{", 
                    RowBox[{"m1Sel", ",", " ", "m2Sel"}], "}"}]}], "&"}]}], 
                    " ", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", "7", ",", "4"}], "}"}], "]"}], "]"}]}], 
                   "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<cN: \>\"", ",", 
                    RowBox[{
                    RowBox[{"Select", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
                    RowBox[{"{", 
                    RowBox[{"m1Sel", ",", " ", "m2Sel"}], "}"}]}], "&"}]}], 
                    " ", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", " ", 
                   RowBox[{
                   "\"\<rawArrayOfMasses = \>\"", ",", " ", 
                    "rawArrayOfMasses"}], " ", "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<range \[Omega]: \>\"", ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"2", "rawNumberOfMasses"}], "]"}]}], "}"}], ","}],
                  "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<kArray = \>\"", ",", " ", "kArray"}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<km: \>\"", ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], " ", "//", " ", 
                    "Max"}]}], "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<km: \>\"", ",", " ", 
                    RowBox[{"DeleteDuplicates", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ")"}]}]}], " ", 
                   "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                   "\"\<couplingData = \>\"", ",", " ", "couplingData"}], 
                   "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<k1, k2, k3, k4, k5 = \>\"", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    "k1", ",", " ", "k2", ",", " ", "k3", ",", " ", "k4", ",",
                     " ", "k5"}], "}"}]}], "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<ms: \>\"", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<nm: \>\"", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<numberOfMasses\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<nm: \>\"", ",", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<re: \>\"", ",", " ", 
                    RowBox[{"2", " ", "Pi", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<reciprocalNorms\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}]}], "}"}], ","}],
                  "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<sc: \>\"", ",", " ", 
                    RowBox[{"DeleteDuplicates", "@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", " ", 
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{"glConstNeighboringCellIndexes", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
                    RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
                    RowBox[{"foo", "[", "n", "]"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"s", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}],
                     ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", 
                    "1"}], "]"}]}]}], " ", "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<mm: \>\"", ",", 
                    RowBox[{
                    RowBox[{"matrix", "[", "qLoc", "]"}], " ", "//", " ", 
                    "MatrixForm"}]}], "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<mm: \>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SplitBy", "[", " ", 
                    RowBox[{
                    RowBox[{"Sort", "@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"couplingData", ",", " ", "2"}], "]"}]}], " ", 
                    ",", " ", "First"}], " ", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"(*", "massSetter", "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Text", "[", "\"\<mass: \>\"", "]"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "@", 
                    RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"m1Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m1Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"moSel", " ", "=", " ", 
                    RowBox[{"adjustedmoSel", "[", " ", 
                    RowBox[{
                    "rawNumberOfMasses", ",", " ", "moSel", ",", " ", 
                    "m1Sel"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", " ", "]"}]}], "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"massValue", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.25", ",", " ", "0.25", ",", " ", 
                    "glConstMMax"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"rawArrayOfMasses", "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "=", "massValue"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
                    RowBox[{"(", 
                    RowBox[{"parameterLocatorDependencies", " ", "/.", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"\"\<mScalarArray\>\"", ",", " ", "_"}], "]"}], 
                    " ", "\[RuleDelayed]", " ", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", ",", " ", "rawArrayOfMasses"}], 
                    "]"}]}], ")"}]}], " ", ")"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{"0.25", ",", 
                    RowBox[{"Dynamic", "@", "glConstMMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"massValue", ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "m2Setter", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                   "Text", "[", "\"\<coupling to neighbouring: \>\"", " ", 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                   RowBox[{"Dynamic", "@", 
                    RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"m2Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m2Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
                    RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
                  "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "km1", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<horizontal: \>\""}], ",", 
                    RowBox[{"kLable", "[", "1", "]"}], ",", " ", 
                    "\"\< || \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", 
                    "\"\< \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k1", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k1", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1", ",", " ", "k1"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k1", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "km2", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<vertical: \>\""}], ",", 
                    RowBox[{"kLable", "[", "2", "]"}], ",", " ", 
                    "\"\< || \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", 
                    "\"\< \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k2", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k2", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", 
                    ",", " ", " ", "2", ",", " ", "k2"}], " ", "]"}]}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k2", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], " ", 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "km3", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
                    RowBox[{"kLable", "[", "3", "]"}], ",", " ", 
                    "\"\< || (\>\"", ",", "  ", 
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
                    "\"\< + \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
                    "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k3", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k3", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "3", ",", " ", "k3"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k3", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "km4", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
                    RowBox[{"kLable", "[", "4", "]"}], ",", " ", 
                    "\"\< || (\>\"", ",", "  ", 
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
                    "\"\< - \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
                    "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k4", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k4", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "4", ",", " ", "k4"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k4", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"k5manip", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"k5manip", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "\[IndentingNewLine]", 
                "}"}]}], " ", "\[IndentingNewLine]", "]"}]}]}], 
           "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Dynamic", " ", "@", "tabNumber"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ImageSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"250", ",", "350"}], "}"}]}]}], " ", 
         "\[IndentingNewLine]", "]"}]}], " ", "\[IndentingNewLine]", "]"}], 
      " ", "@", "\[IndentingNewLine]", 
      RowBox[{"If", "[", " ", 
       RowBox[{
        RowBox[{"rawNumberOfMasses", " ", "\[Equal]", " ", "1"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Row", "[", 
             RowBox[{"{", " ", 
              RowBox[{
               RowBox[{"Text", "@", "\"\<coupling from \>\""}], ",", " ", 
               RowBox[{"Dynamic", "@", 
                RowBox[{"massLabel", "[", " ", "m1Sel", "]"}]}], ",", 
               RowBox[{"Text", "@", "\"\< to: \>\""}]}], "}"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Dynamic", "@", 
             RowBox[{"If", " ", "[", " ", 
              RowBox[{
               RowBox[{"rawNumberOfMasses", " ", ">", " ", "2"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"moSel", ",", 
                   RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"moSel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                  "]"}], ",", " ", "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                    " ", 
                   RowBox[{"(", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}], ",", 
                    "m1Sel"}], "]"}], ")"}]}], ")"}]}], "\[IndentingNewLine]",
                 "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Dynamic", "@", 
                RowBox[{"massLabel", "[", " ", 
                 RowBox[{"First", "@", 
                  RowBox[{"Delete", "[", " ", 
                   RowBox[{
                    RowBox[{"Range", "[", "2", "]"}], ",", " ", "m1Sel"}], 
                   "]"}]}], " ", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
           "\[IndentingNewLine]", "}"}], " ", ",", 
          RowBox[{"{", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Row", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"kLable", "[", "5", "]"}], ",", " ", "\"\<: \>\""}], 
              "}"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Row", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"k5", ",", 
                   RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k5", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKarrayOriginElement", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "moSel", ",", " ", 
                    "k5"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                  "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                   RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                 RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                 RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                 RowBox[{"AppearanceElements", "\[Rule]", 
                  RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               "\"\< \>\"", ",", 
               RowBox[{"Dynamic", "@", 
                RowBox[{"NumberForm", "[", " ", 
                 RowBox[{"k5", ",", 
                  RowBox[{"{", 
                   RowBox[{"3", ",", "2"}], "}"}]}], "]"}]}]}], 
              "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
           "}"}]}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
       "]"}]}], " ", 
     RowBox[{"(*", "If", "*)"}], "\[IndentingNewLine]", ")"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tick", ",", "False"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qPlaneLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tau", ",", "0"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"omegaIndex", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"scale", ",", " ", "0.2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"meshSize", ",", "8"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"matrix", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynamics", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bInitDefaults", ",", " ", "True"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshMatrix", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynamics", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshFreqPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tabNumber", ",", "1"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynTab", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqTab", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parametersTab", ",", " ", "3"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstMinSquaredDistanceFromOrigin", ",", " ", "0.1"}], 
        "}"}], ",", " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstMinAngleBetweenLatticeVectors", ",", " ", 
         RowBox[{"Pi", "/", "6"}]}], "}"}], ",", " ", "None"}], "}"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstLocDefault", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.1", ",", " ", "1.3"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1.9", ",", " ", "0.8"}], "}"}]}], "}"}]}], "}"}], ",", 
       " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstDefaultMass", ",", " ", "20"}], "}"}], ",", " ", 
       "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstKDefaults", ",", " ", 
         RowBox[{"{", 
          RowBox[{
          "0.25", ",", " ", "0.25", ",", " ", "0.25", ",", " ", "0.25", ",", 
           " ", "0.25"}], "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstKMin", ",", " ", "0.05"}], "}"}], ",", " ", "None"}], 
      "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstKMax", ",", " ", "1"}], "}"}], ",", " ", "None"}], 
      "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstMMax", ",", " ", "30"}], "}"}], ",", " ", "None"}], 
      "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstWindowHalfWidth", ",", " ", "3"}], "}"}], ",", " ", 
       "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstSpringColors", ",", 
         RowBox[{"Darker", "@", 
          RowBox[{"{", " ", 
           RowBox[{
           "Orange", ",", "Green", ",", "Purple", ",", "Cyan", ",", 
            "Yellow"}], " ", "}"}]}]}], " ", "}"}], " ", ",", " ", "None"}], 
      "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstPrimaryDisplaySize", ",", " ", 
         RowBox[{"{", 
          RowBox[{"380", ",", "380"}], "}"}]}], "}"}], ",", " ", "None"}], 
      "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstTextDisplayOffsetHack", ",", " ", 
         RowBox[{"{", 
          RowBox[{"0.25", ",", " ", "0.25"}], "}"}]}], "}"}], ",", " ", 
       "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstNeighboringCellIndexes", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], " ", "}"}], ",", " ", 
       "None"}], "}"}]}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "The", " ", "number", " ", "of", " ", "default", " ", "masses", " ", 
     "are", " ", "coupled", " ", "by", " ", "these", " ", "next", " ", "four",
      " ", 
     RowBox[{"variables", "."}]}], " ", "*)"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawNumberOfMasses", ",", " ", "3"}], "}"}], ",", " ", "None"}],
     "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mLocDefault", ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0.9", ",", "0.7"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0.4", ",", " ", "1.2"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1.3", ",", " ", "1.4"}], "}"}]}], "}"}]}], "}"}], ",", " ",
      "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawArrayOfMasses", ",", " ", 
       RowBox[{"{", 
        RowBox[{"10", ",", " ", "15", ",", " ", "20"}], "}"}]}], "}"}], ",", 
     " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"moSel", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"pick", " ", "anything", " ", "that", " ", 
     RowBox[{"isn", "'"}], "t", " ", "m1Sel"}], " ", "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m1Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m2Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"kArray", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], " ", 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"u", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parameterLocatorDependencies", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"couplingData", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstSpringColorsByN", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k1", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k2", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k3", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k4", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k5", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
    RowBox[{"{", "tick", "}"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}], "\[IndentingNewLine]", 
   ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}], "\[IndentingNewLine]", ",", 
   RowBox[{"SynchronousInitialization", "\[Rule]", "False"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{
  3.6013845596960135`*^9, {3.6013849419158754`*^9, 3.6013850018713045`*^9}, {
   3.6013850794767437`*^9, 3.601385097266761*^9}, {3.601385134804908*^9, 
   3.6013851913481417`*^9}, 3.601385299290316*^9, {3.601385437846241*^9, 
   3.6013854385522814`*^9}, 3.60138559342614*^9, {3.6013868469728384`*^9, 
   3.6013870381917753`*^9}},
 CellID->106836794],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}}, {{
       2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}, {{
       3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}, {
       3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}}, {{{
       1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
        0.09999999999999987}, {{
        0.19999999999999987`, -0.3999999999999999}, {-0.3999999999999999, 
        0.8}}}, {
       1, 2, {-1, 0}, 0.25, 1., {0.9, 0.7}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       1, 2, {-1, 1}, 0.25, 1.6899999999999995`, {0.9, 0.7}, {
        2.1999999999999997`, 0.7}, {{0.9999999999999999, 0.}, {0., 0.}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 3, {0, -1}, 0.25, 2.2600000000000002`, {0.9, 
        0.7}, {-0.5999999999999999, 0.5999999999999999}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       1, 3, {1, -1}, 0.25, 3.3999999999999995`, {0.9, 
        0.7}, {-0.4999999999999998, 1.9}, {{
        0.5764705882352942, -0.4941176470588236}, {-0.4941176470588236, 
        0.423529411764706}}}, {
       1, 2, {1, 0}, 0.25, 3.4000000000000004`, {0.9, 0.7}, {0.5, 2.5}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 2, {0, 1}, 0.25, 3.65, {0.9, 0.7}, {2.3, 2.}, {{0.5369863013698629, 
        0.4986301369863013}, {0.4986301369863013, 0.463013698630137}}}, {
       1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 2.7}, {{
        0.05882352941176473, 0.23529411764705888`}, {0.23529411764705888`, 
        0.9411764705882353}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 3, {-1, -1}, 0.25, 4.520000000000001, {0.9, 
        0.7}, {-0.7, -0.7000000000000002}, {{0.5663716814159291, 
        0.49557522123893794`}, {0.49557522123893794`, 
        0.43362831858407075`}}}, {
       1, 3, {-1, 1}, 0.25, 4.879999999999999, {0.9, 0.7}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       1, 2, {0, -1}, 0.25, 5.85, {0.9, 0.7}, {-1.5, 0.3999999999999999}, {{
        0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
        0.015384615384615389`}}}, {
       1, 2, {1, -1}, 0.25, 6.289999999999999, {0.9, 0.7}, {-1.4, 1.7}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       1, 3, {0, 1}, 0.25, 7.540000000000002, {0.9, 0.7}, {3.2, 2.2}, {{
        0.7015915119363394, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 2, {-1, -1}, 0.25, 8.81, {0.9, 0.7}, {-1.6, -0.9000000000000001}, {{
        0.7094211123723042, 0.4540295119182747}, {0.4540295119182747, 
        0.29057888762769585`}}}, {
       1, 2, {1, 1}, 0.25, 9.009999999999998, {0.9, 0.7}, {2.4, 3.3}, {{
        0.24972253052164267`, 0.4328523862375139}, {0.4328523862375139, 
        0.7502774694783573}}}, {
       1, 3, {1, 1}, 0.25, 13.599999999999998`, {0.9, 0.7}, {3.3, 3.5}, {{
        0.423529411764706, 0.4941176470588236}, {0.4941176470588236, 
        0.5764705882352942}}}}, {{
       2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       2, 3, {1, -1}, 0.25, 1.2999999999999996`, {0.4, 
        1.2}, {-0.4999999999999998, 1.9}, {{
        0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
        0.376923076923077}}}, {
       2, 3, {0, -1}, 0.25, 1.3599999999999999`, {0.4, 
        1.2}, {-0.5999999999999999, 0.5999999999999999}, {{0.7352941176470588,
         0.44117647058823534`}, {0.44117647058823534`, 
        0.2647058823529413}}}, {
       2, 1, {1, -1}, 0.25, 1.6899999999999995`, {0.4, 
        1.2}, {-0.8999999999999998, 1.2}, {{0.9999999999999999, 0.}, {0., 
        0.}}}, {2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
        2.5}, {{0.005882352941176467, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 0.09999999999999987}, {{
        0.34594594594594585`, -0.4756756756756756}, {-0.4756756756756756, 
        0.654054054054054}}}, {
       2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
        1.4000000000000001`, 2.7}, {{0.3076923076923076, 
        0.46153846153846145`}, {0.46153846153846145`, 0.6923076923076924}}}, {
       2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
        0.8, -0.6000000000000001}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {-1.4, 1.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {
        2.1999999999999997`, 0.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {0, -1}, 0.25, 3.65, {0.4, 
        1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
        0.463013698630137}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 0.3999999999999999}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 3, {-1, -1}, 0.25, 4.82, {0.4, 1.2}, {-0.7, -0.7000000000000002}, {{
        0.25103734439834025`, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{0.9846153846153846,
         0.1230769230769231}, {0.1230769230769231, 0.015384615384615389`}}}, {
       2, 1, {-1, 1}, 0.25, 6.289999999999999, {0.4, 1.2}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       2, 3, {-1, 1}, 0.25, 7.379999999999998, {0.4, 1.2}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9878048780487806, -0.10975609756097565`}, {-0.10975609756097565`, 
        0.01219512195121952}}}, {
       2, 2, {1, 1}, 0.25, 8.409999999999998, {0.4, 1.2}, {2.4, 3.3}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {0.4, 1.2}, {-1.6, -0.9000000000000001}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 1, {1, 1}, 0.25, 8.809999999999999, {0.4, 1.2}, {2.9, 2.8}, {{
        0.7094211123723043, 0.4540295119182747}, {0.4540295119182747, 
        0.2905788876276958}}}, {
       2, 3, {0, 1}, 0.25, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
        0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570139`}}}, {
       2, 1, {-1, -1}, 0.25, 9.010000000000002, {0.4, 
        1.2}, {-1.1, -1.4000000000000001`}, {{0.24972253052164256`, 
        0.4328523862375138}, {0.4328523862375138, 0.7502774694783573}}}, {
       2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{0.6138686131386862,
         0.48686131386861314`}, {0.48686131386861314`, 
        0.3861313868613139}}}}, {{
       3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
        0.19999999999999998`, -0.39999999999999997`}, {-0.39999999999999997`, 
        0.7999999999999999}}}, {
       3, 2, {-1, 1}, 0.25, 1.2999999999999994`, {1.3, 1.4}, {
        2.1999999999999997`, 0.7}, {{
        0.6230769230769229, -0.48461538461538467`}, {-0.48461538461538467`, 
        0.3769230769230771}}}, {
       3, 2, {0, 1}, 0.25, 1.3599999999999997`, {1.3, 1.4}, {2.3, 2.}, {{
        0.7352941176470587, 0.4411764705882354}, {0.4411764705882354, 
        0.2647058823529413}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
        1.4000000000000001`, 2.7}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
        0.09999999999999987}, {{0.00588235294117648, 0.07647058823529418}, {
        0.07647058823529418, 0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 2.5}, {{
        0.34594594594594597`, -0.47567567567567565`}, {-0.47567567567567565`, 
        0.654054054054054}}}, {
       3, 1, {0, 1}, 0.25, 2.26, {1.3, 1.4}, {2.8, 1.5}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.3076923076923077, 
        0.46153846153846156`}, {0.46153846153846156`, 0.6923076923076923}}}, {
       3, 1, {-1, 1}, 0.25, 3.399999999999999, {1.3, 1.4}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.576470588235294, -0.4941176470588235}, {-0.4941176470588235, 
        0.423529411764706}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.3, 
        1.4}, {-0.4999999999999998, 1.9}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999984`, {1.3, 1.4}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9283667621776505, -0.25787965616045855`}, {-0.25787965616045855`, 
        0.07163323782234961}}}, {
       3, 3, {0, 1}, 0.25, 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
        0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.3, 1.4}, {-0.5999999999999999, 
        0.5999999999999999}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {0.8, -0.6000000000000001}, {{
        0.058823529411764705`, 0.23529411764705882`}, {0.23529411764705882`, 
        0.9411764705882353}}}, {
       3, 1, {1, 1}, 0.25, 4.52, {1.3, 1.4}, {2.9, 2.8}, {{0.5663716814159292,
         0.49557522123893805`}, {0.49557522123893805`, 
        0.43362831858407075`}}}, {
       3, 2, {1, 1}, 0.25, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
        0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       3, 1, {1, -1}, 0.25, 4.879999999999999, {1.3, 
        1.4}, {-0.8999999999999998, 1.2}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       3, 2, {1, -1}, 0.25, 7.380000000000001, {1.3, 1.4}, {-1.4, 1.7}, {{
        0.9878048780487805, -0.10975609756097562`}, {-0.10975609756097562`, 
        0.012195121951219514`}}}, {
       3, 1, {0, -1}, 0.25, 7.539999999999999, {1.3, 
        1.4}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7015915119363395, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{0.4756242568370986,
         0.49940546967895355`}, {0.49940546967895355`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.3, 1.4}, {-0.7, -0.7000000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 2, {0, -1}, 0.25, 8.84, {1.3, 1.4}, {-1.5, 0.3999999999999999}, {{
        0.8868778280542985, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570136`}}}, {
       3, 1, {-1, -1}, 0.25, 13.600000000000001`, {1.3, 
        1.4}, {-1.1, -1.4000000000000001`}, {{0.42352941176470593`, 
        0.4941176470588235}, {0.4941176470588235, 0.576470588235294}}}, {
       3, 2, {-1, -1}, 0.25, 13.700000000000001`, {1.3, 
        1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
        0.4868613138686131}, {0.4868613138686131, 
        0.38613138686131376`}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.6790602328891914, 9.230900003615161*^-19], {Complex[
      0.7248589832535917, 0.], Complex[
      0.650064949116095, -0.020858686170711016`], Complex[
      0.11988513411713456`, -0.0981715969681187], Complex[
      0.15160623794564831`, -0.028647866526790612`], 
      Complex[-0.002472802788942547, -0.01713913715451654], Complex[
      0.05556524411678816, 0.01890267003822048]}}, {
      Complex[0.5524636587025472, -7.594543271602355*^-18], {
      Complex[-0.38354558530686395`, 0.09744499810272776], Complex[
      0.1619813466218059, -0.23832737428749207`], Complex[0.6766558452199941, 
      0.], Complex[0.5279467930943094, 0.011722985858567875`], 
      Complex[-0.0019794387381373065`, 0.0612963317654061], Complex[
      0.14074635807044672`, 0.0077645969691057665`]}}, {
      Complex[0.5222542056555272, 7.39373223091693*^-18], {
      Complex[-0.5047764091042254, 0.08027140607893792], Complex[
      0.6076266586520926, 0.], 
      Complex[-0.41722429897453955`, -0.26584428115246467`], 
      Complex[-0.11870218623554862`, 0.011771602360776734`], Complex[
      0.10106066627579662`, 0.15510216234064736`], Complex[
      0.24672133224192438`, 0.12420825231706026`]}}, {
      Complex[0.47798270089481093`, 1.705186367657685*^-17], {Complex[
      0.11776747404882068`, -0.17021352942962187`], 
      Complex[-0.19349636076477256`, 0.18545691772731276`], 
      Complex[-0.005098087736675982, 0.0481703582836023], Complex[
      0.12443545522518613`, -0.04846883240430583], Complex[0.7520021001235273,
       0.], Complex[0.5450959458974042, 0.050065292585647264`]}}, {
      Complex[0.4208599945029234, 1.7181192359807767`*^-17], {Complex[
      0.046412084869462106`, -0.0633132278362492], 
      Complex[-0.15001494768060744`, 0.1368626263531111], 
      Complex[-0.49457449633790096`, -0.020339968952328036`], Complex[
      0.7465187765334863, 0.], 
      Complex[-0.3425167147633056, -0.05320301419822421], Complex[
      0.17190685158210708`, -0.02435844462026826]}}, {
      Complex[0.3371723422003491, 1.2680207595331082`*^-17], {Complex[
      0.08250671501222374, 0.03036710231625256], 
      Complex[-0.10759757386702096`, -0.00917692568070801], Complex[
      0.15992951319705684`, 0.020880420200147097`], 
      Complex[-0.32856173648033754`, 0.004931060374980048], 
      Complex[-0.5245849484304596, 0.028709761501831688`], Complex[
      0.7553839007471159, 0.]}}}, $CellContext`dynPlot$$ = Show[{
      Table[
       ListPlot[
        Part[$CellContext`points$5045, $CellContext`k][$CellContext`nu$5045 \
#], PlotRange -> {{-($CellContext`glConstWindowHalfWidth/
            2), $CellContext`glConstWindowHalfWidth}, \
{-($CellContext`glConstWindowHalfWidth/
            2), $CellContext`glConstWindowHalfWidth}}, 
        ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
        Directive[
          PointSize[
           Sqrt[
           Part[$CellContext`mScalarArray$5045, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
          $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$5045}], 
      Graphics[{$CellContext`lines$5045}]}]& , $CellContext`dynTab$$ = 
    1, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyEvXd01MX7/h1QkBKk9yJdqdIhENjQQpVOqEqo0hNakCZFBKkB6VU6SJMq
iIEldAk1nZDN7oYkSO8lJODj8+G+Ztnr/np++Ydz5syZnX7N9eI9c5fqF9Bp
YEYPDw/P3B4eH/37b6fiG3//a0+mk+1W3nydPizN6nXip1nxx5ItSK9/YMux
t4ueW6OzNghquiLJ4p7/nvUrr7E7dj24ZdI7/C/9pvXO+klPy59zpXvI36Ij
iQc3P1X5LYM3rK48cY6r/Lbvy7fU8m/48uQeVR9L9wv5h1uGp1B90iwXW4eV
3ZQ7xfIu6nXLbk08TLuKTvhkzrunSSYd7UoLqlJ7+KIkyn/PeueddcqkcFc6
2hX2POfyBqHJJh3tCj/VaszwMrc5v+VN4YYhG5+70tGu+U831mn7w22uj2WZ
X+96g+qq+ltKfOwYWfQL9MMLK9p1zpr/5d93kkw62nVlUt/T9X7i/Pescw92
7vvVlRSTjnY9GO1fZuvV2yYd7fJt+Hr41i23Ob+lzy8ta1Qd7ioH7aq/PuHA
5CrJXB/LqF3VrvRbnsT1t+R7fWB9u1+SLB3+l55s2nXw+5iwpr8km3S0a3Ol
jMPutU+h/Pes9mEe1U9VcKWjXVd6D/QamctVDtrV8NTugTUqJnF+y5Kx61f8
duWWSUe7fp4z/vX487e4Ppb0XXe9TpRQ9bf41ew2ZV2eZAt+D+0689upCWGf
pJh0tGvj8lc199Xg/Pesi1uPP5+pfJJJR7vmZ2/fsfSBWyYdf4+qrHiZa+kt
zm/h/GhXMJWPdv3f9UmzoP7SXgvahfYiHe2i/rGYdrn3pwXtov43v0/jhfwW
Gl8L2mVznw+oj4XmD+pvwXzr8n5+mnbllfmJdLRrtMxn9/z3rJj/SEe7/GW9
IB3t+krWF+W3PJL1iHS0a6GsX6qPJUzWO9Xfclb2B9lPfNAu7CdIR7to//FB
u4Ld9ysftIv2N5//2A+R30L7pw/a9bf7fov6WGh/Rv0t2M9l/zftwv6PdLSL
9MK0q667vph2kR6ZdpF+mXaR3pl2dXTXR9Mu0lPTLtZftOtO/zbNLuxxKl1u
8Lzk5A55nUqXO5XY8v2XxxxKlwO+LVY+eJ9D6XL273zPZAxX+S1Ncm4/693I
qXR5VrMF3xy7pepjyVOz8N0fSiQqXX5kb7R55zOn0mWfCjMD9n/rVLpcfM7S
avMncP571vN1ju//fZ9T6fI8/zd9h+dOVLq84kDWlj/0T1S6fOHql0O8pyQq
Xe5RfcfTb/olKl2uP3nID4eyJypdrnxjUNcxc51Kl6OfeqZe7eZUupyzx6Iz
3ayc/541JMfZHTXqJipdfvyy8/XsoxOVLnsdTdyUf5zKb4lpPOj+8UaJSpcP
vkyMWBin6mOZWanWtD91/S2dR+Vvnn+YU+ly7qgpa2NOOJUup+3YXn7dp4lK
l2tnu7pg8gfpaFeFtC3PHUudSpfHhOadUvuVQ+nyuPbBXeb87lC6XKLb37uH
7XQoXc5XpH3ewlcdSpcfxnRMi/7GqXS5XKfOaQ/vOJUuJ79YE9VhKee/Z/1x
UqUS5+MdSpd71m/XJXWOQ+nysVcjTtYer/JbOD/axeWjXf93fdIsqD/rMtrL
ukz9Y/SrlHt/Gv2i/je/T+Nl9IvG1+iXl/t8MPpF88foF+Yb63J7mZ+syz/I
fGZdPiTzn3U5VtYL67K3rC/WZaxH1mWrrF/W5Vyy3lmXsT+wLmM/YV2m/cfo
V1f3/croF+1vRr9oPzT6Rfun0a9z7vut0S/an41+YT9nXcb+z7pMemHaNdVd
X0y7SI9Mu0i/TLtI70y7Orvro2kX6alpF+sv2jVu629j2v3uULp8c2qZKjPr
OZQu55ywI329j13pctjsngVTBicoXd4wedpV+3Ob0uVJOXte/ypTgtLlAdl/
ST56L0Hp8vz2/vdX9LQrXa4UFDh6QQW70uV+JXcGFP5M6/KpoJIRDVY4lC5X
yVLkQrrFoXQ5cMzd73/+zKF0+VL5VSVXV1T5LY3rx7waV8+hdDn2lxzVP/J2
KF2OcmSePM6L65NmKV7yYNt93g6ly87snkfmVnIoXe6/bPj0wOqc/561Y8US
pybXdihdrtKnR5NDdR1Kl3s1mFshqarKb/EalGNlSjGH0uVfFiTWTy6h6mPZ
2dYeFthT1d9ysJDnwy/+UrpmLeYd9vmBsASly7su5Hyd3tqudLnUxbVpq2rZ
lS6PHNd292z/BKXLW3ds8qgaYVO67P+23sx6nyQoXc6SHDT1+kZVH8vPnrUb
D1/H9UmzJP50vGBMX4fS5cRPv51Qa7ld6XLnDZPXB2S0K12um3fXoi+f2ZQu
H6nn531gvE3p8s47GfK/6aLyWzg/2lWTyke7/u/6/NsuqT/rMtrLukz9Y/TL
070/Xb7Svf/N79N4Gf2i8TX6VdZ9Phj9ovlj9AvzjXX5kMxP1uUdMp9ZlzH/
WZcbyHphXe4t64t1ubKsR9blzrJ+WZcHyHpnXU6U/YF1GfsJ6zLtP0a/brjv
V0a/aH8z+kX7odEv2j+NflV232+NftH+bPQL+znrMvZ/1mXSC9Ouge76YtpF
emTaRfrl4gDuemfalctdH027SE9Nu1h/0a6YbwuHNluhdNDa/OsBp777Il7p
crOILYMr94hVurwy8P7QrLVilC7f779pQY+uMUqXVyUUK/B9rZtKl6dVXRBU
t5RN6XL38tOnBK6wKV3OMmXI3TuPbEqXX3008nLemTaly1WC8u664x+vdLlZ
sz+uTPo2Xuny7WI7h766F690udeVuiG+/jaly/6D8lzOusumdPntX2uKd45X
9bHMLnt0TPVLqv6WEpfLdC/e2aZ0uckdS7235WxKl/9ZPzCX5xrO/+95I+O4
b1sn25Quh1qnvxwQZlO6fKv7xfCbs1V+i8dvO4tc+cKmdNmzWe7hH62IV7rc
vXRY6tMG8UqXk9/l9m+/Ml7p8u9tEgPX59e6nFjc81CDczaly6O2nbANGah0
1tqp7atLvmvjlS6neDW60+N6rNLl4xvrjt3yOFrp8vcTh6Rk6xCjdLlGVOuy
pbvcULq87ceIVi9m25QuD3pccPeda0oHrf1LPz33Nile6XITa7/JK8NjlS6/
SFkyr681WulypyYLLWMPRStd5vxoF5ePdv3f9UmzoP6sy2gv6zL1j9Gvae79
afSL+t/8Po2X0S8aX6Nfo93ng9Evmj9GvzDfWJf/lvnJuuwn85l1OYfMf9bl
j2W9sC5jfbEuW2U9si7XlPXLuvzRL+/XO+tyC9kfFMeW/YR1mfYfo1+v3fcr
o1+0vxn9ov3Q6Bftn0a/mrjvt0a/aH82+oX9nHUZ+7/i2O56Ydo13V1fTLtI
j0y7SL9Mu0jvTLtIH027SE9Nu1h/0a42I8qd+uZRnNLlnOPL1Q7teUPpcq5x
D2fkOxqldHlOnotxxbdFKl3O8+1nnjOTVH6L37N89pq3o5UuW8ZveunTNEbp
8pzo3MsTlscoXb6w7mTPwlExSpd7d3gSs8rvptLl1S2z7Og2NVbp8usW348v
tjxa6fLv284PP70tWulytZobFwdkj1G63OZVv5xjf4pRurwsNP+nCTlilS5f
yfjNliYbuD5plm+79XvQue8Npcsbxi4OiLp5Q+lygWwJS+Zk4/z3rL1vXvmi
zMBYpcshHTd3+DgmRuly0XHb555sF6N0eeaiAsVGhkcrXe63+N3eKROilS5v
PuxzeEJktNLleTVOVTj5WOmatfixjamlY5UOWms+bvXsxW8xSpcDotpWvTks
Runy5dCm/dcUilG63C/4p1fT90crXbZGX8taY0Ck0uW+/WvPXBUcqXR5kb9v
7oIzuT5plk0LM8968uKG0uX1w4r/vKB3jNLloz9cXLv8TrTS5Z6VrVHFTiid
tY7b/rxueolLSn853fy/CZWD+v/fv5tmQT1Zf9Eu1l/qB6NT1G9Gp6ifze/T
uBidonE0OjXSfdyNTtE8MTqFecX6O1fmIevvJpm3rL/9ZZ6z/k6XdcH6W0TW
Eevvn7LuWH+xTll/C8m6Zv3dKPsA6y/2DdZf2meMTtG+ZHSK9jGjU7TvGZ2i
fdLo1Cv3fdXoFO3DRqewb7P+Yp9n/SVdMO1q7K4jpl2kO6ZdpFOmXaRrpl25
3XXQtIt007SLdRbtKh945KsGS6OU/mYodfTPYYOilP4e6Vl1V4o1Qumvn6Pm
wu1xfyn9XXiq1p4abS8o/c10NueNJpcuKv0dn5rpp2vRl5X+7gm8VWpQ0jWl
v+XqPL847ni40t+AO4HefuOilP6W6N4qtV3dKKW/p7KUOLq3WqTS39EHik8+
vzdC6e/5WtvG9f8tQulvmEdcgV4hEUp/E17Wz3I5OULp7+wVl9u0qBOp9LfZ
1+8qVdkRqfT3n/HVe/1+O1Lp74JFlzt2Gc7571kTrvWe4PVPhNLfgccG5F3w
e4TS36e+zXN+skTlt/i0Hn7W54cIpb/f7xy+qfayCKW/3f5ISNiq62/J/vHP
Q/f0iVL6G9qv8qKFiyOU/vodrVX2Scp1pb9LEhbtqLThqtLfI68Wl9q8K0zp
79MFw2o1fHZB6W+GHW22ll1wTulvu/JTa+37+YrS37wR13vcfhSp9DdzLo8z
vt9HKf0tsn1W/7BskUp/T/zp+yzk52tKf4My/9Ure93zSn+PFY5t2eLQEaW/
nI76B1I5qP///btpFtST9RftYv2lfjA61dW934xOUT+b36dxMTpF42h0Kth9
3I1O0TwxOoV5xfqbWeYh628Xmbesv9NlnrP+NpF1wfqLdcT621vWHeuvXdYp
6+9iWdesvxm+e78PsP5i31D+132fMTqV6L4vGZ2ifczoFO17RqdonzQ6ddx9
XzU6Rfuw0Sns26y/2OdZf0kXTLuC3HXEtIt0x7SLdMq0i3TNtCvEXQdNu0g3
TbugsztSL03N9TrjyWblTvaY8u6V9bvGG/8peTbJpFezzCn6fZknVv+ZbyfY
D7nS0d7BPoeiYpYkWdL+12+PzXzw/uWl//Jm+O5Rf++HctA/RYsVWZLX35Xe
4H/lJ1nvXCler2NbVzr6Le6v5s32n+b0MGtVv9Qtj2640tGf1Rsuz5tlXrKl
5f/qE+WqZ8HLm2ZHJFu+onWK7y13DGhV1rtwmrW59M/YibW2rWlovmO0NqDv
md3blWbdWfTC7Ad+rnLQbwMmtJjcydNVDn8XTe2yrKv+tP2YaE6/aaluG/Y8
hyXFlI/x6nV8Ucmeru88rV5cvuRH/3vdmBMw4JorP9LxPbb7uCdZCjZs2KP6
dVc65qH/rwHLZ61MofYmWStG7p90poX5LhS65ipf8mN842se7R14wZWfvwOn
+WkZbet1/ewrrudzS1BOr/Dwjq7y28g8sRfpGvbTBPP9qqR/UL7kx/zx9Cj1
OMsAV36k4/tzWkeWBikTR1S5qOaDZez2qL8S1v6rN9H/Wy/WJjKvfKasbXFi
SbKlm5vuu74zdx+vNOuotQutYx4m0Xi5vrdH+cZfR1QvmOe+q3z+Xh3ld5X5
tmHX6qWbL3F7D3mb9rqPl2VPfJNX31a7zeNlvsNHfWrI/Ix+Vm3i21hXfTrJ
fMB38siPeXg4Z8W/PpmcYvK3o/yoj5fMzyLxC+rmXOyaP61lfuL7Z+THvO3f
8uTYAd3V/DT5UZ+6Mp8HBVTbeTDdVR8p3+qg+mPeJtzutzdroCs/0q/K9+Go
T3WZz4Mnrhs36oBaj6r+hktP9/0haZDaT8y9BtSnj8z/5atnnbmX7ur/9+N7
KqSRfMeO/Jjnp6Z2ujPsNuf38EB+2ictF7r9VMJiT+J90tSH5rOl8Pd/ZT58
S81nc/+i9/t92+or62Xn3Nv/pA7Gue1MiDffU3CbP2lW6JH7/HGtL5SPdVHa
OfnqV6Gu8tU9CPf+tFzd96ZNtTaqP725P829mznPkkYWT+b5YFkq9wtQny9l
vfhkmFzDa6+rPvWoPshv9vObDdJvfe7Kj/SfcZ9C6lNH1suEfP75Iwq76tNS
5tsSuQeB/FgXKXl3dZ04MYn2K9c9FNQH62Vf55Ee9dckmfq0kfrg/gjym++X
avVs3rKvK7+6V+K+n1hmFOnS/0HVJOpPV31oP7Qc2ZVj5qKeSbwfmvsyqE9j
WS/JKVN6VXx4y9SnNdUH+bEuCrwutbeU3ZUf6eb+i/v+b+n/6HS5aZHcnx/c
03Gfz5bD+TN9+jI2ieezyY9zTlNZL+kDtsduK+0653wl8x/53edPmrWBnIvc
54/rfhDKx7poX+pJnSM7kkz5fL8G5WO9NL5epIX/fu6fY97oH5oPllwng54P
PnmL54O5N4T6QF8KL6pbIN8UV306YL7JfHA/B96z5h76yn7i5S06B7ryoz6N
ZL0Et75V9nKIqz5+VB/kN9+NSPnIz/ebUJ96sl4WSvmoT9v/qD/WRU7pH/f2
uu4roT5VZb2gf2g/sfB+gnXRTsaX9kOTH/XxlfWC8XWvv6s+yM/rBfmRjntV
tP9b0mQ+0/6v6o91seDJ/Em1Fqj5bO6Lwb9AXwbIeoR/aUj3qshHWFE++Qiz
vlA+1gX2H5TP97ZQfk9ZL0my/7j3zz5v9A/NBwv2T5oP5j4a6gN9mS77J+pT
l+rj7u/uWZNl/3f3d//qjpxPaD5bDv35eeOnD1z1wXkM9+CQH+uijugXzX+T
H/WxyHr5TvQL9ekp8w3nT+THukgV/UX+DpQf9cF5zCL6S/uDqj/WBc4PtB+a
+32oD85jj7q3mbHzD1d93o/v2ZC2ct5GfqyLM3Iec8/v4YH8tP9bcF6i/d/4
3C3vz2PG/waKv0j/j3ttyN9Y1gvOe8jfRuY/7vERH7BCv4gPmPuMKB/rAufb
dOJIS+U+IPWnJcflqhFzeqZwf3pzf2Jd4HxO88HyUPwg6lNT1ss/7YbMiPFM
MfXpLPN/odxDdO/Pe9YB4i/SiXchP+oDfYG/oPls6oP8WBfwR8jP9zFRHznv
WV+1HFfr+CtXfVpJfYKp/lgXu8XfpROXS5X7lagP9CVS/B3tJ+YeKO2HliPi
T2k/NPlRnwayXjaLP0V9fKU+uO+J/FgXucS/pxM/xD1Q2v8tFvHjtP+b+mx7
7+vNugDnQXoLWRfgALS+rIXE79D6MusF5WCeg2NQP1hyFJ45/fGBFO4HyyW5
x0rjaEkQrkLjaPLjd2UcrWOFq7i399/5LJwH5cs+bKkinAflY96GUX0wP72F
OyE/0vG+AX4X87awcCekYx7WEA5G69TSUzgYyu8o5eM+L+0zlv7C5WifMfd8
8buYh+uFyyEd86qG8EbaJy1jhB/SPmn2VZpXVvAipA+UcQfnpH6w3BQuinSM
Czgq0tHPxYW7Ir2K9Fsf4b00Dy3gvTTPLROIG4Mnn1gY/mJaQ6fiydPzP1r+
UT+n4sm7T/T0G+nrVDz5ef+zFzvPcyqejHtqzJPn76xWaExtp+LJRa/ev7ep
mlPx5Lf9s59568/pYdY2w0suOTLKqXhyx/xfZD692ql48polf7fpH+lUPBn3
BJknf9442+qZS5yKJ+MeLvPkpedu3wiZ61Q8ucCon9+MWutUPJnLAU++7x+b
2XFN9YPlx4BhK0JsTsWT750v3+CTo07Fk035xJMbl2685/kzp+LJuEfMPPnz
uQn9J1VLVDz58bHVOzzLJCqeXOZInx/bl01UPNmUTzz5eKXthUMaJyqejPuS
zJPrHPAfOcqH6/ncsq1baJ1i+RMVTz4duXf++aGJiieb8oknD64dNK7t8ETF
k3FvmnnyZ5lP/jIpUs0Hy8L4Tumf/tv/zJNzFZy9r+C/6cyTeR5iXmVf2PLQ
yT48Xq574syTM2VYO+5NilPxZNyTZZ6coVnWzBUmcHsPeZv2Ek++liWs4tuv
1XiZ++PMkzft/7LC3Q/qA56M+93Mk1Ozt14TUzpR8WTkZ57cqP+c9cmVEhVP
xr115smZlza/FVRCzU+Tn3nykmmLv2zmk6h4Mtcf8zbHhPR+QR8lKp6Me83M
k8d7bdtVSq9HVX/Mc3vElQz1wtR+Yu7jM0+uEV9z+4ZDTsWTx8r9a+bJ0d5p
weV+5/weHsjPPLn7jMtDV8xV+6SpD/Nkn3KNvjozUc1n824A8+RJyZ5eS391
Mk9w3a8nnvxM9Ih5MtYX8+TAq6XeBV13Mj9R5cO/bM1w/FDqatWf3mOoP7Eu
tl2YuGHzRKfiyUFyL555co5ph/cP+qA+9ag+zJNtTd5GbRznJH7ywTsDxJMn
td1+aelYp+LJn8n9febJd7YN9JnShPcr1/sJzJO7NRicNbKeqz5tqD7Mk0+t
nlB2RE4n80PXewjEkzs2Xrh8SRHuT1d9mCdf2hTa6m5ltR+adx6YJ99+u2/w
ipMOU5/WVB/mySviT66vfcRBvPSDdxuIJ/+R4XTDv8aq/d/1vgTx5I1bapZ8
OUDNZ5OfefLdlKC/l0xwKp6M/MyTcS5ynz+udy2YJ7+dPe75oepOxZO5P7Fe
Vm7+fq59OffPMW/0D/Pkv8+M7NJ4g4Png3nvgnnyD+WbNP7mM6fiyXiPgnly
5ztzBq467VA8uRTNZ/j9kJZrptVY7aqPH9WHeXJHKR/5+V0O5snHpXzmyVx/
c/9O+od58jjaT+D3p0v/0H5i4f3E/D+LjC/thyY/8+QVMr7Mk1Ef5snLZb0w
T8b+yTz5jsxn2v9V/bEusi7rlNZvi5rP5p0T5slHZT0yT8Z7IMyTs0n5zJOx
vpgnh8n+wzyZywdPTpH9h3ky+od5cqjsn8yTcd5gntxJ9k/myagP8+S7sv8z
T8a7KMyTW2369En9tk7Fk/F+C/Nku+gX82TkZ548WfSLeTLOn8yTob/Mk5Gf
eXJO0V/myVx/rAucH5gn47zNPDn2oz8mXV3mVDy5gZy3mSfHyHmMeTLyM0/G
eYl5Ms4/zJPhL5gn4z0W5sk47zFPxvszzJPXi34xT8Y7PMyTE+R8yzwZ79gw
Tz5w43SbtI8TFU/2pv7EuvCU8znzZPhB5snDq470WvDSqXgy3s9hnvyx+Avm
ycjPPHmp+AvmyagP8+R08UfMk/GOEPPk5V6zAxZ2SFQ8meuPdQF/xzwZ7wIx
T94q/o55Mt4vYp6cWfwp82TkZ56cUfwp82TUh3nyUPHvzJPxfhHzZPhx5smo
D/NkcB7myeAAzJMbit9hnoz1wjwZHIN58oD5IzM2bqr6wby/xDz5hHAV5snI
zzy5lnAV5sl3hfMwTy4nnId5MtcH87OpcCfmyXgninlyWeFOzJPBwZgng4Mx
T0b5zJMLCpdjnoz3qZgnPxAuxzy5k/BG5slfCD9knox9lXnyAuFFzJPBOZkn
vxMuyjwZHJV58gLhrsyTwXuZJ4P3Mk9mbgyeXOLaoCtXdjkUT/74zPqJPt4O
xZPbpZXycHzrUDz58a9PLvZfbFc8Ge+rME8+1Gykb1uHXfHkPG3PRwSMtSue
7HdkxdxMXTg9zHpy/85BGYvYFU8uNrBHlmzl7IonTy23qsOzanbFk/G+DfPk
Wz3nvW62w6F4Mt6PYp58P3H3k4N3HYon553lW9FvgEPxZC4HPHluVd+sjauo
frC8azzTUayBXfHkC+1Ob/m9nkPxZFM+8WRL4WJnQ+o7FE/G+1fMk59Ztw3t
tNeuePLccrbN9v12xZMd7WZumF3RoXiyKZ94crs7G/03V3Ionox3t5gnrz/f
8PP2d+yKJ6/JUnd0aIpd8eT0JhOqf+56/8fwZFM+8eS8+3OXs1Z2KJ6M976Y
J99qcatJ+gf1wbyq0etepvHX7Yonj6rZaVmrFXbFk4vTPMS8Kl2gV95OW3m8
XO+bMU/+Y8LYtw+j7Yon430n5slXju3Ltacmt/eQt2kv8eSGHZ622FtRjZd5
94x58tg39aceD7Mrnox3yZgn9wu+b/3rql3xZORnnvz4Vu9Vez6YP/AveG+K
eXJIgde1x1ZR89PkZ57c6MznPhnC7Yonc/0xb5NXTS30+lu74skB8h4X8+T6
R8b2qlJZrUdVf8xza4FnZZ61UvuJeUeOefK0gzubtCllVzx5m7wbxjx5b/DN
CpMKcX4PD+Rnnty/Tqv5i9qofdLUh3ny4LV91t2foeazee+OeXLdh2Vu5bqd
oHiyeYeNePIj0SPmydjnmSdPreXb5vfyduYnqnz4l/nHvlk5JbPqT2/uT6yL
u0kV4maUVPPB0lfec2OeXP+w5+WZRe3Mf0x9mCfvfljmXNKSBOInH7yPRzz5
eOyFbldH2BVPzirvzjFPLuOx/s3lAN6vXPmZJ3c+M2n9zQqu+rSh+jBPztut
4/Ni923MD13v+BFP/tK6el6PXdyfuv5YFxPveActyedQPBnv7zFP3hs4uUTg
Vld9WlN9mCd/0So8W76lNuKlH7w3SDz53NArT8p841A82byLSDw57FpSxmnL
HIonIz/z5Ow30lI+vWVXPBn5mSfjXOQ+f1zvMTJPHh0d++hBe7viydyfWC8/
jlnXtvBe7p9j3ugf5smea1r4j7Oq+WDeaWSevO9U6sKS4QmKJ+MdRebJpdJz
/TStdYLiyZ40n+H3HQtTbKGervnsR/VhnlxCykd+fk+SebJTymeezPXHusgu
/cM82Z/2E/j9PdI/tJ9YeD/Buhgj40v7ocnPPBnjyzwZ9WGe/LmsF+bJeMeS
ebKnzGfa/1X9sS4q/lRv53cFHDyfzfuczJPPynpknox3LJknV5DymSdjfTFP
/k72H+bJXD54MvYf5snoH+bJeWT/ZJ6M9z+ZJ1eR/ZN5MurDPLmc7P/Mk3E+
YZ48Ynpq0fJ+CYon491R5sm7RL+YJyM/8+RQ0S/myXhHlHky9Jd5MvIzT24g
+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
8on3DqsT2mLngQjFexFXl3nvuZo5lxUeGK54b5GZsb/7LQhXvHf5+B+bvf6g
/DZcPvFe2/FxTWpvjFC8F3FIFe9Nebyt1blwxXsPtZow6fq/v8u8d3tqeuCT
dxGK9/I8xLw6Uu16m1lVoxTvRfxi5r2jy2b4c1OFCMV7u0lcV+a99s058+7f
zu095G3aS7x3VrkyDy//osbLxDVm3nv/n2x5a5cIV7x3ucSfZd6bf0P4tu23
ryvei/zMe7d23dz7wo4IxXsRT5l5795rnbtOP67mp8nPvDd2afSYjqevK97L
9ce8LX2zQKcvz11TvPdPicPLvPejUsXHn0iOULyX6495HvCF37KgALWfmDjR
zHv3+1yOzl/omuK9ryReMPPe17OOR3bKzPk9PJCfee9X80b+OGSH2idNfZj3
bq/Wss2Dj9R8NvGsmff6BP8RWi5PuOK9VsRfJt7rL3rEvBfri3lvtmPHs8d4
X1e89wSVD//SMPemPvb0q4r3vqT+xLpoXiJPoYi/rijem1niODPvnbnsfP8h
1a8p3ov6MO+d/bTyjDX/1sudn9yzfoe41cR7Dz+MCmg76LrivR0l3jTz3sgS
fgm+AdcV70V+5r2Fpu5p1G3UX4r3jpf6MO9tl/GffrdOnVa89xTicRPv9Skf
nP7u9XXFeztR/bEuavt2X+t7KVLxXsTdZt477PKw4fsGnVK896TUh3nvf+S3
nKT6g/fuHRDQMSgv8/MP4p4T782SrVXBNyOjFO9Ffua9zoGbb07PEqF4bybJ
z7z3gZyLiL+ZeOvMewe3mF++U2i44r15qD8xz0fH3Sy7pWao4r1W6k/46zWr
xt0fUues4r2nJT/z3jvtZuXIH39V8V7ET2feO6BA2Qu2pIuK93ah+Yx53lfy
oz5IH03zGf46SepD69fEi2feu1zay7y3E9Uf62KE9CfzXg/aTzDPh8p40f5m
sdJ+An99S+YP7bcmP/PegTL/mfc+lv2Qee+iXqfzzjkTqXgv5hvz3j2yXpj3
Ir48816Uz7wX64V5by3ZH5j3cvngvf/RXm+0l3lvC9nfmPcelvMA895Gsr8x
7+0k9WHei/2Zee9UOT+o73vHfb/t8+NnFe+dL+cZ5r3fi74w710o+Zn3Ql+Y
9+J8yLy3kegj816L5Gfe+4PoI/PeYKo/5jn0nXmvn5yHmfc+LHKv76obVxTv
fSTnYea9z+W8xLwX+Zn3WuQ8w7wX5xPmvUfl/M+8N+BOoLffuCjFe9vKeYx5
b7Ov31WqoubPv+tC9IV5b2Y5j6nve+X8ybx39orLbVrUiVS8d2CpTzoMP8T9
c9b7MfUn1kUROT8z7+0pfo15b9HY+WO8WkQq3pv4sn6Wy8ncn/es++X8z7wX
+Zn3XpfzP/PeXlIf5r15xL8w77WJ/2Xe+/OGiJRZhyIU7+X6Y13AfzHvDfOI
K9ArJELx3nviv5j3BgsfUN/3in9k3rtI8jPvTRD/yLwX9WHeGy/+mnnv+Vrb
xvX/LULx3l/FLzPvXSz1Yd4LDsO89434dOa9W8WPMO/FemHeW1Q4A/PeA5P3
N7+9QfWDZfSB4pPP71XjaPlWuAfzXuRn3vuXcA/mvdeEwzDv/VU4DPNerg/m
5xXhQsx7j2cpcXRvtUjFe88KF2Le+6twKua94FTMe1E+895uws2Y95bo3iq1
Xd0oxXu3Czdj3ptPeCDzXo+G7/ke817sq8x7DwvPYd5rFQ7JvLejcEvmveOF
czLvPS5clHmvXXgs895g4bHMe8F1O/1vvWQyvDdLUt93OSskW/55315wPCvi
FSI/uOLijd2CxzdxpSP/V15jd+x6cMuk4xxb9P74r+7cuGXKb4V9QOInIj/S
76yf9LT8OVc5zWQcG1b6svPAeFf6+1E85L3oSOLBzU9d6d2l/9N3NXr8aSNX
PTtL/w/esLryxDmu9IbS/+08hi9eV9RVH/jHWv4NX57c40qH3/RdWqG6R44U
k47zcPcL+YdbhrvSsV8tnhN44XGjlH/3rfc8EPVcJ/EW30n/YFyyf1ekz+HQ
JJOO/n96LOjGmP2udB4vpKP/41Jvz7nZKtn8LtpbUOJOvvuPcTH1kf6/enP3
x11Gu/Kj/xFvFOlo16CRpwt+Mv+2Zaf8LvpttMTfRH6MC+KcIh31bDorIPXl
n650jMt8ieuKdJS/qOzUuj1siBurxwX5kb5M4u0iHePVo8r6iJO//dtvwqnQ
rg0Sp7WTcCqM18V1f8bn8ko26Riv3St65mlaKcWkY7zmShxbpGO8vPP2bJLa
7rbl7X/0D/JjvB5I/FxTHxmvwt0rtyx37LbwNMNnrA6J74z8GEdfiSOMdLS3
08gNV4dk+XccpR/Qz4Mnrhs36oCrvagn4k0jHeN4af2S0VGXXPkxjvUlvjbS
UX7UltknHzmTzO9iXBCXGfkxjqMkrjfSkf/09VG/x65GXOZkM16VooavWfEq
2aRjvELbZLgS7Z1i0tFvduk3pGO8/JJq1C60LtnS8T/6AfkxXohXbuoj4/Vj
zjntO6z7t73/+zsGnmBd3Hr8+UzlXfXHeCFOOtIxXoPXbH0XmH7LpKM+iFOP
dIxLnn+yXcgb5krHuPw8Z/zr8edd6RiX80WqFy767Jal/X/0P/IjPX3XXa8T
JVzp5vz2aMPNPSuTzPkP41KjjC264TrX/WGMy6rAI2977nbl5/5BOsbl00r9
PfPdv2XS0f/zs7fvWPqAKx39f7zYs82FN7vS0c+Pqqx4mWupKx39fELyt/6P
fkN+9D//Lvqf64lygqld6P+V1A/o543LX9XcV8PVb+jnmtKf0v8W9DP6H+no
53Myvkg3/ew+Hwynwvz5/kyZyk1SD3hze5Ef/U/z0IL+p3lr+Y95bkH/z5L1
0sSd+5m49siP+tC6s6D/sX6Rjv63ua93U/5J2R/a9Iqr373tX97c/8iP9M2V
Mg67195VDsYF+4/8f4cZl1OyXyEd4xIt+yHSMS7YP5GOcbks+y3S0f/+si+Z
35X+7yb7/Fv3c76Jn478GJevRC+QjnEpIbrj9x/9ifwYl0eiX0jHuDRy10Ef
1B86iPwoH3HhkY7xgv4iHeOCuOdIN/oiOi7/b+uDcfGWuOd+/9EPcn4w+XvK
+QHpGMef5XyC8pE+1v1cpPof6Rjf5u7nItU/pj4yvjiPvdepTKb8unK+3S71
QfmF3c+HPv9x3vPBuF9xPx/6YHzpPOmD8b0h51LUB/UfIudz1Af1X+9+TvbB
uP/tfu71wbg/kXNyt/8Yd+RHOuKhIx3zAedwOc+b8cV5HukYxxbuvkD1M9LR
z+3dfYfpB/Ipph/I15hxIR9kxsVbfNP7/z/S/Yb8GC/yX2a8iouPQzrK6eju
+0z/L3X3iaafo7M2CGq6wpWOfoYPZX+ap3Id//n+TuVPz0t8IvanvnP6vbWm
OJQ/7VRiy/dfHnOlo/8dTfw79TnsUP4U8ZjYnwZ8W6x88D5XOeb8EFD9RctQ
VzrGJft3vmcyhrvSMS7bT78881kWV/3R/01ybj/r3ciVjv5PqlDk57RFrnT0
/6xmC745dsuVjv6/1KBz2c8yuOqP/s9Ts/DdH0q40tH/07Lu9i2YNVH5U8RV
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
f9ps5cxl4T5xyp82i9gyuHKPWOVPH268cGf1uRjlT1PkvWj2pysD7w/NWitG
+dMmQ1tM3t/MlY5xedB/04IeXV3pGJemG+3X7zW7ofzpqoRiBb6vdVP50wWZ
u56Lq+iqj4kvU3VBUN1SLp9r4tFU/ORN596udPMdafnpUwJXuNLR//s6vqi5
57RN+VPEfWN/mue4T8j3T+OVP/X6OiWkxoB45U+byXixP12+b//aP36NV/4U
8d3Yn+Idb/anG18E5v2svE35U7yvzv70myJbm+340ab8KeK4sT/Fu+7sT78s
1G3c3tM25U/fyjv27E+bvPq1ZZNIm/KnGBf2p7MlvgD70/DXDwZuD7Ypf4q4
aexPS57ptGWmvysd47W8w4MGlU660jkuHvvTV/5pe7vF2pQ/Rf+wP0U8O/an
nTy3Ddjwq035U8TXYH+KuAnsT5/8cOxll+425U8Rv4z9KeLBsT+dlfr16b/t
8SYd44h4Z+xPa9R8WGPSkHjlTxF3jP0p4o6xP/1l0cPKpYbGK396qdb4PA8+
8HEYrwr9ki+EL7Mpf4p+Y3/aN7Vn11gPm/Kn/+x93w/sTxGfhf1p0dNFel37
PU75U8TPYn+KuDDsT68/OFb1H0eM8qeIy8P+tMTCDnu6lYxR/nSqxCFif3rj
854/FugUq/wp+p/9KeJtsT8dUSXnkewjbyp/OiDrj38862lT/jQ8cGepsJtx
yp8ivhLSzb2SzmkfvTXxvFz+FPGbzO9K/2/Otzj57h/Ryp+aeF7yh37eIvnZ
n5p4ZPKH/uffRf8Xo3qinKbULvR/JPUD+tnErZM/9PNA6U/2p8Ol/9mfYnzZ
n05znw/GB2H+sD9F3DT2pzQPjT8Kd5+35vx/232eGx9UXNYL+1PE8WF/2sl9
3Rkf1E/WL/vT0e7r3ZRfUfYH9qfof/aniAfE/hT7D/tT7FfsT7Efsj/NIfsn
+9M5st+yP/1Y9mf2p89ln2d/ingx7E+hF+xPO4rusD9Ff7I/Rbwb9qep7jpo
zu3QQfaniIPD/nSN6C/7U8R5YX9aTnSc/SnivLA/RT+wP8X5gf2pj5xP2J9+
4X4uUv3P/rSy+7lI9Q/706/lPMb+dLqcb9mfjnI/HxofROc944PofGj8Dp0n
jd9ZKudS9qer5XzO/nSS+znZ+KMm7ude44/qyjmZ/SnGnf0p4r+wP8U5nP0p
zvPsT8kXqH5mf0q+w/TDSnefYvqhibuvMeNy390HmXGBb2J/2sTd35nxIv9l
xgs+jv1pc3ffZ/rf190nmn72/XrAqe++cP0u+jlYfCj70yqjt6blLBen/Cne
e2R/mvNl1vihc1x+EPlzjXs4I99R1/1W9P+lpvFVC38Zpfwp3s9kfzonz8W4
4tsilT+9EjL2WYfmrvIxLnm+/cxzZpIrHeNSq8rqFzcHuspH//s9y2eveduV
jv5vc/jm0Pr5Xe1C/1vGb3rp09SVjv5PKt/zXM4RrnT0/5zo3MsTlrvS0f8V
6g95nXY4RvlTvIfJ/nTSpXTr67s3lD9t1fJ0zmNzY5Q/xXixP+32qvTTgPXR
yp8iXgz7U4wL+9Nnw2tNLXwjWvlTvAfL/rRR/hnXnrSKUf4U76OyP8U7tOxP
A3uHfFohLEb5U7y7y/60RqJXj1zdYpU/nSvjwv70iryHzP60aBVHyzCPG8qf
Ig4L+9Ne1iPTvxxzw6RjvP4Y7fdN9JFYk85xdtifzi/wR0jeErHKn6J/2J8i
Pg7702H9t45I/DlG+VPEQ2F/ijgy7E+vZuzTeUWuGOVPEQ+F/Sniy7A/fbZo
bvKLra50Ew9C3j9nf/rD5s8OpP07D9mfIo4J+1PEMWF/Wmjs9Edr+8Uqf/pF
1LggzzMxyp9e7xe26O8FMcqfot/Yn65vc6FlgyYxyp+iH9ifIr4M+9MVXwza
82lytPKniMfB/hRxTNif5jq42yNubpTyp1aJO8D+NFfxj84nT4hU/hRxOtif
pjqPt47NGq38Kfqf/eliiTfB/nT1+G1tPj4eq/zprldjCuYpE6P8adbYZn/c
iIhW/rQH4qfIH8Yly8n47y4PClf+0cQfkT/z3SnigKA+Mi6cjv7ndPQ/p6P/
x1M6+t9T6ol0c3+B2oX+Rz8k5Zxa83Lpc96o/wQqH/1v4uPIH/of/cy+dZWM
C/vW1zLu7Fv7us8T448wr9i3oh/Yt550n5/GN+V2n8/GF9D8N/5opawj9q2I
R8C+ldaj8UdY1+xbR7rvA6Z87BvsW9H/7FsR14B9K/Yl9q0FZB9j3zpD9kn2
rf1lX2Xf+lT2Yfat02W/Yt96RfZ/9q3QX/atiBfAvhV6xL4V/cm+Fe/2s28l
fTTneegj+1boLPvWY6LL7FvxXj371q9F39m3Iq4c+1b0A/vWInKuYN9aXc4t
7FvpvKT6n30rnZdU/7BvbSjnNPatjeXcy77V1/3caPwRnQONP6Jzo/FBdM40
PshPzqvsW3FuZ99K52fjm+g8bHwTzs/sWwvLuLNvXSPv2LNvnSznc/atX8g5
n31rsrtfUP3MvpX8iOoH9q3kd8y4kD8y43JZ/BT7VvJ9ZrzIl5nxuiz+jn1r
Hnc/aPo/t7t/NP2cc3y52qE9Xf2JfoY/Zd+69MKRmZ2nRCnfGirvVrFvjW84
pmaFJa505P+9Z9VdKdYI5VsDypX1Wud3TX/3K+90sW/1c9RcuD3uL+VbR3c8
VHxEXlc6xmXhqVp7arS9oHzrxaalT9ef78qP/s90NueNJpcuKt/ayD5335yO
l5Rv/S4100/Xoi8r3zp0RMrAK1evKt+6N/BWqUFJ15RvHRox7OWDa9eVb90i
73qxbz1X0ra6k1+U8q2B+w7GvjsYqXzrKRkv9q2rbcWL/PkoQvnWU/K+GftW
vJ/GvnXdM+d3+X+LUL4V79qxb/2riI+v/XCE8q1n5Z039q14T499a9SkuTnz
XY9QvjVB3g9k31qzxccVs30aqXwrxkX9v6q868i+ddCb5Ab1AyKVb8V78uxb
fWdO9cu0M9Kkm/t01ZYln6vtSud4AexbN571970VF6F8K/qHfSve+Wffusuj
a+6LWyKUb10q74iyb8V7+OxbV13ofrfMvAjlW/GuO/tWvIPKvrXPxPs1G8x3
pWMc8Q48+9Z7+7eefFAiUvlWvMfOvhXvsbNv3f/N0S0VPo5SvnX+gmpxlpBw
5VuvLWk0+Yeb15Rv/Vn6jX1r2WG5B97eeln5VvQD+9bf5V1c9q2Rp95VDGx/
UflWvCvOvvWpvMfLvjV19c371U6eV741o7yfzL61wrfJw+8GX1S+Fe+fs2/9
7GCWY78UC1e+Ff3PvhXvkLNvXfDk708L1o1SvnX4/kGVzrQLV771daNKG5tU
vaR861i8Ay9/GJftc4pMW/FTqPKt7fGOuvxhXI7hPXPUR8aF09H/nI7+53T0
fwilo/9/lXoiHfUcQ+0y3ED6gX1rKJWP/jdxBOTP/L+29DP71vkyLuxbS8i4
s2/t4j5PjD/CvGLfekLqyb6V5qfxTW/c57PxBTT/jT+KknXEvhXvKrNvPeK+
Ho0/wrpm37rIfR8w5V+VfYN9K/qffSveZ2bfin2Jfese2cfYt96VfZJ963TZ
V9m39pV9mH1rE9mv2Leulv2ffSve72XfCh1h37pd9Ih9K/ZV9q29RdfYt653
10dznoc+sm+1i86ybz0qusy+Fe/usm9tJfqufKu8u8u+Ff3AvhXnCvatteTc
wr71gvt5SfU/+9Zo9/OS6h/2rTinsW8dL+de9q1n3M+Nxh/ROdD4o7Xu50bj
g+icaXzQSjmvsm/NIud29q3b3M/Pxjcddz8PG980Us7P7Fsx7uxb8R4v+9bz
cj5n3zpEzvnsWwe7+wXTz0Hu/sL0c0N3P2L64WN3/+IaR3e/Y8aF/JEZF/gp
9q3H3X2fGa9u7r7MjNc48XfsW0Pc/aDpf7u7fzT9nKHU0T+HDXL1J/oZ/hT+
Bf1z50rxeh3bJpl09ENVv9Qtj24kWbbJuRHjMnZirW1rGrreB0b/4B2wf+i8
jffHcP7E71aM3D/pTIsU9Jt6xxV+AfWxF+ka9tOE25audG7He6fyvrHxHQ3k
fbb3+9tjU3+fKWtbnFjiSjfv6T2rNvFtbLJlq/wuxqVw/IK6ORenSLsem/oP
Cqi282B6CvYr9X5pe6rnfalnGuoj7Vq6etaZe+nmHTn1fub7cqJM/XfOvf1P
6uBkUx/z/2L73rSp1ibZ+BSMSyN5L9FPyjHfpci7iG+kHLT3u3z++SMKJ1t6
SH60d1/nkR711yRZhrbp9cm8CudD+P1M5Ee7klOm9Kr48JYp39zTeXS63LTI
JEs7OVegXekDtsduK50s+0mUaVfj60Va+O+/ZWl//0y7+2dOhKBdeIezq5SD
dhVeVLdAvilJpj5oV3DrW2Uvh+BdzUMh/C5lU8mP9VVEyvFFPaVdqE8bOnfh
Hcv3+9tj064B0t62dO7CO5atpHy0N0n6LV3KQbumF+nS/0HVJEt3yY92Hf7z
88ZPHyRZOtN5Eu9zZngfJ8icWybI+Lam8wPeY/Sjdi2Vdkm8IdMPT7q3mbHz
j2RLL6kPxhfzU9av6Qe804t2ob05LleNmNPTvA+s3lFEOegHj/ZDZsR4pphy
0A9Yj53p/IP3JGUfM/3wquW4WsdfpZj+Md9byj6A/OZ7UXnnuSPpHd4PlP3N
tMuz8Mzpjw+kmHJQzyqy770lHce7iMiP+vQ8vqhkz3/3k3TSZbzXt1vyo//H
yP4M3Ud/4j1A6D7qiX0e+fndP+RH/aEXwqOMHvWZ+XaC/RDeZdXv+6Eccx+8
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
K9BPeP4O+sn69KUh6gi98BOev/M/1mB5lA==
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlgmwTmUYx889lqN7vmMbQpbuzXZxLdnDtW+5lpuQfc1gSJbIlGEQiqJo
DKUUarSZokWyL9mXkZr2lEJikOxFv/88z8z3zPM///O8z3m/9322zKGPdx8b
BkFQIS0I8qGnR0FQCP0iumEcBN14WTgJgj7oOvD90I3ge6KLwhdDeoMfiM2+
K7gIXFlkOLgZXGOkGms343MwXBZ4I7gMNo/yvBVcD5sO4HS4gej7sOmPHuLf
3YtNXWxa8Hw7FQT/IU3A98Ot4F1pbN5FfxCZTVpiuCr85+g62h/8Da0DDwDf
jU1TxyXBo9F1sX9SfnmeiW7L+zbo1kgIl41MA+/H5250c+x3ovOwW43uyvuu
4DfAD4I7IK+Bu8B1B78Dfkjnh2zW/4OriowHt4DLRZaCK8Hl+Llt4ltjxIE/
BX8Ibgj+Btwdm/d57ol9HrIGfAL+kdj2NQJuALIefAb+LnAuuAHvx4OPggty
4RMcD4QfC94P7qO7A88DdwDngBfqf4Fbgj8D/4nPm34XOv8x8PvAt8D1sWsv
/4mdoe50HXxF+AI8f8262uB64O9SxucHHwPfC/6XmNwLztY5wB8Fz4mM3wfO
hC+KzwVwd+BuIwdThkvCL4G/DoYKZnkMNMLPdYiJPCvuT/E+ApQCFwvN/gay
B5sK2BeGfw7bych5+O3wl9Hp8H+kmQjP5P2EyL71TGR+5f90mq3lCIK56Fu+
N+1Rd/oYkp+XzfnWKHCmx0JjbCYp7uCfQteAr+2x1yY2/mlwdbht+K0eWEwq
X5RjpRPTei6VWN4qj4b4N7PBuyKLa91NvsRyTDaK+fbIHPj6ieG5ijnf50hw
hcT86D/cC66CjPMY1h3rrpXX5TzHVQfKgxd4/NTx/GqnWIot57IS25P2dhzd
GX4ZfOXE7qYoslOxxvN8cEedA3gDuAe4DLoMa8uiZ7D+Kmf8JfZX0CUCu1fF
VRHw87yvoBoALodu6vGZg26p/wRurvxH7gnsnHLcRud10+NK8XLJYyAFXyK0
bxUOTYTTtc5j+ziLVvHtLPAR8OLI/tePygV0Oexj9HzFJ/owfLnYYm8HOCO2
ON/v8S+bQ+BWXldVQ9P8fynHOiIZgeVhL+zbga9EFreKz/HgsvB/8bwtZfEa
emzP8nhWLCu2ZbMV4jp4D0ajOfv+qvnYRNSQdfoe+Bh6r84uMLvBsXFPqFeA
d4FHgnco9rDZjn4dnxmqJ/ivH1o9r6s6jFQJLG/L+v1moldHdi8foxsrHgOr
7xX9vlQvsv088xRDfg5V0WO9lip2m3pMKt4WIcXhK7HHiXC1Aut/05UH4Bno
KaHl2mT0VM8p5eckz1nl5CykCXh2aGu0VvlzJLKcauC1XXmU4Xmjb72MHur3
qNxVreMXTI0sThS389QrE/uGcueI58tOdK3E9qr6cIJzLA1eqroFrqR9x1bT
lBdbPK4KsHZKZHGlGjU7stwpqP8VWX/U/1WN6e53oR7f27G44V5PRqBfQeoF
1sOW+JksQn+ivAIvDq0Hqm++hz6TZr1MPa0b32oG/pVvve1nqJ7aC8kE90Av
d5/yfVL9Xu/Z+MOs/Uj7Am9Ct8bmi9D6lfxf5DvDFE+B1dkRvmfVsAOR8epx
axUTgfXUU5HtU73sXGT+BuH/58hs1PvW+/86EFqeKF/OonelrC6Ux+eh0PLu
IPqnyPZ23uub/Mhfv9je98f/hZTFaw24TrGdX1ufI7R2RWgzjOajEomd25vg
TqrViZ2R5o1aseXQt/j7BSmpO4st14rhZyH6t5TVzaqqKzx3CmxOOALXHnwY
PSA2PQ7fJz2uZP8qduXBp+GyYsO/p4xXPq5B34jMj2aMzbwrFFp+pfOcF9i8
UdznS82QG/ysNoZ2pzp/3YPOQbHTRnftc47mKM1db4E7wx2LLNc0/+icxXdL
rPaqjz+r2SFltV5z41VwTXDN2GZL1XslwVe+T83AKz1/Nc8pRhVjzbVfn3M0
IykOVccueD9V/VkZ2Zmot5xKWb/SXb+A3s3z3x4bLXy+Ui/TXK0Yv5yy+Uu1
9KXQ5kndb25ifUHz+TSf/RT/fRPrZ6oPyvdc75vtEpu9Nav/o29GVmuHJ/Z9
9Sb1RtVk3ZHuSvOY6uRa8LLI+kh1n1e3sHYYa7eicwKbXzWbqZddxH+12Grz
WXCEXafQ6vNAnxXVo895jN3xGVW9YFRi96B6onqf6/W5C/qS/g9Yf/pKymq6
7quX72eo8jFlfVexXTm2/vk93KDYYixm7SWvgcopzRKa95Yrr1O2T83Dq7z+
qw+0iq3GJ/jvC+4Cn7+Q9cr8ms0iyyfFeanQvqs+/wP+rim34cNCloOab6/5
+ajHnQH/D8aYdX4=
            "]], 
           Polygon[CompressedData["
1:eJwtmHm4llUVxd97GM6F73tlhgQEQZB5CBBQBnEAHFBUCFGQydS0gUEezcon
S03NTMtMyzE1SiWRcgRRBhlFVHAKJUcEFdMEBEW09XvW/mPfe9aZvnP22Xvt
vd8OM2ae9qNUFMX4mqKoq/8vVoviBcm9uSj+Krld8i31N9OkLeofWxbFnWof
rb4tGjte+C7hAayN+bdJXtXc12KvbhpvXXhP+vol78ncV4RflvxJ7T9LXlK7
vsYP0HjHSlG8KdxI+CDhv2XPrSfcsvCaTcJ1hJsI/074v8LthdsLPyC8Q3iM
cJvC91ki3EC4gfBlwvslX0ku1D3mSv6n8UM13qrweWZLpJpip/5slbwv2SbR
0YrLNfac5u8XbizcoeI9Nmr9cYX3flrjH2pc/4o5ws+r0V3jTYXvEX5fuG3c
52bhbcKthNsJ3yr8H+GWwi2EbxL+pOo7crf5ko/YX/IXte+WvKP225I71b4r
u90s9E3ffdm6QUfvxdoOah9YeA/O8EfJ1qrP9oGkY+j3DvVP1v0mSc7UXSdJ
+qh9mcZ7aHxZto00SbYB3neqxheHvXwkPE74fuHDhDcJHyv8e+HBwq8K1xWe
KYxR/kBylH5jhKSr+rtJ6khGqv9Y9pTMEX5R/0dr/Zda/4bkdcl49X8nZL7G
hxQeO0v4UfYV/lD4U3QquUD935ecI/kudqC+zySl2tXSZ+As56m9QuuHa/3W
7LlPCp9YeA1970nOLT2XPegvamVHtf6N1Zy/8G8P0J79JQ3VX5GcLLlX40do
fLPGd0qf44U7CC8Qbqvxc4UPEf6XcF/hK4S/Lbw2e82/JSfFXtO091RJRb9d
lWzWfhXNb6v585gr3EX4YOE+Fb/tGuGTCr/xCcK3Cg8VHiv8huY3FW4kfKPW
d0Rvwhewh9qDJNeofTVvrPY7mjMMW0dHpe/wILqt+m6Pqv0INln6vQ/S/0/k
L720ZiX+LDkG39fYGI31kPxE7b7qW62x4cIfaP52yUPJPoAdp9L20Qg96P+h
mv9Yts1yr7rSRb1a6wBugWPQzWzNf17tseprUGtuwLawMTjip8L1hffo99Zo
/i+zuWBb8MMt2bpBR29p/O/ZvjxY+JuY3xBb0dxnquYT+KGO+i7U2FP4d435
r502vjibl3eob1nVNjuCt0+25Wuy58KZK2Ic275Z+BiN7xIeKfw4/lLaNg7H
l5Nt5P7g9wHCX1btg4OEH072TXwW370dHyvt13AjHAnHX5HNbV/qfOur5qjm
ws2TuesF4f5wKZxY+g7cRc3iIo1dHefnzsur9h3s5elkH6qvNxhV+E14m33Z
vrcSfhDeHfd7TnhmaV/GXpYn+/QlwvVif3TLnuy9VPK90hwNV6+Dc4SnSOen
xHvDLR/H/fFxfJ3f5LdXSX5YmivhZjgazrwy+27ccWnYdyfhE4k5Glgi3K2w
v8Ar3Svm/nbCH1dtj/hmT+HdwtM05wm1F0lmxHvwvnAY3Iov4bvHJfsUOkAX
J6tvsvZ+LZtbb1PfKHwlmwsfFB4h3KniWERMJDbu1fge/Ed6ryP5Qn0DIx4R
f/cLD414QXxZJ+mu9o/V17O0Te+K+IitH1uxr/4MjtL4r8M/8J9VVQttfOoX
GlspXGpuM+E/ZNsEb8cbtq1YpzsiV2kjvCHiv45aXKv5s0rrgLufJRlSmovg
pKFqr8NYk9/o4IrjHfqvUd+zGrsuO5YT09cKr5Z8UWObxraZ802N35216BBd
LiCmqL1Kfb01dxacU9rH8DVyJnKnt7O5lDflbYlT85L5bYLap0d8fEAyUe2X
s2MlfYy9lZ1r3S18ivB24RPCHuCDFZE/5eQ4jM/he3A4XL4zO/bA8XA9sZJY
wxk4yyvCA4WvFx5WOp7hb/cJnyb8UHYsmsAblT4DZ4HfT8X2NN5P478hRgmP
rjg2EaMGl74jd8VH39XcJyRdiDXkKBp7PJurJ3J+fJUYIzwFm4MPJKMiXpH/
cF50hG7g/690/31Vn3Nhdn6JLtAJuSUxkvOcLdyqdPzqIHlW/esli+JMnGVa
zJmu/2uy13YSviWZ0zZkC3fmroz1l/QLniUWkxORG03VmpalYyL22BNO01hn
4esiPxlT8dpLkzmaPXoL9yrNo+TXrUvvxZ7Ls89+fsR/7rA28lFSjl+FvWLb
2Dy2vyb8DR9sX7G99lF7nMYPKJ3T4rv48N4a2/++GvM7mBjaWeNzIrYS8+Ey
OG2YFrYpfUbOtiLiOvnKefBlvDFvPSlZr8QM9uY38CtsCts6XdKitA/NTT4j
Z0UXl4T+0clerR8U8R3bWRD2eZj69oQt0KYPmxio9Vcl+9DG7HzyGOF/ZudT
5J+c85ns/AOdjE326VXRR25Cjsrcz7X/qck6QTdNS+uyT+QnT2VzPlxPLtkk
7t8lzttF+KbkmEvshfP7Juck8+JM5HrkvJyVHLhr+Bm2152cJJnj4XrGLk72
QeagQ3QJRw+p2CfQA3puHjI52ccWhv13Vfso9X1ddb1ADkPuAmnCAfg5cRpu
IM8iHgxL1iNzhifXGKytET487vuPbB1cFOdBN+iI+HBGsu6oZw5JrjmoPS7N
tmVsmloLG/46bAXbpqajtuuRXLuS/1Frsgd7wTlwz5X4VOkYhm7RMbFtYfDL
kOCOR0Lf2Cy2+1jwUa/kt14f/EbOC3fg93AdPtw59idWtkiuXcmXGwcXb4lY
gh/hX7trXGOST8FRcBUxj9jXW/j1yKfIL/aFLzJOLPqsxrGSmpfaDH19WnUO
QS5BfUedOD/yg87JtePc7FyTnJPa9KrIV+CHjVXndOR21ATUBjdkx1ZiLLU2
OQa5xvGSXdWw4cJvjC8+GfkN49QzcDbcDWfBC+QM5A4HJteqW6I+JV9GV/At
3DwjmX/JKcgt8Hl8/13NaZ0co4nV6Khhsk7QzcPx/tSHuXSdjC2OEK5Xujbg
97FZbPfFiKc/T+ZacmByYTgD7mAP9sL/akv7Abk898W28Vl8b3ayL68OPoWz
qFWoOeH2a4WPKO2zcBf3wZcXh79x33alawZ0gU6o3TdHfL48ObaQQ5FLESOI
Fb+NfAWdbK+ad4kN1OQDSnMCsYT5cMVL2bGHGERutCLwOcncvSnyDfIlarmt
8f2BbxJ8m6BOHZ185sXBb/gyHNO4dA5ELkSOQa5BPrYhOYf/PNseeZN6EcvJ
wZfG+MSKa5Ybk2scapmjY0/2opYh5yXXIefZIfxmdj5FfjOydI57R8RP7k49
vyw536CWhCPgCr7B8C1musaXJNcc1KqckbNwprNL1+jchTudWTonW5ica5Bz
sCc1ArUBv8X3kfXJNQnnnVI61+OMnJUag7qBupLagza1xOjCfdQs1C5jCufh
fNNgjDnnx++TG5KTjZO+zhC+QfhI4W3Z3xfYg7V7Q2foblKcjZyY3DjLqWtr
fWdyUnLR6eEPxFXyRr7t4eP4Mj49WOuuD76BD8i9yamxFWyGPIwzcBZqcmrz
I4Mf4Uy4kxqS2pQahlqGHJM9WEsuR42En8HD1E7U3NRi1GR8x2AMX4SjmQOn
w+34CLksNdKi0P+Eit+TGpGaYFbYHLbHNxe+veCT7MFafJXYdk/YAzGO73mc
gd/mWwo+QQ5B7oCvwHENw4/hvv8DGDOebA==
            "]], 
           Polygon[CompressedData["
1:eJw1lnmYT2UUx+9MTXdyfxcVCmOZMWPfxzpmIzL7ljEo0ijSokz2JaMYZafN
UlGoKDyhp+zMDNkJ7U/WNtUYJiZR6nOec/rj8zzf+z3nvfddzvu+Nzz/6ZwR
wY7jFEEINPYcpybG3VALTgUcJyjUcdKIFfO8Gypcx/kFNqIPQjKxmzzPg7kS
o01D/LfQP6F/hJ+hHl5T3t8V+qFz4H6403ecPnifoBPR3aEH/ECbBnj1Icza
RuI3gihYjJeKVwN9F9SEgXgxeOnwBvo1eB16E7vXVy3eQkghZw59nA2L4B68
89JX6TfcgP14/Wn3LX41dFWoAlG0vWDjbIb+Ff0bNPH0PWfQZ+Gc5ND+Mbx4
YuHoCPiXd6cyb9vwt8Lvrs7Bp+gtsBkGkfcwDIZ82IGXS04IOhHdXcYF0Xi9
8Jail8Aim5cWEIVuAo3hMn2JJ+8jmXdPxyhjPQHH4Qy8LzFyesIm9Mfwss3V
IeIHoTd6Jl4COa3QLdFZkA2VfCMV/210JrGz5J+DNLxVeN+jy+Ai5Mq6Q19Y
K/VAfj24HOQ4AZ592GPvW4F+B5ZDBjnJMBfdjVgsxIEHyXhJcB90sHmROklD
n+Kbp2E4XileP7y/eL7uat3XsPWVdT7NdzPIS4dM63sWOQPQ69Hr4EPrcwI8
g34FXpX5Jqe/p7XzJPopGOHrd/fKmKAE8myNItFlfO8ilEMyeUmQYvMo4y3G
L2NextDXGfCiq98dSXw0jJI19rXu30Qvk/0n84A3mtxRsFNqlHfU9bR/B4gv
gPlW47ssXkDuNJhu6/Ye8Xdhpc1Btqd1kkUsG3KgGYzHGwdjpDbJCeXcyKTG
j/J8BAbineQbt6Ibob9Afwnt0N3w4iAW/sHbD3/Tlwae7k/Zp+NgLOy2uQgj
NsT2RV/0VWKVMAh9DG8ksdvpQxVYiL8ALtG2KbEVNj4Z5yG8m7yvIe1uohOI
r8XfDFvgO7zWeG3As70/E/8lKCFWXfYI+hq6K7oLdIK2nq6TrNdxG3cE3p/o
jlKf0B5ae1qXUp8XXD0HZe9PQk+EfTYXRehbGEs6c7qPnM/gmtWv1PFtoTru
Al/nZRd6J2z//9wgnkHbwzwfggc8PWPlXF4qex9WQ3Xa5so4iG/neQf8QV4F
XAlorLOnZ11tdF2oY2fnKnJXwiZIkXMtoHMeIWsuZyW09PSOqGNtw+0MDdC/
bPq3gefjMBjvqK2XtDmG/hwipbbwTgR0TRfa/Dp4QRBi9TUBf7z0n1gl8zcV
XY2xFRB/Vs4nWSc5A4i3RbeTcdm6FZI7Bea7+q3tsmaejsnlHaFSW76uZbTU
BrF15K6HFr7uR9mXE6GHnAWyjtAT/bx8g5xeptuh20M0VPX1TpS7McP6t412
W6G+3SNxnup89BAYHqx3yx5ySuGkq2djPV/XMk/2B/SxdXuO+GQ4TN+D8Wah
Y/EfRQ+DoRAm96XkytzLOQ+tfT135+FdYj7Lg/QbS2i/GJrbWSb3THP8yehJ
MMHmIID3OPoJGAuJnn73EXRtYnWgrq/znIqXLue21dBeW8P6nu472X8bYYOc
a66+Q/os/xb9pbZhANyB9zVtv4JvbK1kv9Wyf4Vu6F1ypkCS3Wtd5D0Q4+vZ
FIN3nbY3ZB9CCbnF0IF4EbGj1l7ec8DVOWvj610h99p5vHI5e1w9X+Telvs7
Xva/p3doK6s/qcOr5CwndxmscfX7ciYO431DpQbs/sqzcTwk5wU8GKz/PtKv
QvRUmCF3AF5H66voTujOcMTWP9zT/zb5f5P7t4J5vgpXoDSg8zKLvDkwO1jv
fandF9DTYZrVs9TLFPtuoc2BI/868g/p67na3u6P1egPYE2w/m/8B6ucSUE=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtl3nQj1UUxx/vU3rydH8iSzGyJluUoZS2KaOhRmJskX3flyyvfffy2vfl
te8hVISkZaZ1WkfEVFSMpSjDJEn0+Trnjzvf7z333Pu7z7ln+5Xt2K9J36wo
iu7NF0UxWDETRXsgK9Mo6sa4wOKkEEWlkihqwXoxsCSjFbwaeH9iOpPRacq+
UcibCRlT4MdYm8A5zZkfCb6GvDX4EmM8vAV4EL2m8MB5h5xLlmF+FBzK3u/A
V5AfybK11ro368edX82ye54ER6PfOTU+BN6Y38hGpxHYFfk55OORd0jt/GHw
0omdr9+pAW8ve4AddX94Eec/sD4c/bacNQb5eHAc8hHwNujUZz4U/jS4ljEH
Pg7MYUyETwaro9cJ3pN9E5lPhY8F/+TsbvBL4ADmufBBYD/GJPhgsBd7XwXP
c4fDWWbnFcy7JWbPGZzZx/W174zb7RT4FDrF9Dbsvca8C/Ir4MPIBsBrgW0Y
g+EvgzXcbrVj+x591+Ngd37jIvumc0495gORPyPbxmaHzuA0/y59XyfnPcCe
she8O9jBbfgE2CU1m1fijif8bqfBX/x99ea70VsA3wWuYiyBvw++w1gI3wfm
MabDl4JrOHMlfG1ib90MXgg+hrGM9Qz+vgichXyJ/DExvghcor3I7kRnMN95
OcveawFjBjqj0Jmf2F3Ko/Omn7NTPo7+z+h3QrcvowCyFcgWMWJ4b2R5qd15
DmdsSO07qnHODnA+8u3ga4x58M3g8MS+axK42v1qr/wqsfXi7F3BOW/Ay8Br
ylfQeVDnuS/NBS9yh2xwZmpvrLduwhnDmFdjvifYHu19MrH4HQ5vCX+Ltcry
A2RzUvPlH5F9znhOb4msEL/9tueQ6an56jnWD3qOGI9sLKMh/AtkrzNKwgch
m5Ka73yE7DijnfwY2algPj0VfhW+Ab4Ufgk+Et4/sbhQbmkHvoe8DvLG8N+D
xxL68xkz4fm4YwF/+0V6h9Rskx/ZDfRzZffU4krxNZBzyjFawu8G16NTWL8r
e8MrwesjvyO2+NV73yZfh98OZsXmz4q5gonlN+WZhcHW5A8Zzz9lwL9Y6w6/
kWX7dU5BsDBrbeHlE+PKRdnB9K4zRsAfQ55BdzW8gcfai7HZ/HnwK9kstTj+
BD7a37cV+z4Llr/0jtJRXH4cbL/O6ZxYrtM5XyonM5r4m76gN4zsXZVntedr
36v5N/BGiem0TsxfdKbuWNpzy32x2UX2UR1QzlIOGMPe82BX5DXZO5jfK6sY
8DzfTnuRn3Ud6Sqf/AaODXaObKsc3wv5P8znBntT6YxzG8rmdRKL0X7wW8GK
zivEdq5qx0T0e6SWp2fAS7DWR/EClmP00DvGFiv63qrKn4nFlHxStbUDvAq8
kMda8dhyhvxE+a+H59hpnD8wtfUcvV2wmqfccpfn7aKKh2A+1wf5KMaz8E+R
HfIYmeXxrtq7H9nw1PL9gWCx/wB8d7B1xVF7t7POb5hYTnhIuTYY6rv0nv1S
87dVyLe5LRTLDRI7c6/ra/8++CPIU+WHYDrD1DOopvmbbg/mL6o7zZF/6z4m
n1kMzw+vlVgdVyyUhQ9JzXd2sP4B41H4CGTVFaOR5TXp6A13sr7LY1Z5rG5i
76X4rerfpfu293yi3KIcrjvnBatPqlO6w0TvbQ673WTf74PJ1dcchZ9m9Pbc
NVc5Dv5T8FjinGmp9Q2qm13Bycy7yBfQyUmtTp5wrvr5K/wMo7/nNNlT/lkP
POZ9iXJmK3BCZGet83wom+i9lEvWIFvm9pTPjHaf2ep5V/Vadbukx6ZitHZi
+U15Lzu1vuBDt7fqSN3YfFU9xibkmz1PDkgtL3VULHgMqu+YF6zfVB0fA15h
vj62GndBfhlbP7NU9Vq9BLhKeRm+SnkyWK8p3z7pdpYNE/L4QvhI+DzGcvVI
idUN1dxN4Fm3oeyf4+cvS6wub0VeImN9jnJLBeQVvK6pN1ieWp0vjSzXe4Nq
7sOK+9n6Dvhq9m5EXjRjNVv3X4t8P7wSshn6PXTyEqtNs5DHyJf5HUrCs/UN
qifwvon1dfqu1L9R9WsbOBP5FrCU5yLluJt74VPBmYn1FKXY9672RXaPDYnd
cx3nLE6tbwroLEhMZ01ifYW4ZLqbfucedGbHdh/V1OXee5RFXixj77jUa6vu
f0vG/i/ov0MJ/WZq/VqRjPWlnSLri6swPxDbfdSDqadSX6ZarH7ssvcv6oVG
gH+7n6ifqex7defrwXpQ1fGb9Vy9cWw9ifroP4L1geq1csHZqfXg14LlT/Wz
W4L1e3qXLM7eGDznev+jWP4vWFzrPurR9N9BtXh+sDPV+/8bzLbqOQtzzv+2
obBD
            "]], 
           Polygon[CompressedData["
1:eJw1mHf81lUVx788F/Obj/cBRVKcTIlRDkzTLJPEVY4IVEBA9o+9Ym9B9gaF
nzIEWWquHJm7vacz0xQUxVyVopZZfd58Tn+c13PPOfd7xxmfc+7Tov/orqMq
RVF0a1AUDfX79bIoLhbdlovidtETok6pKL4t3Tcl/0HIGHcVPaRxe+k7iE4R
bRXfSL/DNP/L0t8n/l7RNzS+RPSIxr2kv0bjfqKHs7+7VOPLQjZT3/ZOnvsd
0RkaT5VsZtVzOAtn4ts7RedoPFGyb0n3Q/FfED9F/JXie4p6iH4s+U9EvxSd
K/1s6QdI/l3xLcW3Sj7nLdl34OxfEW3T+CzpRmj+ueJ3it8hukDjC+NO46Vr
l3zXmaK9MuiVkh1X2oadpRsXtv1R9hk521Wi80SjpTtRc76Xfd5p4ruI/7n4
X4suTt7jktgPW/4qdJM0XiLdWs05tFYUv5DsQo0n49PSdx6YvCZr/5S7iZ8l
vr/4WeJf13kHiT9F/Grx/xQ/Unxn8b1F09lb3/xWusdEj4qmyBdTRZ2kP1W0
UbJNojtEx2vuqPi+i2iMxlmyDdLdKKoXfUnys0V3a9xGuklxXtY4RPyQwmtz
J+52vaim8TrpP6l4/a9Jf4P4htINjvOfKRqqcQO+kW6tqCDe9HOSdJvFH5Rs
8zPErxLfVPxY8ROq/v6LohWSr4yzshZrcmZkzYNn7lLx7+s8fcXX6fvl4pcR
g9KdXnr8XsX3QbZFfGN931/8WaXP+N+K92S9B8V3TLZZl7AfMUJsoLtO9Kbm
95N+iPabK/7tin3QKYi93q1Yd63oHY37SDa46hhvFfFIHF1ROldOkuwB6eZj
E/FbxDeVvX+THYvEzxx9v0D8UeIHiD9Hc8eK5mu8XrJGmt+u9Nk44xzNXSg6
Urrhkn1Vuj9mxxIx1ae0D/ElMXOPdN8XtY34vYi1xf9da/UQ37Z0DnF27nCX
dIPEXws2if9d9n26i36v8aWSLYozsDf5y5zLJB9Y+tsns8/EWfqKDtMdZkq/
UmvOFX+Q+KXil4kO1ri96HGN10t/A/4n/0QtJW8laqxxN+me05knZfuF2CRG
yZG2mvOwxpsl2yp7Hiv+NnJD/DLNPa5mGePlojmi2aLjJTsh9rif2C689/kR
72AYWMY3fLuBnBR9tuY92esW0Wmlc4GcWK/5WyS7GSI2wwYzwNJk28zkHOJX
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
            "]], 
           Polygon[CompressedData["
1:eJwtlnlUV0UYhm8gefXnJcU13HAPl/zHpdJSS620xSw1W9wVt8ByQxFUVhEV
wQAFQUBAc8Mtl8qyU6e9zmk9WamltptatrhlPe+Z74/nnPe+883cuTPzfXPb
TUoYGR/meV4mRMCqwPP+wJgR8rzV6DWwyfe8MtoOhHvei/A8z8W0V6Mv0X4Z
rkB4pOfl4hXQlkxMCmxCH8TrSFsn6Awd8TvASnvXdGJ+Q88jbhX6HPo8LEUP
xRsIg+A9e0ceei2s0VyIeQZuRK+nfQMUa954iXgX0L/rPTAXryVeW2gDO/Fu
ZR49YCu6Gd4AdC26A7o9xMC8kBtvEToJFsM/xLRjLnvRZbQV0K9Q40Ala1WO
fxRqaJsNYehrfOu/UETf7bANdsA9tCUTUwWvomMZt5pxanz3jv14+2APlBLT
CL8hLKTvMcabiJcEt9PeD+6AKtqqiClnLkd4fgU2E/MsRKGraa+BLRBN3M2Q
gb7AeF3Qk4k7ib4CVyE5cN8RTt8IqAOFePmB+yZ92yWYRcybeI/TPhamQmbI
rY3WqNJ339iV76rQ+WB+L/P8ElSE3Hu/ZZzTcAqWMFaifWck8TFaE9iIF9Cn
AdSHePpl2vzj0F2J6QZr8XIhT/tle5lle/0cegU6O3Cx6lOOjtQaak2YYwuI
hh14JcS3RbeBGNt77cdi+nzNe6PsXOt8V9g4CbRXojdDLP4t0Mt357UErxRd
yhrs5rlWZ9ry4hzjnYeLlotlilUuQsi+VzlYg94KW6AZc4qCEvRSxsmBVXCV
Phl46bBMuRNya6i1TKftLO+YhteC5+awDO8XvPboXPwl9LmI9yf8BU3wG8Mi
++5JxHyEHk7ccvRTtD0NnaETJNF2nbie6OU29tSQWwutifo+SN8HYJjmaOf5
NvRrtB2F1+GI8hWvJ/SGRcRMpP8EmOO7eX5OzMPoh+BJGIn3Gd4H8D58aPPU
O95GT0BPhDthCd47lo8p6LH0fwL+1rrjbcBL5TkNTuNNwpsMM2AFbV/gjUA/
AmO03njNiG0KC2g7w3e3RreCltBdY+PND9w6J9PnBM/Hw9x37AlcnVK96gQL
iFkIsehuyiHVY2IGMc5AGOG7NVPu90H31rpYvr8QuNxvjG4KTcyrtbyYT9sw
4ofDOvRKOy86N/8Frj42RDeC5pY7Wqsh6MFwt9WwA3g90PczzigYDTND7jtz
AldrVXNT8R4lbhQ8ZnuUrVqunNH5hh8DV9vrouuBbzmTozqGnqt5wE+BqwfK
i76MPRiG6DvwWuG1hstWm84Gbmy9Y77dN8p5395xk+VsHfJonc4Y42QrJ+Eb
nXc4Dlm05RH3JXq07fUx9FfKNfQ4vFRIg5OqkdYnX/VCOeG7XC3F2wjFsJ62
dNUO9GF51IVii1WfDN/ducrzG8CDMLtzdQ/qHdk6i6q5Nr9reJWq/cpNy33d
yYdUI3TOtaeRbs9z0Ku1JnCdfuN53zjfrZnu5lm+W/s56J+Vx/Cr7dtsvDPo
7+GHwO2vcu9j9CfwaeBqgmrDNN/Fa38T0PHKXd2feCHmcgp/FnomTLfcmkr7
FO2DvV97rj0q0LdrXaFQ/wF4EVDX9k9eUciN7ePVg/rQn7H6wVDVZMsj5bXy
u8h3/yxaF51n1RvVne6QyFjf4cWhp8EUyMKbTp84WG3/Hfo/UK5q7L3ofbBf
9yIxY3xXK3Ru0kLuP+de5QzcB+/aGRpv9UV15oT9v0Sj74IBsAvvEByEw5Z3
ml+J7keOxzbluNZP9cbusI205/Gcb94uvJ2wPdzdb28wTl90H+gFi/EC4hpA
pN0tOqe7ieuC7gwdrTZpnYtUJxVje/lW4P7d9A/XP9zV2BSrhVNC7n7QPfE/
OO1WcQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
TVPczsZexO8auBbf+R8lpBHw
            "]], 
           Polygon[CompressedData["
1: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
P0v+uyTXcBbORM75DHrLO4M=
            "]], 
           Polygon[CompressedData["
1:eJwtlndYV2UUx6/w8+mH127TXC0rRwMUULRMRMRsOtDcKy1zBVqZmuZIpdQ0
zVHmSNNEtoggCLIEFExjFJiCiTlSrEQMzbT8nN7zx+d5vvd7zvve95533VZj
w0PDPCzLioCG8KNtWW+7LGsiTIAEx7Ie8bKsh8EfvsMrxFsEC2ExPItXQLs9
bstKgi54xzwtKxN9GP814v2hH6wjVgRL0C3pry20g5V4IXhF5K9CfwEVUC59
wRZivxKLRy9H/2KbMcnYgqCWscfgR8MFYmXkfY0+jfYm7gP5eHlQoO8/SSwH
2qBn4M2EWfI95P5Bf5vxN8FTPK/BXw1rYTpeBe2a4j8ArWA13lFiP+tYzxD3
xfeD6XgP4j0Ej0MWsVO2abOLWCLslvdq3WKI5VG7fAihfR1jWUFuPFyyzTu+
RW+Fb7QuhyAIvYTYUlgGf9P+OnjQxzDJxdsOI9AjYRyU0i6XnBzwJ3aJ9x9G
N6CNBcXER5G3hVgVejH6E4iAA3hzoT3aR+oEubIO8FaiV0E4lOO56MsTytDj
dV0lay2P2aaOUs+f0JPwYojFQhzMB1+8PGJ/MbZ6mIfXB68vPK3vnY3XGv0E
PAbZug42ojfAeqi2zZp8FT0VpsGX5Jy1zdqulO+Ek1Ci375V6g3bHLM/ZPw7
0VEQDTWM5yJcc5s5+EzWHgxFD4FBsjZod4v4TWjsZb5xOTlXea6DFbr+C8n7
wTbztRFvE2zWsYzGewPG6HxI3nCdyxE6v//Q1w23meexeHfInlUtc70DHQkb
HLMfZV8O1vHlQyd0ZwiABVp7f7QfdJA5JyeV/vfCITjDevEmpyvv+ZMls52c
bZLLczr+PPRcmAPHaRtHm1hoT+wgbSPlvEHfRTwdfY7Yeeig8Wh0BuwXZJ2Q
N4nYZJgCA+WbybsB12EPOYPwXofBsgfUi4Ij6N/gAnQi9go0oj8bzuMlkjME
rx59DW5BMp4fXiE6njFkQTZMwGtCu/vhXsggLw280HdCY3jLMTXtqPtD9snH
eONkPuBNXddS01L6LIEUtCXzLGcBzxVw2m2++x3H1Ooe9N3gwD7bnBNyXhTD
VcY5QGqHLnCb77mJV44eqlq+aRh6OIyBf/H+g4b0l0osGK+S5yqohgTb1F/m
4Xlix/Fi8ZJkP2qt6vW9Uuej6BIoho5ytuFdRl+EGuir8yZzU0afp6AaJjqm
blK/+7SmAXilsg5sc0b9f1ah2xJ/EtrJ2idnl23WYk+ZK3KKFNHyjS7yTsi6
1fqOxBsFoyEMWuKdJV4LV3StNcVrDs209tK2AdoTPHSOqsithEtuc4/IWELg
lNatF/oFx9RK5qYfuj+EQgptkqGbnDfEDrjNGnLTzzPgDeMdczYEortDL70j
5bzvge4JwXrmSJ1r6acOrkAfvAxYKOsO5sv5Rk4m3n7IggXqdWa//k5pvpLz
UM5QntOIp8I++Ej3bzf8y+RFyRko+wbvZcfMq8zvOd1HJXjFMneOuYfl3E3X
fk6gm9NPC7iIjpU4sR48B+udKXdnoJeJnSb2IvSGl/SskHUvd8Vk9PdyZ3ma
8zRDv6kJbVtDG9hFXRPAV/fxTtvsYdnLwTpX8XKvwizazoYPIYVYhGP+bw7a
5i6VO1W8rnjPQReX+feR+2OHrBOY4jL/SHNk7tG9YYCMk5ypeOEwTddcpm3W
n/wbyD9CC/UCdU3E2WYfy37urutY9miQ1Msx/1LL8JbCpy7zT/Mo3/w5OhJq
mKsAnpPIe4/ndyHMZe5k+d6Z6klsr2P+S9ag18Fal/mnkXt6BvoDeN9l/n3k
X2AROptYDuSCzXsaQTMvE5P/g92MOxF8dB+nodfL+Ux8IITCEfq6DRqcino=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1l2eMVVUQx+/bfY/dy7vsoUrvva5AAAFpSlUEBKRIkQCyShcUCGCB0JEm
SAvRDyaG+AUhEBKEiCJEgkpEJQQTiRqKIL0sHX//zPjhZP5n7sw5c86ZdmuP
nTZwak4URTVSUZQLXRCiaH0mipomUVSHMRU8C14+uDK4LXguYya4LrxmjK7o
noqjaA78GfB3g+dCG8P/IjbdSszb8b0eeBb4XXBD8FLwcnAFxpV0FD3MRtF8
eB3R3QbdxHgGvBG6wW07zpql0K0OfwO4pfTh58lmcBr8Hvw60MrIVIOWZJQF
50MzjArgPOiDtMmkwFfB5cDXofcYAfwbtGzG+KWhp5jngX+FTmCPDPgONheB
T8NLs/8t5j/pLAXYjk5FZNpmzA7tpbvoxKidsjvNc3tKQR+jlwU/hOYwLwOO
oHfcnirgAkYpcAJtwZm7gX9n/1rMy4NrQLOMquAy0FaJ3eU2bPtI7wB/HfQg
OouhS+EHZFqBe4NbQmsi0w76GTIDoKPgN4fWg98aWugykj2GbTH4OHS4v/s+
8Gvo/gC9wz0MBT/hKF+mzXdaIvMOtCf8PfDOIzNH50mZf+yLTUZvXR/b5sH7
ABv2Mp+t9wU/lzEf6JqxdbX+buh05s1T5rt/+Hvp3V5k3hD8MrSPY/F2xbbv
Aegat20VdAt7bIWehj8Y3Bv8CbhRYj55VOeL7S7X8/1DxQf8ldCtrvs0so0T
W28NvBv4RoTMcPQ6uA+M1j0onsDdoV0Uf+Ae0Gb+jk0UM4zW4I+hL/kZ+0M3
su4Gj9kl0DYpe9c5sfnJsthsWA1vHbKX08a/CW0fLE6yfK/rNtTP2H5NZQvf
Y77VVByCE3BDcGdwI/fbBi4r3W2x6Qs3db7W6op8afexnv6OuqtDsdmueB8B
7c63FvJxnSW29ddDN8fmb9s99mVDp2A+qtjqBe7BGKb7SizPyE8W+r7y2T7B
7JNtT8Ern9gdD4RfVnEEHhCMr3cYBC4JrqZ4QW84874Z0x0DHqx4BjdhtEfm
R2ReDxYDsqEGY5zeCl5Hf1O9bTc/o85VKbH4GhkMyzdHB7szvftqZIa671Xg
+zC3oSK4XzAfKpNYHlQsyD938q63cbMd0OaJ5c5FweJIvq3YqgWeBH8m/J3M
p4Fngyd7XEzMWP4X/234UxkTFPPwjiHfBZmTsenK376BbsnYPWyWX/v6M4Ld
i/infV+t/ZZqBfOL2FgGXJiY3mbwWXgJ8pegfzsWr8h9+03FNbrPpyy+Lnj+
OQd9A/0FGYtl3b/iWvH9iueWodDDzDsrh0OXuHwDZI/EFrur4C3MWIwvgi4O
Fnv7+T7Pa5xq3wnmnVLGVy1bBn8l35cr7lNW2w66zC9eE5XHJijHJmb/GfjV
wCPhTw6GR4Engau7/0wBF7m/VUks/2ivFfA+j+29VHN154XgPbH5pOJ9bTA/
kD/0gF8vWP3L5fs1ctFBvp0rsPwvP1+LzH3453XvyL7K/Aj4OjIPsvZepYPF
nOraitj4equy8Mcwz4E/GfozvJKqTdDyiquM1WjVLeWfWci8EFs+HOF4L7L/
sFeHYPlIeSmdWN1uBG9abLaFYDlf55K/9/cYUywUZ61u5/gdjoXfF5xKrI4v
1J7gR8jUDCavep4LPgB95LEzJTa/Uk/ymHEDXqVgNUu1Zph8MFgtVL7qFZs9
smuHrzME3lFwvmIKvEBrqkbKtmB1/UnW+hfdZ8WM5Vjl1Gf5/oC7OIHMePRm
xtYbqLe5gs5d1u+rfOs9T+7/d6tcE2yvKqplseVJ5U/l0SJ/o9Gx3a3saRBM
T/pNHCv3Kgdnmf+lnog9cxLrlWp5n5NCZmRsfPUptYPdrfqXyP3nPnAA9F/O
8hX8q+id9XOpd5J/qHe6VGDvq55nvmKWcQ/dftDLfNvvut96rVdPIT/U2Zqx
16609R6Ks8vIFSPTJzY/l52jlKv4Vj9luT6TeH8UbM1DWp99SiTW67WAfz1r
/n8NfrH3iuoZ93tf8bX3OQ/YayD0sL+13vy294H30b2ZtV7odoHpSFf7jQ2W
mxTXKffJVLAYVD4rAM+OzfeK0T2Ttvv5M211Wb1eVWTGee3b7vemuL5SYH6r
On8X/J3fm85aMlhu1ZuOCNZPqKbI7u8Zt/yt5MMn02Z/LvuOje29FNfTYzuj
+r5HyOcFs+9u1u5NPqZ8oJ5Ha95AZqLnVuVb5f80MuOUq4Pdr2Lhfe9zlAcH
+d3K/yv7P8KjrNVl9STVvC6pto6BjtfaKYv5con1hm2C9bHy/02qdcFqiWrZ
kGC9oGrrp7H1t6rpJYL1jjqLYk156SL2F3oeU08lH1PveqHA3kj/AvonqBjs
X0J2jnHblN/zPY6UG/8DOfp7eA==
            "]], 
           Polygon[CompressedData["
1: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
vgWLdSt6DvAYPoifzIgzn58c09zF/wCJZn0G
            "]], 
           Polygon[CompressedData["
1:eJwtlnlQllUUh19QxNfvk09wBRcEDbUyUVsVcUlNQTBxSdxQQHFBUHDBRBu1
cMsFE1zGlplmqn9bzEmtbBmnzHDGMtMps819w1wRtec39/zxzHfu75577n3v
PefeLyG3OKso3PO8CoiA+ijPq2noeTcDnncf+wE8GQI6n4KBEBP0vCRYgT2T
vlkwG170PW8kXGPMQWJMwB4B6XAebQ/aFeLOxXc6Y/MhF9oTawo+k+Eififx
K8COQx9L/0swDgoY1xYtG3svPp/BELRnIR6tCX2VjNviOy0BrSN0AJ++SWhp
2OkwCtqgDUV7HLs79IZmaFWM3wpvwTDNj88Y7NGQD0eZ91/W2RrfEfRn0z8B
JsJoSEXrD0OgBT4tYbjNm2bx3iTOLmhlMcajzYFp2FNhErQLujkysEdCpvlp
X8bIT/6QC5O1//ZNU7Bz4B3ivw2x5q/9i8Lugd0TkmEwWhY+o+Am33SYb8vB
DuCXqDXofKCPjX1COYA9CJ638xiPloedr3OFYdDL9nK49hxWE7MC3vBdDM07
SjGwB8EAaI7/BcuTNPwmwiTYDJt8d1aKG8IvGvraPmu/M+m7Sm7tZ+yX8AVc
inJ+feifAjnaR/x2EGs7fOC7tSuHsuAF7KFam51bKloX7KZBlw9Vth6tq87q
5AZz3oFT2L/CCYhk3Dn6d2MP1RyQrVpAT4cMyLO8T8HuC/1sriDaFcYeYOy1
gKsJ1cYM+pfS/wj9e2nvg1t2Xv/hl0s7z3d7sA/tFzgOl/EZrjyGs7amywGX
k8rtMcQdC+PgNv3X6X+gb8K+G+X2oBt+XSHJ1rcIbSEshmK0xKBbj9Z1RGeM
toK+8JDbD+3Lz3CbuMn47qR/B32/43sKkrB9jcHeABuhBn6Ek77z34nPSliC
XQaLoDOxFtgaPsTvK/gaHtN5oU2ECbaWBmgR2JHQSPuIVgmbsTfBBuiGzzK0
cliu77M51mOv0R5gf0/8Q9AA7Q7fdBeO2bcVahx+r8Bkq99OUIq9EBbAUnxK
YS52IczWHYXPb8QcFMa+0N4OPdDuEvNv3TXwDwRs7Bz6E+jfzZhPfXefKp86
oH1E+2PojtYELQDREGF39krsV2EVVODTLORia46LcI85jzN+AGvZgk8lHKYd
j999+sMUg/YqCKKdRSvGLodlsATKYA20UB3h8z72e/AJlNge/ISdyhwVtF+D
A7T3KwZ2FaTQd9R35zuf9jwoslxLQKvTWrUetHC0Y/j2Z8zrtNfDQdprdW6w
zs6vC34n0Afit412te59tMigW2sP/JKhJ5zGbzB+5ei7oBc+bdAvqX5Uc1Yn
9+Eqdq3qFWLxyWRsBpyxOh6r+wt9o/JNv5ZrtwLuLbmH33TVuO/yRXtUplyH
l6E3NEeL0Z2q/MWno3Ja3x7hHm7tgc7oodYF9eChTSPmVCiEvyyHdG7nsc/B
GahjHQ/htu2p9ra97ntoCiE7Z/k9HXLvgd6FNtA46N6KTqop1Qs8h09X3We6
O6y2GwZdnSsflZeNTdO8t4gdR7utchifBay1FJZDQ6tV5bRy+3Pf/e9Q7sYz
vgB7FsxUflida0widifoHHL3ge6krdhVUB1ytaX9aKz1qVZC7h7/A+1POA2N
bI4Z9ibrbS5GewZSsPtBrO3BfLR5UGL1qZqutf9BtQF3BtPsHdB7cIO+7+i7
HnD3kHLi0aC782rsfTlE/w9wxP6PrbQ7aQ/938C3vrub1qGthdWW49FoF6yW
Y5Q74Ck3iBlmdazcKNLdAfX4XbHcVS20JE5raGX12xbioF3I/c/SfynlqnJW
NaE3Y7HvakFxWqK1gtYh9ybpbWpmayrB3gbVvvs/pv8s72L/D7P1QAI=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxFl3mwj1UYx98f/V7u6837iiRFyDKWweDad127i+vKvu9LrhZLYy2lmqZt
+tsSLVQk2kgxGKnRUJZUyhJRibJvqc93nmemP955vr/vec45zznn2X5VRxcV
TCsWBMG9mSAojhwWBcEL4OnImmkQ9AmDYGwcBEuyQdAZ/lhOEOQzNgi+AePL
nNf4ePT6w9eBn498Hj4P+SDfLHAh8gLz+4CXoj/O9eui/w6/832dt/kGgtcg
I8Yng0NkLb6HwSWQu11nJ7Ivv58G90MWx7ZdcJuTIDjHXj3hA7jG7DGU8Yns
2Skye/pGZofsWYGcENu56qV2Rq05XHPhVzK+nDULwA/BN4TvE5td5+C3MD4E
/susfbJhJfx9jFfmuwm+wJeC+zGvDPJR9Msib8CXRxbCV0IWZWzeEr+T85wj
xaamcEPRacq3lrGlzGsBPw9+OtxY5DjtB3e3r98isj2ExVUITV5jbjXGxsPX
jf4fuw7fl7US8CXwMHArcHnWnAx+Av0B6F/I2txLyMr8HgvuxfiP/B4uP0F+
wzcMvA/ZPrJzNUb+lrU3PZe1Mel8jzzINxi8H1kavUO6S2yoyN7tsGFEbLaV
Bv8N3xn8BzoHwF1is0G2XOX3XX6fr4NXo5MLPoEciU5JxpaDH8/YnZ0BDwX/
jvwpa+scQZaL7CzVtSa/x4AvZ+3MOvsNZFXmz9AdhuYburfzendsbus2j+Gb
j05v1hkF7gxfnfFq8seM+YfOJ50OyNHo9ELWQOcae0yF/xd50+/2etbW6YLO
/eiU5WvmvpF6vChuKoY2V++qd2yJLJfa3egt5GvlQjuL7jTX3ygP2QT9buDT
+N4hznOePSvC70vsHvNiix3FvnLAr+i9gXwtsbhVbL6PnMu6z4DnICcxZxSy
JTZMQi7K2Bn+ZE515QnGx3veWBxafCnWzzI+hr1ngPOYWwT/HDqT4dZ7/K7T
e4bmn7Pk7+i8Ap4d2fsrjnZkLZa7gk9i70z0Fmds3b9zLKbeZK9Jkdnbw/ea
De4KnhWbXYXgac53A49G/0XWeRhZL7T8UEe5Cp2XtT78Y+AndSb0cz0fKq4U
F3qXO+EbO6/xmei/Cp7LeGvNVy6K7Z3nKa6R3fnmZMyfFoV2J9rjIfQeQXZM
7Y7Ez0JOdb4TfEPPCfWRzeD7gW9yB0We/wch26I3hfEpjE9FPgs/TfP4Fuq8
2j8yO2fE5gN9wVeQS7jHrdxn69h8Sb6xAu6Ux+D2rMWF/Ly4fJh1jsK9576g
PN9VuZG1NsGvhT+eY3l4GTjLnCqM92eNAbHFX0m4epH5fBPkP+h1hB8ZWx7U
eYco/4cW+6uytqb85yKytt9nA+Sg2O6mFGv+kmN+Ln9P+N0IfnBsOtKNUqsH
evdWyMLI/Gok8hF0FqLTWn7iMT4ytFq5AFyAzmB/04GhzVWMNEW/RWxnX8M5
moM/Um1MrOYpvrZl7a31LuOZly+/AfcMrW7rLPKRYR4XI0LL4aoRzVl/gsfg
AmQx5j+Ysffa6Hn4M+QT/u46g/KX7B8cWZ9QpLyVWj3Q+lPly8zfzLwPsHO6
12XpdY0t3x+E/ws5Gv4sslpqviUfk46479CplVpdV+/R02uc1lfPoD6idmr5
RHeZC24Tm09tSgzrbj4FN/S6r1pfwfNhHfBJxoqFltu/dnv2ID9PrLdoG1sd
V02P0Wnj96W4uCc1v1KebJTa/aqvKMXvA8z5IrF8JL9SvyOsXPhWYrW7AP4a
/Mdwg9TbMG+DY3GXGfsAuVq1mPWfCi1+FafiV3m9U+3bCG4f2747ErNBZ6mA
3M7vvfDtYottxXhJnRf+MHxH1fbY3vnDxLDebj34DF+GffPh8r2fU4/R0u2/
qnyfWK+m2rrB4129VmWvazXBVTyHyGfKuo/J1/ajf9LriPKSckkHdCulFp+K
WfUA/VX72GtPYrW5U2znVY+wE66C11nlRvUDquGfwG9LrP/Q2bck9sZ601uJ
5Q3lB+Vw1YouqdVcxU0x8A+J9Tfd4LrHVvN/Tqzuqv7ewdwgtdqv/FPgb6Qc
WMb7NOWZ2HOFcsLFxHo+9X6Xvd9T33UbOjW89o31vNQlsryn3vUscmBs9aRE
av6hPPAua0xE7yV0HkWe5ncQeg/m9Vr250QWy3pr9cbygeusWdzfKIusBD8F
XDuynkb9gHpD8Vf4fcTzj3L7pRy7B+kd0x27L+ldksj6KPUJNTz/KKfKn3uA
zyC/dTvlVw/ElvP3wvWIrcf5zXtm9SG57kv6fTyxGt1dfVqO7S87jib2RrLz
MLhDbL3kV4nlz0L0b+WYLys/347c7bHfOzYfVL+knvRUYvfS221TD7susf8F
ys31uf+tHlOKo9Jes1ULtK/61V2M95SfgU+A/wNtL5jE
            "]], 
           Polygon[CompressedData["
1:eJwtmHm8V2Mex89PnZPf09E5qZAirdKK0r1tupW03ZZ7b+kq3fZFWqSNZB9m
htes/pYYUxONKCXDaDDGEs0whilLKpIlFCXVLZ+37/eP7+s8n+f7PN/zLN/1
aTl1QeX806IoqihEUV19D2ZR1CCJopnCLUMU9cmjqLdoYRpFN4ieFf/FOIqq
GS/+VaKxois1ZnBucy4QfZuZrHPUnqqx32rOh8I/FqOoUvh54T8JD5DM8cLv
Cr8p3Fcy5uj/v1DfBM19T31fxybjbOHTRVVqv66+fyBP1EzjzxWdk9haV+j7
+4KtmfWwl+80fqfGHtL/RwqvFX5EuJ7Gd9D4eerrqrHH1HemcCNRU+Sq7xrx
vtL4/4t3XNRc/bPU11q8SFSu9rPibxTv76Jtsa3vuczOiLN6VPjPwm+JPlJ7
gvqCeM1F09X+UH3/Fq+f1rNA8u9W3zXiXSF8vfBvhacKXyiao/anGv9OZmvu
Ikpy20t7ta8T/6D474pfKnyDcHvJqC/+Ke1/rK/38czulHNaonFLRV+KP0z8
9eL/RfxBua2Bf09zor0QuaLNGrM1tvt8Su0S/199/e9r4UKw/+0U/z/Cg9EV
UYlkTteYl9T3tnhjNKZW/35SeK/wHtF6tc/S2MnifSL8X+F5wvcK3625Vbnp
DLrznmi72r2D3WUn8VPXyWVq31EwXR0ufLPwL4WnCI8Rvkf4PuH5wg9JxiOx
2cM+redl4e3cjegVtU8Wba2s+dXMdJC75s5fUDuXjInivyX8Ymb3wX3l+sd3
mekwuvym+FtdP8bxr9hsCx1D1w6IdmRmM9gO97lL7cNFWxtrXCXcXfPnFkz/
T/p5TRF+Rfy/ZaaDr6r9Wmy62dDX973wx+i6cI3w++xBuI904SrhF4QfEG4i
/qSC3Ql3g86iu9z5Zr/vhcJt9P8DwrHw1cIbxV8j/LnWO1R4tfBK4RGp6ftJ
4f3CB8QfLrxJ+K/CT7t97BI9o3Y7yZstfh3J/0z4SfU/IVrHeNGj6tus79Oi
x9RuG8w2sdETwhe5PWDT2PYn+t9g4Yc1/sHM7hydQpfQhTZ+HifE/9TPhzPj
rI6p7wc//y1qb1Bf4vtFR9CVZtiI8FHhvcKVuekqOnudeKmfH3tkr+9ndhfc
CbozWuNHiRbpnBaLvuEfiekQtn/C/c95ohai77We0eJt4EzE2y2qjW39x3wP
tOnbx/4zO3vuoLn7H9a813lH3T9zXw9nZiOTRcNys50hat8sflv9u65whegu
tf+ovuXi7dGc1sKtROeLyrWH4aLP1f+F+yvssyDeV8Kf6X9DXJ+xPfZ+h3h/
KNgZdNP4Bfh+9R11/cKfvoHPcXtC3/fHFiuG+vpGa3w7yarhHIVLiQ/CpaJJ
7g/miNcT/yZ8p3B1MP6MxHwTPor4QhzoKV6vYGv4QXRpsLVtYV+xxYgzghF3
zN3C20RMiC3GFYP5d+Lbb4QnBrPRl2LzcdguOr/L72dwajaGDOZie93Yk+bf
KP4Vwj2EJwjfIzzG4/Xtwr8SniHcVbjK48lI4f7EcuHbhauEB9Anaq/+i0SX
iMY5n7g+nLsXdVZ/F9GlPmasx376qjX+loKNvVx4nvBt3EEw/cHXTlNfr9zW
ND1YnGatk4KtnT10ym1N/Js1dBQeKRqRm41iq/igJ0SNg/kmYg6xB53tlVp8
uUntgdiI5q3EzkWjyAGKZvPYPjazp2g+Dl83ghxFeLdokNqP4f9El0nGZMm6
VX0jguUM61weuQT+Z4vHi9LUbAbbwed1F64X7O6fcf9EDvBybD4f308fvgs/
wlhyCGIzMZPYucrjETbSLbWYDZ+c47j+39T9DfHvn5npH7q4zf09Z7U7Np/G
mf1L+B3XR/73nMcvcqo6wWIWcSwL5o+QQexIXbeJycRmYkSjYD57k8fvnqnN
3eb2gIznPX7iI7FdYh6xaYrnc7UeT5GxNjP/d6fO+9fqmxVMHypFZbnpLjaK
rT6k8efn5vPwfRs9BrRQX5nmL9GYvhp7JvoqvKJgesx5cxdbPHacyix/xEf0
ET/KrY8284k/bd3v4s9a5qbL6DR6vNb3Tww7or2cJn65+EuF+wWjy0WF3HgX
4kc9vyW/a5WbTGRhG41yW/Mwtz18WKWvH9/WVLin21u58Lm59dFGP89W+yzR
wGD+4VjR7pZ8bjWxQ7y+7j/IwxjbW3hZweYQsznLDR5nW5NDiX9XwfJxbBrb
HqW+tuI1wY4T89FlwWyOfyAbW8R2l3v8w4Y7BIvJxGLy9Vp91+g/14vfA3+k
8fPdf81LzT/UBMtByUWJochC5tDcdARdWSw80McscX84yePWUuHfCc8OFsPo
o32tqA1rTSxmENuG5CYLmQtSkz8zWFxCN6s8nt8v/tLUcgb6aC9LLWde7/ZU
klqNg3/a6jkYMZ24diN+CpvS3M6uL/hhYupQ4eW+njrovfufaZrXILc5/d13
k9N3EX9RwXL9INzV94O+FIVPz00H0UV8/Bi/b+Z3yO0uudOZqdUQ1BLj1K5O
zWfi69a5PiCro9sXMlf7fqkZDhbNJrHNVbHF0DWes1W7/XcMVo81Fu9IZrXi
DOE0sZqRPnhNEouznV3/iWHEsoaiixOzaeyEuDUysT2wF2Qg6wzRoczOhLNp
SK6UWU1AbcCZc47UTp1Fse+bM+FsuiV21tggtlaSmG3iE9h7y8R8BWeMbbIe
zh4bxBa75xY7Sjxek3OQW/ycgyRmw9htM7cfbLK5z+eu+yVm2+gAujA7MV3F
prFdxmPrxGBymYmJxeZBwWwRmcjGxxD7KxLzPRczJ7H4ShwnBhB7yF2JDVe6
/BrPf8p9/+MT2xNEm3j9c+4RzJfh0/AV6Bi6zPmiewX3x+hwHc8biO+LEnsz
gGhjc9jeeN//VOELsOXUbA2bq3Q95vyRiWxyAmq3WxPLFeb6edxE7pkb0cZf
4IsmpKYP6BC6NNnzD3zEMD8v9kOORq5W5vkMPmmA7xdfOCuxtwpqLmovYghx
Y5n7I3LiCs8/yDeoOfbKPq4OlvvN8fmV7k/5R5nHAWILbxjkSPgUfMsK7iFY
DXCt+O0Sqw3wYfiyRaLFwWo4ajnq7dfUrnB95s65+0Nuzw96ftPf7wsbwpZW
ev5CPtUjtTiEfmOD2GKN6xNvEvhk7oi7muaxkbx4PrmPcOPcfDq+nZqA2uBj
r3cOi47HVq/wbRXsPYUcm1jMeZJ7v+32jI9oId6XXkdgs1083mEL6DuxiBqU
tw7eIKhNeVPZ7nUZtQ5vCPs9/yDf3uf1EjUjcf514R1ej1H34UPwJdQslant
gbrrsmB7w0fhq9gze8dn4jvxk+g/byD1EquRWQ81FrUWNRG1UZbbWTH/kmBE
G5mHNS53f8GZcDa8IVDLUtPytoBPq+/7LfUcgtg5N7HcAn1gT+yFWpYaep/X
yeQ2nA25IzkkZ/SGcN3Ean7ya97Mdrif5i2NNxDeQnjDqB/sjemb2OrT9n6H
nGWt3y1vFrxdsN7zPJayPmo8YiqyeevgfvkH+Sxvhrx7fJRZvsD7xo8a84H3
HfH1MhYd3+n5coNgOoIsZP4vszeyYmI2g+1Qh56KTWanYLpEXyePA9Sk6Bi6
Ra36E4JOfZ0=
            "]], 
           Polygon[CompressedData["
1:eJwtlmlUVlUUhi8YJh9XLormkDiFmuSUDAqooQyKIijOOCCaaIpihppZ2eDq
V6tp9bfRLGtpow3aZKZm5YCkpuXQIIKIM2JmSs+7zv7xLN77nn3Od/a5Z+9L
tznlhUvCPc9bCxGwNOR5z4Xxt7nnlcNMnqfBfPQaeJaxcp7fDjzvfSak+J53
PdLz/oVl+M8zvoK45TCX51CM592LHgD9YBrxRTAQ7TPWEqIVQ+wASA+5sQCv
Av0C6z3K82p4gOe+0AeSoCteBHHFrDcM3R7dATpCFNyN1xv62+8Ox8uAEbAM
rwxvkUB3xesG3WEp3uN42ZAFqXgz8FLQrdCtIRZy4RG8VbASlhCTxr5SYbrF
xxCziOeFsBLW4hXirUC/SG5P8vwELCP+fhiPnqAY6ElcDyhA50MezCEmi7mZ
MB5m4CXaGdyHHg4Z0AXvLhiDHg05UELMed7TOdjE+9vK+7uBXu67fY1XPqy5
Gh6Dl9lfKf4zyo+YSMb7ovtAAky18ytT7rAYhhGTBnO1V5it90ZMb70PSIBJ
ePPw+mk96A/T8ObjtdV83Tv0Heh2kKg7AW1sLAO9wHe5D9DdgYHQB6bjFWlv
tl4T+d2C3eR7hHyjmTsbfwTjdxLfCeJgF+M74Qc4RFwGMReZdwE85mzDe4Wx
Op7PwKt2/y+ha6EG3sBbj5ekdwEH0L9AFXzP2A5bO4r12kOHkKsb1c86xnYz
1gzvY/QX6C3wNaSz1pd4p9E1WguG4l1lXgNsZOwzvMF476I3oweh/2PsJtTD
WdhgY43KC92TM+gFt8M44i/hXYTLEOg+4GXCceachBNwgLEhvjuPT9Bh7Dcc
rtqcQt/Vseq5AB2OV629Qw1M1HvFa0Rfg38C926q7KyOwnBi/tYY+jo0wRi8
qaw5Bcp0P60udddK0BP1XqEEkvGSIMXGdP9Uv4M0BwZbXaYoFrJD7j7ctP21
Q8dBJ7gRuH6ViE6GJOtNQ5kzBGZZ71G9xcMC/R6MtHpT/Y5VL0QXED/O7nGS
rZdud70z3jz0Qt/lqFy7QGcYi+cxVsVeRhKXA6PgYes5mdbPFqNL1avhHquz
UrxCnieEXH2ozvK1byi2OpqJVwyzrJfk2trlvutbi2y9KXiTddZWv+qTeg95
yhHyY1x+yrMo5Pqq+oH2V4F+CB60vruK8ZfoL0/z/BRU4P1oNar3/xP6Z6iE
3/B+hz8hi7FDeGfRI313PjqnYei9ePthH3wTuBqsRG9DfwfbVbPW91J91xfU
HzbjfWV19qlqSfUHn8MW+60c+91z6HqoM2+regZ6F2y3upwArcgpFlrDlcDV
R1t0G4i22jqPF4UOQXOrwQ/w/rA8P0R/BIfhEt5FOA+jfFfXqu8WIZej+otq
9Rh6L3of7A9cDTbTdxJugz2qK+Zdi3R9RnmnEZMPYYy31HfZ7lqItSNVG7au
aj8bXY0+A7WqWetrv6IPw0HrneoJ6g2Vlk8suq3uPsSHXF/QXib57jt+C90E
nr5bjHfXnQu5XqEanExcPHoU5CoX4qrJ4RS8xvg6fiORmDetB5+2HJVrsvoi
3g7YCesD945i7Oz1DhqUQ+ByUm4X7Jz1TR5n31B9S3vxu8fUuxiPY3+9IQFy
ibuCdxUadF+JCSc2DJpZD9C3W+d3ivEWPEfCQeJimB9AR7hsc/Ub6n3qgY0w
2ndn0MP+p9H/NucC9y3LRG8g5p0I18NOwHE4afvUXJ3Be+hNsBHeCtye9XtH
0EdVZ/C6neVf9m3RN6YW7xZeHvF1qofA3Rf1pFp7rg9cDe6xWlBNfIv3P95I
TZ8=
            "]], 
           Polygon[{{4102, 4101, 3157, 1569, 1579, 3159}}]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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

            "]], 
           Polygon[CompressedData["
1:eJxFmHlwltUVxt8X4X3hfl/1YtVWnXbGOm2nddppp2Onm522U6e1U9vRaV3r
giK1bthdq4JUWxEV2XdCSAgkBAiBBAIECIEIgbAHAoQdZJGiIAIVivT5eU6n
f5z57nPP/e57l3Oec8697qG+tz/VJUmS29Ik6arfHSFJWtQu5EnSEJNksXC9
8JksSSqFP5CckswrJsl8yWm1f6Wx7Rrzb43dIlmu9nmNnyFdVkiSbpIo6Vmw
OZjrrGS62rM0fqbG7xYeI/yO8FHJv9Q+Lsl7Jsnjmn+fxjToe8fU91PhVcL7
NO6s8N3CW4Q/FB4pvENzdUpGq71MfbOkOyQ8MdqaWfvlWssnC/aNn+n/61L7
9gDJaLVf1/g7pTsofEDyntq/0LiRapdJP0T6e9Q3VHMNkUxWu0wyRLJVug7J
ULWXaPw8jd8lPEy4q/bzsObpLemmdg+tYWNqfeguaPxW4QeFuwiXCVcJT9T/
H9D/Dwm3CV8rfbPwAsmX1b5Bsoh74RvMLZmv9jOSOv23XvKs2u/r/xv0//uk
/0j4iPBa4euE1wjvFH5L+FPCy6KNYez9kkTrmSx9pfQjNN990s30+1sk/Dfh
gZmdHWf4onSt6rsmt/WuVnuY+iZLN1hj7oq2J/Y2QTJOcnc0HWNe0tjx3j+K
OSX3Sl+p3yrJXMkejVmpsZ/R/G9Jt0JyVW7rb1F7tPTl0o/V2PvddvtItzc1
Oxgi/aTU5uc7D0Yby3+el3699EvU/qz+0yZd72hrZc2TJXXS10q/Se03pXtY
Uq52meQhxkpfIX2FcB/h30nWqt0m+a3avSST1B6vMcM1tntPs3lsfYGkQX1z
pdvPGI1tF24WPi08VXhQsP8yxyPCc4RrUvsG38InNwvflpuvlvh6Vkg/UHiE
3wfrfYzxkjs19i7JOfdHfONLwpuEV0k+p/YK9XVw9tHOhjNah+0Kv6a5BmXm
L23qWyzdMeEp0q2XfFH9X5CsVbsvc0rXKvl9NB+GS+AUfLtFeFFq/jxYeJpw
dWr3/xS2IzzBz/dx7l94ofB67FB4r+Rbmuvbkv1qvyBpkG6BpL9/D+74rvR7
hAvyxyAp6A6KkvHST5G+UeNflP5t4dXCt2v8TuEa55cW6V/y82b9N0rfKbw5
2l7Zc7vaXTT3NunvEN4hvE3yc7VvlWxXe67bU63m+4PwBj/v6yUb1f6HpEm6
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
1cC1Hk9Z338Byld6Tg==
            "]], 
           Polygon[CompressedData["
1:eJw1lnlQV1UYhq+lmD9u9SMdNSvLlpn2fd+zfZvKxl1LzX2vZirLXQQVAcUF
hRSDFEQQoRQBTU1l0VwQ9xXJyg0XUlRQ7HnnfP3xzLz3/b5z7rnnfOec26rH
kDaDr/E8LxwaQGbQ8y6FeF6873mbAp63GZai+zb0vEfgYThLThV8iP4A3oPF
5AzHW0XbNLWBZTAd7zBeProQiuArvGy8JZABY2kbjbcDPRldQM4KiMXbhlcG
eyCaWBL+XJhAbIP6QA9EL0CPJj4IPRiGwhD40vqNIpaIrkD/CcdgCl4MHEAf
goMwjZwE+pwN8yEf7we8JeS14zs7QHuoxrs+lDb1PK8Tzx2hhvxw37X5jvgw
+B6m453Em4OeC0lwBN6kzRvQGjJ8l1dJ3mk4BeHkVNPnJ8T7wX7e5fPOw/jl
+hZ4BT+ddtPgOG3m4aXAzxBF20nQS8/EZqETybuBNo/DE7CC2CS8LTbPmu8o
vAl4RegSKIaJQfeOE+gLUA2T8GbjeVp/dJbmCWZo3aG/rcso363XOvR62Kj+
8GYqF+KtRmLxMmmXAbmw39ajDL0NKuBB3rUUr7d900itK/6PVmtaW61xufXX
x+pE7+uL7mdjrkc/DSEEfgm6elPdxdk86ts0l0fRU/GSbV5noWvwzsF51S9e
J4hFj7Pv1vePVp94K2EtRNBuLP4YaE8sWjWCl4oOMoYw7Su8GXg55GTDmoCr
G9XBQkiDdNufM612NUdT8KZCHIzDy8XLg+XwDV4M7EPvhd22j7S+hejxxCIg
UrWqGtTeV//QBS+VMSyASMtXHXymedC+0BoSiw+4/bsLbydst/3Wwb5zFPGp
mlt9P97v/8+Hxgv56MF8f6Mwz2tGfTcPdeuZaPOo/EXoneiPyMsi/xzP5+EA
3jN4adpjPFcG3Bl2lTZ1cNHm6mu8rehSyLQzZz9eG9p+Co/BAt/NwTTiiyEL
upKzlz73QAqxe8nbZXVQS/wKXNb48MbgpaMHBN0ZpbNqA5RAKQRou1I1Cq+h
X4WXbf+uwWuGbgpNYI7v8rS/F6FP0/5MwJ0br+OdQNfCZdvTN+I1hptgvvZd
0NWn6vSM1VUS3Eb8dmgJRdpD9k1b0aU6b827D+8BuN++V2fEZvqpgn91Tmu9
tSYwj9gd5BXjTdTZDN00B9q/Vh+qk854OTqj0N0tPtx3Z22C3TW6c3bDrTY+
jVl6HXo9FKoe4Ba8FtAc5pKzNui+XXNws3n78J5CPwmP2vrqHG+L3k1sj9YW
NsHdeMn6RvSWoDu7khlfCqTa3fKTfWeJzhTYCON15kNHOwOGkbOV5y3wh/V7
AP03+i/4x9Yvw/prhb4L7rT5S/BdnSxD58JyqISTcAret7u2se4B7oMBPPeH
XN/dPQV25qywe2sh3vM2B5qLQ3i12sPortAZslU/9HeI/rrx/Dl4PF8HDaFJ
qNufAfZnJrlvo9+Fd1SHQbcPtR8bkdfH/g+0D7UfLwTcfOu+rLLxn8W7AnVw
GMrhFLxl/ek/Yg3jXw2/6Yzy3XsVP0rsGByHkTACRgXdf4fy8tF5UGDnQqrv
/l80rvqMvwGEQFPGWsH3DsIfCHm+W6+Wtj/usXrQ+fIc+ll42vqbDw+h43Q3
hLj7aDXjXwXFAXcf6k5Rnu6rMvR22GHr8QLeS/AiHMQLYyzljKU3z710J4W6
c3yZ/SPpX+lb8uox7p7Ev4Duegc5Lcg9QtuPeR6q+9x369sFnYO+lnh9uIR3
EWospjWPZKwR0M7O8xj0VXQdeLyrh70jGn8yzAm4862tjUXxX31XI6qVODvn
e+ruJG8Esf8AmvSeJg==
            "]], 
           
           Polygon[{{4286, 4285, 3226, 1803, 1813, 
            3228}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0uA1EYgOFvpq2ZqdqwrI2kNgQ7liyVlrY7WxfQxl/8/1wCCTciXIUb
YVWJPZ4hmXfeNzlzvpwzc/ujwTCJiD18iHW+TyMesKmfuc+NPGISPV3nArs6
5ww7usZVdHWFU3R0kpcfRmzTTxaxxd/c5jfzN/iVX7Cmn/gRy/qIDzGv+9zD
rF4p1zGjp7iBuv5yh/I+B+an5X6u8DGfoKpP+Qw1fc4XmNCXfAVPXHvdZH/H
jlu+Q6ELQ6d5gRfR1B3uoqWHPMKSHjvIJ1b1e/L/f38B1Wsfog==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MkuA1AUgOGjNt00iKmlFl6DhHdoqZoS09KwYlkJC5a61OqkplfwIqw0
8RQSNr6bLv78f25uzj25iwdnpdORiNjEZybijmujEZe4111+5LdsxCt6+oWf
0dVP3EdH99IZ2rqTjJZu8UNCN7nJDW7wu/l17qd3cKuv+SrtoPd5Dxd6lVdw
ohe4iCP9Z+9fbOtvLnHO/DKP8RqP8wTW9SRPoaKneQYbepbzqOoCz2WH/zLP
RWzpH/MPOe/tAo71Ei/jXO/wLmr6y90BbvRHZvi//9jcK/I=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Mkug1EcxuG/VIxXYUfCVo0x1IqExK5ba+ONCNfQUtWKoS02rFoWJLVk
SSIx1dQb8CQWvzzv4ss5J1/P0triaktEpFVLRDxyuTViRW/2Jpuc6YxI6dee
5pR+7ElO6Nse55i+7FGO6NMe5pAadpIfHOQ7c85/4ja39GBvcF139gLndW0P
sF+Xdje7VLFfvftFRbvODPMdEVkWuMMiD7RrH/JIOfuYJ9qzSywrb1d4qn37
jOcq2M/OL7PN3e26sHvZpyt7lnOq2ze+vdW9XU38/98/eTE3Qw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0EsuA1AYQOFf0kpMmCE60SFDJkSLqgbxLhOaVGIBbEBYRTfCiKSbUIq0
HototfVIfI3ByTk3N/nvI316XjwbiIgj3CQiZiyOkxElLOgLXuWPoYh35PUb
v2JFN7mBnH7hZyzrJ65jST/yAxZ1jbN8zxmumD/LV3yJaX3CZaR1ljMY1yme
wIjuuWsXg/2zuI5fb6hyiwvmt3mNP3mdN9DRm7yFrt7mHfT0Lu/hS+9zEd/6
gA/xo2vmJ53Z4jaG9ag7jfXRczyPSX1r/w5T+jrx/79/g6cwpg==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Esuw1EUgPHTxF/ULpCwEaWtx8CAGBGDRid9oKJFJAy9HwtgRGIVklpI
1aP1XoJfY/Dl+25u7snJHVopz5VSEbGImyRi32G8PyKDQ13gK94djNjBpd7m
Bi50nbdwrje5hjO9wes41WtcxYmu8DGX+Yj3zD/gIq+ioXOcRVWP8SiKOs0D
WNZvdn3Fgn7kJmb1PWe4lY6Y4DZP8jO/INt7yx3kdJffkdcf/Ikp/cXfmNY/
/IsZ/WD+PD9xG0u6z05Jb389zCOo6Fv3d6jr6+T/f/8AU3sxzw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DsvQ3Ecx+GfpU3QKuJSmzdAwhuRmqw2S72DBlG3MlRSd0YGiRrZGDWV
uIzul5mEN+A5MXzyfM8Z/vmfMzg5XSi2RMSEKqmIOw9D6YhhPdhj/ORAW0Re
H3Y/+/Ru97JHb3Y3u/RqdzKnF7uDWT3bGT6xnY+ccv49x1lQwx7liC6Tc5jT
uf3rfj86tW95oyO7zhMd2DXWWGqN2OAMNznLOW3Z8yxr217gonbsJS5r115h
RXv2Kte0bx87/5BNXqtuf/FbZ8l3uWtGF3bVu3VdJeel/v/vH3+LMrI=
          "]]}, {
         Line[{2, 487, 11, 500, 501, 20, 526, 527, 29, 560, 561, 38, 594, 595,
           47, 628, 629, 56, 662, 663, 65, 694, 74}], 
         Line[{1905, 485, 1922, 3268, 2845, 3269, 1940, 3291, 2853, 3290, 
          1958, 3317, 2861, 3318, 1975, 3343, 2870, 3342, 1990, 3366, 2879, 
          3367, 2007, 3396, 2890, 3395, 2026, 3421, 2024, 2046}], 
         Line[{1907, 486, 1923, 504, 3271, 1941, 3294, 2854, 3295, 1959, 3321,
           2864, 3320, 1976, 3345, 2873, 3346, 1991, 3371, 2882, 3370, 2008, 
          3398, 2893, 3399, 2027, 3423, 2028, 2047}], 
         Line[{1909, 2843, 3264, 1925, 2848, 3274, 3275, 1943, 3302, 2856, 
          3300, 1961, 3328, 2866, 3326, 1978, 608, 3351, 1993, 3376, 2885, 
          3379, 2010, 3406, 2896, 3404, 2030, 3429, 2034, 2049}], 
         Line[{1912, 2844, 3266, 1928, 2850, 3284, 3286, 1946, 3313, 2859, 
          3311, 1964, 3334, 2868, 3339, 1980, 2877, 3360, 3362, 1996, 3391, 
          2888, 3386, 2012, 3413, 2898, 3418, 2032, 3435, 2040, 2051}], 
         Line[{1914, 1921, 3270, 1930, 1939, 3292, 3293, 1949, 3288, 2862, 
          3319, 1967, 3315, 2871, 3344, 1982, 3341, 2881, 3369, 1998, 3364, 
          2891, 3397, 2015, 3422, 2900, 3394, 2036, 3420, 2907, 2053}], 
         Line[{1916, 1926, 3273, 1933, 3299, 2855, 3298, 1952, 3325, 2865, 
          3324, 1969, 3348, 2874, 3350, 1985, 3375, 2883, 3374, 2001, 3401, 
          2894, 3403, 2018, 3425, 2901, 3427, 2038, 3440, 2909, 2056}], 
         Line[{1918, 1931, 3278, 1935, 1950, 3305, 3307, 1954, 578, 3331, 
          1971, 3356, 2876, 3355, 1987, 1999, 3381, 3383, 2003, 3411, 2897, 
          3410, 2021, 3431, 2903, 3433, 2042, 3442, 2910, 2058}], 
         Line[{1920, 3261, 2852, 1938, 1955, 3279, 3281, 1957, 3308, 2869, 
          3337, 1974, 620, 3332, 1989, 3357, 2889, 3389, 2006, 688, 3390, 
          2023, 3417, 2905, 3438, 2045, 3444, 2912, 2060}], 
         Line[{2048, 2033, 3428, 2029, 2013, 3407, 3405, 2009, 3378, 3377, 
          2884, 1992, 609, 3352, 1977, 1965, 3329, 3327, 1960, 1947, 3303, 
          3301, 1942, 511, 3276, 1924, 1906, 3263, 1908}], 
         Line[{2050, 2039, 3434, 2031, 2019, 3414, 3412, 2011, 3385, 3384, 
          2887, 1995, 3361, 2878, 3358, 1979, 3338, 2867, 3333, 1963, 3310, 
          3309, 2858, 1945, 3285, 2851, 3282, 1927, 1910, 3265, 1911}], 
         Line[{2052, 2906, 3419, 2035, 3393, 3392, 2025, 2014, 2892, 3365, 
          3363, 1997, 3368, 2880, 3340, 1981, 2872, 3316, 3314, 1966, 2863, 
          3289, 3287, 1948, 529, 3267, 1929, 2846, 3262, 1913}], 
         Line[{2055, 2908, 3439, 2037, 2902, 3426, 3424, 2017, 2895, 3402, 
          3400, 2000, 3373, 3372, 1994, 1984, 2875, 3349, 3347, 1968, 3323, 
          3322, 1962, 1951, 3297, 3296, 1944, 1932, 2847, 3272, 1915}], 
         Line[{2057, 3441, 2054, 2041, 2904, 3432, 3430, 2020, 3409, 3408, 
          2016, 2002, 3382, 2886, 3380, 1986, 3354, 3353, 1983, 1970, 579, 
          3330, 1953, 3306, 2857, 3304, 1934, 2849, 3277, 1917}], 
         Line[{2059, 2911, 3443, 2044, 3437, 3436, 2043, 2022, 2899, 3416, 
          3415, 2005, 3388, 3387, 2004, 1988, 621, 3359, 1973, 3336, 3335, 
          1972, 1956, 3280, 2860, 3312, 1937, 3283, 1936, 1919}], 
         Line[{83, 725, 92, 738, 739, 101, 764, 765, 110, 798, 799, 119, 832, 
          833, 128, 866, 867, 137, 900, 901, 146, 932, 155}], 
         Line[{2061, 723, 2078, 3452, 2915, 3453, 2096, 3475, 2923, 3474, 
          2114, 3501, 2931, 3502, 2131, 3527, 2940, 3526, 2146, 3550, 2949, 
          3551, 2163, 3580, 2960, 3579, 2182, 3605, 2180, 2202}], 
         Line[{2063, 724, 2079, 742, 3455, 2097, 3478, 2924, 3479, 2115, 3505,
           2934, 3504, 2132, 3529, 2943, 3530, 2147, 3555, 2952, 3554, 2164, 
          3582, 2963, 3583, 2183, 3607, 2184, 2203}], 
         Line[{2065, 2913, 3448, 2081, 2918, 3458, 3459, 2099, 3486, 2926, 
          3484, 2117, 3512, 2936, 3510, 2134, 846, 3535, 2149, 3560, 2955, 
          3563, 2166, 3590, 2966, 3588, 2186, 3613, 2190, 2205}], 
         Line[{2068, 2914, 3450, 2084, 2920, 3468, 3470, 2102, 3497, 2929, 
          3495, 2120, 3518, 2938, 3523, 2136, 2947, 3544, 3546, 2152, 3575, 
          2958, 3570, 2168, 3597, 2968, 3602, 2188, 3619, 2196, 2207}], 
         Line[{2070, 2077, 3454, 2086, 2095, 3476, 3477, 2105, 3472, 2932, 
          3503, 2123, 3499, 2941, 3528, 2138, 3525, 2951, 3553, 2154, 3548, 
          2961, 3581, 2171, 3606, 2970, 3578, 2192, 3604, 2977, 2209}], 
         Line[{2072, 2082, 3457, 2089, 3483, 2925, 3482, 2108, 3509, 2935, 
          3508, 2125, 3532, 2944, 3534, 2141, 3559, 2953, 3558, 2157, 3585, 
          2964, 3587, 2174, 3609, 2971, 3611, 2194, 3624, 2979, 2212}], 
         Line[{2074, 2087, 3462, 2091, 2106, 3489, 3491, 2110, 816, 3515, 
          2127, 3540, 2946, 3539, 2143, 2155, 3565, 3567, 2159, 3595, 2967, 
          3594, 2177, 3615, 2973, 3617, 2198, 3626, 2980, 2214}], 
         Line[{2076, 3445, 2922, 2094, 2111, 3463, 3465, 2113, 3492, 2939, 
          3521, 2130, 858, 3516, 2145, 3541, 2959, 3573, 2162, 926, 3574, 
          2179, 3601, 2975, 3622, 2201, 3628, 2982, 2216}], 
         Line[{2204, 2189, 3612, 2185, 2169, 3591, 3589, 2165, 3562, 3561, 
          2954, 2148, 847, 3536, 2133, 2121, 3513, 3511, 2116, 2103, 3487, 
          3485, 2098, 749, 3460, 2080, 2062, 3447, 2064}], 
         Line[{2206, 2195, 3618, 2187, 2175, 3598, 3596, 2167, 3569, 3568, 
          2957, 2151, 3545, 2948, 3542, 2135, 3522, 2937, 3517, 2119, 3494, 
          3493, 2928, 2101, 3469, 2921, 3466, 2083, 2066, 3449, 2067}], 
         Line[{2208, 2976, 3603, 2191, 3577, 3576, 2181, 2170, 2962, 3549, 
          3547, 2153, 3552, 2950, 3524, 2137, 2942, 3500, 3498, 2122, 2933, 
          3473, 3471, 2104, 767, 3451, 2085, 2916, 3446, 2069}], 
         Line[{2211, 2978, 3623, 2193, 2972, 3610, 3608, 2173, 2965, 3586, 
          3584, 2156, 3557, 3556, 2150, 2140, 2945, 3533, 3531, 2124, 3507, 
          3506, 2118, 2107, 3481, 3480, 2100, 2088, 2917, 3456, 2071}], 
         Line[{2213, 3625, 2210, 2197, 2974, 3616, 3614, 2176, 3593, 3592, 
          2172, 2158, 3566, 2956, 3564, 2142, 3538, 3537, 2139, 2126, 817, 
          3514, 2109, 3490, 2927, 3488, 2090, 2919, 3461, 2073}], 
         Line[{2215, 2981, 3627, 2200, 3621, 3620, 2199, 2178, 2969, 3600, 
          3599, 2161, 3572, 3571, 2160, 2144, 859, 3543, 2129, 3520, 3519, 
          2128, 2112, 3464, 2930, 3496, 2093, 3467, 2092, 2075}], 
         Line[{164, 963, 173, 976, 977, 182, 1002, 1003, 191, 1036, 1037, 200,
           1070, 1071, 209, 1104, 1105, 218, 1138, 1139, 227, 1170, 236}], 
         Line[{2217, 961, 2234, 3636, 2985, 3637, 2252, 3659, 2993, 3658, 
          2270, 3685, 3001, 3686, 2287, 3711, 3010, 3710, 2302, 3734, 3019, 
          3735, 2319, 3764, 3030, 3763, 2338, 3789, 2336, 2358}], 
         Line[{2219, 962, 2235, 980, 3639, 2253, 3662, 2994, 3663, 2271, 3689,
           3004, 3688, 2288, 3713, 3013, 3714, 2303, 3739, 3022, 3738, 2320, 
          3766, 3033, 3767, 2339, 3791, 2340, 2359}], 
         Line[{2221, 2983, 3632, 2237, 2988, 3642, 3643, 2255, 3670, 2996, 
          3668, 2273, 3696, 3006, 3694, 2290, 1084, 3719, 2305, 3744, 3025, 
          3747, 2322, 3774, 3036, 3772, 2342, 3797, 2346, 2361}], 
         Line[{2224, 2984, 3634, 2240, 2990, 3652, 3654, 2258, 3681, 2999, 
          3679, 2276, 3702, 3008, 3707, 2292, 3017, 3728, 3730, 2308, 3759, 
          3028, 3754, 2324, 3781, 3038, 3786, 2344, 3803, 2352, 2363}], 
         Line[{2226, 2233, 3638, 2242, 2251, 3660, 3661, 2261, 3656, 3002, 
          3687, 2279, 3683, 3011, 3712, 2294, 3709, 3021, 3737, 2310, 3732, 
          3031, 3765, 2327, 3790, 3040, 3762, 2348, 3788, 3047, 2365}], 
         Line[{2228, 2238, 3641, 2245, 3667, 2995, 3666, 2264, 3693, 3005, 
          3692, 2281, 3716, 3014, 3718, 2297, 3743, 3023, 3742, 2313, 3769, 
          3034, 3771, 2330, 3793, 3041, 3795, 2350, 3808, 3049, 2368}], 
         Line[{2230, 2243, 3646, 2247, 2262, 3673, 3675, 2266, 1054, 3699, 
          2283, 3724, 3016, 3723, 2299, 2311, 3749, 3751, 2315, 3779, 3037, 
          3778, 2333, 3799, 3043, 3801, 2354, 3810, 3050, 2370}], 
         Line[{2232, 3629, 2992, 2250, 2267, 3647, 3649, 2269, 3676, 3009, 
          3705, 2286, 1096, 3700, 2301, 3725, 3029, 3757, 2318, 1164, 3758, 
          2335, 3785, 3045, 3806, 2357, 3812, 3052, 2372}], 
         Line[{2360, 2345, 3796, 2341, 2325, 3775, 3773, 2321, 3746, 3745, 
          3024, 2304, 1085, 3720, 2289, 2277, 3697, 3695, 2272, 2259, 3671, 
          3669, 2254, 987, 3644, 2236, 2218, 3631, 2220}], 
         Line[{2362, 2351, 3802, 2343, 2331, 3782, 3780, 2323, 3753, 3752, 
          3027, 2307, 3729, 3018, 3726, 2291, 3706, 3007, 3701, 2275, 3678, 
          3677, 2998, 2257, 3653, 2991, 3650, 2239, 2222, 3633, 2223}], 
         Line[{2364, 3046, 3787, 2347, 3761, 3760, 2337, 2326, 3032, 3733, 
          3731, 2309, 3736, 3020, 3708, 2293, 3012, 3684, 3682, 2278, 3003, 
          3657, 3655, 2260, 1005, 3635, 2241, 2986, 3630, 2225}], 
         Line[{2367, 3048, 3807, 2349, 3042, 3794, 3792, 2329, 3035, 3770, 
          3768, 2312, 3741, 3740, 2306, 2296, 3015, 3717, 3715, 2280, 3691, 
          3690, 2274, 2263, 3665, 3664, 2256, 2244, 2987, 3640, 2227}], 
         Line[{2369, 3809, 2366, 2353, 3044, 3800, 3798, 2332, 3777, 3776, 
          2328, 2314, 3750, 3026, 3748, 2298, 3722, 3721, 2295, 2282, 1055, 
          3698, 2265, 3674, 2997, 3672, 2246, 2989, 3645, 2229}], 
         Line[{2371, 3051, 3811, 2356, 3805, 3804, 2355, 2334, 3039, 3784, 
          3783, 2317, 3756, 3755, 2316, 2300, 1097, 3727, 2285, 3704, 3703, 
          2284, 2268, 3648, 3000, 3680, 2249, 3651, 2248, 2231}], 
         Line[{245, 1201, 254, 1214, 1215, 263, 1240, 1241, 272, 1274, 1275, 
          281, 1308, 1309, 290, 1342, 1343, 299, 1376, 1377, 308, 1408, 317}], 
         Line[{2373, 1199, 2390, 3820, 3055, 3821, 2408, 3843, 3063, 3842, 
          2426, 3869, 3071, 3870, 2443, 3895, 3080, 3894, 2458, 3918, 3089, 
          3919, 2475, 3948, 3100, 3947, 2494, 3973, 2492, 2514}], 
         Line[{2375, 1200, 2391, 1218, 3823, 2409, 3846, 3064, 3847, 2427, 
          3873, 3074, 3872, 2444, 3897, 3083, 3898, 2459, 3923, 3092, 3922, 
          2476, 3950, 3103, 3951, 2495, 3975, 2496, 2515}], 
         Line[{2377, 3053, 3816, 2393, 3058, 3826, 3827, 2411, 3854, 3066, 
          3852, 2429, 3880, 3076, 3878, 2446, 1322, 3903, 2461, 3928, 3095, 
          3931, 2478, 3958, 3106, 3956, 2498, 3981, 2502, 2517}], 
         Line[{2380, 3054, 3818, 2396, 3060, 3836, 3838, 2414, 3865, 3069, 
          3863, 2432, 3886, 3078, 3891, 2448, 3087, 3912, 3914, 2464, 3943, 
          3098, 3938, 2480, 3965, 3108, 3970, 2500, 3987, 2508, 2519}], 
         Line[{2382, 2389, 3822, 2398, 2407, 3844, 3845, 2417, 3840, 3072, 
          3871, 2435, 3867, 3081, 3896, 2450, 3893, 3091, 3921, 2466, 3916, 
          3101, 3949, 2483, 3974, 3110, 3946, 2504, 3972, 3117, 2521}], 
         Line[{2384, 2394, 3825, 2401, 3851, 3065, 3850, 2420, 3877, 3075, 
          3876, 2437, 3900, 3084, 3902, 2453, 3927, 3093, 3926, 2469, 3953, 
          3104, 3955, 2486, 3977, 3111, 3979, 2506, 3992, 3119, 2524}], 
         Line[{2386, 2399, 3830, 2403, 2418, 3857, 3859, 2422, 1292, 3883, 
          2439, 3908, 3086, 3907, 2455, 2467, 3933, 3935, 2471, 3963, 3107, 
          3962, 2489, 3983, 3113, 3985, 2510, 3994, 3120, 2526}], 
         Line[{2388, 3813, 3062, 2406, 2423, 3831, 3833, 2425, 3860, 3079, 
          3889, 2442, 1334, 3884, 2457, 3909, 3099, 3941, 2474, 1402, 3942, 
          2491, 3969, 3115, 3990, 2513, 3996, 3122, 2528}], 
         Line[{2516, 2501, 3980, 2497, 2481, 3959, 3957, 2477, 3930, 3929, 
          3094, 2460, 1323, 3904, 2445, 2433, 3881, 3879, 2428, 2415, 3855, 
          3853, 2410, 1225, 3828, 2392, 2374, 3815, 2376}], 
         Line[{2518, 2507, 3986, 2499, 2487, 3966, 3964, 2479, 3937, 3936, 
          3097, 2463, 3913, 3088, 3910, 2447, 3890, 3077, 3885, 2431, 3862, 
          3861, 3068, 2413, 3837, 3061, 3834, 2395, 2378, 3817, 2379}], 
         Line[{2520, 3116, 3971, 2503, 3945, 3944, 2493, 2482, 3102, 3917, 
          3915, 2465, 3920, 3090, 3892, 2449, 3082, 3868, 3866, 2434, 3073, 
          3841, 3839, 2416, 1243, 3819, 2397, 3056, 3814, 2381}], 
         Line[{2523, 3118, 3991, 2505, 3112, 3978, 3976, 2485, 3105, 3954, 
          3952, 2468, 3925, 3924, 2462, 2452, 3085, 3901, 3899, 2436, 3875, 
          3874, 2430, 2419, 3849, 3848, 2412, 2400, 3057, 3824, 2383}], 
         Line[{2525, 3993, 2522, 2509, 3114, 3984, 3982, 2488, 3961, 3960, 
          2484, 2470, 3934, 3096, 3932, 2454, 3906, 3905, 2451, 2438, 1293, 
          3882, 2421, 3858, 3067, 3856, 2402, 3059, 3829, 2385}], 
         Line[{2527, 3121, 3995, 2512, 3989, 3988, 2511, 2490, 3109, 3968, 
          3967, 2473, 3940, 3939, 2472, 2456, 1335, 3911, 2441, 3888, 3887, 
          2440, 2424, 3832, 3070, 3864, 2405, 3835, 2404, 2387}], 
         Line[{326, 1439, 335, 1452, 1453, 344, 1478, 1479, 353, 1512, 1513, 
          362, 1546, 1547, 370, 1576, 1577, 379, 1610, 1611, 388, 1642, 397}], 
         Line[{2529, 1437, 2546, 4004, 3125, 4005, 2564, 4027, 3133, 4026, 
          2582, 4051, 3141, 4052, 2599, 4079, 3152, 4078, 2615, 4077, 3158, 
          4100, 2632, 4132, 3169, 4131, 2651, 4157, 2649, 2671}], 
         Line[{2531, 1438, 2547, 1456, 4007, 2565, 4030, 3134, 4031, 2583, 
          4055, 3144, 4054, 2600, 4083, 3155, 4084, 2616, 4107, 3161, 4106, 
          2633, 4134, 3172, 4135, 2652, 4159, 2653, 2672}], 
         Line[{2533, 3123, 4000, 2549, 3128, 4010, 4011, 2567, 4038, 3136, 
          4036, 2585, 4062, 3146, 4060, 2602, 1560, 4089, 2618, 4112, 3164, 
          4115, 2635, 4142, 3175, 4140, 2655, 4165, 2659, 2674}], 
         Line[{2536, 3124, 4002, 2552, 3130, 4020, 4022, 2570, 4049, 3139, 
          4047, 2588, 4068, 3148, 4074, 2605, 4101, 3157, 4096, 2621, 4127, 
          3167, 4122, 2637, 4149, 3177, 4154, 2657, 4171, 2665, 2676}], 
         Line[{2538, 2545, 4006, 2554, 2563, 4028, 4029, 2573, 4024, 3142, 
          4053, 2591, 4050, 3150, 4076, 2607, 4103, 3160, 4105, 2623, 4098, 
          3170, 4133, 2640, 4158, 3179, 4130, 2661, 4156, 3186, 2678}], 
         Line[{2540, 2550, 4009, 2557, 4035, 3135, 4034, 2576, 4059, 3145, 
          4058, 2593, 4081, 3153, 4085, 2609, 4111, 3162, 4110, 2626, 4137, 
          3173, 4139, 2643, 4161, 3180, 4163, 2663, 4176, 3188, 2681}], 
         Line[{2542, 2555, 4014, 2559, 2574, 4041, 4043, 2578, 1530, 4065, 
          2595, 4091, 3156, 4088, 2611, 2624, 4117, 4119, 2628, 4147, 3176, 
          4146, 2646, 4167, 3182, 4169, 2667, 4178, 3189, 2683}], 
         Line[{2544, 3997, 3132, 2562, 2579, 4015, 4017, 2581, 4044, 3151, 
          4071, 2598, 1566, 4066, 2614, 4093, 3168, 4125, 2631, 1636, 4126, 
          2648, 4153, 3184, 4174, 2670, 4180, 3191, 2685}], 
         Line[{2673, 2658, 4164, 2654, 2638, 4143, 4141, 2634, 4114, 4113, 
          3163, 2617, 1561, 4090, 2601, 2589, 4063, 4061, 2584, 2571, 4039, 
          4037, 2566, 1463, 4012, 2548, 2530, 3999, 2532}], 
         Line[{2675, 2664, 4170, 2656, 2644, 4150, 4148, 2636, 4121, 4120, 
          3166, 2620, 4095, 4094, 2612, 2604, 4073, 3147, 4067, 2587, 4046, 
          4045, 3138, 2569, 4021, 3131, 4018, 2551, 2534, 4001, 2535}], 
         Line[{2677, 3185, 4155, 2660, 4129, 4128, 2650, 2639, 3171, 4099, 
          4097, 2622, 4104, 3159, 4102, 2606, 4075, 4072, 3149, 2590, 3143, 
          4025, 4023, 2572, 1481, 4003, 2553, 3126, 3998, 2537}], 
         Line[{2680, 3187, 4175, 2662, 3181, 4162, 4160, 2642, 3174, 4138, 
          4136, 2625, 4109, 4108, 2619, 2608, 3154, 4082, 4080, 2592, 4057, 
          4056, 2586, 2575, 4033, 4032, 2568, 2556, 3127, 4008, 2539}], 
         Line[{2682, 4177, 2679, 2666, 3183, 4168, 4166, 2645, 4145, 4144, 
          2641, 2627, 4118, 3165, 4116, 2610, 4087, 4086, 2603, 2594, 1531, 
          4064, 2577, 4042, 3137, 4040, 2558, 3129, 4013, 2541}], 
         Line[{2684, 3190, 4179, 2669, 4173, 4172, 2668, 2647, 3178, 4152, 
          4151, 2630, 4124, 4123, 2629, 2613, 1567, 4092, 2597, 4070, 4069, 
          2596, 2580, 4016, 3140, 4048, 2561, 4019, 2560, 2543}], 
         Line[{406, 1673, 415, 1686, 1687, 424, 1712, 1713, 433, 1746, 1747, 
          442, 1780, 1781, 450, 1810, 1811, 459, 1844, 1845, 468, 1876, 477}], 
         Line[{2686, 1671, 2703, 4188, 3194, 4189, 2721, 4211, 3202, 4210, 
          2739, 4235, 3210, 4236, 2756, 4263, 3221, 4262, 2772, 4261, 3227, 
          4284, 2789, 4316, 3238, 4315, 2808, 4341, 2806, 2828}], 
         Line[{2688, 1672, 2704, 1690, 4191, 2722, 4214, 3203, 4215, 2740, 
          4239, 3213, 4238, 2757, 4267, 3224, 4268, 2773, 4291, 3230, 4290, 
          2790, 4318, 3241, 4319, 2809, 4343, 2810, 2829}], 
         Line[{2690, 3192, 4184, 2706, 3197, 4194, 4195, 2724, 4222, 3205, 
          4220, 2742, 4246, 3215, 4244, 2759, 1794, 4273, 2775, 4296, 3233, 
          4299, 2792, 4326, 3244, 4324, 2812, 4349, 2816, 2831}], 
         Line[{2693, 3193, 4186, 2709, 3199, 4204, 4206, 2727, 4233, 3208, 
          4231, 2745, 4252, 3217, 4258, 2762, 4285, 3226, 4280, 2778, 4311, 
          3236, 4306, 2794, 4333, 3246, 4338, 2814, 4355, 2822, 2833}], 
         Line[{2695, 2702, 4190, 2711, 2720, 4212, 4213, 2730, 4208, 3211, 
          4237, 2748, 4234, 3219, 4260, 2764, 4287, 3229, 4289, 2780, 4282, 
          3239, 4317, 2797, 4342, 3248, 4314, 2818, 4340, 3255, 2835}], 
         Line[{2697, 2707, 4193, 2714, 4219, 3204, 4218, 2733, 4243, 3214, 
          4242, 2750, 4265, 3222, 4269, 2766, 4295, 3231, 4294, 2783, 4321, 
          3242, 4323, 2800, 4345, 3249, 4347, 2820, 4360, 3257, 2838}], 
         Line[{2699, 2712, 4198, 2716, 2731, 4225, 4227, 2735, 1764, 4249, 
          2752, 4275, 3225, 4272, 2768, 2781, 4301, 4303, 2785, 4331, 3245, 
          4330, 2803, 4351, 3251, 4353, 2824, 4362, 3258, 2840}], 
         Line[{2701, 4181, 3201, 2719, 2736, 4199, 4201, 2738, 4228, 3220, 
          4255, 2755, 1800, 4250, 2771, 4277, 3237, 4309, 2788, 1870, 4310, 
          2805, 4337, 3253, 4358, 2827, 4364, 3260, 2842}], 
         Line[{2830, 2815, 4348, 2811, 2795, 4327, 4325, 2791, 4298, 4297, 
          3232, 2774, 1795, 4274, 2758, 2746, 4247, 4245, 2741, 2728, 4223, 
          4221, 2723, 1697, 4196, 2705, 2687, 4183, 2689}], 
         Line[{2832, 2821, 4354, 2813, 2801, 4334, 4332, 2793, 4305, 4304, 
          3235, 2777, 4279, 4278, 2769, 2761, 4257, 3216, 4251, 2744, 4230, 
          4229, 3207, 2726, 4205, 3200, 4202, 2708, 2691, 4185, 2692}], 
         Line[{2834, 3254, 4339, 2817, 4313, 4312, 2807, 2796, 3240, 4283, 
          4281, 2779, 4288, 3228, 4286, 2763, 4259, 4256, 3218, 2747, 3212, 
          4209, 4207, 2729, 1715, 4187, 2710, 3195, 4182, 2694}], 
         Line[{2837, 3256, 4359, 2819, 3250, 4346, 4344, 2799, 3243, 4322, 
          4320, 2782, 4293, 4292, 2776, 2765, 3223, 4266, 4264, 2749, 4241, 
          4240, 2743, 2732, 4217, 4216, 2725, 2713, 3196, 4192, 2696}], 
         Line[{2839, 4361, 2836, 2823, 3252, 4352, 4350, 2802, 4329, 4328, 
          2798, 2784, 4302, 3234, 4300, 2767, 4271, 4270, 2760, 2751, 1765, 
          4248, 2734, 4226, 3206, 4224, 2715, 3198, 4197, 2698}], 
         Line[{2841, 3259, 4363, 2826, 4357, 4356, 2825, 2804, 3247, 4336, 
          4335, 2787, 4308, 4307, 2786, 2770, 1801, 4276, 2754, 4254, 4253, 
          2753, 2737, 4200, 3209, 4232, 2718, 4203, 2717, 2700}]}, {
         Line[{489, 3390, 689, 3416, 683, 681, 3410, 3409, 675, 3403, 673, 
          3402, 667, 3397, 665, 3365, 653, 651, 3386, 3385, 645, 643, 3379, 
          3378, 637, 3370, 635, 629, 625, 3367, 661}], 
         Line[{496, 655, 3389, 3388, 649, 3383, 3382, 647, 641, 639, 3374, 
          3373, 633, 3369, 3368, 631, 619, 3362, 3361, 617, 611, 3351, 609, 
          603, 601, 3346, 595, 3342, 591, 627}], 
         Line[{499, 485, 487, 486, 490, 3263, 491, 3264, 492, 3265, 493, 3266,
           494, 3262, 502, 3270, 503, 3272, 508, 3273, 509, 3277, 514, 3278, 
          515, 3283, 520, 3261, 521}], 
         Line[{18, 1938, 1937, 17, 1935, 1934, 16, 1933, 1932, 15, 1930, 1929,
           14, 1928, 1927, 13, 1925, 1924, 12, 1923, 11, 1922, 10}], 
         Line[{524, 497, 3268, 500, 504, 506, 3276, 510, 3274, 512, 3282, 516,
           3284, 518, 3267, 528, 3292, 530, 3296, 536, 3299, 538, 3304, 544, 
          3305, 546, 3312, 552, 3279, 554}], 
         Line[{555, 3281, 3280, 553, 547, 3307, 3306, 545, 539, 537, 3298, 
          3297, 531, 3293, 529, 519, 3286, 3285, 517, 513, 3275, 511, 507, 
          3271, 505, 501, 498, 3269, 525}], 
         Line[{558, 3291, 522, 526, 532, 3294, 534, 3301, 3302, 540, 542, 
          3309, 548, 3313, 550, 3287, 3288, 562, 564, 3322, 570, 3325, 572, 
          3330, 578, 580, 3335, 586, 3308, 588}], 
         Line[{589, 587, 3337, 3336, 581, 3331, 579, 573, 571, 3324, 3323, 
          565, 3319, 563, 3289, 551, 549, 3311, 3310, 543, 3300, 541, 3303, 
          535, 533, 3295, 527, 3290, 523, 559}], 
         Line[{592, 556, 3317, 560, 3321, 566, 568, 3327, 3328, 574, 576, 
          3333, 3334, 582, 584, 3314, 3315, 596, 598, 3347, 3348, 604, 606, 
          3353, 612, 3356, 614, 3359, 620, 622}], 
         Line[{623, 3332, 621, 615, 613, 3355, 3354, 607, 3350, 605, 3349, 
          599, 3344, 597, 3316, 585, 3339, 3338, 583, 577, 3326, 575, 3329, 
          569, 3320, 567, 561, 557, 3318, 593}], 
         Line[{626, 3343, 590, 594, 600, 3345, 602, 3352, 608, 610, 3358, 616,
           3360, 618, 3340, 3341, 630, 632, 3372, 638, 3375, 640, 3380, 646, 
          3381, 648, 3387, 654, 3357, 495}], 
         Line[{657, 714, 3438, 3437, 710, 3433, 708, 3432, 704, 3427, 702, 
          3426, 698, 696, 3394, 3393, 687, 3418, 685, 3414, 679, 3404, 677, 
          3407, 671, 669, 3399, 663, 3395, 659, 693}], 
         Line[{660, 624, 3366, 628, 3371, 634, 636, 3377, 642, 3376, 644, 
          3384, 650, 3391, 652, 3363, 3364, 664, 666, 3400, 3401, 672, 674, 
          3408, 680, 3411, 682, 3415, 688, 488}], 
         Line[{690, 722, 3444, 3443, 721, 3442, 720, 3441, 719, 718, 3440, 
          3439, 717, 716, 3420, 3419, 712, 711, 3435, 3434, 706, 705, 3429, 
          3428, 700, 699, 3423, 694, 3421, 691, 715}], 
         Line[{692, 3396, 658, 662, 668, 3398, 670, 3405, 3406, 676, 678, 
          3412, 3413, 684, 686, 3392, 695, 3422, 697, 3424, 3425, 701, 703, 
          3430, 3431, 707, 709, 3436, 713, 3417, 656}], 
         Line[{727, 3574, 927, 3600, 921, 919, 3594, 3593, 913, 3587, 911, 
          3586, 905, 3581, 903, 3549, 891, 889, 3570, 3569, 883, 881, 3563, 
          3562, 875, 3554, 873, 867, 863, 3551, 899}], 
         Line[{734, 893, 3573, 3572, 887, 3567, 3566, 885, 879, 877, 3558, 
          3557, 871, 3553, 3552, 869, 857, 3546, 3545, 855, 849, 3535, 847, 
          841, 839, 3530, 833, 3526, 829, 865}], 
         Line[{737, 723, 725, 724, 728, 3447, 729, 3448, 730, 3449, 731, 3450,
           732, 3446, 740, 3454, 741, 3456, 746, 3457, 747, 3461, 752, 3462, 
          753, 3467, 758, 3445, 759}], 
         Line[{99, 2094, 2093, 98, 2091, 2090, 97, 2089, 2088, 96, 2086, 2085,
           95, 2084, 2083, 94, 2081, 2080, 93, 2079, 92, 2078, 91}], 
         Line[{762, 735, 3452, 738, 742, 744, 3460, 748, 3458, 750, 3466, 754,
           3468, 756, 3451, 766, 3476, 768, 3480, 774, 3483, 776, 3488, 782, 
          3489, 784, 3496, 790, 3463, 792}], 
         Line[{793, 3465, 3464, 791, 785, 3491, 3490, 783, 777, 775, 3482, 
          3481, 769, 3477, 767, 757, 3470, 3469, 755, 751, 3459, 749, 745, 
          3455, 743, 739, 736, 3453, 763}], 
         Line[{796, 3475, 760, 764, 770, 3478, 772, 3485, 3486, 778, 780, 
          3493, 786, 3497, 788, 3471, 3472, 800, 802, 3506, 808, 3509, 810, 
          3514, 816, 818, 3519, 824, 3492, 826}], 
         Line[{827, 825, 3521, 3520, 819, 3515, 817, 811, 809, 3508, 3507, 
          803, 3503, 801, 3473, 789, 787, 3495, 3494, 781, 3484, 779, 3487, 
          773, 771, 3479, 765, 3474, 761, 797}], 
         Line[{830, 794, 3501, 798, 3505, 804, 806, 3511, 3512, 812, 814, 
          3517, 3518, 820, 822, 3498, 3499, 834, 836, 3531, 3532, 842, 844, 
          3537, 850, 3540, 852, 3543, 858, 860}], 
         Line[{861, 3516, 859, 853, 851, 3539, 3538, 845, 3534, 843, 3533, 
          837, 3528, 835, 3500, 823, 3523, 3522, 821, 815, 3510, 813, 3513, 
          807, 3504, 805, 799, 795, 3502, 831}], 
         Line[{864, 3527, 828, 832, 838, 3529, 840, 3536, 846, 848, 3542, 854,
           3544, 856, 3524, 3525, 868, 870, 3556, 876, 3559, 878, 3564, 884, 
          3565, 886, 3571, 892, 3541, 733}], 
         Line[{895, 952, 3622, 3621, 948, 3617, 946, 3616, 942, 3611, 940, 
          3610, 936, 934, 3578, 3577, 925, 3602, 923, 3598, 917, 3588, 915, 
          3591, 909, 907, 3583, 901, 3579, 897, 931}], 
         Line[{898, 862, 3550, 866, 3555, 872, 874, 3561, 880, 3560, 882, 
          3568, 888, 3575, 890, 3547, 3548, 902, 904, 3584, 3585, 910, 912, 
          3592, 918, 3595, 920, 3599, 926, 726}], 
         Line[{928, 960, 3628, 3627, 959, 3626, 958, 3625, 957, 956, 3624, 
          3623, 955, 954, 3604, 3603, 950, 949, 3619, 3618, 944, 943, 3613, 
          3612, 938, 937, 3607, 932, 3605, 929, 953}], 
         Line[{930, 3580, 896, 900, 906, 3582, 908, 3589, 3590, 914, 916, 
          3596, 3597, 922, 924, 3576, 933, 3606, 935, 3608, 3609, 939, 941, 
          3614, 3615, 945, 947, 3620, 951, 3601, 894}], 
         Line[{965, 3758, 1165, 3784, 1159, 1157, 3778, 3777, 1151, 3771, 
          1149, 3770, 1143, 3765, 1141, 3733, 1129, 1127, 3754, 3753, 1121, 
          1119, 3747, 3746, 1113, 3738, 1111, 1105, 1101, 3735, 1137}], 
         Line[{972, 1131, 3757, 3756, 1125, 3751, 3750, 1123, 1117, 1115, 
          3742, 3741, 1109, 3737, 3736, 1107, 1095, 3730, 3729, 1093, 1087, 
          3719, 1085, 1079, 1077, 3714, 1071, 3710, 1067, 1103}], 
         Line[{975, 961, 963, 962, 966, 3631, 967, 3632, 968, 3633, 969, 3634,
           970, 3630, 978, 3638, 979, 3640, 984, 3641, 985, 3645, 990, 3646, 
          991, 3651, 996, 3629, 997}], 
         Line[{180, 2250, 2249, 179, 2247, 2246, 178, 2245, 2244, 177, 2242, 
          2241, 176, 2240, 2239, 175, 2237, 2236, 174, 2235, 173, 2234, 172}], 
         Line[{1000, 973, 3636, 976, 980, 982, 3644, 986, 3642, 988, 3650, 
          992, 3652, 994, 3635, 1004, 3660, 1006, 3664, 1012, 3667, 1014, 
          3672, 1020, 3673, 1022, 3680, 1028, 3647, 1030}], 
         Line[{1031, 3649, 3648, 1029, 1023, 3675, 3674, 1021, 1015, 1013, 
          3666, 3665, 1007, 3661, 1005, 995, 3654, 3653, 993, 989, 3643, 987, 
          983, 3639, 981, 977, 974, 3637, 1001}], 
         Line[{1034, 3659, 998, 1002, 1008, 3662, 1010, 3669, 3670, 1016, 
          1018, 3677, 1024, 3681, 1026, 3655, 3656, 1038, 1040, 3690, 1046, 
          3693, 1048, 3698, 1054, 1056, 3703, 1062, 3676, 1064}], 
         Line[{1065, 1063, 3705, 3704, 1057, 3699, 1055, 1049, 1047, 3692, 
          3691, 1041, 3687, 1039, 3657, 1027, 1025, 3679, 3678, 1019, 3668, 
          1017, 3671, 1011, 1009, 3663, 1003, 3658, 999, 1035}], 
         Line[{1068, 1032, 3685, 1036, 3689, 1042, 1044, 3695, 3696, 1050, 
          1052, 3701, 3702, 1058, 1060, 3682, 3683, 1072, 1074, 3715, 3716, 
          1080, 1082, 3721, 1088, 3724, 1090, 3727, 1096, 1098}], 
         Line[{1099, 3700, 1097, 1091, 1089, 3723, 3722, 1083, 3718, 1081, 
          3717, 1075, 3712, 1073, 3684, 1061, 3707, 3706, 1059, 1053, 3694, 
          1051, 3697, 1045, 3688, 1043, 1037, 1033, 3686, 1069}], 
         Line[{1102, 3711, 1066, 1070, 1076, 3713, 1078, 3720, 1084, 1086, 
          3726, 1092, 3728, 1094, 3708, 3709, 1106, 1108, 3740, 1114, 3743, 
          1116, 3748, 1122, 3749, 1124, 3755, 1130, 3725, 971}], 
         Line[{1133, 1190, 3806, 3805, 1186, 3801, 1184, 3800, 1180, 3795, 
          1178, 3794, 1174, 1172, 3762, 3761, 1163, 3786, 1161, 3782, 1155, 
          3772, 1153, 3775, 1147, 1145, 3767, 1139, 3763, 1135, 1169}], 
         Line[{1136, 1100, 3734, 1104, 3739, 1110, 1112, 3745, 1118, 3744, 
          1120, 3752, 1126, 3759, 1128, 3731, 3732, 1140, 1142, 3768, 3769, 
          1148, 1150, 3776, 1156, 3779, 1158, 3783, 1164, 964}], 
         Line[{1166, 1198, 3812, 3811, 1197, 3810, 1196, 3809, 1195, 1194, 
          3808, 3807, 1193, 1192, 3788, 3787, 1188, 1187, 3803, 3802, 1182, 
          1181, 3797, 3796, 1176, 1175, 3791, 1170, 3789, 1167, 1191}], 
         Line[{1168, 3764, 1134, 1138, 1144, 3766, 1146, 3773, 3774, 1152, 
          1154, 3780, 3781, 1160, 1162, 3760, 1171, 3790, 1173, 3792, 3793, 
          1177, 1179, 3798, 3799, 1183, 1185, 3804, 1189, 3785, 1132}], 
         Line[{1203, 3942, 1403, 3968, 1397, 1395, 3962, 3961, 1389, 3955, 
          1387, 3954, 1381, 3949, 1379, 3917, 1367, 1365, 3938, 3937, 1359, 
          1357, 3931, 3930, 1351, 3922, 1349, 1343, 1339, 3919, 1375}], 
         Line[{1210, 1369, 3941, 3940, 1363, 3935, 3934, 1361, 1355, 1353, 
          3926, 3925, 1347, 3921, 3920, 1345, 1333, 3914, 3913, 1331, 1325, 
          3903, 1323, 1317, 1315, 3898, 1309, 3894, 1305, 1341}], 
         Line[{1213, 1199, 1201, 1200, 1204, 3815, 1205, 3816, 1206, 3817, 
          1207, 3818, 1208, 3814, 1216, 3822, 1217, 3824, 1222, 3825, 1223, 
          3829, 1228, 3830, 1229, 3835, 1234, 3813, 1235}], 
         Line[{261, 2406, 2405, 260, 2403, 2402, 259, 2401, 2400, 258, 2398, 
          2397, 257, 2396, 2395, 256, 2393, 2392, 255, 2391, 254, 2390, 253}], 
         Line[{1238, 1211, 3820, 1214, 1218, 1220, 3828, 1224, 3826, 1226, 
          3834, 1230, 3836, 1232, 3819, 1242, 3844, 1244, 3848, 1250, 3851, 
          1252, 3856, 1258, 3857, 1260, 3864, 1266, 3831, 1268}], 
         Line[{1269, 3833, 3832, 1267, 1261, 3859, 3858, 1259, 1253, 1251, 
          3850, 3849, 1245, 3845, 1243, 1233, 3838, 3837, 1231, 1227, 3827, 
          1225, 1221, 3823, 1219, 1215, 1212, 3821, 1239}], 
         Line[{1272, 3843, 1236, 1240, 1246, 3846, 1248, 3853, 3854, 1254, 
          1256, 3861, 1262, 3865, 1264, 3839, 3840, 1276, 1278, 3874, 1284, 
          3877, 1286, 3882, 1292, 1294, 3887, 1300, 3860, 1302}], 
         Line[{1303, 1301, 3889, 3888, 1295, 3883, 1293, 1287, 1285, 3876, 
          3875, 1279, 3871, 1277, 3841, 1265, 1263, 3863, 3862, 1257, 3852, 
          1255, 3855, 1249, 1247, 3847, 1241, 3842, 1237, 1273}], 
         Line[{1306, 1270, 3869, 1274, 3873, 1280, 1282, 3879, 3880, 1288, 
          1290, 3885, 3886, 1296, 1298, 3866, 3867, 1310, 1312, 3899, 3900, 
          1318, 1320, 3905, 1326, 3908, 1328, 3911, 1334, 1336}], 
         Line[{1337, 3884, 1335, 1329, 1327, 3907, 3906, 1321, 3902, 1319, 
          3901, 1313, 3896, 1311, 3868, 1299, 3891, 3890, 1297, 1291, 3878, 
          1289, 3881, 1283, 3872, 1281, 1275, 1271, 3870, 1307}], 
         Line[{1340, 3895, 1304, 1308, 1314, 3897, 1316, 3904, 1322, 1324, 
          3910, 1330, 3912, 1332, 3892, 3893, 1344, 1346, 3924, 1352, 3927, 
          1354, 3932, 1360, 3933, 1362, 3939, 1368, 3909, 1209}], 
         Line[{1371, 1428, 3990, 3989, 1424, 3985, 1422, 3984, 1418, 3979, 
          1416, 3978, 1412, 1410, 3946, 3945, 1401, 3970, 1399, 3966, 1393, 
          3956, 1391, 3959, 1385, 1383, 3951, 1377, 3947, 1373, 1407}], 
         Line[{1374, 1338, 3918, 1342, 3923, 1348, 1350, 3929, 1356, 3928, 
          1358, 3936, 1364, 3943, 1366, 3915, 3916, 1378, 1380, 3952, 3953, 
          1386, 1388, 3960, 1394, 3963, 1396, 3967, 1402, 1202}], 
         Line[{1404, 1436, 3996, 3995, 1435, 3994, 1434, 3993, 1433, 1432, 
          3992, 3991, 1431, 1430, 3972, 3971, 1426, 1425, 3987, 3986, 1420, 
          1419, 3981, 3980, 1414, 1413, 3975, 1408, 3973, 1405, 1429}], 
         Line[{1406, 3948, 1372, 1376, 1382, 3950, 1384, 3957, 3958, 1390, 
          1392, 3964, 3965, 1398, 1400, 3944, 1409, 3974, 1411, 3976, 3977, 
          1415, 1417, 3982, 3983, 1421, 1423, 3988, 1427, 3969, 1370}], 
         Line[{1441, 4126, 1637, 4152, 1631, 1629, 4146, 4145, 1623, 4139, 
          1621, 4138, 1615, 4133, 1613, 4099, 1601, 1599, 4122, 4121, 1593, 
          1591, 4115, 4114, 1585, 4106, 1583, 1577, 1573, 4100, 1609}], 
         Line[{1448, 1603, 4125, 4124, 1597, 4119, 4118, 1595, 1589, 1587, 
          4110, 4109, 1581, 4105, 4104, 1579, 1569, 4096, 4095, 1563, 4089, 
          1561, 1555, 1553, 4084, 1547, 4078, 1543, 1575}], 
         Line[{1451, 1437, 1439, 1438, 1442, 3999, 1443, 4000, 1444, 4001, 
          1445, 4002, 1446, 3998, 1454, 4006, 1455, 4008, 1460, 4009, 1461, 
          4013, 1466, 4014, 1467, 4019, 1472, 3997, 1473}], 
         Line[{342, 2562, 2561, 341, 2559, 2558, 340, 2557, 2556, 339, 2554, 
          2553, 338, 2552, 2551, 337, 2549, 2548, 336, 2547, 335, 2546, 334}], 
         Line[{1476, 1449, 4004, 1452, 1456, 1458, 4012, 1462, 4010, 1464, 
          4018, 1468, 4020, 1470, 4003, 1480, 4028, 1482, 4032, 1488, 4035, 
          1490, 4040, 1496, 4041, 1498, 4048, 1504, 4015, 1506}], 
         Line[{1507, 4017, 4016, 1505, 1499, 4043, 4042, 1497, 1491, 1489, 
          4034, 4033, 1483, 4029, 1481, 1471, 4022, 4021, 1469, 1465, 4011, 
          1463, 1459, 4007, 1457, 1453, 1450, 4005, 1477}], 
         Line[{1510, 4027, 1474, 1478, 1484, 4030, 1486, 4037, 4038, 1492, 
          1494, 4045, 1500, 4049, 1502, 4023, 4024, 1514, 1516, 4056, 1522, 
          4059, 1524, 4064, 1530, 1532, 4069, 1538, 4044, 1540}], 
         Line[{1541, 1539, 4071, 4070, 1533, 4065, 1531, 1525, 1523, 4058, 
          4057, 1517, 4053, 1515, 4025, 1503, 1501, 4047, 4046, 1495, 4036, 
          1493, 4039, 1487, 1485, 4031, 1479, 4026, 1475, 1511}], 
         Line[{1544, 1508, 4051, 1512, 4055, 1518, 1520, 4061, 4062, 1526, 
          1528, 4067, 4068, 1534, 4072, 1536, 4050, 1548, 4080, 4081, 1550, 
          1556, 4086, 1558, 4091, 1564, 4092, 1566, 1570}], 
         Line[{1571, 4066, 1567, 1565, 1559, 4088, 4087, 1557, 4085, 1551, 
          4082, 1549, 1537, 4076, 4075, 4074, 4073, 1535, 1529, 4060, 1527, 
          4063, 1521, 4054, 1519, 1513, 1509, 4052, 1545}], 
         Line[{1574, 4079, 1542, 1546, 1552, 4083, 1554, 4090, 1560, 1562, 
          4094, 1568, 4101, 4102, 4103, 1578, 1580, 4108, 1586, 4111, 1588, 
          4116, 1594, 4117, 1596, 4123, 1602, 4093, 1447}], 
         Line[{1605, 1662, 4174, 4173, 1658, 4169, 1656, 4168, 1652, 4163, 
          1650, 4162, 1646, 1644, 4130, 4129, 1635, 4154, 1633, 4150, 1627, 
          4140, 1625, 4143, 1619, 1617, 4135, 1611, 4131, 1607, 1641}], 
         Line[{1608, 1572, 4077, 1576, 4107, 1582, 1584, 4113, 1590, 4112, 
          1592, 4120, 1598, 4127, 1600, 4097, 4098, 1612, 1614, 4136, 4137, 
          1620, 1622, 4144, 1628, 4147, 1630, 4151, 1636, 1440}], 
         Line[{1638, 1670, 4180, 4179, 1669, 4178, 1668, 4177, 1667, 1666, 
          4176, 4175, 1665, 1664, 4156, 4155, 1660, 1659, 4171, 4170, 1654, 
          1653, 4165, 4164, 1648, 1647, 4159, 1642, 4157, 1639, 1663}], 
         Line[{1640, 4132, 1606, 1610, 1616, 4134, 1618, 4141, 4142, 1624, 
          1626, 4148, 4149, 1632, 1634, 4128, 1643, 4158, 1645, 4160, 4161, 
          1649, 1651, 4166, 4167, 1655, 1657, 4172, 1661, 4153, 1604}], 
         Line[{1675, 4310, 1871, 4336, 1865, 1863, 4330, 4329, 1857, 4323, 
          1855, 4322, 1849, 4317, 1847, 4283, 1835, 1833, 4306, 4305, 1827, 
          1825, 4299, 4298, 1819, 4290, 1817, 1811, 1807, 4284, 1843}], 
         Line[{1682, 1837, 4309, 4308, 1831, 4303, 4302, 1829, 1823, 1821, 
          4294, 4293, 1815, 4289, 4288, 1813, 1803, 4280, 4279, 1797, 4273, 
          1795, 1789, 1787, 4268, 1781, 4262, 1777, 1809}], 
         Line[{1685, 1671, 1673, 1672, 1676, 4183, 1677, 4184, 1678, 4185, 
          1679, 4186, 1680, 4182, 1688, 4190, 1689, 4192, 1694, 4193, 1695, 
          4197, 1700, 4198, 1701, 4203, 1706, 4181, 1707}], 
         Line[{422, 2719, 2718, 421, 2716, 2715, 420, 2714, 2713, 419, 2711, 
          2710, 418, 2709, 2708, 417, 2706, 2705, 416, 2704, 415, 2703, 414}], 
         Line[{1710, 1683, 4188, 1686, 1690, 1692, 4196, 1696, 4194, 1698, 
          4202, 1702, 4204, 1704, 4187, 1714, 4212, 1716, 4216, 1722, 4219, 
          1724, 4224, 1730, 4225, 1732, 4232, 1738, 4199, 1740}], 
         Line[{1741, 4201, 4200, 1739, 1733, 4227, 4226, 1731, 1725, 1723, 
          4218, 4217, 1717, 4213, 1715, 1705, 4206, 4205, 1703, 1699, 4195, 
          1697, 1693, 4191, 1691, 1687, 1684, 4189, 1711}], 
         Line[{1744, 4211, 1708, 1712, 1718, 4214, 1720, 4221, 4222, 1726, 
          1728, 4229, 1734, 4233, 1736, 4207, 4208, 1748, 1750, 4240, 1756, 
          4243, 1758, 4248, 1764, 1766, 4253, 1772, 4228, 1774}], 
         Line[{1775, 1773, 4255, 4254, 1767, 4249, 1765, 1759, 1757, 4242, 
          4241, 1751, 4237, 1749, 4209, 1737, 1735, 4231, 4230, 1729, 4220, 
          1727, 4223, 1721, 1719, 4215, 1713, 4210, 1709, 1745}], 
         Line[{1778, 1742, 4235, 1746, 4239, 1752, 1754, 4245, 4246, 1760, 
          1762, 4251, 4252, 1768, 4256, 1770, 4234, 1782, 4264, 4265, 1784, 
          1790, 4270, 1792, 4275, 1798, 4276, 1800, 1804}], 
         Line[{1805, 4250, 1801, 1799, 1793, 4272, 4271, 1791, 4269, 1785, 
          4266, 1783, 1771, 4260, 4259, 4258, 4257, 1769, 1763, 4244, 1761, 
          4247, 1755, 4238, 1753, 1747, 1743, 4236, 1779}], 
         Line[{1808, 4263, 1776, 1780, 1786, 4267, 1788, 4274, 1794, 1796, 
          4278, 1802, 4285, 4286, 4287, 1812, 1814, 4292, 1820, 4295, 1822, 
          4300, 1828, 4301, 1830, 4307, 1836, 4277, 1681}], 
         Line[{1839, 1896, 4358, 4357, 1892, 4353, 1890, 4352, 1886, 4347, 
          1884, 4346, 1880, 1878, 4314, 4313, 1869, 4338, 1867, 4334, 1861, 
          4324, 1859, 4327, 1853, 1851, 4319, 1845, 4315, 1841, 1875}], 
         Line[{1842, 1806, 4261, 1810, 4291, 1816, 1818, 4297, 1824, 4296, 
          1826, 4304, 1832, 4311, 1834, 4281, 4282, 1846, 1848, 4320, 4321, 
          1854, 1856, 4328, 1862, 4331, 1864, 4335, 1870, 1674}], 
         Line[{1872, 1904, 4364, 4363, 1903, 4362, 1902, 4361, 1901, 1900, 
          4360, 4359, 1899, 1898, 4340, 4339, 1894, 1893, 4355, 4354, 1888, 
          1887, 4349, 4348, 1882, 1881, 4343, 1876, 4341, 1873, 1897}], 
         Line[{1874, 4316, 1840, 1844, 1850, 4318, 1852, 4325, 4326, 1858, 
          1860, 4332, 4333, 1866, 1868, 4312, 1877, 4342, 1879, 4344, 4345, 
          1883, 1885, 4350, 4351, 1889, 1891, 4356, 1895, 4337, 
          1838}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
v2RKlzZZr5zp+XXRnJdwv2HPYi2JZLzdYn1JjOBMQsSI++x18ei5dmH1wpne
uKtbOvsQmW8SFT9o4jYWP8DET1ncWLxBPBVvwMSbUfVYfKLF3bH4RCY+Dcff
K9Ori8EsG65fXx+5or5FiIcgmde7YvH9++TTUUMw+7jdlli07Cq71Ufw4c5t
t0tN5enoPCXnjMzbYLTdMuGDBJmXkgTX2/o5iVju08QhG+6EEuMsPkkROw91
fph6U8sDzzi+zcHNC4Bn2dTHAeS7IqZj+xfmU/sXmP3rT+130Kb2O7TR+92b
wgf4ROEDMPjgqTGGJ3iawhNk8EQoPoHjHfih6qqqHWvtk3B2V5qUEVl3S6sB
l+8itvhoRmbJgYkB6MSqmzmJ2GP90+jrd3K+4W6Y8+qliBUUxEZ+Gj0/fN7Y
b/7lQAaM/z3jk+/TUNj14UWqK+EFnXk3L3+cmwarFq3mdeoOhW9DInqvh//B
Wyih8BYYvN1O4TP0XR3DZ2Dw+ShrDM/BsngMz5HBcxr/cQeF/8jg/wmBMb5A
iZ4xvkCGL2opfoHpFL8Awy/PKD4CLoqPwInmI5q/IJniL2D4ayrFd3Cd4jtg
+G4yxY/AS/EjMvx4juJTKKD4FBk+pfkXaf5Fhn+XLIyc+0AlDKefX+hueyQV
/Ksmeu4ldhqvtTBd9j4cExJXCrF2pEKZfcFBYTI+7dhBY/4zCTgskTR++0Aq
pBcuaOYgetR6LJVi1NNwIM3m7FT5MPi51Ke4iPg/vDZRUePNJbyUUfNOZtEZ
mHBIcYolwYFOTbybr5mH94J98xUzfdH5jLhwNZlX9QneLYqFGTj+5IZL08h5
spjXXNKL6G9rj70WejMBXz180mdurIdnbNX3uZJ4ezVbt9zteyJGPc7Rqoi5
AAsVrxRMJuPLdgYqXnlpDz17Zi6WD4iHM7x4Oo2MhzaddubqlQfZ30K77Xcm
w8Inmvt6SBwujAVZn2o/nLDx2PXZqeGwrjV1KIKsr/SanlCDr9G4z8Lq9c7l
54H76tdN9mS8YvuBvA0bE5Ansqzs8zx9LJIWH59B9C84t7fiuGkYZjcK1x07
aI3Lpd5EGhH/z/tmpVCUFoLWC8IC/94wxmWTRuLqyPi5vZeuGxh5oQsH/0Nv
U1Nsme1gbkzih3dcj9f2DZG40995914uBzQVttj/inzXQ+TKdOOj6RB6LMv9
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
QSszTglNck8XoOWr2OS/bdv7sPNyPk40fyzqy5WMZzy4hzcQ+X10XVs4W10b
73vHhyYCZVijOc7/8YVM9ND71KBE7k0HaPlINvlV30zKz5L76aBdk9uZkXgM
r5bPeTDwvzq+UjZ7rlPnB+TaPXZ+QOb8oEPX981mq+9b3rRrg+L6IgzfqX7k
1KRwlMoujHhH1reErr+bwlZ/pxjK+/rVhBIsv7VVQvpPHG63zN2x5zULyml5
YTb5aOq8hAf8x85LyJyXOul77h+2e+5D6n4B1X5j9wtg7hdFdF3ba6pOGZk6
5YOv7k0LPJ+B5xqbj7vpJ6PiJM1vsWR95ek6vjS2Or67FH/BJYq/gOEvXbqe
8awHVc/InPeuFzlKPCG4E6TsbT9tMAcDNvg255DzSR1dD9hK1wNOp+sBV9y2
8PiZUIZ/W0709uam4e+24a5csr7VtH/msflH0B2lDs8qxFMS811u+sei+nLZ
7InkvHSQrnN8dYGqc3xL1zlKOfC6bxFLw+16Gqpz16egeeuCO1lkX3TTdYjR
dB3iVboO8dI+R91LO/Jx2ZbCXzKS+Xj6rqqi/CtyPqTlU9jkJwuzqlmz0pAj
7VryykemaNlexQtkP8rQ9kx0/Lc9nqvnXNs1bIdVxoK+LXbJUKhqfDWK8MtK
uh6zm67HZOqp368UeHfi6WWc/t0vz60nDxV3udjzkXPX+/+wZ1jtyMvv8lFo
Y6SzsNQwAfuPiqe6EHv46PrKbnWqvvInXV85oCWuuP+vN7q+fZWVKeEFFovF
nXtG442uA73PVge6lLqfwlHqfgrM/bSXln/CJv/H/8/NbSudsO/HcY7jwWfx
w/GrfwtInAjQ9vxls6evqaSm8HcoKEw56qucFQ9tbk4L9Ij+j3QdKBdbHagb
dR8H+j4OzH385X/YE0rleVCAyvMgk+fRoPIA2ELlAZDJAxRS9x1Mou47yNx3
ttL7JYltv3TEOzy1jQzFQ0Zcge9mFODa53ITvUnczuGbZbB6agAkaFrqrneN
gF9yUvwnyH5sputYP7PVsQb9+uN1k9yHo4dsNIyWpsBuufIV4sQ/N2j5r2zy
QieCK4uNvLDp1PO9CkczsKvwj+BxYn/IsoOzQ06mg4FlYL3pMXus4bvScYjc
4y4Kb7KwnVEErSfvTussKILLmb8vziX7sYPWz2n8b/13qLwT3KDyTsDknb7S
9bZJbPW2oRtzG0pvlkCVdklf74MImOS/yCyC7KMf6kndJrZVcNj1j0BeaQrU
WSytNCP3LBsqDwY2VB4MmDzYAK0/iE1/JZWXgw4qLwdMXk6crvPlZ6vzJfCe
OTL5Kiy6vCc3V6gI2s3/wIc8wke1Zb/S3teCX31DzKKiAmhIUTuJNYQfqfwh
cMmM5Q+ByR9O7aRwtZ8NV2dS+SIUofJFyOSLtOo/6Hp11ICgoOpeSfE8OGS6
oZ2vkQUua3aHLOMvA2/HD2FGnenQaTQUZdlDzvNUHhW4zMfyqKBK51EDqbwr
yPKM5V2RybtaUfleeLR9LN+LTL7X5/hYvhcKqHwvMvlezbqxvDEoUXljZPLG
b7u2B2zx9cDYdM1eSUEHONqYKH2C7NPgnMg7XdUxOP9Twynj9B1o3Lk7ePR9
u9b6GTYFFcH4wWuPurG1EmS2fCl/Q/xTUb7OeCTcDmyTb767FkzW/XDOtwmj
uEfXqb1lq1O75RSqbPsgDevlL67MMN8KnMLSxY9JfM5uSVH5OCMLb5Y0Tl60
xQeP7T+0kO87CyZt3Px3XcolXJKY9PN1czDm7Z4nmkL8bGAaMa2kLg/71n06
/7AlAh/x7l+9hZwn+VW6eDKP5+LloK2mua2hqBuouOkD2aeNA/WKJ/R1ULbz
Z6q9oC1eXDc3/iGZbx5dJxjKVid4fCgq34X3Irauc+usRXfsWJQ1pDFaj0bX
4fKy1eFWa3Wrf3p5Fh4+cD//STAKYiWXPn1Ixl8MB0f19/viIs+o7inbg3He
5co2OeKfY7QefjY9t4W8tGNCLuGb4u6LkVaRmNEtK3WL7IsNP48qdOumYXGr
dOZywwDcG7PKew/x23fdnGXjbCNxjcm54LlFIThxnO7ITeJn7f/QP+v57+66
NZHYLzot4wRnOAayONa7EfnDdB3xarY64sUTZXe+M49Gpx1c6poubnjRKzF6
9D2GuRCnkfQrMh/dKbMXF57DzkX9Re1kXrHS916LKcShTPwcw8KV0RinJ1F6
m+DzMVr/Wjb9FRERESu6fHH7cw6PEx2u2G4lvXWQ6LGk65f3sNUvy/8Zd+4v
SxmCz8+wsjb0hs9uX7hH67bme4Q6H8t2Bq55C09PIXjg+efI5pvEzv6tGUe9
dnvgJfElzcsv2eEW597Uk6Pvq2n9qmz6dz+J2ClWfA7P3eYvOt5mjVILf+W3
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
U9XO8+oigTArv9OwQisZZ8bqPBgdn0P3JzxO9yespfvvnQ1tzTzACoOFPX1T
jc+5Q1G98sTR98MqtD2SbPZ0dY44b2aFwttpiYH9MoYgHrG5OuT/lS89/E++
9MMXo/4HN4IgZpsHZ8++RLT+461uRvyTTvdFXMLWFzF5nVxVqJIr8MxPH/+0
LRmXq3233knkk/+jj+KlBYI7J13xwwIrnlaN2QnQHdN4/DORz6D7EMqz9SHk
ps5FuJY6FwFzLppA92N8yNaPUXycwjI/Xl/c/OHh9gHfJPj48KPk+V+jdRb/
7mfI+LOvyW/uEi1/+NzhnWotZo8ThSav4//L+Mee9supf/7/gir7CzpKxp6Q
OCuy54NsIHotMawYvX89Y+vTGET3abzjZxxrqhaM89a/89/TEgUGl7KDkNhp
9x99FNMWBAhmDjljltRtl7SqWLAyVyn/SOStafmFbPKmR3atPVHhDr0/Ez83
lYXjTP5ZtW9G+/nQ9hiy2fOgXP6GxWs3mKM4Qa/YNRaPjrvC85Ton033k+Rk
6yf57uKaCT8veSPXszrZU8FhIBiQO6uf6Lel7RFjs0ddfGHUzeQg3MV1fr7R
a284nx33zJh89wDdH1KZrT9kJ+Uf2En5Bxn/pP9HH8ud1PqCPbW+yKxvPC3v
yiavaNFQ+f/Q9d5xPf7f43+kkC0ZkWwhM1TWQdlSUiGVpKLSVCqkvffee2vv
ojqEpBQysislhAohGf0ez67H8+3zur4//16303mex3msc07Xde72d/1QY9ee
N8b85jB5nOCK2//Hnr0se2J9Tr6daemH55VyMoe0nkTsGL2ak6econ0so1h9
LGOY9QwZzHpG7nqOofbYs+wRvH9dreJsCIy4YTrSRioKs7v3vnjX/7c/Zwur
P6eK5usPYauJS9I7F/MkRUGsXtNAE9H/ifaxjKF9LBNpH8uJjH6cyegHrv7U
f+yvXad2fZ5j740PTizoDZ8UC9elygU0OfuF6o9l6f+2KTPcyiQQMxcK3ozV
cUXvmbjyN6cOQ/2TwvLPlH1rVDf+IPYEpsS2zQ/Ercrempy+E2dp/8/9rP6f
MXu9hmRODMBQU+vRHfKh8Gz/l8vhRP4rtSeCZY+qLkL1kjDcZ3vSWzXSDzoq
g29z+knepf08k1j9PE9OyxTfetEPl29+NO4c2ZcLVk5b2Eyea9G+o9dZfUdz
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
0s4pSPjFwVq/gaCDCoHQ+3TJlC1E/+XhpusTsuLB9UrkPjUlUxB20bsmQOR3
MXVOuMDUOZFb53zM1EXhFlMXRW5d9DxTj4V4ph6L3HqsIFOPxb1MPRa59Vhh
pq6LaUxdF7l1XZ97hoJVE8xhQmqgfFNtIGTqbhh9lMzLpFftMU6pTqhx7Hy2
fl8KHBGyjlUm6/xrecmRpUmWcKLR0XLHjgjQWvxOazGnH+++yUk4LhwX7/it
M8E4GY0kO++rkfN5O+UqCnT+l6s4yvekyektvlh/NOvagh2X4c/ETwO6nH7d
daMzj+3JxalWci94ZQvhw7dfcXEPu8FbT2LM/OYSfOwyat6WnxlgdfOS5VAi
b7p3aeVrXcQclUyPndtPQZGFltzkqm54aPNxeYUHouuk8ooO97PY5clnfvIq
udc2/H4+foIOGsvpv1zjWYoLx5wz2PCUnD+Ua+lNuZbZlGvZsppntcfzULCQ
VTb9vCMYZCvVbYdweIKUD5tA+bBIOZIbhd/NHr3SGsr7PhoM1bSHs97w3Ivz
/tuNNuOnV8KgMzFp95HrkTAs90sDJ792ZHFmuXqUlm9uzPxdgZpHSpTyJgWj
tDlYNt0g+8tITMQ67xLerBszVM41BCdOvP7r8D1yzneKdSsK2ENK9PvF1aWp
YH/s2Lr3RI8t1Z/J0q94pO7+oXlOcHlns1KCaiKsOrw8Bck5qU/5tv0svq2I
z+br6R+L8U2p+LH3pZE4zTv44zgSl65yv7Rpr3IJrj5xke9CURzG37af5vyk
GxpmTNeU3xqE9bm+6523e8Il80ZbznciOlT/G5Z+3Kv9aeVnTbyncnMVr5c/
yO1VD7vJ6XdKubqzWVzdtuV2x28czcN3D2Z0wcQ47P288dV4sh+TT/en39HN
xL3rr5t5fotB+epLtgkkbnT87XJ4hL0Ojjr5QkLWyAbCjmsnVg381S/C0v9o
jfKa11rn8fCIVncx7+MYbb/l4k0iP4/yfAspz1eN8nwVDVT6ditm4Ra5Wj7R
nASUeiczagp5Pu6PT8Xp4iTc3hxw3W9TOt5+n2alSOy5bR2TvMwsDu6nNyYo
dKTBG+WB6YIcfjTl9tJ1CNx1OCVcckQ4vx+4VH9bNTfHCz6PuWbI+T/UZsov
3sDiF6/JS1vp3JgEsj8sRm8i+e/42rk8U8nvLqD831wW/9ehNmnzt1wrOBb0
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
P8+m83KbNS/dH7/Ku97zBXcJUQWlR9GQenbsATeynvd4VuzbxecNIiLHmxTH
RgIP1K3dz+EdUy65CYtLHtLRm46TiB9fiQdI80Wg/qrk6gEOl1zyhGmiizOa
GcX9eLM4DDftGfguw+k/T7nzS1nc+Q8PBAKSevRhwZ09yidNXXF4wuOtBkT/
auqfvLb/+seB8uJNWLz4H0ai2iVLQ6H50E7tpOlG4Np6xOkx+d1llA9+hsUH
j6dc9WgWV134eVplsGsiDKxqff5YyhX2+3t0OJD5XUn54DtZfPAwyluvY/HW
BVvk94VYJUGutdjukOYgKJwe9LOSrB9DyhNPZfHEm2LkRSQ1o+G3lPOMs4t9
oD61cQfnOxdryvVeyeJ636Zc7wgW1/visPH8gi+8Ie3TtJuB2nZwhndc0wtO
X8RSm2nnV0qj4OqGEjEfN1w7eu80DgczeXYPmJP14fD8s9OBy7IYdNXoLWed
rKJ+s2f5LcLAS3nj9AR4KLM8dF9TKGgMa9JOJfsr9B/c+VrKW29k8dabhPaP
+iKXBksn8W3wOh4N15a+/aFFzoEb/+BTy1Cutz2L66268+eKU2XJ0KDdum7O
Dm9wXm4y2H/yCOV6F7G43gYLb7UmSkaD6IBB09VdB6Fao2xMGpn34ZRbbcji
VhcUep4ekeoEYhm38gw3+2K/sqR4PHl+i/r/NMv/HYcYnvVYFs86bO8Y+478
Uxgx7NDjj6HhOBJSB45z3ot+lFuxbMAPREQTpB6LhkG9YH9PGLGnfl0+tkfE
wFR3n+fTCmKAzzqEL63vL0/8Pcs/7+wNdMIjIqG2Y4nlI9dI0Cx/7j6OjNeK
8rJPsHjZZy7MKN431xFuRua+29FjB7teCReokXk37vDWFV9sVv5bovqKebvB
//LT8Q1P+J1Ou6EGT19kWZAjJq+Iucjpr8JD/abH8tteymW+wOIyv4xouDox
Ngrfp0w4uGVFNPI5+C6zIuufn3KZ17C4zPoPxDRjv0fhQLDPz6iRsdg++WZt
L/GD9j+4w2KMP3Eq40/k+nPBvkH/w3bG/8D1fzYzvxh4cXB+gTu/0yn3+efM
/3Kf5/smXzLkicOCw+G1Ub2aOMXHW+An5/yk4z3HGq805S9rs/jLAY9X14pa
pmBWYO0Z8ckBmOfaX/eA3DsmlC88lsUXNgu1q5FQTcOAS43Njy+S+D17u/iu
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
baK/yxHc+qdqytiPhXD2db6vA8nnBzm9RzzD6T2CQO9xUs726e8vOeLVW2Nz
efal8EXp6TWhxyR/ek98knEwGA3P/Wxcd6cEbqhtneVKxg2LpDavN4jBl/oL
v98ZmwJ157aHppL3Iq7EM9tKNxHlbETv7/vsjDZNreXbST3geS9nTev0JJz6
dOpO3ZiD6P5nWRPfb0iu8VSSv0QiVqXqmnW9D8ApA0RyU8m9ECFxT17lfTw2
2Dt3pJnH4/UnRyVVSV2tovGt2/1IJD4NuDlhct9ofPqk1Hs+mWf4ki+6Qp2B
OPrELRWjcWH4fu++hY7kvLnefjRcWT4QZ43V6dYfHIR+16XEVcm5GhKjYXPc
MADrNc50uEv44pkTa56+J+N71H+VHC8LwR19Jsjq7PJHr6JIhTFk/JLvAmUt
sUgccGW90L78AMyG+bUyZP49b2ryp6jG4fzhIpaXajwxe0Vnqw153+Opj8wf
6iPzgPrISC6xbRWvtYLRY8tFvpsUw82h/fYWkzrBuI9dk7aUC2aqHtm7XKoA
1u1o8TR49+/9Mpn7bvrRlbF4deex6nkDgsD91btRvcn3WlG/mL7UL+Yc9YuJ
ofsygdmXeRnRz967ROGry3kjDrxxw1Gv2i1OkOdqf7tx/Pb1gegx3n/g0yde
uLd03G9+fNqEzgQM/OyAzknT5MbMPY2rB44at6bH9+r/9oW507Vcbo67PsSk
HLhYancKq8aK5pSSz7c9eXIh79g+eKcvdsq0txeeaWyv5eNaw02qqgds3w8Z
wxbUdNUEotAKBacIvr7c7YLC6TNIPnEx+BkTFYyJ80wiJPn4Crovo5h98Vh4
4fmz5T7Q5CLcIGoeio//GL7g/248U3/xQOUcQ+iULtUd8S4e5yrEhdj++uvD
0kF9WMyoD8uI9K3L/d9FwrNap6KTUgkgYTemLobkn/LvCuOGTFmC9yZIrpKL
jCJ1revVfny9XOqzk8347DQkqly8JmaNsXD4qmGLL+zK3z/gPd83nMYniomP
JfXHCWb8cQqL79vZbTCBZTceXNn50R3crfLua3T/9XNh/VCCqI9MH+//+sjY
SS62TU0LhoroTxtbAwJgXR8dH5k//HqV80M5wvihRFF/mXrGX+b+L73J/l0J
MMtGpio+7xToVHdWZ3b+9XNxYvxTRnksXxNYEA4f3QfGSo9LQtRYtOYlea+/
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
coWaN2aXRpPn7aZ8ohSGTyTb88OJ89KYVg/yZ/C/30/0Kd9qIMO3Gtmcf352
tz8MH5+4qHV8ODQO6fwQTtaze92vuUfPpcDt/e2LJ671Adc5Jj0+L/WLC/FZ
ZCwM8vC9P6ooFvrZhPZLJ/vbSXlYlxke1g6bYXjbKgWsDe3HnA/3hBjDlZnS
5PN7/C7NGmKWCLUpZwzLjjrAhWjdVSYkniayde1JC2NgV/eRlmpVLbikc04y
nczzk/K5Whk+F8/xiEFEZBRcfyFn1ewWBXoV9z2kyLjWi1XL1yTGwpT0/Ku3
F4XDfZ+tm8X4Om+U/3WL4X9drBs6yKV/IrxN0tsBUkkA99o0lpLzv8X0bK2P
UhREjir/9UvKCWyszwyrI+u5UOxl1j/NBYZk1RUYrfDDzu0LZyaQ+E/j4okj
uHiiIJ4XNlR3HQ+Lh6KA+J9WU6NARjn8fROJw1HKLzvA8MtuTB6ze/w3d/Bp
t9n4cIozzgu28+1P9qtWSyU7BjZin+1dsi6bIvGc9Qtlfp5X2yjp+KLwKPr3
3dH6LiwCRSGtm+/350x5bUcYXpvPyTGlmyc5Q1NU/uu1H06B6hPpot1k/v33
rh9/VRSGZ0mHtbPbE39Hlt4ewcc5Uz6XOcPnWrG553tBhfteEHzvv3hwXxvb
hF3M3HFrrx9R54KdMWVubCYfX9cuxPHd0hm+WwYXZwzI7IkzCOLsnNv/yYwO
a7C7vDRlioUV5vomXufju7Kvc/y4qww/bjnlx1kz/LgbkdeqB8dF47PUQVor
58ZgPye/2dYk/jJ+KWVGveIxTDuiPvqLHo7w9RH7Rd7H1L6HVskOswfT8tDR
sl4h4Grb/KmTPO+SX5VNM90ssfP3jia39hC86//OpDdZZ7dJlvxGg3icZ3lK
t8EgCSNnCg/k19t7bk/Ti/sejd9DfH9Fi8bhs+GX67+QePr14fh6eQxfL5fy
0UYa/ZePlqzgc1NthxtuXOIadV7EGIZr3i3i62HOfrB/bIiwJ2rPu1tdWR+O
IWddH/P4OpOU97eV4f0toPy4PQw/zrd1fv14q1TMCKq3nDk8EAvcOhtuk7ru
2mW/+AV6Sbgu0C1ou2kA7nxavY6PbyynPLhuhgenQXlwzQwP7msuxysMZHiF
0rtazlbU+mCkuLz6nnQn/KwXZ9XQ9W++oUnYqSsKO9PRv+zmo9bMGIzIVZmp
St5rpRLJhsqAeAw5N+4G3gpAuUFxXlYkDzRSHuJMhoe4eZ13sEVsIjre1fow
9HsE+g6wm/CJ5L20YTnnw4UycMOBB1P2zIzH65csM2RInXlr+8dfO32TMPnY
tnm9FEIx1H+RxUjyvDzKZwxg+IwDKW9RkeEt6l40HVhLzkGOw8IcLVVXLB69
YmgDGX9ZOHnTeuVkVBuYrm2zOBIt7pZce0ri/yjirmuIfTL2VirMOhwQgtod
cmtiyTpHZ6uPEXWIxYe3VewPHI3AUyXjRVvIebbxTG5alBWJRq31qskZAdi1
6pJPL7KeCMqXdGL4kv+vrvOO5/L7/39LQ0lLe4iiqaWi0lNGi6SyskISSVbZ
W2bZe++RLVvpKSRRSCINlRIqs9D2O1evy/dz67r93rebv87tup3rvM451znP
53Ee98fcC8Hpjly+2G+e0zs9cSPeqB0W+U363ydvvqvh90TcdHhAUXmRJ84v
s9lD+WU0NjjfqCpMROvZaZf2dfuixR62z5tI+YRdSouNOuJQOiJO+vIjd+Sp
XCelQ/o/2eTbNq0VXji/9h7fETlz7GlV4qDWgUT2A5ISdwzxrLP+Vva9bvC4
t1ieipe88v/GUZDPiqNgPI7KZMXVUMeKq0GPjqtlaV0nMHSdZv7Tvzybbglv
PsUf/TNyBTgzH2SUUr4tO3sMB2WS4MfPhX2e7f5w8HNHvBPFBRppixjamQgz
dcKap73yh4qMhfLC5HclCK2+a3PbE+Fh3nfxNxF4S19rggR57wNaHyrL0Ie+
XcOTEn4uEJUEbwp2sBvi0c1Rr2Sp+UzrQFUYOlDr5qMj/Mkkjg9839vzJxi3
VCYGepN6NKwvc5qpRuOluSlqF5f7YmvlhGPU+Y8wrRvlZ+hG9WndaLDFv7rR
JSvdv0/7tgSHKqOf68R4gkSkXq0MKU/jPHyjQ9YGvm9c/HHUygTTl8d4FpNy
iUvDM/aSdT+7Xmow4Uwghu8rSRCjdM20/tSeoT9NvTLkOLrIAtsXJufJTPVC
+/6yxTNIPREW80bvFDvinc/zbbw6bEBcoEmeWse+66/yGxi+CpyNx3GaTTjw
V2YFNJN6Yll5EDiw8iAYz4M8aX3rR+1/9a0cSWFlp8Vc0KBOzNb/kDnJk7J4
DCg9FK17bWToXrV+nP86ujkQ+u8u63y/6Apkhwf3UedLjq3z31QdvwgSZ/Ly
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
6WDTRdrvSPMq9Ri8ylCaD2nH4ENesXn+ZWRnOHxTOWhun+AKV04cL6B4Jgdp
nmc0g+f5mV+yUf+XMUzN1j/2x14ZTG9VzaD2NTOOPVbJKYFQEDkk/czPDw5P
VvfiJuOoSPM/pRj8T7fY5RrHfgbDwtb0s5ucXUD5ZsAsG/J81PNLWjusyHfX
X9X0PdMOipa+KjYk/RZaLKTtJhsHVSfX52oGhkB814RFa8g8f/ZTY43vnzjg
seQuj812APW7P+6mUf4FNF/0CoMvGtc37ViDeQa8bij7ImGdBAFs0w8vJf1T
OW/mueMaBpBewv7h7Hwf+H5Qcv5E8rvu0jxSVwaP9KtGldqDp4EwYmCrtnHf
NVg7E9UDqXn7vOlIwWAAQFJr4+EbHvj1jKsbpduSYS9pef8zDCzOnU4ZOu2F
ebZvJVx+/Y9reoHBNV3qsV/SPzcU+t3nRC9dmYB4Skiyi7qvS3M7NzG4nWyW
LsLecSlg+eHkqqBLSfBii9NkLpLXrOxV2/xkTxHIuY8occ6+CTY/9WWLSdye
ajf2o9OkCMQcM7q/haRBsvR6vitNJM4pFkrWSPaEe0uvyOZPSMHDWu+yppP3
7qZ5qpYMnuolmi+6k8EX5aR5qj4MnurrSrc7bUUuaP82wGjG41BQ/Sy8iIf0
j4enf2rQjWJoW3r68ka9eGjEab3+zf2gMhQcWpYaB5P2d5l9Ec+HUskDv3RI
/P+D5qyaMDirZby/Vao35gK8KTyQ6xMDhYoCIcmkf/Y1vZuyJq0EJF8lzqwu
TwDrpHjdsEYSV1+Vvt5bnw3Lgz04PUy8cPY9hbpTZL+Lo3mthxi81hy9xybK
95JBzN82u2tTKXQvPnX7I4krdKY+OXxhXjJ0w+qRPS9zISj4V/D59//ju+5i
8F2tj1XzWzTlgKSsl/z3VeWgrz3k+i6D7MsiMpE8LdFQ/aBdP/ZrPNo6TbRP
I/uOppuhVbqCG0yzmJM/eV0Bmidpphq/64dZVX/7E3xY/Ynj/VklWb+AfUsm
bHva1qA4Pw/k2wbr28n+20zzYycz+LHsmTZX2peagVj+7uQD+wrQ4M7R1iRS
/6vJIusmTzqOf04oruhdUIKb2F0OB5F1o3FP5k4vF2tYw11b4a1WiGymk0tt
SX5qZbllX0JeCswqUxFtmRMALbvnPqgj8Rg3zbN1ZfBsOc3WlOiUucHdTFNh
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
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.09259458092137765, 0.7486122776543305}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$5044, $CellContext`qVec -> #]& , \
$CellContext`meshSize$$ = 8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 
    1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10, 15, 20}, "numberOfMasses" -> 3, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.8200836820083681, 0.1673640167364017}, {0.6778242677824267, 
      0.6485355648535565}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
     "pointsDataTable" -> CompressedData["
1:eJxdnUtsXEd2htsSJdESLVMUJbGpF0mR1Fsi2Xy/urop77jKTtvJDCdZJYA3
2Q2XWXgRBHkMM0kwi8DIcgBuJsAA7EU2zigveKXVGDBAwICBsSHDI8WOHLnP
953JvQSE6+6+99TrVNVfdb5bnvzBn/zBjwYajcbJN/+23vx7+82/E2/+7fX/
bvUa3//1nvQWWt//3ewdfP/39ElcD670+l+/2In7GsO9Z9//fbDT+/f+fzR6
fTOzO72/79//0VHY62Lvm3bY6/Z+3b9/qIS9DvYul7DXiXRat3p/9/39zSeR
zrMb8f3hDr9fiXR3d3pL/c/vRvrH3d5bYTDs7nd7v+wn/C9HYa/b+7e+vW/b
Ya/T+9v+7++UsNcJO3uXS9gr5O9WpPv+Dr/fiHwN7ZC/y/H9h93ej/v/cb73
3fd/7W7vj/qfXx/1k3lueX/5q7DX6f0wfm+HPT+fj/Q/LNovYa9Q31Ncu73X
/R+uk6+u+SedLu33DtdO7z+i/EdRj53en0f9tMNewd537bBTevNRvyXsFeu/
LPavbexORblnu72f9j9fx5+yfaM9n3bI9xD+VHph55uj/vcflN5fhf+0w57l
b5R+u+63yd+7pd/uh9th9+BK6dfz8Rbln6L9O/jf9chns0N+L+FPBX8ZinR2
C/ZeRX6etXn+43aUw/K+Ff7b2ia94RLtvkV5x0rY2aS+psLuc8tzDX+yPi9F
vQwV/Pkc/t3unejbe3kU5d/u/WU4Urtfb4dbvR/10z0R6R9vYn+4/Kxf3k3y
N1b67b67Qf6mSLfw+7Ve//6DNs+P4ifb+PNZ6mkbf/76KNptq/c//fb4TbTX
3ib1dZLyb/D5QvSvZ+vYH4v2bKzjD5P093b0m++uUn7rdzTS39+i/t8Ovznc
JJ9fHUX5N/DXT9thbwN7J+nf6zx/AX9aox6a4c+Hq/w+Sb628OerlN/2HcVv
N7lvkHra4PsXMd4crNM+x/SvNco/QH9aI38X8KdV/K+JP61Q/kn82fq9iv9u
kN+Lkf7xOvkbpD7Xsfdl+PPuGvd/Fv68b3lPRfqHpjeCPy1jbzzas7lMfU1y
3aA845R/ne8vkq71e4Z6WsXeFzE/NFaZDz6P8bhl+qdj/Ntbxv5IiXwu8fs4
/rSIvUnKv0Z9j4c/N63vkfCT3VXyeRp/WiFfn4c/Hy7THr8Nfz5eMv+U388X
8adFnh/Hn1p8nqD8q9hr8n3WL/60wn2n8Jtl+uFn4c97S/jfl+HPB4vYO0P5
W7Y//alF/q4yPi/w+wT9aQV7Tcpv+47Qn5bI5wD1uUh9HTN/LuJ/L8Kfd1vU
72D48/6C/QN/mqd8V/GnOco/wX3L2GuS7yX7J+navgPYsXyfMj4vkP5XjM+W
923607zjB/1pDnvXqJ/H2JugPy06PlF+07tAf/LzSepzgXb8JPx53/S+Rl/M
4Y9nQ988e+z4Sv4eOf4yXj4gfxOUv8XzY/iF5R1m3JvnvhPkw/p+zvhseV+2
4/5H5P9czJ+th84/MV8c3Kf9r5WYd+5h7yblX8D/1F+Wdxh/muP+t5gnHveW
+/Y/Por0H+J/r2L+aj3A3jnSv+f8jD/fJX/XY37fu536NPI5h70rlN/yDlMv
j1KfRvoPUp9G+vdTn0a+71K/Q6R/B3uX8Z9Zync95tNn06lP477H2LtC+tbv
u+TjPvc16O/3yD/69OAO9r7Fn2+r30h/JvVp2EO3N27gz1OpT6O+HqQ+jfze
S30a99/l/tdHUf+3zV8jyj/r78zv03w+T/mnUp+GvUnTx79vmj/Sv4s/Xyb9
O6lPo/yzqU8j/Rnrh/Qtb6OoG6hf0p9IfYrfUO83YnxqjKc+jftv43+XSH8m
9WncP536NNKf4vmP2o7zUf5G+RH1/h36NNK/6vqp2G+oF8aD0dSnkf409i/h
z7dSn0b6k6lPf0a/VJ/G79dSn0a+m6lPw47rgjHqb8T+zf3vpj6N+6awf4n0
rd9zpHPd8eUo0hl3/GE+v0L6J6j/Uep3mPSHU58uYJfxj/oZSH1KO6Y+ZV5J
ffpjxknGX9Y3l7D3Cf1pxPGb8fYdx3fKfyb1Ke3q/EB+vzpSn6LT8OdR0r+c
+jSeu5j61HEpvkefvrkvvh8g/ZPYvcB4+IpyNMnvZ9TzBPX5i18dVOphFP+7
mPOW+rSBH1X16Snq6xj/ec28OlDUjdQb+fs41rFv9OkJ6jU+Z/201aeME/jz
RdIfzKvzhOn8mHajnMwPn5LeqWK/C7sjlP8L2nWc8ehb+2WxHNGO49Yz/nyR
ddY31O8Z2ulz2ve3Rz9nXEYftq2nuJ4m/ZekN1L0c/oB+UEXNSbtX/6e7fCM
fhjpPad9T1Nvz9voY/L5ol0td4Nx5kwxX/gd6Q9Z/qJfxe+T1M9oUZ/+BeNs
+PMI+ySf076n8Cf2cd74oX5L+1EvZynvIPPVML9fzCvjIumzz7I3yfg0js5v
4s9ft1kf6S+2q37EuHt8FPPdeer5Bf48wv2DpH/JcYjvx0jvKulf47PtdbOo
T/+u4ocX7E9Fv3IcoX/jz6PZL9ynYHworhu8L9J3nlIP6seT2J2iPcdIf5j8
Xch1CeOb41GJ/ZLfHLmuZHxsq/Oq7TaRfmE9MP5i9xb3mY9pfh/Dny/xvfpr
zH6Bfr1a/gY/D/+0vC/b9pNI5xzlnyraje+nsX+NfM5kvUQ6t3OetR+Gfww7
X1Gut1yHlEeMa/HcJOm+ws8tL/uVrZn0o8jHrDqD9O9wneK5e6R3JedZ9IHr
+qI+jftvFfa/GPemKf83zKez3D/E9Tbp2I/uFssZ39/PemR9UdSn5pP9PdKf
5rmGeqgwLjD+3CZdx9k7pKc+vVf0uzDzgOsN0n/I87brY+pRXTJDe52nvWYp
12vSv4O9n2/Gc3f9nfHnPp/Pc9/DHGfC3iN+Jz/NuWK9xzAyx+/sVx7ctnz0
r7vk91vmhXvln6N+SN/yNrg+wj/epfyPKfcVPs9h7wb1Np/9LK4LRX3KeqGw
f+56gvZUnz4s/xT+Q396rH+xX2F5GZeb88VxKda7pn+T9fsC+aIf7Leoj0uu
p8jfOddb9h/0+1xh/Ye/zBXH8bjO5zwR1wXyN0Y9md5NxsdFnrvl/k9Rn0b9
P8af0ZH7c4x/v4t5dne+/GOMP9G/m5aPeft4QV1K+VvFcSzsLZI/xsndJddh
kc/mcur6uG8efz5Le807/tK/FyjXJ/hPy/Gb6yLXC6S7lPNWXJf4fYJ6Wi72
47C3wnXU/QrnH/bDW+T3q9Adxy32BT5l/8Lysl+5v5Q6Iuwtu87An0xvAn9a
yXE77K0W9Sn7Ofiz+6e25wv6+1L548gY/rycui6ulneEfK2U6v7pKuWdIB9r
fO84t87v7p8ukr8z7ActMd+jg/eX0eWfsf9leqco/2pRd4S9VdIZZ395jfqe
YL9wneenqc+Noj6N/C7jz2fQ9cvlf9GnYWel/Gf/qk4zffdP11znUf51fh8n
XxtcnYc2uE5TL5vkd4T+tII/n8afVov6NKp9DXtfhD8fr6U+jfpcT30a9jZS
B4W9zdSnYW8LezP0zy3KNeJ+Mu1zivlirUQ8z3WS9fsl86flVZdvpi4Ne5v4
81W+30p9GvW2nTogru1S0afNderD/dP18oeR8fDnw43Up1H+zdSnUX7LO4o/
bZfq/ul26rKw13ZfKJ4rJfUp8QjGv5P402Z5HP0b/b7FOuErxuct0nub63bq
07i2yR/6tFlSn4Y/l6JuiPyW1KfEa/Dnk8ZzytfoU+I97PN9TfzG8p3FXpv8
Uj9PC79fi/R7hfxNxfezndSJ/ec+6KQ+jfu28ecT+NN26tOoZ8v7Ev8pNX1a
Up/GfaZ3jXx1Up/G9x3um+W5Lv7Ffu5um/Z7Kz4PldSn/fvft35ftfvj0HPL
y35l6aQ+7af/YYd02K8c6qY+DXtd8jcb49rzburTaI+CP7NfeVjKB337HxEP
6KQ+jfa0/EO0l+Vlv3K3W9w/DXtd/Bl92txxnxV/2kl9Gt2mlG8jg0fEk8uf
9Z//F3iDTu4DEI92nyfS/6Cb+jTsdckfevDpTurTsLfD87P405PUp/F9p/yg
//k1ekd7/7oZ6XTx59fsv5u+69Qd8nuZdCz/DXTBE+zd4vsn5G+W556kPo3+
3y3wDaEHP+ymPo348g72GrT/TlWfPt9JfRp3mR769MMnqU/D3nvYu4299/Cv
6cjPvvzIBHrDz83kOeL5EeLv8iQDyXMYfwp73Yw/hRl5kkHGQ3mD0ejnu/Ik
08Tf5TcmkueI34nPDe24/5Y8R7TDgPXbW2H8DHsd9km+ivHhfXkS1vdD8iSj
yXNE/qZJ1/TdR+5m/Cme6+Y+Xrh9p+c+YdRjp3eyb++T5Dl+yPgZdgqfz9Iu
8gfu+7R7xhHoH/AVN+F55EnYb+h1Mv50EP0v40/0zx76OnkO9Hebbk18/lzy
HC3GzxgPtinXLebPDvtgxBH2bd8x5lvrdzh5DvcVGb8y/hQ6qZ3xp2hXeRLj
YfIkl+i38iTEHUqnykc9L1U+6n3bFz5qSF6nkTxHhY/a3874U+R/K/koeQ7H
zyivPAl81IHteSN5jrheSZ5DPor5LfkoeQ75KHkO+Sh5DvmosLeR8acYf+QN
bK92xp8i/t6uxp925UnOJ88hHyXPEfZ++St5DvkoeQ75KHkO7CfPIR+FfqHf
GAeyPS8nz+H4Kc9h/EmeQz5KnkM+Sp5DPirsyTvIR8lXwGvtbmX8KfKb7cv8
upHxJ3kO40/yHPJR8hxRfvYb9leTjwp/ki9wfb9c5aMamxl/inzLkxjvsX2H
kueo8lGrNT7K8spHyTu4vpc3kI+Sp4BHOlzP+JM8B+MD/d3P8lHyJC/pTys9
9Bv9yfK6vl9KPirmD3mSseQ5wh482548iXzUao2PWqnxUZZXPmqZ9pCPsrzG
nxZz31iew/W9PEeVj1qt8VGmJx+13DOuJM9R5aMWa3zUYo2PkieRj1qo8VHz
NT5qucZH2b7yUfIkub6vxZ9aNT5KvkE+Sp7E9at8g+t7eRL5qKUaH7VY46Na
2JOPatX4KPkR+SjLKx9leiOMf4+xx/q+JV9hXFqeRD5KfsT9D+tXPmoee/JR
8zU+Sp7kNOuYR8lHxe8Pc9877MsbyEct1Pgo61s+Sp5EPmou+Sh5DuJjbXkO
8s/8+SDjEPIcru8jXni3xkfN1/iorN/kOYxTRvqPko+S55CPkudg/4b079b4
qDvJR4W92RofNZd8VOTX9h1JnkN9GunfT30qz6E+rfIcg6QvX+F6eib5qLB3
q8ZHPUo+Ku5/kHwU+8/cN5A8R5QPfXpwu8ZHWd633QdLfeq8GffJR02mPo36
up/6VJ6D8St5DsY32mkWe58kz8H4mDxHfD5L+SdTn8pzxO/Gn+QNJkj/TvJR
8hzx/HDyHFU+ajr5KHmOsPcyeY5I55zrsNSn+E3yUfHcWOrTSH82+Sh5jsi/
+w23Up/Kc1Tj6jdTnzrvsL9O+s3ko4wLUC+5T6c+ZZ+8xkdZXuNzE6lPo72u
pz5lnzD1KevCGh/lPrc8kvXO+v7NPB33y0dNJh8lzxH5f5dyXeW+Rq475KNo
hxofNZJ8lDxHPHeZfacz2LuRPMce7Uo7pj6V51CfynPE/caf5Bj8k195nTxH
fHZ9fzL1aeTzFfuSxsM+O1KfotOSj5LnoHzZz9Snkf5Q8lGOk2SMfXPz/S7j
4Zd8Vp9+fOT6/lt0ygF+wD528lGUq8ZHDVb1afIc8PtvdJDxJ3kO9peS54j0
ruBPXzDP3cw4o/qUcSL5KMc962Gpko9XR/IclLMtzxHpvcV6WJ5juDgO0K8z
LmTc1n3aZ/iNfmr8KdI3bnGOfvScdnp5JM9R5aNekP6JYrsZf4rv3ccfS56D
8S/jMIyPjM/HxAVGe/v4hfUW38uxyEd9Q3nlowYy/sRzGX8yTsf4X+M55AZ4
T+WNPo16+bQtHxXXr2nvt5PnYH6ingb1k7b9yHwZV7HcrtMZFzMuFs9N1HgO
+ajX7Wr86ZTtqh9l/GmxUm75KOdJuRf2yRpyJsmvJM8Rn22viaI+dZ+9ykfp
h4Opo6p8lPuEn7XVwQeVclzLetJP4qoeNM5jPOxWjY8aqcWfrN8zyXOg/47U
LfJRjiP6bdgzPfl9OY3xjAt6X+RjpsZHXcl5zbgV9p2vMv7EfIY9+aipjD8Z
N16kXuP7meSj3FeN7+Ve7iQfRT8r8lEHjAvUf/Icxp/iObmLL/F7yzuY++72
o8jH7eSjwp58wyTP3U8+ynY0/hT3GWdwXJxOPiqem8n4U6RzO8c1eY54jv3K
PfmVq3z/IP1InkN9GvffqvFRM/Zf+V7u/zR5DvmouMqvqE/vZ/wp7DzkKh/1
KONP8hyMT6Q/m/GnsGv9Gg+7m3xUPHcv+ai4PqjxUaYnH/U4+Sh5Dv0uvjfe
z37lwZ2MP0X6pmf86X7Gn+J7y/syeQ7ml+Q5jD/Jczz7/+NA8hxTyXOoT1kv
JR8V6T9IPkqew/hTpC+/8Sp5jvh+KHmOSvxpbyH5qLjKU0zx3GLyUawnM/4U
9yW/4no0+ago/3zGn6L88hvun8qTwKcfypNcZ39DnmQqeQ71aWR3rsZHzeMv
3+Ev84X9weQ5jD9F+5neO8lzVPmoJa43kucw/hTPyZPAR+3PZ/xJniPS4f3S
Zgt7P9+Mbt9KPiraf7HKR+0v5bwtzxG/M281V7AnHyXfcRl/kSfx/VJ5km/x
38WMP0X5La981HLGn+Q5qnzUSo2PWq3xUWu5DmI/K/koeQ75qCj/UpWP2pcn
kY+yvPJRqzU+yvTlo+RJ5KPkSdw/XUo+Kp5bZnx8RX9aqfFR8iTyUaupu9iP
JH/yUaYnH7VR46M2ko+K/C4nH9XP1k9WanzUao2PWksdHO0vTyIfJU8iHyVf
IR8l3yAftVXjo1ZrfNRqjY9aq/FR66lP47pR46NMTz5KnkQ+Sr5CPmq7xket
0T7yUes1Pmq9xkdZXvmozdSn8hxVPmo79ak8R+RPPqpd46PWa3zURo2P2qzx
UVs1PsryqpvlSdw/bVf1aVOeAp2yX1KfEo/BX+SjNmt81Fb5h/5n+SjTk49q
pz6V54j8jSfPoa6R55CPkudQnxKvSj6KeFb5Bn0qz/Hf/evn6GXTP027FMZr
68fy8z5nQ35B/ke+YZrnOqlPo/zbNT6qnfo04sHyGqxz3y9Vffq8pD6NUdL0
xpPniPvR1UNd7M0kzxH+xX7us3byUbG/W1KfynOoT2M/2PKyX7kvT3IxeQ75
qLDXTX0qzxH5m+H9853Up8SDk4/q3/+iJB8lz6E+jfa3/LxPMGt5R5PncB0S
9uRJJpPnkI8KezupTyOfneSj5DmqfFQ3+Sh5Dtdtka9u6tOwJ1+hHpQnUb8/
qfJRe09Sn8ITVPmo0k0+Sp5DPip4Hst3NnmOCh/13N/ho4o8yVTyHBU+aui9
Kh+1300+Ktq/m/o0/NvyvuQ8gp3Up9Hfn1T5qH3TU58+SX0a9uRJ4KMO33Pd
yPgnP+I+8BOu7t/t4PdDNb6C8yWedfP9PdqzGj9tdDN+ij/k+3v4S8ZP8Sf3
X3v4m/wA/t0ljjCUfIXvdeHPvQf95z/W38kf8//TDvsmw/h3cX+5yFdQf+gf
+RnOlziUH+F8id1uz33Z6HYdxk3jpx3iy+xTJV9xgvlJ3oD393aL++/4TZv2
mOoxHmX8lPGK/PG+3IfaP9tjvPO9H/ia0nNfEv4tz5dgPM3zJeDnqudL7G/z
eRK/6GT8lPE891kZ7zN+Kl/B+pT9oJL7WrG/Z3kHiudlhL9cIN61nfHT0A3y
BsTjZvUv9r178iO83/i0kO9B2ktehvhpU97i2Pm2Gj/d38rzJeQrIj3m/2N5
jknWV/oT+1NNeZqL7C96Honv72333FeOfG4Rf/+sLV/B/FPkK9g/YRzzfI4m
+9OeH0Fc5FA+aTzSP7Y+LxK/3O753ma0/xbt+MWRfIXvsclXRHlPF/mKqC/m
/6bndfD+3u4a7UF77Xkeie+5bpE/51vPWyF+2pAncR96g/GF8yX21vEn96fW
fD8Rf5I3UI/4mfhpcyvjp5Hfzdy3j/JvZPw0yu95IJwvcex5IJwv0bS88sjy
HPLaKxk/9byM+N04kvxIEzueN8P5Ei3reyD5CvyX/cRV/dv1UPV8icaK77cW
+Qr6T5GvCHvET/f1pybll1+Bjz6WHxlIvsI4hXxFpP+V68Xq+RKHS77/y/pI
ngJ+vCnfMYFdeZ0x+pPlvUA/Wkm+L9pfnsL4qTzL1235CsbPIl8R9pn/D1q5
bxn25Ck4X+JYfkSezvNQ5JGTn8GfljKuEfVpeX/Xlq/gPe4iX8H6k/4kb4Ae
Sb7CeOVyxk8jv0v4CedLNJYyfhrllyf5+Ei+Iuy9astXRHl9X8705LXnM37q
eRnxmfMldj2P5Ar+JB80jD95/kkj+Qr0BeOzfMc3jM/zGT8Ne3PG12i/x/me
YuRX3sD4qf7k/l2r53v77LdhDz76YL5XfY95LuOncdtj8vsOOu+R8Ufmc8/n
cP9O3uEG5bc9LzM+ex7IecZneZLXMT/sej6H50s8zvipfAXPF/kK7Bf5ivj9
BvPFHfziBumYvnpQfuQd+tdj6tPzJR7le8/yFdRfW74i/NfzJe4avy5VvkJe
ezb1KfvRGT+N9B+lPo1aeJj6lP3u2vkSd1Ofxn2eR+J71bOpT+P7Gf3XfanU
p3Hfw+T74n7Pmxmi3jx/Rb7vjv3LeEHG7eI+eQ7jVtOpT+P7qYyTyFeoT6O+
7qc+jfzeTX0a93k+x++O5CuMn1b5ihOkf8vxq8hXqE+J42LvZsZNf1y5yut4
TsVs6tPI50xVnx54HonxU89VM34qT2K88nrq0/h93PnBfc8q3/fM+h2tcuzu
T8mVZvxUXudT+G/HjYEipxfPGTceky+qvUdpHG0k9WnYvZXnSxAHSn3qvBL3
vUAPXkt9Kl8R+RpA//ner+dLXEx96jhr3PRnlDvsX03dEVfjp5Z3MLm7+P3L
I/kK46fWq/tTxHuT7/PcFfVp2DmVcTfGrSP1aaR7LfVplH8s9anrQvQf++O+
x/Z5W+4kvj9N+oPqS/eFU5/u4Ye0e/IV+hXvlSTfp47HfnJJ6lM51rD3Rdv3
HqI8Z9in9ryMi+W/eI56Ls4z8ftk+SHtHvbGU3dVyz2U+lTuUH0qp+7+lNwo
7VvUIbR/ka8gvp77SJGe+y+NWvx00PVRcmL4Z567iP8eyVfg323njbhfLuRz
yut+kOdlGD+VGzC+LF/RTK6H/kn6cqADzOMfHRk/dR1q/BR/kEPKOAJ+Xqw3
9Sn+lvtT+j3756TveyUXcp+C9XeuG1ifU0/O4+bjVC1+qg6T77uA7rhWy6dx
8ys5Tv2Ufhv1PJyc3B7t5riLHxxZD2HP+OmwXFqNA7hkXCvjp+6Tx+9T6JHf
c3/GjexH9hP7KbqjzEW95Tk6xk+r7w0OJecT9Xop9zXhn4rnZcR9U8V+f8C4
1qJc7F/lPk1cPV9iVO7qyDib8VPGDe43nus5Ep5/ZhzF720nr8blruS6Gv3U
04761LiI50vs4QdyX8zXcn25z2w7hb1bRX1qnMD4aeTD8zJ+f+5VPO/5Z1fx
v9f0b88j+cWm47zckHFrnmd8Nj25HM+v8Dy225lP+Qry73sXtMc7qQN+zThg
v/wF40w853kk7lfKc7hfKb/ifqW8gfHluxk/la+gXdx3sf171XpUn04zznu+
hPXbUA+Xaj+T52C/8tk9/EF9+iDjp+jxjJ8aN+T9rJ77+PG750vczvipfIXj
nudl0D9dT9h/SfdhLX76uBo/3Z1zfCB9eRLPKZMP+h3jzV3nJfSy55GcKPIV
VX36KPt92Jsr6lP5ikr89GDe8RP9LB90lvHmHv7n+ycP8pwu1pNyqa43q/HT
fdPzfRj5EeOD8hTET4/lD0ZZ39zP+Gmk8xB//go9+Ij2+tT3GbDn+x7yI74P
Y/qef2Z66q8W5ZlOvoJxDh7zEf48yPxqeeH7DufQoce+71GNn+5aXvcH5Tnc
P/Uz+v1QvsP46VKeLxH5navGT1vzxOO+PIp2n8d/nOcWMn4adlo5T8fV8srT
yXOo35dzXAx78hbwfYfzVU56f6GoT/u377boN5wv0ZQfOe1+V/J9YW8p+b6w
5/kcjCu7Kxk/DXurPk9/snynmT9avM/M+RIHi8kJx31LnttHubJ8pGt68n2e
RyK/5vkccodrGT+N9l/M+Gm0/xLxL86XOF6Sq/Z9M+x5Hq48h+cFy4+4P7hW
ndeO1yjPTPIV+B/9e6l2LuKyOhudtlI9X6Jh/cr3WV73B9eS72M/OuOn7Fdn
/DSe2+R3dPzxcsZP+350uILegfP+yWrGT6P91zJ+Gu2/nrov7Fle3vc49HwQ
9HvyFXCbu1uOX/Sn1aI+DTtrcu2sU+RZ5JBN3/ejTU/9vpl8X9iTp/D8M3kL
56Vtx3f60xrtw7pidx1+jXVLcwN/fsl5KRupT6P88ivGT00PnbQrP+L5CfIU
nJt13E59Gs+t5/kSUY8bBV2P/tr03EnGZ8srd76d+lS+Iu5Tf5meukGeQc61
pD6N/G7Sv3kv43gTnu4jeK0t4mZw6vvbycHLV0S+LhsPTH1KvLCqT5/Ld8zG
c6WT+jS+34IfUZ9ulz/tP8/5Eo025+14/lk79Snx0OT7Iv/yHp43Js8wRXt2
UrfJV0T9nWd83oaPeE181vL+YpNipD6Vr+D5SP+FPA3vnzzVPjq3J+8B3zfb
TQ66yle8g94o5aMoP3qwpD6N5yyv73t0avpUfsX9StOT7+umPpWviPtu53kZ
0e/g+z4s8BrE94c68IYfeR4D/oI+fW552a8s3dSn/eQ/NH3019AO9cW65v2d
1PXyFerT6N+d8tfRf/DfTtmM/uV5FalPoz3lR3jf49jyEk/f3Ul9GvZ2Up+G
vSc8j+7ef5L6NNq/gz+jT5924R+fR3/qyZPw/4+YlVchvv+B/MgY/iTvgR58
Ks/BuqQn33Ibe54Hcpb9gi7+7L7VTurTuG8n9WnYlSfxXE3Tc50sP6LekR+R
73uP++Xc3yv/B3CLMXs=
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {10, 15, 
    20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 3, $CellContext`tau$$ = 
    0, $CellContext`tick$$ = True, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 
    0.8}, {0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period:"]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open"]}, 
                ImageSize -> {200, 60}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Text[
                Text["Angular frequency \[Omega](q), selection:"]], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["mesh size "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`meshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin], 
                Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tau$$], 0}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`meshSize$$], 8}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`meshSize$$ = 
        8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
         1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tau$$ = 
        0, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       Dynamic[If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
            Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
              1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
           Module[{$CellContext`n$}, $CellContext`n$ = 2; 
             While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
            ReplaceAll[
              "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
             2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
              $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
              
              Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; $CellContext`bInitDefaults$$ = 
            False; Null, Null]; 
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
           
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
                $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
              True, Null]; 
           If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
                
                Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`bRefreshDynPlot$$ = 
              False, Null]; $CellContext`dynPlot$$[$CellContext`tau$$], 
           
           If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
            If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
               False; $CellContext`bRefreshDynamics$$ = 
               True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
            If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
              Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
            LocatorPane[
             Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                   Dimensions[#]] < 3, 
                 
                 Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
                 If[First[
                    Dimensions[#]] > 7, 
                  Take[#, 7], #]]; 
              Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                 First[
                   Dimensions[$CellContext`rawArrayOfMasses$$]]; 
                If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                    $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                  
                  While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                   AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                   Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                   Part[
                    Part[$CellContext`kArray$$, All, 1], All, 1]]; 
                If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                  Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                  
                  While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                   Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                   Part[$CellContext`u$$, 1], 
                   
                   Part[$CellContext`u$$, 
                    1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                 Part[$CellContext`glConstLocDefault, 1], 
                 Part[$CellContext`u$$, 1]]; 
              Part[$CellContext`u$$, 2] = If[Dot[
                   Part[$CellContext`u$$, 2], 
                   
                   Part[$CellContext`u$$, 
                    2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                 Part[$CellContext`glConstLocDefault, 2], 
                 Part[$CellContext`u$$, 2]]; {
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  
                  2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
               If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
               If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
               If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
               ReplaceAll[
                 "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
                2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
               True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
             $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
             LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period:"]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open"]}, 
                 ImageSize -> {200, 60}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Text[
                 Text["Angular frequency \[Omega](q), selection:"]], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["mesh size "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`meshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tau$$, 0}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`meshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{915., {292., 299.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms}, $CellContext`latticeBasis = 
          Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            Range[$CellContext`numMasses]]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay]& , 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], $CellContext`pointsTable[
         Pattern[$CellContext`mPosFirstCell, 
          Blank[List]], 
         Pattern[$CellContext`latticeBasis, 
          Blank[List]], 
         Pattern[$CellContext`numberLatticeLinesToDisplay, 
          Blank[List]]] := 
       Table[$CellContext`mPosFirstCell + 
         Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
          
          Part[$CellContext`numberLatticeLinesToDisplay, 
           1]}, {$CellContext`j, -
          Part[$CellContext`numberLatticeLinesToDisplay, 2], 
          
          Part[$CellContext`numberLatticeLinesToDisplay, 
           2]}], $CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], $CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk 
            Part[$CellContext`mA, $CellContext`j]])], \
$CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], $CellContext`showDynamics[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`ql, 
          Blank[]]] := 
       Module[{$CellContext`pointsDataTable, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`e, $CellContext`omega, \
$CellContext`points, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses}, \
{{$CellContext`a, $CellContext`b}, $CellContext`pointsDataTable, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`lines, \
$CellContext`mScalarArray, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "numberLatticeLinesToDisplay", 
             "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`points = 
          Table[Part[$CellContext`pointsDataTable, $CellContext`k] + 
            Table[$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`ql, $CellContext`a $CellContext`i + \
$CellContext`b $CellContext`j] - $CellContext`omega #))], {$CellContext`i, -
               Part[$CellContext`numberLatticeLinesToDisplay, 1], 
               
               Part[$CellContext`numberLatticeLinesToDisplay, 
                1]}, {$CellContext`j, -
               Part[$CellContext`numberLatticeLinesToDisplay, 2], 
               
               Part[$CellContext`numberLatticeLinesToDisplay, 
                2]}]& , {$CellContext`k, $CellContext`numberOfMasses}]; \
$CellContext`nu = 2 Pi If[$CellContext`omega == 0, 1, 1/$CellContext`omega]; 
         Show[{
            Table[
             ListPlot[
              Part[$CellContext`points, $CellContext`k][$CellContext`nu #], 
              PlotRange -> {{-($CellContext`glConstWindowHalfWidth/
                  2), $CellContext`glConstWindowHalfWidth}, \
{-($CellContext`glConstWindowHalfWidth/
                  2), $CellContext`glConstWindowHalfWidth}}, 
              ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
              Directive[
                PointSize[
                 Sqrt[
                 Part[$CellContext`mScalarArray, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
                $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], 
            
            Graphics[{$CellContext`lines}]}]& ], \
$CellContext`glConstPrimaryDisplaySize = {380, 380}, $CellContext`glConstMMax = 
       30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -(Part[$CellContext`qMax, 1]/2), Part[$CellContext`qMax, 1]/
               2, Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -(
                Part[$CellContext`qMax, 2]/2), Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], \
$CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 
                23}}]]}]], $CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, \
$CellContext`n$]/($CellContext`glConstMMax 500)]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               Part[#, 3], 
               FE`glConstSpringColorsByN$$55]]& , $CellContext`cN$]; 
         If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                Part[#, 3], 
                FE`glConstSpringColorsByN$$55]]& , $CellContext`cOrigin$]], 
           Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> {{-($CellContext`glConstWindowHalfWidth/
                 
                 2), $CellContext`glConstWindowHalfWidth}, \
{-($CellContext`glConstWindowHalfWidth/
                 2), $CellContext`glConstWindowHalfWidth}}, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], Attributes[$CellContext`uLoc$] = {Temporary}, 
       Attributes[$CellContext`ld$] = {Temporary}, 
       Attributes[$CellContext`cd$] = {Temporary}, 
       Attributes[$CellContext`m1Ind$] = {Temporary}, 
       Attributes[$CellContext`m2Ind$] = {Temporary}, 
       Attributes[$CellContext`moInd$] = {Temporary}, 
       Attributes[$CellContext`mScalarArray$] = {Temporary}, 
       Attributes[$CellContext`numberOfMasses$] = {Temporary}, 
       Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
       Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 
             0.01}]}], $CellContext`glConstKMax = 1, 
       FE`glConstSpringColorsByN$$55 = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]]] := Module[{$CellContext`result}, $CellContext`result = If[
            
            NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], \
$CellContext`massValue = 0.25, $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , \
$CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], \
$CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]], \
$CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.600991920019863*^9, 3.6009919670395527`*^9}, {
   3.6009920245298405`*^9, 3.6009920501333055`*^9}, 3.60099313594541*^9, {
   3.600993187449356*^9, 3.600993239845353*^9}, {3.6009932797776365`*^9, 
   3.6009933046760607`*^9}, {3.6012440341096554`*^9, 3.6012440721578317`*^9}, 
   3.6012447781242104`*^9, {3.6012448176024685`*^9, 3.6012448561326723`*^9}, 
   3.6012449730663605`*^9, {3.6012450799064713`*^9, 3.601245088751977*^9}, {
   3.601245122802925*^9, 3.6012451299813356`*^9}, {3.6012451718047276`*^9, 
   3.601245397972664*^9}, {3.6012467859190493`*^9, 3.6012468229691687`*^9}, {
   3.601246896213358*^9, 3.6012470488980913`*^9}, {3.6012470802998877`*^9, 
   3.601247087356291*^9}, {3.6012476034298086`*^9, 3.601247625026044*^9}, {
   3.6012477383525257`*^9, 3.6012477482580924`*^9}, {3.6012479226070642`*^9, 
   3.6012479616512976`*^9}, 3.6012480156453857`*^9, {3.6013815489528093`*^9, 
   3.6013815749782977`*^9}, 3.6013816959272156`*^9, 3.6013818936795263`*^9, 
   3.601381933169785*^9, 3.6013820135453825`*^9, 3.6013868190332403`*^9, 
   3.6013870782100644`*^9},
 CellID->415535414]
}, Open  ]],

Cell[BoxData["\[AliasDelimiter]"], "Input",
 CellChangeTimes->{3.601245184099431*^9},
 CellID->534877709]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell["\<\
A lattice of atoms can be modelled as harmonic oscillators, with forces \
proportional to the displacements of the atoms from equilibrium positions. \
The simplest such model introduces coupling for only the nearest neighbor \
atoms. In this demonstration, a lattice cell containing 1-5 atoms is \
modelled, with nearest neighbor harmonic coupling to the mass(es) in each \
nearby cell. Normal mode solutions to these equations of motion are plotted. \
Controls are provided to alter the coupling \"spring constants\" and other \
free parameters, as well as controls to select from the reciprocal space \
vectors, and angular frequencies associated with the normal mode solutions. A \
time control is also provided to display changes of the lattice through one \
period of the lattice vibration.  A plot of the dispersion relation, showing \
the angular velocities associated with each reciprocal vector is also \
provided.\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.6008873855675645`*^9, {3.601208787872481*^9, 3.601208804510481*^9}, {
   3.601209090380548*^9, 3.601209091209631*^9}, {3.6013823516277194`*^9, 
   3.601382454828622*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}}, {{
       2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}, {{
       3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}, {
       3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}}, {{{
       1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
        0.09999999999999987}, {{
        0.19999999999999987`, -0.3999999999999999}, {-0.3999999999999999, 
        0.8}}}, {
       1, 2, {-1, 0}, 0.25, 1., {0.9, 0.7}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       1, 2, {-1, 1}, 0.25, 1.6899999999999995`, {0.9, 0.7}, {
        2.1999999999999997`, 0.7}, {{0.9999999999999999, 0.}, {0., 0.}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 3, {0, -1}, 0.25, 2.2600000000000002`, {0.9, 
        0.7}, {-0.5999999999999999, 0.5999999999999999}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       1, 3, {1, -1}, 0.25, 3.3999999999999995`, {0.9, 
        0.7}, {-0.4999999999999998, 1.9}, {{
        0.5764705882352942, -0.4941176470588236}, {-0.4941176470588236, 
        0.423529411764706}}}, {
       1, 2, {1, 0}, 0.25, 3.4000000000000004`, {0.9, 0.7}, {0.5, 2.5}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 2, {0, 1}, 0.25, 3.65, {0.9, 0.7}, {2.3, 2.}, {{0.5369863013698629, 
        0.4986301369863013}, {0.4986301369863013, 0.463013698630137}}}, {
       1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 2.7}, {{
        0.05882352941176473, 0.23529411764705888`}, {0.23529411764705888`, 
        0.9411764705882353}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 3, {-1, -1}, 0.25, 4.520000000000001, {0.9, 
        0.7}, {-0.7, -0.7000000000000002}, {{0.5663716814159291, 
        0.49557522123893794`}, {0.49557522123893794`, 
        0.43362831858407075`}}}, {
       1, 3, {-1, 1}, 0.25, 4.879999999999999, {0.9, 0.7}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       1, 2, {0, -1}, 0.25, 5.85, {0.9, 0.7}, {-1.5, 0.3999999999999999}, {{
        0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
        0.015384615384615389`}}}, {
       1, 2, {1, -1}, 0.25, 6.289999999999999, {0.9, 0.7}, {-1.4, 1.7}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       1, 3, {0, 1}, 0.25, 7.540000000000002, {0.9, 0.7}, {3.2, 2.2}, {{
        0.7015915119363394, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 2, {-1, -1}, 0.25, 8.81, {0.9, 0.7}, {-1.6, -0.9000000000000001}, {{
        0.7094211123723042, 0.4540295119182747}, {0.4540295119182747, 
        0.29057888762769585`}}}, {
       1, 2, {1, 1}, 0.25, 9.009999999999998, {0.9, 0.7}, {2.4, 3.3}, {{
        0.24972253052164267`, 0.4328523862375139}, {0.4328523862375139, 
        0.7502774694783573}}}, {
       1, 3, {1, 1}, 0.25, 13.599999999999998`, {0.9, 0.7}, {3.3, 3.5}, {{
        0.423529411764706, 0.4941176470588236}, {0.4941176470588236, 
        0.5764705882352942}}}}, {{
       2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       2, 3, {1, -1}, 0.25, 1.2999999999999996`, {0.4, 
        1.2}, {-0.4999999999999998, 1.9}, {{
        0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
        0.376923076923077}}}, {
       2, 3, {0, -1}, 0.25, 1.3599999999999999`, {0.4, 
        1.2}, {-0.5999999999999999, 0.5999999999999999}, {{0.7352941176470588,
         0.44117647058823534`}, {0.44117647058823534`, 
        0.2647058823529413}}}, {
       2, 1, {1, -1}, 0.25, 1.6899999999999995`, {0.4, 
        1.2}, {-0.8999999999999998, 1.2}, {{0.9999999999999999, 0.}, {0., 
        0.}}}, {2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
        2.5}, {{0.005882352941176467, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 0.09999999999999987}, {{
        0.34594594594594585`, -0.4756756756756756}, {-0.4756756756756756, 
        0.654054054054054}}}, {
       2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
        1.4000000000000001`, 2.7}, {{0.3076923076923076, 
        0.46153846153846145`}, {0.46153846153846145`, 0.6923076923076924}}}, {
       2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
        0.8, -0.6000000000000001}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {-1.4, 1.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {
        2.1999999999999997`, 0.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {0, -1}, 0.25, 3.65, {0.4, 
        1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
        0.463013698630137}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 0.3999999999999999}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 3, {-1, -1}, 0.25, 4.82, {0.4, 1.2}, {-0.7, -0.7000000000000002}, {{
        0.25103734439834025`, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{0.9846153846153846,
         0.1230769230769231}, {0.1230769230769231, 0.015384615384615389`}}}, {
       2, 1, {-1, 1}, 0.25, 6.289999999999999, {0.4, 1.2}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       2, 3, {-1, 1}, 0.25, 7.379999999999998, {0.4, 1.2}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9878048780487806, -0.10975609756097565`}, {-0.10975609756097565`, 
        0.01219512195121952}}}, {
       2, 2, {1, 1}, 0.25, 8.409999999999998, {0.4, 1.2}, {2.4, 3.3}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {0.4, 1.2}, {-1.6, -0.9000000000000001}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 1, {1, 1}, 0.25, 8.809999999999999, {0.4, 1.2}, {2.9, 2.8}, {{
        0.7094211123723043, 0.4540295119182747}, {0.4540295119182747, 
        0.2905788876276958}}}, {
       2, 3, {0, 1}, 0.25, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
        0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570139`}}}, {
       2, 1, {-1, -1}, 0.25, 9.010000000000002, {0.4, 
        1.2}, {-1.1, -1.4000000000000001`}, {{0.24972253052164256`, 
        0.4328523862375138}, {0.4328523862375138, 0.7502774694783573}}}, {
       2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{0.6138686131386862,
         0.48686131386861314`}, {0.48686131386861314`, 
        0.3861313868613139}}}}, {{
       3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
        0.19999999999999998`, -0.39999999999999997`}, {-0.39999999999999997`, 
        0.7999999999999999}}}, {
       3, 2, {-1, 1}, 0.25, 1.2999999999999994`, {1.3, 1.4}, {
        2.1999999999999997`, 0.7}, {{
        0.6230769230769229, -0.48461538461538467`}, {-0.48461538461538467`, 
        0.3769230769230771}}}, {
       3, 2, {0, 1}, 0.25, 1.3599999999999997`, {1.3, 1.4}, {2.3, 2.}, {{
        0.7352941176470587, 0.4411764705882354}, {0.4411764705882354, 
        0.2647058823529413}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
        1.4000000000000001`, 2.7}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
        0.09999999999999987}, {{0.00588235294117648, 0.07647058823529418}, {
        0.07647058823529418, 0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 2.5}, {{
        0.34594594594594597`, -0.47567567567567565`}, {-0.47567567567567565`, 
        0.654054054054054}}}, {
       3, 1, {0, 1}, 0.25, 2.26, {1.3, 1.4}, {2.8, 1.5}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.3076923076923077, 
        0.46153846153846156`}, {0.46153846153846156`, 0.6923076923076923}}}, {
       3, 1, {-1, 1}, 0.25, 3.399999999999999, {1.3, 1.4}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.576470588235294, -0.4941176470588235}, {-0.4941176470588235, 
        0.423529411764706}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.3, 
        1.4}, {-0.4999999999999998, 1.9}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999984`, {1.3, 1.4}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9283667621776505, -0.25787965616045855`}, {-0.25787965616045855`, 
        0.07163323782234961}}}, {
       3, 3, {0, 1}, 0.25, 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
        0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.3, 1.4}, {-0.5999999999999999, 
        0.5999999999999999}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {0.8, -0.6000000000000001}, {{
        0.058823529411764705`, 0.23529411764705882`}, {0.23529411764705882`, 
        0.9411764705882353}}}, {
       3, 1, {1, 1}, 0.25, 4.52, {1.3, 1.4}, {2.9, 2.8}, {{0.5663716814159292,
         0.49557522123893805`}, {0.49557522123893805`, 
        0.43362831858407075`}}}, {
       3, 2, {1, 1}, 0.25, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
        0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       3, 1, {1, -1}, 0.25, 4.879999999999999, {1.3, 
        1.4}, {-0.8999999999999998, 1.2}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       3, 2, {1, -1}, 0.25, 7.380000000000001, {1.3, 1.4}, {-1.4, 1.7}, {{
        0.9878048780487805, -0.10975609756097562`}, {-0.10975609756097562`, 
        0.012195121951219514`}}}, {
       3, 1, {0, -1}, 0.25, 7.539999999999999, {1.3, 
        1.4}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7015915119363395, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{0.4756242568370986,
         0.49940546967895355`}, {0.49940546967895355`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.3, 1.4}, {-0.7, -0.7000000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 2, {0, -1}, 0.25, 8.84, {1.3, 1.4}, {-1.5, 0.3999999999999999}, {{
        0.8868778280542985, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570136`}}}, {
       3, 1, {-1, -1}, 0.25, 13.600000000000001`, {1.3, 
        1.4}, {-1.1, -1.4000000000000001`}, {{0.42352941176470593`, 
        0.4941176470588235}, {0.4941176470588235, 0.576470588235294}}}, {
       3, 2, {-1, -1}, 0.25, 13.700000000000001`, {1.3, 
        1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
        0.4868613138686131}, {0.4868613138686131, 
        0.38613138686131376`}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.6790602328891914, 9.230900003615161*^-19], {Complex[
      0.7248589832535917, 0.], Complex[
      0.650064949116095, -0.020858686170711016`], Complex[
      0.11988513411713456`, -0.0981715969681187], Complex[
      0.15160623794564831`, -0.028647866526790612`], 
      Complex[-0.002472802788942547, -0.01713913715451654], Complex[
      0.05556524411678816, 0.01890267003822048]}}, {
      Complex[0.5524636587025472, -7.594543271602355*^-18], {
      Complex[-0.38354558530686395`, 0.09744499810272776], Complex[
      0.1619813466218059, -0.23832737428749207`], Complex[0.6766558452199941, 
      0.], Complex[0.5279467930943094, 0.011722985858567875`], 
      Complex[-0.0019794387381373065`, 0.0612963317654061], Complex[
      0.14074635807044672`, 0.0077645969691057665`]}}, {
      Complex[0.5222542056555272, 7.39373223091693*^-18], {
      Complex[-0.5047764091042254, 0.08027140607893792], Complex[
      0.6076266586520926, 0.], 
      Complex[-0.41722429897453955`, -0.26584428115246467`], 
      Complex[-0.11870218623554862`, 0.011771602360776734`], Complex[
      0.10106066627579662`, 0.15510216234064736`], Complex[
      0.24672133224192438`, 0.12420825231706026`]}}, {
      Complex[0.47798270089481093`, 1.705186367657685*^-17], {Complex[
      0.11776747404882068`, -0.17021352942962187`], 
      Complex[-0.19349636076477256`, 0.18545691772731276`], 
      Complex[-0.005098087736675982, 0.0481703582836023], Complex[
      0.12443545522518613`, -0.04846883240430583], Complex[0.7520021001235273,
       0.], Complex[0.5450959458974042, 0.050065292585647264`]}}, {
      Complex[0.4208599945029234, 1.7181192359807767`*^-17], {Complex[
      0.046412084869462106`, -0.0633132278362492], 
      Complex[-0.15001494768060744`, 0.1368626263531111], 
      Complex[-0.49457449633790096`, -0.020339968952328036`], Complex[
      0.7465187765334863, 0.], 
      Complex[-0.3425167147633056, -0.05320301419822421], Complex[
      0.17190685158210708`, -0.02435844462026826]}}, {
      Complex[0.3371723422003491, 1.2680207595331082`*^-17], {Complex[
      0.08250671501222374, 0.03036710231625256], 
      Complex[-0.10759757386702096`, -0.00917692568070801], Complex[
      0.15992951319705684`, 0.020880420200147097`], 
      Complex[-0.32856173648033754`, 0.004931060374980048], 
      Complex[-0.5245849484304596, 0.028709761501831688`], Complex[
      0.7553839007471159, 0.]}}}, $CellContext`dynPlot$$ = Show[{
      Table[
       ListPlot[
        Part[$CellContext`points$5045, $CellContext`k][$CellContext`nu$5045 \
#], PlotRange -> {{-($CellContext`glConstWindowHalfWidth/
            2), $CellContext`glConstWindowHalfWidth}, \
{-($CellContext`glConstWindowHalfWidth/
            2), $CellContext`glConstWindowHalfWidth}}, 
        ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
        Directive[
          PointSize[
           Sqrt[
           Part[$CellContext`mScalarArray$5045, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
          $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$5045}], 
      Graphics[{$CellContext`lines$5045}]}]& , $CellContext`dynTab$$ = 
    1, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyEvXd01MX7/h1QkBKk9yJdqdIhENjQQpVOqEqo0hNakCZFBKkB6VU6SJMq
iIEldAk1nZDN7oYkSO8lJODj8+G+Ztnr/np++Ydz5syZnX7N9eI9c5fqF9Bp
YEYPDw/P3B4eH/37b6fiG3//a0+mk+1W3nydPizN6nXip1nxx5ItSK9/YMux
t4ueW6OzNghquiLJ4p7/nvUrr7E7dj24ZdI7/C/9pvXO+klPy59zpXvI36Ij
iQc3P1X5LYM3rK48cY6r/Lbvy7fU8m/48uQeVR9L9wv5h1uGp1B90iwXW4eV
3ZQ7xfIu6nXLbk08TLuKTvhkzrunSSYd7UoLqlJ7+KIkyn/PeueddcqkcFc6
2hX2POfyBqHJJh3tCj/VaszwMrc5v+VN4YYhG5+70tGu+U831mn7w22uj2WZ
X+96g+qq+ltKfOwYWfQL9MMLK9p1zpr/5d93kkw62nVlUt/T9X7i/Pescw92
7vvVlRSTjnY9GO1fZuvV2yYd7fJt+Hr41i23Ob+lzy8ta1Qd7ioH7aq/PuHA
5CrJXB/LqF3VrvRbnsT1t+R7fWB9u1+SLB3+l55s2nXw+5iwpr8km3S0a3Ol
jMPutU+h/Pes9mEe1U9VcKWjXVd6D/QamctVDtrV8NTugTUqJnF+y5Kx61f8
duWWSUe7fp4z/vX487e4Ppb0XXe9TpRQ9bf41ew2ZV2eZAt+D+0689upCWGf
pJh0tGvj8lc199Xg/Pesi1uPP5+pfJJJR7vmZ2/fsfSBWyYdf4+qrHiZa+kt
zm/h/GhXMJWPdv3f9UmzoP7SXgvahfYiHe2i/rGYdrn3pwXtov43v0/jhfwW
Gl8L2mVznw+oj4XmD+pvwXzr8n5+mnbllfmJdLRrtMxn9/z3rJj/SEe7/GW9
IB3t+krWF+W3PJL1iHS0a6GsX6qPJUzWO9Xfclb2B9lPfNAu7CdIR7to//FB
u4Ld9ysftIv2N5//2A+R30L7pw/a9bf7fov6WGh/Rv0t2M9l/zftwv6PdLSL
9MK0q667vph2kR6ZdpF+mXaR3pl2dXTXR9Mu0lPTLtZftOtO/zbNLuxxKl1u
8Lzk5A55nUqXO5XY8v2XxxxKlwO+LVY+eJ9D6XL273zPZAxX+S1Ncm4/693I
qXR5VrMF3xy7pepjyVOz8N0fSiQqXX5kb7R55zOn0mWfCjMD9n/rVLpcfM7S
avMncP571vN1ju//fZ9T6fI8/zd9h+dOVLq84kDWlj/0T1S6fOHql0O8pyQq
Xe5RfcfTb/olKl2uP3nID4eyJypdrnxjUNcxc51Kl6OfeqZe7eZUupyzx6Iz
3ayc/541JMfZHTXqJipdfvyy8/XsoxOVLnsdTdyUf5zKb4lpPOj+8UaJSpcP
vkyMWBin6mOZWanWtD91/S2dR+Vvnn+YU+ly7qgpa2NOOJUup+3YXn7dp4lK
l2tnu7pg8gfpaFeFtC3PHUudSpfHhOadUvuVQ+nyuPbBXeb87lC6XKLb37uH
7XQoXc5XpH3ewlcdSpcfxnRMi/7GqXS5XKfOaQ/vOJUuJ79YE9VhKee/Z/1x
UqUS5+MdSpd71m/XJXWOQ+nysVcjTtYer/JbOD/axeWjXf93fdIsqD/rMtrL
ukz9Y/SrlHt/Gv2i/je/T+Nl9IvG1+iXl/t8MPpF88foF+Yb63J7mZ+syz/I
fGZdPiTzn3U5VtYL67K3rC/WZaxH1mWrrF/W5Vyy3lmXsT+wLmM/YV2m/cfo
V1f3/croF+1vRr9oPzT6Rfun0a9z7vut0S/an41+YT9nXcb+z7pMemHaNdVd
X0y7SI9Mu0i/TLtI70y7Orvro2kX6alpF+sv2jVu629j2v3uULp8c2qZKjPr
OZQu55ywI329j13pctjsngVTBicoXd4wedpV+3Ob0uVJOXte/ypTgtLlAdl/
ST56L0Hp8vz2/vdX9LQrXa4UFDh6QQW70uV+JXcGFP5M6/KpoJIRDVY4lC5X
yVLkQrrFoXQ5cMzd73/+zKF0+VL5VSVXV1T5LY3rx7waV8+hdDn2lxzVP/J2
KF2OcmSePM6L65NmKV7yYNt93g6ly87snkfmVnIoXe6/bPj0wOqc/561Y8US
pybXdihdrtKnR5NDdR1Kl3s1mFshqarKb/EalGNlSjGH0uVfFiTWTy6h6mPZ
2dYeFthT1d9ysJDnwy/+UrpmLeYd9vmBsASly7su5Hyd3tqudLnUxbVpq2rZ
lS6PHNd292z/BKXLW3ds8qgaYVO67P+23sx6nyQoXc6SHDT1+kZVH8vPnrUb
D1/H9UmzJP50vGBMX4fS5cRPv51Qa7ld6XLnDZPXB2S0K12um3fXoi+f2ZQu
H6nn531gvE3p8s47GfK/6aLyWzg/2lWTyke7/u/6/NsuqT/rMtrLukz9Y/TL
070/Xb7Svf/N79N4Gf2i8TX6VdZ9Phj9ovlj9AvzjXX5kMxP1uUdMp9ZlzH/
WZcbyHphXe4t64t1ubKsR9blzrJ+WZcHyHpnXU6U/YF1GfsJ6zLtP0a/brjv
V0a/aH8z+kX7odEv2j+NflV232+NftH+bPQL+znrMvZ/1mXSC9Ouge76YtpF
emTaRfrl4gDuemfalctdH027SE9Nu1h/0a6YbwuHNluhdNDa/OsBp777Il7p
crOILYMr94hVurwy8P7QrLVilC7f779pQY+uMUqXVyUUK/B9rZtKl6dVXRBU
t5RN6XL38tOnBK6wKV3OMmXI3TuPbEqXX3008nLemTaly1WC8u664x+vdLlZ
sz+uTPo2Xuny7WI7h766F690udeVuiG+/jaly/6D8lzOusumdPntX2uKd45X
9bHMLnt0TPVLqv6WEpfLdC/e2aZ0uckdS7235WxKl/9ZPzCX5xrO/+95I+O4
b1sn25Quh1qnvxwQZlO6fKv7xfCbs1V+i8dvO4tc+cKmdNmzWe7hH62IV7rc
vXRY6tMG8UqXk9/l9m+/Ml7p8u9tEgPX59e6nFjc81CDczaly6O2nbANGah0
1tqp7atLvmvjlS6neDW60+N6rNLl4xvrjt3yOFrp8vcTh6Rk6xCjdLlGVOuy
pbvcULq87ceIVi9m25QuD3pccPeda0oHrf1LPz33Nile6XITa7/JK8NjlS6/
SFkyr681WulypyYLLWMPRStd5vxoF5ePdv3f9UmzoP6sy2gv6zL1j9Gvae79
afSL+t/8Po2X0S8aX6Nfo93ng9Evmj9GvzDfWJf/lvnJuuwn85l1OYfMf9bl
j2W9sC5jfbEuW2U9si7XlPXLuvzRL+/XO+tyC9kfFMeW/YR1mfYfo1+v3fcr
o1+0vxn9ov3Q6Bftn0a/mrjvt0a/aH82+oX9nHUZ+7/i2O56Ydo13V1fTLtI
j0y7SL9Mu0jvTLtIH027SE9Nu1h/0a42I8qd+uZRnNLlnOPL1Q7teUPpcq5x
D2fkOxqldHlOnotxxbdFKl3O8+1nnjOTVH6L37N89pq3o5UuW8ZveunTNEbp
8pzo3MsTlscoXb6w7mTPwlExSpd7d3gSs8rvptLl1S2z7Og2NVbp8usW348v
tjxa6fLv284PP70tWulytZobFwdkj1G63OZVv5xjf4pRurwsNP+nCTlilS5f
yfjNliYbuD5plm+79XvQue8Npcsbxi4OiLp5Q+lygWwJS+Zk4/z3rL1vXvmi
zMBYpcshHTd3+DgmRuly0XHb555sF6N0eeaiAsVGhkcrXe63+N3eKROilS5v
PuxzeEJktNLleTVOVTj5WOmatfixjamlY5UOWms+bvXsxW8xSpcDotpWvTks
Runy5dCm/dcUilG63C/4p1fT90crXbZGX8taY0Ck0uW+/WvPXBUcqXR5kb9v
7oIzuT5plk0LM8968uKG0uX1w4r/vKB3jNLloz9cXLv8TrTS5Z6VrVHFTiid
tY7b/rxueolLSn853fy/CZWD+v/fv5tmQT1Zf9Eu1l/qB6NT1G9Gp6ifze/T
uBidonE0OjXSfdyNTtE8MTqFecX6O1fmIevvJpm3rL/9ZZ6z/k6XdcH6W0TW
Eevvn7LuWH+xTll/C8m6Zv3dKPsA6y/2DdZf2meMTtG+ZHSK9jGjU7TvGZ2i
fdLo1Cv3fdXoFO3DRqewb7P+Yp9n/SVdMO1q7K4jpl2kO6ZdpFOmXaRrpl25
3XXQtIt007SLdRbtKh945KsGS6OU/mYodfTPYYOilP4e6Vl1V4o1Qumvn6Pm
wu1xfyn9XXiq1p4abS8o/c10NueNJpcuKv0dn5rpp2vRl5X+7gm8VWpQ0jWl
v+XqPL847ni40t+AO4HefuOilP6W6N4qtV3dKKW/p7KUOLq3WqTS39EHik8+
vzdC6e/5WtvG9f8tQulvmEdcgV4hEUp/E17Wz3I5OULp7+wVl9u0qBOp9LfZ
1+8qVdkRqfT3n/HVe/1+O1Lp74JFlzt2Gc7571kTrvWe4PVPhNLfgccG5F3w
e4TS36e+zXN+skTlt/i0Hn7W54cIpb/f7xy+qfayCKW/3f5ISNiq62/J/vHP
Q/f0iVL6G9qv8qKFiyOU/vodrVX2Scp1pb9LEhbtqLThqtLfI68Wl9q8K0zp
79MFw2o1fHZB6W+GHW22ll1wTulvu/JTa+37+YrS37wR13vcfhSp9DdzLo8z
vt9HKf0tsn1W/7BskUp/T/zp+yzk52tKf4My/9Ure93zSn+PFY5t2eLQEaW/
nI76B1I5qP///btpFtST9RftYv2lfjA61dW934xOUT+b36dxMTpF42h0Kth9
3I1O0TwxOoV5xfqbWeYh628Xmbesv9NlnrP+NpF1wfqLdcT621vWHeuvXdYp
6+9iWdesvxm+e78PsP5i31D+132fMTqV6L4vGZ2ifczoFO17RqdonzQ6ddx9
XzU6Rfuw0Sns26y/2OdZf0kXTLuC3HXEtIt0x7SLdMq0i3TNtCvEXQdNu0g3
TbugsztSL03N9TrjyWblTvaY8u6V9bvGG/8peTbJpFezzCn6fZknVv+ZbyfY
D7nS0d7BPoeiYpYkWdL+12+PzXzw/uWl//Jm+O5Rf++HctA/RYsVWZLX35Xe
4H/lJ1nvXCler2NbVzr6Le6v5s32n+b0MGtVv9Qtj2640tGf1Rsuz5tlXrKl
5f/qE+WqZ8HLm2ZHJFu+onWK7y13DGhV1rtwmrW59M/YibW2rWlovmO0NqDv
md3blWbdWfTC7Ad+rnLQbwMmtJjcydNVDn8XTe2yrKv+tP2YaE6/aaluG/Y8
hyXFlI/x6nV8Ucmeru88rV5cvuRH/3vdmBMw4JorP9LxPbb7uCdZCjZs2KP6
dVc65qH/rwHLZ61MofYmWStG7p90poX5LhS65ipf8mN842se7R14wZWfvwOn
+WkZbet1/ewrrudzS1BOr/Dwjq7y28g8sRfpGvbTBPP9qqR/UL7kx/zx9Cj1
OMsAV36k4/tzWkeWBikTR1S5qOaDZez2qL8S1v6rN9H/Wy/WJjKvfKasbXFi
SbKlm5vuu74zdx+vNOuotQutYx4m0Xi5vrdH+cZfR1QvmOe+q3z+Xh3ld5X5
tmHX6qWbL3F7D3mb9rqPl2VPfJNX31a7zeNlvsNHfWrI/Ix+Vm3i21hXfTrJ
fMB38siPeXg4Z8W/PpmcYvK3o/yoj5fMzyLxC+rmXOyaP61lfuL7Z+THvO3f
8uTYAd3V/DT5UZ+6Mp8HBVTbeTDdVR8p3+qg+mPeJtzutzdroCs/0q/K9+Go
T3WZz4Mnrhs36oBaj6r+hktP9/0haZDaT8y9BtSnj8z/5atnnbmX7ur/9+N7
KqSRfMeO/Jjnp6Z2ujPsNuf38EB+2ictF7r9VMJiT+J90tSH5rOl8Pd/ZT58
S81nc/+i9/t92+or62Xn3Nv/pA7Gue1MiDffU3CbP2lW6JH7/HGtL5SPdVHa
OfnqV6Gu8tU9CPf+tFzd96ZNtTaqP725P829mznPkkYWT+b5YFkq9wtQny9l
vfhkmFzDa6+rPvWoPshv9vObDdJvfe7Kj/SfcZ9C6lNH1suEfP75Iwq76tNS
5tsSuQeB/FgXKXl3dZ04MYn2K9c9FNQH62Vf55Ee9dckmfq0kfrg/gjym++X
avVs3rKvK7+6V+K+n1hmFOnS/0HVJOpPV31oP7Qc2ZVj5qKeSbwfmvsyqE9j
WS/JKVN6VXx4y9SnNdUH+bEuCrwutbeU3ZUf6eb+i/v+b+n/6HS5aZHcnx/c
03Gfz5bD+TN9+jI2ieezyY9zTlNZL+kDtsduK+0653wl8x/53edPmrWBnIvc
54/rfhDKx7poX+pJnSM7kkz5fL8G5WO9NL5epIX/fu6fY97oH5oPllwng54P
PnmL54O5N4T6QF8KL6pbIN8UV306YL7JfHA/B96z5h76yn7i5S06B7ryoz6N
ZL0Et75V9nKIqz5+VB/kN9+NSPnIz/ebUJ96sl4WSvmoT9v/qD/WRU7pH/f2
uu4roT5VZb2gf2g/sfB+gnXRTsaX9kOTH/XxlfWC8XWvv6s+yM/rBfmRjntV
tP9b0mQ+0/6v6o91seDJ/Em1Fqj5bO6Lwb9AXwbIeoR/aUj3qshHWFE++Qiz
vlA+1gX2H5TP97ZQfk9ZL0my/7j3zz5v9A/NBwv2T5oP5j4a6gN9mS77J+pT
l+rj7u/uWZNl/3f3d//qjpxPaD5bDv35eeOnD1z1wXkM9+CQH+uijugXzX+T
H/WxyHr5TvQL9ekp8w3nT+THukgV/UX+DpQf9cF5zCL6S/uDqj/WBc4PtB+a
+32oD85jj7q3mbHzD1d93o/v2ZC2ct5GfqyLM3Iec8/v4YH8tP9bcF6i/d/4
3C3vz2PG/waKv0j/j3ttyN9Y1gvOe8jfRuY/7vERH7BCv4gPmPuMKB/rAufb
dOJIS+U+IPWnJcflqhFzeqZwf3pzf2Jd4HxO88HyUPwg6lNT1ss/7YbMiPFM
MfXpLPN/odxDdO/Pe9YB4i/SiXchP+oDfYG/oPls6oP8WBfwR8jP9zFRHznv
WV+1HFfr+CtXfVpJfYKp/lgXu8XfpROXS5X7lagP9CVS/B3tJ+YeKO2HliPi
T2k/NPlRnwayXjaLP0V9fKU+uO+J/FgXucS/pxM/xD1Q2v8tFvHjtP+b+mx7
7+vNugDnQXoLWRfgALS+rIXE79D6MusF5WCeg2NQP1hyFJ45/fGBFO4HyyW5
x0rjaEkQrkLjaPLjd2UcrWOFq7i399/5LJwH5cs+bKkinAflY96GUX0wP72F
OyE/0vG+AX4X87awcCekYx7WEA5G69TSUzgYyu8o5eM+L+0zlv7C5WifMfd8
8buYh+uFyyEd86qG8EbaJy1jhB/SPmn2VZpXVvAipA+UcQfnpH6w3BQuinSM
Czgq0tHPxYW7Ir2K9Fsf4b00Dy3gvTTPLROIG4Mnn1gY/mJaQ6fiydPzP1r+
UT+n4sm7T/T0G+nrVDz5ef+zFzvPcyqejHtqzJPn76xWaExtp+LJRa/ev7ep
mlPx5Lf9s59568/pYdY2w0suOTLKqXhyx/xfZD692ql48polf7fpH+lUPBn3
BJknf9442+qZS5yKJ+MeLvPkpedu3wiZ61Q8ucCon9+MWutUPJnLAU++7x+b
2XFN9YPlx4BhK0JsTsWT750v3+CTo07Fk035xJMbl2685/kzp+LJuEfMPPnz
uQn9J1VLVDz58bHVOzzLJCqeXOZInx/bl01UPNmUTzz5eKXthUMaJyqejPuS
zJPrHPAfOcqH6/ncsq1baJ1i+RMVTz4duXf++aGJiieb8oknD64dNK7t8ETF
k3FvmnnyZ5lP/jIpUs0Hy8L4Tumf/tv/zJNzFZy9r+C/6cyTeR5iXmVf2PLQ
yT48Xq574syTM2VYO+5NilPxZNyTZZ6coVnWzBUmcHsPeZv2Ek++liWs4tuv
1XiZ++PMkzft/7LC3Q/qA56M+93Mk1Ozt14TUzpR8WTkZ57cqP+c9cmVEhVP
xr115smZlza/FVRCzU+Tn3nykmmLv2zmk6h4Mtcf8zbHhPR+QR8lKp6Me83M
k8d7bdtVSq9HVX/Mc3vElQz1wtR+Yu7jM0+uEV9z+4ZDTsWTx8r9a+bJ0d5p
weV+5/weHsjPPLn7jMtDV8xV+6SpD/Nkn3KNvjozUc1n824A8+RJyZ5eS391
Mk9w3a8nnvxM9Ih5MtYX8+TAq6XeBV13Mj9R5cO/bM1w/FDqatWf3mOoP7Eu
tl2YuGHzRKfiyUFyL555co5ph/cP+qA+9ag+zJNtTd5GbRznJH7ywTsDxJMn
td1+aelYp+LJn8n9febJd7YN9JnShPcr1/sJzJO7NRicNbKeqz5tqD7Mk0+t
nlB2RE4n80PXewjEkzs2Xrh8SRHuT1d9mCdf2hTa6m5ltR+adx6YJ99+u2/w
ipMOU5/WVB/mySviT66vfcRBvPSDdxuIJ/+R4XTDv8aq/d/1vgTx5I1bapZ8
OUDNZ5OfefLdlKC/l0xwKp6M/MyTcS5ynz+udy2YJ7+dPe75oepOxZO5P7Fe
Vm7+fq59OffPMW/0D/Pkv8+M7NJ4g4Png3nvgnnyD+WbNP7mM6fiyXiPgnly
5ztzBq467VA8uRTNZ/j9kJZrptVY7aqPH9WHeXJHKR/5+V0O5snHpXzmyVx/
c/9O+od58jjaT+D3p0v/0H5i4f3E/D+LjC/thyY/8+QVMr7Mk1Ef5snLZb0w
T8b+yTz5jsxn2v9V/bEusi7rlNZvi5rP5p0T5slHZT0yT8Z7IMyTs0n5zJOx
vpgnh8n+wzyZywdPTpH9h3ky+od5cqjsn8yTcd5gntxJ9k/myagP8+S7sv8z
T8a7KMyTW2369En9tk7Fk/F+C/Nku+gX82TkZ548WfSLeTLOn8yTob/Mk5Gf
eXJO0V/myVx/rAucH5gn47zNPDn2oz8mXV3mVDy5gZy3mSfHyHmMeTLyM0/G
eYl5Ms4/zJPhL5gn4z0W5sk47zFPxvszzJPXi34xT8Y7PMyTE+R8yzwZ79gw
Tz5w43SbtI8TFU/2pv7EuvCU8znzZPhB5snDq470WvDSqXgy3s9hnvyx+Avm
ycjPPHmp+AvmyagP8+R08UfMk/GOEPPk5V6zAxZ2SFQ8meuPdQF/xzwZ7wIx
T94q/o55Mt4vYp6cWfwp82TkZ56cUfwp82TUh3nyUPHvzJPxfhHzZPhx5smo
D/NkcB7myeAAzJMbit9hnoz1wjwZHIN58oD5IzM2bqr6wby/xDz5hHAV5snI
zzy5lnAV5sl3hfMwTy4nnId5MtcH87OpcCfmyXgninlyWeFOzJPBwZgng4Mx
T0b5zJMLCpdjnoz3qZgnPxAuxzy5k/BG5slfCD9knox9lXnyAuFFzJPBOZkn
vxMuyjwZHJV58gLhrsyTwXuZJ4P3Mk9mbgyeXOLaoCtXdjkUT/74zPqJPt4O
xZPbpZXycHzrUDz58a9PLvZfbFc8Ge+rME8+1Gykb1uHXfHkPG3PRwSMtSue
7HdkxdxMXTg9zHpy/85BGYvYFU8uNrBHlmzl7IonTy23qsOzanbFk/G+DfPk
Wz3nvW62w6F4Mt6PYp58P3H3k4N3HYon553lW9FvgEPxZC4HPHluVd+sjauo
frC8azzTUayBXfHkC+1Ob/m9nkPxZFM+8WRL4WJnQ+o7FE/G+1fMk59Ztw3t
tNeuePLccrbN9v12xZMd7WZumF3RoXiyKZ94crs7G/03V3Ionox3t5gnrz/f
8PP2d+yKJ6/JUnd0aIpd8eT0JhOqf+56/8fwZFM+8eS8+3OXs1Z2KJ6M976Y
J99qcatJ+gf1wbyq0etepvHX7Yonj6rZaVmrFXbFk4vTPMS8Kl2gV95OW3m8
XO+bMU/+Y8LYtw+j7Yon430n5slXju3Ltacmt/eQt2kv8eSGHZ622FtRjZd5
94x58tg39aceD7Mrnox3yZgn9wu+b/3rql3xZORnnvz4Vu9Vez6YP/AveG+K
eXJIgde1x1ZR89PkZ57c6MznPhnC7Yonc/0xb5NXTS30+lu74skB8h4X8+T6
R8b2qlJZrUdVf8xza4FnZZ61UvuJeUeOefK0gzubtCllVzx5m7wbxjx5b/DN
CpMKcX4PD+Rnnty/Tqv5i9qofdLUh3ny4LV91t2foeazee+OeXLdh2Vu5bqd
oHiyeYeNePIj0SPmydjnmSdPreXb5vfyduYnqnz4l/nHvlk5JbPqT2/uT6yL
u0kV4maUVPPB0lfec2OeXP+w5+WZRe3Mf0x9mCfvfljmXNKSBOInH7yPRzz5
eOyFbldH2BVPzirvzjFPLuOx/s3lAN6vXPmZJ3c+M2n9zQqu+rSh+jBPztut
4/Ni923MD13v+BFP/tK6el6PXdyfuv5YFxPveActyedQPBnv7zFP3hs4uUTg
Vld9WlN9mCd/0So8W76lNuKlH7w3SDz53NArT8p841A82byLSDw57FpSxmnL
HIonIz/z5Ow30lI+vWVXPBn5mSfjXOQ+f1zvMTJPHh0d++hBe7viydyfWC8/
jlnXtvBe7p9j3ugf5smea1r4j7Oq+WDeaWSevO9U6sKS4QmKJ+MdRebJpdJz
/TStdYLiyZ40n+H3HQtTbKGervnsR/VhnlxCykd+fk+SebJTymeezPXHusgu
/cM82Z/2E/j9PdI/tJ9YeD/Buhgj40v7ocnPPBnjyzwZ9WGe/LmsF+bJeMeS
ebKnzGfa/1X9sS4q/lRv53cFHDyfzfuczJPPynpknox3LJknV5DymSdjfTFP
/k72H+bJXD54MvYf5snoH+bJeWT/ZJ6M9z+ZJ1eR/ZN5MurDPLmc7P/Mk3E+
YZ48Ynpq0fJ+CYon491R5sm7RL+YJyM/8+RQ0S/myXhHlHky9Jd5MvIzT24g
+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
8on3DqsT2mLngQjFexFXl3nvuZo5lxUeGK54b5GZsb/7LQhXvHf5+B+bvf6g
/DZcPvFe2/FxTWpvjFC8F3FIFe9Nebyt1blwxXsPtZow6fq/v8u8d3tqeuCT
dxGK9/I8xLw6Uu16m1lVoxTvRfxi5r2jy2b4c1OFCMV7u0lcV+a99s058+7f
zu095G3aS7x3VrkyDy//osbLxDVm3nv/n2x5a5cIV7x3ucSfZd6bf0P4tu23
ryvei/zMe7d23dz7wo4IxXsRT5l5795rnbtOP67mp8nPvDd2afSYjqevK97L
9ce8LX2zQKcvz11TvPdPicPLvPejUsXHn0iOULyX6495HvCF37KgALWfmDjR
zHv3+1yOzl/omuK9ryReMPPe17OOR3bKzPk9PJCfee9X80b+OGSH2idNfZj3
bq/Wss2Dj9R8NvGsmff6BP8RWi5PuOK9VsRfJt7rL3rEvBfri3lvtmPHs8d4
X1e89wSVD//SMPemPvb0q4r3vqT+xLpoXiJPoYi/rijem1niODPvnbnsfP8h
1a8p3ov6MO+d/bTyjDX/1sudn9yzfoe41cR7Dz+MCmg76LrivR0l3jTz3sgS
fgm+AdcV70V+5r2Fpu5p1G3UX4r3jpf6MO9tl/GffrdOnVa89xTicRPv9Skf
nP7u9XXFeztR/bEuavt2X+t7KVLxXsTdZt477PKw4fsGnVK896TUh3nvf+S3
nKT6g/fuHRDQMSgv8/MP4p4T782SrVXBNyOjFO9Ffua9zoGbb07PEqF4bybJ
z7z3gZyLiL+ZeOvMewe3mF++U2i44r15qD8xz0fH3Sy7pWao4r1W6k/46zWr
xt0fUues4r2nJT/z3jvtZuXIH39V8V7ET2feO6BA2Qu2pIuK93ah+Yx53lfy
oz5IH03zGf46SepD69fEi2feu1zay7y3E9Uf62KE9CfzXg/aTzDPh8p40f5m
sdJ+An99S+YP7bcmP/PegTL/mfc+lv2Qee+iXqfzzjkTqXgv5hvz3j2yXpj3
Ir48816Uz7wX64V5by3ZH5j3cvngvf/RXm+0l3lvC9nfmPcelvMA895Gsr8x
7+0k9WHei/2Zee9UOT+o73vHfb/t8+NnFe+dL+cZ5r3fi74w710o+Zn3Ql+Y
9+J8yLy3kegj816L5Gfe+4PoI/PeYKo/5jn0nXmvn5yHmfc+LHKv76obVxTv
fSTnYea9z+W8xLwX+Zn3WuQ8w7wX5xPmvUfl/M+8N+BOoLffuCjFe9vKeYx5
b7Ov31WqoubPv+tC9IV5b2Y5j6nve+X8ybx39orLbVrUiVS8d2CpTzoMP8T9
c9b7MfUn1kUROT8z7+0pfo15b9HY+WO8WkQq3pv4sn6Wy8ncn/es++X8z7wX
+Zn3XpfzP/PeXlIf5r15xL8w77WJ/2Xe+/OGiJRZhyIU7+X6Y13AfzHvDfOI
K9ArJELx3nviv5j3BgsfUN/3in9k3rtI8jPvTRD/yLwX9WHeGy/+mnnv+Vrb
xvX/LULx3l/FLzPvXSz1Yd4LDsO89434dOa9W8WPMO/FemHeW1Q4A/PeA5P3
N7+9QfWDZfSB4pPP71XjaPlWuAfzXuRn3vuXcA/mvdeEwzDv/VU4DPNerg/m
5xXhQsx7j2cpcXRvtUjFe88KF2Le+6twKua94FTMe1E+895uws2Y95bo3iq1
Xd0oxXu3Czdj3ptPeCDzXo+G7/ke817sq8x7DwvPYd5rFQ7JvLejcEvmveOF
czLvPS5clHmvXXgs895g4bHMe8F1O/1vvWQyvDdLUt93OSskW/55315wPCvi
FSI/uOLijd2CxzdxpSP/V15jd+x6cMuk4xxb9P74r+7cuGXKb4V9QOInIj/S
76yf9LT8OVc5zWQcG1b6svPAeFf6+1E85L3oSOLBzU9d6d2l/9N3NXr8aSNX
PTtL/w/esLryxDmu9IbS/+08hi9eV9RVH/jHWv4NX57c40qH3/RdWqG6R44U
k47zcPcL+YdbhrvSsV8tnhN44XGjlH/3rfc8EPVcJ/EW30n/YFyyf1ekz+HQ
JJOO/n96LOjGmP2udB4vpKP/41Jvz7nZKtn8LtpbUOJOvvuPcTH1kf6/enP3
x11Gu/Kj/xFvFOlo16CRpwt+Mv+2Zaf8LvpttMTfRH6MC+KcIh31bDorIPXl
n650jMt8ieuKdJS/qOzUuj1siBurxwX5kb5M4u0iHePVo8r6iJO//dtvwqnQ
rg0Sp7WTcCqM18V1f8bn8ko26Riv3St65mlaKcWkY7zmShxbpGO8vPP2bJLa
7rbl7X/0D/JjvB5I/FxTHxmvwt0rtyx37LbwNMNnrA6J74z8GEdfiSOMdLS3
08gNV4dk+XccpR/Qz4Mnrhs36oCrvagn4k0jHeN4af2S0VGXXPkxjvUlvjbS
UX7UltknHzmTzO9iXBCXGfkxjqMkrjfSkf/09VG/x65GXOZkM16VooavWfEq
2aRjvELbZLgS7Z1i0tFvduk3pGO8/JJq1C60LtnS8T/6AfkxXohXbuoj4/Vj
zjntO6z7t73/+zsGnmBd3Hr8+UzlXfXHeCFOOtIxXoPXbH0XmH7LpKM+iFOP
dIxLnn+yXcgb5krHuPw8Z/zr8edd6RiX80WqFy767Jal/X/0P/IjPX3XXa8T
JVzp5vz2aMPNPSuTzPkP41KjjC264TrX/WGMy6rAI2977nbl5/5BOsbl00r9
PfPdv2XS0f/zs7fvWPqAKx39f7zYs82FN7vS0c+Pqqx4mWupKx39fELyt/6P
fkN+9D//Lvqf64lygqld6P+V1A/o543LX9XcV8PVb+jnmtKf0v8W9DP6H+no
53Myvkg3/ew+Hwynwvz5/kyZyk1SD3hze5Ef/U/z0IL+p3lr+Y95bkH/z5L1
0sSd+5m49siP+tC6s6D/sX6Rjv63ua93U/5J2R/a9Iqr373tX97c/8iP9M2V
Mg67195VDsYF+4/8f4cZl1OyXyEd4xIt+yHSMS7YP5GOcbks+y3S0f/+si+Z
35X+7yb7/Fv3c76Jn478GJevRC+QjnEpIbrj9x/9ifwYl0eiX0jHuDRy10Ef
1B86iPwoH3HhkY7xgv4iHeOCuOdIN/oiOi7/b+uDcfGWuOd+/9EPcn4w+XvK
+QHpGMef5XyC8pE+1v1cpPof6Rjf5u7nItU/pj4yvjiPvdepTKb8unK+3S71
QfmF3c+HPv9x3vPBuF9xPx/6YHzpPOmD8b0h51LUB/UfIudz1Af1X+9+TvbB
uP/tfu71wbg/kXNyt/8Yd+RHOuKhIx3zAedwOc+b8cV5HukYxxbuvkD1M9LR
z+3dfYfpB/Ipph/I15hxIR9kxsVbfNP7/z/S/Yb8GC/yX2a8iouPQzrK6eju
+0z/L3X3iaafo7M2CGq6wpWOfoYPZX+ap3Id//n+TuVPz0t8IvanvnP6vbWm
OJQ/7VRiy/dfHnOlo/8dTfw79TnsUP4U8ZjYnwZ8W6x88D5XOeb8EFD9RctQ
VzrGJft3vmcyhrvSMS7bT78881kWV/3R/01ybj/r3ciVjv5PqlDk57RFrnT0
/6xmC745dsuVjv6/1KBz2c8yuOqP/s9Ts/DdH0q40tH/07Lu9i2YNVH5U8RV
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
f9ps5cxl4T5xyp82i9gyuHKPWOVPH268cGf1uRjlT1PkvWj2pysD7w/NWitG
+dMmQ1tM3t/MlY5xedB/04IeXV3pGJemG+3X7zW7ofzpqoRiBb6vdVP50wWZ
u56Lq+iqj4kvU3VBUN1SLp9r4tFU/ORN596udPMdafnpUwJXuNLR//s6vqi5
57RN+VPEfWN/mue4T8j3T+OVP/X6OiWkxoB45U+byXixP12+b//aP36NV/4U
8d3Yn+Idb/anG18E5v2svE35U7yvzv70myJbm+340ab8KeK4sT/Fu+7sT78s
1G3c3tM25U/fyjv27E+bvPq1ZZNIm/KnGBf2p7MlvgD70/DXDwZuD7Ypf4q4
aexPS57ptGWmvysd47W8w4MGlU660jkuHvvTV/5pe7vF2pQ/Rf+wP0U8O/an
nTy3Ddjwq035U8TXYH+KuAnsT5/8cOxll+425U8Rv4z9KeLBsT+dlfr16b/t
8SYd44h4Z+xPa9R8WGPSkHjlTxF3jP0p4o6xP/1l0cPKpYbGK396qdb4PA8+
8HEYrwr9ki+EL7Mpf4p+Y3/aN7Vn11gPm/Kn/+x93w/sTxGfhf1p0dNFel37
PU75U8TPYn+KuDDsT68/OFb1H0eM8qeIy8P+tMTCDnu6lYxR/nSqxCFif3rj
854/FugUq/wp+p/9KeJtsT8dUSXnkewjbyp/OiDrj38862lT/jQ8cGepsJtx
yp8ivhLSzb2SzmkfvTXxvFz+FPGbzO9K/2/Otzj57h/Ryp+aeF7yh37eIvnZ
n5p4ZPKH/uffRf8Xo3qinKbULvR/JPUD+tnErZM/9PNA6U/2p8Ol/9mfYnzZ
n05znw/GB2H+sD9F3DT2pzQPjT8Kd5+35vx/232eGx9UXNYL+1PE8WF/2sl9
3Rkf1E/WL/vT0e7r3ZRfUfYH9qfof/aniAfE/hT7D/tT7FfsT7Efsj/NIfsn
+9M5st+yP/1Y9mf2p89ln2d/ingx7E+hF+xPO4rusD9Ff7I/Rbwb9qep7jpo
zu3QQfaniIPD/nSN6C/7U8R5YX9aTnSc/SnivLA/RT+wP8X5gf2pj5xP2J9+
4X4uUv3P/rSy+7lI9Q/706/lPMb+dLqcb9mfjnI/HxofROc944PofGj8Dp0n
jd9ZKudS9qer5XzO/nSS+znZ+KMm7ude44/qyjmZ/SnGnf0p4r+wP8U5nP0p
zvPsT8kXqH5mf0q+w/TDSnefYvqhibuvMeNy390HmXGBb2J/2sTd35nxIv9l
xgs+jv1pc3ffZ/rf190nmn72/XrAqe++cP0u+jlYfCj70yqjt6blLBen/Cne
e2R/mvNl1vihc1x+EPlzjXs4I99R1/1W9P+lpvFVC38Zpfwp3s9kfzonz8W4
4tsilT+9EjL2WYfmrvIxLnm+/cxzZpIrHeNSq8rqFzcHuspH//s9y2eveduV
jv5vc/jm0Pr5Xe1C/1vGb3rp09SVjv5PKt/zXM4RrnT0/5zo3MsTlrvS0f8V
6g95nXY4RvlTvIfJ/nTSpXTr67s3lD9t1fJ0zmNzY5Q/xXixP+32qvTTgPXR
yp8iXgz7U4wL+9Nnw2tNLXwjWvlTvAfL/rRR/hnXnrSKUf4U76OyP8U7tOxP
A3uHfFohLEb5U7y7y/60RqJXj1zdYpU/nSvjwv70iryHzP60aBVHyzCPG8qf
Ig4L+9Ne1iPTvxxzw6RjvP4Y7fdN9JFYk85xdtifzi/wR0jeErHKn6J/2J8i
Pg7702H9t45I/DlG+VPEQ2F/ijgy7E+vZuzTeUWuGOVPEQ+F/Sniy7A/fbZo
bvKLra50Ew9C3j9nf/rD5s8OpP07D9mfIo4J+1PEMWF/Wmjs9Edr+8Uqf/pF
1LggzzMxyp9e7xe26O8FMcqfot/Yn65vc6FlgyYxyp+iH9ifIr4M+9MVXwza
82lytPKniMfB/hRxTNif5jq42yNubpTyp1aJO8D+NFfxj84nT4hU/hRxOtif
pjqPt47NGq38Kfqf/eliiTfB/nT1+G1tPj4eq/zprldjCuYpE6P8adbYZn/c
iIhW/rQH4qfIH8Yly8n47y4PClf+0cQfkT/z3SnigKA+Mi6cjv7ndPQ/p6P/
x1M6+t9T6ol0c3+B2oX+Rz8k5Zxa83Lpc96o/wQqH/1v4uPIH/of/cy+dZWM
C/vW1zLu7Fv7us8T448wr9i3oh/Yt550n5/GN+V2n8/GF9D8N/5opawj9q2I
R8C+ldaj8UdY1+xbR7rvA6Z87BvsW9H/7FsR14B9K/Yl9q0FZB9j3zpD9kn2
rf1lX2Xf+lT2Yfat02W/Yt96RfZ/9q3QX/atiBfAvhV6xL4V/cm+Fe/2s28l
fTTneegj+1boLPvWY6LL7FvxXj371q9F39m3Iq4c+1b0A/vWInKuYN9aXc4t
7FvpvKT6n30rnZdU/7BvbSjnNPatjeXcy77V1/3caPwRnQONP6Jzo/FBdM40
PshPzqvsW3FuZ99K52fjm+g8bHwTzs/sWwvLuLNvXSPv2LNvnSznc/atX8g5
n31rsrtfUP3MvpX8iOoH9q3kd8y4kD8y43JZ/BT7VvJ9ZrzIl5nxuiz+jn1r
Hnc/aPo/t7t/NP2cc3y52qE9Xf2JfoY/Zd+69MKRmZ2nRCnfGirvVrFvjW84
pmaFJa505P+9Z9VdKdYI5VsDypX1Wud3TX/3K+90sW/1c9RcuD3uL+VbR3c8
VHxEXlc6xmXhqVp7arS9oHzrxaalT9ef78qP/s90NueNJpcuKt/ayD5335yO
l5Rv/S4100/Xoi8r3zp0RMrAK1evKt+6N/BWqUFJ15RvHRox7OWDa9eVb90i
73qxbz1X0ra6k1+U8q2B+w7GvjsYqXzrKRkv9q2rbcWL/PkoQvnWU/K+GftW
vJ/GvnXdM+d3+X+LUL4V79qxb/2riI+v/XCE8q1n5Z039q14T499a9SkuTnz
XY9QvjVB3g9k31qzxccVs30aqXwrxkX9v6q868i+ddCb5Ab1AyKVb8V78uxb
fWdO9cu0M9Kkm/t01ZYln6vtSud4AexbN571970VF6F8K/qHfSve+Wffusuj
a+6LWyKUb10q74iyb8V7+OxbV13ofrfMvAjlW/GuO/tWvIPKvrXPxPs1G8x3
pWMc8Q48+9Z7+7eefFAiUvlWvMfOvhXvsbNv3f/N0S0VPo5SvnX+gmpxlpBw
5VuvLWk0+Yeb15Rv/Vn6jX1r2WG5B97eeln5VvQD+9bf5V1c9q2Rp95VDGx/
UflWvCvOvvWpvMfLvjV19c371U6eV741o7yfzL61wrfJw+8GX1S+Fe+fs2/9
7GCWY78UC1e+Ff3PvhXvkLNvXfDk708L1o1SvnX4/kGVzrQLV771daNKG5tU
vaR861i8Ay9/GJftc4pMW/FTqPKt7fGOuvxhXI7hPXPUR8aF09H/nI7+53T0
fwilo/9/lXoiHfUcQ+0y3ED6gX1rKJWP/jdxBOTP/L+29DP71vkyLuxbS8i4
s2/t4j5PjD/CvGLfekLqyb6V5qfxTW/c57PxBTT/jT+KknXEvhXvKrNvPeK+
Ho0/wrpm37rIfR8w5V+VfYN9K/qffSveZ2bfin2Jfese2cfYt96VfZJ963TZ
V9m39pV9mH1rE9mv2Leulv2ffSve72XfCh1h37pd9Ih9K/ZV9q29RdfYt653
10dznoc+sm+1i86ybz0qusy+Fe/usm9tJfqufKu8u8u+Ff3AvhXnCvatteTc
wr71gvt5SfU/+9Zo9/OS6h/2rTinsW8dL+de9q1n3M+Nxh/ROdD4o7Xu50bj
g+icaXzQSjmvsm/NIud29q3b3M/Pxjcddz8PG980Us7P7Fsx7uxb8R4v+9bz
cj5n3zpEzvnsWwe7+wXTz0Hu/sL0c0N3P2L64WN3/+IaR3e/Y8aF/JEZF/gp
9q3H3X2fGa9u7r7MjNc48XfsW0Pc/aDpf7u7fzT9nKHU0T+HDXL1J/oZ/hT+
Bf1z50rxeh3bJpl09ENVv9Qtj24kWbbJuRHjMnZirW1rGrreB0b/4B2wf+i8
jffHcP7E71aM3D/pTIsU9Jt6xxV+AfWxF+ka9tOE25audG7He6fyvrHxHQ3k
fbb3+9tjU3+fKWtbnFjiSjfv6T2rNvFtbLJlq/wuxqVw/IK6ORenSLsem/oP
Cqi282B6CvYr9X5pe6rnfalnGuoj7Vq6etaZe+nmHTn1fub7cqJM/XfOvf1P
6uBkUx/z/2L73rSp1ibZ+BSMSyN5L9FPyjHfpci7iG+kHLT3u3z++SMKJ1t6
SH60d1/nkR711yRZhrbp9cm8CudD+P1M5Ee7klOm9Kr48JYp39zTeXS63LTI
JEs7OVegXekDtsduK50s+0mUaVfj60Va+O+/ZWl//0y7+2dOhKBdeIezq5SD
dhVeVLdAvilJpj5oV3DrW2Uvh+BdzUMh/C5lU8mP9VVEyvFFPaVdqE8bOnfh
Hcv3+9tj064B0t62dO7CO5atpHy0N0n6LV3KQbumF+nS/0HVJEt3yY92Hf7z
88ZPHyRZOtN5Eu9zZngfJ8icWybI+Lam8wPeY/Sjdi2Vdkm8IdMPT7q3mbHz
j2RLL6kPxhfzU9av6Qe804t2ob05LleNmNPTvA+s3lFEOegHj/ZDZsR4pphy
0A9Yj53p/IP3JGUfM/3wquW4WsdfpZj+Md9byj6A/OZ7UXnnuSPpHd4PlP3N
tMuz8Mzpjw+kmHJQzyqy770lHce7iMiP+vQ8vqhkz3/3k3TSZbzXt1vyo//H
yP4M3Ud/4j1A6D7qiX0e+fndP+RH/aEXwqOMHvWZ+XaC/RDeZdXv+6Eccx+8
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
K9BPeP4O+sn69KUh6gi98BOev/M/1mB5lA==
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlgmwTmUYx889lqN7vmMbQpbuzXZxLdnDtW+5lpuQfc1gSJbIlGEQiqJo
DKUUarSZokWyL9mXkZr2lEJikOxFv/88z8z3zPM///O8z3m/9322zKGPdx8b
BkFQIS0I8qGnR0FQCP0iumEcBN14WTgJgj7oOvD90I3ge6KLwhdDeoMfiM2+
K7gIXFlkOLgZXGOkGms343MwXBZ4I7gMNo/yvBVcD5sO4HS4gej7sOmPHuLf
3YtNXWxa8Hw7FQT/IU3A98Ot4F1pbN5FfxCZTVpiuCr85+g62h/8Da0DDwDf
jU1TxyXBo9F1sX9SfnmeiW7L+zbo1kgIl41MA+/H5250c+x3ovOwW43uyvuu
4DfAD4I7IK+Bu8B1B78Dfkjnh2zW/4OriowHt4DLRZaCK8Hl+Llt4ltjxIE/
BX8Ibgj+Btwdm/d57ol9HrIGfAL+kdj2NQJuALIefAb+LnAuuAHvx4OPggty
4RMcD4QfC94P7qO7A88DdwDngBfqf4Fbgj8D/4nPm34XOv8x8PvAt8D1sWsv
/4mdoe50HXxF+AI8f8262uB64O9SxucHHwPfC/6XmNwLztY5wB8Fz4mM3wfO
hC+KzwVwd+BuIwdThkvCL4G/DoYKZnkMNMLPdYiJPCvuT/E+ApQCFwvN/gay
B5sK2BeGfw7bych5+O3wl9Hp8H+kmQjP5P2EyL71TGR+5f90mq3lCIK56Fu+
N+1Rd/oYkp+XzfnWKHCmx0JjbCYp7uCfQteAr+2x1yY2/mlwdbht+K0eWEwq
X5RjpRPTei6VWN4qj4b4N7PBuyKLa91NvsRyTDaK+fbIHPj6ieG5ijnf50hw
hcT86D/cC66CjPMY1h3rrpXX5TzHVQfKgxd4/NTx/GqnWIot57IS25P2dhzd
GX4ZfOXE7qYoslOxxvN8cEedA3gDuAe4DLoMa8uiZ7D+Kmf8JfZX0CUCu1fF
VRHw87yvoBoALodu6vGZg26p/wRurvxH7gnsnHLcRud10+NK8XLJYyAFXyK0
bxUOTYTTtc5j+ziLVvHtLPAR8OLI/tePygV0Oexj9HzFJ/owfLnYYm8HOCO2
ON/v8S+bQ+BWXldVQ9P8fynHOiIZgeVhL+zbga9EFreKz/HgsvB/8bwtZfEa
emzP8nhWLCu2ZbMV4jp4D0ajOfv+qvnYRNSQdfoe+Bh6r84uMLvBsXFPqFeA
d4FHgnco9rDZjn4dnxmqJ/ivH1o9r6s6jFQJLG/L+v1moldHdi8foxsrHgOr
7xX9vlQvsv088xRDfg5V0WO9lip2m3pMKt4WIcXhK7HHiXC1Aut/05UH4Bno
KaHl2mT0VM8p5eckz1nl5CykCXh2aGu0VvlzJLKcauC1XXmU4Xmjb72MHur3
qNxVreMXTI0sThS389QrE/uGcueI58tOdK3E9qr6cIJzLA1eqroFrqR9x1bT
lBdbPK4KsHZKZHGlGjU7stwpqP8VWX/U/1WN6e53oR7f27G44V5PRqBfQeoF
1sOW+JksQn+ivAIvDq0Hqm++hz6TZr1MPa0b32oG/pVvve1nqJ7aC8kE90Av
d5/yfVL9Xu/Z+MOs/Uj7Am9Ct8bmi9D6lfxf5DvDFE+B1dkRvmfVsAOR8epx
axUTgfXUU5HtU73sXGT+BuH/58hs1PvW+/86EFqeKF/OonelrC6Ux+eh0PLu
IPqnyPZ23uub/Mhfv9je98f/hZTFaw24TrGdX1ufI7R2RWgzjOajEomd25vg
TqrViZ2R5o1aseXQt/j7BSmpO4st14rhZyH6t5TVzaqqKzx3CmxOOALXHnwY
PSA2PQ7fJz2uZP8qduXBp+GyYsO/p4xXPq5B34jMj2aMzbwrFFp+pfOcF9i8
UdznS82QG/ysNoZ2pzp/3YPOQbHTRnftc47mKM1db4E7wx2LLNc0/+icxXdL
rPaqjz+r2SFltV5z41VwTXDN2GZL1XslwVe+T83AKz1/Nc8pRhVjzbVfn3M0
IykOVccueD9V/VkZ2Zmot5xKWb/SXb+A3s3z3x4bLXy+Ui/TXK0Yv5yy+Uu1
9KXQ5kndb25ifUHz+TSf/RT/fRPrZ6oPyvdc75vtEpu9Nav/o29GVmuHJ/Z9
9Sb1RtVk3ZHuSvOY6uRa8LLI+kh1n1e3sHYYa7eicwKbXzWbqZddxH+12Grz
WXCEXafQ6vNAnxXVo895jN3xGVW9YFRi96B6onqf6/W5C/qS/g9Yf/pKymq6
7quX72eo8jFlfVexXTm2/vk93KDYYixm7SWvgcopzRKa95Yrr1O2T83Dq7z+
qw+0iq3GJ/jvC+4Cn7+Q9cr8ms0iyyfFeanQvqs+/wP+rim34cNCloOab6/5
+ajHnQH/D8aYdX4=
            "]], 
           Polygon[CompressedData["
1:eJwtmHm4llUVxd97GM6F73tlhgQEQZB5CBBQBnEAHFBUCFGQydS0gUEezcon
S03NTMtMyzE1SiWRcgRRBhlFVHAKJUcEFdMEBEW09XvW/mPfe9aZvnP22Xvt
vd8OM2ae9qNUFMX4mqKoq/8vVoviBcm9uSj+Krld8i31N9OkLeofWxbFnWof
rb4tGjte+C7hAayN+bdJXtXc12KvbhpvXXhP+vol78ncV4RflvxJ7T9LXlK7
vsYP0HjHSlG8KdxI+CDhv2XPrSfcsvCaTcJ1hJsI/074v8LthdsLPyC8Q3iM
cJvC91ki3EC4gfBlwvslX0ku1D3mSv6n8UM13qrweWZLpJpip/5slbwv2SbR
0YrLNfac5u8XbizcoeI9Nmr9cYX3flrjH2pc/4o5ws+r0V3jTYXvEX5fuG3c
52bhbcKthNsJ3yr8H+GWwi2EbxL+pOo7crf5ko/YX/IXte+WvKP225I71b4r
u90s9E3ffdm6QUfvxdoOah9YeA/O8EfJ1qrP9oGkY+j3DvVP1v0mSc7UXSdJ
+qh9mcZ7aHxZto00SbYB3neqxheHvXwkPE74fuHDhDcJHyv8e+HBwq8K1xWe
KYxR/kBylH5jhKSr+rtJ6khGqv9Y9pTMEX5R/0dr/Zda/4bkdcl49X8nZL7G
hxQeO0v4UfYV/lD4U3QquUD935ecI/kudqC+zySl2tXSZ+As56m9QuuHa/3W
7LlPCp9YeA1970nOLT2XPegvamVHtf6N1Zy/8G8P0J79JQ3VX5GcLLlX40do
fLPGd0qf44U7CC8Qbqvxc4UPEf6XcF/hK4S/Lbw2e82/JSfFXtO091RJRb9d
lWzWfhXNb6v585gr3EX4YOE+Fb/tGuGTCr/xCcK3Cg8VHiv8huY3FW4kfKPW
d0Rvwhewh9qDJNeofTVvrPY7mjMMW0dHpe/wILqt+m6Pqv0INln6vQ/S/0/k
L720ZiX+LDkG39fYGI31kPxE7b7qW62x4cIfaP52yUPJPoAdp9L20Qg96P+h
mv9Yts1yr7rSRb1a6wBugWPQzWzNf17tseprUGtuwLawMTjip8L1hffo99Zo
/i+zuWBb8MMt2bpBR29p/O/ZvjxY+JuY3xBb0dxnquYT+KGO+i7U2FP4d435
r502vjibl3eob1nVNjuCt0+25Wuy58KZK2Ic275Z+BiN7xIeKfw4/lLaNg7H
l5Nt5P7g9wHCX1btg4OEH072TXwW370dHyvt13AjHAnHX5HNbV/qfOur5qjm
ws2TuesF4f5wKZxY+g7cRc3iIo1dHefnzsur9h3s5elkH6qvNxhV+E14m33Z
vrcSfhDeHfd7TnhmaV/GXpYn+/QlwvVif3TLnuy9VPK90hwNV6+Dc4SnSOen
xHvDLR/H/fFxfJ3f5LdXSX5YmivhZjgazrwy+27ccWnYdyfhE4k5Glgi3K2w
v8Ar3Svm/nbCH1dtj/hmT+HdwtM05wm1F0lmxHvwvnAY3Iov4bvHJfsUOkAX
J6tvsvZ+LZtbb1PfKHwlmwsfFB4h3KniWERMJDbu1fge/Ed6ryP5Qn0DIx4R
f/cLD414QXxZJ+mu9o/V17O0Te+K+IitH1uxr/4MjtL4r8M/8J9VVQttfOoX
GlspXGpuM+E/ZNsEb8cbtq1YpzsiV2kjvCHiv45aXKv5s0rrgLufJRlSmovg
pKFqr8NYk9/o4IrjHfqvUd+zGrsuO5YT09cKr5Z8UWObxraZ802N35216BBd
LiCmqL1Kfb01dxacU9rH8DVyJnKnt7O5lDflbYlT85L5bYLap0d8fEAyUe2X
s2MlfYy9lZ1r3S18ivB24RPCHuCDFZE/5eQ4jM/he3A4XL4zO/bA8XA9sZJY
wxk4yyvCA4WvFx5WOp7hb/cJnyb8UHYsmsAblT4DZ4HfT8X2NN5P478hRgmP
rjg2EaMGl74jd8VH39XcJyRdiDXkKBp7PJurJ3J+fJUYIzwFm4MPJKMiXpH/
cF50hG7g/690/31Vn3Nhdn6JLtAJuSUxkvOcLdyqdPzqIHlW/esli+JMnGVa
zJmu/2uy13YSviWZ0zZkC3fmroz1l/QLniUWkxORG03VmpalYyL22BNO01hn
4esiPxlT8dpLkzmaPXoL9yrNo+TXrUvvxZ7Ls89+fsR/7rA28lFSjl+FvWLb
2Dy2vyb8DR9sX7G99lF7nMYPKJ3T4rv48N4a2/++GvM7mBjaWeNzIrYS8+Ey
OG2YFrYpfUbOtiLiOvnKefBlvDFvPSlZr8QM9uY38CtsCts6XdKitA/NTT4j
Z0UXl4T+0clerR8U8R3bWRD2eZj69oQt0KYPmxio9Vcl+9DG7HzyGOF/ZudT
5J+c85ns/AOdjE326VXRR25Cjsrcz7X/qck6QTdNS+uyT+QnT2VzPlxPLtkk
7t8lzttF+KbkmEvshfP7Juck8+JM5HrkvJyVHLhr+Bm2152cJJnj4XrGLk72
QeagQ3QJRw+p2CfQA3puHjI52ccWhv13Vfso9X1ddb1ADkPuAmnCAfg5cRpu
IM8iHgxL1iNzhifXGKytET487vuPbB1cFOdBN+iI+HBGsu6oZw5JrjmoPS7N
tmVsmloLG/46bAXbpqajtuuRXLuS/1Frsgd7wTlwz5X4VOkYhm7RMbFtYfDL
kOCOR0Lf2Cy2+1jwUa/kt14f/EbOC3fg93AdPtw59idWtkiuXcmXGwcXb4lY
gh/hX7trXGOST8FRcBUxj9jXW/j1yKfIL/aFLzJOLPqsxrGSmpfaDH19WnUO
QS5BfUedOD/yg87JtePc7FyTnJPa9KrIV+CHjVXndOR21ATUBjdkx1ZiLLU2
OQa5xvGSXdWw4cJvjC8+GfkN49QzcDbcDWfBC+QM5A4HJteqW6I+JV9GV/At
3DwjmX/JKcgt8Hl8/13NaZ0co4nV6Khhsk7QzcPx/tSHuXSdjC2OEK5Xujbg
97FZbPfFiKc/T+ZacmByYTgD7mAP9sL/akv7Abk898W28Vl8b3ayL68OPoWz
qFWoOeH2a4WPKO2zcBf3wZcXh79x33alawZ0gU6o3TdHfL48ObaQQ5FLESOI
Fb+NfAWdbK+ad4kN1OQDSnMCsYT5cMVL2bGHGERutCLwOcncvSnyDfIlarmt
8f2BbxJ8m6BOHZ185sXBb/gyHNO4dA5ELkSOQa5BPrYhOYf/PNseeZN6EcvJ
wZfG+MSKa5Ybk2scapmjY0/2opYh5yXXIefZIfxmdj5FfjOydI57R8RP7k49
vyw536CWhCPgCr7B8C1musaXJNcc1KqckbNwprNL1+jchTudWTonW5ica5Bz
sCc1ArUBv8X3kfXJNQnnnVI61+OMnJUag7qBupLagza1xOjCfdQs1C5jCufh
fNNgjDnnx++TG5KTjZO+zhC+QfhI4W3Z3xfYg7V7Q2foblKcjZyY3DjLqWtr
fWdyUnLR6eEPxFXyRr7t4eP4Mj49WOuuD76BD8i9yamxFWyGPIwzcBZqcmrz
I4Mf4Uy4kxqS2pQahlqGHJM9WEsuR42En8HD1E7U3NRi1GR8x2AMX4SjmQOn
w+34CLksNdKi0P+Eit+TGpGaYFbYHLbHNxe+veCT7MFafJXYdk/YAzGO73mc
gd/mWwo+QQ5B7oCvwHENw4/hvv8DGDOebA==
            "]], 
           Polygon[CompressedData["
1:eJw1lnmYT2UUx+9MTXdyfxcVCmOZMWPfxzpmIzL7ljEo0ijSokz2JaMYZafN
UlGoKDyhp+zMDNkJ7U/WNtUYJiZR6nOec/rj8zzf+z3nvfddzvu+Nzz/6ZwR
wY7jFEEINPYcpybG3VALTgUcJyjUcdKIFfO8Gypcx/kFNqIPQjKxmzzPg7kS
o01D/LfQP6F/hJ+hHl5T3t8V+qFz4H6403ecPnifoBPR3aEH/ECbBnj1Icza
RuI3gihYjJeKVwN9F9SEgXgxeOnwBvo1eB16E7vXVy3eQkghZw59nA2L4B68
89JX6TfcgP14/Wn3LX41dFWoAlG0vWDjbIb+Ff0bNPH0PWfQZ+Gc5ND+Mbx4
YuHoCPiXd6cyb9vwt8Lvrs7Bp+gtsBkGkfcwDIZ82IGXS04IOhHdXcYF0Xi9
8Jail8Aim5cWEIVuAo3hMn2JJ+8jmXdPxyhjPQHH4Qy8LzFyesIm9Mfwss3V
IeIHoTd6Jl4COa3QLdFZkA2VfCMV/210JrGz5J+DNLxVeN+jy+Ai5Mq6Q19Y
K/VAfj24HOQ4AZ592GPvW4F+B5ZDBjnJMBfdjVgsxIEHyXhJcB90sHmROklD
n+Kbp2E4XileP7y/eL7uat3XsPWVdT7NdzPIS4dM63sWOQPQ69Hr4EPrcwI8
g34FXpX5Jqe/p7XzJPopGOHrd/fKmKAE8myNItFlfO8ilEMyeUmQYvMo4y3G
L2NextDXGfCiq98dSXw0jJI19rXu30Qvk/0n84A3mtxRsFNqlHfU9bR/B4gv
gPlW47ssXkDuNJhu6/Ye8Xdhpc1Btqd1kkUsG3KgGYzHGwdjpDbJCeXcyKTG
j/J8BAbineQbt6Ibob9Afwnt0N3w4iAW/sHbD3/Tlwae7k/Zp+NgLOy2uQgj
NsT2RV/0VWKVMAh9DG8ksdvpQxVYiL8ALtG2KbEVNj4Z5yG8m7yvIe1uohOI
r8XfDFvgO7zWeG3As70/E/8lKCFWXfYI+hq6K7oLdIK2nq6TrNdxG3cE3p/o
jlKf0B5ae1qXUp8XXD0HZe9PQk+EfTYXRehbGEs6c7qPnM/gmtWv1PFtoTru
Al/nZRd6J2z//9wgnkHbwzwfggc8PWPlXF4qex9WQ3Xa5so4iG/neQf8QV4F
XAlorLOnZ11tdF2oY2fnKnJXwiZIkXMtoHMeIWsuZyW09PSOqGNtw+0MDdC/
bPq3gefjMBjvqK2XtDmG/hwipbbwTgR0TRfa/Dp4QRBi9TUBf7z0n1gl8zcV
XY2xFRB/Vs4nWSc5A4i3RbeTcdm6FZI7Bea7+q3tsmaejsnlHaFSW76uZbTU
BrF15K6HFr7uR9mXE6GHnAWyjtAT/bx8g5xeptuh20M0VPX1TpS7McP6t412
W6G+3SNxnup89BAYHqx3yx5ySuGkq2djPV/XMk/2B/SxdXuO+GQ4TN+D8Wah
Y/EfRQ+DoRAm96XkytzLOQ+tfT135+FdYj7Lg/QbS2i/GJrbWSb3THP8yehJ
MMHmIID3OPoJGAuJnn73EXRtYnWgrq/znIqXLue21dBeW8P6nu472X8bYYOc
a66+Q/os/xb9pbZhANyB9zVtv4JvbK1kv9Wyf4Vu6F1ypkCS3Wtd5D0Q4+vZ
FIN3nbY3ZB9CCbnF0IF4EbGj1l7ec8DVOWvj610h99p5vHI5e1w9X+Telvs7
Xva/p3doK6s/qcOr5CwndxmscfX7ciYO431DpQbs/sqzcTwk5wU8GKz/PtKv
QvRUmCF3AF5H66voTujOcMTWP9zT/zb5f5P7t4J5vgpXoDSg8zKLvDkwO1jv
fandF9DTYZrVs9TLFPtuoc2BI/868g/p67na3u6P1egPYE2w/m/8B6ucSUE=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtl3nQj1UUxx/vU3rydH8iSzGyJluUoZS2KaOhRmJskX3flyyvfffy2vfl
te8hVISkZaZ1WkfEVFSMpSjDJEn0+Trnjzvf7z333Pu7z7ln+5Xt2K9J36wo
iu7NF0UxWDETRXsgK9Mo6sa4wOKkEEWlkihqwXoxsCSjFbwaeH9iOpPRacq+
UcibCRlT4MdYm8A5zZkfCb6GvDX4EmM8vAV4EL2m8MB5h5xLlmF+FBzK3u/A
V5AfybK11ro368edX82ye54ER6PfOTU+BN6Y38hGpxHYFfk55OORd0jt/GHw
0omdr9+pAW8ve4AddX94Eec/sD4c/bacNQb5eHAc8hHwNujUZz4U/jS4ljEH
Pg7MYUyETwaro9cJ3pN9E5lPhY8F/+TsbvBL4ADmufBBYD/GJPhgsBd7XwXP
c4fDWWbnFcy7JWbPGZzZx/W174zb7RT4FDrF9Dbsvca8C/Ir4MPIBsBrgW0Y
g+EvgzXcbrVj+x591+Ngd37jIvumc0495gORPyPbxmaHzuA0/y59XyfnPcCe
she8O9jBbfgE2CU1m1fijif8bqfBX/x99ea70VsA3wWuYiyBvw++w1gI3wfm
MabDl4JrOHMlfG1ib90MXgg+hrGM9Qz+vgichXyJ/DExvghcor3I7kRnMN95
OcveawFjBjqj0Jmf2F3Ko/Omn7NTPo7+z+h3QrcvowCyFcgWMWJ4b2R5qd15
DmdsSO07qnHODnA+8u3ga4x58M3g8MS+axK42v1qr/wqsfXi7F3BOW/Ay8Br
ylfQeVDnuS/NBS9yh2xwZmpvrLduwhnDmFdjvifYHu19MrH4HQ5vCX+Ltcry
A2RzUvPlH5F9znhOb4msEL/9tueQ6an56jnWD3qOGI9sLKMh/AtkrzNKwgch
m5Ka73yE7DijnfwY2algPj0VfhW+Ab4Ufgk+Et4/sbhQbmkHvoe8DvLG8N+D
xxL68xkz4fm4YwF/+0V6h9Rskx/ZDfRzZffU4krxNZBzyjFawu8G16NTWL8r
e8MrwesjvyO2+NV73yZfh98OZsXmz4q5gonlN+WZhcHW5A8Zzz9lwL9Y6w6/
kWX7dU5BsDBrbeHlE+PKRdnB9K4zRsAfQ55BdzW8gcfai7HZ/HnwK9kstTj+
BD7a37cV+z4Llr/0jtJRXH4cbL/O6ZxYrtM5XyonM5r4m76gN4zsXZVntedr
36v5N/BGiem0TsxfdKbuWNpzy32x2UX2UR1QzlIOGMPe82BX5DXZO5jfK6sY
8DzfTnuRn3Ud6Sqf/AaODXaObKsc3wv5P8znBntT6YxzG8rmdRKL0X7wW8GK
zivEdq5qx0T0e6SWp2fAS7DWR/EClmP00DvGFiv63qrKn4nFlHxStbUDvAq8
kMda8dhyhvxE+a+H59hpnD8wtfUcvV2wmqfccpfn7aKKh2A+1wf5KMaz8E+R
HfIYmeXxrtq7H9nw1PL9gWCx/wB8d7B1xVF7t7POb5hYTnhIuTYY6rv0nv1S
87dVyLe5LRTLDRI7c6/ra/8++CPIU+WHYDrD1DOopvmbbg/mL6o7zZF/6z4m
n1kMzw+vlVgdVyyUhQ9JzXd2sP4B41H4CGTVFaOR5TXp6A13sr7LY1Z5rG5i
76X4rerfpfu293yi3KIcrjvnBatPqlO6w0TvbQ673WTf74PJ1dcchZ9m9Pbc
NVc5Dv5T8FjinGmp9Q2qm13Bycy7yBfQyUmtTp5wrvr5K/wMo7/nNNlT/lkP
POZ9iXJmK3BCZGet83wom+i9lEvWIFvm9pTPjHaf2ep5V/Vadbukx6ZitHZi
+U15Lzu1vuBDt7fqSN3YfFU9xibkmz1PDkgtL3VULHgMqu+YF6zfVB0fA15h
vj62GndBfhlbP7NU9Vq9BLhKeRm+SnkyWK8p3z7pdpYNE/L4QvhI+DzGcvVI
idUN1dxN4Fm3oeyf4+cvS6wub0VeImN9jnJLBeQVvK6pN1ieWp0vjSzXe4Nq
7sOK+9n6Dvhq9m5EXjRjNVv3X4t8P7wSshn6PXTyEqtNs5DHyJf5HUrCs/UN
qifwvon1dfqu1L9R9WsbOBP5FrCU5yLluJt74VPBmYn1FKXY9672RXaPDYnd
cx3nLE6tbwroLEhMZ01ifYW4ZLqbfucedGbHdh/V1OXee5RFXixj77jUa6vu
f0vG/i/ov0MJ/WZq/VqRjPWlnSLri6swPxDbfdSDqadSX6ZarH7ssvcv6oVG
gH+7n6ifqex7defrwXpQ1fGb9Vy9cWw9ifroP4L1geq1csHZqfXg14LlT/Wz
W4L1e3qXLM7eGDznev+jWP4vWFzrPurR9N9BtXh+sDPV+/8bzLbqOQtzzv+2
obBD
            "]], 
           Polygon[CompressedData["
1:eJw1mHf81lUVx788F/Obj/cBRVKcTIlRDkzTLJPEVY4IVEBA9o+9Ym9B9gaF
nzIEWWquHJm7vacz0xQUxVyVopZZfd58Tn+c13PPOfd7xxmfc+7Tov/orqMq
RVF0a1AUDfX79bIoLhbdlovidtETok6pKL4t3Tcl/0HIGHcVPaRxe+k7iE4R
bRXfSL/DNP/L0t8n/l7RNzS+RPSIxr2kv0bjfqKHs7+7VOPLQjZT3/ZOnvsd
0RkaT5VsZtVzOAtn4ts7RedoPFGyb0n3Q/FfED9F/JXie4p6iH4s+U9EvxSd
K/1s6QdI/l3xLcW3Sj7nLdl34OxfEW3T+CzpRmj+ueJ3it8hukDjC+NO46Vr
l3zXmaK9MuiVkh1X2oadpRsXtv1R9hk521Wi80SjpTtRc76Xfd5p4ruI/7n4
X4suTt7jktgPW/4qdJM0XiLdWs05tFYUv5DsQo0n49PSdx6YvCZr/5S7iZ8l
vr/4WeJf13kHiT9F/Grx/xQ/Unxn8b1F09lb3/xWusdEj4qmyBdTRZ2kP1W0
UbJNojtEx2vuqPi+i2iMxlmyDdLdKKoXfUnys0V3a9xGuklxXtY4RPyQwmtz
J+52vaim8TrpP6l4/a9Jf4P4htINjvOfKRqqcQO+kW6tqCDe9HOSdJvFH5Rs
8zPErxLfVPxY8ROq/v6LohWSr4yzshZrcmZkzYNn7lLx7+s8fcXX6fvl4pcR
g9KdXnr8XsX3QbZFfGN931/8WaXP+N+K92S9B8V3TLZZl7AfMUJsoLtO9Kbm
95N+iPabK/7tin3QKYi93q1Yd63oHY37SDa46hhvFfFIHF1ROldOkuwB6eZj
E/FbxDeVvX+THYvEzxx9v0D8UeIHiD9Hc8eK5mu8XrJGmt+u9Nk44xzNXSg6
Urrhkn1Vuj9mxxIx1ae0D/ElMXOPdN8XtY34vYi1xf9da/UQ37Z0DnF27nCX
dIPEXws2if9d9n26i36v8aWSLYozsDf5y5zLJB9Y+tsns8/EWfqKDtMdZkq/
UmvOFX+Q+KXil4kO1ri96HGN10t/A/4n/0QtJW8laqxxN+me05knZfuF2CRG
yZG2mvOwxpsl2yp7Hiv+NnJD/DLNPa5mGePlojmi2aLjJTsh9rif2C689/kR
72AYWMY3fLuBnBR9tuY92esW0Wmlc4GcWK/5WyS7GSI2wwYzwNJk28zkHOJX
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
            "]], 
           Polygon[CompressedData["
1:eJwtlnlUV0UYhm8gefXnJcU13HAPl/zHpdJSS620xSw1W9wVt8ByQxFUVhEV
wQAFQUBAc8Mtl8qyU6e9zmk9WamltptatrhlPe+Z74/nnPe+883cuTPzfXPb
TUoYGR/meV4mRMCqwPP+wJgR8rzV6DWwyfe8MtoOhHvei/A8z8W0V6Mv0X4Z
rkB4pOfl4hXQlkxMCmxCH8TrSFsn6Awd8TvASnvXdGJ+Q88jbhX6HPo8LEUP
xRsIg+A9e0ceei2s0VyIeQZuRK+nfQMUa954iXgX0L/rPTAXryVeW2gDO/Fu
ZR49YCu6Gd4AdC26A7o9xMC8kBtvEToJFsM/xLRjLnvRZbQV0K9Q40Ala1WO
fxRqaJsNYehrfOu/UETf7bANdsA9tCUTUwWvomMZt5pxanz3jv14+2APlBLT
CL8hLKTvMcabiJcEt9PeD+6AKtqqiClnLkd4fgU2E/MsRKGraa+BLRBN3M2Q
gb7AeF3Qk4k7ib4CVyE5cN8RTt8IqAOFePmB+yZ92yWYRcybeI/TPhamQmbI
rY3WqNJ339iV76rQ+WB+L/P8ElSE3Hu/ZZzTcAqWMFaifWck8TFaE9iIF9Cn
AdSHePpl2vzj0F2J6QZr8XIhT/tle5lle/0cegU6O3Cx6lOOjtQaak2YYwuI
hh14JcS3RbeBGNt77cdi+nzNe6PsXOt8V9g4CbRXojdDLP4t0Mt357UErxRd
yhrs5rlWZ9ry4hzjnYeLlotlilUuQsi+VzlYg94KW6AZc4qCEvRSxsmBVXCV
Phl46bBMuRNya6i1TKftLO+YhteC5+awDO8XvPboXPwl9LmI9yf8BU3wG8Mi
++5JxHyEHk7ccvRTtD0NnaETJNF2nbie6OU29tSQWwutifo+SN8HYJjmaOf5
NvRrtB2F1+GI8hWvJ/SGRcRMpP8EmOO7eX5OzMPoh+BJGIn3Gd4H8D58aPPU
O95GT0BPhDthCd47lo8p6LH0fwL+1rrjbcBL5TkNTuNNwpsMM2AFbV/gjUA/
AmO03njNiG0KC2g7w3e3RreCltBdY+PND9w6J9PnBM/Hw9x37AlcnVK96gQL
iFkIsehuyiHVY2IGMc5AGOG7NVPu90H31rpYvr8QuNxvjG4KTcyrtbyYT9sw
4ofDOvRKOy86N/8Frj42RDeC5pY7Wqsh6MFwt9WwA3g90PczzigYDTND7jtz
AldrVXNT8R4lbhQ8ZnuUrVqunNH5hh8DV9vrouuBbzmTozqGnqt5wE+BqwfK
i76MPRiG6DvwWuG1hstWm84Gbmy9Y77dN8p5395xk+VsHfJonc4Y42QrJ+Eb
nXc4Dlm05RH3JXq07fUx9FfKNfQ4vFRIg5OqkdYnX/VCOeG7XC3F2wjFsJ62
dNUO9GF51IVii1WfDN/ducrzG8CDMLtzdQ/qHdk6i6q5Nr9reJWq/cpNy33d
yYdUI3TOtaeRbs9z0Ku1JnCdfuN53zjfrZnu5lm+W/s56J+Vx/Cr7dtsvDPo
7+GHwO2vcu9j9CfwaeBqgmrDNN/Fa38T0PHKXd2feCHmcgp/FnomTLfcmkr7
FO2DvV97rj0q0LdrXaFQ/wF4EVDX9k9eUciN7ePVg/rQn7H6wVDVZMsj5bXy
u8h3/yxaF51n1RvVne6QyFjf4cWhp8EUyMKbTp84WG3/Hfo/UK5q7L3ofbBf
9yIxY3xXK3Ru0kLuP+de5QzcB+/aGRpv9UV15oT9v0Sj74IBsAvvEByEw5Z3
ml+J7keOxzbluNZP9cbusI205/Gcb94uvJ2wPdzdb28wTl90H+gFi/EC4hpA
pN0tOqe7ieuC7gwdrTZpnYtUJxVje/lW4P7d9A/XP9zV2BSrhVNC7n7QPfE/
OO1WcQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtl3mwj2UUx19+b9N7++WtaSEppZSh7LuxL1OkZBmkJBRRliSlIgyhLJmE
KMvYr/3ady7Z7nUt1xYX1y4hxFBp6vOdc/545nyf7+88z/ss53yf8yvSoUez
7nmDICicJwgS2KZhEBzFtsLeiYIgE5w3JQimxEHQBm5PMgimgt8G7wNnJc13
Ymy4JXgSuDP2OGO7YPfDd8DOgB+BHUlbCF5E6wQ+wO8B39iP2Qv+yb+l766h
H4NfhqtHO8sid7CuQ7Sl+G/HLsPnDnxLfj+mPvwu7Bb4MoztCH8SnKt9MueH
9AvAr4fbgl8q/ApsM/hbzLMUvgn4OjgNvJC2GJ9N+HSCT2Hsarh24DzglUnb
Y0fwLLhL+G3F/zb2FPxE+Gz4SdiT8D9iD8H3wC6FL86arsBXwZag/Qx/EP60
j90PHou9gM84bCV8LoOfxhZ1XBm7C/8G/D4G/4Y6M9ro2Pj64FHgI+BPwD+A
K4d25jWwI+jXxu5IWr86bVhsWD66n0x+a05/Avw2cFXw1+C77DMLl/vxGUm/
q9bP7+PAjcEZ4Fc9rpr63Jp3qGKG9j04F5+K6nPmc8HHsavwP4U9Sv9LnTm/
p9OGKLbgcmgDwBvgVtL6gn+FS/Pz0pyKtyPME7O2zcw1AzxXseFY3Fr6C8Hp
Cbsv3c8+5sihzQSXZ2xh7Dp8jka29yr0B/P7dFo7z4V5vnedQ6rngGL73hQ7
n38i+4a+tS1h97MNfBV+N37N6Pdj3CBaRfAvcN+C6/i9fAp+HnwZ/530Mxh7
E7wB/Dh8T35Ppb+duUuDZycNl1FMYlfgfx6b1JmBL4Az8L+MbYzPfPyPgquB
54GX4LOV3xeAT8DXiC0XcsH1PddC5qoVWx7Jpyb4ts6Usf9icyI7N635v4Th
e0LL37v038C/pOf1YuZe6fmoHN8NNx98MWF7mQVeAD8HvBOuHONW098PrgTe
53s8iP3b40e6cM15ncEtX5vWeMjv4gD2LHNeBJflrn4Dpyp+dA6h8epLT8pi
B8Bv9fO/xffP6T7A1yO7N+WLcisdnxLYr/DfCH4W/Dm4Gy2/6498XgD3h3tJ
8RJYjj0VWsz1im3+QuCPYrtr4e6x+UhnpDeprlGbI9uP9qW4zvK962zE62wq
M/Ywv62BP+36+Rd8C9cNxapyehP8M/T7xLYWfe/j2OJWfr3B2ZGNbaV4wK5k
bBbcqqTFxjvwb3ncbtYaPd+LcM5zXP+z4XeDR4emaQvAH7iGnADPAp8DT/N3
R2/EGdoU8GG4U4pdcE3GnnZ8SWNpw5RHcJtog8GP4VPNz005/B585HpezPOx
OHZ50uKzdWxYsdwG3J4WuObviyzGViQtHhQb7/L7OvDD4Pf9rdiBTz7sWt23
cjCyd+0BuM7u/xC4i+6X347wraqeg8JVwBViywdp46Ps4SzzPIddAf+Z695h
1/blsWnjQGlWbP7CG/0sLzG2G3a7a/gQ5a+fj3R1p+uezlzvhd7x/Cn2ZnWH
X+ZaqzV8EZo+99P+4EvjdxW+GvY8/B/g6uC6tBuB3YvubqrWjP99mjewe/k9
aT71UuzuhuOzC5/+ofnoDTjm31oDXwi/c/DFsBfg58BnxpbDylnFw0CdnWvp
oqS9Jw3gzmBX43NFucKZLwJvjAxLW8rq/CN7I6TZqf5GrIvszZAurQHvcSxO
c0lLyyu/PBeUE+n+1ujNUZ5Kr0rFdl+9WdtYzx1pb3WvOzbh/2fC8kh6WTs2
HU7T2xFZLCl+Gsa2L2lyXc9Hjc3FLkmaxjeKTcel53sjW6f2fgD8Wmz6qDqn
Ofim1z8aq7fiFbjxsb3fesd3eX0lre4bW84or1VXqb7SW1nBY74U9sHQdEY1
XD3XFmlHL68HFE/S89maM7L7PQEuyDwJWnZg+jAGv9OB1Uw1FReB1RFFQ8sp
6ZRyZy54GbaP9COw872sGk7xynq/CS2eh3n8q75VndtEuhKYFpeT1gdWO0b+
Vr6IbeT6IP0r6BoiTXxCZxDYG1zd13YjsrzUHrXXfH4m0oUCPlZzPBLafSn/
M/yO0iM7O/nr/ZAWqobJ5D6Ge51222sA1XXfwT0d2tsqnd6aMH/VPk/6evT2
jPLc11nU8bvQndQK7ZxVO86gnQdPD61205n0DK1+Vt2+g29Npr0Z2n+Brv6W
6R1RHZSDf3vstNDiQRo9yHnVamc9948wrnVob6X+M7T1HFcNLa3RHemNUA2s
urdkir31c8BpkX1f/hr3usetYnuC69L40Gpj2T38XibF9nQstppdMZMITUOk
M9tiq9P0P2UmuEVosaGabG5oa5C+qEaSVqznW239LZD+Tw5Ni1S7D/G9Dw3t
TVPczsZexO8auBbf+R8lpBHw
            "]], 
           Polygon[CompressedData["
1:eJxFmHfYlmUZxh94n+p9eu1OCA7UJMVcqYxYshFxrwxxpeVoCFGQqalpaplG
jjRS1DRNUfZUQZAVG4QPPvb2Y3xMmRoNTPH8Hefl0R/X8V7nvZ57XOO83ia3
9uvRt26WZT3rZFmu3xtTlp0uZar0jeUsu1b4o1KW/UN4ufA1wv8Rnii8RPh6
4U+F3xJeJVxT9tiDavuO+q6QfCj9HbVVqa+H8Hclq6WvYaz0B/S9ByUzpN8k
+YFkq/pqJZdJ36P5eyWXx9z90t/NvAZ7WCy5OnlvrDlZfYdK/tYi4fHCX9b6
lwrPFx4uXKP+7sLThccIbxA+V/hKyb6Sv8G3OMMH0qdnPtt4yTDpa9XWWX3L
hCcJbxW+QPh7kk9K3sNa9b1f9lzWuCT5TrnbL2k/3YQvlNSVXpJcLP2GWIO5
6yR5kWUrNP5C9Q9Qex3h5cJdhf8g/EvJMdKPlZwg+bXwN/X7nsZ8pPnVws8K
D5Qsk35f8hj6/im5V/o9kr3S90k+4U4191KNvzNZLpb+v+g7Sd/fov6n1FbF
t4S3Cg8QXiL8K8ld3GtFbyv5rfS26lugMQc0/6sav1b602p7W33/Utsi4VbC
DyWvz3p3CL+V/Oa8/QqNWxnC2+8Pe+AcnLWLxv8pef11wpcLPyd8vHCN8IvC
q4T/IuklvbfkWem/kfTIvQf28oDwmcLVwp+WfS9zpJ+rtqfU93tJO+mz1bar
7DmHJPfHWo31vU3qe0RjZsbdNsm9BmsxZ6fk4VhrnuRR3lIyH19R30FJf+md
1NZBv+t01vWSjslv3hlHLWwLX5GszrwGa82W/E76w5K50qfy3tLvk0yXfkey
nezWNz6QfE3zN2Sew9z/qq1KuKPwo8KPJeu0HVbf49GG/nHZ71+rvns15h21
b5C8Kv01ycbkb3B27oBv8wa8xUuSNdJP0/xt6n9ZeB17lzSXvlRtRzS3Vdwn
a7I2b8BbdM9tl38WPj+3T5Q0diI2KHy35F3pT0sukL5Q/Qtkj48k2xrvPU94
s74xQ/rHut+e6vux5KjcPovvjpS8IX2u+purr5G+8X7m9ccLT4j7Xa+2o9V3
nOTYwn63VDKQmBLnwZ4WCP9MeLPwCYVt9PbcPoHtviH8I+HFxAjhvwpfm9um
Wf8F4eclX5D+xcL6VbljBG2DhF+T1JNeX/Ky9L9JytKLwjaGrXGnNRXbCLbC
G3y98B6x/cty7x0bnhF+1DjOhz8RryerfXHEF+6kUaz/pPATYY/EBGLDHvWf
rP6zJGdKFhKbJadL366+x4lZ0TZU+o7MY7EpYgExAVvjTl/IvQf2wtmuFl6Z
+YyDhX+IrxPzhYckt6FXsCXpw9W/U/3NeMtkO20tvU1hHdvdlbmtVngrdqy7
2lOxzb4U82sr7hsl/GHmMbskOyVdNfecwm9xfdgHb1K3sO31xAeS99CUO03e
W7XmLlP/dep/Vbhl4b2wp7XJPoKv7FNbc/Wtjzb0FpI3pY9LvmPuD5275Y5p
GyZ8S26fx/eJsf1yx3Ri75iIj9gTuQcbxVbnyP5Hc3fJazC3QeH9cxfcyfJk
n7s77GF9xTlnYLznFuGR+FjumEXsGpXchp4K5358EZ+EA2Cz5fDrSZJTI15g
s1OEd2jMLO5W+Dbhn0iaYnvkiOAF8A84DFxma/j78bnzFPO3S27FbpL3sEb9
fXLvrZ+kgfSGktuTcyax5JTcuXSP8BThE4k5ybGd/bTMHePXBh8hR5Orie3k
QnJi//hmi9xz2AscCa60Wvs9W31jdWdvC28TbkrskPSJ75BL2FPDyK/byu6r
F+sxBv4zQfpizW+TnF/Il401pm9y/NtU9jl/QexJPhtnnK1v9+KtyU2Rv1eS
iyXVkqUlzzku952y1r/Lzo0d1PbH5Dvhboj/5ELehLe5As6XHOOx9za5Y/+h
uF9iNjkVTjJX+LTcXIX57KXI/dYH4j65g17hx/gLPolvEgPxO/LgtIhlD0b8
IKaRE8mN5LCGhcc8FP5RP+IH9kpMJjbvivM1yv0WNcHvyBm9k+3o5Nx3yF3+
VHJ07jfpE3Eb38LH4CLEW3IDOQ/u8X3J4ZJ9AF9YUDa3hmPfHOfl/K1zcys4
8kzhOrm586bg39hsv/CZ+yMe4kvrwl6PlMw1twSfYo/sda7wm3Ah9V+XzL/h
w+PUtpD3J59Evjg1chBn4izPJPMVuDSceqTsZ4zmDJY+X23fJj6QU4WrhFsn
zyd2E8PJbfB5aouNwXfGCQ8Rfk+4WTLHPl+ytGzuzRi40eKoBVokf4tvDqk4
Z5O7RwsPD1/nvngj3oo89Lr0/WrbXnH+oQ19R8Ucd0DkH+Ij394c9Q97mCPc
H66TOR4ixEa4FH0tk/fOGYZqvZnSZ0lGCU8uO94Q+8iV5MxmMX4s+4VDl63T
xlqteLOS6w148YSK94LNYDtdkmsbapxZZdc4NVGfLYhaifhCTCQ2UsNQy/Dm
o7TWOdhobhvZoLFdeaPcMWg9tigZKn255rRLrmGYw1hqm1nJXJT4Tr6tivhz
oORasLpsW8KmqLW4D94HjjWibPvgbrijGWEz88OeRqvvvDg/dzJa+72ImJ3b
hj+vD6gVqKvomxr1HWtgG9RgO6RPC35HzUXthU1M1npTyraVVRrTKblG6Rv8
C362vGKuebPahibXOyfF/Nqo2Yj5xPpvBOcl9hEDwdRT1FaXSC7KPYecdFes
RQ1B3FuE7UmexB5Lrsmov4iZZ0Q8JhYS03eVXOMS66m5qL2o8chPbZPfijeb
FDUedQg8mu+/qN9rcsdgYjE1JrUm8Rfu/EQy34bDw+XZE3uDd+Kvf0++C+6E
euQV4Rtz1wvUEtwxd13Oza3xKXyrk8Z2LpzjyCnYSFXUPeTGs3PXOXAOuMfs
kv0DjgRX2hlca0tyrCfmtwwORw4g9teGjFb/7sx9nI+agVoBfrNZ+gj1H1R/
t+Bhw4QPZP4G/PW5yA/wT2JWdfgvtjpMMkj6krBXOBhcrIOkI7WZxr8SfLtx
8LVBwcfgvnMi3uKD7ZPrO2p76lnqPzgnvLK7xp5XeA41E5yPtYjHKyTfUtsZ
wdHJa9RZq6Pvea2zN/v/GH7bSdoX5hRwixHqnwg3iniDjxFr5kX+IYYQWypR
b5ITyY34CL6yOmrU9hFPhmnMtLLfl75VwRsmh39XByZ+8F8IMYZY0y7slRgx
omJuDHfkTXibLsE3eTPe7qjCtRL5eURyDq6fOweSm5sUjs2PqW2s+q5Kzm3c
OXe/u2Lujg1hS2fF957JzaUbxPzbcnPfw1EfY+OvJ9dkcHs4PrVavcDUhHCO
EwvXPuQQcgn/OfSOfLGGfBDxkDO3jfxGbOf+iXX8Z7U9/GNR5DtyIzmWXAtH
gavclLv24z8R/hshvpK7qTGoNciv1EpHgm9cGb4PJ4Ab3JC7VsRH8JXBuWsj
zkfsuyd3rUtNQm3Cealthob/U1NQF8AB7syd08ntcAy4BvyF/wpvSf6/i//M
yN+8CW9DjfJ53YJvkJPJw/zHwPt2y/3fA5wabk0NTy0PBzmlsJ3jC+XgE/wH
QM0AB4WL8h8G/1swFl/GJ5hDrU6tQg1Lzf7zZK4OZ+e/RGwK28LeqVOOifvi
P0v+uyTXcBbORM75DHrLO4M=
            "]], 
           Polygon[CompressedData["
1:eJwtlndYV2UUx6/w8+mH127TXC0rRwMUULRMRMRsOtDcKy1zBVqZmuZIpdQ0
zVHmSNNEtoggCLIEFExjFJiCiTlSrEQMzbT8nN7zx+d5vvd7zvve95533VZj
w0PDPCzLioCG8KNtWW+7LGsiTIAEx7Ie8bKsh8EfvsMrxFsEC2ExPItXQLs9
bstKgi54xzwtKxN9GP814v2hH6wjVgRL0C3pry20g5V4IXhF5K9CfwEVUC59
wRZivxKLRy9H/2KbMcnYgqCWscfgR8MFYmXkfY0+jfYm7gP5eHlQoO8/SSwH
2qBn4M2EWfI95P5Bf5vxN8FTPK/BXw1rYTpeBe2a4j8ArWA13lFiP+tYzxD3
xfeD6XgP4j0Ej0MWsVO2abOLWCLslvdq3WKI5VG7fAihfR1jWUFuPFyyzTu+
RW+Fb7QuhyAIvYTYUlgGf9P+OnjQxzDJxdsOI9AjYRyU0i6XnBzwJ3aJ9x9G
N6CNBcXER5G3hVgVejH6E4iAA3hzoT3aR+oEubIO8FaiV0E4lOO56MsTytDj
dV0lay2P2aaOUs+f0JPwYojFQhzMB1+8PGJ/MbZ6mIfXB68vPK3vnY3XGv0E
PAbZug42ojfAeqi2zZp8FT0VpsGX5Jy1zdqulO+Ek1Ci375V6g3bHLM/ZPw7
0VEQDTWM5yJcc5s5+EzWHgxFD4FBsjZod4v4TWjsZb5xOTlXea6DFbr+C8n7
wTbztRFvE2zWsYzGewPG6HxI3nCdyxE6v//Q1w23meexeHfInlUtc70DHQkb
HLMfZV8O1vHlQyd0ZwiABVp7f7QfdJA5JyeV/vfCITjDevEmpyvv+ZMls52c
bZLLczr+PPRcmAPHaRtHm1hoT+wgbSPlvEHfRTwdfY7Yeeig8Wh0BuwXZJ2Q
N4nYZJgCA+WbybsB12EPOYPwXofBsgfUi4Ij6N/gAnQi9go0oj8bzuMlkjME
rx59DW5BMp4fXiE6njFkQTZMwGtCu/vhXsggLw280HdCY3jLMTXtqPtD9snH
eONkPuBNXddS01L6LIEUtCXzLGcBzxVw2m2++x3H1Ooe9N3gwD7bnBNyXhTD
VcY5QGqHLnCb77mJV44eqlq+aRh6OIyBf/H+g4b0l0osGK+S5yqohgTb1F/m
4Xlix/Fi8ZJkP2qt6vW9Uuej6BIoho5ytuFdRl+EGuir8yZzU0afp6AaJjqm
blK/+7SmAXilsg5sc0b9f1ah2xJ/EtrJ2idnl23WYk+ZK3KKFNHyjS7yTsi6
1fqOxBsFoyEMWuKdJV4LV3StNcVrDs209tK2AdoTPHSOqsithEtuc4/IWELg
lNatF/oFx9RK5qYfuj+EQgptkqGbnDfEDrjNGnLTzzPgDeMdczYEortDL70j
5bzvge4JwXrmSJ1r6acOrkAfvAxYKOsO5sv5Rk4m3n7IggXqdWa//k5pvpLz
UM5QntOIp8I++Ej3bzf8y+RFyRko+wbvZcfMq8zvOd1HJXjFMneOuYfl3E3X
fk6gm9NPC7iIjpU4sR48B+udKXdnoJeJnSb2IvSGl/SskHUvd8Vk9PdyZ3ma
8zRDv6kJbVtDG9hFXRPAV/fxTtvsYdnLwTpX8XKvwizazoYPIYVYhGP+bw7a
5i6VO1W8rnjPQReX+feR+2OHrBOY4jL/SHNk7tG9YYCMk5ypeOEwTddcpm3W
n/wbyD9CC/UCdU3E2WYfy37urutY9miQ1Msx/1LL8JbCpy7zT/Mo3/w5OhJq
mKsAnpPIe4/ndyHMZe5k+d6Z6klsr2P+S9ag18Fal/mnkXt6BvoDeN9l/n3k
X2AROptYDuSCzXsaQTMvE5P/g92MOxF8dB+nodfL+Ux8IITCEfq6DRqcino=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1l2eMVVUQx+/bfY/dy7vsoUrvva5AAAFpSlUEBKRIkQCyShcUCGCB0JEm
SAvRDyaG+AUhEBKEiCJEgkpEJQQTiRqKIL0sHX//zPjhZP5n7sw5c86ZdmuP
nTZwak4URTVSUZQLXRCiaH0mipomUVSHMRU8C14+uDK4LXguYya4LrxmjK7o
noqjaA78GfB3g+dCG8P/IjbdSszb8b0eeBb4XXBD8FLwcnAFxpV0FD3MRtF8
eB3R3QbdxHgGvBG6wW07zpql0K0OfwO4pfTh58lmcBr8Hvw60MrIVIOWZJQF
50MzjArgPOiDtMmkwFfB5cDXofcYAfwbtGzG+KWhp5jngX+FTmCPDPgONheB
T8NLs/8t5j/pLAXYjk5FZNpmzA7tpbvoxKidsjvNc3tKQR+jlwU/hOYwLwOO
oHfcnirgAkYpcAJtwZm7gX9n/1rMy4NrQLOMquAy0FaJ3eU2bPtI7wB/HfQg
OouhS+EHZFqBe4NbQmsi0w76GTIDoKPgN4fWg98aWugykj2GbTH4OHS4v/s+
8Gvo/gC9wz0MBT/hKF+mzXdaIvMOtCf8PfDOIzNH50mZf+yLTUZvXR/b5sH7
ABv2Mp+t9wU/lzEf6JqxdbX+buh05s1T5rt/+Hvp3V5k3hD8MrSPY/F2xbbv
Aegat20VdAt7bIWehj8Y3Bv8CbhRYj55VOeL7S7X8/1DxQf8ldCtrvs0so0T
W28NvBv4RoTMcPQ6uA+M1j0onsDdoV0Uf+Ae0Gb+jk0UM4zW4I+hL/kZ+0M3
su4Gj9kl0DYpe9c5sfnJsthsWA1vHbKX08a/CW0fLE6yfK/rNtTP2H5NZQvf
Y77VVByCE3BDcGdwI/fbBi4r3W2x6Qs3db7W6op8afexnv6OuqtDsdmueB8B
7c63FvJxnSW29ddDN8fmb9s99mVDp2A+qtjqBe7BGKb7SizPyE8W+r7y2T7B
7JNtT8Ern9gdD4RfVnEEHhCMr3cYBC4JrqZ4QW84874Z0x0DHqx4BjdhtEfm
R2ReDxYDsqEGY5zeCl5Hf1O9bTc/o85VKbH4GhkMyzdHB7szvftqZIa671Xg
+zC3oSK4XzAfKpNYHlQsyD938q63cbMd0OaJ5c5FweJIvq3YqgWeBH8m/J3M
p4Fngyd7XEzMWP4X/234UxkTFPPwjiHfBZmTsenK376BbsnYPWyWX/v6M4Ld
i/infV+t/ZZqBfOL2FgGXJiY3mbwWXgJ8pegfzsWr8h9+03FNbrPpyy+Lnj+
OQd9A/0FGYtl3b/iWvH9iueWodDDzDsrh0OXuHwDZI/EFrur4C3MWIwvgi4O
Fnv7+T7Pa5xq3wnmnVLGVy1bBn8l35cr7lNW2w66zC9eE5XHJijHJmb/GfjV
wCPhTw6GR4Engau7/0wBF7m/VUks/2ivFfA+j+29VHN154XgPbH5pOJ9bTA/
kD/0gF8vWP3L5fs1ctFBvp0rsPwvP1+LzH3453XvyL7K/Aj4OjIPsvZepYPF
nOraitj4equy8Mcwz4E/GfozvJKqTdDyiquM1WjVLeWfWci8EFs+HOF4L7L/
sFeHYPlIeSmdWN1uBG9abLaFYDlf55K/9/cYUywUZ61u5/gdjoXfF5xKrI4v
1J7gR8jUDCavep4LPgB95LEzJTa/Uk/ymHEDXqVgNUu1Zph8MFgtVL7qFZs9
smuHrzME3lFwvmIKvEBrqkbKtmB1/UnW+hfdZ8WM5Vjl1Gf5/oC7OIHMePRm
xtYbqLe5gs5d1u+rfOs9T+7/d6tcE2yvKqplseVJ5U/l0SJ/o9Gx3a3saRBM
T/pNHCv3Kgdnmf+lnog9cxLrlWp5n5NCZmRsfPUptYPdrfqXyP3nPnAA9F/O
8hX8q+id9XOpd5J/qHe6VGDvq55nvmKWcQ/dftDLfNvvut96rVdPIT/U2Zqx
16609R6Ks8vIFSPTJzY/l52jlKv4Vj9luT6TeH8UbM1DWp99SiTW67WAfz1r
/n8NfrH3iuoZ93tf8bX3OQ/YayD0sL+13vy294H30b2ZtV7odoHpSFf7jQ2W
mxTXKffJVLAYVD4rAM+OzfeK0T2Ttvv5M211Wb1eVWTGee3b7vemuL5SYH6r
On8X/J3fm85aMlhu1ZuOCNZPqKbI7u8Zt/yt5MMn02Z/LvuOje29FNfTYzuj
+r5HyOcFs+9u1u5NPqZ8oJ5Ha95AZqLnVuVb5f80MuOUq4Pdr2Lhfe9zlAcH
+d3K/yv7P8KjrNVl9STVvC6pto6BjtfaKYv5con1hm2C9bHy/02qdcFqiWrZ
kGC9oGrrp7H1t6rpJYL1jjqLYk156SL2F3oeU08lH1PveqHA3kj/AvonqBjs
X0J2jnHblN/zPY6UG/8DOfp7eA==
            "]], 
           Polygon[CompressedData["
1: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
vgWLdSt6DvAYPoifzIgzn58c09zF/wCJZn0G
            "]], 
           Polygon[CompressedData["
1:eJwtlnlQllUUh19QxNfvk09wBRcEDbUyUVsVcUlNQTBxSdxQQHFBUHDBRBu1
cMsFE1zGlplmqn9bzEmtbBmnzHDGMtMps819w1wRtec39/zxzHfu75577n3v
PefeLyG3OKso3PO8CoiA+ijPq2noeTcDnncf+wE8GQI6n4KBEBP0vCRYgT2T
vlkwG170PW8kXGPMQWJMwB4B6XAebQ/aFeLOxXc6Y/MhF9oTawo+k+Eififx
K8COQx9L/0swDgoY1xYtG3svPp/BELRnIR6tCX2VjNviOy0BrSN0AJ++SWhp
2OkwCtqgDUV7HLs79IZmaFWM3wpvwTDNj88Y7NGQD0eZ91/W2RrfEfRn0z8B
JsJoSEXrD0OgBT4tYbjNm2bx3iTOLmhlMcajzYFp2FNhErQLujkysEdCpvlp
X8bIT/6QC5O1//ZNU7Bz4B3ivw2x5q/9i8Lugd0TkmEwWhY+o+Am33SYb8vB
DuCXqDXofKCPjX1COYA9CJ638xiPloedr3OFYdDL9nK49hxWE7MC3vBdDM07
SjGwB8EAaI7/BcuTNPwmwiTYDJt8d1aKG8IvGvraPmu/M+m7Sm7tZ+yX8AVc
inJ+feifAjnaR/x2EGs7fOC7tSuHsuAF7KFam51bKloX7KZBlw9Vth6tq87q
5AZz3oFT2L/CCYhk3Dn6d2MP1RyQrVpAT4cMyLO8T8HuC/1sriDaFcYeYOy1
gKsJ1cYM+pfS/wj9e2nvg1t2Xv/hl0s7z3d7sA/tFzgOl/EZrjyGs7amywGX
k8rtMcQdC+PgNv3X6X+gb8K+G+X2oBt+XSHJ1rcIbSEshmK0xKBbj9Z1RGeM
toK+8JDbD+3Lz3CbuMn47qR/B32/43sKkrB9jcHeABuhBn6Ek77z34nPSliC
XQaLoDOxFtgaPsTvK/gaHtN5oU2ECbaWBmgR2JHQSPuIVgmbsTfBBuiGzzK0
cliu77M51mOv0R5gf0/8Q9AA7Q7fdBeO2bcVahx+r8Bkq99OUIq9EBbAUnxK
YS52IczWHYXPb8QcFMa+0N4OPdDuEvNv3TXwDwRs7Bz6E+jfzZhPfXefKp86
oH1E+2PojtYELQDREGF39krsV2EVVODTLORia46LcI85jzN+AGvZgk8lHKYd
j999+sMUg/YqCKKdRSvGLodlsATKYA20UB3h8z72e/AJlNge/ISdyhwVtF+D
A7T3KwZ2FaTQd9R35zuf9jwoslxLQKvTWrUetHC0Y/j2Z8zrtNfDQdprdW6w
zs6vC34n0Afit412te59tMigW2sP/JKhJ5zGbzB+5ei7oBc+bdAvqX5Uc1Yn
9+Eqdq3qFWLxyWRsBpyxOh6r+wt9o/JNv5ZrtwLuLbmH33TVuO/yRXtUplyH
l6E3NEeL0Z2q/MWno3Ja3x7hHm7tgc7oodYF9eChTSPmVCiEvyyHdG7nsc/B
GahjHQ/htu2p9ra97ntoCiE7Z/k9HXLvgd6FNtA46N6KTqop1Qs8h09X3We6
O6y2GwZdnSsflZeNTdO8t4gdR7utchifBay1FJZDQ6tV5bRy+3Pf/e9Q7sYz
vgB7FsxUflida0widifoHHL3ge6krdhVUB1ytaX9aKz1qVZC7h7/A+1POA2N
bI4Z9ibrbS5GewZSsPtBrO3BfLR5UGL1qZqutf9BtQF3BtPsHdB7cIO+7+i7
HnD3kHLi0aC782rsfTlE/w9wxP6PrbQ7aQ/938C3vrub1qGthdWW49FoF6yW
Y5Q74Ck3iBlmdazcKNLdAfX4XbHcVS20JE5raGX12xbioF3I/c/SfynlqnJW
NaE3Y7HvakFxWqK1gtYh9ybpbWpmayrB3gbVvvs/pv8s72L/D7P1QAI=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxFl3mwj1UYx98f/V7u6837iiRFyDKWweDad127i+vKvu9LrhZLYy2lmqZt
+tsSLVQk2kgxGKnRUJZUyhJRibJvqc93nmemP955vr/vec45zznn2X5VRxcV
TCsWBMG9mSAojhwWBcEL4OnImmkQ9AmDYGwcBEuyQdAZ/lhOEOQzNgi+AePL
nNf4ePT6w9eBn498Hj4P+SDfLHAh8gLz+4CXoj/O9eui/w6/832dt/kGgtcg
I8Yng0NkLb6HwSWQu11nJ7Ivv58G90MWx7ZdcJuTIDjHXj3hA7jG7DGU8Yns
2Skye/pGZofsWYGcENu56qV2Rq05XHPhVzK+nDULwA/BN4TvE5td5+C3MD4E
/susfbJhJfx9jFfmuwm+wJeC+zGvDPJR9Msib8CXRxbCV0IWZWzeEr+T85wj
xaamcEPRacq3lrGlzGsBPw9+OtxY5DjtB3e3r98isj2ExVUITV5jbjXGxsPX
jf4fuw7fl7US8CXwMHArcHnWnAx+Av0B6F/I2txLyMr8HgvuxfiP/B4uP0F+
wzcMvA/ZPrJzNUb+lrU3PZe1Mel8jzzINxi8H1kavUO6S2yoyN7tsGFEbLaV
Bv8N3xn8BzoHwF1is0G2XOX3XX6fr4NXo5MLPoEciU5JxpaDH8/YnZ0BDwX/
jvwpa+scQZaL7CzVtSa/x4AvZ+3MOvsNZFXmz9AdhuYburfzendsbus2j+Gb
j05v1hkF7gxfnfFq8seM+YfOJ50OyNHo9ELWQOcae0yF/xd50+/2etbW6YLO
/eiU5WvmvpF6vChuKoY2V++qd2yJLJfa3egt5GvlQjuL7jTX3ygP2QT9buDT
+N4hznOePSvC70vsHvNiix3FvnLAr+i9gXwtsbhVbL6PnMu6z4DnICcxZxSy
JTZMQi7K2Bn+ZE515QnGx3veWBxafCnWzzI+hr1ngPOYWwT/HDqT4dZ7/K7T
e4bmn7Pk7+i8Ap4d2fsrjnZkLZa7gk9i70z0Fmds3b9zLKbeZK9Jkdnbw/ea
De4KnhWbXYXgac53A49G/0XWeRhZL7T8UEe5Cp2XtT78Y+AndSb0cz0fKq4U
F3qXO+EbO6/xmei/Cp7LeGvNVy6K7Z3nKa6R3fnmZMyfFoV2J9rjIfQeQXZM
7Y7Ez0JOdb4TfEPPCfWRzeD7gW9yB0We/wch26I3hfEpjE9FPgs/TfP4Fuq8
2j8yO2fE5gN9wVeQS7jHrdxn69h8Sb6xAu6Ux+D2rMWF/Ly4fJh1jsK9576g
PN9VuZG1NsGvhT+eY3l4GTjLnCqM92eNAbHFX0m4epH5fBPkP+h1hB8ZWx7U
eYco/4cW+6uytqb85yKytt9nA+Sg2O6mFGv+kmN+Ln9P+N0IfnBsOtKNUqsH
evdWyMLI/Gok8hF0FqLTWn7iMT4ytFq5AFyAzmB/04GhzVWMNEW/RWxnX8M5
moM/Um1MrOYpvrZl7a31LuOZly+/AfcMrW7rLPKRYR4XI0LL4aoRzVl/gsfg
AmQx5j+Ysffa6Hn4M+QT/u46g/KX7B8cWZ9QpLyVWj3Q+lPly8zfzLwPsHO6
12XpdY0t3x+E/ws5Gv4sslpqviUfk46479CplVpdV+/R02uc1lfPoD6idmr5
RHeZC24Tm09tSgzrbj4FN/S6r1pfwfNhHfBJxoqFltu/dnv2ID9PrLdoG1sd
V02P0Wnj96W4uCc1v1KebJTa/aqvKMXvA8z5IrF8JL9SvyOsXPhWYrW7AP4a
/Mdwg9TbMG+DY3GXGfsAuVq1mPWfCi1+FafiV3m9U+3bCG4f2747ErNBZ6mA
3M7vvfDtYottxXhJnRf+MHxH1fbY3vnDxLDebj34DF+GffPh8r2fU4/R0u2/
qnyfWK+m2rrB4129VmWvazXBVTyHyGfKuo/J1/ajf9LriPKSckkHdCulFp+K
WfUA/VX72GtPYrW5U2znVY+wE66C11nlRvUDquGfwG9LrP/Q2bck9sZ601uJ
5Q3lB+Vw1YouqdVcxU0x8A+J9Tfd4LrHVvN/Tqzuqv7ewdwgtdqv/FPgb6Qc
WMb7NOWZ2HOFcsLFxHo+9X6Xvd9T33UbOjW89o31vNQlsryn3vUscmBs9aRE
av6hPPAua0xE7yV0HkWe5ncQeg/m9Vr250QWy3pr9cbygeusWdzfKIusBD8F
XDuynkb9gHpD8Vf4fcTzj3L7pRy7B+kd0x27L+ldksj6KPUJNTz/KKfKn3uA
zyC/dTvlVw/ElvP3wvWIrcf5zXtm9SG57kv6fTyxGt1dfVqO7S87jib2RrLz
MLhDbL3kV4nlz0L0b+WYLys/347c7bHfOzYfVL+knvRUYvfS221TD7susf8F
ys31uf+tHlOKo9Jes1ULtK/61V2M95SfgU+A/wNtL5jE
            "]], 
           Polygon[CompressedData["
1:eJwtmHm8V2Mex89PnZPf09E5qZAirdKK0r1tupW03ZZ7b+kq3fZFWqSNZB9m
htes/pYYUxONKCXDaDDGEs0whilLKpIlFCXVLZ+37/eP7+s8n+f7PN/zLN/1
aTl1QeX806IoqihEUV19D2ZR1CCJopnCLUMU9cmjqLdoYRpFN4ieFf/FOIqq
GS/+VaKxois1ZnBucy4QfZuZrHPUnqqx32rOh8I/FqOoUvh54T8JD5DM8cLv
Cr8p3Fcy5uj/v1DfBM19T31fxybjbOHTRVVqv66+fyBP1EzjzxWdk9haV+j7
+4KtmfWwl+80fqfGHtL/RwqvFX5EuJ7Gd9D4eerrqrHH1HemcCNRU+Sq7xrx
vtL4/4t3XNRc/bPU11q8SFSu9rPibxTv76Jtsa3vuczOiLN6VPjPwm+JPlJ7
gvqCeM1F09X+UH3/Fq+f1rNA8u9W3zXiXSF8vfBvhacKXyiao/anGv9OZmvu
Ikpy20t7ta8T/6D474pfKnyDcHvJqC/+Ke1/rK/38czulHNaonFLRV+KP0z8
9eL/RfxBua2Bf09zor0QuaLNGrM1tvt8Su0S/199/e9r4UKw/+0U/z/Cg9EV
UYlkTteYl9T3tnhjNKZW/35SeK/wHtF6tc/S2MnifSL8X+F5wvcK3625Vbnp
DLrznmi72r2D3WUn8VPXyWVq31EwXR0ufLPwL4WnCI8Rvkf4PuH5wg9JxiOx
2cM+redl4e3cjegVtU8Wba2s+dXMdJC75s5fUDuXjInivyX8Ymb3wX3l+sd3
mekwuvym+FtdP8bxr9hsCx1D1w6IdmRmM9gO97lL7cNFWxtrXCXcXfPnFkz/
T/p5TRF+Rfy/ZaaDr6r9Wmy62dDX973wx+i6cI3w++xBuI904SrhF4QfEG4i
/qSC3Ql3g86iu9z5Zr/vhcJt9P8DwrHw1cIbxV8j/LnWO1R4tfBK4RGp6ftJ
4f3CB8QfLrxJ+K/CT7t97BI9o3Y7yZstfh3J/0z4SfU/IVrHeNGj6tus79Oi
x9RuG8w2sdETwhe5PWDT2PYn+t9g4Yc1/sHM7hydQpfQhTZ+HifE/9TPhzPj
rI6p7wc//y1qb1Bf4vtFR9CVZtiI8FHhvcKVuekqOnudeKmfH3tkr+9ndhfc
CbozWuNHiRbpnBaLvuEfiekQtn/C/c95ohai77We0eJt4EzE2y2qjW39x3wP
tOnbx/4zO3vuoLn7H9a813lH3T9zXw9nZiOTRcNys50hat8sflv9u65whegu
tf+ovuXi7dGc1sKtROeLyrWH4aLP1f+F+yvssyDeV8Kf6X9DXJ+xPfZ+h3h/
KNgZdNP4Bfh+9R11/cKfvoHPcXtC3/fHFiuG+vpGa3w7yarhHIVLiQ/CpaJJ
7g/miNcT/yZ8p3B1MP6MxHwTPor4QhzoKV6vYGv4QXRpsLVtYV+xxYgzghF3
zN3C20RMiC3GFYP5d+Lbb4QnBrPRl2LzcdguOr/L72dwajaGDOZie93Yk+bf
KP4Vwj2EJwjfIzzG4/Xtwr8SniHcVbjK48lI4f7EcuHbhauEB9Anaq/+i0SX
iMY5n7g+nLsXdVZ/F9GlPmasx376qjX+loKNvVx4nvBt3EEw/cHXTlNfr9zW
ND1YnGatk4KtnT10ym1N/Js1dBQeKRqRm41iq/igJ0SNg/kmYg6xB53tlVp8
uUntgdiI5q3EzkWjyAGKZvPYPjazp2g+Dl83ghxFeLdokNqP4f9El0nGZMm6
VX0jguUM61weuQT+Z4vHi9LUbAbbwed1F64X7O6fcf9EDvBybD4f308fvgs/
wlhyCGIzMZPYucrjETbSLbWYDZ+c47j+39T9DfHvn5npH7q4zf09Z7U7Np/G
mf1L+B3XR/73nMcvcqo6wWIWcSwL5o+QQexIXbeJycRmYkSjYD57k8fvnqnN
3eb2gIznPX7iI7FdYh6xaYrnc7UeT5GxNjP/d6fO+9fqmxVMHypFZbnpLjaK
rT6k8efn5vPwfRs9BrRQX5nmL9GYvhp7JvoqvKJgesx5cxdbPHacyix/xEf0
ET/KrY8284k/bd3v4s9a5qbL6DR6vNb3Tww7or2cJn65+EuF+wWjy0WF3HgX
4kc9vyW/a5WbTGRhG41yW/Mwtz18WKWvH9/WVLin21u58Lm59dFGP89W+yzR
wGD+4VjR7pZ8bjWxQ7y+7j/IwxjbW3hZweYQsznLDR5nW5NDiX9XwfJxbBrb
HqW+tuI1wY4T89FlwWyOfyAbW8R2l3v8w4Y7BIvJxGLy9Vp91+g/14vfA3+k
8fPdf81LzT/UBMtByUWJochC5tDcdARdWSw80McscX84yePWUuHfCc8OFsPo
o32tqA1rTSxmENuG5CYLmQtSkz8zWFxCN6s8nt8v/tLUcgb6aC9LLWde7/ZU
klqNg3/a6jkYMZ24diN+CpvS3M6uL/hhYupQ4eW+njrovfufaZrXILc5/d13
k9N3EX9RwXL9INzV94O+FIVPz00H0UV8/Bi/b+Z3yO0uudOZqdUQ1BLj1K5O
zWfi69a5PiCro9sXMlf7fqkZDhbNJrHNVbHF0DWes1W7/XcMVo81Fu9IZrXi
DOE0sZqRPnhNEouznV3/iWHEsoaiixOzaeyEuDUysT2wF2Qg6wzRoczOhLNp
SK6UWU1AbcCZc47UTp1Fse+bM+FsuiV21tggtlaSmG3iE9h7y8R8BWeMbbIe
zh4bxBa75xY7Sjxek3OQW/ycgyRmw9htM7cfbLK5z+eu+yVm2+gAujA7MV3F
prFdxmPrxGBymYmJxeZBwWwRmcjGxxD7KxLzPRczJ7H4ShwnBhB7yF2JDVe6
/BrPf8p9/+MT2xNEm3j9c+4RzJfh0/AV6Bi6zPmiewX3x+hwHc8biO+LEnsz
gGhjc9jeeN//VOELsOXUbA2bq3Q95vyRiWxyAmq3WxPLFeb6edxE7pkb0cZf
4IsmpKYP6BC6NNnzD3zEMD8v9kOORq5W5vkMPmmA7xdfOCuxtwpqLmovYghx
Y5n7I3LiCs8/yDeoOfbKPq4OlvvN8fmV7k/5R5nHAWILbxjkSPgUfMsK7iFY
DXCt+O0Sqw3wYfiyRaLFwWo4ajnq7dfUrnB95s65+0Nuzw96ftPf7wsbwpZW
ev5CPtUjtTiEfmOD2GKN6xNvEvhk7oi7muaxkbx4PrmPcOPcfDq+nZqA2uBj
r3cOi47HVq/wbRXsPYUcm1jMeZJ7v+32jI9oId6XXkdgs1083mEL6DuxiBqU
tw7eIKhNeVPZ7nUZtQ5vCPs9/yDf3uf1EjUjcf514R1ej1H34UPwJdQslant
gbrrsmB7w0fhq9gze8dn4jvxk+g/byD1EquRWQ81FrUWNRG1UZbbWTH/kmBE
G5mHNS53f8GZcDa8IVDLUtPytoBPq+/7LfUcgtg5N7HcAn1gT+yFWpYaep/X
yeQ2nA25IzkkZ/SGcN3Ean7ya97Mdrif5i2NNxDeQnjDqB/sjemb2OrT9n6H
nGWt3y1vFrxdsN7zPJayPmo8YiqyeevgfvkH+Sxvhrx7fJRZvsD7xo8a84H3
HfH1MhYd3+n5coNgOoIsZP4vszeyYmI2g+1Qh56KTWanYLpEXyePA9Sk6Bi6
Ra36E4JOfZ0=
            "]], 
           Polygon[CompressedData["
1:eJwtlmlUVlUUhi8YJh9XLormkDiFmuSUDAqooQyKIijOOCCaaIpihppZ2eDq
V6tp9bfRLGtpow3aZKZm5YCkpuXQIIKIM2JmSs+7zv7xLN77nn3Od/a5Z+9L
tznlhUvCPc9bCxGwNOR5z4Xxt7nnlcNMnqfBfPQaeJaxcp7fDjzvfSak+J53
PdLz/oVl+M8zvoK45TCX51CM592LHgD9YBrxRTAQ7TPWEqIVQ+wASA+5sQCv
Av0C6z3K82p4gOe+0AeSoCteBHHFrDcM3R7dATpCFNyN1xv62+8Ox8uAEbAM
rwxvkUB3xesG3WEp3uN42ZAFqXgz8FLQrdCtIRZy4RG8VbASlhCTxr5SYbrF
xxCziOeFsBLW4hXirUC/SG5P8vwELCP+fhiPnqAY6ElcDyhA50MezCEmi7mZ
MB5m4CXaGdyHHg4Z0AXvLhiDHg05UELMed7TOdjE+9vK+7uBXu67fY1XPqy5
Gh6Dl9lfKf4zyo+YSMb7ovtAAky18ytT7rAYhhGTBnO1V5it90ZMb70PSIBJ
ePPw+mk96A/T8ObjtdV83Tv0Heh2kKg7AW1sLAO9wHe5D9DdgYHQB6bjFWlv
tl4T+d2C3eR7hHyjmTsbfwTjdxLfCeJgF+M74Qc4RFwGMReZdwE85mzDe4Wx
Op7PwKt2/y+ha6EG3sBbj5ekdwEH0L9AFXzP2A5bO4r12kOHkKsb1c86xnYz
1gzvY/QX6C3wNaSz1pd4p9E1WguG4l1lXgNsZOwzvMF476I3oweh/2PsJtTD
WdhgY43KC92TM+gFt8M44i/hXYTLEOg+4GXCceachBNwgLEhvjuPT9Bh7Dcc
rtqcQt/Vseq5AB2OV629Qw1M1HvFa0Rfg38C926q7KyOwnBi/tYY+jo0wRi8
qaw5Bcp0P60udddK0BP1XqEEkvGSIMXGdP9Uv4M0BwZbXaYoFrJD7j7ctP21
Q8dBJ7gRuH6ViE6GJOtNQ5kzBGZZ71G9xcMC/R6MtHpT/Y5VL0QXED/O7nGS
rZdud70z3jz0Qt/lqFy7QGcYi+cxVsVeRhKXA6PgYes5mdbPFqNL1avhHquz
UrxCnieEXH2ozvK1byi2OpqJVwyzrJfk2trlvutbi2y9KXiTddZWv+qTeg95
yhHyY1x+yrMo5Pqq+oH2V4F+CB60vruK8ZfoL0/z/BRU4P1oNar3/xP6Z6iE
3/B+hz8hi7FDeGfRI313PjqnYei9ePthH3wTuBqsRG9DfwfbVbPW91J91xfU
HzbjfWV19qlqSfUHn8MW+60c+91z6HqoM2+regZ6F2y3upwArcgpFlrDlcDV
R1t0G4i22jqPF4UOQXOrwQ/w/rA8P0R/BIfhEt5FOA+jfFfXqu8WIZej+otq
9Rh6L3of7A9cDTbTdxJugz2qK+Zdi3R9RnmnEZMPYYy31HfZ7lqItSNVG7au
aj8bXY0+A7WqWetrv6IPw0HrneoJ6g2Vlk8suq3uPsSHXF/QXib57jt+C90E
nr5bjHfXnQu5XqEanExcPHoU5CoX4qrJ4RS8xvg6fiORmDetB5+2HJVrsvoi
3g7YCesD945i7Oz1DhqUQ+ByUm4X7Jz1TR5n31B9S3vxu8fUuxiPY3+9IQFy
ibuCdxUadF+JCSc2DJpZD9C3W+d3ivEWPEfCQeJimB9AR7hsc/Ub6n3qgY0w
2ndn0MP+p9H/NucC9y3LRG8g5p0I18NOwHE4afvUXJ3Be+hNsBHeCtye9XtH
0EdVZ/C6neVf9m3RN6YW7xZeHvF1qofA3Rf1pFp7rg9cDe6xWlBNfIv3P95I
TZ8=
            "]], 
           Polygon[{{4102, 4101, 3157, 1569, 1579, 3159}}]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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

            "]], 
           Polygon[CompressedData["
1:eJxFmHlwltUVxt8X4X3hfl/1YtVWnXbGOm2nddppp2Onm522U6e1U9vRaV3r
giK1bthdq4JUWxEV2XdCSAgkBAiBBAIECIEIgbAHAoQdZJGiIAIVivT5eU6n
f5z57nPP/e57l3Oec8697qG+tz/VJUmS29Ik6arfHSFJWtQu5EnSEJNksXC9
8JksSSqFP5CckswrJsl8yWm1f6Wx7Rrzb43dIlmu9nmNnyFdVkiSbpIo6Vmw
OZjrrGS62rM0fqbG7xYeI/yO8FHJv9Q+Lsl7Jsnjmn+fxjToe8fU91PhVcL7
NO6s8N3CW4Q/FB4pvENzdUpGq71MfbOkOyQ8MdqaWfvlWssnC/aNn+n/61L7
9gDJaLVf1/g7pTsofEDyntq/0LiRapdJP0T6e9Q3VHMNkUxWu0wyRLJVug7J
ULWXaPw8jd8lPEy4q/bzsObpLemmdg+tYWNqfeguaPxW4QeFuwiXCVcJT9T/
H9D/Dwm3CV8rfbPwAsmX1b5Bsoh74RvMLZmv9jOSOv23XvKs2u/r/xv0//uk
/0j4iPBa4euE1wjvFH5L+FPCy6KNYez9kkTrmSx9pfQjNN990s30+1sk/Dfh
gZmdHWf4onSt6rsmt/WuVnuY+iZLN1hj7oq2J/Y2QTJOcnc0HWNe0tjx3j+K
OSX3Sl+p3yrJXMkejVmpsZ/R/G9Jt0JyVW7rb1F7tPTl0o/V2PvddvtItzc1
Oxgi/aTU5uc7D0Yby3+el3699EvU/qz+0yZd72hrZc2TJXXS10q/Se03pXtY
Uq52meQhxkpfIX2FcB/h30nWqt0m+a3avSST1B6vMcM1tntPs3lsfYGkQX1z
pdvPGI1tF24WPi08VXhQsP8yxyPCc4RrUvsG38InNwvflpuvlvh6Vkg/UHiE
3wfrfYzxkjs19i7JOfdHfONLwpuEV0k+p/YK9XVw9tHOhjNah+0Kv6a5BmXm
L23qWyzdMeEp0q2XfFH9X5CsVbsvc0rXKvl9NB+GS+AUfLtFeFFq/jxYeJpw
dWr3/xS2IzzBz/dx7l94ofB67FB4r+Rbmuvbkv1qvyBpkG6BpL9/D+74rvR7
hAvyxyAp6A6KkvHST5G+UeNflP5t4dXCt2v8TuEa55cW6V/y82b9N0rfKbw5
2l7Zc7vaXTT3NunvEN4hvE3yc7VvlWxXe67bU63m+4PwBj/v6yUb1f6HpEm6
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
1cC1Hk9Z338Byld6Tg==
            "]], 
           Polygon[CompressedData["
1:eJw1lnlQV1UYhq+lmD9u9SMdNSvLlpn2fd+zfZvKxl1LzX2vZirLXQQVAcUF
hRSDFEQQoRQBTU1l0VwQ9xXJyg0XUlRQ7HnnfP3xzLz3/b5z7rnnfOec26rH
kDaDr/E8LxwaQGbQ8y6FeF6873mbAp63GZai+zb0vEfgYThLThV8iP4A3oPF
5AzHW0XbNLWBZTAd7zBeProQiuArvGy8JZABY2kbjbcDPRldQM4KiMXbhlcG
eyCaWBL+XJhAbIP6QA9EL0CPJj4IPRiGwhD40vqNIpaIrkD/CcdgCl4MHEAf
goMwjZwE+pwN8yEf7we8JeS14zs7QHuoxrs+lDb1PK8Tzx2hhvxw37X5jvgw
+B6m453Em4OeC0lwBN6kzRvQGjJ8l1dJ3mk4BeHkVNPnJ8T7wX7e5fPOw/jl
+hZ4BT+ddtPgOG3m4aXAzxBF20nQS8/EZqETybuBNo/DE7CC2CS8LTbPmu8o
vAl4RegSKIaJQfeOE+gLUA2T8GbjeVp/dJbmCWZo3aG/rcso363XOvR62Kj+
8GYqF+KtRmLxMmmXAbmw39ajDL0NKuBB3rUUr7d900itK/6PVmtaW61xufXX
x+pE7+uL7mdjrkc/DSEEfgm6elPdxdk86ts0l0fRU/GSbV5noWvwzsF51S9e
J4hFj7Pv1vePVp94K2EtRNBuLP4YaE8sWjWCl4oOMoYw7Su8GXg55GTDmoCr
G9XBQkiDdNufM612NUdT8KZCHIzDy8XLg+XwDV4M7EPvhd22j7S+hejxxCIg
UrWqGtTeV//QBS+VMSyASMtXHXymedC+0BoSiw+4/bsLbydst/3Wwb5zFPGp
mlt9P97v/8+Hxgv56MF8f6Mwz2tGfTcPdeuZaPOo/EXoneiPyMsi/xzP5+EA
3jN4adpjPFcG3Bl2lTZ1cNHm6mu8rehSyLQzZz9eG9p+Co/BAt/NwTTiiyEL
upKzlz73QAqxe8nbZXVQS/wKXNb48MbgpaMHBN0ZpbNqA5RAKQRou1I1Cq+h
X4WXbf+uwWuGbgpNYI7v8rS/F6FP0/5MwJ0br+OdQNfCZdvTN+I1hptgvvZd
0NWn6vSM1VUS3Eb8dmgJRdpD9k1b0aU6b827D+8BuN++V2fEZvqpgn91Tmu9
tSYwj9gd5BXjTdTZDN00B9q/Vh+qk854OTqj0N0tPtx3Z22C3TW6c3bDrTY+
jVl6HXo9FKoe4Ba8FtAc5pKzNui+XXNws3n78J5CPwmP2vrqHG+L3k1sj9YW
NsHdeMn6RvSWoDu7khlfCqTa3fKTfWeJzhTYCON15kNHOwOGkbOV5y3wh/V7
AP03+i/4x9Yvw/prhb4L7rT5S/BdnSxD58JyqISTcAret7u2se4B7oMBPPeH
XN/dPQV25qywe2sh3vM2B5qLQ3i12sPortAZslU/9HeI/rrx/Dl4PF8HDaFJ
qNufAfZnJrlvo9+Fd1SHQbcPtR8bkdfH/g+0D7UfLwTcfOu+rLLxn8W7AnVw
GMrhFLxl/ek/Yg3jXw2/6Yzy3XsVP0rsGByHkTACRgXdf4fy8tF5UGDnQqrv
/l80rvqMvwGEQFPGWsH3DsIfCHm+W6+Wtj/usXrQ+fIc+ll42vqbDw+h43Q3
hLj7aDXjXwXFAXcf6k5Rnu6rMvR22GHr8QLeS/AiHMQLYyzljKU3z710J4W6
c3yZ/SPpX+lb8uox7p7Ev4Duegc5Lcg9QtuPeR6q+9x369sFnYO+lnh9uIR3
EWospjWPZKwR0M7O8xj0VXQdeLyrh70jGn8yzAm4862tjUXxX31XI6qVODvn
e+ruJG8Esf8AmvSeJg==
            "]], 
           
           Polygon[{{4286, 4285, 3226, 1803, 1813, 
            3228}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0uA1EYgOFvpq2ZqdqwrI2kNgQ7liyVlrY7WxfQxl/8/1wCCTciXIUb
YVWJPZ4hmXfeNzlzvpwzc/ujwTCJiD18iHW+TyMesKmfuc+NPGISPV3nArs6
5ww7usZVdHWFU3R0kpcfRmzTTxaxxd/c5jfzN/iVX7Cmn/gRy/qIDzGv+9zD
rF4p1zGjp7iBuv5yh/I+B+an5X6u8DGfoKpP+Qw1fc4XmNCXfAVPXHvdZH/H
jlu+Q6ELQ6d5gRfR1B3uoqWHPMKSHjvIJ1b1e/L/f38B1Wsfog==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MkuA1AUgOGjNt00iKmlFl6DhHdoqZoS09KwYlkJC5a61OqkplfwIqw0
8RQSNr6bLv78f25uzj25iwdnpdORiNjEZybijmujEZe4111+5LdsxCt6+oWf
0dVP3EdH99IZ2rqTjJZu8UNCN7nJDW7wu/l17qd3cKuv+SrtoPd5Dxd6lVdw
ohe4iCP9Z+9fbOtvLnHO/DKP8RqP8wTW9SRPoaKneQYbepbzqOoCz2WH/zLP
RWzpH/MPOe/tAo71Ei/jXO/wLmr6y90BbvRHZvi//9jcK/I=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Mkug1EcxuG/VIxXYUfCVo0x1IqExK5ba+ONCNfQUtWKoS02rFoWJLVk
SSIx1dQb8CQWvzzv4ss5J1/P0triaktEpFVLRDxyuTViRW/2Jpuc6YxI6dee
5pR+7ElO6Nse55i+7FGO6NMe5pAadpIfHOQ7c85/4ja39GBvcF139gLndW0P
sF+Xdje7VLFfvftFRbvODPMdEVkWuMMiD7RrH/JIOfuYJ9qzSywrb1d4qn37
jOcq2M/OL7PN3e26sHvZpyt7lnOq2ze+vdW9XU38/98/eTE3Qw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0EsuA1AYQOFf0kpMmCE60SFDJkSLqgbxLhOaVGIBbEBYRTfCiKSbUIq0
HototfVIfI3ByTk3N/nvI316XjwbiIgj3CQiZiyOkxElLOgLXuWPoYh35PUb
v2JFN7mBnH7hZyzrJ65jST/yAxZ1jbN8zxmumD/LV3yJaX3CZaR1ljMY1yme
wIjuuWsXg/2zuI5fb6hyiwvmt3mNP3mdN9DRm7yFrt7mHfT0Lu/hS+9zEd/6
gA/xo2vmJ53Z4jaG9ag7jfXRczyPSX1r/w5T+jrx/79/g6cwpg==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Esuw1EUgPHTxF/ULpCwEaWtx8CAGBGDRid9oKJFJAy9HwtgRGIVklpI
1aP1XoJfY/Dl+25u7snJHVopz5VSEbGImyRi32G8PyKDQ13gK94djNjBpd7m
Bi50nbdwrje5hjO9wes41WtcxYmu8DGX+Yj3zD/gIq+ioXOcRVWP8SiKOs0D
WNZvdn3Fgn7kJmb1PWe4lY6Y4DZP8jO/INt7yx3kdJffkdcf/Ikp/cXfmNY/
/IsZ/WD+PD9xG0u6z05Jb389zCOo6Fv3d6jr6+T/f/8AU3sxzw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DsvQ3Ecx+GfpU3QKuJSmzdAwhuRmqw2S72DBlG3MlRSd0YGiRrZGDWV
uIzul5mEN+A5MXzyfM8Z/vmfMzg5XSi2RMSEKqmIOw9D6YhhPdhj/ORAW0Re
H3Y/+/Ru97JHb3Y3u/RqdzKnF7uDWT3bGT6xnY+ccv49x1lQwx7liC6Tc5jT
uf3rfj86tW95oyO7zhMd2DXWWGqN2OAMNznLOW3Z8yxr217gonbsJS5r115h
RXv2Kte0bx87/5BNXqtuf/FbZ8l3uWtGF3bVu3VdJeel/v/vH3+LMrI=
          "]]}, {
         Line[{2, 487, 11, 500, 501, 20, 526, 527, 29, 560, 561, 38, 594, 595,
           47, 628, 629, 56, 662, 663, 65, 694, 74}], 
         Line[{1905, 485, 1922, 3268, 2845, 3269, 1940, 3291, 2853, 3290, 
          1958, 3317, 2861, 3318, 1975, 3343, 2870, 3342, 1990, 3366, 2879, 
          3367, 2007, 3396, 2890, 3395, 2026, 3421, 2024, 2046}], 
         Line[{1907, 486, 1923, 504, 3271, 1941, 3294, 2854, 3295, 1959, 3321,
           2864, 3320, 1976, 3345, 2873, 3346, 1991, 3371, 2882, 3370, 2008, 
          3398, 2893, 3399, 2027, 3423, 2028, 2047}], 
         Line[{1909, 2843, 3264, 1925, 2848, 3274, 3275, 1943, 3302, 2856, 
          3300, 1961, 3328, 2866, 3326, 1978, 608, 3351, 1993, 3376, 2885, 
          3379, 2010, 3406, 2896, 3404, 2030, 3429, 2034, 2049}], 
         Line[{1912, 2844, 3266, 1928, 2850, 3284, 3286, 1946, 3313, 2859, 
          3311, 1964, 3334, 2868, 3339, 1980, 2877, 3360, 3362, 1996, 3391, 
          2888, 3386, 2012, 3413, 2898, 3418, 2032, 3435, 2040, 2051}], 
         Line[{1914, 1921, 3270, 1930, 1939, 3292, 3293, 1949, 3288, 2862, 
          3319, 1967, 3315, 2871, 3344, 1982, 3341, 2881, 3369, 1998, 3364, 
          2891, 3397, 2015, 3422, 2900, 3394, 2036, 3420, 2907, 2053}], 
         Line[{1916, 1926, 3273, 1933, 3299, 2855, 3298, 1952, 3325, 2865, 
          3324, 1969, 3348, 2874, 3350, 1985, 3375, 2883, 3374, 2001, 3401, 
          2894, 3403, 2018, 3425, 2901, 3427, 2038, 3440, 2909, 2056}], 
         Line[{1918, 1931, 3278, 1935, 1950, 3305, 3307, 1954, 578, 3331, 
          1971, 3356, 2876, 3355, 1987, 1999, 3381, 3383, 2003, 3411, 2897, 
          3410, 2021, 3431, 2903, 3433, 2042, 3442, 2910, 2058}], 
         Line[{1920, 3261, 2852, 1938, 1955, 3279, 3281, 1957, 3308, 2869, 
          3337, 1974, 620, 3332, 1989, 3357, 2889, 3389, 2006, 688, 3390, 
          2023, 3417, 2905, 3438, 2045, 3444, 2912, 2060}], 
         Line[{2048, 2033, 3428, 2029, 2013, 3407, 3405, 2009, 3378, 3377, 
          2884, 1992, 609, 3352, 1977, 1965, 3329, 3327, 1960, 1947, 3303, 
          3301, 1942, 511, 3276, 1924, 1906, 3263, 1908}], 
         Line[{2050, 2039, 3434, 2031, 2019, 3414, 3412, 2011, 3385, 3384, 
          2887, 1995, 3361, 2878, 3358, 1979, 3338, 2867, 3333, 1963, 3310, 
          3309, 2858, 1945, 3285, 2851, 3282, 1927, 1910, 3265, 1911}], 
         Line[{2052, 2906, 3419, 2035, 3393, 3392, 2025, 2014, 2892, 3365, 
          3363, 1997, 3368, 2880, 3340, 1981, 2872, 3316, 3314, 1966, 2863, 
          3289, 3287, 1948, 529, 3267, 1929, 2846, 3262, 1913}], 
         Line[{2055, 2908, 3439, 2037, 2902, 3426, 3424, 2017, 2895, 3402, 
          3400, 2000, 3373, 3372, 1994, 1984, 2875, 3349, 3347, 1968, 3323, 
          3322, 1962, 1951, 3297, 3296, 1944, 1932, 2847, 3272, 1915}], 
         Line[{2057, 3441, 2054, 2041, 2904, 3432, 3430, 2020, 3409, 3408, 
          2016, 2002, 3382, 2886, 3380, 1986, 3354, 3353, 1983, 1970, 579, 
          3330, 1953, 3306, 2857, 3304, 1934, 2849, 3277, 1917}], 
         Line[{2059, 2911, 3443, 2044, 3437, 3436, 2043, 2022, 2899, 3416, 
          3415, 2005, 3388, 3387, 2004, 1988, 621, 3359, 1973, 3336, 3335, 
          1972, 1956, 3280, 2860, 3312, 1937, 3283, 1936, 1919}], 
         Line[{83, 725, 92, 738, 739, 101, 764, 765, 110, 798, 799, 119, 832, 
          833, 128, 866, 867, 137, 900, 901, 146, 932, 155}], 
         Line[{2061, 723, 2078, 3452, 2915, 3453, 2096, 3475, 2923, 3474, 
          2114, 3501, 2931, 3502, 2131, 3527, 2940, 3526, 2146, 3550, 2949, 
          3551, 2163, 3580, 2960, 3579, 2182, 3605, 2180, 2202}], 
         Line[{2063, 724, 2079, 742, 3455, 2097, 3478, 2924, 3479, 2115, 3505,
           2934, 3504, 2132, 3529, 2943, 3530, 2147, 3555, 2952, 3554, 2164, 
          3582, 2963, 3583, 2183, 3607, 2184, 2203}], 
         Line[{2065, 2913, 3448, 2081, 2918, 3458, 3459, 2099, 3486, 2926, 
          3484, 2117, 3512, 2936, 3510, 2134, 846, 3535, 2149, 3560, 2955, 
          3563, 2166, 3590, 2966, 3588, 2186, 3613, 2190, 2205}], 
         Line[{2068, 2914, 3450, 2084, 2920, 3468, 3470, 2102, 3497, 2929, 
          3495, 2120, 3518, 2938, 3523, 2136, 2947, 3544, 3546, 2152, 3575, 
          2958, 3570, 2168, 3597, 2968, 3602, 2188, 3619, 2196, 2207}], 
         Line[{2070, 2077, 3454, 2086, 2095, 3476, 3477, 2105, 3472, 2932, 
          3503, 2123, 3499, 2941, 3528, 2138, 3525, 2951, 3553, 2154, 3548, 
          2961, 3581, 2171, 3606, 2970, 3578, 2192, 3604, 2977, 2209}], 
         Line[{2072, 2082, 3457, 2089, 3483, 2925, 3482, 2108, 3509, 2935, 
          3508, 2125, 3532, 2944, 3534, 2141, 3559, 2953, 3558, 2157, 3585, 
          2964, 3587, 2174, 3609, 2971, 3611, 2194, 3624, 2979, 2212}], 
         Line[{2074, 2087, 3462, 2091, 2106, 3489, 3491, 2110, 816, 3515, 
          2127, 3540, 2946, 3539, 2143, 2155, 3565, 3567, 2159, 3595, 2967, 
          3594, 2177, 3615, 2973, 3617, 2198, 3626, 2980, 2214}], 
         Line[{2076, 3445, 2922, 2094, 2111, 3463, 3465, 2113, 3492, 2939, 
          3521, 2130, 858, 3516, 2145, 3541, 2959, 3573, 2162, 926, 3574, 
          2179, 3601, 2975, 3622, 2201, 3628, 2982, 2216}], 
         Line[{2204, 2189, 3612, 2185, 2169, 3591, 3589, 2165, 3562, 3561, 
          2954, 2148, 847, 3536, 2133, 2121, 3513, 3511, 2116, 2103, 3487, 
          3485, 2098, 749, 3460, 2080, 2062, 3447, 2064}], 
         Line[{2206, 2195, 3618, 2187, 2175, 3598, 3596, 2167, 3569, 3568, 
          2957, 2151, 3545, 2948, 3542, 2135, 3522, 2937, 3517, 2119, 3494, 
          3493, 2928, 2101, 3469, 2921, 3466, 2083, 2066, 3449, 2067}], 
         Line[{2208, 2976, 3603, 2191, 3577, 3576, 2181, 2170, 2962, 3549, 
          3547, 2153, 3552, 2950, 3524, 2137, 2942, 3500, 3498, 2122, 2933, 
          3473, 3471, 2104, 767, 3451, 2085, 2916, 3446, 2069}], 
         Line[{2211, 2978, 3623, 2193, 2972, 3610, 3608, 2173, 2965, 3586, 
          3584, 2156, 3557, 3556, 2150, 2140, 2945, 3533, 3531, 2124, 3507, 
          3506, 2118, 2107, 3481, 3480, 2100, 2088, 2917, 3456, 2071}], 
         Line[{2213, 3625, 2210, 2197, 2974, 3616, 3614, 2176, 3593, 3592, 
          2172, 2158, 3566, 2956, 3564, 2142, 3538, 3537, 2139, 2126, 817, 
          3514, 2109, 3490, 2927, 3488, 2090, 2919, 3461, 2073}], 
         Line[{2215, 2981, 3627, 2200, 3621, 3620, 2199, 2178, 2969, 3600, 
          3599, 2161, 3572, 3571, 2160, 2144, 859, 3543, 2129, 3520, 3519, 
          2128, 2112, 3464, 2930, 3496, 2093, 3467, 2092, 2075}], 
         Line[{164, 963, 173, 976, 977, 182, 1002, 1003, 191, 1036, 1037, 200,
           1070, 1071, 209, 1104, 1105, 218, 1138, 1139, 227, 1170, 236}], 
         Line[{2217, 961, 2234, 3636, 2985, 3637, 2252, 3659, 2993, 3658, 
          2270, 3685, 3001, 3686, 2287, 3711, 3010, 3710, 2302, 3734, 3019, 
          3735, 2319, 3764, 3030, 3763, 2338, 3789, 2336, 2358}], 
         Line[{2219, 962, 2235, 980, 3639, 2253, 3662, 2994, 3663, 2271, 3689,
           3004, 3688, 2288, 3713, 3013, 3714, 2303, 3739, 3022, 3738, 2320, 
          3766, 3033, 3767, 2339, 3791, 2340, 2359}], 
         Line[{2221, 2983, 3632, 2237, 2988, 3642, 3643, 2255, 3670, 2996, 
          3668, 2273, 3696, 3006, 3694, 2290, 1084, 3719, 2305, 3744, 3025, 
          3747, 2322, 3774, 3036, 3772, 2342, 3797, 2346, 2361}], 
         Line[{2224, 2984, 3634, 2240, 2990, 3652, 3654, 2258, 3681, 2999, 
          3679, 2276, 3702, 3008, 3707, 2292, 3017, 3728, 3730, 2308, 3759, 
          3028, 3754, 2324, 3781, 3038, 3786, 2344, 3803, 2352, 2363}], 
         Line[{2226, 2233, 3638, 2242, 2251, 3660, 3661, 2261, 3656, 3002, 
          3687, 2279, 3683, 3011, 3712, 2294, 3709, 3021, 3737, 2310, 3732, 
          3031, 3765, 2327, 3790, 3040, 3762, 2348, 3788, 3047, 2365}], 
         Line[{2228, 2238, 3641, 2245, 3667, 2995, 3666, 2264, 3693, 3005, 
          3692, 2281, 3716, 3014, 3718, 2297, 3743, 3023, 3742, 2313, 3769, 
          3034, 3771, 2330, 3793, 3041, 3795, 2350, 3808, 3049, 2368}], 
         Line[{2230, 2243, 3646, 2247, 2262, 3673, 3675, 2266, 1054, 3699, 
          2283, 3724, 3016, 3723, 2299, 2311, 3749, 3751, 2315, 3779, 3037, 
          3778, 2333, 3799, 3043, 3801, 2354, 3810, 3050, 2370}], 
         Line[{2232, 3629, 2992, 2250, 2267, 3647, 3649, 2269, 3676, 3009, 
          3705, 2286, 1096, 3700, 2301, 3725, 3029, 3757, 2318, 1164, 3758, 
          2335, 3785, 3045, 3806, 2357, 3812, 3052, 2372}], 
         Line[{2360, 2345, 3796, 2341, 2325, 3775, 3773, 2321, 3746, 3745, 
          3024, 2304, 1085, 3720, 2289, 2277, 3697, 3695, 2272, 2259, 3671, 
          3669, 2254, 987, 3644, 2236, 2218, 3631, 2220}], 
         Line[{2362, 2351, 3802, 2343, 2331, 3782, 3780, 2323, 3753, 3752, 
          3027, 2307, 3729, 3018, 3726, 2291, 3706, 3007, 3701, 2275, 3678, 
          3677, 2998, 2257, 3653, 2991, 3650, 2239, 2222, 3633, 2223}], 
         Line[{2364, 3046, 3787, 2347, 3761, 3760, 2337, 2326, 3032, 3733, 
          3731, 2309, 3736, 3020, 3708, 2293, 3012, 3684, 3682, 2278, 3003, 
          3657, 3655, 2260, 1005, 3635, 2241, 2986, 3630, 2225}], 
         Line[{2367, 3048, 3807, 2349, 3042, 3794, 3792, 2329, 3035, 3770, 
          3768, 2312, 3741, 3740, 2306, 2296, 3015, 3717, 3715, 2280, 3691, 
          3690, 2274, 2263, 3665, 3664, 2256, 2244, 2987, 3640, 2227}], 
         Line[{2369, 3809, 2366, 2353, 3044, 3800, 3798, 2332, 3777, 3776, 
          2328, 2314, 3750, 3026, 3748, 2298, 3722, 3721, 2295, 2282, 1055, 
          3698, 2265, 3674, 2997, 3672, 2246, 2989, 3645, 2229}], 
         Line[{2371, 3051, 3811, 2356, 3805, 3804, 2355, 2334, 3039, 3784, 
          3783, 2317, 3756, 3755, 2316, 2300, 1097, 3727, 2285, 3704, 3703, 
          2284, 2268, 3648, 3000, 3680, 2249, 3651, 2248, 2231}], 
         Line[{245, 1201, 254, 1214, 1215, 263, 1240, 1241, 272, 1274, 1275, 
          281, 1308, 1309, 290, 1342, 1343, 299, 1376, 1377, 308, 1408, 317}], 
         Line[{2373, 1199, 2390, 3820, 3055, 3821, 2408, 3843, 3063, 3842, 
          2426, 3869, 3071, 3870, 2443, 3895, 3080, 3894, 2458, 3918, 3089, 
          3919, 2475, 3948, 3100, 3947, 2494, 3973, 2492, 2514}], 
         Line[{2375, 1200, 2391, 1218, 3823, 2409, 3846, 3064, 3847, 2427, 
          3873, 3074, 3872, 2444, 3897, 3083, 3898, 2459, 3923, 3092, 3922, 
          2476, 3950, 3103, 3951, 2495, 3975, 2496, 2515}], 
         Line[{2377, 3053, 3816, 2393, 3058, 3826, 3827, 2411, 3854, 3066, 
          3852, 2429, 3880, 3076, 3878, 2446, 1322, 3903, 2461, 3928, 3095, 
          3931, 2478, 3958, 3106, 3956, 2498, 3981, 2502, 2517}], 
         Line[{2380, 3054, 3818, 2396, 3060, 3836, 3838, 2414, 3865, 3069, 
          3863, 2432, 3886, 3078, 3891, 2448, 3087, 3912, 3914, 2464, 3943, 
          3098, 3938, 2480, 3965, 3108, 3970, 2500, 3987, 2508, 2519}], 
         Line[{2382, 2389, 3822, 2398, 2407, 3844, 3845, 2417, 3840, 3072, 
          3871, 2435, 3867, 3081, 3896, 2450, 3893, 3091, 3921, 2466, 3916, 
          3101, 3949, 2483, 3974, 3110, 3946, 2504, 3972, 3117, 2521}], 
         Line[{2384, 2394, 3825, 2401, 3851, 3065, 3850, 2420, 3877, 3075, 
          3876, 2437, 3900, 3084, 3902, 2453, 3927, 3093, 3926, 2469, 3953, 
          3104, 3955, 2486, 3977, 3111, 3979, 2506, 3992, 3119, 2524}], 
         Line[{2386, 2399, 3830, 2403, 2418, 3857, 3859, 2422, 1292, 3883, 
          2439, 3908, 3086, 3907, 2455, 2467, 3933, 3935, 2471, 3963, 3107, 
          3962, 2489, 3983, 3113, 3985, 2510, 3994, 3120, 2526}], 
         Line[{2388, 3813, 3062, 2406, 2423, 3831, 3833, 2425, 3860, 3079, 
          3889, 2442, 1334, 3884, 2457, 3909, 3099, 3941, 2474, 1402, 3942, 
          2491, 3969, 3115, 3990, 2513, 3996, 3122, 2528}], 
         Line[{2516, 2501, 3980, 2497, 2481, 3959, 3957, 2477, 3930, 3929, 
          3094, 2460, 1323, 3904, 2445, 2433, 3881, 3879, 2428, 2415, 3855, 
          3853, 2410, 1225, 3828, 2392, 2374, 3815, 2376}], 
         Line[{2518, 2507, 3986, 2499, 2487, 3966, 3964, 2479, 3937, 3936, 
          3097, 2463, 3913, 3088, 3910, 2447, 3890, 3077, 3885, 2431, 3862, 
          3861, 3068, 2413, 3837, 3061, 3834, 2395, 2378, 3817, 2379}], 
         Line[{2520, 3116, 3971, 2503, 3945, 3944, 2493, 2482, 3102, 3917, 
          3915, 2465, 3920, 3090, 3892, 2449, 3082, 3868, 3866, 2434, 3073, 
          3841, 3839, 2416, 1243, 3819, 2397, 3056, 3814, 2381}], 
         Line[{2523, 3118, 3991, 2505, 3112, 3978, 3976, 2485, 3105, 3954, 
          3952, 2468, 3925, 3924, 2462, 2452, 3085, 3901, 3899, 2436, 3875, 
          3874, 2430, 2419, 3849, 3848, 2412, 2400, 3057, 3824, 2383}], 
         Line[{2525, 3993, 2522, 2509, 3114, 3984, 3982, 2488, 3961, 3960, 
          2484, 2470, 3934, 3096, 3932, 2454, 3906, 3905, 2451, 2438, 1293, 
          3882, 2421, 3858, 3067, 3856, 2402, 3059, 3829, 2385}], 
         Line[{2527, 3121, 3995, 2512, 3989, 3988, 2511, 2490, 3109, 3968, 
          3967, 2473, 3940, 3939, 2472, 2456, 1335, 3911, 2441, 3888, 3887, 
          2440, 2424, 3832, 3070, 3864, 2405, 3835, 2404, 2387}], 
         Line[{326, 1439, 335, 1452, 1453, 344, 1478, 1479, 353, 1512, 1513, 
          362, 1546, 1547, 370, 1576, 1577, 379, 1610, 1611, 388, 1642, 397}], 
         Line[{2529, 1437, 2546, 4004, 3125, 4005, 2564, 4027, 3133, 4026, 
          2582, 4051, 3141, 4052, 2599, 4079, 3152, 4078, 2615, 4077, 3158, 
          4100, 2632, 4132, 3169, 4131, 2651, 4157, 2649, 2671}], 
         Line[{2531, 1438, 2547, 1456, 4007, 2565, 4030, 3134, 4031, 2583, 
          4055, 3144, 4054, 2600, 4083, 3155, 4084, 2616, 4107, 3161, 4106, 
          2633, 4134, 3172, 4135, 2652, 4159, 2653, 2672}], 
         Line[{2533, 3123, 4000, 2549, 3128, 4010, 4011, 2567, 4038, 3136, 
          4036, 2585, 4062, 3146, 4060, 2602, 1560, 4089, 2618, 4112, 3164, 
          4115, 2635, 4142, 3175, 4140, 2655, 4165, 2659, 2674}], 
         Line[{2536, 3124, 4002, 2552, 3130, 4020, 4022, 2570, 4049, 3139, 
          4047, 2588, 4068, 3148, 4074, 2605, 4101, 3157, 4096, 2621, 4127, 
          3167, 4122, 2637, 4149, 3177, 4154, 2657, 4171, 2665, 2676}], 
         Line[{2538, 2545, 4006, 2554, 2563, 4028, 4029, 2573, 4024, 3142, 
          4053, 2591, 4050, 3150, 4076, 2607, 4103, 3160, 4105, 2623, 4098, 
          3170, 4133, 2640, 4158, 3179, 4130, 2661, 4156, 3186, 2678}], 
         Line[{2540, 2550, 4009, 2557, 4035, 3135, 4034, 2576, 4059, 3145, 
          4058, 2593, 4081, 3153, 4085, 2609, 4111, 3162, 4110, 2626, 4137, 
          3173, 4139, 2643, 4161, 3180, 4163, 2663, 4176, 3188, 2681}], 
         Line[{2542, 2555, 4014, 2559, 2574, 4041, 4043, 2578, 1530, 4065, 
          2595, 4091, 3156, 4088, 2611, 2624, 4117, 4119, 2628, 4147, 3176, 
          4146, 2646, 4167, 3182, 4169, 2667, 4178, 3189, 2683}], 
         Line[{2544, 3997, 3132, 2562, 2579, 4015, 4017, 2581, 4044, 3151, 
          4071, 2598, 1566, 4066, 2614, 4093, 3168, 4125, 2631, 1636, 4126, 
          2648, 4153, 3184, 4174, 2670, 4180, 3191, 2685}], 
         Line[{2673, 2658, 4164, 2654, 2638, 4143, 4141, 2634, 4114, 4113, 
          3163, 2617, 1561, 4090, 2601, 2589, 4063, 4061, 2584, 2571, 4039, 
          4037, 2566, 1463, 4012, 2548, 2530, 3999, 2532}], 
         Line[{2675, 2664, 4170, 2656, 2644, 4150, 4148, 2636, 4121, 4120, 
          3166, 2620, 4095, 4094, 2612, 2604, 4073, 3147, 4067, 2587, 4046, 
          4045, 3138, 2569, 4021, 3131, 4018, 2551, 2534, 4001, 2535}], 
         Line[{2677, 3185, 4155, 2660, 4129, 4128, 2650, 2639, 3171, 4099, 
          4097, 2622, 4104, 3159, 4102, 2606, 4075, 4072, 3149, 2590, 3143, 
          4025, 4023, 2572, 1481, 4003, 2553, 3126, 3998, 2537}], 
         Line[{2680, 3187, 4175, 2662, 3181, 4162, 4160, 2642, 3174, 4138, 
          4136, 2625, 4109, 4108, 2619, 2608, 3154, 4082, 4080, 2592, 4057, 
          4056, 2586, 2575, 4033, 4032, 2568, 2556, 3127, 4008, 2539}], 
         Line[{2682, 4177, 2679, 2666, 3183, 4168, 4166, 2645, 4145, 4144, 
          2641, 2627, 4118, 3165, 4116, 2610, 4087, 4086, 2603, 2594, 1531, 
          4064, 2577, 4042, 3137, 4040, 2558, 3129, 4013, 2541}], 
         Line[{2684, 3190, 4179, 2669, 4173, 4172, 2668, 2647, 3178, 4152, 
          4151, 2630, 4124, 4123, 2629, 2613, 1567, 4092, 2597, 4070, 4069, 
          2596, 2580, 4016, 3140, 4048, 2561, 4019, 2560, 2543}], 
         Line[{406, 1673, 415, 1686, 1687, 424, 1712, 1713, 433, 1746, 1747, 
          442, 1780, 1781, 450, 1810, 1811, 459, 1844, 1845, 468, 1876, 477}], 
         Line[{2686, 1671, 2703, 4188, 3194, 4189, 2721, 4211, 3202, 4210, 
          2739, 4235, 3210, 4236, 2756, 4263, 3221, 4262, 2772, 4261, 3227, 
          4284, 2789, 4316, 3238, 4315, 2808, 4341, 2806, 2828}], 
         Line[{2688, 1672, 2704, 1690, 4191, 2722, 4214, 3203, 4215, 2740, 
          4239, 3213, 4238, 2757, 4267, 3224, 4268, 2773, 4291, 3230, 4290, 
          2790, 4318, 3241, 4319, 2809, 4343, 2810, 2829}], 
         Line[{2690, 3192, 4184, 2706, 3197, 4194, 4195, 2724, 4222, 3205, 
          4220, 2742, 4246, 3215, 4244, 2759, 1794, 4273, 2775, 4296, 3233, 
          4299, 2792, 4326, 3244, 4324, 2812, 4349, 2816, 2831}], 
         Line[{2693, 3193, 4186, 2709, 3199, 4204, 4206, 2727, 4233, 3208, 
          4231, 2745, 4252, 3217, 4258, 2762, 4285, 3226, 4280, 2778, 4311, 
          3236, 4306, 2794, 4333, 3246, 4338, 2814, 4355, 2822, 2833}], 
         Line[{2695, 2702, 4190, 2711, 2720, 4212, 4213, 2730, 4208, 3211, 
          4237, 2748, 4234, 3219, 4260, 2764, 4287, 3229, 4289, 2780, 4282, 
          3239, 4317, 2797, 4342, 3248, 4314, 2818, 4340, 3255, 2835}], 
         Line[{2697, 2707, 4193, 2714, 4219, 3204, 4218, 2733, 4243, 3214, 
          4242, 2750, 4265, 3222, 4269, 2766, 4295, 3231, 4294, 2783, 4321, 
          3242, 4323, 2800, 4345, 3249, 4347, 2820, 4360, 3257, 2838}], 
         Line[{2699, 2712, 4198, 2716, 2731, 4225, 4227, 2735, 1764, 4249, 
          2752, 4275, 3225, 4272, 2768, 2781, 4301, 4303, 2785, 4331, 3245, 
          4330, 2803, 4351, 3251, 4353, 2824, 4362, 3258, 2840}], 
         Line[{2701, 4181, 3201, 2719, 2736, 4199, 4201, 2738, 4228, 3220, 
          4255, 2755, 1800, 4250, 2771, 4277, 3237, 4309, 2788, 1870, 4310, 
          2805, 4337, 3253, 4358, 2827, 4364, 3260, 2842}], 
         Line[{2830, 2815, 4348, 2811, 2795, 4327, 4325, 2791, 4298, 4297, 
          3232, 2774, 1795, 4274, 2758, 2746, 4247, 4245, 2741, 2728, 4223, 
          4221, 2723, 1697, 4196, 2705, 2687, 4183, 2689}], 
         Line[{2832, 2821, 4354, 2813, 2801, 4334, 4332, 2793, 4305, 4304, 
          3235, 2777, 4279, 4278, 2769, 2761, 4257, 3216, 4251, 2744, 4230, 
          4229, 3207, 2726, 4205, 3200, 4202, 2708, 2691, 4185, 2692}], 
         Line[{2834, 3254, 4339, 2817, 4313, 4312, 2807, 2796, 3240, 4283, 
          4281, 2779, 4288, 3228, 4286, 2763, 4259, 4256, 3218, 2747, 3212, 
          4209, 4207, 2729, 1715, 4187, 2710, 3195, 4182, 2694}], 
         Line[{2837, 3256, 4359, 2819, 3250, 4346, 4344, 2799, 3243, 4322, 
          4320, 2782, 4293, 4292, 2776, 2765, 3223, 4266, 4264, 2749, 4241, 
          4240, 2743, 2732, 4217, 4216, 2725, 2713, 3196, 4192, 2696}], 
         Line[{2839, 4361, 2836, 2823, 3252, 4352, 4350, 2802, 4329, 4328, 
          2798, 2784, 4302, 3234, 4300, 2767, 4271, 4270, 2760, 2751, 1765, 
          4248, 2734, 4226, 3206, 4224, 2715, 3198, 4197, 2698}], 
         Line[{2841, 3259, 4363, 2826, 4357, 4356, 2825, 2804, 3247, 4336, 
          4335, 2787, 4308, 4307, 2786, 2770, 1801, 4276, 2754, 4254, 4253, 
          2753, 2737, 4200, 3209, 4232, 2718, 4203, 2717, 2700}]}, {
         Line[{489, 3390, 689, 3416, 683, 681, 3410, 3409, 675, 3403, 673, 
          3402, 667, 3397, 665, 3365, 653, 651, 3386, 3385, 645, 643, 3379, 
          3378, 637, 3370, 635, 629, 625, 3367, 661}], 
         Line[{496, 655, 3389, 3388, 649, 3383, 3382, 647, 641, 639, 3374, 
          3373, 633, 3369, 3368, 631, 619, 3362, 3361, 617, 611, 3351, 609, 
          603, 601, 3346, 595, 3342, 591, 627}], 
         Line[{499, 485, 487, 486, 490, 3263, 491, 3264, 492, 3265, 493, 3266,
           494, 3262, 502, 3270, 503, 3272, 508, 3273, 509, 3277, 514, 3278, 
          515, 3283, 520, 3261, 521}], 
         Line[{18, 1938, 1937, 17, 1935, 1934, 16, 1933, 1932, 15, 1930, 1929,
           14, 1928, 1927, 13, 1925, 1924, 12, 1923, 11, 1922, 10}], 
         Line[{524, 497, 3268, 500, 504, 506, 3276, 510, 3274, 512, 3282, 516,
           3284, 518, 3267, 528, 3292, 530, 3296, 536, 3299, 538, 3304, 544, 
          3305, 546, 3312, 552, 3279, 554}], 
         Line[{555, 3281, 3280, 553, 547, 3307, 3306, 545, 539, 537, 3298, 
          3297, 531, 3293, 529, 519, 3286, 3285, 517, 513, 3275, 511, 507, 
          3271, 505, 501, 498, 3269, 525}], 
         Line[{558, 3291, 522, 526, 532, 3294, 534, 3301, 3302, 540, 542, 
          3309, 548, 3313, 550, 3287, 3288, 562, 564, 3322, 570, 3325, 572, 
          3330, 578, 580, 3335, 586, 3308, 588}], 
         Line[{589, 587, 3337, 3336, 581, 3331, 579, 573, 571, 3324, 3323, 
          565, 3319, 563, 3289, 551, 549, 3311, 3310, 543, 3300, 541, 3303, 
          535, 533, 3295, 527, 3290, 523, 559}], 
         Line[{592, 556, 3317, 560, 3321, 566, 568, 3327, 3328, 574, 576, 
          3333, 3334, 582, 584, 3314, 3315, 596, 598, 3347, 3348, 604, 606, 
          3353, 612, 3356, 614, 3359, 620, 622}], 
         Line[{623, 3332, 621, 615, 613, 3355, 3354, 607, 3350, 605, 3349, 
          599, 3344, 597, 3316, 585, 3339, 3338, 583, 577, 3326, 575, 3329, 
          569, 3320, 567, 561, 557, 3318, 593}], 
         Line[{626, 3343, 590, 594, 600, 3345, 602, 3352, 608, 610, 3358, 616,
           3360, 618, 3340, 3341, 630, 632, 3372, 638, 3375, 640, 3380, 646, 
          3381, 648, 3387, 654, 3357, 495}], 
         Line[{657, 714, 3438, 3437, 710, 3433, 708, 3432, 704, 3427, 702, 
          3426, 698, 696, 3394, 3393, 687, 3418, 685, 3414, 679, 3404, 677, 
          3407, 671, 669, 3399, 663, 3395, 659, 693}], 
         Line[{660, 624, 3366, 628, 3371, 634, 636, 3377, 642, 3376, 644, 
          3384, 650, 3391, 652, 3363, 3364, 664, 666, 3400, 3401, 672, 674, 
          3408, 680, 3411, 682, 3415, 688, 488}], 
         Line[{690, 722, 3444, 3443, 721, 3442, 720, 3441, 719, 718, 3440, 
          3439, 717, 716, 3420, 3419, 712, 711, 3435, 3434, 706, 705, 3429, 
          3428, 700, 699, 3423, 694, 3421, 691, 715}], 
         Line[{692, 3396, 658, 662, 668, 3398, 670, 3405, 3406, 676, 678, 
          3412, 3413, 684, 686, 3392, 695, 3422, 697, 3424, 3425, 701, 703, 
          3430, 3431, 707, 709, 3436, 713, 3417, 656}], 
         Line[{727, 3574, 927, 3600, 921, 919, 3594, 3593, 913, 3587, 911, 
          3586, 905, 3581, 903, 3549, 891, 889, 3570, 3569, 883, 881, 3563, 
          3562, 875, 3554, 873, 867, 863, 3551, 899}], 
         Line[{734, 893, 3573, 3572, 887, 3567, 3566, 885, 879, 877, 3558, 
          3557, 871, 3553, 3552, 869, 857, 3546, 3545, 855, 849, 3535, 847, 
          841, 839, 3530, 833, 3526, 829, 865}], 
         Line[{737, 723, 725, 724, 728, 3447, 729, 3448, 730, 3449, 731, 3450,
           732, 3446, 740, 3454, 741, 3456, 746, 3457, 747, 3461, 752, 3462, 
          753, 3467, 758, 3445, 759}], 
         Line[{99, 2094, 2093, 98, 2091, 2090, 97, 2089, 2088, 96, 2086, 2085,
           95, 2084, 2083, 94, 2081, 2080, 93, 2079, 92, 2078, 91}], 
         Line[{762, 735, 3452, 738, 742, 744, 3460, 748, 3458, 750, 3466, 754,
           3468, 756, 3451, 766, 3476, 768, 3480, 774, 3483, 776, 3488, 782, 
          3489, 784, 3496, 790, 3463, 792}], 
         Line[{793, 3465, 3464, 791, 785, 3491, 3490, 783, 777, 775, 3482, 
          3481, 769, 3477, 767, 757, 3470, 3469, 755, 751, 3459, 749, 745, 
          3455, 743, 739, 736, 3453, 763}], 
         Line[{796, 3475, 760, 764, 770, 3478, 772, 3485, 3486, 778, 780, 
          3493, 786, 3497, 788, 3471, 3472, 800, 802, 3506, 808, 3509, 810, 
          3514, 816, 818, 3519, 824, 3492, 826}], 
         Line[{827, 825, 3521, 3520, 819, 3515, 817, 811, 809, 3508, 3507, 
          803, 3503, 801, 3473, 789, 787, 3495, 3494, 781, 3484, 779, 3487, 
          773, 771, 3479, 765, 3474, 761, 797}], 
         Line[{830, 794, 3501, 798, 3505, 804, 806, 3511, 3512, 812, 814, 
          3517, 3518, 820, 822, 3498, 3499, 834, 836, 3531, 3532, 842, 844, 
          3537, 850, 3540, 852, 3543, 858, 860}], 
         Line[{861, 3516, 859, 853, 851, 3539, 3538, 845, 3534, 843, 3533, 
          837, 3528, 835, 3500, 823, 3523, 3522, 821, 815, 3510, 813, 3513, 
          807, 3504, 805, 799, 795, 3502, 831}], 
         Line[{864, 3527, 828, 832, 838, 3529, 840, 3536, 846, 848, 3542, 854,
           3544, 856, 3524, 3525, 868, 870, 3556, 876, 3559, 878, 3564, 884, 
          3565, 886, 3571, 892, 3541, 733}], 
         Line[{895, 952, 3622, 3621, 948, 3617, 946, 3616, 942, 3611, 940, 
          3610, 936, 934, 3578, 3577, 925, 3602, 923, 3598, 917, 3588, 915, 
          3591, 909, 907, 3583, 901, 3579, 897, 931}], 
         Line[{898, 862, 3550, 866, 3555, 872, 874, 3561, 880, 3560, 882, 
          3568, 888, 3575, 890, 3547, 3548, 902, 904, 3584, 3585, 910, 912, 
          3592, 918, 3595, 920, 3599, 926, 726}], 
         Line[{928, 960, 3628, 3627, 959, 3626, 958, 3625, 957, 956, 3624, 
          3623, 955, 954, 3604, 3603, 950, 949, 3619, 3618, 944, 943, 3613, 
          3612, 938, 937, 3607, 932, 3605, 929, 953}], 
         Line[{930, 3580, 896, 900, 906, 3582, 908, 3589, 3590, 914, 916, 
          3596, 3597, 922, 924, 3576, 933, 3606, 935, 3608, 3609, 939, 941, 
          3614, 3615, 945, 947, 3620, 951, 3601, 894}], 
         Line[{965, 3758, 1165, 3784, 1159, 1157, 3778, 3777, 1151, 3771, 
          1149, 3770, 1143, 3765, 1141, 3733, 1129, 1127, 3754, 3753, 1121, 
          1119, 3747, 3746, 1113, 3738, 1111, 1105, 1101, 3735, 1137}], 
         Line[{972, 1131, 3757, 3756, 1125, 3751, 3750, 1123, 1117, 1115, 
          3742, 3741, 1109, 3737, 3736, 1107, 1095, 3730, 3729, 1093, 1087, 
          3719, 1085, 1079, 1077, 3714, 1071, 3710, 1067, 1103}], 
         Line[{975, 961, 963, 962, 966, 3631, 967, 3632, 968, 3633, 969, 3634,
           970, 3630, 978, 3638, 979, 3640, 984, 3641, 985, 3645, 990, 3646, 
          991, 3651, 996, 3629, 997}], 
         Line[{180, 2250, 2249, 179, 2247, 2246, 178, 2245, 2244, 177, 2242, 
          2241, 176, 2240, 2239, 175, 2237, 2236, 174, 2235, 173, 2234, 172}], 
         Line[{1000, 973, 3636, 976, 980, 982, 3644, 986, 3642, 988, 3650, 
          992, 3652, 994, 3635, 1004, 3660, 1006, 3664, 1012, 3667, 1014, 
          3672, 1020, 3673, 1022, 3680, 1028, 3647, 1030}], 
         Line[{1031, 3649, 3648, 1029, 1023, 3675, 3674, 1021, 1015, 1013, 
          3666, 3665, 1007, 3661, 1005, 995, 3654, 3653, 993, 989, 3643, 987, 
          983, 3639, 981, 977, 974, 3637, 1001}], 
         Line[{1034, 3659, 998, 1002, 1008, 3662, 1010, 3669, 3670, 1016, 
          1018, 3677, 1024, 3681, 1026, 3655, 3656, 1038, 1040, 3690, 1046, 
          3693, 1048, 3698, 1054, 1056, 3703, 1062, 3676, 1064}], 
         Line[{1065, 1063, 3705, 3704, 1057, 3699, 1055, 1049, 1047, 3692, 
          3691, 1041, 3687, 1039, 3657, 1027, 1025, 3679, 3678, 1019, 3668, 
          1017, 3671, 1011, 1009, 3663, 1003, 3658, 999, 1035}], 
         Line[{1068, 1032, 3685, 1036, 3689, 1042, 1044, 3695, 3696, 1050, 
          1052, 3701, 3702, 1058, 1060, 3682, 3683, 1072, 1074, 3715, 3716, 
          1080, 1082, 3721, 1088, 3724, 1090, 3727, 1096, 1098}], 
         Line[{1099, 3700, 1097, 1091, 1089, 3723, 3722, 1083, 3718, 1081, 
          3717, 1075, 3712, 1073, 3684, 1061, 3707, 3706, 1059, 1053, 3694, 
          1051, 3697, 1045, 3688, 1043, 1037, 1033, 3686, 1069}], 
         Line[{1102, 3711, 1066, 1070, 1076, 3713, 1078, 3720, 1084, 1086, 
          3726, 1092, 3728, 1094, 3708, 3709, 1106, 1108, 3740, 1114, 3743, 
          1116, 3748, 1122, 3749, 1124, 3755, 1130, 3725, 971}], 
         Line[{1133, 1190, 3806, 3805, 1186, 3801, 1184, 3800, 1180, 3795, 
          1178, 3794, 1174, 1172, 3762, 3761, 1163, 3786, 1161, 3782, 1155, 
          3772, 1153, 3775, 1147, 1145, 3767, 1139, 3763, 1135, 1169}], 
         Line[{1136, 1100, 3734, 1104, 3739, 1110, 1112, 3745, 1118, 3744, 
          1120, 3752, 1126, 3759, 1128, 3731, 3732, 1140, 1142, 3768, 3769, 
          1148, 1150, 3776, 1156, 3779, 1158, 3783, 1164, 964}], 
         Line[{1166, 1198, 3812, 3811, 1197, 3810, 1196, 3809, 1195, 1194, 
          3808, 3807, 1193, 1192, 3788, 3787, 1188, 1187, 3803, 3802, 1182, 
          1181, 3797, 3796, 1176, 1175, 3791, 1170, 3789, 1167, 1191}], 
         Line[{1168, 3764, 1134, 1138, 1144, 3766, 1146, 3773, 3774, 1152, 
          1154, 3780, 3781, 1160, 1162, 3760, 1171, 3790, 1173, 3792, 3793, 
          1177, 1179, 3798, 3799, 1183, 1185, 3804, 1189, 3785, 1132}], 
         Line[{1203, 3942, 1403, 3968, 1397, 1395, 3962, 3961, 1389, 3955, 
          1387, 3954, 1381, 3949, 1379, 3917, 1367, 1365, 3938, 3937, 1359, 
          1357, 3931, 3930, 1351, 3922, 1349, 1343, 1339, 3919, 1375}], 
         Line[{1210, 1369, 3941, 3940, 1363, 3935, 3934, 1361, 1355, 1353, 
          3926, 3925, 1347, 3921, 3920, 1345, 1333, 3914, 3913, 1331, 1325, 
          3903, 1323, 1317, 1315, 3898, 1309, 3894, 1305, 1341}], 
         Line[{1213, 1199, 1201, 1200, 1204, 3815, 1205, 3816, 1206, 3817, 
          1207, 3818, 1208, 3814, 1216, 3822, 1217, 3824, 1222, 3825, 1223, 
          3829, 1228, 3830, 1229, 3835, 1234, 3813, 1235}], 
         Line[{261, 2406, 2405, 260, 2403, 2402, 259, 2401, 2400, 258, 2398, 
          2397, 257, 2396, 2395, 256, 2393, 2392, 255, 2391, 254, 2390, 253}], 
         Line[{1238, 1211, 3820, 1214, 1218, 1220, 3828, 1224, 3826, 1226, 
          3834, 1230, 3836, 1232, 3819, 1242, 3844, 1244, 3848, 1250, 3851, 
          1252, 3856, 1258, 3857, 1260, 3864, 1266, 3831, 1268}], 
         Line[{1269, 3833, 3832, 1267, 1261, 3859, 3858, 1259, 1253, 1251, 
          3850, 3849, 1245, 3845, 1243, 1233, 3838, 3837, 1231, 1227, 3827, 
          1225, 1221, 3823, 1219, 1215, 1212, 3821, 1239}], 
         Line[{1272, 3843, 1236, 1240, 1246, 3846, 1248, 3853, 3854, 1254, 
          1256, 3861, 1262, 3865, 1264, 3839, 3840, 1276, 1278, 3874, 1284, 
          3877, 1286, 3882, 1292, 1294, 3887, 1300, 3860, 1302}], 
         Line[{1303, 1301, 3889, 3888, 1295, 3883, 1293, 1287, 1285, 3876, 
          3875, 1279, 3871, 1277, 3841, 1265, 1263, 3863, 3862, 1257, 3852, 
          1255, 3855, 1249, 1247, 3847, 1241, 3842, 1237, 1273}], 
         Line[{1306, 1270, 3869, 1274, 3873, 1280, 1282, 3879, 3880, 1288, 
          1290, 3885, 3886, 1296, 1298, 3866, 3867, 1310, 1312, 3899, 3900, 
          1318, 1320, 3905, 1326, 3908, 1328, 3911, 1334, 1336}], 
         Line[{1337, 3884, 1335, 1329, 1327, 3907, 3906, 1321, 3902, 1319, 
          3901, 1313, 3896, 1311, 3868, 1299, 3891, 3890, 1297, 1291, 3878, 
          1289, 3881, 1283, 3872, 1281, 1275, 1271, 3870, 1307}], 
         Line[{1340, 3895, 1304, 1308, 1314, 3897, 1316, 3904, 1322, 1324, 
          3910, 1330, 3912, 1332, 3892, 3893, 1344, 1346, 3924, 1352, 3927, 
          1354, 3932, 1360, 3933, 1362, 3939, 1368, 3909, 1209}], 
         Line[{1371, 1428, 3990, 3989, 1424, 3985, 1422, 3984, 1418, 3979, 
          1416, 3978, 1412, 1410, 3946, 3945, 1401, 3970, 1399, 3966, 1393, 
          3956, 1391, 3959, 1385, 1383, 3951, 1377, 3947, 1373, 1407}], 
         Line[{1374, 1338, 3918, 1342, 3923, 1348, 1350, 3929, 1356, 3928, 
          1358, 3936, 1364, 3943, 1366, 3915, 3916, 1378, 1380, 3952, 3953, 
          1386, 1388, 3960, 1394, 3963, 1396, 3967, 1402, 1202}], 
         Line[{1404, 1436, 3996, 3995, 1435, 3994, 1434, 3993, 1433, 1432, 
          3992, 3991, 1431, 1430, 3972, 3971, 1426, 1425, 3987, 3986, 1420, 
          1419, 3981, 3980, 1414, 1413, 3975, 1408, 3973, 1405, 1429}], 
         Line[{1406, 3948, 1372, 1376, 1382, 3950, 1384, 3957, 3958, 1390, 
          1392, 3964, 3965, 1398, 1400, 3944, 1409, 3974, 1411, 3976, 3977, 
          1415, 1417, 3982, 3983, 1421, 1423, 3988, 1427, 3969, 1370}], 
         Line[{1441, 4126, 1637, 4152, 1631, 1629, 4146, 4145, 1623, 4139, 
          1621, 4138, 1615, 4133, 1613, 4099, 1601, 1599, 4122, 4121, 1593, 
          1591, 4115, 4114, 1585, 4106, 1583, 1577, 1573, 4100, 1609}], 
         Line[{1448, 1603, 4125, 4124, 1597, 4119, 4118, 1595, 1589, 1587, 
          4110, 4109, 1581, 4105, 4104, 1579, 1569, 4096, 4095, 1563, 4089, 
          1561, 1555, 1553, 4084, 1547, 4078, 1543, 1575}], 
         Line[{1451, 1437, 1439, 1438, 1442, 3999, 1443, 4000, 1444, 4001, 
          1445, 4002, 1446, 3998, 1454, 4006, 1455, 4008, 1460, 4009, 1461, 
          4013, 1466, 4014, 1467, 4019, 1472, 3997, 1473}], 
         Line[{342, 2562, 2561, 341, 2559, 2558, 340, 2557, 2556, 339, 2554, 
          2553, 338, 2552, 2551, 337, 2549, 2548, 336, 2547, 335, 2546, 334}], 
         Line[{1476, 1449, 4004, 1452, 1456, 1458, 4012, 1462, 4010, 1464, 
          4018, 1468, 4020, 1470, 4003, 1480, 4028, 1482, 4032, 1488, 4035, 
          1490, 4040, 1496, 4041, 1498, 4048, 1504, 4015, 1506}], 
         Line[{1507, 4017, 4016, 1505, 1499, 4043, 4042, 1497, 1491, 1489, 
          4034, 4033, 1483, 4029, 1481, 1471, 4022, 4021, 1469, 1465, 4011, 
          1463, 1459, 4007, 1457, 1453, 1450, 4005, 1477}], 
         Line[{1510, 4027, 1474, 1478, 1484, 4030, 1486, 4037, 4038, 1492, 
          1494, 4045, 1500, 4049, 1502, 4023, 4024, 1514, 1516, 4056, 1522, 
          4059, 1524, 4064, 1530, 1532, 4069, 1538, 4044, 1540}], 
         Line[{1541, 1539, 4071, 4070, 1533, 4065, 1531, 1525, 1523, 4058, 
          4057, 1517, 4053, 1515, 4025, 1503, 1501, 4047, 4046, 1495, 4036, 
          1493, 4039, 1487, 1485, 4031, 1479, 4026, 1475, 1511}], 
         Line[{1544, 1508, 4051, 1512, 4055, 1518, 1520, 4061, 4062, 1526, 
          1528, 4067, 4068, 1534, 4072, 1536, 4050, 1548, 4080, 4081, 1550, 
          1556, 4086, 1558, 4091, 1564, 4092, 1566, 1570}], 
         Line[{1571, 4066, 1567, 1565, 1559, 4088, 4087, 1557, 4085, 1551, 
          4082, 1549, 1537, 4076, 4075, 4074, 4073, 1535, 1529, 4060, 1527, 
          4063, 1521, 4054, 1519, 1513, 1509, 4052, 1545}], 
         Line[{1574, 4079, 1542, 1546, 1552, 4083, 1554, 4090, 1560, 1562, 
          4094, 1568, 4101, 4102, 4103, 1578, 1580, 4108, 1586, 4111, 1588, 
          4116, 1594, 4117, 1596, 4123, 1602, 4093, 1447}], 
         Line[{1605, 1662, 4174, 4173, 1658, 4169, 1656, 4168, 1652, 4163, 
          1650, 4162, 1646, 1644, 4130, 4129, 1635, 4154, 1633, 4150, 1627, 
          4140, 1625, 4143, 1619, 1617, 4135, 1611, 4131, 1607, 1641}], 
         Line[{1608, 1572, 4077, 1576, 4107, 1582, 1584, 4113, 1590, 4112, 
          1592, 4120, 1598, 4127, 1600, 4097, 4098, 1612, 1614, 4136, 4137, 
          1620, 1622, 4144, 1628, 4147, 1630, 4151, 1636, 1440}], 
         Line[{1638, 1670, 4180, 4179, 1669, 4178, 1668, 4177, 1667, 1666, 
          4176, 4175, 1665, 1664, 4156, 4155, 1660, 1659, 4171, 4170, 1654, 
          1653, 4165, 4164, 1648, 1647, 4159, 1642, 4157, 1639, 1663}], 
         Line[{1640, 4132, 1606, 1610, 1616, 4134, 1618, 4141, 4142, 1624, 
          1626, 4148, 4149, 1632, 1634, 4128, 1643, 4158, 1645, 4160, 4161, 
          1649, 1651, 4166, 4167, 1655, 1657, 4172, 1661, 4153, 1604}], 
         Line[{1675, 4310, 1871, 4336, 1865, 1863, 4330, 4329, 1857, 4323, 
          1855, 4322, 1849, 4317, 1847, 4283, 1835, 1833, 4306, 4305, 1827, 
          1825, 4299, 4298, 1819, 4290, 1817, 1811, 1807, 4284, 1843}], 
         Line[{1682, 1837, 4309, 4308, 1831, 4303, 4302, 1829, 1823, 1821, 
          4294, 4293, 1815, 4289, 4288, 1813, 1803, 4280, 4279, 1797, 4273, 
          1795, 1789, 1787, 4268, 1781, 4262, 1777, 1809}], 
         Line[{1685, 1671, 1673, 1672, 1676, 4183, 1677, 4184, 1678, 4185, 
          1679, 4186, 1680, 4182, 1688, 4190, 1689, 4192, 1694, 4193, 1695, 
          4197, 1700, 4198, 1701, 4203, 1706, 4181, 1707}], 
         Line[{422, 2719, 2718, 421, 2716, 2715, 420, 2714, 2713, 419, 2711, 
          2710, 418, 2709, 2708, 417, 2706, 2705, 416, 2704, 415, 2703, 414}], 
         Line[{1710, 1683, 4188, 1686, 1690, 1692, 4196, 1696, 4194, 1698, 
          4202, 1702, 4204, 1704, 4187, 1714, 4212, 1716, 4216, 1722, 4219, 
          1724, 4224, 1730, 4225, 1732, 4232, 1738, 4199, 1740}], 
         Line[{1741, 4201, 4200, 1739, 1733, 4227, 4226, 1731, 1725, 1723, 
          4218, 4217, 1717, 4213, 1715, 1705, 4206, 4205, 1703, 1699, 4195, 
          1697, 1693, 4191, 1691, 1687, 1684, 4189, 1711}], 
         Line[{1744, 4211, 1708, 1712, 1718, 4214, 1720, 4221, 4222, 1726, 
          1728, 4229, 1734, 4233, 1736, 4207, 4208, 1748, 1750, 4240, 1756, 
          4243, 1758, 4248, 1764, 1766, 4253, 1772, 4228, 1774}], 
         Line[{1775, 1773, 4255, 4254, 1767, 4249, 1765, 1759, 1757, 4242, 
          4241, 1751, 4237, 1749, 4209, 1737, 1735, 4231, 4230, 1729, 4220, 
          1727, 4223, 1721, 1719, 4215, 1713, 4210, 1709, 1745}], 
         Line[{1778, 1742, 4235, 1746, 4239, 1752, 1754, 4245, 4246, 1760, 
          1762, 4251, 4252, 1768, 4256, 1770, 4234, 1782, 4264, 4265, 1784, 
          1790, 4270, 1792, 4275, 1798, 4276, 1800, 1804}], 
         Line[{1805, 4250, 1801, 1799, 1793, 4272, 4271, 1791, 4269, 1785, 
          4266, 1783, 1771, 4260, 4259, 4258, 4257, 1769, 1763, 4244, 1761, 
          4247, 1755, 4238, 1753, 1747, 1743, 4236, 1779}], 
         Line[{1808, 4263, 1776, 1780, 1786, 4267, 1788, 4274, 1794, 1796, 
          4278, 1802, 4285, 4286, 4287, 1812, 1814, 4292, 1820, 4295, 1822, 
          4300, 1828, 4301, 1830, 4307, 1836, 4277, 1681}], 
         Line[{1839, 1896, 4358, 4357, 1892, 4353, 1890, 4352, 1886, 4347, 
          1884, 4346, 1880, 1878, 4314, 4313, 1869, 4338, 1867, 4334, 1861, 
          4324, 1859, 4327, 1853, 1851, 4319, 1845, 4315, 1841, 1875}], 
         Line[{1842, 1806, 4261, 1810, 4291, 1816, 1818, 4297, 1824, 4296, 
          1826, 4304, 1832, 4311, 1834, 4281, 4282, 1846, 1848, 4320, 4321, 
          1854, 1856, 4328, 1862, 4331, 1864, 4335, 1870, 1674}], 
         Line[{1872, 1904, 4364, 4363, 1903, 4362, 1902, 4361, 1901, 1900, 
          4360, 4359, 1899, 1898, 4340, 4339, 1894, 1893, 4355, 4354, 1888, 
          1887, 4349, 4348, 1882, 1881, 4343, 1876, 4341, 1873, 1897}], 
         Line[{1874, 4316, 1840, 1844, 1850, 4318, 1852, 4325, 4326, 1858, 
          1860, 4332, 4333, 1866, 1868, 4312, 1877, 4342, 1879, 4344, 4345, 
          1883, 1885, 4350, 4351, 1889, 1891, 4356, 1895, 4337, 
          1838}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
v2RKlzZZr5zp+XXRnJdwv2HPYi2JZLzdYn1JjOBMQsSI++x18ei5dmH1wpne
uKtbOvsQmW8SFT9o4jYWP8DET1ncWLxBPBVvwMSbUfVYfKLF3bH4RCY+Dcff
K9Ori8EsG65fXx+5or5FiIcgmde7YvH9++TTUUMw+7jdlli07Cq71Ufw4c5t
t0tN5enoPCXnjMzbYLTdMuGDBJmXkgTX2/o5iVju08QhG+6EEuMsPkkROw91
fph6U8sDzzi+zcHNC4Bn2dTHAeS7IqZj+xfmU/sXmP3rT+130Kb2O7TR+92b
wgf4ROEDMPjgqTGGJ3iawhNk8EQoPoHjHfih6qqqHWvtk3B2V5qUEVl3S6sB
l+8itvhoRmbJgYkB6MSqmzmJ2GP90+jrd3K+4W6Y8+qliBUUxEZ+Gj0/fN7Y
b/7lQAaM/z3jk+/TUNj14UWqK+EFnXk3L3+cmwarFq3mdeoOhW9DInqvh//B
Wyih8BYYvN1O4TP0XR3DZ2Dw+ShrDM/BsngMz5HBcxr/cQeF/8jg/wmBMb5A
iZ4xvkCGL2opfoHpFL8Awy/PKD4CLoqPwInmI5q/IJniL2D4ayrFd3Cd4jtg
+G4yxY/AS/EjMvx4juJTKKD4FBk+pfkXaf5Fhn+XLIyc+0AlDKefX+hueyQV
/Ksmeu4ldhqvtTBd9j4cExJXCrF2pEKZfcFBYTI+7dhBY/4zCTgskTR++0Aq
pBcuaOYgetR6LJVi1NNwIM3m7FT5MPi51Ke4iPg/vDZRUePNJbyUUfNOZtEZ
mHBIcYolwYFOTbybr5mH94J98xUzfdH5jLhwNZlX9QneLYqFGTj+5IZL08h5
spjXXNKL6G9rj70WejMBXz180mdurIdnbNX3uZJ4ezVbt9zteyJGPc7Rqoi5
AAsVrxRMJuPLdgYqXnlpDz17Zi6WD4iHM7x4Oo2MhzaddubqlQfZ30K77Xcm
w8Inmvt6SBwujAVZn2o/nLDx2PXZqeGwrjV1KIKsr/SanlCDr9G4z8Lq9c7l
54H76tdN9mS8YvuBvA0bE5Ansqzs8zx9LJIWH59B9C84t7fiuGkYZjcK1x07
aI3Lpd5EGhH/z/tmpVCUFoLWC8IC/94wxmWTRuLqyPi5vZeuGxh5oQsH/0Nv
U1Nsme1gbkzih3dcj9f2DZG40995914uBzQVttj/inzXQ+TKdOOj6RB6LMv9
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
QSszTglNck8XoOWr2OS/bdv7sPNyPk40fyzqy5WMZzy4hzcQ+X10XVs4W10b
73vHhyYCZVijOc7/8YVM9ND71KBE7k0HaPlINvlV30zKz5L76aBdk9uZkXgM
r5bPeTDwvzq+UjZ7rlPnB+TaPXZ+QOb8oEPX981mq+9b3rRrg+L6IgzfqX7k
1KRwlMoujHhH1reErr+bwlZ/pxjK+/rVhBIsv7VVQvpPHG63zN2x5zULyml5
YTb5aOq8hAf8x85LyJyXOul77h+2e+5D6n4B1X5j9wtg7hdFdF3ba6pOGZk6
5YOv7k0LPJ+B5xqbj7vpJ6PiJM1vsWR95ek6vjS2Or67FH/BJYq/gOEvXbqe
8awHVc/InPeuFzlKPCG4E6TsbT9tMAcDNvg255DzSR1dD9hK1wNOp+sBV9y2
8PiZUIZ/W0709uam4e+24a5csr7VtH/msflH0B2lDs8qxFMS811u+sei+nLZ
7InkvHSQrnN8dYGqc3xL1zlKOfC6bxFLw+16Gqpz16egeeuCO1lkX3TTdYjR
dB3iVboO8dI+R91LO/Jx2ZbCXzKS+Xj6rqqi/CtyPqTlU9jkJwuzqlmz0pAj
7VryykemaNlexQtkP8rQ9kx0/Lc9nqvnXNs1bIdVxoK+LXbJUKhqfDWK8MtK
uh6zm67HZOqp368UeHfi6WWc/t0vz60nDxV3udjzkXPX+/+wZ1jtyMvv8lFo
Y6SzsNQwAfuPiqe6EHv46PrKbnWqvvInXV85oCWuuP+vN7q+fZWVKeEFFovF
nXtG442uA73PVge6lLqfwlHqfgrM/bSXln/CJv/H/8/NbSudsO/HcY7jwWfx
w/GrfwtInAjQ9vxls6evqaSm8HcoKEw56qucFQ9tbk4L9Ij+j3QdKBdbHagb
dR8H+j4OzH385X/YE0rleVCAyvMgk+fRoPIA2ELlAZDJAxRS9x1Mou47yNx3
ttL7JYltv3TEOzy1jQzFQ0Zcge9mFODa53ITvUnczuGbZbB6agAkaFrqrneN
gF9yUvwnyH5sputYP7PVsQb9+uN1k9yHo4dsNIyWpsBuufIV4sQ/N2j5r2zy
QieCK4uNvLDp1PO9CkczsKvwj+BxYn/IsoOzQ06mg4FlYL3pMXus4bvScYjc
4y4Kb7KwnVEErSfvTussKILLmb8vziX7sYPWz2n8b/13qLwT3KDyTsDknb7S
9bZJbPW2oRtzG0pvlkCVdklf74MImOS/yCyC7KMf6kndJrZVcNj1j0BeaQrU
WSytNCP3LBsqDwY2VB4MmDzYAK0/iE1/JZWXgw4qLwdMXk6crvPlZ6vzJfCe
OTL5Kiy6vCc3V6gI2s3/wIc8wke1Zb/S3teCX31DzKKiAmhIUTuJNYQfqfwh
cMmM5Q+ByR9O7aRwtZ8NV2dS+SIUofJFyOSLtOo/6Hp11ICgoOpeSfE8OGS6
oZ2vkQUua3aHLOMvA2/HD2FGnenQaTQUZdlDzvNUHhW4zMfyqKBK51EDqbwr
yPKM5V2RybtaUfleeLR9LN+LTL7X5/hYvhcKqHwvMvlezbqxvDEoUXljZPLG
b7u2B2zx9cDYdM1eSUEHONqYKH2C7NPgnMg7XdUxOP9Twynj9B1o3Lk7ePR9
u9b6GTYFFcH4wWuPurG1EmS2fCl/Q/xTUb7OeCTcDmyTb767FkzW/XDOtwmj
uEfXqb1lq1O75RSqbPsgDevlL67MMN8KnMLSxY9JfM5uSVH5OCMLb5Y0Tl60
xQeP7T+0kO87CyZt3Px3XcolXJKY9PN1czDm7Z4nmkL8bGAaMa2kLg/71n06
/7AlAh/x7l+9hZwn+VW6eDKP5+LloK2mua2hqBuouOkD2aeNA/WKJ/R1ULbz
Z6q9oC1eXDc3/iGZbx5dJxjKVid4fCgq34X3Irauc+usRXfsWJQ1pDFaj0bX
4fKy1eFWa3Wrf3p5Fh4+cD//STAKYiWXPn1Ixl8MB0f19/viIs+o7inbg3He
5co2OeKfY7QefjY9t4W8tGNCLuGb4u6LkVaRmNEtK3WL7IsNP48qdOumYXGr
dOZywwDcG7PKew/x23fdnGXjbCNxjcm54LlFIThxnO7ITeJn7f/QP+v57+66
NZHYLzot4wRnOAayONa7EfnDdB3xarY64sUTZXe+M49Gpx1c6poubnjRKzF6
9D2GuRCnkfQrMh/dKbMXF57DzkX9Re1kXrHS916LKcShTPwcw8KV0RinJ1F6
m+DzMVr/Wjb9FRERESu6fHH7cw6PEx2u2G4lvXWQ6LGk65f3sNUvy/8Zd+4v
SxmCz8+wsjb0hs9uX7hH67bme4Q6H8t2Bq55C09PIXjg+efI5pvEzv6tGUe9
dnvgJfElzcsv2eEW597Uk6Pvq2n9qmz6dz+J2ClWfA7P3eYvOt5mjVILf+W3
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
U9XO8+oigTArv9OwQisZZ8bqPBgdn0P3JzxO9yespfvvnQ1tzTzACoOFPX1T
jc+5Q1G98sTR98MqtD2SbPZ0dY44b2aFwttpiYH9MoYgHrG5OuT/lS89/E++
9MMXo/4HN4IgZpsHZ8++RLT+461uRvyTTvdFXMLWFzF5nVxVqJIr8MxPH/+0
LRmXq3233knkk/+jj+KlBYI7J13xwwIrnlaN2QnQHdN4/DORz6D7EMqz9SHk
ps5FuJY6FwFzLppA92N8yNaPUXycwjI/Xl/c/OHh9gHfJPj48KPk+V+jdRb/
7mfI+LOvyW/uEi1/+NzhnWotZo8ThSav4//L+Mee9supf/7/gir7CzpKxp6Q
OCuy54NsIHotMawYvX89Y+vTGET3abzjZxxrqhaM89a/89/TEgUGl7KDkNhp
9x99FNMWBAhmDjljltRtl7SqWLAyVyn/SOStafmFbPKmR3atPVHhDr0/Ez83
lYXjTP5ZtW9G+/nQ9hiy2fOgXP6GxWs3mKM4Qa/YNRaPjrvC85Ton033k+Rk
6yf57uKaCT8veSPXszrZU8FhIBiQO6uf6Lel7RFjs0ddfGHUzeQg3MV1fr7R
a284nx33zJh89wDdH1KZrT9kJ+Uf2En5Bxn/pP9HH8ud1PqCPbW+yKxvPC3v
yiavaNFQ+f/Q9d5xPf7f43+kkC0ZkWwhM1TWQdlSUiGVpKLSVCqkvffee2vv
ojqEpBQysislhAohGf0ez67H8+3zur4//16303mex3msc07Xde72d/1QY9ee
N8b85jB5nOCK2//Hnr0se2J9Tr6daemH55VyMoe0nkTsGL2ak6econ0so1h9
LGOY9QwZzHpG7nqOofbYs+wRvH9dreJsCIy4YTrSRioKs7v3vnjX/7c/Zwur
P6eK5usPYauJS9I7F/MkRUGsXtNAE9H/ifaxjKF9LBNpH8uJjH6cyegHrv7U
f+yvXad2fZ5j740PTizoDZ8UC9elygU0OfuF6o9l6f+2KTPcyiQQMxcK3ozV
cUXvmbjyN6cOQ/2TwvLPlH1rVDf+IPYEpsS2zQ/Ercrempy+E2dp/8/9rP6f
MXu9hmRODMBQU+vRHfKh8Gz/l8vhRP4rtSeCZY+qLkL1kjDcZ3vSWzXSDzoq
g29z+knepf08k1j9PE9OyxTfetEPl29+NO4c2ZcLVk5b2Eyea9G+o9dZfUdz
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
0s4pSPjFwVq/gaCDCoHQ+3TJlC1E/+XhpusTsuLB9UrkPjUlUxB20bsmQOR3
MXVOuMDUOZFb53zM1EXhFlMXRW5d9DxTj4V4ph6L3HqsIFOPxb1MPRa59Vhh
pq6LaUxdF7l1XZ97hoJVE8xhQmqgfFNtIGTqbhh9lMzLpFftMU6pTqhx7Hy2
fl8KHBGyjlUm6/xrecmRpUmWcKLR0XLHjgjQWvxOazGnH+++yUk4LhwX7/it
M8E4GY0kO++rkfN5O+UqCnT+l6s4yvekyektvlh/NOvagh2X4c/ETwO6nH7d
daMzj+3JxalWci94ZQvhw7dfcXEPu8FbT2LM/OYSfOwyat6WnxlgdfOS5VAi
b7p3aeVrXcQclUyPndtPQZGFltzkqm54aPNxeYUHouuk8ooO97PY5clnfvIq
udc2/H4+foIOGsvpv1zjWYoLx5wz2PCUnD+Ua+lNuZbZlGvZsppntcfzULCQ
VTb9vCMYZCvVbYdweIKUD5tA+bBIOZIbhd/NHr3SGsr7PhoM1bSHs97w3Ivz
/tuNNuOnV8KgMzFp95HrkTAs90sDJ792ZHFmuXqUlm9uzPxdgZpHSpTyJgWj
tDlYNt0g+8tITMQ67xLerBszVM41BCdOvP7r8D1yzneKdSsK2ENK9PvF1aWp
YH/s2Lr3RI8t1Z/J0q94pO7+oXlOcHlns1KCaiKsOrw8Bck5qU/5tv0svq2I
z+br6R+L8U2p+LH3pZE4zTv44zgSl65yv7Rpr3IJrj5xke9CURzG37af5vyk
GxpmTNeU3xqE9bm+6523e8Il80ZbznciOlT/G5Z+3Kv9aeVnTbyncnMVr5c/
yO1VD7vJ6XdKubqzWVzdtuV2x28czcN3D2Z0wcQ47P288dV4sh+TT/en39HN
xL3rr5t5fotB+epLtgkkbnT87XJ4hL0Ojjr5QkLWyAbCjmsnVg381S/C0v9o
jfKa11rn8fCIVncx7+MYbb/l4k0iP4/yfAspz1eN8nwVDVT6ditm4Ra5Wj7R
nASUeiczagp5Pu6PT8Xp4iTc3hxw3W9TOt5+n2alSOy5bR2TvMwsDu6nNyYo
dKTBG+WB6YIcfjTl9tJ1CNx1OCVcckQ4vx+4VH9bNTfHCz6PuWbI+T/UZsov
3sDiF6/JS1vp3JgEsj8sRm8i+e/42rk8U8nvLqD831wW/9ehNmnzt1wrOBb0
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
P8+m83KbNS/dH7/Ku97zBXcJUQWlR9GQenbsATeynvd4VuzbxecNIiLHmxTH
RgIP1K3dz+EdUy65CYtLHtLRm46TiB9fiQdI80Wg/qrk6gEOl1zyhGmiizOa
GcX9eLM4DDftGfguw+k/T7nzS1nc+Q8PBAKSevRhwZ09yidNXXF4wuOtBkT/
auqfvLb/+seB8uJNWLz4H0ai2iVLQ6H50E7tpOlG4Np6xOkx+d1llA9+hsUH
j6dc9WgWV134eVplsGsiDKxqff5YyhX2+3t0OJD5XUn54DtZfPAwyluvY/HW
BVvk94VYJUGutdjukOYgKJwe9LOSrB9DyhNPZfHEm2LkRSQ1o+G3lPOMs4t9
oD61cQfnOxdryvVeyeJ636Zc7wgW1/visPH8gi+8Ie3TtJuB2nZwhndc0wtO
X8RSm2nnV0qj4OqGEjEfN1w7eu80DgczeXYPmJP14fD8s9OBy7IYdNXoLWed
rKJ+s2f5LcLAS3nj9AR4KLM8dF9TKGgMa9JOJfsr9B/c+VrKW29k8dabhPaP
+iKXBksn8W3wOh4N15a+/aFFzoEb/+BTy1Cutz2L66268+eKU2XJ0KDdum7O
Dm9wXm4y2H/yCOV6F7G43gYLb7UmSkaD6IBB09VdB6Fao2xMGpn34ZRbbcji
VhcUep4ekeoEYhm38gw3+2K/sqR4PHl+i/r/NMv/HYcYnvVYFs86bO8Y+478
Uxgx7NDjj6HhOBJSB45z3ot+lFuxbMAPREQTpB6LhkG9YH9PGLGnfl0+tkfE
wFR3n+fTCmKAzzqEL63vL0/8Pcs/7+wNdMIjIqG2Y4nlI9dI0Cx/7j6OjNeK
8rJPsHjZZy7MKN431xFuRua+29FjB7teCReokXk37vDWFV9sVv5bovqKebvB
//LT8Q1P+J1Ou6EGT19kWZAjJq+Iucjpr8JD/abH8tteymW+wOIyv4xouDox
Ngrfp0w4uGVFNPI5+C6zIuufn3KZ17C4zPoPxDRjv0fhQLDPz6iRsdg++WZt
L/GD9j+4w2KMP3Eq40/k+nPBvkH/w3bG/8D1fzYzvxh4cXB+gTu/0yn3+efM
/3Kf5/smXzLkicOCw+G1Ub2aOMXHW+An5/yk4z3HGq805S9rs/jLAY9X14pa
pmBWYO0Z8ckBmOfaX/eA3DsmlC88lsUXNgu1q5FQTcOAS43Njy+S+D17u/iu
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
baK/yxHc+qdqytiPhXD2db6vA8nnBzm9RzzD6T2CQO9xUs726e8vOeLVW2Nz
efal8EXp6TWhxyR/ek98knEwGA3P/Wxcd6cEbqhtneVKxg2LpDavN4jBl/oL
v98ZmwJ157aHppL3Iq7EM9tKNxHlbETv7/vsjDZNreXbST3geS9nTev0JJz6
dOpO3ZiD6P5nWRPfb0iu8VSSv0QiVqXqmnW9D8ApA0RyU8m9ECFxT17lfTw2
2Dt3pJnH4/UnRyVVSV2tovGt2/1IJD4NuDlhct9ofPqk1Hs+mWf4ki+6Qp2B
OPrELRWjcWH4fu++hY7kvLnefjRcWT4QZ43V6dYfHIR+16XEVcm5GhKjYXPc
MADrNc50uEv44pkTa56+J+N71H+VHC8LwR19Jsjq7PJHr6JIhTFk/JLvAmUt
sUgccGW90L78AMyG+bUyZP49b2ryp6jG4fzhIpaXajwxe0Vnqw153+Opj8wf
6iPzgPrISC6xbRWvtYLRY8tFvpsUw82h/fYWkzrBuI9dk7aUC2aqHtm7XKoA
1u1o8TR49+/9Mpn7bvrRlbF4deex6nkDgsD91btRvcn3WlG/mL7UL+Yc9YuJ
ofsygdmXeRnRz967ROGry3kjDrxxw1Gv2i1OkOdqf7tx/Pb1gegx3n/g0yde
uLd03G9+fNqEzgQM/OyAzknT5MbMPY2rB44at6bH9+r/9oW507Vcbo67PsSk
HLhYancKq8aK5pSSz7c9eXIh79g+eKcvdsq0txeeaWyv5eNaw02qqgds3w8Z
wxbUdNUEotAKBacIvr7c7YLC6TNIPnEx+BkTFYyJ80wiJPn4Crovo5h98Vh4
4fmz5T7Q5CLcIGoeio//GL7g/248U3/xQOUcQ+iULtUd8S4e5yrEhdj++uvD
0kF9WMyoD8uI9K3L/d9FwrNap6KTUgkgYTemLobkn/LvCuOGTFmC9yZIrpKL
jCJ1revVfny9XOqzk8347DQkqly8JmaNsXD4qmGLL+zK3z/gPd83nMYniomP
JfXHCWb8cQqL79vZbTCBZTceXNn50R3crfLua3T/9XNh/VCCqI9MH+//+sjY
SS62TU0LhoroTxtbAwJgXR8dH5k//HqV80M5wvihRFF/mXrGX+b+L73J/l0J
MMtGpio+7xToVHdWZ3b+9XNxYvxTRnksXxNYEA4f3QfGSo9LQtRYtOYlea+/
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
coWaN2aXRpPn7aZ8ohSGTyTb88OJ89KYVg/yZ/C/30/0Kd9qIMO3Gtmcf352
tz8MH5+4qHV8ODQO6fwQTtaze92vuUfPpcDt/e2LJ671Adc5Jj0+L/WLC/FZ
ZCwM8vC9P6ooFvrZhPZLJ/vbSXlYlxke1g6bYXjbKgWsDe3HnA/3hBjDlZnS
5PN7/C7NGmKWCLUpZwzLjjrAhWjdVSYkniayde1JC2NgV/eRlmpVLbikc04y
nczzk/K5Whk+F8/xiEFEZBRcfyFn1ewWBXoV9z2kyLjWi1XL1yTGwpT0/Ku3
F4XDfZ+tm8X4Om+U/3WL4X9drBs6yKV/IrxN0tsBUkkA99o0lpLzv8X0bK2P
UhREjir/9UvKCWyszwyrI+u5UOxl1j/NBYZk1RUYrfDDzu0LZyaQ+E/j4okj
uHiiIJ4XNlR3HQ+Lh6KA+J9WU6NARjn8fROJw1HKLzvA8MtuTB6ze/w3d/Bp
t9n4cIozzgu28+1P9qtWSyU7BjZin+1dsi6bIvGc9Qtlfp5X2yjp+KLwKPr3
3dH6LiwCRSGtm+/350x5bUcYXpvPyTGlmyc5Q1NU/uu1H06B6hPpot1k/v33
rh9/VRSGZ0mHtbPbE39Hlt4ewcc5Uz6XOcPnWrG553tBhfteEHzvv3hwXxvb
hF3M3HFrrx9R54KdMWVubCYfX9cuxPHd0hm+WwYXZwzI7IkzCOLsnNv/yYwO
a7C7vDRlioUV5vomXufju7Kvc/y4qww/bjnlx1kz/LgbkdeqB8dF47PUQVor
58ZgPye/2dYk/jJ+KWVGveIxTDuiPvqLHo7w9RH7Rd7H1L6HVskOswfT8tDR
sl4h4Grb/KmTPO+SX5VNM90ssfP3jia39hC86//OpDdZZ7dJlvxGg3icZ3lK
t8EgCSNnCg/k19t7bk/Ti/sejd9DfH9Fi8bhs+GX67+QePr14fh6eQxfL5fy
0UYa/ZePlqzgc1NthxtuXOIadV7EGIZr3i3i62HOfrB/bIiwJ2rPu1tdWR+O
IWddH/P4OpOU97eV4f0toPy4PQw/zrd1fv14q1TMCKq3nDk8EAvcOhtuk7ru
2mW/+AV6Sbgu0C1ou2kA7nxavY6PbyynPLhuhgenQXlwzQwP7msuxysMZHiF
0rtazlbU+mCkuLz6nnQn/KwXZ9XQ9W++oUnYqSsKO9PRv+zmo9bMGIzIVZmp
St5rpRLJhsqAeAw5N+4G3gpAuUFxXlYkDzRSHuJMhoe4eZ13sEVsIjre1fow
9HsE+g6wm/CJ5L20YTnnw4UycMOBB1P2zIzH65csM2RInXlr+8dfO32TMPnY
tnm9FEIx1H+RxUjyvDzKZwxg+IwDKW9RkeEt6l40HVhLzkGOw8IcLVVXLB69
YmgDGX9ZOHnTeuVkVBuYrm2zOBIt7pZce0ri/yjirmuIfTL2VirMOhwQgtod
cmtiyTpHZ6uPEXWIxYe3VewPHI3AUyXjRVvIebbxTG5alBWJRq31qskZAdi1
6pJPL7KeCMqXdGL4kv+vrvOO5/L7/39LQ0lLe4iiqaWi0lNGi6SyskISSVbZ
W2bZe++RLVvpKSRRSCINlRIqs9D2O1evy/dz67r93rebv87tup3rvM451znP
53Ee98fcC8Hpjly+2G+e0zs9cSPeqB0W+U363ydvvqvh90TcdHhAUXmRJ84v
s9lD+WU0NjjfqCpMROvZaZf2dfuixR62z5tI+YRdSouNOuJQOiJO+vIjd+Sp
XCelQ/o/2eTbNq0VXji/9h7fETlz7GlV4qDWgUT2A5ISdwzxrLP+Vva9bvC4
t1ieipe88v/GUZDPiqNgPI7KZMXVUMeKq0GPjqtlaV0nMHSdZv7Tvzybbglv
PsUf/TNyBTgzH2SUUr4tO3sMB2WS4MfPhX2e7f5w8HNHvBPFBRppixjamQgz
dcKap73yh4qMhfLC5HclCK2+a3PbE+Fh3nfxNxF4S19rggR57wNaHyrL0Ie+
XcOTEn4uEJUEbwp2sBvi0c1Rr2Sp+UzrQFUYOlDr5qMj/Mkkjg9839vzJxi3
VCYGepN6NKwvc5qpRuOluSlqF5f7YmvlhGPU+Y8wrRvlZ+hG9WndaLDFv7rR
JSvdv0/7tgSHKqOf68R4gkSkXq0MKU/jPHyjQ9YGvm9c/HHUygTTl8d4FpNy
iUvDM/aSdT+7Xmow4Uwghu8rSRCjdM20/tSeoT9NvTLkOLrIAtsXJufJTPVC
+/6yxTNIPREW80bvFDvinc/zbbw6bEBcoEmeWse+66/yGxi+CpyNx3GaTTjw
V2YFNJN6Yll5EDiw8iAYz4M8aX3rR+1/9a0cSWFlp8Vc0KBOzNb/kDnJk7J4
DCg9FK17bWToXrV+nP86ujkQ+u8u63y/6Apkhwf3UedLjq3z31QdvwgSZ/Ly
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
6WDTRdrvSPMq9Ri8ylCaD2nH4ENesXn+ZWRnOHxTOWhun+AKV04cL6B4Jgdp
nmc0g+f5mV+yUf+XMUzN1j/2x14ZTG9VzaD2NTOOPVbJKYFQEDkk/czPDw5P
VvfiJuOoSPM/pRj8T7fY5RrHfgbDwtb0s5ucXUD5ZsAsG/J81PNLWjusyHfX
X9X0PdMOipa+KjYk/RZaLKTtJhsHVSfX52oGhkB814RFa8g8f/ZTY43vnzjg
seQuj812APW7P+6mUf4FNF/0CoMvGtc37ViDeQa8bij7ImGdBAFs0w8vJf1T
OW/mueMaBpBewv7h7Hwf+H5Qcv5E8rvu0jxSVwaP9KtGldqDp4EwYmCrtnHf
NVg7E9UDqXn7vOlIwWAAQFJr4+EbHvj1jKsbpduSYS9pef8zDCzOnU4ZOu2F
ebZvJVx+/Y9reoHBNV3qsV/SPzcU+t3nRC9dmYB4Skiyi7qvS3M7NzG4nWyW
LsLecSlg+eHkqqBLSfBii9NkLpLXrOxV2/xkTxHIuY8occ6+CTY/9WWLSdye
ajf2o9OkCMQcM7q/haRBsvR6vitNJM4pFkrWSPaEe0uvyOZPSMHDWu+yppP3
7qZ5qpYMnuolmi+6k8EX5aR5qj4MnurrSrc7bUUuaP82wGjG41BQ/Sy8iIf0
j4enf2rQjWJoW3r68ka9eGjEab3+zf2gMhQcWpYaB5P2d5l9Ec+HUskDv3RI
/P+D5qyaMDirZby/Vao35gK8KTyQ6xMDhYoCIcmkf/Y1vZuyJq0EJF8lzqwu
TwDrpHjdsEYSV1+Vvt5bnw3Lgz04PUy8cPY9hbpTZL+Lo3mthxi81hy9xybK
95JBzN82u2tTKXQvPnX7I4krdKY+OXxhXjJ0w+qRPS9zISj4V/D59//ju+5i
8F2tj1XzWzTlgKSsl/z3VeWgrz3k+i6D7MsiMpE8LdFQ/aBdP/ZrPNo6TbRP
I/uOppuhVbqCG0yzmJM/eV0Bmidpphq/64dZVX/7E3xY/Ynj/VklWb+AfUsm
bHva1qA4Pw/k2wbr28n+20zzYycz+LHsmTZX2peagVj+7uQD+wrQ4M7R1iRS
/6vJIusmTzqOf04oruhdUIKb2F0OB5F1o3FP5k4vF2tYw11b4a1WiGymk0tt
SX5qZbllX0JeCswqUxFtmRMALbvnPqgj8Rg3zbN1ZfBsOc3WlOiUucHdTFNh
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
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.09259458092137765, 0.7486122776543305}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$5044, $CellContext`qVec -> #]& , \
$CellContext`meshSize$$ = 8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 
    1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10, 15, 20}, "numberOfMasses" -> 3, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.8200836820083681, 0.1673640167364017}, {0.6778242677824267, 
      0.6485355648535565}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
     "pointsDataTable" -> CompressedData["
1:eJxdnUtsXEd2htsSJdESLVMUJbGpF0mR1Fsi2Xy/urop77jKTtvJDCdZJYA3
2Q2XWXgRBHkMM0kwi8DIcgBuJsAA7EU2zigveKXVGDBAwICBsSHDI8WOHLnP
953JvQSE6+6+99TrVNVfdb5bnvzBn/zBjwYajcbJN/+23vx7+82/E2/+7fX/
bvUa3//1nvQWWt//3ewdfP/39ElcD670+l+/2In7GsO9Z9//fbDT+/f+fzR6
fTOzO72/79//0VHY62Lvm3bY6/Z+3b9/qIS9DvYul7DXiXRat3p/9/39zSeR
zrMb8f3hDr9fiXR3d3pL/c/vRvrH3d5bYTDs7nd7v+wn/C9HYa/b+7e+vW/b
Ya/T+9v+7++UsNcJO3uXS9gr5O9WpPv+Dr/fiHwN7ZC/y/H9h93ej/v/cb73
3fd/7W7vj/qfXx/1k3lueX/5q7DX6f0wfm+HPT+fj/Q/LNovYa9Q31Ncu73X
/R+uk6+u+SedLu33DtdO7z+i/EdRj53en0f9tMNewd537bBTevNRvyXsFeu/
LPavbexORblnu72f9j9fx5+yfaM9n3bI9xD+VHph55uj/vcflN5fhf+0w57l
b5R+u+63yd+7pd/uh9th9+BK6dfz8Rbln6L9O/jf9chns0N+L+FPBX8ZinR2
C/ZeRX6etXn+43aUw/K+Ff7b2ia94RLtvkV5x0rY2aS+psLuc8tzDX+yPi9F
vQwV/Pkc/t3unejbe3kU5d/u/WU4Urtfb4dbvR/10z0R6R9vYn+4/Kxf3k3y
N1b67b67Qf6mSLfw+7Ve//6DNs+P4ifb+PNZ6mkbf/76KNptq/c//fb4TbTX
3ib1dZLyb/D5QvSvZ+vYH4v2bKzjD5P093b0m++uUn7rdzTS39+i/t8Ovznc
JJ9fHUX5N/DXT9thbwN7J+nf6zx/AX9aox6a4c+Hq/w+Sb628OerlN/2HcVv
N7lvkHra4PsXMd4crNM+x/SvNco/QH9aI38X8KdV/K+JP61Q/kn82fq9iv9u
kN+Lkf7xOvkbpD7Xsfdl+PPuGvd/Fv68b3lPRfqHpjeCPy1jbzzas7lMfU1y
3aA845R/ne8vkq71e4Z6WsXeFzE/NFaZDz6P8bhl+qdj/Ntbxv5IiXwu8fs4
/rSIvUnKv0Z9j4c/N63vkfCT3VXyeRp/WiFfn4c/Hy7THr8Nfz5eMv+U388X
8adFnh/Hn1p8nqD8q9hr8n3WL/60wn2n8Jtl+uFn4c97S/jfl+HPB4vYO0P5
W7Y//alF/q4yPi/w+wT9aQV7Tcpv+47Qn5bI5wD1uUh9HTN/LuJ/L8Kfd1vU
72D48/6C/QN/mqd8V/GnOco/wX3L2GuS7yX7J+navgPYsXyfMj4vkP5XjM+W
923607zjB/1pDnvXqJ/H2JugPy06PlF+07tAf/LzSepzgXb8JPx53/S+Rl/M
4Y9nQ988e+z4Sv4eOf4yXj4gfxOUv8XzY/iF5R1m3JvnvhPkw/p+zvhseV+2
4/5H5P9czJ+th84/MV8c3Kf9r5WYd+5h7yblX8D/1F+Wdxh/muP+t5gnHveW
+/Y/Por0H+J/r2L+aj3A3jnSv+f8jD/fJX/XY37fu536NPI5h70rlN/yDlMv
j1KfRvoPUp9G+vdTn0a+71K/Q6R/B3uX8Z9Zync95tNn06lP477H2LtC+tbv
u+TjPvc16O/3yD/69OAO9r7Fn2+r30h/JvVp2EO3N27gz1OpT6O+HqQ+jfze
S30a99/l/tdHUf+3zV8jyj/r78zv03w+T/mnUp+GvUnTx79vmj/Sv4s/Xyb9
O6lPo/yzqU8j/Rnrh/Qtb6OoG6hf0p9IfYrfUO83YnxqjKc+jftv43+XSH8m
9WncP536NNKf4vmP2o7zUf5G+RH1/h36NNK/6vqp2G+oF8aD0dSnkf409i/h
z7dSn0b6k6lPf0a/VJ/G79dSn0a+m6lPw47rgjHqb8T+zf3vpj6N+6awf4n0
rd9zpHPd8eUo0hl3/GE+v0L6J6j/Uep3mPSHU58uYJfxj/oZSH1KO6Y+ZV5J
ffpjxknGX9Y3l7D3Cf1pxPGb8fYdx3fKfyb1Ke3q/EB+vzpSn6LT8OdR0r+c
+jSeu5j61HEpvkefvrkvvh8g/ZPYvcB4+IpyNMnvZ9TzBPX5i18dVOphFP+7
mPOW+rSBH1X16Snq6xj/ec28OlDUjdQb+fs41rFv9OkJ6jU+Z/201aeME/jz
RdIfzKvzhOn8mHajnMwPn5LeqWK/C7sjlP8L2nWc8ehb+2WxHNGO49Yz/nyR
ddY31O8Z2ulz2ve3Rz9nXEYftq2nuJ4m/ZekN1L0c/oB+UEXNSbtX/6e7fCM
fhjpPad9T1Nvz9voY/L5ol0td4Nx5kwxX/gd6Q9Z/qJfxe+T1M9oUZ/+BeNs
+PMI+ySf076n8Cf2cd74oX5L+1EvZynvIPPVML9fzCvjIumzz7I3yfg0js5v
4s9ft1kf6S+2q37EuHt8FPPdeer5Bf48wv2DpH/JcYjvx0jvKulf47PtdbOo
T/+u4ocX7E9Fv3IcoX/jz6PZL9ynYHworhu8L9J3nlIP6seT2J2iPcdIf5j8
Xch1CeOb41GJ/ZLfHLmuZHxsq/Oq7TaRfmE9MP5i9xb3mY9pfh/Dny/xvfpr
zH6Bfr1a/gY/D/+0vC/b9pNI5xzlnyraje+nsX+NfM5kvUQ6t3OetR+Gfww7
X1Gut1yHlEeMa/HcJOm+ws8tL/uVrZn0o8jHrDqD9O9wneK5e6R3JedZ9IHr
+qI+jftvFfa/GPemKf83zKez3D/E9Tbp2I/uFssZ39/PemR9UdSn5pP9PdKf
5rmGeqgwLjD+3CZdx9k7pKc+vVf0uzDzgOsN0n/I87brY+pRXTJDe52nvWYp
12vSv4O9n2/Gc3f9nfHnPp/Pc9/DHGfC3iN+Jz/NuWK9xzAyx+/sVx7ctnz0
r7vk91vmhXvln6N+SN/yNrg+wj/epfyPKfcVPs9h7wb1Np/9LK4LRX3KeqGw
f+56gvZUnz4s/xT+Q396rH+xX2F5GZeb88VxKda7pn+T9fsC+aIf7Leoj0uu
p8jfOddb9h/0+1xh/Ye/zBXH8bjO5zwR1wXyN0Y9md5NxsdFnrvl/k9Rn0b9
P8af0ZH7c4x/v4t5dne+/GOMP9G/m5aPeft4QV1K+VvFcSzsLZI/xsndJddh
kc/mcur6uG8efz5Le807/tK/FyjXJ/hPy/Gb6yLXC6S7lPNWXJf4fYJ6Wi72
47C3wnXU/QrnH/bDW+T3q9Adxy32BT5l/8Lysl+5v5Q6Iuwtu87An0xvAn9a
yXE77K0W9Sn7Ofiz+6e25wv6+1L548gY/rycui6ulneEfK2U6v7pKuWdIB9r
fO84t87v7p8ukr8z7ActMd+jg/eX0eWfsf9leqco/2pRd4S9VdIZZ395jfqe
YL9wneenqc+Noj6N/C7jz2fQ9cvlf9GnYWel/Gf/qk4zffdP11znUf51fh8n
XxtcnYc2uE5TL5vkd4T+tII/n8afVov6NKp9DXtfhD8fr6U+jfpcT30a9jZS
B4W9zdSnYW8LezP0zy3KNeJ+Mu1zivlirUQ8z3WS9fsl86flVZdvpi4Ne5v4
81W+30p9GvW2nTogru1S0afNderD/dP18oeR8fDnw43Up1H+zdSnUX7LO4o/
bZfq/ul26rKw13ZfKJ4rJfUp8QjGv5P402Z5HP0b/b7FOuErxuct0nub63bq
07i2yR/6tFlSn4Y/l6JuiPyW1KfEa/Dnk8ZzytfoU+I97PN9TfzG8p3FXpv8
Uj9PC79fi/R7hfxNxfezndSJ/ec+6KQ+jfu28ecT+NN26tOoZ8v7Ev8pNX1a
Up/GfaZ3jXx1Up/G9x3um+W5Lv7Ffu5um/Z7Kz4PldSn/fvft35ftfvj0HPL
y35l6aQ+7af/YYd02K8c6qY+DXtd8jcb49rzburTaI+CP7NfeVjKB337HxEP
6KQ+jfa0/EO0l+Vlv3K3W9w/DXtd/Bl92txxnxV/2kl9Gt2mlG8jg0fEk8uf
9Z//F3iDTu4DEI92nyfS/6Cb+jTsdckfevDpTurTsLfD87P405PUp/F9p/yg
//k1ekd7/7oZ6XTx59fsv5u+69Qd8nuZdCz/DXTBE+zd4vsn5G+W556kPo3+
3y3wDaEHP+ymPo348g72GrT/TlWfPt9JfRp3mR769MMnqU/D3nvYu4299/Cv
6cjPvvzIBHrDz83kOeL5EeLv8iQDyXMYfwp73Yw/hRl5kkHGQ3mD0ejnu/Ik
08Tf5TcmkueI34nPDe24/5Y8R7TDgPXbW2H8DHsd9km+ivHhfXkS1vdD8iSj
yXNE/qZJ1/TdR+5m/Cme6+Y+Xrh9p+c+YdRjp3eyb++T5Dl+yPgZdgqfz9Iu
8gfu+7R7xhHoH/AVN+F55EnYb+h1Mv50EP0v40/0zx76OnkO9Hebbk18/lzy
HC3GzxgPtinXLebPDvtgxBH2bd8x5lvrdzh5DvcVGb8y/hQ6qZ3xp2hXeRLj
YfIkl+i38iTEHUqnykc9L1U+6n3bFz5qSF6nkTxHhY/a3874U+R/K/koeQ7H
zyivPAl81IHteSN5jrheSZ5DPor5LfkoeQ75KHkO+Sh5DvmosLeR8acYf+QN
bK92xp8i/t6uxp925UnOJ88hHyXPEfZ++St5DvkoeQ75KHkO7CfPIR+FfqHf
GAeyPS8nz+H4Kc9h/EmeQz5KnkM+Sp5DPirsyTvIR8lXwGvtbmX8KfKb7cv8
upHxJ3kO40/yHPJR8hxRfvYb9leTjwp/ki9wfb9c5aMamxl/inzLkxjvsX2H
kueo8lGrNT7K8spHyTu4vpc3kI+Sp4BHOlzP+JM8B+MD/d3P8lHyJC/pTys9
9Bv9yfK6vl9KPirmD3mSseQ5wh482548iXzUao2PWqnxUZZXPmqZ9pCPsrzG
nxZz31iew/W9PEeVj1qt8VGmJx+13DOuJM9R5aMWa3zUYo2PkieRj1qo8VHz
NT5qucZH2b7yUfIkub6vxZ9aNT5KvkE+Sp7E9at8g+t7eRL5qKUaH7VY46Na
2JOPatX4KPkR+SjLKx9leiOMf4+xx/q+JV9hXFqeRD5KfsT9D+tXPmoee/JR
8zU+Sp7kNOuYR8lHxe8Pc9877MsbyEct1Pgo61s+Sp5EPmou+Sh5DuJjbXkO
8s/8+SDjEPIcru8jXni3xkfN1/iorN/kOYxTRvqPko+S55CPkudg/4b079b4
qDvJR4W92RofNZd8VOTX9h1JnkN9GunfT30qz6E+rfIcg6QvX+F6eib5qLB3
q8ZHPUo+Ku5/kHwU+8/cN5A8R5QPfXpwu8ZHWd633QdLfeq8GffJR02mPo36
up/6VJ6D8St5DsY32mkWe58kz8H4mDxHfD5L+SdTn8pzxO/Gn+QNJkj/TvJR
8hzx/HDyHFU+ajr5KHmOsPcyeY5I55zrsNSn+E3yUfHcWOrTSH82+Sh5jsi/
+w23Up/Kc1Tj6jdTnzrvsL9O+s3ko4wLUC+5T6c+ZZ+8xkdZXuNzE6lPo72u
pz5lnzD1KevCGh/lPrc8kvXO+v7NPB33y0dNJh8lzxH5f5dyXeW+Rq475KNo
hxofNZJ8lDxHPHeZfacz2LuRPMce7Uo7pj6V51CfynPE/caf5Bj8k195nTxH
fHZ9fzL1aeTzFfuSxsM+O1KfotOSj5LnoHzZz9Snkf5Q8lGOk2SMfXPz/S7j
4Zd8Vp9+fOT6/lt0ygF+wD528lGUq8ZHDVb1afIc8PtvdJDxJ3kO9peS54j0
ruBPXzDP3cw4o/qUcSL5KMc962Gpko9XR/IclLMtzxHpvcV6WJ5juDgO0K8z
LmTc1n3aZ/iNfmr8KdI3bnGOfvScdnp5JM9R5aNekP6JYrsZf4rv3ccfS56D
8S/jMIyPjM/HxAVGe/v4hfUW38uxyEd9Q3nlowYy/sRzGX8yTsf4X+M55AZ4
T+WNPo16+bQtHxXXr2nvt5PnYH6ingb1k7b9yHwZV7HcrtMZFzMuFs9N1HgO
+ajX7Wr86ZTtqh9l/GmxUm75KOdJuRf2yRpyJsmvJM8Rn22viaI+dZ+9ykfp
h4Opo6p8lPuEn7XVwQeVclzLetJP4qoeNM5jPOxWjY8aqcWfrN8zyXOg/47U
LfJRjiP6bdgzPfl9OY3xjAt6X+RjpsZHXcl5zbgV9p2vMv7EfIY9+aipjD8Z
N16kXuP7meSj3FeN7+Ve7iQfRT8r8lEHjAvUf/Icxp/iObmLL/F7yzuY++72
o8jH7eSjwp58wyTP3U8+ynY0/hT3GWdwXJxOPiqem8n4U6RzO8c1eY54jv3K
PfmVq3z/IP1InkN9GvffqvFRM/Zf+V7u/zR5DvmouMqvqE/vZ/wp7DzkKh/1
KONP8hyMT6Q/m/GnsGv9Gg+7m3xUPHcv+ai4PqjxUaYnH/U4+Sh5Dv0uvjfe
z37lwZ2MP0X6pmf86X7Gn+J7y/syeQ7ml+Q5jD/Jczz7/+NA8hxTyXOoT1kv
JR8V6T9IPkqew/hTpC+/8Sp5jvh+KHmOSvxpbyH5qLjKU0zx3GLyUawnM/4U
9yW/4no0+ago/3zGn6L88hvun8qTwKcfypNcZ39DnmQqeQ71aWR3rsZHzeMv
3+Ev84X9weQ5jD9F+5neO8lzVPmoJa43kucw/hTPyZPAR+3PZ/xJniPS4f3S
Zgt7P9+Mbt9KPiraf7HKR+0v5bwtzxG/M281V7AnHyXfcRl/kSfx/VJ5km/x
38WMP0X5La981HLGn+Q5qnzUSo2PWq3xUWu5DmI/K/koeQ75qCj/UpWP2pcn
kY+yvPJRqzU+yvTlo+RJ5KPkSdw/XUo+Kp5bZnx8RX9aqfFR8iTyUaupu9iP
JH/yUaYnH7VR46M2ko+K/C4nH9XP1k9WanzUao2PWksdHO0vTyIfJU8iHyVf
IR8l3yAftVXjo1ZrfNRqjY9aq/FR66lP47pR46NMTz5KnkQ+Sr5CPmq7xket
0T7yUes1Pmq9xkdZXvmozdSn8hxVPmo79ak8R+RPPqpd46PWa3zURo2P2qzx
UVs1PsryqpvlSdw/bVf1aVOeAp2yX1KfEo/BX+SjNmt81Fb5h/5n+SjTk49q
pz6V54j8jSfPoa6R55CPkudQnxKvSj6KeFb5Bn0qz/Hf/evn6GXTP027FMZr
68fy8z5nQ35B/ke+YZrnOqlPo/zbNT6qnfo04sHyGqxz3y9Vffq8pD6NUdL0
xpPniPvR1UNd7M0kzxH+xX7us3byUbG/W1KfynOoT2M/2PKyX7kvT3IxeQ75
qLDXTX0qzxH5m+H9853Up8SDk4/q3/+iJB8lz6E+jfa3/LxPMGt5R5PncB0S
9uRJJpPnkI8KezupTyOfneSj5DmqfFQ3+Sh5Dtdtka9u6tOwJ1+hHpQnUb8/
qfJRe09Sn8ITVPmo0k0+Sp5DPip4Hst3NnmOCh/13N/ho4o8yVTyHBU+aui9
Kh+1300+Ktq/m/o0/NvyvuQ8gp3Up9Hfn1T5qH3TU58+SX0a9uRJ4KMO33Pd
yPgnP+I+8BOu7t/t4PdDNb6C8yWedfP9PdqzGj9tdDN+ij/k+3v4S8ZP8Sf3
X3v4m/wA/t0ljjCUfIXvdeHPvQf95z/W38kf8//TDvsmw/h3cX+5yFdQf+gf
+RnOlziUH+F8id1uz33Z6HYdxk3jpx3iy+xTJV9xgvlJ3oD393aL++/4TZv2
mOoxHmX8lPGK/PG+3IfaP9tjvPO9H/ia0nNfEv4tz5dgPM3zJeDnqudL7G/z
eRK/6GT8lPE891kZ7zN+Kl/B+pT9oJL7WrG/Z3kHiudlhL9cIN61nfHT0A3y
BsTjZvUv9r178iO83/i0kO9B2ktehvhpU97i2Pm2Gj/d38rzJeQrIj3m/2N5
jknWV/oT+1NNeZqL7C96Honv72333FeOfG4Rf/+sLV/B/FPkK9g/YRzzfI4m
+9OeH0Fc5FA+aTzSP7Y+LxK/3O753ma0/xbt+MWRfIXvsclXRHlPF/mKqC/m
/6bndfD+3u4a7UF77Xkeie+5bpE/51vPWyF+2pAncR96g/GF8yX21vEn96fW
fD8Rf5I3UI/4mfhpcyvjp5Hfzdy3j/JvZPw0yu95IJwvcex5IJwv0bS88sjy
HPLaKxk/9byM+N04kvxIEzueN8P5Ei3reyD5CvyX/cRV/dv1UPV8icaK77cW
+Qr6T5GvCHvET/f1pybll1+Bjz6WHxlIvsI4hXxFpP+V68Xq+RKHS77/y/pI
ngJ+vCnfMYFdeZ0x+pPlvUA/Wkm+L9pfnsL4qTzL1235CsbPIl8R9pn/D1q5
bxn25Ck4X+JYfkSezvNQ5JGTn8GfljKuEfVpeX/Xlq/gPe4iX8H6k/4kb4Ae
Sb7CeOVyxk8jv0v4CedLNJYyfhrllyf5+Ei+Iuy9astXRHl9X8705LXnM37q
eRnxmfMldj2P5Ar+JB80jD95/kkj+Qr0BeOzfMc3jM/zGT8Ne3PG12i/x/me
YuRX3sD4qf7k/l2r53v77LdhDz76YL5XfY95LuOncdtj8vsOOu+R8Ufmc8/n
cP9O3uEG5bc9LzM+ex7IecZneZLXMT/sej6H50s8zvipfAXPF/kK7Bf5ivj9
BvPFHfziBumYvnpQfuQd+tdj6tPzJR7le8/yFdRfW74i/NfzJe4avy5VvkJe
ezb1KfvRGT+N9B+lPo1aeJj6lP3u2vkSd1Ofxn2eR+J71bOpT+P7Gf3XfanU
p3Hfw+T74n7Pmxmi3jx/Rb7vjv3LeEHG7eI+eQ7jVtOpT+P7qYyTyFeoT6O+
7qc+jfzeTX0a93k+x++O5CuMn1b5ihOkf8vxq8hXqE+J42LvZsZNf1y5yut4
TsVs6tPI50xVnx54HonxU89VM34qT2K88nrq0/h93PnBfc8q3/fM+h2tcuzu
T8mVZvxUXudT+G/HjYEipxfPGTceky+qvUdpHG0k9WnYvZXnSxAHSn3qvBL3
vUAPXkt9Kl8R+RpA//ner+dLXEx96jhr3PRnlDvsX03dEVfjp5Z3MLm7+P3L
I/kK46fWq/tTxHuT7/PcFfVp2DmVcTfGrSP1aaR7LfVplH8s9anrQvQf++O+
x/Z5W+4kvj9N+oPqS/eFU5/u4Ye0e/IV+hXvlSTfp47HfnJJ6lM51rD3Rdv3
HqI8Z9in9ryMi+W/eI56Ls4z8ftk+SHtHvbGU3dVyz2U+lTuUH0qp+7+lNwo
7VvUIbR/ka8gvp77SJGe+y+NWvx00PVRcmL4Z567iP8eyVfg323njbhfLuRz
yut+kOdlGD+VGzC+LF/RTK6H/kn6cqADzOMfHRk/dR1q/BR/kEPKOAJ+Xqw3
9Sn+lvtT+j3756TveyUXcp+C9XeuG1ifU0/O4+bjVC1+qg6T77uA7rhWy6dx
8ys5Tv2Ufhv1PJyc3B7t5riLHxxZD2HP+OmwXFqNA7hkXCvjp+6Tx+9T6JHf
c3/GjexH9hP7KbqjzEW95Tk6xk+r7w0OJecT9Xop9zXhn4rnZcR9U8V+f8C4
1qJc7F/lPk1cPV9iVO7qyDib8VPGDe43nus5Ep5/ZhzF720nr8blruS6Gv3U
04761LiI50vs4QdyX8zXcn25z2w7hb1bRX1qnMD4aeTD8zJ+f+5VPO/5Z1fx
v9f0b88j+cWm47zckHFrnmd8Nj25HM+v8Dy225lP+Qry73sXtMc7qQN+zThg
v/wF40w853kk7lfKc7hfKb/ifqW8gfHluxk/la+gXdx3sf171XpUn04zznu+
hPXbUA+Xaj+T52C/8tk9/EF9+iDjp+jxjJ8aN+T9rJ77+PG750vczvipfIXj
nudl0D9dT9h/SfdhLX76uBo/3Z1zfCB9eRLPKZMP+h3jzV3nJfSy55GcKPIV
VX36KPt92Jsr6lP5ikr89GDe8RP9LB90lvHmHv7n+ycP8pwu1pNyqa43q/HT
fdPzfRj5EeOD8hTET4/lD0ZZ39zP+Gmk8xB//go9+Ij2+tT3GbDn+x7yI74P
Y/qef2Z66q8W5ZlOvoJxDh7zEf48yPxqeeH7DufQoce+71GNn+5aXvcH5Tnc
P/Uz+v1QvsP46VKeLxH5navGT1vzxOO+PIp2n8d/nOcWMn4adlo5T8fV8srT
yXOo35dzXAx78hbwfYfzVU56f6GoT/u377boN5wv0ZQfOe1+V/J9YW8p+b6w
5/kcjCu7Kxk/DXurPk9/snynmT9avM/M+RIHi8kJx31LnttHubJ8pGt68n2e
RyK/5vkccodrGT+N9l/M+Gm0/xLxL86XOF6Sq/Z9M+x5Hq48h+cFy4+4P7hW
ndeO1yjPTPIV+B/9e6l2LuKyOhudtlI9X6Jh/cr3WV73B9eS72M/OuOn7Fdn
/DSe2+R3dPzxcsZP+350uILegfP+yWrGT6P91zJ+Gu2/nrov7Fle3vc49HwQ
9HvyFXCbu1uOX/Sn1aI+DTtrcu2sU+RZ5JBN3/ejTU/9vpl8X9iTp/D8M3kL
56Vtx3f60xrtw7pidx1+jXVLcwN/fsl5KRupT6P88ivGT00PnbQrP+L5CfIU
nJt13E59Gs+t5/kSUY8bBV2P/tr03EnGZ8srd76d+lS+Iu5Tf5meukGeQc61
pD6N/G7Sv3kv43gTnu4jeK0t4mZw6vvbycHLV0S+LhsPTH1KvLCqT5/Ld8zG
c6WT+jS+34IfUZ9ulz/tP8/5Eo025+14/lk79Snx0OT7Iv/yHp43Js8wRXt2
UrfJV0T9nWd83oaPeE181vL+YpNipD6Vr+D5SP+FPA3vnzzVPjq3J+8B3zfb
TQ66yle8g94o5aMoP3qwpD6N5yyv73t0avpUfsX9StOT7+umPpWviPtu53kZ
0e/g+z4s8BrE94c68IYfeR4D/oI+fW552a8s3dSn/eQ/NH3019AO9cW65v2d
1PXyFerT6N+d8tfRf/DfTtmM/uV5FalPoz3lR3jf49jyEk/f3Ul9GvZ2Up+G
vSc8j+7ef5L6NNq/gz+jT5924R+fR3/qyZPw/4+YlVchvv+B/MgY/iTvgR58
Ks/BuqQn33Ibe54Hcpb9gi7+7L7VTurTuG8n9WnYlSfxXE3Tc50sP6LekR+R
73uP++Xc3yv/B3CLMXs=
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {10, 15, 
    20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 3, $CellContext`tau$$ = 
    0, $CellContext`tick$$ = True, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 
    0.8}, {0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period:"]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open"]}, 
                ImageSize -> {200, 60}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Text[
                Text["Angular frequency \[Omega](q), selection:"]], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["mesh size "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`meshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin], 
                Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tau$$], 0}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`meshSize$$], 8}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`meshSize$$ = 
        8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
         1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tau$$ = 
        0, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       Dynamic[If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
            Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
              1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
           Module[{$CellContext`n$}, $CellContext`n$ = 2; 
             While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
            ReplaceAll[
              "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
             2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
              $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
              
              Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; $CellContext`bInitDefaults$$ = 
            False; Null, Null]; 
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
           
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
                $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
              True, Null]; 
           If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
                
                Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`bRefreshDynPlot$$ = 
              False, Null]; $CellContext`dynPlot$$[$CellContext`tau$$], 
           
           If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
            If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
               False; $CellContext`bRefreshDynamics$$ = 
               True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
            If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
              Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
            LocatorPane[
             Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                   Dimensions[#]] < 3, 
                 
                 Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
                 If[First[
                    Dimensions[#]] > 7, 
                  Take[#, 7], #]]; 
              Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                 First[
                   Dimensions[$CellContext`rawArrayOfMasses$$]]; 
                If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                    $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                  
                  While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                   AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                   Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                   Part[
                    Part[$CellContext`kArray$$, All, 1], All, 1]]; 
                If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                  Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                  
                  While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                   Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                   Part[$CellContext`u$$, 1], 
                   
                   Part[$CellContext`u$$, 
                    1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                 Part[$CellContext`glConstLocDefault, 1], 
                 Part[$CellContext`u$$, 1]]; 
              Part[$CellContext`u$$, 2] = If[Dot[
                   Part[$CellContext`u$$, 2], 
                   
                   Part[$CellContext`u$$, 
                    2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                 Part[$CellContext`glConstLocDefault, 2], 
                 Part[$CellContext`u$$, 2]]; {
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  
                  2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
               If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
               If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
               If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
               ReplaceAll[
                 "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
                2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
               True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
             $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
             LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period:"]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open"]}, 
                 ImageSize -> {200, 60}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Text[
                 Text["Angular frequency \[Omega](q), selection:"]], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["mesh size "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`meshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tau$$, 0}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`meshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{915., {292., 299.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms}, $CellContext`latticeBasis = 
          Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            Range[$CellContext`numMasses]]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay]& , 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], $CellContext`pointsTable[
         Pattern[$CellContext`mPosFirstCell, 
          Blank[List]], 
         Pattern[$CellContext`latticeBasis, 
          Blank[List]], 
         Pattern[$CellContext`numberLatticeLinesToDisplay, 
          Blank[List]]] := 
       Table[$CellContext`mPosFirstCell + 
         Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
          
          Part[$CellContext`numberLatticeLinesToDisplay, 
           1]}, {$CellContext`j, -
          Part[$CellContext`numberLatticeLinesToDisplay, 2], 
          
          Part[$CellContext`numberLatticeLinesToDisplay, 
           2]}], $CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], $CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk 
            Part[$CellContext`mA, $CellContext`j]])], \
$CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], $CellContext`showDynamics[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`ql, 
          Blank[]]] := 
       Module[{$CellContext`pointsDataTable, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`e, $CellContext`omega, \
$CellContext`points, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses}, \
{{$CellContext`a, $CellContext`b}, $CellContext`pointsDataTable, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`lines, \
$CellContext`mScalarArray, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "numberLatticeLinesToDisplay", 
             "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`points = 
          Table[Part[$CellContext`pointsDataTable, $CellContext`k] + 
            Table[$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`ql, $CellContext`a $CellContext`i + \
$CellContext`b $CellContext`j] - $CellContext`omega #))], {$CellContext`i, -
               Part[$CellContext`numberLatticeLinesToDisplay, 1], 
               
               Part[$CellContext`numberLatticeLinesToDisplay, 
                1]}, {$CellContext`j, -
               Part[$CellContext`numberLatticeLinesToDisplay, 2], 
               
               Part[$CellContext`numberLatticeLinesToDisplay, 
                2]}]& , {$CellContext`k, $CellContext`numberOfMasses}]; \
$CellContext`nu = 2 Pi If[$CellContext`omega == 0, 1, 1/$CellContext`omega]; 
         Show[{
            Table[
             ListPlot[
              Part[$CellContext`points, $CellContext`k][$CellContext`nu #], 
              PlotRange -> {{-($CellContext`glConstWindowHalfWidth/
                  2), $CellContext`glConstWindowHalfWidth}, \
{-($CellContext`glConstWindowHalfWidth/
                  2), $CellContext`glConstWindowHalfWidth}}, 
              ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
              Directive[
                PointSize[
                 Sqrt[
                 Part[$CellContext`mScalarArray, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
                $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], 
            
            Graphics[{$CellContext`lines}]}]& ], \
$CellContext`glConstPrimaryDisplaySize = {380, 380}, $CellContext`glConstMMax = 
       30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -(Part[$CellContext`qMax, 1]/2), Part[$CellContext`qMax, 1]/
               2, Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -(
                Part[$CellContext`qMax, 2]/2), Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], \
$CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 
                23}}]]}]], $CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, \
$CellContext`n$]/($CellContext`glConstMMax 500)]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               Part[#, 3], 
               FE`glConstSpringColorsByN$$55]]& , $CellContext`cN$]; 
         If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                Part[#, 3], 
                FE`glConstSpringColorsByN$$55]]& , $CellContext`cOrigin$]], 
           Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> {{-($CellContext`glConstWindowHalfWidth/
                 
                 2), $CellContext`glConstWindowHalfWidth}, \
{-($CellContext`glConstWindowHalfWidth/
                 2), $CellContext`glConstWindowHalfWidth}}, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], Attributes[$CellContext`uLoc$] = {Temporary}, 
       Attributes[$CellContext`ld$] = {Temporary}, 
       Attributes[$CellContext`cd$] = {Temporary}, 
       Attributes[$CellContext`m1Ind$] = {Temporary}, 
       Attributes[$CellContext`m2Ind$] = {Temporary}, 
       Attributes[$CellContext`moInd$] = {Temporary}, 
       Attributes[$CellContext`mScalarArray$] = {Temporary}, 
       Attributes[$CellContext`numberOfMasses$] = {Temporary}, 
       Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
       Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 
             0.01}]}], $CellContext`glConstKMax = 1, 
       FE`glConstSpringColorsByN$$55 = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]]] := Module[{$CellContext`result}, $CellContext`result = If[
            
            NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], \
$CellContext`massValue = 0.25, $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , \
$CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], \
$CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]], \
$CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.600991920019863*^9, 3.6009919670395527`*^9}, {
   3.6009920245298405`*^9, 3.6009920501333055`*^9}, 3.60099313594541*^9, {
   3.600993187449356*^9, 3.600993239845353*^9}, {3.6009932797776365`*^9, 
   3.6009933046760607`*^9}, {3.6012440341096554`*^9, 3.6012440721578317`*^9}, 
   3.6012447781242104`*^9, {3.6012448176024685`*^9, 3.6012448561326723`*^9}, 
   3.6012449730663605`*^9, {3.6012450799064713`*^9, 3.601245088751977*^9}, {
   3.601245122802925*^9, 3.6012451299813356`*^9}, {3.6012451718047276`*^9, 
   3.601245397972664*^9}, {3.6012467859190493`*^9, 3.6012468229691687`*^9}, {
   3.601246896213358*^9, 3.6012470488980913`*^9}, {3.6012470802998877`*^9, 
   3.601247087356291*^9}, {3.6012476034298086`*^9, 3.601247625026044*^9}, {
   3.6012477383525257`*^9, 3.6012477482580924`*^9}, {3.6012479226070642`*^9, 
   3.6012479616512976`*^9}, 3.6012480156453857`*^9, {3.6013815489528093`*^9, 
   3.6013815749782977`*^9}, 3.6013816959272156`*^9, 3.6013818936795263`*^9, 
   3.601381933169785*^9, 3.6013820135453825`*^9, 3.6013868190332403`*^9, 
   3.6013870782100644`*^9},
 CellID->211254071]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.47, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       1, 3, {0, 0}, 0.5800000000000001, 0.6499999999999999, {0.9, 0.7}, {1.3,
         1.4}, {{0.24615384615384625`, 0.4307692307692308}, {
        0.4307692307692308, 0.7538461538461539}}}}, {{
       2, 1, {0, 0}, 0.47, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       2, 3, {0, 0}, 0.44, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}, {{
       3, 1, {0, 0}, 0.5800000000000001, 0.6499999999999999, {0.9, 0.7}, {1.3,
         1.4}, {{0.24615384615384625`, 0.4307692307692308}, {
        0.4307692307692308, 0.7538461538461539}}}, {
       3, 2, {0, 0}, 0.44, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}}, {{{
       1, 3, {-1, 0}, 0.47, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
        0.09999999999999987}, {{
        0.19999999999999987`, -0.3999999999999999}, {-0.3999999999999999, 
        0.8}}}, {
       1, 2, {-1, 0}, 0.375, 1., {0.9, 0.7}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       1, 2, {-1, 1}, 0.67, 1.6899999999999995`, {0.9, 0.7}, {
        2.1999999999999997`, 0.7}, {{0.9999999999999999, 0.}, {0., 0.}}}, {
       1, 1, {1, 0}, 0.55, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.55, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 3, {0, -1}, 0.5800000000000001, 2.2600000000000002`, {0.9, 
        0.7}, {-0.5999999999999999, 0.5999999999999999}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       1, 3, {1, -1}, 0.525, 3.3999999999999995`, {0.9, 
        0.7}, {-0.4999999999999998, 1.9}, {{
        0.5764705882352942, -0.4941176470588236}, {-0.4941176470588236, 
        0.423529411764706}}}, {
       1, 2, {1, 0}, 0.375, 3.4000000000000004`, {0.9, 0.7}, {0.5, 2.5}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       1, 1, {1, -1}, 0.505, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.505, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 2, {0, 1}, 0.35, 3.65, {0.9, 0.7}, {2.3, 2.}, {{0.5369863013698629, 
        0.4986301369863013}, {0.4986301369863013, 0.463013698630137}}}, {
       1, 3, {1, 0}, 0.47, 4.25, {0.9, 0.7}, {1.4000000000000001`, 2.7}, {{
        0.05882352941176473, 0.23529411764705888`}, {0.23529411764705888`, 
        0.9411764705882353}}}, {
       1, 1, {0, 1}, 0.77, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.77, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 3, {-1, -1}, 0.13, 4.520000000000001, {0.9, 
        0.7}, {-0.7, -0.7000000000000002}, {{0.5663716814159291, 
        0.49557522123893794`}, {0.49557522123893794`, 
        0.43362831858407075`}}}, {
       1, 3, {-1, 1}, 0.525, 4.879999999999999, {0.9, 0.7}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       1, 2, {0, -1}, 0.35, 5.85, {0.9, 0.7}, {-1.5, 0.3999999999999999}, {{
        0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
        0.015384615384615389`}}}, {
       1, 2, {1, -1}, 0.67, 6.289999999999999, {0.9, 0.7}, {-1.4, 1.7}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       1, 3, {0, 1}, 0.5800000000000001, 7.540000000000002, {0.9, 0.7}, {3.2, 
        2.2}, {{0.7015915119363394, 0.45755968169761274`}, {
        0.45755968169761274`, 0.2984084880636605}}}, {
       1, 1, {1, 1}, 0.9, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.9, 8.41, {0.9, 0.7}, {-1.1, -1.4000000000000001`}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       1, 2, {-1, -1}, 0.47, 8.81, {0.9, 0.7}, {-1.6, -0.9000000000000001}, {{
        0.7094211123723042, 0.4540295119182747}, {0.4540295119182747, 
        0.29057888762769585`}}}, {
       1, 2, {1, 1}, 0.47, 9.009999999999998, {0.9, 0.7}, {2.4, 3.3}, {{
        0.24972253052164267`, 0.4328523862375139}, {0.4328523862375139, 
        0.7502774694783573}}}, {
       1, 3, {1, 1}, 0.13, 13.599999999999998`, {0.9, 0.7}, {3.3, 3.5}, {{
        0.423529411764706, 0.4941176470588236}, {0.4941176470588236, 
        0.5764705882352942}}}}, {{
       2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       2, 3, {1, -1}, 0.66, 1.2999999999999996`, {0.4, 
        1.2}, {-0.4999999999999998, 1.9}, {{
        0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
        0.376923076923077}}}, {
       2, 3, {0, -1}, 0.55, 1.3599999999999999`, {0.4, 
        1.2}, {-0.5999999999999999, 0.5999999999999999}, {{0.7352941176470588,
         0.44117647058823534`}, {0.44117647058823534`, 
        0.2647058823529413}}}, {
       2, 1, {1, -1}, 0.25, 1.6899999999999995`, {0.4, 
        1.2}, {-0.8999999999999998, 1.2}, {{0.9999999999999999, 0.}, {0., 
        0.}}}, {2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
        2.5}, {{0.005882352941176467, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.43, 1.85, {0.4, 1.2}, {1.2, 0.09999999999999987}, {{
        0.34594594594594585`, -0.4756756756756756}, {-0.4756756756756756, 
        0.654054054054054}}}, {
       2, 3, {1, 0}, 0.43, 3.250000000000001, {0.4, 1.2}, {
        1.4000000000000001`, 2.7}, {{0.3076923076923076, 
        0.46153846153846145`}, {0.46153846153846145`, 0.6923076923076924}}}, {
       2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
        0.8, -0.6000000000000001}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {-1.4, 1.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {
        2.1999999999999997`, 0.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {0, -1}, 0.25, 3.65, {0.4, 
        1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
        0.463013698630137}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 0.3999999999999999}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 3, {-1, -1}, 0.25, 4.82, {0.4, 1.2}, {-0.7, -0.7000000000000002}, {{
        0.25103734439834025`, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{0.9846153846153846,
         0.1230769230769231}, {0.1230769230769231, 0.015384615384615389`}}}, {
       2, 1, {-1, 1}, 0.25, 6.289999999999999, {0.4, 1.2}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       2, 3, {-1, 1}, 0.66, 7.379999999999998, {0.4, 1.2}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9878048780487806, -0.10975609756097565`}, {-0.10975609756097565`, 
        0.01219512195121952}}}, {
       2, 2, {1, 1}, 0.25, 8.409999999999998, {0.4, 1.2}, {2.4, 3.3}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {0.4, 1.2}, {-1.6, -0.9000000000000001}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 1, {1, 1}, 0.25, 8.809999999999999, {0.4, 1.2}, {2.9, 2.8}, {{
        0.7094211123723043, 0.4540295119182747}, {0.4540295119182747, 
        0.2905788876276958}}}, {
       2, 3, {0, 1}, 0.55, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
        0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570139`}}}, {
       2, 1, {-1, -1}, 0.25, 9.010000000000002, {0.4, 
        1.2}, {-1.1, -1.4000000000000001`}, {{0.24972253052164256`, 
        0.4328523862375138}, {0.4328523862375138, 0.7502774694783573}}}, {
       2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{0.6138686131386862,
         0.48686131386861314`}, {0.48686131386861314`, 
        0.3861313868613139}}}}, {{
       3, 1, {1, 0}, 0.525, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
        0.19999999999999998`, -0.39999999999999997`}, {-0.39999999999999997`, 
        0.7999999999999999}}}, {
       3, 2, {-1, 1}, 0.6150000000000001, 1.2999999999999994`, {1.3, 1.4}, {
        2.1999999999999997`, 0.7}, {{
        0.6230769230769229, -0.48461538461538467`}, {-0.48461538461538467`, 
        0.3769230769230771}}}, {
       3, 2, {0, 1}, 0.45, 1.3599999999999997`, {1.3, 1.4}, {2.3, 2.}, {{
        0.7352941176470587, 0.4411764705882354}, {0.4411764705882354, 
        0.2647058823529413}}}, {
       3, 3, {1, 0}, 0.8800000000000001, 1.7000000000000006`, {1.3, 1.4}, {
        1.4000000000000001`, 2.7}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.8800000000000001, 1.7000000000000002`, {1.3, 1.4}, {
        1.2, 0.09999999999999987}, {{0.00588235294117648, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.35, 1.8500000000000003`, {1.3, 1.4}, {0.5, 2.5}, {{
        0.34594594594594597`, -0.47567567567567565`}, {-0.47567567567567565`, 
        0.654054054054054}}}, {
       3, 1, {0, 1}, 0.6150000000000001, 2.26, {1.3, 1.4}, {2.8, 1.5}, {{
        0.9955752212389379, 0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       3, 2, {-1, 0}, 0.35, 3.25, {1.3, 1.4}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.3076923076923077, 
        0.46153846153846156`}, {0.46153846153846156`, 0.6923076923076923}}}, {
       3, 1, {-1, 1}, 0.25, 3.399999999999999, {1.3, 1.4}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.576470588235294, -0.4941176470588235}, {-0.4941176470588235, 
        0.423529411764706}}}, {
       3, 3, {1, -1}, 0.78, 3.4899999999999993`, {1.3, 
        1.4}, {-0.4999999999999998, 1.9}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.78, 3.4899999999999984`, {1.3, 1.4}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9283667621776505, -0.25787965616045855`}, {-0.25787965616045855`, 
        0.07163323782234961}}}, {
       3, 3, {0, 1}, 1., 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
        0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 1., 4.25, {1.3, 1.4}, {-0.5999999999999999, 
        0.5999999999999999}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 1, {-1, 0}, 0.525, 4.25, {1.3, 1.4}, {0.8, -0.6000000000000001}, {{
        0.058823529411764705`, 0.23529411764705882`}, {0.23529411764705882`, 
        0.9411764705882353}}}, {
       3, 1, {1, 1}, 0.8250000000000001, 4.52, {1.3, 1.4}, {2.9, 2.8}, {{
        0.5663716814159292, 0.49557522123893805`}, {0.49557522123893805`, 
        0.43362831858407075`}}}, {
       3, 2, {1, 1}, 0.43, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
        0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       3, 1, {1, -1}, 0.25, 4.879999999999999, {1.3, 
        1.4}, {-0.8999999999999998, 1.2}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       3, 2, {1, -1}, 0.6150000000000001, 7.380000000000001, {1.3, 
        1.4}, {-1.4, 1.7}, {{
        0.9878048780487805, -0.10975609756097562`}, {-0.10975609756097562`, 
        0.012195121951219514`}}}, {
       3, 1, {0, -1}, 0.6150000000000001, 7.539999999999999, {1.3, 
        1.4}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7015915119363395, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       3, 3, {1, 1}, 0.925, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{
        0.4756242568370986, 0.49940546967895355`}, {0.49940546967895355`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.925, 8.41, {1.3, 
        1.4}, {-0.7, -0.7000000000000002}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       3, 2, {0, -1}, 0.45, 8.84, {1.3, 1.4}, {-1.5, 0.3999999999999999}, {{
        0.8868778280542985, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570136`}}}, {
       3, 1, {-1, -1}, 0.8250000000000001, 13.600000000000001`, {1.3, 
        1.4}, {-1.1, -1.4000000000000001`}, {{0.42352941176470593`, 
        0.4941176470588235}, {0.4941176470588235, 0.576470588235294}}}, {
       3, 2, {-1, -1}, 0.43, 13.700000000000001`, {1.3, 
        1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
        0.4868613138686131}, {0.4868613138686131, 
        0.38613138686131376`}}}}}}, $CellContext`dynamics$$ = {{
      Complex[1.3723783960195413`, -0.0014096176833087522`], {
      Complex[-0.05466992402211589, 0.03924903637745091], Complex[
      0.08607083053835501, 0.00631766357798353], Complex[0.8929131997199953, 
      0.], Complex[0.41615944422130424`, 0.023847778451389023`], 
      Complex[-0.09058631960599108, 0.05352734273620516], Complex[
      0.05863605866038707, 0.04961839303097277]}}, {
      Complex[1.0843648251632787`, -0.005498221560995313], {Complex[
      0.014335123211193962`, -0.08861643844610984], 
      Complex[-0.04215345505271835, -0.11342103696643999`], 
      Complex[-0.0748743055018618, 0.09191378204617758], Complex[
      0.42902875664886037`, -0.00017841820720417012`], Complex[
      0.6841831347253885, 0.], Complex[0.557739525319312, 
      0.0006594808640956323]}}, {
      Complex[0.9712269782587021, 0.0007365438469062232], {Complex[
      0.6032268011128543, 0.], Complex[0.3130019425963986, 
      0.009479167494060095], Complex[-0.22287624665369013`, 
      0.019886732265727458`], Complex[
      0.3799682258877305, -0.10034957381068377`], 
      Complex[-0.3506897458192229, -0.0826437364503449], 
      Complex[-0.4493724699099923, -0.04234691172353128]}}, {
      Complex[0.8955757626953624, 0.008270034163965491], {Complex[
      0.7279148177492437, 0.], Complex[0.6244576134256611, 
      0.030534811157518743`], Complex[0.052765739877250306`, 
      0.008078252209797623], 
      Complex[-0.17514579315618117`, -0.0380460696415482], 
      Complex[-0.1375332702175006, -0.1513433664502185], 
      Complex[-0.04468875434889919, -0.021679459261937678`]}}, {
      Complex[0.6288367034549143, 0.010169956148005149`], {
      Complex[-0.45136105918854824`, -0.01778622820579903], Complex[
      0.6449916640004545, 0.], Complex[0.034740094275844985`, 
      0.03985840013632151], 
      Complex[-0.02032383091120491, -0.0451178798596688], Complex[
      0.35365912309965564`, 0.17319982361884423`], 
      Complex[-0.4066989914445948, -0.23285473242217106`]}}, {
      Complex[0.426553430552505, -0.015520747732811192`], {Complex[
      0.5378678510538392, 0.], 
      Complex[-0.5336842899682679, -0.04735231216581334], Complex[
      0.1906087101668072, 0.042066644293068306`], Complex[-0.186296883732521, 
      0.01678418022866701], Complex[0.3618970493391724, 0.22446128518320757`],
       Complex[-0.3485798804563575, -0.21837402662163646`]}}}, \
$CellContext`dynPlot$$ = Show[{
      Table[
       ListPlot[
        Part[$CellContext`points$40015, $CellContext`k][$CellContext`nu$40015 \
#], PlotRange -> {{-($CellContext`glConstWindowHalfWidth/
            2), $CellContext`glConstWindowHalfWidth}, \
{-($CellContext`glConstWindowHalfWidth/
            2), $CellContext`glConstWindowHalfWidth}}, 
        ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
        Directive[
          PointSize[
           Sqrt[
           Part[$CellContext`mScalarArray$40015, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
          $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$40015}], 
      Graphics[{$CellContext`lines$40015}]}]& , $CellContext`dynTab$$ = 
    1, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyNnXdUFdkS7lUwiwFzZlQMKGZ0VOBgxpwx55xzQExjxoiKCcOYwSyKYkCP
CoqKOQcUhEOGwzkKqODgm3et6p7+St96/jF3rb3O3XTXrl21v193V/0xYmrP
0bly5MgRXjBHDot//7dnxf0X7p7Mfb3rjndfv0/M0n/x7OzULk+GTjuepC80
0K7CH5bpyngO+rfqmcW1IhXV8c4/f6/zcvZd98wR58nSPXx161xQFx5P1/Pf
TQiN1pfVp8N4kr7xlcd/9v7zizLOf3fFiXZlQl+q4/x3jXmHNh3VWsyv89NN
if18M13H/3/+uweWzPN3KpYB40n6It5RVdxqqb/nfxX2trh2+HiaMs5/txj8
nv8uz9/75/Xo+O8epOvRjifpY+j6eZznW073y+P8dxuSfWB+XbzGnrld+O9q
7c/jSfr12vVy+c36uvDfzaf1B55f92v/ydKP8tU1rL7XLPzK937W/sQjqcKv
yrZ0DnAsZhR+Nb+WfeGW9XGeLN2hEQ0n+IaahV99qblvQvkdJuFXOfLVex77
1Cz8akO0hU+jmp+EX125UfBVxGucJ0tnuetFleBKZuFXwSu8VgY8w/Ek/bD+
DyObW6YKv7o96sTqYcdShF8Nh9/z3+X50a9y0/WgXwXR9aNfraf7Rb9i+6Bf
ae2p+pXW/qpfuWvXS/ErWF/Fr05q/UHxq1/7T5Z+QvDWAae2m4RfHU5LbX/T
lCz8yuvPc8UXWacIv8oXWm5/5fNG4VfDnfxG/xWYKvzqWu/QK3kspF81rbzL
ssXgVOFXgVm3EjvlSRV+NcEpz9az1YzCr06NHmBad9Uo/KqQdbuuC16jPyTp
k3b0b7YwOUX4ldW34s2Gj04SfpUIv+e/y/OjX52k60G/mkTXj351me4X/aoZ
2Qf96obGnqpfae2v+lV+7XopfgXrq/jVMa0/KH71a//J0js1WuxTqEOy8Kv5
T0uYtu6OEX614LV/k4qLY4RfHfXIeORhmSL8qkvTnenjgpOFX11aaT98fmyi
8KuGE7e6DrqUIvzq5uwZL/v3NAq/2lg+peS4VJwnS9ckoemVqAMJwq8G1999
u/y7ZOFXlnsyyr6ZGCf86nDzzt2vX40WfoW/57/L86NfOdD1oF/x9aNf8f2i
X9Uj+6Bfae2p+pXW/qpf+WnXS/ErWF/Fr8AfFL/6tf9k6X9khQ98sSZO+FWr
e5Z5Z68zCL96fHReRlBWtPCrl6+dhl0ZaRB+lbfyx5t/vjUIv7K8aROcGh4r
/OrB7h1ZXzfHCL86cigx/8U7BuFXZWecO3w8XsyvW/yk4ACHqmLd9YsK9JtT
9rpB+NX36bddNp+NFn5VbIzDgFYPmjijX+Hv+e/y/OhXS+h60K/4+tGvDtL9
ol+FkX3Qr7T2VP1Ka3/Vr15r10vxK1hfxa90Wn9Q/OrX/pOlN82uH1r5JvpD
kn57pSItT138KPzKfuOYy2udXwq/6lcg9cm6v98Jvwor/N6zyryPwq82HU6t
MuNAtPCr8C39PdsdihJ+9XfPVSXzf/0o/GpKI69UKy8xv+5h3OLG8yah/2Tp
P7nP/KJbEyX8quOfs402i1/8f/tVC/g9/12eH/2Krwf9ajJdP/rVLrpf9KsP
ZB/0q+0ae6p+pbW/6ld9tOul+BWsr+JX3lp/UPyK/cfv2/3FRb/mut7W9nr/
hdlf9O222Qfd7Zmhy37x1bVvqxzXW5w9dPkfrzT91gOFW3T5O0PnN6pDNcey
WfqGOs/yi6qa9YZTqZceJyn6Rd8ddBzP3+l/42H6GVaB4ZEH05X5f17nO/3g
9hOy/O3U+Zv97+8a9K5/VSy3zF+dv/Nv5mf7lPrcK9p+kzo/j9usXXiseSV1
fh63q+o7vf1xdX7UoYd+/l5Zr0lfnSIMj9N133/Or9qz5o7s01HpuiM/r0cZ
n9n/U0WPtHTlOnm9bnt6ey8MU6+Tx/O42E5Mclevk8fbZpxv2b+movuELnb9
3/gL5Tpn9Sx+PuB7uq7L/8ZjlPG21U5drB2frsv63981KeOlM1yDDjxL13X/
ja7M8fJ/v9fXo3X3OpG5bYMxQ9f35/y0Xmn6pD3V0u8cytAN+nk9+tbkV+03
du1lMZB1d0hQZ9Dj2nXM0s8iu2nX8d+4R3bWrmOWfjKtS2+IVwlw/by+Exv0
OecdoF4/jx/wfWP/or56/Tz+puIQv5LKPg8JQm7A19/hp5/r9u8bEH5ojHr9
HX/6ue7KZP/MZmfU62/60891z5vnK/vom3r9HWn/Mt/g+Xlfx9XvEzjXOQP2
0b95pKpFVHkX1X94fFtJ/0LXW4p9pMzP9mlJ+3TckZS3E2p/UezjSvu04z7v
PYWXqPb5k/apvU+LYWefq/bpBPbh+dlvk+KDb2QXVOfn8R62LSc2aanOz+OB
w6+VmDJHnZ/Hmc+wfdr89Dfdy6onvKt3Uu3T/Kd/6j5M3Tzby1W1T4Of/qyL
vTLPLbOtiAPC/rwvbpmnLilQOwP9U3elYLku/fJhnMnSnbUNKXskRvinwql4
//L+Slt0a8vVbur+/ZP215vxfpa2c9T924r217Xea2ev263u307k/8ydtP6f
pef9rvX/LD3HB63/Z+lnUjzR+r+6f7Xx518d4Z/T781UjD9J+swHNvaDL2D8
SdL/e/Q/G/kd44/Kx/j6HWm/zLcvtXPWe/X6e9L+yt3rQebyuer196P9uGne
8kFbi6H/XHZU+B7Nz/viC10Pz69wkoc/r5/n5/H8dL/a+KZyQraPM+2XOrRf
2D5utL860P5i+wyn/TiG9iPb5+ffuRW0HOI/74sLtF94fh7vTvuL5+fxRNqP
2vlz5FhG87N96tJ+KT8mZuvbJmr8JP/UuYZMTOtup+5f8k/d7CqfeoZWFPFf
4aXgn7rYR/X7r3wp/FNnO+xzWJlE4Z+6kabzzsf/Ef6pzM95nK5fH0H7nfO4
sr8oPnAe5/31jOIJ5Fn9CPq7kGf1Veg6Ic/qo+m+IM8q+1R73vhXF1Pc1p43
kvTNKM5rzxtJ+mjKC3ydTrRf7H/tb7qOv/Y33dhf+5sj+hv7OedHnp/H91M+
5fl5fDzlX54f+TbboRn5f94nQxw6Tvui2KEN7RfP9Dk9H+T/otihCe2vguU2
Tu1+UF13PEfxPHju4nl4PJTOaXy/7cif29F5hu/Xkfw/kc4/fL90TtZtoPMS
32+P39wv+8MpyhdwztRfovwC50x9MOUjnofijI7PzzwPrzuft3meYbTufD7n
eXhdatI5mefh8Yp0ruZ5eLw4ncN5HnuyQzTpBZ6nKdnNm/QFz9OS7Ux6BHXK
2sVXBrgdNwudcrZv02UrL5qFTnlT79zxC7fMQqcw90ad8qxxO/OwOalCp7Qr
UWP7zckmoVOqFj5+vreNWegUnJ/3qb7uPf8evUxCp9jN3WZd95lJ6JSt+hEz
C/QyC53C86NO2ZxvdYW9b0xCp9jHT31oU94sdMqd0L5LDg4yC53ic6B+77z7
U4VOsVpaLHPcDpPQKQ/OFujYdZhZ6BR+zoI6xWuKt+7hcrPQKYP77vga52AW
OsXOZbd/zjiT0Cn8nAJ1yvSxoS7lnpmFTom6PfRkl3/HUaf0rP617F/KcxxV
p/DzF9Qpd8luqFPqkp1Rp2yhdUGdgtfP61unmJNHgLNZ6JR+5TpVWXrMJHTK
8qr973YrZRI6hZ8roU45sylgxuBvRqFT2kfZNVj0MVXolKk7H899NMokdAo/
L0OdsubRqOvjypmFTvGZvXuGl6VZ6JTj5Z9Xu2g0CZ3C86NOeXV+d5FTi8xC
p1Re7bCi5guT0CnjBjzMPFDbJHSK8twNdEqbuTtCZvQyC53yrYB9qv8ik9Ap
g5yWNYrqlSp0Sig970OdMuHyuBXpa81Cp9S3/ntf6+5moVMyxr+4sqmEiAPC
/rwvguoP7Ddlj/BP3fPsZe0cZgr/1CXfP9H4uyvOrz73RJ2yxiv35fVPU4VO
eTtyb4dp3U1Cp0z90ezCzkCT0Cn8HBN1Cu931CkcH1CncDyBc6Cyf1GnxB60
KbH7dKrQKU3mXjq4yN4kdIr77hFO9ZZh/FGft6JOiRk85NPnviahUyqlDS9f
9FSq0Ckz6uTt+ecJo9ApyvNi0Cl8PahT+PpRp8TR/Wrjm/rcGXXKWNovqFMq
0f5CnfKC9iPqlHUQ/3lfDKD9gjrlC+0v1CmtaD+iTuH5Uadc/ZSca2tps9Ap
+qoP63Z0MwudcqP36QE/vEX8V56/o04J6BPi8aMTxucs3aii5563cBf+qSse
tt9+3hHhn8r8qFN4v6NO4fiAOoXjCeqUEvR3UafwdaJOOU/3hTqF9ynqFI7b
qFM4zqNO8aS8gDrlN/6m+42/6X7jb47ob+znnB9Rp3A+RZ3C+Rd1Cp67WKfk
cyj8pUmiWeiUZSvL9G5+wix0SvarKv5OU8xCp/A5CnUKn7tQp/A5DXUKn2dQ
p3yk8w/qFD4voU75zTlTn0L5AnXKC8ovqFM4H6FOqUbnZ9Qp7em8jTrlOZ3P
Uadso3My6pQ6dK5GnXKDzuGoU1gvoE5hfYE6hfUI6pQ5F5ZVmzDYJHTKsqPT
jbZVTUKnVG6mnxb8JFXoFH7PBHVK84Yp3ewPpwidYqhdY114U6PQKetth99Z
e88odArOz/u0g77c3Mi1KUKnGD3bHsmubhQ6ZXPvaS8q3DQKncLzo06ZaJp/
sH5NqVNKrqu7dkAXk9Ap+hpRM5bPMAmdMiBhruf0jSlCp1TzcfwxqpBR6JSU
jjln9/M0Cp3C7+2gTkloumNHZDSeE7J0oYMTo9qkpgqdcmiZo/3RzFShU/i9
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
oVNmvFs3Zl3we6FT7uXoPiRPcKTQKe9gft6n8Vf+6OX9+aPQKc36Nx49v26U
0ClrMtrNHTY+SugUvn7UKSff/Fg7ODFa6JRgq6Lprg0xbmTp3rS0GdJ4vkHo
FH9vL7eUY2+ETnHwufypa+n3QqeEd5vR/nXLSKFT9lLdBtQp75b3XNr5cZTQ
KSEbG1j1LxUtdMpJn6I7Rg+KFjqF6zygThlhFWkI2RMldErcyjEurbdHCZ0y
OUfKrhteUUKncP0K1CmvyW6oU66TnVGnHKV1QZ2yCa6f1zf1xRPLsscjhU6x
qO+d49XI90Kn1AhY/sVj+huhUzpTXQ7UKWVybw1OnfNG6BRLj+D7vU6HC52S
ajK/CIyLEDqF63WgTnEf3mLrmcXv5fcpF1f1ez40QuiU93kTrb7/LfaRUs8E
dUpO27SUxFqRQqfcMt5YtzMwXOiU1Vt2OQ0u/0boFLYP6pQyjwP3W6W9FTrF
mDmsTP6vT4RO8exUolL+rzd+pVMm/EqnpL3qMLLioo9Cp/w7rWOZ5R+FTmk7
oWqp4ms+Cp0yBeyvvE9ya0VaU4cooVO6eNQd2uUTxpks3foGr+6OOC38U6kb
gzqlwofSD7z7vBU6xbTs8vF8dSKETonyrtvWOWeU0Cn3uS4N6JSjtN9Rp9yg
+IA65S3FEzgHKvsXdUqyxb5jQ+NeC53i9ejemL3dwoVOabwrvcr7wAj53hf4
J+uUrn/cii/R763QKVffjf9k5fVE6JR+dSp+tfJC//mfTpnwK53iQNeDOmU9
XT/qlBi6X218S9I5kf+jTllG+wV1yjXaX6hTvlf7uR9Rp/hA/OdNMZP2C+qU
SNpfqFPy0X5EnbKD5kedUiS353Sfhx+FTjnz8q/P1a2ihE7p4Td/9rlOIv4r
9YtQp/S972ib+Fn4py7yzLeSgzyEf+rGb72Q52GuaKFTeH7UKbzfUadUoPiA
OoXjCeoU/ruoU/g6UafwfaFO4TiAOoXjNuqUnRTnUafMo7yAOmXer/1Nd+HX
/qbL/LW/OaK/KbyL8iPqlG/1fuZT1CnJlH9Rp+C5i3WKy9CRE76mRAqdcufV
okWPQiOETiliblLz1Ln3Qqe8o3MU6pTGdO5CnXKWzmmoU/g8gzolns4/qFNG
0nkJdcqHX58z9RsoX6BO4fyCOoXzEeqUh3R+Rp0yj87bqFN60/kcdco6Oiej
TuFzNeqUODqHo04ZQXoBdUoc6QvUKaxHuM4b5Xe9Y7ZFetAttZ4z5Xf9XzOu
nGi0Qh2vT/v9duyMUcfaiPrPol40n2dqX9oXMqiAOt6B/K1j6dKTdxRVx9uQ
f46fvb7k81JYdzrAEetOcz7qcOqEf47R6ngvWpeCnn0Om0+o47x/H47M3hGV
po6TzhL1q9nfIg1TXlq1VMfZP+utbWLj2lYdZ39e3CB7/NIOaj1qtnOQZeUh
4yqq42znjS0HfL/goY6znUcs2uqT+22Grsf/0w6yHhqPK+fJpqdMpqHqONs/
/Nxav/Wr1HG2f4P644fZnf6iO/a/f5c5/yp1nLT1/QIcsS43r8vQ4ELDjNPV
cV6XZm+f+pa0Usd5XYqbd6Q6+mXojtH5kO3JdZz497xeWPeb1yv8RZWqrlXV
cV6vsIOxhetYqOM8/6XpxzKLRKt5mtdrYe5nD1q/Usd5vfqtsU/ssEcd5/Vq
VGR1nu4j03U5Kf/yfXGdIv492pPHeb02v7yYPzG/Os7rVbLsRtPCRLUOOa/X
joGjXxULU8d5XbBuOa/LTvg9r0spmJ+v35uup9tv7M+/53Gsi87r4kD24XFe
l/5gT16XRWR/0gsuvC5ch4frKPJ4AK0jj/N6hdC68ziv1wvyE6jTKOqx87pY
kX/yOK+LA/mzcj20LoPJ/2n/cjxX6q770n3x/FyvRltPMsAR68DzOtajfcrj
vI7vaF/zOK/jSooDPM7rhfXkeb2GUvzhcV6v9RSveJzX67ImvuVW1muRJh7m
duF1qauNny68Lu+18VbYjcfZbmHaeO7C61JAG/9deF1ctfnC5Tf5xYXtPFab
j1zYzu21+cuF7VyD8l3f39iZf8/jWFef7R+izbMubP8l2rzswvbHPM72t2ma
+s29tlpHne0ffnvvjQcX1TrYbP8dbl09/2injrP9sW4/2z94/Lrqi1uq42z/
yDwVjxcPV+urs/2/HzxZz2+OOs72x/r/bH+vtm0LF7ZV52f7W9hWD5haQb1O
tr/Ot9bwfkfUcbYz9hFgO9+aW/dwOTd1nO1c5HY9xzQPdZztPKBEg2cP9qt9
BNjOlyIt2j6MVevDs509doyt/JeD+nu2s3P3sG+NlptFftfaQdYRwvxucD6U
u3m8Os72D51dtun6f/5znWT/4yc2jIu0/iTyO9d/wPyO/RF4Xcq+a3t0yHN1
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
zCDye4XXdoXT0qNFfu9J32Fhfs+C/pK8XhUXbxvxbu17kd/blNvXevPZZyK/
v5rQq8Pms8Eiv3vYbxn33/6DvC4x8Htel84wP1+/LV0P5nfluzPI79g3k9el
ItkH8zvaUznXkf0xv/N3RpjfeR0xv/O6Y37/RH6C+R37dfK6XCH/xPw+hPwZ
83sO8n/M79yXE/M7f4+D+R37hPI6nqR9ivk9kPY15vcbFAcwv2O/UV6vshR/
ML+PpXiF+V0b39T8ro2Han5P1cZPJb+P1MZbYTfM76W08VzJ77218V/J75Av
lPyOfVHZzpCPlPyeT5u/lPxejfId5vcwTXxW8zv2XWX7n9bmWSW/V9bmZSW/
b4Q8zvYvZ+M3OviHmjfZ/m3uVbYc66SOs/0nz9p+oIBHlDLO9se+rmz/VzXL
1OxtHSnyu/2YVpXSXoWL/H5ifu9k3do3Ir9jf1i2/9eTrjnub3sl8nvwfbt2
hVJfi/y+IanQus7t34r83h/6zLKdaz4aHnV55nuR379uef4pvn2E1O8nDv5V
cEOkkkeU5yB/rHGMG6HmR7Zz4O5qboOqquNs5w5l9FOfREeJ/F5XYwc1v2N/
W7b/eovRdZq6q+Nsf+eZ0x7V6KqOs/2NUR4zylSNEvm9E73fjvkd++fyujxb
k79zgQ/qOK9L3uC1SwuGqOO8Ls2zrC4VOvZR5Hd+HxvzO/bn5fVaaXN/Sc32
6n3xeu21ymfdOlsdV+JSZuuDg89Hi/y+uNXo0t7bI0V+L13q1JTHHd6L/F7f
d9OpeaPeiPzejb5fwPzuCn1+eb0GXmsT0K/yY5Hfw1fXTLNZfEvk99x2G3/Y
LD4v8ru/U6ERv8rveeH3vC4vYX6FP9D1YH5XvieC/O4E98XrUoPsg/m9GNhT
eb+O7I/5nf0B8zuvI+Z3XnfM7yvITzC/Y99k5b0I8k/M75bkz5jfH5P/Y353
oziD+b0wvceO+R37NSt5h/Yp5ncn2teY3zdQHMD8jn2feb06U/zB/H6Z4hXm
91qa+Kbm95GaeKjm9wxt/FTyu6023ip2w77SbLe12niu5Pcb2viv5Pcv2nyh
5Pe60J9aOUdp85GS3+to85eS319SvsP8/kETn9X8jv2v2f4TtXlWye+ttHlZ
ye9lKY/7ar+PU/pl/6P9Pk7pl32Yvl9j+3O/7KM8D9mN++79oHnYztyn7yjN
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
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1lEdoVVEQhu/LzX03mphmEjsiuhAFEXUhKIIILhRBREEEUVyIBXUhiCCi
YNsIoiKxZuHShW0hmBhNj5rElJeYYhKT2MXEhgUs+P3MuPjf+d9/5syZOzNn
pm3Zs2Z3WhAER0EI7oAYXAePoiBoYp2K8BDeCJ8M/5QMgjJ4FVon+Amfgf4Y
noIPsV/MmgC3wQAYBAuxuej+r4KvXFjIGqUHQQ1rLShi8wl+xsDfs98PL8TR
SfR6eAP6RHgDvB3+grtq4dXwsehdnMmCv2Z9iv4DPj22+3RvCbgX2bfWh8Yv
wbvxU846ClSC/tD4SGj/xZUL3VUlXzhLEPdYeC5rH3ZsBc2sfZA8Yj6ETR1a
RmBnmtD7WefEZv8YPiG2PCiHm2OLW/E3Y5uOj+zAEtkTmN6mWEEmuOU+n7Mu
4OxvxQI6wB+QB76Dc+xNSlicjZ632Z5n1WWe8gZPYLMVvhZ8lh+01ao3vB3e
DdKw2RZbbuV7Y2w9oDxvii1WxTzMd+TCc8BB9FXgI3oK22L4ZPShyOqonpnl
/aPvmwl/5fnvZT3G/ynYv4ysl/S9c9FWgHfKCfpFt3mhfIAi+Cm0R9T1Ajal
aL1gFPo+9OXgLXor2sPQ+iHFzzL0N/AW9TVnS73PlTfl9RVaJfymvjFpb0Tv
Ip9zK8GI90y2vh3+Bf7L30s1ts9ABnt7sV2qenutE54f5flv0vwoV6qD/HxT
TdHvsdZEllfdccB7Xm8nCx56vVS7TPbzA7uvLrI3VsB+T2T6H86Ve/934HsA
Pk5+6JP78MvwzqTlbTQ+TnB2UDbw0/DD3leq4xGvqfKvuqv/l6Bd8/gV64jn
M/U/P2BRbKvOLI4tTr3l0fBf2BUp/nTLm2p3HL0xaXOkLLL5oFqf8V7Qdw2D
9V7HVu8HxXwWbYPXXT3zILI59x5/67wWqrvyE2K/3ftZ72KHvxH1/87Y3oJs
dundhZaf/fAK9Bsc+5C0mal5lRfbTNCs0MyoZ+88/G5kM01zIEdzwOurPmlx
G/Xt+ISd1RzU/LoCutgvwNeEwN6F6iW9N2nfpRgq4U0+i3XXD59x6p8K7+Gq
pPWAat3jva25UgNv87ejPJf4/GwP7W1qjs1H+AfvlOUB
            "]], 
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1:eJwtldlvjlEQh9+vX7/3pXatWlpBEFuIBIkrCUJiC7E0iC0SO5UQ4pJYE0Ls
WlzwB1gTolq6qFb3fV/SnS5qbSut8kxmLp7015kz58yZd+Z8k3YfXR8d5DhO
FARgnOc4mfxN559I9HioR0f4HOc2+g7chSDwQRG+b6z3o4vR39G/4ZfZRsBw
GAlZtu8w9FDzyVlp2BphPGfEYgsNdpwwOI4+BidhIL5K1rS7jtMGHfCM2ERs
DegidBa6Cd0MrfDF1fVP8b3Hd8H2qUJfRF+Cc3AWGuz883JfYgqJybS9G2E6
9mkw01Nfhu0RQkyfn33JNyRY/TNglqc5yR6ie9F9UGx5TsHWg/5JbIA4F3I4
Jxve4L+HLw9dhb8S5rC+BlsTugL7A/Q71lWhqyEcfyq2MvzN0ALXsF2F6zCa
PGtZXyy1glLbIyGgugTK4KHt+xZi0Y/hERTgCyJHHwwP1n447em6GPyf8GdC
FuS7mnuc+SRW6hvp096J8fQ7T4Zu/KVWj6nwh7U9kCw54Ou1b12GLofnkBTQ
esyGuVCLLRvbPKuR6PnoBZCPbsG2FL0MlntaG6lRLr5mfJuwLYQ6dA62Vnxt
fs0hDttXzu+Eb672RiW2CrmX9cEn1qZDoV/XS/7SsyfglPWI9NwV9GVPv0s4
thpsZzytY73VR3pR+nQwehAMsL4/JDOHLkcfQUdDlKe559kdN5uWOy1GL/H0
3jJ7iVI3qY18K9aEYktBf0SHoUdBOXnft56QHqt09Sw/51Zg+8v9+iHJZkpm
LxmdAotknllXHdAekV5JthmV7/UBnepq7Gtsr+CJzWWkvQ2S1wT0RE9n4C62
F/BS3gjiDsqbwxllVo/DsB/2wQHLU+rT52rfpKDjif2LriXvGvgqYOu3/rxn
e6e72sMfsCVYrRIttjCgMas4YzWs8XRv6U/piR/wE27Yd5U5u4m+5elfmb06
bEOoydBgPUPykpgu6AaPda70in2X1IC+rZ2OnrcW1sFe2GP3DrJa7ETvgF32
psg8jUVn2Nsqb3oEbPG0R2QmPuPbit4O2zzdQ2axBF+B+WVWVsBKSKNuH/36
fkiPxLPmn6t1LLQ8ffYbIL8HkusG2Ai5xOX49d2XnKr92n9p0n+QbPeVc7+g
O6Dd8pM3ol++A3RZflLnsdx9DIyyOfoPpoQKVA==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlFlIV0EUh+ev9+/cTCuCItLMNZfEjcoUilzKNkktCc1Io6wotcDKh5aH
hLaHFrCCzCijIIJooaeil6gIeiiIgughaNFcsjTLSus7nHkY5pvfnDN37plz
TtzGporGEGNMKyOUMRQ0ZnXAmGFrTHiYMRfgHb4xl1jPhD+yPx69A25Af4pe
ACd7xvSyNw9+jBaBTRbn1aI/Y12I3s9+pPPdju9z9CL4K3oY+mzsy7E/jHaE
UYyNh34UXgwH4WNwCbyBcQWehNaFfzS+UZ7euR29nn0fPgXXwRY+CdfC7/ju
XjiAlo7PSvgT2gjn1MMTsJnBaIT/or1lbw9ssP/Neha4EL8taFsZk7FtYz7D
mAL3YDMXfoTfetad8ER8X7AuhgfYT0TfCY8F9bubYR+tmnFZ7oD9Kr6Rybdq
mHe5c0Tv5JxYuTN+V+E4+DMcwt5+OBfbbtbx8E32Q9EPwHm+vm8F3GM1thLn
RejJvv7jv6DGP5nvFnj61pID29iPZTTBo9jksRePTZaLg8QtnP2f7FXDHjwM
V8EhcBSjAf4T1HeUNy1E+8I6Ab7FfQbhcrgb/g4vhz/A3+Bl8Hv4LPM5xjRf
4y3rqXA2c4rRd2hyMdzkaYwlr5qZM90d5E3FV2wr0fpY58JPOD+DdYvLjTRf
80TePQneLXfmzDkuDmMubyUni9CaXU7KW+e4/JFYleCTwTFVzGWe5mQF++PC
9F+q4NPunicCep/5zB1W4yy5EenrOQfhfDgfTjIaz153/3arZ6ajV3qaq5Kf
EdjXMicaPbcuoL7yNpIbcuYYvhcD6iv18wvfdcxBfFuZ04zm1nGXG5Ij8g2x
lzhLfcndS319E4nvWpeH8r53reaGnPnA6rsnwvesfqsGfgjfcLkt+dzlcviO
1VySvLoPX3e9SPI/3cVB4hGDNh3OY17AiDVah0kB/dZtqyx6iqf1InUx6mpI
9FSpafZyjPaWQ6xTjd4v1dnIGa9cT5Pedc3qt6U3Rnvai6QfDrpaG2J/RUD7
zIDVviS9qIz4vLGaV1J3kvNi14/2A14Dj8CvXZ+UvtHm8nwJ5790vVf6aovT
9wXUV3p4r6sdqaM+uJQ5zmgtSR+S+l3KnONqWXI729MaHLTax6Sfn7eqx2CT
4KmP2Mv9/gMNf7LV
            "]], 
           Polygon[CompressedData["
1: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
evbjzub7XC0+wz6ec5Tf39a19HS8Qdj4Dy8EwfM=
            "]], 
           Polygon[CompressedData["
1:eJxNlGdsjlEUx5+3nrfPRZT4JKiiqIq9qhWrRpGifY1EKdUYFdoSM7ESI8EX
64vEKK0VxB5frMQWEiNWkJDYqkaXze/knA8+/J788z/3nufec+89zXILIwVR
nueNgTD84pMf8rxGzvMaQyzE+57XHN4FnpdJrBO6I34Hp+ML8Dqj68AU9He8
GHRd+Mic4XjDYAh8IXYGLxc9CcZCFd4LvOfwEobauN/oVeiVsASioslDznTI
gPV4Ad5xxjVHv2POCfRJKEP3w7uGvg43oBHrbgiHbfxbxpTbnsrRFehK2AK9
8XpBN/hAzPG/AGrBVNvjK2iCToYU2Mm8B3AfPhHrj/cQPVXqAtNhG14t1jzT
dG10ProAjjL2CByDFsTek2MrOgn9Eb0dXWTr645XavFtUJc8JXizyTMH5sIk
2ICXwZ6zYYLt/VCg/4q3muVYLV20zsmFe8TvWh1TQ7onWX8ezIDttvY3xJuh
E6E1HGTcAdgPr4k1NW8f7A20ZnEhjddj/q6QrnUaa8uDGLxivEK8WU7388by
lDBnN+yx3HFW8+JAYwMYuxrPJ8dA9CC7JyMgYrWQPcr9y0JXk+Ms+hyM4d+j
YbKv/89yGhuH/sa48+gLcAkuwhU7A7kbqYztB/1hLV6Yf6SZjkZnkjPi652Q
WspdvAm3Ar2v8XbWp9CnA70PUt86ch7My5Wzw8t2es5Ss4noq4ydiM6BHnZH
ZF2XA40l2R35bHdR/ncb7gR65pvwNsI6e0d98fo43c8aq2MD9GZ0zWitj9Qp
Ga8HpMAyYjWIfSDneyiFkXgVYX378pa/osvkTUAXp73iN14hsa5O56ShB8Mo
qAxrr3kbaN6IvU+P/8xHJzAnEdpACG9BSHU7aO/0be3AK4Kt9t5iWXdjSPC1
L8jdfgyP4G9Y8z6R83Z69jH2nqTmPZmTAj+tN0rf+4OeJXcX5tg+kqC70/os
tX4lueehW+K1crp2OY8Btt806xEdyd/B1z4jPTTZ1/631Or7R9YZ6H+lbk2l
L0MLp30rYjWvQlcHWl/py9K/45yOD8NyvBUw3u51lZ2X1Pw7+gf4jKth48fZ
O4mSWjuNZVnP7sIaO0Oqr3uUWsp5LEQvhkXwDO9poLX17KzEqy+9BP2DPL2Z
3wc+46fjtbV6S91l33LH0tBjIcvXt73mv3c2GP4Bnk3ZxQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlFlLlVEUhr9jp8P+KiqH1Cyn1EqtrNRMmwczEbroJ/QDspsGsKDAgigl
gowKotkso4EiITOhyYzKBmikwSK7qIzIgubnZe2LxXrOOmuvvb+137WzV9Qu
XxkXBEE9NgjbFw2CKvwp/FkXBN2RIBgbC4Jz8G+4EP6HX6B8FrYS7+J3GvHT
8C14DLyK9aXk1OEvEP9DfBLxjfx+CHcS24A1wwnEx2Gv4RfEwjAIvsETif3A
L6bOL3wRv2Ps+YScYeQMEMsnlkEsE/tKfDP1y8hfix9OzndyCsgZjXXAB8m5
iP2FJxPLxp7DD/3aJ/AdeAs8izpN+NsR43v4IeyzEH4LH8fK4TP4JOq04Buc
/Va8Ff8Iq4B78DnkvMG/dFZLNbX3g4j1pJt4JjlP4btwOnwfvglnwc/gHjgj
Zmu64CnwYM702Nm3KOeGsz7PpX4jvo/YHPgKPj3O+vWFnFzye4m9Uj+c9Vq9
0rfo7mpZ2+w1oDv96ayf6nk0tB7qTiOh3a+0kYpdhg+QOzbOdLKXOoe8TqSH
MnJy+W8R60rgFLgArsEK4Api4/GVrM3BLyNeiJ8Vs/OrblFo36Hf0+BynzOb
nAFn+pkA18HH4Hjtg7XD+4kd8VqVbvOwT/AH9c3ZvSbqDNg8zrAzantqr35n
8X5y3sOfI8Yf4RkxO+/80O4lCsfDo7w2tpJz0pmeNFMutFmSDov8PSYSq8by
4TZpWPU4wy64zc+dzjKV/BH4NHKnwSPVF/hDxO5ds1RMPJn4BO3j51d6nuH7
vyQ0DUjLe5zp9SS23bM0vJ78meRUw+f93eWxtsp/1wnyGp2dU+fJCO1sOk8m
PD1m83s0atrWfF31Gpa2O5zNvuaiCS7x3y4NSP+am0vEy/2+lfw/VNoJrL/t
1K0J7N5TvPZWO5t36X2dM01q9tfAyf7M25z1R9qroOYPZ++J3hxpMlV6I17m
NSntaa36s4Pcw+y7VLMfNf18JN4rXUVt7SR/L/FwNryJ/456HWb5Gb+uc8ZZ
f3RPDf7NqY/aO6y3Lim0GdadSs85fmZ3643y76e0WhqzeWkhN8FrZrivqbP1
+f2LiXdGTLfS/Dtna/V+FrPXNX/vmhPVUk3pcLr/lnRy6v1M6d3+DzKwtXQ=

            "]], 
           Polygon[CompressedData["
1:eJxFl+m7VmMUxvd+bae9FaVJSYmkjJlKqWiQaPDBn+Cb+TJWByUlpUgz0uyQ
5nmklBIahBJCptKAToWklPtn3S4f7vddz7Setdazpn3BnQ/ccX8pSZIaaZJk
+n9ZPy8JVxZJ0kKYlyfJZq1tEuaI3iTsEP2Z8IHor4RvRd+os8N0brrGSzW+
QeP+Gr+Zxxz008II4aYkeMDrFeFl4VXNTxBm5HGGvQOyuIO7tgsb8hi/L2y0
LBM4K0wSJguLhEQKtdPfEJ1vLR0W6Ox8oVURd/0gulMSd76Shc7oep7OzcxD
Bu4eKMwXvSUNG8zz3Z+I/tAyvC5UWEfkfsNzb5rPeOuIbhOzsOFsYW4e/M7V
vdV171nCOaK/w57IKPwoNNbc+cKFQhPhWsba20i4poh3ukK4SrjagGaNPXX1
X0eoJ9QXLhcuE6ZJltdsc+xQXXM1hFmiZwoti7BXC98B34almMOWtySxF3nq
aL6Lxi3LgveZGt+axB1DheeEL6XLTuGAsF/4RfgVu2VxFh7o95rmptmm2HGY
eey0r00VPUW4WHubFSHrDOG6ImSeaJ3Q5ewi9k4WmhZx5hKhuW2ALbB5XduG
t0CmI9LvcBqyNrHt38hC1qqizxCqoaffBNlrl+Kt2HuB8HoWZ9qIXpiGD+KL
T4lnP6GP1sqFzeiltetlg2esJ7b6WvhGeEf4NA2fWy36izzsW03YIfpjYauw
TdhuQD8rXoOzOL/B8fmUxms1XiOsE9bnYcO64nVzErbtJ/QVVmhtpfCY6Ed9
7l3H10JhsbDE8nwuzNGeuT77pLA8Dx5vC2/lITs6fGYZkY34XOU9rDWS/3xi
ndjD3n3CXvvMAYO3OZTGGnmC3ELMfOe4ZQ76e8cQsbQbf9OZn/Rfqf+20vd5
y4yvYlN02SMcTGPvbo/JVeSsi8tCp+WWeZVl3KX1b9KQHdt/KgzK4g2gd/q+
QbblI1m8wVrrxV0/OyaWCiXJkpbCvkP8jgtt+8Hmu8Dv0Mp+f30R/tWXd8LX
dF/vLHyNOWh8jpjIxLtzErHyPHy1v6XGtaXfM7ylxrOFAaJHC6PyeFPelrmn
hYF57B2MrwnPCUOd7w7o7H7hJdE36b4bhU5CZ2EQuS+NOziPzbDd18JHeext
L3T0GXI8efZF1w54jssjp463bLN09gn7HTF5TOM/04jVkVofYT3GGNSnJWms
DRde8J6R9vmtrl/9zBPey/zu7OHs4jTOjjHvvo4d+LxouZgfZn3npSEn8mOb
fcJY60YtGZ6FjtgAW5ATNvvOZY4hfI71LY4RbMedyIpOY/wWs21f3uRv4UQe
OZBc2E42aaD3P1e4oQhfbJVEfV/je9aLfs/5Bv+jlu5y7CLLujT2sJdcvdj2
rHCcc5acQ+6B5ybXT3IOgKamvpdH7aEWNy5FDarIIhfVL4Uf9Ld+29KI8Qrb
H32puY9n4bv48FSNa5J/dfZCcnIRPOHNHGu8ZZskdECXqfZ/dEAXaj6xujGN
XuBPvxc+fTwPGba5H/kvr9CfkCPIFeTuKrorL0UOZ89290vsfVJ4wjHZz+8y
SbioiBpFrvvF+YfcwBqxWrUUe6il7ZO4g7uSInIhObEkeqzlJ8ed0vofefga
OqALMiFbIezKI+dj76NaP5nHmUrnV3jDE97UxNNF/671vfZfeI+w31IT/403
93fEH30H/VVHjU9pnGtcrjN98qjp1HbGG+xvvWybtWnkMGxU7rxFnzfRY95v
ehq1FF6987ALPKFXp2Ej5uD5mPeVm8dbafCA1730DknEzLOO3ZmOVWIYGamd
yFjuPEdsEdPE9l30QFqv0Lg//ojPp6EDukz0++E/5Ktejg/i59E88jK5+sc0
+lgAvTuNnvY2+ha9VTOhm3u9mqJrlaLPq+d895fQQPQ48euQxJ4r3OvQK1Df
6HngAa/mQo8ifKqq+wn2NisLfXlj3po35C25o557y1rud+gxkRFZ9whT8ojZ
+s4v5HBkQrbjQkPnddbIQTeLbqf7uifRI7Vx3wpveip6y2XuD7EBtjjL/JCH
XI/vkTsL92VH7fP4+jHhPr8xb0utmu6+jLrUoYierbbt2cg1BxmRrYvwkPY+
KMzKo2/v4rXWkrtNWdDoclsSc/Cm96OOcQc6ozsxdo3W/7JcJ5ybq9q+xAyx
dNLz5Gpi85h1Oe4zA5zf8dl7ssDdWdTkAd6Hr+Fz5I4TnpvkPhidm7hfxxYL
s5AdHdq5byUHt3fdbmofae7eubt9CN/pKdzu/xU6s9J9eVPvvVS4VegqLNHa
UmGM/ZN8Qq+NDbHbIs0vdqwTE8QBMd/Tdy3P4o5G9r+a/mbiG4bvjHnCfNe3
tsIC68a3LDFBLPAdQ09Fb8U3Iv0U8jV3fN3i/p8+bLRl7eH1bknIgA7QzHH2
IDWaWpLG9yM9Kbmz0r0mvOjtRmXBs75jlrg4r4g7mOc7BH1Oc84l15YVcY6c
ShzyncJbk3PINbx5Ddc4alstn8O22Bi9yzw3zrYgB1cp4puX3FzF97DGXFaE
DGXeN9z1nRpJrzjH9Zye4eEsaiy1tqvG4zVOi//rBnzQDR2QHR3vzyImicUh
2EpYkYYNseUR4XAe33R82/0memUae9j7m/ewNsvgW5Q9rCETMTvbslbm8R18
2Oe4g+/YSt99yHuOmPc/TvRWMA==
            "]], 
           Polygon[CompressedData["
1:eJxNlFlvTlEUhs/Xnn7OMbaKTrQ6q9ZcYyWEUEO4cOEH+AHKhSKIeZ5JjDHT
UlNbaYlqTaVKtAShZiVoQiRCxVD1rKx14eLJefOutdfeZ+0hcUbetJkhjuNM
hzAY4TtOLEYMdINBQccZjJcNI9C98Yaie6G/BRznu+c4zfAD0vHToDdE2dgP
+J/IS0V/RDfBHLiBVw2XIIrYObxSyES34JWhx1MnnTppkAxDiFXgX4QquE9e
D7zR5I2CsZBieXmu48yEteSdIK8L3mN0e+LtwIW+eHfxnhBPQNeh62Eu4/Lh
usVWojdana7kbUJvhlj0LbzD6CNwFGrgEd5DuGfrm834WbDA1fxT5IzEz2QN
U1lzBf4laIv2rbffyWvv635IL7PxctAjIcf2YTJ6iq81JBaNd5Q6JVAK8Xid
8PqTn4DuaT0aA+MgVfYyqH1OMZ2LnmB7nYE3ET3J17lybcxwYmXUL4ciOAEX
XM3Ptv3PgCxbU7bNH44egE5EJ/n6jcAbiHeM8QUwzNfzlWP9GS61rB9yxn7C
LzgE7/E+wGWIkZ5Ac0DjLfAXujM+DnrYXDL/ZubZBOl2hqXnHXztd4bV6Iju
jC5AL6DOQlgE+XL2bL556Pl2nivxooManwt90H/xXOq0Ac/X9f3A+y1rtDli
IcbXdYbbXn1i/BfiaehtrHM7fMVLID44qP2WvmfZXQkwNtTXuSJl3dAFguT3
IydCalsszM693LM/jG2lruNrjUb0G3gHn+3OHkQfsH5X2T/GQW1Az3sBFMIr
8KndFt4SS7H71IDuib4n9xVWsO7lrs4l78JG9HP0M3gp8+MlBVW/sLqNeMl4
5Z6+C1nW2/PW51Z0KPOGhKgn9/aavDE2v9ztCDlj6Ctw1fa0xt6QeLnH6Fq4
CXV49fAMEondxnuAXmLnRs6P1K62/Kf//eNTG/MA/RD2wz5P+1hpb90TT/dm
L3VOwxlX35Qi4t2Ib0FvlbMrcwe0v0VwEnZaP6S/u9F74LSnb0qs7ctZdLGn
3zirUWL17ti/1Zm3UvbE07NeiLcKHYk+ji6WWubJO7oG1ts65R3cYfsleyPr
2mXxdbBB1mv/s5r/WwU7XD1z8s4vg6We7ovcsRU2r6xB7tliWOLpmx1m51j6
1uDpvE3kfYTXdl7+Aemg1hg=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlGtoj3EUx589/vvnmUuEN0osKS/cvfCKmbFh2N/YZjf+29hmL1wako3C
KLc0NUaxuWus8EKU5JZyqVF7MZRCLZfMG7El5fPtnBen8/19n/Oc3zm/c0mv
3Jy/KQyCoAkZhDRzKEXXobuiIGhAr4oHQTd4N7gAXIacBP+CO4guwf4wehH8
InQD/KdYEBQF9m8eshF+K/whJAHOgXuKzQpsutCVnDvgx6bBgWvAd+QfyQNn
wx0BrwQvjttd2eB8uA/IAfAauE8eUzG4RRr/X/Gf5NzGeQz+t6O3IQ/kD74e
fB/8EbvV2Peg18Gfgx+N/XDkJrgaLhG3t6nH/g92FdjHUoNgoeeegH+PNIGL
4MqRU+DfcKXgo+Af4BH8s55/a+He4icBfonO4rwQmzxsjiL73Y/epBa8BW5+
3N7tCfaX4S4hQ4ixAv4KeBi4BLvp4Ay4IvA08DzwKL7dDu3ef/y/Fj9DiWWJ
7OBbsF0ProQfnGq+LyIR/3WGZq86ZWIzA12FfTu6HP4s+rS/eYv/p97o454F
2M/kvCGyWl8HT8BnFfgGOD3NbGaB67wWqssjcAEyFTyX7xO9Foo56Xkpx0z3
Xwu31u2V7+zQfFbD7fHeUy9N9neoAU8C3/L6qu7KI8VjU5zjwD+J5xi4LzKf
+eT1Gq6U8xSPbaT7kc8Nntf4NOsN1XQXtsV6E9UssjdfAz4PXhq3bxfAy8BJ
cJvXUHfNCU2EdX+uYkWfxWY5uALc7v2s3n4Mfuf9/A2d4bVQTbp9NjWjjT5f
mkHlsQw+B93sM6U50rzsQJ5F9q/iP+N9qB6oiWy+NC8x8s1XXvjpjVleyrE1
sv5U/6jvEr4T7kVmL/8PwSU+I7fAm0OLU7tAS6owsJk/gZSBj4SWeyW6M7I5
0ptclc/Qci/UPtMOC6y/c/1tr/k76906wLn+tlmh1ToJTkm1mVXdb0fmSz51
n+ZUtjvVb+BW8B+9md+tHfXFd2YheI/PyD70G/hG+YLvj9leiqfZXtWuGIhs
b8jn38hmXHP9CrzXd6D2p2ZT315EVledn4M/+96W/16/S3v7re8T9YNiVjwD
MdvP2i13+X7cd5d2aU9kcSt+1UXv/T2y2db+7wf/B+5mvg0=
            "]], 
           Polygon[CompressedData["
1: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
ibeJ2a1T5EkeMzOz87qYY7dELv0H++V20g==
            "]], 
           Polygon[CompressedData["
1:eJwtlVlsTlEQx2/rc5NzI3YSQqglPNgfeFJbq0XpQr+2lGppawktFbvGUhVK
7MuDpUWoWmKJLURifUCCaEIJiSUltT3Yqpb4TWYefvn+/c+5586ZO3MalVOQ
MjfS87wwNIYfzvO+w0/YQ2Cy73mH0RPR1SHPew1v4B7chX3EsojVoD+hP8Jn
2IQ3iWd3onfIXpCONwqvdeB5+9FT0W3QbeEt8TcwAW85sVr0dShCJ+PdQN+E
q3AFrsECi/1C77Zcf6P/QIW9bzTeQfQhKIdUvDDkwFhiz8n7GdTBGryNTveQ
s0+RvfEbYAveZtkTby2xregMdCl6A6w37wDst3dl4yX4WqO9FpuKNwYvHlIs
F8mpzKmXjF6FLoG18AHqnNZ2I7GJrNmAXg9xtr7MdBK6GL3S6R7zYCZeErEi
qResg1IYaetln1Sr+SP0Y6iGxbAIlkIMsRGsCUMxerXkCO8tvgSWQSxejK96
DloaayTE4tXj7UJn2vdqgDuwEC8Fr5Yav7Pekh4bL/tEak98g69Oe3O37ZGL
ng55MABvuPXSAXQ9zzemmX0I4TUC32LScxNs7wc8+9DpuQthBl6ir3WbD5kw
CQbj9ZZ+kDXos+ie7NeM/ZtDPt4ZvO54PQKNnbUZ+EIuEayJhCyne0Szvo/k
gh6C7oseBAPNS4QE6ROpu9V+Gl6O03P3xxvm67oYq3kSOtnpb6zVPAU9HlqS
T4tA85TcWwV63kJ0AeTDOGIX8M7DJauFeP/I/y80If/TeE0D7Z1E9HLWrXDa
czdZcyOkefYjNpQ1t/n7FjwI6fpSO6+cPU3mR+4VyLdn5EwzpGdtfjPlDpG1
dm9scjqfaeiSSJ3HMzYXctdIzc9BZ3I8hXcSqmTWiV3G3yIzCrNsJqLtu6YS
CzvN6Sm5PgnpPSN3z6uQ7nccPY31Uegu0B7aQUeLyTskl+3obTKTNqtH7X6U
ma9EH7P6XnSa00zruQy7V17ivYLXTt91Ai+XmKP+AbxzejfKzK6wGZQcOkAn
Wy95So3kPqsh/gyeQwRxL9CZkPs3y9fe7oWOg3irRbrVV5554TSnPF+/f1ee
7RZor1fafSZ3XBX6uNPfbLtbT6JPwX04gpftay9JT8n/gAq8cthnuTQLtL/y
bJ6kZ8N2TrmTnsj3cdoj/W3mZ6Fnw3+h2dxh
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlFlsTlEQx2++z/0StzxYEpWgRG3VEkspia08WR4I0oREg5KqLqpVtZRS
aqldRPAgIRKReLATRCSW2ELFFrHHFlEklmgJv39mHk7md//3zDlzZuacLjOL
JxXFgiCoYcQZJYkguIkwOQqCWrgtYh28Ge4PN8KjwyCoZO4U7Fr0Nugb0bfC
S9Gnoy+Dv7LODvQq+C+8B66EP8K18DZ4AL6/4cXwB/QauDdaGuMN3AFbyprD
fK/WfF9B/8TIgndoT8YXfLejbfE1m+Bx+CzBNye0syjOa+jr4I7wHbgO7g5/
gTfC3eAGuAJ+z5qr4PGhzXnp8SvOJfA57FnGSHg9egpzHnjMWr8e3oC+iBgm
hMaacw/9JCMJXo12Bm4B18B/WK+JsRstE59CfNOxn/kewpydzLkMN4NXwZfg
OFytfRgv8V2GVg6/gJfCPfEvYZ1Bof1/xajyPHTC977nTfX9BV9gxOCVaGHc
4m+OTY9bbd7y/wNjMLydOTPgJ6xZlrA9tNcKeBOjAp6IFkuy+FWvi8wtCCx/
8tMZn2EzWec4Np85ffzsw0PT8uA72FPuqzX+eQ8ohnrXb8jfc6t8DlWu9Q/+
GbPYGlQ/75mxXkf5pmpP1YPvbPQf2GL02zHrMfXzuMh6+xs8AS5KWA+MgefD
p+FR8AL4FjwFLvD6rklYLZT/ssjOrDPqPsxGXx5Yfdd7Xe5GlsMM+H1keVQ+
c7ED48b9sMmMssBiUs80Yvd6b6ufn8Od/R6pN3t4TVOx7Rnlgd2rDHzf4VvN
/JZ8L0Rvhc3j+7HXdw4ced/mwg/RSxN2XuUpPbI3RGdPg19j57POc+wsvh9h
F/K/2N+ZXv6e6J25Dk/zvTQnCz4Bz0vYe6DeO4B2xHte/ZmM71zW74rt57XW
/OUJu0f7IrtTen/2q788fvXV1ZidUWsfi6zXdaf0Xi1AH6o8R95zaDkev86r
/lEfbUU77PdFPX/U76buY6H3wzB/W5Tvp/7W6W2p9J5R/O1C6yX13ojIYlJs
2aGdW3fvoN9r5bI4Mk29cSiyfKr3J0VWx3x8U0J7E/QOlEaWE/XGLniq1055
O+/1Vn/qnVdPfUf763dc/ab3UL1RgdbX66J7+h8AXMqi
            "]], 
           Polygon[CompressedData["
1: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
0Gf+B/maO9A=
            "]], 
           Polygon[CompressedData["
1:eJwtlWtMz2EUx3+q/388sblNZZOZW1SIilxyf+PSVhQy18IqyjWhcr+X5DYb
Nq9sGBuhjCzmNpeiyK1y28hQTJgIn7PnvPhs351znud3nuec8/y6zE2LSfVw
HCcOXDDSOE4hhkVuxxmFHg050N4TTUAsxEFn8IeV+N4RH4zeie5InB+0hS3s
8QFbLexBD8L20di4duitbrt3LviwvgMM0+8vxHcAvR8Owm9sWdiSoABdCmXQ
F18apMJSeIltBTHj0D/RP6AOVmPbqzn8w9fM23E8vG3+6bAK3hO3kpjN0Iq4
NtAaUvD5kZsvdIVK4mZj6wUV6HK4A2msW4BtPmxEe7M2CT3H2Pil2J4Ql4CO
gWiYDHd17Rr0W/QbqNFzJBobvwz9FNs8dLKx+27C1lLz24eO8LRnSiDHRJf9
nuQah38KTIXVUIWtGj7AKmIasfVnbR76N/oPLEc/07gq/a7UcCBxTei/xt6j
xA/Alo9vBt+cCX2hD0SC8bT3sV77RO53g9wPfDK2H/Zq7p/RL+A51EB3bDvd
9o4mQSzcY4/Fbqsb0N/hPizBdgPbdbil/SX9twG80KexnYGzMJC8wmEtPg98
xZIf2hN9En3K2PjNer9F6EtwGVKwned7IXJuCJV6YDunvdjPWJ/UX85egD4H
5yGIbwa6bF83Eh/msrnehNs6YzIT49Ff8GeiJ6KjpF+IjYbZLlsDmal66IGe
gG0axEOd3luO2/q/SN0gX+5Z912j9+IirgU0h2v4dkOextfrzBxFN6Gz0YPZ
f4jL7uPDGl/4qnnKW1GETkWPQY/VHpKenY6eCbOMnct6zUHOOQGOQTB75brt
GeWsvbXWUtcg8cNVKNFaeWnODfBNZl17eJf2l8xyBnqT1FFnReZR6lBobE2l
78OwhUKIrs3G9pq1Adoj0ivyNmTo7NTqvhVof9ZsRz9GVxp79wHYekI37V3x
dUbvkFqyV5TL5voDfuns5Onsy9uVjs5EZxmbe63O6Fb0NjikvSNv4WH0EQiX
cxj7NkofDkI/gDJ4qN+XPEvR99UnuW9z2zfsrs6U3HkgDIdIGAEXtabl6E66
Rs7+CK4YOzvrdHZKdD4usOYKFMNg9cucHUefMHbGZL6r4ZX2sPRrhLG5J+uM
yVr5HwzVnIr0v7RM31F5z+KN7a//F2HkqA==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlOtrj2EYx588fk/pKUpKDilF3ggpL8xhlrxQqJ1EzjJnI2yTtrWxaeez
3w6GzQ42+82YYcYOlPBGCUn5Y3y+XdeLu+tzf5/rue/ruu7rvlefvpqVPy8I
ggpGyJiIgmAAGI2D4HEiCFrRUtjPzGfRZ/n+CZ6BZ+AF8Db4PjzMuAMXok3C
KXgSfgbXsE4D69xFq2DcRt+PrUN/iX2DzyB2BL0Hv1F4Cv7r+2qvf/CcxyD/
Rv7txXcankL/6fvq32/wF/efQ3vt64+hvfXYvsLjoe0/7XEqtpvwEFwEX4Fr
2KOavUbQ3jGa4AG0Hr43wJ3Yx4x6+Ba2mm/l2AL+fYL/WXhfbP9OwB/hcnyu
wEfgp9ha/u3D9kWmZ6K34/MAfuJxvmKUxhav5iWxaeJZ+L3X4bfr2qtM6zCq
4RTf60KrWxO2S7nprNGL2es8fADtA/M2fF6gTSln9F9aM7J4zsLnQvM/5Dlq
fhDu9XxzY6u5eulZbLkpx+aErdPFvDe2fVVb1Vi9148+hD4AX4NPwf3wVfh4
bPXJh4/Cbd4/HdjdzFuwL/i+B27VuUa2jv7NQUtnnIB70MYjPze0HYzjYrTL
xFHGmkXYNPRj6I/Qn3vdRrAPmWdjN/K9LraaPldOjF3wKrRGj2cMLSM0fTla
J/N0eGVsuu7drYSddQs8nLBzVM1/xBanapWn9Twv5aj+VK+tQ0t6LZTvYr+P
ycjizIEjtLveA+rhRXCa39luz2U+2hLGdrhd58zIgkO0QbgQXqNe9XuxNrbe
mIS/w92MWq/DLrjZc9ddU81ex3Yv7pFjGbYYrSqw+PQm6N247r2tM03is1Bn
4/FU+frq1djjVI793g/ZaCWh9VKB1vO9WhIWs+K/jM/J0PQz2I7IzvpSwvo2
D22v56s1LsKbvTfUA5u8H9Qbh/3sMrF7nDN8zZ3YFR67dH1X/6u3U177UvTc
0N5MvRXX/E24g35DPRDaO6P6/vH3dgJ9q+egHt7i/ay+1Xskf/no7BTXer2H
zJOBvYH1fi6qSZf34TK0C9jKwPLv9nPfEFuNVCvdw07Payl6pb8bek/+A1Hd
3DI=
            "]], 
           Polygon[CompressedData["
1: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

            "]], 
           Polygon[CompressedData["
1:eJwtlPlLVFEUxx9N86IeLVS0LwRaQXsUlKYWKRT0Q05qq1qWlrsUarS6FOWS
pmVjWm6528yoaS6VitEKRdFO/TF9Dvf88GG+8z3v3XfuveecVUnZnqwplmXF
gRtSHMuqd1mWlz9d0A178HZDwLasamJ70blQiO7Cy0PnQw5kw3ko0tg89Fx4
gN6FNx/tRYehoyBSvWSoQz+zTQ5n1WvGa4KH0E8sk3wyIB/i8UJ45jhkop8Q
P4GOhxg4jXcGcqCNWCxeGjoVkqEZbyleuKyPXoZe7pjnUvBa8OLQhyEIruFd
hVxoJ1Yre4Gn6FK8OnQ6eaXBQl23VnPKQreiE9CJjvlWhLyDtwK9Ei7w3nmI
1v0Uoo+gz6GvoEuhDPbj7YMDmqfsYxA9AMOSD96Qfitb934KnQSLYREskTvV
70uuCzQWoWfRYJvz3Yy3BbbqPkvwitE34Ca8hkkYIzZO7A3aB23oQbwAulfe
hVa8AdvE/VpPVXh30BVQCR/kfblz9ukDP/Rq3Um8Cqrhve5z2DbvfIRxzeEP
+i/8g+8wgveC2A/0T8f8juK9wutj/X63yX8M7xex345Z4yt8gW/6vKzhhzL0
bbwyKIcCOXu8EWJtrNUOLrxjeEchGuqJNeI1SE1rrffreuXou7I/eERsDsyG
GmKhLtM/9Y6pL59+X54r05ro0Xvx6tpN0KJ9LP3Uie6Abr0XuQNZOwQdC3Ew
ndhbx9yfnOME3jt0H/qey5x5jfSxrtMFPdCu9+zTHpCauOWY8wlo/DmxZvJs
cZv6HJLz1HuW+5PzknMbcJs7mNR5Eap5zQAHNsIG2ASH5Axsoy9Lf0AMPMYr
YJ3rbjOPZEaVoKfqOxK30dPkP3h0VmRrf3p1Tsn3ZsIsSINUyIA87f316HWa
k0fvV+Lp0ruQj9dhmzrwaK6Sg1vjDXiNcBE6iV2SnkJ3oyvItxJCHTPfpBcT
iIWhP8MnrU2p61HbzIuDup8snYPFvF8E1W7TYzK/m/BP6kyU2RiBF+6YdRuJ
JaoX6ZgZ36t3H6V1cF/mmdSZekF6HrLPYPRqXUdylXmxDbZrD76U/pH71pyl
fwNoP/TovArWc5PzWINeqzlLXrLODtgJE1qf0t9DUlPwHwCS4/g=
            "]]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0DtSQkEQBdBWBOEpCjwUDFmQiUtwAbIoJBFNFBbgF/yBJirb8BOIBp6p
smrO3JoOurqns9/dO1iKiF367NBcichpUKettik3qLJOS21NZlQos622KksU
2Uq9NM9pUPP+5YcF36kHc9545YUSI4accUqa8bwQccEly95X8pobxjgxcd1y
xz3GiAf5yJQZRbUpM554JuOdDz75SjtzxIBjTtI+9Dj8/68/dZYmRw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DtOQlEUBdBLwhRAfD5AxAJFRJQGcAo0JPKVjxg/ldQChcookMm6XixW
9j37Jqc4peWq95EKIXS58riV7+kQ3njlhYbuWS55YsGNbi5nTHmkrpvIMSOu
zQc7f9lzYd7JH7754ly3kHNmTCnq7mWHNi0iXcbOLEecmHPymCiZiXWxzFOg
mLx1p7LEGeXkT/dgZ58BQ8q6T7lmw5aKrpHchDua1HSXspr6v9cf3HoXMw==

          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0D1SwlAYBdCX6IzoKsAt+FtogQUIDo1LsAM18d9VISYiGrAQ3AZKo7IN
j0Nx5r7v5s2XTCon6XEShRBaPDkcybflEEYMKWjqXuSAZ/o0/u/LnIxHDnU9
+UCXunk9DqFCmQPzmlylxAr7urn3/vLDN7u6DzlhzDsburadHU7ZNJ/JcxJS
tnQX8pIrrtnW3chb7rhnRze185MvZuzpgu+JiFmiqnr1rGDIiJouk3m0+F9/
aBEn/w==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0yQmEcx/F/x8nrhFtwF7QpNl4GxQwLFnqRDXIZyiJ1FbgISiJyUz6m
xWe+8/wWZ57nrNXujpuZiDggn0Rc6mo2YoVlctRtS7rIAvPUbHM6S5aUqm1G
EzJUnF9885knzp172uWRDqe2pt5ywzVHtj3dZYdt9m2vacQb/XR634G+M+SD
Q9tIP/liTMn2rT9M+KVsq/+/lQZXnNjutUWbB85sBS2yyRYXtnXdSKb/6w+/
xiDj
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0yQnEcx+GfjG0UlZfSuAHciE0zpBcZhbCoRRYJ14YN2pDbSDbU3mMs
nvnO/3Nm/ufM2Wp2S525iNjjKRFxb08XIlo0OeFOO7YNjqhzq9VslQqHDLSy
PWCfG+fd+Ygdtrl2XrU5smToajPvnfLDN1fahx3xzhtnWsqdaZY5d16xGbLk
aP/db9dYZ4MLLW8LbFLkUhu785MJX3S0pO9ZZIkUPe3ZsxdeGdLXHuxj4v9/
/QKpjSK+
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0LtOAkEAhtEhGx/ElwEbLyFRqU28IAjurg1qvBZaQKGAUnipURGVsPh4
nA3FyZf5i0lmlnea5UYhhLDKShTCk/4vhTAjY0rfNtE/fvmhZxvrNyO+6No+
9YMhj84zd2ZM6Ti/6xuvvHBvO9czTmlxa6voNltscmHbdece+1w6H2iVQ2pc
2ep6RIMm17ZjjUlIubHF7kxIOeHO1s/fzzMD2vm/6BrrbPBgK2opWvzXHI6l
KpM=
          "]]}, {
         Line[{963, 1743, 1745, 1746, 1467, 1740, 978, 1770, 1471, 1729, 1731,
           1734, 996, 1832, 1482, 1762, 1764, 1767, 1014, 1885, 1494, 1827, 
          1829, 1031}], 
         Line[{967, 1468, 1753, 1755, 1758, 1761, 983, 1799, 1477, 1811, 1813,
           1816, 1001, 1879, 1881, 1882, 1490, 1866, 1018, 1907, 1499, 1926, 
          1928, 1035}], 
         Line[{971, 1786, 1788, 1789, 1476, 1783, 988, 997, 1843, 1845, 1847, 
          1850, 1005, 256, 1898, 1900, 1903, 1024, 1932, 1502, 1938, 1940, 
          1039}], 
         Line[{975, 989, 1817, 1819, 1822, 1826, 993, 1792, 1794, 1795, 1493, 
          1876, 1010, 270, 1851, 1853, 1856, 1028, 1922, 1924, 1925, 1508, 
          1044}], 
         Line[{1029, 1011, 1888, 1886, 1883, 1012, 1765, 1484, 1835, 1833, 
          1830, 994, 1732, 1473, 1773, 1771, 1768, 976, 1738, 1736, 1735, 
          1465, 1741, 961}], 
         Line[{1032, 1019, 1911, 1908, 1904, 1015, 1863, 1860, 1858, 1857, 
          1487, 998, 984, 1804, 1803, 1800, 1796, 980, 158, 1752, 1750, 1747, 
          964}], 
         Line[{1036, 1504, 1936, 1933, 1929, 1021, 1498, 1897, 1895, 1892, 
          1889, 1002, 1486, 1842, 1841, 1839, 1836, 985, 1780, 1777, 1775, 
          1774, 979, 968}], 
         Line[{1041, 1944, 1942, 1941, 1040, 1025, 1501, 1919, 1918, 1916, 
          1913, 1007, 1873, 1870, 1868, 1867, 1006, 990, 1823, 1481, 1810, 
          1808, 1805, 972}], 
         Line[{1047, 1961, 1963, 1964, 1511, 1958, 1062, 1988, 1515, 1947, 
          1949, 1952, 1080, 2050, 1526, 1980, 1982, 1985, 1098, 2103, 1538, 
          2045, 2047, 1115}], 
         Line[{1051, 1512, 1971, 1973, 1976, 1979, 1067, 2017, 1521, 2029, 
          2031, 2034, 1085, 2097, 2099, 2100, 1534, 2084, 1102, 2125, 1543, 
          2144, 2146, 1119}], 
         Line[{1055, 2004, 2006, 2007, 1520, 2001, 1072, 1081, 2061, 2063, 
          2065, 2068, 1089, 391, 2116, 2118, 2121, 1108, 2150, 1546, 2156, 
          2158, 1123}], 
         Line[{1059, 1073, 2035, 2037, 2040, 2044, 1077, 2010, 2012, 2013, 
          1537, 2094, 1094, 405, 2069, 2071, 2074, 1112, 2140, 2142, 2143, 
          1552, 1128}], 
         Line[{1113, 1095, 2106, 2104, 2101, 1096, 1983, 1528, 2053, 2051, 
          2048, 1078, 1950, 1517, 1991, 1989, 1986, 1060, 1956, 1954, 1953, 
          1509, 1959, 1045}], 
         Line[{1116, 1103, 2129, 2126, 2122, 1099, 2081, 2078, 2076, 2075, 
          1531, 1082, 1068, 2022, 2021, 2018, 2014, 1064, 293, 1970, 1968, 
          1965, 1048}], 
         Line[{1120, 1548, 2154, 2151, 2147, 1105, 1542, 2115, 2113, 2110, 
          2107, 1086, 1530, 2060, 2059, 2057, 2054, 1069, 1998, 1995, 1993, 
          1992, 1063, 1052}], 
         Line[{1125, 2162, 2160, 2159, 1124, 1109, 1545, 2137, 2136, 2134, 
          2131, 1091, 2091, 2088, 2086, 2085, 1090, 1074, 2041, 1525, 2028, 
          2026, 2023, 1056}], 
         Line[{1131, 2179, 2181, 2182, 1555, 2176, 1146, 2206, 1559, 2165, 
          2167, 2170, 1164, 2268, 1570, 2198, 2200, 2203, 1182, 2321, 1582, 
          2263, 2265, 1199}], 
         Line[{1135, 1556, 2189, 2191, 2194, 2197, 1151, 2235, 1565, 2247, 
          2249, 2252, 1169, 2315, 2317, 2318, 1578, 2302, 1186, 2343, 1587, 
          2362, 2364, 1203}], 
         Line[{1139, 2222, 2224, 2225, 1564, 2219, 1156, 1165, 2279, 2281, 
          2283, 2286, 1173, 526, 2334, 2336, 2339, 1192, 2368, 1590, 2374, 
          2376, 1207}], 
         Line[{1143, 1157, 2253, 2255, 2258, 2262, 1161, 2228, 2230, 2231, 
          1581, 2312, 1178, 540, 2287, 2289, 2292, 1196, 2358, 2360, 2361, 
          1596, 1212}], 
         Line[{1197, 1179, 2324, 2322, 2319, 1180, 2201, 1572, 2271, 2269, 
          2266, 1162, 2168, 1561, 2209, 2207, 2204, 1144, 2174, 2172, 2171, 
          1553, 2177, 1129}], 
         Line[{1200, 1187, 2347, 2344, 2340, 1183, 2299, 2296, 2294, 2293, 
          1575, 1166, 1152, 2240, 2239, 2236, 2232, 1148, 428, 2188, 2186, 
          2183, 1132}], 
         Line[{1204, 1592, 2372, 2369, 2365, 1189, 1586, 2333, 2331, 2328, 
          2325, 1170, 1574, 2278, 2277, 2275, 2272, 1153, 2216, 2213, 2211, 
          2210, 1147, 1136}], 
         Line[{1209, 2380, 2378, 2377, 1208, 1193, 1589, 2355, 2354, 2352, 
          2349, 1175, 2309, 2306, 2304, 2303, 1174, 1158, 2259, 1569, 2246, 
          2244, 2241, 1140}], 
         Line[{1215, 2397, 2399, 2400, 1599, 2394, 1230, 2424, 1603, 2383, 
          2385, 2388, 1248, 2486, 1614, 2416, 2418, 2421, 1266, 2539, 1626, 
          2481, 2483, 1283}], 
         Line[{1219, 1600, 2407, 2409, 2412, 2415, 1235, 2453, 1609, 2465, 
          2467, 2470, 1253, 2533, 2535, 2536, 1622, 2520, 1270, 2561, 1631, 
          2580, 2582, 1287}], 
         Line[{1223, 2440, 2442, 2443, 1608, 2437, 1240, 1249, 2497, 2499, 
          2501, 2504, 1257, 661, 2552, 2554, 2557, 1276, 2586, 1634, 2592, 
          2594, 1291}], 
         Line[{1227, 1241, 2471, 2473, 2476, 2480, 1245, 2446, 2448, 2449, 
          1625, 2530, 1262, 675, 2505, 2507, 2510, 1280, 2576, 2578, 2579, 
          1640, 1296}], 
         Line[{1281, 1263, 2542, 2540, 2537, 1264, 2419, 1616, 2489, 2487, 
          2484, 1246, 2386, 1605, 2427, 2425, 2422, 1228, 2392, 2390, 2389, 
          1597, 2395, 1213}], 
         Line[{1284, 1271, 2565, 2562, 2558, 1267, 2517, 2514, 2512, 2511, 
          1619, 1250, 1236, 2458, 2457, 2454, 2450, 1232, 563, 2406, 2404, 
          2401, 1216}], 
         Line[{1288, 1636, 2590, 2587, 2583, 1273, 1630, 2551, 2549, 2546, 
          2543, 1254, 1618, 2496, 2495, 2493, 2490, 1237, 2434, 2431, 2429, 
          2428, 1231, 1220}], 
         Line[{1293, 2598, 2596, 2595, 1292, 1277, 1633, 2573, 2572, 2570, 
          2567, 1259, 2527, 2524, 2522, 2521, 1258, 1242, 2477, 1613, 2464, 
          2462, 2459, 1224}], 
         Line[{1299, 2615, 2617, 2618, 1643, 2612, 1314, 2642, 1647, 2601, 
          2603, 2606, 1332, 2704, 1658, 2634, 2636, 2639, 1350, 2757, 1670, 
          2699, 2701, 1367}], 
         Line[{1303, 1644, 2625, 2627, 2630, 2633, 1319, 2671, 1653, 2683, 
          2685, 2688, 1337, 2751, 2753, 2754, 1666, 2738, 1354, 2779, 1675, 
          2798, 2800, 1371}], 
         Line[{1307, 2658, 2660, 2661, 1652, 2655, 1324, 1333, 2715, 2717, 
          2719, 2722, 1341, 796, 2770, 2772, 2775, 1360, 2804, 1678, 2810, 
          2812, 1375}], 
         Line[{1311, 1325, 2689, 2691, 2694, 2698, 1329, 2664, 2666, 2667, 
          1669, 2748, 1346, 810, 2723, 2725, 2728, 1364, 2794, 2796, 2797, 
          1684, 1380}], 
         Line[{1365, 1347, 2760, 2758, 2755, 1348, 2637, 1660, 2707, 2705, 
          2702, 1330, 2604, 1649, 2645, 2643, 2640, 1312, 2610, 2608, 2607, 
          1641, 2613, 1297}], 
         Line[{1368, 1355, 2783, 2780, 2776, 1351, 2735, 2732, 2730, 2729, 
          1663, 1334, 1320, 2676, 2675, 2672, 2668, 1316, 698, 2624, 2622, 
          2619, 1300}], 
         Line[{1372, 1680, 2808, 2805, 2801, 1357, 1674, 2769, 2767, 2764, 
          2761, 1338, 1662, 2714, 2713, 2711, 2708, 1321, 2652, 2649, 2647, 
          2646, 1315, 1304}], 
         Line[{1377, 2816, 2814, 2813, 1376, 1361, 1677, 2791, 2790, 2788, 
          2785, 1343, 2745, 2742, 2740, 2739, 1342, 1326, 2695, 1657, 2682, 
          2680, 2677, 1308}], 
         Line[{1383, 2833, 2835, 2836, 1687, 2830, 1398, 2860, 1691, 2819, 
          2821, 2824, 1416, 2922, 1702, 2852, 2854, 2857, 1434, 2975, 1714, 
          2917, 2919, 1451}], 
         Line[{1387, 1688, 2843, 2845, 2848, 2851, 1403, 2889, 1697, 2901, 
          2903, 2906, 1421, 2969, 2971, 2972, 1710, 2956, 1438, 2997, 1719, 
          3016, 3018, 1455}], 
         Line[{1391, 2876, 2878, 2879, 1696, 2873, 1408, 1417, 2933, 2935, 
          2937, 2940, 1425, 931, 2988, 2990, 2993, 1444, 3022, 1722, 3028, 
          3030, 1459}], 
         Line[{1395, 1409, 2907, 2909, 2912, 2916, 1413, 2882, 2884, 2885, 
          1713, 2966, 1430, 945, 2941, 2943, 2946, 1448, 3012, 3014, 3015, 
          1728, 1464}], 
         Line[{1449, 1431, 2978, 2976, 2973, 1432, 2855, 1704, 2925, 2923, 
          2920, 1414, 2822, 1693, 2863, 2861, 2858, 1396, 2828, 2826, 2825, 
          1685, 2831, 1381}], 
         Line[{1452, 1439, 3001, 2998, 2994, 1435, 2953, 2950, 2948, 2947, 
          1707, 1418, 1404, 2894, 2893, 2890, 2886, 1400, 833, 2842, 2840, 
          2837, 1384}], 
         Line[{1456, 1724, 3026, 3023, 3019, 1441, 1718, 2987, 2985, 2982, 
          2979, 1422, 1706, 2932, 2931, 2929, 2926, 1405, 2870, 2867, 2865, 
          2864, 1399, 1388}], 
         Line[{1461, 3034, 3032, 3031, 1460, 1445, 1721, 3009, 3008, 3006, 
          3003, 1427, 2963, 2960, 2958, 2957, 1426, 1410, 2913, 1701, 2900, 
          2898, 2895, 1392}], 
         Line[{962, 1742, 1744, 1466, 1737, 1739, 977, 1769, 1772, 1472, 1730,
           1733, 995, 1831, 1834, 1483, 1763, 1766, 1013, 1884, 1887, 1495, 
          1828, 1030}], 
         Line[{965, 1748, 1751, 1470, 1756, 1759, 981, 1797, 1801, 196, 1814, 
          999, 1877, 1488, 1859, 1861, 1864, 1016, 1905, 1909, 1912, 1020, 
          1033}], 
         Line[{966, 1749, 1469, 1754, 1757, 1760, 982, 1798, 1802, 1478, 1812,
           1815, 1000, 1878, 1880, 1489, 1862, 1865, 1017, 1906, 1910, 1500, 
          1927, 1034}], 
         Line[{969, 1784, 1474, 1776, 1778, 1781, 986, 1837, 1840, 224, 1848, 
          1003, 1890, 1893, 1896, 1497, 1901, 1022, 1930, 1934, 1937, 1505, 
          1037}], 
         Line[{970, 1785, 1787, 1475, 1779, 1782, 987, 1838, 1485, 1844, 1846,
           1849, 1004, 1891, 1894, 1496, 1899, 1902, 1023, 1931, 1935, 1503, 
          1939, 1038}], 
         Line[{973, 1806, 1809, 1480, 1820, 1824, 991, 1790, 1491, 1869, 1871,
           1874, 1008, 1914, 1917, 272, 1854, 1026, 1920, 1506, 1943, 1945, 
          1042}], 
         Line[{974, 1807, 1479, 1818, 1821, 1825, 992, 1791, 1793, 1492, 1872,
           1875, 1009, 1915, 271, 1852, 1855, 1027, 1921, 1923, 1507, 1946, 
          1043}], 
         Line[{1046, 1960, 1962, 1510, 1955, 1957, 1061, 1987, 1990, 1516, 
          1948, 1951, 1079, 2049, 2052, 1527, 1981, 1984, 1097, 2102, 2105, 
          1539, 2046, 1114}], 
         Line[{1049, 1966, 1969, 1514, 1974, 1977, 1065, 2015, 2019, 331, 
          2032, 1083, 2095, 1532, 2077, 2079, 2082, 1100, 2123, 2127, 2130, 
          1104, 1117}], 
         Line[{1050, 1967, 1513, 1972, 1975, 1978, 1066, 2016, 2020, 1522, 
          2030, 2033, 1084, 2096, 2098, 1533, 2080, 2083, 1101, 2124, 2128, 
          1544, 2145, 1118}], 
         Line[{1053, 2002, 1518, 1994, 1996, 1999, 1070, 2055, 2058, 359, 
          2066, 1087, 2108, 2111, 2114, 1541, 2119, 1106, 2148, 2152, 2155, 
          1549, 1121}], 
         Line[{1054, 2003, 2005, 1519, 1997, 2000, 1071, 2056, 1529, 2062, 
          2064, 2067, 1088, 2109, 2112, 1540, 2117, 2120, 1107, 2149, 2153, 
          1547, 2157, 1122}], 
         Line[{1057, 2024, 2027, 1524, 2038, 2042, 1075, 2008, 1535, 2087, 
          2089, 2092, 1092, 2132, 2135, 407, 2072, 1110, 2138, 1550, 2161, 
          2163, 1126}], 
         Line[{1058, 2025, 1523, 2036, 2039, 2043, 1076, 2009, 2011, 1536, 
          2090, 2093, 1093, 2133, 406, 2070, 2073, 1111, 2139, 2141, 1551, 
          2164, 1127}], 
         Line[{1130, 2178, 2180, 1554, 2173, 2175, 1145, 2205, 2208, 1560, 
          2166, 2169, 1163, 2267, 2270, 1571, 2199, 2202, 1181, 2320, 2323, 
          1583, 2264, 1198}], 
         Line[{1133, 2184, 2187, 1558, 2192, 2195, 1149, 2233, 2237, 466, 
          2250, 1167, 2313, 1576, 2295, 2297, 2300, 1184, 2341, 2345, 2348, 
          1188, 1201}], 
         Line[{1134, 2185, 1557, 2190, 2193, 2196, 1150, 2234, 2238, 1566, 
          2248, 2251, 1168, 2314, 2316, 1577, 2298, 2301, 1185, 2342, 2346, 
          1588, 2363, 1202}], 
         Line[{1137, 2220, 1562, 2212, 2214, 2217, 1154, 2273, 2276, 494, 
          2284, 1171, 2326, 2329, 2332, 1585, 2337, 1190, 2366, 2370, 2373, 
          1593, 1205}], 
         Line[{1138, 2221, 2223, 1563, 2215, 2218, 1155, 2274, 1573, 2280, 
          2282, 2285, 1172, 2327, 2330, 1584, 2335, 2338, 1191, 2367, 2371, 
          1591, 2375, 1206}], 
         Line[{1141, 2242, 2245, 1568, 2256, 2260, 1159, 2226, 1579, 2305, 
          2307, 2310, 1176, 2350, 2353, 542, 2290, 1194, 2356, 1594, 2379, 
          2381, 1210}], 
         Line[{1142, 2243, 1567, 2254, 2257, 2261, 1160, 2227, 2229, 1580, 
          2308, 2311, 1177, 2351, 541, 2288, 2291, 1195, 2357, 2359, 1595, 
          2382, 1211}], 
         Line[{1214, 2396, 2398, 1598, 2391, 2393, 1229, 2423, 2426, 1604, 
          2384, 2387, 1247, 2485, 2488, 1615, 2417, 2420, 1265, 2538, 2541, 
          1627, 2482, 1282}], 
         Line[{1217, 2402, 2405, 1602, 2410, 2413, 1233, 2451, 2455, 601, 
          2468, 1251, 2531, 1620, 2513, 2515, 2518, 1268, 2559, 2563, 2566, 
          1272, 1285}], 
         Line[{1218, 2403, 1601, 2408, 2411, 2414, 1234, 2452, 2456, 1610, 
          2466, 2469, 1252, 2532, 2534, 1621, 2516, 2519, 1269, 2560, 2564, 
          1632, 2581, 1286}], 
         Line[{1221, 2438, 1606, 2430, 2432, 2435, 1238, 2491, 2494, 629, 
          2502, 1255, 2544, 2547, 2550, 1629, 2555, 1274, 2584, 2588, 2591, 
          1637, 1289}], 
         Line[{1222, 2439, 2441, 1607, 2433, 2436, 1239, 2492, 1617, 2498, 
          2500, 2503, 1256, 2545, 2548, 1628, 2553, 2556, 1275, 2585, 2589, 
          1635, 2593, 1290}], 
         Line[{1225, 2460, 2463, 1612, 2474, 2478, 1243, 2444, 1623, 2523, 
          2525, 2528, 1260, 2568, 2571, 677, 2508, 1278, 2574, 1638, 2597, 
          2599, 1294}], 
         Line[{1226, 2461, 1611, 2472, 2475, 2479, 1244, 2445, 2447, 1624, 
          2526, 2529, 1261, 2569, 676, 2506, 2509, 1279, 2575, 2577, 1639, 
          2600, 1295}], 
         Line[{1298, 2614, 2616, 1642, 2609, 2611, 1313, 2641, 2644, 1648, 
          2602, 2605, 1331, 2703, 2706, 1659, 2635, 2638, 1349, 2756, 2759, 
          1671, 2700, 1366}], 
         Line[{1301, 2620, 2623, 1646, 2628, 2631, 1317, 2669, 2673, 736, 
          2686, 1335, 2749, 1664, 2731, 2733, 2736, 1352, 2777, 2781, 2784, 
          1356, 1369}], 
         Line[{1302, 2621, 1645, 2626, 2629, 2632, 1318, 2670, 2674, 1654, 
          2684, 2687, 1336, 2750, 2752, 1665, 2734, 2737, 1353, 2778, 2782, 
          1676, 2799, 1370}], 
         Line[{1305, 2656, 1650, 2648, 2650, 2653, 1322, 2709, 2712, 764, 
          2720, 1339, 2762, 2765, 2768, 1673, 2773, 1358, 2802, 2806, 2809, 
          1681, 1373}], 
         Line[{1306, 2657, 2659, 1651, 2651, 2654, 1323, 2710, 1661, 2716, 
          2718, 2721, 1340, 2763, 2766, 1672, 2771, 2774, 1359, 2803, 2807, 
          1679, 2811, 1374}], 
         Line[{1309, 2678, 2681, 1656, 2692, 2696, 1327, 2662, 1667, 2741, 
          2743, 2746, 1344, 2786, 2789, 812, 2726, 1362, 2792, 1682, 2815, 
          2817, 1378}], 
         Line[{1310, 2679, 1655, 2690, 2693, 2697, 1328, 2663, 2665, 1668, 
          2744, 2747, 1345, 2787, 811, 2724, 2727, 1363, 2793, 2795, 1683, 
          2818, 1379}], 
         Line[{1382, 2832, 2834, 1686, 2827, 2829, 1397, 2859, 2862, 1692, 
          2820, 2823, 1415, 2921, 2924, 1703, 2853, 2856, 1433, 2974, 2977, 
          1715, 2918, 1450}], 
         Line[{1385, 2838, 2841, 1690, 2846, 2849, 1401, 2887, 2891, 871, 
          2904, 1419, 2967, 1708, 2949, 2951, 2954, 1436, 2995, 2999, 3002, 
          1440, 1453}], 
         Line[{1386, 2839, 1689, 2844, 2847, 2850, 1402, 2888, 2892, 1698, 
          2902, 2905, 1420, 2968, 2970, 1709, 2952, 2955, 1437, 2996, 3000, 
          1720, 3017, 1454}], 
         Line[{1389, 2874, 1694, 2866, 2868, 2871, 1406, 2927, 2930, 899, 
          2938, 1423, 2980, 2983, 2986, 1717, 2991, 1442, 3020, 3024, 3027, 
          1725, 1457}], 
         Line[{1390, 2875, 2877, 1695, 2869, 2872, 1407, 2928, 1705, 2934, 
          2936, 2939, 1424, 2981, 2984, 1716, 2989, 2992, 1443, 3021, 3025, 
          1723, 3029, 1458}], 
         Line[{1393, 2896, 2899, 1700, 2910, 2914, 1411, 2880, 1711, 2959, 
          2961, 2964, 1428, 3004, 3007, 947, 2944, 1446, 3010, 1726, 3033, 
          3035, 1462}], 
         Line[{1394, 2897, 1699, 2908, 2911, 2915, 1412, 2881, 2883, 1712, 
          2962, 2965, 1429, 3005, 946, 2942, 2945, 1447, 3011, 3013, 1727, 
          3036, 1463}]}, {
         Line[{165, 1925, 285, 1946, 1945, 1944, 282, 1940, 1939, 279, 1937, 
          1936, 269, 1928, 1927, 266, 1912, 1911, 255, 1829, 1828, 248, 1888, 
          276}], 
         Line[{173, 1856, 1855, 1854, 273, 1919, 263, 1903, 1902, 1901, 259, 
          1897, 237, 233, 1866, 1865, 1864, 1863, 221, 1767, 1766, 1765, 213, 
          252}], 
         Line[{178, 151, 1741, 1742, 1743, 159, 1747, 1748, 1749, 155, 1753, 
          166, 1774, 186, 1784, 1785, 1786, 190, 1805, 1806, 1807, 202, 1817, 
          206}], 
         Line[{209, 1826, 1825, 1824, 1823, 205, 193, 189, 1783, 1782, 1781, 
          1780, 169, 1761, 1760, 1759, 158, 162, 154, 1740, 1739, 1738, 181}], 
         Line[{214, 1768, 1769, 1770, 174, 182, 1796, 1797, 1798, 1799, 194, 
          198, 1836, 1837, 1838, 222, 1843, 226, 1867, 238, 1790, 1791, 1792, 
          242}], 
         Line[{245, 241, 1876, 1875, 1874, 1873, 229, 1850, 1849, 1848, 225, 
          1842, 201, 1816, 1815, 1814, 197, 1804, 185, 1734, 1733, 1732, 177, 
          217}], 
         Line[{249, 1830, 1831, 1832, 210, 218, 1857, 230, 1877, 1878, 1879, 
          234, 1889, 1890, 1891, 256, 260, 1913, 1914, 1915, 270, 170}], 
         Line[{274, 1883, 1884, 1885, 246, 253, 1904, 1905, 1906, 1907, 264, 
          267, 1929, 1930, 1931, 1932, 277, 280, 1941, 283, 1920, 1921, 1922, 
          163}], 
         Line[{300, 2143, 420, 2164, 2163, 2162, 417, 2158, 2157, 414, 2155, 
          2154, 404, 2146, 2145, 401, 2130, 2129, 390, 2047, 2046, 383, 2106, 
          411}], 
         Line[{308, 2074, 2073, 2072, 408, 2137, 398, 2121, 2120, 2119, 394, 
          2115, 372, 368, 2084, 2083, 2082, 2081, 356, 1985, 1984, 1983, 348, 
          387}], 
         Line[{313, 286, 1959, 1960, 1961, 294, 1965, 1966, 1967, 290, 1971, 
          301, 1992, 321, 2002, 2003, 2004, 325, 2023, 2024, 2025, 337, 2035, 
          341}], 
         Line[{344, 2044, 2043, 2042, 2041, 340, 328, 324, 2001, 2000, 1999, 
          1998, 304, 1979, 1978, 1977, 293, 297, 289, 1958, 1957, 1956, 316}], 
         Line[{349, 1986, 1987, 1988, 309, 317, 2014, 2015, 2016, 2017, 329, 
          333, 2054, 2055, 2056, 357, 2061, 361, 2085, 373, 2008, 2009, 2010, 
          377}], 
         Line[{380, 376, 2094, 2093, 2092, 2091, 364, 2068, 2067, 2066, 360, 
          2060, 336, 2034, 2033, 2032, 332, 2022, 320, 1952, 1951, 1950, 312, 
          352}], 
         Line[{384, 2048, 2049, 2050, 345, 353, 2075, 365, 2095, 2096, 2097, 
          369, 2107, 2108, 2109, 391, 395, 2131, 2132, 2133, 405, 305}], 
         Line[{409, 2101, 2102, 2103, 381, 388, 2122, 2123, 2124, 2125, 399, 
          402, 2147, 2148, 2149, 2150, 412, 415, 2159, 418, 2138, 2139, 2140, 
          298}], 
         Line[{435, 2361, 555, 2382, 2381, 2380, 552, 2376, 2375, 549, 2373, 
          2372, 539, 2364, 2363, 536, 2348, 2347, 525, 2265, 2264, 518, 2324, 
          546}], 
         Line[{443, 2292, 2291, 2290, 543, 2355, 533, 2339, 2338, 2337, 529, 
          2333, 507, 503, 2302, 2301, 2300, 2299, 491, 2203, 2202, 2201, 483, 
          522}], 
         Line[{448, 421, 2177, 2178, 2179, 429, 2183, 2184, 2185, 425, 2189, 
          436, 2210, 456, 2220, 2221, 2222, 460, 2241, 2242, 2243, 472, 2253, 
          476}], 
         Line[{479, 2262, 2261, 2260, 2259, 475, 463, 459, 2219, 2218, 2217, 
          2216, 439, 2197, 2196, 2195, 428, 432, 424, 2176, 2175, 2174, 451}], 
         Line[{484, 2204, 2205, 2206, 444, 452, 2232, 2233, 2234, 2235, 464, 
          468, 2272, 2273, 2274, 492, 2279, 496, 2303, 508, 2226, 2227, 2228, 
          512}], 
         Line[{515, 511, 2312, 2311, 2310, 2309, 499, 2286, 2285, 2284, 495, 
          2278, 471, 2252, 2251, 2250, 467, 2240, 455, 2170, 2169, 2168, 447, 
          487}], 
         Line[{519, 2266, 2267, 2268, 480, 488, 2293, 500, 2313, 2314, 2315, 
          504, 2325, 2326, 2327, 526, 530, 2349, 2350, 2351, 540, 440}], 
         Line[{544, 2319, 2320, 2321, 516, 523, 2340, 2341, 2342, 2343, 534, 
          537, 2365, 2366, 2367, 2368, 547, 550, 2377, 553, 2356, 2357, 2358, 
          433}], 
         Line[{570, 2579, 690, 2600, 2599, 2598, 687, 2594, 2593, 684, 2591, 
          2590, 674, 2582, 2581, 671, 2566, 2565, 660, 2483, 2482, 653, 2542, 
          681}], 
         Line[{578, 2510, 2509, 2508, 678, 2573, 668, 2557, 2556, 2555, 664, 
          2551, 642, 638, 2520, 2519, 2518, 2517, 626, 2421, 2420, 2419, 618, 
          657}], 
         Line[{583, 556, 2395, 2396, 2397, 564, 2401, 2402, 2403, 560, 2407, 
          571, 2428, 591, 2438, 2439, 2440, 595, 2459, 2460, 2461, 607, 2471, 
          611}], 
         Line[{614, 2480, 2479, 2478, 2477, 610, 598, 594, 2437, 2436, 2435, 
          2434, 574, 2415, 2414, 2413, 563, 567, 559, 2394, 2393, 2392, 586}], 
         Line[{619, 2422, 2423, 2424, 579, 587, 2450, 2451, 2452, 2453, 599, 
          603, 2490, 2491, 2492, 627, 2497, 631, 2521, 643, 2444, 2445, 2446, 
          647}], 
         Line[{650, 646, 2530, 2529, 2528, 2527, 634, 2504, 2503, 2502, 630, 
          2496, 606, 2470, 2469, 2468, 602, 2458, 590, 2388, 2387, 2386, 582, 
          622}], 
         Line[{654, 2484, 2485, 2486, 615, 623, 2511, 635, 2531, 2532, 2533, 
          639, 2543, 2544, 2545, 661, 665, 2567, 2568, 2569, 675, 575}], 
         Line[{679, 2537, 2538, 2539, 651, 658, 2558, 2559, 2560, 2561, 669, 
          672, 2583, 2584, 2585, 2586, 682, 685, 2595, 688, 2574, 2575, 2576, 
          568}], 
         Line[{705, 2797, 825, 2818, 2817, 2816, 822, 2812, 2811, 819, 2809, 
          2808, 809, 2800, 2799, 806, 2784, 2783, 795, 2701, 2700, 788, 2760, 
          816}], 
         Line[{713, 2728, 2727, 2726, 813, 2791, 803, 2775, 2774, 2773, 799, 
          2769, 777, 773, 2738, 2737, 2736, 2735, 761, 2639, 2638, 2637, 753, 
          792}], 
         Line[{718, 691, 2613, 2614, 2615, 699, 2619, 2620, 2621, 695, 2625, 
          706, 2646, 726, 2656, 2657, 2658, 730, 2677, 2678, 2679, 742, 2689, 
          746}], 
         Line[{749, 2698, 2697, 2696, 2695, 745, 733, 729, 2655, 2654, 2653, 
          2652, 709, 2633, 2632, 2631, 698, 702, 694, 2612, 2611, 2610, 721}], 
         Line[{754, 2640, 2641, 2642, 714, 722, 2668, 2669, 2670, 2671, 734, 
          738, 2708, 2709, 2710, 762, 2715, 766, 2739, 778, 2662, 2663, 2664, 
          782}], 
         Line[{785, 781, 2748, 2747, 2746, 2745, 769, 2722, 2721, 2720, 765, 
          2714, 741, 2688, 2687, 2686, 737, 2676, 725, 2606, 2605, 2604, 717, 
          757}], 
         Line[{789, 2702, 2703, 2704, 750, 758, 2729, 770, 2749, 2750, 2751, 
          774, 2761, 2762, 2763, 796, 800, 2785, 2786, 2787, 810, 710}], 
         Line[{814, 2755, 2756, 2757, 786, 793, 2776, 2777, 2778, 2779, 804, 
          807, 2801, 2802, 2803, 2804, 817, 820, 2813, 823, 2792, 2793, 2794, 
          703}], 
         Line[{840, 3015, 960, 3036, 3035, 3034, 957, 3030, 3029, 954, 3027, 
          3026, 944, 3018, 3017, 941, 3002, 3001, 930, 2919, 2918, 923, 2978, 
          951}], 
         Line[{848, 2946, 2945, 2944, 948, 3009, 938, 2993, 2992, 2991, 934, 
          2987, 912, 908, 2956, 2955, 2954, 2953, 896, 2857, 2856, 2855, 888, 
          927}], 
         Line[{853, 826, 2831, 2832, 2833, 834, 2837, 2838, 2839, 830, 2843, 
          841, 2864, 861, 2874, 2875, 2876, 865, 2895, 2896, 2897, 877, 2907, 
          881}], 
         Line[{884, 2916, 2915, 2914, 2913, 880, 868, 864, 2873, 2872, 2871, 
          2870, 844, 2851, 2850, 2849, 833, 837, 829, 2830, 2829, 2828, 856}], 
         Line[{889, 2858, 2859, 2860, 849, 857, 2886, 2887, 2888, 2889, 869, 
          873, 2926, 2927, 2928, 897, 2933, 901, 2957, 913, 2880, 2881, 2882, 
          917}], 
         Line[{920, 916, 2966, 2965, 2964, 2963, 904, 2940, 2939, 2938, 900, 
          2932, 876, 2906, 2905, 2904, 872, 2894, 860, 2824, 2823, 2822, 852, 
          892}], 
         Line[{924, 2920, 2921, 2922, 885, 893, 2947, 905, 2967, 2968, 2969, 
          909, 2979, 2980, 2981, 931, 935, 3003, 3004, 3005, 945, 845}], 
         Line[{949, 2973, 2974, 2975, 921, 928, 2994, 2995, 2996, 2997, 939, 
          942, 3019, 3020, 3021, 3022, 952, 955, 3031, 958, 3010, 3011, 3012, 
          838}], 
         Line[{164, 1924, 1923, 284, 1943, 1942, 281, 1938, 278, 1935, 1934, 
          1933, 268, 1926, 265, 1910, 1909, 1908, 254, 1827, 247, 1887, 1886, 
          275}], 
         Line[{171, 1851, 271, 1917, 1916, 261, 1898, 257, 1894, 1893, 1892, 
          235, 1881, 1880, 231, 1859, 1858, 219, 1762, 211, 1834, 1833, 250}], 
         Line[{172, 1853, 1852, 272, 1918, 262, 1900, 1899, 258, 1896, 1895, 
          236, 1882, 232, 1862, 1861, 1860, 220, 1764, 1763, 212, 1835, 251}], 
         Line[{179, 1735, 152, 1744, 1745, 160, 1750, 1751, 156, 1754, 1755, 
          167, 1775, 1776, 187, 1787, 1788, 191, 1808, 1809, 203, 1818, 1819, 
          207}], 
         Line[{180, 1736, 1737, 153, 1746, 161, 1752, 157, 1756, 1757, 1758, 
          168, 1777, 1778, 1779, 188, 1789, 192, 1810, 204, 1820, 1821, 1822, 
          208}], 
         Line[{215, 1771, 1772, 175, 1729, 183, 1800, 1801, 1802, 195, 1811, 
          199, 1839, 1840, 223, 1844, 1845, 227, 1868, 1869, 239, 1793, 1794, 
          243}], 
         Line[{216, 1773, 176, 1730, 1731, 184, 1803, 196, 1812, 1813, 200, 
          1841, 224, 1846, 1847, 228, 1870, 1871, 1872, 240, 1795, 244}], 
         Line[{299, 2142, 2141, 419, 2161, 2160, 416, 2156, 413, 2153, 2152, 
          2151, 403, 2144, 400, 2128, 2127, 2126, 389, 2045, 382, 2105, 2104, 
          410}], 
         Line[{306, 2069, 406, 2135, 2134, 396, 2116, 392, 2112, 2111, 2110, 
          370, 2099, 2098, 366, 2077, 2076, 354, 1980, 346, 2052, 2051, 385}], 
         Line[{307, 2071, 2070, 407, 2136, 397, 2118, 2117, 393, 2114, 2113, 
          371, 2100, 367, 2080, 2079, 2078, 355, 1982, 1981, 347, 2053, 386}], 
         Line[{314, 1953, 287, 1962, 1963, 295, 1968, 1969, 291, 1972, 1973, 
          302, 1993, 1994, 322, 2005, 2006, 326, 2026, 2027, 338, 2036, 2037, 
          342}], 
         Line[{315, 1954, 1955, 288, 1964, 296, 1970, 292, 1974, 1975, 1976, 
          303, 1995, 1996, 1997, 323, 2007, 327, 2028, 339, 2038, 2039, 2040, 
          343}], 
         Line[{350, 1989, 1990, 310, 1947, 318, 2018, 2019, 2020, 330, 2029, 
          334, 2057, 2058, 358, 2062, 2063, 362, 2086, 2087, 374, 2011, 2012, 
          378}], 
         Line[{351, 1991, 311, 1948, 1949, 319, 2021, 331, 2030, 2031, 335, 
          2059, 359, 2064, 2065, 363, 2088, 2089, 2090, 375, 2013, 379}], 
         Line[{434, 2360, 2359, 554, 2379, 2378, 551, 2374, 548, 2371, 2370, 
          2369, 538, 2362, 535, 2346, 2345, 2344, 524, 2263, 517, 2323, 2322, 
          545}], 
         Line[{441, 2287, 541, 2353, 2352, 531, 2334, 527, 2330, 2329, 2328, 
          505, 2317, 2316, 501, 2295, 2294, 489, 2198, 481, 2270, 2269, 520}], 
         Line[{442, 2289, 2288, 542, 2354, 532, 2336, 2335, 528, 2332, 2331, 
          506, 2318, 502, 2298, 2297, 2296, 490, 2200, 2199, 482, 2271, 521}], 
         Line[{449, 2171, 422, 2180, 2181, 430, 2186, 2187, 426, 2190, 2191, 
          437, 2211, 2212, 457, 2223, 2224, 461, 2244, 2245, 473, 2254, 2255, 
          477}], 
         Line[{450, 2172, 2173, 423, 2182, 431, 2188, 427, 2192, 2193, 2194, 
          438, 2213, 2214, 2215, 458, 2225, 462, 2246, 474, 2256, 2257, 2258, 
          478}], 
         Line[{485, 2207, 2208, 445, 2165, 453, 2236, 2237, 2238, 465, 2247, 
          469, 2275, 2276, 493, 2280, 2281, 497, 2304, 2305, 509, 2229, 2230, 
          513}], 
         Line[{486, 2209, 446, 2166, 2167, 454, 2239, 466, 2248, 2249, 470, 
          2277, 494, 2282, 2283, 498, 2306, 2307, 2308, 510, 2231, 514}], 
         Line[{569, 2578, 2577, 689, 2597, 2596, 686, 2592, 683, 2589, 2588, 
          2587, 673, 2580, 670, 2564, 2563, 2562, 659, 2481, 652, 2541, 2540, 
          680}], 
         Line[{576, 2505, 676, 2571, 2570, 666, 2552, 662, 2548, 2547, 2546, 
          640, 2535, 2534, 636, 2513, 2512, 624, 2416, 616, 2488, 2487, 655}], 
         Line[{577, 2507, 2506, 677, 2572, 667, 2554, 2553, 663, 2550, 2549, 
          641, 2536, 637, 2516, 2515, 2514, 625, 2418, 2417, 617, 2489, 656}], 
         Line[{584, 2389, 557, 2398, 2399, 565, 2404, 2405, 561, 2408, 2409, 
          572, 2429, 2430, 592, 2441, 2442, 596, 2462, 2463, 608, 2472, 2473, 
          612}], 
         Line[{585, 2390, 2391, 558, 2400, 566, 2406, 562, 2410, 2411, 2412, 
          573, 2431, 2432, 2433, 593, 2443, 597, 2464, 609, 2474, 2475, 2476, 
          613}], 
         Line[{620, 2425, 2426, 580, 2383, 588, 2454, 2455, 2456, 600, 2465, 
          604, 2493, 2494, 628, 2498, 2499, 632, 2522, 2523, 644, 2447, 2448, 
          648}], 
         Line[{621, 2427, 581, 2384, 2385, 589, 2457, 601, 2466, 2467, 605, 
          2495, 629, 2500, 2501, 633, 2524, 2525, 2526, 645, 2449, 649}], 
         Line[{704, 2796, 2795, 824, 2815, 2814, 821, 2810, 818, 2807, 2806, 
          2805, 808, 2798, 805, 2782, 2781, 2780, 794, 2699, 787, 2759, 2758, 
          815}], 
         Line[{711, 2723, 811, 2789, 2788, 801, 2770, 797, 2766, 2765, 2764, 
          775, 2753, 2752, 771, 2731, 2730, 759, 2634, 751, 2706, 2705, 790}], 
         Line[{712, 2725, 2724, 812, 2790, 802, 2772, 2771, 798, 2768, 2767, 
          776, 2754, 772, 2734, 2733, 2732, 760, 2636, 2635, 752, 2707, 791}], 
         Line[{719, 2607, 692, 2616, 2617, 700, 2622, 2623, 696, 2626, 2627, 
          707, 2647, 2648, 727, 2659, 2660, 731, 2680, 2681, 743, 2690, 2691, 
          747}], 
         Line[{720, 2608, 2609, 693, 2618, 701, 2624, 697, 2628, 2629, 2630, 
          708, 2649, 2650, 2651, 728, 2661, 732, 2682, 744, 2692, 2693, 2694, 
          748}], 
         Line[{755, 2643, 2644, 715, 2601, 723, 2672, 2673, 2674, 735, 2683, 
          739, 2711, 2712, 763, 2716, 2717, 767, 2740, 2741, 779, 2665, 2666, 
          783}], 
         Line[{756, 2645, 716, 2602, 2603, 724, 2675, 736, 2684, 2685, 740, 
          2713, 764, 2718, 2719, 768, 2742, 2743, 2744, 780, 2667, 784}], 
         Line[{839, 3014, 3013, 959, 3033, 3032, 956, 3028, 953, 3025, 3024, 
          3023, 943, 3016, 940, 3000, 2999, 2998, 929, 2917, 922, 2977, 2976, 
          950}], 
         Line[{846, 2941, 946, 3007, 3006, 936, 2988, 932, 2984, 2983, 2982, 
          910, 2971, 2970, 906, 2949, 2948, 894, 2852, 886, 2924, 2923, 925}], 
         Line[{847, 2943, 2942, 947, 3008, 937, 2990, 2989, 933, 2986, 2985, 
          911, 2972, 907, 2952, 2951, 2950, 895, 2854, 2853, 887, 2925, 926}], 
         Line[{854, 2825, 827, 2834, 2835, 835, 2840, 2841, 831, 2844, 2845, 
          842, 2865, 2866, 862, 2877, 2878, 866, 2898, 2899, 878, 2908, 2909, 
          882}], 
         Line[{855, 2826, 2827, 828, 2836, 836, 2842, 832, 2846, 2847, 2848, 
          843, 2867, 2868, 2869, 863, 2879, 867, 2900, 879, 2910, 2911, 2912, 
          883}], 
         Line[{890, 2861, 2862, 850, 2819, 858, 2890, 2891, 2892, 870, 2901, 
          874, 2929, 2930, 898, 2934, 2935, 902, 2958, 2959, 914, 2883, 2884, 
          918}], 
         Line[{891, 2863, 851, 2820, 2821, 859, 2893, 871, 2902, 2903, 875, 
          2931, 899, 2936, 2937, 903, 2960, 2961, 2962, 915, 2885, 
          919}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
gaiNJiW3430wjXg+xk9yPjYdOiQ0wR0IMWfYd0YEB8PvJdERajyvrYctos5t
8gO/Up2d+/pC4ZhVf8MHvC4Dk68NfPq94ICmY0Hozgi4rRrzuAKPqxP500nC
n5LaWNeAOnFgdE11MqB+CL/8tzf8xPorm7uK7KcKQnMpb9MOs7kiA5oTXPX4
u7e2WS5JxiWivd+oXCiawtHx9tJgPbyOU8RzQk6Sc0LBbO3Bi71moJt1JLim
UAlVvF+79RnLD3itdZ78qg0q3PRYUeq1EWKXKT7Tg8dVg8HY70kwWrhVkk9j
ZIMoXqVeasfflSKeE5qSnBOW6sTe0ui8Dl9aG0MSagIBrout7cZyIupfSF7q
dkbZd5XOr+U4wEQOv5krHhdgUZQ1bw5BuRrPL5tRiSEvet2rT7H8y0T5uiTy
Hzp0LjLYu8Fhayh6Ru4FrWcJJQewnLVwo5MHzLQhwrbej0HTBbbm8gbk4fHF
dJYUPS9TZCgjKX/e0xp2KJxV7sbjx4nnpZUk56XH0rJ2eycpw2FdWe+mkTjw
vn32Yj3+rqJSmaj+74eIk02ItUM8HGg3KXy8u7buT6h2OaQ8RoLC83o+N70g
6+vC6StYDjdRfjeJ/P2bquK/M0Siz1ss648NZaEzcdv8HuH9RZ6O43Z1Zyiq
s13rW5RIRfpN0gN9eD/9WNLen7YSiCSWZXlptGNRsB3zPnasz6pOiOnEQCie
J+MX7p9WQNOT72qP9TnO/VfHjMUKvnb97J3frwuT3ypVhvF3686wnXu2xwl1
dGyn1GDlg3tc8b4tePw20U4JJHa6LzfdakzNGd35/YD1PFUW0jHIUqjA+Ugm
s5949m5XmLOvny9KS0bDz7Tb+jDfnOhrxfwuxsAeO+7iRKdIlG/GLHsT22Pi
uILyb6l0dGjmCfVd8xg0tnf552ksZ/grjV1iWQrK/PWJXtoqHMWbO87N4PlO
h7PE/mBPQs2f5E6WfvVH0hqKHAexHAUiHxxI+HCI4YoFR0YCsnBq23KCMhRN
zt713on/f/Imlf1mLj9E8GH3Nik1RPxfJUvP4fkKPowS8F0zgNhTJ/rFSj2g
MD9ni+P6uhDPt9tJzreL8oMvfVl0RanCiqetw12Q69fX07fw/yNfTPQ5KjuD
/sjP2Yu8rshZqNJjfV+b0/GvI38RDZB4Vrmg2xWpfF7dTIPt+h5Fz6fEQ27Q
+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
dugfevLh/9CTv/MPPXnWfSOj534/RbWiJoXmu7JhfGXcswrPox7Fd5n1E45t
MueCAjuT4JhaieB76nm84L1LPo0hutyuIuq/NRUatWUDduD+jBA8AhYSj0CM
4BFwkngEVwkewW8Sj+AUkX/qQco/ZS/2TlTLD0bqjeUWuXV5sOm7mFEdLo/8
eOiSP08sypsOHuX8mAubpcuZnuHyeSJftZaUr1qrw6ZEKxaEJh+O0KzYZsPf
cplZN+r/CEQeazIpj/Wl+L3f0yZJ6G6fTxjtBI4bW84uH8Hz68LEqR0QHI84
zkUeds1Phi7jnsNi2I9FaS0vTRXHIIvPz/v6OMOh+pGwTg2O3wp+G5/5rR2D
JkoY/QJSMsGKP+gcA/7d6QEDl3Ws4ejQCNMLeqd4oAttG+Sjcsz5m7FJBqAN
ahbvzSxS4QHt54OHqXwZIq/Wh5RXu4XIqx0n5dW2lXryHt7mjmjiQ73H1Xwh
4XfoX3bslyaJfFtLUr7t7tzpqOe1lkhpR/Skq3wkvHkidvsJ9TxYcP7a83Fp
4PGtiQ4bCocZ0/iCn7g8XPY/HsQAiQehR/AgDpB4EHQED6KKxINYHsqMkbit
BUVOCc0KvLEgNP5A5Q7uz++TCU3hl46hLW+iHkisj4GlIPFnv3F5wrT3XcdQ
HZQ7zLU251QwMKZwlnVh/6ZO6PbvI+n2VxK6/XEk3X5zQrefjaTbr+WV8Gbd
USdYr/l+bO+zOIhbxXeS+l6d3XfzTPFvY+g1qLxaV5IAHnxVDUK4/xVEnrIu
KU/57r4PNG5/XGC7hGnLdY0kSBSW6fXE5d5E/vJmUv7yNSJ/+Skpf9mwtZqu
Ztgf/Y3feo0ZPYX1GWkvqO+axIOR8vqNZmjw7LOcjklvCEgR/DKAy8e/nzj1
+4gdkv5w3Y2zVwFtXLXhPvUdnWTNwtLDKhvIXFx9T/JFGKRNM25bxuMT5/xq
oxGPCVwZvTMrJmUP12iffXfF9ZnrFc3dTqvC78U71679tERio83Z1P/T+QlO
xzMSp2MdwelwIXE6Vhb+43SYkjgdcgSng5vE6fg/+do5pHxtq5/rhPxbnNB5
jsoOpRdBSPvSjLgDLndvO9I0RncKlBPmt32oj0FjJc5Hw7CdrCPyu1+R8rvV
1g54Ht0pg8ruzEnJv4tAmnF7A6pxP5mIvG8fUt53F5GnHEPKU85lRNW6Wqdh
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
ApHDHh0U+P8AFdlKaw==
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       5.308956305247035*^-9, 1.4899359653743727`}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.525, $CellContext`k2$$ = 
    0.6150000000000001, $CellContext`k3$$ = 
    0.8250000000000001, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
    0.5800000000000001, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 
     0.55, {1, 1, {0, -1}} -> 0.77, {1, 1, {-1, -1}} -> 0.9, {1, 1, {-1, 1}} -> 
     0.505, {1, 1, {1, 0}} -> 0.55, {1, 1, {0, 1}} -> 0.77, {1, 1, {1, 1}} -> 
     0.9, {1, 1, {1, -1}} -> 0.505, {1, 2, {-1, 0}} -> 0.375, {1, 2, {0, -1}} -> 
     0.35, {1, 2, {-1, -1}} -> 0.47, {1, 2, {-1, 1}} -> 0.67, {1, 2, {1, 0}} -> 
     0.375, {1, 2, {0, 1}} -> 0.35, {1, 2, {1, 1}} -> 0.47, {1, 2, {1, -1}} -> 
     0.67, {1, 2, {0, 0}} -> 0.47, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 
     0.25, {2, 1, {-1, -1}} -> 0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 
     0.25, {2, 1, {0, 1}} -> 0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 
     0.25, {2, 2, {-1, 0}} -> 0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 
     0.25, {2, 2, {-1, 1}} -> 0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 
     0.25, {2, 2, {1, 1}} -> 0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 
     0.47, {1, 3, {0, -1}} -> 0.5800000000000001, {1, 3, {-1, -1}} -> 
     0.13, {1, 3, {-1, 1}} -> 0.525, {1, 3, {1, 0}} -> 0.47, {1, 3, {0, 1}} -> 
     0.5800000000000001, {1, 3, {1, 1}} -> 0.13, {1, 3, {1, -1}} -> 
     0.525, {1, 3, {0, 0}} -> 0.5800000000000001, {2, 3, {-1, 0}} -> 
     0.43, {2, 3, {0, -1}} -> 0.55, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 
     0.66, {2, 3, {1, 0}} -> 0.43, {2, 3, {0, 1}} -> 0.55, {2, 3, {1, 1}} -> 
     0.25, {2, 3, {1, -1}} -> 0.66, {2, 3, {0, 0}} -> 0.44, {3, 1, {-1, 0}} -> 
     0.525, {3, 1, {0, -1}} -> 0.6150000000000001, {3, 1, {-1, -1}} -> 
     0.8250000000000001, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.525, {3, 1, {0, 1}} -> 0.6150000000000001, {3, 1, {1, 1}} -> 
     0.8250000000000001, {3, 1, {1, -1}} -> 0.25, {3, 2, {-1, 0}} -> 
     0.35, {3, 2, {0, -1}} -> 0.45, {3, 2, {-1, -1}} -> 0.43, {3, 2, {-1, 1}} -> 
     0.6150000000000001, {3, 2, {1, 0}} -> 0.35, {3, 2, {0, 1}} -> 
     0.45, {3, 2, {1, 1}} -> 0.43, {3, 2, {1, -1}} -> 
     0.6150000000000001, {3, 3, {-1, 0}} -> 
     0.8800000000000001, {3, 3, {0, -1}} -> 1., {3, 3, {-1, -1}} -> 
     0.925, {3, 3, {-1, 1}} -> 0.78, {3, 3, {1, 0}} -> 
     0.8800000000000001, {3, 3, {0, 1}} -> 1., {3, 3, {1, 1}} -> 
     0.925, {3, 3, {1, -1}} -> 0.78}, $CellContext`m1Sel$$ = 
    3, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$38666, $CellContext`qVec -> #]& , \
$CellContext`meshSize$$ = 4, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 
    1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 1, $CellContext`omegaIndex$$ = 
    4, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {12.400000000000002`, 3.1000000000000005`, 
      11.100000000000001`}, "numberOfMasses" -> 3, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.8200836820083681, 0.1673640167364017}, {0.6778242677824267, 
      0.6485355648535565}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
     "pointsDataTable" -> CompressedData["
1:eJxdnUtsXEd2htsSJdESLVMUJbGpF0mR1Fsi2Xy/urop77jKTtvJDCdZJYA3
2Q2XWXgRBHkMM0kwi8DIcgBuJsAA7EU2zigveKXVGDBAwICBsSHDI8WOHLnP
953JvQSE6+6+99TrVNVfdb5bnvzBn/zBjwYajcbJN/+23vx7+82/E2/+7fX/
bvUa3//1nvQWWt//3ewdfP/39ElcD670+l+/2In7GsO9Z9//fbDT+/f+fzR6
fTOzO72/79//0VHY62Lvm3bY6/Z+3b9/qIS9DvYul7DXiXRat3p/9/39zSeR
zrMb8f3hDr9fiXR3d3pL/c/vRvrH3d5bYTDs7nd7v+wn/C9HYa/b+7e+vW/b
Ya/T+9v+7++UsNcJO3uXS9gr5O9WpPv+Dr/fiHwN7ZC/y/H9h93ej/v/cb73
3fd/7W7vj/qfXx/1k3lueX/5q7DX6f0wfm+HPT+fj/Q/LNovYa9Q31Ncu73X
/R+uk6+u+SedLu33DtdO7z+i/EdRj53en0f9tMNewd537bBTevNRvyXsFeu/
LPavbexORblnu72f9j9fx5+yfaM9n3bI9xD+VHph55uj/vcflN5fhf+0w57l
b5R+u+63yd+7pd/uh9th9+BK6dfz8Rbln6L9O/jf9chns0N+L+FPBX8ZinR2
C/ZeRX6etXn+43aUw/K+Ff7b2ia94RLtvkV5x0rY2aS+psLuc8tzDX+yPi9F
vQwV/Pkc/t3unejbe3kU5d/u/WU4Urtfb4dbvR/10z0R6R9vYn+4/Kxf3k3y
N1b67b67Qf6mSLfw+7Ve//6DNs+P4ifb+PNZ6mkbf/76KNptq/c//fb4TbTX
3ib1dZLyb/D5QvSvZ+vYH4v2bKzjD5P093b0m++uUn7rdzTS39+i/t8Ovznc
JJ9fHUX5N/DXT9thbwN7J+nf6zx/AX9aox6a4c+Hq/w+Sb628OerlN/2HcVv
N7lvkHra4PsXMd4crNM+x/SvNco/QH9aI38X8KdV/K+JP61Q/kn82fq9iv9u
kN+Lkf7xOvkbpD7Xsfdl+PPuGvd/Fv68b3lPRfqHpjeCPy1jbzzas7lMfU1y
3aA845R/ne8vkq71e4Z6WsXeFzE/NFaZDz6P8bhl+qdj/Ntbxv5IiXwu8fs4
/rSIvUnKv0Z9j4c/N63vkfCT3VXyeRp/WiFfn4c/Hy7THr8Nfz5eMv+U388X
8adFnh/Hn1p8nqD8q9hr8n3WL/60wn2n8Jtl+uFn4c97S/jfl+HPB4vYO0P5
W7Y//alF/q4yPi/w+wT9aQV7Tcpv+47Qn5bI5wD1uUh9HTN/LuJ/L8Kfd1vU
72D48/6C/QN/mqd8V/GnOco/wX3L2GuS7yX7J+navgPYsXyfMj4vkP5XjM+W
923607zjB/1pDnvXqJ/H2JugPy06PlF+07tAf/LzSepzgXb8JPx53/S+Rl/M
4Y9nQ988e+z4Sv4eOf4yXj4gfxOUv8XzY/iF5R1m3JvnvhPkw/p+zvhseV+2
4/5H5P9czJ+th84/MV8c3Kf9r5WYd+5h7yblX8D/1F+Wdxh/muP+t5gnHveW
+/Y/Por0H+J/r2L+aj3A3jnSv+f8jD/fJX/XY37fu536NPI5h70rlN/yDlMv
j1KfRvoPUp9G+vdTn0a+71K/Q6R/B3uX8Z9Zync95tNn06lP477H2LtC+tbv
u+TjPvc16O/3yD/69OAO9r7Fn2+r30h/JvVp2EO3N27gz1OpT6O+HqQ+jfze
S30a99/l/tdHUf+3zV8jyj/r78zv03w+T/mnUp+GvUnTx79vmj/Sv4s/Xyb9
O6lPo/yzqU8j/Rnrh/Qtb6OoG6hf0p9IfYrfUO83YnxqjKc+jftv43+XSH8m
9WncP536NNKf4vmP2o7zUf5G+RH1/h36NNK/6vqp2G+oF8aD0dSnkf409i/h
z7dSn0b6k6lPf0a/VJ/G79dSn0a+m6lPw47rgjHqb8T+zf3vpj6N+6awf4n0
rd9zpHPd8eUo0hl3/GE+v0L6J6j/Uep3mPSHU58uYJfxj/oZSH1KO6Y+ZV5J
ffpjxknGX9Y3l7D3Cf1pxPGb8fYdx3fKfyb1Ke3q/EB+vzpSn6LT8OdR0r+c
+jSeu5j61HEpvkefvrkvvh8g/ZPYvcB4+IpyNMnvZ9TzBPX5i18dVOphFP+7
mPOW+rSBH1X16Snq6xj/ec28OlDUjdQb+fs41rFv9OkJ6jU+Z/201aeME/jz
RdIfzKvzhOn8mHajnMwPn5LeqWK/C7sjlP8L2nWc8ehb+2WxHNGO49Yz/nyR
ddY31O8Z2ulz2ve3Rz9nXEYftq2nuJ4m/ZekN1L0c/oB+UEXNSbtX/6e7fCM
fhjpPad9T1Nvz9voY/L5ol0td4Nx5kwxX/gd6Q9Z/qJfxe+T1M9oUZ/+BeNs
+PMI+ySf076n8Cf2cd74oX5L+1EvZynvIPPVML9fzCvjIumzz7I3yfg0js5v
4s9ft1kf6S+2q37EuHt8FPPdeer5Bf48wv2DpH/JcYjvx0jvKulf47PtdbOo
T/+u4ocX7E9Fv3IcoX/jz6PZL9ynYHworhu8L9J3nlIP6seT2J2iPcdIf5j8
Xch1CeOb41GJ/ZLfHLmuZHxsq/Oq7TaRfmE9MP5i9xb3mY9pfh/Dny/xvfpr
zH6Bfr1a/gY/D/+0vC/b9pNI5xzlnyraje+nsX+NfM5kvUQ6t3OetR+Gfww7
X1Gut1yHlEeMa/HcJOm+ws8tL/uVrZn0o8jHrDqD9O9wneK5e6R3JedZ9IHr
+qI+jftvFfa/GPemKf83zKez3D/E9Tbp2I/uFssZ39/PemR9UdSn5pP9PdKf
5rmGeqgwLjD+3CZdx9k7pKc+vVf0uzDzgOsN0n/I87brY+pRXTJDe52nvWYp
12vSv4O9n2/Gc3f9nfHnPp/Pc9/DHGfC3iN+Jz/NuWK9xzAyx+/sVx7ctnz0
r7vk91vmhXvln6N+SN/yNrg+wj/epfyPKfcVPs9h7wb1Np/9LK4LRX3KeqGw
f+56gvZUnz4s/xT+Q396rH+xX2F5GZeb88VxKda7pn+T9fsC+aIf7Leoj0uu
p8jfOddb9h/0+1xh/Ye/zBXH8bjO5zwR1wXyN0Y9md5NxsdFnrvl/k9Rn0b9
P8af0ZH7c4x/v4t5dne+/GOMP9G/m5aPeft4QV1K+VvFcSzsLZI/xsndJddh
kc/mcur6uG8efz5Le807/tK/FyjXJ/hPy/Gb6yLXC6S7lPNWXJf4fYJ6Wi72
47C3wnXU/QrnH/bDW+T3q9Adxy32BT5l/8Lysl+5v5Q6Iuwtu87An0xvAn9a
yXE77K0W9Sn7Ofiz+6e25wv6+1L548gY/rycui6ulneEfK2U6v7pKuWdIB9r
fO84t87v7p8ukr8z7ActMd+jg/eX0eWfsf9leqco/2pRd4S9VdIZZ395jfqe
YL9wneenqc+Noj6N/C7jz2fQ9cvlf9GnYWel/Gf/qk4zffdP11znUf51fh8n
XxtcnYc2uE5TL5vkd4T+tII/n8afVov6NKp9DXtfhD8fr6U+jfpcT30a9jZS
B4W9zdSnYW8LezP0zy3KNeJ+Mu1zivlirUQ8z3WS9fsl86flVZdvpi4Ne5v4
81W+30p9GvW2nTogru1S0afNderD/dP18oeR8fDnw43Up1H+zdSnUX7LO4o/
bZfq/ul26rKw13ZfKJ4rJfUp8QjGv5P402Z5HP0b/b7FOuErxuct0nub63bq
07i2yR/6tFlSn4Y/l6JuiPyW1KfEa/Dnk8ZzytfoU+I97PN9TfzG8p3FXpv8
Uj9PC79fi/R7hfxNxfezndSJ/ec+6KQ+jfu28ecT+NN26tOoZ8v7Ev8pNX1a
Up/GfaZ3jXx1Up/G9x3um+W5Lv7Ffu5um/Z7Kz4PldSn/fvft35ftfvj0HPL
y35l6aQ+7af/YYd02K8c6qY+DXtd8jcb49rzburTaI+CP7NfeVjKB337HxEP
6KQ+jfa0/EO0l+Vlv3K3W9w/DXtd/Bl92txxnxV/2kl9Gt2mlG8jg0fEk8uf
9Z//F3iDTu4DEI92nyfS/6Cb+jTsdckfevDpTurTsLfD87P405PUp/F9p/yg
//k1ekd7/7oZ6XTx59fsv5u+69Qd8nuZdCz/DXTBE+zd4vsn5G+W556kPo3+
3y3wDaEHP+ymPo348g72GrT/TlWfPt9JfRp3mR769MMnqU/D3nvYu4299/Cv
6cjPvvzIBHrDz83kOeL5EeLv8iQDyXMYfwp73Yw/hRl5kkHGQ3mD0ejnu/Ik
08Tf5TcmkueI34nPDe24/5Y8R7TDgPXbW2H8DHsd9km+ivHhfXkS1vdD8iSj
yXNE/qZJ1/TdR+5m/Cme6+Y+Xrh9p+c+YdRjp3eyb++T5Dl+yPgZdgqfz9Iu
8gfu+7R7xhHoH/AVN+F55EnYb+h1Mv50EP0v40/0zx76OnkO9Hebbk18/lzy
HC3GzxgPtinXLebPDvtgxBH2bd8x5lvrdzh5DvcVGb8y/hQ6qZ3xp2hXeRLj
YfIkl+i38iTEHUqnykc9L1U+6n3bFz5qSF6nkTxHhY/a3874U+R/K/koeQ7H
zyivPAl81IHteSN5jrheSZ5DPor5LfkoeQ75KHkO+Sh5DvmosLeR8acYf+QN
bK92xp8i/t6uxp925UnOJ88hHyXPEfZ++St5DvkoeQ75KHkO7CfPIR+FfqHf
GAeyPS8nz+H4Kc9h/EmeQz5KnkM+Sp5DPirsyTvIR8lXwGvtbmX8KfKb7cv8
upHxJ3kO40/yHPJR8hxRfvYb9leTjwp/ki9wfb9c5aMamxl/inzLkxjvsX2H
kueo8lGrNT7K8spHyTu4vpc3kI+Sp4BHOlzP+JM8B+MD/d3P8lHyJC/pTys9
9Bv9yfK6vl9KPirmD3mSseQ5wh482548iXzUao2PWqnxUZZXPmqZ9pCPsrzG
nxZz31iew/W9PEeVj1qt8VGmJx+13DOuJM9R5aMWa3zUYo2PkieRj1qo8VHz
NT5qucZH2b7yUfIkub6vxZ9aNT5KvkE+Sp7E9at8g+t7eRL5qKUaH7VY46Na
2JOPatX4KPkR+SjLKx9leiOMf4+xx/q+JV9hXFqeRD5KfsT9D+tXPmoee/JR
8zU+Sp7kNOuYR8lHxe8Pc9877MsbyEct1Pgo61s+Sp5EPmou+Sh5DuJjbXkO
8s/8+SDjEPIcru8jXni3xkfN1/iorN/kOYxTRvqPko+S55CPkudg/4b079b4
qDvJR4W92RofNZd8VOTX9h1JnkN9GunfT30qz6E+rfIcg6QvX+F6eib5qLB3
q8ZHPUo+Ku5/kHwU+8/cN5A8R5QPfXpwu8ZHWd633QdLfeq8GffJR02mPo36
up/6VJ6D8St5DsY32mkWe58kz8H4mDxHfD5L+SdTn8pzxO/Gn+QNJkj/TvJR
8hzx/HDyHFU+ajr5KHmOsPcyeY5I55zrsNSn+E3yUfHcWOrTSH82+Sh5jsi/
+w23Up/Kc1Tj6jdTnzrvsL9O+s3ko4wLUC+5T6c+ZZ+8xkdZXuNzE6lPo72u
pz5lnzD1KevCGh/lPrc8kvXO+v7NPB33y0dNJh8lzxH5f5dyXeW+Rq475KNo
hxofNZJ8lDxHPHeZfacz2LuRPMce7Uo7pj6V51CfynPE/caf5Bj8k195nTxH
fHZ9fzL1aeTzFfuSxsM+O1KfotOSj5LnoHzZz9Snkf5Q8lGOk2SMfXPz/S7j
4Zd8Vp9+fOT6/lt0ygF+wD528lGUq8ZHDVb1afIc8PtvdJDxJ3kO9peS54j0
ruBPXzDP3cw4o/qUcSL5KMc962Gpko9XR/IclLMtzxHpvcV6WJ5juDgO0K8z
LmTc1n3aZ/iNfmr8KdI3bnGOfvScdnp5JM9R5aNekP6JYrsZf4rv3ccfS56D
8S/jMIyPjM/HxAVGe/v4hfUW38uxyEd9Q3nlowYy/sRzGX8yTsf4X+M55AZ4
T+WNPo16+bQtHxXXr2nvt5PnYH6ingb1k7b9yHwZV7HcrtMZFzMuFs9N1HgO
+ajX7Wr86ZTtqh9l/GmxUm75KOdJuRf2yRpyJsmvJM8Rn22viaI+dZ+9ykfp
h4Opo6p8lPuEn7XVwQeVclzLetJP4qoeNM5jPOxWjY8aqcWfrN8zyXOg/47U
LfJRjiP6bdgzPfl9OY3xjAt6X+RjpsZHXcl5zbgV9p2vMv7EfIY9+aipjD8Z
N16kXuP7meSj3FeN7+Ve7iQfRT8r8lEHjAvUf/Icxp/iObmLL/F7yzuY++72
o8jH7eSjwp58wyTP3U8+ynY0/hT3GWdwXJxOPiqem8n4U6RzO8c1eY54jv3K
PfmVq3z/IP1InkN9GvffqvFRM/Zf+V7u/zR5DvmouMqvqE/vZ/wp7DzkKh/1
KONP8hyMT6Q/m/GnsGv9Gg+7m3xUPHcv+ai4PqjxUaYnH/U4+Sh5Dv0uvjfe
z37lwZ2MP0X6pmf86X7Gn+J7y/syeQ7ml+Q5jD/Jczz7/+NA8hxTyXOoT1kv
JR8V6T9IPkqew/hTpC+/8Sp5jvh+KHmOSvxpbyH5qLjKU0zx3GLyUawnM/4U
9yW/4no0+ago/3zGn6L88hvun8qTwKcfypNcZ39DnmQqeQ71aWR3rsZHzeMv
3+Ev84X9weQ5jD9F+5neO8lzVPmoJa43kucw/hTPyZPAR+3PZ/xJniPS4f3S
Zgt7P9+Mbt9KPiraf7HKR+0v5bwtzxG/M281V7AnHyXfcRl/kSfx/VJ5km/x
38WMP0X5La981HLGn+Q5qnzUSo2PWq3xUWu5DmI/K/koeQ75qCj/UpWP2pcn
kY+yvPJRqzU+yvTlo+RJ5KPkSdw/XUo+Kp5bZnx8RX9aqfFR8iTyUaupu9iP
JH/yUaYnH7VR46M2ko+K/C4nH9XP1k9WanzUao2PWksdHO0vTyIfJU8iHyVf
IR8l3yAftVXjo1ZrfNRqjY9aq/FR66lP47pR46NMTz5KnkQ+Sr5CPmq7xket
0T7yUes1Pmq9xkdZXvmozdSn8hxVPmo79ak8R+RPPqpd46PWa3zURo2P2qzx
UVs1PsryqpvlSdw/bVf1aVOeAp2yX1KfEo/BX+SjNmt81Fb5h/5n+SjTk49q
pz6V54j8jSfPoa6R55CPkudQnxKvSj6KeFb5Bn0qz/Hf/evn6GXTP027FMZr
68fy8z5nQ35B/ke+YZrnOqlPo/zbNT6qnfo04sHyGqxz3y9Vffq8pD6NUdL0
xpPniPvR1UNd7M0kzxH+xX7us3byUbG/W1KfynOoT2M/2PKyX7kvT3IxeQ75
qLDXTX0qzxH5m+H9853Up8SDk4/q3/+iJB8lz6E+jfa3/LxPMGt5R5PncB0S
9uRJJpPnkI8KezupTyOfneSj5DmqfFQ3+Sh5Dtdtka9u6tOwJ1+hHpQnUb8/
qfJRe09Sn8ITVPmo0k0+Sp5DPip4Hst3NnmOCh/13N/ho4o8yVTyHBU+aui9
Kh+1300+Ktq/m/o0/NvyvuQ8gp3Up9Hfn1T5qH3TU58+SX0a9uRJ4KMO33Pd
yPgnP+I+8BOu7t/t4PdDNb6C8yWedfP9PdqzGj9tdDN+ij/k+3v4S8ZP8Sf3
X3v4m/wA/t0ljjCUfIXvdeHPvQf95z/W38kf8//TDvsmw/h3cX+5yFdQf+gf
+RnOlziUH+F8id1uz33Z6HYdxk3jpx3iy+xTJV9xgvlJ3oD393aL++/4TZv2
mOoxHmX8lPGK/PG+3IfaP9tjvPO9H/ia0nNfEv4tz5dgPM3zJeDnqudL7G/z
eRK/6GT8lPE891kZ7zN+Kl/B+pT9oJL7WrG/Z3kHiudlhL9cIN61nfHT0A3y
BsTjZvUv9r178iO83/i0kO9B2ktehvhpU97i2Pm2Gj/d38rzJeQrIj3m/2N5
jknWV/oT+1NNeZqL7C96Honv72333FeOfG4Rf/+sLV/B/FPkK9g/YRzzfI4m
+9OeH0Fc5FA+aTzSP7Y+LxK/3O753ma0/xbt+MWRfIXvsclXRHlPF/mKqC/m
/6bndfD+3u4a7UF77Xkeie+5bpE/51vPWyF+2pAncR96g/GF8yX21vEn96fW
fD8Rf5I3UI/4mfhpcyvjp5Hfzdy3j/JvZPw0yu95IJwvcex5IJwv0bS88sjy
HPLaKxk/9byM+N04kvxIEzueN8P5Ei3reyD5CvyX/cRV/dv1UPV8icaK77cW
+Qr6T5GvCHvET/f1pybll1+Bjz6WHxlIvsI4hXxFpP+V68Xq+RKHS77/y/pI
ngJ+vCnfMYFdeZ0x+pPlvUA/Wkm+L9pfnsL4qTzL1235CsbPIl8R9pn/D1q5
bxn25Ck4X+JYfkSezvNQ5JGTn8GfljKuEfVpeX/Xlq/gPe4iX8H6k/4kb4Ae
Sb7CeOVyxk8jv0v4CedLNJYyfhrllyf5+Ei+Iuy9astXRHl9X8705LXnM37q
eRnxmfMldj2P5Ar+JB80jD95/kkj+Qr0BeOzfMc3jM/zGT8Ne3PG12i/x/me
YuRX3sD4qf7k/l2r53v77LdhDz76YL5XfY95LuOncdtj8vsOOu+R8Ufmc8/n
cP9O3uEG5bc9LzM+ex7IecZneZLXMT/sej6H50s8zvipfAXPF/kK7Bf5ivj9
BvPFHfziBumYvnpQfuQd+tdj6tPzJR7le8/yFdRfW74i/NfzJe4avy5VvkJe
ezb1KfvRGT+N9B+lPo1aeJj6lP3u2vkSd1Ofxn2eR+J71bOpT+P7Gf3XfanU
p3Hfw+T74n7Pmxmi3jx/Rb7vjv3LeEHG7eI+eQ7jVtOpT+P7qYyTyFeoT6O+
7qc+jfzeTX0a93k+x++O5CuMn1b5ihOkf8vxq8hXqE+J42LvZsZNf1y5yut4
TsVs6tPI50xVnx54HonxU89VM34qT2K88nrq0/h93PnBfc8q3/fM+h2tcuzu
T8mVZvxUXudT+G/HjYEipxfPGTceky+qvUdpHG0k9WnYvZXnSxAHSn3qvBL3
vUAPXkt9Kl8R+RpA//ner+dLXEx96jhr3PRnlDvsX03dEVfjp5Z3MLm7+P3L
I/kK46fWq/tTxHuT7/PcFfVp2DmVcTfGrSP1aaR7LfVplH8s9anrQvQf++O+
x/Z5W+4kvj9N+oPqS/eFU5/u4Ye0e/IV+hXvlSTfp47HfnJJ6lM51rD3Rdv3
HqI8Z9in9ryMi+W/eI56Ls4z8ftk+SHtHvbGU3dVyz2U+lTuUH0qp+7+lNwo
7VvUIbR/ka8gvp77SJGe+y+NWvx00PVRcmL4Z567iP8eyVfg323njbhfLuRz
yut+kOdlGD+VGzC+LF/RTK6H/kn6cqADzOMfHRk/dR1q/BR/kEPKOAJ+Xqw3
9Sn+lvtT+j3756TveyUXcp+C9XeuG1ifU0/O4+bjVC1+qg6T77uA7rhWy6dx
8ys5Tv2Ufhv1PJyc3B7t5riLHxxZD2HP+OmwXFqNA7hkXCvjp+6Tx+9T6JHf
c3/GjexH9hP7KbqjzEW95Tk6xk+r7w0OJecT9Xop9zXhn4rnZcR9U8V+f8C4
1qJc7F/lPk1cPV9iVO7qyDib8VPGDe43nus5Ep5/ZhzF720nr8blruS6Gv3U
04761LiI50vs4QdyX8zXcn25z2w7hb1bRX1qnMD4aeTD8zJ+f+5VPO/5Z1fx
v9f0b88j+cWm47zckHFrnmd8Nj25HM+v8Dy225lP+Qry73sXtMc7qQN+zThg
v/wF40w853kk7lfKc7hfKb/ifqW8gfHluxk/la+gXdx3sf171XpUn04zznu+
hPXbUA+Xaj+T52C/8tk9/EF9+iDjp+jxjJ8aN+T9rJ77+PG750vczvipfIXj
nudl0D9dT9h/SfdhLX76uBo/3Z1zfCB9eRLPKZMP+h3jzV3nJfSy55GcKPIV
VX36KPt92Jsr6lP5ikr89GDe8RP9LB90lvHmHv7n+ycP8pwu1pNyqa43q/HT
fdPzfRj5EeOD8hTET4/lD0ZZ39zP+Gmk8xB//go9+Ij2+tT3GbDn+x7yI74P
Y/qef2Z66q8W5ZlOvoJxDh7zEf48yPxqeeH7DufQoce+71GNn+5aXvcH5Tnc
P/Uz+v1QvsP46VKeLxH5navGT1vzxOO+PIp2n8d/nOcWMn4adlo5T8fV8srT
yXOo35dzXAx78hbwfYfzVU56f6GoT/u377boN5wv0ZQfOe1+V/J9YW8p+b6w
5/kcjCu7Kxk/DXurPk9/snynmT9avM/M+RIHi8kJx31LnttHubJ8pGt68n2e
RyK/5vkccodrGT+N9l/M+Gm0/xLxL86XOF6Sq/Z9M+x5Hq48h+cFy4+4P7hW
ndeO1yjPTPIV+B/9e6l2LuKyOhudtlI9X6Jh/cr3WV73B9eS72M/OuOn7Fdn
/DSe2+R3dPzxcsZP+350uILegfP+yWrGT6P91zJ+Gu2/nrov7Fle3vc49HwQ
9HvyFXCbu1uOX/Sn1aI+DTtrcu2sU+RZ5JBN3/ejTU/9vpl8X9iTp/D8M3kL
56Vtx3f60xrtw7pidx1+jXVLcwN/fsl5KRupT6P88ivGT00PnbQrP+L5CfIU
nJt13E59Gs+t5/kSUY8bBV2P/tr03EnGZ8srd76d+lS+Iu5Tf5meukGeQc61
pD6N/G7Sv3kv43gTnu4jeK0t4mZw6vvbycHLV0S+LhsPTH1KvLCqT5/Ld8zG
c6WT+jS+34IfUZ9ulz/tP8/5Eo025+14/lk79Snx0OT7Iv/yHp43Js8wRXt2
UrfJV0T9nWd83oaPeE181vL+YpNipD6Vr+D5SP+FPA3vnzzVPjq3J+8B3zfb
TQ66yle8g94o5aMoP3qwpD6N5yyv73t0avpUfsX9StOT7+umPpWviPtu53kZ
0e/g+z4s8BrE94c68IYfeR4D/oI+fW552a8s3dSn/eQ/NH3019AO9cW65v2d
1PXyFerT6N+d8tfRf/DfTtmM/uV5FalPoz3lR3jf49jyEk/f3Ul9GvZ2Up+G
vSc8j+7ef5L6NNq/gz+jT5924R+fR3/qyZPw/4+YlVchvv+B/MgY/iTvgR58
Ks/BuqQn33Ibe54Hcpb9gi7+7L7VTurTuG8n9WnYlSfxXE3Tc50sP6LekR+R
73uP++Xc3yv/B3CLMXs=
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {0.31000000000000005`, 
    1.1199999999999999`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {
    12.400000000000002`, 3.1000000000000005`, 
    11.100000000000001`}, $CellContext`rawNumberOfMasses$$ = 
    3, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
    3, $CellContext`tau$$ = 0.9803703308105469, $CellContext`tick$$ = 
    False, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 0.8}, {0.9, 0.7}, {0.4, 
    1.2}, {1.3, 1.4}}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period:"]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open"]}, 
                ImageSize -> {200, 60}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Text[
                Text["Angular frequency \[Omega](q), selection:"]], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["mesh size "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`meshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin], 
                Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tau$$], 0}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`meshSize$$], 8}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`meshSize$$ = 
        8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
         1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tau$$ = 
        0, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       Dynamic[If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
            Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
              1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
           Module[{$CellContext`n$}, $CellContext`n$ = 2; 
             While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
            ReplaceAll[
              "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
             2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
              $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
              
              Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; $CellContext`bInitDefaults$$ = 
            False; Null, Null]; 
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
           
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
                $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
              True, Null]; 
           If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
                
                Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`bRefreshDynPlot$$ = 
              False, Null]; $CellContext`dynPlot$$[$CellContext`tau$$], 
           
           If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
            If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
               False; $CellContext`bRefreshDynamics$$ = 
               True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
            If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
              Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
            LocatorPane[
             Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                   Dimensions[#]] < 3, 
                 
                 Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
                 If[First[
                    Dimensions[#]] > 7, 
                  Take[#, 7], #]]; 
              Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                 First[
                   Dimensions[$CellContext`rawArrayOfMasses$$]]; 
                If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                    $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                  
                  While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                   AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                   Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                   Part[
                    Part[$CellContext`kArray$$, All, 1], All, 1]]; 
                If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                  Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                  
                  While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                   Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                   Part[$CellContext`u$$, 1], 
                   
                   Part[$CellContext`u$$, 
                    1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                 Part[$CellContext`glConstLocDefault, 1], 
                 Part[$CellContext`u$$, 1]]; 
              Part[$CellContext`u$$, 2] = If[Dot[
                   Part[$CellContext`u$$, 2], 
                   
                   Part[$CellContext`u$$, 
                    2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                 Part[$CellContext`glConstLocDefault, 2], 
                 Part[$CellContext`u$$, 2]]; {
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  
                  2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
               If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
               If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
               If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
               ReplaceAll[
                 "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
                2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
               True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
             $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
             LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period:"]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open"]}, 
                 ImageSize -> {200, 60}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Text[
                 Text["Angular frequency \[Omega](q), selection:"]], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["mesh size "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`meshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tau$$, 0}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`meshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{915., {292., 299.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms}, $CellContext`latticeBasis = 
          Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            Range[$CellContext`numMasses]]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay]& , 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], $CellContext`pointsTable[
         Pattern[$CellContext`mPosFirstCell, 
          Blank[List]], 
         Pattern[$CellContext`latticeBasis, 
          Blank[List]], 
         Pattern[$CellContext`numberLatticeLinesToDisplay, 
          Blank[List]]] := 
       Table[$CellContext`mPosFirstCell + 
         Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
          
          Part[$CellContext`numberLatticeLinesToDisplay, 
           1]}, {$CellContext`j, -
          Part[$CellContext`numberLatticeLinesToDisplay, 2], 
          
          Part[$CellContext`numberLatticeLinesToDisplay, 
           2]}], $CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], $CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk 
            Part[$CellContext`mA, $CellContext`j]])], \
$CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], $CellContext`showDynamics[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`ql, 
          Blank[]]] := 
       Module[{$CellContext`pointsDataTable, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`e, $CellContext`omega, \
$CellContext`points, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses}, \
{{$CellContext`a, $CellContext`b}, $CellContext`pointsDataTable, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`lines, \
$CellContext`mScalarArray, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "numberLatticeLinesToDisplay", 
             "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`points = 
          Table[Part[$CellContext`pointsDataTable, $CellContext`k] + 
            Table[$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`ql, $CellContext`a $CellContext`i + \
$CellContext`b $CellContext`j] - $CellContext`omega #))], {$CellContext`i, -
               Part[$CellContext`numberLatticeLinesToDisplay, 1], 
               
               Part[$CellContext`numberLatticeLinesToDisplay, 
                1]}, {$CellContext`j, -
               Part[$CellContext`numberLatticeLinesToDisplay, 2], 
               
               Part[$CellContext`numberLatticeLinesToDisplay, 
                2]}]& , {$CellContext`k, $CellContext`numberOfMasses}]; \
$CellContext`nu = 2 Pi If[$CellContext`omega == 0, 1, 1/$CellContext`omega]; 
         Show[{
            Table[
             ListPlot[
              Part[$CellContext`points, $CellContext`k][$CellContext`nu #], 
              PlotRange -> {{-($CellContext`glConstWindowHalfWidth/
                  2), $CellContext`glConstWindowHalfWidth}, \
{-($CellContext`glConstWindowHalfWidth/
                  2), $CellContext`glConstWindowHalfWidth}}, 
              ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
              Directive[
                PointSize[
                 Sqrt[
                 Part[$CellContext`mScalarArray, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
                $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], 
            
            Graphics[{$CellContext`lines}]}]& ], \
$CellContext`glConstPrimaryDisplaySize = {380, 380}, $CellContext`glConstMMax = 
       30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -(Part[$CellContext`qMax, 1]/2), Part[$CellContext`qMax, 1]/
               2, Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -(
                Part[$CellContext`qMax, 2]/2), Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], \
$CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 
                23}}]]}]], $CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, \
$CellContext`n$]/($CellContext`glConstMMax 500)]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               Part[#, 3], 
               FE`glConstSpringColorsByN$$55]]& , $CellContext`cN$]; 
         If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                Part[#, 3], 
                FE`glConstSpringColorsByN$$55]]& , $CellContext`cOrigin$]], 
           Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> {{-($CellContext`glConstWindowHalfWidth/
                 
                 2), $CellContext`glConstWindowHalfWidth}, \
{-($CellContext`glConstWindowHalfWidth/
                 2), $CellContext`glConstWindowHalfWidth}}, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], Attributes[$CellContext`uLoc$] = {Temporary}, 
       Attributes[$CellContext`ld$] = {Temporary}, 
       Attributes[$CellContext`cd$] = {Temporary}, 
       Attributes[$CellContext`m1Ind$] = {Temporary}, 
       Attributes[$CellContext`m2Ind$] = {Temporary}, 
       Attributes[$CellContext`moInd$] = {Temporary}, 
       Attributes[$CellContext`mScalarArray$] = {Temporary}, 
       Attributes[$CellContext`numberOfMasses$] = {Temporary}, 
       Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
       Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 
             0.01}]}], $CellContext`glConstKMax = 1, 
       FE`glConstSpringColorsByN$$55 = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]]] := Module[{$CellContext`result}, $CellContext`result = If[
            
            NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], \
$CellContext`massValue = 0.25, $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , \
$CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], \
$CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]], \
$CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.600991920019863*^9, 3.6009919670395527`*^9}, {
   3.6009920245298405`*^9, 3.6009920501333055`*^9}, 3.60099313594541*^9, {
   3.600993187449356*^9, 3.600993239845353*^9}, {3.6009932797776365`*^9, 
   3.6009933046760607`*^9}, {3.6012440341096554`*^9, 3.6012440721578317`*^9}, 
   3.6012447781242104`*^9, {3.6012448176024685`*^9, 3.6012448561326723`*^9}, 
   3.6012449730663605`*^9, {3.6012450799064713`*^9, 3.601245088751977*^9}, {
   3.601245122802925*^9, 3.6012451299813356`*^9}, {3.6012451718047276`*^9, 
   3.601245397972664*^9}, {3.6012467859190493`*^9, 3.6012468229691687`*^9}, {
   3.601246896213358*^9, 3.6012470488980913`*^9}, {3.6012470802998877`*^9, 
   3.601247087356291*^9}, {3.6012476034298086`*^9, 3.601247625026044*^9}, {
   3.6012477383525257`*^9, 3.6012477482580924`*^9}, {3.6012479226070642`*^9, 
   3.6012479616512976`*^9}, 3.6012480156453857`*^9, {3.6013815489528093`*^9, 
   3.6013815749782977`*^9}, 3.6013816959272156`*^9, 3.6013818936795263`*^9, 
   3.601381933169785*^9, 3.6013820135453825`*^9, 3.6013868190332403`*^9, 
   3.6013870782100644`*^9, {3.601387142717754*^9, 3.6013872275556064`*^9}, {
   3.6013872611065254`*^9, 3.6013872614005423`*^9}, {3.601387353306799*^9, 
   3.6013873534428067`*^9}},
 CellID->50523710],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{}}, {{{
       1, 1, {1, 0}, 0.7150000000000001, 1.6999999999999995`, {
        0.9060000000000001, 0.7050000000000001}, {1.0060000000000002`, 
        2.005}, {{0.005882352941176483, 0.07647058823529419}, {
        0.07647058823529419, 0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.7150000000000001, 1.7000000000000002`, {
        0.9060000000000001, 0.7050000000000001}, {
        0.8060000000000002, -0.595}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 1, {1, -1}, 0.7150000000000001, 3.4899999999999993`, {
        0.9060000000000001, 0.7050000000000001}, {-0.8939999999999997, 
        1.205}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.7150000000000001, 3.4899999999999993`, {
        0.9060000000000001, 0.7050000000000001}, {2.706, 
        0.20500000000000007`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {0, 1}, 1., 4.25, {0.9060000000000001, 0.7050000000000001}, {
        2.806, 1.5050000000000001`}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 1., 4.25, {0.9060000000000001, 
        0.7050000000000001}, {-0.9939999999999998, -0.09499999999999997}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {1, 1}, 0.5950000000000001, 8.41, {0.9060000000000001, 
        0.7050000000000001}, {2.906, 2.805}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 1, {-1, -1}, 0.5950000000000001, 8.41, {0.9060000000000001, 
        0.7050000000000001}, {-1.0939999999999999`, -1.395}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.777366739895288, 3.584692259669463*^-18], {Complex[
      0.8932314131932384, 0.], Complex[0.44959720026353633`, 
      1.1229735217654767`*^-17]}}, {
      Complex[0.4384053931754971, -6.356264267742749*^-18], {
      Complex[-0.44959720026353633`, -1.1229735217654783`*^-17], Complex[
      0.8932314131932384, 0.]}}}, $CellContext`dynPlot$$ = Show[{
      Table[
       ListPlot[
        Part[$CellContext`points$45785, $CellContext`k][$CellContext`nu$45785 \
#], PlotRange -> {{-($CellContext`glConstWindowHalfWidth/
            2), $CellContext`glConstWindowHalfWidth}, \
{-($CellContext`glConstWindowHalfWidth/
            2), $CellContext`glConstWindowHalfWidth}}, 
        ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
        Directive[
          PointSize[
           Sqrt[
           Part[$CellContext`mScalarArray$45785, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
          $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$45785}], 
      Graphics[{$CellContext`lines$45785}]}]& , $CellContext`dynTab$$ = 
    1, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJx0vXVYlM/3Po5id4uYKFhgt6ADdiDY3YGI2B0oYjcq2ImtqKhYiD6AoKJ0
LEvDssACijQo9Xt92XNm3jvz+fmP13Vfz3V2du4588ycc9+L3vIN01dV19LS
0m+opaX93//T29956/+sppfF5diSsrWl0sTWvd7kTE8liF9rWWZRvqRE+lE/
2FJqq6S46ny7++UzCqVEiyWzrDYpKD6wyYjS8vF50uqvC44Y7EyiePW2H13K
dmRLX+WTlHd+xVP8elV8lfT7R60OC97HcXEU0m671vKtLeO45+XSy2qni2+1
YvjtKvy7ZBrzbc7vCoZrVf1z86z9tsc+rbIEijuqnyeOv9qphhexcV5Wxyft
jlzf2sON/14KMuR8DfnCtUrueRWZYnPdYGUhmzct9fclvVcVVdfrnU7x/ur5
IQWj299fUFNF8TT1fJJ+s5cPrb2T4VfV80/O77u6dM4Zhpur+SJBHe3XmsxX
kVUb2rcwGKtNeUyyTJS+WCspjjzKrN+2HWaQQnHkcclWr4F1/vt+iCOPr6TC
5oZlyRRHHmc1+5hRkcVw5LH9iylLnjbh4yikbx18+t7coeCel0vjyub2r2bE
xoM8HrD97GRpyMaPPBa4OYQEL0mlOPJY9rC0cOX9NIojj1bJQarXEen8eMhp
k9X2WwNU3PMqMtKpV1j6tgz2ucBjRHbD27l+DEceE310HXw9GY48/hh3Jb3F
KoYjj836Jntrh7PPRR53Trn88GBnFdnlfWWTfZwW5fHWoRNhPYmS4sijnkHp
/Ju/UiiOPFauT7q8oCZ7Hnk8G1uzeNRchiOPBQ0u5y2IZzjyGBfaw+TIxVQu
jkJa5tnx+S77NO55ueR47s60PqfTKY48Ljuv02fTPfa9kMeS2EPDVY8yKI48
zqzeXnvWvkyKI4/prZ52sWyUxY+HTJyfOit1Uhb3vIocWjdPebsPw5HHN9t2
vjvlzeIjjwNTNhdfbsRw5HHZloNmW43YOJHHmi8qdygGs+9FeTzRZb7PlHSi
083o5rv0Mgl5PL/6as27aUqKI48PV0+6E90+leLI4/zo8E/vHzMceXw9KPTP
+g1pFEce30Q0s7mzlH0u8njD2zvy5zoVF0chPQuy+ffuQAb3vFzq8urKplYH
MymOPGb3WLTCYW4WxZFHv2lPQ7f8YjjySDbqbajX9xfFkcfETrn9rrT7xY+H
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
HQ4/nmze9Uku6Dre3/0yoO+6KEHXMfHl/LcjXWWCruPIieTqDRfLBF1HayvX
Ak9rmaDrmNvgHenjIRN0HWdbNplWMTZK0HW83nBHp311uaDr2DsrVCtUKRd0
HYtemu4YoowWdB3tBr/VPVsUI+g6XkZoT5zQLE7QdRjkzZz70She0HXUOlTQ
eMDgBEHXkdGs3GTKsWSKI4/J4ecvGr5Oojjy6B64b9OYlYmCrsPsdPU2r3fE
C7oOu62dAzqExQq6jpTqV7Y7H4gRdB2fQnKifjlEC7qOw8tfjDMKkgu6jpfp
SY0TFjIceVw081fbaYYMRx4jKuT9pw1hOPJ4cWh+nTP75Px4iKuq9ZfEcv55
FRnx2sjN9SUbJ/L467ahvN4l9r2Qx5IbQ0OfurJ5oPfHxWsMa+TFCbqOzfG1
eu5ezviifeRJZrm9MxMFXUfogUeJ/3YnCbqOs6c+17mQmijoOjqMmxlTfCVB
0HVcDM3s2H1SvKDrmBekd+hXozhB1zGk5/6vZ3JjBF1HRqDrEqeiaEHX0cjg
+rCTnaMFXUfFwaneHfbIRV3H5D1O9rXkgq4jbENJn5M/ogRdh2LzphanAqIE
Xcf9fTPdhzSTC7qOVz2zT168Kxd0HQYFNXbsOxUt6Dpeu5we4BETI+g6IleM
+VzvYpyg63jrVui391WCoOvYuO3akd72SYKuwzHBfM2KRQmCriNp3X6z5Lfx
gq4jPCQhtWdEnKDrCOhvunZAcKyg60icF3zo+IcYQdcxfaXlONPb0YKuY1O8
xdjSM3JB16GT2iSzy7koQdfxRNdxsNYrmaDrOF3/gu/tskhB19HTMlRP2hsp
6DqWGpUdfWYWKeg6Jhb0WLJgBf+8igx0TnM8X1Mm6Dr2Xus8/9jUKEHXcbtP
aHK3+dGCruNjdY+3nRrFCbqOPX97doztlijoOkZdaTHmqw7TCSCPL3xdj8Wc
iKU48jjyyLn5JcoYiiOPW0v7TQuuyXDk0dnK4X2DUjnFkcc58x8F+IZFCbqO
o6effTO/JhN0HYOOKD/+Wx4p6Dp0Xq66tW1IhKDreDLufXamfrig69g0Y6Lc
Z3CYoOvo1vz0h092oYKu43XY+s/GnUL58ZB7F/W8Htvyz6vIkNFmvb/5sfjI
Y1Y9l2uNZ7HxI49k4aMb12PZ/CCPJyOav06MjKM48vjC7ejyc4TpQJDHi+9P
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
/R6qpLjTFqez5a2KpB6//+numcziYF6MC79V7NCJrR/TmQ12l0fLyMH7Og1U
PVQ0Dq6HixPbKzavZ/GTq+Y/X6q+4IP1bVcWH/OrpXXPqenGKoof6+PXpOJQ
MpG/C4540SKDxsH1o/NqaGHDBBZ/QdyTHWXlfyT9OWkvk8xSeX7JGK3W10a1
y6D474GHVpZfTyeVp+45HHVj8XG9KT9vn9prH5v/x/N+Bpbl/pI67F6etcM7
lRu/ilg13lLQ4RmLP3P46Pdl7r/Jk8WXjnXLZ/FxfQYEnnWZY55G8dFV85km
NWnq8XT6uTS2HmDfcCOl1VelsvhxHavV2peWS4bv+npsUTw/PwqpwL6/mb8p
4129TmKlqKTwPdPqsXnG/Sfzq1+Tyq8svqNL0gu7vAIyZ7fTmrG7+fHLJfcr
t9o8nsR4r1E1ziBpWsz7/br/M8+4jy06JQvTWszwMer9hOzdGRnaL4HFwXwZ
877H3m3T2Oc+r8IfSdv+ePgGtcikcXA/zKm8d3m/xL5X0cNb2nb1SsmTYfcP
NDZg8TG/1u6y6PRzGIuD+6TOmwy7rNr/xVk5Ud+kTalk/q1bG7vx/6SxnU5X
blqbys1nqbTQziKxzhq2Dterx0nqVXP95jYpk8bBvJveKbZTwelUimeuCDlk
t7NIWl775fklqSw+5l1w+w6LfTIzKZ5aNZ+RZMSzY0WfZmfROLQOr3N60aIB
aRQfkpwTY2ebL/lv+mny5zlbb5h3q66YPEyelkXxyep1Qjw6Kpp/H8LiY95N
sVqcmdkwneIHFzftt29pjvR8zbftT+6l8+uQjAk7/WHoKhZfvW+kEbeklSv9
prL4mHct9Q5Z5tVl83/73YpG5Y8ypa7bQsOMXqm48avIl7HXPjfTZ/Fzq/bt
DCJ7srfm+Aw2/5h39leV6UObZ1B82Kt7HuWOSunJqKB9rhJbb5h3pTnhKe8u
svk/UrUv5RLdL8HNDzTJ5OZHIaV/eeKwqxnD71ftG3FS02bdT898zeJg3rWv
a5i2K5B9bqJ6nyRDbppW8zyWwY1fLsXtGdF16h8WP9piStcK7xDJ88GcG6+3
snnAvJtXL3Bnp0Q2b+p9r5i0GPJEL7/r/8wz5F3uhm8bb13geX8lySe8n9Uq
h8XHvGu1duzOjDTGu5qvf8TVMmlZ06FsnWDevV126t6DbBYH8+7a2+hTX6qn
k5lV55ZCqaCKx7/SirDW7R/tZesZ8y69xriPycNYHpXp/j++PpMvA4u+KnV+
0TiYd6l2L5sdD0mj+KiqdVgktY0qvTvFmI0T887iinJ6y2I2D2dCjULKA8PJ
q9UPTmVnZtE4mHc1L29/NekuG//pqufzpaUDUq/80WPzjHmX1GH7hqauLP7i
qvdXInmT3Xx/qA2Lj3k3bXusm+V5FcVjqnjPkWJtjLrNb5PBr0NyTK8wakpL
Fl/9fk8jgzvYDTt7P5PGwbybP3LK8K/7Mig+pWqes6QwXc+nhlqZ3PhVxCKl
wq7/KIaX7pyRUtb7F6lY0r/PoBcsDubdZifXvjvM2eeq12eq5GtqlxTvweJQ
fdfj+kbF49n3clDvM+RrQxOVaZqKmx+FZKj1vdIyhcWvqFoPCdJZxTC9SQPY
PGDeBZp0Kno+kvGS4m3tZ9engJzpJxsWcT6dG79c6vPmfdel/Rgvw6vihEm2
TzsETNNm8THvmv273zJ4BFtXl8ZM2GBnXExal/XIfnuDrUPMuyXLFxufMmLx
r1Th76VjB4P+3unJ4mPe1X2rE3F/HsuL62kvetsd+kuSksen2vdg8THvrDce
me0azuYZ827windTR95LJVqy/5ePOdJEeN/tirnkZWzL5gHzzlj7g+354Sz+
JfU4SeBk34+XHmTSOJh32z1alfX+mU7xi+p5kBbbNVozqi3jkf5OwmmbqWW9
GY9G6nkm6+/V/L7lbgaNQ309IdPb3NipojjwKDk7nOyZGsDiY97NHO032cWS
rU/1uSWBtD6aa3sjnsXBvPMOnr1tSQv2uUfgfZe0Oa6J78AMfh2S4Ix+eT+m
qLj9IZWMuXZ8iqU/mwfMO/umgzpG2rP4f9V5JL23zfBp6JHBjV9FEj/pzosZ
w/OSRTZ1Sp/Z/2MajUP1nxc7Xm/5kMU/r94HpI0PLg1Y68fiY96ZD9/RorFF
Gr/PEN8WDT2+/kzl5kchKVyLX0ftZPGfw/vOqJHtfuN8Ng+Yd50udm1wek8q
v08SA/O02L71UrnxyyV9o5PaAbmMlxPqfVgKu3eJmAWruP2kkCRvvTt/pUxJ
caLe50nM2JVL4j4qaRyq28mZ1ctdh8UvVr9HpOTkxLw9UWye6e9jjJiSrruM
xYf3FDHemfwooxOLj3nn/yvPqrsWi4N5V3OUh3yOnpLMqcJT4ZzzTzK+4lHt
QiZbJ5h3UVdW1pnRi+HD1O9l0uLmBtmWB2k0DuadZ+5Y577/vd8Rh/e+9Cnx
X6Njk9n3xbyro3CyIF/Z/B+C993geJsdbn/ZODHvClfmN3BfxOIr4H5n4var
i9UAFh/zbnnvjk3rnWPz46peJ2TtzsaDjAxYfKpXD663rdySxYdzlzS/SUP7
vIV8nirIxwNF57wOp1DcRH2uIy8W3I2x7pxC42DevRhl+bdGRjrFH8D9rtvv
lQfXJ6dz41eREYXhy0d8UlC8CN53m6Tw46McFTQO5t3F63WLo9uz+I5V85ki
9V3icyikActTzDtZ2P421iNZ/EPwvovJbxZlUl3BzY9C8l3m0KFPdirF5VV5
miRN6Kzc8Ok94xHzbu3z21ZbqrP4cC8gJaee17wam8yNXy7Zb5jUeIIV4wXu
HVKcl3/EqPaMR8y76OdLL16tSKZ4lvpeQ5wm515xz2TxaZ08anyvHi7se8nh
fhdhb2UxqTuLg3k37522/npjNv4J6vcUqV7DpuWsGoxfzLtLWcNTuocl0ecx
7+ZdM//w8L/nF6rrYxLcE6Ugr3vrc30YX5h3ss167S/7Mvwy3O/8atmN270z
icbBvMvf19v01M10ipsenHvV7k2h9Opc9fEXOv/PeoC8O1jUeIDd9gQ2fvU9
mpie0vOICouncTDvzk2vdv2qAYsP93Tp2/HIW6c78OOUk53Hg/csNovj1wmZ
kBNu8f1VLI2DeRcR6ldnwIg0ir+EulyrAPfFnXP4PP3vnOl7qnLkgFiKn1Wv
c3J+s72tpSKGxsG8C+rh3D4kTknxGeo6ifQ29/CCIZ5KbvwqYrl3t2X/dix+
Adzvdh56tn5wCYuPedd79DKzf//DL9R5pBsrZj3fGaXg5jmbFHbTfuDynsWH
OhK53qWRedB7fn4Ukmp+YofRXoz3w+o6lfR19cZhMUeTaBzMO7NbN6fYm8dT
PAnud0UzlnrbW8dz45dLtsoTP2ebx1F8IdQV/Zy3PT88IYrGwbw7dL+jq8cS
9rlQxyO1hsxPqWHPxol5dzmv4Ge3HzKKK9V1QqmFYaWsv7mMxsG86x8teW/W
ZfOmrrv+JU0MLTsH2yhoHMw724lnLEz9Q+nzmHd+1t+7/PZA3Y+vpzn3+1EY
B/NuBdSrEY+AeqZ/x+dtWl0JonEw75po/N6Rr+cVwPF3kGi+QN5tWPem9LJf
IMXV952fxN72T5ofCaRxMO+OafzOkq9nGodjHMw7w+MThymmsvhF6noy2fC0
MGK+HouPeTdU4/edfD1h/UhDAOfWIfE6kX0jtFMIxTOgnnnLfaXCq28kjYN5
N07jd6V8PSt11fhYwDXHryIj36a8shoeSXF1/TmDhD9o57lzPouPeTdG4/es
cP5VkhngdJ1A3pnGFL9t78Ly94V6nyFx2WcbWKXGcPOjkHQ1fkfL19MF8sUa
fncL42DePV4/PVvvWSLFz0A9M2fk9lG2icnc+OXSCo3f7/L1vAj4Qi4+5t2x
8DqWT7uy9T9Svc+T1C9tCpqtVdA4mHe7NX43zNfzAuAbAcc4mHcu2/sNul+H
rSvo1xCz2RsHPTFl6xDzTv2/twk+j3k3aLzVqls2qfT5//t323w9D0JeLObG
ifkyh8PPwzq34Obt8v8PfhPwqRxOfw+W43cI4C04HNfnYG69XQN8GIfjejPj
1n9fWCf9/++8IwM4HPKU+x02ug+QQ9z+oPo/f5/N1xP5bcTtV9cBb8zhVPcC
fGFfD/t3o2A9II774T1YP4hj/27CkU6OI3xTKI7720lYz4hj/+7Pz4/aIe1Z
PxH3q1eQX4g/g3NCEuQv4rj/jIV8R3wOvPfdMj4/q+/AcNxPzGD/QTwR+ndz
T61bv6NnCDcehfQB9kPE86B/Nw/2W834cqkZ7M+Iw/4vrYD9H3HMX0t4XyCe
D+/NB/A+QhzzcT68B6eo34O0D4vnScTHQV+vKbxPMQ7m6VDIX8RT4D1YA97X
GAd5Hwjva8Sxr1cbzgMYB/P6MJwHEB8J78EXcN7AOLhODsN5A3H1PatA6vlz
5GaPaSw+7gOL4TyD+HHo6/nAeQnj4LoaAeclxI/Bve/i3QsPZ/6Hc7yTFDiP
IY59vUtw3sM4uA6z4byHuLrPmyFthPOk5vhVpDucJxGfBX29V3BexTi4bsfB
eRXxU3DvOwbnYbpOYF/6AedhxOOhr3e8z4NvST3SuPlRSHvhvI14PNz7jOE8
j3FwHwuB8zzlHd6DfnBf0By/XLKB+wLi2XDve5r/qUA7lfGI+95ZuI8gbgLv
wRdw38E4mEdb4b6DuCPc+yS4T2Ec3Cfz4D6FeDH09QLgvoZxMO/Owr2vtKq/
kEPzTg71E8RvqOul0guLtG9exmydYN59h/Oq5vz7kFaj2vnUNlfQOJh3c+F+
ivgVqHPe0N3Saaalgvu+38kMuP8ingF9vSi4X2MczLsouF8jPhj6eoVwf8c4
mHe74f6OeBzc+0ZDfQDjUF8A1AcQx76eDOoP3DokEtQfED8B9z5DqG9gHMy7
MKhvII59vRt17POWr1Vw41eRC1A/QTwH7n1t8/JtNxowHjHvhkJ9BvHLUOcc
07abrnMnxiPm3TOo/yB+FPp6c6G+pDk/Cukt1JcQvwt1ztVQv8I4mHdYv0J8
uHqfJLKDTRdP3q3ixi+XFkF9DPEo6Ov1HTBRdXkRm2fMu2Kov9E8hb4e1vfo
PEPeVYf6HuK9oK/XEOqHGAfzDuuHiN+Bvt5wqE9iHMw7b6hzTq16vpDmnQn0
CxDHvt6Z2l1bH1/Gvi/mHdZnEG8Idc62pdZ3lpqx+Jh3vlCPRRz7egG2pxQu
e1h8zLtBUO9F/CzUOUOgnoxxMO+SoJ6M+Bno63WGejVdb5B3elCvRvwO1Dl7
Qj0c42DedYB6OOLY17v30dEqspzPUwVJgno74s7Q19sA9XyMg3k3Cer5iFtC
X28d9As0x68i2C9AvAzqnO+gH4FxMO9ioB+hOW+pkin0O+g6gbzbB/0OxPuR
4233dckly9a/OLhxaQY3PwrpJ/RTNL9XgtQC+jUYB/POB/o1iCuhr4f9IM3x
y6Xp0A9CfDD09WyMekb0jGVx6O9lQb+Jzhv09RZBPwvjYN4dgn4W4o+gr9f+
lVFWk4WZNA7m3Q7ol9H3C/T1IneljB53is0z5t0K6OvdU/f1aN5lQH8c8UnQ
11s45BhZEcHWG/1dROhHIH4M+npHoP+IcTDv6kD/EfFfoGPRcncq/fSXrTfM
O+xvIt4X+np6tiXOV+ez+Jh3jaF/ijjwKJ2C/izGwbzrDf1ZOj/Q1/sRNq6m
VTKbH/q7DdD/Rbyveh1KufI/w1bd5vNUQXpCfxlx6F+Tr9C/xjiYd5nQv0b8
H/T1yqE/rjl+FdkK/XHN/TOLYP8d42DemUP/HfEL8L4bCP19zXnIJtjfRzwa
+npxoB/QnB+FdAT0A4jPVesTJHfQJ2AczLsZoE9A/BT09YpjbP2fNFdx45dL
CaB/QPwU9PVQX6E5z4VEG/QViJtCXy94pJHekaFsnWDeoX4D8Uro63mDPgTj
YN6lgz4E8Xzo660E/QnGwbx7DTqWMrWOhepvl4IeDPGJcL+rFjby7rWXbJyY
dwOh/454P3jfyUBvg3Ew75qB3gZx7Os1AT0PxsG8ywM9D+Lq90sIQb0QxsG8
mw16IcTh3CKN2PZuUUIXtk4w7xJAj4T4E3jfNQe9E8bBvGsHeifEsa/XBvRU
3DokKtBTIW4Mfb2noNfCOJh3f0GvhTj29dJO5l0/GJrJjV9FDoAeDPFieN9t
HndpZYUNmwfMO9SbIQ56Ngn1bHSdQN61Bj0b4tjXcwO9nOb8KCTUyyE+E3Sb
H0GPh3Ho7+WCHg9xBbzvLjXoVH/e+TRu/HIJ9X6IK+F+h3pCjEN1LKAnRBz0
G6R6v3dZubGpNA7mXSjoFRFX7/M+Uv+LXm/jotn8Y97NBD0k4jfhfVdUwylu
xUIWH/POFnSbD9S6TZp3qH9GHO6J0kPQf2IczLuroDfTHP8jsgP0pRgH8+4P
6EsRJ9DXC2v+4IoFYeuQ6qVBv4p4ItzvXHc0aVXDnsXBvEN9LOLnoK83F/S3
GIf+PiHobxGfBrrNGND3YhzMO9T3Ig51Bgn1w9w6JMWgH0bcBHSbzUCfjHEw
71CfjDjonyXUP2uOX0UCQf+MOPb1nJrdq92wLouPeWcN+mrEs6GvV+20Wr9N
1wnkXQbotxE/BPe7mDb+F+brpnLzo5AmgD4c8SPQ14sD/TnGwbxrA/pzxLGv
pw36ds3xy6XWoG9HHPTz0mHQz2MczLvLoJ9HHPt6hqDPxziYdxNBn6+5rvwk
O9D/YxzMO9T/I459PfQXYBzMu9ngR0Ac86gV6KURt6+Kf5l0AV8D4pgXo8AH
gfhEqDd2B98E4rjO88BngXgB9NHMwZfB8UjswMeBuFqXkkKMwPehGV9FtoNP
BPFx0OeKAV8JnQdYV67gQ0EcfCtkH/hWEMd10ht8LogfV9fV/zsHqX0xiCPv
7uCjQXwE1NN2/jj612MPw5FH9OkgXgj1saM/RjUn81hdEffJLZ7mzd+YyQUf
0JWZd7st/pos+IC2DOqmq/+Y4dhHkLt2uHjTjuG4jy1clZP79lSS4AP629jJ
8WbdBMEH1NktJc/sRbzgA/qw0/DTk90xgg/oX58GxfE9GY4+oPkWH5Y7z4sS
fEC1T2gnP2rLcPQBLX881Hp93UjBB3TCd4HpqsQIwQe05o/qyIlX4YIPqG2o
8RzbqwxHH9DLretaxg9mOOZptGVFQqteDEcf0B3tZr+DZzAc8675kslZBrPC
BR9QvZ/V7x60SuY+t1Q6/OHUr4HtmY8JfUDlR7vM7BLC4iC/E4ythxn3SxZ8
QI9qD9LTNWI80t9XiTt0Y1oMGyf6gN7f9pr54ESE4AMKnGt/4UVUouAD8mqz
OPngB8Y7/buf3lmDO11n848+oK9vc0f7bYoUfED36pKTS0bGCz6g7rMOpp1f
Eiv4gOopUtpNPM54x35B96cWMTN3yQQfULHF5PBeRTGCD+hcnsquvksMN34V
SX44c85TZ5ngA1oc1fqjs3OU4AO6OvfBFvve0YIPqKl52WRZNstT+rtePqnH
Hd6w9Yw+oF99Gk2t7iEXfEB/s4MW3spjn4s+oK7DvEZmLmNxcL86lLR3zJQ4
9rnYLzhZTfHheHQ0N365dDl+g67HQBYffUBHtCLDW/xj80B9QG+eJmqVRws+
oO9X0i4GpLF5pufJZXrjvOMZL+gDsjuyy9gvlcWn9ZNPISW69Rjv6APqV+/d
f+kbK/iAHi3bW7EsmsXBfXJd2ZMDyQWxgg+oV5p3lHFOkuADKjiclZ/YUiH4
gMadGlJjeZxM8AF93ycF11qbJPiAxr0ZnOntxPIF86742H7PHW3YPKMPKMnS
oe4MhyjBBxQXE/R+tU6i4ANy6n8g+ZSS5Qvm3bSEOqSzE4uPPqDZ9c4/K3od
xfkL8qTkB1dKb1rFCz4gq0unJ3deEif4gHIbki8Nzdj6RB/QhH/LX7bIkgs+
oD6DO+dmqdj8Y7+gj6Vr24utYrnxq8gvo0e/auuw9Yk+oLmqh9uXTIsWfEAu
084WnH8aI/iAJvW3OremAVuHVD+wbo/lryYMRx9QiGPzes8TYnj/hfTMMurJ
5Ofsc9EH9MOm0dQZI9g4Me+ah8ye0EqffS/0ARlrpSy23RbLjV8u7TT8nhz8
m80b+oDcOxytrHjA5hnzrueQG2ZDJjFe0Ac0qqHu6YYdGI+0fuJjM32wtZz7
Xq+kYWm5w0ZOZPEx70psvRsY7mbrCn1Ay3R3ycaYJQg+oEG5ehkO7Vkc+jst
b8bX6X83QfABOb6pOWyPHlvPmHf2C8vnWXRJFnxAXrHbiqsbyAUf0NDyDgbD
g1h87Be8em5RnLCQjZP+DpW/b+6RRmwe0Ac0pZdzcQNjOafzL5R2nWyztOm7
eMEHNChU6dCjMZtnzLstZ0ZNCTRm8dEHdGDvlWVLT8o5f0Ge1M/B2e/ZqTjB
B3RB62Vx4z+x/DokmbfPfLK/z+KjD+jQrY+hSS2jBR9QO6edNYxXxgo+oPqj
Hhqciozhxq8idU2dl680Z+scfUCXnJyMpVgWH/Nu7PjVR9InxAg+oA5tKqbb
/GRxMO86d/o0oNUA9rnoA7q0bONVW7cY3n8hPYu0C/s2in0u+oBMD2wjX+Rs
HjDvPu/XGZy7iM0b+oA6l2xfP6FHHDd+udTisOxc1DzGC/qA4ju2ej82k+2T
mHdn7Pe4HAmOE3xA8j83loW8YesE826WZc6esxejBB+Q5evDq0wXsviYd09t
7fX32LN1iz6g3Yqh5MWiRMEH5G141NWxGouDeTf0dUJ70x5ML40+oM6+pQ0X
LYjj/Calkm6uhZPrYxYffUBun8b+c06RCT6gdp96vnyRHyv4gIY4BFk8vcnW
G+bd/kRl9/t3ZYIPSNfi34J2R1h8mnc/8x71a87iow9o8NTimJkv2TrBvHMJ
HhzU7iiLjz6gg7O638x7LOP8BXmS4YXjxtfqxQg+oMOT9SasnxbNr0Oyc5h0
3N9Dxu0PqWRf41OFO7WjBB+Q4b+35ywy5IIPqFXFON3w/XJu/CpSsMTmjNPM
KI6XLPLct/BgHX8WH/Ou5cierbt/Yjj6gOzr/xj8fDaLg3kX+u2C9cH1cn6f
IW06ysfd+W/f4H1Av61s/+y+wOYNfUAf9W58Gi+PFHxAPde8qLdJN4bfJ4mn
f72pbUpiuPHLpavKVaWtdkUKPiC3yy0vrzGI5PaTQjJhwH6PltPZukUf0MPn
77LzEuIFH5DR4McZYbsiBB+Q/dTMDsGDIgQfkM4sxzzD38J7irTepVO/UT2W
R5h3diXKJkW3wwUf0Lzac1ftDmD6bfQBZRcsePnsMptnzLtVQaq4wCtxgg9I
Pi1uS7VN4YIPqND8sH/pT7ngAxpt0+toPye23jDvnjx+YLq4PEzwAS33fq39
2ydM8AEtSvrR/O8dpktHH5Dt0MyVFefYesC8mx2hbfPVlcVHH9CUSverqz+E
cf6CPGngjM+fp1gyXTr2C/RDvn0xrsnnqYL4fvBdYJTB4qMPqN32tY2qdWXz
Q/9eW6ZN5PnkCMEHdHmIUYT7hQhu/CpSbEa2vC4PF3xA3z5fe2d6KVLwAXUw
72l31pp9LvqA1obmdDw7mo2Tvu/MmqUsbM6+F/YLXr7Pf1Mik/H+C+ni2Yrr
uwtDeX+HZBmTMOvKk1DBB3To6ZCoJvXZukIf0It/jbqdaRQj+IBqvS6qU3A5
RPAB2cz9uXDazBDBBxRvsLlFyQm2PtEHZOVwvfSGO/NBYN6N7hMcfPRzkOAD
ihlZfLtDi0DBB2TtEZ22uiJR8AHpu/Q9Pu8SyyPMuxF+knO9GwGCD0hmnhTQ
s0ey4AP6UfjI9lJHli+Ydyd8FSZdfaIFH1Dr+8tqHTMNEHxAUnXPQbPvMZ8F
+oCWbhl17WYpW2+Yd55TfszOL/wh+IAcehnP6//th+AD8ni5MJ6ERwg+oKZZ
yTZZ9yO4ccpJ1Mel+a/u/ODXCbk2q/jOgpaBnL8gTzqlf7aVgyxM8AGFdqtT
tjkzhF+HxOldiMt540DBB5RwOmmenorFx7y7VM0iQvaB+RfQB/TsReDY0qMh
3PhVZFDAgeEZLmydY7+gS0X0rI/jwjgfjUrSMmpbrtOOfS76gNbPXTRgvUeA
4ANaLDeM6hXA8hd9QO62z1qHPpPx/gtpS2HOrHuy74IP6MUIC5N1e74LPiDd
2RcUBWls/WC/oM/A7IeHU3kfk1x6fmepmX+6r+ADKtHdvf1frrfgA/qzN6Xf
oOnM54X9AoOly4sOmzCfEf2754cPWk6+7S34gMzj3b8Nm8fiY94tn5Vk6LiS
+dSwXzB7XopsfEKC4APaJO/T/mG/z4IP6IqzffekokTBB5QBv1/N+4C2Qr2a
9wE1PeYsn1zHU/ABaf4+NvMB1QOc9wHl2ryfoHv1o+ADajhWd+/V0x8FH5Dm
75wzH1ATwHkf0D7tTstDdvoIPqBO7Yftt032EXxAmr8HznxAPwDnfUALSv9+
692K7T/oA6qX8eCOi2mI4AO6rfE75MwHdBNw3gc0ar9To3avWZ6iD8giKCBo
3sRQwQekq/H758wH1Bpw3gdUNmDQ3R3m4YIP6OzhBVfLI8O5+VFINhq/u858
QO7wO+28D8i8aRfT/ATmY0If0Frvi1rTY6IEH5Cbxu+9Mx+QKxcf8+7UlMxf
bVqz9Yk+oNZ3Igo3TpALPqDqa/73d+aZD6gcfn+e9wFJsueqST3Y/oA+oO31
JxY1mst8Uph36v9dBR+QbseCoxktmS/m//6df+YDyrfWHCfmSw6How/oFjdv
uP7vczj6gPh5xvW8juMXfUAbORzXpw633tAHxK9DXG+3uPWPPqD/n7wjgRyO
PqAgDsf10ILbH9AH1IrDkd8G3H6FPqBGHI48pgNfvA9oI6wH3gfkAeuH9wH1
PeibmF/M4uD+dgLWM+8Dsrmx3ehjWxnnv8iTJkN+8T6gk5C/vA+oFPKd9wHl
KcsUw96GCT4g3H94H9C3bpF39EoDBB8Q7oe8D6gt7Le8D2gP7M+8D6hwjHr/
531A0fC+4H1ARUfV7yPeBzQT3oO8D+gInCd5H9BMeJ/yPqA2kL+8D4jA+5r3
AS2D9zXvA+oM5wHeBzQVzgO8Dygdzhu8DygHzhu8Dyjx5jHbezOYDwX3gTtw
nuF9QI/gvMT7gDrAeYn3Af3wbuoyrWY0zzuxgfMY7wNaCec93ge0DM57vA+o
M5wneR9QgaH6PMn7gB7DeZX3AQ2G8yrvA4qE8zDvA7oA52HeB2RZEZGdej9M
8AGdhPM27wNygvM87wM6Cud53gfUGO4LvA8oEO4LvA+oVtyfnC0hPwQf0Du4
j/A+oEVw3+F9QK/gvsP7gBrCfYr3AX2G+xTvA8L7Gu8D6gf3Pt4HtBzqJ7wP
KO1ouyE1zzE/Gv17DXBe5X1A195c8t0yPkjwAdnA/ZT3ASkXvaj0juB9T9/J
ELj/8j6gVXC/5n1ASXC/5n1AeH/nfUDV4P7O+4AmQn2A9wEdgfoA7wN6DvUH
3gfkCPUH3ge0EuobvA+oE9Q3eB/QVN83N4N3RXDj/+/9DvUT3gdkXmm9b93b
cMEHVAT1Gd4HdPPwZa8ELxYH884f6j+8D6gT1Jd4H5AX1Jd4H9AkqF/xPqA+
UL/ifUB6pTfXTVgSJfiApkN9jPcBXfUsejAkncXHvJsL9TfeB2QG9T3eB/QA
6nu8DygS6oe8Dygf6oe8DygT6pO8D2gX1Dl5H5AO9At4H1Dw+6Mzqg9jfj3M
OznUZ3gfkH7C3di/ShYf804X6rG8D8gjes5ni6Xxgg+oG9R7eR/QM6gn8z6g
iVBP5n1AHlCv5n1AF6FezfuA3kE9nPcBYT2c9wEpmq41mrElml+HJBPq7bwP
aB/U83kfUAjU83kfkCv0C3gfUDPoF/A+oJbQj+B9QPnQj+B9QHbQ7+B9QD2h
38H7gELMOh7e4xIt+IC2Qz+F9wE5QL+G9wF1h34N7wMaCP0g3gd0G/pBvA+o
5jK9a/fvsfiYd9uh38T7gAZBP4v3Ae2DfhbvAzozpWvsLW8WH/NOF/plvA9o
wbfW9p36s3WIeSdBX4/3AWF/nPcB3c6poWe+jeUj/ft90I/gfUAW0H/kfUCu
0H/kfUAryxet6nc1XvABTYf+Ju8DOuHuNkuvllzwAZ2F/invA8L+LO8Dagb9
Wd4HZB+doB/3Rc75C/Ik7P/yPqCJI1cFX02K4dchcYX+Mu8Dag/9a94HhP1r
3gd0EfrjvA9oDPTHeR9QPei/8z6gOtB/531AB6G/z/uAsL/P+4DOg36A9wFl
gH6A9wHZgz6B9wH1BX0C7wPaavLDxXlgvOAD2gz6B94HZA76Ct4HtB30FbwP
qCI647Rtd7YOMe9Qv8H7gFAfwvuAUB/C+4DOgv6E9wGhjoX3AeWDHoz3AXWv
4zhSJ47NA+bdMOi/8z6goaC34X1Af0Fvw/uAUM/D+4BQz8P7gFAvxPuADEEv
xPuAtGs3NUwuYesE824H6JF4HxDqnXgfUAvQO/E+oFDQU/E+INRT8T4g1Gvx
PqDRoNfifUCyl3v8nKKiufGryB3Qg/E+IJehNX+o7Ng4Me9Qb8b7gFDPxvuA
UM/G+4BQL8f7gPJAL8f7gOaAHo/3ASWBHo/3AXW1TA/bdTVB8AGh3o/3ASWD
npD3AUWDnpD3AZ07V/9dtFGS4AP6B3pF3ge0cLHv2x2tWHzMu2+gh+R9QG0L
/01rc5PFx7x7ArpN3geE+mfeB9Qf9J+8D+gc6M14H5A96Et5H9B20JfyPqCG
0c5mlp3YeqN/Px30q7wPKHWk5ykrnSjBB7QY9LG8Dwj1t7wP6Arob3kfUHfQ
9/I+oCOg7+V9QNmgH+Z9QGWgH+Z9QKhP5n1AcaBP5n1AS0H/zPuAroH+mfcB
VX9Tx9/Fgc0D5p0S9NW8D8gQ9Nu8D6gE9Nu8D2iTdu2d/yLiBB9QQ9CH8z6g
76A/531ALqA/531AEujbeR9QEujbeR+QB+jneR/QD9DP8z4g1OfzPqBvoM/n
fUAVoP/nfUDjQf/P+4DQX8D7gFqBH4H3AW0AvTTvA7oHvgbeBxQLPgjeB+QO
vgneB9QOfBa8D8gGfBm8D+g0+Dh4H5AV+D54H1At8InwPiD0lfA+IPSh8D4g
D/Ct8D6gjuBz4X1AxeCL4X1AC8BHw/uAin6XbDN5z3DkcTP4dHgf0OKrTRL/
VSYTp4dTO79ZWhP19lLc0HW23ZNTSPL8zyYWidpe+H5PmtDtuGV4Mv5dIfq8
UYsDfbempVAcn/eyvanXKj+Z6Hi++Hvyaw0vPD8nO9yqf0mbxUF8kv+ZG1lB
9O8ZeaG+NDq0+4F90+PJwnFLVu3YVYPiSuMlJq30k7jPVUqHh0/rf/K/+zji
6Gu4e/tFn1mt4ogujAef9849diajDftcS6jz997v9TQlOY5E9dM6c7s5i/Mo
pF6zb+b07zF5qde/o2edtz32aZUxfDKsW59E1w87eyUTZ5hnjF+nw6q/jXuy
581hf+5yfPuUog5sPkF/TsjB9s4dK5Xc81nk8+qJTj7n0vj5JDZuFo/uu6fz
vBCXpudmLFyg4nkkR3ZdWHD6pIpYqf/+F/1e+W4OIcFLUskqwJH38U+iKjbX
TSEPNf0a9O9AdUld92jYeW06D9KX4MOfuqbROLhOBn47/WvqQAXFcT28+Nzx
kG5RMil0HX718fZq9HnDL/d3ND6YQpJgfeK8XZ1yXX/xPxYf18mHpYf0Z1Uk
c5+rlNK3Du6sPU1BXnU+2fvzl2r0c9uE1N38eEMKuRnSKHS5UQ06/296LVgc
9DGdxsH1kDYmf5Oqgo0f+d39edP3VfWVZOPlWJ+wJtXpeGon5D3S3pFC1zPy
+LbsnE2N6SoaB+e/AOa/VyOjOemLqtPxZ1erO2jQ3RRyA8aJvH/quK7/+G8s
Ds5/z8azIyx+svnBeetb4t7oXjMVyTy4N6v0SXX6vaa4TprWsZqSyGH94/pZ
uCnkxGB/Fh/nZ8ONplJl/QwufhY57t3+w68b7O/74Pzg38Ny1tx/yJU5u5v2
eazi1wNZkD9r3SCvDH79kOD7w4K09mTw65Nk9L+cNjZVRXap/y4hXZ+Lgt5V
f/snhTg1C/yadKBcQvx89xFJ/v+U9Hlcb11+rNnYUpfhuE5aPl84y+iEkjSp
WPenbrsKCZ9Pn9fJfMGsVPo88m79Z2nr3GGpXHyltOHQihWfu6eRkxmNdAa8
rZAw/tqvsSEP5ex55GVMO29VtUnpFMf5HP9qTf6xAypSI/KF6cKplVSfPynd
SHnhfhp9HtdVSeyh4apHGeQ4fC6OJ2lDsxmH67J5w/WT7tt7/EzHTIrj+vF6
OMxta/ssiuN62J889elT0yzu+SxyPVcVeLEkk59Pov9v6xL3aZn8/JNZlpXr
y1dm8DwSx259XzrNUuHfnaTf6y98L/i7opTfeOfYQ7P6pJKPb/0OXHIrobjO
VYfnqoFp9HnkcWPfGZO6xqZSHHmZGfo4Ptk/jQxxsXriNekvfT7xmd/xDdks
Ds5/j8mZtwanp3PxldK3NU9tiW4GeXW6dniG8i+L39k5omYYex55H/c3MPzz
qEyKI++FHvqpESOySK9dj0qb7f9HP7fCTRZa/F1Fn8f58Zv2NHTLryzyEHT+
OB78O0f4PPI+w2rP+Ou9flEceR/48OLN/dUZjryHhsqzum7K4p7PIvcvd4kN
OZlJPCdPjF97lvHYMD8iILO3ip9nEnbux/aH6zN4XojBcCftFGMVzy8ZX9N/
inbrdELUfxeY8qv1ouWwH8vTKI58jQvqcqT1XPY8zv+b9bU8Zu9RkcVV+3MB
fX5Nbv+ixG4q+jzOs3zvfHL8fgYXXym963umwR+3TBJdtX8W0vi7b+z99LAV
ex75PXnYedTrPVkUR35Ti8qdZVkMp+/lrs+fT81jOPK1w6+N7oCDDEe+bEeQ
pg7vMon+1EzzVa9L6Xxu/djuyBh3Ng/IYw/rg7U7PM7g4mSRM9Z222J3qeD9
m0/H+SfMI63ef/zeND657cwUxovCenOhcXQaP89kSLuxWvOmpPO8EJ2mLbde
NkvjeSQlNwL8W9ukwvkkn/I788LImSWb02EfzqZ4TvUWm2XNVf+dvw72Hbu3
mM6PdXDSqX+6WTQO8psVUrpIy0pFceSrMNzvzJ35GaRO1b76hz7vYmiY5iOx
53E9FMy6ZehukMnFV0oRI5/NOXOP4cj7tBMrimt4MRzn89Ry59jt6xmOvMd9
WFxR+00GCa4zKjFvfBGdz0t9Hnp8ap5Gn8fvW0f7fM0/LmycuB52Xj8QLbNK
h/fFHzqe31eTBtlfVJFJBYra7RRFlJdO139fO32czT+uk331Gtt8MUzj4meR
q2dblDRsk8rPJ+l+csxNl/FKfv7JhDX5V3w/pfD8kvlr7y7buC0F8v0X5feD
yaYBAZ1VZGlVniop3iznvOtxExXJqDrP5NF5mLDo5pCV2ioaB3m8ev3Y85Y+
DEfeWyyw6j/ZMIPiyG/nGa0VDiYZXByldPC5y3afJBaHzmf+6ml7mjEc+R04
rfbsHfH4Xs6h85aa8sVV3o19X+Q9+55Ogw1LU0lR1Xk4l87n8nrf73uEKejz
+H1b7Ugd/jOExUHeRz28XXlvs4JsqjqX5tH5dwoZfXPhbxYH+e35yHb+3e3J
XJwsopgYUm3v7yTyC+YZ+arwbnCnj14KP5/kRoNzbm/9k/j5J2vkH3Xl+Uk8
v6S+W0bLuM3JxLpqPaRQfsd797h1vq+K4sjjz23+f58OYTjyaByzYsrq8HRi
VPV+zKTzEBgytdunFiw+8rsj6FildU4aF18pmTk20dl3IpVMrMqLNDo/dTtN
2iO1jqPPI+9fR86oOPgiheLI+9r2r6+uOZRMTKv2NxWdz9nKbfWCDePp88j7
5QVDngZeTSBDq84bGXQ+ey7odGHkgwT6PPL+5Vzuoz91YymO3/eHm2pPzVrR
pA/MA/3d0T53504dkUSfx++1s52N11InORcni6jSvhenjomG+2Mk/V6e8LvQ
6vdLFuXR8OB+/ag5yTwvZFyT+98vtYzleSS9x5ovXTU4keedWCR4mx+po4D9
gc2PM8yP+vlwuk7KDWqEWe9MpziuE+Ums7AGnmkUp+euos+fDWxTyagqXuR0
3vIMA4efLwymz+M6yVrj09T0YAoXXymFv7VLLaqbTOpV7auJdD5nDI4qrWwc
RZ/HdbKgXvfUagPjKI7zOSxtdXJAeCRpV5UXcXT+3y6ef70xYXFwHlI63nXI
VAWTRvC5OM+26xvdGL81lj6P66R/I992tU1+UBy/r+X5vNU/+v0kw2EekJfi
i98777BMps/j9xpXNHbguLahXJws4tTPZLnlpyiypWqfUVAeX+XGLTH5797N
zT+RBXU0+GqYwPNF6u/ov8kxJpnnlzy9Ynw3v4GSrODmIQnmQQv+4XrYN9Hx
9wTtNLKxar8NIYh3NE7vtmOhkmxX43R+9HZv2Lv29Q8aB9dP/5my8qm7lRTH
9fMx8/nrKeYKUqOKrwDU80gOJ0OSjW8oiE3VOF/TeU5rU3xfvyKQxsF1pbja
R+dVtUTuc5VSjR3+GbVmyEmvKl6+03705XdddO+sSiKtqz7Xk/Ky5NjunKH7
I2kcXG+rvo2++cArhOK43ly2nh1aW8ebzKga5xeC4+no9097uQOuny+U3zaA
a2n8c/QM73it3e2aN01Gwjhx/JlKp14t/oST6jBO5P28blvXs2VJNA7O/y0Y
D+I4bytg/HPV80nwe2XCfHZTzz9dP/Yw/xgH56c6zKdm/CySBPO/A9YJzk8L
WA/7YJ3gOuwA64dbDwTXA7d+CL9+MA6uz92+XYxG/X1lgvNp2drPYLS/u8lS
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
5V2/lTHnkgW9YhT8Xj2vV/S71thnflGYoFfc1qC9+9++SYJesah16+vrl8cJ
esVE51mSwYZEQa/opp03rfHCcEGveOX9sbGd98oFveKQS00lk1WRgl7x4Wer
t11rxAl6xZlEcTS5MlzQK462z2zS0T5c0CuG3Di97erXMEGveDx2XNe1X+Wi
XtFD32xAeISgV/wB88/rFddG2ZWb68gEveK80043z9+SCXrF9sZHbi8/ES7o
Fb1effntvSNC0CteUW6bnTU8QtArNnD8sNn6q0zQK8bGHDPwcY4U9Ir2Jmvq
bQuXCXpF/N1+Xq9YsfRynzQpStArumUfLfzSkeexgCgcWrzYYR0t6BUtnStC
blyNEfSKBpEPsjz6JAt6RYe4Z88eXU8S9IoGm7et2DAxUdArxs0tXBxvHCfo
FRumbzGrIUsQ9IohsQd2Gb6JFvSKY6bPfzo5K0rQKw7M9al0WRsn6BVTf7u3
3BMnE/SKi19MHRa+WiboFauX7Nwz7FKMoFdsbeVa4GktE/SKq88UnUseGi3o
Fff3Uug9/ikT9Io6tgXVa22LEvSKCaten+00Ry7oFW2165ocWhkt6BVn6duM
eH42RtArNli3sXzez1hBr7gjyKbItm68oFfE78XrFU2t5Db1LiQJekV3J9mg
NZGJgl7x0qclbTtlJAh6xeKDvfdei44T9IppUZWPraax53H+3T4u0ovpESvo
FU+mbGhuq4gW9Iquz/ff1v8UJ+gVm3+utFlYKhf0ivXfechqr5ULesWb1ovK
TSewz8X5WTTzV9tphnJBr4j+Pl6v2GDc9cChpuxzkffrK/fuWH6T4ci7i3vl
NXOzaEGv2KKnke8C/RhBr+i+/93mlQbxgl6xhRS+5ewYft4KyMbe8S2e347j
+SWXeg2wWTswQdAreo/OdenomSjoFctUH7K0xyUIesUlG/f75YbHCXrFGqHL
Bj7JjRP0ihP2Tr0/wj5W0CsecTMe92pmjKBX1At0itBJjxX0imMtOx08PSda
0Ct2Kpk3tYGjXNQrTt7jZF9LLugVBzoeNf/5I0rQK4YPsikrio8S9Iq3Nmx+
1s82TtAr9uzYe+zHCXJBr2h7dteBejrRgl6x6FruxaZaUYJekZw5Y/KruzDP
ZOSymIAVi2IEveLp1xevDe4WJ+gVdY9WHspenyDoFUfOr7/9xNV4Qa94rk/p
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
hv1tAjrwLZyncHwng27EcxD2dyjozMXkPFgL769RvdoJuATVq2Erbo8csULO
9GrAqHvGQ2LkTK+2GKE95olTBtOrtrEjV1r/rGB6Veu0XjvzNkqmV80m15tl
3SCT6dVdo2ertEPlTK9eKgiQG+oqmF5F3kX1qsea4RYe7xRMrw7a9OfLV9FK
pldNrB5si07JZHp1XvS/9radlUyvbvzbssxwbTbTq3Mndr5x2E3B9SrwW6pX
dY4sarRsex7Tq6qnOntbFmQwvTpNu2u9gs4Kplfn+T7ybRimYHo1sUQrwtFf
yfTqpMe95YPkSqZXmxeOXTPzfibTq0apuy2DviqYXkVfKNWr1SPatU+qSWd6
NcD6SZWPYybTq1d3vz2wxk/O9Oq0vE0+XpEKplcvw3fNqF71mG8mP5GawfTq
hoSQorBFcqZXnxi2bn8mPZfpVcwfUb26+k7sjEF5CqZXO/v5X2g4IIXpVS/L
V1VGk+VMr3ZxX9m6vmEq06u+waEeZSPSmV7tbHtwmfJLCtOr6feGZsvnpjK9
WvPTsunJoSlMr4ZB/pfq1a3d+jftEJTB9GrWqhrPSbvjmF7ttiW1R48HaUyv
3volZ8doz1SmV9+0utc8YkIy06u/brAszPNOZHq15ahjhas+P2d6FX0CVK+2
hO+5U736EXwLVK8evfquosw5menVluDHoHr1N/CBUL2qA/4Tqlfvgu+F6tXz
EH+qV6vAx0j1ahOIA9WrAyFuVK9WQZypXvWJe2W3tX4q06tdYRypXt0G84Hq
VVf4XVC96nPDZnuD6jymV9/APKR6NRXmLdWrnWCeU7066anxqMEd05le3QK/
L6pXdeH3SPWqQ+2sa7/WJjO96gbrA9Wrk0/EOjX7Xcn06kZYZ6hevQTrEtWr
uI5RvXoF1j2qV5PhO4lUr76GdZXq1cApP8fcfpzO9CruO1SvrjU8F/G7Ry7T
q/oHnZflzVUwveoI+wXVq7i/UL06F/Yjqlenwv5F9epY6wP3bMtymF6thH2Q
6lXMo1G9ivsv1atzYR+netUU9n2qV/G9JKpXHSJutn/zTMn0KuoNqlcvvdCd
G52Ty/RqKOgZqlefRC89s3RXPtOrmFeievVLnNcvVtHZTK+ivqJ61Qi+G0X1
amvQaVSvjgVdR/WqFuhAqldRN1K9GgE6k+rVBMhf4Hua2H7vx22duroUiufY
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
fow3Aj+kvPHtcf3cyF0F0v8ArCRTaw==
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
s0F3Tawn5UsrTlRM2jlzvaMbMvPB9co9RbZ9OteqHX3MnJ2TeI2agGW19rJ3
soGZeaU89xjoMtAblC+lHZJ4z8SJ47vSxDLaPzXBXanrF7/Id8q89z7jmZvz
cMYK9n9Xa5/Ldwh6T/rvG2RWM7aNqfeo9upSnWnorfC/z02PBjalPm86dzon
n8v2gXuQ+S21TIxsShsDvVn2J7yv3ltnWefxdJ2jxLHhBbLb4V3kv7XObDuW
yx/JvFeraz8zlpGR6zp67mbolvBbJtZLrRLXbEZEjsfXMaZtscezEZys+QF/
oL0h/w1cnfva78j/Svse+lvl+VPXvGRP18GbCL0e3IdnrJduTyw/WLYj9fzp
fdfGntuGXC9hHRcUvAe0F36NnWf4DbwwcazUQvop9rypnvFD6hrUl7lp6e3l
4Oex11d1qvkF16CW5+5Huus8+SuJdUt96ZXY51E+VqOw7mcmvle1qtWp63ey
R2uglzLmNuzhuWCeeX62pJ5/Jbl+5FnPxNbnqs8pT618tWqpivcVv+8CJxdc
n1Wd9pCgZ6RvJqfOG0/i+g7+ty1xDmIC/x8N9muU/O7ItRblo/7RPpWfKTtT
4pzCiCAjWdlz2XX5jl+mrisuzp3/fCFyfVP1SsmvSm1D65U4fpPe0j75KHYu
TrZVualtiXW+cis/cW14WPdZsddxdmw/Sf7SePoel9nflj8zJ/Z+UA5W4+mu
MYD/xPZHdmhNCrbRstUTC2FOZMe5Ni5ybXJu6rrubN5lSvCXPtY5yL0PVJP9
O/F6aY50LvpHrqHWRe7byOd9d+zc1y6wajhHiqPrcM+qyLVVrfXf2ne5nyu7
8zY4NXPOrznzPy92Hlvvrpq7ahBTU9e474Yel9oGqeYwJfceUP57Ru58hdZn
QmYbL1svf0L9K04cmbkWr9z1y7FzRFfD/zTzu6u++TY4PHZddVjsurzGo/z6
ooLft15m+jD63sJzawe7c07metCt8q+QL1O0PmqROX6fAX9v8N7cMWEjZMbm
ruXoG4PLwOsjx9Tjc9dvxskfpJ9miXXU6UXnjxQ7tIxdZ1FuvJg59lRuIU2c
x5NOl98lff9L7vqI6kTjwZ158Gn0Hpl1/M/wdtPOSKyTFc9+gnxlcGLuXMn4
4MMrt/0avH+CvZddG5w6l/4kWAJvXuTzvFdmXaQ45Ygs+MOZc6Qa5+HgD6WO
i9eDTVPnAO6h76tT16Y1V61S5xPapY6lFVMrB7621HG96qDbta7Qf4K9csfA
qhs2KDpfoBzpawXXHl8OcbxsnGzd0uB3rcwc10+TKZLNKnUdWXkK1ROVt+ye
eTyqeXbOPWaN89rU8yk/qkbmmrXqhjeAF8l+Bz08N7d+Ue2+UHRso/xb79i6
7qnY8vJvW8uPKNjmZMg+IH0UfDbVdFQnfSjzdynaqy+B96XOI/1Xn42di14T
O7+lc6rzenTmM7Kv1kGxXdjz/9UKpT9y1/LuES93fUS1uDehJyWOkZWvVc1R
Ncm3ctf47tK+hX4pd418pM5QwbmI2+W7pa4lvps7D3OMbFxqXSCdoD3fN3fd
SLGk6uDVw94oYayTwpjvj33WVKM8uegx9Qj7SzKyo9Ny17FkC/6KfQalg/ak
nhPtw/JF+3nKJ2gPq578au58kfJNp6XOGap2XbVof0P7a72+YUmdZ+iUOp+j
etYg6FryFyPHHa3DerWVTS86X6m475Si69zKae/UvAa9rbhS8YtiyyOLzo/I
J3w0ds1aazMod61IuYUDwjoel3k8+v6iS+5vQurBvxfcXOocmr75aJbZbv8r
nyW33y+f+S/k5iJTDrp2Yt9M8ab0geom9cBlBdt2FVEbJNaH8smkAxVb/JHb
t9wVOW5dUbC/sFfRz1U/V2T+ZqJ55PzXMYn1zJFg48S6VD6NfGDFH9vp86LM
OXDlVKUL5Rs3BXvqnEP3ip33l4/XIpxx5Wb7prb7Ok+TlbMq2A+XP/5xwc/c
Cr9N5nNWtuja0C3KGcpepfah1uT+Rkh5cuXLdR4Vlyk+ax/8BdWT1Kf8nwbS
dYnzM7ITipUUB/ypPGfo/4vM45FPmhZdp1atclRuHSFdoTjx0sTPbZu4NqR6
U03w4iTE/rLPWpMSy7QJPrl88xbB91OMPC/4XXquvpG4DP6A1GskH7ht5vVV
XkL5iQ6xa8Q6z/Nzf9eyMJxf2Ud9f/Szzmhk//bH1D6M/NttQQ9LH6s+rHry
nHAudT4X0h7PnSPWNxLKXavGrRzTqqCvpLeUy1b9XbXvJ8I3IsoBKo+t2u7A
1DlG5UhPiV2Dk2+zNfg82hfTc+sffePzEHSdonNkyuPtp7gi+C0buH5C5Fyr
vpVSvlF5R31vo9qxasplY/PLBP9K+a1JWtPU330prukTfFf5sNo/r0FvSB03
KV5fm4dvUSJ/I7AjxLOqux1fdE1OuYiaRdeEVCNW/VH29EBkaoT6mb5/qEZ/
jSPXqRUPKC5QXKFvL+Qb6DtAzeGNkb+F0BnXd2XbpaOKzm8qL6fYQfZhVe5v
R/QNifS2voPSdxT6Ruf32DZRcZpyncp56ps61SRl3xVz6NtJ+eSyGf8H6Th8
QQ==
            "]], 
           Polygon[CompressedData["
1:eJxFm3fcV+P/x899n8M5zuf2tVfZISUhZaSBUFkpK8lMsmeyJfnaCkVGSEaJ
pJCUtJBklTQ1jKJCdsr6vZ693t/H74/r/lyvc515Xe/r/X69x73T2Zd2uKQ6
SZLj0iTJ9HtQkSQL9dscUJMkjfX7h7pr1PZXv4/GG1QlyWvqN9D4jDJJlsXY
35Uk+V24kcanCzfR+BT91hXeTW2y+hvo+rE6/xc970udv5Xw28Ij1f7Nk2Rj
4Unqv8Q5wl/rvMHqP6X2lfo/6tgw9Zeqv1DXpzp/SNzvK+FM+HXh74QXCy/T
78PCA+KaFzTeRu8yR+/SVO/3t+43SmPvqK2vsd+FR6g/We1P9QfrWEudv1Dn
N9P5j8f3g5sLf8t9hA9U+0b9X/X9e6n/tvr7anyUzj9K+CvhlsLVhb+Vb95a
/WvUttT4ixqvp/FB+i2FN1B7Uv0nNN5M/Y/U30/jP+Wej2/0LYv0fe/p+GEa
Pzzm/D86fzzrpfGlGj9M+BvWVWP/Cq9lDhLPIedsFvP9r/rLYv5GC09T27Tw
ekxU/x+Nf1PxevKtfPO76v+l4zM1/qna3+o/kXmtWfOn1N8y1uN9tTrq36N2
gMbe0tje+p4HhZsIjxLeQ3g34Q907htqtQrLC32ObV94zpi79XT+8pCfKcKZ
8ArhG4Vr6X7jhffR/XYKeftQrb76e6h9rP6baruq/7WEfy/190Y+1P8utzzN
07fM0f3e0X220/22jTVto3v+od+Dhcfo+tbCvwm355uEjxD+VbiF8Ejhqeq3
Uv9Qtb/VP1Ljf+r3BOEpGm8rvFb4EOE3hQ8VXhb4OeH9hWcK1xe+W7iV8Erh
Y4T/kawdIPypcGPh1cKH1FgOWaO/hQ8WXircUHiQrj9MeJXwscJvCB8u/DOy
LDy8sIx9KHxQlWVvJ+EBwrlwD+H6wi/H+6zS/esIPyZcCF+g8evUtlG/n47d
p7azxh/S7y469t/Ce26WcOsq78UdkQHhTdg/ut+uwgOFawvfpPFenKP+MB17
gfuwB/W7mY6tKL1nhgtvVeW9tFuN5Q75W6nxusLPZdZJNxeWsRExX8gee3IJ
61LlvdpCeLHw/sJ/6vqKcGfhGuFTkEfhDsK/SUZOEv5LMtJI+AfhT3T+Nhq/
QXhznf+l8NbCV8f8XKjztxK+Bt0q/IXGawv3Ft5C+GvhLYV7xP276vy1un9D
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
flDwiSOE/w/Ritdi
            "]], 
           Polygon[CompressedData["
1:eJwt2HW4VlUaxuFPztFz5ng5ijnWKMaIPRYGZaGCheiMCUgIIxKCImONgaKI
dIqYiIiBBYiK3RioNChlS4qA2HM/1/7++MF6nvWu2Huv9a71nTptu7XoWqtU
Ki3ApmhVXSr95v//VJZKl+KzmlJpGO+wTUqlGfTH+Im3AJdUFnGJv1DMfWgg
bg3vBzxBj0F93of0dKzX7jbeZOWp2FHdNfTFVaXS/vpZaDIL0JT+J38Or0Jc
rcTSA7C/NvPpBbib7iL2CHG/arcRg40xndeP90xFqfQsXua9zruJN4mejI/p
/uX+JunraawW14X3V157ug0uoj8VO1jbD7X7CIszJn8+7y9iqrEXvZD/tvr3
MEjdDLo7tqC3wiF5t/QdYvc1xuPaTcAK437Lf6g8xnS8xusgblNxncR0xMK8
d3EHiVvqWZfgHPq7ctuV2q3CRronGvHWi1mL9nRL/bXTT4d8I3XN6R/432uz
HGN5X9OtsZ/yfO3moUlisEjMUoxIHf057lZ+n/cBXje/fvrcz5yfyhrASl5b
cQeI+1xfn+F0+mZxdcRNFPMkVolbyr9X3Fx9zcNbvHm8YRmPXoBv6Mu0rdb2
bu3G4Fr631gv7iq6V9Ym3UHswbwvjLkM59HHYY7ybNRV15K+XOzt2vRDZb49
3RPbKffm3Yhl5tKdtyWvPz0AX/OGlPfHo/T4xNJX42+8gfSd+ErcTeXn7Uv3
QbeMibq8R+hxWC7uCl5t3nB6BL7l3cLbkzeFfi7fjjecdzhvJj0LP/O+wyjl
kdhJ3fVi1vJeoqfhQN4gXifPfKhnX+0drMCAmmL/NlQ/W9yn2MgbwTuCN5ee
h1946/Ca8qs4SN1gMXfhSOXFvCXJCWLaGeNAYyzW/yI0p+8U96L6FyqL+LQb
io/oTyqLPZG98Z7229HbJgfp4xjeMu0/9f1nYyhvFn0lf+v0I240vteuD29v
3sv0K/iRd111kWuSc55H3+piH2Y/Lje3b9Ff3PMYq/+Hcbu6t8QcLnbnvM98
C14Tujf20N8zvGexJs/Lq+C1pVtjPm8DPqgscmfWSNbKsViqn7q8vfFhcqJx
zuRtbdwtcQXdB814p9NnYCT9HK7mDaaHYIq2kzGgovBSN0XMiLw/els04d3I
m4huykN5w5IT6dvRnLc9vQ2uSo7Eybxd6B0zrr668Y5MLq7IP/rgzcLx5n9c
OZecVV3OJ6XCa4SZYi7g/cprTDfASfRx+Z68A/LN8ZG4xsnFyvslH6o7lZ5q
3GuUhyfn4Ll8o6wj5YHoqu5x+nSxq5WP1rZezqmaIvcmBz8k7gFM5T2Fm5Vv
zbOqe1bMpKqiHK8Pnsn5VlXkuOS6ZViZvM7/LLkf9yen8GZXFWsxa3IOvqKn
iXtMeSLuUPcO772qohzvSbwk5hXeDZk//QTep18qe7fRt+DpfF9eL17f9IdJ
NUVeyxmwCV0r37Pc3428flm7Ofd4Tya38UbSo3Km0O9iQkUxbsbKmAd7f7PT
n3dXwnZ0R/6GWsX5kXOkV/IuDlP+kbcGA41xJa8h7wd6FdrkTODvrf+90DTv
lndtcq/yP3j7YIyYw4wzj1dlzM2wO32vuHa8+mKOyjPTQ3A+ryF9TN5/cmJV
0XfGqIO7eHfyzubtQe+G/+X5y2u3Lr0vemdd4FzeEfShuEfbo6qLXJOcUxvv
8g7h7aC8Pb5Rd2J18SwZt6l2zbIX6BOqi/rEbZO8SNerLu5Vm9M1qEvvisrK
4k6Tu82h9AdZz9m3Wd94paZYl1mTF9Mt87xZjzhN+VR0zLqmT9F+ed6p/vbE
0fTx5b11Ft0CZ9Ndxdbj/en7/IYhNcX+yj47U0zz5Pec3eJa8P5ujJ1xHd05
OZD3k3brMEjcOdquS27SrlmehXepuF/U/4zG6v5Lv1pek09lLefulP2MY8vf
aE+MTv4qf7eT6VMwjvcQTkr+woXqRiUvGff7tDXmbjlDqos76+9pS5+I0+gz
cEpl4aWuNd2s/K5OTQzm5m6rzwuSr4zRKHmC90iemdeWbo3xvC+rij2fvb8E
7/Ae4LXntacvwaO8Cbwuyp3LuTj5OvPO/DvxLsvZUlXkrK5lryMe07aR+S3J
eja3OviA14C3T2XxfTP3PMMM/oGVRe7Md873Ho2jnC9f8L7MM4t5ojxG8uQg
vJg1L+5C9a0qi3yZvNkQi5V35+2K97W9F4drc2RFcS7lfOohbquc92KGZD+I
eZDXiLeOXo/JdC9sz7uNviXzEfdF8q7yrdhCXWcxn5Tv1I/ke+OF3F2wa0Vx
9uQMulnMg7gk92bepclbYmZnbeirCdaqa5HfEPhD+XJe99xDsiZ5VcbrkfsW
Fmdd8RrzNtA/YSr9r/J6TtwVuIRugz95V9I9sbSmmHfmfzHdEufTo/I7pbL4
TZLfEvlNMTL7X3lh7i/4Vdt7eIvST/keNpCemPueZ+pRUeTp5Ou+OEt5J94O
WUe5G4hdk/yn7TG5n2n3SXKWcv1ybkoOyt0ufWeMZbi/ungHm/GG0sNwVXXx
ey2/206gj0VT+oaq4q6QO0NtDNd/x3LbrmIuw+c1xV7KnupMd8GimuKelPvS
Tcm52ev0XbiI15Xulv1RVeSs5K7L6e4597R9k9ebNy3nIubmdwbG8GbQH+MN
cW/kNwNvKv08ZtIv4HreDclVOVvFzeG9mPVUPqezd59JHkruzx7kjacfEdum
oti/2cf38ZbgHuWZvFl4U8zb5WfLnXB89lG+Zfa0ciucl/sY/RR6Kl/EOz/n
G/1Y8gGvA90OE7Qdx+vEu4A+N/mA93DuRN7zL1kruVvnLBI3OvcHMe/iVXG1
s8aVf8/zqzuwuph35t+Y1wD9q4o7ee7mX+nra4ylHyjf79fmToyn6XG5j/I2
0j9jWnXxLHmmo/VVD/eVz9WcCyfQJ2Jsfn+U81ry8/F4kDcluVd/q/S1En8k
l1QXfwOItxoTclfL+9d2vXYbUJW7c/ZgReGlbpWYNbmr5OzhbcTmieGtqCh+
6z5UKn43r8DDuYPw1qIkrgevgeJK59H3aEUvxzjeajFr8BtdP/uSt4u57Yjp
5vx/oVRjhg==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
iWNn/a3a2MhxnPxY6aPm2zu3nflXN8H/A8d+GuM=
            "]], 
           Polygon[CompressedData["
1:eJw1m3XcVFX3xZ8ZuPeZO/ehUZAQCbEDxI7XVsRAECUsQjoVEEWlBRS7sFBM
LFQERSUUUQQL21dERVHEwA4M/K3vu/bvj/OZvebcuXPmnnP2WXvtPc17Des0
tFhRUdGxWkVFdb2uSioqinqjmtprsutkFRXXFioqGsruUlVRcbVwqr73hGcJ
/1mqqJik/uFqX8i+UP0bZL+t/tvV30avDwk/rNZO9ulqT8p+Sm0f2dV0/RjZ
l6tVya6l9y6VPUWtpux1uudQ2RPUPpNdQ9dcIftCtcrM3z9RdknXnqTv+6Hk
Pq7J1f+d8PmyL1OrEC5ltnnvb/UlwtNkN9LnT9Xn6+j1buF71OrLvkT9v8l+
TvaN6p8q/I/wJ8J3Cd+ptkb2Rr13sfp2yTWGgp/drerbQ+89Iryf8FnCOwjf
J3yYcG/hbYVvEz5C+BzhnYTvFz5KuK9wU+FbhQ8V7iPcp1xR8YSe/0tqQ2Tv
n3isd8fzbKbrb5d9rOz+ur5V5n6uO1u4ifAtwgcK9xSuofE+IdxZeJDwYepf
ItxFeLBwV73OF16g1l12j8RzxxxOkD1cY3hWY2leqVajomK88MvCC9RGlP08
r9G1V6vtK3tzyXOZyj5R998iPJm5Fz5ZeLxeVwmvVLtP9j+xvsqyO6p/lO65
RPfeQd/XSt/3c8nrs6j+49V/hvofU/8Lar1k16v0WJ5U21r2b7p+vK6vrutP
0PVn6ppH1bdM7QLZg9QWym6sa7fV/c8vu49rusv+V5vkEuZara7uUci8XmvL
7qT77aXX2cJ3qe0tewd95mJ99tVU60/3ayg8hPEI/6Hrf9brrcK3qDXQd7ZR
/zTZb+r9gq7/Qa8zhW9Wm5P6ffqnqr0uu5Wuv1D2rbI36X7VhLsLXyP8tfBW
/CbhucK/CrcUvkD4JuFvhe/W60VFj/Ee2dXV30P2DbK/Yb0IjxCeLfxDlffP
dP22bfXburJe1X+J+t9Wf1Hj3Vt4hvAi4c3qz2K/tdD13YS3EZ4j3Eq4u3B1
4anCWwufIlxX+DrhJsKnCdfKvH7Yi52F99P9r9L9X9b9twjvltm/7Kn+M6vs
H2YI7yx8hnAPre/J7Bdd/w/PQ/03qH97fJHw7rrfJOZf/X8J36P+BsK/4beE
91H/FcLPqf9P4Z2Fxws/Ifx7ldfLU8Kr1MbInqr2muxn1C6Rfbjut1Tfd4nu
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
0WKpYTwzcc0n80d8e0bi/Be1eS3Kzm2QAyEXQjw1ILFPopaU+iZqg6fFPYmX
T0ucE9s7c3zcKZ4/8RP1ylfJvrLgnBnxca9YPwdlrt9nPsnfkccjZl5Y8DUj
Yr6oFyTeJu6mPppab2p2KxLXoHfQ66yCa9OJSYn12ZPsTWJ41h5jZKzUm1M7
PTveo76a+uCRaj+WnKMjV1dInCvk/wKMjTESl24s+Vo+84vsL9VGFFxj/nXJ
8XCHmP88t/5MrpGcI7lI4uPDE9fgU6tPvRJaFPEkcSWaALF0x8RaQe3cuUzm
jLljjbPWeUY7Zs53HpB4D1CLT/08te2r4jPkNw9KXONPbT4xL2urT+JYmJid
Z8eYGTt7ql08c9YD+d1dEv/fgdpnNAzmljXGWivn/q0dYi5qZr5298T5UfKz
u8V6pJaaPcZeI96nVpoxMBZquurqXp9n1mbIWZO7bpD5Wj5D/pj8crPENd/U
ipMTIhdGzp9cUVb22USNAbUG41LnhgbGe+jjDRL/J4PacPLLLRPvYWrJ0XTJ
vVJzgNZLfNownm899X+u+RxW8H9Cvoj8cNPEPoPacvR2/itC/rqYOWdDroic
Hbkc8sWNYj4K6GGZuSgxwoIYL+PnjEWHpZ6TWhE4DXUR3+s7Lyg4X87/U/h/
CzbvbSqZb5LrIv9DHoj5YO+NLfj/KugnNRL//4X/RqD5nhX3RgumBgO+QE6Z
3DL6TJ54ffNfiTNT15byGeqnsvB//MeG/7+g39RLvD/YW2jg5KKvTq2N1yo7
l00NB7Uc60v+bw/5iQ0l57TIfb2QOtfFGBnrubG/yM9XJn7+m+P/NeTaybn/
UfJ79DFH/J+H/EiS+D8h1NMw58z9qNi/X6mdV/B/LNj/35TcNy3ux54txvn0
e8n1OdyL/wx9WvIz4dmMiPFzBrQOf1Sd2sKSa3XwAeSf/g9Eo94c
            "]], 
           Polygon[CompressedData["
1:eJwt2Ge4VcUZxfGDcO713Euz0TuCBcQIiIUmCCKooICKBVG6SBMVrEnsilgQ
FBugJjZM7L3X5EOMGnsHxa4pdsVCfuvZ58P/eWat/b4z+8ydeWf27Tx53ti5
m5RKpbdQxvhKqfR8g1JpGbEcHepLpT3rSqUVgprXlkqb4UD6CHGvi7tMzKVo
L+4T3lBxfWtKpT54jf4Ag3m96B3wD3qI2AnaB2Mfz77lLUOt9ia8hthFzDW8
inZjbDTWBfQ4Y98orr336IApdAMcwpspbhqGyV0s9lc5jegyrqT35E/Rno79
xX/H+xO2oltkHN4V9KTqb3vI73oYc+iPsZeY4ThA3A90f/3tQQ+Oz/uS14P3
vJx/4St9LOJdjSaetxLXGmvoUXimOn+XYwJ9Kr7lvUu/h9/payu/bbbcC+Ut
znzxKrxztM/HBM82yjsLG+T+KO8nLKVHiFvp+W+ZPxwjdx/etbw6c1ePubyh
vMt5jekmGEuPQaW28PJsCH2hPr/S97cZw1in0zP593veWlwrzNffVdXfm3f5
Dn14+4v7czWuDQ6jl+dvlEXn3X7R3zn0cP5P0bhU/AD6xEoxl5nTl7CD/kZX
+/tR3HeYwfuPuLH5+2C8Z7/Qe2Qc7UbGLGM/upPYVfpZiTf1e5S4ffnXiWsq
phnmiWnCm8abm7nDz+L25q3KOhXTELPFHVBdkyX6V3GzeCNwrPZ8HJbxxRwm
/wpjrsAHxj2aPrP6d3uZ9yJ6yvsfb6ScMXL3xSDe8bzPxa0Vsw5n0Bejkbjv
6R/QV1y7rDdxbeiWmdv6Yn9ln52qr9OyH7zL1rwbxLUSsxWa04P4H3v+UU2x
RrJWpsv/kv6ipqgBqQW9cIb2et6H6E93l3+j/trpqzW2oNvjGl4Hui0a6Kuf
2CVy35f3AabwthR3mbhNxdRi46bF3z1//9fFvIIjxLXlzeM9Rj+Obemhcp+Q
e6S8iWgmbiZ+8HwDrhE/TNz+4p4TN13MFAygD+Lf7Hlnf7cumFVX/C1v4LWl
22ES3VZsNzlb42Z9bE9vlpqV+sJrmPn3zt+gQbkopEs9ayamC67VHscbj53p
T1OLjNHP++2Mt+jW6Ox5J9wkfjt6Ib7U/oT3Kc6nr8fmcrvI64pH6X9nr/NG
pPZhgN9/Xd6R14nujAfpe9GxpvDy7Fr6aWyXuUweby19CcraG4z5c95Zf62y
dr1LU7oJ6uj/Zj9kncjdGwPF/ZQazduPHoXP6A5YKbeLvI7YRNyuvLt5J9In
YSTdBlfxWmT9ZB2Y+49yXuivt752wkvZB5Wi3qbuDsDu+lufs0d7SLW2f5+6
jsv1V6evSsatFDU/zxM3COvoYXhK3Ewx07C5/kblXKkt6kbqx2B6JFZr1/Bq
MUfcVHyqn09qijqZWrppzgX9DMZt+u2t/93xoPYQ3iBsm3kX+wc5d8m9HQdV
53mFuJ6pc6jhdeKtzrqjt0Ej3oH4q5w7sFAfHfQ1EMu03+a9gUliduZdwHuX
fg+TeT31d4v+9tPXaDTm9eHdwRtBD8t88QbyHuaNpPdCL3o3/a2rKfZ+akBP
uh//LnFjxOyL+vx9+Rd5/pm4z3Mu8zpX90IvMT1Qri/mNfO7Vsw7OIo3SNwj
1fcblXMw4+IB3kB6d3Sj+8pdLPfN7CEcmZqds6ZcvEveaZdKQdrH807A8Pw9
5C6V+7K8FzFRXnvesby/0X/PfSU1m/+09lM407MdU+twivYzvGdxuJi9speM
MVv/R2f98rYWd5K4R7JPcQhvb3GLPF+Yei/+IPoiNBT3Ne8b9M76qc7BAvq4
1HJei5wp2vPLxd0hd4jUttS4V7M30JvumjOT90D2fe4I8nrwTuc9RN+fuxev
C+9u7fswx7MWdJ/qnN7DuzO1g+6Gk3lP0E/iULnb8H7Pu42+Nectbwfvs8Z7
HeD9xqIpb7y4m8R1tF86YQb9grgda4o7Ye6GH9Lv5/zJeuL1yPzTY3BO6h6e
1O+e9E6VYk9lbw3IeWGMybz3eOfSZ2VNV4o1lLU7l56XMy7nNO+fvFn0jOxP
ehrW5m5Jn5f3pg/Fq7wL6cU5z+S2rO7Lxlnf2Zf0wXiZd3bOY7QSN646xsX0
JWiXOxfvWd6V9FU4nO6KXbX7l4ual9qXtZA1cTXvmtRKuZvlDDYvK8zJFalt
vIniXhO3VMxFOVt5s3kf89bk/EBn3ua85bya7LXUcudTG/6ScvF+ec/MSe5x
uc+9wHsO2+f+UinWWNbaHGzJO5L3Bu8x+vGsw5xvqUPad5SLecx8zssZp30X
73Z0FTO9Os+JuzNnKe9gv+0Wv62rdbF17qL0BKzhdaO7YwE9Q+46uffIuxfd
sw94n/Huo+9OPagv7tq5J/6FviXnPD0Vt6YO4xXPDqGPwf3l4n6fe36+ZbaR
/yD9SLm4m83kzcJ67Sey/rCdmOaYpD25XNSj1KXcH3OPfIr3dPYrXZe9Xi7q
aepq30qxfrOOp/KOwmb1xR0w42XcR3Mu8PrzHuINp4emVub9KsW9IPeD9miR
O0P1PnRlzh6MkduRv0pc98w7GvJ+n3OP935+G3bK76jebZfJW47RvAXVOX1b
zDv4I70v/5KaIi7xuRPXYqL2St4qtMyZl29C3nX09WhDt0I+Li/LXR771Rfn
VM6rC+jzUJ/7JP81472Z+mf8k4x7SqVox3sLO4o5gfcFbz39Ic6uFOsga+11
+g2cRm+oFPf/fAeMzt2V/hqjeOOyh1J39Hcy75VykZs+sm638D4zxa3OHRjj
xDXLWaa9NLUvd3+6IxZpX8xbgqZ1xf10fnVersp3iNxL9VmTbzBjbEQ/3o28
ljXF92C+k/K99CsO1D6Zd0ruTuLOrRTfRfk+apD7N10yxnHaC2qKupD60Lxa
I+LNw2/illSKb+Z8OzfB6rxH9e92In1C7mw5p1GrXYdK/la5M1WKdrx67Cbm
vNQX7/9RuXiWmF+q87xQzCKMrC/mJnM0mz4aw1OHsod5V+c+jrG8r1LvtA+s
KX53fv9KNNVuw2uL27KW0YzXjm6PuyrF926+e6fmvoChOX8xp6YYN+M3NGZj
TNWexZuBH7OmKsW3UP73MB57JLd6huZ74ee8N+//aUH8bQ==
            "]]}]}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0ktLVVEYBuDPjqV5vJy0qYKTHCjlXbw1yWFNJMxr3i9NEnQkIY70N9gk
RJzpb7BBiGYoekRJx4oJzROc+GwM9rueDxZrrW+vvSvHZrs/50TEspw8irhk
cW7EPzawwGQvy7nIWq7zDXfZw08yIxf5EdM85xR/c5JnnOApx3nCMWY5yiOO
cFgO1R95wCH+4iD3OcA99idns4877OUH6ZK/eqrjT1Zwg2ku8dY79fOKTcwy
w+/ckptUxFfucIVrnOcXjrCH71jHNhayitfu7TmTe1RGdV6Eqaih7eMlH/MV
nyTr6Yl6g/ajkU9ZIM3qNFtYyFYWsY3FbGcJO5hhJ5/xNUtZJi+SvTTQmpzJ
t3zPYS5wjt9SD9/8B1f5h5u84zaP//8P93aEOfo=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0s1vC3AYwPGnzWyyIxXnXTb/wCL0b+DgKCKd415001KtNmVslZHYdTsi
iwhHrtvYaFUVVy+xTITY2kWcZZ/G4ZvPc/q95Td0IXvmYiIi5vSvL+JUMuJE
f0SG55njTc7zEZfY4hP+4So/6oPuDka85x22ucB3vM0Wa3zLOTZ5i284ywbr
um5+zSpfscJNlrnBEl+yyBcscJ1reqqjAxHL/OtsNbaZ52OO9fbmaWaYZprH
eEQpc5J7ByK6HqXJz1xhgzf4nOf4gMe5yEOscFwT+nIwYpJfOcVv7D3yFrPc
5jS/c4Y/eIk5/TTn+YuX+ZtXuMMCd3mVHRbZZYl7vMay7mnUme7zLJ+xyjof
8hMb7PTWYcKdD7t7isMc4cnk//+wD3VLUlc=
          "]]}, {
         Line[{1835, 1833, 1856, 2930, 1857, 1885, 2937, 1886, 1906, 2950, 
          1907, 1927, 2718, 2965, 1947, 2979, 1948, 1968, 2994, 1969, 1989, 
          2745, 3009, 2012, 2752, 3025, 2034, 2035, 2064, 3047, 2065, 2093, 
          3054, 2094, 2115, 2769, 3069, 2136, 3083, 2137, 2156, 2787, 3098, 
          2175, 3111, 2176, 2194, 2806, 3125, 2215, 2216, 2245}], 
         Line[{1836, 1834, 1859, 2929, 1861, 1887, 2939, 1889, 1908, 2952, 
          1910, 1928, 2967, 1930, 1950, 2981, 1952, 1971, 2736, 2996, 1990, 
          2747, 3013, 2013, 2754, 3026, 2037, 2039, 2067, 3046, 2069, 2095, 
          3057, 2097, 2116, 3071, 2118, 2138, 3085, 2140, 2157, 3100, 2159, 
          2177, 1195, 2196, 2807, 3128, 2218, 2220, 2247}], 
         Line[{1838, 1837, 1860, 2931, 1865, 1888, 2941, 1892, 1909, 2953, 
          1913, 1929, 2969, 1933, 1951, 2728, 2983, 1972, 2738, 2999, 1991, 
          2748, 3012, 2014, 2755, 3029, 2038, 2043, 2068, 3048, 2073, 2096, 
          3060, 2100, 2117, 3073, 2121, 2139, 2778, 3087, 2158, 1162, 2178, 
          2798, 3115, 2197, 2809, 3130, 2219, 2224, 2248}], 
         Line[{1839, 1840, 1863, 2932, 1869, 1890, 2944, 1895, 1911, 2956, 
          1916, 1931, 832, 1953, 2730, 2986, 1973, 2740, 3002, 1993, 2749, 
          3015, 2016, 2756, 3030, 2041, 2047, 2071, 3050, 2077, 2098, 3059, 
          2103, 2119, 3074, 2124, 2142, 2780, 3090, 2161, 2790, 3103, 2179, 
          2800, 3117, 2198, 2810, 3131, 2222, 2228, 2250}], 
         Line[{1841, 1843, 1864, 2933, 1872, 1891, 2946, 1897, 1912, 2957, 
          1918, 1932, 2723, 2972, 1954, 2732, 2987, 1974, 2741, 3001, 1994, 
          2750, 3017, 2017, 2757, 3033, 2042, 2050, 2072, 3049, 2080, 2099, 
          3062, 2105, 2120, 3078, 2126, 2143, 2782, 3092, 2162, 2791, 3104, 
          2180, 2801, 3118, 2199, 2811, 3134, 2223, 2231, 2251}], 
         Line[{1842, 1845, 1867, 2934, 1876, 1893, 766, 1914, 2714, 2960, 
          1934, 2725, 2974, 1955, 2989, 1961, 1975, 2742, 3004, 1996, 2751, 
          3019, 2019, 2758, 3032, 2045, 2054, 2075, 3051, 2084, 2101, 3065, 
          2108, 2122, 2775, 3079, 2144, 2784, 3093, 2163, 2792, 3106, 2181, 
          3120, 2188, 2201, 2812, 3135, 2226, 2235, 2253}], 
         Line[{1844, 1848, 1868, 2935, 1880, 1894, 2708, 2948, 1915, 2716, 
          2962, 1935, 2976, 1942, 1956, 2733, 2991, 1976, 2743, 3006, 1997, 
          3021, 2006, 2020, 2759, 3036, 2046, 2058, 2076, 3052, 2088, 2102, 
          3066, 2111, 2123, 2776, 3080, 2145, 2785, 3095, 2164, 2794, 3108, 
          2182, 2803, 3122, 2202, 2813, 3137, 2227, 2239, 2254}], 
         Line[{1846, 1855, 1871, 2936, 2701, 1896, 1905, 2949, 1917, 2964, 
          2717, 1936, 2978, 2726, 1957, 2993, 2735, 1978, 3008, 2744, 1999, 
          2011, 3023, 2022, 2033, 3038, 2049, 2063, 2079, 3053, 2760, 2104, 
          3068, 2768, 2125, 2135, 3082, 2146, 3097, 2786, 2165, 3110, 2795, 
          2184, 3124, 2805, 2204, 3139, 2814, 2230, 2244, 2256}], 
         Line[{1847, 1858, 1874, 2938, 2702, 1898, 2951, 2709, 1919, 2966, 
          2719, 1937, 1949, 2980, 1959, 1970, 2995, 1980, 3010, 2746, 2001, 
          3024, 2753, 2024, 2036, 3039, 2052, 2066, 2082, 3055, 2761, 2106, 
          3070, 2770, 2127, 3084, 2777, 2147, 3099, 2788, 2167, 3112, 2796, 
          2186, 2195, 3126, 2206, 2217, 3140, 2233, 2246, 2258}], 
         Line[{1849, 1862, 1875, 2940, 2703, 1899, 2954, 2710, 1920, 2968, 
          2720, 1938, 2982, 2727, 1960, 2997, 2737, 1981, 1992, 3011, 2002, 
          2015, 3027, 2025, 2040, 3040, 2053, 2070, 2083, 3056, 2762, 2107, 
          3072, 2771, 2128, 2141, 3086, 2148, 2160, 3101, 2168, 3113, 2797, 
          2187, 3127, 2808, 2207, 2221, 3141, 2234, 2249, 2259}], 
         Line[{1850, 1866, 1878, 2942, 2704, 1900, 2955, 2711, 1921, 2970, 
          2721, 1940, 2984, 2729, 1963, 2998, 2739, 1983, 1995, 3014, 2004, 
          2018, 3028, 2027, 2044, 3041, 2056, 2074, 2086, 3058, 2763, 2109, 
          3075, 2772, 2129, 3088, 2779, 2150, 3102, 2789, 2169, 3114, 2799, 
          2189, 2200, 3129, 2209, 2225, 3142, 2237, 2252, 2261}], 
         Line[{1851, 1870, 1879, 2943, 2705, 1901, 2958, 2712, 1922, 2971, 
          2722, 1941, 2985, 2731, 1964, 1977, 3000, 1984, 1998, 3016, 2005, 
          2021, 3031, 2028, 2048, 3042, 2057, 2078, 2087, 3061, 2764, 2110, 
          3076, 2773, 2130, 3089, 2781, 2151, 1168, 2170, 2183, 3116, 2190, 
          2203, 3132, 2210, 2229, 3143, 2238, 2255, 2262}], 
         Line[{1852, 1873, 1882, 2945, 2706, 1902, 2959, 2713, 1924, 2973, 
          2724, 1944, 1958, 2988, 1965, 1979, 3003, 1986, 2000, 3018, 2008, 
          2023, 3034, 2030, 2051, 3043, 2060, 2081, 2090, 3063, 2765, 2112, 
          3077, 2774, 2132, 3091, 2783, 2153, 2166, 3105, 2172, 2185, 3119, 
          2191, 2205, 3133, 2212, 2232, 3144, 2241, 2257, 2264}], 
         Line[{1853, 1877, 1883, 2947, 2707, 1903, 2961, 2715, 1925, 1939, 
          2975, 1945, 1962, 2990, 1966, 1982, 3005, 1987, 2003, 3020, 2009, 
          2026, 3035, 2031, 2055, 3044, 2061, 2085, 2091, 3064, 2766, 2113, 
          1102, 2133, 2149, 3094, 2154, 3107, 2793, 2173, 3121, 2802, 2192, 
          2208, 3136, 2213, 2236, 3145, 2242, 2260, 2265}], 
         Line[{1854, 1881, 1884, 772, 1904, 1923, 2963, 1926, 1943, 2977, 
          1946, 2992, 2734, 1967, 1985, 3007, 1988, 2007, 3022, 2010, 2029, 
          3037, 2032, 2059, 3045, 2062, 2089, 2092, 3067, 2767, 2114, 2131, 
          3081, 2134, 2152, 3096, 2155, 2171, 3109, 2174, 3123, 2804, 2193, 
          2211, 3138, 2214, 2240, 3146, 2243, 2263, 2266}], 
         Line[{2269, 2267, 2290, 3148, 2291, 2319, 3155, 2320, 2340, 3168, 
          2341, 2361, 2832, 3183, 2381, 3197, 2382, 2402, 3212, 2403, 2423, 
          2859, 3227, 2446, 2866, 3243, 2468, 2469, 2498, 3265, 2499, 2527, 
          3272, 2528, 2549, 2883, 3287, 2570, 3301, 2571, 2590, 2901, 3316, 
          2609, 3329, 2610, 2628, 2920, 3343, 2649, 2650, 2679}], 
         Line[{2270, 2268, 2293, 3147, 2295, 2321, 3157, 2323, 2342, 3170, 
          2344, 2362, 3185, 2364, 2384, 3199, 2386, 2405, 2850, 3214, 2424, 
          2861, 3231, 2447, 2868, 3244, 2471, 2473, 2501, 3264, 2503, 2529, 
          3275, 2531, 2550, 3289, 2552, 2572, 3303, 2574, 2591, 3318, 2593, 
          2611, 1750, 2630, 2921, 3346, 2652, 2654, 2681}], 
         Line[{2272, 2271, 2294, 3149, 2299, 2322, 3159, 2326, 2343, 3171, 
          2347, 2363, 3187, 2367, 2385, 2842, 3201, 2406, 2852, 3217, 2425, 
          2862, 3230, 2448, 2869, 3247, 2472, 2477, 2502, 3266, 2507, 2530, 
          3278, 2534, 2551, 3291, 2555, 2573, 2892, 3305, 2592, 1717, 2612, 
          2912, 3333, 2631, 2923, 3348, 2653, 2658, 2682}], 
         Line[{2273, 2274, 2297, 3150, 2303, 2324, 3162, 2329, 2345, 3174, 
          2350, 2365, 1387, 2387, 2844, 3204, 2407, 2854, 3220, 2427, 2863, 
          3233, 2450, 2870, 3248, 2475, 2481, 2505, 3268, 2511, 2532, 3277, 
          2537, 2553, 3292, 2558, 2576, 2894, 3308, 2595, 2904, 3321, 2613, 
          2914, 3335, 2632, 2924, 3349, 2656, 2662, 2684}], 
         Line[{2275, 2277, 2298, 3151, 2306, 2325, 3164, 2331, 2346, 3175, 
          2352, 2366, 2837, 3190, 2388, 2846, 3205, 2408, 2855, 3219, 2428, 
          2864, 3235, 2451, 2871, 3251, 2476, 2484, 2506, 3267, 2514, 2533, 
          3280, 2539, 2554, 3296, 2560, 2577, 2896, 3310, 2596, 2905, 3322, 
          2614, 2915, 3336, 2633, 2925, 3352, 2657, 2665, 2685}], 
         Line[{2276, 2279, 2301, 3152, 2310, 2327, 1321, 2348, 2828, 3178, 
          2368, 2839, 3192, 2389, 3207, 2395, 2409, 2856, 3222, 2430, 2865, 
          3237, 2453, 2872, 3250, 2479, 2488, 2509, 3269, 2518, 2535, 3283, 
          2542, 2556, 2889, 3297, 2578, 2898, 3311, 2597, 2906, 3324, 2615, 
          3338, 2622, 2635, 2926, 3353, 2660, 2669, 2687}], 
         Line[{2278, 2282, 2302, 3153, 2314, 2328, 2822, 3166, 2349, 2830, 
          3180, 2369, 3194, 2376, 2390, 2847, 3209, 2410, 2857, 3224, 2431, 
          3239, 2440, 2454, 2873, 3254, 2480, 2492, 2510, 3270, 2522, 2536, 
          3284, 2545, 2557, 2890, 3298, 2579, 2899, 3313, 2598, 2908, 3326, 
          2616, 2917, 3340, 2636, 2927, 3355, 2661, 2673, 2688}], 
         Line[{2280, 2289, 2305, 3154, 2815, 2330, 2339, 3167, 2351, 3182, 
          2831, 2370, 3196, 2840, 2391, 3211, 2849, 2412, 3226, 2858, 2433, 
          2445, 3241, 2456, 2467, 3256, 2483, 2497, 2513, 3271, 2874, 2538, 
          3286, 2882, 2559, 2569, 3300, 2580, 3315, 2900, 2599, 3328, 2909, 
          2618, 3342, 2919, 2638, 3357, 2928, 2664, 2678, 2690}], 
         Line[{2281, 2292, 2308, 3156, 2816, 2332, 3169, 2823, 2353, 3184, 
          2833, 2371, 2383, 3198, 2393, 2404, 3213, 2414, 3228, 2860, 2435, 
          3242, 2867, 2458, 2470, 3257, 2486, 2500, 2516, 3273, 2875, 2540, 
          3288, 2884, 2561, 3302, 2891, 2581, 3317, 2902, 2601, 3330, 2910, 
          2620, 2629, 3344, 2640, 2651, 3358, 2667, 2680, 2692}], 
         Line[{2283, 2296, 2309, 3158, 2817, 2333, 3172, 2824, 2354, 3186, 
          2834, 2372, 3200, 2841, 2394, 3215, 2851, 2415, 2426, 3229, 2436, 
          2449, 3245, 2459, 2474, 3258, 2487, 2504, 2517, 3274, 2876, 2541, 
          3290, 2885, 2562, 2575, 3304, 2582, 2594, 3319, 2602, 3331, 2911, 
          2621, 3345, 2922, 2641, 2655, 3359, 2668, 2683, 2693}], 
         Line[{2284, 2300, 2312, 3160, 2818, 2334, 3173, 2825, 2355, 3188, 
          2835, 2374, 3202, 2843, 2397, 3216, 2853, 2417, 2429, 3232, 2438, 
          2452, 3246, 2461, 2478, 3259, 2490, 2508, 2520, 3276, 2877, 2543, 
          3293, 2886, 2563, 3306, 2893, 2584, 3320, 2903, 2603, 3332, 2913, 
          2623, 2634, 3347, 2643, 2659, 3360, 2671, 2686, 2695}], 
         Line[{2285, 2304, 2313, 3161, 2819, 2335, 3176, 2826, 2356, 3189, 
          2836, 2375, 3203, 2845, 2398, 2411, 3218, 2418, 2432, 3234, 2439, 
          2455, 3249, 2462, 2482, 3260, 2491, 2512, 2521, 3279, 2878, 2544, 
          3294, 2887, 2564, 3307, 2895, 2585, 1723, 2604, 2617, 3334, 2624, 
          2637, 3350, 2644, 2663, 3361, 2672, 2689, 2696}], 
         Line[{2286, 2307, 2316, 3163, 2820, 2336, 3177, 2827, 2358, 3191, 
          2838, 2378, 2392, 3206, 2399, 2413, 3221, 2420, 2434, 3236, 2442, 
          2457, 3252, 2464, 2485, 3261, 2494, 2515, 2524, 3281, 2879, 2546, 
          3295, 2888, 2566, 3309, 2897, 2587, 2600, 3323, 2606, 2619, 3337, 
          2625, 2639, 3351, 2646, 2666, 3362, 2675, 2691, 2698}], 
         Line[{2287, 2311, 2317, 3165, 2821, 2337, 3179, 2829, 2359, 2373, 
          3193, 2379, 2396, 3208, 2400, 2416, 3223, 2421, 2437, 3238, 2443, 
          2460, 3253, 2465, 2489, 3262, 2495, 2519, 2525, 3282, 2880, 2547, 
          1657, 2567, 2583, 3312, 2588, 3325, 2907, 2607, 3339, 2916, 2626, 
          2642, 3354, 2647, 2670, 3363, 2676, 2694, 2699}], 
         Line[{2288, 2315, 2318, 1327, 2338, 2357, 3181, 2360, 2377, 3195, 
          2380, 3210, 2848, 2401, 2419, 3225, 2422, 2441, 3240, 2444, 2463, 
          3255, 2466, 2493, 3263, 2496, 2523, 2526, 3285, 2881, 2548, 2565, 
          3299, 2568, 2586, 3314, 2589, 2605, 3327, 2608, 3341, 2918, 2627, 
          2645, 3356, 2648, 2674, 3364, 2677, 2697, 2700}]}, {
         Line[{723, 1073, 1072, 3067, 1069, 1068, 1065, 3064, 1064, 1061, 
          3063, 1060, 1057, 3061, 1056, 1053, 3058, 1052, 1049, 3056, 1048, 
          3055, 1045, 1044, 1041, 3053, 1037, 1036, 1035, 1034, 3052, 1033, 
          1032, 3051, 1031, 1030, 3049, 1029, 3050, 1028, 1027, 1026, 3048, 
          1025, 1024, 3046, 1023, 3047, 1022, 1021, 1020, 1040}], 
         Line[{743, 724, 725, 726, 2930, 727, 2929, 728, 729, 2931, 730, 731, 
          2932, 732, 733, 2933, 734, 735, 2934, 736, 737, 2935, 738, 739, 740,
           741, 2936, 744, 747, 2938, 748, 751, 2940, 752, 755, 2942, 756, 
          759, 2943, 760, 763, 2945, 764, 767, 2947, 768, 771, 772, 775, 776, 
          778}], 
         Line[{780, 742, 745, 2937, 746, 749, 2939, 750, 753, 2941, 754, 757, 
          758, 2944, 761, 762, 2946, 765, 766, 769, 770, 2948, 773, 774, 777, 
          2949, 781, 784, 2951, 785, 788, 789, 2954, 792, 2955, 793, 796, 797,
           2958, 800, 2959, 801, 804, 805, 2961, 808, 809, 2963, 812, 813, 
          815}], 
         Line[{817, 779, 782, 2950, 783, 786, 2952, 787, 790, 2953, 791, 794, 
          2956, 795, 798, 2957, 799, 802, 803, 2960, 806, 807, 2962, 810, 811,
           814, 2964, 818, 821, 2966, 822, 825, 2968, 826, 829, 2970, 830, 
          833, 2971, 834, 837, 838, 2973, 841, 842, 2975, 845, 846, 2977, 849,
           850, 852}], 
         Line[{854, 816, 819, 2965, 820, 823, 2967, 824, 827, 2969, 828, 831, 
          832, 835, 836, 2972, 839, 840, 2974, 843, 844, 2976, 847, 848, 851, 
          2978, 855, 858, 2980, 859, 862, 2982, 863, 866, 2984, 867, 870, 
          2985, 871, 874, 875, 2988, 878, 879, 2990, 882, 883, 2992, 886, 887,
           889}], 
         Line[{891, 853, 856, 2979, 857, 860, 2981, 861, 864, 2983, 865, 868, 
          869, 2986, 872, 873, 2987, 876, 877, 2989, 880, 881, 2991, 884, 885,
           888, 2993, 892, 895, 2995, 896, 899, 2997, 900, 903, 2998, 904, 
          907, 3000, 908, 911, 912, 3003, 915, 916, 3005, 919, 920, 3007, 923,
           924, 926}], 
         Line[{928, 890, 893, 2994, 894, 897, 2996, 898, 901, 902, 2999, 905, 
          906, 3002, 909, 3001, 910, 913, 914, 3004, 917, 918, 3006, 921, 922,
           925, 3008, 929, 932, 3010, 933, 936, 3011, 937, 940, 941, 3014, 
          944, 945, 3016, 948, 949, 3018, 952, 953, 3020, 956, 957, 3022, 960,
           961, 963}], 
         Line[{965, 927, 930, 3009, 931, 934, 935, 3013, 938, 3012, 939, 942, 
          943, 3015, 946, 947, 3017, 950, 951, 3019, 954, 955, 3021, 958, 959,
           962, 3023, 966, 969, 3024, 970, 973, 974, 3027, 977, 3028, 978, 
          981, 982, 3031, 985, 986, 3034, 989, 3035, 990, 993, 994, 3037, 997,
           998, 1000}], 
         Line[{1001, 964, 967, 968, 3025, 971, 972, 3026, 975, 976, 3029, 979,
           980, 3030, 983, 984, 3033, 987, 3032, 988, 991, 992, 3036, 995, 
          996, 999, 3038, 1002, 1003, 3039, 1004, 1005, 1006, 3040, 1007, 
          1008, 3041, 1009, 1010, 3042, 1011, 3043, 1012, 1013, 1014, 3044, 
          1015, 1016, 3045, 1017, 1018, 1019}], 
         Line[{1038, 1110, 1109, 3081, 1106, 1105, 1102, 1101, 1098, 3077, 
          1097, 3076, 1094, 1093, 3075, 1090, 1089, 1086, 3072, 1085, 1082, 
          3070, 1081, 1078, 3068, 1074, 1071, 1070, 3066, 1067, 1066, 3065, 
          1063, 1062, 1059, 3062, 1058, 1055, 3059, 1054, 3060, 1051, 1050, 
          3057, 1047, 1046, 1043, 3054, 1042, 1039, 1077}], 
         Line[{1075, 1147, 1146, 3096, 1143, 1142, 3094, 1139, 1138, 1135, 
          3091, 1134, 1131, 3089, 1130, 1127, 3088, 1126, 1123, 3086, 1122, 
          1119, 3084, 1118, 1115, 3082, 1111, 1108, 1107, 3080, 1104, 1103, 
          3079, 1100, 1099, 3078, 1096, 1095, 1092, 3074, 1091, 1088, 3073, 
          1087, 1084, 3071, 1083, 1080, 3069, 1079, 1076, 1114}], 
         Line[{1112, 1184, 1183, 3109, 1180, 1179, 3107, 1176, 1175, 3105, 
          1172, 1171, 1168, 1167, 1164, 3102, 1163, 1160, 3101, 1159, 1156, 
          3099, 1155, 1152, 3097, 1148, 1145, 1144, 3095, 1141, 1140, 3093, 
          1137, 1136, 3092, 1133, 1132, 3090, 1129, 1128, 1125, 3087, 1124, 
          1121, 3085, 1120, 1117, 3083, 1116, 1113, 1151}], 
         Line[{1149, 1221, 1220, 3123, 1217, 1216, 3121, 1213, 1212, 3119, 
          1209, 1208, 1205, 3116, 1204, 1201, 3114, 1200, 1197, 3113, 1196, 
          1193, 3112, 1192, 1189, 3110, 1185, 1182, 1181, 3108, 1178, 1177, 
          3106, 1174, 1173, 3104, 1170, 1169, 3103, 1166, 1165, 1162, 1161, 
          1158, 3100, 1157, 1154, 3098, 1153, 1150, 1188}], 
         Line[{1186, 1258, 1257, 3138, 1254, 1253, 3136, 1250, 1249, 1246, 
          3133, 1245, 3132, 1242, 1241, 1238, 3129, 1237, 1234, 3127, 1233, 
          1230, 3126, 1229, 1226, 3124, 1222, 1219, 1218, 3122, 1215, 1214, 
          3120, 1211, 1210, 3118, 1207, 1206, 3117, 1203, 1202, 3115, 1199, 
          1198, 1195, 1194, 1191, 3111, 1190, 1187, 1225}], 
         Line[{1223, 1277, 1276, 3146, 1275, 1274, 3145, 1273, 1272, 3144, 
          1271, 1270, 3143, 1269, 1268, 3142, 1267, 1266, 3141, 1265, 1264, 
          3140, 1263, 1262, 1261, 3139, 1259, 1256, 1255, 3137, 1252, 1251, 
          3135, 1248, 1247, 3134, 1244, 1243, 3131, 1240, 1239, 3130, 1236, 
          1235, 3128, 1232, 1231, 1228, 3125, 1227, 1224, 1260}], 
         Line[{1278, 1628, 1627, 3285, 1624, 1623, 1620, 3282, 1619, 1616, 
          3281, 1615, 1612, 3279, 1611, 1608, 3276, 1607, 1604, 3274, 1603, 
          3273, 1600, 1599, 1596, 3271, 1592, 1591, 1590, 1589, 3270, 1588, 
          1587, 3269, 1586, 1585, 3267, 1584, 3268, 1583, 1582, 1581, 3266, 
          1580, 1579, 3264, 1578, 3265, 1577, 1576, 1575, 1595}], 
         Line[{1298, 1279, 1280, 1281, 3148, 1282, 3147, 1283, 1284, 3149, 
          1285, 1286, 3150, 1287, 1288, 3151, 1289, 1290, 3152, 1291, 1292, 
          3153, 1293, 1294, 1295, 1296, 3154, 1299, 1302, 3156, 1303, 1306, 
          3158, 1307, 1310, 3160, 1311, 1314, 3161, 1315, 1318, 3163, 1319, 
          1322, 3165, 1323, 1326, 1327, 1330, 1331, 1333}], 
         Line[{1335, 1297, 1300, 3155, 1301, 1304, 3157, 1305, 1308, 3159, 
          1309, 1312, 1313, 3162, 1316, 1317, 3164, 1320, 1321, 1324, 1325, 
          3166, 1328, 1329, 1332, 3167, 1336, 1339, 3169, 1340, 1343, 1344, 
          3172, 1347, 3173, 1348, 1351, 1352, 3176, 1355, 3177, 1356, 1359, 
          1360, 3179, 1363, 1364, 3181, 1367, 1368, 1370}], 
         Line[{1372, 1334, 1337, 3168, 1338, 1341, 3170, 1342, 1345, 3171, 
          1346, 1349, 3174, 1350, 1353, 3175, 1354, 1357, 1358, 3178, 1361, 
          1362, 3180, 1365, 1366, 1369, 3182, 1373, 1376, 3184, 1377, 1380, 
          3186, 1381, 1384, 3188, 1385, 1388, 3189, 1389, 1392, 1393, 3191, 
          1396, 1397, 3193, 1400, 1401, 3195, 1404, 1405, 1407}], 
         Line[{1409, 1371, 1374, 3183, 1375, 1378, 3185, 1379, 1382, 3187, 
          1383, 1386, 1387, 1390, 1391, 3190, 1394, 1395, 3192, 1398, 1399, 
          3194, 1402, 1403, 1406, 3196, 1410, 1413, 3198, 1414, 1417, 3200, 
          1418, 1421, 3202, 1422, 1425, 3203, 1426, 1429, 1430, 3206, 1433, 
          1434, 3208, 1437, 1438, 3210, 1441, 1442, 1444}], 
         Line[{1446, 1408, 1411, 3197, 1412, 1415, 3199, 1416, 1419, 3201, 
          1420, 1423, 1424, 3204, 1427, 1428, 3205, 1431, 1432, 3207, 1435, 
          1436, 3209, 1439, 1440, 1443, 3211, 1447, 1450, 3213, 1451, 1454, 
          3215, 1455, 1458, 3216, 1459, 1462, 3218, 1463, 1466, 1467, 3221, 
          1470, 1471, 3223, 1474, 1475, 3225, 1478, 1479, 1481}], 
         Line[{1483, 1445, 1448, 3212, 1449, 1452, 3214, 1453, 1456, 1457, 
          3217, 1460, 1461, 3220, 1464, 3219, 1465, 1468, 1469, 3222, 1472, 
          1473, 3224, 1476, 1477, 1480, 3226, 1484, 1487, 3228, 1488, 1491, 
          3229, 1492, 1495, 1496, 3232, 1499, 1500, 3234, 1503, 1504, 3236, 
          1507, 1508, 3238, 1511, 1512, 3240, 1515, 1516, 1518}], 
         Line[{1520, 1482, 1485, 3227, 1486, 1489, 1490, 3231, 1493, 3230, 
          1494, 1497, 1498, 3233, 1501, 1502, 3235, 1505, 1506, 3237, 1509, 
          1510, 3239, 1513, 1514, 1517, 3241, 1521, 1524, 3242, 1525, 1528, 
          1529, 3245, 1532, 3246, 1533, 1536, 1537, 3249, 1540, 1541, 3252, 
          1544, 3253, 1545, 1548, 1549, 3255, 1552, 1553, 1555}], 
         Line[{1556, 1519, 1522, 1523, 3243, 1526, 1527, 3244, 1530, 1531, 
          3247, 1534, 1535, 3248, 1538, 1539, 3251, 1542, 3250, 1543, 1546, 
          1547, 3254, 1550, 1551, 1554, 3256, 1557, 1558, 3257, 1559, 1560, 
          1561, 3258, 1562, 1563, 3259, 1564, 1565, 3260, 1566, 3261, 1567, 
          1568, 1569, 3262, 1570, 1571, 3263, 1572, 1573, 1574}], 
         Line[{1593, 1665, 1664, 3299, 1661, 1660, 1657, 1656, 1653, 3295, 
          1652, 3294, 1649, 1648, 3293, 1645, 1644, 1641, 3290, 1640, 1637, 
          3288, 1636, 1633, 3286, 1629, 1626, 1625, 3284, 1622, 1621, 3283, 
          1618, 1617, 1614, 3280, 1613, 1610, 3277, 1609, 3278, 1606, 1605, 
          3275, 1602, 1601, 1598, 3272, 1597, 1594, 1632}], 
         Line[{1630, 1702, 1701, 3314, 1698, 1697, 3312, 1694, 1693, 1690, 
          3309, 1689, 1686, 3307, 1685, 1682, 3306, 1681, 1678, 3304, 1677, 
          1674, 3302, 1673, 1670, 3300, 1666, 1663, 1662, 3298, 1659, 1658, 
          3297, 1655, 1654, 3296, 1651, 1650, 1647, 3292, 1646, 1643, 3291, 
          1642, 1639, 3289, 1638, 1635, 3287, 1634, 1631, 1669}], 
         Line[{1667, 1739, 1738, 3327, 1735, 1734, 3325, 1731, 1730, 3323, 
          1727, 1726, 1723, 1722, 1719, 3320, 1718, 1715, 3319, 1714, 1711, 
          3317, 1710, 1707, 3315, 1703, 1700, 1699, 3313, 1696, 1695, 3311, 
          1692, 1691, 3310, 1688, 1687, 3308, 1684, 1683, 1680, 3305, 1679, 
          1676, 3303, 1675, 1672, 3301, 1671, 1668, 1706}], 
         Line[{1704, 1776, 1775, 3341, 1772, 1771, 3339, 1768, 1767, 3337, 
          1764, 1763, 1760, 3334, 1759, 1756, 3332, 1755, 1752, 3331, 1751, 
          1748, 3330, 1747, 1744, 3328, 1740, 1737, 1736, 3326, 1733, 1732, 
          3324, 1729, 1728, 3322, 1725, 1724, 3321, 1721, 1720, 1717, 1716, 
          1713, 3318, 1712, 1709, 3316, 1708, 1705, 1743}], 
         Line[{1741, 1813, 1812, 3356, 1809, 1808, 3354, 1805, 1804, 1801, 
          3351, 1800, 3350, 1797, 1796, 1793, 3347, 1792, 1789, 3345, 1788, 
          1785, 3344, 1784, 1781, 3342, 1777, 1774, 1773, 3340, 1770, 1769, 
          3338, 1766, 1765, 3336, 1762, 1761, 3335, 1758, 1757, 3333, 1754, 
          1753, 1750, 1749, 1746, 3329, 1745, 1742, 1780}], 
         Line[{1778, 1832, 1831, 3364, 1830, 1829, 3363, 1828, 1827, 3362, 
          1826, 1825, 3361, 1824, 1823, 3360, 1822, 1821, 3359, 1820, 1819, 
          3358, 1818, 1817, 1816, 3357, 1814, 1811, 1810, 3355, 1807, 1806, 
          3353, 1803, 1802, 3352, 1799, 1798, 3349, 1795, 1794, 3348, 1791, 
          1790, 3346, 1787, 1786, 1783, 3343, 1782, 1779, 
          1815}]}, {}, {}, {}, {}, {}}}, VertexNormals -> CompressedData["
1:eJw8W3c4lo/3JtJQmiIZhUSR0LDqJCSFiqgUWYWIsqIiIZWykhnKVvbejpfX
3nsrSZnvE6VQ6fd8P2/9/uq6nsv1eJxxn/s+92mHkbXm1WUMDAyCaxkYmMh/
dTuqnjoW5QGzzauSMloN/HlSfpMXCOC1/TWk4JsFt4O+DCa+rYXTB3o2iSoQ
kBOklSva5wcyogGat9TaYH9w16PBRBq8kao1v9hWjhrZa7LGzlWAjd+O119U
CJgN5dVa97QNxbIqdL7WUYFPnH/5wF4acDLxsZ4K6MR9UwcnL8bFgqybPbfJ
VhoExviLLDr14tDHzK5lntbYfMdtx5juNLgJXvFzHh/Agj/t9y9FJmNpYGIT
u8sUWGs7dqrav8OGMg73UIsSDD4pdD711ST43uRXbFZ9jyHz26Q2JlSiwkZ3
7W7GSWDX9fsYvuY9RjRQmzYer0M3t+yzLR8nIGS3Wgiz1BBOdA9xJ+fX4zWl
nsVLFyehcr325Hq+fiyf4dQP2FSHrZ+2cM8enoKcSco6w3Xd2BRqzB3SVYm8
Pgd8+i5Mg02VvmbnkxYME8lu77mSh/s8Cxa0qmhQybVjQPRcFQZq3lHovFOI
LarCtyq0CZByknh5WgOxUN7U8OInD7y4xuorezkBgc0BB5a63mAv8d4+TzIG
euY1uusIAo4bj3GmrLyGPrlcO7JSMqEti53CP0HAVgee9amxGXD0y+3IoIha
uOn/iMv0OJkv/d27Td0C8ZXpCIsrC0LNdaP0egoB+gfr7w6fTsdlj2x+zJhQ
QWJ4lf89TwKsj5wU/JxTg1uOn3JkmXsCFoq/eGSvEpD5SrBn3ctWdBlcmT7L
+RqE6k9SCpEGTDTpb9zeXci/TkFTxCMG/d0uqstNTYP5bymhUxW9GFYx7LXy
axYey17eXCw+DU7vN/EwHhzAnVPqH8x8S5H/zazQ8O0pUO8JK6i0H8SnTavT
PvZXYDK/xsMX85MQ7WxufkRlEMdzSs4ui6/Cm2vTeno+TMKn1OC4lsx+ZEz3
HjZdqMKp8zaXJJWn4Mx8/+FvIz1Y4nlMv6eUigvmfIVXlk8Dc+oVnQW2TpQL
2yk5eLwMGXSSdxjOTAOXg4PVXYcWvPlFYaXRmWyM7k8yDmulwSenBbvITdWo
OqC74ZuEFcZ9VPyV40RAgLz8G+FVZXjhSDy3BYsNrFUmOAyRgF6zp1KfE6Lw
Rl7LRNWJTOgaUoyW+EQAPPEwn4sNAOeNDBxhEQUQaxHNf6WTgM7R6Q+a61OA
rTJgQRMR3jxgPWObRUD9qEFf5pN4TFQzcXM2LwS21cO9ag0ExDIwJ/qq56Pk
YMTnqMr7cKssYzOljwBXnkxbagkVG5/p99CWOWBkx5BmRAAB/SGdTpELDdjF
saPCQzUdV2ytbTzNRYDol5ygWK9WVG68emXFg0I0YatVcQ2hgVPmm/bdDzuw
6Pewd5siIkuOlHMxGw1Ovc7esDaiC4U6nfb6/KHgp9CXHp4h03Btx8nauYdd
+JhS4/LjJBUvPGgU3PVwGmpvLWWN/O5EXoNfF1tkqZj3Sq7X5tU0PDWZvs/z
ow3vK+655aRfhl+aVCpDVWlwpcL1kPFkK4a8m1yrEYvYqmVu9cGBBpvltAUu
S9TgOeOyj7YfEzD21IHVx4zJet7vNVEZXIGnbdexdvFGoo6UYdW7lwTM64mK
12Uk4/PEM0cCHiSDtczOgatk/HksfC+mbX6BUvs+DVzbnwXLu3p26Hwm4Mr9
Cs8jm9/CRbO9N9IzyqDQIe6GehoBCX7eGu1CmaCfeIh3ezwFol/umSLCyThH
bbgoubEAzkzMHbqRXQ6uy1msjroS8OV5g9WQZjGUXxzU2aFSDlmx8YZyZJ14
ZZk2XYouQIkP2j3bWMMQjX6MiXQQsBi3uGWxoAxXd9MKysffYnxS0PS5VAJk
tLkyX96kIsftbMr4ZAFymhU9kLEkYFvcQd9rL2qQSdPhuGFTGZbt0/ukyEfA
M7ba/VTBOuzeqFS/1p6KUR+fHs75TIOXRQuZPfcacAO3i2zbPioKwDi7Ri0N
Dr9gVataakS+O0WNMnxUlNyz/Bp7Fg3sPK5ef3exDkU4vee65MuReZMkw9af
NDjwosVlzZNK/CKZlLbxejFm/Wb/MXSegCUWuRHR5UUYw4Lh0wVJOHNRQWFX
FQHXLg8MT6dl44oB19Brpa9xPN1pWct7At6OHLtjf80fsjllfrEIJ0GgVmHn
ia8EpFTs5ezMjAWXWEZmt9QMsJrIlikYJYCDqcJ6kRuhL+x1pEY4BXq/H5as
sSPg/vx4v1QaBU6a1nHPXS4H5mPvOoYuEVC4fZts/n4q3F+02lWRXAlw/+w2
+x0EUAmrSN/sCjh12N98cDsV9gtJ/xA9RECY5Pt1ukQ5jLy7feIEEwXWvg+P
uXKZABN77s/R4mUQ5lh9v0KCAuYxZ7SNbAlYscoyxDggD/fUnF8u9DAHlc4F
HNlQRgCjaeCoLaUYc5xzYm3sCzD7Jssm1RgCdD0zZBVMKdj1kho4urwchcx3
3PMyJGCEy6KOxYWCBaFDGXMyVLzuP9Mid4rE1fA/c29dy3DzmbRRfwcqqh83
8tM/S0C325PRFxuLMMXfvdc4thy9B9bHH7pDQItMyqM/WzLw+iHxsqCSEuRq
7M3ekUvAoyzjCAeKJ0S53Wq9zp2M645asQqQce49mm0qPRQDq4eWQnb/iUHW
qRKhAPL5n4yk/rm8YlgwtG8/cfcVbLd76WhSQ8CNmuMWybk1YKWkyTIwlAcs
m7jP3yXnvtqSgYRSXx0UrN9Ye8CxGGxvKEsUshPQGLwqae3ZFrgwHHPNkYwr
7cv9N6wvaBD9keEX6LbCM1ul768fUOHHS+llwlfIensunXhxrhVMBH/oblxL
Beldhkn26jRgXH3Rj8OuGTyNtkzK9JZDqaXdpUSSV4x2CMVHp9XDMkYBmWKi
CC5HlLLPsRLwck88JnyvApN1nmpZH/Lh1nrOsHgtAq5f3zRSpUsFvU3VQkFj
mXCB4zoT5wMCGPZtXHNeNh/fOm16WKZTgAsn3wi0ZRJgv7PS/0tdLobI3Zio
Ty3B0IMGJb8T/oeT+S35H3PQvz5y32spCpZ2vbe7FkzA8v5Jy+bSGLSuO99n
sliCjKo5t13JefrqjcJJVuEn2Pi0LJTTBzHgk9GqMbJOOtYz8zGpJcJeFj3K
p/EMfM7H0PD2A4nPYm3rIpaVg85okujP29pQaP7jnQuJA/ZsTyihl2uAf/Se
ece7SPBxGxlwuEZA9oQm2+llTbBr+zUfVZ90iJLoDV29mqyTrtM+hUc74OpN
bZVzbGXQLL+5rmILDXLFn70RcesBdv5Ohn3alXCu5KrgpU3TsPXXYYnF9d3w
h0d6ilOyAu57jnStdpgGF9Yu3XsCvfCrcNLipAAVrrg+1Hy0NAX7u4Yv2Ej3
wLz19+pZKsLcTgfpoyQfS7Q0bnyt0Qkshg5LK2QRPp/OLqmcnIbQi+FPz9i1
w4hE66vTz7OgS/YwihvTYJvUHaUty1vhoMF7+UqZ19Ds9fZ5aQcNSjTKvk9P
VcPcOH9N2h8T3HaAgRpsTUD7p4ujVvxF8MZvVGx8UQEf7/72ubeVAMO4IfHQ
t+l49Xf6A4vwAvTQmj9rXUnyJbukDcsU4/GmXnTwtfP5OHR8kIOrnYBDN49l
b9J7CHOPJVudG9PxcaT23ZFpAjbbD8pkPHkLP3KfUJvEk3CszeHh9XEC+Mwd
17wNLoTmIH6m6HXB+Ov9A6YQ8veu2RH01juoAYTWbM/WnskEt9FpdxZynmLI
4AOGbW0wZZFkd+xUIQQF7f4i6kGDDCuLQ8pWndBbXPFFpKQM9HPUlvQHpmGX
isgO9Rf90MHzwod/Uy18POK4f/2+KdgpfEmXajoIMpfis1+YVsMPj9VbVVom
IVChbld43jvImH81GD1aA9lnO0WebpkEzcJMSUbedzDx3AUiHpXDb3Hj0YiA
SVhx7q75Fs1BME2+5bWYg9CdaWKbvHsKdh3abTImNwCbJ0Y5D3C8gS2+Mber
k6fg6ZHjKR9v94CZQ0aWxNhryLj92qv92TTslT6hJJDbDjuldmxz3hSBn8eO
PtOwosH2V0IDrOdqIa3jfNWdi3lowZW4Yq8cASFOrBx7zdLhQ3HnhDhfNTY4
vpziNiPrOfhHlyzjM3CSByp7byWqGtytZnxE4qpOWcNRp8fod/i0y9S3dDy/
xGxgSebllEDAj6riOFhklmv7reaH98yreAJ+EFDQZHBCeToH+s6sUz+54iH0
e2SqOQwTQHFVvKH0ggoPncsZVqdngFBbj3cI2e88q/Zs+uHeDNUWsY8yVxfB
po0Hf7qT9caT6G27i2iHZvsX6xxc6yBgdOrN7ZRpWG8sn1C+owd+K7yryB+t
g6m2+S9Og1NwuMrz/BumISh+rtJRl94Khgd59jd1T8B1hR1QfOs9yKqyNzJ/
aoF9qhI1VrwTcGSNg6DN7WHoZrZ4m2jfCJM2WvXMNeOw8ku/vDBlGITZ9282
K62C09c+n5NaNgGa1XdeyRsOg4p6rKv54yx4n2Fy5Q9lAoSKXBtVGgYgVerW
lj+BkSiXmHGq0HcKhp3/vF5v1AkR9xgzKl+/RstLz6QSBGnAwp+dem62Bkrk
A4PTSB4h45Y/n/WDBlYq+3ukzt/CW1krxYTHWrD7Ynbe+AAN7snLP1ssyUDn
Kxt4ay+04fH9q+ojAmjAIPymfmypHKUb5zcYMbahqtW2k890aKBfc2HtHgMq
6iU96J3Y3oKLDc9nw5+Sus/k7MFm9mRQHn8e/nDmBHy5sfDpDTlfthq2yJqe
KICue3yHNXdkwgsnz5cqFQRE3xJ4X7CcCs7Are+pWAisUlsMjcl+Z7nIKaMw
2AhmKdXEgZ462ECoiVgbkfjPr9+SJ9oOhkOB0a7pjRB0hqiQiCDxKvV2qrZk
DxSznv1e8Lwd8uXl3u79Pglm/Dw+igcGIFs4vIm7rwsuUzamPtedgG8Jww4/
/wzBifWLXPza3SC/S8eCZjMO27qDRv3n3sO3ZNE1M087wbz0O9fvz2PAxm7l
cjlwGN51HWPnD6iGcw1aQhybJ+CLy+Aaz7N98FhY3FN1MBo01Rk27N1J9ku2
rYpyRCuIqv4UDY5PROP1AfqlBTQ4xhijYyMXCVvDeos3KnViklewWtluGlCH
1W+a/InEGfXIDj7tTpzvrJh+uovM1/AIX59bAxbIt9gdf9aNpw9kPfMZmYLN
GRvttf40YddNVXa76m5UeHvD+njqFNz25q98sL8Ri0UuyS1j6MC8916t4w+m
wTcn9SdzeQ1KVCV8cGRrRpGrJz8kWNDA55wF+5NrVOxkHuz+wFWN0T+kn8+y
EWDkZxBzTrkUZuVTPRM+5cLhoX5r2zgCtETtxyaUKoF24fZx2lwF7HH2v+kg
TMC40LEwnk8N8FUmydLqQiMIVB7efV6NBss6nKrXL7VCiEh62revbXD0V3Y5
cWAabtewbD/4uwP0AsUKWLy7wL9KKN5hzRScVuHYVdTaBR5H1MLCbXtBJMup
NXztJIz8UB/hv9UN6YV/NidbDsDROw9/6e6egAHpropPR9qgTnlg0penGxyX
xWaC+RQ4r0jkk+BpAaGhiwMPvw/B7foSFYO2CYi8vukKq0M1GsSIs3EK5WN8
boMP2xkCdDKO8ErreYHhvhCvWvMejGUWMOsOmIYO+vuxmv5+vPP3/UYD1xZj
lnejRkb6+fjJflxU0DuYYTIBAme9Kq1UuvGyMQuT9flePMuw4u6OnxNw6ZZ4
tx5TJ/5oac2hdnXgEXUb7YArZB4HzFg98lqxM8GK1xc7MEbttti52Skg6PFE
Btn/4on8f+N5kh5/JOjxx3/x16HnCwfp+cJ/+Qqk5xdG6fmFqL/5lVVZAo2D
tXBo84cC9eMtsES9O5dAvv/02XOs6tlNZB9mqlKftIPR6NlkPedpsOrcoR++
qQW0lyuVHZ/vghH1KClO6hS4R82nuMlRwXsgPFTWrhMGosYUIvKn4czKuaM2
5llwpKJawbu7H06P7v3zJ2cKGoVO383kt0W3GJn9exbbgbvomlzwNRrw0fsF
U+j9AiZ/+yUp8YFSx50BXHPmz/Pz7XEw2L6B7cOrKdjjv+bVC+URfHGud91S
TjPe3xspMHpiDKo9zifPiwyjY3JU6bxJF8aP6mxMDhiDH/R+Rw16v6Pc3363
oOMDZtHxAS/9xQc3Op4glY4nmPsXT3S+6VPsMjrQUZkqa3WmCbUNORSVz5L8
59Dnbz8tWlDj+8HdDIz1uPlS36GWvTTIoeMbRtLxDVf/xbeDdDzEPjoeYsBf
PCyi4ydWvP8PP/Effl6l4y0Y0fEWFv7i7Wuv344RQhSwPLqKX2CRxJsULS1x
c7JO7JaYX8amwljALZrYbAvIiljHGDXQYMbns7GkbzY6rD39MPV7E9jZ9Nve
mCH13bGZx9rbKvHpG+Entj0Ijr+rLHVOE/Bpcr6udnk7chMTCbcUKqB+pcP3
zaI0uFza5zb2YQjFmBUmFfWCse3t8Wo75imo7wjTKjAYRueFtt2iaXmYy6Lh
OJY9AW9s2MtYfg7jTisGqmxvFfovmtJ6esahw96os694GN13531TFmlCBd81
8/pPx6FZYdc7SY/3eLHKeNObrGZcvvudE8pP/Ju/WEqfv/hv/m6kz2tkPfbf
vMZ/83p1OEvn3cw2dAjnfm4QVYV/PH69f7GJBloq3R7bchqxOSbC4/CfcjTl
kdrGVEGDBO+d+5l0qfj06oa2T6XpmNYkW8nsSQChDecs1+Thim/qs0k2d8Ay
snyt7xDZd3R+glHL/+Mn8I+fKGr/x2cghs5n4B+fUVCIZp/tSgDp6g/Xbi42
wJWOyXt7+Qlo4hV92C+Rj5Zhz3bc/Y3QkLn6e3sYyUudWBreuFVhmYXx9Q09
KbCvv2CLmA0BxTo/i+7EtuD77Upc6+VToPSskq1ODw3ua/A3BR7pxtBiMyeZ
/a5QyHe54GzLNHwrvbipLbEf3yaJiiXvzEIH60n1JcoUXM1h90hmGMKfllLX
M2gluEfrZ7IJmcdZuQEp+DmEnRUstyJOlWPQGc6Kj68m4ZfP0T9dCe/wrTGn
5CfVapxIvnD4t8QkLGLlodVRA0i8vf58PrwaxRx8t/IxTkEZ12XOksI+XNdv
c3A4uxbbPx8Okbk0BXl0PozddD6Men/5cD2dP+MvOn/GF3/58/FVy62UTBpx
6dl4eceTVDwuFHmMbwupQw+ceBJtXI4Sxf3uLnEBSLuxMc3lDQG/lHh45Yk3
OLLT1YaD9y2YtcZvbpogIOHiuPka99tQrrAuYyV/DqCxrsvnEQKeXfZtV/6W
CAxfkqNSKvJBf1/b7YZmAjKEU/okN6dBh6magB01HxbD9hSY1BFQ8tjMMeJ4
Bb7dXfle7ugrEMoLrc+LJEDisu7spd4arDdrjS1o8MO5s4bqLMYEsNcU8IlY
NaNB1qubN3eEoy4fvwbjMgImLwa0DwS2Y5KMorX0o1x0UrM+EKJNA26l4j0y
G7uxdtB1QlSmANPdhrXsUqfhvteYr+OFblydxb7Ztbgcy3gEPdMtp8GOsiw1
zKAXf+7y9vxF8jUuL8Glp7+nwCpxNlW5tAcF16scuj9BxX2+cqyOrNPgtNrr
3sKHTmzuKQ9Q7aagda6pOlE8DYsUSYXH6h1Y6BxBudaPeOnlIGMGO4kbSVPn
7fpacWr3VRW/hgJkLHt4Xs+XBj22TG7yKlTU5L5KO9xxG0SWN7mahhBwM1g9
qGJFBT6uehbRyhGA7VHrltxjCKii61+Upetf+Kd/1YJ+1ezm9IRwGa6Bp4VF
YLB5Va8mGf+NAWvqKHNp8GvKsXGZKgUGBmSCumIJ0NU538C1IhumzvkKQXQZ
1L8E4YNRBKhS3c9EXsgHvdAbJQv2CKpNW2fvhROw83ry8n1jufB0xneIQ6IA
gtY0PD2UR8CekPcJeckUtAz6nNJan42DnF0C+4LI52c6Xql+rMLtNw77p3zM
xVf1I8l+ugQwf4vXHPZuxOfz53Oid5XgLDPlSf8kDRqXZ5V8O0fi18SmJqek
CjTvuNR6J5MG8iM9j/wMWlHqnSr3+t0VaMq3e7eSJYkz9H0IutL3IfhvH9JF
35+gAX1/gtN/9yefnOuntdQbcPujmpEGohQ3PufzfEvy+UoDpdepKVRULqut
4tmfga/v9Fe/JvXOor+Kj40DBXlXGhrdv5CIRkNW0mvfEnCFLXlo3j4RtQNS
PvldD4ZfYcEnXL8RkKjCjmYlQZA3t/C4tSYXPOo9RBwGCTCNnhJuDoqHRpdK
sbvWBeCsoZ1mQ+ZlUs3oWVhuCby+M+T2nrUCcu4UWjRZkn3nk4z6OaXgVPbj
i4ciFU5vb52uvkyAi6PkAKtCOWgEGHhP91fAmsiV21adIKDFyOpST34p8McY
sMecooCREnMujxP5nV6fxNPkikFM5/PR0ntFoGTn52FA9tcH20+RlYsFoLgy
RHRROwPevRj83lhOgHDS4x1bPCh4GmJcFcoQszpo45tsCUi/udnnezkZx+aJ
oQOd5ejvMmBlpE7AAUrTb8Y+KlZ6XfP0D6tAV27t5NB9BKiMEg940qkozEw7
tW+aipkBL5wDBQkY+yQ2/yicxEEums2rBxV4RjYl7xD5/ZrX2/tTB4txHe+a
UgfRMlz9nikj6QkBdfR9JjrT95n4b5+ZT99/Yi19/4lBf/ef7RfevfRMSYau
sMfBUzv94Ne6Xm/eWQLm9l340dBfAkkfDfnt5DOAm3BZcyWHAD/3W8vH6qqB
Mu+ty/2iFErZ5LieHCB5ghEjR19tDVy7q3ds4hEFZIWWJx0kcVKIvu8FCfq+
F/7te8vOaDs7/2kA5k+mXlS7SvD9raE9Rz4/mtPx7PDyelgnyBPu8LAcklRs
QvcQJE/zubqxY1cNVP0+eejzAwrcFNnuZ8JLQLBHlp2rfSUUH6i/zLe5CGQU
JVut9UjdvTSyme1YGShGvl54ficD4OfRcAOyDrfI3e18O5EH5740u/ptdIR1
lom2KwYImBUV7b+3pxAvVI8OprWWY3hFNF/QXQJo/JwqjkZ5aFPEx+aQSkGz
lGtzwz4EnBqKchQ4nI1Zp68c50yvwPfSWn/8PMg8fjjcpDQdg4G2PbaBzxHd
G2zu7C8i4EhepKOM0lOY6ElwtTDIxfOrz7+eeEfAZX/Vc9+SsuDBi8fvxGxi
ccOBCiuZYQJi6f4ClNn85y/A+b/+wlq6HwGmdD8C/vkRuNzHfZdBK1AiqNxO
24uB19TvPDWExM9h7tJc+Q4YlZiIs+Uvh8c744ceMtNge/eX5XkJXbCgISH8
7BsVQqxERFRuT8N47Pw1HmonrB2sDp+pr4DGwf0aNST+a9L9F5Cl+y/w8a//
8nbZyo7hoXZIddK8ts+8DHbYefT9EaABy7S7itqJNlBTdglg2pADZsxCs7He
JF7d7+C1tWgEbb3xsWdm5N9d8GTObg0Be5dqbG84VEGAkojLVc5IcFC+OXjc
mYCKBLtML6U8eP3NbGfplmSMu8llkN1KwAJ7aYXWqjBQ6eRvHmRNwoaufT/H
Zkh8Xma8mU8tGvMml5z4fxbgBdXwU7daCOAfVNLzY36OE1zOmb/OFuLcNwu2
M+0EPP/WHvj6QSyIv6VtWmGUjmN1bMyvxkj8fzk5eSC0EALuNd6M1UpEtou8
0pfJ+btMqPd5zHQtiD2cPL56IRHOn1QqO6hGwCP9ziKZuy3gvPPOJVPfFOCY
05HzG6TBn5T//D5QpPt98M/v06D7g9BE9wfhnz/4ke4nws+0//xEmP7rJ0bQ
/UdoovuPYPPXfzxB9yvBi+5XQspfv9KF7m/Cabq/Cdv/+pvX6X4ovKX7ofDP
D7XIP/2EY0UXPAjxeTnL8QIEHrk5Nq+iQVyoBlVpdRuwfD7Ycr02ED6tOr1s
JIMGQnc+WXuWVAGlxCvkxvVcNOTMEs4h+67kWvYIJmdDdtR6Y4ngTJS8sMLI
i8RtCX0DqV3HHuJ0cqCunVEN6hBSGp7mJH5yiC78dniNJmph6UE/SPxL335z
rTcB4Zky62R4gpEokhjV2xKFjqkFOy4uEFBt8jn4j9NrYKDs8WZqT8Z+3TSO
choBZ9/OrA+4nQ+J+6SfjmvHQ7wwr/DbNjIvi+woGU5+Z1bMYI1bNMwLaRaX
kDhv93EkXOp6C2j94V/d+4oKKUpreEXv02D8ZO/KBY9O6Hw17neJtxzufvMb
Nqqfhlq6/w4jdP8dmv767950vx6m6H49mP3169fT/X1Iofv74PHX3/97DwC2
9HsAUPx7D3Cbfj8AA/T7AXjx937AhX5vAIr0ewPAv/cGIfT7BLgx/N99AjT9
vU+Yuj/3ZXa8CyKuPTij8DsDGW7rGSiS379ZTi7YO6kVgoSEPTVuZONY5oma
q/E0kLoWeEdnZwVo/Urg17/Uij+oCxESN2jQcu77ysfONjD81qZFy7IGr94I
GTMj83UyMbf8lGU+Xtxw3fyHYANulRi0O7iBgNP0+w0cufXf/QYyetHvNxSd
/b1Uj5WgmoW2hfKnXOAbNh85RvLkUNkSneazJTijJ1Ivy1MEuSbL63JIfHvy
yFW8UjoHaSVZkbtnCqEi1fq3UC4BGllTI+4XPcDm0G1OLmoD0Fzs4lfuJUAu
8F1h1bpMkLdVONLG3QZHvyuLNr6kgZFOwxZn33CIElzk8B9thxd7l5nlkHr/
6+dsR2OuFGy3f7zV1LMFwpolCdcBGtyaeWq50qACM7+a3PF5Q4WvTH4en/YT
4OtVYerI1IAirM8CBU8kg9kp34BAUQKs7/Z/3aDTjFuYtTQnOl5ggfIM+zwz
AZkFybbPVJrxiKA5a+5CCmZvZz8puECDZXc23r4q3oQ9KwM3r6vJQu1V9rP4
hwY0+eDU1QsN+KI8ANJoudjAGJTiv4qAkR0rS8zy6lFe9I/4PeUCdHrLfSVh
MwH6YjySOFiLxy61iQcsFuD4qg1yTXsI2JYWtqHlUg1eyu4lRjyL8QmLzfjZ
gwSUf8hYMXW+Gj+qUIPOrizEmMcaTZanCJg+aeutXV+Jx7Pv2/t8ycNw1waD
WXKOzF9kCm5zoSJzb98At2gOuq8SSR8i+6XZ8Ad//ZNcHEju91xhkwmm+4+5
tJB4uGVMsz8+LATvCMZyLH2ngEdmXZlnMgE7di2vem8ZgvOXpVffLK8GYs6B
T9Ga5BVx3z1K06Kga8yx59TZVtjJxlysWUsDdVvtWV/eQHjXsRSoPtcCXZru
Mwa9NBjzHNn4mO8NrhIwc39zuxG8pc0N2rYSEEl8GO3fXIaKPfe2hxtRYeZr
1XCaNvl7E8pilxKrMe/kC8nYHdlwxzAlkvkiARN7rxtpidWjmuGP7V8Dn0Bo
ykpPfyUCOEeWr7e6UY+DTz0y5p9E4KonG5vkjhBg5pzOy3amDu/sZs/X2JmE
3O7vopWUCfhdv61C60sN+m8pqZnJzsBZw9Z0xtOkvmtLo3EEV2Nkt7v47cps
vKin8XXfBQKOdikb5alW4bc/myu3TOdigKuK5A1DAk5cFbiRb0TGOW/9zyzh
PHztzEAxtyf5v0e7qHINFXN4vXT2DOVjZp+gyyqS395zWPsxlLEC04LOlEop
5qHUuesME24E1OavcF6vXY4f7f2txyVzUHRD7AKPLznXfO6JSvtQUCvVTedj
RBZ6pwwGK5G6fqLngKhjxisI52RwTsorhY0s4yTmEDCMIhaFWcng73cuSX9f
FYxlT6d/dCCg1Ko2ZplFAlxRK+T4bloPvZLyfCDzv/o5fH1yux14LSir3Uyu
B9ld+v5CZNymVT0yCl8m4fOgd9Q8QXKeOyo8NXIk+VX7e5uZikJ0bxRMF/5d
Bvx2wQdlvAgQe3WI/00mBcvYFkw1M3JhUKf0CcWPjMNC2mBgcDk+zHl3J+91
PMidDVRfSeqsvAsztBaPclyec0uMV8wTaj5Xc2qReLJVKs6vU6kMmTJ78xRD
vXBCY63pYDH5/PhWHpanZVh0rWP/wFQsHlHYJ2SSTc6Lcamm/UyFuO/c+yo1
3ze4L1p1hXY9GeerMW9OLhbiLovr7et+ZGCJgt2tTaUErKNKCb1qyMa6sJKP
765moakseqs2knxe0ZL7PV8e1m1vsTPnzEVugxz7FiRA3Fq0RHJXFuomvqv/
bZCHvza+35pbRQCbc7nsae88ZP3ooqxRnYsOVkw7X5Pf+bjdzkUjMA8Npz9m
fPpJ8sON8tlfSN44vpljQ96GfDyW1jU4upSPJ9WaPv/v+z811c3rMuTAAfmg
1DLBMmj5ZtCP0QSEUISE92qkQ63uuRqvBipcSbkwqETWSfLUwtIRsyiQCuc4
cpHEt6FL+95WknUi7F7wcGOnHa7xXvNDiigHyw2Vc9Q4Amw5ONojVV+iAfvc
rTWdJcCzaWbLsUoCgC1pQvP6G/TNDDE5FFsIF+0WzujVErCGZbcLZ3EG3hvm
vpZ1JAu81/MysneS8eEuTp06nI4rBs1V5r4mAIO3KbvbJwLO22kwVQ0lIdPz
7kyXS2Fw8Prpbn6Sv6naBVr6YBQKWtsSd3Y/AWkHPXH7RTLvTdbYWReN2gbv
1r5J8cFlU+l2viQf0FwVRfKHOyiwMH3z1N4w3L8m8Y3QbwKoW/PSt357iGwp
GeX9eW+wJkj+p/gc+f03jzWcOOcD248Vuq/3S8P1keu/exCkHmRpERRNvQvG
L0blpvxzsPn+XevUDwRkyEoriP24Bmym0qdXvcpHra87Pv/uJeDljJ9jBIcf
dm1PV70+WYQjq6O4eJtInvPqTNBYSCweG3kifmC8DJ/MSc/ezyD5ZKnVD1/t
TMy43MLT2IRYJ9zQfzaJ5Eu506sihkph1Z3lXnJcubB1ptTXjIx/O+Pzg5/X
54PC0uozMw0F0NTlv6KdfI9v/P0qK1oS7Hx9o6m5sASuOuYwnCTr5xSvya17
WnGw/erbpvPfCyEz3GhGlaznGyLuRh4O4TB1VfSJUlY+dNyevRHaRYDojlkT
YYVgiIhjeic3ngOOa909W0k9ktii5CZ4NxTOlSSu/d6cCbcu7szX+EzmMUp6
UuxbLNzNmdOSepwGHixnWp6PE+CktOPRZrNoCD5lllspFwtfec9vVid1fbNt
5T6/pWQwLjWy2eIcDt1CkU9SyDjL7Bc606dI8sM9P9ZtD3wI0ptrOLtIfdrn
funHuWdZYNjCMjxf4I93tNXqe8k6afjMVf68Ig9MZlqDYzyj0H2NrntTN8nD
w4/mbzuTD60pW5ft3Z+GFjO54cnk35sSozd+hDcfCA6Lx+s6yL4LfsTSnUcA
L+fNsIqtadA7YuE+womYdD/FkJPsIw2qtrVWxXPYeeCOvTJzFWpmE0lupI4b
7dV/Brte4LzNxQa+5ir8ab1X+zipB0s+W6+3fheD3Rx+7HKR1fjG/Gwz2w1S
h9Y2Jk/ElcG5S7mYY5AOtzcXCTiTuCRHE3ml3V8GvXWqIzVTqTCk5i7pRz5n
i9ba8/VyCXyaDX9bHJ8DDJ7hh43JuXnNZENqgH4JDA97rDqUmgsbHh3wuEv+
/BV7v+dTBQVgHXFoqqU1F3w1/JPKSD2+nsFQWONqMeTK77no/SoXpHzHWiRT
CNhuJsju+weB66NakX1ZDqxc8VpwlMTPuMd/TibxlYGtXWjW2ktZICDWPb0t
gYDDklvdEh6WAVPmOj/OrDRQ5H0XHknW59j9yJaQTRWgJxPkc7ogEaI9D9/v
IefIVFS9+Vv1KlAXucRp/iwKxtfZb6kn9dqlEhlbfSYqBBWpceuf18RV4X2X
j5C8Lnr0lixXeyV4VVo9u/TkNUo6U1Oz3QlY9bBNoyKgHFzCzz4fflyA7UzH
9ebvk3190exdEGsh7N678LTRpQxDtbnXtpNzoXXLfkqaWjL8XtyrckWqFlV2
tPuPaBKgRH3EQUkSBrb+/f69Sc1oe/VGqDIjASL8VMqZ76/x7Rf7o0zXG1DH
5YPdH5I3ymxWt3b8FYUNm7sOXvvShA0CXjHDKwgoPn1fNcSPAplB/itq5t4C
2/l5uxVkfJZo87+WfaPAnKHOtwCFDOh+4VIkFU5+vxqX3yNqBQzbH7HqOZgL
ETLLbtxyIXlgt5dcbQ8VuEz8N2Rl5oKyS8fLyVsEGB0zaPW2rYQb8YezWgfz
QVA7haXHhIAkhaty+1VqwFZrNmLQshCSipTF88l5+lPMsPfS+lp49eBrnNn9
fJBhAv5NcgTEzgbqcvrVwmX9bcKXS3PBbHXs5nFyLp+3So6QcG+AZKENoy2p
2TD5ZcWTrC3kexQNLh643AD84vrvNpJ94KDZr/hBkIAj4sWCGtgEIhf07CLz
EsE73SNNjYWAbNsa4T3JDWB/t1f/4nkvVAm08d8hTta546S69KkaYCh5vC9h
VzpuOze4zFGXgG7rwQ/mUhTgm7rWWH+kGqPurXx8QPR/+z3XvOC+FMgr5gsK
VGxEJkp8Xi4n+R53Lr/arDAU+ShjOWPWhkUhT2V6o2kgF1KmLO8dgn0DWi+y
17TioYgVTz06aXBmxyduCkMMUH/eeDw+UYuFY/eVnp0hgGnpYwrFLAUyCl1V
LltVojNP39FYMv7mrdaNoYeLIMzuEmGvlgVCl9rSWAvJ/DIw8hZPF8O4qMz3
+8xFsMrC/8TdCALUfnBbmE5SwClC8VVRahGw9y/9bCLfw6d5tSdEpBL2zcge
P5qMUDiklG9N8j3qrvhP6qy1YKgq4rMoWArjo7+cn+4iwCNGK3F7dR1sxd1y
J/gp8PXm5nhNkudPKVsabOlvhB+eYo2bLEthYHkln/YHGsx15+vndLQAl5BV
+27NEvB5c9+ekkCDbCudWKeXraAZ1f+S+JkHF079mL0aSQMmKe3Z1t+tcIlD
+k9iZyYELWnzu5HP9f9c8ruZ1Qrami96JY2jodjt89RMIfl+xkwcWNkIWXtF
zg3fz0M1nzOhs2R+n85rvJQeKyL1XcudLv5afPOzfjKD7Iu+MdVPgjPRcM1L
6Uz4hnasP9R/n82T1PtDAaynNaJA5mthYU9pO46VntOxsaDBQFR/RrhvMbh2
dy2dk25CsSciPytHaLDtVdO2QFMKsK/icb3gX4kc9f6KyYcJ0Bnev7VEthpG
XPVe9glQ8OpDe1aCrBPdl+bzJUrVUKMtMchVXoZrV6R015L1lpjqFUZEvAIZ
UVYBnfFSSJiXPrud5KvbOkU9fRh8IEDfLkbiWAUIfpq/3E/im9Qq54fHGdPh
VWx0fcD2ChA/4szaEkBAUJn8bdnNGdBLY4hIrquCD9rPL3pdJ3Gs4LHGnnel
sL6TZynJvxK+m9bmSWoQYHhGKTGqrRwWFowDwihVIFby5O5PfhK3JY99Yvpa
BcckVPP4NavB1WV7Tg9Bg5jTVnsCUhogVKp875OP5cCmXiGZ0E4DLtVApaXK
FjimOk6xdyuDr7s8lPLDaFDwYcLWo70VzgvVqi3S3oDZA2XngXQamJqsZLK8
Wg+/88faKCGZqHDwqAAjGR9V1fLf5T+K4EZ+UUaVYStyn7z5hjeUBisEAsQl
ZIug1vsEn5F7G1o8NmmQvkWD7X6d7kfcSiHnUxpNYl8TKm5RtGsldW75zU0K
YjuqYZOb+6CjYz2WF5nd+Z1LI3mIMudHpjrYUWb+ASSrUWUpqdC6jgatn+V+
HZmvAa0L37WWblbiNqFNgX5TZH4bxrpYbCphOVPFzWMPqVhWPMmSs53U+0PK
CezcFZBzf7Gvg0LFC/u1t7iTOvSz+PU0qkMGPl/W3rtGjQqlsb/ylj8k4OBE
b4ZTcxbOwwvZ2P5KKI/8lFliRcBgEc8eu08ZyK3a0X21vRr2Pe56aHmZABXV
wfF18uno7bp+6+KjWuBx2t3pc5KAy2zCzm/iUtDhsb+m9nAd7J2Rf6xE4qR7
5dD2AzzZaGKxq8zrVj1wqLbY+JN9etNhcvl8TTLOHJxNbNzaDEtG14WEftNA
0MokqmjKA3jEpRad8puAJ0hnA996AvTUu91WxhfCMVpP/paQBgjjmxU5w0TA
g+2/xrv3ZCKbs/22w1Oh6Ljqpnn2GKk7XMoCHw9FQp9Hg9Du8hrU1Pai3Cd1
Hw/9/chJfz/y/n3/jOaT9nzuXJiVvnbuLlMTDru3HeX5RQPWrhVde3STwGCn
fwXZjRiIO30kJEi8jVHqS44Lh6D7EqcuZ9Qhk8yQQ8QJAgRVM8S/lxbA6HuR
t55JtSgRy7tTlOyjaXo8QYAeT/wXT6DHH3rp8ceKv/EfpucLnOn5QvyXL3p+
sZeeXzj/N7/KklZFXtFV+FHG5qBnWwUcpXZU3uYioH/LkalsvWrslQ28u25V
NVBKCtqP02hwfeuTMPe1dXhasf5Qi0w1FC38VH9eSwOHetYbN8m6sZaqZBYW
bwKOXYLiem9ooPdqpLPGrhQ9tTa4306uAb/zH4LX7SGAI6S/y5ijmOThD48J
z7WCU5oH82V3Ghyg9wvepvcLbPvbL9/9NA+/V23E5oxPO3Z758POzudrhkh8
rmdXiOc07cDmkPqy1x8y0XSbmzHLYRpUN/iHFp5oxV9fzFM+mJSj+vYPz4/d
pkEcvd/xFb3f8V+/r6bjAyrR8QH/4YM+HU/wJx1P8B+ePIuu3y6mQMHnlts0
Gx0rMdXm0dN1RwkoSPycWh+Ujf2hylFt96rwhfj3rtdXSR5LxzeMp+Mb/sM3
AzoeohcdD/EfHkbR8RNF6PiJ//DThI63WE3HW1jzF29H3b5JTn6txNhTlDZe
uTIoOTHL46xIQC77Xrfnv8rw8ylqyVPuGtiqNejkI0CAkN2mC8uuZeNuvfna
nPImiLy/K5ZjjgY6vAJH1GpTkEd8+ZAwdxcUjAc97Jyfhtn6Esbcd/EoI25s
XbCnFXTbdlfurqdB3/Sd0iOVpXhw2WkDR8ZauJXwmDN4JwErrsuIPSYa0ec8
f1H8hUxQHxwt20nytG3343MU17Sh5K6b6ydOxGAYjAbcTqGB+nWx1AWFNuwx
rv8o2ZGJ+QI27FYvaJDRwLJmpQXJJ6g+jb9mczGPg6nTOfH/5y+y0+cv/pu/
0/R5jQv0eY39f+f1N+utBS3edSi5yUWk61IZ5jmYnNu6ioD9Hx8tPdWtxr7O
x694N1Mw36vy+y+yPtPg5YmKHirGtV9I1xJFFGGOu9lxjoBD6xjr1BbK8Q32
fLhhXYjqEdv9DjqROp3OT/A9nZ/gP35iTOczaEvnM/iPz+z8Hce416wAj/ZO
K5kLlwPh8t3wFKlfDLccUBaYDsCbK2lrRR3qIfWc9EQCEFBlumqLjqAxvAgq
Zennb4e+2Ea5g09okPrSq1Zc2w9Sef68z/NsAZ22+TGOcRoYy/kryF8NRWaf
IcvreS0g3XjagWmYjE/fxUbBdxTs9/Jkjr5bAdeFSqMukryohU394wxrLc4d
n5je/zEdSnz3q1qRz9NrsuPe7W3APJ1PTI2rg0DLdvcC0wECNjw9rHLMoQnj
Fsa6vr2IwS215jy32UheWvR+QES0AW9+sZb4ZpaO6dUz/t1kPcQ8UO4JPt+A
hrbCd08+y8ENt9kKukl++5bOh1GPzofxHx9esfc//oxZdP6M0n/5s7jbZ52l
rTWovXU528FHBah6dIPHCFnnG9cHWL8rJPvTmPJ+SqIQPXzjv3CR+kJczj5t
Cznnnmye+cxclIc11vyTp23Iucw3tfXD/grssR1qtVqfg0K/dVx2PSJx71bE
ma8ry1FsRm29XH46uir7KoeTeqGSiXEnclBQruGExdsvb3G2dx/PXlJnSezi
fZOUEwuxj1iVQnTr4NZExPoYVVLXB3IMX9mZAP49urqTMs3wqslhsI/Eq+m7
rupvaU/glPxQQjhzM2h0SCTtYiV5e+i6BR7NdKwxeVo987Qa3kgbJh82JuCW
5bIfG+6UIlGtv618qRwEV+4MNSD5T8OUqZC6ejk63VQ+/bUoC07f7HeSJPGk
9vn3yfGiSmw69Otnw5Z4YJLP+Kz+gKyrC5YxbC2VyHtuaDGwwBovGLi0cT8m
gNmiyykrrAJl8nvCNrqGI7EQ956f/HuFHirEhbJUoPLaAvtb697gC6Fpxo2k
HsQbsaN/npajtaR0q2JUOibZyImtCyGgfHFgzPoRWf/e+0XzNmTi5GT5HfN8
ck45yk4MEmVIG/Kqueaci7nnomWYyJ9npetfrKbrX/ynfx2Ep1fOhReh/HP3
M8XL8vDs/l7n3lQCTAvj81eoFKHjjcN6McJ5eML0c9mLNJKXqpzcKeGI2Nfm
wHvQIQtnX0p9XSR1t1/O6aKs+VIsLtieEi6SiaSwql5B/nwWhfJ1Bw8FLzis
3FN4Mg33ic6s/BNPwI58wSb+zBSwlzPm5i+phtONr1N7yfhHXC4zctoUAJcb
dJ/+2FYNpfuEHL7cJsB33i8+QiIKZ/ewCHrcrYSEN/znecj6yV7epB6h+xa/
dD1r2RtUCowHj9oakv1eb7Rv/ZEXORiz+vgDTZVC+Lz1O//1PAL+vPxvH4J9
9H0I/NuH1ND3J2hA35/Av/2J9oXd+mqXc1Djz/r973Y8gt9jR2LGPhDw7WDS
sfHj6RhaPqZ1UdkUJ+ySxUwI8jv5lU/pVKbj/kFaXK5hJDkf4ktqJwh48+dQ
SDPEY73r1jWqRDw+kyj6uOILAa+znRjXfAlB85Zagt8/GdmPOMk0kc9704a3
Hul+jd8pDnG17FkoU8TIWf6RANm75ako8BxZozkro7JzsSY6LtpyiIC6n64m
FOMY7BVnNLMXzMdLO9deCuok4HvJchkmxigU/bbn4YqNpahyjJm/pJx8//KP
ip/1sjCKNcKbRbAIRZi8e6TJuEU2mhrNyRbijbOHHMIu5GJ8WCuvbQ4BSo9F
raR3FaG+hdlsydFCFJC1Bl0yj7eEOc9KX0oGLiN2NIssg7VmS9WLZF21194M
FF4bC+Hf71d9oZXCHpFnDHEl5Fx+8GvUTtwLTMfsLUP6S8FzQvNMSAWpczNS
Xg0wWmDmgdd/CtryYXyZ/xHdXgLOBiVQju10Q428tNf5RdlAcQneRyXj0DIV
+uPseyfcsKxivWZ0OjzadELDk0Z+P32fCcvo+0z4t888TN9/Ah99/wn/9p9h
IZnRoRrh4N1jGTU76gXVzlfDRH6R/Si7+Oyxfhxk9DhRK8Qc0Wru45r8eZKX
zrd3rZxJgxum+cybDodhkF3k2ovTBJxJNOt8bZkMMW06tjPib1FWJiX0Nclv
Gej7XnCj73vx376XT2zngZB1KdDQuP6TMVc+skat/nW+iYD5eFcB05zXcLpX
piP6fhmetv7wWpGs26KNKuZrDcxhReLBC4Le5fh0BPbfJvuux2uDh+rRYMws
KGfZn0nFR3O33Tc8J2BCM0Lu1rYMDF1+8BCDYTkKZrqdCCdxQEGtmYOc5Kiu
9/bShRYK6lfLBpqSOObiseZZo2AxTNgfZrv5PAf0S7FmRQYBcbOqq0Sv5cMP
9w13qVN5cCnmlH96LgGuE4PDecxZUBkb8SuhLA+Wff0qOF1JwO4XtjkfLLIh
WkjgDHNfLiyd6l23hXxOfHi4LGNVDvRbH1+T5JUD7RfczgpUk9+ZKSDUn58L
lWVnlA67ZsE5rstnK8nnFnR/AUTp/gL88xeO0/0IOET3I+CfHyGTZe+wwR6h
+IUwr15FFNw6shg3W0xAG8OhnnvaFBAf8Pg8kOMN8VnfXN5mEfBjwu5HoWkF
BE796fwZfRv3HNwVI0rywIigoi39rRRgqpQXeLgqHqs870r5JhIgTPdf4K//
gv/8l72y6bli3AXQ8nR37S7PMvQ+q2fwv//Pq7NtyupEYRIM1PLbnmqtQb7t
ctMnL5D9e8ZV7OvETah4NKVeJVaHJ9YWbKGSc7PlF0MOVTERlxhHLp9UbMCy
wy2h+qSe9bF5pX9+PIHkD5fX1UiRc5Xr2h1l8veyNP7Kv6EZgVm5GU7rfpSj
mbSQt3g0Adcm3Drq75UD8zbpAb24bIibm3Xm9yXzKPDnoHxSOYiJvP78cEc2
9H+pqaP4kLzX6jcc1aiAALO8/bt784Ct3TcfXAhY9HtS8lG3Am4wiT6+dTUP
mMuGkfc+AVZdsr6SM5VQy/7J/XtcPpgfCPLgMiBA3tDX54p/JTyN//ZQaCIH
+OdYzl22JHkI3e+DErrfB//8vp90fxAC6P4g/PMHjel+InjQ/UT45yeup/uP
4En3H2H1X/9xiu5XgqTBf34l/vMrBen+JuTT/U3852/G0f1QOET3Q3H2rx+6
4LpW5rPua0g7+6HFIboZFzc+s/IhdW5+gMkBzRXBqKfedtblTgum+ZVTEkm+
d2XaVvgUVwhmi+53Lx9qQrHrdS29JK9w+bbN/Aftd+lGxUBWw+gGlFmjfdt4
HwGtp8/J32FIBo/i7fdXXinBtsdd474kHl6M0dqZKU3iALfhTjX9PGyziSs0
biF5u8fjoYzUChCcffZWqiIPGsYCqFV3CMiov1bYdLwSFg4/mn4VkQvitKSF
ZzcIyLE+vfdscxWYvGs/aGdTBI3DttUf1Mg6lJ7iP3ilBpSt9pSxryqEk3fk
9w+QcWu8fRy3DtXC6p+LpaEXisEdxjc9JnWKT6necLJSPTBXpy3cbMqHmW1t
9c7cZJ/S/Xcop/vv8M9/n3X6z68HGt2vB52/fn0U3d+HaYH//H3I+evvX6Pf
A0Aj03/3APDvHuDv/QDkr/7vfgD/3Q9Y0O8NoIp+b4Czf+8N1oz9d58AjfT7
BPx3nwDB1PPBGs74QpeFeTixE3113xtc4aZB3oEzGgr68Zg2NvU7mdKKBbaD
YkdzacBo+d5OLiEM58TWmtZpVOIdD8vJYS8CtAp2qfYIZMDojgSTKZFKZL3A
OPDyHgFXU6f6aljL4AX/dN0ZEkev7LK87kv23X76/QYY0e838N/9hqwQW6VK
WwKKsdUnnZe6D99WM7B8/E6AJdWcuc0uBJ9vZRE4bFsKWwqnVJ3JOWgZy6zQ
y0Dq0H3Mc8cti2Dql+gSeyMBm8sYmCdbY3C2/dNJlRVFkOnJNbaqgQDdcC9j
k/tZ6JmWsOhcT4Ei/ZACi//xPZkaTe1DNajGphP7UuchcG/O5nppQYDa7acb
eo/WYnvUNM/qXHN4WvHj7Yw+Aeo8JavXy7ZiuuzhUf7VL0B2X6zxihYafNXW
jXWLaEXn1vaXk4Pe8DkwxDGtnAbBGtE8Al860VKnxcg1LwEdPxHRWiyk7nte
vDJOowvrLV8aXv+ciPl7v2gRX6fh7uWRLV28vTjZF3l39koOnjsYtdzp9DR8
5V1Y3mHQi3xHJD4//Z6D9WNXWB7ANBy+lW5xz7MfGQrM1jkoIIovC7HMfjUF
kd3LEtZ49KORWCqMdyBqJcprlUVMgZyeaoRNxAB+W3DPzJ2uwJ/yyWz54lPw
3uycmLr3ALZl3u5Sn6rAiG/V4e+kpmC4pm7Sy2QAvQZtbbL1qlDgQr9Hx/Yp
KJXDL0GrB1AbHaUffK7EP1vYM3cenoIh3+K4GzH5yD8wd8wnTwEfUfhOzpP8
JC2gZ2cjRzIENx9YXMNZA17Er+klEg8nE7oKq2P7MLrwqNCIWBVqFFU87POd
gpdfqWfPhhXivKDhzoFlLrhPOuLsjf/9v9drAhkXSivQ3O6zVl2QPza7HmYo
IXUBX5TQdceHfZigwNAjzFuFDeun7o0GTwFVlDFu3eoeXBkpxBW6k4qXTDyD
+2WmgXG3ej5bGhW/V205y7cpEtWX5OL/N6dKZl/TDvTXoaBPmGt9diYeKXjg
pyBFAOfH8PB6vW7s5c0oxrlyrH4/xX3efBou+IZ4sc23Y1c8gx4fSyne//Wb
4cEeGryWiKPs+ViP31W+3dgblY3tulGP+vhIvDU8pud3uAW7rqYlHFEvRoXl
LxJpSAMroYMrPDPbMehKuWivSwkeEqvdxShDg8mfjKU3TjTjxDIml7nCTOTT
ge+0LzSo/rb5VJ11CzbYGzSL7yjFeXMPRfVMGrxj3Lqrt6AFzXe/3ir/uwQd
W0cNehJpcJN9/td4YyNuPr3Ilc2aju3Rn3WVSF287LtuoCF3JcacyFCPf2UF
6scfZFPIOdhpem1fynwbLsaM+8vXleFkQhxXkjIN/NNGB0d3teP2NM29o9Qy
XHiTZnH9CA06OvTMKF5UNFJn7dM+4gTTAynb3wQScCx7h/TevGL0QkdbXZ6n
8EQ4nAggecj4Vc2dFiUdaPDx/qC1TznunojVNpmYhvzowkv9SR2os3d18g0V
Kq7bOJzv+X+EvXk0V9/3P65BKlNUQgOizAohSduUIpQxklRoUEpmKSVEpMyZ
53meZ46np3melXnIzPNKxgrf+/rk/U9r/dbv373uOs7znL0f+/G4a9+HvnkI
/TxDLvy2CImGqU3nZPiCv6VRpEo7zmPzTPWtDQNQg6+OAveZHIDXZJY8OO+l
OJmlKirRiV6Ke63lthPRmHUCZypeX8S8wzmJHR3oa4VVuXIVEREHn0s7k5Pg
ubf+0NkeP8RoFrOVYpIDlcxiYTvwdfrdHppfuRwEzKca5Dc7i+BJPmUTD953
jLQsfnFIdSDbL7E7veoqUACH+T4PThIoV9yXzPnRik7uWamtykWoJFJ//mIQ
CRrLq5sXS0KBPtn9tghzMZgqPit4hfNYu3rFwrbsdChR4ZYnXiiHdiP++/tw
XUlV75jAttyC/H9SvCo4WYJ2HlcvvF5Hgj/KM3lSMhnAef/IaW3+crg1NpEc
nfrfXIRNlk87Xi+WkzxnpZIRw6T8/os4PzxCd0D5Q3Uquu5fOLpPLAuY0unV
tAYwOKysJnLuXAtKm+syG68vQs0KeWoWvSQo3fm90CQboaVO3g7LlUyUbx8f
GpiCwXnyxP4J3grkwnznngyhEOle+bC8zxGDeQvVnsCgJjRpndzMs1iI6GRO
JL5fIYHgbht5WkIloil8nWHAFoeW145y9rhjMLj43VhThYjoj0UrVhaWIhOX
p2/EjTGI59Wzix6vQkcOX3KdkiOga6KxPSISGCTzKRpJZhCQOKvwCLm+P9rn
WFZoguvlb29OakwulaOqM+syGpe90eGJxXk7nG+Pn/qm7ESqQvcPFxjWM1Yg
TjXaHFW8fkW5yurtpqvRocjquJp7eN1zF2yZ0OF9pHPy3OhsEYo99ilnuMAc
YUeGj9rheVV/vV399u0I1NSUzqQOaVD+RODmW1y/1NjyHhdwr0aO5Me7RGwr
UUpRC2vNIQyiOt4bNu2uRU/orxrb36hE818lCOV4vy7bJcbm9sMFvRNUU+rw
zIbrl08Jv5zEoEj+F92ODnsU1vj58s7lbHAw/8bbPYE/L3CGpDZbjW6n3tf3
iiEimov+5suMeJ9SqT19ZKgGSV2VJ1cPJiLyuQ33XmoMHHUzb73T84Vqvk9p
hLh88Hmdvk+rD4PK+5EcBVFZOG9iYEcsBMiyOTRkEoHzYbrnozMU1UhM4NDP
KbEKFHps2YVOEN8PXzZjUgERvb2zrHt4NwE5lO318tfA9fgfLuLVqWzwk9fp
5V0hQPPjH35jeF3bjNDLqMVnw0eb5Ylb3gR4orV0b28QjidpxaKO+8vRMDVa
zpMqQcNsah/WP2JAG99fdHilEI07MbObsOajIxZ6Wf/NS8ws3ST3t8uHqbcM
DXRXKwDjCDA98QHnAxKs+y8klUDhiW8ZB+iIYBgxuPHWFAOaRxHBoer5SM91
/4WYyFx0Ajsv8rYcA4uCzZU+gyTEF07amzSWgDzaagoez2LgnbfWcvpKCaxV
GkSrKVSATOnoKVVbPJ9fc9JieWUwkBWU14r/Lv73OSanzTHQT6pKt4sMQCdd
DQp+b/mjH3U/d3v+xuDPUdXbQlql0CNi4jq/owLm1aae7rLB6+gIvyCPfRFy
GHphrfugEC158BL0k3F+qGm4eXuoAOXlt6IxBby/14b+WG/Bz3+R6rqangNS
wAxMlbXeIdHpvI93tzAIvHX/zmB1IWLLwB73eBejL9YNRKs4DHilPeUSNQqR
jKhunshCKaqOeFCuEo7B7kHKL35J/sBj66eoe/ATfKe2WzuK63QXWYqti1q5
wL2H3treIRPkdj+elcLxSj8zyprsdgniCVq+fSmMgF7MGw79p1M6G7dYdM1L
kB65+g5UUIHCnkyqBVrg6xvJ019YywOGrUB3e+ls6AszPJmA44mY+eS7jzlF
0P747JJLcy44BbIn6eVisPxJ99AOqzzEo0Fx+mAUAd2K+1285YXXb+OlB3es
c9Fk/H3bZERAaVmmi0W47lNN4+rfxYEg2E7acu5xIQR7a9IZ4fnjK1Gawb+z
GgaXFj8knqqAA41WH/7g+Xm23fL14tEs5KDe6R3MWYGy5EwMzHH+JnmqSzdY
Kg2VhTzl7btAQLs0XqL/3puZivUvijRVw4OOgq0eVAEeFcl/uHDeHnbk4cHv
J2qhLz5yb7gIEZjfHyouw/sgaSLnk85yKJLfZcpinF2MJFZYrfVx3ijJPPks
tMkRqTz/VKM/lI/GD524OIvXlxBbEdUzv1q4JuJvoEFJhMQ1lX2e+/H90xsV
qI1UQ8HR08NXvStAWGyx6gf+dyP2WWzupYsG6ZTrtjWhqYgQFmf7ZQ6DL/se
S52zy4Zpu2kl1XfB6ITKSs2VcQyMm00nksxqoT7/IjE+qhISvHIsN3+T4HuB
m3/NyVqQvXvmhGgyEfrj9z1ZwvWFVv6UUtx0IfD85A54aPsBpV7mqlHowuDM
M1dG7wwEm0dCtUt5LMC/ZcTlO14vhx9onF/Jq4aAwFc6HZ0E0Jfa6diI6wg9
prTo3RLVcLRok/IIEQHvmskNcVkM3rMclzwSSACXt88OUxu5QfzH9efOmRiM
HBm8s3mhGlwF8nM5XybAHeqxT5t4fbl00InZmVeClN1jI6HgMrAJuHT8oi4G
+9d3LhNsiZBD+Fjy+E4JaBE+cHvhuuzq7cxQzrAGWEu3m1ZhzYH4W1ae9Kcw
uKvppKFRQQDqvZxptoElcN8/8twfXF+MIuej51az0GbektUmezHa3NRiEizG
4GAmWer+yXzU3Pm+iOVZPtIN7B5LLcQgr7FBXfJmK+j+SvLypC4BExOpxy9K
ScB/9KaZ2e50JNJQd1vgVhGaYpgavlWF45ju6/uvtNNQbFf+rTOsJWiiyMNh
FmEQ2S7GxOvWDkpwWJa6uBwWfS7eVbxJAqrEOp+KujaQiUz+9FsWwcZ4bsft
1yToF7W4TiUShP5c0zPf9yIfFUm0fx7rxcCf1r3HWf4tarq4qhZLyEVzaEWT
eRSD+xT3/lSotIMJ+69br6vK4UR7UsgPfRK0r7DStRZ0wAWDWB1NRiKEVtDf
IR0gAfm6+PkGA29oG03MZavMRrv5C8XP433ksomNSfNcIhS51/T31aeiy88/
Tn/B+07EscArobWdUBx7P3XCnwhzmRxJEwPzcITwjk1CsQvWY7dENPQq4W7y
95H8snkY6Lgu2LGaBn0jm4fMl9OQTvJz6j8jeF9gkL339mwupPutDaXFx6A8
w6AkIZxXDNaiNe/2TpjhuO7PeqECCi7/PLo8PQ9nlLfC0090gdoPnkePNgnQ
ptsfMDg4D4pPm+iZL1fCNXkhy8kQX5idf7m56I+B5S8eOoWEWijXtbPfsxoP
ZP2vwo318P278MGnmA7gNa3G9HsI0Mo+/tCDFT9n4XEl9w/tMFFtY7AKBBD0
s/UpViOB9EntmkX7JkiPTPnFHp4BUYzXoBLv+4sJ4QPFo61gunIq0kowF755
mpL5lJNAWH85Zzm4DS6LqbzgxvsP9zPhU2KfSCD1pYRiNakVEjI0JHfV5oPH
vIJkCP58hPO3Qu297XBgMaHQcDofFiQrKyrx501PX84zoumANlNh5nyBYnii
scN0SpcESaG7nFTHm8FPK+O2OGUWyCy0UdetkYAzdtDU7FsdzCve5f2ongzD
GW3eitcwcO3fGLu1rwcm/TvjVmYqwJC6/tGjl/OwFWPx59j4VzBdGLv+AlVB
RNfisP76HOjVFD5St60BCaXbs/YyCbDq7hmeg+tZzQAGKQ+uarj5Uf+yjVwU
xDnUB5Dj+P+6UtIonbYXZD7y2VMWVMKv++42wcQ5gAee7/1/lQN7/qPZnLoo
UPiQR0+ZhcESU5DH4HVfFCOhcUm/OQu1TnUMwRQG3Jzau3c7ZKPTZx08V98V
oqndhGhFvF54bb4N7w7oA3alqh/jsdXA6Hb47c/rc6Cdz9Ba8NYPDPOMpfxU
otCpqwuXl9bw/bwKaxyJiYR3u4tfpewLReIHbjp2r2KQZVvwPIN+AGoTye+g
4BqINuHp6x2bhR/BvYlU6f3w+ENC0KcQInzKfN/UJDAHjSRno89smeDYz2Ly
uNcB0el3yKvj/I1aRDzZOgGBhCR5jrhwFLzfsOyYwHFDy0mu2ZK7H9REFRys
2yuAXWHDY117DnZoEQxtp/uhL4mMToKLCF4N0iZDHHNAH6hlP3WSAGzCFMlz
tdHAcJDD5VAGBh+yqMXMaipAvxQpVqXEw2r7QsCbMAw26HJFE6v6YGU2xvqK
LQF2ZHd8U3ozB5c8+Gc7n/WBPOWa+1IFAqH2b3c4o+eAb/SSgjFNA8jtiIji
nMqCDbWKoh1nMWgU9Yqur2uGNZfEtBvkhfCWeCz+4CQJ7lVZpiVU9MKUhYUj
TU02pJUnTbutzIGWg8C06IOvUJybTywSzYS3XlJTUg7z8Hbmss1z73ZYKlWS
FFeuhlcdIiw2x0gQbt/OVF3ZBXDK3PBQTDVEvJ3kp/00D9JFpA3C9R4gJbvW
pu7KhOFdNIfqC+eh1FuHzyqkG5j7LLssLyfCXq5xtz3j8/BkuOl+dEo3MFwY
ail6VwOBVDeWHt+ch9d+ZNN/bHugIsOua/huLbBlvShwYZ+HIEbSqcXoDvCe
5q5YN3oPBbfUJoQtSBD2ZvZ8b147PKbwHntAYYPa5EsHmgJJQM8zfzJ7sw82
2CIOC/Q3Q8Mj59DdhbNw25ApIOXZAGylyP1pNm6Fm7+iz5w7NwvBGgUHbRIb
gW3ogi45Vzya0vLRvMeJQVMAm9KtDryf+p3cuZmTiljIlT/f1cKguiWqMzB4
CL5SFOkSElvghVMc+WTKDFirCX9m8h0Gr+dfW7KNG+H8QZ4x9GwGdqht3iy6
VQI73CalL10vRYKvxlMMv2DA4LPy6vblHJgmj7Tbh4pRaLTg9wGcL/H1lnIy
Ng5DvpDisN7vBhBi8PUgqs3AvtNNkrTdCbCXesVvyK4YGfJ4bfysxnX0EVGL
r4rJIK28VWOWoYnS2Tg+ai9hwMHjlO3eG4hcbk5YRrJmI7LmxHg7HP8V6ES0
q+lHICZt8+UdzUbItaK9f5BlBvZIpC2l2edD9GSyz4miNOhtG2ILxHWoF98U
96h4BYjqKh9SdMiDVy9KY+1w3v57Mi94QGEEnO3+RK8p1oD+7bAtI8UZODuS
6bzj/Ag4eTcH/cqpgvMJ46HlT2bAvUxYy3ayAvbueF2Rpp4PiweJBf/N5T5o
u1YycKQS7vDeumEvWAhu1LvP8ZrhfZbu0RbPwjBUfZE+SoXlw1lpCamV3zPQ
H4uoZqwHgJfW7UKl+kf4M0Amc+DhHCgc2FWSW9YI8jPHL0lF1sKMXaOMrxcJ
5KsUbk4fa4fO5GwtEa4GGFtT8zAhzUMx3XKIzmY/GHG4Xdrv5wBatSMvW9/P
Adf7Il7XlH54c/ih7kKjE2qUaBFWD56DE5L7RLMr28GXNVxgNasBZDekd3o2
zkNViHzQhcsdcLCrNbxFsQk8coML3MPnQc32diiBvQdMXnBp8/S4os2LERPc
XfOwL4TnizhvN1AZkoTb3niiW/lHC3J3kQByrkQEpvdAbWxTw1RjO/xs2b3U
JTwHf0pHDkcLf4WF+1e+67W1Q4SsROTOI3Mg2/95/AF3C1zzbHlqhEpQ10Tv
I8ZOEgxVMIWmxzaC2XXBmD9Xy9Gjr33CI7Mk4KvJ6j6L+qBeES2P5HVBo72F
QE/eDOwX63Y9YIbjWJ66l6JYN2gLkjp2mcyA5pTILCN/NmgxUpgGxtejM1cu
u4ycw0DXsiw9uD8e7p3raCa3aUT6BvX307gxmHvDd6vo+yAcsRY7XxzdDVap
TYOM0dOgnsKXm1Y4DAz7xL40HuyCEw1Gs1+5p4Ff+vfP4SpDdN5R7eUmoRnV
cxDPLtJiAPxj8rRWUSgpVqrnUVYrcmrPUq0dJMEf84tWpRPDkCqg6ArrnUC9
TzBEkm4aJGlDm9HeETh1de3nvdxOCJi4PK+6dxoIimKjQc4FaChNsUPFrhWt
XsiSz6nE+7KIJtlsQTHaPbuyt/laK3r6OuInF96vWx6e+sLjPQIiXxxrhW/U
Ahaha21AOQPKR8wuUzSUosGXBe+eVTQhLg/R0MsTJLi77R/1Y9s/6tK2HxHN
3/fVQKD+v/fV6H/vq5fOOSf22vfB/fASyzyddIgVoncy7ZyD69t+U9PbflN8
235H//Ohmv0nHnNcSnXJrQ+M+Hnumy8lQ+Uugj5l1xzE/omppXncB6aHz7Ex
PImFna0ZV3NG5+D7tm/VzLZvFce2z9LMdnzxHz8rv7CS+o+DHTDw0iOspyYC
xYfuOOH7gATdO9vKgqk6gCHwTnrH+3iUdpqsJdaRBGTb/ld+2/5X0tv+V7u2
4/7/+GLtnNbUC9LIhdUNO49Gtg5kXaKn5f4Er1NBmqVoinDg689cZpDqQMM9
3nuz3pLAattHS2fbR8t720fLdjuu+4+/1s6Peq9+pnwGRgpaaVnuDqQQxM9z
zoUE0UzyO5le30N9FYlkz/d2ordxH16oGpLgxrYfl8M/flxq23HHf+Ld9g4r
15mqUdbKuDItZzeqs9p6oPtuHnrlZteqmOoQ/8+p/rSGblQ1TLMkf3EeJrd9
vdK2fb2kt329xrZ9vRr+8fVS1ZD1ilBqQKUs2Kn9u3qQzo76uTq6eXgeUMbZ
k1WHbh6iUdpK7kADqbE2C8R5+P7POtbb64z/4xv2v3iKSPOu+ex65BvXdDKk
vQMVYFRseunzkEi5HLWw0IDCqChuG1V0oDzK709bcRxz2fYZO/mPz5jrdvz4
dtxmO6501q2ybX8tokxhVPJJa0HNMXPGzsYkcF/TeHxetBaxFCezm4u0oBiy
xFhBUxJYbPuVyW77lSVu+5W93D24V/5hJfKL46D1la5F8odEv/ST4fizXXeT
/9Sdc/ZffzPVbX+zhG1/M/btuNY/8fJt37Oybd+zt9vnU7EdR9vxN9vx+n98
0l5tx7W2fdKubfukbWz7pGn/f8SZtv3TdLf90zS2/dNY/vFVU9+O62z7qq1v
+6rBtq8a/bavWvc/vmoHt+M9/8Tp/3982Pb848M2vx3f8U9cedufbWXbn+1/
uHRtO774T1xv27dtZtu37X/3FdX9zYw6pBYibcuU16RbQZ1hrJZLE+eZcVfb
SSK1oEA78XjgdSvQW2SeEcX1GtmgAuXX/TXgctHXU+BuK1gbG65V4/WbzXCY
cmC4AYTLrxRZSHXAo9T1jeN58xCebqiWy9sEqfgj6/LdoJfB56fONA/KmIvT
wf0N0HVK2zvybDf0NR+yN700DyuvBUaCXpYD96jejVhcB6t8MdQc+z0PuSlv
VsfvlcHQW57KblIHTO0XC/vCi/drw0y3iEtFkGFU5l5yqROeh6dTdfCTwFPS
/qGkXBj4bX77UjjyDVJ5Iqm0pOZB3qOjGrsUi855ERbe4P2dzZXPXuozCQoH
+kKDWzKQzsQVD4uoNqiPXW16lUECyc4SgQWNDjTGkxzzkTcGKLwkbFNekiDw
9sGu4qEOxNE5IX3XLhw4BZyWFnB8/n2j4ZXfjQHE0MCkOmkUBNXmQu1Uz+dg
ZEaYVc5lAK0pHbBwbfkEphKm3DP35yBgNnjlk+MAsrjNIOnM+Ra09S8ORxnO
wXTz4ehPh8dQU7WjEc/7FhT2LdLI22wKbE7coXAvDIBCBdlfN2ay4IjfCRvR
SQyE9OTfWJeUQEz2j2t2LG2QnCEsHBpOAoe/9Qthf+sXLm/X7087nX11MIIq
but2S7zpQpykMkW//CmoG5I7l9SeDeZPDTVNBVtg48YJuUSMBGzGM4/P9vtB
ZuKbtPNuTTA9ujnwgxUDD0bvVnvGEaR081VU6pcuJC3fgTk2TUHwus3hN1PD
aF75YxB5RxcyMvbtfzAyBft2eP5msFMBByIDjbRbAxTxF7eclMJg1Y/gbP7d
F6lebhc4GYHzumKhhDOSGJD+8hnE8pfPIPNtPkP1ly+hwb98Cd3c5ksDM3F2
5Wzl6PvRW+1MInVw4Hx1w8IxfB0zXy9NPyL6ujmrvVJTAxxiv6eFcJ4j+JeP
oda/fAzVbfOxrb98D/3+y/dQ6DbfkxS/eEUvoAEZvH31ysqpACj2ZL5uYMQg
8OCixzpLJ6IatZTRtiyFP2U3dzFzksDnM2GlwL0HfdWjvNfv1Y76fjudOXoZ
z4dkIzUa807k3Nugn3i7CS1aOZ5KfTIP0fIjvxfVupCTENk6l0wBKDw6INm8
G1/nsF/zZ8ZBRPNE5riudhQKo17UJYjNgTTVa5e03x3IU5g0ETvfiOw+H2ve
4TIPijaEuskLrcjKaoHVfWc96tRjTjGQJYFvlibP7sxB5D7yvPAlikeabK4U
rvvnYKWYZb7z5yB6HFdGPMiYjEzkh/ccXZ4FwtTY75daLeixQdx96oJa1Gvr
idwfkuD7aMDL+AOV6NydmB/PDxYi6srCtU5cL5Slel4rmhlGkRwTl0Lmi9CY
4NMdh5dmYPari1fPjhH05ubMzubnpWhBjRS51Yvz3moTGt5fFejGdLCDeUMe
Wj2vnfnZCYOUv3oH3furd5Ddtt7xDuLcP24+gu7q3u0fXqtGkrxulszCM4DO
Tv00kh9BUsKXLeKtG9HLGz9zcn5NA/dfPYXK/uop9D89pf1Xr6EA1f/Ta/A/
vWZ656f/6PQweveETXHKpxGZjlLl3ROZgY6yZPse5SygSXXLbJsvgJlR0f4t
Iq5PZ452fQsrRYRHj04Tl/IgKDQvsDweg3fP4vwPNpRDWl2xgfrLFgglvQ3V
KSbBIJ+IfODqEDqRQctimNeEHosk0hvl4jyklXtSa6EcYUf5LIfssmBAC7O+
F4XBbfeO+P0WRGR+hX8y1jwToiO6Gz55YLCPDjErOwwhL22ruXpoRq2Cx/W/
Nc9AYsKiSd/5AdSjesff6E0r4g2hbfCDWcj+8n0i5Hsd0qAymnZqCIKLjJJ9
VeoYnAmb46O/3opE7s/WqOwOAqfHo4btJBIw/dXviOrk/+l3VLut39/9fT+A
Ov6+H0Cs2+8HRN5VUzk3tCGfo77sjnQP4I8hBddCCQmoU43pMya70AtGvqvv
qkIQ44GnF+uoSWD+9/0D4vv7/gH5b79/YCoMcy8b6kLcSaLD3GeqkciJTdXw
T/Mws9p3s1+kBzkeGL9741EEcr9DrVzTNA8pq0JqpsvfkPgU2QXBF7no6A0t
8Xus80At4mukUdSGzOSlYo7NVKAM2jau1nv4370xPl5j1Iq+f1HS4E8mIAMO
R9EHoSR4HmpsFUDfi3aeUxpqoypC0rw7Qlv2z0MrFzk1b0cvmqRb4We8WITK
tm5T8A7OQYnHt3GWH/Xo4Lvx72q4LvkVuDLsjONJZPzAwKcBIjKeVRMN901G
53XSfmZ5YtDdLJeWq9iPJndI55a9Lkc3P6S7TON6ef05zR2n6X60SOnPdNa3
Au0xvjJDyzsHL9R5hFvmytFOMdR9PioK2Q7eUgjIwiBNdvX8qmsOote913Fw
jzd4ylee0fiO931+jddhaf0odO9nFgYVIvJ8+8lWSWgOvmjEjiUfH0AZAoaC
1qbVSHXKo/PJwiz0nn5VqfsjA+27Ll80xxoEo+kSOXqzGCReSC/exxWOLHzJ
mgIzIuCB65d9vasYGGsEcHkw9iNJLXhBq16FPtceuFgjNQct+9267p3uRTb5
1Vwir6uQRpoh08PcOdjlvOF7gcsXfSM7a6LuHAWv9sT3Uq1j4GuqOdSY4Adv
mehS46ezQPjZ87hqvH910LsKlPt+Q+e9zF/k1lciFYprz1Twc87nj0/VMCsA
AV1LN3m5XKBu/RB5vAzf513m6iqWKkRNjzbIzoeha36T/DQ4PtSN3UgSVghB
pUfv0CQSiMClxE6XHISBmozQmm/uVzSBeerxZxKRx0DG1w3meSDPHnA6NFaD
5q+3d2ccS0b+agHBBoYYOK2UOrudbUCzzx47MC2noo9c526ni2JAr/69J8oe
1wM279m//alEVwqq1fKU5sGRem3Vg6kTJdo/Oq8cWoZCzoaGebKT4AIvtLo6
N6PyZeavFseykB9NSPPnTRLssc7Yc0CoDVF4HL+G9ReiS8FB2VLxJPix+L2n
SLkN/Q7aqbz5OgfFG4fLBWST4OETX2bRA22IS+Jx59Vvecj8cNO7j7kkyD/d
V6lk1IbaKAv7xdbKUDkDTzmlBwmKWYTf89u3IxGmG4UeZmXo7Pn1D01GeD3S
KKVf7m9Cbk7CBwqvZKEwF6EIq714H2d/2HnctQ4p8CzFPcmIQ6rDEU48OD6c
1zop6CPViZ48W/hBakPIpmKFRMFIgqJ6xhvd9zvRLzJA3OsV6K2SxABxeR4a
rUd8n1ZVou4y29q3pe8Rp7iS1ZQ3BlTcZFmMgcVoY5KTa0PSAyQMBeaMWzAo
ZsKWqvU7UZf8HUupWCI6OM/UpIPNQ6EM64Df4y5ERxXO/7GBiOY/+9BcQvMQ
12XKTkGTh2Yjmu6QzEOhc7Bwg30QgwXKcB0npRAcZzhalHyyYF625bscnleH
jCtWJyc7kXXe0cUfu4no3e77elqD86BAaSZb6duJXsn0J2WvE5HvSzmautF5
OF3z3tcPe4ssMZbsTr5cmKDI+Bw7hkFz+KxUY2IwpPp/U6k8WwTXPzwN39mO
Ad+bwbBdLh0olPqn8BO5CtQ2vjEvx4bz9ieiCmo07Wi1yPHR3YxypP7F21MF
118MI/kXHgxFQKvIseiGnELgvdP/gAVfR+/WCfue8DT4wEvtn7RcDMsGF0Qk
yzE4d22o77hQK+r/6ph12rcIyev1+PvXkMAgcCJzqaMZretJsD49UoBCWkJ9
jaZJcMabZXwPlgE9puI3vl8ththA6cvXEAZDt78pXjDMAGO/x5+X/+tfaj8y
+WoxkBWOuydwpgnt86ogLbPmIesMI8tiPB84Iy4mB2QXgFNcWbpOTSjc+3DU
4Fo3fo+SpmcnPxDRqJpip5lpCRKLtw9Of4oBuZs9O7dDBWLdn71KvTMIfbAX
7b6M98FWazW3l0n1yKV794gMZTZi5pOmphbB4KZWtSmrWiUyLDzMd4m+HJ03
ehNnqoXBE4sS7rSIKhR3tsIr2qMcsaz5Mj2Ww/FTsm+RiQmPE9OPhbDEIOZf
JwpcP2CwXmTvZ/a8CPlJpVB9euIBMvvlLup2YCBnE43W2WoRrV5M761iAmLW
cM6KwXmg213VVpWntYhKgezc1Rgisn5GIxS157//e/I5rNM5E7mKlzsyGCUA
D/sdeiv83gc9je5zmaWi00/ZOXFeBCEPFL/8mMAglvw8n4JaLWqxDrkoalOJ
7n+We6W9RYKjXxO1rcnq0cIUT3jjtUpkNcQnrjZLgkhMuUVzIQn56CTPxjfE
gJvXmvToPAa5g79Cb+nqIurXew+wZOdC6AirpcMoBo6uBdaBebWIjKvb+JUx
Eal/u7Z2gRyD3mAX1bHMWhS79Yo/aJaI9uly1Wn/p8eXHK/cio4Eu3vVdkUn
SmCc1sHqQx0GQcqH0hxlMyCAkbSqZ1cOHk73bY8nY5BlJJstd7QaKUu7ppzp
I6BhwUAFT2Gc/zRxTo5cr0JJJ24XVUsREMWfF+c6pDH4Vu/fub8yA8aaI7OM
GAnwjn2wvj8Gg5KCPUW0uvlwQfOuf0RtBZw0YF6uwvmb69/5AZT6d34ABW3P
D5Trf3nA2lqM6sTW+YpRHiofVtk5lYbB0uhJsZtyRSBVUzcV4l8BNDao2eI1
Xl/hB7pu384Hb3q1P3xKBJgosbqri+PJd5/CvcKHChD6+N7uhHAO+sx8um9P
BQZmtOQjS5ezUJ4cNiX9MxUF3iC/tH8Ag5qTD7ee3SuEV93CVTOr5aDqEgy/
PmGw3zBT2ORDMTj87IwtciyH9Pa9DIHuGLStZxVd0w1CZnsuKBRHfEZNBzf2
Xv+DQX2Y3uafME/EZf3wZ9Tjt2j8vemdhE0cfzLqVT4qFoGoykRvk20ppByS
758Kxe+xnpJGz7sQdKY4m3VvFkEu+uSrjp9/nIfeSzMrf+AL/JB8hDYQxHXS
eH1+YzBbmfuHsjQW8hOeih/7GI2u6Zf6RC1i0P/meJ+mMs6n7XQl2iUISCmI
5kECnv+cmoUxSr4ExHGmOJU1rhiFNJ+23XTAQOHDVeUzkAJmzznar+xJAuN9
vPtnpzCwLC3gfIDzctLCwtT7dQI6P/79y9xbDPIzCQIffhWje/r2ecO8FYjq
Une7uR0GLt3Sxwu0C6ECCalL2uQCbS1rcdl/3yGKDkub/EJwXc/2tyYqhpe+
JWVnP2OQN/tCBsILkSe9V8LhNCIi2zGSt2KBwfjF1RwJt0LEGHDgOGFnJTKO
W5P5/gKD8KeMpTzh5fCj/iv3kHcZFLmQj755g9djrnO2QCIBTJo6xvPcEGxF
cL0Mx/XFdPZGntrXTPTL8qO4FBMBVR8JWrLBeXJ91HOJi40ZyNRWMFKnpByN
UNm6DeL481WEpYx6tRIU7ExSK00IkMgVMLcbxxPbiFwHttu1kMEe3hZSTgSH
LzaTyjgO0J6sJ++hD0bZPw4d4wopQvWL4UllrXh96UXtX072RlHujN8ppguQ
yW2VPEIPzscuSQlLFNeAWb9eyju/ShiMHGgww+s0RZNaqMauGgzjmX4ylFYA
b59H2cppDJQyTz8fuhwGEkquAuej01EpR8/uijlcN5k8iqjUS4C9gWXxd0US
0EnjnmB3HB+aBfMjBZKrQeHG6dEiQSJQ/Wbguovr7u+LPhu8qAa8GmalsvYS
IQqT6D10GO8Xf+flQJT5/+blYGF7Xo74dx4PYv/O48H/5vGyHupHzS1Wgd5K
7pV9RhXQqDDhqXUWA3PylK4s2UoYza4rtuhEIHDLuENJG4OAv/N+wPR33g/2
b8/7rSOrt0trRJiiafDhXY8GsmsOmLYffr8BIpWT/ESofiONWKZKIdzb50aN
Mb7PcTIhyX4Etx5SvAqayodmIYWL4iEY/JbT4v+woxGeqOqoXhLPg6vv1e62
MuF6KkmNhWGoCQ4nmgxuWBcCy9cbk1s/SUDs0LsQOVMGJ+S+O7tdzIVxdZuq
APzePW3175+jK4P9kMEtZJIJZu5KQTw5GGxuMlxkZmmDb2OXE83jEcAlZ9vT
viQ4NcdXVugbiObyrwxKixDRA37Nb3ERGIx9fdUX2B+LpN4UF9NxF6PdKYpM
UvUYENbXBbsNStDaDlVOKoYK1LLj+iDxJY6f5dph7GfawarwEKesBQHYSw9/
+3AH1303i8s6rINR1e3B4p+WxSjI6UBAZRNeR8rd6K54ANxxlyp+VJOFuPNy
XSNx3mJ74YgqK0UnIIVV5c+BRGBzuipStTkPZ0uoL3DodMAnins05fkVMBe6
dP4SBwnaJJvW9RsDIUfbROXblWwkuXHrMCvep2p+0zdVzoaBZUt8VpBiFtIy
a+ZUxdc/t5O2zdC6AyjMBU9MXsZ5Mpfbw0omEnCnfhFsZ+wErSu5SgETRLjg
2OwevTYPORyBNddp8+D2J+vyD+dTkdSwhzprJwbDaQtu9/LyYeNWF92f70lI
Im6PwdM2DCb/zg+D5d/5YeDenh9ud1IJO5HUDrVaL45/0SEA6YadWLsSCeK0
rMQPrVWDvL90t4pKBLikJxk0WWEgdDD8XMliDaRee5B6Ui0a6NRPWD98jEEG
11E44N4OXC1qaCCdANpN+U9sVEgQ0xLb6q7UDjvlVNqi8Xyf3lEjGIOff4q5
RUg0RzO8z7vorqMXD7LZ1kkdB/B+RNw4u3G9Bb48FLXmrUyGJc2Jn0m/SHCj
or+3jbkNMuQ9PS4fLgRpO74jjKkkGJARpHre1QjE06qn6Trz4USyHvUPnC8Z
/p0PB7+/8+Fwfns+/Mbf+XPo/zt/Dg7b8+cz+mcThU40woJiMY2RWj7onX5E
+HUI74P3zkfxvGiAbypPhTDNXOgdOvFciwODA3/n22H073w71G7Pt9et2FV3
r/fA1oEYDRUSEXgWbSw+wTyoCPZ90RGvBovv+1hLuhPAeetlUK0trr/cjy4q
zFbCzp9KqSp7Y4CvWqH2Dd7vbChfro9a9kLuhjaZ7mQVWO7r6GQPmwOWnoLV
5vpeqHlo2CpgWA1LIo/SlZ3mQFMvoM83rBAm0/Jo1TID0J0d5Osv8XyQeaUq
zmmaD66xAjVX1GJQN8eP98dwnNwyeipDfbYfUh/L/nA4jq+T35wuIDgHPHOH
lTw/x6FlM87UbLNilL0hR1ON89Lv93x1Qm364axP5/oui2qQ4zmwGsM8B8kg
9sM8sh/S3Pm9qndWAs3MWaySfw5sil6F2b3vh8s606P5g0TQ85O2FBKdg4/H
lqoyn/bBgs4FU548BNYRRXRj0XMAf7/LAN6/32UA//Z3GdvfcYD43+844H/f
cYQkz7VO7/8GqVEfn7t758JXsZZQTvV5uF+XX7mzugu62XlkOXdGgtkRxoeu
9CToauPwd/Pqgq6Zg5aWrCHAh3E1vDmO64IfpYfW6duh2rCtXzkoFMJGvxiv
pZHgTd9x7pORbZDqThXTWx0C5Hu2duQiEizzp5VQhNZAx/xIPp9YJrK8+jH3
/V08TyzJz20VVMPvhg3TxfQstBQ1GJP6EOeT9WY7JIvzoULmhN/z9DSko68T
huE481auKPvrVg7sondmaifPQsfPSV/bwvXX6XusZAJZ92HnC8y0B6rRrCur
2GVHDHbpxfPYn/NCMZ4vCuOliOiz0IpbVCSO/8m5O8viYhDG80KLZFOKmBx1
E9pw3kWrGdrx28sLHbwbVmcWQwDBHPQxIAPv4zKlAS35H1HQpNeXE28rQH1W
eJInEa87Dl6qcr3PyIV8xYfESQRmcWO1KryP51r4sryj/IyuPu5zpxWvBUZr
Vs3dT/B9vg+ipnkUBe4mqdaWg62A3WR50fGVBFOvoxnv+IdDvFb7wMBoK/zw
VxtK/obrILfo947HfKDto0YXrXcrcJX5iPNPkiBAyN1Ckc8FWiV2XRC52Aql
B63N7PE+0sxEJn7FNBEtuJVZJ31qhB879rxm58QgScNQPDczBf2+Y8CgPd8A
h6Ksi834MXBnFr7i/BqhlObiVpkVIhxOvVZTfRuDEHmgrFIoR2rvOWMqZYig
NM4cc0sfA/UOOLc4U43SWl2rZC1y4IMpVyHZPQyM4kNliilqEKUF49WLe7Mh
BPkEyxpgMHFDpzjpWD1yO3jW4lifJ3SZ8/oGqOHn8E7AZ4OpHmkFD51y5PkA
CinNVRdxnd70VpurVq0eOSd2JXHbBKCVDFvOdyr4Os7ZaiqU9ehDmMHWE+dg
NM7RpBSiivevh4Pmobsz4HpKC8NcWiWwO9bkHsR5u/DKDQ1tlIVGrRpZtbey
4RFViNMkzn9e2HA5mdPVoZpdO+f4AxLQBZeW9/k3cTz5Oa6/Ky0V3G1ogxx6
qiDRgSgwhOPM9QPnSiQLE+GaHUMiGbEOfh9PvdusjIGVKS3zF6Y6JP+Kxuf9
3SSUdfu8QL8mBibJaVeejtegUJrjq3rNGahTl+33Hz0MqndOq03PxoLoWaeL
/EV10C7eScmJ779Gyyd5acUVWoyu3mQh1UHkq2jB9/g6FqPs6x8saxBzRu+M
A1MmMqp/ax95H4PiFzQ9k/LVSLZJa89yTTZ66/r00VGchzjvNpYXqDMAPl4z
a463dUDx8rR/hS5+PpIMErv1YpHZT+7TE9pV0L/yuGfvexzfLidcGtWsRh55
4c/fm+SgixOfVOvwuot61H4vS7AKVXKOHV+7nodcxEn81//7/zvSL8bUWRPQ
53C3VTbtSjDi30Eeh+uOihlHOzf6ZLSHfVXXaJEIdp4MKqqeOM6LKh+dbqlE
5XFkI7vf5CGb385igzjvFWsyyxnjICKnaxm+Bll5iO5kctQFvE6/hXtqPJXJ
R3tPI/2Jg+WwFK3JsorzKP2uAvU8pwLUlpt6sF6lDJ4/cly1xPkMKj7UkKZA
RB8UOAUl9uajhvu+z3px/s9U/VA7P4qIBN9fb1ZxKUAqyTeKv9vg+iKY5mzZ
ZhkaNf/Dea0nF/YaN/TExGIgXqTt3slbjqzJNcdEQ5JwpdE6KZSNAdfYytUW
AyI6NxoyIp5ZgL4c/OTfhvOiCK377OJdBCS9Jzg7/2o+4ijzOtnmgYHKC6IK
zRpC1FmPfsisx4FgA13Qp3wM2BWvLdX2I0RRt3++SsUXzr6ws0stwyA68RAr
zdEKxEaYHqk8l49SCx95fP7vuxWCkPGcIwGdM/b9LPcgF+1OaqHfwvmngrtn
42MFhER5HGSjujzAfViRLp+AgTV323TSZDE63h9eKcn0BNGojF7iwPFwMlxe
5KkTAVGx3orpeZqLDkz+bp3C1yEZxI1d6y5HFjW6c7L7c1Acx7qVZTgGnwr7
nh6NLUK3bTvqCrTsEN2xhK9qHfh+HhTrMw6WIzHRG+kpijko+Vp/wqcw/L4W
jAmHOfOgs3RG5G1fKdCrsXefxvGwTCw8kcswDtZnDcuPn0Bw/xPXhm4xnuca
smbjVUUof9ZDoSPaHT1ljMlQx/n8G1Or7EXxbKjdvJ7e+pUAt8pL8kIDMFh8
SxnBu5QCppoWLVyVBAgqiNiyjsYgbFpqaOVMMSoYThh5HhGJuI42Vtc1YuBV
cpcUMZiLdMmSuxmZYtFTsRNpdH0YON10/Mx7OxbefSNelrGvAOr2Q296cHw2
ISUarWR7Abedd/isMQFcRZbnPbPwfe6NdZ1YyEYlfAOHXlnFIfLVMk+hIZwP
n/IhUYvmILGERJcPYYlo9pdK4sl+XFcebuMpeP0B1+HMbUXj5VBUF/AkCb93
xhbDkJa1Gyj2T3NeclUJCFe23j+C7/OZZ8Chgws5qDjqTC9VTgaSOPGKYz9+
zjJ/bq8rX8tAqZt8bo1VmWhrgPGxH77/R47n/ftcbdHcwKHr52aL4SsTxb1f
zbiOEKWWVjrmh+6fD5vyJhWCFZd9yzGct5jV6ebd0EhF5U+f2YW8y0KfFEWo
6QcwkHIVphfUTUNj5ho+UUvZqCM551TYVwxeb03Xax74gqzV3J/LjRYAG090
7Amc51SIH2B53RGJqvxGFQdkc0BCmc34+n/z2DMjhnvmM1D1KTRS/TsXmdS2
WCE831b2Pw76NpKM5qrOa8wt5KEQOZGyLvx+yQ4ndSU9ikRa6WuLMszZcM7J
+Nrj7xjcqc394HMoHD1cSdMfPZoKL1RPca+RcP555a4PrUEK+lNW5r2YnY8Y
lK9kc+K4neT90v5zeRo68OlqV7dzAbovJ33O5r/v+4p/eW3MBqDF3O8tbzqT
AAnc8ryxiPMEzIpL6ZQP6onp+z53OAZGOo5Vy6xh8HExVUgqLQt1mBhXkg4W
oEgSwsUMBgLaFxghJwuNzZUdNZIoQE/4bV+L4/EE86xHGdR+SNer7OpKajjM
tQYnaP/CgPXj7MP4qreobmFIm47mCziHh9DEbeD7PKXeL385B41lnbmllFOI
MrlfBaISXEcnPyB/GpWDGA7LJr0QLUaLoxEyNbhulXU0KCnguojSHOrer3h6
w76+p/Txm3h/lC2r0IzOQww7awzisotQqkMPJRWOS645lIHNGSVgW9rgH8aI
41j3xxgdnJ8cGKG99Cu3AFJH414+eFkCZjYJoolxGJS+iNOvW9RFAoYplrWf
VaEnyLbs9xYGI/pUP4MnSoAYFrYjPToHYk8fZarH12F+nmvvlF8Et6l79fSK
8mFZKsyvGdfF4sX1tjEpdjC9JdITKmSFRPn7NDPxdQoqq2J2KAbBcl5O3c0E
V7Rj/GB+zh8cHyb3P1ZIzYVDh27VeucUAusbuq49hTjuebUbU1PkgFBCz9v9
6gXwVGiZlIfjmE8IzfBpkUCYMHrtZE3xBV3jT5968RsD8kbdy3Sv/OHYQJ9L
l3E0+i5Krc2G32NXYCdLNb7OpAlFVkV3AVydCb14vBwDlle1HD4yWZDr2//g
I67neuLv9bbXYJD5hDnEvz0ErC81rY6kxKGvSeN+eUsYBEWTXXntGwcba72w
oJqEyJWjqc/O4/zn5Y3pL88yoNXMiT6sOh96S1KvR+D51qpWV6vnmQ4Dbooa
Y/fyIDqlqvkPnp/lIz+KsjbiwNq2hiPTPB0dF3m6+N+8uqF788cG4xggz1C9
3qGTjbL2nBWjGMXvZe2yPQNLJtBmTr/8pZAHVDF+wS/xul6510+p9iATUDM5
bW9JDryulhWjx+vIYHKWfeflGKDSCDq++DwPdTxJZqfoxeCzi6vAyaRgcBQU
pG7mLET+H51tdLpwftLoKGolkg3NNfLs/So5MBC7xrsbr9N+14UVGplc2CUx
KTVZnQWJ7/gDPHFe7RvQsyOJLRC0C7+/26QtRmLH3tSF4s/Hq19MnfFwg8sa
YgMFbKUofVC1/kg9BpqnRU5+vZcL9WX7tBp8MqFphtHgv+/OTMiLXblqc8F1
XP+5b2w6qA3kvvTG979ffuz90JlHSKTypVj7RjnyZZ/mscZx0kFJNaewwBv9
OkrcJdpdgdRubwU9xfuy9Oa5mIVTuaBTvmvo5FYisF+nsjX6hsEFV6v1C/X5
wBU80uePn3eyiNAzKRz3li9x+JxPiEAqNXUh06xE1FFbrhSO9zV9LV6qg5ox
qPBSz1LxMyI6XBhs5xCEwW76Y8fHbhXBkR1KBH+HaNhBy6Jlj5//kZFjvAwG
aYjnz/mvcc0V6NWl9fev8X6kwyelmaxEgJqryVyvzFLA7UNL9YEEDBRld3HP
7C8HW5EbKV2S2cDzQWyS8r/43WxOB4lSOHbpgV0FRxgsFfWhnmq8LggXutrd
CDDRskpv5pcBV5vEmjRwPdIKjZWPi8rB5tgDC+qpLOiz+NrPh/e7l31jEUMX
y4Hb/hPl8Jo/pMzzD5Tg/VTbsXJehrcMiG8OhpKrmIMe3dBCO77+RNfxBZYB
AvCq6e8f2pEHRUp8RcJeeL2LP99vgsdTPvhaZBjmAYH55hYzztPKjyqeW28p
BRmn44cdx94hn+ciZ6bxelGhuCtvMYNgY2ZN+u4xb3T8QEpUA85bjE14Drq5
VYDPL92oiCx8nYnVI5uueH/ZyL0aPlsBS07ULgw0BcDVU3z1tgMGcY3lQxUD
5aDLcDJYhzISkWZP+GzgOPZQALvAtwM/z/XyT21j8ej+ghqlQRoGdUv3zKMk
K6AjUVg481gBzGW8qgtwwevlyVbz0dIKoHqw5Ty+twC+TEsOceG88ZcbOVk/
KgMG9fyes745aEcFMP3BecjUvnvFTrFlEHkpwPlLRgEaY16mDcd5y8lDCUKe
jpWQOCZK1rW7EPpVmsjvPcPgqQD1o/tnquAeqO9OTi+A5idxAiqPMKCs3rDc
yVAIZhcc1+mMS9Dt+fyiXDw/6eMoZR425cAIqJKc95SjngJZw4sxGHSbBg74
plaBxtL71y52+cAm+ex16AMMqE9o/KneqII8OhqB3QZ5UEopU6eBxxkjDkg1
FqSCd1Itd7FBJSLrn4p/+AHvv8OZxYZfo4CvUF9dJ7QGvbXOeFFsgoHa1KdZ
4r5qMD13Nq/3VS50TR0zV8X3Gf/BcOzY2WrQpMv4wsaXA5QSUZkncF1gxjZk
+XLtHdx0c/htMVCP41sSiU8Bvxeru1F5N+3Rm6bMmvsSdYiFnLuTAtd3MuPk
Mz/214K6Wkzeue9Z0FCtYGmG6yPR6f7cR5u1cJbKjcMLr/fxR4ekAnFdljNo
XNhJGYzo46m4b4fVob1T/L/U8ed/Ej3UCU+iEBlvo58eeT2S2Zd45f11DHrH
KfcLjNfC871fnHcWpcAje54rj7Tw/RyMZdu3EIVoj9IqqCo2oKfcI5xTkhhs
xK200D0uhYiqK6GK9VnwquX8sCOeP9lp6XNp5wkgW0q0Vz6ZCheZmSVY8Lpb
+EXBepqpHtQ7rxrm7UkCueOMcoz47x3rfVE4l1oGnEeONh7wK4Dk3GLJTjwf
zlD85D7lj2B60sD/bjvep94P8Sp/wYDOiPV3ZEADTNCedPHcHwe0zsfKvMQw
uGvhHPJOqR7O7+X1HykyBwtBO2c2XMc5jcp++HWvApRf0d8QUC2CYHMNyfNv
MOB1b3dlaKuEnd26b1evl0K8mN9TDVxfq51qbw80rQOPBgkJCU0H9DaGnVMe
jzNRPWA1PF4P+79eFjeI8UWRbkUDG/j6illcshQMVWByyN4dPSuFJh+3HWQ6
GFguzw6bX6yCSGeZndzrpTBZpy2ggevHctG+0hP6NZAfckib40ESurvyKUf4
Cd6v1ch2J3BVw+eC90WMadnI8ZBOdBYeF0ry5mI+XQusWVnMdJ0l8H5pJ3k7
/ntb7R0fPuuthf4WD3o2sVKcXzq/duHH4Gu4tuKFYgI06NXEzGsQ0Y8UHwZW
XNdrxg6e49XIhy5LTcdmjhok9Cu1TRW/30X5Y8q7uOpheOpxTy9nOZTpiNwX
PoDBrQr14STrRqByMckZNimFoQ2y38d/k+BgAEHThyUb4ty3JhPe1aLFY5Ns
DPg5GNhLF96QT4XNipREw7IGtGnHJuRyBu+zJ7Z82xIbQcmM20RrsQQmvFqS
KH+RQP16rEhbXSMok0l8PPauBIbWLwi3rZOg/llq3k8+M9iMNQ/IlmlF3krm
RUw/SWB1lolwKNwTHbZmbWIwb0PyzVY/3tWSgIA9PTsU1wJlCjfH32cUw5jy
SO6vFhIcujNYQy/YCmU/WSWAtxi8o0dXE6tI8Ou1UYfJx09o4CKlf2xAK1Jn
V8nsmCDBROiVxz30Icje5b164XoLam1vlWXE9+Nwavcj2epW+Eww9zHkyYdV
zj+2NWUkSFx+NSh3oA20FItL45SzIUWuMEAOkYBczGn2x8H3MB8kXT40WI8u
cap/XbuKn48ANbUufQDwu3nJjRyqRVkKKT6P8PsttuuldKZsA4fy34NM5FkQ
ItUXsJ9IAsklA6vA618gK5f/49C+OtS1snvZG8cBT6Hj/AH0sbAV+MEs73kZ
8GWuBkzi+N85dybDBc8Da6uyzqyvmRAk52rwGOexLswMTSo322Cp48zV8+cz
IfeSVOuVIhL09o+ERAYHA6PL3n2SHhUgSnlt8zXOS4eZxPcuhGcCIbBz/w+T
CujU5NQhw+tOWYtS4SRLG9yK38NHvR4Npcf0R7FmElSkJDfLDrbC06Q8wS2l
ANg9TlT92UcCQR6nlZXXWeD5/dnyE9sK+JN86EqgLwbccmmnvFWyYZfy8yMX
iypwHfK7VQbvd4ltb3ZSrjTC0U7DC8aWWchSe6Eo6TDeF3bunWfOI4Cc1udD
ajpEhPF9PcCO53Pqs9PuWZADhNjr1DsWqiDHPC+s5CkGe6Q/Hy3D81gy+Trz
g75K+Fg5w3LsBgbntKK9vH3KQcea011lthL1fQ7RmLuGgdYjmUY711I4Iuv+
TCupFs08hOV8AQzSA3tJqzHl4LD2hIa3shKu94lFrSvhuubPaHt6fzkIM4k3
mu6pgk+ITEYbv9+ISwOUm7bpcIpa5mTlpTYURqbnPlVOgosJvEKP02JBOWrl
3IG1NtTzbGqwMw3Ptzfpps3tRGh8JVJnR1sNR3t0qmnYMNC4zb5RL1oJRxN4
w951VEE63Z7baSwYXDUID6ewjIGay+XaIy/bkZ5fU6B4CAn0LmISDxR9oIRt
N6/ckw506ZPfwOVXJPCkjOrSbK+Bmye3uupuVIP5N69Crh8koHbMT6lVrgW+
XaHi0VLV0IbZ3RydJYEiu4BudX02tP7W2amNtaBc5eXfYWMkOCnianZ8Lhs+
5QtdPQwtyOLWZzd3Egmqb+8UZldpAq3MQb1avQpgOChar4zX3Qy32dRITStw
BDcc1rpSDi8HOlNN8X3GP1F88yq+APYUUks8rq1Fx+5svOW9hPfHnPtkS3j9
T0cqkzJSq9HzdJ9rwYoY7N3DpLFrpBUOyhd3m3xHUHKjXr4umARZLl931s23
AluwZK6jFIKfLKonk/D12RobJD7HV8CZ6JhJ53tE9EyVu4sa7y+ai/m/rykS
ofeI2E+CZAWS9vtz85syBj0XzO0XvrbBO5fgHUUPkkE2z0u6Eb8X19PjhQuq
RABL9yDzJQIqqRQnCeP5M/CP3/j//Ktz/76vht9/31fD/95Xv235XB//rhHu
CiaxnRxORoMXeGNLT+H5v+1PvvqPPznbdnzlnzizwMfI+SeNsI98UTzxchp6
FXL1ShMHrrMCRMMPBDXAatnrnAaRbLTn3dG+EE4MGrd9zo9u+5wLbvtyN/3j
f/6/+GFhpo2kFgQ3WtMZBlZbEEfkI+dmHB9Wvp7V4VkrBl5n/jL2OhwnzWVX
DNL+H11vHo5V98WNIw2khISiDEWDIWUoDSvJVKmkegopQ5SQaCCJMmQoJJmH
Ms/zPC3c5nmeMibKcN+nlBLS7zwXz++93q73+++62PfZa++11uezz+es/W8f
7P+7X/rW5X7pEn/Zty3bTb80PL+nUQD6DbZ1t6taUFrOWav9BQ32zM+eLZQo
hi1K9zbKezagxfGzvs2faCC63Hfd8q++69uX7ff+snNt2XL+4GgBfJ9T2nZ8
fxPS9K87B3bSYNSj9XFbXQFcAgdd22tN6KK7e8/OdhrcWO7frr/cv517uX+7
7v+wX4h98PVqczmcGPh4wmllA17jFhZMJP2TJvMh4N3qStgz7bX6WWsdnsxd
MH5P1gXJ5T7wtOU+8H+W+8C3LPeB37zcB/6/Pu1P9k+6nvWqhmv3p471b6rG
E3QvmFxbaZD4+Bkba3QVCDyQvxfwshLrU3+mOH+hAdudpXG4/hpH/n/YK9+/
57+2uhpkB5on+R5UYPtT55rjs6R/7oc3rymthser+L6VfCpH66EdLNIzNLBY
7kt/+K++9PeX7bLL9qBle1N20Dr9hApwe63Sd5GnHNPbpZnfChJwVOH+QGpi
BciMtRntXleOu6dmWFmFCFBf7m//+fFSf3vr5f72usmN6XnvKNB06prE3ePl
yK5FO+0pQ8D75bh79VfcvVvuh1+73A9fY7kfvv2yvfWvPvmSpkt98lmX++Rv
W/bP22X75r/65/9n3/KX/ftyX/0ff/XV//E/+u1vXe63r/tXv/29/6MP/87I
/3cffonlPvxjf/Xh37ds//iXXXLZPvKXna5wqW+/4F99++eW+/kL/GU/tdzP
v/uvfv6q/8M+9T/6/L+w2HaJIacSE80fjYWbU8B6osrkBh8Bfn2RRXMvKrFC
jiWh7Rq5/j2b5H6Q9W51znHhIloFGr2dXR+jXQ6HjHy3fuUlefedlFw970qk
BnhlXxKtgmu7vs2y/iBxo3d6pRS1Gg9FGbn2/FMFV1f7sbB2kTiQY2uQB3c1
buSawzOS1SAt8Iqyg7Rf2NYw7XCXgh22KyWen2iEZ50sH+uzaKBjc3FLLR8F
eynOxkVzTfCiZcWVkyFkvBNsVhIfy7Bq1Qsm//xG8FZe3L2QQQP+uu/OEdyF
SLPja5sZrYHCEpvbq8n8HP4sMoGdMR/3aL+m5+5vAUOv0OtHPWig5uP3Sca8
EO1OvRmzUWkB1mOpZj8DSRx18kbUhEYhKrUHNG4h6+emSrqLmkkkznTLCewh
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
C7x77spFtSyy/oY/NxVKI0BzoPO+oNhzbEpcY6pbUQx9xnRTHOUE0FMpX7gN
07AoL2WPjGQqzmyZngzpI3nN05P7pG3TccdM32VLv3ScZ1Tgmmwn89voAHV2
+A0e5VHi0ljMh9ODNtaWzQSsm2I7n3TsHYo+pDk+1s+D84PNl7+0kuvL4Sbv
KZqFtlwHN2g3Z2LSrnWncqpJXsCVEixpko783P03Rwcy8Tjn5/u3m/79/r1H
yG1NBOq+9GE8154NZ9bH8CaR85K6c87k/aYonKTRCbm0pcPP6fMt3R8IUIru
isyzScWvf36NmaZmo+S4O0s6uU86fRVHhLlSkcW4tTRuOBvr4sR/TpN2ay+b
HzeVIrFWREZlk0IqHLNh3804Tsbv1S443B+BhaNquRoGCTDJEn+di0ZAy9Tt
YJ34dOTIHmW64JeD9rf1/Y5WEdA4W5Zzwi4dWZqviwvH52CR8TOT26T955J+
AI2X9APwn35gaNXXgVUyAVjH1LmnWiEc9Ocr2dRmCYgXc32n+CkNr9Z+eu8e
no8z+xLtryEBRse0nbU1cpCxhu/LKZE8PCbntWdrNhmn61daNtGC8OmRu+13
c30g9rI5m9I8Aa4ep3XkT/mgwydL3mAvDxhuirN/9JuA0fRPwoGmeTgQ1tNy
/2wOrryUe0U1i4DNV0z9vonl4cvPg8P7ybxqxGL89AeZB1iCV6mOTT7CEx3e
pr9UbSHsYTRnyB8S374+tWvmoy2WFgn1tFKNsGSV7z78t0/sYmyMfmAhvrCc
+WQvT8b1xhtr+sg8M7nwrOvAYRJ/VFXVL/5Jxzvn49nGU8jnl2F4GzR5GZ5q
iJb563ng1d0yuIkcp6hkl+xwShRq9jBFlieX4cq3CZadZJyG3RGb9OzJgvK5
48mhx/Oh13vjYAHph2+PWzd6DyQCQx/v6spTFDiRp+627w0BwRe5ksfYHMH/
Plfddro3yCyaJ/WB9ENU6So42JwJOjWJXjkpecBhbJBoWEDy4uJ7P14LZECN
dJMaf1IeWDbq/Yon/c881BriqOgHyVLn9sW1vkWsl8y//4sAlf1KcyuDQoFY
wflBjRaO74TPWhT+IPMbpcrpH7FkyPD/ky/ulgd7V9GdaSH3uVfyKIV/WyJw
fBzbELcmF142uNfdIPf5sUu9HA37AiHTi33EnycBtdqZB9q/EsCUERC6ZcoX
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
ub6vlvvVu/3Vrz6oYudVr/paXP2OKftkRiJqe3RbnCD99lOgnj1w9hke9VPL
sX9aC/l371txkLjr6Kuzs5dXh4JKv1ThhHgLsAsHK3s00eDCjWnGxd9RwOQa
7Cl0sAFytXa3DW0j8Vh9HMX0Ww1KhHGprGfMwPVpt3aVkc/pk/aqT1b4JR7m
0BzVzGmCkwudEskkntywM3eXSHcu+sQJvv+3v5T39rZaJxKHX5ZX0Tkv5Axr
7sQInFnVCFN7OXi/bSZ5ln18uvL2GvwVp61n+iAbfSSaTkgeI8BN/ESvZE0F
Ju97JBx6Lg+y7m1amXeNAPNR0/1ZxbU4Lzb++5vCG1g3tObLNXL81S796vbX
47GYSSWZp6UGHn3qvuhK4hz67KkZ643V2C51IMz3Xi6mbHth8EaZAO5l/4/8
5f9jB95/j9xejIf9JDYe56PAEc9bqs9InE8nZPLRMq0SFcVcT288mYe90rfl
n10kwHdIQEJuey0y3yPMV4snYoyDgXc0ue5v9Q/c2RNYjRlZHNv3WqejYuip
5CfqBPwj3CwYL1qJF4gsoazKTOi6khuRfpMAOf0jCpBZiS+PfORfV5yHb3ty
2D9rEKBNPTSyb3MVSl7cJGTuk4Vc+Su7WrQIkI5dTL92qQLfGNdc2bA2B70u
/maPvv1/+va/+Ktvf01b4r4TFhUYn9Vmv+59DvLGHRNgIn+3ak5D4mB4OT7M
dhvbKZeLAlqF84F3SDyms3BF15KCLj9vPt4Yn4OTpj5HrtsS0MQyTI0xLsPR
EtFVc/ey8P+j68ujcgq7t6mUBiRKpogGpEKoVLZCIaJSSRppMlc0EdEkNM9F
8zzPc+3meZ5IRYWk4TmlopJ8x9vj/a3PWu+/z2qdztln33tf19nXfd16ll6H
w0l8TqvwpuMycyIERH6fHXpTBaGbbnr8Iq9zakFnxtIiBY4IHBv7FloJlxLo
g22sCbBsfbqf7kA4BNwWahOyrodTlNcFeRIEOEd3aNt4eqBbaX5o0utaeDFs
b8qiTvIXW96WlzpBIOsgckjjZhUUCuw2vfSIgKoSob2h8plI8yhP0d2rHDJO
H1j7jKz/qnnu/h/ZS7Cq+6CaMJEPr2Wrr4h7ENBYUzj5fdYP21oPIT8viZ/p
AsXD/cj8+VoaD9plGHjyWKuXUiJsrt+bafvHZ3JjtJeZUxne33er/0KuK9hy
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
JHx3cZNMGU6P5xkoketr1VI+4NWlfMC/+XCMOlc1/WeuelMtbywhzA25XrV8
yh6uh3Y3c54hktdLLzA/oaFtxD1aCdpzDtlo4chmIEzmoepS3uL3pbzFv3nL
s2ZLTktmPVoVjH8w8y9E0B0JOsFI1of1Dyujomow6NWPPC3zIjQPOd8h+kc3
SA9ehEslumL752mFIoxIkfypeZFcd3qCbqu96/C6vIJirk8Q+DJEZhufIUCv
Naq4+WojHgzPPjKvF4Zyl8/Vyv35nla5nS/gFol7g5xsP+inIYV9omjMhQDj
s5nrpxTS0fJjRFt7bDnoJe747eFMwHXD4NflYeW4b5xzmWNEDv78uk495gGJ
J6nnLWpSz1vMpp63aHLjgmqGVRl253vz2N3MxbuSH86b2ZP9lGPuixt/GbrN
rC3wcoyDfeptOZ/CCVD/H+ckZly/z5ipVo6Jby9+DtlnAQYFjvT1YQQctijS
Cn9UhmsJd46zj/3wyX2urT1k//Wmzg2l/pkbtk8Zffl00RM0JNaFH+evAllh
BzcmOwJQTRCkXsXjnZyD+975xeJaV5mk+2TfzDetcTrfnYI5ezVX6t/KRKdB
Qe/vnQR0FfJr6gfGY1TT2SM+wunwYeR62qF+sq8dnYvaMZmMsRu2FNy6FwOO
xvZCxiQeKys+XuaXmoyN4vHx/W4+QLERUTMj++AmBvqzXZeyUDrp3e2vvPko
rT+mbZVLQBjPQ9H36xLR82aK87lLcsA8vyElYYqALdQ5Wvc/czSmvHOB7Abx
sEZY+A6xNRhnPa5yu5L90fOMRj0fVxgsnBAc/3EwCSsLBQvYSBxePbTl1bfu
GLhw7vPFmXXZ0JrHzu9C9sGkf84dq6SeO2YlXsJ7yjQChjZ/CU3ZnAG9H5kt
xD4ScGV/wlbhR5FgxrKoXp6XDGfkimpjyTgbGTXJcXwLwNe21nrdp8oxT/Lr
2s4QMs9ZozDmczhoH7nW1brHE/JW/m7ePkeAzzJhlu3X0nDRP2niQXUpng4Z
jLJ+TUArda605Z+50vVSbX1BoXzoulRxT3M0B7gMrhavIPGDfYas2yWmUjiX
eA/OvsqBrZtzB7q9CDCjnht1mXpu1Dj13CiL9Zy3N6wqAfRzYinPzobZD05h
FeR611n0aV2ML4GbGrZvTDmzgX/1ZbrrJJ5/c6c7Zt6xBOg3lV6uv5cBMyxJ
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
qTB2QfhGdxUBP+8flVspPQB5bcHdG22r4LD1m9XiGiPwWWGj3/Yj/RAsMaQm
sTsNpgTfOx9+PAqzfZdPp/xohspETuvhvFr4mc8TF32eAoIn3eZp1CuBZ/eJ
xt8xhWCntk+UWZ0AEbHNN9oqeiBTaENV/kMH/L1+l7BYxxi4Hk4b/ravE0wu
0i17Y9oC9JntU5GrxqHhxuPiAroO4HWWeRyWG4uXhyz4Pl6mwJ4vKb9m4R1c
nZBqcLfpgNNqCuJFyqOgrNrC8Ua4HLbb+KsceFmJcdX3XQUFCUiu9LmnLvIe
NlrUci46dMFyIUdb0fdfgaIVdyH7yku4TITJ0y5vwia/T3N/fDn++uRzUH3y
uag++ezSIhze81no7N+GLxxacI2WGgMdyZebDHn99ngOwD4/uxqRCzUwEaph
cZV5BKKoc5Z7/8xZkqk+55pUn/NnVB9pGqpvuS7Vt7yB6luukm9UmXuwFY64
Xslz3pWFRpq7aM5lUaC1pjU0kjEFzkyv1bXe146THKcrz1lQYJbqc95D9TmP
pvqcA9W3PPof3/Jr+jPG3coZ2FPiV2K0ohOTnzrQ43YK1FN9yHdRfch1qT7k
vVSfc5p/fM5NYM9skkYd3oz2Wu062oV6zkctz/GMg5XIGZdiSi2qfnfyOMjf
gVp7PliyJI6DJtXP3OwfP3P7wORs06AaZDz7aPKbYQveVsuzWneBArepPtsq
VJ/tOKrP9je/JR/yDKoP+U+qD7kt1Yf8NtWH/DzVh9yc6iseS/UV3031Fd9H
9RVnoPqKr6b6isdRfcIjqD7hef/4hHtSfcLnqT7hCVSf8Bv/+IRbdV6u05Nu
gON0DGsEtnVA90T2L8MX40DzfskP/Nk/fuAr1ESK5p5VQfdrsTsxQZ1QmOfy
+JPvOCjfVrr7tdgHJzwnVb/2doBNW3af21EKyLvd3KJ5Mh1eO/0YY8voglut
6q/YOsdh6HWXBt2ZVtT+li5d0p0O30azW5VyKTBP9Zfm+MdferiJPcKV/SO2
VNnp73FsxuDuMH1P02GYei7utfFOGtRqGRoUjzXB7utpvLlzlP/O4yjUeZwB
dR6XvrTucPvSusPfgkvrTo3q/3zhH/9n4aV1jbeW1jXKUdf10dSzhzMY29Ap
jRg1fVsAdBHzRySeUIDFOexgNFGBPvy9dXQDlcDP8lDGdAMB5bsfra+u78To
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
BXo1Yc3ClU3A/wCj6DRE
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.713864299870255}, {0., 
       0.8808643503684904}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 
    0.7150000000000001, $CellContext`k2$$ = 1., $CellContext`k3$$ = 
    0.5950000000000001, $CellContext`k4$$ = 
    0.7150000000000001, $CellContext`k5$$ = {
    1, 2, {0, 0}}, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 
     0.7150000000000001, {1, 1, {0, -1}} -> 1., {1, 1, {-1, -1}} -> 
     0.5950000000000001, {1, 1, {-1, 1}} -> 
     0.7150000000000001, {1, 1, {1, 0}} -> 0.7150000000000001, {1, 1, {0, 1}} -> 
     1., {1, 1, {1, 1}} -> 0.5950000000000001, {1, 1, {1, -1}} -> 
     0.7150000000000001}, $CellContext`m1Sel$$ = 1, $CellContext`m2Sel$$ = 
    1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$44808, $CellContext`qVec -> #]& , \
$CellContext`meshSize$$ = 18, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 
    1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
    2, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10}, "numberOfMasses" -> 1, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2571966527196653, 0.46330543933054397`}}, 
     "mPosFirstCell" -> {{0.9060000000000001, 0.7050000000000001}}, 
     "pointsDataTable" -> CompressedData["
1:eJxVmHuMXGUZxme3u73spd3t3mZnbzOz12633ZnZmZ3Zy+x5Z2YJQgtyUVMI
EgQq1RothRiCuCxgNQYIRUHWUqAGCjEhyKVRRMN8okHkUihgoBgjUNuC1EBt
KYWW4pz3eb4v7R/7R3u+vM/7ft9vzvmdE7n0e+etrQgEAmWlv2zpb1Hpr7z0
17x75yfnX9ZtNj/z8cBFxWnzs2DF1xav6DLLLrrtmY/XTJvPZr79x6t/3mL+
XLp82/8K5k/P/+q03x5aYvzLA7cUzK13fXfpTSZgjpQuP9NbMNtKVz9//bki
6uXN4/d8+NCzq455qJc31eXLf9K8u0ZQL2e2hYb/2TO/WVAvZ/Zsv/sv4Vi3
GfT/IzhthrRAJ/IfL5g7tL8W83V//eqC+fjz1695v28J8vfmzY13Fm7+zv4v
kH993piDr551ad2TRdTLmzPTP81dsve4h3o580Zp/D3bawX1cmb+DX6BZkE9
MY9uXHf7f49Hkb+xYJ5d5RfoxPw1BfbXjPztedMfX/hw+4WLjX/5Ii9v3jv2
61IHJ4o6/5s5E9D9vAb5G3Pm369E//HpzAkP9XLmgdL4j25cjPztYr6z3y/Q
LKgn5ode6uKn/hbF/C/mzcV7/QIdyF+bZ3/NOM8vcuaCyyf+9eVba3Geczlz
9qV1a8Z2HC9qfiJnZku78Ur0Dx7qifHLn1ETQP5aMVeWxr/OWyLhTR+c++QJ
z/i7uWasRc57snPTB3HPnFFTOtBfRM0nev55c1Tn6yBPOXOJ9teE81yTIy81
5EnMjue+//R9oWNFzb9FzOZSWuri5z3UE1OjvASQP+OZ+5SXOvmKn//YlBnX
Ai3y49Llzr1ZA56jyL8+R547MH8wR56byJOQ52qc52oxWv6GT4sHSuU2veCZ
mP/PO1/zOnX+KbNbeSnj/FPkpQ75a7PkOSj+5XPnJslzFPO/KeSlnTwJeW7C
edYIea42mr/KI8+fFDH/lNns//PYbk/zH8ua7cpLOeefJC918pSfH5xkf0FB
vQnyHEF+QshLu9H1cx77a0T+C1Pkucrg/LPk+UgR82fNcb/d+Nse5p80G5WX
eZx/grzUI/+FcfYXJE9j5DlidH3QIy9tnH+K/TUifyZLnhcZzD9Jng8XMf+E
ifntXr7HQ70J8lzB+cdNRnmpJ09j7K8V5/lYhjxHOH+WPLdx/kn214D8+CR5
Xmgw/wR5PlTE/ONG271rn4d6Y+S5QsBThjwvJU8Z8txKntLkOWJ0/cwkeW7j
/BPkuQH5e8eNUZ4XcD/HyfNB8LxqzMz57T7/PnieyZDnSs6fJi9LydMoeQ7h
PIOj5DnC+SfIS4jzj5PnBuTPjZlDyvMC7mfG6Pg7Pyxi/jTa/fwAeI6nzYPK
83z5kdYbJS9LyVOK/YXIU5I8hzn/GHkJgefgGPtbSp4y5Hk+eUobHf/uA+D5
sVFzvb+dwY/A894UeV7A+VPkpYE8JdlfiDyNkOcw58+Ql1bOn2Z/S8nTqLlQ
Aankfo6arf74694Hz2tTRrfz8YPgeS5Jnhdy/hHy3MDfU4L9tZGnBHkOc/40
eW7l/KPsr548pchzBfczaXT81D7wHEzyeX4IPK8aIc8LwfNMgrw0kqc4eW4j
TzHyHAbPJ1LkuZXzp8hzPXlKkud53M8Rk/THL9/D+3PCrNbn+WHen+PkeRHn
j5OXRv6eYuyvXa7MVr1xf2yYPIc5f5K8BDn/CHmu5+9phDzP434mjB7PPf8C
zzNxo9s5c4T35xjvz1Wy6I37N2SfHyYvjbJB81eyv3bxL1fdNcTz6OL8I+Ql
yPtzgv3Vkac4eS4nTzGz1T+e9G7en2Pk+ahXrfkrzVV6oNWyUfNXkJcmeVPz
l7O/dvFKlzd8vozn0cX5E+yvhfPH2V8deYqR5zKz3R/wsmGT8Y/nlVeLyF9B
nj/1sP9D5LmG+YPkuUmmNH+A/XUI6vU7P8X8MfLcYtDvsPPTB3T9SuenyB9y
for85c5Psf/LyHMN8/udn6JeH3nuENTrcX6a1fUr2V8L81eQlyWmStcvN7P0
U+QPmm30U+QPkOfjHur1keda5vc6P0W9bvbXSZ6jzk+xX0POT9HvoPNTrF9m
9tFPsf/9ZvZ6+Cnm7zX76KfI7+H9eTHnjzo/Rb0I++uUR05/59rGlV3kpYP5
y5yfYv2A81PM3+f8FPk9ZjP9FPndRuinmD9CnpcwP+z8FPkd7K9TftBY+p/P
Wp2fYn2/81Pk9zo/xf53Oz9FftTcQT9Fftj56dvXlgK+0cnzqGN+G3lukWs1
v4X9dYl/+ZG/Njo/RX4P+2symD/q/BT5EeenzX7AHV3OT9/V/Hbnp7/R/Fbn
p9dpfpPz0y9p/lLy3CXqpwNLnJ9i/gj7a2J+mDxXm0bN7yDPnxTf0fyQmaOf
Yv4W8lLO/W9wfor8OuenA5pfbc7xD2BeWHx9v+2ZCuenWN/p/LRJ89ucn2L+
IHk+UkR+k/mCfor8evIyT/T94LZa8xr9VN8PBhY4P0V+wNzkP4BGw3j+P3m4
aP0U+a3OT5Hf7PwU+Q3OT/V96uMlJkE/Rf4i8lzB/Z/H86jH82rTp0Xrp/q8
2PB+0b97XfOtsAT0AK72PqOfIr/R+Sny652fIr/a+SnyK8036af6vDj3RNH6
6SbNP1jcRj9Vvt95tZihnw5pv297pc1d+PDWsGj+O4c966d6+aLF5LmB+Quc
nyK/zPkp8o8Uf0k/1d9X1Z6i9VP+4D3rp7r/jR951k/3aP5xr8N/AL0cxvPk
jQqxfor8eeS5Ac+rzmNF66fK9/0HigH66Tk48OKL9FP0u8+zfor8o571U72f
bCgX66fIXyjgOYLnSXaJWD/t0vxDReunq/UHtLvYRz/V59sHu70X6afK/+mH
vFn6KfYnIFfRT5E/X16jnyK/Rqyfat699QKeI/CjXY1i/RTn+5Rn/fSw7tcB
7wL6KfKPeVvop8ivkFb6KfKrRE720/V1Mk4/RX6DnOKnu5oFPEfAe2VIPqOf
6v3q2iOe9VOcT5lYP9XnSdVC+Sb9VH1mw2J54mQ/Xb9UaumnyG+SU/x0V1Ay
J/tpZbuA54j83j/+TJdYP0V+pRyln2L+0gv7yX6aqZdT/HR9o1g/RX6LnOKn
u0Jyip9Wdor1U/39lH5X4DmC7zGpqFg/VXwq69gf/TTTIKf46fpmCdBPkd8q
+072013t8iD9VPEuD4v1U+RHxPop8rvJcxTfo17uEeun2K8mOcVP1wel72Q/
vbdN5uin52t+p8zST/V7RHlErJ/q95CtUXmdfor8HrF+qr/Hl3vJcxT373X9
Yv1Ub1/rQ2L9VH/N93bIBfRTrA9LjH6K+aMSop9i/m7yXMP8XvLcxPn7xPop
6g2Q5yi+b5YPiv1+iv3vkiL9FOsjYv0U67tljn6K/B7yfMxDfh95ruH8/WL9
FPWWkecO5i+X/yjPUe7nkFg/xfqoHKSfYn2PWD/F+l6Zo58iv1+snyJ/QKyf
6vNr3aBYP0W9IbF+inoryHNU9Ptealisn2J9r/TSTzF/n1g/Rf6ABGbhp9j/
ZWL9FPMsF+unqLdCrJ+i3kqxfqo+EIqR5274yP6YWD9Fv/1i/RT5y2Q1/RTz
D8o2+inyh8T6KfJXivVT1Bsmzy3I3xIT66eaf0WcPHeL3v6SCbF+iv0alJvp
p8hfLo/TT7H/K2Qb/RT5w+QlAB89OybWT/X+GoqL/X6K+eNi/VTzdyTkd8pz
N57vN4yI/X56u+YPkedqfN9ct1Ksn+r6spgk6aeavzMmb9FPNX9LXKyfYv6E
WD9Vv02OkOcu5JclyXM35tmZFOun2P9h8lxt9HF1Q0xm6KeYPy5b6af6uAsl
xPop5k+I9VPMPyLWTzF/Uqyfol6KPHfD70OjYv0U/cbJcxV8bGdcrJ/q+i0J
Cfwdfor5R8T6Kc4/KdZPUS8l1k9RLyXWT1FvlP31cD/TYv0U/SbE+in6HSHP
h+EX+0ckST/F/Emxfor5U2L9FPVGyXMreUqL9VPUS7O/Hu5nRqyf4vxHyPNC
+MUVSfJ8qIj5U7KOfor5R8lzBecfFeunqJcW+/0U9TJi/RT1xshzD/dzXOz3
U/SbJM8L8H6zIyWt9FPMPypb6KeYP02eKzl/Rqyfol5GrJ8qzzvGpJ1+inrj
5LmH+zkh1k/R7yh5XgA/K0vLiUH4KeZPy076Kc4/I9ZPMf+YWD9FvXHnp5h/
wvkp6k2Q5x7yNCnWT9FvmjzPJ08ZsX4KnsbE+inmH3N+iv0cd36KehPOT1Fv
0vkp6mXZXy/3MyvWT9FvRtbQT9HvmMzRTzH/OJ/nB8FzcsL5KeafdH6KepPk
uY08ZZ2fot4U++vlfnpi/RTnP06eK8jTuFxOP8X8E7KDfor5J52fYv6s81PU
mxL7/RT1ppyfop5Hnnvh/yLOT9HvhDxNP0W/kxKjn2L+rJxNP8X8WfK8iPNP
OT9FPc/5qfp3SJyfav6skOdefM/cL85Pwf8keZ5HnrJy9KvwU8w/Je/RTzG/
Jw/RTzG/J9+ln6p/XyjOTzXfiPNTze/Psb9evH/dmnN+ivmnyHM5eZpyfgqe
POen6v8j4vxU87eI81N9PQjknJ9q/hU556f6evJSjv314XveSN756aM6v0ee
y/D9p1acn+r6q8T5qe7/W+L8FOefc36q+Q/l2F8H5q/NOz9FvTz768N5vpV3
fqrrzxLyHMD7zxMim+mnOn8oR56P4f1vNuf8FOefc36q85+VF/v9FPXy5DmK
/QwVyHMfeSo4P9XX2UMi19FPcf45maWf6v6bHHk+ju+5/XnyXIv8W/POT1Ev
7/wU9QrOT1GvQJ77yNO081Ocf07epZ9qv4G8BG6En+L88+T5BL6nvpQnz4t5
/gXyzO+5WwrOT1Fv2vkp6k2zvz6c50vTzk+1X8nLmfRTnH/e+anOX1twforz
Lzg/1fy3Cs5PUW/a+SnqTTs/Rb3T2F8/650m/weWIO+z
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {-1.2100000000000002`, -1.18}, \
$CellContext`qPlaneLoc$$ = {{-2.709857394019914, -1.7138642998702553`}, {
    2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {
    10}, $CellContext`rawNumberOfMasses$$ = 1, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 2, $CellContext`tau$$ = 
    0.2303847312927246, $CellContext`tick$$ = True, $CellContext`u$$ = {{0.1, 
    1.3}, {1.9, 0.8}, {0.9060000000000001, 0.7050000000000001}}, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period:"]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open"]}, 
                ImageSize -> {200, 60}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Text[
                Text["Angular frequency \[Omega](q), selection:"]], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["mesh size "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`meshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin], 
                Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tau$$], 0}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`meshSize$$], 8}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`meshSize$$ = 
        8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
         1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tau$$ = 
        0, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       Dynamic[If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
            Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
              1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
           Module[{$CellContext`n$}, $CellContext`n$ = 2; 
             While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
            ReplaceAll[
              "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
             2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
              $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
              
              Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; $CellContext`bInitDefaults$$ = 
            False; Null, Null]; 
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
                $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
              True, Null]; 
           If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
                
                Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`bRefreshDynPlot$$ = 
              False, Null]; $CellContext`dynPlot$$[$CellContext`tau$$], 
           
           If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
            If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
               False; $CellContext`bRefreshDynamics$$ = 
               True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
            If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
              Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
            LocatorPane[
             Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                   Dimensions[#]] < 3, 
                 
                 Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
                 If[First[
                    Dimensions[#]] > 7, 
                  Take[#, 7], #]]; 
              Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                 First[
                   Dimensions[$CellContext`rawArrayOfMasses$$]]; 
                If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                    $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                  
                  While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                   AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                   Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                   Part[
                    Part[$CellContext`kArray$$, All, 1], All, 1]]; 
                If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                  Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                  
                  While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                   Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                   Part[$CellContext`u$$, 1], 
                   
                   Part[$CellContext`u$$, 
                    1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                 Part[$CellContext`glConstLocDefault, 1], 
                 Part[$CellContext`u$$, 1]]; 
              Part[$CellContext`u$$, 2] = If[Dot[
                   Part[$CellContext`u$$, 2], 
                   
                   Part[$CellContext`u$$, 
                    2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                 Part[$CellContext`glConstLocDefault, 2], 
                 Part[$CellContext`u$$, 2]]; {
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
               If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
               If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
               If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
               ReplaceAll[
                 "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
                2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
               True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
             $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
             LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period:"]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open"]}, 
                 ImageSize -> {200, 60}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Text[
                 Text["Angular frequency \[Omega](q), selection:"]], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["mesh size "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`meshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tau$$, 0}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`meshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{907., {288., 295.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms}, $CellContext`latticeBasis = 
          Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            Range[$CellContext`numMasses]]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay]& , 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], $CellContext`pointsTable[
         Pattern[$CellContext`mPosFirstCell, 
          Blank[List]], 
         Pattern[$CellContext`latticeBasis, 
          Blank[List]], 
         Pattern[$CellContext`numberLatticeLinesToDisplay, 
          Blank[List]]] := 
       Table[$CellContext`mPosFirstCell + 
         Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
          
          Part[$CellContext`numberLatticeLinesToDisplay, 
           1]}, {$CellContext`j, -
          Part[$CellContext`numberLatticeLinesToDisplay, 2], 
          
          Part[$CellContext`numberLatticeLinesToDisplay, 
           2]}], $CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], $CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk 
            Part[$CellContext`mA, $CellContext`j]])], \
$CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], $CellContext`showDynamics[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`ql, 
          Blank[]]] := 
       Module[{$CellContext`pointsDataTable, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`e, $CellContext`omega, \
$CellContext`points, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses}, \
{{$CellContext`a, $CellContext`b}, $CellContext`pointsDataTable, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`lines, \
$CellContext`mScalarArray, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "numberLatticeLinesToDisplay", 
             "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`points = 
          Table[Part[$CellContext`pointsDataTable, $CellContext`k] + 
            Table[$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`ql, $CellContext`a $CellContext`i + \
$CellContext`b $CellContext`j] - $CellContext`omega #))], {$CellContext`i, -
               Part[$CellContext`numberLatticeLinesToDisplay, 1], 
               
               Part[$CellContext`numberLatticeLinesToDisplay, 
                1]}, {$CellContext`j, -
               Part[$CellContext`numberLatticeLinesToDisplay, 2], 
               
               Part[$CellContext`numberLatticeLinesToDisplay, 
                2]}]& , {$CellContext`k, $CellContext`numberOfMasses}]; \
$CellContext`nu = 2 Pi If[$CellContext`omega == 0, 1, 1/$CellContext`omega]; 
         Show[{
            Table[
             ListPlot[
              Part[$CellContext`points, $CellContext`k][$CellContext`nu #], 
              PlotRange -> {{-($CellContext`glConstWindowHalfWidth/
                  
                  2), $CellContext`glConstWindowHalfWidth}, \
{-($CellContext`glConstWindowHalfWidth/
                  2), $CellContext`glConstWindowHalfWidth}}, 
              ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
              Directive[
                PointSize[
                 Sqrt[
                 Part[$CellContext`mScalarArray, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
                $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], 
            
            Graphics[{$CellContext`lines}]}]& ], \
$CellContext`glConstPrimaryDisplaySize = {380, 380}, $CellContext`glConstMMax = 
       30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -(Part[$CellContext`qMax, 1]/2), Part[$CellContext`qMax, 1]/
               2, Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -(
                Part[$CellContext`qMax, 2]/2), Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], \
$CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 
                23}}]]}]], $CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, \
$CellContext`n$]/($CellContext`glConstMMax 500)]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               Part[#, 3], 
               FE`glConstSpringColorsByN$$55]]& , $CellContext`cN$]; 
         If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                Part[#, 3], 
                FE`glConstSpringColorsByN$$55]]& , $CellContext`cOrigin$]], 
           Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> {{-($CellContext`glConstWindowHalfWidth/
                 2), $CellContext`glConstWindowHalfWidth}, \
{-($CellContext`glConstWindowHalfWidth/
                 2), $CellContext`glConstWindowHalfWidth}}, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], Attributes[$CellContext`uLoc$] = {Temporary}, 
       Attributes[$CellContext`ld$] = {Temporary}, 
       Attributes[$CellContext`cd$] = {Temporary}, 
       Attributes[$CellContext`m1Ind$] = {Temporary}, 
       Attributes[$CellContext`m2Ind$] = {Temporary}, 
       Attributes[$CellContext`moInd$] = {Temporary}, 
       Attributes[$CellContext`mScalarArray$] = {Temporary}, 
       Attributes[$CellContext`numberOfMasses$] = {Temporary}, 
       Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
       Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 
             0.01}]}], $CellContext`glConstKMax = 1, 
       FE`glConstSpringColorsByN$$55 = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]]] := Module[{$CellContext`result}, $CellContext`result = If[
            
            NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], \
$CellContext`massValue = 0.25, $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , \
$CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], \
$CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]], \
$CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.600991920019863*^9, 3.6009919670395527`*^9}, {
   3.6009920245298405`*^9, 3.6009920501333055`*^9}, 3.60099313594541*^9, {
   3.600993187449356*^9, 3.600993239845353*^9}, {3.6009932797776365`*^9, 
   3.6009933046760607`*^9}, {3.6012440341096554`*^9, 3.6012440721578317`*^9}, 
   3.6012447781242104`*^9, {3.6012448176024685`*^9, 3.6012448561326723`*^9}, 
   3.6012449730663605`*^9, {3.6012450799064713`*^9, 3.601245088751977*^9}, {
   3.601245122802925*^9, 3.6012451299813356`*^9}, {3.6012451718047276`*^9, 
   3.601245397972664*^9}, {3.6012467859190493`*^9, 3.6012468229691687`*^9}, {
   3.601246896213358*^9, 3.6012470488980913`*^9}, {3.6012470802998877`*^9, 
   3.601247087356291*^9}, {3.6012476034298086`*^9, 3.601247625026044*^9}, {
   3.6012477383525257`*^9, 3.6012477482580924`*^9}, {3.6012479226070642`*^9, 
   3.6012479616512976`*^9}, 3.6012480156453857`*^9, {3.6013815489528093`*^9, 
   3.6013815749782977`*^9}, 3.6013816959272156`*^9, 3.6013818936795263`*^9, 
   3.601381933169785*^9, 3.6013820135453825`*^9, 3.6013868190332403`*^9, 
   3.6013870782100644`*^9, {3.6013872932123623`*^9, 3.6013873205069227`*^9}},
 CellID->216711214],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    True, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 4, {0, 0}, 0.25, 0.3231609999999999, {0.5420000000000003, 0.54}, {
        0.9860000000000002, 0.895}, {{0.6100241056315583, 
        0.4877444988720793}, {0.4877444988720793, 0.3899758943684419}}}, {
       1, 2, {0, 0}, 0.25, 0.45576399999999995`, {0.5420000000000003, 0.54}, {
        0.4, 1.2}, {{
        0.04424219552224412, -0.20563273975127513`}, {-0.20563273975127513`, 
        0.9557578044777558}}}, {
       1, 5, {0, 0}, 0.25, 1.1306239999999999`, {0.5420000000000003, 0.54}, {
        1.5100000000000002`, 0.98}, {{0.8287671232876713, 
        0.37671232876712324`}, {0.37671232876712324`, 
        0.17123287671232876`}}}, {
       1, 3, {0, 0}, 0.25, 1.3141639999999994`, {0.5420000000000003, 0.54}, {
        1.3, 1.4}, {{0.437208750201649, 0.49604158993854647`}, {
        0.49604158993854647`, 0.562791249798351}}}}, {{
       2, 4, {0, 0}, 0.25, 0.43642100000000017`, {0.4, 1.2}, {
        0.9860000000000002, 0.895}, {{
        0.7868457292385107, -0.40953574644666496`}, {-0.40953574644666496`, 
        0.21315427076148935`}}}, {
       2, 1, {0, 0}, 0.25, 0.45576399999999995`, {0.5420000000000003, 0.54}, {
        0.4, 1.2}, {{
        0.04424219552224412, -0.20563273975127513`}, {-0.20563273975127513`, 
        0.9557578044777558}}}, {
       2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}, {
       2, 5, {0, 0}, 0.25, 1.2805000000000006`, {0.4, 1.2}, {
        1.5100000000000002`, 0.98}, {{
        0.9622022647403359, -0.19070675517376018`}, {-0.19070675517376018`, 
        0.03779773525966417}}}}, {{
       3, 5, {0, 0}, 0.25, 0.22050000000000003`, {1.3, 1.4}, {
        1.5100000000000002`, 0.98}, {{
        0.20000000000000032`, -0.40000000000000024`}, {-0.40000000000000024`, 
        0.7999999999999996}}}, {
       3, 4, {0, 0}, 0.25, 0.3536209999999998, {1.3, 1.4}, {
        0.9860000000000002, 0.895}, {{0.27881828285084864`, 
        0.44841793897986815`}, {0.44841793897986815`, 0.7211817171491512}}}, {
       3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}, {
       3, 1, {0, 0}, 0.25, 1.3141639999999994`, {0.5420000000000003, 0.54}, {
        1.3, 1.4}, {{0.437208750201649, 0.49604158993854647`}, {
        0.49604158993854647`, 0.562791249798351}}}}, {{
       4, 5, {0, 0}, 0.25, 0.281801, {0.9860000000000002, 0.895}, {
        1.5100000000000002`, 0.98}, {{0.9743613400946057, 
        0.15805479753443025`}, {0.15805479753443025`, 
        0.025638659905394205`}}}, {
       4, 1, {0, 0}, 0.25, 0.3231609999999999, {0.5420000000000003, 0.54}, {
        0.9860000000000002, 0.895}, {{0.6100241056315583, 
        0.4877444988720793}, {0.4877444988720793, 0.3899758943684419}}}, {
       4, 3, {0, 0}, 0.25, 0.3536209999999998, {1.3, 1.4}, {
        0.9860000000000002, 0.895}, {{0.27881828285084864`, 
        0.44841793897986815`}, {0.44841793897986815`, 0.7211817171491512}}}, {
       4, 2, {0, 0}, 0.25, 0.43642100000000017`, {0.4, 1.2}, {
        0.9860000000000002, 0.895}, {{
        0.7868457292385107, -0.40953574644666496`}, {-0.40953574644666496`, 
        0.21315427076148935`}}}}, {{
       5, 3, {0, 0}, 0.25, 0.22050000000000003`, {1.3, 1.4}, {
        1.5100000000000002`, 0.98}, {{
        0.20000000000000032`, -0.40000000000000024`}, {-0.40000000000000024`, 
        0.7999999999999996}}}, {
       5, 4, {0, 0}, 0.25, 0.281801, {0.9860000000000002, 0.895}, {
        1.5100000000000002`, 0.98}, {{0.9743613400946057, 
        0.15805479753443025`}, {0.15805479753443025`, 
        0.025638659905394205`}}}, {
       5, 1, {0, 0}, 0.25, 1.1306239999999999`, {0.5420000000000003, 0.54}, {
        1.5100000000000002`, 0.98}, {{0.8287671232876713, 
        0.37671232876712324`}, {0.37671232876712324`, 
        0.17123287671232876`}}}, {
       5, 2, {0, 0}, 0.25, 1.2805000000000006`, {0.4, 1.2}, {
        1.5100000000000002`, 0.98}, {{
        0.9622022647403359, -0.19070675517376018`}, {-0.19070675517376018`, 
        0.03779773525966417}}}}}, {{{
       1, 2, {-1, 0}, 0.25, 0.4681640000000003, {0.5420000000000003, 0.54}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.12509291615758594`, 
        0.33082424107791303`}, {0.33082424107791303`, 0.8749070838424141}}}, {
       1, 3, {-1, 0}, 0.25, 0.6265639999999998, {0.5420000000000003, 0.54}, {
        1.2, 0.09999999999999987}, {{
        0.6910132085469318, -0.46207570176390617`}, {-0.46207570176390617`, 
        0.30898679145306823`}}}, {
       1, 5, {0, -1}, 0.25, 0.9982239999999999, {0.5420000000000003, 
        0.54}, {-0.3899999999999997, 0.17999999999999994`}, {{
        0.8701694208915033, 0.3361169436919971}, {0.3361169436919971, 
        0.12983057910849677`}}}, {
       1, 4, {-1, 0}, 0.25, 1.011361, {0.5420000000000003, 0.54}, {
        0.8860000000000002, -0.405}, {{
        0.1170066870286673, -0.3214282536107285}, {-0.3214282536107285, 
        0.8829933129713328}}}, {
       1, 3, {0, -1}, 0.25, 1.3077640000000004`, {0.5420000000000003, 
        0.54}, {-0.5999999999999999, 0.5999999999999999}, {{
        0.9972472097412071, -0.05239477459235749}, {-0.05239477459235749, 
        0.0027527902587928545`}}}, {
       1, 5, {-1, 0}, 0.25, 1.493024, {0.5420000000000003, 0.54}, {
        1.4100000000000001`, -0.32000000000000006`}, {{
        0.5046295304027262, -0.4999785669888763}, {-0.4999785669888763, 
        0.4953704695972739}}}, {
       1, 5, {1, -1}, 0.25, 1.5758239999999997`, {0.5420000000000003, 
        0.54}, {-0.2899999999999996, 1.48}, {{
        0.4392774827645726, -0.49629907908497395`}, {-0.49629907908497395`, 
        0.5607225172354274}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.5420000000000003, 0.54}, {
        0.6420000000000002, 1.84}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.5420000000000003, 0.54}, {
        0.4420000000000003, -0.76}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 4, {0, -1}, 0.25, 2.317961, {0.5420000000000003, 
        0.54}, {-0.9139999999999997, 0.09499999999999997}, {{
        0.914569313288705, 0.27952152775650674`}, {0.27952152775650674`, 
        0.085430686711295}}}, {
       1, 4, {1, -1}, 0.25, 2.5697609999999997`, {0.5420000000000003, 
        0.54}, {-0.8139999999999996, 1.395}, {{
        0.7155280199209186, -0.45116257893243766`}, {-0.45116257893243766`, 
        0.2844719800790813}}}, {
       1, 2, {-1, 1}, 0.25, 2.774563999999998, {0.5420000000000003, 0.54}, {
        2.1999999999999997`, 0.7}, {{0.990773325106215, 
        0.09561141858684824}, {0.09561141858684824, 0.00922667489378511}}}, {
       1, 3, {1, -1}, 0.25, 2.935364, {0.5420000000000003, 
        0.54}, {-0.4999999999999998, 1.9}, {{
        0.36989075290151413`, -0.48277487902692817`}, {-0.48277487902692817`, 
        0.6301092470984858}}}, {
       1, 4, {1, 0}, 0.25, 3.034961000000001, {0.5420000000000003, 0.54}, {
        1.0860000000000003`, 2.1950000000000003`}, {{0.09750899599698314, 
        0.2966496109834689}, {0.2966496109834689, 0.9024910040030167}}}, {
       1, 3, {-1, -1}, 0.25, 3.080164000000001, {0.5420000000000003, 
        0.54}, {-0.7, -0.7000000000000002}, {{0.5008058012495439, 
        0.4999993506839247}, {0.4999993506839247, 0.49919419875045623`}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.5420000000000003, 
        0.54}, {-1.2579999999999996`, 1.04}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.5420000000000003, 0.54}, {
        2.342, 0.040000000000000036`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 5, {-1, -1}, 0.25, 3.8206240000000005`, {0.5420000000000003, 
        0.54}, {-0.48999999999999977`, -1.12}, {{0.27875655913798375`, 
        0.4483874885359041}, {0.4483874885359041, 0.7212434408620163}}}, {
       1, 2, {1, 0}, 0.25, 3.843364, {0.5420000000000003, 0.54}, {0.5, 
        2.5}, {{0.0004589729205976904, -0.021418736294558753`}, \
{-0.021418736294558753`, 0.9995410270794022}}}, {
       1, 5, {1, 0}, 0.25, 4.168224000000001, {0.5420000000000003, 0.54}, {
        1.6100000000000003`, 2.2800000000000002`}, {{0.27364748151730806`, 
        0.4458301665169626}, {0.4458301665169626, 0.7263525184826919}}}, {
       1, 2, {0, -1}, 0.25, 4.189364, {0.5420000000000003, 0.54}, {-1.5, 
        0.3999999999999999}, {{0.995321485552461, 0.06823947501339112}, {
        0.06823947501339112, 0.004678514447539061}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.5420000000000003, 0.54}, {2.442, 1.34}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.5420000000000003, 
        0.54}, {-1.3579999999999997`, -0.26}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 4, {-1, 1}, 0.25, 5.0565609999999985`, {0.5420000000000003, 0.54}, {
        2.786, 0.395}, {{
        0.9958420357234887, -0.06434808163097411}, {-0.06434808163097411, 
        0.0041579642765112515`}}}, {
       1, 2, {1, -1}, 0.25, 5.116964, {0.5420000000000003, 0.54}, {-1.4, 
        1.7}, {{0.7370315679375505, -0.4402454267804112}, \
{-0.4402454267804112, 0.26296843206244946`}}}, {
       1, 2, {0, 1}, 0.25, 5.222163999999998, {0.5420000000000003, 0.54}, {
        2.3, 2.}, {{0.5918167257864747, 0.49149739456669694`}, {
        0.49149739456669694`, 0.4081832742135254}}}, {
       1, 3, {1, 0}, 0.25, 5.401764, {0.5420000000000003, 0.54}, {
        1.4000000000000001`, 2.7}, {{0.13628214783170828`, 
        0.3430879246112936}, {0.3430879246112936, 0.8637178521682918}}}, {
       1, 4, {-1, -1}, 0.25, 5.4661610000000005`, {0.5420000000000003, 
        0.54}, {-1.0139999999999998`, -1.205}, {{0.44293170288983436`, 
        0.49673253312516774`}, {0.49673253312516774`, 0.5570682971101656}}}, {
       1, 2, {-1, -1}, 0.25, 6.661764000000002, {0.5420000000000003, 
        0.54}, {-1.6, -0.9000000000000001}, {{0.6887310928456788, 
        0.4630124993920529}, {0.4630124993920529, 0.31126890715432126`}}}, {
       1, 3, {-1, 1}, 0.25, 6.672963999999997, {0.5420000000000003, 0.54}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9805783456946567, 
        0.13800164364741063`}, {0.13800164364741063`, 
        0.019421654305343167`}}}, {
       1, 4, {0, 1}, 0.25, 6.828360999999999, {0.5420000000000003, 0.54}, {
        2.886, 1.695}, {{0.8046346700181787, 0.3964816740063978}, {
        0.3964816740063978, 0.19536532998182143`}}}, {
       1, 5, {-1, 1}, 0.25, 7.665423999999999, {0.5420000000000003, 0.54}, {
        3.31, 0.48}, {{
        0.9995303586598732, -0.02166612049118224}, {-0.02166612049118224, 
        0.00046964134012678315`}}}, {
       1, 1, {1, 1}, 0.25, 8.41, {0.5420000000000003, 0.54}, {
        2.5420000000000003`, 2.64}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.5420000000000003, 
        0.54}, {-1.4579999999999997`, -1.56}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 5, {0, 1}, 0.25, 9.763023999999998, {0.5420000000000003, 0.54}, {
        3.41, 1.78}, {{0.842507813152974, 0.3642641869977991}, {
        0.3642641869977991, 0.15749218684702612`}}}, {
       1, 3, {0, 1}, 0.25, 9.820564000000001, {0.5420000000000003, 0.54}, {
        3.2, 2.2}, {{0.7194051176694128, 0.44928987785222924`}, {
        0.44928987785222924`, 0.2805948823305871}}}, {
       1, 2, {1, 1}, 0.25, 11.069763999999997`, {0.5420000000000003, 0.54}, {
        2.4, 3.3}, {{0.3118552482239007, 0.4632510684057944}, {
        0.4632510684057944, 0.6881447517760994}}}, {
       1, 4, {1, 1}, 0.25, 12.000160999999999`, {0.5420000000000003, 0.54}, {
        2.986, 2.995}, {{0.49775465512504374`, 0.49999495840097485`}, {
        0.49999495840097485`, 0.5022453448749563}}}, {
       1, 5, {1, 1}, 0.25, 15.260624, {0.5420000000000003, 0.54}, {
        3.5100000000000002`, 3.08}, {{0.5772387813237518, 
        0.4939981484374426}, {0.4939981484374426, 0.42276121867624805`}}}, {
       1, 3, {1, 1}, 0.25, 16.368163999999997`, {0.5420000000000003, 0.54}, {
        3.3, 3.5}, {{0.46471699574857633`, 0.49875355598831983`}, {
        0.49875355598831983`, 0.5352830042514238}}}}, {{
       2, 1, {1, 0}, 0.25, 0.4681640000000003, {0.4, 1.2}, {
        0.6420000000000002, 1.84}, {{0.12509291615758594`, 
        0.33082424107791303`}, {0.33082424107791303`, 0.8749070838424141}}}, {
       2, 5, {1, -1}, 0.25, 0.5544999999999994, {0.4, 
        1.2}, {-0.2899999999999996, 1.48}, {{
        0.8586113615870152, -0.3484220018034267}, {-0.3484220018034267, 
        0.14138863841298482`}}}, {
       2, 3, {1, -1}, 0.25, 1.2999999999999996`, {0.4, 
        1.2}, {-0.4999999999999998, 1.9}, {{
        0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
        0.376923076923077}}}, {
       2, 3, {0, -1}, 0.25, 1.3599999999999999`, {0.4, 
        1.2}, {-0.5999999999999999, 0.5999999999999999}, {{0.7352941176470588,
         0.44117647058823534`}, {0.44117647058823534`, 
        0.2647058823529413}}}, {
       2, 4, {1, 0}, 0.25, 1.460621000000001, {0.4, 1.2}, {
        1.0860000000000003`, 2.1950000000000003`}, {{0.32218898673920204`, 
        0.46731492974563554`}, {0.46731492974563554`, 0.6778110132607978}}}, {
       2, 4, {1, -1}, 0.25, 1.5118209999999987`, {0.4, 
        1.2}, {-0.8139999999999996, 1.395}, {{
        0.9748482128505953, -0.15658599794552408`}, {-0.15658599794552408`, 
        0.025151787149404626`}}}, {
       2, 5, {0, -1}, 0.25, 1.6644999999999994`, {0.4, 
        1.2}, {-0.3899999999999997, 0.17999999999999994`}, {{
        0.3749474316611594, 0.48410934214478824`}, {0.48410934214478824`, 
        0.6250525683388407}}}, {
       2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 2.5}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 0.09999999999999987}, {{
        0.34594594594594585`, -0.4756756756756756}, {-0.4756756756756756, 
        0.654054054054054}}}, {
       2, 5, {1, 0}, 0.25, 2.6305000000000014`, {0.4, 1.2}, {
        1.6100000000000003`, 2.2800000000000002`}, {{0.5565862003421403, 
        0.4967876829500096}, {0.4967876829500096, 0.4434137996578597}}}, {
       2, 1, {1, -1}, 0.25, 2.774563999999998, {0.4, 
        1.2}, {-1.2579999999999996`, 1.04}, {{0.990773325106215, 
        0.09561141858684824}, {0.09561141858684824, 0.00922667489378511}}}, {
       2, 4, {-1, 0}, 0.25, 2.812221, {0.4, 1.2}, {
        0.8860000000000002, -0.405}, {{
        0.08398913172186688, -0.2773715152543133}, {-0.2773715152543133, 
        0.916010868278133}}}, {
       2, 4, {0, -1}, 0.25, 2.947620999999999, {0.4, 
        1.2}, {-0.9139999999999997, 0.09499999999999997}, {{
        0.5857591596748698, 0.49259046532780165`}, {0.49259046532780165`, 
        0.41424084032513014`}}}, {
       2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
        1.4000000000000001`, 2.7}, {{0.3076923076923076, 
        0.46153846153846145`}, {0.46153846153846145`, 0.6923076923076924}}}, {
       2, 5, {-1, 0}, 0.25, 3.3305000000000007`, {0.4, 1.2}, {
        1.4100000000000001`, -0.32000000000000006`}, {{
        0.3062903467947756, -0.460951809037682}, {-0.460951809037682, 
        0.6937096532052243}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {-1.4, 1.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {
        2.1999999999999997`, 0.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {-1, 0}, 0.25, 3.843364, {0.4, 1.2}, {
        0.4420000000000003, -0.76}, {{
        0.0004589729205976904, -0.021418736294558753`}, \
{-0.021418736294558753`, 0.9995410270794022}}}, {
       2, 1, {0, 1}, 0.25, 4.189364, {0.4, 1.2}, {2.442, 1.34}, {{
        0.995321485552461, 0.06823947501339112}, {0.06823947501339112, 
        0.004678514447539061}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 0.3999999999999999}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 3, {-1, -1}, 0.25, 4.82, {0.4, 1.2}, {-0.7, -0.7000000000000002}, {{
        0.25103734439834025`, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       2, 1, {-1, 1}, 0.25, 5.116964, {0.4, 1.2}, {2.342, 
        0.040000000000000036`}, {{
        0.7370315679375505, -0.4402454267804112}, {-0.4402454267804112, 
        0.26296843206244946`}}}, {
       2, 1, {0, -1}, 0.25, 5.222163999999998, {0.4, 
        1.2}, {-1.3579999999999997`, -0.26}, {{0.5918167257864747, 
        0.49149739456669694`}, {0.49149739456669694`, 0.4081832742135254}}}, {
       2, 5, {-1, -1}, 0.25, 6.174500000000001, {0.4, 
        1.2}, {-0.48999999999999977`, -1.12}, {{0.1282856911490808, 
        0.3344076443436715}, {0.3344076443436715, 0.8717143088509192}}}, {
       2, 4, {-1, 1}, 0.25, 6.3410210000000005`, {0.4, 1.2}, {2.786, 
        0.395}, {{
        0.8978043125862539, -0.30290547847105376`}, {-0.30290547847105376`, 
        0.10219568741374611`}}}, {
       2, 4, {0, 1}, 0.25, 6.425221000000001, {0.4, 1.2}, {2.886, 1.695}, {{
        0.961865124950566, 0.19152181691493572`}, {0.19152181691493572`, 
        0.03813487504943411}}}, {
       2, 1, {1, 1}, 0.25, 6.661764000000002, {0.4, 1.2}, {
        2.5420000000000003`, 2.64}, {{0.6887310928456788, 
        0.4630124993920529}, {0.4630124993920529, 0.31126890715432126`}}}, {
       2, 3, {-1, 1}, 0.25, 7.379999999999998, {0.4, 1.2}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9878048780487806, -0.10975609756097565`}, {-0.10975609756097565`, 
        0.01219512195121952}}}, {
       2, 4, {-1, -1}, 0.25, 7.783421000000001, {0.4, 
        1.2}, {-1.0139999999999998`, -1.205}, {{0.25687881973749066`, 
        0.4369119953809513}, {0.4369119953809513, 0.7431211802625095}}}, {
       2, 2, {1, 1}, 0.25, 8.409999999999998, {0.4, 1.2}, {2.4, 3.3}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {0.4, 1.2}, {-1.6, -0.9000000000000001}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 3, {0, 1}, 0.25, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
        0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570139`}}}, {
       2, 5, {-1, 1}, 0.25, 8.986500000000001, {0.4, 1.2}, {3.31, 0.48}, {{
        0.942313470205308, -0.2331497245868803}, {-0.2331497245868803, 
        0.05768652979469203}}}, {
       2, 5, {0, 1}, 0.25, 9.396500000000001, {0.4, 1.2}, {3.41, 1.78}, {{
        0.9641994359601981, 0.18579258234448998`}, {0.18579258234448998`, 
        0.03580056403980206}}}, {
       2, 4, {1, 1}, 0.25, 9.909421000000002, {0.4, 1.2}, {2.986, 2.995}, {{
        0.6748523450562853, 0.4684299920247611}, {0.4684299920247611, 
        0.32514765494371467`}}}, {
       2, 1, {-1, -1}, 0.25, 11.069763999999997`, {0.4, 
        1.2}, {-1.4579999999999997`, -1.56}, {{0.3118552482239007, 
        0.4632510684057944}, {0.4632510684057944, 0.6881447517760994}}}, {
       2, 5, {1, 1}, 0.25, 13.206500000000002`, {0.4, 1.2}, {
        3.5100000000000002`, 3.08}, {{0.732374209669481, 
        0.44272138719569903`}, {0.44272138719569903`, 
        0.26762579033051903`}}}, {
       2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{0.6138686131386862,
         0.48686131386861314`}, {0.48686131386861314`, 
        0.3861313868613139}}}}, {{
       3, 1, {1, 0}, 0.9450000000000001, 0.6265639999999999, {1.3, 1.4}, {
        0.6420000000000002, 1.84}, {{
        0.6910132085469318, -0.46207570176390605`}, {-0.46207570176390605`, 
        0.3089867914530681}}}, {
       3, 4, {1, 0}, 0.25, 0.6778210000000005, {1.3, 1.4}, {
        1.0860000000000003`, 2.1950000000000003`}, {{
        0.06756356029099107, -0.2509954693053177}, {-0.2509954693053177, 
        0.9324364397090089}}}, {
       3, 5, {1, 0}, 0.25, 0.8705000000000008, {1.3, 1.4}, {
        1.6100000000000003`, 2.2800000000000002`}, {{0.11039632395175196`, 
        0.3133831131533602}, {0.3133831131533602, 0.889603676048248}}}, {
       3, 2, {-1, 1}, 0.25, 1.2999999999999994`, {1.3, 1.4}, {
        2.1999999999999997`, 0.7}, {{
        0.6230769230769229, -0.48461538461538467`}, {-0.48461538461538467`, 
        0.3769230769230771}}}, {
       3, 1, {0, 1}, 0.295, 1.3077640000000004`, {1.3, 1.4}, {2.442, 1.34}, {{
        0.9972472097412071, -0.05239477459235749}, {-0.05239477459235749, 
        0.0027527902587928545`}}}, {
       3, 2, {0, 1}, 0.25, 1.3599999999999997`, {1.3, 1.4}, {2.3, 2.}, {{
        0.7352941176470587, 0.4411764705882354}, {0.4411764705882354, 
        0.2647058823529413}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
        1.4000000000000001`, 2.7}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
        0.09999999999999987}, {{0.00588235294117648, 0.07647058823529418}, {
        0.07647058823529418, 0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 2.5}, {{
        0.34594594594594597`, -0.47567567567567565`}, {-0.47567567567567565`, 
        0.654054054054054}}}, {
       3, 5, {1, -1}, 0.25, 2.534499999999999, {1.3, 
        1.4}, {-0.2899999999999996, 1.48}, {{
        0.9974748471098835, -0.05018741369106338}, {-0.05018741369106338, 
        0.002525152890116399}}}, {
       3, 4, {0, 1}, 0.25, 2.6024210000000005`, {1.3, 1.4}, {2.886, 1.695}, {{
        0.9665599839534034, 0.17978259474543135`}, {0.17978259474543135`, 
        0.03344001604659664}}}, {
       3, 1, {-1, 1}, 0.78, 2.935364, {1.3, 1.4}, {2.342, 
        0.040000000000000036`}, {{
        0.36989075290151413`, -0.48277487902692817`}, {-0.48277487902692817`, 
        0.6301092470984858}}}, {
       3, 5, {-1, 0}, 0.25, 2.9705, {1.3, 1.4}, {
        1.4100000000000001`, -0.32000000000000006`}, {{
        0.004073388318464912, -0.06369298097963312}, {-0.06369298097963312, 
        0.9959266116815351}}}, {
       3, 1, {1, 1}, 0.8800000000000001, 3.080164000000001, {1.3, 1.4}, {
        2.5420000000000003`, 2.64}, {{0.5008058012495439, 
        0.4999993506839247}, {0.4999993506839247, 0.49919419875045623`}}}, {
       3, 4, {-1, 1}, 0.25, 3.2182209999999998`, {1.3, 1.4}, {2.786, 
        0.395}, {{
        0.6861542448452111, -0.46405451956220534`}, {-0.46405451956220534`, 
        0.3138457551547889}}}, {
       3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.3076923076923077, 
        0.46153846153846156`}, {0.46153846153846156`, 0.6923076923076923}}}, {
       3, 4, {-1, 0}, 0.25, 3.4294209999999996`, {1.3, 1.4}, {
        0.8860000000000002, -0.405}, {{0.04997811583937926, 
        0.21789975625623093`}, {0.21789975625623093`, 0.9500218841606207}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.3, 
        1.4}, {-0.4999999999999998, 1.9}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999984`, {1.3, 1.4}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9283667621776505, -0.25787965616045855`}, {-0.25787965616045855`, 
        0.07163323782234961}}}, {
       3, 3, {0, 1}, 0.25, 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
        0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.3, 1.4}, {-0.5999999999999999, 
        0.5999999999999999}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 5, {0, -1}, 0.25, 4.344499999999999, {1.3, 
        1.4}, {-0.3899999999999997, 0.17999999999999994`}, {{
        0.6574059155253769, 0.4745770514443549}, {0.4745770514443549, 
        0.34259408447462314`}}}, {
       3, 4, {1, -1}, 0.25, 4.469021, {1.3, 1.4}, {-0.8139999999999996, 
        1.395}, {{0.9999944059336486, 0.002365171253390793}, {
        0.002365171253390793, 5.5940663514445195`*^-6}}}, {
       3, 5, {0, 1}, 0.25, 4.596500000000002, {1.3, 1.4}, {3.41, 1.78}, {{
        0.9685847927771131, 0.17443707168497774`}, {0.17443707168497774`, 
        0.03141520722288699}}}, {
       3, 2, {1, 1}, 0.25, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
        0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       3, 5, {-1, 1}, 0.25, 4.886499999999999, {1.3, 1.4}, {3.31, 0.48}, {{
        0.8267880896347077, -0.37843036938504043`}, {-0.37843036938504043`, 
        0.17321191036529213`}}}, {
       3, 4, {1, 1}, 0.25, 5.386621000000001, {1.3, 1.4}, {2.986, 2.995}, {{
        0.5277141272794206, 0.4992313363052645}, {0.4992313363052645, 
        0.47228587272057937`}}}, {
       3, 1, {-1, 0}, 0.9450000000000001, 5.401764, {1.3, 1.4}, {
        0.4420000000000003, -0.76}, {{0.13628214783170822`, 
        0.34308792461129356`}, {0.34308792461129356`, 0.8637178521682918}}}, {
       3, 4, {0, -1}, 0.25, 6.604820999999998, {1.3, 
        1.4}, {-0.9139999999999997, 0.09499999999999997}, {{
        0.7421542536883285, 0.43744864546669776`}, {0.43744864546669776`, 
        0.25784574631167145`}}}, {
       3, 1, {1, -1}, 0.78, 6.6729639999999995`, {1.3, 
        1.4}, {-1.2579999999999996`, 1.04}, {{0.9805783456946568, 
        0.1380016436474106}, {0.1380016436474106, 0.01942165430534316}}}, {
       3, 2, {1, -1}, 0.25, 7.380000000000001, {1.3, 1.4}, {-1.4, 1.7}, {{
        0.9878048780487805, -0.10975609756097562`}, {-0.10975609756097562`, 
        0.012195121951219514`}}}, {
       3, 5, {1, 1}, 0.25, 7.7065, {1.3, 1.4}, {3.5100000000000002`, 3.08}, {{
        0.6337637059624992, 0.4817751248945695}, {0.4817751248945695, 
        0.36623629403750085`}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{0.4756242568370986,
         0.49940546967895355`}, {0.49940546967895355`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.3, 1.4}, {-0.7, -0.7000000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 2, {0, -1}, 0.25, 8.84, {1.3, 1.4}, {-1.5, 0.3999999999999999}, {{
        0.8868778280542985, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570136`}}}, {
       3, 5, {-1, -1}, 0.25, 9.5545, {1.3, 
        1.4}, {-0.48999999999999977`, -1.12}, {{0.33534983515620903`, 
        0.4721126170914228}, {0.4721126170914228, 0.6646501648437909}}}, {
       3, 1, {0, -1}, 0.295, 9.820563999999997, {1.3, 
        1.4}, {-1.3579999999999997`, -0.26}, {{0.7194051176694127, 
        0.44928987785222924`}, {0.44928987785222924`, 
        0.28059488233058716`}}}, {
       3, 4, {-1, -1}, 0.25, 12.140621, {1.3, 
        1.4}, {-1.0139999999999998`, -1.205}, {{0.44104794968889977`, 
        0.49651249305945716`}, {0.49651249305945716`, 0.5589520503111002}}}, {
       3, 2, {-1, -1}, 0.25, 13.700000000000001`, {1.3, 
        1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
        0.4868613138686131}, {0.4868613138686131, 0.38613138686131376`}}}, {
       3, 1, {-1, -1}, 0.8800000000000001, 16.368164, {1.3, 
        1.4}, {-1.4579999999999997`, -1.56}, {{0.46471699574857633`, 
        0.4987535559883197}, {0.4987535559883197, 0.5352830042514237}}}}, {{
       4, 3, {-1, 0}, 0.25, 0.6778210000000002, {0.9860000000000002, 0.895}, {
        1.2, 0.09999999999999987}, {{
        0.06756356029099109, -0.25099546930531774`}, {-0.25099546930531774`, 
        0.9324364397090088}}}, {
       4, 1, {1, 0}, 0.25, 1.011361, {0.9860000000000002, 0.895}, {
        0.6420000000000002, 1.84}, {{
        0.1170066870286673, -0.3214282536107285}, {-0.3214282536107285, 
        0.8829933129713328}}}, {
       4, 2, {-1, 0}, 0.25, 1.4606210000000006`, {0.9860000000000002, 
        0.895}, {0.30000000000000004`, -0.10000000000000009`}, {{
        0.32218898673920204`, 0.46731492974563554`}, {0.46731492974563554`, 
        0.6778110132607978}}}, {
       4, 2, {-1, 1}, 0.25, 1.5118209999999987`, {0.9860000000000002, 
        0.895}, {2.1999999999999997`, 0.7}, {{
        0.9748482128505953, -0.15658599794552408`}, {-0.15658599794552408`, 
        0.025151787149404626`}}}, {
       4, 5, {-1, 0}, 0.25, 1.656001, {0.9860000000000002, 0.895}, {
        1.4100000000000001`, -0.32000000000000006`}, {{
        0.10856032091768056`, -0.3110867686674102}, {-0.3110867686674102, 
        0.8914396790823195}}}, {
       4, 4, {1, 0}, 0.25, 1.7000000000000006`, {0.9860000000000002, 0.895}, {
        1.0860000000000003`, 2.1950000000000003`}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       4, 4, {-1, 0}, 0.25, 1.7000000000000002`, {0.9860000000000002, 
        0.895}, {0.8860000000000002, -0.405}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       4, 5, {1, -1}, 0.25, 1.9704009999999994`, {0.9860000000000002, 
        0.895}, {-0.2899999999999996, 1.48}, {{
        0.8263170796198337, -0.3788365921454567}, {-0.3788365921454567, 
        0.17368292038016628`}}}, {
       4, 5, {1, 0}, 0.25, 2.307601000000001, {0.9860000000000002, 0.895}, {
        1.6100000000000003`, 2.2800000000000002`}, {{0.1687362763320002, 
        0.37451881846125046`}, {0.37451881846125046`, 0.8312637236679998}}}, {
       4, 1, {0, 1}, 0.25, 2.317961, {0.9860000000000002, 0.895}, {2.442, 
        1.34}, {{0.914569313288705, 0.27952152775650674`}, {
        0.27952152775650674`, 0.085430686711295}}}, {
       4, 5, {0, -1}, 0.25, 2.404601, {0.9860000000000002, 
        0.895}, {-0.3899999999999997, 0.17999999999999994`}, {{
        0.7873971606931877, 0.40914896067996315`}, {0.40914896067996315`, 
        0.21260283930681229`}}}, {
       4, 1, {-1, 1}, 0.25, 2.5697609999999997`, {0.9860000000000002, 
        0.895}, {2.342, 0.040000000000000036`}, {{
        0.7155280199209186, -0.45116257893243766`}, {-0.45116257893243766`, 
        0.2844719800790813}}}, {
       4, 3, {0, -1}, 0.25, 2.6024210000000005`, {0.9860000000000002, 
        0.895}, {-0.5999999999999999, 0.5999999999999999}, {{
        0.9665599839534034, 0.17978259474543135`}, {0.17978259474543135`, 
        0.03344001604659664}}}, {
       4, 2, {1, 0}, 0.25, 2.812221, {0.9860000000000002, 0.895}, {0.5, 
        2.5}, {{0.08398913172186688, -0.2773715152543133}, \
{-0.2773715152543133, 0.916010868278133}}}, {
       4, 2, {0, 1}, 0.25, 2.947620999999999, {0.9860000000000002, 0.895}, {
        2.3, 2.}, {{0.5857591596748698, 0.49259046532780165`}, {
        0.49259046532780165`, 0.41424084032513014`}}}, {
       4, 1, {-1, 0}, 0.25, 3.034961, {0.9860000000000002, 0.895}, {
        0.4420000000000003, -0.76}, {{0.09750899599698312, 
        0.2966496109834689}, {0.2966496109834689, 0.9024910040030169}}}, {
       4, 3, {1, -1}, 0.25, 3.2182209999999998`, {0.9860000000000002, 
        0.895}, {-0.4999999999999998, 1.9}, {{
        0.6861542448452111, -0.46405451956220534`}, {-0.46405451956220534`, 
        0.3138457551547889}}}, {
       4, 3, {1, 0}, 0.25, 3.4294210000000005`, {0.9860000000000002, 0.895}, {
        1.4000000000000001`, 2.7}, {{0.04997811583937928, 
        0.21789975625623095`}, {0.21789975625623095`, 0.9500218841606207}}}, {
       4, 4, {1, -1}, 0.25, 3.4899999999999993`, {0.9860000000000002, 
        0.895}, {-0.8139999999999996, 1.395}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       4, 4, {-1, 1}, 0.25, 3.4899999999999993`, {0.9860000000000002, 
        0.895}, {2.786, 0.395}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       4, 4, {0, 1}, 0.25, 4.25, {0.9860000000000002, 0.895}, {2.886, 
        1.695}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       4, 4, {0, -1}, 0.25, 4.25, {0.9860000000000002, 
        0.895}, {-0.9139999999999997, 0.09499999999999997}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       4, 3, {-1, 1}, 0.25, 4.469020999999998, {0.9860000000000002, 0.895}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9999944059336485, 
        0.0023651712533907933`}, {0.0023651712533907933`, 
        5.594066351444521*^-6}}}, {
       4, 1, {1, -1}, 0.25, 5.0565609999999985`, {0.9860000000000002, 
        0.895}, {-1.2579999999999996`, 1.04}, {{
        0.9958420357234887, -0.06434808163097411}, {-0.06434808163097411, 
        0.0041579642765112515`}}}, {
       4, 3, {-1, -1}, 0.25, 5.386621000000001, {0.9860000000000002, 
        0.895}, {-0.7, -0.7000000000000002}, {{0.5277141272794206, 
        0.4992313363052645}, {0.4992313363052645, 0.47228587272057937`}}}, {
       4, 1, {1, 1}, 0.25, 5.4661610000000005`, {0.9860000000000002, 0.895}, {
        2.5420000000000003`, 2.64}, {{0.44293170288983436`, 
        0.49673253312516774`}, {0.49673253312516774`, 0.5570682971101656}}}, {
       4, 5, {-1, 1}, 0.25, 5.573200999999999, {0.9860000000000002, 0.895}, {
        3.31, 0.48}, {{
        0.9690976514215079, -0.173053152039555}, {-0.173053152039555, 
        0.030902348578491973`}}}, {
       4, 5, {-1, -1}, 0.25, 6.2388010000000005`, {0.9860000000000002, 
        0.895}, {-0.48999999999999977`, -1.12}, {{0.34919786670547753`, 
        0.4767165998723152}, {0.4767165998723152, 0.6508021332945225}}}, {
       4, 2, {1, -1}, 0.25, 6.3410210000000005`, {0.9860000000000002, 
        0.895}, {-1.4, 1.7}, {{
        0.8978043125862539, -0.30290547847105376`}, {-0.30290547847105376`, 
        0.10219568741374611`}}}, {
       4, 2, {0, -1}, 0.25, 6.425221000000001, {0.9860000000000002, 
        0.895}, {-1.5, 0.3999999999999999}, {{0.961865124950566, 
        0.19152181691493572`}, {0.19152181691493572`, 
        0.03813487504943411}}}, {
       4, 3, {0, 1}, 0.25, 6.604821, {0.9860000000000002, 0.895}, {3.2, 
        2.2}, {{0.7421542536883285, 0.4374486454666977}, {0.4374486454666977, 
        0.25784574631167145`}}}, {
       4, 5, {0, 1}, 0.25, 6.659001, {0.9860000000000002, 0.895}, {3.41, 
        1.78}, {{0.8823810057995185, 0.32215643157284396`}, {
        0.32215643157284396`, 0.11761899420048143`}}}, {
       4, 1, {0, -1}, 0.25, 6.828360999999999, {0.9860000000000002, 
        0.895}, {-1.3579999999999997`, -0.26}, {{0.8046346700181787, 
        0.3964816740063978}, {0.3964816740063978, 0.19536532998182143`}}}, {
       4, 2, {1, 1}, 0.25, 7.783420999999998, {0.9860000000000002, 0.895}, {
        2.4, 3.3}, {{0.2568788197374907, 0.4369119953809514}, {
        0.4369119953809514, 0.7431211802625093}}}, {
       4, 4, {1, 1}, 0.25, 8.41, {0.9860000000000002, 0.895}, {2.986, 
        2.995}, {{0.4756242568370987, 0.49940546967895366`}, {
        0.49940546967895366`, 0.5243757431629014}}}, {
       4, 4, {-1, -1}, 0.25, 8.41, {0.9860000000000002, 
        0.895}, {-1.0139999999999998`, -1.205}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       4, 2, {-1, -1}, 0.25, 9.909421000000002, {0.9860000000000002, 
        0.895}, {-1.6, -0.9000000000000001}, {{0.6748523450562853, 
        0.4684299920247611}, {0.4684299920247611, 0.32514765494371467`}}}, {
       4, 5, {1, 1}, 0.25, 11.144801000000001`, {0.9860000000000002, 0.895}, {
        3.5100000000000002`, 3.08}, {{0.5716186408353096, 
        0.4948441878863516}, {0.4948441878863516, 0.4283813591646903}}}, {
       4, 1, {-1, -1}, 0.25, 12.000160999999999`, {0.9860000000000002, 
        0.895}, {-1.4579999999999997`, -1.56}, {{0.49775465512504374`, 
        0.49999495840097485`}, {0.49999495840097485`, 0.5022453448749563}}}, {
       4, 3, {1, 1}, 0.25, 12.140620999999998`, {0.9860000000000002, 0.895}, {
        3.3, 3.5}, {{0.4410479496888997, 0.4965124930594572}, {
        0.4965124930594572, 0.5589520503111003}}}}, {{
       5, 2, {-1, 1}, 0.25, 0.5544999999999993, {1.5100000000000002`, 0.98}, {
        2.1999999999999997`, 0.7}, {{
        0.8586113615870151, -0.3484220018034267}, {-0.3484220018034267, 
        0.14138863841298488`}}}, {
       5, 3, {-1, 0}, 0.25, 0.8705000000000004, {1.5100000000000002`, 0.98}, {
        1.2, 0.09999999999999987}, {{0.11039632395175202`, 
        0.3133831131533603}, {0.3133831131533603, 0.889603676048248}}}, {
       5, 1, {0, 1}, 0.25, 0.9982239999999999, {1.5100000000000002`, 0.98}, {
        2.442, 1.34}, {{0.8701694208915033, 0.3361169436919971}, {
        0.3361169436919971, 0.12983057910849677`}}}, {
       5, 1, {1, 0}, 0.25, 1.4930240000000001`, {1.5100000000000002`, 0.98}, {
        0.6420000000000002, 1.84}, {{
        0.5046295304027263, -0.49997856698887627`}, {-0.49997856698887627`, 
        0.49537046959727377`}}}, {
       5, 1, {-1, 1}, 0.25, 1.5758239999999997`, {1.5100000000000002`, 
        0.98}, {2.342, 0.040000000000000036`}, {{
        0.4392774827645726, -0.49629907908497395`}, {-0.49629907908497395`, 
        0.5607225172354274}}}, {
       5, 4, {1, 0}, 0.25, 1.6560010000000007`, {1.5100000000000002`, 0.98}, {
        1.0860000000000003`, 2.1950000000000003`}, {{
        0.10856032091768052`, -0.31108676866741014`}, {-0.31108676866741014`, 
        0.8914396790823195}}}, {
       5, 2, {0, 1}, 0.25, 1.6644999999999994`, {1.5100000000000002`, 0.98}, {
        2.3, 2.}, {{0.37494743166115924`, 0.4841093421447882}, {
        0.4841093421447882, 0.6250525683388407}}}, {
       5, 5, {1, 0}, 0.25, 1.7000000000000006`, {1.5100000000000002`, 0.98}, {
        1.6100000000000003`, 2.2800000000000002`}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       5, 5, {-1, 0}, 0.25, 1.7000000000000002`, {1.5100000000000002`, 
        0.98}, {1.4100000000000001`, -0.32000000000000006`}, {{
        0.00588235294117648, 0.07647058823529418}, {0.07647058823529418, 
        0.9941176470588234}}}, {
       5, 4, {-1, 1}, 0.25, 1.9704009999999994`, {1.5100000000000002`, 
        0.98}, {2.786, 0.395}, {{
        0.8263170796198337, -0.3788365921454567}, {-0.3788365921454567, 
        0.17368292038016628`}}}, {
       5, 4, {-1, 0}, 0.25, 2.307601, {1.5100000000000002`, 0.98}, {
        0.8860000000000002, -0.405}, {{0.1687362763320002, 
        0.37451881846125046`}, {0.37451881846125046`, 0.8312637236679998}}}, {
       5, 4, {0, 1}, 0.25, 2.404601, {1.5100000000000002`, 0.98}, {2.886, 
        1.695}, {{0.7873971606931877, 0.40914896067996315`}, {
        0.40914896067996315`, 0.21260283930681229`}}}, {
       5, 3, {-1, 1}, 0.25, 2.534499999999998, {1.5100000000000002`, 0.98}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9974748471098835, -0.05018741369106339}, {-0.05018741369106339, 
        0.0025251528901164}}}, {
       5, 2, {-1, 0}, 0.25, 2.6305000000000005`, {1.5100000000000002`, 
        0.98}, {0.30000000000000004`, -0.10000000000000009`}, {{
        0.5565862003421403, 0.49678768295000947`}, {0.49678768295000947`, 
        0.44341379965785965`}}}, {
       5, 3, {1, 0}, 0.25, 2.970500000000001, {1.5100000000000002`, 0.98}, {
        1.4000000000000001`, 2.7}, {{
        0.004073388318464911, -0.06369298097963311}, {-0.06369298097963311, 
        0.9959266116815351}}}, {
       5, 2, {1, 0}, 0.25, 3.3305000000000007`, {1.5100000000000002`, 0.98}, {
        0.5, 2.5}, {{
        0.3062903467947756, -0.460951809037682}, {-0.460951809037682, 
        0.6937096532052243}}}, {
       5, 5, {1, -1}, 0.25, 3.4899999999999993`, {1.5100000000000002`, 
        0.98}, {-0.2899999999999996, 1.48}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       5, 5, {-1, 1}, 0.25, 3.4899999999999993`, {1.5100000000000002`, 
        0.98}, {3.31, 0.48}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       5, 1, {1, 1}, 0.25, 3.8206240000000005`, {1.5100000000000002`, 0.98}, {
        2.5420000000000003`, 2.64}, {{0.27875655913798375`, 
        0.4483874885359041}, {0.4483874885359041, 0.7212434408620163}}}, {
       5, 1, {-1, 0}, 0.25, 4.168224, {1.5100000000000002`, 0.98}, {
        0.4420000000000003, -0.76}, {{0.2736474815173081, 
        0.44583016651696267`}, {0.44583016651696267`, 0.7263525184826919}}}, {
       5, 5, {0, 1}, 0.25, 4.25, {1.5100000000000002`, 0.98}, {3.41, 1.78}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       5, 5, {0, -1}, 0.25, 4.25, {1.5100000000000002`, 
        0.98}, {-0.3899999999999997, 0.17999999999999994`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       5, 3, {0, 1}, 0.25, 4.3445, {1.5100000000000002`, 0.98}, {3.2, 2.2}, {{
        0.6574059155253769, 0.47457705144435497`}, {0.47457705144435497`, 
        0.3425940844746232}}}, {
       5, 3, {0, -1}, 0.25, 4.596500000000002, {1.5100000000000002`, 
        0.98}, {-0.5999999999999999, 0.5999999999999999}, {{
        0.9685847927771131, 0.17443707168497774`}, {0.17443707168497774`, 
        0.03141520722288699}}}, {
       5, 3, {1, -1}, 0.25, 4.886499999999999, {1.5100000000000002`, 
        0.98}, {-0.4999999999999998, 1.9}, {{
        0.8267880896347077, -0.37843036938504043`}, {-0.37843036938504043`, 
        0.17321191036529213`}}}, {
       5, 4, {1, -1}, 0.25, 5.573200999999999, {1.5100000000000002`, 
        0.98}, {-0.8139999999999996, 1.395}, {{
        0.9690976514215079, -0.173053152039555}, {-0.173053152039555, 
        0.030902348578491973`}}}, {
       5, 2, {1, 1}, 0.25, 6.174499999999999, {1.5100000000000002`, 0.98}, {
        2.4, 3.3}, {{0.12828569114908084`, 0.33440764434367143`}, {
        0.33440764434367143`, 0.8717143088509192}}}, {
       5, 4, {1, 1}, 0.25, 6.2388010000000005`, {1.5100000000000002`, 0.98}, {
        2.986, 2.995}, {{0.34919786670547753`, 0.4767165998723152}, {
        0.4767165998723152, 0.6508021332945225}}}, {
       5, 4, {0, -1}, 0.25, 6.659001, {1.5100000000000002`, 
        0.98}, {-0.9139999999999997, 0.09499999999999997}, {{
        0.8823810057995185, 0.32215643157284396`}, {0.32215643157284396`, 
        0.11761899420048143`}}}, {
       5, 1, {1, -1}, 0.25, 7.665423999999999, {1.5100000000000002`, 
        0.98}, {-1.2579999999999996`, 1.04}, {{
        0.9995303586598732, -0.02166612049118224}, {-0.02166612049118224, 
        0.00046964134012678315`}}}, {
       5, 3, {-1, -1}, 0.25, 7.7065, {1.5100000000000002`, 
        0.98}, {-0.7, -0.7000000000000002}, {{0.6337637059624992, 
        0.4817751248945695}, {0.4817751248945695, 0.36623629403750085`}}}, {
       5, 5, {1, 1}, 0.25, 8.41, {1.5100000000000002`, 0.98}, {
        3.5100000000000002`, 3.08}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       5, 5, {-1, -1}, 0.25, 8.41, {1.5100000000000002`, 
        0.98}, {-0.48999999999999977`, -1.12}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       5, 2, {1, -1}, 0.25, 8.986500000000001, {1.5100000000000002`, 
        0.98}, {-1.4, 1.7}, {{
        0.942313470205308, -0.2331497245868803}, {-0.2331497245868803, 
        0.05768652979469203}}}, {
       5, 2, {0, -1}, 0.25, 9.396500000000001, {1.5100000000000002`, 
        0.98}, {-1.5, 0.3999999999999999}, {{0.9641994359601981, 
        0.18579258234448998`}, {0.18579258234448998`, 
        0.03580056403980206}}}, {
       5, 3, {1, 1}, 0.25, 9.554499999999999, {1.5100000000000002`, 0.98}, {
        3.3, 3.5}, {{0.335349835156209, 0.47211261709142277`}, {
        0.47211261709142277`, 0.6646501648437909}}}, {
       5, 1, {0, -1}, 0.25, 9.763023999999998, {1.5100000000000002`, 
        0.98}, {-1.3579999999999997`, -0.26}, {{0.842507813152974, 
        0.3642641869977991}, {0.3642641869977991, 0.15749218684702612`}}}, {
       5, 4, {-1, -1}, 0.25, 11.144801000000001`, {1.5100000000000002`, 
        0.98}, {-1.0139999999999998`, -1.205}, {{0.5716186408353096, 
        0.4948441878863516}, {0.4948441878863516, 0.4283813591646903}}}, {
       5, 2, {-1, -1}, 0.25, 13.206500000000002`, {1.5100000000000002`, 
        0.98}, {-1.6, -0.9000000000000001}, {{0.732374209669481, 
        0.44272138719569903`}, {0.44272138719569903`, 
        0.26762579033051903`}}}, {
       5, 1, {-1, -1}, 0.25, 15.260624, {1.5100000000000002`, 
        0.98}, {-1.4579999999999997`, -1.56}, {{0.5772387813237518, 
        0.4939981484374426}, {0.4939981484374426, 
        0.42276121867624805`}}}}}}, $CellContext`dynamics$$ = {{
      Complex[1.725417886256199, 0.00008599419479007807], {Complex[
      0.008087267002676809, 0.0002860908122797923], 
      Complex[-0.03976790365887426, 0.023359133728887475`], Complex[
      0.9415019349294188, 0.], Complex[
      0.3265151541612302, -0.0014869544019261507`], 
      Complex[-0.02684565766810167, -0.0023068818034690437`], 
      Complex[-0.05051173874363913, 0.023484179123622575`], 
      Complex[-0.001713886208127926, 0.0010420274338469944`], 
      Complex[-0.01628482244759497, 0.013341185786561769`], 
      Complex[-0.00620802192959732, -0.002232005084170452], 
      Complex[-0.01576539026886631, 0.014103201348192583`]}}, {
      Complex[1.276580361621935, -0.0002559222108917334], {
      Complex[-0.12340095851996638`, 0.07486227017783313], 
      Complex[-0.10312783167108672`, 0.010157865846998702`], 
      Complex[-0.3249032895135371, -0.0035619183471705673`], Complex[
      0.9149858418691302, 0.], Complex[-0.1120210307039933, 
      0.09586703652206931], 
      Complex[-0.025379170749727335`, -0.0076179648442708785`], 
      Complex[-0.022683723464338622`, 0.028959156385550237`], 
      Complex[-0.0183197567591391, -0.006817598787993404], 
      Complex[-0.020188675148413982`, 0.030307323518963307`], 
      Complex[-0.012081975658327556`, -0.0025851344183258117`]}}, {
      Complex[1.1048829222717134`, -0.0036892662477015694`], {
      Complex[-0.24955751876740798`, 0.015789441268854842`], 
      Complex[-0.20324894783594682`, -0.018934607398064032`], Complex[
      0.007774751176765321, -0.022901384590310277`], Complex[
      0.11362894789718687`, 0.0762647807374762], Complex[0.7879623634580478, 
      0.], Complex[0.49993315445248077`, -0.05900113908459578], 
      Complex[-0.013633212425997531`, -0.0013218424853351923`], 
      Complex[-0.036622999365317224`, -0.002404649555063431], Complex[
      0.002966457888180133, 0.0054820299689997635`], 
      Complex[-0.02311428204753838, 0.009141617664463248]}}, {
      Complex[0.9718922139840523, -0.0015046021460479301`], {Complex[
      0.6810883763344637, 0.], Complex[
      0.24757632915191646`, -0.024813331803800506`], 
      Complex[-0.05516157351150605, -0.023961158158198197`], Complex[
      0.1888311212054762, 0.09218752408752148], Complex[
      0.5982137295377313, -0.14751859954177746`], 
      Complex[-0.036787710537870374`, 0.18223975980731033`], 
      Complex[-0.02466800476141011, -0.003727614064213928], 
      Complex[-0.08824070927628233, -0.0016322618309152076`], 
      Complex[-0.027982452470690963`, -0.00569812577005914], 
      Complex[-0.052111123795148526`, 0.01753847088229966]}}, {
      Complex[0.8121016430351048, 0.0028678076162449296`], {Complex[
      0.057037182025657884`, 0.030599679013954766`], Complex[
      0.1376743197242836, 0.001567900687281628], Complex[
      0.034775089262644575`, 0.030134814821482732`], Complex[
      0.004552714584800842, -0.016209511834492995`], 
      Complex[-0.4142489916361312, -0.017462968456447694`], Complex[
      0.8767471112090763, 0.], Complex[-0.13353954576842636`, 
      0.009095920421798662], Complex[-0.07356120321502006, 
      0.012554587627465535`], Complex[-0.06843972615871821, 
      0.03789977784219271], Complex[-0.06518511918471953, 
      0.0025041508024433775`]}}, {
      Complex[0.7035262135945748, 0.003641407366532491], {
      Complex[-0.4122011258792934, -0.026827972458230626`], Complex[
      0.7885814823090918, 0.], Complex[0.010124715120345427`, 
      0.017238113535306458`], Complex[
      0.059970245230781566`, -0.016758720634817363`], Complex[
      0.2960010866868917, -0.14331488368306997`], 
      Complex[-0.19196621561822352`, 0.0023286625244193365`], 
      Complex[-0.1898591813969942, 0.05431922297066654], 
      Complex[-0.09723529776444273, 0.020411811957558756`], 
      Complex[-0.07469169026689204, 0.05722673038085537], Complex[
      0.002708265426580831, 0.022159113449270244`]}}, {
      Complex[0.5967422621412622, 0.00027393774533448757`], {
      Complex[-0.04669117519602147, -0.0011120621812039898`], Complex[
      0.17676033549386494`, 0.0256671085565301], Complex[
      0.0017296210678874803`, 0.005928867575074905], Complex[
      0.03282625465871533, 0.01785159689337328], Complex[
      0.03165492757043601, -0.02012187743444402], Complex[
      0.07968148406088518, -0.0069967525929512525`], Complex[
      0.7831878450360353, 0.], Complex[
      0.37183609040365107`, -0.006848478941564165], 
      Complex[-0.36279499582724367`, 0.11974319520855778`], 
      Complex[-0.2315485769428043, 0.07355754020978957]}}, {
      Complex[0.5260179695408677, 0.0007709944729640825], {
      Complex[-0.0258819141052612, -0.03979278479661433], Complex[
      0.19122428419353757`, 0.11022395077928471`], Complex[
      0.0023657357319631887`, -0.0033321756936509268`], Complex[
      0.050655177445400185`, 0.049721876194630484`], Complex[
      0.013782065133411913`, -0.0066435168944164805`], Complex[
      0.11312790395854647`, 0.02227556104945915], Complex[0.4149640420820687, 
      0.13185325273363543`], 
      Complex[-0.04521012174415401, -0.04210937955373754], Complex[
      0.8378905565501176, 0.], Complex[0.18693641564653155`, 
      0.006640628135020407]}}, {
      Complex[0.41577001854236334`, 0.00029726360915333967`], {Complex[
      0.03711006943561761, -0.00010166261693062006`], Complex[
      0.052223023551239506`, -0.017218427598220308`], Complex[
      0.007742087475824487, 0.009651546266226663], Complex[
      0.03521984570440577, -0.005051673359623135], Complex[
      0.035811506192877485`, -0.00884101284844876], Complex[
      0.03961224480367698, -0.00972640843489361], 
      Complex[-0.3560680240766953, -0.037920087761737095`], Complex[
      0.8752524536583498, 0.], Complex[
      0.24065010529083194`, -0.059145531197640586`], 
      Complex[-0.16832721274046164`, -0.08439051062879803]}}, {
      Complex[0.37701069452956404`, 0.0003539699144610897], {Complex[
      0.04895618714265457, 0.015815149698603613`], Complex[
      0.04199116078303075, 0.0028093129693751856`], Complex[
      0.014660856467852073`, 0.01810696237263786], Complex[
      0.030761925095759243`, 0.004952600517125816], Complex[
      0.02066236763701513, 0.013477501575232573`], Complex[
      0.0846144127788554, -0.007371150571228708], Complex[0.02961336121361867,
       0.05641461032318795], Complex[
      0.24371911593075468`, -0.06629218543270203], 
      Complex[-0.24808760974699237`, -0.03666156346534538], Complex[
      0.9249330427602608, 0.]}}}, $CellContext`dynPlot$$ = Show[{
      Table[
       ListPlot[
        Part[$CellContext`points$59721, $CellContext`k][$CellContext`nu$59721 \
#], PlotRange -> {{-($CellContext`glConstWindowHalfWidth/
            2), $CellContext`glConstWindowHalfWidth}, \
{-($CellContext`glConstWindowHalfWidth/
            2), $CellContext`glConstWindowHalfWidth}}, 
        ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
        Directive[
          PointSize[
           Sqrt[
           Part[$CellContext`mScalarArray$59721, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
          $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses$59721}], 
      Graphics[{$CellContext`lines$59721}]}]& , $CellContext`dynTab$$ = 
    1, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJx8fXlcjdv3v5ApQ4YMmSJzUqYMxcmcEpmHMkWoDBlzjWWeM5ThhgyZRSoi
w8k8ZShKOtU5dU7noBByUeR3vx9r7cezlvvzz3291uu5++xnDe/3eu+evXcj
z1lDvEqWKFHiQvUSJUr9+98h9Q9euB9hHD9wt+rrd98i5eWQyyc7OuUp5PZc
ZWGt2MQE61xhLwH/mq52WD17pGQf8Ot5ReqMmLk2HnScIoVhTVqLzsFo/6zE
351Yx0HbPTmX2HOVeT92qr26vBV2/N3Hr0oNrPdZsuPv7kv+2al0Nh2nSDHn
tevL0StyFfj/4+/uS3L93H1ZHrHnKtulmr9qZCc9j/96PV7yQ+kg2fF3rcnz
+Ls4/rBf81Hg7/rBfOT2XCXOH+04Xgq8L9rxdz+Bf8j4ivEyfxo74u/K/Y/2
XKVKHi/H/4ivI/7uD3k+4PiKP+dPkdLdrO72xQY9y6vbMU87PN+hZ3nVw+f2
oRYb9SyvJjatujLzHR2nSOHpMNTjWgsDy6vObfQlCsU4Ul6ZjWs9ufY+A8ur
tNON+ybkGVhezbvnX71cJh2nSNGr3jTHpTv1LK+Ob3NPtOxgYHk1MMcua9pG
PcurkIq91pr66lleDSHP4+/i+DSvXGA+NK+WwPxpXiXC+9K8ag3+oXnlIPOn
lFdy/0t55S6Pl8grEl+RVyQfRF79OX+KlL5Nai3K3cTzaq/fzuVNzHNYXh0O
6pezv0IOy6vgpXNcxjrxvDqlGTVtvjuLu3LE/c12Z9/lsLwal1JqtOVJPcur
zlte/DX+ip7lVbcxsWcM83leXS0w1IntyfOq/PiKi1cHUHuusmzBscQ9I3JY
XrmfPKbb+ljH8sqYPI+/i+PTvLoO86F55Qjzp3llC+9L82os+Ifm1UiZP6W8
kvtfyqvN8niJvCLxFXlF8kHk1Z/zp0j5z5IKFTxe6lherQnZ0XHsdS3Lq/eB
pzqefahleZXV2TnXyoiOU6RImHTXP6qFjuXV2R5TWz63pPZc5beCbuHHZutY
XgU4WD18u1XH8mrnXJcjS+3Z+IrgLMfSVld1LK8m/DycMNae2nOVWdV+mlld
1rK8alexwuLEK1qWV/R5/F0cn+bVTpgPzasQmD/NqxXwvjSvvoJ/aF6dlvlT
yiu5/6W8ypTHS+QVia/IqwB5Poi8+nP+FClH2aSblf0tf/B3p2we7x/ek+dV
0rP4o9bmPK/svO6P7xpJxylSPJgUNqhDuJbl1U2LZq8trlN7rnK0UW+rly+0
LK8mO7Yf3iRZy/Kq0dGF9tuvsvEVZivWnDoVz+Ku7Ld4aothEdSeq9yl2Pqy
TgeeVzcOpxiPa8Xzag95Hn8Xx6d5VQvmQ/PKAuZP88oH3pfm1TDwD82rGzJ/
Snkl97+UVzbyeIm8IvEVeTVVng8ir/6cP0XK+DevjqZM4Hn1Lj3xnmuohvdX
7U8U1OqtYXlVR3O7dPWf2SyvzkcdvTfFiufV3Znng1w12Syvhmxb+f1rQ55X
5hMWjh9syGZ5dTO2c9FXXzrOv/m8xy7uZqtsllftJ+zrtziK2nOVh279KP9s
qobl1d5/tt2Z7aJheUWfx9/F8WlePYT50Ly6C/OneWUG70vzagT4h+bVQ5k/
pbyS+1/Kq5ryeIm8IvEVefVeng8ir/6cP0XKr9+WPovsnMXy6rmmd3F8VZ5X
hQHmmREt1CyvrmZmXQ0YpGF51TMq4fnumRqWVyFm5d2M71B7rnLuDMfPoT4a
llcLJu8ac6OPhuWVx5yR/f9qz8ZXhNn1blOcxuKunFehZ8kUZ2rPVfq67E/Y
0Zzn1Y7mHbfPaJDJ8mo6eR5/F8eneXUQ5kPzyh3mT/NqPrwvzat54B+aVztl
/pTySu5/Ka/i5PESeUXiK/KK5IPIqz/nT5Fye3L5Vo+r0HzIVRq2Xiz6+iSd
5dWMoc2CxrVKZ3lVIePWuj0dM1letTYN+hL5TybLq2MOfav3ilKzvNod03bm
ik5qllczJp3de6mimuVVpQq+Ks0tNr7CcZBWu7hAzfKqlm/FxfVDqD1XWa72
wN4tIzJYXlW8EJDZeKCK5ZUJeR5/F8enedUd5kPzyhTmT/NqCrwvzatQ8A/N
qwiZP6W8kvtfyquK8niJvCLxFXmVLc8HkVd/zp9/9f7DI2m23TNYXo00C/O7
+CmN5VUFe4v536qrWF7FrG2h3DBBxfLqTZDbqcAAFcurGRsy55Qelc7ySh22
dP6ivSqWVzNrLyvu2kTF8upj/tq89uXY+IpS6SsaeiWns7zS3NZd95+oYnl1
cHiXpF0jeP4cInYcH8eh+VMafpfmzyeYJ80fb3gvmj/p4AeaP94yv0n5I/ez
lD8R8riI/CFxFPnjJo+7yJ8/50mRcm/B+ikVm9G45yrPnnx3tP3tVJY/NW/G
v3tQ7wnLn7+MkozbfE5i+VPZ2ud4048vWP4MqZAVbfY4jeXP+Q0a0+2PXrL8
KVaPq9Ou+UuWP91fZbdpfT2V5c/j2h/cNnxPY/nzl2lIzIqVL1n+rNqf/+bq
2kcsfzYSO46P49D8SYDfpfljDfOk+VNS8+u9aP5Egh9o/sj9JuWP3M9S/iyR
x0XkD4mjyJ8L8riL/ME8Of4tYbnp15LxfZrGj15a/EV5d9bH2MBVeYri5K9O
I3uWiLePCo/7sbVA+ax/y9uP4vMUxyf3b+JQp0jZTrG+7jLLD0q15YSkOj/E
+rDSDeaJ6944vsv/7A+VIy2fhb57kivG/zVPlXL9de8oXydp/C7/+12dMm58
ifuv4qXxB/zH+OifBVVtzKIjpfFFvVc4NmpPe2l8tM8q3XDv8gvS+APJ+OG/
nhfxWvC1bsj3D7mK77/GF/7c/KKob1zlPMXRX/MR9vALqq/+VnlinhivKuNm
dkovluaJ9m92B173PSrNE+3aKkmh51zFOjn7O4LT/+zJYp4DJ9/PLx6ap3D9
nz1H2Is/98671jJPUfS/380X9rNr4w3Lfv6LNyQ/cR2+RMr/nlfaQNxrR5du
urfCW8XIX+NDvAqUvafN8UlS5Sk8fs1H2QvyanZ9zdlyEfh3iltXBkCe498X
5HEsUh4Bv8njWKTcAn6Wx7FIuRDiMozg0kQyf4zvsoLYrOCLeWL+aK+Sm6q9
2Umav+CjrG85Hy/kivmjHf/OgvPv/yvPFb1Gv21bc5EUX+dfea6YaL0/M25v
rph/p195rlhuNGjjeKU0f2eoX/x7Co6PdX2/393w8G55pI5yFXGN0pLrNJT8
g/bTRXllgkqwOhLjo396QJ0eC18fM7aPFF8nqNOACVXqhoVI/ukMdTq6Xkig
JkfyjwvxD46Pedu6cXYX437S+Ghf7x7f9N1uaXy064P3V33xRhof7fj3LPRP
71/5pghJO9z61FTJP11/5aeiZ5sZtg3sJf+0/ZXPivxAuw7bKjMcYP7Hutgw
/ktw/CCWnwrrzjWM+puw/FQ8NW07I/EOy0/xdz2sX6yvwL1TdTb9c0X9dob6
SpwQo+nmkSvqtyfUl0VTowyXWVL9ukD+49/p5PlfpIyEepfnf5HyJ+CDPP//
fQ/AE3n+S/Urx59c5eZaNZaYT8wl+JOrfDWikmn1TbkEf3KVPXeWCTeJpfgj
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
i7Y3icxhOkV8J090So+Qjc9zHfVMpzjvVdgsvJ3DdMrQw5/Wl3bOYToFv7en
OqXK8vxvVT31TKfMq79u45lpeqZTUi83rO8yi+sU6n+si8gjV573Gc7yUxHj
Y9Gj5iCuUy7ZrIrQO3GdgvsOqE7pWBBreXBbDtMpkwvuzj+ekMN0yvaCF3fP
luU6BfcRUJ1yE+qd6hTEB6pT9gKekD5Q1C/VKSGPcp1m7M9hOsXymE28oz6H
6ZRzAXM71WjDdYojyU/UKX1mtv9etSLXKQNWnO3vcCiH6ZRhO612TelM8yfO
QezXIDrlLMyH6pRGMH+qU3bA+8rxTdr3QXXKNqgXqlPqQn1RnXIE6pHqFFuC
/1gXblAvVKf0gfqiOqUr1CPVKTg+1Sl+oQmNghZynXI4PSvYbrGe6ZSU+l/K
Zi5l+C/2v1Cd4lalbVSrIVynaFsuct4/keuUBb1vZledzfJTjE91igrqneqU
BYAPVKdUBTyhOsUffpfqlByYJ9UpQ+G9qE7BOqU6pTrgNtUpesB5qlPigBeo
Ttn653xT/Ee+Kf4j3xxovonvFYEfqU5pC3xKdcpd4F+qU8aSvgt1Slnn7u/G
hemZTsk0PuI5boWe6ZQL101ejPXSM52yGfooqlPeQN9FdUo/6NOoTsmEfobq
lGjof6hOWQf9EtUp9H0xHy4DX1CdcgH4heoU5COqU7B/pjqlBPTbVKdgf051
CvbJVKdgX011SiXow6lOQb1Adcpk0BdUp6AeoTrly5hd+TOVOqZTvnZu8iLw
iI7plG81z10N3qhjOgX3eVGdcq6B22Drz1qmU+ZdLph+qoGO6RS7UXvWtXTS
MZ1Cx8c6nWTdPXHWWy3TKY63X01fUUfHdEq9sTvKhfTRMZ2C41Odssx0ayO7
wTqmUwarL9bZvUzHdIrlmayqhad0TKfs8DNRFX/XMp3SabxvwMA2OqZTVK4P
m+4fr2M6BffNUZ3y6cnzSYs76phOWXPAuGi3jY7plDqz7bZfaKljOgX3nVGd
ssN/ZBuzyTqmU6wL/S6uGKFjOuXukg098510TKfgfjqqU5qA36hOGQJ+pjol
EOJCdcpZMn+M71yHMwHleuuYTnm7ssFY75o6plOmPtzS5cErLdMpuE+Q6pTR
y3YkHjJomU65uWjxjJ2ldEyntPafVH5DQx3TKbj/keqULWsfjI6vomM6xT7F
+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
/nrRxTEaplM6HDZafncI5XHpfFqqU9BvVKfcAT9TnYJxoTolhMwf4/tBVyv3
5WgN0ymzPN5ravXXMJ3y9tmdlOGdNUyn4Dm6VKe83qMwUSxUM53yMmpy56d3
1Uyn6HJuRUWaaJhOwfN+qU450kupWeZE9X6uYvPxvaWW9tAwnTK/0qJmi7uy
OhLjU53SvkGdWLvuGqZT8l/8Xf2UnYbplDPb6vk1tNEwnSLOGSY6ZecEv7zu
+WqmUxy/nrP8NkzNdMqboE9joi9lMp2C5xVTndLf8/2Hp+M1TKcMqlatSvnB
GqZTRtzo0LpHT4YDzP9YF6N3tLKKWk9xpkjhN29d4MNwlp+KtcP1L3RKlp/i
3GaqUzrfKes1cxjXKWV6zP7hFKhhOuXZ5bQQyzMaplPwHGaqU7De2d9TAB+o
TukGeEL6QFG/VKc0D0mw2tyK6xRtZuGGNdYUf3KVYS1avlluS/FHOi+a6pRZ
87cOSXyuZjqlWZk51SJ7qplOydg5NGlLJM2fOAdx3jXRKQdgPlSn6GD+VKe0
gPeV45t0bjbVKRFQL1SnYH1RndIO6pHqlPkE/7EuXkG9UJ3SHeqL6pRgqEeq
U3B8qlM8a2/3d+uiYTpl2rWEI80VGv7d1+Syz4t7M/wX54dTnRJ8qpdlwQWW
n4r1Fr1qv9nO8lOxPKRnJc1Mlp9ifKpThkO9U52C+EB1ihPgCdUp+LtUp2yA
eVKdEgLvRXUK1inVKXMBt6lO2Qg4T3XKIeAFqlPO/DnfFP+Rb4r/yDcHmm9i
fQz4keoUP+BTqlM+Av9SnTKP9F2oU8qU8vnU1knDdMqugw6bDjprmE5p4Vil
aVVXDdMp/tBHUZ3yEfouqlOwT6M6BfsZqlMKoP+hOiUG+iWqU+j7Yj6sB76g
OmU28AvVKWOAj9h3X9A/U53yAfptqlMWQH9OdcoA6JOpTsG+muoU7MOpTkG9
QHUK6gv29xTQI1SnBFqHpoXkqJlOyTzbeGLQKTXTKfbtThrWzVYznYLn5FOd
ctHq9Zpjb9OZTilV+vSy/MgMplNc02cu6DIvk+kUOj7W6bOXI0apvDOYTlE2
/hxztVQm0ymnfHdUPbAvk+kUHJ/qFJfdf03a80jNdMrrT6ej379SM51ys3m+
kWVJDdMpM3atG/I5O53plBmqN2abQjOYTpnR0PVl42GZTKfgvQNUpyxRm2dN
2atmOiV7aMt+kYfVTKf0u9cp4ttJNdMpeG4/1SmdPae1fT1QzXRKapWwgkFT
1Eyn+F9Njr2wVM10Ct5HwP6eAn6jOiUH/Ex1Sl+IC9Upx8j8Mb7zHl20zHue
yXSKm17xcvicTKZTWv+8s0VZJZPpFLyXgeoUs8BOjX8+TWc65eoZp/Nh/hlM
p3ilj3ZybJDJdAreH0F1isu0mWN9R2cynbLpU6123ZZmMp2SsOx6mSoHWR2J
8alOCTbdtSY5JpPplMtXl/l98MhkOiXbZ8qYSsaZTKeIeyuITjG7aPm2ev1M
plOuVtzdbaZ1BtMpXhMrbrnXLZ3pFLz/guqU8Mpr8h3eZDKdUq/S0tf3MjKZ
TgkxmZc9LJHhAPM/1sWHhuFRlnZqplMu2FyasXM+y0/FYsXjFuXPs/wU94BQ
nZLs1T7vR/dMplMORdcOTnqayXSKn1Gx/TFPNdMpeK8H1Sm9oN6pTlEDPlCd
shjwhPSBon6pTtkwzKxVrU8ZTKdU3JZexbhLJtMpWx4d/vxxWSbTKaYkP1Gn
VJpv69HWkMF0SiXN5/TA8hlMp1RyuTw2yYrmT5yDuD+F6JTNMB+qU3D+VKds
gveV45t0DwvVKWqoF6pTYqG+qE7ZAvVIdcoUgv9YF55QL1SnXIT6ojqlCtQj
1SleMD7VKYM8h5bK/5rJdMr2OHurn63VTKc8r9ZkaOWJDP/FfTRUp9jtjOgf
ns7yU9E6w/9swi2Wn4rGTXqafT7N8lOMT3XKLqh3qlMaAD5QnXIE8ITqlEbw
u1SnWME8qU7pAO9FdQrWKdUpTwC3qU7ZAjhPdYor8ALVKdl/zjfFpT/nmyLo
z/nmQPMN89wG+JHqlKHAp1Sn+AP/Up0SSvou1ClPr8fs+pCSyXRKF4u47S0P
ZjKdcniZcvNE30ymU6ZBH0V1ig/0XVSnTIc+jeqUhdDPUJ3yEvofqlO6Qr9E
dQp9X/H3EeALqlPOA79QnYJ8RHWKG/TPVKcYQ79Ndcol6M+pTomAPpnqFOyr
qU5JhD6c6pRuoBeoTlGDvqA6BfUI1Sme8e49bianM52y6XzV48NnpDOdcuHk
3cqvSqcznYL3LlGdogjudL6OnYrvo3878HOXUSqmU070ndJxzCIV0yl0fKzT
b7EpH17VVzGdEjqm8tw6TiqmU7r96FPQf46K6RQcn+qUfWOebgrals50SmKr
G0fNH6YznVK6KDr+SOkMplMmRfm/KF9bxXTKlZZPupjXUzGdYnaw2d5WFiqm
U/AeK6pTSnayfGcepmI6pcnxiebX0lVMp/Stc6DvRPN0plPwfiiqU8Z777p3
abOKn0vc7lzdb8tUTKdM+P5gZmc/FdMpeO8V1SnG4DeqU5LAz1SnHIC4UJ0y
g8xf6JHNpxOMNqqYTolfpLJc/5eK6ZS20yosNp2mYjoF7/miOmVVi8Jq5aqq
mE4pNnseWbOyiumUhaXODGxqomI6Be8jY999eQZUmO9M6+hfXnBIHT6+g4rp
lMM1bQ/2b8DqSIxPdcplw/T2SbYqplPKxbpP8+6mYjpl2BrnfSWcVUyniHvQ
YHwF+IeO3xf8Q8cH3lEMJ+P3h/kfIv5HndJ62n77mZ4qplNmOuY9HNNbxXRK
ZO2uHv2aMRxg/se6yG88dl1cMsWZIsU/5729PrVi+an47rSgZ+sAlp/iXjmq
U7rGbmzqckHFdMqz2pkLi83SmU7xXWSbcG5+OtMpeH8c1SnOUO9UpzQHfKA6
pTTgCdUpWL9Upyz4npBa3JPiT67S+fAEtZcNxZ9cZUPngpyEuiqmUz6R/MS8
bQDPUx2B41MdgfOhOuIQyU/sw62bqbNWNVCxPtzb3e5FcgcV68PDt25OaObC
8E1B/YM6ZSjkM9UpxpD/VKfEQr1QnYL3/dE+f9GIuve8F7L4Kj48jfabWTed
9fneLgPqzL3G4ivmT/v8c1Av7FxfqC/a52M90j4ff5f2+R9hnrTPXwzvRfv8
0qSOsD8f9mc/K8r82c+Ki3/2swP6meqIg4CrVEe4AQ5THVE88Rdu0z68a8zx
dwPbq1gfbuL2LNOzp4r14em5Px4vGKxiesEWeIqdDwy8RvWCK/Ag1Qt4XyTt
z8cDj9P+PBN4n/bnY6FPoP15OumvsJ+pCn0O1RGXoC+iOsIT+ija5xcD3tI+
/wvgM+vzAc9pn38c+k/a58+FfpX2+djf0j6/C/SZtM/fCX0p7fM/QR9L+/xo
6Ldpn78B+nPa50+Efp72+Y3/bpj49kka6/OPK87bP/krjfX5NjnORyMt01if
j/dj0j4/2Td+n22DJNbnN1xgcaso4jnr830CAt7c6faC9fkxZHyso8jGvj1c
yr5kfX7U3waVZ/+XrM+PrjZ5waKNL1mfj/Onfb6u98YJ1XVprM/3X96xUtXC
NNbnl49TX6psqmJ9fgsjTdjugkTW5986MP7ewzHPWZ8/wVGdXxyfwvr8H3Df
KO3z31eeNq95ykvW53tVsu+Q0CKN9fkqk8oFfovTWJ+P93jSPr/Z6UddKl9+
yfr8XY/iPDccf8n6/HLvj20ss/Ml6/PxflLa51cAv9E+H/1M+/wciAvt8+n8
Mb5pi8s4NzV5wfr8H9Nbr7zo9Jz1+RbjhlxxWZPI+vw1cO8q7fM7l+rRtJYq
kfX5uvBGz+41f876/G19SwYumpfC+vxucB8r7fNb2dfcaj3tOevzVfPGmFur
klmfv+nM/vDWA1kdifFpn//U3stt7JYU1ucf3OW7dt3nZ6zPn/Np9rVoj0TW
56N/aJ+fSMbHPv8wGR/7/PlkfOzztxD/Y5+f5l7O2dA0lfX5RzcczT0+OpX1
+XMu9d7sszmV9fndif+xLooNG5OuxaSyPv/doYjvI/0pzhQpMsc+afahC8tP
cf8v7fMPB45IKJ+UyPp845gOhztonrM+f6q+2qLx716wPv8B3i9M+vx0qHfa
508BfKB9fj7gCe3zsX5pn7/4c1Kvdr0SWZ9/IdR6++obz1ifn99jnSa1Rwrr
861IfmLeGvX89Tzt82/C+LTPXw3zoX3+ZpKf2Oe7zhn09PqHVNbne3y/PHtk
45esz/dZ06L62yEM3xTUP9jn+0E+0z7/AOQ/7fOxHmmfXwLuZaZ9/qWaad5O
+1l8FeE1bq4o48jiqwiqdjr0VhaLr5g/7fO9oF5on78P6ov2+SlQj7TP3wK/
S/v8wzBP2ufHwnvRPj+B1BH2+XP/7GfFoT/7WeAS7fPRz7TPXwG4Svv8FMBh
2ucjbtM+3/P44hrn/n7B+vx4v91VbCunsD6/YZfzFc4GPmd9fkPgKdrnfwNe
o33+M+BB2uefgf6H9vllgcdpnx8CvE/7/MbQJ9A+P5L0V9jPTIE+h/b596Av
on1+K+ijaJ+fAXhL+3zEZ9rnI57TPt8b+k/a51tAv0r7/BTob2mfHwV9Ju3z
o6EvpX3+eehjaZ9vBf027fOPQn9O+/xG0M/jfffAj0qXBYvmhRrlCTvwo1I1
okt3o8u5wm4L9e7T6WvZqfMkO/bhhbViExOsJTv2A33m7i7u2Fmy94d83vr4
L6uwnpK9N+S/qqX7qHKukv1XdGMcmq52WD17pGTHvy8PWZ5W4uBuyT4U4rL8
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
29xm1G/zBP+fP9rj+teBGsbveG485Xe874Dy+/up/Wra9pDsGBdv3y+J+xwk
uzhnbOaxzSadNYzf8dx4yu94Djzl9xmHt68YM1ayY7yWPX902X6tZMfxg4zL
f653TsP4Pcr85TzjnhrG7/mt/AwdumgYv1vblx0z2ZbzO56LTvldnMNP+N34
8qJa326oGb93UF8MeWCnZvw+qdSX6ntPZjJ+F+eoE36fTJ7HuHQk4+P8y8J8
KL+LewoIv08n74VxaQP+ofxO/YlxQf9Tfsdzvym/Yxwpv2PcKb9Phzyh/I7n
21N+x/yk/D4N8pnyO+Y/5fc4wBnK73g+NuV3PN+b8jvWKeV3rGvK7x0BByi/
43nXlN+XAv5Qfl8NeEX5fYsM3yR+nyDDQ4nfl8nxU/D7XjneMr9RfreS47ng
905y/Bf8XlvOF4LfCb8Ifm8m5yPB74S/BL8vBb6j/D5Phs8SvxPeFPxOeFbw
O+Flwe+Ux9H/IbrvS6NdJB5E/5dpoD/2wD+T8fuCkU8Ssw5nMH43bL1Y9PVJ
OuP3dUbBE7Yflezo/1ZzZt22WirZ0f8Ps51b3R4q2dH/M4Y2CxrXSrKj/59/
3uxqHSHZ0f/2uz+bfLeR5on+P9x17IMHUZId/Vwh49a6PR2l90U/P/P2n6z2
kuzo59B/Wjo23SnZ0c+TV6bX9b2TKXgE/XzY3OjN9h0SL6Ofw75ejs+eJ9nR
z6EpC3a1G6Fm/C73Az+3nPK7q0Vil6etJTv6v+QmP+MGjSW7WO/9UiXRt5aa
8Tuet0z5Hc8Jp/xu5jpu+s1CyQ/i74N2lRwevZLsGBcviysmL1IyGb/jecuU
3/H8ZMrvY+qu33fXVJoPxutY62Pjz3hIdhy/oNvtRiHH1Yzfh6Z4zLCoq2b8
HtQjYrzlwUzG7w9P/xjcrHkm43c8T5jyuzi/mvD7emXayalmGYzfK0ydWvXo
0nTG7xsrF/jrclSM38X5w4TfN5HnMS4Vyfg4/00wH8rv4nxvwu8m5L3Efivw
D+X3bcSfGJdh4H/K73heLuX3jxBHyu8Yd8rv7pAnlN/xXGjK71MgPym/X4Z8
pvxeFfKf8ntFwBnK73iuLOV3PBeX8ns01Cnl9xJQ15TfBwIOUH7Hc2Ipvx8A
/KH8Hg54Rfn9hAzfJH6X46HE73vl+Cn4/bkcb5nfKL+Hy/Fc8LuDHP8FvxO+
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
kDTm4dNRBrbeiPtb6Xrj5CcD3n/9qWfrjd07Fdaqkqtn6424H5auN25vlGg5
wdrA1htxnyxdb6wTdsyxaYqerTcuTGjiUfhMz9YbX3w76P8kUc/WG2esXzZg
QW0DW29MuFA01aWmga03Xp87fNTdMQa23oj7dul6I+7bpeuN6f7/LK7UwsDW
G3E/L11vTOzgNn39dANbb1xx79HkBQEGtt5458MJD+NzBrbe6L+6+fCPtwxs
vbFlnSOu6lQDW29M9d1x+//2N9H1xl2Xxmf8fUTP1hvDwy23L43Vs/XGkWVb
fx5/XM/WGyd9fH+iZ5yerTf6ZUSPa5qgZ+uNJtWTKw0o1LP1xpJhR4/u6G5g
6424D5quNxp8PwaOaGJg6424P5quN+L+aLreaIjbu3GbVs/WGzebzJtXaG9g
643zhtyf2v+rnq03tvdwGTsp2MDWG80PH3CLcjOw9cYSbz73MqpkYOuNabDf
lq43xn/y71L3hIGtNx7r+qi1j5eBrTduDmxscamRga034n5wut64M7/0l0cX
9Wy9cZy61qzLv9Ud3T9O1xst17V9tvqRnq034r5yut6I+6DpeuP5J60Hns7S
s/XG47ppe+4/0bP1Rtw3TdcbjW4c6db+i56tN+J+arreqP05c+XpUQa23hi8
I2/xnukGtt7Yp7nPvDUBBrbeiPvl6XrjuYPnDjnWMLD1Rs+ONqHWLQxsvRH3
19P1xoBeBdefP9Gz9Ubct07XG5s9bmU4/kbP1hv1QxdnWHzTs/XGYy8fPttd
1sDWG3MX9HaZq9ez9cZT34N75Bbo2XpjZMNxZ7tl69l6oz7JZmnpDga23lgq
q+DwKZWerTcmv/HfHPJMz9YbLd5fejBkpZ6tN3786hDjsFjP1htvlozf12yu
nq03Th1f74FpTQNbb8RzDOh647hdjVYGfNCz9UY834CuN06Oe5OflKln640j
nzRzyE/Qs/VGPA+BrjdOA1yl640egMN0vXEQ4DZdbzwD8aLrjUch7nS9UQd5
Qtcbu643m70xW8/WG5uMq3je46KerTfieQ50vVF7KjWh0WU9W2/Ecx7oeiOe
80DXG+/f8hkxdpOBrTeeNYnvf9rJwNYbQ4aYdSsqbWDrjRfTo6a8szKw9cb9
luXGdHulZ+uNxwoKFyx/qGfrjXi+BF1vXLLHx9b5up6tN+I5FXS9MWZC2qRD
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
DsYd8gS52f8Bo7h6YQ==
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlVlsjlEQhs+n+vM5v6VqTSwR64UlRDVCk6qgWgmK2KqqtVdraaIULVWl
1L63di4kRCISF0TigkQkwpVY4koiEhESQeyeN3MupvP+75lzznwz75z2K1lb
UNHKOVePpWA9Iufa4Dvhz8bObcanJJ07A94EbgX+4p2rAV+EO4d1J7464dxn
+G3wF+BOYEvBr+FWsdaNmI341dga+PfwS8ALwM/Ap4kvA38DJ/EdiV+Hn0VM
Nv4y/PmQT0QORfhOxGTiS7BS7BUxzbGd/x3cAk4nZi1nrIfbgF2HPwm/DPwG
vBifRsw8/DTiWHKF+L6R4f748RhXutH4cRjbXHpk5+r8GnwO5C/w5tjurWT9
E9zshO3dD7ccroOzfH/gca4Lf/KJGYpvJH4Ivi38AHw1e/6Ap3rLQ/mMwP92
1qPW4LuszYgs59ahdzo4G/4ncFNs3618bsA9xHLBB+DvgWeCD8dWN9X/Hdx9
rAB8JPRRtX3urR+q4zVwMdYbvD22eqrXL+AawMPAO8BfsVrwpdi+Wd++MGG6
kpb+sd4uaTHS0gN+zwIfDTnrro9wx2LrzxPwcfB88FNv68rpA/gUfGfOL+P8
evBA1Q9+T2x9OwVuBGeAm8E5+AnSqrf6p7I3C/+Y33nwh4jNj+zM6ZGdL828
ZP0RNhV8EG5XbL2r9aZV9SgPfyvEqM6ZoRdV4Juh/tLDHW936C71WvOXwd6d
sfW/ivV9sen/HPh2yE33ZnnTkM5sk7R51Nxtxf7CT/E2s1XSCzg1abMpra4L
81UMHht0K51oHruCKxPWB8XMjSwH1eoKsU3g9poXYor43Ut1BNeq/uBFcFuC
bid5+xb1Yqe3vgwC14NLsT7SCVx5wHXg8d70rTlSr/U+HIMbk7D66C71cYze
Bvi9AbcEnUgbR8FlQZ86f2XIU1pV/hOlSbiKMDvS/2TOHQzeKl2FuZD+9S6t
Br+FqwxzIX3uxoYr56B54SZvepD+93o7U7OvN2AbfBr8yFAf9SjPW930loz2
Vhvl0ACuY09PZ7NTE2o7ytts/8Pleuu18DTwCm9vVl3ITe/EQW97dW9hqJXe
yzlhLjQLBeDqyN4xaaU8aF7f7MJ7khPy1/+EBWF2VMOr4P9UGa61
            "]], 
           Polygon[CompressedData["
1:eJxNl2W0V1UQxe8lrjwOCBYKfDCWy/yACtKI5EPgkdKN8ggFSdFH2WI3YgCC
goUNiooFdiu2qChid4JY+/dms3St/17/OTXnnDkze+buO/qkPpOqZFlWN8+y
avqfmbJsf8k1JHcqsuwrtb8UvhG+FS4WLhIuEy4XLhEaaX6J5nfX/BlCPcmj
1HeVxi71HMbKhCWSD9bYIcJS67rQ89C5U60sK4QaQonQw+smaewkoaPkDuwj
+WThVOEUYZZwAHfQmqrCbM2ZI1yj/qHqHyZcl+JO6GAtd0VXe2F6Cp3sO1tz
99Id5qn/7BRn5cxnSu5ZxJk4y2RhmtBfY/2Eqb4DdynzvOslH+T1S2yzxpKP
yMOW6D9LOFeY73F0sJa9fsUmmlsIv0ieK8wRThNOFx4R1gqPCo8JW7GT5k4S
fsM+0rFnFn1bPf47NitibIIwHnsIM4WvU7w5bz1Fa37Sf3X97y4dUzX+hdqf
p1jDWvqmCD+mmIs8WfghRR8+gC+MFK6Q/D1rJe8mfdfJac5T+zC1q6vdrQgb
HGr/wDYT1Xei8Ifk7cIFwvn2G+zH2AnCthRz/uRdrX9SEbbFL86xjQeor3YW
e8y3Dt7i8Dx0z/e8/kXM5bzTeFvhO9uFWECmj7no7lfEmtmSG6pfbpR1Vrtl
EXG1Tx7vVmGf5Uxn6f5DJLeQ3BIflVxaROzhM/jOQKF5HnOY27WIWNtb7bHY
oST2aq32PWrfJLST3F5YIbmm4+g0rTu9CL/ZV2P7CWdIvpGYcvz2LSKOGuRx
B+5ys9BZcidhuX2Pu6ADXUdpjX6VZ+SsI9Wogy61n1R7ODGFfmFECiDXFEZx
P79Hd7VfU/t4tXdRu63aA9Qe4/YItTfxVmrDV7naHeAV4Z+MDsVLij7Gqgid
JTcqKoeybUIbtZfZv9jzwpKI/Z0k75UHBzQT9pBcT2ie4oycNQnHSz7a8//E
5mr3KcL+2KtpijWs3ZM3TeGbu2p8Yh4+2k7tqlnYBNssEIbkwVFw1XK/4Qrb
nn/e8hb93yrcLdRRe2fhDsm3O05XpmgDxmrnMbZGeMB2LC/CJtimqtDF81l7
l3WvtF/f6T7im9hnT8bxiQPz8N9Zju8rhenm/l6CmpV3WmAd6JpsnrjbfVPM
HQ/6jJxtrPBQij7kccJ9ku8VVgmrfRd8A5/gTlfbhtjuWuGGFDy71HbjvTs4
Hpb+z6bY8jZsLx07S1dpHu1j1O4iLJK82HMYIwZYy1ipeX2R9fA2g9Q3WLjf
51zje+BT+Fb9PPLUat/lAc/hjXirWsJknwGd6OJsrGFtA9v7ReEF4WXhFd8T
rjzUdx2uNcOKyNnw+Gj7ML47RpggjMcvhRNTcB7cBwfDxa21tlUReWZeijxJ
XoSzKryG2IcD0NXKHAcvzPVc7nyK15Q4l5NL4aAxPkup7cw9ZkjXycKrnFd9
dfUe0/O4JxxX7neB++hjjDWspVaYlUfOZp9y3xPdrKmuvoo85jD3DY2VSe4h
vC35ONtojPcZlILH4Nqh2EY6DhOOwu+MSn7J/huDY+AW5owo4g2wPbl0cIra
Cs6AO8jh5PLqzq3EILFYLQ8O6+0Ywqfx7W4p+BK+OEZy4yI4EJ7rKCwUmjjf
wEXwB1wNp8PtTYpYw9xO9tnrHSPECjUMtcyUFPXLyBQcPcp2QWdvxxl7NZfc
jNi0H8HZcDc2fcNvC1eSw3jjY7GL2m2EPpJ7C71S1GDUYv0l9/O7H+c+1qJj
x9xKXnfd9ozkp4Vnhec8ht3auy6cmCK34aP4Kvv3TbHPAAP+4EyM9UjB79i4
m22KbeHJUp+tWR4+yRl5A94CDq9Q/ihLkYN6+qzoK7Pc20jOd4xRp8ElcMoT
Pg9n4+7kPmqLsRob53pjqPM97/lwCnR0PqbuW2X7cic4Za3fnz3Ya5zzT7c8
uJUaobXfA14FbWwPdMEb5XmcgbMQI8RKT+HdFDmMXEZ9+VeKM3JWajpqpWU6
bP0salZq17lF1GLEILE4zHzLHuz1aYrakBqRuhKd6KZexanJ+eR+5jC3RRE+
iO9NcHx0tc2xL/XHCNex8Oljtjm2XpciJ5ObqVmoXVq5D7mt8HiKNcxdn8Lf
urteGOAaj1rvKfshNQA6WEt8ww/wwNFCO86boiZo6XnrrXu4z0nM8e1wbB6x
2D4FH5CjWf+k1zCXu5FnqJmIu9d9L3wJm2Lbde4bZh6CU+HWPfgmU/sjtT9M
UVdTH7MHe8FpnJ0apqHzTWPJRwpNUnASPIC8Wx45nr6mnsMYXMGb8XZ8cywu
iT3Yi9qd2hydR3gNa//2m7MurxXjDZwvD0/Rxxi6lpTENx3fZvA933o73uRp
v9Xz9lf4CH5gDWsrqG2FLfY5fI1vmWr+3iM/VKkV31w1s/hGu9zz8E2+afnm
wXYfpPju2GFD/Bv/x7Z/OEb+8t04A2fBhzjfmyl4krh6R3iL2NfYaGFDCg6A
C8jzLyX7VBF5iVxCDBKLxPRC3WszceA2sU5O4bvr5xS55hPh4xT3/sw6B7p+
2rHXaOdV9tzoeCb+30vhk/gmNsE26NpkG26xD77mO3G3wfZR+rnPONd1nGOz
Y5bagW8iYnmDdbxpW7Ane5fbJkNcVzGPNrrKfQ50brfNsfU/KcaoCzf53rzJ
ePPpRscpsU6OH+T7vu+YYO6/IJb27g==
            "]], 
           Polygon[CompressedData["
1:eJwtlGdsjlEUx5/XeORx+8FMSIxYQWIEtVtRs8NstfbeWi0qWi2taosO2ira
qj0SnyQIiRUSI4j1xR4fCPGR2NT4nZzz4Zf3//7Pvefe595zbocFafGp9TzP
S4KG8M15XmrI81bCCqgJPG891BFrwP/6MIIxUTAcMon99tT7BB/hEF4O4z6j
38IbeA/Jlm8YOhIy0L88zZOHbkt8HnoBLHS6ruQejB4KEVAHv+GfrM34fYzZ
DO1COmcJLLXcP5nbAr8lDMRbDstgk62VjJ4B02EWNMXbGOg3yb5kziCn6/ex
eA6xvuh+Tn+b4eXihaP7w2wYgjcUmltMcs+0WDPLUS/M87LRWZBh31Efbz36
IDrb97wNUM2cKtgr+YltIzYWPQai5RzY5wa8UnQv4lvRZehyeAGL8KrwXqFf
wxboijeG3FMgEYrxeuJtsTzbnY5fjFeNl8yYFF/PuT1eJ+goNcKYSjk/9G5i
u9C7IR+64BXgFaALYQ2shp148cTS0Y/hETy1fe4h9lzu3rTs/yVsdrqerNvb
vrESEtBTIcnyVVruq+hrcB2+OK3Dw8RyiX21PUxGX0ZfcTpe6ukvhOwO9gda
s+/gA6Tg7Q20tjeiGzLOh0ZwxHI3RufJOfm6nvSAxIMwjZXjxeFNhAlwh7y3
4RaUEYs1bxXz0yDH17Wkp75Z/8gevqN/OP2Vfa1gXAZkwj28u/DA7mVXoPo+
PJR6t7tKtPvfjo7Gu2H38ASe2d1L3cTKuViNjUOPF5g3DmbBJMal4uVCjvSx
1VJhoHXQHd0NOkM+XiRzInwd3wMvztfaroFaGIBXFKiejZ4jvQvFeEU2R3JL
zZZALPNj4IC8R8QSfO3V1uhW0MR6uiLQvV4kdsnp3Y+GUU77Sb4xmzEn0CMZ
V4qeRq7pkGD7kj0kopPgptMz24EXE9I7jLcelf3LnCnyDsE6yLKekDOQnpmH
ngvT7I6O2v5L0MfQx532k9zXfPaQDmt9XSMSLwLC7T0YiD8AoqBNSN84uYdN
1ju9rLfl3ZP4HLy5Tt/ak5COVxtozUntxeD9sfOQ+4+T78IP9/XMJJYVaD1L
zZ7DOw8X7Dyknk6hT8MZp3ezHw5BlH1jmZ2bxM86zZHmtJYqrD/lvUhx+k7n
2Rsvb468nZnWo/JmNoD/cR7X/A==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlGtoz2EUx3//4V//PCkpSgubO2OSkPKCEiUvSEouCSkvUKIkxMzcUsRc
pjbZ2J2xzW12sZld3GYvxtwVyu2FS7m8wOfbOS9O5/v7Pud5nvP7nnOelJUb
FqxPiqIoE+uBFSaiaE8sioaFKDoQj6JkuGz8TL7z4ctYb8HS4Jvihv/At7E+
CysAl8PNBp8DX0hYnOI78T/gxoK/4gu1H7+d2GrwG3AJuII95eDl4CvgWvBm
cA4xw9lbhG+F/wvfBX8RXAZeFmxNMdfhrmHt8NvgX2E9kyyHLmwiMQ9YjyVZ
bjpL51/ALyL2KH4U/E/8PL678fXE/8L/xrLg8rCH4Bvwdez9Dm6EO58w3fbD
9eV7F3w+3BzwY3AteC74CbgOnO18BfGHwB1+5jv8aM6pw5fyfQo/hfVprrNq
cRVrBe+Ae+o5v1Q9YvbvGcFipPOWYJqMIKaMu24lTPP18FO9vqp1G/w/cDfc
dK+javoQHE8y3Q6DH8HXgHP9bulTgp0ETw6Wg3LbCn6D9WLvPdYvYZXwi4Np
KU1bwAddT9VuhnT0/tG66tAMd4fvb+AG8GVwFXiJ94x6YKH6xOslbU+4ztL8
GLgTfDNh50mrqrj13nhwC76BtdesrSO2OWF9Wut3VYPXBMtf964GV4KvgNeC
i3UfeBK4ClwD3hhMZ51ZHKznU7krF98I/1F1h28CfwJfBn/AjyTmonKDv8n3
pmAzof5cESzPV5oh8Fuvy/2EnfMZ/qrnppyXqlfjpvkq11wzu881Vj4lrrG0
3gN/xvNUTxZ4raWb3odM8GDNHT6FmNKYaaW6dLjGmvGumOWv+R3nc6G9Q4Pd
p/OlXS13pIPbpYneHnAO/i7xEf/1TPrEbK6lqd4EzUS6egY/BH6v+h1+guaa
c4r8HUsJ9laon5+DB2A7fR7VS5rZR3C7/RydV+KzFuD7YRngArg8j1GNi73P
ewe7Kws8AvzFa6catvubo57XGyWd5sO9x4+JrH5nfd41R8prIPzpmP2P7joe
t7PUJ1XBeN2V6j2m3kgDJ3ue5+AG+pujnG97P1R6DwzizCP4/v7Pir/vs6n+
0Tsj7fsE26s61nuvqj+rg70PqssL8H8KOfkM
            "]], 
           Polygon[CompressedData["
1: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
df34e3OK2VhlazCfcrf865YHu+N/ANGneD4=
            "]], 
           Polygon[CompressedData["
1:eJxFlHdszVEUx3+v0Ze8uAhiBLHHP1ZiC4kRK0gQEZuYIdHGCpEYrRFaglBb
WzpfdbyO15buQau7TVqtLYoE/yj+8Qc+J/ck/eOTft/33N/tueeec4dtC14V
FOA4zhoIhDiP44S6HKe3cZw+0Bdewz+858TeoN9CDboLH75Dv4cPMBAGQKzu
McjY9Q7rqvHq3Y7TAP3x+kEMXojLfpOCjkXPRM+C2fCAtdHggxfEFhub32l0
OITp/ygnXgZNbptTFV5XuEU8ifUG3Q02wHrYCH5iGcRy0N/R5egivi+GNrxW
eKW5y7lrITDAnvMjtMNYyOdbP7Fx6PHG/i3Ay8abgJ4IdVBr7B5u9qjXs59i
3V24Bz3xhsFQGA7n8BJZU4wuglL4ifcMbxM6Ge1Db0ZvgWWwFArx2ogtN/bc
t9GP8Lqje8BIOKt7j0aPkf3RL/Hewhv9dh2s1Zpl4aV7bN28UlM5H2TiDcEb
rLnLvgkee/8heqZexvbSDt1Har4LvRuWGHunBXitLpv/VJgC0zR3ub9QdBU6
F53M/aRAtbH3XKP3IvUNkj6U+yBeAZXghUR4LP1HLIo1T1SHoy/CJYg2nbEG
Yg/ReaolfhmuwHn4g1fhsT0nvZePbnTZ+DW4LmeS3jD2/jqIPWWND50GGfAN
rxRvMnqSnlv61YuXgI6XWsts4RVrzfxa8z3ovVJP+Kr7+NHZ0lemM3fJKRZ9
CA7CYe1N6dcG9G/0L/ih+Um8Hf0JCrWH5WxN6BZo1v32aV4lHlvzYM01EZL0
DiQm50yHTJ2xMrwD6P2ak8xOFl4kNbwPR/EqpIfQLehmY2dR3p5Kj+1T6e07
ePchEhbCAmPfjzhii9Cp6HjtU696kvMX9Gd4pzVN1W/krZkDc6FR56xQegxq
NK8jcAwqieXw3XY5l86F9PZOuMraK247OxKLcts+LpE7krx1FmV+feg0+S1/
9T46dL4lhyZYCStgtc67rJuPnie/9b2Us8tbFy3/D25qD0k8Bj2d2Axj39VC
nbObMlvG1lHe9gDmxwV/tc4j8M7oLMt7MQoucJbzbjvvEov32LmVdzkC74ax
+/q1t8v0bc2F43qvUrcT6JOwVe5JaqLzKXMq72m5fAt52hvh+GEQ4bbnkbPX
6Tsqb3Cz9Ar8BzQxCSk=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1lNlvTlEUxU++yve5fFcoSRNEVaISRcw11VRNTSkaoRJjk6oINT6YQkUN
QYkniUhESAQvEkFE4l8wlBpLzUOVqnmM38reHk7Wuuvus8/Z6+xzcspXlVYl
Qgg1jAxGlziEPIS7UQgn4fvg3+GtjE3ws2hTwbHETgS/oe8GL6CnwCHovcCP
6BvBM+iZ4Ej0DmA759JynfcAO6VCmCwO3mRue7Q/6RCy+C5CzwUjxjL0GnKu
B8ejrwY/Eb8dPIH+ED4EPgB+irEf/gNtClhAfA6YmbJajvK/gX+jtG/4V8Vp
//z/DN+FfhF9G7iVcQy+irEQ3oaYSvhc+MvI/k9gbtuU1b6B78Ox+SYfjsCX
M8rgr9Cq4PPgr+F1Xu8P6n0PXws/GFttqjEjZfoavveiv0+GMAw+EP7F/b8E
3wxOCrb2B8+zP7ZadsLPwS/7mcrPZvRK+A60d/Cl8O3wvvybRp6faHsS5r/m
/07aub9Ar06Y5+Xuj74Xx+aDvhfBHxE3RjXAH/i55PsZDYWP8FqUU7kfe/xw
9K7up/LN87oWgFvcc3n4jDEDXqZ13Vv5OROcxZgfW0wJvDS2NeXbKPdWfh6A
b2TM8XNUP4xWf6O1RLZuZ/yo8BjV3pK2Pr4RmW/ysDi2PpRX6tlPSeurAvRB
4Gj0ArC/c2mfk8bVSyv5Lgx2Btq/6prN3OHaL/pg8FfSapmLvgKciF7kuvK0
gs/Zwzh4IOcTeCH/S4hvjOy+To/NZ+2lMLY7VUx4N+8H3a/JseWRh3Ni66V1
8EPwp/JE+3Ou9SP4LXhae0mbb4qv1T1lLIa/RcuB94Pf1/2AL4E3RYY66wp5
wvy24HX0Pj5XMb3hizxPtffYcbTu6ld/r+R5vvoT7OX39A36FX8H9I498vMd
5j0pX/PUq7pTzH0D3kbP1lmzl3p4T/UGvJkR+d7qPaaj3g3X1Q93PL4TepbX
ew+tW2xnr9qz/Y2Vnun7/7+u3sIOseXRW/Wa3E3uybXI3tBYdxHtY9reXOl6
M7X/BvKcZn5twu5vnZ/L37SdkeYG/l/1GL2Njd4nSX9P9O6dj20tvc9vybnG
/ZefT7wHUmj/AKuYyd0=
            "]], 
           Polygon[CompressedData["
1:eJxNl+d3VUUUxS8XfI/AGxIEpAqEaiygSO9FWiLSbWCvNFEUowYb2MDeRQWx
997rH+EX61o2kCJBQAFFRfcvZ2fJh73umXJnzpzZZ89M5blLZ12SZ1lW0STL
mun7Rsqym1UxUfZhxSx7WuUbVb5BeEr2vkKWjVTbOJUnqdxWfdoIr8p+TfhV
7cPVPljtM1TeovIwlVuovLOUZZ+obo3satX11X/71f6nUKP6E4UnhPXCk8L1
6teuGHMw9uvCK8LLQnfVVQrNhXEa6xz1vUr1X2is41UuqrxL823z/H1UPkLt
21XXS3ZvYYfsX4SeedTRtlX9B7F2lQ9V/01lWTZa5WqVL/D818peIbyUYu0n
qL0ujxjg94YUsSJmxK/W8fxNY32aIgas/QjhY9kfuY62ucJQ9R8mnCz7A+F9
oZf69hZmyx6SRx/6skfEiNiwd28JbwrvCO8Kxwn91Le/MDAFsI8VBsv+zPPi
S5Vwquzp7J1wuuwfFY/BWYzBWA8IS2RDmkdS7DF7jU+zPS/xmap/9mq9HTVm
B+EZ1T8rPEfM4I7aO6m+P3OrXIVP8Kss/uuhtp7Ci6prp7a2wguyq4UFshcK
01LEBC7BqQ+8ZnxgDMaiD30XCdNTzIlPjb78ofWNymLMasebsVYL78neKk5s
KUU/eJrp3zH6nK72m9VeJ1wjrGDdxrw82mkrqf8E9Z+mckuVZzpmxGoOuSVc
mEefkvlcLEYeXKf6PZq7Qt9y4bdScBJuthfayP5bda3hqtBK2Otyhf/ln93C
76Uo/1OK/+H454rPHyrvE/YLfwmn4ZvaZwmnyM6FDp7v31LsAXvBHhK/NcJl
si8Vbk2R478KmwuR+w+aM3BlrVAuTFbfKULrFDlILg6VPz8X4l/qsBnjLvVZ
rvYrDprjFmG158ZmH25zXUGxO0RYZx0hltStt7YQ45bCDY79Qyl8xLdHhUxI
jmXTFH1bCNen+Oc58/j5FLFAl151zr1ljXrN9tvCfsW4JgsOw2W4VJkH5+DU
Bq/vSusrvo/NYr3rHDdybanwmOzNxKYUvNwmlFQ3KY+YElvqyCVyir7oK/pF
HW3U0dZX2FSKuKyzZqFd9aXQwR3ex22eC+4zFn3xDZ8bdQ7fa611X6vPwCz4
us/cKjcf4Rga3MfzHy27iWNOrJuxfqFjHpyDe7s13gh1OUblzik4eKAU/9HO
GH29XrQkOd/QKHj3IdxwPqOz7cznhjm8b2g5moVu7He+kUPkFntbZ72nL2Mw
FhqBZvcphrYzB3ORk+3tP3PBY7jNHpXMVbQBjYCzcGu82lfmwbGzU5wb5+p7
nnC+v2gW2nWO+zS2XYR+CBcLC4QlwmKhlfqWCwtdv9hti1JoETFKHhMtPjz/
fy7m7mCdXOx/6MuYB7Sef4SrU+hendeDJv6r+lr44Dwk97CXm9fUcUbXOi/R
ugX2fZF9vMR+4ntFMcZkzsa5rhPmO35o7f3CfSnOQM5C7HtT3Bmou8f8hK9o
yU2AfJG/ZdYB4r5SWOWYEosuecS6STE0n327xfPVOl8Z+07hjDzuADuV603V
Ny+GTqFXrH1uHjlNDNY6p8nlxw3s1mo71GuAT8zBXMxxt9dI+WHhKs9X4T1h
b+D6g41rUfuqPNbE2GjHlCzmqDAvHvJY5R6Df6nDd9bMWlnDFcLl3lP27TLW
JSxz/U+FuCNwNxhAPsAh+Cv0kr2xEH1oO174XvZ3QhfiLFSl0ATy+BjhSNdh
9xO+Ut8vC3GGcZaNUd0YjT0aDZX9QyHGZKyuKebsKfS2L5wh5CC5l1KcSdRh
tzK65nFHpO1b4ZtCnIt/lsJG09Ax6vCFO+Yun6voEfnOmcrZig/clbgz4Ru6
xlnCPfQXoW0KjUAbDjMaNIkcT7FG9BIN/cp+4jvaXpHiDtEixbnEWYZdlkJH
qMOemIemUNdc5RNVrhEKKcrFxjEM9IA+zb2ny5yz7Dkai9Y2ajNf1sRatgvt
vQZ87yR0T3G/JAbEorPrdxVCyzu5785C1HX02nk3UFfv9wP6fMhBc253W0Oc
8ujDP5z56Ojtwh0p3gTcPdFz7uq8UXirjCUmxEY4Qdijf/cKZ5K/5j25W5ni
bswaWAvnHuc0d8MacwyudfNaGYOxeph3zYpxXnF/Wuqx56fIKeboZ24PVPu3
ZWHD/f6u2+U4cE+cZT6TS7y5eHsxJmNzRyMP8R99mYMm2kd85d57Uop/8LGn
x5oqTBG6yJfDi/HGGGb93lgWdWgFmkFf2mfm8R7gvcGdlbsr9gzPOcf+cHck
P0cT8xTx5k4/KI+1sUbeeOPzuJNwnzgrxTuPMw29rTev0IGjhL7C+XloCvnM
HLxReJvMMy/gIprR+M8A86PebeQeGkOfEcLwFGcY58opjid79lchzhtiQUxG
ptAttI130yDzFt5xh5/pNY4zr+Aab8Rq5xvn8kjHt+FNZ+5NEH43b+At5xln
yJ3mMmcbdbRxJqDbXYVuPv85mzrnETuA3SmP90KF36On5XGWsofsJXfIycnn
XB5nIGchPuEb77chXsNE8xruwLHZ5tcyr3Ws10G/pr6vwkG4ONQ8Hu5Yz/Ne
nWGusvZRjjcxQMPR8iG8jwtxF0CL0KRFji+5i+bDrWXm21yfrcS4xvp1sePN
vAe8l/CvynzbUQhf4O18+zTMPo/wv/8BlCvgig==
            "]], 
           Polygon[CompressedData["
1:eJwtledvjmEUhx9vaPvUe6MjKlYXFTVCS2vWKLEJETSpGW3tWonWir33B0J8
JGZCiB3+BWrvGp2KailFjevknA9X3l9+53nu+7nPuN/4OfmTlgQ8z5sCTWCk
87x5GH6o57WBtvDc97yueDHEWkMbeIbXBS8a3dJp7C5eKF4CJEJV0PNG4Oeh
P/m69ijYBTthDywn9lnWQidDd0jFe4E3Hj0OJsAwvLd4p9Gn4Cd6L94Z9KsQ
z3sJP9mvKd59YiH4Y9CjYSi8wSvmmddQCcl4bXnmj73zgPhf9D84i1+IV4t3
Dn0eWpGHGEiC3cROOI2tRkfixUIcPPV17UhiUU7zU8p+JZCK7kfsKzodnY5O
gxQ7r5xpD/oWsdtwB67CNrw6YtfQ153+bsf7gZfInh1grJzXac4y7byJ6ASo
RM/E64iu9/X7b6BvOt3rl+VS9uvMWslwGX0Jrthesv9A+/5X6Az0IKf1lQZa
DLnwkVgaXg90TxgIxXgReCPRoyAenuC1c1qDp9ZLsehm4KAFxOI9InYMfRSO
W76lLlLrevgNQauf6F/QAA7vId5Jp7Wqt9xK7+y3vqvGO4g+JOtKzaEMbyqx
tehJMBEmSw/ivZeY5Nj0NHSW5AR6Sx9T1wb4A/vwlllvy34HoAgdLr0BEfCd
76yDb3CPmG9eLdQEdZ7CAhqXPtiJ3gFbxbN+Ddo5PeKNbKZ2w15YYWeUfl6L
XgMFUGPnlvgXdBT1jobeeL2c1m8AsdfELqIvOO2HbbbvZvQm2GJ3hcx2us3t
S3QfdF/YCBucPp9nvSEzkOJ0r/7WS3Xk6xs05htmBLRnK/Cz0NMhG9bjrXNa
l3LJvXmhdje8k/yhwyFb6oZXInlhzUbwwWZgmZwbVjq9IzLtXpF1wmxW5Bvy
0UudPl9GnuOsZyvQlVavMLvjPsInKA1qzz729Z3yoN5dC/EWwXD7ziKrtbxT
DV/s3U54SdDe+l5moLnT2YmzdWvJU02I9qb04W/rN+m7UuJTAtrH5dbHeej5
sMDpPd7N5lLmMx7vCBx2OmOF1hsVll95Z7HMN1ThzQpo3lZBgXyT05l9Zv8P
sl6S03vmgz3fCT3Y+knugUypl603Gy8H5tpzc6Rn5H709a6VOzfD+kR6UdYZ
YjMq58xB5zo943/V8eaM
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1lFtIV0EQxo9/06Mnz/FamWWllRREpA+B0YUkyihMVNTyQolpISRFCBUJ
kb0EpWZCPfbQ7aGHLg9dqayINMIINYLK6CZlRnQ1LfsNMz0M8+03s7O7385u
WlV9wbaQ4zhNWDjW5TvOYYiRaMdJ8xwngGwNHGeMcRv8U+IO/FHwM/Bk8BC4
gpzV2Ftwqes4ncRawX+YN4McnzotxNvhCiixlBwX/grjCPiv+DL4h/hVxG7j
J8F/w5fDfzI+H5zt6rqf4dLJqWC8Eb4en+xpbhn8NHAY6x4AL8dewCfAdbO3
FttbJPEIbBfxR/DN8KPwYeSdAt+Eq6NuJfV34334LvhX8DHgTnA/+J7NFd0C
T8/xGq6RugnUnwV339aV+pfxRdS8i48l1oOfR+5M07wZHO2pDn6gaz0AZ9i5
5LJ2go9hSeDZnmor99LLOn1yV9hC4ifwGxw9Zxx5peAizjLd03PJ+eTO14LP
2n568VnMXefq3jLBIeZXkDPG+C9nOILv87VOFLG95IzArSfnJz6fuSXgeE/v
SO6rkpzYcF03Jlx7RPrhOP47tS7hIz3VUHSeGygnWolmBYwHpDeIPw5pfdGl
GysGnwlpLakpetzACh3tszHb8xPWOWc5J/G5rtaXvi22Pkn0VCvRcEGg2kmv
ZIM9+A7RKVDOxRaBC7Hn1mP9IdXqTUjjos/iQHXLg89krRB5p4nfsjcl76sH
XONq3zbYWeXuBkO6B8HlxHOw63CeaM6ci6bbMPiC5ILDrf5HX+9D7qWEeaXM
eck4ifggsfPgJfDt8InWq1Ow3/B1gdYRXTvIzXJ1/5L/w+aOI54b6JmlZpq9
90Nwm8nbRP4OORPj93Z3+2wt6ds84yd6qpVougcuhfEv+OpA/xDpl4PgNntT
8h7T4auo3wBeA/+O/AlwUz3VvxZ+1Nd/6T8v56oNVBOpv0X+N1/nyh5k3WHw
VvhUT/t9u70F6ZOVrr5N6YFk+EbG1fAZcPvtPQrOsf7Pt7/uKvnxxJdZn8i7
8O0PmQMXBb4m/QP+Yncq95hsf2wa/JDdr2geZTWjAv2vpJcH7O3L+50faD3p
kyTweHLugOPsXPKHNBkv/1BqoD0p/94HX3tAdKiBX2E9I+/CszopcP8AdFm6
jg==
            "]], 
           Polygon[CompressedData["
1:eJxNl2m0llMUxx/nrZ66ek+DWZGK0EwaRLdZmus23Nym2zzgNicp85AyRZJ5
Xssy5YNYlqGQFIqKZoUGDaJJhQb/n71b+fBfz3722fucfc7Z06k8cFReUUiS
pOwpSVJM39+zSbJb+EPYI6wS5kjgSeFx4VP9LxA+FxYKvWKSbBb/FyFf9Jfi
LRIWC0uEtcIaYb2wwXXQ7ZgmSSfhOqB1/5H+TdL/TGOvie4pXgeNrdD/cuF7
4QfhO7fnCeFbnwsdZJmTNZ7X2HPB1t4kvBCMd2L9d0TP9b3kSaer0E1rdxd6
CD9rrJfW7yZ+nv67Cr1F9xG2YovGV7LnrI11EQpSk2FO5n5bmJ81+S1Cf40V
Cr+K3ibsEHYKm4VvJNtb6/XT+Gr9P6v/Tvo/VipJqmruKsJojY1JbS50kGXO
/2xMT9qOzADpHgymi40/uw3Y0lG8DkJnt5t7elOyXaXTWLpNxLtauEH0jcIw
0Vs03lfjFXOS5Cr9N44ml+t0mjEdeEXYJdlXgo3nOp+5GGsj+hphoOhBQnPR
zYQWQksfay0MSE3mItEXChcLlwgjhRHYx5ysLZQQSgkfas2caPebLxtapCaD
7AjRI4Xioj/QeDeNN9d/e6GdcFTncCxrMv04+2C6pwi7RO8kSEQ31XiuEERn
hJJuA2uXzDHb8Y8+ie2B/XMWLwc7uz5Cjs7rVKGf6P7ub8TPwGiAJqaGRAM0
d8BdoINuoebvS+yw94zNydz54vXEB0Qfks4gn5N5hgqt/nfO3MW1/uUuBgvV
tIfBmvsZ6d7lsi38TtC5kvPO2L2zH/wQ38UGbCkSDkj3T2FsNEDjjxNETxGO
BjvfqaInC0eC8RgjB5AL4DHWLLUz56yLRbszeNDcJXfXVjiStTs8Tbz50v1E
KCe6UzSf7+JxfIZwerSYJ26Igw3BchC56EyXyfPYIm+tE34UNgoVyXGSXySc
I/os4QvRXaTfRvKV9H9+NJva+XwLgtmEbcxJboHH2FLiX1iWtXy2xHMnsXhV
ajxy3exgsl+5DGNXp7Yv9oDt5KDy7oun+z5Ys7zTrLfHc/s+YX/WbD0PP/Bz
vCDaHtp5bBREu1d8qy93KZ0DQmuNXZMazTytUuPt9bqx3+WIoWN+v8Tufl+7
ZWo6f4t+T2PzhMMegztE90hs/X2ev4lXdEa6/+Afw/EVjb8fbA7mYo5Dwl9Z
+2dvCzXWPbE9liZ+hCiUiZYjD7q/Vhbdnr1Hy5H4TQXhXL9TzoU7P9v5FR0V
fIyzI/98FOwOSjlvcTCfQXaD18KNXpvGiHfc8yvxh59RZ3Pd77fr/1X95yV2
39w7vkENoZac4EEjm+/1FJ9upLnr6r+O19GVQm3xagl1hNWSqavvmmA0PGom
tZMaRC3qLd5uz2fUr+HUBOE+8acJE8jTGium+L832vlzl53Fq6+x6eKVzlhO
Hek1sL/7FXPjA9xrddE1os1xjzA+tbmxvXZqPQB7qCW6ZmoxQzyM8xxDbpkY
bc0rUvMBbJkhXiZj9j0Ube1+njcLfM3qfia1Pb/ga/gc90NNpbb2jNbf1BPW
0VsIl4keKvkhwlhhnJ9LyNiaM9wmbEMG2YaiGwg9PE8P8jo3SrzRng+I9Y6J
7XWwyzA2xufCX6nxQ/wsaghfex5h7/WEgx4HdT3/kHPK5lhOJ7c/LdwZrSZT
m28TfXu0nEy8cl+VcizGiDVyMvWkMFrNoqZQW7C7yO+Au+jjfdDNootnzAfx
xfVCfd/jKJcdH02WvDUpmg51q9DnHuw2Ydsd0ey93/3uAeFBpznzGc5Dhr09
FUyXeakp1JJbfI1JTlPHbvExag99DPsvmTEaHj1qR+9DqkWzlVx7k8/zcDS/
qqKzqppje7wi2j2z90eFmchyJqnZOMN10CUm6E3Y13T3/2LuP3dHm4+zw+fw
vREeg9P8LNgje6Xn4i7xybWe7zr7moNEl8uYLdw1vd2tfq6c8WG/W86ePbCX
iewxNTuxhxiHzxzMVVZ4xPdK7mjge8bGy51f32OGfoYep4efCXL4PrmKM13i
/Rpn/YT+Z3M/oqcIc6LxoKemJoMsPd5C76WXil4WrKdmXmKr0H2J/EjunBms
ds6KZjt7YB1ip4PGHwoWQ+QaYo8YXO51mN6YNbZ53SI/fBwsb9AD0du9FKw3
Wu7xS83mzUJs0wcWud/TS8wKluPJ9eRDcis941Z/56DLG2eVv5N429AD44Nf
iPe6xt4I9s5iz+z9W2FX1t5u5G/eO394nSbHkudqCr/5+wIZZOmNr4/mU/jW
Jq9N9FjkQt4PvHVWCD/5GHZTm5DBBmzhDbHYewvWJn9Su+nNeQvN9XpIz4Bv
vhusl6AOU7up4WWj9dVvBdNBl1o9z+s7svQE9AbUVGorczI3/kDtbZBa7UEH
3SapvaXYM3vPdX9gDdZq6/FCfFH3H4/mI7PjSV/EV4ghfJI75q5fDJbf6I05
H+6PHrkpPuDnxbuml++XNVgLHmPooMua6zw/0nPQX9Bb0lPSWz4mlPF4wy76
Xnph3hy8PSanlquRQbZhamfA3ku7LPss4Tq8YXjL0GPRazVKTQfZbDQeffTx
rMl28PxDDqfPJLa6p1YDiDHqE73LT8HeEvgqb/c9wXwWWWoP8d/fc8Mq7zfI
EQPc/3kzECPDfD5qKHm9XI7FO2fK2VJfCvS/PdjbnLpNrz/f+xcAvcB7G2zA
lr3B3pDELLGLDrrwGNsnXCr6XzeLJxU=
            "]], 
           Polygon[CompressedData["
1:eJwtledvzlEUx2+fqkcf/d0WpYqWqhYhYiRCQmyK2JRYL+wVKhpEgpgJMbpE
/QFmQmIkRszWiBF7i71X7VGrPifnvPik3+d7zu+Oc++5TRs3a/DMkHMuG2Jg
qneuHKNuxLnp6BnQBBpDUzhPLCA2Cj0SxkAZXm3L/4Wuh54cdm4K9IQe0JzY
DWID0InEH6GfwVMYQWw4ZEMNYg/NG0TuQKiGdx9vCF4S+iW6v8RhMLSF23gJ
xIaSP0zmxvuJVyeie5oGk2AiTLZ1yh5l/aNhLHzAS8arBS/QffH6eZ1rNayC
tRBEO9eAnJrwnLzeeH285reyfcYTa41u43XvzaAF3LTY38C5P4GOIXNVoI/B
LvRO2AxRxHL5Zg7MhSjmTcWrbvXohNcZukAlvN147xjjPZTBUK81k/wHIa1v
jORCFTiEFyaWCYmMXYy3kNotgt+xzq0jvh12wCnGyyCvBnkbyNvoNb89ue0g
QJ8grxc6yXQs+bXRyZAG3/C+wnu7L48Y85zdp8foJ9CG71tDx7Du5zteK3RL
uIYuwPsXq+ewBtaDZ01pjLEYvQga2TqXoGdDjtc6OrwUYsvR0egQVITUy8NL
4Hc8xNn55tlZy9j56AKva77KN1fgLMRFdL7q5BUSL/Jan6Ve58+w2i5D37L1
V7D+2+g7UA3/KN4ROGjnscLOehJ7ngO5YV2zs/OX+ErpTfzpsCCs88ve860e
6eTNw58PE/DG2/0vt56Q+Qul8dF30ffgDbyGt7CVWIhYZdiHPgD74TexH4Ge
i9y5PXjl6F+B/o3B22t5dZivFF0VLwWd6vU+lOBFIhqv63UO+eYT33yFb4He
lzLrx4bodOjNXrJgRFj7TvrHee2dWvYuRPE7U+pu79Y5O6NEe1e64/WCLHtr
pC+kf7p5jXWQ3qB+9SNaW6nxH85rvfXAaTgT6Dv0SvoN3tq8UrdL6MuwDaLJ
iZfzkLtltZB9S6/EeY2VWJ9I72+xmh9Hnwj071YbpwRdCjfgOtyEIjs/6R15
lz36KfoZvIKXdqZb7C1paG/cGPY0C3LCuq79dr4n7az+st+8kO7zrPSo7Asu
BloLiV22uytvSBW5/1JPSITDeF3t7ZY3PMbuibxJHwM95wuy5kDfGamtjC39
fdX2WGh9ImvJR2+CYptX/g99Rn+BC7bv/40H2uc=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlGtoj3EUx5/2L3/9aY9yHZJLMmwzc5uNzS7YhdkmUWxKY41d2E22XGMo
I9farCRTyyUjb5CUW6IQUfJCScklRcoLXvh8O+fFec7nOb/z/J7f79wmbGgo
r48LgmA/EkH28WhE70K/iw+COnRuLAga0E3Ym9BvsGeg07C/hWvhHPg9XA/n
wa/h+fBM+EwUG/wJWwdczT7H0S95T8eeik8GshK+q+/gcvgOvAw+CVeFQZDo
ZzgSMelEhoamjyLD4Er0emQIvIBvt+Hfx78y4Qrsg7Gnw2Xwbd2P9y74OT5J
2MfAN7HPgFPgR/Ar1nayT3nM9tc+A/kuAamCF2I/j99IOBHuhUfBU2O252j4
GrbpcAJ8FU6Bk+GH8By4AP4Mv0AyPbZzkUL4C7bZcA78EU7WvvB9eCx6C2c7
ofOHlifFf3JouVNedN9SJTe02OrucfAFvqnD3I1ejL0F+zzs+XAzPCe0OlA9
XMZnIu/VvC9ifQmyG87CthTeI7tyFFoNqGYee36Va+XnGDKC9Vl+l2+sF8IH
4UrsJXA7/3qK/y2kDX4ctRo4hc9mfNYi3XBZzM7Sis8W9BrPY2nM9l8Ef/CY
K/434CL4kOoD3+XwacUOXuFcAyd7TrOwpcIb4Ww4Dd7kd78dtX1KsRXwvldx
9lgpJrlu19nuRC1Wik+ex0r+i+GzrNXg0+n1uQ77gNBi0gEXw2P8DDpPvufo
L3eZBxfDf+KtTorg3/GWx1b4n9eV6ucXnBuxHvwRb/24lf/2Rq2utPbd99Q+
X+HrrO3A50HUelP9GAmt79SD/difeI+rf1O8X7q9d2bAPfCk0ObDlajVrWq+
y+tWvdYPX0SGw1NYPwePcO5zVk9d8v5ST02L2Qw5wJ7PfBZpzozzHClf6iHV
djZ6vPeI/jnKWbYir70SviuGt2O/x55rIhYf9YxmiOZJLLQzbsSeGrEzqJev
K54R+1ZzqsHrU3XYqBx7reajawOry6M+u1axXuE+mi06g3pkdWi50Rk0Ww57
nasmlnsvVHv/qmYGwav178DiPtvvmOT/Uc5WhnY3nVOzrg1bc2AzN9tjpXpS
3lU/6fi3o1sCmwU9PiuUR9Wt5tVP7v4fVZarPw==
            "]], 
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1:eJwtlWdsjmEUhl/9wicf3tcftWKTokNbShWtllaH0VaCRqmYsdqYiZEgQREi
YqVDkJa0UqPGn6rZ0kalNkFC4odNYoUE4To558eV3r3P8z7rnPN8vWYXZOcH
OY4zBVrCgIDjdPQ5zlHXccqgHCqhAvpb7AT6qt9xrkAzFOFN8xynFbSE1jAD
bwTjXzL2BbyCRLzBeGOgAL0ClsNzYvVQBzcgAi+CMW/Qr+EdpOHF4H1Bp5r+
iv4Gx+EYhOAF+3Sv0eg4dBO6Ge7AIfZaClWwhNhjvN+wHr0OVsJYvruOd832
FI4XjvceHY9OgAwYhvcBL1m+gdF2NtnrW1fHp+MNxYuC4ehGvFuu7kn2N8Lm
k3kf4T2Dp5BELN/uRe5jCnoqDBJsXbnLIeiP6E/wEB64ulaczSe57ITuCT0s
b7s4+06/3q3cYwm6ELbCHojFu0usyM4ueShGl0Aeed2GV8O4BmiEGLwhMAxW
2f3NRc+BBbAPbzzeIvRB9AHYa95ivP3oSegm5roNUXiRkIA3n1g0ejR6AXox
LDIvHkZJDDbipQR0D0MhFlbjJePloqdDFroEbwY6CTbYN2PQY22eBEiETcTG
ETvGfsphlJxJ6oBYjqe1nin34tO5/7i6XjVj66Aevlv+pU5+on9BsfSKX/sk
l1gZuj06Dz2ScRX8X+nXuk6z2pF5flidrrIzyXp/IYhvW4APsokND6heg14L
kyEObyZeITo9oDmc5am3A287bIW0gN6RnKmA2DJYDg78s7WyiMUG9OzS80vx
8j0dnxjQnuqD7gv9PM255H+C5XqJ5VLy2h3dC3p72rcd8CIhCg6zXo2r68mZ
LqJrXf2bbWe6hL7sav42Wr6S0SnwxNXelj0t9WlPRXiav3i8eT6tsc/yvdSk
5VnyXWzvj/RZqbwZcBKq4DR0IRZK7J6rfRJpvS2918byKu9eW3Q7W09qpzO6
C3SFiTBBasj6SfIi/RYjPQ1h9ubIeqfgDHQVHy/b6lhyc4/93vfreyrvRX+8
UAiz3psPC63HJAcJdnbZQzdPc5Bs9Z4q98xctX5954MtD0dc/S3IYFy67b3Q
6mULYzf79X464w3EO2t3JHs9j75g75nkQWoixNN9yr3JW3OTeIOrb2O1zRNq
85yzOsiR3xfItPoL5vvd8g4H9DdIfov+A0wsz0I=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlGdsj1EUh6/+/7Te4H1taa1KiEhESARfJIKIxCd7j9qrRatGrTQ1WjPm
l2qLiJAIiRUhqE0FlRht7PXBKLFDpZ6fcz/c3Oeee+65555xU9MyBqcnOOfy
GDHGitC5YmBY4NwN5puM68gaJDkXxp3rFDk3jb0K5E+QT/R6V+FJ8F34FpwG
l8O34XlwNXwfng//hR/Ak+F7cDn8hvkt4x1cm7u24ktz5iPINsCNuXsG+gVw
daLddYe9Uu/DdfgsPAo+Bhd6H+TPJXg0fBwugg8yLsLjA7Ope18jK2Gch99g
fz9cCo9jfzrjtfxDlsMogocG5lMTxkdkTZmbMT7DI9nbi84meAS8R2+A98Us
zm+xn+ftKM658G5vcyVcCA8JzOcTcBayMfBJONu/UW/J9DZ1V0FovsiPKniq
z9EO+B335XPvL+ba7NdhtCSPC9BJhFvBWXASnOJ5M/oh8a/H+iN25iAL4A/w
bHiCj/kV7FfFTP8LcyI675lnBZZf1cBlH4cSeK2Pj2KSDyeg/x1OV12w/qoi
5N4zPlb/c8lYAZ+KWcxVD3F0BnC2Let28GLOJ8O9kX3inbnovGAe7u9d7+ta
Ng/EbIgVv2cxi89D5oXo18dO+8jOrkJegZ0obm/U3qLAct0VnQ7cvVN9E1h8
ZWemagP5Fme+qZ5V843Q34sfF+CxgdmRjnTrYm+9s/z8xM4r1SG6tVhvRF7J
OgHeBP+J2RtV/2Wh5VE5bYH9TJ/T5Mh6TX3XMDK7sl/DuWqfM+X0a2j5ks81
8Dd4ruxx5gecoXeFVgPKu3pZ94fsTwksZpW+3h7Bj0Pzfw13VTF/9qycqmau
oXManTLm1c7W6kXpXI2ZTdnZjs5T5nXO6v57aLWnutJfoX58iWyJ750hvk8V
t+eh2ZJN/S/6rxS/XchbxS3mqpUc5C2Z+0ZWPylwv8h6SL3UJbK+Uw8Wc3Yp
vJ2zrXnLYZ9H/Q/dfB0ugw/5P0T5rUy0+tF/ssTf1R/d+pzfJh+SrN4aIO8Z
mY586AN3Z6TCy5Fle52OPr/q0zaRyfUn94KP+P9Kf1oP1u3iVpNHfU8pp4O8
XDb1J+hvPxdantVTv5kH+nv1lmO+HtSbiod6rzP7J0LrWdXGP9G827A=
            "]], 
           Polygon[CompressedData["
1:eJxNl0eUFlUQhZvpH7pnGOwmBwkCYg5gFgyYMK5cuPa40o0uzAkliJgASYKi
YARBUFAxDGDARFTJiggiQXLSQR0F72ddji7u+atfqFev3q3wd73ptutvrUqS
pGyUJBX9biyS5CfhZ2FzmiTL9btM2JclyX5hp+TtGt8GJPcqk6SNNrYWeko+
RThZOE04XVioNQuEP7W3QVgkebn2DtRZe7LQ/a2wN4szTrUO9raqxNwyrR+S
xJpv9L1S3yuEJUVgsfB1EXO7sFFYL3mDsEfYjf3C/iJs/kXYUcRddglvSdeb
QstKrJkleWYaewEya3ZZF3fda52MYedur0XvduFv2XDI/mIM+bDwneQ1wlrh
B9uM7fh5heWl9jljneWHptJfI3Qs4247hB+LuCM6n0jiTXZax6o0fITujZof
pPm1+n5W37XSsU/yXqFpGes5h7c9IPwm+VehXjgofCp8prWfC5/xjsIfQnUu
m/Kwr5NwjNC1jLmNWjssiTW/Ww/7GizXWwdjaRm2c4dGeaxhHN1NhSrNNxIq
QuMyuPQV+7Pg1GF8W0DgWPeXz2FvrXWgq7vmjvUa1qbWid1dhFJrmudxB8aQ
W+TBB965teQ2eexhL7ZWCU1sV8qccJTkZuhDh3lMLBAb8GaTdG1JI7aIsca2
A12pz3g6CQ5ydnt9j9J3RXtX2xa41yoPmxrsh1w6qo092vt48t8cvsrKWHPY
vGyN3ZWQ4WqrMsa48wjtra2EL1oI7SWP1Fjj//kUX/Yow6ZVQrs8bD1eY8cJ
JwonCW3JD+gQOpRx/6W27+Ya+UFnPyx5msYmOT7JLb8IWyVn+DgPn+Lb9XBf
+EhzHwu3SMdj2r9e6w+Qt7LgPFx/TpggvK25wVqzSePtpKNJJe7OfZ/S/Btp
nP9EEX5oaZuxnZgj9qq9p6fjEf/0sr/xa00Z8VQIDeZ/ngcy84K5/rJ3rOam
as259nkrn4Vt2Mgdjti+WvIq4RHJQ4QriTed3Vm4Cr5n4UveHLuvE66F6zqz
Rx7yNUL3PMbg6JNaX58Gdwt9DyckpK9PGTGL7VX67kZ+kP7lwkM6+2FhgPCK
9j6kNSs1viYLG7HtUXwpzNf8AM2vy+LsLtI1JgkbqA3VzmfExTta/7vWHxRm
kRO1Z60wVfK0Is7AhiNno5M103wWHNninA53iEtyCWdwFnHfzZyEmw32Fxyk
Nm3Jght1+p5NbiIHOk9/X4T8axY5+8jY6jQ4x9quedyNO/Yrw4f4srlwsWOA
WGgGB/KQiWVimrHN3MH17WAW9yA3bHfdIL5YnworJd8pzNX8HOF23//fWElD
FzWB2kANp5bDEbiCfbwFNmFbC+HSMmy+gpyXx13OknymcLZwjnChcIHQV7jE
ch/r6evcxls2dWwca5/j6xOcF8lt1PRTnecamQeMVZz3mKP+cubrusuUNGx5
r4h3+VCoE94vYgx5ThExRy2D/8Qi/QC9AT0GvQa18hH5dlEafunm/EYMEUsb
ssgp5JJPhFHCDK2dLoyQfHUZPrzGccXYcGGk1/a1L/DlZc4b2EONbe+8h7xf
OFryi8436H/ZOewj19n5wrvUtjRigtggB9fav9Ta/e6T3tLcTOFV4lGYLEyx
jN7XPNbCdY13vMi1qa10tatEjSIu4BYcg5vsxTZ8gA7WsJYaQC34UmNLNLeY
nqCIGCKWGGPub/MZTh5yrf8pjZ6Amr81i5ib7XfcBuezeNcPioizQ1p7OI0e
KckjNtCJbnI8uX5DGn0KQOaMetdpauMZ5jG146kk7szd52nNPMfv9iy+F+p7
gTDXNnyZBmew7Ysi5ug5FphzdR67Ubn8pSLe9GX7vqXrLxyAC3Bukf1FTF5m
rtynvffXxNhi+49+gJpAbSAGiAV8gC9oztcVsYa1+Jxaii5ieXQSOunhHk2i
B6S34807VILzcIFcNjQJH69x7tzkfoTcQx9ETejjWO/n/E0OubyMXoGa09J1
C26x5wLnCjgO16kpd8ieGUX0j9QE8nWnPGzF5t5l5ETyYAfh6DxydZXzHdwk
1oYJTzvmal2vdqfR673meOW9iPXJHtvh/wHUFGoLPsE3ve0vcuB55BrHDf8b
dmcho4O9jGEztWZ6EXd5s3AvnMZ3G/dhcI18VedcNdccgdtw/j3nrgP+H0Xs
znLsz7c+csD4ImIFPo+1LnL9XPNzlP2AXvg51vFFDIx2rqxzfWAvvW+1/drd
NpJb6TGxnV6KWo0N2EIdp9cYKjxWRI9Ta/7cXRM9X7NKvAFvcY/W3F1Enaw3
iC1ijLlnhO/TiEFicZPr7USN9dfc47yX5MnkQ+E+YhDbhQck34vf0hhjjn7t
SefgEQb5ipzKHD0cvRw95Q014SO4AUfwHb1Mf31PSKOnwX9jhHH2/XjLmXu3
cb5DE/dxI83Frc5byNi9xe+ML+4qIs7wCdx9yXdjLX0dvenzwgtFnEG/xZtz
NjmT3EkPzP8UgMx/JP53oHt2GjHMGfRE9EYDhUFFcJh8+Wka3OYs/vv9kMaZ
+BTfDkqiT+YNHiyi5+RtyOFfONct9Bx7NrovnWT/4u8XfearafSE2EJOIw91
1r265HEmZ68TJkoe7PdmD3uJx/OFjnnkBrj3iufhIL0vvSZjzMGpeY4HeqH7
i+DFA7aVmCK23i6ifg61fZwJ19hzhzl7j+MUXeikFvwDKqJ5SA==
            "]], 
           Polygon[CompressedData["
1:eJxNlFVslUEQRpdeyr25yP5I0CIlWHiEoAkEggeecJfiVry4BAguL1gCBUpw
ggWKBBKKFBqskiBtkeIJ7l7gTGYeeDjJd7/Zf3Z2dufGJ0zomhjjnOsJsbDO
O1cQcu4h3IFhUedW4m1H90KvQq+GOegaRZ3rEDjXETpBN7wtrDsJp2Am6+bi
xRfVeGfoAk2hNF4AJWEaaxrjNQp0fU28Juh5puWb2hHn6kB+2Lk8eAbn2GM/
e7Qk3gJaQxXWz+C7o/hHYDz6M+uOoZsR98RLkacKxEFtvFpQD0pZLW3R1dBV
obLli+CFYQz6Nfmi6HJ8XxZqRrQXDfByqesuLLWe9WT9FPRZ9BmpA/rg9Y9q
/duJpcAOr32RGpKiWmtzq6su1Lfak6w+OedMdDt0eygeaE1j8d6QtwS6B3or
erbcA8yDqZCK149YEno6eNlX7gR+E5tI7Adn+A6j0a9CenY5x3F036jmmQaL
YCF0t70We913G3oP7Dbvltfck4jdRt+Bcei3eB/hg9W8AH++17eUHNLc76E8
550e1X5L3yVHIfFYdAWoGNH6AygTaEz2qoyuJP2CCDmm4FVEVwg0FsabjLec
fMtghdwF3/aO6tv5hC7E+wN/vb7/FIuvQa/1etdLvOZIsTnJQF9Fv7Q+Sj8T
7S1KniLsHQMT8L6EVMdCMahutU4l5jlXENH+JttMzfJ6pzKrd/GGE1uP3mA9
lfv/jv4lPfcay8UbQWwjepPXdyLv+Av6m9f1ebIO7llemf2Ggb7rOTbHMqNb
iG+GrfYe5D0f9zpjiXaeVK9vM45vZuNVlxmBQ/gHYQDeedYdRg9EX0BfhvT/
PInvQu+FfV5nT97iJ/Rnr7XLzLeCNraXzIS8tRA6Bn7Ze46T3tpdV5X5htOs
OyWzCRmsG0TsgNf/FJnPtJDW+oi7K4Dz6Ey8d+hrpoew7jr6BqTDdbxrcMXy
FeA9hMfwFG8k3jP0E9PP0S9gG9zHewAnbD7lbXxF/4Qf1tOX8Bw9ithv6iiE
+3iOsxWBPLvnm3jZ6KHobHSO3Wu+1/W59m7S7eyD0ZfRV+CS13uQ+8ixHHL2
NLgIWXZuuf9kqz3V/hcGWN/k/2yn1/v7QI3vwUV0nuR/+S2/34S1P9KLb2HN
fcH2l9oTrLdZpuVMmV7vL2yzLLNSA/4BbZr0bA==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1lF1oj3EUx5/mKY8/5flzo4Q078Ud5W0XIy8xZvMyJWzzlrFlWMyE+XuZ
l21sNrM3e9+MuBAl4UKRknJBygUlJa7kJVd8vp3j4nQ+z3nO7/c7v/M750ws
KMkpTguCIIUMQWaEQdCKnhcFwRy4B76G3oPsRZ7GQXAhEQTZ8HV4Fn5N+MxF
p/hegv0s/y8iG+BebGfghXA2XAcXwU/g0/ACeJX28XN1/ins89FZWosshauw
Zf6PDT3FWesUXzPyDN90dCP2DK3hexn6HGtb3GdYknV8n4S/xnYvxfMQPo99
NdwOJ/EbgG9gu4xshe9jb9Pd4O9wDVKhfbGt4P7tnJsZ2Tk67zn/L/FvC3xP
/nAe3Babj+IemrT8KA+HsWewvpN9VqKPev5PoGvx2Yy+i89F5IjWYzsHl8NN
cDtSDf/AtgmZBB/3u7ciL7BVewz98PLQYs5CL/b416K78BmAd0YW80b+D+Lf
4nm7Hdsa+etfju4Er0IvYs16xR1b3vLhfZ4H5bAE3ojPIP5F6LOqkcD8aj1X
xbHlczf8GK5C9+FTGVpMiq0ssndMYbuDT3do9o7Qamg6sg17PT5d2LPxr4Sn
Yt+OfTMyGT6h+3ndHNP9kGnwjthY/vlwKmF77oJ3hPZGeo9apBu+gC7njNuB
1UyjcgzX6zykI7AeUG71FsOTtqfOKvSc6C7fYnt77X/F+2yNzvO7qAcfxdYj
6oMyeIrX6kDC6lM18Du2+6o3Z7JfN9yJfTy+1xMWWyH2dZ4H1UmPcgVPSFr/
6h2bY1urvI7Bno70626qo9j6UDnUnjXwT2y98C32L42s3/WOD7B3JCwff+ER
7NPn+3QiDfBobCN9f91F/lfgUfL12MbBBZH5h/Bbr3/Vba7XvN5RfaS8XY3t
bdSzv2LrEcX5x3tBM6oVzsf/JjEXRzYHVMt12I/5DKnyOBVPGue+995XD070
u6gmK3xeaQa+hg9oHiWsd1S/X3zuab4dgj/E1ueaIeU+PzVL1UfNxDM7svhV
Y7nwS3xKQ6uNV/B+uAF+Ax/UfROm9b6HQ5vVmmkNsc0bzZM89vnkaxv93VUb
Y7nHR99fe77zOaPZctLnhWbpZ7+XzvoH9WTRXA==
            "]], 
           Polygon[CompressedData["
1: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
3p8zctYZwv3R7gzuDnKEXPkPhC04TA==
            "]], 
           Polygon[CompressedData["
1:eJwtlFdszmEUh/+aSr58Id4PCSFGUSPRuuHCDjVj1KgWMbqL0hotrVUddGlR
urRaSrVFglghEiSuJAiJFRIjiHVjjws8J+dcPPl+3++8/3ecc943JD59XlqQ
53nR0B5OO88rCfa8YsiDer/ntUErun/A80JhIDQwbibeLFgEe/z6bT76EPoM
+ixcg1V4+/Guo29AT77vAb3gKLFmYq/wX0IVegPea/RsGIMuxJuDngtN8os3
zsf6MAv62Dwt8i3/M2Aj4zIhC0YT20nsCvoyXIVU21Nnvq1BV8MBOIK3n3iF
7AUi8UrxDqHrnZ57IV453jDWCYeRMAWvgFhH5usArZazTuje0GTnlL32hX+M
/QtB6EpbV8Y1o4/Jf/nFq2PMQafrx+CV4Z2QmgRrHbJZe7PkgXgE3kQYZecN
wx8KccQGST39mt/16Nt4d+AuNEO0zX0c3QKtdk6p60n0KadnasELYd1+Ae2H
Ecw/3Kf7lDki0I3o+eh5MNvy12i53I0+jD7idM9Sm11+rXWk0/VjLL+yhzbo
zjrdAto3TZaXN057pBqdgfcWXWP6PvoBPITzcA4uwnJiexnjAlqXNstjAD2Z
fU+CKMknXgnj64hvQ+fCDskFXjmUSU2IbTVvp9PaF+FNlX5FX4JCdBHEQQWx
LqxThY5njXRY69N7UiB3CJ0Kq+Em3hrpR+l7/s+FiTDBpz0s92kGegWkSK/7
tC7SdyV8M93updzPYsbn4oWiF0hupa6QDrG2r3Xo9ZBmOdrn1/haSIbB0tt4
K9ArYQd6AN58dJTTeaXHYiHBxuczJgf6y12F8TZ+KSyxOWRPy2x/A9HhEGZe
kdM8FhObZueo9WttHqEfwxN4D+/go7098l5loxPRSTDW3g+p15Zg/eYpPIMf
Uku8BmI/0b+shnKXN6O3wFZIsvsjZ5J8pDjNs+wrB50na1svytsld+qe0z6U
ecvxGon9Rv9x+rsH7zBeArVLhFKnPVdr+yyzeqSgkyUn1rud7b1osn7qGtCz
f4BP1kvy/spdyERnQ5bdj1vyjqCP+rVvpH/kfdzkNGdj7C7KXblgPRxr/SDv
VDsIth6W9b8Q/wzf7IySxzq7F5Lf5/DC6Rstb3WlvT0vra5yVyS/253mUeb5
Ct8tP5Iz6ad4qScMsT5cjF7ktL+kD6Wf/gOpGOfI
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1lFlsTlEQx4/2fsl1PXDV8mBJikRVLCERiVjiiXiREokHEksiHiyRiCUS
NDxUokGkyoMiTYouWl11377Sar+2utCEItIi9EERakn8JjMeJud3/3funDkz
c27i7kMpB+Occ+eweGxH6FyX51xZ4FwHNiPi3ABaOdyHfgDehsXgErRM37kK
vrvLWoQ+LqKchX3B5zraRLQ6fD7wPICVO43V6+m3b1gn4VMPj2ftJG4jXEWM
e3z/i/eNaHWBxryKNge/udgduB79G3omXAu/hy/Df1gbiOPwe4IesKaht8IT
4Av2bTUu2b7GH+WbG+iJEd3jNnyNd6/QT8OVmIf+GN+vnu57M9Rc5mHZ8C38
q4jZgE++r3u1oC+M6LmSLLbs8Rb9KX5T4Rh8n3iF+ERZY+gz0V+it8FT4HY4
gbUGnxxfzyU1a0L/iy2Be9FapYeSA6ub7NxS9L5Azy51iFrOksc7uIxYs+BB
+De2GG5DK8C/gBhrQ+2H5C/67IjWVuYjJnnA/fhOt9wSrI9SkyGbKem19Lwr
0BqMopdankWs+caifcYq4WZP61QL57HPiKe1HfI0t4fwWV9rOA2/HmIOW/5S
h102q6U2z1LPz2g1nsaU2J7F91mrA42djs9em+co2h640+5Fqq/7XmS9gr1A
P8L7nViH3Yt9cJz0He7BkuEfofZU6jwiOcDD+F+CC21em9HK4Hj7ttjiSA45
8Jinc5UnfYKb4EpsED6G1m17jYU6nzLPGfB+iylzm2V3NsPXXixA/8n7Z3AL
eoudS+oss1yB/pw4J0Nd5bynpHe8i+LTKL6B3uPz6I8snzNwu/Wl0+ZWZrhL
ZsnOIve61u54k92XZmLWsRbyXIi+3uZf7ki33Fk7u9RK4sscluP/0eZf5vyB
GD7rQu2p1HkDXAw3wVtCzfk1fNz+b/3wCXi53cNctBVwLpwHr4TzZE5l7ixO
kv1z5N+2KdQ5lhlO97W/8i/aaPvKLCebj5xrDbzI4ste8p8p4ds0X/soffnO
++02e6V2LrmPq0Ltu+SfKue23CTPokDv/eZQayh1WA1/CvU/IPd0q82qzPCy
UO/e/3M1wimhxhGebz2Vf+DRUOdBanUY/gd2egDd
            "]], 
           Polygon[CompressedData["
1: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
8DF8jXd5I+FfLUvHfw==
            "]], 
           Polygon[CompressedData["
1:eJxFlWdszlEUh/+oeL0SXFFfrEgk1GitIPb4YiV2Q2KEVpBYH2wSVIiS2kpJ
jIQoHS+qOrXVpbtoic0XiqqEELSknpNzEh+evL/8zrnjf+499+21fP2cdS09
zwuH1lDkPK8QiqEdRqnf857AIAl28rxKn+dVwSW4CPeI/Q7yvCzyL0Nv8qrx
sohlw26818Qz8aLQe6EA8p2u5Se/hNhO9FPyjtu8Mn8hfhNeIrEA3JCxeI14
19AJTmM/4Dv8hH7M95CcO1BN3kK8RbAY+kAZXincg5vkbMHbDFvhje1zG/oJ
Oh29Hb3D6V7+BGmRmvnNszE16Fp4KzWQWtgeatD3+YYS2IS30elaUosMYrno
HPueJpvvProVY++gMyATHuOF4f1FNzs9gyjbq6y3D71faoluQd5N9C1IgfNS
F5mb2GX2cQV+4YVYjWSvjVCLDsVrQv9xulYqXhVjw9ELnNbxM3Qjr4pYA/oL
fIKPtk+5I/XoYTBUzgcvgTmGo6dIProB3kE2sfF4yegAegJ6opynjRmIDoUw
GOF0DoklEhuJXgtrYIOdVRqxsegxME7uCt4NmzdgehJ6MiTZPDL3YBgCfeUs
8FKI9UP3hxUQabVtybetRI+GUU7XCtje91LXKIiBSrwlxG77Vc9Dz3daR6nB
e7y7xKaip0mf2dxyXqlOzz4OvpKXS+ws+hxEgyOvI7S1npE56sjLQU9Hz4A9
0nM+3afUNplYttP+zLfekXsXTc4Bu5uv8E6j4+AMxPv0LkVarZKIp8Jtq/0u
GyP3WPp7j9OeeY73DB7beczCmwlzZG3rN+nLB9Yz0jsRTu9Sd7n3rFsgfe/T
MbNhrp3LLRmH7kxeGfoh+hEchhg4arWVeyW18tvbdRB9yOJH4JjVTM5AdHvy
OsAHq2MVXiVUQxf8crxY9nMKTtq5XPDpvPI+JqFzIQ9e4r2QHrfvkT6psXkq
0GnkpPv0Hcq3b5J7FwIVUO50/WD7Rvn2evI+Q6HdTXlT5W0t82nPvidnqft/
56Rnl6GXO/1NtXcwwvrxOroIiq3HnsFTp3uX3q70a5/3RPeArubVOV2r1t4j
6flVTnui2N6t1U7flwHo/tAXHthZBVstpR61Tt+6IDwftLGx36S+Tt/zEBsr
NT8BsRK3nsi3/5yrePFO/wv+AbwGE/o=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlGmIj1EUh+/gn/+8Q3RlTQr5ImSnLCXKWnbzwdjGIIXJFrIvZUn2LB9s
kTVr5ItEyZJkXwYz9n1nGIzt+XXOh9N53nPPve899yx1c/P7TSgTQliIlEX+
JSEUoWtlhjAohjAiFcILbCvRt7CXpkN4zXce371Zb4Nkw0+wrYbnw1/gP8ge
+IZsyGz4I7bfyD3OqcT5z+Ah2Huwfg9uBdeE+6Cv4NMN3Qy5CPdC32btALoO
e1u6T3t0C+yD0I85Y7L+ib0negpyEx6H/sXaevR+fJcgc+HP2DbrXHwCZxan
zf83upS1DawdxHcGMtzfYRM8z2M8Cx+Ey2Sxnf2F7K2GPuP3zMiy87cgS7F9
YM8EeDr8Fh4Dj4W3orchy6P56nsZ/Aaf0fBoeA6SC7/CNtJzMdN9tecU67M8
Xy8Tu/9G+IKfqXuchB9gbw1X1xtoD/yVeJ9iz4G7Yluk/8GfsH1HlsITsf2E
C/hvFjGuxXYXXoIuz1pz9J3EfNbAu7E1RQbCjxLL7yX8b/Gv3GgxKJbBHpfu
/C6xXE3F1t/f/HliOVau26Lf8z0ePY31CtHqoADbfa+fqti+JXav/KjLhrAX
vg6/5N9Xg51ZhHTH3ki5SFs9j4RXKA588tGFidVgQ/e5jL0QnUH8y7BPilbH
qmfV5GBs14LlNdtZtnqsPVJ/ZVlOR2Hry94uXnvKzb6UnbMb/S5te5WXJvgN
UG3D21P2/uu9nlWf51nPRFooH95fqqXT2NYhC5Rfj7eHajVaXIo9A17p9aya
V30q7gbYHibWQ+Xgyp5fnR/9X3rzc/ChlMX13mu7frTeVxyX4b8+B65Gy69y
Vw+uGK23VTOqyTZwbfdXvm7CL7wf1Zdz/a0Wo9v6m6iuOnjva/7cTluN6a3a
ee1pJvzQbIJ3eVx6h8ZwR69/zaW33mv9/L/D4F5wZ+8FzYpOPsfUFyXIKnhH
tN7RHBsQrQ7VX7XgjchCuFhzw3tWc7TE73Oc9STT+vSw9vp7ap4MTdkdcqL1
oOrtqGaFz1jl9LXXUl60Wao92fBOz3uxz23d81i0un3AHaqg7/rs0oxSX+n9
a0Rj9dqTtL2bevmE95TmwBH4PyWa8Wg=
            "]], 
           Polygon[CompressedData["
1:eJxNl3mcllMUx5+mefK+Mxk57aWSfSdKWVNpIUsLIinK1qJCSbInpZ0SNYpJ
m5J9C5FdWqd9plQolOwfEll+X+fMhz9+n/fce85z7rnnnu2t371fh745SZKk
5ZIkV7+nWpJcmibJUtElmSRZKawQ9tV+gXCccJb4zYTjRbcUzhbaCOeYf7NB
OMVcV6uQgXeuOW+90MRc5iyhqdBMaB4YJt33pc6bI0wQPVF4WnT5/CTZKtua
av2h1u2Ey0R3FjqIPj/sZw9eacbvwh68W4TRoscIt4peL8xDt1Ai+mZhVOoy
yKZZ2Zy4Ddjyp/St1Xqy1q9r/RA6RQ8SHha9H/cS/YlkiiVbDT9ofZpQw9xn
+K650ED020Kh6MeERZwn5Ao/6NsfM063FW914ntXat1N+E30HqG86A7itxfK
4QvuL3QNuc6xB823+bpPiXQVYaPWy4Xpop8Uis315YQdFYQrhC7CLzrrV+Hy
0Imuq+IcZODtFnYKxdLfSfoah46OqduI7p/EX5P4HrytWm8RjhR9lHCE0F+8
G4WjRe8N+QFajzOX3ZxxOb5ZLXqVUFl0FWGhMCV1n+JbfIyvWwgN44w2olck
fnZ9rQ8UtoneLtSO9yHGa5q/ITlQEG+7JuNnclZV4ee4762Sv8vcZmy/STg2
8qJ93L+t+ZvyjsTZAOF77Nf3vcXvo/U1Qk/R1ws9RPcTRqQeg7l6u4Fa90nd
J/iSvfJC35AdLwxMPSaJzd8jTqaKniZszHhOkAsXmPOIpcfMZdCVI9xgrvO3
eNdCc5ncyAfi/fB4T+7EXbBtd8TJFPNv8Am+GSzcLTrR9+v0c5fWI7S+V7hN
9BBhmLkMsuzBq5j1mCVWlwh/RP71EL+71pmI56FaP6r1HfE9Zw6JuCR2J5vb
dIDQWLwmQj1zmduE2+PbB4SW4p0tTBUKpH9fYan2l5nT2IQt7FWOfCfHyfX+
wkzRs4gB0dvzFD+yr4vWHbVeJ8xNveasjzwnt6k5xAS1drHWDVKvuRneSfSF
Qp65H8hdcpbcbRv5Tz6dJ3of4fzUv+Hbz6RvSeLxTO0md5YnnmPk0OcZz4V2
qddx3n1G6nfgLpsyHjPEyoWRr8g3FL9i+GS26NLEffWe1u8K7wsfmMfS+sR1
optcpTbis8rxnsQosTkubGgX9YzcmSs8JcwXnjHvAfSCh4VnRb9hXofJ+7dC
dk7I8c2bIQNvWtRsajc1YmHYeKboM1K3vW7W78Ib8VaXCBeb11DqHjH2CH7O
euwtNq+dvMdH5m/QTXTXyHfWHSNfvww/knv0pvbmfbFNvCPfnBt70NsUOzV1
xubEz+Cs76TjW+FM876ZJ35WqCZUF040r3nUukbCSeZ70Ceb1zhqHX25tXkN
ptaTw+RycdyHM//O8x5ML16VeK1qFLq/Ev116Poi4z0enchgI7bxbQvh/tR7
Or2d+lpLqIOvzWsqtbWSsH/4tULW35G3pz63iH5ZN74jh8ld6vaD5jWPWjfB
fCZgNuBNedtV5nfiLkm+60AXNR5byGFyeYWwUjjBvEc3CL/h84+FGll/C3oC
uUROlea5D8ltchzfomd5nLkqdJf1WXj4ipwjzvHZWGEMd5duE9aazyLUh9Xx
ZvgcX+/I+B24Sy3J1s56DpALnyYeB3WELYnrQNcC89mCfviKOV4WXgve/MgV
9DxnHtO8Ab6fF3vw0E2svRjnkYPPh92VhHfM854z1/BGYQt5R57Rix/XN1Wz
bis6Xgx7CiMfXzIHNDk6LmReEKpk/VtmpCdS14XORXE/cnZvnucwubwxcX9u
1LqUWBFdP+szKXPnacLpAWZF5kN4Z5jPkuzBaxxvsCNmm5J4H3xcL+u62YPm
jIYRr8QDOXKPeU+jlw0Nn+N7+khBvDk+xHfYTn/8O+N1i/4D/VfGaxh70Myg
1DH2Npj3kZK4J7pfNe9RZWfgG3y0IHKEXGFWnWQ+kzKbnh498TqtrxV6Cb3N
78zd6ZFDwg/E4mD7b49eywy0M+YA+hiz8yDzHs2cSI2n1hNTk1Lv2cQaMwJ9
+XHe1XwGYc4oEqYLd5rPAvR0+jO1gZmcGk+NYGZidurFzCT6SWF8xA49xeJ+
9Gfqy7Q4Y3rI0qPp1ZtkT7msn10YthSFj/BVGnWpKHgzhJmhpyjoWUIn89rN
zMxcfL/5XPNnvOOlIQOva/CYfZhpkGHGZdZlhqOu3Rdxg57h5r3oInM99CTm
xavN3437Z837PrNCfvwyO9Dz6f2zzWcl/L8nz9+GWX5P9OHhcRa2Envdws7d
MSdWDL3M4cwCZWdsjjl+RNjJt8QyvhsU8ys+HBq5MCzOYcZl1l0m/jf65lCt
+6U+MzA7HKL1wcJh5vMmv8jkxNzLnXl7ZmZ8gfwt4b+D4hvOZw8eMUAsMH/Q
e6i/rUW3Ekb97wx0M+tSm0eb1zjydGLkEHHBHMD/AOYYZr/qsTcp4pQ6Wtaz
6FX0MvoWefZ59E3+wzCH8b/hGPMeQu2ghiCPTdjGTPpA6EHHF9F7R5rXQmzE
VmSYc0bGtz2JjcjPXRnfGxmyYyNmiB1ynVz6t2Ym7pOxsQePnk5vh6Y2fBt9
nv8IzHXMijcGjzN3xZzyD01UM1s=
            "]], 
           Polygon[CompressedData["
1:eJwtlWdszlEUh/8tjbdvi7pqtSVpjcSmdhRBYq9OowTVVghK7dKloiVWabR8
QW3S2uMrMRNCaKmqPWqV2qvEc3LPhyfvL79z7/3fcc55g+OSIuZ5Oo4zEbyg
lo/jHEU8MI4T7O04IbALvRO+uB1nFbG96BI4JBMYH8iYILiBdx1uwUFifxn/
Vefk4eVDgcZvwm1d4x9jPkEaejVeNuTo9zLxctFbjV1jB2yHzxqTfa2HXega
vPrsww882VcxXhmxcmPPswcKYT/kEvvB+Du6V9mDnKkU9hl7Rtl7FrEDOkd8
0VvwfhK7hL5o7Lfkzi6jr8g50X+IX0VfM/a3AM/NvppAU7hHvCveKBgNdRjz
DC8G3Q3dE3rBCViH58GchuAP8XgJeG8Zn4ieCR4QjjcOhsFDYvdcjnMXnkIU
Xm/GLID5kKzrfmfcAHR/+IhOxRuIrgd1jd1nKJ4fOgnm6Rpr8b4Ri0BPQsfC
THiH1wGvPXSEEXiP8FrKXPQHdGt0GxgKQ2QMTCH2nFgIei66Sue0gmrdVyY6
y9gcSYWVUEksjlga+jV6BnoFpKj3xG3P3gndGbrIOO6jEl4Sm0ZsOd59dDe0
N9oHfHXt6XgxckaIhSjd6wti49ETYDJMxXvFml/hG5Tpvcm7uoxdV95ouN6H
J7oWtIO2xt7ZcH03T723x+jaaC9oBj2kLvEC0IGwGBbBUr2z98RK+XYJNNLx
5W4bXwLL9A3kbkVvQG+EJH0XufvF6EUwR9cLxxtn7Dsnas55kO9F6LuSH8bW
mNxfd7ww6AvG2D34QxPJZ9275Ph4zRfJm37EwqAvPNX876e5uBKdjs4w9u2l
5jPwNqE3G9sXZE60l33XUGNrp4+xuf5EY7J2ou5f8nMWejac1Vr+hedDXfnC
cc1tqQupvZNQDEVwTOtYavuU7EF7yGn0GWN/c7U3yNrnjO1F0pNaeNs7O29s
fkie1LjseaSfpRibh6805yS3q4i/hy8uexdSo5GSb1orkovRxvacQrzdsA1+
E7tg7Lc8tA9e1HdoDE2hF14F446gD+sZ83Wu3EEeeivkaJ0H6BvKnCB0c2hg
bF8o09oxWvPJ6IUwUnNYens6OhvWwGDGPORMFTAWHS/v4rJnl3qM1HNJ3c3Q
+Bu39j0YZGyPqtb/DFlP+vgR9GHp1/rfI2uPMTaHE3SN19ovpJanQxz8B6tw
+s8=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlElsjVEUx6/yXt/z9LX9Pp10Lp0nlaiEUBIJEUKqIgRNlDRppE0QCwuC
RCIIsREhEWwkYqhSC0sL08LCsKBVnah0UB0QtPxOzlnc3N/933Pvd78z5e5u
qW2Occ6dYMxkxEacexBwbsJzLhp0Lp5xznduNvpT9AA8zN59OIgWYTyHO9Fq
ws71c0cVcwL6B/Q8O/sM7sAmDR6EN6GnwyOwg0vgQr51By6Fi+C7cJTxFpso
Whh+DS/m/nmsh+FpT98g98ey/4R5hCszOD8H/QXrLmzmy3m0s76+rQO9Ek6E
O+FFvs4fGUvgesYUnMn+NrgbToKLGWPc38AbUuF+9HL2l7IeQl/LnMl3shh7
0dsZFXAltivZ+4rNGubHnPsCP2Ie5H2t4ltsBuB78KyIvl98G/L1f4fgWjgM
P4THzJ+iT8Eee+/g+IjO8q33zEWsU3jDDV/Xon9mPsA6Bj3X/isbvozWxPgn
MeKd+eiJ6BfQGhjT6FloqWjDTnNkS1h9u4H9HObv6EnM21n/Cej/FgfVbwXM
5Rbf2+y3MGbAOWgLGAnweV/9K/b7w5pXvdyzwld/tTPGPfWD8E9P87YX+2Js
C+zNxy2v5Js37az4vBqbkPlwkrNl8A/0ZvQ8OBb7ddgfYv0LfSHaMngA9iKa
SyFs1mNTCCfD1+ErjDK4Au0qXG5x38nZSc42hTUvJT/r4Dj4m9MaSMauj7nG
1xySXBL/R83PG+EIe2+wicO21b4l/tkHOzg7oveIr0rQDlocRT9sNuLnUqu1
W77msOTCal/zVt53ET5qcZHckPhOcLyROcXeWcb+K/On9IUdrP8yZ7C/HO6x
emkzG8n38YD+l9R/tdXUXGwq4K6A+lZyQHrOEbQ+6zNSFyHrS6Oe5qTkyTGr
X6nlfF/zXGJxytca6uZbL+X7nr5D+tU1q0eJaZvFSOLlMY86jb3UsvSBQvbT
LIflv+SfJBa/A1oHEscg9qnWo6TueqyWpX5961cSL+kH4t9LaMkWR+lp6dbH
NqPVmR98tCr4k3FJWHNb+p7cI3Xa6GueS63VW17J/XvQt9pZ8W2W9TGp2THp
NU57ouSt1OhJ9neFtT+c9jW+0tNWwRkWU+mBeZbzZ9D+A/odu4M=
            "]], 
           Polygon[CompressedData["
1:eJxNl2XUV0UQxi/g/ePlRdH/ohJKCSgCgggiIAiIoFIKSCn1CqgoaQcWdndj
JxYWdmGd47E/GEdRQSUVQcrAeH4+w3n98Jw7d3d2dmZ2dma2aeX0IdOqZ1mW
V8uyrfQ9osiy0cL5KcsuECqFCcIQjQ0VeopenmfZMqGH6EuFuqUs26C1YzR/
sf4vivHLkmWNEuYkyzy2MC9rrtT/kfpfq//q+j9B/08KrUTvITwleozwu/b6
QxgveqqwQfRGYYboHYTPRf8gGW0l6zj9r8/NAy/7liUrlazXFGFdbh54DxMq
NFdbGCp6kFCr5DHmZknmr5l1QrfRwiat/U04IvTHZ/jqwmSd0b218Ez4gr2x
F5+whrXYhG3DtHa15P+t/6P0X0P4RfQaoST6fqGJ1jYVHhZ9iPgPFk4UfZJw
oOg+hfUeLBwqrNLanySzr8ZHCiNYw9rkMdZs4b1JuFG4RdhFe4wM/bBxuOjF
5Sz7VPQnwjei+xfWgb1PFgYUHoM+BR3QRThN9LYln/mc8MPFEVPnB31J7H2D
cHPowB7s9bHwteiBhfdA9qnCtxp7T3OrMts9UWNv6f9NYeeS9f2ubBuxdZno
pcLeojsKP4l+QbzPCytFP6T1LUs+48rCa9mjT/gJnhXCqrLX4pPDhRHJvkL2
j0KHwntMEMYLD2juwWTfDxcOSj6Du4RXtPfLwh3JmCvcGXOVIYO16PaDZH8f
e2zZ60OtXZp5T3yNj/ANPueurckc8/i9sfBR+HPX5HhgnvtTXf9rwx8vCuvC
DmQTg8QiMUgsrhW2Fr26bN+xhrWbhAWin+OOlu1zYo+Y4Sywe1fp0lzon+xX
zo47NijOvp7o+iXHAIBuINyaDOiGwm2i21coPrX+Vcm/W//jIn9wR7gr7MFe
LYSByWe+TPNP544F7kDNkn2AL5Zo7H3NfZDbzy2T4w/9d0v22ccR/8zVEl4X
/YZQOxnQC4U65BPJ/DmzTdi2Z+HcRI7aPRnQXwitk2Pjl8w+wlcHEHP6X6n5
fsQmOmb2+eqIBXQlBogFcgK5oZnwKPqKf7H452t+ueYLjb2WW2d0Z0/2/lJo
K7qH+FeI/zP9l/X/c9mxwPkS7/i8sWQ3ivMgZ9eNfHp5cgxtjHz7j/ir6T8L
u4h9xv6OcXiJEWJlH811xvay7SKWfhUact7CzuQj4XeN/Sb8KWwuO0bR76WI
OcaRiax9hacjB5N7nxUaCbl03apkefi3d+E9Goauq3OfwfDQd0PUh7/KloGs
E8i5hWly+6bMY5tDN/buIqwv29/fa75mhfV/I/y/MWzZFDqzrl3hGCEuWiXX
TOoEtXSsUC/5rDiznURvL2wn7Ke57oVp4q5b4bEmceeJ2+ZhY42SYwrbqZd1
hR2T5ZVDJrKIhZ0iPohReLFpeeb43hxnsDDiH9uwaUPYxT95j3tIXM6LM68W
eZD7xhlwFuiEbu0L+wDb92AuVeWdmpyXsCJ3z0HvQc9B7/GjdNq/cM1vU9gm
9G0mfJVb5y5xJpxN05gjTog9fNQkfISvuNuLcuuxe9yTNsk54Jvcc/C0iDX8
b19h2Z3D7+yBLq2FFH7uGHUBu/LkXmp85Al6qvai2wl7wyvslTwG3Sm+zHUR
ugbdQdg3xtDv06j3XYuqNfB2C1507Rxrmv7PbmzZJ/aBd79kXakBNVKVzu/m
zqHY0jX27R91GZnIPjj6gm6x94CoS91DLnWK3mC+6CeEGaJnFp5jzcCoZV1C
z0Oir5gXsURueyw53rhL3DHuGjK4i9xJZLfVmbQRpml8euzXOvrJx0MGsuCB
F5rcuTHz2ODI30ty607M7S/0jlikLj8Qsf0IsSL+3SKPrSk7t/QS6ifnmG2F
bZLvKffsOuHa5B6BOn99cm2jxl2T/A8Pc5UBehN4mFsZ9Zea0KJwz0TNJDc3
ChlXhwz46S/p2+nz6I+GRtzRdzEGTSxSqxijv6H3oyb0iBxDXhmW3PdUJNeR
2mFXp8K5jvOg1tDDz0ruiemNbwv7/uuhK6xz88I9Fbacpfk6JfeK9C9TC58F
Z3Jfcg4kF04Rjis81iz64XtEnymcIZwtnJPch9Kbnh7jp8TYGcHLHvRKs5P3
PjV4zoyx2UEj69zknn6HknsM7Dkv+a3Cf8sK99H0MbwVhiTXxyuEYwq/dTiP
BtHfXJVsOzV6efSV9DD0MvSE9H/0g/SG6yR/cuF+eFH0tPRTC5JrErXopMIy
kV0vfDhJYxOF25P7SmQwNjdk0xPRG62X/MMLxyE91P0R1/2iHyAGeOtMFiZh
j3Cs0EdYGvHRs/C96CUcKPSNO9I7aPqXQwvnJt5cU4IPGT3jniD36GSd0RN9
sf2d3PuVK5zLyel7hkx6I2oCe/Fm4o1KXA+Lu0jPRE/BndwmYrVOqqqVC6M+
UDN5Q9K/0A+Oivi6Vzi+cCyiA7q8ndsXvDd4J00K3wDmeINMDF9xD48On81M
3gPZvIX7hg96RR8yLfmdOiN4pyePzYx7dGTym5G34tjk2sFbmBzFvR2V/Jbk
zTYyeMYEH7WGNwd9JX3xgFR1p7nL3PVxsWZC+LFfnB26HRC1ktzPG6JxxAB2
bTmr45Pf0VND71mhO7aSA/4F/9UZyQ==
            "]], 
           Polygon[CompressedData["
1:eJxFlNlvTVEUhw9xbnt6W9W7qyhKa+ikty1BYipCzEERYxAkhKYV1AMxJoSY
eSXGhBB0UA/8AcaExJCgqmaiNdU8fytrJR6+3N/9rX32XmudtU/6vLLi0uae
500HH444z0sPeV5naA2ZYc/LEA+6QS2LWuHVRjzvJvoGXII4vCjxBxbPRxdA
KrSDDni/iHVAJ6BvoQN0HIQhN/C8HOgdaMzhFaILxEc/xStC/+bcT+gmeAPt
2OsT3jl0LPoz+gtkszYL3lsshthD9BV0PPoRuh4G2d4peEXoweAk7ms9UkMh
nIEc+pEN3SHHenCZdWHbuy6idUuPkvB6onvBa/xX0AKvUvJGDyG3wTACfvra
ozaQAi1ZdwevLTrZaS+kZ7d9jUuNNdI/vK/ob/ARPkATnLdYItxF34d7tp/0
452tr7GeJdp5LYknQQR8aAExTmuU95sOzai9DG8ZLIch8Fz2JjYMPRyOSi2s
m01tS6Ak0Jokf3nXCU7PioUPeB/hqr0XOS9ksSvW287gsV8JXqnT8/+QfyPx
9hLjfzOns9GAlxrW+F9ojX6M14f4ABjodJ6yoQc8s3cvOhfyrJ42YdX3rH8v
rMZkqPd1Jno73VdmI5P8comdRVdAvjyPV42ugfNwCk7Caciy9WmSK/uF+O9D
GrGOTu9JR2K/ffWKLFfJS3o+FKKSN89UoqucntUX6ljXj56PhFGB5iTn5bG+
jP9L4QTeccsp0+Z5IbqTzDh6PmsWBNq/J+z3A77DdNZMg6lOe/HYPJntCvQ1
uA5P6H0Irxp9ES5AI95W1m6BbTYjWazZgQ7QUzhvISyC7TIDeF0svhMaInp3
fLwq228D/nrYKLPL+m7ENqM3OT0rxb5hU9CT7W7L+5P8Q7bPM/Z5AS9t70rL
/2lEY/Ltkjs6g2dmwiynfZX+ToC/xFZI78KqF6OXOJ1XqcORQwRiICOs+a5z
ep+ahzT31bDK6azLHZP4WljjtMZWeF2JjZazYaz1R/YTPQbGWR+lZwPIqz9E
7FsmtafZPM1Bz4P5NmPyXZaaZjuNTYDxUOz0Psk3dhI6nr0T4K3dO4lPdBpr
tHtX7v73Qu6s1CRzJPO0LNB53Y93CA7aPYniHUYfcBqL2t2R+BF7hzIn8l05
BrutH/Ku96L3Of2V998dbw7nzIVdeInWN3lmDxTYeXIfy1mzEv4BhoTPVg==

            "]]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MlOwlAUBuALWkjAacG49AkY6tAWfAQ3RHShsuABcGFb54A+uV/D4svf
89/05uSer18Wm1oI4Zamj6H8a4Twy44tA92P/OaLT/q6D/nOGyU9XSFzXuma
S3cW5JyZV/KZJx5p62YyIyXBr6Eve3TpUO04cjBmQt08lTEXXHKgu5LXJKQc
6jI5Y84NkW7swglTYlq6O7nkngdOdUfymJNqrnbRRdWOtf17/QM0hhRw
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0yglEAx+HTxkWQTFMLLSq6DxuX0AVwEYlKoSltfNwG2pANIWWSTbJI
rgIzPcbimd97/osz8554fntzKxJC2ODAR07fFkIY8cqQdduLDujzzJqtp088
8kDW1tV77sg4/7rzh29Szl8645MpSdutdrjhmhXbuZ5xygmLtoI7dyiy5Lyr
e5QoE7VVdJ8qNZb//ksPOaJOzHbhzkuuaJOwjfWdCR+s2hra5JgWaVtVa5H/
95oDLg4wMQ==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0ygmEcxuF/LTgAtVHR56AtYeGjLPRhbBxCalFMzkHOUZFInIfrHYtr
fvPci+d95yn1n+4mqYi4JZuOuNH6ZsQB++zRs9W0SoUyXVtJi+yyQ8dW0Dw5
2s4v7pzyzJXzoz4wZsS5rasd2lxzmnxPq1Qoc2h73YiYMefI+U3fWfBBw7bU
T75YcWz71jU//HJiu3DnJU1anNn6es+AYbLbtjVHnkLyf7YtzaT/3+sPF9Ie
IA==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MsywmEcx+GfWjRyFa0pScQ9yKEZFlqgrKVyHHEh2JANuQ1pI27DYeFw
A56ZFs985v0u3v9/3kytUdkbi4gy14mIXb1IRZzT4Yy67VRPOOaImu1QD2jT
YsfW1H0abDtPJCPSjFN1/vONX374ZsP2pq8MeWHN9qg9HrhnyTbpzimyqdH/
5nSaPDMs2wo6S5E5VmzzWmKBRVZtT+7s88yAddu7fvDJF5u2G72lyx1btku9
Soze6x/d7ifz
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MtKglEYhtEdDrwOa5I2yboNTQireVCZAw8leIwOmh1MMG8ptbQk84pc
0mDxsN/Bx88fOy0eFjZCCGm2IiHc6DIawh8LfmnZ5vrDNzOatql+8cmEhm2s
Iz6oew/dfGdAxbuhdWpUKdpO9JgjsuRt+7pHkl3ObLdu3nHPufeDtunwyIWt
q08880LO9qo93uhzaUu5meaADAVbSctccb1m29Y4CXbW322L6Wbk/3+tAOai
J9A=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DlOQmEYhtGPYCI7wAFUArgbG5fgAnAHolJIIQWgrEFtQBuHbQjI6LAK
wQI9NxYnT763+G9yC0fHh5VURBxwl47o6H4mokyJIte2gu6xyw5Xtrzm2GaL
tm1TN8jSSu41N1ka7pQGv761ou581zkzptRsL/rME4+c2F7XI/oMqLqH+saI
Mae2iU6ZMecseV8/+OSL8+Qtb/YZMOTC9q0Llvxwaetqj3seaNpu9Db9/7/+
ACbFL6U=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DlOQlEYhuFjQuE2rMABLhcHsAFcgA0lanPVSgUFjUqhUDjsQECjlwIL
J7bok1A8eXO+4i/OUtJutBZCCLvEmRBm2lsM4ZYbrvmzXeklXTr82i70nDYt
fmxnesoJ396pmx+88+n9rE888sDEdqxHHJLwZtvROjWqvNiybuZYZui9oqus
kWdkK2hEkZixraTrbLDJq63p5h77HJDa7vSePgOmti0tU2GbL1ukxcz8v/4B
KC0ijw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0EtOwmAYhtHPBIQB6hocqKtxwhJYgCzAOwjCbgDFWyJFsVCjsgeFiegi
PI2Dk7f/06Rtul2rVw/WImKfu0JEZufliA/eeWOmvdosv2aa01L7woRnUu3J
jknye857xYhddkict+wmG1R40H6994cV3wy1zM6YktLTDj3ziGP6zif2lDPO
GWgN2+SCFlda217Socu19umZXyxYcq8Vfc86JcqMtEf3RiSMmWg39rbw/7/+
ALO1M1s=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DlOAlAUhtFrQaK1I6hR3AfaODSCCUuwYkgEZAsOBegqlL0AjoAgAspS
OInFyZf7F6946ctK/mopIrIcJSLmerASkWafPf5su7rDNil+bUndYpMNZrZ1
XWOVqbvlzWeeGLkf9YEmDfq2ul5To8qb7UJzZDmnbXtfjvjgk467p30GfNG1
DXXEN2NebD86YcqMV1vBm0VKlOnZbvSWO+4Z2o71hFPOmNgyepj4/68F0ZYr
3w==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0ElOAlEYhdHfSJHYLcJQCLbIQpy4BCc2SIGxWZ06UZwg7MEeNKGzHXqM
g5Ob91XyqlKLO43tbCoitrhMIn7s2UzEKScc860d2SYNMr60uj2kxgGf2r7d
Y5cP52I+IqXA0HnBzjPHLG/axHvHjBjyrHVth1va3GkFd6YUuXdesiXKLPOg
rdhV1ljnUduwFTap8qS9uLNHn9c/2rTvyZGQZ6BdeXZNixvetXN7kfz/r188
xSyy
          "]]}, {
         Line[{1585, 2879, 2881, 2882, 2425, 2876, 1600, 2906, 2429, 2865, 
          2867, 2870, 1618, 2968, 2440, 2898, 2900, 2903, 1636, 3021, 2452, 
          2963, 2965, 1653}], 
         Line[{1589, 2426, 2889, 2891, 2894, 2897, 1605, 2935, 2435, 2947, 
          2949, 2952, 1623, 3015, 3017, 3018, 2448, 3002, 1640, 3043, 2457, 
          3062, 3064, 1657}], 
         Line[{1593, 2922, 2924, 2925, 2434, 2919, 1610, 1619, 2979, 2981, 
          2983, 2986, 1627, 354, 3034, 3036, 3039, 1646, 3068, 2460, 3074, 
          3076, 1661}], 
         Line[{1597, 1611, 2953, 2955, 2958, 2962, 1615, 2928, 2930, 2931, 
          2451, 3012, 1632, 368, 2987, 2989, 2992, 1650, 3058, 3060, 3061, 
          2466, 1666}], 
         Line[{1651, 1633, 3024, 3022, 3019, 1634, 2901, 2442, 2971, 2969, 
          2966, 1616, 2868, 2431, 2909, 2907, 2904, 1598, 2874, 2872, 2871, 
          2423, 2877, 1583}], 
         Line[{1654, 1641, 3047, 3044, 3040, 1637, 2999, 2996, 2994, 2993, 
          2445, 1620, 1606, 2940, 2939, 2936, 2932, 1602, 256, 2888, 2886, 
          2883, 1586}], 
         Line[{1658, 2462, 3072, 3069, 3065, 1643, 2456, 3033, 3031, 3028, 
          3025, 1624, 2444, 2978, 2977, 2975, 2972, 1607, 2916, 2913, 2911, 
          2910, 1601, 1590}], 
         Line[{1663, 3080, 3078, 3077, 1662, 1647, 2459, 3055, 3054, 3052, 
          3049, 1629, 3009, 3006, 3004, 3003, 1628, 1612, 2959, 2439, 2946, 
          2944, 2941, 1594}], 
         Line[{1669, 3097, 3099, 3100, 2469, 3094, 1684, 3124, 2473, 3083, 
          3085, 3088, 1702, 3186, 2484, 3116, 3118, 3121, 1720, 3239, 2496, 
          3181, 3183, 1737}], 
         Line[{1673, 2470, 3107, 3109, 3112, 3115, 1689, 3153, 2479, 3165, 
          3167, 3170, 1707, 3233, 3235, 3236, 2492, 3220, 1724, 3261, 2501, 
          3280, 3282, 1741}], 
         Line[{1677, 3140, 3142, 3143, 2478, 3137, 1694, 1703, 3197, 3199, 
          3201, 3204, 1711, 489, 3252, 3254, 3257, 1730, 3286, 2504, 3292, 
          3294, 1745}], 
         Line[{1681, 1695, 3171, 3173, 3176, 3180, 1699, 3146, 3148, 3149, 
          2495, 3230, 1716, 503, 3205, 3207, 3210, 1734, 3276, 3278, 3279, 
          2510, 1750}], 
         Line[{1735, 1717, 3242, 3240, 3237, 1718, 3119, 2486, 3189, 3187, 
          3184, 1700, 3086, 2475, 3127, 3125, 3122, 1682, 3092, 3090, 3089, 
          2467, 3095, 1667}], 
         Line[{1738, 1725, 3265, 3262, 3258, 1721, 3217, 3214, 3212, 3211, 
          2489, 1704, 1690, 3158, 3157, 3154, 3150, 1686, 391, 3106, 3104, 
          3101, 1670}], 
         Line[{1742, 2506, 3290, 3287, 3283, 1727, 2500, 3251, 3249, 3246, 
          3243, 1708, 2488, 3196, 3195, 3193, 3190, 1691, 3134, 3131, 3129, 
          3128, 1685, 1674}], 
         Line[{1747, 3298, 3296, 3295, 1746, 1731, 2503, 3273, 3272, 3270, 
          3267, 1713, 3227, 3224, 3222, 3221, 1712, 1696, 3177, 2483, 3164, 
          3162, 3159, 1678}], 
         Line[{1753, 3315, 3317, 3318, 2513, 3312, 1768, 3342, 2517, 3301, 
          3303, 3306, 1786, 3404, 2528, 3334, 3336, 3339, 1804, 3457, 2540, 
          3399, 3401, 1821}], 
         Line[{1757, 2514, 3325, 3327, 3330, 3333, 1773, 3371, 2523, 3383, 
          3385, 3388, 1791, 3451, 3453, 3454, 2536, 3438, 1808, 3479, 2545, 
          3498, 3500, 1825}], 
         Line[{1761, 3358, 3360, 3361, 2522, 3355, 1778, 1787, 3415, 3417, 
          3419, 3422, 1795, 624, 3470, 3472, 3475, 1814, 3504, 2548, 3510, 
          3512, 1829}], 
         Line[{1765, 1779, 3389, 3391, 3394, 3398, 1783, 3364, 3366, 3367, 
          2539, 3448, 1800, 638, 3423, 3425, 3428, 1818, 3494, 3496, 3497, 
          2554, 1834}], 
         Line[{1819, 1801, 3460, 3458, 3455, 1802, 3337, 2530, 3407, 3405, 
          3402, 1784, 3304, 2519, 3345, 3343, 3340, 1766, 3310, 3308, 3307, 
          2511, 3313, 1751}], 
         Line[{1822, 1809, 3483, 3480, 3476, 1805, 3435, 3432, 3430, 3429, 
          2533, 1788, 1774, 3376, 3375, 3372, 3368, 1770, 526, 3324, 3322, 
          3319, 1754}], 
         Line[{1826, 2550, 3508, 3505, 3501, 1811, 2544, 3469, 3467, 3464, 
          3461, 1792, 2532, 3414, 3413, 3411, 3408, 1775, 3352, 3349, 3347, 
          3346, 1769, 1758}], 
         Line[{1831, 3516, 3514, 3513, 1830, 1815, 2547, 3491, 3490, 3488, 
          3485, 1797, 3445, 3442, 3440, 3439, 1796, 1780, 3395, 2527, 3382, 
          3380, 3377, 1762}], 
         Line[{1837, 3533, 3535, 3536, 2557, 3530, 1852, 3560, 2561, 3519, 
          3521, 3524, 1870, 3622, 2572, 3552, 3554, 3557, 1888, 3675, 2584, 
          3617, 3619, 1905}], 
         Line[{1841, 2558, 3543, 3545, 3548, 3551, 1857, 3589, 2567, 3601, 
          3603, 3606, 1875, 3669, 3671, 3672, 2580, 3656, 1892, 3697, 2589, 
          3716, 3718, 1909}], 
         Line[{1845, 3576, 3578, 3579, 2566, 3573, 1862, 1871, 3633, 3635, 
          3637, 3640, 1879, 759, 3688, 3690, 3693, 1898, 3722, 2592, 3728, 
          3730, 1913}], 
         Line[{1849, 1863, 3607, 3609, 3612, 3616, 1867, 3582, 3584, 3585, 
          2583, 3666, 1884, 773, 3641, 3643, 3646, 1902, 3712, 3714, 3715, 
          2598, 1918}], 
         Line[{1903, 1885, 3678, 3676, 3673, 1886, 3555, 2574, 3625, 3623, 
          3620, 1868, 3522, 2563, 3563, 3561, 3558, 1850, 3528, 3526, 3525, 
          2555, 3531, 1835}], 
         Line[{1906, 1893, 3701, 3698, 3694, 1889, 3653, 3650, 3648, 3647, 
          2577, 1872, 1858, 3594, 3593, 3590, 3586, 1854, 661, 3542, 3540, 
          3537, 1838}], 
         Line[{1910, 2594, 3726, 3723, 3719, 1895, 2588, 3687, 3685, 3682, 
          3679, 1876, 2576, 3632, 3631, 3629, 3626, 1859, 3570, 3567, 3565, 
          3564, 1853, 1842}], 
         Line[{1915, 3734, 3732, 3731, 1914, 1899, 2591, 3709, 3708, 3706, 
          3703, 1881, 3663, 3660, 3658, 3657, 1880, 1864, 3613, 2571, 3600, 
          3598, 3595, 1846}], 
         Line[{1921, 3751, 3753, 3754, 2601, 3748, 1936, 3778, 2605, 3737, 
          3739, 3742, 1954, 3840, 2616, 3770, 3772, 3775, 1972, 3893, 2628, 
          3835, 3837, 1989}], 
         Line[{1925, 2602, 3761, 3763, 3766, 3769, 1941, 3807, 2611, 3819, 
          3821, 3824, 1959, 3887, 3889, 3890, 2624, 3874, 1976, 3915, 2633, 
          3934, 3936, 1993}], 
         Line[{1929, 3794, 3796, 3797, 2610, 3791, 1946, 1955, 3851, 3853, 
          3855, 3858, 1963, 894, 3906, 3908, 3911, 1982, 3940, 2636, 3946, 
          3948, 1997}], 
         Line[{1933, 1947, 3825, 3827, 3830, 3834, 1951, 3800, 3802, 3803, 
          2627, 3884, 1968, 908, 3859, 3861, 3864, 1986, 3930, 3932, 3933, 
          2642, 2002}], 
         Line[{1987, 1969, 3896, 3894, 3891, 1970, 3773, 2618, 3843, 3841, 
          3838, 1952, 3740, 2607, 3781, 3779, 3776, 1934, 3746, 3744, 3743, 
          2599, 3749, 1919}], 
         Line[{1990, 1977, 3919, 3916, 3912, 1973, 3871, 3868, 3866, 3865, 
          2621, 1956, 1942, 3812, 3811, 3808, 3804, 1938, 796, 3760, 3758, 
          3755, 1922}], 
         Line[{1994, 2638, 3944, 3941, 3937, 1979, 2632, 3905, 3903, 3900, 
          3897, 1960, 2620, 3850, 3849, 3847, 3844, 1943, 3788, 3785, 3783, 
          3782, 1937, 1926}], 
         Line[{1999, 3952, 3950, 3949, 1998, 1983, 2635, 3927, 3926, 3924, 
          3921, 1965, 3881, 3878, 3876, 3875, 1964, 1948, 3831, 2615, 3818, 
          3816, 3813, 1930}], 
         Line[{2005, 3969, 3971, 3972, 2645, 3966, 2020, 3996, 2649, 3955, 
          3957, 3960, 2038, 4058, 2660, 3988, 3990, 3993, 2056, 4111, 2672, 
          4053, 4055, 2073}], 
         Line[{2009, 2646, 3979, 3981, 3984, 3987, 2025, 4025, 2655, 4037, 
          4039, 4042, 2043, 4105, 4107, 4108, 2668, 4092, 2060, 4133, 2677, 
          4152, 4154, 2077}], 
         Line[{2013, 4012, 4014, 4015, 2654, 4009, 2030, 2039, 4069, 4071, 
          4073, 4076, 2047, 1029, 4124, 4126, 4129, 2066, 4158, 2680, 4164, 
          4166, 2081}], 
         Line[{2017, 2031, 4043, 4045, 4048, 4052, 2035, 4018, 4020, 4021, 
          2671, 4102, 2052, 1043, 4077, 4079, 4082, 2070, 4148, 4150, 4151, 
          2686, 2086}], 
         Line[{2071, 2053, 4114, 4112, 4109, 2054, 3991, 2662, 4061, 4059, 
          4056, 2036, 3958, 2651, 3999, 3997, 3994, 2018, 3964, 3962, 3961, 
          2643, 3967, 2003}], 
         Line[{2074, 2061, 4137, 4134, 4130, 2057, 4089, 4086, 4084, 4083, 
          2665, 2040, 2026, 4030, 4029, 4026, 4022, 2022, 931, 3978, 3976, 
          3973, 2006}], 
         Line[{2078, 2682, 4162, 4159, 4155, 2063, 2676, 4123, 4121, 4118, 
          4115, 2044, 2664, 4068, 4067, 4065, 4062, 2027, 4006, 4003, 4001, 
          4000, 2021, 2010}], 
         Line[{2083, 4170, 4168, 4167, 2082, 2067, 2679, 4145, 4144, 4142, 
          4139, 2049, 4099, 4096, 4094, 4093, 2048, 2032, 4049, 2659, 4036, 
          4034, 4031, 2014}], 
         Line[{2089, 4187, 4189, 4190, 2689, 4184, 2104, 4214, 2693, 4173, 
          4175, 4178, 2122, 4276, 2704, 4206, 4208, 4211, 2140, 4329, 2716, 
          4271, 4273, 2157}], 
         Line[{2093, 2690, 4197, 4199, 4202, 4205, 2109, 4243, 2699, 4255, 
          4257, 4260, 2127, 4323, 4325, 4326, 2712, 4310, 2144, 4351, 2721, 
          4370, 4372, 2161}], 
         Line[{2097, 4230, 4232, 4233, 2698, 4227, 2114, 2123, 4287, 4289, 
          4291, 4294, 2131, 1164, 4342, 4344, 4347, 2150, 4376, 2724, 4382, 
          4384, 2165}], 
         Line[{2101, 2115, 4261, 4263, 4266, 4270, 2119, 4236, 4238, 4239, 
          2715, 4320, 2136, 1178, 4295, 4297, 4300, 2154, 4366, 4368, 4369, 
          2730, 2170}], 
         Line[{2155, 2137, 4332, 4330, 4327, 2138, 4209, 2706, 4279, 4277, 
          4274, 2120, 4176, 2695, 4217, 4215, 4212, 2102, 4182, 4180, 4179, 
          2687, 4185, 2087}], 
         Line[{2158, 2145, 4355, 4352, 4348, 2141, 4307, 4304, 4302, 4301, 
          2709, 2124, 2110, 4248, 4247, 4244, 4240, 2106, 1066, 4196, 4194, 
          4191, 2090}], 
         Line[{2162, 2726, 4380, 4377, 4373, 2147, 2720, 4341, 4339, 4336, 
          4333, 2128, 2708, 4286, 4285, 4283, 4280, 2111, 4224, 4221, 4219, 
          4218, 2105, 2094}], 
         Line[{2167, 4388, 4386, 4385, 2166, 2151, 2723, 4363, 4362, 4360, 
          4357, 2133, 4317, 4314, 4312, 4311, 2132, 2116, 4267, 2703, 4254, 
          4252, 4249, 2098}], 
         Line[{2173, 4405, 4407, 4408, 2733, 4402, 2188, 4432, 2737, 4391, 
          4393, 4396, 2206, 4494, 2748, 4424, 4426, 4429, 2224, 4547, 2760, 
          4489, 4491, 2241}], 
         Line[{2177, 2734, 4415, 4417, 4420, 4423, 2193, 4461, 2743, 4473, 
          4475, 4478, 2211, 4541, 4543, 4544, 2756, 4528, 2228, 4569, 2765, 
          4588, 4590, 2245}], 
         Line[{2181, 4448, 4450, 4451, 2742, 4445, 2198, 2207, 4505, 4507, 
          4509, 4512, 2215, 1299, 4560, 4562, 4565, 2234, 4594, 2768, 4600, 
          4602, 2249}], 
         Line[{2185, 2199, 4479, 4481, 4484, 4488, 2203, 4454, 4456, 4457, 
          2759, 4538, 2220, 1313, 4513, 4515, 4518, 2238, 4584, 4586, 4587, 
          2774, 2254}], 
         Line[{2239, 2221, 4550, 4548, 4545, 2222, 4427, 2750, 4497, 4495, 
          4492, 2204, 4394, 2739, 4435, 4433, 4430, 2186, 4400, 4398, 4397, 
          2731, 4403, 2171}], 
         Line[{2242, 2229, 4573, 4570, 4566, 2225, 4525, 4522, 4520, 4519, 
          2753, 2208, 2194, 4466, 4465, 4462, 4458, 2190, 1201, 4414, 4412, 
          4409, 2174}], 
         Line[{2246, 2770, 4598, 4595, 4591, 2231, 2764, 4559, 4557, 4554, 
          4551, 2212, 2752, 4504, 4503, 4501, 4498, 2195, 4442, 4439, 4437, 
          4436, 2189, 2178}], 
         Line[{2251, 4606, 4604, 4603, 2250, 2235, 2767, 4581, 4580, 4578, 
          4575, 2217, 4535, 4532, 4530, 4529, 2216, 2200, 4485, 2747, 4472, 
          4470, 4467, 2182}], 
         Line[{2257, 4623, 4625, 4626, 2777, 4620, 2272, 4650, 2781, 4609, 
          4611, 4614, 2290, 4725, 2796, 4642, 4644, 4647, 2308, 4719, 2805, 
          4785, 4787, 2325}], 
         Line[{2261, 2778, 4633, 4635, 4638, 4641, 2277, 4679, 2787, 4692, 
          4696, 4702, 2295, 4763, 4768, 4772, 2804, 4760, 2312, 4779, 2810, 
          4807, 4809, 2329}], 
         Line[{2265, 4666, 4668, 4669, 2786, 4663, 2282, 4731, 4733, 4734, 
          2792, 4706, 2299, 1423, 4788, 4790, 4793, 2318, 4813, 2813, 4819, 
          4821, 2333}], 
         Line[{2269, 2283, 4707, 4709, 4712, 4716, 2287, 4672, 4674, 4675, 
          2801, 4744, 2304, 1437, 4745, 4747, 4750, 2322, 4803, 4805, 4806, 
          2819, 2338}], 
         Line[{2323, 2305, 4722, 4720, 4717, 2306, 4645, 2798, 4728, 4726, 
          4723, 2288, 4612, 2783, 4653, 4651, 4648, 2270, 4618, 4616, 4615, 
          2775, 4621, 2255}], 
         Line[{2326, 2313, 4783, 4780, 4776, 2309, 4757, 4754, 4752, 4751, 
          2300, 2292, 2278, 4684, 4683, 4680, 4676, 2274, 1336, 4632, 4630, 
          4627, 2258}], 
         Line[{2330, 2815, 4817, 4814, 4810, 2315, 2809, 4775, 4773, 4769, 
          4764, 2296, 4703, 4697, 4693, 4691, 2789, 2279, 4660, 4657, 4655, 
          4654, 2273, 2262}], 
         Line[{2335, 4825, 4823, 4822, 2334, 2319, 2812, 4800, 4799, 4797, 
          4794, 2301, 4741, 4738, 4736, 4735, 2291, 2284, 4713, 2795, 4690, 
          4688, 4685, 2266}], 
         Line[{2341, 4842, 4844, 4845, 2822, 4839, 2356, 4869, 2826, 4828, 
          4830, 4833, 2374, 4944, 2841, 4861, 4863, 4866, 2392, 4938, 2850, 
          5004, 5006, 2409}], 
         Line[{2345, 2823, 4852, 4854, 4857, 4860, 2361, 4898, 2832, 4911, 
          4915, 4921, 2379, 4982, 4987, 4991, 2849, 4979, 2396, 4998, 2855, 
          5026, 5028, 2413}], 
         Line[{2349, 4885, 4887, 4888, 2831, 4882, 2366, 4950, 4952, 4953, 
          2837, 4925, 2383, 1550, 5007, 5009, 5012, 2402, 5032, 2858, 5038, 
          5040, 2417}], 
         Line[{2353, 2367, 4926, 4928, 4931, 4935, 2371, 4891, 4893, 4894, 
          2846, 4963, 2388, 1564, 4964, 4966, 4969, 2406, 5022, 5024, 5025, 
          2864, 2422}], 
         Line[{2407, 2389, 4941, 4939, 4936, 2390, 4864, 2843, 4947, 4945, 
          4942, 2372, 4831, 2828, 4872, 4870, 4867, 2354, 4837, 4835, 4834, 
          2820, 4840, 2339}], 
         Line[{2410, 2397, 5002, 4999, 4995, 2393, 4976, 4973, 4971, 4970, 
          2384, 2376, 2362, 4903, 4902, 4899, 4895, 2358, 1463, 4851, 4849, 
          4846, 2342}], 
         Line[{2414, 2860, 5036, 5033, 5029, 2399, 2854, 4994, 4992, 4988, 
          4983, 2380, 4922, 4916, 4912, 4910, 2834, 2363, 4879, 4876, 4874, 
          4873, 2357, 2346}], 
         Line[{2419, 5044, 5042, 5041, 2418, 2403, 2857, 5019, 5018, 5016, 
          5013, 2385, 4960, 4957, 4955, 4954, 2375, 2368, 4932, 2840, 4909, 
          4907, 4904, 2350}], 
         Line[{1584, 2878, 2880, 2424, 2873, 2875, 1599, 2905, 2908, 2430, 
          2866, 2869, 1617, 2967, 2970, 2441, 2899, 2902, 1635, 3020, 3023, 
          2453, 2964, 1652}], 
         Line[{1587, 2884, 2887, 2428, 2892, 2895, 1603, 2933, 2937, 294, 
          2950, 1621, 3013, 2446, 2995, 2997, 3000, 1638, 3041, 3045, 3048, 
          1642, 1655}], 
         Line[{1588, 2885, 2427, 2890, 2893, 2896, 1604, 2934, 2938, 2436, 
          2948, 2951, 1622, 3014, 3016, 2447, 2998, 3001, 1639, 3042, 3046, 
          2458, 3063, 1656}], 
         Line[{1591, 2920, 2432, 2912, 2914, 2917, 1608, 2973, 2976, 322, 
          2984, 1625, 3026, 3029, 3032, 2455, 3037, 1644, 3066, 3070, 3073, 
          2463, 1659}], 
         Line[{1592, 2921, 2923, 2433, 2915, 2918, 1609, 2974, 2443, 2980, 
          2982, 2985, 1626, 3027, 3030, 2454, 3035, 3038, 1645, 3067, 3071, 
          2461, 3075, 1660}], 
         Line[{1595, 2942, 2945, 2438, 2956, 2960, 1613, 2926, 2449, 3005, 
          3007, 3010, 1630, 3050, 3053, 370, 2990, 1648, 3056, 2464, 3079, 
          3081, 1664}], 
         Line[{1596, 2943, 2437, 2954, 2957, 2961, 1614, 2927, 2929, 2450, 
          3008, 3011, 1631, 3051, 369, 2988, 2991, 1649, 3057, 3059, 2465, 
          3082, 1665}], 
         Line[{1668, 3096, 3098, 2468, 3091, 3093, 1683, 3123, 3126, 2474, 
          3084, 3087, 1701, 3185, 3188, 2485, 3117, 3120, 1719, 3238, 3241, 
          2497, 3182, 1736}], 
         Line[{1671, 3102, 3105, 2472, 3110, 3113, 1687, 3151, 3155, 429, 
          3168, 1705, 3231, 2490, 3213, 3215, 3218, 1722, 3259, 3263, 3266, 
          1726, 1739}], 
         Line[{1672, 3103, 2471, 3108, 3111, 3114, 1688, 3152, 3156, 2480, 
          3166, 3169, 1706, 3232, 3234, 2491, 3216, 3219, 1723, 3260, 3264, 
          2502, 3281, 1740}], 
         Line[{1675, 3138, 2476, 3130, 3132, 3135, 1692, 3191, 3194, 457, 
          3202, 1709, 3244, 3247, 3250, 2499, 3255, 1728, 3284, 3288, 3291, 
          2507, 1743}], 
         Line[{1676, 3139, 3141, 2477, 3133, 3136, 1693, 3192, 2487, 3198, 
          3200, 3203, 1710, 3245, 3248, 2498, 3253, 3256, 1729, 3285, 3289, 
          2505, 3293, 1744}], 
         Line[{1679, 3160, 3163, 2482, 3174, 3178, 1697, 3144, 2493, 3223, 
          3225, 3228, 1714, 3268, 3271, 505, 3208, 1732, 3274, 2508, 3297, 
          3299, 1748}], 
         Line[{1680, 3161, 2481, 3172, 3175, 3179, 1698, 3145, 3147, 2494, 
          3226, 3229, 1715, 3269, 504, 3206, 3209, 1733, 3275, 3277, 2509, 
          3300, 1749}], 
         Line[{1752, 3314, 3316, 2512, 3309, 3311, 1767, 3341, 3344, 2518, 
          3302, 3305, 1785, 3403, 3406, 2529, 3335, 3338, 1803, 3456, 3459, 
          2541, 3400, 1820}], 
         Line[{1755, 3320, 3323, 2516, 3328, 3331, 1771, 3369, 3373, 564, 
          3386, 1789, 3449, 2534, 3431, 3433, 3436, 1806, 3477, 3481, 3484, 
          1810, 1823}], 
         Line[{1756, 3321, 2515, 3326, 3329, 3332, 1772, 3370, 3374, 2524, 
          3384, 3387, 1790, 3450, 3452, 2535, 3434, 3437, 1807, 3478, 3482, 
          2546, 3499, 1824}], 
         Line[{1759, 3356, 2520, 3348, 3350, 3353, 1776, 3409, 3412, 592, 
          3420, 1793, 3462, 3465, 3468, 2543, 3473, 1812, 3502, 3506, 3509, 
          2551, 1827}], 
         Line[{1760, 3357, 3359, 2521, 3351, 3354, 1777, 3410, 2531, 3416, 
          3418, 3421, 1794, 3463, 3466, 2542, 3471, 3474, 1813, 3503, 3507, 
          2549, 3511, 1828}], 
         Line[{1763, 3378, 3381, 2526, 3392, 3396, 1781, 3362, 2537, 3441, 
          3443, 3446, 1798, 3486, 3489, 640, 3426, 1816, 3492, 2552, 3515, 
          3517, 1832}], 
         Line[{1764, 3379, 2525, 3390, 3393, 3397, 1782, 3363, 3365, 2538, 
          3444, 3447, 1799, 3487, 639, 3424, 3427, 1817, 3493, 3495, 2553, 
          3518, 1833}], 
         Line[{1836, 3532, 3534, 2556, 3527, 3529, 1851, 3559, 3562, 2562, 
          3520, 3523, 1869, 3621, 3624, 2573, 3553, 3556, 1887, 3674, 3677, 
          2585, 3618, 1904}], 
         Line[{1839, 3538, 3541, 2560, 3546, 3549, 1855, 3587, 3591, 699, 
          3604, 1873, 3667, 2578, 3649, 3651, 3654, 1890, 3695, 3699, 3702, 
          1894, 1907}], 
         Line[{1840, 3539, 2559, 3544, 3547, 3550, 1856, 3588, 3592, 2568, 
          3602, 3605, 1874, 3668, 3670, 2579, 3652, 3655, 1891, 3696, 3700, 
          2590, 3717, 1908}], 
         Line[{1843, 3574, 2564, 3566, 3568, 3571, 1860, 3627, 3630, 727, 
          3638, 1877, 3680, 3683, 3686, 2587, 3691, 1896, 3720, 3724, 3727, 
          2595, 1911}], 
         Line[{1844, 3575, 3577, 2565, 3569, 3572, 1861, 3628, 2575, 3634, 
          3636, 3639, 1878, 3681, 3684, 2586, 3689, 3692, 1897, 3721, 3725, 
          2593, 3729, 1912}], 
         Line[{1847, 3596, 3599, 2570, 3610, 3614, 1865, 3580, 2581, 3659, 
          3661, 3664, 1882, 3704, 3707, 775, 3644, 1900, 3710, 2596, 3733, 
          3735, 1916}], 
         Line[{1848, 3597, 2569, 3608, 3611, 3615, 1866, 3581, 3583, 2582, 
          3662, 3665, 1883, 3705, 774, 3642, 3645, 1901, 3711, 3713, 2597, 
          3736, 1917}], 
         Line[{1920, 3750, 3752, 2600, 3745, 3747, 1935, 3777, 3780, 2606, 
          3738, 3741, 1953, 3839, 3842, 2617, 3771, 3774, 1971, 3892, 3895, 
          2629, 3836, 1988}], 
         Line[{1923, 3756, 3759, 2604, 3764, 3767, 1939, 3805, 3809, 834, 
          3822, 1957, 3885, 2622, 3867, 3869, 3872, 1974, 3913, 3917, 3920, 
          1978, 1991}], 
         Line[{1924, 3757, 2603, 3762, 3765, 3768, 1940, 3806, 3810, 2612, 
          3820, 3823, 1958, 3886, 3888, 2623, 3870, 3873, 1975, 3914, 3918, 
          2634, 3935, 1992}], 
         Line[{1927, 3792, 2608, 3784, 3786, 3789, 1944, 3845, 3848, 862, 
          3856, 1961, 3898, 3901, 3904, 2631, 3909, 1980, 3938, 3942, 3945, 
          2639, 1995}], 
         Line[{1928, 3793, 3795, 2609, 3787, 3790, 1945, 3846, 2619, 3852, 
          3854, 3857, 1962, 3899, 3902, 2630, 3907, 3910, 1981, 3939, 3943, 
          2637, 3947, 1996}], 
         Line[{1931, 3814, 3817, 2614, 3828, 3832, 1949, 3798, 2625, 3877, 
          3879, 3882, 1966, 3922, 3925, 910, 3862, 1984, 3928, 2640, 3951, 
          3953, 2000}], 
         Line[{1932, 3815, 2613, 3826, 3829, 3833, 1950, 3799, 3801, 2626, 
          3880, 3883, 1967, 3923, 909, 3860, 3863, 1985, 3929, 3931, 2641, 
          3954, 2001}], 
         Line[{2004, 3968, 3970, 2644, 3963, 3965, 2019, 3995, 3998, 2650, 
          3956, 3959, 2037, 4057, 4060, 2661, 3989, 3992, 2055, 4110, 4113, 
          2673, 4054, 2072}], 
         Line[{2007, 3974, 3977, 2648, 3982, 3985, 2023, 4023, 4027, 969, 
          4040, 2041, 4103, 2666, 4085, 4087, 4090, 2058, 4131, 4135, 4138, 
          2062, 2075}], 
         Line[{2008, 3975, 2647, 3980, 3983, 3986, 2024, 4024, 4028, 2656, 
          4038, 4041, 2042, 4104, 4106, 2667, 4088, 4091, 2059, 4132, 4136, 
          2678, 4153, 2076}], 
         Line[{2011, 4010, 2652, 4002, 4004, 4007, 2028, 4063, 4066, 997, 
          4074, 2045, 4116, 4119, 4122, 2675, 4127, 2064, 4156, 4160, 4163, 
          2683, 2079}], 
         Line[{2012, 4011, 4013, 2653, 4005, 4008, 2029, 4064, 2663, 4070, 
          4072, 4075, 2046, 4117, 4120, 2674, 4125, 4128, 2065, 4157, 4161, 
          2681, 4165, 2080}], 
         Line[{2015, 4032, 4035, 2658, 4046, 4050, 2033, 4016, 2669, 4095, 
          4097, 4100, 2050, 4140, 4143, 1045, 4080, 2068, 4146, 2684, 4169, 
          4171, 2084}], 
         Line[{2016, 4033, 2657, 4044, 4047, 4051, 2034, 4017, 4019, 2670, 
          4098, 4101, 2051, 4141, 1044, 4078, 4081, 2069, 4147, 4149, 2685, 
          4172, 2085}], 
         Line[{2088, 4186, 4188, 2688, 4181, 4183, 2103, 4213, 4216, 2694, 
          4174, 4177, 2121, 4275, 4278, 2705, 4207, 4210, 2139, 4328, 4331, 
          2717, 4272, 2156}], 
         Line[{2091, 4192, 4195, 2692, 4200, 4203, 2107, 4241, 4245, 1104, 
          4258, 2125, 4321, 2710, 4303, 4305, 4308, 2142, 4349, 4353, 4356, 
          2146, 2159}], 
         Line[{2092, 4193, 2691, 4198, 4201, 4204, 2108, 4242, 4246, 2700, 
          4256, 4259, 2126, 4322, 4324, 2711, 4306, 4309, 2143, 4350, 4354, 
          2722, 4371, 2160}], 
         Line[{2095, 4228, 2696, 4220, 4222, 4225, 2112, 4281, 4284, 1132, 
          4292, 2129, 4334, 4337, 4340, 2719, 4345, 2148, 4374, 4378, 4381, 
          2727, 2163}], 
         Line[{2096, 4229, 4231, 2697, 4223, 4226, 2113, 4282, 2707, 4288, 
          4290, 4293, 2130, 4335, 4338, 2718, 4343, 4346, 2149, 4375, 4379, 
          2725, 4383, 2164}], 
         Line[{2099, 4250, 4253, 2702, 4264, 4268, 2117, 4234, 2713, 4313, 
          4315, 4318, 2134, 4358, 4361, 1180, 4298, 2152, 4364, 2728, 4387, 
          4389, 2168}], 
         Line[{2100, 4251, 2701, 4262, 4265, 4269, 2118, 4235, 4237, 2714, 
          4316, 4319, 2135, 4359, 1179, 4296, 4299, 2153, 4365, 4367, 2729, 
          4390, 2169}], 
         Line[{2172, 4404, 4406, 2732, 4399, 4401, 2187, 4431, 4434, 2738, 
          4392, 4395, 2205, 4493, 4496, 2749, 4425, 4428, 2223, 4546, 4549, 
          2761, 4490, 2240}], 
         Line[{2175, 4410, 4413, 2736, 4418, 4421, 2191, 4459, 4463, 1239, 
          4476, 2209, 4539, 2754, 4521, 4523, 4526, 2226, 4567, 4571, 4574, 
          2230, 2243}], 
         Line[{2176, 4411, 2735, 4416, 4419, 4422, 2192, 4460, 4464, 2744, 
          4474, 4477, 2210, 4540, 4542, 2755, 4524, 4527, 2227, 4568, 4572, 
          2766, 4589, 2244}], 
         Line[{2179, 4446, 2740, 4438, 4440, 4443, 2196, 4499, 4502, 1267, 
          4510, 2213, 4552, 4555, 4558, 2763, 4563, 2232, 4592, 4596, 4599, 
          2771, 2247}], 
         Line[{2180, 4447, 4449, 2741, 4441, 4444, 2197, 4500, 2751, 4506, 
          4508, 4511, 2214, 4553, 4556, 2762, 4561, 4564, 2233, 4593, 4597, 
          2769, 4601, 2248}], 
         Line[{2183, 4468, 4471, 2746, 4482, 4486, 2201, 4452, 2757, 4531, 
          4533, 4536, 2218, 4576, 4579, 1315, 4516, 2236, 4582, 2772, 4605, 
          4607, 2252}], 
         Line[{2184, 4469, 2745, 4480, 4483, 4487, 2202, 4453, 4455, 2758, 
          4534, 4537, 2219, 4577, 1314, 4514, 4517, 2237, 4583, 4585, 2773, 
          4608, 2253}], 
         Line[{2256, 4622, 4624, 2776, 4617, 4619, 2271, 4649, 4652, 2782, 
          4610, 4613, 2289, 4724, 4727, 2797, 4643, 4646, 2307, 4718, 4721, 
          2806, 4786, 2324}], 
         Line[{2259, 4628, 4631, 2780, 4636, 4639, 2275, 4677, 4681, 1374, 
          4700, 2293, 4761, 2802, 4753, 4755, 4758, 2310, 4777, 4781, 4784, 
          2314, 2327}], 
         Line[{2260, 4629, 2779, 4634, 4637, 4640, 2276, 4678, 4682, 2788, 
          4695, 4701, 2294, 4762, 4767, 2803, 4756, 4759, 2311, 4778, 4782, 
          2811, 4808, 2328}], 
         Line[{2263, 4664, 2784, 4656, 4658, 4661, 2280, 4729, 2790, 4694, 
          4698, 4704, 2297, 4765, 4770, 4774, 2808, 4791, 2316, 4811, 4815, 
          4818, 2816, 2331}], 
         Line[{2264, 4665, 4667, 2785, 4659, 4662, 2281, 4730, 4732, 2791, 
          4699, 4705, 2298, 4766, 4771, 2807, 4789, 4792, 2317, 4812, 4816, 
          2814, 4820, 2332}], 
         Line[{2267, 4686, 4689, 2794, 4710, 4714, 2285, 4670, 2799, 4737, 
          4739, 4742, 2302, 4795, 4798, 1439, 4748, 2320, 4801, 2817, 4824, 
          4826, 2336}], 
         Line[{2268, 4687, 2793, 4708, 4711, 4715, 2286, 4671, 4673, 2800, 
          4740, 4743, 2303, 4796, 1438, 4746, 4749, 2321, 4802, 4804, 2818, 
          4827, 2337}], 
         Line[{2340, 4841, 4843, 2821, 4836, 4838, 2355, 4868, 4871, 2827, 
          4829, 4832, 2373, 4943, 4946, 2842, 4862, 4865, 2391, 4937, 4940, 
          2851, 5005, 2408}], 
         Line[{2343, 4847, 4850, 2825, 4855, 4858, 2359, 4896, 4900, 1501, 
          4919, 2377, 4980, 2847, 4972, 4974, 4977, 2394, 4996, 5000, 5003, 
          2398, 2411}], 
         Line[{2344, 4848, 2824, 4853, 4856, 4859, 2360, 4897, 4901, 2833, 
          4914, 4920, 2378, 4981, 4986, 2848, 4975, 4978, 2395, 4997, 5001, 
          2856, 5027, 2412}], 
         Line[{2347, 4883, 2829, 4875, 4877, 4880, 2364, 4948, 2835, 4913, 
          4917, 4923, 2381, 4984, 4989, 4993, 2853, 5010, 2400, 5030, 5034, 
          5037, 2861, 2415}], 
         Line[{2348, 4884, 4886, 2830, 4878, 4881, 2365, 4949, 4951, 2836, 
          4918, 4924, 2382, 4985, 4990, 2852, 5008, 5011, 2401, 5031, 5035, 
          2859, 5039, 2416}], 
         Line[{2351, 4905, 4908, 2839, 4929, 4933, 2369, 4889, 2844, 4956, 
          4958, 4961, 2386, 5014, 5017, 1566, 4967, 2404, 5020, 2862, 5043, 
          5045, 2420}], 
         Line[{2352, 4906, 2838, 4927, 4930, 4934, 2370, 4890, 4892, 2845, 
          4959, 4962, 2387, 5015, 1565, 4965, 4968, 2405, 5021, 5023, 2863, 
          5046, 2421}]}, {
         Line[{263, 3061, 383, 3082, 3081, 3080, 380, 3076, 3075, 377, 3073, 
          3072, 367, 3064, 3063, 364, 3048, 3047, 353, 2965, 2964, 346, 3024, 
          374}], 
         Line[{271, 2992, 2991, 2990, 371, 3055, 361, 3039, 3038, 3037, 357, 
          3033, 335, 331, 3002, 3001, 3000, 2999, 319, 2903, 2902, 2901, 311, 
          350}], 
         Line[{276, 249, 2877, 2878, 2879, 257, 2883, 2884, 2885, 253, 2889, 
          264, 2910, 284, 2920, 2921, 2922, 288, 2941, 2942, 2943, 300, 2953, 
          304}], 
         Line[{307, 2962, 2961, 2960, 2959, 303, 291, 287, 2919, 2918, 2917, 
          2916, 267, 2897, 2896, 2895, 256, 260, 252, 2876, 2875, 2874, 279}], 
         Line[{312, 2904, 2905, 2906, 272, 280, 2932, 2933, 2934, 2935, 292, 
          296, 2972, 2973, 2974, 320, 2979, 324, 3003, 336, 2926, 2927, 2928, 
          340}], 
         Line[{343, 339, 3012, 3011, 3010, 3009, 327, 2986, 2985, 2984, 323, 
          2978, 299, 2952, 2951, 2950, 295, 2940, 283, 2870, 2869, 2868, 275, 
          315}], 
         Line[{347, 2966, 2967, 2968, 308, 316, 2993, 328, 3013, 3014, 3015, 
          332, 3025, 3026, 3027, 354, 358, 3049, 3050, 3051, 368, 268}], 
         Line[{372, 3019, 3020, 3021, 344, 351, 3040, 3041, 3042, 3043, 362, 
          365, 3065, 3066, 3067, 3068, 375, 378, 3077, 381, 3056, 3057, 3058, 
          261}], 
         Line[{398, 3279, 518, 3300, 3299, 3298, 515, 3294, 3293, 512, 3291, 
          3290, 502, 3282, 3281, 499, 3266, 3265, 488, 3183, 3182, 481, 3242, 
          509}], 
         Line[{406, 3210, 3209, 3208, 506, 3273, 496, 3257, 3256, 3255, 492, 
          3251, 470, 466, 3220, 3219, 3218, 3217, 454, 3121, 3120, 3119, 446, 
          485}], 
         Line[{411, 384, 3095, 3096, 3097, 392, 3101, 3102, 3103, 388, 3107, 
          399, 3128, 419, 3138, 3139, 3140, 423, 3159, 3160, 3161, 435, 3171, 
          439}], 
         Line[{442, 3180, 3179, 3178, 3177, 438, 426, 422, 3137, 3136, 3135, 
          3134, 402, 3115, 3114, 3113, 391, 395, 387, 3094, 3093, 3092, 414}], 
         Line[{447, 3122, 3123, 3124, 407, 415, 3150, 3151, 3152, 3153, 427, 
          431, 3190, 3191, 3192, 455, 3197, 459, 3221, 471, 3144, 3145, 3146, 
          475}], 
         Line[{478, 474, 3230, 3229, 3228, 3227, 462, 3204, 3203, 3202, 458, 
          3196, 434, 3170, 3169, 3168, 430, 3158, 418, 3088, 3087, 3086, 410, 
          450}], 
         Line[{482, 3184, 3185, 3186, 443, 451, 3211, 463, 3231, 3232, 3233, 
          467, 3243, 3244, 3245, 489, 493, 3267, 3268, 3269, 503, 403}], 
         Line[{507, 3237, 3238, 3239, 479, 486, 3258, 3259, 3260, 3261, 497, 
          500, 3283, 3284, 3285, 3286, 510, 513, 3295, 516, 3274, 3275, 3276, 
          396}], 
         Line[{533, 3497, 653, 3518, 3517, 3516, 650, 3512, 3511, 647, 3509, 
          3508, 637, 3500, 3499, 634, 3484, 3483, 623, 3401, 3400, 616, 3460, 
          644}], 
         Line[{541, 3428, 3427, 3426, 641, 3491, 631, 3475, 3474, 3473, 627, 
          3469, 605, 601, 3438, 3437, 3436, 3435, 589, 3339, 3338, 3337, 581, 
          620}], 
         Line[{546, 519, 3313, 3314, 3315, 527, 3319, 3320, 3321, 523, 3325, 
          534, 3346, 554, 3356, 3357, 3358, 558, 3377, 3378, 3379, 570, 3389, 
          574}], 
         Line[{577, 3398, 3397, 3396, 3395, 573, 561, 557, 3355, 3354, 3353, 
          3352, 537, 3333, 3332, 3331, 526, 530, 522, 3312, 3311, 3310, 549}], 
         Line[{582, 3340, 3341, 3342, 542, 550, 3368, 3369, 3370, 3371, 562, 
          566, 3408, 3409, 3410, 590, 3415, 594, 3439, 606, 3362, 3363, 3364, 
          610}], 
         Line[{613, 609, 3448, 3447, 3446, 3445, 597, 3422, 3421, 3420, 593, 
          3414, 569, 3388, 3387, 3386, 565, 3376, 553, 3306, 3305, 3304, 545, 
          585}], 
         Line[{617, 3402, 3403, 3404, 578, 586, 3429, 598, 3449, 3450, 3451, 
          602, 3461, 3462, 3463, 624, 628, 3485, 3486, 3487, 638, 538}], 
         Line[{642, 3455, 3456, 3457, 614, 621, 3476, 3477, 3478, 3479, 632, 
          635, 3501, 3502, 3503, 3504, 645, 648, 3513, 651, 3492, 3493, 3494, 
          531}], 
         Line[{668, 3715, 788, 3736, 3735, 3734, 785, 3730, 3729, 782, 3727, 
          3726, 772, 3718, 3717, 769, 3702, 3701, 758, 3619, 3618, 751, 3678, 
          779}], 
         Line[{676, 3646, 3645, 3644, 776, 3709, 766, 3693, 3692, 3691, 762, 
          3687, 740, 736, 3656, 3655, 3654, 3653, 724, 3557, 3556, 3555, 716, 
          755}], 
         Line[{681, 654, 3531, 3532, 3533, 662, 3537, 3538, 3539, 658, 3543, 
          669, 3564, 689, 3574, 3575, 3576, 693, 3595, 3596, 3597, 705, 3607, 
          709}], 
         Line[{712, 3616, 3615, 3614, 3613, 708, 696, 692, 3573, 3572, 3571, 
          3570, 672, 3551, 3550, 3549, 661, 665, 657, 3530, 3529, 3528, 684}], 
         Line[{717, 3558, 3559, 3560, 677, 685, 3586, 3587, 3588, 3589, 697, 
          701, 3626, 3627, 3628, 725, 3633, 729, 3657, 741, 3580, 3581, 3582, 
          745}], 
         Line[{748, 744, 3666, 3665, 3664, 3663, 732, 3640, 3639, 3638, 728, 
          3632, 704, 3606, 3605, 3604, 700, 3594, 688, 3524, 3523, 3522, 680, 
          720}], 
         Line[{752, 3620, 3621, 3622, 713, 721, 3647, 733, 3667, 3668, 3669, 
          737, 3679, 3680, 3681, 759, 763, 3703, 3704, 3705, 773, 673}], 
         Line[{777, 3673, 3674, 3675, 749, 756, 3694, 3695, 3696, 3697, 767, 
          770, 3719, 3720, 3721, 3722, 780, 783, 3731, 786, 3710, 3711, 3712, 
          666}], 
         Line[{803, 3933, 923, 3954, 3953, 3952, 920, 3948, 3947, 917, 3945, 
          3944, 907, 3936, 3935, 904, 3920, 3919, 893, 3837, 3836, 886, 3896, 
          914}], 
         Line[{811, 3864, 3863, 3862, 911, 3927, 901, 3911, 3910, 3909, 897, 
          3905, 875, 871, 3874, 3873, 3872, 3871, 859, 3775, 3774, 3773, 851, 
          890}], 
         Line[{816, 789, 3749, 3750, 3751, 797, 3755, 3756, 3757, 793, 3761, 
          804, 3782, 824, 3792, 3793, 3794, 828, 3813, 3814, 3815, 840, 3825, 
          844}], 
         Line[{847, 3834, 3833, 3832, 3831, 843, 831, 827, 3791, 3790, 3789, 
          3788, 807, 3769, 3768, 3767, 796, 800, 792, 3748, 3747, 3746, 819}], 
         Line[{852, 3776, 3777, 3778, 812, 820, 3804, 3805, 3806, 3807, 832, 
          836, 3844, 3845, 3846, 860, 3851, 864, 3875, 876, 3798, 3799, 3800, 
          880}], 
         Line[{883, 879, 3884, 3883, 3882, 3881, 867, 3858, 3857, 3856, 863, 
          3850, 839, 3824, 3823, 3822, 835, 3812, 823, 3742, 3741, 3740, 815, 
          855}], 
         Line[{887, 3838, 3839, 3840, 848, 856, 3865, 868, 3885, 3886, 3887, 
          872, 3897, 3898, 3899, 894, 898, 3921, 3922, 3923, 908, 808}], 
         Line[{912, 3891, 3892, 3893, 884, 891, 3912, 3913, 3914, 3915, 902, 
          905, 3937, 3938, 3939, 3940, 915, 918, 3949, 921, 3928, 3929, 3930, 
          801}], 
         Line[{938, 4151, 1058, 4172, 4171, 4170, 1055, 4166, 4165, 1052, 
          4163, 4162, 1042, 4154, 4153, 1039, 4138, 4137, 1028, 4055, 4054, 
          1021, 4114, 1049}], 
         Line[{946, 4082, 4081, 4080, 1046, 4145, 1036, 4129, 4128, 4127, 
          1032, 4123, 1010, 1006, 4092, 4091, 4090, 4089, 994, 3993, 3992, 
          3991, 986, 1025}], 
         Line[{951, 924, 3967, 3968, 3969, 932, 3973, 3974, 3975, 928, 3979, 
          939, 4000, 959, 4010, 4011, 4012, 963, 4031, 4032, 4033, 975, 4043, 
          979}], 
         Line[{982, 4052, 4051, 4050, 4049, 978, 966, 962, 4009, 4008, 4007, 
          4006, 942, 3987, 3986, 3985, 931, 935, 927, 3966, 3965, 3964, 954}], 
         Line[{987, 3994, 3995, 3996, 947, 955, 4022, 4023, 4024, 4025, 967, 
          971, 4062, 4063, 4064, 995, 4069, 999, 4093, 1011, 4016, 4017, 4018,
           1015}], 
         Line[{1018, 1014, 4102, 4101, 4100, 4099, 1002, 4076, 4075, 4074, 
          998, 4068, 974, 4042, 4041, 4040, 970, 4030, 958, 3960, 3959, 3958, 
          950, 990}], 
         Line[{1022, 4056, 4057, 4058, 983, 991, 4083, 1003, 4103, 4104, 4105,
           1007, 4115, 4116, 4117, 1029, 1033, 4139, 4140, 4141, 1043, 943}], 
         Line[{1047, 4109, 4110, 4111, 1019, 1026, 4130, 4131, 4132, 4133, 
          1037, 1040, 4155, 4156, 4157, 4158, 1050, 1053, 4167, 1056, 4146, 
          4147, 4148, 936}], 
         Line[{1073, 4369, 1193, 4390, 4389, 4388, 1190, 4384, 4383, 1187, 
          4381, 4380, 1177, 4372, 4371, 1174, 4356, 4355, 1163, 4273, 4272, 
          1156, 4332, 1184}], 
         Line[{1081, 4300, 4299, 4298, 1181, 4363, 1171, 4347, 4346, 4345, 
          1167, 4341, 1145, 1141, 4310, 4309, 4308, 4307, 1129, 4211, 4210, 
          4209, 1121, 1160}], 
         Line[{1086, 1059, 4185, 4186, 4187, 1067, 4191, 4192, 4193, 1063, 
          4197, 1074, 4218, 1094, 4228, 4229, 4230, 1098, 4249, 4250, 4251, 
          1110, 4261, 1114}], 
         Line[{1117, 4270, 4269, 4268, 4267, 1113, 1101, 1097, 4227, 4226, 
          4225, 4224, 1077, 4205, 4204, 4203, 1066, 1070, 1062, 4184, 4183, 
          4182, 1089}], 
         Line[{1122, 4212, 4213, 4214, 1082, 1090, 4240, 4241, 4242, 4243, 
          1102, 1106, 4280, 4281, 4282, 1130, 4287, 1134, 4311, 1146, 4234, 
          4235, 4236, 1150}], 
         Line[{1153, 1149, 4320, 4319, 4318, 4317, 1137, 4294, 4293, 4292, 
          1133, 4286, 1109, 4260, 4259, 4258, 1105, 4248, 1093, 4178, 4177, 
          4176, 1085, 1125}], 
         Line[{1157, 4274, 4275, 4276, 1118, 1126, 4301, 1138, 4321, 4322, 
          4323, 1142, 4333, 4334, 4335, 1164, 1168, 4357, 4358, 4359, 1178, 
          1078}], 
         Line[{1182, 4327, 4328, 4329, 1154, 1161, 4348, 4349, 4350, 4351, 
          1172, 1175, 4373, 4374, 4375, 4376, 1185, 1188, 4385, 1191, 4364, 
          4365, 4366, 1071}], 
         Line[{1208, 4587, 1328, 4608, 4607, 4606, 1325, 4602, 4601, 1322, 
          4599, 4598, 1312, 4590, 4589, 1309, 4574, 4573, 1298, 4491, 4490, 
          1291, 4550, 1319}], 
         Line[{1216, 4518, 4517, 4516, 1316, 4581, 1306, 4565, 4564, 4563, 
          1302, 4559, 1280, 1276, 4528, 4527, 4526, 4525, 1264, 4429, 4428, 
          4427, 1256, 1295}], 
         Line[{1221, 1194, 4403, 4404, 4405, 1202, 4409, 4410, 4411, 1198, 
          4415, 1209, 4436, 1229, 4446, 4447, 4448, 1233, 4467, 4468, 4469, 
          1245, 4479, 1249}], 
         Line[{1252, 4488, 4487, 4486, 4485, 1248, 1236, 1232, 4445, 4444, 
          4443, 4442, 1212, 4423, 4422, 4421, 1201, 1205, 1197, 4402, 4401, 
          4400, 1224}], 
         Line[{1257, 4430, 4431, 4432, 1217, 1225, 4458, 4459, 4460, 4461, 
          1237, 1241, 4498, 4499, 4500, 1265, 4505, 1269, 4529, 1281, 4452, 
          4453, 4454, 1285}], 
         Line[{1288, 1284, 4538, 4537, 4536, 4535, 1272, 4512, 4511, 4510, 
          1268, 4504, 1244, 4478, 4477, 4476, 1240, 4466, 1228, 4396, 4395, 
          4394, 1220, 1260}], 
         Line[{1292, 4492, 4493, 4494, 1253, 1261, 4519, 1273, 4539, 4540, 
          4541, 1277, 4551, 4552, 4553, 1299, 1303, 4575, 4576, 4577, 1313, 
          1213}], 
         Line[{1317, 4545, 4546, 4547, 1289, 1296, 4566, 4567, 4568, 4569, 
          1307, 1310, 4591, 4592, 4593, 4594, 1320, 1323, 4603, 1326, 4582, 
          4583, 4584, 1206}], 
         Line[{1343, 4806, 1455, 4827, 4826, 4825, 1452, 4821, 4820, 1449, 
          4818, 4817, 1443, 4809, 4808, 1432, 4784, 4783, 1429, 4787, 4786, 
          1418, 4722, 1446}], 
         Line[{1351, 4750, 4749, 4748, 1440, 4800, 1436, 4793, 4792, 4791, 
          1426, 4775, 1411, 4760, 4759, 4758, 4757, 1399, 4647, 4646, 4645, 
          1391, 1422}], 
         Line[{1356, 1329, 4621, 4622, 4623, 1337, 4627, 4628, 4629, 1333, 
          4633, 1344, 4654, 1364, 4664, 4665, 4666, 1368, 4685, 4686, 4687, 
          1380, 4707, 1384}], 
         Line[{1387, 4716, 4715, 4714, 4713, 1383, 1371, 1367, 4663, 4662, 
          4661, 4660, 1347, 4641, 4640, 4639, 1336, 1340, 1332, 4620, 4619, 
          4618, 1359}], 
         Line[{1392, 4648, 4649, 4650, 1352, 1360, 4676, 4677, 4678, 4679, 
          1372, 4691, 1376, 4729, 4730, 4731, 1400, 4735, 1404, 4670, 4671, 
          4672, 1412}], 
         Line[{1415, 1407, 4744, 4743, 4742, 4741, 1403, 1379, 4706, 4705, 
          4704, 4703, 4702, 4701, 4700, 1375, 4684, 1363, 4614, 4613, 4612, 
          1355, 1395}], 
         Line[{1419, 4723, 4724, 4725, 1388, 1396, 4751, 1408, 4761, 4762, 
          4763, 4764, 4765, 4766, 1423, 1433, 4794, 4795, 4796, 1437, 1348}], 
         Line[{1444, 4717, 4718, 4719, 1416, 1427, 4776, 4777, 4778, 4779, 
          1430, 1441, 4810, 4811, 4812, 4813, 1447, 1450, 4822, 1453, 4801, 
          4802, 4803, 1341}], 
         Line[{1470, 5025, 1582, 5046, 5045, 5044, 1579, 5040, 5039, 1576, 
          5037, 5036, 1570, 5028, 5027, 1559, 5003, 5002, 1556, 5006, 5005, 
          1545, 4941, 1573}], 
         Line[{1478, 4969, 4968, 4967, 1567, 5019, 1563, 5012, 5011, 5010, 
          1553, 4994, 1538, 4979, 4978, 4977, 4976, 1526, 4866, 4865, 4864, 
          1518, 1549}], 
         Line[{1483, 1456, 4840, 4841, 4842, 1464, 4846, 4847, 4848, 1460, 
          4852, 1471, 4873, 1491, 4883, 4884, 4885, 1495, 4904, 4905, 4906, 
          1507, 4926, 1511}], 
         Line[{1514, 4935, 4934, 4933, 4932, 1510, 1498, 1494, 4882, 4881, 
          4880, 4879, 1474, 4860, 4859, 4858, 1463, 1467, 1459, 4839, 4838, 
          4837, 1486}], 
         Line[{1519, 4867, 4868, 4869, 1479, 1487, 4895, 4896, 4897, 4898, 
          1499, 4910, 1503, 4948, 4949, 4950, 1527, 4954, 1531, 4889, 4890, 
          4891, 1539}], 
         Line[{1542, 1534, 4963, 4962, 4961, 4960, 1530, 1506, 4925, 4924, 
          4923, 4922, 4921, 4920, 4919, 1502, 4903, 1490, 4833, 4832, 4831, 
          1482, 1522}], 
         Line[{1546, 4942, 4943, 4944, 1515, 1523, 4970, 1535, 4980, 4981, 
          4982, 4983, 4984, 4985, 1550, 1560, 5013, 5014, 5015, 1564, 1475}], 
         Line[{1571, 4936, 4937, 4938, 1543, 1554, 4995, 4996, 4997, 4998, 
          1557, 1568, 5029, 5030, 5031, 5032, 1574, 1577, 5041, 1580, 5020, 
          5021, 5022, 1468}], 
         Line[{262, 3060, 3059, 382, 3079, 3078, 379, 3074, 376, 3071, 3070, 
          3069, 366, 3062, 363, 3046, 3045, 3044, 352, 2963, 345, 3023, 3022, 
          373}], 
         Line[{269, 2987, 369, 3053, 3052, 359, 3034, 355, 3030, 3029, 3028, 
          333, 3017, 3016, 329, 2995, 2994, 317, 2898, 309, 2970, 2969, 348}], 
         Line[{270, 2989, 2988, 370, 3054, 360, 3036, 3035, 356, 3032, 3031, 
          334, 3018, 330, 2998, 2997, 2996, 318, 2900, 2899, 310, 2971, 349}], 
         Line[{277, 2871, 250, 2880, 2881, 258, 2886, 2887, 254, 2890, 2891, 
          265, 2911, 2912, 285, 2923, 2924, 289, 2944, 2945, 301, 2954, 2955, 
          305}], 
         Line[{278, 2872, 2873, 251, 2882, 259, 2888, 255, 2892, 2893, 2894, 
          266, 2913, 2914, 2915, 286, 2925, 290, 2946, 302, 2956, 2957, 2958, 
          306}], 
         Line[{313, 2907, 2908, 273, 2865, 281, 2936, 2937, 2938, 293, 2947, 
          297, 2975, 2976, 321, 2980, 2981, 325, 3004, 3005, 337, 2929, 2930, 
          341}], 
         Line[{314, 2909, 274, 2866, 2867, 282, 2939, 294, 2948, 2949, 298, 
          2977, 322, 2982, 2983, 326, 3006, 3007, 3008, 338, 2931, 342}], 
         Line[{397, 3278, 3277, 517, 3297, 3296, 514, 3292, 511, 3289, 3288, 
          3287, 501, 3280, 498, 3264, 3263, 3262, 487, 3181, 480, 3241, 3240, 
          508}], 
         Line[{404, 3205, 504, 3271, 3270, 494, 3252, 490, 3248, 3247, 3246, 
          468, 3235, 3234, 464, 3213, 3212, 452, 3116, 444, 3188, 3187, 483}], 
         Line[{405, 3207, 3206, 505, 3272, 495, 3254, 3253, 491, 3250, 3249, 
          469, 3236, 465, 3216, 3215, 3214, 453, 3118, 3117, 445, 3189, 484}], 
         Line[{412, 3089, 385, 3098, 3099, 393, 3104, 3105, 389, 3108, 3109, 
          400, 3129, 3130, 420, 3141, 3142, 424, 3162, 3163, 436, 3172, 3173, 
          440}], 
         Line[{413, 3090, 3091, 386, 3100, 394, 3106, 390, 3110, 3111, 3112, 
          401, 3131, 3132, 3133, 421, 3143, 425, 3164, 437, 3174, 3175, 3176, 
          441}], 
         Line[{448, 3125, 3126, 408, 3083, 416, 3154, 3155, 3156, 428, 3165, 
          432, 3193, 3194, 456, 3198, 3199, 460, 3222, 3223, 472, 3147, 3148, 
          476}], 
         Line[{449, 3127, 409, 3084, 3085, 417, 3157, 429, 3166, 3167, 433, 
          3195, 457, 3200, 3201, 461, 3224, 3225, 3226, 473, 3149, 477}], 
         Line[{532, 3496, 3495, 652, 3515, 3514, 649, 3510, 646, 3507, 3506, 
          3505, 636, 3498, 633, 3482, 3481, 3480, 622, 3399, 615, 3459, 3458, 
          643}], 
         Line[{539, 3423, 639, 3489, 3488, 629, 3470, 625, 3466, 3465, 3464, 
          603, 3453, 3452, 599, 3431, 3430, 587, 3334, 579, 3406, 3405, 618}], 
         Line[{540, 3425, 3424, 640, 3490, 630, 3472, 3471, 626, 3468, 3467, 
          604, 3454, 600, 3434, 3433, 3432, 588, 3336, 3335, 580, 3407, 619}], 
         Line[{547, 3307, 520, 3316, 3317, 528, 3322, 3323, 524, 3326, 3327, 
          535, 3347, 3348, 555, 3359, 3360, 559, 3380, 3381, 571, 3390, 3391, 
          575}], 
         Line[{548, 3308, 3309, 521, 3318, 529, 3324, 525, 3328, 3329, 3330, 
          536, 3349, 3350, 3351, 556, 3361, 560, 3382, 572, 3392, 3393, 3394, 
          576}], 
         Line[{583, 3343, 3344, 543, 3301, 551, 3372, 3373, 3374, 563, 3383, 
          567, 3411, 3412, 591, 3416, 3417, 595, 3440, 3441, 607, 3365, 3366, 
          611}], 
         Line[{584, 3345, 544, 3302, 3303, 552, 3375, 564, 3384, 3385, 568, 
          3413, 592, 3418, 3419, 596, 3442, 3443, 3444, 608, 3367, 612}], 
         Line[{667, 3714, 3713, 787, 3733, 3732, 784, 3728, 781, 3725, 3724, 
          3723, 771, 3716, 768, 3700, 3699, 3698, 757, 3617, 750, 3677, 3676, 
          778}], 
         Line[{674, 3641, 774, 3707, 3706, 764, 3688, 760, 3684, 3683, 3682, 
          738, 3671, 3670, 734, 3649, 3648, 722, 3552, 714, 3624, 3623, 753}], 
         Line[{675, 3643, 3642, 775, 3708, 765, 3690, 3689, 761, 3686, 3685, 
          739, 3672, 735, 3652, 3651, 3650, 723, 3554, 3553, 715, 3625, 754}], 
         Line[{682, 3525, 655, 3534, 3535, 663, 3540, 3541, 659, 3544, 3545, 
          670, 3565, 3566, 690, 3577, 3578, 694, 3598, 3599, 706, 3608, 3609, 
          710}], 
         Line[{683, 3526, 3527, 656, 3536, 664, 3542, 660, 3546, 3547, 3548, 
          671, 3567, 3568, 3569, 691, 3579, 695, 3600, 707, 3610, 3611, 3612, 
          711}], 
         Line[{718, 3561, 3562, 678, 3519, 686, 3590, 3591, 3592, 698, 3601, 
          702, 3629, 3630, 726, 3634, 3635, 730, 3658, 3659, 742, 3583, 3584, 
          746}], 
         Line[{719, 3563, 679, 3520, 3521, 687, 3593, 699, 3602, 3603, 703, 
          3631, 727, 3636, 3637, 731, 3660, 3661, 3662, 743, 3585, 747}], 
         Line[{802, 3932, 3931, 922, 3951, 3950, 919, 3946, 916, 3943, 3942, 
          3941, 906, 3934, 903, 3918, 3917, 3916, 892, 3835, 885, 3895, 3894, 
          913}], 
         Line[{809, 3859, 909, 3925, 3924, 899, 3906, 895, 3902, 3901, 3900, 
          873, 3889, 3888, 869, 3867, 3866, 857, 3770, 849, 3842, 3841, 888}], 
         Line[{810, 3861, 3860, 910, 3926, 900, 3908, 3907, 896, 3904, 3903, 
          874, 3890, 870, 3870, 3869, 3868, 858, 3772, 3771, 850, 3843, 889}], 
         Line[{817, 3743, 790, 3752, 3753, 798, 3758, 3759, 794, 3762, 3763, 
          805, 3783, 3784, 825, 3795, 3796, 829, 3816, 3817, 841, 3826, 3827, 
          845}], 
         Line[{818, 3744, 3745, 791, 3754, 799, 3760, 795, 3764, 3765, 3766, 
          806, 3785, 3786, 3787, 826, 3797, 830, 3818, 842, 3828, 3829, 3830, 
          846}], 
         Line[{853, 3779, 3780, 813, 3737, 821, 3808, 3809, 3810, 833, 3819, 
          837, 3847, 3848, 861, 3852, 3853, 865, 3876, 3877, 877, 3801, 3802, 
          881}], 
         Line[{854, 3781, 814, 3738, 3739, 822, 3811, 834, 3820, 3821, 838, 
          3849, 862, 3854, 3855, 866, 3878, 3879, 3880, 878, 3803, 882}], 
         Line[{937, 4150, 4149, 1057, 4169, 4168, 1054, 4164, 1051, 4161, 
          4160, 4159, 1041, 4152, 1038, 4136, 4135, 4134, 1027, 4053, 1020, 
          4113, 4112, 1048}], 
         Line[{944, 4077, 1044, 4143, 4142, 1034, 4124, 1030, 4120, 4119, 
          4118, 1008, 4107, 4106, 1004, 4085, 4084, 992, 3988, 984, 4060, 
          4059, 1023}], 
         Line[{945, 4079, 4078, 1045, 4144, 1035, 4126, 4125, 1031, 4122, 
          4121, 1009, 4108, 1005, 4088, 4087, 4086, 993, 3990, 3989, 985, 
          4061, 1024}], 
         Line[{952, 3961, 925, 3970, 3971, 933, 3976, 3977, 929, 3980, 3981, 
          940, 4001, 4002, 960, 4013, 4014, 964, 4034, 4035, 976, 4044, 4045, 
          980}], 
         Line[{953, 3962, 3963, 926, 3972, 934, 3978, 930, 3982, 3983, 3984, 
          941, 4003, 4004, 4005, 961, 4015, 965, 4036, 977, 4046, 4047, 4048, 
          981}], 
         Line[{988, 3997, 3998, 948, 3955, 956, 4026, 4027, 4028, 968, 4037, 
          972, 4065, 4066, 996, 4070, 4071, 1000, 4094, 4095, 1012, 4019, 
          4020, 1016}], 
         Line[{989, 3999, 949, 3956, 3957, 957, 4029, 969, 4038, 4039, 973, 
          4067, 997, 4072, 4073, 1001, 4096, 4097, 4098, 1013, 4021, 1017}], 
         Line[{1072, 4368, 4367, 1192, 4387, 4386, 1189, 4382, 1186, 4379, 
          4378, 4377, 1176, 4370, 1173, 4354, 4353, 4352, 1162, 4271, 1155, 
          4331, 4330, 1183}], 
         Line[{1079, 4295, 1179, 4361, 4360, 1169, 4342, 1165, 4338, 4337, 
          4336, 1143, 4325, 4324, 1139, 4303, 4302, 1127, 4206, 1119, 4278, 
          4277, 1158}], 
         Line[{1080, 4297, 4296, 1180, 4362, 1170, 4344, 4343, 1166, 4340, 
          4339, 1144, 4326, 1140, 4306, 4305, 4304, 1128, 4208, 4207, 1120, 
          4279, 1159}], 
         Line[{1087, 4179, 1060, 4188, 4189, 1068, 4194, 4195, 1064, 4198, 
          4199, 1075, 4219, 4220, 1095, 4231, 4232, 1099, 4252, 4253, 1111, 
          4262, 4263, 1115}], 
         Line[{1088, 4180, 4181, 1061, 4190, 1069, 4196, 1065, 4200, 4201, 
          4202, 1076, 4221, 4222, 4223, 1096, 4233, 1100, 4254, 1112, 4264, 
          4265, 4266, 1116}], 
         Line[{1123, 4215, 4216, 1083, 4173, 1091, 4244, 4245, 4246, 1103, 
          4255, 1107, 4283, 4284, 1131, 4288, 4289, 1135, 4312, 4313, 1147, 
          4237, 4238, 1151}], 
         Line[{1124, 4217, 1084, 4174, 4175, 1092, 4247, 1104, 4256, 4257, 
          1108, 4285, 1132, 4290, 4291, 1136, 4314, 4315, 4316, 1148, 4239, 
          1152}], 
         Line[{1207, 4586, 4585, 1327, 4605, 4604, 1324, 4600, 1321, 4597, 
          4596, 4595, 1311, 4588, 1308, 4572, 4571, 4570, 1297, 4489, 1290, 
          4549, 4548, 1318}], 
         Line[{1214, 4513, 1314, 4579, 4578, 1304, 4560, 1300, 4556, 4555, 
          4554, 1278, 4543, 4542, 1274, 4521, 4520, 1262, 4424, 1254, 4496, 
          4495, 1293}], 
         Line[{1215, 4515, 4514, 1315, 4580, 1305, 4562, 4561, 1301, 4558, 
          4557, 1279, 4544, 1275, 4524, 4523, 4522, 1263, 4426, 4425, 1255, 
          4497, 1294}], 
         Line[{1222, 4397, 1195, 4406, 4407, 1203, 4412, 4413, 1199, 4416, 
          4417, 1210, 4437, 4438, 1230, 4449, 4450, 1234, 4470, 4471, 1246, 
          4480, 4481, 1250}], 
         Line[{1223, 4398, 4399, 1196, 4408, 1204, 4414, 1200, 4418, 4419, 
          4420, 1211, 4439, 4440, 4441, 1231, 4451, 1235, 4472, 1247, 4482, 
          4483, 4484, 1251}], 
         Line[{1258, 4433, 4434, 1218, 4391, 1226, 4462, 4463, 4464, 1238, 
          4473, 1242, 4501, 4502, 1266, 4506, 4507, 1270, 4530, 4531, 1282, 
          4455, 4456, 1286}], 
         Line[{1259, 4435, 1219, 4392, 4393, 1227, 4465, 1239, 4474, 4475, 
          1243, 4503, 1267, 4508, 4509, 1271, 4532, 4533, 4534, 1283, 4457, 
          1287}], 
         Line[{1342, 4805, 4804, 1454, 4824, 4823, 1451, 4819, 1448, 4816, 
          4815, 4814, 1442, 4807, 1431, 4782, 4781, 4780, 1428, 4785, 1417, 
          4721, 4720, 1445}], 
         Line[{1349, 4745, 1438, 4798, 4797, 1434, 4788, 1424, 4771, 4770, 
          4769, 4768, 4767, 1409, 4753, 4752, 1397, 4642, 1389, 4727, 4726, 
          1420}], 
         Line[{1350, 4747, 4746, 1439, 4799, 1435, 4790, 4789, 1425, 4774, 
          4773, 4772, 1410, 4756, 4755, 4754, 1398, 4644, 4643, 1390, 4728, 
          1421}], 
         Line[{1357, 4615, 1330, 4624, 4625, 1338, 4630, 4631, 1334, 4634, 
          4635, 1345, 4655, 4656, 1365, 4667, 4668, 1369, 4688, 4689, 1381, 
          4708, 4709, 1385}], 
         Line[{1358, 4616, 4617, 1331, 4626, 1339, 4632, 1335, 4636, 4637, 
          4638, 1346, 4657, 4658, 4659, 1366, 4669, 1370, 4690, 1382, 4710, 
          4711, 4712, 1386}], 
         Line[{1393, 4651, 4652, 1353, 4609, 1361, 4680, 4681, 4682, 1373, 
          4692, 4693, 4694, 1377, 4732, 4733, 1401, 4736, 4737, 1405, 4673, 
          4674, 1413}], 
         Line[{1394, 4653, 1354, 4610, 4611, 1362, 4683, 1374, 4695, 4696, 
          4697, 4698, 4699, 1378, 4734, 1402, 4738, 4739, 4740, 1406, 4675, 
          1414}], 
         Line[{1469, 5024, 5023, 1581, 5043, 5042, 1578, 5038, 1575, 5035, 
          5034, 5033, 1569, 5026, 1558, 5001, 5000, 4999, 1555, 5004, 1544, 
          4940, 4939, 1572}], 
         Line[{1476, 4964, 1565, 5017, 5016, 1561, 5007, 1551, 4990, 4989, 
          4988, 4987, 4986, 1536, 4972, 4971, 1524, 4861, 1516, 4946, 4945, 
          1547}], 
         Line[{1477, 4966, 4965, 1566, 5018, 1562, 5009, 5008, 1552, 4993, 
          4992, 4991, 1537, 4975, 4974, 4973, 1525, 4863, 4862, 1517, 4947, 
          1548}], 
         Line[{1484, 4834, 1457, 4843, 4844, 1465, 4849, 4850, 1461, 4853, 
          4854, 1472, 4874, 4875, 1492, 4886, 4887, 1496, 4907, 4908, 1508, 
          4927, 4928, 1512}], 
         Line[{1485, 4835, 4836, 1458, 4845, 1466, 4851, 1462, 4855, 4856, 
          4857, 1473, 4876, 4877, 4878, 1493, 4888, 1497, 4909, 1509, 4929, 
          4930, 4931, 1513}], 
         Line[{1520, 4870, 4871, 1480, 4828, 1488, 4899, 4900, 4901, 1500, 
          4911, 4912, 4913, 1504, 4951, 4952, 1528, 4955, 4956, 1532, 4892, 
          4893, 1540}], 
         Line[{1521, 4872, 1481, 4829, 4830, 1489, 4902, 1501, 4914, 4915, 
          4916, 4917, 4918, 1505, 4953, 1529, 4957, 4958, 4959, 1533, 4894, 
          1541}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
usTDUyROK8uw8/q9PdvxrzN/cOziHPh7MMvak8TfmCqWf7xqBsJL3m2+NFQE
r+Uyr4dT+qZFq+uQpKvr0GSsskyJtkHPGx8DlU8E4bVjh+48J3bUsiUnpoSN
IGrS6LFfjDMKdi3sIvkv//Fgvz0dPhD9Mudr8BgjvJ0wekr8Fz5aPcxmunoY
/sDg/pjcUFxq5jbVrZODt9zbHhLelKLbFgZxBWIKR9fXwUdHsHa5bSHh+Wl4
p5hQsQ/GPBW3e3OyBH9ddt1P1sWTVufTSVfn4+a4un9xkC2mhXFvUN0Whkt/
P/1F7rUY6Tbe+lIN0E8VstY188WH+Yc/91G446i/22DzAdBreGSSyOCAGnpx
+mT+cbS6nSC6up0Jp6ZrXc3pyK75PSjppRfEz11VRfZd1futHw5FxeJ7/y1P
9mzwBcnsToYUanz3Mk6Zpe/c8YGvomWnlz/s7/WXJ3VEn2n1RV509UWM2Q2+
S5ssof1r2wr31DD0Oer4ooWc80qTrz6a2MDm8Sdq8XKOWNVyYzXhv4XdWUJc
2xZqTpUdmpQ1A6VIb1USf/tJk+9KJ1+O89Sh0ifBYMU1PJI7EA3PFGI5SH5N
ZZuIXu2FEPDKtFvnaxwIbnjOuYbYn74Hf9dlh0LQo5RwrfMO0CDOwkvmM1vX
1Nn7X36kklYzpe30g7+MMZo3WRPg8a7o0+4UblGg7Lh5/gE42sxqmD0ZCxzL
7XekkbhoToeQVJ4DSD5xWOXwPpryMw60nKLwWlp91E5afVQLrT5KsC9l8+nV
wfC1fPJWbOd+0OwoPd5O4deqvVTFefygSnLMN6beDbY6hV5+ReHLms6vcJb3
hO+M7PsVWn1g9x67EhIXnaLxc4COn+vfK3O6lwRAqs+WB8YvXUH2VdQ+grP9
kCji/uMGKxfYla7oCoAVtgmc5H/9ZXY+bm42gWdZ1SGXBaPA8emzLGIHjg7M
1InJ0NWJ3V+vz+Ym6AvPbQpWQkydwiIBK3aiby/tTo5qVdtB+sEujZ6jMjAU
sbmJ5MG/vApmPCK7DuIjRF4UZ2qAm3GPBsk3PaHVfUnR6r4W0Oq+gtZonrFf
uBvzaidWrWMvQuaar9011H5Xfs5Z56toC7rbd6l9MMlC1zWyGqQOMLPL8KxK
ox+EyH4UrneLQOegILkz/2f/stDt33U/72S/HfUAN2HP7JVxvnjphcwWwvOc
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
bLe/pELMhxhhEg8UFVPe8OioD2Tr7/AbtDVHF72d5WQdsw9XHpboi4bzx04a
6YIcDBboV52f9neebXKPSgEJXf1LurvsYQGP1j8Sn6nsVIyz0POGD9d/lz55
G4F7h7POEjtZuTIqEwujoDpWU3CVQyKu39ktTOxq603StvUZSaC1VpdtnXk6
8jVaWRI7XL27NIdnZBOsmb/CfS7l1z5k0p72F/JNXpozfloCQqrFYkbBMWgq
HzLtXyS8eaGi+msVbj4aLF36MxE9bWqm/ZEwx3i5qpAA7C1Wk/HqDKXO3zPj
ZP4L+r/uW+bqjaPlr4us/IIhfX/9QeKHvuEQ5X1zwRmHVG1vqLIEgk7FoDT5
3y+0dwMC6d4NePl0+T+5oFh8wyVpuyxNB09uE1cicTbBTbwfDOzCcJuDUNgI
kx4MtotHEn/5znx7dc4Ob/RV+/ZaYtiZsm+/OBK7fZwm35dOvmjjpUvrD8Wj
wPfvO4qfx8GerSM6pA65nPnDAqnNkWjX+/JYu1E0XNGXFwwi/gV/X/siGV/s
X1cV+f1MKBwU8V98hcJ/0OQH0ck/ptBh+aVcFzxXqm99z6IMiTXSGcRvHXGK
0//42QleVfrd7v1lg195/6WT+3TP5TVmH9AXIppe3v1n6YuSfwXFHlO4W74s
f7dpNH5UK+ddvMUK39av8CbrPnlteGVrry/2asvELUtQxqLPjD3kfq90UVVY
5GSI5cMM3Fy6ynBxNHwO+d982jsMJ+jeYRD7bL0EWFTQbB6HQ/RyfxQdCn9I
zrHY+imTNkc13MvW66GhYIelaQOl5B4f+VN4W++GBm61DPk7xCYPbtFOq8g5
IEt7x0CA7h0DjkSx2wKJXIjeT6u+bA2B4uRHfGTdeWsldY2emsEeka9MJ2oj
4SPvRA6pu15sG15w8IQr7N1t+fT00Rhw6bhmVEzhS2nvP/yie/+BI+h5/CBS
fOVzb2Gy8oVWyYmthLdHhTK8vz474b0JJZF5v21gc233NM8uNr+XL6vQxVOD
HePxLMr4oUNqel2u0t61eEP3rsUtHXeFfC5DLHvXGBCf5wcJB20GCT8mA8H9
fwRUMH4iM+R1jB9I1LLLEH/EiKvotbAmH+5v8eAQ9/SD1HarXoKf+B/vVLgM
MhZyqETjSPfbVtYUV8xJqXEg+25bhEvg2SO+6Ovg+ujYPXdkeVM4nb+WFjn4
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
hTyLLeMuVoeCCKWvuF5UeqyA0nDaH8UdZj3TKWqEbg7QGeK4rovE/xhJxv/4
8/e6jJbyAPTZ7qXPfj0btCfumizm6WCqvTJhkhOAnBQMjeZ7FNGaWyEX5lmb
/p5usRoTgGitZVytdmiDo3HnJvy9DB0Tv6mzxsF5kfDJ9cPh8PBZUD/uL+Mj
8celkvHHLZD4796Q8d9Za6sfc0l3Qox3HylIxuiCgflYN8YdPddra5LXq4js
WMqjzj46j3a7bwvE+fvLlal+Gx0zGLn52KKJ3RyVlUX04zre//jg3pHxwQ1c
vsJQP+QEJ3aJKbndMoLF39vZ8f6zns617qOsBQjGptg73QmGd/3u/Xi/0tli
Zmj/4AoYiVEphDImwhMmpU94f9sAQhaqFI5QP3NUQjJPHUIZO8Qwz4KAUZ7G
AUZ/0DOt+X6f0xkCgt9T4TifXqzH9k9RGEx4MJ7yEwyA3+IN7zB/nynJbpJk
dnu6yVkRupNB09P6esXJSNDOrXhmQfiVokOU+YbwTLi+Q2jliHcUSG2tKBcl
9smfx+zk2q7nQv6p6CnD9mjI1fua9po4vxY/Pkz65nYD2t20NAyZY4Eh2jP4
AHFOcbv7KvDw3wBTqFzHE+UARXOf1g4Tv29qnw0aW8wHsz6f+tOH3ZHfXc04
IULu9Gj+/9D11lFVfU/cPyEqCEoqKiqiWJRIqzBICSLdJd3d3d3d0iEIIiAi
WFsMQMUAEQVBUUSULsHmd7bf+1nP87vr8d+9zjr33Dlnz8zee+b1Zl/XXA7z
coLXdoukI5rfuw6YE/fJJtl5hczOl/8XN2Hof3ET/Rc3HQ9cPvzCpRjozqqc
SnLJQ+xWT8/hOBv6e4vz17VcWB2gb1t/MwvJsmwaxHH59lfVmfa0dLC4OGEu
RJuOWC+5H8Bx/MZN9QClja7Innfv7JuZVGDb4cWE89Kf9Ov1lqnC0HfjcxOD
gulwouGpWB6ux/vyNa5bNg4hc5bSZqcMYL9rroh1RXnKPVSkZdJQhOG1394X
MuHsoy+y3sT9CwVH+GsqU9FVjnkea9VkeLlg+4WfuP5H2YmY8/dTEI99hFOp
SiRsKN9+EMdNpg1DTaYfk1HXq+UOh3wP4Aui/4m5KPKNofeWqJPRa+nfJxLi
RFGG00krzE/YUzVcftkzDvmkyi5uMzZF8hr9l2zw/qdhkJnJWCTq5s1Xpkl0
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
zWnISp2Avfavvyvx5OL30lAGoket3lzw/L6pP6hKzTKqXizEyqjWcKI7/TRg
5eebd4WY0etPb7AU4r2gDmWidw1n2EvoGxgCldelD3u9CzC1g1mB6GPb/J4/
OS5igUzabno2ZbmwvbzlT15Z3krQXQcXShya31p7OD4fDrAcXFtFnmfrjyh6
xk83JV423OpTyYflMza3LlHsm28zb6Sj8QDnLFExWo9CcNq0eeogxe6vwpfV
3WQP68YuV5bsK4QzM1cfk7yd93LPfrKjOSw3eR6UmCqA8Y9bnMwI/+jqZ0vl
pUBM12/efuBCPmgoJkV7UuwJu85Jn5ZzQOGKrS1ZGzNhfi5/rJHohzfuuFDv
88V1TV/5lYuzQaKW3lWK1OHfkbmuv1MFnI3fVpsuxYJiSWU90VWajQ2f2+id
RBazp47fVifD/mczQPbl922JxuesPVFt3sZbPikdZBVmrEk9f/lzidWO76NR
3/dVpYNKKbziksu79XMWaNpKGo4ppaDq+WG2PXWloJpwcQ/JHxOqfciQ8CgT
4f4qV5vVZTDIUxVR+GMWGJpmklwjI5G2y+FZy8EikGMPWH1/eRZEhY+ddnyT
iKnPPZdD84vALzG2i5xTJB610zDlDkeZ7mTRd3x5YHZMKZbkbSpe+x1j9CsX
j4Xo1G2XKoPVfUxl/d8pft1F2Tcsxrn4KbKuUIsrF94MiZXzUfqxHkm1Ongp
B42o6i000+IA6wtczlD62fV8fJSvJAMfiVVe271cBDK/ejTbKc8fcuJUUtRS
OmrctLG7VZMBQeX9+uS8o+wdXYNtQDwur42lbY7LAwmeU/7y5By5oyDt3roc
tKNpuP9L0AguDh74RPKgSnifJnnqpOMnSRrBuGMhwJvgx3SLYp8rT8hoMEtA
1tp3+6YdfIH2WX43UMY/vvOWdMu+OAyjXVRYeyoRMp2HPUmeQBSV8KWRh2H4
OX6r/8BiLIhKz1PLUtr7b71qJaLoidJ6fZdjoqIg2JVfhPDsmp76PX3U6YiJ
NMOabicy4NOaeZ8uSj8Vd0I9S5JkIN6SKqlCKQ1arTy8iY6q3OV5xErcA+5x
trEf7U+CS+v6NhBdgskp4MuudhbsKK3v6RzOgQWFCvUdlH6CDlvfURU+gge2
Hin/wp0Lv277iG+i2F2S+0xnTcRROaBAOeRlBqxiCPhB/q+NWKhiA6sRfm72
nuQ3zYW9Kn4shC8pM3xxA5uuNg7dqbNv4MiEn4v8PlfJ+XtzYP5tXiXc1jzp
qXA+CcLFu0Tkif5QH98QeEQXdplVhPc/TYMWmUU5onssfhbaTTtrgHvppqfE
vDOh1+7DRZL36HaQqlOSzR153Lunpn5kg17JRBOZF3HeoyOD502gbezlCptp
Nsy9rFpN6sE6DZtXV7BroDSkO/WN5kLP4h3DBcr7vdQePOkTbwm+LIrdVf/l
w5o+pM35ReoSeBrdcMhAg+2KbM5hYnh9i8IAqYc8MOJhYbkpEuOzCugC1rvD
GenTAqRu247XH5oPfIvG99uMg9bYe6LpRjU+Useeii32gVm9Ch7YvFmEnzUc
rPdPfCP3uKUenHlL89kST61mbv/EugdXqecHkHscqRdC8Ze/C/b8WNX7eigc
2+5s0SJ+cksVv+63jlBoVn3j128ZD+Lj944S3srTb59ad6/4Q3as4ZHwendg
3xCpSvapzw3fx/oPecP6+5ne3zd54tryX6WkXtPmzNes0nNOYNpWuus5dQLe
7YvRJn5vyrG+VyEvMvGLYAJrNE0EHub6pq1P+b//BVf2vuROxq9GGzM3DyWh
iC+THTnvXhgcktSOj8TFW3HPLhpnoUbyjl6Sr7W2biyy/kUcqqjPdazsScCX
Ohq+RD+R0F0MFIkPxrdH73dWUmXi+hfMKyRvh3NWUujmijcKu/YJZtWmo3tz
TQCpY/9cvKJ6cEQfWGwE0/PmctAyomWUi2JnWjMxffXTJlQsd3zvq56Ld5fv
r99A8sraJCZc0AiZk29Z61Xm4uPQ9Rt/kbyaZQ/juXEVaFpujTkqkIdGup9u
EA7OOfopToNrqvjBgnHPrrA8PCT1U+8ZyRPYYTdQosAMM0cyx76Z5GMyg8RU
A1kHmDtFr1zyRufdwS4BrdlQ7KRpKkP53UYWrhdH8vXxuPm9vqmVTKir69PN
odgDzc0bZHqtYfiZDLe6WgY4z1V9eESxrx94Yam04Ac7jsc/28edBumtJlyT
5PlN43tHP9qjw85DxQsnc6Hsg0UrDcXux07Py3JTGSRoGXmtqrKh44CWmgFZ
t9t9N3jze0JF58nbbZ8y4fvlRB+SX2ehFD1R/EobqzuOc9rR5oPC8HGhm5Tn
5zZZIyUgfhyaEjPe99QWQMJ7masupM6zogMV87gnpo84Fm66m49jAhEJsRR7
XdmM4gVPH2Rtk2HedDcXvzlmRr8lflSYp6zKb18MMnj6neluNuoc1G0keRRr
n5/fZ9BmjRzuZl1MLnm4ZbBy6AnJQ1bg103qt0exHTyi61xy8Iek0D4hSnuN
gzdMv8UJYtEM2Pxiy8V1161Oc1DsqSI/L4++8IK87Q5gnJgAObaszUQfnl6d
+551kwPcldNfPsGXDlSVbYGE38rL2VnzKNwZBGVqV04vRcEvzteRxJ/xZ9Zn
N5jTB1naboPwiCzI/b3pPsn//M1nRvX1nimIdFq5Tl9OhJHopaukvlYP9X9B
DRpWMChyn5rjQTAs3PKLJ7rlSqvc6NPEAJRSeCJIczcTT2eU0PtR+tk/ZjfR
PuWCZdxLF6ldsnCCQ6aR8OMi2wJ+UDH44Oe8I2Uv7mVhSJDIOFl/8mmaNjxa
fQwHVMsSl9iycebn/m0uxI81U39CPWmFXw8LvhxwzcZ+iUMFJkQHrnXW1GR1
RZ1kp5QLndk45u4+R/ad0JkHORcem8Mb3t1SY9ey0doy2YTkNamkHr3PT6UA
JmW3WO+y56Dh5qrNShR7Vk1N7pazx9BWbw+Uu+dg2p1Pl8g8vbB+5nEOszV+
F1msD3mQg7L77PZuJ/lXu1wOxaf4w9ev/KpZpxNBrv/eUVI3nqf+4kH5+XBw
VQ2Jv9+WClmn6A8QfS+9qpOOTTYaTpjfUL4SlgJUA/VryL5QlhZZvOmgNZRt
+CrY61QIu6i3PyX76T4JKb+6O3pQ0PL1jO3uQpgUfrGDcCHT7Xu1eL/vhnOM
i2I/xgsgDHV2WFHsEkz3F3zTFaCSc8u+TLtC0M6R6Fal2PWfbPq1xxPQueh0
xU6+QpjooAvRp9ibRUMPtj3TxWNpTNK6loUwE2j0H2l/2TBiNq82AJ5KR4fO
9UYCs4KWF9GRCnhD7gSNe0PQbtGl7Bu64Ff1ZpTEs5LzCie/KbnAFzbTXi/Z
YOT/TXue3HuieSEYKpDmA5yD0U5UvoHQRzXdR85TEqtNZM7lucKRvaL1u1+a
4EpRfjOJLwZ5jZfUp9ygLqSAlbPMDRIYdB3IvSqrk8bdUq22oL6cd06xVhuc
TuiKk3jhd9vVpyGkHmkIW897SvzlKz3WQ+KvPSMeOvHM1pCxhkblelMUtsu2
zJA48UR99M3DdLooMZTuEiWXiUtZl4eaKOP/2IJ11bV2TfzF0xPeX5CAodus
pUwp7Y2Yn9EtWXri3sCKk6f352C5EGsHyZuaZtfoE3Y+ilJS1U/TXUJwR8Ar
BbKPLJfVi3Jf9cCTnBZDFRFp+Oq3pynh/vgqv0k/Kx+KvZdSPJR35iNdBV1E
GGWcW3m12UIclEEtfPqC0IMsHLbpZCP7xcutOb13Z23AJ0C4+hAlHpTHt93E
vxU8UErvvvjlpgQnk9qcchr+urwuifgtj3WMDFusPcFr/oufUlI6tul6/PFX
H4YO91TonQQtFmFfqjXJuM7W/Y9/G813k8urUwUnIqQuWi3FopeFzR9/eI9i
3aUaVAIe+yqXoooc0KFfq0P+b8UX5k1bsyUgZqppXOtMBrDuu+FJ4t9H3QdX
50jooVT/4mT2jzSIlAsaIXlr33a1s3FXbIKk3fljw2JJ0Gu+jYPoORZsyy+M
PY2wvnHA9fZsHOj63y8iea2dVAyrPHY64MKtT2+KLkRD2tj1ZaJLtFo/yOGP
2YlUj0otV++KgpfphkokXmvRdMmkPm+KYy8TjjU/CIPZ475D5L5wTvzs0wYl
J6TXrb2spRIAMu96NInuYXDPWqXe2BsPb9NgHb3lBSn3jpURfaaszKl93wV9
VLlwK2+skbLffbXf10t5Ly+YJr26GbxwTcSHw90VhZjExfxCgGJnZ30iwl9s
jjJPd1FnvsvHukMv89Ipdh3Wm6Wyk6GY+pH6bXZeCRY+OHrSmOJvH9bPfBIf
64NjazRmPZ8X4XatJf43FLvB/IOseBVb1Dj80l52SyFupnfR16b0M2jX4Hvv
XQxyMHwoLFEpQ49A62u2FD+8Ei/mfL8UjnucOVn395zB0e1USXSUfkLyU3Ll
afxwa8OD3xsZS1D62/Y7mRR7m6Dv6e+HHZGmrjh3XKMI+Q/ttllP6d81//aG
gCUNDHVZ31hOkw1ZU1LnSR5C4BuW+JTj8sjxJsNKsiUJPJd/3iR+eKXizDmj
dexoqbWtrKk3FDibLS4SfYb+7M+T7PSncP6o88ew1mSYH2kVJueGwWHfRHXO
WOPHnNfp/I7hUHRtl8JVit3ExPwHu7oXvt4tdcfNOQJyFD/LED/w0iH9EmEa
A8gNTqPulsmGEXquFVuybn/sSHp+2xQsMx3XJsylQdGu03Mk35WNRsiwScEK
2K7Y+Bo5x0HHp2lpwps+ZX63vF3FA7reSQ9ZcmaCM1/X5RpK+8EE16mhL57/
X0fXHQ/088bTTqkIDaUiq0Iqo9CDqFSy996y946MbNl7b7JTRsojK0kUyohK
+hIqSRQNv8/9/r3Xve4+n7tn3fvez3PA7S6ekF4ZDu/VTpwi+LxAd+nYwGUv
cOqOffRyIQreq5znJ3ki4b0G6LVLCN7MBnWUPdAAhloaH4JXcM24thUqWqC4
3cf7URZeuH1XSg/xd0V1bz+03PXAF1FxrF2+tzHi3inur9Q4n0yCbR6b6WHo
QHlliJkBdIwM8hN7lX3bWX/LEReM2fhtjaSJB0rwbm8n+e88915v+q3mh8Fe
o6y5NyLxktyP/+uv1CFxq6R4e7xcUX6m1s4ELoT0Xib3Gj5//miuO+iDu2r0
7xfou+Eb7iYOgtsX/fD65x7lgXJC19eMuVtACM3XHiL/zw/OmPvauGD7d2Y2
mYvxuETHv5Xg2B9Hergm39rjg0vaeavNQciXYdxO8hQ2zZiu1f9xFZNSm/tX
P0WjLL+GIMkPUqRNjNDLssCRLsXAxGfGGGLva07ytZfomBLTt/JBI8s1S4b1
N9FVhu4lqV83KH6gas7AGgwu2y+wM4XjNiNbWnKPnLXt9JuNDrZQ3jPopSAQ
BCrt0saER8FHe7/y8joj6K44Osgx5w/OwlZyBIdUs1/WZVG7AFG/nuhOa/qC
66FiRoLv5cdJMf82uILiXp2sN165Q3TgdD3hOZS9C+0+weELqmyDw4GioRB3
nkuA3Huu1woa0fzqDkKMecyGy7fg3uI1W1I3z123aK1XnSMMmhnoCtX5w+r3
oBBSZyxex+XLeEgwWLkYyGXKRMBHUd7ycnJuajm8zs8mEFivTdQGrQuFx+lr
xQm+t5NRPFfjtwfS0JeG+/JmYG+80UV/Sh/TMG2Sjd8O9wWvbFK2TUMVBR7B
NZQ+zqlGHF7qUcGCffq8TJUp+H6DTZgl1a7Ru2V3rqYBtrxYfyOwNwWdgnmC
iX8PfprVqlovCYfKG3PO7EzGluvHY0i+zAO1P1mV540hWCjknbJDIvrO7HUj
8fAK7PpkY+8FSgxnwn4yxGGRw1omU6r90e6j0uoHboL0kI3aGHsSym/KCSZ4
gof5eZf/jruC7cpU2+n0eOTd/9KOnBO/yZ33oztnAaveMj2ejLH4VsZ6ivij
r4dcjlr4+0N/Zd+98tNp+JszfTPBMTIrbF9t+ekJHlpP55jLk/G+aXMYwW2y
ohIyTKcCwS/kyDNDmSw8uMyYQvCTbpr253NRftDtITqqaXUDas5eeUbup24t
O03U5URARk4R7ca1t4AngqmmjZq3+5qPxZRlLLDR0ZqZr/GDjsWtN4jdYFe8
vbTx13VIgIAUqz576Lbo6CB1nNj0vxUWinmC/1HRf0WSqnjowUYhct8hMWNi
Gd4UANXvft2+5uSFivuq7Mk75j+UZI9G64XBdcnht4tdIRh/vcCtnvCpvLrO
bm0LhS0uG8sPWbhA7K5sQ4I/QGb7LomT0cB1p57NwYQLr24xyFmm+queNrZS
8I8DOfNbQ6ZvXdE+IKeU8PwvG2t/GAlMhHhZhTOmfz0gi8UjbYRanz/zQdfW
vkqBPVWn2P72XIO3m1pKSb7J5wd9p75HxULM9oBLTCPRyMZqrxNOtSvQ9O/j
m0gGhfF/4/s1AnGjAPsGXqq9UNH2R9y3JNAXGB+xv5aAGf06ZX+oda79fujG
KY8QiLolkpsVnIRrynx9SJxp7la0Z11GDMgwbo+h+5OGZ5clNQn+s3Wye1nm
bRi0HNF/ZZ2chjUo10PwqH/ZbnPn/ibCfUYBT2aRbNTMyC8huNPqPPtFz95Y
6JVvS9HeSPmvzofBBO8yTPY5JX4+Ej4rLX89UJKFz9Mu8BJ8jGUi021hWgKu
RRy/tvO1H8z/6+Yn9foWTmg8nWdjxcDghcOprt6wefdjTWLHCuWzMufl/zaN
nRRSu6d7AyTNu/YSnvli1JdLlY6XUO7I0y10ki7wV6qRj+y7/ZHEthfJMsg4
TMvAze0Kyzf9R0lef3r/7aPfm6TwFYxsOL/DDdat57Am9xeCs4lTgoftoKA0
m045JR62j/H4Ejv50qu2IoXdAzQWp2dYf0ZD5gnvIiIPypwn3YUf20Ge1dLl
wcxoaKp9+5vY7Un+l+fEtP3A4cbYo5IS6tyk0/id8GFGzky5hzl5gLDlRBn7
cig0THCMEHyp45ALZ+wJe7hoCcnxl0LhTv2fZ/JUe7Mz4wnBJXWIaPjRbyma
DMcvPPck+Gpcv6TXdLUsZhe3fkw8mwh3VYqO01PzamV5LOwcsMB7K8sO98/E
g8uDI1K6VPvepC2u6kKaoCwrc32DZDz0XE2QMCY489eEjD6Bi6hq2l1xRCIW
9lh56t4l7Xs2mBq6aoHP3azl0AvRUC1eqfWDaufRuRTeneGCspcOiHaKxILX
j5UHhJcOIrU8T2RskUbmiH/uvTDwT5vSJ/FDpKnuw3p5Q2T+72HczZ834VLX
Dk3CH/umLHqH/rQFshsqqJ2BaDAqcRwjfnPLisR/rN5q2PT+irXp4yD4z9on
htgBvgYPw6FqaWzHissS4RFg/GZu/BTVzjjMeU7YTBLfGCuN0k5bw/69jAWE
nxBqyWWjcvMYLGS4W5tu9oTXiW3JpF6E3U2dxctOonhebx882uEIjx6Z25D7
qcCSEDMTTnmo9TbeeqDHHwRyrPNJHodNRp6Z6l5B4L5wyD4t7wYw5xr+IbyF
oOkdtjz7TqPN4EjMwh0XYPzb8/93jr50OZp5XVcEY5ZMp/tpgdAlopVH8kbD
LwzIujuKwQ6lumvmWTehQZW5gfCrZz35vzH686CD3WdW7gse0GF0ZQvxX52/
P6l8DJKBXRw5B8TGgyFHgvs3qXO72fDxm5Gr8iC+8fd0y/5o6A5TtSJ+Jzh4
ev+NRA3Y5Rrg/ME2HHyWZLwJX9HyHiu/SagKfPm24+jgpXigFfEaJvbnqtB/
W9w9dCFjQSgsaiIGlOyDYkjeKGOvq/Dj08bg8vKesd+f29C6bZmP8Cf7Jlxj
esdc4eOeNZts9YKgo4zuDMmz0GI/65ctaAV/E0QvjJbfApdUv6/knLhPQ55F
QF8RelmC9pz/Gwi+u05XEJyhZJSPh4nWDE7Kv5dl3eUPEUZcD8k6K0xEfjl6
SAz86l/UBBj5QVCzNhA+qoLPgt+C+1GMbpfr943ygj/scV7kvukk082K76tK
2JC4yG8xp0npp/4SwQN3PWjirOBRRNXKSLFDfCYQ2uvhTeKu/FLX4eOPZbHp
6liQDY0SRpktM5F75GNrthq8LLyGk+OMQeEmVlBnUKxN6tLc200fnMd4Ab9m
nSmSzz+OO9iueBB+i3TUBWlcL4p2wjL8h5Zt8a/L+lck/rnq5zMmvXIZn23s
uusp5wCFgbNxpA7J0Mw6sz0WUhhMx3b7TZUMLK+WCZJxHqTr4p3SU+gYJ3k7
v8UcuTNSmEh9D2afoyUWIutRRKzq6EN3T8wSDD1F6pvV5Rgx3rORw7Igt08H
hA1QpqlpK/lfMTe7Fzd4RYEr0DB2JOY6bmFNSCX1Q9b2hDamyOnAHau4cFlX
B9Q3PPSC5K9lfrAeneKTxOqyI6ytu51wy5H4LySelJ7mdU18JQsdsjZ1B9vd
MDdpeDOpH1L3LrldspkdDzX+avq2ywfXf39lS+Lej0UvMiSf7oMSufjtsv63
8FVbjzJ5n67IblCPYeU4/Iuu0VlOisZy69F4Un+g0YXHsPSiEMixVG2ptk3E
t9PCaeS9MDHmrpnDUQtND1Rf9od6B2H669EE8p4v7eDJnK8X9kFxuAztAaYY
5Ivx4yb1BGz13+lfv8SGO9piocs1GD1PP1YlcWPs909qB7uVII9ZY7XH/hbM
h89UkfPj6AletqB/EqBxfiuzv7MfdM2PhRP7M/NslbN3eD+O/12o1P/mCQtS
cjnkPLh8cPjrr9OXMOWZ9suan47QOc0zT9aHgT7E4mXreRA92TiYLusPqa17
1xKcObvqnnT9o5WmsgwltqRUb9AabB0lfOmeDr67ZXYy6Ok98ehzjjOwioz9
P0+qz/wdzffF7fBKtNe2R9oHuPdWNhKeaturR385uwC9nn2b0F1yA/fe3DHC
k2EJrDs5NWUBexTp1HPZXbFxj3EZqdc9KeOh0uAiDfRpZ6XPMfqj7BrN9+S+
clBpQ4qwli6+HdZJSWUOxeNNvTLkfcO/vtwzAUKG4GpmkeLm6I2V6q+7iB3L
KHXpYsg+jV5bj+7JF72F6vZf+cg7RNZVTJdEaJXh5I7IxjwDP0y6GM1M1u2v
JYf+nJo8qvZuVOWNsoXYsCVHIv+fJG3682Ku4qCtC92LeXuI4tgsRXhozTpb
3ncPK2Jb/BoLkwBL+NMX/P/6bGNO2+Y6LFVRu/TaWi52gnNo/19Pb7HKKKh3
y2Lc8e6ULemOID0aeY/ILbu/7wSnmwLKB9UkDw3awMRnq42Ed0HX+8rn8GYV
PNg7VZXmZgZ2YZnhpJ5SqBgbL0uKOt5P+Cn0gE8Pbo8ekSb85HMlhjm7jmqj
7qfhty6j1yBD4x8/qfvk9Lh6fMumixgVfO3S+QvO0BoQ3EVwLfU9O3nX8FzD
4NdB05yJ9rBXoXWG/JdIp8eEZ4ESpiS48zF0X4cLlSrnSJ0o6647tC5Cauj3
mF1qwMoI+q6fbSf/tbt1N9g+0US9nFItnt1qsJLg5Ev097vjo1NmGrp4ebbC
M1tLHKqTVq3J95gYdMtVOBtgYUBBm3mROOYfehtJ+v+TkAnqEnXAN2dct9hs
i8b4E/xjs4R3FJRacEvPDAfpVH4uiEegtl1LG7nvWM/rctrA1BSZT3fEPlyM
w9rCLxaWVH/7p195BsNU8MnLntC1xiF4vuXbHfJOjQ3b+kybZCXse3Edr2yO
xeqVJ86EbxBc8FF9pEAB9dxOrFl6m4RPYqLWt1NxyPNOSRMOUV7QLelb3BQS
iNCSGEXeJ32sXauuaSEEf446l/fui0a74ke+5L1ap1jX/jWnzsFpDPS+NZ+A
dw8zCJL6A0P7L+yv/ycF0U2pDxg60zBuaFc1yRv94KO1956LCVzj25/ayRIH
P2R1L5P3Ip0e9sY2frGArZxv3bxro2E10X+B8IGFRZYzGkxtwOPi5o0quREw
KvrNj/A3HjBmRFUV2oKa8KxF7dcYEOqQryfnlzC2S9EaUQ4w/nrhWTdDFKjv
8lIi/tR9baBcn5UzCH7QmM1+HA00Hy6zE77ZWhNV+qUCYTRMr89zsQ4ArkuF
YeR8WqnR1Mr7XQATFU5Wr30fAJF3jh0l9Z3Ojft0dXlzY/DC99Io5UC4fDmi
lPAP+XNFuNalLZ9DJbtgdZEIuJ8a8h/B5XxXLn/5LXgABj6JXJ4ojYD8sz2u
pI663OfJHWbDZ2H0khTddv9YqOR9AOReb5cn+0ZHMWUMX2MuP89nDrqWu7n/
/+4YrfW6hkk5rPqpfjRh9SJ2+ftGE383K+Zj4qAig3lz/4UaJjmgz8MfQsRP
cU88fIq/NTCXToTh5S11eJDlb0bkrdFoyKXorgoGLAWM/7IyxCH2oATCm4o8
HHObtlEP0906hDXrNkDV46PyRG5v+Vx9xx94BhdqbUcNdt/EBOUbLAQH8PBX
7b9xXQELE83HTOXc0M4icS3hWT3WUVRqqpPAnKRJm1x6P8w6ljZB6tMyhTp/
nHXQQmcF+iiaIWucOvBMmtiZTQ2ZW1VNlPDwRqXST5IeqJWR1kPu6Sa1zA+a
l0uj44bc2Imt/sjqHs1D3jEJNe+P5xY3wjvZ0onaR9VQ5MSOD0Qfmat+hnda
6+Cer8vLfgb2WJF/n5Gsg1+8exafvgpWNCvaWAp54QYhjz0k3sgraT3HkHcJ
zfpKpI9sDMDkFN0vBIdcHjqW4Rdoid59M3ysgqGoMNvBqUbizCUugReONnj4
1RWT4XOhmGc2zELyPu7PuKTr/3HDEEbGxutzobhEc/cdiWMbYuVNIk/YYx9L
sDgV/yPNK9puEv8fKm84FOjkgQ+KF05R5wU8JCTx//OC30TL2BltP6RT5jOm
zhfI8nDg/+eLvtmWomk/YSgTyO14RO8L4SctQ8j7v+YVFQE3a5Qhulb/Uzhz
ADQOF5oQ3maVTaGo4gDA2rpls0JzV+iLWzQg56OmHDWUbDWAZB+xe6fzg+DH
OQNHgg8/qbNsO9qpCidfDn/bGnADCrVYa0k8MNDxw8N6lzS8ji9upveyAiM7
tx5i5y2fTnFgmTnES6xdGRQIgzexedWET5vGXc6T/9wQLjj8eiMs7w/58ili
pD5YonZh84dRddjw2f/FypAzBGfFpJO4+u3+E7FNYpfAb+rD7nw5FWg6NfOC
4HIj7/b/GnQTxuABTYuAZFvoneQRJ37B43TU6rsxKZw9EHX4oog58IvpniXx
ldW2vub+VVkMfiVuT1+lD7SpHy2JnJ9T+aQ0Ea2ArxazEmPmFODjAewh4zer
SdGOHlbBKI7kQl/3w7By8rMp0aO+OaeG/rvqmLj9tM1HNlmUirU6Qfo3Rfry
rV7mw/v3G954hGjB9roiAdJ+YHvHMZPr4thimiewEHURLsSxA4kD98YfXMh7
LYPcKv4Skm1ceOLdvC9pVzKRfxr/6yoanNXlpm1QxK3aDD/IOA+EhVYl6ZRw
/VJLfLuYAXYz3kojfm3uYRxr0FUWXLx0fr2EhASaPtzZSMZxYhpbXLdbEJV6
EqNz3qvhL7++ITLOiRnRVMdySexTGJ6JfmGEUgmTPP/3j9uncj8t/DzHKzr+
SNvEFCdaDYeJvmzsPVeqV6AJePIv63JWINRKvWYk7wBGivSEzT+/Ar9kO2uC
PT1AVIyujOjj8WmV7z/PH4aMndLiP68bA+fLh7vJ+LKHIj4tHzuPpz8KTlhI
aaCsapI6+Z5VmrSDTKH8sIVNh4Vpvw8wqrdeIHJVO0cbpysI2HUuax9ruTWc
F+mdJue70UX7hKfhyrgznq5S7ZsQipftNCT78s9uy3m2VkW86zkfw/bLEZK+
H75I4jcJtom8eD9dPK5bqOITLwuPOroXyb6r8Q3TlIcbwUl3cxXPncEwvF4h
x4XIT6JeSLW0BVys/vTgz81QYLv4nJfkZ+3ru6Gt0nENlHbGHIz18QPJEd0o
kn+xW+BP4xiDJk7t/rpr4pEDfg77+ZbELdUP6RQz6uUx7Mt0d+cmJ0x+OmVI
vme/6Dmzd+Nq2HBwpP98kTcGDfzMIzhG4jMPtvnEsziTMiVSpuiMX98tbiD8
Xv7Q05XRalfwmJxVHOf8DTwrnSRG1ufEYFzqiyoV7OLLa7vSGYA3jsjdSCf+
yEE35t4RQ8yotmb57UTZlZEjNwgvLqTu0NMXolo466I7PCHrhfy35tr+X2+Z
c2bXUT4l3GGmyzK+IwDpY9+MEfuwnP9km8g2AzwiNtSoo+uFe275Hic4jHuP
eNJTWg38sUbnfsbeAFT87RhK+MZKF20Tzad00VcyiEGLPQDDNx/5Rt5T2P2z
/rBirTZWXSsY+ZMUgpMHjneS/IsLL49LGLtqof4hYfrAC9HIdsJOm+AMi6U/
z0k8tsOv84c5XmZGY7px7h+CqyRJNMXnsXvgTs72xD0/o9Fo+FQxwWE45jrm
NIU0MU57NOSvRDx6fuuXJPjGxTQVfrnDdtimk//icko8tpSb3SR4Dp1c0Fbh
JXU8U/Nk1kQ0GWkuzXoRXGUxiUNRKpkD7p3SWierKYexogaHiR695Wx137VV
HNuuPUyMeM4HfqHOD0l79u3en/t+yYGg6KEmZ+3T6FQStYG0L4f9ti9RlIUl
cZ1+zxQDrHxzm57IWxT74U18kULA40JHc/6zA5qY+3UT/KEvxX0DwxFmzDZ6
Xd0a7oWrFzxiiN+ZFGfxTu2VwKwki60ZCf4YZeJvQPLd0phbOofnNeDfGbtL
AhnqeHCZzYSM/1TsfIHKZ0W4mK6mU0Znh7NB3uXkXrXuhUdGzHMZwHMBYlqc
HtiiPryG4AxbaUbGbDOoONWP2/X19qu4Z+DAS+Lf+2WP0eoJ6kHm64gvz6Qs
sV/oYzGxqz1myQluRbrwb2jNr3chQfhEuyyN5Lv9LmGwOOhlAa+ZZ/5ZBd3E
psMaukQvQkL/3av7Yg8lykYHGbzDUHBbaD3hQ/ocaOSOr5aG0D+6zWLhEejP
wfGB+EHbiorPK6csoO4kx4oQRKNj1Iv/40Izw/nFuQIXYfMGt+iDErF4w0lY
j+BUr3zE17dluIC03EbXDpFYFA1QaiR4VAjzRBbtgAUczcmsrT4Tj7+zmv+P
g93YHVL+X7UsFKUbd8acTcTErjBegpuFrGRbJOTEw9DFwO62TfchQnnIM/8D
ec+Ui96APRWOnR8O7LFsgEh6UbbBAaqd+bTUxaIoaG/kTr79+B784IuX3vZx
DiraX+/5m5sFS5/fMq7rfgRHdE3HDdvI+9fbPteoJkDvmgLNExwNkJtw0Sfl
9Rxo7jXkm6ENAqWNIc+veN2DS/NdFuf/o86DvMImLk4uENTftbRakQvym9md
bFeoc+5Zq/HbCX6Qa8ZgbMCYAxN3Kj3Zyf2gW3RmRX0QoEZX54VTRXBvdH05
4885aN/fUGjjEAIarnm+hxYy4U7mJ+cyqn8Tfc/jqfhI8NHL7I5MLgDlVpaS
Eaq/lWFmfpl2DHAyJD5/VVsKh5aaSnu/U/qbIai2MqcHX0+vlFvJ5oMmzQ7T
yOU5eFki+ohbgAmv/ohsFmkpB/e/YhWcVP8S4azD9c8M0DLyhpFZeg2UHbLd
Nz01B6WDm2uFG3wh3/1AZ/nzYihl1X7EtjQHw2yxucYlbiC/7qXrHFs1FOoL
sN74QsU59Jv65kbCoUDkwA9ZxXJQ/lbb3T1P/dfVz96nXe1xVjFd87tqPWT8
SHr9aoTyXyxcHkdl43F6Ns3rVlYNXG3dwig7ScmbKN1ntzO5KLmzZ1/Es3Lw
1fz9dOYzFfc6RbXM8NlB+a5eGf+x+3CbkVaehtr3jW8TB1bDQ7BqXaDUX45q
sBXfWbiW+p6JF0ZDMX3BsOmXrjyXSQ24CBs/+kT9F+1Bu0spV+7gTPfr/RHK
+bBx0Wm2/uscCEh1bFtrn44VvxJ6mgeLYSZxlenEwhy87rikmnMmFW+c6HhE
q5MD71POLKf8ovbxhHnt3GYH7BYb3nJZoxxuFTIHuFLraSlIf5lOwwCPGe0u
fTlWAFeeFRn4U/336QdOvjvJCSfDD04OtKbDNR5WI1L/Ybb/+/J5jkSoLR3j
vq99B154Dv0TpuZ1lVUN5ddNhtpQhS9u47ng/VLEh4Uap9vzvmxPXCrQ2Lz9
+uVZIrQrZKQIUnKyhcdB1n31FoYFnPtRF1MJnmN7Qr7NzYHbd64JPYs4jFzD
PM9ZXQ2HDMaufpuZAwb212evJUXgt4GaVK+aUjCav112ipr3r9x53/cv0rDj
iZ7oXHINJIrNffxC6Us9k3H57vuJmGkSJOURWAlFvdFcjtS6rUs5vacyKQZ/
Xkng6hkoAlnreYHpxTmQnhGEc/LxkHI5r/6MUQVkr17o+z5H6o8p01a+SwTT
5o9db+EumK+emWSZnoNLzrdDwS4FjkSNtX+Ruw8r6cL028bnwFP275MbRunA
+bip1iCvFsai9jLhKNVuefVo2rdMuPfi14JVVQNYHXda97GP8lMrUdM9wrmg
PvHk6OLOJtjl9muYsWUO1Om8nmudKMH13icsFitSoG1yw5qb1P9G3S+720mT
jPTOt8vrmuIou0MTf4balzdte7dPimdjh+BFRZ5bphAdd19+mFpnzUZWM1VW
Y1DUzy0biA8H9GvaQ+5JceKOyeg1d3xTNmilzGSJWpPm9sQvMA9lACtzJE6q
7g8TUohH5hm99ijCHwtaU/ytMx2SssWWEq/5wrnz537foubl+OTr2a4WDxNf
774VsfXHwkvVGnQEf/s18eZAWzCUHshZiJJKxWOnLGgfU/1v16sl6Opbgc2q
74YzhQXItNOuLJuSk48PWl4J2JRjx+vBSCcpP7g/vX7kKCWfYn/Z/S/rliHT
mEfkx/ZYTNEQ1aOl2hucA7i2XypF7kCF/i3MRdihLv1kPaV3u4dtIt088rHp
mPQdlcYI3GkrsJhHjZ8ileScbJKH1SWxrCsf8nFOPPfQVWo9WTs9Ug/QJOEa
RTXe3+W5+MCU/rQn1b+2LoKLOdEBHz4FBk6ru7jDN7GqmpLDXC+7uuIuF9z5
dPWMm0Q1HpiXG5Ci9He1W+kv66oHTqkmPa5gqsKG4cB9hZT8lOcwXrFea4va
myJ/rn18H2tpEi0UKDtw6WrLiLKQE3ozWPcmJd5DBr/cV/qUfXa0UYg9N2iB
AQrmnv+YGrA+Iv546BB1PhVt9EsTuw0Dc/WFjnlVkFDL+KqTmtfjsN3iVvUY
UGlXEl3TUwLmLwPvXv9BeOOBE+O348BFPV7LWTkX4t/5mElSdvWLnvN4VnsC
RHd91GirTADB9WMu8tS+uHM5lgVkB0Ji4RqrNp0qYK2VMHn1lbyj58IUSx8K
9s8EjVQkSmCi3D7HcpHw4kRLz/hFwkeGDzdq23OgoUDIWojyI8X8I1phm13B
3i1m71+mKjjhY25RTa3Dl5yaL3q+F2CjkXXR2cxKUP+t/U7nG6W/FbXdnbx3
sFot8qqd0V18/Wz56773c2ByzfPqEHcxFVctfnS/X42jn3xLzk7MgZn9sest
7IW4V6etwnxzNcat89h8jLLDTjJjVUeu5uIa+ezJHNlqNK+w2Ln9E2XfNu8z
f3whG3v2/DJVSq9CMan94YnUPhZe5tjB3BeP9c1mU8X8VTgWUh0wTa3nisOG
1O98CXBEvtU+BV0gmL22gPCxj0dYXM5TiYAF2uPXjsnFgfkp5foWSi/SHq/h
5+AMh5DMQdc5Ewvo/kNjQ+KQSfcpo9HFUPieOuqncD0MI0rS9xBcpWsyLk88
yhuGJtr+pCVkw/uf/0JuUnoa4fKuQeykJxgNikk+/xwNKXFd2bVU/7v5vdsV
+t2geM+hK99cZeAsrwIDwc8vuvzadNfRBW57C1V/Ph6FTJpTEiSffbfUoHXG
Tifg2iDayz2UhQtfbJZIfdTbLxYThmj3wxsulscWgUVgVVIar0X55TRDYT82
GsD9yZPNNL2ZUAyMhqTO4YaF49svSSnifyKjRscOR0Imr1I14eFcU2qnMW3T
wg2ex68zbNfG6OJw9f+/Nzf9I3uYzQiv/aCd6F2IQc/GpXASP0dudz2V98EM
6+ziDBVZctBF/NoXwjv6DUG79uZY4X+6r159EC3BHeeY/FYpuarlfJIbzpqP
Bl2ex8S1q/DKPPuGz9Q+vtURHAv3T0cOpv9sB8YqUdnePHWO0vc567ccdVEZ
+CD5p9F8cDl+iHCVmKfk1uXqzhN9HdHoTD+fxLC+EuV6hYNGKDnUEMksnumP
QRhzPCJRUYbGdBMPP1J+3/m+84WZ97HI9Cr0hZTGHTwfnkr/mLIP+hJLc7uO
OuMcJ/86CZ4K/KQyllpG9WfmsR2Z0nXH+wI+GSH9pdjIIKCKVP9/s629mTHe
2OOkO1VwowTj/Iv486n/ymU4NJ5kdBOvZZ37lM5VhPrTSRza1PrvaE9kP6Lv
iUm+PrZu89VwJdO1sWJ2DkRErN5mF6qjXTpnU+PJMkjc9nXoNjW+Hv0jQcs9
NvDCkPZA/c18+PDLMduA0mtBIaag1AuR4JFOx+N6sQpsTkNfPLUOLPEcaTLN
cdDZvJrtP1oM3H2PEnsp+2A2OcUr/TUHvEt+N9kLlYN052meLEr+p79OdyoO
hUJAVPpcG10j1Oqz33F/Sdlnu3KupnETOOsgeeqvcS041udrxlN6+mByjHfn
Cx+Mm9vbeq+uGnQOVL07SO1LzFA1/bSAG66TnJSjvVoPi1tMlSaoOGqXVnTz
5v3ReKOdxaebiqOcOHrG3lP6O/ubQ7o8IBnHY1P15YLvw9zx5Y3Z78n9mp/g
VGI8yD/5vpKbfQuvhvPST1B65y1heoBNOgRa2aOUu96k4VEnW2+TP+Q8yy4v
rWcDvgnCbR2OhTj5ZrmfnrLnCbc2Xp1sDYF7do07GV0y8M365cq1VP8Rukye
Ch07EDgo9V4VipCZvaqR1Fmy4/pPWa7cHv6FdnFObi3G4hFr449UPNnky6Fy
9ZgTmgXpnCpbrECm7fGes5Qdc5JKtvQ77og1NoGOu1oq0fHdDVYOqp3v5KEB
9iR7zLtUtVPj5V088slCq52KH9aJzDrU8DqgZtHpJ2cvVmFG6tMgTUo+xX5H
6VmcsMPqdbbS7sI1yLZbZLafkv+dYTQ8cuutMWlPZhILVy2+t3++7sw4qSfz
sPgDnz3+2mJx9Hp5FVbkFdeEUPtexiO7cPukDTqL28YHZdTg5CsP0zEqntQv
7rSGjZb4wmHy8K7IWiwL2123n1pnoZU/69YMm2HCFaHAT14NWOKg9+vC4Bxs
5+3pOyPph+LC/5zvZ9bgwWdeAhnUOD6fhN9P/AnFqJLSdaaPqrCl082+h5Kf
0S+LI+YjgeglM7GpTLcUjw/ttByj5Nb+7LB6n3YMOursucNfV4oiM6UaJP63
puc2vpoQiccaw6o2pBQgp9AVJXJeYG2z52twCMFtBsLXBxYykZ2nQ4acL/QX
3w/PPzDBjYdndl1pLoV742p+X6nxnxt6882EuWH61izH3vEiCDqidOc7tV+K
BwpSzuW54Y+kW7pbtfMhbCTljxGlL/Zxa45t1vHH7/UszuNr8wGVmyWuU+0y
Rsk8YOGP7Xdn2Zq9suHKl1Uua2rexd07Pog5++NjyT3fnn1KAWe9U7ZbKTkU
P7Q8Lfs9BIu1M3tT2bPhcpf1SSWqf9I8zTa/fyF4dz68yUMkBZ6msiVPUfLm
Ff3CyZI2FAVDN13R5ImF9Os0GnsJbz8scWoDcyiuGQz2mzkVBLbXG65PkTwX
hthfp2dN0LmpoGf92WIo0Cxh7ab+KymxU6y+8jqe/W3GWrY/GzaktdNOUfO2
3un5eMLJFo3iLjz4/iMKrnO78RN+/r4zmlzxqQ54d//7neebBbBV5lckwaWD
0iZ+x604oe32A4sBodHIoY6RpL6Er7HfSx1NV/ytf+D9I9Ns3L5x4A9Zf2aZ
WBPZRjc8ISQyvmkgG3zCZOvsqPbSF2965Vk9sTn8e1W7RQxU5w1IFFLj2N3Y
0fPc1xub6dVzvjorATiOT5H3gEbrb28PeeeDK3VTg/6Ct7H1Ie15kie7cWCp
MyfzJu5IaBkf1M7Ciilf+Qlq/MqeARaam/4YVG8x3jEcC5N7xmgvUv03vVuj
trk6AINe6o+9ajEBmc+vlcg9yJW6Yx+evg/E7ypNpe5K4TjbamM4RPVX+6Vz
QvlwKLqWfPB6wGMPHa6ZnYoEz6TNNA3vDYLnX44raV6l4vES3CtFxTPvH1bP
6LQFgcRKfXxESAbw/zT8wUTt47TXstwUdS6+mbAkv+qWCMmaa/+QuvEv5V3b
jpYHQYjG+j71ntvAuvCbO5aa16O51uRcQQ64v213bHfMh2+M0StJlB1++Yrp
TUNuDnxoStS8MkOtZ4r/rjvU/v7YJC74L4s6vw1tfSrSmgp/N/Je1qDsmADE
18/Gl8PWdztvmCcWwntXmWhlKp4RHMlZWxNbDqy28WEDdHkQmL9SnEfZYXoD
1ncFt9KA/iR77GhRIQSWhQStWyR50CMzn14UAJ/J44NZNKXAl/VXgYPSXzGP
apejNSWwg3X3ScnuYhgQ2bZ/GzVO0bGXb49fDcRzzOfjn+YVY5Z69r99S8R+
OuZ/jgrBvUO7319OykI9odC3/tR+LYUyNkqKR+B0t81Qx+Ni1DxmqZpHzRvz
X7ZvWF8Eng0o21H3JBytmcU0SL3BYzIVOeMS0Shwf4XGvS8La9ZUPV1LjYPX
bxtc2B2LV1xGVnLeFaPuc0H6bdQ456afO3dtuoltXh5eJQ+rUPrhy+cilN17
kKxtUutJ+aNa7eCJshrsneusCKPslc6TLP7Oj944/Ffc1De9Fo1TvCSevJsD
6HqewPIrGAf8vRWGn1Whjfq8+lNqHYzbDRVmeYNRSpcTDz+swZx3zSF7qHGc
nv2Y1/gUhfSfn8T+GqlCmiAzpbNU/2LfNUain+PQIXDi2KaZKlz+9uVROLVu
70YkhZzfhONmC692L8Vy1KN9kkRwhlsfc7qONAShj4v5h8BTRfiR5a4nwVWa
v3AVjyX4YY2/5NMIxhzsUpc2IDjM+i3+r5If+OJ/egYS354X4xfrK4EE39hV
mzgh4uyCbKqrNAcrc3GFY0GP4DmtMamdB37oYSDX7qgM2Xy8s+a6NMFVkvNn
BVv5c+CEg1znFDqA/tIjp2tEfzfrDdJylEP5t0Xh90lRoIQDuY+o77zT1NPX
U1MGixur6S7u90TXJ/nWC5Tdjg2f/C34KRCcbp1At2ovFPnM+JTwdsSlgfbb
WT9Y2Q36+u+Skb8sbMOVvyQ+XD90ZY8X2AqIZdy2KMDtVQ1/iyh57jv7bl10
vRPkn+ytbdCvwM4Koz2e1Lx+NPxjdo+yofHsK/3eiRhMspKK0KP+q6TxZVhc
fhaMbzlul/45B6s6+HR3Uutm7+wQ2PIsA05/qPs08d8dZGq73CFEjcOzfkVl
F5QBR3fv74vD6djoV+0oTfnlQwVMjy8ol0LbHydTE/MitG5y/YZU3KVkZ8qw
fSoUDqY+D9EqqcZbDYEb+6l2AUNl8aLpXAhWL+l9P1iJsmurd4ZReueikH+q
YDkeWiStDkqz3UO1wcSMyY9zINm8KBnUH4xqbwIiaUxqcNvvNjqCUy1Mlgat
PW2H4vWq/+TH7qPxj5V+ggtxzo9xapW6oX4m98QkWzVuUHl6lOBUvKzjiVec
7cE1B+52q9Yj7ZlUuddUHCUvkdZ/8qkBLFXQyIen12Cn63IzwYs8Lc4f511g
hHKaEu+ylnJceOEqRXCz/wFreFhc
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.2307050130050251, 0.9361707233176968}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 
     0.25, {2, 1, {-1, -1}} -> 0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 
     0.25, {2, 1, {0, 1}} -> 0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 
     0.25, {2, 2, {-1, 0}} -> 0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 
     0.25, {2, 2, {-1, 1}} -> 0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 
     0.25, {2, 2, {1, 1}} -> 0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 
     0.25, {1, 3, {0, -1}} -> 0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 
     0.25, {1, 3, {1, 0}} -> 0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 
     0.25, {1, 3, {1, -1}} -> 0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 
     0.25, {2, 3, {0, -1}} -> 0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 
     0.25, {2, 3, {1, 0}} -> 0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 
     0.25, {2, 3, {1, -1}} -> 0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 
     0.9450000000000001, {3, 1, {0, -1}} -> 0.295, {3, 1, {-1, -1}} -> 
     0.8800000000000001, {3, 1, {-1, 1}} -> 0.78, {3, 1, {1, 0}} -> 
     0.9450000000000001, {3, 1, {0, 1}} -> 0.295, {3, 1, {1, 1}} -> 
     0.8800000000000001, {3, 1, {1, -1}} -> 0.78, {3, 2, {-1, 0}} -> 
     0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 0.25, {3, 2, {-1, 1}} -> 
     0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 0.25, {3, 2, {1, 1}} -> 
     0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 0.25, {3, 3, {0, -1}} -> 
     0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 0.25, {3, 3, {1, 0}} -> 
     0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 0.25, {3, 3, {1, -1}} -> 
     0.25, {1, 4, {-1, 0}} -> 0.25, {1, 4, {0, -1}} -> 0.25, {1, 4, {-1, -1}} -> 
     0.25, {1, 4, {-1, 1}} -> 0.25, {1, 4, {1, 0}} -> 0.25, {1, 4, {0, 1}} -> 
     0.25, {1, 4, {1, 1}} -> 0.25, {1, 4, {1, -1}} -> 0.25, {1, 4, {0, 0}} -> 
     0.25, {2, 4, {-1, 0}} -> 0.25, {2, 4, {0, -1}} -> 0.25, {2, 4, {-1, -1}} -> 
     0.25, {2, 4, {-1, 1}} -> 0.25, {2, 4, {1, 0}} -> 0.25, {2, 4, {0, 1}} -> 
     0.25, {2, 4, {1, 1}} -> 0.25, {2, 4, {1, -1}} -> 0.25, {2, 4, {0, 0}} -> 
     0.25, {3, 4, {-1, 0}} -> 0.25, {3, 4, {0, -1}} -> 0.25, {3, 4, {-1, -1}} -> 
     0.25, {3, 4, {-1, 1}} -> 0.25, {3, 4, {1, 0}} -> 0.25, {3, 4, {0, 1}} -> 
     0.25, {3, 4, {1, 1}} -> 0.25, {3, 4, {1, -1}} -> 0.25, {3, 4, {0, 0}} -> 
     0.25, {4, 1, {-1, 0}} -> 0.25, {4, 1, {0, -1}} -> 0.25, {4, 1, {-1, -1}} -> 
     0.25, {4, 1, {-1, 1}} -> 0.25, {4, 1, {1, 0}} -> 0.25, {4, 1, {0, 1}} -> 
     0.25, {4, 1, {1, 1}} -> 0.25, {4, 1, {1, -1}} -> 0.25, {4, 2, {-1, 0}} -> 
     0.25, {4, 2, {0, -1}} -> 0.25, {4, 2, {-1, -1}} -> 0.25, {4, 2, {-1, 1}} -> 
     0.25, {4, 2, {1, 0}} -> 0.25, {4, 2, {0, 1}} -> 0.25, {4, 2, {1, 1}} -> 
     0.25, {4, 2, {1, -1}} -> 0.25, {4, 3, {-1, 0}} -> 0.25, {4, 3, {0, -1}} -> 
     0.25, {4, 3, {-1, -1}} -> 0.25, {4, 3, {-1, 1}} -> 0.25, {4, 3, {1, 0}} -> 
     0.25, {4, 3, {0, 1}} -> 0.25, {4, 3, {1, 1}} -> 0.25, {4, 3, {1, -1}} -> 
     0.25, {4, 4, {-1, 0}} -> 0.25, {4, 4, {0, -1}} -> 0.25, {4, 4, {-1, -1}} -> 
     0.25, {4, 4, {-1, 1}} -> 0.25, {4, 4, {1, 0}} -> 0.25, {4, 4, {0, 1}} -> 
     0.25, {4, 4, {1, 1}} -> 0.25, {4, 4, {1, -1}} -> 0.25, {1, 5, {-1, 0}} -> 
     0.25, {1, 5, {0, -1}} -> 0.25, {1, 5, {-1, -1}} -> 0.25, {1, 5, {-1, 1}} -> 
     0.25, {1, 5, {1, 0}} -> 0.25, {1, 5, {0, 1}} -> 0.25, {1, 5, {1, 1}} -> 
     0.25, {1, 5, {1, -1}} -> 0.25, {1, 5, {0, 0}} -> 0.25, {2, 5, {-1, 0}} -> 
     0.25, {2, 5, {0, -1}} -> 0.25, {2, 5, {-1, -1}} -> 0.25, {2, 5, {-1, 1}} -> 
     0.25, {2, 5, {1, 0}} -> 0.25, {2, 5, {0, 1}} -> 0.25, {2, 5, {1, 1}} -> 
     0.25, {2, 5, {1, -1}} -> 0.25, {2, 5, {0, 0}} -> 0.25, {3, 5, {-1, 0}} -> 
     0.25, {3, 5, {0, -1}} -> 0.25, {3, 5, {-1, -1}} -> 0.25, {3, 5, {-1, 1}} -> 
     0.25, {3, 5, {1, 0}} -> 0.25, {3, 5, {0, 1}} -> 0.25, {3, 5, {1, 1}} -> 
     0.25, {3, 5, {1, -1}} -> 0.25, {3, 5, {0, 0}} -> 0.25, {4, 5, {-1, 0}} -> 
     0.25, {4, 5, {0, -1}} -> 0.25, {4, 5, {-1, -1}} -> 0.25, {4, 5, {-1, 1}} -> 
     0.25, {4, 5, {1, 0}} -> 0.25, {4, 5, {0, 1}} -> 0.25, {4, 5, {1, 1}} -> 
     0.25, {4, 5, {1, -1}} -> 0.25, {4, 5, {0, 0}} -> 0.25, {5, 1, {-1, 0}} -> 
     0.25, {5, 1, {0, -1}} -> 0.25, {5, 1, {-1, -1}} -> 0.25, {5, 1, {-1, 1}} -> 
     0.25, {5, 1, {1, 0}} -> 0.25, {5, 1, {0, 1}} -> 0.25, {5, 1, {1, 1}} -> 
     0.25, {5, 1, {1, -1}} -> 0.25, {5, 2, {-1, 0}} -> 0.25, {5, 2, {0, -1}} -> 
     0.25, {5, 2, {-1, -1}} -> 0.25, {5, 2, {-1, 1}} -> 0.25, {5, 2, {1, 0}} -> 
     0.25, {5, 2, {0, 1}} -> 0.25, {5, 2, {1, 1}} -> 0.25, {5, 2, {1, -1}} -> 
     0.25, {5, 3, {-1, 0}} -> 0.25, {5, 3, {0, -1}} -> 0.25, {5, 3, {-1, -1}} -> 
     0.25, {5, 3, {-1, 1}} -> 0.25, {5, 3, {1, 0}} -> 0.25, {5, 3, {0, 1}} -> 
     0.25, {5, 3, {1, 1}} -> 0.25, {5, 3, {1, -1}} -> 0.25, {5, 4, {-1, 0}} -> 
     0.25, {5, 4, {0, -1}} -> 0.25, {5, 4, {-1, -1}} -> 0.25, {5, 4, {-1, 1}} -> 
     0.25, {5, 4, {1, 0}} -> 0.25, {5, 4, {0, 1}} -> 0.25, {5, 4, {1, 1}} -> 
     0.25, {5, 4, {1, -1}} -> 0.25, {5, 5, {-1, 0}} -> 0.25, {5, 5, {0, -1}} -> 
     0.25, {5, 5, {-1, -1}} -> 0.25, {5, 5, {-1, 1}} -> 0.25, {5, 5, {1, 0}} -> 
     0.25, {5, 5, {0, 1}} -> 0.25, {5, 5, {1, 1}} -> 0.25, {5, 5, {1, -1}} -> 
     0.25}, $CellContext`m1Sel$$ = 1, $CellContext`m2Sel$$ = 
    1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$58180, $CellContext`qVec -> #]& , \
$CellContext`meshSize$$ = 4, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 
    1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
    5, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {7.3, 2.4000000000000004`, 8., 20, 24.200000000000003`},
      "numberOfMasses" -> 5, "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.24786610878661078`, 0.27221757322175744`}, {
      0.8200836820083681, 0.1673640167364017}, {0.6778242677824267, 
      0.6485355648535565}, {0.3814644351464434, 0.4988702928870294}, {
      0.27364016736401664`, 0.7803347280334729}}, 
     "mPosFirstCell" -> {{0.5420000000000003, 0.54}, {0.4, 1.2}, {1.3, 1.4}, {
      0.9860000000000002, 0.895}, {1.5100000000000002`, 0.98}}, 
     "pointsDataTable" -> CompressedData["
1:eJxdvQuYnEd55zsajaSRNNJcNPf7fUaa0dx6eqbn+r3dPV5IUCBO2HB5vCyE
YHvXWQ4nhD0chxCZ4FwcZyEsWWyH9Trh5j3JEieGxLCQruMDMRjFYMwSO3GC
jWLZxgZLlixLliyvpv6/tw6DnsdPu6e/fi9V/6rv91VVVw384v/xc++oqaqq
2nH5v7XL/+2+/F/15f9qfmH/4b/sGQ4tn33V49d/ZyMs/m7xrU/8bH/YfNv8
zo3wnfc+PTpb2xFeffntZ3dthNXvve73P/bOxrD59lV/XA7l3/vlJy/89+3h
1y6/fXy5HOytT3xr8B8fr8heKfyrvzr98nfe+0Ime6Xwry+7+6/P7TbZK4Wv
9N/1K9f+QbPJXjE8OPiP59//g6Hw55vXT20Exdcv//eVwzubfjPc/8ft4fub
17+tHL4b42uU/5dK4f/6m//WOf1P1crno6XQ/+ZfWvne6/6pInul8M+b4Te9
mMleMQxcdvfvv7THZK8YDv126yMPvNhssmfh9uc+87ev+esh+f/tcviTKzYT
6lP+A+VQ+2fdlz20y/8XS8TXEDbfXv/6Uvh/Tn37Z36xoVrl+aNiuGezOJ7+
bkX2iiGG/2fnMtkrhh9ddrf4u3vl/4sWPvzD92X5t7SY7Fm47ku/+p/bPzik
/B8vheVYH33yf32J+NqUf3OJ+Brk/7PF8E/DO2/4w/I25fOqYvjZzeL4zW9V
ZM9CDP+KlzLZs/A/L7ur+YU6kz0L537++Kf+6Cst9m8+dO8L41dl6GUovC/W
fwm99KGnInppU32+s4he6tFTMTS8celzX/uPVcrnjy1863JpvXHpKxXZsxDD
/96F7NBVlx3emYXfKW4KbJ+9ZdP/o+vhLV/8qbrqiVb7g81w6tfRyxD1X6Q+
epX/VJH42tCToZf9qs+3Wfitzer/+VcqZ8c3HWZBDeR/VA5uvh3P0PPLWXx7
1Tp63mcf3nz7oTX03Gr/3+bbe1fR86Dy/5FRH73oyYivVfkPWPjTqJf9Ifp/
TxZ+tFn9X3y5ovzXQ9X0Zg1+Kovl/+gaen4li/7r19DzfvvKpv/SKnputRej
vRX0PEj9G3rpCfH6ezPiaw3x+hfW0cu+EP2Pr4fXb1Z//8WK6n8tfLh9s4Du
lf8PrYYvRb1Ukf8Keq43lecyem4z2VtGz4MhXl/K0HMP+a8TX4v837kW6qNe
6oLyXw2x+n/7pYryXw2x+zn/QCZ7K+F3o162yf97ltFLg/zfuYSe26TnRwvo
eVD+X1hDLz3kv4aeW+T/qlX0vDco/5UQq/+H5yrKfzm0b8rp+P/KZG8p/ELU
yzaTnpbQS4NJTwXia0dPi+h5MMTr71xFL90hXv/oCvG1yH/9SviPUc97KM9l
9Pyi9PyepXB0U04/9Wgme4UwFPVSLf+PLqKXBvmvXyS+dtVnaQE9D8j/VSvo
pZv8l4mvWf7vXQr/Pep5D+VZCLH6v/gC7akQnt/8+I2P054Ww8mol+0W335o
Ab00Wnx7b5742tHTPHoeIP/lcEfUS5f0XFoivmbp+T0F9LwbPS2GWP39Z6Tn
RxfC6ObHv/cvtKcF9FxD/nn00oie5sNHYnwd6CmHngfIv4Ceu8h/ET0fQE+L
9H+16GkBPT8vPX8oH+LHf/Ok9HzvPHreQf459NJEe8oRXwf98xx6HqA9LaKX
LvJfQM8HaE959LyL8syj55PSc2k+3Lz58akfSM/vyaHnHdLznXPopQk9zRJf
J3qaRc8D0vP4AnrpRE954juAnubR807KMxfqNt195kf0z3MhbH48/CPpeXwO
Pe+kPc2ilyba0wzxddpvPXPlPb03TqPnftrTPHrpJP954muiPeXQ807Kcy78
w6a7X31Ger5zNvzf8X5+Unp+dCY8F/W8S3qun0HPB+yD0f8U8XXas5tvn5lE
z/3kn0PPHfTPc8TXRP88i553oKfZ8OlNd8Wn6J9nwoF4P38+679x0+F0+HLU
cy35H0YvB/A/gZ677PWbb688hJ77yX8OPXeQ/yx6bkRPM+i5Jnxx8+v3TIfo
bv8TFfmf4n5+OpP/SfS8G/+H0Euz/Vz0f5D4ukz2xhKfqv5nEp8q/5nEp/Hr
90wlPpX/w4lP5X8i8an8H0TPu/E/nvhU9kaJr9tkbyTxqa6fTnyq6w8TX2OI
b3sn0XN1kP9DoR0+lf/x8Bh8Kntj6HkP/kcSn8reMPF1U5+DiU9VXpOJTxXv
ROJTXX8QPVcH+R8Lfwmfyv9ouB4+lf9h+ue95D+U+FT2Boiv2/7+E+9a2/P3
fdRHH/4Poec2/I8nPpX/0cSn8j8SjsCn8j+Enl/KlP8geq7Df3/iU/nvQc89
9snNt5/oTHyq68fQcxv+RxKfyv9w4lP5HwzH4FP5H0h8ujs67EPP+/Dflfg0
vv1EO/H1WHz7rpbEp/I/nPhU/ocSn8r/QOJTlWd/4tO90WFP4tOHo8MO9LzP
PhUdtiY+/T+j/wPE12vrm2/XGhKfyv9g4lP570cv+0P8+trluOHT+HZPVzD4
VPm3oedXMpV/M3rej//GxKfx8eP6OuLr1fNO887Ep7q+L/Gp4u1OfKr8O8LP
wafy3xI+Dp/KfxN6qdLz3uP70XO9nreur018Kv/VxNfL/eTFivOp/Hei5xb8
tyU+lf8DiU/lvyFcC5/K/55wE3wan3eur9nKp+MXK86nKv8fVaTnPjsar/9K
xflU/lvQcwv+GxOfivf3JT6V/52hCz5V/lU/wadnKs6n0us/VZxPvxbvR/8r
U3x96Of5zPlUz5v1iU/lf3fiU/mv3sqnL5yrfAA+lf6eqjifKt9PZhPwqb7/
g8z5NIv+X8qi/Fr66Q+2m/Op/O9IfKr76cuVrXx6svIsfKr6+lblDHyq7z+e
OZ9Kjy9kH4FP+2J73GbOp/K/yzZ7i8+9up/72z77E/hUPPNCxfn0R/HzxyuP
wqeq7weyn4NPFc/JbAw+lf+Xsy/Dp/K/w5xP5X+vfRg+VX4N9oebgvi1fuq3
2ZxPdYP6bOUO+PTPYv09mdXDp/J/LvsCfKr4qu3N8Kn877ab4FP5rzfnU/lv
MudT+W+1r28K4s/74dUOcz5V/3U6W4ZPpYcqcz79QvS/0/rgU/WH++w/wacq
30Z7A3wq/83mfCr/7eZ8Kv9ddnFTEN/vhxd7zflU/mvM+VT57zHnU13fYM6n
8n/A/l/4VP5bzflU/jttEj6V/x5zPpXe+tWdtgyg9wFzPpX//eZ8quelJnM+
lf8Wexg+lf92ux4+lf9uOwmfqn/rs4/Ap/I/YM6n8j+Ingfor4fRcwf5N5vz
qfy32aPwqXi10z4Jn6p/u9zPw6fqL/rN+VT+B835VP6H0HMX/eUIeh6gvx4z
51M9L3bYHfCpmlu31cOnur7f3gWfyv+AfRY+lf8h9Lwb/8PmfKr8R835VPbG
7WtRz5ftRHsHzflU5d9LfI34HzDnU10/aOvwqfwP26vgU/kfQc+7yX/MnE9l
76A5n8reIfQ8QHlOmvOprh8051NdP2TOp7p+xFrhU/kfNedT+R8359PWaOAQ
em7G/4Q5n8reYfQ8SHlOmfOprh8251NdP2rOp7p+zO6CT1X+B835VPlMmPOp
7E2i5xb8T5nzqexNo+dBi93pl2fMx091/Zg5n+r6cfS8TeOd1x+yV8On8j+J
nl9Cz4fN+VT2ps35VP33DHru4f45i54HTTw1Z86n8n/QivCp/E+g56qg8j9s
AT6V/yn0fEH8MzSDnvfJ/8kZcz6N/r88a86n0f9Nc/TPg+LZN+TM+VT+J+09
8Kn8T5nz6V3R/7Q9tl18qvvHDHp+mfvXLHreR/5z5nwqnsmZ86nuBzn0PAjP
z5vzqcp/2j4DnyreGfsBfBq/PjRrb4VPdTudtcfhU9X/nDmfKv8cem4l/3lz
PlV55tHzkPjoZN6cT8VfM/aP8KninTXnU/HUnN0Bn4qnc+Z8qvqfN+dT2ZtH
z23knzfnU9lbQM9D0vPaovn4qeKdM+dTxTtn98Cnyj9n74JPlf+8OZ8q/7w5
n8regjmfSk8L6Bke/PIieh6iPAvmfKr6z6HnvfD0vPXCp8o/b/3wqfLPo5dt
5L9gX4VPZW/RnE9lr2DOp7K3hJ6HKM8lcz5VvPPoeU9QvHm7ET5V/gv2QfhU
+S/aMHyq/BfRSwP5F8z5NOr5piVzPo16fsMyeh6iPFfM+VTxLqDnPeG7Md4F
ewY+1fPkop2FT1X/BXM+Vf0vmfOp7C0TXzv5Lyc+VXmuEN8welo151Plv4ie
d6OngjmfSk8FG4dPpaclcz5VeS4nPpW9FfPxU9lbTXwqe6vEN0z/vGY+fqp4
C7YfPlW8S+j5eel5bdmugk+V/0riU+W/kvhU9lYTn0pPa9zP+9HTOvENU56Z
OZ+q/pfQ8y70tIyeT0rPN63Yh+FT5b+a+FT5ryU+lb21xKeyt574VPYy9Dys
54sJS3yqeFfsV+FTxXu5PuFT5b9qX4FPlf8aet5J/uuJT2Uvsy3jpzss8Wn0
f50R37DGzx60xKfS/yp63im+f8OafQc+Vf7r9j74VPmv2yn4VPlniU8j7l9h
xMf46Z9a4tPov7FIfCMWnxfeW0x8qvzX0PMO9LSe+FR6yhKf6vnGEp/Gtzda
4tP49hkzHz/V80Ix8al4vUh8IzyvlczHT+P4zFCGnmvCr+hxL/FpvP4tlvg0
lv9XLfGp6r9oW8ZP/6CY+DTmf66Y+FT2SsQ3ovr8ainxaby+YOh5e4jX3262
Cp/qcbNor/7x8dPriolPVf9F2zJ+WiglPpW9kl2AT2WvjJ5H0FPZtoyf/rOh
5+qg+i9aA3way/9Pi/b9Hx8/bSyhZ8ZP31tKfCp7pcSnsldOfCp7ZfQ8gp42
Ep+q/ovo2cdPi3bnlvHTEnq+/NwcHZbQ817qv5z4VPbKxNfNeEE58ansbRDf
qOrzno3EpxrOLqFnxk//oJT4NH79XCnxqeq/nPg0+v9qOfGp7G2Yj5/K3kbi
U9nbIL5R9HSFXR3/DYeqzX9HN8Kt8V+/Xjv8fUfIbf67u6zrqprCsc1/R8rh
7+L/1IRo5kQpXKP/qcheKczFL57OZKYUvhGvrzXZK2Kv2WSvKD+54XDb5vWP
lGX36n79/d1lPu+Q37qyrru1Udd9uhS2RXs1smulsBivP16RvWK4Pzo6k8le
MXwsfn+3yV4Rf80ql08b8Q3j1/33K/9jJV7b+V6JzxvDK/FfMczH99spx2LY
Hu09VtF1xfBL8XtnM9kx3u+hXgz7zSZ7GeU9pNebS+FS/Huf/I+WiKNdcYci
32+Q/zcVqZ9qxXnawu3xg0cqsmfYezGTPQuz8cK9Fsv1aEZ+LRbzunudvIZk
90Qx3BLf96Enr9921VOHl28DejLqb5vyOWJhIX7wUOWbMe4Me+cz1WtGfHst
H69b5/stdm20u4b9Ieq/iP76FOcjRrxt6Mnrt0HlVGeUbxXxZOHj8fqvo+d1
7F2Qfu5eQ891pvxXsddqyneV8hoiTq/PXv5uvLaFP4qfZ0F51RPHOnqu4nU9
3BOv+0JFulpDzxcz1esqet5nsrdCebTaA/G6ZeLz+sr4vFf+OzLiaw3x+iPr
6GW//B9dCyrnS/J/t+d7z5dkbwX9XsqUv7/fr/Z1ZNnto6cl8hykfNZpNz38
3euzlfzXqL99tKtVxXnsYkVxroTfUfnI/63L6OWVTPaW0HO9/FcteflLz7kC
9gep/zX010P+qX7l/+4V4qyjPJeJ64L6m47l8FHpR/6PLJF/lUlPBeKrpz9c
pBza0NMC+Q/idxX99RD3CvG2UE9ev3XYWeL1vNr3sQLffyjTdZ7vNvnPLXr7
lP+rF7z9Ss+35vE7SPv1+uwmfy/PFtq7v99LeRawd472tBj+ixom7cnzrVb/
dyLv/Zfp/pH3/g09zWNvkPyXwjviazftqeD9JzpZ5Lo96MnzPUt7WqA+vkd7
8ny3k/+89+/yfyxH/bejJ38/QP4F9NxF/u6vGT0tUD+70VOeOM9Izyfm0etx
2tM89raTf476a6Q9zfn9kf55ls8HiGsBPXeRv9dvM7rNc10t5TTP309Lz7fm
KN8TtKc5yrdGeq6aw14Tepolvw70NEP+A9wf8uixCz3NE+8B9JTDXi3lmcPe
Ken5yBzXPy09H/V8d9Ce3F8T/d809jpp71OU1wCv8+TTSf45/n4Av16+uyin
WeydlJ6rZrkfPCs952Yor53im2NT2PfyOUx8nehrAnsD5D/H9zvpn728m+if
Z4lzJ3qaIa5nK+qnp9HLc5nyP+zxc/+c9Py4Xxzi+51WHeM4yPt+8p/FHvx1
LJUveprhuh3cJ6Zoh09X5H8S/Z3KVP4T2NuF/4Ne/7SnceLr4v4+mvhU9T+D
vY6geL1+myiXw4lP5X8i8an8H0p8qrjHKd9a/I95+0C/I+TXhZ6GEp/quins
deBn0tsncRziuhra1UHyg09vHcP/Gfpnz3c3/ocTn/p9U9d1o+eBxKcqr4nE
p4r3YOJTXe/lu516GsXeYxXlP+L9I/2h57uH/AcSn87jV593o+8e7PXjfxw9
t+N/LPGp8h9JfCr/PAdc5lP93fM9l7ku5Wcv5eNc1YJ/+t1j3fRP7YlP5X8U
/bXhZzjxqa4fSnx6Df2WvvdQ5VbsOJ/6fecV+DSHDnRdC/zeQnw95u3Y+VR+
hrDXRv6ebwP++xOfqr56Ep9eQz/hfKo42yjfOvTcjL1W9OPl3kP97U186v3Q
HHb+jr8r/nry6uK6qvTcofi/wPNNC/YuZt4u9b199Hf7Ep/O0a/qul7Kpyrx
KfWY+JT7SuJTvbZy/SX8H/D4qrwc+Tzz+67e7zd/TsO+eOMyN+GfeJ+uOJ/C
aei5Ff/NiU+9nTmfyn+dl0/m/SSB2b/bEnc9/eEp3jufPgTH9dpFOOVWdHAN
/bDrjLwSn8pN7VY+vaxrvX6d9n0W+1X4O06+9XYL18lfG3o6yX2uDz1dzJxP
6SfItyX1e14O+S1xnOf+8Cz98kPZHehI/rbxPHwio32a9wO0a9p/NfXk8dSi
o+6k0zl0Kf+nKd+9tKNHqKdzFcX9CPUEn16+T1yNH6832hHx7eS1nf6xjuv6
iauRz7vpn09U6D/DUXTh5aa/P8v7s8R5gXwf47WGfmY7dvfwvpHyaCB/5/cD
fN5P3K3mfKpyOU4/1oyuz1Lfu70fxN4ZyqnWdZJ5O/K40GPK25/T6RfNuVnf
60dP3eb9yjW0U8Xn/LXD69V1RL9xGt143ifQs98na8yfq+iHzDlH/jrw38t7
r69+cz6lv6AdeL/iOqxNHOV8Sn/k/UbmHHzrljy6Uzm5TvTqPDjAdf2U2xDl
3xk8jzn6OfpbrttF+bVTv89VnFvgw8z7Edet7Lm/JuIc5PNO7A6n6xTHiH9O
v9KW7mvcj9y+368MPqZ8PN+T6HnQ4yf/IfTluh3x/IlzlL8P4GfcnE9pZ/YO
+sVb6Rcof38OMY2XeL8+6PWH7j1fxitzo6kdKY4x5wz8HzS3q+9NuL6co4mv
0Z/rXZ/U5zDxnqDfGyH/0/Q/Y6lf0+s4fhivvPqQtx/+Ppl0pNfD5nyq64fQ
cyP+R7z9ovdRrj9O/zOO3zPo5yD+nE8nzNud7BzmtRv/U3yfeDpmvH/Cv/tr
pL68fLej74PG8zn95iHyPkv/M5n6Qdlzf83EOe39L/HMmOtOf5/1/pv8x4mP
8cqc+6umPieM8Qs4wfP1+9I08e/leX2G+mwh/1m/PzHeM8v1tIO758z5lOcl
9NGA/0nycj6dsql43UP0zzPkeZ768nzr+Pts6pf1/Tnndl5z/H2Q783jrw2u
OUx89fifNudTnkeN8S+e12fJ/wLjGXNc7+Onc/hpZfwih78exjfmiZd2cyRv
zqcKd8YY30NPs+jlFfQya4wP0r7muE9fRD/ubx/5z5v347KX57WXuPP+HMb3
FqjPVvk/Okt9wWFH5tDPJfnvyGHvjlU1+5x/znjYPO+5rx7Np/u27C3wOfet
jkXsDTF+tsjnrehlzvOjfeWI9yL6nbc7VT70N54v45VVC5RLPXEsmPf7qpdF
7PVSboV039LrUnoOYjyL+4GPn85TnxfU39ydt09KP4zvLLi+yN/zbaA9FdJ9
Xvbcfx/taYm4hijPZcrDx0/zxLcXPS3QP56nPS0a8xO0p0VzLtJrIXEX45HE
1045ub8+eGMl3edkb8WcTxXvAnreK67/jUX0/KL0fKRgzN8wv7aUOFj1v5T4
VPaWzblA+a8QHzx4ZJXrh9DTGvXpz40F9LwHPRW8/6U9LZHXY7Sn5cSnel1J
fCp77o/x3GOriU9lb43rhvGzzmsz7WmJ+tnNfOVy4lPlv8w413Hak+fLeOXR
1cSnjPdTTx3oaT3xqfS0njhI9jLbyqfL6NnHT1cSn+p7qzznneD+sJb4lPkO
4nNuXret46fZVj7tMB8XIh9LfMp8DHrZhZ5W+fwU4+9r9l/j+6eZn3B/O7Cf
JT5lvoj44NM3WeLTWO/B+P6wrh8tJj5lvgo97/L5LLsAnzLfZQ/G12fhZfe/
k3ox+msvH8+/E90ViW+AvxeJb5jvFROfKv919LzT5/sSn2o+2LDHc+67bSuf
PmKJT9VLur9O+f90MfGp7JWwB9e9u4S+GM89llE/OxjftcSnuh96+Z7KNB7s
+TJeebSY+JT5WOJjvPJIKfGp7JUSV8teOfEp88GUB+OVp83eLv3qeeJNxcSn
qn/Pv5b693x5Dru5ZP4cInsl9AwPvqns46zoqZz4VHEW0fN22lvRptW+6Z9L
1PMZnv/cH/P7x0qJT2WvTHzOg+XEp/r7Bn8f4XsbiU9ZT4Cet0vPVrKz8Knq
v8S49VmNv9d5fnuo/zLxNqMn/7xb+dsGcQyipw3iG9H36q5IfCo9l9BzNe2/
lPhU+vZ8z2l88O5y4lO1943Ep7Ln/pxPNxKfyt4V2BtFT1f4cyP9n68f8XHg
DV59/K6M7ut+Yn3FBfqDUvBxJ+pz6/xpVSnNn6IHn98nTl9vMBjQk4+/BvTm
6wfQd4l5hLq0vkLPrecr6DlMxu8/5HonPu7/byoybtKAvs3Hl83XV1B+8I+v
n+mmf/b1Iy30R6Xg47JqdkX6TZ8/LTK/zDhVWl9Rzf3J1xs0mK+vYPwd3WTU
x2CgP0rzp/RXxNcc6M/SuB79XfBxQ/rD4OOSsmeMKzFfWefvG+mPfL0B86dH
13k/gC6Kaf6U/jyNs9Lfp/lTX1/B8ynjQZbGtTS+5/nW0O58/Uoj813raf5U
3ODrDZiPG3V9Me4dfP1IM3oy4q6lvny9DPOnHb7e4oTfb7fOnx5dI99G8/UV
8sf9/4Sv5xjg+cr1xPhUh6+nOcD4Yoaea9P6Ch9XVpxrzL8/nfn6Cu4/5usr
GD+hH1vx+T/Gp5fT/Kni9fVJnfJ/wsvzAPOX6+h5F/e3NerxZMXXV2g9y7OZ
r69QvjvN11eovLj/dyz7/Ch6WqI+qK+r131+lfzXiM/vt6tunzh8PYmPQ6/Q
vzyX+foK5inM11fAN+jJ1xs4j/h75k871tL8qeJdTeP2yn8lzZ8q/+Xg8w6+
vkJ6OJX5+grly3jQEV/PAY8cXUzzp7K3sHX+9JivH+nAzgqvTdSTl3dNWl+B
fhlPLLi+/XkozZ/KziL5HjBfX0H7MV9fIXvMnx51PXWQv69faeR+5utHatL6
Cp+n8PUV8n/GnxfT/Kn6wzx6YbzshK+n6DJfXyH//dj19TrttCfPt5F2tJjW
96n+fT2Fz5/6epazma+voP80X18h+9z/b82lcUvZ8/UU/eTv60d8Pd1i8Hk8
6Smtn0FP+TSvofL0fF/MfH2F9Ov3f3/fQnvy9QbwSFpf4fOVC2n+VPHm0UkD
7Smf5k+Vv68neaji6ytk73zm6yuUb535+gp9Do9Uzab5U9mZ4X0f98t8Wt+n
+vf1QQ3oKef8kNZXwBf0z76+4wL982yaP5W9GZ9fo/6mnW+I19cb+Pyp68nH
73K8+njZHPZeqfj6Cp/38vUV8n+ReZBp4t0H5035/CP380lfPwf/+HqHXvL3
+mylf55N84Tqn309ySXdH47MkEdVlepzOs2f+voKvm++vgL75usr9Hkv94tx
dNGLH/fvPOjrR/bRvqYpz4u0p6nwYZVP5usrKL/M11dIv/Xm6ysYH7St6yt6
6Z9HE58yHp3mT+V/KvGpSuFw4lPGuxOfMh6e+FTXjbv+8D+a+FR/H3H9+rhU
4lNddzit79P1k94+KLdD3n7Qy7i3L58vSPN2us7Xc/i81XDiU/19MM2T+PoK
51OV10TiU8V7MPGprhvz/qXi6yt8/nTr+opq/A95/2W+vsL5lHlc7PWledNr
trz6eh3Gg46NJj5VnCNb+fTWIe+ffb4pre/T93w9ic9X9iQ+1eedfn/wcc+t
6/uOefk2b13H7uNTvq40zZ/6ep3jrP/2fqPGfJ2evufzxu2+viiNExI35dmU
+FR2h/z+SxwDiU/9vqLrTsOD3YlPfX2F4qqB/xjXrmrycY/Ep97P+rzpH5G3
7Hcl7tCrz596vrVp3Z0+P1Xx9RU+f+rl6uNTzPem9X3baBfOp7KzI8270W9V
nE/ltzvxqfJvT3zqz4XwH+PjTb6+LvN1J/r7TvzXOl/6uHDi06vRIfWe1le4
rh6gX1Y5NCWOx35al+R86utYZe9k5r97UD67GKe+4Otg7Ft8j3I2v8/o8wH7
Jepd9joTd23Nuy7xqa87dD71deo+PuXrRqlfcw6h/s3XVzC/nsaR5M/HX6p+
Yv601p+P0jox9MlzzjnK80TF11eg78zvG7re14U8S74+HnSBeV+fP/V1Az6/
7OsrOtK6Hton/n0daA338a9XfP7Un0N9/hQ9+DqkNI+Azs3LzfkUvaXxKdc9
4+f499+VNKZxCp6/03MDz+eUk9/HPY4dPzF/6hzm6/sa4Y7un4jT583bUj91
C+1W5dyQ1sldTb15v4sOKl4Osufzpw2+Lu0n1gG0+LxWmj/1cXJ9PgiP/P/r
/nzeyNuRtxNvp3CHzajcKt7P+fzplnGxy+VCnj5/lMY1Wf+Ef19fMWje7m+l
X8uRF+NXaZxGr1XBdel86vNsPn9Kv8H1Pp/bg59W8/UVt275u9eTv/q8XFt6
roafgttxPvV5EdoR+ulO6764X/u6vjTO7PUke0PmfOrzBD5/qjhGfX4T/37f
3R98HFv6u0T77sXuXavez/u6IZ+35vv0z+7P1+WMYK+Xch1Lcfr6CuL3311Q
H/sSB3yDfsDb5V30M/reUOrH9OLrOXy80tev+Hilrzfw+eWDaf7U11dQLz7u
4vUftpaj8+kw/fzXfT1xmj+Fh21rO/P1HIxXHjuEHpxPJ9P8KTye5k993pDf
ZwUfx9fn57k/jKX5U19f4f0ezwvePv15wtsvfg//xPzp9Nb50yMz3j/g39eT
7EVPvj7oRfqbg35fgpcnfH2H+fqKrXw6ldq97M2Y86mvr9gyf3rrrPef8LOv
D9pDf3MI/fnvTyYZh3yM+8RhX5fqz5tb50+Puj//PYyvH/H5QV9PwfzpCV9/
0MzzzUSaP5Wfw+j5DDw4RX0d998zYM9/7+HrR/z3MO6f+dNb3Z/zV458htP6
Cvo51mNOoeda7q+eL+v77p6BQ0/47z22zp8e8Xx9fNDXc/j4qb+H3+/29R0+
f5rnc+euma3zp7lZ5uNOVVTvs+jH73Nzaf5UdnLpPq1Xz9fX0/l6Duf3hdQv
yp6vt2B9392zW9dJH50z59N4+ZEc7eZZ1gP4+pGdPt6V1vfJXj6t75O9BeKg
XzmymOZPZa/g36c9eX47uX/kjPFbuGg+rRPWdXnqfxd5pfzw6/58fd9imj/1
9RXej8reUpo/Vf3Pp/lT1X+e+a+nWQ+Q93XV/nsz7DFeedTXcxzw8dS0vo/x
1q33tRNL5DOS1legP9p3nnrk99FXLzhnw2mLiXv1PS9fX9/n+fr44FJa38d4
dJo/Zbw6zZ/qe6t8DsefWEjzp1FHdy/CO6zz/o1Cmj9V/S+l+VPV/3LiPtnz
fPm9x90rW+dP0/oK1m0eWfP+i/ZUMOdT2Vnyde08p/h6Fl+H7P7999Huz/l9
Na3vkz1fTzFIPfh6C78vrXv/Tntaon54rjiyzPo1nls6VtDzOen5xEriU+Xv
61d8/tT9wUlHfP3IYFpfofhGKc8s8am+t4yenU9XDK6Hv1bR83n6Z8/X152v
Jz719RW6zvnL/Tk3+HoGX+dqiU8V7yrtm99lnFhlPd3XWa+1xrwZ69SPrqd1
8L6+QnG1+nxg4lPmC7fy6SO+vmNU37Ni4lP9fY31I86n6/au+P0vwO+Z6Xfk
F7mfZolPmQ9N6/sUv6/34PceHb6eYZD6LCZu8/UVKr/99M/rrI+4xPys53vX
KmkkPvX1FXxf/k/7ehp+f/Imtw/nBl/vwfq+0VJaB711fcU+eMPs68ofHrTE
p/qe5+u/9yj+BJ/6+hUfr3R/vr6vlPjU11foujHslBOfav7YWK/B/H5dkfWG
X/f9GNALfPqI58t4pZUSn0b3n3b/8FddmfLiuebd5cT1vr7C+VTtu2h/qPaD
fou2qvbl+1UkPlV9+voRfu9xwvNlPv1IOfGp7JUTn8reBt+Hu49uJD5V/RfR
M3z6phLrHx9Rewq+nqSa9TW+XoX5/Zt9/Ug7evL1HvDgm3w9B88lwde3jGHP
9wPZw3hBCT37uFU58amuKyc+lV1fT9LIq/vz52RfP+K84+tHfH3fFVzv69yv
sLidyfKQ9v/5zAb7gfdq/yjbCHfG/X/atF/SP5RDT9xfpj7E7YLeXQ5xO5fu
Ku1/vK8ctKHtl7Wf0mdK4aXN7Yz+80Xtx2Wl8Oeb2z+9b5/2a/qHIucdsB/0
u4vaH3jXkPaPqtpgP/le+b+tHEoxvlbtT5Qrhyvjfi7sv/x3pbC8ub3Vf7sk
/9eUQtUPNgO8uSJ7pfCRuL/cJe1/dVsx/Frcv2y/9pvKFTlfoFX7a/2dhbj9
zEOD8v/mMvu39yr/0yXia5X/3y+FuJ3MX+3T/mRjpXDH5nZSO1/W/kmhGN4a
D1D4K/l/czFMbm4/9bevZLJn4dWb23W11sv/71uI2/sMt5nsmc4buWNQ+d9d
Yv//Hvn/mRLxsd/ek8Xw+bj/DvvbHS2GuB3ZL1/Q/ludxVAVNxC+T/td3W0h
bl92V5X8/4yFlrjfXL3F81oeyELcTuf32rRf5LZM+yf/h0Htr7WvxH77Peip
GOL2R59hfzsropc69GQhbv/17fPa7+rdFp6KGyB9O5M9C3G7sPdtk//XZiFu
L/TGBju+6f+Gdc5faNN+m59b03kay4Pyf00RPXcr/6oiem5BT4ae9wa2UwzR
/NK5Stz/+bYs/Gzc0Odh7V/5wHr49aiXap3PtG0dvTToPKD5NfTcrv0tr+E8
ll2Dyj8YeulGT4aem8NPaXth9LxH5xd1Zuj5rM5reu16uCtuWPU97X96w1qI
27u1bpf/z62il0aTvRXia9f+qJ0r6HlA/jsNvXTL/zUZ8TVrP8vb1tHzbp3X
88Aaen5B+59uWws3b4Ybvp8p/9UQtwc8vp38V9BLo/YTv22Z+DrQ0xJ6HtD+
ok+uo5cu8l8nvmb5f+0aeq7V/p83rKLn0zpf63MrIYZ7+gntV/vkMnqukf/O
5XBT1Esjeloivg7p+YYCeh6Q/9vW0HMX+a8S3wH537aKnmt1vtL8Cno+pf1q
r1kOZzbDHX1a+4nftoSed2g/1gcK6LkJPRXQcwd6WkTPA9oP9rWr6LlT5zPd
sIKeD8j/55ZD3A7tdbsozyX0fFJ67lwK45vhvvlZ6fm1BfS8U/5vWEQvTehp
AT2z//KTefQ8IP/bVtBLJ/kvo+cm+b9mKcTtx35zJ+VZCDH97Ifaj/WBxRDD
/f3ndN7XtsXw01HPu7R/7/wCejlgcfvUa/z8l070NI+e+8l/Cb100p4KxNck
PXcW0PMO9LQY1jfTr/uB9HzDQrhvszjfekp6/lwePe8i/3n0cgA9zRNfF3rK
oWfOZ7umgF46yH+R+JrQ00KI28U9XYOeFkJM/5ET0vN8nvObnpeer5lHz7Xk
n0PPB2hPc8TXRf88h577aU+L6LmD/BeIr5H2lEfPNZTnfHh4M/1PHZeen8xx
Pz8jPXfm0PNu6fm1c+iF8+tumEXPXehpBj1znt4DefTcjp7y6LkRPc2j5+2U
Zy58cjP9X3mM/nkufDTez8/SP8+i5z20p1n00kx7miG+bu1n/s0p9NxPe5pH
L+3kn0PP7L/85Bx6rqY858K/bFbP+/9Ben7tbIjF+bcvSs83zNA/77W43fW1
0+ilRefffPMw8XVrP/b8JPXBeXHzOfTSTv/s5+s00D/Poudt6GkmvG+zetq/
Q/88g57P67y4a6dCW9TzXp0P981J9NKi89DyE8TXo/PkPn6Q+ugj/1niayP/
WeJrQE8z6LlK5wlUT4eZuCHfN7S/+bWH0fNLOk/qmxPouQ7/h9Az5+l9fJz4
enR+W/VY4lPV/wx6bguKdzrxadxvvXoq8an8TyY+lf9DiU9V/gfR8z78jyU+
lb1R9Nyj8yiuHU58Grdv//gU8bXi/zB62a/zna6dCAX4VP4PhqqnxafyP46e
L+m8pI+Pouf9+B9JfCp7Q8TXi54HEp+qvCYTnyreQ4lPdf14uB0+VfmPhffC
p8p/JEzBp/I/TP9cT/6DiU9lr5/4etmvshe9cF7ctQcTn+r6scSnyn808an8
D4da+FT+h8K/wKfKfwA91+v8ndv7Ep/Kfzfx9bHfZkfiU/kfTXwq/yOJT1X+
Q4lP5X8w/AA+lf/+xKdx+8nbe6iPBvx3omfOKym0EV+fzrva0Zz4VP6HiY/z
9D4+mPhU/gcSn8bzqB7sTXyq/LsSn8p/e+LTeP5RoSXxqfarbULPfZyHsy/x
qfIfID7Or6vuR897tJ/mg93o+azO/7m9I9wDn8p/K3rZTv4HEp/Kf0PiU+3f
vFvnhU32s1/z9sSnur438an8dyY+Vf5t6PkFnR91XXP4EHwq/43oZTv7qdeF
EfhU+93uSHyq/fQvVeJ2ov+2n/3zT1WcT+W/PfGp/LckPpX/psSn2j94f7gX
PpX/WvRcQ/lvoz4aOc/gbMX5VOdRHK/E7Wg/0m8n4w3la9md8Kn8H0h8Kv8N
iU/lf0/iU/mvCWfhU+3Hf6HifKrzGZ6tPA+fPhYL5IuVm+BTPcCfyOL2r1/1
81xezJxPtZ9wHXpmP+h37Ux8Kv9ViU/l/3TlIHwqe49UnE/1+SOZ86n2iz2d
OZ/+MF7/ShbPezrXT3ntNOdT+a9Gz03sz3+u4nyq8zpOVN4Fn/6sNijOroJP
pY9nM+dT+b+QOZ+qvLab86nOL9lj0jPnlbytwZxPdX7syYrz6atjed5f+QB8
qv2pj2er8Kn2uz2bfQ0+VbzbrA0+lf9dNgKfyv9+cz6V/yaTnjkf5KMt5nyq
+v125nyq8/hOZZ+HT+X/UrYHPpX/HfY2+FT+99q/wKc6/qDRboZP5b/ZnE/l
v82kZ87juK/T7oRPdV7O+cz5VOezbDfnU/nfbd+FT3WeSr1dgE/l/4D9BXwq
/63mfCr/HXYTfCr/3SY9D6j9vdRnzqfyv8s+DZ/qfJl95nyq85Ev9yPwqfy3
mPOp/Leb86n8d5nzqfz3mvNpHP94ud+k5wHtz/6xQXM+1fUNxNcQYvW9dMCc
T+W/zR6DT+W/06bgU/nvsZ+GT6O+395vzqc6TmnAnE/lfwg9D2o/+pkRcz5V
ebWY86n8d9gH4FP577b3wqex/X20z74Gn8r/gDmfKv9BG4VP5X/YnE9je54Z
Rc+cD3L/mDmfyn+XOZ9Gfb+t1z4Pn+r6fuuHT2N39fZB+0X4VPkPoec6/I+g
5xbyHzPnU9kbR8+cx/H2Q+bjp4q337rgU10/YM6nun7I7oJP5X8YPV/U/vgf
G0XPnFcyM27Op7J3ED1zvt/bJyyeD/jVQcpz0pxPdf2g/Qx8quuHzflU149Y
eEp8Kv9j5nwq/wfN+TT25/cfMudT2Zs051PZO4yeB3Xew8emzflU14/YDfCp
8h8151P5H7ej8KnK/5A5nyqfCXM+lb3D5nwqe1O2hU9fM4Oeh8Qn7bPmfKp4
x8z5VP4PWg18qvwnrAE+lf9Jcz6V/ylzPpW9afQMn35jxpxP4/7lt8yi5yHt
P/6OOXM+VXkdsifhU/mftH8Pn6r8D9tJ+FT+p9HLNt2v3j9jW/j0NbPm46fR
f/ucOZ9G/0/M6Xyjjwxpv/O/yJmPn8b9+GcOo+e9up/fP2XOpz+/ef3sjL0e
Po3+L83Y+3+cT78xa86nyn/OtvDpO3Louc9kbx49DymfS/PmfKryn0bP8Olf
zNjCj/Pp+2ftS/BpvL28Zs628Gl7zpxPlX/OnE9lb96cT1WeefQ8pP3hX7Ng
W/h0dhY979Z5AZdmzfk0Xv+NOfvwj/PpLTlzPlX9z5vzqezlzflU9vLmfCp7
C8Q3rHxuWTTnU8U7Z86nijeHnk9rP/z2efsKfKr85835VPnnzflU9hbQcwd6
WjTnU+mpQHzDlGfBtvDpN3LouVbnK9wyj55P6TyFd+TtHHyq/BfQ8w7yXzDn
U9lbNB8/lb2COZ/K3hJ65jyO2WXz8VPFm0fPu3SewRN5exA+Vf4Ldgg+Vf6L
6Hkn+RfM+VT2lsz5NOr5iSW7Aj6Nev6LZfQ8THmumPOp4l1AzztDxNvZRXsn
fBr1fGnR3gKfqv4L5nyq+l8y51PZW058qvxXEp+qPFfQ8zB6WjXnU+W/iJ53
oKeCOZ9KT0vmfCo9LSc+VXkuJz6VvZXEp7K3mvhU9taIb4T2uW7Op4q3YJ+D
TxXvktXCp8p/mfv589LzO1YSnyr/1cSnsreKnrvQ01riU+lpnfhGKM/MnE9V
/8vouQY9rdh34FPlv2IX4VPlv5r4VPmvJT6VvXXz8VPZyxKfyl6Gnkc0HvJG
S3yqeFesEz5VvKt2B3yq/Nfsv8Cnyn8NPe8h//XEp7KXJT6N4wFzlvg0ju/c
Yuh5RONBr1jiU+l/FT1XB+l/zR6GT5X/us3Ap8o/s9fAp/F5ps4swKfR/69Y
4tPo/2FLfBr9Z0XiG9H44qeKiU+V/zp63oae1hOfSk9Z4tOI/0cs8Wn0/5eW
+DSWf3sx8Wn0/xvFxKfx+eiJIvGNKp8jpcSn8fn9/Rl6rtL5kCOW+DRef7Ml
Po3je89b4tOY/xuLiU+j/0qR+HqU/0gp8anslYhvVOOrz5cSn8Z432HouUrj
UcfM7oBPVf9F9HxR48u3FBOfqv6LiU9lr2Q+fip7JfQ8iJ7K6HkUPZUTn8by
ryvaPHyq+i9aFXway//hInq+pOfjrISe98v/p0qJT2WvnPhU9sqJT2WvjJ5H
0dNG4lPVf9Fug09jvO0luwM+Vf2X0PMrWSz/J0rouZ76L6PnNvRUTnwqexuJ
T2Vvg/hGVZ9PbCQ+VfsvWTV8qvovJT6N+Y+UE5+q/suJT6P/58uJT2VvI/Gp
7G0kPpW9K4hvDHtX8Nw/yPjlBueO+vjmRoiP6eMtjL+W1e569zI+XuZctxcZ
by0HFoowHl3Sc/b11cyXlLi+gfHnIueetTM+XOS5fIDzVsvS0VXdjB+Uia9Z
49PjZfVLV+7hvNYS54adVfu7qhQ0LvSY6vOFYojDgq/azvm4xbAar2/kvOoi
8bWrfO81ntsH5P91Zc5B7VL+T5WIj/HWD5Q4V2m3/t5d4lyuM5ov+HyRcZrj
0tvripz7WKP8nzKta/hEo/x/wIiP8cRu0zjURweU/52l8J9iHpzHXCoR3wHV
56PF8NcRPGr19/cUGac6Lb3VFzmH94T6gztN82qP18h/ybgePronIx/48Zl1
Xf+2AeYvSuilCz0VqbcDqs98Uff9Z3ahJ6P+TzHfZJxD9bT6y2rjXNUd8l/I
uL5J44fXrRNfJ/MJa4wjDMj/VUX00km5GPEdIC5Dz7sYLzLOjX5O9/8bM/Xz
vT8UH92zjp53cl7aGnrx8c014oPXrlxFz/3K//OGXjrRkxFfk3T8YIaed0pH
OzLOKX22ovzXif8k4/Vr6JnxzdtX0csB8eqDK8Tn592toOd++a83yqUDvxnx
NTGet46ed3Be9Rrnyj6t8fpnVon/FOfLraJneO3KFfQMz964THzw0T1L6Lmf
8fl19NxB/uvE5+e5raHnGsbL3d8J8cjtK8R/Wrz24DJ65ry7HcvoBT4qLKFn
+PG6AnruJ+81yruD/FfRDfz4zAp65ny53hXGZb/P+O8y8Z8Rz964hJ53c55e
Ab00o6dF4uN8ud5F9Nyvdlrw8m6X3+tWiK+R8+2Wdc5c73bKcym8MZbH9zjv
bon4zzK/UkDPe+T/ukX00oyeFoivm/Pw8uTTR97LlHc7+S8TH7x25ZKeg67k
vLsbC+FM/P7DnL++SLs7p+ehZxbQ117Nz/UuoJcWk5088XHe3Y3z5NNH/kvY
b6M9FYgPnt1RII5t6Gkx3By//23mnxa4j5yXnm/Po6868p9HL5x3t2Oe+00P
espxX+oj/wJ6bsPvIuVWj54W6H+r0FOe+9XXpOfePPFfkJ6vnEfPnHd3Yw69
tNKe5oivh/55lvropT0topc28l+g3uppT16+r9Ce5kNVtP/X0vODOer/ovS8
I4ee9zFfOIdeWtHTLPH1oqcZ8ukl7zzxtVIu8+hlP3HNU/+XaE+5UBU7jA/S
nuao/0v0z7PoeT/taYZ8WmlPM8TH+cefmCKfHtrTPPG1oqcc9baP9jQX/iR+
7yLtaS7MxC98ifY0i16qyH+G/rnelMc0+bQxf3qY+Ho5j3WSfHrIP4eeW+if
5+j/6uifvXwv6P5wz0x4Kurj/kznTU9z7nYV559OcX0D85eT6KWN+dUJ9Nxn
cbzwXQfRcw/5z6LnFvQ0S73tRU9evucr8j+lcdC/f0jrQ9cOoxc//3iC6xvw
f4j42jm/dZz4+jg/ezTxqeplJvGp4p1OfKr5zMOJT+V/MvGp7B5KfCq/B/me
n8c8lvhUfx8hbz9Pdzjxqa6bSnyq6yfR8x6Nj69NUP9nOU/8YHg9fCr/4/R/
2zm/eJT64Lzhvx9OfCp7Q9wX/PzjgcSnKq+JxKeycyjxqa4fR89nmF8eC78N
nyr/EeY9a/A/xPcayX8w8an+3k876td8WXMveu7C/0H07OcfjyU+Vf6jiU/l
fzh8ET6V/0H0XEP+A4lPVW59iU/lv5t23K/5xMfbE5/qulH0fAA7I4lPVf5D
iU/lfyD8ED6V//7Ep/8q+u9JfCr/nYlPxQWttCNfn3Ag8amuG058qvwHE5/K
f3/iU3Fhb+JT5d+V+FTz5e18r4n8mxOfyn8jeh7Q8+kLdYlPdd1A4lNd34ee
d2r+8vru8F74VP476C9Oar6yuRU978J/Ezrw+e76xKfRzQu16HlA6+0+VJ34
VP57Ep8q/87Ep/LTFjbgU/lv1nPJZT6V/wb0XIv/vejA1wPUJD4Vf7yscaXr
OI/5ypMV51P5b0fPjfhvSXwq/02JT8UV+3guOa3n46t2oedayr8q8anq9YWK
86leH+O+PGBPXakHBudT+T+Anhvx25D4VP53Jz6V/+08Z59h/cb5ivOp6ukH
FefTo5qArjifnovfewrOZj3Aq85nzqfiurrEp/K/I/Gp2vWlivOp/J+qOJ+q
fL9TcT7V/f2f6QeatZ72+jOZ86nKpwouY355zy5zPpX/bYlP5f9sxflU/eXx
ykn4tDZ+/z49F1/mU9l5LnM+lf+L3Nda8F9jzqfqT/fCRZw3fE8DOmvjfvXD
ivPpt+Lnf1P5IHyqOJ/Ifgc+Vb28qOfiy3wqv9VaJ3uZT+W/1pxP5d+5owf/
TXDJIHzYYs6n4s6Hs6fhU+nk+eyv4VP5fyV7NXwq/ztpRxe4n9bRzuv0vHlj
ozmfyn+zbeXTNrhwEL13mfOp7LyU9cCnqvft5nwq/3vs5Hd/jE+vbKAdXdT5
4jeyztr59J5Wcz6V/w5zPpV/zol+kPHE8X5zPpX/XfY6+FT9/37byqdN5nwq
/4zrJj5tN+dT+e+Ca1rx32fOp/Lv54oPMR41aM6nakeN9ps/zqdXNpvzqfy3
mf04n97TiV6q8N9Du62nv3WuYTxxfNCcT+WfeffCEHGMoOcW/LfaVj7tsFr4
VO2t207Cp/LfZ86nKqcBcz5Vuxsy51P5H6a8+9DdKHpmfPOFMXM+VTvqsqfh
U+Xfa++ET3V9vz0Gnyr/QfSyjfyH4cAG/I+Y86nyHzPnU9kbZ10p478fOmTO
p7q+33rgU10/YM6nun7INuBT+R9hXWE1/kfRSwP5j5vzqewdNOdT2ZtAz0OU
52FzPtX1g+h5D5zm5XtW43Hjo/av4VP5HzPnU/k/aM6naneHiK8d/5PmfCp7
U8Q3rPmLe6fN+VTXj6Dn3dw/xsz5VP7H7XfgU33vkDmfKp8Jcz6VvcPE10F9
TpvzqcZ5ZohvmHHwWfPxU8U7bs6n8n8QPZ/m/jlhX4JP9b1Jcz6V/ylzPlWc
M+Z8quf4GfTSj+5miW+YfmLOnE9VXofQ8y44YhI9n2I93WE7CZ/K/zR2d8j/
R2fQMzz4tllzPo3XTc2Z86nGLefon4dZ75Yz59O4fv+qw+h5FxwxZc6n0smM
DcKnyn8WPe+knGbRSxNxzpnzqa7LmfNp/D3Fq+aJb5jyzJvzqcp/Gj3v1HP3
fTP2q/Cp8GXWJuBT1f+cOZ+q/nPmfKr8c8TH76numzfnU5VnnvhG0NOCOZ/K
7ix63gF3zpnzqep/zpxPdX/NmfOp6n/enE9lL098/D6necGcT2VvgfhG4PtF
8/FTxTtnzqeKN2cN8Knyn9fvSC7zqfKfN+dT5Z8351PZWzDnU+lpET0PoKcC
8Y1QngVzPpXdHHrert+jfHbeHoVPlX8ezjwDdy2gk93kv4iem4lz0ZxPdV3B
nE9lbwk9j1Cey+Z8qnjz6NnXh+bt9fCp8l/Q73Au86nyX0Sne8i/gF6ayX/J
nE+13nIp8WnU833LxDdCea6Y86niXUDP1YwjLdqz8Kn4voCez0nPjxfM+VT1
v2TOp7K3THzdXLeS+FTluUp8o+hp1ZxPlf8iet6GngrmfCo9LZnzqfS0nPhU
5bmc+FT2VszHT2VvNfGp7K0R3yjtc918/FR2l+yv4FPFu2QGnyr/ZfR8QXq+
fiXxqfJfTXwqe2uJT3XdGnp2LsD/daOUZ2bOp6r/Zfs2fKr6X7HH4FPlv4Ke
L0rP960mPlX+a4lPZW898ansZYlPZS9Dz6OsX7TEp7K7YgX4VPGuWlWr+FT5
r9lH4FPlv46e95P/euJT2csSn6reLPGpys2Ib5S4i4lPpf9Vux0+lf7X7K3w
qfJfZ9yiivwz+v16jT9dxlnn0xjGrxvxMZ573BKfxst+ukh8Y+on7iomPlX+
67YTPlX+WeJT6SlLfBove4MlPo3+v2yJTzU8VjQfP40vNxUTn8bLThaJbwx7
JfPxU62vzuyX4VOtF7XEp/H6j1niU61PtcSnqv9i4tP4en8x8anslRKfyh7+
rxvDXinxqewaen6R8S+zV8Onev4pJj6Vn2LiU8VRSnyq11LiU9kraV7nMp/K
Xhk9O1eXE5/GZtRWRM9ntd7614v2RvhUj+9F9LKd+i8lPo3m7iolPpW9cuJT
2SsnPpW9Mnoew95G4lPVfxE9n9E4zVDJboZPVf8l9Fyj8j9ZSnyq+i8nPpW9
MvOQjOcObSQ+lb0N4hvH3kbi0xjv20vo+bTGae4vJT6NbmfKiU9V/+XEp9H/
y+XEp7K3YT5+KnsbiU9l7wriG8feFfa/AXjkkrI=
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {-1.32, 
    1.1199999999999999`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {
    7.3, 2.4000000000000004`, 8., 20, 
     24.200000000000003`}, $CellContext`rawNumberOfMasses$$ = 
    5, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
    1, $CellContext`tau$$ = 0.12377872467041015`, $CellContext`tick$$ = 
    True, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 0.8}, {0.5420000000000003, 
    0.54}, {0.4, 1.2}, {1.3, 1.4}, {0.9860000000000002, 0.895}, {
    1.5100000000000002`, 0.98}}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period:"]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open"]}, 
                ImageSize -> {200, 60}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Text[
                Text["Angular frequency \[Omega](q), selection:"]], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["mesh size "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`meshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin], 
                Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tau$$], 0}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`meshSize$$], 8}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`meshSize$$ = 
        8, $CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
         1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tau$$ = 
        0, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       Dynamic[If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
            Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
              1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
           Module[{$CellContext`n$}, $CellContext`n$ = 2; 
             While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
            ReplaceAll[
              "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
             2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
              $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
              
              Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; $CellContext`bInitDefaults$$ = 
            False; Null, Null]; 
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
                $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
              True, Null]; 
           If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`showDynamics[$CellContext`parameterLocatorDependencies$$, 
                
                Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$]; $CellContext`bRefreshDynPlot$$ = 
              False, Null]; $CellContext`dynPlot$$[$CellContext`tau$$], 
           
           If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
            If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
               False; $CellContext`bRefreshDynamics$$ = 
               True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
            If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`meshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
              Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
            LocatorPane[
             Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                   Dimensions[#]] < 3, 
                 
                 Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
                 If[First[
                    Dimensions[#]] > 7, 
                  Take[#, 7], #]]; 
              Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                 First[
                   Dimensions[$CellContext`rawArrayOfMasses$$]]; 
                If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                    $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                  
                  While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                   AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                   Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                   Part[
                    Part[$CellContext`kArray$$, All, 1], All, 1]]; 
                If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                  Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                  
                  While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                   Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                   Part[$CellContext`u$$, 1], 
                   
                   Part[$CellContext`u$$, 
                    1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                 Part[$CellContext`glConstLocDefault, 1], 
                 Part[$CellContext`u$$, 1]]; 
              Part[$CellContext`u$$, 2] = If[Dot[
                   Part[$CellContext`u$$, 2], 
                   
                   Part[$CellContext`u$$, 
                    2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                 Part[$CellContext`glConstLocDefault, 2], 
                 Part[$CellContext`u$$, 2]]; {
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
               If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
               If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
               If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                 1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                 4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
               ReplaceAll[
                 "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
                2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
               True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
             $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
             LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period:"]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tau$$, ($CellContext`tau$$ = \
$CellContext`checkAgainstRange[#, 0, 0, 1]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open"]}, 
                 ImageSize -> {200, 60}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Text[
                 Text["Angular frequency \[Omega](q), selection:"]], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["mesh size "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`meshSize$$, ($CellContext`meshSize$$ = \
$CellContext`checkAgainstRange[#, 8, 2, 30]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`meshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tau$$, 0}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`meshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{907., {288., 295.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms}, $CellContext`latticeBasis = 
          Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            Range[$CellContext`numMasses]]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay]& , 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], $CellContext`pointsTable[
         Pattern[$CellContext`mPosFirstCell, 
          Blank[List]], 
         Pattern[$CellContext`latticeBasis, 
          Blank[List]], 
         Pattern[$CellContext`numberLatticeLinesToDisplay, 
          Blank[List]]] := 
       Table[$CellContext`mPosFirstCell + 
         Dot[{$CellContext`i, $CellContext`j}, $CellContext`latticeBasis], \
{$CellContext`i, -Part[$CellContext`numberLatticeLinesToDisplay, 1], 
          
          Part[$CellContext`numberLatticeLinesToDisplay, 
           1]}, {$CellContext`j, -
          Part[$CellContext`numberLatticeLinesToDisplay, 2], 
          
          Part[$CellContext`numberLatticeLinesToDisplay, 
           2]}], $CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], $CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk 
            Part[$CellContext`mA, $CellContext`j]])], \
$CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], $CellContext`showDynamics[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`ql, 
          Blank[]]] := 
       Module[{$CellContext`pointsDataTable, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`e, $CellContext`omega, \
$CellContext`points, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses}, \
{{$CellContext`a, $CellContext`b}, $CellContext`pointsDataTable, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`lines, \
$CellContext`mScalarArray, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "numberLatticeLinesToDisplay", 
             "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`points = 
          Table[Part[$CellContext`pointsDataTable, $CellContext`k] + 
            Table[$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`ql, $CellContext`a $CellContext`i + \
$CellContext`b $CellContext`j] - $CellContext`omega #))], {$CellContext`i, -
               Part[$CellContext`numberLatticeLinesToDisplay, 1], 
               
               Part[$CellContext`numberLatticeLinesToDisplay, 
                1]}, {$CellContext`j, -
               Part[$CellContext`numberLatticeLinesToDisplay, 2], 
               
               Part[$CellContext`numberLatticeLinesToDisplay, 
                2]}]& , {$CellContext`k, $CellContext`numberOfMasses}]; \
$CellContext`nu = 2 Pi If[$CellContext`omega == 0, 1, 1/$CellContext`omega]; 
         Show[{
            Table[
             ListPlot[
              Part[$CellContext`points, $CellContext`k][$CellContext`nu #], 
              PlotRange -> {{-($CellContext`glConstWindowHalfWidth/
                  2), $CellContext`glConstWindowHalfWidth}, \
{-($CellContext`glConstWindowHalfWidth/
                  2), $CellContext`glConstWindowHalfWidth}}, 
              ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
              Directive[
                PointSize[
                 Sqrt[
                 Part[$CellContext`mScalarArray, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
                $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], 
            
            Graphics[{$CellContext`lines}]}]& ], \
$CellContext`glConstPrimaryDisplaySize = {380, 380}, $CellContext`glConstMMax = 
       30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -(Part[$CellContext`qMax, 1]/2), Part[$CellContext`qMax, 1]/
               2, Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -(
                Part[$CellContext`qMax, 2]/2), Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], \
$CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 
                23}}]]}]], $CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, \
$CellContext`n$]/($CellContext`glConstMMax 500)]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               Part[#, 3], 
               FE`glConstSpringColorsByN$$55]]& , $CellContext`cN$]; 
         If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                Part[#, 3], 
                FE`glConstSpringColorsByN$$55]]& , $CellContext`cOrigin$]], 
           Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> {{-($CellContext`glConstWindowHalfWidth/
                 
                 2), $CellContext`glConstWindowHalfWidth}, \
{-($CellContext`glConstWindowHalfWidth/
                 2), $CellContext`glConstWindowHalfWidth}}, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], Attributes[$CellContext`uLoc$] = {Temporary}, 
       Attributes[$CellContext`ld$] = {Temporary}, 
       Attributes[$CellContext`cd$] = {Temporary}, 
       Attributes[$CellContext`m1Ind$] = {Temporary}, 
       Attributes[$CellContext`m2Ind$] = {Temporary}, 
       Attributes[$CellContext`moInd$] = {Temporary}, 
       Attributes[$CellContext`mScalarArray$] = {Temporary}, 
       Attributes[$CellContext`numberOfMasses$] = {Temporary}, 
       Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
       Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 
             0.01}]}], $CellContext`glConstKMax = 1, 
       FE`glConstSpringColorsByN$$55 = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]]] := Module[{$CellContext`result}, $CellContext`result = If[
            
            NumberQ[$CellContext`v], $CellContext`v, $CellContext`default]; \
$CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], \
$CellContext`massValue = 0.25, $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , \
$CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], \
$CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]], \
$CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.600991920019863*^9, 3.6009919670395527`*^9}, {
   3.6009920245298405`*^9, 3.6009920501333055`*^9}, 3.60099313594541*^9, {
   3.600993187449356*^9, 3.600993239845353*^9}, {3.6009932797776365`*^9, 
   3.6009933046760607`*^9}, {3.6012440341096554`*^9, 3.6012440721578317`*^9}, 
   3.6012447781242104`*^9, {3.6012448176024685`*^9, 3.6012448561326723`*^9}, 
   3.6012449730663605`*^9, {3.6012450799064713`*^9, 3.601245088751977*^9}, {
   3.601245122802925*^9, 3.6012451299813356`*^9}, {3.6012451718047276`*^9, 
   3.601245397972664*^9}, {3.6012467859190493`*^9, 3.6012468229691687`*^9}, {
   3.601246896213358*^9, 3.6012470488980913`*^9}, {3.6012470802998877`*^9, 
   3.601247087356291*^9}, {3.6012476034298086`*^9, 3.601247625026044*^9}, {
   3.6012477383525257`*^9, 3.6012477482580924`*^9}, {3.6012479226070642`*^9, 
   3.6012479616512976`*^9}, 3.6012480156453857`*^9, {3.6013815489528093`*^9, 
   3.6013815749782977`*^9}, 3.6013816959272156`*^9, 3.6013818936795263`*^9, 
   3.601381933169785*^9, 3.6013820135453825`*^9, 3.6013868190332403`*^9, 
   3.6013870782100644`*^9, {3.6013873694127207`*^9, 3.6013874408698072`*^9}},
 CellID->102477150]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "DetailsSection"],

Cell[TextData[{
 "The positions of masses within a two dimensional periodic array of cells, \
can be described by summing the lattice vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["r", "\[RightVector]"], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], " ", "=", " ", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["n", "1"], ",", " ", 
        SubscriptBox["n", "2"]}], ")"}]}]], " ", "=", " ", 
    RowBox[{
     RowBox[{
      SubscriptBox["n", "1"], 
      OverscriptBox["a", "\[RightVector]"]}], " ", "+", " ", 
     RowBox[{
      SubscriptBox["n", 
       RowBox[{"2", " "}]], 
      OverscriptBox["b", "\[RightVector]"]}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", representing the origin of each of the lattice cell, and a relative \
vector to the position of each of the masses.",
 " ",
 "With ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 " representing the equilibrium position of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 ", the position of that mass is ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 "+ ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.6008874666091995`*^9, 3.600887466629201*^9}, 
   3.6012090394184523`*^9, {3.601382475199787*^9, 3.601382478123955*^9}},
 CellID->143536934],

Cell[TextData[{
 "Let ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["a", "\[RightVector]"], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], "=", " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["r", "\[RightVector]"], 
      OverscriptBox["n", "\[RightVector]"]], "+", 
     SubscriptBox[
      OverscriptBox["p", "\[RightVector]"], "k"], " ", "-", " ", 
     SubscriptBox[
      OverscriptBox["r", "\[RightVector]"], 
      OverscriptBox["m", "\[RightVector]"]], "-", 
     SubscriptBox[
      OverscriptBox["p", "\[RightVector]"], "j"]}]}], TraditionalForm]], 
  "InlineMath"],
 ", with direction ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["a", "^"], 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", represent the equilibrium separation of the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]]],
 " from the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["j", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["m", "\[RightVector]"]], TraditionalForm]]],
 ".",
 " ",
 "If the harmonic coupling between these masses has magnitude ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]]],
 ", then the system of equations describing the vector displacement ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["u", "\[RightVector]"], 
    RowBox[{"n", ",", " ", "k", " "}]], TraditionalForm]]],
 " for the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in unit cell ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["n", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " from the equilibrium position is given by"
}], "DetailNotes",
 CellChangeTimes->{{3.6008874666091995`*^9, 3.600887467295239*^9}, {
  3.6012090498004904`*^9, 3.601209051237634*^9}},
 CellID->185095190],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubscriptBox["m", "k"], " ", 
    SubscriptBox[
     OverscriptBox[
      OverscriptBox["u", "\[RightVector]"], ".."], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}]]}], "=", " ", 
   RowBox[{"-", 
    RowBox[{
     UnderscriptBox["\[Sum]", 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", 
       RowBox[{"k", " ", "\[NotEqual]", " ", 
        OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
     RowBox[{
      SubscriptBox["K", 
       RowBox[{
        OverscriptBox["n", "\[RightVector]"], ",", 
        RowBox[{"k", ";", 
         OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
      SubscriptBox["Proj", 
       SubscriptBox[
        OverscriptBox["a", "^"], 
        RowBox[{
         OverscriptBox["n", "\[RightVector]"], ",", 
         RowBox[{"k", ";", 
          OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox[
         OverscriptBox["u", "\[RightVector]"], 
         RowBox[{
          OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}]], "-", " ", 
        SubscriptBox[
         OverscriptBox["u", "\[RightVector]"], 
         RowBox[{
          OverscriptBox["m", "\[RightVector]"], ",", " ", "j"}]]}], ")"}], 
      " "}]}]}]}], TraditionalForm]]]], "DetailNotes",
 CellChangeTimes->{{3.6008875035133104`*^9, 3.6008875050703993`*^9}},
 CellID->413013362],

Cell[TextData[{
 "In general, we have one such equation for each ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}], TraditionalForm]]],
 " pair.",
 " ",
 "A trial solution of the form: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox[
      OverscriptBox["u", "\[RightVector]"], 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", " ", "k", " "}]], "(", "t", 
     ")"}], "=", " ", 
    RowBox[{
     FractionBox[
      RowBox[{
       SubscriptBox[
        OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
       OverscriptBox["q", "\[RightVector]"], ")"}], 
      SqrtBox[
       SubscriptBox["m", "k"]]], " ", 
     SuperscriptBox["e", 
      RowBox[{"I", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          SubscriptBox[
           OverscriptBox["r", "\[RightVector]"], 
           OverscriptBox["n", "\[RightVector]"]], ".", " ", 
          OverscriptBox["q", "\[RightVector]"]}], " ", "-", " ", 
         RowBox[{"\[Omega]", " ", "t"}]}], ")"}]}]]}]}], TraditionalForm]]],
 " can be used to decouple this system, resulting in a single equation for \
each ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass of the form"
}], "DetailNotes",
 CellChangeTimes->{3.601209052017712*^9},
 CellID->160232404],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SuperscriptBox["\[Omega]", "2"], " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
     OverscriptBox["q", "\[RightVector]"], ")"}]}], " ", "=", " ", 
   RowBox[{
    UnderscriptBox["\[Sum]", 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", 
      RowBox[{"k", " ", "\[NotEqual]", " ", 
       OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
    RowBox[{
     SubscriptBox["K", 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", 
       RowBox[{"k", ";", 
        OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
     SubscriptBox["Proj", 
      SubscriptBox[
       OverscriptBox["a", "^"], 
       RowBox[{
        OverscriptBox["n", "\[RightVector]"], ",", 
        RowBox[{"k", ";", 
         OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        RowBox[{
         SubscriptBox[
          OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
         OverscriptBox["q", "\[RightVector]"], ")"}], 
        SubscriptBox["m", "k"]], "-", " ", 
       RowBox[{
        FractionBox[
         RowBox[{
          SubscriptBox[
           OverscriptBox["\[Epsilon]", "\[RightVector]"], "j"], "(", 
          OverscriptBox["q", "\[RightVector]"], ")"}], 
         SqrtBox[
          RowBox[{
           SubscriptBox["m", "k"], 
           SubscriptBox["m", "j"]}]]], 
        SuperscriptBox["e", 
         RowBox[{"I", " ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SubscriptBox[
              OverscriptBox["r", "\[RightVector]"], 
              OverscriptBox["m", "\[RightVector]"]], " ", "-", " ", 
             SubscriptBox[
              OverscriptBox["r", "\[RightVector]"], 
              OverscriptBox["n", "\[RightVector]"]]}], ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}]}]]}]}], ")"}]}]}]}], 
  TraditionalForm]]]], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.5980567961741514`*^9}, {
  3.5991430414266324`*^9, 3.5991431578722925`*^9}, {3.5991432045039597`*^9, 
  3.5991434204693127`*^9}, {3.599995184437109*^9, 3.599995299044664*^9}, {
  3.5999955623567247`*^9, 3.59999570266675*^9}, {3.599995845419915*^9, 
  3.599996134802467*^9}, {3.5999964591490183`*^9, 3.599996636408157*^9}, {
  3.6000782740315385`*^9, 3.6000782764963427`*^9}, {3.6000800168821993`*^9, 
  3.600080195362113*^9}, {3.6000802877454753`*^9, 3.6000802964814906`*^9}, {
  3.600819379450795*^9, 3.6008194857548757`*^9}, {3.6008195456733027`*^9, 
  3.6008197257836046`*^9}, {3.600819776466503*^9, 3.6008198064982214`*^9}, {
  3.600819885519741*^9, 3.6008199013896484`*^9}, {3.6008233445915885`*^9, 
  3.6008233557062244`*^9}, {3.600823461634283*^9, 3.6008234639174137`*^9}},
 CellID->323301769],

Cell[TextData[{
 "This describes all the steady state lattice vibrations, the normal modes, \
that can be modelled by this trial solution. Here ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " is a vector in reciprocal space, effectively parameterizing the angular \
velocity ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", " ", "=", " ", 
    RowBox[{"\[Omega]", "(", 
     OverscriptBox["q", "\[RightVector]"], ")"}]}], TraditionalForm]], 
  "InlineMath"],
 ". The vector ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    FormBox[
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{
           SubscriptBox[
            OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
           OverscriptBox["q", "\[RightVector]"], ")"}]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]],
     TraditionalForm], "k"], TraditionalForm]], "InlineMath",
  FormatType->"TraditionalForm"],
 ", is an eigenvector of the equations of motion of the system for this \
assumed solution, where ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Omega]", "2"], TraditionalForm]], "InlineMath"],
 " are the eigenvalues of this system. For an N-atom basis, there are ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", " ", "N"}], TraditionalForm]], "InlineMath",
  FormatType->"TraditionalForm"],
 " such ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Omega]", "2"], TraditionalForm]], "InlineMath"],
 " eigenvalues per ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " point, each resulting in a different characteristic motion."
}], "DetailNotes",
 CellChangeTimes->{{3.6008875562233257`*^9, 3.600887556236326*^9}, {
  3.6012090526877794`*^9, 3.6012090538738976`*^9}, {3.6013825361482735`*^9, 
  3.601382742763091*^9}},
 CellID->72937650],

Cell[TextData[{
 "The rank of the resulting eigenvalue problem depends on the number of \
masses per unit cell, but the complexity of the matrix expression depends on \
the number of neighboring interactions that are considered.",
 " ",
 "For example, given lattice vectors ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], ",", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", diagonals ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["r", "\[RightVector]"], "=", 
     RowBox[{
      OverscriptBox["a", "\[RightVector]"], " ", "+", " ", 
      OverscriptBox["b", "\[RightVector]"]}]}], ",", " ", 
    RowBox[{
     OverscriptBox["s", "\[RightVector]"], "=", 
     RowBox[{
      OverscriptBox["a", "\[RightVector]"], " ", "-", " ", 
      OverscriptBox["b", "\[RightVector]"], " "}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", and a one atom basis, where each unit cell contains a single mass coupled \
with harmonic oscillator forces between only nearest neighbors, the normal \
mode solutions follow from the solution of the eigenvalue problem"
}], "DetailNotes",
 CellChangeTimes->{{3.6008875562233257`*^9, 3.600887556623348*^9}, {
   3.6008880360077677`*^9, 3.600888037934878*^9}, 3.601209054354946*^9},
 CellID->69846009],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          SuperscriptBox["\[Omega]", "2"], "0"},
         {"0", 
          SuperscriptBox["\[Omega]", "2"]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], " ", 
     OverscriptBox["\[Epsilon]", "\[RightVector]"]}], " ", "=", " ", 
    RowBox[{
     FractionBox["4", "m"], 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{
        SubscriptBox["k", 
         RowBox[{"1", " "}]], 
        OverscriptBox["a", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["a", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           OverscriptBox["a", "\[RightVector]"], " ", ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", " ", 
       RowBox[{
        SubscriptBox["k", 
         RowBox[{"2", " "}]], 
        OverscriptBox["b", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["b", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           OverscriptBox["b", "\[RightVector]"], " ", ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", " ", 
       RowBox[{
        SubscriptBox["k", "3"], 
        OverscriptBox["r", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["r", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", " ", 
            RowBox[{
             OverscriptBox["b", "\[RightVector]"], " ", "+", " ", 
             OverscriptBox["a", "\[RightVector]"]}], " ", ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}], 
       " ", "+", " ", 
       RowBox[{
        SubscriptBox["k", "4"], 
        OverscriptBox["s", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["s", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", " ", 
            RowBox[{
             OverscriptBox["b", "\[RightVector]"], " ", "-", " ", 
             OverscriptBox["a", "\[RightVector]"]}], " ", ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}]}],
       ")"}], 
     OverscriptBox["\[Epsilon]", "\[RightVector]"]}]}], TraditionalForm]], 
  "InlineMath"],
 "   ",
 " "
}], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.598056894559779*^9}, {
   3.598056950150959*^9, 3.5980569832608523`*^9}, {3.598057031767627*^9, 
   3.598057031774627*^9}, {3.598057330464711*^9, 3.598057330604719*^9}, {
   3.5980584907700768`*^9, 3.5980584911520987`*^9}, {3.5991428674046793`*^9, 
   3.5991429352825613`*^9}, 3.5991434894172564`*^9, {3.599143745937928*^9, 
   3.599143747597023*^9}, {3.599144339776894*^9, 3.599144393338958*^9}, {
   3.5999961526324863`*^9, 3.599996166069255*^9}, {3.6000802839234686`*^9, 
   3.6000802840794687`*^9}, {3.600823510848098*^9, 3.6008235167144337`*^9}, {
   3.6012090548449945`*^9, 3.6012090598194923`*^9}, {3.601209092614772*^9, 
   3.6012090941649265`*^9}},
 CellID->508431597],

Cell[TextData[{
 "Controls are provided to display the dynamics associated with each of the \
characteristic angular frequencies ",
 Cell[BoxData[
  FormBox["\[Omega]", TraditionalForm]]],
 ", for given reciprocal vector values ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 "."
}], "DetailNotes",
 CellID->122369289],

Cell[TextData[{
 "Three tabs are provided in this Demonstration. The primary tab displays the \
dynamics of the solution for particular pair of (",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "(", 
    OverscriptBox["q", "\[RightVector]"], ")"}], TraditionalForm]]],
 ") values. In that tab, selecting run for the time control will animate the \
lattice vibrations. A scaling control is provided to alter the initial \
magnitude of the eigenvectors, tantamount to picking the initial time \
boundary value constraints. Note that it is possible to select physically \
unrealistic scaling factors that allow for collisions that are not modelled \
by this system."
}], "DetailNotes",
 CellChangeTimes->{
  3.601208839708481*^9, {3.6012090601785283`*^9, 3.6012090619407043`*^9}, {
   3.601382813834156*^9, 3.601382893437709*^9}},
 CellID->476930990],

Cell[TextData[{
 "A second tab provides the dispersion relation, the dependence of angular \
velocity ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "(", 
    OverscriptBox["q", "\[RightVector]"], ")"}], TraditionalForm]]],
 " on all ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " points."
}], "DetailNotes",
 CellChangeTimes->{
  3.601209062576768*^9, {3.6013829455216885`*^9, 3.6013829491098933`*^9}},
 CellID->450664638],

Cell[TextData[{
 "Finally, a parameters tab provides controls for the spring constants ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", the primitive unit cell lattice vectors ",
 Cell[BoxData[
  RowBox[{
   OverscriptBox["a", "\[RightVector]"], ",", 
   OverscriptBox["b", "\[RightVector]"]}]], "InlineMath"],
 ", and the positions of the masses ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]]],
 " within each unit cell of the lattice. Additional mass position locators, \
up to five total, may be added or deleted by Alt-clicking on the lattice cell \
in the desired location. For mass locator removal, it is neccessary to adjust \
one of the other locators so that the remove takes effect. Note that it is \
possible to select equilibrium mass positions that are too proximate, leading \
to physically unrealistic dynamics, such as masses passing through each other."
}], "DetailNotes",
 CellChangeTimes->{{3.600966198344832*^9, 3.600966236435011*^9}, {
  3.6012090632078314`*^9, 3.6012090644089513`*^9}, {3.601382988189129*^9, 
  3.6013829971846433`*^9}},
 CellID->557416845],

Cell["\<\
Note that the total number of interactions, even when those interactions are \
restricted to just the neighboring lattice cells, increases fast as \
additional masses per cell are added. For example, with three masses per unit \
cell, considering only the neighboring and origin cells, there are 29 \
interactions possible for each mass. To simplify the physical constants \
dialog, which would get unwieldy if methods to choose from all possible \
couplings, distinct \"spring constant\" selection is only available for a \
subset of the possible interactions. This imposes the following respective \
constraints along the \"horizontal\", \"vertical\", \"NE diagonal\", and \"NW \
diagonal\" directions connecting the masses across the cells\
\>", "DetailNotes",
 CellChangeTimes->{{3.6008880438402157`*^9, 3.600888044919277*^9}, {
  3.6012090650310135`*^9, 3.6012090662031307`*^9}},
 CellID->204245605],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"0", ",", "1"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"0", ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", "0"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], ")"}]}], ",", "j"}]]}], 
   TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", "1"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], ")"}]}], ",", "j"}]]}], 
   TraditionalForm]]],
 " ."
}], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.598056894559779*^9}, {
   3.598056950150959*^9, 3.5980569832608523`*^9}, {3.598057031767627*^9, 
   3.598057031774627*^9}, {3.598057330464711*^9, 3.598057446094325*^9}, {
   3.59805756332403*^9, 3.5980575811080475`*^9}, {3.5980576945015335`*^9, 
   3.5980577077462907`*^9}, {3.5980585058849416`*^9, 3.598058539899887*^9}, {
   3.5982726803130836`*^9, 3.598272680323084*^9}, {3.598396857147249*^9, 
   3.598396862212539*^9}, 3.5983970077038608`*^9, {3.5986527341628847`*^9, 
   3.598652736497018*^9}, {3.599142949402369*^9, 3.599142973472746*^9}, {
   3.599144400390361*^9, 3.5991444194934535`*^9}, {3.599144544232588*^9, 
   3.599144772358636*^9}, {3.5991448024383564`*^9, 3.599144812883954*^9}, {
   3.599996318317963*^9, 3.599996379259449*^9}, {3.600076492258809*^9, 
   3.600076523646064*^9}, {3.6000766422374725`*^9, 3.600076689224755*^9}, {
   3.6000767765225077`*^9, 3.6000772270044994`*^9}, {3.6000776433692303`*^9, 
   3.6000781070644455`*^9}, {3.60007816099374*^9, 3.600078188605788*^9}, {
   3.60007853087039*^9, 3.6000790980561857`*^9}, {3.60007913498145*^9, 
   3.6000792378012314`*^9}, {3.6000792689076858`*^9, 3.600079283852512*^9}, {
   3.6000793585454435`*^9, 3.6000793899326982`*^9}, {3.6000794650156302`*^9, 
   3.600079471318041*^9}, {3.600887622755131*^9, 3.6008876400591207`*^9}},
 CellID->325571302],

Cell[TextData[{
 "These are labeled ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "1"], TraditionalForm]], "InlineMath"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "2"], TraditionalForm]], "InlineMath"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "3"], TraditionalForm]], "InlineMath"],
 ", and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "4"], TraditionalForm]], "InlineMath"],
 " in the parameters tab respectively. For example, the first identity above \
is the imposition of an equality constraint on the coupling constants in the \
\"left\" and \"right\" directions separating masses in neighboring \
\"horizontal\" cells (when the lattice is square). Those are the interactions \
directed primarily along the lattice vector directions ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[PlusMinus]", 
    OverscriptBox["a", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 " (primarily since these directions are also adjusted for the positions of \
the masses within the respective cells if different).",
 " ",
 "Similarly, the same coupling constants are used for each of the pairs of \
directions in the that are directed primarily along the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[PlusMinus]", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", \[PlusMinus](",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], " ", "+", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 "), \[PlusMinus](",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], " ", "-", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ") directions separating the lattice cells."
}], "DetailNotes",
 CellChangeTimes->{{3.6008880598061285`*^9, 3.600888064512398*^9}, {
  3.6012090668131914`*^9, 3.6012090675292635`*^9}},
 CellID->64527093],

Cell[TextData[{
 "When there is when there is more than mass per unit cell, distinct coupling \
constants for the intra-cell interactions between the masses within the \
origin unit cell may be selected (i.e. ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["0", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["0", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]]],
 ").",
 " ",
 "These are labeled ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "5"], TraditionalForm]], "InlineMath"],
 " in the parameters tab."
}], "DetailNotes",
 CellChangeTimes->{{3.600887684261649*^9, 3.6008876842696495`*^9}, 
   3.6008880700537148`*^9, 3.6012090681853285`*^9},
 CellID->209290908],

Cell["\<\
General theory describing oscillations around lattice equilibrium points can \
be found in:\
\>", "DetailNotes",
 CellID->30163790],

Cell["\<\
Neil W Ashcroft and N David Mermin. Solid State Physics. Holt, Rinehart and \
Winston, New York, 1976. Chapters 21, 22.\
\>", "DetailNotes",
 CellChangeTimes->{3.601209069027413*^9},
 CellID->213153736]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.600887285796858*^9},
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.600887286596904*^9},
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.6008872914131794`*^9},
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["one atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208909916481*^9}},
 CellID->476564237],

Cell["two atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208912380481*^9}},
 CellID->245358486],

Cell["n atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.6012089151324806`*^9}},
 CellID->584424833],

Cell["lattice vibration", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.6012089173234806`*^9}},
 CellID->103468090],

Cell["phonon", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208919819481*^9}},
 CellID->21953905],

Cell["reciprocal lattice vector", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208922747481*^9}},
 CellID->733906711],

Cell["angular frequency", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208922739481*^9}},
 CellID->200946478]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "RelatedLinksSection"],

Cell[TextData[ButtonBox["Analysis of Lattice Vibrations in Two Dimensions",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/\
AnalysisOfLatticeVibrationsInTwoDimensions/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/\
AnalysisOfLatticeVibrationsInTwoDimensions/"]], "RelatedLinks",
 CellChangeTimes->{{3.598398001761718*^9, 3.5983980017637177`*^9}, {
  3.5983985448847823`*^9, 3.598398544890783*^9}},
 CellID->24498121],

Cell[TextData[ButtonBox["Motion of Atoms in Crystal",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/MotionOfAtomsInCrystal/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/MotionOfAtomsInCrystal/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981123320417`*^9}, {3.5983985249356413`*^9, 
   3.5983985249386415`*^9}},
 CellID->28998832],

Cell[TextData[ButtonBox["Normal Modes in a Periodic Square Lattice",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/NormalModesInAPeriodicSquareLattice/\
"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/NormalModesInAPeriodicSquareLattice/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981127470655`*^9}, {3.5983984299812107`*^9, 
   3.598398430938265*^9}, {3.598398474839776*^9, 3.5983984748437767`*^9}},
 CellID->63968418],

Cell[TextData[ButtonBox["Simple Harmonic Motion for a Spring",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/SimpleHarmonicMotionForASpring/"], 
   None},
 ButtonNote->
  "http://demonstrations.wolfram.com/SimpleHarmonicMotionForASpring/"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.598398001761718*^9, {3.598398067522479*^9, 3.5983980715767107`*^9}, {
   3.5983981123290415`*^9, 3.5983981127470655`*^9}, {3.5983984299812107`*^9, 
   3.5983984299832106`*^9}, {3.5983985017343144`*^9, 3.598398501741315*^9}},
 CellID->611518950]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell[TextData[{
 "Contributed by: ",
 ButtonBox["Peeter Joot",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Peeter+Joot"], 
    None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Peeter+Joot"]
}], "Author",
 CellChangeTimes->{
  3.600887159561638*^9, {3.601208952954481*^9, 3.601208952959481*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1584, 765},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ResizeImages"->{
  Cell[1954069, 35165, 312, 8, 30, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[1954384, 35175, 719, 17, 30, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "DragLocators"->{
  Cell[1955106, 35194, 381, 12, 30, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "CreateAndDeleteLocators"->{
  Cell[1955490, 35208, 680, 16, 30, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "SliderZoom"->{
  Cell[1956173, 35226, 844, 21, 30, "ControlSuggestions",
   CellTags->"SliderZoom"]},
 "GamepadControls"->{
  Cell[1957020, 35249, 369, 9, 30, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "AutomaticAnimation"->{
  Cell[1957392, 35260, 1464, 31, 30, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[1958859, 35293, 908, 21, 30, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ResizeImages", 1964107, 35445},
 {"RotateAndZoomIn3D", 1964219, 35448},
 {"DragLocators", 1964332, 35451},
 {"CreateAndDeleteLocators", 1964451, 35454},
 {"SliderZoom", 1964568, 35457},
 {"GamepadControls", 1964677, 35460},
 {"AutomaticAnimation", 1964793, 35463},
 {"BookmarkAnimation", 1964913, 35466}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 101, 1, 98, "DemoTitle"],
Cell[CellGroupData[{
Cell[705, 27, 33, 0, 365, "InitializationSection"],
Cell[741, 29, 100715, 2387, 11688, "Input",
 InitializationCell->True,
 CellID->454600298]
}, Open  ]],
Cell[CellGroupData[{
Cell[101493, 2421, 29, 0, 311, "ManipulateSection"],
Cell[CellGroupData[{
Cell[101547, 2425, 96038, 2027, 10266, "Input",
 CellID->106836794],
Cell[197588, 4454, 342359, 5881, 606, "Output",
 CellID->415535414]
}, Open  ]],
Cell[539962, 10338, 105, 2, 32, "Input",
 CellID->534877709]
}, Open  ]],
Cell[CellGroupData[{
Cell[540104, 10345, 36, 0, 228, "ManipulateCaptionSection"],
Cell[540143, 10347, 1155, 18, 106, "ManipulateCaption"]
}, Open  ]],
Cell[CellGroupData[{
Cell[541335, 10370, 28, 0, 229, "ThumbnailSection"],
Cell[541366, 10372, 342359, 5881, 606, "Output",
 CellID->211254071]
}, Open  ]],
Cell[CellGroupData[{
Cell[883762, 16258, 28, 0, 189, "SnapshotsSection"],
Cell[883793, 16260, 283765, 5016, 606, "Output",
 CellID->50523710],
Cell[1167561, 21278, 295786, 5123, 598, "Output",
 CellID->216711214],
Cell[1463350, 26403, 462573, 7959, 598, "Output",
 CellID->102477150]
}, Open  ]],
Cell[CellGroupData[{
Cell[1925960, 34367, 26, 0, 452, "DetailsSection"],
Cell[1925989, 34369, 1774, 56, 68, "DetailNotes",
 CellID->143536934],
Cell[1927766, 34427, 2521, 81, 66, "DetailNotes",
 CellID->185095190],
Cell[1930290, 34510, 1466, 42, 50, "DetailNotes",
 CellID->413013362],
Cell[1931759, 34554, 1371, 44, 74, "DetailNotes",
 CellID->160232404],
Cell[1933133, 34600, 2874, 70, 55, "DetailNotes",
 CellID->323301769],
Cell[1936010, 34672, 2355, 64, 76, "DetailNotes",
 CellID->72937650],
Cell[1938368, 34738, 1327, 32, 72, "DetailNotes",
 CellID->69846009],
Cell[1939698, 34772, 3782, 100, 59, "DetailNotes",
 CellID->508431597],
Cell[1943483, 34874, 375, 11, 29, "DetailNotes",
 CellID->122369289],
Cell[1943861, 34887, 958, 21, 68, "DetailNotes",
 CellID->476930990],
Cell[1944822, 34910, 488, 15, 29, "DetailNotes",
 CellID->450664638],
Cell[1945313, 34927, 1332, 30, 96, "DetailNotes",
 CellID->557416845],
Cell[1946648, 34959, 914, 14, 86, "DetailNotes",
 CellID->204245605],
Cell[1947565, 34975, 3421, 94, 38, "DetailNotes",
 CellID->325571302],
Cell[1950989, 35071, 1908, 51, 93, "DetailNotes",
 CellID->64527093],
Cell[1952900, 35124, 733, 21, 58, "DetailNotes",
 CellID->209290908],
Cell[1953636, 35147, 141, 4, 28, "DetailNotes",
 CellID->30163790],
Cell[1953780, 35153, 212, 5, 28, "DetailNotes",
 CellID->213153736]
}, Open  ]],
Cell[CellGroupData[{
Cell[1954029, 35163, 37, 0, 168, "ControlSuggestionsSection"],
Cell[1954069, 35165, 312, 8, 30, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[1954384, 35175, 719, 17, 30, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[1955106, 35194, 381, 12, 30, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[1955490, 35208, 680, 16, 30, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[1956173, 35226, 844, 21, 30, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[1957020, 35249, 369, 9, 30, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[1957392, 35260, 1464, 31, 30, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[1958859, 35293, 908, 21, 30, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1959804, 35319, 30, 0, 208, "SearchTermsSection"],
Cell[1959837, 35321, 174, 3, 28, "SearchTerms",
 CellID->476564237],
Cell[1960014, 35326, 174, 3, 28, "SearchTerms",
 CellID->245358486],
Cell[1960191, 35331, 174, 3, 28, "SearchTerms",
 CellID->584424833],
Cell[1960368, 35336, 179, 3, 28, "SearchTerms",
 CellID->103468090],
Cell[1960550, 35341, 165, 3, 28, "SearchTerms",
 CellID->21953905],
Cell[1960718, 35346, 185, 3, 28, "SearchTerms",
 CellID->733906711],
Cell[1960906, 35351, 177, 3, 28, "SearchTerms",
 CellID->200946478]
}, Open  ]],
Cell[CellGroupData[{
Cell[1961120, 35359, 31, 0, 188, "RelatedLinksSection"],
Cell[1961154, 35361, 468, 10, 28, "RelatedLinks",
 CellID->24498121],
Cell[1961625, 35373, 486, 11, 28, "RelatedLinks",
 CellID->28998832],
Cell[1962114, 35386, 575, 12, 28, "RelatedLinks",
 CellID->63968418],
Cell[1962692, 35400, 564, 12, 28, "RelatedLinks",
 CellID->611518950]
}, Open  ]],
Cell[CellGroupData[{
Cell[1963293, 35417, 25, 0, 188, "AuthorSection"],
Cell[1963321, 35419, 384, 11, 28, "Author"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
